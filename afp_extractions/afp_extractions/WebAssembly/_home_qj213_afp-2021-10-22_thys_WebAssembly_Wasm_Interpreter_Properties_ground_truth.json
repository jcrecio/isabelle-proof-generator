{"file_name": "/home/qj213/afp-2021-10-22/thys/WebAssembly/Wasm_Interpreter_Properties.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/WebAssembly", "problem_names": ["lemma is_const_list_vs_to_es_list: \"const_list ($$* vs)\"", "lemma not_const_vs_to_es_list:\n  assumes \"~(is_const e)\"\n  shows \"vs1 @ [e] @ vs2 \\<noteq> $$* vs\"", "lemma neq_label_nested:\"[Label n les es] \\<noteq> es\"", "lemma neq_local_nested:\"[Local n i lvs es] \\<noteq> es\"", "lemma trap_not_value:\"[Trap] \\<noteq> $$*es\"", "lemma lfilled_single:\n  assumes \"Lfilled k lholed es [e]\"\n          \"\\<And> a b c. e \\<noteq> Label a b c\"\n  shows \"(es = [e] \\<and> lholed = LBase [] []) \\<or> es = []\"", "lemma lfilled_eq:\n  assumes \"Lfilled j lholed es LI\"\n          \"Lfilled j lholed es' LI\"\n  shows \"es = es'\"", "lemma lfilled_size:\n  assumes \"Lfilled j lholed es LI\"\n  shows \"size_list size LI \\<ge> size_list size es\"", "lemma reduce_simple_not_eq:\n  assumes \"\\<lparr>es\\<rparr> \\<leadsto> \\<lparr>es'\\<rparr>\"\n  shows \"es \\<noteq> es'\"", "lemma reduce_not_eq:\n  assumes \"\\<lparr>s;vs;es\\<rparr> \\<leadsto>_i \\<lparr>s';vs';es'\\<rparr>\"\n  shows \"es \\<noteq> es'\"", "lemma reduce_simple_not_value:\n  assumes \"\\<lparr>es\\<rparr> \\<leadsto> \\<lparr>es'\\<rparr>\"\n  shows \"es \\<noteq> $$* vs\"", "lemma reduce_not_value:\n  assumes \"\\<lparr>s;vs;es\\<rparr> \\<leadsto>_i \\<lparr>s';vs';es'\\<rparr>\"\n  shows \"es \\<noteq> $$* ves\"", "lemma reduce_simple_not_nil:\n  assumes \"\\<lparr>es\\<rparr> \\<leadsto> \\<lparr>es'\\<rparr>\"\n  shows \"es \\<noteq> []\"", "lemma reduce_not_nil:\n  assumes \"\\<lparr>s;vs;es\\<rparr> \\<leadsto>_i \\<lparr>s';vs';es'\\<rparr>\"\n  shows \"es \\<noteq> []\"", "lemma reduce_simple_not_trap:\n  assumes \"\\<lparr>es\\<rparr> \\<leadsto> \\<lparr>es'\\<rparr>\"\n  shows \"es \\<noteq> [Trap]\"", "lemma reduce_not_trap:\n  assumes \"\\<lparr>s;vs;es\\<rparr> \\<leadsto>_i \\<lparr>s';vs';es'\\<rparr>\"\n  shows \"es \\<noteq> [Trap]\"", "lemma reduce_simple_call: \"\\<not>\\<lparr>[$Call j]\\<rparr> \\<leadsto> \\<lparr>es'\\<rparr>\"", "lemma reduce_call:\n  assumes \"\\<lparr>s;vs;[$Call j]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\"\n  shows \"s = s'\"\n        \"vs = vs'\"\n        \"es' = [Callcl (sfunc s i j)]\"", "lemma run_one_step_basic_unreachable_result:\n  assumes \"run_one_step d i (s,vs,ves,$Unreachable) = (s', vs', res)\"\n  shows \"\\<exists>r. res = RSNormal r\"", "lemma run_one_step_basic_nop_result:\n  assumes \"run_one_step d i (s,vs,ves,$Nop) = (s', vs', res)\"\n  shows \"\\<exists>r. res = RSNormal r\"", "lemma run_one_step_basic_drop_result:\n  assumes \"run_one_step d i (s,vs,ves,$Drop) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\"", "lemma run_one_step_basic_select_result:\n  assumes \"run_one_step d i (s,vs,ves,$Select) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\"", "lemma run_one_step_basic_block_result:\n  assumes \"run_one_step d i (s,vs,ves,$(Block x51 x52)) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\"", "lemma run_one_step_basic_loop_result:\n  assumes \"run_one_step d i (s,vs,ves,$(Loop x61 x62)) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\"", "lemma run_one_step_basic_if_result:\n  assumes \"run_one_step d i (s,vs,ves,$(If x71 x72 x73)) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\"", "lemma run_one_step_basic_br_result:\n  assumes \"run_one_step d i (s,vs,ves,$Br x8) = (s', vs', res)\"\n  shows \"\\<exists>r vrs. res = RSBreak r vrs\"", "lemma run_one_step_basic_br_if_result:\n  assumes \"run_one_step d i (s,vs,ves,$Br_if x9) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\"", "lemma run_one_step_basic_br_table_result:\n  assumes \"run_one_step d i (s,vs,ves,$Br_table js j) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\"", "lemma run_one_step_basic_return_result:\n  assumes \"run_one_step d i (s,vs,ves,$Return) = (s', vs', res)\"\n  shows \"\\<exists>vrs. res = RSReturn vrs\"", "lemma run_one_step_basic_call_result:\n  assumes \"run_one_step d i (s,vs,ves,$Call x12) = (s', vs', res)\"\n  shows \"\\<exists>r. res = RSNormal r\"", "lemma run_one_step_basic_call_indirect_result:\n  assumes \"run_one_step d i (s,vs,ves,$Call_indirect x13) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\"", "lemma run_one_step_basic_get_local_result:\n  assumes \"run_one_step d i (s,vs,ves,$Get_local x14) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\"", "lemma run_one_step_basic_set_local_result:\n  assumes \"run_one_step d i (s,vs,ves,$Set_local x15) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\"", "lemma run_one_step_basic_tee_local_result:\n  assumes \"run_one_step d i (s,vs,ves,$Tee_local x16) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\"", "lemma run_one_step_basic_get_global_result:\n  assumes \"run_one_step d i (s,vs,ves,$Get_global x17) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\"", "lemma run_one_step_basic_set_global_result:\n  assumes \"run_one_step d i (s,vs,ves,$Set_global x18) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\"", "lemma run_one_step_basic_load_result:\n  assumes \"run_one_step d i (s,vs,ves,$Load x191 x192 x193 x194) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\"", "lemma run_one_step_basic_store_result:\n  assumes \"run_one_step d i (s,vs,ves,$Store x201 x202 x203 x204) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\"", "lemma run_one_step_basic_current_memory_result:\n  assumes \"run_one_step d i (s,vs,ves,$Current_memory) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\"", "lemma run_one_step_basic_grow_memory_result:\n  assumes \"run_one_step d i (s,vs,ves,$Grow_memory) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\"", "lemma run_one_step_basic_const_result:\n  assumes \"run_one_step d i (s,vs,ves,$EConst x23) = (s', vs', res)\"\n  shows \"\\<exists>e. res = RSCrash e\"", "lemma run_one_step_basic_unop_i_result:\n  assumes \"run_one_step d i (s,vs,ves,$Unop_i x241 x242) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\"", "lemma run_one_step_basic_unop_f_result:\n  assumes \"run_one_step d i (s,vs,ves,$Unop_f x251 x252) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\"", "lemma run_one_step_basic_binop_i_result:\n  assumes \"run_one_step d i (s,vs,ves,$Binop_i x261 x262) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\"", "lemma run_one_step_basic_binop_f_result:\n  assumes \"run_one_step d i (s,vs,ves,$Binop_f x271 x272) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\"", "lemma run_one_step_basic_testop_result:\n  assumes \"run_one_step d i (s,vs,ves,$Testop x281 x282) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\"", "lemma run_one_step_basic_relop_i_result:\n  assumes \"run_one_step d i (s,vs,ves,$Relop_i x291 x292) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\"", "lemma run_one_step_basic_relop_f_result:\n  assumes \"run_one_step d i (s,vs,ves,$Relop_f x301 x302) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\"", "lemma run_one_step_basic_cvtop_result:\n  assumes \"run_one_step d i (s,vs,ves,$Cvtop t2 x312 t1 sx) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\"", "lemma run_one_step_trap_result:\n  assumes \"run_one_step d i (s,vs,ves,Trap) = (s', vs', res)\"\n  shows \"\\<exists>e. res = RSCrash e\"", "lemma run_one_step_callcl_result:\n  assumes \"run_one_step d i (s,vs,ves,Callcl cl) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\"", "lemma run_one_step_label_result:\n  assumes \"run_one_step d i (s,vs,ves,Label x41 x42 x43) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>r rvs. res = RSBreak r rvs) \\<or> (\\<exists>rvs. res = RSReturn rvs) \\<or> (\\<exists>e. res = RSCrash e)\"", "lemma run_one_step_local_result:\n  assumes \"run_one_step d i (s,vs,ves,Local x51 x52 x53 x54) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\"", "lemma run_one_step_break:\n  assumes \"run_one_step d i (s,vs,ves,e) = (s', vs', RSBreak n res)\"\n  shows \"(e = $Br n) \\<or> (\\<exists>n les es. e = Label n les es)\"", "lemma run_one_step_return:\n  assumes \"run_one_step d i (s,vs,ves,e) = (s', vs', RSReturn res)\"\n  shows \"(e = $Return) \\<or> (\\<exists>n les es. e = Label n les es)\"", "lemma run_step_break_imp_not_trap_const_list:\n  assumes \"run_step d i (s, vs, es) = (s', vs', RSBreak n res)\"\n  shows \"es \\<noteq> [Trap]\" \"\\<not>const_list es\"", "lemma run_step_return_imp_not_trap_const_list:\n  assumes \"run_step d i (s, vs, es) = (s', vs', RSReturn res)\"\n  shows \"es \\<noteq> [Trap]\" \"\\<not>const_list es\"", "lemma run_one_step_label_break_imp_break:\n  assumes \"run_one_step d i (s, vs, ves, Label ln les es) = (s', vs', RSBreak n res)\"\n  shows \"run_step d i (s, vs, es) = (s', vs', RSBreak (Suc n) res)\"", "lemma run_one_step_label_return_imp_return:\n  assumes \"run_one_step d i (s, vs, ves, Label n les es) = (s', vs', RSReturn res)\"\n  shows \"run_step d i (s, vs, es) = (s', vs', RSReturn res)\"", "lemma run_step_break_imp_lfilled:\n  assumes \"run_step d i (s,vs,es) = (s', vs', RSBreak n res)\"\n  shows \"s = s' \\<and>\n         vs = vs' \\<and>\n         (\\<exists>n' lfilled es_c. n' \\<ge> n \\<and>\n                            Lfilled_exact (n'-n) lfilled ((vs_to_es res) @ [$Br n'] @ es_c) es)\"", "lemma run_step_return_imp_lfilled:\n  assumes \"run_step d i (s,vs,es) = (s', vs', RSReturn res)\"\n  shows \"s = s' \\<and> vs = vs' \\<and> (\\<exists>n lfilled es_c. Lfilled_exact n lfilled ((vs_to_es res) @ [$Return] @ es_c) es)\"", "lemma run_step_basic_unop_testop_sound:\n  assumes \"(run_one_step d i (s,vs,ves,$b_e) = (s', vs', RSNormal es'))\"\n          \"b_e = Unop_i t iop \\<or> b_e = Unop_f t fop \\<or> b_e = Testop t testop\"\n  shows \"\\<lparr>s;vs;(vs_to_es ves)@[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\"", "lemma run_step_basic_binop_relop_sound:\n  assumes \"(run_one_step d i (s,vs,ves,$b_e) = (s', vs', RSNormal es'))\"\n          \"b_e = Binop_i t iop \\<or> b_e = Binop_f t fop \\<or> b_e = Relop_i t irop \\<or> b_e = Relop_f t frop\"\n  shows \"\\<lparr>s;vs;(vs_to_es ves)@[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\"", "lemma run_step_basic_sound:\n  assumes \"(run_one_step d i (s,vs,ves,$b_e) = (s', vs', RSNormal es'))\"\n  shows \"\\<lparr>s;vs;(vs_to_es ves)@[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\"", "theorem run_step_sound:\n  assumes \"run_step d i (s,vs,es) = (s', vs', RSNormal es')\"\n  shows \"\\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\""], "translations": [["", "lemma is_const_list_vs_to_es_list: \"const_list ($$* vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. const_list ($$* vs)", "using is_const_list"], ["proof (prove)\nusing this:\n  ?ves = $$* ?vs \\<Longrightarrow> const_list ?ves\n\ngoal (1 subgoal):\n 1. const_list ($$* vs)", "by auto"], ["", "lemma not_const_vs_to_es_list:\n  assumes \"~(is_const e)\"\n  shows \"vs1 @ [e] @ vs2 \\<noteq> $$* vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vs1 @ [e] @ vs2 \\<noteq> $$* vs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vs1 @ [e] @ vs2 \\<noteq> $$* vs", "fix vs"], ["proof (state)\ngoal (1 subgoal):\n 1. vs1 @ [e] @ vs2 \\<noteq> $$* vs", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. vs1 @ [e] @ vs2 \\<noteq> $$* vs", "assume \"vs1 @ [e] @ vs2 = $$* vs\""], ["proof (state)\nthis:\n  vs1 @ [e] @ vs2 = $$* vs\n\ngoal (1 subgoal):\n 1. vs1 @ [e] @ vs2 \\<noteq> $$* vs", "hence \"(\\<forall>y\\<in>set (vs1 @ [e] @ vs2). \\<exists>x. y = $C x)\""], ["proof (prove)\nusing this:\n  vs1 @ [e] @ vs2 = $$* vs\n\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>set (vs1 @ [e] @ vs2). \\<exists>x. y = $C x", "by simp"], ["proof (state)\nthis:\n  \\<forall>y\\<in>set (vs1 @ [e] @ vs2). \\<exists>x. y = $C x\n\ngoal (1 subgoal):\n 1. vs1 @ [e] @ vs2 \\<noteq> $$* vs", "hence False"], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>set (vs1 @ [e] @ vs2). \\<exists>x. y = $C x\n\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>set (vs1 @ [e] @ vs2). \\<exists>x. y = $C x\n  \\<not> is_const e\n\ngoal (1 subgoal):\n 1. False", "unfolding is_const_def"], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>set (vs1 @ [e] @ vs2). \\<exists>x. y = $C x\n  \\<not> (case e of $C xa \\<Rightarrow> True | $_ \\<Rightarrow> False\n          | _ \\<Rightarrow> False)\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. vs1 @ [e] @ vs2 \\<noteq> $$* vs", "}"], ["proof (state)\nthis:\n  vs1 @ [e] @ vs2 = $$* vs \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. vs1 @ [e] @ vs2 \\<noteq> $$* vs", "thus \"vs1 @ [e] @ vs2 \\<noteq> $$* vs\""], ["proof (prove)\nusing this:\n  vs1 @ [e] @ vs2 = $$* vs \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. vs1 @ [e] @ vs2 \\<noteq> $$* vs", "by fastforce"], ["proof (state)\nthis:\n  vs1 @ [e] @ vs2 \\<noteq> $$* vs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma neq_label_nested:\"[Label n les es] \\<noteq> es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [Label n les es] \\<noteq> es", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. [Label n les es] \\<noteq> es", "have \"size_list size [Label n les es] > size_list size es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size_list size es < size_list size [Label n les es]", "by simp"], ["proof (state)\nthis:\n  size_list size es < size_list size [Label n les es]\n\ngoal (1 subgoal):\n 1. [Label n les es] \\<noteq> es", "thus ?thesis"], ["proof (prove)\nusing this:\n  size_list size es < size_list size [Label n les es]\n\ngoal (1 subgoal):\n 1. [Label n les es] \\<noteq> es", "by fastforce"], ["proof (state)\nthis:\n  [Label n les es] \\<noteq> es\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma neq_local_nested:\"[Local n i lvs es] \\<noteq> es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [Local n i lvs es] \\<noteq> es", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. [Local n i lvs es] \\<noteq> es", "have \"size_list size [Local n i lvs es] > size_list size es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size_list size es < size_list size [Local n i lvs es]", "by simp"], ["proof (state)\nthis:\n  size_list size es < size_list size [Local n i lvs es]\n\ngoal (1 subgoal):\n 1. [Local n i lvs es] \\<noteq> es", "thus ?thesis"], ["proof (prove)\nusing this:\n  size_list size es < size_list size [Local n i lvs es]\n\ngoal (1 subgoal):\n 1. [Local n i lvs es] \\<noteq> es", "by fastforce"], ["proof (state)\nthis:\n  [Local n i lvs es] \\<noteq> es\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma trap_not_value:\"[Trap] \\<noteq> $$*es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [Trap] \\<noteq> $$* es", "by fastforce"], ["", "thm Lfilled.simps[of _ _ _ \"[e]\", simplified]"], ["", "lemma lfilled_single:\n  assumes \"Lfilled k lholed es [e]\"\n          \"\\<And> a b c. e \\<noteq> Label a b c\"\n  shows \"(es = [e] \\<and> lholed = LBase [] []) \\<or> es = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. es = [e] \\<and> lholed = LBase [] [] \\<or> es = []", "using assms"], ["proof (prove)\nusing this:\n  Lfilled k lholed es [e]\n  e \\<noteq> Label ?a ?b ?c\n\ngoal (1 subgoal):\n 1. es = [e] \\<and> lholed = LBase [] [] \\<or> es = []", "proof (cases rule: Lfilled.cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>vs es'.\n       \\<lbrakk>\\<And>a b c. e \\<noteq> Label a b c; k = 0;\n        [e] = vs @ es @ es'; const_list vs; lholed = LBase vs es'\\<rbrakk>\n       \\<Longrightarrow> es = [e] \\<and> lholed = LBase [] [] \\<or> es = []\n 2. \\<And>vs n es' l es'' ka lfilledk.\n       \\<lbrakk>\\<And>a b c. e \\<noteq> Label a b c; k = ka + 1;\n        [e] = vs @ [Label n es' lfilledk] @ es''; const_list vs;\n        lholed = LRec vs n es' l es''; Lfilled ka l es lfilledk\\<rbrakk>\n       \\<Longrightarrow> es = [e] \\<and> lholed = LBase [] [] \\<or> es = []", "case (L0 vs es')"], ["proof (state)\nthis:\n  k = 0\n  [e] = vs @ es @ es'\n  const_list vs\n  lholed = LBase vs es'\n\ngoal (2 subgoals):\n 1. \\<And>vs es'.\n       \\<lbrakk>\\<And>a b c. e \\<noteq> Label a b c; k = 0;\n        [e] = vs @ es @ es'; const_list vs; lholed = LBase vs es'\\<rbrakk>\n       \\<Longrightarrow> es = [e] \\<and> lholed = LBase [] [] \\<or> es = []\n 2. \\<And>vs n es' l es'' ka lfilledk.\n       \\<lbrakk>\\<And>a b c. e \\<noteq> Label a b c; k = ka + 1;\n        [e] = vs @ [Label n es' lfilledk] @ es''; const_list vs;\n        lholed = LRec vs n es' l es''; Lfilled ka l es lfilledk\\<rbrakk>\n       \\<Longrightarrow> es = [e] \\<and> lholed = LBase [] [] \\<or> es = []", "thus ?thesis"], ["proof (prove)\nusing this:\n  k = 0\n  [e] = vs @ es @ es'\n  const_list vs\n  lholed = LBase vs es'\n\ngoal (1 subgoal):\n 1. es = [e] \\<and> lholed = LBase [] [] \\<or> es = []", "by (metis Nil_is_append_conv append_self_conv2 butlast_append butlast_snoc)"], ["proof (state)\nthis:\n  es = [e] \\<and> lholed = LBase [] [] \\<or> es = []\n\ngoal (1 subgoal):\n 1. \\<And>vs n es' l es'' ka lfilledk.\n       \\<lbrakk>\\<And>a b c. e \\<noteq> Label a b c; k = ka + 1;\n        [e] = vs @ [Label n es' lfilledk] @ es''; const_list vs;\n        lholed = LRec vs n es' l es''; Lfilled ka l es lfilledk\\<rbrakk>\n       \\<Longrightarrow> es = [e] \\<and> lholed = LBase [] [] \\<or> es = []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>vs n es' l es'' ka lfilledk.\n       \\<lbrakk>\\<And>a b c. e \\<noteq> Label a b c; k = ka + 1;\n        [e] = vs @ [Label n es' lfilledk] @ es''; const_list vs;\n        lholed = LRec vs n es' l es''; Lfilled ka l es lfilledk\\<rbrakk>\n       \\<Longrightarrow> es = [e] \\<and> lholed = LBase [] [] \\<or> es = []", "case (LN vs n es' l es'' k lfilledk)"], ["proof (state)\nthis:\n  k = k + 1\n  [e] = vs @ [Label n es' lfilledk] @ es''\n  const_list vs\n  lholed = LRec vs n es' l es''\n  Lfilled k l es lfilledk\n\ngoal (1 subgoal):\n 1. \\<And>vs n es' l es'' ka lfilledk.\n       \\<lbrakk>\\<And>a b c. e \\<noteq> Label a b c; k = ka + 1;\n        [e] = vs @ [Label n es' lfilledk] @ es''; const_list vs;\n        lholed = LRec vs n es' l es''; Lfilled ka l es lfilledk\\<rbrakk>\n       \\<Longrightarrow> es = [e] \\<and> lholed = LBase [] [] \\<or> es = []", "assume \"(\\<And>a b c. e \\<noteq> Label a b c)\""], ["proof (state)\nthis:\n  e \\<noteq> Label ?a ?b ?c\n\ngoal (1 subgoal):\n 1. \\<And>vs n es' l es'' ka lfilledk.\n       \\<lbrakk>\\<And>a b c. e \\<noteq> Label a b c; k = ka + 1;\n        [e] = vs @ [Label n es' lfilledk] @ es''; const_list vs;\n        lholed = LRec vs n es' l es''; Lfilled ka l es lfilledk\\<rbrakk>\n       \\<Longrightarrow> es = [e] \\<and> lholed = LBase [] [] \\<or> es = []", "thus ?thesis"], ["proof (prove)\nusing this:\n  e \\<noteq> Label ?a ?b ?c\n\ngoal (1 subgoal):\n 1. es = [e] \\<and> lholed = LBase [] [] \\<or> es = []", "using LN(2)"], ["proof (prove)\nusing this:\n  e \\<noteq> Label ?a ?b ?c\n  [e] = vs @ [Label n es' lfilledk] @ es''\n\ngoal (1 subgoal):\n 1. es = [e] \\<and> lholed = LBase [] [] \\<or> es = []", "unfolding Cons_eq_append_conv"], ["proof (prove)\nusing this:\n  e \\<noteq> Label ?a ?b ?c\n  vs = [] \\<and>\n  ([Label n es' lfilledk] = [] \\<and> [e] = es'' \\<or>\n   (\\<exists>ys'.\n       e # ys' = [Label n es' lfilledk] \\<and> [] = ys' @ es'')) \\<or>\n  (\\<exists>ys'.\n      e # ys' = vs \\<and> [] = ys' @ [Label n es' lfilledk] @ es'')\n\ngoal (1 subgoal):\n 1. es = [e] \\<and> lholed = LBase [] [] \\<or> es = []", "by fastforce"], ["proof (state)\nthis:\n  es = [e] \\<and> lholed = LBase [] [] \\<or> es = []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lfilled_eq:\n  assumes \"Lfilled j lholed es LI\"\n          \"Lfilled j lholed es' LI\"\n  shows \"es = es'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. es = es'", "using assms"], ["proof (prove)\nusing this:\n  Lfilled j lholed es LI\n  Lfilled j lholed es' LI\n\ngoal (1 subgoal):\n 1. es = es'", "proof (induction arbitrary: es' rule: Lfilled.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>vs lholed es' es es'a.\n       \\<lbrakk>const_list vs; lholed = LBase vs es';\n        Lfilled 0 lholed es'a (vs @ es @ es')\\<rbrakk>\n       \\<Longrightarrow> es = es'a\n 2. \\<And>vs lholed n es' l es'' k es lfilledk es'a.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        \\<And>es'. Lfilled k l es' lfilledk \\<Longrightarrow> es = es';\n        Lfilled (k + 1) lholed es'a\n         (vs @ [Label n es' lfilledk] @ es'')\\<rbrakk>\n       \\<Longrightarrow> es = es'a", "case (L0 vs lholed es' es)"], ["proof (state)\nthis:\n  const_list vs\n  lholed = LBase vs es'a__\n  Lfilled 0 lholed es' (vs @ es @ es'a__)\n\ngoal (2 subgoals):\n 1. \\<And>vs lholed es' es es'a.\n       \\<lbrakk>const_list vs; lholed = LBase vs es';\n        Lfilled 0 lholed es'a (vs @ es @ es')\\<rbrakk>\n       \\<Longrightarrow> es = es'a\n 2. \\<And>vs lholed n es' l es'' k es lfilledk es'a.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        \\<And>es'. Lfilled k l es' lfilledk \\<Longrightarrow> es = es';\n        Lfilled (k + 1) lholed es'a\n         (vs @ [Label n es' lfilledk] @ es'')\\<rbrakk>\n       \\<Longrightarrow> es = es'a", "thus ?case"], ["proof (prove)\nusing this:\n  const_list vs\n  lholed = LBase vs es'a__\n  Lfilled 0 lholed es' (vs @ es @ es'a__)\n\ngoal (1 subgoal):\n 1. es = es'", "using Lfilled.simps[of 0, simplified]"], ["proof (prove)\nusing this:\n  const_list vs\n  lholed = LBase vs es'a__\n  Lfilled 0 lholed es' (vs @ es @ es'a__)\n  Lfilled 0 ?a2.0 ?a3.0 ?a4.0 =\n  (\\<exists>vs es'.\n      ?a4.0 = vs @ ?a3.0 @ es' \\<and>\n      const_list vs \\<and> ?a2.0 = LBase vs es')\n\ngoal (1 subgoal):\n 1. es = es'", "by auto"], ["proof (state)\nthis:\n  es = es'\n\ngoal (1 subgoal):\n 1. \\<And>vs lholed n es' l es'' k es lfilledk es'a.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        \\<And>es'. Lfilled k l es' lfilledk \\<Longrightarrow> es = es';\n        Lfilled (k + 1) lholed es'a\n         (vs @ [Label n es' lfilledk] @ es'')\\<rbrakk>\n       \\<Longrightarrow> es = es'a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>vs lholed n es' l es'' k es lfilledk es'a.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        \\<And>es'. Lfilled k l es' lfilledk \\<Longrightarrow> es = es';\n        Lfilled (k + 1) lholed es'a\n         (vs @ [Label n es' lfilledk] @ es'')\\<rbrakk>\n       \\<Longrightarrow> es = es'a", "case (LN vs lholed n les' l les'' k les lfilledk)"], ["proof (state)\nthis:\n  const_list vs\n  lholed = LRec vs n les' l les''\n  Lfilled k l les lfilledk\n  Lfilled k l ?es' lfilledk \\<Longrightarrow> les = ?es'\n  Lfilled (k + 1) lholed es' (vs @ [Label n les' lfilledk] @ les'')\n\ngoal (1 subgoal):\n 1. \\<And>vs lholed n es' l es'' k es lfilledk es'a.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        \\<And>es'. Lfilled k l es' lfilledk \\<Longrightarrow> es = es';\n        Lfilled (k + 1) lholed es'a\n         (vs @ [Label n es' lfilledk] @ es'')\\<rbrakk>\n       \\<Longrightarrow> es = es'a", "thus ?case"], ["proof (prove)\nusing this:\n  const_list vs\n  lholed = LRec vs n les' l les''\n  Lfilled k l les lfilledk\n  Lfilled k l ?es' lfilledk \\<Longrightarrow> les = ?es'\n  Lfilled (k + 1) lholed es' (vs @ [Label n les' lfilledk] @ les'')\n\ngoal (1 subgoal):\n 1. les = es'", "using Lfilled.simps[of \"(k+1)\" \"LRec vs n les' l les''\" es' \"(vs @ [Label n les' lfilledk] @ les'')\", simplified]"], ["proof (prove)\nusing this:\n  const_list vs\n  lholed = LRec vs n les' l les''\n  Lfilled k l les lfilledk\n  Lfilled k l ?es' lfilledk \\<Longrightarrow> les = ?es'\n  Lfilled (k + 1) lholed es' (vs @ [Label n les' lfilledk] @ les'')\n  Lfilled (Suc k) (LRec vs n les' l les'') es'\n   (vs @ Label n les' lfilledk # les'') =\n  (const_list vs \\<and> Lfilled k l es' lfilledk)\n\ngoal (1 subgoal):\n 1. les = es'", "by auto"], ["proof (state)\nthis:\n  les = es'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lfilled_size:\n  assumes \"Lfilled j lholed es LI\"\n  shows \"size_list size LI \\<ge> size_list size es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size_list size es \\<le> size_list size LI", "using assms"], ["proof (prove)\nusing this:\n  Lfilled j lholed es LI\n\ngoal (1 subgoal):\n 1. size_list size es \\<le> size_list size LI", "by (induction rule: Lfilled.induct) auto"], ["", "thm Lfilled.simps[of _ _ es es, simplified]"], ["", "lemma reduce_simple_not_eq:\n  assumes \"\\<lparr>es\\<rparr> \\<leadsto> \\<lparr>es'\\<rparr>\"\n  shows \"es \\<noteq> es'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. es \\<noteq> es'", "using assms"], ["proof (prove)\nusing this:\n  \\<lparr>es\\<rparr> \\<leadsto> \\<lparr>es'\\<rparr>\n\ngoal (1 subgoal):\n 1. es \\<noteq> es'", "proof (induction es' rule: reduce_simple.induct)"], ["proof (state)\ngoal (42 subgoals):\n 1. \\<And>c iop.\n       [$C ConstInt32 c, $Unop_i T_i32 iop] \\<noteq>\n       [$C ConstInt32 (app_unop_i iop c)]\n 2. \\<And>c iop.\n       [$C ConstInt64 c, $Unop_i T_i64 iop] \\<noteq>\n       [$C ConstInt64 (app_unop_i iop c)]\n 3. \\<And>c fop.\n       [$C ConstFloat32 c, $Unop_f T_f32 fop] \\<noteq>\n       [$C ConstFloat32 (app_unop_f fop c)]\n 4. \\<And>c fop.\n       [$C ConstFloat64 c, $Unop_f T_f64 fop] \\<noteq>\n       [$C ConstFloat64 (app_unop_f fop c)]\n 5. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       [$C ConstInt32 c]\n 6. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       [Trap]\n 7. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       [$C ConstInt64 c]\n 8. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       [Trap]\n 9. \\<And>fop c1 c2 c.\n       app_binop_f fop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstFloat32 c1, $C ConstFloat32 c2, $Binop_f T_f32 fop] \\<noteq>\n       [$C ConstFloat32 c]\n 10. \\<And>fop c1 c2.\n        app_binop_f fop c1 c2 = None \\<Longrightarrow>\n        [$C ConstFloat32 c1, $C ConstFloat32 c2,\n         $Binop_f T_f32 fop] \\<noteq>\n        [Trap]\nA total of 42 subgoals...", "case (label_const vs n es)"], ["proof (state)\nthis:\n  const_list vs\n\ngoal (42 subgoals):\n 1. \\<And>c iop.\n       [$C ConstInt32 c, $Unop_i T_i32 iop] \\<noteq>\n       [$C ConstInt32 (app_unop_i iop c)]\n 2. \\<And>c iop.\n       [$C ConstInt64 c, $Unop_i T_i64 iop] \\<noteq>\n       [$C ConstInt64 (app_unop_i iop c)]\n 3. \\<And>c fop.\n       [$C ConstFloat32 c, $Unop_f T_f32 fop] \\<noteq>\n       [$C ConstFloat32 (app_unop_f fop c)]\n 4. \\<And>c fop.\n       [$C ConstFloat64 c, $Unop_f T_f64 fop] \\<noteq>\n       [$C ConstFloat64 (app_unop_f fop c)]\n 5. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       [$C ConstInt32 c]\n 6. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       [Trap]\n 7. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       [$C ConstInt64 c]\n 8. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       [Trap]\n 9. \\<And>fop c1 c2 c.\n       app_binop_f fop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstFloat32 c1, $C ConstFloat32 c2, $Binop_f T_f32 fop] \\<noteq>\n       [$C ConstFloat32 c]\n 10. \\<And>fop c1 c2.\n        app_binop_f fop c1 c2 = None \\<Longrightarrow>\n        [$C ConstFloat32 c1, $C ConstFloat32 c2,\n         $Binop_f T_f32 fop] \\<noteq>\n        [Trap]\nA total of 42 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  const_list vs\n\ngoal (1 subgoal):\n 1. [Label n es vs] \\<noteq> vs", "using neq_label_nested"], ["proof (prove)\nusing this:\n  const_list vs\n  [Label ?n ?les ?es] \\<noteq> ?es\n\ngoal (1 subgoal):\n 1. [Label n es vs] \\<noteq> vs", "by auto"], ["proof (state)\nthis:\n  [Label n es vs] \\<noteq> vs\n\ngoal (41 subgoals):\n 1. \\<And>c iop.\n       [$C ConstInt32 c, $Unop_i T_i32 iop] \\<noteq>\n       [$C ConstInt32 (app_unop_i iop c)]\n 2. \\<And>c iop.\n       [$C ConstInt64 c, $Unop_i T_i64 iop] \\<noteq>\n       [$C ConstInt64 (app_unop_i iop c)]\n 3. \\<And>c fop.\n       [$C ConstFloat32 c, $Unop_f T_f32 fop] \\<noteq>\n       [$C ConstFloat32 (app_unop_f fop c)]\n 4. \\<And>c fop.\n       [$C ConstFloat64 c, $Unop_f T_f64 fop] \\<noteq>\n       [$C ConstFloat64 (app_unop_f fop c)]\n 5. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       [$C ConstInt32 c]\n 6. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       [Trap]\n 7. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       [$C ConstInt64 c]\n 8. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       [Trap]\n 9. \\<And>fop c1 c2 c.\n       app_binop_f fop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstFloat32 c1, $C ConstFloat32 c2, $Binop_f T_f32 fop] \\<noteq>\n       [$C ConstFloat32 c]\n 10. \\<And>fop c1 c2.\n        app_binop_f fop c1 c2 = None \\<Longrightarrow>\n        [$C ConstFloat32 c1, $C ConstFloat32 c2,\n         $Binop_f T_f32 fop] \\<noteq>\n        [Trap]\nA total of 41 subgoals...", "next"], ["proof (state)\ngoal (41 subgoals):\n 1. \\<And>c iop.\n       [$C ConstInt32 c, $Unop_i T_i32 iop] \\<noteq>\n       [$C ConstInt32 (app_unop_i iop c)]\n 2. \\<And>c iop.\n       [$C ConstInt64 c, $Unop_i T_i64 iop] \\<noteq>\n       [$C ConstInt64 (app_unop_i iop c)]\n 3. \\<And>c fop.\n       [$C ConstFloat32 c, $Unop_f T_f32 fop] \\<noteq>\n       [$C ConstFloat32 (app_unop_f fop c)]\n 4. \\<And>c fop.\n       [$C ConstFloat64 c, $Unop_f T_f64 fop] \\<noteq>\n       [$C ConstFloat64 (app_unop_f fop c)]\n 5. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       [$C ConstInt32 c]\n 6. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       [Trap]\n 7. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       [$C ConstInt64 c]\n 8. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       [Trap]\n 9. \\<And>fop c1 c2 c.\n       app_binop_f fop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstFloat32 c1, $C ConstFloat32 c2, $Binop_f T_f32 fop] \\<noteq>\n       [$C ConstFloat32 c]\n 10. \\<And>fop c1 c2.\n        app_binop_f fop c1 c2 = None \\<Longrightarrow>\n        [$C ConstFloat32 c1, $C ConstFloat32 c2,\n         $Binop_f T_f32 fop] \\<noteq>\n        [Trap]\nA total of 41 subgoals...", "case (br vs n i lholed LI es)"], ["proof (state)\nthis:\n  const_list vs\n  length vs = n\n  Lfilled i lholed (vs @ [$Br i]) LI\n\ngoal (41 subgoals):\n 1. \\<And>c iop.\n       [$C ConstInt32 c, $Unop_i T_i32 iop] \\<noteq>\n       [$C ConstInt32 (app_unop_i iop c)]\n 2. \\<And>c iop.\n       [$C ConstInt64 c, $Unop_i T_i64 iop] \\<noteq>\n       [$C ConstInt64 (app_unop_i iop c)]\n 3. \\<And>c fop.\n       [$C ConstFloat32 c, $Unop_f T_f32 fop] \\<noteq>\n       [$C ConstFloat32 (app_unop_f fop c)]\n 4. \\<And>c fop.\n       [$C ConstFloat64 c, $Unop_f T_f64 fop] \\<noteq>\n       [$C ConstFloat64 (app_unop_f fop c)]\n 5. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       [$C ConstInt32 c]\n 6. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       [Trap]\n 7. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       [$C ConstInt64 c]\n 8. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       [Trap]\n 9. \\<And>fop c1 c2 c.\n       app_binop_f fop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstFloat32 c1, $C ConstFloat32 c2, $Binop_f T_f32 fop] \\<noteq>\n       [$C ConstFloat32 c]\n 10. \\<And>fop c1 c2.\n        app_binop_f fop c1 c2 = None \\<Longrightarrow>\n        [$C ConstFloat32 c1, $C ConstFloat32 c2,\n         $Binop_f T_f32 fop] \\<noteq>\n        [Trap]\nA total of 41 subgoals...", "have \"size_list size [Label n es LI] > size_list size (vs @ es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size_list size (vs @ es) < size_list size [Label n es LI]", "using lfilled_size[OF br(3)]"], ["proof (prove)\nusing this:\n  size_list size (vs @ [$Br i]) \\<le> size_list size LI\n\ngoal (1 subgoal):\n 1. size_list size (vs @ es) < size_list size [Label n es LI]", "by simp"], ["proof (state)\nthis:\n  size_list size (vs @ es) < size_list size [Label n es LI]\n\ngoal (41 subgoals):\n 1. \\<And>c iop.\n       [$C ConstInt32 c, $Unop_i T_i32 iop] \\<noteq>\n       [$C ConstInt32 (app_unop_i iop c)]\n 2. \\<And>c iop.\n       [$C ConstInt64 c, $Unop_i T_i64 iop] \\<noteq>\n       [$C ConstInt64 (app_unop_i iop c)]\n 3. \\<And>c fop.\n       [$C ConstFloat32 c, $Unop_f T_f32 fop] \\<noteq>\n       [$C ConstFloat32 (app_unop_f fop c)]\n 4. \\<And>c fop.\n       [$C ConstFloat64 c, $Unop_f T_f64 fop] \\<noteq>\n       [$C ConstFloat64 (app_unop_f fop c)]\n 5. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       [$C ConstInt32 c]\n 6. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       [Trap]\n 7. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       [$C ConstInt64 c]\n 8. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       [Trap]\n 9. \\<And>fop c1 c2 c.\n       app_binop_f fop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstFloat32 c1, $C ConstFloat32 c2, $Binop_f T_f32 fop] \\<noteq>\n       [$C ConstFloat32 c]\n 10. \\<And>fop c1 c2.\n        app_binop_f fop c1 c2 = None \\<Longrightarrow>\n        [$C ConstFloat32 c1, $C ConstFloat32 c2,\n         $Binop_f T_f32 fop] \\<noteq>\n        [Trap]\nA total of 41 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  size_list size (vs @ es) < size_list size [Label n es LI]\n\ngoal (1 subgoal):\n 1. [Label n es LI] \\<noteq> vs @ es", "by fastforce"], ["proof (state)\nthis:\n  [Label n es LI] \\<noteq> vs @ es\n\ngoal (40 subgoals):\n 1. \\<And>c iop.\n       [$C ConstInt32 c, $Unop_i T_i32 iop] \\<noteq>\n       [$C ConstInt32 (app_unop_i iop c)]\n 2. \\<And>c iop.\n       [$C ConstInt64 c, $Unop_i T_i64 iop] \\<noteq>\n       [$C ConstInt64 (app_unop_i iop c)]\n 3. \\<And>c fop.\n       [$C ConstFloat32 c, $Unop_f T_f32 fop] \\<noteq>\n       [$C ConstFloat32 (app_unop_f fop c)]\n 4. \\<And>c fop.\n       [$C ConstFloat64 c, $Unop_f T_f64 fop] \\<noteq>\n       [$C ConstFloat64 (app_unop_f fop c)]\n 5. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       [$C ConstInt32 c]\n 6. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       [Trap]\n 7. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       [$C ConstInt64 c]\n 8. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       [Trap]\n 9. \\<And>fop c1 c2 c.\n       app_binop_f fop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstFloat32 c1, $C ConstFloat32 c2, $Binop_f T_f32 fop] \\<noteq>\n       [$C ConstFloat32 c]\n 10. \\<And>fop c1 c2.\n        app_binop_f fop c1 c2 = None \\<Longrightarrow>\n        [$C ConstFloat32 c1, $C ConstFloat32 c2,\n         $Binop_f T_f32 fop] \\<noteq>\n        [Trap]\nA total of 40 subgoals...", "next"], ["proof (state)\ngoal (40 subgoals):\n 1. \\<And>c iop.\n       [$C ConstInt32 c, $Unop_i T_i32 iop] \\<noteq>\n       [$C ConstInt32 (app_unop_i iop c)]\n 2. \\<And>c iop.\n       [$C ConstInt64 c, $Unop_i T_i64 iop] \\<noteq>\n       [$C ConstInt64 (app_unop_i iop c)]\n 3. \\<And>c fop.\n       [$C ConstFloat32 c, $Unop_f T_f32 fop] \\<noteq>\n       [$C ConstFloat32 (app_unop_f fop c)]\n 4. \\<And>c fop.\n       [$C ConstFloat64 c, $Unop_f T_f64 fop] \\<noteq>\n       [$C ConstFloat64 (app_unop_f fop c)]\n 5. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       [$C ConstInt32 c]\n 6. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       [Trap]\n 7. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       [$C ConstInt64 c]\n 8. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       [Trap]\n 9. \\<And>fop c1 c2 c.\n       app_binop_f fop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstFloat32 c1, $C ConstFloat32 c2, $Binop_f T_f32 fop] \\<noteq>\n       [$C ConstFloat32 c]\n 10. \\<And>fop c1 c2.\n        app_binop_f fop c1 c2 = None \\<Longrightarrow>\n        [$C ConstFloat32 c1, $C ConstFloat32 c2,\n         $Binop_f T_f32 fop] \\<noteq>\n        [Trap]\nA total of 40 subgoals...", "case (local_const es n i vs)"], ["proof (state)\nthis:\n  const_list es\n  length es = n\n\ngoal (40 subgoals):\n 1. \\<And>c iop.\n       [$C ConstInt32 c, $Unop_i T_i32 iop] \\<noteq>\n       [$C ConstInt32 (app_unop_i iop c)]\n 2. \\<And>c iop.\n       [$C ConstInt64 c, $Unop_i T_i64 iop] \\<noteq>\n       [$C ConstInt64 (app_unop_i iop c)]\n 3. \\<And>c fop.\n       [$C ConstFloat32 c, $Unop_f T_f32 fop] \\<noteq>\n       [$C ConstFloat32 (app_unop_f fop c)]\n 4. \\<And>c fop.\n       [$C ConstFloat64 c, $Unop_f T_f64 fop] \\<noteq>\n       [$C ConstFloat64 (app_unop_f fop c)]\n 5. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       [$C ConstInt32 c]\n 6. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       [Trap]\n 7. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       [$C ConstInt64 c]\n 8. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       [Trap]\n 9. \\<And>fop c1 c2 c.\n       app_binop_f fop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstFloat32 c1, $C ConstFloat32 c2, $Binop_f T_f32 fop] \\<noteq>\n       [$C ConstFloat32 c]\n 10. \\<And>fop c1 c2.\n        app_binop_f fop c1 c2 = None \\<Longrightarrow>\n        [$C ConstFloat32 c1, $C ConstFloat32 c2,\n         $Binop_f T_f32 fop] \\<noteq>\n        [Trap]\nA total of 40 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  const_list es\n  length es = n\n\ngoal (1 subgoal):\n 1. [Local n i vs es] \\<noteq> es", "using neq_local_nested"], ["proof (prove)\nusing this:\n  const_list es\n  length es = n\n  [Local ?n ?i ?lvs ?es] \\<noteq> ?es\n\ngoal (1 subgoal):\n 1. [Local n i vs es] \\<noteq> es", "by auto"], ["proof (state)\nthis:\n  [Local n i vs es] \\<noteq> es\n\ngoal (39 subgoals):\n 1. \\<And>c iop.\n       [$C ConstInt32 c, $Unop_i T_i32 iop] \\<noteq>\n       [$C ConstInt32 (app_unop_i iop c)]\n 2. \\<And>c iop.\n       [$C ConstInt64 c, $Unop_i T_i64 iop] \\<noteq>\n       [$C ConstInt64 (app_unop_i iop c)]\n 3. \\<And>c fop.\n       [$C ConstFloat32 c, $Unop_f T_f32 fop] \\<noteq>\n       [$C ConstFloat32 (app_unop_f fop c)]\n 4. \\<And>c fop.\n       [$C ConstFloat64 c, $Unop_f T_f64 fop] \\<noteq>\n       [$C ConstFloat64 (app_unop_f fop c)]\n 5. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       [$C ConstInt32 c]\n 6. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       [Trap]\n 7. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       [$C ConstInt64 c]\n 8. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       [Trap]\n 9. \\<And>fop c1 c2 c.\n       app_binop_f fop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstFloat32 c1, $C ConstFloat32 c2, $Binop_f T_f32 fop] \\<noteq>\n       [$C ConstFloat32 c]\n 10. \\<And>fop c1 c2.\n        app_binop_f fop c1 c2 = None \\<Longrightarrow>\n        [$C ConstFloat32 c1, $C ConstFloat32 c2,\n         $Binop_f T_f32 fop] \\<noteq>\n        [Trap]\nA total of 39 subgoals...", "next"], ["proof (state)\ngoal (39 subgoals):\n 1. \\<And>c iop.\n       [$C ConstInt32 c, $Unop_i T_i32 iop] \\<noteq>\n       [$C ConstInt32 (app_unop_i iop c)]\n 2. \\<And>c iop.\n       [$C ConstInt64 c, $Unop_i T_i64 iop] \\<noteq>\n       [$C ConstInt64 (app_unop_i iop c)]\n 3. \\<And>c fop.\n       [$C ConstFloat32 c, $Unop_f T_f32 fop] \\<noteq>\n       [$C ConstFloat32 (app_unop_f fop c)]\n 4. \\<And>c fop.\n       [$C ConstFloat64 c, $Unop_f T_f64 fop] \\<noteq>\n       [$C ConstFloat64 (app_unop_f fop c)]\n 5. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       [$C ConstInt32 c]\n 6. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       [Trap]\n 7. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       [$C ConstInt64 c]\n 8. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       [Trap]\n 9. \\<And>fop c1 c2 c.\n       app_binop_f fop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstFloat32 c1, $C ConstFloat32 c2, $Binop_f T_f32 fop] \\<noteq>\n       [$C ConstFloat32 c]\n 10. \\<And>fop c1 c2.\n        app_binop_f fop c1 c2 = None \\<Longrightarrow>\n        [$C ConstFloat32 c1, $C ConstFloat32 c2,\n         $Binop_f T_f32 fop] \\<noteq>\n        [Trap]\nA total of 39 subgoals...", "case (return vs n j lholed es i vls)"], ["proof (state)\nthis:\n  const_list vs\n  length vs = n\n  Lfilled j lholed (vs @ [$Return]) es\n\ngoal (39 subgoals):\n 1. \\<And>c iop.\n       [$C ConstInt32 c, $Unop_i T_i32 iop] \\<noteq>\n       [$C ConstInt32 (app_unop_i iop c)]\n 2. \\<And>c iop.\n       [$C ConstInt64 c, $Unop_i T_i64 iop] \\<noteq>\n       [$C ConstInt64 (app_unop_i iop c)]\n 3. \\<And>c fop.\n       [$C ConstFloat32 c, $Unop_f T_f32 fop] \\<noteq>\n       [$C ConstFloat32 (app_unop_f fop c)]\n 4. \\<And>c fop.\n       [$C ConstFloat64 c, $Unop_f T_f64 fop] \\<noteq>\n       [$C ConstFloat64 (app_unop_f fop c)]\n 5. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       [$C ConstInt32 c]\n 6. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       [Trap]\n 7. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       [$C ConstInt64 c]\n 8. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       [Trap]\n 9. \\<And>fop c1 c2 c.\n       app_binop_f fop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstFloat32 c1, $C ConstFloat32 c2, $Binop_f T_f32 fop] \\<noteq>\n       [$C ConstFloat32 c]\n 10. \\<And>fop c1 c2.\n        app_binop_f fop c1 c2 = None \\<Longrightarrow>\n        [$C ConstFloat32 c1, $C ConstFloat32 c2,\n         $Binop_f T_f32 fop] \\<noteq>\n        [Trap]\nA total of 39 subgoals...", "hence \"size_list size [Local n i vls es] > size_list size vs\""], ["proof (prove)\nusing this:\n  const_list vs\n  length vs = n\n  Lfilled j lholed (vs @ [$Return]) es\n\ngoal (1 subgoal):\n 1. size_list size vs < size_list size [Local n i vls es]", "using lfilled_size[OF return(3)]"], ["proof (prove)\nusing this:\n  const_list vs\n  length vs = n\n  Lfilled j lholed (vs @ [$Return]) es\n  size_list size (vs @ [$Return]) \\<le> size_list size es\n\ngoal (1 subgoal):\n 1. size_list size vs < size_list size [Local n i vls es]", "by simp"], ["proof (state)\nthis:\n  size_list size vs < size_list size [Local n i vls es]\n\ngoal (39 subgoals):\n 1. \\<And>c iop.\n       [$C ConstInt32 c, $Unop_i T_i32 iop] \\<noteq>\n       [$C ConstInt32 (app_unop_i iop c)]\n 2. \\<And>c iop.\n       [$C ConstInt64 c, $Unop_i T_i64 iop] \\<noteq>\n       [$C ConstInt64 (app_unop_i iop c)]\n 3. \\<And>c fop.\n       [$C ConstFloat32 c, $Unop_f T_f32 fop] \\<noteq>\n       [$C ConstFloat32 (app_unop_f fop c)]\n 4. \\<And>c fop.\n       [$C ConstFloat64 c, $Unop_f T_f64 fop] \\<noteq>\n       [$C ConstFloat64 (app_unop_f fop c)]\n 5. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       [$C ConstInt32 c]\n 6. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       [Trap]\n 7. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       [$C ConstInt64 c]\n 8. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       [Trap]\n 9. \\<And>fop c1 c2 c.\n       app_binop_f fop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstFloat32 c1, $C ConstFloat32 c2, $Binop_f T_f32 fop] \\<noteq>\n       [$C ConstFloat32 c]\n 10. \\<And>fop c1 c2.\n        app_binop_f fop c1 c2 = None \\<Longrightarrow>\n        [$C ConstFloat32 c1, $C ConstFloat32 c2,\n         $Binop_f T_f32 fop] \\<noteq>\n        [Trap]\nA total of 39 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  size_list size vs < size_list size [Local n i vls es]\n\ngoal (1 subgoal):\n 1. [Local n i vls es] \\<noteq> vs", "by auto"], ["proof (state)\nthis:\n  [Local n i vls es] \\<noteq> vs\n\ngoal (38 subgoals):\n 1. \\<And>c iop.\n       [$C ConstInt32 c, $Unop_i T_i32 iop] \\<noteq>\n       [$C ConstInt32 (app_unop_i iop c)]\n 2. \\<And>c iop.\n       [$C ConstInt64 c, $Unop_i T_i64 iop] \\<noteq>\n       [$C ConstInt64 (app_unop_i iop c)]\n 3. \\<And>c fop.\n       [$C ConstFloat32 c, $Unop_f T_f32 fop] \\<noteq>\n       [$C ConstFloat32 (app_unop_f fop c)]\n 4. \\<And>c fop.\n       [$C ConstFloat64 c, $Unop_f T_f64 fop] \\<noteq>\n       [$C ConstFloat64 (app_unop_f fop c)]\n 5. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       [$C ConstInt32 c]\n 6. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       [Trap]\n 7. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       [$C ConstInt64 c]\n 8. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       [Trap]\n 9. \\<And>fop c1 c2 c.\n       app_binop_f fop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstFloat32 c1, $C ConstFloat32 c2, $Binop_f T_f32 fop] \\<noteq>\n       [$C ConstFloat32 c]\n 10. \\<And>fop c1 c2.\n        app_binop_f fop c1 c2 = None \\<Longrightarrow>\n        [$C ConstFloat32 c1, $C ConstFloat32 c2,\n         $Binop_f T_f32 fop] \\<noteq>\n        [Trap]\nA total of 38 subgoals...", "qed auto"], ["", "lemma reduce_not_eq:\n  assumes \"\\<lparr>s;vs;es\\<rparr> \\<leadsto>_i \\<lparr>s';vs';es'\\<rparr>\"\n  shows \"es \\<noteq> es'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. es \\<noteq> es'", "using assms"], ["proof (prove)\nusing this:\n  \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. es \\<noteq> es'", "proof (induction es' rule: reduce.induct)"], ["proof (state)\ngoal (24 subgoals):\n 1. \\<And>e e' s vs i.\n       \\<lparr>e\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr> \\<Longrightarrow>\n       e \\<noteq> e'\n 2. \\<And>s vs j i. [$Call j] \\<noteq> [Callcl (sfunc s i j)]\n 3. \\<And>s i c cl j tf vs.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq>\n                         [Callcl cl]\n 4. \\<And>s i c cl j vs.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 5. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq>\n                         [Local m j (vcs @ zs) [$Block ([] _> t2s) es]]\n 6. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vcs'\n 7. \\<And>cl t1s t2s f ves vcs n m s vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 8. \\<And>vi j s v vs i.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> [$C v]\n 9. \\<And>vi j s v vs v' i.\n       length vi = j \\<Longrightarrow> [$C v', $Set_local j] \\<noteq> []\n 10. \\<And>s vs j i. [$Get_global j] \\<noteq> [$C sglob_val s i j]\nA total of 24 subgoals...", "case (basic e e' s vs i)"], ["proof (state)\nthis:\n  \\<lparr>e\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr>\n\ngoal (24 subgoals):\n 1. \\<And>e e' s vs i.\n       \\<lparr>e\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr> \\<Longrightarrow>\n       e \\<noteq> e'\n 2. \\<And>s vs j i. [$Call j] \\<noteq> [Callcl (sfunc s i j)]\n 3. \\<And>s i c cl j tf vs.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq>\n                         [Callcl cl]\n 4. \\<And>s i c cl j vs.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 5. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq>\n                         [Local m j (vcs @ zs) [$Block ([] _> t2s) es]]\n 6. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vcs'\n 7. \\<And>cl t1s t2s f ves vcs n m s vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 8. \\<And>vi j s v vs i.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> [$C v]\n 9. \\<And>vi j s v vs v' i.\n       length vi = j \\<Longrightarrow> [$C v', $Set_local j] \\<noteq> []\n 10. \\<And>s vs j i. [$Get_global j] \\<noteq> [$C sglob_val s i j]\nA total of 24 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lparr>e\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr>\n\ngoal (1 subgoal):\n 1. e \\<noteq> e'", "using reduce_simple_not_eq"], ["proof (prove)\nusing this:\n  \\<lparr>e\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr>\n  \\<lparr>?es\\<rparr> \\<leadsto> \\<lparr>?es'\\<rparr> \\<Longrightarrow>\n  ?es \\<noteq> ?es'\n\ngoal (1 subgoal):\n 1. e \\<noteq> e'", "by simp"], ["proof (state)\nthis:\n  e \\<noteq> e'\n\ngoal (23 subgoals):\n 1. \\<And>s vs j i. [$Call j] \\<noteq> [Callcl (sfunc s i j)]\n 2. \\<And>s i c cl j tf vs.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq>\n                         [Callcl cl]\n 3. \\<And>s i c cl j vs.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 4. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq>\n                         [Local m j (vcs @ zs) [$Block ([] _> t2s) es]]\n 5. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vcs'\n 6. \\<And>cl t1s t2s f ves vcs n m s vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 7. \\<And>vi j s v vs i.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> [$C v]\n 8. \\<And>vi j s v vs v' i.\n       length vi = j \\<Longrightarrow> [$C v', $Set_local j] \\<noteq> []\n 9. \\<And>s vs j i. [$Get_global j] \\<noteq> [$C sglob_val s i j]\n 10. \\<And>s i j v s' vs.\n        supdate_glob s i j v = s' \\<Longrightarrow>\n        [$C v, $Set_global j] \\<noteq> []\nA total of 23 subgoals...", "next"], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>s vs j i. [$Call j] \\<noteq> [Callcl (sfunc s i j)]\n 2. \\<And>s i c cl j tf vs.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq>\n                         [Callcl cl]\n 3. \\<And>s i c cl j vs.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 4. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq>\n                         [Local m j (vcs @ zs) [$Block ([] _> t2s) es]]\n 5. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vcs'\n 6. \\<And>cl t1s t2s f ves vcs n m s vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 7. \\<And>vi j s v vs i.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> [$C v]\n 8. \\<And>vi j s v vs v' i.\n       length vi = j \\<Longrightarrow> [$C v', $Set_local j] \\<noteq> []\n 9. \\<And>s vs j i. [$Get_global j] \\<noteq> [$C sglob_val s i j]\n 10. \\<And>s i j v s' vs.\n        supdate_glob s i j v = s' \\<Longrightarrow>\n        [$C v, $Set_global j] \\<noteq> []\nA total of 23 subgoals...", "case (callcl_host_Some cl t1s t2s f ves vcs n m s hs s' vcs' vs i)"], ["proof (state)\nthis:\n  cl = Func_host (t1s _> t2s) f\n  ves = $$* vcs\n  length vcs = n\n  length t1s = n\n  length t2s = m\n  host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\n\ngoal (23 subgoals):\n 1. \\<And>s vs j i. [$Call j] \\<noteq> [Callcl (sfunc s i j)]\n 2. \\<And>s i c cl j tf vs.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq>\n                         [Callcl cl]\n 3. \\<And>s i c cl j vs.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 4. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq>\n                         [Local m j (vcs @ zs) [$Block ([] _> t2s) es]]\n 5. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vcs'\n 6. \\<And>cl t1s t2s f ves vcs n m s vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 7. \\<And>vi j s v vs i.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> [$C v]\n 8. \\<And>vi j s v vs v' i.\n       length vi = j \\<Longrightarrow> [$C v', $Set_local j] \\<noteq> []\n 9. \\<And>s vs j i. [$Get_global j] \\<noteq> [$C sglob_val s i j]\n 10. \\<And>s i j v s' vs.\n        supdate_glob s i j v = s' \\<Longrightarrow>\n        [$C v, $Set_global j] \\<noteq> []\nA total of 23 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  cl = Func_host (t1s _> t2s) f\n  ves = $$* vcs\n  length vcs = n\n  length t1s = n\n  length t2s = m\n  host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\n\ngoal (1 subgoal):\n 1. ves @ [Callcl cl] \\<noteq> $$* vcs'", "by (cases vcs' rule:rev_cases) auto"], ["proof (state)\nthis:\n  ves @ [Callcl cl] \\<noteq> $$* vcs'\n\ngoal (22 subgoals):\n 1. \\<And>s vs j i. [$Call j] \\<noteq> [Callcl (sfunc s i j)]\n 2. \\<And>s i c cl j tf vs.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq>\n                         [Callcl cl]\n 3. \\<And>s i c cl j vs.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 4. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq>\n                         [Local m j (vcs @ zs) [$Block ([] _> t2s) es]]\n 5. \\<And>cl t1s t2s f ves vcs n m s vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 6. \\<And>vi j s v vs i.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> [$C v]\n 7. \\<And>vi j s v vs v' i.\n       length vi = j \\<Longrightarrow> [$C v', $Set_local j] \\<noteq> []\n 8. \\<And>s vs j i. [$Get_global j] \\<noteq> [$C sglob_val s i j]\n 9. \\<And>s i j v s' vs.\n       supdate_glob s i j v = s' \\<Longrightarrow>\n       [$C v, $Set_global j] \\<noteq> []\n 10. \\<And>s i j m k off t bs vs a.\n        \\<lbrakk>smem_ind s i = Some j; s.mem s ! j = m;\n         load m (nat_of_int k) off (t_length t) = Some bs\\<rbrakk>\n        \\<Longrightarrow> [$C ConstInt32 k, $Load t None a off] \\<noteq>\n                          [$C wasm_deserialise bs t]\nA total of 22 subgoals...", "next"], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>s vs j i. [$Call j] \\<noteq> [Callcl (sfunc s i j)]\n 2. \\<And>s i c cl j tf vs.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq>\n                         [Callcl cl]\n 3. \\<And>s i c cl j vs.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 4. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq>\n                         [Local m j (vcs @ zs) [$Block ([] _> t2s) es]]\n 5. \\<And>cl t1s t2s f ves vcs n m s vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 6. \\<And>vi j s v vs i.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> [$C v]\n 7. \\<And>vi j s v vs v' i.\n       length vi = j \\<Longrightarrow> [$C v', $Set_local j] \\<noteq> []\n 8. \\<And>s vs j i. [$Get_global j] \\<noteq> [$C sglob_val s i j]\n 9. \\<And>s i j v s' vs.\n       supdate_glob s i j v = s' \\<Longrightarrow>\n       [$C v, $Set_global j] \\<noteq> []\n 10. \\<And>s i j m k off t bs vs a.\n        \\<lbrakk>smem_ind s i = Some j; s.mem s ! j = m;\n         load m (nat_of_int k) off (t_length t) = Some bs\\<rbrakk>\n        \\<Longrightarrow> [$C ConstInt32 k, $Load t None a off] \\<noteq>\n                          [$C wasm_deserialise bs t]\nA total of 22 subgoals...", "case (label s vs es i s' vs' es' k lholed les les')"], ["proof (state)\nthis:\n  \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n  Lfilled k lholed es les\n  Lfilled k lholed es' les'\n  es \\<noteq> es'\n\ngoal (22 subgoals):\n 1. \\<And>s vs j i. [$Call j] \\<noteq> [Callcl (sfunc s i j)]\n 2. \\<And>s i c cl j tf vs.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq>\n                         [Callcl cl]\n 3. \\<And>s i c cl j vs.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 4. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq>\n                         [Local m j (vcs @ zs) [$Block ([] _> t2s) es]]\n 5. \\<And>cl t1s t2s f ves vcs n m s vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 6. \\<And>vi j s v vs i.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> [$C v]\n 7. \\<And>vi j s v vs v' i.\n       length vi = j \\<Longrightarrow> [$C v', $Set_local j] \\<noteq> []\n 8. \\<And>s vs j i. [$Get_global j] \\<noteq> [$C sglob_val s i j]\n 9. \\<And>s i j v s' vs.\n       supdate_glob s i j v = s' \\<Longrightarrow>\n       [$C v, $Set_global j] \\<noteq> []\n 10. \\<And>s i j m k off t bs vs a.\n        \\<lbrakk>smem_ind s i = Some j; s.mem s ! j = m;\n         load m (nat_of_int k) off (t_length t) = Some bs\\<rbrakk>\n        \\<Longrightarrow> [$C ConstInt32 k, $Load t None a off] \\<noteq>\n                          [$C wasm_deserialise bs t]\nA total of 22 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n  Lfilled k lholed es les\n  Lfilled k lholed es' les'\n  es \\<noteq> es'\n\ngoal (1 subgoal):\n 1. les \\<noteq> les'", "using lfilled_eq"], ["proof (prove)\nusing this:\n  \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n  Lfilled k lholed es les\n  Lfilled k lholed es' les'\n  es \\<noteq> es'\n  \\<lbrakk>Lfilled ?j ?lholed ?es ?LI; Lfilled ?j ?lholed ?es' ?LI\\<rbrakk>\n  \\<Longrightarrow> ?es = ?es'\n\ngoal (1 subgoal):\n 1. les \\<noteq> les'", "by fastforce"], ["proof (state)\nthis:\n  les \\<noteq> les'\n\ngoal (21 subgoals):\n 1. \\<And>s vs j i. [$Call j] \\<noteq> [Callcl (sfunc s i j)]\n 2. \\<And>s i c cl j tf vs.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq>\n                         [Callcl cl]\n 3. \\<And>s i c cl j vs.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 4. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq>\n                         [Local m j (vcs @ zs) [$Block ([] _> t2s) es]]\n 5. \\<And>cl t1s t2s f ves vcs n m s vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 6. \\<And>vi j s v vs i.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> [$C v]\n 7. \\<And>vi j s v vs v' i.\n       length vi = j \\<Longrightarrow> [$C v', $Set_local j] \\<noteq> []\n 8. \\<And>s vs j i. [$Get_global j] \\<noteq> [$C sglob_val s i j]\n 9. \\<And>s i j v s' vs.\n       supdate_glob s i j v = s' \\<Longrightarrow>\n       [$C v, $Set_global j] \\<noteq> []\n 10. \\<And>s i j m k off t bs vs a.\n        \\<lbrakk>smem_ind s i = Some j; s.mem s ! j = m;\n         load m (nat_of_int k) off (t_length t) = Some bs\\<rbrakk>\n        \\<Longrightarrow> [$C ConstInt32 k, $Load t None a off] \\<noteq>\n                          [$C wasm_deserialise bs t]\nA total of 21 subgoals...", "qed auto"], ["", "lemma reduce_simple_not_value:\n  assumes \"\\<lparr>es\\<rparr> \\<leadsto> \\<lparr>es'\\<rparr>\"\n  shows \"es \\<noteq> $$* vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. es \\<noteq> $$* vs", "using assms"], ["proof (prove)\nusing this:\n  \\<lparr>es\\<rparr> \\<leadsto> \\<lparr>es'\\<rparr>\n\ngoal (1 subgoal):\n 1. es \\<noteq> $$* vs", "proof (induction rule: reduce_simple.induct)"], ["proof (state)\ngoal (42 subgoals):\n 1. \\<And>c iop. [$C ConstInt32 c, $Unop_i T_i32 iop] \\<noteq> $$* vs\n 2. \\<And>c iop. [$C ConstInt64 c, $Unop_i T_i64 iop] \\<noteq> $$* vs\n 3. \\<And>c fop. [$C ConstFloat32 c, $Unop_f T_f32 fop] \\<noteq> $$* vs\n 4. \\<And>c fop. [$C ConstFloat64 c, $Unop_f T_f64 fop] \\<noteq> $$* vs\n 5. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       $$* vs\n 6. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       $$* vs\n 7. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       $$* vs\n 8. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       $$* vs\n 9. \\<And>fop c1 c2 c.\n       app_binop_f fop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstFloat32 c1, $C ConstFloat32 c2, $Binop_f T_f32 fop] \\<noteq>\n       $$* vs\n 10. \\<And>fop c1 c2.\n        app_binop_f fop c1 c2 = None \\<Longrightarrow>\n        [$C ConstFloat32 c1, $C ConstFloat32 c2,\n         $Binop_f T_f32 fop] \\<noteq>\n        $$* vs\nA total of 42 subgoals...", "case (block vs n t1s t2s m es)"], ["proof (state)\nthis:\n  const_list vs\n  length vs = n\n  length t1s = n\n  length t2s = m\n\ngoal (42 subgoals):\n 1. \\<And>c iop. [$C ConstInt32 c, $Unop_i T_i32 iop] \\<noteq> $$* vs\n 2. \\<And>c iop. [$C ConstInt64 c, $Unop_i T_i64 iop] \\<noteq> $$* vs\n 3. \\<And>c fop. [$C ConstFloat32 c, $Unop_f T_f32 fop] \\<noteq> $$* vs\n 4. \\<And>c fop. [$C ConstFloat64 c, $Unop_f T_f64 fop] \\<noteq> $$* vs\n 5. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       $$* vs\n 6. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       $$* vs\n 7. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       $$* vs\n 8. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       $$* vs\n 9. \\<And>fop c1 c2 c.\n       app_binop_f fop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstFloat32 c1, $C ConstFloat32 c2, $Binop_f T_f32 fop] \\<noteq>\n       $$* vs\n 10. \\<And>fop c1 c2.\n        app_binop_f fop c1 c2 = None \\<Longrightarrow>\n        [$C ConstFloat32 c1, $C ConstFloat32 c2,\n         $Binop_f T_f32 fop] \\<noteq>\n        $$* vs\nA total of 42 subgoals...", "have \"\\<not>(is_const ($Block (t1s _> t2s) es))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_const ($Block (t1s _> t2s) es)", "unfolding is_const_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (case $Block (t1s _> t2s) es of $C xa \\<Rightarrow> True\n            | $_ \\<Rightarrow> False | _ \\<Rightarrow> False)", "by simp"], ["proof (state)\nthis:\n  \\<not> is_const ($Block (t1s _> t2s) es)\n\ngoal (42 subgoals):\n 1. \\<And>c iop. [$C ConstInt32 c, $Unop_i T_i32 iop] \\<noteq> $$* vs\n 2. \\<And>c iop. [$C ConstInt64 c, $Unop_i T_i64 iop] \\<noteq> $$* vs\n 3. \\<And>c fop. [$C ConstFloat32 c, $Unop_f T_f32 fop] \\<noteq> $$* vs\n 4. \\<And>c fop. [$C ConstFloat64 c, $Unop_f T_f64 fop] \\<noteq> $$* vs\n 5. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       $$* vs\n 6. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       $$* vs\n 7. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       $$* vs\n 8. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       $$* vs\n 9. \\<And>fop c1 c2 c.\n       app_binop_f fop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstFloat32 c1, $C ConstFloat32 c2, $Binop_f T_f32 fop] \\<noteq>\n       $$* vs\n 10. \\<And>fop c1 c2.\n        app_binop_f fop c1 c2 = None \\<Longrightarrow>\n        [$C ConstFloat32 c1, $C ConstFloat32 c2,\n         $Binop_f T_f32 fop] \\<noteq>\n        $$* vs\nA total of 42 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> is_const ($Block (t1s _> t2s) es)\n\ngoal (1 subgoal):\n 1. vs @ [$Block (t1s _> t2s) es] \\<noteq> $$* vs", "using not_const_vs_to_es_list"], ["proof (prove)\nusing this:\n  \\<not> is_const ($Block (t1s _> t2s) es)\n  \\<not> is_const ?e \\<Longrightarrow>\n  ?vs1.0 @ [?e] @ ?vs2.0 \\<noteq> $$* ?vs\n\ngoal (1 subgoal):\n 1. vs @ [$Block (t1s _> t2s) es] \\<noteq> $$* vs", "by (metis append.right_neutral)"], ["proof (state)\nthis:\n  vs @ [$Block (t1s _> t2s) es] \\<noteq> $$* vs\n\ngoal (41 subgoals):\n 1. \\<And>c iop. [$C ConstInt32 c, $Unop_i T_i32 iop] \\<noteq> $$* vs\n 2. \\<And>c iop. [$C ConstInt64 c, $Unop_i T_i64 iop] \\<noteq> $$* vs\n 3. \\<And>c fop. [$C ConstFloat32 c, $Unop_f T_f32 fop] \\<noteq> $$* vs\n 4. \\<And>c fop. [$C ConstFloat64 c, $Unop_f T_f64 fop] \\<noteq> $$* vs\n 5. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       $$* vs\n 6. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       $$* vs\n 7. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       $$* vs\n 8. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       $$* vs\n 9. \\<And>fop c1 c2 c.\n       app_binop_f fop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstFloat32 c1, $C ConstFloat32 c2, $Binop_f T_f32 fop] \\<noteq>\n       $$* vs\n 10. \\<And>fop c1 c2.\n        app_binop_f fop c1 c2 = None \\<Longrightarrow>\n        [$C ConstFloat32 c1, $C ConstFloat32 c2,\n         $Binop_f T_f32 fop] \\<noteq>\n        $$* vs\nA total of 41 subgoals...", "next"], ["proof (state)\ngoal (41 subgoals):\n 1. \\<And>c iop. [$C ConstInt32 c, $Unop_i T_i32 iop] \\<noteq> $$* vs\n 2. \\<And>c iop. [$C ConstInt64 c, $Unop_i T_i64 iop] \\<noteq> $$* vs\n 3. \\<And>c fop. [$C ConstFloat32 c, $Unop_f T_f32 fop] \\<noteq> $$* vs\n 4. \\<And>c fop. [$C ConstFloat64 c, $Unop_f T_f64 fop] \\<noteq> $$* vs\n 5. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       $$* vs\n 6. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       $$* vs\n 7. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       $$* vs\n 8. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       $$* vs\n 9. \\<And>fop c1 c2 c.\n       app_binop_f fop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstFloat32 c1, $C ConstFloat32 c2, $Binop_f T_f32 fop] \\<noteq>\n       $$* vs\n 10. \\<And>fop c1 c2.\n        app_binop_f fop c1 c2 = None \\<Longrightarrow>\n        [$C ConstFloat32 c1, $C ConstFloat32 c2,\n         $Binop_f T_f32 fop] \\<noteq>\n        $$* vs\nA total of 41 subgoals...", "case (loop vs n t1s t2s m es)"], ["proof (state)\nthis:\n  const_list vs\n  length vs = n\n  length t1s = n\n  length t2s = m\n\ngoal (41 subgoals):\n 1. \\<And>c iop. [$C ConstInt32 c, $Unop_i T_i32 iop] \\<noteq> $$* vs\n 2. \\<And>c iop. [$C ConstInt64 c, $Unop_i T_i64 iop] \\<noteq> $$* vs\n 3. \\<And>c fop. [$C ConstFloat32 c, $Unop_f T_f32 fop] \\<noteq> $$* vs\n 4. \\<And>c fop. [$C ConstFloat64 c, $Unop_f T_f64 fop] \\<noteq> $$* vs\n 5. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       $$* vs\n 6. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       $$* vs\n 7. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       $$* vs\n 8. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       $$* vs\n 9. \\<And>fop c1 c2 c.\n       app_binop_f fop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstFloat32 c1, $C ConstFloat32 c2, $Binop_f T_f32 fop] \\<noteq>\n       $$* vs\n 10. \\<And>fop c1 c2.\n        app_binop_f fop c1 c2 = None \\<Longrightarrow>\n        [$C ConstFloat32 c1, $C ConstFloat32 c2,\n         $Binop_f T_f32 fop] \\<noteq>\n        $$* vs\nA total of 41 subgoals...", "have \"\\<not>(is_const ($Loop (t1s _> t2s) es))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_const ($Loop (t1s _> t2s) es)", "unfolding is_const_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (case $Loop (t1s _> t2s) es of $C xa \\<Rightarrow> True\n            | $_ \\<Rightarrow> False | _ \\<Rightarrow> False)", "by simp"], ["proof (state)\nthis:\n  \\<not> is_const ($Loop (t1s _> t2s) es)\n\ngoal (41 subgoals):\n 1. \\<And>c iop. [$C ConstInt32 c, $Unop_i T_i32 iop] \\<noteq> $$* vs\n 2. \\<And>c iop. [$C ConstInt64 c, $Unop_i T_i64 iop] \\<noteq> $$* vs\n 3. \\<And>c fop. [$C ConstFloat32 c, $Unop_f T_f32 fop] \\<noteq> $$* vs\n 4. \\<And>c fop. [$C ConstFloat64 c, $Unop_f T_f64 fop] \\<noteq> $$* vs\n 5. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       $$* vs\n 6. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       $$* vs\n 7. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       $$* vs\n 8. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       $$* vs\n 9. \\<And>fop c1 c2 c.\n       app_binop_f fop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstFloat32 c1, $C ConstFloat32 c2, $Binop_f T_f32 fop] \\<noteq>\n       $$* vs\n 10. \\<And>fop c1 c2.\n        app_binop_f fop c1 c2 = None \\<Longrightarrow>\n        [$C ConstFloat32 c1, $C ConstFloat32 c2,\n         $Binop_f T_f32 fop] \\<noteq>\n        $$* vs\nA total of 41 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> is_const ($Loop (t1s _> t2s) es)\n\ngoal (1 subgoal):\n 1. vs @ [$Loop (t1s _> t2s) es] \\<noteq> $$* vs", "using not_const_vs_to_es_list"], ["proof (prove)\nusing this:\n  \\<not> is_const ($Loop (t1s _> t2s) es)\n  \\<not> is_const ?e \\<Longrightarrow>\n  ?vs1.0 @ [?e] @ ?vs2.0 \\<noteq> $$* ?vs\n\ngoal (1 subgoal):\n 1. vs @ [$Loop (t1s _> t2s) es] \\<noteq> $$* vs", "by (metis append.right_neutral)"], ["proof (state)\nthis:\n  vs @ [$Loop (t1s _> t2s) es] \\<noteq> $$* vs\n\ngoal (40 subgoals):\n 1. \\<And>c iop. [$C ConstInt32 c, $Unop_i T_i32 iop] \\<noteq> $$* vs\n 2. \\<And>c iop. [$C ConstInt64 c, $Unop_i T_i64 iop] \\<noteq> $$* vs\n 3. \\<And>c fop. [$C ConstFloat32 c, $Unop_f T_f32 fop] \\<noteq> $$* vs\n 4. \\<And>c fop. [$C ConstFloat64 c, $Unop_f T_f64 fop] \\<noteq> $$* vs\n 5. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       $$* vs\n 6. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       $$* vs\n 7. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       $$* vs\n 8. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       $$* vs\n 9. \\<And>fop c1 c2 c.\n       app_binop_f fop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstFloat32 c1, $C ConstFloat32 c2, $Binop_f T_f32 fop] \\<noteq>\n       $$* vs\n 10. \\<And>fop c1 c2.\n        app_binop_f fop c1 c2 = None \\<Longrightarrow>\n        [$C ConstFloat32 c1, $C ConstFloat32 c2,\n         $Binop_f T_f32 fop] \\<noteq>\n        $$* vs\nA total of 40 subgoals...", "next"], ["proof (state)\ngoal (40 subgoals):\n 1. \\<And>c iop. [$C ConstInt32 c, $Unop_i T_i32 iop] \\<noteq> $$* vs\n 2. \\<And>c iop. [$C ConstInt64 c, $Unop_i T_i64 iop] \\<noteq> $$* vs\n 3. \\<And>c fop. [$C ConstFloat32 c, $Unop_f T_f32 fop] \\<noteq> $$* vs\n 4. \\<And>c fop. [$C ConstFloat64 c, $Unop_f T_f64 fop] \\<noteq> $$* vs\n 5. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       $$* vs\n 6. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       $$* vs\n 7. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       $$* vs\n 8. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       $$* vs\n 9. \\<And>fop c1 c2 c.\n       app_binop_f fop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstFloat32 c1, $C ConstFloat32 c2, $Binop_f T_f32 fop] \\<noteq>\n       $$* vs\n 10. \\<And>fop c1 c2.\n        app_binop_f fop c1 c2 = None \\<Longrightarrow>\n        [$C ConstFloat32 c1, $C ConstFloat32 c2,\n         $Binop_f T_f32 fop] \\<noteq>\n        $$* vs\nA total of 40 subgoals...", "case (trap lholed es)"], ["proof (state)\nthis:\n  lholed \\<noteq> [Trap]\n  Lfilled 0 es [Trap] lholed\n\ngoal (40 subgoals):\n 1. \\<And>c iop. [$C ConstInt32 c, $Unop_i T_i32 iop] \\<noteq> $$* vs\n 2. \\<And>c iop. [$C ConstInt64 c, $Unop_i T_i64 iop] \\<noteq> $$* vs\n 3. \\<And>c fop. [$C ConstFloat32 c, $Unop_f T_f32 fop] \\<noteq> $$* vs\n 4. \\<And>c fop. [$C ConstFloat64 c, $Unop_f T_f64 fop] \\<noteq> $$* vs\n 5. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       $$* vs\n 6. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       $$* vs\n 7. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       $$* vs\n 8. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       $$* vs\n 9. \\<And>fop c1 c2 c.\n       app_binop_f fop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstFloat32 c1, $C ConstFloat32 c2, $Binop_f T_f32 fop] \\<noteq>\n       $$* vs\n 10. \\<And>fop c1 c2.\n        app_binop_f fop c1 c2 = None \\<Longrightarrow>\n        [$C ConstFloat32 c1, $C ConstFloat32 c2,\n         $Binop_f T_f32 fop] \\<noteq>\n        $$* vs\nA total of 40 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lholed \\<noteq> $$* vs", "using trap(2)"], ["proof (prove)\nusing this:\n  Lfilled 0 es [Trap] lholed\n\ngoal (1 subgoal):\n 1. lholed \\<noteq> $$* vs", "proof (cases rule: Lfilled.cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>vsa es'.\n       \\<lbrakk>lholed = vsa @ [Trap] @ es'; const_list vsa;\n        es = LBase vsa es'\\<rbrakk>\n       \\<Longrightarrow> lholed \\<noteq> $$* vs\n 2. \\<And>vsa n es' l es'' k lfilledk.\n       \\<lbrakk>0 = k + 1; lholed = vsa @ [Label n es' lfilledk] @ es'';\n        const_list vsa; es = LRec vsa n es' l es'';\n        Lfilled k l [Trap] lfilledk\\<rbrakk>\n       \\<Longrightarrow> lholed \\<noteq> $$* vs", "case L0"], ["proof (state)\nthis:\n  lholed = vs_ @ [Trap] @ es'_\n  const_list vs_\n  es = LBase vs_ es'_\n\ngoal (2 subgoals):\n 1. \\<And>vsa es'.\n       \\<lbrakk>lholed = vsa @ [Trap] @ es'; const_list vsa;\n        es = LBase vsa es'\\<rbrakk>\n       \\<Longrightarrow> lholed \\<noteq> $$* vs\n 2. \\<And>vsa n es' l es'' k lfilledk.\n       \\<lbrakk>0 = k + 1; lholed = vsa @ [Label n es' lfilledk] @ es'';\n        const_list vsa; es = LRec vsa n es' l es'';\n        Lfilled k l [Trap] lfilledk\\<rbrakk>\n       \\<Longrightarrow> lholed \\<noteq> $$* vs", "have \"\\<not>(is_const Trap)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_const Trap", "unfolding is_const_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (case Trap of $C xa \\<Rightarrow> True | $_ \\<Rightarrow> False\n            | _ \\<Rightarrow> False)", "by simp"], ["proof (state)\nthis:\n  \\<not> is_const Trap\n\ngoal (2 subgoals):\n 1. \\<And>vsa es'.\n       \\<lbrakk>lholed = vsa @ [Trap] @ es'; const_list vsa;\n        es = LBase vsa es'\\<rbrakk>\n       \\<Longrightarrow> lholed \\<noteq> $$* vs\n 2. \\<And>vsa n es' l es'' k lfilledk.\n       \\<lbrakk>0 = k + 1; lholed = vsa @ [Label n es' lfilledk] @ es'';\n        const_list vsa; es = LRec vsa n es' l es'';\n        Lfilled k l [Trap] lfilledk\\<rbrakk>\n       \\<Longrightarrow> lholed \\<noteq> $$* vs", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> is_const Trap\n\ngoal (1 subgoal):\n 1. lholed \\<noteq> $$* vs", "using L0 not_const_vs_to_es_list"], ["proof (prove)\nusing this:\n  \\<not> is_const Trap\n  lholed = vs_ @ [Trap] @ es'_\n  const_list vs_\n  es = LBase vs_ es'_\n  \\<not> is_const ?e \\<Longrightarrow>\n  ?vs1.0 @ [?e] @ ?vs2.0 \\<noteq> $$* ?vs\n\ngoal (1 subgoal):\n 1. lholed \\<noteq> $$* vs", "by fastforce"], ["proof (state)\nthis:\n  lholed \\<noteq> $$* vs\n\ngoal (1 subgoal):\n 1. \\<And>vsa n es' l es'' k lfilledk.\n       \\<lbrakk>0 = k + 1; lholed = vsa @ [Label n es' lfilledk] @ es'';\n        const_list vsa; es = LRec vsa n es' l es'';\n        Lfilled k l [Trap] lfilledk\\<rbrakk>\n       \\<Longrightarrow> lholed \\<noteq> $$* vs", "qed auto"], ["proof (state)\nthis:\n  lholed \\<noteq> $$* vs\n\ngoal (39 subgoals):\n 1. \\<And>c iop. [$C ConstInt32 c, $Unop_i T_i32 iop] \\<noteq> $$* vs\n 2. \\<And>c iop. [$C ConstInt64 c, $Unop_i T_i64 iop] \\<noteq> $$* vs\n 3. \\<And>c fop. [$C ConstFloat32 c, $Unop_f T_f32 fop] \\<noteq> $$* vs\n 4. \\<And>c fop. [$C ConstFloat64 c, $Unop_f T_f64 fop] \\<noteq> $$* vs\n 5. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       $$* vs\n 6. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq>\n       $$* vs\n 7. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       $$* vs\n 8. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq>\n       $$* vs\n 9. \\<And>fop c1 c2 c.\n       app_binop_f fop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstFloat32 c1, $C ConstFloat32 c2, $Binop_f T_f32 fop] \\<noteq>\n       $$* vs\n 10. \\<And>fop c1 c2.\n        app_binop_f fop c1 c2 = None \\<Longrightarrow>\n        [$C ConstFloat32 c1, $C ConstFloat32 c2,\n         $Binop_f T_f32 fop] \\<noteq>\n        $$* vs\nA total of 39 subgoals...", "qed auto"], ["", "lemma reduce_not_value:\n  assumes \"\\<lparr>s;vs;es\\<rparr> \\<leadsto>_i \\<lparr>s';vs';es'\\<rparr>\"\n  shows \"es \\<noteq> $$* ves\""], ["proof (prove)\ngoal (1 subgoal):\n 1. es \\<noteq> $$* ves", "using assms"], ["proof (prove)\nusing this:\n  \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. es \\<noteq> $$* ves", "proof (induction es' arbitrary: ves rule: reduce.induct)"], ["proof (state)\ngoal (24 subgoals):\n 1. \\<And>e e' s vs i ves.\n       \\<lparr>e\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr> \\<Longrightarrow>\n       e \\<noteq> $$* ves\n 2. \\<And>s vs j i ves. [$Call j] \\<noteq> $$* ves\n 3. \\<And>s i c cl j tf vs ves.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq>\n                         $$* ves\n 4. \\<And>s i c cl j vs ves.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> $$* ves\n 5. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i vesa.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 6. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i vesa.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 7. \\<And>cl t1s t2s f ves vcs n m s vs i vesa.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 8. \\<And>vi j s v vs i ves.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> $$* ves\n 9. \\<And>vi j s v vs v' i ves.\n       length vi = j \\<Longrightarrow>\n       [$C v', $Set_local j] \\<noteq> $$* ves\n 10. \\<And>s vs j i ves. [$Get_global j] \\<noteq> $$* ves\nA total of 24 subgoals...", "case (basic e e' s vs i)"], ["proof (state)\nthis:\n  \\<lparr>e\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr>\n\ngoal (24 subgoals):\n 1. \\<And>e e' s vs i ves.\n       \\<lparr>e\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr> \\<Longrightarrow>\n       e \\<noteq> $$* ves\n 2. \\<And>s vs j i ves. [$Call j] \\<noteq> $$* ves\n 3. \\<And>s i c cl j tf vs ves.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq>\n                         $$* ves\n 4. \\<And>s i c cl j vs ves.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> $$* ves\n 5. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i vesa.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 6. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i vesa.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 7. \\<And>cl t1s t2s f ves vcs n m s vs i vesa.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 8. \\<And>vi j s v vs i ves.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> $$* ves\n 9. \\<And>vi j s v vs v' i ves.\n       length vi = j \\<Longrightarrow>\n       [$C v', $Set_local j] \\<noteq> $$* ves\n 10. \\<And>s vs j i ves. [$Get_global j] \\<noteq> $$* ves\nA total of 24 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lparr>e\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr>\n\ngoal (1 subgoal):\n 1. e \\<noteq> $$* ves", "using reduce_simple_not_value"], ["proof (prove)\nusing this:\n  \\<lparr>e\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr>\n  \\<lparr>?es\\<rparr> \\<leadsto> \\<lparr>?es'\\<rparr> \\<Longrightarrow>\n  ?es \\<noteq> $$* ?vs\n\ngoal (1 subgoal):\n 1. e \\<noteq> $$* ves", "by fastforce"], ["proof (state)\nthis:\n  e \\<noteq> $$* ves\n\ngoal (23 subgoals):\n 1. \\<And>s vs j i ves. [$Call j] \\<noteq> $$* ves\n 2. \\<And>s i c cl j tf vs ves.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq>\n                         $$* ves\n 3. \\<And>s i c cl j vs ves.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> $$* ves\n 4. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i vesa.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 5. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i vesa.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 6. \\<And>cl t1s t2s f ves vcs n m s vs i vesa.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 7. \\<And>vi j s v vs i ves.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> $$* ves\n 8. \\<And>vi j s v vs v' i ves.\n       length vi = j \\<Longrightarrow>\n       [$C v', $Set_local j] \\<noteq> $$* ves\n 9. \\<And>s vs j i ves. [$Get_global j] \\<noteq> $$* ves\n 10. \\<And>s i j v s' vs ves.\n        supdate_glob s i j v = s' \\<Longrightarrow>\n        [$C v, $Set_global j] \\<noteq> $$* ves\nA total of 23 subgoals...", "next"], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>s vs j i ves. [$Call j] \\<noteq> $$* ves\n 2. \\<And>s i c cl j tf vs ves.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq>\n                         $$* ves\n 3. \\<And>s i c cl j vs ves.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> $$* ves\n 4. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i vesa.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 5. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i vesa.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 6. \\<And>cl t1s t2s f ves vcs n m s vs i vesa.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 7. \\<And>vi j s v vs i ves.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> $$* ves\n 8. \\<And>vi j s v vs v' i ves.\n       length vi = j \\<Longrightarrow>\n       [$C v', $Set_local j] \\<noteq> $$* ves\n 9. \\<And>s vs j i ves. [$Get_global j] \\<noteq> $$* ves\n 10. \\<And>s i j v s' vs ves.\n        supdate_glob s i j v = s' \\<Longrightarrow>\n        [$C v, $Set_global j] \\<noteq> $$* ves\nA total of 23 subgoals...", "case (callcl_native cl i' j ts es s t1s t2s ves vcs n k m zs vs i)"], ["proof (state)\nthis:\n  cl = Func_native i' (j _> ts) es s\n  t1s = $$* t2s\n  length t2s = ves\n  length es = vcs\n  length j = ves\n  length ts = n\n  n_zeros es = k\n\ngoal (23 subgoals):\n 1. \\<And>s vs j i ves. [$Call j] \\<noteq> $$* ves\n 2. \\<And>s i c cl j tf vs ves.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq>\n                         $$* ves\n 3. \\<And>s i c cl j vs ves.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> $$* ves\n 4. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i vesa.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 5. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i vesa.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 6. \\<And>cl t1s t2s f ves vcs n m s vs i vesa.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 7. \\<And>vi j s v vs i ves.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> $$* ves\n 8. \\<And>vi j s v vs v' i ves.\n       length vi = j \\<Longrightarrow>\n       [$C v', $Set_local j] \\<noteq> $$* ves\n 9. \\<And>s vs j i ves. [$Get_global j] \\<noteq> $$* ves\n 10. \\<And>s i j v s' vs ves.\n        supdate_glob s i j v = s' \\<Longrightarrow>\n        [$C v, $Set_global j] \\<noteq> $$* ves\nA total of 23 subgoals...", "have \"\\<not>(is_const (Callcl cl))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_const (Callcl cl)", "unfolding is_const_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (case Callcl cl of $C xa \\<Rightarrow> True\n            | $_ \\<Rightarrow> False | _ \\<Rightarrow> False)", "by simp"], ["proof (state)\nthis:\n  \\<not> is_const (Callcl cl)\n\ngoal (23 subgoals):\n 1. \\<And>s vs j i ves. [$Call j] \\<noteq> $$* ves\n 2. \\<And>s i c cl j tf vs ves.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq>\n                         $$* ves\n 3. \\<And>s i c cl j vs ves.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> $$* ves\n 4. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i vesa.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 5. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i vesa.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 6. \\<And>cl t1s t2s f ves vcs n m s vs i vesa.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 7. \\<And>vi j s v vs i ves.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> $$* ves\n 8. \\<And>vi j s v vs v' i ves.\n       length vi = j \\<Longrightarrow>\n       [$C v', $Set_local j] \\<noteq> $$* ves\n 9. \\<And>s vs j i ves. [$Get_global j] \\<noteq> $$* ves\n 10. \\<And>s i j v s' vs ves.\n        supdate_glob s i j v = s' \\<Longrightarrow>\n        [$C v, $Set_global j] \\<noteq> $$* ves\nA total of 23 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> is_const (Callcl cl)\n\ngoal (1 subgoal):\n 1. t1s @ [Callcl cl] \\<noteq> $$* i", "using not_const_vs_to_es_list"], ["proof (prove)\nusing this:\n  \\<not> is_const (Callcl cl)\n  \\<not> is_const ?e \\<Longrightarrow>\n  ?vs1.0 @ [?e] @ ?vs2.0 \\<noteq> $$* ?vs\n\ngoal (1 subgoal):\n 1. t1s @ [Callcl cl] \\<noteq> $$* i", "by (metis append.right_neutral)"], ["proof (state)\nthis:\n  t1s @ [Callcl cl] \\<noteq> $$* i\n\ngoal (22 subgoals):\n 1. \\<And>s vs j i ves. [$Call j] \\<noteq> $$* ves\n 2. \\<And>s i c cl j tf vs ves.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq>\n                         $$* ves\n 3. \\<And>s i c cl j vs ves.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> $$* ves\n 4. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i vesa.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 5. \\<And>cl t1s t2s f ves vcs n m s vs i vesa.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 6. \\<And>vi j s v vs i ves.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> $$* ves\n 7. \\<And>vi j s v vs v' i ves.\n       length vi = j \\<Longrightarrow>\n       [$C v', $Set_local j] \\<noteq> $$* ves\n 8. \\<And>s vs j i ves. [$Get_global j] \\<noteq> $$* ves\n 9. \\<And>s i j v s' vs ves.\n       supdate_glob s i j v = s' \\<Longrightarrow>\n       [$C v, $Set_global j] \\<noteq> $$* ves\n 10. \\<And>s i j m k off t bs vs a ves.\n        \\<lbrakk>smem_ind s i = Some j; s.mem s ! j = m;\n         load m (nat_of_int k) off (t_length t) = Some bs\\<rbrakk>\n        \\<Longrightarrow> [$C ConstInt32 k, $Load t None a off] \\<noteq>\n                          $$* ves\nA total of 22 subgoals...", "next"], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>s vs j i ves. [$Call j] \\<noteq> $$* ves\n 2. \\<And>s i c cl j tf vs ves.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq>\n                         $$* ves\n 3. \\<And>s i c cl j vs ves.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> $$* ves\n 4. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i vesa.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 5. \\<And>cl t1s t2s f ves vcs n m s vs i vesa.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 6. \\<And>vi j s v vs i ves.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> $$* ves\n 7. \\<And>vi j s v vs v' i ves.\n       length vi = j \\<Longrightarrow>\n       [$C v', $Set_local j] \\<noteq> $$* ves\n 8. \\<And>s vs j i ves. [$Get_global j] \\<noteq> $$* ves\n 9. \\<And>s i j v s' vs ves.\n       supdate_glob s i j v = s' \\<Longrightarrow>\n       [$C v, $Set_global j] \\<noteq> $$* ves\n 10. \\<And>s i j m k off t bs vs a ves.\n        \\<lbrakk>smem_ind s i = Some j; s.mem s ! j = m;\n         load m (nat_of_int k) off (t_length t) = Some bs\\<rbrakk>\n        \\<Longrightarrow> [$C ConstInt32 k, $Load t None a off] \\<noteq>\n                          $$* ves\nA total of 22 subgoals...", "case (callcl_host_Some cl t1s t2s f ves vcs n m s i s' vcs' vs)"], ["proof (state)\nthis:\n  cl = Func_host (t1s _> t2s) f\n  vesa__ = $$* vcs\n  length vcs = n\n  length t1s = n\n  length t2s = m\n  host_apply s (t1s _> t2s) f vcs i = Some (s', vcs')\n\ngoal (22 subgoals):\n 1. \\<And>s vs j i ves. [$Call j] \\<noteq> $$* ves\n 2. \\<And>s i c cl j tf vs ves.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq>\n                         $$* ves\n 3. \\<And>s i c cl j vs ves.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> $$* ves\n 4. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i vesa.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 5. \\<And>cl t1s t2s f ves vcs n m s vs i vesa.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 6. \\<And>vi j s v vs i ves.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> $$* ves\n 7. \\<And>vi j s v vs v' i ves.\n       length vi = j \\<Longrightarrow>\n       [$C v', $Set_local j] \\<noteq> $$* ves\n 8. \\<And>s vs j i ves. [$Get_global j] \\<noteq> $$* ves\n 9. \\<And>s i j v s' vs ves.\n       supdate_glob s i j v = s' \\<Longrightarrow>\n       [$C v, $Set_global j] \\<noteq> $$* ves\n 10. \\<And>s i j m k off t bs vs a ves.\n        \\<lbrakk>smem_ind s i = Some j; s.mem s ! j = m;\n         load m (nat_of_int k) off (t_length t) = Some bs\\<rbrakk>\n        \\<Longrightarrow> [$C ConstInt32 k, $Load t None a off] \\<noteq>\n                          $$* ves\nA total of 22 subgoals...", "have \"\\<not>(is_const (Callcl cl))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_const (Callcl cl)", "unfolding is_const_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (case Callcl cl of $C xa \\<Rightarrow> True\n            | $_ \\<Rightarrow> False | _ \\<Rightarrow> False)", "by simp"], ["proof (state)\nthis:\n  \\<not> is_const (Callcl cl)\n\ngoal (22 subgoals):\n 1. \\<And>s vs j i ves. [$Call j] \\<noteq> $$* ves\n 2. \\<And>s i c cl j tf vs ves.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq>\n                         $$* ves\n 3. \\<And>s i c cl j vs ves.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> $$* ves\n 4. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i vesa.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 5. \\<And>cl t1s t2s f ves vcs n m s vs i vesa.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 6. \\<And>vi j s v vs i ves.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> $$* ves\n 7. \\<And>vi j s v vs v' i ves.\n       length vi = j \\<Longrightarrow>\n       [$C v', $Set_local j] \\<noteq> $$* ves\n 8. \\<And>s vs j i ves. [$Get_global j] \\<noteq> $$* ves\n 9. \\<And>s i j v s' vs ves.\n       supdate_glob s i j v = s' \\<Longrightarrow>\n       [$C v, $Set_global j] \\<noteq> $$* ves\n 10. \\<And>s i j m k off t bs vs a ves.\n        \\<lbrakk>smem_ind s i = Some j; s.mem s ! j = m;\n         load m (nat_of_int k) off (t_length t) = Some bs\\<rbrakk>\n        \\<Longrightarrow> [$C ConstInt32 k, $Load t None a off] \\<noteq>\n                          $$* ves\nA total of 22 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> is_const (Callcl cl)\n\ngoal (1 subgoal):\n 1. vesa__ @ [Callcl cl] \\<noteq> $$* ves", "using not_const_vs_to_es_list"], ["proof (prove)\nusing this:\n  \\<not> is_const (Callcl cl)\n  \\<not> is_const ?e \\<Longrightarrow>\n  ?vs1.0 @ [?e] @ ?vs2.0 \\<noteq> $$* ?vs\n\ngoal (1 subgoal):\n 1. vesa__ @ [Callcl cl] \\<noteq> $$* ves", "by (metis append.right_neutral)"], ["proof (state)\nthis:\n  vesa__ @ [Callcl cl] \\<noteq> $$* ves\n\ngoal (21 subgoals):\n 1. \\<And>s vs j i ves. [$Call j] \\<noteq> $$* ves\n 2. \\<And>s i c cl j tf vs ves.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq>\n                         $$* ves\n 3. \\<And>s i c cl j vs ves.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> $$* ves\n 4. \\<And>cl t1s t2s f ves vcs n m s vs i vesa.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 5. \\<And>vi j s v vs i ves.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> $$* ves\n 6. \\<And>vi j s v vs v' i ves.\n       length vi = j \\<Longrightarrow>\n       [$C v', $Set_local j] \\<noteq> $$* ves\n 7. \\<And>s vs j i ves. [$Get_global j] \\<noteq> $$* ves\n 8. \\<And>s i j v s' vs ves.\n       supdate_glob s i j v = s' \\<Longrightarrow>\n       [$C v, $Set_global j] \\<noteq> $$* ves\n 9. \\<And>s i j m k off t bs vs a ves.\n       \\<lbrakk>smem_ind s i = Some j; s.mem s ! j = m;\n        load m (nat_of_int k) off (t_length t) = Some bs\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 k, $Load t None a off] \\<noteq>\n                         $$* ves\n 10. \\<And>s i j m k off t vs a ves.\n        \\<lbrakk>smem_ind s i = Some j; s.mem s ! j = m;\n         load m (nat_of_int k) off (t_length t) = None\\<rbrakk>\n        \\<Longrightarrow> [$C ConstInt32 k, $Load t None a off] \\<noteq>\n                          $$* ves\nA total of 21 subgoals...", "next"], ["proof (state)\ngoal (21 subgoals):\n 1. \\<And>s vs j i ves. [$Call j] \\<noteq> $$* ves\n 2. \\<And>s i c cl j tf vs ves.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq>\n                         $$* ves\n 3. \\<And>s i c cl j vs ves.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> $$* ves\n 4. \\<And>cl t1s t2s f ves vcs n m s vs i vesa.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 5. \\<And>vi j s v vs i ves.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> $$* ves\n 6. \\<And>vi j s v vs v' i ves.\n       length vi = j \\<Longrightarrow>\n       [$C v', $Set_local j] \\<noteq> $$* ves\n 7. \\<And>s vs j i ves. [$Get_global j] \\<noteq> $$* ves\n 8. \\<And>s i j v s' vs ves.\n       supdate_glob s i j v = s' \\<Longrightarrow>\n       [$C v, $Set_global j] \\<noteq> $$* ves\n 9. \\<And>s i j m k off t bs vs a ves.\n       \\<lbrakk>smem_ind s i = Some j; s.mem s ! j = m;\n        load m (nat_of_int k) off (t_length t) = Some bs\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 k, $Load t None a off] \\<noteq>\n                         $$* ves\n 10. \\<And>s i j m k off t vs a ves.\n        \\<lbrakk>smem_ind s i = Some j; s.mem s ! j = m;\n         load m (nat_of_int k) off (t_length t) = None\\<rbrakk>\n        \\<Longrightarrow> [$C ConstInt32 k, $Load t None a off] \\<noteq>\n                          $$* ves\nA total of 21 subgoals...", "case (callcl_host_None cl t1s t2s f ves vcs n m s vs i)"], ["proof (state)\nthis:\n  cl = Func_host (t1s _> t2s) f\n  vesa__ = $$* vcs\n  length vcs = n\n  length t1s = n\n  length t2s = m\n\ngoal (21 subgoals):\n 1. \\<And>s vs j i ves. [$Call j] \\<noteq> $$* ves\n 2. \\<And>s i c cl j tf vs ves.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq>\n                         $$* ves\n 3. \\<And>s i c cl j vs ves.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> $$* ves\n 4. \\<And>cl t1s t2s f ves vcs n m s vs i vesa.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 5. \\<And>vi j s v vs i ves.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> $$* ves\n 6. \\<And>vi j s v vs v' i ves.\n       length vi = j \\<Longrightarrow>\n       [$C v', $Set_local j] \\<noteq> $$* ves\n 7. \\<And>s vs j i ves. [$Get_global j] \\<noteq> $$* ves\n 8. \\<And>s i j v s' vs ves.\n       supdate_glob s i j v = s' \\<Longrightarrow>\n       [$C v, $Set_global j] \\<noteq> $$* ves\n 9. \\<And>s i j m k off t bs vs a ves.\n       \\<lbrakk>smem_ind s i = Some j; s.mem s ! j = m;\n        load m (nat_of_int k) off (t_length t) = Some bs\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 k, $Load t None a off] \\<noteq>\n                         $$* ves\n 10. \\<And>s i j m k off t vs a ves.\n        \\<lbrakk>smem_ind s i = Some j; s.mem s ! j = m;\n         load m (nat_of_int k) off (t_length t) = None\\<rbrakk>\n        \\<Longrightarrow> [$C ConstInt32 k, $Load t None a off] \\<noteq>\n                          $$* ves\nA total of 21 subgoals...", "have \"\\<not>(is_const (Callcl cl))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_const (Callcl cl)", "unfolding is_const_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (case Callcl cl of $C xa \\<Rightarrow> True\n            | $_ \\<Rightarrow> False | _ \\<Rightarrow> False)", "by simp"], ["proof (state)\nthis:\n  \\<not> is_const (Callcl cl)\n\ngoal (21 subgoals):\n 1. \\<And>s vs j i ves. [$Call j] \\<noteq> $$* ves\n 2. \\<And>s i c cl j tf vs ves.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq>\n                         $$* ves\n 3. \\<And>s i c cl j vs ves.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> $$* ves\n 4. \\<And>cl t1s t2s f ves vcs n m s vs i vesa.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> $$* vesa\n 5. \\<And>vi j s v vs i ves.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> $$* ves\n 6. \\<And>vi j s v vs v' i ves.\n       length vi = j \\<Longrightarrow>\n       [$C v', $Set_local j] \\<noteq> $$* ves\n 7. \\<And>s vs j i ves. [$Get_global j] \\<noteq> $$* ves\n 8. \\<And>s i j v s' vs ves.\n       supdate_glob s i j v = s' \\<Longrightarrow>\n       [$C v, $Set_global j] \\<noteq> $$* ves\n 9. \\<And>s i j m k off t bs vs a ves.\n       \\<lbrakk>smem_ind s i = Some j; s.mem s ! j = m;\n        load m (nat_of_int k) off (t_length t) = Some bs\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 k, $Load t None a off] \\<noteq>\n                         $$* ves\n 10. \\<And>s i j m k off t vs a ves.\n        \\<lbrakk>smem_ind s i = Some j; s.mem s ! j = m;\n         load m (nat_of_int k) off (t_length t) = None\\<rbrakk>\n        \\<Longrightarrow> [$C ConstInt32 k, $Load t None a off] \\<noteq>\n                          $$* ves\nA total of 21 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> is_const (Callcl cl)\n\ngoal (1 subgoal):\n 1. vesa__ @ [Callcl cl] \\<noteq> $$* ves", "using not_const_vs_to_es_list"], ["proof (prove)\nusing this:\n  \\<not> is_const (Callcl cl)\n  \\<not> is_const ?e \\<Longrightarrow>\n  ?vs1.0 @ [?e] @ ?vs2.0 \\<noteq> $$* ?vs\n\ngoal (1 subgoal):\n 1. vesa__ @ [Callcl cl] \\<noteq> $$* ves", "by (metis append.right_neutral)"], ["proof (state)\nthis:\n  vesa__ @ [Callcl cl] \\<noteq> $$* ves\n\ngoal (20 subgoals):\n 1. \\<And>s vs j i ves. [$Call j] \\<noteq> $$* ves\n 2. \\<And>s i c cl j tf vs ves.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq>\n                         $$* ves\n 3. \\<And>s i c cl j vs ves.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> $$* ves\n 4. \\<And>vi j s v vs i ves.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> $$* ves\n 5. \\<And>vi j s v vs v' i ves.\n       length vi = j \\<Longrightarrow>\n       [$C v', $Set_local j] \\<noteq> $$* ves\n 6. \\<And>s vs j i ves. [$Get_global j] \\<noteq> $$* ves\n 7. \\<And>s i j v s' vs ves.\n       supdate_glob s i j v = s' \\<Longrightarrow>\n       [$C v, $Set_global j] \\<noteq> $$* ves\n 8. \\<And>s i j m k off t bs vs a ves.\n       \\<lbrakk>smem_ind s i = Some j; s.mem s ! j = m;\n        load m (nat_of_int k) off (t_length t) = Some bs\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 k, $Load t None a off] \\<noteq>\n                         $$* ves\n 9. \\<And>s i j m k off t vs a ves.\n       \\<lbrakk>smem_ind s i = Some j; s.mem s ! j = m;\n        load m (nat_of_int k) off (t_length t) = None\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 k, $Load t None a off] \\<noteq>\n                         $$* ves\n 10. \\<And>s i j m sx k off tp t bs vs a ves.\n        \\<lbrakk>smem_ind s i = Some j; s.mem s ! j = m;\n         load_packed sx m (nat_of_int k) off (tp_length tp) (t_length t) =\n         Some bs\\<rbrakk>\n        \\<Longrightarrow> [$C ConstInt32 k,\n                           $Load t (Some (tp, sx)) a off] \\<noteq>\n                          $$* ves\nA total of 20 subgoals...", "next"], ["proof (state)\ngoal (20 subgoals):\n 1. \\<And>s vs j i ves. [$Call j] \\<noteq> $$* ves\n 2. \\<And>s i c cl j tf vs ves.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq>\n                         $$* ves\n 3. \\<And>s i c cl j vs ves.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> $$* ves\n 4. \\<And>vi j s v vs i ves.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> $$* ves\n 5. \\<And>vi j s v vs v' i ves.\n       length vi = j \\<Longrightarrow>\n       [$C v', $Set_local j] \\<noteq> $$* ves\n 6. \\<And>s vs j i ves. [$Get_global j] \\<noteq> $$* ves\n 7. \\<And>s i j v s' vs ves.\n       supdate_glob s i j v = s' \\<Longrightarrow>\n       [$C v, $Set_global j] \\<noteq> $$* ves\n 8. \\<And>s i j m k off t bs vs a ves.\n       \\<lbrakk>smem_ind s i = Some j; s.mem s ! j = m;\n        load m (nat_of_int k) off (t_length t) = Some bs\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 k, $Load t None a off] \\<noteq>\n                         $$* ves\n 9. \\<And>s i j m k off t vs a ves.\n       \\<lbrakk>smem_ind s i = Some j; s.mem s ! j = m;\n        load m (nat_of_int k) off (t_length t) = None\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 k, $Load t None a off] \\<noteq>\n                         $$* ves\n 10. \\<And>s i j m sx k off tp t bs vs a ves.\n        \\<lbrakk>smem_ind s i = Some j; s.mem s ! j = m;\n         load_packed sx m (nat_of_int k) off (tp_length tp) (t_length t) =\n         Some bs\\<rbrakk>\n        \\<Longrightarrow> [$C ConstInt32 k,\n                           $Load t (Some (tp, sx)) a off] \\<noteq>\n                          $$* ves\nA total of 20 subgoals...", "case (label s vs es i s' vs' es' k lholed les les')"], ["proof (state)\nthis:\n  \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n  Lfilled k lholed es les\n  Lfilled k lholed es' les'\n  es \\<noteq> $$* ?ves\n\ngoal (20 subgoals):\n 1. \\<And>s vs j i ves. [$Call j] \\<noteq> $$* ves\n 2. \\<And>s i c cl j tf vs ves.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq>\n                         $$* ves\n 3. \\<And>s i c cl j vs ves.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> $$* ves\n 4. \\<And>vi j s v vs i ves.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> $$* ves\n 5. \\<And>vi j s v vs v' i ves.\n       length vi = j \\<Longrightarrow>\n       [$C v', $Set_local j] \\<noteq> $$* ves\n 6. \\<And>s vs j i ves. [$Get_global j] \\<noteq> $$* ves\n 7. \\<And>s i j v s' vs ves.\n       supdate_glob s i j v = s' \\<Longrightarrow>\n       [$C v, $Set_global j] \\<noteq> $$* ves\n 8. \\<And>s i j m k off t bs vs a ves.\n       \\<lbrakk>smem_ind s i = Some j; s.mem s ! j = m;\n        load m (nat_of_int k) off (t_length t) = Some bs\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 k, $Load t None a off] \\<noteq>\n                         $$* ves\n 9. \\<And>s i j m k off t vs a ves.\n       \\<lbrakk>smem_ind s i = Some j; s.mem s ! j = m;\n        load m (nat_of_int k) off (t_length t) = None\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 k, $Load t None a off] \\<noteq>\n                         $$* ves\n 10. \\<And>s i j m sx k off tp t bs vs a ves.\n        \\<lbrakk>smem_ind s i = Some j; s.mem s ! j = m;\n         load_packed sx m (nat_of_int k) off (tp_length tp) (t_length t) =\n         Some bs\\<rbrakk>\n        \\<Longrightarrow> [$C ConstInt32 k,\n                           $Load t (Some (tp, sx)) a off] \\<noteq>\n                          $$* ves\nA total of 20 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. les \\<noteq> $$* ves", "using label(2,4)"], ["proof (prove)\nusing this:\n  Lfilled k lholed es les\n  es \\<noteq> $$* ?ves\n\ngoal (1 subgoal):\n 1. les \\<noteq> $$* ves", "proof (induction rule: Lfilled.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>vs lholed es' es.\n       \\<lbrakk>const_list vs; lholed = LBase vs es';\n        \\<And>ves. es \\<noteq> $$* ves\\<rbrakk>\n       \\<Longrightarrow> vs @ es @ es' \\<noteq> $$* ves\n 2. \\<And>vs lholed n es' l es'' k es lfilledk.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        (\\<And>ves. es \\<noteq> $$* ves) \\<Longrightarrow>\n        lfilledk \\<noteq> $$* ves;\n        \\<And>ves. es \\<noteq> $$* ves\\<rbrakk>\n       \\<Longrightarrow> vs @ [Label n es' lfilledk] @ es'' \\<noteq> $$* ves", "case (L0 lvs lholed les' les)"], ["proof (state)\nthis:\n  const_list lvs\n  lholed = LBase lvs les'\n  les \\<noteq> $$* ?ves\n\ngoal (2 subgoals):\n 1. \\<And>vs lholed es' es.\n       \\<lbrakk>const_list vs; lholed = LBase vs es';\n        \\<And>ves. es \\<noteq> $$* ves\\<rbrakk>\n       \\<Longrightarrow> vs @ es @ es' \\<noteq> $$* ves\n 2. \\<And>vs lholed n es' l es'' k es lfilledk.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        (\\<And>ves. es \\<noteq> $$* ves) \\<Longrightarrow>\n        lfilledk \\<noteq> $$* ves;\n        \\<And>ves. es \\<noteq> $$* ves\\<rbrakk>\n       \\<Longrightarrow> vs @ [Label n es' lfilledk] @ es'' \\<noteq> $$* ves", "{"], ["proof (state)\nthis:\n  const_list lvs\n  lholed = LBase lvs les'\n  les \\<noteq> $$* ?ves\n\ngoal (2 subgoals):\n 1. \\<And>vs lholed es' es.\n       \\<lbrakk>const_list vs; lholed = LBase vs es';\n        \\<And>ves. es \\<noteq> $$* ves\\<rbrakk>\n       \\<Longrightarrow> vs @ es @ es' \\<noteq> $$* ves\n 2. \\<And>vs lholed n es' l es'' k es lfilledk.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        (\\<And>ves. es \\<noteq> $$* ves) \\<Longrightarrow>\n        lfilledk \\<noteq> $$* ves;\n        \\<And>ves. es \\<noteq> $$* ves\\<rbrakk>\n       \\<Longrightarrow> vs @ [Label n es' lfilledk] @ es'' \\<noteq> $$* ves", "assume \"lvs @ les @ les' = $$* ves\""], ["proof (state)\nthis:\n  lvs @ les @ les' = $$* ves\n\ngoal (2 subgoals):\n 1. \\<And>vs lholed es' es.\n       \\<lbrakk>const_list vs; lholed = LBase vs es';\n        \\<And>ves. es \\<noteq> $$* ves\\<rbrakk>\n       \\<Longrightarrow> vs @ es @ es' \\<noteq> $$* ves\n 2. \\<And>vs lholed n es' l es'' k es lfilledk.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        (\\<And>ves. es \\<noteq> $$* ves) \\<Longrightarrow>\n        lfilledk \\<noteq> $$* ves;\n        \\<And>ves. es \\<noteq> $$* ves\\<rbrakk>\n       \\<Longrightarrow> vs @ [Label n es' lfilledk] @ es'' \\<noteq> $$* ves", "hence \"(\\<forall>y\\<in>set (lvs @ les @ les'). \\<exists>x. y = $C x)\""], ["proof (prove)\nusing this:\n  lvs @ les @ les' = $$* ves\n\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>set (lvs @ les @ les'). \\<exists>x. y = $C x", "by simp"], ["proof (state)\nthis:\n  \\<forall>y\\<in>set (lvs @ les @ les'). \\<exists>x. y = $C x\n\ngoal (2 subgoals):\n 1. \\<And>vs lholed es' es.\n       \\<lbrakk>const_list vs; lholed = LBase vs es';\n        \\<And>ves. es \\<noteq> $$* ves\\<rbrakk>\n       \\<Longrightarrow> vs @ es @ es' \\<noteq> $$* ves\n 2. \\<And>vs lholed n es' l es'' k es lfilledk.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        (\\<And>ves. es \\<noteq> $$* ves) \\<Longrightarrow>\n        lfilledk \\<noteq> $$* ves;\n        \\<And>ves. es \\<noteq> $$* ves\\<rbrakk>\n       \\<Longrightarrow> vs @ [Label n es' lfilledk] @ es'' \\<noteq> $$* ves", "hence \"(\\<forall>y\\<in>set les. \\<exists>x. y = $C x)\""], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>set (lvs @ les @ les'). \\<exists>x. y = $C x\n\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>set les. \\<exists>x. y = $C x", "by simp"], ["proof (state)\nthis:\n  \\<forall>y\\<in>set les. \\<exists>x. y = $C x\n\ngoal (2 subgoals):\n 1. \\<And>vs lholed es' es.\n       \\<lbrakk>const_list vs; lholed = LBase vs es';\n        \\<And>ves. es \\<noteq> $$* ves\\<rbrakk>\n       \\<Longrightarrow> vs @ es @ es' \\<noteq> $$* ves\n 2. \\<And>vs lholed n es' l es'' k es lfilledk.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        (\\<And>ves. es \\<noteq> $$* ves) \\<Longrightarrow>\n        lfilledk \\<noteq> $$* ves;\n        \\<And>ves. es \\<noteq> $$* ves\\<rbrakk>\n       \\<Longrightarrow> vs @ [Label n es' lfilledk] @ es'' \\<noteq> $$* ves", "hence \"\\<exists>vs1. les = $$* vs1\""], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>set les. \\<exists>x. y = $C x\n\ngoal (1 subgoal):\n 1. \\<exists>vs1. les = $$* vs1", "unfolding ex_map_conv"], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>set les. \\<exists>x. y = $C x\n\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>set les. \\<exists>x. y = $C x", "."], ["proof (state)\nthis:\n  \\<exists>vs1. les = $$* vs1\n\ngoal (2 subgoals):\n 1. \\<And>vs lholed es' es.\n       \\<lbrakk>const_list vs; lholed = LBase vs es';\n        \\<And>ves. es \\<noteq> $$* ves\\<rbrakk>\n       \\<Longrightarrow> vs @ es @ es' \\<noteq> $$* ves\n 2. \\<And>vs lholed n es' l es'' k es lfilledk.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        (\\<And>ves. es \\<noteq> $$* ves) \\<Longrightarrow>\n        lfilledk \\<noteq> $$* ves;\n        \\<And>ves. es \\<noteq> $$* ves\\<rbrakk>\n       \\<Longrightarrow> vs @ [Label n es' lfilledk] @ es'' \\<noteq> $$* ves", "}"], ["proof (state)\nthis:\n  lvs @ les @ les' = $$* ves \\<Longrightarrow> \\<exists>vs1. les = $$* vs1\n\ngoal (2 subgoals):\n 1. \\<And>vs lholed es' es.\n       \\<lbrakk>const_list vs; lholed = LBase vs es';\n        \\<And>ves. es \\<noteq> $$* ves\\<rbrakk>\n       \\<Longrightarrow> vs @ es @ es' \\<noteq> $$* ves\n 2. \\<And>vs lholed n es' l es'' k es lfilledk.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        (\\<And>ves. es \\<noteq> $$* ves) \\<Longrightarrow>\n        lfilledk \\<noteq> $$* ves;\n        \\<And>ves. es \\<noteq> $$* ves\\<rbrakk>\n       \\<Longrightarrow> vs @ [Label n es' lfilledk] @ es'' \\<noteq> $$* ves", "thus ?case"], ["proof (prove)\nusing this:\n  lvs @ les @ les' = $$* ves \\<Longrightarrow> \\<exists>vs1. les = $$* vs1\n\ngoal (1 subgoal):\n 1. lvs @ les @ les' \\<noteq> $$* ves", "using L0(3)"], ["proof (prove)\nusing this:\n  lvs @ les @ les' = $$* ves \\<Longrightarrow> \\<exists>vs1. les = $$* vs1\n  les \\<noteq> $$* ?ves\n\ngoal (1 subgoal):\n 1. lvs @ les @ les' \\<noteq> $$* ves", "by fastforce"], ["proof (state)\nthis:\n  lvs @ les @ les' \\<noteq> $$* ves\n\ngoal (1 subgoal):\n 1. \\<And>vs lholed n es' l es'' k es lfilledk.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        (\\<And>ves. es \\<noteq> $$* ves) \\<Longrightarrow>\n        lfilledk \\<noteq> $$* ves;\n        \\<And>ves. es \\<noteq> $$* ves\\<rbrakk>\n       \\<Longrightarrow> vs @ [Label n es' lfilledk] @ es'' \\<noteq> $$* ves", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>vs lholed n es' l es'' k es lfilledk.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        (\\<And>ves. es \\<noteq> $$* ves) \\<Longrightarrow>\n        lfilledk \\<noteq> $$* ves;\n        \\<And>ves. es \\<noteq> $$* ves\\<rbrakk>\n       \\<Longrightarrow> vs @ [Label n es' lfilledk] @ es'' \\<noteq> $$* ves", "case (LN lvs lholed ln les' l les'' k les lfilledk)"], ["proof (state)\nthis:\n  const_list lvs\n  lholed = LRec lvs ln les' l les''\n  Lfilled k l les lfilledk\n  (\\<And>ves. les \\<noteq> $$* ves) \\<Longrightarrow>\n  lfilledk \\<noteq> $$* ves\n  les \\<noteq> $$* ?ves\n\ngoal (1 subgoal):\n 1. \\<And>vs lholed n es' l es'' k es lfilledk.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        (\\<And>ves. es \\<noteq> $$* ves) \\<Longrightarrow>\n        lfilledk \\<noteq> $$* ves;\n        \\<And>ves. es \\<noteq> $$* ves\\<rbrakk>\n       \\<Longrightarrow> vs @ [Label n es' lfilledk] @ es'' \\<noteq> $$* ves", "have \"\\<not>(is_const (Label ln les' lfilledk))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_const (Label ln les' lfilledk)", "unfolding is_const_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (case Label ln les' lfilledk of $C xa \\<Rightarrow> True\n            | $_ \\<Rightarrow> False | _ \\<Rightarrow> False)", "by simp"], ["proof (state)\nthis:\n  \\<not> is_const (Label ln les' lfilledk)\n\ngoal (1 subgoal):\n 1. \\<And>vs lholed n es' l es'' k es lfilledk.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        (\\<And>ves. es \\<noteq> $$* ves) \\<Longrightarrow>\n        lfilledk \\<noteq> $$* ves;\n        \\<And>ves. es \\<noteq> $$* ves\\<rbrakk>\n       \\<Longrightarrow> vs @ [Label n es' lfilledk] @ es'' \\<noteq> $$* ves", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> is_const (Label ln les' lfilledk)\n\ngoal (1 subgoal):\n 1. lvs @ [Label ln les' lfilledk] @ les'' \\<noteq> $$* ves", "using not_const_vs_to_es_list"], ["proof (prove)\nusing this:\n  \\<not> is_const (Label ln les' lfilledk)\n  \\<not> is_const ?e \\<Longrightarrow>\n  ?vs1.0 @ [?e] @ ?vs2.0 \\<noteq> $$* ?vs\n\ngoal (1 subgoal):\n 1. lvs @ [Label ln les' lfilledk] @ les'' \\<noteq> $$* ves", "by fastforce"], ["proof (state)\nthis:\n  lvs @ [Label ln les' lfilledk] @ les'' \\<noteq> $$* ves\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  les \\<noteq> $$* ves\n\ngoal (19 subgoals):\n 1. \\<And>s vs j i ves. [$Call j] \\<noteq> $$* ves\n 2. \\<And>s i c cl j tf vs ves.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq>\n                         $$* ves\n 3. \\<And>s i c cl j vs ves.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> $$* ves\n 4. \\<And>vi j s v vs i ves.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> $$* ves\n 5. \\<And>vi j s v vs v' i ves.\n       length vi = j \\<Longrightarrow>\n       [$C v', $Set_local j] \\<noteq> $$* ves\n 6. \\<And>s vs j i ves. [$Get_global j] \\<noteq> $$* ves\n 7. \\<And>s i j v s' vs ves.\n       supdate_glob s i j v = s' \\<Longrightarrow>\n       [$C v, $Set_global j] \\<noteq> $$* ves\n 8. \\<And>s i j m k off t bs vs a ves.\n       \\<lbrakk>smem_ind s i = Some j; s.mem s ! j = m;\n        load m (nat_of_int k) off (t_length t) = Some bs\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 k, $Load t None a off] \\<noteq>\n                         $$* ves\n 9. \\<And>s i j m k off t vs a ves.\n       \\<lbrakk>smem_ind s i = Some j; s.mem s ! j = m;\n        load m (nat_of_int k) off (t_length t) = None\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 k, $Load t None a off] \\<noteq>\n                         $$* ves\n 10. \\<And>s i j m sx k off tp t bs vs a ves.\n        \\<lbrakk>smem_ind s i = Some j; s.mem s ! j = m;\n         load_packed sx m (nat_of_int k) off (tp_length tp) (t_length t) =\n         Some bs\\<rbrakk>\n        \\<Longrightarrow> [$C ConstInt32 k,\n                           $Load t (Some (tp, sx)) a off] \\<noteq>\n                          $$* ves\nA total of 19 subgoals...", "qed auto"], ["", "lemma reduce_simple_not_nil:\n  assumes \"\\<lparr>es\\<rparr> \\<leadsto> \\<lparr>es'\\<rparr>\"\n  shows \"es \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. es \\<noteq> []", "using assms"], ["proof (prove)\nusing this:\n  \\<lparr>es\\<rparr> \\<leadsto> \\<lparr>es'\\<rparr>\n\ngoal (1 subgoal):\n 1. es \\<noteq> []", "proof (induction rule: reduce_simple.induct)"], ["proof (state)\ngoal (42 subgoals):\n 1. \\<And>c iop. [$C ConstInt32 c, $Unop_i T_i32 iop] \\<noteq> []\n 2. \\<And>c iop. [$C ConstInt64 c, $Unop_i T_i64 iop] \\<noteq> []\n 3. \\<And>c fop. [$C ConstFloat32 c, $Unop_f T_f32 fop] \\<noteq> []\n 4. \\<And>c fop. [$C ConstFloat64 c, $Unop_f T_f64 fop] \\<noteq> []\n 5. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq> []\n 6. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq> []\n 7. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq> []\n 8. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq> []\n 9. \\<And>fop c1 c2 c.\n       app_binop_f fop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstFloat32 c1, $C ConstFloat32 c2, $Binop_f T_f32 fop] \\<noteq>\n       []\n 10. \\<And>fop c1 c2.\n        app_binop_f fop c1 c2 = None \\<Longrightarrow>\n        [$C ConstFloat32 c1, $C ConstFloat32 c2,\n         $Binop_f T_f32 fop] \\<noteq>\n        []\nA total of 42 subgoals...", "case (trap es lholed)"], ["proof (state)\nthis:\n  es \\<noteq> [Trap]\n  Lfilled 0 lholed [Trap] es\n\ngoal (42 subgoals):\n 1. \\<And>c iop. [$C ConstInt32 c, $Unop_i T_i32 iop] \\<noteq> []\n 2. \\<And>c iop. [$C ConstInt64 c, $Unop_i T_i64 iop] \\<noteq> []\n 3. \\<And>c fop. [$C ConstFloat32 c, $Unop_f T_f32 fop] \\<noteq> []\n 4. \\<And>c fop. [$C ConstFloat64 c, $Unop_f T_f64 fop] \\<noteq> []\n 5. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq> []\n 6. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq> []\n 7. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq> []\n 8. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq> []\n 9. \\<And>fop c1 c2 c.\n       app_binop_f fop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstFloat32 c1, $C ConstFloat32 c2, $Binop_f T_f32 fop] \\<noteq>\n       []\n 10. \\<And>fop c1 c2.\n        app_binop_f fop c1 c2 = None \\<Longrightarrow>\n        [$C ConstFloat32 c1, $C ConstFloat32 c2,\n         $Binop_f T_f32 fop] \\<noteq>\n        []\nA total of 42 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  es \\<noteq> [Trap]\n  Lfilled 0 lholed [Trap] es\n\ngoal (1 subgoal):\n 1. es \\<noteq> []", "using Lfilled.simps[of 0 lholed \"[Trap]\"]"], ["proof (prove)\nusing this:\n  es \\<noteq> [Trap]\n  Lfilled 0 lholed [Trap] es\n  Lfilled 0 lholed [Trap] ?a4.0 =\n  ((\\<exists>vs lholeda es' es.\n       0 = 0 \\<and>\n       lholed = lholeda \\<and>\n       [Trap] = es \\<and>\n       ?a4.0 = vs @ es @ es' \\<and>\n       const_list vs \\<and> lholeda = LBase vs es') \\<or>\n   (\\<exists>vs lholeda n es' l es'' k es lfilledk.\n       0 = k + 1 \\<and>\n       lholed = lholeda \\<and>\n       [Trap] = es \\<and>\n       ?a4.0 = vs @ [Label n es' lfilledk] @ es'' \\<and>\n       const_list vs \\<and>\n       lholeda = LRec vs n es' l es'' \\<and> Lfilled k l es lfilledk))\n\ngoal (1 subgoal):\n 1. es \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  es \\<noteq> []\n\ngoal (41 subgoals):\n 1. \\<And>c iop. [$C ConstInt32 c, $Unop_i T_i32 iop] \\<noteq> []\n 2. \\<And>c iop. [$C ConstInt64 c, $Unop_i T_i64 iop] \\<noteq> []\n 3. \\<And>c fop. [$C ConstFloat32 c, $Unop_f T_f32 fop] \\<noteq> []\n 4. \\<And>c fop. [$C ConstFloat64 c, $Unop_f T_f64 fop] \\<noteq> []\n 5. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq> []\n 6. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt32 c1, $C ConstInt32 c2, $Binop_i T_i32 iop] \\<noteq> []\n 7. \\<And>iop c1 c2 c.\n       app_binop_i iop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq> []\n 8. \\<And>iop c1 c2.\n       app_binop_i iop c1 c2 = None \\<Longrightarrow>\n       [$C ConstInt64 c1, $C ConstInt64 c2, $Binop_i T_i64 iop] \\<noteq> []\n 9. \\<And>fop c1 c2 c.\n       app_binop_f fop c1 c2 = Some c \\<Longrightarrow>\n       [$C ConstFloat32 c1, $C ConstFloat32 c2, $Binop_f T_f32 fop] \\<noteq>\n       []\n 10. \\<And>fop c1 c2.\n        app_binop_f fop c1 c2 = None \\<Longrightarrow>\n        [$C ConstFloat32 c1, $C ConstFloat32 c2,\n         $Binop_f T_f32 fop] \\<noteq>\n        []\nA total of 41 subgoals...", "qed auto"], ["", "lemma reduce_not_nil:\n  assumes \"\\<lparr>s;vs;es\\<rparr> \\<leadsto>_i \\<lparr>s';vs';es'\\<rparr>\"\n  shows \"es \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. es \\<noteq> []", "using assms"], ["proof (prove)\nusing this:\n  \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. es \\<noteq> []", "proof (induction rule: reduce.induct)"], ["proof (state)\ngoal (24 subgoals):\n 1. \\<And>e e' s vs i.\n       \\<lparr>e\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr> \\<Longrightarrow>\n       e \\<noteq> []\n 2. \\<And>s vs j i. [$Call j] \\<noteq> []\n 3. \\<And>s i c cl j tf vs.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq> []\n 4. \\<And>s i c cl j vs.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> []\n 5. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> []\n 6. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> []\n 7. \\<And>cl t1s t2s f ves vcs n m s vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> []\n 8. \\<And>vi j s v vs i.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> []\n 9. \\<And>vi j s v vs v' i.\n       length vi = j \\<Longrightarrow> [$C v', $Set_local j] \\<noteq> []\n 10. \\<And>s vs j i. [$Get_global j] \\<noteq> []\nA total of 24 subgoals...", "case (basic e e' s vs i)"], ["proof (state)\nthis:\n  \\<lparr>e\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr>\n\ngoal (24 subgoals):\n 1. \\<And>e e' s vs i.\n       \\<lparr>e\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr> \\<Longrightarrow>\n       e \\<noteq> []\n 2. \\<And>s vs j i. [$Call j] \\<noteq> []\n 3. \\<And>s i c cl j tf vs.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq> []\n 4. \\<And>s i c cl j vs.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> []\n 5. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> []\n 6. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> []\n 7. \\<And>cl t1s t2s f ves vcs n m s vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> []\n 8. \\<And>vi j s v vs i.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> []\n 9. \\<And>vi j s v vs v' i.\n       length vi = j \\<Longrightarrow> [$C v', $Set_local j] \\<noteq> []\n 10. \\<And>s vs j i. [$Get_global j] \\<noteq> []\nA total of 24 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lparr>e\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr>\n\ngoal (1 subgoal):\n 1. e \\<noteq> []", "using reduce_simple_not_nil"], ["proof (prove)\nusing this:\n  \\<lparr>e\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr>\n  \\<lparr>?es\\<rparr> \\<leadsto> \\<lparr>?es'\\<rparr> \\<Longrightarrow>\n  ?es \\<noteq> []\n\ngoal (1 subgoal):\n 1. e \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  e \\<noteq> []\n\ngoal (23 subgoals):\n 1. \\<And>s vs j i. [$Call j] \\<noteq> []\n 2. \\<And>s i c cl j tf vs.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq> []\n 3. \\<And>s i c cl j vs.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> []\n 4. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> []\n 5. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> []\n 6. \\<And>cl t1s t2s f ves vcs n m s vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> []\n 7. \\<And>vi j s v vs i.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> []\n 8. \\<And>vi j s v vs v' i.\n       length vi = j \\<Longrightarrow> [$C v', $Set_local j] \\<noteq> []\n 9. \\<And>s vs j i. [$Get_global j] \\<noteq> []\n 10. \\<And>s i j v s' vs.\n        supdate_glob s i j v = s' \\<Longrightarrow>\n        [$C v, $Set_global j] \\<noteq> []\nA total of 23 subgoals...", "next"], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>s vs j i. [$Call j] \\<noteq> []\n 2. \\<And>s i c cl j tf vs.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq> []\n 3. \\<And>s i c cl j vs.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> []\n 4. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> []\n 5. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> []\n 6. \\<And>cl t1s t2s f ves vcs n m s vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> []\n 7. \\<And>vi j s v vs i.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> []\n 8. \\<And>vi j s v vs v' i.\n       length vi = j \\<Longrightarrow> [$C v', $Set_local j] \\<noteq> []\n 9. \\<And>s vs j i. [$Get_global j] \\<noteq> []\n 10. \\<And>s i j v s' vs.\n        supdate_glob s i j v = s' \\<Longrightarrow>\n        [$C v, $Set_global j] \\<noteq> []\nA total of 23 subgoals...", "case (label s vs es i s' vs' es' k lholed les les')"], ["proof (state)\nthis:\n  \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n  Lfilled k lholed es les\n  Lfilled k lholed es' les'\n  es \\<noteq> []\n\ngoal (23 subgoals):\n 1. \\<And>s vs j i. [$Call j] \\<noteq> []\n 2. \\<And>s i c cl j tf vs.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq> []\n 3. \\<And>s i c cl j vs.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> []\n 4. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> []\n 5. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> []\n 6. \\<And>cl t1s t2s f ves vcs n m s vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> []\n 7. \\<And>vi j s v vs i.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> []\n 8. \\<And>vi j s v vs v' i.\n       length vi = j \\<Longrightarrow> [$C v', $Set_local j] \\<noteq> []\n 9. \\<And>s vs j i. [$Get_global j] \\<noteq> []\n 10. \\<And>s i j v s' vs.\n        supdate_glob s i j v = s' \\<Longrightarrow>\n        [$C v, $Set_global j] \\<noteq> []\nA total of 23 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. les \\<noteq> []", "using lfilled_size[OF label(2)] label(4)"], ["proof (prove)\nusing this:\n  size_list size es \\<le> size_list size les\n  es \\<noteq> []\n\ngoal (1 subgoal):\n 1. les \\<noteq> []", "by (metis One_nat_def add_is_0 le_0_eq list.exhaust list.size(2) list.size_gen(1) zero_neq_one)"], ["proof (state)\nthis:\n  les \\<noteq> []\n\ngoal (22 subgoals):\n 1. \\<And>s vs j i. [$Call j] \\<noteq> []\n 2. \\<And>s i c cl j tf vs.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq> []\n 3. \\<And>s i c cl j vs.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> []\n 4. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> []\n 5. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> []\n 6. \\<And>cl t1s t2s f ves vcs n m s vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> []\n 7. \\<And>vi j s v vs i.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> []\n 8. \\<And>vi j s v vs v' i.\n       length vi = j \\<Longrightarrow> [$C v', $Set_local j] \\<noteq> []\n 9. \\<And>s vs j i. [$Get_global j] \\<noteq> []\n 10. \\<And>s i j v s' vs.\n        supdate_glob s i j v = s' \\<Longrightarrow>\n        [$C v, $Set_global j] \\<noteq> []\nA total of 22 subgoals...", "qed auto"], ["", "lemma reduce_simple_not_trap:\n  assumes \"\\<lparr>es\\<rparr> \\<leadsto> \\<lparr>es'\\<rparr>\"\n  shows \"es \\<noteq> [Trap]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. es \\<noteq> [Trap]", "using assms"], ["proof (prove)\nusing this:\n  \\<lparr>es\\<rparr> \\<leadsto> \\<lparr>es'\\<rparr>\n\ngoal (1 subgoal):\n 1. es \\<noteq> [Trap]", "by (induction rule: reduce_simple.induct) auto"], ["", "lemma reduce_not_trap:\n  assumes \"\\<lparr>s;vs;es\\<rparr> \\<leadsto>_i \\<lparr>s';vs';es'\\<rparr>\"\n  shows \"es \\<noteq> [Trap]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. es \\<noteq> [Trap]", "using assms"], ["proof (prove)\nusing this:\n  \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. es \\<noteq> [Trap]", "proof (induction rule: reduce.induct)"], ["proof (state)\ngoal (24 subgoals):\n 1. \\<And>e e' s vs i.\n       \\<lparr>e\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr> \\<Longrightarrow>\n       e \\<noteq> [Trap]\n 2. \\<And>s vs j i. [$Call j] \\<noteq> [Trap]\n 3. \\<And>s i c cl j tf vs.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 4. \\<And>s i c cl j vs.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 5. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 6. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 7. \\<And>cl t1s t2s f ves vcs n m s vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 8. \\<And>vi j s v vs i.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> [Trap]\n 9. \\<And>vi j s v vs v' i.\n       length vi = j \\<Longrightarrow> [$C v', $Set_local j] \\<noteq> [Trap]\n 10. \\<And>s vs j i. [$Get_global j] \\<noteq> [Trap]\nA total of 24 subgoals...", "case (basic e e' s vs i)"], ["proof (state)\nthis:\n  \\<lparr>e\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr>\n\ngoal (24 subgoals):\n 1. \\<And>e e' s vs i.\n       \\<lparr>e\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr> \\<Longrightarrow>\n       e \\<noteq> [Trap]\n 2. \\<And>s vs j i. [$Call j] \\<noteq> [Trap]\n 3. \\<And>s i c cl j tf vs.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 4. \\<And>s i c cl j vs.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 5. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 6. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 7. \\<And>cl t1s t2s f ves vcs n m s vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 8. \\<And>vi j s v vs i.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> [Trap]\n 9. \\<And>vi j s v vs v' i.\n       length vi = j \\<Longrightarrow> [$C v', $Set_local j] \\<noteq> [Trap]\n 10. \\<And>s vs j i. [$Get_global j] \\<noteq> [Trap]\nA total of 24 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lparr>e\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr>\n\ngoal (1 subgoal):\n 1. e \\<noteq> [Trap]", "using reduce_simple_not_trap"], ["proof (prove)\nusing this:\n  \\<lparr>e\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr>\n  \\<lparr>?es\\<rparr> \\<leadsto> \\<lparr>?es'\\<rparr> \\<Longrightarrow>\n  ?es \\<noteq> [Trap]\n\ngoal (1 subgoal):\n 1. e \\<noteq> [Trap]", "by simp"], ["proof (state)\nthis:\n  e \\<noteq> [Trap]\n\ngoal (23 subgoals):\n 1. \\<And>s vs j i. [$Call j] \\<noteq> [Trap]\n 2. \\<And>s i c cl j tf vs.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 3. \\<And>s i c cl j vs.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 4. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 5. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 6. \\<And>cl t1s t2s f ves vcs n m s vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 7. \\<And>vi j s v vs i.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> [Trap]\n 8. \\<And>vi j s v vs v' i.\n       length vi = j \\<Longrightarrow> [$C v', $Set_local j] \\<noteq> [Trap]\n 9. \\<And>s vs j i. [$Get_global j] \\<noteq> [Trap]\n 10. \\<And>s i j v s' vs.\n        supdate_glob s i j v = s' \\<Longrightarrow>\n        [$C v, $Set_global j] \\<noteq> [Trap]\nA total of 23 subgoals...", "next"], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>s vs j i. [$Call j] \\<noteq> [Trap]\n 2. \\<And>s i c cl j tf vs.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 3. \\<And>s i c cl j vs.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 4. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 5. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 6. \\<And>cl t1s t2s f ves vcs n m s vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 7. \\<And>vi j s v vs i.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> [Trap]\n 8. \\<And>vi j s v vs v' i.\n       length vi = j \\<Longrightarrow> [$C v', $Set_local j] \\<noteq> [Trap]\n 9. \\<And>s vs j i. [$Get_global j] \\<noteq> [Trap]\n 10. \\<And>s i j v s' vs.\n        supdate_glob s i j v = s' \\<Longrightarrow>\n        [$C v, $Set_global j] \\<noteq> [Trap]\nA total of 23 subgoals...", "case (label s vs es i s' vs' es' k lholed les les')"], ["proof (state)\nthis:\n  \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n  Lfilled k lholed es les\n  Lfilled k lholed es' les'\n  es \\<noteq> [Trap]\n\ngoal (23 subgoals):\n 1. \\<And>s vs j i. [$Call j] \\<noteq> [Trap]\n 2. \\<And>s i c cl j tf vs.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 3. \\<And>s i c cl j vs.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 4. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 5. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 6. \\<And>cl t1s t2s f ves vcs n m s vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 7. \\<And>vi j s v vs i.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> [Trap]\n 8. \\<And>vi j s v vs v' i.\n       length vi = j \\<Longrightarrow> [$C v', $Set_local j] \\<noteq> [Trap]\n 9. \\<And>s vs j i. [$Get_global j] \\<noteq> [Trap]\n 10. \\<And>s i j v s' vs.\n        supdate_glob s i j v = s' \\<Longrightarrow>\n        [$C v, $Set_global j] \\<noteq> [Trap]\nA total of 23 subgoals...", "{"], ["proof (state)\nthis:\n  \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n  Lfilled k lholed es les\n  Lfilled k lholed es' les'\n  es \\<noteq> [Trap]\n\ngoal (23 subgoals):\n 1. \\<And>s vs j i. [$Call j] \\<noteq> [Trap]\n 2. \\<And>s i c cl j tf vs.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 3. \\<And>s i c cl j vs.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 4. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 5. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 6. \\<And>cl t1s t2s f ves vcs n m s vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 7. \\<And>vi j s v vs i.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> [Trap]\n 8. \\<And>vi j s v vs v' i.\n       length vi = j \\<Longrightarrow> [$C v', $Set_local j] \\<noteq> [Trap]\n 9. \\<And>s vs j i. [$Get_global j] \\<noteq> [Trap]\n 10. \\<And>s i j v s' vs.\n        supdate_glob s i j v = s' \\<Longrightarrow>\n        [$C v, $Set_global j] \\<noteq> [Trap]\nA total of 23 subgoals...", "assume \"les = [Trap]\""], ["proof (state)\nthis:\n  les = [Trap]\n\ngoal (23 subgoals):\n 1. \\<And>s vs j i. [$Call j] \\<noteq> [Trap]\n 2. \\<And>s i c cl j tf vs.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 3. \\<And>s i c cl j vs.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 4. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 5. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 6. \\<And>cl t1s t2s f ves vcs n m s vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 7. \\<And>vi j s v vs i.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> [Trap]\n 8. \\<And>vi j s v vs v' i.\n       length vi = j \\<Longrightarrow> [$C v', $Set_local j] \\<noteq> [Trap]\n 9. \\<And>s vs j i. [$Get_global j] \\<noteq> [Trap]\n 10. \\<And>s i j v s' vs.\n        supdate_glob s i j v = s' \\<Longrightarrow>\n        [$C v, $Set_global j] \\<noteq> [Trap]\nA total of 23 subgoals...", "hence \"Lfilled k lholed es [Trap]\""], ["proof (prove)\nusing this:\n  les = [Trap]\n\ngoal (1 subgoal):\n 1. Lfilled k lholed es [Trap]", "using label(2)"], ["proof (prove)\nusing this:\n  les = [Trap]\n  Lfilled k lholed es les\n\ngoal (1 subgoal):\n 1. Lfilled k lholed es [Trap]", "by simp"], ["proof (state)\nthis:\n  Lfilled k lholed es [Trap]\n\ngoal (23 subgoals):\n 1. \\<And>s vs j i. [$Call j] \\<noteq> [Trap]\n 2. \\<And>s i c cl j tf vs.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 3. \\<And>s i c cl j vs.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 4. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 5. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 6. \\<And>cl t1s t2s f ves vcs n m s vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 7. \\<And>vi j s v vs i.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> [Trap]\n 8. \\<And>vi j s v vs v' i.\n       length vi = j \\<Longrightarrow> [$C v', $Set_local j] \\<noteq> [Trap]\n 9. \\<And>s vs j i. [$Get_global j] \\<noteq> [Trap]\n 10. \\<And>s i j v s' vs.\n        supdate_glob s i j v = s' \\<Longrightarrow>\n        [$C v, $Set_global j] \\<noteq> [Trap]\nA total of 23 subgoals...", "hence False"], ["proof (prove)\nusing this:\n  Lfilled k lholed es [Trap]\n\ngoal (1 subgoal):\n 1. False", "using lfilled_single reduce_not_nil[OF label(1)] label(4)"], ["proof (prove)\nusing this:\n  Lfilled k lholed es [Trap]\n  \\<lbrakk>Lfilled ?k ?lholed ?es [?e];\n   \\<And>a b c. ?e \\<noteq> Label a b c\\<rbrakk>\n  \\<Longrightarrow> ?es = [?e] \\<and> ?lholed = LBase [] [] \\<or> ?es = []\n  es \\<noteq> []\n  es \\<noteq> [Trap]\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal (23 subgoals):\n 1. \\<And>s vs j i. [$Call j] \\<noteq> [Trap]\n 2. \\<And>s i c cl j tf vs.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 3. \\<And>s i c cl j vs.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 4. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 5. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 6. \\<And>cl t1s t2s f ves vcs n m s vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 7. \\<And>vi j s v vs i.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> [Trap]\n 8. \\<And>vi j s v vs v' i.\n       length vi = j \\<Longrightarrow> [$C v', $Set_local j] \\<noteq> [Trap]\n 9. \\<And>s vs j i. [$Get_global j] \\<noteq> [Trap]\n 10. \\<And>s i j v s' vs.\n        supdate_glob s i j v = s' \\<Longrightarrow>\n        [$C v, $Set_global j] \\<noteq> [Trap]\nA total of 23 subgoals...", "}"], ["proof (state)\nthis:\n  les = [Trap] \\<Longrightarrow> False\n\ngoal (23 subgoals):\n 1. \\<And>s vs j i. [$Call j] \\<noteq> [Trap]\n 2. \\<And>s i c cl j tf vs.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 3. \\<And>s i c cl j vs.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 4. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 5. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 6. \\<And>cl t1s t2s f ves vcs n m s vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 7. \\<And>vi j s v vs i.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> [Trap]\n 8. \\<And>vi j s v vs v' i.\n       length vi = j \\<Longrightarrow> [$C v', $Set_local j] \\<noteq> [Trap]\n 9. \\<And>s vs j i. [$Get_global j] \\<noteq> [Trap]\n 10. \\<And>s i j v s' vs.\n        supdate_glob s i j v = s' \\<Longrightarrow>\n        [$C v, $Set_global j] \\<noteq> [Trap]\nA total of 23 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  les = [Trap] \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. les \\<noteq> [Trap]", "by auto"], ["proof (state)\nthis:\n  les \\<noteq> [Trap]\n\ngoal (22 subgoals):\n 1. \\<And>s vs j i. [$Call j] \\<noteq> [Trap]\n 2. \\<And>s i c cl j tf vs.\n       \\<lbrakk>stab s i (nat_of_int c) = Some cl; stypes s i j = tf;\n        cl_type cl = tf\\<rbrakk>\n       \\<Longrightarrow> [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 3. \\<And>s i c cl j vs.\n       stab s i (nat_of_int c) = Some cl \\<and>\n       stypes s i j \\<noteq> cl_type cl \\<or>\n       stab s i (nat_of_int c) = None \\<Longrightarrow>\n       [$C ConstInt32 c, $Call_indirect j] \\<noteq> [Trap]\n 4. \\<And>cl j t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native j (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 5. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m;\n        host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs')\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 6. \\<And>cl t1s t2s f ves vcs n m s vs i.\n       \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n        length vcs = n; length t1s = n; length t2s = m\\<rbrakk>\n       \\<Longrightarrow> ves @ [Callcl cl] \\<noteq> [Trap]\n 7. \\<And>vi j s v vs i.\n       length vi = j \\<Longrightarrow> [$Get_local j] \\<noteq> [Trap]\n 8. \\<And>vi j s v vs v' i.\n       length vi = j \\<Longrightarrow> [$C v', $Set_local j] \\<noteq> [Trap]\n 9. \\<And>s vs j i. [$Get_global j] \\<noteq> [Trap]\n 10. \\<And>s i j v s' vs.\n        supdate_glob s i j v = s' \\<Longrightarrow>\n        [$C v, $Set_global j] \\<noteq> [Trap]\nA total of 22 subgoals...", "qed auto"], ["", "lemma reduce_simple_call: \"\\<not>\\<lparr>[$Call j]\\<rparr> \\<leadsto> \\<lparr>es'\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<lparr>[$Call j]\\<rparr> \\<leadsto> \\<lparr>es'\\<rparr>", "using reduce_simple.simps[of \"[$Call j]\", simplified] lfilled_single"], ["proof (prove)\nusing this:\n  \\<lparr>[$Call j]\\<rparr> \\<leadsto> \\<lparr>?a2.0\\<rparr> =\n  (?a2.0 = [Trap] \\<and>\n   (\\<exists>lholed. Lfilled 0 lholed [Trap] [$Call j]))\n  \\<lbrakk>Lfilled ?k ?lholed ?es [?e];\n   \\<And>a b c. ?e \\<noteq> Label a b c\\<rbrakk>\n  \\<Longrightarrow> ?es = [?e] \\<and> ?lholed = LBase [] [] \\<or> ?es = []\n\ngoal (1 subgoal):\n 1. \\<not> \\<lparr>[$Call j]\\<rparr> \\<leadsto> \\<lparr>es'\\<rparr>", "by fastforce"], ["", "lemma reduce_call:\n  assumes \"\\<lparr>s;vs;[$Call j]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\"\n  shows \"s = s'\"\n        \"vs = vs'\"\n        \"es' = [Callcl (sfunc s i j)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s = s' &&& vs = vs' &&& es' = [Callcl (sfunc s i j)]", "using assms"], ["proof (prove)\nusing this:\n  \\<lparr>s;vs;[$Call j]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. s = s' &&& vs = vs' &&& es' = [Callcl (sfunc s i j)]", "proof (induction \"[$Call j]:: e list\" i s' vs' es' rule: reduce.induct)"], ["proof (state)\ngoal (18 subgoals):\n 1. \\<And>e' s vs i.\n       \\<lparr>[$Call\n                  j]\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr> \\<Longrightarrow>\n       s = s\n 2. \\<And>e' s vs i.\n       \\<lparr>[$Call\n                  j]\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr> \\<Longrightarrow>\n       vs = vs\n 3. \\<And>e' s vs i.\n       \\<lparr>[$Call\n                  j]\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr> \\<Longrightarrow>\n       e' = [Callcl (sfunc s i j)]\n 4. \\<And>s vs i. s = s\n 5. \\<And>s vs i. vs = vs\n 6. \\<And>s vs i. [Callcl (sfunc s i j)] = [Callcl (sfunc s i j)]\n 7. \\<And>cl ja t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native ja (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs; ves @ [Callcl cl] = [$Call j]\\<rbrakk>\n       \\<Longrightarrow> s = s\n 8. \\<And>cl ja t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native ja (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs; ves @ [Callcl cl] = [$Call j]\\<rbrakk>\n       \\<Longrightarrow> vs = vs\n 9. \\<And>cl ja t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native ja (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs; ves @ [Callcl cl] = [$Call j]\\<rbrakk>\n       \\<Longrightarrow> [Local m ja (vcs @ zs) [$Block ([] _> t2s) es]] =\n                         [Callcl (sfunc s i j)]\n 10. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i.\n        \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n         length vcs = n; length t1s = n; length t2s = m;\n         host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs');\n         ves @ [Callcl cl] = [$Call j]\\<rbrakk>\n        \\<Longrightarrow> s = s'\nA total of 18 subgoals...", "case (label s vs es i s' vs' es' k lholed les')"], ["proof (state)\nthis:\n  \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n  es = [$Call j] \\<Longrightarrow> s = s'\n  es = [$Call j] \\<Longrightarrow> vs = vs'\n  es = [$Call j] \\<Longrightarrow> es' = [Callcl (sfunc s i j)]\n  Lfilled k lholed es [$Call j]\n  Lfilled k lholed es' les'\n\ngoal (18 subgoals):\n 1. \\<And>e' s vs i.\n       \\<lparr>[$Call\n                  j]\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr> \\<Longrightarrow>\n       s = s\n 2. \\<And>e' s vs i.\n       \\<lparr>[$Call\n                  j]\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr> \\<Longrightarrow>\n       vs = vs\n 3. \\<And>e' s vs i.\n       \\<lparr>[$Call\n                  j]\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr> \\<Longrightarrow>\n       e' = [Callcl (sfunc s i j)]\n 4. \\<And>s vs i. s = s\n 5. \\<And>s vs i. vs = vs\n 6. \\<And>s vs i. [Callcl (sfunc s i j)] = [Callcl (sfunc s i j)]\n 7. \\<And>cl ja t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native ja (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs; ves @ [Callcl cl] = [$Call j]\\<rbrakk>\n       \\<Longrightarrow> s = s\n 8. \\<And>cl ja t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native ja (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs; ves @ [Callcl cl] = [$Call j]\\<rbrakk>\n       \\<Longrightarrow> vs = vs\n 9. \\<And>cl ja t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native ja (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs; ves @ [Callcl cl] = [$Call j]\\<rbrakk>\n       \\<Longrightarrow> [Local m ja (vcs @ zs) [$Block ([] _> t2s) es]] =\n                         [Callcl (sfunc s i j)]\n 10. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i.\n        \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n         length vcs = n; length t1s = n; length t2s = m;\n         host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs');\n         ves @ [Callcl cl] = [$Call j]\\<rbrakk>\n        \\<Longrightarrow> s = s'\nA total of 18 subgoals...", "have \"es = [$Call j]\"\n       \"lholed = LBase [] []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. es = [$Call j] &&& lholed = LBase [] []", "using reduce_not_nil[OF label(1)] lfilled_single[OF label(5)]"], ["proof (prove)\nusing this:\n  es \\<noteq> []\n  (\\<And>a b c. $Call j \\<noteq> Label a b c) \\<Longrightarrow>\n  es = [$Call j] \\<and> lholed = LBase [] [] \\<or> es = []\n\ngoal (1 subgoal):\n 1. es = [$Call j] &&& lholed = LBase [] []", "by auto"], ["proof (state)\nthis:\n  es = [$Call j]\n  lholed = LBase [] []\n\ngoal (18 subgoals):\n 1. \\<And>e' s vs i.\n       \\<lparr>[$Call\n                  j]\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr> \\<Longrightarrow>\n       s = s\n 2. \\<And>e' s vs i.\n       \\<lparr>[$Call\n                  j]\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr> \\<Longrightarrow>\n       vs = vs\n 3. \\<And>e' s vs i.\n       \\<lparr>[$Call\n                  j]\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr> \\<Longrightarrow>\n       e' = [Callcl (sfunc s i j)]\n 4. \\<And>s vs i. s = s\n 5. \\<And>s vs i. vs = vs\n 6. \\<And>s vs i. [Callcl (sfunc s i j)] = [Callcl (sfunc s i j)]\n 7. \\<And>cl ja t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native ja (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs; ves @ [Callcl cl] = [$Call j]\\<rbrakk>\n       \\<Longrightarrow> s = s\n 8. \\<And>cl ja t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native ja (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs; ves @ [Callcl cl] = [$Call j]\\<rbrakk>\n       \\<Longrightarrow> vs = vs\n 9. \\<And>cl ja t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native ja (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs; ves @ [Callcl cl] = [$Call j]\\<rbrakk>\n       \\<Longrightarrow> [Local m ja (vcs @ zs) [$Block ([] _> t2s) es]] =\n                         [Callcl (sfunc s i j)]\n 10. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i.\n        \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n         length vcs = n; length t1s = n; length t2s = m;\n         host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs');\n         ves @ [Callcl cl] = [$Call j]\\<rbrakk>\n        \\<Longrightarrow> s = s'\nA total of 18 subgoals...", "thus \"s = s'\"\n       \"vs = vs'\"\n       \"les' = [Callcl (sfunc s i j)]\""], ["proof (prove)\nusing this:\n  es = [$Call j]\n  lholed = LBase [] []\n\ngoal (1 subgoal):\n 1. s = s' &&& vs = vs' &&& les' = [Callcl (sfunc s i j)]", "using label(2,3,4,6) Lfilled.simps[of k \"LBase [] []\" \"[Callcl (sfunc s i j)]\" les']"], ["proof (prove)\nusing this:\n  es = [$Call j]\n  lholed = LBase [] []\n  es = [$Call j] \\<Longrightarrow> s = s'\n  es = [$Call j] \\<Longrightarrow> vs = vs'\n  es = [$Call j] \\<Longrightarrow> es' = [Callcl (sfunc s i j)]\n  Lfilled k lholed es' les'\n  Lfilled k (LBase [] []) [Callcl (sfunc s i j)] les' =\n  ((\\<exists>vs lholed es' es.\n       k = 0 \\<and>\n       LBase [] [] = lholed \\<and>\n       [Callcl (sfunc s i j)] = es \\<and>\n       les' = vs @ es @ es' \\<and>\n       const_list vs \\<and> lholed = LBase vs es') \\<or>\n   (\\<exists>vs lholed n es' l es'' ka es lfilledk.\n       k = ka + 1 \\<and>\n       LBase [] [] = lholed \\<and>\n       [Callcl (sfunc s i j)] = es \\<and>\n       les' = vs @ [Label n es' lfilledk] @ es'' \\<and>\n       const_list vs \\<and>\n       lholed = LRec vs n es' l es'' \\<and> Lfilled ka l es lfilledk))\n\ngoal (1 subgoal):\n 1. s = s' &&& vs = vs' &&& les' = [Callcl (sfunc s i j)]", "by auto"], ["proof (state)\nthis:\n  s = s'\n  vs = vs'\n  les' = [Callcl (sfunc s i j)]\n\ngoal (15 subgoals):\n 1. \\<And>e' s vs i.\n       \\<lparr>[$Call\n                  j]\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr> \\<Longrightarrow>\n       s = s\n 2. \\<And>e' s vs i.\n       \\<lparr>[$Call\n                  j]\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr> \\<Longrightarrow>\n       vs = vs\n 3. \\<And>e' s vs i.\n       \\<lparr>[$Call\n                  j]\\<rparr> \\<leadsto> \\<lparr>e'\\<rparr> \\<Longrightarrow>\n       e' = [Callcl (sfunc s i j)]\n 4. \\<And>s vs i. s = s\n 5. \\<And>s vs i. vs = vs\n 6. \\<And>s vs i. [Callcl (sfunc s i j)] = [Callcl (sfunc s i j)]\n 7. \\<And>cl ja t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native ja (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs; ves @ [Callcl cl] = [$Call j]\\<rbrakk>\n       \\<Longrightarrow> s = s\n 8. \\<And>cl ja t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native ja (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs; ves @ [Callcl cl] = [$Call j]\\<rbrakk>\n       \\<Longrightarrow> vs = vs\n 9. \\<And>cl ja t1s t2s ts es ves vcs n k m zs s vs i.\n       \\<lbrakk>cl = Func_native ja (t1s _> t2s) ts es; ves = $$* vcs;\n        length vcs = n; length ts = k; length t1s = n; length t2s = m;\n        n_zeros ts = zs; ves @ [Callcl cl] = [$Call j]\\<rbrakk>\n       \\<Longrightarrow> [Local m ja (vcs @ zs) [$Block ([] _> t2s) es]] =\n                         [Callcl (sfunc s i j)]\n 10. \\<And>cl t1s t2s f ves vcs n m s hs s' vcs' vs i.\n        \\<lbrakk>cl = Func_host (t1s _> t2s) f; ves = $$* vcs;\n         length vcs = n; length t1s = n; length t2s = m;\n         host_apply s (t1s _> t2s) f vcs hs = Some (s', vcs');\n         ves @ [Callcl cl] = [$Call j]\\<rbrakk>\n        \\<Longrightarrow> s = s'\nA total of 15 subgoals...", "qed (auto simp add: reduce_simple_call)"], ["", "lemma run_one_step_basic_unreachable_result:\n  assumes \"run_one_step d i (s,vs,ves,$Unreachable) = (s', vs', res)\"\n  shows \"\\<exists>r. res = RSNormal r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r. res = RSNormal r", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $Unreachable) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. \\<exists>r. res = RSNormal r", "by auto"], ["", "lemma run_one_step_basic_nop_result:\n  assumes \"run_one_step d i (s,vs,ves,$Nop) = (s', vs', res)\"\n  shows \"\\<exists>r. res = RSNormal r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r. res = RSNormal r", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $Nop) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. \\<exists>r. res = RSNormal r", "by auto"], ["", "lemma run_one_step_basic_drop_result:\n  assumes \"run_one_step d i (s,vs,ves,$Drop) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $Drop) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases ves) auto"], ["", "lemma run_one_step_basic_select_result:\n  assumes \"run_one_step d i (s,vs,ves,$Select) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $Select) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  ves = a # list\n  run_one_step d i (s, vs, ves, $Select) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases a; cases list)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = []\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 aa lista.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = []\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x2 aa lista.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = []\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x3 aa lista.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstFloat64 x4; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = []\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x4 aa lista.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstFloat64 x4; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "fix x1a aa listaa"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = []\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 aa lista.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = []\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x2 aa lista.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = []\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x3 aa lista.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstFloat64 x4; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = []\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x4 aa lista.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstFloat64 x4; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "assume \"a = ConstInt32 x1a\" and \"list = aa#listaa\""], ["proof (state)\nthis:\n  a = ConstInt32 x1a\n  list = aa # listaa\n\ngoal (8 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = []\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 aa lista.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = []\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x2 aa lista.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = []\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x3 aa lista.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstFloat64 x4; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = []\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x4 aa lista.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstFloat64 x4; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = ConstInt32 x1a\n  list = aa # listaa\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms Cons"], ["proof (prove)\nusing this:\n  a = ConstInt32 x1a\n  list = aa # listaa\n  run_one_step d i (s, vs, ves, $Select) = (s', vs', res)\n  ves = a # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases listaa; cases \"int_eq x1a 0\") auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = []\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = []\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x2 aa lista.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = []\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x3 aa lista.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstFloat64 x4; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = []\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x4 aa lista.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        a = ConstFloat64 x4; ves = a # list;\n        run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "qed auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Select) = (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "qed auto"], ["", "lemma run_one_step_basic_block_result:\n  assumes \"run_one_step d i (s,vs,ves,$(Block x51 x52)) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $Block x51 x52) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. run_one_step d i (s, vs, ves, $Block x51 x52) =\n    (s', vs', res) \\<Longrightarrow>\n    (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "obtain t1s t2s where \"x51 = (t1s _> t2s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t1s t2s.\n        x51 = t1s _> t2s \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using tf.exhaust"], ["proof (prove)\nusing this:\n  (\\<And>x1 x2. ?y = x1 _> x2 \\<Longrightarrow> ?P) \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (\\<And>t1s t2s.\n        x51 = t1s _> t2s \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x51 = t1s _> t2s\n\ngoal (1 subgoal):\n 1. run_one_step d i (s, vs, ves, $Block x51 x52) =\n    (s', vs', res) \\<Longrightarrow>\n    (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "moreover"], ["proof (state)\nthis:\n  x51 = t1s _> t2s\n\ngoal (1 subgoal):\n 1. run_one_step d i (s, vs, ves, $Block x51 x52) =\n    (s', vs', res) \\<Longrightarrow>\n    (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "obtain ves' ves'' where \"split_n ves (length t1s) = (ves', ves'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ves' ves''.\n        split_n ves (length t1s) = (ves', ves'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  split_n ves (length t1s) = (ves', ves'')\n\ngoal (1 subgoal):\n 1. run_one_step d i (s, vs, ves, $Block x51 x52) =\n    (s', vs', res) \\<Longrightarrow>\n    (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "ultimately"], ["proof (chain)\npicking this:\n  x51 = t1s _> t2s\n  split_n ves (length t1s) = (ves', ves'')", "show ?thesis"], ["proof (prove)\nusing this:\n  x51 = t1s _> t2s\n  split_n ves (length t1s) = (ves', ves'')\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  x51 = t1s _> t2s\n  split_n ves (length t1s) = (ves', ves'')\n  run_one_step d i (s, vs, ves, $Block x51 x52) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases \"length t1s \\<le> length ves\") auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma run_one_step_basic_loop_result:\n  assumes \"run_one_step d i (s,vs,ves,$(Loop x61 x62)) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $Loop x61 x62) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. run_one_step d i (s, vs, ves, $Loop x61 x62) =\n    (s', vs', res) \\<Longrightarrow>\n    (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "obtain t1s t2s where \"x61 = (t1s _> t2s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t1s t2s.\n        x61 = t1s _> t2s \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using tf.exhaust"], ["proof (prove)\nusing this:\n  (\\<And>x1 x2. ?y = x1 _> x2 \\<Longrightarrow> ?P) \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (\\<And>t1s t2s.\n        x61 = t1s _> t2s \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x61 = t1s _> t2s\n\ngoal (1 subgoal):\n 1. run_one_step d i (s, vs, ves, $Loop x61 x62) =\n    (s', vs', res) \\<Longrightarrow>\n    (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "moreover"], ["proof (state)\nthis:\n  x61 = t1s _> t2s\n\ngoal (1 subgoal):\n 1. run_one_step d i (s, vs, ves, $Loop x61 x62) =\n    (s', vs', res) \\<Longrightarrow>\n    (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "obtain ves' ves'' where \"split_n ves (length t1s) = (ves', ves'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ves' ves''.\n        split_n ves (length t1s) = (ves', ves'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  split_n ves (length t1s) = (ves', ves'')\n\ngoal (1 subgoal):\n 1. run_one_step d i (s, vs, ves, $Loop x61 x62) =\n    (s', vs', res) \\<Longrightarrow>\n    (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "ultimately"], ["proof (chain)\npicking this:\n  x61 = t1s _> t2s\n  split_n ves (length t1s) = (ves', ves'')", "show ?thesis"], ["proof (prove)\nusing this:\n  x61 = t1s _> t2s\n  split_n ves (length t1s) = (ves', ves'')\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  x61 = t1s _> t2s\n  split_n ves (length t1s) = (ves', ves'')\n  run_one_step d i (s, vs, ves, $Loop x61 x62) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases \"length t1s \\<le> length ves\") auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma run_one_step_basic_if_result:\n  assumes \"run_one_step d i (s,vs,ves,$(If x71 x72 x73)) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $b_e.If x71 x72 x73) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $b_e.If x71 x72 x73) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $b_e.If x71 x72 x73) =\n                (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $b_e.If x71 x72 x73) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $b_e.If x71 x72 x73) =\n                (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  ves = a # list\n  run_one_step d i (s, vs, ves, $b_e.If x71 x72 x73) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases a)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e.If x71 x72 x73) = (s', vs', res);\n        a = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e.If x71 x72 x73) = (s', vs', res);\n        a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e.If x71 x72 x73) = (s', vs', res);\n        a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e.If x71 x72 x73) = (s', vs', res);\n        a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "fix x1a"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e.If x71 x72 x73) = (s', vs', res);\n        a = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e.If x71 x72 x73) = (s', vs', res);\n        a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e.If x71 x72 x73) = (s', vs', res);\n        a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e.If x71 x72 x73) = (s', vs', res);\n        a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "assume \"a = ConstInt32 x1a\""], ["proof (state)\nthis:\n  a = ConstInt32 x1a\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e.If x71 x72 x73) = (s', vs', res);\n        a = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e.If x71 x72 x73) = (s', vs', res);\n        a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e.If x71 x72 x73) = (s', vs', res);\n        a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e.If x71 x72 x73) = (s', vs', res);\n        a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = ConstInt32 x1a\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms Cons"], ["proof (prove)\nusing this:\n  a = ConstInt32 x1a\n  run_one_step d i (s, vs, ves, $b_e.If x71 x72 x73) = (s', vs', res)\n  ves = a # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases \"int_eq x1a 0\") auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e.If x71 x72 x73) = (s', vs', res);\n        a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e.If x71 x72 x73) = (s', vs', res);\n        a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e.If x71 x72 x73) = (s', vs', res);\n        a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "qed auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $b_e.If x71 x72 x73) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "qed auto"], ["", "lemma run_one_step_basic_br_result:\n  assumes \"run_one_step d i (s,vs,ves,$Br x8) = (s', vs', res)\"\n  shows \"\\<exists>r vrs. res = RSBreak r vrs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r vrs. res = RSBreak r vrs", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $Br x8) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. \\<exists>r vrs. res = RSBreak r vrs", "by (cases ves) auto"], ["", "lemma run_one_step_basic_br_if_result:\n  assumes \"run_one_step d i (s,vs,ves,$Br_if x9) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $Br_if x9) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Br_if x9) = (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Br_if x9) = (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Br_if x9) = (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Br_if x9) = (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  ves = a # list\n  run_one_step d i (s, vs, ves, $Br_if x9) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases a)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Br_if x9) = (s', vs', res);\n        a = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Br_if x9) = (s', vs', res);\n        a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Br_if x9) = (s', vs', res);\n        a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Br_if x9) = (s', vs', res);\n        a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (ConstInt32 x1)"], ["proof (state)\nthis:\n  a = ConstInt32 x1\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Br_if x9) = (s', vs', res);\n        a = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Br_if x9) = (s', vs', res);\n        a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Br_if x9) = (s', vs', res);\n        a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Br_if x9) = (s', vs', res);\n        a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = ConstInt32 x1\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms Cons"], ["proof (prove)\nusing this:\n  a = ConstInt32 x1\n  run_one_step d i (s, vs, ves, $Br_if x9) = (s', vs', res)\n  ves = a # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases \"int_eq x1 0\") auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Br_if x9) = (s', vs', res);\n        a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Br_if x9) = (s', vs', res);\n        a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Br_if x9) = (s', vs', res);\n        a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "qed auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Br_if x9) = (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "qed auto"], ["", "lemma run_one_step_basic_br_table_result:\n  assumes \"run_one_step d i (s,vs,ves,$Br_table js j) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $Br_table js j) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Br_table js j) = (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Br_table js j) =\n                (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Br_table js j) = (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Br_table js j) =\n                (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  ves = a # list\n  run_one_step d i (s, vs, ves, $Br_table js j) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases a)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Br_table js j) = (s', vs', res);\n        a = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Br_table js j) = (s', vs', res);\n        a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Br_table js j) = (s', vs', res);\n        a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Br_table js j) = (s', vs', res);\n        a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (ConstInt32 x1)"], ["proof (state)\nthis:\n  a = ConstInt32 x1\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Br_table js j) = (s', vs', res);\n        a = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Br_table js j) = (s', vs', res);\n        a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Br_table js j) = (s', vs', res);\n        a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Br_table js j) = (s', vs', res);\n        a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = ConstInt32 x1\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms Cons"], ["proof (prove)\nusing this:\n  a = ConstInt32 x1\n  run_one_step d i (s, vs, ves, $Br_table js j) = (s', vs', res)\n  ves = a # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases \"nat_of_int x1 < length js\") auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Br_table js j) = (s', vs', res);\n        a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Br_table js j) = (s', vs', res);\n        a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Br_table js j) = (s', vs', res);\n        a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "qed auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Br_table js j) = (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "qed auto"], ["", "lemma run_one_step_basic_return_result:\n  assumes \"run_one_step d i (s,vs,ves,$Return) = (s', vs', res)\"\n  shows \"\\<exists>vrs. res = RSReturn vrs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>vrs. res = RSReturn vrs", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $Return) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. \\<exists>vrs. res = RSReturn vrs", "by (cases ves) auto"], ["", "lemma run_one_step_basic_call_result:\n  assumes \"run_one_step d i (s,vs,ves,$Call x12) = (s', vs', res)\"\n  shows \"\\<exists>r. res = RSNormal r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r. res = RSNormal r", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $Call x12) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. \\<exists>r. res = RSNormal r", "by (cases ves) auto"], ["", "lemma run_one_step_basic_call_indirect_result:\n  assumes \"run_one_step d i (s,vs,ves,$Call_indirect x13) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $Call_indirect x13) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Call_indirect x13) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Call_indirect x13) =\n                (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Call_indirect x13) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Call_indirect x13) =\n                (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  ves = a # list\n  run_one_step d i (s, vs, ves, $Call_indirect x13) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases a)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Call_indirect x13) = (s', vs', res);\n        a = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Call_indirect x13) = (s', vs', res);\n        a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Call_indirect x13) = (s', vs', res);\n        a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Call_indirect x13) = (s', vs', res);\n        a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (ConstInt32 x1)"], ["proof (state)\nthis:\n  a = ConstInt32 x1\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Call_indirect x13) = (s', vs', res);\n        a = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Call_indirect x13) = (s', vs', res);\n        a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Call_indirect x13) = (s', vs', res);\n        a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Call_indirect x13) = (s', vs', res);\n        a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = ConstInt32 x1\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using Cons assms"], ["proof (prove)\nusing this:\n  a = ConstInt32 x1\n  ves = a # list\n  run_one_step d i (s, vs, ves, $Call_indirect x13) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases \"stab s i (nat_of_int x1)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>a = ConstInt32 x1; ves = a # list;\n     run_one_step d i (s, vs, ves, $Call_indirect x13) = (s', vs', res);\n     stab s i (nat_of_int x1) = None\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>aa.\n       \\<lbrakk>a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $Call_indirect x13) = (s', vs', res);\n        stab s i (nat_of_int x1) = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (Some cl)"], ["proof (state)\nthis:\n  stab s i (nat_of_int x1) = Some cl\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a = ConstInt32 x1; ves = a # list;\n     run_one_step d i (s, vs, ves, $Call_indirect x13) = (s', vs', res);\n     stab s i (nat_of_int x1) = None\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>aa.\n       \\<lbrakk>a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $Call_indirect x13) = (s', vs', res);\n        stab s i (nat_of_int x1) = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  stab s i (nat_of_int x1) = Some cl\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using Cons assms ConstInt32"], ["proof (prove)\nusing this:\n  stab s i (nat_of_int x1) = Some cl\n  ves = a # list\n  run_one_step d i (s, vs, ves, $Call_indirect x13) = (s', vs', res)\n  a = ConstInt32 x1\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases cl; cases \"stypes s i x13 = cl_type cl\") auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a = ConstInt32 x1; ves = a # list;\n     run_one_step d i (s, vs, ves, $Call_indirect x13) = (s', vs', res);\n     stab s i (nat_of_int x1) = None\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "qed auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Call_indirect x13) = (s', vs', res);\n        a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Call_indirect x13) = (s', vs', res);\n        a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Call_indirect x13) = (s', vs', res);\n        a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "qed auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Call_indirect x13) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "qed auto"], ["", "lemma run_one_step_basic_get_local_result:\n  assumes \"run_one_step d i (s,vs,ves,$Get_local x14) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $Get_local x14) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases \"x14 < length vs\") auto"], ["", "lemma run_one_step_basic_set_local_result:\n  assumes \"run_one_step d i (s,vs,ves,$Set_local x15) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $Set_local x15) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases ves; cases \"x15 < length vs\") auto"], ["", "lemma run_one_step_basic_tee_local_result:\n  assumes \"run_one_step d i (s,vs,ves,$Tee_local x16) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $Tee_local x16) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases ves) auto"], ["", "lemma run_one_step_basic_get_global_result:\n  assumes \"run_one_step d i (s,vs,ves,$Get_global x17) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $Get_global x17) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by auto"], ["", "lemma run_one_step_basic_set_global_result:\n  assumes \"run_one_step d i (s,vs,ves,$Set_global x18) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $Set_global x18) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases ves) auto"], ["", "lemma run_one_step_basic_load_result:\n  assumes \"run_one_step d i (s,vs,ves,$Load x191 x192 x193 x194) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases x192)"], ["proof (state)\ngoal (2 subgoals):\n 1. x192 = None \\<Longrightarrow>\n    (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n 2. \\<And>a.\n       x192 = Some a \\<Longrightarrow>\n       (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "case None"], ["proof (state)\nthis:\n  x192 = None\n\ngoal (2 subgoals):\n 1. x192 = None \\<Longrightarrow>\n    (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n 2. \\<And>a.\n       x192 = Some a \\<Longrightarrow>\n       (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x192 = None\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  x192 = None\n  run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x192 = None;\n     run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n     (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>x192 = None;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x192 = None;\n     run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n     (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>x192 = None;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms None"], ["proof (prove)\nusing this:\n  ves = a # list\n  run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) = (s', vs', res)\n  x192 = None\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases \"smem_ind s i\"; cases a)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = None; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = None; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = None; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = None; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>aa x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = Some aa; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>aa x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = Some aa; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>aa x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = Some aa; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>aa x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = Some aa; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "fix aa x1"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = None; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = None; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = None; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = None; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>aa x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = Some aa; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>aa x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = Some aa; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>aa x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = Some aa; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>aa x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = Some aa; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "assume \"smem_ind s i = Some aa\" and \"a = ConstInt32 x1\""], ["proof (state)\nthis:\n  smem_ind s i = Some aa\n  a = ConstInt32 x1\n\ngoal (8 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = None; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = None; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = None; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = None; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>aa x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = Some aa; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>aa x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = Some aa; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>aa x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = Some aa; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>aa x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = Some aa; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  smem_ind s i = Some aa\n  a = ConstInt32 x1\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms None Cons"], ["proof (prove)\nusing this:\n  smem_ind s i = Some aa\n  a = ConstInt32 x1\n  run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) = (s', vs', res)\n  x192 = None\n  ves = a # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases \"load (s.mem s ! aa) (nat_of_int x1) x194 (t_length x191)\") auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = None; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = None; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = None; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = None; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>aa x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = Some aa; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>aa x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = Some aa; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>aa x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; smem_ind s i = Some aa; ves = a # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = None; a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "qed auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x192 = None;\n     run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n     (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "qed auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       x192 = Some a \\<Longrightarrow>\n       (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       x192 = Some a \\<Longrightarrow>\n       (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "case (Some a)"], ["proof (state)\nthis:\n  x192 = Some a\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       x192 = Some a \\<Longrightarrow>\n       (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x192 = Some a\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  x192 = Some a\n  run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x192 = Some a;\n     run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n     (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>aa list.\n       \\<lbrakk>x192 = Some a;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        ves = aa # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (Cons a' list)"], ["proof (state)\nthis:\n  ves = a' # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x192 = Some a;\n     run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n     (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>aa list.\n       \\<lbrakk>x192 = Some a;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        ves = aa # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a' # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms Some"], ["proof (prove)\nusing this:\n  ves = a' # list\n  run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) = (s', vs', res)\n  x192 = Some a\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases \"smem_ind s i\"; cases a; cases a')"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>aa b x1.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = None; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>aa b x2.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = None; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>aa b x3.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = None; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>aa b x4.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = None; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>aa aaa b x1.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = Some aa; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aaa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>aa aaa b x2.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = Some aa; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aaa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>aa aaa b x3.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = Some aa; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aaa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>aa aaa b x4.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = Some aa; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aaa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "fix aa x y x1"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>aa b x1.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = None; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>aa b x2.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = None; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>aa b x3.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = None; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>aa b x4.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = None; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>aa aaa b x1.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = Some aa; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aaa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>aa aaa b x2.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = Some aa; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aaa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>aa aaa b x3.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = Some aa; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aaa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>aa aaa b x4.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = Some aa; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aaa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "assume \"smem_ind s i = Some aa\" and \"a = (x, y)\" and \"a' = ConstInt32 x1\""], ["proof (state)\nthis:\n  smem_ind s i = Some aa\n  a = (x, y)\n  a' = ConstInt32 x1\n\ngoal (8 subgoals):\n 1. \\<And>aa b x1.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = None; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>aa b x2.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = None; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>aa b x3.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = None; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>aa b x4.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = None; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>aa aaa b x1.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = Some aa; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aaa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>aa aaa b x2.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = Some aa; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aaa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>aa aaa b x3.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = Some aa; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aaa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>aa aaa b x4.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = Some aa; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aaa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  smem_ind s i = Some aa\n  a = (x, y)\n  a' = ConstInt32 x1\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms Some Cons"], ["proof (prove)\nusing this:\n  smem_ind s i = Some aa\n  a = (x, y)\n  a' = ConstInt32 x1\n  run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) = (s', vs', res)\n  x192 = Some a\n  ves = a' # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases \"load_packed y (s.mem s ! aa) (nat_of_int x1) x194 (tp_length x) (t_length x191)\") auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (7 subgoals):\n 1. \\<And>aa b x1.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = None; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>aa b x2.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = None; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>aa b x3.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = None; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>aa b x4.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = None; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>aa aaa b x2.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = Some aa; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aaa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>aa aaa b x3.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = Some aa; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aaa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>aa aaa b x4.\n       \\<lbrakk>ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; smem_ind s i = Some aa; ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a = (aaa, b); ves = a' # list;\n        run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n        (s', vs', res);\n        x192 = Some a; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "qed auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x192 = Some a;\n     run_one_step d i (s, vs, ves, $Load x191 x192 x193 x194) =\n     (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "qed auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma run_one_step_basic_store_result:\n  assumes \"run_one_step d i (s,vs,ves,$Store x201 x202 x203 x204) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases x202)"], ["proof (state)\ngoal (2 subgoals):\n 1. x202 = None \\<Longrightarrow>\n    (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n 2. \\<And>a.\n       x202 = Some a \\<Longrightarrow>\n       (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "case None"], ["proof (state)\nthis:\n  x202 = None\n\ngoal (2 subgoals):\n 1. x202 = None \\<Longrightarrow>\n    (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n 2. \\<And>a.\n       x202 = Some a \\<Longrightarrow>\n       (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x202 = None\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  x202 = None\n  run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x202 = None;\n     run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n     (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>x202 = None;\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x202 = None;\n     run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n     (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>x202 = None;\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "note outer_Cons = Cons"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x202 = None;\n     run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n     (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>x202 = None;\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms None"], ["proof (prove)\nusing this:\n  ves = a # list\n  run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) = (s', vs', res)\n  x202 = None\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases list)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n     (s', vs', res);\n     x202 = None; list = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>aa lista.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (Cons a' list')"], ["proof (state)\nthis:\n  list = a' # list'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n     (s', vs', res);\n     x202 = None; list = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>aa lista.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  list = a' # list'\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms None outer_Cons"], ["proof (prove)\nusing this:\n  list = a' # list'\n  run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) = (s', vs', res)\n  x202 = None\n  ves = a # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases a'; cases \"types_agree x201 a\"; cases \"smem_ind s i\")"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; types_agree x201 a; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; types_agree x201 a; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x1 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; types_agree x201 a; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; types_agree x201 a; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x2 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstFloat32 x3;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; types_agree x201 a; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 aa.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n         (s', vs', res);\n         x202 = None; ves = a # list; a' = ConstFloat32 x3;\n         list = a' # list';\n         run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n         (s', vs', res);\n         x202 = None; ves = a # list; types_agree x201 a; list = a' # list';\n         run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n         (s', vs', res);\n         x202 = None; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 16 subgoals...", "fix k aa"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; types_agree x201 a; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; types_agree x201 a; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x1 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; types_agree x201 a; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; types_agree x201 a; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x2 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstFloat32 x3;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; types_agree x201 a; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 aa.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n         (s', vs', res);\n         x202 = None; ves = a # list; a' = ConstFloat32 x3;\n         list = a' # list';\n         run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n         (s', vs', res);\n         x202 = None; ves = a # list; types_agree x201 a; list = a' # list';\n         run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n         (s', vs', res);\n         x202 = None; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 16 subgoals...", "assume \"a' = ConstInt32 k\" and \"types_agree x201 a\" and \"smem_ind s i = Some aa\""], ["proof (state)\nthis:\n  a' = ConstInt32 k\n  types_agree x201 a\n  smem_ind s i = Some aa\n\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; types_agree x201 a; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; types_agree x201 a; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x1 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; types_agree x201 a; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; types_agree x201 a; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x2 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstFloat32 x3;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; types_agree x201 a; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 aa.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n         (s', vs', res);\n         x202 = None; ves = a # list; a' = ConstFloat32 x3;\n         list = a' # list';\n         run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n         (s', vs', res);\n         x202 = None; ves = a # list; types_agree x201 a; list = a' # list';\n         run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n         (s', vs', res);\n         x202 = None; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 16 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  a' = ConstInt32 k\n  types_agree x201 a\n  smem_ind s i = Some aa\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms None outer_Cons Cons"], ["proof (prove)\nusing this:\n  a' = ConstInt32 k\n  types_agree x201 a\n  smem_ind s i = Some aa\n  run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) = (s', vs', res)\n  x202 = None\n  ves = a # list\n  list = a' # list'\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases \"store (s.mem s ! aa) (nat_of_int k) x204 (bits a) (t_length x201)\") auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; types_agree x201 a; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; types_agree x201 a; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; types_agree x201 a; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstFloat32 x3;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; types_agree x201 a; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; a' = ConstFloat32 x3;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; types_agree x201 a; list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = None; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n         (s', vs', res);\n         x202 = None; ves = a # list; a' = ConstFloat32 x3;\n         list = a' # list';\n         run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n         (s', vs', res);\n         x202 = None; ves = a # list; \\<not> types_agree x201 a;\n         list = a' # list';\n         run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n         (s', vs', res);\n         x202 = None; ves = a # list; smem_ind s i = None\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 15 subgoals...", "qed auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n     (s', vs', res);\n     x202 = None; list = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "qed auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x202 = None;\n     run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n     (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "qed auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       x202 = Some a \\<Longrightarrow>\n       (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       x202 = Some a \\<Longrightarrow>\n       (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "case (Some a'')"], ["proof (state)\nthis:\n  x202 = Some a''\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       x202 = Some a \\<Longrightarrow>\n       (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x202 = Some a''\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  x202 = Some a''\n  run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x202 = Some a'';\n     run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n     (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>x202 = Some a'';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x202 = Some a'';\n     run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n     (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>x202 = Some a'';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "note outer_Cons = Cons"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x202 = Some a'';\n     run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n     (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>x202 = Some a'';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms Some"], ["proof (prove)\nusing this:\n  ves = a # list\n  run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) = (s', vs', res)\n  x202 = Some a''\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases list)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n     (s', vs', res);\n     x202 = Some a''; list = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>aa lista.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (Cons a' list')"], ["proof (state)\nthis:\n  list = a' # list'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n     (s', vs', res);\n     x202 = Some a''; list = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>aa lista.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  list = a' # list'\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms Some outer_Cons"], ["proof (prove)\nusing this:\n  list = a' # list'\n  run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) = (s', vs', res)\n  x202 = Some a''\n  ves = a # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases a'; cases \"types_agree x201 a\"; cases \"smem_ind s i\")"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt32 x1;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt32 x1;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt32 x1;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x1 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt32 x1;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt64 x2;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt64 x2;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt64 x2;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x2 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt64 x2;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstFloat32 x3;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 aa.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n         (s', vs', res);\n         x202 = Some a''; ves = a # list; a' = ConstFloat32 x3;\n         list = a' # list';\n         run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n         (s', vs', res);\n         x202 = Some a''; ves = a # list; types_agree x201 a;\n         list = a' # list';\n         run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n         (s', vs', res);\n         x202 = Some a''; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 16 subgoals...", "fix k aa"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt32 x1;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt32 x1;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt32 x1;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x1 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt32 x1;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt64 x2;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt64 x2;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt64 x2;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x2 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt64 x2;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstFloat32 x3;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 aa.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n         (s', vs', res);\n         x202 = Some a''; ves = a # list; a' = ConstFloat32 x3;\n         list = a' # list';\n         run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n         (s', vs', res);\n         x202 = Some a''; ves = a # list; types_agree x201 a;\n         list = a' # list';\n         run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n         (s', vs', res);\n         x202 = Some a''; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 16 subgoals...", "assume \"a' = ConstInt32 k\" and \"types_agree x201 a\" and \"smem_ind s i = Some aa\""], ["proof (state)\nthis:\n  a' = ConstInt32 k\n  types_agree x201 a\n  smem_ind s i = Some aa\n\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt32 x1;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt32 x1;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt32 x1;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x1 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt32 x1;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt64 x2;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt64 x2;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt64 x2;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x2 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt64 x2;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstFloat32 x3;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 aa.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n         (s', vs', res);\n         x202 = Some a''; ves = a # list; a' = ConstFloat32 x3;\n         list = a' # list';\n         run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n         (s', vs', res);\n         x202 = Some a''; ves = a # list; types_agree x201 a;\n         list = a' # list';\n         run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n         (s', vs', res);\n         x202 = Some a''; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 16 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  a' = ConstInt32 k\n  types_agree x201 a\n  smem_ind s i = Some aa\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms Some outer_Cons Cons"], ["proof (prove)\nusing this:\n  a' = ConstInt32 k\n  types_agree x201 a\n  smem_ind s i = Some aa\n  run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) = (s', vs', res)\n  x202 = Some a''\n  ves = a # list\n  list = a' # list'\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases \"store_packed (s.mem s ! aa) (nat_of_int k) x204 (bits a) (tp_length a'')\") auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt32 x1;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt32 x1;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt32 x1;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt64 x2;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt64 x2;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt64 x2;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstInt64 x2;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; \\<not> types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstFloat32 x3;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 aa.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; a' = ConstFloat32 x3;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; types_agree x201 a;\n        list = a' # list';\n        run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n        (s', vs', res);\n        x202 = Some a''; ves = a # list; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n         (s', vs', res);\n         x202 = Some a''; ves = a # list; a' = ConstFloat32 x3;\n         list = a' # list';\n         run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n         (s', vs', res);\n         x202 = Some a''; ves = a # list; \\<not> types_agree x201 a;\n         list = a' # list';\n         run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n         (s', vs', res);\n         x202 = Some a''; ves = a # list; smem_ind s i = None\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 15 subgoals...", "qed auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n     (s', vs', res);\n     x202 = Some a''; list = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "qed auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x202 = Some a'';\n     run_one_step d i (s, vs, ves, $Store x201 x202 x203 x204) =\n     (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "qed auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma run_one_step_basic_current_memory_result:\n  assumes \"run_one_step d i (s,vs,ves,$Current_memory) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $Current_memory) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases \"smem_ind s i\") auto"], ["", "lemma run_one_step_basic_grow_memory_result:\n  assumes \"run_one_step d i (s,vs,ves,$Grow_memory) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Grow_memory) =\n                (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Grow_memory) =\n                (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  ves = a # list\n  run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases a; cases \"smem_ind s i\")"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x2 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x3 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstFloat64 x4; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x4 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstFloat64 x4; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "fix c a'"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x2 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x3 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstFloat64 x4; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x4 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstFloat64 x4; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "assume \"a = ConstInt32 c\" and \"smem_ind s i = Some a'\""], ["proof (state)\nthis:\n  a = ConstInt32 c\n  smem_ind s i = Some a'\n\ngoal (8 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x2 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x3 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstFloat64 x4; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x4 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstFloat64 x4; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = ConstInt32 c\n  smem_ind s i = Some a'\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms Cons"], ["proof (prove)\nusing this:\n  a = ConstInt32 c\n  smem_ind s i = Some a'\n  run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res)\n  ves = a # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases \"mem_grow_impl (s.mem s ! a') (nat_of_int c)\") auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x2 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x3 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstFloat64 x4; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x4 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        a = ConstFloat64 x4; ves = a # list;\n        run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n        smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "qed auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Grow_memory) = (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "qed auto"], ["", "lemma run_one_step_basic_const_result:\n  assumes \"run_one_step d i (s,vs,ves,$EConst x23) = (s', vs', res)\"\n  shows \"\\<exists>e. res = RSCrash e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>e. res = RSCrash e", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $C x23) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. \\<exists>e. res = RSCrash e", "by auto"], ["", "lemma run_one_step_basic_unop_i_result:\n  assumes \"run_one_step d i (s,vs,ves,$Unop_i x241 x242) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $Unop_i x241 x242) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Unop_i x241 x242) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Unop_i x241 x242) =\n                (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Unop_i x241 x242) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Unop_i x241 x242) =\n                (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  ves = a # list\n  run_one_step d i (s, vs, ves, $Unop_i x241 x242) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases x241; cases a) auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Unop_i x241 x242) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "qed (cases x241; auto)"], ["", "lemma run_one_step_basic_unop_f_result:\n  assumes \"run_one_step d i (s,vs,ves,$Unop_f x251 x252) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $Unop_f x251 x252) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Unop_f x251 x252) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Unop_f x251 x252) =\n                (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Unop_f x251 x252) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Unop_f x251 x252) =\n                (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  ves = a # list\n  run_one_step d i (s, vs, ves, $Unop_f x251 x252) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases x251; cases a) auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Unop_f x251 x252) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "qed (cases x251; auto)"], ["", "lemma run_one_step_basic_binop_i_result:\n  assumes \"run_one_step d i (s,vs,ves,$Binop_i x261 x262) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Binop_i x261 x262) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Binop_i x261 x262) =\n                (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Binop_i x261 x262) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Binop_i x261 x262) =\n                (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "note outer_Cons = Cons"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Binop_i x261 x262) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Binop_i x261 x262) =\n                (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  ves = a # list\n  run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases list)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n     list = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>aa lista.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (Cons a' list')"], ["proof (state)\nthis:\n  list = a' # list'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n     list = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>aa lista.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  list = a' # list'\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms outer_Cons"], ["proof (prove)\nusing this:\n  list = a' # list'\n  run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res)\n  ves = a # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases x261; cases a; cases a')"], ["proof (state)\ngoal (64 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x2.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n         ves = a # list; x261 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n         ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 64 subgoals...", "fix x1 x2"], ["proof (state)\ngoal (64 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x2.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n         ves = a # list; x261 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n         ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 64 subgoals...", "assume \"x261 = T_i32\" \"a = ConstInt32 x1\" and \"a' = ConstInt32 x2\""], ["proof (state)\nthis:\n  x261 = T_i32\n  a = ConstInt32 x1\n  a' = ConstInt32 x2\n\ngoal (64 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x2.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n         ves = a # list; x261 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n         ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 64 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x261 = T_i32\n  a = ConstInt32 x1\n  a' = ConstInt32 x2\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms outer_Cons Cons"], ["proof (prove)\nusing this:\n  x261 = T_i32\n  a = ConstInt32 x1\n  a' = ConstInt32 x2\n  run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res)\n  ves = a # list\n  list = a' # list'\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases \"app_binop_i x262 x2 x1\") auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (63 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x3a.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n         ves = a # list; x261 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n         ves = a # list; a' = ConstFloat32 x3a\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 63 subgoals...", "next"], ["proof (state)\ngoal (63 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x3a.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n         ves = a # list; x261 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n         ves = a # list; a' = ConstFloat32 x3a\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 63 subgoals...", "fix x1 x2"], ["proof (state)\ngoal (63 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x3a.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n         ves = a # list; x261 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n         ves = a # list; a' = ConstFloat32 x3a\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 63 subgoals...", "assume \"x261 = T_i64\" \"a = ConstInt64 x1\" and \"a' = ConstInt64 x2\""], ["proof (state)\nthis:\n  x261 = T_i64\n  a = ConstInt64 x1\n  a' = ConstInt64 x2\n\ngoal (63 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x3a.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n         ves = a # list; x261 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n         ves = a # list; a' = ConstFloat32 x3a\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 63 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x261 = T_i64\n  a = ConstInt64 x1\n  a' = ConstInt64 x2\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms outer_Cons Cons"], ["proof (prove)\nusing this:\n  x261 = T_i64\n  a = ConstInt64 x1\n  a' = ConstInt64 x2\n  run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res)\n  ves = a # list\n  list = a' # list'\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases \"app_binop_i x262 x2 x1\") auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (62 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; x261 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x3a.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n         ves = a # list; x261 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n         ves = a # list; a' = ConstFloat32 x3a\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 62 subgoals...", "qed auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $Binop_i x261 x262) = (s', vs', res);\n     list = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "qed (cases x261; cases a; auto)"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Binop_i x261 x262) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "qed (cases x261; auto)"], ["", "lemma run_one_step_basic_binop_f_result:\n  assumes \"run_one_step d i (s,vs,ves,$Binop_f x271 x272) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Binop_f x271 x272) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Binop_f x271 x272) =\n                (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Binop_f x271 x272) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Binop_f x271 x272) =\n                (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "note outer_Cons = Cons"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Binop_f x271 x272) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Binop_f x271 x272) =\n                (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  ves = a # list\n  run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases list)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n     list = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>aa lista.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (Cons a' list')"], ["proof (state)\nthis:\n  list = a' # list'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n     list = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>aa lista.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  list = a' # list'\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms outer_Cons"], ["proof (prove)\nusing this:\n  list = a' # list'\n  run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res)\n  ves = a # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases x271; cases a; cases a')"], ["proof (state)\ngoal (64 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x2.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n         ves = a # list; x271 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n         ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 64 subgoals...", "fix x1 x2"], ["proof (state)\ngoal (64 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x2.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n         ves = a # list; x271 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n         ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 64 subgoals...", "assume \"x271 = T_f32\" \"a = ConstFloat32 x1\" and \"a' = ConstFloat32 x2\""], ["proof (state)\nthis:\n  x271 = T_f32\n  a = ConstFloat32 x1\n  a' = ConstFloat32 x2\n\ngoal (64 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x2.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n         ves = a # list; x271 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n         ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 64 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x271 = T_f32\n  a = ConstFloat32 x1\n  a' = ConstFloat32 x2\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms outer_Cons Cons"], ["proof (prove)\nusing this:\n  x271 = T_f32\n  a = ConstFloat32 x1\n  a' = ConstFloat32 x2\n  run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res)\n  ves = a # list\n  list = a' # list'\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases \"app_binop_f x272 x2 x1\") auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (63 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x2.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n         ves = a # list; x271 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n         ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 63 subgoals...", "next"], ["proof (state)\ngoal (63 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x2.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n         ves = a # list; x271 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n         ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 63 subgoals...", "fix x1 x2"], ["proof (state)\ngoal (63 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x2.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n         ves = a # list; x271 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n         ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 63 subgoals...", "assume \"x271 = T_f64\" \"a = ConstFloat64 x1\" and \"a' = ConstFloat64 x2\""], ["proof (state)\nthis:\n  x271 = T_f64\n  a = ConstFloat64 x1\n  a' = ConstFloat64 x2\n\ngoal (63 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x2.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n         ves = a # list; x271 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n         ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 63 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x271 = T_f64\n  a = ConstFloat64 x1\n  a' = ConstFloat64 x2\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms outer_Cons Cons"], ["proof (prove)\nusing this:\n  x271 = T_f64\n  a = ConstFloat64 x1\n  a' = ConstFloat64 x2\n  run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res)\n  ves = a # list\n  list = a' # list'\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases \"app_binop_f x272 x2 x1\") auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (62 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; x271 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x2.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n         ves = a # list; x271 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n         ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 62 subgoals...", "qed auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $Binop_f x271 x272) = (s', vs', res);\n     list = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "qed (cases x271; cases a; auto)"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Binop_f x271 x272) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "qed (cases x271; auto)"], ["", "lemma run_one_step_basic_testop_result:\n  assumes \"run_one_step d i (s,vs,ves,$Testop x281 x282) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $Testop x281 x282) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Testop x281 x282) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Testop x281 x282) =\n                (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Testop x281 x282) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Testop x281 x282) =\n                (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  ves = a # list\n  run_one_step d i (s, vs, ves, $Testop x281 x282) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases x281; cases a) auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Testop x281 x282) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "qed (cases x281; auto)"], ["", "lemma run_one_step_basic_relop_i_result:\n  assumes \"run_one_step d i (s,vs,ves,$Relop_i x291 x292) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Relop_i x291 x292) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Relop_i x291 x292) =\n                (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Relop_i x291 x292) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Relop_i x291 x292) =\n                (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "note outer_Cons = Cons"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Relop_i x291 x292) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Relop_i x291 x292) =\n                (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  ves = a # list\n  run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases list)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n     list = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>aa lista.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (Cons a' list')"], ["proof (state)\nthis:\n  list = a' # list'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n     list = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>aa lista.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  list = a' # list'\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms outer_Cons"], ["proof (prove)\nusing this:\n  list = a' # list'\n  run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res)\n  ves = a # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases x291; cases a; cases a')"], ["proof (state)\ngoal (64 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x2.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n         ves = a # list; x291 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n         ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 64 subgoals...", "fix x1 x2"], ["proof (state)\ngoal (64 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x2.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n         ves = a # list; x291 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n         ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 64 subgoals...", "assume \"x291 = T_i32\" \"a = ConstInt32 x1\" and \"a' = ConstInt32 x2\""], ["proof (state)\nthis:\n  x291 = T_i32\n  a = ConstInt32 x1\n  a' = ConstInt32 x2\n\ngoal (64 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x2.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n         ves = a # list; x291 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n         ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 64 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x291 = T_i32\n  a = ConstInt32 x1\n  a' = ConstInt32 x2\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms outer_Cons Cons"], ["proof (prove)\nusing this:\n  x291 = T_i32\n  a = ConstInt32 x1\n  a' = ConstInt32 x2\n  run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res)\n  ves = a # list\n  list = a' # list'\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases \"app_relop_i x292 x2 x1\") auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (63 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x3a.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n         ves = a # list; x291 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n         ves = a # list; a' = ConstFloat32 x3a\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 63 subgoals...", "next"], ["proof (state)\ngoal (63 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x3a.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n         ves = a # list; x291 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n         ves = a # list; a' = ConstFloat32 x3a\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 63 subgoals...", "fix x1 x2"], ["proof (state)\ngoal (63 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x3a.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n         ves = a # list; x291 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n         ves = a # list; a' = ConstFloat32 x3a\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 63 subgoals...", "assume \"x291 = T_i64\" \"a = ConstInt64 x1\" and \"a' = ConstInt64 x2\""], ["proof (state)\nthis:\n  x291 = T_i64\n  a = ConstInt64 x1\n  a' = ConstInt64 x2\n\ngoal (63 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x3a.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n         ves = a # list; x291 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n         ves = a # list; a' = ConstFloat32 x3a\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 63 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x291 = T_i64\n  a = ConstInt64 x1\n  a' = ConstInt64 x2\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms outer_Cons Cons"], ["proof (prove)\nusing this:\n  x291 = T_i64\n  a = ConstInt64 x1\n  a' = ConstInt64 x2\n  run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res)\n  ves = a # list\n  list = a' # list'\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases \"app_relop_i x292 x2 x1\") auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (62 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; x291 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x3a.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n         ves = a # list; x291 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n         ves = a # list; a' = ConstFloat32 x3a\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 62 subgoals...", "qed auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $Relop_i x291 x292) = (s', vs', res);\n     list = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "qed (cases x291; cases a; auto)"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Relop_i x291 x292) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "qed (cases x291; auto)"], ["", "lemma run_one_step_basic_relop_f_result:\n  assumes \"run_one_step d i (s,vs,ves,$Relop_f x301 x302) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Relop_f x301 x302) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Relop_f x301 x302) =\n                (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Relop_f x301 x302) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Relop_f x301 x302) =\n                (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "note outer_Cons = Cons"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Relop_f x301 x302) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Relop_f x301 x302) =\n                (s', vs', res);\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  ves = a # list\n  run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases list)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n     list = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>aa lista.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (Cons a' list')"], ["proof (state)\nthis:\n  list = a' # list'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n     list = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>aa lista.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  list = a' # list'\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms outer_Cons"], ["proof (prove)\nusing this:\n  list = a' # list'\n  run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res)\n  ves = a # list\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases x301; cases a; cases a')"], ["proof (state)\ngoal (64 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x2.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n         ves = a # list; x301 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n         ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 64 subgoals...", "fix x1 x2"], ["proof (state)\ngoal (64 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x2.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n         ves = a # list; x301 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n         ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 64 subgoals...", "assume \"x301 = T_f32\" \"a = ConstFloat32 x1\" and \"a' = ConstFloat32 x2\""], ["proof (state)\nthis:\n  x301 = T_f32\n  a = ConstFloat32 x1\n  a' = ConstFloat32 x2\n\ngoal (64 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x2.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n         ves = a # list; x301 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n         ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 64 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x301 = T_f32\n  a = ConstFloat32 x1\n  a' = ConstFloat32 x2\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms outer_Cons Cons"], ["proof (prove)\nusing this:\n  x301 = T_f32\n  a = ConstFloat32 x1\n  a' = ConstFloat32 x2\n  run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res)\n  ves = a # list\n  list = a' # list'\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases \"app_relop_f x302 x2 x1\") auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (63 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x2.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n         ves = a # list; x301 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n         ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 63 subgoals...", "next"], ["proof (state)\ngoal (63 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x2.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n         ves = a # list; x301 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n         ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 63 subgoals...", "fix x1 x2"], ["proof (state)\ngoal (63 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x2.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n         ves = a # list; x301 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n         ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 63 subgoals...", "assume \"x301 = T_f64\" \"a = ConstFloat64 x1\" and \"a' = ConstFloat64 x2\""], ["proof (state)\nthis:\n  x301 = T_f64\n  a = ConstFloat64 x1\n  a' = ConstFloat64 x2\n\ngoal (63 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x2.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n         ves = a # list; x301 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n         ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 63 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x301 = T_f64\n  a = ConstFloat64 x1\n  a' = ConstFloat64 x2\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms outer_Cons Cons"], ["proof (prove)\nusing this:\n  x301 = T_f64\n  a = ConstFloat64 x1\n  a' = ConstFloat64 x2\n  run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res)\n  ves = a # list\n  list = a' # list'\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases \"app_relop_f x302 x2 x1\") auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (62 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x1 x2.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x1 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x1 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt32 x1; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 5. \\<And>x2 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 6. \\<And>x2 x2a.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt64 x2a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 7. \\<And>x2 x3.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 8. \\<And>x2 x4.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstInt64 x2; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 9. \\<And>x3 x1.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; x301 = T_i32; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a = ConstFloat32 x3; list = a' # list';\n        run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n        ves = a # list; a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 10. \\<And>x3 x2.\n        \\<lbrakk>list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n         ves = a # list; x301 = T_i32; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n         ves = a # list; a = ConstFloat32 x3; list = a' # list';\n         run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n         ves = a # list; a' = ConstInt64 x2\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                          (\\<exists>e. res = RSCrash e)\nA total of 62 subgoals...", "qed auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $Relop_f x301 x302) = (s', vs', res);\n     list = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "qed (cases x301; cases a; auto)"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Relop_f x301 x302) =\n             (s', vs', res);\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "qed (cases x301; auto)"], ["", "lemma run_one_step_basic_cvtop_result:\n  assumes \"run_one_step d i (s,vs,ves,$Cvtop t2 x312 t1 sx) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases ves; cases x312)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n             (s', vs', res);\n     ves = [];\n     run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) = (s', vs', res);\n     x312 = Convert\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<lbrakk>run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n             (s', vs', res);\n     ves = [];\n     run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) = (s', vs', res);\n     x312 = Reinterpret\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 3. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n                (s', vs', res);\n        ves = a # list;\n        run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n        (s', vs', res);\n        x312 = Convert\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n                (s', vs', res);\n        ves = a # list;\n        run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n        (s', vs', res);\n        x312 = Reinterpret\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "fix a ves'"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n             (s', vs', res);\n     ves = [];\n     run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) = (s', vs', res);\n     x312 = Convert\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<lbrakk>run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n             (s', vs', res);\n     ves = [];\n     run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) = (s', vs', res);\n     x312 = Reinterpret\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 3. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n                (s', vs', res);\n        ves = a # list;\n        run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n        (s', vs', res);\n        x312 = Convert\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n                (s', vs', res);\n        ves = a # list;\n        run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n        (s', vs', res);\n        x312 = Reinterpret\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "assume \"ves = a#ves'\" and \"x312 = Convert\""], ["proof (state)\nthis:\n  ves = a # ves'\n  x312 = Convert\n\ngoal (4 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n             (s', vs', res);\n     ves = [];\n     run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) = (s', vs', res);\n     x312 = Convert\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<lbrakk>run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n             (s', vs', res);\n     ves = [];\n     run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) = (s', vs', res);\n     x312 = Reinterpret\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 3. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n                (s', vs', res);\n        ves = a # list;\n        run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n        (s', vs', res);\n        x312 = Convert\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n                (s', vs', res);\n        ves = a # list;\n        run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n        (s', vs', res);\n        x312 = Reinterpret\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # ves'\n  x312 = Convert\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  ves = a # ves'\n  x312 = Convert\n  run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases \"cvt t2 sx a\"; cases \"types_agree t1 a\") auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n             (s', vs', res);\n     ves = [];\n     run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) = (s', vs', res);\n     x312 = Convert\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<lbrakk>run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n             (s', vs', res);\n     ves = [];\n     run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) = (s', vs', res);\n     x312 = Reinterpret\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 3. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n                (s', vs', res);\n        ves = a # list;\n        run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n        (s', vs', res);\n        x312 = Reinterpret\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n             (s', vs', res);\n     ves = [];\n     run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) = (s', vs', res);\n     x312 = Convert\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<lbrakk>run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n             (s', vs', res);\n     ves = [];\n     run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) = (s', vs', res);\n     x312 = Reinterpret\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 3. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n                (s', vs', res);\n        ves = a # list;\n        run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n        (s', vs', res);\n        x312 = Reinterpret\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "fix a ves'"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n             (s', vs', res);\n     ves = [];\n     run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) = (s', vs', res);\n     x312 = Convert\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<lbrakk>run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n             (s', vs', res);\n     ves = [];\n     run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) = (s', vs', res);\n     x312 = Reinterpret\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 3. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n                (s', vs', res);\n        ves = a # list;\n        run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n        (s', vs', res);\n        x312 = Reinterpret\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "assume \"ves = a#ves'\" and \"x312 = Reinterpret\""], ["proof (state)\nthis:\n  ves = a # ves'\n  x312 = Reinterpret\n\ngoal (3 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n             (s', vs', res);\n     ves = [];\n     run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) = (s', vs', res);\n     x312 = Convert\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<lbrakk>run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n             (s', vs', res);\n     ves = [];\n     run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) = (s', vs', res);\n     x312 = Reinterpret\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 3. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n                (s', vs', res);\n        ves = a # list;\n        run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n        (s', vs', res);\n        x312 = Reinterpret\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # ves'\n  x312 = Reinterpret\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  ves = a # ves'\n  x312 = Reinterpret\n  run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases sx; cases \"types_agree t1 a\") auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n             (s', vs', res);\n     ves = [];\n     run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) = (s', vs', res);\n     x312 = Convert\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<lbrakk>run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) =\n             (s', vs', res);\n     ves = [];\n     run_one_step d i (s, vs, ves, $Cvtop t2 x312 t1 sx) = (s', vs', res);\n     x312 = Reinterpret\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "qed auto"], ["", "lemma run_one_step_trap_result:\n  assumes \"run_one_step d i (s,vs,ves,Trap) = (s', vs', res)\"\n  shows \"\\<exists>e. res = RSCrash e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>e. res = RSCrash e", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, Trap) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. \\<exists>e. res = RSCrash e", "by auto"], ["", "lemma run_one_step_callcl_result:\n  assumes \"run_one_step d i (s,vs,ves,Callcl cl) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "obtain t1s t2s where cl_type_is:\"cl_type cl = (t1s _> t2s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t1s t2s.\n        cl_type cl = t1s _> t2s \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using tf.exhaust"], ["proof (prove)\nusing this:\n  (\\<And>x1 x2. ?y = x1 _> x2 \\<Longrightarrow> ?P) \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (\\<And>t1s t2s.\n        cl_type cl = t1s _> t2s \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cl_type cl = t1s _> t2s\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "obtain ves' ves'' where split_n_is:\"split_n ves (length t1s) = (ves', ves'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ves' ves''.\n        split_n ves (length t1s) = (ves', ves'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  split_n ves (length t1s) = (ves', ves'')\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases cl)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x11 x12 x13 x14.\n       cl = Func_native x11 x12 x13 x14 \\<Longrightarrow>\n       (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n 2. \\<And>x21 x22.\n       cl = Func_host x21 x22 \\<Longrightarrow>\n       (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "case (Func_native x11 x12 x13 x14)"], ["proof (state)\nthis:\n  cl = Func_native x11 x12 x13 x14\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12 x13 x14.\n       cl = Func_native x11 x12 x13 x14 \\<Longrightarrow>\n       (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n 2. \\<And>x21 x22.\n       cl = Func_host x21 x22 \\<Longrightarrow>\n       (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  cl = Func_native x11 x12 x13 x14\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms cl_type_is split_n_is"], ["proof (prove)\nusing this:\n  cl = Func_native x11 x12 x13 x14\n  run_one_step d i (s, vs, ves, Callcl cl) = (s', vs', res)\n  cl_type cl = t1s _> t2s\n  split_n ves (length t1s) = (ves', ves'')\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "unfolding cl_type_def"], ["proof (prove)\nusing this:\n  cl = Func_native x11 x12 x13 x14\n  run_one_step d i (s, vs, ves, Callcl cl) = (s', vs', res)\n  (case cl of Func_native x tf xa xb \\<Rightarrow> tf\n   | Func_host tf x \\<Rightarrow> tf) =\n  t1s _> t2s\n  split_n ves (length t1s) = (ves', ves'')\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases \"length t1s \\<le> length ves\") auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       cl = Func_host x21 x22 \\<Longrightarrow>\n       (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       cl = Func_host x21 x22 \\<Longrightarrow>\n       (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "case (Func_host x21 x22)"], ["proof (state)\nthis:\n  cl = Func_host x21 x22\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       cl = Func_host x21 x22 \\<Longrightarrow>\n       (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases \"host_apply_impl s (t1s _> t2s) x22 (rev ves')\")"], ["proof (state)\ngoal (2 subgoals):\n 1. host_apply_impl s (t1s _> t2s) x22 (rev ves') = None \\<Longrightarrow>\n    (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n 2. \\<And>a.\n       host_apply_impl s (t1s _> t2s) x22 (rev ves') =\n       Some a \\<Longrightarrow>\n       (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "case None"], ["proof (state)\nthis:\n  host_apply_impl s (t1s _> t2s) x22 (rev ves') = None\n\ngoal (2 subgoals):\n 1. host_apply_impl s (t1s _> t2s) x22 (rev ves') = None \\<Longrightarrow>\n    (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n 2. \\<And>a.\n       host_apply_impl s (t1s _> t2s) x22 (rev ves') =\n       Some a \\<Longrightarrow>\n       (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  host_apply_impl s (t1s _> t2s) x22 (rev ves') = None\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms cl_type_is split_n_is Func_host"], ["proof (prove)\nusing this:\n  host_apply_impl s (t1s _> t2s) x22 (rev ves') = None\n  run_one_step d i (s, vs, ves, Callcl cl) = (s', vs', res)\n  cl_type cl = t1s _> t2s\n  split_n ves (length t1s) = (ves', ves'')\n  cl = Func_host x21 x22\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "unfolding cl_type_def"], ["proof (prove)\nusing this:\n  host_apply_impl s (t1s _> t2s) x22 (rev ves') = None\n  run_one_step d i (s, vs, ves, Callcl cl) = (s', vs', res)\n  (case cl of Func_native x tf xa xb \\<Rightarrow> tf\n   | Func_host tf x \\<Rightarrow> tf) =\n  t1s _> t2s\n  split_n ves (length t1s) = (ves', ves'')\n  cl = Func_host x21 x22\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases \"length t1s \\<le> length ves\")  auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       host_apply_impl s (t1s _> t2s) x22 (rev ves') =\n       Some a \\<Longrightarrow>\n       (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       host_apply_impl s (t1s _> t2s) x22 (rev ves') =\n       Some a \\<Longrightarrow>\n       (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "case (Some a)"], ["proof (state)\nthis:\n  host_apply_impl s (t1s _> t2s) x22 (rev ves') = Some a\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       host_apply_impl s (t1s _> t2s) x22 (rev ves') =\n       Some a \\<Longrightarrow>\n       (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  host_apply_impl s (t1s _> t2s) x22 (rev ves') = Some a\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases a)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>host_apply_impl s (t1s _> t2s) x22 (rev ves') = Some a;\n        a = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (Pair s' vcs')"], ["proof (state)\nthis:\n  a = (s', vcs')\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>host_apply_impl s (t1s _> t2s) x22 (rev ves') = Some a;\n        a = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = (s', vcs')\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms cl_type_is split_n_is Func_host Some"], ["proof (prove)\nusing this:\n  a = (s', vcs')\n  run_one_step d i (s, vs, ves, Callcl cl) = (s', vs', res)\n  cl_type cl = t1s _> t2s\n  split_n ves (length t1s) = (ves', ves'')\n  cl = Func_host x21 x22\n  host_apply_impl s (t1s _> t2s) x22 (rev ves') = Some a\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "unfolding cl_type_def"], ["proof (prove)\nusing this:\n  a = (s', vcs')\n  run_one_step d i (s, vs, ves, Callcl cl) = (s', vs', res)\n  (case cl of Func_native x tf xa xb \\<Rightarrow> tf\n   | Func_host tf x \\<Rightarrow> tf) =\n  t1s _> t2s\n  split_n ves (length t1s) = (ves', ves'')\n  cl = Func_host x21 x22\n  host_apply_impl s (t1s _> t2s) x22 (rev ves') = Some a\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases \"length t1s \\<le> length ves\"; cases \"list_all2 types_agree t2s vcs'\")  auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma run_one_step_label_result:\n  assumes \"run_one_step d i (s,vs,ves,Label x41 x42 x43) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>r rvs. res = RSBreak r rvs) \\<or> (\\<exists>rvs. res = RSReturn rvs) \\<or> (\\<exists>e. res = RSCrash e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or>\n    (\\<exists>r rvs. res = RSBreak r rvs) \\<or>\n    (\\<exists>rvs. res = RSReturn rvs) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, Label x41 x42 x43) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or>\n    (\\<exists>r rvs. res = RSBreak r rvs) \\<or>\n    (\\<exists>rvs. res = RSReturn rvs) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases res) auto"], ["", "lemma run_one_step_local_result:\n  assumes \"run_one_step d i (s,vs,ves,Local x51 x52 x53 x54) = (s', vs', res)\"\n  shows \"(\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases \"x54 = [Trap]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) =\n             (s', vs', res);\n     x54 = [Trap]\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<lbrakk>run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) =\n             (s', vs', res);\n     x54 \\<noteq> [Trap]\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "case False"], ["proof (state)\nthis:\n  x54 \\<noteq> [Trap]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) =\n             (s', vs', res);\n     x54 = [Trap]\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<lbrakk>run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) =\n             (s', vs', res);\n     x54 \\<noteq> [Trap]\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "note outer_False = False"], ["proof (state)\nthis:\n  x54 \\<noteq> [Trap]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) =\n             (s', vs', res);\n     x54 = [Trap]\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<lbrakk>run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) =\n             (s', vs', res);\n     x54 \\<noteq> [Trap]\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x54 \\<noteq> [Trap]\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases \"const_list x54\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x54 \\<noteq> [Trap]; const_list x54\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<lbrakk>x54 \\<noteq> [Trap]; \\<not> const_list x54\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "case True"], ["proof (state)\nthis:\n  const_list x54\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x54 \\<noteq> [Trap]; const_list x54\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<lbrakk>x54 \\<noteq> [Trap]; \\<not> const_list x54\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  const_list x54\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms outer_False"], ["proof (prove)\nusing this:\n  const_list x54\n  run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) = (s', vs', res)\n  x54 \\<noteq> [Trap]\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases \"length x54 = x51\") auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x54 \\<noteq> [Trap]; \\<not> const_list x54\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x54 \\<noteq> [Trap]; \\<not> const_list x54\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "case False"], ["proof (state)\nthis:\n  \\<not> const_list x54\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x54 \\<noteq> [Trap]; \\<not> const_list x54\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> const_list x54\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms outer_False"], ["proof (prove)\nusing this:\n  \\<not> const_list x54\n  run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) = (s', vs', res)\n  x54 \\<noteq> [Trap]\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases d)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> const_list x54;\n     run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) = (s', vs', res);\n     x54 \\<noteq> [Trap]; d = 0\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>nat.\n       \\<lbrakk>\\<not> const_list x54;\n        run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) =\n        (s', vs', res);\n        x54 \\<noteq> [Trap]; d = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (Suc d')"], ["proof (state)\nthis:\n  d = Suc d'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> const_list x54;\n     run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) = (s', vs', res);\n     x54 \\<noteq> [Trap]; d = 0\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>nat.\n       \\<lbrakk>\\<not> const_list x54;\n        run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) =\n        (s', vs', res);\n        x54 \\<noteq> [Trap]; d = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "obtain s' vs' res where rs_def:\"run_step d' x52 (s, x53, x54) = (s', vs', res)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s' vs' res.\n        run_step d' x52 (s, x53, x54) = (s', vs', res) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  run_step d' x52 (s, x53, x54) = (s', vs', res)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> const_list x54;\n     run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) = (s', vs', res);\n     x54 \\<noteq> [Trap]; d = 0\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)\n 2. \\<And>nat.\n       \\<lbrakk>\\<not> const_list x54;\n        run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) =\n        (s', vs', res);\n        x54 \\<noteq> [Trap]; d = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  run_step d' x52 (s, x53, x54) = (s', vs', res)\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms outer_False False Suc"], ["proof (prove)\nusing this:\n  run_step d' x52 (s, x53, x54) = (s', vs', res)\n  run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) = (s', vs', res)\n  x54 \\<noteq> [Trap]\n  \\<not> const_list x54\n  d = Suc d'\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "proof (cases res)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>run_step d' x52 (s, x53, x54) = (s', vs', res);\n        run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) =\n        (s', vs', res);\n        x54 \\<noteq> [Trap]; \\<not> const_list x54; d = Suc d';\n        res = RSCrash x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x21 x22.\n       \\<lbrakk>run_step d' x52 (s, x53, x54) = (s', vs', res);\n        run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) =\n        (s', vs', res);\n        x54 \\<noteq> [Trap]; \\<not> const_list x54; d = Suc d';\n        res = RSBreak x21 x22\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x3.\n       \\<lbrakk>run_step d' x52 (s, x53, x54) = (s', vs', res);\n        run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) =\n        (s', vs', res);\n        x54 \\<noteq> [Trap]; \\<not> const_list x54; d = Suc d';\n        res = RSReturn x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x4.\n       \\<lbrakk>run_step d' x52 (s, x53, x54) = (s', vs', res);\n        run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) =\n        (s', vs', res);\n        x54 \\<noteq> [Trap]; \\<not> const_list x54; d = Suc d';\n        res = RSNormal x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "case (RSReturn x3)"], ["proof (state)\nthis:\n  res = RSReturn x3\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>run_step d' x52 (s, x53, x54) = (s', vs', res);\n        run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) =\n        (s', vs', res);\n        x54 \\<noteq> [Trap]; \\<not> const_list x54; d = Suc d';\n        res = RSCrash x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x21 x22.\n       \\<lbrakk>run_step d' x52 (s, x53, x54) = (s', vs', res);\n        run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) =\n        (s', vs', res);\n        x54 \\<noteq> [Trap]; \\<not> const_list x54; d = Suc d';\n        res = RSBreak x21 x22\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x3.\n       \\<lbrakk>run_step d' x52 (s, x53, x54) = (s', vs', res);\n        run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) =\n        (s', vs', res);\n        x54 \\<noteq> [Trap]; \\<not> const_list x54; d = Suc d';\n        res = RSReturn x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 4. \\<And>x4.\n       \\<lbrakk>run_step d' x52 (s, x53, x54) = (s', vs', res);\n        run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) =\n        (s', vs', res);\n        x54 \\<noteq> [Trap]; \\<not> const_list x54; d = Suc d';\n        res = RSNormal x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  res = RSReturn x3\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "using assms outer_False False rs_def Suc"], ["proof (prove)\nusing this:\n  res = RSReturn x3\n  run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) = (s', vs', res)\n  x54 \\<noteq> [Trap]\n  \\<not> const_list x54\n  run_step d' x52 (s, x53, x54) = (s', vs', res)\n  d = Suc d'\n\ngoal (1 subgoal):\n 1. (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)", "by (cases \"x51 \\<le> length x3\") auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (3 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>run_step d' x52 (s, x53, x54) = (s', vs', res);\n        run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) =\n        (s', vs', res);\n        x54 \\<noteq> [Trap]; \\<not> const_list x54; d = Suc d';\n        res = RSCrash x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 2. \\<And>x21 x22.\n       \\<lbrakk>run_step d' x52 (s, x53, x54) = (s', vs', res);\n        run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) =\n        (s', vs', res);\n        x54 \\<noteq> [Trap]; \\<not> const_list x54; d = Suc d';\n        res = RSBreak x21 x22\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)\n 3. \\<And>x4.\n       \\<lbrakk>run_step d' x52 (s, x53, x54) = (s', vs', res);\n        run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) =\n        (s', vs', res);\n        x54 \\<noteq> [Trap]; \\<not> const_list x54; d = Suc d';\n        res = RSNormal x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                         (\\<exists>e. res = RSCrash e)", "qed auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> const_list x54;\n     run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) = (s', vs', res);\n     x54 \\<noteq> [Trap]; d = 0\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "qed auto"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>r. res = RSNormal r) \\<or> (\\<exists>e. res = RSCrash e)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, Local x51 x52 x53 x54) =\n             (s', vs', res);\n     x54 = [Trap]\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>r. res = RSNormal r) \\<or>\n                      (\\<exists>e. res = RSCrash e)", "qed auto"], ["", "lemma run_one_step_break:\n  assumes \"run_one_step d i (s,vs,ves,e) = (s', vs', RSBreak n res)\"\n  shows \"(e = $Br n) \\<or> (\\<exists>n les es. e = Label n les es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "proof (cases e)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x1.\n       e = $x1 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n 2. e = Trap \\<Longrightarrow>\n    e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "case (Basic x1)"], ["proof (state)\nthis:\n  e = $x1\n\ngoal (5 subgoals):\n 1. \\<And>x1.\n       e = $x1 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n 2. e = Trap \\<Longrightarrow>\n    e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "proof (cases x1)"], ["proof (state)\ngoal (31 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Unreachable\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Nop\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<lbrakk>e = $x1; x1 = Drop\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 4. \\<lbrakk>e = $x1; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x101 x102.\n        \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 31 subgoals...", "case Unreachable"], ["proof (state)\nthis:\n  x1 = Unreachable\n\ngoal (31 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Unreachable\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Nop\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<lbrakk>e = $x1; x1 = Drop\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 4. \\<lbrakk>e = $x1; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x101 x102.\n        \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 31 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Unreachable\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_unreachable_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Unreachable\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Unreachable) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  \\<exists>r. ?res = RSNormal r\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (30 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Nop\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Drop\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<lbrakk>e = $x1; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n     \\<Longrightarrow> e = $Br n \\<or>\n                       (\\<exists>n les es. e = Label n les es)\nA total of 30 subgoals...", "next"], ["proof (state)\ngoal (30 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Nop\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Drop\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<lbrakk>e = $x1; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n     \\<Longrightarrow> e = $Br n \\<or>\n                       (\\<exists>n les es. e = Label n les es)\nA total of 30 subgoals...", "case Nop"], ["proof (state)\nthis:\n  x1 = Nop\n\ngoal (30 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Nop\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Drop\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<lbrakk>e = $x1; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n     \\<Longrightarrow> e = $Br n \\<or>\n                       (\\<exists>n les es. e = Label n les es)\nA total of 30 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Nop\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using assms Basic"], ["proof (prove)\nusing this:\n  x1 = Nop\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (29 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Drop\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x12.\n        \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 29 subgoals...", "next"], ["proof (state)\ngoal (29 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Drop\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x12.\n        \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 29 subgoals...", "case Drop"], ["proof (state)\nthis:\n  x1 = Drop\n\ngoal (29 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Drop\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x12.\n        \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 29 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Drop\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_drop_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Drop\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Drop) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (28 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x13.\n        \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 28 subgoals...", "next"], ["proof (state)\ngoal (28 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x13.\n        \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 28 subgoals...", "case Select"], ["proof (state)\nthis:\n  x1 = Select\n\ngoal (28 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x13.\n        \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 28 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Select\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_select_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Select\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Select) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (27 subgoals):\n 1. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x14.\n        \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 27 subgoals...", "next"], ["proof (state)\ngoal (27 subgoals):\n 1. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x14.\n        \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 27 subgoals...", "case (Block x51 x52)"], ["proof (state)\nthis:\n  x1 = Block x51 x52\n\ngoal (27 subgoals):\n 1. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x14.\n        \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 27 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Block x51 x52\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_block_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Block x51 x52\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Block ?x51.0 ?x52.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (26 subgoals):\n 1. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x15.\n        \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 26 subgoals...", "next"], ["proof (state)\ngoal (26 subgoals):\n 1. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x15.\n        \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 26 subgoals...", "case (Loop x61 x62)"], ["proof (state)\nthis:\n  x1 = Loop x61 x62\n\ngoal (26 subgoals):\n 1. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x15.\n        \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 26 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Loop x61 x62\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_loop_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Loop x61 x62\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Loop ?x61.0 ?x62.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (25 subgoals):\n 1. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x16.\n        \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 25 subgoals...", "next"], ["proof (state)\ngoal (25 subgoals):\n 1. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x16.\n        \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 25 subgoals...", "case (If x71 x72 x73)"], ["proof (state)\nthis:\n  x1 = b_e.If x71 x72 x73\n\ngoal (25 subgoals):\n 1. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x16.\n        \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 25 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = b_e.If x71 x72 x73\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_if_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = b_e.If x71 x72 x73\n  run_one_step ?d ?i (?s, ?vs, ?ves, $b_e.If ?x71.0 ?x72.0 ?x73.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (24 subgoals):\n 1. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x17.\n        \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 24 subgoals...", "next"], ["proof (state)\ngoal (24 subgoals):\n 1. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x17.\n        \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 24 subgoals...", "case (Br x8)"], ["proof (state)\nthis:\n  x1 = Br x8\n\ngoal (24 subgoals):\n 1. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x17.\n        \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 24 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Br x8\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_br_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Br x8\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Br ?x8.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  \\<exists>r vrs. ?res = RSBreak r vrs\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (23 subgoals):\n 1. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x18.\n        \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 23 subgoals...", "next"], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x18.\n        \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 23 subgoals...", "case (Br_if x9)"], ["proof (state)\nthis:\n  x1 = Br_if x9\n\ngoal (23 subgoals):\n 1. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x18.\n        \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 23 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Br_if x9\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_br_if_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Br_if x9\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Br_if ?x9.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (22 subgoals):\n 1. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x191 x192 x193 x194.\n        \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 22 subgoals...", "next"], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x191 x192 x193 x194.\n        \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 22 subgoals...", "case (Br_table x10)"], ["proof (state)\nthis:\n  x1 = Br_table x10 x102_\n\ngoal (22 subgoals):\n 1. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x191 x192 x193 x194.\n        \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 22 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Br_table x10 x102_\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_br_table_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Br_table x10 x102_\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Br_table ?js ?j) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (21 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x201 x202 x203 x204.\n        \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 21 subgoals...", "next"], ["proof (state)\ngoal (21 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x201 x202 x203 x204.\n        \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 21 subgoals...", "case Return"], ["proof (state)\nthis:\n  x1 = Return\n\ngoal (21 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x201 x202 x203 x204.\n        \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 21 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Return\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_return_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Return\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Return) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  \\<exists>vrs. ?res = RSReturn vrs\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (20 subgoals):\n 1. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n     \\<Longrightarrow> e = $Br n \\<or>\n                       (\\<exists>n les es. e = Label n les es)\nA total of 20 subgoals...", "next"], ["proof (state)\ngoal (20 subgoals):\n 1. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n     \\<Longrightarrow> e = $Br n \\<or>\n                       (\\<exists>n les es. e = Label n les es)\nA total of 20 subgoals...", "case (Call x12)"], ["proof (state)\nthis:\n  x1 = Call x12\n\ngoal (20 subgoals):\n 1. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n     \\<Longrightarrow> e = $Br n \\<or>\n                       (\\<exists>n les es. e = Label n les es)\nA total of 20 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Call x12\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_call_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Call x12\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Call ?x12.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  \\<exists>r. ?res = RSNormal r\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (19 subgoals):\n 1. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 10. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n     \\<Longrightarrow> e = $Br n \\<or>\n                       (\\<exists>n les es. e = Label n les es)\nA total of 19 subgoals...", "next"], ["proof (state)\ngoal (19 subgoals):\n 1. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 10. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n     \\<Longrightarrow> e = $Br n \\<or>\n                       (\\<exists>n les es. e = Label n les es)\nA total of 19 subgoals...", "case (Call_indirect x13)"], ["proof (state)\nthis:\n  x1 = Call_indirect x13\n\ngoal (19 subgoals):\n 1. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 10. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n     \\<Longrightarrow> e = $Br n \\<or>\n                       (\\<exists>n les es. e = Label n les es)\nA total of 19 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Call_indirect x13\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_call_indirect_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Call_indirect x13\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Call_indirect ?x13.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (18 subgoals):\n 1. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 9. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x23.\n        \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 18 subgoals...", "next"], ["proof (state)\ngoal (18 subgoals):\n 1. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 9. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x23.\n        \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 18 subgoals...", "case (Get_local x14)"], ["proof (state)\nthis:\n  x1 = Get_local x14\n\ngoal (18 subgoals):\n 1. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 9. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x23.\n        \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 18 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Get_local x14\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_get_local_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Get_local x14\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Get_local ?x14.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (17 subgoals):\n 1. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 8. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x241 x242.\n        \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 17 subgoals...", "next"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 8. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x241 x242.\n        \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 17 subgoals...", "case (Set_local x15)"], ["proof (state)\nthis:\n  x1 = Set_local x15\n\ngoal (17 subgoals):\n 1. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 8. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x241 x242.\n        \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 17 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Set_local x15\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_set_local_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Set_local x15\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Set_local ?x15.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (16 subgoals):\n 1. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 7. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x251 x252.\n        \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 7. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x251 x252.\n        \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 16 subgoals...", "case (Tee_local x16)"], ["proof (state)\nthis:\n  x1 = Tee_local x16\n\ngoal (16 subgoals):\n 1. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 7. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x251 x252.\n        \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 16 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Tee_local x16\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_tee_local_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Tee_local x16\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Tee_local ?x16.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (15 subgoals):\n 1. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 6. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x261 x262.\n        \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 6. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x261 x262.\n        \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 15 subgoals...", "case (Get_global x17)"], ["proof (state)\nthis:\n  x1 = Get_global x17\n\ngoal (15 subgoals):\n 1. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 6. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x261 x262.\n        \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 15 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Get_global x17\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using assms Basic"], ["proof (prove)\nusing this:\n  x1 = Get_global x17\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (14 subgoals):\n 1. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 5. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x271 x272.\n        \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 5. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x271 x272.\n        \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 14 subgoals...", "case (Set_global x18)"], ["proof (state)\nthis:\n  x1 = Set_global x18\n\ngoal (14 subgoals):\n 1. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 5. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x271 x272.\n        \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 14 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Set_global x18\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_set_global_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Set_global x18\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Set_global ?x18.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (13 subgoals):\n 1. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 4. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x281 x282.\n        \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 4. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x281 x282.\n        \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 13 subgoals...", "case (Load x191 x192 x193 x194)"], ["proof (state)\nthis:\n  x1 = Load x191 x192 x193 x194\n\ngoal (13 subgoals):\n 1. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 4. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x281 x282.\n        \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 13 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Load x191 x192 x193 x194\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_load_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Load x191 x192 x193 x194\n  run_one_step ?d ?i\n   (?s, ?vs, ?ves, $Load ?x191.0 ?x192.0 ?x193.0 ?x194.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (12 subgoals):\n 1. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x291 x292.\n        \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x291 x292.\n        \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 12 subgoals...", "case (Store x201 x202 x203 x204)"], ["proof (state)\nthis:\n  x1 = Store x201 x202 x203 x204\n\ngoal (12 subgoals):\n 1. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x291 x292.\n        \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 12 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Store x201 x202 x203 x204\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_store_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Store x201 x202 x203 x204\n  run_one_step ?d ?i\n   (?s, ?vs, ?ves, $Store ?x201.0 ?x202.0 ?x203.0 ?x204.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (11 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x301 x302.\n        \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x301 x302.\n        \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 11 subgoals...", "case Current_memory"], ["proof (state)\nthis:\n  x1 = Current_memory\n\ngoal (11 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x301 x302.\n        \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 11 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Current_memory\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_current_memory_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Current_memory\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Current_memory) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (10 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x311 x312 x313 x314.\n        \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x311 x312 x313 x314.\n        \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)", "case Grow_memory"], ["proof (state)\nthis:\n  x1 = Grow_memory\n\ngoal (10 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Br n \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x311 x312 x313 x314.\n        \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n        \\<Longrightarrow> e = $Br n \\<or>\n                          (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Grow_memory\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_grow_memory_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Grow_memory\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Grow_memory) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (9 subgoals):\n 1. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "case (EConst x23)"], ["proof (state)\nthis:\n  x1 = C x23\n\ngoal (9 subgoals):\n 1. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = C x23\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using assms Basic"], ["proof (prove)\nusing this:\n  x1 = C x23\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (8 subgoals):\n 1. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "case (Unop_i x241 x242)"], ["proof (state)\nthis:\n  x1 = Unop_i x241 x242\n\ngoal (8 subgoals):\n 1. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Unop_i x241 x242\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_unop_i_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Unop_i x241 x242\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Unop_i ?x241.0 ?x242.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (7 subgoals):\n 1. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "case (Unop_f x251 x252)"], ["proof (state)\nthis:\n  x1 = Unop_f x251 x252\n\ngoal (7 subgoals):\n 1. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Unop_f x251 x252\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_unop_f_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Unop_f x251 x252\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Unop_f ?x251.0 ?x252.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (6 subgoals):\n 1. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "case (Binop_i x261 x262)"], ["proof (state)\nthis:\n  x1 = Binop_i x261 x262\n\ngoal (6 subgoals):\n 1. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Binop_i x261 x262\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_binop_i_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Binop_i x261 x262\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Binop_i ?x261.0 ?x262.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (5 subgoals):\n 1. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "case (Binop_f x271 x272)"], ["proof (state)\nthis:\n  x1 = Binop_f x271 x272\n\ngoal (5 subgoals):\n 1. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Binop_f x271 x272\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_binop_f_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Binop_f x271 x272\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Binop_f ?x271.0 ?x272.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (4 subgoals):\n 1. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "case (Testop x281 x282)"], ["proof (state)\nthis:\n  x1 = Testop x281 x282\n\ngoal (4 subgoals):\n 1. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Testop x281 x282\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_testop_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Testop x281 x282\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Testop ?x281.0 ?x282.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (3 subgoals):\n 1. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "case (Relop_i x291 x292)"], ["proof (state)\nthis:\n  x1 = Relop_i x291 x292\n\ngoal (3 subgoals):\n 1. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Relop_i x291 x292\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_relop_i_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Relop_i x291 x292\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Relop_i ?x291.0 ?x292.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (2 subgoals):\n 1. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "case (Relop_f x301 x302)"], ["proof (state)\nthis:\n  x1 = Relop_f x301 x302\n\ngoal (2 subgoals):\n 1. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Relop_f x301 x302\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_relop_f_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Relop_f x301 x302\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Relop_f ?x301.0 ?x302.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (1 subgoal):\n 1. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "case (Cvtop x311 x312 x313 x314)"], ["proof (state)\nthis:\n  x1 = Cvtop x311 x312 x313 x314\n\ngoal (1 subgoal):\n 1. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Br n \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Cvtop x311 x312 x313 x314\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_cvtop_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Cvtop x311 x312 x313 x314\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Cvtop ?t2.0 ?x312.0 ?t1.0 ?sx) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (4 subgoals):\n 1. e = Trap \\<Longrightarrow>\n    e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. e = Trap \\<Longrightarrow>\n    e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "case Trap"], ["proof (state)\nthis:\n  e = Trap\n\ngoal (4 subgoals):\n 1. e = Trap \\<Longrightarrow>\n    e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  e = Trap\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using assms"], ["proof (prove)\nusing this:\n  e = Trap\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by auto"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (3 subgoals):\n 1. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "case (Callcl x3)"], ["proof (state)\nthis:\n  e = Callcl x3\n\ngoal (3 subgoals):\n 1. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  e = Callcl x3\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using assms run_one_step_callcl_result"], ["proof (prove)\nusing this:\n  e = Callcl x3\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  run_one_step ?d ?i (?s, ?vs, ?ves, Callcl ?cl) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (2 subgoals):\n 1. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "case (Label x41 x42 x43)"], ["proof (state)\nthis:\n  e = Label x41 x42 x43\n\ngoal (2 subgoals):\n 1. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  e = Label x41 x42 x43\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by auto"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (1 subgoal):\n 1. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "case (Local x51 x52 x53 x54)"], ["proof (state)\nthis:\n  e = Local x51 x52 x53 x54\n\ngoal (1 subgoal):\n 1. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  e = Local x51 x52 x53 x54\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "using assms run_one_step_local_result"], ["proof (prove)\nusing this:\n  e = Local x51 x52 x53 x54\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n  run_one_step ?d ?i (?s, ?vs, ?ves, Local ?x51.0 ?x52.0 ?x53.0 ?x54.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n\ngoal (1 subgoal):\n 1. e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma run_one_step_return:\n  assumes \"run_one_step d i (s,vs,ves,e) = (s', vs', RSReturn res)\"\n  shows \"(e = $Return) \\<or> (\\<exists>n les es. e = Label n les es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "proof (cases e)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x1.\n       e = $x1 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n 2. e = Trap \\<Longrightarrow>\n    e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "case (Basic x1)"], ["proof (state)\nthis:\n  e = $x1\n\ngoal (5 subgoals):\n 1. \\<And>x1.\n       e = $x1 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n 2. e = Trap \\<Longrightarrow>\n    e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "proof (cases x1)"], ["proof (state)\ngoal (31 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Unreachable\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Nop\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<lbrakk>e = $x1; x1 = Drop\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 4. \\<lbrakk>e = $x1; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x101 x102.\n        \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 31 subgoals...", "case Unreachable"], ["proof (state)\nthis:\n  x1 = Unreachable\n\ngoal (31 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Unreachable\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Nop\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<lbrakk>e = $x1; x1 = Drop\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 4. \\<lbrakk>e = $x1; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x101 x102.\n        \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 31 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Unreachable\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_unreachable_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Unreachable\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Unreachable) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  \\<exists>r. ?res = RSNormal r\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (30 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Nop\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Drop\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<lbrakk>e = $x1; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n     \\<Longrightarrow> e = $Return \\<or>\n                       (\\<exists>n les es. e = Label n les es)\nA total of 30 subgoals...", "next"], ["proof (state)\ngoal (30 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Nop\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Drop\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<lbrakk>e = $x1; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n     \\<Longrightarrow> e = $Return \\<or>\n                       (\\<exists>n les es. e = Label n les es)\nA total of 30 subgoals...", "case Nop"], ["proof (state)\nthis:\n  x1 = Nop\n\ngoal (30 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Nop\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Drop\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<lbrakk>e = $x1; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n     \\<Longrightarrow> e = $Return \\<or>\n                       (\\<exists>n les es. e = Label n les es)\nA total of 30 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Nop\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using assms Basic"], ["proof (prove)\nusing this:\n  x1 = Nop\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (29 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Drop\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x12.\n        \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 29 subgoals...", "next"], ["proof (state)\ngoal (29 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Drop\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x12.\n        \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 29 subgoals...", "case Drop"], ["proof (state)\nthis:\n  x1 = Drop\n\ngoal (29 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Drop\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x12.\n        \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 29 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Drop\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_drop_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Drop\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Drop) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (28 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x13.\n        \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 28 subgoals...", "next"], ["proof (state)\ngoal (28 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x13.\n        \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 28 subgoals...", "case Select"], ["proof (state)\nthis:\n  x1 = Select\n\ngoal (28 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x13.\n        \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 28 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Select\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_select_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Select\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Select) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (27 subgoals):\n 1. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x14.\n        \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 27 subgoals...", "next"], ["proof (state)\ngoal (27 subgoals):\n 1. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x14.\n        \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 27 subgoals...", "case (Block x51 x52)"], ["proof (state)\nthis:\n  x1 = Block x51 x52\n\ngoal (27 subgoals):\n 1. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x14.\n        \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 27 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Block x51 x52\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_block_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Block x51 x52\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Block ?x51.0 ?x52.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (26 subgoals):\n 1. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x15.\n        \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 26 subgoals...", "next"], ["proof (state)\ngoal (26 subgoals):\n 1. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x15.\n        \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 26 subgoals...", "case (Loop x61 x62)"], ["proof (state)\nthis:\n  x1 = Loop x61 x62\n\ngoal (26 subgoals):\n 1. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x15.\n        \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 26 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Loop x61 x62\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_loop_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Loop x61 x62\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Loop ?x61.0 ?x62.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (25 subgoals):\n 1. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x16.\n        \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 25 subgoals...", "next"], ["proof (state)\ngoal (25 subgoals):\n 1. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x16.\n        \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 25 subgoals...", "case (If x71 x72 x73)"], ["proof (state)\nthis:\n  x1 = b_e.If x71 x72 x73\n\ngoal (25 subgoals):\n 1. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x16.\n        \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 25 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = b_e.If x71 x72 x73\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_if_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = b_e.If x71 x72 x73\n  run_one_step ?d ?i (?s, ?vs, ?ves, $b_e.If ?x71.0 ?x72.0 ?x73.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (24 subgoals):\n 1. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x17.\n        \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 24 subgoals...", "next"], ["proof (state)\ngoal (24 subgoals):\n 1. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x17.\n        \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 24 subgoals...", "case (Br x8)"], ["proof (state)\nthis:\n  x1 = Br x8\n\ngoal (24 subgoals):\n 1. \\<And>x8.\n       \\<lbrakk>e = $x1; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x17.\n        \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 24 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Br x8\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_br_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Br x8\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Br ?x8.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  \\<exists>r vrs. ?res = RSBreak r vrs\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (23 subgoals):\n 1. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x18.\n        \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 23 subgoals...", "next"], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x18.\n        \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 23 subgoals...", "case (Br_if x9)"], ["proof (state)\nthis:\n  x1 = Br_if x9\n\ngoal (23 subgoals):\n 1. \\<And>x9.\n       \\<lbrakk>e = $x1; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x18.\n        \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 23 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Br_if x9\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_br_if_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Br_if x9\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Br_if ?x9.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (22 subgoals):\n 1. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x191 x192 x193 x194.\n        \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 22 subgoals...", "next"], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x191 x192 x193 x194.\n        \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 22 subgoals...", "case (Br_table x10)"], ["proof (state)\nthis:\n  x1 = Br_table x10 x102_\n\ngoal (22 subgoals):\n 1. \\<And>x101 x102.\n       \\<lbrakk>e = $x1; x1 = Br_table x101 x102\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x191 x192 x193 x194.\n        \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 22 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Br_table x10 x102_\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_br_table_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Br_table x10 x102_\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Br_table ?js ?j) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (21 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x201 x202 x203 x204.\n        \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 21 subgoals...", "next"], ["proof (state)\ngoal (21 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x201 x202 x203 x204.\n        \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 21 subgoals...", "case Return"], ["proof (state)\nthis:\n  x1 = Return\n\ngoal (21 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Return\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x201 x202 x203 x204.\n        \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 21 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Return\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_return_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Return\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Return) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  \\<exists>vrs. ?res = RSReturn vrs\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (20 subgoals):\n 1. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n     \\<Longrightarrow> e = $Return \\<or>\n                       (\\<exists>n les es. e = Label n les es)\nA total of 20 subgoals...", "next"], ["proof (state)\ngoal (20 subgoals):\n 1. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n     \\<Longrightarrow> e = $Return \\<or>\n                       (\\<exists>n les es. e = Label n les es)\nA total of 20 subgoals...", "case (Call x12)"], ["proof (state)\nthis:\n  x1 = Call x12\n\ngoal (20 subgoals):\n 1. \\<And>x12.\n       \\<lbrakk>e = $x1; x1 = Call x12\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n     \\<Longrightarrow> e = $Return \\<or>\n                       (\\<exists>n les es. e = Label n les es)\nA total of 20 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Call x12\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_call_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Call x12\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Call ?x12.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  \\<exists>r. ?res = RSNormal r\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (19 subgoals):\n 1. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 10. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n     \\<Longrightarrow> e = $Return \\<or>\n                       (\\<exists>n les es. e = Label n les es)\nA total of 19 subgoals...", "next"], ["proof (state)\ngoal (19 subgoals):\n 1. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 10. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n     \\<Longrightarrow> e = $Return \\<or>\n                       (\\<exists>n les es. e = Label n les es)\nA total of 19 subgoals...", "case (Call_indirect x13)"], ["proof (state)\nthis:\n  x1 = Call_indirect x13\n\ngoal (19 subgoals):\n 1. \\<And>x13.\n       \\<lbrakk>e = $x1; x1 = Call_indirect x13\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 10. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n     \\<Longrightarrow> e = $Return \\<or>\n                       (\\<exists>n les es. e = Label n les es)\nA total of 19 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Call_indirect x13\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_call_indirect_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Call_indirect x13\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Call_indirect ?x13.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (18 subgoals):\n 1. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 9. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x23.\n        \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 18 subgoals...", "next"], ["proof (state)\ngoal (18 subgoals):\n 1. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 9. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x23.\n        \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 18 subgoals...", "case (Get_local x14)"], ["proof (state)\nthis:\n  x1 = Get_local x14\n\ngoal (18 subgoals):\n 1. \\<And>x14.\n       \\<lbrakk>e = $x1; x1 = Get_local x14\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 9. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x23.\n        \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 18 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Get_local x14\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_get_local_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Get_local x14\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Get_local ?x14.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (17 subgoals):\n 1. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 8. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x241 x242.\n        \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 17 subgoals...", "next"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 8. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x241 x242.\n        \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 17 subgoals...", "case (Set_local x15)"], ["proof (state)\nthis:\n  x1 = Set_local x15\n\ngoal (17 subgoals):\n 1. \\<And>x15.\n       \\<lbrakk>e = $x1; x1 = Set_local x15\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 8. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x241 x242.\n        \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 17 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Set_local x15\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_set_local_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Set_local x15\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Set_local ?x15.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (16 subgoals):\n 1. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 7. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x251 x252.\n        \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 7. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x251 x252.\n        \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 16 subgoals...", "case (Tee_local x16)"], ["proof (state)\nthis:\n  x1 = Tee_local x16\n\ngoal (16 subgoals):\n 1. \\<And>x16.\n       \\<lbrakk>e = $x1; x1 = Tee_local x16\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 7. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x251 x252.\n        \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 16 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Tee_local x16\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_tee_local_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Tee_local x16\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Tee_local ?x16.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (15 subgoals):\n 1. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 6. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x261 x262.\n        \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 6. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x261 x262.\n        \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 15 subgoals...", "case (Get_global x17)"], ["proof (state)\nthis:\n  x1 = Get_global x17\n\ngoal (15 subgoals):\n 1. \\<And>x17.\n       \\<lbrakk>e = $x1; x1 = Get_global x17\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 6. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x261 x262.\n        \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 15 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Get_global x17\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using assms Basic"], ["proof (prove)\nusing this:\n  x1 = Get_global x17\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (14 subgoals):\n 1. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 5. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x271 x272.\n        \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 5. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x271 x272.\n        \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 14 subgoals...", "case (Set_global x18)"], ["proof (state)\nthis:\n  x1 = Set_global x18\n\ngoal (14 subgoals):\n 1. \\<And>x18.\n       \\<lbrakk>e = $x1; x1 = Set_global x18\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 5. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x271 x272.\n        \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 14 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Set_global x18\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_set_global_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Set_global x18\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Set_global ?x18.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (13 subgoals):\n 1. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 4. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x281 x282.\n        \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 4. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x281 x282.\n        \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 13 subgoals...", "case (Load x191 x192 x193 x194)"], ["proof (state)\nthis:\n  x1 = Load x191 x192 x193 x194\n\ngoal (13 subgoals):\n 1. \\<And>x191 x192 x193 x194.\n       \\<lbrakk>e = $x1; x1 = Load x191 x192 x193 x194\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 4. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x281 x282.\n        \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 13 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Load x191 x192 x193 x194\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_load_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Load x191 x192 x193 x194\n  run_one_step ?d ?i\n   (?s, ?vs, ?ves, $Load ?x191.0 ?x192.0 ?x193.0 ?x194.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (12 subgoals):\n 1. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x291 x292.\n        \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x291 x292.\n        \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 12 subgoals...", "case (Store x201 x202 x203 x204)"], ["proof (state)\nthis:\n  x1 = Store x201 x202 x203 x204\n\ngoal (12 subgoals):\n 1. \\<And>x201 x202 x203 x204.\n       \\<lbrakk>e = $x1; x1 = Store x201 x202 x203 x204\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x291 x292.\n        \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 12 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Store x201 x202 x203 x204\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_store_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Store x201 x202 x203 x204\n  run_one_step ?d ?i\n   (?s, ?vs, ?ves, $Store ?x201.0 ?x202.0 ?x203.0 ?x204.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (11 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x301 x302.\n        \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x301 x302.\n        \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 11 subgoals...", "case Current_memory"], ["proof (state)\nthis:\n  x1 = Current_memory\n\ngoal (11 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Current_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x301 x302.\n        \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)\nA total of 11 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Current_memory\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_current_memory_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Current_memory\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Current_memory) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (10 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x311 x312 x313 x314.\n        \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x311 x312 x313 x314.\n        \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)", "case Grow_memory"], ["proof (state)\nthis:\n  x1 = Grow_memory\n\ngoal (10 subgoals):\n 1. \\<lbrakk>e = $x1; x1 = Grow_memory\\<rbrakk>\n    \\<Longrightarrow> e = $Return \\<or>\n                      (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 10. \\<And>x311 x312 x313 x314.\n        \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n        \\<Longrightarrow> e = $Return \\<or>\n                          (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Grow_memory\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_grow_memory_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Grow_memory\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Grow_memory) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (9 subgoals):\n 1. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "case (EConst x23)"], ["proof (state)\nthis:\n  x1 = C x23\n\ngoal (9 subgoals):\n 1. \\<And>x23.\n       \\<lbrakk>e = $x1; x1 = C x23\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 9. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = C x23\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using assms Basic"], ["proof (prove)\nusing this:\n  x1 = C x23\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (8 subgoals):\n 1. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "case (Unop_i x241 x242)"], ["proof (state)\nthis:\n  x1 = Unop_i x241 x242\n\ngoal (8 subgoals):\n 1. \\<And>x241 x242.\n       \\<lbrakk>e = $x1; x1 = Unop_i x241 x242\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 8. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Unop_i x241 x242\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_unop_i_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Unop_i x241 x242\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Unop_i ?x241.0 ?x242.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (7 subgoals):\n 1. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "case (Unop_f x251 x252)"], ["proof (state)\nthis:\n  x1 = Unop_f x251 x252\n\ngoal (7 subgoals):\n 1. \\<And>x251 x252.\n       \\<lbrakk>e = $x1; x1 = Unop_f x251 x252\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 7. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Unop_f x251 x252\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_unop_f_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Unop_f x251 x252\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Unop_f ?x251.0 ?x252.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (6 subgoals):\n 1. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "case (Binop_i x261 x262)"], ["proof (state)\nthis:\n  x1 = Binop_i x261 x262\n\ngoal (6 subgoals):\n 1. \\<And>x261 x262.\n       \\<lbrakk>e = $x1; x1 = Binop_i x261 x262\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 6. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Binop_i x261 x262\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_binop_i_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Binop_i x261 x262\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Binop_i ?x261.0 ?x262.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (5 subgoals):\n 1. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "case (Binop_f x271 x272)"], ["proof (state)\nthis:\n  x1 = Binop_f x271 x272\n\ngoal (5 subgoals):\n 1. \\<And>x271 x272.\n       \\<lbrakk>e = $x1; x1 = Binop_f x271 x272\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 5. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Binop_f x271 x272\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_binop_f_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Binop_f x271 x272\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Binop_f ?x271.0 ?x272.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (4 subgoals):\n 1. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "case (Testop x281 x282)"], ["proof (state)\nthis:\n  x1 = Testop x281 x282\n\ngoal (4 subgoals):\n 1. \\<And>x281 x282.\n       \\<lbrakk>e = $x1; x1 = Testop x281 x282\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Testop x281 x282\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_testop_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Testop x281 x282\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Testop ?x281.0 ?x282.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (3 subgoals):\n 1. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "case (Relop_i x291 x292)"], ["proof (state)\nthis:\n  x1 = Relop_i x291 x292\n\ngoal (3 subgoals):\n 1. \\<And>x291 x292.\n       \\<lbrakk>e = $x1; x1 = Relop_i x291 x292\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Relop_i x291 x292\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_relop_i_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Relop_i x291 x292\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Relop_i ?x291.0 ?x292.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (2 subgoals):\n 1. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "case (Relop_f x301 x302)"], ["proof (state)\nthis:\n  x1 = Relop_f x301 x302\n\ngoal (2 subgoals):\n 1. \\<And>x301 x302.\n       \\<lbrakk>e = $x1; x1 = Relop_f x301 x302\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Relop_f x301 x302\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_relop_f_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Relop_f x301 x302\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Relop_f ?x301.0 ?x302.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (1 subgoal):\n 1. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "case (Cvtop x311 x312 x313 x314)"], ["proof (state)\nthis:\n  x1 = Cvtop x311 x312 x313 x314\n\ngoal (1 subgoal):\n 1. \\<And>x311 x312 x313 x314.\n       \\<lbrakk>e = $x1; x1 = Cvtop x311 x312 x313 x314\\<rbrakk>\n       \\<Longrightarrow> e = $Return \\<or>\n                         (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = Cvtop x311 x312 x313 x314\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using run_one_step_basic_cvtop_result assms Basic"], ["proof (prove)\nusing this:\n  x1 = Cvtop x311 x312 x313 x314\n  run_one_step ?d ?i (?s, ?vs, ?ves, $Cvtop ?t2.0 ?x312.0 ?t1.0 ?sx) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  e = $x1\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (4 subgoals):\n 1. e = Trap \\<Longrightarrow>\n    e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. e = Trap \\<Longrightarrow>\n    e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "case Trap"], ["proof (state)\nthis:\n  e = Trap\n\ngoal (4 subgoals):\n 1. e = Trap \\<Longrightarrow>\n    e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n 4. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  e = Trap\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using assms"], ["proof (prove)\nusing this:\n  e = Trap\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by auto"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (3 subgoals):\n 1. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "case (Callcl x3)"], ["proof (state)\nthis:\n  e = Callcl x3\n\ngoal (3 subgoals):\n 1. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n 3. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  e = Callcl x3\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using assms run_one_step_callcl_result"], ["proof (prove)\nusing this:\n  e = Callcl x3\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  run_one_step ?d ?i (?s, ?vs, ?ves, Callcl ?cl) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (2 subgoals):\n 1. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "case (Label x41 x42 x43)"], ["proof (state)\nthis:\n  e = Label x41 x42 x43\n\ngoal (2 subgoals):\n 1. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n 2. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  e = Label x41 x42 x43\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by auto"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (1 subgoal):\n 1. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "case (Local x51 x52 x53 x54)"], ["proof (state)\nthis:\n  e = Local x51 x52 x53 x54\n\ngoal (1 subgoal):\n 1. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  e = Local x51 x52 x53 x54\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "using assms run_one_step_local_result"], ["proof (prove)\nusing this:\n  e = Local x51 x52 x53 x54\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  run_one_step ?d ?i (?s, ?vs, ?ves, Local ?x51.0 ?x52.0 ?x53.0 ?x54.0) =\n  (?s', ?vs', ?res) \\<Longrightarrow>\n  (\\<exists>r. ?res = RSNormal r) \\<or> (\\<exists>e. ?res = RSCrash e)\n\ngoal (1 subgoal):\n 1. e = $Return \\<or> (\\<exists>n les es. e = Label n les es)", "by fastforce"], ["proof (state)\nthis:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma run_step_break_imp_not_trap_const_list:\n  assumes \"run_step d i (s, vs, es) = (s', vs', RSBreak n res)\"\n  shows \"es \\<noteq> [Trap]\" \"\\<not>const_list es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. es \\<noteq> [Trap] &&& \\<not> const_list es", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. es \\<noteq> [Trap]\n 2. \\<not> const_list es", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. es \\<noteq> [Trap]\n 2. \\<not> const_list es", "assume \"es = [Trap]\""], ["proof (state)\nthis:\n  es = [Trap]\n\ngoal (2 subgoals):\n 1. es \\<noteq> [Trap]\n 2. \\<not> const_list es", "hence False"], ["proof (prove)\nusing this:\n  es = [Trap]\n\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  es = [Trap]\n  run_step d i (s, vs, es) = (s', vs', RSBreak n res)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. es \\<noteq> [Trap]\n 2. \\<not> const_list es", "}"], ["proof (state)\nthis:\n  es = [Trap] \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. es \\<noteq> [Trap]\n 2. \\<not> const_list es", "thus \"es \\<noteq> [Trap]\""], ["proof (prove)\nusing this:\n  es = [Trap] \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. es \\<noteq> [Trap]", "by blast"], ["proof (state)\nthis:\n  es \\<noteq> [Trap]\n\ngoal (1 subgoal):\n 1. \\<not> const_list es", "{"], ["proof (state)\nthis:\n  es \\<noteq> [Trap]\n\ngoal (1 subgoal):\n 1. \\<not> const_list es", "assume \"const_list es\""], ["proof (state)\nthis:\n  const_list es\n\ngoal (1 subgoal):\n 1. \\<not> const_list es", "then"], ["proof (chain)\npicking this:\n  const_list es", "obtain vs where \"split_vals_e es = (vs, [])\""], ["proof (prove)\nusing this:\n  const_list es\n\ngoal (1 subgoal):\n 1. (\\<And>vs.\n        split_vals_e es = (vs, []) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using split_vals_e_const_list e_type_const_conv_vs"], ["proof (prove)\nusing this:\n  const_list es\n  split_vals_e ($$* ?vs) = (?vs, [])\n  const_list ?ves \\<Longrightarrow> \\<exists>vs. ?ves = $$* vs\n\ngoal (1 subgoal):\n 1. (\\<And>vs.\n        split_vals_e es = (vs, []) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  split_vals_e es = (vs, [])\n\ngoal (1 subgoal):\n 1. \\<not> const_list es", "hence False"], ["proof (prove)\nusing this:\n  split_vals_e es = (vs, [])\n\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  split_vals_e es = (vs, [])\n  run_step d i (s, vs, es) = (s', vs', RSBreak n res)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> const_list es", "}"], ["proof (state)\nthis:\n  const_list es \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> const_list es", "thus \"\\<not>const_list es\""], ["proof (prove)\nusing this:\n  const_list es \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> const_list es", "by blast"], ["proof (state)\nthis:\n  \\<not> const_list es\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma run_step_return_imp_not_trap_const_list:\n  assumes \"run_step d i (s, vs, es) = (s', vs', RSReturn res)\"\n  shows \"es \\<noteq> [Trap]\" \"\\<not>const_list es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. es \\<noteq> [Trap] &&& \\<not> const_list es", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. es \\<noteq> [Trap]\n 2. \\<not> const_list es", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. es \\<noteq> [Trap]\n 2. \\<not> const_list es", "assume \"es = [Trap]\""], ["proof (state)\nthis:\n  es = [Trap]\n\ngoal (2 subgoals):\n 1. es \\<noteq> [Trap]\n 2. \\<not> const_list es", "hence False"], ["proof (prove)\nusing this:\n  es = [Trap]\n\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  es = [Trap]\n  run_step d i (s, vs, es) = (s', vs', RSReturn res)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. es \\<noteq> [Trap]\n 2. \\<not> const_list es", "}"], ["proof (state)\nthis:\n  es = [Trap] \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. es \\<noteq> [Trap]\n 2. \\<not> const_list es", "thus \"es \\<noteq> [Trap]\""], ["proof (prove)\nusing this:\n  es = [Trap] \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. es \\<noteq> [Trap]", "by blast"], ["proof (state)\nthis:\n  es \\<noteq> [Trap]\n\ngoal (1 subgoal):\n 1. \\<not> const_list es", "{"], ["proof (state)\nthis:\n  es \\<noteq> [Trap]\n\ngoal (1 subgoal):\n 1. \\<not> const_list es", "assume \"const_list es\""], ["proof (state)\nthis:\n  const_list es\n\ngoal (1 subgoal):\n 1. \\<not> const_list es", "then"], ["proof (chain)\npicking this:\n  const_list es", "obtain vs where \"split_vals_e es = (vs, [])\""], ["proof (prove)\nusing this:\n  const_list es\n\ngoal (1 subgoal):\n 1. (\\<And>vs.\n        split_vals_e es = (vs, []) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using split_vals_e_const_list e_type_const_conv_vs"], ["proof (prove)\nusing this:\n  const_list es\n  split_vals_e ($$* ?vs) = (?vs, [])\n  const_list ?ves \\<Longrightarrow> \\<exists>vs. ?ves = $$* vs\n\ngoal (1 subgoal):\n 1. (\\<And>vs.\n        split_vals_e es = (vs, []) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  split_vals_e es = (vs, [])\n\ngoal (1 subgoal):\n 1. \\<not> const_list es", "hence False"], ["proof (prove)\nusing this:\n  split_vals_e es = (vs, [])\n\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  split_vals_e es = (vs, [])\n  run_step d i (s, vs, es) = (s', vs', RSReturn res)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> const_list es", "}"], ["proof (state)\nthis:\n  const_list es \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> const_list es", "thus \"\\<not>const_list es\""], ["proof (prove)\nusing this:\n  const_list es \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> const_list es", "by blast"], ["proof (state)\nthis:\n  \\<not> const_list es\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma run_one_step_label_break_imp_break:\n  assumes \"run_one_step d i (s, vs, ves, Label ln les es) = (s', vs', RSBreak n res)\"\n  shows \"run_step d i (s, vs, es) = (s', vs', RSBreak (Suc n) res)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. run_step d i (s, vs, es) = (s', vs', RSBreak (Suc n) res)", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, Label ln les es) = (s', vs', RSBreak n res)\n\ngoal (1 subgoal):\n 1. run_step d i (s, vs, es) = (s', vs', RSBreak (Suc n) res)", "proof (cases \"es = [Trap]\"; cases \"const_list es\")"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, Label ln les es) =\n             (s', vs', RSBreak n res);\n     es = [Trap];\n     run_one_step d i (s, vs, ves, Label ln les es) =\n     (s', vs', RSBreak n res);\n     const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) =\n                      (s', vs', RSBreak (Suc n) res)\n 2. \\<lbrakk>run_one_step d i (s, vs, ves, Label ln les es) =\n             (s', vs', RSBreak n res);\n     es = [Trap];\n     run_one_step d i (s, vs, ves, Label ln les es) =\n     (s', vs', RSBreak n res);\n     \\<not> const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) =\n                      (s', vs', RSBreak (Suc n) res)\n 3. \\<lbrakk>run_one_step d i (s, vs, ves, Label ln les es) =\n             (s', vs', RSBreak n res);\n     es \\<noteq> [Trap];\n     run_one_step d i (s, vs, ves, Label ln les es) =\n     (s', vs', RSBreak n res);\n     const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) =\n                      (s', vs', RSBreak (Suc n) res)\n 4. \\<lbrakk>run_one_step d i (s, vs, ves, Label ln les es) =\n             (s', vs', RSBreak n res);\n     es \\<noteq> [Trap];\n     run_one_step d i (s, vs, ves, Label ln les es) =\n     (s', vs', RSBreak n res);\n     \\<not> const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) =\n                      (s', vs', RSBreak (Suc n) res)", "assume local_assms:\"es \\<noteq> [Trap]\" \"\\<not>const_list es\""], ["proof (state)\nthis:\n  es \\<noteq> [Trap]\n  \\<not> const_list es\n\ngoal (4 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, Label ln les es) =\n             (s', vs', RSBreak n res);\n     es = [Trap];\n     run_one_step d i (s, vs, ves, Label ln les es) =\n     (s', vs', RSBreak n res);\n     const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) =\n                      (s', vs', RSBreak (Suc n) res)\n 2. \\<lbrakk>run_one_step d i (s, vs, ves, Label ln les es) =\n             (s', vs', RSBreak n res);\n     es = [Trap];\n     run_one_step d i (s, vs, ves, Label ln les es) =\n     (s', vs', RSBreak n res);\n     \\<not> const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) =\n                      (s', vs', RSBreak (Suc n) res)\n 3. \\<lbrakk>run_one_step d i (s, vs, ves, Label ln les es) =\n             (s', vs', RSBreak n res);\n     es \\<noteq> [Trap];\n     run_one_step d i (s, vs, ves, Label ln les es) =\n     (s', vs', RSBreak n res);\n     const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) =\n                      (s', vs', RSBreak (Suc n) res)\n 4. \\<lbrakk>run_one_step d i (s, vs, ves, Label ln les es) =\n             (s', vs', RSBreak n res);\n     es \\<noteq> [Trap];\n     run_one_step d i (s, vs, ves, Label ln les es) =\n     (s', vs', RSBreak n res);\n     \\<not> const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) =\n                      (s', vs', RSBreak (Suc n) res)", "obtain s'' vs'' res'' where rs_def:\"run_step d i (s, vs, es) = (s'', vs'', res'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s'' vs'' res''.\n        run_step d i (s, vs, es) = (s'', vs'', res'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  run_step d i (s, vs, es) = (s'', vs'', res'')\n\ngoal (4 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, Label ln les es) =\n             (s', vs', RSBreak n res);\n     es = [Trap];\n     run_one_step d i (s, vs, ves, Label ln les es) =\n     (s', vs', RSBreak n res);\n     const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) =\n                      (s', vs', RSBreak (Suc n) res)\n 2. \\<lbrakk>run_one_step d i (s, vs, ves, Label ln les es) =\n             (s', vs', RSBreak n res);\n     es = [Trap];\n     run_one_step d i (s, vs, ves, Label ln les es) =\n     (s', vs', RSBreak n res);\n     \\<not> const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) =\n                      (s', vs', RSBreak (Suc n) res)\n 3. \\<lbrakk>run_one_step d i (s, vs, ves, Label ln les es) =\n             (s', vs', RSBreak n res);\n     es \\<noteq> [Trap];\n     run_one_step d i (s, vs, ves, Label ln les es) =\n     (s', vs', RSBreak n res);\n     const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) =\n                      (s', vs', RSBreak (Suc n) res)\n 4. \\<lbrakk>run_one_step d i (s, vs, ves, Label ln les es) =\n             (s', vs', RSBreak n res);\n     es \\<noteq> [Trap];\n     run_one_step d i (s, vs, ves, Label ln les es) =\n     (s', vs', RSBreak n res);\n     \\<not> const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) =\n                      (s', vs', RSBreak (Suc n) res)", "thus ?thesis"], ["proof (prove)\nusing this:\n  run_step d i (s, vs, es) = (s'', vs'', res'')\n\ngoal (1 subgoal):\n 1. run_step d i (s, vs, es) = (s', vs', RSBreak (Suc n) res)", "using assms local_assms"], ["proof (prove)\nusing this:\n  run_step d i (s, vs, es) = (s'', vs'', res'')\n  run_one_step d i (s, vs, ves, Label ln les es) = (s', vs', RSBreak n res)\n  es \\<noteq> [Trap]\n  \\<not> const_list es\n\ngoal (1 subgoal):\n 1. run_step d i (s, vs, es) = (s', vs', RSBreak (Suc n) res)", "proof (cases res'')"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>run_step d i (s, vs, es) = (s'', vs'', res'');\n        run_one_step d i (s, vs, ves, Label ln les es) =\n        (s', vs', RSBreak n res);\n        es \\<noteq> [Trap]; \\<not> const_list es;\n        res'' = RSCrash x1\\<rbrakk>\n       \\<Longrightarrow> run_step d i (s, vs, es) =\n                         (s', vs', RSBreak (Suc n) res)\n 2. \\<And>x21 x22.\n       \\<lbrakk>run_step d i (s, vs, es) = (s'', vs'', res'');\n        run_one_step d i (s, vs, ves, Label ln les es) =\n        (s', vs', RSBreak n res);\n        es \\<noteq> [Trap]; \\<not> const_list es;\n        res'' = RSBreak x21 x22\\<rbrakk>\n       \\<Longrightarrow> run_step d i (s, vs, es) =\n                         (s', vs', RSBreak (Suc n) res)\n 3. \\<And>x3.\n       \\<lbrakk>run_step d i (s, vs, es) = (s'', vs'', res'');\n        run_one_step d i (s, vs, ves, Label ln les es) =\n        (s', vs', RSBreak n res);\n        es \\<noteq> [Trap]; \\<not> const_list es;\n        res'' = RSReturn x3\\<rbrakk>\n       \\<Longrightarrow> run_step d i (s, vs, es) =\n                         (s', vs', RSBreak (Suc n) res)\n 4. \\<And>x4.\n       \\<lbrakk>run_step d i (s, vs, es) = (s'', vs'', res'');\n        run_one_step d i (s, vs, ves, Label ln les es) =\n        (s', vs', RSBreak n res);\n        es \\<noteq> [Trap]; \\<not> const_list es;\n        res'' = RSNormal x4\\<rbrakk>\n       \\<Longrightarrow> run_step d i (s, vs, es) =\n                         (s', vs', RSBreak (Suc n) res)", "case (RSBreak x21 x22)"], ["proof (state)\nthis:\n  res'' = RSBreak x21 x22\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>run_step d i (s, vs, es) = (s'', vs'', res'');\n        run_one_step d i (s, vs, ves, Label ln les es) =\n        (s', vs', RSBreak n res);\n        es \\<noteq> [Trap]; \\<not> const_list es;\n        res'' = RSCrash x1\\<rbrakk>\n       \\<Longrightarrow> run_step d i (s, vs, es) =\n                         (s', vs', RSBreak (Suc n) res)\n 2. \\<And>x21 x22.\n       \\<lbrakk>run_step d i (s, vs, es) = (s'', vs'', res'');\n        run_one_step d i (s, vs, ves, Label ln les es) =\n        (s', vs', RSBreak n res);\n        es \\<noteq> [Trap]; \\<not> const_list es;\n        res'' = RSBreak x21 x22\\<rbrakk>\n       \\<Longrightarrow> run_step d i (s, vs, es) =\n                         (s', vs', RSBreak (Suc n) res)\n 3. \\<And>x3.\n       \\<lbrakk>run_step d i (s, vs, es) = (s'', vs'', res'');\n        run_one_step d i (s, vs, ves, Label ln les es) =\n        (s', vs', RSBreak n res);\n        es \\<noteq> [Trap]; \\<not> const_list es;\n        res'' = RSReturn x3\\<rbrakk>\n       \\<Longrightarrow> run_step d i (s, vs, es) =\n                         (s', vs', RSBreak (Suc n) res)\n 4. \\<And>x4.\n       \\<lbrakk>run_step d i (s, vs, es) = (s'', vs'', res'');\n        run_one_step d i (s, vs, ves, Label ln les es) =\n        (s', vs', RSBreak n res);\n        es \\<noteq> [Trap]; \\<not> const_list es;\n        res'' = RSNormal x4\\<rbrakk>\n       \\<Longrightarrow> run_step d i (s, vs, es) =\n                         (s', vs', RSBreak (Suc n) res)", "thus ?thesis"], ["proof (prove)\nusing this:\n  res'' = RSBreak x21 x22\n\ngoal (1 subgoal):\n 1. run_step d i (s, vs, es) = (s', vs', RSBreak (Suc n) res)", "using assms local_assms rs_def"], ["proof (prove)\nusing this:\n  res'' = RSBreak x21 x22\n  run_one_step d i (s, vs, ves, Label ln les es) = (s', vs', RSBreak n res)\n  es \\<noteq> [Trap]\n  \\<not> const_list es\n  run_step d i (s, vs, es) = (s'', vs'', res'')\n\ngoal (1 subgoal):\n 1. run_step d i (s, vs, es) = (s', vs', RSBreak (Suc n) res)", "by (cases x21; cases \"ln \\<le> length x22\") auto"], ["proof (state)\nthis:\n  run_step d i (s, vs, es) = (s', vs', RSBreak (Suc n) res)\n\ngoal (3 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>run_step d i (s, vs, es) = (s'', vs'', res'');\n        run_one_step d i (s, vs, ves, Label ln les es) =\n        (s', vs', RSBreak n res);\n        es \\<noteq> [Trap]; \\<not> const_list es;\n        res'' = RSCrash x1\\<rbrakk>\n       \\<Longrightarrow> run_step d i (s, vs, es) =\n                         (s', vs', RSBreak (Suc n) res)\n 2. \\<And>x3.\n       \\<lbrakk>run_step d i (s, vs, es) = (s'', vs'', res'');\n        run_one_step d i (s, vs, ves, Label ln les es) =\n        (s', vs', RSBreak n res);\n        es \\<noteq> [Trap]; \\<not> const_list es;\n        res'' = RSReturn x3\\<rbrakk>\n       \\<Longrightarrow> run_step d i (s, vs, es) =\n                         (s', vs', RSBreak (Suc n) res)\n 3. \\<And>x4.\n       \\<lbrakk>run_step d i (s, vs, es) = (s'', vs'', res'');\n        run_one_step d i (s, vs, ves, Label ln les es) =\n        (s', vs', RSBreak n res);\n        es \\<noteq> [Trap]; \\<not> const_list es;\n        res'' = RSNormal x4\\<rbrakk>\n       \\<Longrightarrow> run_step d i (s, vs, es) =\n                         (s', vs', RSBreak (Suc n) res)", "qed auto"], ["proof (state)\nthis:\n  run_step d i (s, vs, es) = (s', vs', RSBreak (Suc n) res)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, Label ln les es) =\n             (s', vs', RSBreak n res);\n     es = [Trap];\n     run_one_step d i (s, vs, ves, Label ln les es) =\n     (s', vs', RSBreak n res);\n     const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) =\n                      (s', vs', RSBreak (Suc n) res)\n 2. \\<lbrakk>run_one_step d i (s, vs, ves, Label ln les es) =\n             (s', vs', RSBreak n res);\n     es = [Trap];\n     run_one_step d i (s, vs, ves, Label ln les es) =\n     (s', vs', RSBreak n res);\n     \\<not> const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) =\n                      (s', vs', RSBreak (Suc n) res)\n 3. \\<lbrakk>run_one_step d i (s, vs, ves, Label ln les es) =\n             (s', vs', RSBreak n res);\n     es \\<noteq> [Trap];\n     run_one_step d i (s, vs, ves, Label ln les es) =\n     (s', vs', RSBreak n res);\n     const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) =\n                      (s', vs', RSBreak (Suc n) res)", "qed auto"], ["", "lemma run_one_step_label_return_imp_return:\n  assumes \"run_one_step d i (s, vs, ves, Label n les es) = (s', vs', RSReturn res)\"\n  shows \"run_step d i (s, vs, es) = (s', vs', RSReturn res)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. run_step d i (s, vs, es) = (s', vs', RSReturn res)", "using assms"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, Label n les es) = (s', vs', RSReturn res)\n\ngoal (1 subgoal):\n 1. run_step d i (s, vs, es) = (s', vs', RSReturn res)", "proof (cases \"es = [Trap]\"; cases \"const_list es\")"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, Label n les es) =\n             (s', vs', RSReturn res);\n     es = [Trap];\n     run_one_step d i (s, vs, ves, Label n les es) =\n     (s', vs', RSReturn res);\n     const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) = (s', vs', RSReturn res)\n 2. \\<lbrakk>run_one_step d i (s, vs, ves, Label n les es) =\n             (s', vs', RSReturn res);\n     es = [Trap];\n     run_one_step d i (s, vs, ves, Label n les es) =\n     (s', vs', RSReturn res);\n     \\<not> const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) = (s', vs', RSReturn res)\n 3. \\<lbrakk>run_one_step d i (s, vs, ves, Label n les es) =\n             (s', vs', RSReturn res);\n     es \\<noteq> [Trap];\n     run_one_step d i (s, vs, ves, Label n les es) =\n     (s', vs', RSReturn res);\n     const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) = (s', vs', RSReturn res)\n 4. \\<lbrakk>run_one_step d i (s, vs, ves, Label n les es) =\n             (s', vs', RSReturn res);\n     es \\<noteq> [Trap];\n     run_one_step d i (s, vs, ves, Label n les es) =\n     (s', vs', RSReturn res);\n     \\<not> const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) = (s', vs', RSReturn res)", "assume local_assms:\"es \\<noteq> [Trap]\" \"\\<not>const_list es\""], ["proof (state)\nthis:\n  es \\<noteq> [Trap]\n  \\<not> const_list es\n\ngoal (4 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, Label n les es) =\n             (s', vs', RSReturn res);\n     es = [Trap];\n     run_one_step d i (s, vs, ves, Label n les es) =\n     (s', vs', RSReturn res);\n     const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) = (s', vs', RSReturn res)\n 2. \\<lbrakk>run_one_step d i (s, vs, ves, Label n les es) =\n             (s', vs', RSReturn res);\n     es = [Trap];\n     run_one_step d i (s, vs, ves, Label n les es) =\n     (s', vs', RSReturn res);\n     \\<not> const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) = (s', vs', RSReturn res)\n 3. \\<lbrakk>run_one_step d i (s, vs, ves, Label n les es) =\n             (s', vs', RSReturn res);\n     es \\<noteq> [Trap];\n     run_one_step d i (s, vs, ves, Label n les es) =\n     (s', vs', RSReturn res);\n     const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) = (s', vs', RSReturn res)\n 4. \\<lbrakk>run_one_step d i (s, vs, ves, Label n les es) =\n             (s', vs', RSReturn res);\n     es \\<noteq> [Trap];\n     run_one_step d i (s, vs, ves, Label n les es) =\n     (s', vs', RSReturn res);\n     \\<not> const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) = (s', vs', RSReturn res)", "obtain s'' vs'' res'' where rs_def:\"run_step d i (s, vs, es) = (s'', vs'', res'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s'' vs'' res''.\n        run_step d i (s, vs, es) = (s'', vs'', res'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  run_step d i (s, vs, es) = (s'', vs'', res'')\n\ngoal (4 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, Label n les es) =\n             (s', vs', RSReturn res);\n     es = [Trap];\n     run_one_step d i (s, vs, ves, Label n les es) =\n     (s', vs', RSReturn res);\n     const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) = (s', vs', RSReturn res)\n 2. \\<lbrakk>run_one_step d i (s, vs, ves, Label n les es) =\n             (s', vs', RSReturn res);\n     es = [Trap];\n     run_one_step d i (s, vs, ves, Label n les es) =\n     (s', vs', RSReturn res);\n     \\<not> const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) = (s', vs', RSReturn res)\n 3. \\<lbrakk>run_one_step d i (s, vs, ves, Label n les es) =\n             (s', vs', RSReturn res);\n     es \\<noteq> [Trap];\n     run_one_step d i (s, vs, ves, Label n les es) =\n     (s', vs', RSReturn res);\n     const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) = (s', vs', RSReturn res)\n 4. \\<lbrakk>run_one_step d i (s, vs, ves, Label n les es) =\n             (s', vs', RSReturn res);\n     es \\<noteq> [Trap];\n     run_one_step d i (s, vs, ves, Label n les es) =\n     (s', vs', RSReturn res);\n     \\<not> const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) = (s', vs', RSReturn res)", "thus ?thesis"], ["proof (prove)\nusing this:\n  run_step d i (s, vs, es) = (s'', vs'', res'')\n\ngoal (1 subgoal):\n 1. run_step d i (s, vs, es) = (s', vs', RSReturn res)", "using assms local_assms"], ["proof (prove)\nusing this:\n  run_step d i (s, vs, es) = (s'', vs'', res'')\n  run_one_step d i (s, vs, ves, Label n les es) = (s', vs', RSReturn res)\n  es \\<noteq> [Trap]\n  \\<not> const_list es\n\ngoal (1 subgoal):\n 1. run_step d i (s, vs, es) = (s', vs', RSReturn res)", "proof (cases res'')"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>run_step d i (s, vs, es) = (s'', vs'', res'');\n        run_one_step d i (s, vs, ves, Label n les es) =\n        (s', vs', RSReturn res);\n        es \\<noteq> [Trap]; \\<not> const_list es;\n        res'' = RSCrash x1\\<rbrakk>\n       \\<Longrightarrow> run_step d i (s, vs, es) = (s', vs', RSReturn res)\n 2. \\<And>x21 x22.\n       \\<lbrakk>run_step d i (s, vs, es) = (s'', vs'', res'');\n        run_one_step d i (s, vs, ves, Label n les es) =\n        (s', vs', RSReturn res);\n        es \\<noteq> [Trap]; \\<not> const_list es;\n        res'' = RSBreak x21 x22\\<rbrakk>\n       \\<Longrightarrow> run_step d i (s, vs, es) = (s', vs', RSReturn res)\n 3. \\<And>x3.\n       \\<lbrakk>run_step d i (s, vs, es) = (s'', vs'', res'');\n        run_one_step d i (s, vs, ves, Label n les es) =\n        (s', vs', RSReturn res);\n        es \\<noteq> [Trap]; \\<not> const_list es;\n        res'' = RSReturn x3\\<rbrakk>\n       \\<Longrightarrow> run_step d i (s, vs, es) = (s', vs', RSReturn res)\n 4. \\<And>x4.\n       \\<lbrakk>run_step d i (s, vs, es) = (s'', vs'', res'');\n        run_one_step d i (s, vs, ves, Label n les es) =\n        (s', vs', RSReturn res);\n        es \\<noteq> [Trap]; \\<not> const_list es;\n        res'' = RSNormal x4\\<rbrakk>\n       \\<Longrightarrow> run_step d i (s, vs, es) = (s', vs', RSReturn res)", "case (RSBreak x21 x22)"], ["proof (state)\nthis:\n  res'' = RSBreak x21 x22\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>run_step d i (s, vs, es) = (s'', vs'', res'');\n        run_one_step d i (s, vs, ves, Label n les es) =\n        (s', vs', RSReturn res);\n        es \\<noteq> [Trap]; \\<not> const_list es;\n        res'' = RSCrash x1\\<rbrakk>\n       \\<Longrightarrow> run_step d i (s, vs, es) = (s', vs', RSReturn res)\n 2. \\<And>x21 x22.\n       \\<lbrakk>run_step d i (s, vs, es) = (s'', vs'', res'');\n        run_one_step d i (s, vs, ves, Label n les es) =\n        (s', vs', RSReturn res);\n        es \\<noteq> [Trap]; \\<not> const_list es;\n        res'' = RSBreak x21 x22\\<rbrakk>\n       \\<Longrightarrow> run_step d i (s, vs, es) = (s', vs', RSReturn res)\n 3. \\<And>x3.\n       \\<lbrakk>run_step d i (s, vs, es) = (s'', vs'', res'');\n        run_one_step d i (s, vs, ves, Label n les es) =\n        (s', vs', RSReturn res);\n        es \\<noteq> [Trap]; \\<not> const_list es;\n        res'' = RSReturn x3\\<rbrakk>\n       \\<Longrightarrow> run_step d i (s, vs, es) = (s', vs', RSReturn res)\n 4. \\<And>x4.\n       \\<lbrakk>run_step d i (s, vs, es) = (s'', vs'', res'');\n        run_one_step d i (s, vs, ves, Label n les es) =\n        (s', vs', RSReturn res);\n        es \\<noteq> [Trap]; \\<not> const_list es;\n        res'' = RSNormal x4\\<rbrakk>\n       \\<Longrightarrow> run_step d i (s, vs, es) = (s', vs', RSReturn res)", "thus ?thesis"], ["proof (prove)\nusing this:\n  res'' = RSBreak x21 x22\n\ngoal (1 subgoal):\n 1. run_step d i (s, vs, es) = (s', vs', RSReturn res)", "using assms local_assms rs_def"], ["proof (prove)\nusing this:\n  res'' = RSBreak x21 x22\n  run_one_step d i (s, vs, ves, Label n les es) = (s', vs', RSReturn res)\n  es \\<noteq> [Trap]\n  \\<not> const_list es\n  run_step d i (s, vs, es) = (s'', vs'', res'')\n\ngoal (1 subgoal):\n 1. run_step d i (s, vs, es) = (s', vs', RSReturn res)", "by (cases x21; cases \"n \\<le> length x22\") auto"], ["proof (state)\nthis:\n  run_step d i (s, vs, es) = (s', vs', RSReturn res)\n\ngoal (3 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>run_step d i (s, vs, es) = (s'', vs'', res'');\n        run_one_step d i (s, vs, ves, Label n les es) =\n        (s', vs', RSReturn res);\n        es \\<noteq> [Trap]; \\<not> const_list es;\n        res'' = RSCrash x1\\<rbrakk>\n       \\<Longrightarrow> run_step d i (s, vs, es) = (s', vs', RSReturn res)\n 2. \\<And>x3.\n       \\<lbrakk>run_step d i (s, vs, es) = (s'', vs'', res'');\n        run_one_step d i (s, vs, ves, Label n les es) =\n        (s', vs', RSReturn res);\n        es \\<noteq> [Trap]; \\<not> const_list es;\n        res'' = RSReturn x3\\<rbrakk>\n       \\<Longrightarrow> run_step d i (s, vs, es) = (s', vs', RSReturn res)\n 3. \\<And>x4.\n       \\<lbrakk>run_step d i (s, vs, es) = (s'', vs'', res'');\n        run_one_step d i (s, vs, ves, Label n les es) =\n        (s', vs', RSReturn res);\n        es \\<noteq> [Trap]; \\<not> const_list es;\n        res'' = RSNormal x4\\<rbrakk>\n       \\<Longrightarrow> run_step d i (s, vs, es) = (s', vs', RSReturn res)", "qed auto"], ["proof (state)\nthis:\n  run_step d i (s, vs, es) = (s', vs', RSReturn res)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, Label n les es) =\n             (s', vs', RSReturn res);\n     es = [Trap];\n     run_one_step d i (s, vs, ves, Label n les es) =\n     (s', vs', RSReturn res);\n     const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) = (s', vs', RSReturn res)\n 2. \\<lbrakk>run_one_step d i (s, vs, ves, Label n les es) =\n             (s', vs', RSReturn res);\n     es = [Trap];\n     run_one_step d i (s, vs, ves, Label n les es) =\n     (s', vs', RSReturn res);\n     \\<not> const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) = (s', vs', RSReturn res)\n 3. \\<lbrakk>run_one_step d i (s, vs, ves, Label n les es) =\n             (s', vs', RSReturn res);\n     es \\<noteq> [Trap];\n     run_one_step d i (s, vs, ves, Label n les es) =\n     (s', vs', RSReturn res);\n     const_list es\\<rbrakk>\n    \\<Longrightarrow> run_step d i (s, vs, es) = (s', vs', RSReturn res)", "qed auto"], ["", "thm run_step_run_one_step.induct"], ["", "(* These definitions are needed because the automatic induction process hangs if they are unrolled *)"], ["", "definition run_step_break_imp_lfilled_prop where\n  \"run_step_break_imp_lfilled_prop s' vs' n res =\n     (\\<lambda>d i (s,vs,es). (run_step d i (s,vs,es) = (s', vs', RSBreak n res)) \\<longrightarrow>\n       s = s' \\<and> vs = vs' \\<and>\n       (\\<exists>n' lfilled es_c. n' \\<ge> n \\<and> Lfilled_exact (n'-n) lfilled ((vs_to_es res) @ [$Br n'] @ es_c) es))\""], ["", "definition run_one_step_break_imp_lfilled_prop where\n  \"run_one_step_break_imp_lfilled_prop s' vs' n res =\n     (\\<lambda>d i (s,vs,ves,e). run_one_step d i (s,vs,ves,e) = (s', vs', RSBreak n res) \\<longrightarrow>\n       s = s' \\<and> vs = vs' \\<and> ((res = ves \\<and> e = $Br n) \\<or> (\\<exists>n' lfilled es_c es les' ln. n' > n \\<and> Lfilled_exact (n'-(n+1)) lfilled ((vs_to_es res) @ [$Br n'] @ es_c) es \\<and> e = Label ln les' es)))\""], ["", "lemma run_step_break_imp_lfilled:\n  assumes \"run_step d i (s,vs,es) = (s', vs', RSBreak n res)\"\n  shows \"s = s' \\<and>\n         vs = vs' \\<and>\n         (\\<exists>n' lfilled es_c. n' \\<ge> n \\<and>\n                            Lfilled_exact (n'-n) lfilled ((vs_to_es res) @ [$Br n'] @ es_c) es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (\\<exists>n' lfilled es_c.\n        n \\<le> n' \\<and>\n        Lfilled_exact (n' - n) lfilled (vs_to_es res @ [$Br n'] @ es_c) es)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (\\<exists>n' lfilled es_c.\n        n \\<le> n' \\<and>\n        Lfilled_exact (n' - n) lfilled (vs_to_es res @ [$Br n'] @ es_c) es)", "fix ves e"], ["proof (state)\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (\\<exists>n' lfilled es_c.\n        n \\<le> n' \\<and>\n        Lfilled_exact (n' - n) lfilled (vs_to_es res @ [$Br n'] @ es_c) es)", "have \"(run_step_break_imp_lfilled_prop s' vs' n res) d i (s,vs,es)\"\n  and  \"(run_one_step_break_imp_lfilled_prop s' vs' n res) d i (s,vs,ves,e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. run_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, es) &&&\n    run_one_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, ves, e)", "proof (induction d i \"(s,vs,es)\" and d i \"(s,vs,ves,e)\"  arbitrary: n es and n ves e rule: run_step_run_one_step.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>d i es n.\n       (\\<And>x xa y x21 x22 n.\n           \\<lbrakk>x = split_vals_e es; (xa, y) = x; y = x21 # x22;\n            \\<not> e_is_trap x21\\<rbrakk>\n           \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n\n                              res d i\n                              (s, vs, rev xa, x21)) \\<Longrightarrow>\n       run_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, es)\n 2. \\<And>d i ves e n.\n       \\<lbrakk>\\<And>x41 x42 x43 n.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43\\<rbrakk>\n                   \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs'\nn res d i (s, vs, x43);\n        \\<And>x51 x52 x54 nat n.\n           \\<lbrakk>e = Local x51 x52 vs x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat\\<rbrakk>\n           \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs' n res\n                              nat x52 (s, vs, x54)\\<rbrakk>\n       \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n res d\n                          i (s, vs, ves, e)", "case (1 d i es)"], ["proof (state)\nthis:\n  \\<lbrakk>?x = split_vals_e es; (?xa, ?y) = ?x; ?y = ?x21.0 # ?x22.0;\n   \\<not> e_is_trap ?x21.0\\<rbrakk>\n  \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' ?n res d i\n                     (s, vs, rev ?xa, ?x21.0)\n\ngoal (2 subgoals):\n 1. \\<And>d i es n.\n       (\\<And>x xa y x21 x22 n.\n           \\<lbrakk>x = split_vals_e es; (xa, y) = x; y = x21 # x22;\n            \\<not> e_is_trap x21\\<rbrakk>\n           \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n\n                              res d i\n                              (s, vs, rev xa, x21)) \\<Longrightarrow>\n       run_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, es)\n 2. \\<And>d i ves e n.\n       \\<lbrakk>\\<And>x41 x42 x43 n.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43\\<rbrakk>\n                   \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs'\nn res d i (s, vs, x43);\n        \\<And>x51 x52 x54 nat n.\n           \\<lbrakk>e = Local x51 x52 vs x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat\\<rbrakk>\n           \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs' n res\n                              nat x52 (s, vs, x54)\\<rbrakk>\n       \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n res d\n                          i (s, vs, ves, e)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>?x = split_vals_e es; (?xa, ?y) = ?x; ?y = ?x21.0 # ?x22.0;\n   \\<not> e_is_trap ?x21.0\\<rbrakk>\n  \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' ?n res d i\n                     (s, vs, rev ?xa, ?x21.0)\n\ngoal (2 subgoals):\n 1. \\<And>d i es n.\n       (\\<And>x xa y x21 x22 n.\n           \\<lbrakk>x = split_vals_e es; (xa, y) = x; y = x21 # x22;\n            \\<not> e_is_trap x21\\<rbrakk>\n           \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n\n                              res d i\n                              (s, vs, rev xa, x21)) \\<Longrightarrow>\n       run_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, es)\n 2. \\<And>d i ves e n.\n       \\<lbrakk>\\<And>x41 x42 x43 n.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43\\<rbrakk>\n                   \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs'\nn res d i (s, vs, x43);\n        \\<And>x51 x52 x54 nat n.\n           \\<lbrakk>e = Local x51 x52 vs x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat\\<rbrakk>\n           \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs' n res\n                              nat x52 (s, vs, x54)\\<rbrakk>\n       \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n res d\n                          i (s, vs, ves, e)", "assume local_assms:\"run_step d i (s,vs,es) = (s', vs', RSBreak n res)\""], ["proof (state)\nthis:\n  run_step d i (s, vs, es) = (s', vs', RSBreak n res)\n\ngoal (2 subgoals):\n 1. \\<And>d i es n.\n       (\\<And>x xa y x21 x22 n.\n           \\<lbrakk>x = split_vals_e es; (xa, y) = x; y = x21 # x22;\n            \\<not> e_is_trap x21\\<rbrakk>\n           \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n\n                              res d i\n                              (s, vs, rev xa, x21)) \\<Longrightarrow>\n       run_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, es)\n 2. \\<And>d i ves e n.\n       \\<lbrakk>\\<And>x41 x42 x43 n.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43\\<rbrakk>\n                   \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs'\nn res d i (s, vs, x43);\n        \\<And>x51 x52 x54 nat n.\n           \\<lbrakk>e = Local x51 x52 vs x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat\\<rbrakk>\n           \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs' n res\n                              nat x52 (s, vs, x54)\\<rbrakk>\n       \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n res d\n                          i (s, vs, ves, e)", "obtain ves es' where split_vals_es:\"split_vals_e es = (ves, es')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ves es'.\n        split_vals_e es = (ves, es') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  split_vals_e es = (ves, es')\n\ngoal (2 subgoals):\n 1. \\<And>d i es n.\n       (\\<And>x xa y x21 x22 n.\n           \\<lbrakk>x = split_vals_e es; (xa, y) = x; y = x21 # x22;\n            \\<not> e_is_trap x21\\<rbrakk>\n           \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n\n                              res d i\n                              (s, vs, rev xa, x21)) \\<Longrightarrow>\n       run_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, es)\n 2. \\<And>d i ves e n.\n       \\<lbrakk>\\<And>x41 x42 x43 n.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43\\<rbrakk>\n                   \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs'\nn res d i (s, vs, x43);\n        \\<And>x51 x52 x54 nat n.\n           \\<lbrakk>e = Local x51 x52 vs x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat\\<rbrakk>\n           \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs' n res\n                              nat x52 (s, vs, x54)\\<rbrakk>\n       \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n res d\n                          i (s, vs, ves, e)", "then"], ["proof (chain)\npicking this:\n  split_vals_e es = (ves, es')", "obtain a as where es'_def:\"es' = a#as\""], ["proof (prove)\nusing this:\n  split_vals_e es = (ves, es')\n\ngoal (1 subgoal):\n 1. (\\<And>a as. es' = a # as \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using local_assms"], ["proof (prove)\nusing this:\n  split_vals_e es = (ves, es')\n  run_step d i (s, vs, es) = (s', vs', RSBreak n res)\n\ngoal (1 subgoal):\n 1. (\\<And>a as. es' = a # as \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases es') auto"], ["proof (state)\nthis:\n  es' = a # as\n\ngoal (2 subgoals):\n 1. \\<And>d i es n.\n       (\\<And>x xa y x21 x22 n.\n           \\<lbrakk>x = split_vals_e es; (xa, y) = x; y = x21 # x22;\n            \\<not> e_is_trap x21\\<rbrakk>\n           \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n\n                              res d i\n                              (s, vs, rev xa, x21)) \\<Longrightarrow>\n       run_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, es)\n 2. \\<And>d i ves e n.\n       \\<lbrakk>\\<And>x41 x42 x43 n.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43\\<rbrakk>\n                   \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs'\nn res d i (s, vs, x43);\n        \\<And>x51 x52 x54 nat n.\n           \\<lbrakk>e = Local x51 x52 vs x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat\\<rbrakk>\n           \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs' n res\n                              nat x52 (s, vs, x54)\\<rbrakk>\n       \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n res d\n                          i (s, vs, ves, e)", "hence a_def:\"a \\<noteq> Trap\""], ["proof (prove)\nusing this:\n  es' = a # as\n\ngoal (1 subgoal):\n 1. a \\<noteq> Trap", "using local_assms split_vals_es"], ["proof (prove)\nusing this:\n  es' = a # as\n  run_step d i (s, vs, es) = (s', vs', RSBreak n res)\n  split_vals_e es = (ves, es')\n\ngoal (1 subgoal):\n 1. a \\<noteq> Trap", "by (cases \"a = Trap\"; cases \"(as \\<noteq> [] \\<or> ves \\<noteq> [])\") simp_all"], ["proof (state)\nthis:\n  a \\<noteq> Trap\n\ngoal (2 subgoals):\n 1. \\<And>d i es n.\n       (\\<And>x xa y x21 x22 n.\n           \\<lbrakk>x = split_vals_e es; (xa, y) = x; y = x21 # x22;\n            \\<not> e_is_trap x21\\<rbrakk>\n           \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n\n                              res d i\n                              (s, vs, rev xa, x21)) \\<Longrightarrow>\n       run_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, es)\n 2. \\<And>d i ves e n.\n       \\<lbrakk>\\<And>x41 x42 x43 n.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43\\<rbrakk>\n                   \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs'\nn res d i (s, vs, x43);\n        \\<And>x51 x52 x54 nat n.\n           \\<lbrakk>e = Local x51 x52 vs x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat\\<rbrakk>\n           \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs' n res\n                              nat x52 (s, vs, x54)\\<rbrakk>\n       \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n res d\n                          i (s, vs, ves, e)", "obtain s'' vs'' res'' where \"run_one_step d i (s,vs,(rev ves),a) = (s'', vs'', res'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s'' vs'' res''.\n        run_one_step d i (s, vs, rev ves, a) =\n        (s'', vs'', res'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  run_one_step d i (s, vs, rev ves, a) = (s'', vs'', res'')\n\ngoal (2 subgoals):\n 1. \\<And>d i es n.\n       (\\<And>x xa y x21 x22 n.\n           \\<lbrakk>x = split_vals_e es; (xa, y) = x; y = x21 # x22;\n            \\<not> e_is_trap x21\\<rbrakk>\n           \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n\n                              res d i\n                              (s, vs, rev xa, x21)) \\<Longrightarrow>\n       run_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, es)\n 2. \\<And>d i ves e n.\n       \\<lbrakk>\\<And>x41 x42 x43 n.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43\\<rbrakk>\n                   \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs'\nn res d i (s, vs, x43);\n        \\<And>x51 x52 x54 nat n.\n           \\<lbrakk>e = Local x51 x52 vs x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat\\<rbrakk>\n           \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs' n res\n                              nat x52 (s, vs, x54)\\<rbrakk>\n       \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n res d\n                          i (s, vs, ves, e)", "hence ros_def:\"run_one_step d i (s,vs,(rev ves),a) = (s', vs', RSBreak n res)\""], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, rev ves, a) = (s'', vs'', res'')\n\ngoal (1 subgoal):\n 1. run_one_step d i (s, vs, rev ves, a) = (s', vs', RSBreak n res)", "using local_assms split_vals_es es'_def a_def"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, rev ves, a) = (s'', vs'', res'')\n  run_step d i (s, vs, es) = (s', vs', RSBreak n res)\n  split_vals_e es = (ves, es')\n  es' = a # as\n  a \\<noteq> Trap\n\ngoal (1 subgoal):\n 1. run_one_step d i (s, vs, rev ves, a) = (s', vs', RSBreak n res)", "by (cases \"res''\") (auto simp del: run_one_step.simps)"], ["proof (state)\nthis:\n  run_one_step d i (s, vs, rev ves, a) = (s', vs', RSBreak n res)\n\ngoal (2 subgoals):\n 1. \\<And>d i es n.\n       (\\<And>x xa y x21 x22 n.\n           \\<lbrakk>x = split_vals_e es; (xa, y) = x; y = x21 # x22;\n            \\<not> e_is_trap x21\\<rbrakk>\n           \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n\n                              res d i\n                              (s, vs, rev xa, x21)) \\<Longrightarrow>\n       run_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, es)\n 2. \\<And>d i ves e n.\n       \\<lbrakk>\\<And>x41 x42 x43 n.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43\\<rbrakk>\n                   \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs'\nn res d i (s, vs, x43);\n        \\<And>x51 x52 x54 nat n.\n           \\<lbrakk>e = Local x51 x52 vs x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat\\<rbrakk>\n           \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs' n res\n                              nat x52 (s, vs, x54)\\<rbrakk>\n       \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n res d\n                          i (s, vs, ves, e)", "hence \"run_one_step_break_imp_lfilled_prop  s' vs' n res d i (s, vs, rev ves, a)\""], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, rev ves, a) = (s', vs', RSBreak n res)\n\ngoal (1 subgoal):\n 1. run_one_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, rev ves, a)", "using 1 split_vals_es a_def es'_def"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, rev ves, a) = (s', vs', RSBreak n res)\n  \\<lbrakk>?x = split_vals_e es; (?xa, ?y) = ?x; ?y = ?x21.0 # ?x22.0;\n   \\<not> e_is_trap ?x21.0\\<rbrakk>\n  \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' ?n res d i\n                     (s, vs, rev ?xa, ?x21.0)\n  split_vals_e es = (ves, es')\n  a \\<noteq> Trap\n  es' = a # as\n\ngoal (1 subgoal):\n 1. run_one_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, rev ves, a)", "by fastforce"], ["proof (state)\nthis:\n  run_one_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, rev ves, a)\n\ngoal (2 subgoals):\n 1. \\<And>d i es n.\n       (\\<And>x xa y x21 x22 n.\n           \\<lbrakk>x = split_vals_e es; (xa, y) = x; y = x21 # x22;\n            \\<not> e_is_trap x21\\<rbrakk>\n           \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n\n                              res d i\n                              (s, vs, rev xa, x21)) \\<Longrightarrow>\n       run_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, es)\n 2. \\<And>d i ves e n.\n       \\<lbrakk>\\<And>x41 x42 x43 n.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43\\<rbrakk>\n                   \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs'\nn res d i (s, vs, x43);\n        \\<And>x51 x52 x54 nat n.\n           \\<lbrakk>e = Local x51 x52 vs x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat\\<rbrakk>\n           \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs' n res\n                              nat x52 (s, vs, x54)\\<rbrakk>\n       \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n res d\n                          i (s, vs, ves, e)", "then"], ["proof (chain)\npicking this:\n  run_one_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, rev ves, a)", "obtain n' lfilled es_c les les' ln where\n        \"s = s'\" \"vs = vs'\"\n        \"((res = (rev ves) \\<and> a = $Br n) \\<or>\n           n' > n \\<and> (Lfilled_exact (n'-(n+1)) lfilled ((vs_to_es res) @ [$Br n'] @ es_c) les \\<and> a = Label ln les' les))\""], ["proof (prove)\nusing this:\n  run_one_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, rev ves, a)\n\ngoal (1 subgoal):\n 1. (\\<And>n' lfilled es_c les ln les'.\n        \\<lbrakk>s = s'; vs = vs';\n         res = rev ves \\<and> a = $Br n \\<or>\n         n < n' \\<and>\n         Lfilled_exact (n' - (n + 1)) lfilled\n          (vs_to_es res @ [$Br n'] @ es_c) les \\<and>\n         a = Label ln les' les\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ros_def"], ["proof (prove)\nusing this:\n  run_one_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, rev ves, a)\n  run_one_step d i (s, vs, rev ves, a) = (s', vs', RSBreak n res)\n\ngoal (1 subgoal):\n 1. (\\<And>n' lfilled es_c les ln les'.\n        \\<lbrakk>s = s'; vs = vs';\n         res = rev ves \\<and> a = $Br n \\<or>\n         n < n' \\<and>\n         Lfilled_exact (n' - (n + 1)) lfilled\n          (vs_to_es res @ [$Br n'] @ es_c) les \\<and>\n         a = Label ln les' les\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding run_one_step_break_imp_lfilled_prop_def"], ["proof (prove)\nusing this:\n  case (s, vs, rev ves, a) of\n  (s, vs, ves, e) \\<Rightarrow>\n    run_one_step d i (s, vs, ves, e) =\n    (s', vs', RSBreak n res) \\<longrightarrow>\n    s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Br n \\<or>\n     (\\<exists>n' lfilled es_c es les' ln.\n         n < n' \\<and>\n         Lfilled_exact (n' - (n + 1)) lfilled\n          (vs_to_es res @ [$Br n'] @ es_c) es \\<and>\n         e = Label ln les' es))\n  run_one_step d i (s, vs, rev ves, a) = (s', vs', RSBreak n res)\n\ngoal (1 subgoal):\n 1. (\\<And>n' lfilled es_c les ln les'.\n        \\<lbrakk>s = s'; vs = vs';\n         res = rev ves \\<and> a = $Br n \\<or>\n         n < n' \\<and>\n         Lfilled_exact (n' - (n + 1)) lfilled\n          (vs_to_es res @ [$Br n'] @ es_c) les \\<and>\n         a = Label ln les' les\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  s = s'\n  vs = vs'\n  res = rev ves \\<and> a = $Br n \\<or>\n  n < n' \\<and>\n  Lfilled_exact (n' - (n + 1)) lfilled (vs_to_es res @ [$Br n'] @ es_c)\n   les \\<and>\n  a = Label ln les' les\n\ngoal (2 subgoals):\n 1. \\<And>d i es n.\n       (\\<And>x xa y x21 x22 n.\n           \\<lbrakk>x = split_vals_e es; (xa, y) = x; y = x21 # x22;\n            \\<not> e_is_trap x21\\<rbrakk>\n           \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n\n                              res d i\n                              (s, vs, rev xa, x21)) \\<Longrightarrow>\n       run_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, es)\n 2. \\<And>d i ves e n.\n       \\<lbrakk>\\<And>x41 x42 x43 n.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43\\<rbrakk>\n                   \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs'\nn res d i (s, vs, x43);\n        \\<And>x51 x52 x54 nat n.\n           \\<lbrakk>e = Local x51 x52 vs x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat\\<rbrakk>\n           \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs' n res\n                              nat x52 (s, vs, x54)\\<rbrakk>\n       \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n res d\n                          i (s, vs, ves, e)", "then"], ["proof (chain)\npicking this:\n  s = s'\n  vs = vs'\n  res = rev ves \\<and> a = $Br n \\<or>\n  n < n' \\<and>\n  Lfilled_exact (n' - (n + 1)) lfilled (vs_to_es res @ [$Br n'] @ es_c)\n   les \\<and>\n  a = Label ln les' les", "consider\n        (1) \"s = s'\" \"vs = vs'\" \"res = (rev ves)\" \"a = $Br n\"\n      | (2) \"s = s'\" \"vs = vs'\" \"n' > n\" \"Lfilled_exact (n'-(n+1)) lfilled ((vs_to_es res) @ [$Br n'] @ es_c) les\" \"a = Label ln les' les\""], ["proof (prove)\nusing this:\n  s = s'\n  vs = vs'\n  res = rev ves \\<and> a = $Br n \\<or>\n  n < n' \\<and>\n  Lfilled_exact (n' - (n + 1)) lfilled (vs_to_es res @ [$Br n'] @ es_c)\n   les \\<and>\n  a = Label ln les' les\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>s = s'; vs = vs'; res = rev ves; a = $Br n\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<lbrakk>s = s'; vs = vs'; n < n';\n      Lfilled_exact (n' - (n + 1)) lfilled (vs_to_es res @ [$Br n'] @ es_c)\n       les;\n      a = Label ln les' les\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>\\<lbrakk>s = s'; vs = vs'; res = rev ves; a = $Br n\\<rbrakk>\n           \\<Longrightarrow> ?thesis;\n   \\<lbrakk>s = s'; vs = vs'; n < n';\n    Lfilled_exact (n' - (n + 1)) lfilled (vs_to_es res @ [$Br n'] @ es_c)\n     les;\n    a = Label ln les' les\\<rbrakk>\n   \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (2 subgoals):\n 1. \\<And>d i es n.\n       (\\<And>x xa y x21 x22 n.\n           \\<lbrakk>x = split_vals_e es; (xa, y) = x; y = x21 # x22;\n            \\<not> e_is_trap x21\\<rbrakk>\n           \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n\n                              res d i\n                              (s, vs, rev xa, x21)) \\<Longrightarrow>\n       run_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, es)\n 2. \\<And>d i ves e n.\n       \\<lbrakk>\\<And>x41 x42 x43 n.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43\\<rbrakk>\n                   \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs'\nn res d i (s, vs, x43);\n        \\<And>x51 x52 x54 nat n.\n           \\<lbrakk>e = Local x51 x52 vs x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat\\<rbrakk>\n           \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs' n res\n                              nat x52 (s, vs, x54)\\<rbrakk>\n       \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n res d\n                          i (s, vs, ves, e)", "hence \"s = s' \\<and> vs = vs' \\<and>\n             (\\<exists>n' lfilled es_c.  n' \\<ge> n \\<and> Lfilled_exact (n'-n) lfilled ((vs_to_es res) @ [$Br n'] @ es_c) es)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<lbrakk>s = s'; vs = vs'; res = rev ves; a = $Br n\\<rbrakk>\n           \\<Longrightarrow> ?thesis;\n   \\<lbrakk>s = s'; vs = vs'; n < n';\n    Lfilled_exact (n' - (n + 1)) lfilled (vs_to_es res @ [$Br n'] @ es_c)\n     les;\n    a = Label ln les' les\\<rbrakk>\n   \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (\\<exists>n' lfilled es_c.\n        n \\<le> n' \\<and>\n        Lfilled_exact (n' - n) lfilled (vs_to_es res @ [$Br n'] @ es_c) es)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>s = s'; vs = vs'; res = rev ves; a = $Br n\\<rbrakk>\n    \\<Longrightarrow> s = s' \\<and>\n                      vs = vs' \\<and>\n                      (\\<exists>n' lfilled es_c.\n                          n \\<le> n' \\<and>\n                          Lfilled_exact (n' - n) lfilled\n                           (vs_to_es res @ [$Br n'] @ es_c) es)\n 2. \\<lbrakk>s = s'; vs = vs'; n < n';\n     Lfilled_exact (n' - (n + 1)) lfilled (vs_to_es res @ [$Br n'] @ es_c)\n      les;\n     a = Label ln les' les\\<rbrakk>\n    \\<Longrightarrow> s = s' \\<and>\n                      vs = vs' \\<and>\n                      (\\<exists>n' lfilled es_c.\n                          n \\<le> n' \\<and>\n                          Lfilled_exact (n' - n) lfilled\n                           (vs_to_es res @ [$Br n'] @ es_c) es)", "case 1"], ["proof (state)\nthis:\n  s = s'\n  vs = vs'\n  res = rev ves\n  a = $Br n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s = s'; vs = vs'; res = rev ves; a = $Br n\\<rbrakk>\n    \\<Longrightarrow> s = s' \\<and>\n                      vs = vs' \\<and>\n                      (\\<exists>n' lfilled es_c.\n                          n \\<le> n' \\<and>\n                          Lfilled_exact (n' - n) lfilled\n                           (vs_to_es res @ [$Br n'] @ es_c) es)\n 2. \\<lbrakk>s = s'; vs = vs'; n < n';\n     Lfilled_exact (n' - (n + 1)) lfilled (vs_to_es res @ [$Br n'] @ es_c)\n      les;\n     a = Label ln les' les\\<rbrakk>\n    \\<Longrightarrow> s = s' \\<and>\n                      vs = vs' \\<and>\n                      (\\<exists>n' lfilled es_c.\n                          n \\<le> n' \\<and>\n                          Lfilled_exact (n' - n) lfilled\n                           (vs_to_es res @ [$Br n'] @ es_c) es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  s = s'\n  vs = vs'\n  res = rev ves\n  a = $Br n\n\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (\\<exists>n' lfilled es_c.\n        n \\<le> n' \\<and>\n        Lfilled_exact (n' - n) lfilled (vs_to_es res @ [$Br n'] @ es_c) es)", "using es'_def split_vals_e_conv_app[OF split_vals_es] Lfilled_exact.intros(1) is_const_list[of _ ves]"], ["proof (prove)\nusing this:\n  s = s'\n  vs = vs'\n  res = rev ves\n  a = $Br n\n  es' = a # as\n  es = ($$* ves) @ es'\n  ?lholed = LBase [] [] \\<Longrightarrow> Lfilled_exact 0 ?lholed ?es ?es\n  ?ves = $$* ves \\<Longrightarrow> const_list ?ves\n\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (\\<exists>n' lfilled es_c.\n        n \\<le> n' \\<and>\n        Lfilled_exact (n' - n) lfilled (vs_to_es res @ [$Br n'] @ es_c) es)", "by fastforce"], ["proof (state)\nthis:\n  s = s' \\<and>\n  vs = vs' \\<and>\n  (\\<exists>n' lfilled es_c.\n      n \\<le> n' \\<and>\n      Lfilled_exact (n' - n) lfilled (vs_to_es res @ [$Br n'] @ es_c) es)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s = s'; vs = vs'; n < n';\n     Lfilled_exact (n' - (n + 1)) lfilled (vs_to_es res @ [$Br n'] @ es_c)\n      les;\n     a = Label ln les' les\\<rbrakk>\n    \\<Longrightarrow> s = s' \\<and>\n                      vs = vs' \\<and>\n                      (\\<exists>n' lfilled es_c.\n                          n \\<le> n' \\<and>\n                          Lfilled_exact (n' - n) lfilled\n                           (vs_to_es res @ [$Br n'] @ es_c) es)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>s = s'; vs = vs'; n < n';\n     Lfilled_exact (n' - (n + 1)) lfilled (vs_to_es res @ [$Br n'] @ es_c)\n      les;\n     a = Label ln les' les\\<rbrakk>\n    \\<Longrightarrow> s = s' \\<and>\n                      vs = vs' \\<and>\n                      (\\<exists>n' lfilled es_c.\n                          n \\<le> n' \\<and>\n                          Lfilled_exact (n' - n) lfilled\n                           (vs_to_es res @ [$Br n'] @ es_c) es)", "case 2"], ["proof (state)\nthis:\n  s = s'\n  vs = vs'\n  n < n'\n  Lfilled_exact (n' - (n + 1)) lfilled (vs_to_es res @ [$Br n'] @ es_c) les\n  a = Label ln les' les\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s = s'; vs = vs'; n < n';\n     Lfilled_exact (n' - (n + 1)) lfilled (vs_to_es res @ [$Br n'] @ es_c)\n      les;\n     a = Label ln les' les\\<rbrakk>\n    \\<Longrightarrow> s = s' \\<and>\n                      vs = vs' \\<and>\n                      (\\<exists>n' lfilled es_c.\n                          n \\<le> n' \\<and>\n                          Lfilled_exact (n' - n) lfilled\n                           (vs_to_es res @ [$Br n'] @ es_c) es)", "have test:\"const_list ($$* ves)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. const_list ($$* ves)", "using is_const_list"], ["proof (prove)\nusing this:\n  ?ves = $$* ?vs \\<Longrightarrow> const_list ?ves\n\ngoal (1 subgoal):\n 1. const_list ($$* ves)", "by auto"], ["proof (state)\nthis:\n  const_list ($$* ves)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s = s'; vs = vs'; n < n';\n     Lfilled_exact (n' - (n + 1)) lfilled (vs_to_es res @ [$Br n'] @ es_c)\n      les;\n     a = Label ln les' les\\<rbrakk>\n    \\<Longrightarrow> s = s' \\<and>\n                      vs = vs' \\<and>\n                      (\\<exists>n' lfilled es_c.\n                          n \\<le> n' \\<and>\n                          Lfilled_exact (n' - n) lfilled\n                           (vs_to_es res @ [$Br n'] @ es_c) es)", "have \"(Suc (n' - Suc n)) = n' - n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (n' - Suc n) = n' - n", "using 2(3)"], ["proof (prove)\nusing this:\n  n < n'\n\ngoal (1 subgoal):\n 1. Suc (n' - Suc n) = n' - n", "by simp"], ["proof (state)\nthis:\n  Suc (n' - Suc n) = n' - n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s = s'; vs = vs'; n < n';\n     Lfilled_exact (n' - (n + 1)) lfilled (vs_to_es res @ [$Br n'] @ es_c)\n      les;\n     a = Label ln les' les\\<rbrakk>\n    \\<Longrightarrow> s = s' \\<and>\n                      vs = vs' \\<and>\n                      (\\<exists>n' lfilled es_c.\n                          n \\<le> n' \\<and>\n                          Lfilled_exact (n' - n) lfilled\n                           (vs_to_es res @ [$Br n'] @ es_c) es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  Suc (n' - Suc n) = n' - n\n\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (\\<exists>n' lfilled es_c.\n        n \\<le> n' \\<and>\n        Lfilled_exact (n' - n) lfilled (vs_to_es res @ [$Br n'] @ es_c) es)", "using 2(1,2,3,5) Lfilled_exact.intros(2)[OF test _ 2(4), of _ ln les' as] es'_def split_vals_e_conv_app[OF split_vals_es]"], ["proof (prove)\nusing this:\n  Suc (n' - Suc n) = n' - n\n  s = s'\n  vs = vs'\n  n < n'\n  a = Label ln les' les\n  ?lholed = LRec ($$* ves) ln les' lfilled as \\<Longrightarrow>\n  Lfilled_exact (n' - (n + 1) + 1) ?lholed (vs_to_es res @ [$Br n'] @ es_c)\n   (($$* ves) @ [Label ln les' les] @ as)\n  es' = a # as\n  es = ($$* ves) @ es'\n\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (\\<exists>n' lfilled es_c.\n        n \\<le> n' \\<and>\n        Lfilled_exact (n' - n) lfilled (vs_to_es res @ [$Br n'] @ es_c) es)", "by (metis Suc_eq_plus1 append_Cons append_Nil less_imp_le_nat)"], ["proof (state)\nthis:\n  s = s' \\<and>\n  vs = vs' \\<and>\n  (\\<exists>n' lfilled es_c.\n      n \\<le> n' \\<and>\n      Lfilled_exact (n' - n) lfilled (vs_to_es res @ [$Br n'] @ es_c) es)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s = s' \\<and>\n  vs = vs' \\<and>\n  (\\<exists>n' lfilled es_c.\n      n \\<le> n' \\<and>\n      Lfilled_exact (n' - n) lfilled (vs_to_es res @ [$Br n'] @ es_c) es)\n\ngoal (2 subgoals):\n 1. \\<And>d i es n.\n       (\\<And>x xa y x21 x22 n.\n           \\<lbrakk>x = split_vals_e es; (xa, y) = x; y = x21 # x22;\n            \\<not> e_is_trap x21\\<rbrakk>\n           \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n\n                              res d i\n                              (s, vs, rev xa, x21)) \\<Longrightarrow>\n       run_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, es)\n 2. \\<And>d i ves e n.\n       \\<lbrakk>\\<And>x41 x42 x43 n.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43\\<rbrakk>\n                   \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs'\nn res d i (s, vs, x43);\n        \\<And>x51 x52 x54 nat n.\n           \\<lbrakk>e = Local x51 x52 vs x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat\\<rbrakk>\n           \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs' n res\n                              nat x52 (s, vs, x54)\\<rbrakk>\n       \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n res d\n                          i (s, vs, ves, e)", "}"], ["proof (state)\nthis:\n  run_step d i (s, vs, es) = (s', vs', RSBreak n res) \\<Longrightarrow>\n  s = s' \\<and>\n  vs = vs' \\<and>\n  (\\<exists>n' lfilled es_c.\n      n \\<le> n' \\<and>\n      Lfilled_exact (n' - n) lfilled (vs_to_es res @ [$Br n'] @ es_c) es)\n\ngoal (2 subgoals):\n 1. \\<And>d i es n.\n       (\\<And>x xa y x21 x22 n.\n           \\<lbrakk>x = split_vals_e es; (xa, y) = x; y = x21 # x22;\n            \\<not> e_is_trap x21\\<rbrakk>\n           \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n\n                              res d i\n                              (s, vs, rev xa, x21)) \\<Longrightarrow>\n       run_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, es)\n 2. \\<And>d i ves e n.\n       \\<lbrakk>\\<And>x41 x42 x43 n.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43\\<rbrakk>\n                   \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs'\nn res d i (s, vs, x43);\n        \\<And>x51 x52 x54 nat n.\n           \\<lbrakk>e = Local x51 x52 vs x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat\\<rbrakk>\n           \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs' n res\n                              nat x52 (s, vs, x54)\\<rbrakk>\n       \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n res d\n                          i (s, vs, ves, e)", "thus ?case"], ["proof (prove)\nusing this:\n  run_step d i (s, vs, es) = (s', vs', RSBreak n res) \\<Longrightarrow>\n  s = s' \\<and>\n  vs = vs' \\<and>\n  (\\<exists>n' lfilled es_c.\n      n \\<le> n' \\<and>\n      Lfilled_exact (n' - n) lfilled (vs_to_es res @ [$Br n'] @ es_c) es)\n\ngoal (1 subgoal):\n 1. run_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, es)", "unfolding run_step_break_imp_lfilled_prop_def"], ["proof (prove)\nusing this:\n  run_step d i (s, vs, es) = (s', vs', RSBreak n res) \\<Longrightarrow>\n  s = s' \\<and>\n  vs = vs' \\<and>\n  (\\<exists>n' lfilled es_c.\n      n \\<le> n' \\<and>\n      Lfilled_exact (n' - n) lfilled (vs_to_es res @ [$Br n'] @ es_c) es)\n\ngoal (1 subgoal):\n 1. case (s, vs, es) of\n    (s, vs, es) \\<Rightarrow>\n      run_step d i (s, vs, es) = (s', vs', RSBreak n res) \\<longrightarrow>\n      s = s' \\<and>\n      vs = vs' \\<and>\n      (\\<exists>n' lfilled es_c.\n          n \\<le> n' \\<and>\n          Lfilled_exact (n' - n) lfilled (vs_to_es res @ [$Br n'] @ es_c)\n           es)", "by fastforce"], ["proof (state)\nthis:\n  run_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, es)\n\ngoal (1 subgoal):\n 1. \\<And>d i ves e n.\n       \\<lbrakk>\\<And>x41 x42 x43 n.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43\\<rbrakk>\n                   \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs'\nn res d i (s, vs, x43);\n        \\<And>x51 x52 x54 nat n.\n           \\<lbrakk>e = Local x51 x52 vs x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat\\<rbrakk>\n           \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs' n res\n                              nat x52 (s, vs, x54)\\<rbrakk>\n       \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n res d\n                          i (s, vs, ves, e)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d i ves e n.\n       \\<lbrakk>\\<And>x41 x42 x43 n.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43\\<rbrakk>\n                   \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs'\nn res d i (s, vs, x43);\n        \\<And>x51 x52 x54 nat n.\n           \\<lbrakk>e = Local x51 x52 vs x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat\\<rbrakk>\n           \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs' n res\n                              nat x52 (s, vs, x54)\\<rbrakk>\n       \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n res d\n                          i (s, vs, ves, e)", "case (2 d i ves e)"], ["proof (state)\nthis:\n  \\<lbrakk>e = Label ?x41.0 ?x42.0 ?x43.0; \\<not> es_is_trap ?x43.0;\n   \\<not> const_list ?x43.0\\<rbrakk>\n  \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs' ?n res d i\n                     (s, vs, ?x43.0)\n  \\<lbrakk>e = Local ?x51.0 ?x52.0 vs ?x54.0; \\<not> es_is_trap ?x54.0;\n   \\<not> const_list ?x54.0; d = Suc ?nat\\<rbrakk>\n  \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs' ?n res ?nat\n                     ?x52.0 (s, vs, ?x54.0)\n\ngoal (1 subgoal):\n 1. \\<And>d i ves e n.\n       \\<lbrakk>\\<And>x41 x42 x43 n.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43\\<rbrakk>\n                   \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs'\nn res d i (s, vs, x43);\n        \\<And>x51 x52 x54 nat n.\n           \\<lbrakk>e = Local x51 x52 vs x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat\\<rbrakk>\n           \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs' n res\n                              nat x52 (s, vs, x54)\\<rbrakk>\n       \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n res d\n                          i (s, vs, ves, e)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>e = Label ?x41.0 ?x42.0 ?x43.0; \\<not> es_is_trap ?x43.0;\n   \\<not> const_list ?x43.0\\<rbrakk>\n  \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs' ?n res d i\n                     (s, vs, ?x43.0)\n  \\<lbrakk>e = Local ?x51.0 ?x52.0 vs ?x54.0; \\<not> es_is_trap ?x54.0;\n   \\<not> const_list ?x54.0; d = Suc ?nat\\<rbrakk>\n  \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs' ?n res ?nat\n                     ?x52.0 (s, vs, ?x54.0)\n\ngoal (1 subgoal):\n 1. \\<And>d i ves e n.\n       \\<lbrakk>\\<And>x41 x42 x43 n.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43\\<rbrakk>\n                   \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs'\nn res d i (s, vs, x43);\n        \\<And>x51 x52 x54 nat n.\n           \\<lbrakk>e = Local x51 x52 vs x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat\\<rbrakk>\n           \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs' n res\n                              nat x52 (s, vs, x54)\\<rbrakk>\n       \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n res d\n                          i (s, vs, ves, e)", "assume local_assms:\"run_one_step d i (s,vs,ves,e) = (s', vs', RSBreak n res)\""], ["proof (state)\nthis:\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n\ngoal (1 subgoal):\n 1. \\<And>d i ves e n.\n       \\<lbrakk>\\<And>x41 x42 x43 n.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43\\<rbrakk>\n                   \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs'\nn res d i (s, vs, x43);\n        \\<And>x51 x52 x54 nat n.\n           \\<lbrakk>e = Local x51 x52 vs x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat\\<rbrakk>\n           \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs' n res\n                              nat x52 (s, vs, x54)\\<rbrakk>\n       \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n res d\n                          i (s, vs, ves, e)", "consider (a) \"e = $Br n\" | (b) \"(\\<exists>n les es. e = Label n les es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>e = $Br n \\<Longrightarrow> thesis;\n     \\<exists>n les es. e = Label n les es \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using run_one_step_break[OF local_assms]"], ["proof (prove)\nusing this:\n  e = $Br n \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>e = $Br n \\<Longrightarrow> thesis;\n     \\<exists>n les es. e = Label n les es \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>e = $Br n \\<Longrightarrow> ?thesis;\n   \\<exists>n les es. e = Label n les es \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<And>d i ves e n.\n       \\<lbrakk>\\<And>x41 x42 x43 n.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43\\<rbrakk>\n                   \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs'\nn res d i (s, vs, x43);\n        \\<And>x51 x52 x54 nat n.\n           \\<lbrakk>e = Local x51 x52 vs x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat\\<rbrakk>\n           \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs' n res\n                              nat x52 (s, vs, x54)\\<rbrakk>\n       \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n res d\n                          i (s, vs, ves, e)", "hence \"s = s' \\<and> vs = vs' \\<and> ((res = ves \\<and> e = $Br n) \\<or> (\\<exists>n' lfilled es_c es les' ln. n' > n \\<and> Lfilled_exact (n'-(n+1)) lfilled ((vs_to_es res) @ [$Br n'] @ es_c) es \\<and> e = Label ln les' es))\""], ["proof (prove)\nusing this:\n  \\<lbrakk>e = $Br n \\<Longrightarrow> ?thesis;\n   \\<exists>n les es. e = Label n les es \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Br n \\<or>\n     (\\<exists>n' lfilled es_c es les' ln.\n         n < n' \\<and>\n         Lfilled_exact (n' - (n + 1)) lfilled\n          (vs_to_es res @ [$Br n'] @ es_c) es \\<and>\n         e = Label ln les' es))", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. e = $Br n \\<Longrightarrow>\n    s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Br n \\<or>\n     (\\<exists>n' lfilled es_c es les' ln.\n         n < n' \\<and>\n         Lfilled_exact (n' - (n + 1)) lfilled\n          (vs_to_es res @ [$Br n'] @ es_c) es \\<and>\n         e = Label ln les' es))\n 2. \\<exists>n les es. e = Label n les es \\<Longrightarrow>\n    s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Br n \\<or>\n     (\\<exists>n' lfilled es_c es les' ln.\n         n < n' \\<and>\n         Lfilled_exact (n' - (n + 1)) lfilled\n          (vs_to_es res @ [$Br n'] @ es_c) es \\<and>\n         e = Label ln les' es))", "case a"], ["proof (state)\nthis:\n  e = $Br n\n\ngoal (2 subgoals):\n 1. e = $Br n \\<Longrightarrow>\n    s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Br n \\<or>\n     (\\<exists>n' lfilled es_c es les' ln.\n         n < n' \\<and>\n         Lfilled_exact (n' - (n + 1)) lfilled\n          (vs_to_es res @ [$Br n'] @ es_c) es \\<and>\n         e = Label ln les' es))\n 2. \\<exists>n les es. e = Label n les es \\<Longrightarrow>\n    s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Br n \\<or>\n     (\\<exists>n' lfilled es_c es les' ln.\n         n < n' \\<and>\n         Lfilled_exact (n' - (n + 1)) lfilled\n          (vs_to_es res @ [$Br n'] @ es_c) es \\<and>\n         e = Label ln les' es))", "thus ?thesis"], ["proof (prove)\nusing this:\n  e = $Br n\n\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Br n \\<or>\n     (\\<exists>n' lfilled es_c es les' ln.\n         n < n' \\<and>\n         Lfilled_exact (n' - (n + 1)) lfilled\n          (vs_to_es res @ [$Br n'] @ es_c) es \\<and>\n         e = Label ln les' es))", "using local_assms"], ["proof (prove)\nusing this:\n  e = $Br n\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Br n \\<or>\n     (\\<exists>n' lfilled es_c es les' ln.\n         n < n' \\<and>\n         Lfilled_exact (n' - (n + 1)) lfilled\n          (vs_to_es res @ [$Br n'] @ es_c) es \\<and>\n         e = Label ln les' es))", "by simp"], ["proof (state)\nthis:\n  s = s' \\<and>\n  vs = vs' \\<and>\n  (res = ves \\<and> e = $Br n \\<or>\n   (\\<exists>n' lfilled es_c es les' ln.\n       n < n' \\<and>\n       Lfilled_exact (n' - (n + 1)) lfilled (vs_to_es res @ [$Br n'] @ es_c)\n        es \\<and>\n       e = Label ln les' es))\n\ngoal (1 subgoal):\n 1. \\<exists>n les es. e = Label n les es \\<Longrightarrow>\n    s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Br n \\<or>\n     (\\<exists>n' lfilled es_c es les' ln.\n         n < n' \\<and>\n         Lfilled_exact (n' - (n + 1)) lfilled\n          (vs_to_es res @ [$Br n'] @ es_c) es \\<and>\n         e = Label ln les' es))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n les es. e = Label n les es \\<Longrightarrow>\n    s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Br n \\<or>\n     (\\<exists>n' lfilled es_c es les' ln.\n         n < n' \\<and>\n         Lfilled_exact (n' - (n + 1)) lfilled\n          (vs_to_es res @ [$Br n'] @ es_c) es \\<and>\n         e = Label ln les' es))", "case b"], ["proof (state)\nthis:\n  \\<exists>n les es. e = Label n les es\n\ngoal (1 subgoal):\n 1. \\<exists>n les es. e = Label n les es \\<Longrightarrow>\n    s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Br n \\<or>\n     (\\<exists>n' lfilled es_c es les' ln.\n         n < n' \\<and>\n         Lfilled_exact (n' - (n + 1)) lfilled\n          (vs_to_es res @ [$Br n'] @ es_c) es \\<and>\n         e = Label ln les' es))", "then"], ["proof (chain)\npicking this:\n  \\<exists>n les es. e = Label n les es", "obtain ln les es where e_def:\"e = Label ln les es\""], ["proof (prove)\nusing this:\n  \\<exists>n les es. e = Label n les es\n\ngoal (1 subgoal):\n 1. (\\<And>ln les es.\n        e = Label ln les es \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  e = Label ln les es\n\ngoal (1 subgoal):\n 1. \\<exists>n les es. e = Label n les es \\<Longrightarrow>\n    s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Br n \\<or>\n     (\\<exists>n' lfilled es_c es les' ln.\n         n < n' \\<and>\n         Lfilled_exact (n' - (n + 1)) lfilled\n          (vs_to_es res @ [$Br n'] @ es_c) es \\<and>\n         e = Label ln les' es))", "hence \"run_one_step d i (s, vs, ves,  Label ln les es) = (s', vs', RSBreak n res)\""], ["proof (prove)\nusing this:\n  e = Label ln les es\n\ngoal (1 subgoal):\n 1. run_one_step d i (s, vs, ves, Label ln les es) =\n    (s', vs', RSBreak n res)", "using local_assms"], ["proof (prove)\nusing this:\n  e = Label ln les es\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSBreak n res)\n\ngoal (1 subgoal):\n 1. run_one_step d i (s, vs, ves, Label ln les es) =\n    (s', vs', RSBreak n res)", "by simp"], ["proof (state)\nthis:\n  run_one_step d i (s, vs, ves, Label ln les es) = (s', vs', RSBreak n res)\n\ngoal (1 subgoal):\n 1. \\<exists>n les es. e = Label n les es \\<Longrightarrow>\n    s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Br n \\<or>\n     (\\<exists>n' lfilled es_c es les' ln.\n         n < n' \\<and>\n         Lfilled_exact (n' - (n + 1)) lfilled\n          (vs_to_es res @ [$Br n'] @ es_c) es \\<and>\n         e = Label ln les' es))", "hence rs_def:\"run_step d i (s, vs, es) = (s', vs', RSBreak (Suc n) res)\""], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, Label ln les es) = (s', vs', RSBreak n res)\n\ngoal (1 subgoal):\n 1. run_step d i (s, vs, es) = (s', vs', RSBreak (Suc n) res)", "using run_one_step_label_break_imp_break"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, Label ln les es) = (s', vs', RSBreak n res)\n  run_one_step ?d ?i (?s, ?vs, ?ves, Label ?ln ?les ?es) =\n  (?s', ?vs', RSBreak ?n ?res) \\<Longrightarrow>\n  run_step ?d ?i (?s, ?vs, ?es) = (?s', ?vs', RSBreak (Suc ?n) ?res)\n\ngoal (1 subgoal):\n 1. run_step d i (s, vs, es) = (s', vs', RSBreak (Suc n) res)", "by fastforce"], ["proof (state)\nthis:\n  run_step d i (s, vs, es) = (s', vs', RSBreak (Suc n) res)\n\ngoal (1 subgoal):\n 1. \\<exists>n les es. e = Label n les es \\<Longrightarrow>\n    s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Br n \\<or>\n     (\\<exists>n' lfilled es_c es les' ln.\n         n < n' \\<and>\n         Lfilled_exact (n' - (n + 1)) lfilled\n          (vs_to_es res @ [$Br n'] @ es_c) es \\<and>\n         e = Label ln les' es))", "hence \"run_step_break_imp_lfilled_prop s' vs' (Suc n) res d i (s, vs, es)\""], ["proof (prove)\nusing this:\n  run_step d i (s, vs, es) = (s', vs', RSBreak (Suc n) res)\n\ngoal (1 subgoal):\n 1. run_step_break_imp_lfilled_prop s' vs' (Suc n) res d i (s, vs, es)", "using 2(1)[OF e_def _ run_step_break_imp_not_trap_const_list(2)]"], ["proof (prove)\nusing this:\n  run_step d i (s, vs, es) = (s', vs', RSBreak (Suc n) res)\n  \\<lbrakk>\\<not> es_is_trap es;\n   run_step ?d1 ?i1 (?s1, ?vs1, es) =\n   (?s'1, ?vs'1, RSBreak ?n1 ?res1)\\<rbrakk>\n  \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs' ?n res d i\n                     (s, vs, es)\n\ngoal (1 subgoal):\n 1. run_step_break_imp_lfilled_prop s' vs' (Suc n) res d i (s, vs, es)", "by fastforce"], ["proof (state)\nthis:\n  run_step_break_imp_lfilled_prop s' vs' (Suc n) res d i (s, vs, es)\n\ngoal (1 subgoal):\n 1. \\<exists>n les es. e = Label n les es \\<Longrightarrow>\n    s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Br n \\<or>\n     (\\<exists>n' lfilled es_c es les' ln.\n         n < n' \\<and>\n         Lfilled_exact (n' - (n + 1)) lfilled\n          (vs_to_es res @ [$Br n'] @ es_c) es \\<and>\n         e = Label ln les' es))", "thus ?thesis"], ["proof (prove)\nusing this:\n  run_step_break_imp_lfilled_prop s' vs' (Suc n) res d i (s, vs, es)\n\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Br n \\<or>\n     (\\<exists>n' lfilled es_c es les' ln.\n         n < n' \\<and>\n         Lfilled_exact (n' - (n + 1)) lfilled\n          (vs_to_es res @ [$Br n'] @ es_c) es \\<and>\n         e = Label ln les' es))", "using e_def rs_def"], ["proof (prove)\nusing this:\n  run_step_break_imp_lfilled_prop s' vs' (Suc n) res d i (s, vs, es)\n  e = Label ln les es\n  run_step d i (s, vs, es) = (s', vs', RSBreak (Suc n) res)\n\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Br n \\<or>\n     (\\<exists>n' lfilled es_c es les' ln.\n         n < n' \\<and>\n         Lfilled_exact (n' - (n + 1)) lfilled\n          (vs_to_es res @ [$Br n'] @ es_c) es \\<and>\n         e = Label ln les' es))", "unfolding run_step_break_imp_lfilled_prop_def"], ["proof (prove)\nusing this:\n  case (s, vs, es) of\n  (s, vs, es) \\<Rightarrow>\n    run_step d i (s, vs, es) =\n    (s', vs', RSBreak (Suc n) res) \\<longrightarrow>\n    s = s' \\<and>\n    vs = vs' \\<and>\n    (\\<exists>n' lfilled es_c.\n        Suc n \\<le> n' \\<and>\n        Lfilled_exact (n' - Suc n) lfilled (vs_to_es res @ [$Br n'] @ es_c)\n         es)\n  e = Label ln les es\n  run_step d i (s, vs, es) = (s', vs', RSBreak (Suc n) res)\n\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Br n \\<or>\n     (\\<exists>n' lfilled es_c es les' ln.\n         n < n' \\<and>\n         Lfilled_exact (n' - (n + 1)) lfilled\n          (vs_to_es res @ [$Br n'] @ es_c) es \\<and>\n         e = Label ln les' es))", "by fastforce"], ["proof (state)\nthis:\n  s = s' \\<and>\n  vs = vs' \\<and>\n  (res = ves \\<and> e = $Br n \\<or>\n   (\\<exists>n' lfilled es_c es les' ln.\n       n < n' \\<and>\n       Lfilled_exact (n' - (n + 1)) lfilled (vs_to_es res @ [$Br n'] @ es_c)\n        es \\<and>\n       e = Label ln les' es))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s = s' \\<and>\n  vs = vs' \\<and>\n  (res = ves \\<and> e = $Br n \\<or>\n   (\\<exists>n' lfilled es_c es les' ln.\n       n < n' \\<and>\n       Lfilled_exact (n' - (n + 1)) lfilled (vs_to_es res @ [$Br n'] @ es_c)\n        es \\<and>\n       e = Label ln les' es))\n\ngoal (1 subgoal):\n 1. \\<And>d i ves e n.\n       \\<lbrakk>\\<And>x41 x42 x43 n.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43\\<rbrakk>\n                   \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs'\nn res d i (s, vs, x43);\n        \\<And>x51 x52 x54 nat n.\n           \\<lbrakk>e = Local x51 x52 vs x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat\\<rbrakk>\n           \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs' n res\n                              nat x52 (s, vs, x54)\\<rbrakk>\n       \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n res d\n                          i (s, vs, ves, e)", "}"], ["proof (state)\nthis:\n  run_one_step d i (s, vs, ves, e) =\n  (s', vs', RSBreak n res) \\<Longrightarrow>\n  s = s' \\<and>\n  vs = vs' \\<and>\n  (res = ves \\<and> e = $Br n \\<or>\n   (\\<exists>n' lfilled es_c es les' ln.\n       n < n' \\<and>\n       Lfilled_exact (n' - (n + 1)) lfilled (vs_to_es res @ [$Br n'] @ es_c)\n        es \\<and>\n       e = Label ln les' es))\n\ngoal (1 subgoal):\n 1. \\<And>d i ves e n.\n       \\<lbrakk>\\<And>x41 x42 x43 n.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43\\<rbrakk>\n                   \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs'\nn res d i (s, vs, x43);\n        \\<And>x51 x52 x54 nat n.\n           \\<lbrakk>e = Local x51 x52 vs x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat\\<rbrakk>\n           \\<Longrightarrow> run_step_break_imp_lfilled_prop s' vs' n res\n                              nat x52 (s, vs, x54)\\<rbrakk>\n       \\<Longrightarrow> run_one_step_break_imp_lfilled_prop s' vs' n res d\n                          i (s, vs, ves, e)", "thus ?case"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, e) =\n  (s', vs', RSBreak n res) \\<Longrightarrow>\n  s = s' \\<and>\n  vs = vs' \\<and>\n  (res = ves \\<and> e = $Br n \\<or>\n   (\\<exists>n' lfilled es_c es les' ln.\n       n < n' \\<and>\n       Lfilled_exact (n' - (n + 1)) lfilled (vs_to_es res @ [$Br n'] @ es_c)\n        es \\<and>\n       e = Label ln les' es))\n\ngoal (1 subgoal):\n 1. run_one_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, ves, e)", "unfolding run_one_step_break_imp_lfilled_prop_def"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, e) =\n  (s', vs', RSBreak n res) \\<Longrightarrow>\n  s = s' \\<and>\n  vs = vs' \\<and>\n  (res = ves \\<and> e = $Br n \\<or>\n   (\\<exists>n' lfilled es_c es les' ln.\n       n < n' \\<and>\n       Lfilled_exact (n' - (n + 1)) lfilled (vs_to_es res @ [$Br n'] @ es_c)\n        es \\<and>\n       e = Label ln les' es))\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      run_one_step d i (s, vs, ves, e) =\n      (s', vs', RSBreak n res) \\<longrightarrow>\n      s = s' \\<and>\n      vs = vs' \\<and>\n      (res = ves \\<and> e = $Br n \\<or>\n       (\\<exists>n' lfilled es_c es les' ln.\n           n < n' \\<and>\n           Lfilled_exact (n' - (n + 1)) lfilled\n            (vs_to_es res @ [$Br n'] @ es_c) es \\<and>\n           e = Label ln les' es))", "by fastforce"], ["proof (state)\nthis:\n  run_one_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, ves, e)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  run_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, es)\n  run_one_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, ves, e)\n\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (\\<exists>n' lfilled es_c.\n        n \\<le> n' \\<and>\n        Lfilled_exact (n' - n) lfilled (vs_to_es res @ [$Br n'] @ es_c) es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  run_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, es)\n  run_one_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, ves, e)\n\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (\\<exists>n' lfilled es_c.\n        n \\<le> n' \\<and>\n        Lfilled_exact (n' - n) lfilled (vs_to_es res @ [$Br n'] @ es_c) es)", "using assms"], ["proof (prove)\nusing this:\n  run_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, es)\n  run_one_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, ves, e)\n  run_step d i (s, vs, es) = (s', vs', RSBreak n res)\n\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (\\<exists>n' lfilled es_c.\n        n \\<le> n' \\<and>\n        Lfilled_exact (n' - n) lfilled (vs_to_es res @ [$Br n'] @ es_c) es)", "unfolding run_step_break_imp_lfilled_prop_def"], ["proof (prove)\nusing this:\n  case (s, vs, es) of\n  (s, vs, es) \\<Rightarrow>\n    run_step d i (s, vs, es) = (s', vs', RSBreak n res) \\<longrightarrow>\n    s = s' \\<and>\n    vs = vs' \\<and>\n    (\\<exists>n' lfilled es_c.\n        n \\<le> n' \\<and>\n        Lfilled_exact (n' - n) lfilled (vs_to_es res @ [$Br n'] @ es_c) es)\n  run_one_step_break_imp_lfilled_prop s' vs' n res d i (s, vs, ves, e)\n  run_step d i (s, vs, es) = (s', vs', RSBreak n res)\n\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (\\<exists>n' lfilled es_c.\n        n \\<le> n' \\<and>\n        Lfilled_exact (n' - n) lfilled (vs_to_es res @ [$Br n'] @ es_c) es)", "by fastforce"], ["proof (state)\nthis:\n  s = s' \\<and>\n  vs = vs' \\<and>\n  (\\<exists>n' lfilled es_c.\n      n \\<le> n' \\<and>\n      Lfilled_exact (n' - n) lfilled (vs_to_es res @ [$Br n'] @ es_c) es)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma run_step_return_imp_lfilled:\n  assumes \"run_step d i (s,vs,es) = (s', vs', RSReturn res)\"\n  shows \"s = s' \\<and> vs = vs' \\<and> (\\<exists>n lfilled es_c. Lfilled_exact n lfilled ((vs_to_es res) @ [$Return] @ es_c) es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (\\<exists>n lfilled es_c.\n        Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (\\<exists>n lfilled es_c.\n        Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es)", "fix ves e"], ["proof (state)\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (\\<exists>n lfilled es_c.\n        Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es)", "have \"(run_step d i (s,vs,es) = (s', vs', RSReturn res)) \\<Longrightarrow>\n           s = s' \\<and> vs = vs' \\<and> (\\<exists>n lfilled es_c. Lfilled_exact n lfilled ((vs_to_es res) @ [$Return] @ es_c) es)\"\n  and  \"(run_one_step d i (s,vs,ves,e) = (s', vs', RSReturn res)) \\<Longrightarrow>\n          s = s' \\<and> vs = vs' \\<and>\n          ((res = ves \\<and> e = $Return) \\<or>\n           (\\<exists>n lfilled ves es_c es n' les'. Lfilled_exact n lfilled ((vs_to_es res) @ [$Return] @ es_c) es \\<and>\n              e = Label n' les' es))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (run_step d i (s, vs, es) = (s', vs', RSReturn res) \\<Longrightarrow>\n     s = s' \\<and>\n     vs = vs' \\<and>\n     (\\<exists>n lfilled es_c.\n         Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es)) &&&\n    (run_one_step d i (s, vs, ves, e) =\n     (s', vs', RSReturn res) \\<Longrightarrow>\n     s = s' \\<and>\n     vs = vs' \\<and>\n     (res = ves \\<and> e = $Return \\<or>\n      (\\<exists>n lfilled ves es_c es n' les'.\n          Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c)\n           es \\<and>\n          e = Label n' les' es)))", "proof (induction d i \"(s,vs,es)\" and d i \"(s,vs,ves,e)\" arbitrary: s vs es s' vs' res and s vs ves e s' vs' res rule: run_step_run_one_step.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>d i s vs es s' vs' res.\n       \\<lbrakk>\\<And>x xa y x21 x22 s' vs' res.\n                   \\<lbrakk>x = split_vals_e es; (xa, y) = x; y = x21 # x22;\n                    \\<not> e_is_trap x21;\n                    run_one_step d i (s, vs, rev xa, x21) =\n                    (s', vs', RSReturn res)\\<rbrakk>\n                   \\<Longrightarrow> s = s' \\<and>\n                                     vs = vs' \\<and>\n                                     (res = rev xa \\<and>\nx21 = $Return \\<or>\n(\\<exists>n lfilled ves es_c es n' les'.\n    Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n    x21 = Label n' les' es));\n        run_step d i (s, vs, es) = (s', vs', RSReturn res)\\<rbrakk>\n       \\<Longrightarrow> s = s' \\<and>\n                         vs = vs' \\<and>\n                         (\\<exists>n lfilled es_c.\n                             Lfilled_exact n lfilled\n                              (vs_to_es res @ [$Return] @ es_c) es)\n 2. \\<And>d i s vs ves e s' vs' res.\n       \\<lbrakk>\\<And>x41 x42 x43 s' vs' res.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43;\n                    run_step d i (s, vs, x43) =\n                    (s', vs', RSReturn res)\\<rbrakk>\n                   \\<Longrightarrow> s = s' \\<and>\n                                     vs = vs' \\<and>\n                                     (\\<exists>n lfilled es_c.\n   Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) x43);\n        \\<And>x51 x52 x53 x54 nat s' vs' res.\n           \\<lbrakk>e = Local x51 x52 x53 x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat;\n            run_step nat x52 (s, x53, x54) =\n            (s', vs', RSReturn res)\\<rbrakk>\n           \\<Longrightarrow> s = s' \\<and>\n                             x53 = vs' \\<and>\n                             (\\<exists>n lfilled es_c.\n                                 Lfilled_exact n lfilled\n                                  (vs_to_es res @ [$Return] @ es_c) x54);\n        run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\\<rbrakk>\n       \\<Longrightarrow> s = s' \\<and>\n                         vs = vs' \\<and>\n                         (res = ves \\<and> e = $Return \\<or>\n                          (\\<exists>n lfilled ves es_c es n' les'.\n                              Lfilled_exact n lfilled\n                               (vs_to_es res @ [$Return] @ es_c) es \\<and>\n                              e = Label n' les' es))", "case (1 d i s vs es)"], ["proof (state)\nthis:\n  \\<lbrakk>?x = split_vals_e es; (?xa, ?y) = ?x; ?y = ?x21.0 # ?x22.0;\n   \\<not> e_is_trap ?x21.0;\n   run_one_step d i (s, vs, rev ?xa, ?x21.0) =\n   (?s', ?vs', RSReturn ?res)\\<rbrakk>\n  \\<Longrightarrow> s = ?s' \\<and>\n                    vs = ?vs' \\<and>\n                    (?res = rev ?xa \\<and> ?x21.0 = $Return \\<or>\n                     (\\<exists>n lfilled ves es_c es n' les'.\n                         Lfilled_exact n lfilled\n                          (vs_to_es ?res @ [$Return] @ es_c) es \\<and>\n                         ?x21.0 = Label n' les' es))\n  run_step d i (s, vs, es) = (s', vs', RSReturn res)\n\ngoal (2 subgoals):\n 1. \\<And>d i s vs es s' vs' res.\n       \\<lbrakk>\\<And>x xa y x21 x22 s' vs' res.\n                   \\<lbrakk>x = split_vals_e es; (xa, y) = x; y = x21 # x22;\n                    \\<not> e_is_trap x21;\n                    run_one_step d i (s, vs, rev xa, x21) =\n                    (s', vs', RSReturn res)\\<rbrakk>\n                   \\<Longrightarrow> s = s' \\<and>\n                                     vs = vs' \\<and>\n                                     (res = rev xa \\<and>\nx21 = $Return \\<or>\n(\\<exists>n lfilled ves es_c es n' les'.\n    Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n    x21 = Label n' les' es));\n        run_step d i (s, vs, es) = (s', vs', RSReturn res)\\<rbrakk>\n       \\<Longrightarrow> s = s' \\<and>\n                         vs = vs' \\<and>\n                         (\\<exists>n lfilled es_c.\n                             Lfilled_exact n lfilled\n                              (vs_to_es res @ [$Return] @ es_c) es)\n 2. \\<And>d i s vs ves e s' vs' res.\n       \\<lbrakk>\\<And>x41 x42 x43 s' vs' res.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43;\n                    run_step d i (s, vs, x43) =\n                    (s', vs', RSReturn res)\\<rbrakk>\n                   \\<Longrightarrow> s = s' \\<and>\n                                     vs = vs' \\<and>\n                                     (\\<exists>n lfilled es_c.\n   Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) x43);\n        \\<And>x51 x52 x53 x54 nat s' vs' res.\n           \\<lbrakk>e = Local x51 x52 x53 x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat;\n            run_step nat x52 (s, x53, x54) =\n            (s', vs', RSReturn res)\\<rbrakk>\n           \\<Longrightarrow> s = s' \\<and>\n                             x53 = vs' \\<and>\n                             (\\<exists>n lfilled es_c.\n                                 Lfilled_exact n lfilled\n                                  (vs_to_es res @ [$Return] @ es_c) x54);\n        run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\\<rbrakk>\n       \\<Longrightarrow> s = s' \\<and>\n                         vs = vs' \\<and>\n                         (res = ves \\<and> e = $Return \\<or>\n                          (\\<exists>n lfilled ves es_c es n' les'.\n                              Lfilled_exact n lfilled\n                               (vs_to_es res @ [$Return] @ es_c) es \\<and>\n                              e = Label n' les' es))", "obtain ves es' where split_vals_es:\"split_vals_e es = (ves, es')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ves es'.\n        split_vals_e es = (ves, es') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  split_vals_e es = (ves, es')\n\ngoal (2 subgoals):\n 1. \\<And>d i s vs es s' vs' res.\n       \\<lbrakk>\\<And>x xa y x21 x22 s' vs' res.\n                   \\<lbrakk>x = split_vals_e es; (xa, y) = x; y = x21 # x22;\n                    \\<not> e_is_trap x21;\n                    run_one_step d i (s, vs, rev xa, x21) =\n                    (s', vs', RSReturn res)\\<rbrakk>\n                   \\<Longrightarrow> s = s' \\<and>\n                                     vs = vs' \\<and>\n                                     (res = rev xa \\<and>\nx21 = $Return \\<or>\n(\\<exists>n lfilled ves es_c es n' les'.\n    Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n    x21 = Label n' les' es));\n        run_step d i (s, vs, es) = (s', vs', RSReturn res)\\<rbrakk>\n       \\<Longrightarrow> s = s' \\<and>\n                         vs = vs' \\<and>\n                         (\\<exists>n lfilled es_c.\n                             Lfilled_exact n lfilled\n                              (vs_to_es res @ [$Return] @ es_c) es)\n 2. \\<And>d i s vs ves e s' vs' res.\n       \\<lbrakk>\\<And>x41 x42 x43 s' vs' res.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43;\n                    run_step d i (s, vs, x43) =\n                    (s', vs', RSReturn res)\\<rbrakk>\n                   \\<Longrightarrow> s = s' \\<and>\n                                     vs = vs' \\<and>\n                                     (\\<exists>n lfilled es_c.\n   Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) x43);\n        \\<And>x51 x52 x53 x54 nat s' vs' res.\n           \\<lbrakk>e = Local x51 x52 x53 x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat;\n            run_step nat x52 (s, x53, x54) =\n            (s', vs', RSReturn res)\\<rbrakk>\n           \\<Longrightarrow> s = s' \\<and>\n                             x53 = vs' \\<and>\n                             (\\<exists>n lfilled es_c.\n                                 Lfilled_exact n lfilled\n                                  (vs_to_es res @ [$Return] @ es_c) x54);\n        run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\\<rbrakk>\n       \\<Longrightarrow> s = s' \\<and>\n                         vs = vs' \\<and>\n                         (res = ves \\<and> e = $Return \\<or>\n                          (\\<exists>n lfilled ves es_c es n' les'.\n                              Lfilled_exact n lfilled\n                               (vs_to_es res @ [$Return] @ es_c) es \\<and>\n                              e = Label n' les' es))", "then"], ["proof (chain)\npicking this:\n  split_vals_e es = (ves, es')", "obtain a as where es'_def:\"es' = a#as\""], ["proof (prove)\nusing this:\n  split_vals_e es = (ves, es')\n\ngoal (1 subgoal):\n 1. (\\<And>a as. es' = a # as \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 1(2)"], ["proof (prove)\nusing this:\n  split_vals_e es = (ves, es')\n  run_step d i (s, vs, es) = (s', vs', RSReturn res)\n\ngoal (1 subgoal):\n 1. (\\<And>a as. es' = a # as \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases es') auto"], ["proof (state)\nthis:\n  es' = a # as\n\ngoal (2 subgoals):\n 1. \\<And>d i s vs es s' vs' res.\n       \\<lbrakk>\\<And>x xa y x21 x22 s' vs' res.\n                   \\<lbrakk>x = split_vals_e es; (xa, y) = x; y = x21 # x22;\n                    \\<not> e_is_trap x21;\n                    run_one_step d i (s, vs, rev xa, x21) =\n                    (s', vs', RSReturn res)\\<rbrakk>\n                   \\<Longrightarrow> s = s' \\<and>\n                                     vs = vs' \\<and>\n                                     (res = rev xa \\<and>\nx21 = $Return \\<or>\n(\\<exists>n lfilled ves es_c es n' les'.\n    Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n    x21 = Label n' les' es));\n        run_step d i (s, vs, es) = (s', vs', RSReturn res)\\<rbrakk>\n       \\<Longrightarrow> s = s' \\<and>\n                         vs = vs' \\<and>\n                         (\\<exists>n lfilled es_c.\n                             Lfilled_exact n lfilled\n                              (vs_to_es res @ [$Return] @ es_c) es)\n 2. \\<And>d i s vs ves e s' vs' res.\n       \\<lbrakk>\\<And>x41 x42 x43 s' vs' res.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43;\n                    run_step d i (s, vs, x43) =\n                    (s', vs', RSReturn res)\\<rbrakk>\n                   \\<Longrightarrow> s = s' \\<and>\n                                     vs = vs' \\<and>\n                                     (\\<exists>n lfilled es_c.\n   Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) x43);\n        \\<And>x51 x52 x53 x54 nat s' vs' res.\n           \\<lbrakk>e = Local x51 x52 x53 x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat;\n            run_step nat x52 (s, x53, x54) =\n            (s', vs', RSReturn res)\\<rbrakk>\n           \\<Longrightarrow> s = s' \\<and>\n                             x53 = vs' \\<and>\n                             (\\<exists>n lfilled es_c.\n                                 Lfilled_exact n lfilled\n                                  (vs_to_es res @ [$Return] @ es_c) x54);\n        run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\\<rbrakk>\n       \\<Longrightarrow> s = s' \\<and>\n                         vs = vs' \\<and>\n                         (res = ves \\<and> e = $Return \\<or>\n                          (\\<exists>n lfilled ves es_c es n' les'.\n                              Lfilled_exact n lfilled\n                               (vs_to_es res @ [$Return] @ es_c) es \\<and>\n                              e = Label n' les' es))", "hence a_def:\"\\<not> e_is_trap a\""], ["proof (prove)\nusing this:\n  es' = a # as\n\ngoal (1 subgoal):\n 1. \\<not> e_is_trap a", "using 1(2) split_vals_es"], ["proof (prove)\nusing this:\n  es' = a # as\n  run_step d i (s, vs, es) = (s', vs', RSReturn res)\n  split_vals_e es = (ves, es')\n\ngoal (1 subgoal):\n 1. \\<not> e_is_trap a", "by (cases \"a = Trap\"; cases \"(as \\<noteq> [] \\<or> ves \\<noteq> [])\") simp_all"], ["proof (state)\nthis:\n  \\<not> e_is_trap a\n\ngoal (2 subgoals):\n 1. \\<And>d i s vs es s' vs' res.\n       \\<lbrakk>\\<And>x xa y x21 x22 s' vs' res.\n                   \\<lbrakk>x = split_vals_e es; (xa, y) = x; y = x21 # x22;\n                    \\<not> e_is_trap x21;\n                    run_one_step d i (s, vs, rev xa, x21) =\n                    (s', vs', RSReturn res)\\<rbrakk>\n                   \\<Longrightarrow> s = s' \\<and>\n                                     vs = vs' \\<and>\n                                     (res = rev xa \\<and>\nx21 = $Return \\<or>\n(\\<exists>n lfilled ves es_c es n' les'.\n    Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n    x21 = Label n' les' es));\n        run_step d i (s, vs, es) = (s', vs', RSReturn res)\\<rbrakk>\n       \\<Longrightarrow> s = s' \\<and>\n                         vs = vs' \\<and>\n                         (\\<exists>n lfilled es_c.\n                             Lfilled_exact n lfilled\n                              (vs_to_es res @ [$Return] @ es_c) es)\n 2. \\<And>d i s vs ves e s' vs' res.\n       \\<lbrakk>\\<And>x41 x42 x43 s' vs' res.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43;\n                    run_step d i (s, vs, x43) =\n                    (s', vs', RSReturn res)\\<rbrakk>\n                   \\<Longrightarrow> s = s' \\<and>\n                                     vs = vs' \\<and>\n                                     (\\<exists>n lfilled es_c.\n   Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) x43);\n        \\<And>x51 x52 x53 x54 nat s' vs' res.\n           \\<lbrakk>e = Local x51 x52 x53 x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat;\n            run_step nat x52 (s, x53, x54) =\n            (s', vs', RSReturn res)\\<rbrakk>\n           \\<Longrightarrow> s = s' \\<and>\n                             x53 = vs' \\<and>\n                             (\\<exists>n lfilled es_c.\n                                 Lfilled_exact n lfilled\n                                  (vs_to_es res @ [$Return] @ es_c) x54);\n        run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\\<rbrakk>\n       \\<Longrightarrow> s = s' \\<and>\n                         vs = vs' \\<and>\n                         (res = ves \\<and> e = $Return \\<or>\n                          (\\<exists>n lfilled ves es_c es n' les'.\n                              Lfilled_exact n lfilled\n                               (vs_to_es res @ [$Return] @ es_c) es \\<and>\n                              e = Label n' les' es))", "obtain s'' vs'' res'' where \"run_one_step d i (s,vs,(rev ves),a) = (s'', vs'', res'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s'' vs'' res''.\n        run_one_step d i (s, vs, rev ves, a) =\n        (s'', vs'', res'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  run_one_step d i (s, vs, rev ves, a) = (s'', vs'', res'')\n\ngoal (2 subgoals):\n 1. \\<And>d i s vs es s' vs' res.\n       \\<lbrakk>\\<And>x xa y x21 x22 s' vs' res.\n                   \\<lbrakk>x = split_vals_e es; (xa, y) = x; y = x21 # x22;\n                    \\<not> e_is_trap x21;\n                    run_one_step d i (s, vs, rev xa, x21) =\n                    (s', vs', RSReturn res)\\<rbrakk>\n                   \\<Longrightarrow> s = s' \\<and>\n                                     vs = vs' \\<and>\n                                     (res = rev xa \\<and>\nx21 = $Return \\<or>\n(\\<exists>n lfilled ves es_c es n' les'.\n    Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n    x21 = Label n' les' es));\n        run_step d i (s, vs, es) = (s', vs', RSReturn res)\\<rbrakk>\n       \\<Longrightarrow> s = s' \\<and>\n                         vs = vs' \\<and>\n                         (\\<exists>n lfilled es_c.\n                             Lfilled_exact n lfilled\n                              (vs_to_es res @ [$Return] @ es_c) es)\n 2. \\<And>d i s vs ves e s' vs' res.\n       \\<lbrakk>\\<And>x41 x42 x43 s' vs' res.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43;\n                    run_step d i (s, vs, x43) =\n                    (s', vs', RSReturn res)\\<rbrakk>\n                   \\<Longrightarrow> s = s' \\<and>\n                                     vs = vs' \\<and>\n                                     (\\<exists>n lfilled es_c.\n   Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) x43);\n        \\<And>x51 x52 x53 x54 nat s' vs' res.\n           \\<lbrakk>e = Local x51 x52 x53 x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat;\n            run_step nat x52 (s, x53, x54) =\n            (s', vs', RSReturn res)\\<rbrakk>\n           \\<Longrightarrow> s = s' \\<and>\n                             x53 = vs' \\<and>\n                             (\\<exists>n lfilled es_c.\n                                 Lfilled_exact n lfilled\n                                  (vs_to_es res @ [$Return] @ es_c) x54);\n        run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\\<rbrakk>\n       \\<Longrightarrow> s = s' \\<and>\n                         vs = vs' \\<and>\n                         (res = ves \\<and> e = $Return \\<or>\n                          (\\<exists>n lfilled ves es_c es n' les'.\n                              Lfilled_exact n lfilled\n                               (vs_to_es res @ [$Return] @ es_c) es \\<and>\n                              e = Label n' les' es))", "hence ros_def:\"run_one_step d i (s,vs,(rev ves),a) = (s', vs', RSReturn res)\""], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, rev ves, a) = (s'', vs'', res'')\n\ngoal (1 subgoal):\n 1. run_one_step d i (s, vs, rev ves, a) = (s', vs', RSReturn res)", "using 1(2) split_vals_es es'_def a_def"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, rev ves, a) = (s'', vs'', res'')\n  run_step d i (s, vs, es) = (s', vs', RSReturn res)\n  split_vals_e es = (ves, es')\n  es' = a # as\n  \\<not> e_is_trap a\n\ngoal (1 subgoal):\n 1. run_one_step d i (s, vs, rev ves, a) = (s', vs', RSReturn res)", "by (cases \"res''\") (auto simp del: run_one_step.simps)"], ["proof (state)\nthis:\n  run_one_step d i (s, vs, rev ves, a) = (s', vs', RSReturn res)\n\ngoal (2 subgoals):\n 1. \\<And>d i s vs es s' vs' res.\n       \\<lbrakk>\\<And>x xa y x21 x22 s' vs' res.\n                   \\<lbrakk>x = split_vals_e es; (xa, y) = x; y = x21 # x22;\n                    \\<not> e_is_trap x21;\n                    run_one_step d i (s, vs, rev xa, x21) =\n                    (s', vs', RSReturn res)\\<rbrakk>\n                   \\<Longrightarrow> s = s' \\<and>\n                                     vs = vs' \\<and>\n                                     (res = rev xa \\<and>\nx21 = $Return \\<or>\n(\\<exists>n lfilled ves es_c es n' les'.\n    Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n    x21 = Label n' les' es));\n        run_step d i (s, vs, es) = (s', vs', RSReturn res)\\<rbrakk>\n       \\<Longrightarrow> s = s' \\<and>\n                         vs = vs' \\<and>\n                         (\\<exists>n lfilled es_c.\n                             Lfilled_exact n lfilled\n                              (vs_to_es res @ [$Return] @ es_c) es)\n 2. \\<And>d i s vs ves e s' vs' res.\n       \\<lbrakk>\\<And>x41 x42 x43 s' vs' res.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43;\n                    run_step d i (s, vs, x43) =\n                    (s', vs', RSReturn res)\\<rbrakk>\n                   \\<Longrightarrow> s = s' \\<and>\n                                     vs = vs' \\<and>\n                                     (\\<exists>n lfilled es_c.\n   Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) x43);\n        \\<And>x51 x52 x53 x54 nat s' vs' res.\n           \\<lbrakk>e = Local x51 x52 x53 x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat;\n            run_step nat x52 (s, x53, x54) =\n            (s', vs', RSReturn res)\\<rbrakk>\n           \\<Longrightarrow> s = s' \\<and>\n                             x53 = vs' \\<and>\n                             (\\<exists>n lfilled es_c.\n                                 Lfilled_exact n lfilled\n                                  (vs_to_es res @ [$Return] @ es_c) x54);\n        run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\\<rbrakk>\n       \\<Longrightarrow> s = s' \\<and>\n                         vs = vs' \\<and>\n                         (res = ves \\<and> e = $Return \\<or>\n                          (\\<exists>n lfilled ves es_c es n' les'.\n                              Lfilled_exact n lfilled\n                               (vs_to_es res @ [$Return] @ es_c) es \\<and>\n                              e = Label n' les' es))", "obtain n lfilled les_c les n' les' where\n      \"s = s'\" \"vs = vs'\"\n      \"(res = rev ves \\<and> a = $Return) \\<or> (Lfilled_exact n lfilled ((vs_to_es res) @ [$Return] @ les_c) les \\<and> a = Label n' les' les)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n lfilled les_c les n' les'.\n        \\<lbrakk>s = s'; vs = vs';\n         res = rev ves \\<and> a = $Return \\<or>\n         Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ les_c)\n          les \\<and>\n         a = Label n' les' les\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 1(1)[OF split_vals_es[symmetric] _ es'_def a_def ros_def]"], ["proof (prove)\nusing this:\n  (ves, es') = (ves, es') \\<Longrightarrow>\n  s = s' \\<and>\n  vs = vs' \\<and>\n  (res = rev ves \\<and> a = $Return \\<or>\n   (\\<exists>n lfilled ves es_c es n' les'.\n       Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n       a = Label n' les' es))\n\ngoal (1 subgoal):\n 1. (\\<And>n lfilled les_c les n' les'.\n        \\<lbrakk>s = s'; vs = vs';\n         res = rev ves \\<and> a = $Return \\<or>\n         Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ les_c)\n          les \\<and>\n         a = Label n' les' les\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  s = s'\n  vs = vs'\n  res = rev ves \\<and> a = $Return \\<or>\n  Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ les_c) les \\<and>\n  a = Label n' les' les\n\ngoal (2 subgoals):\n 1. \\<And>d i s vs es s' vs' res.\n       \\<lbrakk>\\<And>x xa y x21 x22 s' vs' res.\n                   \\<lbrakk>x = split_vals_e es; (xa, y) = x; y = x21 # x22;\n                    \\<not> e_is_trap x21;\n                    run_one_step d i (s, vs, rev xa, x21) =\n                    (s', vs', RSReturn res)\\<rbrakk>\n                   \\<Longrightarrow> s = s' \\<and>\n                                     vs = vs' \\<and>\n                                     (res = rev xa \\<and>\nx21 = $Return \\<or>\n(\\<exists>n lfilled ves es_c es n' les'.\n    Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n    x21 = Label n' les' es));\n        run_step d i (s, vs, es) = (s', vs', RSReturn res)\\<rbrakk>\n       \\<Longrightarrow> s = s' \\<and>\n                         vs = vs' \\<and>\n                         (\\<exists>n lfilled es_c.\n                             Lfilled_exact n lfilled\n                              (vs_to_es res @ [$Return] @ es_c) es)\n 2. \\<And>d i s vs ves e s' vs' res.\n       \\<lbrakk>\\<And>x41 x42 x43 s' vs' res.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43;\n                    run_step d i (s, vs, x43) =\n                    (s', vs', RSReturn res)\\<rbrakk>\n                   \\<Longrightarrow> s = s' \\<and>\n                                     vs = vs' \\<and>\n                                     (\\<exists>n lfilled es_c.\n   Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) x43);\n        \\<And>x51 x52 x53 x54 nat s' vs' res.\n           \\<lbrakk>e = Local x51 x52 x53 x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat;\n            run_step nat x52 (s, x53, x54) =\n            (s', vs', RSReturn res)\\<rbrakk>\n           \\<Longrightarrow> s = s' \\<and>\n                             x53 = vs' \\<and>\n                             (\\<exists>n lfilled es_c.\n                                 Lfilled_exact n lfilled\n                                  (vs_to_es res @ [$Return] @ es_c) x54);\n        run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\\<rbrakk>\n       \\<Longrightarrow> s = s' \\<and>\n                         vs = vs' \\<and>\n                         (res = ves \\<and> e = $Return \\<or>\n                          (\\<exists>n lfilled ves es_c es n' les'.\n                              Lfilled_exact n lfilled\n                               (vs_to_es res @ [$Return] @ es_c) es \\<and>\n                              e = Label n' les' es))", "then"], ["proof (chain)\npicking this:\n  s = s'\n  vs = vs'\n  res = rev ves \\<and> a = $Return \\<or>\n  Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ les_c) les \\<and>\n  a = Label n' les' les", "consider\n      (1) \"s = s'\" \"vs = vs'\" \"res = rev ves\" \"a = $Return\"\n    | (2) \"s = s'\" \"vs = vs'\" \"(Lfilled_exact n lfilled ((vs_to_es res) @ [$Return] @ les_c) les)\" \"(a = Label n' les' les)\""], ["proof (prove)\nusing this:\n  s = s'\n  vs = vs'\n  res = rev ves \\<and> a = $Return \\<or>\n  Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ les_c) les \\<and>\n  a = Label n' les' les\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>s = s'; vs = vs'; res = rev ves; a = $Return\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<lbrakk>s = s'; vs = vs';\n      Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ les_c) les;\n      a = Label n' les' les\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>\\<lbrakk>s = s'; vs = vs'; res = rev ves; a = $Return\\<rbrakk>\n           \\<Longrightarrow> ?thesis;\n   \\<lbrakk>s = s'; vs = vs';\n    Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ les_c) les;\n    a = Label n' les' les\\<rbrakk>\n   \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (2 subgoals):\n 1. \\<And>d i s vs es s' vs' res.\n       \\<lbrakk>\\<And>x xa y x21 x22 s' vs' res.\n                   \\<lbrakk>x = split_vals_e es; (xa, y) = x; y = x21 # x22;\n                    \\<not> e_is_trap x21;\n                    run_one_step d i (s, vs, rev xa, x21) =\n                    (s', vs', RSReturn res)\\<rbrakk>\n                   \\<Longrightarrow> s = s' \\<and>\n                                     vs = vs' \\<and>\n                                     (res = rev xa \\<and>\nx21 = $Return \\<or>\n(\\<exists>n lfilled ves es_c es n' les'.\n    Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n    x21 = Label n' les' es));\n        run_step d i (s, vs, es) = (s', vs', RSReturn res)\\<rbrakk>\n       \\<Longrightarrow> s = s' \\<and>\n                         vs = vs' \\<and>\n                         (\\<exists>n lfilled es_c.\n                             Lfilled_exact n lfilled\n                              (vs_to_es res @ [$Return] @ es_c) es)\n 2. \\<And>d i s vs ves e s' vs' res.\n       \\<lbrakk>\\<And>x41 x42 x43 s' vs' res.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43;\n                    run_step d i (s, vs, x43) =\n                    (s', vs', RSReturn res)\\<rbrakk>\n                   \\<Longrightarrow> s = s' \\<and>\n                                     vs = vs' \\<and>\n                                     (\\<exists>n lfilled es_c.\n   Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) x43);\n        \\<And>x51 x52 x53 x54 nat s' vs' res.\n           \\<lbrakk>e = Local x51 x52 x53 x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat;\n            run_step nat x52 (s, x53, x54) =\n            (s', vs', RSReturn res)\\<rbrakk>\n           \\<Longrightarrow> s = s' \\<and>\n                             x53 = vs' \\<and>\n                             (\\<exists>n lfilled es_c.\n                                 Lfilled_exact n lfilled\n                                  (vs_to_es res @ [$Return] @ es_c) x54);\n        run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\\<rbrakk>\n       \\<Longrightarrow> s = s' \\<and>\n                         vs = vs' \\<and>\n                         (res = ves \\<and> e = $Return \\<or>\n                          (\\<exists>n lfilled ves es_c es n' les'.\n                              Lfilled_exact n lfilled\n                               (vs_to_es res @ [$Return] @ es_c) es \\<and>\n                              e = Label n' les' es))", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<lbrakk>s = s'; vs = vs'; res = rev ves; a = $Return\\<rbrakk>\n           \\<Longrightarrow> ?thesis;\n   \\<lbrakk>s = s'; vs = vs';\n    Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ les_c) les;\n    a = Label n' les' les\\<rbrakk>\n   \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (\\<exists>n lfilled es_c.\n        Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>s = s'; vs = vs'; res = rev ves; a = $Return\\<rbrakk>\n    \\<Longrightarrow> s = s' \\<and>\n                      vs = vs' \\<and>\n                      (\\<exists>n lfilled es_c.\n                          Lfilled_exact n lfilled\n                           (vs_to_es res @ [$Return] @ es_c) es)\n 2. \\<lbrakk>s = s'; vs = vs';\n     Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ les_c) les;\n     a = Label n' les' les\\<rbrakk>\n    \\<Longrightarrow> s = s' \\<and>\n                      vs = vs' \\<and>\n                      (\\<exists>n lfilled es_c.\n                          Lfilled_exact n lfilled\n                           (vs_to_es res @ [$Return] @ es_c) es)", "case 1"], ["proof (state)\nthis:\n  s = s'\n  vs = vs'\n  res = rev ves\n  a = $Return\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s = s'; vs = vs'; res = rev ves; a = $Return\\<rbrakk>\n    \\<Longrightarrow> s = s' \\<and>\n                      vs = vs' \\<and>\n                      (\\<exists>n lfilled es_c.\n                          Lfilled_exact n lfilled\n                           (vs_to_es res @ [$Return] @ es_c) es)\n 2. \\<lbrakk>s = s'; vs = vs';\n     Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ les_c) les;\n     a = Label n' les' les\\<rbrakk>\n    \\<Longrightarrow> s = s' \\<and>\n                      vs = vs' \\<and>\n                      (\\<exists>n lfilled es_c.\n                          Lfilled_exact n lfilled\n                           (vs_to_es res @ [$Return] @ es_c) es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  s = s'\n  vs = vs'\n  res = rev ves\n  a = $Return\n\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (\\<exists>n lfilled es_c.\n        Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es)", "using es'_def split_vals_e_conv_app[OF split_vals_es] Lfilled_exact.intros(1) is_const_list[of _ ves]"], ["proof (prove)\nusing this:\n  s = s'\n  vs = vs'\n  res = rev ves\n  a = $Return\n  es' = a # as\n  es = ($$* ves) @ es'\n  ?lholed = LBase [] [] \\<Longrightarrow> Lfilled_exact 0 ?lholed ?es ?es\n  ?ves = $$* ves \\<Longrightarrow> const_list ?ves\n\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (\\<exists>n lfilled es_c.\n        Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es)", "by fastforce"], ["proof (state)\nthis:\n  s = s' \\<and>\n  vs = vs' \\<and>\n  (\\<exists>n lfilled es_c.\n      Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s = s'; vs = vs';\n     Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ les_c) les;\n     a = Label n' les' les\\<rbrakk>\n    \\<Longrightarrow> s = s' \\<and>\n                      vs = vs' \\<and>\n                      (\\<exists>n lfilled es_c.\n                          Lfilled_exact n lfilled\n                           (vs_to_es res @ [$Return] @ es_c) es)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>s = s'; vs = vs';\n     Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ les_c) les;\n     a = Label n' les' les\\<rbrakk>\n    \\<Longrightarrow> s = s' \\<and>\n                      vs = vs' \\<and>\n                      (\\<exists>n lfilled es_c.\n                          Lfilled_exact n lfilled\n                           (vs_to_es res @ [$Return] @ es_c) es)", "case 2"], ["proof (state)\nthis:\n  s = s'\n  vs = vs'\n  Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ les_c) les\n  a = Label n' les' les\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s = s'; vs = vs';\n     Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ les_c) les;\n     a = Label n' les' les\\<rbrakk>\n    \\<Longrightarrow> s = s' \\<and>\n                      vs = vs' \\<and>\n                      (\\<exists>n lfilled es_c.\n                          Lfilled_exact n lfilled\n                           (vs_to_es res @ [$Return] @ es_c) es)", "have \"const_list ($$* ves)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. const_list ($$* ves)", "using is_const_list"], ["proof (prove)\nusing this:\n  ?ves = $$* ?vs \\<Longrightarrow> const_list ?ves\n\ngoal (1 subgoal):\n 1. const_list ($$* ves)", "by fastforce"], ["proof (state)\nthis:\n  const_list ($$* ves)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s = s'; vs = vs';\n     Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ les_c) les;\n     a = Label n' les' les\\<rbrakk>\n    \\<Longrightarrow> s = s' \\<and>\n                      vs = vs' \\<and>\n                      (\\<exists>n lfilled es_c.\n                          Lfilled_exact n lfilled\n                           (vs_to_es res @ [$Return] @ es_c) es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  const_list ($$* ves)\n\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (\\<exists>n lfilled es_c.\n        Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es)", "using 2 Lfilled_exact.intros(2) es'_def split_vals_e_conv_app[OF split_vals_es]"], ["proof (prove)\nusing this:\n  const_list ($$* ves)\n  s = s'\n  vs = vs'\n  Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ les_c) les\n  a = Label n' les' les\n  \\<lbrakk>const_list ?vs; ?lholed = LRec ?vs ?n ?es' ?l ?es'';\n   Lfilled_exact ?k ?l ?es ?lfilledk\\<rbrakk>\n  \\<Longrightarrow> Lfilled_exact (?k + 1) ?lholed ?es\n                     (?vs @ [Label ?n ?es' ?lfilledk] @ ?es'')\n  es' = a # as\n  es = ($$* ves) @ es'\n\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (\\<exists>n lfilled es_c.\n        Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es)", "by fastforce"], ["proof (state)\nthis:\n  s = s' \\<and>\n  vs = vs' \\<and>\n  (\\<exists>n lfilled es_c.\n      Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s = s' \\<and>\n  vs = vs' \\<and>\n  (\\<exists>n lfilled es_c.\n      Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es)\n\ngoal (1 subgoal):\n 1. \\<And>d i s vs ves e s' vs' res.\n       \\<lbrakk>\\<And>x41 x42 x43 s' vs' res.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43;\n                    run_step d i (s, vs, x43) =\n                    (s', vs', RSReturn res)\\<rbrakk>\n                   \\<Longrightarrow> s = s' \\<and>\n                                     vs = vs' \\<and>\n                                     (\\<exists>n lfilled es_c.\n   Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) x43);\n        \\<And>x51 x52 x53 x54 nat s' vs' res.\n           \\<lbrakk>e = Local x51 x52 x53 x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat;\n            run_step nat x52 (s, x53, x54) =\n            (s', vs', RSReturn res)\\<rbrakk>\n           \\<Longrightarrow> s = s' \\<and>\n                             x53 = vs' \\<and>\n                             (\\<exists>n lfilled es_c.\n                                 Lfilled_exact n lfilled\n                                  (vs_to_es res @ [$Return] @ es_c) x54);\n        run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\\<rbrakk>\n       \\<Longrightarrow> s = s' \\<and>\n                         vs = vs' \\<and>\n                         (res = ves \\<and> e = $Return \\<or>\n                          (\\<exists>n lfilled ves es_c es n' les'.\n                              Lfilled_exact n lfilled\n                               (vs_to_es res @ [$Return] @ es_c) es \\<and>\n                              e = Label n' les' es))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d i s vs ves e s' vs' res.\n       \\<lbrakk>\\<And>x41 x42 x43 s' vs' res.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43;\n                    run_step d i (s, vs, x43) =\n                    (s', vs', RSReturn res)\\<rbrakk>\n                   \\<Longrightarrow> s = s' \\<and>\n                                     vs = vs' \\<and>\n                                     (\\<exists>n lfilled es_c.\n   Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) x43);\n        \\<And>x51 x52 x53 x54 nat s' vs' res.\n           \\<lbrakk>e = Local x51 x52 x53 x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat;\n            run_step nat x52 (s, x53, x54) =\n            (s', vs', RSReturn res)\\<rbrakk>\n           \\<Longrightarrow> s = s' \\<and>\n                             x53 = vs' \\<and>\n                             (\\<exists>n lfilled es_c.\n                                 Lfilled_exact n lfilled\n                                  (vs_to_es res @ [$Return] @ es_c) x54);\n        run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\\<rbrakk>\n       \\<Longrightarrow> s = s' \\<and>\n                         vs = vs' \\<and>\n                         (res = ves \\<and> e = $Return \\<or>\n                          (\\<exists>n lfilled ves es_c es n' les'.\n                              Lfilled_exact n lfilled\n                               (vs_to_es res @ [$Return] @ es_c) es \\<and>\n                              e = Label n' les' es))", "case (2 d i s vs ves e s' vs')"], ["proof (state)\nthis:\n  \\<lbrakk>e = Label ?x41.0 ?x42.0 ?x43.0; \\<not> es_is_trap ?x43.0;\n   \\<not> const_list ?x43.0;\n   run_step d i (s, vs, ?x43.0) = (?s', ?vs', RSReturn ?res)\\<rbrakk>\n  \\<Longrightarrow> s = ?s' \\<and>\n                    vs = ?vs' \\<and>\n                    (\\<exists>n lfilled es_c.\n                        Lfilled_exact n lfilled\n                         (vs_to_es ?res @ [$Return] @ es_c) ?x43.0)\n  \\<lbrakk>e = Local ?x51.0 ?x52.0 ?x53.0 ?x54.0; \\<not> es_is_trap ?x54.0;\n   \\<not> const_list ?x54.0; d = Suc ?nat;\n   run_step ?nat ?x52.0 (s, ?x53.0, ?x54.0) =\n   (?s', ?vs', RSReturn ?res)\\<rbrakk>\n  \\<Longrightarrow> s = ?s' \\<and>\n                    ?x53.0 = ?vs' \\<and>\n                    (\\<exists>n lfilled es_c.\n                        Lfilled_exact n lfilled\n                         (vs_to_es ?res @ [$Return] @ es_c) ?x54.0)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n\ngoal (1 subgoal):\n 1. \\<And>d i s vs ves e s' vs' res.\n       \\<lbrakk>\\<And>x41 x42 x43 s' vs' res.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43;\n                    run_step d i (s, vs, x43) =\n                    (s', vs', RSReturn res)\\<rbrakk>\n                   \\<Longrightarrow> s = s' \\<and>\n                                     vs = vs' \\<and>\n                                     (\\<exists>n lfilled es_c.\n   Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) x43);\n        \\<And>x51 x52 x53 x54 nat s' vs' res.\n           \\<lbrakk>e = Local x51 x52 x53 x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat;\n            run_step nat x52 (s, x53, x54) =\n            (s', vs', RSReturn res)\\<rbrakk>\n           \\<Longrightarrow> s = s' \\<and>\n                             x53 = vs' \\<and>\n                             (\\<exists>n lfilled es_c.\n                                 Lfilled_exact n lfilled\n                                  (vs_to_es res @ [$Return] @ es_c) x54);\n        run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\\<rbrakk>\n       \\<Longrightarrow> s = s' \\<and>\n                         vs = vs' \\<and>\n                         (res = ves \\<and> e = $Return \\<or>\n                          (\\<exists>n lfilled ves es_c es n' les'.\n                              Lfilled_exact n lfilled\n                               (vs_to_es res @ [$Return] @ es_c) es \\<and>\n                              e = Label n' les' es))", "consider (a) \"e = $Return\" | (b) \"(\\<exists>n les es. e = Label n les es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>e = $Return \\<Longrightarrow> thesis;\n     \\<exists>n les es. e = Label n les es \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using run_one_step_return[OF 2(3)]"], ["proof (prove)\nusing this:\n  e = $Return \\<or> (\\<exists>n les es. e = Label n les es)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>e = $Return \\<Longrightarrow> thesis;\n     \\<exists>n les es. e = Label n les es \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>e = $Return \\<Longrightarrow> ?thesis;\n   \\<exists>n les es. e = Label n les es \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<And>d i s vs ves e s' vs' res.\n       \\<lbrakk>\\<And>x41 x42 x43 s' vs' res.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43;\n                    run_step d i (s, vs, x43) =\n                    (s', vs', RSReturn res)\\<rbrakk>\n                   \\<Longrightarrow> s = s' \\<and>\n                                     vs = vs' \\<and>\n                                     (\\<exists>n lfilled es_c.\n   Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) x43);\n        \\<And>x51 x52 x53 x54 nat s' vs' res.\n           \\<lbrakk>e = Local x51 x52 x53 x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat;\n            run_step nat x52 (s, x53, x54) =\n            (s', vs', RSReturn res)\\<rbrakk>\n           \\<Longrightarrow> s = s' \\<and>\n                             x53 = vs' \\<and>\n                             (\\<exists>n lfilled es_c.\n                                 Lfilled_exact n lfilled\n                                  (vs_to_es res @ [$Return] @ es_c) x54);\n        run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\\<rbrakk>\n       \\<Longrightarrow> s = s' \\<and>\n                         vs = vs' \\<and>\n                         (res = ves \\<and> e = $Return \\<or>\n                          (\\<exists>n lfilled ves es_c es n' les'.\n                              Lfilled_exact n lfilled\n                               (vs_to_es res @ [$Return] @ es_c) es \\<and>\n                              e = Label n' les' es))", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>e = $Return \\<Longrightarrow> ?thesis;\n   \\<exists>n les es. e = Label n les es \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Return \\<or>\n     (\\<exists>n lfilled ves es_c es n' les'.\n         Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n         e = Label n' les' es))", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. e = $Return \\<Longrightarrow>\n    s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Return \\<or>\n     (\\<exists>n lfilled ves es_c es n' les'.\n         Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n         e = Label n' les' es))\n 2. \\<exists>n les es. e = Label n les es \\<Longrightarrow>\n    s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Return \\<or>\n     (\\<exists>n lfilled ves es_c es n' les'.\n         Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n         e = Label n' les' es))", "case a"], ["proof (state)\nthis:\n  e = $Return\n\ngoal (2 subgoals):\n 1. e = $Return \\<Longrightarrow>\n    s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Return \\<or>\n     (\\<exists>n lfilled ves es_c es n' les'.\n         Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n         e = Label n' les' es))\n 2. \\<exists>n les es. e = Label n les es \\<Longrightarrow>\n    s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Return \\<or>\n     (\\<exists>n lfilled ves es_c es n' les'.\n         Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n         e = Label n' les' es))", "thus ?thesis"], ["proof (prove)\nusing this:\n  e = $Return\n\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Return \\<or>\n     (\\<exists>n lfilled ves es_c es n' les'.\n         Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n         e = Label n' les' es))", "using 2(3)"], ["proof (prove)\nusing this:\n  e = $Return\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Return \\<or>\n     (\\<exists>n lfilled ves es_c es n' les'.\n         Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n         e = Label n' les' es))", "by simp"], ["proof (state)\nthis:\n  s = s' \\<and>\n  vs = vs' \\<and>\n  (res = ves \\<and> e = $Return \\<or>\n   (\\<exists>n lfilled ves es_c es n' les'.\n       Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n       e = Label n' les' es))\n\ngoal (1 subgoal):\n 1. \\<exists>n les es. e = Label n les es \\<Longrightarrow>\n    s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Return \\<or>\n     (\\<exists>n lfilled ves es_c es n' les'.\n         Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n         e = Label n' les' es))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n les es. e = Label n les es \\<Longrightarrow>\n    s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Return \\<or>\n     (\\<exists>n lfilled ves es_c es n' les'.\n         Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n         e = Label n' les' es))", "case b"], ["proof (state)\nthis:\n  \\<exists>n les es. e = Label n les es\n\ngoal (1 subgoal):\n 1. \\<exists>n les es. e = Label n les es \\<Longrightarrow>\n    s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Return \\<or>\n     (\\<exists>n lfilled ves es_c es n' les'.\n         Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n         e = Label n' les' es))", "then"], ["proof (chain)\npicking this:\n  \\<exists>n les es. e = Label n les es", "obtain n les es where e_def:\"e = Label n les es\""], ["proof (prove)\nusing this:\n  \\<exists>n les es. e = Label n les es\n\ngoal (1 subgoal):\n 1. (\\<And>n les es.\n        e = Label n les es \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  e = Label n les es\n\ngoal (1 subgoal):\n 1. \\<exists>n les es. e = Label n les es \\<Longrightarrow>\n    s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Return \\<or>\n     (\\<exists>n lfilled ves es_c es n' les'.\n         Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n         e = Label n' les' es))", "hence \"run_one_step d i (s, vs, ves,  Label n les es) = (s', vs', RSReturn res)\""], ["proof (prove)\nusing this:\n  e = Label n les es\n\ngoal (1 subgoal):\n 1. run_one_step d i (s, vs, ves, Label n les es) = (s', vs', RSReturn res)", "using 2(3)"], ["proof (prove)\nusing this:\n  e = Label n les es\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n\ngoal (1 subgoal):\n 1. run_one_step d i (s, vs, ves, Label n les es) = (s', vs', RSReturn res)", "by simp"], ["proof (state)\nthis:\n  run_one_step d i (s, vs, ves, Label n les es) = (s', vs', RSReturn res)\n\ngoal (1 subgoal):\n 1. \\<exists>n les es. e = Label n les es \\<Longrightarrow>\n    s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Return \\<or>\n     (\\<exists>n lfilled ves es_c es n' les'.\n         Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n         e = Label n' les' es))", "hence \"run_step d i (s, vs, es) = (s', vs', RSReturn res)\""], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, Label n les es) = (s', vs', RSReturn res)\n\ngoal (1 subgoal):\n 1. run_step d i (s, vs, es) = (s', vs', RSReturn res)", "using run_one_step_label_return_imp_return"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, Label n les es) = (s', vs', RSReturn res)\n  run_one_step ?d ?i (?s, ?vs, ?ves, Label ?n ?les ?es) =\n  (?s', ?vs', RSReturn ?res) \\<Longrightarrow>\n  run_step ?d ?i (?s, ?vs, ?es) = (?s', ?vs', RSReturn ?res)\n\ngoal (1 subgoal):\n 1. run_step d i (s, vs, es) = (s', vs', RSReturn res)", "by fastforce"], ["proof (state)\nthis:\n  run_step d i (s, vs, es) = (s', vs', RSReturn res)\n\ngoal (1 subgoal):\n 1. \\<exists>n les es. e = Label n les es \\<Longrightarrow>\n    s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Return \\<or>\n     (\\<exists>n lfilled ves es_c es n' les'.\n         Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n         e = Label n' les' es))", "thus ?thesis"], ["proof (prove)\nusing this:\n  run_step d i (s, vs, es) = (s', vs', RSReturn res)\n\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Return \\<or>\n     (\\<exists>n lfilled ves es_c es n' les'.\n         Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n         e = Label n' les' es))", "using 2(3) 2(1)[OF e_def _ run_step_return_imp_not_trap_const_list(2)] e_def"], ["proof (prove)\nusing this:\n  run_step d i (s, vs, es) = (s', vs', RSReturn res)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSReturn res)\n  \\<lbrakk>\\<not> es_is_trap es;\n   run_step ?d1 ?i1 (?s1, ?vs1, es) = (?s'1, ?vs'1, RSReturn ?res1);\n   run_step d i (s, vs, es) = (?s', ?vs', RSReturn ?res)\\<rbrakk>\n  \\<Longrightarrow> s = ?s' \\<and>\n                    vs = ?vs' \\<and>\n                    (\\<exists>n lfilled es_c.\n                        Lfilled_exact n lfilled\n                         (vs_to_es ?res @ [$Return] @ es_c) es)\n  e = Label n les es\n\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (res = ves \\<and> e = $Return \\<or>\n     (\\<exists>n lfilled ves es_c es n' les'.\n         Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n         e = Label n' les' es))", "by fastforce"], ["proof (state)\nthis:\n  s = s' \\<and>\n  vs = vs' \\<and>\n  (res = ves \\<and> e = $Return \\<or>\n   (\\<exists>n lfilled ves es_c es n' les'.\n       Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n       e = Label n' les' es))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s = s' \\<and>\n  vs = vs' \\<and>\n  (res = ves \\<and> e = $Return \\<or>\n   (\\<exists>n lfilled ves es_c es n' les'.\n       Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n       e = Label n' les' es))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  run_step d i (s, vs, es) = (s', vs', RSReturn res) \\<Longrightarrow>\n  s = s' \\<and>\n  vs = vs' \\<and>\n  (\\<exists>n lfilled es_c.\n      Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es)\n  run_one_step d i (s, vs, ves, e) =\n  (s', vs', RSReturn res) \\<Longrightarrow>\n  s = s' \\<and>\n  vs = vs' \\<and>\n  (res = ves \\<and> e = $Return \\<or>\n   (\\<exists>n lfilled ves es_c es n' les'.\n       Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n       e = Label n' les' es))\n\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (\\<exists>n lfilled es_c.\n        Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es)", "thus ?thesis"], ["proof (prove)\nusing this:\n  run_step d i (s, vs, es) = (s', vs', RSReturn res) \\<Longrightarrow>\n  s = s' \\<and>\n  vs = vs' \\<and>\n  (\\<exists>n lfilled es_c.\n      Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es)\n  run_one_step d i (s, vs, ves, e) =\n  (s', vs', RSReturn res) \\<Longrightarrow>\n  s = s' \\<and>\n  vs = vs' \\<and>\n  (res = ves \\<and> e = $Return \\<or>\n   (\\<exists>n lfilled ves es_c es n' les'.\n       Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n       e = Label n' les' es))\n\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (\\<exists>n lfilled es_c.\n        Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es)", "using assms"], ["proof (prove)\nusing this:\n  run_step d i (s, vs, es) = (s', vs', RSReturn res) \\<Longrightarrow>\n  s = s' \\<and>\n  vs = vs' \\<and>\n  (\\<exists>n lfilled es_c.\n      Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es)\n  run_one_step d i (s, vs, ves, e) =\n  (s', vs', RSReturn res) \\<Longrightarrow>\n  s = s' \\<and>\n  vs = vs' \\<and>\n  (res = ves \\<and> e = $Return \\<or>\n   (\\<exists>n lfilled ves es_c es n' les'.\n       Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es \\<and>\n       e = Label n' les' es))\n  run_step d i (s, vs, es) = (s', vs', RSReturn res)\n\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    vs = vs' \\<and>\n    (\\<exists>n lfilled es_c.\n        Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es)", "by blast"], ["proof (state)\nthis:\n  s = s' \\<and>\n  vs = vs' \\<and>\n  (\\<exists>n lfilled es_c.\n      Lfilled_exact n lfilled (vs_to_es res @ [$Return] @ es_c) es)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma run_step_basic_unop_testop_sound:\n  assumes \"(run_one_step d i (s,vs,ves,$b_e) = (s', vs', RSNormal es'))\"\n          \"b_e = Unop_i t iop \\<or> b_e = Unop_f t fop \\<or> b_e = Testop t testop\"\n  shows \"\\<lparr>s;vs;(vs_to_es ves)@[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "consider (1) \"b_e = Unop_i t iop\" | (2) \"b_e = Unop_f t fop\" | (3) \"b_e = Testop t testop\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b_e = Unop_i t iop \\<Longrightarrow> thesis;\n     b_e = Unop_f t fop \\<Longrightarrow> thesis;\n     b_e = Testop t testop \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms(2)"], ["proof (prove)\nusing this:\n  b_e = Unop_i t iop \\<or> b_e = Unop_f t fop \\<or> b_e = Testop t testop\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b_e = Unop_i t iop \\<Longrightarrow> thesis;\n     b_e = Unop_f t fop \\<Longrightarrow> thesis;\n     b_e = Testop t testop \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>b_e = Unop_i t iop \\<Longrightarrow> ?thesis;\n   b_e = Unop_f t fop \\<Longrightarrow> ?thesis;\n   b_e = Testop t testop \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "note b_e_cases = this"], ["proof (state)\nthis:\n  \\<lbrakk>b_e = Unop_i t iop \\<Longrightarrow> ?thesis;\n   b_e = Unop_f t fop \\<Longrightarrow> ?thesis;\n   b_e = Testop t testop \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms(1)"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $b_e) =\n                (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $b_e) =\n                (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms(1)"], ["proof (prove)\nusing this:\n  ves = a # list\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases a; cases t)"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x3.\n        \\<lbrakk>ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         a = ConstFloat32 x3; ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         t = T_i64\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 16 subgoals...", "case (ConstInt32 x1)"], ["proof (state)\nthis:\n  a = ConstInt32 x1\n\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x3.\n        \\<lbrakk>ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         a = ConstFloat32 x3; ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         t = T_i64\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 16 subgoals...", "case T_i32"], ["proof (state)\nthis:\n  t = T_i32\n\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x3.\n        \\<lbrakk>ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         a = ConstFloat32 x3; ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         t = T_i64\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 16 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = T_i32\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms(1) Cons ConstInt32\n           is_const_list_vs_to_es_list[of \"rev list\"]\n            progress_L0_left[OF reduce.intros(1)[OF reduce_simple.intros(1)]]\n            progress_L0_left[OF reduce.intros(1)[OF reduce_simple.intros(13)]]"], ["proof (prove)\nusing this:\n  t = T_i32\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  ves = a # list\n  a = ConstInt32 x1\n  const_list (vs_to_es list)\n  const_list ?cs \\<Longrightarrow>\n  \\<lparr>?s;?vs;?cs @\n                 [$C ConstInt32 ?c2,\n                  $Unop_i T_i32\n                    ?iop2]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n                           [$C ConstInt32 (app_unop_i ?iop2 ?c2)]\\<rparr>\n  const_list ?cs \\<Longrightarrow>\n  \\<lparr>?s;?vs;?cs @\n                 [$C ConstInt32 ?c2,\n                  $Testop T_i32\n                    ?testop2]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n                              [$C ConstInt32\n                                   (wasm_bool\n                                     (app_testop_i ?testop2 ?c2))]\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by (cases rule: b_e_cases) auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x3.\n        \\<lbrakk>ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         a = ConstFloat32 x3; ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         t = T_f32\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x3.\n        \\<lbrakk>ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         a = ConstFloat32 x3; ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         t = T_f32\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 15 subgoals...", "case (ConstInt64 x2)"], ["proof (state)\nthis:\n  a = ConstInt64 x2\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x3.\n        \\<lbrakk>ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         a = ConstFloat32 x3; ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         t = T_f32\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 15 subgoals...", "case T_i64"], ["proof (state)\nthis:\n  t = T_i64\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x3.\n        \\<lbrakk>ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         a = ConstFloat32 x3; ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         t = T_f32\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 15 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = T_i64\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms(1) Cons ConstInt64\n           is_const_list_vs_to_es_list[of \"rev list\"]\n            progress_L0_left[OF reduce.intros(1)[OF reduce_simple.intros(2)]]\n            progress_L0_left[OF reduce.intros(1)[OF reduce_simple.intros(14)]]"], ["proof (prove)\nusing this:\n  t = T_i64\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  ves = a # list\n  a = ConstInt64 x2\n  const_list (vs_to_es list)\n  const_list ?cs \\<Longrightarrow>\n  \\<lparr>?s;?vs;?cs @\n                 [$C ConstInt64 ?c2,\n                  $Unop_i T_i64\n                    ?iop2]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n                           [$C ConstInt64 (app_unop_i ?iop2 ?c2)]\\<rparr>\n  const_list ?cs \\<Longrightarrow>\n  \\<lparr>?s;?vs;?cs @\n                 [$C ConstInt64 ?c2,\n                  $Testop T_i64\n                    ?testop2]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n                              [$C ConstInt32\n                                   (wasm_bool\n                                     (app_testop_i ?testop2 ?c2))]\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by (cases rule: b_e_cases) auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (14 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x3.\n        \\<lbrakk>ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         a = ConstFloat32 x3; ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         t = T_f64\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x3.\n        \\<lbrakk>ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         a = ConstFloat32 x3; ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         t = T_f64\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 14 subgoals...", "case (ConstFloat32 x3)"], ["proof (state)\nthis:\n  a = ConstFloat32 x3\n\ngoal (14 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x3.\n        \\<lbrakk>ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         a = ConstFloat32 x3; ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         t = T_f64\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 14 subgoals...", "case T_f32"], ["proof (state)\nthis:\n  t = T_f32\n\ngoal (14 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x3.\n        \\<lbrakk>ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         a = ConstFloat32 x3; ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         t = T_f64\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 14 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = T_f32\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms(1) Cons ConstFloat32\n           is_const_list_vs_to_es_list[of \"rev list\"]\n            progress_L0_left[OF reduce.intros(1)[OF reduce_simple.intros(3)]]"], ["proof (prove)\nusing this:\n  t = T_f32\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  ves = a # list\n  a = ConstFloat32 x3\n  const_list (vs_to_es list)\n  const_list ?cs \\<Longrightarrow>\n  \\<lparr>?s;?vs;?cs @\n                 [$C ConstFloat32 ?c2,\n                  $Unop_f T_f32\n                    ?fop2]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n                           [$C ConstFloat32 (app_unop_f ?fop2 ?c2)]\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by (cases rule: b_e_cases) auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (13 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x4.\n        \\<lbrakk>ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         a = ConstFloat64 x4; ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         t = T_i32\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x4.\n        \\<lbrakk>ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         a = ConstFloat64 x4; ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         t = T_i32\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 13 subgoals...", "case (ConstFloat64 x4)"], ["proof (state)\nthis:\n  a = ConstFloat64 x4\n\ngoal (13 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x4.\n        \\<lbrakk>ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         a = ConstFloat64 x4; ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         t = T_i32\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 13 subgoals...", "case T_f64"], ["proof (state)\nthis:\n  t = T_f64\n\ngoal (13 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x4.\n        \\<lbrakk>ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         a = ConstFloat64 x4; ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         t = T_i32\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 13 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = T_f64\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms(1) Cons ConstFloat64\n           is_const_list_vs_to_es_list[of \"rev list\"]\n            progress_L0_left[OF reduce.intros(1)[OF reduce_simple.intros(4)]]"], ["proof (prove)\nusing this:\n  t = T_f64\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  ves = a # list\n  a = ConstFloat64 x4\n  const_list (vs_to_es list)\n  const_list ?cs \\<Longrightarrow>\n  \\<lparr>?s;?vs;?cs @\n                 [$C ConstFloat64 ?c2,\n                  $Unop_f T_f64\n                    ?fop2]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n                           [$C ConstFloat64 (app_unop_f ?fop2 ?c2)]\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by (cases rule: b_e_cases) auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (12 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x4.\n        \\<lbrakk>ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         a = ConstFloat64 x4; ves = a # list;\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         t = T_i32\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 12 subgoals...", "qed (cases rule: b_e_cases; auto)+"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed (cases rule: b_e_cases; cases t; auto)"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma run_step_basic_binop_relop_sound:\n  assumes \"(run_one_step d i (s,vs,ves,$b_e) = (s', vs', RSNormal es'))\"\n          \"b_e = Binop_i t iop \\<or> b_e = Binop_f t fop \\<or> b_e = Relop_i t irop \\<or> b_e = Relop_f t frop\"\n  shows \"\\<lparr>s;vs;(vs_to_es ves)@[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "consider\n    (1) \"b_e = Binop_i t iop\"\n  | (2) \"b_e = Binop_f t fop\"\n  | (3) \"b_e = Relop_i t irop\"\n  | (4) \"b_e = Relop_f t frop\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b_e = Binop_i t iop \\<Longrightarrow> thesis;\n     b_e = Binop_f t fop \\<Longrightarrow> thesis;\n     b_e = Relop_i t irop \\<Longrightarrow> thesis;\n     b_e = Relop_f t frop \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms(2)"], ["proof (prove)\nusing this:\n  b_e = Binop_i t iop \\<or>\n  b_e = Binop_f t fop \\<or> b_e = Relop_i t irop \\<or> b_e = Relop_f t frop\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b_e = Binop_i t iop \\<Longrightarrow> thesis;\n     b_e = Binop_f t fop \\<Longrightarrow> thesis;\n     b_e = Relop_i t irop \\<Longrightarrow> thesis;\n     b_e = Relop_f t frop \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>b_e = Binop_i t iop \\<Longrightarrow> ?thesis;\n   b_e = Binop_f t fop \\<Longrightarrow> ?thesis;\n   b_e = Relop_i t irop \\<Longrightarrow> ?thesis;\n   b_e = Relop_f t frop \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "note b_e_cases = this"], ["proof (state)\nthis:\n  \\<lbrakk>b_e = Binop_i t iop \\<Longrightarrow> ?thesis;\n   b_e = Binop_f t fop \\<Longrightarrow> ?thesis;\n   b_e = Relop_i t irop \\<Longrightarrow> ?thesis;\n   b_e = Relop_f t frop \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms(1)"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $b_e) =\n                (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case outer_Cons:(Cons v1 list)"], ["proof (state)\nthis:\n  ves = v1 # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>run_one_step d i (s, vs, ves, $b_e) =\n                (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = v1 # list\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms(1)"], ["proof (prove)\nusing this:\n  ves = v1 # list\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases list)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ves = v1 # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     list = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a lista.\n       \\<lbrakk>ves = v1 # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = a # lista\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Cons v2 list')"], ["proof (state)\nthis:\n  list = v2 # list'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ves = v1 # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     list = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a lista.\n       \\<lbrakk>ves = v1 # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = a # lista\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  list = v2 # list'\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms(1) outer_Cons"], ["proof (prove)\nusing this:\n  list = v2 # list'\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  ves = v1 # list\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases v1; cases v2; cases t)"], ["proof (state)\ngoal (64 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x1 x3.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x1 x3.\n        \\<lbrakk>list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; t = T_i64\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 64 subgoals...", "fix c1 c2"], ["proof (state)\ngoal (64 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x1 x3.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x1 x3.\n        \\<lbrakk>list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; t = T_i64\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 64 subgoals...", "assume \"v1 = ConstInt32 c1\" and \"v2 = ConstInt32 c2\" and \"t = T_i32\""], ["proof (state)\nthis:\n  v1 = ConstInt32 c1\n  v2 = ConstInt32 c2\n  t = T_i32\n\ngoal (64 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x1 x3.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x1 x3.\n        \\<lbrakk>list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; t = T_i64\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 64 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  v1 = ConstInt32 c1\n  v2 = ConstInt32 c2\n  t = T_i32\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms(1) Cons outer_Cons\n             is_const_list_vs_to_es_list[of \"rev list'\"]\n              progress_L0_left[OF reduce.intros(1)[OF reduce_simple.intros(5)]]\n              progress_L0_left[OF reduce.intros(1)[OF reduce_simple.intros(6)]]\n              progress_L0_left[OF reduce.intros(1)[OF reduce_simple.intros(15)]]"], ["proof (prove)\nusing this:\n  v1 = ConstInt32 c1\n  v2 = ConstInt32 c2\n  t = T_i32\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  list = v2 # list'\n  ves = v1 # list\n  const_list (vs_to_es list')\n  \\<lbrakk>app_binop_i ?iop2 ?c1.2 ?c2.2 = Some ?c2; const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$C ConstInt32 ?c1.2,\n                                    $C ConstInt32 ?c2.2,\n                                    $Binop_i T_i32\n?iop2]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n       [$C ConstInt32 ?c2]\\<rparr>\n  \\<lbrakk>app_binop_i ?iop2 ?c1.2 ?c2.2 = None; const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$C ConstInt32 ?c1.2,\n                                    $C ConstInt32 ?c2.2,\n                                    $Binop_i T_i32\n?iop2]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @ [Trap]\\<rparr>\n  const_list ?cs \\<Longrightarrow>\n  \\<lparr>?s;?vs;?cs @\n                 [$C ConstInt32 ?c1.2, $C ConstInt32 ?c2.2,\n                  $Relop_i T_i32\n                    ?iop2]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n                           [$C ConstInt32\n                                (wasm_bool\n                                  (app_relop_i ?iop2 ?c1.2 ?c2.2))]\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by (cases rule: b_e_cases; cases \"app_binop_i iop c2 c1\") auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (63 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x1 x3.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x1 x3.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x1 x3.\n        \\<lbrakk>list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; t = T_f32\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 63 subgoals...", "next"], ["proof (state)\ngoal (63 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x1 x3.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x1 x3.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x1 x3.\n        \\<lbrakk>list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; t = T_f32\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 63 subgoals...", "fix c1 c2"], ["proof (state)\ngoal (63 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x1 x3.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x1 x3.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x1 x3.\n        \\<lbrakk>list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; t = T_f32\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 63 subgoals...", "assume \"v1 = ConstInt64 c1\" and \"v2 = ConstInt64 c2\" and \"t = T_i64\""], ["proof (state)\nthis:\n  v1 = ConstInt64 c1\n  v2 = ConstInt64 c2\n  t = T_i64\n\ngoal (63 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x1 x3.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x1 x3.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x1 x3.\n        \\<lbrakk>list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; t = T_f32\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 63 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  v1 = ConstInt64 c1\n  v2 = ConstInt64 c2\n  t = T_i64\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms(1) Cons outer_Cons\n             is_const_list_vs_to_es_list[of \"rev list'\"]\n              progress_L0_left[OF reduce.intros(1)[OF reduce_simple.intros(7)]]\n              progress_L0_left[OF reduce.intros(1)[OF reduce_simple.intros(8)]]\n              progress_L0_left[OF reduce.intros(1)[OF reduce_simple.intros(16)]]"], ["proof (prove)\nusing this:\n  v1 = ConstInt64 c1\n  v2 = ConstInt64 c2\n  t = T_i64\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  list = v2 # list'\n  ves = v1 # list\n  const_list (vs_to_es list')\n  \\<lbrakk>app_binop_i ?iop2 ?c1.2 ?c2.2 = Some ?c2; const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$C ConstInt64 ?c1.2,\n                                    $C ConstInt64 ?c2.2,\n                                    $Binop_i T_i64\n?iop2]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n       [$C ConstInt64 ?c2]\\<rparr>\n  \\<lbrakk>app_binop_i ?iop2 ?c1.2 ?c2.2 = None; const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$C ConstInt64 ?c1.2,\n                                    $C ConstInt64 ?c2.2,\n                                    $Binop_i T_i64\n?iop2]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @ [Trap]\\<rparr>\n  const_list ?cs \\<Longrightarrow>\n  \\<lparr>?s;?vs;?cs @\n                 [$C ConstInt64 ?c1.2, $C ConstInt64 ?c2.2,\n                  $Relop_i T_i64\n                    ?iop2]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n                           [$C ConstInt32\n                                (wasm_bool\n                                  (app_relop_i ?iop2 ?c1.2 ?c2.2))]\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by (cases rule: b_e_cases; cases \"app_binop_i iop c2 c1\") auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (62 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x1 x3.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x1 x3.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x1 x3.\n        \\<lbrakk>list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; t = T_f32\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 62 subgoals...", "next"], ["proof (state)\ngoal (62 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x1 x3.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x1 x3.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x1 x3.\n        \\<lbrakk>list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; t = T_f32\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 62 subgoals...", "fix c1 c2"], ["proof (state)\ngoal (62 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x1 x3.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x1 x3.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x1 x3.\n        \\<lbrakk>list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; t = T_f32\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 62 subgoals...", "assume \"v1 = ConstFloat32 c1\" and \"v2 = ConstFloat32 c2\" and \"t = T_f32\""], ["proof (state)\nthis:\n  v1 = ConstFloat32 c1\n  v2 = ConstFloat32 c2\n  t = T_f32\n\ngoal (62 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x1 x3.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x1 x3.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x1 x3.\n        \\<lbrakk>list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; t = T_f32\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 62 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  v1 = ConstFloat32 c1\n  v2 = ConstFloat32 c2\n  t = T_f32\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms(1) Cons outer_Cons\n             is_const_list_vs_to_es_list[of \"rev list'\"]\n              progress_L0_left[OF reduce.intros(1)[OF reduce_simple.intros(9)]]\n              progress_L0_left[OF reduce.intros(1)[OF reduce_simple.intros(10)]]\n              progress_L0_left[OF reduce.intros(1)[OF reduce_simple.intros(17)]]"], ["proof (prove)\nusing this:\n  v1 = ConstFloat32 c1\n  v2 = ConstFloat32 c2\n  t = T_f32\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  list = v2 # list'\n  ves = v1 # list\n  const_list (vs_to_es list')\n  \\<lbrakk>app_binop_f ?fop2 ?c1.2 ?c2.2 = Some ?c2; const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$C ConstFloat32 ?c1.2,\n                                    $C ConstFloat32 ?c2.2,\n                                    $Binop_f T_f32\n?fop2]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n       [$C ConstFloat32 ?c2]\\<rparr>\n  \\<lbrakk>app_binop_f ?fop2 ?c1.2 ?c2.2 = None; const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$C ConstFloat32 ?c1.2,\n                                    $C ConstFloat32 ?c2.2,\n                                    $Binop_f T_f32\n?fop2]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @ [Trap]\\<rparr>\n  const_list ?cs \\<Longrightarrow>\n  \\<lparr>?s;?vs;?cs @\n                 [$C ConstFloat32 ?c1.2, $C ConstFloat32 ?c2.2,\n                  $Relop_f T_f32\n                    ?fop2]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n                           [$C ConstInt32\n                                (wasm_bool\n                                  (app_relop_f ?fop2 ?c1.2 ?c2.2))]\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by (cases rule: b_e_cases; cases \"app_binop_f fop c2 c1\") auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (61 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x1 x3.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x1 x3.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x1 x3.\n        \\<lbrakk>list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; t = T_f32\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 61 subgoals...", "next"], ["proof (state)\ngoal (61 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x1 x3.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x1 x3.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x1 x3.\n        \\<lbrakk>list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; t = T_f32\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 61 subgoals...", "fix c1 c2"], ["proof (state)\ngoal (61 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x1 x3.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x1 x3.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x1 x3.\n        \\<lbrakk>list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; t = T_f32\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 61 subgoals...", "assume \"v1 = ConstFloat64 c1\" and \"v2 = ConstFloat64 c2\" and \"t = T_f64\""], ["proof (state)\nthis:\n  v1 = ConstFloat64 c1\n  v2 = ConstFloat64 c2\n  t = T_f64\n\ngoal (61 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x1 x3.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x1 x3.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x1 x3.\n        \\<lbrakk>list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; t = T_f32\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 61 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  v1 = ConstFloat64 c1\n  v2 = ConstFloat64 c2\n  t = T_f64\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms(1) Cons outer_Cons\n             is_const_list_vs_to_es_list[of \"rev list'\"]\n              progress_L0_left[OF reduce.intros(1)[OF reduce_simple.intros(11)]]\n              progress_L0_left[OF reduce.intros(1)[OF reduce_simple.intros(12)]]\n              progress_L0_left[OF reduce.intros(1)[OF reduce_simple.intros(18)]]"], ["proof (prove)\nusing this:\n  v1 = ConstFloat64 c1\n  v2 = ConstFloat64 c2\n  t = T_f64\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  list = v2 # list'\n  ves = v1 # list\n  const_list (vs_to_es list')\n  \\<lbrakk>app_binop_f ?fop2 ?c1.2 ?c2.2 = Some ?c2; const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$C ConstFloat64 ?c1.2,\n                                    $C ConstFloat64 ?c2.2,\n                                    $Binop_f T_f64\n?fop2]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n       [$C ConstFloat64 ?c2]\\<rparr>\n  \\<lbrakk>app_binop_f ?fop2 ?c1.2 ?c2.2 = None; const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$C ConstFloat64 ?c1.2,\n                                    $C ConstFloat64 ?c2.2,\n                                    $Binop_f T_f64\n?fop2]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @ [Trap]\\<rparr>\n  const_list ?cs \\<Longrightarrow>\n  \\<lparr>?s;?vs;?cs @\n                 [$C ConstFloat64 ?c1.2, $C ConstFloat64 ?c2.2,\n                  $Relop_f T_f64\n                    ?fop2]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n                           [$C ConstInt32\n                                (wasm_bool\n                                  (app_relop_f ?fop2 ?c1.2 ?c2.2))]\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by (cases rule: b_e_cases; cases \"app_binop_f fop c2 c1\") auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (60 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x1 x1a.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt32 x1a; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x1 x2.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstInt64 x2; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_f64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x1 x3.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i32\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x1 x3.\n       \\<lbrakk>list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = v1 # list; t = T_i64\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x1 x3.\n        \\<lbrakk>list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v1 = ConstInt32 x1; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; v2 = ConstFloat32 x3; list = v2 # list';\n         run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n         ves = v1 # list; t = T_f32\\<rbrakk>\n        \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 60 subgoals...", "qed (cases rule: b_e_cases; auto)+"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ves = v1 # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     list = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed (cases rule: b_e_cases; cases t; cases v1; auto)"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed (cases rule: b_e_cases; cases t; auto)"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma run_step_basic_sound:\n  assumes \"(run_one_step d i (s,vs,ves,$b_e) = (s', vs', RSNormal es'))\"\n  shows \"\\<lparr>s;vs;(vs_to_es ves)@[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases b_e)"], ["proof (state)\ngoal (31 subgoals):\n 1. b_e = Unreachable \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. b_e = Nop \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. b_e = Drop \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. b_e = Select \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x51 x52.\n       b_e = Block x51 x52 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x61 x62.\n       b_e = Loop x61 x62 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x71 x72 x73.\n       b_e = b_e.If x71 x72 x73 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x8.\n       b_e = Br x8 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x9.\n       b_e = Br_if x9 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x101 x102.\n        b_e = Br_table x101 x102 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 31 subgoals...", "case Unreachable"], ["proof (state)\nthis:\n  b_e = Unreachable\n\ngoal (31 subgoals):\n 1. b_e = Unreachable \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. b_e = Nop \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. b_e = Drop \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. b_e = Select \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x51 x52.\n       b_e = Block x51 x52 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x61 x62.\n       b_e = Loop x61 x62 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x71 x72 x73.\n       b_e = b_e.If x71 x72 x73 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x8.\n       b_e = Br x8 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x9.\n       b_e = Br_if x9 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x101 x102.\n        b_e = Br_table x101 x102 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 31 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = Unreachable\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using is_const_list_vs_to_es_list[of \"rev ves\"]\n            progress_L0_left[OF reduce.intros(1)[OF reduce_simple.intros(22)]]\n            assms"], ["proof (prove)\nusing this:\n  b_e = Unreachable\n  const_list (vs_to_es ves)\n  const_list ?cs \\<Longrightarrow>\n  \\<lparr>?s;?vs;?cs @\n                 [$Unreachable]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n                                [Trap]\\<rparr>\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (30 subgoals):\n 1. b_e = Nop \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. b_e = Drop \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. b_e = Select \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x51 x52.\n       b_e = Block x51 x52 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x61 x62.\n       b_e = Loop x61 x62 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x71 x72 x73.\n       b_e = b_e.If x71 x72 x73 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x8.\n       b_e = Br x8 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x9.\n       b_e = Br_if x9 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x101 x102.\n       b_e = Br_table x101 x102 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. b_e = Return \\<Longrightarrow>\n     \\<lparr>s;vs;vs_to_es ves @\n                  [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 30 subgoals...", "next"], ["proof (state)\ngoal (30 subgoals):\n 1. b_e = Nop \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. b_e = Drop \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. b_e = Select \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x51 x52.\n       b_e = Block x51 x52 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x61 x62.\n       b_e = Loop x61 x62 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x71 x72 x73.\n       b_e = b_e.If x71 x72 x73 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x8.\n       b_e = Br x8 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x9.\n       b_e = Br_if x9 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x101 x102.\n       b_e = Br_table x101 x102 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. b_e = Return \\<Longrightarrow>\n     \\<lparr>s;vs;vs_to_es ves @\n                  [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 30 subgoals...", "case Nop"], ["proof (state)\nthis:\n  b_e = Nop\n\ngoal (30 subgoals):\n 1. b_e = Nop \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. b_e = Drop \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. b_e = Select \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x51 x52.\n       b_e = Block x51 x52 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x61 x62.\n       b_e = Loop x61 x62 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x71 x72 x73.\n       b_e = b_e.If x71 x72 x73 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x8.\n       b_e = Br x8 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x9.\n       b_e = Br_if x9 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x101 x102.\n       b_e = Br_table x101 x102 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. b_e = Return \\<Longrightarrow>\n     \\<lparr>s;vs;vs_to_es ves @\n                  [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 30 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = Nop\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using is_const_list_vs_to_es_list[of \"rev ves\"]\n            progress_L0_left[OF reduce.intros(1)[OF reduce_simple.intros(23)]]\n            assms"], ["proof (prove)\nusing this:\n  b_e = Nop\n  const_list (vs_to_es ves)\n  const_list ?cs \\<Longrightarrow>\n  \\<lparr>?s;?vs;?cs @\n                 [$Nop]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n                        []\\<rparr>\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (29 subgoals):\n 1. b_e = Drop \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. b_e = Select \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x51 x52.\n       b_e = Block x51 x52 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x61 x62.\n       b_e = Loop x61 x62 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x71 x72 x73.\n       b_e = b_e.If x71 x72 x73 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x8.\n       b_e = Br x8 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x9.\n       b_e = Br_if x9 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x101 x102.\n       b_e = Br_table x101 x102 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. b_e = Return \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x12.\n        b_e = Call x12 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 29 subgoals...", "next"], ["proof (state)\ngoal (29 subgoals):\n 1. b_e = Drop \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. b_e = Select \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x51 x52.\n       b_e = Block x51 x52 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x61 x62.\n       b_e = Loop x61 x62 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x71 x72 x73.\n       b_e = b_e.If x71 x72 x73 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x8.\n       b_e = Br x8 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x9.\n       b_e = Br_if x9 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x101 x102.\n       b_e = Br_table x101 x102 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. b_e = Return \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x12.\n        b_e = Call x12 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 29 subgoals...", "case Drop"], ["proof (state)\nthis:\n  b_e = Drop\n\ngoal (29 subgoals):\n 1. b_e = Drop \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. b_e = Select \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x51 x52.\n       b_e = Block x51 x52 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x61 x62.\n       b_e = Loop x61 x62 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x71 x72 x73.\n       b_e = b_e.If x71 x72 x73 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x8.\n       b_e = Br x8 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x9.\n       b_e = Br_if x9 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x101 x102.\n       b_e = Br_table x101 x102 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. b_e = Return \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x12.\n        b_e = Call x12 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 29 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = Drop\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms"], ["proof (prove)\nusing this:\n  b_e = Drop\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = Drop;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>b_e = Drop;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = Drop;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>b_e = Drop;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "hence \"vs_to_es ves = vs_to_es list @ [$C a]\""], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. vs_to_es ves = vs_to_es list @ [$C a]", "by fastforce"], ["proof (state)\nthis:\n  vs_to_es ves = vs_to_es list @ [$C a]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = Drop;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>b_e = Drop;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  vs_to_es ves = vs_to_es list @ [$C a]\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using is_const_list_vs_to_es_list[of \"rev list\"]\n              progress_L0_left[OF reduce.intros(1)[OF reduce_simple.intros(24)]]\n              Drop assms Cons"], ["proof (prove)\nusing this:\n  vs_to_es ves = vs_to_es list @ [$C a]\n  const_list (vs_to_es list)\n  const_list ?cs \\<Longrightarrow>\n  \\<lparr>?s;?vs;?cs @\n                 [$C ?v2,\n                  $Drop]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n                         []\\<rparr>\n  b_e = Drop\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  ves = a # list\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b_e = Drop;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (28 subgoals):\n 1. b_e = Select \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x51 x52.\n       b_e = Block x51 x52 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x61 x62.\n       b_e = Loop x61 x62 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x71 x72 x73.\n       b_e = b_e.If x71 x72 x73 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x8.\n       b_e = Br x8 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x9.\n       b_e = Br_if x9 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x101 x102.\n       b_e = Br_table x101 x102 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. b_e = Return \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x12.\n       b_e = Call x12 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x13.\n        b_e = Call_indirect x13 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 28 subgoals...", "next"], ["proof (state)\ngoal (28 subgoals):\n 1. b_e = Select \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x51 x52.\n       b_e = Block x51 x52 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x61 x62.\n       b_e = Loop x61 x62 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x71 x72 x73.\n       b_e = b_e.If x71 x72 x73 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x8.\n       b_e = Br x8 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x9.\n       b_e = Br_if x9 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x101 x102.\n       b_e = Br_table x101 x102 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. b_e = Return \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x12.\n       b_e = Call x12 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x13.\n        b_e = Call_indirect x13 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 28 subgoals...", "case Select"], ["proof (state)\nthis:\n  b_e = Select\n\ngoal (28 subgoals):\n 1. b_e = Select \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x51 x52.\n       b_e = Block x51 x52 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x61 x62.\n       b_e = Loop x61 x62 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x71 x72 x73.\n       b_e = b_e.If x71 x72 x73 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x8.\n       b_e = Br x8 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x9.\n       b_e = Br_if x9 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x101 x102.\n       b_e = Br_table x101 x102 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. b_e = Return \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x12.\n       b_e = Call x12 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x13.\n        b_e = Call_indirect x13 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 28 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = Select\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms"], ["proof (prove)\nusing this:\n  b_e = Select\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = Select;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case outer_outer_cons:(Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = Select;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using Select assms"], ["proof (prove)\nusing this:\n  ves = a # list\n  b_e = Select\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases a; cases list)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = []\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1 aa lista.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x2.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = []\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x2 aa lista.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x3.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = []\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x3 aa lista.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x4.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat64 x4; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = []\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x4 aa lista.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat64 x4; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (ConstInt32 x1a)"], ["proof (state)\nthis:\n  a = ConstInt32 x1a\n\ngoal (8 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = []\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1 aa lista.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x2.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = []\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x2 aa lista.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x3.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = []\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x3 aa lista.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x4.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat64 x4; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = []\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x4 aa lista.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat64 x4; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case outer_cons:(Cons a' list')"], ["proof (state)\nthis:\n  list = a' # list'\n\ngoal (8 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = []\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1 aa lista.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x2.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = []\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x2 aa lista.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x3.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = []\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x3 aa lista.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x4.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat64 x4; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = []\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x4 aa lista.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat64 x4; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  list = a' # list'\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms outer_outer_cons ConstInt32 Select"], ["proof (prove)\nusing this:\n  list = a' # list'\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  ves = a # list\n  a = ConstInt32 x1a\n  b_e = Select\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases list')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>list = a' # list';\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = a # list; a = ConstInt32 x1a; b_e = Select; list' = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>aa lista.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = a # list; a = ConstInt32 x1a; b_e = Select;\n        list' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Cons a'' list'')"], ["proof (state)\nthis:\n  list' = a'' # list''\n\ngoal (2 subgoals):\n 1. \\<lbrakk>list = a' # list';\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = a # list; a = ConstInt32 x1a; b_e = Select; list' = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>aa lista.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = a # list; a = ConstInt32 x1a; b_e = Select;\n        list' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "hence \"vs_to_es ves = vs_to_es list'' @ [$C a'', $C a', $C ConstInt32 x1a]\""], ["proof (prove)\nusing this:\n  list' = a'' # list''\n\ngoal (1 subgoal):\n 1. vs_to_es ves = vs_to_es list'' @ [$C a'', $C a', $C ConstInt32 x1a]", "using outer_outer_cons outer_cons ConstInt32"], ["proof (prove)\nusing this:\n  list' = a'' # list''\n  ves = a # list\n  list = a' # list'\n  a = ConstInt32 x1a\n\ngoal (1 subgoal):\n 1. vs_to_es ves = vs_to_es list'' @ [$C a'', $C a', $C ConstInt32 x1a]", "by fastforce"], ["proof (state)\nthis:\n  vs_to_es ves = vs_to_es list'' @ [$C a'', $C a', $C ConstInt32 x1a]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>list = a' # list';\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = a # list; a = ConstInt32 x1a; b_e = Select; list' = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>aa lista.\n       \\<lbrakk>list = a' # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = a # list; a = ConstInt32 x1a; b_e = Select;\n        list' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  vs_to_es ves = vs_to_es list'' @ [$C a'', $C a', $C ConstInt32 x1a]\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using is_const_list_vs_to_es_list[of \"rev list''\"]\n                  progress_L0_left[OF reduce.intros(1)]\n                  reduce_simple.intros(25,26)\n                  assms outer_outer_cons outer_cons Cons ConstInt32 Select"], ["proof (prove)\nusing this:\n  vs_to_es ves = vs_to_es list'' @ [$C a'', $C a', $C ConstInt32 x1a]\n  const_list (vs_to_es list'')\n  \\<lbrakk>\\<lparr>?es\\<rparr> \\<leadsto> \\<lparr>?es'\\<rparr>;\n   const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   ?es\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n ?es'\\<rparr>\n  int_eq ?n 0 \\<Longrightarrow>\n  \\<lparr>[$C ?v1.0, $C ?v2.0, $C ConstInt32 ?n,\n           $Select]\\<rparr> \\<leadsto> \\<lparr>[$C ?v2.0]\\<rparr>\n  \\<not> int_eq ?n 0 \\<Longrightarrow>\n  \\<lparr>[$C ?v1.0, $C ?v2.0, $C ConstInt32 ?n,\n           $Select]\\<rparr> \\<leadsto> \\<lparr>[$C ?v1.0]\\<rparr>\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  ves = a # list\n  list = a' # list'\n  list' = a'' # list''\n  a = ConstInt32 x1a\n  b_e = Select\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by (cases \"int_eq x1a 0\") auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>list = a' # list';\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = a # list; a = ConstInt32 x1a; b_e = Select; list' = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt32 x1; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = []\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x2.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = []\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x2 aa lista.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstInt64 x2; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x3.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = []\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x3 aa lista.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat32 x3; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x4.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat64 x4; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = []\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x4 aa lista.\n       \\<lbrakk>ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a = ConstFloat64 x4; ves = a # list; b_e = Select;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = aa # lista\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b_e = Select;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (27 subgoals):\n 1. \\<And>x51 x52.\n       b_e = Block x51 x52 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x61 x62.\n       b_e = Loop x61 x62 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x71 x72 x73.\n       b_e = b_e.If x71 x72 x73 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x8.\n       b_e = Br x8 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x9.\n       b_e = Br_if x9 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x101 x102.\n       b_e = Br_table x101 x102 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. b_e = Return \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x12.\n       b_e = Call x12 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x13.\n       b_e = Call_indirect x13 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x14.\n        b_e = Get_local x14 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 27 subgoals...", "next"], ["proof (state)\ngoal (27 subgoals):\n 1. \\<And>x51 x52.\n       b_e = Block x51 x52 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x61 x62.\n       b_e = Loop x61 x62 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x71 x72 x73.\n       b_e = b_e.If x71 x72 x73 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x8.\n       b_e = Br x8 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x9.\n       b_e = Br_if x9 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x101 x102.\n       b_e = Br_table x101 x102 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. b_e = Return \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x12.\n       b_e = Call x12 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x13.\n       b_e = Call_indirect x13 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x14.\n        b_e = Get_local x14 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 27 subgoals...", "case (Block x51 x52)"], ["proof (state)\nthis:\n  b_e = Block x51 x52\n\ngoal (27 subgoals):\n 1. \\<And>x51 x52.\n       b_e = Block x51 x52 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x61 x62.\n       b_e = Loop x61 x62 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x71 x72 x73.\n       b_e = b_e.If x71 x72 x73 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x8.\n       b_e = Br x8 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x9.\n       b_e = Br_if x9 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x101 x102.\n       b_e = Br_table x101 x102 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. b_e = Return \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x12.\n       b_e = Call x12 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x13.\n       b_e = Call_indirect x13 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x14.\n        b_e = Get_local x14 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 27 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = Block x51 x52\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases x51)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>b_e = Block x51 x52; x51 = x1 _> x2\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Tf t1s t2s)"], ["proof (state)\nthis:\n  x51 = t1s _> t2s\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>b_e = Block x51 x52; x51 = x1 _> x2\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  x51 = t1s _> t2s\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using Block assms"], ["proof (prove)\nusing this:\n  x51 = t1s _> t2s\n  b_e = Block x51 x52\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases \"length t1s \\<le> length ves\"; cases \"split_n ves (length t1s)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>x51 = t1s _> t2s; b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        length t1s \\<le> length ves; x51 = t1s _> t2s; b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a b.\n       \\<lbrakk>x51 = t1s _> t2s; b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        \\<not> length t1s \\<le> length ves; x51 = t1s _> t2s;\n        b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case True"], ["proof (state)\nthis:\n  length t1s \\<le> length ves\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>x51 = t1s _> t2s; b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        length t1s \\<le> length ves; x51 = t1s _> t2s; b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a b.\n       \\<lbrakk>x51 = t1s _> t2s; b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        \\<not> length t1s \\<le> length ves; x51 = t1s _> t2s;\n        b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Pair ves' ves'')"], ["proof (state)\nthis:\n  split_n ves (length t1s) = (ves', ves'')\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>x51 = t1s _> t2s; b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        length t1s \\<le> length ves; x51 = t1s _> t2s; b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a b.\n       \\<lbrakk>x51 = t1s _> t2s; b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        \\<not> length t1s \\<le> length ves; x51 = t1s _> t2s;\n        b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "hence \"vs_to_es ves = vs_to_es ves'' @ vs_to_es ves'\""], ["proof (prove)\nusing this:\n  split_n ves (length t1s) = (ves', ves'')\n\ngoal (1 subgoal):\n 1. vs_to_es ves = vs_to_es ves'' @ vs_to_es ves'", "using split_n_conv_app"], ["proof (prove)\nusing this:\n  split_n ves (length t1s) = (ves', ves'')\n  split_n ?es ?n = (?es1.0, ?es2.0) \\<Longrightarrow> ?es = ?es1.0 @ ?es2.0\n\ngoal (1 subgoal):\n 1. vs_to_es ves = vs_to_es ves'' @ vs_to_es ves'", "by fastforce"], ["proof (state)\nthis:\n  vs_to_es ves = vs_to_es ves'' @ vs_to_es ves'\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>x51 = t1s _> t2s; b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        length t1s \\<le> length ves; x51 = t1s _> t2s; b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a b.\n       \\<lbrakk>x51 = t1s _> t2s; b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        \\<not> length t1s \\<le> length ves; x51 = t1s _> t2s;\n        b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "moreover"], ["proof (state)\nthis:\n  vs_to_es ves = vs_to_es ves'' @ vs_to_es ves'\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>x51 = t1s _> t2s; b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        length t1s \\<le> length ves; x51 = t1s _> t2s; b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a b.\n       \\<lbrakk>x51 = t1s _> t2s; b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        \\<not> length t1s \\<le> length ves; x51 = t1s _> t2s;\n        b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "have \"s = s'\" \"vs = vs'\" \"es' = vs_to_es ves'' @ [Label (length t2s) [] (vs_to_es ves' @ ($* x52))]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s = s' &&&\n    vs = vs' &&&\n    es' =\n    vs_to_es ves'' @ [Label (length t2s) [] (vs_to_es ves' @ ($* x52))]", "using Block assms Tf True Pair"], ["proof (prove)\nusing this:\n  b_e = Block x51 x52\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  x51 = t1s _> t2s\n  length t1s \\<le> length ves\n  split_n ves (length t1s) = (ves', ves'')\n\ngoal (1 subgoal):\n 1. s = s' &&&\n    vs = vs' &&&\n    es' =\n    vs_to_es ves'' @ [Label (length t2s) [] (vs_to_es ves' @ ($* x52))]", "by auto"], ["proof (state)\nthis:\n  s = s'\n  vs = vs'\n  es' = vs_to_es ves'' @ [Label (length t2s) [] (vs_to_es ves' @ ($* x52))]\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>x51 = t1s _> t2s; b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        length t1s \\<le> length ves; x51 = t1s _> t2s; b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a b.\n       \\<lbrakk>x51 = t1s _> t2s; b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        \\<not> length t1s \\<le> length ves; x51 = t1s _> t2s;\n        b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "moreover"], ["proof (state)\nthis:\n  s = s'\n  vs = vs'\n  es' = vs_to_es ves'' @ [Label (length t2s) [] (vs_to_es ves' @ ($* x52))]\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>x51 = t1s _> t2s; b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        length t1s \\<le> length ves; x51 = t1s _> t2s; b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a b.\n       \\<lbrakk>x51 = t1s _> t2s; b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        \\<not> length t1s \\<le> length ves; x51 = t1s _> t2s;\n        b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "have \"\\<lparr>s;vs;(vs_to_es ves'')@(vs_to_es ves')@[$Block x51 x52]\\<rparr> \\<leadsto>_i \\<lparr>s;vs;(vs_to_es ves'')@[Label (length t2s) [] (vs_to_es ves' @ ($* x52))]\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves'' @\n                 vs_to_es ves' @\n                 [$Block x51\n                    x52]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;vs_to_es ves'' @\n                      [Label (length t2s) []\n                        (vs_to_es ves' @ ($* x52))]\\<rparr>", "using Tf reduce_simple.intros(27) split_n_length[OF Pair True] progress_L0_left[OF reduce.intros(1)]\n                is_const_list_vs_to_es_list[of \"rev ves'\"] is_const_list_vs_to_es_list[of \"rev ves''\"]"], ["proof (prove)\nusing this:\n  x51 = t1s _> t2s\n  \\<lbrakk>const_list ?vs; length ?vs = ?n; length ?t1s = ?n;\n   length ?t2s = ?m\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?vs @\n                            [$Block (?t1s _> ?t2s)\n                               ?es]\\<rparr> \\<leadsto> \\<lparr>[Label ?m []\n                           (?vs @ ($* ?es))]\\<rparr>\n  length ves' = length t1s\n  \\<lbrakk>\\<lparr>?es\\<rparr> \\<leadsto> \\<lparr>?es'\\<rparr>;\n   const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   ?es\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n ?es'\\<rparr>\n  const_list (vs_to_es ves')\n  const_list (vs_to_es ves'')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves'' @\n                 vs_to_es ves' @\n                 [$Block x51\n                    x52]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;vs_to_es ves'' @\n                      [Label (length t2s) []\n                        (vs_to_es ves' @ ($* x52))]\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves'' @\n               vs_to_es ves' @\n               [$Block x51\n                  x52]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;vs_to_es ves'' @\n                    [Label (length t2s) []\n                      (vs_to_es ves' @ ($* x52))]\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>x51 = t1s _> t2s; b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        length t1s \\<le> length ves; x51 = t1s _> t2s; b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a b.\n       \\<lbrakk>x51 = t1s _> t2s; b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        \\<not> length t1s \\<le> length ves; x51 = t1s _> t2s;\n        b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "ultimately"], ["proof (chain)\npicking this:\n  vs_to_es ves = vs_to_es ves'' @ vs_to_es ves'\n  s = s'\n  vs = vs'\n  es' = vs_to_es ves'' @ [Label (length t2s) [] (vs_to_es ves' @ ($* x52))]\n  \\<lparr>s;vs;vs_to_es ves'' @\n               vs_to_es ves' @\n               [$Block x51\n                  x52]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;vs_to_es ves'' @\n                    [Label (length t2s) []\n                      (vs_to_es ves' @ ($* x52))]\\<rparr>", "show ?thesis"], ["proof (prove)\nusing this:\n  vs_to_es ves = vs_to_es ves'' @ vs_to_es ves'\n  s = s'\n  vs = vs'\n  es' = vs_to_es ves'' @ [Label (length t2s) [] (vs_to_es ves' @ ($* x52))]\n  \\<lparr>s;vs;vs_to_es ves'' @\n               vs_to_es ves' @\n               [$Block x51\n                  x52]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;vs_to_es ves'' @\n                    [Label (length t2s) []\n                      (vs_to_es ves' @ ($* x52))]\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using Block"], ["proof (prove)\nusing this:\n  vs_to_es ves = vs_to_es ves'' @ vs_to_es ves'\n  s = s'\n  vs = vs'\n  es' = vs_to_es ves'' @ [Label (length t2s) [] (vs_to_es ves' @ ($* x52))]\n  \\<lparr>s;vs;vs_to_es ves'' @\n               vs_to_es ves' @\n               [$Block x51\n                  x52]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;vs_to_es ves'' @\n                    [Label (length t2s) []\n                      (vs_to_es ves' @ ($* x52))]\\<rparr>\n  b_e = Block x51 x52\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>x51 = t1s _> t2s; b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        \\<not> length t1s \\<le> length ves; x51 = t1s _> t2s;\n        b_e = Block x51 x52;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (26 subgoals):\n 1. \\<And>x61 x62.\n       b_e = Loop x61 x62 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x71 x72 x73.\n       b_e = b_e.If x71 x72 x73 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x8.\n       b_e = Br x8 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x9.\n       b_e = Br_if x9 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x101 x102.\n       b_e = Br_table x101 x102 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. b_e = Return \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x12.\n       b_e = Call x12 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x13.\n       b_e = Call_indirect x13 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x14.\n       b_e = Get_local x14 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x15.\n        b_e = Set_local x15 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 26 subgoals...", "next"], ["proof (state)\ngoal (26 subgoals):\n 1. \\<And>x61 x62.\n       b_e = Loop x61 x62 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x71 x72 x73.\n       b_e = b_e.If x71 x72 x73 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x8.\n       b_e = Br x8 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x9.\n       b_e = Br_if x9 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x101 x102.\n       b_e = Br_table x101 x102 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. b_e = Return \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x12.\n       b_e = Call x12 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x13.\n       b_e = Call_indirect x13 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x14.\n       b_e = Get_local x14 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x15.\n        b_e = Set_local x15 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 26 subgoals...", "case (Loop x61 x62)"], ["proof (state)\nthis:\n  b_e = Loop x61 x62\n\ngoal (26 subgoals):\n 1. \\<And>x61 x62.\n       b_e = Loop x61 x62 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x71 x72 x73.\n       b_e = b_e.If x71 x72 x73 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x8.\n       b_e = Br x8 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x9.\n       b_e = Br_if x9 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x101 x102.\n       b_e = Br_table x101 x102 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. b_e = Return \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x12.\n       b_e = Call x12 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x13.\n       b_e = Call_indirect x13 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x14.\n       b_e = Get_local x14 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x15.\n        b_e = Set_local x15 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 26 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = Loop x61 x62\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases x61)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>b_e = Loop x61 x62; x61 = x1 _> x2\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Tf t1s t2s)"], ["proof (state)\nthis:\n  x61 = t1s _> t2s\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>b_e = Loop x61 x62; x61 = x1 _> x2\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  x61 = t1s _> t2s\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using Loop assms"], ["proof (prove)\nusing this:\n  x61 = t1s _> t2s\n  b_e = Loop x61 x62\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases \"length t1s \\<le> length ves\"; cases \"split_n ves (length t1s)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>x61 = t1s _> t2s; b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        length t1s \\<le> length ves; x61 = t1s _> t2s; b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a b.\n       \\<lbrakk>x61 = t1s _> t2s; b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        \\<not> length t1s \\<le> length ves; x61 = t1s _> t2s;\n        b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case True"], ["proof (state)\nthis:\n  length t1s \\<le> length ves\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>x61 = t1s _> t2s; b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        length t1s \\<le> length ves; x61 = t1s _> t2s; b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a b.\n       \\<lbrakk>x61 = t1s _> t2s; b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        \\<not> length t1s \\<le> length ves; x61 = t1s _> t2s;\n        b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Pair ves' ves'')"], ["proof (state)\nthis:\n  split_n ves (length t1s) = (ves', ves'')\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>x61 = t1s _> t2s; b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        length t1s \\<le> length ves; x61 = t1s _> t2s; b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a b.\n       \\<lbrakk>x61 = t1s _> t2s; b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        \\<not> length t1s \\<le> length ves; x61 = t1s _> t2s;\n        b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "hence \"vs_to_es ves = vs_to_es ves'' @ vs_to_es ves'\""], ["proof (prove)\nusing this:\n  split_n ves (length t1s) = (ves', ves'')\n\ngoal (1 subgoal):\n 1. vs_to_es ves = vs_to_es ves'' @ vs_to_es ves'", "using split_n_conv_app"], ["proof (prove)\nusing this:\n  split_n ves (length t1s) = (ves', ves'')\n  split_n ?es ?n = (?es1.0, ?es2.0) \\<Longrightarrow> ?es = ?es1.0 @ ?es2.0\n\ngoal (1 subgoal):\n 1. vs_to_es ves = vs_to_es ves'' @ vs_to_es ves'", "by fastforce"], ["proof (state)\nthis:\n  vs_to_es ves = vs_to_es ves'' @ vs_to_es ves'\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>x61 = t1s _> t2s; b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        length t1s \\<le> length ves; x61 = t1s _> t2s; b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a b.\n       \\<lbrakk>x61 = t1s _> t2s; b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        \\<not> length t1s \\<le> length ves; x61 = t1s _> t2s;\n        b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "moreover"], ["proof (state)\nthis:\n  vs_to_es ves = vs_to_es ves'' @ vs_to_es ves'\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>x61 = t1s _> t2s; b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        length t1s \\<le> length ves; x61 = t1s _> t2s; b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a b.\n       \\<lbrakk>x61 = t1s _> t2s; b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        \\<not> length t1s \\<le> length ves; x61 = t1s _> t2s;\n        b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "have \"s = s'\" \"vs = vs'\" \"es' = vs_to_es ves'' @ [Label (length t1s) [$Loop x61 x62] (vs_to_es ves' @ ($* x62))]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s = s' &&&\n    vs = vs' &&&\n    es' =\n    vs_to_es ves'' @\n    [Label (length t1s) [$Loop x61 x62] (vs_to_es ves' @ ($* x62))]", "using Loop assms Tf True Pair"], ["proof (prove)\nusing this:\n  b_e = Loop x61 x62\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  x61 = t1s _> t2s\n  length t1s \\<le> length ves\n  split_n ves (length t1s) = (ves', ves'')\n\ngoal (1 subgoal):\n 1. s = s' &&&\n    vs = vs' &&&\n    es' =\n    vs_to_es ves'' @\n    [Label (length t1s) [$Loop x61 x62] (vs_to_es ves' @ ($* x62))]", "by auto"], ["proof (state)\nthis:\n  s = s'\n  vs = vs'\n  es' =\n  vs_to_es ves'' @\n  [Label (length t1s) [$Loop x61 x62] (vs_to_es ves' @ ($* x62))]\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>x61 = t1s _> t2s; b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        length t1s \\<le> length ves; x61 = t1s _> t2s; b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a b.\n       \\<lbrakk>x61 = t1s _> t2s; b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        \\<not> length t1s \\<le> length ves; x61 = t1s _> t2s;\n        b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "moreover"], ["proof (state)\nthis:\n  s = s'\n  vs = vs'\n  es' =\n  vs_to_es ves'' @\n  [Label (length t1s) [$Loop x61 x62] (vs_to_es ves' @ ($* x62))]\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>x61 = t1s _> t2s; b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        length t1s \\<le> length ves; x61 = t1s _> t2s; b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a b.\n       \\<lbrakk>x61 = t1s _> t2s; b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        \\<not> length t1s \\<le> length ves; x61 = t1s _> t2s;\n        b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "have \"\\<lparr>s;vs;(vs_to_es ves'')@(vs_to_es ves')@[$Loop x61 x62]\\<rparr> \\<leadsto>_i \\<lparr>s;vs;(vs_to_es ves'')@[Label (length t1s) [$Loop x61 x62] (vs_to_es ves' @ ($* x62))]\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves'' @\n                 vs_to_es ves' @\n                 [$Loop x61\n                    x62]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;vs_to_es ves'' @\n                      [Label (length t1s) [$Loop x61 x62]\n                        (vs_to_es ves' @ ($* x62))]\\<rparr>", "using Tf reduce_simple.intros(28) split_n_length[OF Pair True] progress_L0_left[OF reduce.intros(1)]\n                is_const_list_vs_to_es_list[of \"rev ves'\"] is_const_list_vs_to_es_list[of \"rev ves''\"]"], ["proof (prove)\nusing this:\n  x61 = t1s _> t2s\n  \\<lbrakk>const_list ?vs; length ?vs = ?n; length ?t1s = ?n;\n   length ?t2s = ?m\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?vs @\n                            [$Loop (?t1s _> ?t2s)\n                               ?es]\\<rparr> \\<leadsto> \\<lparr>[Label ?n\n                           [$Loop (?t1s _> ?t2s) ?es]\n                           (?vs @ ($* ?es))]\\<rparr>\n  length ves' = length t1s\n  \\<lbrakk>\\<lparr>?es\\<rparr> \\<leadsto> \\<lparr>?es'\\<rparr>;\n   const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   ?es\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n ?es'\\<rparr>\n  const_list (vs_to_es ves')\n  const_list (vs_to_es ves'')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves'' @\n                 vs_to_es ves' @\n                 [$Loop x61\n                    x62]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;vs_to_es ves'' @\n                      [Label (length t1s) [$Loop x61 x62]\n                        (vs_to_es ves' @ ($* x62))]\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves'' @\n               vs_to_es ves' @\n               [$Loop x61\n                  x62]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;vs_to_es ves'' @\n                    [Label (length t1s) [$Loop x61 x62]\n                      (vs_to_es ves' @ ($* x62))]\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>x61 = t1s _> t2s; b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        length t1s \\<le> length ves; x61 = t1s _> t2s; b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a b.\n       \\<lbrakk>x61 = t1s _> t2s; b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        \\<not> length t1s \\<le> length ves; x61 = t1s _> t2s;\n        b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "ultimately"], ["proof (chain)\npicking this:\n  vs_to_es ves = vs_to_es ves'' @ vs_to_es ves'\n  s = s'\n  vs = vs'\n  es' =\n  vs_to_es ves'' @\n  [Label (length t1s) [$Loop x61 x62] (vs_to_es ves' @ ($* x62))]\n  \\<lparr>s;vs;vs_to_es ves'' @\n               vs_to_es ves' @\n               [$Loop x61\n                  x62]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;vs_to_es ves'' @\n                    [Label (length t1s) [$Loop x61 x62]\n                      (vs_to_es ves' @ ($* x62))]\\<rparr>", "show ?thesis"], ["proof (prove)\nusing this:\n  vs_to_es ves = vs_to_es ves'' @ vs_to_es ves'\n  s = s'\n  vs = vs'\n  es' =\n  vs_to_es ves'' @\n  [Label (length t1s) [$Loop x61 x62] (vs_to_es ves' @ ($* x62))]\n  \\<lparr>s;vs;vs_to_es ves'' @\n               vs_to_es ves' @\n               [$Loop x61\n                  x62]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;vs_to_es ves'' @\n                    [Label (length t1s) [$Loop x61 x62]\n                      (vs_to_es ves' @ ($* x62))]\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using Loop"], ["proof (prove)\nusing this:\n  vs_to_es ves = vs_to_es ves'' @ vs_to_es ves'\n  s = s'\n  vs = vs'\n  es' =\n  vs_to_es ves'' @\n  [Label (length t1s) [$Loop x61 x62] (vs_to_es ves' @ ($* x62))]\n  \\<lparr>s;vs;vs_to_es ves'' @\n               vs_to_es ves' @\n               [$Loop x61\n                  x62]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;vs_to_es ves'' @\n                    [Label (length t1s) [$Loop x61 x62]\n                      (vs_to_es ves' @ ($* x62))]\\<rparr>\n  b_e = Loop x61 x62\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>x61 = t1s _> t2s; b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        \\<not> length t1s \\<le> length ves; x61 = t1s _> t2s;\n        b_e = Loop x61 x62;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        split_n ves (length t1s) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (25 subgoals):\n 1. \\<And>x71 x72 x73.\n       b_e = b_e.If x71 x72 x73 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x8.\n       b_e = Br x8 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x9.\n       b_e = Br_if x9 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x101 x102.\n       b_e = Br_table x101 x102 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. b_e = Return \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x12.\n       b_e = Call x12 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x13.\n       b_e = Call_indirect x13 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x14.\n       b_e = Get_local x14 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x15.\n       b_e = Set_local x15 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x16.\n        b_e = Tee_local x16 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 25 subgoals...", "next"], ["proof (state)\ngoal (25 subgoals):\n 1. \\<And>x71 x72 x73.\n       b_e = b_e.If x71 x72 x73 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x8.\n       b_e = Br x8 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x9.\n       b_e = Br_if x9 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x101 x102.\n       b_e = Br_table x101 x102 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. b_e = Return \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x12.\n       b_e = Call x12 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x13.\n       b_e = Call_indirect x13 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x14.\n       b_e = Get_local x14 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x15.\n       b_e = Set_local x15 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x16.\n        b_e = Tee_local x16 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 25 subgoals...", "case (If x71 x72 x73)"], ["proof (state)\nthis:\n  b_e = b_e.If x71 x72 x73\n\ngoal (25 subgoals):\n 1. \\<And>x71 x72 x73.\n       b_e = b_e.If x71 x72 x73 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x8.\n       b_e = Br x8 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x9.\n       b_e = Br_if x9 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x101 x102.\n       b_e = Br_table x101 x102 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. b_e = Return \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x12.\n       b_e = Call x12 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x13.\n       b_e = Call_indirect x13 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x14.\n       b_e = Get_local x14 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x15.\n       b_e = Set_local x15 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x16.\n        b_e = Tee_local x16 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 25 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = b_e.If x71 x72 x73\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms"], ["proof (prove)\nusing this:\n  b_e = b_e.If x71 x72 x73\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = b_e.If x71 x72 x73;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>b_e = b_e.If x71 x72 x73;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = b_e.If x71 x72 x73;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>b_e = b_e.If x71 x72 x73;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms If"], ["proof (prove)\nusing this:\n  ves = a # list\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  b_e = b_e.If x71 x72 x73\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases a)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = b_e.If x71 x72 x73; a = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = b_e.If x71 x72 x73; a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = b_e.If x71 x72 x73; a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = b_e.If x71 x72 x73; a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (ConstInt32 x1)"], ["proof (state)\nthis:\n  a = ConstInt32 x1\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = b_e.If x71 x72 x73; a = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = b_e.If x71 x72 x73; a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = b_e.If x71 x72 x73; a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = b_e.If x71 x72 x73; a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "hence \"vs_to_es ves = vs_to_es list @ [$C ConstInt32 x1]\""], ["proof (prove)\nusing this:\n  a = ConstInt32 x1\n\ngoal (1 subgoal):\n 1. vs_to_es ves = vs_to_es list @ [$C ConstInt32 x1]", "unfolding Cons"], ["proof (prove)\nusing this:\n  a = ConstInt32 x1\n\ngoal (1 subgoal):\n 1. vs_to_es (a # list) = vs_to_es list @ [$C ConstInt32 x1]", "by simp"], ["proof (state)\nthis:\n  vs_to_es ves = vs_to_es list @ [$C ConstInt32 x1]\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = b_e.If x71 x72 x73; a = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = b_e.If x71 x72 x73; a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = b_e.If x71 x72 x73; a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = b_e.If x71 x72 x73; a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  vs_to_es ves = vs_to_es list @ [$C ConstInt32 x1]\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using progress_L0_left[OF reduce.intros(1)]\n              is_const_list_vs_to_es_list[of \"rev list\"]\n              reduce_simple.intros(29,30)\n              assms Cons If ConstInt32"], ["proof (prove)\nusing this:\n  vs_to_es ves = vs_to_es list @ [$C ConstInt32 x1]\n  \\<lbrakk>\\<lparr>?es\\<rparr> \\<leadsto> \\<lparr>?es'\\<rparr>;\n   const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   ?es\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n ?es'\\<rparr>\n  const_list (vs_to_es list)\n  int_eq ?n 0 \\<Longrightarrow>\n  \\<lparr>[$C ConstInt32 ?n,\n           $b_e.If ?tf ?e1s\n             ?e2s]\\<rparr> \\<leadsto> \\<lparr>[$Block ?tf ?e2s]\\<rparr>\n  \\<not> int_eq ?n 0 \\<Longrightarrow>\n  \\<lparr>[$C ConstInt32 ?n,\n           $b_e.If ?tf ?e1s\n             ?e2s]\\<rparr> \\<leadsto> \\<lparr>[$Block ?tf ?e1s]\\<rparr>\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  ves = a # list\n  b_e = b_e.If x71 x72 x73\n  a = ConstInt32 x1\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by (cases \"int_eq x1 0\") auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = b_e.If x71 x72 x73; a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = b_e.If x71 x72 x73; a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = b_e.If x71 x72 x73; a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b_e = b_e.If x71 x72 x73;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (24 subgoals):\n 1. \\<And>x8.\n       b_e = Br x8 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x9.\n       b_e = Br_if x9 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x101 x102.\n       b_e = Br_table x101 x102 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. b_e = Return \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x12.\n       b_e = Call x12 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x13.\n       b_e = Call_indirect x13 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x14.\n       b_e = Get_local x14 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x15.\n       b_e = Set_local x15 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x16.\n       b_e = Tee_local x16 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x17.\n        b_e = Get_global x17 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 24 subgoals...", "next"], ["proof (state)\ngoal (24 subgoals):\n 1. \\<And>x8.\n       b_e = Br x8 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x9.\n       b_e = Br_if x9 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x101 x102.\n       b_e = Br_table x101 x102 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. b_e = Return \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x12.\n       b_e = Call x12 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x13.\n       b_e = Call_indirect x13 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x14.\n       b_e = Get_local x14 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x15.\n       b_e = Set_local x15 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x16.\n       b_e = Tee_local x16 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x17.\n        b_e = Get_global x17 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 24 subgoals...", "case (Br x8)"], ["proof (state)\nthis:\n  b_e = Br x8\n\ngoal (24 subgoals):\n 1. \\<And>x8.\n       b_e = Br x8 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x9.\n       b_e = Br_if x9 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x101 x102.\n       b_e = Br_table x101 x102 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. b_e = Return \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x12.\n       b_e = Call x12 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x13.\n       b_e = Call_indirect x13 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x14.\n       b_e = Get_local x14 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x15.\n       b_e = Set_local x15 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x16.\n       b_e = Tee_local x16 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x17.\n        b_e = Get_global x17 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 24 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = Br x8\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms"], ["proof (prove)\nusing this:\n  b_e = Br x8\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (23 subgoals):\n 1. \\<And>x9.\n       b_e = Br_if x9 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x101 x102.\n       b_e = Br_table x101 x102 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. b_e = Return \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x12.\n       b_e = Call x12 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x13.\n       b_e = Call_indirect x13 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x14.\n       b_e = Get_local x14 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x15.\n       b_e = Set_local x15 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x16.\n       b_e = Tee_local x16 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x17.\n       b_e = Get_global x17 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x18.\n        b_e = Set_global x18 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 23 subgoals...", "next"], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>x9.\n       b_e = Br_if x9 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x101 x102.\n       b_e = Br_table x101 x102 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. b_e = Return \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x12.\n       b_e = Call x12 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x13.\n       b_e = Call_indirect x13 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x14.\n       b_e = Get_local x14 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x15.\n       b_e = Set_local x15 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x16.\n       b_e = Tee_local x16 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x17.\n       b_e = Get_global x17 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x18.\n        b_e = Set_global x18 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 23 subgoals...", "case (Br_if x9)"], ["proof (state)\nthis:\n  b_e = Br_if x9\n\ngoal (23 subgoals):\n 1. \\<And>x9.\n       b_e = Br_if x9 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x101 x102.\n       b_e = Br_table x101 x102 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. b_e = Return \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x12.\n       b_e = Call x12 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x13.\n       b_e = Call_indirect x13 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x14.\n       b_e = Get_local x14 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x15.\n       b_e = Set_local x15 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x16.\n       b_e = Tee_local x16 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x17.\n       b_e = Get_global x17 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x18.\n        b_e = Set_global x18 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 23 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = Br_if x9\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms"], ["proof (prove)\nusing this:\n  b_e = Br_if x9\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = Br_if x9;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>b_e = Br_if x9;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = Br_if x9;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>b_e = Br_if x9;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms Br_if"], ["proof (prove)\nusing this:\n  ves = a # list\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  b_e = Br_if x9\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases a)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Br_if x9; a = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Br_if x9; a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Br_if x9; a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Br_if x9; a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (ConstInt32 x1)"], ["proof (state)\nthis:\n  a = ConstInt32 x1\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Br_if x9; a = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Br_if x9; a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Br_if x9; a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Br_if x9; a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "hence \"vs_to_es ves = vs_to_es list @ [$C ConstInt32 x1]\""], ["proof (prove)\nusing this:\n  a = ConstInt32 x1\n\ngoal (1 subgoal):\n 1. vs_to_es ves = vs_to_es list @ [$C ConstInt32 x1]", "unfolding Cons"], ["proof (prove)\nusing this:\n  a = ConstInt32 x1\n\ngoal (1 subgoal):\n 1. vs_to_es (a # list) = vs_to_es list @ [$C ConstInt32 x1]", "by simp"], ["proof (state)\nthis:\n  vs_to_es ves = vs_to_es list @ [$C ConstInt32 x1]\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Br_if x9; a = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Br_if x9; a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Br_if x9; a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Br_if x9; a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  vs_to_es ves = vs_to_es list @ [$C ConstInt32 x1]\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using progress_L0_left[OF reduce.intros(1)[OF reduce_simple.intros(34)]]\n              progress_L0_left[OF reduce.intros(1)[OF reduce_simple.intros(35)]]\n              is_const_list_vs_to_es_list[of \"rev list\"]\n              assms Cons Br_if ConstInt32"], ["proof (prove)\nusing this:\n  vs_to_es ves = vs_to_es list @ [$C ConstInt32 x1]\n  \\<lbrakk>int_eq ?n2 0; const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$C ConstInt32 ?n2,\n                                    $Br_if\n?i2]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @ []\\<rparr>\n  \\<lbrakk>\\<not> int_eq ?n2 0; const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$C ConstInt32 ?n2,\n                                    $Br_if\n?i2]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @ [$Br ?i2]\\<rparr>\n  const_list (vs_to_es list)\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  ves = a # list\n  b_e = Br_if x9\n  a = ConstInt32 x1\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by (cases \"int_eq x1 0\") auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Br_if x9; a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Br_if x9; a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Br_if x9; a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b_e = Br_if x9;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (22 subgoals):\n 1. \\<And>x101 x102.\n       b_e = Br_table x101 x102 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. b_e = Return \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x12.\n       b_e = Call x12 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x13.\n       b_e = Call_indirect x13 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x14.\n       b_e = Get_local x14 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x15.\n       b_e = Set_local x15 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x16.\n       b_e = Tee_local x16 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x17.\n       b_e = Get_global x17 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x18.\n       b_e = Set_global x18 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x191 x192 x193 x194.\n        b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 22 subgoals...", "next"], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>x101 x102.\n       b_e = Br_table x101 x102 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. b_e = Return \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x12.\n       b_e = Call x12 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x13.\n       b_e = Call_indirect x13 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x14.\n       b_e = Get_local x14 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x15.\n       b_e = Set_local x15 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x16.\n       b_e = Tee_local x16 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x17.\n       b_e = Get_global x17 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x18.\n       b_e = Set_global x18 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x191 x192 x193 x194.\n        b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 22 subgoals...", "case (Br_table x10)"], ["proof (state)\nthis:\n  b_e = Br_table x10 x102_\n\ngoal (22 subgoals):\n 1. \\<And>x101 x102.\n       b_e = Br_table x101 x102 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. b_e = Return \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x12.\n       b_e = Call x12 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x13.\n       b_e = Call_indirect x13 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x14.\n       b_e = Get_local x14 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x15.\n       b_e = Set_local x15 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x16.\n       b_e = Tee_local x16 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x17.\n       b_e = Get_global x17 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x18.\n       b_e = Set_global x18 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x191 x192 x193 x194.\n        b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 22 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = Br_table x10 x102_\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms"], ["proof (prove)\nusing this:\n  b_e = Br_table x10 x102_\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = Br_table x10 x102_;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>b_e = Br_table x10 x102_;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = Br_table x10 x102_;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>b_e = Br_table x10 x102_;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms Br_table"], ["proof (prove)\nusing this:\n  ves = a # list\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  b_e = Br_table x10 x102_\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases a)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Br_table x10 x102_; a = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Br_table x10 x102_; a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Br_table x10 x102_; a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Br_table x10 x102_; a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (ConstInt32 x1)"], ["proof (state)\nthis:\n  a = ConstInt32 x1\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Br_table x10 x102_; a = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Br_table x10 x102_; a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Br_table x10 x102_; a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Br_table x10 x102_; a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = ConstInt32 x1\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using progress_L0_left[OF reduce.intros(1)[OF reduce_simple.intros(36)]]\n                progress_L0_left[OF reduce.intros(1)[OF reduce_simple.intros(37)]]\n                is_const_list_vs_to_es_list[of \"rev list\"]\n                assms Br_table Cons"], ["proof (prove)\nusing this:\n  a = ConstInt32 x1\n  \\<lbrakk>nat_of_int ?c2 < length ?is2; const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$C ConstInt32 ?c2,\n                                    $Br_table ?is2\n?i2]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n     [$Br (?is2 ! nat_of_int ?c2)]\\<rparr>\n  \\<lbrakk>length ?is2 \\<le> nat_of_int ?c2; const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$C ConstInt32 ?c2,\n                                    $Br_table ?is2\n?i2]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @ [$Br ?i2]\\<rparr>\n  const_list (vs_to_es list)\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  b_e = Br_table x10 x102_\n  ves = a # list\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by (cases \"(nat_of_int x1) < length x10\") auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Br_table x10 x102_; a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Br_table x10 x102_; a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Br_table x10 x102_; a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b_e = Br_table x10 x102_;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (21 subgoals):\n 1. b_e = Return \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x12.\n       b_e = Call x12 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x13.\n       b_e = Call_indirect x13 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x14.\n       b_e = Get_local x14 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x15.\n       b_e = Set_local x15 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x16.\n       b_e = Tee_local x16 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x17.\n       b_e = Get_global x17 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x18.\n       b_e = Set_global x18 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x191 x192 x193 x194.\n       b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x201 x202 x203 x204.\n        b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 21 subgoals...", "next"], ["proof (state)\ngoal (21 subgoals):\n 1. b_e = Return \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x12.\n       b_e = Call x12 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x13.\n       b_e = Call_indirect x13 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x14.\n       b_e = Get_local x14 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x15.\n       b_e = Set_local x15 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x16.\n       b_e = Tee_local x16 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x17.\n       b_e = Get_global x17 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x18.\n       b_e = Set_global x18 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x191 x192 x193 x194.\n       b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x201 x202 x203 x204.\n        b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 21 subgoals...", "case Return"], ["proof (state)\nthis:\n  b_e = Return\n\ngoal (21 subgoals):\n 1. b_e = Return \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x12.\n       b_e = Call x12 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x13.\n       b_e = Call_indirect x13 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x14.\n       b_e = Get_local x14 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x15.\n       b_e = Set_local x15 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x16.\n       b_e = Tee_local x16 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x17.\n       b_e = Get_global x17 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x18.\n       b_e = Set_global x18 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x191 x192 x193 x194.\n       b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x201 x202 x203 x204.\n        b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 21 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = Return\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms"], ["proof (prove)\nusing this:\n  b_e = Return\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by simp"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (20 subgoals):\n 1. \\<And>x12.\n       b_e = Call x12 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x13.\n       b_e = Call_indirect x13 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x14.\n       b_e = Get_local x14 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x15.\n       b_e = Set_local x15 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x16.\n       b_e = Tee_local x16 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x17.\n       b_e = Get_global x17 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x18.\n       b_e = Set_global x18 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x191 x192 x193 x194.\n       b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x201 x202 x203 x204.\n       b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. b_e = Current_memory \\<Longrightarrow>\n     \\<lparr>s;vs;vs_to_es ves @\n                  [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 20 subgoals...", "next"], ["proof (state)\ngoal (20 subgoals):\n 1. \\<And>x12.\n       b_e = Call x12 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x13.\n       b_e = Call_indirect x13 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x14.\n       b_e = Get_local x14 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x15.\n       b_e = Set_local x15 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x16.\n       b_e = Tee_local x16 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x17.\n       b_e = Get_global x17 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x18.\n       b_e = Set_global x18 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x191 x192 x193 x194.\n       b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x201 x202 x203 x204.\n       b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. b_e = Current_memory \\<Longrightarrow>\n     \\<lparr>s;vs;vs_to_es ves @\n                  [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 20 subgoals...", "case (Call x12)"], ["proof (state)\nthis:\n  b_e = Call x12\n\ngoal (20 subgoals):\n 1. \\<And>x12.\n       b_e = Call x12 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x13.\n       b_e = Call_indirect x13 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x14.\n       b_e = Get_local x14 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x15.\n       b_e = Set_local x15 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x16.\n       b_e = Tee_local x16 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x17.\n       b_e = Get_global x17 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x18.\n       b_e = Set_global x18 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x191 x192 x193 x194.\n       b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x201 x202 x203 x204.\n       b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. b_e = Current_memory \\<Longrightarrow>\n     \\<lparr>s;vs;vs_to_es ves @\n                  [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 20 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = Call x12\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms progress_L0_left[OF reduce.intros(2)]\n            is_const_list_vs_to_es_list[of \"rev ves\"]"], ["proof (prove)\nusing this:\n  b_e = Call x12\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  const_list ?cs \\<Longrightarrow>\n  \\<lparr>?s;?vs;?cs @\n                 [$Call\n                    ?j1]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n                         [Callcl (sfunc ?s ?i ?j1)]\\<rparr>\n  const_list (vs_to_es ves)\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (19 subgoals):\n 1. \\<And>x13.\n       b_e = Call_indirect x13 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x14.\n       b_e = Get_local x14 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x15.\n       b_e = Set_local x15 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x16.\n       b_e = Tee_local x16 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x17.\n       b_e = Get_global x17 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x18.\n       b_e = Set_global x18 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x191 x192 x193 x194.\n       b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x201 x202 x203 x204.\n       b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. b_e = Current_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. b_e = Grow_memory \\<Longrightarrow>\n     \\<lparr>s;vs;vs_to_es ves @\n                  [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 19 subgoals...", "next"], ["proof (state)\ngoal (19 subgoals):\n 1. \\<And>x13.\n       b_e = Call_indirect x13 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x14.\n       b_e = Get_local x14 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x15.\n       b_e = Set_local x15 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x16.\n       b_e = Tee_local x16 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x17.\n       b_e = Get_global x17 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x18.\n       b_e = Set_global x18 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x191 x192 x193 x194.\n       b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x201 x202 x203 x204.\n       b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. b_e = Current_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. b_e = Grow_memory \\<Longrightarrow>\n     \\<lparr>s;vs;vs_to_es ves @\n                  [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 19 subgoals...", "case (Call_indirect x13)"], ["proof (state)\nthis:\n  b_e = Call_indirect x13\n\ngoal (19 subgoals):\n 1. \\<And>x13.\n       b_e = Call_indirect x13 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x14.\n       b_e = Get_local x14 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x15.\n       b_e = Set_local x15 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x16.\n       b_e = Tee_local x16 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x17.\n       b_e = Get_global x17 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x18.\n       b_e = Set_global x18 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x191 x192 x193 x194.\n       b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x201 x202 x203 x204.\n       b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. b_e = Current_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. b_e = Grow_memory \\<Longrightarrow>\n     \\<lparr>s;vs;vs_to_es ves @\n                  [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 19 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = Call_indirect x13\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms"], ["proof (prove)\nusing this:\n  b_e = Call_indirect x13\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = Call_indirect x13;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>b_e = Call_indirect x13;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = Call_indirect x13;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>b_e = Call_indirect x13;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms Call_indirect"], ["proof (prove)\nusing this:\n  ves = a # list\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  b_e = Call_indirect x13\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases a)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Call_indirect x13; a = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Call_indirect x13; a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Call_indirect x13; a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Call_indirect x13; a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (ConstInt32 c)"], ["proof (state)\nthis:\n  a = ConstInt32 c\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Call_indirect x13; a = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Call_indirect x13; a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Call_indirect x13; a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Call_indirect x13; a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = ConstInt32 c\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases \"stab s i (nat_of_int c)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>a = ConstInt32 c; stab s i (nat_of_int c) = None\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>aa.\n       \\<lbrakk>a = ConstInt32 c; stab s i (nat_of_int c) = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case None"], ["proof (state)\nthis:\n  stab s i (nat_of_int c) = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a = ConstInt32 c; stab s i (nat_of_int c) = None\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>aa.\n       \\<lbrakk>a = ConstInt32 c; stab s i (nat_of_int c) = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  stab s i (nat_of_int c) = None\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms Call_indirect Cons ConstInt32\n                  progress_L0_left[OF reduce.intros(4)]\n                  is_const_list_vs_to_es_list[of \"rev list\"]"], ["proof (prove)\nusing this:\n  stab s i (nat_of_int c) = None\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  b_e = Call_indirect x13\n  ves = a # list\n  a = ConstInt32 c\n  \\<lbrakk>stab ?s ?i (nat_of_int ?c1) = Some ?cl1 \\<and>\n           stypes ?s ?i ?j1 \\<noteq> cl_type ?cl1 \\<or>\n           stab ?s ?i (nat_of_int ?c1) = None;\n   const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$C ConstInt32 ?c1,\n                                    $Call_indirect\n?j1]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @ [Trap]\\<rparr>\n  const_list (vs_to_es list)\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>a = ConstInt32 c; stab s i (nat_of_int c) = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>a = ConstInt32 c; stab s i (nat_of_int c) = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Some cl)"], ["proof (state)\nthis:\n  stab s i (nat_of_int c) = Some cl\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>a = ConstInt32 c; stab s i (nat_of_int c) = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  stab s i (nat_of_int c) = Some cl\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases \"stypes s i x13 = cl_type cl\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>stab s i (nat_of_int c) = Some cl;\n     stypes s i x13 = cl_type cl\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>stab s i (nat_of_int c) = Some cl;\n     stypes s i x13 \\<noteq> cl_type cl\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case True"], ["proof (state)\nthis:\n  stypes s i x13 = cl_type cl\n\ngoal (2 subgoals):\n 1. \\<lbrakk>stab s i (nat_of_int c) = Some cl;\n     stypes s i x13 = cl_type cl\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>stab s i (nat_of_int c) = Some cl;\n     stypes s i x13 \\<noteq> cl_type cl\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "hence \"\\<lparr>s;vs;(vs_to_es list) @ [$C ConstInt32 c, $Call_indirect x13]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;(vs_to_es list) @ [Callcl cl]\\<rparr>\""], ["proof (prove)\nusing this:\n  stypes s i x13 = cl_type cl\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es list @\n                 [$C ConstInt32 c,\n                  $Call_indirect\n                    x13]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;vs_to_es list @\n                      [Callcl cl]\\<rparr>", "using progress_L0_left[OF reduce.intros(3)] True Some is_const_list_vs_to_es_list[of \"rev list\"]"], ["proof (prove)\nusing this:\n  stypes s i x13 = cl_type cl\n  \\<lbrakk>stab ?s ?i (nat_of_int ?c1) = Some ?cl1; stypes ?s ?i ?j1 = ?tf1;\n   cl_type ?cl1 = ?tf1; const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$C ConstInt32 ?c1,\n                                    $Call_indirect\n?j1]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @ [Callcl ?cl1]\\<rparr>\n  stypes s i x13 = cl_type cl\n  stab s i (nat_of_int c) = Some cl\n  const_list (vs_to_es list)\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es list @\n                 [$C ConstInt32 c,\n                  $Call_indirect\n                    x13]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;vs_to_es list @\n                      [Callcl cl]\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es list @\n               [$C ConstInt32 c,\n                $Call_indirect\n                  x13]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;vs_to_es list @\n                    [Callcl cl]\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>stab s i (nat_of_int c) = Some cl;\n     stypes s i x13 = cl_type cl\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>stab s i (nat_of_int c) = Some cl;\n     stypes s i x13 \\<noteq> cl_type cl\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lparr>s;vs;vs_to_es list @\n               [$C ConstInt32 c,\n                $Call_indirect\n                  x13]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;vs_to_es list @\n                    [Callcl cl]\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms Call_indirect Cons ConstInt32 Some True"], ["proof (prove)\nusing this:\n  \\<lparr>s;vs;vs_to_es list @\n               [$C ConstInt32 c,\n                $Call_indirect\n                  x13]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;vs_to_es list @\n                    [Callcl cl]\\<rparr>\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  b_e = Call_indirect x13\n  ves = a # list\n  a = ConstInt32 c\n  stab s i (nat_of_int c) = Some cl\n  stypes s i x13 = cl_type cl\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>stab s i (nat_of_int c) = Some cl;\n     stypes s i x13 \\<noteq> cl_type cl\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>stab s i (nat_of_int c) = Some cl;\n     stypes s i x13 \\<noteq> cl_type cl\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case False"], ["proof (state)\nthis:\n  stypes s i x13 \\<noteq> cl_type cl\n\ngoal (1 subgoal):\n 1. \\<lbrakk>stab s i (nat_of_int c) = Some cl;\n     stypes s i x13 \\<noteq> cl_type cl\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "hence \"\\<lparr>s;vs;(vs_to_es list)@[$C ConstInt32 c, $Call_indirect x13]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;(vs_to_es list)@[Trap]\\<rparr>\""], ["proof (prove)\nusing this:\n  stypes s i x13 \\<noteq> cl_type cl\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es list @\n                 [$C ConstInt32 c,\n                  $Call_indirect\n                    x13]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;vs_to_es list @\n                      [Trap]\\<rparr>", "using progress_L0_left[OF reduce.intros(4)] False Some is_const_list_vs_to_es_list[of \"rev list\"]"], ["proof (prove)\nusing this:\n  stypes s i x13 \\<noteq> cl_type cl\n  \\<lbrakk>stab ?s ?i (nat_of_int ?c1) = Some ?cl1 \\<and>\n           stypes ?s ?i ?j1 \\<noteq> cl_type ?cl1 \\<or>\n           stab ?s ?i (nat_of_int ?c1) = None;\n   const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$C ConstInt32 ?c1,\n                                    $Call_indirect\n?j1]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @ [Trap]\\<rparr>\n  stypes s i x13 \\<noteq> cl_type cl\n  stab s i (nat_of_int c) = Some cl\n  const_list (vs_to_es list)\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es list @\n                 [$C ConstInt32 c,\n                  $Call_indirect\n                    x13]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;vs_to_es list @\n                      [Trap]\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es list @\n               [$C ConstInt32 c,\n                $Call_indirect\n                  x13]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;vs_to_es list @\n                    [Trap]\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>stab s i (nat_of_int c) = Some cl;\n     stypes s i x13 \\<noteq> cl_type cl\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lparr>s;vs;vs_to_es list @\n               [$C ConstInt32 c,\n                $Call_indirect\n                  x13]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;vs_to_es list @\n                    [Trap]\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms Call_indirect Cons ConstInt32 Some False"], ["proof (prove)\nusing this:\n  \\<lparr>s;vs;vs_to_es list @\n               [$C ConstInt32 c,\n                $Call_indirect\n                  x13]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;vs_to_es list @\n                    [Trap]\\<rparr>\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  b_e = Call_indirect x13\n  ves = a # list\n  a = ConstInt32 c\n  stab s i (nat_of_int c) = Some cl\n  stypes s i x13 \\<noteq> cl_type cl\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Call_indirect x13; a = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Call_indirect x13; a = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Call_indirect x13; a = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b_e = Call_indirect x13;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (18 subgoals):\n 1. \\<And>x14.\n       b_e = Get_local x14 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x15.\n       b_e = Set_local x15 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x16.\n       b_e = Tee_local x16 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x17.\n       b_e = Get_global x17 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x18.\n       b_e = Set_global x18 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x191 x192 x193 x194.\n       b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x201 x202 x203 x204.\n       b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. b_e = Current_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. b_e = Grow_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x23.\n        b_e = C x23 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 18 subgoals...", "next"], ["proof (state)\ngoal (18 subgoals):\n 1. \\<And>x14.\n       b_e = Get_local x14 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x15.\n       b_e = Set_local x15 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x16.\n       b_e = Tee_local x16 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x17.\n       b_e = Get_global x17 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x18.\n       b_e = Set_global x18 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x191 x192 x193 x194.\n       b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x201 x202 x203 x204.\n       b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. b_e = Current_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. b_e = Grow_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x23.\n        b_e = C x23 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 18 subgoals...", "case (Get_local j)"], ["proof (state)\nthis:\n  b_e = Get_local j\n\ngoal (18 subgoals):\n 1. \\<And>x14.\n       b_e = Get_local x14 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x15.\n       b_e = Set_local x15 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x16.\n       b_e = Tee_local x16 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x17.\n       b_e = Get_global x17 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x18.\n       b_e = Set_global x18 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x191 x192 x193 x194.\n       b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x201 x202 x203 x204.\n       b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. b_e = Current_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. b_e = Grow_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x23.\n        b_e = C x23 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 18 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = Get_local j\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms"], ["proof (prove)\nusing this:\n  b_e = Get_local j\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases \"j < length vs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = Get_local j;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     j < length vs\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>b_e = Get_local j;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     \\<not> j < length vs\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case True"], ["proof (state)\nthis:\n  j < length vs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = Get_local j;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     j < length vs\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>b_e = Get_local j;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     \\<not> j < length vs\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "then"], ["proof (chain)\npicking this:\n  j < length vs", "obtain vs1 v vs2 where \"vs = vs1@[v]@vs2\" \"length vs1 = j\""], ["proof (prove)\nusing this:\n  j < length vs\n\ngoal (1 subgoal):\n 1. (\\<And>vs1 v vs2.\n        \\<lbrakk>vs = vs1 @ [v] @ vs2; length vs1 = j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using id_take_nth_drop"], ["proof (prove)\nusing this:\n  j < length vs\n  ?i < length ?xs \\<Longrightarrow>\n  ?xs = take ?i ?xs @ ?xs ! ?i # drop (Suc ?i) ?xs\n\ngoal (1 subgoal):\n 1. (\\<And>vs1 v vs2.\n        \\<lbrakk>vs = vs1 @ [v] @ vs2; length vs1 = j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  vs = vs1 @ [v] @ vs2\n  length vs1 = j\n\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = Get_local j;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     j < length vs\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>b_e = Get_local j;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     \\<not> j < length vs\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  vs = vs1 @ [v] @ vs2\n  length vs1 = j\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms Get_local True\n              progress_L0_left[OF reduce.intros(8)]\n              is_const_list_vs_to_es_list[of \"rev ves\"]"], ["proof (prove)\nusing this:\n  vs = vs1 @ [v] @ vs2\n  length vs1 = j\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  b_e = Get_local j\n  j < length vs\n  \\<lbrakk>length ?vi1 = ?j1; const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vi1 @\n                               [?v1] @\n                               ?vs1;?cs @\n                                    [$Get_local\n ?j1]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vi1 @\n  [?v1] @ ?vs1;?cs @ [$C ?v1]\\<rparr>\n  const_list (vs_to_es ves)\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b_e = Get_local j;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     \\<not> j < length vs\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (17 subgoals):\n 1. \\<And>x15.\n       b_e = Set_local x15 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x16.\n       b_e = Tee_local x16 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x17.\n       b_e = Get_global x17 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x18.\n       b_e = Set_global x18 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x191 x192 x193 x194.\n       b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x201 x202 x203 x204.\n       b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. b_e = Current_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. b_e = Grow_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x23.\n       b_e = C x23 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x241 x242.\n        b_e = Unop_i x241 x242 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 17 subgoals...", "next"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>x15.\n       b_e = Set_local x15 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x16.\n       b_e = Tee_local x16 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x17.\n       b_e = Get_global x17 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x18.\n       b_e = Set_global x18 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x191 x192 x193 x194.\n       b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x201 x202 x203 x204.\n       b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. b_e = Current_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. b_e = Grow_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x23.\n       b_e = C x23 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x241 x242.\n        b_e = Unop_i x241 x242 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 17 subgoals...", "case (Set_local j)"], ["proof (state)\nthis:\n  b_e = Set_local j\n\ngoal (17 subgoals):\n 1. \\<And>x15.\n       b_e = Set_local x15 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x16.\n       b_e = Tee_local x16 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x17.\n       b_e = Get_global x17 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x18.\n       b_e = Set_global x18 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x191 x192 x193 x194.\n       b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x201 x202 x203 x204.\n       b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. b_e = Current_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. b_e = Grow_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x23.\n       b_e = C x23 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x241 x242.\n        b_e = Unop_i x241 x242 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 17 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = Set_local j\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms"], ["proof (prove)\nusing this:\n  b_e = Set_local j\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = Set_local j;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>b_e = Set_local j;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = Set_local j;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>b_e = Set_local j;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms Set_local"], ["proof (prove)\nusing this:\n  ves = a # list\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  b_e = Set_local j\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases \"j < length vs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Set_local j; j < length vs\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Set_local j; \\<not> j < length vs\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case True"], ["proof (state)\nthis:\n  j < length vs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Set_local j; j < length vs\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Set_local j; \\<not> j < length vs\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "obtain vs1 v vs2 where vs_def:\"vs = vs1@[v]@vs2\" \"length vs1 = j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>vs1 v vs2.\n        \\<lbrakk>vs = vs1 @ [v] @ vs2; length vs1 = j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using id_take_nth_drop True"], ["proof (prove)\nusing this:\n  ?i < length ?xs \\<Longrightarrow>\n  ?xs = take ?i ?xs @ ?xs ! ?i # drop (Suc ?i) ?xs\n  j < length vs\n\ngoal (1 subgoal):\n 1. (\\<And>vs1 v vs2.\n        \\<lbrakk>vs = vs1 @ [v] @ vs2; length vs1 = j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  vs = vs1 @ [v] @ vs2\n  length vs1 = j\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Set_local j; j < length vs\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Set_local j; \\<not> j < length vs\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  vs = vs1 @ [v] @ vs2\n  length vs1 = j\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms Set_local True Cons\n                progress_L0_left[OF reduce.intros(9)]\n                is_const_list_vs_to_es_list[of \"rev list\"]"], ["proof (prove)\nusing this:\n  vs = vs1 @ [v] @ vs2\n  length vs1 = j\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  b_e = Set_local j\n  j < length vs\n  ves = a # list\n  \\<lbrakk>length ?vi1 = ?j1; const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vi1 @\n                               [?v1] @\n                               ?vs1;?cs @\n                                    [$C ?v'1,\n                                     $Set_local\n ?j1]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vi1 @\n  [?v'1] @ ?vs1;?cs @ []\\<rparr>\n  const_list (vs_to_es list)\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Set_local j; \\<not> j < length vs\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b_e = Set_local j;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (16 subgoals):\n 1. \\<And>x16.\n       b_e = Tee_local x16 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x17.\n       b_e = Get_global x17 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x18.\n       b_e = Set_global x18 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x191 x192 x193 x194.\n       b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x201 x202 x203 x204.\n       b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. b_e = Current_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. b_e = Grow_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x23.\n       b_e = C x23 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x241 x242.\n       b_e = Unop_i x241 x242 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x251 x252.\n        b_e = Unop_f x251 x252 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>x16.\n       b_e = Tee_local x16 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x17.\n       b_e = Get_global x17 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x18.\n       b_e = Set_global x18 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x191 x192 x193 x194.\n       b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x201 x202 x203 x204.\n       b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. b_e = Current_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. b_e = Grow_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x23.\n       b_e = C x23 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x241 x242.\n       b_e = Unop_i x241 x242 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x251 x252.\n        b_e = Unop_f x251 x252 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 16 subgoals...", "case (Tee_local x16)"], ["proof (state)\nthis:\n  b_e = Tee_local x16\n\ngoal (16 subgoals):\n 1. \\<And>x16.\n       b_e = Tee_local x16 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x17.\n       b_e = Get_global x17 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x18.\n       b_e = Set_global x18 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x191 x192 x193 x194.\n       b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x201 x202 x203 x204.\n       b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. b_e = Current_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. b_e = Grow_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x23.\n       b_e = C x23 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x241 x242.\n       b_e = Unop_i x241 x242 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x251 x252.\n        b_e = Unop_f x251 x252 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 16 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = Tee_local x16\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms"], ["proof (prove)\nusing this:\n  b_e = Tee_local x16\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = Tee_local x16;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>b_e = Tee_local x16;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = Tee_local x16;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>b_e = Tee_local x16;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms Tee_local\n              progress_L0_left[OF reduce.intros(1)[OF reduce_simple.intros(41)]]\n                              is_const_list_vs_to_es_list[of \"rev list\"]"], ["proof (prove)\nusing this:\n  ves = a # list\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  b_e = Tee_local x16\n  \\<lbrakk>is_const ?v2; const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [?v2,\n                                    $Tee_local\n?i2]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n     [?v2, ?v2, $Set_local ?i2]\\<rparr>\n  const_list (vs_to_es list)\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by (auto simp add: is_const_def)"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b_e = Tee_local x16;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (15 subgoals):\n 1. \\<And>x17.\n       b_e = Get_global x17 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x18.\n       b_e = Set_global x18 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x191 x192 x193 x194.\n       b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x201 x202 x203 x204.\n       b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. b_e = Current_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. b_e = Grow_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x23.\n       b_e = C x23 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x241 x242.\n       b_e = Unop_i x241 x242 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x251 x252.\n       b_e = Unop_f x251 x252 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x261 x262.\n        b_e = Binop_i x261 x262 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>x17.\n       b_e = Get_global x17 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x18.\n       b_e = Set_global x18 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x191 x192 x193 x194.\n       b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x201 x202 x203 x204.\n       b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. b_e = Current_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. b_e = Grow_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x23.\n       b_e = C x23 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x241 x242.\n       b_e = Unop_i x241 x242 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x251 x252.\n       b_e = Unop_f x251 x252 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x261 x262.\n        b_e = Binop_i x261 x262 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 15 subgoals...", "case (Get_global x17)"], ["proof (state)\nthis:\n  b_e = Get_global x17\n\ngoal (15 subgoals):\n 1. \\<And>x17.\n       b_e = Get_global x17 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x18.\n       b_e = Set_global x18 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x191 x192 x193 x194.\n       b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x201 x202 x203 x204.\n       b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. b_e = Current_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. b_e = Grow_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x23.\n       b_e = C x23 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x241 x242.\n       b_e = Unop_i x241 x242 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x251 x252.\n       b_e = Unop_f x251 x252 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x261 x262.\n        b_e = Binop_i x261 x262 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 15 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = Get_global x17\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms\n            progress_L0_left[OF reduce.intros(10)]\n            is_const_list_vs_to_es_list[of \"rev ves\"]"], ["proof (prove)\nusing this:\n  b_e = Get_global x17\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  const_list ?cs \\<Longrightarrow>\n  \\<lparr>?s;?vs;?cs @\n                 [$Get_global\n                    ?j1]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n                         [$C sglob_val ?s ?i ?j1]\\<rparr>\n  const_list (vs_to_es ves)\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by (auto simp add: is_const_def)"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (14 subgoals):\n 1. \\<And>x18.\n       b_e = Set_global x18 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x191 x192 x193 x194.\n       b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x201 x202 x203 x204.\n       b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. b_e = Current_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. b_e = Grow_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x23.\n       b_e = C x23 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x241 x242.\n       b_e = Unop_i x241 x242 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x251 x252.\n       b_e = Unop_f x251 x252 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x261 x262.\n       b_e = Binop_i x261 x262 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x271 x272.\n        b_e = Binop_f x271 x272 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>x18.\n       b_e = Set_global x18 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x191 x192 x193 x194.\n       b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x201 x202 x203 x204.\n       b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. b_e = Current_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. b_e = Grow_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x23.\n       b_e = C x23 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x241 x242.\n       b_e = Unop_i x241 x242 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x251 x252.\n       b_e = Unop_f x251 x252 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x261 x262.\n       b_e = Binop_i x261 x262 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x271 x272.\n        b_e = Binop_f x271 x272 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 14 subgoals...", "case (Set_global x18)"], ["proof (state)\nthis:\n  b_e = Set_global x18\n\ngoal (14 subgoals):\n 1. \\<And>x18.\n       b_e = Set_global x18 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x191 x192 x193 x194.\n       b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x201 x202 x203 x204.\n       b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. b_e = Current_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. b_e = Grow_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x23.\n       b_e = C x23 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x241 x242.\n       b_e = Unop_i x241 x242 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x251 x252.\n       b_e = Unop_f x251 x252 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x261 x262.\n       b_e = Binop_i x261 x262 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x271 x272.\n        b_e = Binop_f x271 x272 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 14 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = Set_global x18\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms"], ["proof (prove)\nusing this:\n  b_e = Set_global x18\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = Set_global x18;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>b_e = Set_global x18;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = Set_global x18;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>b_e = Set_global x18;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms Set_global\n              progress_L0_left[OF reduce.intros(11)]\n              is_const_list_vs_to_es_list[of \"rev list\"]"], ["proof (prove)\nusing this:\n  ves = a # list\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  b_e = Set_global x18\n  \\<lbrakk>supdate_glob ?s ?i ?j1 ?v1 = ?s'; const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$C ?v1,\n                                    $Set_global\n?j1]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s';?vs;?cs @ []\\<rparr>\n  const_list (vs_to_es list)\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by (auto simp add: is_const_def)"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b_e = Set_global x18;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (13 subgoals):\n 1. \\<And>x191 x192 x193 x194.\n       b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x201 x202 x203 x204.\n       b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. b_e = Current_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. b_e = Grow_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x23.\n       b_e = C x23 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x241 x242.\n       b_e = Unop_i x241 x242 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x251 x252.\n       b_e = Unop_f x251 x252 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x261 x262.\n       b_e = Binop_i x261 x262 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x271 x272.\n       b_e = Binop_f x271 x272 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x281 x282.\n        b_e = Testop x281 x282 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>x191 x192 x193 x194.\n       b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x201 x202 x203 x204.\n       b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. b_e = Current_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. b_e = Grow_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x23.\n       b_e = C x23 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x241 x242.\n       b_e = Unop_i x241 x242 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x251 x252.\n       b_e = Unop_f x251 x252 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x261 x262.\n       b_e = Binop_i x261 x262 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x271 x272.\n       b_e = Binop_f x271 x272 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x281 x282.\n        b_e = Testop x281 x282 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 13 subgoals...", "case (Load x191 x192 x193 x194)"], ["proof (state)\nthis:\n  b_e = Load x191 x192 x193 x194\n\ngoal (13 subgoals):\n 1. \\<And>x191 x192 x193 x194.\n       b_e = Load x191 x192 x193 x194 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x201 x202 x203 x204.\n       b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. b_e = Current_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. b_e = Grow_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x23.\n       b_e = C x23 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x241 x242.\n       b_e = Unop_i x241 x242 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x251 x252.\n       b_e = Unop_f x251 x252 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x261 x262.\n       b_e = Binop_i x261 x262 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x271 x272.\n       b_e = Binop_f x271 x272 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x281 x282.\n        b_e = Testop x281 x282 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 13 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = Load x191 x192 x193 x194\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms"], ["proof (prove)\nusing this:\n  b_e = Load x191 x192 x193 x194\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases x192; cases ves)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>b_e = Load x191 x192 x193 x194;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     x192 = None; b_e = Load x191 x192 x193 x194;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>a.\n       \\<lbrakk>b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some a; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = []\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>a aa list.\n       \\<lbrakk>b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some a; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case None"], ["proof (state)\nthis:\n  x192 = None\n\ngoal (4 subgoals):\n 1. \\<lbrakk>b_e = Load x191 x192 x193 x194;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     x192 = None; b_e = Load x191 x192 x193 x194;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>a.\n       \\<lbrakk>b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some a; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = []\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>a aa list.\n       \\<lbrakk>b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some a; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (4 subgoals):\n 1. \\<lbrakk>b_e = Load x191 x192 x193 x194;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     x192 = None; b_e = Load x191 x192 x193 x194;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>a.\n       \\<lbrakk>b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some a; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = []\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>a aa list.\n       \\<lbrakk>b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some a; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using Load assms None"], ["proof (prove)\nusing this:\n  ves = a # list\n  b_e = Load x191 x192 x193 x194\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  x192 = None\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases a; cases \"smem_ind s i\")"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a = ConstInt32 x1; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1 aa.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a = ConstInt32 x1; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x2.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a = ConstInt64 x2; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x2 aa.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a = ConstInt64 x2; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x3.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a = ConstFloat32 x3; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x3 aa.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a = ConstFloat32 x3; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x4.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a = ConstFloat64 x4; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x4 aa.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a = ConstFloat64 x4; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (ConstInt32 x1)"], ["proof (state)\nthis:\n  a = ConstInt32 x1\n\ngoal (8 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a = ConstInt32 x1; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1 aa.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a = ConstInt32 x1; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x2.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a = ConstInt64 x2; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x2 aa.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a = ConstInt64 x2; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x3.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a = ConstFloat32 x3; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x3 aa.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a = ConstFloat32 x3; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x4.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a = ConstFloat64 x4; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x4 aa.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a = ConstFloat64 x4; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Some a)"], ["proof (state)\nthis:\n  smem_ind s i = Some a\n\ngoal (8 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a__ = ConstInt32 x1; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1 aa.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a__ = ConstInt32 x1; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x2.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a__ = ConstInt64 x2; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x2 aa.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a__ = ConstInt64 x2; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x3.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a__ = ConstFloat32 x3; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x3 aa.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a__ = ConstFloat32 x3; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x4.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a__ = ConstFloat64 x4; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x4 aa.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a__ = ConstFloat64 x4; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  smem_ind s i = Some a\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using Load assms None Cons ConstInt32\n              progress_L0_left[OF reduce.intros(12)]\n              progress_L0_left[OF reduce.intros(13)]\n              is_const_list_vs_to_es_list[of \"rev list\"]"], ["proof (prove)\nusing this:\n  smem_ind s i = Some a\n  b_e = Load x191 x192 x193 x194\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  x192 = None\n  ves = a__ # list\n  a__ = ConstInt32 x1\n  \\<lbrakk>smem_ind ?s ?i = Some ?j1; s.mem ?s ! ?j1 = ?m1;\n   load ?m1 (nat_of_int ?k1) ?off1 (t_length ?t1) = Some ?bs1;\n   const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$C ConstInt32 ?k1,\n                                    $Load ?t1 None ?a1\n?off1]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n       [$C wasm_deserialise ?bs1 ?t1]\\<rparr>\n  \\<lbrakk>smem_ind ?s ?i = Some ?j1; s.mem ?s ! ?j1 = ?m1;\n   load ?m1 (nat_of_int ?k1) ?off1 (t_length ?t1) = None;\n   const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$C ConstInt32 ?k1,\n                                    $Load ?t1 None ?a1\n?off1]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @ [Trap]\\<rparr>\n  const_list (vs_to_es list)\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by (cases \"load (s.mem s ! a) (nat_of_int x1) x194 (t_length x191)\" )\n             (auto simp add: is_const_def)"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a__ = ConstInt32 x1; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x2.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a__ = ConstInt64 x2; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x2 aa.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a__ = ConstInt64 x2; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x3.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a__ = ConstFloat32 x3; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x3 aa.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a__ = ConstFloat32 x3; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x4.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a__ = ConstFloat64 x4; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x4 aa.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; a__ = ConstFloat64 x4; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = None; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (3 subgoals):\n 1. \\<lbrakk>b_e = Load x191 x192 x193 x194;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     x192 = None; b_e = Load x191 x192 x193 x194;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a.\n       \\<lbrakk>b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some a; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = []\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>a aa list.\n       \\<lbrakk>b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some a; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>b_e = Load x191 x192 x193 x194;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     x192 = None; b_e = Load x191 x192 x193 x194;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a.\n       \\<lbrakk>b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some a; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = []\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>a aa list.\n       \\<lbrakk>b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some a; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case outer_some:(Some tp_sx)"], ["proof (state)\nthis:\n  x192 = Some tp_sx\n\ngoal (3 subgoals):\n 1. \\<lbrakk>b_e = Load x191 x192 x193 x194;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     x192 = None; b_e = Load x191 x192 x193 x194;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a.\n       \\<lbrakk>b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some a; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = []\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>a aa list.\n       \\<lbrakk>b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some a; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (3 subgoals):\n 1. \\<lbrakk>b_e = Load x191 x192 x193 x194;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     x192 = None; b_e = Load x191 x192 x193 x194;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a.\n       \\<lbrakk>b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some a; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = []\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>a aa list.\n       \\<lbrakk>b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some a; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using Load assms outer_some"], ["proof (prove)\nusing this:\n  ves = a # list\n  b_e = Load x191 x192 x193 x194\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  x192 = Some tp_sx\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases a; cases \"smem_ind s i\"; cases tp_sx)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x1 aa b.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a = ConstInt32 x1; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = None; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1 aa aaa b.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a = ConstInt32 x1; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = Some aa; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aaa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x2 aa b.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a = ConstInt64 x2; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = None; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x2 aa aaa b.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a = ConstInt64 x2; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = Some aa; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aaa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x3 aa b.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a = ConstFloat32 x3; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = None; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x3 aa aaa b.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a = ConstFloat32 x3; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = Some aa; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aaa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x4 aa b.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a = ConstFloat64 x4; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = None; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x4 aa aaa b.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a = ConstFloat64 x4; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = Some aa; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aaa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (ConstInt32 x1)"], ["proof (state)\nthis:\n  a = ConstInt32 x1\n\ngoal (8 subgoals):\n 1. \\<And>x1 aa b.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a = ConstInt32 x1; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = None; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1 aa aaa b.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a = ConstInt32 x1; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = Some aa; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aaa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x2 aa b.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a = ConstInt64 x2; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = None; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x2 aa aaa b.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a = ConstInt64 x2; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = Some aa; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aaa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x3 aa b.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a = ConstFloat32 x3; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = None; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x3 aa aaa b.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a = ConstFloat32 x3; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = Some aa; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aaa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x4 aa b.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a = ConstFloat64 x4; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = None; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x4 aa aaa b.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a = ConstFloat64 x4; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = Some aa; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aaa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Pair tp sx)"], ["proof (state)\nthis:\n  tp_sx = (tp, sx)\n\ngoal (8 subgoals):\n 1. \\<And>x1 aa b.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a = ConstInt32 x1; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = None; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1 aa aaa b.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a = ConstInt32 x1; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = Some aa; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aaa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x2 aa b.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a = ConstInt64 x2; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = None; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x2 aa aaa b.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a = ConstInt64 x2; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = Some aa; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aaa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x3 aa b.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a = ConstFloat32 x3; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = None; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x3 aa aaa b.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a = ConstFloat32 x3; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = Some aa; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aaa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x4 aa b.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a = ConstFloat64 x4; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = None; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x4 aa aaa b.\n       \\<lbrakk>ves = a # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a = ConstFloat64 x4; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = Some aa; ves = a # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aaa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Some a)"], ["proof (state)\nthis:\n  smem_ind s i = Some a\n\ngoal (8 subgoals):\n 1. \\<And>x1 aa b.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a__ = ConstInt32 x1; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = None; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1 aa aaa b.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a__ = ConstInt32 x1; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = Some aa; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aaa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x2 aa b.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a__ = ConstInt64 x2; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = None; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x2 aa aaa b.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a__ = ConstInt64 x2; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = Some aa; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aaa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x3 aa b.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a__ = ConstFloat32 x3; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = None; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x3 aa aaa b.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a__ = ConstFloat32 x3; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = Some aa; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aaa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x4 aa b.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a__ = ConstFloat64 x4; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = None; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x4 aa aaa b.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a__ = ConstFloat64 x4; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = Some aa; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aaa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  smem_ind s i = Some a\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using Load assms outer_some Cons ConstInt32 Pair\n                  progress_L0_left[OF reduce.intros(14)]\n                  progress_L0_left[OF reduce.intros(15)]\n                  is_const_list_vs_to_es_list[of \"rev list\"]"], ["proof (prove)\nusing this:\n  smem_ind s i = Some a\n  b_e = Load x191 x192 x193 x194\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  x192 = Some tp_sx\n  ves = a__ # list\n  a__ = ConstInt32 x1\n  tp_sx = (tp, sx)\n  \\<lbrakk>smem_ind ?s ?i = Some ?j1; s.mem ?s ! ?j1 = ?m1;\n   load_packed ?sx1 ?m1 (nat_of_int ?k1) ?off1 (tp_length ?tp1)\n    (t_length ?t1) =\n   Some ?bs1;\n   const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$C ConstInt32 ?k1,\n                                    $Load ?t1 (Some (?tp1, ?sx1)) ?a1\n?off1]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n       [$C wasm_deserialise ?bs1 ?t1]\\<rparr>\n  \\<lbrakk>smem_ind ?s ?i = Some ?j1; s.mem ?s ! ?j1 = ?m1;\n   load_packed ?sx1 ?m1 (nat_of_int ?k1) ?off1 (tp_length ?tp1)\n    (t_length ?t1) =\n   None;\n   const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$C ConstInt32 ?k1,\n                                    $Load ?t1 (Some (?tp1, ?sx1)) ?a1\n?off1]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @ [Trap]\\<rparr>\n  const_list (vs_to_es list)\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by (cases \"load_packed sx (s.mem s ! a) (nat_of_int x1) x194 (tp_length tp) (t_length x191)\")\n               (auto simp add: is_const_def)"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (7 subgoals):\n 1. \\<And>x1 aa b.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a__ = ConstInt32 x1; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = None; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x2 aa b.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a__ = ConstInt64 x2; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = None; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x2 aa aaa b.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a__ = ConstInt64 x2; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = Some aa; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aaa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x3 aa b.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a__ = ConstFloat32 x3; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = None; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x3 aa aaa b.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a__ = ConstFloat32 x3; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = Some aa; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aaa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x4 aa b.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a__ = ConstFloat64 x4; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = None; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x4 aa aaa b.\n       \\<lbrakk>ves = a__ # list; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; a__ = ConstFloat64 x4; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; smem_ind s i = Some aa; ves = a__ # list;\n        b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some tp_sx; tp_sx = (aaa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = Load x191 x192 x193 x194;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     x192 = None; b_e = Load x191 x192 x193 x194;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a.\n       \\<lbrakk>b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        x192 = Some a; b_e = Load x191 x192 x193 x194;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = []\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (12 subgoals):\n 1. \\<And>x201 x202 x203 x204.\n       b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. b_e = Current_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. b_e = Grow_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x23.\n       b_e = C x23 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x241 x242.\n       b_e = Unop_i x241 x242 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x251 x252.\n       b_e = Unop_f x251 x252 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x261 x262.\n       b_e = Binop_i x261 x262 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x271 x272.\n       b_e = Binop_f x271 x272 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x281 x282.\n       b_e = Testop x281 x282 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x291 x292.\n        b_e = Relop_i x291 x292 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>x201 x202 x203 x204.\n       b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. b_e = Current_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. b_e = Grow_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x23.\n       b_e = C x23 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x241 x242.\n       b_e = Unop_i x241 x242 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x251 x252.\n       b_e = Unop_f x251 x252 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x261 x262.\n       b_e = Binop_i x261 x262 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x271 x272.\n       b_e = Binop_f x271 x272 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x281 x282.\n       b_e = Testop x281 x282 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x291 x292.\n        b_e = Relop_i x291 x292 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 12 subgoals...", "case (Store t tp a off)"], ["proof (state)\nthis:\n  b_e = Store t tp a off\n\ngoal (12 subgoals):\n 1. \\<And>x201 x202 x203 x204.\n       b_e = Store x201 x202 x203 x204 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. b_e = Current_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. b_e = Grow_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x23.\n       b_e = C x23 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x241 x242.\n       b_e = Unop_i x241 x242 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x251 x252.\n       b_e = Unop_f x251 x252 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x261 x262.\n       b_e = Binop_i x261 x262 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x271 x272.\n       b_e = Binop_f x271 x272 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x281 x282.\n       b_e = Testop x281 x282 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x291 x292.\n        b_e = Relop_i x291 x292 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 12 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = Store t tp a off\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms"], ["proof (prove)\nusing this:\n  b_e = Store t tp a off\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = Store t tp a off;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>aa list.\n       \\<lbrakk>b_e = Store t tp a off;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case outer_Cons:(Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = Store t tp a__ off;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>aa list.\n       \\<lbrakk>b_e = Store t tp a__ off;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using Store assms"], ["proof (prove)\nusing this:\n  ves = a # list\n  b_e = Store t tp a__ off\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases list)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ves = a # list; b_e = Store t tp a__ off;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     list = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>ab lista.\n       \\<lbrakk>ves = a # list; b_e = Store t tp a__ off;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = ab # lista\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Cons a' list')"], ["proof (state)\nthis:\n  list = a' # list'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ves = a # list; b_e = Store t tp a__ off;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     list = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>ab lista.\n       \\<lbrakk>ves = a # list; b_e = Store t tp a__ off;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        list = ab # lista\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  list = a' # list'\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using Store outer_Cons assms"], ["proof (prove)\nusing this:\n  list = a' # list'\n  b_e = Store t tp a__ off\n  ves = a # list\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases a')"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>list = a' # list'; b_e = Store t tp a__ off; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x2.\n       \\<lbrakk>list = a' # list'; b_e = Store t tp a__ off; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x3.\n       \\<lbrakk>list = a' # list'; b_e = Store t tp a__ off; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x4.\n       \\<lbrakk>list = a' # list'; b_e = Store t tp a__ off; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (ConstInt32 x1)"], ["proof (state)\nthis:\n  a' = ConstInt32 x1\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>list = a' # list'; b_e = Store t tp a__ off; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a' = ConstInt32 x1\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x2.\n       \\<lbrakk>list = a' # list'; b_e = Store t tp a__ off; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x3.\n       \\<lbrakk>list = a' # list'; b_e = Store t tp a__ off; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x4.\n       \\<lbrakk>list = a' # list'; b_e = Store t tp a__ off; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  a' = ConstInt32 x1\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using Store outer_Cons Cons assms"], ["proof (prove)\nusing this:\n  a' = ConstInt32 x1\n  b_e = Store t tp a__ off\n  ves = a # list\n  list = a' # list'\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases \"(types_agree t a)\"; cases \"smem_ind s i\")"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>a' = ConstInt32 x1; b_e = Store t tp a__ off; ves = a # list;\n     list = a' # list';\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     types_agree t a; a' = ConstInt32 x1; b_e = Store t tp a__ off;\n     ves = a # list; list = a' # list';\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     smem_ind s i = None\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>ab.\n       \\<lbrakk>a' = ConstInt32 x1; b_e = Store t tp a__ off;\n        ves = a # list; list = a' # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        types_agree t a; a' = ConstInt32 x1; b_e = Store t tp a__ off;\n        ves = a # list; list = a' # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        smem_ind s i = Some ab\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<lbrakk>a' = ConstInt32 x1; b_e = Store t tp a__ off; ves = a # list;\n     list = a' # list';\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     \\<not> types_agree t a; a' = ConstInt32 x1; b_e = Store t tp a__ off;\n     ves = a # list; list = a' # list';\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     smem_ind s i = None\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>ab.\n       \\<lbrakk>a' = ConstInt32 x1; b_e = Store t tp a__ off;\n        ves = a # list; list = a' # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        \\<not> types_agree t a; a' = ConstInt32 x1;\n        b_e = Store t tp a__ off; ves = a # list; list = a' # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        smem_ind s i = Some ab\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case True"], ["proof (state)\nthis:\n  types_agree t a\n\ngoal (4 subgoals):\n 1. \\<lbrakk>a' = ConstInt32 x1; b_e = Store t tp a__ off; ves = a # list;\n     list = a' # list';\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     types_agree t a; a' = ConstInt32 x1; b_e = Store t tp a__ off;\n     ves = a # list; list = a' # list';\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     smem_ind s i = None\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>ab.\n       \\<lbrakk>a' = ConstInt32 x1; b_e = Store t tp a__ off;\n        ves = a # list; list = a' # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        types_agree t a; a' = ConstInt32 x1; b_e = Store t tp a__ off;\n        ves = a # list; list = a' # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        smem_ind s i = Some ab\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<lbrakk>a' = ConstInt32 x1; b_e = Store t tp a__ off; ves = a # list;\n     list = a' # list';\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     \\<not> types_agree t a; a' = ConstInt32 x1; b_e = Store t tp a__ off;\n     ves = a # list; list = a' # list';\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     smem_ind s i = None\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>ab.\n       \\<lbrakk>a' = ConstInt32 x1; b_e = Store t tp a__ off;\n        ves = a # list; list = a' # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        \\<not> types_agree t a; a' = ConstInt32 x1;\n        b_e = Store t tp a__ off; ves = a # list; list = a' # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        smem_ind s i = Some ab\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case outer_Some:(Some j)"], ["proof (state)\nthis:\n  smem_ind s i = Some j\n\ngoal (4 subgoals):\n 1. \\<lbrakk>a' = ConstInt32 x1; b_e = Store t tp a__ off; ves = a # list;\n     list = a' # list';\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     types_agree t a; a' = ConstInt32 x1; b_e = Store t tp a__ off;\n     ves = a # list; list = a' # list';\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     smem_ind s i = None\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>ab.\n       \\<lbrakk>a' = ConstInt32 x1; b_e = Store t tp a__ off;\n        ves = a # list; list = a' # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        types_agree t a; a' = ConstInt32 x1; b_e = Store t tp a__ off;\n        ves = a # list; list = a' # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        smem_ind s i = Some ab\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<lbrakk>a' = ConstInt32 x1; b_e = Store t tp a__ off; ves = a # list;\n     list = a' # list';\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     \\<not> types_agree t a; a' = ConstInt32 x1; b_e = Store t tp a__ off;\n     ves = a # list; list = a' # list';\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     smem_ind s i = None\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>ab.\n       \\<lbrakk>a' = ConstInt32 x1; b_e = Store t tp a__ off;\n        ves = a # list; list = a' # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        \\<not> types_agree t a; a' = ConstInt32 x1;\n        b_e = Store t tp a__ off; ves = a # list; list = a' # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        smem_ind s i = Some ab\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases tp)"], ["proof (state)\ngoal (2 subgoals):\n 1. tp = None \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a.\n       tp = Some a \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case None"], ["proof (state)\nthis:\n  tp = None\n\ngoal (2 subgoals):\n 1. tp = None \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a.\n       tp = Some a \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  tp = None\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using Store outer_Cons Cons assms True outer_Some ConstInt32\n                      progress_L0_left[OF reduce.intros(16)]\n                      progress_L0_left[OF reduce.intros(17)]\n                      is_const_list_vs_to_es_list[of \"rev list'\"]"], ["proof (prove)\nusing this:\n  tp = None\n  b_e = Store t tp a__ off\n  ves = a # list\n  list = a' # list'\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  types_agree t a\n  smem_ind s i = Some j\n  a' = ConstInt32 x1\n  \\<lbrakk>types_agree ?t1 ?v1; smem_ind ?s ?i = Some ?j1;\n   s.mem ?s ! ?j1 = ?m1;\n   store ?m1 (nat_of_int ?k1) ?off1 (bits ?v1) (t_length ?t1) = Some ?mem'1;\n   const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$C ConstInt32 ?k1, $C ?v1,\n                                    $Store ?t1 None ?a1\n?off1]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s\n                    \\<lparr>s.mem := (s.mem ?s)\n                              [?j1 := ?mem'1]\\<rparr>;?vs;?cs @ []\\<rparr>\n  \\<lbrakk>types_agree ?t1 ?v1; smem_ind ?s ?i = Some ?j1;\n   s.mem ?s ! ?j1 = ?m1;\n   store ?m1 (nat_of_int ?k1) ?off1 (bits ?v1) (t_length ?t1) = None;\n   const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$C ConstInt32 ?k1, $C ?v1,\n                                    $Store ?t1 None ?a1\n?off1]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @ [Trap]\\<rparr>\n  const_list (vs_to_es list')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by (cases \"store (s.mem s ! j) (nat_of_int x1) off (bits a) (t_length t)\")\n                   auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       tp = Some a \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       tp = Some a \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Some the_tp)"], ["proof (state)\nthis:\n  tp = Some the_tp\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       tp = Some a \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  tp = Some the_tp\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using Store outer_Cons Cons assms True outer_Some ConstInt32\n                      progress_L0_left[OF reduce.intros(18)]\n                      progress_L0_left[OF reduce.intros(19)]\n                      is_const_list_vs_to_es_list[of \"rev list'\"]"], ["proof (prove)\nusing this:\n  tp = Some the_tp\n  b_e = Store t tp a__ off\n  ves = a # list\n  list = a' # list'\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  types_agree t a\n  smem_ind s i = Some j\n  a' = ConstInt32 x1\n  \\<lbrakk>types_agree ?t1 ?v1; smem_ind ?s ?i = Some ?j1;\n   s.mem ?s ! ?j1 = ?m1;\n   store_packed ?m1 (nat_of_int ?k1) ?off1 (bits ?v1) (tp_length ?tp1) =\n   Some ?mem'1;\n   const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$C ConstInt32 ?k1, $C ?v1,\n                                    $Store ?t1 (Some ?tp1) ?a1\n?off1]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s\n                    \\<lparr>s.mem := (s.mem ?s)\n                              [?j1 := ?mem'1]\\<rparr>;?vs;?cs @ []\\<rparr>\n  \\<lbrakk>types_agree ?t1 ?v1; smem_ind ?s ?i = Some ?j1;\n   s.mem ?s ! ?j1 = ?m1;\n   store_packed ?m1 (nat_of_int ?k1) ?off1 (bits ?v1) (tp_length ?tp1) =\n   None;\n   const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$C ConstInt32 ?k1, $C ?v1,\n                                    $Store ?t1 (Some ?tp1) ?a1\n?off1]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @ [Trap]\\<rparr>\n  const_list (vs_to_es list')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by (cases \"store_packed (s.mem s ! j) (nat_of_int x1) off (bits a) (tp_length the_tp)\")\n                   auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (3 subgoals):\n 1. \\<lbrakk>a' = ConstInt32 x1; b_e = Store t tp a__ off; ves = a # list;\n     list = a' # list';\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     types_agree t a; a' = ConstInt32 x1; b_e = Store t tp a__ off;\n     ves = a # list; list = a' # list';\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     smem_ind s i = None\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>a' = ConstInt32 x1; b_e = Store t tp a__ off; ves = a # list;\n     list = a' # list';\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     \\<not> types_agree t a; a' = ConstInt32 x1; b_e = Store t tp a__ off;\n     ves = a # list; list = a' # list';\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     smem_ind s i = None\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>ab.\n       \\<lbrakk>a' = ConstInt32 x1; b_e = Store t tp a__ off;\n        ves = a # list; list = a' # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        \\<not> types_agree t a; a' = ConstInt32 x1;\n        b_e = Store t tp a__ off; ves = a # list; list = a' # list';\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        smem_ind s i = Some ab\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed (cases tp; auto)+"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       \\<lbrakk>list = a' # list'; b_e = Store t tp a__ off; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a' = ConstInt64 x2\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x3.\n       \\<lbrakk>list = a' # list'; b_e = Store t tp a__ off; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a' = ConstFloat32 x3\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x4.\n       \\<lbrakk>list = a' # list'; b_e = Store t tp a__ off; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        a' = ConstFloat64 x4\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed (cases tp; auto)+"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ves = a # list; b_e = Store t tp a__ off;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     list = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed (cases tp; auto)"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b_e = Store t tp a__ off;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed (cases tp; auto)"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (11 subgoals):\n 1. b_e = Current_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. b_e = Grow_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x23.\n       b_e = C x23 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x241 x242.\n       b_e = Unop_i x241 x242 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x251 x252.\n       b_e = Unop_f x251 x252 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x261 x262.\n       b_e = Binop_i x261 x262 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x271 x272.\n       b_e = Binop_f x271 x272 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x281 x282.\n       b_e = Testop x281 x282 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x291 x292.\n       b_e = Relop_i x291 x292 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x301 x302.\n        b_e = Relop_f x301 x302 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. b_e = Current_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. b_e = Grow_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x23.\n       b_e = C x23 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x241 x242.\n       b_e = Unop_i x241 x242 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x251 x252.\n       b_e = Unop_f x251 x252 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x261 x262.\n       b_e = Binop_i x261 x262 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x271 x272.\n       b_e = Binop_f x271 x272 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x281 x282.\n       b_e = Testop x281 x282 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x291 x292.\n       b_e = Relop_i x291 x292 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x301 x302.\n        b_e = Relop_f x301 x302 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 11 subgoals...", "case Current_memory"], ["proof (state)\nthis:\n  b_e = Current_memory\n\ngoal (11 subgoals):\n 1. b_e = Current_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. b_e = Grow_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x23.\n       b_e = C x23 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x241 x242.\n       b_e = Unop_i x241 x242 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x251 x252.\n       b_e = Unop_f x251 x252 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x261 x262.\n       b_e = Binop_i x261 x262 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x271 x272.\n       b_e = Binop_f x271 x272 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x281 x282.\n       b_e = Testop x281 x282 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x291 x292.\n       b_e = Relop_i x291 x292 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x301 x302.\n        b_e = Relop_f x301 x302 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\nA total of 11 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = Current_memory\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms"], ["proof (prove)\nusing this:\n  b_e = Current_memory\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases \"smem_ind s i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = Current_memory;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     smem_ind s i = None\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a.\n       \\<lbrakk>b_e = Current_memory;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        smem_ind s i = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Some a)"], ["proof (state)\nthis:\n  smem_ind s i = Some a\n\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = Current_memory;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     smem_ind s i = None\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a.\n       \\<lbrakk>b_e = Current_memory;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        smem_ind s i = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  smem_ind s i = Some a\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms Current_memory \n              progress_L0_left[OF reduce.intros(20)]\n              is_const_list_vs_to_es_list[of \"rev ves\"]"], ["proof (prove)\nusing this:\n  smem_ind s i = Some a\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  b_e = Current_memory\n  \\<lbrakk>smem_ind ?s ?i = Some ?j1; s.mem ?s ! ?j1 = ?m1;\n   mem_size ?m1 = ?n1; const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$Current_memory]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n               [$C ConstInt32 (int_of_nat ?n1)]\\<rparr>\n  const_list (vs_to_es ves)\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by (auto simp add: is_const_def)"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b_e = Current_memory;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     smem_ind s i = None\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (10 subgoals):\n 1. b_e = Grow_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x23.\n       b_e = C x23 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x241 x242.\n       b_e = Unop_i x241 x242 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x251 x252.\n       b_e = Unop_f x251 x252 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x261 x262.\n       b_e = Binop_i x261 x262 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x271 x272.\n       b_e = Binop_f x271 x272 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x281 x282.\n       b_e = Testop x281 x282 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x291 x292.\n       b_e = Relop_i x291 x292 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x301 x302.\n       b_e = Relop_f x301 x302 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x311 x312 x313 x314.\n        b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. b_e = Grow_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x23.\n       b_e = C x23 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x241 x242.\n       b_e = Unop_i x241 x242 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x251 x252.\n       b_e = Unop_f x251 x252 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x261 x262.\n       b_e = Binop_i x261 x262 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x271 x272.\n       b_e = Binop_f x271 x272 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x281 x282.\n       b_e = Testop x281 x282 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x291 x292.\n       b_e = Relop_i x291 x292 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x301 x302.\n       b_e = Relop_f x301 x302 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x311 x312 x313 x314.\n        b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case Grow_memory"], ["proof (state)\nthis:\n  b_e = Grow_memory\n\ngoal (10 subgoals):\n 1. b_e = Grow_memory \\<Longrightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x23.\n       b_e = C x23 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x241 x242.\n       b_e = Unop_i x241 x242 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x251 x252.\n       b_e = Unop_f x251 x252 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x261 x262.\n       b_e = Binop_i x261 x262 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x271 x272.\n       b_e = Binop_f x271 x272 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x281 x282.\n       b_e = Testop x281 x282 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x291 x292.\n       b_e = Relop_i x291 x292 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x301 x302.\n       b_e = Relop_f x301 x302 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 10. \\<And>x311 x312 x313 x314.\n        b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n        \\<lparr>s;vs;vs_to_es ves @\n                     [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = Grow_memory\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms"], ["proof (prove)\nusing this:\n  b_e = Grow_memory\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = Grow_memory;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>b_e = Grow_memory;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = Grow_memory;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>b_e = Grow_memory;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms Grow_memory"], ["proof (prove)\nusing this:\n  ves = a # list\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  b_e = Grow_memory\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases a; cases \"smem_ind s i\")"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x2 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x3 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstFloat64 x4; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x4 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstFloat64 x4; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (ConstInt32 x1)"], ["proof (state)\nthis:\n  a = ConstInt32 x1\n\ngoal (8 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x2 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x3 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstFloat64 x4; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x4 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstFloat64 x4; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Some j)"], ["proof (state)\nthis:\n  smem_ind s i = Some j\n\ngoal (8 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x1 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x2 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x3 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstFloat64 x4; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x4 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstFloat64 x4; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  smem_ind s i = Some j\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms Grow_memory Cons ConstInt32\n                             progress_L0_left[OF reduce.intros(21)]\n                             progress_L0_left[OF reduce.intros(22)]\n              is_const_list_vs_to_es_list[of \"rev list\"]"], ["proof (prove)\nusing this:\n  smem_ind s i = Some j\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  b_e = Grow_memory\n  ves = a # list\n  a = ConstInt32 x1\n  \\<lbrakk>smem_ind ?s ?i = Some ?j1; s.mem ?s ! ?j1 = ?m1;\n   mem_size ?m1 = ?n1; mem_grow ?m1 (nat_of_int ?c1) = ?mem'1;\n   const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$C ConstInt32 ?c1,\n                                    $Grow_memory]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s\n                    \\<lparr>s.mem := (s.mem ?s)\n                              [?j1 :=\n                                 ?mem'1]\\<rparr>;?vs;?cs @\n               [$C ConstInt32 (int_of_nat ?n1)]\\<rparr>\n  \\<lbrakk>smem_ind ?s ?i = Some ?j1; s.mem ?s ! ?j1 = ?m1;\n   mem_size ?m1 = ?n1; const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$C ConstInt32 ?c1,\n                                    $Grow_memory]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n            [$C ConstInt32 int32_minus_one]\\<rparr>\n  const_list (vs_to_es list)\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by (cases \"mem_grow_impl (s.mem s ! j) (nat_of_int x1)\") (auto simp add: mem_grow_impl_correct is_const_def)"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstInt32 x1; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x2.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x2 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstInt64 x2; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x3.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x3 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstFloat32 x3; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x4.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstFloat64 x4; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = None\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x4 aa.\n       \\<lbrakk>ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; a = ConstFloat64 x4; ves = a # list;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        b_e = Grow_memory; smem_ind s i = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b_e = Grow_memory;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (9 subgoals):\n 1. \\<And>x23.\n       b_e = C x23 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x241 x242.\n       b_e = Unop_i x241 x242 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x251 x252.\n       b_e = Unop_f x251 x252 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x261 x262.\n       b_e = Binop_i x261 x262 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x271 x272.\n       b_e = Binop_f x271 x272 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x281 x282.\n       b_e = Testop x281 x282 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x291 x292.\n       b_e = Relop_i x291 x292 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x301 x302.\n       b_e = Relop_f x301 x302 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x311 x312 x313 x314.\n       b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>x23.\n       b_e = C x23 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x241 x242.\n       b_e = Unop_i x241 x242 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x251 x252.\n       b_e = Unop_f x251 x252 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x261 x262.\n       b_e = Binop_i x261 x262 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x271 x272.\n       b_e = Binop_f x271 x272 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x281 x282.\n       b_e = Testop x281 x282 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x291 x292.\n       b_e = Relop_i x291 x292 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x301 x302.\n       b_e = Relop_f x301 x302 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x311 x312 x313 x314.\n       b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (EConst x23)"], ["proof (state)\nthis:\n  b_e = C x23\n\ngoal (9 subgoals):\n 1. \\<And>x23.\n       b_e = C x23 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x241 x242.\n       b_e = Unop_i x241 x242 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x251 x252.\n       b_e = Unop_f x251 x252 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x261 x262.\n       b_e = Binop_i x261 x262 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x271 x272.\n       b_e = Binop_f x271 x272 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x281 x282.\n       b_e = Testop x281 x282 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x291 x292.\n       b_e = Relop_i x291 x292 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x301 x302.\n       b_e = Relop_f x301 x302 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 9. \\<And>x311 x312 x313 x314.\n       b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = C x23\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms"], ["proof (prove)\nusing this:\n  b_e = C x23\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (8 subgoals):\n 1. \\<And>x241 x242.\n       b_e = Unop_i x241 x242 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x251 x252.\n       b_e = Unop_f x251 x252 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x261 x262.\n       b_e = Binop_i x261 x262 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x271 x272.\n       b_e = Binop_f x271 x272 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x281 x282.\n       b_e = Testop x281 x282 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x291 x292.\n       b_e = Relop_i x291 x292 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x301 x302.\n       b_e = Relop_f x301 x302 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x311 x312 x313 x314.\n       b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x241 x242.\n       b_e = Unop_i x241 x242 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x251 x252.\n       b_e = Unop_f x251 x252 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x261 x262.\n       b_e = Binop_i x261 x262 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x271 x272.\n       b_e = Binop_f x271 x272 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x281 x282.\n       b_e = Testop x281 x282 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x291 x292.\n       b_e = Relop_i x291 x292 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x301 x302.\n       b_e = Relop_f x301 x302 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x311 x312 x313 x314.\n       b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Unop_i x241 x242)"], ["proof (state)\nthis:\n  b_e = Unop_i x241 x242\n\ngoal (8 subgoals):\n 1. \\<And>x241 x242.\n       b_e = Unop_i x241 x242 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x251 x252.\n       b_e = Unop_f x251 x252 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x261 x262.\n       b_e = Binop_i x261 x262 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x271 x272.\n       b_e = Binop_f x271 x272 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x281 x282.\n       b_e = Testop x281 x282 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x291 x292.\n       b_e = Relop_i x291 x292 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x301 x302.\n       b_e = Relop_f x301 x302 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 8. \\<And>x311 x312 x313 x314.\n       b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = Unop_i x241 x242\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using run_step_basic_unop_testop_sound[OF assms]"], ["proof (prove)\nusing this:\n  b_e = Unop_i x241 x242\n  b_e = Unop_i ?t ?iop \\<or>\n  b_e = Unop_f ?t ?fop \\<or> b_e = Testop ?t ?testop \\<Longrightarrow>\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (7 subgoals):\n 1. \\<And>x251 x252.\n       b_e = Unop_f x251 x252 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x261 x262.\n       b_e = Binop_i x261 x262 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x271 x272.\n       b_e = Binop_f x271 x272 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x281 x282.\n       b_e = Testop x281 x282 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x291 x292.\n       b_e = Relop_i x291 x292 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x301 x302.\n       b_e = Relop_f x301 x302 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x311 x312 x313 x314.\n       b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x251 x252.\n       b_e = Unop_f x251 x252 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x261 x262.\n       b_e = Binop_i x261 x262 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x271 x272.\n       b_e = Binop_f x271 x272 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x281 x282.\n       b_e = Testop x281 x282 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x291 x292.\n       b_e = Relop_i x291 x292 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x301 x302.\n       b_e = Relop_f x301 x302 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x311 x312 x313 x314.\n       b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Unop_f x251 x252)"], ["proof (state)\nthis:\n  b_e = Unop_f x251 x252\n\ngoal (7 subgoals):\n 1. \\<And>x251 x252.\n       b_e = Unop_f x251 x252 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x261 x262.\n       b_e = Binop_i x261 x262 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x271 x272.\n       b_e = Binop_f x271 x272 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x281 x282.\n       b_e = Testop x281 x282 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x291 x292.\n       b_e = Relop_i x291 x292 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x301 x302.\n       b_e = Relop_f x301 x302 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 7. \\<And>x311 x312 x313 x314.\n       b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = Unop_f x251 x252\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using run_step_basic_unop_testop_sound[OF assms]"], ["proof (prove)\nusing this:\n  b_e = Unop_f x251 x252\n  b_e = Unop_i ?t ?iop \\<or>\n  b_e = Unop_f ?t ?fop \\<or> b_e = Testop ?t ?testop \\<Longrightarrow>\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (6 subgoals):\n 1. \\<And>x261 x262.\n       b_e = Binop_i x261 x262 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x271 x272.\n       b_e = Binop_f x271 x272 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x281 x282.\n       b_e = Testop x281 x282 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x291 x292.\n       b_e = Relop_i x291 x292 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x301 x302.\n       b_e = Relop_f x301 x302 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x311 x312 x313 x314.\n       b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x261 x262.\n       b_e = Binop_i x261 x262 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x271 x272.\n       b_e = Binop_f x271 x272 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x281 x282.\n       b_e = Testop x281 x282 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x291 x292.\n       b_e = Relop_i x291 x292 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x301 x302.\n       b_e = Relop_f x301 x302 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x311 x312 x313 x314.\n       b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Binop_i x261 x262)"], ["proof (state)\nthis:\n  b_e = Binop_i x261 x262\n\ngoal (6 subgoals):\n 1. \\<And>x261 x262.\n       b_e = Binop_i x261 x262 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x271 x272.\n       b_e = Binop_f x271 x272 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x281 x282.\n       b_e = Testop x281 x282 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x291 x292.\n       b_e = Relop_i x291 x292 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x301 x302.\n       b_e = Relop_f x301 x302 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 6. \\<And>x311 x312 x313 x314.\n       b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = Binop_i x261 x262\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using run_step_basic_binop_relop_sound[OF assms]"], ["proof (prove)\nusing this:\n  b_e = Binop_i x261 x262\n  b_e = Binop_i ?t ?iop \\<or>\n  b_e = Binop_f ?t ?fop \\<or>\n  b_e = Relop_i ?t ?irop \\<or> b_e = Relop_f ?t ?frop \\<Longrightarrow>\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (5 subgoals):\n 1. \\<And>x271 x272.\n       b_e = Binop_f x271 x272 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x281 x282.\n       b_e = Testop x281 x282 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x291 x292.\n       b_e = Relop_i x291 x292 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x301 x302.\n       b_e = Relop_f x301 x302 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x311 x312 x313 x314.\n       b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x271 x272.\n       b_e = Binop_f x271 x272 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x281 x282.\n       b_e = Testop x281 x282 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x291 x292.\n       b_e = Relop_i x291 x292 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x301 x302.\n       b_e = Relop_f x301 x302 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x311 x312 x313 x314.\n       b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Binop_f x271 x272)"], ["proof (state)\nthis:\n  b_e = Binop_f x271 x272\n\ngoal (5 subgoals):\n 1. \\<And>x271 x272.\n       b_e = Binop_f x271 x272 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x281 x282.\n       b_e = Testop x281 x282 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x291 x292.\n       b_e = Relop_i x291 x292 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x301 x302.\n       b_e = Relop_f x301 x302 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x311 x312 x313 x314.\n       b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = Binop_f x271 x272\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using run_step_basic_binop_relop_sound[OF assms]"], ["proof (prove)\nusing this:\n  b_e = Binop_f x271 x272\n  b_e = Binop_i ?t ?iop \\<or>\n  b_e = Binop_f ?t ?fop \\<or>\n  b_e = Relop_i ?t ?irop \\<or> b_e = Relop_f ?t ?frop \\<Longrightarrow>\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (4 subgoals):\n 1. \\<And>x281 x282.\n       b_e = Testop x281 x282 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x291 x292.\n       b_e = Relop_i x291 x292 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x301 x302.\n       b_e = Relop_f x301 x302 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x311 x312 x313 x314.\n       b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x281 x282.\n       b_e = Testop x281 x282 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x291 x292.\n       b_e = Relop_i x291 x292 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x301 x302.\n       b_e = Relop_f x301 x302 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x311 x312 x313 x314.\n       b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Testop x281 x282)"], ["proof (state)\nthis:\n  b_e = Testop x281 x282\n\ngoal (4 subgoals):\n 1. \\<And>x281 x282.\n       b_e = Testop x281 x282 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x291 x292.\n       b_e = Relop_i x291 x292 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x301 x302.\n       b_e = Relop_f x301 x302 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x311 x312 x313 x314.\n       b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = Testop x281 x282\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using run_step_basic_unop_testop_sound[OF assms]"], ["proof (prove)\nusing this:\n  b_e = Testop x281 x282\n  b_e = Unop_i ?t ?iop \\<or>\n  b_e = Unop_f ?t ?fop \\<or> b_e = Testop ?t ?testop \\<Longrightarrow>\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (3 subgoals):\n 1. \\<And>x291 x292.\n       b_e = Relop_i x291 x292 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x301 x302.\n       b_e = Relop_f x301 x302 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x311 x312 x313 x314.\n       b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x291 x292.\n       b_e = Relop_i x291 x292 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x301 x302.\n       b_e = Relop_f x301 x302 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x311 x312 x313 x314.\n       b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Relop_i x291 x292)"], ["proof (state)\nthis:\n  b_e = Relop_i x291 x292\n\ngoal (3 subgoals):\n 1. \\<And>x291 x292.\n       b_e = Relop_i x291 x292 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x301 x302.\n       b_e = Relop_f x301 x302 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x311 x312 x313 x314.\n       b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = Relop_i x291 x292\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using run_step_basic_binop_relop_sound[OF assms]"], ["proof (prove)\nusing this:\n  b_e = Relop_i x291 x292\n  b_e = Binop_i ?t ?iop \\<or>\n  b_e = Binop_f ?t ?fop \\<or>\n  b_e = Relop_i ?t ?irop \\<or> b_e = Relop_f ?t ?frop \\<Longrightarrow>\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<And>x301 x302.\n       b_e = Relop_f x301 x302 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x311 x312 x313 x314.\n       b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x301 x302.\n       b_e = Relop_f x301 x302 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x311 x312 x313 x314.\n       b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Relop_f x301 x302)"], ["proof (state)\nthis:\n  b_e = Relop_f x301 x302\n\ngoal (2 subgoals):\n 1. \\<And>x301 x302.\n       b_e = Relop_f x301 x302 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x311 x312 x313 x314.\n       b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = Relop_f x301 x302\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using run_step_basic_binop_relop_sound[OF assms]"], ["proof (prove)\nusing this:\n  b_e = Relop_f x301 x302\n  b_e = Binop_i ?t ?iop \\<or>\n  b_e = Binop_f ?t ?fop \\<or>\n  b_e = Relop_i ?t ?irop \\<or> b_e = Relop_f ?t ?frop \\<Longrightarrow>\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>x311 x312 x313 x314.\n       b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x311 x312 x313 x314.\n       b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Cvtop t2 cvtop t1 sx)"], ["proof (state)\nthis:\n  b_e = Cvtop t2 cvtop t1 sx\n\ngoal (1 subgoal):\n 1. \\<And>x311 x312 x313 x314.\n       b_e = Cvtop x311 x312 x313 x314 \\<Longrightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  b_e = Cvtop t2 cvtop t1 sx\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms"], ["proof (prove)\nusing this:\n  b_e = Cvtop t2 cvtop t1 sx\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = Cvtop t2 cvtop t1 sx;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>b_e = Cvtop t2 cvtop t1 sx;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Cons a list)"], ["proof (state)\nthis:\n  ves = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>b_e = Cvtop t2 cvtop t1 sx;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>b_e = Cvtop t2 cvtop t1 sx;\n        run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n        ves = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n[$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  ves = a # list\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms Cvtop"], ["proof (prove)\nusing this:\n  ves = a # list\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  b_e = Cvtop t2 cvtop t1 sx\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases cvtop; cases \"types_agree t1 a\")"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; cvtop = Convert; ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; types_agree t1 a\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; cvtop = Convert; ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; \\<not> types_agree t1 a\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; cvtop = Reinterpret; ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; types_agree t1 a\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; cvtop = Reinterpret; ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; \\<not> types_agree t1 a\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case Convert"], ["proof (state)\nthis:\n  cvtop = Convert\n\ngoal (4 subgoals):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; cvtop = Convert; ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; types_agree t1 a\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; cvtop = Convert; ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; \\<not> types_agree t1 a\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; cvtop = Reinterpret; ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; types_agree t1 a\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; cvtop = Reinterpret; ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; \\<not> types_agree t1 a\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case True"], ["proof (state)\nthis:\n  types_agree t1 a\n\ngoal (4 subgoals):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; cvtop = Convert; ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; types_agree t1 a\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; cvtop = Convert; ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; \\<not> types_agree t1 a\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; cvtop = Reinterpret; ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; types_agree t1 a\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; cvtop = Reinterpret; ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; \\<not> types_agree t1 a\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  types_agree t1 a\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using Convert assms Cvtop Cons\n                progress_L0_left[OF reduce.intros(1)[OF reduce_simple.intros(19)]]\n                progress_L0_left[OF reduce.intros(1)[OF reduce_simple.intros(20)]]\n                is_const_list_vs_to_es_list[of \"rev list\"]"], ["proof (prove)\nusing this:\n  types_agree t1 a\n  cvtop = Convert\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  b_e = Cvtop t2 cvtop t1 sx\n  ves = a # list\n  \\<lbrakk>types_agree ?t1.2 ?v2; cvt ?t2.2 ?sx2 ?v2 = Some ?v'2;\n   const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$C ?v2,\n                                    $Cvtop ?t2.2 Convert ?t1.2\n?sx2]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @ [$C ?v'2]\\<rparr>\n  \\<lbrakk>types_agree ?t1.2 ?v2; cvt ?t2.2 ?sx2 ?v2 = None;\n   const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$C ?v2,\n                                    $Cvtop ?t2.2 Convert ?t1.2\n?sx2]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @ [Trap]\\<rparr>\n  const_list (vs_to_es list)\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by (cases \"(cvt t2 sx a)\") auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (3 subgoals):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; cvtop = Convert; ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; \\<not> types_agree t1 a\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; cvtop = Reinterpret; ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; types_agree t1 a\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; cvtop = Reinterpret; ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; \\<not> types_agree t1 a\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; cvtop = Convert; ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; \\<not> types_agree t1 a\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; cvtop = Reinterpret; ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; types_agree t1 a\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; cvtop = Reinterpret; ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; \\<not> types_agree t1 a\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case Reinterpret"], ["proof (state)\nthis:\n  cvtop = Reinterpret\n\ngoal (3 subgoals):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; cvtop = Convert; ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; \\<not> types_agree t1 a\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; cvtop = Reinterpret; ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; types_agree t1 a\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; cvtop = Reinterpret; ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; \\<not> types_agree t1 a\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case True"], ["proof (state)\nthis:\n  types_agree t1 a\n\ngoal (3 subgoals):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; cvtop = Convert; ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; \\<not> types_agree t1 a\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; cvtop = Reinterpret; ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; types_agree t1 a\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; cvtop = Reinterpret; ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; \\<not> types_agree t1 a\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  types_agree t1 a\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using Reinterpret assms Cvtop Cons\n                progress_L0_left[OF reduce.intros(1)[OF reduce_simple.intros(21)]]\n                is_const_list_vs_to_es_list[of \"rev list\"]"], ["proof (prove)\nusing this:\n  types_agree t1 a\n  cvtop = Reinterpret\n  run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es')\n  b_e = Cvtop t2 cvtop t1 sx\n  ves = a # list\n  \\<lbrakk>types_agree ?t1.2 ?v2; const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   [$C ?v2,\n                                    $Cvtop ?t2.2 Reinterpret ?t1.2\nNone]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n      [$C wasm_deserialise (bits ?v2) ?t2.2]\\<rparr>\n  const_list (vs_to_es list)\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by (cases sx) auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; cvtop = Convert; ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; \\<not> types_agree t1 a\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; cvtop = Reinterpret; ves = a # list;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     b_e = Cvtop t2 cvtop t1 sx; \\<not> types_agree t1 a\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b_e = Cvtop t2 cvtop t1 sx;\n     run_one_step d i (s, vs, ves, $b_e) = (s', vs', RSNormal es');\n     ves = []\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>s;vs;vs_to_es ves @\n                                   [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed (cases cvtop; auto)"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [$b_e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem run_step_sound:\n  assumes \"run_step d i (s,vs,es) = (s', vs', RSNormal es')\"\n  shows \"\\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms"], ["proof (prove)\nusing this:\n  run_step d i (s, vs, es) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. run_step d i (s, vs, es) = (s', vs', RSNormal es') \\<Longrightarrow>\n    \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "fix ves e"], ["proof (state)\ngoal (1 subgoal):\n 1. run_step d i (s, vs, es) = (s', vs', RSNormal es') \\<Longrightarrow>\n    \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "have \"(run_step d i (s,vs,es) = (s', vs', RSNormal es')) \\<Longrightarrow>\n           (\\<lambda>i (s, vs, es). \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>) i (s, vs, es)\"\n  and  \"(run_one_step d i (s,vs,ves,e) = (s', vs', RSNormal es')) \\<Longrightarrow>\n          (\\<lambda>i (s, vs, ves, e). \\<lparr>s;vs;(vs_to_es ves)@[e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>) i (s, vs, ves, e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (run_step d i (s, vs, es) = (s', vs', RSNormal es') \\<Longrightarrow>\n     case (s, vs, es) of\n     (s, vs, es) \\<Rightarrow>\n       \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>) &&&\n    (run_one_step d i (s, vs, ves, e) =\n     (s', vs', RSNormal es') \\<Longrightarrow>\n     case (s, vs, ves, e) of\n     (s, vs, ves, e) \\<Rightarrow>\n       \\<lparr>s;vs;vs_to_es ves @\n                    [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>)", "proof (induction d i _ and d i _ arbitrary: s' vs' es' and s' vs' es' rule: run_step_run_one_step.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>d i s vs es s' vs' es'.\n       \\<lbrakk>\\<And>x xa y x21 x22 s' vs' es'.\n                   \\<lbrakk>x = split_vals_e es; (xa, y) = x; y = x21 # x22;\n                    \\<not> e_is_trap x21;\n                    run_one_step d i (s, vs, rev xa, x21) =\n                    (s', vs', RSNormal es')\\<rbrakk>\n                   \\<Longrightarrow> case (s, vs, rev xa, x21) of\n                                     (s, vs, ves, e) \\<Rightarrow>\n \\<lparr>s;vs;vs_to_es ves @\n              [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>;\n        run_step d i (s, vs, es) = (s', vs', RSNormal es')\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, es) of\n                         (s, vs, es) \\<Rightarrow>\n                           \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>d i s vs ves e s' vs' es'.\n       \\<lbrakk>\\<And>x41 x42 x43 s' vs' es'.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43;\n                    run_step d i (s, vs, x43) =\n                    (s', vs', RSNormal es')\\<rbrakk>\n                   \\<Longrightarrow> case (s, vs, x43) of\n                                     (s, vs, es) \\<Rightarrow>\n \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>;\n        \\<And>x51 x52 x53 x54 nat s' vs' es'.\n           \\<lbrakk>e = Local x51 x52 x53 x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat;\n            run_step nat x52 (s, x53, x54) =\n            (s', vs', RSNormal es')\\<rbrakk>\n           \\<Longrightarrow> case (s, x53, x54) of\n                             (s, vs, es) \\<Rightarrow>\n                               \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ x52 \\<lparr>s';vs';es'\\<rparr>;\n        run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, ves, e) of\n                         (s, vs, ves, e) \\<Rightarrow>\n                           \\<lparr>s;vs;vs_to_es ves @\n  [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (1 d i s vs es)"], ["proof (state)\nthis:\n  \\<lbrakk>?x = split_vals_e es; (?xa, ?y) = ?x; ?y = ?x21.0 # ?x22.0;\n   \\<not> e_is_trap ?x21.0;\n   run_one_step d i (s, vs, rev ?xa, ?x21.0) =\n   (?s', ?vs', RSNormal ?es')\\<rbrakk>\n  \\<Longrightarrow> case (s, vs, rev ?xa, ?x21.0) of\n                    (s, vs, ves, e) \\<Rightarrow>\n                      \\<lparr>s;vs;vs_to_es ves @\n                                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>?s';?vs';?es'\\<rparr>\n  run_step d i (s, vs, es) = (s', vs', RSNormal es')\n\ngoal (2 subgoals):\n 1. \\<And>d i s vs es s' vs' es'.\n       \\<lbrakk>\\<And>x xa y x21 x22 s' vs' es'.\n                   \\<lbrakk>x = split_vals_e es; (xa, y) = x; y = x21 # x22;\n                    \\<not> e_is_trap x21;\n                    run_one_step d i (s, vs, rev xa, x21) =\n                    (s', vs', RSNormal es')\\<rbrakk>\n                   \\<Longrightarrow> case (s, vs, rev xa, x21) of\n                                     (s, vs, ves, e) \\<Rightarrow>\n \\<lparr>s;vs;vs_to_es ves @\n              [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>;\n        run_step d i (s, vs, es) = (s', vs', RSNormal es')\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, es) of\n                         (s, vs, es) \\<Rightarrow>\n                           \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>d i s vs ves e s' vs' es'.\n       \\<lbrakk>\\<And>x41 x42 x43 s' vs' es'.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43;\n                    run_step d i (s, vs, x43) =\n                    (s', vs', RSNormal es')\\<rbrakk>\n                   \\<Longrightarrow> case (s, vs, x43) of\n                                     (s, vs, es) \\<Rightarrow>\n \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>;\n        \\<And>x51 x52 x53 x54 nat s' vs' es'.\n           \\<lbrakk>e = Local x51 x52 x53 x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat;\n            run_step nat x52 (s, x53, x54) =\n            (s', vs', RSNormal es')\\<rbrakk>\n           \\<Longrightarrow> case (s, x53, x54) of\n                             (s, vs, es) \\<Rightarrow>\n                               \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ x52 \\<lparr>s';vs';es'\\<rparr>;\n        run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, ves, e) of\n                         (s, vs, ves, e) \\<Rightarrow>\n                           \\<lparr>s;vs;vs_to_es ves @\n  [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "obtain ves ses where ves_def:\"split_vals_e es = (ves, ses)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ves ses.\n        split_vals_e es = (ves, ses) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  split_vals_e es = (ves, ses)\n\ngoal (2 subgoals):\n 1. \\<And>d i s vs es s' vs' es'.\n       \\<lbrakk>\\<And>x xa y x21 x22 s' vs' es'.\n                   \\<lbrakk>x = split_vals_e es; (xa, y) = x; y = x21 # x22;\n                    \\<not> e_is_trap x21;\n                    run_one_step d i (s, vs, rev xa, x21) =\n                    (s', vs', RSNormal es')\\<rbrakk>\n                   \\<Longrightarrow> case (s, vs, rev xa, x21) of\n                                     (s, vs, ves, e) \\<Rightarrow>\n \\<lparr>s;vs;vs_to_es ves @\n              [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>;\n        run_step d i (s, vs, es) = (s', vs', RSNormal es')\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, es) of\n                         (s, vs, es) \\<Rightarrow>\n                           \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>d i s vs ves e s' vs' es'.\n       \\<lbrakk>\\<And>x41 x42 x43 s' vs' es'.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43;\n                    run_step d i (s, vs, x43) =\n                    (s', vs', RSNormal es')\\<rbrakk>\n                   \\<Longrightarrow> case (s, vs, x43) of\n                                     (s, vs, es) \\<Rightarrow>\n \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>;\n        \\<And>x51 x52 x53 x54 nat s' vs' es'.\n           \\<lbrakk>e = Local x51 x52 x53 x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat;\n            run_step nat x52 (s, x53, x54) =\n            (s', vs', RSNormal es')\\<rbrakk>\n           \\<Longrightarrow> case (s, x53, x54) of\n                             (s, vs, es) \\<Rightarrow>\n                               \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ x52 \\<lparr>s';vs';es'\\<rparr>;\n        run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, ves, e) of\n                         (s, vs, ves, e) \\<Rightarrow>\n                           \\<lparr>s;vs;vs_to_es ves @\n  [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?case"], ["proof (prove)\nusing this:\n  split_vals_e es = (ves, ses)\n\ngoal (1 subgoal):\n 1. case (s, vs, es) of\n    (s, vs, es) \\<Rightarrow>\n      \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases ses)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>split_vals_e es = (ves, ses); ses = []\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, es) of\n                      (s, vs, es) \\<Rightarrow>\n                        \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>split_vals_e es = (ves, ses); ses = a # list\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, es) of\n                         (s, vs, es) \\<Rightarrow>\n                           \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case Nil"], ["proof (state)\nthis:\n  ses = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>split_vals_e es = (ves, ses); ses = []\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, es) of\n                      (s, vs, es) \\<Rightarrow>\n                        \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a list.\n       \\<lbrakk>split_vals_e es = (ves, ses); ses = a # list\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, es) of\n                         (s, vs, es) \\<Rightarrow>\n                           \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  ses = []\n\ngoal (1 subgoal):\n 1. case (s, vs, es) of\n    (s, vs, es) \\<Rightarrow>\n      \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using 1(2) ves_def"], ["proof (prove)\nusing this:\n  ses = []\n  run_step d i (s, vs, es) = (s', vs', RSNormal es')\n  split_vals_e es = (ves, ses)\n\ngoal (1 subgoal):\n 1. case (s, vs, es) of\n    (s, vs, es) \\<Rightarrow>\n      \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by simp"], ["proof (state)\nthis:\n  case (s, vs, es) of\n  (s, vs, es) \\<Rightarrow>\n    \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>split_vals_e es = (ves, ses); ses = a # list\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, es) of\n                         (s, vs, es) \\<Rightarrow>\n                           \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>split_vals_e es = (ves, ses); ses = a # list\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, es) of\n                         (s, vs, es) \\<Rightarrow>\n                           \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Cons a list)"], ["proof (state)\nthis:\n  ses = a # list\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>split_vals_e es = (ves, ses); ses = a # list\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, es) of\n                         (s, vs, es) \\<Rightarrow>\n                           \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  ses = a # list\n\ngoal (1 subgoal):\n 1. case (s, vs, es) of\n    (s, vs, es) \\<Rightarrow>\n      \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases \"a = Trap\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ses = a # list; a = Trap\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, es) of\n                      (s, vs, es) \\<Rightarrow>\n                        \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>ses = a # list; a \\<noteq> Trap\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, es) of\n                      (s, vs, es) \\<Rightarrow>\n                        \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case True"], ["proof (state)\nthis:\n  a = Trap\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ses = a # list; a = Trap\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, es) of\n                      (s, vs, es) \\<Rightarrow>\n                        \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>ses = a # list; a \\<noteq> Trap\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, es) of\n                      (s, vs, es) \\<Rightarrow>\n                        \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "have c_ves:\"const_list ($$* ves)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. const_list ($$* ves)", "using is_const_list[of _ ves]"], ["proof (prove)\nusing this:\n  ?ves = $$* ves \\<Longrightarrow> const_list ?ves\n\ngoal (1 subgoal):\n 1. const_list ($$* ves)", "by simp"], ["proof (state)\nthis:\n  const_list ($$* ves)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ses = a # list; a = Trap\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, es) of\n                      (s, vs, es) \\<Rightarrow>\n                        \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>ses = a # list; a \\<noteq> Trap\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, es) of\n                      (s, vs, es) \\<Rightarrow>\n                        \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "have \"es' = [Trap] \\<and> (list \\<noteq> [] \\<or> ves \\<noteq> [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. es' = [Trap] \\<and> (list \\<noteq> [] \\<or> ves \\<noteq> [])", "using Cons 1(2) ves_def True"], ["proof (prove)\nusing this:\n  ses = a # list\n  run_step d i (s, vs, es) = (s', vs', RSNormal es')\n  split_vals_e es = (ves, ses)\n  a = Trap\n\ngoal (1 subgoal):\n 1. es' = [Trap] \\<and> (list \\<noteq> [] \\<or> ves \\<noteq> [])", "by (cases \"(list \\<noteq> [] \\<or> ves \\<noteq> [])\") auto"], ["proof (state)\nthis:\n  es' = [Trap] \\<and> (list \\<noteq> [] \\<or> ves \\<noteq> [])\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ses = a # list; a = Trap\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, es) of\n                      (s, vs, es) \\<Rightarrow>\n                        \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>ses = a # list; a \\<noteq> Trap\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, es) of\n                      (s, vs, es) \\<Rightarrow>\n                        \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  es' = [Trap] \\<and> (list \\<noteq> [] \\<or> ves \\<noteq> [])\n\ngoal (1 subgoal):\n 1. case (s, vs, es) of\n    (s, vs, es) \\<Rightarrow>\n      \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using Cons 1(2) ves_def split_vals_e_conv_app[OF ves_def] True progress_L0_trap[OF c_ves]"], ["proof (prove)\nusing this:\n  es' = [Trap] \\<and> (list \\<noteq> [] \\<or> ves \\<noteq> [])\n  ses = a # list\n  run_step d i (s, vs, es) = (s', vs', RSNormal es')\n  split_vals_e es = (ves, ses)\n  es = ($$* ves) @ ses\n  a = Trap\n  $$* ves \\<noteq> [] \\<or> ?es \\<noteq> [] \\<Longrightarrow>\n  \\<exists>a.\n     \\<lparr>?s;?vs;($$* ves) @\n                    [Trap] @\n                    ?es\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;[Trap]\\<rparr>\n\ngoal (1 subgoal):\n 1. case (s, vs, es) of\n    (s, vs, es) \\<Rightarrow>\n      \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by auto"], ["proof (state)\nthis:\n  case (s, vs, es) of\n  (s, vs, es) \\<Rightarrow>\n    \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ses = a # list; a \\<noteq> Trap\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, es) of\n                      (s, vs, es) \\<Rightarrow>\n                        \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ses = a # list; a \\<noteq> Trap\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, es) of\n                      (s, vs, es) \\<Rightarrow>\n                        \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case False"], ["proof (state)\nthis:\n  a \\<noteq> Trap\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ses = a # list; a \\<noteq> Trap\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, es) of\n                      (s, vs, es) \\<Rightarrow>\n                        \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "obtain os ovs oes where ros_def:\"run_one_step d i (s, vs, (rev ves), a) = (os, ovs, oes)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>os ovs oes.\n        run_one_step d i (s, vs, rev ves, a) =\n        (os, ovs, oes) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  run_one_step d i (s, vs, rev ves, a) = (os, ovs, oes)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ses = a # list; a \\<noteq> Trap\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, es) of\n                      (s, vs, es) \\<Rightarrow>\n                        \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "moreover"], ["proof (state)\nthis:\n  run_one_step d i (s, vs, rev ves, a) = (os, ovs, oes)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ses = a # list; a \\<noteq> Trap\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, es) of\n                      (s, vs, es) \\<Rightarrow>\n                        \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "then"], ["proof (chain)\npicking this:\n  run_one_step d i (s, vs, rev ves, a) = (os, ovs, oes)", "obtain roes where \"oes = RSNormal roes\""], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, rev ves, a) = (os, ovs, oes)\n\ngoal (1 subgoal):\n 1. (\\<And>roes.\n        oes = RSNormal roes \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 1(2) ves_def Cons False"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, rev ves, a) = (os, ovs, oes)\n  run_step d i (s, vs, es) = (s', vs', RSNormal es')\n  split_vals_e es = (ves, ses)\n  ses = a # list\n  a \\<noteq> Trap\n\ngoal (1 subgoal):\n 1. (\\<And>roes.\n        oes = RSNormal roes \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"oes\") auto"], ["proof (state)\nthis:\n  oes = RSNormal roes\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ses = a # list; a \\<noteq> Trap\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, es) of\n                      (s, vs, es) \\<Rightarrow>\n                        \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "moreover"], ["proof (state)\nthis:\n  oes = RSNormal roes\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ses = a # list; a \\<noteq> Trap\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, es) of\n                      (s, vs, es) \\<Rightarrow>\n                        \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "hence \"os = s'\" \"ovs = vs'\" and es'_def:\"es' = roes @ list\""], ["proof (prove)\nusing this:\n  oes = RSNormal roes\n\ngoal (1 subgoal):\n 1. (os = s' &&& ovs = vs') &&& es' = roes @ list", "using 1(2) ves_def Cons ros_def False"], ["proof (prove)\nusing this:\n  oes = RSNormal roes\n  run_step d i (s, vs, es) = (s', vs', RSNormal es')\n  split_vals_e es = (ves, ses)\n  ses = a # list\n  run_one_step d i (s, vs, rev ves, a) = (os, ovs, oes)\n  a \\<noteq> Trap\n\ngoal (1 subgoal):\n 1. (os = s' &&& ovs = vs') &&& es' = roes @ list", "by (cases \"roes = [Trap]\", auto simp del: run_one_step.simps)+"], ["proof (state)\nthis:\n  os = s'\n  ovs = vs'\n  es' = roes @ list\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ses = a # list; a \\<noteq> Trap\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, es) of\n                      (s, vs, es) \\<Rightarrow>\n                        \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "ultimately"], ["proof (chain)\npicking this:\n  run_one_step d i (s, vs, rev ves, a) = (os, ovs, oes)\n  oes = RSNormal roes\n  os = s'\n  ovs = vs'\n  es' = roes @ list", "have ros_red:\"\\<lparr>s;vs;($$* ves) @ [a]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';roes\\<rparr>\""], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, rev ves, a) = (os, ovs, oes)\n  oes = RSNormal roes\n  os = s'\n  ovs = vs'\n  es' = roes @ list\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;($$* ves) @\n                 [a]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';roes\\<rparr>", "using 1(1)[OF ves_def[symmetric] _ Cons] ros_def False"], ["proof (prove)\nusing this:\n  run_one_step d i (s, vs, rev ves, a) = (os, ovs, oes)\n  oes = RSNormal roes\n  os = s'\n  ovs = vs'\n  es' = roes @ list\n  \\<lbrakk>(?xa, ses) = (ves, ses); \\<not> e_is_trap a;\n   run_one_step d i (s, vs, rev ?xa, a) =\n   (?s', ?vs', RSNormal ?es')\\<rbrakk>\n  \\<Longrightarrow> case (s, vs, rev ?xa, a) of\n                    (s, vs, ves, e) \\<Rightarrow>\n                      \\<lparr>s;vs;vs_to_es ves @\n                                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>?s';?vs';?es'\\<rparr>\n  run_one_step d i (s, vs, rev ves, a) = (os, ovs, oes)\n  a \\<noteq> Trap\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;($$* ves) @\n                 [a]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';roes\\<rparr>", "by (simp del: run_one_step.simps)"], ["proof (state)\nthis:\n  \\<lparr>s;vs;($$* ves) @\n               [a]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';roes\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ses = a # list; a \\<noteq> Trap\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, es) of\n                      (s, vs, es) \\<Rightarrow>\n                        \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "have \"\\<lparr>s;vs;($$* ves)@[a]@list\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';roes@list\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;($$* ves) @\n                 [a] @\n                 list\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';roes @\n                     list\\<rparr>", "using progress_L0[OF ros_red, of \"[]\" list]"], ["proof (prove)\nusing this:\n  const_list [] \\<Longrightarrow>\n  \\<lparr>s;vs;[] @\n               (($$* ves) @ [a]) @\n               list\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';[] @\n                   roes @ list\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;($$* ves) @\n                 [a] @\n                 list\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';roes @\n                     list\\<rparr>", "unfolding const_list_def"], ["proof (prove)\nusing this:\n  list_all is_const [] \\<Longrightarrow>\n  \\<lparr>s;vs;[] @\n               (($$* ves) @ [a]) @\n               list\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';[] @\n                   roes @ list\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;($$* ves) @\n                 [a] @\n                 list\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';roes @\n                     list\\<rparr>", "by simp"], ["proof (state)\nthis:\n  \\<lparr>s;vs;($$* ves) @\n               [a] @\n               list\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';roes @ list\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ses = a # list; a \\<noteq> Trap\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, es) of\n                      (s, vs, es) \\<Rightarrow>\n                        \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lparr>s;vs;($$* ves) @\n               [a] @\n               list\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';roes @ list\\<rparr>\n\ngoal (1 subgoal):\n 1. case (s, vs, es) of\n    (s, vs, es) \\<Rightarrow>\n      \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using es'_def Cons split_vals_e_conv_app[OF ves_def]"], ["proof (prove)\nusing this:\n  \\<lparr>s;vs;($$* ves) @\n               [a] @\n               list\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';roes @ list\\<rparr>\n  es' = roes @ list\n  ses = a # list\n  es = ($$* ves) @ ses\n\ngoal (1 subgoal):\n 1. case (s, vs, es) of\n    (s, vs, es) \\<Rightarrow>\n      \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by simp"], ["proof (state)\nthis:\n  case (s, vs, es) of\n  (s, vs, es) \\<Rightarrow>\n    \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  case (s, vs, es) of\n  (s, vs, es) \\<Rightarrow>\n    \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  case (s, vs, es) of\n  (s, vs, es) \\<Rightarrow>\n    \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>d i s vs ves e s' vs' es'.\n       \\<lbrakk>\\<And>x41 x42 x43 s' vs' es'.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43;\n                    run_step d i (s, vs, x43) =\n                    (s', vs', RSNormal es')\\<rbrakk>\n                   \\<Longrightarrow> case (s, vs, x43) of\n                                     (s, vs, es) \\<Rightarrow>\n \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>;\n        \\<And>x51 x52 x53 x54 nat s' vs' es'.\n           \\<lbrakk>e = Local x51 x52 x53 x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat;\n            run_step nat x52 (s, x53, x54) =\n            (s', vs', RSNormal es')\\<rbrakk>\n           \\<Longrightarrow> case (s, x53, x54) of\n                             (s, vs, es) \\<Rightarrow>\n                               \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ x52 \\<lparr>s';vs';es'\\<rparr>;\n        run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, ves, e) of\n                         (s, vs, ves, e) \\<Rightarrow>\n                           \\<lparr>s;vs;vs_to_es ves @\n  [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d i s vs ves e s' vs' es'.\n       \\<lbrakk>\\<And>x41 x42 x43 s' vs' es'.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43;\n                    run_step d i (s, vs, x43) =\n                    (s', vs', RSNormal es')\\<rbrakk>\n                   \\<Longrightarrow> case (s, vs, x43) of\n                                     (s, vs, es) \\<Rightarrow>\n \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>;\n        \\<And>x51 x52 x53 x54 nat s' vs' es'.\n           \\<lbrakk>e = Local x51 x52 x53 x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat;\n            run_step nat x52 (s, x53, x54) =\n            (s', vs', RSNormal es')\\<rbrakk>\n           \\<Longrightarrow> case (s, x53, x54) of\n                             (s, vs, es) \\<Rightarrow>\n                               \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ x52 \\<lparr>s';vs';es'\\<rparr>;\n        run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, ves, e) of\n                         (s, vs, ves, e) \\<Rightarrow>\n                           \\<lparr>s;vs;vs_to_es ves @\n  [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (2 d i s vs ves e)"], ["proof (state)\nthis:\n  \\<lbrakk>e = Label ?x41.0 ?x42.0 ?x43.0; \\<not> es_is_trap ?x43.0;\n   \\<not> const_list ?x43.0;\n   run_step d i (s, vs, ?x43.0) = (?s', ?vs', RSNormal ?es')\\<rbrakk>\n  \\<Longrightarrow> case (s, vs, ?x43.0) of\n                    (s, vs, es) \\<Rightarrow>\n                      \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>?s';?vs';?es'\\<rparr>\n  \\<lbrakk>e = Local ?x51.0 ?x52.0 ?x53.0 ?x54.0; \\<not> es_is_trap ?x54.0;\n   \\<not> const_list ?x54.0; d = Suc ?nat;\n   run_step ?nat ?x52.0 (s, ?x53.0, ?x54.0) =\n   (?s', ?vs', RSNormal ?es')\\<rbrakk>\n  \\<Longrightarrow> case (s, ?x53.0, ?x54.0) of\n                    (s, vs, es) \\<Rightarrow>\n                      \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ ?x52.0 \\<lparr>?s';?vs';?es'\\<rparr>\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<And>d i s vs ves e s' vs' es'.\n       \\<lbrakk>\\<And>x41 x42 x43 s' vs' es'.\n                   \\<lbrakk>e = Label x41 x42 x43; \\<not> es_is_trap x43;\n                    \\<not> const_list x43;\n                    run_step d i (s, vs, x43) =\n                    (s', vs', RSNormal es')\\<rbrakk>\n                   \\<Longrightarrow> case (s, vs, x43) of\n                                     (s, vs, es) \\<Rightarrow>\n \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>;\n        \\<And>x51 x52 x53 x54 nat s' vs' es'.\n           \\<lbrakk>e = Local x51 x52 x53 x54; \\<not> es_is_trap x54;\n            \\<not> const_list x54; d = Suc nat;\n            run_step nat x52 (s, x53, x54) =\n            (s', vs', RSNormal es')\\<rbrakk>\n           \\<Longrightarrow> case (s, x53, x54) of\n                             (s, vs, es) \\<Rightarrow>\n                               \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ x52 \\<lparr>s';vs';es'\\<rparr>;\n        run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, ves, e) of\n                         (s, vs, ves, e) \\<Rightarrow>\n                           \\<lparr>s;vs;vs_to_es ves @\n  [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases e)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x1.\n       e = $x1 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. e = Trap \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Basic x1)"], ["proof (state)\nthis:\n  e = $x1\n\ngoal (5 subgoals):\n 1. \\<And>x1.\n       e = $x1 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. e = Trap \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 5. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  e = $x1\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using run_step_basic_sound 2(3)"], ["proof (prove)\nusing this:\n  e = $x1\n  run_one_step ?d ?i (?s, ?vs, ?ves, $?b_e) =\n  (?s', ?vs', RSNormal ?es') \\<Longrightarrow>\n  \\<lparr>?s;?vs;vs_to_es ?ves @\n                 [$?b_e]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s';?vs';?es'\\<rparr>\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by simp"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (4 subgoals):\n 1. e = Trap \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. e = Trap \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case Trap"], ["proof (state)\nthis:\n  e = Trap\n\ngoal (4 subgoals):\n 1. e = Trap \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  e = Trap\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using 2(3)"], ["proof (prove)\nusing this:\n  e = Trap\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by simp"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (3 subgoals):\n 1. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Callcl cl)"], ["proof (state)\nthis:\n  e = Callcl cl\n\ngoal (3 subgoals):\n 1. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "obtain t1s t2s where \"cl_type cl = (t1s _> t2s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t1s t2s.\n        cl_type cl = t1s _> t2s \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using tf.exhaust[of _ thesis]"], ["proof (prove)\nusing this:\n  (\\<And>x1 x2. ?y = x1 _> x2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n  thesis\n\ngoal (1 subgoal):\n 1. (\\<And>t1s t2s.\n        cl_type cl = t1s _> t2s \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  cl_type cl = t1s _> t2s\n\ngoal (3 subgoals):\n 1. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "moreover"], ["proof (state)\nthis:\n  cl_type cl = t1s _> t2s\n\ngoal (3 subgoals):\n 1. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "obtain n where \"length t1s = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n. length t1s = n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  length t1s = n\n\ngoal (3 subgoals):\n 1. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "moreover"], ["proof (state)\nthis:\n  length t1s = n\n\ngoal (3 subgoals):\n 1. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "obtain m where \"length t2s = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m. length t2s = m \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  length t2s = m\n\ngoal (3 subgoals):\n 1. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "moreover"], ["proof (state)\nthis:\n  length t2s = m\n\ngoal (3 subgoals):\n 1. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "note local_defs = calculation"], ["proof (state)\nthis:\n  cl_type cl = t1s _> t2s\n  length t1s = n\n  length t2s = m\n\ngoal (3 subgoals):\n 1. \\<And>x3.\n       e = Callcl x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases \"length ves \\<ge> n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n \\<le> length ves \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<not> n \\<le> length ves \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case outer_True:True"], ["proof (state)\nthis:\n  n \\<le> length ves\n\ngoal (2 subgoals):\n 1. n \\<le> length ves \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<not> n \\<le> length ves \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "obtain ves' ves'' where true_defs:\"split_n ves n = (ves', ves'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ves' ves''.\n        split_n ves n = (ves', ves'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  split_n ves n = (ves', ves'')\n\ngoal (2 subgoals):\n 1. n \\<le> length ves \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<not> n \\<le> length ves \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "have ves'_length:\"length (rev ves') = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (rev ves') = n", "using split_n_length[OF true_defs outer_True] inj_basic_econst length_rev map_injective"], ["proof (prove)\nusing this:\n  length ves' = n\n  inj (\\<lambda>v. $C v)\n  length (rev ?xs) = length ?xs\n  \\<lbrakk>map ?f ?xs = map ?f ?ys; inj ?f\\<rbrakk>\n  \\<Longrightarrow> ?xs = ?ys\n\ngoal (1 subgoal):\n 1. length (rev ves') = n", "by blast"], ["proof (state)\nthis:\n  length (rev ves') = n\n\ngoal (2 subgoals):\n 1. n \\<le> length ves \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<not> n \\<le> length ves \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases cl)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x11 x12 x13 x14.\n       cl = Func_native x11 x12 x13 x14 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x21 x22.\n       cl = Func_host x21 x22 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Func_native i' tf fts fes)"], ["proof (state)\nthis:\n  cl = Func_native i' tf fts fes\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12 x13 x14.\n       cl = Func_native x11 x12 x13 x14 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x21 x22.\n       cl = Func_host x21 x22 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "hence \"s' = s\" \"vs' = vs\" \"es' = (vs_to_es ves'' @ [Local (length t2s) i' (rev ves' @ (n_zeros fts)) [$Block ([] _> t2s) fes]])\""], ["proof (prove)\nusing this:\n  cl = Func_native i' tf fts fes\n\ngoal (1 subgoal):\n 1. s' = s &&&\n    vs' = vs &&&\n    es' =\n    vs_to_es ves'' @\n    [Local (length t2s) i' (rev ves' @ n_zeros fts)\n      [$Block ([] _> t2s) fes]]", "using 2(3) Callcl local_defs outer_True true_defs"], ["proof (prove)\nusing this:\n  cl = Func_native i' tf fts fes\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\n  e = Callcl cl\n  cl_type cl = t1s _> t2s\n  length t1s = n\n  length t2s = m\n  n \\<le> length ves\n  split_n ves n = (ves', ves'')\n\ngoal (1 subgoal):\n 1. s' = s &&&\n    vs' = vs &&&\n    es' =\n    vs_to_es ves'' @\n    [Local (length t2s) i' (rev ves' @ n_zeros fts)\n      [$Block ([] _> t2s) fes]]", "unfolding cl_type_def"], ["proof (prove)\nusing this:\n  cl = Func_native i' tf fts fes\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\n  e = Callcl cl\n  (case cl of Func_native x tf xa xb \\<Rightarrow> tf\n   | Func_host tf x \\<Rightarrow> tf) =\n  t1s _> t2s\n  length t1s = n\n  length t2s = m\n  n \\<le> length ves\n  split_n ves n = (ves', ves'')\n\ngoal (1 subgoal):\n 1. s' = s &&&\n    vs' = vs &&&\n    es' =\n    vs_to_es ves'' @\n    [Local (length t2s) i' (rev ves' @ n_zeros fts)\n      [$Block ([] _> t2s) fes]]", "by auto"], ["proof (state)\nthis:\n  s' = s\n  vs' = vs\n  es' =\n  vs_to_es ves'' @\n  [Local (length t2s) i' (rev ves' @ n_zeros fts) [$Block ([] _> t2s) fes]]\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12 x13 x14.\n       cl = Func_native x11 x12 x13 x14 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x21 x22.\n       cl = Func_host x21 x22 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "moreover"], ["proof (state)\nthis:\n  s' = s\n  vs' = vs\n  es' =\n  vs_to_es ves'' @\n  [Local (length t2s) i' (rev ves' @ n_zeros fts) [$Block ([] _> t2s) fes]]\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12 x13 x14.\n       cl = Func_native x11 x12 x13 x14 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x21 x22.\n       cl = Func_host x21 x22 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "have \"\\<lparr>s;vs;(vs_to_es ves')@[Callcl cl]\\<rparr> \\<leadsto>_i \\<lparr>s;vs;([Local (length t2s) i' (rev ves' @ (n_zeros fts)) [$Block ([] _> t2s) fes]])\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves' @\n                 [Callcl\n                   cl]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;[Local\n                      (length t2s) i' (rev ves' @ n_zeros fts)\n                      [$Block ([] _> t2s) fes]]\\<rparr>", "using reduce.intros(5) local_defs(1,2) Func_native ves'_length"], ["proof (prove)\nusing this:\n  \\<lbrakk>?cl = Func_native ?j (?t1s _> ?t2s) ?ts ?es; ?ves = $$* ?vcs;\n   length ?vcs = ?n; length ?ts = ?k; length ?t1s = ?n; length ?t2s = ?m;\n   n_zeros ?ts = ?zs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?ves @\n                                   [Callcl\n                                     ?cl]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;[Local\n      ?m ?j (?vcs @ ?zs) [$Block ([] _> ?t2s) ?es]]\\<rparr>\n  cl_type cl = t1s _> t2s\n  length t1s = n\n  cl = Func_native i' tf fts fes\n  length (rev ves') = n\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves' @\n                 [Callcl\n                   cl]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;[Local\n                      (length t2s) i' (rev ves' @ n_zeros fts)\n                      [$Block ([] _> t2s) fes]]\\<rparr>", "unfolding cl_type_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?cl = Func_native ?j (?t1s _> ?t2s) ?ts ?es; ?ves = $$* ?vcs;\n   length ?vcs = ?n; length ?ts = ?k; length ?t1s = ?n; length ?t2s = ?m;\n   n_zeros ?ts = ?zs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?ves @\n                                   [Callcl\n                                     ?cl]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;[Local\n      ?m ?j (?vcs @ ?zs) [$Block ([] _> ?t2s) ?es]]\\<rparr>\n  (case cl of Func_native x tf xa xb \\<Rightarrow> tf\n   | Func_host tf x \\<Rightarrow> tf) =\n  t1s _> t2s\n  length t1s = n\n  cl = Func_native i' tf fts fes\n  length (rev ves') = n\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves' @\n                 [Callcl\n                   cl]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;[Local\n                      (length t2s) i' (rev ves' @ n_zeros fts)\n                      [$Block ([] _> t2s) fes]]\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves' @\n               [Callcl\n                 cl]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;[Local (length t2s)\n                    i' (rev ves' @ n_zeros fts)\n                    [$Block ([] _> t2s) fes]]\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12 x13 x14.\n       cl = Func_native x11 x12 x13 x14 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x21 x22.\n       cl = Func_host x21 x22 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "ultimately"], ["proof (chain)\npicking this:\n  s' = s\n  vs' = vs\n  es' =\n  vs_to_es ves'' @\n  [Local (length t2s) i' (rev ves' @ n_zeros fts) [$Block ([] _> t2s) fes]]\n  \\<lparr>s;vs;vs_to_es ves' @\n               [Callcl\n                 cl]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;[Local (length t2s)\n                    i' (rev ves' @ n_zeros fts)\n                    [$Block ([] _> t2s) fes]]\\<rparr>", "show ?thesis"], ["proof (prove)\nusing this:\n  s' = s\n  vs' = vs\n  es' =\n  vs_to_es ves'' @\n  [Local (length t2s) i' (rev ves' @ n_zeros fts) [$Block ([] _> t2s) fes]]\n  \\<lparr>s;vs;vs_to_es ves' @\n               [Callcl\n                 cl]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;[Local (length t2s)\n                    i' (rev ves' @ n_zeros fts)\n                    [$Block ([] _> t2s) fes]]\\<rparr>\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using Callcl progress_L0_left is_const_list[of _ \"(rev ves'')\"]"], ["proof (prove)\nusing this:\n  s' = s\n  vs' = vs\n  es' =\n  vs_to_es ves'' @\n  [Local (length t2s) i' (rev ves' @ n_zeros fts) [$Block ([] _> t2s) fes]]\n  \\<lparr>s;vs;vs_to_es ves' @\n               [Callcl\n                 cl]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;[Local (length t2s)\n                    i' (rev ves' @ n_zeros fts)\n                    [$Block ([] _> t2s) fes]]\\<rparr>\n  e = Callcl cl\n  \\<lbrakk>\\<lparr>?s;?vs;?es\\<rparr> \\<leadsto>_ ?i \\<lparr>?s';?vs';?es'\\<rparr>;\n   const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   ?es\\<rparr> \\<leadsto>_ ?i \\<lparr>?s';?vs';?cs @\n   ?es'\\<rparr>\n  ?ves = vs_to_es ves'' \\<Longrightarrow> const_list ?ves\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "unfolding split_n_conv_app[OF true_defs(1)]"], ["proof (prove)\nusing this:\n  s' = s\n  vs' = vs\n  es' =\n  vs_to_es ves'' @\n  [Local (length t2s) i' (rev ves' @ n_zeros fts) [$Block ([] _> t2s) fes]]\n  \\<lparr>s;vs;vs_to_es ves' @\n               [Callcl\n                 cl]\\<rparr> \\<leadsto>_ i \\<lparr>s;vs;[Local (length t2s)\n                    i' (rev ves' @ n_zeros fts)\n                    [$Block ([] _> t2s) fes]]\\<rparr>\n  e = Callcl cl\n  \\<lbrakk>\\<lparr>?s;?vs;?es\\<rparr> \\<leadsto>_ ?i \\<lparr>?s';?vs';?es'\\<rparr>;\n   const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   ?es\\<rparr> \\<leadsto>_ ?i \\<lparr>?s';?vs';?cs @\n   ?es'\\<rparr>\n  ?ves = vs_to_es ves'' \\<Longrightarrow> const_list ?ves\n\ngoal (1 subgoal):\n 1. case (s, vs, ves' @ ves'', e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by auto"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       cl = Func_host x21 x22 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       cl = Func_host x21 x22 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Func_host x21 x22)"], ["proof (state)\nthis:\n  cl = Func_host x21 x22\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       cl = Func_host x21 x22 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  cl = Func_host x21 x22\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases \"host_apply_impl s (t1s _> t2s) x22 (rev ves')\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>cl = Func_host x21 x22;\n     host_apply_impl s (t1s _> t2s) x22 (rev ves') = None\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a.\n       \\<lbrakk>cl = Func_host x21 x22;\n        host_apply_impl s (t1s _> t2s) x22 (rev ves') = Some a\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, ves, e) of\n                         (s, vs, ves, e) \\<Rightarrow>\n                           \\<lparr>s;vs;vs_to_es ves @\n  [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case None"], ["proof (state)\nthis:\n  host_apply_impl s (t1s _> t2s) x22 (rev ves') = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>cl = Func_host x21 x22;\n     host_apply_impl s (t1s _> t2s) x22 (rev ves') = None\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a.\n       \\<lbrakk>cl = Func_host x21 x22;\n        host_apply_impl s (t1s _> t2s) x22 (rev ves') = Some a\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, ves, e) of\n                         (s, vs, ves, e) \\<Rightarrow>\n                           \\<lparr>s;vs;vs_to_es ves @\n  [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "hence \"s = s'\"\n                  \"vs = vs'\"\n                  \"es' = vs_to_es ves'' @ [Trap] \""], ["proof (prove)\nusing this:\n  host_apply_impl s (t1s _> t2s) x22 (rev ves') = None\n\ngoal (1 subgoal):\n 1. s = s' &&& vs = vs' &&& es' = vs_to_es ves'' @ [Trap]", "using 2(3) Callcl local_defs outer_True true_defs Func_host"], ["proof (prove)\nusing this:\n  host_apply_impl s (t1s _> t2s) x22 (rev ves') = None\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\n  e = Callcl cl\n  cl_type cl = t1s _> t2s\n  length t1s = n\n  length t2s = m\n  n \\<le> length ves\n  split_n ves n = (ves', ves'')\n  cl = Func_host x21 x22\n\ngoal (1 subgoal):\n 1. s = s' &&& vs = vs' &&& es' = vs_to_es ves'' @ [Trap]", "unfolding cl_type_def"], ["proof (prove)\nusing this:\n  host_apply_impl s (t1s _> t2s) x22 (rev ves') = None\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\n  e = Callcl cl\n  (case cl of Func_native x tf xa xb \\<Rightarrow> tf\n   | Func_host tf x \\<Rightarrow> tf) =\n  t1s _> t2s\n  length t1s = n\n  length t2s = m\n  n \\<le> length ves\n  split_n ves n = (ves', ves'')\n  cl = Func_host x21 x22\n\ngoal (1 subgoal):\n 1. s = s' &&& vs = vs' &&& es' = vs_to_es ves'' @ [Trap]", "by auto"], ["proof (state)\nthis:\n  s = s'\n  vs = vs'\n  es' = vs_to_es ves'' @ [Trap]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>cl = Func_host x21 x22;\n     host_apply_impl s (t1s _> t2s) x22 (rev ves') = None\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>a.\n       \\<lbrakk>cl = Func_host x21 x22;\n        host_apply_impl s (t1s _> t2s) x22 (rev ves') = Some a\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, ves, e) of\n                         (s, vs, ves, e) \\<Rightarrow>\n                           \\<lparr>s;vs;vs_to_es ves @\n  [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  s = s'\n  vs = vs'\n  es' = vs_to_es ves'' @ [Trap]\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using is_const_list[of _ \"(rev ves'')\"]\n                    reduce.intros(7)[OF _ _ ves'_length local_defs(2)]\n                    split_n_conv_app[OF true_defs]\n                    progress_L0_left Callcl Func_host local_defs(1)"], ["proof (prove)\nusing this:\n  s = s'\n  vs = vs'\n  es' = vs_to_es ves'' @ [Trap]\n  ?ves = vs_to_es ves'' \\<Longrightarrow> const_list ?ves\n  \\<lbrakk>?cl = Func_host (t1s _> ?t2s) ?f; ?ves = vs_to_es ves';\n   length ?t2s = ?m\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?ves @\n                                   [Callcl\n                                     ?cl]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;[Trap]\\<rparr>\n  ves = ves' @ ves''\n  \\<lbrakk>\\<lparr>?s;?vs;?es\\<rparr> \\<leadsto>_ ?i \\<lparr>?s';?vs';?es'\\<rparr>;\n   const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   ?es\\<rparr> \\<leadsto>_ ?i \\<lparr>?s';?vs';?cs @\n   ?es'\\<rparr>\n  e = Callcl cl\n  cl = Func_host x21 x22\n  cl_type cl = t1s _> t2s\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "unfolding cl_type_def"], ["proof (prove)\nusing this:\n  s = s'\n  vs = vs'\n  es' = vs_to_es ves'' @ [Trap]\n  ?ves = vs_to_es ves'' \\<Longrightarrow> const_list ?ves\n  \\<lbrakk>?cl = Func_host (t1s _> ?t2s) ?f; ?ves = vs_to_es ves';\n   length ?t2s = ?m\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?ves @\n                                   [Callcl\n                                     ?cl]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;[Trap]\\<rparr>\n  ves = ves' @ ves''\n  \\<lbrakk>\\<lparr>?s;?vs;?es\\<rparr> \\<leadsto>_ ?i \\<lparr>?s';?vs';?es'\\<rparr>;\n   const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   ?es\\<rparr> \\<leadsto>_ ?i \\<lparr>?s';?vs';?cs @\n   ?es'\\<rparr>\n  e = Callcl cl\n  cl = Func_host x21 x22\n  (case cl of Func_native x tf xa xb \\<Rightarrow> tf\n   | Func_host tf x \\<Rightarrow> tf) =\n  t1s _> t2s\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>cl = Func_host x21 x22;\n        host_apply_impl s (t1s _> t2s) x22 (rev ves') = Some a\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, ves, e) of\n                         (s, vs, ves, e) \\<Rightarrow>\n                           \\<lparr>s;vs;vs_to_es ves @\n  [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>cl = Func_host x21 x22;\n        host_apply_impl s (t1s _> t2s) x22 (rev ves') = Some a\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, ves, e) of\n                         (s, vs, ves, e) \\<Rightarrow>\n                           \\<lparr>s;vs;vs_to_es ves @\n  [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Some a)"], ["proof (state)\nthis:\n  host_apply_impl s (t1s _> t2s) x22 (rev ves') = Some a\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>cl = Func_host x21 x22;\n        host_apply_impl s (t1s _> t2s) x22 (rev ves') = Some a\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, ves, e) of\n                         (s, vs, ves, e) \\<Rightarrow>\n                           \\<lparr>s;vs;vs_to_es ves @\n  [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases a)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       a = (aa, b) \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Pair rs rves)"], ["proof (state)\nthis:\n  a = (rs, rves)\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       a = (aa, b) \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = (rs, rves)\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using 2(3) Callcl local_defs outer_True true_defs Func_host Some"], ["proof (prove)\nusing this:\n  a = (rs, rves)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\n  e = Callcl cl\n  cl_type cl = t1s _> t2s\n  length t1s = n\n  length t2s = m\n  n \\<le> length ves\n  split_n ves n = (ves', ves'')\n  cl = Func_host x21 x22\n  host_apply_impl s (t1s _> t2s) x22 (rev ves') = Some a\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "unfolding cl_type_def"], ["proof (prove)\nusing this:\n  a = (rs, rves)\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\n  e = Callcl cl\n  (case cl of Func_native x tf xa xb \\<Rightarrow> tf\n   | Func_host tf x \\<Rightarrow> tf) =\n  t1s _> t2s\n  length t1s = n\n  length t2s = m\n  n \\<le> length ves\n  split_n ves n = (ves', ves'')\n  cl = Func_host x21 x22\n  host_apply_impl s (t1s _> t2s) x22 (rev ves') = Some a\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases \"list_all2 types_agree t2s rves\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>a = (rs, rves);\n     run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es');\n     e = Callcl cl;\n     (case cl of Func_native x tf xa xb \\<Rightarrow> tf\n      | Func_host tf x \\<Rightarrow> tf) =\n     t1s _> t2s;\n     length t1s = n; length t2s = m; n \\<le> length ves;\n     split_n ves n = (ves', ves''); cl = Func_host x21 x22;\n     host_apply_impl s (t1s _> t2s) x22 (rev ves') = Some a;\n     list_all2 types_agree t2s rves\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>a = (rs, rves);\n     run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es');\n     e = Callcl cl;\n     (case cl of Func_native x tf xa xb \\<Rightarrow> tf\n      | Func_host tf x \\<Rightarrow> tf) =\n     t1s _> t2s;\n     length t1s = n; length t2s = m; n \\<le> length ves;\n     split_n ves n = (ves', ves''); cl = Func_host x21 x22;\n     host_apply_impl s (t1s _> t2s) x22 (rev ves') = Some a;\n     \\<not> list_all2 types_agree t2s rves\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case True"], ["proof (state)\nthis:\n  list_all2 types_agree t2s rves\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a = (rs, rves);\n     run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es');\n     e = Callcl cl;\n     (case cl of Func_native x tf xa xb \\<Rightarrow> tf\n      | Func_host tf x \\<Rightarrow> tf) =\n     t1s _> t2s;\n     length t1s = n; length t2s = m; n \\<le> length ves;\n     split_n ves n = (ves', ves''); cl = Func_host x21 x22;\n     host_apply_impl s (t1s _> t2s) x22 (rev ves') = Some a;\n     list_all2 types_agree t2s rves\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>a = (rs, rves);\n     run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es');\n     e = Callcl cl;\n     (case cl of Func_native x tf xa xb \\<Rightarrow> tf\n      | Func_host tf x \\<Rightarrow> tf) =\n     t1s _> t2s;\n     length t1s = n; length t2s = m; n \\<le> length ves;\n     split_n ves n = (ves', ves''); cl = Func_host x21 x22;\n     host_apply_impl s (t1s _> t2s) x22 (rev ves') = Some a;\n     \\<not> list_all2 types_agree t2s rves\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "hence \"rs = s'\"\n                      \"vs = vs'\"\n                      \"es' = vs_to_es ves'' @ ($$* rves) \""], ["proof (prove)\nusing this:\n  list_all2 types_agree t2s rves\n\ngoal (1 subgoal):\n 1. rs = s' &&& vs = vs' &&& es' = vs_to_es ves'' @ ($$* rves)", "using 2(3) Callcl local_defs outer_True true_defs Func_host Pair Some"], ["proof (prove)\nusing this:\n  list_all2 types_agree t2s rves\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\n  e = Callcl cl\n  cl_type cl = t1s _> t2s\n  length t1s = n\n  length t2s = m\n  n \\<le> length ves\n  split_n ves n = (ves', ves'')\n  cl = Func_host x21 x22\n  a = (rs, rves)\n  host_apply_impl s (t1s _> t2s) x22 (rev ves') = Some a\n\ngoal (1 subgoal):\n 1. rs = s' &&& vs = vs' &&& es' = vs_to_es ves'' @ ($$* rves)", "unfolding cl_type_def"], ["proof (prove)\nusing this:\n  list_all2 types_agree t2s rves\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\n  e = Callcl cl\n  (case cl of Func_native x tf xa xb \\<Rightarrow> tf\n   | Func_host tf x \\<Rightarrow> tf) =\n  t1s _> t2s\n  length t1s = n\n  length t2s = m\n  n \\<le> length ves\n  split_n ves n = (ves', ves'')\n  cl = Func_host x21 x22\n  a = (rs, rves)\n  host_apply_impl s (t1s _> t2s) x22 (rev ves') = Some a\n\ngoal (1 subgoal):\n 1. rs = s' &&& vs = vs' &&& es' = vs_to_es ves'' @ ($$* rves)", "by auto"], ["proof (state)\nthis:\n  rs = s'\n  vs = vs'\n  es' = vs_to_es ves'' @ ($$* rves)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a = (rs, rves);\n     run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es');\n     e = Callcl cl;\n     (case cl of Func_native x tf xa xb \\<Rightarrow> tf\n      | Func_host tf x \\<Rightarrow> tf) =\n     t1s _> t2s;\n     length t1s = n; length t2s = m; n \\<le> length ves;\n     split_n ves n = (ves', ves''); cl = Func_host x21 x22;\n     host_apply_impl s (t1s _> t2s) x22 (rev ves') = Some a;\n     list_all2 types_agree t2s rves\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>a = (rs, rves);\n     run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es');\n     e = Callcl cl;\n     (case cl of Func_native x tf xa xb \\<Rightarrow> tf\n      | Func_host tf x \\<Rightarrow> tf) =\n     t1s _> t2s;\n     length t1s = n; length t2s = m; n \\<le> length ves;\n     split_n ves n = (ves', ves''); cl = Func_host x21 x22;\n     host_apply_impl s (t1s _> t2s) x22 (rev ves') = Some a;\n     \\<not> list_all2 types_agree t2s rves\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  rs = s'\n  vs = vs'\n  es' = vs_to_es ves'' @ ($$* rves)\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using progress_L0_left reduce.intros(6)[OF _ _ ves'_length local_defs(2)] Pair\n                        Callcl Func_host local_defs(1) True is_const_list[of _ \"(rev ves'')\"]\n                        split_n_conv_app[OF true_defs] host_apply_impl_correct[OF Some]"], ["proof (prove)\nusing this:\n  rs = s'\n  vs = vs'\n  es' = vs_to_es ves'' @ ($$* rves)\n  \\<lbrakk>\\<lparr>?s;?vs;?es\\<rparr> \\<leadsto>_ ?i \\<lparr>?s';?vs';?es'\\<rparr>;\n   const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   ?es\\<rparr> \\<leadsto>_ ?i \\<lparr>?s';?vs';?cs @\n   ?es'\\<rparr>\n  \\<lbrakk>?cl = Func_host (t1s _> ?t2s) ?f; ?ves = vs_to_es ves';\n   length ?t2s = ?m;\n   host_apply ?s (t1s _> ?t2s) ?f (rev ves') ?hs =\n   Some (?s', ?vcs')\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?ves @\n                                   [Callcl\n                                     ?cl]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s';?vs;$$* ?vcs'\\<rparr>\n  a = (rs, rves)\n  e = Callcl cl\n  cl = Func_host x21 x22\n  cl_type cl = t1s _> t2s\n  list_all2 types_agree t2s rves\n  ?ves = vs_to_es ves'' \\<Longrightarrow> const_list ?ves\n  ves = ves' @ ves''\n  \\<exists>hs. host_apply s (t1s _> t2s) x22 (rev ves') hs = Some a\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "unfolding cl_type_def"], ["proof (prove)\nusing this:\n  rs = s'\n  vs = vs'\n  es' = vs_to_es ves'' @ ($$* rves)\n  \\<lbrakk>\\<lparr>?s;?vs;?es\\<rparr> \\<leadsto>_ ?i \\<lparr>?s';?vs';?es'\\<rparr>;\n   const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   ?es\\<rparr> \\<leadsto>_ ?i \\<lparr>?s';?vs';?cs @\n   ?es'\\<rparr>\n  \\<lbrakk>?cl = Func_host (t1s _> ?t2s) ?f; ?ves = vs_to_es ves';\n   length ?t2s = ?m;\n   host_apply ?s (t1s _> ?t2s) ?f (rev ves') ?hs =\n   Some (?s', ?vcs')\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?ves @\n                                   [Callcl\n                                     ?cl]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s';?vs;$$* ?vcs'\\<rparr>\n  a = (rs, rves)\n  e = Callcl cl\n  cl = Func_host x21 x22\n  (case cl of Func_native x tf xa xb \\<Rightarrow> tf\n   | Func_host tf x \\<Rightarrow> tf) =\n  t1s _> t2s\n  list_all2 types_agree t2s rves\n  ?ves = vs_to_es ves'' \\<Longrightarrow> const_list ?ves\n  ves = ves' @ ves''\n  \\<exists>hs. host_apply s (t1s _> t2s) x22 (rev ves') hs = Some a\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a = (rs, rves);\n     run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es');\n     e = Callcl cl;\n     (case cl of Func_native x tf xa xb \\<Rightarrow> tf\n      | Func_host tf x \\<Rightarrow> tf) =\n     t1s _> t2s;\n     length t1s = n; length t2s = m; n \\<le> length ves;\n     split_n ves n = (ves', ves''); cl = Func_host x21 x22;\n     host_apply_impl s (t1s _> t2s) x22 (rev ves') = Some a;\n     \\<not> list_all2 types_agree t2s rves\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "qed auto"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> length ves \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n \\<le> length ves \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case False"], ["proof (state)\nthis:\n  \\<not> n \\<le> length ves\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> length ves \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> n \\<le> length ves\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using 2(3) Callcl local_defs"], ["proof (prove)\nusing this:\n  \\<not> n \\<le> length ves\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\n  e = Callcl cl\n  cl_type cl = t1s _> t2s\n  length t1s = n\n  length t2s = m\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "unfolding cl_type_def"], ["proof (prove)\nusing this:\n  \\<not> n \\<le> length ves\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\n  e = Callcl cl\n  (case cl of Func_native x tf xa xb \\<Rightarrow> tf\n   | Func_host tf x \\<Rightarrow> tf) =\n  t1s _> t2s\n  length t1s = n\n  length t2s = m\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by (cases cl) auto"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Label ln les es)"], ["proof (state)\nthis:\n  e = Label ln les es\n\ngoal (2 subgoals):\n 1. \\<And>x41 x42 x43.\n       e = Label x41 x42 x43 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  e = Label ln les es\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases \"es_is_trap es\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>e = Label ln les es; es_is_trap es\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>e = Label ln les es; \\<not> es_is_trap es\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case True"], ["proof (state)\nthis:\n  es_is_trap es\n\ngoal (2 subgoals):\n 1. \\<lbrakk>e = Label ln les es; es_is_trap es\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>e = Label ln les es; \\<not> es_is_trap es\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  es_is_trap es\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using 2(3) is_const_list_vs_to_es_list\n                Label progress_L0[OF reduce.intros(1)[OF reduce_simple.intros(32)]]"], ["proof (prove)\nusing this:\n  es_is_trap es\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\n  const_list ($$* ?vs)\n  e = Label ln les es\n  const_list ?cs \\<Longrightarrow>\n  \\<lparr>?s;?vs;?cs @\n                 [Label ?n2 ?es2 [Trap]] @\n                 ?es_c\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n                       [Trap] @ ?es_c\\<rparr>\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>e = Label ln les es; \\<not> es_is_trap es\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>e = Label ln les es; \\<not> es_is_trap es\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case False"], ["proof (state)\nthis:\n  \\<not> es_is_trap es\n\ngoal (1 subgoal):\n 1. \\<lbrakk>e = Label ln les es; \\<not> es_is_trap es\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "note outer_outer_false = False"], ["proof (state)\nthis:\n  \\<not> es_is_trap es\n\ngoal (1 subgoal):\n 1. \\<lbrakk>e = Label ln les es; \\<not> es_is_trap es\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases \"(const_list es)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. const_list es \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<not> const_list es \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case True"], ["proof (state)\nthis:\n  const_list es\n\ngoal (2 subgoals):\n 1. const_list es \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<not> const_list es \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  const_list es\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using 2(3) outer_outer_false Label reduce.intros(1)[OF reduce_simple.intros(31)]\n                  progress_L0[OF _ is_const_list_vs_to_es_list[of \"rev ves\"], where ?es_c=\"[]\"]"], ["proof (prove)\nusing this:\n  const_list es\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\n  \\<not> es_is_trap es\n  e = Label ln les es\n  const_list ?e' \\<Longrightarrow>\n  \\<lparr>?s;?vs;[Label ?n1 ?es1\n                   ?e']\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?e'\\<rparr>\n  \\<lparr>?s;?vs;?es\\<rparr> \\<leadsto>_ ?i \\<lparr>?s';?vs';?es'\\<rparr> \\<Longrightarrow>\n  \\<lparr>?s;?vs;vs_to_es ves @\n                 ?es @\n                 []\\<rparr> \\<leadsto>_ ?i \\<lparr>?s';?vs';vs_to_es ves @\n                      ?es' @ []\\<rparr>\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<not> const_list es \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> const_list es \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case False"], ["proof (state)\nthis:\n  \\<not> const_list es\n\ngoal (1 subgoal):\n 1. \\<not> const_list es \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "obtain s'' vs'' es'' where run_step_is:\"run_step d i (s, vs, es) = (s'', vs'', es'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s'' vs'' es''.\n        run_step d i (s, vs, es) = (s'', vs'', es'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  run_step d i (s, vs, es) = (s'', vs'', es'')\n\ngoal (1 subgoal):\n 1. \\<not> const_list es \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases es'')"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       es'' = RSCrash x1 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x21 x22.\n       es'' = RSBreak x21 x22 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x3.\n       es'' = RSReturn x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x4.\n       es'' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case RSCrash"], ["proof (state)\nthis:\n  es'' = RSCrash x1_\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       es'' = RSCrash x1 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x21 x22.\n       es'' = RSBreak x21 x22 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x3.\n       es'' = RSReturn x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x4.\n       es'' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  es'' = RSCrash x1_\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using outer_outer_false False run_step_is Label 2(3)"], ["proof (prove)\nusing this:\n  es'' = RSCrash x1_\n  \\<not> es_is_trap es\n  \\<not> const_list es\n  run_step d i (s, vs, es) = (s'', vs'', es'')\n  e = Label ln les es\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by auto"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (3 subgoals):\n 1. \\<And>x21 x22.\n       es'' = RSBreak x21 x22 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x3.\n       es'' = RSReturn x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x4.\n       es'' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x21 x22.\n       es'' = RSBreak x21 x22 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x3.\n       es'' = RSReturn x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x4.\n       es'' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (RSBreak bn bvs)"], ["proof (state)\nthis:\n  es'' = RSBreak bn bvs\n\ngoal (3 subgoals):\n 1. \\<And>x21 x22.\n       es'' = RSBreak x21 x22 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x3.\n       es'' = RSReturn x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x4.\n       es'' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  es'' = RSBreak bn bvs\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases bn)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>es'' = RSBreak bn bvs; bn = 0\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>nat.\n       \\<lbrakk>es'' = RSBreak bn bvs; bn = Suc nat\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, ves, e) of\n                         (s, vs, ves, e) \\<Rightarrow>\n                           \\<lparr>s;vs;vs_to_es ves @\n  [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case 0"], ["proof (state)\nthis:\n  bn = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>es'' = RSBreak bn bvs; bn = 0\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>nat.\n       \\<lbrakk>es'' = RSBreak bn bvs; bn = Suc nat\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, ves, e) of\n                         (s, vs, ves, e) \\<Rightarrow>\n                           \\<lparr>s;vs;vs_to_es ves @\n  [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "have run_step_is_break0:\"run_step d i (s, vs, es) = (s'', vs'', RSBreak 0 bvs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. run_step d i (s, vs, es) = (s'', vs'', RSBreak 0 bvs)", "using run_step_is RSBreak 0"], ["proof (prove)\nusing this:\n  run_step d i (s, vs, es) = (s'', vs'', es'')\n  es'' = RSBreak bn bvs\n  bn = 0\n\ngoal (1 subgoal):\n 1. run_step d i (s, vs, es) = (s'', vs'', RSBreak 0 bvs)", "by simp"], ["proof (state)\nthis:\n  run_step d i (s, vs, es) = (s'', vs'', RSBreak 0 bvs)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>es'' = RSBreak bn bvs; bn = 0\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>nat.\n       \\<lbrakk>es'' = RSBreak bn bvs; bn = Suc nat\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, ves, e) of\n                         (s, vs, ves, e) \\<Rightarrow>\n                           \\<lparr>s;vs;vs_to_es ves @\n  [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "hence es'_def:\"es' = ((vs_to_es ((take ln bvs)@ves))@les) \\<and> s' = s'' \\<and> vs' = vs'' \\<and> ln \\<le> length bvs\""], ["proof (prove)\nusing this:\n  run_step d i (s, vs, es) = (s'', vs'', RSBreak 0 bvs)\n\ngoal (1 subgoal):\n 1. es' = vs_to_es (take ln bvs @ ves) @ les \\<and>\n    s' = s'' \\<and> vs' = vs'' \\<and> ln \\<le> length bvs", "using outer_outer_false False run_step_is Label 2(3) RSBreak"], ["proof (prove)\nusing this:\n  run_step d i (s, vs, es) = (s'', vs'', RSBreak 0 bvs)\n  \\<not> es_is_trap es\n  \\<not> const_list es\n  run_step d i (s, vs, es) = (s'', vs'', es'')\n  e = Label ln les es\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\n  es'' = RSBreak bn bvs\n\ngoal (1 subgoal):\n 1. es' = vs_to_es (take ln bvs @ ves) @ les \\<and>\n    s' = s'' \\<and> vs' = vs'' \\<and> ln \\<le> length bvs", "by (cases \"ln \\<le> length bvs\") auto"], ["proof (state)\nthis:\n  es' = vs_to_es (take ln bvs @ ves) @ les \\<and>\n  s' = s'' \\<and> vs' = vs'' \\<and> ln \\<le> length bvs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>es'' = RSBreak bn bvs; bn = 0\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>nat.\n       \\<lbrakk>es'' = RSBreak bn bvs; bn = Suc nat\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, ves, e) of\n                         (s, vs, ves, e) \\<Rightarrow>\n                           \\<lparr>s;vs;vs_to_es ves @\n  [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "then"], ["proof (chain)\npicking this:\n  es' = vs_to_es (take ln bvs @ ves) @ les \\<and>\n  s' = s'' \\<and> vs' = vs'' \\<and> ln \\<le> length bvs", "obtain n lfilled es_c where local_eqs:\"s=s'\" \"vs=vs'\" \"ln \\<le> length bvs\" \"Lfilled_exact n lfilled ((vs_to_es bvs) @ [$Br n] @ es_c) es\""], ["proof (prove)\nusing this:\n  es' = vs_to_es (take ln bvs @ ves) @ les \\<and>\n  s' = s'' \\<and> vs' = vs'' \\<and> ln \\<le> length bvs\n\ngoal (1 subgoal):\n 1. (\\<And>n lfilled es_c.\n        \\<lbrakk>s = s'; vs = vs'; ln \\<le> length bvs;\n         Lfilled_exact n lfilled (vs_to_es bvs @ [$Br n] @ es_c) es\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using run_step_break_imp_lfilled[OF run_step_is_break0] RSBreak es'_def"], ["proof (prove)\nusing this:\n  es' = vs_to_es (take ln bvs @ ves) @ les \\<and>\n  s' = s'' \\<and> vs' = vs'' \\<and> ln \\<le> length bvs\n  s = s'' \\<and>\n  vs = vs'' \\<and>\n  (\\<exists>n' lfilled es_c.\n      0 \\<le> n' \\<and>\n      Lfilled_exact (n' - 0) lfilled (vs_to_es bvs @ [$Br n'] @ es_c) es)\n  es'' = RSBreak bn bvs\n  es' = vs_to_es (take ln bvs @ ves) @ les \\<and>\n  s' = s'' \\<and> vs' = vs'' \\<and> ln \\<le> length bvs\n\ngoal (1 subgoal):\n 1. (\\<And>n lfilled es_c.\n        \\<lbrakk>s = s'; vs = vs'; ln \\<le> length bvs;\n         Lfilled_exact n lfilled (vs_to_es bvs @ [$Br n] @ es_c) es\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  s = s'\n  vs = vs'\n  ln \\<le> length bvs\n  Lfilled_exact n lfilled (vs_to_es bvs @ [$Br n] @ es_c) es\n\ngoal (2 subgoals):\n 1. \\<lbrakk>es'' = RSBreak bn bvs; bn = 0\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>nat.\n       \\<lbrakk>es'' = RSBreak bn bvs; bn = Suc nat\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, ves, e) of\n                         (s, vs, ves, e) \\<Rightarrow>\n                           \\<lparr>s;vs;vs_to_es ves @\n  [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "then"], ["proof (chain)\npicking this:\n  s = s'\n  vs = vs'\n  ln \\<le> length bvs\n  Lfilled_exact n lfilled (vs_to_es bvs @ [$Br n] @ es_c) es", "obtain lfilled' where lfilled_int:\"Lfilled n lfilled' ((vs_to_es bvs) @ [$Br n]) es\""], ["proof (prove)\nusing this:\n  s = s'\n  vs = vs'\n  ln \\<le> length bvs\n  Lfilled_exact n lfilled (vs_to_es bvs @ [$Br n] @ es_c) es\n\ngoal (1 subgoal):\n 1. (\\<And>lfilled'.\n        Lfilled n lfilled' (vs_to_es bvs @ [$Br n]) es \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using lfilled_collapse2[OF Lfilled_exact_imp_Lfilled]"], ["proof (prove)\nusing this:\n  s = s'\n  vs = vs'\n  ln \\<le> length bvs\n  Lfilled_exact n lfilled (vs_to_es bvs @ [$Br n] @ es_c) es\n  Lfilled_exact ?n ?lholed (?es @ ?es') ?LI \\<Longrightarrow>\n  \\<exists>lholed' vs'. Lfilled ?n lholed' ?es ?LI\n\ngoal (1 subgoal):\n 1. (\\<And>lfilled'.\n        Lfilled n lfilled' (vs_to_es bvs @ [$Br n]) es \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  Lfilled n lfilled' (vs_to_es bvs @ [$Br n]) es\n\ngoal (2 subgoals):\n 1. \\<lbrakk>es'' = RSBreak bn bvs; bn = 0\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>nat.\n       \\<lbrakk>es'' = RSBreak bn bvs; bn = Suc nat\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, ves, e) of\n                         (s, vs, ves, e) \\<Rightarrow>\n                           \\<lparr>s;vs;vs_to_es ves @\n  [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "obtain lfilled'' where \"Lfilled n lfilled'' ((drop (length bvs - ln) (vs_to_es bvs)) @ [$Br n]) es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>lfilled''.\n        Lfilled n lfilled''\n         (drop (length bvs - ln) (vs_to_es bvs) @ [$Br n])\n         es \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using lfilled_collapse1[OF lfilled_int] is_const_list_vs_to_es_list[of \"rev bvs\"] local_eqs(3)"], ["proof (prove)\nusing this:\n  \\<lbrakk>const_list (vs_to_es bvs);\n   ?l \\<le> length (vs_to_es bvs)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lholed'.\n                       Lfilled n lholed'\n                        (drop (length (vs_to_es bvs) - ?l) (vs_to_es bvs) @\n                         [$Br n])\n                        es\n  const_list (vs_to_es bvs)\n  ln \\<le> length bvs\n\ngoal (1 subgoal):\n 1. (\\<And>lfilled''.\n        Lfilled n lfilled''\n         (drop (length bvs - ln) (vs_to_es bvs) @ [$Br n])\n         es \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  Lfilled n lfilled'' (drop (length bvs - ln) (vs_to_es bvs) @ [$Br n]) es\n\ngoal (2 subgoals):\n 1. \\<lbrakk>es'' = RSBreak bn bvs; bn = 0\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>nat.\n       \\<lbrakk>es'' = RSBreak bn bvs; bn = Suc nat\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, ves, e) of\n                         (s, vs, ves, e) \\<Rightarrow>\n                           \\<lparr>s;vs;vs_to_es ves @\n  [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "hence \"\\<lparr>[Label ln les es]\\<rparr> \\<leadsto> \\<lparr>(drop (length bvs - ln) (vs_to_es bvs))@les\\<rparr>\""], ["proof (prove)\nusing this:\n  Lfilled n lfilled'' (drop (length bvs - ln) (vs_to_es bvs) @ [$Br n]) es\n\ngoal (1 subgoal):\n 1. \\<lparr>[Label ln les\n              es]\\<rparr> \\<leadsto> \\<lparr>drop (length bvs - ln)\n        (vs_to_es bvs) @\n       les\\<rparr>", "using reduce_simple.intros(33) local_eqs(3) is_const_list_vs_to_es_list"], ["proof (prove)\nusing this:\n  Lfilled n lfilled'' (drop (length bvs - ln) (vs_to_es bvs) @ [$Br n]) es\n  \\<lbrakk>const_list ?vs; length ?vs = ?n;\n   Lfilled ?i ?lholed (?vs @ [$Br ?i]) ?LI\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>[Label ?n ?es\n                              ?LI]\\<rparr> \\<leadsto> \\<lparr>?vs @\n                        ?es\\<rparr>\n  ln \\<le> length bvs\n  const_list ($$* ?vs)\n\ngoal (1 subgoal):\n 1. \\<lparr>[Label ln les\n              es]\\<rparr> \\<leadsto> \\<lparr>drop (length bvs - ln)\n        (vs_to_es bvs) @\n       les\\<rparr>", "unfolding drop_map"], ["proof (prove)\nusing this:\n  Lfilled n lfilled'' (($$* drop (length bvs - ln) (rev bvs)) @ [$Br n]) es\n  \\<lbrakk>const_list ?vs; length ?vs = ?n;\n   Lfilled ?i ?lholed (?vs @ [$Br ?i]) ?LI\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>[Label ?n ?es\n                              ?LI]\\<rparr> \\<leadsto> \\<lparr>?vs @\n                        ?es\\<rparr>\n  ln \\<le> length bvs\n  const_list ($$* ?vs)\n\ngoal (1 subgoal):\n 1. \\<lparr>[Label ln les\n              es]\\<rparr> \\<leadsto> \\<lparr>($$* drop (length bvs - ln)\n             (rev bvs)) @\n       les\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  \\<lparr>[Label ln les\n            es]\\<rparr> \\<leadsto> \\<lparr>drop (length bvs - ln)\n      (vs_to_es bvs) @\n     les\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>es'' = RSBreak bn bvs; bn = 0\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>nat.\n       \\<lbrakk>es'' = RSBreak bn bvs; bn = Suc nat\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, ves, e) of\n                         (s, vs, ves, e) \\<Rightarrow>\n                           \\<lparr>s;vs;vs_to_es ves @\n  [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "hence 1:\"\\<lparr>s;vs;[Label ln les es]\\<rparr> \\<leadsto>_i \\<lparr>s';vs';(drop (length bvs - ln) (vs_to_es bvs))@les\\<rparr>\""], ["proof (prove)\nusing this:\n  \\<lparr>[Label ln les\n            es]\\<rparr> \\<leadsto> \\<lparr>drop (length bvs - ln)\n      (vs_to_es bvs) @\n     les\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;[Label ln les\n                   es]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';drop\n                       (length bvs - ln) (vs_to_es bvs) @\n                      les\\<rparr>", "using reduce.intros(1) local_eqs(1,2)"], ["proof (prove)\nusing this:\n  \\<lparr>[Label ln les\n            es]\\<rparr> \\<leadsto> \\<lparr>drop (length bvs - ln)\n      (vs_to_es bvs) @\n     les\\<rparr>\n  \\<lparr>?e\\<rparr> \\<leadsto> \\<lparr>?e'\\<rparr> \\<Longrightarrow>\n  \\<lparr>?s;?vs;?e\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?e'\\<rparr>\n  s = s'\n  vs = vs'\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;[Label ln les\n                   es]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';drop\n                       (length bvs - ln) (vs_to_es bvs) @\n                      les\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  \\<lparr>s;vs;[Label ln les\n                 es]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';drop\n                     (length bvs - ln) (vs_to_es bvs) @\n                    les\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>es'' = RSBreak bn bvs; bn = 0\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>nat.\n       \\<lbrakk>es'' = RSBreak bn bvs; bn = Suc nat\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, ves, e) of\n                         (s, vs, ves, e) \\<Rightarrow>\n                           \\<lparr>s;vs;vs_to_es ves @\n  [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "have \"\\<lparr>s;vs;(vs_to_es ves)@[e]\\<rparr> \\<leadsto>_i \\<lparr>s';vs';(vs_to_es ves)@(drop (length bvs - ln) (vs_to_es bvs))@les\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';vs_to_es ves @\n                    drop (length bvs - ln) (vs_to_es bvs) @ les\\<rparr>", "using progress_L0[OF 1 is_const_list_vs_to_es_list[of \"rev ves\"], of \"[]\"] Label"], ["proof (prove)\nusing this:\n  \\<lparr>s;vs;vs_to_es ves @\n               [Label ln les es] @\n               []\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';vs_to_es ves @\n                 (drop (length bvs - ln) (vs_to_es bvs) @ les) @ []\\<rparr>\n  e = Label ln les es\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';vs_to_es ves @\n                    drop (length bvs - ln) (vs_to_es bvs) @ les\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';vs_to_es ves @\n                  drop (length bvs - ln) (vs_to_es bvs) @ les\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>es'' = RSBreak bn bvs; bn = 0\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>nat.\n       \\<lbrakk>es'' = RSBreak bn bvs; bn = Suc nat\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, ves, e) of\n                         (s, vs, ves, e) \\<Rightarrow>\n                           \\<lparr>s;vs;vs_to_es ves @\n  [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lparr>s;vs;vs_to_es ves @\n               [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';vs_to_es ves @\n                  drop (length bvs - ln) (vs_to_es bvs) @ les\\<rparr>\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using es'_def"], ["proof (prove)\nusing this:\n  \\<lparr>s;vs;vs_to_es ves @\n               [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';vs_to_es ves @\n                  drop (length bvs - ln) (vs_to_es bvs) @ les\\<rparr>\n  es' = vs_to_es (take ln bvs @ ves) @ les \\<and>\n  s' = s'' \\<and> vs' = vs'' \\<and> ln \\<le> length bvs\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "unfolding drop_map rev_take[symmetric]"], ["proof (prove)\nusing this:\n  \\<lparr>s;vs;vs_to_es ves @\n               [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';vs_to_es ves @\n                  vs_to_es (take ln bvs) @ les\\<rparr>\n  es' = vs_to_es (take ln bvs @ ves) @ les \\<and>\n  s' = s'' \\<and> vs' = vs'' \\<and> ln \\<le> length bvs\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by auto"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>es'' = RSBreak bn bvs; bn = Suc nat\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, ves, e) of\n                         (s, vs, ves, e) \\<Rightarrow>\n                           \\<lparr>s;vs;vs_to_es ves @\n  [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>es'' = RSBreak bn bvs; bn = Suc nat\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, ves, e) of\n                         (s, vs, ves, e) \\<Rightarrow>\n                           \\<lparr>s;vs;vs_to_es ves @\n  [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Suc nat)"], ["proof (state)\nthis:\n  bn = Suc nat\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>es'' = RSBreak bn bvs; bn = Suc nat\\<rbrakk>\n       \\<Longrightarrow> case (s, vs, ves, e) of\n                         (s, vs, ves, e) \\<Rightarrow>\n                           \\<lparr>s;vs;vs_to_es ves @\n  [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  bn = Suc nat\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using outer_outer_false False run_step_is Label 2(3) RSBreak"], ["proof (prove)\nusing this:\n  bn = Suc nat\n  \\<not> es_is_trap es\n  \\<not> const_list es\n  run_step d i (s, vs, es) = (s'', vs'', es'')\n  e = Label ln les es\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\n  es'' = RSBreak bn bvs\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by auto"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       es'' = RSReturn x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x4.\n       es'' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x3.\n       es'' = RSReturn x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x4.\n       es'' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (RSReturn x3)"], ["proof (state)\nthis:\n  es'' = RSReturn x3\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       es'' = RSReturn x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x4.\n       es'' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  es'' = RSReturn x3\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using outer_outer_false False run_step_is Label 2(3)"], ["proof (prove)\nusing this:\n  es'' = RSReturn x3\n  \\<not> es_is_trap es\n  \\<not> const_list es\n  run_step d i (s, vs, es) = (s'', vs'', es'')\n  e = Label ln les es\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by auto"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>x4.\n       es'' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x4.\n       es'' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (RSNormal x4)"], ["proof (state)\nthis:\n  es'' = RSNormal x4\n\ngoal (1 subgoal):\n 1. \\<And>x4.\n       es'' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "hence \"es' = (vs_to_es ves)@[Label ln les x4]\" \"s' = s''\" \"vs' = vs''\""], ["proof (prove)\nusing this:\n  es'' = RSNormal x4\n\ngoal (1 subgoal):\n 1. es' = vs_to_es ves @ [Label ln les x4] &&& s' = s'' &&& vs' = vs''", "using outer_outer_false False run_step_is Label 2(3) run_step_is"], ["proof (prove)\nusing this:\n  es'' = RSNormal x4\n  \\<not> es_is_trap es\n  \\<not> const_list es\n  run_step d i (s, vs, es) = (s'', vs'', es'')\n  e = Label ln les es\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\n  run_step d i (s, vs, es) = (s'', vs'', es'')\n\ngoal (1 subgoal):\n 1. es' = vs_to_es ves @ [Label ln les x4] &&& s' = s'' &&& vs' = vs''", "by auto"], ["proof (state)\nthis:\n  es' = vs_to_es ves @ [Label ln les x4]\n  s' = s''\n  vs' = vs''\n\ngoal (1 subgoal):\n 1. \\<And>x4.\n       es'' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "(* v* label_n {e* } Li end e* *)"], ["proof (state)\nthis:\n  es' = vs_to_es ves @ [Label ln les x4]\n  s' = s''\n  vs' = vs''\n\ngoal (1 subgoal):\n 1. \\<And>x4.\n       es'' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "moreover"], ["proof (state)\nthis:\n  es' = vs_to_es ves @ [Label ln les x4]\n  s' = s''\n  vs' = vs''\n\ngoal (1 subgoal):\n 1. \\<And>x4.\n       es'' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "have \"Lfilled 1 (LRec (vs_to_es ves) ln les (LBase [] []) []) es ((vs_to_es ves)@[Label ln les es])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lfilled 1 (LRec (vs_to_es ves) ln les (LBase [] []) []) es\n     (vs_to_es ves @ [Label ln les es])", "using Lfilled.intros(1)[of \"[]\" _ \"[]\" es]\n                    Lfilled.intros(2)\n                    is_const_list_vs_to_es_list[of \"rev ves\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>const_list []; ?lholed = LBase [] []\\<rbrakk>\n  \\<Longrightarrow> Lfilled 0 ?lholed es ([] @ es @ [])\n  \\<lbrakk>const_list ?vs; ?lholed = LRec ?vs ?n ?es' ?l ?es'';\n   Lfilled ?k ?l ?es ?lfilledk\\<rbrakk>\n  \\<Longrightarrow> Lfilled (?k + 1) ?lholed ?es\n                     (?vs @ [Label ?n ?es' ?lfilledk] @ ?es'')\n  const_list (vs_to_es ves)\n\ngoal (1 subgoal):\n 1. Lfilled 1 (LRec (vs_to_es ves) ln les (LBase [] []) []) es\n     (vs_to_es ves @ [Label ln les es])", "unfolding const_list_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>list_all is_const []; ?lholed = LBase [] []\\<rbrakk>\n  \\<Longrightarrow> Lfilled 0 ?lholed es ([] @ es @ [])\n  \\<lbrakk>list_all is_const ?vs; ?lholed = LRec ?vs ?n ?es' ?l ?es'';\n   Lfilled ?k ?l ?es ?lfilledk\\<rbrakk>\n  \\<Longrightarrow> Lfilled (?k + 1) ?lholed ?es\n                     (?vs @ [Label ?n ?es' ?lfilledk] @ ?es'')\n  list_all is_const (vs_to_es ves)\n\ngoal (1 subgoal):\n 1. Lfilled 1 (LRec (vs_to_es ves) ln les (LBase [] []) []) es\n     (vs_to_es ves @ [Label ln les es])", "by fastforce"], ["proof (state)\nthis:\n  Lfilled 1 (LRec (vs_to_es ves) ln les (LBase [] []) []) es\n   (vs_to_es ves @ [Label ln les es])\n\ngoal (1 subgoal):\n 1. \\<And>x4.\n       es'' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "moreover"], ["proof (state)\nthis:\n  Lfilled 1 (LRec (vs_to_es ves) ln les (LBase [] []) []) es\n   (vs_to_es ves @ [Label ln les es])\n\ngoal (1 subgoal):\n 1. \\<And>x4.\n       es'' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "have \"Lfilled 1 (LRec (vs_to_es ves) ln les (LBase [] []) []) x4 ((vs_to_es ves)@[Label ln les x4])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lfilled 1 (LRec (vs_to_es ves) ln les (LBase [] []) []) x4\n     (vs_to_es ves @ [Label ln les x4])", "using Lfilled.intros(1)[of \"[]\" _ \"[]\" x4]\n                    Lfilled.intros(2)\n                    is_const_list_vs_to_es_list[of \"rev ves\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>const_list []; ?lholed = LBase [] []\\<rbrakk>\n  \\<Longrightarrow> Lfilled 0 ?lholed x4 ([] @ x4 @ [])\n  \\<lbrakk>const_list ?vs; ?lholed = LRec ?vs ?n ?es' ?l ?es'';\n   Lfilled ?k ?l ?es ?lfilledk\\<rbrakk>\n  \\<Longrightarrow> Lfilled (?k + 1) ?lholed ?es\n                     (?vs @ [Label ?n ?es' ?lfilledk] @ ?es'')\n  const_list (vs_to_es ves)\n\ngoal (1 subgoal):\n 1. Lfilled 1 (LRec (vs_to_es ves) ln les (LBase [] []) []) x4\n     (vs_to_es ves @ [Label ln les x4])", "unfolding const_list_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>list_all is_const []; ?lholed = LBase [] []\\<rbrakk>\n  \\<Longrightarrow> Lfilled 0 ?lholed x4 ([] @ x4 @ [])\n  \\<lbrakk>list_all is_const ?vs; ?lholed = LRec ?vs ?n ?es' ?l ?es'';\n   Lfilled ?k ?l ?es ?lfilledk\\<rbrakk>\n  \\<Longrightarrow> Lfilled (?k + 1) ?lholed ?es\n                     (?vs @ [Label ?n ?es' ?lfilledk] @ ?es'')\n  list_all is_const (vs_to_es ves)\n\ngoal (1 subgoal):\n 1. Lfilled 1 (LRec (vs_to_es ves) ln les (LBase [] []) []) x4\n     (vs_to_es ves @ [Label ln les x4])", "by fastforce"], ["proof (state)\nthis:\n  Lfilled 1 (LRec (vs_to_es ves) ln les (LBase [] []) []) x4\n   (vs_to_es ves @ [Label ln les x4])\n\ngoal (1 subgoal):\n 1. \\<And>x4.\n       es'' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "moreover"], ["proof (state)\nthis:\n  Lfilled 1 (LRec (vs_to_es ves) ln les (LBase [] []) []) x4\n   (vs_to_es ves @ [Label ln les x4])\n\ngoal (1 subgoal):\n 1. \\<And>x4.\n       es'' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "have inner_reduce:\"\\<lparr>s;vs;es\\<rparr> \\<leadsto>_i \\<lparr>s'';vs'';x4\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s'';vs'';x4\\<rparr>", "using 2(1)[OF Label outer_outer_false False] run_step_is RSNormal"], ["proof (prove)\nusing this:\n  run_step d i (s, vs, es) = (?s', ?vs', RSNormal ?es') \\<Longrightarrow>\n  case (s, vs, es) of\n  (s, vs, es) \\<Rightarrow>\n    \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>?s';?vs';?es'\\<rparr>\n  run_step d i (s, vs, es) = (s'', vs'', es'')\n  es'' = RSNormal x4\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s'';vs'';x4\\<rparr>", "by auto"], ["proof (state)\nthis:\n  \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s'';vs'';x4\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>x4.\n       es'' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "ultimately"], ["proof (chain)\npicking this:\n  es' = vs_to_es ves @ [Label ln les x4]\n  s' = s''\n  vs' = vs''\n  Lfilled 1 (LRec (vs_to_es ves) ln les (LBase [] []) []) es\n   (vs_to_es ves @ [Label ln les es])\n  Lfilled 1 (LRec (vs_to_es ves) ln les (LBase [] []) []) x4\n   (vs_to_es ves @ [Label ln les x4])\n  \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s'';vs'';x4\\<rparr>", "show ?thesis"], ["proof (prove)\nusing this:\n  es' = vs_to_es ves @ [Label ln les x4]\n  s' = s''\n  vs' = vs''\n  Lfilled 1 (LRec (vs_to_es ves) ln les (LBase [] []) []) es\n   (vs_to_es ves @ [Label ln les es])\n  Lfilled 1 (LRec (vs_to_es ves) ln les (LBase [] []) []) x4\n   (vs_to_es ves @ [Label ln les x4])\n  \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s'';vs'';x4\\<rparr>\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using Label 2(3) outer_outer_false False run_step_is\n                    reduce.intros(23)[OF inner_reduce]"], ["proof (prove)\nusing this:\n  es' = vs_to_es ves @ [Label ln les x4]\n  s' = s''\n  vs' = vs''\n  Lfilled 1 (LRec (vs_to_es ves) ln les (LBase [] []) []) es\n   (vs_to_es ves @ [Label ln les es])\n  Lfilled 1 (LRec (vs_to_es ves) ln les (LBase [] []) []) x4\n   (vs_to_es ves @ [Label ln les x4])\n  \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s'';vs'';x4\\<rparr>\n  e = Label ln les es\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\n  \\<not> es_is_trap es\n  \\<not> const_list es\n  run_step d i (s, vs, es) = (s'', vs'', es'')\n  \\<lbrakk>Lfilled ?k ?lholed es ?les; Lfilled ?k ?lholed x4 ?les'\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>s;vs;?les\\<rparr> \\<leadsto>_ i \\<lparr>s'';vs'';?les'\\<rparr>\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Local ln j vls es)"], ["proof (state)\nthis:\n  e = Local ln j vls es\n\ngoal (1 subgoal):\n 1. \\<And>x51 x52 x53 x54.\n       e = Local x51 x52 x53 x54 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  e = Local ln j vls es\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases \"es_is_trap es\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>e = Local ln j vls es; es_is_trap es\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>e = Local ln j vls es; \\<not> es_is_trap es\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case True"], ["proof (state)\nthis:\n  es_is_trap es\n\ngoal (2 subgoals):\n 1. \\<lbrakk>e = Local ln j vls es; es_is_trap es\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>e = Local ln j vls es; \\<not> es_is_trap es\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  es_is_trap es\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using 2(3) is_const_list_vs_to_es_list\n                Local progress_L0[OF reduce.intros(1)[OF reduce_simple.intros(39)]]"], ["proof (prove)\nusing this:\n  es_is_trap es\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\n  const_list ($$* ?vs)\n  e = Local ln j vls es\n  const_list ?cs \\<Longrightarrow>\n  \\<lparr>?s;?vs;?cs @\n                 [Local ?n2 ?i2 ?vs2 [Trap]] @\n                 ?es_c\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?cs @\n                       [Trap] @ ?es_c\\<rparr>\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>e = Local ln j vls es; \\<not> es_is_trap es\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>e = Local ln j vls es; \\<not> es_is_trap es\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case False"], ["proof (state)\nthis:\n  \\<not> es_is_trap es\n\ngoal (1 subgoal):\n 1. \\<lbrakk>e = Local ln j vls es; \\<not> es_is_trap es\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "note outer_outer_false = False"], ["proof (state)\nthis:\n  \\<not> es_is_trap es\n\ngoal (1 subgoal):\n 1. \\<lbrakk>e = Local ln j vls es; \\<not> es_is_trap es\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases \"(const_list es)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. const_list es \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<not> const_list es \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case True"], ["proof (state)\nthis:\n  const_list es\n\ngoal (2 subgoals):\n 1. const_list es \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<not> const_list es \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "note outer_true = True"], ["proof (state)\nthis:\n  const_list es\n\ngoal (2 subgoals):\n 1. const_list es \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<not> const_list es \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  const_list es\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases \"length es = ln\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>const_list es; length es = ln\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>const_list es; length es \\<noteq> ln\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case True"], ["proof (state)\nthis:\n  length es = ln\n\ngoal (2 subgoals):\n 1. \\<lbrakk>const_list es; length es = ln\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<lbrakk>const_list es; length es \\<noteq> ln\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  length es = ln\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using 2(3) Local outer_true outer_outer_false is_const_list_vs_to_es_list[of \"rev ves\"]\n                  reduce.intros(1)[OF reduce_simple.intros(38)[OF outer_true True]]\n                  progress_L0[where ?es_c=\"[]\"]"], ["proof (prove)\nusing this:\n  length es = ln\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\n  e = Local ln j vls es\n  const_list es\n  \\<not> es_is_trap es\n  const_list (vs_to_es ves)\n  \\<lparr>?s;?vs;[Local ln ?i1 ?vs1\n                   es]\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;es\\<rparr>\n  \\<lbrakk>\\<lparr>?s;?vs;?es\\<rparr> \\<leadsto>_ ?i \\<lparr>?s';?vs';?es'\\<rparr>;\n   const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   ?es @\n                                   []\\<rparr> \\<leadsto>_ ?i \\<lparr>?s';?vs';?cs @\n  ?es' @ []\\<rparr>\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>const_list es; length es \\<noteq> ln\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>const_list es; length es \\<noteq> ln\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case False"], ["proof (state)\nthis:\n  length es \\<noteq> ln\n\ngoal (1 subgoal):\n 1. \\<lbrakk>const_list es; length es \\<noteq> ln\\<rbrakk>\n    \\<Longrightarrow> case (s, vs, ves, e) of\n                      (s, vs, ves, e) \\<Rightarrow>\n                        \\<lparr>s;vs;vs_to_es ves @\n                                     [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  length es \\<noteq> ln\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using 2(3) Local outer_outer_false outer_true is_const_list_vs_to_es_list[of \"rev ves\"]"], ["proof (prove)\nusing this:\n  length es \\<noteq> ln\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\n  e = Local ln j vls es\n  \\<not> es_is_trap es\n  const_list es\n  const_list (vs_to_es ves)\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by auto"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<not> const_list es \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> const_list es \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case False"], ["proof (state)\nthis:\n  \\<not> const_list es\n\ngoal (1 subgoal):\n 1. \\<not> const_list es \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases d)"], ["proof (state)\ngoal (2 subgoals):\n 1. d = 0 \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>nat.\n       d = Suc nat \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case 0"], ["proof (state)\nthis:\n  d = 0\n\ngoal (2 subgoals):\n 1. d = 0 \\<Longrightarrow>\n    case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>nat.\n       d = Suc nat \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  d = 0\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using 2(3) Local outer_outer_false False is_const_list_vs_to_es_list[of \"rev ves\"]"], ["proof (prove)\nusing this:\n  d = 0\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\n  e = Local ln j vls es\n  \\<not> es_is_trap es\n  \\<not> const_list es\n  const_list (vs_to_es ves)\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by auto"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       d = Suc nat \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       d = Suc nat \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (Suc d')"], ["proof (state)\nthis:\n  d = Suc d'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       d = Suc nat \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "obtain s'' vls' les' where run_step_is:\"run_step d' j (s, vls, es) = (s'', vls', les')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s'' vls' les'.\n        run_step d' j (s, vls, es) = (s'', vls', les') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  run_step d' j (s, vls, es) = (s'', vls', les')\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       d = Suc nat \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "proof (cases les')"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       les' = RSCrash x1 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x21 x22.\n       les' = RSBreak x21 x22 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x3.\n       les' = RSReturn x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x4.\n       les' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case RSCrash"], ["proof (state)\nthis:\n  les' = RSCrash x1_\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       les' = RSCrash x1 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x21 x22.\n       les' = RSBreak x21 x22 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x3.\n       les' = RSReturn x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 4. \\<And>x4.\n       les' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  les' = RSCrash x1_\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using outer_outer_false False run_step_is Local 2(3) Suc"], ["proof (prove)\nusing this:\n  les' = RSCrash x1_\n  \\<not> es_is_trap es\n  \\<not> const_list es\n  run_step d' j (s, vls, es) = (s'', vls', les')\n  e = Local ln j vls es\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\n  d = Suc d'\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by auto"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (3 subgoals):\n 1. \\<And>x21 x22.\n       les' = RSBreak x21 x22 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x3.\n       les' = RSReturn x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x4.\n       les' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x21 x22.\n       les' = RSBreak x21 x22 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x3.\n       les' = RSReturn x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x4.\n       les' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (RSBreak x21 x22)"], ["proof (state)\nthis:\n  les' = RSBreak x21 x22\n\ngoal (3 subgoals):\n 1. \\<And>x21 x22.\n       les' = RSBreak x21 x22 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x3.\n       les' = RSReturn x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 3. \\<And>x4.\n       les' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  les' = RSBreak x21 x22\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using outer_outer_false False run_step_is Local 2(3) Suc"], ["proof (prove)\nusing this:\n  les' = RSBreak x21 x22\n  \\<not> es_is_trap es\n  \\<not> const_list es\n  run_step d' j (s, vls, es) = (s'', vls', les')\n  e = Local ln j vls es\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\n  d = Suc d'\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by auto"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       les' = RSReturn x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x4.\n       les' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x3.\n       les' = RSReturn x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x4.\n       les' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (RSReturn x3)"], ["proof (state)\nthis:\n  les' = RSReturn x3\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       les' = RSReturn x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x4.\n       les' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "hence es'_def:\"es' = (vs_to_es ((take ln x3)@ves)) \\<and> s' = s'' \\<and> vs = vs' \\<and> ln \\<le> length x3\""], ["proof (prove)\nusing this:\n  les' = RSReturn x3\n\ngoal (1 subgoal):\n 1. es' = vs_to_es (take ln x3 @ ves) \\<and>\n    s' = s'' \\<and> vs = vs' \\<and> ln \\<le> length x3", "using outer_outer_false False run_step_is Local 2(3) Suc"], ["proof (prove)\nusing this:\n  les' = RSReturn x3\n  \\<not> es_is_trap es\n  \\<not> const_list es\n  run_step d' j (s, vls, es) = (s'', vls', les')\n  e = Local ln j vls es\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\n  d = Suc d'\n\ngoal (1 subgoal):\n 1. es' = vs_to_es (take ln x3 @ ves) \\<and>\n    s' = s'' \\<and> vs = vs' \\<and> ln \\<le> length x3", "by (cases \"ln \\<le> length x3\") auto"], ["proof (state)\nthis:\n  es' = vs_to_es (take ln x3 @ ves) \\<and>\n  s' = s'' \\<and> vs = vs' \\<and> ln \\<le> length x3\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       les' = RSReturn x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x4.\n       les' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "then"], ["proof (chain)\npicking this:\n  es' = vs_to_es (take ln x3 @ ves) \\<and>\n  s' = s'' \\<and> vs = vs' \\<and> ln \\<le> length x3", "obtain n lfilled es_c where local_eqs:\"s=s'\" \"vs=vs'\" \"ln \\<le> length x3\" \"Lfilled_exact n lfilled ((vs_to_es x3) @ [$Return] @ es_c) es\""], ["proof (prove)\nusing this:\n  es' = vs_to_es (take ln x3 @ ves) \\<and>\n  s' = s'' \\<and> vs = vs' \\<and> ln \\<le> length x3\n\ngoal (1 subgoal):\n 1. (\\<And>n lfilled es_c.\n        \\<lbrakk>s = s'; vs = vs'; ln \\<le> length x3;\n         Lfilled_exact n lfilled (vs_to_es x3 @ [$Return] @ es_c)\n          es\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using run_step_is run_step_return_imp_lfilled RSReturn"], ["proof (prove)\nusing this:\n  es' = vs_to_es (take ln x3 @ ves) \\<and>\n  s' = s'' \\<and> vs = vs' \\<and> ln \\<le> length x3\n  run_step d' j (s, vls, es) = (s'', vls', les')\n  run_step ?d ?i (?s, ?vs, ?es) =\n  (?s', ?vs', RSReturn ?res) \\<Longrightarrow>\n  ?s = ?s' \\<and>\n  ?vs = ?vs' \\<and>\n  (\\<exists>n lfilled es_c.\n      Lfilled_exact n lfilled (vs_to_es ?res @ [$Return] @ es_c) ?es)\n  les' = RSReturn x3\n\ngoal (1 subgoal):\n 1. (\\<And>n lfilled es_c.\n        \\<lbrakk>s = s'; vs = vs'; ln \\<le> length x3;\n         Lfilled_exact n lfilled (vs_to_es x3 @ [$Return] @ es_c)\n          es\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  s = s'\n  vs = vs'\n  ln \\<le> length x3\n  Lfilled_exact n lfilled (vs_to_es x3 @ [$Return] @ es_c) es\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       les' = RSReturn x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x4.\n       les' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "then"], ["proof (chain)\npicking this:\n  s = s'\n  vs = vs'\n  ln \\<le> length x3\n  Lfilled_exact n lfilled (vs_to_es x3 @ [$Return] @ es_c) es", "obtain lfilled' where lfilled_int:\"Lfilled n lfilled' ((vs_to_es x3) @ [$Return]) es\""], ["proof (prove)\nusing this:\n  s = s'\n  vs = vs'\n  ln \\<le> length x3\n  Lfilled_exact n lfilled (vs_to_es x3 @ [$Return] @ es_c) es\n\ngoal (1 subgoal):\n 1. (\\<And>lfilled'.\n        Lfilled n lfilled' (vs_to_es x3 @ [$Return]) es \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using lfilled_collapse2[OF Lfilled_exact_imp_Lfilled]"], ["proof (prove)\nusing this:\n  s = s'\n  vs = vs'\n  ln \\<le> length x3\n  Lfilled_exact n lfilled (vs_to_es x3 @ [$Return] @ es_c) es\n  Lfilled_exact ?n ?lholed (?es @ ?es') ?LI \\<Longrightarrow>\n  \\<exists>lholed' vs'. Lfilled ?n lholed' ?es ?LI\n\ngoal (1 subgoal):\n 1. (\\<And>lfilled'.\n        Lfilled n lfilled' (vs_to_es x3 @ [$Return]) es \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  Lfilled n lfilled' (vs_to_es x3 @ [$Return]) es\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       les' = RSReturn x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x4.\n       les' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "obtain lfilled'' where \"Lfilled n lfilled'' ((drop (length x3 - ln) (vs_to_es x3)) @ [$Return]) es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>lfilled''.\n        Lfilled n lfilled''\n         (drop (length x3 - ln) (vs_to_es x3) @ [$Return])\n         es \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using lfilled_collapse1[OF lfilled_int] is_const_list_vs_to_es_list[of \"rev x3\"] local_eqs(3)"], ["proof (prove)\nusing this:\n  \\<lbrakk>const_list (vs_to_es x3); ?l \\<le> length (vs_to_es x3)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lholed'.\n                       Lfilled n lholed'\n                        (drop (length (vs_to_es x3) - ?l) (vs_to_es x3) @\n                         [$Return])\n                        es\n  const_list (vs_to_es x3)\n  ln \\<le> length x3\n\ngoal (1 subgoal):\n 1. (\\<And>lfilled''.\n        Lfilled n lfilled''\n         (drop (length x3 - ln) (vs_to_es x3) @ [$Return])\n         es \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  Lfilled n lfilled'' (drop (length x3 - ln) (vs_to_es x3) @ [$Return]) es\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       les' = RSReturn x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x4.\n       les' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "hence \"\\<lparr>[Local ln j vls es]\\<rparr> \\<leadsto> \\<lparr>(drop (length x3 - ln) (vs_to_es x3))\\<rparr>\""], ["proof (prove)\nusing this:\n  Lfilled n lfilled'' (drop (length x3 - ln) (vs_to_es x3) @ [$Return]) es\n\ngoal (1 subgoal):\n 1. \\<lparr>[Local ln j vls\n              es]\\<rparr> \\<leadsto> \\<lparr>drop (length x3 - ln)\n        (vs_to_es x3)\\<rparr>", "using reduce_simple.intros(40) local_eqs(3) is_const_list_vs_to_es_list"], ["proof (prove)\nusing this:\n  Lfilled n lfilled'' (drop (length x3 - ln) (vs_to_es x3) @ [$Return]) es\n  \\<lbrakk>const_list ?vs; length ?vs = ?n;\n   Lfilled ?j ?lholed (?vs @ [$Return]) ?es\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>[Local ?n ?i ?vls\n                              ?es]\\<rparr> \\<leadsto> \\<lparr>?vs\\<rparr>\n  ln \\<le> length x3\n  const_list ($$* ?vs)\n\ngoal (1 subgoal):\n 1. \\<lparr>[Local ln j vls\n              es]\\<rparr> \\<leadsto> \\<lparr>drop (length x3 - ln)\n        (vs_to_es x3)\\<rparr>", "unfolding drop_map"], ["proof (prove)\nusing this:\n  Lfilled n lfilled'' (($$* drop (length x3 - ln) (rev x3)) @ [$Return]) es\n  \\<lbrakk>const_list ?vs; length ?vs = ?n;\n   Lfilled ?j ?lholed (?vs @ [$Return]) ?es\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>[Local ?n ?i ?vls\n                              ?es]\\<rparr> \\<leadsto> \\<lparr>?vs\\<rparr>\n  ln \\<le> length x3\n  const_list ($$* ?vs)\n\ngoal (1 subgoal):\n 1. \\<lparr>[Local ln j vls\n              es]\\<rparr> \\<leadsto> \\<lparr>$$* drop (length x3 - ln)\n            (rev x3)\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  \\<lparr>[Local ln j vls\n            es]\\<rparr> \\<leadsto> \\<lparr>drop (length x3 - ln)\n      (vs_to_es x3)\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       les' = RSReturn x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x4.\n       les' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "hence 1:\"\\<lparr>s;vs;[Local ln j vls es]\\<rparr> \\<leadsto>_i \\<lparr>s';vs';(drop (length x3 - ln) (vs_to_es x3))\\<rparr>\""], ["proof (prove)\nusing this:\n  \\<lparr>[Local ln j vls\n            es]\\<rparr> \\<leadsto> \\<lparr>drop (length x3 - ln)\n      (vs_to_es x3)\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;[Local ln j vls\n                   es]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';drop\n                       (length x3 - ln) (vs_to_es x3)\\<rparr>", "using reduce.intros(1) local_eqs(1,2)"], ["proof (prove)\nusing this:\n  \\<lparr>[Local ln j vls\n            es]\\<rparr> \\<leadsto> \\<lparr>drop (length x3 - ln)\n      (vs_to_es x3)\\<rparr>\n  \\<lparr>?e\\<rparr> \\<leadsto> \\<lparr>?e'\\<rparr> \\<Longrightarrow>\n  \\<lparr>?s;?vs;?e\\<rparr> \\<leadsto>_ ?i \\<lparr>?s;?vs;?e'\\<rparr>\n  s = s'\n  vs = vs'\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;[Local ln j vls\n                   es]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';drop\n                       (length x3 - ln) (vs_to_es x3)\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  \\<lparr>s;vs;[Local ln j vls\n                 es]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';drop\n                     (length x3 - ln) (vs_to_es x3)\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       les' = RSReturn x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x4.\n       les' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "have \"\\<lparr>s;vs;(vs_to_es ves)@[e]\\<rparr> \\<leadsto>_i \\<lparr>s';vs';(vs_to_es ves)@(drop (length x3 - ln) (vs_to_es x3))\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';vs_to_es ves @\n                    drop (length x3 - ln) (vs_to_es x3)\\<rparr>", "using progress_L0[OF 1 is_const_list_vs_to_es_list[of \"rev ves\"], of \"[]\"] Local"], ["proof (prove)\nusing this:\n  \\<lparr>s;vs;vs_to_es ves @\n               [Local ln j vls es] @\n               []\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';vs_to_es ves @\n                 drop (length x3 - ln) (vs_to_es x3) @ []\\<rparr>\n  e = Local ln j vls es\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';vs_to_es ves @\n                    drop (length x3 - ln) (vs_to_es x3)\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  \\<lparr>s;vs;vs_to_es ves @\n               [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';vs_to_es ves @\n                  drop (length x3 - ln) (vs_to_es x3)\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       les' = RSReturn x3 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n 2. \\<And>x4.\n       les' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lparr>s;vs;vs_to_es ves @\n               [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';vs_to_es ves @\n                  drop (length x3 - ln) (vs_to_es x3)\\<rparr>\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using es'_def"], ["proof (prove)\nusing this:\n  \\<lparr>s;vs;vs_to_es ves @\n               [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';vs_to_es ves @\n                  drop (length x3 - ln) (vs_to_es x3)\\<rparr>\n  es' = vs_to_es (take ln x3 @ ves) \\<and>\n  s' = s'' \\<and> vs = vs' \\<and> ln \\<le> length x3\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "unfolding drop_map rev_take[symmetric]"], ["proof (prove)\nusing this:\n  \\<lparr>s;vs;vs_to_es ves @\n               [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';vs_to_es ves @\n                  vs_to_es (take ln x3)\\<rparr>\n  es' = vs_to_es (take ln x3 @ ves) \\<and>\n  s' = s'' \\<and> vs = vs' \\<and> ln \\<le> length x3\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by auto"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>x4.\n       les' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x4.\n       les' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "case (RSNormal x4)"], ["proof (state)\nthis:\n  les' = RSNormal x4\n\ngoal (1 subgoal):\n 1. \\<And>x4.\n       les' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "hence inner_reduce:\"\\<lparr>s;vls;es\\<rparr> \\<leadsto>_j \\<lparr>s'';vls';x4\\<rparr>\""], ["proof (prove)\nusing this:\n  les' = RSNormal x4\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vls;es\\<rparr> \\<leadsto>_ j \\<lparr>s'';vls';x4\\<rparr>", "using 2(2)[OF Local outer_outer_false False] run_step_is Suc"], ["proof (prove)\nusing this:\n  les' = RSNormal x4\n  \\<lbrakk>d = Suc ?nat;\n   run_step ?nat j (s, vls, es) = (?s', ?vs', RSNormal ?es')\\<rbrakk>\n  \\<Longrightarrow> case (s, vls, es) of\n                    (s, vs, es) \\<Rightarrow>\n                      \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ j \\<lparr>?s';?vs';?es'\\<rparr>\n  run_step d' j (s, vls, es) = (s'', vls', les')\n  d = Suc d'\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vls;es\\<rparr> \\<leadsto>_ j \\<lparr>s'';vls';x4\\<rparr>", "by auto"], ["proof (state)\nthis:\n  \\<lparr>s;vls;es\\<rparr> \\<leadsto>_ j \\<lparr>s'';vls';x4\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>x4.\n       les' = RSNormal x4 \\<Longrightarrow>\n       case (s, vs, ves, e) of\n       (s, vs, ves, e) \\<Rightarrow>\n         \\<lparr>s;vs;vs_to_es ves @\n                      [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lparr>s;vls;es\\<rparr> \\<leadsto>_ j \\<lparr>s'';vls';x4\\<rparr>\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using Local 2(3) Local outer_outer_false False run_step_is Suc\n                      reduce.intros(24)[OF inner_reduce] RSNormal\n                      progress_L0_left is_const_list_vs_to_es_list[of \"rev ves\"]"], ["proof (prove)\nusing this:\n  \\<lparr>s;vls;es\\<rparr> \\<leadsto>_ j \\<lparr>s'';vls';x4\\<rparr>\n  e = Local ln j vls es\n  run_one_step d i (s, vs, ves, e) = (s', vs', RSNormal es')\n  e = Local ln j vls es\n  \\<not> es_is_trap es\n  \\<not> const_list es\n  run_step d' j (s, vls, es) = (s'', vls', les')\n  d = Suc d'\n  \\<lparr>s;?v0s;[Local ?n j vls\n                   es]\\<rparr> \\<leadsto>_ ?j \\<lparr>s'';?v0s;[Local ?n j\n                           vls' x4]\\<rparr>\n  les' = RSNormal x4\n  \\<lbrakk>\\<lparr>?s;?vs;?es\\<rparr> \\<leadsto>_ ?i \\<lparr>?s';?vs';?es'\\<rparr>;\n   const_list ?cs\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?s;?vs;?cs @\n                                   ?es\\<rparr> \\<leadsto>_ ?i \\<lparr>?s';?vs';?cs @\n   ?es'\\<rparr>\n  const_list (vs_to_es ves)\n\ngoal (1 subgoal):\n 1. case (s, vs, ves, e) of\n    (s, vs, ves, e) \\<Rightarrow>\n      \\<lparr>s;vs;vs_to_es ves @\n                   [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by (auto simp del: run_step.simps)"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  run_step d i (s, vs, es) = (s', vs', RSNormal es') \\<Longrightarrow>\n  case (s, vs, es) of\n  (s, vs, es) \\<Rightarrow>\n    \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n  run_one_step d i (s, vs, ves, e) =\n  (s', vs', RSNormal es') \\<Longrightarrow>\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. run_step d i (s, vs, es) = (s', vs', RSNormal es') \\<Longrightarrow>\n    \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  run_step d i (s, vs, es) = (s', vs', RSNormal es') \\<Longrightarrow>\n  case (s, vs, es) of\n  (s, vs, es) \\<Rightarrow>\n    \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n  run_one_step d i (s, vs, ves, e) =\n  (s', vs', RSNormal es') \\<Longrightarrow>\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "using assms"], ["proof (prove)\nusing this:\n  run_step d i (s, vs, es) = (s', vs', RSNormal es') \\<Longrightarrow>\n  case (s, vs, es) of\n  (s, vs, es) \\<Rightarrow>\n    \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n  run_one_step d i (s, vs, ves, e) =\n  (s', vs', RSNormal es') \\<Longrightarrow>\n  case (s, vs, ves, e) of\n  (s, vs, ves, e) \\<Rightarrow>\n    \\<lparr>s;vs;vs_to_es ves @\n                 [e]\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n  run_step d i (s, vs, es) = (s', vs', RSNormal es')\n\ngoal (1 subgoal):\n 1. \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>", "by blast"], ["proof (state)\nthis:\n  \\<lparr>s;vs;es\\<rparr> \\<leadsto>_ i \\<lparr>s';vs';es'\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}