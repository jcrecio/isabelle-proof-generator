{"file_name": "/home/qj213/afp-2021-10-22/thys/WebAssembly/Wasm_Properties_Aux.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/WebAssembly", "problem_names": ["lemma typeof_i32:\n  assumes \"typeof v = T_i32\"\n  shows \"\\<exists>c. v = ConstInt32 c\"", "lemma typeof_i64:\n  assumes \"typeof v = T_i64\"\n  shows \"\\<exists>c. v = ConstInt64 c\"", "lemma typeof_f32:\n  assumes \"typeof v = T_f32\"\n  shows \"\\<exists>c. v = ConstFloat32 c\"", "lemma typeof_f64:\n  assumes \"typeof v = T_f64\"\n  shows \"\\<exists>c. v = ConstFloat64 c\"", "lemma exists_v_typeof: \"\\<exists>v v. typeof v = t\"", "lemma lfilled_collapse1:\n  assumes \"Lfilled n lholed (vs@es) LI\"\n          \"const_list vs\"\n          \"length vs \\<ge> l\"\n  shows \"\\<exists>lholed'. Lfilled n lholed' ((drop (length vs - l) vs)@es) LI\"", "lemma lfilled_collapse2:\n  assumes \"Lfilled n lholed (es@es') LI\"\n  shows \"\\<exists>lholed' vs'. Lfilled n lholed' es LI\"", "lemma lfilled_collapse3:\n  assumes \"Lfilled k lholed [Label n les es] LI\"\n  shows \"\\<exists>lholed'. Lfilled (Suc k) lholed' es LI\"", "lemma unlift_b_e: assumes \"\\<S>\\<bullet>\\<C> \\<turnstile> $*b_es : tf\" shows \"\\<C> \\<turnstile> b_es : tf\"", "lemma store_typing_imp_inst_length_eq:\n  assumes \"store_typing s \\<S>\"\n  shows \"length (inst s) = length (s_inst \\<S>)\"", "lemma store_typing_imp_func_length_eq:\n  assumes \"store_typing s \\<S>\"\n  shows \"length (funcs s) = length (s_funcs \\<S>)\"", "lemma store_typing_imp_mem_length_eq:\n  assumes \"store_typing s \\<S>\"\n  shows \"length (s.mem s) = length (s_mem \\<S>)\"", "lemma store_typing_imp_glob_length_eq:\n  assumes \"store_typing s \\<S>\"\n  shows \"length (globs s) = length (s_globs \\<S>)\"", "lemma store_typing_imp_inst_typing:\n  assumes \"store_typing s \\<S>\"\n          \"i < length (inst s)\"\n  shows \"inst_typing \\<S> ((inst s)!i) ((s_inst \\<S>)!i)\"", "lemma stab_typed_some_imp_member:\n  assumes \"stab s i c = Some cl\"\n          \"store_typing s \\<S>\"\n          \"i < length (inst s)\"\n  shows \"Some cl \\<in> set (concat (s.tab s))\"", "lemma stab_typed_some_imp_cl_typed:\n  assumes \"stab s i c = Some cl\"\n          \"store_typing s \\<S>\"\n          \"i < length (inst s)\"\n  shows \"\\<exists>tf. cl_typing \\<S> cl tf\"", "lemma b_e_type_empty1[dest]: assumes \"\\<C> \\<turnstile> [] : (ts _> ts')\" shows \"ts = ts'\"", "lemma b_e_type_empty: \"(\\<C> \\<turnstile> [] : (ts _> ts')) = (ts = ts')\"", "lemma b_e_type_value:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = C v\"\n  shows \"ts' = ts @ [typeof v]\"", "lemma b_e_type_load:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Load t tp_sx a off\"\n  shows \"\\<exists>ts'' sec n. ts = ts''@[T_i32] \\<and> ts' = ts''@[t] \\<and> (memory \\<C>) = Some n\"\n        \"load_store_t_bounds a (option_projl tp_sx) t\"", "lemma b_e_type_store:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Store t tp a off\"\n    shows \"ts = ts'@[T_i32, t]\"\n          \"\\<exists>sec n. (memory \\<C>) = Some n\"\n          \"load_store_t_bounds a tp t\"", "lemma b_e_type_current_memory:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Current_memory\"\n  shows \"\\<exists>sec n. ts' = ts @ [T_i32] \\<and> (memory \\<C>) = Some n\"", "lemma b_e_type_grow_memory:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Grow_memory\"\n  shows \"\\<exists>ts''. ts = ts''@[T_i32] \\<and> ts = ts' \\<and> (\\<exists>n. (memory \\<C>) = Some n)\"", "lemma b_e_type_nop:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Nop\"\n  shows \"ts = ts'\"", "lemma b_e_type_binop_relop:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Binop_i t iop \\<or> e = Binop_f t fop \\<or> e = Relop_i t irop \\<or> e = Relop_f t frop\"\n  shows \"\\<exists>ts''. ts = ts''@[t,t] \\<and> ts' = ts''@[arity_2_result(e)]\"\n        \"e = Binop_f t fop \\<Longrightarrow> is_float_t t\"\n        \"e = Relop_f t frop \\<Longrightarrow> is_float_t t\"", "lemma b_e_type_testop_drop_cvt0:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Testop t testop \\<or> e = Drop \\<or> e = Cvtop t1 cvtop t2 sx\"\n  shows \"ts \\<noteq> []\"", "lemma b_e_type_unop_testop:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Unop_i t iop \\<or> e = Unop_f t fop \\<or> e = Testop t testop\"\n  shows \"\\<exists>ts''. ts = ts''@[t] \\<and> ts' = ts''@[arity_1_result e]\"\n        \"e = Unop_f t fop \\<Longrightarrow> is_float_t t\"", "lemma b_e_type_cvtop:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Cvtop t1 cvtop t sx\"\n  shows \"\\<exists>ts''. ts = ts''@[t] \\<and> ts' = ts''@[arity_1_result e]\"\n        \"cvtop = Convert \\<Longrightarrow> (t1 \\<noteq> t) \\<and> (sx = None) = ((is_float_t t1 \\<and> is_float_t t) \\<or> (is_int_t t1 \\<and> is_int_t t \\<and> (t_length t1 < t_length t)))\"\n        \"cvtop = Reinterpret \\<Longrightarrow> (t1 \\<noteq> t) \\<and> t_length t1 = t_length t\"", "lemma b_e_type_drop:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Drop\"\n  shows \"\\<exists>t. ts = ts'@[t]\"", "lemma b_e_type_select:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Select\"\n  shows \"\\<exists>ts'' t. ts = ts''@[t,t,T_i32] \\<and> ts' = ts''@[t]\"", "lemma b_e_type_call:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Call i\"\n  shows  \"i < length (func_t \\<C>)\"\n         \"\\<exists>ts'' tf1 tf2. ts = ts''@tf1 \\<and> ts' = ts''@tf2 \\<and> (func_t \\<C>)!i = (tf1 _> tf2)\"", "lemma b_e_type_call_indirect:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Call_indirect i\"\n  shows \"i < length (types_t \\<C>)\"\n        \"\\<exists>ts'' tf1 tf2. ts = ts''@tf1@[T_i32] \\<and> ts' = ts''@tf2 \\<and> (types_t \\<C>)!i = (tf1 _> tf2)\"", "lemma b_e_type_get_local:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Get_local i\"\n  shows \"\\<exists>t. ts' = ts@[t] \\<and> (local \\<C>)!i = t\" \"i < length(local \\<C>)\"", "lemma b_e_type_set_local:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Set_local i\"\n  shows \"\\<exists>t. ts = ts'@[t] \\<and> (local \\<C>)!i = t\" \"i < length(local \\<C>)\"", "lemma b_e_type_tee_local:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Tee_local i\"\n  shows \"\\<exists>ts'' t. ts = ts''@[t] \\<and> ts' = ts''@[t] \\<and> (local \\<C>)!i = t\" \"i < length(local \\<C>)\"", "lemma b_e_type_get_global:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Get_global i\"\n  shows \"\\<exists>t. ts' = ts@[t] \\<and> tg_t((global \\<C>)!i) = t\" \"i < length(global \\<C>)\"", "lemma b_e_type_set_global:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Set_global i\"\n  shows \"\\<exists>t. ts = ts'@[t] \\<and> (global \\<C>)!i = \\<lparr>tg_mut = T_mut, tg_t = t\\<rparr> \\<and> i < length(global \\<C>)\"", "lemma b_e_type_block:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Block tf es\"\n  shows \"\\<exists>ts'' tfn tfm. tf = (tfn _> tfm) \\<and> (ts = ts''@tfn) \\<and> (ts' = ts''@tfm) \\<and>\n                        (\\<C>\\<lparr>label :=  [tfm] @ label \\<C>\\<rparr> \\<turnstile> es : tf)\"", "lemma b_e_type_loop:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Loop tf es\"\n  shows \"\\<exists>ts'' tfn tfm. tf = (tfn _> tfm) \\<and> (ts = ts''@tfn) \\<and> (ts' = ts''@tfm) \\<and>\n                        (\\<C>\\<lparr>label :=  [tfn] @ label \\<C>\\<rparr> \\<turnstile> es : tf)\"", "lemma b_e_type_if:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = If tf es1 es2\"\n  shows \"\\<exists>ts'' tfn tfm. tf = (tfn _> tfm) \\<and> (ts = ts''@tfn @ [T_i32]) \\<and> (ts' = ts''@tfm) \\<and>\n                        (\\<C>\\<lparr>label := [tfm] @ label \\<C>\\<rparr> \\<turnstile> es1 : tf) \\<and>\n                        (\\<C>\\<lparr>label := [tfm] @ label \\<C>\\<rparr> \\<turnstile> es2 : tf)\"", "lemma b_e_type_br:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Br i\"\n        shows \"i < length(label \\<C>)\"\n              \"\\<exists>ts_c ts''. ts = ts_c @ ts'' \\<and> (label \\<C>)!i = ts''\"", "lemma b_e_type_br_if:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Br_if i\"\n        shows \"i < length(label \\<C>)\"\n              \"\\<exists>ts_c ts''. ts = ts_c @ ts'' @ [T_i32] \\<and> ts' = ts_c @ ts'' \\<and> (label \\<C>)!i = ts''\"", "lemma b_e_type_br_table:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Br_table is i\"\n  shows \"\\<exists>ts_c ts''. list_all (\\<lambda>i. i < length(label \\<C>) \\<and> (label \\<C>)!i = ts'') (is@[i]) \\<and> ts = ts_c @ ts''@[T_i32]\"", "lemma b_e_type_return:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Return\"\n        shows \"\\<exists>ts_c ts''. ts = ts_c @ ts'' \\<and> (return \\<C>) = Some ts''\"", "lemma b_e_type_comp:\n  assumes \"\\<C> \\<turnstile> es@[e] : (t1s _> t4s)\"\n  shows \"\\<exists>ts'. (\\<C> \\<turnstile> es : (t1s _> ts')) \\<and> (\\<C> \\<turnstile> [e] : (ts' _> t4s))\"", "lemma b_e_type_comp2_unlift:\n  assumes \"\\<S>\\<bullet>\\<C> \\<turnstile> [$e1, $e2] : (t1s _> t2s)\"\n  shows \"\\<exists>ts'. (\\<C> \\<turnstile> [e1] : (t1s _> ts')) \\<and> (\\<C> \\<turnstile> [e2] : (ts' _> t2s))\"", "lemma b_e_type_comp2_relift:\n  assumes \"\\<C> \\<turnstile> [e1] : (t1s _> ts')\" \"\\<C> \\<turnstile> [e2] : (ts' _> t2s)\"\n  shows \"\\<S>\\<bullet>\\<C> \\<turnstile> [$e1, $e2] : (ts@t1s _> ts@t2s)\"", "lemma b_e_type_value2:\n  assumes \"\\<C> \\<turnstile> [C v1, C v2] : (t1s _> t2s)\"\n  shows \"t2s = t1s @ [typeof v1, typeof v2]\"", "lemma e_type_comp:\n  assumes \"\\<S>\\<bullet>\\<C> \\<turnstile> es@[e] : (t1s _> t3s)\"\n  shows \"\\<exists>ts'. (\\<S>\\<bullet>\\<C> \\<turnstile> es : (t1s _> ts')) \\<and> (\\<S>\\<bullet>\\<C> \\<turnstile> [e] : (ts' _> t3s))\"", "lemma e_type_comp_conc:\n  assumes \"\\<S>\\<bullet>\\<C> \\<turnstile> es : (t1s _> t2s)\"\n          \"\\<S>\\<bullet>\\<C> \\<turnstile> es' : (t2s _> t3s)\"\n  shows \"\\<S>\\<bullet>\\<C> \\<turnstile> es@es' : (t1s _> t3s)\"", "lemma b_e_type_comp_conc:\n  assumes \"\\<C> \\<turnstile> es : (t1s _> t2s)\"\n          \"\\<C> \\<turnstile> es' : (t2s _> t3s)\"\n  shows \"\\<C> \\<turnstile> es@es' : (t1s _> t3s)\"", "lemma e_type_comp_conc1:\n  assumes \"\\<S>\\<bullet>\\<C> \\<turnstile> es@es' : (ts _> ts')\"\n  shows \"\\<exists>ts''. (\\<S>\\<bullet>\\<C> \\<turnstile> es : (ts _> ts'')) \\<and> (\\<S>\\<bullet>\\<C> \\<turnstile> es' : (ts'' _> ts'))\"", "lemma e_type_comp_conc2:\n  assumes \"\\<S>\\<bullet>\\<C> \\<turnstile> es@es'@es'' : (t1s _> t2s)\"\n  shows \"\\<exists>ts' ts''. (\\<S>\\<bullet>\\<C> \\<turnstile> es : (t1s _> ts'))\n                     \\<and> (\\<S>\\<bullet>\\<C> \\<turnstile> es' : (ts' _> ts''))\n                     \\<and> (\\<S>\\<bullet>\\<C> \\<turnstile> es'' : (ts'' _> t2s))\"", "lemma b_e_type_value_list:\n  assumes \"(\\<C> \\<turnstile> es@[C v] : (ts _> ts'@[t]))\"\n  shows \"(\\<C> \\<turnstile> es : (ts _> ts'))\"\n        \"(typeof v = t)\"", "lemma e_type_label:\n  assumes \"\\<S>\\<bullet>\\<C> \\<turnstile> [Label n es0 es] : (ts _> ts')\"\n  shows \"\\<exists>tls t2s. (ts' = (ts@t2s))\n                \\<and> length tls = n\n                \\<and> (\\<S>\\<bullet>\\<C> \\<turnstile> es0 : (tls _> t2s))\n                \\<and> (\\<S>\\<bullet>\\<C>\\<lparr>label := [tls] @ (label \\<C>)\\<rparr> \\<turnstile> es : ([] _> t2s))\"", "lemma e_type_callcl_native:\n  assumes \"\\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : (t1s' _> t2s')\"\n          \"cl = Func_native i tf ts es\"\n  shows \"\\<exists>t1s t2s ts_c. (t1s' = ts_c @ t1s)\n                         \\<and> (t2s' = ts_c @ t2s)\n                         \\<and> tf = (t1s _> t2s)\n                         \\<and> i < length (s_inst \\<S>)\n                         \\<and> (((s_inst \\<S>)!i)\\<lparr>local := (local ((s_inst \\<S>)!i)) @ t1s @ ts, label := ([t2s] @ (label ((s_inst \\<S>)!i))), return := Some t2s\\<rparr>  \\<turnstile> es : ([] _> t2s))\"", "lemma e_type_callcl_host:\n  assumes \"\\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : (t1s' _> t2s')\"\n          \"cl = Func_host tf f\"\n  shows \"\\<exists>t1s t2s ts_c. (t1s' = ts_c @ t1s)\n                        \\<and> (t2s' = ts_c @ t2s)\n                        \\<and> tf = (t1s _> t2s)\"", "lemma e_type_callcl:\n  assumes \"\\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : (t1s' _> t2s')\"\n  shows \"\\<exists>t1s t2s ts_c. (t1s' = ts_c @ t1s)\n                        \\<and> (t2s' = ts_c @ t2s)\n                        \\<and> cl_type cl = (t1s _> t2s)\"", "lemma s_type_unfold:\n  assumes \"\\<S>\\<bullet>rs \\<tturnstile>_i vs;es : ts\"\n  shows \"i < length (s_inst \\<S>)\"\n        \"(rs = Some ts) \\<or> rs = None\"\n        \"(\\<S>\\<bullet>((s_inst \\<S>)!i)\\<lparr>local := (local ((s_inst \\<S>)!i)) @ (map typeof vs), return := rs\\<rparr> \\<turnstile> es : ([] _> ts))\"", "lemma e_type_local:\n  assumes \"\\<S>\\<bullet>\\<C> \\<turnstile> [Local n i vs es] : (ts _> ts')\"\n  shows \"\\<exists>tls. i < length (s_inst \\<S>)\n               \\<and> length tls = n\n               \\<and> (\\<S>\\<bullet>((s_inst \\<S>)!i)\\<lparr>local := (local ((s_inst \\<S>)!i)) @ (map typeof vs), return := Some tls\\<rparr> \\<turnstile> es : ([] _> tls))\n               \\<and> ts' = ts @ tls\"", "lemma e_type_local_shallow:\n  assumes \"\\<S>\\<bullet>\\<C> \\<turnstile> [Local n i vs es] : (ts _> ts')\"\n  shows \"\\<exists>tls. length tls = n \\<and> ts' = ts@tls \\<and> (\\<S>\\<bullet>(Some tls) \\<tturnstile>_i vs;es : tls)\"", "lemma e_type_const_unwrap:\n  assumes \"is_const e\"\n  shows \"\\<exists>v. e = $C v\"", "lemma is_const_list1:\n  assumes \"ves = map (Basic \\<circ> EConst) vs\"\n  shows \"const_list ves\"", "lemma is_const_list:\n  assumes \"ves = $$* vs\"\n  shows \"const_list ves\"", "lemma const_list_cons_last:\n  assumes \"const_list (es@[e])\"\n  shows \"const_list es\"\n        \"is_const e\"", "lemma e_type_const1:\n  assumes \"is_const e\"\n  shows \"\\<exists>t. (\\<S>\\<bullet>\\<C> \\<turnstile> [e] : (ts _> ts@[t]))\"", "lemma e_type_const:\n  assumes \"is_const e\"\n          \"\\<S>\\<bullet>\\<C> \\<turnstile> [e] : (ts _> ts')\"\n  shows  \"\\<exists>t. (ts' = ts@[t]) \\<and> (\\<S>\\<bullet>\\<C>' \\<turnstile> [e] : ([] _> [t]))\"", "lemma const_typeof:\n  assumes \"\\<S>\\<bullet>\\<C> \\<turnstile> [$C v] : ([] _> [t])\"\n  shows \"typeof v = t\"", "lemma e_type_const_list:\n  assumes \"const_list vs\"\n          \"\\<S>\\<bullet>\\<C> \\<turnstile> vs : (ts _> ts')\"\n  shows   \"\\<exists>tvs. ts' = ts @ tvs \\<and> length vs = length tvs \\<and> (\\<S>\\<bullet>\\<C>' \\<turnstile> vs : ([] _> tvs))\"", "lemma e_type_const_list_snoc:\n  assumes \"const_list vs\"\n          \"\\<S>\\<bullet>\\<C> \\<turnstile> vs : ([] _> ts@[t])\"\n  shows \"\\<exists>vs1 v2. (\\<S>\\<bullet>\\<C> \\<turnstile> vs1 : ([] _> ts))\n                   \\<and> (\\<S>\\<bullet>\\<C> \\<turnstile> [v2] : (ts _> ts@[t]))\n                   \\<and> (vs = vs1@[v2])\n                   \\<and> const_list vs1\n                   \\<and> is_const v2\"", "lemma e_type_const_list_cons:\n  assumes \"const_list vs\"\n          \"\\<S>\\<bullet>\\<C> \\<turnstile> vs : ([] _> (ts1@ts2))\"\n  shows \"\\<exists>vs1 vs2. (\\<S>\\<bullet>\\<C> \\<turnstile> vs1 : ([] _> ts1))\n                   \\<and> (\\<S>\\<bullet>\\<C> \\<turnstile> vs2 : (ts1 _> (ts1@ts2)))\n                   \\<and> vs = vs1@vs2\n                   \\<and> const_list vs1\n                   \\<and> const_list vs2\"", "lemma e_type_const_conv_vs:\n  assumes \"const_list ves\"\n  shows \"\\<exists>vs. ves = $$* vs\"", "lemma types_exist_lfilled:\n  assumes \"Lfilled k lholed es lfilled\"\n          \"\\<S>\\<bullet>\\<C> \\<turnstile> lfilled : (ts _> ts')\"\n  shows \"\\<exists>t1s t2s \\<C>' arb_label. (\\<S>\\<bullet>\\<C>\\<lparr>label := arb_label@(label \\<C>)\\<rparr> \\<turnstile> es : (t1s _> t2s))\"", "lemma types_exist_lfilled_weak:\n  assumes \"Lfilled k lholed es lfilled\"\n          \"\\<S>\\<bullet>\\<C> \\<turnstile> lfilled : (ts _> ts')\"\n  shows \"\\<exists>t1s t2s \\<C>' arb_label arb_return. (\\<S>\\<bullet>\\<C>\\<lparr>label := arb_label, return := arb_return\\<rparr> \\<turnstile> es : (t1s _> t2s))\"", "lemma store_typing_imp_func_agree:\n  assumes \"store_typing s \\<S>\"\n          \"i < length (s_inst \\<S>)\"\n          \"j < length (func_t ((s_inst \\<S>)!i))\"\n  shows \"(sfunc_ind s i j) < length (s_funcs \\<S>)\"\n        \"cl_typing \\<S> (sfunc s i j) ((s_funcs \\<S>)!(sfunc_ind s i j))\"\n        \"((s_funcs \\<S>)!(sfunc_ind s i j)) = (func_t ((s_inst \\<S>)!i))!j\"", "lemma store_typing_imp_glob_agree:\n  assumes \"store_typing s \\<S>\"\n          \"i < length (s_inst \\<S>)\"\n          \"j < length (global ((s_inst \\<S>)!i))\"\n  shows \"(sglob_ind s i j) < length (s_globs \\<S>)\"\n        \"glob_agree (sglob s i j) ((s_globs \\<S>)!(sglob_ind s i j))\"\n        \"((s_globs \\<S>)!(sglob_ind s i j)) = (global ((s_inst \\<S>)!i))!j\"", "lemma store_typing_imp_mem_agree_Some:\n  assumes \"store_typing s \\<S>\"\n          \"i < length (s_inst \\<S>)\"\n          \"smem_ind s i = Some j\"\n  shows \"j < length (s_mem \\<S>)\"\n        \"mem_agree ((mem s)!j) ((s_mem \\<S>)!j)\"\n        \"\\<exists>x. ((s_mem \\<S>)!j) = x \\<and> (memory ((s_inst \\<S>)!i)) = Some x\"", "lemma store_typing_imp_mem_agree_None:\n  assumes \"store_typing s \\<S>\"\n          \"i < length (s_inst \\<S>)\"\n          \"smem_ind s i = None\"\n  shows \"(memory ((s_inst \\<S>)!i)) = None\"", "lemma store_mem_exists:\n  assumes \"i < length (s_inst \\<S>)\"\n          \"store_typing s \\<S>\"\n  shows \"Option.is_none (memory ((s_inst \\<S>)!i)) = Option.is_none (inst.mem ((inst s)!i))\"", "lemma store_preserved_mem:\n  assumes \"store_typing s \\<S>\"\n          \"s' = s\\<lparr>s.mem := (s.mem s)[i := mem']\\<rparr>\"\n          \"mem_size mem' \\<ge> mem_size orig_mem\"\n          \"((s.mem s)!i) = orig_mem\"\n  shows \"store_typing s' \\<S>\"", "lemma types_agree_imp_e_typing:\n  assumes \"types_agree t v\"\n  shows \"\\<S>\\<bullet>\\<C> \\<turnstile> [$C v] : ([] _> [t])\"", "lemma list_types_agree_imp_e_typing:\n  assumes \"list_all2 types_agree ts vs\"\n  shows \"\\<S>\\<bullet>\\<C> \\<turnstile> $$* vs : ([] _> ts)\"", "lemma b_e_typing_imp_list_types_agree:\n  assumes \"\\<C> \\<turnstile> (map (\\<lambda>v. C v) vs) : (ts' _> ts'@ts)\"\n  shows \"list_all2 types_agree ts vs\"", "lemma e_typing_imp_list_types_agree:\n  assumes \"\\<S>\\<bullet>\\<C> \\<turnstile> ($$* vs) : (ts' _> ts'@ts)\"\n  shows \"list_all2 types_agree ts vs\"", "lemma store_extension_imp_store_typing:\n  assumes \"store_extension s s'\"\n          \"store_typing s \\<S>\"\n  shows \"store_typing s' \\<S>\"", "lemma lfilled_deterministic:\n  assumes \"Lfilled k lfilled es les\"\n          \"Lfilled k lfilled es les'\"\n  shows \"les = les'\""], "translations": [["", "lemma typeof_i32:\n  assumes \"typeof v = T_i32\"\n  shows \"\\<exists>c. v = ConstInt32 c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c. v = ConstInt32 c", "using assms"], ["proof (prove)\nusing this:\n  typeof v = T_i32\n\ngoal (1 subgoal):\n 1. \\<exists>c. v = ConstInt32 c", "unfolding typeof_def"], ["proof (prove)\nusing this:\n  (case v of ConstInt32 x \\<Rightarrow> T_i32\n   | ConstInt64 x \\<Rightarrow> T_i64 | ConstFloat32 x \\<Rightarrow> T_f32\n   | ConstFloat64 x \\<Rightarrow> T_f64) =\n  T_i32\n\ngoal (1 subgoal):\n 1. \\<exists>c. v = ConstInt32 c", "by (cases v) auto"], ["", "lemma typeof_i64:\n  assumes \"typeof v = T_i64\"\n  shows \"\\<exists>c. v = ConstInt64 c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c. v = ConstInt64 c", "using assms"], ["proof (prove)\nusing this:\n  typeof v = T_i64\n\ngoal (1 subgoal):\n 1. \\<exists>c. v = ConstInt64 c", "unfolding typeof_def"], ["proof (prove)\nusing this:\n  (case v of ConstInt32 x \\<Rightarrow> T_i32\n   | ConstInt64 x \\<Rightarrow> T_i64 | ConstFloat32 x \\<Rightarrow> T_f32\n   | ConstFloat64 x \\<Rightarrow> T_f64) =\n  T_i64\n\ngoal (1 subgoal):\n 1. \\<exists>c. v = ConstInt64 c", "by (cases v) auto"], ["", "lemma typeof_f32:\n  assumes \"typeof v = T_f32\"\n  shows \"\\<exists>c. v = ConstFloat32 c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c. v = ConstFloat32 c", "using assms"], ["proof (prove)\nusing this:\n  typeof v = T_f32\n\ngoal (1 subgoal):\n 1. \\<exists>c. v = ConstFloat32 c", "unfolding typeof_def"], ["proof (prove)\nusing this:\n  (case v of ConstInt32 x \\<Rightarrow> T_i32\n   | ConstInt64 x \\<Rightarrow> T_i64 | ConstFloat32 x \\<Rightarrow> T_f32\n   | ConstFloat64 x \\<Rightarrow> T_f64) =\n  T_f32\n\ngoal (1 subgoal):\n 1. \\<exists>c. v = ConstFloat32 c", "by (cases v) auto"], ["", "lemma typeof_f64:\n  assumes \"typeof v = T_f64\"\n  shows \"\\<exists>c. v = ConstFloat64 c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c. v = ConstFloat64 c", "using assms"], ["proof (prove)\nusing this:\n  typeof v = T_f64\n\ngoal (1 subgoal):\n 1. \\<exists>c. v = ConstFloat64 c", "unfolding typeof_def"], ["proof (prove)\nusing this:\n  (case v of ConstInt32 x \\<Rightarrow> T_i32\n   | ConstInt64 x \\<Rightarrow> T_i64 | ConstFloat32 x \\<Rightarrow> T_f32\n   | ConstFloat64 x \\<Rightarrow> T_f64) =\n  T_f64\n\ngoal (1 subgoal):\n 1. \\<exists>c. v = ConstFloat64 c", "by (cases v) auto"], ["", "lemma exists_v_typeof: \"\\<exists>v v. typeof v = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v va. typeof va = t", "proof (cases t)"], ["proof (state)\ngoal (4 subgoals):\n 1. t = T_i32 \\<Longrightarrow> \\<exists>v va. typeof va = t\n 2. t = T_i64 \\<Longrightarrow> \\<exists>v va. typeof va = t\n 3. t = T_f32 \\<Longrightarrow> \\<exists>v va. typeof va = t\n 4. t = T_f64 \\<Longrightarrow> \\<exists>v va. typeof va = t", "case T_i32"], ["proof (state)\nthis:\n  t = T_i32\n\ngoal (4 subgoals):\n 1. t = T_i32 \\<Longrightarrow> \\<exists>v va. typeof va = t\n 2. t = T_i64 \\<Longrightarrow> \\<exists>v va. typeof va = t\n 3. t = T_f32 \\<Longrightarrow> \\<exists>v va. typeof va = t\n 4. t = T_f64 \\<Longrightarrow> \\<exists>v va. typeof va = t", "fix v"], ["proof (state)\ngoal (4 subgoals):\n 1. t = T_i32 \\<Longrightarrow> \\<exists>v va. typeof va = t\n 2. t = T_i64 \\<Longrightarrow> \\<exists>v va. typeof va = t\n 3. t = T_f32 \\<Longrightarrow> \\<exists>v va. typeof va = t\n 4. t = T_f64 \\<Longrightarrow> \\<exists>v va. typeof va = t", "have \"typeof (ConstInt32 v) = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typeof (ConstInt32 v) = t", "using T_i32"], ["proof (prove)\nusing this:\n  t = T_i32\n\ngoal (1 subgoal):\n 1. typeof (ConstInt32 v) = t", "unfolding typeof_def"], ["proof (prove)\nusing this:\n  t = T_i32\n\ngoal (1 subgoal):\n 1. (case ConstInt32 v of ConstInt32 x \\<Rightarrow> T_i32\n     | ConstInt64 x \\<Rightarrow> T_i64 | ConstFloat32 x \\<Rightarrow> T_f32\n     | ConstFloat64 x \\<Rightarrow> T_f64) =\n    t", "by simp"], ["proof (state)\nthis:\n  typeof (ConstInt32 v) = t\n\ngoal (4 subgoals):\n 1. t = T_i32 \\<Longrightarrow> \\<exists>v va. typeof va = t\n 2. t = T_i64 \\<Longrightarrow> \\<exists>v va. typeof va = t\n 3. t = T_f32 \\<Longrightarrow> \\<exists>v va. typeof va = t\n 4. t = T_f64 \\<Longrightarrow> \\<exists>v va. typeof va = t", "thus ?thesis"], ["proof (prove)\nusing this:\n  typeof (ConstInt32 v) = t\n\ngoal (1 subgoal):\n 1. \\<exists>v va. typeof va = t", "using T_i32"], ["proof (prove)\nusing this:\n  typeof (ConstInt32 v) = t\n  t = T_i32\n\ngoal (1 subgoal):\n 1. \\<exists>v va. typeof va = t", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>v va. typeof va = t\n\ngoal (3 subgoals):\n 1. t = T_i64 \\<Longrightarrow> \\<exists>v va. typeof va = t\n 2. t = T_f32 \\<Longrightarrow> \\<exists>v va. typeof va = t\n 3. t = T_f64 \\<Longrightarrow> \\<exists>v va. typeof va = t", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. t = T_i64 \\<Longrightarrow> \\<exists>v va. typeof va = t\n 2. t = T_f32 \\<Longrightarrow> \\<exists>v va. typeof va = t\n 3. t = T_f64 \\<Longrightarrow> \\<exists>v va. typeof va = t", "case T_i64"], ["proof (state)\nthis:\n  t = T_i64\n\ngoal (3 subgoals):\n 1. t = T_i64 \\<Longrightarrow> \\<exists>v va. typeof va = t\n 2. t = T_f32 \\<Longrightarrow> \\<exists>v va. typeof va = t\n 3. t = T_f64 \\<Longrightarrow> \\<exists>v va. typeof va = t", "fix v"], ["proof (state)\ngoal (3 subgoals):\n 1. t = T_i64 \\<Longrightarrow> \\<exists>v va. typeof va = t\n 2. t = T_f32 \\<Longrightarrow> \\<exists>v va. typeof va = t\n 3. t = T_f64 \\<Longrightarrow> \\<exists>v va. typeof va = t", "have \"typeof (ConstInt64 v) = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typeof (ConstInt64 v) = t", "using T_i64"], ["proof (prove)\nusing this:\n  t = T_i64\n\ngoal (1 subgoal):\n 1. typeof (ConstInt64 v) = t", "unfolding typeof_def"], ["proof (prove)\nusing this:\n  t = T_i64\n\ngoal (1 subgoal):\n 1. (case ConstInt64 v of ConstInt32 x \\<Rightarrow> T_i32\n     | ConstInt64 x \\<Rightarrow> T_i64 | ConstFloat32 x \\<Rightarrow> T_f32\n     | ConstFloat64 x \\<Rightarrow> T_f64) =\n    t", "by simp"], ["proof (state)\nthis:\n  typeof (ConstInt64 v) = t\n\ngoal (3 subgoals):\n 1. t = T_i64 \\<Longrightarrow> \\<exists>v va. typeof va = t\n 2. t = T_f32 \\<Longrightarrow> \\<exists>v va. typeof va = t\n 3. t = T_f64 \\<Longrightarrow> \\<exists>v va. typeof va = t", "thus ?thesis"], ["proof (prove)\nusing this:\n  typeof (ConstInt64 v) = t\n\ngoal (1 subgoal):\n 1. \\<exists>v va. typeof va = t", "using T_i64"], ["proof (prove)\nusing this:\n  typeof (ConstInt64 v) = t\n  t = T_i64\n\ngoal (1 subgoal):\n 1. \\<exists>v va. typeof va = t", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>v va. typeof va = t\n\ngoal (2 subgoals):\n 1. t = T_f32 \\<Longrightarrow> \\<exists>v va. typeof va = t\n 2. t = T_f64 \\<Longrightarrow> \\<exists>v va. typeof va = t", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. t = T_f32 \\<Longrightarrow> \\<exists>v va. typeof va = t\n 2. t = T_f64 \\<Longrightarrow> \\<exists>v va. typeof va = t", "case T_f32"], ["proof (state)\nthis:\n  t = T_f32\n\ngoal (2 subgoals):\n 1. t = T_f32 \\<Longrightarrow> \\<exists>v va. typeof va = t\n 2. t = T_f64 \\<Longrightarrow> \\<exists>v va. typeof va = t", "fix v"], ["proof (state)\ngoal (2 subgoals):\n 1. t = T_f32 \\<Longrightarrow> \\<exists>v va. typeof va = t\n 2. t = T_f64 \\<Longrightarrow> \\<exists>v va. typeof va = t", "have \"typeof (ConstFloat32 v) = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typeof (ConstFloat32 v) = t", "using T_f32"], ["proof (prove)\nusing this:\n  t = T_f32\n\ngoal (1 subgoal):\n 1. typeof (ConstFloat32 v) = t", "unfolding typeof_def"], ["proof (prove)\nusing this:\n  t = T_f32\n\ngoal (1 subgoal):\n 1. (case ConstFloat32 v of ConstInt32 x \\<Rightarrow> T_i32\n     | ConstInt64 x \\<Rightarrow> T_i64 | ConstFloat32 x \\<Rightarrow> T_f32\n     | ConstFloat64 x \\<Rightarrow> T_f64) =\n    t", "by simp"], ["proof (state)\nthis:\n  typeof (ConstFloat32 v) = t\n\ngoal (2 subgoals):\n 1. t = T_f32 \\<Longrightarrow> \\<exists>v va. typeof va = t\n 2. t = T_f64 \\<Longrightarrow> \\<exists>v va. typeof va = t", "thus ?thesis"], ["proof (prove)\nusing this:\n  typeof (ConstFloat32 v) = t\n\ngoal (1 subgoal):\n 1. \\<exists>v va. typeof va = t", "using T_f32"], ["proof (prove)\nusing this:\n  typeof (ConstFloat32 v) = t\n  t = T_f32\n\ngoal (1 subgoal):\n 1. \\<exists>v va. typeof va = t", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>v va. typeof va = t\n\ngoal (1 subgoal):\n 1. t = T_f64 \\<Longrightarrow> \\<exists>v va. typeof va = t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t = T_f64 \\<Longrightarrow> \\<exists>v va. typeof va = t", "case T_f64"], ["proof (state)\nthis:\n  t = T_f64\n\ngoal (1 subgoal):\n 1. t = T_f64 \\<Longrightarrow> \\<exists>v va. typeof va = t", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. t = T_f64 \\<Longrightarrow> \\<exists>v va. typeof va = t", "have \"typeof (ConstFloat64 v) = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typeof (ConstFloat64 v) = t", "using T_f64"], ["proof (prove)\nusing this:\n  t = T_f64\n\ngoal (1 subgoal):\n 1. typeof (ConstFloat64 v) = t", "unfolding typeof_def"], ["proof (prove)\nusing this:\n  t = T_f64\n\ngoal (1 subgoal):\n 1. (case ConstFloat64 v of ConstInt32 x \\<Rightarrow> T_i32\n     | ConstInt64 x \\<Rightarrow> T_i64 | ConstFloat32 x \\<Rightarrow> T_f32\n     | ConstFloat64 x \\<Rightarrow> T_f64) =\n    t", "by simp"], ["proof (state)\nthis:\n  typeof (ConstFloat64 v) = t\n\ngoal (1 subgoal):\n 1. t = T_f64 \\<Longrightarrow> \\<exists>v va. typeof va = t", "thus ?thesis"], ["proof (prove)\nusing this:\n  typeof (ConstFloat64 v) = t\n\ngoal (1 subgoal):\n 1. \\<exists>v va. typeof va = t", "using T_f64"], ["proof (prove)\nusing this:\n  typeof (ConstFloat64 v) = t\n  t = T_f64\n\ngoal (1 subgoal):\n 1. \\<exists>v va. typeof va = t", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>v va. typeof va = t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lfilled_collapse1:\n  assumes \"Lfilled n lholed (vs@es) LI\"\n          \"const_list vs\"\n          \"length vs \\<ge> l\"\n  shows \"\\<exists>lholed'. Lfilled n lholed' ((drop (length vs - l) vs)@es) LI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>lholed'. Lfilled n lholed' (drop (length vs - l) vs @ es) LI", "using assms(1)"], ["proof (prove)\nusing this:\n  Lfilled n lholed (vs @ es) LI\n\ngoal (1 subgoal):\n 1. \\<exists>lholed'. Lfilled n lholed' (drop (length vs - l) vs @ es) LI", "proof (induction \"vs@es\" LI rule: Lfilled.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>vsa lholed es'.\n       \\<lbrakk>const_list vsa; lholed = LBase vsa es'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lholed'.\n                            Lfilled 0 lholed' (drop (length vs - l) vs @ es)\n                             (vsa @ (vs @ es) @ es')\n 2. \\<And>vsa lholed n es' la es'' k lfilledk.\n       \\<lbrakk>const_list vsa; lholed = LRec vsa n es' la es'';\n        Lfilled k la (vs @ es) lfilledk;\n        \\<exists>lholed'.\n           Lfilled k lholed' (drop (length vs - l) vs @ es)\n            lfilledk\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lholed'.\n                            Lfilled (k + 1) lholed'\n                             (drop (length vs - l) vs @ es)\n                             (vsa @ [Label n es' lfilledk] @ es'')", "case (L0 vs' lholed es')"], ["proof (state)\nthis:\n  const_list vs'\n  lholed = LBase vs' es'\n\ngoal (2 subgoals):\n 1. \\<And>vsa lholed es'.\n       \\<lbrakk>const_list vsa; lholed = LBase vsa es'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lholed'.\n                            Lfilled 0 lholed' (drop (length vs - l) vs @ es)\n                             (vsa @ (vs @ es) @ es')\n 2. \\<And>vsa lholed n es' la es'' k lfilledk.\n       \\<lbrakk>const_list vsa; lholed = LRec vsa n es' la es'';\n        Lfilled k la (vs @ es) lfilledk;\n        \\<exists>lholed'.\n           Lfilled k lholed' (drop (length vs - l) vs @ es)\n            lfilledk\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lholed'.\n                            Lfilled (k + 1) lholed'\n                             (drop (length vs - l) vs @ es)\n                             (vsa @ [Label n es' lfilledk] @ es'')", "obtain vs1 vs2 where \"vs = vs1@vs2\" \"length vs2 = l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>vs1 vs2.\n        \\<lbrakk>vs = vs1 @ vs2; length vs2 = l\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(3)"], ["proof (prove)\nusing this:\n  l \\<le> length vs\n\ngoal (1 subgoal):\n 1. (\\<And>vs1 vs2.\n        \\<lbrakk>vs = vs1 @ vs2; length vs2 = l\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis append_take_drop_id diff_diff_cancel length_drop)"], ["proof (state)\nthis:\n  vs = vs1 @ vs2\n  length vs2 = l\n\ngoal (2 subgoals):\n 1. \\<And>vsa lholed es'.\n       \\<lbrakk>const_list vsa; lholed = LBase vsa es'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lholed'.\n                            Lfilled 0 lholed' (drop (length vs - l) vs @ es)\n                             (vsa @ (vs @ es) @ es')\n 2. \\<And>vsa lholed n es' la es'' k lfilledk.\n       \\<lbrakk>const_list vsa; lholed = LRec vsa n es' la es'';\n        Lfilled k la (vs @ es) lfilledk;\n        \\<exists>lholed'.\n           Lfilled k lholed' (drop (length vs - l) vs @ es)\n            lfilledk\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lholed'.\n                            Lfilled (k + 1) lholed'\n                             (drop (length vs - l) vs @ es)\n                             (vsa @ [Label n es' lfilledk] @ es'')", "moreover"], ["proof (state)\nthis:\n  vs = vs1 @ vs2\n  length vs2 = l\n\ngoal (2 subgoals):\n 1. \\<And>vsa lholed es'.\n       \\<lbrakk>const_list vsa; lholed = LBase vsa es'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lholed'.\n                            Lfilled 0 lholed' (drop (length vs - l) vs @ es)\n                             (vsa @ (vs @ es) @ es')\n 2. \\<And>vsa lholed n es' la es'' k lfilledk.\n       \\<lbrakk>const_list vsa; lholed = LRec vsa n es' la es'';\n        Lfilled k la (vs @ es) lfilledk;\n        \\<exists>lholed'.\n           Lfilled k lholed' (drop (length vs - l) vs @ es)\n            lfilledk\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lholed'.\n                            Lfilled (k + 1) lholed'\n                             (drop (length vs - l) vs @ es)\n                             (vsa @ [Label n es' lfilledk] @ es'')", "hence \"const_list (vs'@vs1)\""], ["proof (prove)\nusing this:\n  vs = vs1 @ vs2\n  length vs2 = l\n\ngoal (1 subgoal):\n 1. const_list (vs' @ vs1)", "using L0(1) assms(2)"], ["proof (prove)\nusing this:\n  vs = vs1 @ vs2\n  length vs2 = l\n  const_list vs'\n  const_list vs\n\ngoal (1 subgoal):\n 1. const_list (vs' @ vs1)", "unfolding const_list_def"], ["proof (prove)\nusing this:\n  vs = vs1 @ vs2\n  length vs2 = l\n  list_all is_const vs'\n  list_all is_const vs\n\ngoal (1 subgoal):\n 1. list_all is_const (vs' @ vs1)", "by simp"], ["proof (state)\nthis:\n  const_list (vs' @ vs1)\n\ngoal (2 subgoals):\n 1. \\<And>vsa lholed es'.\n       \\<lbrakk>const_list vsa; lholed = LBase vsa es'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lholed'.\n                            Lfilled 0 lholed' (drop (length vs - l) vs @ es)\n                             (vsa @ (vs @ es) @ es')\n 2. \\<And>vsa lholed n es' la es'' k lfilledk.\n       \\<lbrakk>const_list vsa; lholed = LRec vsa n es' la es'';\n        Lfilled k la (vs @ es) lfilledk;\n        \\<exists>lholed'.\n           Lfilled k lholed' (drop (length vs - l) vs @ es)\n            lfilledk\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lholed'.\n                            Lfilled (k + 1) lholed'\n                             (drop (length vs - l) vs @ es)\n                             (vsa @ [Label n es' lfilledk] @ es'')", "ultimately"], ["proof (chain)\npicking this:\n  vs = vs1 @ vs2\n  length vs2 = l\n  const_list (vs' @ vs1)", "show ?case"], ["proof (prove)\nusing this:\n  vs = vs1 @ vs2\n  length vs2 = l\n  const_list (vs' @ vs1)\n\ngoal (1 subgoal):\n 1. \\<exists>lholed'.\n       Lfilled 0 lholed' (drop (length vs - l) vs @ es)\n        (vs' @ (vs @ es) @ es')", "using Lfilled.intros(1)[of \"vs'@vs1\" _ es' \"vs2@es\"]"], ["proof (prove)\nusing this:\n  vs = vs1 @ vs2\n  length vs2 = l\n  const_list (vs' @ vs1)\n  \\<lbrakk>const_list (vs' @ vs1); ?lholed = LBase (vs' @ vs1) es'\\<rbrakk>\n  \\<Longrightarrow> Lfilled 0 ?lholed (vs2 @ es)\n                     ((vs' @ vs1) @ (vs2 @ es) @ es')\n\ngoal (1 subgoal):\n 1. \\<exists>lholed'.\n       Lfilled 0 lholed' (drop (length vs - l) vs @ es)\n        (vs' @ (vs @ es) @ es')", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>lholed'.\n     Lfilled 0 lholed' (drop (length vs - l) vs @ es)\n      (vs' @ (vs @ es) @ es')\n\ngoal (1 subgoal):\n 1. \\<And>vsa lholed n es' la es'' k lfilledk.\n       \\<lbrakk>const_list vsa; lholed = LRec vsa n es' la es'';\n        Lfilled k la (vs @ es) lfilledk;\n        \\<exists>lholed'.\n           Lfilled k lholed' (drop (length vs - l) vs @ es)\n            lfilledk\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lholed'.\n                            Lfilled (k + 1) lholed'\n                             (drop (length vs - l) vs @ es)\n                             (vsa @ [Label n es' lfilledk] @ es'')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>vsa lholed n es' la es'' k lfilledk.\n       \\<lbrakk>const_list vsa; lholed = LRec vsa n es' la es'';\n        Lfilled k la (vs @ es) lfilledk;\n        \\<exists>lholed'.\n           Lfilled k lholed' (drop (length vs - l) vs @ es)\n            lfilledk\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lholed'.\n                            Lfilled (k + 1) lholed'\n                             (drop (length vs - l) vs @ es)\n                             (vsa @ [Label n es' lfilledk] @ es'')", "case (LN vs lholed n es' l es'' k lfilledk)"], ["proof (state)\nthis:\n  const_list vs\n  lholed = LRec vs n es' l es''\n  Lfilled k l (vs @ es) lfilledk\n  \\<exists>lholed'.\n     Lfilled k lholed' (drop (length vs - l) vs @ es) lfilledk\n\ngoal (1 subgoal):\n 1. \\<And>vsa lholed n es' la es'' k lfilledk.\n       \\<lbrakk>const_list vsa; lholed = LRec vsa n es' la es'';\n        Lfilled k la (vs @ es) lfilledk;\n        \\<exists>lholed'.\n           Lfilled k lholed' (drop (length vs - l) vs @ es)\n            lfilledk\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lholed'.\n                            Lfilled (k + 1) lholed'\n                             (drop (length vs - l) vs @ es)\n                             (vsa @ [Label n es' lfilledk] @ es'')", "thus ?case"], ["proof (prove)\nusing this:\n  const_list vs\n  lholed = LRec vs n es' l es''\n  Lfilled k l (vs @ es) lfilledk\n  \\<exists>lholed'.\n     Lfilled k lholed' (drop (length vs - l) vs @ es) lfilledk\n\ngoal (1 subgoal):\n 1. \\<exists>lholed'.\n       Lfilled (k + 1) lholed' (drop (length vs - l) vs @ es)\n        (vs @ [Label n es' lfilledk] @ es'')", "using Lfilled.intros(2)"], ["proof (prove)\nusing this:\n  const_list vs\n  lholed = LRec vs n es' l es''\n  Lfilled k l (vs @ es) lfilledk\n  \\<exists>lholed'.\n     Lfilled k lholed' (drop (length vs - l) vs @ es) lfilledk\n  \\<lbrakk>const_list ?vs; ?lholed = LRec ?vs ?n ?es' ?l ?es'';\n   Lfilled ?k ?l ?es ?lfilledk\\<rbrakk>\n  \\<Longrightarrow> Lfilled (?k + 1) ?lholed ?es\n                     (?vs @ [Label ?n ?es' ?lfilledk] @ ?es'')\n\ngoal (1 subgoal):\n 1. \\<exists>lholed'.\n       Lfilled (k + 1) lholed' (drop (length vs - l) vs @ es)\n        (vs @ [Label n es' lfilledk] @ es'')", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>lholed'.\n     Lfilled (k + 1) lholed' (drop (length vs - l) vs @ es)\n      (vs @ [Label n es' lfilledk] @ es'')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lfilled_collapse2:\n  assumes \"Lfilled n lholed (es@es') LI\"\n  shows \"\\<exists>lholed' vs'. Lfilled n lholed' es LI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>lholed' vs'. Lfilled n lholed' es LI", "using assms"], ["proof (prove)\nusing this:\n  Lfilled n lholed (es @ es') LI\n\ngoal (1 subgoal):\n 1. \\<exists>lholed' vs'. Lfilled n lholed' es LI", "proof (induction \"es@es'\" LI rule: Lfilled.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>vs lholed es'a.\n       \\<lbrakk>const_list vs; lholed = LBase vs es'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lholed' vs'.\n                            Lfilled 0 lholed' es (vs @ (es @ es') @ es'a)\n 2. \\<And>vs lholed n es'a l es'' k lfilledk.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es'a l es'';\n        Lfilled k l (es @ es') lfilledk;\n        \\<exists>lholed' vs'. Lfilled k lholed' es lfilledk\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lholed' vs'.\n                            Lfilled (k + 1) lholed' es\n                             (vs @ [Label n es'a lfilledk] @ es'')", "case (L0 vs lholed es')"], ["proof (state)\nthis:\n  const_list vs\n  lholed = LBase vs es'\n\ngoal (2 subgoals):\n 1. \\<And>vs lholed es'a.\n       \\<lbrakk>const_list vs; lholed = LBase vs es'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lholed' vs'.\n                            Lfilled 0 lholed' es (vs @ (es @ es') @ es'a)\n 2. \\<And>vs lholed n es'a l es'' k lfilledk.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es'a l es'';\n        Lfilled k l (es @ es') lfilledk;\n        \\<exists>lholed' vs'. Lfilled k lholed' es lfilledk\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lholed' vs'.\n                            Lfilled (k + 1) lholed' es\n                             (vs @ [Label n es'a lfilledk] @ es'')", "thus ?case"], ["proof (prove)\nusing this:\n  const_list vs\n  lholed = LBase vs es'\n\ngoal (1 subgoal):\n 1. \\<exists>lholed' vs'. Lfilled 0 lholed' es (vs @ (es @ es') @ es')", "using Lfilled.intros(1)"], ["proof (prove)\nusing this:\n  const_list vs\n  lholed = LBase vs es'\n  \\<lbrakk>const_list ?vs; ?lholed = LBase ?vs ?es'\\<rbrakk>\n  \\<Longrightarrow> Lfilled 0 ?lholed ?es (?vs @ ?es @ ?es')\n\ngoal (1 subgoal):\n 1. \\<exists>lholed' vs'. Lfilled 0 lholed' es (vs @ (es @ es') @ es')", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>lholed' vs'. Lfilled 0 lholed' es (vs @ (es @ es') @ es')\n\ngoal (1 subgoal):\n 1. \\<And>vs lholed n es'a l es'' k lfilledk.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es'a l es'';\n        Lfilled k l (es @ es') lfilledk;\n        \\<exists>lholed' vs'. Lfilled k lholed' es lfilledk\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lholed' vs'.\n                            Lfilled (k + 1) lholed' es\n                             (vs @ [Label n es'a lfilledk] @ es'')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>vs lholed n es'a l es'' k lfilledk.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es'a l es'';\n        Lfilled k l (es @ es') lfilledk;\n        \\<exists>lholed' vs'. Lfilled k lholed' es lfilledk\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lholed' vs'.\n                            Lfilled (k + 1) lholed' es\n                             (vs @ [Label n es'a lfilledk] @ es'')", "case (LN vs lholed n es' l es'' k lfilledk)"], ["proof (state)\nthis:\n  const_list vs\n  lholed = LRec vs n es' l es''\n  Lfilled k l (es @ es') lfilledk\n  \\<exists>lholed' vs'. Lfilled k lholed' es lfilledk\n\ngoal (1 subgoal):\n 1. \\<And>vs lholed n es'a l es'' k lfilledk.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es'a l es'';\n        Lfilled k l (es @ es') lfilledk;\n        \\<exists>lholed' vs'. Lfilled k lholed' es lfilledk\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lholed' vs'.\n                            Lfilled (k + 1) lholed' es\n                             (vs @ [Label n es'a lfilledk] @ es'')", "thus ?case"], ["proof (prove)\nusing this:\n  const_list vs\n  lholed = LRec vs n es' l es''\n  Lfilled k l (es @ es') lfilledk\n  \\<exists>lholed' vs'. Lfilled k lholed' es lfilledk\n\ngoal (1 subgoal):\n 1. \\<exists>lholed' vs'.\n       Lfilled (k + 1) lholed' es (vs @ [Label n es' lfilledk] @ es'')", "using Lfilled.intros(2)"], ["proof (prove)\nusing this:\n  const_list vs\n  lholed = LRec vs n es' l es''\n  Lfilled k l (es @ es') lfilledk\n  \\<exists>lholed' vs'. Lfilled k lholed' es lfilledk\n  \\<lbrakk>const_list ?vs; ?lholed = LRec ?vs ?n ?es' ?l ?es'';\n   Lfilled ?k ?l ?es ?lfilledk\\<rbrakk>\n  \\<Longrightarrow> Lfilled (?k + 1) ?lholed ?es\n                     (?vs @ [Label ?n ?es' ?lfilledk] @ ?es'')\n\ngoal (1 subgoal):\n 1. \\<exists>lholed' vs'.\n       Lfilled (k + 1) lholed' es (vs @ [Label n es' lfilledk] @ es'')", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>lholed' vs'.\n     Lfilled (k + 1) lholed' es (vs @ [Label n es' lfilledk] @ es'')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lfilled_collapse3:\n  assumes \"Lfilled k lholed [Label n les es] LI\"\n  shows \"\\<exists>lholed'. Lfilled (Suc k) lholed' es LI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>lholed'. Lfilled (Suc k) lholed' es LI", "using assms"], ["proof (prove)\nusing this:\n  Lfilled k lholed [Label n les es] LI\n\ngoal (1 subgoal):\n 1. \\<exists>lholed'. Lfilled (Suc k) lholed' es LI", "proof (induction \"[Label n les es]\" LI rule: Lfilled.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>vs lholed es'.\n       \\<lbrakk>const_list vs; lholed = LBase vs es'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lholed'.\n                            Lfilled (Suc 0) lholed' es\n                             (vs @ [Label n les es] @ es')\n 2. \\<And>vs lholed na es' l es'' k lfilledk.\n       \\<lbrakk>const_list vs; lholed = LRec vs na es' l es'';\n        Lfilled k l [Label n les es] lfilledk;\n        \\<exists>lholed'. Lfilled (Suc k) lholed' es lfilledk\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lholed'.\n                            Lfilled (Suc (k + 1)) lholed' es\n                             (vs @ [Label na es' lfilledk] @ es'')", "case (L0 vs lholed es')"], ["proof (state)\nthis:\n  const_list vs\n  lholed = LBase vs es'\n\ngoal (2 subgoals):\n 1. \\<And>vs lholed es'.\n       \\<lbrakk>const_list vs; lholed = LBase vs es'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lholed'.\n                            Lfilled (Suc 0) lholed' es\n                             (vs @ [Label n les es] @ es')\n 2. \\<And>vs lholed na es' l es'' k lfilledk.\n       \\<lbrakk>const_list vs; lholed = LRec vs na es' l es'';\n        Lfilled k l [Label n les es] lfilledk;\n        \\<exists>lholed'. Lfilled (Suc k) lholed' es lfilledk\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lholed'.\n                            Lfilled (Suc (k + 1)) lholed' es\n                             (vs @ [Label na es' lfilledk] @ es'')", "have \"Lfilled 0 (LBase [] []) es es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lfilled 0 (LBase [] []) es es", "using Lfilled.intros(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>const_list ?vs; ?lholed = LBase ?vs ?es'\\<rbrakk>\n  \\<Longrightarrow> Lfilled 0 ?lholed ?es (?vs @ ?es @ ?es')\n\ngoal (1 subgoal):\n 1. Lfilled 0 (LBase [] []) es es", "unfolding const_list_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>list_all is_const ?vs; ?lholed = LBase ?vs ?es'\\<rbrakk>\n  \\<Longrightarrow> Lfilled 0 ?lholed ?es (?vs @ ?es @ ?es')\n\ngoal (1 subgoal):\n 1. Lfilled 0 (LBase [] []) es es", "by (metis append.left_neutral append_Nil2 list_all_simps(2))"], ["proof (state)\nthis:\n  Lfilled 0 (LBase [] []) es es\n\ngoal (2 subgoals):\n 1. \\<And>vs lholed es'.\n       \\<lbrakk>const_list vs; lholed = LBase vs es'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lholed'.\n                            Lfilled (Suc 0) lholed' es\n                             (vs @ [Label n les es] @ es')\n 2. \\<And>vs lholed na es' l es'' k lfilledk.\n       \\<lbrakk>const_list vs; lholed = LRec vs na es' l es'';\n        Lfilled k l [Label n les es] lfilledk;\n        \\<exists>lholed'. Lfilled (Suc k) lholed' es lfilledk\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lholed'.\n                            Lfilled (Suc (k + 1)) lholed' es\n                             (vs @ [Label na es' lfilledk] @ es'')", "thus ?case"], ["proof (prove)\nusing this:\n  Lfilled 0 (LBase [] []) es es\n\ngoal (1 subgoal):\n 1. \\<exists>lholed'.\n       Lfilled (Suc 0) lholed' es (vs @ [Label n les es] @ es')", "using Lfilled.intros(2) L0"], ["proof (prove)\nusing this:\n  Lfilled 0 (LBase [] []) es es\n  \\<lbrakk>const_list ?vs; ?lholed = LRec ?vs ?n ?es' ?l ?es'';\n   Lfilled ?k ?l ?es ?lfilledk\\<rbrakk>\n  \\<Longrightarrow> Lfilled (?k + 1) ?lholed ?es\n                     (?vs @ [Label ?n ?es' ?lfilledk] @ ?es'')\n  const_list vs\n  lholed = LBase vs es'\n\ngoal (1 subgoal):\n 1. \\<exists>lholed'.\n       Lfilled (Suc 0) lholed' es (vs @ [Label n les es] @ es')", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>lholed'. Lfilled (Suc 0) lholed' es (vs @ [Label n les es] @ es')\n\ngoal (1 subgoal):\n 1. \\<And>vs lholed na es' l es'' k lfilledk.\n       \\<lbrakk>const_list vs; lholed = LRec vs na es' l es'';\n        Lfilled k l [Label n les es] lfilledk;\n        \\<exists>lholed'. Lfilled (Suc k) lholed' es lfilledk\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lholed'.\n                            Lfilled (Suc (k + 1)) lholed' es\n                             (vs @ [Label na es' lfilledk] @ es'')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>vs lholed na es' l es'' k lfilledk.\n       \\<lbrakk>const_list vs; lholed = LRec vs na es' l es'';\n        Lfilled k l [Label n les es] lfilledk;\n        \\<exists>lholed'. Lfilled (Suc k) lholed' es lfilledk\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lholed'.\n                            Lfilled (Suc (k + 1)) lholed' es\n                             (vs @ [Label na es' lfilledk] @ es'')", "case (LN vs lholed n es' l es'' k lfilledk)"], ["proof (state)\nthis:\n  const_list vs\n  lholed = LRec vs n es' l es''\n  Lfilled k l [Label n les es] lfilledk\n  \\<exists>lholed'. Lfilled (Suc k) lholed' es lfilledk\n\ngoal (1 subgoal):\n 1. \\<And>vs lholed na es' l es'' k lfilledk.\n       \\<lbrakk>const_list vs; lholed = LRec vs na es' l es'';\n        Lfilled k l [Label n les es] lfilledk;\n        \\<exists>lholed'. Lfilled (Suc k) lholed' es lfilledk\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lholed'.\n                            Lfilled (Suc (k + 1)) lholed' es\n                             (vs @ [Label na es' lfilledk] @ es'')", "thus ?case"], ["proof (prove)\nusing this:\n  const_list vs\n  lholed = LRec vs n es' l es''\n  Lfilled k l [Label n les es] lfilledk\n  \\<exists>lholed'. Lfilled (Suc k) lholed' es lfilledk\n\ngoal (1 subgoal):\n 1. \\<exists>lholed'.\n       Lfilled (Suc (k + 1)) lholed' es (vs @ [Label n es' lfilledk] @ es'')", "using Lfilled.intros(2)"], ["proof (prove)\nusing this:\n  const_list vs\n  lholed = LRec vs n es' l es''\n  Lfilled k l [Label n les es] lfilledk\n  \\<exists>lholed'. Lfilled (Suc k) lholed' es lfilledk\n  \\<lbrakk>const_list ?vs; ?lholed = LRec ?vs ?n ?es' ?l ?es'';\n   Lfilled ?k ?l ?es ?lfilledk\\<rbrakk>\n  \\<Longrightarrow> Lfilled (?k + 1) ?lholed ?es\n                     (?vs @ [Label ?n ?es' ?lfilledk] @ ?es'')\n\ngoal (1 subgoal):\n 1. \\<exists>lholed'.\n       Lfilled (Suc (k + 1)) lholed' es (vs @ [Label n es' lfilledk] @ es'')", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>lholed'.\n     Lfilled (Suc (k + 1)) lholed' es (vs @ [Label n es' lfilledk] @ es'')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unlift_b_e: assumes \"\\<S>\\<bullet>\\<C> \\<turnstile> $*b_es : tf\" shows \"\\<C> \\<turnstile> b_es : tf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> b_es : tf", "using assms"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> $* b_es : tf\n\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> b_es : tf", "proof (induction \"\\<S>\" \"\\<C>\" \"($*b_es)\" \"tf\" arbitrary: b_es)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<C> b_es tf \\<S> b_esa.\n       \\<lbrakk>\\<C> \\<turnstile> b_es : tf; $* b_es = $* b_esa\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_esa : tf\n 2. \\<And>\\<S> \\<C> es t1s t2s e t3s b_es.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> t2s;\n        \\<And>b_es.\n           es = $* b_es \\<Longrightarrow>\n           \\<C> \\<turnstile> b_es : t1s _> t2s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        \\<And>b_es.\n           [e] = $* b_es \\<Longrightarrow>\n           \\<C> \\<turnstile> b_es : t2s _> t3s;\n        es @ [e] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : t1s _> t3s\n 3. \\<And>\\<S> \\<C> t1s t2s ts b_es.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> $* b_es : t1s _> t2s;\n        \\<And>b_esa.\n           $* b_es = $* b_esa \\<Longrightarrow>\n           \\<C> \\<turnstile> b_esa : t1s _> t2s\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : ts @ t1s _> ts @ t2s\n 4. \\<And>\\<S> \\<C> tf b_es.\n       [Trap] = $* b_es \\<Longrightarrow> \\<C> \\<turnstile> b_es : tf\n 5. \\<And>\\<S> ts i vs es n \\<C> b_es.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;es : ts;\n        ?P2.4 \\<S> (Some ts) i vs es ts; length ts = n;\n        [Local n i vs es] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> ts\n 6. \\<And>\\<S> cl tf \\<C> b_es.\n       \\<lbrakk>cl_typing \\<S> cl tf; [Callcl cl] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : tf\n 7. \\<And>\\<S> \\<C> e0s ts t2s es n b_es.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> e0s : ts _> t2s;\n        \\<And>b_es.\n           e0s = $* b_es \\<Longrightarrow>\n           \\<C> \\<turnstile> b_es : ts _> t2s;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        \\<And>b_es.\n           es = $* b_es \\<Longrightarrow>\n           \\<C>\n           \\<lparr>label :=\n                     [ts] @\n                     label \\<C>\\<rparr> \\<turnstile> b_es : [] _> t2s;\n        length ts = n; [Label n e0s es] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> t2s\n 8. \\<And>i \\<S> tvs vs \\<C> rs es ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts;\n        \\<And>b_es.\n           es = $* b_es \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> ts;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.4 \\<S> rs i vs es ts", "case (1 \\<C> b_es tf \\<S>)"], ["proof (state)\nthis:\n  \\<C> \\<turnstile> b_esa__ : tf\n  $* b_esa__ = $* b_es\n\ngoal (8 subgoals):\n 1. \\<And>\\<C> b_es tf \\<S> b_esa.\n       \\<lbrakk>\\<C> \\<turnstile> b_es : tf; $* b_es = $* b_esa\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_esa : tf\n 2. \\<And>\\<S> \\<C> es t1s t2s e t3s b_es.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> t2s;\n        \\<And>b_es.\n           es = $* b_es \\<Longrightarrow>\n           \\<C> \\<turnstile> b_es : t1s _> t2s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        \\<And>b_es.\n           [e] = $* b_es \\<Longrightarrow>\n           \\<C> \\<turnstile> b_es : t2s _> t3s;\n        es @ [e] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : t1s _> t3s\n 3. \\<And>\\<S> \\<C> t1s t2s ts b_es.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> $* b_es : t1s _> t2s;\n        \\<And>b_esa.\n           $* b_es = $* b_esa \\<Longrightarrow>\n           \\<C> \\<turnstile> b_esa : t1s _> t2s\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : ts @ t1s _> ts @ t2s\n 4. \\<And>\\<S> \\<C> tf b_es.\n       [Trap] = $* b_es \\<Longrightarrow> \\<C> \\<turnstile> b_es : tf\n 5. \\<And>\\<S> ts i vs es n \\<C> b_es.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;es : ts;\n        ?P2.4 \\<S> (Some ts) i vs es ts; length ts = n;\n        [Local n i vs es] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> ts\n 6. \\<And>\\<S> cl tf \\<C> b_es.\n       \\<lbrakk>cl_typing \\<S> cl tf; [Callcl cl] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : tf\n 7. \\<And>\\<S> \\<C> e0s ts t2s es n b_es.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> e0s : ts _> t2s;\n        \\<And>b_es.\n           e0s = $* b_es \\<Longrightarrow>\n           \\<C> \\<turnstile> b_es : ts _> t2s;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        \\<And>b_es.\n           es = $* b_es \\<Longrightarrow>\n           \\<C>\n           \\<lparr>label :=\n                     [ts] @\n                     label \\<C>\\<rparr> \\<turnstile> b_es : [] _> t2s;\n        length ts = n; [Label n e0s es] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> t2s\n 8. \\<And>i \\<S> tvs vs \\<C> rs es ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts;\n        \\<And>b_es.\n           es = $* b_es \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> ts;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.4 \\<S> rs i vs es ts", "then"], ["proof (chain)\npicking this:\n  \\<C> \\<turnstile> b_esa__ : tf\n  $* b_esa__ = $* b_es", "show ?case"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> b_esa__ : tf\n  $* b_esa__ = $* b_es\n\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> b_es : tf", "using inj_basic map_injective"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> b_esa__ : tf\n  $* b_esa__ = $* b_es\n  inj Basic\n  \\<lbrakk>map ?f ?xs = map ?f ?ys; inj ?f\\<rbrakk>\n  \\<Longrightarrow> ?xs = ?ys\n\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> b_es : tf", "by auto"], ["proof (state)\nthis:\n  \\<C> \\<turnstile> b_es : tf\n\ngoal (7 subgoals):\n 1. \\<And>\\<S> \\<C> es t1s t2s e t3s b_es.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> t2s;\n        \\<And>b_es.\n           es = $* b_es \\<Longrightarrow>\n           \\<C> \\<turnstile> b_es : t1s _> t2s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        \\<And>b_es.\n           [e] = $* b_es \\<Longrightarrow>\n           \\<C> \\<turnstile> b_es : t2s _> t3s;\n        es @ [e] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : t1s _> t3s\n 2. \\<And>\\<S> \\<C> t1s t2s ts b_es.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> $* b_es : t1s _> t2s;\n        \\<And>b_esa.\n           $* b_es = $* b_esa \\<Longrightarrow>\n           \\<C> \\<turnstile> b_esa : t1s _> t2s\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : ts @ t1s _> ts @ t2s\n 3. \\<And>\\<S> \\<C> tf b_es.\n       [Trap] = $* b_es \\<Longrightarrow> \\<C> \\<turnstile> b_es : tf\n 4. \\<And>\\<S> ts i vs es n \\<C> b_es.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;es : ts;\n        ?P2.4 \\<S> (Some ts) i vs es ts; length ts = n;\n        [Local n i vs es] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> ts\n 5. \\<And>\\<S> cl tf \\<C> b_es.\n       \\<lbrakk>cl_typing \\<S> cl tf; [Callcl cl] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : tf\n 6. \\<And>\\<S> \\<C> e0s ts t2s es n b_es.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> e0s : ts _> t2s;\n        \\<And>b_es.\n           e0s = $* b_es \\<Longrightarrow>\n           \\<C> \\<turnstile> b_es : ts _> t2s;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        \\<And>b_es.\n           es = $* b_es \\<Longrightarrow>\n           \\<C>\n           \\<lparr>label :=\n                     [ts] @\n                     label \\<C>\\<rparr> \\<turnstile> b_es : [] _> t2s;\n        length ts = n; [Label n e0s es] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> t2s\n 7. \\<And>i \\<S> tvs vs \\<C> rs es ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts;\n        \\<And>b_es.\n           es = $* b_es \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> ts;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.4 \\<S> rs i vs es ts", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<S> \\<C> es t1s t2s e t3s b_es.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> t2s;\n        \\<And>b_es.\n           es = $* b_es \\<Longrightarrow>\n           \\<C> \\<turnstile> b_es : t1s _> t2s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        \\<And>b_es.\n           [e] = $* b_es \\<Longrightarrow>\n           \\<C> \\<turnstile> b_es : t2s _> t3s;\n        es @ [e] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : t1s _> t3s\n 2. \\<And>\\<S> \\<C> t1s t2s ts b_es.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> $* b_es : t1s _> t2s;\n        \\<And>b_esa.\n           $* b_es = $* b_esa \\<Longrightarrow>\n           \\<C> \\<turnstile> b_esa : t1s _> t2s\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : ts @ t1s _> ts @ t2s\n 3. \\<And>\\<S> \\<C> tf b_es.\n       [Trap] = $* b_es \\<Longrightarrow> \\<C> \\<turnstile> b_es : tf\n 4. \\<And>\\<S> ts i vs es n \\<C> b_es.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;es : ts;\n        ?P2.4 \\<S> (Some ts) i vs es ts; length ts = n;\n        [Local n i vs es] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> ts\n 5. \\<And>\\<S> cl tf \\<C> b_es.\n       \\<lbrakk>cl_typing \\<S> cl tf; [Callcl cl] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : tf\n 6. \\<And>\\<S> \\<C> e0s ts t2s es n b_es.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> e0s : ts _> t2s;\n        \\<And>b_es.\n           e0s = $* b_es \\<Longrightarrow>\n           \\<C> \\<turnstile> b_es : ts _> t2s;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        \\<And>b_es.\n           es = $* b_es \\<Longrightarrow>\n           \\<C>\n           \\<lparr>label :=\n                     [ts] @\n                     label \\<C>\\<rparr> \\<turnstile> b_es : [] _> t2s;\n        length ts = n; [Label n e0s es] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> t2s\n 7. \\<And>i \\<S> tvs vs \\<C> rs es ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts;\n        \\<And>b_es.\n           es = $* b_es \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> ts;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.4 \\<S> rs i vs es ts", "case (2 \\<S> \\<C> es t1s t2s e t3s)"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> t2s\n  es = $* ?b_es \\<Longrightarrow> \\<C> \\<turnstile> ?b_es : t1s _> t2s\n  \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s\n  [e] = $* ?b_es \\<Longrightarrow> \\<C> \\<turnstile> ?b_es : t2s _> t3s\n  es @ [e] = $* b_es\n\ngoal (7 subgoals):\n 1. \\<And>\\<S> \\<C> es t1s t2s e t3s b_es.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> t2s;\n        \\<And>b_es.\n           es = $* b_es \\<Longrightarrow>\n           \\<C> \\<turnstile> b_es : t1s _> t2s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        \\<And>b_es.\n           [e] = $* b_es \\<Longrightarrow>\n           \\<C> \\<turnstile> b_es : t2s _> t3s;\n        es @ [e] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : t1s _> t3s\n 2. \\<And>\\<S> \\<C> t1s t2s ts b_es.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> $* b_es : t1s _> t2s;\n        \\<And>b_esa.\n           $* b_es = $* b_esa \\<Longrightarrow>\n           \\<C> \\<turnstile> b_esa : t1s _> t2s\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : ts @ t1s _> ts @ t2s\n 3. \\<And>\\<S> \\<C> tf b_es.\n       [Trap] = $* b_es \\<Longrightarrow> \\<C> \\<turnstile> b_es : tf\n 4. \\<And>\\<S> ts i vs es n \\<C> b_es.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;es : ts;\n        ?P2.4 \\<S> (Some ts) i vs es ts; length ts = n;\n        [Local n i vs es] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> ts\n 5. \\<And>\\<S> cl tf \\<C> b_es.\n       \\<lbrakk>cl_typing \\<S> cl tf; [Callcl cl] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : tf\n 6. \\<And>\\<S> \\<C> e0s ts t2s es n b_es.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> e0s : ts _> t2s;\n        \\<And>b_es.\n           e0s = $* b_es \\<Longrightarrow>\n           \\<C> \\<turnstile> b_es : ts _> t2s;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        \\<And>b_es.\n           es = $* b_es \\<Longrightarrow>\n           \\<C>\n           \\<lparr>label :=\n                     [ts] @\n                     label \\<C>\\<rparr> \\<turnstile> b_es : [] _> t2s;\n        length ts = n; [Label n e0s es] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> t2s\n 7. \\<And>i \\<S> tvs vs \\<C> rs es ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts;\n        \\<And>b_es.\n           es = $* b_es \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> ts;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.4 \\<S> rs i vs es ts", "obtain es' e' where \"es' @ [e'] = b_es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>es' e'.\n        es' @ [e'] = b_es \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 2(5)"], ["proof (prove)\nusing this:\n  es @ [e] = $* b_es\n\ngoal (1 subgoal):\n 1. (\\<And>es' e'.\n        es' @ [e'] = b_es \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp add: snoc_eq_iff_butlast)"], ["proof (state)\nthis:\n  es' @ [e'] = b_es\n\ngoal (7 subgoals):\n 1. \\<And>\\<S> \\<C> es t1s t2s e t3s b_es.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> t2s;\n        \\<And>b_es.\n           es = $* b_es \\<Longrightarrow>\n           \\<C> \\<turnstile> b_es : t1s _> t2s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        \\<And>b_es.\n           [e] = $* b_es \\<Longrightarrow>\n           \\<C> \\<turnstile> b_es : t2s _> t3s;\n        es @ [e] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : t1s _> t3s\n 2. \\<And>\\<S> \\<C> t1s t2s ts b_es.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> $* b_es : t1s _> t2s;\n        \\<And>b_esa.\n           $* b_es = $* b_esa \\<Longrightarrow>\n           \\<C> \\<turnstile> b_esa : t1s _> t2s\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : ts @ t1s _> ts @ t2s\n 3. \\<And>\\<S> \\<C> tf b_es.\n       [Trap] = $* b_es \\<Longrightarrow> \\<C> \\<turnstile> b_es : tf\n 4. \\<And>\\<S> ts i vs es n \\<C> b_es.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;es : ts;\n        ?P2.4 \\<S> (Some ts) i vs es ts; length ts = n;\n        [Local n i vs es] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> ts\n 5. \\<And>\\<S> cl tf \\<C> b_es.\n       \\<lbrakk>cl_typing \\<S> cl tf; [Callcl cl] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : tf\n 6. \\<And>\\<S> \\<C> e0s ts t2s es n b_es.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> e0s : ts _> t2s;\n        \\<And>b_es.\n           e0s = $* b_es \\<Longrightarrow>\n           \\<C> \\<turnstile> b_es : ts _> t2s;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        \\<And>b_es.\n           es = $* b_es \\<Longrightarrow>\n           \\<C>\n           \\<lparr>label :=\n                     [ts] @\n                     label \\<C>\\<rparr> \\<turnstile> b_es : [] _> t2s;\n        length ts = n; [Label n e0s es] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> t2s\n 7. \\<And>i \\<S> tvs vs \\<C> rs es ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts;\n        \\<And>b_es.\n           es = $* b_es \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> ts;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.4 \\<S> rs i vs es ts", "then"], ["proof (chain)\npicking this:\n  es' @ [e'] = b_es", "show ?case"], ["proof (prove)\nusing this:\n  es' @ [e'] = b_es\n\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> b_es : t1s _> t3s", "using 2"], ["proof (prove)\nusing this:\n  es' @ [e'] = b_es\n  \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> t2s\n  es = $* ?b_es \\<Longrightarrow> \\<C> \\<turnstile> ?b_es : t1s _> t2s\n  \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s\n  [e] = $* ?b_es \\<Longrightarrow> \\<C> \\<turnstile> ?b_es : t2s _> t3s\n  es @ [e] = $* b_es\n\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> b_es : t1s _> t3s", "using b_e_typing.composition"], ["proof (prove)\nusing this:\n  es' @ [e'] = b_es\n  \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> t2s\n  es = $* ?b_es \\<Longrightarrow> \\<C> \\<turnstile> ?b_es : t1s _> t2s\n  \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s\n  [e] = $* ?b_es \\<Longrightarrow> \\<C> \\<turnstile> ?b_es : t2s _> t3s\n  es @ [e] = $* b_es\n  \\<lbrakk>?\\<C> \\<turnstile> ?es : ?t1s _> ?t2s;\n   ?\\<C> \\<turnstile> [?e] : ?t2s _> ?t3s\\<rbrakk>\n  \\<Longrightarrow> ?\\<C> \\<turnstile> ?es @ [?e] : ?t1s _> ?t3s\n\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> b_es : t1s _> t3s", "by fastforce"], ["proof (state)\nthis:\n  \\<C> \\<turnstile> b_es : t1s _> t3s\n\ngoal (6 subgoals):\n 1. \\<And>\\<S> \\<C> t1s t2s ts b_es.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> $* b_es : t1s _> t2s;\n        \\<And>b_esa.\n           $* b_es = $* b_esa \\<Longrightarrow>\n           \\<C> \\<turnstile> b_esa : t1s _> t2s\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : ts @ t1s _> ts @ t2s\n 2. \\<And>\\<S> \\<C> tf b_es.\n       [Trap] = $* b_es \\<Longrightarrow> \\<C> \\<turnstile> b_es : tf\n 3. \\<And>\\<S> ts i vs es n \\<C> b_es.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;es : ts;\n        ?P2.4 \\<S> (Some ts) i vs es ts; length ts = n;\n        [Local n i vs es] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> ts\n 4. \\<And>\\<S> cl tf \\<C> b_es.\n       \\<lbrakk>cl_typing \\<S> cl tf; [Callcl cl] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : tf\n 5. \\<And>\\<S> \\<C> e0s ts t2s es n b_es.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> e0s : ts _> t2s;\n        \\<And>b_es.\n           e0s = $* b_es \\<Longrightarrow>\n           \\<C> \\<turnstile> b_es : ts _> t2s;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        \\<And>b_es.\n           es = $* b_es \\<Longrightarrow>\n           \\<C>\n           \\<lparr>label :=\n                     [ts] @\n                     label \\<C>\\<rparr> \\<turnstile> b_es : [] _> t2s;\n        length ts = n; [Label n e0s es] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> t2s\n 6. \\<And>i \\<S> tvs vs \\<C> rs es ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts;\n        \\<And>b_es.\n           es = $* b_es \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> ts;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.4 \\<S> rs i vs es ts", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<S> \\<C> t1s t2s ts b_es.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> $* b_es : t1s _> t2s;\n        \\<And>b_esa.\n           $* b_es = $* b_esa \\<Longrightarrow>\n           \\<C> \\<turnstile> b_esa : t1s _> t2s\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : ts @ t1s _> ts @ t2s\n 2. \\<And>\\<S> \\<C> tf b_es.\n       [Trap] = $* b_es \\<Longrightarrow> \\<C> \\<turnstile> b_es : tf\n 3. \\<And>\\<S> ts i vs es n \\<C> b_es.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;es : ts;\n        ?P2.4 \\<S> (Some ts) i vs es ts; length ts = n;\n        [Local n i vs es] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> ts\n 4. \\<And>\\<S> cl tf \\<C> b_es.\n       \\<lbrakk>cl_typing \\<S> cl tf; [Callcl cl] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : tf\n 5. \\<And>\\<S> \\<C> e0s ts t2s es n b_es.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> e0s : ts _> t2s;\n        \\<And>b_es.\n           e0s = $* b_es \\<Longrightarrow>\n           \\<C> \\<turnstile> b_es : ts _> t2s;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        \\<And>b_es.\n           es = $* b_es \\<Longrightarrow>\n           \\<C>\n           \\<lparr>label :=\n                     [ts] @\n                     label \\<C>\\<rparr> \\<turnstile> b_es : [] _> t2s;\n        length ts = n; [Label n e0s es] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> t2s\n 6. \\<And>i \\<S> tvs vs \\<C> rs es ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts;\n        \\<And>b_es.\n           es = $* b_es \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> ts;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.4 \\<S> rs i vs es ts", "case (3 \\<S> \\<C> t1s t2s ts)"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> $* b_es : t1s _> t2s\n  $* b_es = $* ?b_es \\<Longrightarrow> \\<C> \\<turnstile> ?b_es : t1s _> t2s\n\ngoal (6 subgoals):\n 1. \\<And>\\<S> \\<C> t1s t2s ts b_es.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> $* b_es : t1s _> t2s;\n        \\<And>b_esa.\n           $* b_es = $* b_esa \\<Longrightarrow>\n           \\<C> \\<turnstile> b_esa : t1s _> t2s\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : ts @ t1s _> ts @ t2s\n 2. \\<And>\\<S> \\<C> tf b_es.\n       [Trap] = $* b_es \\<Longrightarrow> \\<C> \\<turnstile> b_es : tf\n 3. \\<And>\\<S> ts i vs es n \\<C> b_es.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;es : ts;\n        ?P2.4 \\<S> (Some ts) i vs es ts; length ts = n;\n        [Local n i vs es] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> ts\n 4. \\<And>\\<S> cl tf \\<C> b_es.\n       \\<lbrakk>cl_typing \\<S> cl tf; [Callcl cl] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : tf\n 5. \\<And>\\<S> \\<C> e0s ts t2s es n b_es.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> e0s : ts _> t2s;\n        \\<And>b_es.\n           e0s = $* b_es \\<Longrightarrow>\n           \\<C> \\<turnstile> b_es : ts _> t2s;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        \\<And>b_es.\n           es = $* b_es \\<Longrightarrow>\n           \\<C>\n           \\<lparr>label :=\n                     [ts] @\n                     label \\<C>\\<rparr> \\<turnstile> b_es : [] _> t2s;\n        length ts = n; [Label n e0s es] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> t2s\n 6. \\<And>i \\<S> tvs vs \\<C> rs es ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts;\n        \\<And>b_es.\n           es = $* b_es \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> ts;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.4 \\<S> rs i vs es ts", "then"], ["proof (chain)\npicking this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> $* b_es : t1s _> t2s\n  $* b_es = $* ?b_es \\<Longrightarrow> \\<C> \\<turnstile> ?b_es : t1s _> t2s", "show ?case"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> $* b_es : t1s _> t2s\n  $* b_es = $* ?b_es \\<Longrightarrow> \\<C> \\<turnstile> ?b_es : t1s _> t2s\n\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> b_es : ts @ t1s _> ts @ t2s", "using b_e_typing.weakening"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> $* b_es : t1s _> t2s\n  $* b_es = $* ?b_es \\<Longrightarrow> \\<C> \\<turnstile> ?b_es : t1s _> t2s\n  ?\\<C> \\<turnstile> ?es : ?t1s _> ?t2s \\<Longrightarrow>\n  ?\\<C> \\<turnstile> ?es : ?ts @ ?t1s _> ?ts @ ?t2s\n\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> b_es : ts @ t1s _> ts @ t2s", "by blast"], ["proof (state)\nthis:\n  \\<C> \\<turnstile> b_es : ts @ t1s _> ts @ t2s\n\ngoal (5 subgoals):\n 1. \\<And>\\<S> \\<C> tf b_es.\n       [Trap] = $* b_es \\<Longrightarrow> \\<C> \\<turnstile> b_es : tf\n 2. \\<And>\\<S> ts i vs es n \\<C> b_es.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;es : ts;\n        ?P2.4 \\<S> (Some ts) i vs es ts; length ts = n;\n        [Local n i vs es] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> ts\n 3. \\<And>\\<S> cl tf \\<C> b_es.\n       \\<lbrakk>cl_typing \\<S> cl tf; [Callcl cl] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : tf\n 4. \\<And>\\<S> \\<C> e0s ts t2s es n b_es.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> e0s : ts _> t2s;\n        \\<And>b_es.\n           e0s = $* b_es \\<Longrightarrow>\n           \\<C> \\<turnstile> b_es : ts _> t2s;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        \\<And>b_es.\n           es = $* b_es \\<Longrightarrow>\n           \\<C>\n           \\<lparr>label :=\n                     [ts] @\n                     label \\<C>\\<rparr> \\<turnstile> b_es : [] _> t2s;\n        length ts = n; [Label n e0s es] = $* b_es\\<rbrakk>\n       \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> t2s\n 5. \\<And>i \\<S> tvs vs \\<C> rs es ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts;\n        \\<And>b_es.\n           es = $* b_es \\<Longrightarrow> \\<C> \\<turnstile> b_es : [] _> ts;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.4 \\<S> rs i vs es ts", "qed auto"], ["", "lemma store_typing_imp_inst_length_eq:\n  assumes \"store_typing s \\<S>\"\n  shows \"length (inst s) = length (s_inst \\<S>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (inst s) = length (s_inst \\<S>)", "using assms list_all2_lengthD"], ["proof (prove)\nusing this:\n  store_typing s \\<S>\n  list_all2 ?P ?xs ?ys \\<Longrightarrow> length ?xs = length ?ys\n\ngoal (1 subgoal):\n 1. length (inst s) = length (s_inst \\<S>)", "unfolding store_typing.simps"], ["proof (prove)\nusing this:\n  \\<exists>\\<S>' \\<C>s tfs ns ms tgs insts fs tclss bss gs.\n     s =\n     \\<lparr>inst = insts, funcs = fs, tab = tclss, mem = bss,\n        globs = gs\\<rparr> \\<and>\n     \\<S> = \\<S>' \\<and>\n     \\<S>' =\n     \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n        s_globs = tgs\\<rparr> \\<and>\n     list_all2 (inst_typing \\<S>') insts \\<C>s \\<and>\n     list_all2 (cl_typing \\<S>') fs tfs \\<and>\n     list_all (tab_agree \\<S>') (concat tclss) \\<and>\n     list_all2 (\\<lambda>tcls n. n \\<le> length tcls) tclss ns \\<and>\n     list_all2 mem_agree bss ms \\<and> list_all2 glob_agree gs tgs\n  list_all2 ?P ?xs ?ys \\<Longrightarrow> length ?xs = length ?ys\n\ngoal (1 subgoal):\n 1. length (inst s) = length (s_inst \\<S>)", "by fastforce"], ["", "lemma store_typing_imp_func_length_eq:\n  assumes \"store_typing s \\<S>\"\n  shows \"length (funcs s) = length (s_funcs \\<S>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (s.funcs s) = length (s_funcs \\<S>)", "using assms list_all2_lengthD"], ["proof (prove)\nusing this:\n  store_typing s \\<S>\n  list_all2 ?P ?xs ?ys \\<Longrightarrow> length ?xs = length ?ys\n\ngoal (1 subgoal):\n 1. length (s.funcs s) = length (s_funcs \\<S>)", "unfolding store_typing.simps"], ["proof (prove)\nusing this:\n  \\<exists>\\<S>' \\<C>s tfs ns ms tgs insts fs tclss bss gs.\n     s =\n     \\<lparr>inst = insts, funcs = fs, tab = tclss, mem = bss,\n        globs = gs\\<rparr> \\<and>\n     \\<S> = \\<S>' \\<and>\n     \\<S>' =\n     \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n        s_globs = tgs\\<rparr> \\<and>\n     list_all2 (inst_typing \\<S>') insts \\<C>s \\<and>\n     list_all2 (cl_typing \\<S>') fs tfs \\<and>\n     list_all (tab_agree \\<S>') (concat tclss) \\<and>\n     list_all2 (\\<lambda>tcls n. n \\<le> length tcls) tclss ns \\<and>\n     list_all2 mem_agree bss ms \\<and> list_all2 glob_agree gs tgs\n  list_all2 ?P ?xs ?ys \\<Longrightarrow> length ?xs = length ?ys\n\ngoal (1 subgoal):\n 1. length (s.funcs s) = length (s_funcs \\<S>)", "by fastforce"], ["", "lemma store_typing_imp_mem_length_eq:\n  assumes \"store_typing s \\<S>\"\n  shows \"length (s.mem s) = length (s_mem \\<S>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (s.mem s) = length (s_mem \\<S>)", "using assms list_all2_lengthD"], ["proof (prove)\nusing this:\n  store_typing s \\<S>\n  list_all2 ?P ?xs ?ys \\<Longrightarrow> length ?xs = length ?ys\n\ngoal (1 subgoal):\n 1. length (s.mem s) = length (s_mem \\<S>)", "unfolding store_typing.simps"], ["proof (prove)\nusing this:\n  \\<exists>\\<S>' \\<C>s tfs ns ms tgs insts fs tclss bss gs.\n     s =\n     \\<lparr>inst = insts, funcs = fs, tab = tclss, mem = bss,\n        globs = gs\\<rparr> \\<and>\n     \\<S> = \\<S>' \\<and>\n     \\<S>' =\n     \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n        s_globs = tgs\\<rparr> \\<and>\n     list_all2 (inst_typing \\<S>') insts \\<C>s \\<and>\n     list_all2 (cl_typing \\<S>') fs tfs \\<and>\n     list_all (tab_agree \\<S>') (concat tclss) \\<and>\n     list_all2 (\\<lambda>tcls n. n \\<le> length tcls) tclss ns \\<and>\n     list_all2 mem_agree bss ms \\<and> list_all2 glob_agree gs tgs\n  list_all2 ?P ?xs ?ys \\<Longrightarrow> length ?xs = length ?ys\n\ngoal (1 subgoal):\n 1. length (s.mem s) = length (s_mem \\<S>)", "by fastforce"], ["", "lemma store_typing_imp_glob_length_eq:\n  assumes \"store_typing s \\<S>\"\n  shows \"length (globs s) = length (s_globs \\<S>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (s.globs s) = length (s_globs \\<S>)", "using assms list_all2_lengthD"], ["proof (prove)\nusing this:\n  store_typing s \\<S>\n  list_all2 ?P ?xs ?ys \\<Longrightarrow> length ?xs = length ?ys\n\ngoal (1 subgoal):\n 1. length (s.globs s) = length (s_globs \\<S>)", "unfolding store_typing.simps"], ["proof (prove)\nusing this:\n  \\<exists>\\<S>' \\<C>s tfs ns ms tgs insts fs tclss bss gs.\n     s =\n     \\<lparr>inst = insts, funcs = fs, tab = tclss, mem = bss,\n        globs = gs\\<rparr> \\<and>\n     \\<S> = \\<S>' \\<and>\n     \\<S>' =\n     \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n        s_globs = tgs\\<rparr> \\<and>\n     list_all2 (inst_typing \\<S>') insts \\<C>s \\<and>\n     list_all2 (cl_typing \\<S>') fs tfs \\<and>\n     list_all (tab_agree \\<S>') (concat tclss) \\<and>\n     list_all2 (\\<lambda>tcls n. n \\<le> length tcls) tclss ns \\<and>\n     list_all2 mem_agree bss ms \\<and> list_all2 glob_agree gs tgs\n  list_all2 ?P ?xs ?ys \\<Longrightarrow> length ?xs = length ?ys\n\ngoal (1 subgoal):\n 1. length (s.globs s) = length (s_globs \\<S>)", "by fastforce"], ["", "lemma store_typing_imp_inst_typing:\n  assumes \"store_typing s \\<S>\"\n          \"i < length (inst s)\"\n  shows \"inst_typing \\<S> ((inst s)!i) ((s_inst \\<S>)!i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inst_typing \\<S> (inst s ! i) (s_inst \\<S> ! i)", "using assms"], ["proof (prove)\nusing this:\n  store_typing s \\<S>\n  i < length (inst s)\n\ngoal (1 subgoal):\n 1. inst_typing \\<S> (inst s ! i) (s_inst \\<S> ! i)", "unfolding list_all2_conv_all_nth store_typing.simps"], ["proof (prove)\nusing this:\n  \\<exists>\\<S>' \\<C>s tfs ns ms tgs insts fs tclss bss gs.\n     s =\n     \\<lparr>inst = insts, funcs = fs, tab = tclss, mem = bss,\n        globs = gs\\<rparr> \\<and>\n     \\<S> = \\<S>' \\<and>\n     \\<S>' =\n     \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n        s_globs = tgs\\<rparr> \\<and>\n     (length insts = length \\<C>s \\<and>\n      (\\<forall>i<length insts.\n          inst_typing \\<S>' (insts ! i) (\\<C>s ! i))) \\<and>\n     (length fs = length tfs \\<and>\n      (\\<forall>i<length fs. cl_typing \\<S>' (fs ! i) (tfs ! i))) \\<and>\n     list_all (tab_agree \\<S>') (concat tclss) \\<and>\n     (length tclss = length ns \\<and>\n      (\\<forall>i<length tclss. ns ! i \\<le> length (tclss ! i))) \\<and>\n     (length bss = length ms \\<and>\n      (\\<forall>i<length bss. mem_agree (bss ! i) (ms ! i))) \\<and>\n     length gs = length tgs \\<and>\n     (\\<forall>i<length gs. glob_agree (gs ! i) (tgs ! i))\n  i < length (inst s)\n\ngoal (1 subgoal):\n 1. inst_typing \\<S> (inst s ! i) (s_inst \\<S> ! i)", "by fastforce"], ["", "lemma stab_typed_some_imp_member:\n  assumes \"stab s i c = Some cl\"\n          \"store_typing s \\<S>\"\n          \"i < length (inst s)\"\n  shows \"Some cl \\<in> set (concat (s.tab s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some cl \\<in> set (concat (s.tab s))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Some cl \\<in> set (concat (s.tab s))", "obtain k' where k_def:\"inst.tab ((inst s)!i) = Some k'\"\n                       \"length ((s.tab s)!k') > c\"\n                       \"((s.tab s)!k')!c = Some cl\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        \\<lbrakk>inst.tab (inst s ! i) = Some k'; c < length (s.tab s ! k');\n         s.tab s ! k' ! c = Some cl\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using stab_unfold assms(1,3)"], ["proof (prove)\nusing this:\n  stab ?s ?i ?j = Some ?cl \\<Longrightarrow>\n  \\<exists>k.\n     inst.tab (inst ?s ! ?i) = Some k \\<and>\n     ?j < length (s.tab ?s ! k) \\<and> s.tab ?s ! k ! ?j = Some ?cl\n  stab s i c = Some cl\n  i < length (inst s)\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        \\<lbrakk>inst.tab (inst s ! i) = Some k'; c < length (s.tab s ! k');\n         s.tab s ! k' ! c = Some cl\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  inst.tab (inst s ! i) = Some k'\n  c < length (s.tab s ! k')\n  s.tab s ! k' ! c = Some cl\n\ngoal (1 subgoal):\n 1. Some cl \\<in> set (concat (s.tab s))", "hence \"Some cl \\<in> set ((s.tab s)!k')\""], ["proof (prove)\nusing this:\n  inst.tab (inst s ! i) = Some k'\n  c < length (s.tab s ! k')\n  s.tab s ! k' ! c = Some cl\n\ngoal (1 subgoal):\n 1. Some cl \\<in> set (s.tab s ! k')", "using nth_mem"], ["proof (prove)\nusing this:\n  inst.tab (inst s ! i) = Some k'\n  c < length (s.tab s ! k')\n  s.tab s ! k' ! c = Some cl\n  ?n < length ?xs \\<Longrightarrow> ?xs ! ?n \\<in> set ?xs\n\ngoal (1 subgoal):\n 1. Some cl \\<in> set (s.tab s ! k')", "by fastforce"], ["proof (state)\nthis:\n  Some cl \\<in> set (s.tab s ! k')\n\ngoal (1 subgoal):\n 1. Some cl \\<in> set (concat (s.tab s))", "moreover"], ["proof (state)\nthis:\n  Some cl \\<in> set (s.tab s ! k')\n\ngoal (1 subgoal):\n 1. Some cl \\<in> set (concat (s.tab s))", "have \"inst_typing \\<S> ((inst s)!i) ((s_inst \\<S>)!i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inst_typing \\<S> (inst s ! i) (s_inst \\<S> ! i)", "using assms(2,3) store_typing_imp_inst_typing"], ["proof (prove)\nusing this:\n  store_typing s \\<S>\n  i < length (inst s)\n  \\<lbrakk>store_typing ?s ?\\<S>; ?i < length (inst ?s)\\<rbrakk>\n  \\<Longrightarrow> inst_typing ?\\<S> (inst ?s ! ?i) (s_inst ?\\<S> ! ?i)\n\ngoal (1 subgoal):\n 1. inst_typing \\<S> (inst s ! i) (s_inst \\<S> ! i)", "by blast"], ["proof (state)\nthis:\n  inst_typing \\<S> (inst s ! i) (s_inst \\<S> ! i)\n\ngoal (1 subgoal):\n 1. Some cl \\<in> set (concat (s.tab s))", "hence \"k' < length (s_tab \\<S>)\""], ["proof (prove)\nusing this:\n  inst_typing \\<S> (inst s ! i) (s_inst \\<S> ! i)\n\ngoal (1 subgoal):\n 1. k' < length (s_tab \\<S>)", "using k_def(1)"], ["proof (prove)\nusing this:\n  inst_typing \\<S> (inst s ! i) (s_inst \\<S> ! i)\n  inst.tab (inst s ! i) = Some k'\n\ngoal (1 subgoal):\n 1. k' < length (s_tab \\<S>)", "unfolding inst_typing.simps stypes_def"], ["proof (prove)\nusing this:\n  \\<exists>\\<S>' fs tfs gs tgs ia i' n j m ts.\n     \\<S> = \\<S>' \\<and>\n     inst s ! i =\n     \\<lparr>types = ts, funcs = fs, tab = ia, mem = j,\n        globs = gs\\<rparr> \\<and>\n     s_inst \\<S> ! i =\n     \\<lparr>types_t = ts, func_t = tfs, global = tgs, table = n,\n        memory = m, local = [], label = [], return = None\\<rparr> \\<and>\n     list_all2 (funci_agree (s_funcs \\<S>')) fs tfs \\<and>\n     list_all2 (globi_agree (s_globs \\<S>')) gs tgs \\<and>\n     (ia = Some i' \\<and>\n      i' < length (s_tab \\<S>') \\<and> s_tab \\<S>' ! i' = the n \\<or>\n      ia = None \\<and> n = None) \\<and>\n     memi_agree (s_mem \\<S>') j m\n  inst.tab (inst s ! i) = Some k'\n\ngoal (1 subgoal):\n 1. k' < length (s_tab \\<S>)", "by auto"], ["proof (state)\nthis:\n  k' < length (s_tab \\<S>)\n\ngoal (1 subgoal):\n 1. Some cl \\<in> set (concat (s.tab s))", "hence \"k' < length (s.tab s)\""], ["proof (prove)\nusing this:\n  k' < length (s_tab \\<S>)\n\ngoal (1 subgoal):\n 1. k' < length (s.tab s)", "using assms(2) list_all2_lengthD"], ["proof (prove)\nusing this:\n  k' < length (s_tab \\<S>)\n  store_typing s \\<S>\n  list_all2 ?P ?xs ?ys \\<Longrightarrow> length ?xs = length ?ys\n\ngoal (1 subgoal):\n 1. k' < length (s.tab s)", "unfolding store_typing.simps"], ["proof (prove)\nusing this:\n  k' < length (s_tab \\<S>)\n  \\<exists>\\<S>' \\<C>s tfs ns ms tgs insts fs tclss bss gs.\n     s =\n     \\<lparr>inst = insts, funcs = fs, tab = tclss, mem = bss,\n        globs = gs\\<rparr> \\<and>\n     \\<S> = \\<S>' \\<and>\n     \\<S>' =\n     \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n        s_globs = tgs\\<rparr> \\<and>\n     list_all2 (inst_typing \\<S>') insts \\<C>s \\<and>\n     list_all2 (cl_typing \\<S>') fs tfs \\<and>\n     list_all (tab_agree \\<S>') (concat tclss) \\<and>\n     list_all2 (\\<lambda>tcls n. n \\<le> length tcls) tclss ns \\<and>\n     list_all2 mem_agree bss ms \\<and> list_all2 glob_agree gs tgs\n  list_all2 ?P ?xs ?ys \\<Longrightarrow> length ?xs = length ?ys\n\ngoal (1 subgoal):\n 1. k' < length (s.tab s)", "by fastforce"], ["proof (state)\nthis:\n  k' < length (s.tab s)\n\ngoal (1 subgoal):\n 1. Some cl \\<in> set (concat (s.tab s))", "ultimately"], ["proof (chain)\npicking this:\n  Some cl \\<in> set (s.tab s ! k')\n  k' < length (s.tab s)", "show ?thesis"], ["proof (prove)\nusing this:\n  Some cl \\<in> set (s.tab s ! k')\n  k' < length (s.tab s)\n\ngoal (1 subgoal):\n 1. Some cl \\<in> set (concat (s.tab s))", "using k_def"], ["proof (prove)\nusing this:\n  Some cl \\<in> set (s.tab s ! k')\n  k' < length (s.tab s)\n  inst.tab (inst s ! i) = Some k'\n  c < length (s.tab s ! k')\n  s.tab s ! k' ! c = Some cl\n\ngoal (1 subgoal):\n 1. Some cl \\<in> set (concat (s.tab s))", "by auto"], ["proof (state)\nthis:\n  Some cl \\<in> set (concat (s.tab s))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma stab_typed_some_imp_cl_typed:\n  assumes \"stab s i c = Some cl\"\n          \"store_typing s \\<S>\"\n          \"i < length (inst s)\"\n  shows \"\\<exists>tf. cl_typing \\<S> cl tf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>tf. cl_typing \\<S> cl tf", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>tf. cl_typing \\<S> cl tf", "have \"Some cl \\<in> set (concat (s.tab s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some cl \\<in> set (concat (s.tab s))", "using assms stab_typed_some_imp_member"], ["proof (prove)\nusing this:\n  stab s i c = Some cl\n  store_typing s \\<S>\n  i < length (inst s)\n  \\<lbrakk>stab ?s ?i ?c = Some ?cl; store_typing ?s ?\\<S>;\n   ?i < length (inst ?s)\\<rbrakk>\n  \\<Longrightarrow> Some ?cl \\<in> set (concat (s.tab ?s))\n\ngoal (1 subgoal):\n 1. Some cl \\<in> set (concat (s.tab s))", "by auto"], ["proof (state)\nthis:\n  Some cl \\<in> set (concat (s.tab s))\n\ngoal (1 subgoal):\n 1. \\<exists>tf. cl_typing \\<S> cl tf", "moreover"], ["proof (state)\nthis:\n  Some cl \\<in> set (concat (s.tab s))\n\ngoal (1 subgoal):\n 1. \\<exists>tf. cl_typing \\<S> cl tf", "have \"list_all (tab_agree \\<S>) (concat (s.tab s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all (tab_agree \\<S>) (concat (s.tab s))", "using assms(2)"], ["proof (prove)\nusing this:\n  store_typing s \\<S>\n\ngoal (1 subgoal):\n 1. list_all (tab_agree \\<S>) (concat (s.tab s))", "unfolding store_typing.simps"], ["proof (prove)\nusing this:\n  \\<exists>\\<S>' \\<C>s tfs ns ms tgs insts fs tclss bss gs.\n     s =\n     \\<lparr>inst = insts, funcs = fs, tab = tclss, mem = bss,\n        globs = gs\\<rparr> \\<and>\n     \\<S> = \\<S>' \\<and>\n     \\<S>' =\n     \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n        s_globs = tgs\\<rparr> \\<and>\n     list_all2 (inst_typing \\<S>') insts \\<C>s \\<and>\n     list_all2 (cl_typing \\<S>') fs tfs \\<and>\n     list_all (tab_agree \\<S>') (concat tclss) \\<and>\n     list_all2 (\\<lambda>tcls n. n \\<le> length tcls) tclss ns \\<and>\n     list_all2 mem_agree bss ms \\<and> list_all2 glob_agree gs tgs\n\ngoal (1 subgoal):\n 1. list_all (tab_agree \\<S>) (concat (s.tab s))", "by auto"], ["proof (state)\nthis:\n  list_all (tab_agree \\<S>) (concat (s.tab s))\n\ngoal (1 subgoal):\n 1. \\<exists>tf. cl_typing \\<S> cl tf", "ultimately"], ["proof (chain)\npicking this:\n  Some cl \\<in> set (concat (s.tab s))\n  list_all (tab_agree \\<S>) (concat (s.tab s))", "show ?thesis"], ["proof (prove)\nusing this:\n  Some cl \\<in> set (concat (s.tab s))\n  list_all (tab_agree \\<S>) (concat (s.tab s))\n\ngoal (1 subgoal):\n 1. \\<exists>tf. cl_typing \\<S> cl tf", "unfolding in_set_conv_nth list_all_length tab_agree_def"], ["proof (prove)\nusing this:\n  \\<exists>i<length (concat (s.tab s)). concat (s.tab s) ! i = Some cl\n  \\<forall>n<length (concat (s.tab s)).\n     case concat (s.tab s) ! n of None \\<Rightarrow> True\n     | Some cl \\<Rightarrow> Ex (cl_typing \\<S> cl)\n\ngoal (1 subgoal):\n 1. \\<exists>tf. cl_typing \\<S> cl tf", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>tf. cl_typing \\<S> cl tf\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma b_e_type_empty1[dest]: assumes \"\\<C> \\<turnstile> [] : (ts _> ts')\" shows \"ts = ts'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts = ts'", "using assms"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [] : ts _> ts'\n\ngoal (1 subgoal):\n 1. ts = ts'", "by (induction \"[]::(b_e list)\" \"(ts _> ts')\" arbitrary: ts ts' rule: b_e_typing.induct, simp_all)"], ["", "lemma b_e_type_empty: \"(\\<C> \\<turnstile> [] : (ts _> ts')) = (ts = ts')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> [] : ts _> ts' = (ts = ts')", "proof (safe)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<C> \\<turnstile> [] : ts _> ts' \\<Longrightarrow> ts = ts'\n 2. ts = ts' \\<Longrightarrow> \\<C> \\<turnstile> [] : ts' _> ts'", "assume \"\\<C> \\<turnstile> [] : (ts _> ts')\""], ["proof (state)\nthis:\n  \\<C> \\<turnstile> [] : ts _> ts'\n\ngoal (2 subgoals):\n 1. \\<C> \\<turnstile> [] : ts _> ts' \\<Longrightarrow> ts = ts'\n 2. ts = ts' \\<Longrightarrow> \\<C> \\<turnstile> [] : ts' _> ts'", "thus \"ts = ts'\""], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [] : ts _> ts'\n\ngoal (1 subgoal):\n 1. ts = ts'", "by blast"], ["proof (state)\nthis:\n  ts = ts'\n\ngoal (1 subgoal):\n 1. ts = ts' \\<Longrightarrow> \\<C> \\<turnstile> [] : ts' _> ts'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ts = ts' \\<Longrightarrow> \\<C> \\<turnstile> [] : ts' _> ts'", "assume \"ts = ts'\""], ["proof (state)\nthis:\n  ts = ts'\n\ngoal (1 subgoal):\n 1. ts = ts' \\<Longrightarrow> \\<C> \\<turnstile> [] : ts' _> ts'", "thus \"\\<C> \\<turnstile> [] : (ts' _> ts')\""], ["proof (prove)\nusing this:\n  ts = ts'\n\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> [] : ts' _> ts'", "using b_e_typing.empty b_e_typing.weakening"], ["proof (prove)\nusing this:\n  ts = ts'\n  ?\\<C> \\<turnstile> [] : [] _> []\n  ?\\<C> \\<turnstile> ?es : ?t1s _> ?t2s \\<Longrightarrow>\n  ?\\<C> \\<turnstile> ?es : ?ts @ ?t1s _> ?ts @ ?t2s\n\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> [] : ts' _> ts'", "by fastforce"], ["proof (state)\nthis:\n  \\<C> \\<turnstile> [] : ts' _> ts'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma b_e_type_value:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = C v\"\n  shows \"ts' = ts @ [typeof v]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts' = ts @ [typeof v]", "using assms"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e] : ts _> ts'\n  e = C v\n\ngoal (1 subgoal):\n 1. ts' = ts @ [typeof v]", "by (induction \"[e]\" \"(ts _> ts')\" arbitrary: ts ts' rule: b_e_typing.induct, auto)"], ["", "lemma b_e_type_load:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Load t tp_sx a off\"\n  shows \"\\<exists>ts'' sec n. ts = ts''@[T_i32] \\<and> ts' = ts''@[t] \\<and> (memory \\<C>) = Some n\"\n        \"load_store_t_bounds a (option_projl tp_sx) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ts'' sec n.\n       ts = ts'' @ [T_i32] \\<and>\n       ts' = ts'' @ [t] \\<and> memory \\<C> = Some n &&&\n    load_store_t_bounds a (option_projl tp_sx) t", "using assms"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e] : ts _> ts'\n  e = Load t tp_sx a off\n\ngoal (1 subgoal):\n 1. \\<exists>ts'' sec n.\n       ts = ts'' @ [T_i32] \\<and>\n       ts' = ts'' @ [t] \\<and> memory \\<C> = Some n &&&\n    load_store_t_bounds a (option_projl tp_sx) t", "by (induction \"[e]\" \"(ts _> ts')\" arbitrary: ts ts' rule: b_e_typing.induct, auto)"], ["", "lemma b_e_type_store:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Store t tp a off\"\n    shows \"ts = ts'@[T_i32, t]\"\n          \"\\<exists>sec n. (memory \\<C>) = Some n\"\n          \"load_store_t_bounds a tp t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts = ts' @ [T_i32, t] &&&\n    \\<exists>sec n. memory \\<C> = Some n &&& load_store_t_bounds a tp t", "using assms"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e] : ts _> ts'\n  e = Store t tp a off\n\ngoal (1 subgoal):\n 1. ts = ts' @ [T_i32, t] &&&\n    \\<exists>sec n. memory \\<C> = Some n &&& load_store_t_bounds a tp t", "by (induction \"[e]\" \"(ts _> ts')\" arbitrary: ts ts' rule: b_e_typing.induct, auto)"], ["", "lemma b_e_type_current_memory:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Current_memory\"\n  shows \"\\<exists>sec n. ts' = ts @ [T_i32] \\<and> (memory \\<C>) = Some n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>sec n. ts' = ts @ [T_i32] \\<and> memory \\<C> = Some n", "using assms"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e] : ts _> ts'\n  e = Current_memory\n\ngoal (1 subgoal):\n 1. \\<exists>sec n. ts' = ts @ [T_i32] \\<and> memory \\<C> = Some n", "by (induction \"[e]\" \"(ts _> ts')\" arbitrary: ts ts' rule: b_e_typing.induct, auto)"], ["", "lemma b_e_type_grow_memory:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Grow_memory\"\n  shows \"\\<exists>ts''. ts = ts''@[T_i32] \\<and> ts = ts' \\<and> (\\<exists>n. (memory \\<C>) = Some n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       ts = ts'' @ [T_i32] \\<and>\n       ts = ts' \\<and> (\\<exists>n. memory \\<C> = Some n)", "using assms"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e] : ts _> ts'\n  e = Grow_memory\n\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       ts = ts'' @ [T_i32] \\<and>\n       ts = ts' \\<and> (\\<exists>n. memory \\<C> = Some n)", "by (induction \"[e]\" \"(ts _> ts')\" arbitrary: ts ts' rule: b_e_typing.induct) auto"], ["", "lemma b_e_type_nop:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Nop\"\n  shows \"ts = ts'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts = ts'", "using assms"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e] : ts _> ts'\n  e = Nop\n\ngoal (1 subgoal):\n 1. ts = ts'", "by (induction \"[e]\"  \"(ts _> ts')\" arbitrary: ts ts' rule: b_e_typing.induct, auto)"], ["", "definition arity_2_result :: \"b_e \\<Rightarrow> t\" where\n  \"arity_2_result op2 = (case op2 of\n                           Binop_i t _ \\<Rightarrow> t\n                         | Binop_f t _ \\<Rightarrow> t\n                         | Relop_i t _ \\<Rightarrow> T_i32\n                         | Relop_f t _ \\<Rightarrow> T_i32)\""], ["", "lemma b_e_type_binop_relop:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Binop_i t iop \\<or> e = Binop_f t fop \\<or> e = Relop_i t irop \\<or> e = Relop_f t frop\"\n  shows \"\\<exists>ts''. ts = ts''@[t,t] \\<and> ts' = ts''@[arity_2_result(e)]\"\n        \"e = Binop_f t fop \\<Longrightarrow> is_float_t t\"\n        \"e = Relop_f t frop \\<Longrightarrow> is_float_t t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       ts = ts'' @ [t, t] \\<and> ts' = ts'' @ [arity_2_result e] &&&\n    (e = Binop_f t fop \\<Longrightarrow> is_float_t t) &&&\n    (e = Relop_f t frop \\<Longrightarrow> is_float_t t)", "using assms"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e] : ts _> ts'\n  e = Binop_i t iop \\<or>\n  e = Binop_f t fop \\<or> e = Relop_i t irop \\<or> e = Relop_f t frop\n\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       ts = ts'' @ [t, t] \\<and> ts' = ts'' @ [arity_2_result e] &&&\n    (e = Binop_f t fop \\<Longrightarrow> is_float_t t) &&&\n    (e = Relop_f t frop \\<Longrightarrow> is_float_t t)", "unfolding arity_2_result_def"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e] : ts _> ts'\n  e = Binop_i t iop \\<or>\n  e = Binop_f t fop \\<or> e = Relop_i t irop \\<or> e = Relop_f t frop\n\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       ts = ts'' @ [t, t] \\<and>\n       ts' =\n       ts'' @\n       [case e of Binop_i t x \\<Rightarrow> t | Binop_f t x \\<Rightarrow> t\n        | Relop_i t x \\<Rightarrow> T_i32\n        | Relop_f t x \\<Rightarrow> T_i32] &&&\n    (e = Binop_f t fop \\<Longrightarrow> is_float_t t) &&&\n    (e = Relop_f t frop \\<Longrightarrow> is_float_t t)", "by (induction \"[e]\" \"(ts _> ts')\" arbitrary: ts ts' rule: b_e_typing.induct, auto)"], ["", "lemma b_e_type_testop_drop_cvt0:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Testop t testop \\<or> e = Drop \\<or> e = Cvtop t1 cvtop t2 sx\"\n  shows \"ts \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts \\<noteq> []", "using assms"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e] : ts _> ts'\n  e = Testop t testop \\<or> e = Drop \\<or> e = Cvtop t1 cvtop t2 sx\n\ngoal (1 subgoal):\n 1. ts \\<noteq> []", "by (induction \"[e]\" \"ts _> ts'\" arbitrary: ts' rule: b_e_typing.induct, auto)"], ["", "definition arity_1_result :: \"b_e \\<Rightarrow> t\" where\n  \"arity_1_result op1 = (case op1 of\n                           Unop_i t _ \\<Rightarrow> t\n                         | Unop_f t _ \\<Rightarrow> t\n                         | Testop t _ \\<Rightarrow> T_i32\n                         | Cvtop t1 Convert _ _ \\<Rightarrow> t1\n                         | Cvtop t1 Reinterpret _ _ \\<Rightarrow> t1)\""], ["", "lemma b_e_type_unop_testop:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Unop_i t iop \\<or> e = Unop_f t fop \\<or> e = Testop t testop\"\n  shows \"\\<exists>ts''. ts = ts''@[t] \\<and> ts' = ts''@[arity_1_result e]\"\n        \"e = Unop_f t fop \\<Longrightarrow> is_float_t t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       ts = ts'' @ [t] \\<and> ts' = ts'' @ [arity_1_result e] &&&\n    (e = Unop_f t fop \\<Longrightarrow> is_float_t t)", "using assms int_float_disjoint"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e] : ts _> ts'\n  e = Unop_i t iop \\<or> e = Unop_f t fop \\<or> e = Testop t testop\n  is_int_t ?t = - is_float_t ?t\n\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       ts = ts'' @ [t] \\<and> ts' = ts'' @ [arity_1_result e] &&&\n    (e = Unop_f t fop \\<Longrightarrow> is_float_t t)", "unfolding arity_1_result_def"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e] : ts _> ts'\n  e = Unop_i t iop \\<or> e = Unop_f t fop \\<or> e = Testop t testop\n  is_int_t ?t = - is_float_t ?t\n\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       ts = ts'' @ [t] \\<and>\n       ts' =\n       ts'' @\n       [case e of Unop_i t x \\<Rightarrow> t | Unop_f t x \\<Rightarrow> t\n        | Testop t x \\<Rightarrow> T_i32\n        | Cvtop t1 Convert x xa \\<Rightarrow> t1\n        | Cvtop t1 _ x xa \\<Rightarrow> t1] &&&\n    (e = Unop_f t fop \\<Longrightarrow> is_float_t t)", "by (induction \"[e]\" \"(ts _> ts')\" arbitrary: ts ts' rule: b_e_typing.induct) fastforce+"], ["", "lemma b_e_type_cvtop:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Cvtop t1 cvtop t sx\"\n  shows \"\\<exists>ts''. ts = ts''@[t] \\<and> ts' = ts''@[arity_1_result e]\"\n        \"cvtop = Convert \\<Longrightarrow> (t1 \\<noteq> t) \\<and> (sx = None) = ((is_float_t t1 \\<and> is_float_t t) \\<or> (is_int_t t1 \\<and> is_int_t t \\<and> (t_length t1 < t_length t)))\"\n        \"cvtop = Reinterpret \\<Longrightarrow> (t1 \\<noteq> t) \\<and> t_length t1 = t_length t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       ts = ts'' @ [t] \\<and> ts' = ts'' @ [arity_1_result e] &&&\n    (cvtop = Convert \\<Longrightarrow>\n     t1 \\<noteq> t \\<and>\n     (sx = None) =\n     (is_float_t t1 \\<and> is_float_t t \\<or>\n      is_int_t t1 \\<and> is_int_t t \\<and> t_length t1 < t_length t)) &&&\n    (cvtop = Reinterpret \\<Longrightarrow>\n     t1 \\<noteq> t \\<and> t_length t1 = t_length t)", "using assms"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e] : ts _> ts'\n  e = Cvtop t1 cvtop t sx\n\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       ts = ts'' @ [t] \\<and> ts' = ts'' @ [arity_1_result e] &&&\n    (cvtop = Convert \\<Longrightarrow>\n     t1 \\<noteq> t \\<and>\n     (sx = None) =\n     (is_float_t t1 \\<and> is_float_t t \\<or>\n      is_int_t t1 \\<and> is_int_t t \\<and> t_length t1 < t_length t)) &&&\n    (cvtop = Reinterpret \\<Longrightarrow>\n     t1 \\<noteq> t \\<and> t_length t1 = t_length t)", "unfolding arity_1_result_def"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e] : ts _> ts'\n  e = Cvtop t1 cvtop t sx\n\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       ts = ts'' @ [t] \\<and>\n       ts' =\n       ts'' @\n       [case e of Unop_i t x \\<Rightarrow> t | Unop_f t x \\<Rightarrow> t\n        | Testop t x \\<Rightarrow> T_i32\n        | Cvtop t1 Convert x xa \\<Rightarrow> t1\n        | Cvtop t1 _ x xa \\<Rightarrow> t1] &&&\n    (cvtop = Convert \\<Longrightarrow>\n     t1 \\<noteq> t \\<and>\n     (sx = None) =\n     (is_float_t t1 \\<and> is_float_t t \\<or>\n      is_int_t t1 \\<and> is_int_t t \\<and> t_length t1 < t_length t)) &&&\n    (cvtop = Reinterpret \\<Longrightarrow>\n     t1 \\<noteq> t \\<and> t_length t1 = t_length t)", "by (induction \"[e]\" \"(ts _> ts')\" arbitrary: ts ts' rule: b_e_typing.induct, auto)"], ["", "lemma b_e_type_drop:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Drop\"\n  shows \"\\<exists>t. ts = ts'@[t]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t. ts = ts' @ [t]", "using assms b_e_type_testop_drop_cvt0"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e] : ts _> ts'\n  e = Drop\n  \\<lbrakk>?\\<C> \\<turnstile> [?e] : ?ts _> ?ts';\n   ?e = Testop ?t ?testop \\<or>\n   ?e = Drop \\<or> ?e = Cvtop ?t1.0 ?cvtop ?t2.0 ?sx\\<rbrakk>\n  \\<Longrightarrow> ?ts \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>t. ts = ts' @ [t]", "by (induction \"[e]\" \"(ts _> ts')\" arbitrary: ts ts' rule: b_e_typing.induct, auto)"], ["", "lemma b_e_type_select:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Select\"\n  shows \"\\<exists>ts'' t. ts = ts''@[t,t,T_i32] \\<and> ts' = ts''@[t]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ts'' t. ts = ts'' @ [t, t, T_i32] \\<and> ts' = ts'' @ [t]", "using assms"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e] : ts _> ts'\n  e = Select\n\ngoal (1 subgoal):\n 1. \\<exists>ts'' t. ts = ts'' @ [t, t, T_i32] \\<and> ts' = ts'' @ [t]", "by (induction \"[e]\" \"(ts _> ts')\" arbitrary: ts ts' rule: b_e_typing.induct, auto)"], ["", "lemma b_e_type_call:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Call i\"\n  shows  \"i < length (func_t \\<C>)\"\n         \"\\<exists>ts'' tf1 tf2. ts = ts''@tf1 \\<and> ts' = ts''@tf2 \\<and> (func_t \\<C>)!i = (tf1 _> tf2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length (func_t \\<C>) &&&\n    \\<exists>ts'' tf1 tf2.\n       ts = ts'' @ tf1 \\<and>\n       ts' = ts'' @ tf2 \\<and> func_t \\<C> ! i = tf1 _> tf2", "using assms"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e] : ts _> ts'\n  e = Call i\n\ngoal (1 subgoal):\n 1. i < length (func_t \\<C>) &&&\n    \\<exists>ts'' tf1 tf2.\n       ts = ts'' @ tf1 \\<and>\n       ts' = ts'' @ tf2 \\<and> func_t \\<C> ! i = tf1 _> tf2", "by (induction \"[e]\" \"(ts _> ts')\" arbitrary: ts ts' rule: b_e_typing.induct, auto)"], ["", "lemma b_e_type_call_indirect:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Call_indirect i\"\n  shows \"i < length (types_t \\<C>)\"\n        \"\\<exists>ts'' tf1 tf2. ts = ts''@tf1@[T_i32] \\<and> ts' = ts''@tf2 \\<and> (types_t \\<C>)!i = (tf1 _> tf2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length (types_t \\<C>) &&&\n    \\<exists>ts'' tf1 tf2.\n       ts = ts'' @ tf1 @ [T_i32] \\<and>\n       ts' = ts'' @ tf2 \\<and> types_t \\<C> ! i = tf1 _> tf2", "using assms"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e] : ts _> ts'\n  e = Call_indirect i\n\ngoal (1 subgoal):\n 1. i < length (types_t \\<C>) &&&\n    \\<exists>ts'' tf1 tf2.\n       ts = ts'' @ tf1 @ [T_i32] \\<and>\n       ts' = ts'' @ tf2 \\<and> types_t \\<C> ! i = tf1 _> tf2", "by (induction \"[e]\" \"(ts _> ts')\" arbitrary: ts ts' rule: b_e_typing.induct, auto)"], ["", "lemma b_e_type_get_local:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Get_local i\"\n  shows \"\\<exists>t. ts' = ts@[t] \\<and> (local \\<C>)!i = t\" \"i < length(local \\<C>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t. ts' = ts @ [t] \\<and> local \\<C> ! i = t &&&\n    i < length (local \\<C>)", "using assms"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e] : ts _> ts'\n  e = Get_local i\n\ngoal (1 subgoal):\n 1. \\<exists>t. ts' = ts @ [t] \\<and> local \\<C> ! i = t &&&\n    i < length (local \\<C>)", "by (induction \"[e]\" \"(ts _> ts')\" arbitrary: ts ts' rule: b_e_typing.induct, auto)"], ["", "lemma b_e_type_set_local:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Set_local i\"\n  shows \"\\<exists>t. ts = ts'@[t] \\<and> (local \\<C>)!i = t\" \"i < length(local \\<C>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t. ts = ts' @ [t] \\<and> local \\<C> ! i = t &&&\n    i < length (local \\<C>)", "using assms"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e] : ts _> ts'\n  e = Set_local i\n\ngoal (1 subgoal):\n 1. \\<exists>t. ts = ts' @ [t] \\<and> local \\<C> ! i = t &&&\n    i < length (local \\<C>)", "by (induction \"[e]\" \"(ts _> ts')\" arbitrary: ts ts' rule: b_e_typing.induct, auto)"], ["", "lemma b_e_type_tee_local:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Tee_local i\"\n  shows \"\\<exists>ts'' t. ts = ts''@[t] \\<and> ts' = ts''@[t] \\<and> (local \\<C>)!i = t\" \"i < length(local \\<C>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ts'' t.\n       ts = ts'' @ [t] \\<and> ts' = ts'' @ [t] \\<and> local \\<C> ! i = t &&&\n    i < length (local \\<C>)", "using assms"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e] : ts _> ts'\n  e = Tee_local i\n\ngoal (1 subgoal):\n 1. \\<exists>ts'' t.\n       ts = ts'' @ [t] \\<and> ts' = ts'' @ [t] \\<and> local \\<C> ! i = t &&&\n    i < length (local \\<C>)", "by (induction \"[e]\" \"(ts _> ts')\" arbitrary: ts ts' rule: b_e_typing.induct, auto)"], ["", "lemma b_e_type_get_global:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Get_global i\"\n  shows \"\\<exists>t. ts' = ts@[t] \\<and> tg_t((global \\<C>)!i) = t\" \"i < length(global \\<C>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t. ts' = ts @ [t] \\<and> tg_t (global \\<C> ! i) = t &&&\n    i < length (global \\<C>)", "using assms"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e] : ts _> ts'\n  e = Get_global i\n\ngoal (1 subgoal):\n 1. \\<exists>t. ts' = ts @ [t] \\<and> tg_t (global \\<C> ! i) = t &&&\n    i < length (global \\<C>)", "by (induction \"[e]\" \"(ts _> ts')\" arbitrary: ts ts' rule: b_e_typing.induct, auto)"], ["", "lemma b_e_type_set_global:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Set_global i\"\n  shows \"\\<exists>t. ts = ts'@[t] \\<and> (global \\<C>)!i = \\<lparr>tg_mut = T_mut, tg_t = t\\<rparr> \\<and> i < length(global \\<C>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t.\n       ts = ts' @ [t] \\<and>\n       global \\<C> ! i = \\<lparr>tg_mut = T_mut, tg_t = t\\<rparr> \\<and>\n       i < length (global \\<C>)", "using assms is_mut_def"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e] : ts _> ts'\n  e = Set_global i\n  is_mut ?tg = (tg_mut ?tg = T_mut)\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       ts = ts' @ [t] \\<and>\n       global \\<C> ! i = \\<lparr>tg_mut = T_mut, tg_t = t\\<rparr> \\<and>\n       i < length (global \\<C>)", "by (induction \"[e]\" \"(ts _> ts')\" arbitrary: ts ts' rule: b_e_typing.induct) auto"], ["", "lemma b_e_type_block:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Block tf es\"\n  shows \"\\<exists>ts'' tfn tfm. tf = (tfn _> tfm) \\<and> (ts = ts''@tfn) \\<and> (ts' = ts''@tfm) \\<and>\n                        (\\<C>\\<lparr>label :=  [tfm] @ label \\<C>\\<rparr> \\<turnstile> es : tf)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ts'' tfn tfm.\n       tf = tfn _> tfm \\<and>\n       ts = ts'' @ tfn \\<and>\n       ts' = ts'' @ tfm \\<and> \\<C>\n       \\<lparr>label := [tfm] @ label \\<C>\\<rparr> \\<turnstile> es : tf", "using assms"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e] : ts _> ts'\n  e = Block tf es\n\ngoal (1 subgoal):\n 1. \\<exists>ts'' tfn tfm.\n       tf = tfn _> tfm \\<and>\n       ts = ts'' @ tfn \\<and>\n       ts' = ts'' @ tfm \\<and> \\<C>\n       \\<lparr>label := [tfm] @ label \\<C>\\<rparr> \\<turnstile> es : tf", "by (induction \"[e]\" \"(ts _> ts')\" arbitrary: ts ts' rule: b_e_typing.induct, auto)"], ["", "lemma b_e_type_loop:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Loop tf es\"\n  shows \"\\<exists>ts'' tfn tfm. tf = (tfn _> tfm) \\<and> (ts = ts''@tfn) \\<and> (ts' = ts''@tfm) \\<and>\n                        (\\<C>\\<lparr>label :=  [tfn] @ label \\<C>\\<rparr> \\<turnstile> es : tf)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ts'' tfn tfm.\n       tf = tfn _> tfm \\<and>\n       ts = ts'' @ tfn \\<and>\n       ts' = ts'' @ tfm \\<and> \\<C>\n       \\<lparr>label := [tfn] @ label \\<C>\\<rparr> \\<turnstile> es : tf", "using assms"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e] : ts _> ts'\n  e = Loop tf es\n\ngoal (1 subgoal):\n 1. \\<exists>ts'' tfn tfm.\n       tf = tfn _> tfm \\<and>\n       ts = ts'' @ tfn \\<and>\n       ts' = ts'' @ tfm \\<and> \\<C>\n       \\<lparr>label := [tfn] @ label \\<C>\\<rparr> \\<turnstile> es : tf", "by (induction \"[e]\" \"(ts _> ts')\" arbitrary: ts ts' rule: b_e_typing.induct, auto)"], ["", "lemma b_e_type_if:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = If tf es1 es2\"\n  shows \"\\<exists>ts'' tfn tfm. tf = (tfn _> tfm) \\<and> (ts = ts''@tfn @ [T_i32]) \\<and> (ts' = ts''@tfm) \\<and>\n                        (\\<C>\\<lparr>label := [tfm] @ label \\<C>\\<rparr> \\<turnstile> es1 : tf) \\<and>\n                        (\\<C>\\<lparr>label := [tfm] @ label \\<C>\\<rparr> \\<turnstile> es2 : tf)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ts'' tfn tfm.\n       tf = tfn _> tfm \\<and>\n       ts = ts'' @ tfn @ [T_i32] \\<and>\n       ts' = ts'' @ tfm \\<and>\n       \\<C>\n       \\<lparr>label :=\n                 [tfm] @ label \\<C>\\<rparr> \\<turnstile> es1 : tf \\<and>\n       \\<C>\\<lparr>label := [tfm] @ label \\<C>\\<rparr> \\<turnstile> es2 : tf", "using assms"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e] : ts _> ts'\n  e = b_e.If tf es1 es2\n\ngoal (1 subgoal):\n 1. \\<exists>ts'' tfn tfm.\n       tf = tfn _> tfm \\<and>\n       ts = ts'' @ tfn @ [T_i32] \\<and>\n       ts' = ts'' @ tfm \\<and>\n       \\<C>\n       \\<lparr>label :=\n                 [tfm] @ label \\<C>\\<rparr> \\<turnstile> es1 : tf \\<and>\n       \\<C>\\<lparr>label := [tfm] @ label \\<C>\\<rparr> \\<turnstile> es2 : tf", "by (induction \"[e]\" \"(ts _> ts')\" arbitrary: ts ts' rule: b_e_typing.induct, auto)"], ["", "lemma b_e_type_br:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Br i\"\n        shows \"i < length(label \\<C>)\"\n              \"\\<exists>ts_c ts''. ts = ts_c @ ts'' \\<and> (label \\<C>)!i = ts''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length (label \\<C>) &&&\n    \\<exists>ts_c ts''. ts = ts_c @ ts'' \\<and> label \\<C> ! i = ts''", "using assms"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e] : ts _> ts'\n  e = Br i\n\ngoal (1 subgoal):\n 1. i < length (label \\<C>) &&&\n    \\<exists>ts_c ts''. ts = ts_c @ ts'' \\<and> label \\<C> ! i = ts''", "by (induction \"[e]\" \"(ts _> ts')\" arbitrary: ts ts' rule: b_e_typing.induct, auto)"], ["", "lemma b_e_type_br_if:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Br_if i\"\n        shows \"i < length(label \\<C>)\"\n              \"\\<exists>ts_c ts''. ts = ts_c @ ts'' @ [T_i32] \\<and> ts' = ts_c @ ts'' \\<and> (label \\<C>)!i = ts''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length (label \\<C>) &&&\n    \\<exists>ts_c ts''.\n       ts = ts_c @ ts'' @ [T_i32] \\<and>\n       ts' = ts_c @ ts'' \\<and> label \\<C> ! i = ts''", "using assms"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e] : ts _> ts'\n  e = Br_if i\n\ngoal (1 subgoal):\n 1. i < length (label \\<C>) &&&\n    \\<exists>ts_c ts''.\n       ts = ts_c @ ts'' @ [T_i32] \\<and>\n       ts' = ts_c @ ts'' \\<and> label \\<C> ! i = ts''", "by (induction \"[e]\" \"(ts _> ts')\" arbitrary: ts ts' rule: b_e_typing.induct, auto)"], ["", "lemma b_e_type_br_table:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Br_table is i\"\n  shows \"\\<exists>ts_c ts''. list_all (\\<lambda>i. i < length(label \\<C>) \\<and> (label \\<C>)!i = ts'') (is@[i]) \\<and> ts = ts_c @ ts''@[T_i32]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ts_c ts''.\n       list_all\n        (\\<lambda>i. i < length (label \\<C>) \\<and> label \\<C> ! i = ts'')\n        (is @ [i]) \\<and>\n       ts = ts_c @ ts'' @ [T_i32]", "using assms"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e] : ts _> ts'\n  e = Br_table is i\n\ngoal (1 subgoal):\n 1. \\<exists>ts_c ts''.\n       list_all\n        (\\<lambda>i. i < length (label \\<C>) \\<and> label \\<C> ! i = ts'')\n        (is @ [i]) \\<and>\n       ts = ts_c @ ts'' @ [T_i32]", "by (induction \"[e]\" \"(ts _> ts')\" arbitrary: ts ts' rule: b_e_typing.induct, fastforce+)"], ["", "lemma b_e_type_return:\n  assumes \"\\<C> \\<turnstile> [e] : (ts _> ts')\"\n          \"e = Return\"\n        shows \"\\<exists>ts_c ts''. ts = ts_c @ ts'' \\<and> (return \\<C>) = Some ts''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ts_c ts''. ts = ts_c @ ts'' \\<and> return \\<C> = Some ts''", "using assms"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e] : ts _> ts'\n  e = Return\n\ngoal (1 subgoal):\n 1. \\<exists>ts_c ts''. ts = ts_c @ ts'' \\<and> return \\<C> = Some ts''", "by (induction \"[e]\" \"(ts _> ts')\" arbitrary: ts ts' rule: b_e_typing.induct, auto)"], ["", "lemma b_e_type_comp:\n  assumes \"\\<C> \\<turnstile> es@[e] : (t1s _> t4s)\"\n  shows \"\\<exists>ts'. (\\<C> \\<turnstile> es : (t1s _> ts')) \\<and> (\\<C> \\<turnstile> [e] : (ts' _> t4s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ts'.\n       \\<C> \\<turnstile> es : t1s _> ts' \\<and>\n       \\<C> \\<turnstile> [e] : ts' _> t4s", "proof (cases es rule: List.rev_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. es = [] \\<Longrightarrow>\n    \\<exists>ts'.\n       \\<C> \\<turnstile> es : t1s _> ts' \\<and>\n       \\<C> \\<turnstile> [e] : ts' _> t4s\n 2. \\<And>ys y.\n       es = ys @ [y] \\<Longrightarrow>\n       \\<exists>ts'.\n          \\<C> \\<turnstile> es : t1s _> ts' \\<and>\n          \\<C> \\<turnstile> [e] : ts' _> t4s", "case Nil"], ["proof (state)\nthis:\n  es = []\n\ngoal (2 subgoals):\n 1. es = [] \\<Longrightarrow>\n    \\<exists>ts'.\n       \\<C> \\<turnstile> es : t1s _> ts' \\<and>\n       \\<C> \\<turnstile> [e] : ts' _> t4s\n 2. \\<And>ys y.\n       es = ys @ [y] \\<Longrightarrow>\n       \\<exists>ts'.\n          \\<C> \\<turnstile> es : t1s _> ts' \\<and>\n          \\<C> \\<turnstile> [e] : ts' _> t4s", "then"], ["proof (chain)\npicking this:\n  es = []", "show ?thesis"], ["proof (prove)\nusing this:\n  es = []\n\ngoal (1 subgoal):\n 1. \\<exists>ts'.\n       \\<C> \\<turnstile> es : t1s _> ts' \\<and>\n       \\<C> \\<turnstile> [e] : ts' _> t4s", "using assms b_e_typing.empty b_e_typing.weakening"], ["proof (prove)\nusing this:\n  es = []\n  \\<C> \\<turnstile> es @ [e] : t1s _> t4s\n  ?\\<C> \\<turnstile> [] : [] _> []\n  ?\\<C> \\<turnstile> ?es : ?t1s _> ?t2s \\<Longrightarrow>\n  ?\\<C> \\<turnstile> ?es : ?ts @ ?t1s _> ?ts @ ?t2s\n\ngoal (1 subgoal):\n 1. \\<exists>ts'.\n       \\<C> \\<turnstile> es : t1s _> ts' \\<and>\n       \\<C> \\<turnstile> [e] : ts' _> t4s", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>ts'.\n     \\<C> \\<turnstile> es : t1s _> ts' \\<and>\n     \\<C> \\<turnstile> [e] : ts' _> t4s\n\ngoal (1 subgoal):\n 1. \\<And>ys y.\n       es = ys @ [y] \\<Longrightarrow>\n       \\<exists>ts'.\n          \\<C> \\<turnstile> es : t1s _> ts' \\<and>\n          \\<C> \\<turnstile> [e] : ts' _> t4s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ys y.\n       es = ys @ [y] \\<Longrightarrow>\n       \\<exists>ts'.\n          \\<C> \\<turnstile> es : t1s _> ts' \\<and>\n          \\<C> \\<turnstile> [e] : ts' _> t4s", "case (snoc es' e')"], ["proof (state)\nthis:\n  es = es' @ [e']\n\ngoal (1 subgoal):\n 1. \\<And>ys y.\n       es = ys @ [y] \\<Longrightarrow>\n       \\<exists>ts'.\n          \\<C> \\<turnstile> es : t1s _> ts' \\<and>\n          \\<C> \\<turnstile> [e] : ts' _> t4s", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ts'.\n       \\<C> \\<turnstile> es : t1s _> ts' \\<and>\n       \\<C> \\<turnstile> [e] : ts' _> t4s", "using assms snoc b_e_typing.weakening"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> es @ [e] : t1s _> t4s\n  es = es' @ [e']\n  ?\\<C> \\<turnstile> ?es : ?t1s _> ?t2s \\<Longrightarrow>\n  ?\\<C> \\<turnstile> ?es : ?ts @ ?t1s _> ?ts @ ?t2s\n\ngoal (1 subgoal):\n 1. \\<exists>ts'.\n       \\<C> \\<turnstile> es : t1s _> ts' \\<and>\n       \\<C> \\<turnstile> [e] : ts' _> t4s", "by (induction \"es@[e]\" \"(t1s _> t4s)\" arbitrary: t1s t4s, fastforce+)"], ["proof (state)\nthis:\n  \\<exists>ts'.\n     \\<C> \\<turnstile> es : t1s _> ts' \\<and>\n     \\<C> \\<turnstile> [e] : ts' _> t4s\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Two special cases - useful for inductions over reduce. *)"], ["", "lemma b_e_type_comp2_unlift:\n  assumes \"\\<S>\\<bullet>\\<C> \\<turnstile> [$e1, $e2] : (t1s _> t2s)\"\n  shows \"\\<exists>ts'. (\\<C> \\<turnstile> [e1] : (t1s _> ts')) \\<and> (\\<C> \\<turnstile> [e2] : (ts' _> t2s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ts'.\n       \\<C> \\<turnstile> [e1] : t1s _> ts' \\<and>\n       \\<C> \\<turnstile> [e2] : ts' _> t2s", "using assms\n        unlift_b_e[of \\<S> \\<C> \"([e1, e2])\" \"(t1s _> t2s)\"]\n        b_e_type_comp[of \\<C> \"[e1]\" e2 t1s t2s]"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> [$e1, $e2] : t1s _> t2s\n  \\<S>\\<bullet>\\<C> \\<turnstile> $* [e1, e2] : t1s _> t2s \\<Longrightarrow>\n  \\<C> \\<turnstile> [e1, e2] : t1s _> t2s\n  \\<C> \\<turnstile> [e1] @ [e2] : t1s _> t2s \\<Longrightarrow>\n  \\<exists>ts'.\n     \\<C> \\<turnstile> [e1] : t1s _> ts' \\<and>\n     \\<C> \\<turnstile> [e2] : ts' _> t2s\n\ngoal (1 subgoal):\n 1. \\<exists>ts'.\n       \\<C> \\<turnstile> [e1] : t1s _> ts' \\<and>\n       \\<C> \\<turnstile> [e2] : ts' _> t2s", "by simp"], ["", "lemma b_e_type_comp2_relift:\n  assumes \"\\<C> \\<turnstile> [e1] : (t1s _> ts')\" \"\\<C> \\<turnstile> [e2] : (ts' _> t2s)\"\n  shows \"\\<S>\\<bullet>\\<C> \\<turnstile> [$e1, $e2] : (ts@t1s _> ts@t2s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C> \\<turnstile> [$e1, $e2] : ts @ t1s _> ts @ t2s", "using assms\n        b_e_typing.composition[OF assms]\n        e_typing_s_typing.intros(1)[of \\<C> \"[e1, e2]\" \"(t1s _> t2s)\"]\n        e_typing_s_typing.intros(3)[of \\<S> \\<C> \"([$e1,$e2])\" t1s t2s ts]"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [e1] : t1s _> ts'\n  \\<C> \\<turnstile> [e2] : ts' _> t2s\n  \\<C> \\<turnstile> [e1] @ [e2] : t1s _> t2s\n  \\<C> \\<turnstile> [e1, e2] : t1s _> t2s \\<Longrightarrow>\n  ?\\<S>\\<bullet>\\<C> \\<turnstile> $* [e1, e2] : t1s _> t2s\n  \\<S>\\<bullet>\\<C> \\<turnstile> [$e1, $e2] : t1s _> t2s \\<Longrightarrow>\n  \\<S>\\<bullet>\\<C> \\<turnstile> [$e1, $e2] : ts @ t1s _> ts @ t2s\n\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C> \\<turnstile> [$e1, $e2] : ts @ t1s _> ts @ t2s", "by simp"], ["", "lemma b_e_type_value2:\n  assumes \"\\<C> \\<turnstile> [C v1, C v2] : (t1s _> t2s)\"\n  shows \"t2s = t1s @ [typeof v1, typeof v2]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t2s = t1s @ [typeof v1, typeof v2]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. t2s = t1s @ [typeof v1, typeof v2]", "obtain ts' where ts'_def:\"\\<C> \\<turnstile> [C v1] : (t1s _> ts')\"\n                           \"\\<C> \\<turnstile> [C v2] : (ts' _> t2s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ts'.\n        \\<lbrakk>\\<C> \\<turnstile> [C v1] : t1s _> ts';\n         \\<C> \\<turnstile> [C v2] : ts' _> t2s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using b_e_type_comp assms"], ["proof (prove)\nusing this:\n  ?\\<C> \\<turnstile> ?es @ [?e] : ?t1s _> ?t4s \\<Longrightarrow>\n  \\<exists>ts'.\n     ?\\<C> \\<turnstile> ?es : ?t1s _> ts' \\<and>\n     ?\\<C> \\<turnstile> [?e] : ts' _> ?t4s\n  \\<C> \\<turnstile> [C v1, C v2] : t1s _> t2s\n\ngoal (1 subgoal):\n 1. (\\<And>ts'.\n        \\<lbrakk>\\<C> \\<turnstile> [C v1] : t1s _> ts';\n         \\<C> \\<turnstile> [C v2] : ts' _> t2s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis append_butlast_last_id butlast.simps(2) last_ConsL last_ConsR list.distinct(1))"], ["proof (state)\nthis:\n  \\<C> \\<turnstile> [C v1] : t1s _> ts'\n  \\<C> \\<turnstile> [C v2] : ts' _> t2s\n\ngoal (1 subgoal):\n 1. t2s = t1s @ [typeof v1, typeof v2]", "have \"ts' = t1s @ [typeof v1]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts' = t1s @ [typeof v1]", "using b_e_type_value ts'_def(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<C> \\<turnstile> [?e] : ?ts _> ?ts'; ?e = C ?v\\<rbrakk>\n  \\<Longrightarrow> ?ts' = ?ts @ [typeof ?v]\n  \\<C> \\<turnstile> [C v1] : t1s _> ts'\n\ngoal (1 subgoal):\n 1. ts' = t1s @ [typeof v1]", "by fastforce"], ["proof (state)\nthis:\n  ts' = t1s @ [typeof v1]\n\ngoal (1 subgoal):\n 1. t2s = t1s @ [typeof v1, typeof v2]", "thus ?thesis"], ["proof (prove)\nusing this:\n  ts' = t1s @ [typeof v1]\n\ngoal (1 subgoal):\n 1. t2s = t1s @ [typeof v1, typeof v2]", "using b_e_type_value ts'_def(2)"], ["proof (prove)\nusing this:\n  ts' = t1s @ [typeof v1]\n  \\<lbrakk>?\\<C> \\<turnstile> [?e] : ?ts _> ?ts'; ?e = C ?v\\<rbrakk>\n  \\<Longrightarrow> ?ts' = ?ts @ [typeof ?v]\n  \\<C> \\<turnstile> [C v2] : ts' _> t2s\n\ngoal (1 subgoal):\n 1. t2s = t1s @ [typeof v1, typeof v2]", "by fastforce"], ["proof (state)\nthis:\n  t2s = t1s @ [typeof v1, typeof v2]\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Lifting the previous results to all expressions. *)"], ["", "lemma e_type_comp:\n  assumes \"\\<S>\\<bullet>\\<C> \\<turnstile> es@[e] : (t1s _> t3s)\"\n  shows \"\\<exists>ts'. (\\<S>\\<bullet>\\<C> \\<turnstile> es : (t1s _> ts')) \\<and> (\\<S>\\<bullet>\\<C> \\<turnstile> [e] : (ts' _> t3s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ts'.\n       \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s", "proof (cases es rule: List.rev_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. es = [] \\<Longrightarrow>\n    \\<exists>ts'.\n       \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 2. \\<And>ys y.\n       es = ys @ [y] \\<Longrightarrow>\n       \\<exists>ts'.\n          \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n          \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s", "case Nil"], ["proof (state)\nthis:\n  es = []\n\ngoal (2 subgoals):\n 1. es = [] \\<Longrightarrow>\n    \\<exists>ts'.\n       \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 2. \\<And>ys y.\n       es = ys @ [y] \\<Longrightarrow>\n       \\<exists>ts'.\n          \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n          \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s", "thus ?thesis"], ["proof (prove)\nusing this:\n  es = []\n\ngoal (1 subgoal):\n 1. \\<exists>ts'.\n       \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s", "using assms e_typing_s_typing.intros(1)"], ["proof (prove)\nusing this:\n  es = []\n  \\<S>\\<bullet>\\<C> \\<turnstile> es @ [e] : t1s _> t3s\n  ?\\<C> \\<turnstile> ?b_es : ?tf \\<Longrightarrow>\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> $* ?b_es : ?tf\n\ngoal (1 subgoal):\n 1. \\<exists>ts'.\n       \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s", "by (metis append_Nil b_e_type_empty list.simps(8))"], ["proof (state)\nthis:\n  \\<exists>ts'.\n     \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n\ngoal (1 subgoal):\n 1. \\<And>ys y.\n       es = ys @ [y] \\<Longrightarrow>\n       \\<exists>ts'.\n          \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n          \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ys y.\n       es = ys @ [y] \\<Longrightarrow>\n       \\<exists>ts'.\n          \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n          \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s", "case (snoc es' e')"], ["proof (state)\nthis:\n  es = es' @ [e']\n\ngoal (1 subgoal):\n 1. \\<And>ys y.\n       es = ys @ [y] \\<Longrightarrow>\n       \\<exists>ts'.\n          \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n          \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ts'.\n       \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s", "using assms snoc"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es @ [e] : t1s _> t3s\n  es = es' @ [e']\n\ngoal (1 subgoal):\n 1. \\<exists>ts'.\n       \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s", "proof (induction \"es@[e]\" \"(t1s _> t3s)\" arbitrary: t1s t3s)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<C> b_es \\<S> t1s t3s.\n       \\<lbrakk>\\<C> \\<turnstile> b_es : t1s _> t3s; $* b_es = es @ [e];\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 2. \\<And>\\<S> \\<C> esa t1s t2s ea t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [ea] : t2s _> t3s;\n        \\<lbrakk>[ea] = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : t2s _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s;\n        esa @ [ea] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 3. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es @ [e] : t1s _> t2s;\n        es = es' @ [e'] \\<Longrightarrow>\n        \\<exists>ts'.\n           \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : ts @\n                          t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts @\n                                  t2s\n 4. \\<And>\\<S> \\<C> t1s t3s.\n       \\<lbrakk>[Trap] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 5. \\<And>\\<S> ts i vs esa n \\<C>.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;esa : ts;\n        ?P2.10 \\<S> (Some ts) i vs esa ts; length ts = n;\n        [Local n i vs esa] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts\n 6. \\<And>\\<S> cl \\<C> t1s t3s.\n       \\<lbrakk>cl_typing \\<S> cl (t1s _> t3s); [Callcl cl] = es @ [e];\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 7. \\<And>\\<S> \\<C> e0s ts t2s esa n.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> e0s : ts _> t2s;\n        \\<lbrakk>e0s = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> esa : [] _> t2s;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C>\n                             \\<lparr>label :=\n [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C>\n                             \\<lparr>label :=\n [ts] @ label \\<C>\\<rparr> \\<turnstile> [e] : ts' _> t2s;\n        length ts = n; [Label n e0s esa] = es @ [e];\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s\n 8. \\<And>i \\<S> tvs vs \\<C> rs esa ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs i vs esa ts", "case (1 \\<C> b_es \\<S>)"], ["proof (state)\nthis:\n  \\<C> \\<turnstile> b_es : t1s _> t3s\n  $* b_es = es @ [e]\n  es = es' @ [e']\n\ngoal (8 subgoals):\n 1. \\<And>\\<C> b_es \\<S> t1s t3s.\n       \\<lbrakk>\\<C> \\<turnstile> b_es : t1s _> t3s; $* b_es = es @ [e];\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 2. \\<And>\\<S> \\<C> esa t1s t2s ea t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [ea] : t2s _> t3s;\n        \\<lbrakk>[ea] = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : t2s _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s;\n        esa @ [ea] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 3. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es @ [e] : t1s _> t2s;\n        es = es' @ [e'] \\<Longrightarrow>\n        \\<exists>ts'.\n           \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : ts @\n                          t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts @\n                                  t2s\n 4. \\<And>\\<S> \\<C> t1s t3s.\n       \\<lbrakk>[Trap] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 5. \\<And>\\<S> ts i vs esa n \\<C>.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;esa : ts;\n        ?P2.10 \\<S> (Some ts) i vs esa ts; length ts = n;\n        [Local n i vs esa] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts\n 6. \\<And>\\<S> cl \\<C> t1s t3s.\n       \\<lbrakk>cl_typing \\<S> cl (t1s _> t3s); [Callcl cl] = es @ [e];\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 7. \\<And>\\<S> \\<C> e0s ts t2s esa n.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> e0s : ts _> t2s;\n        \\<lbrakk>e0s = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> esa : [] _> t2s;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C>\n                             \\<lparr>label :=\n [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C>\n                             \\<lparr>label :=\n [ts] @ label \\<C>\\<rparr> \\<turnstile> [e] : ts' _> t2s;\n        length ts = n; [Label n e0s esa] = es @ [e];\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s\n 8. \\<And>i \\<S> tvs vs \\<C> rs esa ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs i vs esa ts", "obtain es'' e'' where b_e_defs:\"($* (es'' @ [e''])) = ($* b_es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>es'' e''.\n        $* es'' @ [e''] = $* b_es \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using 1(1,2)"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> b_es : t1s _> t3s\n  $* b_es = es @ [e]\n\ngoal (1 subgoal):\n 1. (\\<And>es'' e''.\n        $* es'' @ [e''] = $* b_es \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis Nil_is_map_conv append_is_Nil_conv not_Cons_self2 rev_exhaust)"], ["proof (state)\nthis:\n  $* es'' @ [e''] = $* b_es\n\ngoal (8 subgoals):\n 1. \\<And>\\<C> b_es \\<S> t1s t3s.\n       \\<lbrakk>\\<C> \\<turnstile> b_es : t1s _> t3s; $* b_es = es @ [e];\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 2. \\<And>\\<S> \\<C> esa t1s t2s ea t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [ea] : t2s _> t3s;\n        \\<lbrakk>[ea] = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : t2s _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s;\n        esa @ [ea] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 3. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es @ [e] : t1s _> t2s;\n        es = es' @ [e'] \\<Longrightarrow>\n        \\<exists>ts'.\n           \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : ts @\n                          t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts @\n                                  t2s\n 4. \\<And>\\<S> \\<C> t1s t3s.\n       \\<lbrakk>[Trap] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 5. \\<And>\\<S> ts i vs esa n \\<C>.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;esa : ts;\n        ?P2.10 \\<S> (Some ts) i vs esa ts; length ts = n;\n        [Local n i vs esa] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts\n 6. \\<And>\\<S> cl \\<C> t1s t3s.\n       \\<lbrakk>cl_typing \\<S> cl (t1s _> t3s); [Callcl cl] = es @ [e];\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 7. \\<And>\\<S> \\<C> e0s ts t2s esa n.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> e0s : ts _> t2s;\n        \\<lbrakk>e0s = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> esa : [] _> t2s;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C>\n                             \\<lparr>label :=\n [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C>\n                             \\<lparr>label :=\n [ts] @ label \\<C>\\<rparr> \\<turnstile> [e] : ts' _> t2s;\n        length ts = n; [Label n e0s esa] = es @ [e];\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s\n 8. \\<And>i \\<S> tvs vs \\<C> rs esa ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs i vs esa ts", "hence \"($*es'') = es\" \"($e'') = e\""], ["proof (prove)\nusing this:\n  $* es'' @ [e''] = $* b_es\n\ngoal (1 subgoal):\n 1. $* es'' = es &&& $e'' = e", "using 1(2) inj_basic map_injective"], ["proof (prove)\nusing this:\n  $* es'' @ [e''] = $* b_es\n  $* b_es = es @ [e]\n  inj Basic\n  \\<lbrakk>map ?f ?xs = map ?f ?ys; inj ?f\\<rbrakk>\n  \\<Longrightarrow> ?xs = ?ys\n\ngoal (1 subgoal):\n 1. $* es'' = es &&& $e'' = e", "by auto"], ["proof (state)\nthis:\n  $* es'' = es\n  $e'' = e\n\ngoal (8 subgoals):\n 1. \\<And>\\<C> b_es \\<S> t1s t3s.\n       \\<lbrakk>\\<C> \\<turnstile> b_es : t1s _> t3s; $* b_es = es @ [e];\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 2. \\<And>\\<S> \\<C> esa t1s t2s ea t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [ea] : t2s _> t3s;\n        \\<lbrakk>[ea] = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : t2s _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s;\n        esa @ [ea] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 3. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es @ [e] : t1s _> t2s;\n        es = es' @ [e'] \\<Longrightarrow>\n        \\<exists>ts'.\n           \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : ts @\n                          t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts @\n                                  t2s\n 4. \\<And>\\<S> \\<C> t1s t3s.\n       \\<lbrakk>[Trap] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 5. \\<And>\\<S> ts i vs esa n \\<C>.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;esa : ts;\n        ?P2.10 \\<S> (Some ts) i vs esa ts; length ts = n;\n        [Local n i vs esa] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts\n 6. \\<And>\\<S> cl \\<C> t1s t3s.\n       \\<lbrakk>cl_typing \\<S> cl (t1s _> t3s); [Callcl cl] = es @ [e];\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 7. \\<And>\\<S> \\<C> e0s ts t2s esa n.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> e0s : ts _> t2s;\n        \\<lbrakk>e0s = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> esa : [] _> t2s;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C>\n                             \\<lparr>label :=\n [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C>\n                             \\<lparr>label :=\n [ts] @ label \\<C>\\<rparr> \\<turnstile> [e] : ts' _> t2s;\n        length ts = n; [Label n e0s esa] = es @ [e];\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s\n 8. \\<And>i \\<S> tvs vs \\<C> rs esa ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs i vs esa ts", "moreover"], ["proof (state)\nthis:\n  $* es'' = es\n  $e'' = e\n\ngoal (8 subgoals):\n 1. \\<And>\\<C> b_es \\<S> t1s t3s.\n       \\<lbrakk>\\<C> \\<turnstile> b_es : t1s _> t3s; $* b_es = es @ [e];\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 2. \\<And>\\<S> \\<C> esa t1s t2s ea t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [ea] : t2s _> t3s;\n        \\<lbrakk>[ea] = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : t2s _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s;\n        esa @ [ea] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 3. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es @ [e] : t1s _> t2s;\n        es = es' @ [e'] \\<Longrightarrow>\n        \\<exists>ts'.\n           \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : ts @\n                          t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts @\n                                  t2s\n 4. \\<And>\\<S> \\<C> t1s t3s.\n       \\<lbrakk>[Trap] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 5. \\<And>\\<S> ts i vs esa n \\<C>.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;esa : ts;\n        ?P2.10 \\<S> (Some ts) i vs esa ts; length ts = n;\n        [Local n i vs esa] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts\n 6. \\<And>\\<S> cl \\<C> t1s t3s.\n       \\<lbrakk>cl_typing \\<S> cl (t1s _> t3s); [Callcl cl] = es @ [e];\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 7. \\<And>\\<S> \\<C> e0s ts t2s esa n.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> e0s : ts _> t2s;\n        \\<lbrakk>e0s = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> esa : [] _> t2s;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C>\n                             \\<lparr>label :=\n [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C>\n                             \\<lparr>label :=\n [ts] @ label \\<C>\\<rparr> \\<turnstile> [e] : ts' _> t2s;\n        length ts = n; [Label n e0s esa] = es @ [e];\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s\n 8. \\<And>i \\<S> tvs vs \\<C> rs esa ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs i vs esa ts", "have \"\\<C> \\<turnstile> (es'' @ [e'']) : (t1s _> t3s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> es'' @ [e''] : t1s _> t3s", "using 1(1)"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> b_es : t1s _> t3s\n\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> es'' @ [e''] : t1s _> t3s", "using inj_basic map_injective b_e_defs"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> b_es : t1s _> t3s\n  inj Basic\n  \\<lbrakk>map ?f ?xs = map ?f ?ys; inj ?f\\<rbrakk>\n  \\<Longrightarrow> ?xs = ?ys\n  $* es'' @ [e''] = $* b_es\n\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> es'' @ [e''] : t1s _> t3s", "by blast"], ["proof (state)\nthis:\n  \\<C> \\<turnstile> es'' @ [e''] : t1s _> t3s\n\ngoal (8 subgoals):\n 1. \\<And>\\<C> b_es \\<S> t1s t3s.\n       \\<lbrakk>\\<C> \\<turnstile> b_es : t1s _> t3s; $* b_es = es @ [e];\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 2. \\<And>\\<S> \\<C> esa t1s t2s ea t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [ea] : t2s _> t3s;\n        \\<lbrakk>[ea] = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : t2s _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s;\n        esa @ [ea] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 3. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es @ [e] : t1s _> t2s;\n        es = es' @ [e'] \\<Longrightarrow>\n        \\<exists>ts'.\n           \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : ts @\n                          t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts @\n                                  t2s\n 4. \\<And>\\<S> \\<C> t1s t3s.\n       \\<lbrakk>[Trap] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 5. \\<And>\\<S> ts i vs esa n \\<C>.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;esa : ts;\n        ?P2.10 \\<S> (Some ts) i vs esa ts; length ts = n;\n        [Local n i vs esa] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts\n 6. \\<And>\\<S> cl \\<C> t1s t3s.\n       \\<lbrakk>cl_typing \\<S> cl (t1s _> t3s); [Callcl cl] = es @ [e];\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 7. \\<And>\\<S> \\<C> e0s ts t2s esa n.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> e0s : ts _> t2s;\n        \\<lbrakk>e0s = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> esa : [] _> t2s;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C>\n                             \\<lparr>label :=\n [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C>\n                             \\<lparr>label :=\n [ts] @ label \\<C>\\<rparr> \\<turnstile> [e] : ts' _> t2s;\n        length ts = n; [Label n e0s esa] = es @ [e];\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s\n 8. \\<And>i \\<S> tvs vs \\<C> rs esa ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs i vs esa ts", "then"], ["proof (chain)\npicking this:\n  \\<C> \\<turnstile> es'' @ [e''] : t1s _> t3s", "obtain t2s where \"\\<C> \\<turnstile> es'' : (t1s _> t2s)\" \"\\<C> \\<turnstile> [e''] : (t2s _> t3s)\""], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> es'' @ [e''] : t1s _> t3s\n\ngoal (1 subgoal):\n 1. (\\<And>t2s.\n        \\<lbrakk>\\<C> \\<turnstile> es'' : t1s _> t2s;\n         \\<C> \\<turnstile> [e''] : t2s _> t3s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using b_e_type_comp"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> es'' @ [e''] : t1s _> t3s\n  ?\\<C> \\<turnstile> ?es @ [?e] : ?t1s _> ?t4s \\<Longrightarrow>\n  \\<exists>ts'.\n     ?\\<C> \\<turnstile> ?es : ?t1s _> ts' \\<and>\n     ?\\<C> \\<turnstile> [?e] : ts' _> ?t4s\n\ngoal (1 subgoal):\n 1. (\\<And>t2s.\n        \\<lbrakk>\\<C> \\<turnstile> es'' : t1s _> t2s;\n         \\<C> \\<turnstile> [e''] : t2s _> t3s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<C> \\<turnstile> es'' : t1s _> t2s\n  \\<C> \\<turnstile> [e''] : t2s _> t3s\n\ngoal (8 subgoals):\n 1. \\<And>\\<C> b_es \\<S> t1s t3s.\n       \\<lbrakk>\\<C> \\<turnstile> b_es : t1s _> t3s; $* b_es = es @ [e];\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 2. \\<And>\\<S> \\<C> esa t1s t2s ea t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [ea] : t2s _> t3s;\n        \\<lbrakk>[ea] = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : t2s _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s;\n        esa @ [ea] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 3. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es @ [e] : t1s _> t2s;\n        es = es' @ [e'] \\<Longrightarrow>\n        \\<exists>ts'.\n           \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : ts @\n                          t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts @\n                                  t2s\n 4. \\<And>\\<S> \\<C> t1s t3s.\n       \\<lbrakk>[Trap] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 5. \\<And>\\<S> ts i vs esa n \\<C>.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;esa : ts;\n        ?P2.10 \\<S> (Some ts) i vs esa ts; length ts = n;\n        [Local n i vs esa] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts\n 6. \\<And>\\<S> cl \\<C> t1s t3s.\n       \\<lbrakk>cl_typing \\<S> cl (t1s _> t3s); [Callcl cl] = es @ [e];\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 7. \\<And>\\<S> \\<C> e0s ts t2s esa n.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> e0s : ts _> t2s;\n        \\<lbrakk>e0s = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> esa : [] _> t2s;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C>\n                             \\<lparr>label :=\n [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C>\n                             \\<lparr>label :=\n [ts] @ label \\<C>\\<rparr> \\<turnstile> [e] : ts' _> t2s;\n        length ts = n; [Label n e0s esa] = es @ [e];\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s\n 8. \\<And>i \\<S> tvs vs \\<C> rs esa ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs i vs esa ts", "ultimately"], ["proof (chain)\npicking this:\n  $* es'' = es\n  $e'' = e\n  \\<C> \\<turnstile> es'' : t1s _> t2s\n  \\<C> \\<turnstile> [e''] : t2s _> t3s", "show ?case"], ["proof (prove)\nusing this:\n  $* es'' = es\n  $e'' = e\n  \\<C> \\<turnstile> es'' : t1s _> t2s\n  \\<C> \\<turnstile> [e''] : t2s _> t3s\n\ngoal (1 subgoal):\n 1. \\<exists>ts'.\n       \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s", "using e_typing_s_typing.intros(1)"], ["proof (prove)\nusing this:\n  $* es'' = es\n  $e'' = e\n  \\<C> \\<turnstile> es'' : t1s _> t2s\n  \\<C> \\<turnstile> [e''] : t2s _> t3s\n  ?\\<C> \\<turnstile> ?b_es : ?tf \\<Longrightarrow>\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> $* ?b_es : ?tf\n\ngoal (1 subgoal):\n 1. \\<exists>ts'.\n       \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>ts'.\n     \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n\ngoal (7 subgoals):\n 1. \\<And>\\<S> \\<C> esa t1s t2s ea t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [ea] : t2s _> t3s;\n        \\<lbrakk>[ea] = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : t2s _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s;\n        esa @ [ea] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 2. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es @ [e] : t1s _> t2s;\n        es = es' @ [e'] \\<Longrightarrow>\n        \\<exists>ts'.\n           \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : ts @\n                          t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts @\n                                  t2s\n 3. \\<And>\\<S> \\<C> t1s t3s.\n       \\<lbrakk>[Trap] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 4. \\<And>\\<S> ts i vs esa n \\<C>.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;esa : ts;\n        ?P2.10 \\<S> (Some ts) i vs esa ts; length ts = n;\n        [Local n i vs esa] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts\n 5. \\<And>\\<S> cl \\<C> t1s t3s.\n       \\<lbrakk>cl_typing \\<S> cl (t1s _> t3s); [Callcl cl] = es @ [e];\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 6. \\<And>\\<S> \\<C> e0s ts t2s esa n.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> e0s : ts _> t2s;\n        \\<lbrakk>e0s = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> esa : [] _> t2s;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C>\n                             \\<lparr>label :=\n [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C>\n                             \\<lparr>label :=\n [ts] @ label \\<C>\\<rparr> \\<turnstile> [e] : ts' _> t2s;\n        length ts = n; [Label n e0s esa] = es @ [e];\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s\n 7. \\<And>i \\<S> tvs vs \\<C> rs esa ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs i vs esa ts", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<S> \\<C> esa t1s t2s ea t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [ea] : t2s _> t3s;\n        \\<lbrakk>[ea] = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : t2s _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s;\n        esa @ [ea] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 2. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es @ [e] : t1s _> t2s;\n        es = es' @ [e'] \\<Longrightarrow>\n        \\<exists>ts'.\n           \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : ts @\n                          t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts @\n                                  t2s\n 3. \\<And>\\<S> \\<C> t1s t3s.\n       \\<lbrakk>[Trap] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 4. \\<And>\\<S> ts i vs esa n \\<C>.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;esa : ts;\n        ?P2.10 \\<S> (Some ts) i vs esa ts; length ts = n;\n        [Local n i vs esa] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts\n 5. \\<And>\\<S> cl \\<C> t1s t3s.\n       \\<lbrakk>cl_typing \\<S> cl (t1s _> t3s); [Callcl cl] = es @ [e];\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 6. \\<And>\\<S> \\<C> e0s ts t2s esa n.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> e0s : ts _> t2s;\n        \\<lbrakk>e0s = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> esa : [] _> t2s;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C>\n                             \\<lparr>label :=\n [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C>\n                             \\<lparr>label :=\n [ts] @ label \\<C>\\<rparr> \\<turnstile> [e] : ts' _> t2s;\n        length ts = n; [Label n e0s esa] = es @ [e];\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s\n 7. \\<And>i \\<S> tvs vs \\<C> rs esa ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs i vs esa ts", "case (3 \\<S> \\<C> t1s t2s ts)"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es @ [e] : t1s _> t2s\n  es = es' @ [e'] \\<Longrightarrow>\n  \\<exists>ts'.\n     \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s\n  es = es' @ [e']\n\ngoal (7 subgoals):\n 1. \\<And>\\<S> \\<C> esa t1s t2s ea t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [ea] : t2s _> t3s;\n        \\<lbrakk>[ea] = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : t2s _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s;\n        esa @ [ea] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 2. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es @ [e] : t1s _> t2s;\n        es = es' @ [e'] \\<Longrightarrow>\n        \\<exists>ts'.\n           \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : ts @\n                          t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts @\n                                  t2s\n 3. \\<And>\\<S> \\<C> t1s t3s.\n       \\<lbrakk>[Trap] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 4. \\<And>\\<S> ts i vs esa n \\<C>.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;esa : ts;\n        ?P2.10 \\<S> (Some ts) i vs esa ts; length ts = n;\n        [Local n i vs esa] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts\n 5. \\<And>\\<S> cl \\<C> t1s t3s.\n       \\<lbrakk>cl_typing \\<S> cl (t1s _> t3s); [Callcl cl] = es @ [e];\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 6. \\<And>\\<S> \\<C> e0s ts t2s esa n.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> e0s : ts _> t2s;\n        \\<lbrakk>e0s = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> esa : [] _> t2s;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C>\n                             \\<lparr>label :=\n [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C>\n                             \\<lparr>label :=\n [ts] @ label \\<C>\\<rparr> \\<turnstile> [e] : ts' _> t2s;\n        length ts = n; [Label n e0s esa] = es @ [e];\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s\n 7. \\<And>i \\<S> tvs vs \\<C> rs esa ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs i vs esa ts", "thus ?case"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es @ [e] : t1s _> t2s\n  es = es' @ [e'] \\<Longrightarrow>\n  \\<exists>ts'.\n     \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s\n  es = es' @ [e']\n\ngoal (1 subgoal):\n 1. \\<exists>ts'.\n       \\<S>\\<bullet>\\<C> \\<turnstile> es : ts @ t1s _> ts' \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts @ t2s", "using e_typing_s_typing.intros(3)"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es @ [e] : t1s _> t2s\n  es = es' @ [e'] \\<Longrightarrow>\n  \\<exists>ts'.\n     \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s\n  es = es' @ [e']\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> ?es : ?t1s _> ?t2s \\<Longrightarrow>\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> ?es : ?ts @ ?t1s _> ?ts @ ?t2s\n\ngoal (1 subgoal):\n 1. \\<exists>ts'.\n       \\<S>\\<bullet>\\<C> \\<turnstile> es : ts @ t1s _> ts' \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts @ t2s", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>ts'.\n     \\<S>\\<bullet>\\<C> \\<turnstile> es : ts @ t1s _> ts' \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts @ t2s\n\ngoal (6 subgoals):\n 1. \\<And>\\<S> \\<C> esa t1s t2s ea t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [ea] : t2s _> t3s;\n        \\<lbrakk>[ea] = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : t2s _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s;\n        esa @ [ea] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 2. \\<And>\\<S> \\<C> t1s t3s.\n       \\<lbrakk>[Trap] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 3. \\<And>\\<S> ts i vs esa n \\<C>.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;esa : ts;\n        ?P2.10 \\<S> (Some ts) i vs esa ts; length ts = n;\n        [Local n i vs esa] = es @ [e]; es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts\n 4. \\<And>\\<S> cl \\<C> t1s t3s.\n       \\<lbrakk>cl_typing \\<S> cl (t1s _> t3s); [Callcl cl] = es @ [e];\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n 5. \\<And>\\<S> \\<C> e0s ts t2s esa n.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> e0s : ts _> t2s;\n        \\<lbrakk>e0s = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> esa : [] _> t2s;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C>\n                             \\<lparr>label :=\n [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C>\n                             \\<lparr>label :=\n [ts] @ label \\<C>\\<rparr> \\<turnstile> [e] : ts' _> t2s;\n        length ts = n; [Label n e0s esa] = es @ [e];\n        es = es' @ [e']\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts'.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t2s\n 6. \\<And>i \\<S> tvs vs \\<C> rs esa ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        \\<lbrakk>esa = es @ [e]; es = es' @ [e']\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ts'.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts' \\<and>\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> ts;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs i vs esa ts", "qed auto"], ["proof (state)\nthis:\n  \\<exists>ts'.\n     \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts' _> t3s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma e_type_comp_conc:\n  assumes \"\\<S>\\<bullet>\\<C> \\<turnstile> es : (t1s _> t2s)\"\n          \"\\<S>\\<bullet>\\<C> \\<turnstile> es' : (t2s _> t3s)\"\n  shows \"\\<S>\\<bullet>\\<C> \\<turnstile> es@es' : (t1s _> t3s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C> \\<turnstile> es @ es' : t1s _> t3s", "using assms(2)"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es' : t2s _> t3s\n\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C> \\<turnstile> es @ es' : t1s _> t3s", "proof (induction es' arbitrary: t3s rule: List.rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t3s.\n       \\<S>\\<bullet>\\<C> \\<turnstile> [] : t2s _> t3s \\<Longrightarrow>\n       \\<S>\\<bullet>\\<C> \\<turnstile> es @ [] : t1s _> t3s\n 2. \\<And>x xs t3s.\n       \\<lbrakk>\\<And>t3s.\n                   \\<S>\\<bullet>\\<C> \\<turnstile> xs : t2s _> t3s \\<Longrightarrow>\n                   \\<S>\\<bullet>\\<C> \\<turnstile> es @ xs : t1s _> t3s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : t2s _> t3s\\<rbrakk>\n       \\<Longrightarrow> \\<S>\\<bullet>\\<C> \\<turnstile> es @\n                  xs @ [x] : t1s _> t3s", "case Nil"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> [] : t2s _> t3s\n\ngoal (2 subgoals):\n 1. \\<And>t3s.\n       \\<S>\\<bullet>\\<C> \\<turnstile> [] : t2s _> t3s \\<Longrightarrow>\n       \\<S>\\<bullet>\\<C> \\<turnstile> es @ [] : t1s _> t3s\n 2. \\<And>x xs t3s.\n       \\<lbrakk>\\<And>t3s.\n                   \\<S>\\<bullet>\\<C> \\<turnstile> xs : t2s _> t3s \\<Longrightarrow>\n                   \\<S>\\<bullet>\\<C> \\<turnstile> es @ xs : t1s _> t3s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : t2s _> t3s\\<rbrakk>\n       \\<Longrightarrow> \\<S>\\<bullet>\\<C> \\<turnstile> es @\n                  xs @ [x] : t1s _> t3s", "hence \"t2s = t3s\""], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> [] : t2s _> t3s\n\ngoal (1 subgoal):\n 1. t2s = t3s", "using unlift_b_e[of _ _ \"[]\"] b_e_type_empty[of _ t2s t3s]"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> [] : t2s _> t3s\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> $* [] : ?tf \\<Longrightarrow>\n  ?\\<C> \\<turnstile> [] : ?tf\n  ?\\<C> \\<turnstile> [] : t2s _> t3s = (t2s = t3s)\n\ngoal (1 subgoal):\n 1. t2s = t3s", "by fastforce"], ["proof (state)\nthis:\n  t2s = t3s\n\ngoal (2 subgoals):\n 1. \\<And>t3s.\n       \\<S>\\<bullet>\\<C> \\<turnstile> [] : t2s _> t3s \\<Longrightarrow>\n       \\<S>\\<bullet>\\<C> \\<turnstile> es @ [] : t1s _> t3s\n 2. \\<And>x xs t3s.\n       \\<lbrakk>\\<And>t3s.\n                   \\<S>\\<bullet>\\<C> \\<turnstile> xs : t2s _> t3s \\<Longrightarrow>\n                   \\<S>\\<bullet>\\<C> \\<turnstile> es @ xs : t1s _> t3s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : t2s _> t3s\\<rbrakk>\n       \\<Longrightarrow> \\<S>\\<bullet>\\<C> \\<turnstile> es @\n                  xs @ [x] : t1s _> t3s", "then"], ["proof (chain)\npicking this:\n  t2s = t3s", "show ?case"], ["proof (prove)\nusing this:\n  t2s = t3s\n\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C> \\<turnstile> es @ [] : t1s _> t3s", "using Nil assms(1) e_typing_s_typing.intros(2)"], ["proof (prove)\nusing this:\n  t2s = t3s\n  \\<S>\\<bullet>\\<C> \\<turnstile> [] : t2s _> t3s\n  \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> t2s\n  \\<lbrakk>?\\<S>\\<bullet>?\\<C> \\<turnstile> ?es : ?t1s _> ?t2s;\n   ?\\<S>\\<bullet>?\\<C> \\<turnstile> [?e] : ?t2s _> ?t3s\\<rbrakk>\n  \\<Longrightarrow> ?\\<S>\\<bullet>?\\<C> \\<turnstile> ?es @\n               [?e] : ?t1s _> ?t3s\n\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C> \\<turnstile> es @ [] : t1s _> t3s", "by fastforce"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es @ [] : t1s _> t3s\n\ngoal (1 subgoal):\n 1. \\<And>x xs t3s.\n       \\<lbrakk>\\<And>t3s.\n                   \\<S>\\<bullet>\\<C> \\<turnstile> xs : t2s _> t3s \\<Longrightarrow>\n                   \\<S>\\<bullet>\\<C> \\<turnstile> es @ xs : t1s _> t3s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : t2s _> t3s\\<rbrakk>\n       \\<Longrightarrow> \\<S>\\<bullet>\\<C> \\<turnstile> es @\n                  xs @ [x] : t1s _> t3s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs t3s.\n       \\<lbrakk>\\<And>t3s.\n                   \\<S>\\<bullet>\\<C> \\<turnstile> xs : t2s _> t3s \\<Longrightarrow>\n                   \\<S>\\<bullet>\\<C> \\<turnstile> es @ xs : t1s _> t3s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : t2s _> t3s\\<rbrakk>\n       \\<Longrightarrow> \\<S>\\<bullet>\\<C> \\<turnstile> es @\n                  xs @ [x] : t1s _> t3s", "case (snoc x xs)"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> xs : t2s _> ?t3s \\<Longrightarrow>\n  \\<S>\\<bullet>\\<C> \\<turnstile> es @ xs : t1s _> ?t3s\n  \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : t2s _> t3s\n\ngoal (1 subgoal):\n 1. \\<And>x xs t3s.\n       \\<lbrakk>\\<And>t3s.\n                   \\<S>\\<bullet>\\<C> \\<turnstile> xs : t2s _> t3s \\<Longrightarrow>\n                   \\<S>\\<bullet>\\<C> \\<turnstile> es @ xs : t1s _> t3s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : t2s _> t3s\\<rbrakk>\n       \\<Longrightarrow> \\<S>\\<bullet>\\<C> \\<turnstile> es @\n                  xs @ [x] : t1s _> t3s", "then"], ["proof (chain)\npicking this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> xs : t2s _> ?t3s \\<Longrightarrow>\n  \\<S>\\<bullet>\\<C> \\<turnstile> es @ xs : t1s _> ?t3s\n  \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : t2s _> t3s", "obtain ts' where \"\\<S>\\<bullet>\\<C> \\<turnstile> xs : (t2s _> ts')\" \"\\<S>\\<bullet>\\<C> \\<turnstile> [x] : (ts' _> t3s)\""], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> xs : t2s _> ?t3s \\<Longrightarrow>\n  \\<S>\\<bullet>\\<C> \\<turnstile> es @ xs : t1s _> ?t3s\n  \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : t2s _> t3s\n\ngoal (1 subgoal):\n 1. (\\<And>ts'.\n        \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> xs : t2s _> ts';\n         \\<S>\\<bullet>\\<C> \\<turnstile> [x] : ts' _> t3s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using e_type_comp[of _ _ xs x]"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> xs : t2s _> ?t3s \\<Longrightarrow>\n  \\<S>\\<bullet>\\<C> \\<turnstile> es @ xs : t1s _> ?t3s\n  \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : t2s _> t3s\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> xs @ [x] : ?t1s _> ?t3s \\<Longrightarrow>\n  \\<exists>ts'.\n     ?\\<S>\\<bullet>?\\<C> \\<turnstile> xs : ?t1s _> ts' \\<and>\n     ?\\<S>\\<bullet>?\\<C> \\<turnstile> [x] : ts' _> ?t3s\n\ngoal (1 subgoal):\n 1. (\\<And>ts'.\n        \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> xs : t2s _> ts';\n         \\<S>\\<bullet>\\<C> \\<turnstile> [x] : ts' _> t3s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> xs : t2s _> ts'\n  \\<S>\\<bullet>\\<C> \\<turnstile> [x] : ts' _> t3s\n\ngoal (1 subgoal):\n 1. \\<And>x xs t3s.\n       \\<lbrakk>\\<And>t3s.\n                   \\<S>\\<bullet>\\<C> \\<turnstile> xs : t2s _> t3s \\<Longrightarrow>\n                   \\<S>\\<bullet>\\<C> \\<turnstile> es @ xs : t1s _> t3s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : t2s _> t3s\\<rbrakk>\n       \\<Longrightarrow> \\<S>\\<bullet>\\<C> \\<turnstile> es @\n                  xs @ [x] : t1s _> t3s", "then"], ["proof (chain)\npicking this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> xs : t2s _> ts'\n  \\<S>\\<bullet>\\<C> \\<turnstile> [x] : ts' _> t3s", "show ?case"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> xs : t2s _> ts'\n  \\<S>\\<bullet>\\<C> \\<turnstile> [x] : ts' _> t3s\n\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C> \\<turnstile> es @ xs @ [x] : t1s _> t3s", "using snoc(1)[of ts'] e_typing_s_typing.intros(2)[of _ _ \"es @ xs\" t1s ts' x t3s]"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> xs : t2s _> ts'\n  \\<S>\\<bullet>\\<C> \\<turnstile> [x] : ts' _> t3s\n  \\<S>\\<bullet>\\<C> \\<turnstile> xs : t2s _> ts' \\<Longrightarrow>\n  \\<S>\\<bullet>\\<C> \\<turnstile> es @ xs : t1s _> ts'\n  \\<lbrakk>?\\<S>\\<bullet>?\\<C> \\<turnstile> es @ xs : t1s _> ts';\n   ?\\<S>\\<bullet>?\\<C> \\<turnstile> [x] : ts' _> t3s\\<rbrakk>\n  \\<Longrightarrow> ?\\<S>\\<bullet>?\\<C> \\<turnstile> (es @ xs) @\n               [x] : t1s _> t3s\n\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C> \\<turnstile> es @ xs @ [x] : t1s _> t3s", "by simp"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es @ xs @ [x] : t1s _> t3s\n\ngoal:\nNo subgoals!", "qed"], ["", "(* This isn't needed here, but we unlift for convenience. *)"], ["", "lemma b_e_type_comp_conc:\n  assumes \"\\<C> \\<turnstile> es : (t1s _> t2s)\"\n          \"\\<C> \\<turnstile> es' : (t2s _> t3s)\"\n  shows \"\\<C> \\<turnstile> es@es' : (t1s _> t3s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> es @ es' : t1s _> t3s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> es @ es' : t1s _> t3s", "fix \\<S>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> es @ es' : t1s _> t3s", "have 1:\"\\<S>\\<bullet>\\<C> \\<turnstile> $*es : (t1s _> t2s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C> \\<turnstile> $* es : t1s _> t2s", "using e_typing_s_typing.intros(1)[OF assms(1)]"], ["proof (prove)\nusing this:\n  ?\\<S>\\<bullet>\\<C> \\<turnstile> $* es : t1s _> t2s\n\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C> \\<turnstile> $* es : t1s _> t2s", "by fastforce"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> $* es : t1s _> t2s\n\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> es @ es' : t1s _> t3s", "have 2:\"\\<S>\\<bullet>\\<C> \\<turnstile> $*es' : (t2s _> t3s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C> \\<turnstile> $* es' : t2s _> t3s", "using e_typing_s_typing.intros(1)[OF assms(2)]"], ["proof (prove)\nusing this:\n  ?\\<S>\\<bullet>\\<C> \\<turnstile> $* es' : t2s _> t3s\n\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C> \\<turnstile> $* es' : t2s _> t3s", "by fastforce"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> $* es' : t2s _> t3s\n\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> es @ es' : t1s _> t3s", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> es @ es' : t1s _> t3s", "using e_type_comp_conc[OF 1 2]"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> ($* es) @ ($* es') : t1s _> t3s\n\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> es @ es' : t1s _> t3s", "by (simp add:  unlift_b_e)"], ["proof (state)\nthis:\n  \\<C> \\<turnstile> es @ es' : t1s _> t3s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma e_type_comp_conc1:\n  assumes \"\\<S>\\<bullet>\\<C> \\<turnstile> es@es' : (ts _> ts')\"\n  shows \"\\<exists>ts''. (\\<S>\\<bullet>\\<C> \\<turnstile> es : (ts _> ts'')) \\<and> (\\<S>\\<bullet>\\<C> \\<turnstile> es' : (ts'' _> ts'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts'' \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> es' : ts'' _> ts'", "using assms"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es @ es' : ts _> ts'\n\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts'' \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> es' : ts'' _> ts'", "proof (induction es' arbitrary: ts ts' rule: List.rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ts ts'.\n       \\<S>\\<bullet>\\<C> \\<turnstile> es @ [] : ts _> ts' \\<Longrightarrow>\n       \\<exists>ts''.\n          \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts'' \\<and>\n          \\<S>\\<bullet>\\<C> \\<turnstile> [] : ts'' _> ts'\n 2. \\<And>x xs ts ts'.\n       \\<lbrakk>\\<And>ts ts'.\n                   \\<S>\\<bullet>\\<C> \\<turnstile> es @\n            xs : ts _> ts' \\<Longrightarrow>\n                   \\<exists>ts''.\n                      \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts'' \\<and>\n                      \\<S>\\<bullet>\\<C> \\<turnstile> xs : ts'' _> ts';\n        \\<S>\\<bullet>\\<C> \\<turnstile> es @ xs @ [x] : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts''.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts'' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> xs @\n                     [x] : ts'' _> ts'", "case Nil"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es @ [] : ts _> ts'\n\ngoal (2 subgoals):\n 1. \\<And>ts ts'.\n       \\<S>\\<bullet>\\<C> \\<turnstile> es @ [] : ts _> ts' \\<Longrightarrow>\n       \\<exists>ts''.\n          \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts'' \\<and>\n          \\<S>\\<bullet>\\<C> \\<turnstile> [] : ts'' _> ts'\n 2. \\<And>x xs ts ts'.\n       \\<lbrakk>\\<And>ts ts'.\n                   \\<S>\\<bullet>\\<C> \\<turnstile> es @\n            xs : ts _> ts' \\<Longrightarrow>\n                   \\<exists>ts''.\n                      \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts'' \\<and>\n                      \\<S>\\<bullet>\\<C> \\<turnstile> xs : ts'' _> ts';\n        \\<S>\\<bullet>\\<C> \\<turnstile> es @ xs @ [x] : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts''.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts'' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> xs @\n                     [x] : ts'' _> ts'", "thus ?case"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es @ [] : ts _> ts'\n\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts'' \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> [] : ts'' _> ts'", "using b_e_type_empty[of _ ts' ts'] e_typing_s_typing.intros(1)"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es @ [] : ts _> ts'\n  ?\\<C> \\<turnstile> [] : ts' _> ts' = (ts' = ts')\n  ?\\<C> \\<turnstile> ?b_es : ?tf \\<Longrightarrow>\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> $* ?b_es : ?tf\n\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts'' \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> [] : ts'' _> ts'", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>ts''.\n     \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts'' \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> [] : ts'' _> ts'\n\ngoal (1 subgoal):\n 1. \\<And>x xs ts ts'.\n       \\<lbrakk>\\<And>ts ts'.\n                   \\<S>\\<bullet>\\<C> \\<turnstile> es @\n            xs : ts _> ts' \\<Longrightarrow>\n                   \\<exists>ts''.\n                      \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts'' \\<and>\n                      \\<S>\\<bullet>\\<C> \\<turnstile> xs : ts'' _> ts';\n        \\<S>\\<bullet>\\<C> \\<turnstile> es @ xs @ [x] : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts''.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts'' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> xs @\n                     [x] : ts'' _> ts'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs ts ts'.\n       \\<lbrakk>\\<And>ts ts'.\n                   \\<S>\\<bullet>\\<C> \\<turnstile> es @\n            xs : ts _> ts' \\<Longrightarrow>\n                   \\<exists>ts''.\n                      \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts'' \\<and>\n                      \\<S>\\<bullet>\\<C> \\<turnstile> xs : ts'' _> ts';\n        \\<S>\\<bullet>\\<C> \\<turnstile> es @ xs @ [x] : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts''.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts'' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> xs @\n                     [x] : ts'' _> ts'", "case (snoc x xs)"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es @ xs : ?ts _> ?ts' \\<Longrightarrow>\n  \\<exists>ts''.\n     \\<S>\\<bullet>\\<C> \\<turnstile> es : ?ts _> ts'' \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> xs : ts'' _> ?ts'\n  \\<S>\\<bullet>\\<C> \\<turnstile> es @ xs @ [x] : ts _> ts'\n\ngoal (1 subgoal):\n 1. \\<And>x xs ts ts'.\n       \\<lbrakk>\\<And>ts ts'.\n                   \\<S>\\<bullet>\\<C> \\<turnstile> es @\n            xs : ts _> ts' \\<Longrightarrow>\n                   \\<exists>ts''.\n                      \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts'' \\<and>\n                      \\<S>\\<bullet>\\<C> \\<turnstile> xs : ts'' _> ts';\n        \\<S>\\<bullet>\\<C> \\<turnstile> es @ xs @ [x] : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts''.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts'' \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> xs @\n                     [x] : ts'' _> ts'", "then"], ["proof (chain)\npicking this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es @ xs : ?ts _> ?ts' \\<Longrightarrow>\n  \\<exists>ts''.\n     \\<S>\\<bullet>\\<C> \\<turnstile> es : ?ts _> ts'' \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> xs : ts'' _> ?ts'\n  \\<S>\\<bullet>\\<C> \\<turnstile> es @ xs @ [x] : ts _> ts'", "show ?case"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es @ xs : ?ts _> ?ts' \\<Longrightarrow>\n  \\<exists>ts''.\n     \\<S>\\<bullet>\\<C> \\<turnstile> es : ?ts _> ts'' \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> xs : ts'' _> ?ts'\n  \\<S>\\<bullet>\\<C> \\<turnstile> es @ xs @ [x] : ts _> ts'\n\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts'' \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : ts'' _> ts'", "using e_type_comp[of \\<S> \\<C> \"es @ xs\" x ts ts'] e_typing_s_typing.intros(2)[of \\<S> \\<C> xs _ _ x ts']"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es @ xs : ?ts _> ?ts' \\<Longrightarrow>\n  \\<exists>ts''.\n     \\<S>\\<bullet>\\<C> \\<turnstile> es : ?ts _> ts'' \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> xs : ts'' _> ?ts'\n  \\<S>\\<bullet>\\<C> \\<turnstile> es @ xs @ [x] : ts _> ts'\n  \\<S>\\<bullet>\\<C> \\<turnstile> (es @ xs) @\n                                 [x] : ts _> ts' \\<Longrightarrow>\n  \\<exists>ts'.\n     \\<S>\\<bullet>\\<C> \\<turnstile> es @ xs : ts _> ts' \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> [x] : ts' _> ts'\n  \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> xs : ?t1s _> ?t2s;\n   \\<S>\\<bullet>\\<C> \\<turnstile> [x] : ?t2s _> ts'\\<rbrakk>\n  \\<Longrightarrow> \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : ?t1s _> ts'\n\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts'' \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : ts'' _> ts'", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>ts''.\n     \\<S>\\<bullet>\\<C> \\<turnstile> es : ts _> ts'' \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : ts'' _> ts'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma e_type_comp_conc2:\n  assumes \"\\<S>\\<bullet>\\<C> \\<turnstile> es@es'@es'' : (t1s _> t2s)\"\n  shows \"\\<exists>ts' ts''. (\\<S>\\<bullet>\\<C> \\<turnstile> es : (t1s _> ts'))\n                     \\<and> (\\<S>\\<bullet>\\<C> \\<turnstile> es' : (ts' _> ts''))\n                     \\<and> (\\<S>\\<bullet>\\<C> \\<turnstile> es'' : (ts'' _> t2s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ts' ts''.\n       \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> es' : ts' _> ts'' \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> es'' : ts'' _> t2s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ts' ts''.\n       \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> es' : ts' _> ts'' \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> es'' : ts'' _> t2s", "obtain ts' where \"\\<S>\\<bullet>\\<C> \\<turnstile> es : (t1s _> ts')\" \"\\<S>\\<bullet>\\<C> \\<turnstile> es'@es'' : (ts' _> t2s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ts'.\n        \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts';\n         \\<S>\\<bullet>\\<C> \\<turnstile> es' @ es'' : ts' _> t2s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(1) e_type_comp_conc1"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es @ es' @ es'' : t1s _> t2s\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> ?es @\n                                   ?es' : ?ts _> ?ts' \\<Longrightarrow>\n  \\<exists>ts''.\n     ?\\<S>\\<bullet>?\\<C> \\<turnstile> ?es : ?ts _> ts'' \\<and>\n     ?\\<S>\\<bullet>?\\<C> \\<turnstile> ?es' : ts'' _> ?ts'\n\ngoal (1 subgoal):\n 1. (\\<And>ts'.\n        \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts';\n         \\<S>\\<bullet>\\<C> \\<turnstile> es' @ es'' : ts' _> t2s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts'\n  \\<S>\\<bullet>\\<C> \\<turnstile> es' @ es'' : ts' _> t2s\n\ngoal (1 subgoal):\n 1. \\<exists>ts' ts''.\n       \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> es' : ts' _> ts'' \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> es'' : ts'' _> t2s", "moreover"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts'\n  \\<S>\\<bullet>\\<C> \\<turnstile> es' @ es'' : ts' _> t2s\n\ngoal (1 subgoal):\n 1. \\<exists>ts' ts''.\n       \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> es' : ts' _> ts'' \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> es'' : ts'' _> t2s", "then"], ["proof (chain)\npicking this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts'\n  \\<S>\\<bullet>\\<C> \\<turnstile> es' @ es'' : ts' _> t2s", "obtain ts'' where \"\\<S>\\<bullet>\\<C> \\<turnstile> es' : (ts' _> ts'')\" \"\\<S>\\<bullet>\\<C> \\<turnstile> es'' : (ts'' _> t2s)\""], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts'\n  \\<S>\\<bullet>\\<C> \\<turnstile> es' @ es'' : ts' _> t2s\n\ngoal (1 subgoal):\n 1. (\\<And>ts''.\n        \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es' : ts' _> ts'';\n         \\<S>\\<bullet>\\<C> \\<turnstile> es'' : ts'' _> t2s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using e_type_comp_conc1"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts'\n  \\<S>\\<bullet>\\<C> \\<turnstile> es' @ es'' : ts' _> t2s\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> ?es @\n                                   ?es' : ?ts _> ?ts' \\<Longrightarrow>\n  \\<exists>ts''.\n     ?\\<S>\\<bullet>?\\<C> \\<turnstile> ?es : ?ts _> ts'' \\<and>\n     ?\\<S>\\<bullet>?\\<C> \\<turnstile> ?es' : ts'' _> ?ts'\n\ngoal (1 subgoal):\n 1. (\\<And>ts''.\n        \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es' : ts' _> ts'';\n         \\<S>\\<bullet>\\<C> \\<turnstile> es'' : ts'' _> t2s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es' : ts' _> ts''\n  \\<S>\\<bullet>\\<C> \\<turnstile> es'' : ts'' _> t2s\n\ngoal (1 subgoal):\n 1. \\<exists>ts' ts''.\n       \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> es' : ts' _> ts'' \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> es'' : ts'' _> t2s", "ultimately"], ["proof (chain)\npicking this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts'\n  \\<S>\\<bullet>\\<C> \\<turnstile> es' @ es'' : ts' _> t2s\n  \\<S>\\<bullet>\\<C> \\<turnstile> es' : ts' _> ts''\n  \\<S>\\<bullet>\\<C> \\<turnstile> es'' : ts'' _> t2s", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts'\n  \\<S>\\<bullet>\\<C> \\<turnstile> es' @ es'' : ts' _> t2s\n  \\<S>\\<bullet>\\<C> \\<turnstile> es' : ts' _> ts''\n  \\<S>\\<bullet>\\<C> \\<turnstile> es'' : ts'' _> t2s\n\ngoal (1 subgoal):\n 1. \\<exists>ts' ts''.\n       \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> es' : ts' _> ts'' \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> es'' : ts'' _> t2s", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>ts' ts''.\n     \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> ts' \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> es' : ts' _> ts'' \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> es'' : ts'' _> t2s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma b_e_type_value_list:\n  assumes \"(\\<C> \\<turnstile> es@[C v] : (ts _> ts'@[t]))\"\n  shows \"(\\<C> \\<turnstile> es : (ts _> ts'))\"\n        \"(typeof v = t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> es : ts _> ts' &&& typeof v = t", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<C> \\<turnstile> es : ts _> ts'\n 2. typeof v = t", "obtain ts'' where \"(\\<C> \\<turnstile> es : (ts _> ts''))\" \"(\\<C> \\<turnstile> [C v] : (ts'' _> ts' @ [t]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ts''.\n        \\<lbrakk>\\<C> \\<turnstile> es : ts _> ts'';\n         \\<C> \\<turnstile> [C v] : ts'' _> ts' @ [t]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using b_e_type_comp assms"], ["proof (prove)\nusing this:\n  ?\\<C> \\<turnstile> ?es @ [?e] : ?t1s _> ?t4s \\<Longrightarrow>\n  \\<exists>ts'.\n     ?\\<C> \\<turnstile> ?es : ?t1s _> ts' \\<and>\n     ?\\<C> \\<turnstile> [?e] : ts' _> ?t4s\n  \\<C> \\<turnstile> es @ [C v] : ts _> ts' @ [t]\n\ngoal (1 subgoal):\n 1. (\\<And>ts''.\n        \\<lbrakk>\\<C> \\<turnstile> es : ts _> ts'';\n         \\<C> \\<turnstile> [C v] : ts'' _> ts' @ [t]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<C> \\<turnstile> es : ts _> ts''\n  \\<C> \\<turnstile> [C v] : ts'' _> ts' @ [t]\n\ngoal (2 subgoals):\n 1. \\<C> \\<turnstile> es : ts _> ts'\n 2. typeof v = t", "thus \"(\\<C> \\<turnstile> es : (ts _> ts'))\" \"(typeof v = t)\""], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> es : ts _> ts''\n  \\<C> \\<turnstile> [C v] : ts'' _> ts' @ [t]\n\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> es : ts _> ts' &&& typeof v = t", "using b_e_type_value[of \\<C> \"C v\" \"ts''\" \"ts' @ [t]\"]"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> es : ts _> ts''\n  \\<C> \\<turnstile> [C v] : ts'' _> ts' @ [t]\n  \\<lbrakk>\\<C> \\<turnstile> [C v] : ts'' _> ts' @ [t]; C v = C ?v\\<rbrakk>\n  \\<Longrightarrow> ts' @ [t] = ts'' @ [typeof ?v]\n\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> es : ts _> ts' &&& typeof v = t", "by auto"], ["proof (state)\nthis:\n  \\<C> \\<turnstile> es : ts _> ts'\n  typeof v = t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma e_type_label:\n  assumes \"\\<S>\\<bullet>\\<C> \\<turnstile> [Label n es0 es] : (ts _> ts')\"\n  shows \"\\<exists>tls t2s. (ts' = (ts@t2s))\n                \\<and> length tls = n\n                \\<and> (\\<S>\\<bullet>\\<C> \\<turnstile> es0 : (tls _> t2s))\n                \\<and> (\\<S>\\<bullet>\\<C>\\<lparr>label := [tls] @ (label \\<C>)\\<rparr> \\<turnstile> es : ([] _> t2s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>tls t2s.\n       ts' = ts @ t2s \\<and>\n       length tls = n \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2s \\<and>\n       \\<S>\\<bullet>\\<C>\n       \\<lparr>label :=\n                 [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s", "using assms"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> [Label n es0 es] : ts _> ts'\n\ngoal (1 subgoal):\n 1. \\<exists>tls t2s.\n       ts' = ts @ t2s \\<and>\n       length tls = n \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2s \\<and>\n       \\<S>\\<bullet>\\<C>\n       \\<lparr>label :=\n                 [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s", "proof (induction \"\\<S>\" \"\\<C>\" \"[Label n es0 es]\" \"(ts _> ts')\" arbitrary: ts ts')"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<C> b_es \\<S> ts ts'.\n       \\<lbrakk>\\<C> \\<turnstile> b_es : ts _> ts';\n        $* b_es = [Label n es0 es]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls t2s.\n                            ts' = ts @ t2s \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2s \\<and>\n                            \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\n[tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s\n 2. \\<And>\\<S> \\<C> esa t1s t2s e t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        esa = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t2s = t1s @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @\n                     label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        e = Label n es0 es \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t3s = t2s @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @\n                     label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa;\n        esa @ [e] = [Label n es0 es]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls t2s.\n                            t3s = t1s @ t2s \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2s \\<and>\n                            \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\n[tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s\n 3. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Label n es0\n           es] : t1s _> t2s;\n        \\<exists>tls t2sa.\n           t2s = t1s @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @\n                     label\n                      \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls t2sa.\n                            ts @ t2s = (ts @ t1s) @ t2sa \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n                            \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\n[tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\n 4. \\<And>\\<S> \\<C> ts t2s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es0 : ts _> t2s;\n        es0 = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t2s = ts @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @\n                     label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        es = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t2s = [] @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [ts] @\n                     label\n                      \\<C>\\<rparr> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label := [ts] @ label \\<C>,\n              label :=\n                [tls] @\n                label\n                 (\\<C>\n                  \\<lparr>label :=\n                            [ts] @\n                            label\n                             \\<C>\\<rparr>)\\<rparr> \\<turnstile> es : [] _> t2sa;\n        length ts = n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls t2sa.\n                            t2s = [] @ t2sa \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n                            \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\n[tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\n 5. \\<And>i \\<S> tvs vs \\<C> rs esa ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        esa = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2s.\n           ts = [] @ t2s \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2s \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.8 \\<S> rs i vs esa ts", "case (1 \\<C> b_es \\<S>)"], ["proof (state)\nthis:\n  \\<C> \\<turnstile> b_es : ts _> ts'\n  $* b_es = [Label n es0 es]\n\ngoal (5 subgoals):\n 1. \\<And>\\<C> b_es \\<S> ts ts'.\n       \\<lbrakk>\\<C> \\<turnstile> b_es : ts _> ts';\n        $* b_es = [Label n es0 es]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls t2s.\n                            ts' = ts @ t2s \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2s \\<and>\n                            \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\n[tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s\n 2. \\<And>\\<S> \\<C> esa t1s t2s e t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        esa = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t2s = t1s @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @\n                     label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        e = Label n es0 es \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t3s = t2s @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @\n                     label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa;\n        esa @ [e] = [Label n es0 es]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls t2s.\n                            t3s = t1s @ t2s \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2s \\<and>\n                            \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\n[tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s\n 3. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Label n es0\n           es] : t1s _> t2s;\n        \\<exists>tls t2sa.\n           t2s = t1s @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @\n                     label\n                      \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls t2sa.\n                            ts @ t2s = (ts @ t1s) @ t2sa \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n                            \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\n[tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\n 4. \\<And>\\<S> \\<C> ts t2s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es0 : ts _> t2s;\n        es0 = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t2s = ts @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @\n                     label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        es = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t2s = [] @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [ts] @\n                     label\n                      \\<C>\\<rparr> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label := [ts] @ label \\<C>,\n              label :=\n                [tls] @\n                label\n                 (\\<C>\n                  \\<lparr>label :=\n                            [ts] @\n                            label\n                             \\<C>\\<rparr>)\\<rparr> \\<turnstile> es : [] _> t2sa;\n        length ts = n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls t2sa.\n                            t2s = [] @ t2sa \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n                            \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\n[tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\n 5. \\<And>i \\<S> tvs vs \\<C> rs esa ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        esa = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2s.\n           ts = [] @ t2s \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2s \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.8 \\<S> rs i vs esa ts", "then"], ["proof (chain)\npicking this:\n  \\<C> \\<turnstile> b_es : ts _> ts'\n  $* b_es = [Label n es0 es]", "show ?case"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> b_es : ts _> ts'\n  $* b_es = [Label n es0 es]\n\ngoal (1 subgoal):\n 1. \\<exists>tls t2s.\n       ts' = ts @ t2s \\<and>\n       length tls = n \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2s \\<and>\n       \\<S>\\<bullet>\\<C>\n       \\<lparr>label :=\n                 [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s", "by (simp add: map_eq_Cons_conv)"], ["proof (state)\nthis:\n  \\<exists>tls t2s.\n     ts' = ts @ t2s \\<and>\n     length tls = n \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2s \\<and>\n     \\<S>\\<bullet>\\<C>\n     \\<lparr>label := [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s\n\ngoal (4 subgoals):\n 1. \\<And>\\<S> \\<C> esa t1s t2s e t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        esa = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t2s = t1s @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @\n                     label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        e = Label n es0 es \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t3s = t2s @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @\n                     label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa;\n        esa @ [e] = [Label n es0 es]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls t2s.\n                            t3s = t1s @ t2s \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2s \\<and>\n                            \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\n[tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s\n 2. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Label n es0\n           es] : t1s _> t2s;\n        \\<exists>tls t2sa.\n           t2s = t1s @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @\n                     label\n                      \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls t2sa.\n                            ts @ t2s = (ts @ t1s) @ t2sa \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n                            \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\n[tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\n 3. \\<And>\\<S> \\<C> ts t2s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es0 : ts _> t2s;\n        es0 = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t2s = ts @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @\n                     label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        es = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t2s = [] @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [ts] @\n                     label\n                      \\<C>\\<rparr> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label := [ts] @ label \\<C>,\n              label :=\n                [tls] @\n                label\n                 (\\<C>\n                  \\<lparr>label :=\n                            [ts] @\n                            label\n                             \\<C>\\<rparr>)\\<rparr> \\<turnstile> es : [] _> t2sa;\n        length ts = n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls t2sa.\n                            t2s = [] @ t2sa \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n                            \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\n[tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\n 4. \\<And>i \\<S> tvs vs \\<C> rs esa ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        esa = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2s.\n           ts = [] @ t2s \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2s \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.8 \\<S> rs i vs esa ts", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<S> \\<C> esa t1s t2s e t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        esa = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t2s = t1s @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @\n                     label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        e = Label n es0 es \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t3s = t2s @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @\n                     label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa;\n        esa @ [e] = [Label n es0 es]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls t2s.\n                            t3s = t1s @ t2s \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2s \\<and>\n                            \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\n[tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s\n 2. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Label n es0\n           es] : t1s _> t2s;\n        \\<exists>tls t2sa.\n           t2s = t1s @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @\n                     label\n                      \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls t2sa.\n                            ts @ t2s = (ts @ t1s) @ t2sa \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n                            \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\n[tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\n 3. \\<And>\\<S> \\<C> ts t2s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es0 : ts _> t2s;\n        es0 = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t2s = ts @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @\n                     label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        es = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t2s = [] @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [ts] @\n                     label\n                      \\<C>\\<rparr> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label := [ts] @ label \\<C>,\n              label :=\n                [tls] @\n                label\n                 (\\<C>\n                  \\<lparr>label :=\n                            [ts] @\n                            label\n                             \\<C>\\<rparr>)\\<rparr> \\<turnstile> es : [] _> t2sa;\n        length ts = n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls t2sa.\n                            t2s = [] @ t2sa \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n                            \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\n[tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\n 4. \\<And>i \\<S> tvs vs \\<C> rs esa ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        esa = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2s.\n           ts = [] @ t2s \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2s \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.8 \\<S> rs i vs esa ts", "case (2 \\<S> \\<C> es t1s t2s e t3s)"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> t2s\n  es = [Label n es0 es] \\<Longrightarrow>\n  \\<exists>tls t2sa.\n     t2s = t1s @ t2sa \\<and>\n     length tls = n \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n     \\<S>\\<bullet>\\<C>\n     \\<lparr>label :=\n               [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\n  \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s\n  e = Label n es0 es \\<Longrightarrow>\n  \\<exists>tls t2sa.\n     t3s = t2s @ t2sa \\<and>\n     length tls = n \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n     \\<S>\\<bullet>\\<C>\n     \\<lparr>label :=\n               [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\n  es @ [e] = [Label n es0 es]\n\ngoal (4 subgoals):\n 1. \\<And>\\<S> \\<C> esa t1s t2s e t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        esa = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t2s = t1s @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @\n                     label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        e = Label n es0 es \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t3s = t2s @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @\n                     label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa;\n        esa @ [e] = [Label n es0 es]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls t2s.\n                            t3s = t1s @ t2s \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2s \\<and>\n                            \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\n[tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s\n 2. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Label n es0\n           es] : t1s _> t2s;\n        \\<exists>tls t2sa.\n           t2s = t1s @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @\n                     label\n                      \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls t2sa.\n                            ts @ t2s = (ts @ t1s) @ t2sa \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n                            \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\n[tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\n 3. \\<And>\\<S> \\<C> ts t2s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es0 : ts _> t2s;\n        es0 = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t2s = ts @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @\n                     label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        es = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t2s = [] @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [ts] @\n                     label\n                      \\<C>\\<rparr> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label := [ts] @ label \\<C>,\n              label :=\n                [tls] @\n                label\n                 (\\<C>\n                  \\<lparr>label :=\n                            [ts] @\n                            label\n                             \\<C>\\<rparr>)\\<rparr> \\<turnstile> es : [] _> t2sa;\n        length ts = n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls t2sa.\n                            t2s = [] @ t2sa \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n                            \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\n[tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\n 4. \\<And>i \\<S> tvs vs \\<C> rs esa ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        esa = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2s.\n           ts = [] @ t2s \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2s \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.8 \\<S> rs i vs esa ts", "then"], ["proof (chain)\npicking this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> t2s\n  es = [Label n es0 es] \\<Longrightarrow>\n  \\<exists>tls t2sa.\n     t2s = t1s @ t2sa \\<and>\n     length tls = n \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n     \\<S>\\<bullet>\\<C>\n     \\<lparr>label :=\n               [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\n  \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s\n  e = Label n es0 es \\<Longrightarrow>\n  \\<exists>tls t2sa.\n     t3s = t2s @ t2sa \\<and>\n     length tls = n \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n     \\<S>\\<bullet>\\<C>\n     \\<lparr>label :=\n               [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\n  es @ [e] = [Label n es0 es]", "show ?case"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> t2s\n  es = [Label n es0 es] \\<Longrightarrow>\n  \\<exists>tls t2sa.\n     t2s = t1s @ t2sa \\<and>\n     length tls = n \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n     \\<S>\\<bullet>\\<C>\n     \\<lparr>label :=\n               [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\n  \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s\n  e = Label n es0 es \\<Longrightarrow>\n  \\<exists>tls t2sa.\n     t3s = t2s @ t2sa \\<and>\n     length tls = n \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n     \\<S>\\<bullet>\\<C>\n     \\<lparr>label :=\n               [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\n  es @ [e] = [Label n es0 es]\n\ngoal (1 subgoal):\n 1. \\<exists>tls t2s.\n       t3s = t1s @ t2s \\<and>\n       length tls = n \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2s \\<and>\n       \\<S>\\<bullet>\\<C>\n       \\<lparr>label :=\n                 [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s", "by (metis append_self_conv2 b_e_type_empty last_snoc list.simps(8) unlift_b_e)"], ["proof (state)\nthis:\n  \\<exists>tls t2s.\n     t3s = t1s @ t2s \\<and>\n     length tls = n \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2s \\<and>\n     \\<S>\\<bullet>\\<C>\n     \\<lparr>label := [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s\n\ngoal (3 subgoals):\n 1. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Label n es0\n           es] : t1s _> t2s;\n        \\<exists>tls t2sa.\n           t2s = t1s @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @\n                     label\n                      \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls t2sa.\n                            ts @ t2s = (ts @ t1s) @ t2sa \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n                            \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\n[tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\n 2. \\<And>\\<S> \\<C> ts t2s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es0 : ts _> t2s;\n        es0 = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t2s = ts @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @\n                     label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        es = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t2s = [] @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [ts] @\n                     label\n                      \\<C>\\<rparr> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label := [ts] @ label \\<C>,\n              label :=\n                [tls] @\n                label\n                 (\\<C>\n                  \\<lparr>label :=\n                            [ts] @\n                            label\n                             \\<C>\\<rparr>)\\<rparr> \\<turnstile> es : [] _> t2sa;\n        length ts = n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls t2sa.\n                            t2s = [] @ t2sa \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n                            \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\n[tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\n 3. \\<And>i \\<S> tvs vs \\<C> rs esa ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        esa = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2s.\n           ts = [] @ t2s \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2s \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.8 \\<S> rs i vs esa ts", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Label n es0\n           es] : t1s _> t2s;\n        \\<exists>tls t2sa.\n           t2s = t1s @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @\n                     label\n                      \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls t2sa.\n                            ts @ t2s = (ts @ t1s) @ t2sa \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n                            \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\n[tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\n 2. \\<And>\\<S> \\<C> ts t2s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es0 : ts _> t2s;\n        es0 = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t2s = ts @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @\n                     label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        es = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t2s = [] @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [ts] @\n                     label\n                      \\<C>\\<rparr> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label := [ts] @ label \\<C>,\n              label :=\n                [tls] @\n                label\n                 (\\<C>\n                  \\<lparr>label :=\n                            [ts] @\n                            label\n                             \\<C>\\<rparr>)\\<rparr> \\<turnstile> es : [] _> t2sa;\n        length ts = n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls t2sa.\n                            t2s = [] @ t2sa \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n                            \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\n[tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\n 3. \\<And>i \\<S> tvs vs \\<C> rs esa ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        esa = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2s.\n           ts = [] @ t2s \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2s \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.8 \\<S> rs i vs esa ts", "case (3 \\<S> \\<C> t1s t2s ts)"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> [Label n es0 es] : t1s _> t2s\n  \\<exists>tls t2sa.\n     t2s = t1s @ t2sa \\<and>\n     length tls = n \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n     \\<S>\\<bullet>\\<C>\n     \\<lparr>label :=\n               [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\n\ngoal (3 subgoals):\n 1. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Label n es0\n           es] : t1s _> t2s;\n        \\<exists>tls t2sa.\n           t2s = t1s @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @\n                     label\n                      \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls t2sa.\n                            ts @ t2s = (ts @ t1s) @ t2sa \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n                            \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\n[tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\n 2. \\<And>\\<S> \\<C> ts t2s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es0 : ts _> t2s;\n        es0 = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t2s = ts @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @\n                     label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        es = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t2s = [] @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [ts] @\n                     label\n                      \\<C>\\<rparr> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label := [ts] @ label \\<C>,\n              label :=\n                [tls] @\n                label\n                 (\\<C>\n                  \\<lparr>label :=\n                            [ts] @\n                            label\n                             \\<C>\\<rparr>)\\<rparr> \\<turnstile> es : [] _> t2sa;\n        length ts = n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls t2sa.\n                            t2s = [] @ t2sa \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n                            \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\n[tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\n 3. \\<And>i \\<S> tvs vs \\<C> rs esa ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        esa = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2s.\n           ts = [] @ t2s \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2s \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.8 \\<S> rs i vs esa ts", "then"], ["proof (chain)\npicking this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> [Label n es0 es] : t1s _> t2s\n  \\<exists>tls t2sa.\n     t2s = t1s @ t2sa \\<and>\n     length tls = n \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n     \\<S>\\<bullet>\\<C>\n     \\<lparr>label :=\n               [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa", "show ?case"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> [Label n es0 es] : t1s _> t2s\n  \\<exists>tls t2sa.\n     t2s = t1s @ t2sa \\<and>\n     length tls = n \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n     \\<S>\\<bullet>\\<C>\n     \\<lparr>label :=\n               [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\n\ngoal (1 subgoal):\n 1. \\<exists>tls t2sa.\n       ts @ t2s = (ts @ t1s) @ t2sa \\<and>\n       length tls = n \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n       \\<S>\\<bullet>\\<C>\n       \\<lparr>label :=\n                 [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa", "by simp"], ["proof (state)\nthis:\n  \\<exists>tls t2sa.\n     ts @ t2s = (ts @ t1s) @ t2sa \\<and>\n     length tls = n \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n     \\<S>\\<bullet>\\<C>\n     \\<lparr>label :=\n               [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\n\ngoal (2 subgoals):\n 1. \\<And>\\<S> \\<C> ts t2s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es0 : ts _> t2s;\n        es0 = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t2s = ts @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @\n                     label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        es = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t2s = [] @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [ts] @\n                     label\n                      \\<C>\\<rparr> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label := [ts] @ label \\<C>,\n              label :=\n                [tls] @\n                label\n                 (\\<C>\n                  \\<lparr>label :=\n                            [ts] @\n                            label\n                             \\<C>\\<rparr>)\\<rparr> \\<turnstile> es : [] _> t2sa;\n        length ts = n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls t2sa.\n                            t2s = [] @ t2sa \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n                            \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\n[tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\n 2. \\<And>i \\<S> tvs vs \\<C> rs esa ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        esa = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2s.\n           ts = [] @ t2s \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2s \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.8 \\<S> rs i vs esa ts", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<S> \\<C> ts t2s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es0 : ts _> t2s;\n        es0 = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t2s = ts @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @\n                     label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        es = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t2s = [] @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [ts] @\n                     label\n                      \\<C>\\<rparr> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label := [ts] @ label \\<C>,\n              label :=\n                [tls] @\n                label\n                 (\\<C>\n                  \\<lparr>label :=\n                            [ts] @\n                            label\n                             \\<C>\\<rparr>)\\<rparr> \\<turnstile> es : [] _> t2sa;\n        length ts = n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls t2sa.\n                            t2s = [] @ t2sa \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n                            \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\n[tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\n 2. \\<And>i \\<S> tvs vs \\<C> rs esa ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        esa = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2s.\n           ts = [] @ t2s \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2s \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.8 \\<S> rs i vs esa ts", "case (7 \\<S> \\<C> t2s)"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es0 : t2s _> t2s_\n  es0 = [Label n es0 es] \\<Longrightarrow>\n  \\<exists>tls t2sb.\n     t2s_ = t2s @ t2sb \\<and>\n     length tls = n \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sb \\<and>\n     \\<S>\\<bullet>\\<C>\n     \\<lparr>label :=\n               [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sb\n  \\<S>\\<bullet>\\<C>\n  \\<lparr>label := [t2s] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s_\n  es = [Label n es0 es] \\<Longrightarrow>\n  \\<exists>tls t2sb.\n     t2s_ = [] @ t2sb \\<and>\n     length tls = n \\<and>\n     \\<S>\\<bullet>\\<C>\n     \\<lparr>label :=\n               [t2s] @\n               label \\<C>\\<rparr> \\<turnstile> es0 : tls _> t2sb \\<and>\n     \\<S>\\<bullet>\\<C>\n     \\<lparr>label := [t2s] @ label \\<C>,\n        label :=\n          [tls] @\n          label\n           (\\<C>\n            \\<lparr>label :=\n                      [t2s] @\n                      label\n                       \\<C>\\<rparr>)\\<rparr> \\<turnstile> es : [] _> t2sb\n  length t2s = n\n\ngoal (2 subgoals):\n 1. \\<And>\\<S> \\<C> ts t2s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es0 : ts _> t2s;\n        es0 = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t2s = ts @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @\n                     label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa;\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        es = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2sa.\n           t2s = [] @ t2sa \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [ts] @\n                     label\n                      \\<C>\\<rparr> \\<turnstile> es0 : tls _> t2sa \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label := [ts] @ label \\<C>,\n              label :=\n                [tls] @\n                label\n                 (\\<C>\n                  \\<lparr>label :=\n                            [ts] @\n                            label\n                             \\<C>\\<rparr>)\\<rparr> \\<turnstile> es : [] _> t2sa;\n        length ts = n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls t2sa.\n                            t2s = [] @ t2sa \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sa \\<and>\n                            \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\n[tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sa\n 2. \\<And>i \\<S> tvs vs \\<C> rs esa ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        esa = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2s.\n           ts = [] @ t2s \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2s \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.8 \\<S> rs i vs esa ts", "then"], ["proof (chain)\npicking this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es0 : t2s _> t2s_\n  es0 = [Label n es0 es] \\<Longrightarrow>\n  \\<exists>tls t2sb.\n     t2s_ = t2s @ t2sb \\<and>\n     length tls = n \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sb \\<and>\n     \\<S>\\<bullet>\\<C>\n     \\<lparr>label :=\n               [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sb\n  \\<S>\\<bullet>\\<C>\n  \\<lparr>label := [t2s] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s_\n  es = [Label n es0 es] \\<Longrightarrow>\n  \\<exists>tls t2sb.\n     t2s_ = [] @ t2sb \\<and>\n     length tls = n \\<and>\n     \\<S>\\<bullet>\\<C>\n     \\<lparr>label :=\n               [t2s] @\n               label \\<C>\\<rparr> \\<turnstile> es0 : tls _> t2sb \\<and>\n     \\<S>\\<bullet>\\<C>\n     \\<lparr>label := [t2s] @ label \\<C>,\n        label :=\n          [tls] @\n          label\n           (\\<C>\n            \\<lparr>label :=\n                      [t2s] @\n                      label\n                       \\<C>\\<rparr>)\\<rparr> \\<turnstile> es : [] _> t2sb\n  length t2s = n", "show ?case"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es0 : t2s _> t2s_\n  es0 = [Label n es0 es] \\<Longrightarrow>\n  \\<exists>tls t2sb.\n     t2s_ = t2s @ t2sb \\<and>\n     length tls = n \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2sb \\<and>\n     \\<S>\\<bullet>\\<C>\n     \\<lparr>label :=\n               [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2sb\n  \\<S>\\<bullet>\\<C>\n  \\<lparr>label := [t2s] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s_\n  es = [Label n es0 es] \\<Longrightarrow>\n  \\<exists>tls t2sb.\n     t2s_ = [] @ t2sb \\<and>\n     length tls = n \\<and>\n     \\<S>\\<bullet>\\<C>\n     \\<lparr>label :=\n               [t2s] @\n               label \\<C>\\<rparr> \\<turnstile> es0 : tls _> t2sb \\<and>\n     \\<S>\\<bullet>\\<C>\n     \\<lparr>label := [t2s] @ label \\<C>,\n        label :=\n          [tls] @\n          label\n           (\\<C>\n            \\<lparr>label :=\n                      [t2s] @\n                      label\n                       \\<C>\\<rparr>)\\<rparr> \\<turnstile> es : [] _> t2sb\n  length t2s = n\n\ngoal (1 subgoal):\n 1. \\<exists>tls t2s.\n       t2s_ = [] @ t2s \\<and>\n       length tls = n \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2s \\<and>\n       \\<S>\\<bullet>\\<C>\n       \\<lparr>label :=\n                 [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>tls t2s.\n     t2s_ = [] @ t2s \\<and>\n     length tls = n \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2s \\<and>\n     \\<S>\\<bullet>\\<C>\n     \\<lparr>label := [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s\n\ngoal (1 subgoal):\n 1. \\<And>i \\<S> tvs vs \\<C> rs esa ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        esa = [Label n es0 es] \\<Longrightarrow>\n        \\<exists>tls t2s.\n           ts = [] @ t2s \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>\\<C> \\<turnstile> es0 : tls _> t2s \\<and>\n           \\<S>\\<bullet>\\<C>\n           \\<lparr>label :=\n                     [tls] @ label \\<C>\\<rparr> \\<turnstile> es : [] _> t2s;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.8 \\<S> rs i vs esa ts", "qed"], ["", "lemma e_type_callcl_native:\n  assumes \"\\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : (t1s' _> t2s')\"\n          \"cl = Func_native i tf ts es\"\n  shows \"\\<exists>t1s t2s ts_c. (t1s' = ts_c @ t1s)\n                         \\<and> (t2s' = ts_c @ t2s)\n                         \\<and> tf = (t1s _> t2s)\n                         \\<and> i < length (s_inst \\<S>)\n                         \\<and> (((s_inst \\<S>)!i)\\<lparr>local := (local ((s_inst \\<S>)!i)) @ t1s @ ts, label := ([t2s] @ (label ((s_inst \\<S>)!i))), return := Some t2s\\<rparr>  \\<turnstile> es : ([] _> t2s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t1s t2s ts_c.\n       t1s' = ts_c @ t1s \\<and>\n       t2s' = ts_c @ t2s \\<and>\n       tf = t1s _> t2s \\<and>\n       i < length (s_inst \\<S>) \\<and> (s_inst \\<S> ! i)\n       \\<lparr>local := local (s_inst \\<S> ! i) @ t1s @ ts,\n          label := [t2s] @ label (s_inst \\<S> ! i),\n          return := Some t2s\\<rparr> \\<turnstile> es : [] _> t2s", "using assms"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : t1s' _> t2s'\n  cl = Func_native i tf ts es\n\ngoal (1 subgoal):\n 1. \\<exists>t1s t2s ts_c.\n       t1s' = ts_c @ t1s \\<and>\n       t2s' = ts_c @ t2s \\<and>\n       tf = t1s _> t2s \\<and>\n       i < length (s_inst \\<S>) \\<and> (s_inst \\<S> ! i)\n       \\<lparr>local := local (s_inst \\<S> ! i) @ t1s @ ts,\n          label := [t2s] @ label (s_inst \\<S> ! i),\n          return := Some t2s\\<rparr> \\<turnstile> es : [] _> t2s", "proof (induction \"\\<S>\" \"\\<C>\" \"[Callcl cl]\" \"(t1s' _> t2s')\" arbitrary: t1s' t2s')"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<C> b_es \\<S> t1s' t2s'.\n       \\<lbrakk>\\<C> \\<turnstile> b_es : t1s' _> t2s';\n        $* b_es = [Callcl cl]; cl = Func_native i tf ts es\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                            t1s' = ts_c @ t1s \\<and>\n                            t2s' = ts_c @ t2s \\<and>\n                            tf = t1s _> t2s \\<and>\n                            i < length (s_inst \\<S>) \\<and>\n                            (s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ t1s @ ts,\n                               label := [t2s] @ label (s_inst \\<S> ! i),\n                               return :=\n                                 Some\n                                  t2s\\<rparr> \\<turnstile> es : [] _> t2s\n 2. \\<And>\\<S> \\<C> esa t1s t2s e t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        \\<lbrakk>esa = [Callcl cl]; cl = Func_native i tf ts es\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                             t1s = ts_c @ t1sa \\<and>\n                             t2s = ts_c @ t2sa \\<and>\n                             tf = t1sa _> t2sa \\<and>\n                             i < length (s_inst \\<S>) \\<and>\n                             (s_inst \\<S> ! i)\n                             \\<lparr>local :=\n local (s_inst \\<S> ! i) @ t1sa @ ts,\n                                label := [t2sa] @ label (s_inst \\<S> ! i),\n                                return :=\n                                  Some\n                                   t2sa\\<rparr> \\<turnstile> es : [] _> t2sa;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        \\<lbrakk>e = Callcl cl; cl = Func_native i tf ts es\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2sa ts_c.\n                             t2s = ts_c @ t1s \\<and>\n                             t3s = ts_c @ t2sa \\<and>\n                             tf = t1s _> t2sa \\<and>\n                             i < length (s_inst \\<S>) \\<and>\n                             (s_inst \\<S> ! i)\n                             \\<lparr>local :=\n local (s_inst \\<S> ! i) @ t1s @ ts,\n                                label := [t2sa] @ label (s_inst \\<S> ! i),\n                                return :=\n                                  Some\n                                   t2sa\\<rparr> \\<turnstile> es : [] _> t2sa;\n        esa @ [e] = [Callcl cl]; cl = Func_native i tf ts es\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2s ts_c.\n                            t1s = ts_c @ t1sa \\<and>\n                            t3s = ts_c @ t2s \\<and>\n                            tf = t1sa _> t2s \\<and>\n                            i < length (s_inst \\<S>) \\<and>\n                            (s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ t1sa @ ts,\n                               label := [t2s] @ label (s_inst \\<S> ! i),\n                               return :=\n                                 Some\n                                  t2s\\<rparr> \\<turnstile> es : [] _> t2s\n 3. \\<And>\\<S> \\<C> t1s t2s tsa.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : t1s _> t2s;\n        cl = Func_native i tf ts es \\<Longrightarrow>\n        \\<exists>t1sa t2sa ts_c.\n           t1s = ts_c @ t1sa \\<and>\n           t2s = ts_c @ t2sa \\<and>\n           tf = t1sa _> t2sa \\<and>\n           i < length (s_inst \\<S>) \\<and> (s_inst \\<S> ! i)\n           \\<lparr>local := local (s_inst \\<S> ! i) @ t1sa @ ts,\n              label := [t2sa] @ label (s_inst \\<S> ! i),\n              return := Some t2sa\\<rparr> \\<turnstile> es : [] _> t2sa;\n        cl = Func_native i tf ts es\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                            tsa @ t1s = ts_c @ t1sa \\<and>\n                            tsa @ t2s = ts_c @ t2sa \\<and>\n                            tf = t1sa _> t2sa \\<and>\n                            i < length (s_inst \\<S>) \\<and>\n                            (s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ t1sa @ ts,\n                               label := [t2sa] @ label (s_inst \\<S> ! i),\n                               return :=\n                                 Some\n                                  t2sa\\<rparr> \\<turnstile> es : [] _> t2sa\n 4. \\<And>\\<S> \\<C> t1s' t2s'.\n       \\<lbrakk>cl_typing \\<S> cl (t1s' _> t2s');\n        cl = Func_native i tf ts es\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                            t1s' = ts_c @ t1s \\<and>\n                            t2s' = ts_c @ t2s \\<and>\n                            tf = t1s _> t2s \\<and>\n                            i < length (s_inst \\<S>) \\<and>\n                            (s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ t1s @ ts,\n                               label := [t2s] @ label (s_inst \\<S> ! i),\n                               return :=\n                                 Some\n                                  t2s\\<rparr> \\<turnstile> es : [] _> t2s\n 5. \\<And>ia \\<S> tvs vs \\<C> rs esa tsa.\n       \\<lbrakk>ia < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! ia)\n        \\<lparr>local := local (s_inst \\<S> ! ia) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> tsa;\n        \\<lbrakk>esa = [Callcl cl]; cl = Func_native i tf ts es\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                             [] = ts_c @ t1s \\<and>\n                             tsa = ts_c @ t2s \\<and>\n                             tf = t1s _> t2s \\<and>\n                             i < length (s_inst \\<S>) \\<and>\n                             (s_inst \\<S> ! i)\n                             \\<lparr>local :=\n local (s_inst \\<S> ! i) @ t1s @ ts,\n                                label := [t2s] @ label (s_inst \\<S> ! i),\n                                return :=\n                                  Some\n                                   t2s\\<rparr> \\<turnstile> es : [] _> t2s;\n        rs = Some tsa \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs ia vs esa tsa", "case (1 \\<C> b_es \\<S>)"], ["proof (state)\nthis:\n  \\<C> \\<turnstile> b_es : t1s' _> t2s'\n  $* b_es = [Callcl cl]\n  cl = Func_native i tf ts es\n\ngoal (5 subgoals):\n 1. \\<And>\\<C> b_es \\<S> t1s' t2s'.\n       \\<lbrakk>\\<C> \\<turnstile> b_es : t1s' _> t2s';\n        $* b_es = [Callcl cl]; cl = Func_native i tf ts es\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                            t1s' = ts_c @ t1s \\<and>\n                            t2s' = ts_c @ t2s \\<and>\n                            tf = t1s _> t2s \\<and>\n                            i < length (s_inst \\<S>) \\<and>\n                            (s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ t1s @ ts,\n                               label := [t2s] @ label (s_inst \\<S> ! i),\n                               return :=\n                                 Some\n                                  t2s\\<rparr> \\<turnstile> es : [] _> t2s\n 2. \\<And>\\<S> \\<C> esa t1s t2s e t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        \\<lbrakk>esa = [Callcl cl]; cl = Func_native i tf ts es\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                             t1s = ts_c @ t1sa \\<and>\n                             t2s = ts_c @ t2sa \\<and>\n                             tf = t1sa _> t2sa \\<and>\n                             i < length (s_inst \\<S>) \\<and>\n                             (s_inst \\<S> ! i)\n                             \\<lparr>local :=\n local (s_inst \\<S> ! i) @ t1sa @ ts,\n                                label := [t2sa] @ label (s_inst \\<S> ! i),\n                                return :=\n                                  Some\n                                   t2sa\\<rparr> \\<turnstile> es : [] _> t2sa;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        \\<lbrakk>e = Callcl cl; cl = Func_native i tf ts es\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2sa ts_c.\n                             t2s = ts_c @ t1s \\<and>\n                             t3s = ts_c @ t2sa \\<and>\n                             tf = t1s _> t2sa \\<and>\n                             i < length (s_inst \\<S>) \\<and>\n                             (s_inst \\<S> ! i)\n                             \\<lparr>local :=\n local (s_inst \\<S> ! i) @ t1s @ ts,\n                                label := [t2sa] @ label (s_inst \\<S> ! i),\n                                return :=\n                                  Some\n                                   t2sa\\<rparr> \\<turnstile> es : [] _> t2sa;\n        esa @ [e] = [Callcl cl]; cl = Func_native i tf ts es\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2s ts_c.\n                            t1s = ts_c @ t1sa \\<and>\n                            t3s = ts_c @ t2s \\<and>\n                            tf = t1sa _> t2s \\<and>\n                            i < length (s_inst \\<S>) \\<and>\n                            (s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ t1sa @ ts,\n                               label := [t2s] @ label (s_inst \\<S> ! i),\n                               return :=\n                                 Some\n                                  t2s\\<rparr> \\<turnstile> es : [] _> t2s\n 3. \\<And>\\<S> \\<C> t1s t2s tsa.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : t1s _> t2s;\n        cl = Func_native i tf ts es \\<Longrightarrow>\n        \\<exists>t1sa t2sa ts_c.\n           t1s = ts_c @ t1sa \\<and>\n           t2s = ts_c @ t2sa \\<and>\n           tf = t1sa _> t2sa \\<and>\n           i < length (s_inst \\<S>) \\<and> (s_inst \\<S> ! i)\n           \\<lparr>local := local (s_inst \\<S> ! i) @ t1sa @ ts,\n              label := [t2sa] @ label (s_inst \\<S> ! i),\n              return := Some t2sa\\<rparr> \\<turnstile> es : [] _> t2sa;\n        cl = Func_native i tf ts es\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                            tsa @ t1s = ts_c @ t1sa \\<and>\n                            tsa @ t2s = ts_c @ t2sa \\<and>\n                            tf = t1sa _> t2sa \\<and>\n                            i < length (s_inst \\<S>) \\<and>\n                            (s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ t1sa @ ts,\n                               label := [t2sa] @ label (s_inst \\<S> ! i),\n                               return :=\n                                 Some\n                                  t2sa\\<rparr> \\<turnstile> es : [] _> t2sa\n 4. \\<And>\\<S> \\<C> t1s' t2s'.\n       \\<lbrakk>cl_typing \\<S> cl (t1s' _> t2s');\n        cl = Func_native i tf ts es\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                            t1s' = ts_c @ t1s \\<and>\n                            t2s' = ts_c @ t2s \\<and>\n                            tf = t1s _> t2s \\<and>\n                            i < length (s_inst \\<S>) \\<and>\n                            (s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ t1s @ ts,\n                               label := [t2s] @ label (s_inst \\<S> ! i),\n                               return :=\n                                 Some\n                                  t2s\\<rparr> \\<turnstile> es : [] _> t2s\n 5. \\<And>ia \\<S> tvs vs \\<C> rs esa tsa.\n       \\<lbrakk>ia < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! ia)\n        \\<lparr>local := local (s_inst \\<S> ! ia) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> tsa;\n        \\<lbrakk>esa = [Callcl cl]; cl = Func_native i tf ts es\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                             [] = ts_c @ t1s \\<and>\n                             tsa = ts_c @ t2s \\<and>\n                             tf = t1s _> t2s \\<and>\n                             i < length (s_inst \\<S>) \\<and>\n                             (s_inst \\<S> ! i)\n                             \\<lparr>local :=\n local (s_inst \\<S> ! i) @ t1s @ ts,\n                                label := [t2s] @ label (s_inst \\<S> ! i),\n                                return :=\n                                  Some\n                                   t2s\\<rparr> \\<turnstile> es : [] _> t2s;\n        rs = Some tsa \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs ia vs esa tsa", "thus ?case"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> b_es : t1s' _> t2s'\n  $* b_es = [Callcl cl]\n  cl = Func_native i tf ts es\n\ngoal (1 subgoal):\n 1. \\<exists>t1s t2s ts_c.\n       t1s' = ts_c @ t1s \\<and>\n       t2s' = ts_c @ t2s \\<and>\n       tf = t1s _> t2s \\<and>\n       i < length (s_inst \\<S>) \\<and> (s_inst \\<S> ! i)\n       \\<lparr>local := local (s_inst \\<S> ! i) @ t1s @ ts,\n          label := [t2s] @ label (s_inst \\<S> ! i),\n          return := Some t2s\\<rparr> \\<turnstile> es : [] _> t2s", "by auto"], ["proof (state)\nthis:\n  \\<exists>t1s t2s ts_c.\n     t1s' = ts_c @ t1s \\<and>\n     t2s' = ts_c @ t2s \\<and>\n     tf = t1s _> t2s \\<and>\n     i < length (s_inst \\<S>) \\<and> (s_inst \\<S> ! i)\n     \\<lparr>local := local (s_inst \\<S> ! i) @ t1s @ ts,\n        label := [t2s] @ label (s_inst \\<S> ! i),\n        return := Some t2s\\<rparr> \\<turnstile> es : [] _> t2s\n\ngoal (4 subgoals):\n 1. \\<And>\\<S> \\<C> esa t1s t2s e t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        \\<lbrakk>esa = [Callcl cl]; cl = Func_native i tf ts es\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                             t1s = ts_c @ t1sa \\<and>\n                             t2s = ts_c @ t2sa \\<and>\n                             tf = t1sa _> t2sa \\<and>\n                             i < length (s_inst \\<S>) \\<and>\n                             (s_inst \\<S> ! i)\n                             \\<lparr>local :=\n local (s_inst \\<S> ! i) @ t1sa @ ts,\n                                label := [t2sa] @ label (s_inst \\<S> ! i),\n                                return :=\n                                  Some\n                                   t2sa\\<rparr> \\<turnstile> es : [] _> t2sa;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        \\<lbrakk>e = Callcl cl; cl = Func_native i tf ts es\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2sa ts_c.\n                             t2s = ts_c @ t1s \\<and>\n                             t3s = ts_c @ t2sa \\<and>\n                             tf = t1s _> t2sa \\<and>\n                             i < length (s_inst \\<S>) \\<and>\n                             (s_inst \\<S> ! i)\n                             \\<lparr>local :=\n local (s_inst \\<S> ! i) @ t1s @ ts,\n                                label := [t2sa] @ label (s_inst \\<S> ! i),\n                                return :=\n                                  Some\n                                   t2sa\\<rparr> \\<turnstile> es : [] _> t2sa;\n        esa @ [e] = [Callcl cl]; cl = Func_native i tf ts es\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2s ts_c.\n                            t1s = ts_c @ t1sa \\<and>\n                            t3s = ts_c @ t2s \\<and>\n                            tf = t1sa _> t2s \\<and>\n                            i < length (s_inst \\<S>) \\<and>\n                            (s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ t1sa @ ts,\n                               label := [t2s] @ label (s_inst \\<S> ! i),\n                               return :=\n                                 Some\n                                  t2s\\<rparr> \\<turnstile> es : [] _> t2s\n 2. \\<And>\\<S> \\<C> t1s t2s tsa.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : t1s _> t2s;\n        cl = Func_native i tf ts es \\<Longrightarrow>\n        \\<exists>t1sa t2sa ts_c.\n           t1s = ts_c @ t1sa \\<and>\n           t2s = ts_c @ t2sa \\<and>\n           tf = t1sa _> t2sa \\<and>\n           i < length (s_inst \\<S>) \\<and> (s_inst \\<S> ! i)\n           \\<lparr>local := local (s_inst \\<S> ! i) @ t1sa @ ts,\n              label := [t2sa] @ label (s_inst \\<S> ! i),\n              return := Some t2sa\\<rparr> \\<turnstile> es : [] _> t2sa;\n        cl = Func_native i tf ts es\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                            tsa @ t1s = ts_c @ t1sa \\<and>\n                            tsa @ t2s = ts_c @ t2sa \\<and>\n                            tf = t1sa _> t2sa \\<and>\n                            i < length (s_inst \\<S>) \\<and>\n                            (s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ t1sa @ ts,\n                               label := [t2sa] @ label (s_inst \\<S> ! i),\n                               return :=\n                                 Some\n                                  t2sa\\<rparr> \\<turnstile> es : [] _> t2sa\n 3. \\<And>\\<S> \\<C> t1s' t2s'.\n       \\<lbrakk>cl_typing \\<S> cl (t1s' _> t2s');\n        cl = Func_native i tf ts es\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                            t1s' = ts_c @ t1s \\<and>\n                            t2s' = ts_c @ t2s \\<and>\n                            tf = t1s _> t2s \\<and>\n                            i < length (s_inst \\<S>) \\<and>\n                            (s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ t1s @ ts,\n                               label := [t2s] @ label (s_inst \\<S> ! i),\n                               return :=\n                                 Some\n                                  t2s\\<rparr> \\<turnstile> es : [] _> t2s\n 4. \\<And>ia \\<S> tvs vs \\<C> rs esa tsa.\n       \\<lbrakk>ia < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! ia)\n        \\<lparr>local := local (s_inst \\<S> ! ia) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> tsa;\n        \\<lbrakk>esa = [Callcl cl]; cl = Func_native i tf ts es\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                             [] = ts_c @ t1s \\<and>\n                             tsa = ts_c @ t2s \\<and>\n                             tf = t1s _> t2s \\<and>\n                             i < length (s_inst \\<S>) \\<and>\n                             (s_inst \\<S> ! i)\n                             \\<lparr>local :=\n local (s_inst \\<S> ! i) @ t1s @ ts,\n                                label := [t2s] @ label (s_inst \\<S> ! i),\n                                return :=\n                                  Some\n                                   t2s\\<rparr> \\<turnstile> es : [] _> t2s;\n        rs = Some tsa \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs ia vs esa tsa", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<S> \\<C> esa t1s t2s e t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        \\<lbrakk>esa = [Callcl cl]; cl = Func_native i tf ts es\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                             t1s = ts_c @ t1sa \\<and>\n                             t2s = ts_c @ t2sa \\<and>\n                             tf = t1sa _> t2sa \\<and>\n                             i < length (s_inst \\<S>) \\<and>\n                             (s_inst \\<S> ! i)\n                             \\<lparr>local :=\n local (s_inst \\<S> ! i) @ t1sa @ ts,\n                                label := [t2sa] @ label (s_inst \\<S> ! i),\n                                return :=\n                                  Some\n                                   t2sa\\<rparr> \\<turnstile> es : [] _> t2sa;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        \\<lbrakk>e = Callcl cl; cl = Func_native i tf ts es\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2sa ts_c.\n                             t2s = ts_c @ t1s \\<and>\n                             t3s = ts_c @ t2sa \\<and>\n                             tf = t1s _> t2sa \\<and>\n                             i < length (s_inst \\<S>) \\<and>\n                             (s_inst \\<S> ! i)\n                             \\<lparr>local :=\n local (s_inst \\<S> ! i) @ t1s @ ts,\n                                label := [t2sa] @ label (s_inst \\<S> ! i),\n                                return :=\n                                  Some\n                                   t2sa\\<rparr> \\<turnstile> es : [] _> t2sa;\n        esa @ [e] = [Callcl cl]; cl = Func_native i tf ts es\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2s ts_c.\n                            t1s = ts_c @ t1sa \\<and>\n                            t3s = ts_c @ t2s \\<and>\n                            tf = t1sa _> t2s \\<and>\n                            i < length (s_inst \\<S>) \\<and>\n                            (s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ t1sa @ ts,\n                               label := [t2s] @ label (s_inst \\<S> ! i),\n                               return :=\n                                 Some\n                                  t2s\\<rparr> \\<turnstile> es : [] _> t2s\n 2. \\<And>\\<S> \\<C> t1s t2s tsa.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : t1s _> t2s;\n        cl = Func_native i tf ts es \\<Longrightarrow>\n        \\<exists>t1sa t2sa ts_c.\n           t1s = ts_c @ t1sa \\<and>\n           t2s = ts_c @ t2sa \\<and>\n           tf = t1sa _> t2sa \\<and>\n           i < length (s_inst \\<S>) \\<and> (s_inst \\<S> ! i)\n           \\<lparr>local := local (s_inst \\<S> ! i) @ t1sa @ ts,\n              label := [t2sa] @ label (s_inst \\<S> ! i),\n              return := Some t2sa\\<rparr> \\<turnstile> es : [] _> t2sa;\n        cl = Func_native i tf ts es\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                            tsa @ t1s = ts_c @ t1sa \\<and>\n                            tsa @ t2s = ts_c @ t2sa \\<and>\n                            tf = t1sa _> t2sa \\<and>\n                            i < length (s_inst \\<S>) \\<and>\n                            (s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ t1sa @ ts,\n                               label := [t2sa] @ label (s_inst \\<S> ! i),\n                               return :=\n                                 Some\n                                  t2sa\\<rparr> \\<turnstile> es : [] _> t2sa\n 3. \\<And>\\<S> \\<C> t1s' t2s'.\n       \\<lbrakk>cl_typing \\<S> cl (t1s' _> t2s');\n        cl = Func_native i tf ts es\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                            t1s' = ts_c @ t1s \\<and>\n                            t2s' = ts_c @ t2s \\<and>\n                            tf = t1s _> t2s \\<and>\n                            i < length (s_inst \\<S>) \\<and>\n                            (s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ t1s @ ts,\n                               label := [t2s] @ label (s_inst \\<S> ! i),\n                               return :=\n                                 Some\n                                  t2s\\<rparr> \\<turnstile> es : [] _> t2s\n 4. \\<And>ia \\<S> tvs vs \\<C> rs esa tsa.\n       \\<lbrakk>ia < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! ia)\n        \\<lparr>local := local (s_inst \\<S> ! ia) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> tsa;\n        \\<lbrakk>esa = [Callcl cl]; cl = Func_native i tf ts es\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                             [] = ts_c @ t1s \\<and>\n                             tsa = ts_c @ t2s \\<and>\n                             tf = t1s _> t2s \\<and>\n                             i < length (s_inst \\<S>) \\<and>\n                             (s_inst \\<S> ! i)\n                             \\<lparr>local :=\n local (s_inst \\<S> ! i) @ t1s @ ts,\n                                label := [t2s] @ label (s_inst \\<S> ! i),\n                                return :=\n                                  Some\n                                   t2s\\<rparr> \\<turnstile> es : [] _> t2s;\n        rs = Some tsa \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs ia vs esa tsa", "case (2 \\<S> \\<C> es t1s t2s e t3s)"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> t2s\n  \\<lbrakk>es = [Callcl cl]; cl = Func_native i tf ts es\\<rbrakk>\n  \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                       t1s = ts_c @ t1sa \\<and>\n                       t2s = ts_c @ t2sa \\<and>\n                       tf = t1sa _> t2sa \\<and>\n                       i < length (s_inst \\<S>) \\<and> (s_inst \\<S> ! i)\n                       \\<lparr>local := local (s_inst \\<S> ! i) @ t1sa @ ts,\n                          label := [t2sa] @ label (s_inst \\<S> ! i),\n                          return :=\n                            Some t2sa\\<rparr> \\<turnstile> es : [] _> t2sa\n  \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s\n  \\<lbrakk>e = Callcl cl; cl = Func_native i tf ts es\\<rbrakk>\n  \\<Longrightarrow> \\<exists>t1s t2sa ts_c.\n                       t2s = ts_c @ t1s \\<and>\n                       t3s = ts_c @ t2sa \\<and>\n                       tf = t1s _> t2sa \\<and>\n                       i < length (s_inst \\<S>) \\<and> (s_inst \\<S> ! i)\n                       \\<lparr>local := local (s_inst \\<S> ! i) @ t1s @ ts,\n                          label := [t2sa] @ label (s_inst \\<S> ! i),\n                          return :=\n                            Some t2sa\\<rparr> \\<turnstile> es : [] _> t2sa\n  es @ [e] = [Callcl cl]\n  cl = Func_native i tf ts es\n\ngoal (4 subgoals):\n 1. \\<And>\\<S> \\<C> esa t1s t2s e t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        \\<lbrakk>esa = [Callcl cl]; cl = Func_native i tf ts es\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                             t1s = ts_c @ t1sa \\<and>\n                             t2s = ts_c @ t2sa \\<and>\n                             tf = t1sa _> t2sa \\<and>\n                             i < length (s_inst \\<S>) \\<and>\n                             (s_inst \\<S> ! i)\n                             \\<lparr>local :=\n local (s_inst \\<S> ! i) @ t1sa @ ts,\n                                label := [t2sa] @ label (s_inst \\<S> ! i),\n                                return :=\n                                  Some\n                                   t2sa\\<rparr> \\<turnstile> es : [] _> t2sa;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        \\<lbrakk>e = Callcl cl; cl = Func_native i tf ts es\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2sa ts_c.\n                             t2s = ts_c @ t1s \\<and>\n                             t3s = ts_c @ t2sa \\<and>\n                             tf = t1s _> t2sa \\<and>\n                             i < length (s_inst \\<S>) \\<and>\n                             (s_inst \\<S> ! i)\n                             \\<lparr>local :=\n local (s_inst \\<S> ! i) @ t1s @ ts,\n                                label := [t2sa] @ label (s_inst \\<S> ! i),\n                                return :=\n                                  Some\n                                   t2sa\\<rparr> \\<turnstile> es : [] _> t2sa;\n        esa @ [e] = [Callcl cl]; cl = Func_native i tf ts es\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2s ts_c.\n                            t1s = ts_c @ t1sa \\<and>\n                            t3s = ts_c @ t2s \\<and>\n                            tf = t1sa _> t2s \\<and>\n                            i < length (s_inst \\<S>) \\<and>\n                            (s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ t1sa @ ts,\n                               label := [t2s] @ label (s_inst \\<S> ! i),\n                               return :=\n                                 Some\n                                  t2s\\<rparr> \\<turnstile> es : [] _> t2s\n 2. \\<And>\\<S> \\<C> t1s t2s tsa.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : t1s _> t2s;\n        cl = Func_native i tf ts es \\<Longrightarrow>\n        \\<exists>t1sa t2sa ts_c.\n           t1s = ts_c @ t1sa \\<and>\n           t2s = ts_c @ t2sa \\<and>\n           tf = t1sa _> t2sa \\<and>\n           i < length (s_inst \\<S>) \\<and> (s_inst \\<S> ! i)\n           \\<lparr>local := local (s_inst \\<S> ! i) @ t1sa @ ts,\n              label := [t2sa] @ label (s_inst \\<S> ! i),\n              return := Some t2sa\\<rparr> \\<turnstile> es : [] _> t2sa;\n        cl = Func_native i tf ts es\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                            tsa @ t1s = ts_c @ t1sa \\<and>\n                            tsa @ t2s = ts_c @ t2sa \\<and>\n                            tf = t1sa _> t2sa \\<and>\n                            i < length (s_inst \\<S>) \\<and>\n                            (s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ t1sa @ ts,\n                               label := [t2sa] @ label (s_inst \\<S> ! i),\n                               return :=\n                                 Some\n                                  t2sa\\<rparr> \\<turnstile> es : [] _> t2sa\n 3. \\<And>\\<S> \\<C> t1s' t2s'.\n       \\<lbrakk>cl_typing \\<S> cl (t1s' _> t2s');\n        cl = Func_native i tf ts es\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                            t1s' = ts_c @ t1s \\<and>\n                            t2s' = ts_c @ t2s \\<and>\n                            tf = t1s _> t2s \\<and>\n                            i < length (s_inst \\<S>) \\<and>\n                            (s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ t1s @ ts,\n                               label := [t2s] @ label (s_inst \\<S> ! i),\n                               return :=\n                                 Some\n                                  t2s\\<rparr> \\<turnstile> es : [] _> t2s\n 4. \\<And>ia \\<S> tvs vs \\<C> rs esa tsa.\n       \\<lbrakk>ia < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! ia)\n        \\<lparr>local := local (s_inst \\<S> ! ia) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> tsa;\n        \\<lbrakk>esa = [Callcl cl]; cl = Func_native i tf ts es\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                             [] = ts_c @ t1s \\<and>\n                             tsa = ts_c @ t2s \\<and>\n                             tf = t1s _> t2s \\<and>\n                             i < length (s_inst \\<S>) \\<and>\n                             (s_inst \\<S> ! i)\n                             \\<lparr>local :=\n local (s_inst \\<S> ! i) @ t1s @ ts,\n                                label := [t2s] @ label (s_inst \\<S> ! i),\n                                return :=\n                                  Some\n                                   t2s\\<rparr> \\<turnstile> es : [] _> t2s;\n        rs = Some tsa \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs ia vs esa tsa", "have \"\\<C> \\<turnstile> [] : (t1s _> t2s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> [] : t1s _> t2s", "using 2(1,5) unlift_b_e"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> t2s\n  es @ [e] = [Callcl cl]\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> $* ?b_es : ?tf \\<Longrightarrow>\n  ?\\<C> \\<turnstile> ?b_es : ?tf\n\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> [] : t1s _> t2s", "by (metis Nil_is_map_conv append_Nil butlast_snoc)"], ["proof (state)\nthis:\n  \\<C> \\<turnstile> [] : t1s _> t2s\n\ngoal (4 subgoals):\n 1. \\<And>\\<S> \\<C> esa t1s t2s e t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        \\<lbrakk>esa = [Callcl cl]; cl = Func_native i tf ts es\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                             t1s = ts_c @ t1sa \\<and>\n                             t2s = ts_c @ t2sa \\<and>\n                             tf = t1sa _> t2sa \\<and>\n                             i < length (s_inst \\<S>) \\<and>\n                             (s_inst \\<S> ! i)\n                             \\<lparr>local :=\n local (s_inst \\<S> ! i) @ t1sa @ ts,\n                                label := [t2sa] @ label (s_inst \\<S> ! i),\n                                return :=\n                                  Some\n                                   t2sa\\<rparr> \\<turnstile> es : [] _> t2sa;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        \\<lbrakk>e = Callcl cl; cl = Func_native i tf ts es\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2sa ts_c.\n                             t2s = ts_c @ t1s \\<and>\n                             t3s = ts_c @ t2sa \\<and>\n                             tf = t1s _> t2sa \\<and>\n                             i < length (s_inst \\<S>) \\<and>\n                             (s_inst \\<S> ! i)\n                             \\<lparr>local :=\n local (s_inst \\<S> ! i) @ t1s @ ts,\n                                label := [t2sa] @ label (s_inst \\<S> ! i),\n                                return :=\n                                  Some\n                                   t2sa\\<rparr> \\<turnstile> es : [] _> t2sa;\n        esa @ [e] = [Callcl cl]; cl = Func_native i tf ts es\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2s ts_c.\n                            t1s = ts_c @ t1sa \\<and>\n                            t3s = ts_c @ t2s \\<and>\n                            tf = t1sa _> t2s \\<and>\n                            i < length (s_inst \\<S>) \\<and>\n                            (s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ t1sa @ ts,\n                               label := [t2s] @ label (s_inst \\<S> ! i),\n                               return :=\n                                 Some\n                                  t2s\\<rparr> \\<turnstile> es : [] _> t2s\n 2. \\<And>\\<S> \\<C> t1s t2s tsa.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : t1s _> t2s;\n        cl = Func_native i tf ts es \\<Longrightarrow>\n        \\<exists>t1sa t2sa ts_c.\n           t1s = ts_c @ t1sa \\<and>\n           t2s = ts_c @ t2sa \\<and>\n           tf = t1sa _> t2sa \\<and>\n           i < length (s_inst \\<S>) \\<and> (s_inst \\<S> ! i)\n           \\<lparr>local := local (s_inst \\<S> ! i) @ t1sa @ ts,\n              label := [t2sa] @ label (s_inst \\<S> ! i),\n              return := Some t2sa\\<rparr> \\<turnstile> es : [] _> t2sa;\n        cl = Func_native i tf ts es\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                            tsa @ t1s = ts_c @ t1sa \\<and>\n                            tsa @ t2s = ts_c @ t2sa \\<and>\n                            tf = t1sa _> t2sa \\<and>\n                            i < length (s_inst \\<S>) \\<and>\n                            (s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ t1sa @ ts,\n                               label := [t2sa] @ label (s_inst \\<S> ! i),\n                               return :=\n                                 Some\n                                  t2sa\\<rparr> \\<turnstile> es : [] _> t2sa\n 3. \\<And>\\<S> \\<C> t1s' t2s'.\n       \\<lbrakk>cl_typing \\<S> cl (t1s' _> t2s');\n        cl = Func_native i tf ts es\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                            t1s' = ts_c @ t1s \\<and>\n                            t2s' = ts_c @ t2s \\<and>\n                            tf = t1s _> t2s \\<and>\n                            i < length (s_inst \\<S>) \\<and>\n                            (s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ t1s @ ts,\n                               label := [t2s] @ label (s_inst \\<S> ! i),\n                               return :=\n                                 Some\n                                  t2s\\<rparr> \\<turnstile> es : [] _> t2s\n 4. \\<And>ia \\<S> tvs vs \\<C> rs esa tsa.\n       \\<lbrakk>ia < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! ia)\n        \\<lparr>local := local (s_inst \\<S> ! ia) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> tsa;\n        \\<lbrakk>esa = [Callcl cl]; cl = Func_native i tf ts es\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                             [] = ts_c @ t1s \\<and>\n                             tsa = ts_c @ t2s \\<and>\n                             tf = t1s _> t2s \\<and>\n                             i < length (s_inst \\<S>) \\<and>\n                             (s_inst \\<S> ! i)\n                             \\<lparr>local :=\n local (s_inst \\<S> ! i) @ t1s @ ts,\n                                label := [t2s] @ label (s_inst \\<S> ! i),\n                                return :=\n                                  Some\n                                   t2s\\<rparr> \\<turnstile> es : [] _> t2s;\n        rs = Some tsa \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs ia vs esa tsa", "thus ?case"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [] : t1s _> t2s\n\ngoal (1 subgoal):\n 1. \\<exists>t1sa t2s ts_c.\n       t1s = ts_c @ t1sa \\<and>\n       t3s = ts_c @ t2s \\<and>\n       tf = t1sa _> t2s \\<and>\n       i < length (s_inst \\<S>) \\<and> (s_inst \\<S> ! i)\n       \\<lparr>local := local (s_inst \\<S> ! i) @ t1sa @ ts,\n          label := [t2s] @ label (s_inst \\<S> ! i),\n          return := Some t2s\\<rparr> \\<turnstile> es : [] _> t2s", "using 2(4,5,6)"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [] : t1s _> t2s\n  \\<lbrakk>e = Callcl cl; cl = Func_native i tf ts es\\<rbrakk>\n  \\<Longrightarrow> \\<exists>t1s t2sa ts_c.\n                       t2s = ts_c @ t1s \\<and>\n                       t3s = ts_c @ t2sa \\<and>\n                       tf = t1s _> t2sa \\<and>\n                       i < length (s_inst \\<S>) \\<and> (s_inst \\<S> ! i)\n                       \\<lparr>local := local (s_inst \\<S> ! i) @ t1s @ ts,\n                          label := [t2sa] @ label (s_inst \\<S> ! i),\n                          return :=\n                            Some t2sa\\<rparr> \\<turnstile> es : [] _> t2sa\n  es @ [e] = [Callcl cl]\n  cl = Func_native i tf ts es\n\ngoal (1 subgoal):\n 1. \\<exists>t1sa t2s ts_c.\n       t1s = ts_c @ t1sa \\<and>\n       t3s = ts_c @ t2s \\<and>\n       tf = t1sa _> t2s \\<and>\n       i < length (s_inst \\<S>) \\<and> (s_inst \\<S> ! i)\n       \\<lparr>local := local (s_inst \\<S> ! i) @ t1sa @ ts,\n          label := [t2s] @ label (s_inst \\<S> ! i),\n          return := Some t2s\\<rparr> \\<turnstile> es : [] _> t2s", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>t1sa t2s ts_c.\n     t1s = ts_c @ t1sa \\<and>\n     t3s = ts_c @ t2s \\<and>\n     tf = t1sa _> t2s \\<and>\n     i < length (s_inst \\<S>) \\<and> (s_inst \\<S> ! i)\n     \\<lparr>local := local (s_inst \\<S> ! i) @ t1sa @ ts,\n        label := [t2s] @ label (s_inst \\<S> ! i),\n        return := Some t2s\\<rparr> \\<turnstile> es : [] _> t2s\n\ngoal (3 subgoals):\n 1. \\<And>\\<S> \\<C> t1s t2s tsa.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : t1s _> t2s;\n        cl = Func_native i tf ts es \\<Longrightarrow>\n        \\<exists>t1sa t2sa ts_c.\n           t1s = ts_c @ t1sa \\<and>\n           t2s = ts_c @ t2sa \\<and>\n           tf = t1sa _> t2sa \\<and>\n           i < length (s_inst \\<S>) \\<and> (s_inst \\<S> ! i)\n           \\<lparr>local := local (s_inst \\<S> ! i) @ t1sa @ ts,\n              label := [t2sa] @ label (s_inst \\<S> ! i),\n              return := Some t2sa\\<rparr> \\<turnstile> es : [] _> t2sa;\n        cl = Func_native i tf ts es\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                            tsa @ t1s = ts_c @ t1sa \\<and>\n                            tsa @ t2s = ts_c @ t2sa \\<and>\n                            tf = t1sa _> t2sa \\<and>\n                            i < length (s_inst \\<S>) \\<and>\n                            (s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ t1sa @ ts,\n                               label := [t2sa] @ label (s_inst \\<S> ! i),\n                               return :=\n                                 Some\n                                  t2sa\\<rparr> \\<turnstile> es : [] _> t2sa\n 2. \\<And>\\<S> \\<C> t1s' t2s'.\n       \\<lbrakk>cl_typing \\<S> cl (t1s' _> t2s');\n        cl = Func_native i tf ts es\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                            t1s' = ts_c @ t1s \\<and>\n                            t2s' = ts_c @ t2s \\<and>\n                            tf = t1s _> t2s \\<and>\n                            i < length (s_inst \\<S>) \\<and>\n                            (s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ t1s @ ts,\n                               label := [t2s] @ label (s_inst \\<S> ! i),\n                               return :=\n                                 Some\n                                  t2s\\<rparr> \\<turnstile> es : [] _> t2s\n 3. \\<And>ia \\<S> tvs vs \\<C> rs esa tsa.\n       \\<lbrakk>ia < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! ia)\n        \\<lparr>local := local (s_inst \\<S> ! ia) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> tsa;\n        \\<lbrakk>esa = [Callcl cl]; cl = Func_native i tf ts es\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                             [] = ts_c @ t1s \\<and>\n                             tsa = ts_c @ t2s \\<and>\n                             tf = t1s _> t2s \\<and>\n                             i < length (s_inst \\<S>) \\<and>\n                             (s_inst \\<S> ! i)\n                             \\<lparr>local :=\n local (s_inst \\<S> ! i) @ t1s @ ts,\n                                label := [t2s] @ label (s_inst \\<S> ! i),\n                                return :=\n                                  Some\n                                   t2s\\<rparr> \\<turnstile> es : [] _> t2s;\n        rs = Some tsa \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs ia vs esa tsa", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<S> \\<C> t1s t2s tsa.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : t1s _> t2s;\n        cl = Func_native i tf ts es \\<Longrightarrow>\n        \\<exists>t1sa t2sa ts_c.\n           t1s = ts_c @ t1sa \\<and>\n           t2s = ts_c @ t2sa \\<and>\n           tf = t1sa _> t2sa \\<and>\n           i < length (s_inst \\<S>) \\<and> (s_inst \\<S> ! i)\n           \\<lparr>local := local (s_inst \\<S> ! i) @ t1sa @ ts,\n              label := [t2sa] @ label (s_inst \\<S> ! i),\n              return := Some t2sa\\<rparr> \\<turnstile> es : [] _> t2sa;\n        cl = Func_native i tf ts es\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                            tsa @ t1s = ts_c @ t1sa \\<and>\n                            tsa @ t2s = ts_c @ t2sa \\<and>\n                            tf = t1sa _> t2sa \\<and>\n                            i < length (s_inst \\<S>) \\<and>\n                            (s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ t1sa @ ts,\n                               label := [t2sa] @ label (s_inst \\<S> ! i),\n                               return :=\n                                 Some\n                                  t2sa\\<rparr> \\<turnstile> es : [] _> t2sa\n 2. \\<And>\\<S> \\<C> t1s' t2s'.\n       \\<lbrakk>cl_typing \\<S> cl (t1s' _> t2s');\n        cl = Func_native i tf ts es\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                            t1s' = ts_c @ t1s \\<and>\n                            t2s' = ts_c @ t2s \\<and>\n                            tf = t1s _> t2s \\<and>\n                            i < length (s_inst \\<S>) \\<and>\n                            (s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ t1s @ ts,\n                               label := [t2s] @ label (s_inst \\<S> ! i),\n                               return :=\n                                 Some\n                                  t2s\\<rparr> \\<turnstile> es : [] _> t2s\n 3. \\<And>ia \\<S> tvs vs \\<C> rs esa tsa.\n       \\<lbrakk>ia < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! ia)\n        \\<lparr>local := local (s_inst \\<S> ! ia) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> tsa;\n        \\<lbrakk>esa = [Callcl cl]; cl = Func_native i tf ts es\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                             [] = ts_c @ t1s \\<and>\n                             tsa = ts_c @ t2s \\<and>\n                             tf = t1s _> t2s \\<and>\n                             i < length (s_inst \\<S>) \\<and>\n                             (s_inst \\<S> ! i)\n                             \\<lparr>local :=\n local (s_inst \\<S> ! i) @ t1s @ ts,\n                                label := [t2s] @ label (s_inst \\<S> ! i),\n                                return :=\n                                  Some\n                                   t2s\\<rparr> \\<turnstile> es : [] _> t2s;\n        rs = Some tsa \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs ia vs esa tsa", "case (3 \\<S> \\<C> t1s t2s ts)"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : t1s _> t2s\n  cl = Func_native i tf ts es \\<Longrightarrow>\n  \\<exists>t1sa t2sa ts_c.\n     t1s = ts_c @ t1sa \\<and>\n     t2s = ts_c @ t2sa \\<and>\n     tf = t1sa _> t2sa \\<and>\n     i < length (s_inst \\<S>) \\<and> (s_inst \\<S> ! i)\n     \\<lparr>local := local (s_inst \\<S> ! i) @ t1sa @ ts,\n        label := [t2sa] @ label (s_inst \\<S> ! i),\n        return := Some t2sa\\<rparr> \\<turnstile> es : [] _> t2sa\n  cl = Func_native i tf ts es\n\ngoal (3 subgoals):\n 1. \\<And>\\<S> \\<C> t1s t2s tsa.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : t1s _> t2s;\n        cl = Func_native i tf ts es \\<Longrightarrow>\n        \\<exists>t1sa t2sa ts_c.\n           t1s = ts_c @ t1sa \\<and>\n           t2s = ts_c @ t2sa \\<and>\n           tf = t1sa _> t2sa \\<and>\n           i < length (s_inst \\<S>) \\<and> (s_inst \\<S> ! i)\n           \\<lparr>local := local (s_inst \\<S> ! i) @ t1sa @ ts,\n              label := [t2sa] @ label (s_inst \\<S> ! i),\n              return := Some t2sa\\<rparr> \\<turnstile> es : [] _> t2sa;\n        cl = Func_native i tf ts es\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                            tsa @ t1s = ts_c @ t1sa \\<and>\n                            tsa @ t2s = ts_c @ t2sa \\<and>\n                            tf = t1sa _> t2sa \\<and>\n                            i < length (s_inst \\<S>) \\<and>\n                            (s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ t1sa @ ts,\n                               label := [t2sa] @ label (s_inst \\<S> ! i),\n                               return :=\n                                 Some\n                                  t2sa\\<rparr> \\<turnstile> es : [] _> t2sa\n 2. \\<And>\\<S> \\<C> t1s' t2s'.\n       \\<lbrakk>cl_typing \\<S> cl (t1s' _> t2s');\n        cl = Func_native i tf ts es\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                            t1s' = ts_c @ t1s \\<and>\n                            t2s' = ts_c @ t2s \\<and>\n                            tf = t1s _> t2s \\<and>\n                            i < length (s_inst \\<S>) \\<and>\n                            (s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ t1s @ ts,\n                               label := [t2s] @ label (s_inst \\<S> ! i),\n                               return :=\n                                 Some\n                                  t2s\\<rparr> \\<turnstile> es : [] _> t2s\n 3. \\<And>ia \\<S> tvs vs \\<C> rs esa tsa.\n       \\<lbrakk>ia < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! ia)\n        \\<lparr>local := local (s_inst \\<S> ! ia) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> tsa;\n        \\<lbrakk>esa = [Callcl cl]; cl = Func_native i tf ts es\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                             [] = ts_c @ t1s \\<and>\n                             tsa = ts_c @ t2s \\<and>\n                             tf = t1s _> t2s \\<and>\n                             i < length (s_inst \\<S>) \\<and>\n                             (s_inst \\<S> ! i)\n                             \\<lparr>local :=\n local (s_inst \\<S> ! i) @ t1s @ ts,\n                                label := [t2s] @ label (s_inst \\<S> ! i),\n                                return :=\n                                  Some\n                                   t2s\\<rparr> \\<turnstile> es : [] _> t2s;\n        rs = Some tsa \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs ia vs esa tsa", "thus ?case"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : t1s _> t2s\n  cl = Func_native i tf ts es \\<Longrightarrow>\n  \\<exists>t1sa t2sa ts_c.\n     t1s = ts_c @ t1sa \\<and>\n     t2s = ts_c @ t2sa \\<and>\n     tf = t1sa _> t2sa \\<and>\n     i < length (s_inst \\<S>) \\<and> (s_inst \\<S> ! i)\n     \\<lparr>local := local (s_inst \\<S> ! i) @ t1sa @ ts,\n        label := [t2sa] @ label (s_inst \\<S> ! i),\n        return := Some t2sa\\<rparr> \\<turnstile> es : [] _> t2sa\n  cl = Func_native i tf ts es\n\ngoal (1 subgoal):\n 1. \\<exists>t1sa t2sa ts_c.\n       ts @ t1s = ts_c @ t1sa \\<and>\n       ts @ t2s = ts_c @ t2sa \\<and>\n       tf = t1sa _> t2sa \\<and>\n       i < length (s_inst \\<S>) \\<and> (s_inst \\<S> ! i)\n       \\<lparr>local := local (s_inst \\<S> ! i) @ t1sa @ ts,\n          label := [t2sa] @ label (s_inst \\<S> ! i),\n          return := Some t2sa\\<rparr> \\<turnstile> es : [] _> t2sa", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>t1sa t2sa ts_c.\n     ts @ t1s = ts_c @ t1sa \\<and>\n     ts @ t2s = ts_c @ t2sa \\<and>\n     tf = t1sa _> t2sa \\<and>\n     i < length (s_inst \\<S>) \\<and> (s_inst \\<S> ! i)\n     \\<lparr>local := local (s_inst \\<S> ! i) @ t1sa @ ts,\n        label := [t2sa] @ label (s_inst \\<S> ! i),\n        return := Some t2sa\\<rparr> \\<turnstile> es : [] _> t2sa\n\ngoal (2 subgoals):\n 1. \\<And>\\<S> \\<C> t1s' t2s'.\n       \\<lbrakk>cl_typing \\<S> cl (t1s' _> t2s');\n        cl = Func_native i tf ts es\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                            t1s' = ts_c @ t1s \\<and>\n                            t2s' = ts_c @ t2s \\<and>\n                            tf = t1s _> t2s \\<and>\n                            i < length (s_inst \\<S>) \\<and>\n                            (s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ t1s @ ts,\n                               label := [t2s] @ label (s_inst \\<S> ! i),\n                               return :=\n                                 Some\n                                  t2s\\<rparr> \\<turnstile> es : [] _> t2s\n 2. \\<And>ia \\<S> tvs vs \\<C> rs esa tsa.\n       \\<lbrakk>ia < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! ia)\n        \\<lparr>local := local (s_inst \\<S> ! ia) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> tsa;\n        \\<lbrakk>esa = [Callcl cl]; cl = Func_native i tf ts es\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                             [] = ts_c @ t1s \\<and>\n                             tsa = ts_c @ t2s \\<and>\n                             tf = t1s _> t2s \\<and>\n                             i < length (s_inst \\<S>) \\<and>\n                             (s_inst \\<S> ! i)\n                             \\<lparr>local :=\n local (s_inst \\<S> ! i) @ t1s @ ts,\n                                label := [t2s] @ label (s_inst \\<S> ! i),\n                                return :=\n                                  Some\n                                   t2s\\<rparr> \\<turnstile> es : [] _> t2s;\n        rs = Some tsa \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs ia vs esa tsa", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<S> \\<C> t1s' t2s'.\n       \\<lbrakk>cl_typing \\<S> cl (t1s' _> t2s');\n        cl = Func_native i tf ts es\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                            t1s' = ts_c @ t1s \\<and>\n                            t2s' = ts_c @ t2s \\<and>\n                            tf = t1s _> t2s \\<and>\n                            i < length (s_inst \\<S>) \\<and>\n                            (s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ t1s @ ts,\n                               label := [t2s] @ label (s_inst \\<S> ! i),\n                               return :=\n                                 Some\n                                  t2s\\<rparr> \\<turnstile> es : [] _> t2s\n 2. \\<And>ia \\<S> tvs vs \\<C> rs esa tsa.\n       \\<lbrakk>ia < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! ia)\n        \\<lparr>local := local (s_inst \\<S> ! ia) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> tsa;\n        \\<lbrakk>esa = [Callcl cl]; cl = Func_native i tf ts es\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                             [] = ts_c @ t1s \\<and>\n                             tsa = ts_c @ t2s \\<and>\n                             tf = t1s _> t2s \\<and>\n                             i < length (s_inst \\<S>) \\<and>\n                             (s_inst \\<S> ! i)\n                             \\<lparr>local :=\n local (s_inst \\<S> ! i) @ t1s @ ts,\n                                label := [t2s] @ label (s_inst \\<S> ! i),\n                                return :=\n                                  Some\n                                   t2s\\<rparr> \\<turnstile> es : [] _> t2s;\n        rs = Some tsa \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs ia vs esa tsa", "case (6 \\<S> \\<C>)"], ["proof (state)\nthis:\n  cl_typing \\<S> cl (t1s' _> t2s')\n  cl = Func_native i tf ts es\n\ngoal (2 subgoals):\n 1. \\<And>\\<S> \\<C> t1s' t2s'.\n       \\<lbrakk>cl_typing \\<S> cl (t1s' _> t2s');\n        cl = Func_native i tf ts es\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                            t1s' = ts_c @ t1s \\<and>\n                            t2s' = ts_c @ t2s \\<and>\n                            tf = t1s _> t2s \\<and>\n                            i < length (s_inst \\<S>) \\<and>\n                            (s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ t1s @ ts,\n                               label := [t2s] @ label (s_inst \\<S> ! i),\n                               return :=\n                                 Some\n                                  t2s\\<rparr> \\<turnstile> es : [] _> t2s\n 2. \\<And>ia \\<S> tvs vs \\<C> rs esa tsa.\n       \\<lbrakk>ia < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! ia)\n        \\<lparr>local := local (s_inst \\<S> ! ia) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> tsa;\n        \\<lbrakk>esa = [Callcl cl]; cl = Func_native i tf ts es\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                             [] = ts_c @ t1s \\<and>\n                             tsa = ts_c @ t2s \\<and>\n                             tf = t1s _> t2s \\<and>\n                             i < length (s_inst \\<S>) \\<and>\n                             (s_inst \\<S> ! i)\n                             \\<lparr>local :=\n local (s_inst \\<S> ! i) @ t1s @ ts,\n                                label := [t2s] @ label (s_inst \\<S> ! i),\n                                return :=\n                                  Some\n                                   t2s\\<rparr> \\<turnstile> es : [] _> t2s;\n        rs = Some tsa \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs ia vs esa tsa", "thus ?case"], ["proof (prove)\nusing this:\n  cl_typing \\<S> cl (t1s' _> t2s')\n  cl = Func_native i tf ts es\n\ngoal (1 subgoal):\n 1. \\<exists>t1s t2s ts_c.\n       t1s' = ts_c @ t1s \\<and>\n       t2s' = ts_c @ t2s \\<and>\n       tf = t1s _> t2s \\<and>\n       i < length (s_inst \\<S>) \\<and> (s_inst \\<S> ! i)\n       \\<lparr>local := local (s_inst \\<S> ! i) @ t1s @ ts,\n          label := [t2s] @ label (s_inst \\<S> ! i),\n          return := Some t2s\\<rparr> \\<turnstile> es : [] _> t2s", "unfolding cl_typing.simps"], ["proof (prove)\nusing this:\n  (\\<exists>i \\<S> \\<C> tf t1s t2s ts es.\n      \\<S> = \\<S> \\<and>\n      cl = Func_native i tf ts es \\<and>\n      t1s' _> t2s' = t1s _> t2s \\<and>\n      i < length (s_inst \\<S>) \\<and>\n      s_inst \\<S> ! i = \\<C> \\<and>\n      tf = t1s _> t2s \\<and> \\<C>\n      \\<lparr>local := local \\<C> @ t1s @ ts, label := [t2s] @ label \\<C>,\n         return := Some t2s\\<rparr> \\<turnstile> es : [] _> t2s) \\<or>\n  (\\<exists>\\<S> tf h.\n      \\<S> = \\<S> \\<and> cl = Func_host tf h \\<and> t1s' _> t2s' = tf)\n  cl = Func_native i tf ts es\n\ngoal (1 subgoal):\n 1. \\<exists>t1s t2s ts_c.\n       t1s' = ts_c @ t1s \\<and>\n       t2s' = ts_c @ t2s \\<and>\n       tf = t1s _> t2s \\<and>\n       i < length (s_inst \\<S>) \\<and> (s_inst \\<S> ! i)\n       \\<lparr>local := local (s_inst \\<S> ! i) @ t1s @ ts,\n          label := [t2s] @ label (s_inst \\<S> ! i),\n          return := Some t2s\\<rparr> \\<turnstile> es : [] _> t2s", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>t1s t2s ts_c.\n     t1s' = ts_c @ t1s \\<and>\n     t2s' = ts_c @ t2s \\<and>\n     tf = t1s _> t2s \\<and>\n     i < length (s_inst \\<S>) \\<and> (s_inst \\<S> ! i)\n     \\<lparr>local := local (s_inst \\<S> ! i) @ t1s @ ts,\n        label := [t2s] @ label (s_inst \\<S> ! i),\n        return := Some t2s\\<rparr> \\<turnstile> es : [] _> t2s\n\ngoal (1 subgoal):\n 1. \\<And>ia \\<S> tvs vs \\<C> rs esa tsa.\n       \\<lbrakk>ia < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! ia)\n        \\<lparr>local := local (s_inst \\<S> ! ia) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> tsa;\n        \\<lbrakk>esa = [Callcl cl]; cl = Func_native i tf ts es\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                             [] = ts_c @ t1s \\<and>\n                             tsa = ts_c @ t2s \\<and>\n                             tf = t1s _> t2s \\<and>\n                             i < length (s_inst \\<S>) \\<and>\n                             (s_inst \\<S> ! i)\n                             \\<lparr>local :=\n local (s_inst \\<S> ! i) @ t1s @ ts,\n                                label := [t2s] @ label (s_inst \\<S> ! i),\n                                return :=\n                                  Some\n                                   t2s\\<rparr> \\<turnstile> es : [] _> t2s;\n        rs = Some tsa \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs ia vs esa tsa", "qed"], ["", "lemma e_type_callcl_host:\n  assumes \"\\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : (t1s' _> t2s')\"\n          \"cl = Func_host tf f\"\n  shows \"\\<exists>t1s t2s ts_c. (t1s' = ts_c @ t1s)\n                        \\<and> (t2s' = ts_c @ t2s)\n                        \\<and> tf = (t1s _> t2s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t1s t2s ts_c.\n       t1s' = ts_c @ t1s \\<and> t2s' = ts_c @ t2s \\<and> tf = t1s _> t2s", "using assms"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : t1s' _> t2s'\n  cl = Func_host tf f\n\ngoal (1 subgoal):\n 1. \\<exists>t1s t2s ts_c.\n       t1s' = ts_c @ t1s \\<and> t2s' = ts_c @ t2s \\<and> tf = t1s _> t2s", "proof (induction \"\\<S>\" \"\\<C>\" \"[Callcl cl]\" \"(t1s' _> t2s')\" arbitrary: t1s' t2s')"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<C> b_es \\<S> t1s' t2s'.\n       \\<lbrakk>\\<C> \\<turnstile> b_es : t1s' _> t2s';\n        $* b_es = [Callcl cl]; cl = Func_host tf f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                            t1s' = ts_c @ t1s \\<and>\n                            t2s' = ts_c @ t2s \\<and> tf = t1s _> t2s\n 2. \\<And>\\<S> \\<C> es t1s t2s e t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> t2s;\n        \\<lbrakk>es = [Callcl cl]; cl = Func_host tf f\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                             t1s = ts_c @ t1sa \\<and>\n                             t2s = ts_c @ t2sa \\<and> tf = t1sa _> t2sa;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        \\<lbrakk>e = Callcl cl; cl = Func_host tf f\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2sa ts_c.\n                             t2s = ts_c @ t1s \\<and>\n                             t3s = ts_c @ t2sa \\<and> tf = t1s _> t2sa;\n        es @ [e] = [Callcl cl]; cl = Func_host tf f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2s ts_c.\n                            t1s = ts_c @ t1sa \\<and>\n                            t3s = ts_c @ t2s \\<and> tf = t1sa _> t2s\n 3. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : t1s _> t2s;\n        cl = Func_host tf f \\<Longrightarrow>\n        \\<exists>t1sa t2sa ts_c.\n           t1s = ts_c @ t1sa \\<and>\n           t2s = ts_c @ t2sa \\<and> tf = t1sa _> t2sa;\n        cl = Func_host tf f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                            ts @ t1s = ts_c @ t1sa \\<and>\n                            ts @ t2s = ts_c @ t2sa \\<and> tf = t1sa _> t2sa\n 4. \\<And>\\<S> \\<C> t1s' t2s'.\n       \\<lbrakk>cl_typing \\<S> cl (t1s' _> t2s');\n        cl = Func_host tf f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                            t1s' = ts_c @ t1s \\<and>\n                            t2s' = ts_c @ t2s \\<and> tf = t1s _> t2s\n 5. \\<And>i \\<S> tvs vs \\<C> rs es ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts;\n        \\<lbrakk>es = [Callcl cl]; cl = Func_host tf f\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                             [] = ts_c @ t1s \\<and>\n                             ts = ts_c @ t2s \\<and> tf = t1s _> t2s;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs i vs es ts", "case (1 \\<C> b_es \\<S>)"], ["proof (state)\nthis:\n  \\<C> \\<turnstile> b_es : t1s' _> t2s'\n  $* b_es = [Callcl cl]\n  cl = Func_host tf f\n\ngoal (5 subgoals):\n 1. \\<And>\\<C> b_es \\<S> t1s' t2s'.\n       \\<lbrakk>\\<C> \\<turnstile> b_es : t1s' _> t2s';\n        $* b_es = [Callcl cl]; cl = Func_host tf f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                            t1s' = ts_c @ t1s \\<and>\n                            t2s' = ts_c @ t2s \\<and> tf = t1s _> t2s\n 2. \\<And>\\<S> \\<C> es t1s t2s e t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> t2s;\n        \\<lbrakk>es = [Callcl cl]; cl = Func_host tf f\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                             t1s = ts_c @ t1sa \\<and>\n                             t2s = ts_c @ t2sa \\<and> tf = t1sa _> t2sa;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        \\<lbrakk>e = Callcl cl; cl = Func_host tf f\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2sa ts_c.\n                             t2s = ts_c @ t1s \\<and>\n                             t3s = ts_c @ t2sa \\<and> tf = t1s _> t2sa;\n        es @ [e] = [Callcl cl]; cl = Func_host tf f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2s ts_c.\n                            t1s = ts_c @ t1sa \\<and>\n                            t3s = ts_c @ t2s \\<and> tf = t1sa _> t2s\n 3. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : t1s _> t2s;\n        cl = Func_host tf f \\<Longrightarrow>\n        \\<exists>t1sa t2sa ts_c.\n           t1s = ts_c @ t1sa \\<and>\n           t2s = ts_c @ t2sa \\<and> tf = t1sa _> t2sa;\n        cl = Func_host tf f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                            ts @ t1s = ts_c @ t1sa \\<and>\n                            ts @ t2s = ts_c @ t2sa \\<and> tf = t1sa _> t2sa\n 4. \\<And>\\<S> \\<C> t1s' t2s'.\n       \\<lbrakk>cl_typing \\<S> cl (t1s' _> t2s');\n        cl = Func_host tf f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                            t1s' = ts_c @ t1s \\<and>\n                            t2s' = ts_c @ t2s \\<and> tf = t1s _> t2s\n 5. \\<And>i \\<S> tvs vs \\<C> rs es ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts;\n        \\<lbrakk>es = [Callcl cl]; cl = Func_host tf f\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                             [] = ts_c @ t1s \\<and>\n                             ts = ts_c @ t2s \\<and> tf = t1s _> t2s;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs i vs es ts", "thus ?case"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> b_es : t1s' _> t2s'\n  $* b_es = [Callcl cl]\n  cl = Func_host tf f\n\ngoal (1 subgoal):\n 1. \\<exists>t1s t2s ts_c.\n       t1s' = ts_c @ t1s \\<and> t2s' = ts_c @ t2s \\<and> tf = t1s _> t2s", "by auto"], ["proof (state)\nthis:\n  \\<exists>t1s t2s ts_c.\n     t1s' = ts_c @ t1s \\<and> t2s' = ts_c @ t2s \\<and> tf = t1s _> t2s\n\ngoal (4 subgoals):\n 1. \\<And>\\<S> \\<C> es t1s t2s e t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> t2s;\n        \\<lbrakk>es = [Callcl cl]; cl = Func_host tf f\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                             t1s = ts_c @ t1sa \\<and>\n                             t2s = ts_c @ t2sa \\<and> tf = t1sa _> t2sa;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        \\<lbrakk>e = Callcl cl; cl = Func_host tf f\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2sa ts_c.\n                             t2s = ts_c @ t1s \\<and>\n                             t3s = ts_c @ t2sa \\<and> tf = t1s _> t2sa;\n        es @ [e] = [Callcl cl]; cl = Func_host tf f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2s ts_c.\n                            t1s = ts_c @ t1sa \\<and>\n                            t3s = ts_c @ t2s \\<and> tf = t1sa _> t2s\n 2. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : t1s _> t2s;\n        cl = Func_host tf f \\<Longrightarrow>\n        \\<exists>t1sa t2sa ts_c.\n           t1s = ts_c @ t1sa \\<and>\n           t2s = ts_c @ t2sa \\<and> tf = t1sa _> t2sa;\n        cl = Func_host tf f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                            ts @ t1s = ts_c @ t1sa \\<and>\n                            ts @ t2s = ts_c @ t2sa \\<and> tf = t1sa _> t2sa\n 3. \\<And>\\<S> \\<C> t1s' t2s'.\n       \\<lbrakk>cl_typing \\<S> cl (t1s' _> t2s');\n        cl = Func_host tf f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                            t1s' = ts_c @ t1s \\<and>\n                            t2s' = ts_c @ t2s \\<and> tf = t1s _> t2s\n 4. \\<And>i \\<S> tvs vs \\<C> rs es ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts;\n        \\<lbrakk>es = [Callcl cl]; cl = Func_host tf f\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                             [] = ts_c @ t1s \\<and>\n                             ts = ts_c @ t2s \\<and> tf = t1s _> t2s;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs i vs es ts", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<S> \\<C> es t1s t2s e t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> t2s;\n        \\<lbrakk>es = [Callcl cl]; cl = Func_host tf f\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                             t1s = ts_c @ t1sa \\<and>\n                             t2s = ts_c @ t2sa \\<and> tf = t1sa _> t2sa;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        \\<lbrakk>e = Callcl cl; cl = Func_host tf f\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2sa ts_c.\n                             t2s = ts_c @ t1s \\<and>\n                             t3s = ts_c @ t2sa \\<and> tf = t1s _> t2sa;\n        es @ [e] = [Callcl cl]; cl = Func_host tf f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2s ts_c.\n                            t1s = ts_c @ t1sa \\<and>\n                            t3s = ts_c @ t2s \\<and> tf = t1sa _> t2s\n 2. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : t1s _> t2s;\n        cl = Func_host tf f \\<Longrightarrow>\n        \\<exists>t1sa t2sa ts_c.\n           t1s = ts_c @ t1sa \\<and>\n           t2s = ts_c @ t2sa \\<and> tf = t1sa _> t2sa;\n        cl = Func_host tf f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                            ts @ t1s = ts_c @ t1sa \\<and>\n                            ts @ t2s = ts_c @ t2sa \\<and> tf = t1sa _> t2sa\n 3. \\<And>\\<S> \\<C> t1s' t2s'.\n       \\<lbrakk>cl_typing \\<S> cl (t1s' _> t2s');\n        cl = Func_host tf f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                            t1s' = ts_c @ t1s \\<and>\n                            t2s' = ts_c @ t2s \\<and> tf = t1s _> t2s\n 4. \\<And>i \\<S> tvs vs \\<C> rs es ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts;\n        \\<lbrakk>es = [Callcl cl]; cl = Func_host tf f\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                             [] = ts_c @ t1s \\<and>\n                             ts = ts_c @ t2s \\<and> tf = t1s _> t2s;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs i vs es ts", "case (2 \\<S> \\<C> es t1s t2s e t3s)"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> t2s\n  \\<lbrakk>es = [Callcl cl]; cl = Func_host tf f\\<rbrakk>\n  \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                       t1s = ts_c @ t1sa \\<and>\n                       t2s = ts_c @ t2sa \\<and> tf = t1sa _> t2sa\n  \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s\n  \\<lbrakk>e = Callcl cl; cl = Func_host tf f\\<rbrakk>\n  \\<Longrightarrow> \\<exists>t1s t2sa ts_c.\n                       t2s = ts_c @ t1s \\<and>\n                       t3s = ts_c @ t2sa \\<and> tf = t1s _> t2sa\n  es @ [e] = [Callcl cl]\n  cl = Func_host tf f\n\ngoal (4 subgoals):\n 1. \\<And>\\<S> \\<C> es t1s t2s e t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> t2s;\n        \\<lbrakk>es = [Callcl cl]; cl = Func_host tf f\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                             t1s = ts_c @ t1sa \\<and>\n                             t2s = ts_c @ t2sa \\<and> tf = t1sa _> t2sa;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        \\<lbrakk>e = Callcl cl; cl = Func_host tf f\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2sa ts_c.\n                             t2s = ts_c @ t1s \\<and>\n                             t3s = ts_c @ t2sa \\<and> tf = t1s _> t2sa;\n        es @ [e] = [Callcl cl]; cl = Func_host tf f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2s ts_c.\n                            t1s = ts_c @ t1sa \\<and>\n                            t3s = ts_c @ t2s \\<and> tf = t1sa _> t2s\n 2. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : t1s _> t2s;\n        cl = Func_host tf f \\<Longrightarrow>\n        \\<exists>t1sa t2sa ts_c.\n           t1s = ts_c @ t1sa \\<and>\n           t2s = ts_c @ t2sa \\<and> tf = t1sa _> t2sa;\n        cl = Func_host tf f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                            ts @ t1s = ts_c @ t1sa \\<and>\n                            ts @ t2s = ts_c @ t2sa \\<and> tf = t1sa _> t2sa\n 3. \\<And>\\<S> \\<C> t1s' t2s'.\n       \\<lbrakk>cl_typing \\<S> cl (t1s' _> t2s');\n        cl = Func_host tf f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                            t1s' = ts_c @ t1s \\<and>\n                            t2s' = ts_c @ t2s \\<and> tf = t1s _> t2s\n 4. \\<And>i \\<S> tvs vs \\<C> rs es ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts;\n        \\<lbrakk>es = [Callcl cl]; cl = Func_host tf f\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                             [] = ts_c @ t1s \\<and>\n                             ts = ts_c @ t2s \\<and> tf = t1s _> t2s;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs i vs es ts", "have \"\\<C> \\<turnstile> [] : (t1s _> t2s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> [] : t1s _> t2s", "using 2(1,5) unlift_b_e"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> t2s\n  es @ [e] = [Callcl cl]\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> $* ?b_es : ?tf \\<Longrightarrow>\n  ?\\<C> \\<turnstile> ?b_es : ?tf\n\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> [] : t1s _> t2s", "by (metis Nil_is_map_conv append_Nil butlast_snoc)"], ["proof (state)\nthis:\n  \\<C> \\<turnstile> [] : t1s _> t2s\n\ngoal (4 subgoals):\n 1. \\<And>\\<S> \\<C> es t1s t2s e t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> t2s;\n        \\<lbrakk>es = [Callcl cl]; cl = Func_host tf f\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                             t1s = ts_c @ t1sa \\<and>\n                             t2s = ts_c @ t2sa \\<and> tf = t1sa _> t2sa;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        \\<lbrakk>e = Callcl cl; cl = Func_host tf f\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2sa ts_c.\n                             t2s = ts_c @ t1s \\<and>\n                             t3s = ts_c @ t2sa \\<and> tf = t1s _> t2sa;\n        es @ [e] = [Callcl cl]; cl = Func_host tf f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2s ts_c.\n                            t1s = ts_c @ t1sa \\<and>\n                            t3s = ts_c @ t2s \\<and> tf = t1sa _> t2s\n 2. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : t1s _> t2s;\n        cl = Func_host tf f \\<Longrightarrow>\n        \\<exists>t1sa t2sa ts_c.\n           t1s = ts_c @ t1sa \\<and>\n           t2s = ts_c @ t2sa \\<and> tf = t1sa _> t2sa;\n        cl = Func_host tf f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                            ts @ t1s = ts_c @ t1sa \\<and>\n                            ts @ t2s = ts_c @ t2sa \\<and> tf = t1sa _> t2sa\n 3. \\<And>\\<S> \\<C> t1s' t2s'.\n       \\<lbrakk>cl_typing \\<S> cl (t1s' _> t2s');\n        cl = Func_host tf f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                            t1s' = ts_c @ t1s \\<and>\n                            t2s' = ts_c @ t2s \\<and> tf = t1s _> t2s\n 4. \\<And>i \\<S> tvs vs \\<C> rs es ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts;\n        \\<lbrakk>es = [Callcl cl]; cl = Func_host tf f\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                             [] = ts_c @ t1s \\<and>\n                             ts = ts_c @ t2s \\<and> tf = t1s _> t2s;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs i vs es ts", "thus ?case"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [] : t1s _> t2s\n\ngoal (1 subgoal):\n 1. \\<exists>t1sa t2s ts_c.\n       t1s = ts_c @ t1sa \\<and> t3s = ts_c @ t2s \\<and> tf = t1sa _> t2s", "using 2(4,5,6)"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [] : t1s _> t2s\n  \\<lbrakk>e = Callcl cl; cl = Func_host tf f\\<rbrakk>\n  \\<Longrightarrow> \\<exists>t1s t2sa ts_c.\n                       t2s = ts_c @ t1s \\<and>\n                       t3s = ts_c @ t2sa \\<and> tf = t1s _> t2sa\n  es @ [e] = [Callcl cl]\n  cl = Func_host tf f\n\ngoal (1 subgoal):\n 1. \\<exists>t1sa t2s ts_c.\n       t1s = ts_c @ t1sa \\<and> t3s = ts_c @ t2s \\<and> tf = t1sa _> t2s", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>t1sa t2s ts_c.\n     t1s = ts_c @ t1sa \\<and> t3s = ts_c @ t2s \\<and> tf = t1sa _> t2s\n\ngoal (3 subgoals):\n 1. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : t1s _> t2s;\n        cl = Func_host tf f \\<Longrightarrow>\n        \\<exists>t1sa t2sa ts_c.\n           t1s = ts_c @ t1sa \\<and>\n           t2s = ts_c @ t2sa \\<and> tf = t1sa _> t2sa;\n        cl = Func_host tf f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                            ts @ t1s = ts_c @ t1sa \\<and>\n                            ts @ t2s = ts_c @ t2sa \\<and> tf = t1sa _> t2sa\n 2. \\<And>\\<S> \\<C> t1s' t2s'.\n       \\<lbrakk>cl_typing \\<S> cl (t1s' _> t2s');\n        cl = Func_host tf f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                            t1s' = ts_c @ t1s \\<and>\n                            t2s' = ts_c @ t2s \\<and> tf = t1s _> t2s\n 3. \\<And>i \\<S> tvs vs \\<C> rs es ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts;\n        \\<lbrakk>es = [Callcl cl]; cl = Func_host tf f\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                             [] = ts_c @ t1s \\<and>\n                             ts = ts_c @ t2s \\<and> tf = t1s _> t2s;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs i vs es ts", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : t1s _> t2s;\n        cl = Func_host tf f \\<Longrightarrow>\n        \\<exists>t1sa t2sa ts_c.\n           t1s = ts_c @ t1sa \\<and>\n           t2s = ts_c @ t2sa \\<and> tf = t1sa _> t2sa;\n        cl = Func_host tf f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                            ts @ t1s = ts_c @ t1sa \\<and>\n                            ts @ t2s = ts_c @ t2sa \\<and> tf = t1sa _> t2sa\n 2. \\<And>\\<S> \\<C> t1s' t2s'.\n       \\<lbrakk>cl_typing \\<S> cl (t1s' _> t2s');\n        cl = Func_host tf f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                            t1s' = ts_c @ t1s \\<and>\n                            t2s' = ts_c @ t2s \\<and> tf = t1s _> t2s\n 3. \\<And>i \\<S> tvs vs \\<C> rs es ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts;\n        \\<lbrakk>es = [Callcl cl]; cl = Func_host tf f\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                             [] = ts_c @ t1s \\<and>\n                             ts = ts_c @ t2s \\<and> tf = t1s _> t2s;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs i vs es ts", "case (3 \\<S> \\<C> t1s t2s ts)"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : t1s _> t2s\n  cl = Func_host tf f \\<Longrightarrow>\n  \\<exists>t1sa t2sa ts_c.\n     t1s = ts_c @ t1sa \\<and> t2s = ts_c @ t2sa \\<and> tf = t1sa _> t2sa\n  cl = Func_host tf f\n\ngoal (3 subgoals):\n 1. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : t1s _> t2s;\n        cl = Func_host tf f \\<Longrightarrow>\n        \\<exists>t1sa t2sa ts_c.\n           t1s = ts_c @ t1sa \\<and>\n           t2s = ts_c @ t2sa \\<and> tf = t1sa _> t2sa;\n        cl = Func_host tf f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1sa t2sa ts_c.\n                            ts @ t1s = ts_c @ t1sa \\<and>\n                            ts @ t2s = ts_c @ t2sa \\<and> tf = t1sa _> t2sa\n 2. \\<And>\\<S> \\<C> t1s' t2s'.\n       \\<lbrakk>cl_typing \\<S> cl (t1s' _> t2s');\n        cl = Func_host tf f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                            t1s' = ts_c @ t1s \\<and>\n                            t2s' = ts_c @ t2s \\<and> tf = t1s _> t2s\n 3. \\<And>i \\<S> tvs vs \\<C> rs es ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts;\n        \\<lbrakk>es = [Callcl cl]; cl = Func_host tf f\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                             [] = ts_c @ t1s \\<and>\n                             ts = ts_c @ t2s \\<and> tf = t1s _> t2s;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs i vs es ts", "thus ?case"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : t1s _> t2s\n  cl = Func_host tf f \\<Longrightarrow>\n  \\<exists>t1sa t2sa ts_c.\n     t1s = ts_c @ t1sa \\<and> t2s = ts_c @ t2sa \\<and> tf = t1sa _> t2sa\n  cl = Func_host tf f\n\ngoal (1 subgoal):\n 1. \\<exists>t1sa t2sa ts_c.\n       ts @ t1s = ts_c @ t1sa \\<and>\n       ts @ t2s = ts_c @ t2sa \\<and> tf = t1sa _> t2sa", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>t1sa t2sa ts_c.\n     ts @ t1s = ts_c @ t1sa \\<and>\n     ts @ t2s = ts_c @ t2sa \\<and> tf = t1sa _> t2sa\n\ngoal (2 subgoals):\n 1. \\<And>\\<S> \\<C> t1s' t2s'.\n       \\<lbrakk>cl_typing \\<S> cl (t1s' _> t2s');\n        cl = Func_host tf f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                            t1s' = ts_c @ t1s \\<and>\n                            t2s' = ts_c @ t2s \\<and> tf = t1s _> t2s\n 2. \\<And>i \\<S> tvs vs \\<C> rs es ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts;\n        \\<lbrakk>es = [Callcl cl]; cl = Func_host tf f\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                             [] = ts_c @ t1s \\<and>\n                             ts = ts_c @ t2s \\<and> tf = t1s _> t2s;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs i vs es ts", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<S> \\<C> t1s' t2s'.\n       \\<lbrakk>cl_typing \\<S> cl (t1s' _> t2s');\n        cl = Func_host tf f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                            t1s' = ts_c @ t1s \\<and>\n                            t2s' = ts_c @ t2s \\<and> tf = t1s _> t2s\n 2. \\<And>i \\<S> tvs vs \\<C> rs es ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts;\n        \\<lbrakk>es = [Callcl cl]; cl = Func_host tf f\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                             [] = ts_c @ t1s \\<and>\n                             ts = ts_c @ t2s \\<and> tf = t1s _> t2s;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs i vs es ts", "case (6 \\<S> \\<C>)"], ["proof (state)\nthis:\n  cl_typing \\<S> cl (t1s' _> t2s')\n  cl = Func_host tf f\n\ngoal (2 subgoals):\n 1. \\<And>\\<S> \\<C> t1s' t2s'.\n       \\<lbrakk>cl_typing \\<S> cl (t1s' _> t2s');\n        cl = Func_host tf f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                            t1s' = ts_c @ t1s \\<and>\n                            t2s' = ts_c @ t2s \\<and> tf = t1s _> t2s\n 2. \\<And>i \\<S> tvs vs \\<C> rs es ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts;\n        \\<lbrakk>es = [Callcl cl]; cl = Func_host tf f\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                             [] = ts_c @ t1s \\<and>\n                             ts = ts_c @ t2s \\<and> tf = t1s _> t2s;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs i vs es ts", "thus ?case"], ["proof (prove)\nusing this:\n  cl_typing \\<S> cl (t1s' _> t2s')\n  cl = Func_host tf f\n\ngoal (1 subgoal):\n 1. \\<exists>t1s t2s ts_c.\n       t1s' = ts_c @ t1s \\<and> t2s' = ts_c @ t2s \\<and> tf = t1s _> t2s", "unfolding cl_typing.simps"], ["proof (prove)\nusing this:\n  (\\<exists>i \\<S> \\<C> tf t1s t2s ts es.\n      \\<S> = \\<S> \\<and>\n      cl = Func_native i tf ts es \\<and>\n      t1s' _> t2s' = t1s _> t2s \\<and>\n      i < length (s_inst \\<S>) \\<and>\n      s_inst \\<S> ! i = \\<C> \\<and>\n      tf = t1s _> t2s \\<and> \\<C>\n      \\<lparr>local := local \\<C> @ t1s @ ts, label := [t2s] @ label \\<C>,\n         return := Some t2s\\<rparr> \\<turnstile> es : [] _> t2s) \\<or>\n  (\\<exists>\\<S> tf h.\n      \\<S> = \\<S> \\<and> cl = Func_host tf h \\<and> t1s' _> t2s' = tf)\n  cl = Func_host tf f\n\ngoal (1 subgoal):\n 1. \\<exists>t1s t2s ts_c.\n       t1s' = ts_c @ t1s \\<and> t2s' = ts_c @ t2s \\<and> tf = t1s _> t2s", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>t1s t2s ts_c.\n     t1s' = ts_c @ t1s \\<and> t2s' = ts_c @ t2s \\<and> tf = t1s _> t2s\n\ngoal (1 subgoal):\n 1. \\<And>i \\<S> tvs vs \\<C> rs es ts.\n       \\<lbrakk>i < length (s_inst \\<S>); tvs = map typeof vs;\n        \\<C> = (s_inst \\<S> ! i)\n        \\<lparr>local := local (s_inst \\<S> ! i) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> es : [] _> ts;\n        \\<lbrakk>es = [Callcl cl]; cl = Func_host tf f\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t1s t2s ts_c.\n                             [] = ts_c @ t1s \\<and>\n                             ts = ts_c @ t2s \\<and> tf = t1s _> t2s;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.10 \\<S> rs i vs es ts", "qed"], ["", "lemma e_type_callcl:\n  assumes \"\\<S>\\<bullet>\\<C> \\<turnstile> [Callcl cl] : (t1s' _> t2s')\"\n  shows \"\\<exists>t1s t2s ts_c. (t1s' = ts_c @ t1s)\n                        \\<and> (t2s' = ts_c @ t2s)\n                        \\<and> cl_type cl = (t1s _> t2s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t1s t2s ts_c.\n       t1s' = ts_c @ t1s \\<and>\n       t2s' = ts_c @ t2s \\<and> cl_type cl = t1s _> t2s", "proof (cases cl)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x11 x12 x13 x14.\n       cl = Func_native x11 x12 x13 x14 \\<Longrightarrow>\n       \\<exists>t1s t2s ts_c.\n          t1s' = ts_c @ t1s \\<and>\n          t2s' = ts_c @ t2s \\<and> cl_type cl = t1s _> t2s\n 2. \\<And>x21 x22.\n       cl = Func_host x21 x22 \\<Longrightarrow>\n       \\<exists>t1s t2s ts_c.\n          t1s' = ts_c @ t1s \\<and>\n          t2s' = ts_c @ t2s \\<and> cl_type cl = t1s _> t2s", "case (Func_native x11 x12 x13 x14)"], ["proof (state)\nthis:\n  cl = Func_native x11 x12 x13 x14\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12 x13 x14.\n       cl = Func_native x11 x12 x13 x14 \\<Longrightarrow>\n       \\<exists>t1s t2s ts_c.\n          t1s' = ts_c @ t1s \\<and>\n          t2s' = ts_c @ t2s \\<and> cl_type cl = t1s _> t2s\n 2. \\<And>x21 x22.\n       cl = Func_host x21 x22 \\<Longrightarrow>\n       \\<exists>t1s t2s ts_c.\n          t1s' = ts_c @ t1s \\<and>\n          t2s' = ts_c @ t2s \\<and> cl_type cl = t1s _> t2s", "thus ?thesis"], ["proof (prove)\nusing this:\n  cl = Func_native x11 x12 x13 x14\n\ngoal (1 subgoal):\n 1. \\<exists>t1s t2s ts_c.\n       t1s' = ts_c @ t1s \\<and>\n       t2s' = ts_c @ t2s \\<and> cl_type cl = t1s _> t2s", "using e_type_callcl_native[OF assms]"], ["proof (prove)\nusing this:\n  cl = Func_native x11 x12 x13 x14\n  cl = Func_native ?i ?tf ?ts ?es \\<Longrightarrow>\n  \\<exists>t1s t2s ts_c.\n     t1s' = ts_c @ t1s \\<and>\n     t2s' = ts_c @ t2s \\<and>\n     ?tf = t1s _> t2s \\<and>\n     ?i < length (s_inst \\<S>) \\<and> (s_inst \\<S> ! ?i)\n     \\<lparr>local := local (s_inst \\<S> ! ?i) @ t1s @ ?ts,\n        label := [t2s] @ label (s_inst \\<S> ! ?i),\n        return := Some t2s\\<rparr> \\<turnstile> ?es : [] _> t2s\n\ngoal (1 subgoal):\n 1. \\<exists>t1s t2s ts_c.\n       t1s' = ts_c @ t1s \\<and>\n       t2s' = ts_c @ t2s \\<and> cl_type cl = t1s _> t2s", "unfolding cl_type_def"], ["proof (prove)\nusing this:\n  cl = Func_native x11 x12 x13 x14\n  cl = Func_native ?i ?tf ?ts ?es \\<Longrightarrow>\n  \\<exists>t1s t2s ts_c.\n     t1s' = ts_c @ t1s \\<and>\n     t2s' = ts_c @ t2s \\<and>\n     ?tf = t1s _> t2s \\<and>\n     ?i < length (s_inst \\<S>) \\<and> (s_inst \\<S> ! ?i)\n     \\<lparr>local := local (s_inst \\<S> ! ?i) @ t1s @ ?ts,\n        label := [t2s] @ label (s_inst \\<S> ! ?i),\n        return := Some t2s\\<rparr> \\<turnstile> ?es : [] _> t2s\n\ngoal (1 subgoal):\n 1. \\<exists>t1s t2s ts_c.\n       t1s' = ts_c @ t1s \\<and>\n       t2s' = ts_c @ t2s \\<and>\n       (case cl of Func_native x tf xa xb \\<Rightarrow> tf\n        | Func_host tf x \\<Rightarrow> tf) =\n       t1s _> t2s", "by (cases x12) fastforce"], ["proof (state)\nthis:\n  \\<exists>t1s t2s ts_c.\n     t1s' = ts_c @ t1s \\<and>\n     t2s' = ts_c @ t2s \\<and> cl_type cl = t1s _> t2s\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       cl = Func_host x21 x22 \\<Longrightarrow>\n       \\<exists>t1s t2s ts_c.\n          t1s' = ts_c @ t1s \\<and>\n          t2s' = ts_c @ t2s \\<and> cl_type cl = t1s _> t2s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       cl = Func_host x21 x22 \\<Longrightarrow>\n       \\<exists>t1s t2s ts_c.\n          t1s' = ts_c @ t1s \\<and>\n          t2s' = ts_c @ t2s \\<and> cl_type cl = t1s _> t2s", "case (Func_host x21 x22)"], ["proof (state)\nthis:\n  cl = Func_host x21 x22\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       cl = Func_host x21 x22 \\<Longrightarrow>\n       \\<exists>t1s t2s ts_c.\n          t1s' = ts_c @ t1s \\<and>\n          t2s' = ts_c @ t2s \\<and> cl_type cl = t1s _> t2s", "thus ?thesis"], ["proof (prove)\nusing this:\n  cl = Func_host x21 x22\n\ngoal (1 subgoal):\n 1. \\<exists>t1s t2s ts_c.\n       t1s' = ts_c @ t1s \\<and>\n       t2s' = ts_c @ t2s \\<and> cl_type cl = t1s _> t2s", "using e_type_callcl_host[OF assms]"], ["proof (prove)\nusing this:\n  cl = Func_host x21 x22\n  cl = Func_host ?tf ?f \\<Longrightarrow>\n  \\<exists>t1s t2s ts_c.\n     t1s' = ts_c @ t1s \\<and> t2s' = ts_c @ t2s \\<and> ?tf = t1s _> t2s\n\ngoal (1 subgoal):\n 1. \\<exists>t1s t2s ts_c.\n       t1s' = ts_c @ t1s \\<and>\n       t2s' = ts_c @ t2s \\<and> cl_type cl = t1s _> t2s", "unfolding cl_type_def"], ["proof (prove)\nusing this:\n  cl = Func_host x21 x22\n  cl = Func_host ?tf ?f \\<Longrightarrow>\n  \\<exists>t1s t2s ts_c.\n     t1s' = ts_c @ t1s \\<and> t2s' = ts_c @ t2s \\<and> ?tf = t1s _> t2s\n\ngoal (1 subgoal):\n 1. \\<exists>t1s t2s ts_c.\n       t1s' = ts_c @ t1s \\<and>\n       t2s' = ts_c @ t2s \\<and>\n       (case cl of Func_native x tf xa xb \\<Rightarrow> tf\n        | Func_host tf x \\<Rightarrow> tf) =\n       t1s _> t2s", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>t1s t2s ts_c.\n     t1s' = ts_c @ t1s \\<and>\n     t2s' = ts_c @ t2s \\<and> cl_type cl = t1s _> t2s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma s_type_unfold:\n  assumes \"\\<S>\\<bullet>rs \\<tturnstile>_i vs;es : ts\"\n  shows \"i < length (s_inst \\<S>)\"\n        \"(rs = Some ts) \\<or> rs = None\"\n        \"(\\<S>\\<bullet>((s_inst \\<S>)!i)\\<lparr>local := (local ((s_inst \\<S>)!i)) @ (map typeof vs), return := rs\\<rparr> \\<turnstile> es : ([] _> ts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length (s_inst \\<S>) &&&\n    rs = Some ts \\<or> rs = None &&&\n    \\<S>\\<bullet>(s_inst \\<S> ! i)\n    \\<lparr>local := local (s_inst \\<S> ! i) @ map typeof vs,\n       return := rs\\<rparr> \\<turnstile> es : [] _> ts", "using assms"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>rs \\<tturnstile>_ i vs;es : ts\n\ngoal (1 subgoal):\n 1. i < length (s_inst \\<S>) &&&\n    rs = Some ts \\<or> rs = None &&&\n    \\<S>\\<bullet>(s_inst \\<S> ! i)\n    \\<lparr>local := local (s_inst \\<S> ! i) @ map typeof vs,\n       return := rs\\<rparr> \\<turnstile> es : [] _> ts", "by (induction vs es ts, auto)"], ["", "lemma e_type_local:\n  assumes \"\\<S>\\<bullet>\\<C> \\<turnstile> [Local n i vs es] : (ts _> ts')\"\n  shows \"\\<exists>tls. i < length (s_inst \\<S>)\n               \\<and> length tls = n\n               \\<and> (\\<S>\\<bullet>((s_inst \\<S>)!i)\\<lparr>local := (local ((s_inst \\<S>)!i)) @ (map typeof vs), return := Some tls\\<rparr> \\<turnstile> es : ([] _> tls))\n               \\<and> ts' = ts @ tls\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>tls.\n       i < length (s_inst \\<S>) \\<and>\n       length tls = n \\<and>\n       \\<S>\\<bullet>(s_inst \\<S> ! i)\n       \\<lparr>local := local (s_inst \\<S> ! i) @ map typeof vs,\n          return := Some tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n       ts' = ts @ tls", "using assms"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> [Local n i vs es] : ts _> ts'\n\ngoal (1 subgoal):\n 1. \\<exists>tls.\n       i < length (s_inst \\<S>) \\<and>\n       length tls = n \\<and>\n       \\<S>\\<bullet>(s_inst \\<S> ! i)\n       \\<lparr>local := local (s_inst \\<S> ! i) @ map typeof vs,\n          return := Some tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n       ts' = ts @ tls", "proof (induction \"\\<S>\" \"\\<C>\" \"[Local n i vs es]\" \"(ts _> ts')\" arbitrary: ts ts')"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<C> b_es \\<S> ts ts'.\n       \\<lbrakk>\\<C> \\<turnstile> b_es : ts _> ts';\n        $* b_es = [Local n i vs es]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            i < length (s_inst \\<S>) \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>(s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ map typeof vs,\n                               return :=\n                                 Some\n                                  tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n                            ts' = ts @ tls\n 2. \\<And>\\<S> \\<C> esa t1s t2s e t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        esa = [Local n i vs es] \\<Longrightarrow>\n        \\<exists>tls.\n           i < length (s_inst \\<S>) \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>(s_inst \\<S> ! i)\n           \\<lparr>local := local (s_inst \\<S> ! i) @ map typeof vs,\n              return := Some tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n           t2s = t1s @ tls;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        e = Local n i vs es \\<Longrightarrow>\n        \\<exists>tls.\n           i < length (s_inst \\<S>) \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>(s_inst \\<S> ! i)\n           \\<lparr>local := local (s_inst \\<S> ! i) @ map typeof vs,\n              return := Some tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n           t3s = t2s @ tls;\n        esa @ [e] = [Local n i vs es]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            i < length (s_inst \\<S>) \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>(s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ map typeof vs,\n                               return :=\n                                 Some\n                                  tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n                            t3s = t1s @ tls\n 3. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Local n i vs\n           es] : t1s _> t2s;\n        \\<exists>tls.\n           i < length (s_inst \\<S>) \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>(s_inst \\<S> ! i)\n           \\<lparr>local := local (s_inst \\<S> ! i) @ map typeof vs,\n              return := Some tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n           t2s = t1s @ tls\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            i < length (s_inst \\<S>) \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>(s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ map typeof vs,\n                               return :=\n                                 Some\n                                  tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n                            ts @ t2s = (ts @ t1s) @ tls\n 4. \\<And>\\<S> ts \\<C>.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;es : ts;\n        ?P2.8 \\<S> (Some ts) i vs es ts; length ts = n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            i < length (s_inst \\<S>) \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>(s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ map typeof vs,\n                               return :=\n                                 Some\n                                  tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n                            ts = [] @ tls\n 5. \\<And>ia \\<S> tvs vsa \\<C> rs esa ts.\n       \\<lbrakk>ia < length (s_inst \\<S>); tvs = map typeof vsa;\n        \\<C> = (s_inst \\<S> ! ia)\n        \\<lparr>local := local (s_inst \\<S> ! ia) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        esa = [Local n i vs es] \\<Longrightarrow>\n        \\<exists>tls.\n           i < length (s_inst \\<S>) \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>(s_inst \\<S> ! i)\n           \\<lparr>local := local (s_inst \\<S> ! i) @ map typeof vs,\n              return := Some tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n           ts = [] @ tls;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.8 \\<S> rs ia vsa esa ts", "case (2 \\<S> \\<C> es' t1s t2s e t3s)"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es' : t1s _> t2s\n  es' = [Local n i vs es] \\<Longrightarrow>\n  \\<exists>tls.\n     i < length (s_inst \\<S>) \\<and>\n     length tls = n \\<and>\n     \\<S>\\<bullet>(s_inst \\<S> ! i)\n     \\<lparr>local := local (s_inst \\<S> ! i) @ map typeof vs,\n        return := Some tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n     t2s = t1s @ tls\n  \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s\n  e = Local n i vs es \\<Longrightarrow>\n  \\<exists>tls.\n     i < length (s_inst \\<S>) \\<and>\n     length tls = n \\<and>\n     \\<S>\\<bullet>(s_inst \\<S> ! i)\n     \\<lparr>local := local (s_inst \\<S> ! i) @ map typeof vs,\n        return := Some tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n     t3s = t2s @ tls\n  es' @ [e] = [Local n i vs es]\n\ngoal (5 subgoals):\n 1. \\<And>\\<C> b_es \\<S> ts ts'.\n       \\<lbrakk>\\<C> \\<turnstile> b_es : ts _> ts';\n        $* b_es = [Local n i vs es]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            i < length (s_inst \\<S>) \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>(s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ map typeof vs,\n                               return :=\n                                 Some\n                                  tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n                            ts' = ts @ tls\n 2. \\<And>\\<S> \\<C> esa t1s t2s e t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        esa = [Local n i vs es] \\<Longrightarrow>\n        \\<exists>tls.\n           i < length (s_inst \\<S>) \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>(s_inst \\<S> ! i)\n           \\<lparr>local := local (s_inst \\<S> ! i) @ map typeof vs,\n              return := Some tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n           t2s = t1s @ tls;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        e = Local n i vs es \\<Longrightarrow>\n        \\<exists>tls.\n           i < length (s_inst \\<S>) \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>(s_inst \\<S> ! i)\n           \\<lparr>local := local (s_inst \\<S> ! i) @ map typeof vs,\n              return := Some tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n           t3s = t2s @ tls;\n        esa @ [e] = [Local n i vs es]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            i < length (s_inst \\<S>) \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>(s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ map typeof vs,\n                               return :=\n                                 Some\n                                  tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n                            t3s = t1s @ tls\n 3. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Local n i vs\n           es] : t1s _> t2s;\n        \\<exists>tls.\n           i < length (s_inst \\<S>) \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>(s_inst \\<S> ! i)\n           \\<lparr>local := local (s_inst \\<S> ! i) @ map typeof vs,\n              return := Some tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n           t2s = t1s @ tls\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            i < length (s_inst \\<S>) \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>(s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ map typeof vs,\n                               return :=\n                                 Some\n                                  tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n                            ts @ t2s = (ts @ t1s) @ tls\n 4. \\<And>\\<S> ts \\<C>.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;es : ts;\n        ?P2.8 \\<S> (Some ts) i vs es ts; length ts = n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            i < length (s_inst \\<S>) \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>(s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ map typeof vs,\n                               return :=\n                                 Some\n                                  tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n                            ts = [] @ tls\n 5. \\<And>ia \\<S> tvs vsa \\<C> rs esa ts.\n       \\<lbrakk>ia < length (s_inst \\<S>); tvs = map typeof vsa;\n        \\<C> = (s_inst \\<S> ! ia)\n        \\<lparr>local := local (s_inst \\<S> ! ia) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        esa = [Local n i vs es] \\<Longrightarrow>\n        \\<exists>tls.\n           i < length (s_inst \\<S>) \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>(s_inst \\<S> ! i)\n           \\<lparr>local := local (s_inst \\<S> ! i) @ map typeof vs,\n              return := Some tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n           ts = [] @ tls;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.8 \\<S> rs ia vsa esa ts", "have \"t1s = t2s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t1s = t2s", "using 2 unlift_b_e"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es' : t1s _> t2s\n  es' = [Local n i vs es] \\<Longrightarrow>\n  \\<exists>tls.\n     i < length (s_inst \\<S>) \\<and>\n     length tls = n \\<and>\n     \\<S>\\<bullet>(s_inst \\<S> ! i)\n     \\<lparr>local := local (s_inst \\<S> ! i) @ map typeof vs,\n        return := Some tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n     t2s = t1s @ tls\n  \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s\n  e = Local n i vs es \\<Longrightarrow>\n  \\<exists>tls.\n     i < length (s_inst \\<S>) \\<and>\n     length tls = n \\<and>\n     \\<S>\\<bullet>(s_inst \\<S> ! i)\n     \\<lparr>local := local (s_inst \\<S> ! i) @ map typeof vs,\n        return := Some tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n     t3s = t2s @ tls\n  es' @ [e] = [Local n i vs es]\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> $* ?b_es : ?tf \\<Longrightarrow>\n  ?\\<C> \\<turnstile> ?b_es : ?tf\n\ngoal (1 subgoal):\n 1. t1s = t2s", "by force"], ["proof (state)\nthis:\n  t1s = t2s\n\ngoal (5 subgoals):\n 1. \\<And>\\<C> b_es \\<S> ts ts'.\n       \\<lbrakk>\\<C> \\<turnstile> b_es : ts _> ts';\n        $* b_es = [Local n i vs es]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            i < length (s_inst \\<S>) \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>(s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ map typeof vs,\n                               return :=\n                                 Some\n                                  tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n                            ts' = ts @ tls\n 2. \\<And>\\<S> \\<C> esa t1s t2s e t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        esa = [Local n i vs es] \\<Longrightarrow>\n        \\<exists>tls.\n           i < length (s_inst \\<S>) \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>(s_inst \\<S> ! i)\n           \\<lparr>local := local (s_inst \\<S> ! i) @ map typeof vs,\n              return := Some tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n           t2s = t1s @ tls;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        e = Local n i vs es \\<Longrightarrow>\n        \\<exists>tls.\n           i < length (s_inst \\<S>) \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>(s_inst \\<S> ! i)\n           \\<lparr>local := local (s_inst \\<S> ! i) @ map typeof vs,\n              return := Some tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n           t3s = t2s @ tls;\n        esa @ [e] = [Local n i vs es]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            i < length (s_inst \\<S>) \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>(s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ map typeof vs,\n                               return :=\n                                 Some\n                                  tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n                            t3s = t1s @ tls\n 3. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Local n i vs\n           es] : t1s _> t2s;\n        \\<exists>tls.\n           i < length (s_inst \\<S>) \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>(s_inst \\<S> ! i)\n           \\<lparr>local := local (s_inst \\<S> ! i) @ map typeof vs,\n              return := Some tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n           t2s = t1s @ tls\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            i < length (s_inst \\<S>) \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>(s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ map typeof vs,\n                               return :=\n                                 Some\n                                  tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n                            ts @ t2s = (ts @ t1s) @ tls\n 4. \\<And>\\<S> ts \\<C>.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;es : ts;\n        ?P2.8 \\<S> (Some ts) i vs es ts; length ts = n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            i < length (s_inst \\<S>) \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>(s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ map typeof vs,\n                               return :=\n                                 Some\n                                  tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n                            ts = [] @ tls\n 5. \\<And>ia \\<S> tvs vsa \\<C> rs esa ts.\n       \\<lbrakk>ia < length (s_inst \\<S>); tvs = map typeof vsa;\n        \\<C> = (s_inst \\<S> ! ia)\n        \\<lparr>local := local (s_inst \\<S> ! ia) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        esa = [Local n i vs es] \\<Longrightarrow>\n        \\<exists>tls.\n           i < length (s_inst \\<S>) \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>(s_inst \\<S> ! i)\n           \\<lparr>local := local (s_inst \\<S> ! i) @ map typeof vs,\n              return := Some tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n           ts = [] @ tls;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.8 \\<S> rs ia vsa esa ts", "thus ?case"], ["proof (prove)\nusing this:\n  t1s = t2s\n\ngoal (1 subgoal):\n 1. \\<exists>tls.\n       i < length (s_inst \\<S>) \\<and>\n       length tls = n \\<and>\n       \\<S>\\<bullet>(s_inst \\<S> ! i)\n       \\<lparr>local := local (s_inst \\<S> ! i) @ map typeof vs,\n          return := Some tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n       t3s = t1s @ tls", "using 2"], ["proof (prove)\nusing this:\n  t1s = t2s\n  \\<S>\\<bullet>\\<C> \\<turnstile> es' : t1s _> t2s\n  es' = [Local n i vs es] \\<Longrightarrow>\n  \\<exists>tls.\n     i < length (s_inst \\<S>) \\<and>\n     length tls = n \\<and>\n     \\<S>\\<bullet>(s_inst \\<S> ! i)\n     \\<lparr>local := local (s_inst \\<S> ! i) @ map typeof vs,\n        return := Some tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n     t2s = t1s @ tls\n  \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s\n  e = Local n i vs es \\<Longrightarrow>\n  \\<exists>tls.\n     i < length (s_inst \\<S>) \\<and>\n     length tls = n \\<and>\n     \\<S>\\<bullet>(s_inst \\<S> ! i)\n     \\<lparr>local := local (s_inst \\<S> ! i) @ map typeof vs,\n        return := Some tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n     t3s = t2s @ tls\n  es' @ [e] = [Local n i vs es]\n\ngoal (1 subgoal):\n 1. \\<exists>tls.\n       i < length (s_inst \\<S>) \\<and>\n       length tls = n \\<and>\n       \\<S>\\<bullet>(s_inst \\<S> ! i)\n       \\<lparr>local := local (s_inst \\<S> ! i) @ map typeof vs,\n          return := Some tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n       t3s = t1s @ tls", "by simp"], ["proof (state)\nthis:\n  \\<exists>tls.\n     i < length (s_inst \\<S>) \\<and>\n     length tls = n \\<and>\n     \\<S>\\<bullet>(s_inst \\<S> ! i)\n     \\<lparr>local := local (s_inst \\<S> ! i) @ map typeof vs,\n        return := Some tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n     t3s = t1s @ tls\n\ngoal (4 subgoals):\n 1. \\<And>\\<C> b_es \\<S> ts ts'.\n       \\<lbrakk>\\<C> \\<turnstile> b_es : ts _> ts';\n        $* b_es = [Local n i vs es]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            i < length (s_inst \\<S>) \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>(s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ map typeof vs,\n                               return :=\n                                 Some\n                                  tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n                            ts' = ts @ tls\n 2. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Local n i vs\n           es] : t1s _> t2s;\n        \\<exists>tls.\n           i < length (s_inst \\<S>) \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>(s_inst \\<S> ! i)\n           \\<lparr>local := local (s_inst \\<S> ! i) @ map typeof vs,\n              return := Some tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n           t2s = t1s @ tls\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            i < length (s_inst \\<S>) \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>(s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ map typeof vs,\n                               return :=\n                                 Some\n                                  tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n                            ts @ t2s = (ts @ t1s) @ tls\n 3. \\<And>\\<S> ts \\<C>.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;es : ts;\n        ?P2.8 \\<S> (Some ts) i vs es ts; length ts = n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            i < length (s_inst \\<S>) \\<and>\n                            length tls = n \\<and>\n                            \\<S>\\<bullet>(s_inst \\<S> ! i)\n                            \\<lparr>local :=\nlocal (s_inst \\<S> ! i) @ map typeof vs,\n                               return :=\n                                 Some\n                                  tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n                            ts = [] @ tls\n 4. \\<And>ia \\<S> tvs vsa \\<C> rs esa ts.\n       \\<lbrakk>ia < length (s_inst \\<S>); tvs = map typeof vsa;\n        \\<C> = (s_inst \\<S> ! ia)\n        \\<lparr>local := local (s_inst \\<S> ! ia) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        esa = [Local n i vs es] \\<Longrightarrow>\n        \\<exists>tls.\n           i < length (s_inst \\<S>) \\<and>\n           length tls = n \\<and>\n           \\<S>\\<bullet>(s_inst \\<S> ! i)\n           \\<lparr>local := local (s_inst \\<S> ! i) @ map typeof vs,\n              return := Some tls\\<rparr> \\<turnstile> es : [] _> tls \\<and>\n           ts = [] @ tls;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.8 \\<S> rs ia vsa esa ts", "qed (auto simp add: unlift_b_e s_typing.simps)"], ["", "lemma e_type_local_shallow:\n  assumes \"\\<S>\\<bullet>\\<C> \\<turnstile> [Local n i vs es] : (ts _> ts')\"\n  shows \"\\<exists>tls. length tls = n \\<and> ts' = ts@tls \\<and> (\\<S>\\<bullet>(Some tls) \\<tturnstile>_i vs;es : tls)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>tls.\n       length tls = n \\<and>\n       ts' = ts @ tls \\<and>\n       \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls", "using assms"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> [Local n i vs es] : ts _> ts'\n\ngoal (1 subgoal):\n 1. \\<exists>tls.\n       length tls = n \\<and>\n       ts' = ts @ tls \\<and>\n       \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls", "proof (induction \"\\<S>\" \"\\<C>\" \"[Local n i vs es]\" \"(ts _> ts')\" arbitrary: ts ts')"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<C> b_es \\<S> ts ts'.\n       \\<lbrakk>\\<C> \\<turnstile> b_es : ts _> ts';\n        $* b_es = [Local n i vs es]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            length tls = n \\<and>\n                            ts' = ts @ tls \\<and>\n                            \\<S>\\<bullet>Some\n    tls \\<tturnstile>_ i vs;es : tls\n 2. \\<And>\\<S> \\<C> esa t1s t2s e t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        esa = [Local n i vs es] \\<Longrightarrow>\n        \\<exists>tls.\n           length tls = n \\<and>\n           t2s = t1s @ tls \\<and>\n           \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        e = Local n i vs es \\<Longrightarrow>\n        \\<exists>tls.\n           length tls = n \\<and>\n           t3s = t2s @ tls \\<and>\n           \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls;\n        esa @ [e] = [Local n i vs es]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            length tls = n \\<and>\n                            t3s = t1s @ tls \\<and>\n                            \\<S>\\<bullet>Some\n    tls \\<tturnstile>_ i vs;es : tls\n 3. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Local n i vs\n           es] : t1s _> t2s;\n        \\<exists>tls.\n           length tls = n \\<and>\n           t2s = t1s @ tls \\<and>\n           \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            length tls = n \\<and>\n                            ts @ t2s = (ts @ t1s) @ tls \\<and>\n                            \\<S>\\<bullet>Some\n    tls \\<tturnstile>_ i vs;es : tls\n 4. \\<And>\\<S> ts \\<C>.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;es : ts;\n        ?P2.8 \\<S> (Some ts) i vs es ts; length ts = n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            length tls = n \\<and>\n                            ts = [] @ tls \\<and>\n                            \\<S>\\<bullet>Some\n    tls \\<tturnstile>_ i vs;es : tls\n 5. \\<And>ia \\<S> tvs vsa \\<C> rs esa ts.\n       \\<lbrakk>ia < length (s_inst \\<S>); tvs = map typeof vsa;\n        \\<C> = (s_inst \\<S> ! ia)\n        \\<lparr>local := local (s_inst \\<S> ! ia) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        esa = [Local n i vs es] \\<Longrightarrow>\n        \\<exists>tls.\n           length tls = n \\<and>\n           ts = [] @ tls \\<and>\n           \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.8 \\<S> rs ia vsa esa ts", "case (1 \\<C> b_es \\<S>)"], ["proof (state)\nthis:\n  \\<C> \\<turnstile> b_es : ts _> ts'\n  $* b_es = [Local n i vs es]\n\ngoal (5 subgoals):\n 1. \\<And>\\<C> b_es \\<S> ts ts'.\n       \\<lbrakk>\\<C> \\<turnstile> b_es : ts _> ts';\n        $* b_es = [Local n i vs es]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            length tls = n \\<and>\n                            ts' = ts @ tls \\<and>\n                            \\<S>\\<bullet>Some\n    tls \\<tturnstile>_ i vs;es : tls\n 2. \\<And>\\<S> \\<C> esa t1s t2s e t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        esa = [Local n i vs es] \\<Longrightarrow>\n        \\<exists>tls.\n           length tls = n \\<and>\n           t2s = t1s @ tls \\<and>\n           \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        e = Local n i vs es \\<Longrightarrow>\n        \\<exists>tls.\n           length tls = n \\<and>\n           t3s = t2s @ tls \\<and>\n           \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls;\n        esa @ [e] = [Local n i vs es]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            length tls = n \\<and>\n                            t3s = t1s @ tls \\<and>\n                            \\<S>\\<bullet>Some\n    tls \\<tturnstile>_ i vs;es : tls\n 3. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Local n i vs\n           es] : t1s _> t2s;\n        \\<exists>tls.\n           length tls = n \\<and>\n           t2s = t1s @ tls \\<and>\n           \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            length tls = n \\<and>\n                            ts @ t2s = (ts @ t1s) @ tls \\<and>\n                            \\<S>\\<bullet>Some\n    tls \\<tturnstile>_ i vs;es : tls\n 4. \\<And>\\<S> ts \\<C>.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;es : ts;\n        ?P2.8 \\<S> (Some ts) i vs es ts; length ts = n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            length tls = n \\<and>\n                            ts = [] @ tls \\<and>\n                            \\<S>\\<bullet>Some\n    tls \\<tturnstile>_ i vs;es : tls\n 5. \\<And>ia \\<S> tvs vsa \\<C> rs esa ts.\n       \\<lbrakk>ia < length (s_inst \\<S>); tvs = map typeof vsa;\n        \\<C> = (s_inst \\<S> ! ia)\n        \\<lparr>local := local (s_inst \\<S> ! ia) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        esa = [Local n i vs es] \\<Longrightarrow>\n        \\<exists>tls.\n           length tls = n \\<and>\n           ts = [] @ tls \\<and>\n           \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.8 \\<S> rs ia vsa esa ts", "thus ?case"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> b_es : ts _> ts'\n  $* b_es = [Local n i vs es]\n\ngoal (1 subgoal):\n 1. \\<exists>tls.\n       length tls = n \\<and>\n       ts' = ts @ tls \\<and>\n       \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls", "by (metis e.distinct(7) map_eq_Cons_D)"], ["proof (state)\nthis:\n  \\<exists>tls.\n     length tls = n \\<and>\n     ts' = ts @ tls \\<and>\n     \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls\n\ngoal (4 subgoals):\n 1. \\<And>\\<S> \\<C> esa t1s t2s e t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        esa = [Local n i vs es] \\<Longrightarrow>\n        \\<exists>tls.\n           length tls = n \\<and>\n           t2s = t1s @ tls \\<and>\n           \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        e = Local n i vs es \\<Longrightarrow>\n        \\<exists>tls.\n           length tls = n \\<and>\n           t3s = t2s @ tls \\<and>\n           \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls;\n        esa @ [e] = [Local n i vs es]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            length tls = n \\<and>\n                            t3s = t1s @ tls \\<and>\n                            \\<S>\\<bullet>Some\n    tls \\<tturnstile>_ i vs;es : tls\n 2. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Local n i vs\n           es] : t1s _> t2s;\n        \\<exists>tls.\n           length tls = n \\<and>\n           t2s = t1s @ tls \\<and>\n           \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            length tls = n \\<and>\n                            ts @ t2s = (ts @ t1s) @ tls \\<and>\n                            \\<S>\\<bullet>Some\n    tls \\<tturnstile>_ i vs;es : tls\n 3. \\<And>\\<S> ts \\<C>.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;es : ts;\n        ?P2.8 \\<S> (Some ts) i vs es ts; length ts = n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            length tls = n \\<and>\n                            ts = [] @ tls \\<and>\n                            \\<S>\\<bullet>Some\n    tls \\<tturnstile>_ i vs;es : tls\n 4. \\<And>ia \\<S> tvs vsa \\<C> rs esa ts.\n       \\<lbrakk>ia < length (s_inst \\<S>); tvs = map typeof vsa;\n        \\<C> = (s_inst \\<S> ! ia)\n        \\<lparr>local := local (s_inst \\<S> ! ia) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        esa = [Local n i vs es] \\<Longrightarrow>\n        \\<exists>tls.\n           length tls = n \\<and>\n           ts = [] @ tls \\<and>\n           \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.8 \\<S> rs ia vsa esa ts", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<S> \\<C> esa t1s t2s e t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        esa = [Local n i vs es] \\<Longrightarrow>\n        \\<exists>tls.\n           length tls = n \\<and>\n           t2s = t1s @ tls \\<and>\n           \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        e = Local n i vs es \\<Longrightarrow>\n        \\<exists>tls.\n           length tls = n \\<and>\n           t3s = t2s @ tls \\<and>\n           \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls;\n        esa @ [e] = [Local n i vs es]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            length tls = n \\<and>\n                            t3s = t1s @ tls \\<and>\n                            \\<S>\\<bullet>Some\n    tls \\<tturnstile>_ i vs;es : tls\n 2. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Local n i vs\n           es] : t1s _> t2s;\n        \\<exists>tls.\n           length tls = n \\<and>\n           t2s = t1s @ tls \\<and>\n           \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            length tls = n \\<and>\n                            ts @ t2s = (ts @ t1s) @ tls \\<and>\n                            \\<S>\\<bullet>Some\n    tls \\<tturnstile>_ i vs;es : tls\n 3. \\<And>\\<S> ts \\<C>.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;es : ts;\n        ?P2.8 \\<S> (Some ts) i vs es ts; length ts = n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            length tls = n \\<and>\n                            ts = [] @ tls \\<and>\n                            \\<S>\\<bullet>Some\n    tls \\<tturnstile>_ i vs;es : tls\n 4. \\<And>ia \\<S> tvs vsa \\<C> rs esa ts.\n       \\<lbrakk>ia < length (s_inst \\<S>); tvs = map typeof vsa;\n        \\<C> = (s_inst \\<S> ! ia)\n        \\<lparr>local := local (s_inst \\<S> ! ia) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        esa = [Local n i vs es] \\<Longrightarrow>\n        \\<exists>tls.\n           length tls = n \\<and>\n           ts = [] @ tls \\<and>\n           \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.8 \\<S> rs ia vsa esa ts", "case (2 \\<S> \\<C> es t1s t2s e t3s)"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> t2s\n  es = [Local n i vs es] \\<Longrightarrow>\n  \\<exists>tls.\n     length tls = n \\<and>\n     t2s = t1s @ tls \\<and>\n     \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls\n  \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s\n  e = Local n i vs es \\<Longrightarrow>\n  \\<exists>tls.\n     length tls = n \\<and>\n     t3s = t2s @ tls \\<and>\n     \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls\n  es @ [e] = [Local n i vs es]\n\ngoal (4 subgoals):\n 1. \\<And>\\<S> \\<C> esa t1s t2s e t3s.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> esa : t1s _> t2s;\n        esa = [Local n i vs es] \\<Longrightarrow>\n        \\<exists>tls.\n           length tls = n \\<and>\n           t2s = t1s @ tls \\<and>\n           \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s;\n        e = Local n i vs es \\<Longrightarrow>\n        \\<exists>tls.\n           length tls = n \\<and>\n           t3s = t2s @ tls \\<and>\n           \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls;\n        esa @ [e] = [Local n i vs es]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            length tls = n \\<and>\n                            t3s = t1s @ tls \\<and>\n                            \\<S>\\<bullet>Some\n    tls \\<tturnstile>_ i vs;es : tls\n 2. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Local n i vs\n           es] : t1s _> t2s;\n        \\<exists>tls.\n           length tls = n \\<and>\n           t2s = t1s @ tls \\<and>\n           \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            length tls = n \\<and>\n                            ts @ t2s = (ts @ t1s) @ tls \\<and>\n                            \\<S>\\<bullet>Some\n    tls \\<tturnstile>_ i vs;es : tls\n 3. \\<And>\\<S> ts \\<C>.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;es : ts;\n        ?P2.8 \\<S> (Some ts) i vs es ts; length ts = n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            length tls = n \\<and>\n                            ts = [] @ tls \\<and>\n                            \\<S>\\<bullet>Some\n    tls \\<tturnstile>_ i vs;es : tls\n 4. \\<And>ia \\<S> tvs vsa \\<C> rs esa ts.\n       \\<lbrakk>ia < length (s_inst \\<S>); tvs = map typeof vsa;\n        \\<C> = (s_inst \\<S> ! ia)\n        \\<lparr>local := local (s_inst \\<S> ! ia) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        esa = [Local n i vs es] \\<Longrightarrow>\n        \\<exists>tls.\n           length tls = n \\<and>\n           ts = [] @ tls \\<and>\n           \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.8 \\<S> rs ia vsa esa ts", "thus ?case"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> es : t1s _> t2s\n  es = [Local n i vs es] \\<Longrightarrow>\n  \\<exists>tls.\n     length tls = n \\<and>\n     t2s = t1s @ tls \\<and>\n     \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls\n  \\<S>\\<bullet>\\<C> \\<turnstile> [e] : t2s _> t3s\n  e = Local n i vs es \\<Longrightarrow>\n  \\<exists>tls.\n     length tls = n \\<and>\n     t3s = t2s @ tls \\<and>\n     \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls\n  es @ [e] = [Local n i vs es]\n\ngoal (1 subgoal):\n 1. \\<exists>tls.\n       length tls = n \\<and>\n       t3s = t1s @ tls \\<and>\n       \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls", "by simp (metis append_Nil append_eq_append_conv e_type_comp_conc e_type_local)"], ["proof (state)\nthis:\n  \\<exists>tls.\n     length tls = n \\<and>\n     t3s = t1s @ tls \\<and>\n     \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls\n\ngoal (3 subgoals):\n 1. \\<And>\\<S> \\<C> t1s t2s ts.\n       \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> [Local n i vs\n           es] : t1s _> t2s;\n        \\<exists>tls.\n           length tls = n \\<and>\n           t2s = t1s @ tls \\<and>\n           \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            length tls = n \\<and>\n                            ts @ t2s = (ts @ t1s) @ tls \\<and>\n                            \\<S>\\<bullet>Some\n    tls \\<tturnstile>_ i vs;es : tls\n 2. \\<And>\\<S> ts \\<C>.\n       \\<lbrakk>\\<S>\\<bullet>Some ts \\<tturnstile>_ i vs;es : ts;\n        ?P2.8 \\<S> (Some ts) i vs es ts; length ts = n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tls.\n                            length tls = n \\<and>\n                            ts = [] @ tls \\<and>\n                            \\<S>\\<bullet>Some\n    tls \\<tturnstile>_ i vs;es : tls\n 3. \\<And>ia \\<S> tvs vsa \\<C> rs esa ts.\n       \\<lbrakk>ia < length (s_inst \\<S>); tvs = map typeof vsa;\n        \\<C> = (s_inst \\<S> ! ia)\n        \\<lparr>local := local (s_inst \\<S> ! ia) @ tvs,\n           return := rs\\<rparr>;\n        \\<S>\\<bullet>\\<C> \\<turnstile> esa : [] _> ts;\n        esa = [Local n i vs es] \\<Longrightarrow>\n        \\<exists>tls.\n           length tls = n \\<and>\n           ts = [] @ tls \\<and>\n           \\<S>\\<bullet>Some tls \\<tturnstile>_ i vs;es : tls;\n        rs = Some ts \\<or> rs = None\\<rbrakk>\n       \\<Longrightarrow> ?P2.8 \\<S> rs ia vsa esa ts", "qed simp_all"], ["", "(* Some proofs treat (lists of) consts as an opaque (typed) arrangement. *)"], ["", "lemma e_type_const_unwrap:\n  assumes \"is_const e\"\n  shows \"\\<exists>v. e = $C v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v. e = $C v", "using assms"], ["proof (prove)\nusing this:\n  is_const e\n\ngoal (1 subgoal):\n 1. \\<exists>v. e = $C v", "proof (cases e)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>is_const e; e = $x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. e = $C v\n 2. \\<lbrakk>is_const e; e = Trap\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v. e = $C v\n 3. \\<And>x3.\n       \\<lbrakk>is_const e; e = Callcl x3\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. e = $C v\n 4. \\<And>x41 x42 x43.\n       \\<lbrakk>is_const e; e = Label x41 x42 x43\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. e = $C v\n 5. \\<And>x51 x52 x53 x54.\n       \\<lbrakk>is_const e; e = Local x51 x52 x53 x54\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. e = $C v", "case (Basic x1)"], ["proof (state)\nthis:\n  e = $x1\n\ngoal (5 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>is_const e; e = $x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. e = $C v\n 2. \\<lbrakk>is_const e; e = Trap\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v. e = $C v\n 3. \\<And>x3.\n       \\<lbrakk>is_const e; e = Callcl x3\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. e = $C v\n 4. \\<And>x41 x42 x43.\n       \\<lbrakk>is_const e; e = Label x41 x42 x43\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. e = $C v\n 5. \\<And>x51 x52 x53 x54.\n       \\<lbrakk>is_const e; e = Local x51 x52 x53 x54\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. e = $C v", "then"], ["proof (chain)\npicking this:\n  e = $x1", "show ?thesis"], ["proof (prove)\nusing this:\n  e = $x1\n\ngoal (1 subgoal):\n 1. \\<exists>v. e = $C v", "using assms"], ["proof (prove)\nusing this:\n  e = $x1\n  is_const e\n\ngoal (1 subgoal):\n 1. \\<exists>v. e = $C v", "proof (cases x1)"], ["proof (state)\ngoal (31 subgoals):\n 1. \\<lbrakk>e = $x1; is_const e; x1 = Unreachable\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v. e = $C v\n 2. \\<lbrakk>e = $x1; is_const e; x1 = Nop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v. e = $C v\n 3. \\<lbrakk>e = $x1; is_const e; x1 = Drop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v. e = $C v\n 4. \\<lbrakk>e = $x1; is_const e; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v. e = $C v\n 5. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; is_const e; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. e = $C v\n 6. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; is_const e; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. e = $C v\n 7. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; is_const e; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. e = $C v\n 8. \\<And>x8.\n       \\<lbrakk>e = $x1; is_const e; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. e = $C v\n 9. \\<And>x9.\n       \\<lbrakk>e = $x1; is_const e; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. e = $C v\n 10. \\<And>x101 x102.\n        \\<lbrakk>e = $x1; is_const e; x1 = Br_table x101 x102\\<rbrakk>\n        \\<Longrightarrow> \\<exists>v. e = $C v\nA total of 31 subgoals...", "case (EConst x23)"], ["proof (state)\nthis:\n  x1 = C x23\n\ngoal (31 subgoals):\n 1. \\<lbrakk>e = $x1; is_const e; x1 = Unreachable\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v. e = $C v\n 2. \\<lbrakk>e = $x1; is_const e; x1 = Nop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v. e = $C v\n 3. \\<lbrakk>e = $x1; is_const e; x1 = Drop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v. e = $C v\n 4. \\<lbrakk>e = $x1; is_const e; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v. e = $C v\n 5. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; is_const e; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. e = $C v\n 6. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; is_const e; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. e = $C v\n 7. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; is_const e; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. e = $C v\n 8. \\<And>x8.\n       \\<lbrakk>e = $x1; is_const e; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. e = $C v\n 9. \\<And>x9.\n       \\<lbrakk>e = $x1; is_const e; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. e = $C v\n 10. \\<And>x101 x102.\n        \\<lbrakk>e = $x1; is_const e; x1 = Br_table x101 x102\\<rbrakk>\n        \\<Longrightarrow> \\<exists>v. e = $C v\nA total of 31 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1 = C x23\n\ngoal (1 subgoal):\n 1. \\<exists>v. e = $C v", "using Basic e_typing_s_typing.intros(1,3)"], ["proof (prove)\nusing this:\n  x1 = C x23\n  e = $x1\n  ?\\<C> \\<turnstile> ?b_es : ?tf \\<Longrightarrow>\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> $* ?b_es : ?tf\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> ?es : ?t1s _> ?t2s \\<Longrightarrow>\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> ?es : ?ts @ ?t1s _> ?ts @ ?t2s\n\ngoal (1 subgoal):\n 1. \\<exists>v. e = $C v", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>v. e = $C v\n\ngoal (30 subgoals):\n 1. \\<lbrakk>e = $x1; is_const e; x1 = Unreachable\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v. e = $C v\n 2. \\<lbrakk>e = $x1; is_const e; x1 = Nop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v. e = $C v\n 3. \\<lbrakk>e = $x1; is_const e; x1 = Drop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v. e = $C v\n 4. \\<lbrakk>e = $x1; is_const e; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v. e = $C v\n 5. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; is_const e; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. e = $C v\n 6. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; is_const e; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. e = $C v\n 7. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; is_const e; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. e = $C v\n 8. \\<And>x8.\n       \\<lbrakk>e = $x1; is_const e; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. e = $C v\n 9. \\<And>x9.\n       \\<lbrakk>e = $x1; is_const e; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. e = $C v\n 10. \\<And>x101 x102.\n        \\<lbrakk>e = $x1; is_const e; x1 = Br_table x101 x102\\<rbrakk>\n        \\<Longrightarrow> \\<exists>v. e = $C v\nA total of 30 subgoals...", "qed  (simp_all add: is_const_def)"], ["proof (state)\nthis:\n  \\<exists>v. e = $C v\n\ngoal (4 subgoals):\n 1. \\<lbrakk>is_const e; e = Trap\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v. e = $C v\n 2. \\<And>x3.\n       \\<lbrakk>is_const e; e = Callcl x3\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. e = $C v\n 3. \\<And>x41 x42 x43.\n       \\<lbrakk>is_const e; e = Label x41 x42 x43\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. e = $C v\n 4. \\<And>x51 x52 x53 x54.\n       \\<lbrakk>is_const e; e = Local x51 x52 x53 x54\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. e = $C v", "qed (simp_all add: is_const_def)"], ["", "lemma is_const_list1:\n  assumes \"ves = map (Basic \\<circ> EConst) vs\"\n  shows \"const_list ves\""], ["proof (prove)\ngoal (1 subgoal):\n 1. const_list ves", "using assms"], ["proof (prove)\nusing this:\n  ves = map (Basic \\<circ> EConst) vs\n\ngoal (1 subgoal):\n 1. const_list ves", "proof (induction vs arbitrary: ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ves.\n       ves = map (Basic \\<circ> EConst) [] \\<Longrightarrow> const_list ves\n 2. \\<And>a vs ves.\n       \\<lbrakk>\\<And>ves.\n                   ves = map (Basic \\<circ> EConst) vs \\<Longrightarrow>\n                   const_list ves;\n        ves = map (Basic \\<circ> EConst) (a # vs)\\<rbrakk>\n       \\<Longrightarrow> const_list ves", "case Nil"], ["proof (state)\nthis:\n  ves = map (Basic \\<circ> EConst) []\n\ngoal (2 subgoals):\n 1. \\<And>ves.\n       ves = map (Basic \\<circ> EConst) [] \\<Longrightarrow> const_list ves\n 2. \\<And>a vs ves.\n       \\<lbrakk>\\<And>ves.\n                   ves = map (Basic \\<circ> EConst) vs \\<Longrightarrow>\n                   const_list ves;\n        ves = map (Basic \\<circ> EConst) (a # vs)\\<rbrakk>\n       \\<Longrightarrow> const_list ves", "then"], ["proof (chain)\npicking this:\n  ves = map (Basic \\<circ> EConst) []", "show ?case"], ["proof (prove)\nusing this:\n  ves = map (Basic \\<circ> EConst) []\n\ngoal (1 subgoal):\n 1. const_list ves", "unfolding const_list_def"], ["proof (prove)\nusing this:\n  ves = map (Basic \\<circ> EConst) []\n\ngoal (1 subgoal):\n 1. list_all is_const ves", "by simp"], ["proof (state)\nthis:\n  const_list ves\n\ngoal (1 subgoal):\n 1. \\<And>a vs ves.\n       \\<lbrakk>\\<And>ves.\n                   ves = map (Basic \\<circ> EConst) vs \\<Longrightarrow>\n                   const_list ves;\n        ves = map (Basic \\<circ> EConst) (a # vs)\\<rbrakk>\n       \\<Longrightarrow> const_list ves", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a vs ves.\n       \\<lbrakk>\\<And>ves.\n                   ves = map (Basic \\<circ> EConst) vs \\<Longrightarrow>\n                   const_list ves;\n        ves = map (Basic \\<circ> EConst) (a # vs)\\<rbrakk>\n       \\<Longrightarrow> const_list ves", "case (Cons a vs)"], ["proof (state)\nthis:\n  ?ves = map (Basic \\<circ> EConst) vs \\<Longrightarrow> const_list ?ves\n  ves = map (Basic \\<circ> EConst) (a # vs)\n\ngoal (1 subgoal):\n 1. \\<And>a vs ves.\n       \\<lbrakk>\\<And>ves.\n                   ves = map (Basic \\<circ> EConst) vs \\<Longrightarrow>\n                   const_list ves;\n        ves = map (Basic \\<circ> EConst) (a # vs)\\<rbrakk>\n       \\<Longrightarrow> const_list ves", "then"], ["proof (chain)\npicking this:\n  ?ves = map (Basic \\<circ> EConst) vs \\<Longrightarrow> const_list ?ves\n  ves = map (Basic \\<circ> EConst) (a # vs)", "obtain ves' where \"ves' = map (Basic \\<circ> EConst) vs\""], ["proof (prove)\nusing this:\n  ?ves = map (Basic \\<circ> EConst) vs \\<Longrightarrow> const_list ?ves\n  ves = map (Basic \\<circ> EConst) (a # vs)\n\ngoal (1 subgoal):\n 1. (\\<And>ves'.\n        ves' = map (Basic \\<circ> EConst) vs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ves' = map (Basic \\<circ> EConst) vs\n\ngoal (1 subgoal):\n 1. \\<And>a vs ves.\n       \\<lbrakk>\\<And>ves.\n                   ves = map (Basic \\<circ> EConst) vs \\<Longrightarrow>\n                   const_list ves;\n        ves = map (Basic \\<circ> EConst) (a # vs)\\<rbrakk>\n       \\<Longrightarrow> const_list ves", "moreover"], ["proof (state)\nthis:\n  ves' = map (Basic \\<circ> EConst) vs\n\ngoal (1 subgoal):\n 1. \\<And>a vs ves.\n       \\<lbrakk>\\<And>ves.\n                   ves = map (Basic \\<circ> EConst) vs \\<Longrightarrow>\n                   const_list ves;\n        ves = map (Basic \\<circ> EConst) (a # vs)\\<rbrakk>\n       \\<Longrightarrow> const_list ves", "have \"is_const ((Basic \\<circ> EConst) a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_const ((Basic \\<circ> EConst) a)", "unfolding is_const_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. case (Basic \\<circ> EConst) a of $C xa \\<Rightarrow> True\n    | $_ \\<Rightarrow> False | _ \\<Rightarrow> False", "by simp"], ["proof (state)\nthis:\n  is_const ((Basic \\<circ> EConst) a)\n\ngoal (1 subgoal):\n 1. \\<And>a vs ves.\n       \\<lbrakk>\\<And>ves.\n                   ves = map (Basic \\<circ> EConst) vs \\<Longrightarrow>\n                   const_list ves;\n        ves = map (Basic \\<circ> EConst) (a # vs)\\<rbrakk>\n       \\<Longrightarrow> const_list ves", "ultimately"], ["proof (chain)\npicking this:\n  ves' = map (Basic \\<circ> EConst) vs\n  is_const ((Basic \\<circ> EConst) a)", "show ?case"], ["proof (prove)\nusing this:\n  ves' = map (Basic \\<circ> EConst) vs\n  is_const ((Basic \\<circ> EConst) a)\n\ngoal (1 subgoal):\n 1. const_list ves", "using Cons"], ["proof (prove)\nusing this:\n  ves' = map (Basic \\<circ> EConst) vs\n  is_const ((Basic \\<circ> EConst) a)\n  ?ves = map (Basic \\<circ> EConst) vs \\<Longrightarrow> const_list ?ves\n  ves = map (Basic \\<circ> EConst) (a # vs)\n\ngoal (1 subgoal):\n 1. const_list ves", "unfolding const_list_def"], ["proof (prove)\nusing this:\n  ves' = map (Basic \\<circ> EConst) vs\n  is_const ((Basic \\<circ> EConst) a)\n  ?ves = map (Basic \\<circ> EConst) vs \\<Longrightarrow>\n  list_all is_const ?ves\n  ves = map (Basic \\<circ> EConst) (a # vs)\n\ngoal (1 subgoal):\n 1. list_all is_const ves", "(* WHYYYYYY *)"], ["proof (prove)\nusing this:\n  ves' = map (Basic \\<circ> EConst) vs\n  is_const ((Basic \\<circ> EConst) a)\n  ?ves = map (Basic \\<circ> EConst) vs \\<Longrightarrow>\n  list_all is_const ?ves\n  ves = map (Basic \\<circ> EConst) (a # vs)\n\ngoal (1 subgoal):\n 1. list_all is_const ves", "by auto"], ["proof (state)\nthis:\n  const_list ves\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_const_list:\n  assumes \"ves = $$* vs\"\n  shows \"const_list ves\""], ["proof (prove)\ngoal (1 subgoal):\n 1. const_list ves", "using assms is_const_list1"], ["proof (prove)\nusing this:\n  ves = $$* vs\n  ?ves = map (Basic \\<circ> EConst) ?vs \\<Longrightarrow> const_list ?ves\n\ngoal (1 subgoal):\n 1. const_list ves", "unfolding comp_def"], ["proof (prove)\nusing this:\n  ves = $$* vs\n  ?ves = $$* ?vs \\<Longrightarrow> const_list ?ves\n\ngoal (1 subgoal):\n 1. const_list ves", "by auto"], ["", "lemma const_list_cons_last:\n  assumes \"const_list (es@[e])\"\n  shows \"const_list es\"\n        \"is_const e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. const_list es &&& is_const e", "using assms list_all_append[of is_const es \"[e]\"]"], ["proof (prove)\nusing this:\n  const_list (es @ [e])\n  list_all is_const (es @ [e]) =\n  (list_all is_const es \\<and> list_all is_const [e])\n\ngoal (1 subgoal):\n 1. const_list es &&& is_const e", "unfolding const_list_def"], ["proof (prove)\nusing this:\n  list_all is_const (es @ [e])\n  list_all is_const (es @ [e]) =\n  (list_all is_const es \\<and> list_all is_const [e])\n\ngoal (1 subgoal):\n 1. list_all is_const es &&& is_const e", "by auto"], ["", "lemma e_type_const1:\n  assumes \"is_const e\"\n  shows \"\\<exists>t. (\\<S>\\<bullet>\\<C> \\<turnstile> [e] : (ts _> ts@[t]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t. \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @ [t]", "using assms"], ["proof (prove)\nusing this:\n  is_const e\n\ngoal (1 subgoal):\n 1. \\<exists>t. \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @ [t]", "proof (cases e)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>is_const e; e = $x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]\n 2. \\<lbrakk>is_const e; e = Trap\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @ [t]\n 3. \\<And>x3.\n       \\<lbrakk>is_const e; e = Callcl x3\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]\n 4. \\<And>x41 x42 x43.\n       \\<lbrakk>is_const e; e = Label x41 x42 x43\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]\n 5. \\<And>x51 x52 x53 x54.\n       \\<lbrakk>is_const e; e = Local x51 x52 x53 x54\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]", "case (Basic x1)"], ["proof (state)\nthis:\n  e = $x1\n\ngoal (5 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>is_const e; e = $x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]\n 2. \\<lbrakk>is_const e; e = Trap\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @ [t]\n 3. \\<And>x3.\n       \\<lbrakk>is_const e; e = Callcl x3\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]\n 4. \\<And>x41 x42 x43.\n       \\<lbrakk>is_const e; e = Label x41 x42 x43\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]\n 5. \\<And>x51 x52 x53 x54.\n       \\<lbrakk>is_const e; e = Local x51 x52 x53 x54\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]", "then"], ["proof (chain)\npicking this:\n  e = $x1", "show ?thesis"], ["proof (prove)\nusing this:\n  e = $x1\n\ngoal (1 subgoal):\n 1. \\<exists>t. \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @ [t]", "using assms"], ["proof (prove)\nusing this:\n  e = $x1\n  is_const e\n\ngoal (1 subgoal):\n 1. \\<exists>t. \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @ [t]", "proof (cases x1)"], ["proof (state)\ngoal (31 subgoals):\n 1. \\<lbrakk>e = $x1; is_const e; x1 = Unreachable\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @ [t]\n 2. \\<lbrakk>e = $x1; is_const e; x1 = Nop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @ [t]\n 3. \\<lbrakk>e = $x1; is_const e; x1 = Drop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @ [t]\n 4. \\<lbrakk>e = $x1; is_const e; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @ [t]\n 5. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; is_const e; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]\n 6. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; is_const e; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]\n 7. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; is_const e; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]\n 8. \\<And>x8.\n       \\<lbrakk>e = $x1; is_const e; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]\n 9. \\<And>x9.\n       \\<lbrakk>e = $x1; is_const e; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]\n 10. \\<And>x101 x102.\n        \\<lbrakk>e = $x1; is_const e; x1 = Br_table x101 x102\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                  [t]\nA total of 31 subgoals...", "case (EConst x23)"], ["proof (state)\nthis:\n  x1 = C x23\n\ngoal (31 subgoals):\n 1. \\<lbrakk>e = $x1; is_const e; x1 = Unreachable\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @ [t]\n 2. \\<lbrakk>e = $x1; is_const e; x1 = Nop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @ [t]\n 3. \\<lbrakk>e = $x1; is_const e; x1 = Drop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @ [t]\n 4. \\<lbrakk>e = $x1; is_const e; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @ [t]\n 5. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; is_const e; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]\n 6. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; is_const e; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]\n 7. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; is_const e; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]\n 8. \\<And>x8.\n       \\<lbrakk>e = $x1; is_const e; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]\n 9. \\<And>x9.\n       \\<lbrakk>e = $x1; is_const e; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]\n 10. \\<And>x101 x102.\n        \\<lbrakk>e = $x1; is_const e; x1 = Br_table x101 x102\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                  [t]\nA total of 31 subgoals...", "hence \"\\<C> \\<turnstile> [x1] : ([] _> [typeof x23])\""], ["proof (prove)\nusing this:\n  x1 = C x23\n\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> [x1] : [] _> [typeof x23]", "by (simp add: b_e_typing.intros(1))"], ["proof (state)\nthis:\n  \\<C> \\<turnstile> [x1] : [] _> [typeof x23]\n\ngoal (31 subgoals):\n 1. \\<lbrakk>e = $x1; is_const e; x1 = Unreachable\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @ [t]\n 2. \\<lbrakk>e = $x1; is_const e; x1 = Nop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @ [t]\n 3. \\<lbrakk>e = $x1; is_const e; x1 = Drop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @ [t]\n 4. \\<lbrakk>e = $x1; is_const e; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @ [t]\n 5. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; is_const e; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]\n 6. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; is_const e; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]\n 7. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; is_const e; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]\n 8. \\<And>x8.\n       \\<lbrakk>e = $x1; is_const e; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]\n 9. \\<And>x9.\n       \\<lbrakk>e = $x1; is_const e; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]\n 10. \\<And>x101 x102.\n        \\<lbrakk>e = $x1; is_const e; x1 = Br_table x101 x102\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                  [t]\nA total of 31 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [x1] : [] _> [typeof x23]\n\ngoal (1 subgoal):\n 1. \\<exists>t. \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @ [t]", "using Basic e_typing_s_typing.intros(1,3)"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [x1] : [] _> [typeof x23]\n  e = $x1\n  ?\\<C> \\<turnstile> ?b_es : ?tf \\<Longrightarrow>\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> $* ?b_es : ?tf\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> ?es : ?t1s _> ?t2s \\<Longrightarrow>\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> ?es : ?ts @ ?t1s _> ?ts @ ?t2s\n\ngoal (1 subgoal):\n 1. \\<exists>t. \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @ [t]", "by (metis append_Nil2 to_e_list_1)"], ["proof (state)\nthis:\n  \\<exists>t. \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @ [t]\n\ngoal (30 subgoals):\n 1. \\<lbrakk>e = $x1; is_const e; x1 = Unreachable\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @ [t]\n 2. \\<lbrakk>e = $x1; is_const e; x1 = Nop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @ [t]\n 3. \\<lbrakk>e = $x1; is_const e; x1 = Drop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @ [t]\n 4. \\<lbrakk>e = $x1; is_const e; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @ [t]\n 5. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; is_const e; x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]\n 6. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; is_const e; x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]\n 7. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; is_const e; x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]\n 8. \\<And>x8.\n       \\<lbrakk>e = $x1; is_const e; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]\n 9. \\<And>x9.\n       \\<lbrakk>e = $x1; is_const e; x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]\n 10. \\<And>x101 x102.\n        \\<lbrakk>e = $x1; is_const e; x1 = Br_table x101 x102\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t.\n                             \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                  [t]\nA total of 30 subgoals...", "qed  (simp_all add: is_const_def)"], ["proof (state)\nthis:\n  \\<exists>t. \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @ [t]\n\ngoal (4 subgoals):\n 1. \\<lbrakk>is_const e; e = Trap\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @ [t]\n 2. \\<And>x3.\n       \\<lbrakk>is_const e; e = Callcl x3\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]\n 3. \\<And>x41 x42 x43.\n       \\<lbrakk>is_const e; e = Label x41 x42 x43\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]\n 4. \\<And>x51 x52 x53 x54.\n       \\<lbrakk>is_const e; e = Local x51 x52 x53 x54\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts @\n                                 [t]", "qed (simp_all add: is_const_def)"], ["", "lemma e_type_const:\n  assumes \"is_const e\"\n          \"\\<S>\\<bullet>\\<C> \\<turnstile> [e] : (ts _> ts')\"\n  shows  \"\\<exists>t. (ts' = ts@[t]) \\<and> (\\<S>\\<bullet>\\<C>' \\<turnstile> [e] : ([] _> [t]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t.\n       ts' = ts @ [t] \\<and> \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]", "using assms"], ["proof (prove)\nusing this:\n  is_const e\n  \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts'\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       ts' = ts @ [t] \\<and> \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]", "proof (cases e)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>is_const e; \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        e = $x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 2. \\<lbrakk>is_const e; \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n     e = Trap\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         ts' = ts @ [t] \\<and>\n                         \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 3. \\<And>x3.\n       \\<lbrakk>is_const e; \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        e = Callcl x3\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 4. \\<And>x41 x42 x43.\n       \\<lbrakk>is_const e; \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        e = Label x41 x42 x43\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 5. \\<And>x51 x52 x53 x54.\n       \\<lbrakk>is_const e; \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        e = Local x51 x52 x53 x54\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]", "case (Basic x1)"], ["proof (state)\nthis:\n  e = $x1\n\ngoal (5 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>is_const e; \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        e = $x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 2. \\<lbrakk>is_const e; \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n     e = Trap\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         ts' = ts @ [t] \\<and>\n                         \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 3. \\<And>x3.\n       \\<lbrakk>is_const e; \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        e = Callcl x3\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 4. \\<And>x41 x42 x43.\n       \\<lbrakk>is_const e; \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        e = Label x41 x42 x43\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 5. \\<And>x51 x52 x53 x54.\n       \\<lbrakk>is_const e; \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        e = Local x51 x52 x53 x54\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]", "then"], ["proof (chain)\npicking this:\n  e = $x1", "show ?thesis"], ["proof (prove)\nusing this:\n  e = $x1\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       ts' = ts @ [t] \\<and> \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]", "using assms"], ["proof (prove)\nusing this:\n  e = $x1\n  is_const e\n  \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts'\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       ts' = ts @ [t] \\<and> \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]", "proof (cases x1)"], ["proof (state)\ngoal (31 subgoals):\n 1. \\<lbrakk>e = $x1; is_const e;\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n     x1 = Unreachable\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         ts' = ts @ [t] \\<and>\n                         \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 2. \\<lbrakk>e = $x1; is_const e;\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts'; x1 = Nop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         ts' = ts @ [t] \\<and>\n                         \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 3. \\<lbrakk>e = $x1; is_const e;\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts'; x1 = Drop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         ts' = ts @ [t] \\<and>\n                         \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 4. \\<lbrakk>e = $x1; is_const e;\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts'; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         ts' = ts @ [t] \\<and>\n                         \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 5. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 6. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 7. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 8. \\<And>x8.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts'; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 9. \\<And>x9.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 10. \\<And>x101 x102.\n        \\<lbrakk>e = $x1; is_const e;\n         \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n         x1 = Br_table x101 x102\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t.\n                             ts' = ts @ [t] \\<and>\n                             \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\nA total of 31 subgoals...", "case (EConst x23)"], ["proof (state)\nthis:\n  x1 = C x23\n\ngoal (31 subgoals):\n 1. \\<lbrakk>e = $x1; is_const e;\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n     x1 = Unreachable\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         ts' = ts @ [t] \\<and>\n                         \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 2. \\<lbrakk>e = $x1; is_const e;\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts'; x1 = Nop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         ts' = ts @ [t] \\<and>\n                         \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 3. \\<lbrakk>e = $x1; is_const e;\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts'; x1 = Drop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         ts' = ts @ [t] \\<and>\n                         \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 4. \\<lbrakk>e = $x1; is_const e;\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts'; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         ts' = ts @ [t] \\<and>\n                         \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 5. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 6. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 7. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 8. \\<And>x8.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts'; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 9. \\<And>x9.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 10. \\<And>x101 x102.\n        \\<lbrakk>e = $x1; is_const e;\n         \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n         x1 = Br_table x101 x102\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t.\n                             ts' = ts @ [t] \\<and>\n                             \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\nA total of 31 subgoals...", "then"], ["proof (chain)\npicking this:\n  x1 = C x23", "have \"ts' = ts @ [typeof x23]\""], ["proof (prove)\nusing this:\n  x1 = C x23\n\ngoal (1 subgoal):\n 1. ts' = ts @ [typeof x23]", "by (metis (no_types) Basic assms(2) b_e_type_value list.simps(8,9) unlift_b_e)"], ["proof (state)\nthis:\n  ts' = ts @ [typeof x23]\n\ngoal (31 subgoals):\n 1. \\<lbrakk>e = $x1; is_const e;\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n     x1 = Unreachable\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         ts' = ts @ [t] \\<and>\n                         \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 2. \\<lbrakk>e = $x1; is_const e;\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts'; x1 = Nop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         ts' = ts @ [t] \\<and>\n                         \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 3. \\<lbrakk>e = $x1; is_const e;\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts'; x1 = Drop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         ts' = ts @ [t] \\<and>\n                         \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 4. \\<lbrakk>e = $x1; is_const e;\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts'; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         ts' = ts @ [t] \\<and>\n                         \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 5. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 6. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 7. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 8. \\<And>x8.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts'; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 9. \\<And>x9.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 10. \\<And>x101 x102.\n        \\<lbrakk>e = $x1; is_const e;\n         \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n         x1 = Br_table x101 x102\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t.\n                             ts' = ts @ [t] \\<and>\n                             \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\nA total of 31 subgoals...", "moreover"], ["proof (state)\nthis:\n  ts' = ts @ [typeof x23]\n\ngoal (31 subgoals):\n 1. \\<lbrakk>e = $x1; is_const e;\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n     x1 = Unreachable\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         ts' = ts @ [t] \\<and>\n                         \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 2. \\<lbrakk>e = $x1; is_const e;\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts'; x1 = Nop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         ts' = ts @ [t] \\<and>\n                         \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 3. \\<lbrakk>e = $x1; is_const e;\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts'; x1 = Drop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         ts' = ts @ [t] \\<and>\n                         \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 4. \\<lbrakk>e = $x1; is_const e;\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts'; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         ts' = ts @ [t] \\<and>\n                         \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 5. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 6. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 7. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 8. \\<And>x8.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts'; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 9. \\<And>x9.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 10. \\<And>x101 x102.\n        \\<lbrakk>e = $x1; is_const e;\n         \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n         x1 = Br_table x101 x102\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t.\n                             ts' = ts @ [t] \\<and>\n                             \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\nA total of 31 subgoals...", "have \"\\<S>\\<bullet>\\<C>' \\<turnstile> [e] : ([] _> [typeof x23])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [typeof x23]", "using Basic EConst b_e_typing.intros(1) e_typing_s_typing.intros(1)"], ["proof (prove)\nusing this:\n  e = $x1\n  x1 = C x23\n  ?\\<C> \\<turnstile> [C ?v] : [] _> [typeof ?v]\n  ?\\<C> \\<turnstile> ?b_es : ?tf \\<Longrightarrow>\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> $* ?b_es : ?tf\n\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [typeof x23]", "by fastforce"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [typeof x23]\n\ngoal (31 subgoals):\n 1. \\<lbrakk>e = $x1; is_const e;\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n     x1 = Unreachable\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         ts' = ts @ [t] \\<and>\n                         \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 2. \\<lbrakk>e = $x1; is_const e;\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts'; x1 = Nop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         ts' = ts @ [t] \\<and>\n                         \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 3. \\<lbrakk>e = $x1; is_const e;\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts'; x1 = Drop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         ts' = ts @ [t] \\<and>\n                         \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 4. \\<lbrakk>e = $x1; is_const e;\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts'; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         ts' = ts @ [t] \\<and>\n                         \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 5. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 6. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 7. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 8. \\<And>x8.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts'; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 9. \\<And>x9.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 10. \\<And>x101 x102.\n        \\<lbrakk>e = $x1; is_const e;\n         \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n         x1 = Br_table x101 x102\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t.\n                             ts' = ts @ [t] \\<and>\n                             \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\nA total of 31 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  ts' = ts @ [typeof x23]\n  \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [typeof x23]", "show ?thesis"], ["proof (prove)\nusing this:\n  ts' = ts @ [typeof x23]\n  \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [typeof x23]\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       ts' = ts @ [t] \\<and> \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]", "by simp"], ["proof (state)\nthis:\n  \\<exists>t.\n     ts' = ts @ [t] \\<and> \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n\ngoal (30 subgoals):\n 1. \\<lbrakk>e = $x1; is_const e;\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n     x1 = Unreachable\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         ts' = ts @ [t] \\<and>\n                         \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 2. \\<lbrakk>e = $x1; is_const e;\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts'; x1 = Nop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         ts' = ts @ [t] \\<and>\n                         \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 3. \\<lbrakk>e = $x1; is_const e;\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts'; x1 = Drop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         ts' = ts @ [t] \\<and>\n                         \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 4. \\<lbrakk>e = $x1; is_const e;\n     \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts'; x1 = Select\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         ts' = ts @ [t] \\<and>\n                         \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 5. \\<And>x51 x52.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        x1 = Block x51 x52\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 6. \\<And>x61 x62.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        x1 = Loop x61 x62\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 7. \\<And>x71 x72 x73.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        x1 = b_e.If x71 x72 x73\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 8. \\<And>x8.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts'; x1 = Br x8\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 9. \\<And>x9.\n       \\<lbrakk>e = $x1; is_const e;\n        \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        x1 = Br_if x9\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 10. \\<And>x101 x102.\n        \\<lbrakk>e = $x1; is_const e;\n         \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n         x1 = Br_table x101 x102\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t.\n                             ts' = ts @ [t] \\<and>\n                             \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\nA total of 30 subgoals...", "qed  (simp_all add: is_const_def)"], ["proof (state)\nthis:\n  \\<exists>t.\n     ts' = ts @ [t] \\<and> \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n\ngoal (4 subgoals):\n 1. \\<lbrakk>is_const e; \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n     e = Trap\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         ts' = ts @ [t] \\<and>\n                         \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 2. \\<And>x3.\n       \\<lbrakk>is_const e; \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        e = Callcl x3\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 3. \\<And>x41 x42 x43.\n       \\<lbrakk>is_const e; \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        e = Label x41 x42 x43\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]\n 4. \\<And>x51 x52 x53 x54.\n       \\<lbrakk>is_const e; \\<S>\\<bullet>\\<C> \\<turnstile> [e] : ts _> ts';\n        e = Local x51 x52 x53 x54\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            ts' = ts @ [t] \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [e] : [] _> [t]", "qed (simp_all add: is_const_def)"], ["", "lemma const_typeof:\n  assumes \"\\<S>\\<bullet>\\<C> \\<turnstile> [$C v] : ([] _> [t])\"\n  shows \"typeof v = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typeof v = t", "using assms"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> [$C v] : [] _> [t]\n\ngoal (1 subgoal):\n 1. typeof v = t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C> \\<turnstile> [$C v] : [] _> [t] \\<Longrightarrow>\n    typeof v = t", "have \"\\<C> \\<turnstile> [C v] : ([] _> [t])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> [C v] : [] _> [t]", "using unlift_b_e assms"], ["proof (prove)\nusing this:\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> $* ?b_es : ?tf \\<Longrightarrow>\n  ?\\<C> \\<turnstile> ?b_es : ?tf\n  \\<S>\\<bullet>\\<C> \\<turnstile> [$C v] : [] _> [t]\n\ngoal (1 subgoal):\n 1. \\<C> \\<turnstile> [C v] : [] _> [t]", "by fastforce"], ["proof (state)\nthis:\n  \\<C> \\<turnstile> [C v] : [] _> [t]\n\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C> \\<turnstile> [$C v] : [] _> [t] \\<Longrightarrow>\n    typeof v = t", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> [C v] : [] _> [t]\n\ngoal (1 subgoal):\n 1. typeof v = t", "by (induction \"[C v]\" \"([] _> [t])\" rule: b_e_typing.induct, auto)"], ["proof (state)\nthis:\n  typeof v = t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma e_type_const_list:\n  assumes \"const_list vs\"\n          \"\\<S>\\<bullet>\\<C> \\<turnstile> vs : (ts _> ts')\"\n  shows   \"\\<exists>tvs. ts' = ts @ tvs \\<and> length vs = length tvs \\<and> (\\<S>\\<bullet>\\<C>' \\<turnstile> vs : ([] _> tvs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>tvs.\n       ts' = ts @ tvs \\<and>\n       length vs = length tvs \\<and>\n       \\<S>\\<bullet>\\<C>' \\<turnstile> vs : [] _> tvs", "using assms"], ["proof (prove)\nusing this:\n  const_list vs\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs : ts _> ts'\n\ngoal (1 subgoal):\n 1. \\<exists>tvs.\n       ts' = ts @ tvs \\<and>\n       length vs = length tvs \\<and>\n       \\<S>\\<bullet>\\<C>' \\<turnstile> vs : [] _> tvs", "proof (induction vs arbitrary: ts ts' rule: List.rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ts ts'.\n       \\<lbrakk>const_list [];\n        \\<S>\\<bullet>\\<C> \\<turnstile> [] : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tvs.\n                            ts' = ts @ tvs \\<and>\n                            length [] = length tvs \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [] : [] _> tvs\n 2. \\<And>x xs ts ts'.\n       \\<lbrakk>\\<And>ts ts'.\n                   \\<lbrakk>const_list xs;\n                    \\<S>\\<bullet>\\<C> \\<turnstile> xs : ts _> ts'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>tvs.\n  ts' = ts @ tvs \\<and>\n  length xs = length tvs \\<and>\n  \\<S>\\<bullet>\\<C>' \\<turnstile> xs : [] _> tvs;\n        const_list (xs @ [x]);\n        \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tvs.\n                            ts' = ts @ tvs \\<and>\n                            length (xs @ [x]) = length tvs \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> xs @\n                      [x] : [] _> tvs", "case Nil"], ["proof (state)\nthis:\n  const_list []\n  \\<S>\\<bullet>\\<C> \\<turnstile> [] : ts _> ts'\n\ngoal (2 subgoals):\n 1. \\<And>ts ts'.\n       \\<lbrakk>const_list [];\n        \\<S>\\<bullet>\\<C> \\<turnstile> [] : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tvs.\n                            ts' = ts @ tvs \\<and>\n                            length [] = length tvs \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [] : [] _> tvs\n 2. \\<And>x xs ts ts'.\n       \\<lbrakk>\\<And>ts ts'.\n                   \\<lbrakk>const_list xs;\n                    \\<S>\\<bullet>\\<C> \\<turnstile> xs : ts _> ts'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>tvs.\n  ts' = ts @ tvs \\<and>\n  length xs = length tvs \\<and>\n  \\<S>\\<bullet>\\<C>' \\<turnstile> xs : [] _> tvs;\n        const_list (xs @ [x]);\n        \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tvs.\n                            ts' = ts @ tvs \\<and>\n                            length (xs @ [x]) = length tvs \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> xs @\n                      [x] : [] _> tvs", "have \"\\<S>\\<bullet>\\<C>' \\<turnstile> [] : ([] _> [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C>' \\<turnstile> [] : [] _> []", "using b_e_type_empty[of \\<C>' \"[]\" \"[]\"] e_typing_s_typing.intros(1)"], ["proof (prove)\nusing this:\n  \\<C>' \\<turnstile> [] : [] _> [] = ([] = [])\n  ?\\<C> \\<turnstile> ?b_es : ?tf \\<Longrightarrow>\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> $* ?b_es : ?tf\n\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C>' \\<turnstile> [] : [] _> []", "by fastforce"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C>' \\<turnstile> [] : [] _> []\n\ngoal (2 subgoals):\n 1. \\<And>ts ts'.\n       \\<lbrakk>const_list [];\n        \\<S>\\<bullet>\\<C> \\<turnstile> [] : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tvs.\n                            ts' = ts @ tvs \\<and>\n                            length [] = length tvs \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> [] : [] _> tvs\n 2. \\<And>x xs ts ts'.\n       \\<lbrakk>\\<And>ts ts'.\n                   \\<lbrakk>const_list xs;\n                    \\<S>\\<bullet>\\<C> \\<turnstile> xs : ts _> ts'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>tvs.\n  ts' = ts @ tvs \\<and>\n  length xs = length tvs \\<and>\n  \\<S>\\<bullet>\\<C>' \\<turnstile> xs : [] _> tvs;\n        const_list (xs @ [x]);\n        \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tvs.\n                            ts' = ts @ tvs \\<and>\n                            length (xs @ [x]) = length tvs \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> xs @\n                      [x] : [] _> tvs", "thus ?case"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C>' \\<turnstile> [] : [] _> []\n\ngoal (1 subgoal):\n 1. \\<exists>tvs.\n       ts' = ts @ tvs \\<and>\n       length [] = length tvs \\<and>\n       \\<S>\\<bullet>\\<C>' \\<turnstile> [] : [] _> tvs", "using Nil"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C>' \\<turnstile> [] : [] _> []\n  const_list []\n  \\<S>\\<bullet>\\<C> \\<turnstile> [] : ts _> ts'\n\ngoal (1 subgoal):\n 1. \\<exists>tvs.\n       ts' = ts @ tvs \\<and>\n       length [] = length tvs \\<and>\n       \\<S>\\<bullet>\\<C>' \\<turnstile> [] : [] _> tvs", "by (metis append_Nil2 b_e_type_empty list.map(1) list.size(3) unlift_b_e)"], ["proof (state)\nthis:\n  \\<exists>tvs.\n     ts' = ts @ tvs \\<and>\n     length [] = length tvs \\<and>\n     \\<S>\\<bullet>\\<C>' \\<turnstile> [] : [] _> tvs\n\ngoal (1 subgoal):\n 1. \\<And>x xs ts ts'.\n       \\<lbrakk>\\<And>ts ts'.\n                   \\<lbrakk>const_list xs;\n                    \\<S>\\<bullet>\\<C> \\<turnstile> xs : ts _> ts'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>tvs.\n  ts' = ts @ tvs \\<and>\n  length xs = length tvs \\<and>\n  \\<S>\\<bullet>\\<C>' \\<turnstile> xs : [] _> tvs;\n        const_list (xs @ [x]);\n        \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tvs.\n                            ts' = ts @ tvs \\<and>\n                            length (xs @ [x]) = length tvs \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> xs @\n                      [x] : [] _> tvs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs ts ts'.\n       \\<lbrakk>\\<And>ts ts'.\n                   \\<lbrakk>const_list xs;\n                    \\<S>\\<bullet>\\<C> \\<turnstile> xs : ts _> ts'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>tvs.\n  ts' = ts @ tvs \\<and>\n  length xs = length tvs \\<and>\n  \\<S>\\<bullet>\\<C>' \\<turnstile> xs : [] _> tvs;\n        const_list (xs @ [x]);\n        \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tvs.\n                            ts' = ts @ tvs \\<and>\n                            length (xs @ [x]) = length tvs \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> xs @\n                      [x] : [] _> tvs", "case (snoc x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>const_list xs;\n   \\<S>\\<bullet>\\<C> \\<turnstile> xs : ?ts _> ?ts'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>tvs.\n                       ?ts' = ?ts @ tvs \\<and>\n                       length xs = length tvs \\<and>\n                       \\<S>\\<bullet>\\<C>' \\<turnstile> xs : [] _> tvs\n  const_list (xs @ [x])\n  \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : ts _> ts'\n\ngoal (1 subgoal):\n 1. \\<And>x xs ts ts'.\n       \\<lbrakk>\\<And>ts ts'.\n                   \\<lbrakk>const_list xs;\n                    \\<S>\\<bullet>\\<C> \\<turnstile> xs : ts _> ts'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>tvs.\n  ts' = ts @ tvs \\<and>\n  length xs = length tvs \\<and>\n  \\<S>\\<bullet>\\<C>' \\<turnstile> xs : [] _> tvs;\n        const_list (xs @ [x]);\n        \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tvs.\n                            ts' = ts @ tvs \\<and>\n                            length (xs @ [x]) = length tvs \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> xs @\n                      [x] : [] _> tvs", "hence v_lists:\"list_all is_const xs\" \"is_const x\""], ["proof (prove)\nusing this:\n  \\<lbrakk>const_list xs;\n   \\<S>\\<bullet>\\<C> \\<turnstile> xs : ?ts _> ?ts'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>tvs.\n                       ?ts' = ?ts @ tvs \\<and>\n                       length xs = length tvs \\<and>\n                       \\<S>\\<bullet>\\<C>' \\<turnstile> xs : [] _> tvs\n  const_list (xs @ [x])\n  \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : ts _> ts'\n\ngoal (1 subgoal):\n 1. list_all is_const xs &&& is_const x", "unfolding const_list_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>list_all is_const xs;\n   \\<S>\\<bullet>\\<C> \\<turnstile> xs : ?ts _> ?ts'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>tvs.\n                       ?ts' = ?ts @ tvs \\<and>\n                       length xs = length tvs \\<and>\n                       \\<S>\\<bullet>\\<C>' \\<turnstile> xs : [] _> tvs\n  list_all is_const (xs @ [x])\n  \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : ts _> ts'\n\ngoal (1 subgoal):\n 1. list_all is_const xs &&& is_const x", "by simp_all"], ["proof (state)\nthis:\n  list_all is_const xs\n  is_const x\n\ngoal (1 subgoal):\n 1. \\<And>x xs ts ts'.\n       \\<lbrakk>\\<And>ts ts'.\n                   \\<lbrakk>const_list xs;\n                    \\<S>\\<bullet>\\<C> \\<turnstile> xs : ts _> ts'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>tvs.\n  ts' = ts @ tvs \\<and>\n  length xs = length tvs \\<and>\n  \\<S>\\<bullet>\\<C>' \\<turnstile> xs : [] _> tvs;\n        const_list (xs @ [x]);\n        \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tvs.\n                            ts' = ts @ tvs \\<and>\n                            length (xs @ [x]) = length tvs \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> xs @\n                      [x] : [] _> tvs", "obtain ts'' where ts''_def:\"\\<S>\\<bullet>\\<C> \\<turnstile> xs : (ts _> ts'')\" \"\\<S>\\<bullet>\\<C> \\<turnstile> [x] : (ts'' _> ts')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ts''.\n        \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> xs : ts _> ts'';\n         \\<S>\\<bullet>\\<C> \\<turnstile> [x] : ts'' _> ts'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using snoc(3) e_type_comp"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : ts _> ts'\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> ?es @\n                                   [?e] : ?t1s _> ?t3s \\<Longrightarrow>\n  \\<exists>ts'.\n     ?\\<S>\\<bullet>?\\<C> \\<turnstile> ?es : ?t1s _> ts' \\<and>\n     ?\\<S>\\<bullet>?\\<C> \\<turnstile> [?e] : ts' _> ?t3s\n\ngoal (1 subgoal):\n 1. (\\<And>ts''.\n        \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> xs : ts _> ts'';\n         \\<S>\\<bullet>\\<C> \\<turnstile> [x] : ts'' _> ts'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> xs : ts _> ts''\n  \\<S>\\<bullet>\\<C> \\<turnstile> [x] : ts'' _> ts'\n\ngoal (1 subgoal):\n 1. \\<And>x xs ts ts'.\n       \\<lbrakk>\\<And>ts ts'.\n                   \\<lbrakk>const_list xs;\n                    \\<S>\\<bullet>\\<C> \\<turnstile> xs : ts _> ts'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>tvs.\n  ts' = ts @ tvs \\<and>\n  length xs = length tvs \\<and>\n  \\<S>\\<bullet>\\<C>' \\<turnstile> xs : [] _> tvs;\n        const_list (xs @ [x]);\n        \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tvs.\n                            ts' = ts @ tvs \\<and>\n                            length (xs @ [x]) = length tvs \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> xs @\n                      [x] : [] _> tvs", "then"], ["proof (chain)\npicking this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> xs : ts _> ts''\n  \\<S>\\<bullet>\\<C> \\<turnstile> [x] : ts'' _> ts'", "obtain ts_b where ts_b_def:\"ts'' = ts @ ts_b\" \"length xs = length ts_b\" \"\\<S>\\<bullet>\\<C>' \\<turnstile> xs : ([] _> ts_b)\""], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> xs : ts _> ts''\n  \\<S>\\<bullet>\\<C> \\<turnstile> [x] : ts'' _> ts'\n\ngoal (1 subgoal):\n 1. (\\<And>ts_b.\n        \\<lbrakk>ts'' = ts @ ts_b; length xs = length ts_b;\n         \\<S>\\<bullet>\\<C>' \\<turnstile> xs : [] _> ts_b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using snoc(1) v_lists(1)"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> xs : ts _> ts''\n  \\<S>\\<bullet>\\<C> \\<turnstile> [x] : ts'' _> ts'\n  \\<lbrakk>const_list xs;\n   \\<S>\\<bullet>\\<C> \\<turnstile> xs : ?ts _> ?ts'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>tvs.\n                       ?ts' = ?ts @ tvs \\<and>\n                       length xs = length tvs \\<and>\n                       \\<S>\\<bullet>\\<C>' \\<turnstile> xs : [] _> tvs\n  list_all is_const xs\n\ngoal (1 subgoal):\n 1. (\\<And>ts_b.\n        \\<lbrakk>ts'' = ts @ ts_b; length xs = length ts_b;\n         \\<S>\\<bullet>\\<C>' \\<turnstile> xs : [] _> ts_b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding const_list_def"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> xs : ts _> ts''\n  \\<S>\\<bullet>\\<C> \\<turnstile> [x] : ts'' _> ts'\n  \\<lbrakk>list_all is_const xs;\n   \\<S>\\<bullet>\\<C> \\<turnstile> xs : ?ts _> ?ts'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>tvs.\n                       ?ts' = ?ts @ tvs \\<and>\n                       length xs = length tvs \\<and>\n                       \\<S>\\<bullet>\\<C>' \\<turnstile> xs : [] _> tvs\n  list_all is_const xs\n\ngoal (1 subgoal):\n 1. (\\<And>ts_b.\n        \\<lbrakk>ts'' = ts @ ts_b; length xs = length ts_b;\n         \\<S>\\<bullet>\\<C>' \\<turnstile> xs : [] _> ts_b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  ts'' = ts @ ts_b\n  length xs = length ts_b\n  \\<S>\\<bullet>\\<C>' \\<turnstile> xs : [] _> ts_b\n\ngoal (1 subgoal):\n 1. \\<And>x xs ts ts'.\n       \\<lbrakk>\\<And>ts ts'.\n                   \\<lbrakk>const_list xs;\n                    \\<S>\\<bullet>\\<C> \\<turnstile> xs : ts _> ts'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>tvs.\n  ts' = ts @ tvs \\<and>\n  length xs = length tvs \\<and>\n  \\<S>\\<bullet>\\<C>' \\<turnstile> xs : [] _> tvs;\n        const_list (xs @ [x]);\n        \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tvs.\n                            ts' = ts @ tvs \\<and>\n                            length (xs @ [x]) = length tvs \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> xs @\n                      [x] : [] _> tvs", "then"], ["proof (chain)\npicking this:\n  ts'' = ts @ ts_b\n  length xs = length ts_b\n  \\<S>\\<bullet>\\<C>' \\<turnstile> xs : [] _> ts_b", "obtain t where t_def:\"ts' = ts @ ts_b @ [t]\" \"\\<S>\\<bullet>\\<C>' \\<turnstile> [x] : ([] _> [t])\""], ["proof (prove)\nusing this:\n  ts'' = ts @ ts_b\n  length xs = length ts_b\n  \\<S>\\<bullet>\\<C>' \\<turnstile> xs : [] _> ts_b\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        \\<lbrakk>ts' = ts @ ts_b @ [t];\n         \\<S>\\<bullet>\\<C>' \\<turnstile> [x] : [] _> [t]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using e_type_const v_lists(2) ts''_def"], ["proof (prove)\nusing this:\n  ts'' = ts @ ts_b\n  length xs = length ts_b\n  \\<S>\\<bullet>\\<C>' \\<turnstile> xs : [] _> ts_b\n  \\<lbrakk>is_const ?e;\n   ?\\<S>\\<bullet>?\\<C> \\<turnstile> [?e] : ?ts _> ?ts'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>t.\n                       ?ts' = ?ts @ [t] \\<and>\n                       ?\\<S>\\<bullet>?\\<C>' \\<turnstile> [?e] : [] _> [t]\n  is_const x\n  \\<S>\\<bullet>\\<C> \\<turnstile> xs : ts _> ts''\n  \\<S>\\<bullet>\\<C> \\<turnstile> [x] : ts'' _> ts'\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        \\<lbrakk>ts' = ts @ ts_b @ [t];\n         \\<S>\\<bullet>\\<C>' \\<turnstile> [x] : [] _> [t]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  ts' = ts @ ts_b @ [t]\n  \\<S>\\<bullet>\\<C>' \\<turnstile> [x] : [] _> [t]\n\ngoal (1 subgoal):\n 1. \\<And>x xs ts ts'.\n       \\<lbrakk>\\<And>ts ts'.\n                   \\<lbrakk>const_list xs;\n                    \\<S>\\<bullet>\\<C> \\<turnstile> xs : ts _> ts'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>tvs.\n  ts' = ts @ tvs \\<and>\n  length xs = length tvs \\<and>\n  \\<S>\\<bullet>\\<C>' \\<turnstile> xs : [] _> tvs;\n        const_list (xs @ [x]);\n        \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tvs.\n                            ts' = ts @ tvs \\<and>\n                            length (xs @ [x]) = length tvs \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> xs @\n                      [x] : [] _> tvs", "moreover"], ["proof (state)\nthis:\n  ts' = ts @ ts_b @ [t]\n  \\<S>\\<bullet>\\<C>' \\<turnstile> [x] : [] _> [t]\n\ngoal (1 subgoal):\n 1. \\<And>x xs ts ts'.\n       \\<lbrakk>\\<And>ts ts'.\n                   \\<lbrakk>const_list xs;\n                    \\<S>\\<bullet>\\<C> \\<turnstile> xs : ts _> ts'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>tvs.\n  ts' = ts @ tvs \\<and>\n  length xs = length tvs \\<and>\n  \\<S>\\<bullet>\\<C>' \\<turnstile> xs : [] _> tvs;\n        const_list (xs @ [x]);\n        \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tvs.\n                            ts' = ts @ tvs \\<and>\n                            length (xs @ [x]) = length tvs \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> xs @\n                      [x] : [] _> tvs", "then"], ["proof (chain)\npicking this:\n  ts' = ts @ ts_b @ [t]\n  \\<S>\\<bullet>\\<C>' \\<turnstile> [x] : [] _> [t]", "have \"length (ts_b@[t]) = length (xs@[x])\""], ["proof (prove)\nusing this:\n  ts' = ts @ ts_b @ [t]\n  \\<S>\\<bullet>\\<C>' \\<turnstile> [x] : [] _> [t]\n\ngoal (1 subgoal):\n 1. length (ts_b @ [t]) = length (xs @ [x])", "using ts_b_def(2)"], ["proof (prove)\nusing this:\n  ts' = ts @ ts_b @ [t]\n  \\<S>\\<bullet>\\<C>' \\<turnstile> [x] : [] _> [t]\n  length xs = length ts_b\n\ngoal (1 subgoal):\n 1. length (ts_b @ [t]) = length (xs @ [x])", "by simp"], ["proof (state)\nthis:\n  length (ts_b @ [t]) = length (xs @ [x])\n\ngoal (1 subgoal):\n 1. \\<And>x xs ts ts'.\n       \\<lbrakk>\\<And>ts ts'.\n                   \\<lbrakk>const_list xs;\n                    \\<S>\\<bullet>\\<C> \\<turnstile> xs : ts _> ts'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>tvs.\n  ts' = ts @ tvs \\<and>\n  length xs = length tvs \\<and>\n  \\<S>\\<bullet>\\<C>' \\<turnstile> xs : [] _> tvs;\n        const_list (xs @ [x]);\n        \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tvs.\n                            ts' = ts @ tvs \\<and>\n                            length (xs @ [x]) = length tvs \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> xs @\n                      [x] : [] _> tvs", "moreover"], ["proof (state)\nthis:\n  length (ts_b @ [t]) = length (xs @ [x])\n\ngoal (1 subgoal):\n 1. \\<And>x xs ts ts'.\n       \\<lbrakk>\\<And>ts ts'.\n                   \\<lbrakk>const_list xs;\n                    \\<S>\\<bullet>\\<C> \\<turnstile> xs : ts _> ts'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>tvs.\n  ts' = ts @ tvs \\<and>\n  length xs = length tvs \\<and>\n  \\<S>\\<bullet>\\<C>' \\<turnstile> xs : [] _> tvs;\n        const_list (xs @ [x]);\n        \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tvs.\n                            ts' = ts @ tvs \\<and>\n                            length (xs @ [x]) = length tvs \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> xs @\n                      [x] : [] _> tvs", "have \"\\<S>\\<bullet>\\<C>' \\<turnstile> (xs@[x]) : ([] _> ts_b@[t])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C>' \\<turnstile> xs @ [x] : [] _> ts_b @ [t]", "using ts_b_def(3) t_def e_typing_s_typing.intros(2,3)"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C>' \\<turnstile> xs : [] _> ts_b\n  ts' = ts @ ts_b @ [t]\n  \\<S>\\<bullet>\\<C>' \\<turnstile> [x] : [] _> [t]\n  \\<lbrakk>?\\<S>\\<bullet>?\\<C> \\<turnstile> ?es : ?t1s _> ?t2s;\n   ?\\<S>\\<bullet>?\\<C> \\<turnstile> [?e] : ?t2s _> ?t3s\\<rbrakk>\n  \\<Longrightarrow> ?\\<S>\\<bullet>?\\<C> \\<turnstile> ?es @\n               [?e] : ?t1s _> ?t3s\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> ?es : ?t1s _> ?t2s \\<Longrightarrow>\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> ?es : ?ts @ ?t1s _> ?ts @ ?t2s\n\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C>' \\<turnstile> xs @ [x] : [] _> ts_b @ [t]", "by fastforce"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C>' \\<turnstile> xs @ [x] : [] _> ts_b @ [t]\n\ngoal (1 subgoal):\n 1. \\<And>x xs ts ts'.\n       \\<lbrakk>\\<And>ts ts'.\n                   \\<lbrakk>const_list xs;\n                    \\<S>\\<bullet>\\<C> \\<turnstile> xs : ts _> ts'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>tvs.\n  ts' = ts @ tvs \\<and>\n  length xs = length tvs \\<and>\n  \\<S>\\<bullet>\\<C>' \\<turnstile> xs : [] _> tvs;\n        const_list (xs @ [x]);\n        \\<S>\\<bullet>\\<C> \\<turnstile> xs @ [x] : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tvs.\n                            ts' = ts @ tvs \\<and>\n                            length (xs @ [x]) = length tvs \\<and>\n                            \\<S>\\<bullet>\\<C>' \\<turnstile> xs @\n                      [x] : [] _> tvs", "ultimately"], ["proof (chain)\npicking this:\n  ts' = ts @ ts_b @ [t]\n  \\<S>\\<bullet>\\<C>' \\<turnstile> [x] : [] _> [t]\n  length (ts_b @ [t]) = length (xs @ [x])\n  \\<S>\\<bullet>\\<C>' \\<turnstile> xs @ [x] : [] _> ts_b @ [t]", "show ?case"], ["proof (prove)\nusing this:\n  ts' = ts @ ts_b @ [t]\n  \\<S>\\<bullet>\\<C>' \\<turnstile> [x] : [] _> [t]\n  length (ts_b @ [t]) = length (xs @ [x])\n  \\<S>\\<bullet>\\<C>' \\<turnstile> xs @ [x] : [] _> ts_b @ [t]\n\ngoal (1 subgoal):\n 1. \\<exists>tvs.\n       ts' = ts @ tvs \\<and>\n       length (xs @ [x]) = length tvs \\<and>\n       \\<S>\\<bullet>\\<C>' \\<turnstile> xs @ [x] : [] _> tvs", "by simp"], ["proof (state)\nthis:\n  \\<exists>tvs.\n     ts' = ts @ tvs \\<and>\n     length (xs @ [x]) = length tvs \\<and>\n     \\<S>\\<bullet>\\<C>' \\<turnstile> xs @ [x] : [] _> tvs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma e_type_const_list_snoc:\n  assumes \"const_list vs\"\n          \"\\<S>\\<bullet>\\<C> \\<turnstile> vs : ([] _> ts@[t])\"\n  shows \"\\<exists>vs1 v2. (\\<S>\\<bullet>\\<C> \\<turnstile> vs1 : ([] _> ts))\n                   \\<and> (\\<S>\\<bullet>\\<C> \\<turnstile> [v2] : (ts _> ts@[t]))\n                   \\<and> (vs = vs1@[v2])\n                   \\<and> const_list vs1\n                   \\<and> is_const v2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>vs1 v2.\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> [v2] : ts _> ts @ [t] \\<and>\n       vs = vs1 @ [v2] \\<and> const_list vs1 \\<and> is_const v2", "using assms"], ["proof (prove)\nusing this:\n  const_list vs\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts @ [t]\n\ngoal (1 subgoal):\n 1. \\<exists>vs1 v2.\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> [v2] : ts _> ts @ [t] \\<and>\n       vs = vs1 @ [v2] \\<and> const_list vs1 \\<and> is_const v2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>const_list vs;\n     \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts @ [t]\\<rbrakk>\n    \\<Longrightarrow> \\<exists>vs1 v2.\n                         \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts \\<and>\n                         \\<S>\\<bullet>\\<C> \\<turnstile> [v2] : ts _> ts @\n                               [t] \\<and>\n                         vs = vs1 @ [v2] \\<and>\n                         const_list vs1 \\<and> is_const v2", "obtain vs' v where vs_def:\"vs = vs'@[v]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>vs' v. vs = vs' @ [v] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using e_type_const_list[OF assms(1,2)]"], ["proof (prove)\nusing this:\n  \\<exists>tvs.\n     ts @ [t] = [] @ tvs \\<and>\n     length vs = length tvs \\<and>\n     \\<S>\\<bullet>?\\<C>' \\<turnstile> vs : [] _> tvs\n\ngoal (1 subgoal):\n 1. (\\<And>vs' v. vs = vs' @ [v] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis append_Nil append_eq_append_conv list.size(3) snoc_eq_iff_butlast)"], ["proof (state)\nthis:\n  vs = vs' @ [v]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>const_list vs;\n     \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts @ [t]\\<rbrakk>\n    \\<Longrightarrow> \\<exists>vs1 v2.\n                         \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts \\<and>\n                         \\<S>\\<bullet>\\<C> \\<turnstile> [v2] : ts _> ts @\n                               [t] \\<and>\n                         vs = vs1 @ [v2] \\<and>\n                         const_list vs1 \\<and> is_const v2", "hence consts_def:\"const_list vs'\" \"is_const v\""], ["proof (prove)\nusing this:\n  vs = vs' @ [v]\n\ngoal (1 subgoal):\n 1. const_list vs' &&& is_const v", "using assms(1)"], ["proof (prove)\nusing this:\n  vs = vs' @ [v]\n  const_list vs\n\ngoal (1 subgoal):\n 1. const_list vs' &&& is_const v", "unfolding const_list_def"], ["proof (prove)\nusing this:\n  vs = vs' @ [v]\n  list_all is_const vs\n\ngoal (1 subgoal):\n 1. list_all is_const vs' &&& is_const v", "by auto"], ["proof (state)\nthis:\n  const_list vs'\n  is_const v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>const_list vs;\n     \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts @ [t]\\<rbrakk>\n    \\<Longrightarrow> \\<exists>vs1 v2.\n                         \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts \\<and>\n                         \\<S>\\<bullet>\\<C> \\<turnstile> [v2] : ts _> ts @\n                               [t] \\<and>\n                         vs = vs1 @ [v2] \\<and>\n                         const_list vs1 \\<and> is_const v2", "obtain ts' where ts'_def:\"\\<S>\\<bullet>\\<C> \\<turnstile> vs' : ([] _> ts')\" \"\\<S>\\<bullet>\\<C> \\<turnstile> [v] : (ts' _> ts@[t])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ts'.\n        \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> vs' : [] _> ts';\n         \\<S>\\<bullet>\\<C> \\<turnstile> [v] : ts' _> ts @ [t]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using vs_def assms(2) e_type_comp[of \\<S> \\<C> vs' v \"[]\" \"ts@[t]\"]"], ["proof (prove)\nusing this:\n  vs = vs' @ [v]\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts @ [t]\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs' @\n                                 [v] : [] _> ts @ [t] \\<Longrightarrow>\n  \\<exists>ts'.\n     \\<S>\\<bullet>\\<C> \\<turnstile> vs' : [] _> ts' \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> [v] : ts' _> ts @ [t]\n\ngoal (1 subgoal):\n 1. (\\<And>ts'.\n        \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> vs' : [] _> ts';\n         \\<S>\\<bullet>\\<C> \\<turnstile> [v] : ts' _> ts @ [t]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs' : [] _> ts'\n  \\<S>\\<bullet>\\<C> \\<turnstile> [v] : ts' _> ts @ [t]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>const_list vs;\n     \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts @ [t]\\<rbrakk>\n    \\<Longrightarrow> \\<exists>vs1 v2.\n                         \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts \\<and>\n                         \\<S>\\<bullet>\\<C> \\<turnstile> [v2] : ts _> ts @\n                               [t] \\<and>\n                         vs = vs1 @ [v2] \\<and>\n                         const_list vs1 \\<and> is_const v2", "obtain c where \"v = $C c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c. v = $C c \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using e_type_const_unwrap consts_def(2)"], ["proof (prove)\nusing this:\n  is_const ?e \\<Longrightarrow> \\<exists>v. ?e = $C v\n  is_const v\n\ngoal (1 subgoal):\n 1. (\\<And>c. v = $C c \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by fastforce"], ["proof (state)\nthis:\n  v = $C c\n\ngoal (1 subgoal):\n 1. \\<lbrakk>const_list vs;\n     \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts @ [t]\\<rbrakk>\n    \\<Longrightarrow> \\<exists>vs1 v2.\n                         \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts \\<and>\n                         \\<S>\\<bullet>\\<C> \\<turnstile> [v2] : ts _> ts @\n                               [t] \\<and>\n                         vs = vs1 @ [v2] \\<and>\n                         const_list vs1 \\<and> is_const v2", "hence \"ts' = ts\""], ["proof (prove)\nusing this:\n  v = $C c\n\ngoal (1 subgoal):\n 1. ts' = ts", "using ts'_def(2) unlift_b_e[of \\<S> \\<C> \"[C c]\"] b_e_type_value"], ["proof (prove)\nusing this:\n  v = $C c\n  \\<S>\\<bullet>\\<C> \\<turnstile> [v] : ts' _> ts @ [t]\n  \\<S>\\<bullet>\\<C> \\<turnstile> $* [C c] : ?tf \\<Longrightarrow>\n  \\<C> \\<turnstile> [C c] : ?tf\n  \\<lbrakk>?\\<C> \\<turnstile> [?e] : ?ts _> ?ts'; ?e = C ?v\\<rbrakk>\n  \\<Longrightarrow> ?ts' = ?ts @ [typeof ?v]\n\ngoal (1 subgoal):\n 1. ts' = ts", "by fastforce"], ["proof (state)\nthis:\n  ts' = ts\n\ngoal (1 subgoal):\n 1. \\<lbrakk>const_list vs;\n     \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts @ [t]\\<rbrakk>\n    \\<Longrightarrow> \\<exists>vs1 v2.\n                         \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts \\<and>\n                         \\<S>\\<bullet>\\<C> \\<turnstile> [v2] : ts _> ts @\n                               [t] \\<and>\n                         vs = vs1 @ [v2] \\<and>\n                         const_list vs1 \\<and> is_const v2", "thus ?thesis"], ["proof (prove)\nusing this:\n  ts' = ts\n\ngoal (1 subgoal):\n 1. \\<exists>vs1 v2.\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> [v2] : ts _> ts @ [t] \\<and>\n       vs = vs1 @ [v2] \\<and> const_list vs1 \\<and> is_const v2", "using ts'_def vs_def consts_def"], ["proof (prove)\nusing this:\n  ts' = ts\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs' : [] _> ts'\n  \\<S>\\<bullet>\\<C> \\<turnstile> [v] : ts' _> ts @ [t]\n  vs = vs' @ [v]\n  const_list vs'\n  is_const v\n\ngoal (1 subgoal):\n 1. \\<exists>vs1 v2.\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> [v2] : ts _> ts @ [t] \\<and>\n       vs = vs1 @ [v2] \\<and> const_list vs1 \\<and> is_const v2", "by simp"], ["proof (state)\nthis:\n  \\<exists>vs1 v2.\n     \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> [v2] : ts _> ts @ [t] \\<and>\n     vs = vs1 @ [v2] \\<and> const_list vs1 \\<and> is_const v2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma e_type_const_list_cons:\n  assumes \"const_list vs\"\n          \"\\<S>\\<bullet>\\<C> \\<turnstile> vs : ([] _> (ts1@ts2))\"\n  shows \"\\<exists>vs1 vs2. (\\<S>\\<bullet>\\<C> \\<turnstile> vs1 : ([] _> ts1))\n                   \\<and> (\\<S>\\<bullet>\\<C> \\<turnstile> vs2 : (ts1 _> (ts1@ts2)))\n                   \\<and> vs = vs1@vs2\n                   \\<and> const_list vs1\n                   \\<and> const_list vs2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>vs1 vs2.\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n       vs = vs1 @ vs2 \\<and> const_list vs1 \\<and> const_list vs2", "using assms"], ["proof (prove)\nusing this:\n  const_list vs\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts1 @ ts2\n\ngoal (1 subgoal):\n 1. \\<exists>vs1 vs2.\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n       vs = vs1 @ vs2 \\<and> const_list vs1 \\<and> const_list vs2", "proof (induction \"ts1@ts2\" arbitrary: vs ts1 ts2 rule: List.rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ts1 ts2 vs.\n       \\<lbrakk>[] = ts1 @ ts2; const_list vs;\n        \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts1 @ ts2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>vs1 vs2.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @\n                                  ts2 \\<and>\n                            vs = vs1 @ vs2 \\<and>\n                            const_list vs1 \\<and> const_list vs2\n 2. \\<And>x xs ts1 ts2 vs.\n       \\<lbrakk>\\<And>ts1 ts2 vs.\n                   \\<lbrakk>xs = ts1 @ ts2; const_list vs;\n                    \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts1 @\n                        ts2\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>vs1 vs2.\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n  vs = vs1 @ vs2 \\<and> const_list vs1 \\<and> const_list vs2;\n        xs @ [x] = ts1 @ ts2; const_list vs;\n        \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts1 @ ts2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>vs1 vs2.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @\n                                  ts2 \\<and>\n                            vs = vs1 @ vs2 \\<and>\n                            const_list vs1 \\<and> const_list vs2", "case Nil"], ["proof (state)\nthis:\n  [] = ts1 @ ts2\n  const_list vs\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts1 @ ts2\n\ngoal (2 subgoals):\n 1. \\<And>ts1 ts2 vs.\n       \\<lbrakk>[] = ts1 @ ts2; const_list vs;\n        \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts1 @ ts2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>vs1 vs2.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @\n                                  ts2 \\<and>\n                            vs = vs1 @ vs2 \\<and>\n                            const_list vs1 \\<and> const_list vs2\n 2. \\<And>x xs ts1 ts2 vs.\n       \\<lbrakk>\\<And>ts1 ts2 vs.\n                   \\<lbrakk>xs = ts1 @ ts2; const_list vs;\n                    \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts1 @\n                        ts2\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>vs1 vs2.\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n  vs = vs1 @ vs2 \\<and> const_list vs1 \\<and> const_list vs2;\n        xs @ [x] = ts1 @ ts2; const_list vs;\n        \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts1 @ ts2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>vs1 vs2.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @\n                                  ts2 \\<and>\n                            vs = vs1 @ vs2 \\<and>\n                            const_list vs1 \\<and> const_list vs2", "thus ?case"], ["proof (prove)\nusing this:\n  [] = ts1 @ ts2\n  const_list vs\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts1 @ ts2\n\ngoal (1 subgoal):\n 1. \\<exists>vs1 vs2.\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n       vs = vs1 @ vs2 \\<and> const_list vs1 \\<and> const_list vs2", "using e_type_const_list"], ["proof (prove)\nusing this:\n  [] = ts1 @ ts2\n  const_list vs\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts1 @ ts2\n  \\<lbrakk>const_list ?vs;\n   ?\\<S>\\<bullet>?\\<C> \\<turnstile> ?vs : ?ts _> ?ts'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>tvs.\n                       ?ts' = ?ts @ tvs \\<and>\n                       length ?vs = length tvs \\<and>\n                       ?\\<S>\\<bullet>?\\<C>' \\<turnstile> ?vs : [] _> tvs\n\ngoal (1 subgoal):\n 1. \\<exists>vs1 vs2.\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n       vs = vs1 @ vs2 \\<and> const_list vs1 \\<and> const_list vs2", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>vs1 vs2.\n     \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n     vs = vs1 @ vs2 \\<and> const_list vs1 \\<and> const_list vs2\n\ngoal (1 subgoal):\n 1. \\<And>x xs ts1 ts2 vs.\n       \\<lbrakk>\\<And>ts1 ts2 vs.\n                   \\<lbrakk>xs = ts1 @ ts2; const_list vs;\n                    \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts1 @\n                        ts2\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>vs1 vs2.\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n  vs = vs1 @ vs2 \\<and> const_list vs1 \\<and> const_list vs2;\n        xs @ [x] = ts1 @ ts2; const_list vs;\n        \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts1 @ ts2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>vs1 vs2.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @\n                                  ts2 \\<and>\n                            vs = vs1 @ vs2 \\<and>\n                            const_list vs1 \\<and> const_list vs2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs ts1 ts2 vs.\n       \\<lbrakk>\\<And>ts1 ts2 vs.\n                   \\<lbrakk>xs = ts1 @ ts2; const_list vs;\n                    \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts1 @\n                        ts2\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>vs1 vs2.\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n  vs = vs1 @ vs2 \\<and> const_list vs1 \\<and> const_list vs2;\n        xs @ [x] = ts1 @ ts2; const_list vs;\n        \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts1 @ ts2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>vs1 vs2.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @\n                                  ts2 \\<and>\n                            vs = vs1 @ vs2 \\<and>\n                            const_list vs1 \\<and> const_list vs2", "case (snoc t ts)"], ["proof (state)\nthis:\n  \\<lbrakk>ts = ?ts1.0 @ ?ts2.0; const_list ?vs;\n   \\<S>\\<bullet>\\<C> \\<turnstile> ?vs : [] _> ?ts1.0 @ ?ts2.0\\<rbrakk>\n  \\<Longrightarrow> \\<exists>vs1 vs2.\n                       \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ?ts1.0 \\<and>\n                       \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ?ts1.0 _> ?ts1.0 @\n                                ?ts2.0 \\<and>\n                       ?vs = vs1 @ vs2 \\<and>\n                       const_list vs1 \\<and> const_list vs2\n  ts @ [t] = ts1 @ ts2\n  const_list vs\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts1 @ ts2\n\ngoal (1 subgoal):\n 1. \\<And>x xs ts1 ts2 vs.\n       \\<lbrakk>\\<And>ts1 ts2 vs.\n                   \\<lbrakk>xs = ts1 @ ts2; const_list vs;\n                    \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts1 @\n                        ts2\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>vs1 vs2.\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n  vs = vs1 @ vs2 \\<and> const_list vs1 \\<and> const_list vs2;\n        xs @ [x] = ts1 @ ts2; const_list vs;\n        \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts1 @ ts2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>vs1 vs2.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @\n                                  ts2 \\<and>\n                            vs = vs1 @ vs2 \\<and>\n                            const_list vs1 \\<and> const_list vs2", "note snoc_outer = snoc"], ["proof (state)\nthis:\n  \\<lbrakk>ts = ?ts1.0 @ ?ts2.0; const_list ?vs;\n   \\<S>\\<bullet>\\<C> \\<turnstile> ?vs : [] _> ?ts1.0 @ ?ts2.0\\<rbrakk>\n  \\<Longrightarrow> \\<exists>vs1 vs2.\n                       \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ?ts1.0 \\<and>\n                       \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ?ts1.0 _> ?ts1.0 @\n                                ?ts2.0 \\<and>\n                       ?vs = vs1 @ vs2 \\<and>\n                       const_list vs1 \\<and> const_list vs2\n  ts @ [t] = ts1 @ ts2\n  const_list vs\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts1 @ ts2\n\ngoal (1 subgoal):\n 1. \\<And>x xs ts1 ts2 vs.\n       \\<lbrakk>\\<And>ts1 ts2 vs.\n                   \\<lbrakk>xs = ts1 @ ts2; const_list vs;\n                    \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts1 @\n                        ts2\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>vs1 vs2.\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n  vs = vs1 @ vs2 \\<and> const_list vs1 \\<and> const_list vs2;\n        xs @ [x] = ts1 @ ts2; const_list vs;\n        \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts1 @ ts2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>vs1 vs2.\n                            \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n                            \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @\n                                  ts2 \\<and>\n                            vs = vs1 @ vs2 \\<and>\n                            const_list vs1 \\<and> const_list vs2", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>vs1 vs2.\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n       vs = vs1 @ vs2 \\<and> const_list vs1 \\<and> const_list vs2", "proof (cases ts2 rule: List.rev_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ts2 = [] \\<Longrightarrow>\n    \\<exists>vs1 vs2.\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n       vs = vs1 @ vs2 \\<and> const_list vs1 \\<and> const_list vs2\n 2. \\<And>ys y.\n       ts2 = ys @ [y] \\<Longrightarrow>\n       \\<exists>vs1 vs2.\n          \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n          \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n          vs = vs1 @ vs2 \\<and> const_list vs1 \\<and> const_list vs2", "case Nil"], ["proof (state)\nthis:\n  ts2 = []\n\ngoal (2 subgoals):\n 1. ts2 = [] \\<Longrightarrow>\n    \\<exists>vs1 vs2.\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n       vs = vs1 @ vs2 \\<and> const_list vs1 \\<and> const_list vs2\n 2. \\<And>ys y.\n       ts2 = ys @ [y] \\<Longrightarrow>\n       \\<exists>vs1 vs2.\n          \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n          \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n          vs = vs1 @ vs2 \\<and> const_list vs1 \\<and> const_list vs2", "have \"\\<S>\\<bullet>\\<C> \\<turnstile> [] : (ts1 _> ts1 @ [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C> \\<turnstile> [] : ts1 _> ts1 @ []", "using b_e_typing.empty b_e_typing.weakening e_typing_s_typing.intros(1)"], ["proof (prove)\nusing this:\n  ?\\<C> \\<turnstile> [] : [] _> []\n  ?\\<C> \\<turnstile> ?es : ?t1s _> ?t2s \\<Longrightarrow>\n  ?\\<C> \\<turnstile> ?es : ?ts @ ?t1s _> ?ts @ ?t2s\n  ?\\<C> \\<turnstile> ?b_es : ?tf \\<Longrightarrow>\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> $* ?b_es : ?tf\n\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C> \\<turnstile> [] : ts1 _> ts1 @ []", "by fastforce"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> [] : ts1 _> ts1 @ []\n\ngoal (2 subgoals):\n 1. ts2 = [] \\<Longrightarrow>\n    \\<exists>vs1 vs2.\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n       vs = vs1 @ vs2 \\<and> const_list vs1 \\<and> const_list vs2\n 2. \\<And>ys y.\n       ts2 = ys @ [y] \\<Longrightarrow>\n       \\<exists>vs1 vs2.\n          \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n          \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n          vs = vs1 @ vs2 \\<and> const_list vs1 \\<and> const_list vs2", "then"], ["proof (chain)\npicking this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> [] : ts1 _> ts1 @ []", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> [] : ts1 _> ts1 @ []\n\ngoal (1 subgoal):\n 1. \\<exists>vs1 vs2.\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n       vs = vs1 @ vs2 \\<and> const_list vs1 \\<and> const_list vs2", "using snoc(3,4) Nil"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> [] : ts1 _> ts1 @ []\n  const_list vs\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts1 @ ts2\n  ts2 = []\n\ngoal (1 subgoal):\n 1. \\<exists>vs1 vs2.\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n       vs = vs1 @ vs2 \\<and> const_list vs1 \\<and> const_list vs2", "unfolding const_list_def"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> [] : ts1 _> ts1 @ []\n  list_all is_const vs\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts1 @ ts2\n  ts2 = []\n\ngoal (1 subgoal):\n 1. \\<exists>vs1 vs2.\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n       vs = vs1 @ vs2 \\<and>\n       list_all is_const vs1 \\<and> list_all is_const vs2", "by auto"], ["proof (state)\nthis:\n  \\<exists>vs1 vs2.\n     \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n     vs = vs1 @ vs2 \\<and> const_list vs1 \\<and> const_list vs2\n\ngoal (1 subgoal):\n 1. \\<And>ys y.\n       ts2 = ys @ [y] \\<Longrightarrow>\n       \\<exists>vs1 vs2.\n          \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n          \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n          vs = vs1 @ vs2 \\<and> const_list vs1 \\<and> const_list vs2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ys y.\n       ts2 = ys @ [y] \\<Longrightarrow>\n       \\<exists>vs1 vs2.\n          \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n          \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n          vs = vs1 @ vs2 \\<and> const_list vs1 \\<and> const_list vs2", "case (snoc ts2' a)"], ["proof (state)\nthis:\n  ts2 = ts2' @ [a]\n\ngoal (1 subgoal):\n 1. \\<And>ys y.\n       ts2 = ys @ [y] \\<Longrightarrow>\n       \\<exists>vs1 vs2.\n          \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n          \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n          vs = vs1 @ vs2 \\<and> const_list vs1 \\<and> const_list vs2", "obtain vs1 v2 where vs1_def:\"(\\<S>\\<bullet>\\<C> \\<turnstile> vs1 : ([] _> ts1 @ ts2'))\"\n                                \"(\\<S>\\<bullet>\\<C> \\<turnstile> [v2] : (ts1 @ ts2' _> ts1 @ ts2' @[t]))\"\n                                \"(vs = vs1@[v2])\"\n                                \"const_list vs1\"\n                                \"is_const v2\"\n                                \"ts = ts1 @ ts2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>vs1 v2.\n        \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 @ ts2';\n         \\<S>\\<bullet>\\<C> \\<turnstile> [v2] : ts1 @\n         ts2' _> ts1 @ ts2' @ [t];\n         vs = vs1 @ [v2]; const_list vs1; is_const v2;\n         ts = ts1 @ ts2'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using e_type_const_list_snoc[OF snoc_outer(3), of \\<S> \\<C> \"ts1@ts2'\" t]\n            snoc_outer(2,4) snoc"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> (ts1 @ ts2') @\n      [t] \\<Longrightarrow>\n  \\<exists>vs1 v2.\n     \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 @ ts2' \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> [v2] : ts1 @\n     ts2' _> (ts1 @ ts2') @ [t] \\<and>\n     vs = vs1 @ [v2] \\<and> const_list vs1 \\<and> is_const v2\n  ts @ [t] = ts1 @ ts2\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs : [] _> ts1 @ ts2\n  ts2 = ts2' @ [a]\n\ngoal (1 subgoal):\n 1. (\\<And>vs1 v2.\n        \\<lbrakk>\\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 @ ts2';\n         \\<S>\\<bullet>\\<C> \\<turnstile> [v2] : ts1 @\n         ts2' _> ts1 @ ts2' @ [t];\n         vs = vs1 @ [v2]; const_list vs1; is_const v2;\n         ts = ts1 @ ts2'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 @ ts2'\n  \\<S>\\<bullet>\\<C> \\<turnstile> [v2] : ts1 @ ts2' _> ts1 @ ts2' @ [t]\n  vs = vs1 @ [v2]\n  const_list vs1\n  is_const v2\n  ts = ts1 @ ts2'\n\ngoal (1 subgoal):\n 1. \\<And>ys y.\n       ts2 = ys @ [y] \\<Longrightarrow>\n       \\<exists>vs1 vs2.\n          \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n          \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n          vs = vs1 @ vs2 \\<and> const_list vs1 \\<and> const_list vs2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>vs1 vs2.\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n       vs = vs1 @ vs2 \\<and> const_list vs1 \\<and> const_list vs2", "using snoc_outer(1)[OF vs1_def(6,4,1)] snoc_outer(2) vs1_def(3,5)\n            e_typing_s_typing.intros(2)[OF _ vs1_def(2), of _ ts1]\n            snoc"], ["proof (prove)\nusing this:\n  \\<exists>vs1a vs2.\n     \\<S>\\<bullet>\\<C> \\<turnstile> vs1a : [] _> ts1 \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2' \\<and>\n     vs1 = vs1a @ vs2 \\<and> const_list vs1a \\<and> const_list vs2\n  ts @ [t] = ts1 @ ts2\n  vs = vs1 @ [v2]\n  is_const v2\n  \\<S>\\<bullet>\\<C> \\<turnstile> ?es : ts1 _> ts1 @ ts2' \\<Longrightarrow>\n  \\<S>\\<bullet>\\<C> \\<turnstile> ?es @ [v2] : ts1 _> ts1 @ ts2' @ [t]\n  ts2 = ts2' @ [a]\n\ngoal (1 subgoal):\n 1. \\<exists>vs1 vs2.\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n       vs = vs1 @ vs2 \\<and> const_list vs1 \\<and> const_list vs2", "unfolding const_list_def"], ["proof (prove)\nusing this:\n  \\<exists>vs1a vs2.\n     \\<S>\\<bullet>\\<C> \\<turnstile> vs1a : [] _> ts1 \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2' \\<and>\n     vs1 = vs1a @ vs2 \\<and>\n     list_all is_const vs1a \\<and> list_all is_const vs2\n  ts @ [t] = ts1 @ ts2\n  vs = vs1 @ [v2]\n  is_const v2\n  \\<S>\\<bullet>\\<C> \\<turnstile> ?es : ts1 _> ts1 @ ts2' \\<Longrightarrow>\n  \\<S>\\<bullet>\\<C> \\<turnstile> ?es @ [v2] : ts1 _> ts1 @ ts2' @ [t]\n  ts2 = ts2' @ [a]\n\ngoal (1 subgoal):\n 1. \\<exists>vs1 vs2.\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n       \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n       vs = vs1 @ vs2 \\<and>\n       list_all is_const vs1 \\<and> list_all is_const vs2", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>vs1 vs2.\n     \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n     vs = vs1 @ vs2 \\<and> const_list vs1 \\<and> const_list vs2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>vs1 vs2.\n     \\<S>\\<bullet>\\<C> \\<turnstile> vs1 : [] _> ts1 \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> vs2 : ts1 _> ts1 @ ts2 \\<and>\n     vs = vs1 @ vs2 \\<and> const_list vs1 \\<and> const_list vs2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma e_type_const_conv_vs:\n  assumes \"const_list ves\"\n  shows \"\\<exists>vs. ves = $$* vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>vs. ves = $$* vs", "using assms"], ["proof (prove)\nusing this:\n  const_list ves\n\ngoal (1 subgoal):\n 1. \\<exists>vs. ves = $$* vs", "proof (induction ves)"], ["proof (state)\ngoal (2 subgoals):\n 1. const_list [] \\<Longrightarrow> \\<exists>vs. [] = $$* vs\n 2. \\<And>a ves.\n       \\<lbrakk>const_list ves \\<Longrightarrow> \\<exists>vs. ves = $$* vs;\n        const_list (a # ves)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>vs. a # ves = $$* vs", "case Nil"], ["proof (state)\nthis:\n  const_list []\n\ngoal (2 subgoals):\n 1. const_list [] \\<Longrightarrow> \\<exists>vs. [] = $$* vs\n 2. \\<And>a ves.\n       \\<lbrakk>const_list ves \\<Longrightarrow> \\<exists>vs. ves = $$* vs;\n        const_list (a # ves)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>vs. a # ves = $$* vs", "thus ?case"], ["proof (prove)\nusing this:\n  const_list []\n\ngoal (1 subgoal):\n 1. \\<exists>vs. [] = $$* vs", "by simp"], ["proof (state)\nthis:\n  \\<exists>vs. [] = $$* vs\n\ngoal (1 subgoal):\n 1. \\<And>a ves.\n       \\<lbrakk>const_list ves \\<Longrightarrow> \\<exists>vs. ves = $$* vs;\n        const_list (a # ves)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>vs. a # ves = $$* vs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ves.\n       \\<lbrakk>const_list ves \\<Longrightarrow> \\<exists>vs. ves = $$* vs;\n        const_list (a # ves)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>vs. a # ves = $$* vs", "case (Cons a ves)"], ["proof (state)\nthis:\n  const_list ves \\<Longrightarrow> \\<exists>vs. ves = $$* vs\n  const_list (a # ves)\n\ngoal (1 subgoal):\n 1. \\<And>a ves.\n       \\<lbrakk>const_list ves \\<Longrightarrow> \\<exists>vs. ves = $$* vs;\n        const_list (a # ves)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>vs. a # ves = $$* vs", "thus ?case"], ["proof (prove)\nusing this:\n  const_list ves \\<Longrightarrow> \\<exists>vs. ves = $$* vs\n  const_list (a # ves)\n\ngoal (1 subgoal):\n 1. \\<exists>vs. a # ves = $$* vs", "using e_type_const_unwrap"], ["proof (prove)\nusing this:\n  const_list ves \\<Longrightarrow> \\<exists>vs. ves = $$* vs\n  const_list (a # ves)\n  is_const ?e \\<Longrightarrow> \\<exists>v. ?e = $C v\n\ngoal (1 subgoal):\n 1. \\<exists>vs. a # ves = $$* vs", "unfolding const_list_def"], ["proof (prove)\nusing this:\n  list_all is_const ves \\<Longrightarrow> \\<exists>vs. ves = $$* vs\n  list_all is_const (a # ves)\n  is_const ?e \\<Longrightarrow> \\<exists>v. ?e = $C v\n\ngoal (1 subgoal):\n 1. \\<exists>vs. a # ves = $$* vs", "by (metis (no_types, lifting) list.pred_inject(2) list.simps(9))"], ["proof (state)\nthis:\n  \\<exists>vs. a # ves = $$* vs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma types_exist_lfilled:\n  assumes \"Lfilled k lholed es lfilled\"\n          \"\\<S>\\<bullet>\\<C> \\<turnstile> lfilled : (ts _> ts')\"\n  shows \"\\<exists>t1s t2s \\<C>' arb_label. (\\<S>\\<bullet>\\<C>\\<lparr>label := arb_label@(label \\<C>)\\<rparr> \\<turnstile> es : (t1s _> t2s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t1s t2s \\<C>' arb_label. \\<S>\\<bullet>\\<C>\n       \\<lparr>label :=\n                 arb_label @ label \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s", "using assms"], ["proof (prove)\nusing this:\n  Lfilled k lholed es lfilled\n  \\<S>\\<bullet>\\<C> \\<turnstile> lfilled : ts _> ts'\n\ngoal (1 subgoal):\n 1. \\<exists>t1s t2s \\<C>' arb_label. \\<S>\\<bullet>\\<C>\n       \\<lparr>label :=\n                 arb_label @ label \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s", "proof (induction arbitrary: \\<C> ts ts' rule: Lfilled.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>vs lholed es' es \\<C> ts ts'.\n       \\<lbrakk>const_list vs; lholed = LBase vs es';\n        \\<S>\\<bullet>\\<C> \\<turnstile> vs @ es @ es' : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s \\<C>' arb_label. \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\narb_label @ label \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s\n 2. \\<And>vs lholed n es' l es'' k es lfilledk \\<C> ts ts'.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        \\<And>\\<C> ts ts'.\n           \\<S>\\<bullet>\\<C> \\<turnstile> lfilledk : ts _> ts' \\<Longrightarrow>\n           \\<exists>t1s t2s \\<C>' arb_label. \\<S>\\<bullet>\\<C>\n              \\<lparr>label :=\n                        arb_label @\n                        label \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> vs @\n [Label n es' lfilledk] @ es'' : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s \\<C>' arb_label. \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\narb_label @ label \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s", "case (L0 vs lholed es' es)"], ["proof (state)\nthis:\n  const_list vs\n  lholed = LBase vs es'\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs @ es @ es' : ts _> ts'\n\ngoal (2 subgoals):\n 1. \\<And>vs lholed es' es \\<C> ts ts'.\n       \\<lbrakk>const_list vs; lholed = LBase vs es';\n        \\<S>\\<bullet>\\<C> \\<turnstile> vs @ es @ es' : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s \\<C>' arb_label. \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\narb_label @ label \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s\n 2. \\<And>vs lholed n es' l es'' k es lfilledk \\<C> ts ts'.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        \\<And>\\<C> ts ts'.\n           \\<S>\\<bullet>\\<C> \\<turnstile> lfilledk : ts _> ts' \\<Longrightarrow>\n           \\<exists>t1s t2s \\<C>' arb_label. \\<S>\\<bullet>\\<C>\n              \\<lparr>label :=\n                        arb_label @\n                        label \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> vs @\n [Label n es' lfilledk] @ es'' : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s \\<C>' arb_label. \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\narb_label @ label \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s", "hence \"\\<S>\\<bullet>(\\<C>\\<lparr>label := label \\<C>\\<rparr>) \\<turnstile> vs @ es @ es' : (ts _> ts')\""], ["proof (prove)\nusing this:\n  const_list vs\n  lholed = LBase vs es'\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs @ es @ es' : ts _> ts'\n\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C>\n    \\<lparr>label :=\n              label \\<C>\\<rparr> \\<turnstile> vs @ es @ es' : ts _> ts'", "by simp"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C>\n  \\<lparr>label := label \\<C>\\<rparr> \\<turnstile> vs @ es @ es' : ts _> ts'\n\ngoal (2 subgoals):\n 1. \\<And>vs lholed es' es \\<C> ts ts'.\n       \\<lbrakk>const_list vs; lholed = LBase vs es';\n        \\<S>\\<bullet>\\<C> \\<turnstile> vs @ es @ es' : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s \\<C>' arb_label. \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\narb_label @ label \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s\n 2. \\<And>vs lholed n es' l es'' k es lfilledk \\<C> ts ts'.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        \\<And>\\<C> ts ts'.\n           \\<S>\\<bullet>\\<C> \\<turnstile> lfilledk : ts _> ts' \\<Longrightarrow>\n           \\<exists>t1s t2s \\<C>' arb_label. \\<S>\\<bullet>\\<C>\n              \\<lparr>label :=\n                        arb_label @\n                        label \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> vs @\n [Label n es' lfilledk] @ es'' : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s \\<C>' arb_label. \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\narb_label @ label \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s", "thus ?case"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C>\n  \\<lparr>label := label \\<C>\\<rparr> \\<turnstile> vs @ es @ es' : ts _> ts'\n\ngoal (1 subgoal):\n 1. \\<exists>t1s t2s \\<C>'' arb_label. \\<S>\\<bullet>\\<C>\n       \\<lparr>label :=\n                 arb_label @ label \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s", "using e_type_comp_conc2"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C>\n  \\<lparr>label := label \\<C>\\<rparr> \\<turnstile> vs @ es @ es' : ts _> ts'\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> ?es @\n                                   ?es' @\n                                   ?es'' : ?t1s _> ?t2s \\<Longrightarrow>\n  \\<exists>ts' ts''.\n     ?\\<S>\\<bullet>?\\<C> \\<turnstile> ?es : ?t1s _> ts' \\<and>\n     ?\\<S>\\<bullet>?\\<C> \\<turnstile> ?es' : ts' _> ts'' \\<and>\n     ?\\<S>\\<bullet>?\\<C> \\<turnstile> ?es'' : ts'' _> ?t2s\n\ngoal (1 subgoal):\n 1. \\<exists>t1s t2s \\<C>'' arb_label. \\<S>\\<bullet>\\<C>\n       \\<lparr>label :=\n                 arb_label @ label \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s", "by (metis append_Nil)"], ["proof (state)\nthis:\n  \\<exists>t1s t2s \\<C>'' arb_label. \\<S>\\<bullet>\\<C>\n     \\<lparr>label :=\n               arb_label @ label \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s\n\ngoal (1 subgoal):\n 1. \\<And>vs lholed n es' l es'' k es lfilledk \\<C> ts ts'.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        \\<And>\\<C> ts ts'.\n           \\<S>\\<bullet>\\<C> \\<turnstile> lfilledk : ts _> ts' \\<Longrightarrow>\n           \\<exists>t1s t2s \\<C>' arb_label. \\<S>\\<bullet>\\<C>\n              \\<lparr>label :=\n                        arb_label @\n                        label \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> vs @\n [Label n es' lfilledk] @ es'' : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s \\<C>' arb_label. \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\narb_label @ label \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>vs lholed n es' l es'' k es lfilledk \\<C> ts ts'.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        \\<And>\\<C> ts ts'.\n           \\<S>\\<bullet>\\<C> \\<turnstile> lfilledk : ts _> ts' \\<Longrightarrow>\n           \\<exists>t1s t2s \\<C>' arb_label. \\<S>\\<bullet>\\<C>\n              \\<lparr>label :=\n                        arb_label @\n                        label \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> vs @\n [Label n es' lfilledk] @ es'' : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s \\<C>' arb_label. \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\narb_label @ label \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s", "case (LN vs lholed n es' l es'' k es lfilledk)"], ["proof (state)\nthis:\n  const_list vs\n  lholed = LRec vs n es' l es''\n  Lfilled k l es lfilledk\n  \\<S>\\<bullet>?\\<C> \\<turnstile> lfilledk : ?ts _> ?ts' \\<Longrightarrow>\n  \\<exists>t1s t2s \\<C>' arb_label. \\<S>\\<bullet>?\\<C>\n     \\<lparr>label :=\n               arb_label @ label ?\\<C>\\<rparr> \\<turnstile> es : t1s _> t2s\n  \\<S>\\<bullet>\\<C> \\<turnstile> vs @\n                                 [Label n es' lfilledk] @ es'' : ts _> ts'\n\ngoal (1 subgoal):\n 1. \\<And>vs lholed n es' l es'' k es lfilledk \\<C> ts ts'.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        \\<And>\\<C> ts ts'.\n           \\<S>\\<bullet>\\<C> \\<turnstile> lfilledk : ts _> ts' \\<Longrightarrow>\n           \\<exists>t1s t2s \\<C>' arb_label. \\<S>\\<bullet>\\<C>\n              \\<lparr>label :=\n                        arb_label @\n                        label \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> vs @\n [Label n es' lfilledk] @ es'' : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s \\<C>' arb_label. \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\narb_label @ label \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s", "obtain ts'' ts''' where \"\\<S>\\<bullet>\\<C> \\<turnstile> [Label n es' lfilledk]  : (ts'' _> ts''')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ts'' ts'''.\n        \\<S>\\<bullet>\\<C> \\<turnstile> [Label n es'\n   lfilledk] : ts'' _> ts''' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using e_type_comp_conc2[OF LN(5)]"], ["proof (prove)\nusing this:\n  \\<exists>ts' ts''.\n     \\<S>\\<bullet>\\<C> \\<turnstile> vs : ts _> ts' \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> [Label n es'\nlfilledk] : ts' _> ts'' \\<and>\n     \\<S>\\<bullet>\\<C> \\<turnstile> es'' : ts'' _> ts'\n\ngoal (1 subgoal):\n 1. (\\<And>ts'' ts'''.\n        \\<S>\\<bullet>\\<C> \\<turnstile> [Label n es'\n   lfilledk] : ts'' _> ts''' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> [Label n es' lfilledk] : ts'' _> ts'''\n\ngoal (1 subgoal):\n 1. \\<And>vs lholed n es' l es'' k es lfilledk \\<C> ts ts'.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        \\<And>\\<C> ts ts'.\n           \\<S>\\<bullet>\\<C> \\<turnstile> lfilledk : ts _> ts' \\<Longrightarrow>\n           \\<exists>t1s t2s \\<C>' arb_label. \\<S>\\<bullet>\\<C>\n              \\<lparr>label :=\n                        arb_label @\n                        label \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> vs @\n [Label n es' lfilledk] @ es'' : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s \\<C>' arb_label. \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\narb_label @ label \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s", "then"], ["proof (chain)\npicking this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> [Label n es' lfilledk] : ts'' _> ts'''", "obtain t1s t2s ts where test:\"\\<S>\\<bullet>\\<C>\\<lparr>label := [ts] @ (label \\<C>)\\<rparr> \\<turnstile> lfilledk  : (t1s _> t2s)\""], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> [Label n es' lfilledk] : ts'' _> ts'''\n\ngoal (1 subgoal):\n 1. (\\<And>ts t1s t2s.\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @\n                  label\n                   \\<C>\\<rparr> \\<turnstile> lfilledk : t1s _> t2s \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using e_type_label"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> [Label n es' lfilledk] : ts'' _> ts'''\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> [Label ?n ?es0.0\n                                     ?es] : ?ts _> ?ts' \\<Longrightarrow>\n  \\<exists>tls t2s.\n     ?ts' = ?ts @ t2s \\<and>\n     length tls = ?n \\<and>\n     ?\\<S>\\<bullet>?\\<C> \\<turnstile> ?es0.0 : tls _> t2s \\<and>\n     ?\\<S>\\<bullet>?\\<C>\n     \\<lparr>label :=\n               [tls] @ label ?\\<C>\\<rparr> \\<turnstile> ?es : [] _> t2s\n\ngoal (1 subgoal):\n 1. (\\<And>ts t1s t2s.\n        \\<S>\\<bullet>\\<C>\n        \\<lparr>label :=\n                  [ts] @\n                  label\n                   \\<C>\\<rparr> \\<turnstile> lfilledk : t1s _> t2s \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C>\n  \\<lparr>label :=\n            [ts] @ label \\<C>\\<rparr> \\<turnstile> lfilledk : t1s _> t2s\n\ngoal (1 subgoal):\n 1. \\<And>vs lholed n es' l es'' k es lfilledk \\<C> ts ts'.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        \\<And>\\<C> ts ts'.\n           \\<S>\\<bullet>\\<C> \\<turnstile> lfilledk : ts _> ts' \\<Longrightarrow>\n           \\<exists>t1s t2s \\<C>' arb_label. \\<S>\\<bullet>\\<C>\n              \\<lparr>label :=\n                        arb_label @\n                        label \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s;\n        \\<S>\\<bullet>\\<C> \\<turnstile> vs @\n [Label n es' lfilledk] @ es'' : ts _> ts'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t1s t2s \\<C>' arb_label. \\<S>\\<bullet>\\<C>\n                            \\<lparr>label :=\narb_label @ label \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t1s t2s \\<C>'' arb_label. \\<S>\\<bullet>\\<C>\n       \\<lparr>label :=\n                 arb_label @ label \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s", "using LN(4)[OF test(1)]"], ["proof (prove)\nusing this:\n  \\<exists>t1s t2s \\<C>'' arb_label. \\<S>\\<bullet>\\<C>\n     \\<lparr>label := [ts] @ label \\<C>,\n        label :=\n          arb_label @\n          label\n           (\\<C>\n            \\<lparr>label :=\n                      [ts] @\n                      label\n                       \\<C>\\<rparr>)\\<rparr> \\<turnstile> es : t1s _> t2s\n\ngoal (1 subgoal):\n 1. \\<exists>t1s t2s \\<C>'' arb_label. \\<S>\\<bullet>\\<C>\n       \\<lparr>label :=\n                 arb_label @ label \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s", "by simp (metis append.assoc append_Cons append_Nil)"], ["proof (state)\nthis:\n  \\<exists>t1s t2s \\<C>'' arb_label. \\<S>\\<bullet>\\<C>\n     \\<lparr>label :=\n               arb_label @ label \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma types_exist_lfilled_weak:\n  assumes \"Lfilled k lholed es lfilled\"\n          \"\\<S>\\<bullet>\\<C> \\<turnstile> lfilled : (ts _> ts')\"\n  shows \"\\<exists>t1s t2s \\<C>' arb_label arb_return. (\\<S>\\<bullet>\\<C>\\<lparr>label := arb_label, return := arb_return\\<rparr> \\<turnstile> es : (t1s _> t2s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t1s t2s \\<C>' arb_label arb_return. \\<S>\\<bullet>\\<C>\n       \\<lparr>label := arb_label,\n          return := arb_return\\<rparr> \\<turnstile> es : t1s _> t2s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>t1s t2s \\<C>' arb_label arb_return. \\<S>\\<bullet>\\<C>\n       \\<lparr>label := arb_label,\n          return := arb_return\\<rparr> \\<turnstile> es : t1s _> t2s", "have \"\\<exists>t1s t2s \\<C>' arb_label. (\\<S>\\<bullet>\\<C>\\<lparr>label := arb_label, return := (return \\<C>)\\<rparr> \\<turnstile> es : (t1s _> t2s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t1s t2s \\<C>' arb_label. \\<S>\\<bullet>\\<C>\n       \\<lparr>label := arb_label,\n          return := return \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s", "using types_exist_lfilled[OF assms]"], ["proof (prove)\nusing this:\n  \\<exists>t1s t2s \\<C>' arb_label. \\<S>\\<bullet>\\<C>\n     \\<lparr>label :=\n               arb_label @ label \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s\n\ngoal (1 subgoal):\n 1. \\<exists>t1s t2s \\<C>' arb_label. \\<S>\\<bullet>\\<C>\n       \\<lparr>label := arb_label,\n          return := return \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>t1s t2s \\<C>' arb_label. \\<S>\\<bullet>\\<C>\n     \\<lparr>label := arb_label,\n        return := return \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s\n\ngoal (1 subgoal):\n 1. \\<exists>t1s t2s \\<C>' arb_label arb_return. \\<S>\\<bullet>\\<C>\n       \\<lparr>label := arb_label,\n          return := arb_return\\<rparr> \\<turnstile> es : t1s _> t2s", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>t1s t2s \\<C>' arb_label. \\<S>\\<bullet>\\<C>\n     \\<lparr>label := arb_label,\n        return := return \\<C>\\<rparr> \\<turnstile> es : t1s _> t2s\n\ngoal (1 subgoal):\n 1. \\<exists>t1s t2s \\<C>' arb_label arb_return. \\<S>\\<bullet>\\<C>\n       \\<lparr>label := arb_label,\n          return := arb_return\\<rparr> \\<turnstile> es : t1s _> t2s", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>t1s t2s \\<C>' arb_label arb_return. \\<S>\\<bullet>\\<C>\n     \\<lparr>label := arb_label,\n        return := arb_return\\<rparr> \\<turnstile> es : t1s _> t2s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma store_typing_imp_func_agree:\n  assumes \"store_typing s \\<S>\"\n          \"i < length (s_inst \\<S>)\"\n          \"j < length (func_t ((s_inst \\<S>)!i))\"\n  shows \"(sfunc_ind s i j) < length (s_funcs \\<S>)\"\n        \"cl_typing \\<S> (sfunc s i j) ((s_funcs \\<S>)!(sfunc_ind s i j))\"\n        \"((s_funcs \\<S>)!(sfunc_ind s i j)) = (func_t ((s_inst \\<S>)!i))!j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sfunc_ind s i j < length (s_funcs \\<S>) &&&\n    cl_typing \\<S> (sfunc s i j) (s_funcs \\<S> ! sfunc_ind s i j) &&&\n    s_funcs \\<S> ! sfunc_ind s i j = func_t (s_inst \\<S> ! i) ! j", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. sfunc_ind s i j < length (s_funcs \\<S>)\n 2. cl_typing \\<S> (sfunc s i j) (s_funcs \\<S> ! sfunc_ind s i j)\n 3. s_funcs \\<S> ! sfunc_ind s i j = func_t (s_inst \\<S> ! i) ! j", "have funcs_agree:\"list_all2 (cl_typing \\<S>) (funcs s) (s_funcs \\<S>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (cl_typing \\<S>) (s.funcs s) (s_funcs \\<S>)", "using assms(1)"], ["proof (prove)\nusing this:\n  store_typing s \\<S>\n\ngoal (1 subgoal):\n 1. list_all2 (cl_typing \\<S>) (s.funcs s) (s_funcs \\<S>)", "unfolding store_typing.simps"], ["proof (prove)\nusing this:\n  \\<exists>\\<S>' \\<C>s tfs ns ms tgs insts fs tclss bss gs.\n     s =\n     \\<lparr>inst = insts, funcs = fs, tab = tclss, mem = bss,\n        globs = gs\\<rparr> \\<and>\n     \\<S> = \\<S>' \\<and>\n     \\<S>' =\n     \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n        s_globs = tgs\\<rparr> \\<and>\n     list_all2 (inst_typing \\<S>') insts \\<C>s \\<and>\n     list_all2 (cl_typing \\<S>') fs tfs \\<and>\n     list_all (tab_agree \\<S>') (concat tclss) \\<and>\n     list_all2 (\\<lambda>tcls n. n \\<le> length tcls) tclss ns \\<and>\n     list_all2 mem_agree bss ms \\<and> list_all2 glob_agree gs tgs\n\ngoal (1 subgoal):\n 1. list_all2 (cl_typing \\<S>) (s.funcs s) (s_funcs \\<S>)", "by auto"], ["proof (state)\nthis:\n  list_all2 (cl_typing \\<S>) (s.funcs s) (s_funcs \\<S>)\n\ngoal (3 subgoals):\n 1. sfunc_ind s i j < length (s_funcs \\<S>)\n 2. cl_typing \\<S> (sfunc s i j) (s_funcs \\<S> ! sfunc_ind s i j)\n 3. s_funcs \\<S> ! sfunc_ind s i j = func_t (s_inst \\<S> ! i) ! j", "have \"list_all2 (funci_agree (s_funcs \\<S>)) (inst.funcs ((inst s)!i)) (func_t ((s_inst \\<S>)!i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (funci_agree (s_funcs \\<S>)) (inst.funcs (inst s ! i))\n     (func_t (s_inst \\<S> ! i))", "using assms(1,2) store_typing_imp_inst_length_eq store_typing_imp_inst_typing"], ["proof (prove)\nusing this:\n  store_typing s \\<S>\n  i < length (s_inst \\<S>)\n  store_typing ?s ?\\<S> \\<Longrightarrow>\n  length (inst ?s) = length (s_inst ?\\<S>)\n  \\<lbrakk>store_typing ?s ?\\<S>; ?i < length (inst ?s)\\<rbrakk>\n  \\<Longrightarrow> inst_typing ?\\<S> (inst ?s ! ?i) (s_inst ?\\<S> ! ?i)\n\ngoal (1 subgoal):\n 1. list_all2 (funci_agree (s_funcs \\<S>)) (inst.funcs (inst s ! i))\n     (func_t (s_inst \\<S> ! i))", "by (fastforce simp add: inst_typing.simps)"], ["proof (state)\nthis:\n  list_all2 (funci_agree (s_funcs \\<S>)) (inst.funcs (inst s ! i))\n   (func_t (s_inst \\<S> ! i))\n\ngoal (3 subgoals):\n 1. sfunc_ind s i j < length (s_funcs \\<S>)\n 2. cl_typing \\<S> (sfunc s i j) (s_funcs \\<S> ! sfunc_ind s i j)\n 3. s_funcs \\<S> ! sfunc_ind s i j = func_t (s_inst \\<S> ! i) ! j", "hence \"funci_agree (s_funcs \\<S>) ((inst.funcs ((inst s)!i))!j) ((func_t ((s_inst \\<S>)!i))!j)\""], ["proof (prove)\nusing this:\n  list_all2 (funci_agree (s_funcs \\<S>)) (inst.funcs (inst s ! i))\n   (func_t (s_inst \\<S> ! i))\n\ngoal (1 subgoal):\n 1. funci_agree (s_funcs \\<S>) (inst.funcs (inst s ! i) ! j)\n     (func_t (s_inst \\<S> ! i) ! j)", "using assms(3) list_all2_nthD2"], ["proof (prove)\nusing this:\n  list_all2 (funci_agree (s_funcs \\<S>)) (inst.funcs (inst s ! i))\n   (func_t (s_inst \\<S> ! i))\n  j < length (func_t (s_inst \\<S> ! i))\n  \\<lbrakk>list_all2 ?P ?xs ?ys; ?p < length ?ys\\<rbrakk>\n  \\<Longrightarrow> ?P (?xs ! ?p) (?ys ! ?p)\n\ngoal (1 subgoal):\n 1. funci_agree (s_funcs \\<S>) (inst.funcs (inst s ! i) ! j)\n     (func_t (s_inst \\<S> ! i) ! j)", "by blast"], ["proof (state)\nthis:\n  funci_agree (s_funcs \\<S>) (inst.funcs (inst s ! i) ! j)\n   (func_t (s_inst \\<S> ! i) ! j)\n\ngoal (3 subgoals):\n 1. sfunc_ind s i j < length (s_funcs \\<S>)\n 2. cl_typing \\<S> (sfunc s i j) (s_funcs \\<S> ! sfunc_ind s i j)\n 3. s_funcs \\<S> ! sfunc_ind s i j = func_t (s_inst \\<S> ! i) ! j", "thus \"(sfunc_ind s i j) < length (s_funcs \\<S>)\"\n       \"((s_funcs \\<S>)!(sfunc_ind s i j)) = (func_t ((s_inst \\<S>)!i))!j\""], ["proof (prove)\nusing this:\n  funci_agree (s_funcs \\<S>) (inst.funcs (inst s ! i) ! j)\n   (func_t (s_inst \\<S> ! i) ! j)\n\ngoal (1 subgoal):\n 1. sfunc_ind s i j < length (s_funcs \\<S>) &&&\n    s_funcs \\<S> ! sfunc_ind s i j = func_t (s_inst \\<S> ! i) ! j", "unfolding funci_agree_def sfunc_ind_def"], ["proof (prove)\nusing this:\n  inst.funcs (inst s ! i) ! j < length (s_funcs \\<S>) \\<and>\n  s_funcs \\<S> ! (inst.funcs (inst s ! i) ! j) =\n  func_t (s_inst \\<S> ! i) ! j\n\ngoal (1 subgoal):\n 1. inst.funcs (inst s ! i) ! j < length (s_funcs \\<S>) &&&\n    s_funcs \\<S> ! (inst.funcs (inst s ! i) ! j) =\n    func_t (s_inst \\<S> ! i) ! j", "by auto"], ["proof (state)\nthis:\n  sfunc_ind s i j < length (s_funcs \\<S>)\n  s_funcs \\<S> ! sfunc_ind s i j = func_t (s_inst \\<S> ! i) ! j\n\ngoal (1 subgoal):\n 1. cl_typing \\<S> (sfunc s i j) (s_funcs \\<S> ! sfunc_ind s i j)", "thus \"cl_typing \\<S> (sfunc s i j) ((s_funcs \\<S>)!(sfunc_ind s i j))\""], ["proof (prove)\nusing this:\n  sfunc_ind s i j < length (s_funcs \\<S>)\n  s_funcs \\<S> ! sfunc_ind s i j = func_t (s_inst \\<S> ! i) ! j\n\ngoal (1 subgoal):\n 1. cl_typing \\<S> (sfunc s i j) (s_funcs \\<S> ! sfunc_ind s i j)", "using funcs_agree list_all2_nthD2"], ["proof (prove)\nusing this:\n  sfunc_ind s i j < length (s_funcs \\<S>)\n  s_funcs \\<S> ! sfunc_ind s i j = func_t (s_inst \\<S> ! i) ! j\n  list_all2 (cl_typing \\<S>) (s.funcs s) (s_funcs \\<S>)\n  \\<lbrakk>list_all2 ?P ?xs ?ys; ?p < length ?ys\\<rbrakk>\n  \\<Longrightarrow> ?P (?xs ! ?p) (?ys ! ?p)\n\ngoal (1 subgoal):\n 1. cl_typing \\<S> (sfunc s i j) (s_funcs \\<S> ! sfunc_ind s i j)", "unfolding sfunc_def"], ["proof (prove)\nusing this:\n  sfunc_ind s i j < length (s_funcs \\<S>)\n  s_funcs \\<S> ! sfunc_ind s i j = func_t (s_inst \\<S> ! i) ! j\n  list_all2 (cl_typing \\<S>) (s.funcs s) (s_funcs \\<S>)\n  \\<lbrakk>list_all2 ?P ?xs ?ys; ?p < length ?ys\\<rbrakk>\n  \\<Longrightarrow> ?P (?xs ! ?p) (?ys ! ?p)\n\ngoal (1 subgoal):\n 1. cl_typing \\<S> (s.funcs s ! sfunc_ind s i j)\n     (s_funcs \\<S> ! sfunc_ind s i j)", "by fastforce"], ["proof (state)\nthis:\n  cl_typing \\<S> (sfunc s i j) (s_funcs \\<S> ! sfunc_ind s i j)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma store_typing_imp_glob_agree:\n  assumes \"store_typing s \\<S>\"\n          \"i < length (s_inst \\<S>)\"\n          \"j < length (global ((s_inst \\<S>)!i))\"\n  shows \"(sglob_ind s i j) < length (s_globs \\<S>)\"\n        \"glob_agree (sglob s i j) ((s_globs \\<S>)!(sglob_ind s i j))\"\n        \"((s_globs \\<S>)!(sglob_ind s i j)) = (global ((s_inst \\<S>)!i))!j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sglob_ind s i j < length (s_globs \\<S>) &&&\n    glob_agree (sglob s i j) (s_globs \\<S> ! sglob_ind s i j) &&&\n    s_globs \\<S> ! sglob_ind s i j = global (s_inst \\<S> ! i) ! j", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. sglob_ind s i j < length (s_globs \\<S>)\n 2. glob_agree (sglob s i j) (s_globs \\<S> ! sglob_ind s i j)\n 3. s_globs \\<S> ! sglob_ind s i j = global (s_inst \\<S> ! i) ! j", "have globs_agree:\"list_all2 glob_agree (globs s) (s_globs \\<S>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 glob_agree (s.globs s) (s_globs \\<S>)", "using assms(1)"], ["proof (prove)\nusing this:\n  store_typing s \\<S>\n\ngoal (1 subgoal):\n 1. list_all2 glob_agree (s.globs s) (s_globs \\<S>)", "unfolding store_typing.simps"], ["proof (prove)\nusing this:\n  \\<exists>\\<S>' \\<C>s tfs ns ms tgs insts fs tclss bss gs.\n     s =\n     \\<lparr>inst = insts, funcs = fs, tab = tclss, mem = bss,\n        globs = gs\\<rparr> \\<and>\n     \\<S> = \\<S>' \\<and>\n     \\<S>' =\n     \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n        s_globs = tgs\\<rparr> \\<and>\n     list_all2 (inst_typing \\<S>') insts \\<C>s \\<and>\n     list_all2 (cl_typing \\<S>') fs tfs \\<and>\n     list_all (tab_agree \\<S>') (concat tclss) \\<and>\n     list_all2 (\\<lambda>tcls n. n \\<le> length tcls) tclss ns \\<and>\n     list_all2 mem_agree bss ms \\<and> list_all2 glob_agree gs tgs\n\ngoal (1 subgoal):\n 1. list_all2 glob_agree (s.globs s) (s_globs \\<S>)", "by auto"], ["proof (state)\nthis:\n  list_all2 glob_agree (s.globs s) (s_globs \\<S>)\n\ngoal (3 subgoals):\n 1. sglob_ind s i j < length (s_globs \\<S>)\n 2. glob_agree (sglob s i j) (s_globs \\<S> ! sglob_ind s i j)\n 3. s_globs \\<S> ! sglob_ind s i j = global (s_inst \\<S> ! i) ! j", "have \"list_all2 (globi_agree (s_globs \\<S>)) (inst.globs ((inst s)!i)) (global ((s_inst \\<S>)!i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (globi_agree (s_globs \\<S>)) (inst.globs (inst s ! i))\n     (global (s_inst \\<S> ! i))", "using assms(1,2) store_typing_imp_inst_length_eq store_typing_imp_inst_typing"], ["proof (prove)\nusing this:\n  store_typing s \\<S>\n  i < length (s_inst \\<S>)\n  store_typing ?s ?\\<S> \\<Longrightarrow>\n  length (inst ?s) = length (s_inst ?\\<S>)\n  \\<lbrakk>store_typing ?s ?\\<S>; ?i < length (inst ?s)\\<rbrakk>\n  \\<Longrightarrow> inst_typing ?\\<S> (inst ?s ! ?i) (s_inst ?\\<S> ! ?i)\n\ngoal (1 subgoal):\n 1. list_all2 (globi_agree (s_globs \\<S>)) (inst.globs (inst s ! i))\n     (global (s_inst \\<S> ! i))", "by (fastforce simp add: inst_typing.simps)"], ["proof (state)\nthis:\n  list_all2 (globi_agree (s_globs \\<S>)) (inst.globs (inst s ! i))\n   (global (s_inst \\<S> ! i))\n\ngoal (3 subgoals):\n 1. sglob_ind s i j < length (s_globs \\<S>)\n 2. glob_agree (sglob s i j) (s_globs \\<S> ! sglob_ind s i j)\n 3. s_globs \\<S> ! sglob_ind s i j = global (s_inst \\<S> ! i) ! j", "hence \"globi_agree (s_globs \\<S>) ((inst.globs ((inst s)!i))!j) ((global ((s_inst \\<S>)!i))!j)\""], ["proof (prove)\nusing this:\n  list_all2 (globi_agree (s_globs \\<S>)) (inst.globs (inst s ! i))\n   (global (s_inst \\<S> ! i))\n\ngoal (1 subgoal):\n 1. globi_agree (s_globs \\<S>) (inst.globs (inst s ! i) ! j)\n     (global (s_inst \\<S> ! i) ! j)", "using assms(3) list_all2_nthD2"], ["proof (prove)\nusing this:\n  list_all2 (globi_agree (s_globs \\<S>)) (inst.globs (inst s ! i))\n   (global (s_inst \\<S> ! i))\n  j < length (global (s_inst \\<S> ! i))\n  \\<lbrakk>list_all2 ?P ?xs ?ys; ?p < length ?ys\\<rbrakk>\n  \\<Longrightarrow> ?P (?xs ! ?p) (?ys ! ?p)\n\ngoal (1 subgoal):\n 1. globi_agree (s_globs \\<S>) (inst.globs (inst s ! i) ! j)\n     (global (s_inst \\<S> ! i) ! j)", "by blast"], ["proof (state)\nthis:\n  globi_agree (s_globs \\<S>) (inst.globs (inst s ! i) ! j)\n   (global (s_inst \\<S> ! i) ! j)\n\ngoal (3 subgoals):\n 1. sglob_ind s i j < length (s_globs \\<S>)\n 2. glob_agree (sglob s i j) (s_globs \\<S> ! sglob_ind s i j)\n 3. s_globs \\<S> ! sglob_ind s i j = global (s_inst \\<S> ! i) ! j", "thus \"(sglob_ind s i j) < length (s_globs \\<S>)\"\n       \"((s_globs \\<S>)!(sglob_ind s i j)) = (global ((s_inst \\<S>)!i))!j\""], ["proof (prove)\nusing this:\n  globi_agree (s_globs \\<S>) (inst.globs (inst s ! i) ! j)\n   (global (s_inst \\<S> ! i) ! j)\n\ngoal (1 subgoal):\n 1. sglob_ind s i j < length (s_globs \\<S>) &&&\n    s_globs \\<S> ! sglob_ind s i j = global (s_inst \\<S> ! i) ! j", "unfolding globi_agree_def sglob_ind_def"], ["proof (prove)\nusing this:\n  inst.globs (inst s ! i) ! j < length (s_globs \\<S>) \\<and>\n  s_globs \\<S> ! (inst.globs (inst s ! i) ! j) =\n  global (s_inst \\<S> ! i) ! j\n\ngoal (1 subgoal):\n 1. inst.globs (inst s ! i) ! j < length (s_globs \\<S>) &&&\n    s_globs \\<S> ! (inst.globs (inst s ! i) ! j) =\n    global (s_inst \\<S> ! i) ! j", "by auto"], ["proof (state)\nthis:\n  sglob_ind s i j < length (s_globs \\<S>)\n  s_globs \\<S> ! sglob_ind s i j = global (s_inst \\<S> ! i) ! j\n\ngoal (1 subgoal):\n 1. glob_agree (sglob s i j) (s_globs \\<S> ! sglob_ind s i j)", "thus \"glob_agree (sglob s i j) ((s_globs \\<S>)!(sglob_ind s i j))\""], ["proof (prove)\nusing this:\n  sglob_ind s i j < length (s_globs \\<S>)\n  s_globs \\<S> ! sglob_ind s i j = global (s_inst \\<S> ! i) ! j\n\ngoal (1 subgoal):\n 1. glob_agree (sglob s i j) (s_globs \\<S> ! sglob_ind s i j)", "using globs_agree list_all2_nthD2"], ["proof (prove)\nusing this:\n  sglob_ind s i j < length (s_globs \\<S>)\n  s_globs \\<S> ! sglob_ind s i j = global (s_inst \\<S> ! i) ! j\n  list_all2 glob_agree (s.globs s) (s_globs \\<S>)\n  \\<lbrakk>list_all2 ?P ?xs ?ys; ?p < length ?ys\\<rbrakk>\n  \\<Longrightarrow> ?P (?xs ! ?p) (?ys ! ?p)\n\ngoal (1 subgoal):\n 1. glob_agree (sglob s i j) (s_globs \\<S> ! sglob_ind s i j)", "unfolding sglob_def"], ["proof (prove)\nusing this:\n  sglob_ind s i j < length (s_globs \\<S>)\n  s_globs \\<S> ! sglob_ind s i j = global (s_inst \\<S> ! i) ! j\n  list_all2 glob_agree (s.globs s) (s_globs \\<S>)\n  \\<lbrakk>list_all2 ?P ?xs ?ys; ?p < length ?ys\\<rbrakk>\n  \\<Longrightarrow> ?P (?xs ! ?p) (?ys ! ?p)\n\ngoal (1 subgoal):\n 1. glob_agree (s.globs s ! sglob_ind s i j)\n     (s_globs \\<S> ! sglob_ind s i j)", "by fastforce"], ["proof (state)\nthis:\n  glob_agree (sglob s i j) (s_globs \\<S> ! sglob_ind s i j)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma store_typing_imp_mem_agree_Some:\n  assumes \"store_typing s \\<S>\"\n          \"i < length (s_inst \\<S>)\"\n          \"smem_ind s i = Some j\"\n  shows \"j < length (s_mem \\<S>)\"\n        \"mem_agree ((mem s)!j) ((s_mem \\<S>)!j)\"\n        \"\\<exists>x. ((s_mem \\<S>)!j) = x \\<and> (memory ((s_inst \\<S>)!i)) = Some x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length (s_mem \\<S>) &&&\n    mem_agree (s.mem s ! j) (s_mem \\<S> ! j) &&&\n    \\<exists>x. s_mem \\<S> ! j = x \\<and> memory (s_inst \\<S> ! i) = Some x", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. j < length (s_mem \\<S>)\n 2. mem_agree (s.mem s ! j) (s_mem \\<S> ! j)\n 3. \\<exists>x. s_mem \\<S> ! j = x \\<and> memory (s_inst \\<S> ! i) = Some x", "have mems_agree:\"list_all2 mem_agree (mem s) (s_mem \\<S>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 mem_agree (s.mem s) (s_mem \\<S>)", "using assms(1)"], ["proof (prove)\nusing this:\n  store_typing s \\<S>\n\ngoal (1 subgoal):\n 1. list_all2 mem_agree (s.mem s) (s_mem \\<S>)", "unfolding store_typing.simps"], ["proof (prove)\nusing this:\n  \\<exists>\\<S>' \\<C>s tfs ns ms tgs insts fs tclss bss gs.\n     s =\n     \\<lparr>inst = insts, funcs = fs, tab = tclss, mem = bss,\n        globs = gs\\<rparr> \\<and>\n     \\<S> = \\<S>' \\<and>\n     \\<S>' =\n     \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n        s_globs = tgs\\<rparr> \\<and>\n     list_all2 (inst_typing \\<S>') insts \\<C>s \\<and>\n     list_all2 (cl_typing \\<S>') fs tfs \\<and>\n     list_all (tab_agree \\<S>') (concat tclss) \\<and>\n     list_all2 (\\<lambda>tcls n. n \\<le> length tcls) tclss ns \\<and>\n     list_all2 mem_agree bss ms \\<and> list_all2 glob_agree gs tgs\n\ngoal (1 subgoal):\n 1. list_all2 mem_agree (s.mem s) (s_mem \\<S>)", "by auto"], ["proof (state)\nthis:\n  list_all2 mem_agree (s.mem s) (s_mem \\<S>)\n\ngoal (3 subgoals):\n 1. j < length (s_mem \\<S>)\n 2. mem_agree (s.mem s ! j) (s_mem \\<S> ! j)\n 3. \\<exists>x. s_mem \\<S> ! j = x \\<and> memory (s_inst \\<S> ! i) = Some x", "hence \"memi_agree (s_mem \\<S>) ((inst.mem ((inst s)!i))) ((memory ((s_inst \\<S>)!i)))\""], ["proof (prove)\nusing this:\n  list_all2 mem_agree (s.mem s) (s_mem \\<S>)\n\ngoal (1 subgoal):\n 1. memi_agree (s_mem \\<S>) (inst.mem (inst s ! i))\n     (memory (s_inst \\<S> ! i))", "using assms(1,2) store_typing_imp_inst_length_eq store_typing_imp_inst_typing"], ["proof (prove)\nusing this:\n  list_all2 mem_agree (s.mem s) (s_mem \\<S>)\n  store_typing s \\<S>\n  i < length (s_inst \\<S>)\n  store_typing ?s ?\\<S> \\<Longrightarrow>\n  length (inst ?s) = length (s_inst ?\\<S>)\n  \\<lbrakk>store_typing ?s ?\\<S>; ?i < length (inst ?s)\\<rbrakk>\n  \\<Longrightarrow> inst_typing ?\\<S> (inst ?s ! ?i) (s_inst ?\\<S> ! ?i)\n\ngoal (1 subgoal):\n 1. memi_agree (s_mem \\<S>) (inst.mem (inst s ! i))\n     (memory (s_inst \\<S> ! i))", "by (fastforce simp add: inst_typing.simps)"], ["proof (state)\nthis:\n  memi_agree (s_mem \\<S>) (inst.mem (inst s ! i)) (memory (s_inst \\<S> ! i))\n\ngoal (3 subgoals):\n 1. j < length (s_mem \\<S>)\n 2. mem_agree (s.mem s ! j) (s_mem \\<S> ! j)\n 3. \\<exists>x. s_mem \\<S> ! j = x \\<and> memory (s_inst \\<S> ! i) = Some x", "thus \"j < length (s_mem \\<S>)\"\n       \"\\<exists>x. ((s_mem \\<S>)!j) = x \\<and> (memory ((s_inst \\<S>)!i)) = Some x\""], ["proof (prove)\nusing this:\n  memi_agree (s_mem \\<S>) (inst.mem (inst s ! i)) (memory (s_inst \\<S> ! i))\n\ngoal (1 subgoal):\n 1. j < length (s_mem \\<S>) &&&\n    \\<exists>x. s_mem \\<S> ! j = x \\<and> memory (s_inst \\<S> ! i) = Some x", "using assms(3)"], ["proof (prove)\nusing this:\n  memi_agree (s_mem \\<S>) (inst.mem (inst s ! i)) (memory (s_inst \\<S> ! i))\n  smem_ind s i = Some j\n\ngoal (1 subgoal):\n 1. j < length (s_mem \\<S>) &&&\n    \\<exists>x. s_mem \\<S> ! j = x \\<and> memory (s_inst \\<S> ! i) = Some x", "unfolding memi_agree_def smem_ind_def"], ["proof (prove)\nusing this:\n  (\\<exists>j' m'.\n      inst.mem (inst s ! i) = Some j' \\<and>\n      j' < length (s_mem \\<S>) \\<and>\n      memory (s_inst \\<S> ! i) = Some m' \\<and> s_mem \\<S> ! j' = m') \\<or>\n  inst.mem (inst s ! i) = None \\<and> memory (s_inst \\<S> ! i) = None\n  inst.mem (inst s ! i) = Some j\n\ngoal (1 subgoal):\n 1. j < length (s_mem \\<S>) &&&\n    \\<exists>x. s_mem \\<S> ! j = x \\<and> memory (s_inst \\<S> ! i) = Some x", "by auto"], ["proof (state)\nthis:\n  j < length (s_mem \\<S>)\n  \\<exists>x. s_mem \\<S> ! j = x \\<and> memory (s_inst \\<S> ! i) = Some x\n\ngoal (1 subgoal):\n 1. mem_agree (s.mem s ! j) (s_mem \\<S> ! j)", "thus \"mem_agree ((mem s)!j) ((s_mem \\<S>)!j)\""], ["proof (prove)\nusing this:\n  j < length (s_mem \\<S>)\n  \\<exists>x. s_mem \\<S> ! j = x \\<and> memory (s_inst \\<S> ! i) = Some x\n\ngoal (1 subgoal):\n 1. mem_agree (s.mem s ! j) (s_mem \\<S> ! j)", "using mems_agree list_all2_nthD2"], ["proof (prove)\nusing this:\n  j < length (s_mem \\<S>)\n  \\<exists>x. s_mem \\<S> ! j = x \\<and> memory (s_inst \\<S> ! i) = Some x\n  list_all2 mem_agree (s.mem s) (s_mem \\<S>)\n  \\<lbrakk>list_all2 ?P ?xs ?ys; ?p < length ?ys\\<rbrakk>\n  \\<Longrightarrow> ?P (?xs ! ?p) (?ys ! ?p)\n\ngoal (1 subgoal):\n 1. mem_agree (s.mem s ! j) (s_mem \\<S> ! j)", "unfolding sglob_def"], ["proof (prove)\nusing this:\n  j < length (s_mem \\<S>)\n  \\<exists>x. s_mem \\<S> ! j = x \\<and> memory (s_inst \\<S> ! i) = Some x\n  list_all2 mem_agree (s.mem s) (s_mem \\<S>)\n  \\<lbrakk>list_all2 ?P ?xs ?ys; ?p < length ?ys\\<rbrakk>\n  \\<Longrightarrow> ?P (?xs ! ?p) (?ys ! ?p)\n\ngoal (1 subgoal):\n 1. mem_agree (s.mem s ! j) (s_mem \\<S> ! j)", "by fastforce"], ["proof (state)\nthis:\n  mem_agree (s.mem s ! j) (s_mem \\<S> ! j)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma store_typing_imp_mem_agree_None:\n  assumes \"store_typing s \\<S>\"\n          \"i < length (s_inst \\<S>)\"\n          \"smem_ind s i = None\"\n  shows \"(memory ((s_inst \\<S>)!i)) = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. memory (s_inst \\<S> ! i) = None", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. memory (s_inst \\<S> ! i) = None", "have mems_agree:\"list_all2 mem_agree (mem s) (s_mem \\<S>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 mem_agree (s.mem s) (s_mem \\<S>)", "using assms(1)"], ["proof (prove)\nusing this:\n  store_typing s \\<S>\n\ngoal (1 subgoal):\n 1. list_all2 mem_agree (s.mem s) (s_mem \\<S>)", "unfolding store_typing.simps"], ["proof (prove)\nusing this:\n  \\<exists>\\<S>' \\<C>s tfs ns ms tgs insts fs tclss bss gs.\n     s =\n     \\<lparr>inst = insts, funcs = fs, tab = tclss, mem = bss,\n        globs = gs\\<rparr> \\<and>\n     \\<S> = \\<S>' \\<and>\n     \\<S>' =\n     \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n        s_globs = tgs\\<rparr> \\<and>\n     list_all2 (inst_typing \\<S>') insts \\<C>s \\<and>\n     list_all2 (cl_typing \\<S>') fs tfs \\<and>\n     list_all (tab_agree \\<S>') (concat tclss) \\<and>\n     list_all2 (\\<lambda>tcls n. n \\<le> length tcls) tclss ns \\<and>\n     list_all2 mem_agree bss ms \\<and> list_all2 glob_agree gs tgs\n\ngoal (1 subgoal):\n 1. list_all2 mem_agree (s.mem s) (s_mem \\<S>)", "by auto"], ["proof (state)\nthis:\n  list_all2 mem_agree (s.mem s) (s_mem \\<S>)\n\ngoal (1 subgoal):\n 1. memory (s_inst \\<S> ! i) = None", "hence \"memi_agree (s_mem \\<S>) ((inst.mem ((inst s)!i))) ((memory ((s_inst \\<S>)!i)))\""], ["proof (prove)\nusing this:\n  list_all2 mem_agree (s.mem s) (s_mem \\<S>)\n\ngoal (1 subgoal):\n 1. memi_agree (s_mem \\<S>) (inst.mem (inst s ! i))\n     (memory (s_inst \\<S> ! i))", "using assms(1,2) store_typing_imp_inst_length_eq store_typing_imp_inst_typing"], ["proof (prove)\nusing this:\n  list_all2 mem_agree (s.mem s) (s_mem \\<S>)\n  store_typing s \\<S>\n  i < length (s_inst \\<S>)\n  store_typing ?s ?\\<S> \\<Longrightarrow>\n  length (inst ?s) = length (s_inst ?\\<S>)\n  \\<lbrakk>store_typing ?s ?\\<S>; ?i < length (inst ?s)\\<rbrakk>\n  \\<Longrightarrow> inst_typing ?\\<S> (inst ?s ! ?i) (s_inst ?\\<S> ! ?i)\n\ngoal (1 subgoal):\n 1. memi_agree (s_mem \\<S>) (inst.mem (inst s ! i))\n     (memory (s_inst \\<S> ! i))", "by (fastforce simp add: inst_typing.simps)"], ["proof (state)\nthis:\n  memi_agree (s_mem \\<S>) (inst.mem (inst s ! i)) (memory (s_inst \\<S> ! i))\n\ngoal (1 subgoal):\n 1. memory (s_inst \\<S> ! i) = None", "thus ?thesis"], ["proof (prove)\nusing this:\n  memi_agree (s_mem \\<S>) (inst.mem (inst s ! i)) (memory (s_inst \\<S> ! i))\n\ngoal (1 subgoal):\n 1. memory (s_inst \\<S> ! i) = None", "using assms(3)"], ["proof (prove)\nusing this:\n  memi_agree (s_mem \\<S>) (inst.mem (inst s ! i)) (memory (s_inst \\<S> ! i))\n  smem_ind s i = None\n\ngoal (1 subgoal):\n 1. memory (s_inst \\<S> ! i) = None", "unfolding memi_agree_def smem_ind_def"], ["proof (prove)\nusing this:\n  (\\<exists>j' m'.\n      inst.mem (inst s ! i) = Some j' \\<and>\n      j' < length (s_mem \\<S>) \\<and>\n      memory (s_inst \\<S> ! i) = Some m' \\<and> s_mem \\<S> ! j' = m') \\<or>\n  inst.mem (inst s ! i) = None \\<and> memory (s_inst \\<S> ! i) = None\n  inst.mem (inst s ! i) = None\n\ngoal (1 subgoal):\n 1. memory (s_inst \\<S> ! i) = None", "by auto"], ["proof (state)\nthis:\n  memory (s_inst \\<S> ! i) = None\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma store_mem_exists:\n  assumes \"i < length (s_inst \\<S>)\"\n          \"store_typing s \\<S>\"\n  shows \"Option.is_none (memory ((s_inst \\<S>)!i)) = Option.is_none (inst.mem ((inst s)!i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Option.is_none (memory (s_inst \\<S> ! i)) =\n    Option.is_none (inst.mem (inst s ! i))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Option.is_none (memory (s_inst \\<S> ! i)) =\n    Option.is_none (inst.mem (inst s ! i))", "obtain j where j_def:\"j = (inst.mem ((inst s)!i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j.\n        j = inst.mem (inst s ! i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  j = inst.mem (inst s ! i)\n\ngoal (1 subgoal):\n 1. Option.is_none (memory (s_inst \\<S> ! i)) =\n    Option.is_none (inst.mem (inst s ! i))", "obtain m where m_def:\"m = (memory ((s_inst \\<S>)!i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m.\n        m = memory (s_inst \\<S> ! i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  m = memory (s_inst \\<S> ! i)\n\ngoal (1 subgoal):\n 1. Option.is_none (memory (s_inst \\<S> ! i)) =\n    Option.is_none (inst.mem (inst s ! i))", "have inst_typ:\"inst_typing \\<S> ((inst s)!i) ((s_inst \\<S>)!i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inst_typing \\<S> (inst s ! i) (s_inst \\<S> ! i)", "using assms"], ["proof (prove)\nusing this:\n  i < length (s_inst \\<S>)\n  store_typing s \\<S>\n\ngoal (1 subgoal):\n 1. inst_typing \\<S> (inst s ! i) (s_inst \\<S> ! i)", "unfolding store_typing.simps list_all2_conv_all_nth"], ["proof (prove)\nusing this:\n  i < length (s_inst \\<S>)\n  \\<exists>\\<S>' \\<C>s tfs ns ms tgs insts fs tclss bss gs.\n     s =\n     \\<lparr>inst = insts, funcs = fs, tab = tclss, mem = bss,\n        globs = gs\\<rparr> \\<and>\n     \\<S> = \\<S>' \\<and>\n     \\<S>' =\n     \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n        s_globs = tgs\\<rparr> \\<and>\n     (length insts = length \\<C>s \\<and>\n      (\\<forall>i<length insts.\n          inst_typing \\<S>' (insts ! i) (\\<C>s ! i))) \\<and>\n     (length fs = length tfs \\<and>\n      (\\<forall>i<length fs. cl_typing \\<S>' (fs ! i) (tfs ! i))) \\<and>\n     list_all (tab_agree \\<S>') (concat tclss) \\<and>\n     (length tclss = length ns \\<and>\n      (\\<forall>i<length tclss. ns ! i \\<le> length (tclss ! i))) \\<and>\n     (length bss = length ms \\<and>\n      (\\<forall>i<length bss. mem_agree (bss ! i) (ms ! i))) \\<and>\n     length gs = length tgs \\<and>\n     (\\<forall>i<length gs. glob_agree (gs ! i) (tgs ! i))\n\ngoal (1 subgoal):\n 1. inst_typing \\<S> (inst s ! i) (s_inst \\<S> ! i)", "by auto"], ["proof (state)\nthis:\n  inst_typing \\<S> (inst s ! i) (s_inst \\<S> ! i)\n\ngoal (1 subgoal):\n 1. Option.is_none (memory (s_inst \\<S> ! i)) =\n    Option.is_none (inst.mem (inst s ! i))", "thus ?thesis"], ["proof (prove)\nusing this:\n  inst_typing \\<S> (inst s ! i) (s_inst \\<S> ! i)\n\ngoal (1 subgoal):\n 1. Option.is_none (memory (s_inst \\<S> ! i)) =\n    Option.is_none (inst.mem (inst s ! i))", "unfolding inst_typing.simps memi_agree_def"], ["proof (prove)\nusing this:\n  \\<exists>\\<S>' fs tfs gs tgs ia i' n j m ts.\n     \\<S> = \\<S>' \\<and>\n     inst s ! i =\n     \\<lparr>types = ts, funcs = fs, tab = ia, mem = j,\n        globs = gs\\<rparr> \\<and>\n     s_inst \\<S> ! i =\n     \\<lparr>types_t = ts, func_t = tfs, global = tgs, table = n,\n        memory = m, local = [], label = [], return = None\\<rparr> \\<and>\n     list_all2 (funci_agree (s_funcs \\<S>')) fs tfs \\<and>\n     list_all2 (globi_agree (s_globs \\<S>')) gs tgs \\<and>\n     (ia = Some i' \\<and>\n      i' < length (s_tab \\<S>') \\<and> s_tab \\<S>' ! i' = the n \\<or>\n      ia = None \\<and> n = None) \\<and>\n     ((\\<exists>j' m'.\n          j = Some j' \\<and>\n          j' < length (s_mem \\<S>') \\<and>\n          m = Some m' \\<and> s_mem \\<S>' ! j' = m') \\<or>\n      j = None \\<and> m = None)\n\ngoal (1 subgoal):\n 1. Option.is_none (memory (s_inst \\<S> ! i)) =\n    Option.is_none (inst.mem (inst s ! i))", "by auto"], ["proof (state)\nthis:\n  Option.is_none (memory (s_inst \\<S> ! i)) =\n  Option.is_none (inst.mem (inst s ! i))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma store_preserved_mem:\n  assumes \"store_typing s \\<S>\"\n          \"s' = s\\<lparr>s.mem := (s.mem s)[i := mem']\\<rparr>\"\n          \"mem_size mem' \\<ge> mem_size orig_mem\"\n          \"((s.mem s)!i) = orig_mem\"\n  shows \"store_typing s' \\<S>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "obtain insts fs clss bss gs where \"s = \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss, globs = gs\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>insts fs clss bss gs.\n        s =\n        \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n           globs = gs\\<rparr> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using s.cases"], ["proof (prove)\nusing this:\n  (\\<And>inst funcs tab mem globs.\n      ?r =\n      \\<lparr>inst = inst, funcs = funcs, tab = tab, mem = mem,\n         globs = globs\\<rparr> \\<Longrightarrow>\n      ?C) \\<Longrightarrow>\n  ?C\n\ngoal (1 subgoal):\n 1. (\\<And>insts fs clss bss gs.\n        s =\n        \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n           globs = gs\\<rparr> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s =\n  \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n     globs = gs\\<rparr>\n\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "moreover"], ["proof (state)\nthis:\n  s =\n  \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n     globs = gs\\<rparr>\n\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "obtain insts' fs' clss' bss' gs' where \"s' = \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss', globs = gs'\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>insts' fs' clss' bss' gs'.\n        s' =\n        \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n           globs = gs'\\<rparr> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using s.cases"], ["proof (prove)\nusing this:\n  (\\<And>inst funcs tab mem globs.\n      ?r =\n      \\<lparr>inst = inst, funcs = funcs, tab = tab, mem = mem,\n         globs = globs\\<rparr> \\<Longrightarrow>\n      ?C) \\<Longrightarrow>\n  ?C\n\ngoal (1 subgoal):\n 1. (\\<And>insts' fs' clss' bss' gs'.\n        s' =\n        \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n           globs = gs'\\<rparr> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s' =\n  \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n     globs = gs'\\<rparr>\n\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "moreover"], ["proof (state)\nthis:\n  s' =\n  \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n     globs = gs'\\<rparr>\n\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "obtain \\<C>s tfs ns ms tgs where \"\\<S> = \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms, s_globs = tgs\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<C>s tfs ns ms tgs.\n        \\<S> =\n        \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n           s_globs = tgs\\<rparr> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using s_context.cases"], ["proof (prove)\nusing this:\n  (\\<And>s_inst s_funcs s_tab s_mem s_globs.\n      ?r =\n      \\<lparr>s_inst = s_inst, s_funcs = s_funcs, s_tab = s_tab,\n         s_mem = s_mem, s_globs = s_globs\\<rparr> \\<Longrightarrow>\n      ?C) \\<Longrightarrow>\n  ?C\n\ngoal (1 subgoal):\n 1. (\\<And>\\<C>s tfs ns ms tgs.\n        \\<S> =\n        \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n           s_globs = tgs\\<rparr> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<S> =\n  \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n     s_globs = tgs\\<rparr>\n\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "moreover"], ["proof (state)\nthis:\n  \\<S> =\n  \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n     s_globs = tgs\\<rparr>\n\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "note s_S_defs = calculation"], ["proof (state)\nthis:\n  s =\n  \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n     globs = gs\\<rparr>\n  s' =\n  \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n     globs = gs'\\<rparr>\n  \\<S> =\n  \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n     s_globs = tgs\\<rparr>\n\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "hence\n  \"insts = insts'\"\n  \"fs = fs'\"\n  \"clss = clss'\"\n  \"gs = gs'\""], ["proof (prove)\nusing this:\n  s =\n  \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n     globs = gs\\<rparr>\n  s' =\n  \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n     globs = gs'\\<rparr>\n  \\<S> =\n  \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n     s_globs = tgs\\<rparr>\n\ngoal (1 subgoal):\n 1. (insts = insts' &&& fs = fs') &&& clss = clss' &&& gs = gs'", "using assms(2)"], ["proof (prove)\nusing this:\n  s =\n  \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n     globs = gs\\<rparr>\n  s' =\n  \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n     globs = gs'\\<rparr>\n  \\<S> =\n  \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n     s_globs = tgs\\<rparr>\n  s' = s\\<lparr>s.mem := (s.mem s)[i := mem']\\<rparr>\n\ngoal (1 subgoal):\n 1. (insts = insts' &&& fs = fs') &&& clss = clss' &&& gs = gs'", "by simp_all"], ["proof (state)\nthis:\n  insts = insts'\n  fs = fs'\n  clss = clss'\n  gs = gs'\n\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "hence\n  \"list_all2 (inst_typing \\<S>) insts' \\<C>s\"\n  \"list_all2 (cl_typing \\<S>) fs' tfs\"\n  \"list_all (tab_agree \\<S>) (concat clss')\"\n  \"list_all2 (\\<lambda>cls n. n \\<le> length cls) clss' ns\"\n  \"list_all2 glob_agree gs' tgs\""], ["proof (prove)\nusing this:\n  insts = insts'\n  fs = fs'\n  clss = clss'\n  gs = gs'\n\ngoal (1 subgoal):\n 1. (list_all2 (inst_typing \\<S>) insts' \\<C>s &&&\n     list_all2 (cl_typing \\<S>) fs' tfs) &&&\n    list_all (tab_agree \\<S>) (concat clss') &&&\n    list_all2 (\\<lambda>cls n. n \\<le> length cls) clss' ns &&&\n    list_all2 glob_agree gs' tgs", "using s_S_defs assms(1)"], ["proof (prove)\nusing this:\n  insts = insts'\n  fs = fs'\n  clss = clss'\n  gs = gs'\n  s =\n  \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n     globs = gs\\<rparr>\n  s' =\n  \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n     globs = gs'\\<rparr>\n  \\<S> =\n  \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n     s_globs = tgs\\<rparr>\n  store_typing s \\<S>\n\ngoal (1 subgoal):\n 1. (list_all2 (inst_typing \\<S>) insts' \\<C>s &&&\n     list_all2 (cl_typing \\<S>) fs' tfs) &&&\n    list_all (tab_agree \\<S>) (concat clss') &&&\n    list_all2 (\\<lambda>cls n. n \\<le> length cls) clss' ns &&&\n    list_all2 glob_agree gs' tgs", "unfolding store_typing.simps"], ["proof (prove)\nusing this:\n  insts = insts'\n  fs = fs'\n  clss = clss'\n  gs = gs'\n  s =\n  \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n     globs = gs\\<rparr>\n  s' =\n  \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n     globs = gs'\\<rparr>\n  \\<S> =\n  \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n     s_globs = tgs\\<rparr>\n  \\<exists>\\<S>' \\<C>s tfs ns ms tgs insts fs tclss bss gs.\n     s =\n     \\<lparr>inst = insts, funcs = fs, tab = tclss, mem = bss,\n        globs = gs\\<rparr> \\<and>\n     \\<S> = \\<S>' \\<and>\n     \\<S>' =\n     \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n        s_globs = tgs\\<rparr> \\<and>\n     list_all2 (inst_typing \\<S>') insts \\<C>s \\<and>\n     list_all2 (cl_typing \\<S>') fs tfs \\<and>\n     list_all (tab_agree \\<S>') (concat tclss) \\<and>\n     list_all2 (\\<lambda>tcls n. n \\<le> length tcls) tclss ns \\<and>\n     list_all2 mem_agree bss ms \\<and> list_all2 glob_agree gs tgs\n\ngoal (1 subgoal):\n 1. (list_all2 (inst_typing \\<S>) insts' \\<C>s &&&\n     list_all2 (cl_typing \\<S>) fs' tfs) &&&\n    list_all (tab_agree \\<S>) (concat clss') &&&\n    list_all2 (\\<lambda>cls n. n \\<le> length cls) clss' ns &&&\n    list_all2 glob_agree gs' tgs", "by auto"], ["proof (state)\nthis:\n  list_all2 (inst_typing \\<S>) insts' \\<C>s\n  list_all2 (cl_typing \\<S>) fs' tfs\n  list_all (tab_agree \\<S>) (concat clss')\n  list_all2 (\\<lambda>cls n. n \\<le> length cls) clss' ns\n  list_all2 glob_agree gs' tgs\n\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "moreover"], ["proof (state)\nthis:\n  list_all2 (inst_typing \\<S>) insts' \\<C>s\n  list_all2 (cl_typing \\<S>) fs' tfs\n  list_all (tab_agree \\<S>) (concat clss')\n  list_all2 (\\<lambda>cls n. n \\<le> length cls) clss' ns\n  list_all2 glob_agree gs' tgs\n\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "have \"list_all2 (\\<lambda> bs m. m \\<le> mem_size bs) bss' ms\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (\\<lambda>bs m. m \\<le> mem_size bs) bss' ms", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. list_all2 (\\<lambda>bs m. m \\<le> mem_size bs) bss' ms", "have \"length bss = length bss'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length bss = length bss'", "using assms(2)  s_S_defs"], ["proof (prove)\nusing this:\n  s' = s\\<lparr>s.mem := (s.mem s)[i := mem']\\<rparr>\n  s =\n  \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n     globs = gs\\<rparr>\n  s' =\n  \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n     globs = gs'\\<rparr>\n  \\<S> =\n  \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n     s_globs = tgs\\<rparr>\n\ngoal (1 subgoal):\n 1. length bss = length bss'", "by (simp)"], ["proof (state)\nthis:\n  length bss = length bss'\n\ngoal (1 subgoal):\n 1. list_all2 (\\<lambda>bs m. m \\<le> mem_size bs) bss' ms", "moreover"], ["proof (state)\nthis:\n  length bss = length bss'\n\ngoal (1 subgoal):\n 1. list_all2 (\\<lambda>bs m. m \\<le> mem_size bs) bss' ms", "(* Memory correct before execution. *)"], ["proof (state)\nthis:\n  length bss = length bss'\n\ngoal (1 subgoal):\n 1. list_all2 (\\<lambda>bs m. m \\<le> mem_size bs) bss' ms", "have initial_mem:\"list_all2 (\\<lambda> bs m. m \\<le> mem_size bs) bss ms\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (\\<lambda>bs m. m \\<le> mem_size bs) bss ms", "using assms(1) s_S_defs"], ["proof (prove)\nusing this:\n  store_typing s \\<S>\n  s =\n  \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n     globs = gs\\<rparr>\n  s' =\n  \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n     globs = gs'\\<rparr>\n  \\<S> =\n  \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n     s_globs = tgs\\<rparr>\n\ngoal (1 subgoal):\n 1. list_all2 (\\<lambda>bs m. m \\<le> mem_size bs) bss ms", "unfolding store_typing.simps mem_agree_def"], ["proof (prove)\nusing this:\n  \\<exists>\\<S>' \\<C>s tfs ns ms tgs insts fs tclss bss gs.\n     s =\n     \\<lparr>inst = insts, funcs = fs, tab = tclss, mem = bss,\n        globs = gs\\<rparr> \\<and>\n     \\<S> = \\<S>' \\<and>\n     \\<S>' =\n     \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n        s_globs = tgs\\<rparr> \\<and>\n     list_all2 (inst_typing \\<S>') insts \\<C>s \\<and>\n     list_all2 (cl_typing \\<S>') fs tfs \\<and>\n     list_all (tab_agree \\<S>') (concat tclss) \\<and>\n     list_all2 (\\<lambda>tcls n. n \\<le> length tcls) tclss ns \\<and>\n     list_all2 (\\<lambda>bs m. m \\<le> mem_size bs) bss ms \\<and>\n     list_all2 glob_agree gs tgs\n  s =\n  \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n     globs = gs\\<rparr>\n  s' =\n  \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n     globs = gs'\\<rparr>\n  \\<S> =\n  \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n     s_globs = tgs\\<rparr>\n\ngoal (1 subgoal):\n 1. list_all2 (\\<lambda>bs m. m \\<le> mem_size bs) bss ms", "by blast"], ["proof (state)\nthis:\n  list_all2 (\\<lambda>bs m. m \\<le> mem_size bs) bss ms\n\ngoal (1 subgoal):\n 1. list_all2 (\\<lambda>bs m. m \\<le> mem_size bs) bss' ms", "have \"\\<And>n. n < length bss \\<Longrightarrow> (\\<lambda> bs m. m \\<le> mem_size bs) (bss'!n) (ms!n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length bss \\<Longrightarrow> ms ! n \\<le> mem_size (bss' ! n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length bss \\<Longrightarrow> ms ! n \\<le> mem_size (bss' ! n)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length bss \\<Longrightarrow> ms ! n \\<le> mem_size (bss' ! n)", "assume local_assms:\"n < length bss\""], ["proof (state)\nthis:\n  n < length bss\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length bss \\<Longrightarrow> ms ! n \\<le> mem_size (bss' ! n)", "obtain \\<C>_m where cmdef:\"\\<C>_m = \\<C>s ! n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<C>_m.\n        \\<C>_m = \\<C>s ! n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<C>_m = \\<C>s ! n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length bss \\<Longrightarrow> ms ! n \\<le> mem_size (bss' ! n)", "hence \"(\\<lambda> bs m. m \\<le> mem_size bs) (bss!n) (ms!n)\""], ["proof (prove)\nusing this:\n  \\<C>_m = \\<C>s ! n\n\ngoal (1 subgoal):\n 1. ms ! n \\<le> mem_size (bss ! n)", "using initial_mem local_assms"], ["proof (prove)\nusing this:\n  \\<C>_m = \\<C>s ! n\n  list_all2 (\\<lambda>bs m. m \\<le> mem_size bs) bss ms\n  n < length bss\n\ngoal (1 subgoal):\n 1. ms ! n \\<le> mem_size (bss ! n)", "unfolding list_all2_conv_all_nth"], ["proof (prove)\nusing this:\n  \\<C>_m = \\<C>s ! n\n  length bss = length ms \\<and>\n  (\\<forall>i<length bss. ms ! i \\<le> mem_size (bss ! i))\n  n < length bss\n\ngoal (1 subgoal):\n 1. ms ! n \\<le> mem_size (bss ! n)", "by simp"], ["proof (state)\nthis:\n  ms ! n \\<le> mem_size (bss ! n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length bss \\<Longrightarrow> ms ! n \\<le> mem_size (bss' ! n)", "thus \"(\\<lambda> bs m. m \\<le> mem_size bs) (bss'!n) (ms!n)\""], ["proof (prove)\nusing this:\n  ms ! n \\<le> mem_size (bss ! n)\n\ngoal (1 subgoal):\n 1. ms ! n \\<le> mem_size (bss' ! n)", "using assms(2,3,4) s_S_defs local_assms"], ["proof (prove)\nusing this:\n  ms ! n \\<le> mem_size (bss ! n)\n  s' = s\\<lparr>s.mem := (s.mem s)[i := mem']\\<rparr>\n  mem_size orig_mem \\<le> mem_size mem'\n  s.mem s ! i = orig_mem\n  s =\n  \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n     globs = gs\\<rparr>\n  s' =\n  \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n     globs = gs'\\<rparr>\n  \\<S> =\n  \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n     s_globs = tgs\\<rparr>\n  n < length bss\n\ngoal (1 subgoal):\n 1. ms ! n \\<le> mem_size (bss' ! n)", "by (cases \"n=i\", auto)"], ["proof (state)\nthis:\n  ms ! n \\<le> mem_size (bss' ! n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?n < length bss \\<Longrightarrow> ms ! ?n \\<le> mem_size (bss' ! ?n)\n\ngoal (1 subgoal):\n 1. list_all2 (\\<lambda>bs m. m \\<le> mem_size bs) bss' ms", "ultimately"], ["proof (chain)\npicking this:\n  length bss = length bss'\n  ?n < length bss \\<Longrightarrow> ms ! ?n \\<le> mem_size (bss' ! ?n)", "show ?thesis"], ["proof (prove)\nusing this:\n  length bss = length bss'\n  ?n < length bss \\<Longrightarrow> ms ! ?n \\<le> mem_size (bss' ! ?n)\n\ngoal (1 subgoal):\n 1. list_all2 (\\<lambda>bs m. m \\<le> mem_size bs) bss' ms", "by (metis initial_mem list_all2_all_nthI list_all2_lengthD)"], ["proof (state)\nthis:\n  list_all2 (\\<lambda>bs m. m \\<le> mem_size bs) bss' ms\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  list_all2 (\\<lambda>bs m. m \\<le> mem_size bs) bss' ms\n\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "ultimately"], ["proof (chain)\npicking this:\n  s =\n  \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n     globs = gs\\<rparr>\n  s' =\n  \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n     globs = gs'\\<rparr>\n  \\<S> =\n  \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n     s_globs = tgs\\<rparr>\n  list_all2 (inst_typing \\<S>) insts' \\<C>s\n  list_all2 (cl_typing \\<S>) fs' tfs\n  list_all (tab_agree \\<S>) (concat clss')\n  list_all2 (\\<lambda>cls n. n \\<le> length cls) clss' ns\n  list_all2 glob_agree gs' tgs\n  list_all2 (\\<lambda>bs m. m \\<le> mem_size bs) bss' ms", "show ?thesis"], ["proof (prove)\nusing this:\n  s =\n  \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n     globs = gs\\<rparr>\n  s' =\n  \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n     globs = gs'\\<rparr>\n  \\<S> =\n  \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n     s_globs = tgs\\<rparr>\n  list_all2 (inst_typing \\<S>) insts' \\<C>s\n  list_all2 (cl_typing \\<S>) fs' tfs\n  list_all (tab_agree \\<S>) (concat clss')\n  list_all2 (\\<lambda>cls n. n \\<le> length cls) clss' ns\n  list_all2 glob_agree gs' tgs\n  list_all2 (\\<lambda>bs m. m \\<le> mem_size bs) bss' ms\n\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "unfolding store_typing.simps mem_agree_def"], ["proof (prove)\nusing this:\n  s =\n  \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n     globs = gs\\<rparr>\n  s' =\n  \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n     globs = gs'\\<rparr>\n  \\<S> =\n  \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n     s_globs = tgs\\<rparr>\n  list_all2 (inst_typing \\<S>) insts' \\<C>s\n  list_all2 (cl_typing \\<S>) fs' tfs\n  list_all (tab_agree \\<S>) (concat clss')\n  list_all2 (\\<lambda>cls n. n \\<le> length cls) clss' ns\n  list_all2 glob_agree gs' tgs\n  list_all2 (\\<lambda>bs m. m \\<le> mem_size bs) bss' ms\n\ngoal (1 subgoal):\n 1. \\<exists>\\<S>' \\<C>s tfs ns ms tgs insts fs tclss bss gs.\n       s' =\n       \\<lparr>inst = insts, funcs = fs, tab = tclss, mem = bss,\n          globs = gs\\<rparr> \\<and>\n       \\<S> = \\<S>' \\<and>\n       \\<S>' =\n       \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n          s_globs = tgs\\<rparr> \\<and>\n       list_all2 (inst_typing \\<S>') insts \\<C>s \\<and>\n       list_all2 (cl_typing \\<S>') fs tfs \\<and>\n       list_all (tab_agree \\<S>') (concat tclss) \\<and>\n       list_all2 (\\<lambda>tcls n. n \\<le> length tcls) tclss ns \\<and>\n       list_all2 (\\<lambda>bs m. m \\<le> mem_size bs) bss ms \\<and>\n       list_all2 glob_agree gs tgs", "by simp"], ["proof (state)\nthis:\n  store_typing s' \\<S>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma types_agree_imp_e_typing:\n  assumes \"types_agree t v\"\n  shows \"\\<S>\\<bullet>\\<C> \\<turnstile> [$C v] : ([] _> [t])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C> \\<turnstile> [$C v] : [] _> [t]", "using assms e_typing_s_typing.intros(1)[OF b_e_typing.intros(1)]"], ["proof (prove)\nusing this:\n  types_agree t v\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> $* [C ?v1] : [] _> [typeof ?v1]\n\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C> \\<turnstile> [$C v] : [] _> [t]", "unfolding types_agree_def"], ["proof (prove)\nusing this:\n  typeof v = t\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> $* [C ?v1] : [] _> [typeof ?v1]\n\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C> \\<turnstile> [$C v] : [] _> [t]", "by fastforce"], ["", "lemma list_types_agree_imp_e_typing:\n  assumes \"list_all2 types_agree ts vs\"\n  shows \"\\<S>\\<bullet>\\<C> \\<turnstile> $$* vs : ([] _> ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C> \\<turnstile> $$* vs : [] _> ts", "using assms"], ["proof (prove)\nusing this:\n  list_all2 types_agree ts vs\n\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C> \\<turnstile> $$* vs : [] _> ts", "proof (induction rule: list_all2_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<S>\\<bullet>\\<C> \\<turnstile> $$* [] : [] _> []\n 2. \\<And>x xs y ys.\n       \\<lbrakk>types_agree x y; list_all2 types_agree xs ys;\n        \\<S>\\<bullet>\\<C> \\<turnstile> $$* ys : [] _> xs\\<rbrakk>\n       \\<Longrightarrow> \\<S>\\<bullet>\\<C> \\<turnstile> $$* y #\n                      ys : [] _> x # xs", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<S>\\<bullet>\\<C> \\<turnstile> $$* [] : [] _> []\n 2. \\<And>x xs y ys.\n       \\<lbrakk>types_agree x y; list_all2 types_agree xs ys;\n        \\<S>\\<bullet>\\<C> \\<turnstile> $$* ys : [] _> xs\\<rbrakk>\n       \\<Longrightarrow> \\<S>\\<bullet>\\<C> \\<turnstile> $$* y #\n                      ys : [] _> x # xs", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C> \\<turnstile> $$* [] : [] _> []", "using b_e_typing.empty e_typing_s_typing.intros(1)"], ["proof (prove)\nusing this:\n  ?\\<C> \\<turnstile> [] : [] _> []\n  ?\\<C> \\<turnstile> ?b_es : ?tf \\<Longrightarrow>\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> $* ?b_es : ?tf\n\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C> \\<turnstile> $$* [] : [] _> []", "by fastforce"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> $$* [] : [] _> []\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>types_agree x y; list_all2 types_agree xs ys;\n        \\<S>\\<bullet>\\<C> \\<turnstile> $$* ys : [] _> xs\\<rbrakk>\n       \\<Longrightarrow> \\<S>\\<bullet>\\<C> \\<turnstile> $$* y #\n                      ys : [] _> x # xs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>types_agree x y; list_all2 types_agree xs ys;\n        \\<S>\\<bullet>\\<C> \\<turnstile> $$* ys : [] _> xs\\<rbrakk>\n       \\<Longrightarrow> \\<S>\\<bullet>\\<C> \\<turnstile> $$* y #\n                      ys : [] _> x # xs", "case (Cons t ts v vs)"], ["proof (state)\nthis:\n  types_agree t v\n  list_all2 types_agree ts vs\n  \\<S>\\<bullet>\\<C> \\<turnstile> $$* vs : [] _> ts\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>types_agree x y; list_all2 types_agree xs ys;\n        \\<S>\\<bullet>\\<C> \\<turnstile> $$* ys : [] _> xs\\<rbrakk>\n       \\<Longrightarrow> \\<S>\\<bullet>\\<C> \\<turnstile> $$* y #\n                      ys : [] _> x # xs", "hence \"\\<S>\\<bullet>\\<C> \\<turnstile> [$C v] : ([] _> [t])\""], ["proof (prove)\nusing this:\n  types_agree t v\n  list_all2 types_agree ts vs\n  \\<S>\\<bullet>\\<C> \\<turnstile> $$* vs : [] _> ts\n\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C> \\<turnstile> [$C v] : [] _> [t]", "using types_agree_imp_e_typing"], ["proof (prove)\nusing this:\n  types_agree t v\n  list_all2 types_agree ts vs\n  \\<S>\\<bullet>\\<C> \\<turnstile> $$* vs : [] _> ts\n  types_agree ?t ?v \\<Longrightarrow>\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> [$C ?v] : [] _> [?t]\n\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C> \\<turnstile> [$C v] : [] _> [t]", "by fastforce"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> [$C v] : [] _> [t]\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>types_agree x y; list_all2 types_agree xs ys;\n        \\<S>\\<bullet>\\<C> \\<turnstile> $$* ys : [] _> xs\\<rbrakk>\n       \\<Longrightarrow> \\<S>\\<bullet>\\<C> \\<turnstile> $$* y #\n                      ys : [] _> x # xs", "thus ?case"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> [$C v] : [] _> [t]\n\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C> \\<turnstile> $$* v # vs : [] _> t # ts", "using e_typing_s_typing.intros(3)[OF Cons(3), of \"[t]\"] e_type_comp_conc"], ["proof (prove)\nusing this:\n  \\<S>\\<bullet>\\<C> \\<turnstile> [$C v] : [] _> [t]\n  \\<S>\\<bullet>\\<C> \\<turnstile> $$* vs : [t] @ [] _> [t] @ ts\n  \\<lbrakk>?\\<S>\\<bullet>?\\<C> \\<turnstile> ?es : ?t1s _> ?t2s;\n   ?\\<S>\\<bullet>?\\<C> \\<turnstile> ?es' : ?t2s _> ?t3s\\<rbrakk>\n  \\<Longrightarrow> ?\\<S>\\<bullet>?\\<C> \\<turnstile> ?es @\n               ?es' : ?t1s _> ?t3s\n\ngoal (1 subgoal):\n 1. \\<S>\\<bullet>\\<C> \\<turnstile> $$* v # vs : [] _> t # ts", "by fastforce"], ["proof (state)\nthis:\n  \\<S>\\<bullet>\\<C> \\<turnstile> $$* v # vs : [] _> t # ts\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma b_e_typing_imp_list_types_agree:\n  assumes \"\\<C> \\<turnstile> (map (\\<lambda>v. C v) vs) : (ts' _> ts'@ts)\"\n  shows \"list_all2 types_agree ts vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 types_agree ts vs", "using assms"], ["proof (prove)\nusing this:\n  \\<C> \\<turnstile> map EConst vs : ts' _> ts' @ ts\n\ngoal (1 subgoal):\n 1. list_all2 types_agree ts vs", "proof (induction \"(map (\\<lambda>v. C v) vs)\" \"(ts' _> ts'@ts)\" arbitrary: ts ts' vs rule: b_e_typing.induct)"], ["proof (state)\ngoal (35 subgoals):\n 1. \\<And>\\<C> v ts vs.\n       \\<lbrakk>[C v] = map EConst vs; [typeof v] = [] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 2. \\<And>t \\<C> uu_ ts vs.\n       \\<lbrakk>is_int_t t; [Unop_i t uu_] = map EConst vs;\n        [t] = [t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 3. \\<And>t \\<C> uv_ ts vs.\n       \\<lbrakk>is_float_t t; [Unop_f t uv_] = map EConst vs;\n        [t] = [t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 4. \\<And>t \\<C> iop ts vs.\n       \\<lbrakk>is_int_t t; [Binop_i t iop] = map EConst vs;\n        [t] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 5. \\<And>t \\<C> uw_ ts vs.\n       \\<lbrakk>is_float_t t; [Binop_f t uw_] = map EConst vs;\n        [t] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 6. \\<And>t \\<C> ux_ ts vs.\n       \\<lbrakk>is_int_t t; [Testop t ux_] = map EConst vs;\n        [T_i32] = [t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 7. \\<And>t \\<C> uy_ ts vs.\n       \\<lbrakk>is_int_t t; [Relop_i t uy_] = map EConst vs;\n        [T_i32] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 8. \\<And>t \\<C> uz_ ts vs.\n       \\<lbrakk>is_float_t t; [Relop_f t uz_] = map EConst vs;\n        [T_i32] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 9. \\<And>t1 t2 sx \\<C> ts vs.\n       \\<lbrakk>t1 \\<noteq> t2;\n        (sx = None) =\n        (is_float_t t1 \\<and> is_float_t t2 \\<or>\n         is_int_t t1 \\<and> is_int_t t2 \\<and> t_length t1 < t_length t2);\n        [Cvtop t1 Convert t2 sx] = map EConst vs; [t1] = [t2] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 10. \\<And>t1 t2 \\<C> ts vs.\n        \\<lbrakk>t1 \\<noteq> t2; t_length t1 = t_length t2;\n         [Cvtop t1 Reinterpret t2 None] = map EConst vs;\n         [t1] = [t2] @ ts\\<rbrakk>\n        \\<Longrightarrow> list_all2 types_agree ts vs\nA total of 35 subgoals...", "case (composition \\<C> es t1s t2s e)"], ["proof (state)\nthis:\n  \\<C> \\<turnstile> es : t1s _> t2s\n  \\<lbrakk>es = map EConst ?vs; t2s = t1s @ ?ts\\<rbrakk>\n  \\<Longrightarrow> list_all2 types_agree ?ts ?vs\n  \\<C> \\<turnstile> [e] : t2s _> t1s @ ts\n  \\<lbrakk>[e] = map EConst ?vs; t1s @ ts = t2s @ ?ts\\<rbrakk>\n  \\<Longrightarrow> list_all2 types_agree ?ts ?vs\n  es @ [e] = map EConst vs\n\ngoal (35 subgoals):\n 1. \\<And>\\<C> v ts vs.\n       \\<lbrakk>[C v] = map EConst vs; [typeof v] = [] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 2. \\<And>t \\<C> uu_ ts vs.\n       \\<lbrakk>is_int_t t; [Unop_i t uu_] = map EConst vs;\n        [t] = [t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 3. \\<And>t \\<C> uv_ ts vs.\n       \\<lbrakk>is_float_t t; [Unop_f t uv_] = map EConst vs;\n        [t] = [t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 4. \\<And>t \\<C> iop ts vs.\n       \\<lbrakk>is_int_t t; [Binop_i t iop] = map EConst vs;\n        [t] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 5. \\<And>t \\<C> uw_ ts vs.\n       \\<lbrakk>is_float_t t; [Binop_f t uw_] = map EConst vs;\n        [t] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 6. \\<And>t \\<C> ux_ ts vs.\n       \\<lbrakk>is_int_t t; [Testop t ux_] = map EConst vs;\n        [T_i32] = [t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 7. \\<And>t \\<C> uy_ ts vs.\n       \\<lbrakk>is_int_t t; [Relop_i t uy_] = map EConst vs;\n        [T_i32] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 8. \\<And>t \\<C> uz_ ts vs.\n       \\<lbrakk>is_float_t t; [Relop_f t uz_] = map EConst vs;\n        [T_i32] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 9. \\<And>t1 t2 sx \\<C> ts vs.\n       \\<lbrakk>t1 \\<noteq> t2;\n        (sx = None) =\n        (is_float_t t1 \\<and> is_float_t t2 \\<or>\n         is_int_t t1 \\<and> is_int_t t2 \\<and> t_length t1 < t_length t2);\n        [Cvtop t1 Convert t2 sx] = map EConst vs; [t1] = [t2] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 10. \\<And>t1 t2 \\<C> ts vs.\n        \\<lbrakk>t1 \\<noteq> t2; t_length t1 = t_length t2;\n         [Cvtop t1 Reinterpret t2 None] = map EConst vs;\n         [t1] = [t2] @ ts\\<rbrakk>\n        \\<Longrightarrow> list_all2 types_agree ts vs\nA total of 35 subgoals...", "obtain vs1 vs2 where es_e_def:\"es = map EConst vs1\" \"[e] = map EConst vs2\" \"vs1@vs2=vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>vs1 vs2.\n        \\<lbrakk>es = map EConst vs1; [e] = map EConst vs2;\n         vs1 @ vs2 = vs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using composition(5)"], ["proof (prove)\nusing this:\n  es @ [e] = map EConst vs\n\ngoal (1 subgoal):\n 1. (\\<And>vs1 vs2.\n        \\<lbrakk>es = map EConst vs1; [e] = map EConst vs2;\n         vs1 @ vs2 = vs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (no_types) last_map list.simps(8,9) map_butlast snoc_eq_iff_butlast)"], ["proof (state)\nthis:\n  es = map EConst vs1\n  [e] = map EConst vs2\n  vs1 @ vs2 = vs\n\ngoal (35 subgoals):\n 1. \\<And>\\<C> v ts vs.\n       \\<lbrakk>[C v] = map EConst vs; [typeof v] = [] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 2. \\<And>t \\<C> uu_ ts vs.\n       \\<lbrakk>is_int_t t; [Unop_i t uu_] = map EConst vs;\n        [t] = [t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 3. \\<And>t \\<C> uv_ ts vs.\n       \\<lbrakk>is_float_t t; [Unop_f t uv_] = map EConst vs;\n        [t] = [t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 4. \\<And>t \\<C> iop ts vs.\n       \\<lbrakk>is_int_t t; [Binop_i t iop] = map EConst vs;\n        [t] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 5. \\<And>t \\<C> uw_ ts vs.\n       \\<lbrakk>is_float_t t; [Binop_f t uw_] = map EConst vs;\n        [t] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 6. \\<And>t \\<C> ux_ ts vs.\n       \\<lbrakk>is_int_t t; [Testop t ux_] = map EConst vs;\n        [T_i32] = [t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 7. \\<And>t \\<C> uy_ ts vs.\n       \\<lbrakk>is_int_t t; [Relop_i t uy_] = map EConst vs;\n        [T_i32] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 8. \\<And>t \\<C> uz_ ts vs.\n       \\<lbrakk>is_float_t t; [Relop_f t uz_] = map EConst vs;\n        [T_i32] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 9. \\<And>t1 t2 sx \\<C> ts vs.\n       \\<lbrakk>t1 \\<noteq> t2;\n        (sx = None) =\n        (is_float_t t1 \\<and> is_float_t t2 \\<or>\n         is_int_t t1 \\<and> is_int_t t2 \\<and> t_length t1 < t_length t2);\n        [Cvtop t1 Convert t2 sx] = map EConst vs; [t1] = [t2] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 10. \\<And>t1 t2 \\<C> ts vs.\n        \\<lbrakk>t1 \\<noteq> t2; t_length t1 = t_length t2;\n         [Cvtop t1 Reinterpret t2 None] = map EConst vs;\n         [t1] = [t2] @ ts\\<rbrakk>\n        \\<Longrightarrow> list_all2 types_agree ts vs\nA total of 35 subgoals...", "have \"const_list ($*es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. const_list ($* es)", "using es_e_def(1) is_const_list1"], ["proof (prove)\nusing this:\n  es = map EConst vs1\n  ?ves = map (Basic \\<circ> EConst) ?vs \\<Longrightarrow> const_list ?ves\n\ngoal (1 subgoal):\n 1. const_list ($* es)", "by auto"], ["proof (state)\nthis:\n  const_list ($* es)\n\ngoal (35 subgoals):\n 1. \\<And>\\<C> v ts vs.\n       \\<lbrakk>[C v] = map EConst vs; [typeof v] = [] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 2. \\<And>t \\<C> uu_ ts vs.\n       \\<lbrakk>is_int_t t; [Unop_i t uu_] = map EConst vs;\n        [t] = [t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 3. \\<And>t \\<C> uv_ ts vs.\n       \\<lbrakk>is_float_t t; [Unop_f t uv_] = map EConst vs;\n        [t] = [t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 4. \\<And>t \\<C> iop ts vs.\n       \\<lbrakk>is_int_t t; [Binop_i t iop] = map EConst vs;\n        [t] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 5. \\<And>t \\<C> uw_ ts vs.\n       \\<lbrakk>is_float_t t; [Binop_f t uw_] = map EConst vs;\n        [t] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 6. \\<And>t \\<C> ux_ ts vs.\n       \\<lbrakk>is_int_t t; [Testop t ux_] = map EConst vs;\n        [T_i32] = [t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 7. \\<And>t \\<C> uy_ ts vs.\n       \\<lbrakk>is_int_t t; [Relop_i t uy_] = map EConst vs;\n        [T_i32] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 8. \\<And>t \\<C> uz_ ts vs.\n       \\<lbrakk>is_float_t t; [Relop_f t uz_] = map EConst vs;\n        [T_i32] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 9. \\<And>t1 t2 sx \\<C> ts vs.\n       \\<lbrakk>t1 \\<noteq> t2;\n        (sx = None) =\n        (is_float_t t1 \\<and> is_float_t t2 \\<or>\n         is_int_t t1 \\<and> is_int_t t2 \\<and> t_length t1 < t_length t2);\n        [Cvtop t1 Convert t2 sx] = map EConst vs; [t1] = [t2] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 10. \\<And>t1 t2 \\<C> ts vs.\n        \\<lbrakk>t1 \\<noteq> t2; t_length t1 = t_length t2;\n         [Cvtop t1 Reinterpret t2 None] = map EConst vs;\n         [t1] = [t2] @ ts\\<rbrakk>\n        \\<Longrightarrow> list_all2 types_agree ts vs\nA total of 35 subgoals...", "then"], ["proof (chain)\npicking this:\n  const_list ($* es)", "obtain tvs1 where \"t2s = t1s@tvs1\""], ["proof (prove)\nusing this:\n  const_list ($* es)\n\ngoal (1 subgoal):\n 1. (\\<And>tvs1.\n        t2s = t1s @ tvs1 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using e_type_const_list e_typing_s_typing.intros(1)[OF composition(1)]"], ["proof (prove)\nusing this:\n  const_list ($* es)\n  \\<lbrakk>const_list ?vs;\n   ?\\<S>\\<bullet>?\\<C> \\<turnstile> ?vs : ?ts _> ?ts'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>tvs.\n                       ?ts' = ?ts @ tvs \\<and>\n                       length ?vs = length tvs \\<and>\n                       ?\\<S>\\<bullet>?\\<C>' \\<turnstile> ?vs : [] _> tvs\n  ?\\<S>\\<bullet>\\<C> \\<turnstile> $* es : t1s _> t2s\n\ngoal (1 subgoal):\n 1. (\\<And>tvs1.\n        t2s = t1s @ tvs1 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  t2s = t1s @ tvs1\n\ngoal (35 subgoals):\n 1. \\<And>\\<C> v ts vs.\n       \\<lbrakk>[C v] = map EConst vs; [typeof v] = [] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 2. \\<And>t \\<C> uu_ ts vs.\n       \\<lbrakk>is_int_t t; [Unop_i t uu_] = map EConst vs;\n        [t] = [t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 3. \\<And>t \\<C> uv_ ts vs.\n       \\<lbrakk>is_float_t t; [Unop_f t uv_] = map EConst vs;\n        [t] = [t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 4. \\<And>t \\<C> iop ts vs.\n       \\<lbrakk>is_int_t t; [Binop_i t iop] = map EConst vs;\n        [t] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 5. \\<And>t \\<C> uw_ ts vs.\n       \\<lbrakk>is_float_t t; [Binop_f t uw_] = map EConst vs;\n        [t] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 6. \\<And>t \\<C> ux_ ts vs.\n       \\<lbrakk>is_int_t t; [Testop t ux_] = map EConst vs;\n        [T_i32] = [t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 7. \\<And>t \\<C> uy_ ts vs.\n       \\<lbrakk>is_int_t t; [Relop_i t uy_] = map EConst vs;\n        [T_i32] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 8. \\<And>t \\<C> uz_ ts vs.\n       \\<lbrakk>is_float_t t; [Relop_f t uz_] = map EConst vs;\n        [T_i32] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 9. \\<And>t1 t2 sx \\<C> ts vs.\n       \\<lbrakk>t1 \\<noteq> t2;\n        (sx = None) =\n        (is_float_t t1 \\<and> is_float_t t2 \\<or>\n         is_int_t t1 \\<and> is_int_t t2 \\<and> t_length t1 < t_length t2);\n        [Cvtop t1 Convert t2 sx] = map EConst vs; [t1] = [t2] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 10. \\<And>t1 t2 \\<C> ts vs.\n        \\<lbrakk>t1 \\<noteq> t2; t_length t1 = t_length t2;\n         [Cvtop t1 Reinterpret t2 None] = map EConst vs;\n         [t1] = [t2] @ ts\\<rbrakk>\n        \\<Longrightarrow> list_all2 types_agree ts vs\nA total of 35 subgoals...", "moreover"], ["proof (state)\nthis:\n  t2s = t1s @ tvs1\n\ngoal (35 subgoals):\n 1. \\<And>\\<C> v ts vs.\n       \\<lbrakk>[C v] = map EConst vs; [typeof v] = [] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 2. \\<And>t \\<C> uu_ ts vs.\n       \\<lbrakk>is_int_t t; [Unop_i t uu_] = map EConst vs;\n        [t] = [t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 3. \\<And>t \\<C> uv_ ts vs.\n       \\<lbrakk>is_float_t t; [Unop_f t uv_] = map EConst vs;\n        [t] = [t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 4. \\<And>t \\<C> iop ts vs.\n       \\<lbrakk>is_int_t t; [Binop_i t iop] = map EConst vs;\n        [t] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 5. \\<And>t \\<C> uw_ ts vs.\n       \\<lbrakk>is_float_t t; [Binop_f t uw_] = map EConst vs;\n        [t] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 6. \\<And>t \\<C> ux_ ts vs.\n       \\<lbrakk>is_int_t t; [Testop t ux_] = map EConst vs;\n        [T_i32] = [t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 7. \\<And>t \\<C> uy_ ts vs.\n       \\<lbrakk>is_int_t t; [Relop_i t uy_] = map EConst vs;\n        [T_i32] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 8. \\<And>t \\<C> uz_ ts vs.\n       \\<lbrakk>is_float_t t; [Relop_f t uz_] = map EConst vs;\n        [T_i32] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 9. \\<And>t1 t2 sx \\<C> ts vs.\n       \\<lbrakk>t1 \\<noteq> t2;\n        (sx = None) =\n        (is_float_t t1 \\<and> is_float_t t2 \\<or>\n         is_int_t t1 \\<and> is_int_t t2 \\<and> t_length t1 < t_length t2);\n        [Cvtop t1 Convert t2 sx] = map EConst vs; [t1] = [t2] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 10. \\<And>t1 t2 \\<C> ts vs.\n        \\<lbrakk>t1 \\<noteq> t2; t_length t1 = t_length t2;\n         [Cvtop t1 Reinterpret t2 None] = map EConst vs;\n         [t1] = [t2] @ ts\\<rbrakk>\n        \\<Longrightarrow> list_all2 types_agree ts vs\nA total of 35 subgoals...", "have \"const_list ($*[e])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. const_list ($* [e])", "using es_e_def(2) is_const_list1"], ["proof (prove)\nusing this:\n  [e] = map EConst vs2\n  ?ves = map (Basic \\<circ> EConst) ?vs \\<Longrightarrow> const_list ?ves\n\ngoal (1 subgoal):\n 1. const_list ($* [e])", "by auto"], ["proof (state)\nthis:\n  const_list ($* [e])\n\ngoal (35 subgoals):\n 1. \\<And>\\<C> v ts vs.\n       \\<lbrakk>[C v] = map EConst vs; [typeof v] = [] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 2. \\<And>t \\<C> uu_ ts vs.\n       \\<lbrakk>is_int_t t; [Unop_i t uu_] = map EConst vs;\n        [t] = [t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 3. \\<And>t \\<C> uv_ ts vs.\n       \\<lbrakk>is_float_t t; [Unop_f t uv_] = map EConst vs;\n        [t] = [t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 4. \\<And>t \\<C> iop ts vs.\n       \\<lbrakk>is_int_t t; [Binop_i t iop] = map EConst vs;\n        [t] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 5. \\<And>t \\<C> uw_ ts vs.\n       \\<lbrakk>is_float_t t; [Binop_f t uw_] = map EConst vs;\n        [t] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 6. \\<And>t \\<C> ux_ ts vs.\n       \\<lbrakk>is_int_t t; [Testop t ux_] = map EConst vs;\n        [T_i32] = [t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 7. \\<And>t \\<C> uy_ ts vs.\n       \\<lbrakk>is_int_t t; [Relop_i t uy_] = map EConst vs;\n        [T_i32] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 8. \\<And>t \\<C> uz_ ts vs.\n       \\<lbrakk>is_float_t t; [Relop_f t uz_] = map EConst vs;\n        [T_i32] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 9. \\<And>t1 t2 sx \\<C> ts vs.\n       \\<lbrakk>t1 \\<noteq> t2;\n        (sx = None) =\n        (is_float_t t1 \\<and> is_float_t t2 \\<or>\n         is_int_t t1 \\<and> is_int_t t2 \\<and> t_length t1 < t_length t2);\n        [Cvtop t1 Convert t2 sx] = map EConst vs; [t1] = [t2] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 10. \\<And>t1 t2 \\<C> ts vs.\n        \\<lbrakk>t1 \\<noteq> t2; t_length t1 = t_length t2;\n         [Cvtop t1 Reinterpret t2 None] = map EConst vs;\n         [t1] = [t2] @ ts\\<rbrakk>\n        \\<Longrightarrow> list_all2 types_agree ts vs\nA total of 35 subgoals...", "then"], ["proof (chain)\npicking this:\n  const_list ($* [e])", "obtain tvs2 where \"t1s @ ts = t2s @ tvs2\""], ["proof (prove)\nusing this:\n  const_list ($* [e])\n\ngoal (1 subgoal):\n 1. (\\<And>tvs2.\n        t1s @ ts = t2s @ tvs2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using e_type_const_list e_typing_s_typing.intros(1)[OF composition(3)]"], ["proof (prove)\nusing this:\n  const_list ($* [e])\n  \\<lbrakk>const_list ?vs;\n   ?\\<S>\\<bullet>?\\<C> \\<turnstile> ?vs : ?ts _> ?ts'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>tvs.\n                       ?ts' = ?ts @ tvs \\<and>\n                       length ?vs = length tvs \\<and>\n                       ?\\<S>\\<bullet>?\\<C>' \\<turnstile> ?vs : [] _> tvs\n  ?\\<S>\\<bullet>\\<C> \\<turnstile> $* [e] : t2s _> t1s @ ts\n\ngoal (1 subgoal):\n 1. (\\<And>tvs2.\n        t1s @ ts = t2s @ tvs2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  t1s @ ts = t2s @ tvs2\n\ngoal (35 subgoals):\n 1. \\<And>\\<C> v ts vs.\n       \\<lbrakk>[C v] = map EConst vs; [typeof v] = [] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 2. \\<And>t \\<C> uu_ ts vs.\n       \\<lbrakk>is_int_t t; [Unop_i t uu_] = map EConst vs;\n        [t] = [t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 3. \\<And>t \\<C> uv_ ts vs.\n       \\<lbrakk>is_float_t t; [Unop_f t uv_] = map EConst vs;\n        [t] = [t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 4. \\<And>t \\<C> iop ts vs.\n       \\<lbrakk>is_int_t t; [Binop_i t iop] = map EConst vs;\n        [t] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 5. \\<And>t \\<C> uw_ ts vs.\n       \\<lbrakk>is_float_t t; [Binop_f t uw_] = map EConst vs;\n        [t] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 6. \\<And>t \\<C> ux_ ts vs.\n       \\<lbrakk>is_int_t t; [Testop t ux_] = map EConst vs;\n        [T_i32] = [t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 7. \\<And>t \\<C> uy_ ts vs.\n       \\<lbrakk>is_int_t t; [Relop_i t uy_] = map EConst vs;\n        [T_i32] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 8. \\<And>t \\<C> uz_ ts vs.\n       \\<lbrakk>is_float_t t; [Relop_f t uz_] = map EConst vs;\n        [T_i32] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 9. \\<And>t1 t2 sx \\<C> ts vs.\n       \\<lbrakk>t1 \\<noteq> t2;\n        (sx = None) =\n        (is_float_t t1 \\<and> is_float_t t2 \\<or>\n         is_int_t t1 \\<and> is_int_t t2 \\<and> t_length t1 < t_length t2);\n        [Cvtop t1 Convert t2 sx] = map EConst vs; [t1] = [t2] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 10. \\<And>t1 t2 \\<C> ts vs.\n        \\<lbrakk>t1 \\<noteq> t2; t_length t1 = t_length t2;\n         [Cvtop t1 Reinterpret t2 None] = map EConst vs;\n         [t1] = [t2] @ ts\\<rbrakk>\n        \\<Longrightarrow> list_all2 types_agree ts vs\nA total of 35 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  t2s = t1s @ tvs1\n  t1s @ ts = t2s @ tvs2", "show ?case"], ["proof (prove)\nusing this:\n  t2s = t1s @ tvs1\n  t1s @ ts = t2s @ tvs2\n\ngoal (1 subgoal):\n 1. list_all2 types_agree ts vs", "using composition(2,4,5) es_e_def"], ["proof (prove)\nusing this:\n  t2s = t1s @ tvs1\n  t1s @ ts = t2s @ tvs2\n  \\<lbrakk>es = map EConst ?vs; t2s = t1s @ ?ts\\<rbrakk>\n  \\<Longrightarrow> list_all2 types_agree ?ts ?vs\n  \\<lbrakk>[e] = map EConst ?vs; t1s @ ts = t2s @ ?ts\\<rbrakk>\n  \\<Longrightarrow> list_all2 types_agree ?ts ?vs\n  es @ [e] = map EConst vs\n  es = map EConst vs1\n  [e] = map EConst vs2\n  vs1 @ vs2 = vs\n\ngoal (1 subgoal):\n 1. list_all2 types_agree ts vs", "by (auto simp add: list_all2_appendI)"], ["proof (state)\nthis:\n  list_all2 types_agree ts vs\n\ngoal (34 subgoals):\n 1. \\<And>\\<C> v ts vs.\n       \\<lbrakk>[C v] = map EConst vs; [typeof v] = [] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 2. \\<And>t \\<C> uu_ ts vs.\n       \\<lbrakk>is_int_t t; [Unop_i t uu_] = map EConst vs;\n        [t] = [t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 3. \\<And>t \\<C> uv_ ts vs.\n       \\<lbrakk>is_float_t t; [Unop_f t uv_] = map EConst vs;\n        [t] = [t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 4. \\<And>t \\<C> iop ts vs.\n       \\<lbrakk>is_int_t t; [Binop_i t iop] = map EConst vs;\n        [t] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 5. \\<And>t \\<C> uw_ ts vs.\n       \\<lbrakk>is_float_t t; [Binop_f t uw_] = map EConst vs;\n        [t] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 6. \\<And>t \\<C> ux_ ts vs.\n       \\<lbrakk>is_int_t t; [Testop t ux_] = map EConst vs;\n        [T_i32] = [t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 7. \\<And>t \\<C> uy_ ts vs.\n       \\<lbrakk>is_int_t t; [Relop_i t uy_] = map EConst vs;\n        [T_i32] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 8. \\<And>t \\<C> uz_ ts vs.\n       \\<lbrakk>is_float_t t; [Relop_f t uz_] = map EConst vs;\n        [T_i32] = [t, t] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 9. \\<And>t1 t2 sx \\<C> ts vs.\n       \\<lbrakk>t1 \\<noteq> t2;\n        (sx = None) =\n        (is_float_t t1 \\<and> is_float_t t2 \\<or>\n         is_int_t t1 \\<and> is_int_t t2 \\<and> t_length t1 < t_length t2);\n        [Cvtop t1 Convert t2 sx] = map EConst vs; [t1] = [t2] @ ts\\<rbrakk>\n       \\<Longrightarrow> list_all2 types_agree ts vs\n 10. \\<And>t1 t2 \\<C> ts vs.\n        \\<lbrakk>t1 \\<noteq> t2; t_length t1 = t_length t2;\n         [Cvtop t1 Reinterpret t2 None] = map EConst vs;\n         [t1] = [t2] @ ts\\<rbrakk>\n        \\<Longrightarrow> list_all2 types_agree ts vs\nA total of 34 subgoals...", "qed (auto simp add: types_agree_def)"], ["", "lemma e_typing_imp_list_types_agree:\n  assumes \"\\<S>\\<bullet>\\<C> \\<turnstile> ($$* vs) : (ts' _> ts'@ts)\"\n  shows \"list_all2 types_agree ts vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 types_agree ts vs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. list_all2 types_agree ts vs", "have \"($$* vs) = $* (map (\\<lambda>v. C v) vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. $$* vs = $* map EConst vs", "by simp"], ["proof (state)\nthis:\n  $$* vs = $* map EConst vs\n\ngoal (1 subgoal):\n 1. list_all2 types_agree ts vs", "thus ?thesis"], ["proof (prove)\nusing this:\n  $$* vs = $* map EConst vs\n\ngoal (1 subgoal):\n 1. list_all2 types_agree ts vs", "using assms unlift_b_e b_e_typing_imp_list_types_agree"], ["proof (prove)\nusing this:\n  $$* vs = $* map EConst vs\n  \\<S>\\<bullet>\\<C> \\<turnstile> $$* vs : ts' _> ts' @ ts\n  ?\\<S>\\<bullet>?\\<C> \\<turnstile> $* ?b_es : ?tf \\<Longrightarrow>\n  ?\\<C> \\<turnstile> ?b_es : ?tf\n  ?\\<C> \\<turnstile> map EConst ?vs : ?ts' _> ?ts' @ ?ts \\<Longrightarrow>\n  list_all2 types_agree ?ts ?vs\n\ngoal (1 subgoal):\n 1. list_all2 types_agree ts vs", "by (fastforce simp del: map_map)"], ["proof (state)\nthis:\n  list_all2 types_agree ts vs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma store_extension_imp_store_typing:\n  assumes \"store_extension s s'\"\n          \"store_typing s \\<S>\"\n  shows \"store_typing s' \\<S>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "obtain insts fs clss bss gs where \"s = \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss, globs = gs\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>insts fs clss bss gs.\n        s =\n        \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n           globs = gs\\<rparr> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using s.cases"], ["proof (prove)\nusing this:\n  (\\<And>inst funcs tab mem globs.\n      ?r =\n      \\<lparr>inst = inst, funcs = funcs, tab = tab, mem = mem,\n         globs = globs\\<rparr> \\<Longrightarrow>\n      ?C) \\<Longrightarrow>\n  ?C\n\ngoal (1 subgoal):\n 1. (\\<And>insts fs clss bss gs.\n        s =\n        \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n           globs = gs\\<rparr> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s =\n  \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n     globs = gs\\<rparr>\n\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "moreover"], ["proof (state)\nthis:\n  s =\n  \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n     globs = gs\\<rparr>\n\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "obtain insts' fs' clss' bss' gs' where \"s' = \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss', globs = gs'\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>insts' fs' clss' bss' gs'.\n        s' =\n        \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n           globs = gs'\\<rparr> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using s.cases"], ["proof (prove)\nusing this:\n  (\\<And>inst funcs tab mem globs.\n      ?r =\n      \\<lparr>inst = inst, funcs = funcs, tab = tab, mem = mem,\n         globs = globs\\<rparr> \\<Longrightarrow>\n      ?C) \\<Longrightarrow>\n  ?C\n\ngoal (1 subgoal):\n 1. (\\<And>insts' fs' clss' bss' gs'.\n        s' =\n        \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n           globs = gs'\\<rparr> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s' =\n  \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n     globs = gs'\\<rparr>\n\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "moreover"], ["proof (state)\nthis:\n  s' =\n  \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n     globs = gs'\\<rparr>\n\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "obtain \\<C>s tfs ns ms tgs where \"\\<S> = \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms, s_globs = tgs\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<C>s tfs ns ms tgs.\n        \\<S> =\n        \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n           s_globs = tgs\\<rparr> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using s_context.cases"], ["proof (prove)\nusing this:\n  (\\<And>s_inst s_funcs s_tab s_mem s_globs.\n      ?r =\n      \\<lparr>s_inst = s_inst, s_funcs = s_funcs, s_tab = s_tab,\n         s_mem = s_mem, s_globs = s_globs\\<rparr> \\<Longrightarrow>\n      ?C) \\<Longrightarrow>\n  ?C\n\ngoal (1 subgoal):\n 1. (\\<And>\\<C>s tfs ns ms tgs.\n        \\<S> =\n        \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n           s_globs = tgs\\<rparr> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<S> =\n  \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n     s_globs = tgs\\<rparr>\n\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "moreover"], ["proof (state)\nthis:\n  \\<S> =\n  \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n     s_globs = tgs\\<rparr>\n\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "note s_S_defs = calculation"], ["proof (state)\nthis:\n  s =\n  \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n     globs = gs\\<rparr>\n  s' =\n  \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n     globs = gs'\\<rparr>\n  \\<S> =\n  \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n     s_globs = tgs\\<rparr>\n\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "hence\n  \"insts = insts'\"\n  \"fs = fs'\"\n  \"clss = clss'\"\n  \"gs = gs'\""], ["proof (prove)\nusing this:\n  s =\n  \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n     globs = gs\\<rparr>\n  s' =\n  \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n     globs = gs'\\<rparr>\n  \\<S> =\n  \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n     s_globs = tgs\\<rparr>\n\ngoal (1 subgoal):\n 1. (insts = insts' &&& fs = fs') &&& clss = clss' &&& gs = gs'", "using assms(1)"], ["proof (prove)\nusing this:\n  s =\n  \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n     globs = gs\\<rparr>\n  s' =\n  \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n     globs = gs'\\<rparr>\n  \\<S> =\n  \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n     s_globs = tgs\\<rparr>\n  store_extension s s'\n\ngoal (1 subgoal):\n 1. (insts = insts' &&& fs = fs') &&& clss = clss' &&& gs = gs'", "unfolding store_extension.simps"], ["proof (prove)\nusing this:\n  s =\n  \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n     globs = gs\\<rparr>\n  s' =\n  \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n     globs = gs'\\<rparr>\n  \\<S> =\n  \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n     s_globs = tgs\\<rparr>\n  \\<exists>insts insts' fs fs' tclss tclss' bss bss' gs gs'.\n     s =\n     \\<lparr>inst = insts, funcs = fs, tab = tclss, mem = bss,\n        globs = gs\\<rparr> \\<and>\n     s' =\n     \\<lparr>inst = insts', funcs = fs', tab = tclss', mem = bss',\n        globs = gs'\\<rparr> \\<and>\n     insts = insts' \\<and>\n     fs = fs' \\<and>\n     tclss = tclss' \\<and>\n     list_all2 (\\<lambda>bs bs'. mem_size bs \\<le> mem_size bs') bss\n      bss' \\<and>\n     gs = gs'\n\ngoal (1 subgoal):\n 1. (insts = insts' &&& fs = fs') &&& clss = clss' &&& gs = gs'", "by simp_all"], ["proof (state)\nthis:\n  insts = insts'\n  fs = fs'\n  clss = clss'\n  gs = gs'\n\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "hence\n  \"list_all2 (inst_typing \\<S>) insts' \\<C>s\"\n  \"list_all2 (cl_typing \\<S>) fs' tfs\"\n  \"list_all (tab_agree \\<S>) (concat clss')\"\n  \"list_all2 (\\<lambda>cls n. n \\<le> length cls) clss' ns\"\n  \"list_all2 glob_agree gs' tgs\""], ["proof (prove)\nusing this:\n  insts = insts'\n  fs = fs'\n  clss = clss'\n  gs = gs'\n\ngoal (1 subgoal):\n 1. (list_all2 (inst_typing \\<S>) insts' \\<C>s &&&\n     list_all2 (cl_typing \\<S>) fs' tfs) &&&\n    list_all (tab_agree \\<S>) (concat clss') &&&\n    list_all2 (\\<lambda>cls n. n \\<le> length cls) clss' ns &&&\n    list_all2 glob_agree gs' tgs", "using s_S_defs assms(2)"], ["proof (prove)\nusing this:\n  insts = insts'\n  fs = fs'\n  clss = clss'\n  gs = gs'\n  s =\n  \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n     globs = gs\\<rparr>\n  s' =\n  \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n     globs = gs'\\<rparr>\n  \\<S> =\n  \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n     s_globs = tgs\\<rparr>\n  store_typing s \\<S>\n\ngoal (1 subgoal):\n 1. (list_all2 (inst_typing \\<S>) insts' \\<C>s &&&\n     list_all2 (cl_typing \\<S>) fs' tfs) &&&\n    list_all (tab_agree \\<S>) (concat clss') &&&\n    list_all2 (\\<lambda>cls n. n \\<le> length cls) clss' ns &&&\n    list_all2 glob_agree gs' tgs", "unfolding store_typing.simps"], ["proof (prove)\nusing this:\n  insts = insts'\n  fs = fs'\n  clss = clss'\n  gs = gs'\n  s =\n  \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n     globs = gs\\<rparr>\n  s' =\n  \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n     globs = gs'\\<rparr>\n  \\<S> =\n  \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n     s_globs = tgs\\<rparr>\n  \\<exists>\\<S>' \\<C>s tfs ns ms tgs insts fs tclss bss gs.\n     s =\n     \\<lparr>inst = insts, funcs = fs, tab = tclss, mem = bss,\n        globs = gs\\<rparr> \\<and>\n     \\<S> = \\<S>' \\<and>\n     \\<S>' =\n     \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n        s_globs = tgs\\<rparr> \\<and>\n     list_all2 (inst_typing \\<S>') insts \\<C>s \\<and>\n     list_all2 (cl_typing \\<S>') fs tfs \\<and>\n     list_all (tab_agree \\<S>') (concat tclss) \\<and>\n     list_all2 (\\<lambda>tcls n. n \\<le> length tcls) tclss ns \\<and>\n     list_all2 mem_agree bss ms \\<and> list_all2 glob_agree gs tgs\n\ngoal (1 subgoal):\n 1. (list_all2 (inst_typing \\<S>) insts' \\<C>s &&&\n     list_all2 (cl_typing \\<S>) fs' tfs) &&&\n    list_all (tab_agree \\<S>) (concat clss') &&&\n    list_all2 (\\<lambda>cls n. n \\<le> length cls) clss' ns &&&\n    list_all2 glob_agree gs' tgs", "by auto"], ["proof (state)\nthis:\n  list_all2 (inst_typing \\<S>) insts' \\<C>s\n  list_all2 (cl_typing \\<S>) fs' tfs\n  list_all (tab_agree \\<S>) (concat clss')\n  list_all2 (\\<lambda>cls n. n \\<le> length cls) clss' ns\n  list_all2 glob_agree gs' tgs\n\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "moreover"], ["proof (state)\nthis:\n  list_all2 (inst_typing \\<S>) insts' \\<C>s\n  list_all2 (cl_typing \\<S>) fs' tfs\n  list_all (tab_agree \\<S>) (concat clss')\n  list_all2 (\\<lambda>cls n. n \\<le> length cls) clss' ns\n  list_all2 glob_agree gs' tgs\n\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "have \"list_all2 (\\<lambda> bs m. m \\<le> mem_size bs) bss ms\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (\\<lambda>bs m. m \\<le> mem_size bs) bss ms", "using s_S_defs(1,3) assms(2)"], ["proof (prove)\nusing this:\n  s =\n  \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n     globs = gs\\<rparr>\n  \\<S> =\n  \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n     s_globs = tgs\\<rparr>\n  store_typing s \\<S>\n\ngoal (1 subgoal):\n 1. list_all2 (\\<lambda>bs m. m \\<le> mem_size bs) bss ms", "unfolding store_typing.simps mem_agree_def"], ["proof (prove)\nusing this:\n  s =\n  \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n     globs = gs\\<rparr>\n  \\<S> =\n  \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n     s_globs = tgs\\<rparr>\n  \\<exists>\\<S>' \\<C>s tfs ns ms tgs insts fs tclss bss gs.\n     s =\n     \\<lparr>inst = insts, funcs = fs, tab = tclss, mem = bss,\n        globs = gs\\<rparr> \\<and>\n     \\<S> = \\<S>' \\<and>\n     \\<S>' =\n     \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n        s_globs = tgs\\<rparr> \\<and>\n     list_all2 (inst_typing \\<S>') insts \\<C>s \\<and>\n     list_all2 (cl_typing \\<S>') fs tfs \\<and>\n     list_all (tab_agree \\<S>') (concat tclss) \\<and>\n     list_all2 (\\<lambda>tcls n. n \\<le> length tcls) tclss ns \\<and>\n     list_all2 (\\<lambda>bs m. m \\<le> mem_size bs) bss ms \\<and>\n     list_all2 glob_agree gs tgs\n\ngoal (1 subgoal):\n 1. list_all2 (\\<lambda>bs m. m \\<le> mem_size bs) bss ms", "by simp"], ["proof (state)\nthis:\n  list_all2 (\\<lambda>bs m. m \\<le> mem_size bs) bss ms\n\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "hence \"list_all2 mem_agree bss' ms\""], ["proof (prove)\nusing this:\n  list_all2 (\\<lambda>bs m. m \\<le> mem_size bs) bss ms\n\ngoal (1 subgoal):\n 1. list_all2 mem_agree bss' ms", "using assms(1) s_S_defs(1,2)"], ["proof (prove)\nusing this:\n  list_all2 (\\<lambda>bs m. m \\<le> mem_size bs) bss ms\n  store_extension s s'\n  s =\n  \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n     globs = gs\\<rparr>\n  s' =\n  \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n     globs = gs'\\<rparr>\n\ngoal (1 subgoal):\n 1. list_all2 mem_agree bss' ms", "unfolding store_extension.simps list_all2_conv_all_nth mem_agree_def"], ["proof (prove)\nusing this:\n  length bss = length ms \\<and>\n  (\\<forall>i<length bss. ms ! i \\<le> mem_size (bss ! i))\n  \\<exists>insts insts' fs fs' tclss tclss' bss bss' gs gs'.\n     s =\n     \\<lparr>inst = insts, funcs = fs, tab = tclss, mem = bss,\n        globs = gs\\<rparr> \\<and>\n     s' =\n     \\<lparr>inst = insts', funcs = fs', tab = tclss', mem = bss',\n        globs = gs'\\<rparr> \\<and>\n     insts = insts' \\<and>\n     fs = fs' \\<and>\n     tclss = tclss' \\<and>\n     (length bss = length bss' \\<and>\n      (\\<forall>i<length bss.\n          mem_size (bss ! i) \\<le> mem_size (bss' ! i))) \\<and>\n     gs = gs'\n  s =\n  \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n     globs = gs\\<rparr>\n  s' =\n  \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n     globs = gs'\\<rparr>\n\ngoal (1 subgoal):\n 1. length bss' = length ms \\<and>\n    (\\<forall>i<length bss'. ms ! i \\<le> mem_size (bss' ! i))", "by fastforce"], ["proof (state)\nthis:\n  list_all2 mem_agree bss' ms\n\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "ultimately"], ["proof (chain)\npicking this:\n  s =\n  \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n     globs = gs\\<rparr>\n  s' =\n  \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n     globs = gs'\\<rparr>\n  \\<S> =\n  \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n     s_globs = tgs\\<rparr>\n  list_all2 (inst_typing \\<S>) insts' \\<C>s\n  list_all2 (cl_typing \\<S>) fs' tfs\n  list_all (tab_agree \\<S>) (concat clss')\n  list_all2 (\\<lambda>cls n. n \\<le> length cls) clss' ns\n  list_all2 glob_agree gs' tgs\n  list_all2 mem_agree bss' ms", "show ?thesis"], ["proof (prove)\nusing this:\n  s =\n  \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n     globs = gs\\<rparr>\n  s' =\n  \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n     globs = gs'\\<rparr>\n  \\<S> =\n  \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n     s_globs = tgs\\<rparr>\n  list_all2 (inst_typing \\<S>) insts' \\<C>s\n  list_all2 (cl_typing \\<S>) fs' tfs\n  list_all (tab_agree \\<S>) (concat clss')\n  list_all2 (\\<lambda>cls n. n \\<le> length cls) clss' ns\n  list_all2 glob_agree gs' tgs\n  list_all2 mem_agree bss' ms\n\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "using store_typing.intros"], ["proof (prove)\nusing this:\n  s =\n  \\<lparr>inst = insts, funcs = fs, tab = clss, mem = bss,\n     globs = gs\\<rparr>\n  s' =\n  \\<lparr>inst = insts', funcs = fs', tab = clss', mem = bss',\n     globs = gs'\\<rparr>\n  \\<S> =\n  \\<lparr>s_inst = \\<C>s, s_funcs = tfs, s_tab = ns, s_mem = ms,\n     s_globs = tgs\\<rparr>\n  list_all2 (inst_typing \\<S>) insts' \\<C>s\n  list_all2 (cl_typing \\<S>) fs' tfs\n  list_all (tab_agree \\<S>) (concat clss')\n  list_all2 (\\<lambda>cls n. n \\<le> length cls) clss' ns\n  list_all2 glob_agree gs' tgs\n  list_all2 mem_agree bss' ms\n  \\<lbrakk>?\\<S> =\n           \\<lparr>s_inst = ?\\<C>s, s_funcs = ?tfs, s_tab = ?ns,\n              s_mem = ?ms, s_globs = ?tgs\\<rparr>;\n   list_all2 (inst_typing ?\\<S>) ?insts ?\\<C>s;\n   list_all2 (cl_typing ?\\<S>) ?fs ?tfs;\n   list_all (tab_agree ?\\<S>) (concat ?tclss);\n   list_all2 (\\<lambda>tcls n. n \\<le> length tcls) ?tclss ?ns;\n   list_all2 mem_agree ?bss ?ms; list_all2 glob_agree ?gs ?tgs\\<rbrakk>\n  \\<Longrightarrow> store_typing\n                     \\<lparr>inst = ?insts, funcs = ?fs, tab = ?tclss,\n                        mem = ?bss, globs = ?gs\\<rparr>\n                     ?\\<S>\n\ngoal (1 subgoal):\n 1. store_typing s' \\<S>", "by fastforce"], ["proof (state)\nthis:\n  store_typing s' \\<S>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lfilled_deterministic:\n  assumes \"Lfilled k lfilled es les\"\n          \"Lfilled k lfilled es les'\"\n  shows \"les = les'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. les = les'", "using assms"], ["proof (prove)\nusing this:\n  Lfilled k lfilled es les\n  Lfilled k lfilled es les'\n\ngoal (1 subgoal):\n 1. les = les'", "proof (induction arbitrary: les' rule: Lfilled.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>vs lholed es' es les'.\n       \\<lbrakk>const_list vs; lholed = LBase vs es';\n        Lfilled 0 lholed es les'\\<rbrakk>\n       \\<Longrightarrow> vs @ es @ es' = les'\n 2. \\<And>vs lholed n es' l es'' k es lfilledk les'.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        \\<And>les'. Lfilled k l es les' \\<Longrightarrow> lfilledk = les';\n        Lfilled (k + 1) lholed es les'\\<rbrakk>\n       \\<Longrightarrow> vs @ [Label n es' lfilledk] @ es'' = les'", "case (L0 vs lholed es' es)"], ["proof (state)\nthis:\n  const_list vs\n  lholed = LBase vs es'\n  Lfilled 0 lholed es les'\n\ngoal (2 subgoals):\n 1. \\<And>vs lholed es' es les'.\n       \\<lbrakk>const_list vs; lholed = LBase vs es';\n        Lfilled 0 lholed es les'\\<rbrakk>\n       \\<Longrightarrow> vs @ es @ es' = les'\n 2. \\<And>vs lholed n es' l es'' k es lfilledk les'.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        \\<And>les'. Lfilled k l es les' \\<Longrightarrow> lfilledk = les';\n        Lfilled (k + 1) lholed es les'\\<rbrakk>\n       \\<Longrightarrow> vs @ [Label n es' lfilledk] @ es'' = les'", "thus ?case"], ["proof (prove)\nusing this:\n  const_list vs\n  lholed = LBase vs es'\n  Lfilled 0 lholed es les'\n\ngoal (1 subgoal):\n 1. vs @ es @ es' = les'", "by (fastforce simp add: Lfilled.simps[of 0])"], ["proof (state)\nthis:\n  vs @ es @ es' = les'\n\ngoal (1 subgoal):\n 1. \\<And>vs lholed n es' l es'' k es lfilledk les'.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        \\<And>les'. Lfilled k l es les' \\<Longrightarrow> lfilledk = les';\n        Lfilled (k + 1) lholed es les'\\<rbrakk>\n       \\<Longrightarrow> vs @ [Label n es' lfilledk] @ es'' = les'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>vs lholed n es' l es'' k es lfilledk les'.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        \\<And>les'. Lfilled k l es les' \\<Longrightarrow> lfilledk = les';\n        Lfilled (k + 1) lholed es les'\\<rbrakk>\n       \\<Longrightarrow> vs @ [Label n es' lfilledk] @ es'' = les'", "case (LN vs lholed n es' l es'' k es lfilledk)"], ["proof (state)\nthis:\n  const_list vs\n  lholed = LRec vs n es' l es''\n  Lfilled k l es lfilledk\n  Lfilled k l es ?les' \\<Longrightarrow> lfilledk = ?les'\n  Lfilled (k + 1) lholed es les'\n\ngoal (1 subgoal):\n 1. \\<And>vs lholed n es' l es'' k es lfilledk les'.\n       \\<lbrakk>const_list vs; lholed = LRec vs n es' l es'';\n        Lfilled k l es lfilledk;\n        \\<And>les'. Lfilled k l es les' \\<Longrightarrow> lfilledk = les';\n        Lfilled (k + 1) lholed es les'\\<rbrakk>\n       \\<Longrightarrow> vs @ [Label n es' lfilledk] @ es'' = les'", "thus ?case"], ["proof (prove)\nusing this:\n  const_list vs\n  lholed = LRec vs n es' l es''\n  Lfilled k l es lfilledk\n  Lfilled k l es ?les' \\<Longrightarrow> lfilledk = ?les'\n  Lfilled (k + 1) lholed es les'\n\ngoal (1 subgoal):\n 1. vs @ [Label n es' lfilledk] @ es'' = les'", "unfolding Lfilled.simps[of \"(k + 1)\"]"], ["proof (prove)\nusing this:\n  const_list vs\n  lholed = LRec vs n es' l es''\n  Lfilled k l es lfilledk\n  Lfilled k l es ?les' \\<Longrightarrow> lfilledk = ?les'\n  (\\<exists>vs lholeda es' es.\n      k + 1 = 0 \\<and>\n      lholed = lholeda \\<and>\n      es = es \\<and>\n      les' = vs @ es @ es' \\<and>\n      const_list vs \\<and> lholeda = LBase vs es') \\<or>\n  (\\<exists>vs lholeda n es' l es'' k es lfilledk.\n      k + 1 = k + 1 \\<and>\n      lholed = lholeda \\<and>\n      es = es \\<and>\n      les' = vs @ [Label n es' lfilledk] @ es'' \\<and>\n      const_list vs \\<and>\n      lholeda = LRec vs n es' l es'' \\<and> Lfilled k l es lfilledk)\n\ngoal (1 subgoal):\n 1. vs @ [Label n es' lfilledk] @ es'' = les'", "by fastforce"], ["proof (state)\nthis:\n  vs @ [Label n es' lfilledk] @ es'' = les'\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}