{"file_name": "/home/qj213/afp-2021-10-22/thys/WebAssembly/Wasm_Checker.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/WebAssembly", "problem_names": ["lemma same_lab_h_conv_list_all:\n  assumes \"same_lab_h ils ls ts' = Some ts\"\n  shows \"list_all (\\<lambda>i. i < length ls \\<and> ls!i = ts) ils \\<and> ts' = ts\"", "lemma same_lab_conv_list_all:\n  assumes \"same_lab ils ls = Some ts\"\n  shows \"list_all (\\<lambda>i. i < length ls \\<and> ls!i = ts) ils\"", "lemma list_all_conv_same_lab_h:\n  assumes \"list_all (\\<lambda>i. i < length ls \\<and> ls!i = ts) ils\"\n  shows \"same_lab_h ils ls ts = Some ts\"", "lemma list_all_conv_same_lab:\n  assumes \"list_all (\\<lambda>i. i < length ls \\<and>ls!i = ts) (is@[i])\"\n  shows \"same_lab (is@[i]) ls = Some ts\""], "translations": [["", "lemma same_lab_h_conv_list_all:\n  assumes \"same_lab_h ils ls ts' = Some ts\"\n  shows \"list_all (\\<lambda>i. i < length ls \\<and> ls!i = ts) ils \\<and> ts' = ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts) ils \\<and>\n    ts' = ts", "using assms"], ["proof (prove)\nusing this:\n  same_lab_h ils ls ts' = Some ts\n\ngoal (1 subgoal):\n 1. list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts) ils \\<and>\n    ts' = ts", "proof(induction ils)"], ["proof (state)\ngoal (2 subgoals):\n 1. same_lab_h [] ls ts' = Some ts \\<Longrightarrow>\n    list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts) [] \\<and>\n    ts' = ts\n 2. \\<And>a ils.\n       \\<lbrakk>same_lab_h ils ls ts' = Some ts \\<Longrightarrow>\n                list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts)\n                 ils \\<and>\n                ts' = ts;\n        same_lab_h (a # ils) ls ts' = Some ts\\<rbrakk>\n       \\<Longrightarrow> list_all\n                          (\\<lambda>i. i < length ls \\<and> ls ! i = ts)\n                          (a # ils) \\<and>\n                         ts' = ts", "case (Cons a ils)"], ["proof (state)\nthis:\n  same_lab_h ils ls ts' = Some ts \\<Longrightarrow>\n  list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts) ils \\<and>\n  ts' = ts\n  same_lab_h (a # ils) ls ts' = Some ts\n\ngoal (2 subgoals):\n 1. same_lab_h [] ls ts' = Some ts \\<Longrightarrow>\n    list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts) [] \\<and>\n    ts' = ts\n 2. \\<And>a ils.\n       \\<lbrakk>same_lab_h ils ls ts' = Some ts \\<Longrightarrow>\n                list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts)\n                 ils \\<and>\n                ts' = ts;\n        same_lab_h (a # ils) ls ts' = Some ts\\<rbrakk>\n       \\<Longrightarrow> list_all\n                          (\\<lambda>i. i < length ls \\<and> ls ! i = ts)\n                          (a # ils) \\<and>\n                         ts' = ts", "thus ?case"], ["proof (prove)\nusing this:\n  same_lab_h ils ls ts' = Some ts \\<Longrightarrow>\n  list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts) ils \\<and>\n  ts' = ts\n  same_lab_h (a # ils) ls ts' = Some ts\n\ngoal (1 subgoal):\n 1. list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts) (a # ils) \\<and>\n    ts' = ts", "apply (simp,safe)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>same_lab_h ils ls ts' = Some ts \\<Longrightarrow>\n             list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts)\n              ils \\<and>\n             ts' = ts;\n     (if length ls \\<le> a then None\n      else if ls ! a = ts' then same_lab_h ils ls (ls ! a) else None) =\n     Some ts;\n     same_lab_h ils ls ts' = Some ts \\<Longrightarrow>\n     list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts) ils \\<and>\n     ts' = ts;\n     same_lab_h (a # ils) ls ts' = Some ts\\<rbrakk>\n    \\<Longrightarrow> a < length ls\n 2. \\<lbrakk>same_lab_h ils ls ts' = Some ts \\<Longrightarrow>\n             list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts)\n              ils \\<and>\n             ts' = ts;\n     (if length ls \\<le> a then None\n      else if ls ! a = ts' then same_lab_h ils ls (ls ! a) else None) =\n     Some ts;\n     same_lab_h ils ls ts' = Some ts \\<Longrightarrow>\n     list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts) ils \\<and>\n     ts' = ts;\n     same_lab_h (a # ils) ls ts' = Some ts\\<rbrakk>\n    \\<Longrightarrow> ls ! a = ts\n 3. \\<lbrakk>same_lab_h ils ls ts' = Some ts \\<Longrightarrow>\n             list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts)\n              ils \\<and>\n             ts' = ts;\n     (if length ls \\<le> a then None\n      else if ls ! a = ts' then same_lab_h ils ls (ls ! a) else None) =\n     Some ts;\n     same_lab_h ils ls ts' = Some ts \\<Longrightarrow>\n     list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts) ils \\<and>\n     ts' = ts;\n     same_lab_h (a # ils) ls ts' = Some ts\\<rbrakk>\n    \\<Longrightarrow> list_all\n                       (\\<lambda>i. i < length ls \\<and> ls ! i = ts) ils\n 4. \\<lbrakk>same_lab_h ils ls ts' = Some ts \\<Longrightarrow>\n             list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts)\n              ils \\<and>\n             ts' = ts;\n     (if length ls \\<le> a then None\n      else if ls ! a = ts' then same_lab_h ils ls (ls ! a) else None) =\n     Some ts;\n     same_lab_h ils ls ts' = Some ts \\<Longrightarrow>\n     list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts) ils \\<and>\n     ts' = ts;\n     same_lab_h (a # ils) ls ts' = Some ts\\<rbrakk>\n    \\<Longrightarrow> ts' = ts", "apply (metis not_less option.distinct(1))+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts) (a # ils) \\<and>\n  ts' = ts\n\ngoal (1 subgoal):\n 1. same_lab_h [] ls ts' = Some ts \\<Longrightarrow>\n    list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts) [] \\<and>\n    ts' = ts", "qed simp"], ["", "lemma same_lab_conv_list_all:\n  assumes \"same_lab ils ls = Some ts\"\n  shows \"list_all (\\<lambda>i. i < length ls \\<and> ls!i = ts) ils\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts) ils", "using assms"], ["proof (prove)\nusing this:\n  same_lab ils ls = Some ts\n\ngoal (1 subgoal):\n 1. list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts) ils", "proof (induction rule: same_lab.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>lab_c.\n       same_lab [] lab_c = Some ts \\<Longrightarrow>\n       list_all (\\<lambda>i. i < length lab_c \\<and> lab_c ! i = ts) []\n 2. \\<And>i is lab_c.\n       same_lab (i # is) lab_c = Some ts \\<Longrightarrow>\n       list_all (\\<lambda>i. i < length lab_c \\<and> lab_c ! i = ts)\n        (i # is)", "case (2 i \"is\" lab_c)"], ["proof (state)\nthis:\n  same_lab (i # is) lab_c = Some ts\n\ngoal (2 subgoals):\n 1. \\<And>lab_c.\n       same_lab [] lab_c = Some ts \\<Longrightarrow>\n       list_all (\\<lambda>i. i < length lab_c \\<and> lab_c ! i = ts) []\n 2. \\<And>i is lab_c.\n       same_lab (i # is) lab_c = Some ts \\<Longrightarrow>\n       list_all (\\<lambda>i. i < length lab_c \\<and> lab_c ! i = ts)\n        (i # is)", "thus ?case"], ["proof (prove)\nusing this:\n  same_lab (i # is) lab_c = Some ts\n\ngoal (1 subgoal):\n 1. list_all (\\<lambda>i. i < length lab_c \\<and> lab_c ! i = ts) (i # is)", "using same_lab_h_conv_list_all"], ["proof (prove)\nusing this:\n  same_lab (i # is) lab_c = Some ts\n  same_lab_h ?ils ?ls ?ts' = Some ?ts \\<Longrightarrow>\n  list_all (\\<lambda>i. i < length ?ls \\<and> ?ls ! i = ?ts) ?ils \\<and>\n  ?ts' = ?ts\n\ngoal (1 subgoal):\n 1. list_all (\\<lambda>i. i < length lab_c \\<and> lab_c ! i = ts) (i # is)", "by (metis (mono_tags, lifting) list_all_simps(1) not_less option.distinct(1) same_lab.simps(2))"], ["proof (state)\nthis:\n  list_all (\\<lambda>i. i < length lab_c \\<and> lab_c ! i = ts) (i # is)\n\ngoal (1 subgoal):\n 1. \\<And>lab_c.\n       same_lab [] lab_c = Some ts \\<Longrightarrow>\n       list_all (\\<lambda>i. i < length lab_c \\<and> lab_c ! i = ts) []", "qed simp"], ["", "lemma list_all_conv_same_lab_h:\n  assumes \"list_all (\\<lambda>i. i < length ls \\<and> ls!i = ts) ils\"\n  shows \"same_lab_h ils ls ts = Some ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. same_lab_h ils ls ts = Some ts", "using assms"], ["proof (prove)\nusing this:\n  list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts) ils\n\ngoal (1 subgoal):\n 1. same_lab_h ils ls ts = Some ts", "by (induction ils, simp_all)"], ["", "lemma list_all_conv_same_lab:\n  assumes \"list_all (\\<lambda>i. i < length ls \\<and>ls!i = ts) (is@[i])\"\n  shows \"same_lab (is@[i]) ls = Some ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. same_lab (is @ [i]) ls = Some ts", "using assms"], ["proof (prove)\nusing this:\n  list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts) (is @ [i])\n\ngoal (1 subgoal):\n 1. same_lab (is @ [i]) ls = Some ts", "proof (induction \"(is@[i])\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>[] = is @ [i];\n     list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts)\n      (is @ [i])\\<rbrakk>\n    \\<Longrightarrow> same_lab (is @ [i]) ls = Some ts\n 2. \\<And>a x.\n       \\<lbrakk>\\<lbrakk>x = is @ [i];\n                 list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts)\n                  (is @ [i])\\<rbrakk>\n                \\<Longrightarrow> same_lab (is @ [i]) ls = Some ts;\n        a # x = is @ [i];\n        list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts)\n         (is @ [i])\\<rbrakk>\n       \\<Longrightarrow> same_lab (is @ [i]) ls = Some ts", "case (Cons a x)"], ["proof (state)\nthis:\n  \\<lbrakk>x = is @ [i];\n   list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts)\n    (is @ [i])\\<rbrakk>\n  \\<Longrightarrow> same_lab (is @ [i]) ls = Some ts\n  a # x = is @ [i]\n  list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts) (is @ [i])\n\ngoal (2 subgoals):\n 1. \\<lbrakk>[] = is @ [i];\n     list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts)\n      (is @ [i])\\<rbrakk>\n    \\<Longrightarrow> same_lab (is @ [i]) ls = Some ts\n 2. \\<And>a x.\n       \\<lbrakk>\\<lbrakk>x = is @ [i];\n                 list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts)\n                  (is @ [i])\\<rbrakk>\n                \\<Longrightarrow> same_lab (is @ [i]) ls = Some ts;\n        a # x = is @ [i];\n        list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts)\n         (is @ [i])\\<rbrakk>\n       \\<Longrightarrow> same_lab (is @ [i]) ls = Some ts", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>x = is @ [i];\n   list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts)\n    (is @ [i])\\<rbrakk>\n  \\<Longrightarrow> same_lab (is @ [i]) ls = Some ts\n  a # x = is @ [i]\n  list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts) (is @ [i])\n\ngoal (1 subgoal):\n 1. same_lab (is @ [i]) ls = Some ts", "using list_all_conv_same_lab_h[OF Cons(3)]"], ["proof (prove)\nusing this:\n  \\<lbrakk>x = is @ [i];\n   list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts)\n    (is @ [i])\\<rbrakk>\n  \\<Longrightarrow> same_lab (is @ [i]) ls = Some ts\n  a # x = is @ [i]\n  list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts) (is @ [i])\n  same_lab_h (is @ [i]) ls ts = Some ts\n\ngoal (1 subgoal):\n 1. same_lab (is @ [i]) ls = Some ts", "by (metis option.distinct(1) same_lab.simps(2) same_lab_h.simps(2))"], ["proof (state)\nthis:\n  same_lab (is @ [i]) ls = Some ts\n\ngoal (1 subgoal):\n 1. \\<lbrakk>[] = is @ [i];\n     list_all (\\<lambda>i. i < length ls \\<and> ls ! i = ts)\n      (is @ [i])\\<rbrakk>\n    \\<Longrightarrow> same_lab (is @ [i]) ls = Some ts", "qed auto"], ["", "fun b_e_type_checker :: \"t_context \\<Rightarrow>  b_e list \\<Rightarrow> tf \\<Rightarrow> bool\"\nand check :: \"t_context \\<Rightarrow> b_e list \\<Rightarrow> checker_type \\<Rightarrow> checker_type\"\nand check_single :: \"t_context \\<Rightarrow>  b_e \\<Rightarrow> checker_type \\<Rightarrow> checker_type\" where\n  \"b_e_type_checker \\<C> es (tn _> tm) = c_types_agree (check \\<C> es (Type tn)) tm\"\n| \"check \\<C> es ts = (case es of\n                     [] \\<Rightarrow> ts\n                   | (e#es) \\<Rightarrow> (case ts of \n                                  Bot \\<Rightarrow> Bot\n                                | _ \\<Rightarrow> check \\<C> es (check_single \\<C> e ts)))\"\n(*\nfoldl (\\<lambda> ts e. (case ts of Bot \\<Rightarrow> Bot | _ \\<Rightarrow> check_single \\<C> e ts)) es\n\n\n\nprimrec foldl :: \"('b \\<Rightarrow> 'a \\<Rightarrow> 'b) \\<Rightarrow> 'b \\<Rightarrow> 'a list \\<Rightarrow> 'b\" where\nfoldl_Nil:  \"foldl f a [] = a\" |\nfoldl_Cons: \"foldl f a (x # xs) = foldl f (f a x) xs\"\n*)\n  (* num ops *)\n| \"check_single \\<C> (C v) ts = type_update ts [] (Type [typeof v])\"\n| \"check_single \\<C> (Unop_i t _) ts = (if is_int_t t\n                                       then type_update ts [TSome t] (Type [t])\n                                       else Bot)\"\n| \"check_single \\<C> (Unop_f t _) ts = (if is_float_t t\n                                       then type_update ts [TSome t] (Type [t])\n                                       else Bot)\"\n| \"check_single \\<C> (Binop_i t _) ts = (if is_int_t t\n                                       then type_update ts [TSome t, TSome t] (Type [t])\n                                       else Bot)\"\n| \"check_single \\<C> (Binop_f t _) ts = (if is_float_t t\n                                       then type_update ts [TSome t, TSome t] (Type [t])\n                                       else Bot)\"\n| \"check_single \\<C> (Testop t _) ts = (if is_int_t t\n                                       then type_update ts [TSome t] (Type [T_i32])\n                                       else Bot)\"\n| \"check_single \\<C> (Relop_i t _) ts = (if is_int_t t\n                                       then type_update ts [TSome t, TSome t] (Type [T_i32])\n                                       else Bot)\"\n| \"check_single \\<C> (Relop_f t _) ts =  (if is_float_t t\n                                       then type_update ts [TSome t, TSome t] (Type [T_i32])\n                                       else Bot)\"\n  (* convert *)\n| \"check_single \\<C> (Cvtop t1 Convert t2 sx) ts = (if (convert_cond t1 t2 sx)\n                                                   then type_update ts [TSome t2] (Type [t1])\n                                                   else Bot)\"\n  (* reinterpret *)\n| \"check_single \\<C> (Cvtop t1 Reinterpret t2 sx) ts = (if ((t1 \\<noteq> t2) \\<and> t_length t1 = t_length t2 \\<and> sx = None)\n                                                         then type_update ts [TSome t2] (Type [t1])\n                                                         else Bot)\"\n  (* unreachable, nop, drop, select *)\n| \"check_single \\<C> (Unreachable) ts = type_update ts [] (TopType [])\"\n| \"check_single \\<C> (Nop) ts = ts\"\n| \"check_single \\<C> (Drop) ts = type_update ts [TAny] (Type [])\"\n| \"check_single \\<C> (Select) ts = type_update_select ts\"\n  (* block *)                                 \n| \"check_single \\<C> (Block (tn _> tm) es) ts = (if (b_e_type_checker (\\<C>\\<lparr>label := ([tm] @ (label \\<C>))\\<rparr>) es (tn _> tm))\n                                                then type_update ts (to_ct_list tn) (Type tm)\n                                                else Bot)\"\n  (* loop *)\n| \"check_single \\<C> (Loop (tn _> tm) es) ts = (if (b_e_type_checker (\\<C>\\<lparr>label := ([tn] @ (label \\<C>))\\<rparr>) es (tn _> tm))\n                                                then type_update ts (to_ct_list tn) (Type tm)\n                                                else Bot)\"\n  (* if *)\n| \"check_single \\<C> (If (tn _> tm) es1 es2) ts = (if (b_e_type_checker (\\<C>\\<lparr>label := ([tm] @ (label \\<C>))\\<rparr>) es1 (tn _> tm)\n                                                    \\<and> b_e_type_checker (\\<C>\\<lparr>label := ([tm] @ (label \\<C>))\\<rparr>) es2 (tn _> tm))\n                                                then type_update ts (to_ct_list (tn@[T_i32])) (Type tm)\n                                                else Bot)\"\n  (* br *)\n| \"check_single \\<C> (Br i) ts = (if i < length (label \\<C>)\n                                 then type_update ts (to_ct_list ((label \\<C>)!i)) (TopType [])\n                                 else Bot)\"\n  (* br_if *)\n| \"check_single \\<C> (Br_if i) ts = (if i < length (label \\<C>)\n                                    then type_update ts (to_ct_list ((label \\<C>)!i @ [T_i32])) (Type ((label \\<C>)!i))\n                                    else Bot)\"\n  (* br_table *)\n| \"check_single \\<C> (Br_table is i) ts = (case (same_lab (is@[i]) (label \\<C>)) of\n                                        None \\<Rightarrow> Bot\n                                      | Some tls \\<Rightarrow> type_update ts (to_ct_list (tls @ [T_i32])) (TopType []))\"\n  (* return *)\n| \"check_single \\<C> (Return) ts = (case (return \\<C>) of\n                                   None \\<Rightarrow> Bot\n                                 | Some tls \\<Rightarrow> type_update ts (to_ct_list tls) (TopType []))\"\n  (* call *)\n| \"check_single \\<C> (Call i) ts = (if i < length (func_t \\<C>)\n                                    then (case ((func_t \\<C>)!i) of\n                                            (tn _> tm) \\<Rightarrow> type_update ts (to_ct_list tn) (Type tm))\n                                    else Bot)\"\n  (* call_indirect *)\n| \"check_single \\<C> (Call_indirect i) ts = (if (table \\<C>) \\<noteq> None \\<and> i < length (types_t \\<C>)\n                                            then (case ((types_t \\<C>)!i) of\n                                                    (tn _> tm) \\<Rightarrow> type_update ts (to_ct_list (tn@[T_i32])) (Type tm))\n                                            else Bot)\"\n  (* get_local *)\n| \"check_single \\<C> (Get_local i) ts = (if i < length (local \\<C>)\n                                        then type_update ts [] (Type [(local \\<C>)!i])\n                                        else Bot)\"\n  (* set_local *)\n| \"check_single \\<C> (Set_local i) ts = (if i < length (local \\<C>)\n                                        then type_update ts [TSome ((local \\<C>)!i)] (Type [])\n                                        else Bot)\"\n  (* tee_local *)\n| \"check_single \\<C> (Tee_local i) ts = (if i < length (local \\<C>)\n                                 then type_update ts [TSome ((local \\<C>)!i)] (Type [(local \\<C>)!i])\n                                 else Bot)\"\n  (* get_global *)\n| \"check_single \\<C> (Get_global i) ts = (if i < length (global \\<C>)\n                                         then type_update ts [] (Type [tg_t ((global \\<C>)!i)])\n                                         else Bot)\"\n  (* set_global *)\n| \"check_single \\<C> (Set_global i) ts = (if i < length (global \\<C>) \\<and> is_mut (global \\<C> ! i)\n                                         then type_update ts [TSome (tg_t ((global \\<C>)!i))] (Type [])\n                                         else Bot)\"\n  (* load *)\n| \"check_single \\<C> (Load t tp_sx a off) ts = (if (memory \\<C>) \\<noteq> None \\<and> load_store_t_bounds a (option_projl tp_sx) t\n                                 then type_update ts [TSome T_i32] (Type [t])\n                                 else Bot)\"\n  (* store *)\n| \"check_single \\<C> (Store t tp a off) ts = (if (memory \\<C>) \\<noteq> None \\<and> load_store_t_bounds a tp t\n                                             then type_update ts [TSome T_i32,TSome t] (Type [])\n                                             else Bot)\"\n  (* current_memory *)\n| \"check_single \\<C> Current_memory ts = (if (memory \\<C>) \\<noteq> None\n                                         then type_update ts [] (Type [T_i32])\n                                         else Bot)\"\n  (* grow_memory *)\n| \"check_single \\<C> Grow_memory ts = (if (memory \\<C>) \\<noteq> None\n                                      then type_update ts [TSome T_i32] (Type [T_i32])\n                                      else Bot)\""], ["", "end"]]}