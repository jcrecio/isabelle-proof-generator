{"file_name": "/home/qj213/afp-2021-10-22/thys/Extended_Finite_State_Machines/FSet_Utils.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Extended_Finite_State_Machines", "problem_names": ["lemma fset_of_list_remdups [simp]: \"fset_of_list (remdups l) = fset_of_list l\"", "lemma fset_both_sides: \"(Abs_fset s = f) = (fset (Abs_fset s) = fset f)\"", "lemma Abs_ffilter: \"(ffilter f s = s') = ({e \\<in> (fset s). f e} = (fset s'))\"", "lemma size_ffilter_card: \"size (ffilter f s) = card ({e \\<in> (fset s). f e})\"", "lemma ffilter_empty [simp]: \"ffilter f {||} = {||}\"", "lemma ffilter_finsert:\n  \"ffilter f (finsert a s) = (if f a then finsert a (ffilter f s) else (ffilter f s))\"", "lemma fset_equiv: \"(f1 = f2) = (fset f1 = fset f2)\"", "lemma finsert_equiv: \"(finsert e f = f') = (insert e (fset f) = (fset f'))\"", "lemma filter_elements:\n  \"x |\\<in>| Abs_fset (Set.filter f (fset s)) = (x \\<in> (Set.filter f (fset s)))\"", "lemma sorted_list_of_fempty [simp]: \"sorted_list_of_fset {||} = []\"", "lemma fmember_implies_member: \"e |\\<in>| f \\<Longrightarrow> e \\<in> fset f\"", "lemma fold_union_ffUnion: \"fold (|\\<union>|) l {||} = ffUnion (fset_of_list l)\"", "lemma filter_filter:\n  \"ffilter P (ffilter Q xs) = ffilter (\\<lambda>x. Q x \\<and> P x) xs\"", "lemma fsubset_strict:\n  \"x2 |\\<subset>| x1 \\<Longrightarrow> \\<exists>e. e |\\<in>| x1 \\<and> e |\\<notin>| x2\"", "lemma fsubset:\n  \"x2 |\\<subset>| x1 \\<Longrightarrow> \\<nexists>e. e |\\<in>| x2 \\<and> e |\\<notin>| x1\"", "lemma size_fsubset_elem:\n  assumes \"\\<exists>e. e |\\<in>| x1 \\<and> e |\\<notin>| x2\"\n      and \"\\<nexists>e. e |\\<in>| x2 \\<and> e |\\<notin>| x1\"\n    shows \"size x2 < size x1\"", "lemma size_fsubset: \"x2 |\\<subset>| x1 \\<Longrightarrow> size x2 < size x1\"", "lemma arg_cong_ffilter:\n  \"\\<forall>e |\\<in>| f. p e = p' e \\<Longrightarrow> ffilter p f = ffilter p' f\"", "lemma ffilter_singleton: \"f e \\<Longrightarrow> ffilter f {|e|} = {|e|}\"", "lemma fset_eq_alt: \"(x = y) = (x |\\<subseteq>| y \\<and> size x = size y)\"", "lemma ffold_empty [simp]: \"ffold f b {||} = b\"", "lemma sorted_list_of_fset_sort:\n  \"sorted_list_of_fset (fset_of_list l) = sort (remdups l)\"", "lemma fMin_Min: \"fMin (fset_of_list l) = Min (set l)\"", "lemma sorted_hd_Min:\n  \"sorted l \\<Longrightarrow>\n   l \\<noteq> [] \\<Longrightarrow>\n   hd l = Min (set l)\"", "lemma hd_sort_Min: \"l \\<noteq> [] \\<Longrightarrow> hd (sort l) = Min (set l)\"", "lemma hd_sort_remdups: \"hd (sort (remdups l)) = hd (sort l)\"", "lemma exists_fset_of_list: \"\\<exists>l. f = fset_of_list l\"", "lemma hd_sorted_list_of_fset:\n  \"s \\<noteq> {||} \\<Longrightarrow> hd (sorted_list_of_fset s) = (fMin s)\"", "lemma fminus_filter_singleton:\n  \"fset_of_list l |-| {|x|} = fset_of_list (filter (\\<lambda>e. e \\<noteq> x) l)\"", "lemma card_minus_fMin:\n  \"s \\<noteq> {||} \\<Longrightarrow> card (fset s - {fMin s}) < card (fset s)\"", "lemma sorted_list_of_fset_Cons:\n  \"\\<exists>h t. (sorted_list_of_fset (finsert s ss)) = h#t\"", "lemma list_eq_hd_tl:\n  \"l \\<noteq> [] \\<Longrightarrow>\n   hd l = h \\<Longrightarrow>\n   tl l = t \\<Longrightarrow>\n   l = (h#t)\"", "lemma fset_of_list_sort: \"fset_of_list l = fset_of_list (sort l)\"", "lemma exists_sorted_distinct_fset_of_list:\n  \"\\<exists>l. sorted l \\<and> distinct l \\<and> f = fset_of_list l\"", "lemma fset_of_list_empty [simp]: \"(fset_of_list l = {||}) = (l = [])\"", "lemma ffold_ord_cons: assumes sorted: \"sorted (h#t)\"\n    and distinct: \"distinct (h#t)\"\n  shows \"ffold_ord f (fset_of_list (h#t)) b = ffold_ord f (fset_of_list t) (f h b)\"", "lemma sorted_distinct_ffold_ord: assumes \"sorted l\"\n      and \"distinct l\"\n    shows \"ffold_ord f (fset_of_list l) b = fold f l b\"", "lemma ffold_ord_fold_sorted: \"ffold_ord f s b = fold f (sorted_list_of_fset s) b\"", "lemma fprod_empty_l: \"{||} |\\<times>| a = {||}\"", "lemma fprod_empty_r: \"a |\\<times>| {||} = {||}\"", "lemmas fprod_empty = fprod_empty_l fprod_empty_r", "lemma fprod_finsert: \"(finsert a as) |\\<times>| (finsert b bs) =\n   finsert (a, b) (fimage (\\<lambda>b. (a, b)) bs |\\<union>| fimage (\\<lambda>a. (a, b)) as |\\<union>| (as |\\<times>| bs))\"", "lemma fprod_member:\n  \"x |\\<in>| xs \\<Longrightarrow>\n   y |\\<in>| ys \\<Longrightarrow>\n   (x, y) |\\<in>| xs |\\<times>| ys\"", "lemma fprod_subseteq:\n  \"x |\\<subseteq>| x' \\<and> y |\\<subseteq>| y' \\<Longrightarrow> x |\\<times>| y |\\<subseteq>| x' |\\<times>| y'\"", "lemma fimage_fprod:\n  \"(a, b) |\\<in>| A |\\<times>| B \\<Longrightarrow> f a b |\\<in>| (\\<lambda>(x, y). f x y) |`| (A |\\<times>| B)\"", "lemma fprod_singletons: \"{|a|} |\\<times>| {|b|} = {|(a, b)|}\"", "lemma fprod_equiv:\n  \"(fset (f |\\<times>| f') = s) = (((fset f) \\<times> (fset f')) = s)\"", "lemma fis_singleton_alt: \"fis_singleton f = (\\<exists>e. f = {|e|})\"", "lemma singleton_singleton [simp]: \"fis_singleton {|a|}\"", "lemma not_singleton_empty [simp]: \"\\<not> fis_singleton {||}\"", "lemma fis_singleton_fthe_elem:\n  \"fis_singleton A \\<longleftrightarrow> A = {|fthe_elem A|}\"", "lemma fBall_ffilter:\n  \"\\<forall>x |\\<in>| X. f x \\<Longrightarrow> ffilter f X = X\"", "lemma fBall_ffilter2:\n  \"X = Y \\<Longrightarrow>\n   \\<forall>x |\\<in>| X. f x \\<Longrightarrow>\n   ffilter f X = Y\"", "lemma size_fset_of_list: \"size (fset_of_list l) = length (remdups l)\"", "lemma size_fsingleton: \"(size f = 1) = (\\<exists>e. f = {|e|})\"", "lemma ffilter_mono: \"(ffilter X xs = f) \\<Longrightarrow> \\<forall>x |\\<in>| xs. X x = Y x \\<Longrightarrow> (ffilter Y xs = f)\"", "lemma size_fimage: \"size (fimage f s) \\<le> size s\"", "lemma size_ffilter: \"size (ffilter P f) \\<le> size f\"", "lemma fimage_size_le: \"\\<And>f s. size s \\<le> n \\<Longrightarrow> size (fimage f s) \\<le> n\"", "lemma ffilter_size_le: \"\\<And>f s. size s \\<le> n \\<Longrightarrow> size (ffilter f s) \\<le> n\"", "lemma set_membership_eq: \"A = B \\<longleftrightarrow> (\\<lambda>x. Set.member x A) = (\\<lambda>x. Set.member x B)\"", "lemmas ffilter_eq_iff = Abs_ffilter set_membership_eq fun_eq_iff", "lemma size_le_1: \"size f \\<le> 1 = (f = {||} \\<or> (\\<exists>e. f = {|e|}))\"", "lemma size_gt_1: \"1 < size f \\<Longrightarrow> \\<exists>e1 e2 f'. e1 \\<noteq> e2 \\<and> f = finsert e1 (finsert e2 f')\""], "translations": [["", "lemma fset_of_list_remdups [simp]: \"fset_of_list (remdups l) = fset_of_list l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fset_of_list (remdups l) = fset_of_list l", "apply (induct l)"], ["proof (prove)\ngoal (2 subgoals):\n 1. fset_of_list (remdups []) = fset_of_list []\n 2. \\<And>a l.\n       fset_of_list (remdups l) = fset_of_list l \\<Longrightarrow>\n       fset_of_list (remdups (a # l)) = fset_of_list (a # l)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l.\n       fset_of_list (remdups l) = fset_of_list l \\<Longrightarrow>\n       fset_of_list (remdups (a # l)) = fset_of_list (a # l)", "by (simp add: finsert_absorb fset_of_list_elem)"], ["", "definition \"fSum \\<equiv> fsum (\\<lambda>x. x)\""], ["", "lemma fset_both_sides: \"(Abs_fset s = f) = (fset (Abs_fset s) = fset f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs_fset s = f) = (fset (Abs_fset s) = fset f)", "by (simp add: fset_inject)"], ["", "lemma Abs_ffilter: \"(ffilter f s = s') = ({e \\<in> (fset s). f e} = (fset s'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ffilter f s = s') = ({e \\<in> fset s. f e} = fset s')", "by (simp add: ffilter_def fset_both_sides Abs_fset_inverse Set.filter_def)"], ["", "lemma size_ffilter_card: \"size (ffilter f s) = card ({e \\<in> (fset s). f e})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size (ffilter f s) = card {e \\<in> fset s. f e}", "by (simp add: ffilter_def fset_both_sides Abs_fset_inverse Set.filter_def)"], ["", "lemma ffilter_empty [simp]: \"ffilter f {||} = {||}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ffilter f {||} = {||}", "by auto"], ["", "lemma ffilter_finsert:\n  \"ffilter f (finsert a s) = (if f a then finsert a (ffilter f s) else (ffilter f s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ffilter f (finsert a s) =\n    (if f a then finsert a (ffilter f s) else ffilter f s)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f a \\<longrightarrow>\n     ffilter f (finsert a s) = finsert a (ffilter f s)) \\<and>\n    (\\<not> f a \\<longrightarrow> ffilter f (finsert a s) = ffilter f s)", "apply standard"], ["proof (prove)\ngoal (2 subgoals):\n 1. f a \\<longrightarrow> ffilter f (finsert a s) = finsert a (ffilter f s)\n 2. \\<not> f a \\<longrightarrow> ffilter f (finsert a s) = ffilter f s", "apply (simp add: ffilter_def fset_both_sides Abs_fset_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. f a \\<longrightarrow>\n    Set.filter f (insert a (fset s)) = insert a (Set.filter f (fset s))\n 2. \\<not> f a \\<longrightarrow> ffilter f (finsert a s) = ffilter f s", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> f a \\<longrightarrow> ffilter f (finsert a s) = ffilter f s", "apply (simp add: ffilter_def fset_both_sides Abs_fset_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> f a \\<longrightarrow>\n    Set.filter f (insert a (fset s)) = Set.filter f (fset s)", "by auto"], ["", "lemma fset_equiv: \"(f1 = f2) = (fset f1 = fset f2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f1 = f2) = (fset f1 = fset f2)", "by (simp add: fset_inject)"], ["", "lemma finsert_equiv: \"(finsert e f = f') = (insert e (fset f) = (fset f'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (finsert e f = f') = (insert e (fset f) = fset f')", "by (simp add: finsert_def fset_both_sides Abs_fset_inverse)"], ["", "lemma filter_elements:\n  \"x |\\<in>| Abs_fset (Set.filter f (fset s)) = (x \\<in> (Set.filter f (fset s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x |\\<in>| Abs_fset (Set.filter f (fset s))) =\n    (x \\<in> Set.filter f (fset s))", "by (metis ffilter.rep_eq fset_inverse notin_fset)"], ["", "lemma sorted_list_of_fempty [simp]: \"sorted_list_of_fset {||} = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_list_of_fset {||} = []", "by (simp add: sorted_list_of_fset_def)"], ["", "lemma fmember_implies_member: \"e |\\<in>| f \\<Longrightarrow> e \\<in> fset f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e |\\<in>| f \\<Longrightarrow> e \\<in> fset f", "by (simp add: fmember_def)"], ["", "lemma fold_union_ffUnion: \"fold (|\\<union>|) l {||} = ffUnion (fset_of_list l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fold (|\\<union>|) l {||} = ffUnion (fset_of_list l)", "by(induct l rule: rev_induct, auto)"], ["", "lemma filter_filter:\n  \"ffilter P (ffilter Q xs) = ffilter (\\<lambda>x. Q x \\<and> P x) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ffilter P (ffilter Q xs) = ffilter (\\<lambda>x. Q x \\<and> P x) xs", "by auto"], ["", "lemma fsubset_strict:\n  \"x2 |\\<subset>| x1 \\<Longrightarrow> \\<exists>e. e |\\<in>| x1 \\<and> e |\\<notin>| x2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x2 |\\<subset>| x1 \\<Longrightarrow>\n    \\<exists>e. e |\\<in>| x1 \\<and> e |\\<notin>| x2", "by auto"], ["", "lemma fsubset:\n  \"x2 |\\<subset>| x1 \\<Longrightarrow> \\<nexists>e. e |\\<in>| x2 \\<and> e |\\<notin>| x1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x2 |\\<subset>| x1 \\<Longrightarrow>\n    \\<nexists>e. e |\\<in>| x2 \\<and> e |\\<notin>| x1", "by auto"], ["", "lemma size_fsubset_elem:\n  assumes \"\\<exists>e. e |\\<in>| x1 \\<and> e |\\<notin>| x2\"\n      and \"\\<nexists>e. e |\\<in>| x2 \\<and> e |\\<notin>| x1\"\n    shows \"size x2 < size x1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size x2 < size x1", "using assms"], ["proof (prove)\nusing this:\n  \\<exists>e. e |\\<in>| x1 \\<and> e |\\<notin>| x2\n  \\<nexists>e. e |\\<in>| x2 \\<and> e |\\<notin>| x1\n\ngoal (1 subgoal):\n 1. size x2 < size x1", "apply (simp add: fmember_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>e. e \\<in> fset x1 \\<and> e \\<notin> fset x2;\n     \\<forall>e. e \\<in> fset x2 \\<longrightarrow> e \\<in> fset x1\\<rbrakk>\n    \\<Longrightarrow> card (fset x2) < card (fset x1)", "by (metis card_seteq finite_fset linorder_not_le subsetI)"], ["", "lemma size_fsubset: \"x2 |\\<subset>| x1 \\<Longrightarrow> size x2 < size x1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x2 |\\<subset>| x1 \\<Longrightarrow> size x2 < size x1", "by (metis fsubset fsubset_strict size_fsubset_elem)"], ["", "definition fremove :: \"'a \\<Rightarrow> 'a fset \\<Rightarrow> 'a fset\"\n  where [code_abbrev]: \"fremove x A = A - {|x|}\""], ["", "lemma arg_cong_ffilter:\n  \"\\<forall>e |\\<in>| f. p e = p' e \\<Longrightarrow> ffilter p f = ffilter p' f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>e|\\<in>|f. p e = p' e \\<Longrightarrow>\n    ffilter p f = ffilter p' f", "by auto"], ["", "lemma ffilter_singleton: \"f e \\<Longrightarrow> ffilter f {|e|} = {|e|}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f e \\<Longrightarrow> ffilter f {|e|} = {|e|}", "apply (simp add: ffilter_def fset_both_sides Abs_fset_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. f e \\<Longrightarrow> Set.filter f {e} = {e}", "by auto"], ["", "lemma fset_eq_alt: \"(x = y) = (x |\\<subseteq>| y \\<and> size x = size y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x = y) = (x |\\<subseteq>| y \\<and> size x = size y)", "by (metis exists_least_iff le_less size_fsubset)"], ["", "lemma ffold_empty [simp]: \"ffold f b {||} = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ffold f b {||} = b", "by (simp add: ffold_def)"], ["", "lemma sorted_list_of_fset_sort:\n  \"sorted_list_of_fset (fset_of_list l) = sort (remdups l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_list_of_fset (fset_of_list l) = sort (remdups l)", "by (simp add: fset_of_list.rep_eq sorted_list_of_fset.rep_eq sorted_list_of_set_sort_remdups)"], ["", "lemma fMin_Min: \"fMin (fset_of_list l) = Min (set l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fMin (fset_of_list l) = Min (set l)", "by (simp add: fMin.F.rep_eq fset_of_list.rep_eq)"], ["", "lemma sorted_hd_Min:\n  \"sorted l \\<Longrightarrow>\n   l \\<noteq> [] \\<Longrightarrow>\n   hd l = Min (set l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sorted l; l \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> hd l = Min (set l)", "by (metis List.finite_set Min_eqI eq_iff hd_Cons_tl insertE list.set_sel(1) list.simps(15) sorted.simps(2))"], ["", "lemma hd_sort_Min: \"l \\<noteq> [] \\<Longrightarrow> hd (sort l) = Min (set l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<noteq> [] \\<Longrightarrow> hd (sort l) = Min (set l)", "by (metis sorted_hd_Min set_empty set_sort sorted_sort)"], ["", "lemma hd_sort_remdups: \"hd (sort (remdups l)) = hd (sort l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd (sort (remdups l)) = hd (sort l)", "by (metis hd_sort_Min remdups_eq_nil_iff set_remdups)"], ["", "lemma exists_fset_of_list: \"\\<exists>l. f = fset_of_list l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l. f = fset_of_list l", "using exists_fset_of_list"], ["proof (prove)\nusing this:\n  \\<exists>xs. fset_of_list xs = ?S\n\ngoal (1 subgoal):\n 1. \\<exists>l. f = fset_of_list l", "by fastforce"], ["", "lemma hd_sorted_list_of_fset:\n  \"s \\<noteq> {||} \\<Longrightarrow> hd (sorted_list_of_fset s) = (fMin s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<noteq> {||} \\<Longrightarrow> hd (sorted_list_of_fset s) = fMin s", "apply (insert exists_fset_of_list[of s])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<noteq> {||}; \\<exists>l. s = fset_of_list l\\<rbrakk>\n    \\<Longrightarrow> hd (sorted_list_of_fset s) = fMin s", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>s \\<noteq> {||}; s = fset_of_list l\\<rbrakk>\n       \\<Longrightarrow> hd (sorted_list_of_fset s) = fMin s", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>fset_of_list l \\<noteq> {||}; s = fset_of_list l\\<rbrakk>\n       \\<Longrightarrow> hd (sorted_list_of_fset (fset_of_list l)) =\n                         fMin (fset_of_list l)", "apply (simp add: sorted_list_of_fset_sort fMin_Min hd_sort_remdups)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>fset_of_list l \\<noteq> {||}; s = fset_of_list l\\<rbrakk>\n       \\<Longrightarrow> hd (sort l) = Min (set l)", "by (metis fset_of_list_simps(1) hd_sort_Min)"], ["", "lemma fminus_filter_singleton:\n  \"fset_of_list l |-| {|x|} = fset_of_list (filter (\\<lambda>e. e \\<noteq> x) l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fset_of_list l |-| {|x|} =\n    fset_of_list (filter (\\<lambda>e. e \\<noteq> x) l)", "by auto"], ["", "lemma card_minus_fMin:\n  \"s \\<noteq> {||} \\<Longrightarrow> card (fset s - {fMin s}) < card (fset s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<noteq> {||} \\<Longrightarrow>\n    card (fset s - {fMin s}) < card (fset s)", "by (metis Min_in bot_fset.rep_eq card_Diff1_less fMin.F.rep_eq finite_fset fset_equiv)"], ["", "(* Provides a deterministic way to fold fsets similar to List.fold that works with the code generator *)"], ["", "function ffold_ord :: \"(('a::linorder) \\<Rightarrow> 'b \\<Rightarrow> 'b) \\<Rightarrow> 'a fset \\<Rightarrow> 'b \\<Rightarrow> 'b\" where\n  \"ffold_ord f s b = (\n    if s = {||} then\n      b\n    else\n      let\n        h = fMin s;\n        t = s - {|h|}\n      in\n        ffold_ord f t (f h b)\n  )\""], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x.\n       (\\<And>f s b. x = (f, s, b) \\<Longrightarrow> P) \\<Longrightarrow> P\n 2. \\<And>f s b fa sa ba.\n       (f, s, b) = (fa, sa, ba) \\<Longrightarrow>\n       (if s = {||} then b\n        else let h = fMin s; t = s |-| {|h|}\n             in ffold_ord_sumC (f, t, f h b)) =\n       (if sa = {||} then ba\n        else let h = fMin sa; t = sa |-| {|h|}\n             in ffold_ord_sumC (fa, t, fa h ba))", "by auto"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All ffold_ord_dom", "apply (relation \"measures [\\<lambda>(a, s, ab). size s]\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. wf (measures [\\<lambda>(a, s, ab). size s])\n 2. \\<And>f s b x xa.\n       \\<lbrakk>s \\<noteq> {||}; x = fMin s; xa = s |-| {|x|}\\<rbrakk>\n       \\<Longrightarrow> ((f, xa, f x b), f, s, b)\n                         \\<in> measures [\\<lambda>(a, s, ab). size s]", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f s b x xa.\n       \\<lbrakk>s \\<noteq> {||}; x = fMin s; xa = s |-| {|x|}\\<rbrakk>\n       \\<Longrightarrow> ((f, xa, f x b), f, s, b)\n                         \\<in> measures [\\<lambda>(a, s, ab). size s]", "by (simp add: card_minus_fMin)"], ["", "lemma sorted_list_of_fset_Cons:\n  \"\\<exists>h t. (sorted_list_of_fset (finsert s ss)) = h#t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>h t. sorted_list_of_fset (finsert s ss) = h # t", "apply (simp add: sorted_list_of_fset_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>h t. insort s (sorted_list_of_set (fset ss - {s})) = h # t", "by (cases \"insort s (sorted_list_of_set (fset ss - {s}))\", auto)"], ["", "lemma list_eq_hd_tl:\n  \"l \\<noteq> [] \\<Longrightarrow>\n   hd l = h \\<Longrightarrow>\n   tl l = t \\<Longrightarrow>\n   l = (h#t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<noteq> []; hd l = h; tl l = t\\<rbrakk>\n    \\<Longrightarrow> l = h # t", "by auto"], ["", "lemma fset_of_list_sort: \"fset_of_list l = fset_of_list (sort l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fset_of_list l = fset_of_list (sort l)", "by (simp add: fset_of_list.abs_eq)"], ["", "lemma exists_sorted_distinct_fset_of_list:\n  \"\\<exists>l. sorted l \\<and> distinct l \\<and> f = fset_of_list l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l. sorted l \\<and> distinct l \\<and> f = fset_of_list l", "by (metis distinct_sorted_list_of_set sorted_list_of_fset.rep_eq sorted_list_of_fset_simps(2) sorted_sorted_list_of_set)"], ["", "lemma fset_of_list_empty [simp]: \"(fset_of_list l = {||}) = (l = [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fset_of_list l = {||}) = (l = [])", "by (metis fset_of_list.rep_eq fset_of_list_simps(1) set_empty)"], ["", "lemma ffold_ord_cons: assumes sorted: \"sorted (h#t)\"\n    and distinct: \"distinct (h#t)\"\n  shows \"ffold_ord f (fset_of_list (h#t)) b = ffold_ord f (fset_of_list t) (f h b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ffold_ord f (fset_of_list (h # t)) b =\n    ffold_ord f (fset_of_list t) (f h b)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. ffold_ord f (fset_of_list (h # t)) b =\n    ffold_ord f (fset_of_list t) (f h b)", "have h_is_min: \"h = fMin (fset_of_list (h#t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h = fMin (fset_of_list (h # t))", "by (metis sorted fMin_Min list.sel(1) list.simps(3) sorted_hd_Min)"], ["proof (state)\nthis:\n  h = fMin (fset_of_list (h # t))\n\ngoal (1 subgoal):\n 1. ffold_ord f (fset_of_list (h # t)) b =\n    ffold_ord f (fset_of_list t) (f h b)", "have remove_min: \"fset_of_list t = (fset_of_list (h#t)) - {|h|}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fset_of_list t = fset_of_list (h # t) |-| {|h|}", "using distinct fset_of_list_elem"], ["proof (prove)\nusing this:\n  distinct (h # t)\n  (?x |\\<in>| fset_of_list ?xs) = (?x \\<in> set ?xs)\n\ngoal (1 subgoal):\n 1. fset_of_list t = fset_of_list (h # t) |-| {|h|}", "by force"], ["proof (state)\nthis:\n  fset_of_list t = fset_of_list (h # t) |-| {|h|}\n\ngoal (1 subgoal):\n 1. ffold_ord f (fset_of_list (h # t)) b =\n    ffold_ord f (fset_of_list t) (f h b)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ffold_ord f (fset_of_list (h # t)) b =\n    ffold_ord f (fset_of_list t) (f h b)", "apply (simp only: ffold_ord.simps[of f \"fset_of_list (h#t)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if fset_of_list (h # t) = {||} then b\n     else let ha = fMin (fset_of_list (h # t));\n              t = fset_of_list (h # t) |-| {|ha|}\n          in ffold_ord f t (f ha b)) =\n    ffold_ord f (fset_of_list t) (f h b)", "by (metis h_is_min remove_min fset_of_list_empty list.distinct(1))"], ["proof (state)\nthis:\n  ffold_ord f (fset_of_list (h # t)) b =\n  ffold_ord f (fset_of_list t) (f h b)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sorted_distinct_ffold_ord: assumes \"sorted l\"\n      and \"distinct l\"\n    shows \"ffold_ord f (fset_of_list l) b = fold f l b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ffold_ord f (fset_of_list l) b = fold f l b", "using assms"], ["proof (prove)\nusing this:\n  sorted l\n  distinct l\n\ngoal (1 subgoal):\n 1. ffold_ord f (fset_of_list l) b = fold f l b", "apply (induct l arbitrary: b)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>sorted []; distinct []\\<rbrakk>\n       \\<Longrightarrow> ffold_ord f (fset_of_list []) b = fold f [] b\n 2. \\<And>a l b.\n       \\<lbrakk>\\<And>b.\n                   \\<lbrakk>sorted l; distinct l\\<rbrakk>\n                   \\<Longrightarrow> ffold_ord f (fset_of_list l) b =\n                                     fold f l b;\n        sorted (a # l); distinct (a # l)\\<rbrakk>\n       \\<Longrightarrow> ffold_ord f (fset_of_list (a # l)) b =\n                         fold f (a # l) b", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l b.\n       \\<lbrakk>\\<And>b.\n                   \\<lbrakk>sorted l; distinct l\\<rbrakk>\n                   \\<Longrightarrow> ffold_ord f (fset_of_list l) b =\n                                     fold f l b;\n        sorted (a # l); distinct (a # l)\\<rbrakk>\n       \\<Longrightarrow> ffold_ord f (fset_of_list (a # l)) b =\n                         fold f (a # l) b", "by (metis distinct.simps(2) ffold_ord_cons fold_simps(2) sorted.simps(2))"], ["", "lemma ffold_ord_fold_sorted: \"ffold_ord f s b = fold f (sorted_list_of_fset s) b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ffold_ord f s b = fold f (sorted_list_of_fset s) b", "by (metis exists_sorted_distinct_fset_of_list sorted_distinct_ffold_ord distinct_remdups_id sorted_list_of_fset_sort sorted_sort_id)"], ["", "context includes fset.lifting begin"], ["", "lift_definition fprod  :: \"'a fset \\<Rightarrow> 'b fset \\<Rightarrow> ('a \\<times> 'b) fset \" (infixr \"|\\<times>|\" 80) is \"\\<lambda>a b. fset a \\<times> fset b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fset1 fset2. finite (fset fset1 \\<times> fset fset2)", "by simp"], ["", "lift_definition fis_singleton :: \"'a fset \\<Rightarrow> bool\" is \"\\<lambda>A. is_singleton (fset A)\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"], ["", "lemma fprod_empty_l: \"{||} |\\<times>| a = {||}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {||} |\\<times>| a = {||}", "using bot_fset_def fprod.abs_eq"], ["proof (prove)\nusing this:\n  {||} \\<equiv> Abs_fset {}\n  ?xa |\\<times>| ?x = Abs_fset (fset ?xa \\<times> fset ?x)\n\ngoal (1 subgoal):\n 1. {||} |\\<times>| a = {||}", "by force"], ["", "lemma fprod_empty_r: \"a |\\<times>| {||} = {||}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a |\\<times>| {||} = {||}", "by (simp add: fprod_def bot_fset_def Abs_fset_inverse)"], ["", "lemmas fprod_empty = fprod_empty_l fprod_empty_r"], ["", "lemma fprod_finsert: \"(finsert a as) |\\<times>| (finsert b bs) =\n   finsert (a, b) (fimage (\\<lambda>b. (a, b)) bs |\\<union>| fimage (\\<lambda>a. (a, b)) as |\\<union>| (as |\\<times>| bs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finsert a as |\\<times>| finsert b bs =\n    finsert (a, b)\n     (Pair a |`| bs |\\<union>| (\\<lambda>a. (a, b)) |`| as |\\<union>|\n      as |\\<times>| bs)", "apply (simp add: fprod_def fset_both_sides Abs_fset_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. insert (a, b)\n     (fset as \\<times> insert b (fset bs) \\<union>\n      insert a (fset as) \\<times> fset bs) =\n    insert (a, b)\n     (Pair a ` fset bs \\<union> (\\<lambda>a. (a, b)) ` fset as \\<union>\n      fset as \\<times> fset bs)", "by auto"], ["", "lemma fprod_member:\n  \"x |\\<in>| xs \\<Longrightarrow>\n   y |\\<in>| ys \\<Longrightarrow>\n   (x, y) |\\<in>| xs |\\<times>| ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x |\\<in>| xs; y |\\<in>| ys\\<rbrakk>\n    \\<Longrightarrow> (x, y) |\\<in>| xs |\\<times>| ys", "by (simp add: fmember_def fprod_def Abs_fset_inverse)"], ["", "lemma fprod_subseteq:\n  \"x |\\<subseteq>| x' \\<and> y |\\<subseteq>| y' \\<Longrightarrow> x |\\<times>| y |\\<subseteq>| x' |\\<times>| y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x |\\<subseteq>| x' \\<and> y |\\<subseteq>| y' \\<Longrightarrow>\n    x |\\<times>| y |\\<subseteq>| x' |\\<times>| y'", "apply (simp add: fprod_def less_eq_fset_def Abs_fset_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. fset x \\<subseteq> fset x' \\<and>\n    fset y \\<subseteq> fset y' \\<Longrightarrow>\n    fset x \\<times> fset y \\<subseteq> fset x' \\<times> fset y'", "by auto"], ["", "lemma fimage_fprod:\n  \"(a, b) |\\<in>| A |\\<times>| B \\<Longrightarrow> f a b |\\<in>| (\\<lambda>(x, y). f x y) |`| (A |\\<times>| B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, b) |\\<in>| A |\\<times>| B \\<Longrightarrow>\n    f a b |\\<in>| (\\<lambda>(x, y). f x y) |`| (A |\\<times>| B)", "by force"], ["", "lemma fprod_singletons: \"{|a|} |\\<times>| {|b|} = {|(a, b)|}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {|a|} |\\<times>| {|b|} = {|(a, b)|}", "apply (simp add: fprod_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fset {(a, b)} = {|(a, b)|}", "by (metis fset_inverse fset_simps(1) fset_simps(2))"], ["", "lemma fprod_equiv:\n  \"(fset (f |\\<times>| f') = s) = (((fset f) \\<times> (fset f')) = s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fset (f |\\<times>| f') = s) = (fset f \\<times> fset f' = s)", "by (simp add: fprod_def Abs_fset_inverse)"], ["", "lemma fis_singleton_alt: \"fis_singleton f = (\\<exists>e. f = {|e|})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fis_singleton f = (\\<exists>e. f = {|e|})", "by (metis fis_singleton.rep_eq fset_inverse fset_simps(1) fset_simps(2) is_singleton_def)"], ["", "lemma singleton_singleton [simp]: \"fis_singleton {|a|}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fis_singleton {|a|}", "by (simp add: fis_singleton_def)"], ["", "lemma not_singleton_empty [simp]: \"\\<not> fis_singleton {||}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> fis_singleton {||}", "apply (simp add: fis_singleton_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_singleton {}", "by (simp add: is_singleton_altdef)"], ["", "lemma fis_singleton_fthe_elem:\n  \"fis_singleton A \\<longleftrightarrow> A = {|fthe_elem A|}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fis_singleton A = (A = {|fthe_elem A|})", "by (metis fis_singleton_alt fthe_felem_eq)"], ["", "lemma fBall_ffilter:\n  \"\\<forall>x |\\<in>| X. f x \\<Longrightarrow> ffilter f X = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fBall X f \\<Longrightarrow> ffilter f X = X", "by auto"], ["", "lemma fBall_ffilter2:\n  \"X = Y \\<Longrightarrow>\n   \\<forall>x |\\<in>| X. f x \\<Longrightarrow>\n   ffilter f X = Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X = Y; fBall X f\\<rbrakk> \\<Longrightarrow> ffilter f X = Y", "by auto"], ["", "lemma size_fset_of_list: \"size (fset_of_list l) = length (remdups l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size (fset_of_list l) = length (remdups l)", "apply (induct l)"], ["proof (prove)\ngoal (2 subgoals):\n 1. size (fset_of_list []) = length (remdups [])\n 2. \\<And>a l.\n       size (fset_of_list l) = length (remdups l) \\<Longrightarrow>\n       size (fset_of_list (a # l)) = length (remdups (a # l))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l.\n       size (fset_of_list l) = length (remdups l) \\<Longrightarrow>\n       size (fset_of_list (a # l)) = length (remdups (a # l))", "by (simp add: fset_of_list.rep_eq insert_absorb)"], ["", "lemma size_fsingleton: \"(size f = 1) = (\\<exists>e. f = {|e|})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (size f = 1) = (\\<exists>e. f = {|e|})", "apply (insert exists_fset_of_list[of f])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l. f = fset_of_list l \\<Longrightarrow>\n    (size f = 1) = (\\<exists>e. f = {|e|})", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       f = fset_of_list l \\<Longrightarrow>\n       (size (fset_of_list l) = 1) = (\\<exists>e. fset_of_list l = {|e|})", "apply (simp only: size_fset_of_list)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       f = fset_of_list l \\<Longrightarrow>\n       (length (remdups l) = 1) = (\\<exists>e. fset_of_list l = {|e|})", "apply (simp add: fset_of_list_def fset_both_sides Abs_fset_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       f = Abs_fset (set l) \\<Longrightarrow>\n       (length (remdups l) = Suc 0) = (\\<exists>e. set l = {e})", "by (metis List.card_set One_nat_def card.insert card_1_singletonE card.empty empty_iff finite.intros(1))"], ["", "lemma ffilter_mono: \"(ffilter X xs = f) \\<Longrightarrow> \\<forall>x |\\<in>| xs. X x = Y x \\<Longrightarrow> (ffilter Y xs = f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ffilter X xs = f; \\<forall>x|\\<in>|xs. X x = Y x\\<rbrakk>\n    \\<Longrightarrow> ffilter Y xs = f", "by auto"], ["", "lemma size_fimage: \"size (fimage f s) \\<le> size s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size (f |`| s) \\<le> size s", "apply (induct s)"], ["proof (prove)\ngoal (2 subgoals):\n 1. size (f |`| {||}) \\<le> size {||}\n 2. \\<And>x s.\n       \\<lbrakk>x |\\<notin>| s; size (f |`| s) \\<le> size s\\<rbrakk>\n       \\<Longrightarrow> size (f |`| finsert x s) \\<le> size (finsert x s)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x s.\n       \\<lbrakk>x |\\<notin>| s; size (f |`| s) \\<le> size s\\<rbrakk>\n       \\<Longrightarrow> size (f |`| finsert x s) \\<le> size (finsert x s)", "by (simp add: card_insert_if)"], ["", "lemma size_ffilter: \"size (ffilter P f) \\<le> size f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size (ffilter P f) \\<le> size f", "apply (induct f)"], ["proof (prove)\ngoal (2 subgoals):\n 1. size (ffilter P {||}) \\<le> size {||}\n 2. \\<And>x f.\n       \\<lbrakk>x |\\<notin>| f; size (ffilter P f) \\<le> size f\\<rbrakk>\n       \\<Longrightarrow> size (ffilter P (finsert x f))\n                         \\<le> size (finsert x f)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>x |\\<notin>| f; size (ffilter P f) \\<le> size f\\<rbrakk>\n       \\<Longrightarrow> size (ffilter P (finsert x f))\n                         \\<le> size (finsert x f)", "apply (simp only: ffilter_finsert)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>x |\\<notin>| f; size (ffilter P f) \\<le> size f\\<rbrakk>\n       \\<Longrightarrow> size\n                          (if P x then finsert x (ffilter P f)\n                           else ffilter P f)\n                         \\<le> size (finsert x f)", "apply (case_tac \"P x\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x f.\n       \\<lbrakk>x |\\<notin>| f; size (ffilter P f) \\<le> size f;\n        P x\\<rbrakk>\n       \\<Longrightarrow> size\n                          (if P x then finsert x (ffilter P f)\n                           else ffilter P f)\n                         \\<le> size (finsert x f)\n 2. \\<And>x f.\n       \\<lbrakk>x |\\<notin>| f; size (ffilter P f) \\<le> size f;\n        \\<not> P x\\<rbrakk>\n       \\<Longrightarrow> size\n                          (if P x then finsert x (ffilter P f)\n                           else ffilter P f)\n                         \\<le> size (finsert x f)", "apply (simp add: fmember.rep_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>x |\\<notin>| f; size (ffilter P f) \\<le> size f;\n        \\<not> P x\\<rbrakk>\n       \\<Longrightarrow> size\n                          (if P x then finsert x (ffilter P f)\n                           else ffilter P f)\n                         \\<le> size (finsert x f)", "by (simp add: card_insert_if)"], ["", "lemma fimage_size_le: \"\\<And>f s. size s \\<le> n \\<Longrightarrow> size (fimage f s) \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f s. size s \\<le> n \\<Longrightarrow> size (f |`| s) \\<le> n", "using le_trans size_fimage"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i \\<le> ?j; ?j \\<le> ?k\\<rbrakk> \\<Longrightarrow> ?i \\<le> ?k\n  size (?f |`| ?s) \\<le> size ?s\n\ngoal (1 subgoal):\n 1. \\<And>f s. size s \\<le> n \\<Longrightarrow> size (f |`| s) \\<le> n", "by blast"], ["", "lemma ffilter_size_le: \"\\<And>f s. size s \\<le> n \\<Longrightarrow> size (ffilter f s) \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f s. size s \\<le> n \\<Longrightarrow> size (ffilter f s) \\<le> n", "using dual_order.trans size_ffilter"], ["proof (prove)\nusing this:\n  \\<lbrakk>?b \\<le> ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c \\<le> ?a\n  size (ffilter ?P ?f) \\<le> size ?f\n\ngoal (1 subgoal):\n 1. \\<And>f s. size s \\<le> n \\<Longrightarrow> size (ffilter f s) \\<le> n", "by blast"], ["", "lemma set_membership_eq: \"A = B \\<longleftrightarrow> (\\<lambda>x. Set.member x A) = (\\<lambda>x. Set.member x B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A = B) = ((\\<lambda>x. x \\<in> A) = (\\<lambda>x. x \\<in> B))", "apply standard"], ["proof (prove)\ngoal (2 subgoals):\n 1. A = B \\<Longrightarrow>\n    (\\<lambda>x. x \\<in> A) = (\\<lambda>x. x \\<in> B)\n 2. (\\<lambda>x. x \\<in> A) = (\\<lambda>x. x \\<in> B) \\<Longrightarrow>\n    A = B", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x \\<in> A) = (\\<lambda>x. x \\<in> B) \\<Longrightarrow>\n    A = B", "by (meson equalityI subsetI)"], ["", "lemmas ffilter_eq_iff = Abs_ffilter set_membership_eq fun_eq_iff"], ["", "lemma size_le_1: \"size f \\<le> 1 = (f = {||} \\<or> (\\<exists>e. f = {|e|}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (size f \\<le> 1) = (f = {||} \\<or> (\\<exists>e. f = {|e|}))", "apply standard"], ["proof (prove)\ngoal (2 subgoals):\n 1. size f \\<le> 1 \\<Longrightarrow> f = {||} \\<or> (\\<exists>e. f = {|e|})\n 2. f = {||} \\<or> (\\<exists>e. f = {|e|}) \\<Longrightarrow> size f \\<le> 1", "apply (metis bot.not_eq_extremum gr_implies_not0 le_neq_implies_less less_one size_fsingleton size_fsubset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. f = {||} \\<or> (\\<exists>e. f = {|e|}) \\<Longrightarrow> size f \\<le> 1", "by auto"], ["", "lemma size_gt_1: \"1 < size f \\<Longrightarrow> \\<exists>e1 e2 f'. e1 \\<noteq> e2 \\<and> f = finsert e1 (finsert e2 f')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < size f \\<Longrightarrow>\n    \\<exists>e1 e2 f'. e1 \\<noteq> e2 \\<and> f = finsert e1 (finsert e2 f')", "apply (induct f)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 1 < size {||} \\<Longrightarrow>\n    \\<exists>e1 e2 f'.\n       e1 \\<noteq> e2 \\<and> {||} = finsert e1 (finsert e2 f')\n 2. \\<And>x f.\n       \\<lbrakk>x |\\<notin>| f;\n        1 < size f \\<Longrightarrow>\n        \\<exists>e1 e2 f'.\n           e1 \\<noteq> e2 \\<and> f = finsert e1 (finsert e2 f');\n        1 < size (finsert x f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e1 e2 f'.\n                            e1 \\<noteq> e2 \\<and>\n                            finsert x f = finsert e1 (finsert e2 f')", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>x |\\<notin>| f;\n        1 < size f \\<Longrightarrow>\n        \\<exists>e1 e2 f'.\n           e1 \\<noteq> e2 \\<and> f = finsert e1 (finsert e2 f');\n        1 < size (finsert x f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e1 e2 f'.\n                            e1 \\<noteq> e2 \\<and>\n                            finsert x f = finsert e1 (finsert e2 f')", "apply (rule_tac x=x in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>x |\\<notin>| f;\n        1 < size f \\<Longrightarrow>\n        \\<exists>e1 e2 f'.\n           e1 \\<noteq> e2 \\<and> f = finsert e1 (finsert e2 f');\n        1 < size (finsert x f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e2 f'.\n                            x \\<noteq> e2 \\<and>\n                            finsert x f = finsert x (finsert e2 f')", "by (metis finsertCI leD not_le_imp_less size_le_1)"], ["", "end"]]}