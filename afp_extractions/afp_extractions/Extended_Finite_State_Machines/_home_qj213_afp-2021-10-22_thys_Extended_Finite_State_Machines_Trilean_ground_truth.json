{"file_name": "/home/qj213/afp-2021-10-22/thys/Extended_Finite_State_Machines/Trilean.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Extended_Finite_State_Machines", "problem_names": ["lemma plus_trilean_assoc:\n  \"a \\<or>? b \\<or>? c = a \\<or>? (b \\<or>? c)\"", "lemma plus_trilean_commutative: \"a \\<or>? b = b \\<or>? a\"", "lemma times_trilean_commutative: \"a \\<and>? b = b \\<and>? a\"", "lemma times_trilean_assoc:\n  \"a \\<and>? b \\<and>? c = a \\<and>? (b \\<and>? c)\"", "lemma trilean_distributivity_1:\n  \"(a \\<or>? b) \\<and>? c = a \\<and>? c \\<or>? b \\<and>? c\"", "lemma maybe_or_idempotent: \"a \\<or>? a = a\"", "lemma maybe_and_idempotent: \"a \\<and>? a = a\"", "lemma maybe_and_one: \"true \\<and>? x = x\"", "lemma maybe_or_zero: \"false \\<or>? x = x\"", "lemma maybe_double_negation: \"\\<not>? \\<not>? x = x\"", "lemma maybe_negate_true: \"(\\<not>? x = true) = (x = false)\"", "lemma maybe_negate_false: \"(\\<not>? x = false) = (x = true)\"", "lemma maybe_and_true: \"(x \\<and>? y = true) = (x = true \\<and> y = true)\"", "lemma maybe_and_not_true:\n  \"(x \\<and>? y \\<noteq> true) = (x \\<noteq> true \\<or> y \\<noteq> true)\"", "lemma negate_valid: \"(\\<not>? x \\<noteq> invalid) = (x \\<noteq> invalid)\"", "lemma maybe_and_valid:\n  \"x \\<and>? y \\<noteq> invalid \\<Longrightarrow> x \\<noteq> invalid \\<and> y \\<noteq> invalid\"", "lemma maybe_or_valid:\n  \"x \\<or>? y \\<noteq> invalid \\<Longrightarrow> x \\<noteq> invalid \\<and> y \\<noteq> invalid\"", "lemma maybe_or_false:\n  \"(x \\<or>? y = false) = (x = false \\<and> y = false)\"", "lemma maybe_or_true:\n  \"(x \\<or>? y = true) = ((x = true \\<or> y = true) \\<and> x \\<noteq> invalid \\<and> y \\<noteq> invalid)\"", "lemma maybe_not_invalid: \"(\\<not>? x = invalid) = (x = invalid)\"", "lemma maybe_or_invalid:\n  \"(x \\<or>? y = invalid) = (x = invalid \\<or> y = invalid)\"", "lemma maybe_and_invalid:\n  \"(x \\<and>? y = invalid) = (x = invalid \\<or> y = invalid)\"", "lemma maybe_and_false:\n  \"(x \\<and>? y = false) = ((x = false \\<or> y = false) \\<and> x \\<noteq> invalid \\<and> y \\<noteq> invalid)\"", "lemma invalid_maybe_and: \"invalid \\<and>? x = invalid\"", "lemma maybe_not_eq: \"(\\<not>? x = \\<not>? y) = (x = y)\"", "lemma de_morgans_1:\n  \"\\<not>? (a \\<or>? b) = (\\<not>?a) \\<and>? (\\<not>?b)\"", "lemma de_morgans_2:\n  \"\\<not>? (a \\<and>? b) = (\\<not>?a) \\<or>? (\\<not>?b)\"", "lemma not_true: \"(x \\<noteq> true) = (x = false \\<or> x = invalid)\"", "lemma pull_negation: \"(x = \\<not>? y) = (\\<not>? x = y)\"", "lemma comp_fun_commute_maybe_or: \"comp_fun_commute maybe_or\"", "lemma comp_fun_commute_maybe_and: \"comp_fun_commute maybe_and\""], "translations": [["", "lemma plus_trilean_assoc:\n  \"a \\<or>? b \\<or>? c = a \\<or>? (b \\<or>? c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<or>? b \\<or>? c = a \\<or>? (b \\<or>? c)", "proof(induct a b  arbitrary: c rule: plus_trilean.induct)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>uu_ c. invalid \\<or>? uu_ \\<or>? c = invalid \\<or>? (uu_ \\<or>? c)\n 2. \\<And>c. true \\<or>? invalid \\<or>? c = true \\<or>? (invalid \\<or>? c)\n 3. \\<And>c. false \\<or>? invalid \\<or>? c = false \\<or>? (invalid \\<or>? c)\n 4. \\<And>c. true \\<or>? true \\<or>? c = true \\<or>? (true \\<or>? c)\n 5. \\<And>c. true \\<or>? false \\<or>? c = true \\<or>? (false \\<or>? c)\n 6. \\<And>c. false \\<or>? true \\<or>? c = false \\<or>? (true \\<or>? c)\n 7. \\<And>c. false \\<or>? false \\<or>? c = false \\<or>? (false \\<or>? c)", "case (1 uu)"], ["proof (state)\nthis:\n  \n\ngoal (7 subgoals):\n 1. \\<And>uu_ c. invalid \\<or>? uu_ \\<or>? c = invalid \\<or>? (uu_ \\<or>? c)\n 2. \\<And>c. true \\<or>? invalid \\<or>? c = true \\<or>? (invalid \\<or>? c)\n 3. \\<And>c. false \\<or>? invalid \\<or>? c = false \\<or>? (invalid \\<or>? c)\n 4. \\<And>c. true \\<or>? true \\<or>? c = true \\<or>? (true \\<or>? c)\n 5. \\<And>c. true \\<or>? false \\<or>? c = true \\<or>? (false \\<or>? c)\n 6. \\<And>c. false \\<or>? true \\<or>? c = false \\<or>? (true \\<or>? c)\n 7. \\<And>c. false \\<or>? false \\<or>? c = false \\<or>? (false \\<or>? c)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. invalid \\<or>? uu \\<or>? c = invalid \\<or>? (uu \\<or>? c)", "by simp"], ["proof (state)\nthis:\n  invalid \\<or>? uu \\<or>? c = invalid \\<or>? (uu \\<or>? c)\n\ngoal (6 subgoals):\n 1. \\<And>c. true \\<or>? invalid \\<or>? c = true \\<or>? (invalid \\<or>? c)\n 2. \\<And>c. false \\<or>? invalid \\<or>? c = false \\<or>? (invalid \\<or>? c)\n 3. \\<And>c. true \\<or>? true \\<or>? c = true \\<or>? (true \\<or>? c)\n 4. \\<And>c. true \\<or>? false \\<or>? c = true \\<or>? (false \\<or>? c)\n 5. \\<And>c. false \\<or>? true \\<or>? c = false \\<or>? (true \\<or>? c)\n 6. \\<And>c. false \\<or>? false \\<or>? c = false \\<or>? (false \\<or>? c)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>c. true \\<or>? invalid \\<or>? c = true \\<or>? (invalid \\<or>? c)\n 2. \\<And>c. false \\<or>? invalid \\<or>? c = false \\<or>? (invalid \\<or>? c)\n 3. \\<And>c. true \\<or>? true \\<or>? c = true \\<or>? (true \\<or>? c)\n 4. \\<And>c. true \\<or>? false \\<or>? c = true \\<or>? (false \\<or>? c)\n 5. \\<And>c. false \\<or>? true \\<or>? c = false \\<or>? (true \\<or>? c)\n 6. \\<And>c. false \\<or>? false \\<or>? c = false \\<or>? (false \\<or>? c)", "case \"2_1\""], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>c. true \\<or>? invalid \\<or>? c = true \\<or>? (invalid \\<or>? c)\n 2. \\<And>c. false \\<or>? invalid \\<or>? c = false \\<or>? (invalid \\<or>? c)\n 3. \\<And>c. true \\<or>? true \\<or>? c = true \\<or>? (true \\<or>? c)\n 4. \\<And>c. true \\<or>? false \\<or>? c = true \\<or>? (false \\<or>? c)\n 5. \\<And>c. false \\<or>? true \\<or>? c = false \\<or>? (true \\<or>? c)\n 6. \\<And>c. false \\<or>? false \\<or>? c = false \\<or>? (false \\<or>? c)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. true \\<or>? invalid \\<or>? c = true \\<or>? (invalid \\<or>? c)", "by simp"], ["proof (state)\nthis:\n  true \\<or>? invalid \\<or>? c = true \\<or>? (invalid \\<or>? c)\n\ngoal (5 subgoals):\n 1. \\<And>c. false \\<or>? invalid \\<or>? c = false \\<or>? (invalid \\<or>? c)\n 2. \\<And>c. true \\<or>? true \\<or>? c = true \\<or>? (true \\<or>? c)\n 3. \\<And>c. true \\<or>? false \\<or>? c = true \\<or>? (false \\<or>? c)\n 4. \\<And>c. false \\<or>? true \\<or>? c = false \\<or>? (true \\<or>? c)\n 5. \\<And>c. false \\<or>? false \\<or>? c = false \\<or>? (false \\<or>? c)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>c. false \\<or>? invalid \\<or>? c = false \\<or>? (invalid \\<or>? c)\n 2. \\<And>c. true \\<or>? true \\<or>? c = true \\<or>? (true \\<or>? c)\n 3. \\<And>c. true \\<or>? false \\<or>? c = true \\<or>? (false \\<or>? c)\n 4. \\<And>c. false \\<or>? true \\<or>? c = false \\<or>? (true \\<or>? c)\n 5. \\<And>c. false \\<or>? false \\<or>? c = false \\<or>? (false \\<or>? c)", "case \"2_2\""], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>c. false \\<or>? invalid \\<or>? c = false \\<or>? (invalid \\<or>? c)\n 2. \\<And>c. true \\<or>? true \\<or>? c = true \\<or>? (true \\<or>? c)\n 3. \\<And>c. true \\<or>? false \\<or>? c = true \\<or>? (false \\<or>? c)\n 4. \\<And>c. false \\<or>? true \\<or>? c = false \\<or>? (true \\<or>? c)\n 5. \\<And>c. false \\<or>? false \\<or>? c = false \\<or>? (false \\<or>? c)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. false \\<or>? invalid \\<or>? c = false \\<or>? (invalid \\<or>? c)", "by simp"], ["proof (state)\nthis:\n  false \\<or>? invalid \\<or>? c = false \\<or>? (invalid \\<or>? c)\n\ngoal (4 subgoals):\n 1. \\<And>c. true \\<or>? true \\<or>? c = true \\<or>? (true \\<or>? c)\n 2. \\<And>c. true \\<or>? false \\<or>? c = true \\<or>? (false \\<or>? c)\n 3. \\<And>c. false \\<or>? true \\<or>? c = false \\<or>? (true \\<or>? c)\n 4. \\<And>c. false \\<or>? false \\<or>? c = false \\<or>? (false \\<or>? c)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>c. true \\<or>? true \\<or>? c = true \\<or>? (true \\<or>? c)\n 2. \\<And>c. true \\<or>? false \\<or>? c = true \\<or>? (false \\<or>? c)\n 3. \\<And>c. false \\<or>? true \\<or>? c = false \\<or>? (true \\<or>? c)\n 4. \\<And>c. false \\<or>? false \\<or>? c = false \\<or>? (false \\<or>? c)", "case \"3_1\""], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>c. true \\<or>? true \\<or>? c = true \\<or>? (true \\<or>? c)\n 2. \\<And>c. true \\<or>? false \\<or>? c = true \\<or>? (false \\<or>? c)\n 3. \\<And>c. false \\<or>? true \\<or>? c = false \\<or>? (true \\<or>? c)\n 4. \\<And>c. false \\<or>? false \\<or>? c = false \\<or>? (false \\<or>? c)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. true \\<or>? true \\<or>? c = true \\<or>? (true \\<or>? c)", "by (metis plus_trilean.simps(2) plus_trilean.simps(4) trilean.exhaust)"], ["proof (state)\nthis:\n  true \\<or>? true \\<or>? c = true \\<or>? (true \\<or>? c)\n\ngoal (3 subgoals):\n 1. \\<And>c. true \\<or>? false \\<or>? c = true \\<or>? (false \\<or>? c)\n 2. \\<And>c. false \\<or>? true \\<or>? c = false \\<or>? (true \\<or>? c)\n 3. \\<And>c. false \\<or>? false \\<or>? c = false \\<or>? (false \\<or>? c)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>c. true \\<or>? false \\<or>? c = true \\<or>? (false \\<or>? c)\n 2. \\<And>c. false \\<or>? true \\<or>? c = false \\<or>? (true \\<or>? c)\n 3. \\<And>c. false \\<or>? false \\<or>? c = false \\<or>? (false \\<or>? c)", "case \"3_2\""], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>c. true \\<or>? false \\<or>? c = true \\<or>? (false \\<or>? c)\n 2. \\<And>c. false \\<or>? true \\<or>? c = false \\<or>? (true \\<or>? c)\n 3. \\<And>c. false \\<or>? false \\<or>? c = false \\<or>? (false \\<or>? c)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. true \\<or>? false \\<or>? c = true \\<or>? (false \\<or>? c)", "by (metis plus_trilean.simps(3) plus_trilean.simps(5) plus_trilean.simps(6) plus_trilean.simps(7) trilean.exhaust)"], ["proof (state)\nthis:\n  true \\<or>? false \\<or>? c = true \\<or>? (false \\<or>? c)\n\ngoal (2 subgoals):\n 1. \\<And>c. false \\<or>? true \\<or>? c = false \\<or>? (true \\<or>? c)\n 2. \\<And>c. false \\<or>? false \\<or>? c = false \\<or>? (false \\<or>? c)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c. false \\<or>? true \\<or>? c = false \\<or>? (true \\<or>? c)\n 2. \\<And>c. false \\<or>? false \\<or>? c = false \\<or>? (false \\<or>? c)", "case 4"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>c. false \\<or>? true \\<or>? c = false \\<or>? (true \\<or>? c)\n 2. \\<And>c. false \\<or>? false \\<or>? c = false \\<or>? (false \\<or>? c)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. false \\<or>? true \\<or>? c = false \\<or>? (true \\<or>? c)", "by (metis plus_trilean.simps(2) plus_trilean.simps(3) plus_trilean.simps(4) plus_trilean.simps(5) plus_trilean.simps(6) trilean.exhaust)"], ["proof (state)\nthis:\n  false \\<or>? true \\<or>? c = false \\<or>? (true \\<or>? c)\n\ngoal (1 subgoal):\n 1. \\<And>c. false \\<or>? false \\<or>? c = false \\<or>? (false \\<or>? c)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c. false \\<or>? false \\<or>? c = false \\<or>? (false \\<or>? c)", "case 5"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>c. false \\<or>? false \\<or>? c = false \\<or>? (false \\<or>? c)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. false \\<or>? false \\<or>? c = false \\<or>? (false \\<or>? c)", "by (metis plus_trilean.simps(6) plus_trilean.simps(7) trilean.exhaust)"], ["proof (state)\nthis:\n  false \\<or>? false \\<or>? c = false \\<or>? (false \\<or>? c)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma plus_trilean_commutative: \"a \\<or>? b = b \\<or>? a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<or>? b = b \\<or>? a", "proof(induct a b rule: plus_trilean.induct)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>uu_. invalid \\<or>? uu_ = uu_ \\<or>? invalid\n 2. true \\<or>? invalid = invalid \\<or>? true\n 3. false \\<or>? invalid = invalid \\<or>? false\n 4. true \\<or>? true = true \\<or>? true\n 5. true \\<or>? false = false \\<or>? true\n 6. false \\<or>? true = true \\<or>? false\n 7. false \\<or>? false = false \\<or>? false", "case (1 uu)"], ["proof (state)\nthis:\n  \n\ngoal (7 subgoals):\n 1. \\<And>uu_. invalid \\<or>? uu_ = uu_ \\<or>? invalid\n 2. true \\<or>? invalid = invalid \\<or>? true\n 3. false \\<or>? invalid = invalid \\<or>? false\n 4. true \\<or>? true = true \\<or>? true\n 5. true \\<or>? false = false \\<or>? true\n 6. false \\<or>? true = true \\<or>? false\n 7. false \\<or>? false = false \\<or>? false", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. invalid \\<or>? uu = uu \\<or>? invalid", "by (metis plus_trilean.simps(1) plus_trilean.simps(2) plus_trilean.simps(3) trilean.exhaust)"], ["proof (state)\nthis:\n  invalid \\<or>? uu = uu \\<or>? invalid\n\ngoal (6 subgoals):\n 1. true \\<or>? invalid = invalid \\<or>? true\n 2. false \\<or>? invalid = invalid \\<or>? false\n 3. true \\<or>? true = true \\<or>? true\n 4. true \\<or>? false = false \\<or>? true\n 5. false \\<or>? true = true \\<or>? false\n 6. false \\<or>? false = false \\<or>? false", "qed auto"], ["", "lemma times_trilean_commutative: \"a \\<and>? b = b \\<and>? a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<and>? b = b \\<and>? a", "by (metis (mono_tags) times_trilean.simps trilean.distinct(5) trilean.exhaust)"], ["", "lemma times_trilean_assoc:\n  \"a \\<and>? b \\<and>? c = a \\<and>? (b \\<and>? c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<and>? b \\<and>? c = a \\<and>? (b \\<and>? c)", "proof(induct a b  arbitrary: c rule: plus_trilean.induct)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>uu_ c.\n       invalid \\<and>? uu_ \\<and>? c = invalid \\<and>? (uu_ \\<and>? c)\n 2. \\<And>c.\n       true \\<and>? invalid \\<and>? c = true \\<and>? (invalid \\<and>? c)\n 3. \\<And>c.\n       false \\<and>? invalid \\<and>? c = false \\<and>? (invalid \\<and>? c)\n 4. \\<And>c. true \\<and>? true \\<and>? c = true \\<and>? (true \\<and>? c)\n 5. \\<And>c. true \\<and>? false \\<and>? c = true \\<and>? (false \\<and>? c)\n 6. \\<And>c. false \\<and>? true \\<and>? c = false \\<and>? (true \\<and>? c)\n 7. \\<And>c. false \\<and>? false \\<and>? c = false \\<and>? (false \\<and>? c)", "case (1 uu)"], ["proof (state)\nthis:\n  \n\ngoal (7 subgoals):\n 1. \\<And>uu_ c.\n       invalid \\<and>? uu_ \\<and>? c = invalid \\<and>? (uu_ \\<and>? c)\n 2. \\<And>c.\n       true \\<and>? invalid \\<and>? c = true \\<and>? (invalid \\<and>? c)\n 3. \\<And>c.\n       false \\<and>? invalid \\<and>? c = false \\<and>? (invalid \\<and>? c)\n 4. \\<And>c. true \\<and>? true \\<and>? c = true \\<and>? (true \\<and>? c)\n 5. \\<And>c. true \\<and>? false \\<and>? c = true \\<and>? (false \\<and>? c)\n 6. \\<And>c. false \\<and>? true \\<and>? c = false \\<and>? (true \\<and>? c)\n 7. \\<And>c. false \\<and>? false \\<and>? c = false \\<and>? (false \\<and>? c)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. invalid \\<and>? uu \\<and>? c = invalid \\<and>? (uu \\<and>? c)", "by (metis (mono_tags, lifting) times_trilean.simps(1) times_trilean_commutative)"], ["proof (state)\nthis:\n  invalid \\<and>? uu \\<and>? c = invalid \\<and>? (uu \\<and>? c)\n\ngoal (6 subgoals):\n 1. \\<And>c.\n       true \\<and>? invalid \\<and>? c = true \\<and>? (invalid \\<and>? c)\n 2. \\<And>c.\n       false \\<and>? invalid \\<and>? c = false \\<and>? (invalid \\<and>? c)\n 3. \\<And>c. true \\<and>? true \\<and>? c = true \\<and>? (true \\<and>? c)\n 4. \\<And>c. true \\<and>? false \\<and>? c = true \\<and>? (false \\<and>? c)\n 5. \\<And>c. false \\<and>? true \\<and>? c = false \\<and>? (true \\<and>? c)\n 6. \\<And>c. false \\<and>? false \\<and>? c = false \\<and>? (false \\<and>? c)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>c.\n       true \\<and>? invalid \\<and>? c = true \\<and>? (invalid \\<and>? c)\n 2. \\<And>c.\n       false \\<and>? invalid \\<and>? c = false \\<and>? (invalid \\<and>? c)\n 3. \\<And>c. true \\<and>? true \\<and>? c = true \\<and>? (true \\<and>? c)\n 4. \\<And>c. true \\<and>? false \\<and>? c = true \\<and>? (false \\<and>? c)\n 5. \\<And>c. false \\<and>? true \\<and>? c = false \\<and>? (true \\<and>? c)\n 6. \\<And>c. false \\<and>? false \\<and>? c = false \\<and>? (false \\<and>? c)", "case \"2_1\""], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>c.\n       true \\<and>? invalid \\<and>? c = true \\<and>? (invalid \\<and>? c)\n 2. \\<And>c.\n       false \\<and>? invalid \\<and>? c = false \\<and>? (invalid \\<and>? c)\n 3. \\<And>c. true \\<and>? true \\<and>? c = true \\<and>? (true \\<and>? c)\n 4. \\<And>c. true \\<and>? false \\<and>? c = true \\<and>? (false \\<and>? c)\n 5. \\<And>c. false \\<and>? true \\<and>? c = false \\<and>? (true \\<and>? c)\n 6. \\<And>c. false \\<and>? false \\<and>? c = false \\<and>? (false \\<and>? c)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. true \\<and>? invalid \\<and>? c = true \\<and>? (invalid \\<and>? c)", "by (metis (mono_tags, lifting) times_trilean.simps(1) times_trilean_commutative)"], ["proof (state)\nthis:\n  true \\<and>? invalid \\<and>? c = true \\<and>? (invalid \\<and>? c)\n\ngoal (5 subgoals):\n 1. \\<And>c.\n       false \\<and>? invalid \\<and>? c = false \\<and>? (invalid \\<and>? c)\n 2. \\<And>c. true \\<and>? true \\<and>? c = true \\<and>? (true \\<and>? c)\n 3. \\<And>c. true \\<and>? false \\<and>? c = true \\<and>? (false \\<and>? c)\n 4. \\<And>c. false \\<and>? true \\<and>? c = false \\<and>? (true \\<and>? c)\n 5. \\<And>c. false \\<and>? false \\<and>? c = false \\<and>? (false \\<and>? c)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>c.\n       false \\<and>? invalid \\<and>? c = false \\<and>? (invalid \\<and>? c)\n 2. \\<And>c. true \\<and>? true \\<and>? c = true \\<and>? (true \\<and>? c)\n 3. \\<And>c. true \\<and>? false \\<and>? c = true \\<and>? (false \\<and>? c)\n 4. \\<And>c. false \\<and>? true \\<and>? c = false \\<and>? (true \\<and>? c)\n 5. \\<And>c. false \\<and>? false \\<and>? c = false \\<and>? (false \\<and>? c)", "case \"2_2\""], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>c.\n       false \\<and>? invalid \\<and>? c = false \\<and>? (invalid \\<and>? c)\n 2. \\<And>c. true \\<and>? true \\<and>? c = true \\<and>? (true \\<and>? c)\n 3. \\<And>c. true \\<and>? false \\<and>? c = true \\<and>? (false \\<and>? c)\n 4. \\<And>c. false \\<and>? true \\<and>? c = false \\<and>? (true \\<and>? c)\n 5. \\<And>c. false \\<and>? false \\<and>? c = false \\<and>? (false \\<and>? c)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. false \\<and>? invalid \\<and>? c = false \\<and>? (invalid \\<and>? c)", "by (metis (mono_tags, lifting) times_trilean.simps(1) times_trilean_commutative)"], ["proof (state)\nthis:\n  false \\<and>? invalid \\<and>? c = false \\<and>? (invalid \\<and>? c)\n\ngoal (4 subgoals):\n 1. \\<And>c. true \\<and>? true \\<and>? c = true \\<and>? (true \\<and>? c)\n 2. \\<And>c. true \\<and>? false \\<and>? c = true \\<and>? (false \\<and>? c)\n 3. \\<And>c. false \\<and>? true \\<and>? c = false \\<and>? (true \\<and>? c)\n 4. \\<And>c. false \\<and>? false \\<and>? c = false \\<and>? (false \\<and>? c)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>c. true \\<and>? true \\<and>? c = true \\<and>? (true \\<and>? c)\n 2. \\<And>c. true \\<and>? false \\<and>? c = true \\<and>? (false \\<and>? c)\n 3. \\<And>c. false \\<and>? true \\<and>? c = false \\<and>? (true \\<and>? c)\n 4. \\<And>c. false \\<and>? false \\<and>? c = false \\<and>? (false \\<and>? c)", "case \"3_1\""], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>c. true \\<and>? true \\<and>? c = true \\<and>? (true \\<and>? c)\n 2. \\<And>c. true \\<and>? false \\<and>? c = true \\<and>? (false \\<and>? c)\n 3. \\<And>c. false \\<and>? true \\<and>? c = false \\<and>? (true \\<and>? c)\n 4. \\<And>c. false \\<and>? false \\<and>? c = false \\<and>? (false \\<and>? c)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. true \\<and>? true \\<and>? c = true \\<and>? (true \\<and>? c)", "by (metis times_trilean.simps(1) times_trilean.simps(4) times_trilean.simps(5) trilean.exhaust)"], ["proof (state)\nthis:\n  true \\<and>? true \\<and>? c = true \\<and>? (true \\<and>? c)\n\ngoal (3 subgoals):\n 1. \\<And>c. true \\<and>? false \\<and>? c = true \\<and>? (false \\<and>? c)\n 2. \\<And>c. false \\<and>? true \\<and>? c = false \\<and>? (true \\<and>? c)\n 3. \\<And>c. false \\<and>? false \\<and>? c = false \\<and>? (false \\<and>? c)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>c. true \\<and>? false \\<and>? c = true \\<and>? (false \\<and>? c)\n 2. \\<And>c. false \\<and>? true \\<and>? c = false \\<and>? (true \\<and>? c)\n 3. \\<And>c. false \\<and>? false \\<and>? c = false \\<and>? (false \\<and>? c)", "case \"3_2\""], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>c. true \\<and>? false \\<and>? c = true \\<and>? (false \\<and>? c)\n 2. \\<And>c. false \\<and>? true \\<and>? c = false \\<and>? (true \\<and>? c)\n 3. \\<And>c. false \\<and>? false \\<and>? c = false \\<and>? (false \\<and>? c)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. true \\<and>? false \\<and>? c = true \\<and>? (false \\<and>? c)", "by (metis times_trilean.simps(1) times_trilean.simps(5) times_trilean.simps(6) times_trilean.simps(7) trilean.exhaust)"], ["proof (state)\nthis:\n  true \\<and>? false \\<and>? c = true \\<and>? (false \\<and>? c)\n\ngoal (2 subgoals):\n 1. \\<And>c. false \\<and>? true \\<and>? c = false \\<and>? (true \\<and>? c)\n 2. \\<And>c. false \\<and>? false \\<and>? c = false \\<and>? (false \\<and>? c)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c. false \\<and>? true \\<and>? c = false \\<and>? (true \\<and>? c)\n 2. \\<And>c. false \\<and>? false \\<and>? c = false \\<and>? (false \\<and>? c)", "case 4"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>c. false \\<and>? true \\<and>? c = false \\<and>? (true \\<and>? c)\n 2. \\<And>c. false \\<and>? false \\<and>? c = false \\<and>? (false \\<and>? c)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. false \\<and>? true \\<and>? c = false \\<and>? (true \\<and>? c)", "by (metis times_trilean.simps(1) times_trilean.simps(4) times_trilean.simps(5) times_trilean.simps(7) trilean.exhaust)"], ["proof (state)\nthis:\n  false \\<and>? true \\<and>? c = false \\<and>? (true \\<and>? c)\n\ngoal (1 subgoal):\n 1. \\<And>c. false \\<and>? false \\<and>? c = false \\<and>? (false \\<and>? c)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c. false \\<and>? false \\<and>? c = false \\<and>? (false \\<and>? c)", "case 5"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>c. false \\<and>? false \\<and>? c = false \\<and>? (false \\<and>? c)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. false \\<and>? false \\<and>? c = false \\<and>? (false \\<and>? c)", "by (metis (full_types) times_trilean.simps(1) times_trilean.simps(6) times_trilean.simps(7) trilean.exhaust)"], ["proof (state)\nthis:\n  false \\<and>? false \\<and>? c = false \\<and>? (false \\<and>? c)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma trilean_distributivity_1:\n  \"(a \\<or>? b) \\<and>? c = a \\<and>? c \\<or>? b \\<and>? c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<or>? b) \\<and>? c = a \\<and>? c \\<or>? b \\<and>? c", "proof(induct a b rule: times_trilean.induct)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>uu_.\n       (uu_ \\<or>? invalid) \\<and>? c =\n       uu_ \\<and>? c \\<or>? invalid \\<and>? c\n 2. (invalid \\<or>? true) \\<and>? c =\n    invalid \\<and>? c \\<or>? true \\<and>? c\n 3. (invalid \\<or>? false) \\<and>? c =\n    invalid \\<and>? c \\<or>? false \\<and>? c\n 4. (true \\<or>? true) \\<and>? c = true \\<and>? c \\<or>? true \\<and>? c\n 5. (true \\<or>? false) \\<and>? c = true \\<and>? c \\<or>? false \\<and>? c\n 6. (false \\<or>? false) \\<and>? c = false \\<and>? c \\<or>? false \\<and>? c\n 7. (false \\<or>? true) \\<and>? c = false \\<and>? c \\<or>? true \\<and>? c", "case (1 uu)"], ["proof (state)\nthis:\n  \n\ngoal (7 subgoals):\n 1. \\<And>uu_.\n       (uu_ \\<or>? invalid) \\<and>? c =\n       uu_ \\<and>? c \\<or>? invalid \\<and>? c\n 2. (invalid \\<or>? true) \\<and>? c =\n    invalid \\<and>? c \\<or>? true \\<and>? c\n 3. (invalid \\<or>? false) \\<and>? c =\n    invalid \\<and>? c \\<or>? false \\<and>? c\n 4. (true \\<or>? true) \\<and>? c = true \\<and>? c \\<or>? true \\<and>? c\n 5. (true \\<or>? false) \\<and>? c = true \\<and>? c \\<or>? false \\<and>? c\n 6. (false \\<or>? false) \\<and>? c = false \\<and>? c \\<or>? false \\<and>? c\n 7. (false \\<or>? true) \\<and>? c = false \\<and>? c \\<or>? true \\<and>? c", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (uu \\<or>? invalid) \\<and>? c = uu \\<and>? c \\<or>? invalid \\<and>? c", "by (metis (mono_tags, lifting) plus_trilean.simps(1) plus_trilean_commutative times_trilean.simps(1) times_trilean_commutative)"], ["proof (state)\nthis:\n  (uu \\<or>? invalid) \\<and>? c = uu \\<and>? c \\<or>? invalid \\<and>? c\n\ngoal (6 subgoals):\n 1. (invalid \\<or>? true) \\<and>? c =\n    invalid \\<and>? c \\<or>? true \\<and>? c\n 2. (invalid \\<or>? false) \\<and>? c =\n    invalid \\<and>? c \\<or>? false \\<and>? c\n 3. (true \\<or>? true) \\<and>? c = true \\<and>? c \\<or>? true \\<and>? c\n 4. (true \\<or>? false) \\<and>? c = true \\<and>? c \\<or>? false \\<and>? c\n 5. (false \\<or>? false) \\<and>? c = false \\<and>? c \\<or>? false \\<and>? c\n 6. (false \\<or>? true) \\<and>? c = false \\<and>? c \\<or>? true \\<and>? c", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. (invalid \\<or>? true) \\<and>? c =\n    invalid \\<and>? c \\<or>? true \\<and>? c\n 2. (invalid \\<or>? false) \\<and>? c =\n    invalid \\<and>? c \\<or>? false \\<and>? c\n 3. (true \\<or>? true) \\<and>? c = true \\<and>? c \\<or>? true \\<and>? c\n 4. (true \\<or>? false) \\<and>? c = true \\<and>? c \\<or>? false \\<and>? c\n 5. (false \\<or>? false) \\<and>? c = false \\<and>? c \\<or>? false \\<and>? c\n 6. (false \\<or>? true) \\<and>? c = false \\<and>? c \\<or>? true \\<and>? c", "case \"2_1\""], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. (invalid \\<or>? true) \\<and>? c =\n    invalid \\<and>? c \\<or>? true \\<and>? c\n 2. (invalid \\<or>? false) \\<and>? c =\n    invalid \\<and>? c \\<or>? false \\<and>? c\n 3. (true \\<or>? true) \\<and>? c = true \\<and>? c \\<or>? true \\<and>? c\n 4. (true \\<or>? false) \\<and>? c = true \\<and>? c \\<or>? false \\<and>? c\n 5. (false \\<or>? false) \\<and>? c = false \\<and>? c \\<or>? false \\<and>? c\n 6. (false \\<or>? true) \\<and>? c = false \\<and>? c \\<or>? true \\<and>? c", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (invalid \\<or>? true) \\<and>? c =\n    invalid \\<and>? c \\<or>? true \\<and>? c", "by (metis (mono_tags, lifting) plus_trilean.simps(1) times_trilean.simps(1) times_trilean_commutative)"], ["proof (state)\nthis:\n  (invalid \\<or>? true) \\<and>? c = invalid \\<and>? c \\<or>? true \\<and>? c\n\ngoal (5 subgoals):\n 1. (invalid \\<or>? false) \\<and>? c =\n    invalid \\<and>? c \\<or>? false \\<and>? c\n 2. (true \\<or>? true) \\<and>? c = true \\<and>? c \\<or>? true \\<and>? c\n 3. (true \\<or>? false) \\<and>? c = true \\<and>? c \\<or>? false \\<and>? c\n 4. (false \\<or>? false) \\<and>? c = false \\<and>? c \\<or>? false \\<and>? c\n 5. (false \\<or>? true) \\<and>? c = false \\<and>? c \\<or>? true \\<and>? c", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. (invalid \\<or>? false) \\<and>? c =\n    invalid \\<and>? c \\<or>? false \\<and>? c\n 2. (true \\<or>? true) \\<and>? c = true \\<and>? c \\<or>? true \\<and>? c\n 3. (true \\<or>? false) \\<and>? c = true \\<and>? c \\<or>? false \\<and>? c\n 4. (false \\<or>? false) \\<and>? c = false \\<and>? c \\<or>? false \\<and>? c\n 5. (false \\<or>? true) \\<and>? c = false \\<and>? c \\<or>? true \\<and>? c", "case \"2_2\""], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. (invalid \\<or>? false) \\<and>? c =\n    invalid \\<and>? c \\<or>? false \\<and>? c\n 2. (true \\<or>? true) \\<and>? c = true \\<and>? c \\<or>? true \\<and>? c\n 3. (true \\<or>? false) \\<and>? c = true \\<and>? c \\<or>? false \\<and>? c\n 4. (false \\<or>? false) \\<and>? c = false \\<and>? c \\<or>? false \\<and>? c\n 5. (false \\<or>? true) \\<and>? c = false \\<and>? c \\<or>? true \\<and>? c", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (invalid \\<or>? false) \\<and>? c =\n    invalid \\<and>? c \\<or>? false \\<and>? c", "by (metis (mono_tags, lifting) plus_trilean.simps(1) times_trilean.simps(1) times_trilean_commutative)"], ["proof (state)\nthis:\n  (invalid \\<or>? false) \\<and>? c =\n  invalid \\<and>? c \\<or>? false \\<and>? c\n\ngoal (4 subgoals):\n 1. (true \\<or>? true) \\<and>? c = true \\<and>? c \\<or>? true \\<and>? c\n 2. (true \\<or>? false) \\<and>? c = true \\<and>? c \\<or>? false \\<and>? c\n 3. (false \\<or>? false) \\<and>? c = false \\<and>? c \\<or>? false \\<and>? c\n 4. (false \\<or>? true) \\<and>? c = false \\<and>? c \\<or>? true \\<and>? c", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. (true \\<or>? true) \\<and>? c = true \\<and>? c \\<or>? true \\<and>? c\n 2. (true \\<or>? false) \\<and>? c = true \\<and>? c \\<or>? false \\<and>? c\n 3. (false \\<or>? false) \\<and>? c = false \\<and>? c \\<or>? false \\<and>? c\n 4. (false \\<or>? true) \\<and>? c = false \\<and>? c \\<or>? true \\<and>? c", "case 3"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. (true \\<or>? true) \\<and>? c = true \\<and>? c \\<or>? true \\<and>? c\n 2. (true \\<or>? false) \\<and>? c = true \\<and>? c \\<or>? false \\<and>? c\n 3. (false \\<or>? false) \\<and>? c = false \\<and>? c \\<or>? false \\<and>? c\n 4. (false \\<or>? true) \\<and>? c = false \\<and>? c \\<or>? true \\<and>? c", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (true \\<or>? true) \\<and>? c = true \\<and>? c \\<or>? true \\<and>? c", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. true \\<and>? c = true \\<and>? c \\<or>? true \\<and>? c", "by (metis (no_types, hide_lams) plus_trilean.simps(1) plus_trilean.simps(4) plus_trilean.simps(7) times_trilean.simps(1) times_trilean.simps(4) times_trilean.simps(5) trilean.exhaust)"], ["proof (state)\nthis:\n  (true \\<or>? true) \\<and>? c = true \\<and>? c \\<or>? true \\<and>? c\n\ngoal (3 subgoals):\n 1. (true \\<or>? false) \\<and>? c = true \\<and>? c \\<or>? false \\<and>? c\n 2. (false \\<or>? false) \\<and>? c = false \\<and>? c \\<or>? false \\<and>? c\n 3. (false \\<or>? true) \\<and>? c = false \\<and>? c \\<or>? true \\<and>? c", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. (true \\<or>? false) \\<and>? c = true \\<and>? c \\<or>? false \\<and>? c\n 2. (false \\<or>? false) \\<and>? c = false \\<and>? c \\<or>? false \\<and>? c\n 3. (false \\<or>? true) \\<and>? c = false \\<and>? c \\<or>? true \\<and>? c", "case \"4_1\""], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. (true \\<or>? false) \\<and>? c = true \\<and>? c \\<or>? false \\<and>? c\n 2. (false \\<or>? false) \\<and>? c = false \\<and>? c \\<or>? false \\<and>? c\n 3. (false \\<or>? true) \\<and>? c = false \\<and>? c \\<or>? true \\<and>? c", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (true \\<or>? false) \\<and>? c = true \\<and>? c \\<or>? false \\<and>? c", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. true \\<and>? c = true \\<and>? c \\<or>? false \\<and>? c", "by (metis (no_types, hide_lams) plus_trilean.simps(1) plus_trilean.simps(5) plus_trilean.simps(7) times_trilean.simps(1) times_trilean.simps(4) times_trilean.simps(5) times_trilean.simps(6) times_trilean.simps(7) trilean.exhaust)"], ["proof (state)\nthis:\n  (true \\<or>? false) \\<and>? c = true \\<and>? c \\<or>? false \\<and>? c\n\ngoal (2 subgoals):\n 1. (false \\<or>? false) \\<and>? c = false \\<and>? c \\<or>? false \\<and>? c\n 2. (false \\<or>? true) \\<and>? c = false \\<and>? c \\<or>? true \\<and>? c", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. (false \\<or>? false) \\<and>? c = false \\<and>? c \\<or>? false \\<and>? c\n 2. (false \\<or>? true) \\<and>? c = false \\<and>? c \\<or>? true \\<and>? c", "case \"4_2\""], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (false \\<or>? false) \\<and>? c = false \\<and>? c \\<or>? false \\<and>? c\n 2. (false \\<or>? true) \\<and>? c = false \\<and>? c \\<or>? true \\<and>? c", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (false \\<or>? false) \\<and>? c = false \\<and>? c \\<or>? false \\<and>? c", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. false \\<and>? c = false \\<and>? c \\<or>? false \\<and>? c", "by (metis (no_types, hide_lams) plus_trilean.simps(1) plus_trilean.simps(7) times_trilean.simps(1) times_trilean.simps(6) times_trilean.simps(7) trilean.exhaust)"], ["proof (state)\nthis:\n  (false \\<or>? false) \\<and>? c = false \\<and>? c \\<or>? false \\<and>? c\n\ngoal (1 subgoal):\n 1. (false \\<or>? true) \\<and>? c = false \\<and>? c \\<or>? true \\<and>? c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (false \\<or>? true) \\<and>? c = false \\<and>? c \\<or>? true \\<and>? c", "case 5"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. (false \\<or>? true) \\<and>? c = false \\<and>? c \\<or>? true \\<and>? c", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (false \\<or>? true) \\<and>? c = false \\<and>? c \\<or>? true \\<and>? c", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. true \\<and>? c = false \\<and>? c \\<or>? true \\<and>? c", "by (metis (no_types, hide_lams) plus_trilean.simps(1) plus_trilean.simps(6) plus_trilean.simps(7) times_trilean.simps(1) times_trilean.simps(4) times_trilean.simps(5) times_trilean.simps(6) times_trilean.simps(7) trilean.exhaust)"], ["proof (state)\nthis:\n  (false \\<or>? true) \\<and>? c = false \\<and>? c \\<or>? true \\<and>? c\n\ngoal:\nNo subgoals!", "qed"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(trilean, semiring_class)", "apply standard"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a b c. a \\<or>? b \\<or>? c = a \\<or>? (b \\<or>? c)\n 2. \\<And>a b. a \\<or>? b = b \\<or>? a\n 3. \\<And>a b c. a \\<and>? b \\<and>? c = a \\<and>? (b \\<and>? c)\n 4. \\<And>a b c. (a \\<or>? b) \\<and>? c = a \\<and>? c \\<or>? b \\<and>? c\n 5. \\<And>a b c. a \\<and>? (b \\<or>? c) = a \\<and>? b \\<or>? a \\<and>? c", "apply (simp add: plus_trilean_assoc)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b. a \\<or>? b = b \\<or>? a\n 2. \\<And>a b c. a \\<and>? b \\<and>? c = a \\<and>? (b \\<and>? c)\n 3. \\<And>a b c. (a \\<or>? b) \\<and>? c = a \\<and>? c \\<or>? b \\<and>? c\n 4. \\<And>a b c. a \\<and>? (b \\<or>? c) = a \\<and>? b \\<or>? a \\<and>? c", "apply (simp add: plus_trilean_commutative)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b c. a \\<and>? b \\<and>? c = a \\<and>? (b \\<and>? c)\n 2. \\<And>a b c. (a \\<or>? b) \\<and>? c = a \\<and>? c \\<or>? b \\<and>? c\n 3. \\<And>a b c. a \\<and>? (b \\<or>? c) = a \\<and>? b \\<or>? a \\<and>? c", "apply (simp add: times_trilean_assoc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b c. (a \\<or>? b) \\<and>? c = a \\<and>? c \\<or>? b \\<and>? c\n 2. \\<And>a b c. a \\<and>? (b \\<or>? c) = a \\<and>? b \\<or>? a \\<and>? c", "apply (simp add: trilean_distributivity_1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c. a \\<and>? (b \\<or>? c) = a \\<and>? b \\<or>? a \\<and>? c", "using times_trilean_commutative trilean_distributivity_1"], ["proof (prove)\nusing this:\n  ?a \\<and>? ?b = ?b \\<and>? ?a\n  (?a \\<or>? ?b) \\<and>? ?c = ?a \\<and>? ?c \\<or>? ?b \\<and>? ?c\n\ngoal (1 subgoal):\n 1. \\<And>a b c. a \\<and>? (b \\<or>? c) = a \\<and>? b \\<or>? a \\<and>? c", "by auto"], ["", "end"], ["", "lemma maybe_or_idempotent: \"a \\<or>? a = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<or>? a = a", "by (cases a) auto"], ["", "lemma maybe_and_idempotent: \"a \\<and>? a = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<and>? a = a", "by (cases a) auto"], ["", "instantiation trilean :: ord begin"], ["", "definition less_eq_trilean :: \"trilean \\<Rightarrow> trilean \\<Rightarrow> bool\" where\n  \"less_eq_trilean a b = (a + b = b)\""], ["", "definition less_trilean :: \"trilean \\<Rightarrow> trilean \\<Rightarrow> bool\" where\n  \"less_trilean a b = (a \\<le> b \\<and> a \\<noteq> b)\""], ["", "declare less_trilean_def less_eq_trilean_def [simp]"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(trilean, ord_class)", "by standard"], ["", "end"], ["", "instantiation trilean :: uminus begin"], ["", "fun maybe_not :: \"trilean \\<Rightarrow> trilean\" (\"\\<not>? _\" [60] 60) where\n    \"\\<not>? true = false\" |\n    \"\\<not>? false = true\" |\n    \"\\<not>? invalid = invalid\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(trilean, uminus_class)", "by standard"], ["", "end"], ["", "lemma maybe_and_one: \"true \\<and>? x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. true \\<and>? x = x", "by (cases x, auto)"], ["", "lemma maybe_or_zero: \"false \\<or>? x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. false \\<or>? x = x", "by (cases x, auto)"], ["", "lemma maybe_double_negation: \"\\<not>? \\<not>? x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not>? \\<not>? x = x", "by (cases x, auto)"], ["", "lemma maybe_negate_true: \"(\\<not>? x = true) = (x = false)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not>? x = true) = (x = false)", "by (cases x, auto)"], ["", "lemma maybe_negate_false: \"(\\<not>? x = false) = (x = true)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not>? x = false) = (x = true)", "by (cases x, auto)"], ["", "lemma maybe_and_true: \"(x \\<and>? y = true) = (x = true \\<and> y = true)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<and>? y = true) = (x = true \\<and> y = true)", "using times_trilean.elims"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<and>? ?xa = ?y;\n   \\<And>uu_.\n      \\<lbrakk>?x = uu_; ?xa = invalid; ?y = invalid\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = invalid; ?xa = true; ?y = invalid\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = invalid; ?xa = false; ?y = invalid\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = true; ?xa = true; ?y = true\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = true; ?xa = false; ?y = false\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = false; ?xa = false; ?y = false\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = false; ?xa = true; ?y = false\\<rbrakk>\n   \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (x \\<and>? y = true) = (x = true \\<and> y = true)", "by blast"], ["", "lemma maybe_and_not_true:\n  \"(x \\<and>? y \\<noteq> true) = (x \\<noteq> true \\<or> y \\<noteq> true)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<and>? y \\<noteq> true) = (x \\<noteq> true \\<or> y \\<noteq> true)", "by (simp add: maybe_and_true)"], ["", "lemma negate_valid: \"(\\<not>? x \\<noteq> invalid) = (x \\<noteq> invalid)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not>? x \\<noteq> invalid) = (x \\<noteq> invalid)", "by (metis maybe_double_negation maybe_not.simps(3))"], ["", "lemma maybe_and_valid:\n  \"x \\<and>? y \\<noteq> invalid \\<Longrightarrow> x \\<noteq> invalid \\<and> y \\<noteq> invalid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<and>? y \\<noteq> invalid \\<Longrightarrow>\n    x \\<noteq> invalid \\<and> y \\<noteq> invalid", "using times_trilean.elims"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<and>? ?xa = ?y;\n   \\<And>uu_.\n      \\<lbrakk>?x = uu_; ?xa = invalid; ?y = invalid\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = invalid; ?xa = true; ?y = invalid\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = invalid; ?xa = false; ?y = invalid\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = true; ?xa = true; ?y = true\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = true; ?xa = false; ?y = false\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = false; ?xa = false; ?y = false\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = false; ?xa = true; ?y = false\\<rbrakk>\n   \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. x \\<and>? y \\<noteq> invalid \\<Longrightarrow>\n    x \\<noteq> invalid \\<and> y \\<noteq> invalid", "by blast"], ["", "lemma maybe_or_valid:\n  \"x \\<or>? y \\<noteq> invalid \\<Longrightarrow> x \\<noteq> invalid \\<and> y \\<noteq> invalid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<or>? y \\<noteq> invalid \\<Longrightarrow>\n    x \\<noteq> invalid \\<and> y \\<noteq> invalid", "using plus_trilean.elims"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<or>? ?xa = ?y;\n   \\<And>uu_.\n      \\<lbrakk>?x = invalid; ?xa = uu_; ?y = invalid\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = true; ?xa = invalid; ?y = invalid\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = false; ?xa = invalid; ?y = invalid\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = true; ?xa = true; ?y = true\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = true; ?xa = false; ?y = true\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = false; ?xa = true; ?y = true\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = false; ?xa = false; ?y = false\\<rbrakk>\n   \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. x \\<or>? y \\<noteq> invalid \\<Longrightarrow>\n    x \\<noteq> invalid \\<and> y \\<noteq> invalid", "by blast"], ["", "lemma maybe_or_false:\n  \"(x \\<or>? y = false) = (x = false \\<and> y = false)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<or>? y = false) = (x = false \\<and> y = false)", "using plus_trilean.elims"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<or>? ?xa = ?y;\n   \\<And>uu_.\n      \\<lbrakk>?x = invalid; ?xa = uu_; ?y = invalid\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = true; ?xa = invalid; ?y = invalid\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = false; ?xa = invalid; ?y = invalid\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = true; ?xa = true; ?y = true\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = true; ?xa = false; ?y = true\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = false; ?xa = true; ?y = true\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = false; ?xa = false; ?y = false\\<rbrakk>\n   \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (x \\<or>? y = false) = (x = false \\<and> y = false)", "by blast"], ["", "lemma maybe_or_true:\n  \"(x \\<or>? y = true) = ((x = true \\<or> y = true) \\<and> x \\<noteq> invalid \\<and> y \\<noteq> invalid)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<or>? y = true) =\n    ((x = true \\<or> y = true) \\<and>\n     x \\<noteq> invalid \\<and> y \\<noteq> invalid)", "using plus_trilean.elims"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<or>? ?xa = ?y;\n   \\<And>uu_.\n      \\<lbrakk>?x = invalid; ?xa = uu_; ?y = invalid\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = true; ?xa = invalid; ?y = invalid\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = false; ?xa = invalid; ?y = invalid\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = true; ?xa = true; ?y = true\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = true; ?xa = false; ?y = true\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = false; ?xa = true; ?y = true\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = false; ?xa = false; ?y = false\\<rbrakk>\n   \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (x \\<or>? y = true) =\n    ((x = true \\<or> y = true) \\<and>\n     x \\<noteq> invalid \\<and> y \\<noteq> invalid)", "by blast"], ["", "lemma maybe_not_invalid: \"(\\<not>? x = invalid) = (x = invalid)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not>? x = invalid) = (x = invalid)", "by (metis maybe_double_negation maybe_not.simps(3))"], ["", "lemma maybe_or_invalid:\n  \"(x \\<or>? y = invalid) = (x = invalid \\<or> y = invalid)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<or>? y = invalid) = (x = invalid \\<or> y = invalid)", "using plus_trilean.elims"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<or>? ?xa = ?y;\n   \\<And>uu_.\n      \\<lbrakk>?x = invalid; ?xa = uu_; ?y = invalid\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = true; ?xa = invalid; ?y = invalid\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = false; ?xa = invalid; ?y = invalid\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = true; ?xa = true; ?y = true\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = true; ?xa = false; ?y = true\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = false; ?xa = true; ?y = true\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = false; ?xa = false; ?y = false\\<rbrakk>\n   \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (x \\<or>? y = invalid) = (x = invalid \\<or> y = invalid)", "by blast"], ["", "lemma maybe_and_invalid:\n  \"(x \\<and>? y = invalid) = (x = invalid \\<or> y = invalid)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<and>? y = invalid) = (x = invalid \\<or> y = invalid)", "using times_trilean.elims"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<and>? ?xa = ?y;\n   \\<And>uu_.\n      \\<lbrakk>?x = uu_; ?xa = invalid; ?y = invalid\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = invalid; ?xa = true; ?y = invalid\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = invalid; ?xa = false; ?y = invalid\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = true; ?xa = true; ?y = true\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = true; ?xa = false; ?y = false\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = false; ?xa = false; ?y = false\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = false; ?xa = true; ?y = false\\<rbrakk>\n   \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (x \\<and>? y = invalid) = (x = invalid \\<or> y = invalid)", "by blast"], ["", "lemma maybe_and_false:\n  \"(x \\<and>? y = false) = ((x = false \\<or> y = false) \\<and> x \\<noteq> invalid \\<and> y \\<noteq> invalid)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<and>? y = false) =\n    ((x = false \\<or> y = false) \\<and>\n     x \\<noteq> invalid \\<and> y \\<noteq> invalid)", "using times_trilean.elims"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<and>? ?xa = ?y;\n   \\<And>uu_.\n      \\<lbrakk>?x = uu_; ?xa = invalid; ?y = invalid\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = invalid; ?xa = true; ?y = invalid\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = invalid; ?xa = false; ?y = invalid\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = true; ?xa = true; ?y = true\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = true; ?xa = false; ?y = false\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = false; ?xa = false; ?y = false\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = false; ?xa = true; ?y = false\\<rbrakk>\n   \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (x \\<and>? y = false) =\n    ((x = false \\<or> y = false) \\<and>\n     x \\<noteq> invalid \\<and> y \\<noteq> invalid)", "by blast"], ["", "lemma invalid_maybe_and: \"invalid \\<and>? x = invalid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invalid \\<and>? x = invalid", "using maybe_and_valid"], ["proof (prove)\nusing this:\n  ?x \\<and>? ?y \\<noteq> invalid \\<Longrightarrow>\n  ?x \\<noteq> invalid \\<and> ?y \\<noteq> invalid\n\ngoal (1 subgoal):\n 1. invalid \\<and>? x = invalid", "by blast"], ["", "lemma maybe_not_eq: \"(\\<not>? x = \\<not>? y) = (x = y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not>? x = \\<not>? y) = (x = y)", "by (metis maybe_double_negation)"], ["", "lemma de_morgans_1:\n  \"\\<not>? (a \\<or>? b) = (\\<not>?a) \\<and>? (\\<not>?b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not>? a \\<or>? b = (\\<not>? a) \\<and>? (\\<not>? b)", "by (metis (no_types, hide_lams) add.commute invalid_maybe_and maybe_and_idempotent maybe_and_one maybe_not.elims maybe_not.simps(1) maybe_not.simps(3) maybe_not_invalid maybe_or_zero plus_trilean.simps(1) plus_trilean.simps(4) times_trilean.simps(1) times_trilean_commutative trilean.exhaust trilean.simps(6))"], ["", "lemma de_morgans_2:\n  \"\\<not>? (a \\<and>? b) = (\\<not>?a) \\<or>? (\\<not>?b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not>? a \\<and>? b = (\\<not>? a) \\<or>? (\\<not>? b)", "by (metis de_morgans_1 maybe_double_negation)"], ["", "lemma not_true: \"(x \\<noteq> true) = (x = false \\<or> x = invalid)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<noteq> true) = (x = false \\<or> x = invalid)", "by (metis (no_types, lifting) maybe_not.cases trilean.distinct(1) trilean.distinct(3))"], ["", "lemma pull_negation: \"(x = \\<not>? y) = (\\<not>? x = y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x = \\<not>? y) = (\\<not>? x = y)", "using maybe_double_negation"], ["proof (prove)\nusing this:\n  \\<not>? \\<not>? ?x = ?x\n\ngoal (1 subgoal):\n 1. (x = \\<not>? y) = (\\<not>? x = y)", "by auto"], ["", "lemma comp_fun_commute_maybe_or: \"comp_fun_commute maybe_or\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_fun_commute (\\<or>?)", "apply standard"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y x. (\\<or>?) y \\<circ> (\\<or>?) x = (\\<or>?) x \\<circ> (\\<or>?) y", "apply (simp add: comp_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y x.\n       (\\<lambda>xa. y \\<or>? (x \\<or>? xa)) =\n       (\\<lambda>xa. x \\<or>? (y \\<or>? xa))", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y x xa. y \\<or>? (x \\<or>? xa) = x \\<or>? (y \\<or>? xa)", "by (simp add: add.left_commute)"], ["", "lemma comp_fun_commute_maybe_and: \"comp_fun_commute maybe_and\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_fun_commute (\\<and>?)", "apply standard"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y x.\n       (\\<and>?) y \\<circ> (\\<and>?) x = (\\<and>?) x \\<circ> (\\<and>?) y", "apply (simp add: comp_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y x.\n       (\\<lambda>xa. y \\<and>? (x \\<and>? xa)) =\n       (\\<lambda>xa. x \\<and>? (y \\<and>? xa))", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y x xa. y \\<and>? (x \\<and>? xa) = x \\<and>? (y \\<and>? xa)", "by (metis add.left_commute de_morgans_2 maybe_not_eq)"], ["", "end"]]}