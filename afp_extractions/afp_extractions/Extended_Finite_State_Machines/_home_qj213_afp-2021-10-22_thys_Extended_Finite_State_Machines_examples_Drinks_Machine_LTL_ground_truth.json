{"file_name": "/home/qj213/afp-2021-10-22/thys/Extended_Finite_State_Machines/examples/Drinks_Machine_LTL.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Extended_Finite_State_Machines", "problem_names": ["lemma P_ltl_step_0:\n  assumes invalid: \"P (None, [], <>)\"\n  assumes select: \"l = STR ''select'' \\<longrightarrow> P (Some 1, [], <1 $:= Some (hd i), 2 $:= Some (Num 0)>)\"\n  shows \"P (ltl_step drinks (Some 0) <> (l, i))\"", "lemma P_ltl_step_1:\n  assumes invalid: \"P (None, [], r)\"\n  assumes coin: \"l = STR ''coin'' \\<longrightarrow> P (Some 1, [value_plus (r $ 2) (Some (hd i))], r(2 $:= value_plus (r $ 2) (Some (i ! 0))))\"\n  assumes vend_fail: \"value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow> P (Some 1, [],r)\"\n  assumes vend: \"\\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow> P (Some 2, [r$1], r)\"\n  shows \"P (ltl_step drinks (Some 1) r (l, i))\"", "lemma LTL_r2_not_always_gt_100: \"not (alw (check_exp (Gt (V (Rg 2)) (L (Num 100))))) (watch drinks i)\"", "lemma drinks_step_2_none: \"ltl_step drinks (Some 2) r e = (None, [], r)\"", "lemma one_before_two_2:\n  \"alw (\\<lambda>x. statename (shd (stl x)) = Some 2 \\<longrightarrow> statename (shd x) = Some 1) (make_full_observation drinks (Some 2) r [r $ 1] x2a)\"", "lemma one_before_two_aux:\n  assumes \"\\<exists> p r i. j = nxt (make_full_observation drinks (Some 1) r p) i\"\n  shows \"alw (\\<lambda>x. nxt (state_eq (Some 2)) x \\<longrightarrow> state_eq (Some 1) x) j\"", "lemma LTL_nxt_2_means_vend:\n  \"alw (nxt (state_eq (Some 2)) impl (state_eq (Some 1))) (watch drinks i)\"", "lemma costsMoney_aux:\n  assumes \"\\<exists>p r i. j = (nxt (make_full_observation drinks (Some 1) r p) i)\"\n  shows \"alw (\\<lambda>xs. nxt (state_eq (Some 2)) xs \\<longrightarrow> check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) j\"", "lemma LTL_costsMoney:\n  \"(alw (nxt (state_eq (Some 2)) impl (check_exp (Ge (V (Rg 2)) (L (Num 100)))))) (watch drinks i)\"", "lemma LTL_costsMoney_aux:\n  \"(alw (not (check_exp (Ge (V (Rg 2)) (L (Num 100)))) impl (not (nxt (state_eq (Some 2)))))) (watch drinks i)\"", "lemma implode_select: \"String.implode ''select'' = STR ''select''\"", "lemma implode_coin: \"String.implode ''coin'' = STR ''coin''\"", "lemma implode_vend: \"String.implode ''vend'' = STR ''vend''\"", "lemmas implode_labels = implode_select implode_coin implode_vend", "lemma LTL_neverReachS2:\"(((((action_eq (''select'', [Str ''coke''])))\n                    aand\n                    (nxt ((action_eq (''coin'', [Num 100])))))\n                    aand\n                    (nxt (nxt((label_eq ''vend'' aand (input_eq []))))))\n                    impl\n                    (nxt (nxt (nxt (state_eq (Some 2))))))\n                    (watch drinks i)\"", "lemma ltl_step_not_select:\n  \"\\<nexists>i. e = (STR ''select'', [i]) \\<Longrightarrow>\n   ltl_step drinks (Some 0) r e = (None, [], r)\"", "lemma ltl_step_select:\n  \"ltl_step drinks (Some 0) <> (STR ''select'', [i]) = (Some 1, [], <1 $:= Some i, 2 $:= Some (Num 0)>)\"", "lemma ltl_step_not_coin_or_vend:\n  \"\\<nexists>i. e = (STR ''coin'', [i]) \\<Longrightarrow>\n    e \\<noteq> (STR ''vend'', []) \\<Longrightarrow>\n    ltl_step drinks (Some 1) r e = (None, [], r)\"", "lemma ltl_step_coin:\n  \"\\<exists>p r'. ltl_step drinks (Some 1) r (STR ''coin'', [i]) = (Some 1, p, r')\"", "lemma alw_tl:\n  \"alw \\<phi> (make_full_observation e (Some 0) <> [] xs) \\<Longrightarrow>\n    alw \\<phi>\n     (make_full_observation e (fst (ltl_step e (Some 0) <> (shd xs))) (snd (snd (ltl_step e (Some 0) <> (shd xs))))\n       (fst (snd (ltl_step e (Some 0) <> (shd xs)))) (stl xs))\"", "lemma stop_at_none:\n  \"alw (\\<lambda>xs. output (shd (stl xs)) = [Some (EFSM.Str drink)] \\<longrightarrow> check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n            (make_full_observation drinks None r p t)\"", "lemma drink_costs_money_aux:\n  assumes \"\\<exists>p r t. j = make_full_observation drinks (Some 1) r p t\"\n  shows \"alw (\\<lambda>xs. output (shd (stl xs)) = [Some (EFSM.Str drink)] \\<longrightarrow> check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) j\"", "lemma LTL_drinks_cost_money:\n  \"alw (nxt (output_eq [Some (Str drink)]) impl (check_exp (Ge (V (Rg 2)) (L (Num 100))))) (watch drinks t)\"", "lemma steps_1_invalid:\n      \"\\<nexists>i. (a, b) = (STR ''coin'', [i]) \\<Longrightarrow>\n       \\<nexists>i. (a, b) = (STR ''vend'', []) \\<Longrightarrow>\n       possible_steps drinks 1 r a b = {||}\"", "lemma output_vend_aux:\n  assumes \"\\<exists>p r t. j = make_full_observation drinks (Some 1) r p t\"\n  shows \"alw (\\<lambda>xs. label_eq ''vend'' xs \\<and> output (shd (stl xs)) = [Some d] \\<longrightarrow> check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) j\"", "lemma LTL_output_vend:\n  \"alw (((label_eq ''vend'') aand (nxt (output_eq [Some d]))) impl\n         (check_exp (Ge (V (Rg 2)) (L (Num 100))))) (watch drinks t)\"", "lemma LTL_output_vend_unfolded:\n  \"alw (\\<lambda>xs. (label (shd xs) = STR ''vend'' \\<and>\n             nxt (\\<lambda>s. output (shd s) = [Some d]) xs) \\<longrightarrow>\n              \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) = trilean.true)\n     (watch drinks t)\""], "translations": [["", "lemma P_ltl_step_0:\n  assumes invalid: \"P (None, [], <>)\"\n  assumes select: \"l = STR ''select'' \\<longrightarrow> P (Some 1, [], <1 $:= Some (hd i), 2 $:= Some (Num 0)>)\"\n  shows \"P (ltl_step drinks (Some 0) <> (l, i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (ltl_step drinks (Some 0) <> (l, i))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. P (ltl_step drinks (Some 0) <> (l, i))", "have length_i: \"\\<exists>d. (l, i) = (STR ''select'', [d]) \\<Longrightarrow> length i = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>d. (l, i) = (STR ''select'', [d]) \\<Longrightarrow>\n    length i = 1", "by (induct i, auto)"], ["proof (state)\nthis:\n  \\<exists>d. (l, i) = (STR ''select'', [d]) \\<Longrightarrow> length i = 1\n\ngoal (1 subgoal):\n 1. P (ltl_step drinks (Some 0) <> (l, i))", "have length_i_2: \"\\<forall>d. i \\<noteq> [d] \\<Longrightarrow> length i \\<noteq> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>d. i \\<noteq> [d] \\<Longrightarrow> length i \\<noteq> 1", "by (induct i, auto)"], ["proof (state)\nthis:\n  \\<forall>d. i \\<noteq> [d] \\<Longrightarrow> length i \\<noteq> 1\n\ngoal (1 subgoal):\n 1. P (ltl_step drinks (Some 0) <> (l, i))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. P (ltl_step drinks (Some 0) <> (l, i))", "apply (case_tac \"\\<exists>d. (l, i) = (STR ''select'', [d])\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>d. (l, i) = (STR ''select'', [d]) \\<Longrightarrow>\n    P (ltl_step drinks (Some 0) <> (l, i))\n 2. \\<nexists>d. (l, i) = (STR ''select'', [d]) \\<Longrightarrow>\n    P (ltl_step drinks (Some 0) <> (l, i))", "apply (simp add: possible_steps_0 length_i select_def apply_updates_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. l = STR ''select'' \\<and> (\\<exists>d. i = [d]) \\<Longrightarrow>\n    P (Some 1, [], <1 $:= Some (i ! 0), 2 $:= Some (Num 0)>)\n 2. \\<nexists>d. (l, i) = (STR ''select'', [d]) \\<Longrightarrow>\n    P (ltl_step drinks (Some 0) <> (l, i))", "using select"], ["proof (prove)\nusing this:\n  l = STR ''select'' \\<longrightarrow>\n  P (Some 1, [], <1 $:= Some (hd i), 2 $:= Some (Num 0)>)\n\ngoal (2 subgoals):\n 1. l = STR ''select'' \\<and> (\\<exists>d. i = [d]) \\<Longrightarrow>\n    P (Some 1, [], <1 $:= Some (i ! 0), 2 $:= Some (Num 0)>)\n 2. \\<nexists>d. (l, i) = (STR ''select'', [d]) \\<Longrightarrow>\n    P (ltl_step drinks (Some 0) <> (l, i))", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>d. (l, i) = (STR ''select'', [d]) \\<Longrightarrow>\n    P (ltl_step drinks (Some 0) <> (l, i))", "by (simp add: possible_steps_0_invalid length_i_2 invalid)"], ["proof (state)\nthis:\n  P (ltl_step drinks (Some 0) <> (l, i))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma P_ltl_step_1:\n  assumes invalid: \"P (None, [], r)\"\n  assumes coin: \"l = STR ''coin'' \\<longrightarrow> P (Some 1, [value_plus (r $ 2) (Some (hd i))], r(2 $:= value_plus (r $ 2) (Some (i ! 0))))\"\n  assumes vend_fail: \"value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow> P (Some 1, [],r)\"\n  assumes vend: \"\\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow> P (Some 2, [r$1], r)\"\n  shows \"P (ltl_step drinks (Some 1) r (l, i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (ltl_step drinks (Some 1) r (l, i))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. P (ltl_step drinks (Some 1) r (l, i))", "have length_i: \"\\<And>s. \\<exists>d. (l, i) = (s, [d]) \\<Longrightarrow> length i = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s. \\<exists>d. (l, i) = (s, [d]) \\<Longrightarrow> length i = 1", "by (induct i, auto)"], ["proof (state)\nthis:\n  \\<exists>d. (l, i) = (?s, [d]) \\<Longrightarrow> length i = 1\n\ngoal (1 subgoal):\n 1. P (ltl_step drinks (Some 1) r (l, i))", "have length_i_2: \"\\<forall>d. i \\<noteq> [d] \\<Longrightarrow> length i \\<noteq> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>d. i \\<noteq> [d] \\<Longrightarrow> length i \\<noteq> 1", "by (induct i, auto)"], ["proof (state)\nthis:\n  \\<forall>d. i \\<noteq> [d] \\<Longrightarrow> length i \\<noteq> 1\n\ngoal (1 subgoal):\n 1. P (ltl_step drinks (Some 1) r (l, i))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. P (ltl_step drinks (Some 1) r (l, i))", "apply (case_tac \"\\<exists>d. (l, i) = (STR ''coin'', [d])\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>d. (l, i) = (STR ''coin'', [d]) \\<Longrightarrow>\n    P (ltl_step drinks (Some 1) r (l, i))\n 2. \\<nexists>d. (l, i) = (STR ''coin'', [d]) \\<Longrightarrow>\n    P (ltl_step drinks (Some 1) r (l, i))", "apply (simp add: possible_steps_1_coin length_i coin_def apply_outputs_def apply_updates_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. l = STR ''coin'' \\<and> (\\<exists>d. i = [d]) \\<Longrightarrow>\n    P (Some 1, [value_plus (r $ 2) (Some (i ! 0))], r\n       (2 $:= value_plus (r $ 2) (Some (i ! 0))))\n 2. \\<nexists>d. (l, i) = (STR ''coin'', [d]) \\<Longrightarrow>\n    P (ltl_step drinks (Some 1) r (l, i))", "using coin"], ["proof (prove)\nusing this:\n  l = STR ''coin'' \\<longrightarrow>\n  P (Some 1, [value_plus (r $ 2) (Some (hd i))], r\n     (2 $:= value_plus (r $ 2) (Some (i ! 0))))\n\ngoal (2 subgoals):\n 1. l = STR ''coin'' \\<and> (\\<exists>d. i = [d]) \\<Longrightarrow>\n    P (Some 1, [value_plus (r $ 2) (Some (i ! 0))], r\n       (2 $:= value_plus (r $ 2) (Some (i ! 0))))\n 2. \\<nexists>d. (l, i) = (STR ''coin'', [d]) \\<Longrightarrow>\n    P (ltl_step drinks (Some 1) r (l, i))", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>d. (l, i) = (STR ''coin'', [d]) \\<Longrightarrow>\n    P (ltl_step drinks (Some 1) r (l, i))", "apply (case_tac \"(l, i) = (STR ''vend'', [])\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<nexists>d. (l, i) = (STR ''coin'', [d]);\n     (l, i) = (STR ''vend'', [])\\<rbrakk>\n    \\<Longrightarrow> P (ltl_step drinks (Some 1) r (l, i))\n 2. \\<lbrakk>\\<nexists>d. (l, i) = (STR ''coin'', [d]);\n     (l, i) \\<noteq> (STR ''vend'', [])\\<rbrakk>\n    \\<Longrightarrow> P (ltl_step drinks (Some 1) r (l, i))", "apply (case_tac \"\\<exists>n. r $ 2 = Some (Num n)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<nexists>d. (l, i) = (STR ''coin'', [d]);\n     (l, i) = (STR ''vend'', []); \\<exists>n. r $ 2 = Some (Num n)\\<rbrakk>\n    \\<Longrightarrow> P (ltl_step drinks (Some 1) r (l, i))\n 2. \\<lbrakk>\\<nexists>d. (l, i) = (STR ''coin'', [d]);\n     (l, i) = (STR ''vend'', []); \\<nexists>n. r $ 2 = Some (Num n)\\<rbrakk>\n    \\<Longrightarrow> P (ltl_step drinks (Some 1) r (l, i))\n 3. \\<lbrakk>\\<nexists>d. (l, i) = (STR ''coin'', [d]);\n     (l, i) \\<noteq> (STR ''vend'', [])\\<rbrakk>\n    \\<Longrightarrow> P (ltl_step drinks (Some 1) r (l, i))", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>r $ 2 = Some (Num n); l = STR ''vend''; i = []\\<rbrakk>\n       \\<Longrightarrow> P (let possibilities =\n                                  possible_steps drinks 1 r STR ''vend'' []\n                            in if possibilities = {||} then (None, [], r)\n                               else let (s', t) =\n    SOME x. x |\\<in>| possibilities\n                                    in (Some s', evaluate_outputs t [] r,\n  evaluate_updates t [] r))\n 2. \\<lbrakk>\\<nexists>d. (l, i) = (STR ''coin'', [d]);\n     (l, i) = (STR ''vend'', []); \\<nexists>n. r $ 2 = Some (Num n)\\<rbrakk>\n    \\<Longrightarrow> P (ltl_step drinks (Some 1) r (l, i))\n 3. \\<lbrakk>\\<nexists>d. (l, i) = (STR ''coin'', [d]);\n     (l, i) \\<noteq> (STR ''vend'', [])\\<rbrakk>\n    \\<Longrightarrow> P (ltl_step drinks (Some 1) r (l, i))", "subgoal for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r $ 2 = Some (Num n); l = STR ''vend''; i = []\\<rbrakk>\n    \\<Longrightarrow> P (let possibilities =\n                               possible_steps drinks 1 r STR ''vend'' []\n                         in if possibilities = {||} then (None, [], r)\n                            else let (s', t) =\n SOME x. x |\\<in>| possibilities\n                                 in (Some s', evaluate_outputs t [] r,\n                                     evaluate_updates t [] r))", "apply (case_tac \"n \\<ge> 100\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>r $ 2 = Some (Num n); l = STR ''vend''; i = [];\n     100 \\<le> n\\<rbrakk>\n    \\<Longrightarrow> P (let possibilities =\n                               possible_steps drinks 1 r STR ''vend'' []\n                         in if possibilities = {||} then (None, [], r)\n                            else let (s', t) =\n SOME x. x |\\<in>| possibilities\n                                 in (Some s', evaluate_outputs t [] r,\n                                     evaluate_updates t [] r))\n 2. \\<lbrakk>r $ 2 = Some (Num n); l = STR ''vend''; i = [];\n     \\<not> 100 \\<le> n\\<rbrakk>\n    \\<Longrightarrow> P (let possibilities =\n                               possible_steps drinks 1 r STR ''vend'' []\n                         in if possibilities = {||} then (None, [], r)\n                            else let (s', t) =\n SOME x. x |\\<in>| possibilities\n                                 in (Some s', evaluate_outputs t [] r,\n                                     evaluate_updates t [] r))", "apply (simp add: drinks_vend_sufficient vend_def apply_updates_def apply_outputs_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>r $ 2 = Some (Num n); l = STR ''vend''; i = [];\n     100 \\<le> n\\<rbrakk>\n    \\<Longrightarrow> P (Some 2, [r $ 1], r(2 $:= Some (Num n)))\n 2. \\<lbrakk>r $ 2 = Some (Num n); l = STR ''vend''; i = [];\n     \\<not> 100 \\<le> n\\<rbrakk>\n    \\<Longrightarrow> P (let possibilities =\n                               possible_steps drinks 1 r STR ''vend'' []\n                         in if possibilities = {||} then (None, [], r)\n                            else let (s', t) =\n SOME x. x |\\<in>| possibilities\n                                 in (Some s', evaluate_outputs t [] r,\n                                     evaluate_updates t [] r))", "apply (metis finfun_upd_triv possible_steps_2_vend vend vend_ge_100)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r $ 2 = Some (Num n); l = STR ''vend''; i = [];\n     \\<not> 100 \\<le> n\\<rbrakk>\n    \\<Longrightarrow> P (let possibilities =\n                               possible_steps drinks 1 r STR ''vend'' []\n                         in if possibilities = {||} then (None, [], r)\n                            else let (s', t) =\n SOME x. x |\\<in>| possibilities\n                                 in (Some s', evaluate_outputs t [] r,\n                                     evaluate_updates t [] r))", "apply (simp add: drinks_vend_insufficient vend_fail_def apply_updates_def apply_outputs_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r $ 2 = Some (Num n); l = STR ''vend''; i = [];\n     \\<not> 100 \\<le> n\\<rbrakk>\n    \\<Longrightarrow> P (Some 1, [], r(2 $:= Some (Num n)))", "apply (metis MaybeBoolInt.simps(1) finfun_upd_triv not_less value_gt_def vend_fail)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<nexists>d. (l, i) = (STR ''coin'', [d]);\n     (l, i) = (STR ''vend'', []); \\<nexists>n. r $ 2 = Some (Num n)\\<rbrakk>\n    \\<Longrightarrow> P (ltl_step drinks (Some 1) r (l, i))\n 2. \\<lbrakk>\\<nexists>d. (l, i) = (STR ''coin'', [d]);\n     (l, i) \\<noteq> (STR ''vend'', [])\\<rbrakk>\n    \\<Longrightarrow> P (ltl_step drinks (Some 1) r (l, i))", "apply (simp add: drinks_vend_invalid invalid)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>d. (l, i) = (STR ''coin'', [d]);\n     (l, i) \\<noteq> (STR ''vend'', [])\\<rbrakk>\n    \\<Longrightarrow> P (ltl_step drinks (Some 1) r (l, i))", "by (simp add: drinks_no_possible_steps_1 length_i_2 invalid)"], ["proof (state)\nthis:\n  P (ltl_step drinks (Some 1) r (l, i))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LTL_r2_not_always_gt_100: \"not (alw (check_exp (Gt (V (Rg 2)) (L (Num 100))))) (watch drinks i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> alw (check_exp (Gt (V (Rg 2)) (L (Num 100)))) (watch drinks i)", "using value_gt_def"], ["proof (prove)\nusing this:\n  value_gt ?a ?b \\<equiv> MaybeBoolInt (\\<lambda>x y. y < x) ?a ?b\n\ngoal (1 subgoal):\n 1. \\<not> alw (check_exp (Gt (V (Rg 2)) (L (Num 100)))) (watch drinks i)", "by auto"], ["", "lemma drinks_step_2_none: \"ltl_step drinks (Some 2) r e = (None, [], r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ltl_step drinks (Some 2) r e = (None, [], r)", "by (simp add: drinks_end ltl_step_none_2)"], ["", "lemma one_before_two_2:\n  \"alw (\\<lambda>x. statename (shd (stl x)) = Some 2 \\<longrightarrow> statename (shd x) = Some 1) (make_full_observation drinks (Some 2) r [r $ 1] x2a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (\\<lambda>x.\n            state_eq (Some 2) (stl x) \\<longrightarrow> state_eq (Some 1) x)\n     (make_full_observation drinks (Some 2) r [r $ 1] x2a)", "proof(coinduction)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>xs.\n       make_full_observation drinks (Some 2) r [r $ 1] x2a = xs \\<and>\n       (state_eq (Some 2) (stl xs) \\<longrightarrow>\n        state_eq (Some 1) xs) \\<and>\n       (stl xs = make_full_observation drinks (Some 2) r [r $ 1] x2a \\<or>\n        alw (\\<lambda>x.\n                state_eq (Some 2) (stl x) \\<longrightarrow>\n                state_eq (Some 1) x)\n         (stl xs))", "case alw"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<exists>xs.\n       make_full_observation drinks (Some 2) r [r $ 1] x2a = xs \\<and>\n       (state_eq (Some 2) (stl xs) \\<longrightarrow>\n        state_eq (Some 1) xs) \\<and>\n       (stl xs = make_full_observation drinks (Some 2) r [r $ 1] x2a \\<or>\n        alw (\\<lambda>x.\n                state_eq (Some 2) (stl x) \\<longrightarrow>\n                state_eq (Some 1) x)\n         (stl xs))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs.\n       make_full_observation drinks (Some 2) r [r $ 1] x2a = xs \\<and>\n       (state_eq (Some 2) (stl xs) \\<longrightarrow>\n        state_eq (Some 1) xs) \\<and>\n       (stl xs = make_full_observation drinks (Some 2) r [r $ 1] x2a \\<or>\n        alw (\\<lambda>x.\n                state_eq (Some 2) (stl x) \\<longrightarrow>\n                state_eq (Some 1) x)\n         (stl xs))", "apply (simp add: drinks_step_2_none)"], ["proof (prove)\ngoal (1 subgoal):\n 1. make_full_observation drinks None r [] (stl x2a) =\n    make_full_observation drinks (Some 2) r [r $ 1] x2a \\<or>\n    alw (\\<lambda>x.\n            state_eq (Some 2) (stl x) \\<longrightarrow> state_eq (Some 1) x)\n     (make_full_observation drinks None r [] (stl x2a))", "by (metis (mono_tags, lifting) alw_mono nxt.simps once_none_nxt_always_none option.distinct(1))"], ["proof (state)\nthis:\n  \\<exists>xs.\n     make_full_observation drinks (Some 2) r [r $ 1] x2a = xs \\<and>\n     (state_eq (Some 2) (stl xs) \\<longrightarrow>\n      state_eq (Some 1) xs) \\<and>\n     (stl xs = make_full_observation drinks (Some 2) r [r $ 1] x2a \\<or>\n      alw (\\<lambda>x.\n              state_eq (Some 2) (stl x) \\<longrightarrow>\n              state_eq (Some 1) x)\n       (stl xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma one_before_two_aux:\n  assumes \"\\<exists> p r i. j = nxt (make_full_observation drinks (Some 1) r p) i\"\n  shows \"alw (\\<lambda>x. nxt (state_eq (Some 2)) x \\<longrightarrow> state_eq (Some 1) x) j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (\\<lambda>x.\n            nxt (state_eq (Some 2)) x \\<longrightarrow> state_eq (Some 1) x)\n     j", "using assms"], ["proof (prove)\nusing this:\n  \\<exists>p r i. j = nxt (make_full_observation drinks (Some 1) r p) i\n\ngoal (1 subgoal):\n 1. alw (\\<lambda>x.\n            nxt (state_eq (Some 2)) x \\<longrightarrow> state_eq (Some 1) x)\n     j", "apply(coinduct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>p r i.\n          x =\n          nxt (make_full_observation drinks (Some 1) r p)\n           i \\<Longrightarrow>\n       \\<exists>xs.\n          x = xs \\<and>\n          (nxt (state_eq (Some 2)) xs \\<longrightarrow>\n           state_eq (Some 1) xs) \\<and>\n          ((\\<exists>p r i.\n               stl xs =\n               nxt (make_full_observation drinks (Some 1) r p) i) \\<or>\n           alw (\\<lambda>x.\n                   nxt (state_eq (Some 2)) x \\<longrightarrow>\n                   state_eq (Some 1) x)\n            (stl xs))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>p r i.\n          x =\n          make_full_observation drinks (Some 1) r p\n           (stl i) \\<Longrightarrow>\n       (state_eq (Some 2) (stl x) \\<longrightarrow>\n        state_eq (Some 1) x) \\<and>\n       ((\\<exists>p r i.\n            stl x = make_full_observation drinks (Some 1) r p (stl i)) \\<or>\n        alw (\\<lambda>x.\n                state_eq (Some 2) (stl x) \\<longrightarrow>\n                state_eq (Some 1) x)\n         (stl x))", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x p r i.\n       (state_eq (Some 2)\n         (stl (make_full_observation drinks (Some 1) r p\n                (stl i))) \\<longrightarrow>\n        state_eq (Some 1)\n         (make_full_observation drinks (Some 1) r p (stl i))) \\<and>\n       ((\\<exists>pa ra ia.\n            stl (make_full_observation drinks (Some 1) r p (stl i)) =\n            make_full_observation drinks (Some 1) ra pa (stl ia)) \\<or>\n        alw (\\<lambda>x.\n                state_eq (Some 2) (stl x) \\<longrightarrow>\n                state_eq (Some 1) x)\n         (stl (make_full_observation drinks (Some 1) r p (stl i))))", "apply standard"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x p r i.\n       state_eq (Some 2)\n        (stl (make_full_observation drinks (Some 1) r p\n               (stl i))) \\<longrightarrow>\n       state_eq (Some 1) (make_full_observation drinks (Some 1) r p (stl i))\n 2. \\<And>x p r i.\n       (\\<exists>pa ra ia.\n           stl (make_full_observation drinks (Some 1) r p (stl i)) =\n           make_full_observation drinks (Some 1) ra pa (stl ia)) \\<or>\n       alw (\\<lambda>x.\n               state_eq (Some 2) (stl x) \\<longrightarrow>\n               state_eq (Some 1) x)\n        (stl (make_full_observation drinks (Some 1) r p (stl i)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x p r i.\n       (\\<exists>pa ra ia.\n           stl (make_full_observation drinks (Some 1) r p (stl i)) =\n           make_full_observation drinks (Some 1) ra pa (stl ia)) \\<or>\n       alw (\\<lambda>x.\n               state_eq (Some 2) (stl x) \\<longrightarrow>\n               state_eq (Some 1) x)\n        (stl (make_full_observation drinks (Some 1) r p (stl i)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r i.\n       (\\<exists>p ra ia.\n           make_full_observation drinks\n            (fst (ltl_step drinks (Some 1) r (shd (stl i))))\n            (snd (snd (ltl_step drinks (Some 1) r (shd (stl i)))))\n            (fst (snd (ltl_step drinks (Some 1) r (shd (stl i)))))\n            (stl (stl i)) =\n           make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n       alw (\\<lambda>x.\n               state_eq (Some 2) (stl x) \\<longrightarrow>\n               state_eq (Some 1) x)\n        (make_full_observation drinks\n          (fst (ltl_step drinks (Some 1) r (shd (stl i))))\n          (snd (snd (ltl_step drinks (Some 1) r (shd (stl i)))))\n          (fst (snd (ltl_step drinks (Some 1) r (shd (stl i)))))\n          (stl (stl i)))", "subgoal for r i"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>p ra ia.\n        make_full_observation drinks\n         (fst (ltl_step drinks (Some 1) r (shd (stl i))))\n         (snd (snd (ltl_step drinks (Some 1) r (shd (stl i)))))\n         (fst (snd (ltl_step drinks (Some 1) r (shd (stl i)))))\n         (stl (stl i)) =\n        make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n    alw (\\<lambda>x.\n            state_eq (Some 2) (stl x) \\<longrightarrow> state_eq (Some 1) x)\n     (make_full_observation drinks\n       (fst (ltl_step drinks (Some 1) r (shd (stl i))))\n       (snd (snd (ltl_step drinks (Some 1) r (shd (stl i)))))\n       (fst (snd (ltl_step drinks (Some 1) r (shd (stl i))))) (stl (stl i)))", "apply (case_tac \"shd (stl i)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       (\\<exists>p ra ia.\n           make_full_observation drinks\n            (fst (ltl_step drinks (Some 1) r (shd (stl i))))\n            (snd (snd (ltl_step drinks (Some 1) r (shd (stl i)))))\n            (fst (snd (ltl_step drinks (Some 1) r (shd (stl i)))))\n            (stl (stl i)) =\n           make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n       alw (\\<lambda>x.\n               state_eq (Some 2) (stl x) \\<longrightarrow>\n               state_eq (Some 1) x)\n        (make_full_observation drinks\n          (fst (ltl_step drinks (Some 1) r (shd (stl i))))\n          (snd (snd (ltl_step drinks (Some 1) r (shd (stl i)))))\n          (fst (snd (ltl_step drinks (Some 1) r (shd (stl i)))))\n          (stl (stl i)))", "apply (simp del: ltl_step.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       (\\<exists>p ra ia.\n           make_full_observation drinks\n            (fst (ltl_step drinks (Some 1) r (a, b)))\n            (snd (snd (ltl_step drinks (Some 1) r (a, b))))\n            (fst (snd (ltl_step drinks (Some 1) r (a, b)))) (stl (stl i)) =\n           make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n       alw (\\<lambda>x.\n               state_eq (Some 2) (stl x) \\<longrightarrow>\n               state_eq (Some 1) x)\n        (make_full_observation drinks\n          (fst (ltl_step drinks (Some 1) r (a, b)))\n          (snd (snd (ltl_step drinks (Some 1) r (a, b))))\n          (fst (snd (ltl_step drinks (Some 1) r (a, b)))) (stl (stl i)))", "apply (rule P_ltl_step_1)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       (\\<exists>p ra ia.\n           make_full_observation drinks (fst (None, [], r))\n            (snd (snd (None, [], r))) (fst (snd (None, [], r)))\n            (stl (stl i)) =\n           make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n       alw (\\<lambda>x.\n               state_eq (Some 2) (stl x) \\<longrightarrow>\n               state_eq (Some 1) x)\n        (make_full_observation drinks (fst (None, [], r))\n          (snd (snd (None, [], r))) (fst (snd (None, [], r))) (stl (stl i)))\n 2. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       a = STR ''coin'' \\<longrightarrow>\n       (\\<exists>p ra ia.\n           make_full_observation drinks\n            (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                  (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n            (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                       (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n            (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                       (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n            (stl (stl i)) =\n           make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n       alw (\\<lambda>x.\n               state_eq (Some 2) (stl x) \\<longrightarrow>\n               state_eq (Some 1) x)\n        (make_full_observation drinks\n          (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n          (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                     (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n          (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                     (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n          (stl (stl i)))\n 3. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow>\n       (\\<exists>p ra ia.\n           make_full_observation drinks (fst (Some 1, [], r))\n            (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n            (stl (stl i)) =\n           make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n       alw (\\<lambda>x.\n               state_eq (Some 2) (stl x) \\<longrightarrow>\n               state_eq (Some 1) x)\n        (make_full_observation drinks (fst (Some 1, [], r))\n          (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n          (stl (stl i)))\n 4. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (\\<exists>p ra ia.\n           make_full_observation drinks (fst (Some 2, [r $ 1], r))\n            (snd (snd (Some 2, [r $ 1], r)))\n            (fst (snd (Some 2, [r $ 1], r))) (stl (stl i)) =\n           make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n       alw (\\<lambda>x.\n               state_eq (Some 2) (stl x) \\<longrightarrow>\n               state_eq (Some 1) x)\n        (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n          (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n          (stl (stl i)))", "apply (rule disjI2)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       alw (\\<lambda>x.\n               state_eq (Some 2) (stl x) \\<longrightarrow>\n               state_eq (Some 1) x)\n        (make_full_observation drinks (fst (None, [], r))\n          (snd (snd (None, [], r))) (fst (snd (None, [], r))) (stl (stl i)))\n 2. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       a = STR ''coin'' \\<longrightarrow>\n       (\\<exists>p ra ia.\n           make_full_observation drinks\n            (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                  (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n            (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                       (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n            (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                       (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n            (stl (stl i)) =\n           make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n       alw (\\<lambda>x.\n               state_eq (Some 2) (stl x) \\<longrightarrow>\n               state_eq (Some 1) x)\n        (make_full_observation drinks\n          (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n          (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                     (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n          (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                     (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n          (stl (stl i)))\n 3. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow>\n       (\\<exists>p ra ia.\n           make_full_observation drinks (fst (Some 1, [], r))\n            (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n            (stl (stl i)) =\n           make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n       alw (\\<lambda>x.\n               state_eq (Some 2) (stl x) \\<longrightarrow>\n               state_eq (Some 1) x)\n        (make_full_observation drinks (fst (Some 1, [], r))\n          (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n          (stl (stl i)))\n 4. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (\\<exists>p ra ia.\n           make_full_observation drinks (fst (Some 2, [r $ 1], r))\n            (snd (snd (Some 2, [r $ 1], r)))\n            (fst (snd (Some 2, [r $ 1], r))) (stl (stl i)) =\n           make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n       alw (\\<lambda>x.\n               state_eq (Some 2) (stl x) \\<longrightarrow>\n               state_eq (Some 1) x)\n        (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n          (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n          (stl (stl i)))", "apply (rule alw_mono[of \"nxt (state_eq None)\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       alw (nxt (state_eq None))\n        (make_full_observation drinks (fst (None, [], r))\n          (snd (snd (None, [], r))) (fst (snd (None, [], r))) (stl (stl i)))\n 2. \\<And>a b xs.\n       \\<lbrakk>shd (stl i) = (a, b); nxt (state_eq None) xs\\<rbrakk>\n       \\<Longrightarrow> state_eq (Some 2) (stl xs) \\<longrightarrow>\n                         state_eq (Some 1) xs\n 3. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       a = STR ''coin'' \\<longrightarrow>\n       (\\<exists>p ra ia.\n           make_full_observation drinks\n            (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                  (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n            (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                       (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n            (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                       (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n            (stl (stl i)) =\n           make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n       alw (\\<lambda>x.\n               state_eq (Some 2) (stl x) \\<longrightarrow>\n               state_eq (Some 1) x)\n        (make_full_observation drinks\n          (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n          (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                     (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n          (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                     (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n          (stl (stl i)))\n 4. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow>\n       (\\<exists>p ra ia.\n           make_full_observation drinks (fst (Some 1, [], r))\n            (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n            (stl (stl i)) =\n           make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n       alw (\\<lambda>x.\n               state_eq (Some 2) (stl x) \\<longrightarrow>\n               state_eq (Some 1) x)\n        (make_full_observation drinks (fst (Some 1, [], r))\n          (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n          (stl (stl i)))\n 5. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (\\<exists>p ra ia.\n           make_full_observation drinks (fst (Some 2, [r $ 1], r))\n            (snd (snd (Some 2, [r $ 1], r)))\n            (fst (snd (Some 2, [r $ 1], r))) (stl (stl i)) =\n           make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n       alw (\\<lambda>x.\n               state_eq (Some 2) (stl x) \\<longrightarrow>\n               state_eq (Some 1) x)\n        (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n          (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n          (stl (stl i)))", "apply (simp add: once_none_nxt_always_none)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b xs.\n       \\<lbrakk>shd (stl i) = (a, b); nxt (state_eq None) xs\\<rbrakk>\n       \\<Longrightarrow> state_eq (Some 2) (stl xs) \\<longrightarrow>\n                         state_eq (Some 1) xs\n 2. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       a = STR ''coin'' \\<longrightarrow>\n       (\\<exists>p ra ia.\n           make_full_observation drinks\n            (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                  (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n            (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                       (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n            (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                       (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n            (stl (stl i)) =\n           make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n       alw (\\<lambda>x.\n               state_eq (Some 2) (stl x) \\<longrightarrow>\n               state_eq (Some 1) x)\n        (make_full_observation drinks\n          (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n          (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                     (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n          (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                     (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n          (stl (stl i)))\n 3. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow>\n       (\\<exists>p ra ia.\n           make_full_observation drinks (fst (Some 1, [], r))\n            (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n            (stl (stl i)) =\n           make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n       alw (\\<lambda>x.\n               state_eq (Some 2) (stl x) \\<longrightarrow>\n               state_eq (Some 1) x)\n        (make_full_observation drinks (fst (Some 1, [], r))\n          (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n          (stl (stl i)))\n 4. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (\\<exists>p ra ia.\n           make_full_observation drinks (fst (Some 2, [r $ 1], r))\n            (snd (snd (Some 2, [r $ 1], r)))\n            (fst (snd (Some 2, [r $ 1], r))) (stl (stl i)) =\n           make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n       alw (\\<lambda>x.\n               state_eq (Some 2) (stl x) \\<longrightarrow>\n               state_eq (Some 1) x)\n        (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n          (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n          (stl (stl i)))", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       a = STR ''coin'' \\<longrightarrow>\n       (\\<exists>p ra ia.\n           make_full_observation drinks\n            (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                  (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n            (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                       (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n            (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                       (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n            (stl (stl i)) =\n           make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n       alw (\\<lambda>x.\n               state_eq (Some 2) (stl x) \\<longrightarrow>\n               state_eq (Some 1) x)\n        (make_full_observation drinks\n          (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n          (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                     (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n          (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                     (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n          (stl (stl i)))\n 2. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow>\n       (\\<exists>p ra ia.\n           make_full_observation drinks (fst (Some 1, [], r))\n            (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n            (stl (stl i)) =\n           make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n       alw (\\<lambda>x.\n               state_eq (Some 2) (stl x) \\<longrightarrow>\n               state_eq (Some 1) x)\n        (make_full_observation drinks (fst (Some 1, [], r))\n          (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n          (stl (stl i)))\n 3. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (\\<exists>p ra ia.\n           make_full_observation drinks (fst (Some 2, [r $ 1], r))\n            (snd (snd (Some 2, [r $ 1], r)))\n            (fst (snd (Some 2, [r $ 1], r))) (stl (stl i)) =\n           make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n       alw (\\<lambda>x.\n               state_eq (Some 2) (stl x) \\<longrightarrow>\n               state_eq (Some 1) x)\n        (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n          (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n          (stl (stl i)))", "apply auto[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow>\n       (\\<exists>p ra ia.\n           make_full_observation drinks (fst (Some 1, [], r))\n            (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n            (stl (stl i)) =\n           make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n       alw (\\<lambda>x.\n               state_eq (Some 2) (stl x) \\<longrightarrow>\n               state_eq (Some 1) x)\n        (make_full_observation drinks (fst (Some 1, [], r))\n          (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n          (stl (stl i)))\n 2. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (\\<exists>p ra ia.\n           make_full_observation drinks (fst (Some 2, [r $ 1], r))\n            (snd (snd (Some 2, [r $ 1], r)))\n            (fst (snd (Some 2, [r $ 1], r))) (stl (stl i)) =\n           make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n       alw (\\<lambda>x.\n               state_eq (Some 2) (stl x) \\<longrightarrow>\n               state_eq (Some 1) x)\n        (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n          (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n          (stl (stl i)))", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (\\<exists>p ra ia.\n           make_full_observation drinks (fst (Some 2, [r $ 1], r))\n            (snd (snd (Some 2, [r $ 1], r)))\n            (fst (snd (Some 2, [r $ 1], r))) (stl (stl i)) =\n           make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n       alw (\\<lambda>x.\n               state_eq (Some 2) (stl x) \\<longrightarrow>\n               state_eq (Some 1) x)\n        (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n          (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n          (stl (stl i)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (\\<exists>p ra ia.\n           make_full_observation drinks (Some 2) r [r $ 1] (stl (stl i)) =\n           make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n       alw (\\<lambda>x.\n               state_eq (Some 2) (stl x) \\<longrightarrow>\n               state_eq (Some 1) x)\n        (make_full_observation drinks (Some 2) r [r $ 1] (stl (stl i)))", "by (simp add: one_before_two_2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma LTL_nxt_2_means_vend:\n  \"alw (nxt (state_eq (Some 2)) impl (state_eq (Some 1))) (watch drinks i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (\\<lambda>xs.\n            nxt (state_eq (Some 2)) xs \\<longrightarrow>\n            state_eq (Some 1) xs)\n     (watch drinks i)", "proof(coinduction)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>xs.\n       watch drinks i = xs \\<and>\n       (nxt (state_eq (Some 2)) xs \\<longrightarrow>\n        state_eq (Some 1) xs) \\<and>\n       (stl xs = watch drinks i \\<or>\n        alw (\\<lambda>xs.\n                nxt (state_eq (Some 2)) xs \\<longrightarrow>\n                state_eq (Some 1) xs)\n         (stl xs))", "case alw"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<exists>xs.\n       watch drinks i = xs \\<and>\n       (nxt (state_eq (Some 2)) xs \\<longrightarrow>\n        state_eq (Some 1) xs) \\<and>\n       (stl xs = watch drinks i \\<or>\n        alw (\\<lambda>xs.\n                nxt (state_eq (Some 2)) xs \\<longrightarrow>\n                state_eq (Some 1) xs)\n         (stl xs))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs.\n       watch drinks i = xs \\<and>\n       (nxt (state_eq (Some 2)) xs \\<longrightarrow>\n        state_eq (Some 1) xs) \\<and>\n       (stl xs = watch drinks i \\<or>\n        alw (\\<lambda>xs.\n                nxt (state_eq (Some 2)) xs \\<longrightarrow>\n                state_eq (Some 1) xs)\n         (stl xs))", "apply (case_tac \"shd i\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       shd i = (a, b) \\<Longrightarrow>\n       \\<exists>xs.\n          watch drinks i = xs \\<and>\n          (nxt (state_eq (Some 2)) xs \\<longrightarrow>\n           state_eq (Some 1) xs) \\<and>\n          (stl xs = watch drinks i \\<or>\n           alw (\\<lambda>xs.\n                   nxt (state_eq (Some 2)) xs \\<longrightarrow>\n                   state_eq (Some 1) xs)\n            (stl xs))", "apply (simp del: ltl_step.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       shd i = (a, b) \\<Longrightarrow>\n       fst (ltl_step drinks (Some 0) <> (a, b)) \\<noteq> Some 2 \\<and>\n       (make_full_observation drinks\n         (fst (ltl_step drinks (Some 0) <> (a, b)))\n         (snd (snd (ltl_step drinks (Some 0) <> (a, b))))\n         (fst (snd (ltl_step drinks (Some 0) <> (a, b)))) (stl i) =\n        watch drinks i \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                state_eq (Some 1) xs)\n         (make_full_observation drinks\n           (fst (ltl_step drinks (Some 0) <> (a, b)))\n           (snd (snd (ltl_step drinks (Some 0) <> (a, b))))\n           (fst (snd (ltl_step drinks (Some 0) <> (a, b)))) (stl i)))", "apply (rule P_ltl_step_0)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       shd i = (a, b) \\<Longrightarrow>\n       fst (None, [], <>) \\<noteq> Some 2 \\<and>\n       (make_full_observation drinks (fst (None, [], <>))\n         (snd (snd (None, [], <>))) (fst (snd (None, [], <>))) (stl i) =\n        watch drinks i \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                state_eq (Some 1) xs)\n         (make_full_observation drinks (fst (None, [], <>))\n           (snd (snd (None, [], <>))) (fst (snd (None, [], <>))) (stl i)))\n 2. \\<And>a b.\n       shd i = (a, b) \\<Longrightarrow>\n       a = STR ''select'' \\<longrightarrow>\n       fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>) \\<noteq>\n       Some 2 \\<and>\n       (make_full_observation drinks\n         (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n         (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (stl i) =\n        watch drinks i \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                state_eq (Some 1) xs)\n         (make_full_observation drinks\n           (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n           (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (stl i)))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       shd i = (a, b) \\<Longrightarrow>\n       make_full_observation drinks None <> [] (stl i) =\n       watch drinks i \\<or>\n       alw (\\<lambda>xs.\n               state_eq (Some 2) (stl xs) \\<longrightarrow>\n               state_eq (Some 1) xs)\n        (make_full_observation drinks None <> [] (stl i))\n 2. \\<And>a b.\n       shd i = (a, b) \\<Longrightarrow>\n       a = STR ''select'' \\<longrightarrow>\n       fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>) \\<noteq>\n       Some 2 \\<and>\n       (make_full_observation drinks\n         (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n         (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (stl i) =\n        watch drinks i \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                state_eq (Some 1) xs)\n         (make_full_observation drinks\n           (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n           (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (stl i)))", "apply (rule disjI2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       shd i = (a, b) \\<Longrightarrow>\n       alw (\\<lambda>xs.\n               state_eq (Some 2) (stl xs) \\<longrightarrow>\n               state_eq (Some 1) xs)\n        (make_full_observation drinks None <> [] (stl i))\n 2. \\<And>a b.\n       shd i = (a, b) \\<Longrightarrow>\n       a = STR ''select'' \\<longrightarrow>\n       fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>) \\<noteq>\n       Some 2 \\<and>\n       (make_full_observation drinks\n         (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n         (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (stl i) =\n        watch drinks i \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                state_eq (Some 1) xs)\n         (make_full_observation drinks\n           (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n           (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (stl i)))", "apply (rule alw_mono[of \"nxt (state_eq None)\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       shd i = (a, b) \\<Longrightarrow>\n       alw (nxt (state_eq None))\n        (make_full_observation drinks None <> [] (stl i))\n 2. \\<And>a b xs.\n       \\<lbrakk>shd i = (a, b); nxt (state_eq None) xs\\<rbrakk>\n       \\<Longrightarrow> state_eq (Some 2) (stl xs) \\<longrightarrow>\n                         state_eq (Some 1) xs\n 3. \\<And>a b.\n       shd i = (a, b) \\<Longrightarrow>\n       a = STR ''select'' \\<longrightarrow>\n       fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>) \\<noteq>\n       Some 2 \\<and>\n       (make_full_observation drinks\n         (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n         (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (stl i) =\n        watch drinks i \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                state_eq (Some 1) xs)\n         (make_full_observation drinks\n           (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n           (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (stl i)))", "apply (simp add: once_none_nxt_always_none)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b xs.\n       \\<lbrakk>shd i = (a, b); nxt (state_eq None) xs\\<rbrakk>\n       \\<Longrightarrow> state_eq (Some 2) (stl xs) \\<longrightarrow>\n                         state_eq (Some 1) xs\n 2. \\<And>a b.\n       shd i = (a, b) \\<Longrightarrow>\n       a = STR ''select'' \\<longrightarrow>\n       fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>) \\<noteq>\n       Some 2 \\<and>\n       (make_full_observation drinks\n         (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n         (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (stl i) =\n        watch drinks i \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                state_eq (Some 1) xs)\n         (make_full_observation drinks\n           (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n           (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (stl i)))", "using one_before_two_aux"], ["proof (prove)\nusing this:\n  \\<exists>p r i.\n     ?j =\n     nxt (make_full_observation drinks (Some 1) r p) i \\<Longrightarrow>\n  alw (\\<lambda>x.\n          nxt (state_eq (Some 2)) x \\<longrightarrow> state_eq (Some 1) x)\n   ?j\n\ngoal (2 subgoals):\n 1. \\<And>a b xs.\n       \\<lbrakk>shd i = (a, b); nxt (state_eq None) xs\\<rbrakk>\n       \\<Longrightarrow> state_eq (Some 2) (stl xs) \\<longrightarrow>\n                         state_eq (Some 1) xs\n 2. \\<And>a b.\n       shd i = (a, b) \\<Longrightarrow>\n       a = STR ''select'' \\<longrightarrow>\n       fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>) \\<noteq>\n       Some 2 \\<and>\n       (make_full_observation drinks\n         (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n         (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (stl i) =\n        watch drinks i \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                state_eq (Some 1) xs)\n         (make_full_observation drinks\n           (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n           (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (stl i)))", "by auto"], ["proof (state)\nthis:\n  \\<exists>xs.\n     watch drinks i = xs \\<and>\n     (nxt (state_eq (Some 2)) xs \\<longrightarrow>\n      state_eq (Some 1) xs) \\<and>\n     (stl xs = watch drinks i \\<or>\n      alw (\\<lambda>xs.\n              nxt (state_eq (Some 2)) xs \\<longrightarrow>\n              state_eq (Some 1) xs)\n       (stl xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma costsMoney_aux:\n  assumes \"\\<exists>p r i. j = (nxt (make_full_observation drinks (Some 1) r p) i)\"\n  shows \"alw (\\<lambda>xs. nxt (state_eq (Some 2)) xs \\<longrightarrow> check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (\\<lambda>xs.\n            nxt (state_eq (Some 2)) xs \\<longrightarrow>\n            check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n     j", "using assms"], ["proof (prove)\nusing this:\n  \\<exists>p r i. j = nxt (make_full_observation drinks (Some 1) r p) i\n\ngoal (1 subgoal):\n 1. alw (\\<lambda>xs.\n            nxt (state_eq (Some 2)) xs \\<longrightarrow>\n            check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n     j", "apply coinduct"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>p r i.\n          x =\n          nxt (make_full_observation drinks (Some 1) r p)\n           i \\<Longrightarrow>\n       \\<exists>xs.\n          x = xs \\<and>\n          (nxt (state_eq (Some 2)) xs \\<longrightarrow>\n           check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) \\<and>\n          ((\\<exists>p r i.\n               stl xs =\n               nxt (make_full_observation drinks (Some 1) r p) i) \\<or>\n           alw (\\<lambda>xs.\n                   nxt (state_eq (Some 2)) xs \\<longrightarrow>\n                   check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n            (stl xs))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r i.\n       (fst (ltl_step drinks (Some 1) r (shd (stl i))) =\n        Some 2 \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ia.\n            make_full_observation drinks\n             (fst (ltl_step drinks (Some 1) r (shd (stl i))))\n             (snd (snd (ltl_step drinks (Some 1) r (shd (stl i)))))\n             (fst (snd (ltl_step drinks (Some 1) r (shd (stl i)))))\n             (stl (stl i)) =\n            make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (ltl_step drinks (Some 1) r (shd (stl i))))\n           (snd (snd (ltl_step drinks (Some 1) r (shd (stl i)))))\n           (fst (snd (ltl_step drinks (Some 1) r (shd (stl i)))))\n           (stl (stl i))))", "subgoal for r i"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (ltl_step drinks (Some 1) r (shd (stl i))) =\n     Some 2 \\<longrightarrow>\n     \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n    ((\\<exists>p ra ia.\n         make_full_observation drinks\n          (fst (ltl_step drinks (Some 1) r (shd (stl i))))\n          (snd (snd (ltl_step drinks (Some 1) r (shd (stl i)))))\n          (fst (snd (ltl_step drinks (Some 1) r (shd (stl i)))))\n          (stl (stl i)) =\n         make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n     alw (\\<lambda>xs.\n             state_eq (Some 2) (stl xs) \\<longrightarrow>\n             \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n             trilean.true)\n      (make_full_observation drinks\n        (fst (ltl_step drinks (Some 1) r (shd (stl i))))\n        (snd (snd (ltl_step drinks (Some 1) r (shd (stl i)))))\n        (fst (snd (ltl_step drinks (Some 1) r (shd (stl i)))))\n        (stl (stl i))))", "apply (case_tac \"shd (stl i)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       (fst (ltl_step drinks (Some 1) r (shd (stl i))) =\n        Some 2 \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ia.\n            make_full_observation drinks\n             (fst (ltl_step drinks (Some 1) r (shd (stl i))))\n             (snd (snd (ltl_step drinks (Some 1) r (shd (stl i)))))\n             (fst (snd (ltl_step drinks (Some 1) r (shd (stl i)))))\n             (stl (stl i)) =\n            make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (ltl_step drinks (Some 1) r (shd (stl i))))\n           (snd (snd (ltl_step drinks (Some 1) r (shd (stl i)))))\n           (fst (snd (ltl_step drinks (Some 1) r (shd (stl i)))))\n           (stl (stl i))))", "apply (simp del: ltl_step.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       (fst (ltl_step drinks (Some 1) r (a, b)) = Some 2 \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ia.\n            make_full_observation drinks\n             (fst (ltl_step drinks (Some 1) r (a, b)))\n             (snd (snd (ltl_step drinks (Some 1) r (a, b))))\n             (fst (snd (ltl_step drinks (Some 1) r (a, b)))) (stl (stl i)) =\n            make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (ltl_step drinks (Some 1) r (a, b)))\n           (snd (snd (ltl_step drinks (Some 1) r (a, b))))\n           (fst (snd (ltl_step drinks (Some 1) r (a, b)))) (stl (stl i))))", "apply (rule P_ltl_step_1)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       (fst (None, [], r) = Some 2 \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ia.\n            make_full_observation drinks (fst (None, [], r))\n             (snd (snd (None, [], r))) (fst (snd (None, [], r)))\n             (stl (stl i)) =\n            make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (None, [], r))\n           (snd (snd (None, [], r))) (fst (snd (None, [], r)))\n           (stl (stl i))))\n 2. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       a = STR ''coin'' \\<longrightarrow>\n       (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n             (2 $:= value_plus (r $ 2) (Some (b ! 0)))) =\n        Some 2 \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ia.\n            make_full_observation drinks\n             (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                   (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n             (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (stl (stl i)) =\n            make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                 (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n           (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (stl (stl i))))\n 3. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow>\n       (fst (Some 1, [], r) = Some 2 \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ia.\n            make_full_observation drinks (fst (Some 1, [], r))\n             (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n             (stl (stl i)) =\n            make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 1, [], r))\n           (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n           (stl (stl i))))\n 4. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (fst (Some 2, [r $ 1], r) = Some 2 \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ia.\n            make_full_observation drinks (fst (Some 2, [r $ 1], r))\n             (snd (snd (Some 2, [r $ 1], r)))\n             (fst (snd (Some 2, [r $ 1], r))) (stl (stl i)) =\n            make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n           (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n           (stl (stl i))))", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       (\\<exists>p ra ia.\n           make_full_observation drinks None r [] (stl (stl i)) =\n           make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n       alw (\\<lambda>xs.\n               state_eq (Some 2) (stl xs) \\<longrightarrow>\n               \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n               trilean.true)\n        (make_full_observation drinks None r [] (stl (stl i)))\n 2. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       a = STR ''coin'' \\<longrightarrow>\n       (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n             (2 $:= value_plus (r $ 2) (Some (b ! 0)))) =\n        Some 2 \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ia.\n            make_full_observation drinks\n             (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                   (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n             (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (stl (stl i)) =\n            make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                 (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n           (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (stl (stl i))))\n 3. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow>\n       (fst (Some 1, [], r) = Some 2 \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ia.\n            make_full_observation drinks (fst (Some 1, [], r))\n             (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n             (stl (stl i)) =\n            make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 1, [], r))\n           (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n           (stl (stl i))))\n 4. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (fst (Some 2, [r $ 1], r) = Some 2 \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ia.\n            make_full_observation drinks (fst (Some 2, [r $ 1], r))\n             (snd (snd (Some 2, [r $ 1], r)))\n             (fst (snd (Some 2, [r $ 1], r))) (stl (stl i)) =\n            make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n           (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n           (stl (stl i))))", "apply (rule disjI2)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       alw (\\<lambda>xs.\n               state_eq (Some 2) (stl xs) \\<longrightarrow>\n               \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n               trilean.true)\n        (make_full_observation drinks None r [] (stl (stl i)))\n 2. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       a = STR ''coin'' \\<longrightarrow>\n       (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n             (2 $:= value_plus (r $ 2) (Some (b ! 0)))) =\n        Some 2 \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ia.\n            make_full_observation drinks\n             (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                   (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n             (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (stl (stl i)) =\n            make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                 (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n           (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (stl (stl i))))\n 3. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow>\n       (fst (Some 1, [], r) = Some 2 \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ia.\n            make_full_observation drinks (fst (Some 1, [], r))\n             (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n             (stl (stl i)) =\n            make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 1, [], r))\n           (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n           (stl (stl i))))\n 4. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (fst (Some 2, [r $ 1], r) = Some 2 \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ia.\n            make_full_observation drinks (fst (Some 2, [r $ 1], r))\n             (snd (snd (Some 2, [r $ 1], r)))\n             (fst (snd (Some 2, [r $ 1], r))) (stl (stl i)) =\n            make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n           (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n           (stl (stl i))))", "apply (rule alw_mono[of \"nxt (state_eq None)\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       alw (nxt (state_eq None))\n        (make_full_observation drinks None r [] (stl (stl i)))\n 2. \\<And>a b xs.\n       \\<lbrakk>shd (stl i) = (a, b); nxt (state_eq None) xs\\<rbrakk>\n       \\<Longrightarrow> state_eq (Some 2) (stl xs) \\<longrightarrow>\n                         \\<not>? value_gt (Some (Num 100))\n                                  (datastate (shd xs) $ 2) =\n                         trilean.true\n 3. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       a = STR ''coin'' \\<longrightarrow>\n       (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n             (2 $:= value_plus (r $ 2) (Some (b ! 0)))) =\n        Some 2 \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ia.\n            make_full_observation drinks\n             (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                   (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n             (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (stl (stl i)) =\n            make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                 (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n           (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (stl (stl i))))\n 4. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow>\n       (fst (Some 1, [], r) = Some 2 \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ia.\n            make_full_observation drinks (fst (Some 1, [], r))\n             (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n             (stl (stl i)) =\n            make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 1, [], r))\n           (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n           (stl (stl i))))\n 5. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (fst (Some 2, [r $ 1], r) = Some 2 \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ia.\n            make_full_observation drinks (fst (Some 2, [r $ 1], r))\n             (snd (snd (Some 2, [r $ 1], r)))\n             (fst (snd (Some 2, [r $ 1], r))) (stl (stl i)) =\n            make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n           (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n           (stl (stl i))))", "apply (simp add: once_none_nxt_always_none)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b xs.\n       \\<lbrakk>shd (stl i) = (a, b); nxt (state_eq None) xs\\<rbrakk>\n       \\<Longrightarrow> state_eq (Some 2) (stl xs) \\<longrightarrow>\n                         \\<not>? value_gt (Some (Num 100))\n                                  (datastate (shd xs) $ 2) =\n                         trilean.true\n 2. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       a = STR ''coin'' \\<longrightarrow>\n       (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n             (2 $:= value_plus (r $ 2) (Some (b ! 0)))) =\n        Some 2 \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ia.\n            make_full_observation drinks\n             (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                   (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n             (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (stl (stl i)) =\n            make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                 (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n           (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (stl (stl i))))\n 3. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow>\n       (fst (Some 1, [], r) = Some 2 \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ia.\n            make_full_observation drinks (fst (Some 1, [], r))\n             (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n             (stl (stl i)) =\n            make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 1, [], r))\n           (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n           (stl (stl i))))\n 4. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (fst (Some 2, [r $ 1], r) = Some 2 \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ia.\n            make_full_observation drinks (fst (Some 2, [r $ 1], r))\n             (snd (snd (Some 2, [r $ 1], r)))\n             (fst (snd (Some 2, [r $ 1], r))) (stl (stl i)) =\n            make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n           (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n           (stl (stl i))))", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       a = STR ''coin'' \\<longrightarrow>\n       (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n             (2 $:= value_plus (r $ 2) (Some (b ! 0)))) =\n        Some 2 \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ia.\n            make_full_observation drinks\n             (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                   (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n             (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (stl (stl i)) =\n            make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                 (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n           (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (stl (stl i))))\n 2. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow>\n       (fst (Some 1, [], r) = Some 2 \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ia.\n            make_full_observation drinks (fst (Some 1, [], r))\n             (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n             (stl (stl i)) =\n            make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 1, [], r))\n           (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n           (stl (stl i))))\n 3. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (fst (Some 2, [r $ 1], r) = Some 2 \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ia.\n            make_full_observation drinks (fst (Some 2, [r $ 1], r))\n             (snd (snd (Some 2, [r $ 1], r)))\n             (fst (snd (Some 2, [r $ 1], r))) (stl (stl i)) =\n            make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n           (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n           (stl (stl i))))", "apply auto[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow>\n       (fst (Some 1, [], r) = Some 2 \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ia.\n            make_full_observation drinks (fst (Some 1, [], r))\n             (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n             (stl (stl i)) =\n            make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 1, [], r))\n           (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n           (stl (stl i))))\n 2. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (fst (Some 2, [r $ 1], r) = Some 2 \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ia.\n            make_full_observation drinks (fst (Some 2, [r $ 1], r))\n             (snd (snd (Some 2, [r $ 1], r)))\n             (fst (snd (Some 2, [r $ 1], r))) (stl (stl i)) =\n            make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n           (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n           (stl (stl i))))", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (fst (Some 2, [r $ 1], r) = Some 2 \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ia.\n            make_full_observation drinks (fst (Some 2, [r $ 1], r))\n             (snd (snd (Some 2, [r $ 1], r)))\n             (fst (snd (Some 2, [r $ 1], r))) (stl (stl i)) =\n            make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n        alw (\\<lambda>xs.\n                state_eq (Some 2) (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n           (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n           (stl (stl i))))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       shd (stl i) = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (\\<exists>p ra ia.\n           make_full_observation drinks (Some 2) r [r $ 1] (stl (stl i)) =\n           make_full_observation drinks (Some 1) ra p (stl ia)) \\<or>\n       alw (\\<lambda>xs.\n               state_eq (Some 2) (stl xs) \\<longrightarrow>\n               \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n               trilean.true)\n        (make_full_observation drinks (Some 2) r [r $ 1] (stl (stl i)))", "apply standard"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>shd (stl i) = (a, b);\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p ra ia.\n                             make_full_observation drinks (Some 2) r [r $ 1]\n                              (stl (stl i)) =\n                             make_full_observation drinks (Some 1) ra p\n                              (stl ia)) \\<or>\n                         alw (\\<lambda>xs.\n                                 state_eq (Some 2)\n                                  (stl xs) \\<longrightarrow>\n                                 \\<not>? value_gt (Some (Num 100))\n    (datastate (shd xs) $ 2) =\n                                 trilean.true)\n                          (make_full_observation drinks (Some 2) r [r $ 1]\n                            (stl (stl i)))", "apply (rule disjI2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>shd (stl i) = (a, b);\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true\\<rbrakk>\n       \\<Longrightarrow> alw (\\<lambda>xs.\n                                 state_eq (Some 2)\n                                  (stl xs) \\<longrightarrow>\n                                 \\<not>? value_gt (Some (Num 100))\n    (datastate (shd xs) $ 2) =\n                                 trilean.true)\n                          (make_full_observation drinks (Some 2) r [r $ 1]\n                            (stl (stl i)))", "apply (rule alw_mono[of \"nxt (state_eq None)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>shd (stl i) = (a, b);\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true\\<rbrakk>\n       \\<Longrightarrow> alw (nxt (state_eq None))\n                          (make_full_observation drinks (Some 2) r [r $ 1]\n                            (stl (stl i)))\n 2. \\<And>a b xs.\n       \\<lbrakk>shd (stl i) = (a, b);\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true;\n        nxt (state_eq None) xs\\<rbrakk>\n       \\<Longrightarrow> state_eq (Some 2) (stl xs) \\<longrightarrow>\n                         \\<not>? value_gt (Some (Num 100))\n                                  (datastate (shd xs) $ 2) =\n                         trilean.true", "apply (metis (no_types, lifting) drinks_step_2_none fst_conv make_full_observation.sel(2) nxt.simps nxt_alw once_none_always_none_aux)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b xs.\n       \\<lbrakk>shd (stl i) = (a, b);\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true;\n        nxt (state_eq None) xs\\<rbrakk>\n       \\<Longrightarrow> state_eq (Some 2) (stl xs) \\<longrightarrow>\n                         \\<not>? value_gt (Some (Num 100))\n                                  (datastate (shd xs) $ 2) =\n                         trilean.true", "by simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(* costsMoney: THEOREM drinks |- G(X(cfstate=State_2) => gval(value_ge(r_2, Some(NUM(100))))); *)"], ["", "lemma LTL_costsMoney:\n  \"(alw (nxt (state_eq (Some 2)) impl (check_exp (Ge (V (Rg 2)) (L (Num 100)))))) (watch drinks i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (\\<lambda>xs.\n            nxt (state_eq (Some 2)) xs \\<longrightarrow>\n            check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n     (watch drinks i)", "proof(coinduction)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>xs.\n       watch drinks i = xs \\<and>\n       (nxt (state_eq (Some 2)) xs \\<longrightarrow>\n        check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) \\<and>\n       (stl xs = watch drinks i \\<or>\n        alw (\\<lambda>xs.\n                nxt (state_eq (Some 2)) xs \\<longrightarrow>\n                check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n         (stl xs))", "case alw"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<exists>xs.\n       watch drinks i = xs \\<and>\n       (nxt (state_eq (Some 2)) xs \\<longrightarrow>\n        check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) \\<and>\n       (stl xs = watch drinks i \\<or>\n        alw (\\<lambda>xs.\n                nxt (state_eq (Some 2)) xs \\<longrightarrow>\n                check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n         (stl xs))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs.\n       watch drinks i = xs \\<and>\n       (nxt (state_eq (Some 2)) xs \\<longrightarrow>\n        check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) \\<and>\n       (stl xs = watch drinks i \\<or>\n        alw (\\<lambda>xs.\n                nxt (state_eq (Some 2)) xs \\<longrightarrow>\n                check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n         (stl xs))", "apply (cases \"shd i\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       shd i = (a, b) \\<Longrightarrow>\n       \\<exists>xs.\n          watch drinks i = xs \\<and>\n          (nxt (state_eq (Some 2)) xs \\<longrightarrow>\n           check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) \\<and>\n          (stl xs = watch drinks i \\<or>\n           alw (\\<lambda>xs.\n                   nxt (state_eq (Some 2)) xs \\<longrightarrow>\n                   check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n            (stl xs))", "subgoal for l ip"], ["proof (prove)\ngoal (1 subgoal):\n 1. shd i = (l, ip) \\<Longrightarrow>\n    \\<exists>xs.\n       watch drinks i = xs \\<and>\n       (nxt (state_eq (Some 2)) xs \\<longrightarrow>\n        check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) \\<and>\n       (stl xs = watch drinks i \\<or>\n        alw (\\<lambda>xs.\n                nxt (state_eq (Some 2)) xs \\<longrightarrow>\n                check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n         (stl xs))", "apply (case_tac \"l = STR ''select'' \\<and> length ip = 1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>shd i = (l, ip);\n     l = STR ''select'' \\<and> length ip = 1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xs.\n                         watch drinks i = xs \\<and>\n                         (nxt (state_eq (Some 2)) xs \\<longrightarrow>\n                          check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) \\<and>\n                         (stl xs = watch drinks i \\<or>\n                          alw (\\<lambda>xs.\n                                  nxt (state_eq (Some 2))\n                                   xs \\<longrightarrow>\n                                  check_exp (Ge (V (Rg 2)) (L (Num 100)))\n                                   xs)\n                           (stl xs))\n 2. \\<lbrakk>shd i = (l, ip);\n     \\<not> (l = STR ''select'' \\<and> length ip = 1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xs.\n                         watch drinks i = xs \\<and>\n                         (nxt (state_eq (Some 2)) xs \\<longrightarrow>\n                          check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) \\<and>\n                         (stl xs = watch drinks i \\<or>\n                          alw (\\<lambda>xs.\n                                  nxt (state_eq (Some 2))\n                                   xs \\<longrightarrow>\n                                  check_exp (Ge (V (Rg 2)) (L (Num 100)))\n                                   xs)\n                           (stl xs))", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>shd i = (l, ip);\n     \\<not> (l = STR ''select'' \\<and> length ip = 1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xs.\n                         watch drinks i = xs \\<and>\n                         (nxt (state_eq (Some 2)) xs \\<longrightarrow>\n                          check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) \\<and>\n                         (stl xs = watch drinks i \\<or>\n                          alw (\\<lambda>xs.\n                                  nxt (state_eq (Some 2))\n                                   xs \\<longrightarrow>\n                                  check_exp (Ge (V (Rg 2)) (L (Num 100)))\n                                   xs)\n                           (stl xs))\n 2. \\<lbrakk>shd i = (l, ip);\n     l = STR ''select'' \\<and> length ip = 1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xs.\n                         watch drinks i = xs \\<and>\n                         (nxt (state_eq (Some 2)) xs \\<longrightarrow>\n                          check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) \\<and>\n                         (stl xs = watch drinks i \\<or>\n                          alw (\\<lambda>xs.\n                                  nxt (state_eq (Some 2))\n                                   xs \\<longrightarrow>\n                                  check_exp (Ge (V (Rg 2)) (L (Num 100)))\n                                   xs)\n                           (stl xs))", "apply (simp add: possible_steps_0_invalid)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>shd i = (l, ip);\n     l = STR ''select'' \\<longrightarrow> length ip \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> make_full_observation drinks None <> [] (stl i) =\n                      watch drinks i \\<or>\n                      alw (\\<lambda>xs.\n                              state_eq (Some 2) (stl xs) \\<longrightarrow>\n                              \\<not>? value_gt (Some (Num 100))\n (datastate (shd xs) $ 2) =\n                              trilean.true)\n                       (make_full_observation drinks None <> [] (stl i))\n 2. \\<lbrakk>shd i = (l, ip);\n     l = STR ''select'' \\<and> length ip = 1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xs.\n                         watch drinks i = xs \\<and>\n                         (nxt (state_eq (Some 2)) xs \\<longrightarrow>\n                          check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) \\<and>\n                         (stl xs = watch drinks i \\<or>\n                          alw (\\<lambda>xs.\n                                  nxt (state_eq (Some 2))\n                                   xs \\<longrightarrow>\n                                  check_exp (Ge (V (Rg 2)) (L (Num 100)))\n                                   xs)\n                           (stl xs))", "apply (rule disjI2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>shd i = (l, ip);\n     l = STR ''select'' \\<longrightarrow> length ip \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> alw (\\<lambda>xs.\n                              state_eq (Some 2) (stl xs) \\<longrightarrow>\n                              \\<not>? value_gt (Some (Num 100))\n (datastate (shd xs) $ 2) =\n                              trilean.true)\n                       (make_full_observation drinks None <> [] (stl i))\n 2. \\<lbrakk>shd i = (l, ip);\n     l = STR ''select'' \\<and> length ip = 1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xs.\n                         watch drinks i = xs \\<and>\n                         (nxt (state_eq (Some 2)) xs \\<longrightarrow>\n                          check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) \\<and>\n                         (stl xs = watch drinks i \\<or>\n                          alw (\\<lambda>xs.\n                                  nxt (state_eq (Some 2))\n                                   xs \\<longrightarrow>\n                                  check_exp (Ge (V (Rg 2)) (L (Num 100)))\n                                   xs)\n                           (stl xs))", "apply (rule alw_mono[of \"nxt (state_eq None)\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>shd i = (l, ip);\n     l = STR ''select'' \\<longrightarrow> length ip \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> alw (nxt (state_eq None))\n                       (make_full_observation drinks None <> [] (stl i))\n 2. \\<And>xs.\n       \\<lbrakk>shd i = (l, ip);\n        l = STR ''select'' \\<longrightarrow> length ip \\<noteq> 1;\n        nxt (state_eq None) xs\\<rbrakk>\n       \\<Longrightarrow> state_eq (Some 2) (stl xs) \\<longrightarrow>\n                         \\<not>? value_gt (Some (Num 100))\n                                  (datastate (shd xs) $ 2) =\n                         trilean.true\n 3. \\<lbrakk>shd i = (l, ip);\n     l = STR ''select'' \\<and> length ip = 1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xs.\n                         watch drinks i = xs \\<and>\n                         (nxt (state_eq (Some 2)) xs \\<longrightarrow>\n                          check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) \\<and>\n                         (stl xs = watch drinks i \\<or>\n                          alw (\\<lambda>xs.\n                                  nxt (state_eq (Some 2))\n                                   xs \\<longrightarrow>\n                                  check_exp (Ge (V (Rg 2)) (L (Num 100)))\n                                   xs)\n                           (stl xs))", "apply (simp add: once_none_nxt_always_none)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>shd i = (l, ip);\n        l = STR ''select'' \\<longrightarrow> length ip \\<noteq> 1;\n        nxt (state_eq None) xs\\<rbrakk>\n       \\<Longrightarrow> state_eq (Some 2) (stl xs) \\<longrightarrow>\n                         \\<not>? value_gt (Some (Num 100))\n                                  (datastate (shd xs) $ 2) =\n                         trilean.true\n 2. \\<lbrakk>shd i = (l, ip);\n     l = STR ''select'' \\<and> length ip = 1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xs.\n                         watch drinks i = xs \\<and>\n                         (nxt (state_eq (Some 2)) xs \\<longrightarrow>\n                          check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) \\<and>\n                         (stl xs = watch drinks i \\<or>\n                          alw (\\<lambda>xs.\n                                  nxt (state_eq (Some 2))\n                                   xs \\<longrightarrow>\n                                  check_exp (Ge (V (Rg 2)) (L (Num 100)))\n                                   xs)\n                           (stl xs))", "apply (simp add: )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>shd i = (l, ip);\n     l = STR ''select'' \\<and> length ip = 1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xs.\n                         watch drinks i = xs \\<and>\n                         (nxt (state_eq (Some 2)) xs \\<longrightarrow>\n                          check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) \\<and>\n                         (stl xs = watch drinks i \\<or>\n                          alw (\\<lambda>xs.\n                                  nxt (state_eq (Some 2))\n                                   xs \\<longrightarrow>\n                                  check_exp (Ge (V (Rg 2)) (L (Num 100)))\n                                   xs)\n                           (stl xs))", "apply (simp add: possible_steps_0 select_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>shd i = (STR ''select'', ip);\n     l = STR ''select'' \\<and> length ip = 1\\<rbrakk>\n    \\<Longrightarrow> make_full_observation drinks (Some 1)\n                       (apply_updates [(1, V (I 0)), (2, L (Num 0))]\n                         (join_ir ip <>) <>)\n                       [] (stl i) =\n                      watch drinks i \\<or>\n                      alw (\\<lambda>xs.\n                              state_eq (Some 2) (stl xs) \\<longrightarrow>\n                              \\<not>? value_gt (Some (Num 100))\n (datastate (shd xs) $ 2) =\n                              trilean.true)\n                       (make_full_observation drinks (Some 1)\n                         (apply_updates [(1, V (I 0)), (2, L (Num 0))]\n                           (join_ir ip <>) <>)\n                         [] (stl i))", "apply (rule disjI2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>shd i = (STR ''select'', ip);\n     l = STR ''select'' \\<and> length ip = 1\\<rbrakk>\n    \\<Longrightarrow> alw (\\<lambda>xs.\n                              state_eq (Some 2) (stl xs) \\<longrightarrow>\n                              \\<not>? value_gt (Some (Num 100))\n (datastate (shd xs) $ 2) =\n                              trilean.true)\n                       (make_full_observation drinks (Some 1)\n                         (apply_updates [(1, V (I 0)), (2, L (Num 0))]\n                           (join_ir ip <>) <>)\n                         [] (stl i))", "apply (simp only: nxt.simps[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>shd i = (STR ''select'', ip);\n     l = STR ''select'' \\<and> length ip = 1\\<rbrakk>\n    \\<Longrightarrow> alw (\\<lambda>xs.\n                              statename (nxt shd xs) =\n                              Some 2 \\<longrightarrow>\n                              \\<not>? value_gt (Some (Num 100))\n (datastate (shd xs) $ 2) =\n                              trilean.true)\n                       (nxt (make_full_observation drinks (Some 1)\n                              (apply_updates [(1, V (I 0)), (2, L (Num 0))]\n                                (join_ir ip <>) <>)\n                              [])\n                         i)", "using costsMoney_aux"], ["proof (prove)\nusing this:\n  \\<exists>p r i.\n     ?j =\n     nxt (make_full_observation drinks (Some 1) r p) i \\<Longrightarrow>\n  alw (\\<lambda>xs.\n          nxt (state_eq (Some 2)) xs \\<longrightarrow>\n          check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n   ?j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>shd i = (STR ''select'', ip);\n     l = STR ''select'' \\<and> length ip = 1\\<rbrakk>\n    \\<Longrightarrow> alw (\\<lambda>xs.\n                              statename (nxt shd xs) =\n                              Some 2 \\<longrightarrow>\n                              \\<not>? value_gt (Some (Num 100))\n (datastate (shd xs) $ 2) =\n                              trilean.true)\n                       (nxt (make_full_observation drinks (Some 1)\n                              (apply_updates [(1, V (I 0)), (2, L (Num 0))]\n                                (join_ir ip <>) <>)\n                              [])\n                         i)", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>xs.\n     watch drinks i = xs \\<and>\n     (nxt (state_eq (Some 2)) xs \\<longrightarrow>\n      check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) \\<and>\n     (stl xs = watch drinks i \\<or>\n      alw (\\<lambda>xs.\n              nxt (state_eq (Some 2)) xs \\<longrightarrow>\n              check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n       (stl xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LTL_costsMoney_aux:\n  \"(alw (not (check_exp (Ge (V (Rg 2)) (L (Num 100)))) impl (not (nxt (state_eq (Some 2)))))) (watch drinks i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (\\<lambda>xs.\n            gval (Ge (V (Rg 2)) (L (Num 100)))\n             (join_iro (inputs (shd xs)) (datastate (shd xs))\n               (output (shd xs))) \\<noteq>\n            trilean.true \\<longrightarrow>\n            \\<not> nxt (state_eq (Some 2)) xs)\n     (watch drinks i)", "by (metis (no_types, lifting) LTL_costsMoney alw_mono)"], ["", "lemma implode_select: \"String.implode ''select'' = STR ''select''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. String.implode ''select'' = STR ''select''", "by (metis Literal.rep_eq String.implode_explode_eq zero_literal.rep_eq)"], ["", "lemma implode_coin: \"String.implode ''coin'' = STR ''coin''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. String.implode ''coin'' = STR ''coin''", "by (metis Literal.rep_eq String.implode_explode_eq zero_literal.rep_eq)"], ["", "lemma implode_vend: \"String.implode ''vend'' = STR ''vend''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. String.implode ''vend'' = STR ''vend''", "by (metis Literal.rep_eq String.implode_explode_eq zero_literal.rep_eq)"], ["", "lemmas implode_labels = implode_select implode_coin implode_vend"], ["", "lemma LTL_neverReachS2:\"(((((action_eq (''select'', [Str ''coke''])))\n                    aand\n                    (nxt ((action_eq (''coin'', [Num 100])))))\n                    aand\n                    (nxt (nxt((label_eq ''vend'' aand (input_eq []))))))\n                    impl\n                    (nxt (nxt (nxt (state_eq (Some 2))))))\n                    (watch drinks i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((label_eq (fst (''select'', [EFSM.Str ''coke'']))\n       (watch drinks i) \\<and>\n      input_eq (snd (''select'', [EFSM.Str ''coke'']))\n       (watch drinks i)) \\<and>\n     nxt (\\<lambda>xs.\n             label_eq (fst (''coin'', [Num 100])) xs \\<and>\n             input_eq (snd (''coin'', [Num 100])) xs)\n      (watch drinks i)) \\<and>\n    nxt (nxt (\\<lambda>xs. label_eq ''vend'' xs \\<and> input_eq [] xs))\n     (watch drinks i) \\<longrightarrow>\n    nxt (nxt (nxt (state_eq (Some 2)))) (watch drinks i)", "apply (simp add: implode_labels)"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (shd i) = STR ''select'' \\<and>\n    snd (shd i) = [EFSM.Str ''coke''] \\<and>\n    fst (shd (stl i)) = STR ''coin'' \\<and>\n    snd (shd (stl i)) = [Num 100] \\<and>\n    fst (shd (stl (stl i))) = STR ''vend'' \\<and>\n    snd (shd (stl (stl i))) = [] \\<longrightarrow>\n    fst (ltl_step drinks\n          (fst (ltl_step drinks (fst (ltl_step drinks (Some 0) <> (shd i)))\n                 (snd (snd (ltl_step drinks (Some 0) <> (shd i))))\n                 (shd (stl i))))\n          (snd (snd (ltl_step drinks\n                      (fst (ltl_step drinks (Some 0) <> (shd i)))\n                      (snd (snd (ltl_step drinks (Some 0) <> (shd i))))\n                      (shd (stl i)))))\n          (shd (stl (stl i)))) =\n    Some 2", "apply (cases i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       i = x1 ## x2 \\<Longrightarrow>\n       fst (shd i) = STR ''select'' \\<and>\n       snd (shd i) = [EFSM.Str ''coke''] \\<and>\n       fst (shd (stl i)) = STR ''coin'' \\<and>\n       snd (shd (stl i)) = [Num 100] \\<and>\n       fst (shd (stl (stl i))) = STR ''vend'' \\<and>\n       snd (shd (stl (stl i))) = [] \\<longrightarrow>\n       fst (ltl_step drinks\n             (fst (ltl_step drinks\n                    (fst (ltl_step drinks (Some 0) <> (shd i)))\n                    (snd (snd (ltl_step drinks (Some 0) <> (shd i))))\n                    (shd (stl i))))\n             (snd (snd (ltl_step drinks\n                         (fst (ltl_step drinks (Some 0) <> (shd i)))\n                         (snd (snd (ltl_step drinks (Some 0) <> (shd i))))\n                         (shd (stl i)))))\n             (shd (stl (stl i)))) =\n       Some 2", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b x2.\n       \\<lbrakk>i = (a, b) ## x2; fst (shd ((a, b) ## x2)) = STR ''select'';\n        snd (shd ((a, b) ## x2)) = [EFSM.Str ''coke''];\n        fst (shd (stl ((a, b) ## x2))) = STR ''coin'';\n        snd (shd (stl ((a, b) ## x2))) = [Num 100];\n        fst (shd (stl (stl ((a, b) ## x2)))) = STR ''vend'';\n        snd (shd (stl (stl ((a, b) ## x2)))) = []\\<rbrakk>\n       \\<Longrightarrow> fst (ltl_step drinks\n                               (fst (ltl_step drinks\n(fst (ltl_step drinks (Some 0) <> (shd ((a, b) ## x2))))\n(snd (snd (ltl_step drinks (Some 0) <> (shd ((a, b) ## x2)))))\n(shd (stl ((a, b) ## x2)))))\n                               (snd (snd\n(ltl_step drinks (fst (ltl_step drinks (Some 0) <> (shd ((a, b) ## x2))))\n  (snd (snd (ltl_step drinks (Some 0) <> (shd ((a, b) ## x2)))))\n  (shd (stl ((a, b) ## x2))))))\n                               (shd (stl (stl ((a, b) ## x2))))) =\n                         Some 2", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b x2.\n       \\<lbrakk>i = (STR ''select'', [EFSM.Str ''coke'']) ## x2;\n        a = STR ''select''; b = [EFSM.Str ''coke''];\n        fst (shd x2) = STR ''coin''; snd (shd x2) = [Num 100];\n        fst (shd (stl x2)) = STR ''vend''; snd (shd (stl x2)) = []\\<rbrakk>\n       \\<Longrightarrow> fst (ltl_step drinks\n                               (fst (ltl_step drinks\n(fst (let possibilities =\n            possible_steps drinks 0 <> STR ''select'' [EFSM.Str ''coke'']\n      in if possibilities = {||} then (None, [], <>)\n         else let (s', t) = SOME x. x |\\<in>| possibilities\n              in (Some s', evaluate_outputs t [EFSM.Str ''coke''] <>,\n                  evaluate_updates t [EFSM.Str ''coke''] <>)))\n(snd (snd (let possibilities =\n                 possible_steps drinks 0 <> STR ''select''\n                  [EFSM.Str ''coke'']\n           in if possibilities = {||} then (None, [], <>)\n              else let (s', t) = SOME x. x |\\<in>| possibilities\n                   in (Some s', evaluate_outputs t [EFSM.Str ''coke''] <>,\n                       evaluate_updates t [EFSM.Str ''coke''] <>))))\n(shd x2)))\n                               (snd (snd\n(ltl_step drinks\n  (fst (let possibilities =\n              possible_steps drinks 0 <> STR ''select'' [EFSM.Str ''coke'']\n        in if possibilities = {||} then (None, [], <>)\n           else let (s', t) = SOME x. x |\\<in>| possibilities\n                in (Some s', evaluate_outputs t [EFSM.Str ''coke''] <>,\n                    evaluate_updates t [EFSM.Str ''coke''] <>)))\n  (snd (snd (let possibilities =\n                   possible_steps drinks 0 <> STR ''select''\n                    [EFSM.Str ''coke'']\n             in if possibilities = {||} then (None, [], <>)\n                else let (s', t) = SOME x. x |\\<in>| possibilities\n                     in (Some s', evaluate_outputs t [EFSM.Str ''coke''] <>,\n                         evaluate_updates t [EFSM.Str ''coke''] <>))))\n  (shd x2))))\n                               (shd (stl x2))) =\n                         Some 2", "apply (simp add: possible_steps_0 select_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b x2.\n       \\<lbrakk>i = (STR ''select'', [EFSM.Str ''coke'']) ## x2;\n        a = STR ''select''; b = [EFSM.Str ''coke''];\n        fst (shd x2) = STR ''coin''; snd (shd x2) = [Num 100];\n        fst (shd (stl x2)) = STR ''vend''; snd (shd (stl x2)) = []\\<rbrakk>\n       \\<Longrightarrow> fst (ltl_step drinks\n                               (fst (ltl_step drinks (Some 1)\n(apply_updates [(1, V (I 0)), (2, L (Num 0))]\n  (join_ir [EFSM.Str ''coke''] <>) <>)\n(shd x2)))\n                               (snd (snd\n(ltl_step drinks (Some 1)\n  (apply_updates [(1, V (I 0)), (2, L (Num 0))]\n    (join_ir [EFSM.Str ''coke''] <>) <>)\n  (shd x2))))\n                               (shd (stl x2))) =\n                         Some 2", "apply (case_tac \"shd x2\", clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b x2 aa ba.\n       \\<lbrakk>i = (STR ''select'', [EFSM.Str ''coke'']) ## x2;\n        fst (shd x2) = STR ''coin''; snd (shd x2) = [Num 100];\n        fst (shd (stl x2)) = STR ''vend''; snd (shd (stl x2)) = [];\n        shd x2 = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> fst (ltl_step drinks\n                               (fst (ltl_step drinks (Some 1)\n(apply_updates [(1, V (I 0)), (2, L (Num 0))]\n  (join_ir [EFSM.Str ''coke''] <>) <>)\n(shd x2)))\n                               (snd (snd\n(ltl_step drinks (Some 1)\n  (apply_updates [(1, V (I 0)), (2, L (Num 0))]\n    (join_ir [EFSM.Str ''coke''] <>) <>)\n  (shd x2))))\n                               (shd (stl x2))) =\n                         Some 2", "apply (simp add: possible_steps_1_coin coin_def value_plus_def finfun_update_twist apply_updates_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2 aa ba.\n       \\<lbrakk>i = (STR ''select'', [EFSM.Str ''coke'']) ## x2;\n        aa = STR ''coin''; ba = [Num 100];\n        fst (shd (stl x2)) = STR ''vend''; snd (shd (stl x2)) = [];\n        shd x2 = (STR ''coin'', [Num 100])\\<rbrakk>\n       \\<Longrightarrow> fst (ltl_step drinks (Some 1)\n                               <2 $:= Some (Num 100),\n                               1 $:= Some (EFSM.Str ''coke'')>\n                               (shd (stl x2))) =\n                         Some 2", "apply (case_tac \"shd (stl x2)\", clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2 aa ba a b.\n       \\<lbrakk>i = (STR ''select'', [EFSM.Str ''coke'']) ## x2;\n        fst (shd (stl x2)) = STR ''vend''; snd (shd (stl x2)) = [];\n        shd x2 = (STR ''coin'', [Num 100]); shd (stl x2) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> fst (ltl_step drinks (Some 1)\n                               <2 $:= Some (Num 100),\n                               1 $:= Some (EFSM.Str ''coke'')>\n                               (shd (stl x2))) =\n                         Some 2", "by (simp add: drinks_vend_sufficient )"], ["", "lemma ltl_step_not_select:\n  \"\\<nexists>i. e = (STR ''select'', [i]) \\<Longrightarrow>\n   ltl_step drinks (Some 0) r e = (None, [], r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>i. e = (STR ''select'', [i]) \\<Longrightarrow>\n    ltl_step drinks (Some 0) r e = (None, [], r)", "apply (cases e, clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<nexists>i. (a, b) = (STR ''select'', [i]);\n        e = (a, b)\\<rbrakk>\n       \\<Longrightarrow> ltl_step drinks (Some 0) r (a, b) = (None, [], r)", "subgoal for a b"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>i. (a, b) = (STR ''select'', [i]);\n     e = (a, b)\\<rbrakk>\n    \\<Longrightarrow> ltl_step drinks (Some 0) r (a, b) = (None, [], r)", "apply (rule ltl_step_none)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>i. (a, b) = (STR ''select'', [i]);\n     e = (a, b)\\<rbrakk>\n    \\<Longrightarrow> possible_steps drinks 0 r a b = {||}", "apply (simp add: possible_steps_empty drinks_def can_take_transition_def can_take_def select_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = STR ''select'' \\<longrightarrow>\n             (\\<forall>i. b \\<noteq> [i]);\n     e = (a, b)\\<rbrakk>\n    \\<Longrightarrow> length b = 1 \\<longrightarrow>\n                      STR ''select'' \\<noteq> a", "by (cases e, case_tac b, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ltl_step_select:\n  \"ltl_step drinks (Some 0) <> (STR ''select'', [i]) = (Some 1, [], <1 $:= Some i, 2 $:= Some (Num 0)>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ltl_step drinks (Some 0) <> (STR ''select'', [i]) =\n    (Some 1, [], <1 $:= Some i, 2 $:= Some (Num 0)>)", "apply (rule  ltl_step_some[of _ _ _ _ _ _ select])"], ["proof (prove)\ngoal (3 subgoals):\n 1. possible_steps drinks 0 <> STR ''select'' [i] = {|(1, select)|}\n 2. evaluate_outputs select [i] <> = []\n 3. evaluate_updates select [i] <> = <1 $:= Some i, 2 $:= Some (Num 0)>", "apply (simp add: possible_steps_0)"], ["proof (prove)\ngoal (2 subgoals):\n 1. evaluate_outputs select [i] <> = []\n 2. evaluate_updates select [i] <> = <1 $:= Some i, 2 $:= Some (Num 0)>", "apply (simp add: select_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate_updates select [i] <> = <1 $:= Some i, 2 $:= Some (Num 0)>", "by (simp add: select_def finfun_update_twist apply_updates_def)"], ["", "lemma ltl_step_not_coin_or_vend:\n  \"\\<nexists>i. e = (STR ''coin'', [i]) \\<Longrightarrow>\n    e \\<noteq> (STR ''vend'', []) \\<Longrightarrow>\n    ltl_step drinks (Some 1) r e = (None, [], r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>i. e = (STR ''coin'', [i]);\n     e \\<noteq> (STR ''vend'', [])\\<rbrakk>\n    \\<Longrightarrow> ltl_step drinks (Some 1) r e = (None, [], r)", "apply (cases e)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<nexists>i. e = (STR ''coin'', [i]);\n        e \\<noteq> (STR ''vend'', []); e = (a, b)\\<rbrakk>\n       \\<Longrightarrow> ltl_step drinks (Some 1) r e = (None, [], r)", "subgoal for a b"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>i. e = (STR ''coin'', [i]);\n     e \\<noteq> (STR ''vend'', []); e = (a, b)\\<rbrakk>\n    \\<Longrightarrow> ltl_step drinks (Some 1) r e = (None, [], r)", "apply (simp del: ltl_step.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = STR ''coin'' \\<longrightarrow>\n             (\\<forall>i. b \\<noteq> [i]);\n     a = STR ''vend'' \\<longrightarrow> b \\<noteq> []; e = (a, b)\\<rbrakk>\n    \\<Longrightarrow> ltl_step drinks (Some 1) r (a, b) = (None, [], r)", "apply (rule ltl_step_none)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = STR ''coin'' \\<longrightarrow>\n             (\\<forall>i. b \\<noteq> [i]);\n     a = STR ''vend'' \\<longrightarrow> b \\<noteq> []; e = (a, b)\\<rbrakk>\n    \\<Longrightarrow> possible_steps drinks 1 r a b = {||}", "apply (simp add: possible_steps_empty drinks_def can_take_transition_def can_take_def transitions)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = STR ''coin'' \\<longrightarrow>\n             (\\<forall>i. b \\<noteq> [i]);\n     a = STR ''vend'' \\<longrightarrow> b \\<noteq> []; e = (a, b)\\<rbrakk>\n    \\<Longrightarrow> (length b = 1 \\<longrightarrow>\n                       STR ''coin'' \\<noteq> a) \\<and>\n                      (b = [] \\<longrightarrow>\n                       STR ''vend'' = a \\<longrightarrow>\n                       value_gt (Some (Num 100)) (r $ 2) \\<noteq>\n                       trilean.true) \\<and>\n                      (b = [] \\<longrightarrow>\n                       STR ''vend'' = a \\<longrightarrow>\n                       \\<not>? value_gt (Some (Num 100)) (r $ 2) \\<noteq>\n                       trilean.true)", "by (case_tac e, case_tac b, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ltl_step_coin:\n  \"\\<exists>p r'. ltl_step drinks (Some 1) r (STR ''coin'', [i]) = (Some 1, p, r')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p r'.\n       ltl_step drinks (Some 1) r (STR ''coin'', [i]) = (Some 1, p, r')", "by (simp add: possible_steps_1_coin)"], ["", "lemma alw_tl:\n  \"alw \\<phi> (make_full_observation e (Some 0) <> [] xs) \\<Longrightarrow>\n    alw \\<phi>\n     (make_full_observation e (fst (ltl_step e (Some 0) <> (shd xs))) (snd (snd (ltl_step e (Some 0) <> (shd xs))))\n       (fst (snd (ltl_step e (Some 0) <> (shd xs)))) (stl xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alw \\<phi> (watch e xs) \\<Longrightarrow>\n    alw \\<phi>\n     (make_full_observation e (fst (ltl_step e (Some 0) <> (shd xs)))\n       (snd (snd (ltl_step e (Some 0) <> (shd xs))))\n       (fst (snd (ltl_step e (Some 0) <> (shd xs)))) (stl xs))", "by auto"], ["", "lemma stop_at_none:\n  \"alw (\\<lambda>xs. output (shd (stl xs)) = [Some (EFSM.Str drink)] \\<longrightarrow> check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n            (make_full_observation drinks None r p t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (\\<lambda>xs.\n            output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n            check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n     (make_full_observation drinks None r p t)", "apply (rule alw_mono[of \"nxt (output_eq [])\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. alw (nxt (output_eq [])) (make_full_observation drinks None r p t)\n 2. \\<And>xs.\n       nxt (output_eq []) xs \\<Longrightarrow>\n       output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n       check_exp (Ge (V (Rg 2)) (L (Num 100))) xs", "apply (simp add: no_output_none_nxt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       nxt (output_eq []) xs \\<Longrightarrow>\n       output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n       check_exp (Ge (V (Rg 2)) (L (Num 100))) xs", "by simp"], ["", "lemma drink_costs_money_aux:\n  assumes \"\\<exists>p r t. j = make_full_observation drinks (Some 1) r p t\"\n  shows \"alw (\\<lambda>xs. output (shd (stl xs)) = [Some (EFSM.Str drink)] \\<longrightarrow> check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (\\<lambda>xs.\n            output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n            check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n     j", "using assms"], ["proof (prove)\nusing this:\n  \\<exists>p r t. j = make_full_observation drinks (Some 1) r p t\n\ngoal (1 subgoal):\n 1. alw (\\<lambda>xs.\n            output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n            check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n     j", "apply coinduct"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>p r t.\n          x = make_full_observation drinks (Some 1) r p t \\<Longrightarrow>\n       \\<exists>xs.\n          x = xs \\<and>\n          (output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n           check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) \\<and>\n          ((\\<exists>p r t.\n               stl xs = make_full_observation drinks (Some 1) r p t) \\<or>\n           alw (\\<lambda>xs.\n                   output_eq [Some (EFSM.Str drink)]\n                    (stl xs) \\<longrightarrow>\n                   check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n            (stl xs))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r t.\n       (fst (snd (ltl_step drinks (Some 1) r (shd t))) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks\n             (fst (ltl_step drinks (Some 1) r (shd t)))\n             (snd (snd (ltl_step drinks (Some 1) r (shd t))))\n             (fst (snd (ltl_step drinks (Some 1) r (shd t)))) (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (ltl_step drinks (Some 1) r (shd t)))\n           (snd (snd (ltl_step drinks (Some 1) r (shd t))))\n           (fst (snd (ltl_step drinks (Some 1) r (shd t)))) (stl t)))", "apply (case_tac \"shd t\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       (fst (snd (ltl_step drinks (Some 1) r (shd t))) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks\n             (fst (ltl_step drinks (Some 1) r (shd t)))\n             (snd (snd (ltl_step drinks (Some 1) r (shd t))))\n             (fst (snd (ltl_step drinks (Some 1) r (shd t)))) (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (ltl_step drinks (Some 1) r (shd t)))\n           (snd (snd (ltl_step drinks (Some 1) r (shd t))))\n           (fst (snd (ltl_step drinks (Some 1) r (shd t)))) (stl t)))", "apply (simp del: ltl_step.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       (fst (snd (ltl_step drinks (Some 1) r (a, b))) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks\n             (fst (ltl_step drinks (Some 1) r (a, b)))\n             (snd (snd (ltl_step drinks (Some 1) r (a, b))))\n             (fst (snd (ltl_step drinks (Some 1) r (a, b)))) (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (ltl_step drinks (Some 1) r (a, b)))\n           (snd (snd (ltl_step drinks (Some 1) r (a, b))))\n           (fst (snd (ltl_step drinks (Some 1) r (a, b)))) (stl t)))", "apply (rule P_ltl_step_1)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       (fst (snd (None, [], r)) = [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (None, [], r))\n             (snd (snd (None, [], r))) (fst (snd (None, [], r))) (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (None, [], r))\n           (snd (snd (None, [], r))) (fst (snd (None, [], r))) (stl t)))\n 2. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       a = STR ''coin'' \\<longrightarrow>\n       (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                  (2 $:= value_plus (r $ 2) (Some (b ! 0))))) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks\n             (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                   (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n             (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                 (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n           (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (stl t)))\n 3. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow>\n       (fst (snd (Some 1, [], r)) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 1, [], r))\n             (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n             (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 1, [], r))\n           (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r))) (stl t)))\n 4. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (fst (snd (Some 2, [r $ 1], r)) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 2, [r $ 1], r))\n             (snd (snd (Some 2, [r $ 1], r)))\n             (fst (snd (Some 2, [r $ 1], r))) (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n           (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n           (stl t)))", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       (\\<exists>p ra ta.\n           make_full_observation drinks None r [] (stl t) =\n           make_full_observation drinks (Some 1) ra p ta) \\<or>\n       alw (\\<lambda>xs.\n               output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n               \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n               trilean.true)\n        (make_full_observation drinks None r [] (stl t))\n 2. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       a = STR ''coin'' \\<longrightarrow>\n       (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                  (2 $:= value_plus (r $ 2) (Some (b ! 0))))) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks\n             (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                   (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n             (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                 (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n           (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (stl t)))\n 3. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow>\n       (fst (snd (Some 1, [], r)) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 1, [], r))\n             (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n             (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 1, [], r))\n           (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r))) (stl t)))\n 4. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (fst (snd (Some 2, [r $ 1], r)) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 2, [r $ 1], r))\n             (snd (snd (Some 2, [r $ 1], r)))\n             (fst (snd (Some 2, [r $ 1], r))) (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n           (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n           (stl t)))", "apply (rule disjI2)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       alw (\\<lambda>xs.\n               output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n               \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n               trilean.true)\n        (make_full_observation drinks None r [] (stl t))\n 2. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       a = STR ''coin'' \\<longrightarrow>\n       (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                  (2 $:= value_plus (r $ 2) (Some (b ! 0))))) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks\n             (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                   (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n             (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                 (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n           (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (stl t)))\n 3. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow>\n       (fst (snd (Some 1, [], r)) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 1, [], r))\n             (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n             (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 1, [], r))\n           (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r))) (stl t)))\n 4. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (fst (snd (Some 2, [r $ 1], r)) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 2, [r $ 1], r))\n             (snd (snd (Some 2, [r $ 1], r)))\n             (fst (snd (Some 2, [r $ 1], r))) (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n           (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n           (stl t)))", "apply (rule alw_mono[of \"nxt (output_eq [])\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       alw (nxt (output_eq []))\n        (make_full_observation drinks None r [] (stl t))\n 2. \\<And>r t a b xs.\n       \\<lbrakk>shd t = (a, b); nxt (output_eq []) xs\\<rbrakk>\n       \\<Longrightarrow> output_eq [Some (EFSM.Str drink)]\n                          (stl xs) \\<longrightarrow>\n                         \\<not>? value_gt (Some (Num 100))\n                                  (datastate (shd xs) $ 2) =\n                         trilean.true\n 3. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       a = STR ''coin'' \\<longrightarrow>\n       (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                  (2 $:= value_plus (r $ 2) (Some (b ! 0))))) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks\n             (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                   (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n             (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                 (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n           (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (stl t)))\n 4. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow>\n       (fst (snd (Some 1, [], r)) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 1, [], r))\n             (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n             (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 1, [], r))\n           (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r))) (stl t)))\n 5. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (fst (snd (Some 2, [r $ 1], r)) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 2, [r $ 1], r))\n             (snd (snd (Some 2, [r $ 1], r)))\n             (fst (snd (Some 2, [r $ 1], r))) (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n           (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n           (stl t)))", "apply (simp add: no_output_none_nxt)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>r t a b xs.\n       \\<lbrakk>shd t = (a, b); nxt (output_eq []) xs\\<rbrakk>\n       \\<Longrightarrow> output_eq [Some (EFSM.Str drink)]\n                          (stl xs) \\<longrightarrow>\n                         \\<not>? value_gt (Some (Num 100))\n                                  (datastate (shd xs) $ 2) =\n                         trilean.true\n 2. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       a = STR ''coin'' \\<longrightarrow>\n       (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                  (2 $:= value_plus (r $ 2) (Some (b ! 0))))) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks\n             (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                   (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n             (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                 (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n           (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (stl t)))\n 3. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow>\n       (fst (snd (Some 1, [], r)) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 1, [], r))\n             (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n             (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 1, [], r))\n           (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r))) (stl t)))\n 4. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (fst (snd (Some 2, [r $ 1], r)) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 2, [r $ 1], r))\n             (snd (snd (Some 2, [r $ 1], r)))\n             (fst (snd (Some 2, [r $ 1], r))) (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n           (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n           (stl t)))", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       a = STR ''coin'' \\<longrightarrow>\n       (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                  (2 $:= value_plus (r $ 2) (Some (b ! 0))))) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks\n             (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                   (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n             (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                 (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n           (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (stl t)))\n 2. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow>\n       (fst (snd (Some 1, [], r)) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 1, [], r))\n             (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n             (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 1, [], r))\n           (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r))) (stl t)))\n 3. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (fst (snd (Some 2, [r $ 1], r)) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 2, [r $ 1], r))\n             (snd (snd (Some 2, [r $ 1], r)))\n             (fst (snd (Some 2, [r $ 1], r))) (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n           (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n           (stl t)))", "apply (simp add: Str_def value_plus_never_string)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       a = STR ''coin'' \\<longrightarrow>\n       (\\<exists>p ra ta.\n           make_full_observation drinks (Some 1)\n            (r(2 $:= value_plus (r $ 2) (Some (b ! 0))))\n            [value_plus (r $ 2) (Some (hd b))] (stl t) =\n           make_full_observation drinks (Some 1) ra p ta) \\<or>\n       alw (\\<lambda>xs.\n               output_eq [Some (value.Str (String.implode drink))]\n                (stl xs) \\<longrightarrow>\n               \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n               trilean.true)\n        (make_full_observation drinks (Some 1)\n          (r(2 $:= value_plus (r $ 2) (Some (b ! 0))))\n          [value_plus (r $ 2) (Some (hd b))] (stl t))\n 2. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow>\n       (fst (snd (Some 1, [], r)) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 1, [], r))\n             (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n             (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 1, [], r))\n           (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r))) (stl t)))\n 3. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (fst (snd (Some 2, [r $ 1], r)) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 2, [r $ 1], r))\n             (snd (snd (Some 2, [r $ 1], r)))\n             (fst (snd (Some 2, [r $ 1], r))) (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n           (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n           (stl t)))", "apply auto[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow>\n       (fst (snd (Some 1, [], r)) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 1, [], r))\n             (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n             (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 1, [], r))\n           (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r))) (stl t)))\n 2. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (fst (snd (Some 2, [r $ 1], r)) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 2, [r $ 1], r))\n             (snd (snd (Some 2, [r $ 1], r)))\n             (fst (snd (Some 2, [r $ 1], r))) (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n           (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n           (stl t)))", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (fst (snd (Some 2, [r $ 1], r)) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 2, [r $ 1], r))\n             (snd (snd (Some 2, [r $ 1], r)))\n             (fst (snd (Some 2, [r $ 1], r))) (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n           (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n           (stl t)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r t a b.\n       shd t = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (\\<exists>p ra ta.\n           make_full_observation drinks (Some 2) r [r $ 1] (stl t) =\n           make_full_observation drinks (Some 1) ra p ta) \\<or>\n       alw (\\<lambda>xs.\n               output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n               \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n               trilean.true)\n        (make_full_observation drinks (Some 2) r [r $ 1] (stl t))", "apply standard"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r t a b.\n       \\<lbrakk>shd t = (a, b);\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p ra ta.\n                             make_full_observation drinks (Some 2) r [r $ 1]\n                              (stl t) =\n                             make_full_observation drinks (Some 1) ra p\n                              ta) \\<or>\n                         alw (\\<lambda>xs.\n                                 output_eq [Some (EFSM.Str drink)]\n                                  (stl xs) \\<longrightarrow>\n                                 \\<not>? value_gt (Some (Num 100))\n    (datastate (shd xs) $ 2) =\n                                 trilean.true)\n                          (make_full_observation drinks (Some 2) r [r $ 1]\n                            (stl t))", "apply (rule disjI2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r t a b.\n       \\<lbrakk>shd t = (a, b);\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true\\<rbrakk>\n       \\<Longrightarrow> alw (\\<lambda>xs.\n                                 output_eq [Some (EFSM.Str drink)]\n                                  (stl xs) \\<longrightarrow>\n                                 \\<not>? value_gt (Some (Num 100))\n    (datastate (shd xs) $ 2) =\n                                 trilean.true)\n                          (make_full_observation drinks (Some 2) r [r $ 1]\n                            (stl t))", "apply (rule alw_mono[of \"nxt (output_eq [])\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r t a b.\n       \\<lbrakk>shd t = (a, b);\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true\\<rbrakk>\n       \\<Longrightarrow> alw (nxt (output_eq []))\n                          (make_full_observation drinks (Some 2) r [r $ 1]\n                            (stl t))\n 2. \\<And>r t a b xs.\n       \\<lbrakk>shd t = (a, b);\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true;\n        nxt (output_eq []) xs\\<rbrakk>\n       \\<Longrightarrow> output_eq [Some (EFSM.Str drink)]\n                          (stl xs) \\<longrightarrow>\n                         \\<not>? value_gt (Some (Num 100))\n                                  (datastate (shd xs) $ 2) =\n                         trilean.true", "apply (simp add: drinks_step_2_none no_output_none_if_empty nxt_alw)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r t a b xs.\n       \\<lbrakk>shd t = (a, b);\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true;\n        nxt (output_eq []) xs\\<rbrakk>\n       \\<Longrightarrow> output_eq [Some (EFSM.Str drink)]\n                          (stl xs) \\<longrightarrow>\n                         \\<not>? value_gt (Some (Num 100))\n                                  (datastate (shd xs) $ 2) =\n                         trilean.true", "by simp"], ["", "lemma LTL_drinks_cost_money:\n  \"alw (nxt (output_eq [Some (Str drink)]) impl (check_exp (Ge (V (Rg 2)) (L (Num 100))))) (watch drinks t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (\\<lambda>xs.\n            nxt (output_eq [Some (EFSM.Str drink)]) xs \\<longrightarrow>\n            check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n     (watch drinks t)", "proof(coinduction)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>xs.\n       watch drinks t = xs \\<and>\n       (nxt (output_eq [Some (EFSM.Str drink)]) xs \\<longrightarrow>\n        check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) \\<and>\n       (stl xs = watch drinks t \\<or>\n        alw (\\<lambda>xs.\n                nxt (output_eq [Some (EFSM.Str drink)]) xs \\<longrightarrow>\n                check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n         (stl xs))", "case alw"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<exists>xs.\n       watch drinks t = xs \\<and>\n       (nxt (output_eq [Some (EFSM.Str drink)]) xs \\<longrightarrow>\n        check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) \\<and>\n       (stl xs = watch drinks t \\<or>\n        alw (\\<lambda>xs.\n                nxt (output_eq [Some (EFSM.Str drink)]) xs \\<longrightarrow>\n                check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n         (stl xs))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs.\n       watch drinks t = xs \\<and>\n       (nxt (output_eq [Some (EFSM.Str drink)]) xs \\<longrightarrow>\n        check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) \\<and>\n       (stl xs = watch drinks t \\<or>\n        alw (\\<lambda>xs.\n                nxt (output_eq [Some (EFSM.Str drink)]) xs \\<longrightarrow>\n                check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n         (stl xs))", "apply (case_tac \"shd t\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       \\<exists>xs.\n          watch drinks t = xs \\<and>\n          (nxt (output_eq [Some (EFSM.Str drink)]) xs \\<longrightarrow>\n           check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) \\<and>\n          (stl xs = watch drinks t \\<or>\n           alw (\\<lambda>xs.\n                   nxt (output_eq [Some (EFSM.Str drink)])\n                    xs \\<longrightarrow>\n                   check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n            (stl xs))", "apply (simp del: ltl_step.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       (fst (snd (ltl_step drinks (Some 0) <> (a, b))) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) None = trilean.true) \\<and>\n       (make_full_observation drinks\n         (fst (ltl_step drinks (Some 0) <> (a, b)))\n         (snd (snd (ltl_step drinks (Some 0) <> (a, b))))\n         (fst (snd (ltl_step drinks (Some 0) <> (a, b)))) (stl t) =\n        watch drinks t \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (ltl_step drinks (Some 0) <> (a, b)))\n           (snd (snd (ltl_step drinks (Some 0) <> (a, b))))\n           (fst (snd (ltl_step drinks (Some 0) <> (a, b)))) (stl t)))", "apply (rule P_ltl_step_0)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       (fst (snd (None, [], <>)) = [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) None = trilean.true) \\<and>\n       (make_full_observation drinks (fst (None, [], <>))\n         (snd (snd (None, [], <>))) (fst (snd (None, [], <>))) (stl t) =\n        watch drinks t \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (None, [], <>))\n           (snd (snd (None, [], <>))) (fst (snd (None, [], <>))) (stl t)))\n 2. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       a = STR ''select'' \\<longrightarrow>\n       (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) None = trilean.true) \\<and>\n       (make_full_observation drinks\n         (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n         (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (stl t) =\n        watch drinks t \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n           (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (stl t)))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       make_full_observation drinks None <> [] (stl t) =\n       watch drinks t \\<or>\n       alw (\\<lambda>xs.\n               output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n               \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n               trilean.true)\n        (make_full_observation drinks None <> [] (stl t))\n 2. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       a = STR ''select'' \\<longrightarrow>\n       (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) None = trilean.true) \\<and>\n       (make_full_observation drinks\n         (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n         (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (stl t) =\n        watch drinks t \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n           (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (stl t)))", "apply (rule disjI2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       alw (\\<lambda>xs.\n               output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n               \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n               trilean.true)\n        (make_full_observation drinks None <> [] (stl t))\n 2. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       a = STR ''select'' \\<longrightarrow>\n       (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) None = trilean.true) \\<and>\n       (make_full_observation drinks\n         (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n         (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (stl t) =\n        watch drinks t \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n           (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (stl t)))", "apply (rule alw_mono[of \"nxt (output_eq [])\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       alw (nxt (output_eq []))\n        (make_full_observation drinks None <> [] (stl t))\n 2. \\<And>a b xs.\n       \\<lbrakk>shd t = (a, b); nxt (output_eq []) xs\\<rbrakk>\n       \\<Longrightarrow> output_eq [Some (EFSM.Str drink)]\n                          (stl xs) \\<longrightarrow>\n                         \\<not>? value_gt (Some (Num 100))\n                                  (datastate (shd xs) $ 2) =\n                         trilean.true\n 3. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       a = STR ''select'' \\<longrightarrow>\n       (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) None = trilean.true) \\<and>\n       (make_full_observation drinks\n         (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n         (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (stl t) =\n        watch drinks t \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n           (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (stl t)))", "apply (simp add: no_output_none_nxt)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b xs.\n       \\<lbrakk>shd t = (a, b); nxt (output_eq []) xs\\<rbrakk>\n       \\<Longrightarrow> output_eq [Some (EFSM.Str drink)]\n                          (stl xs) \\<longrightarrow>\n                         \\<not>? value_gt (Some (Num 100))\n                                  (datastate (shd xs) $ 2) =\n                         trilean.true\n 2. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       a = STR ''select'' \\<longrightarrow>\n       (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) None = trilean.true) \\<and>\n       (make_full_observation drinks\n         (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n         (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (stl t) =\n        watch drinks t \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n           (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (stl t)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       a = STR ''select'' \\<longrightarrow>\n       (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)) =\n        [Some (EFSM.Str drink)] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) None = trilean.true) \\<and>\n       (make_full_observation drinks\n         (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n         (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (stl t) =\n        watch drinks t \\<or>\n        alw (\\<lambda>xs.\n                output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n           (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (stl t)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       a = STR ''select'' \\<longrightarrow>\n       make_full_observation drinks (Some 1) <1 $:= Some (hd b),\n        2 $:= Some (Num 0)> [] (stl t) =\n       watch drinks t \\<or>\n       alw (\\<lambda>xs.\n               output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n               \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n               trilean.true)\n        (make_full_observation drinks (Some 1) <1 $:= Some (hd b),\n          2 $:= Some (Num 0)> [] (stl t))", "using drink_costs_money_aux"], ["proof (prove)\nusing this:\n  \\<exists>p r t.\n     ?j = make_full_observation drinks (Some 1) r p t \\<Longrightarrow>\n  alw (\\<lambda>xs.\n          output_eq [Some (EFSM.Str ?drink)] (stl xs) \\<longrightarrow>\n          check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n   ?j\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       a = STR ''select'' \\<longrightarrow>\n       make_full_observation drinks (Some 1) <1 $:= Some (hd b),\n        2 $:= Some (Num 0)> [] (stl t) =\n       watch drinks t \\<or>\n       alw (\\<lambda>xs.\n               output_eq [Some (EFSM.Str drink)] (stl xs) \\<longrightarrow>\n               \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n               trilean.true)\n        (make_full_observation drinks (Some 1) <1 $:= Some (hd b),\n          2 $:= Some (Num 0)> [] (stl t))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>shd t = (a, b);\n        \\<And>j drink.\n           \\<exists>p r t.\n              j =\n              make_full_observation drinks (Some 1) r p t \\<Longrightarrow>\n           alw (\\<lambda>xs.\n                   output_eq [Some (EFSM.Str drink)]\n                    (stl xs) \\<longrightarrow>\n                   \\<not>? value_gt (Some (Num 100))\n                            (datastate (shd xs) $ 2) =\n                   trilean.true)\n            j\\<rbrakk>\n       \\<Longrightarrow> a = STR ''select'' \\<longrightarrow>\n                         make_full_observation drinks (Some 1)\n                          <1 $:= Some (hd b), 2 $:= Some (Num 0)> []\n                          (stl t) =\n                         watch drinks t \\<or>\n                         alw (\\<lambda>xs.\n                                 output_eq [Some (EFSM.Str drink)]\n                                  (stl xs) \\<longrightarrow>\n                                 \\<not>? value_gt (Some (Num 100))\n    (datastate (shd xs) $ 2) =\n                                 trilean.true)\n                          (make_full_observation drinks (Some 1)\n                            <1 $:= Some (hd b), 2 $:= Some (Num 0)> []\n                            (stl t))", "by blast"], ["proof (state)\nthis:\n  \\<exists>xs.\n     watch drinks t = xs \\<and>\n     (nxt (output_eq [Some (EFSM.Str drink)]) xs \\<longrightarrow>\n      check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) \\<and>\n     (stl xs = watch drinks t \\<or>\n      alw (\\<lambda>xs.\n              nxt (output_eq [Some (EFSM.Str drink)]) xs \\<longrightarrow>\n              check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n       (stl xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma steps_1_invalid:\n      \"\\<nexists>i. (a, b) = (STR ''coin'', [i]) \\<Longrightarrow>\n       \\<nexists>i. (a, b) = (STR ''vend'', []) \\<Longrightarrow>\n       possible_steps drinks 1 r a b = {||}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>i. (a, b) = (STR ''coin'', [i]);\n     \\<nexists>i. (a, b) = (STR ''vend'', [])\\<rbrakk>\n    \\<Longrightarrow> possible_steps drinks 1 r a b = {||}", "apply (simp add: possible_steps_empty drinks_def transitions can_take_transition_def can_take_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = STR ''coin'' \\<longrightarrow>\n             (\\<forall>i. b \\<noteq> [i]);\n     a = STR ''vend'' \\<longrightarrow> b \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> (length b = 1 \\<longrightarrow>\n                       STR ''coin'' \\<noteq> a) \\<and>\n                      (b = [] \\<longrightarrow>\n                       STR ''vend'' = a \\<longrightarrow>\n                       value_gt (Some (Num 100)) (r $ 2) \\<noteq>\n                       trilean.true) \\<and>\n                      (b = [] \\<longrightarrow>\n                       STR ''vend'' = a \\<longrightarrow>\n                       \\<not>? value_gt (Some (Num 100)) (r $ 2) \\<noteq>\n                       trilean.true)", "by (induct b, auto)"], ["", "lemma output_vend_aux:\n  assumes \"\\<exists>p r t. j = make_full_observation drinks (Some 1) r p t\"\n  shows \"alw (\\<lambda>xs. label_eq ''vend'' xs \\<and> output (shd (stl xs)) = [Some d] \\<longrightarrow> check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (\\<lambda>xs.\n            label_eq ''vend'' xs \\<and>\n            output_eq [Some d] (stl xs) \\<longrightarrow>\n            check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n     j", "using assms"], ["proof (prove)\nusing this:\n  \\<exists>p r t. j = make_full_observation drinks (Some 1) r p t\n\ngoal (1 subgoal):\n 1. alw (\\<lambda>xs.\n            label_eq ''vend'' xs \\<and>\n            output_eq [Some d] (stl xs) \\<longrightarrow>\n            check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n     j", "apply coinduct"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>p r t.\n          x = make_full_observation drinks (Some 1) r p t \\<Longrightarrow>\n       \\<exists>xs.\n          x = xs \\<and>\n          (label_eq ''vend'' xs \\<and>\n           output_eq [Some d] (stl xs) \\<longrightarrow>\n           check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) \\<and>\n          ((\\<exists>p r t.\n               stl xs = make_full_observation drinks (Some 1) r p t) \\<or>\n           alw (\\<lambda>xs.\n                   label_eq ''vend'' xs \\<and>\n                   output_eq [Some d] (stl xs) \\<longrightarrow>\n                   check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n            (stl xs))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r t.\n       (fst (shd t) = String.implode ''vend'' \\<and>\n        fst (snd (ltl_step drinks (Some 1) r (shd t))) =\n        [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks\n             (fst (ltl_step drinks (Some 1) r (shd t)))\n             (snd (snd (ltl_step drinks (Some 1) r (shd t))))\n             (fst (snd (ltl_step drinks (Some 1) r (shd t)))) (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                label_eq ''vend'' xs \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (ltl_step drinks (Some 1) r (shd t)))\n           (snd (snd (ltl_step drinks (Some 1) r (shd t))))\n           (fst (snd (ltl_step drinks (Some 1) r (shd t)))) (stl t)))", "subgoal for r t"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (shd t) = String.implode ''vend'' \\<and>\n     fst (snd (ltl_step drinks (Some 1) r (shd t))) =\n     [Some d] \\<longrightarrow>\n     \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n    ((\\<exists>p ra ta.\n         make_full_observation drinks\n          (fst (ltl_step drinks (Some 1) r (shd t)))\n          (snd (snd (ltl_step drinks (Some 1) r (shd t))))\n          (fst (snd (ltl_step drinks (Some 1) r (shd t)))) (stl t) =\n         make_full_observation drinks (Some 1) ra p ta) \\<or>\n     alw (\\<lambda>xs.\n             label_eq ''vend'' xs \\<and>\n             output_eq [Some d] (stl xs) \\<longrightarrow>\n             \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n             trilean.true)\n      (make_full_observation drinks\n        (fst (ltl_step drinks (Some 1) r (shd t)))\n        (snd (snd (ltl_step drinks (Some 1) r (shd t))))\n        (fst (snd (ltl_step drinks (Some 1) r (shd t)))) (stl t)))", "apply (case_tac \"shd t\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       (fst (shd t) = String.implode ''vend'' \\<and>\n        fst (snd (ltl_step drinks (Some 1) r (shd t))) =\n        [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks\n             (fst (ltl_step drinks (Some 1) r (shd t)))\n             (snd (snd (ltl_step drinks (Some 1) r (shd t))))\n             (fst (snd (ltl_step drinks (Some 1) r (shd t)))) (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                label_eq ''vend'' xs \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (ltl_step drinks (Some 1) r (shd t)))\n           (snd (snd (ltl_step drinks (Some 1) r (shd t))))\n           (fst (snd (ltl_step drinks (Some 1) r (shd t)))) (stl t)))", "apply (simp add: implode_vend del: ltl_step.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (ltl_step drinks (Some 1) r (a, b))) =\n        [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks\n             (fst (ltl_step drinks (Some 1) r (a, b)))\n             (snd (snd (ltl_step drinks (Some 1) r (a, b))))\n             (fst (snd (ltl_step drinks (Some 1) r (a, b)))) (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (ltl_step drinks (Some 1) r (a, b)))\n           (snd (snd (ltl_step drinks (Some 1) r (a, b))))\n           (fst (snd (ltl_step drinks (Some 1) r (a, b)))) (stl t)))", "apply (rule P_ltl_step_1)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (None, [], r)) = [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (None, [], r))\n             (snd (snd (None, [], r))) (fst (snd (None, [], r))) (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (None, [], r))\n           (snd (snd (None, [], r))) (fst (snd (None, [], r))) (stl t)))\n 2. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       a = STR ''coin'' \\<longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                  (2 $:= value_plus (r $ 2) (Some (b ! 0))))) =\n        [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks\n             (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                   (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n             (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                 (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n           (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (stl t)))\n 3. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (Some 1, [], r)) = [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 1, [], r))\n             (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n             (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 1, [], r))\n           (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r))) (stl t)))\n 4. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (Some 2, [r $ 1], r)) = [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 2, [r $ 1], r))\n             (snd (snd (Some 2, [r $ 1], r)))\n             (fst (snd (Some 2, [r $ 1], r))) (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n           (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n           (stl t)))", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       (\\<exists>p ra ta.\n           make_full_observation drinks None r [] (stl t) =\n           make_full_observation drinks (Some 1) ra p ta) \\<or>\n       alw (\\<lambda>xs.\n               label (shd xs) = STR ''vend'' \\<and>\n               output_eq [Some d] (stl xs) \\<longrightarrow>\n               \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n               trilean.true)\n        (make_full_observation drinks None r [] (stl t))\n 2. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       a = STR ''coin'' \\<longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                  (2 $:= value_plus (r $ 2) (Some (b ! 0))))) =\n        [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks\n             (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                   (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n             (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                 (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n           (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (stl t)))\n 3. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (Some 1, [], r)) = [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 1, [], r))\n             (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n             (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 1, [], r))\n           (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r))) (stl t)))\n 4. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (Some 2, [r $ 1], r)) = [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 2, [r $ 1], r))\n             (snd (snd (Some 2, [r $ 1], r)))\n             (fst (snd (Some 2, [r $ 1], r))) (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n           (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n           (stl t)))", "apply (rule disjI2)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       alw (\\<lambda>xs.\n               label (shd xs) = STR ''vend'' \\<and>\n               output_eq [Some d] (stl xs) \\<longrightarrow>\n               \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n               trilean.true)\n        (make_full_observation drinks None r [] (stl t))\n 2. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       a = STR ''coin'' \\<longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                  (2 $:= value_plus (r $ 2) (Some (b ! 0))))) =\n        [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks\n             (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                   (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n             (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                 (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n           (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (stl t)))\n 3. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (Some 1, [], r)) = [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 1, [], r))\n             (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n             (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 1, [], r))\n           (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r))) (stl t)))\n 4. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (Some 2, [r $ 1], r)) = [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 2, [r $ 1], r))\n             (snd (snd (Some 2, [r $ 1], r)))\n             (fst (snd (Some 2, [r $ 1], r))) (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n           (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n           (stl t)))", "apply (rule alw_mono[of \"nxt (output_eq [])\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       alw (nxt (output_eq []))\n        (make_full_observation drinks None r [] (stl t))\n 2. \\<And>a b xs.\n       \\<lbrakk>shd t = (a, b); nxt (output_eq []) xs\\<rbrakk>\n       \\<Longrightarrow> label (shd xs) = STR ''vend'' \\<and>\n                         output_eq [Some d] (stl xs) \\<longrightarrow>\n                         \\<not>? value_gt (Some (Num 100))\n                                  (datastate (shd xs) $ 2) =\n                         trilean.true\n 3. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       a = STR ''coin'' \\<longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                  (2 $:= value_plus (r $ 2) (Some (b ! 0))))) =\n        [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks\n             (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                   (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n             (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                 (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n           (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (stl t)))\n 4. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (Some 1, [], r)) = [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 1, [], r))\n             (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n             (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 1, [], r))\n           (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r))) (stl t)))\n 5. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (Some 2, [r $ 1], r)) = [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 2, [r $ 1], r))\n             (snd (snd (Some 2, [r $ 1], r)))\n             (fst (snd (Some 2, [r $ 1], r))) (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n           (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n           (stl t)))", "apply (simp add: no_output_none_nxt)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b xs.\n       \\<lbrakk>shd t = (a, b); nxt (output_eq []) xs\\<rbrakk>\n       \\<Longrightarrow> label (shd xs) = STR ''vend'' \\<and>\n                         output_eq [Some d] (stl xs) \\<longrightarrow>\n                         \\<not>? value_gt (Some (Num 100))\n                                  (datastate (shd xs) $ 2) =\n                         trilean.true\n 2. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       a = STR ''coin'' \\<longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                  (2 $:= value_plus (r $ 2) (Some (b ! 0))))) =\n        [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks\n             (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                   (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n             (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                 (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n           (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (stl t)))\n 3. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (Some 1, [], r)) = [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 1, [], r))\n             (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n             (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 1, [], r))\n           (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r))) (stl t)))\n 4. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (Some 2, [r $ 1], r)) = [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 2, [r $ 1], r))\n             (snd (snd (Some 2, [r $ 1], r)))\n             (fst (snd (Some 2, [r $ 1], r))) (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n           (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n           (stl t)))", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       a = STR ''coin'' \\<longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                  (2 $:= value_plus (r $ 2) (Some (b ! 0))))) =\n        [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks\n             (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                   (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n             (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                        (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n             (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                 (2 $:= value_plus (r $ 2) (Some (b ! 0)))))\n           (snd (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (fst (snd (Some 1, [value_plus (r $ 2) (Some (hd b))], r\n                      (2 $:= value_plus (r $ 2) (Some (b ! 0))))))\n           (stl t)))\n 2. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (Some 1, [], r)) = [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 1, [], r))\n             (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n             (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 1, [], r))\n           (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r))) (stl t)))\n 3. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (Some 2, [r $ 1], r)) = [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 2, [r $ 1], r))\n             (snd (snd (Some 2, [r $ 1], r)))\n             (fst (snd (Some 2, [r $ 1], r))) (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n           (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n           (stl t)))", "apply auto[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       value_gt (Some (Num 100)) (r $ 2) = trilean.true \\<longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (Some 1, [], r)) = [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 1, [], r))\n             (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r)))\n             (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 1, [], r))\n           (snd (snd (Some 1, [], r))) (fst (snd (Some 1, [], r))) (stl t)))\n 2. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (Some 2, [r $ 1], r)) = [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 2, [r $ 1], r))\n             (snd (snd (Some 2, [r $ 1], r)))\n             (fst (snd (Some 2, [r $ 1], r))) (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n           (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n           (stl t)))", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (Some 2, [r $ 1], r)) = [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true) \\<and>\n       ((\\<exists>p ra ta.\n            make_full_observation drinks (fst (Some 2, [r $ 1], r))\n             (snd (snd (Some 2, [r $ 1], r)))\n             (fst (snd (Some 2, [r $ 1], r))) (stl t) =\n            make_full_observation drinks (Some 1) ra p ta) \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (Some 2, [r $ 1], r))\n           (snd (snd (Some 2, [r $ 1], r))) (fst (snd (Some 2, [r $ 1], r)))\n           (stl t)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       \\<not>? value_gt (Some (Num 100)) (r $ 2) =\n       trilean.true \\<longrightarrow>\n       (\\<exists>p ra ta.\n           make_full_observation drinks (Some 2) r [r $ 1] (stl t) =\n           make_full_observation drinks (Some 1) ra p ta) \\<or>\n       alw (\\<lambda>xs.\n               label (shd xs) = STR ''vend'' \\<and>\n               output_eq [Some d] (stl xs) \\<longrightarrow>\n               \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n               trilean.true)\n        (make_full_observation drinks (Some 2) r [r $ 1] (stl t))", "apply standard"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>shd t = (a, b);\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p ra ta.\n                             make_full_observation drinks (Some 2) r [r $ 1]\n                              (stl t) =\n                             make_full_observation drinks (Some 1) ra p\n                              ta) \\<or>\n                         alw (\\<lambda>xs.\n                                 label (shd xs) = STR ''vend'' \\<and>\n                                 output_eq [Some d]\n                                  (stl xs) \\<longrightarrow>\n                                 \\<not>? value_gt (Some (Num 100))\n    (datastate (shd xs) $ 2) =\n                                 trilean.true)\n                          (make_full_observation drinks (Some 2) r [r $ 1]\n                            (stl t))", "apply (rule disjI2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>shd t = (a, b);\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true\\<rbrakk>\n       \\<Longrightarrow> alw (\\<lambda>xs.\n                                 label (shd xs) = STR ''vend'' \\<and>\n                                 output_eq [Some d]\n                                  (stl xs) \\<longrightarrow>\n                                 \\<not>? value_gt (Some (Num 100))\n    (datastate (shd xs) $ 2) =\n                                 trilean.true)\n                          (make_full_observation drinks (Some 2) r [r $ 1]\n                            (stl t))", "apply (rule alw_mono[of \"nxt (output_eq [])\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>shd t = (a, b);\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true\\<rbrakk>\n       \\<Longrightarrow> alw (nxt (output_eq []))\n                          (make_full_observation drinks (Some 2) r [r $ 1]\n                            (stl t))\n 2. \\<And>a b xs.\n       \\<lbrakk>shd t = (a, b);\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true;\n        nxt (output_eq []) xs\\<rbrakk>\n       \\<Longrightarrow> label (shd xs) = STR ''vend'' \\<and>\n                         output_eq [Some d] (stl xs) \\<longrightarrow>\n                         \\<not>? value_gt (Some (Num 100))\n                                  (datastate (shd xs) $ 2) =\n                         trilean.true", "apply (simp add: drinks_step_2_none no_output_none_if_empty nxt_alw)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b xs.\n       \\<lbrakk>shd t = (a, b);\n        \\<not>? value_gt (Some (Num 100)) (r $ 2) = trilean.true;\n        nxt (output_eq []) xs\\<rbrakk>\n       \\<Longrightarrow> label (shd xs) = STR ''vend'' \\<and>\n                         output_eq [Some d] (stl xs) \\<longrightarrow>\n                         \\<not>? value_gt (Some (Num 100))\n                                  (datastate (shd xs) $ 2) =\n                         trilean.true", "by simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text_raw\\<open>\\snip{outputVend}{1}{2}{%\\<close>"], ["", "lemma LTL_output_vend:\n  \"alw (((label_eq ''vend'') aand (nxt (output_eq [Some d]))) impl\n         (check_exp (Ge (V (Rg 2)) (L (Num 100))))) (watch drinks t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (\\<lambda>xs.\n            label_eq ''vend'' xs \\<and>\n            nxt (output_eq [Some d]) xs \\<longrightarrow>\n            check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n     (watch drinks t)", "text_raw\\<open>}%endsnip\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (\\<lambda>xs.\n            label_eq ''vend'' xs \\<and>\n            nxt (output_eq [Some d]) xs \\<longrightarrow>\n            check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n     (watch drinks t)", "proof(coinduction)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>xs.\n       watch drinks t = xs \\<and>\n       (label_eq ''vend'' xs \\<and>\n        nxt (output_eq [Some d]) xs \\<longrightarrow>\n        check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) \\<and>\n       (stl xs = watch drinks t \\<or>\n        alw (\\<lambda>xs.\n                label_eq ''vend'' xs \\<and>\n                nxt (output_eq [Some d]) xs \\<longrightarrow>\n                check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n         (stl xs))", "case alw"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<exists>xs.\n       watch drinks t = xs \\<and>\n       (label_eq ''vend'' xs \\<and>\n        nxt (output_eq [Some d]) xs \\<longrightarrow>\n        check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) \\<and>\n       (stl xs = watch drinks t \\<or>\n        alw (\\<lambda>xs.\n                label_eq ''vend'' xs \\<and>\n                nxt (output_eq [Some d]) xs \\<longrightarrow>\n                check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n         (stl xs))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs.\n       watch drinks t = xs \\<and>\n       (label_eq ''vend'' xs \\<and>\n        nxt (output_eq [Some d]) xs \\<longrightarrow>\n        check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) \\<and>\n       (stl xs = watch drinks t \\<or>\n        alw (\\<lambda>xs.\n                label_eq ''vend'' xs \\<and>\n                nxt (output_eq [Some d]) xs \\<longrightarrow>\n                check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n         (stl xs))", "apply (simp add: implode_vend)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (shd t) = STR ''vend'' \\<and>\n     fst (snd (ltl_step drinks (Some 0) <> (shd t))) =\n     [Some d] \\<longrightarrow>\n     \\<not>? value_gt (Some (Num 100)) None = trilean.true) \\<and>\n    (make_full_observation drinks\n      (fst (ltl_step drinks (Some 0) <> (shd t)))\n      (snd (snd (ltl_step drinks (Some 0) <> (shd t))))\n      (fst (snd (ltl_step drinks (Some 0) <> (shd t)))) (stl t) =\n     watch drinks t \\<or>\n     alw (\\<lambda>xs.\n             label (shd xs) = STR ''vend'' \\<and>\n             output_eq [Some d] (stl xs) \\<longrightarrow>\n             \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n             trilean.true)\n      (make_full_observation drinks\n        (fst (ltl_step drinks (Some 0) <> (shd t)))\n        (snd (snd (ltl_step drinks (Some 0) <> (shd t))))\n        (fst (snd (ltl_step drinks (Some 0) <> (shd t)))) (stl t)))", "apply (case_tac \"shd t\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       (fst (shd t) = STR ''vend'' \\<and>\n        fst (snd (ltl_step drinks (Some 0) <> (shd t))) =\n        [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) None = trilean.true) \\<and>\n       (make_full_observation drinks\n         (fst (ltl_step drinks (Some 0) <> (shd t)))\n         (snd (snd (ltl_step drinks (Some 0) <> (shd t))))\n         (fst (snd (ltl_step drinks (Some 0) <> (shd t)))) (stl t) =\n        watch drinks t \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (ltl_step drinks (Some 0) <> (shd t)))\n           (snd (snd (ltl_step drinks (Some 0) <> (shd t))))\n           (fst (snd (ltl_step drinks (Some 0) <> (shd t)))) (stl t)))", "apply (simp del: ltl_step.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (ltl_step drinks (Some 0) <> (a, b))) =\n        [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) None = trilean.true) \\<and>\n       (make_full_observation drinks\n         (fst (ltl_step drinks (Some 0) <> (a, b)))\n         (snd (snd (ltl_step drinks (Some 0) <> (a, b))))\n         (fst (snd (ltl_step drinks (Some 0) <> (a, b)))) (stl t) =\n        watch drinks t \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (ltl_step drinks (Some 0) <> (a, b)))\n           (snd (snd (ltl_step drinks (Some 0) <> (a, b))))\n           (fst (snd (ltl_step drinks (Some 0) <> (a, b)))) (stl t)))", "apply (rule P_ltl_step_0)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (None, [], <>)) = [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) None = trilean.true) \\<and>\n       (make_full_observation drinks (fst (None, [], <>))\n         (snd (snd (None, [], <>))) (fst (snd (None, [], <>))) (stl t) =\n        watch drinks t \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks (fst (None, [], <>))\n           (snd (snd (None, [], <>))) (fst (snd (None, [], <>))) (stl t)))\n 2. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       a = STR ''select'' \\<longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)) =\n        [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) None = trilean.true) \\<and>\n       (make_full_observation drinks\n         (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n         (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (stl t) =\n        watch drinks t \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n           (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (stl t)))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       make_full_observation drinks None <> [] (stl t) =\n       watch drinks t \\<or>\n       alw (\\<lambda>xs.\n               label (shd xs) = STR ''vend'' \\<and>\n               output_eq [Some d] (stl xs) \\<longrightarrow>\n               \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n               trilean.true)\n        (make_full_observation drinks None <> [] (stl t))\n 2. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       a = STR ''select'' \\<longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)) =\n        [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) None = trilean.true) \\<and>\n       (make_full_observation drinks\n         (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n         (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (stl t) =\n        watch drinks t \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n           (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (stl t)))", "apply (rule disjI2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       alw (\\<lambda>xs.\n               label (shd xs) = STR ''vend'' \\<and>\n               output_eq [Some d] (stl xs) \\<longrightarrow>\n               \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n               trilean.true)\n        (make_full_observation drinks None <> [] (stl t))\n 2. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       a = STR ''select'' \\<longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)) =\n        [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) None = trilean.true) \\<and>\n       (make_full_observation drinks\n         (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n         (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (stl t) =\n        watch drinks t \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n           (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (stl t)))", "apply (rule alw_mono[of \"nxt (output_eq [])\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       alw (nxt (output_eq []))\n        (make_full_observation drinks None <> [] (stl t))\n 2. \\<And>a b xs.\n       \\<lbrakk>shd t = (a, b); nxt (output_eq []) xs\\<rbrakk>\n       \\<Longrightarrow> label (shd xs) = STR ''vend'' \\<and>\n                         output_eq [Some d] (stl xs) \\<longrightarrow>\n                         \\<not>? value_gt (Some (Num 100))\n                                  (datastate (shd xs) $ 2) =\n                         trilean.true\n 3. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       a = STR ''select'' \\<longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)) =\n        [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) None = trilean.true) \\<and>\n       (make_full_observation drinks\n         (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n         (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (stl t) =\n        watch drinks t \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n           (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (stl t)))", "apply (simp add: no_output_none_nxt)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b xs.\n       \\<lbrakk>shd t = (a, b); nxt (output_eq []) xs\\<rbrakk>\n       \\<Longrightarrow> label (shd xs) = STR ''vend'' \\<and>\n                         output_eq [Some d] (stl xs) \\<longrightarrow>\n                         \\<not>? value_gt (Some (Num 100))\n                                  (datastate (shd xs) $ 2) =\n                         trilean.true\n 2. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       a = STR ''select'' \\<longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)) =\n        [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) None = trilean.true) \\<and>\n       (make_full_observation drinks\n         (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n         (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (stl t) =\n        watch drinks t \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n           (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (stl t)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       a = STR ''select'' \\<longrightarrow>\n       (a = STR ''vend'' \\<and>\n        fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)) =\n        [Some d] \\<longrightarrow>\n        \\<not>? value_gt (Some (Num 100)) None = trilean.true) \\<and>\n       (make_full_observation drinks\n         (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n         (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n         (stl t) =\n        watch drinks t \\<or>\n        alw (\\<lambda>xs.\n                label (shd xs) = STR ''vend'' \\<and>\n                output_eq [Some d] (stl xs) \\<longrightarrow>\n                \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n                trilean.true)\n         (make_full_observation drinks\n           (fst (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>))\n           (snd (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (fst (snd (Some 1, [], <1 $:= Some (hd b), 2 $:= Some (Num 0)>)))\n           (stl t)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       shd t = (a, b) \\<Longrightarrow>\n       a = STR ''select'' \\<longrightarrow>\n       make_full_observation drinks (Some 1) <1 $:= Some (hd b),\n        2 $:= Some (Num 0)> [] (stl t) =\n       watch drinks t \\<or>\n       alw (\\<lambda>xs.\n               label (shd xs) = STR ''vend'' \\<and>\n               output_eq [Some d] (stl xs) \\<longrightarrow>\n               \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n               trilean.true)\n        (make_full_observation drinks (Some 1) <1 $:= Some (hd b),\n          2 $:= Some (Num 0)> [] (stl t))", "subgoal for a b"], ["proof (prove)\ngoal (1 subgoal):\n 1. shd t = (a, b) \\<Longrightarrow>\n    a = STR ''select'' \\<longrightarrow>\n    make_full_observation drinks (Some 1) <1 $:= Some (hd b),\n     2 $:= Some (Num 0)> [] (stl t) =\n    watch drinks t \\<or>\n    alw (\\<lambda>xs.\n            label (shd xs) = STR ''vend'' \\<and>\n            output_eq [Some d] (stl xs) \\<longrightarrow>\n            \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n            trilean.true)\n     (make_full_observation drinks (Some 1) <1 $:= Some (hd b),\n       2 $:= Some (Num 0)> [] (stl t))", "using output_vend_aux[of \"(make_full_observation drinks (Some 1)\n              <1 $:= Some (hd b), 2 $:= Some (Num 0)> [] (stl t))\" d]"], ["proof (prove)\nusing this:\n  \\<exists>p r ta.\n     make_full_observation drinks (Some 1) <1 $:= Some (hd b),\n      2 $:= Some (Num 0)> [] (stl t) =\n     make_full_observation drinks (Some 1) r p ta \\<Longrightarrow>\n  alw (\\<lambda>xs.\n          label_eq ''vend'' xs \\<and>\n          output_eq [Some d] (stl xs) \\<longrightarrow>\n          check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n   (make_full_observation drinks (Some 1) <1 $:= Some (hd b),\n     2 $:= Some (Num 0)> [] (stl t))\n\ngoal (1 subgoal):\n 1. shd t = (a, b) \\<Longrightarrow>\n    a = STR ''select'' \\<longrightarrow>\n    make_full_observation drinks (Some 1) <1 $:= Some (hd b),\n     2 $:= Some (Num 0)> [] (stl t) =\n    watch drinks t \\<or>\n    alw (\\<lambda>xs.\n            label (shd xs) = STR ''vend'' \\<and>\n            output_eq [Some d] (stl xs) \\<longrightarrow>\n            \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n            trilean.true)\n     (make_full_observation drinks (Some 1) <1 $:= Some (hd b),\n       2 $:= Some (Num 0)> [] (stl t))", "using implode_vend"], ["proof (prove)\nusing this:\n  \\<exists>p r ta.\n     make_full_observation drinks (Some 1) <1 $:= Some (hd b),\n      2 $:= Some (Num 0)> [] (stl t) =\n     make_full_observation drinks (Some 1) r p ta \\<Longrightarrow>\n  alw (\\<lambda>xs.\n          label_eq ''vend'' xs \\<and>\n          output_eq [Some d] (stl xs) \\<longrightarrow>\n          check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n   (make_full_observation drinks (Some 1) <1 $:= Some (hd b),\n     2 $:= Some (Num 0)> [] (stl t))\n  String.implode ''vend'' = STR ''vend''\n\ngoal (1 subgoal):\n 1. shd t = (a, b) \\<Longrightarrow>\n    a = STR ''select'' \\<longrightarrow>\n    make_full_observation drinks (Some 1) <1 $:= Some (hd b),\n     2 $:= Some (Num 0)> [] (stl t) =\n    watch drinks t \\<or>\n    alw (\\<lambda>xs.\n            label (shd xs) = STR ''vend'' \\<and>\n            output_eq [Some d] (stl xs) \\<longrightarrow>\n            \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n            trilean.true)\n     (make_full_observation drinks (Some 1) <1 $:= Some (hd b),\n       2 $:= Some (Num 0)> [] (stl t))", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>xs.\n     watch drinks t = xs \\<and>\n     (label_eq ''vend'' xs \\<and>\n      nxt (output_eq [Some d]) xs \\<longrightarrow>\n      check_exp (Ge (V (Rg 2)) (L (Num 100))) xs) \\<and>\n     (stl xs = watch drinks t \\<or>\n      alw (\\<lambda>xs.\n              label_eq ''vend'' xs \\<and>\n              nxt (output_eq [Some d]) xs \\<longrightarrow>\n              check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n       (stl xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "text_raw\\<open>\\snip{outputVendUnfolded}{1}{2}{%\\<close>"], ["", "lemma LTL_output_vend_unfolded:\n  \"alw (\\<lambda>xs. (label (shd xs) = STR ''vend'' \\<and>\n             nxt (\\<lambda>s. output (shd s) = [Some d]) xs) \\<longrightarrow>\n              \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) = trilean.true)\n     (watch drinks t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (\\<lambda>xs.\n            label (shd xs) = STR ''vend'' \\<and>\n            nxt (output_eq [Some d]) xs \\<longrightarrow>\n            \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n            trilean.true)\n     (watch drinks t)", "text_raw\\<open>}%endsnip\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (\\<lambda>xs.\n            label (shd xs) = STR ''vend'' \\<and>\n            nxt (output_eq [Some d]) xs \\<longrightarrow>\n            \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n            trilean.true)\n     (watch drinks t)", "apply (insert LTL_output_vend[of d t])"], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (\\<lambda>xs.\n            label_eq ''vend'' xs \\<and>\n            nxt (output_eq [Some d]) xs \\<longrightarrow>\n            check_exp (Ge (V (Rg 2)) (L (Num 100))) xs)\n     (watch drinks t) \\<Longrightarrow>\n    alw (\\<lambda>xs.\n            label (shd xs) = STR ''vend'' \\<and>\n            nxt (output_eq [Some d]) xs \\<longrightarrow>\n            \\<not>? value_gt (Some (Num 100)) (datastate (shd xs) $ 2) =\n            trilean.true)\n     (watch drinks t)", "by (simp add: implode_vend)"], ["", "end"]]}