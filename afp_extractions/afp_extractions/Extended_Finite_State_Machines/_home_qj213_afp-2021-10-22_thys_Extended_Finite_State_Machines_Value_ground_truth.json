{"file_name": "/home/qj213/afp-2021-10-22/thys/Extended_Finite_State_Machines/Value.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Extended_Finite_State_Machines", "problem_names": ["lemma maybe_arith_int_not_None:\n  \"maybe_arith_int f a b \\<noteq> None = (\\<exists>n n'. a = Some (Num n) \\<and> b = Some (Num n'))\"", "lemma maybe_arith_int_Some:\n  \"maybe_arith_int f a b = Some (Num x) = (\\<exists>n n'. a = Some (Num n) \\<and> b = Some (Num n') \\<and> f n n' = x)\"", "lemma maybe_arith_int_None:\n  \"(maybe_arith_int f a1 a2 = None) = (\\<nexists>n n'. a1 = Some (Num n) \\<and> a2 = Some (Num n'))\"", "lemma maybe_arith_int_Not_Num:\n  \"(\\<forall>n. maybe_arith_int f a1 a2 \\<noteq> Some (Num n)) = (maybe_arith_int f a1 a2 = None)\"", "lemma maybe_arith_int_never_string: \"maybe_arith_int f a b \\<noteq> Some (Str x)\"", "lemma value_plus_never_string: \"value_plus a b \\<noteq> Some (Str x)\"", "lemma value_plus_symmetry: \"value_plus x y = value_plus y x\"", "lemma value_minus_never_string: \"value_minus a b \\<noteq> Some (Str x)\"", "lemma value_times_never_string: \"value_times a b \\<noteq> Some (Str x)\"", "lemma MaybeBoolInt_not_num_1:\n  \"\\<forall>n. r \\<noteq> Some (Num n) \\<Longrightarrow> MaybeBoolInt f n r = invalid\"", "lemma value_eq_true: \"(value_eq a b = true) = (\\<exists>x y. a = Some x \\<and> b = Some y \\<and> x = y)\"", "lemma value_eq_false: \"(value_eq a b = false) = (\\<exists>x y. a = Some x \\<and> b = Some y \\<and> x \\<noteq> y)\"", "lemma value_gt_true_Some: \"value_gt a b = true \\<Longrightarrow> (\\<exists>x. a = Some x) \\<and> (\\<exists>y. b = Some y)\"", "lemma value_gt_true: \"(value_gt a b = true) = (\\<exists>x y. a = Some (Num x) \\<and> b = Some (Num y) \\<and> x > y)\"", "lemma value_gt_false_Some: \"value_gt a b = false \\<Longrightarrow> (\\<exists>x. a = Some x) \\<and> (\\<exists>y. b = Some y)\""], "translations": [["", "lemma maybe_arith_int_not_None:\n  \"maybe_arith_int f a b \\<noteq> None = (\\<exists>n n'. a = Some (Num n) \\<and> b = Some (Num n'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (maybe_arith_int f a b \\<noteq> None) =\n    (\\<exists>n n'. a = Some (Num n) \\<and> b = Some (Num n'))", "using maybe_arith_int.elims maybe_arith_int.simps(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>maybe_arith_int ?x ?xa ?xb = ?y;\n   \\<And>f x y.\n      \\<lbrakk>?x = f; ?xa = Some (Num x); ?xb = Some (Num y);\n       ?y = Some (Num (f x y))\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<And>uu_ uw_.\n      \\<lbrakk>?x = uu_; ?xa = None; ?xb = uw_; ?y = None\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<And>uu_ va uw_.\n      \\<lbrakk>?x = uu_; ?xa = Some (Str va); ?xb = uw_; ?y = None\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<And>uu_ uv_.\n      \\<lbrakk>?x = uu_; ?xa = uv_; ?xb = None; ?y = None\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<And>uu_ uv_ va.\n      \\<lbrakk>?x = uu_; ?xa = uv_; ?xb = Some (Str va); ?y = None\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n  maybe_arith_int ?f (Some (Num ?x)) (Some (Num ?y)) = Some (Num (?f ?x ?y))\n\ngoal (1 subgoal):\n 1. (maybe_arith_int f a b \\<noteq> None) =\n    (\\<exists>n n'. a = Some (Num n) \\<and> b = Some (Num n'))", "by blast"], ["", "lemma maybe_arith_int_Some:\n  \"maybe_arith_int f a b = Some (Num x) = (\\<exists>n n'. a = Some (Num n) \\<and> b = Some (Num n') \\<and> f n n' = x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (maybe_arith_int f a b = Some (Num x)) =\n    (\\<exists>n n'.\n        a = Some (Num n) \\<and> b = Some (Num n') \\<and> f n n' = x)", "using maybe_arith_int.elims maybe_arith_int.simps(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>maybe_arith_int ?x ?xa ?xb = ?y;\n   \\<And>f x y.\n      \\<lbrakk>?x = f; ?xa = Some (Num x); ?xb = Some (Num y);\n       ?y = Some (Num (f x y))\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<And>uu_ uw_.\n      \\<lbrakk>?x = uu_; ?xa = None; ?xb = uw_; ?y = None\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<And>uu_ va uw_.\n      \\<lbrakk>?x = uu_; ?xa = Some (Str va); ?xb = uw_; ?y = None\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<And>uu_ uv_.\n      \\<lbrakk>?x = uu_; ?xa = uv_; ?xb = None; ?y = None\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<And>uu_ uv_ va.\n      \\<lbrakk>?x = uu_; ?xa = uv_; ?xb = Some (Str va); ?y = None\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n  maybe_arith_int ?f (Some (Num ?x)) (Some (Num ?y)) = Some (Num (?f ?x ?y))\n\ngoal (1 subgoal):\n 1. (maybe_arith_int f a b = Some (Num x)) =\n    (\\<exists>n n'.\n        a = Some (Num n) \\<and> b = Some (Num n') \\<and> f n n' = x)", "by blast"], ["", "lemma maybe_arith_int_None:\n  \"(maybe_arith_int f a1 a2 = None) = (\\<nexists>n n'. a1 = Some (Num n) \\<and> a2 = Some (Num n'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (maybe_arith_int f a1 a2 = None) =\n    (\\<nexists>n n'. a1 = Some (Num n) \\<and> a2 = Some (Num n'))", "using maybe_arith_int_not_None"], ["proof (prove)\nusing this:\n  (maybe_arith_int ?f ?a ?b \\<noteq> None) =\n  (\\<exists>n n'. ?a = Some (Num n) \\<and> ?b = Some (Num n'))\n\ngoal (1 subgoal):\n 1. (maybe_arith_int f a1 a2 = None) =\n    (\\<nexists>n n'. a1 = Some (Num n) \\<and> a2 = Some (Num n'))", "by blast"], ["", "lemma maybe_arith_int_Not_Num:\n  \"(\\<forall>n. maybe_arith_int f a1 a2 \\<noteq> Some (Num n)) = (maybe_arith_int f a1 a2 = None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>n. maybe_arith_int f a1 a2 \\<noteq> Some (Num n)) =\n    (maybe_arith_int f a1 a2 = None)", "by (metis maybe_arith_int.elims option.distinct(1))"], ["", "lemma maybe_arith_int_never_string: \"maybe_arith_int f a b \\<noteq> Some (Str x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maybe_arith_int f a b \\<noteq> Some (Str x)", "using maybe_arith_int.elims"], ["proof (prove)\nusing this:\n  \\<lbrakk>maybe_arith_int ?x ?xa ?xb = ?y;\n   \\<And>f x y.\n      \\<lbrakk>?x = f; ?xa = Some (Num x); ?xb = Some (Num y);\n       ?y = Some (Num (f x y))\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<And>uu_ uw_.\n      \\<lbrakk>?x = uu_; ?xa = None; ?xb = uw_; ?y = None\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<And>uu_ va uw_.\n      \\<lbrakk>?x = uu_; ?xa = Some (Str va); ?xb = uw_; ?y = None\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<And>uu_ uv_.\n      \\<lbrakk>?x = uu_; ?xa = uv_; ?xb = None; ?y = None\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<And>uu_ uv_ va.\n      \\<lbrakk>?x = uu_; ?xa = uv_; ?xb = Some (Str va); ?y = None\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. maybe_arith_int f a b \\<noteq> Some (Str x)", "by blast"], ["", "definition \"value_plus = maybe_arith_int (+)\""], ["", "lemma value_plus_never_string: \"value_plus a b \\<noteq> Some (Str x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. value_plus a b \\<noteq> Some (Str x)", "by (simp add: value_plus_def maybe_arith_int_never_string)"], ["", "lemma value_plus_symmetry: \"value_plus x y = value_plus y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. value_plus x y = value_plus y x", "apply (induct x y rule: maybe_arith_int.induct)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>f x y.\n       value_plus (Some (Num x)) (Some (Num y)) =\n       value_plus (Some (Num y)) (Some (Num x))\n 2. \\<And>_ uw_. value_plus None uw_ = value_plus uw_ None\n 3. \\<And>_ va uw_.\n       value_plus (Some (Str va)) uw_ = value_plus uw_ (Some (Str va))\n 4. \\<And>_ uv_. value_plus uv_ None = value_plus None uv_\n 5. \\<And>_ uv_ va.\n       value_plus uv_ (Some (Str va)) = value_plus (Some (Str va)) uv_", "by (simp_all add: value_plus_def)"], ["", "definition \"value_minus = maybe_arith_int (-)\""], ["", "lemma value_minus_never_string: \"value_minus a b \\<noteq> Some (Str x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. value_minus a b \\<noteq> Some (Str x)", "by (simp add: maybe_arith_int_never_string value_minus_def)"], ["", "definition \"value_times = maybe_arith_int (*)\""], ["", "lemma value_times_never_string: \"value_times a b \\<noteq> Some (Str x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. value_times a b \\<noteq> Some (Str x)", "by (simp add: maybe_arith_int_never_string value_times_def)"], ["", "fun MaybeBoolInt :: \"(int \\<Rightarrow> int \\<Rightarrow> bool) \\<Rightarrow> value option \\<Rightarrow> value option \\<Rightarrow> trilean\" where\n  \"MaybeBoolInt f (Some (Num a)) (Some (Num b)) = (if f a b then true else false)\" |\n  \"MaybeBoolInt _ _ _ = invalid\""], ["", "lemma MaybeBoolInt_not_num_1:\n  \"\\<forall>n. r \\<noteq> Some (Num n) \\<Longrightarrow> MaybeBoolInt f n r = invalid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. r \\<noteq> Some (Num n) \\<Longrightarrow>\n    MaybeBoolInt f n r = invalid", "using MaybeBoolInt.elims"], ["proof (prove)\nusing this:\n  \\<lbrakk>MaybeBoolInt ?x ?xa ?xb = ?y;\n   \\<And>f a b.\n      \\<lbrakk>?x = f; ?xa = Some (Num a); ?xb = Some (Num b);\n       ?y = (if f a b then true else false)\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<And>uu_ uw_.\n      \\<lbrakk>?x = uu_; ?xa = None; ?xb = uw_; ?y = invalid\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<And>uu_ va uw_.\n      \\<lbrakk>?x = uu_; ?xa = Some (Str va); ?xb = uw_;\n       ?y = invalid\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<And>uu_ uv_.\n      \\<lbrakk>?x = uu_; ?xa = uv_; ?xb = None; ?y = invalid\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<And>uu_ uv_ va.\n      \\<lbrakk>?x = uu_; ?xa = uv_; ?xb = Some (Str va);\n       ?y = invalid\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<forall>n. r \\<noteq> Some (Num n) \\<Longrightarrow>\n    MaybeBoolInt f n r = invalid", "by blast"], ["", "definition value_gt :: \"value option \\<Rightarrow> value option \\<Rightarrow> trilean\"  where\n  \"value_gt a b \\<equiv> MaybeBoolInt (>) a b\""], ["", "fun value_eq :: \"value option \\<Rightarrow> value option \\<Rightarrow> trilean\" where\n  \"value_eq None _ = invalid\" |\n  \"value_eq _ None = invalid\" |\n  \"value_eq (Some a) (Some b) = (if a = b then true else false)\""], ["", "lemma value_eq_true: \"(value_eq a b = true) = (\\<exists>x y. a = Some x \\<and> b = Some y \\<and> x = y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (value_eq a b = true) =\n    (\\<exists>x y. a = Some x \\<and> b = Some y \\<and> x = y)", "by (cases a; cases b, auto)"], ["", "lemma value_eq_false: \"(value_eq a b = false) = (\\<exists>x y. a = Some x \\<and> b = Some y \\<and> x \\<noteq> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (value_eq a b = false) =\n    (\\<exists>x y. a = Some x \\<and> b = Some y \\<and> x \\<noteq> y)", "by (cases a; cases b, auto)"], ["", "lemma value_gt_true_Some: \"value_gt a b = true \\<Longrightarrow> (\\<exists>x. a = Some x) \\<and> (\\<exists>y. b = Some y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. value_gt a b = true \\<Longrightarrow>\n    (\\<exists>x. a = Some x) \\<and> (\\<exists>y. b = Some y)", "by (cases a; cases b, auto simp: value_gt_def)"], ["", "lemma value_gt_true: \"(value_gt a b = true) = (\\<exists>x y. a = Some (Num x) \\<and> b = Some (Num y) \\<and> x > y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (value_gt a b = true) =\n    (\\<exists>x y. a = Some (Num x) \\<and> b = Some (Num y) \\<and> y < x)", "apply (cases a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. a = None \\<Longrightarrow>\n    (value_gt a b = true) =\n    (\\<exists>x y. a = Some (Num x) \\<and> b = Some (Num y) \\<and> y < x)\n 2. \\<And>aa.\n       a = Some aa \\<Longrightarrow>\n       (value_gt a b = true) =\n       (\\<exists>x y. a = Some (Num x) \\<and> b = Some (Num y) \\<and> y < x)", "using value_gt_true_Some"], ["proof (prove)\nusing this:\n  value_gt ?a ?b = true \\<Longrightarrow>\n  (\\<exists>x. ?a = Some x) \\<and> (\\<exists>y. ?b = Some y)\n\ngoal (2 subgoals):\n 1. a = None \\<Longrightarrow>\n    (value_gt a b = true) =\n    (\\<exists>x y. a = Some (Num x) \\<and> b = Some (Num y) \\<and> y < x)\n 2. \\<And>aa.\n       a = Some aa \\<Longrightarrow>\n       (value_gt a b = true) =\n       (\\<exists>x y. a = Some (Num x) \\<and> b = Some (Num y) \\<and> y < x)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       a = Some aa \\<Longrightarrow>\n       (value_gt a b = true) =\n       (\\<exists>x y. a = Some (Num x) \\<and> b = Some (Num y) \\<and> y < x)", "apply (cases b)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>a = Some aa; b = None\\<rbrakk>\n       \\<Longrightarrow> (value_gt a b = true) =\n                         (\\<exists>x y.\n                             a = Some (Num x) \\<and>\n                             b = Some (Num y) \\<and> y < x)\n 2. \\<And>aa aaa.\n       \\<lbrakk>a = Some aa; b = Some aaa\\<rbrakk>\n       \\<Longrightarrow> (value_gt a b = true) =\n                         (\\<exists>x y.\n                             a = Some (Num x) \\<and>\n                             b = Some (Num y) \\<and> y < x)", "using value_gt_true_Some"], ["proof (prove)\nusing this:\n  value_gt ?a ?b = true \\<Longrightarrow>\n  (\\<exists>x. ?a = Some x) \\<and> (\\<exists>y. ?b = Some y)\n\ngoal (2 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>a = Some aa; b = None\\<rbrakk>\n       \\<Longrightarrow> (value_gt a b = true) =\n                         (\\<exists>x y.\n                             a = Some (Num x) \\<and>\n                             b = Some (Num y) \\<and> y < x)\n 2. \\<And>aa aaa.\n       \\<lbrakk>a = Some aa; b = Some aaa\\<rbrakk>\n       \\<Longrightarrow> (value_gt a b = true) =\n                         (\\<exists>x y.\n                             a = Some (Num x) \\<and>\n                             b = Some (Num y) \\<and> y < x)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa aaa.\n       \\<lbrakk>a = Some aa; b = Some aaa\\<rbrakk>\n       \\<Longrightarrow> (value_gt a b = true) =\n                         (\\<exists>x y.\n                             a = Some (Num x) \\<and>\n                             b = Some (Num y) \\<and> y < x)", "subgoal for aa bb"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = Some aa; b = Some bb\\<rbrakk>\n    \\<Longrightarrow> (value_gt a b = true) =\n                      (\\<exists>x y.\n                          a = Some (Num x) \\<and>\n                          b = Some (Num y) \\<and> y < x)", "by (cases aa; cases bb, auto simp: value_gt_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma value_gt_false_Some: \"value_gt a b = false \\<Longrightarrow> (\\<exists>x. a = Some x) \\<and> (\\<exists>y. b = Some y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. value_gt a b = false \\<Longrightarrow>\n    (\\<exists>x. a = Some x) \\<and> (\\<exists>y. b = Some y)", "by (cases a; cases b, auto simp: value_gt_def)"], ["", "end"]]}