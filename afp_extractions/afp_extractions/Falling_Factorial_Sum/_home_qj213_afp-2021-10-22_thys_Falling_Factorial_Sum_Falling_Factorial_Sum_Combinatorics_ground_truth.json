{"file_name": "/home/qj213/afp-2021-10-22/thys/Falling_Factorial_Sum/Falling_Factorial_Sum_Combinatorics.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Falling_Factorial_Sum", "problem_names": ["lemma card_lists_distinct_length_eq:\n  assumes \"finite A\"\n  shows \"card {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} = ffact n (card A)\"", "lemma interleaving_Nil_implies_eq1:\n  assumes \"interleavings xs ys zs\"\n  assumes \"xs = []\"\n  shows \"ys = zs\"", "lemma interleaving_Nil_iff1:\n  \"interleavings [] ys zs \\<longleftrightarrow> (ys = zs)\"", "lemma interleaving_Nil_implies_eq2:\n  assumes \"interleavings xs ys zs\"\n  assumes \"ys = []\"\n  shows \"xs = zs\"", "lemma interleaving_Nil_iff2:\n  \"interleavings xs [] zs \\<longleftrightarrow> (xs = zs)\"", "lemma interleavings_Cons:\n  \"{zs. interleavings (x#xs) (y#ys) zs} =\n    {x#zs|zs. interleavings xs (y#ys) zs} \\<union> {y#zs|zs. interleavings (x#xs) ys zs}\"\n  (is \"?S = ?expr\")", "lemma interleavings_filter:\n  assumes \"X \\<inter> Y = {}\" \"set zs \\<subseteq> X \\<union> Y\"\n  shows \"interleavings [z\\<leftarrow>zs . z \\<in> X] [z\\<leftarrow>zs . z \\<in> Y] zs\"", "lemma interleavings_filter_eq1:\n  assumes \"interleavings xs ys zs\"\n  assumes \"(\\<forall>x\\<in>set xs. P x) \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)\"\n  shows \"filter P zs = xs\"", "lemma interleavings_filter_eq2:\n  assumes \"interleavings xs ys zs\"\n  assumes \"(\\<forall>x\\<in>set xs. \\<not> P x) \\<and> (\\<forall>y\\<in>set ys. P y)\"\n  shows \"filter P zs = ys\"", "lemma interleavings_length:\n  assumes \"interleavings xs ys zs\"\n  shows \"length xs + length ys = length zs\"", "lemma interleavings_set:\n  assumes \"interleavings xs ys zs\"\n  shows \"set xs \\<union> set ys = set zs\"", "lemma interleavings_distinct:\n  assumes \"interleavings xs ys zs\"\n  shows \"distinct xs \\<and> distinct ys \\<and> set xs \\<inter> set ys = {} \\<longleftrightarrow> distinct zs\"", "lemma two_mutual_lists_induction:\n  assumes \"\\<And>ys. P [] ys\"\n  assumes \"\\<And>xs. P xs []\"\n  assumes \"\\<And>x xs y ys. P xs (y#ys) \\<Longrightarrow> P (x#xs) ys \\<Longrightarrow> P (x#xs) (y#ys)\"\n  shows \"P xs ys\"", "lemma finite_interleavings:\n  \"finite {zs. interleavings xs ys zs}\"", "lemma card_interleavings:\n  assumes \"set xs \\<inter> set ys = {}\"\n  shows \"card {zs. interleavings xs ys zs} = (length xs + length ys choose (length xs))\"", "lemma lists_distinct_union_by_interleavings:\n  assumes \"X \\<inter> Y = {}\"\n  shows \"{zs. length zs = n \\<and> distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} = do {\n    k \\<leftarrow> {0..n};\n    xs \\<leftarrow> {xs. length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X};\n    ys \\<leftarrow> {ys. length ys = n - k \\<and> distinct ys \\<and> set ys \\<subseteq> Y};\n    {zs. interleavings xs ys zs}\n  }\" (is \"?S = ?expr\")", "lemma interleavings_inject:\n  assumes \"(set xs \\<union> set xs') \\<inter> (set ys \\<union> set ys') = {}\"\n  assumes \"interleavings xs ys zs\" \"interleavings xs' ys' zs'\"\n  assumes \"zs = zs'\"\n  shows \"xs = xs'\" and \"ys = ys'\"", "lemma injectivity:\n  assumes \"X \\<inter> Y = {}\"\n  assumes \"k \\<in> {0..n} \\<and> k' \\<in> {0..n}\"\n  assumes \"(length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X) \\<and> (length xs' = k' \\<and> distinct xs' \\<and> set xs' \\<subseteq> X)\"\n  assumes \"(length ys = n - k \\<and> distinct ys \\<and> set ys \\<subseteq> Y) \\<and> (length ys' = n - k' \\<and> distinct ys' \\<and> set ys' \\<subseteq> Y)\"\n  assumes \"interleavings xs ys zs \\<and> interleavings xs' ys' zs'\"\n  assumes \"zs = zs'\"\n  shows \"k = k'\" and \"xs = xs'\" and \"ys = ys'\"", "lemma card_lists_distinct_length_eq_union:\n  assumes \"finite X\" \"finite Y\" \"X \\<inter> Y = {}\"\n  shows \"card {zs. length zs = n \\<and> distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k=0..n. (n choose k) * ffact k (card X) * ffact (n - k) (card Y))\"\n  (is \"card ?S = _\")", "lemma\n  \"ffact n (x + y) = (\\<Sum>k=0..n. (n choose k) * ffact k x * ffact (n - k) y)\""], "translations": [["", "lemma card_lists_distinct_length_eq:\n  assumes \"finite A\"\n  shows \"card {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} = ffact n (card A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} =\n    ffact n (card A)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    card\n     {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} =\n    ffact n (card A)\n 2. \\<not> ?P \\<Longrightarrow>\n    card\n     {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} =\n    ffact n (card A)", "assume \"n \\<le> card A\""], ["proof (state)\nthis:\n  n \\<le> card A\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    card\n     {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} =\n    ffact n (card A)\n 2. \\<not> ?P \\<Longrightarrow>\n    card\n     {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} =\n    ffact n (card A)", "have \"card {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} = \\<Prod>{card A - n + 1..card A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} =\n    \\<Prod>{card A - n + 1..card A}", "using \\<open>finite A\\<close> \\<open>n \\<le> card A\\<close>"], ["proof (prove)\nusing this:\n  finite A\n  n \\<le> card A\n\ngoal (1 subgoal):\n 1. card\n     {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} =\n    \\<Prod>{card A - n + 1..card A}", "by (rule card_lists_distinct_length_eq)"], ["proof (state)\nthis:\n  card {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} =\n  \\<Prod>{card A - n + 1..card A}\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    card\n     {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} =\n    ffact n (card A)\n 2. \\<not> ?P \\<Longrightarrow>\n    card\n     {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} =\n    ffact n (card A)", "also"], ["proof (state)\nthis:\n  card {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} =\n  \\<Prod>{card A - n + 1..card A}\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    card\n     {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} =\n    ffact n (card A)\n 2. \\<not> ?P \\<Longrightarrow>\n    card\n     {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} =\n    ffact n (card A)", "have \"\\<dots> = ffact n (card A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Prod>{card A - n + 1..card A} = ffact n (card A)", "using \\<open>n \\<le> card A\\<close>"], ["proof (prove)\nusing this:\n  n \\<le> card A\n\ngoal (1 subgoal):\n 1. \\<Prod>{card A - n + 1..card A} = ffact n (card A)", "by (simp add: prod_rev_ffact_nat'[symmetric])"], ["proof (state)\nthis:\n  \\<Prod>{card A - n + 1..card A} = ffact n (card A)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    card\n     {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} =\n    ffact n (card A)\n 2. \\<not> ?P \\<Longrightarrow>\n    card\n     {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} =\n    ffact n (card A)", "finally"], ["proof (chain)\npicking this:\n  card {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} =\n  ffact n (card A)", "show ?thesis"], ["proof (prove)\nusing this:\n  card {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} =\n  ffact n (card A)\n\ngoal (1 subgoal):\n 1. card\n     {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} =\n    ffact n (card A)", "."], ["proof (state)\nthis:\n  card {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} =\n  ffact n (card A)\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> card A \\<Longrightarrow>\n    card\n     {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} =\n    ffact n (card A)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n \\<le> card A \\<Longrightarrow>\n    card\n     {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} =\n    ffact n (card A)", "assume \"\\<not> n \\<le> card A\""], ["proof (state)\nthis:\n  \\<not> n \\<le> card A\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> card A \\<Longrightarrow>\n    card\n     {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} =\n    ffact n (card A)", "from this \\<open>finite A\\<close>"], ["proof (chain)\npicking this:\n  \\<not> n \\<le> card A\n  finite A", "have \"\\<forall>xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A \\<longrightarrow> False\""], ["proof (prove)\nusing this:\n  \\<not> n \\<le> card A\n  finite A\n\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       length xs = n \\<and>\n       distinct xs \\<and> set xs \\<subseteq> A \\<longrightarrow>\n       False", "by (metis card_mono distinct_card)"], ["proof (state)\nthis:\n  \\<forall>xs.\n     length xs = n \\<and>\n     distinct xs \\<and> set xs \\<subseteq> A \\<longrightarrow>\n     False\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> card A \\<Longrightarrow>\n    card\n     {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} =\n    ffact n (card A)", "from this"], ["proof (chain)\npicking this:\n  \\<forall>xs.\n     length xs = n \\<and>\n     distinct xs \\<and> set xs \\<subseteq> A \\<longrightarrow>\n     False", "have eq_empty: \"{xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} = {}\""], ["proof (prove)\nusing this:\n  \\<forall>xs.\n     length xs = n \\<and>\n     distinct xs \\<and> set xs \\<subseteq> A \\<longrightarrow>\n     False\n\ngoal (1 subgoal):\n 1. {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} = {}", "using \\<open>finite A\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>xs.\n     length xs = n \\<and>\n     distinct xs \\<and> set xs \\<subseteq> A \\<longrightarrow>\n     False\n  finite A\n\ngoal (1 subgoal):\n 1. {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} = {}", "by auto"], ["proof (state)\nthis:\n  {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} = {}\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> card A \\<Longrightarrow>\n    card\n     {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} =\n    ffact n (card A)", "from \\<open>\\<not> n \\<le> card A\\<close>"], ["proof (chain)\npicking this:\n  \\<not> n \\<le> card A", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> n \\<le> card A\n\ngoal (1 subgoal):\n 1. card\n     {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} =\n    ffact n (card A)", "by (simp add: ffact_nat_triv eq_empty)"], ["proof (state)\nthis:\n  card {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> A} =\n  ffact n (card A)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Interleavings of Two Lists\\<close>"], ["", "inductive interleavings :: \"'a list \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> bool\"\nwhere\n  \"interleavings [] ys ys\"\n| \"interleavings xs [] xs\"\n| \"interleavings xs ys zs \\<Longrightarrow> interleavings (x#xs) ys (x#zs)\"\n| \"interleavings xs ys zs \\<Longrightarrow> interleavings xs (y#ys) (y#zs)\""], ["", "lemma interleaving_Nil_implies_eq1:\n  assumes \"interleavings xs ys zs\"\n  assumes \"xs = []\"\n  shows \"ys = zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ys = zs", "using assms"], ["proof (prove)\nusing this:\n  interleavings xs ys zs\n  xs = []\n\ngoal (1 subgoal):\n 1. ys = zs", "by (induct rule: interleavings.induct) auto"], ["", "lemma interleaving_Nil_iff1:\n  \"interleavings [] ys zs \\<longleftrightarrow> (ys = zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interleavings [] ys zs = (ys = zs)", "using interleaving_Nil_implies_eq1"], ["proof (prove)\nusing this:\n  \\<lbrakk>interleavings ?xs ?ys ?zs; ?xs = []\\<rbrakk>\n  \\<Longrightarrow> ?ys = ?zs\n\ngoal (1 subgoal):\n 1. interleavings [] ys zs = (ys = zs)", "by (auto simp add: interleavings.intros(1))"], ["", "lemma interleaving_Nil_implies_eq2:\n  assumes \"interleavings xs ys zs\"\n  assumes \"ys = []\"\n  shows \"xs = zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = zs", "using assms"], ["proof (prove)\nusing this:\n  interleavings xs ys zs\n  ys = []\n\ngoal (1 subgoal):\n 1. xs = zs", "by (induct rule: interleavings.induct) auto"], ["", "lemma interleaving_Nil_iff2:\n  \"interleavings xs [] zs \\<longleftrightarrow> (xs = zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interleavings xs [] zs = (xs = zs)", "using interleaving_Nil_implies_eq2"], ["proof (prove)\nusing this:\n  \\<lbrakk>interleavings ?xs ?ys ?zs; ?ys = []\\<rbrakk>\n  \\<Longrightarrow> ?xs = ?zs\n\ngoal (1 subgoal):\n 1. interleavings xs [] zs = (xs = zs)", "by (auto simp add: interleavings.intros(2))"], ["", "lemma interleavings_Cons:\n  \"{zs. interleavings (x#xs) (y#ys) zs} =\n    {x#zs|zs. interleavings xs (y#ys) zs} \\<union> {y#zs|zs. interleavings (x#xs) ys zs}\"\n  (is \"?S = ?expr\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {zs. interleavings (x # xs) (y # ys) zs} =\n    {x # zs |zs. interleavings xs (y # ys) zs} \\<union>\n    {y # zs |zs. interleavings (x # xs) ys zs}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. {zs. interleavings (x # xs) (y # ys) zs}\n    \\<subseteq> {x # zs |zs. interleavings xs (y # ys) zs} \\<union>\n                {y # zs |zs. interleavings (x # xs) ys zs}\n 2. {x # zs |zs. interleavings xs (y # ys) zs} \\<union>\n    {y # zs |zs. interleavings (x # xs) ys zs}\n    \\<subseteq> {zs. interleavings (x # xs) (y # ys) zs}", "show \"?S \\<subseteq> ?expr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {zs. interleavings (x # xs) (y # ys) zs}\n    \\<subseteq> {x # zs |zs. interleavings xs (y # ys) zs} \\<union>\n                {y # zs |zs. interleavings (x # xs) ys zs}", "by (auto elim: interleavings.cases)"], ["proof (state)\nthis:\n  {zs. interleavings (x # xs) (y # ys) zs}\n  \\<subseteq> {x # zs |zs. interleavings xs (y # ys) zs} \\<union>\n              {y # zs |zs. interleavings (x # xs) ys zs}\n\ngoal (1 subgoal):\n 1. {x # zs |zs. interleavings xs (y # ys) zs} \\<union>\n    {y # zs |zs. interleavings (x # xs) ys zs}\n    \\<subseteq> {zs. interleavings (x # xs) (y # ys) zs}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. {x # zs |zs. interleavings xs (y # ys) zs} \\<union>\n    {y # zs |zs. interleavings (x # xs) ys zs}\n    \\<subseteq> {zs. interleavings (x # xs) (y # ys) zs}", "show \"?expr \\<subseteq> ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x # zs |zs. interleavings xs (y # ys) zs} \\<union>\n    {y # zs |zs. interleavings (x # xs) ys zs}\n    \\<subseteq> {zs. interleavings (x # xs) (y # ys) zs}", "by (auto intro: interleavings.intros)"], ["proof (state)\nthis:\n  {x # zs |zs. interleavings xs (y # ys) zs} \\<union>\n  {y # zs |zs. interleavings (x # xs) ys zs}\n  \\<subseteq> {zs. interleavings (x # xs) (y # ys) zs}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma interleavings_filter:\n  assumes \"X \\<inter> Y = {}\" \"set zs \\<subseteq> X \\<union> Y\"\n  shows \"interleavings [z\\<leftarrow>zs . z \\<in> X] [z\\<leftarrow>zs . z \\<in> Y] zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interleavings (filter (\\<lambda>z. z \\<in> X) zs)\n     (filter (\\<lambda>z. z \\<in> Y) zs) zs", "using assms"], ["proof (prove)\nusing this:\n  X \\<inter> Y = {}\n  set zs \\<subseteq> X \\<union> Y\n\ngoal (1 subgoal):\n 1. interleavings (filter (\\<lambda>z. z \\<in> X) zs)\n     (filter (\\<lambda>z. z \\<in> Y) zs) zs", "by (induct zs) (auto intro: interleavings.intros)"], ["", "lemma interleavings_filter_eq1:\n  assumes \"interleavings xs ys zs\"\n  assumes \"(\\<forall>x\\<in>set xs. P x) \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)\"\n  shows \"filter P zs = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter P zs = xs", "using assms"], ["proof (prove)\nusing this:\n  interleavings xs ys zs\n  (\\<forall>x\\<in>set xs. P x) \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)\n\ngoal (1 subgoal):\n 1. filter P zs = xs", "by (induct rule: interleavings.induct) auto"], ["", "lemma interleavings_filter_eq2:\n  assumes \"interleavings xs ys zs\"\n  assumes \"(\\<forall>x\\<in>set xs. \\<not> P x) \\<and> (\\<forall>y\\<in>set ys. P y)\"\n  shows \"filter P zs = ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter P zs = ys", "using assms"], ["proof (prove)\nusing this:\n  interleavings xs ys zs\n  (\\<forall>x\\<in>set xs. \\<not> P x) \\<and> (\\<forall>y\\<in>set ys. P y)\n\ngoal (1 subgoal):\n 1. filter P zs = ys", "by (induct rule: interleavings.induct) auto"], ["", "lemma interleavings_length:\n  assumes \"interleavings xs ys zs\"\n  shows \"length xs + length ys = length zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs + length ys = length zs", "using assms"], ["proof (prove)\nusing this:\n  interleavings xs ys zs\n\ngoal (1 subgoal):\n 1. length xs + length ys = length zs", "by (induct xs ys zs rule: interleavings.induct) auto"], ["", "lemma interleavings_set:\n  assumes \"interleavings xs ys zs\"\n  shows \"set xs \\<union> set ys = set zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set xs \\<union> set ys = set zs", "using assms"], ["proof (prove)\nusing this:\n  interleavings xs ys zs\n\ngoal (1 subgoal):\n 1. set xs \\<union> set ys = set zs", "by (induct xs ys zs rule: interleavings.induct) auto"], ["", "lemma interleavings_distinct:\n  assumes \"interleavings xs ys zs\"\n  shows \"distinct xs \\<and> distinct ys \\<and> set xs \\<inter> set ys = {} \\<longleftrightarrow> distinct zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (distinct xs \\<and> distinct ys \\<and> set xs \\<inter> set ys = {}) =\n    distinct zs", "using assms interleavings_set"], ["proof (prove)\nusing this:\n  interleavings xs ys zs\n  interleavings ?xs ?ys ?zs \\<Longrightarrow>\n  set ?xs \\<union> set ?ys = set ?zs\n\ngoal (1 subgoal):\n 1. (distinct xs \\<and> distinct ys \\<and> set xs \\<inter> set ys = {}) =\n    distinct zs", "by (induct xs ys zs rule: interleavings.induct) fastforce+"], ["", "lemma two_mutual_lists_induction:\n  assumes \"\\<And>ys. P [] ys\"\n  assumes \"\\<And>xs. P xs []\"\n  assumes \"\\<And>x xs y ys. P xs (y#ys) \\<Longrightarrow> P (x#xs) ys \\<Longrightarrow> P (x#xs) (y#ys)\"\n  shows \"P xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P xs ys", "using assms"], ["proof (prove)\nusing this:\n  P [] ?ys\n  P ?xs []\n  \\<lbrakk>P ?xs (?y # ?ys); P (?x # ?xs) ?ys\\<rbrakk>\n  \\<Longrightarrow> P (?x # ?xs) (?y # ?ys)\n\ngoal (1 subgoal):\n 1. P xs ys", "by (induction_schema) (pat_completeness, lexicographic_order)"], ["", "lemma finite_interleavings:\n  \"finite {zs. interleavings xs ys zs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {zs. interleavings xs ys zs}", "proof (induct xs ys rule: two_mutual_lists_induction)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>ys. finite {zs. interleavings [] ys zs}\n 2. \\<And>xs. finite {zs. interleavings xs [] zs}\n 3. \\<And>x xs y ys.\n       \\<lbrakk>finite {zs. interleavings xs (y # ys) zs};\n        finite {zs. interleavings (x # xs) ys zs}\\<rbrakk>\n       \\<Longrightarrow> finite {zs. interleavings (x # xs) (y # ys) zs}", "case (1 ys)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>ys. finite {zs. interleavings [] ys zs}\n 2. \\<And>xs. finite {zs. interleavings xs [] zs}\n 3. \\<And>x xs y ys.\n       \\<lbrakk>finite {zs. interleavings xs (y # ys) zs};\n        finite {zs. interleavings (x # xs) ys zs}\\<rbrakk>\n       \\<Longrightarrow> finite {zs. interleavings (x # xs) (y # ys) zs}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {zs. interleavings [] ys zs}", "by (simp add: interleaving_Nil_iff1)"], ["proof (state)\nthis:\n  finite {zs. interleavings [] ys zs}\n\ngoal (2 subgoals):\n 1. \\<And>xs. finite {zs. interleavings xs [] zs}\n 2. \\<And>x xs y ys.\n       \\<lbrakk>finite {zs. interleavings xs (y # ys) zs};\n        finite {zs. interleavings (x # xs) ys zs}\\<rbrakk>\n       \\<Longrightarrow> finite {zs. interleavings (x # xs) (y # ys) zs}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs. finite {zs. interleavings xs [] zs}\n 2. \\<And>x xs y ys.\n       \\<lbrakk>finite {zs. interleavings xs (y # ys) zs};\n        finite {zs. interleavings (x # xs) ys zs}\\<rbrakk>\n       \\<Longrightarrow> finite {zs. interleavings (x # xs) (y # ys) zs}", "case (2 xs)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>xs. finite {zs. interleavings xs [] zs}\n 2. \\<And>x xs y ys.\n       \\<lbrakk>finite {zs. interleavings xs (y # ys) zs};\n        finite {zs. interleavings (x # xs) ys zs}\\<rbrakk>\n       \\<Longrightarrow> finite {zs. interleavings (x # xs) (y # ys) zs}", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {zs. interleavings xs [] zs}", "by (simp add: interleaving_Nil_iff2)"], ["proof (state)\nthis:\n  finite {zs. interleavings xs [] zs}\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>finite {zs. interleavings xs (y # ys) zs};\n        finite {zs. interleavings (x # xs) ys zs}\\<rbrakk>\n       \\<Longrightarrow> finite {zs. interleavings (x # xs) (y # ys) zs}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>finite {zs. interleavings xs (y # ys) zs};\n        finite {zs. interleavings (x # xs) ys zs}\\<rbrakk>\n       \\<Longrightarrow> finite {zs. interleavings (x # xs) (y # ys) zs}", "case (3 x xs y ys)"], ["proof (state)\nthis:\n  finite {zs. interleavings xs (y # ys) zs}\n  finite {zs. interleavings (x # xs) ys zs}\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>finite {zs. interleavings xs (y # ys) zs};\n        finite {zs. interleavings (x # xs) ys zs}\\<rbrakk>\n       \\<Longrightarrow> finite {zs. interleavings (x # xs) (y # ys) zs}", "then"], ["proof (chain)\npicking this:\n  finite {zs. interleavings xs (y # ys) zs}\n  finite {zs. interleavings (x # xs) ys zs}", "show ?case"], ["proof (prove)\nusing this:\n  finite {zs. interleavings xs (y # ys) zs}\n  finite {zs. interleavings (x # xs) ys zs}\n\ngoal (1 subgoal):\n 1. finite {zs. interleavings (x # xs) (y # ys) zs}", "by (simp add: interleavings_Cons)"], ["proof (state)\nthis:\n  finite {zs. interleavings (x # xs) (y # ys) zs}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_interleavings:\n  assumes \"set xs \\<inter> set ys = {}\"\n  shows \"card {zs. interleavings xs ys zs} = (length xs + length ys choose (length xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {zs. interleavings xs ys zs} =\n    length xs + length ys choose length xs", "using assms"], ["proof (prove)\nusing this:\n  set xs \\<inter> set ys = {}\n\ngoal (1 subgoal):\n 1. card {zs. interleavings xs ys zs} =\n    length xs + length ys choose length xs", "proof (induct xs ys rule: two_mutual_lists_induction)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>ys.\n       set [] \\<inter> set ys = {} \\<Longrightarrow>\n       card (Collect (interleavings [] ys)) =\n       length [] + length ys choose length []\n 2. \\<And>xs.\n       set xs \\<inter> set [] = {} \\<Longrightarrow>\n       card (Collect (interleavings xs [])) =\n       length xs + length [] choose length xs\n 3. \\<And>x xs y ys.\n       \\<lbrakk>set xs \\<inter> set (y # ys) = {} \\<Longrightarrow>\n                card (Collect (interleavings xs (y # ys))) =\n                length xs + length (y # ys) choose length xs;\n        set (x # xs) \\<inter> set ys = {} \\<Longrightarrow>\n        card (Collect (interleavings (x # xs) ys)) =\n        length (x # xs) + length ys choose length (x # xs);\n        set (x # xs) \\<inter> set (y # ys) = {}\\<rbrakk>\n       \\<Longrightarrow> card (Collect (interleavings (x # xs) (y # ys))) =\n                         length (x # xs) + length (y # ys) choose\n                         length (x # xs)", "case (1 ys)"], ["proof (state)\nthis:\n  set [] \\<inter> set ys = {}\n\ngoal (3 subgoals):\n 1. \\<And>ys.\n       set [] \\<inter> set ys = {} \\<Longrightarrow>\n       card (Collect (interleavings [] ys)) =\n       length [] + length ys choose length []\n 2. \\<And>xs.\n       set xs \\<inter> set [] = {} \\<Longrightarrow>\n       card (Collect (interleavings xs [])) =\n       length xs + length [] choose length xs\n 3. \\<And>x xs y ys.\n       \\<lbrakk>set xs \\<inter> set (y # ys) = {} \\<Longrightarrow>\n                card (Collect (interleavings xs (y # ys))) =\n                length xs + length (y # ys) choose length xs;\n        set (x # xs) \\<inter> set ys = {} \\<Longrightarrow>\n        card (Collect (interleavings (x # xs) ys)) =\n        length (x # xs) + length ys choose length (x # xs);\n        set (x # xs) \\<inter> set (y # ys) = {}\\<rbrakk>\n       \\<Longrightarrow> card (Collect (interleavings (x # xs) (y # ys))) =\n                         length (x # xs) + length (y # ys) choose\n                         length (x # xs)", "have \"card {zs. interleavings [] ys zs} = card {ys}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {zs. interleavings [] ys zs} = card {ys}", "by (simp add: interleaving_Nil_iff1)"], ["proof (state)\nthis:\n  card {zs. interleavings [] ys zs} = card {ys}\n\ngoal (3 subgoals):\n 1. \\<And>ys.\n       set [] \\<inter> set ys = {} \\<Longrightarrow>\n       card (Collect (interleavings [] ys)) =\n       length [] + length ys choose length []\n 2. \\<And>xs.\n       set xs \\<inter> set [] = {} \\<Longrightarrow>\n       card (Collect (interleavings xs [])) =\n       length xs + length [] choose length xs\n 3. \\<And>x xs y ys.\n       \\<lbrakk>set xs \\<inter> set (y # ys) = {} \\<Longrightarrow>\n                card (Collect (interleavings xs (y # ys))) =\n                length xs + length (y # ys) choose length xs;\n        set (x # xs) \\<inter> set ys = {} \\<Longrightarrow>\n        card (Collect (interleavings (x # xs) ys)) =\n        length (x # xs) + length ys choose length (x # xs);\n        set (x # xs) \\<inter> set (y # ys) = {}\\<rbrakk>\n       \\<Longrightarrow> card (Collect (interleavings (x # xs) (y # ys))) =\n                         length (x # xs) + length (y # ys) choose\n                         length (x # xs)", "also"], ["proof (state)\nthis:\n  card {zs. interleavings [] ys zs} = card {ys}\n\ngoal (3 subgoals):\n 1. \\<And>ys.\n       set [] \\<inter> set ys = {} \\<Longrightarrow>\n       card (Collect (interleavings [] ys)) =\n       length [] + length ys choose length []\n 2. \\<And>xs.\n       set xs \\<inter> set [] = {} \\<Longrightarrow>\n       card (Collect (interleavings xs [])) =\n       length xs + length [] choose length xs\n 3. \\<And>x xs y ys.\n       \\<lbrakk>set xs \\<inter> set (y # ys) = {} \\<Longrightarrow>\n                card (Collect (interleavings xs (y # ys))) =\n                length xs + length (y # ys) choose length xs;\n        set (x # xs) \\<inter> set ys = {} \\<Longrightarrow>\n        card (Collect (interleavings (x # xs) ys)) =\n        length (x # xs) + length ys choose length (x # xs);\n        set (x # xs) \\<inter> set (y # ys) = {}\\<rbrakk>\n       \\<Longrightarrow> card (Collect (interleavings (x # xs) (y # ys))) =\n                         length (x # xs) + length (y # ys) choose\n                         length (x # xs)", "have \"\\<dots> = (length [] + length ys choose (length []))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {ys} = length [] + length ys choose length []", "by simp"], ["proof (state)\nthis:\n  card {ys} = length [] + length ys choose length []\n\ngoal (3 subgoals):\n 1. \\<And>ys.\n       set [] \\<inter> set ys = {} \\<Longrightarrow>\n       card (Collect (interleavings [] ys)) =\n       length [] + length ys choose length []\n 2. \\<And>xs.\n       set xs \\<inter> set [] = {} \\<Longrightarrow>\n       card (Collect (interleavings xs [])) =\n       length xs + length [] choose length xs\n 3. \\<And>x xs y ys.\n       \\<lbrakk>set xs \\<inter> set (y # ys) = {} \\<Longrightarrow>\n                card (Collect (interleavings xs (y # ys))) =\n                length xs + length (y # ys) choose length xs;\n        set (x # xs) \\<inter> set ys = {} \\<Longrightarrow>\n        card (Collect (interleavings (x # xs) ys)) =\n        length (x # xs) + length ys choose length (x # xs);\n        set (x # xs) \\<inter> set (y # ys) = {}\\<rbrakk>\n       \\<Longrightarrow> card (Collect (interleavings (x # xs) (y # ys))) =\n                         length (x # xs) + length (y # ys) choose\n                         length (x # xs)", "finally"], ["proof (chain)\npicking this:\n  card {zs. interleavings [] ys zs} = length [] + length ys choose length []", "show ?case"], ["proof (prove)\nusing this:\n  card {zs. interleavings [] ys zs} = length [] + length ys choose length []\n\ngoal (1 subgoal):\n 1. card {a. interleavings [] ys a} = length [] + length ys choose length []", "."], ["proof (state)\nthis:\n  card {a. interleavings [] ys a} = length [] + length ys choose length []\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       set xs \\<inter> set [] = {} \\<Longrightarrow>\n       card (Collect (interleavings xs [])) =\n       length xs + length [] choose length xs\n 2. \\<And>x xs y ys.\n       \\<lbrakk>set xs \\<inter> set (y # ys) = {} \\<Longrightarrow>\n                card (Collect (interleavings xs (y # ys))) =\n                length xs + length (y # ys) choose length xs;\n        set (x # xs) \\<inter> set ys = {} \\<Longrightarrow>\n        card (Collect (interleavings (x # xs) ys)) =\n        length (x # xs) + length ys choose length (x # xs);\n        set (x # xs) \\<inter> set (y # ys) = {}\\<rbrakk>\n       \\<Longrightarrow> card (Collect (interleavings (x # xs) (y # ys))) =\n                         length (x # xs) + length (y # ys) choose\n                         length (x # xs)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs.\n       set xs \\<inter> set [] = {} \\<Longrightarrow>\n       card (Collect (interleavings xs [])) =\n       length xs + length [] choose length xs\n 2. \\<And>x xs y ys.\n       \\<lbrakk>set xs \\<inter> set (y # ys) = {} \\<Longrightarrow>\n                card (Collect (interleavings xs (y # ys))) =\n                length xs + length (y # ys) choose length xs;\n        set (x # xs) \\<inter> set ys = {} \\<Longrightarrow>\n        card (Collect (interleavings (x # xs) ys)) =\n        length (x # xs) + length ys choose length (x # xs);\n        set (x # xs) \\<inter> set (y # ys) = {}\\<rbrakk>\n       \\<Longrightarrow> card (Collect (interleavings (x # xs) (y # ys))) =\n                         length (x # xs) + length (y # ys) choose\n                         length (x # xs)", "case (2 xs)"], ["proof (state)\nthis:\n  set xs \\<inter> set [] = {}\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       set xs \\<inter> set [] = {} \\<Longrightarrow>\n       card (Collect (interleavings xs [])) =\n       length xs + length [] choose length xs\n 2. \\<And>x xs y ys.\n       \\<lbrakk>set xs \\<inter> set (y # ys) = {} \\<Longrightarrow>\n                card (Collect (interleavings xs (y # ys))) =\n                length xs + length (y # ys) choose length xs;\n        set (x # xs) \\<inter> set ys = {} \\<Longrightarrow>\n        card (Collect (interleavings (x # xs) ys)) =\n        length (x # xs) + length ys choose length (x # xs);\n        set (x # xs) \\<inter> set (y # ys) = {}\\<rbrakk>\n       \\<Longrightarrow> card (Collect (interleavings (x # xs) (y # ys))) =\n                         length (x # xs) + length (y # ys) choose\n                         length (x # xs)", "have \"card {zs. interleavings xs [] zs} = card {xs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {zs. interleavings xs [] zs} = card {xs}", "by (simp add: interleaving_Nil_iff2)"], ["proof (state)\nthis:\n  card {zs. interleavings xs [] zs} = card {xs}\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       set xs \\<inter> set [] = {} \\<Longrightarrow>\n       card (Collect (interleavings xs [])) =\n       length xs + length [] choose length xs\n 2. \\<And>x xs y ys.\n       \\<lbrakk>set xs \\<inter> set (y # ys) = {} \\<Longrightarrow>\n                card (Collect (interleavings xs (y # ys))) =\n                length xs + length (y # ys) choose length xs;\n        set (x # xs) \\<inter> set ys = {} \\<Longrightarrow>\n        card (Collect (interleavings (x # xs) ys)) =\n        length (x # xs) + length ys choose length (x # xs);\n        set (x # xs) \\<inter> set (y # ys) = {}\\<rbrakk>\n       \\<Longrightarrow> card (Collect (interleavings (x # xs) (y # ys))) =\n                         length (x # xs) + length (y # ys) choose\n                         length (x # xs)", "also"], ["proof (state)\nthis:\n  card {zs. interleavings xs [] zs} = card {xs}\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       set xs \\<inter> set [] = {} \\<Longrightarrow>\n       card (Collect (interleavings xs [])) =\n       length xs + length [] choose length xs\n 2. \\<And>x xs y ys.\n       \\<lbrakk>set xs \\<inter> set (y # ys) = {} \\<Longrightarrow>\n                card (Collect (interleavings xs (y # ys))) =\n                length xs + length (y # ys) choose length xs;\n        set (x # xs) \\<inter> set ys = {} \\<Longrightarrow>\n        card (Collect (interleavings (x # xs) ys)) =\n        length (x # xs) + length ys choose length (x # xs);\n        set (x # xs) \\<inter> set (y # ys) = {}\\<rbrakk>\n       \\<Longrightarrow> card (Collect (interleavings (x # xs) (y # ys))) =\n                         length (x # xs) + length (y # ys) choose\n                         length (x # xs)", "have \"\\<dots> = (length xs + length [] choose (length xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {xs} = length xs + length [] choose length xs", "by simp"], ["proof (state)\nthis:\n  card {xs} = length xs + length [] choose length xs\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       set xs \\<inter> set [] = {} \\<Longrightarrow>\n       card (Collect (interleavings xs [])) =\n       length xs + length [] choose length xs\n 2. \\<And>x xs y ys.\n       \\<lbrakk>set xs \\<inter> set (y # ys) = {} \\<Longrightarrow>\n                card (Collect (interleavings xs (y # ys))) =\n                length xs + length (y # ys) choose length xs;\n        set (x # xs) \\<inter> set ys = {} \\<Longrightarrow>\n        card (Collect (interleavings (x # xs) ys)) =\n        length (x # xs) + length ys choose length (x # xs);\n        set (x # xs) \\<inter> set (y # ys) = {}\\<rbrakk>\n       \\<Longrightarrow> card (Collect (interleavings (x # xs) (y # ys))) =\n                         length (x # xs) + length (y # ys) choose\n                         length (x # xs)", "finally"], ["proof (chain)\npicking this:\n  card {zs. interleavings xs [] zs} = length xs + length [] choose length xs", "show ?case"], ["proof (prove)\nusing this:\n  card {zs. interleavings xs [] zs} = length xs + length [] choose length xs\n\ngoal (1 subgoal):\n 1. card {a. interleavings xs [] a} = length xs + length [] choose length xs", "."], ["proof (state)\nthis:\n  card {a. interleavings xs [] a} = length xs + length [] choose length xs\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>set xs \\<inter> set (y # ys) = {} \\<Longrightarrow>\n                card (Collect (interleavings xs (y # ys))) =\n                length xs + length (y # ys) choose length xs;\n        set (x # xs) \\<inter> set ys = {} \\<Longrightarrow>\n        card (Collect (interleavings (x # xs) ys)) =\n        length (x # xs) + length ys choose length (x # xs);\n        set (x # xs) \\<inter> set (y # ys) = {}\\<rbrakk>\n       \\<Longrightarrow> card (Collect (interleavings (x # xs) (y # ys))) =\n                         length (x # xs) + length (y # ys) choose\n                         length (x # xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>set xs \\<inter> set (y # ys) = {} \\<Longrightarrow>\n                card (Collect (interleavings xs (y # ys))) =\n                length xs + length (y # ys) choose length xs;\n        set (x # xs) \\<inter> set ys = {} \\<Longrightarrow>\n        card (Collect (interleavings (x # xs) ys)) =\n        length (x # xs) + length ys choose length (x # xs);\n        set (x # xs) \\<inter> set (y # ys) = {}\\<rbrakk>\n       \\<Longrightarrow> card (Collect (interleavings (x # xs) (y # ys))) =\n                         length (x # xs) + length (y # ys) choose\n                         length (x # xs)", "case (3 x xs y ys)"], ["proof (state)\nthis:\n  set xs \\<inter> set (y # ys) = {} \\<Longrightarrow>\n  card {a. interleavings xs (y # ys) a} =\n  length xs + length (y # ys) choose length xs\n  set (x # xs) \\<inter> set ys = {} \\<Longrightarrow>\n  card {a. interleavings (x # xs) ys a} =\n  length (x # xs) + length ys choose length (x # xs)\n  set (x # xs) \\<inter> set (y # ys) = {}\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>set xs \\<inter> set (y # ys) = {} \\<Longrightarrow>\n                card (Collect (interleavings xs (y # ys))) =\n                length xs + length (y # ys) choose length xs;\n        set (x # xs) \\<inter> set ys = {} \\<Longrightarrow>\n        card (Collect (interleavings (x # xs) ys)) =\n        length (x # xs) + length ys choose length (x # xs);\n        set (x # xs) \\<inter> set (y # ys) = {}\\<rbrakk>\n       \\<Longrightarrow> card (Collect (interleavings (x # xs) (y # ys))) =\n                         length (x # xs) + length (y # ys) choose\n                         length (x # xs)", "have \"card {zs. interleavings (x # xs) (y # ys) zs} =\n    card ({x#zs|zs. interleavings xs (y#ys) zs} \\<union> {y#zs|zs. interleavings (x#xs) ys zs})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {zs. interleavings (x # xs) (y # ys) zs} =\n    card\n     ({x # zs |zs. interleavings xs (y # ys) zs} \\<union>\n      {y # zs |zs. interleavings (x # xs) ys zs})", "by (simp add: interleavings_Cons)"], ["proof (state)\nthis:\n  card {zs. interleavings (x # xs) (y # ys) zs} =\n  card\n   ({x # zs |zs. interleavings xs (y # ys) zs} \\<union>\n    {y # zs |zs. interleavings (x # xs) ys zs})\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>set xs \\<inter> set (y # ys) = {} \\<Longrightarrow>\n                card (Collect (interleavings xs (y # ys))) =\n                length xs + length (y # ys) choose length xs;\n        set (x # xs) \\<inter> set ys = {} \\<Longrightarrow>\n        card (Collect (interleavings (x # xs) ys)) =\n        length (x # xs) + length ys choose length (x # xs);\n        set (x # xs) \\<inter> set (y # ys) = {}\\<rbrakk>\n       \\<Longrightarrow> card (Collect (interleavings (x # xs) (y # ys))) =\n                         length (x # xs) + length (y # ys) choose\n                         length (x # xs)", "also"], ["proof (state)\nthis:\n  card {zs. interleavings (x # xs) (y # ys) zs} =\n  card\n   ({x # zs |zs. interleavings xs (y # ys) zs} \\<union>\n    {y # zs |zs. interleavings (x # xs) ys zs})\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>set xs \\<inter> set (y # ys) = {} \\<Longrightarrow>\n                card (Collect (interleavings xs (y # ys))) =\n                length xs + length (y # ys) choose length xs;\n        set (x # xs) \\<inter> set ys = {} \\<Longrightarrow>\n        card (Collect (interleavings (x # xs) ys)) =\n        length (x # xs) + length ys choose length (x # xs);\n        set (x # xs) \\<inter> set (y # ys) = {}\\<rbrakk>\n       \\<Longrightarrow> card (Collect (interleavings (x # xs) (y # ys))) =\n                         length (x # xs) + length (y # ys) choose\n                         length (x # xs)", "have \"\\<dots> = card {x#zs|zs. interleavings xs (y#ys) zs} + card {y#zs|zs. interleavings (x#xs) ys zs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     ({x # zs |zs. interleavings xs (y # ys) zs} \\<union>\n      {y # zs |zs. interleavings (x # xs) ys zs}) =\n    card {x # zs |zs. interleavings xs (y # ys) zs} +\n    card {y # zs |zs. interleavings (x # xs) ys zs}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card\n     ({x # zs |zs. interleavings xs (y # ys) zs} \\<union>\n      {y # zs |zs. interleavings (x # xs) ys zs}) =\n    card {x # zs |zs. interleavings xs (y # ys) zs} +\n    card {y # zs |zs. interleavings (x # xs) ys zs}", "have \"finite {x # zs |zs. interleavings xs (y # ys) zs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {x # zs |zs. interleavings xs (y # ys) zs}", "by (simp add: finite_interleavings)"], ["proof (state)\nthis:\n  finite {x # zs |zs. interleavings xs (y # ys) zs}\n\ngoal (1 subgoal):\n 1. card\n     ({x # zs |zs. interleavings xs (y # ys) zs} \\<union>\n      {y # zs |zs. interleavings (x # xs) ys zs}) =\n    card {x # zs |zs. interleavings xs (y # ys) zs} +\n    card {y # zs |zs. interleavings (x # xs) ys zs}", "moreover"], ["proof (state)\nthis:\n  finite {x # zs |zs. interleavings xs (y # ys) zs}\n\ngoal (1 subgoal):\n 1. card\n     ({x # zs |zs. interleavings xs (y # ys) zs} \\<union>\n      {y # zs |zs. interleavings (x # xs) ys zs}) =\n    card {x # zs |zs. interleavings xs (y # ys) zs} +\n    card {y # zs |zs. interleavings (x # xs) ys zs}", "have \"finite {y # zs |zs. interleavings (x # xs) ys zs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {y # zs |zs. interleavings (x # xs) ys zs}", "by (simp add: finite_interleavings)"], ["proof (state)\nthis:\n  finite {y # zs |zs. interleavings (x # xs) ys zs}\n\ngoal (1 subgoal):\n 1. card\n     ({x # zs |zs. interleavings xs (y # ys) zs} \\<union>\n      {y # zs |zs. interleavings (x # xs) ys zs}) =\n    card {x # zs |zs. interleavings xs (y # ys) zs} +\n    card {y # zs |zs. interleavings (x # xs) ys zs}", "moreover"], ["proof (state)\nthis:\n  finite {y # zs |zs. interleavings (x # xs) ys zs}\n\ngoal (1 subgoal):\n 1. card\n     ({x # zs |zs. interleavings xs (y # ys) zs} \\<union>\n      {y # zs |zs. interleavings (x # xs) ys zs}) =\n    card {x # zs |zs. interleavings xs (y # ys) zs} +\n    card {y # zs |zs. interleavings (x # xs) ys zs}", "have \"{x # zs |zs. interleavings xs (y # ys) zs} \\<inter> {y # zs |zs. interleavings (x # xs) ys zs} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x # zs |zs. interleavings xs (y # ys) zs} \\<inter>\n    {y # zs |zs. interleavings (x # xs) ys zs} =\n    {}", "using \\<open>set (x # xs) \\<inter> set (y # ys) = {}\\<close>"], ["proof (prove)\nusing this:\n  set (x # xs) \\<inter> set (y # ys) = {}\n\ngoal (1 subgoal):\n 1. {x # zs |zs. interleavings xs (y # ys) zs} \\<inter>\n    {y # zs |zs. interleavings (x # xs) ys zs} =\n    {}", "by auto"], ["proof (state)\nthis:\n  {x # zs |zs. interleavings xs (y # ys) zs} \\<inter>\n  {y # zs |zs. interleavings (x # xs) ys zs} =\n  {}\n\ngoal (1 subgoal):\n 1. card\n     ({x # zs |zs. interleavings xs (y # ys) zs} \\<union>\n      {y # zs |zs. interleavings (x # xs) ys zs}) =\n    card {x # zs |zs. interleavings xs (y # ys) zs} +\n    card {y # zs |zs. interleavings (x # xs) ys zs}", "ultimately"], ["proof (chain)\npicking this:\n  finite {x # zs |zs. interleavings xs (y # ys) zs}\n  finite {y # zs |zs. interleavings (x # xs) ys zs}\n  {x # zs |zs. interleavings xs (y # ys) zs} \\<inter>\n  {y # zs |zs. interleavings (x # xs) ys zs} =\n  {}", "show ?thesis"], ["proof (prove)\nusing this:\n  finite {x # zs |zs. interleavings xs (y # ys) zs}\n  finite {y # zs |zs. interleavings (x # xs) ys zs}\n  {x # zs |zs. interleavings xs (y # ys) zs} \\<inter>\n  {y # zs |zs. interleavings (x # xs) ys zs} =\n  {}\n\ngoal (1 subgoal):\n 1. card\n     ({x # zs |zs. interleavings xs (y # ys) zs} \\<union>\n      {y # zs |zs. interleavings (x # xs) ys zs}) =\n    card {x # zs |zs. interleavings xs (y # ys) zs} +\n    card {y # zs |zs. interleavings (x # xs) ys zs}", "by (simp add: card_Un_disjoint)"], ["proof (state)\nthis:\n  card\n   ({x # zs |zs. interleavings xs (y # ys) zs} \\<union>\n    {y # zs |zs. interleavings (x # xs) ys zs}) =\n  card {x # zs |zs. interleavings xs (y # ys) zs} +\n  card {y # zs |zs. interleavings (x # xs) ys zs}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card\n   ({x # zs |zs. interleavings xs (y # ys) zs} \\<union>\n    {y # zs |zs. interleavings (x # xs) ys zs}) =\n  card {x # zs |zs. interleavings xs (y # ys) zs} +\n  card {y # zs |zs. interleavings (x # xs) ys zs}\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>set xs \\<inter> set (y # ys) = {} \\<Longrightarrow>\n                card (Collect (interleavings xs (y # ys))) =\n                length xs + length (y # ys) choose length xs;\n        set (x # xs) \\<inter> set ys = {} \\<Longrightarrow>\n        card (Collect (interleavings (x # xs) ys)) =\n        length (x # xs) + length ys choose length (x # xs);\n        set (x # xs) \\<inter> set (y # ys) = {}\\<rbrakk>\n       \\<Longrightarrow> card (Collect (interleavings (x # xs) (y # ys))) =\n                         length (x # xs) + length (y # ys) choose\n                         length (x # xs)", "also"], ["proof (state)\nthis:\n  card\n   ({x # zs |zs. interleavings xs (y # ys) zs} \\<union>\n    {y # zs |zs. interleavings (x # xs) ys zs}) =\n  card {x # zs |zs. interleavings xs (y # ys) zs} +\n  card {y # zs |zs. interleavings (x # xs) ys zs}\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>set xs \\<inter> set (y # ys) = {} \\<Longrightarrow>\n                card (Collect (interleavings xs (y # ys))) =\n                length xs + length (y # ys) choose length xs;\n        set (x # xs) \\<inter> set ys = {} \\<Longrightarrow>\n        card (Collect (interleavings (x # xs) ys)) =\n        length (x # xs) + length ys choose length (x # xs);\n        set (x # xs) \\<inter> set (y # ys) = {}\\<rbrakk>\n       \\<Longrightarrow> card (Collect (interleavings (x # xs) (y # ys))) =\n                         length (x # xs) + length (y # ys) choose\n                         length (x # xs)", "have \"\\<dots> = card ((\\<lambda>zs. x # zs) ` {zs. interleavings xs (y # ys) zs}) +\n    card ((\\<lambda>zs. y # zs) ` {zs. interleavings (x#xs) ys zs})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {x # zs |zs. interleavings xs (y # ys) zs} +\n    card {y # zs |zs. interleavings (x # xs) ys zs} =\n    card ((#) x ` {zs. interleavings xs (y # ys) zs}) +\n    card ((#) y ` {zs. interleavings (x # xs) ys zs})", "by (simp add: setcompr_eq_image)"], ["proof (state)\nthis:\n  card {x # zs |zs. interleavings xs (y # ys) zs} +\n  card {y # zs |zs. interleavings (x # xs) ys zs} =\n  card ((#) x ` {zs. interleavings xs (y # ys) zs}) +\n  card ((#) y ` {zs. interleavings (x # xs) ys zs})\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>set xs \\<inter> set (y # ys) = {} \\<Longrightarrow>\n                card (Collect (interleavings xs (y # ys))) =\n                length xs + length (y # ys) choose length xs;\n        set (x # xs) \\<inter> set ys = {} \\<Longrightarrow>\n        card (Collect (interleavings (x # xs) ys)) =\n        length (x # xs) + length ys choose length (x # xs);\n        set (x # xs) \\<inter> set (y # ys) = {}\\<rbrakk>\n       \\<Longrightarrow> card (Collect (interleavings (x # xs) (y # ys))) =\n                         length (x # xs) + length (y # ys) choose\n                         length (x # xs)", "also"], ["proof (state)\nthis:\n  card {x # zs |zs. interleavings xs (y # ys) zs} +\n  card {y # zs |zs. interleavings (x # xs) ys zs} =\n  card ((#) x ` {zs. interleavings xs (y # ys) zs}) +\n  card ((#) y ` {zs. interleavings (x # xs) ys zs})\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>set xs \\<inter> set (y # ys) = {} \\<Longrightarrow>\n                card (Collect (interleavings xs (y # ys))) =\n                length xs + length (y # ys) choose length xs;\n        set (x # xs) \\<inter> set ys = {} \\<Longrightarrow>\n        card (Collect (interleavings (x # xs) ys)) =\n        length (x # xs) + length ys choose length (x # xs);\n        set (x # xs) \\<inter> set (y # ys) = {}\\<rbrakk>\n       \\<Longrightarrow> card (Collect (interleavings (x # xs) (y # ys))) =\n                         length (x # xs) + length (y # ys) choose\n                         length (x # xs)", "have \"\\<dots> = card {zs. interleavings xs (y # ys) zs} + card {zs. interleavings (x#xs) ys zs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card ((#) x ` {zs. interleavings xs (y # ys) zs}) +\n    card ((#) y ` {zs. interleavings (x # xs) ys zs}) =\n    card {zs. interleavings xs (y # ys) zs} +\n    card {zs. interleavings (x # xs) ys zs}", "by (simp add: card_image)"], ["proof (state)\nthis:\n  card ((#) x ` {zs. interleavings xs (y # ys) zs}) +\n  card ((#) y ` {zs. interleavings (x # xs) ys zs}) =\n  card {zs. interleavings xs (y # ys) zs} +\n  card {zs. interleavings (x # xs) ys zs}\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>set xs \\<inter> set (y # ys) = {} \\<Longrightarrow>\n                card (Collect (interleavings xs (y # ys))) =\n                length xs + length (y # ys) choose length xs;\n        set (x # xs) \\<inter> set ys = {} \\<Longrightarrow>\n        card (Collect (interleavings (x # xs) ys)) =\n        length (x # xs) + length ys choose length (x # xs);\n        set (x # xs) \\<inter> set (y # ys) = {}\\<rbrakk>\n       \\<Longrightarrow> card (Collect (interleavings (x # xs) (y # ys))) =\n                         length (x # xs) + length (y # ys) choose\n                         length (x # xs)", "also"], ["proof (state)\nthis:\n  card ((#) x ` {zs. interleavings xs (y # ys) zs}) +\n  card ((#) y ` {zs. interleavings (x # xs) ys zs}) =\n  card {zs. interleavings xs (y # ys) zs} +\n  card {zs. interleavings (x # xs) ys zs}\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>set xs \\<inter> set (y # ys) = {} \\<Longrightarrow>\n                card (Collect (interleavings xs (y # ys))) =\n                length xs + length (y # ys) choose length xs;\n        set (x # xs) \\<inter> set ys = {} \\<Longrightarrow>\n        card (Collect (interleavings (x # xs) ys)) =\n        length (x # xs) + length ys choose length (x # xs);\n        set (x # xs) \\<inter> set (y # ys) = {}\\<rbrakk>\n       \\<Longrightarrow> card (Collect (interleavings (x # xs) (y # ys))) =\n                         length (x # xs) + length (y # ys) choose\n                         length (x # xs)", "have \"\\<dots> = (length xs + length (y # ys) choose length xs) + (length (x # xs) + length ys choose length (x # xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {zs. interleavings xs (y # ys) zs} +\n    card {zs. interleavings (x # xs) ys zs} =\n    length xs + length (y # ys) choose length xs +\n    (length (x # xs) + length ys choose length (x # xs))", "using 3"], ["proof (prove)\nusing this:\n  set xs \\<inter> set (y # ys) = {} \\<Longrightarrow>\n  card {a. interleavings xs (y # ys) a} =\n  length xs + length (y # ys) choose length xs\n  set (x # xs) \\<inter> set ys = {} \\<Longrightarrow>\n  card {a. interleavings (x # xs) ys a} =\n  length (x # xs) + length ys choose length (x # xs)\n  set (x # xs) \\<inter> set (y # ys) = {}\n\ngoal (1 subgoal):\n 1. card {zs. interleavings xs (y # ys) zs} +\n    card {zs. interleavings (x # xs) ys zs} =\n    length xs + length (y # ys) choose length xs +\n    (length (x # xs) + length ys choose length (x # xs))", "by simp"], ["proof (state)\nthis:\n  card {zs. interleavings xs (y # ys) zs} +\n  card {zs. interleavings (x # xs) ys zs} =\n  length xs + length (y # ys) choose length xs +\n  (length (x # xs) + length ys choose length (x # xs))\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>set xs \\<inter> set (y # ys) = {} \\<Longrightarrow>\n                card (Collect (interleavings xs (y # ys))) =\n                length xs + length (y # ys) choose length xs;\n        set (x # xs) \\<inter> set ys = {} \\<Longrightarrow>\n        card (Collect (interleavings (x # xs) ys)) =\n        length (x # xs) + length ys choose length (x # xs);\n        set (x # xs) \\<inter> set (y # ys) = {}\\<rbrakk>\n       \\<Longrightarrow> card (Collect (interleavings (x # xs) (y # ys))) =\n                         length (x # xs) + length (y # ys) choose\n                         length (x # xs)", "also"], ["proof (state)\nthis:\n  card {zs. interleavings xs (y # ys) zs} +\n  card {zs. interleavings (x # xs) ys zs} =\n  length xs + length (y # ys) choose length xs +\n  (length (x # xs) + length ys choose length (x # xs))\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>set xs \\<inter> set (y # ys) = {} \\<Longrightarrow>\n                card (Collect (interleavings xs (y # ys))) =\n                length xs + length (y # ys) choose length xs;\n        set (x # xs) \\<inter> set ys = {} \\<Longrightarrow>\n        card (Collect (interleavings (x # xs) ys)) =\n        length (x # xs) + length ys choose length (x # xs);\n        set (x # xs) \\<inter> set (y # ys) = {}\\<rbrakk>\n       \\<Longrightarrow> card (Collect (interleavings (x # xs) (y # ys))) =\n                         length (x # xs) + length (y # ys) choose\n                         length (x # xs)", "have \"\\<dots> = length (x # xs) + length (y # ys) choose length (x # xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs + length (y # ys) choose length xs +\n    (length (x # xs) + length ys choose length (x # xs)) =\n    length (x # xs) + length (y # ys) choose length (x # xs)", "by simp"], ["proof (state)\nthis:\n  length xs + length (y # ys) choose length xs +\n  (length (x # xs) + length ys choose length (x # xs)) =\n  length (x # xs) + length (y # ys) choose length (x # xs)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>set xs \\<inter> set (y # ys) = {} \\<Longrightarrow>\n                card (Collect (interleavings xs (y # ys))) =\n                length xs + length (y # ys) choose length xs;\n        set (x # xs) \\<inter> set ys = {} \\<Longrightarrow>\n        card (Collect (interleavings (x # xs) ys)) =\n        length (x # xs) + length ys choose length (x # xs);\n        set (x # xs) \\<inter> set (y # ys) = {}\\<rbrakk>\n       \\<Longrightarrow> card (Collect (interleavings (x # xs) (y # ys))) =\n                         length (x # xs) + length (y # ys) choose\n                         length (x # xs)", "finally"], ["proof (chain)\npicking this:\n  card {zs. interleavings (x # xs) (y # ys) zs} =\n  length (x # xs) + length (y # ys) choose length (x # xs)", "show ?case"], ["proof (prove)\nusing this:\n  card {zs. interleavings (x # xs) (y # ys) zs} =\n  length (x # xs) + length (y # ys) choose length (x # xs)\n\ngoal (1 subgoal):\n 1. card {a. interleavings (x # xs) (y # ys) a} =\n    length (x # xs) + length (y # ys) choose length (x # xs)", "."], ["proof (state)\nthis:\n  card {a. interleavings (x # xs) (y # ys) a} =\n  length (x # xs) + length (y # ys) choose length (x # xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Cardinality of Distinct Fixed-Length Lists from a Union of Two Sets\\<close>"], ["", "lemma lists_distinct_union_by_interleavings:\n  assumes \"X \\<inter> Y = {}\"\n  shows \"{zs. length zs = n \\<and> distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} = do {\n    k \\<leftarrow> {0..n};\n    xs \\<leftarrow> {xs. length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X};\n    ys \\<leftarrow> {ys. length ys = n - k \\<and> distinct ys \\<and> set ys \\<subseteq> Y};\n    {zs. interleavings xs ys zs}\n  }\" (is \"?S = ?expr\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {zs.\n     length zs = n \\<and>\n     distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    {0..n} \\<bind>\n    (\\<lambda>k.\n        {xs.\n         length xs = k \\<and>\n         distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n        (\\<lambda>xs.\n            {ys.\n             length ys = n - k \\<and>\n             distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n            (\\<lambda>ys. {zs. interleavings xs ys zs})))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. {zs.\n     length zs = n \\<and>\n     distinct zs \\<and> set zs \\<subseteq> X \\<union> Y}\n    \\<subseteq> {0..n} \\<bind>\n                (\\<lambda>k.\n                    {xs.\n                     length xs = k \\<and>\n                     distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n                    (\\<lambda>xs.\n                        {ys.\n                         length ys = n - k \\<and>\n                         distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                        (\\<lambda>ys. {zs. interleavings xs ys zs})))\n 2. {0..n} \\<bind>\n    (\\<lambda>k.\n        {xs.\n         length xs = k \\<and>\n         distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n        (\\<lambda>xs.\n            {ys.\n             length ys = n - k \\<and>\n             distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n            (\\<lambda>ys. {zs. interleavings xs ys zs})))\n    \\<subseteq> {zs.\n                 length zs = n \\<and>\n                 distinct zs \\<and> set zs \\<subseteq> X \\<union> Y}", "show \"?S \\<subseteq> ?expr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {zs.\n     length zs = n \\<and>\n     distinct zs \\<and> set zs \\<subseteq> X \\<union> Y}\n    \\<subseteq> {0..n} \\<bind>\n                (\\<lambda>k.\n                    {xs.\n                     length xs = k \\<and>\n                     distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n                    (\\<lambda>xs.\n                        {ys.\n                         length ys = n - k \\<and>\n                         distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                        (\\<lambda>ys. {zs. interleavings xs ys zs})))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {zs.\n                length zs = n \\<and>\n                distinct zs \\<and>\n                set zs \\<subseteq> X \\<union> Y} \\<Longrightarrow>\n       x \\<in> {0..n} \\<bind>\n               (\\<lambda>k.\n                   {xs.\n                    length xs = k \\<and>\n                    distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n                   (\\<lambda>xs.\n                       {ys.\n                        length ys = n - k \\<and>\n                        distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                       (\\<lambda>ys. {zs. interleavings xs ys zs})))", "fix zs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {zs.\n                length zs = n \\<and>\n                distinct zs \\<and>\n                set zs \\<subseteq> X \\<union> Y} \\<Longrightarrow>\n       x \\<in> {0..n} \\<bind>\n               (\\<lambda>k.\n                   {xs.\n                    length xs = k \\<and>\n                    distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n                   (\\<lambda>xs.\n                       {ys.\n                        length ys = n - k \\<and>\n                        distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                       (\\<lambda>ys. {zs. interleavings xs ys zs})))", "assume \"zs \\<in> ?S\""], ["proof (state)\nthis:\n  zs \\<in> {zs.\n            length zs = n \\<and>\n            distinct zs \\<and> set zs \\<subseteq> X \\<union> Y}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {zs.\n                length zs = n \\<and>\n                distinct zs \\<and>\n                set zs \\<subseteq> X \\<union> Y} \\<Longrightarrow>\n       x \\<in> {0..n} \\<bind>\n               (\\<lambda>k.\n                   {xs.\n                    length xs = k \\<and>\n                    distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n                   (\\<lambda>xs.\n                       {ys.\n                        length ys = n - k \\<and>\n                        distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                       (\\<lambda>ys. {zs. interleavings xs ys zs})))", "from this"], ["proof (chain)\npicking this:\n  zs \\<in> {zs.\n            length zs = n \\<and>\n            distinct zs \\<and> set zs \\<subseteq> X \\<union> Y}", "have \"length zs = n\" and \"distinct zs\" and \"set zs \\<subseteq> X \\<union> Y\""], ["proof (prove)\nusing this:\n  zs \\<in> {zs.\n            length zs = n \\<and>\n            distinct zs \\<and> set zs \\<subseteq> X \\<union> Y}\n\ngoal (1 subgoal):\n 1. length zs = n &&& distinct zs &&& set zs \\<subseteq> X \\<union> Y", "by auto"], ["proof (state)\nthis:\n  length zs = n\n  distinct zs\n  set zs \\<subseteq> X \\<union> Y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {zs.\n                length zs = n \\<and>\n                distinct zs \\<and>\n                set zs \\<subseteq> X \\<union> Y} \\<Longrightarrow>\n       x \\<in> {0..n} \\<bind>\n               (\\<lambda>k.\n                   {xs.\n                    length xs = k \\<and>\n                    distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n                   (\\<lambda>xs.\n                       {ys.\n                        length ys = n - k \\<and>\n                        distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                       (\\<lambda>ys. {zs. interleavings xs ys zs})))", "define xs where \"xs = filter (\\<lambda>z. z \\<in> X) zs\""], ["proof (state)\nthis:\n  xs = filter (\\<lambda>z. z \\<in> X) zs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {zs.\n                length zs = n \\<and>\n                distinct zs \\<and>\n                set zs \\<subseteq> X \\<union> Y} \\<Longrightarrow>\n       x \\<in> {0..n} \\<bind>\n               (\\<lambda>k.\n                   {xs.\n                    length xs = k \\<and>\n                    distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n                   (\\<lambda>xs.\n                       {ys.\n                        length ys = n - k \\<and>\n                        distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                       (\\<lambda>ys. {zs. interleavings xs ys zs})))", "define ys where \"ys = filter (\\<lambda>z. z \\<in> Y) zs\""], ["proof (state)\nthis:\n  ys = filter (\\<lambda>z. z \\<in> Y) zs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {zs.\n                length zs = n \\<and>\n                distinct zs \\<and>\n                set zs \\<subseteq> X \\<union> Y} \\<Longrightarrow>\n       x \\<in> {0..n} \\<bind>\n               (\\<lambda>k.\n                   {xs.\n                    length xs = k \\<and>\n                    distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n                   (\\<lambda>xs.\n                       {ys.\n                        length ys = n - k \\<and>\n                        distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                       (\\<lambda>ys. {zs. interleavings xs ys zs})))", "have eq: \"[z\\<leftarrow>zs . z \\<in> Y] = [z\\<leftarrow>zs . z \\<notin> X]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>z. z \\<in> Y) zs = filter (\\<lambda>z. z \\<notin> X) zs", "using \\<open>set zs \\<subseteq> X \\<union> Y\\<close> \\<open>X \\<inter> Y = {}\\<close>"], ["proof (prove)\nusing this:\n  set zs \\<subseteq> X \\<union> Y\n  X \\<inter> Y = {}\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>z. z \\<in> Y) zs = filter (\\<lambda>z. z \\<notin> X) zs", "by (auto intro: filter_cong)"], ["proof (state)\nthis:\n  filter (\\<lambda>z. z \\<in> Y) zs = filter (\\<lambda>z. z \\<notin> X) zs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {zs.\n                length zs = n \\<and>\n                distinct zs \\<and>\n                set zs \\<subseteq> X \\<union> Y} \\<Longrightarrow>\n       x \\<in> {0..n} \\<bind>\n               (\\<lambda>k.\n                   {xs.\n                    length xs = k \\<and>\n                    distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n                   (\\<lambda>xs.\n                       {ys.\n                        length ys = n - k \\<and>\n                        distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                       (\\<lambda>ys. {zs. interleavings xs ys zs})))", "have \"length xs \\<le> n \\<and> distinct xs \\<and> set xs \\<subseteq> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs \\<le> n \\<and> distinct xs \\<and> set xs \\<subseteq> X", "using \\<open>length zs = n\\<close> \\<open>distinct zs\\<close>"], ["proof (prove)\nusing this:\n  length zs = n\n  distinct zs\n\ngoal (1 subgoal):\n 1. length xs \\<le> n \\<and> distinct xs \\<and> set xs \\<subseteq> X", "unfolding xs_def"], ["proof (prove)\nusing this:\n  length zs = n\n  distinct zs\n\ngoal (1 subgoal):\n 1. length (filter (\\<lambda>z. z \\<in> X) zs) \\<le> n \\<and>\n    distinct (filter (\\<lambda>z. z \\<in> X) zs) \\<and>\n    set (filter (\\<lambda>z. z \\<in> X) zs) \\<subseteq> X", "by auto"], ["proof (state)\nthis:\n  length xs \\<le> n \\<and> distinct xs \\<and> set xs \\<subseteq> X\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {zs.\n                length zs = n \\<and>\n                distinct zs \\<and>\n                set zs \\<subseteq> X \\<union> Y} \\<Longrightarrow>\n       x \\<in> {0..n} \\<bind>\n               (\\<lambda>k.\n                   {xs.\n                    length xs = k \\<and>\n                    distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n                   (\\<lambda>xs.\n                       {ys.\n                        length ys = n - k \\<and>\n                        distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                       (\\<lambda>ys. {zs. interleavings xs ys zs})))", "moreover"], ["proof (state)\nthis:\n  length xs \\<le> n \\<and> distinct xs \\<and> set xs \\<subseteq> X\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {zs.\n                length zs = n \\<and>\n                distinct zs \\<and>\n                set zs \\<subseteq> X \\<union> Y} \\<Longrightarrow>\n       x \\<in> {0..n} \\<bind>\n               (\\<lambda>k.\n                   {xs.\n                    length xs = k \\<and>\n                    distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n                   (\\<lambda>xs.\n                       {ys.\n                        length ys = n - k \\<and>\n                        distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                       (\\<lambda>ys. {zs. interleavings xs ys zs})))", "have \"length ys = n - length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ys = n - length xs", "using \\<open>set zs \\<subseteq> X \\<union> Y\\<close> \\<open>length zs = n\\<close>"], ["proof (prove)\nusing this:\n  set zs \\<subseteq> X \\<union> Y\n  length zs = n\n\ngoal (1 subgoal):\n 1. length ys = n - length xs", "unfolding xs_def ys_def eq"], ["proof (prove)\nusing this:\n  set zs \\<subseteq> X \\<union> Y\n  length zs = n\n\ngoal (1 subgoal):\n 1. length (filter (\\<lambda>z. z \\<notin> X) zs) =\n    n - length (filter (\\<lambda>z. z \\<in> X) zs)", "by (metis diff_add_inverse sum_length_filter_compl)"], ["proof (state)\nthis:\n  length ys = n - length xs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {zs.\n                length zs = n \\<and>\n                distinct zs \\<and>\n                set zs \\<subseteq> X \\<union> Y} \\<Longrightarrow>\n       x \\<in> {0..n} \\<bind>\n               (\\<lambda>k.\n                   {xs.\n                    length xs = k \\<and>\n                    distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n                   (\\<lambda>xs.\n                       {ys.\n                        length ys = n - k \\<and>\n                        distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                       (\\<lambda>ys. {zs. interleavings xs ys zs})))", "moreover"], ["proof (state)\nthis:\n  length ys = n - length xs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {zs.\n                length zs = n \\<and>\n                distinct zs \\<and>\n                set zs \\<subseteq> X \\<union> Y} \\<Longrightarrow>\n       x \\<in> {0..n} \\<bind>\n               (\\<lambda>k.\n                   {xs.\n                    length xs = k \\<and>\n                    distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n                   (\\<lambda>xs.\n                       {ys.\n                        length ys = n - k \\<and>\n                        distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                       (\\<lambda>ys. {zs. interleavings xs ys zs})))", "have \"distinct ys \\<and> set ys \\<subseteq> Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct ys \\<and> set ys \\<subseteq> Y", "using \\<open>distinct zs\\<close>"], ["proof (prove)\nusing this:\n  distinct zs\n\ngoal (1 subgoal):\n 1. distinct ys \\<and> set ys \\<subseteq> Y", "unfolding ys_def"], ["proof (prove)\nusing this:\n  distinct zs\n\ngoal (1 subgoal):\n 1. distinct (filter (\\<lambda>z. z \\<in> Y) zs) \\<and>\n    set (filter (\\<lambda>z. z \\<in> Y) zs) \\<subseteq> Y", "by auto"], ["proof (state)\nthis:\n  distinct ys \\<and> set ys \\<subseteq> Y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {zs.\n                length zs = n \\<and>\n                distinct zs \\<and>\n                set zs \\<subseteq> X \\<union> Y} \\<Longrightarrow>\n       x \\<in> {0..n} \\<bind>\n               (\\<lambda>k.\n                   {xs.\n                    length xs = k \\<and>\n                    distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n                   (\\<lambda>xs.\n                       {ys.\n                        length ys = n - k \\<and>\n                        distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                       (\\<lambda>ys. {zs. interleavings xs ys zs})))", "moreover"], ["proof (state)\nthis:\n  distinct ys \\<and> set ys \\<subseteq> Y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {zs.\n                length zs = n \\<and>\n                distinct zs \\<and>\n                set zs \\<subseteq> X \\<union> Y} \\<Longrightarrow>\n       x \\<in> {0..n} \\<bind>\n               (\\<lambda>k.\n                   {xs.\n                    length xs = k \\<and>\n                    distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n                   (\\<lambda>xs.\n                       {ys.\n                        length ys = n - k \\<and>\n                        distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                       (\\<lambda>ys. {zs. interleavings xs ys zs})))", "have \"interleavings xs ys zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interleavings xs ys zs", "using xs_def ys_def \\<open>X \\<inter> Y = {}\\<close> \\<open>set zs \\<subseteq> X \\<union> Y\\<close>"], ["proof (prove)\nusing this:\n  xs = filter (\\<lambda>z. z \\<in> X) zs\n  ys = filter (\\<lambda>z. z \\<in> Y) zs\n  X \\<inter> Y = {}\n  set zs \\<subseteq> X \\<union> Y\n\ngoal (1 subgoal):\n 1. interleavings xs ys zs", "by (simp add: interleavings_filter)"], ["proof (state)\nthis:\n  interleavings xs ys zs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {zs.\n                length zs = n \\<and>\n                distinct zs \\<and>\n                set zs \\<subseteq> X \\<union> Y} \\<Longrightarrow>\n       x \\<in> {0..n} \\<bind>\n               (\\<lambda>k.\n                   {xs.\n                    length xs = k \\<and>\n                    distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n                   (\\<lambda>xs.\n                       {ys.\n                        length ys = n - k \\<and>\n                        distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                       (\\<lambda>ys. {zs. interleavings xs ys zs})))", "ultimately"], ["proof (chain)\npicking this:\n  length xs \\<le> n \\<and> distinct xs \\<and> set xs \\<subseteq> X\n  length ys = n - length xs\n  distinct ys \\<and> set ys \\<subseteq> Y\n  interleavings xs ys zs", "show \"zs \\<in> ?expr\""], ["proof (prove)\nusing this:\n  length xs \\<le> n \\<and> distinct xs \\<and> set xs \\<subseteq> X\n  length ys = n - length xs\n  distinct ys \\<and> set ys \\<subseteq> Y\n  interleavings xs ys zs\n\ngoal (1 subgoal):\n 1. zs \\<in> {0..n} \\<bind>\n             (\\<lambda>k.\n                 {xs.\n                  length xs = k \\<and>\n                  distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n                 (\\<lambda>xs.\n                     {ys.\n                      length ys = n - k \\<and>\n                      distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                     (\\<lambda>ys. {zs. interleavings xs ys zs})))", "by force"], ["proof (state)\nthis:\n  zs \\<in> {0..n} \\<bind>\n           (\\<lambda>k.\n               {xs.\n                length xs = k \\<and>\n                distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n               (\\<lambda>xs.\n                   {ys.\n                    length ys = n - k \\<and>\n                    distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                   (\\<lambda>ys. {zs. interleavings xs ys zs})))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {zs.\n   length zs = n \\<and> distinct zs \\<and> set zs \\<subseteq> X \\<union> Y}\n  \\<subseteq> {0..n} \\<bind>\n              (\\<lambda>k.\n                  {xs.\n                   length xs = k \\<and>\n                   distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n                  (\\<lambda>xs.\n                      {ys.\n                       length ys = n - k \\<and>\n                       distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                      (\\<lambda>ys. {zs. interleavings xs ys zs})))\n\ngoal (1 subgoal):\n 1. {0..n} \\<bind>\n    (\\<lambda>k.\n        {xs.\n         length xs = k \\<and>\n         distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n        (\\<lambda>xs.\n            {ys.\n             length ys = n - k \\<and>\n             distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n            (\\<lambda>ys. {zs. interleavings xs ys zs})))\n    \\<subseteq> {zs.\n                 length zs = n \\<and>\n                 distinct zs \\<and> set zs \\<subseteq> X \\<union> Y}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. {0..n} \\<bind>\n    (\\<lambda>k.\n        {xs.\n         length xs = k \\<and>\n         distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n        (\\<lambda>xs.\n            {ys.\n             length ys = n - k \\<and>\n             distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n            (\\<lambda>ys. {zs. interleavings xs ys zs})))\n    \\<subseteq> {zs.\n                 length zs = n \\<and>\n                 distinct zs \\<and> set zs \\<subseteq> X \\<union> Y}", "show \"?expr \\<subseteq> ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..n} \\<bind>\n    (\\<lambda>k.\n        {xs.\n         length xs = k \\<and>\n         distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n        (\\<lambda>xs.\n            {ys.\n             length ys = n - k \\<and>\n             distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n            (\\<lambda>ys. {zs. interleavings xs ys zs})))\n    \\<subseteq> {zs.\n                 length zs = n \\<and>\n                 distinct zs \\<and> set zs \\<subseteq> X \\<union> Y}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..n} \\<bind>\n               (\\<lambda>k.\n                   {xs.\n                    length xs = k \\<and>\n                    distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n                   (\\<lambda>xs.\n                       {ys.\n                        length ys = n - k \\<and>\n                        distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                       (\\<lambda>ys.\n                           {zs. interleavings xs ys zs}))) \\<Longrightarrow>\n       x \\<in> {zs.\n                length zs = n \\<and>\n                distinct zs \\<and> set zs \\<subseteq> X \\<union> Y}", "fix zs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..n} \\<bind>\n               (\\<lambda>k.\n                   {xs.\n                    length xs = k \\<and>\n                    distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n                   (\\<lambda>xs.\n                       {ys.\n                        length ys = n - k \\<and>\n                        distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                       (\\<lambda>ys.\n                           {zs. interleavings xs ys zs}))) \\<Longrightarrow>\n       x \\<in> {zs.\n                length zs = n \\<and>\n                distinct zs \\<and> set zs \\<subseteq> X \\<union> Y}", "assume \"zs \\<in> ?expr\""], ["proof (state)\nthis:\n  zs \\<in> {0..n} \\<bind>\n           (\\<lambda>k.\n               {xs.\n                length xs = k \\<and>\n                distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n               (\\<lambda>xs.\n                   {ys.\n                    length ys = n - k \\<and>\n                    distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                   (\\<lambda>ys. {zs. interleavings xs ys zs})))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..n} \\<bind>\n               (\\<lambda>k.\n                   {xs.\n                    length xs = k \\<and>\n                    distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n                   (\\<lambda>xs.\n                       {ys.\n                        length ys = n - k \\<and>\n                        distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                       (\\<lambda>ys.\n                           {zs. interleavings xs ys zs}))) \\<Longrightarrow>\n       x \\<in> {zs.\n                length zs = n \\<and>\n                distinct zs \\<and> set zs \\<subseteq> X \\<union> Y}", "from this"], ["proof (chain)\npicking this:\n  zs \\<in> {0..n} \\<bind>\n           (\\<lambda>k.\n               {xs.\n                length xs = k \\<and>\n                distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n               (\\<lambda>xs.\n                   {ys.\n                    length ys = n - k \\<and>\n                    distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                   (\\<lambda>ys. {zs. interleavings xs ys zs})))", "obtain xs ys where \"length xs \\<le> n\" \"distinct xs\" \"set xs \\<subseteq> X\"\n      and \"length ys = n - length xs\" \"distinct ys\" \"set ys \\<subseteq> Y\" \"interleavings xs ys zs\""], ["proof (prove)\nusing this:\n  zs \\<in> {0..n} \\<bind>\n           (\\<lambda>k.\n               {xs.\n                length xs = k \\<and>\n                distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n               (\\<lambda>xs.\n                   {ys.\n                    length ys = n - k \\<and>\n                    distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                   (\\<lambda>ys. {zs. interleavings xs ys zs})))\n\ngoal (1 subgoal):\n 1. (\\<And>xs ys.\n        \\<lbrakk>length xs \\<le> n; distinct xs; set xs \\<subseteq> X;\n         length ys = n - length xs; distinct ys; set ys \\<subseteq> Y;\n         interleavings xs ys zs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  length xs \\<le> n\n  distinct xs\n  set xs \\<subseteq> X\n  length ys = n - length xs\n  distinct ys\n  set ys \\<subseteq> Y\n  interleavings xs ys zs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..n} \\<bind>\n               (\\<lambda>k.\n                   {xs.\n                    length xs = k \\<and>\n                    distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n                   (\\<lambda>xs.\n                       {ys.\n                        length ys = n - k \\<and>\n                        distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                       (\\<lambda>ys.\n                           {zs. interleavings xs ys zs}))) \\<Longrightarrow>\n       x \\<in> {zs.\n                length zs = n \\<and>\n                distinct zs \\<and> set zs \\<subseteq> X \\<union> Y}", "have \"length zs = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length zs = n", "using \\<open>length xs \\<le> n\\<close> \\<open>length ys = n - length xs\\<close> \\<open>interleavings xs ys zs\\<close>"], ["proof (prove)\nusing this:\n  length xs \\<le> n\n  length ys = n - length xs\n  interleavings xs ys zs\n\ngoal (1 subgoal):\n 1. length zs = n", "using interleavings_length"], ["proof (prove)\nusing this:\n  length xs \\<le> n\n  length ys = n - length xs\n  interleavings xs ys zs\n  interleavings ?xs ?ys ?zs \\<Longrightarrow>\n  length ?xs + length ?ys = length ?zs\n\ngoal (1 subgoal):\n 1. length zs = n", "by force"], ["proof (state)\nthis:\n  length zs = n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..n} \\<bind>\n               (\\<lambda>k.\n                   {xs.\n                    length xs = k \\<and>\n                    distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n                   (\\<lambda>xs.\n                       {ys.\n                        length ys = n - k \\<and>\n                        distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                       (\\<lambda>ys.\n                           {zs. interleavings xs ys zs}))) \\<Longrightarrow>\n       x \\<in> {zs.\n                length zs = n \\<and>\n                distinct zs \\<and> set zs \\<subseteq> X \\<union> Y}", "moreover"], ["proof (state)\nthis:\n  length zs = n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..n} \\<bind>\n               (\\<lambda>k.\n                   {xs.\n                    length xs = k \\<and>\n                    distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n                   (\\<lambda>xs.\n                       {ys.\n                        length ys = n - k \\<and>\n                        distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                       (\\<lambda>ys.\n                           {zs. interleavings xs ys zs}))) \\<Longrightarrow>\n       x \\<in> {zs.\n                length zs = n \\<and>\n                distinct zs \\<and> set zs \\<subseteq> X \\<union> Y}", "have \"distinct zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct zs", "using \\<open>distinct xs\\<close> \\<open>distinct ys\\<close> \\<open>interleavings xs ys zs\\<close> \\<open>set xs \\<subseteq> X\\<close> \\<open>set ys \\<subseteq> Y\\<close>"], ["proof (prove)\nusing this:\n  distinct xs\n  distinct ys\n  interleavings xs ys zs\n  set xs \\<subseteq> X\n  set ys \\<subseteq> Y\n\ngoal (1 subgoal):\n 1. distinct zs", "using \\<open>X \\<inter> Y = {}\\<close> interleavings_distinct"], ["proof (prove)\nusing this:\n  distinct xs\n  distinct ys\n  interleavings xs ys zs\n  set xs \\<subseteq> X\n  set ys \\<subseteq> Y\n  X \\<inter> Y = {}\n  interleavings ?xs ?ys ?zs \\<Longrightarrow>\n  (distinct ?xs \\<and> distinct ?ys \\<and> set ?xs \\<inter> set ?ys = {}) =\n  distinct ?zs\n\ngoal (1 subgoal):\n 1. distinct zs", "by fastforce"], ["proof (state)\nthis:\n  distinct zs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..n} \\<bind>\n               (\\<lambda>k.\n                   {xs.\n                    length xs = k \\<and>\n                    distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n                   (\\<lambda>xs.\n                       {ys.\n                        length ys = n - k \\<and>\n                        distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                       (\\<lambda>ys.\n                           {zs. interleavings xs ys zs}))) \\<Longrightarrow>\n       x \\<in> {zs.\n                length zs = n \\<and>\n                distinct zs \\<and> set zs \\<subseteq> X \\<union> Y}", "moreover"], ["proof (state)\nthis:\n  distinct zs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..n} \\<bind>\n               (\\<lambda>k.\n                   {xs.\n                    length xs = k \\<and>\n                    distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n                   (\\<lambda>xs.\n                       {ys.\n                        length ys = n - k \\<and>\n                        distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                       (\\<lambda>ys.\n                           {zs. interleavings xs ys zs}))) \\<Longrightarrow>\n       x \\<in> {zs.\n                length zs = n \\<and>\n                distinct zs \\<and> set zs \\<subseteq> X \\<union> Y}", "have \"set zs \\<subseteq> X \\<union> Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set zs \\<subseteq> X \\<union> Y", "using \\<open>interleavings xs ys zs\\<close> \\<open>set xs \\<subseteq> X\\<close> \\<open>set ys \\<subseteq> Y\\<close> interleavings_set"], ["proof (prove)\nusing this:\n  interleavings xs ys zs\n  set xs \\<subseteq> X\n  set ys \\<subseteq> Y\n  interleavings ?xs ?ys ?zs \\<Longrightarrow>\n  set ?xs \\<union> set ?ys = set ?zs\n\ngoal (1 subgoal):\n 1. set zs \\<subseteq> X \\<union> Y", "by blast"], ["proof (state)\nthis:\n  set zs \\<subseteq> X \\<union> Y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..n} \\<bind>\n               (\\<lambda>k.\n                   {xs.\n                    length xs = k \\<and>\n                    distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n                   (\\<lambda>xs.\n                       {ys.\n                        length ys = n - k \\<and>\n                        distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n                       (\\<lambda>ys.\n                           {zs. interleavings xs ys zs}))) \\<Longrightarrow>\n       x \\<in> {zs.\n                length zs = n \\<and>\n                distinct zs \\<and> set zs \\<subseteq> X \\<union> Y}", "ultimately"], ["proof (chain)\npicking this:\n  length zs = n\n  distinct zs\n  set zs \\<subseteq> X \\<union> Y", "show \"zs \\<in> ?S\""], ["proof (prove)\nusing this:\n  length zs = n\n  distinct zs\n  set zs \\<subseteq> X \\<union> Y\n\ngoal (1 subgoal):\n 1. zs \\<in> {zs.\n              length zs = n \\<and>\n              distinct zs \\<and> set zs \\<subseteq> X \\<union> Y}", "by blast"], ["proof (state)\nthis:\n  zs \\<in> {zs.\n            length zs = n \\<and>\n            distinct zs \\<and> set zs \\<subseteq> X \\<union> Y}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {0..n} \\<bind>\n  (\\<lambda>k.\n      {xs.\n       length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n      (\\<lambda>xs.\n          {ys.\n           length ys = n - k \\<and>\n           distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n          (\\<lambda>ys. {zs. interleavings xs ys zs})))\n  \\<subseteq> {zs.\n               length zs = n \\<and>\n               distinct zs \\<and> set zs \\<subseteq> X \\<union> Y}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma interleavings_inject:\n  assumes \"(set xs \\<union> set xs') \\<inter> (set ys \\<union> set ys') = {}\"\n  assumes \"interleavings xs ys zs\" \"interleavings xs' ys' zs'\"\n  assumes \"zs = zs'\"\n  shows \"xs = xs'\" and \"ys = ys'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = xs' &&& ys = ys'", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. xs = xs'\n 2. ys = ys'", "have \"xs = filter (\\<lambda>z. z \\<in> set xs \\<union> set xs') zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = filter (\\<lambda>z. z \\<in> set xs \\<union> set xs') zs", "using \\<open>(set xs \\<union> set xs') \\<inter> (set ys \\<union> set ys') = {}\\<close> \\<open>interleavings xs ys zs\\<close>"], ["proof (prove)\nusing this:\n  (set xs \\<union> set xs') \\<inter> (set ys \\<union> set ys') = {}\n  interleavings xs ys zs\n\ngoal (1 subgoal):\n 1. xs = filter (\\<lambda>z. z \\<in> set xs \\<union> set xs') zs", "by (auto intro: interleavings_filter_eq1[symmetric])"], ["proof (state)\nthis:\n  xs = filter (\\<lambda>z. z \\<in> set xs \\<union> set xs') zs\n\ngoal (2 subgoals):\n 1. xs = xs'\n 2. ys = ys'", "also"], ["proof (state)\nthis:\n  xs = filter (\\<lambda>z. z \\<in> set xs \\<union> set xs') zs\n\ngoal (2 subgoals):\n 1. xs = xs'\n 2. ys = ys'", "have \"\\<dots> = filter (\\<lambda>z. z \\<in> set xs \\<union> set xs') zs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>z. z \\<in> set xs \\<union> set xs') zs =\n    filter (\\<lambda>z. z \\<in> set xs \\<union> set xs') zs'", "using \\<open>zs = zs'\\<close>"], ["proof (prove)\nusing this:\n  zs = zs'\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>z. z \\<in> set xs \\<union> set xs') zs =\n    filter (\\<lambda>z. z \\<in> set xs \\<union> set xs') zs'", "by simp"], ["proof (state)\nthis:\n  filter (\\<lambda>z. z \\<in> set xs \\<union> set xs') zs =\n  filter (\\<lambda>z. z \\<in> set xs \\<union> set xs') zs'\n\ngoal (2 subgoals):\n 1. xs = xs'\n 2. ys = ys'", "also"], ["proof (state)\nthis:\n  filter (\\<lambda>z. z \\<in> set xs \\<union> set xs') zs =\n  filter (\\<lambda>z. z \\<in> set xs \\<union> set xs') zs'\n\ngoal (2 subgoals):\n 1. xs = xs'\n 2. ys = ys'", "have \"\\<dots> = xs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>z. z \\<in> set xs \\<union> set xs') zs' = xs'", "using \\<open>(set xs \\<union> set xs') \\<inter> (set ys \\<union> set ys') = {}\\<close> \\<open>interleavings xs' ys' zs'\\<close>"], ["proof (prove)\nusing this:\n  (set xs \\<union> set xs') \\<inter> (set ys \\<union> set ys') = {}\n  interleavings xs' ys' zs'\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>z. z \\<in> set xs \\<union> set xs') zs' = xs'", "by (auto intro: interleavings_filter_eq1)"], ["proof (state)\nthis:\n  filter (\\<lambda>z. z \\<in> set xs \\<union> set xs') zs' = xs'\n\ngoal (2 subgoals):\n 1. xs = xs'\n 2. ys = ys'", "finally"], ["proof (chain)\npicking this:\n  xs = xs'", "show \"xs = xs'\""], ["proof (prove)\nusing this:\n  xs = xs'\n\ngoal (1 subgoal):\n 1. xs = xs'", "by simp"], ["proof (state)\nthis:\n  xs = xs'\n\ngoal (1 subgoal):\n 1. ys = ys'", "have \"ys = filter (\\<lambda>z. z \\<in> set ys \\<union> set ys') zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ys = filter (\\<lambda>z. z \\<in> set ys \\<union> set ys') zs", "using \\<open>(set xs \\<union> set xs') \\<inter> (set ys \\<union> set ys') = {}\\<close> \\<open>interleavings xs ys zs\\<close>"], ["proof (prove)\nusing this:\n  (set xs \\<union> set xs') \\<inter> (set ys \\<union> set ys') = {}\n  interleavings xs ys zs\n\ngoal (1 subgoal):\n 1. ys = filter (\\<lambda>z. z \\<in> set ys \\<union> set ys') zs", "by (auto intro: interleavings_filter_eq2[symmetric])"], ["proof (state)\nthis:\n  ys = filter (\\<lambda>z. z \\<in> set ys \\<union> set ys') zs\n\ngoal (1 subgoal):\n 1. ys = ys'", "also"], ["proof (state)\nthis:\n  ys = filter (\\<lambda>z. z \\<in> set ys \\<union> set ys') zs\n\ngoal (1 subgoal):\n 1. ys = ys'", "have \"\\<dots> = filter (\\<lambda>z. z \\<in> set ys \\<union> set ys') zs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>z. z \\<in> set ys \\<union> set ys') zs =\n    filter (\\<lambda>z. z \\<in> set ys \\<union> set ys') zs'", "using \\<open>zs = zs'\\<close>"], ["proof (prove)\nusing this:\n  zs = zs'\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>z. z \\<in> set ys \\<union> set ys') zs =\n    filter (\\<lambda>z. z \\<in> set ys \\<union> set ys') zs'", "by simp"], ["proof (state)\nthis:\n  filter (\\<lambda>z. z \\<in> set ys \\<union> set ys') zs =\n  filter (\\<lambda>z. z \\<in> set ys \\<union> set ys') zs'\n\ngoal (1 subgoal):\n 1. ys = ys'", "also"], ["proof (state)\nthis:\n  filter (\\<lambda>z. z \\<in> set ys \\<union> set ys') zs =\n  filter (\\<lambda>z. z \\<in> set ys \\<union> set ys') zs'\n\ngoal (1 subgoal):\n 1. ys = ys'", "have \"\\<dots> = ys'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>z. z \\<in> set ys \\<union> set ys') zs' = ys'", "using \\<open>(set xs \\<union> set xs') \\<inter> (set ys \\<union> set ys') = {}\\<close> \\<open>interleavings xs' ys' zs'\\<close>"], ["proof (prove)\nusing this:\n  (set xs \\<union> set xs') \\<inter> (set ys \\<union> set ys') = {}\n  interleavings xs' ys' zs'\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>z. z \\<in> set ys \\<union> set ys') zs' = ys'", "by (auto intro: interleavings_filter_eq2)"], ["proof (state)\nthis:\n  filter (\\<lambda>z. z \\<in> set ys \\<union> set ys') zs' = ys'\n\ngoal (1 subgoal):\n 1. ys = ys'", "finally"], ["proof (chain)\npicking this:\n  ys = ys'", "show \"ys = ys'\""], ["proof (prove)\nusing this:\n  ys = ys'\n\ngoal (1 subgoal):\n 1. ys = ys'", "."], ["proof (state)\nthis:\n  ys = ys'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma injectivity:\n  assumes \"X \\<inter> Y = {}\"\n  assumes \"k \\<in> {0..n} \\<and> k' \\<in> {0..n}\"\n  assumes \"(length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X) \\<and> (length xs' = k' \\<and> distinct xs' \\<and> set xs' \\<subseteq> X)\"\n  assumes \"(length ys = n - k \\<and> distinct ys \\<and> set ys \\<subseteq> Y) \\<and> (length ys' = n - k' \\<and> distinct ys' \\<and> set ys' \\<subseteq> Y)\"\n  assumes \"interleavings xs ys zs \\<and> interleavings xs' ys' zs'\"\n  assumes \"zs = zs'\"\n  shows \"k = k'\" and \"xs = xs'\" and \"ys = ys'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k = k' &&& xs = xs' &&& ys = ys'", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. k = k'\n 2. xs = xs'\n 3. ys = ys'", "from assms(1,3,4)"], ["proof (chain)\npicking this:\n  X \\<inter> Y = {}\n  (length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X) \\<and>\n  length xs' = k' \\<and> distinct xs' \\<and> set xs' \\<subseteq> X\n  (length ys = n - k \\<and> distinct ys \\<and> set ys \\<subseteq> Y) \\<and>\n  length ys' = n - k' \\<and> distinct ys' \\<and> set ys' \\<subseteq> Y", "have \"(set xs \\<union> set xs') \\<inter> (set ys \\<union> set ys') = {}\""], ["proof (prove)\nusing this:\n  X \\<inter> Y = {}\n  (length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X) \\<and>\n  length xs' = k' \\<and> distinct xs' \\<and> set xs' \\<subseteq> X\n  (length ys = n - k \\<and> distinct ys \\<and> set ys \\<subseteq> Y) \\<and>\n  length ys' = n - k' \\<and> distinct ys' \\<and> set ys' \\<subseteq> Y\n\ngoal (1 subgoal):\n 1. (set xs \\<union> set xs') \\<inter> (set ys \\<union> set ys') = {}", "by blast"], ["proof (state)\nthis:\n  (set xs \\<union> set xs') \\<inter> (set ys \\<union> set ys') = {}\n\ngoal (3 subgoals):\n 1. k = k'\n 2. xs = xs'\n 3. ys = ys'", "from this assms(5) \\<open>zs = zs'\\<close>"], ["proof (chain)\npicking this:\n  (set xs \\<union> set xs') \\<inter> (set ys \\<union> set ys') = {}\n  interleavings xs ys zs \\<and> interleavings xs' ys' zs'\n  zs = zs'", "show \"xs = xs'\" and \"ys = ys'\""], ["proof (prove)\nusing this:\n  (set xs \\<union> set xs') \\<inter> (set ys \\<union> set ys') = {}\n  interleavings xs ys zs \\<and> interleavings xs' ys' zs'\n  zs = zs'\n\ngoal (1 subgoal):\n 1. xs = xs' &&& ys = ys'", "using interleavings_inject"], ["proof (prove)\nusing this:\n  (set xs \\<union> set xs') \\<inter> (set ys \\<union> set ys') = {}\n  interleavings xs ys zs \\<and> interleavings xs' ys' zs'\n  zs = zs'\n  \\<lbrakk>(set ?xs \\<union> set ?xs') \\<inter>\n           (set ?ys \\<union> set ?ys') =\n           {};\n   interleavings ?xs ?ys ?zs; interleavings ?xs' ?ys' ?zs';\n   ?zs = ?zs'\\<rbrakk>\n  \\<Longrightarrow> ?xs = ?xs'\n  \\<lbrakk>(set ?xs \\<union> set ?xs') \\<inter>\n           (set ?ys \\<union> set ?ys') =\n           {};\n   interleavings ?xs ?ys ?zs; interleavings ?xs' ?ys' ?zs';\n   ?zs = ?zs'\\<rbrakk>\n  \\<Longrightarrow> ?ys = ?ys'\n\ngoal (1 subgoal):\n 1. xs = xs' &&& ys = ys'", "by fastforce+"], ["proof (state)\nthis:\n  xs = xs'\n  ys = ys'\n\ngoal (1 subgoal):\n 1. k = k'", "from this assms(3)"], ["proof (chain)\npicking this:\n  xs = xs'\n  ys = ys'\n  (length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X) \\<and>\n  length xs' = k' \\<and> distinct xs' \\<and> set xs' \\<subseteq> X", "show \"k = k'\""], ["proof (prove)\nusing this:\n  xs = xs'\n  ys = ys'\n  (length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X) \\<and>\n  length xs' = k' \\<and> distinct xs' \\<and> set xs' \\<subseteq> X\n\ngoal (1 subgoal):\n 1. k = k'", "by auto"], ["proof (state)\nthis:\n  k = k'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_lists_distinct_length_eq_union:\n  assumes \"finite X\" \"finite Y\" \"X \\<inter> Y = {}\"\n  shows \"card {zs. length zs = n \\<and> distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k=0..n. (n choose k) * ffact k (card X) * ffact (n - k) (card Y))\"\n  (is \"card ?S = _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "let ?expr = \"do {\n    k \\<leftarrow> {0..n};\n    xs \\<leftarrow> {xs. length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X};\n    ys \\<leftarrow> {ys. length ys = n - k \\<and> distinct ys \\<and> set ys \\<subseteq> Y};\n    {zs. interleavings xs ys zs}\n  }\""], ["proof (state)\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "from \\<open>X \\<inter> Y = {}\\<close>"], ["proof (chain)\npicking this:\n  X \\<inter> Y = {}", "have \"card ?S = card ?expr\""], ["proof (prove)\nusing this:\n  X \\<inter> Y = {}\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    card\n     ({0..n} \\<bind>\n      (\\<lambda>k.\n          {xs.\n           length xs = k \\<and>\n           distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n          (\\<lambda>xs.\n              {ys.\n               length ys = n - k \\<and>\n               distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n              (\\<lambda>ys. {zs. interleavings xs ys zs}))))", "by (simp add: lists_distinct_union_by_interleavings)"], ["proof (state)\nthis:\n  card\n   {zs.\n    length zs = n \\<and>\n    distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n  card\n   ({0..n} \\<bind>\n    (\\<lambda>k.\n        {xs.\n         length xs = k \\<and>\n         distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n        (\\<lambda>xs.\n            {ys.\n             length ys = n - k \\<and>\n             distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n            (\\<lambda>ys. {zs. interleavings xs ys zs}))))\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "let \"?S \\<bind> ?comp\" = \"?expr\""], ["proof (state)\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "assume \"k \\<in> ?S\""], ["proof (state)\nthis:\n  k \\<in> {0..n}\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "let \"?expr\" = \"?comp k\""], ["proof (state)\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "let \"?S \\<bind> ?comp\" = \"?expr\""], ["proof (state)\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "from \\<open>finite X\\<close>"], ["proof (chain)\npicking this:\n  finite X", "have \"finite ?S\""], ["proof (prove)\nusing this:\n  finite X\n\ngoal (1 subgoal):\n 1. finite\n     {xs. length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X}", "by auto"], ["proof (state)\nthis:\n  finite {xs. length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X}\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "moreover"], ["proof (state)\nthis:\n  finite {xs. length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X}\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "{"], ["proof (state)\nthis:\n  finite {xs. length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X}\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "assume xs: \"xs \\<in> ?S\""], ["proof (state)\nthis:\n  xs \\<in> {xs.\n            length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X}\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "let ?expr = \"?comp xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "let \"?S \\<bind> ?comp\" = ?expr"], ["proof (state)\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "from \\<open>finite Y\\<close>"], ["proof (chain)\npicking this:\n  finite Y", "have \"finite ?S\""], ["proof (prove)\nusing this:\n  finite Y\n\ngoal (1 subgoal):\n 1. finite\n     {ys. length ys = n - k \\<and> distinct ys \\<and> set ys \\<subseteq> Y}", "by auto"], ["proof (state)\nthis:\n  finite\n   {ys. length ys = n - k \\<and> distinct ys \\<and> set ys \\<subseteq> Y}\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "moreover"], ["proof (state)\nthis:\n  finite\n   {ys. length ys = n - k \\<and> distinct ys \\<and> set ys \\<subseteq> Y}\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "{"], ["proof (state)\nthis:\n  finite\n   {ys. length ys = n - k \\<and> distinct ys \\<and> set ys \\<subseteq> Y}\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "fix ys"], ["proof (state)\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "assume ys: \"ys \\<in> ?S\""], ["proof (state)\nthis:\n  ys \\<in> {ys.\n            length ys = n - k \\<and>\n            distinct ys \\<and> set ys \\<subseteq> Y}\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "let ?expr = \"?comp ys\""], ["proof (state)\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "have \"finite ?expr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {zs. interleavings xs ys zs}", "by (simp add: finite_interleavings)"], ["proof (state)\nthis:\n  finite {zs. interleavings xs ys zs}\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "moreover"], ["proof (state)\nthis:\n  finite {zs. interleavings xs ys zs}\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "have \"card ?expr = (n choose k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {zs. interleavings xs ys zs} = n choose k", "using xs ys \\<open>X \\<inter> Y = {}\\<close> \\<open>k \\<in> _\\<close>"], ["proof (prove)\nusing this:\n  xs \\<in> {xs.\n            length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X}\n  ys \\<in> {ys.\n            length ys = n - k \\<and>\n            distinct ys \\<and> set ys \\<subseteq> Y}\n  X \\<inter> Y = {}\n  k \\<in> {0..n}\n\ngoal (1 subgoal):\n 1. card {zs. interleavings xs ys zs} = n choose k", "by (subst card_interleavings) auto"], ["proof (state)\nthis:\n  card {zs. interleavings xs ys zs} = n choose k\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "ultimately"], ["proof (chain)\npicking this:\n  finite {zs. interleavings xs ys zs}\n  card {zs. interleavings xs ys zs} = n choose k", "have \"finite ?expr \\<and> card ?expr = (n choose k)\""], ["proof (prove)\nusing this:\n  finite {zs. interleavings xs ys zs}\n  card {zs. interleavings xs ys zs} = n choose k\n\ngoal (1 subgoal):\n 1. finite {zs. interleavings xs ys zs} \\<and>\n    card {zs. interleavings xs ys zs} = n choose k", ".."], ["proof (state)\nthis:\n  finite {zs. interleavings xs ys zs} \\<and>\n  card {zs. interleavings xs ys zs} = n choose k\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "}"], ["proof (state)\nthis:\n  ?ys2\n  \\<in> {ys.\n         length ys = n - k \\<and>\n         distinct ys \\<and> set ys \\<subseteq> Y} \\<Longrightarrow>\n  finite {zs. interleavings xs ?ys2 zs} \\<and>\n  card {zs. interleavings xs ?ys2 zs} = n choose k\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "moreover"], ["proof (state)\nthis:\n  ?ys2\n  \\<in> {ys.\n         length ys = n - k \\<and>\n         distinct ys \\<and> set ys \\<subseteq> Y} \\<Longrightarrow>\n  finite {zs. interleavings xs ?ys2 zs} \\<and>\n  card {zs. interleavings xs ?ys2 zs} = n choose k\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "have \"disjoint_family_on ?comp ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. disjoint_family_on (\\<lambda>ys. {zs. interleavings xs ys zs})\n     {ys. length ys = n - k \\<and> distinct ys \\<and> set ys \\<subseteq> Y}", "using \\<open>k \\<in> {0..n}\\<close> \\<open>xs \\<in> {xs. length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X}\\<close>"], ["proof (prove)\nusing this:\n  k \\<in> {0..n}\n  xs \\<in> {xs.\n            length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X}\n\ngoal (1 subgoal):\n 1. disjoint_family_on (\\<lambda>ys. {zs. interleavings xs ys zs})\n     {ys. length ys = n - k \\<and> distinct ys \\<and> set ys \\<subseteq> Y}", "by (injectivity_solver rule: injectivity(3)[OF \\<open>X \\<inter> Y = {}\\<close>])"], ["proof (state)\nthis:\n  disjoint_family_on (\\<lambda>ys. {zs. interleavings xs ys zs})\n   {ys. length ys = n - k \\<and> distinct ys \\<and> set ys \\<subseteq> Y}\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "moreover"], ["proof (state)\nthis:\n  disjoint_family_on (\\<lambda>ys. {zs. interleavings xs ys zs})\n   {ys. length ys = n - k \\<and> distinct ys \\<and> set ys \\<subseteq> Y}\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "have \"card ?S = ffact (n - k) (card Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     {ys.\n      length ys = n - k \\<and> distinct ys \\<and> set ys \\<subseteq> Y} =\n    ffact (n - k) (card Y)", "using \\<open>finite Y\\<close>"], ["proof (prove)\nusing this:\n  finite Y\n\ngoal (1 subgoal):\n 1. card\n     {ys.\n      length ys = n - k \\<and> distinct ys \\<and> set ys \\<subseteq> Y} =\n    ffact (n - k) (card Y)", "by (simp add: card_lists_distinct_length_eq)"], ["proof (state)\nthis:\n  card\n   {ys. length ys = n - k \\<and> distinct ys \\<and> set ys \\<subseteq> Y} =\n  ffact (n - k) (card Y)\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "ultimately"], ["proof (chain)\npicking this:\n  finite\n   {ys. length ys = n - k \\<and> distinct ys \\<and> set ys \\<subseteq> Y}\n  ?ys2\n  \\<in> {ys.\n         length ys = n - k \\<and>\n         distinct ys \\<and> set ys \\<subseteq> Y} \\<Longrightarrow>\n  finite {zs. interleavings xs ?ys2 zs} \\<and>\n  card {zs. interleavings xs ?ys2 zs} = n choose k\n  disjoint_family_on (\\<lambda>ys. {zs. interleavings xs ys zs})\n   {ys. length ys = n - k \\<and> distinct ys \\<and> set ys \\<subseteq> Y}\n  card\n   {ys. length ys = n - k \\<and> distinct ys \\<and> set ys \\<subseteq> Y} =\n  ffact (n - k) (card Y)", "have \"card ?expr = (n choose k) * ffact (n - k) (card Y)\""], ["proof (prove)\nusing this:\n  finite\n   {ys. length ys = n - k \\<and> distinct ys \\<and> set ys \\<subseteq> Y}\n  ?ys2\n  \\<in> {ys.\n         length ys = n - k \\<and>\n         distinct ys \\<and> set ys \\<subseteq> Y} \\<Longrightarrow>\n  finite {zs. interleavings xs ?ys2 zs} \\<and>\n  card {zs. interleavings xs ?ys2 zs} = n choose k\n  disjoint_family_on (\\<lambda>ys. {zs. interleavings xs ys zs})\n   {ys. length ys = n - k \\<and> distinct ys \\<and> set ys \\<subseteq> Y}\n  card\n   {ys. length ys = n - k \\<and> distinct ys \\<and> set ys \\<subseteq> Y} =\n  ffact (n - k) (card Y)\n\ngoal (1 subgoal):\n 1. card\n     ({ys.\n       length ys = n - k \\<and>\n       distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n      (\\<lambda>ys. {zs. interleavings xs ys zs})) =\n    (n choose k) * ffact (n - k) (card Y)", "by (subst card_bind_constant) auto"], ["proof (state)\nthis:\n  card\n   ({ys.\n     length ys = n - k \\<and>\n     distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n    (\\<lambda>ys. {zs. interleavings xs ys zs})) =\n  (n choose k) * ffact (n - k) (card Y)\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "moreover"], ["proof (state)\nthis:\n  card\n   ({ys.\n     length ys = n - k \\<and>\n     distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n    (\\<lambda>ys. {zs. interleavings xs ys zs})) =\n  (n choose k) * ffact (n - k) (card Y)\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "have \"finite ?expr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     ({ys.\n       length ys = n - k \\<and>\n       distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n      (\\<lambda>ys. {zs. interleavings xs ys zs}))", "using \\<open>finite ?S\\<close>"], ["proof (prove)\nusing this:\n  finite\n   {ys. length ys = n - k \\<and> distinct ys \\<and> set ys \\<subseteq> Y}\n\ngoal (1 subgoal):\n 1. finite\n     ({ys.\n       length ys = n - k \\<and>\n       distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n      (\\<lambda>ys. {zs. interleavings xs ys zs}))", "by (auto intro!: finite_bind finite_interleavings)"], ["proof (state)\nthis:\n  finite\n   ({ys.\n     length ys = n - k \\<and>\n     distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n    (\\<lambda>ys. {zs. interleavings xs ys zs}))\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "ultimately"], ["proof (chain)\npicking this:\n  card\n   ({ys.\n     length ys = n - k \\<and>\n     distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n    (\\<lambda>ys. {zs. interleavings xs ys zs})) =\n  (n choose k) * ffact (n - k) (card Y)\n  finite\n   ({ys.\n     length ys = n - k \\<and>\n     distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n    (\\<lambda>ys. {zs. interleavings xs ys zs}))", "have \"finite ?expr \\<and> card ?expr = (n choose k) * ffact (n - k) (card Y)\""], ["proof (prove)\nusing this:\n  card\n   ({ys.\n     length ys = n - k \\<and>\n     distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n    (\\<lambda>ys. {zs. interleavings xs ys zs})) =\n  (n choose k) * ffact (n - k) (card Y)\n  finite\n   ({ys.\n     length ys = n - k \\<and>\n     distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n    (\\<lambda>ys. {zs. interleavings xs ys zs}))\n\ngoal (1 subgoal):\n 1. finite\n     ({ys.\n       length ys = n - k \\<and>\n       distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n      (\\<lambda>ys. {zs. interleavings xs ys zs})) \\<and>\n    card\n     ({ys.\n       length ys = n - k \\<and>\n       distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n      (\\<lambda>ys. {zs. interleavings xs ys zs})) =\n    (n choose k) * ffact (n - k) (card Y)", "by blast"], ["proof (state)\nthis:\n  finite\n   ({ys.\n     length ys = n - k \\<and>\n     distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n    (\\<lambda>ys. {zs. interleavings xs ys zs})) \\<and>\n  card\n   ({ys.\n     length ys = n - k \\<and>\n     distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n    (\\<lambda>ys. {zs. interleavings xs ys zs})) =\n  (n choose k) * ffact (n - k) (card Y)\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "}"], ["proof (state)\nthis:\n  ?xs2\n  \\<in> {xs.\n         length xs = k \\<and>\n         distinct xs \\<and> set xs \\<subseteq> X} \\<Longrightarrow>\n  finite\n   ({ys.\n     length ys = n - k \\<and>\n     distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n    (\\<lambda>ys. {zs. interleavings ?xs2 ys zs})) \\<and>\n  card\n   ({ys.\n     length ys = n - k \\<and>\n     distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n    (\\<lambda>ys. {zs. interleavings ?xs2 ys zs})) =\n  (n choose k) * ffact (n - k) (card Y)\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "moreover"], ["proof (state)\nthis:\n  ?xs2\n  \\<in> {xs.\n         length xs = k \\<and>\n         distinct xs \\<and> set xs \\<subseteq> X} \\<Longrightarrow>\n  finite\n   ({ys.\n     length ys = n - k \\<and>\n     distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n    (\\<lambda>ys. {zs. interleavings ?xs2 ys zs})) \\<and>\n  card\n   ({ys.\n     length ys = n - k \\<and>\n     distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n    (\\<lambda>ys. {zs. interleavings ?xs2 ys zs})) =\n  (n choose k) * ffact (n - k) (card Y)\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "have \"disjoint_family_on ?comp ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. disjoint_family_on\n     (\\<lambda>xs.\n         {ys.\n          length ys = n - k \\<and>\n          distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n         (\\<lambda>ys. {zs. interleavings xs ys zs}))\n     {xs. length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X}", "using \\<open>k \\<in> {0..n}\\<close>"], ["proof (prove)\nusing this:\n  k \\<in> {0..n}\n\ngoal (1 subgoal):\n 1. disjoint_family_on\n     (\\<lambda>xs.\n         {ys.\n          length ys = n - k \\<and>\n          distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n         (\\<lambda>ys. {zs. interleavings xs ys zs}))\n     {xs. length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X}", "by (injectivity_solver rule: injectivity(2)[OF \\<open>X \\<inter> Y = {}\\<close>])"], ["proof (state)\nthis:\n  disjoint_family_on\n   (\\<lambda>xs.\n       {ys.\n        length ys = n - k \\<and>\n        distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n       (\\<lambda>ys. {zs. interleavings xs ys zs}))\n   {xs. length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X}\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "moreover"], ["proof (state)\nthis:\n  disjoint_family_on\n   (\\<lambda>xs.\n       {ys.\n        length ys = n - k \\<and>\n        distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n       (\\<lambda>ys. {zs. interleavings xs ys zs}))\n   {xs. length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X}\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "have \"card ?S = ffact k (card X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     {xs. length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X} =\n    ffact k (card X)", "using \\<open>finite X\\<close>"], ["proof (prove)\nusing this:\n  finite X\n\ngoal (1 subgoal):\n 1. card\n     {xs. length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X} =\n    ffact k (card X)", "by (simp add: card_lists_distinct_length_eq)"], ["proof (state)\nthis:\n  card {xs. length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X} =\n  ffact k (card X)\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "ultimately"], ["proof (chain)\npicking this:\n  finite {xs. length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X}\n  ?xs2\n  \\<in> {xs.\n         length xs = k \\<and>\n         distinct xs \\<and> set xs \\<subseteq> X} \\<Longrightarrow>\n  finite\n   ({ys.\n     length ys = n - k \\<and>\n     distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n    (\\<lambda>ys. {zs. interleavings ?xs2 ys zs})) \\<and>\n  card\n   ({ys.\n     length ys = n - k \\<and>\n     distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n    (\\<lambda>ys. {zs. interleavings ?xs2 ys zs})) =\n  (n choose k) * ffact (n - k) (card Y)\n  disjoint_family_on\n   (\\<lambda>xs.\n       {ys.\n        length ys = n - k \\<and>\n        distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n       (\\<lambda>ys. {zs. interleavings xs ys zs}))\n   {xs. length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X}\n  card {xs. length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X} =\n  ffact k (card X)", "have \"card ?expr = (n choose k) * ffact k (card X) * ffact (n - k) (card Y)\""], ["proof (prove)\nusing this:\n  finite {xs. length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X}\n  ?xs2\n  \\<in> {xs.\n         length xs = k \\<and>\n         distinct xs \\<and> set xs \\<subseteq> X} \\<Longrightarrow>\n  finite\n   ({ys.\n     length ys = n - k \\<and>\n     distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n    (\\<lambda>ys. {zs. interleavings ?xs2 ys zs})) \\<and>\n  card\n   ({ys.\n     length ys = n - k \\<and>\n     distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n    (\\<lambda>ys. {zs. interleavings ?xs2 ys zs})) =\n  (n choose k) * ffact (n - k) (card Y)\n  disjoint_family_on\n   (\\<lambda>xs.\n       {ys.\n        length ys = n - k \\<and>\n        distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n       (\\<lambda>ys. {zs. interleavings xs ys zs}))\n   {xs. length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X}\n  card {xs. length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X} =\n  ffact k (card X)\n\ngoal (1 subgoal):\n 1. card\n     ({xs.\n       length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n      (\\<lambda>xs.\n          {ys.\n           length ys = n - k \\<and>\n           distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n          (\\<lambda>ys. {zs. interleavings xs ys zs}))) =\n    (n choose k) * ffact k (card X) * ffact (n - k) (card Y)", "by (subst card_bind_constant) auto"], ["proof (state)\nthis:\n  card\n   ({xs.\n     length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n    (\\<lambda>xs.\n        {ys.\n         length ys = n - k \\<and>\n         distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n        (\\<lambda>ys. {zs. interleavings xs ys zs}))) =\n  (n choose k) * ffact k (card X) * ffact (n - k) (card Y)\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "moreover"], ["proof (state)\nthis:\n  card\n   ({xs.\n     length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n    (\\<lambda>xs.\n        {ys.\n         length ys = n - k \\<and>\n         distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n        (\\<lambda>ys. {zs. interleavings xs ys zs}))) =\n  (n choose k) * ffact k (card X) * ffact (n - k) (card Y)\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "have \"finite ?expr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     ({xs.\n       length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n      (\\<lambda>xs.\n          {ys.\n           length ys = n - k \\<and>\n           distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n          (\\<lambda>ys. {zs. interleavings xs ys zs})))", "using \\<open>finite ?S\\<close> \\<open>finite Y\\<close>"], ["proof (prove)\nusing this:\n  finite {xs. length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X}\n  finite Y\n\ngoal (1 subgoal):\n 1. finite\n     ({xs.\n       length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n      (\\<lambda>xs.\n          {ys.\n           length ys = n - k \\<and>\n           distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n          (\\<lambda>ys. {zs. interleavings xs ys zs})))", "by (auto intro!: finite_bind finite_interleavings)"], ["proof (state)\nthis:\n  finite\n   ({xs.\n     length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n    (\\<lambda>xs.\n        {ys.\n         length ys = n - k \\<and>\n         distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n        (\\<lambda>ys. {zs. interleavings xs ys zs})))\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "ultimately"], ["proof (chain)\npicking this:\n  card\n   ({xs.\n     length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n    (\\<lambda>xs.\n        {ys.\n         length ys = n - k \\<and>\n         distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n        (\\<lambda>ys. {zs. interleavings xs ys zs}))) =\n  (n choose k) * ffact k (card X) * ffact (n - k) (card Y)\n  finite\n   ({xs.\n     length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n    (\\<lambda>xs.\n        {ys.\n         length ys = n - k \\<and>\n         distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n        (\\<lambda>ys. {zs. interleavings xs ys zs})))", "have \"finite ?expr \\<and> card ?expr = (n choose k) * ffact k (card X) * ffact (n - k) (card Y)\""], ["proof (prove)\nusing this:\n  card\n   ({xs.\n     length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n    (\\<lambda>xs.\n        {ys.\n         length ys = n - k \\<and>\n         distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n        (\\<lambda>ys. {zs. interleavings xs ys zs}))) =\n  (n choose k) * ffact k (card X) * ffact (n - k) (card Y)\n  finite\n   ({xs.\n     length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n    (\\<lambda>xs.\n        {ys.\n         length ys = n - k \\<and>\n         distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n        (\\<lambda>ys. {zs. interleavings xs ys zs})))\n\ngoal (1 subgoal):\n 1. finite\n     ({xs.\n       length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n      (\\<lambda>xs.\n          {ys.\n           length ys = n - k \\<and>\n           distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n          (\\<lambda>ys. {zs. interleavings xs ys zs}))) \\<and>\n    card\n     ({xs.\n       length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n      (\\<lambda>xs.\n          {ys.\n           length ys = n - k \\<and>\n           distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n          (\\<lambda>ys. {zs. interleavings xs ys zs}))) =\n    (n choose k) * ffact k (card X) * ffact (n - k) (card Y)", "by blast"], ["proof (state)\nthis:\n  finite\n   ({xs.\n     length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n    (\\<lambda>xs.\n        {ys.\n         length ys = n - k \\<and>\n         distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n        (\\<lambda>ys. {zs. interleavings xs ys zs}))) \\<and>\n  card\n   ({xs.\n     length xs = k \\<and> distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n    (\\<lambda>xs.\n        {ys.\n         length ys = n - k \\<and>\n         distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n        (\\<lambda>ys. {zs. interleavings xs ys zs}))) =\n  (n choose k) * ffact k (card X) * ffact (n - k) (card Y)\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "}"], ["proof (state)\nthis:\n  ?k2 \\<in> {0..n} \\<Longrightarrow>\n  finite\n   ({xs.\n     length xs = ?k2 \\<and> distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n    (\\<lambda>xs.\n        {ys.\n         length ys = n - ?k2 \\<and>\n         distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n        (\\<lambda>ys. {zs. interleavings xs ys zs}))) \\<and>\n  card\n   ({xs.\n     length xs = ?k2 \\<and> distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n    (\\<lambda>xs.\n        {ys.\n         length ys = n - ?k2 \\<and>\n         distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n        (\\<lambda>ys. {zs. interleavings xs ys zs}))) =\n  (n choose ?k2) * ffact ?k2 (card X) * ffact (n - ?k2) (card Y)\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "moreover"], ["proof (state)\nthis:\n  ?k2 \\<in> {0..n} \\<Longrightarrow>\n  finite\n   ({xs.\n     length xs = ?k2 \\<and> distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n    (\\<lambda>xs.\n        {ys.\n         length ys = n - ?k2 \\<and>\n         distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n        (\\<lambda>ys. {zs. interleavings xs ys zs}))) \\<and>\n  card\n   ({xs.\n     length xs = ?k2 \\<and> distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n    (\\<lambda>xs.\n        {ys.\n         length ys = n - ?k2 \\<and>\n         distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n        (\\<lambda>ys. {zs. interleavings xs ys zs}))) =\n  (n choose ?k2) * ffact ?k2 (card X) * ffact (n - ?k2) (card Y)\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "have \"disjoint_family_on ?comp ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. disjoint_family_on\n     (\\<lambda>k.\n         {xs.\n          length xs = k \\<and>\n          distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n         (\\<lambda>xs.\n             {ys.\n              length ys = n - k \\<and>\n              distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n             (\\<lambda>ys. {zs. interleavings xs ys zs})))\n     {0..n}", "by (injectivity_solver rule: injectivity(1)[OF \\<open>X \\<inter> Y = {}\\<close>])"], ["proof (state)\nthis:\n  disjoint_family_on\n   (\\<lambda>k.\n       {xs.\n        length xs = k \\<and>\n        distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n       (\\<lambda>xs.\n           {ys.\n            length ys = n - k \\<and>\n            distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n           (\\<lambda>ys. {zs. interleavings xs ys zs})))\n   {0..n}\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "ultimately"], ["proof (chain)\npicking this:\n  ?k2 \\<in> {0..n} \\<Longrightarrow>\n  finite\n   ({xs.\n     length xs = ?k2 \\<and> distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n    (\\<lambda>xs.\n        {ys.\n         length ys = n - ?k2 \\<and>\n         distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n        (\\<lambda>ys. {zs. interleavings xs ys zs}))) \\<and>\n  card\n   ({xs.\n     length xs = ?k2 \\<and> distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n    (\\<lambda>xs.\n        {ys.\n         length ys = n - ?k2 \\<and>\n         distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n        (\\<lambda>ys. {zs. interleavings xs ys zs}))) =\n  (n choose ?k2) * ffact ?k2 (card X) * ffact (n - ?k2) (card Y)\n  disjoint_family_on\n   (\\<lambda>k.\n       {xs.\n        length xs = k \\<and>\n        distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n       (\\<lambda>xs.\n           {ys.\n            length ys = n - k \\<and>\n            distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n           (\\<lambda>ys. {zs. interleavings xs ys zs})))\n   {0..n}", "have \"card ?expr = (\\<Sum>k=0..n. (n choose k) * ffact k (card X) * ffact (n - k) (card Y))\""], ["proof (prove)\nusing this:\n  ?k2 \\<in> {0..n} \\<Longrightarrow>\n  finite\n   ({xs.\n     length xs = ?k2 \\<and> distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n    (\\<lambda>xs.\n        {ys.\n         length ys = n - ?k2 \\<and>\n         distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n        (\\<lambda>ys. {zs. interleavings xs ys zs}))) \\<and>\n  card\n   ({xs.\n     length xs = ?k2 \\<and> distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n    (\\<lambda>xs.\n        {ys.\n         length ys = n - ?k2 \\<and>\n         distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n        (\\<lambda>ys. {zs. interleavings xs ys zs}))) =\n  (n choose ?k2) * ffact ?k2 (card X) * ffact (n - ?k2) (card Y)\n  disjoint_family_on\n   (\\<lambda>k.\n       {xs.\n        length xs = k \\<and>\n        distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n       (\\<lambda>xs.\n           {ys.\n            length ys = n - k \\<and>\n            distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n           (\\<lambda>ys. {zs. interleavings xs ys zs})))\n   {0..n}\n\ngoal (1 subgoal):\n 1. card\n     ({0..n} \\<bind>\n      (\\<lambda>k.\n          {xs.\n           length xs = k \\<and>\n           distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n          (\\<lambda>xs.\n              {ys.\n               length ys = n - k \\<and>\n               distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n              (\\<lambda>ys. {zs. interleavings xs ys zs})))) =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "by (auto simp add: card_bind)"], ["proof (state)\nthis:\n  card\n   ({0..n} \\<bind>\n    (\\<lambda>k.\n        {xs.\n         length xs = k \\<and>\n         distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n        (\\<lambda>xs.\n            {ys.\n             length ys = n - k \\<and>\n             distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n            (\\<lambda>ys. {zs. interleavings xs ys zs})))) =\n  (\\<Sum>k = 0..n. (n choose k) * ffact k (card X) * ffact (n - k) (card Y))\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "from \\<open>card _ = card ?expr\\<close> this"], ["proof (chain)\npicking this:\n  card\n   {zs.\n    length zs = n \\<and>\n    distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n  card\n   ({0..n} \\<bind>\n    (\\<lambda>k.\n        {xs.\n         length xs = k \\<and>\n         distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n        (\\<lambda>xs.\n            {ys.\n             length ys = n - k \\<and>\n             distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n            (\\<lambda>ys. {zs. interleavings xs ys zs}))))\n  card\n   ({0..n} \\<bind>\n    (\\<lambda>k.\n        {xs.\n         length xs = k \\<and>\n         distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n        (\\<lambda>xs.\n            {ys.\n             length ys = n - k \\<and>\n             distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n            (\\<lambda>ys. {zs. interleavings xs ys zs})))) =\n  (\\<Sum>k = 0..n. (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "show ?thesis"], ["proof (prove)\nusing this:\n  card\n   {zs.\n    length zs = n \\<and>\n    distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n  card\n   ({0..n} \\<bind>\n    (\\<lambda>k.\n        {xs.\n         length xs = k \\<and>\n         distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n        (\\<lambda>xs.\n            {ys.\n             length ys = n - k \\<and>\n             distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n            (\\<lambda>ys. {zs. interleavings xs ys zs}))))\n  card\n   ({0..n} \\<bind>\n    (\\<lambda>k.\n        {xs.\n         length xs = k \\<and>\n         distinct xs \\<and> set xs \\<subseteq> X} \\<bind>\n        (\\<lambda>xs.\n            {ys.\n             length ys = n - k \\<and>\n             distinct ys \\<and> set ys \\<subseteq> Y} \\<bind>\n            (\\<lambda>ys. {zs. interleavings xs ys zs})))) =\n  (\\<Sum>k = 0..n. (n choose k) * ffact k (card X) * ffact (n - k) (card Y))\n\ngoal (1 subgoal):\n 1. card\n     {zs.\n      length zs = n \\<and>\n      distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "by simp"], ["proof (state)\nthis:\n  card\n   {zs.\n    length zs = n \\<and>\n    distinct zs \\<and> set zs \\<subseteq> X \\<union> Y} =\n  (\\<Sum>k = 0..n. (n choose k) * ffact k (card X) * ffact (n - k) (card Y))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma\n  \"ffact n (x + y) = (\\<Sum>k=0..n. (n choose k) * ffact k x * ffact (n - k) y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ffact n (x + y) =\n    (\\<Sum>k = 0..n. (n choose k) * ffact k x * ffact (n - k) y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ffact n (x + y) =\n    (\\<Sum>k = 0..n. (n choose k) * ffact k x * ffact (n - k) y)", "define X where \"X = {..<x}\""], ["proof (state)\nthis:\n  X = {..<x}\n\ngoal (1 subgoal):\n 1. ffact n (x + y) =\n    (\\<Sum>k = 0..n. (n choose k) * ffact k x * ffact (n - k) y)", "define Y where \"Y = {x..<x+y}\""], ["proof (state)\nthis:\n  Y = {x..<x + y}\n\ngoal (1 subgoal):\n 1. ffact n (x + y) =\n    (\\<Sum>k = 0..n. (n choose k) * ffact k x * ffact (n - k) y)", "have \"finite X\" and \"card X = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite X &&& card X = x", "unfolding X_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {..<x} &&& card {..<x} = x", "by auto"], ["proof (state)\nthis:\n  finite X\n  card X = x\n\ngoal (1 subgoal):\n 1. ffact n (x + y) =\n    (\\<Sum>k = 0..n. (n choose k) * ffact k x * ffact (n - k) y)", "have \"finite Y\" and \"card Y = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite Y &&& card Y = y", "unfolding Y_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {x..<x + y} &&& card {x..<x + y} = y", "by auto"], ["proof (state)\nthis:\n  finite Y\n  card Y = y\n\ngoal (1 subgoal):\n 1. ffact n (x + y) =\n    (\\<Sum>k = 0..n. (n choose k) * ffact k x * ffact (n - k) y)", "have \"X \\<inter> Y = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<inter> Y = {}", "unfolding X_def Y_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {..<x} \\<inter> {x..<x + y} = {}", "by auto"], ["proof (state)\nthis:\n  X \\<inter> Y = {}\n\ngoal (1 subgoal):\n 1. ffact n (x + y) =\n    (\\<Sum>k = 0..n. (n choose k) * ffact k x * ffact (n - k) y)", "have \"ffact n (x + y) = ffact n (card X + card Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ffact n (x + y) = ffact n (card X + card Y)", "using \\<open>card X = x\\<close> \\<open>card Y = y\\<close>"], ["proof (prove)\nusing this:\n  card X = x\n  card Y = y\n\ngoal (1 subgoal):\n 1. ffact n (x + y) = ffact n (card X + card Y)", "by simp"], ["proof (state)\nthis:\n  ffact n (x + y) = ffact n (card X + card Y)\n\ngoal (1 subgoal):\n 1. ffact n (x + y) =\n    (\\<Sum>k = 0..n. (n choose k) * ffact k x * ffact (n - k) y)", "also"], ["proof (state)\nthis:\n  ffact n (x + y) = ffact n (card X + card Y)\n\ngoal (1 subgoal):\n 1. ffact n (x + y) =\n    (\\<Sum>k = 0..n. (n choose k) * ffact k x * ffact (n - k) y)", "have \"\\<dots> = ffact n (card (X \\<union> Y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ffact n (card X + card Y) = ffact n (card (X \\<union> Y))", "using \\<open>X \\<inter> Y = {}\\<close> \\<open>finite X\\<close> \\<open>finite Y\\<close>"], ["proof (prove)\nusing this:\n  X \\<inter> Y = {}\n  finite X\n  finite Y\n\ngoal (1 subgoal):\n 1. ffact n (card X + card Y) = ffact n (card (X \\<union> Y))", "by (simp add: card_Un_disjoint)"], ["proof (state)\nthis:\n  ffact n (card X + card Y) = ffact n (card (X \\<union> Y))\n\ngoal (1 subgoal):\n 1. ffact n (x + y) =\n    (\\<Sum>k = 0..n. (n choose k) * ffact k x * ffact (n - k) y)", "also"], ["proof (state)\nthis:\n  ffact n (card X + card Y) = ffact n (card (X \\<union> Y))\n\ngoal (1 subgoal):\n 1. ffact n (x + y) =\n    (\\<Sum>k = 0..n. (n choose k) * ffact k x * ffact (n - k) y)", "have \"\\<dots> = card {xs. length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> X \\<union> Y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ffact n (card (X \\<union> Y)) =\n    card\n     {xs.\n      length xs = n \\<and>\n      distinct xs \\<and> set xs \\<subseteq> X \\<union> Y}", "using \\<open>finite X\\<close> \\<open>finite Y\\<close>"], ["proof (prove)\nusing this:\n  finite X\n  finite Y\n\ngoal (1 subgoal):\n 1. ffact n (card (X \\<union> Y)) =\n    card\n     {xs.\n      length xs = n \\<and>\n      distinct xs \\<and> set xs \\<subseteq> X \\<union> Y}", "by (simp add: card_lists_distinct_length_eq)"], ["proof (state)\nthis:\n  ffact n (card (X \\<union> Y)) =\n  card\n   {xs.\n    length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> X \\<union> Y}\n\ngoal (1 subgoal):\n 1. ffact n (x + y) =\n    (\\<Sum>k = 0..n. (n choose k) * ffact k x * ffact (n - k) y)", "also"], ["proof (state)\nthis:\n  ffact n (card (X \\<union> Y)) =\n  card\n   {xs.\n    length xs = n \\<and> distinct xs \\<and> set xs \\<subseteq> X \\<union> Y}\n\ngoal (1 subgoal):\n 1. ffact n (x + y) =\n    (\\<Sum>k = 0..n. (n choose k) * ffact k x * ffact (n - k) y)", "have \"\\<dots> = (\\<Sum>k=0..n. (n choose k) * ffact k (card X) * ffact (n - k) (card Y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     {xs.\n      length xs = n \\<and>\n      distinct xs \\<and> set xs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "using \\<open>X \\<inter> Y = {}\\<close> \\<open>finite X\\<close> \\<open>finite Y\\<close>"], ["proof (prove)\nusing this:\n  X \\<inter> Y = {}\n  finite X\n  finite Y\n\ngoal (1 subgoal):\n 1. card\n     {xs.\n      length xs = n \\<and>\n      distinct xs \\<and> set xs \\<subseteq> X \\<union> Y} =\n    (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y))", "by (simp add: card_lists_distinct_length_eq_union)"], ["proof (state)\nthis:\n  card\n   {xs.\n    length xs = n \\<and>\n    distinct xs \\<and> set xs \\<subseteq> X \\<union> Y} =\n  (\\<Sum>k = 0..n. (n choose k) * ffact k (card X) * ffact (n - k) (card Y))\n\ngoal (1 subgoal):\n 1. ffact n (x + y) =\n    (\\<Sum>k = 0..n. (n choose k) * ffact k x * ffact (n - k) y)", "also"], ["proof (state)\nthis:\n  card\n   {xs.\n    length xs = n \\<and>\n    distinct xs \\<and> set xs \\<subseteq> X \\<union> Y} =\n  (\\<Sum>k = 0..n. (n choose k) * ffact k (card X) * ffact (n - k) (card Y))\n\ngoal (1 subgoal):\n 1. ffact n (x + y) =\n    (\\<Sum>k = 0..n. (n choose k) * ffact k x * ffact (n - k) y)", "have \"\\<dots> = (\\<Sum>k=0..n. (n choose k) * ffact k x * ffact (n - k) y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y)) =\n    (\\<Sum>k = 0..n. (n choose k) * ffact k x * ffact (n - k) y)", "using \\<open>card X = x\\<close> \\<open>card Y = y\\<close>"], ["proof (prove)\nusing this:\n  card X = x\n  card Y = y\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..n.\n        (n choose k) * ffact k (card X) * ffact (n - k) (card Y)) =\n    (\\<Sum>k = 0..n. (n choose k) * ffact k x * ffact (n - k) y)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..n.\n      (n choose k) * ffact k (card X) * ffact (n - k) (card Y)) =\n  (\\<Sum>k = 0..n. (n choose k) * ffact k x * ffact (n - k) y)\n\ngoal (1 subgoal):\n 1. ffact n (x + y) =\n    (\\<Sum>k = 0..n. (n choose k) * ffact k x * ffact (n - k) y)", "finally"], ["proof (chain)\npicking this:\n  ffact n (x + y) =\n  (\\<Sum>k = 0..n. (n choose k) * ffact k x * ffact (n - k) y)", "show ?thesis"], ["proof (prove)\nusing this:\n  ffact n (x + y) =\n  (\\<Sum>k = 0..n. (n choose k) * ffact k x * ffact (n - k) y)\n\ngoal (1 subgoal):\n 1. ffact n (x + y) =\n    (\\<Sum>k = 0..n. (n choose k) * ffact k x * ffact (n - k) y)", "."], ["proof (state)\nthis:\n  ffact n (x + y) =\n  (\\<Sum>k = 0..n. (n choose k) * ffact k x * ffact (n - k) y)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}