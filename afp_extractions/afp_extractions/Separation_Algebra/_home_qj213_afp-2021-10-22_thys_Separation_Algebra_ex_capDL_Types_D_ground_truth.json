{"file_name": "/home/qj213/afp-2021-10-22/thys/Separation_Algebra/ex/capDL/Types_D.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Separation_Algebra", "problem_names": ["lemma cap_object_simps:\n  \"cap_object (TcbCap x) = x\"\n  \"cap_object (CNodeCap x) = x\"\n  \"cap_object (EndpointCap x j) = x\""], "translations": [["", "lemma cap_object_simps:\n  \"cap_object (TcbCap x) = x\"\n  \"cap_object (CNodeCap x) = x\"\n  \"cap_object (EndpointCap x j) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cap_object (TcbCap x) = x &&&\n    cap_object (CNodeCap x) = x &&& cap_object (EndpointCap x j) = x", "by (simp_all add:cap_object_def cap_objects_def cap_has_object_def)"], ["", "definition\n  cap_rights :: \"cdl_cap \\<Rightarrow> cdl_right set\"\nwhere\n  \"cap_rights c \\<equiv> case c of\n      EndpointCap _ x \\<Rightarrow> x\n    | _ \\<Rightarrow> UNIV\""], ["", "definition\n  update_cap_rights :: \"cdl_right set \\<Rightarrow> cdl_cap \\<Rightarrow> cdl_cap\"\nwhere\n  \"update_cap_rights r c \\<equiv> case c of\n      EndpointCap f1 _ \\<Rightarrow> EndpointCap f1 r\n    | _ \\<Rightarrow> c\""], ["", "(* Kernel object getters / setters *)"], ["", "definition\n  object_slots :: \"cdl_object \\<Rightarrow> cdl_cap_map\"\nwhere\n  \"object_slots obj \\<equiv> case obj of\n    CNode x \\<Rightarrow> cdl_cnode_caps x\n  | Tcb x \\<Rightarrow> cdl_tcb_caps x\n  | _ \\<Rightarrow> Map.empty\""], ["", "definition\n  update_slots :: \"cdl_cap_map \\<Rightarrow> cdl_object \\<Rightarrow> cdl_object\"\nwhere\n  \"update_slots new_val obj \\<equiv> case obj of\n    CNode x \\<Rightarrow> CNode (x\\<lparr>cdl_cnode_caps := new_val\\<rparr>)\n  | Tcb x \\<Rightarrow> Tcb (x\\<lparr>cdl_tcb_caps := new_val\\<rparr>)\n  | _ \\<Rightarrow> obj\""], ["", "(* Adds new caps to an object. It won't overwrite on a collision. *)"], ["", "definition\n  add_to_slots :: \"cdl_cap_map \\<Rightarrow> cdl_object \\<Rightarrow> cdl_object\"\nwhere\n  \"add_to_slots new_val obj \\<equiv> update_slots (new_val ++ (object_slots obj)) obj\""], ["", "definition\n  slots_of :: \"cdl_heap \\<Rightarrow> cdl_object_id \\<Rightarrow> cdl_cap_map\"\nwhere\n  \"slots_of h \\<equiv> \\<lambda>obj_id. \n  case h obj_id of \n    None \\<Rightarrow> Map.empty \n  | Some obj \\<Rightarrow> object_slots obj\""], ["", "definition\n  has_slots :: \"cdl_object \\<Rightarrow> bool\"\nwhere\n  \"has_slots obj \\<equiv> case obj of\n    CNode _ \\<Rightarrow> True\n  | Tcb _ \\<Rightarrow> True\n  | _ \\<Rightarrow> False\""], ["", "definition\n  object_at :: \"(cdl_object \\<Rightarrow> bool) \\<Rightarrow> cdl_object_id \\<Rightarrow> cdl_heap \\<Rightarrow> bool\"\nwhere\n  \"object_at P p s \\<equiv> \\<exists>object. s p = Some object \\<and> P object\""], ["", "abbreviation\n  \"ko_at k \\<equiv> object_at ((=) k)\""], ["", "end"]]}