{"file_name": "/home/qj213/afp-2021-10-22/thys/Separation_Algebra/Sep_Eq.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Separation_Algebra", "problem_names": ["lemma add2_zero: \"add2 x 0 = Some x\"", "lemma add2_comm: \"add2 x y = add2 y x\"", "lemma add2_assoc:\n  \"lift2 add2 a (lift2 add2 b c) = lift2 add2 (lift2 add2 a b) c\"", "lemma sep_disj_zero':\n  \"disjoint x 0\"", "lemma sep_disj_commuteI':\n  \"disjoint x y \\<Longrightarrow> disjoint y x\"", "lemma sep_add_zero':\n  \"sep_add' x 0 = x\"", "lemma sep_add_commute':\n  \"disjoint x y \\<Longrightarrow> sep_add' x y = sep_add' y x\"", "lemma sep_add_assoc':\n  \"\\<lbrakk> disjoint x y; disjoint y z; disjoint x z \\<rbrakk> \\<Longrightarrow>\n  sep_add' (sep_add' x y) z = sep_add' x (sep_add' y z)\"", "lemma sep_disj_addD1':\n  \"disjoint x (sep_add' y z) \\<Longrightarrow> disjoint y z \\<Longrightarrow> disjoint x y\"", "lemma sep_disj_addI1':\n  \"disjoint x (sep_add' y z) \\<Longrightarrow> disjoint y z \\<Longrightarrow> disjoint (sep_add' x y) z\""], "translations": [["", "lemma add2_zero: \"add2 x 0 = Some x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sep_Eq.add2 x (0::'a) = Some x", "by (simp add: add2_def)"], ["", "lemma add2_comm: \"add2 x y = add2 y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sep_Eq.add2 x y = Sep_Eq.add2 y x", "by (auto simp: add2_def sep_add_commute sep_disj_commute)"], ["", "lemma add2_assoc:\n  \"lift2 add2 a (lift2 add2 b c) = lift2 add2 (lift2 add2 a b) c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift2 Sep_Eq.add2 a (lift2 Sep_Eq.add2 b c) =\n    lift2 Sep_Eq.add2 (lift2 Sep_Eq.add2 a b) c", "by (auto simp: add2_def lift2_def sep_add_assoc\n              dest: sep_disj_addD sep_disj_addI3\n                    sep_add_disjD sep_disj_addI2 sep_disj_commuteI\n              split: option.splits)"], ["", "interpretation total_partial: sep_algebra_alt 0 add2"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.sep_algebra_alt (0::'a) Sep_Eq.add2", "by (unfold_locales) (auto intro: add2_zero add2_comm add2_assoc)"], ["", "section \"Partial implies Total\""], ["", "definition\n  sep_add' :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a :: sep_algebra_alt\" where\n  \"sep_add' x y \\<equiv> if disjoint x y then the (add x y) else undefined\""], ["", "lemma sep_disj_zero':\n  \"disjoint x 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ## (0::'a)", "by simp"], ["", "lemma sep_disj_commuteI':\n  \"disjoint x y \\<Longrightarrow> disjoint y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ## y \\<Longrightarrow> y ## x", "by (clarsimp simp: disjoint_def add_comm)"], ["", "lemma sep_add_zero':\n  \"sep_add' x 0 = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sep_add' x (0::'a) = x", "by (simp add: sep_add'_def)"], ["", "lemma sep_add_commute':\n  \"disjoint x y \\<Longrightarrow> sep_add' x y = sep_add' y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ## y \\<Longrightarrow> sep_add' x y = sep_add' y x", "by (clarsimp simp: sep_add'_def disjoint_def add_comm)"], ["", "lemma sep_add_assoc':\n  \"\\<lbrakk> disjoint x y; disjoint y z; disjoint x z \\<rbrakk> \\<Longrightarrow>\n  sep_add' (sep_add' x y) z = sep_add' x (sep_add' y z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x ## y; y ## z; x ## z\\<rbrakk>\n    \\<Longrightarrow> sep_add' (sep_add' x y) z = sep_add' x (sep_add' y z)", "using add_assoc [of \"Some x\" \"Some y\" \"Some z\"]"], ["proof (prove)\nusing this:\n  Some x ++ Some y ++ Some z = (Some x ++ Some y) ++ Some z\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x ## y; y ## z; x ## z\\<rbrakk>\n    \\<Longrightarrow> sep_add' (sep_add' x y) z = sep_add' x (sep_add' y z)", "by (clarsimp simp: disjoint_def sep_add'_def lift2_def\n               split: option.splits)"], ["", "lemma sep_disj_addD1':\n  \"disjoint x (sep_add' y z) \\<Longrightarrow> disjoint y z \\<Longrightarrow> disjoint x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x ## sep_add' y z; y ## z\\<rbrakk> \\<Longrightarrow> x ## y", "proof (clarsimp simp: disjoint_def sep_add'_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ya yaa.\n       \\<lbrakk>x \\<oplus> yaa = Some ya; y \\<oplus> z = Some yaa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ya. x \\<oplus> y = Some ya", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ya yaa.\n       \\<lbrakk>x \\<oplus> yaa = Some ya; y \\<oplus> z = Some yaa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ya. x \\<oplus> y = Some ya", "assume a: \"y \\<oplus> z = Some a\""], ["proof (state)\nthis:\n  y \\<oplus> z = Some a\n\ngoal (1 subgoal):\n 1. \\<And>ya yaa.\n       \\<lbrakk>x \\<oplus> yaa = Some ya; y \\<oplus> z = Some yaa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ya. x \\<oplus> y = Some ya", "fix b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ya yaa.\n       \\<lbrakk>x \\<oplus> yaa = Some ya; y \\<oplus> z = Some yaa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ya. x \\<oplus> y = Some ya", "assume b: \"x \\<oplus> a = Some b\""], ["proof (state)\nthis:\n  x \\<oplus> a = Some b\n\ngoal (1 subgoal):\n 1. \\<And>ya yaa.\n       \\<lbrakk>x \\<oplus> yaa = Some ya; y \\<oplus> z = Some yaa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ya. x \\<oplus> y = Some ya", "with a"], ["proof (chain)\npicking this:\n  y \\<oplus> z = Some a\n  x \\<oplus> a = Some b", "have \"Some x ++ (Some y ++ Some z) = Some b\""], ["proof (prove)\nusing this:\n  y \\<oplus> z = Some a\n  x \\<oplus> a = Some b\n\ngoal (1 subgoal):\n 1. Some x ++ Some y ++ Some z = Some b", "by (simp add: lift2_def)"], ["proof (state)\nthis:\n  Some x ++ Some y ++ Some z = Some b\n\ngoal (1 subgoal):\n 1. \\<And>ya yaa.\n       \\<lbrakk>x \\<oplus> yaa = Some ya; y \\<oplus> z = Some yaa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ya. x \\<oplus> y = Some ya", "hence \"(Some x ++ Some y) ++ Some z = Some b\""], ["proof (prove)\nusing this:\n  Some x ++ Some y ++ Some z = Some b\n\ngoal (1 subgoal):\n 1. (Some x ++ Some y) ++ Some z = Some b", "by (simp add: add_assoc)"], ["proof (state)\nthis:\n  (Some x ++ Some y) ++ Some z = Some b\n\ngoal (1 subgoal):\n 1. \\<And>ya yaa.\n       \\<lbrakk>x \\<oplus> yaa = Some ya; y \\<oplus> z = Some yaa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ya. x \\<oplus> y = Some ya", "thus \"\\<exists>b. x \\<oplus> y = Some b\""], ["proof (prove)\nusing this:\n  (Some x ++ Some y) ++ Some z = Some b\n\ngoal (1 subgoal):\n 1. \\<exists>b. x \\<oplus> y = Some b", "by (simp add: lift2_def split: option.splits)"], ["proof (state)\nthis:\n  \\<exists>b. x \\<oplus> y = Some b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sep_disj_addI1':\n  \"disjoint x (sep_add' y z) \\<Longrightarrow> disjoint y z \\<Longrightarrow> disjoint (sep_add' x y) z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x ## sep_add' y z; y ## z\\<rbrakk>\n    \\<Longrightarrow> sep_add' x y ## z", "apply (clarsimp simp: disjoint_def sep_add'_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ya yaa.\n       \\<lbrakk>x \\<oplus> yaa = Some ya; y \\<oplus> z = Some yaa\\<rbrakk>\n       \\<Longrightarrow> ((\\<exists>ya.\n                              x \\<oplus> y = Some ya) \\<longrightarrow>\n                          (\\<exists>ya.\n                              the (x \\<oplus> y) \\<oplus> z =\n                              Some ya)) \\<and>\n                         (x \\<oplus> y = None \\<longrightarrow>\n                          (\\<exists>y. undefined \\<oplus> z = Some y))", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ya yaa.\n       \\<lbrakk>x \\<oplus> yaa = Some ya; y \\<oplus> z = Some yaa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ya.\n                             x \\<oplus> y = Some ya) \\<longrightarrow>\n                         (\\<exists>ya.\n                             the (x \\<oplus> y) \\<oplus> z = Some ya)\n 2. \\<And>ya yaa.\n       \\<lbrakk>x \\<oplus> yaa = Some ya; y \\<oplus> z = Some yaa\\<rbrakk>\n       \\<Longrightarrow> x \\<oplus> y = None \\<longrightarrow>\n                         (\\<exists>y. undefined \\<oplus> z = Some y)", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ya yaa yb.\n       \\<lbrakk>x \\<oplus> yaa = Some ya; y \\<oplus> z = Some yaa;\n        x \\<oplus> y = Some yb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. yb \\<oplus> z = Some y\n 2. \\<And>ya yaa.\n       \\<lbrakk>x \\<oplus> yaa = Some ya; y \\<oplus> z = Some yaa\\<rbrakk>\n       \\<Longrightarrow> x \\<oplus> y = None \\<longrightarrow>\n                         (\\<exists>y. undefined \\<oplus> z = Some y)", "apply (frule lift_to_add2, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ya yaa yb.\n       \\<lbrakk>x \\<oplus> yaa = Some ya; y \\<oplus> z = Some yaa;\n        x \\<oplus> y = Some yb;\n        Some x ++ Some y ++ Some z = Some ya\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. yb \\<oplus> z = Some y\n 2. \\<And>ya yaa.\n       \\<lbrakk>x \\<oplus> yaa = Some ya; y \\<oplus> z = Some yaa\\<rbrakk>\n       \\<Longrightarrow> x \\<oplus> y = None \\<longrightarrow>\n                         (\\<exists>y. undefined \\<oplus> z = Some y)", "apply (simp add: add_assoc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ya yaa yb.\n       \\<lbrakk>x \\<oplus> yaa = Some ya; y \\<oplus> z = Some yaa;\n        x \\<oplus> y = Some yb;\n        (Some x ++ Some y) ++ Some z = Some ya\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. yb \\<oplus> z = Some y\n 2. \\<And>ya yaa.\n       \\<lbrakk>x \\<oplus> yaa = Some ya; y \\<oplus> z = Some yaa\\<rbrakk>\n       \\<Longrightarrow> x \\<oplus> y = None \\<longrightarrow>\n                         (\\<exists>y. undefined \\<oplus> z = Some y)", "apply (clarsimp simp: lift2_def add_comm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ya yaa.\n       \\<lbrakk>x \\<oplus> yaa = Some ya; y \\<oplus> z = Some yaa\\<rbrakk>\n       \\<Longrightarrow> x \\<oplus> y = None \\<longrightarrow>\n                         (\\<exists>y. undefined \\<oplus> z = Some y)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ya yaa.\n       \\<lbrakk>x \\<oplus> yaa = Some ya; y \\<oplus> z = Some yaa;\n        x \\<oplus> y = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. undefined \\<oplus> z = Some y", "apply (frule lift_to_add2, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ya yaa.\n       \\<lbrakk>x \\<oplus> yaa = Some ya; y \\<oplus> z = Some yaa;\n        x \\<oplus> y = None; Some x ++ Some y ++ Some z = Some ya\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. undefined \\<oplus> z = Some y", "apply (simp add: add_assoc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ya yaa.\n       \\<lbrakk>x \\<oplus> yaa = Some ya; y \\<oplus> z = Some yaa;\n        x \\<oplus> y = None; (Some x ++ Some y) ++ Some z = Some ya\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. undefined \\<oplus> z = Some y", "apply (clarsimp simp: lift2_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "interpretation partial_total: sep_algebra sep_add' 0 disjoint"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.sep_algebra sep_add' (0::'a) (##)", "apply (unfold_locales)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x. x ## (0::'a)\n 2. \\<And>x y. x ## y \\<Longrightarrow> y ## x\n 3. \\<And>x. sep_add' x (0::'a) = x\n 4. \\<And>x y. x ## y \\<Longrightarrow> sep_add' x y = sep_add' y x\n 5. \\<And>x y z.\n       \\<lbrakk>x ## y; y ## z; x ## z\\<rbrakk>\n       \\<Longrightarrow> sep_add' (sep_add' x y) z =\n                         sep_add' x (sep_add' y z)\n 6. \\<And>x y z.\n       \\<lbrakk>x ## sep_add' y z; y ## z\\<rbrakk> \\<Longrightarrow> x ## y\n 7. \\<And>x y z.\n       \\<lbrakk>x ## sep_add' y z; y ## z\\<rbrakk>\n       \\<Longrightarrow> sep_add' x y ## z", "apply (rule sep_disj_zero')"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x y. x ## y \\<Longrightarrow> y ## x\n 2. \\<And>x. sep_add' x (0::'a) = x\n 3. \\<And>x y. x ## y \\<Longrightarrow> sep_add' x y = sep_add' y x\n 4. \\<And>x y z.\n       \\<lbrakk>x ## y; y ## z; x ## z\\<rbrakk>\n       \\<Longrightarrow> sep_add' (sep_add' x y) z =\n                         sep_add' x (sep_add' y z)\n 5. \\<And>x y z.\n       \\<lbrakk>x ## sep_add' y z; y ## z\\<rbrakk> \\<Longrightarrow> x ## y\n 6. \\<And>x y z.\n       \\<lbrakk>x ## sep_add' y z; y ## z\\<rbrakk>\n       \\<Longrightarrow> sep_add' x y ## z", "apply (erule sep_disj_commuteI')"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x. sep_add' x (0::'a) = x\n 2. \\<And>x y. x ## y \\<Longrightarrow> sep_add' x y = sep_add' y x\n 3. \\<And>x y z.\n       \\<lbrakk>x ## y; y ## z; x ## z\\<rbrakk>\n       \\<Longrightarrow> sep_add' (sep_add' x y) z =\n                         sep_add' x (sep_add' y z)\n 4. \\<And>x y z.\n       \\<lbrakk>x ## sep_add' y z; y ## z\\<rbrakk> \\<Longrightarrow> x ## y\n 5. \\<And>x y z.\n       \\<lbrakk>x ## sep_add' y z; y ## z\\<rbrakk>\n       \\<Longrightarrow> sep_add' x y ## z", "apply (rule sep_add_zero')"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y. x ## y \\<Longrightarrow> sep_add' x y = sep_add' y x\n 2. \\<And>x y z.\n       \\<lbrakk>x ## y; y ## z; x ## z\\<rbrakk>\n       \\<Longrightarrow> sep_add' (sep_add' x y) z =\n                         sep_add' x (sep_add' y z)\n 3. \\<And>x y z.\n       \\<lbrakk>x ## sep_add' y z; y ## z\\<rbrakk> \\<Longrightarrow> x ## y\n 4. \\<And>x y z.\n       \\<lbrakk>x ## sep_add' y z; y ## z\\<rbrakk>\n       \\<Longrightarrow> sep_add' x y ## z", "apply (erule sep_add_commute')"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x ## y; y ## z; x ## z\\<rbrakk>\n       \\<Longrightarrow> sep_add' (sep_add' x y) z =\n                         sep_add' x (sep_add' y z)\n 2. \\<And>x y z.\n       \\<lbrakk>x ## sep_add' y z; y ## z\\<rbrakk> \\<Longrightarrow> x ## y\n 3. \\<And>x y z.\n       \\<lbrakk>x ## sep_add' y z; y ## z\\<rbrakk>\n       \\<Longrightarrow> sep_add' x y ## z", "apply (erule (2) sep_add_assoc')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x ## sep_add' y z; y ## z\\<rbrakk> \\<Longrightarrow> x ## y\n 2. \\<And>x y z.\n       \\<lbrakk>x ## sep_add' y z; y ## z\\<rbrakk>\n       \\<Longrightarrow> sep_add' x y ## z", "apply (erule (1) sep_disj_addD1')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x ## sep_add' y z; y ## z\\<rbrakk>\n       \\<Longrightarrow> sep_add' x y ## z", "apply (erule (1) sep_disj_addI1')"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}