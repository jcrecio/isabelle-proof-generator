{"file_name": "/home/qj213/afp-2021-10-22/thys/Separation_Algebra/ex/Simple_Separation_Example.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Separation_Algebra", "problem_names": ["lemma maps_to_maps_to_ex [elim!]:\n  \"(p \\<mapsto> v) s \\<Longrightarrow> (p \\<mapsto> -) s\"", "lemma maps_to_write:\n  \"(p \\<mapsto> - ** P) H \\<Longrightarrow> (p \\<mapsto> v ** P) (H (p \\<mapsto> v))\"", "lemma points_to:\n  \"(p \\<mapsto> v ** P) H \\<Longrightarrow> the (H p) = v\"", "lemma list_empty [simp]:\n  shows \"list 0 xs = (\\<lambda>s. xs = [] \\<and> \\<box> s)\"", "lemma \"VARS x y z w h\n {(x \\<mapsto> y ** z \\<mapsto> w) h}\n SKIP\n {x \\<noteq> z}\"", "lemma \"VARS H x y z w\n {(P ** Q) H}\n SKIP\n {(Q ** P) H}\"", "lemma \"VARS H\n {p\\<noteq>0 \\<and> (p \\<mapsto> - ** list q qs) H}\n H := H(p \\<mapsto> q)\n {list p (p#qs) H}\"", "lemma \"VARS H p q r\n  {(list p Ps ** list q Qs) H}\n  WHILE p \\<noteq> 0\n  INV {\\<exists>ps qs. (list p ps ** list q qs) H \\<and> rev ps @ qs = rev Ps @ Qs}\n  DO r := p; p := the(H p); H := H(r \\<mapsto> q); q := r OD\n  {list q (rev Ps @ Qs) H}\""], "translations": [["", "lemma maps_to_maps_to_ex [elim!]:\n  \"(p \\<mapsto> v) s \\<Longrightarrow> (p \\<mapsto> -) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<mapsto> v) s \\<Longrightarrow> (p \\<mapsto> -) s", "by (auto simp: maps_to_ex_def)"], ["", "(* The basic properties of maps_to: *)"], ["", "lemma maps_to_write:\n  \"(p \\<mapsto> - ** P) H \\<Longrightarrow> (p \\<mapsto> v ** P) (H (p \\<mapsto> v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<mapsto> - \\<and>* P) H \\<Longrightarrow>\n    (p \\<mapsto> v \\<and>* P) (H(p \\<mapsto> v))", "apply (clarsimp simp: sep_conj_def maps_to_def maps_to_ex_def split: option.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y xa.\n       \\<lbrakk>[p \\<mapsto> xa] ## y; H = [p \\<mapsto> xa] + y;\n        P y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ya.\n                            [p \\<mapsto> v] ## ya \\<and>\n                            ([p \\<mapsto> xa] + y)(p \\<mapsto> v) =\n                            [p \\<mapsto> v] + ya \\<and>\n                            P ya", "apply (rule_tac x=y in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y xa.\n       \\<lbrakk>[p \\<mapsto> xa] ## y; H = [p \\<mapsto> xa] + y;\n        P y\\<rbrakk>\n       \\<Longrightarrow> [p \\<mapsto> v] ## y \\<and>\n                         ([p \\<mapsto> xa] + y)(p \\<mapsto> v) =\n                         [p \\<mapsto> v] + y \\<and>\n                         P y", "apply (auto simp: sep_disj_fun_def map_convs map_add_def split: option.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma points_to:\n  \"(p \\<mapsto> v ** P) H \\<Longrightarrow> the (H p) = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<mapsto> v \\<and>* P) H \\<Longrightarrow> the (H p) = v", "by (auto elim!: sep_conjE\n           simp: sep_disj_fun_def maps_to_def map_convs map_add_def\n           split: option.splits)"], ["", "(* This differs from the original and uses separation logic for the definition. *)"], ["", "primrec\n  list :: \"nat \\<Rightarrow> nat list \\<Rightarrow> heap \\<Rightarrow> bool\"\nwhere\n  \"list i [] = (\\<langle>i=0\\<rangle> and \\<box>)\"\n| \"list i (x#xs) = (\\<langle>i=x \\<and> i\\<noteq>0\\<rangle> and (EXS j. i \\<mapsto> j ** list j xs))\""], ["", "lemma list_empty [simp]:\n  shows \"list 0 xs = (\\<lambda>s. xs = [] \\<and> \\<box> s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list 0 xs = (\\<lambda>s. xs = [] \\<and> \\<box> s)", "by (cases xs) auto"], ["", "(* The examples from Hoare/Separation.thy *)"], ["", "lemma \"VARS x y z w h\n {(x \\<mapsto> y ** z \\<mapsto> w) h}\n SKIP\n {x \\<noteq> z}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x \\<mapsto> y \\<and>* z \\<mapsto> w) h} \n     SKIP \n     {x \\<noteq> z}", "apply vcg"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z w h.\n       (x \\<mapsto> y \\<and>* z \\<mapsto> w) h \\<Longrightarrow>\n       x \\<noteq> z", "apply(auto elim!: sep_conjE simp: maps_to_def sep_disj_fun_def domain_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma \"VARS H x y z w\n {(P ** Q) H}\n SKIP\n {(Q ** P) H}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(P \\<and>* Q) H} \n     SKIP \n     {(Q \\<and>* P) H}", "apply vcg"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>H x y z w. (P \\<and>* Q) H \\<Longrightarrow> (Q \\<and>* P) H", "apply(simp add: sep_conj_commute)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma \"VARS H\n {p\\<noteq>0 \\<and> (p \\<mapsto> - ** list q qs) H}\n H := H(p \\<mapsto> q)\n {list p (p#qs) H}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p \\<noteq> 0 \\<and> (p \\<mapsto> - \\<and>* list q qs) H} \n     H := H(p \\<mapsto> q) \n     {list p (p # qs) H}", "apply vcg"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>H.\n       p \\<noteq> 0 \\<and>\n       (p \\<mapsto> - \\<and>* list q qs) H \\<Longrightarrow>\n       list p (p # qs) (H(p \\<mapsto> q))", "apply (auto intro: maps_to_write)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma \"VARS H p q r\n  {(list p Ps ** list q Qs) H}\n  WHILE p \\<noteq> 0\n  INV {\\<exists>ps qs. (list p ps ** list q qs) H \\<and> rev ps @ qs = rev Ps @ Qs}\n  DO r := p; p := the(H p); H := H(r \\<mapsto> q); q := r OD\n  {list q (rev Ps @ Qs) H}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(list p Ps \\<and>* list q Qs) H} \n     WHILE p \\<noteq> 0\n      INV {\\<exists>ps qs.\n              (list p ps \\<and>* list q qs) H \\<and>\n              rev ps @ qs = rev Ps @ Qs} \n      VAR {\\<lambda>(H, p, q, r). 0} \n      DO r := p; p := the (H p); H := H(r \\<mapsto> q); q := r OD \n     {list q (rev Ps @ Qs) H}", "supply [[simproc del: defined_all]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(list p Ps \\<and>* list q Qs) H} \n     WHILE p \\<noteq> 0\n      INV {\\<exists>ps qs.\n              (list p ps \\<and>* list q qs) H \\<and>\n              rev ps @ qs = rev Ps @ Qs} \n      VAR {\\<lambda>(H, p, q, r). 0} \n      DO r := p; p := the (H p); H := H(r \\<mapsto> q); q := r OD \n     {list q (rev Ps @ Qs) H}", "apply vcg"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>H p q r.\n       (list p Ps \\<and>* list q Qs) H \\<Longrightarrow>\n       \\<exists>ps qs.\n          (list p ps \\<and>* list q qs) H \\<and> rev ps @ qs = rev Ps @ Qs\n 2. \\<And>H p q r.\n       (\\<exists>ps qs.\n           (list p ps \\<and>* list q qs) H \\<and>\n           rev ps @ qs = rev Ps @ Qs) \\<and>\n       p \\<noteq> 0 \\<Longrightarrow>\n       \\<exists>ps qs.\n          (list (the (H p)) ps \\<and>* list p qs) (H(p \\<mapsto> q)) \\<and>\n          rev ps @ qs = rev Ps @ Qs\n 3. \\<And>H p q r.\n       (\\<exists>ps qs.\n           (list p ps \\<and>* list q qs) H \\<and>\n           rev ps @ qs = rev Ps @ Qs) \\<and>\n       \\<not> p \\<noteq> 0 \\<Longrightarrow>\n       list q (rev Ps @ Qs) H", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>H p q r.\n       (\\<exists>ps qs.\n           (list p ps \\<and>* list q qs) H \\<and>\n           rev ps @ qs = rev Ps @ Qs) \\<and>\n       p \\<noteq> 0 \\<Longrightarrow>\n       \\<exists>ps qs.\n          (list (the (H p)) ps \\<and>* list p qs) (H(p \\<mapsto> q)) \\<and>\n          rev ps @ qs = rev Ps @ Qs\n 2. \\<And>H p q r.\n       (\\<exists>ps qs.\n           (list p ps \\<and>* list q qs) H \\<and>\n           rev ps @ qs = rev Ps @ Qs) \\<and>\n       \\<not> p \\<noteq> 0 \\<Longrightarrow>\n       list q (rev Ps @ Qs) H", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>H p q ps qs.\n       \\<lbrakk>0 < p; (list p ps \\<and>* list q qs) H;\n        rev ps @ qs = rev Ps @ Qs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps qs.\n                            (list (the (H p)) ps \\<and>* list p qs)\n                             (H(p \\<mapsto> q)) \\<and>\n                            rev ps @ qs = rev Ps @ Qs\n 2. \\<And>H p q r.\n       (\\<exists>ps qs.\n           (list p ps \\<and>* list q qs) H \\<and>\n           rev ps @ qs = rev Ps @ Qs) \\<and>\n       \\<not> p \\<noteq> 0 \\<Longrightarrow>\n       list q (rev Ps @ Qs) H", "apply (case_tac ps, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>H p q ps qs a lista.\n       \\<lbrakk>0 < p; (list p ps \\<and>* list q qs) H;\n        rev ps @ qs = rev Ps @ Qs; ps = a # lista\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps qs.\n                            (list (the (H p)) ps \\<and>* list p qs)\n                             (H(p \\<mapsto> q)) \\<and>\n                            rev ps @ qs = rev Ps @ Qs\n 2. \\<And>H p q r.\n       (\\<exists>ps qs.\n           (list p ps \\<and>* list q qs) H \\<and>\n           rev ps @ qs = rev Ps @ Qs) \\<and>\n       \\<not> p \\<noteq> 0 \\<Longrightarrow>\n       list q (rev Ps @ Qs) H", "apply (rename_tac p ps')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>H pa q ps qs p ps'.\n       \\<lbrakk>0 < pa; (list pa ps \\<and>* list q qs) H;\n        rev ps @ qs = rev Ps @ Qs; ps = p # ps'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps qs.\n                            (list (the (H pa)) ps \\<and>* list pa qs)\n                             (H(pa \\<mapsto> q)) \\<and>\n                            rev ps @ qs = rev Ps @ Qs\n 2. \\<And>H p q r.\n       (\\<exists>ps qs.\n           (list p ps \\<and>* list q qs) H \\<and>\n           rev ps @ qs = rev Ps @ Qs) \\<and>\n       \\<not> p \\<noteq> 0 \\<Longrightarrow>\n       list q (rev Ps @ Qs) H", "apply (clarsimp simp: sep_conj_exists sep_conj_ac)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>H q qs p ps' x.\n       \\<lbrakk>0 < p; rev ps' @ p # qs = rev Ps @ Qs;\n        (list q qs \\<and>* list x ps' \\<and>* p \\<mapsto> x) H\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps qs.\n                            (list p qs \\<and>* list (the (H p)) ps)\n                             (H(p \\<mapsto> q)) \\<and>\n                            rev ps @ qs = rev Ps @ Qs\n 2. \\<And>H p q r.\n       (\\<exists>ps qs.\n           (list p ps \\<and>* list q qs) H \\<and>\n           rev ps @ qs = rev Ps @ Qs) \\<and>\n       \\<not> p \\<noteq> 0 \\<Longrightarrow>\n       list q (rev Ps @ Qs) H", "apply (sep_subst points_to)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>H q qs p ps' x.\n       \\<lbrakk>0 < p; rev ps' @ p # qs = rev Ps @ Qs;\n        (list q qs \\<and>* list x ps' \\<and>* p \\<mapsto> x) H\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps qs.\n                            (list p qs \\<and>* list x ps)\n                             (H(p \\<mapsto> q)) \\<and>\n                            rev ps @ qs = rev Ps @ Qs\n 2. \\<And>H p q r.\n       (\\<exists>ps qs.\n           (list p ps \\<and>* list q qs) H \\<and>\n           rev ps @ qs = rev Ps @ Qs) \\<and>\n       \\<not> p \\<noteq> 0 \\<Longrightarrow>\n       list q (rev Ps @ Qs) H", "apply (rule_tac x = \"ps'\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>H q qs p ps' x.\n       \\<lbrakk>0 < p; rev ps' @ p # qs = rev Ps @ Qs;\n        (list q qs \\<and>* list x ps' \\<and>* p \\<mapsto> x) H\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            (list p qs \\<and>* list x ps')\n                             (H(p \\<mapsto> q)) \\<and>\n                            rev ps' @ qs = rev Ps @ Qs\n 2. \\<And>H p q r.\n       (\\<exists>ps qs.\n           (list p ps \\<and>* list q qs) H \\<and>\n           rev ps @ qs = rev Ps @ Qs) \\<and>\n       \\<not> p \\<noteq> 0 \\<Longrightarrow>\n       list q (rev Ps @ Qs) H", "apply (rule_tac x = \"p # qs\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>H q qs p ps' x.\n       \\<lbrakk>0 < p; rev ps' @ p # qs = rev Ps @ Qs;\n        (list q qs \\<and>* list x ps' \\<and>* p \\<mapsto> x) H\\<rbrakk>\n       \\<Longrightarrow> (list p (p # qs) \\<and>* list x ps')\n                          (H(p \\<mapsto> q)) \\<and>\n                         rev ps' @ p # qs = rev Ps @ Qs\n 2. \\<And>H p q r.\n       (\\<exists>ps qs.\n           (list p ps \\<and>* list q qs) H \\<and>\n           rev ps @ qs = rev Ps @ Qs) \\<and>\n       \\<not> p \\<noteq> 0 \\<Longrightarrow>\n       list q (rev Ps @ Qs) H", "apply (simp add: sep_conj_exists sep_conj_ac)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>H q qs p ps' x.\n       \\<lbrakk>0 < p; rev ps' @ p # qs = rev Ps @ Qs;\n        (list q qs \\<and>* list x ps' \\<and>* p \\<mapsto> x) H\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (list x ps' \\<and>*\n                             list xa qs \\<and>* p \\<mapsto> xa)\n                             (H(p \\<mapsto> q))\n 2. \\<And>H p q r.\n       (\\<exists>ps qs.\n           (list p ps \\<and>* list q qs) H \\<and>\n           rev ps @ qs = rev Ps @ Qs) \\<and>\n       \\<not> p \\<noteq> 0 \\<Longrightarrow>\n       list q (rev Ps @ Qs) H", "apply (rule exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>H q qs p ps' x.\n       \\<lbrakk>0 < p; rev ps' @ p # qs = rev Ps @ Qs;\n        (list q qs \\<and>* list x ps' \\<and>* p \\<mapsto> x) H\\<rbrakk>\n       \\<Longrightarrow> (list x ps' \\<and>*\n                          list (?x50 H q qs p ps' x) qs \\<and>*\n                          p \\<mapsto> ?x50 H q qs p ps' x)\n                          (H(p \\<mapsto> q))\n 2. \\<And>H p q r.\n       (\\<exists>ps qs.\n           (list p ps \\<and>* list q qs) H \\<and>\n           rev ps @ qs = rev Ps @ Qs) \\<and>\n       \\<not> p \\<noteq> 0 \\<Longrightarrow>\n       list q (rev Ps @ Qs) H", "apply (sep_rule maps_to_write)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>H q qs p ps' x.\n       \\<lbrakk>0 < p; rev ps' @ p # qs = rev Ps @ Qs;\n        (list q qs \\<and>* list x ps' \\<and>* p \\<mapsto> x) H\\<rbrakk>\n       \\<Longrightarrow> (p \\<mapsto> - \\<and>*\n                          list x ps' \\<and>* list q qs)\n                          H\n 2. \\<And>H p q r.\n       (\\<exists>ps qs.\n           (list p ps \\<and>* list q qs) H \\<and>\n           rev ps @ qs = rev Ps @ Qs) \\<and>\n       \\<not> p \\<noteq> 0 \\<Longrightarrow>\n       list q (rev Ps @ Qs) H", "apply ((sep_cancel add: maps_to_maps_to_ex)+)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>H p q r.\n       (\\<exists>ps qs.\n           (list p ps \\<and>* list q qs) H \\<and>\n           rev ps @ qs = rev Ps @ Qs) \\<and>\n       \\<not> p \\<noteq> 0 \\<Longrightarrow>\n       list q (rev Ps @ Qs) H", "apply clarsimp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}