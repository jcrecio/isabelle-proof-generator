{"file_name": "/home/qj213/afp-2021-10-22/thys/Separation_Algebra/Separation_Algebra_Alt.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Separation_Algebra", "problem_names": ["lemma disj_com: \"x ## y = y ## x\"", "lemma disj_zero [simp]: \"x ## 0\"", "lemma disj_zero2 [simp]: \"0 ## x\"", "lemma add_zero2 [simp]: \"0 \\<oplus> x = Some x\"", "lemma add2_comm:\n  \"a ++ b = b ++ a\"", "lemma add2_None [simp]:\n  \"x ++ None = None\"", "lemma None_add2 [simp]:\n  \"None ++ x = None\"", "lemma add2_Some_Some:\n  \"Some x ++ Some y = x \\<oplus> y\"", "lemma add2_zero [simp]:\n  \"Some x ++ Some 0 = Some x\"", "lemma zero_add2 [simp]:\n  \"Some 0 ++ Some x = Some x\"", "lemma sep_conjE:\n  \"\\<lbrakk> (P ** Q) s; \\<And>p q. \\<lbrakk> P p; Q q; p \\<oplus> q = Some s \\<rbrakk> \\<Longrightarrow> X \\<rbrakk> \\<Longrightarrow> X\"", "lemma sep_conjI:\n  \"\\<lbrakk> P p; Q q; p \\<oplus> q = Some s \\<rbrakk> \\<Longrightarrow> (P ** Q) s\"", "lemma sep_conj_comI:\n  \"(P ** Q) s \\<Longrightarrow> (Q ** P) s\"", "lemma sep_conj_com:\n  \"P ** Q = Q ** P\"", "lemma lift_to_add2:\n  \"\\<lbrakk>z \\<oplus> q = Some s; x \\<oplus> y = Some q\\<rbrakk> \\<Longrightarrow> Some z ++ Some x ++ Some y = Some s\"", "lemma lift_to_add2':\n  \"\\<lbrakk>q \\<oplus> z = Some s; x \\<oplus> y = Some q\\<rbrakk> \\<Longrightarrow> (Some x ++ Some y) ++ Some z = Some s\"", "lemma add2_Some:\n  \"(x ++ Some y = Some z) = (\\<exists>x'. x = Some x' \\<and> x' \\<oplus> y = Some z)\"", "lemma Some_add2:\n  \"(Some x ++ y = Some z) = (\\<exists>y'. y = Some y' \\<and> x \\<oplus> y' = Some z)\"", "lemma sep_conj_assoc:\n  \"P ** (Q ** R) = (P ** Q) ** R\"", "lemma (in -) sep_true[simp]: \"sep_true s\"", "lemma (in -) sep_false[simp]: \"\\<not>sep_false x\"", "lemma sep_conj_sep_true:\n  \"P s \\<Longrightarrow> (P ** sep_true) s\"", "lemma sep_conj_sep_true':\n  \"P s \\<Longrightarrow> (sep_true ** P) s\"", "lemma disjoint_submaps_exist:\n  \"\\<exists>h\\<^sub>0 h\\<^sub>1. h\\<^sub>0 \\<oplus> h\\<^sub>1 = Some h\"", "lemma sep_conj_true[simp]:\n  \"(sep_true ** sep_true) = sep_true\"", "lemma sep_conj_false_right[simp]:\n  \"(P ** sep_false) = sep_false\"", "lemma sep_conj_false_left[simp]:\n  \"(sep_false ** P) = sep_false\"", "lemma sep_conj_left_com:\n  \"(P ** (Q ** R)) = (Q ** (P ** R))\" (is \"?x = ?y\")", "lemmas sep_conj_ac = sep_conj_com sep_conj_assoc sep_conj_left_com", "lemma empty_empty[simp]: \"\\<box> 0\"", "lemma sep_conj_empty[simp]:\n  \"(P ** \\<box>) = P\"", "lemma sep_conj_empty'[simp]:\n  \"(\\<box> ** P) = P\"", "lemma sep_conj_sep_emptyI:\n  \"P s \\<Longrightarrow> (P ** \\<box>) s\"", "lemma sep_conj_true_P[simp]:\n  \"(sep_true ** (sep_true ** P)) = (sep_true ** P)\"", "lemma sep_conj_disj:\n  \"((\\<lambda>s. P s \\<or> Q s) ** R) s = ((P ** R) s \\<or> (Q ** R) s)\" (is \"?x = (?y \\<or> ?z)\")", "lemma sep_conj_conj:\n  \"((\\<lambda>s. P s \\<and> Q s) ** R) s \\<Longrightarrow> (P ** R) s \\<and> (Q ** R) s\"", "lemma sep_conj_exists1:\n  \"((\\<lambda>s. \\<exists>x. P x s) ** Q) s = (\\<exists>x. (P x ** Q) s)\"", "lemma sep_conj_exists2:\n  \"(P ** (\\<lambda>s. \\<exists>x. Q x s)) = (\\<lambda>s. (\\<exists>x. (P ** Q x) s))\"", "lemmas sep_conj_exists = sep_conj_exists1 sep_conj_exists2", "lemma sep_conj_forall:\n  \"((\\<lambda>s. \\<forall>x. P x s) ** Q) s \\<Longrightarrow> (P x ** Q) s\"", "lemma sep_conj_impl:\n  \"\\<lbrakk> (P ** Q) s; \\<And>s. P s \\<Longrightarrow> P' s; \\<And>s. Q s \\<Longrightarrow> Q' s \\<rbrakk> \\<Longrightarrow> (P' ** Q') s\"", "lemma sep_conj_impl1:\n  assumes P: \"\\<And>s. P s \\<Longrightarrow> I s\"\n  shows \"(P ** R) s \\<Longrightarrow> (I ** R) s\"", "lemma sep_conj_sep_true_left:\n  \"(P ** Q) s \\<Longrightarrow> (sep_true ** Q) s\"", "lemma sep_conj_sep_true_right:\n  \"(P ** Q) s \\<Longrightarrow> (P ** sep_true) s\"", "lemma sep_globalise:\n  \"\\<lbrakk> (P ** R) s; (\\<And>s. P s \\<Longrightarrow> Q s) \\<rbrakk> \\<Longrightarrow> (Q ** R) s\"", "lemma sep_implI:\n  assumes a: \"\\<And>h' h''. \\<lbrakk> h \\<oplus> h' = Some h''; P h' \\<rbrakk> \\<Longrightarrow> Q h''\"\n  shows \"(P \\<longrightarrow>\\<^sup>* Q) h\"", "lemma sep_implD:\n  \"(x \\<longrightarrow>\\<^sup>* y) h \\<Longrightarrow> \\<forall>h' h''. h \\<oplus> h' = Some h'' \\<and> x h' \\<longrightarrow> y h''\"", "lemma sep_impl_sep_true[simp]:\n  \"(P \\<longrightarrow>\\<^sup>* sep_true) = sep_true\"", "lemma sep_impl_sep_false[simp]:\n  \"(sep_false \\<longrightarrow>\\<^sup>* P) = sep_true\"", "lemma sep_impl_sep_true_P:\n  \"(sep_true \\<longrightarrow>\\<^sup>* P) s \\<Longrightarrow> P s\"", "lemma sep_impl_sep_true_false[simp]:\n  \"(sep_true \\<longrightarrow>\\<^sup>* sep_false) = sep_false\"", "lemma sep_conj_sep_impl:\n  \"\\<lbrakk> P s; \\<And>s. (P ** Q) s \\<Longrightarrow> R s \\<rbrakk> \\<Longrightarrow> (Q \\<longrightarrow>\\<^sup>* R) s\"", "lemma sep_conj_sep_impl2:\n  \"\\<lbrakk> (P ** Q) s; \\<And>s. P s \\<Longrightarrow> (Q \\<longrightarrow>\\<^sup>* R) s \\<rbrakk> \\<Longrightarrow> R s\"", "lemma sep_conj_sep_impl_sep_conj2:\n  \"(P ** R) s \\<Longrightarrow> (P ** (Q \\<longrightarrow>\\<^sup>* (Q ** R))) s\"", "lemma sep_conj_triv_strip2:\n  \"Q = R \\<Longrightarrow> (Q ** P) = (R ** P)\""], "translations": [["", "lemma disj_com: \"x ## y = y ## x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ## y = y ## x", "by (auto simp: disjoint_def add_comm)"], ["", "lemma disj_zero [simp]: \"x ## 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ## (0::'a)", "by (auto simp: disjoint_def)"], ["", "lemma disj_zero2 [simp]: \"0 ## x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) ## x", "by (subst disj_com) simp"], ["", "lemma add_zero2 [simp]: \"0 \\<oplus> x = Some x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) \\<oplus> x = Some x", "by (subst add_comm) auto"], ["", "definition\n  substate :: \"'a => 'a => bool\" (infix \"\\<preceq>\" 60) where\n  \"a \\<preceq> b \\<equiv> \\<exists>c. a \\<oplus> c = Some b\""], ["", "definition\n  sep_conj :: \"('a \\<Rightarrow> bool) \\<Rightarrow> ('a \\<Rightarrow> bool) \\<Rightarrow> ('a \\<Rightarrow> bool)\" (infixl \"**\" 61)\n  where\n  \"P ** Q \\<equiv> \\<lambda>s. \\<exists>p q. p \\<oplus> q = Some s \\<and> P p \\<and> Q q\""], ["", "definition emp :: \"'a \\<Rightarrow> bool\" (\"\\<box>\") where\n  \"\\<box> \\<equiv> \\<lambda>s. s = 0\""], ["", "definition\n  sep_impl :: \"('a \\<Rightarrow> bool) \\<Rightarrow> ('a \\<Rightarrow> bool) \\<Rightarrow> ('a \\<Rightarrow> bool)\" (infixr \"\\<longrightarrow>\\<^sup>*\" 25)\n  where\n  \"P \\<longrightarrow>\\<^sup>* Q \\<equiv> \\<lambda>h. \\<forall>h' h''. h \\<oplus> h' = Some h'' \\<and> P h' \\<longrightarrow> Q h''\""], ["", "definition (in -)\n  \"sep_true \\<equiv> \\<lambda>s. True\""], ["", "definition (in -)\n  \"sep_false \\<equiv> \\<lambda>s. False\""], ["", "abbreviation\n  add2 :: \"'a option => 'a option => 'a option\" (infixr \"++\" 65)\nwhere\n  \"add2 == lift2 add\""], ["", "lemma add2_comm:\n  \"a ++ b = b ++ a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a ++ b = b ++ a", "by (simp add: lift2_def add_comm split: option.splits)"], ["", "lemma add2_None [simp]:\n  \"x ++ None = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ++ None = None", "by (simp add: lift2_def split: option.splits)"], ["", "lemma None_add2 [simp]:\n  \"None ++ x = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None ++ x = None", "by (simp add: lift2_def split: option.splits)"], ["", "lemma add2_Some_Some:\n  \"Some x ++ Some y = x \\<oplus> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some x ++ Some y = x \\<oplus> y", "by (simp add: lift2_def)"], ["", "lemma add2_zero [simp]:\n  \"Some x ++ Some 0 = Some x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some x ++ Some (0::'a) = Some x", "by (simp add: add2_Some_Some)"], ["", "lemma zero_add2 [simp]:\n  \"Some 0 ++ Some x = Some x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some (0::'a) ++ Some x = Some x", "by (simp add: add2_Some_Some)"], ["", "lemma sep_conjE:\n  \"\\<lbrakk> (P ** Q) s; \\<And>p q. \\<lbrakk> P p; Q q; p \\<oplus> q = Some s \\<rbrakk> \\<Longrightarrow> X \\<rbrakk> \\<Longrightarrow> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(P ** Q) s;\n     \\<And>p q.\n        \\<lbrakk>P p; Q q; p \\<oplus> q = Some s\\<rbrakk>\n        \\<Longrightarrow> X\\<rbrakk>\n    \\<Longrightarrow> X", "by (auto simp: sep_conj_def)"], ["", "lemma sep_conjI:\n  \"\\<lbrakk> P p; Q q; p \\<oplus> q = Some s \\<rbrakk> \\<Longrightarrow> (P ** Q) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P p; Q q; p \\<oplus> q = Some s\\<rbrakk>\n    \\<Longrightarrow> (P ** Q) s", "by (auto simp: sep_conj_def)"], ["", "lemma sep_conj_comI:\n  \"(P ** Q) s \\<Longrightarrow> (Q ** P) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P ** Q) s \\<Longrightarrow> (Q ** P) s", "by (auto intro!: sep_conjI elim!: sep_conjE simp: add_comm)"], ["", "lemma sep_conj_com:\n  \"P ** Q = Q ** P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P ** Q = Q ** P", "by (auto intro: sep_conj_comI intro!: ext)"], ["", "lemma lift_to_add2:\n  \"\\<lbrakk>z \\<oplus> q = Some s; x \\<oplus> y = Some q\\<rbrakk> \\<Longrightarrow> Some z ++ Some x ++ Some y = Some s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<oplus> q = Some s; x \\<oplus> y = Some q\\<rbrakk>\n    \\<Longrightarrow> Some z ++ Some x ++ Some y = Some s", "by (simp add: add2_Some_Some)"], ["", "lemma lift_to_add2':\n  \"\\<lbrakk>q \\<oplus> z = Some s; x \\<oplus> y = Some q\\<rbrakk> \\<Longrightarrow> (Some x ++ Some y) ++ Some z = Some s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<oplus> z = Some s; x \\<oplus> y = Some q\\<rbrakk>\n    \\<Longrightarrow> (Some x ++ Some y) ++ Some z = Some s", "by (simp add: add2_Some_Some)"], ["", "lemma add2_Some:\n  \"(x ++ Some y = Some z) = (\\<exists>x'. x = Some x' \\<and> x' \\<oplus> y = Some z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x ++ Some y = Some z) =\n    (\\<exists>x'. x = Some x' \\<and> x' \\<oplus> y = Some z)", "by (simp add: lift2_def split: option.splits)"], ["", "lemma Some_add2:\n  \"(Some x ++ y = Some z) = (\\<exists>y'. y = Some y' \\<and> x \\<oplus> y' = Some z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Some x ++ y = Some z) =\n    (\\<exists>y'. y = Some y' \\<and> x \\<oplus> y' = Some z)", "by (simp add: lift2_def split: option.splits)"], ["", "lemma sep_conj_assoc:\n  \"P ** (Q ** R) = (P ** Q) ** R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P ** (Q ** R) = P ** Q ** R", "unfolding sep_conj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s.\n        \\<exists>p q.\n           p \\<oplus> q = Some s \\<and>\n           P p \\<and>\n           (\\<exists>p qa. p \\<oplus> qa = Some q \\<and> Q p \\<and> R qa)) =\n    (\\<lambda>s.\n        \\<exists>p q.\n           p \\<oplus> q = Some s \\<and>\n           (\\<exists>pa q.\n               pa \\<oplus> q = Some p \\<and> P pa \\<and> Q q) \\<and>\n           R q)", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       (\\<exists>p q.\n           p \\<oplus> q = Some s \\<and>\n           P p \\<and>\n           (\\<exists>p qa. p \\<oplus> qa = Some q \\<and> Q p \\<and> R qa)) =\n       (\\<exists>p q.\n           p \\<oplus> q = Some s \\<and>\n           (\\<exists>pa q.\n               pa \\<oplus> q = Some p \\<and> P pa \\<and> Q q) \\<and>\n           R q)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<exists>p q.\n          p \\<oplus> q = Some s \\<and>\n          P p \\<and>\n          (\\<exists>p qa.\n              p \\<oplus> qa = Some q \\<and>\n              Q p \\<and> R qa) \\<Longrightarrow>\n       \\<exists>p q.\n          p \\<oplus> q = Some s \\<and>\n          (\\<exists>pa q.\n              pa \\<oplus> q = Some p \\<and> P pa \\<and> Q q) \\<and>\n          R q\n 2. \\<And>s.\n       \\<exists>p q.\n          p \\<oplus> q = Some s \\<and>\n          (\\<exists>pa q.\n              pa \\<oplus> q = Some p \\<and> P pa \\<and> Q q) \\<and>\n          R q \\<Longrightarrow>\n       \\<exists>p q.\n          p \\<oplus> q = Some s \\<and>\n          P p \\<and>\n          (\\<exists>p qa. p \\<oplus> qa = Some q \\<and> Q p \\<and> R qa)", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s p q pa qa.\n       \\<lbrakk>p \\<oplus> q = Some s; P p; pa \\<oplus> qa = Some q; Q pa;\n        R qa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p q.\n                            p \\<oplus> q = Some s \\<and>\n                            (\\<exists>pa q.\n                                pa \\<oplus> q = Some p \\<and>\n                                P pa \\<and> Q q) \\<and>\n                            R q\n 2. \\<And>s.\n       \\<exists>p q.\n          p \\<oplus> q = Some s \\<and>\n          (\\<exists>pa q.\n              pa \\<oplus> q = Some p \\<and> P pa \\<and> Q q) \\<and>\n          R q \\<Longrightarrow>\n       \\<exists>p q.\n          p \\<oplus> q = Some s \\<and>\n          P p \\<and>\n          (\\<exists>p qa. p \\<oplus> qa = Some q \\<and> Q p \\<and> R qa)", "apply (drule (1) lift_to_add2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s p q pa qa.\n       \\<lbrakk>P p; pa \\<oplus> qa = Some q; Q pa; R qa;\n        Some p ++ Some pa ++ Some qa = Some s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p q.\n                            p \\<oplus> q = Some s \\<and>\n                            (\\<exists>pa q.\n                                pa \\<oplus> q = Some p \\<and>\n                                P pa \\<and> Q q) \\<and>\n                            R q\n 2. \\<And>s.\n       \\<exists>p q.\n          p \\<oplus> q = Some s \\<and>\n          (\\<exists>pa q.\n              pa \\<oplus> q = Some p \\<and> P pa \\<and> Q q) \\<and>\n          R q \\<Longrightarrow>\n       \\<exists>p q.\n          p \\<oplus> q = Some s \\<and>\n          P p \\<and>\n          (\\<exists>p qa. p \\<oplus> qa = Some q \\<and> Q p \\<and> R qa)", "apply (subst (asm) add_assoc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s p q pa qa.\n       \\<lbrakk>P p; pa \\<oplus> qa = Some q; Q pa; R qa;\n        (Some p ++ Some pa) ++ Some qa = Some s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p q.\n                            p \\<oplus> q = Some s \\<and>\n                            (\\<exists>pa q.\n                                pa \\<oplus> q = Some p \\<and>\n                                P pa \\<and> Q q) \\<and>\n                            R q\n 2. \\<And>s.\n       \\<exists>p q.\n          p \\<oplus> q = Some s \\<and>\n          (\\<exists>pa q.\n              pa \\<oplus> q = Some p \\<and> P pa \\<and> Q q) \\<and>\n          R q \\<Longrightarrow>\n       \\<exists>p q.\n          p \\<oplus> q = Some s \\<and>\n          P p \\<and>\n          (\\<exists>p qa. p \\<oplus> qa = Some q \\<and> Q p \\<and> R qa)", "apply (fastforce simp: add2_Some_Some add2_Some)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<exists>p q.\n          p \\<oplus> q = Some s \\<and>\n          (\\<exists>pa q.\n              pa \\<oplus> q = Some p \\<and> P pa \\<and> Q q) \\<and>\n          R q \\<Longrightarrow>\n       \\<exists>p q.\n          p \\<oplus> q = Some s \\<and>\n          P p \\<and>\n          (\\<exists>p qa. p \\<oplus> qa = Some q \\<and> Q p \\<and> R qa)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s p q pa qa.\n       \\<lbrakk>p \\<oplus> q = Some s; R q; pa \\<oplus> qa = Some p; P pa;\n        Q qa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p q.\n                            p \\<oplus> q = Some s \\<and>\n                            P p \\<and>\n                            (\\<exists>p qa.\n                                p \\<oplus> qa = Some q \\<and>\n                                Q p \\<and> R qa)", "apply (drule (1) lift_to_add2')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s p q pa qa.\n       \\<lbrakk>R q; pa \\<oplus> qa = Some p; P pa; Q qa;\n        (Some pa ++ Some qa) ++ Some q = Some s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p q.\n                            p \\<oplus> q = Some s \\<and>\n                            P p \\<and>\n                            (\\<exists>p qa.\n                                p \\<oplus> qa = Some q \\<and>\n                                Q p \\<and> R qa)", "apply (subst (asm) add_assoc [symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s p q pa qa.\n       \\<lbrakk>R q; pa \\<oplus> qa = Some p; P pa; Q qa;\n        Some pa ++ Some qa ++ Some q = Some s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p q.\n                            p \\<oplus> q = Some s \\<and>\n                            P p \\<and>\n                            (\\<exists>p qa.\n                                p \\<oplus> qa = Some q \\<and>\n                                Q p \\<and> R qa)", "apply (fastforce simp: add2_Some_Some Some_add2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in -) sep_true[simp]: \"sep_true s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sep_true s", "by (simp add: sep_true_def)"], ["", "lemma (in -) sep_false[simp]: \"\\<not>sep_false x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> sep_false x", "by (simp add: sep_false_def)"], ["", "lemma sep_conj_sep_true:\n  \"P s \\<Longrightarrow> (P ** sep_true) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P s \\<Longrightarrow> (P ** sep_true) s", "by (auto simp: sep_conjI [where q=0])"], ["", "lemma sep_conj_sep_true':\n  \"P s \\<Longrightarrow> (sep_true ** P) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P s \\<Longrightarrow> (sep_true ** P) s", "by (auto simp: sep_conjI [where p=0])"], ["", "lemma disjoint_submaps_exist:\n  \"\\<exists>h\\<^sub>0 h\\<^sub>1. h\\<^sub>0 \\<oplus> h\\<^sub>1 = Some h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>h\\<^sub>0 h\\<^sub>1. h\\<^sub>0 \\<oplus> h\\<^sub>1 = Some h", "by (rule_tac x=0 in exI, auto)"], ["", "lemma sep_conj_true[simp]:\n  \"(sep_true ** sep_true) = sep_true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sep_true ** sep_true = sep_true", "unfolding sep_conj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s.\n        \\<exists>p q.\n           p \\<oplus> q = Some s \\<and> sep_true p \\<and> sep_true q) =\n    sep_true", "by (auto intro!: ext intro: disjoint_submaps_exist)"], ["", "lemma sep_conj_false_right[simp]:\n  \"(P ** sep_false) = sep_false\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P ** sep_false = sep_false", "by (force elim: sep_conjE intro!: ext)"], ["", "lemma sep_conj_false_left[simp]:\n  \"(sep_false ** P) = sep_false\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sep_false ** P = sep_false", "by (subst sep_conj_com) (rule sep_conj_false_right)"], ["", "lemma sep_conj_left_com:\n  \"(P ** (Q ** R)) = (Q ** (P ** R))\" (is \"?x = ?y\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. P ** (Q ** R) = Q ** (P ** R)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P ** (Q ** R) = Q ** (P ** R)", "have \"?x = ((Q ** R) ** P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P ** (Q ** R) = Q ** R ** P", "by (simp add: sep_conj_com)"], ["proof (state)\nthis:\n  P ** (Q ** R) = Q ** R ** P\n\ngoal (1 subgoal):\n 1. P ** (Q ** R) = Q ** (P ** R)", "also"], ["proof (state)\nthis:\n  P ** (Q ** R) = Q ** R ** P\n\ngoal (1 subgoal):\n 1. P ** (Q ** R) = Q ** (P ** R)", "have \"\\<dots> = (Q ** (R ** P))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q ** R ** P = Q ** (R ** P)", "by (subst sep_conj_assoc, simp)"], ["proof (state)\nthis:\n  Q ** R ** P = Q ** (R ** P)\n\ngoal (1 subgoal):\n 1. P ** (Q ** R) = Q ** (P ** R)", "finally"], ["proof (chain)\npicking this:\n  P ** (Q ** R) = Q ** (R ** P)", "show ?thesis"], ["proof (prove)\nusing this:\n  P ** (Q ** R) = Q ** (R ** P)\n\ngoal (1 subgoal):\n 1. P ** (Q ** R) = Q ** (P ** R)", "by (simp add: sep_conj_com)"], ["proof (state)\nthis:\n  P ** (Q ** R) = Q ** (P ** R)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas sep_conj_ac = sep_conj_com sep_conj_assoc sep_conj_left_com"], ["", "lemma empty_empty[simp]: \"\\<box> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<box> (0::'a)", "by (simp add: emp_def)"], ["", "lemma sep_conj_empty[simp]:\n  \"(P ** \\<box>) = P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P ** \\<box> = P", "by (simp add: sep_conj_def emp_def)"], ["", "lemma sep_conj_empty'[simp]:\n  \"(\\<box> ** P) = P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<box> ** P = P", "by (subst sep_conj_com, rule sep_conj_empty)"], ["", "lemma sep_conj_sep_emptyI:\n  \"P s \\<Longrightarrow> (P ** \\<box>) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P s \\<Longrightarrow> (P ** \\<box>) s", "by simp"], ["", "lemma sep_conj_true_P[simp]:\n  \"(sep_true ** (sep_true ** P)) = (sep_true ** P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sep_true ** (sep_true ** P) = sep_true ** P", "by (simp add: sep_conj_assoc)"], ["", "lemma sep_conj_disj:\n  \"((\\<lambda>s. P s \\<or> Q s) ** R) s = ((P ** R) s \\<or> (Q ** R) s)\" (is \"?x = (?y \\<or> ?z)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>s. P s \\<or> Q s) ** R) s = ((P ** R) s \\<or> (Q ** R) s)", "by (auto simp: sep_conj_def)"], ["", "lemma sep_conj_conj:\n  \"((\\<lambda>s. P s \\<and> Q s) ** R) s \\<Longrightarrow> (P ** R) s \\<and> (Q ** R) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>s. P s \\<and> Q s) ** R) s \\<Longrightarrow>\n    (P ** R) s \\<and> (Q ** R) s", "by (force intro: sep_conjI elim!: sep_conjE)"], ["", "lemma sep_conj_exists1:\n  \"((\\<lambda>s. \\<exists>x. P x s) ** Q) s = (\\<exists>x. (P x ** Q) s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>s. \\<exists>x. P x s) ** Q) s = (\\<exists>x. (P x ** Q) s)", "by (force intro: sep_conjI elim: sep_conjE)"], ["", "lemma sep_conj_exists2:\n  \"(P ** (\\<lambda>s. \\<exists>x. Q x s)) = (\\<lambda>s. (\\<exists>x. (P ** Q x) s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P ** (\\<lambda>s. \\<exists>x. Q x s) =\n    (\\<lambda>s. \\<exists>x. (P ** Q x) s)", "by (force intro!: sep_conjI ext elim!: sep_conjE)"], ["", "lemmas sep_conj_exists = sep_conj_exists1 sep_conj_exists2"], ["", "lemma sep_conj_forall:\n  \"((\\<lambda>s. \\<forall>x. P x s) ** Q) s \\<Longrightarrow> (P x ** Q) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>s. \\<forall>x. P x s) ** Q) s \\<Longrightarrow> (P x ** Q) s", "by (force intro: sep_conjI elim: sep_conjE)"], ["", "lemma sep_conj_impl:\n  \"\\<lbrakk> (P ** Q) s; \\<And>s. P s \\<Longrightarrow> P' s; \\<And>s. Q s \\<Longrightarrow> Q' s \\<rbrakk> \\<Longrightarrow> (P' ** Q') s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(P ** Q) s; \\<And>s. P s \\<Longrightarrow> P' s;\n     \\<And>s. Q s \\<Longrightarrow> Q' s\\<rbrakk>\n    \\<Longrightarrow> (P' ** Q') s", "by (erule sep_conjE, auto intro!: sep_conjI)"], ["", "lemma sep_conj_impl1:\n  assumes P: \"\\<And>s. P s \\<Longrightarrow> I s\"\n  shows \"(P ** R) s \\<Longrightarrow> (I ** R) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P ** R) s \\<Longrightarrow> (I ** R) s", "by (auto intro: sep_conj_impl P)"], ["", "lemma sep_conj_sep_true_left:\n  \"(P ** Q) s \\<Longrightarrow> (sep_true ** Q) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P ** Q) s \\<Longrightarrow> (sep_true ** Q) s", "by (erule sep_conj_impl, simp+)"], ["", "lemma sep_conj_sep_true_right:\n  \"(P ** Q) s \\<Longrightarrow> (P ** sep_true) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P ** Q) s \\<Longrightarrow> (P ** sep_true) s", "by (subst (asm) sep_conj_com, drule sep_conj_sep_true_left,\n      simp add: sep_conj_ac)"], ["", "lemma sep_globalise:\n  \"\\<lbrakk> (P ** R) s; (\\<And>s. P s \\<Longrightarrow> Q s) \\<rbrakk> \\<Longrightarrow> (Q ** R) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(P ** R) s; \\<And>s. P s \\<Longrightarrow> Q s\\<rbrakk>\n    \\<Longrightarrow> (Q ** R) s", "by (fast elim: sep_conj_impl)"], ["", "lemma sep_implI:\n  assumes a: \"\\<And>h' h''. \\<lbrakk> h \\<oplus> h' = Some h''; P h' \\<rbrakk> \\<Longrightarrow> Q h''\"\n  shows \"(P \\<longrightarrow>\\<^sup>* Q) h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P \\<longrightarrow>\\<^sup>* Q) h", "unfolding sep_impl_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>h' h''.\n       h \\<oplus> h' = Some h'' \\<and> P h' \\<longrightarrow> Q h''", "by (auto elim: a)"], ["", "lemma sep_implD:\n  \"(x \\<longrightarrow>\\<^sup>* y) h \\<Longrightarrow> \\<forall>h' h''. h \\<oplus> h' = Some h'' \\<and> x h' \\<longrightarrow> y h''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<longrightarrow>\\<^sup>* y) h \\<Longrightarrow>\n    \\<forall>h' h''.\n       h \\<oplus> h' = Some h'' \\<and> x h' \\<longrightarrow> y h''", "by (force simp: sep_impl_def)"], ["", "lemma sep_impl_sep_true[simp]:\n  \"(P \\<longrightarrow>\\<^sup>* sep_true) = sep_true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P \\<longrightarrow>\\<^sup>* sep_true) = sep_true", "by (force intro!: sep_implI ext)"], ["", "lemma sep_impl_sep_false[simp]:\n  \"(sep_false \\<longrightarrow>\\<^sup>* P) = sep_true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sep_false \\<longrightarrow>\\<^sup>* P) = sep_true", "by (force intro!: sep_implI ext)"], ["", "lemma sep_impl_sep_true_P:\n  \"(sep_true \\<longrightarrow>\\<^sup>* P) s \\<Longrightarrow> P s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sep_true \\<longrightarrow>\\<^sup>* P) s \\<Longrightarrow> P s", "apply (drule sep_implD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>h' h''.\n       s \\<oplus> h' = Some h'' \\<and> sep_true h' \\<longrightarrow>\n       P h'' \\<Longrightarrow>\n    P s", "apply (erule_tac x=0 in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>h''.\n       s \\<oplus> (0::'a) = Some h'' \\<and>\n       sep_true (0::'a) \\<longrightarrow>\n       P h'' \\<Longrightarrow>\n    P s", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma sep_impl_sep_true_false[simp]:\n  \"(sep_true \\<longrightarrow>\\<^sup>* sep_false) = sep_false\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sep_true \\<longrightarrow>\\<^sup>* sep_false) = sep_false", "by (force intro!: ext dest: sep_impl_sep_true_P)"], ["", "lemma sep_conj_sep_impl:\n  \"\\<lbrakk> P s; \\<And>s. (P ** Q) s \\<Longrightarrow> R s \\<rbrakk> \\<Longrightarrow> (Q \\<longrightarrow>\\<^sup>* R) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P s; \\<And>s. (P ** Q) s \\<Longrightarrow> R s\\<rbrakk>\n    \\<Longrightarrow> (Q \\<longrightarrow>\\<^sup>* R) s", "proof (rule sep_implI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>h' h''.\n       \\<lbrakk>P s; \\<And>s. (P ** Q) s \\<Longrightarrow> R s;\n        s \\<oplus> h' = Some h''; Q h'\\<rbrakk>\n       \\<Longrightarrow> R h''", "fix h' h h''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>h' h''.\n       \\<lbrakk>P s; \\<And>s. (P ** Q) s \\<Longrightarrow> R s;\n        s \\<oplus> h' = Some h''; Q h'\\<rbrakk>\n       \\<Longrightarrow> R h''", "assume \"P h\" and \"h \\<oplus> h' = Some h''\" and \"Q h'\""], ["proof (state)\nthis:\n  P h\n  h \\<oplus> h' = Some h''\n  Q h'\n\ngoal (1 subgoal):\n 1. \\<And>h' h''.\n       \\<lbrakk>P s; \\<And>s. (P ** Q) s \\<Longrightarrow> R s;\n        s \\<oplus> h' = Some h''; Q h'\\<rbrakk>\n       \\<Longrightarrow> R h''", "hence \"(P ** Q) h''\""], ["proof (prove)\nusing this:\n  P h\n  h \\<oplus> h' = Some h''\n  Q h'\n\ngoal (1 subgoal):\n 1. (P ** Q) h''", "by (force intro: sep_conjI)"], ["proof (state)\nthis:\n  (P ** Q) h''\n\ngoal (1 subgoal):\n 1. \\<And>h' h''.\n       \\<lbrakk>P s; \\<And>s. (P ** Q) s \\<Longrightarrow> R s;\n        s \\<oplus> h' = Some h''; Q h'\\<rbrakk>\n       \\<Longrightarrow> R h''", "moreover"], ["proof (state)\nthis:\n  (P ** Q) h''\n\ngoal (1 subgoal):\n 1. \\<And>h' h''.\n       \\<lbrakk>P s; \\<And>s. (P ** Q) s \\<Longrightarrow> R s;\n        s \\<oplus> h' = Some h''; Q h'\\<rbrakk>\n       \\<Longrightarrow> R h''", "assume \"\\<And>s. (P ** Q) s \\<Longrightarrow> R s\""], ["proof (state)\nthis:\n  (P ** Q) ?s \\<Longrightarrow> R ?s\n\ngoal (1 subgoal):\n 1. \\<And>h' h''.\n       \\<lbrakk>P s; \\<And>s. (P ** Q) s \\<Longrightarrow> R s;\n        s \\<oplus> h' = Some h''; Q h'\\<rbrakk>\n       \\<Longrightarrow> R h''", "ultimately"], ["proof (chain)\npicking this:\n  (P ** Q) h''\n  (P ** Q) ?s \\<Longrightarrow> R ?s", "show \"R h''\""], ["proof (prove)\nusing this:\n  (P ** Q) h''\n  (P ** Q) ?s \\<Longrightarrow> R ?s\n\ngoal (1 subgoal):\n 1. R h''", "by simp"], ["proof (state)\nthis:\n  R h''\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sep_conj_sep_impl2:\n  \"\\<lbrakk> (P ** Q) s; \\<And>s. P s \\<Longrightarrow> (Q \\<longrightarrow>\\<^sup>* R) s \\<rbrakk> \\<Longrightarrow> R s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(P ** Q) s;\n     \\<And>s.\n        P s \\<Longrightarrow> (Q \\<longrightarrow>\\<^sup>* R) s\\<rbrakk>\n    \\<Longrightarrow> R s", "by (force dest: sep_implD elim: sep_conjE)"], ["", "lemma sep_conj_sep_impl_sep_conj2:\n  \"(P ** R) s \\<Longrightarrow> (P ** (Q \\<longrightarrow>\\<^sup>* (Q ** R))) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P ** R) s \\<Longrightarrow>\n    (P ** (Q \\<longrightarrow>\\<^sup>* Q ** R)) s", "by (erule (1) sep_conj_impl, erule sep_conj_sep_impl, simp add: sep_conj_ac)"], ["", "lemma sep_conj_triv_strip2:\n  \"Q = R \\<Longrightarrow> (Q ** P) = (R ** P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q = R \\<Longrightarrow> Q ** P = R ** P", "by simp"], ["", "end"], ["", "end"]]}