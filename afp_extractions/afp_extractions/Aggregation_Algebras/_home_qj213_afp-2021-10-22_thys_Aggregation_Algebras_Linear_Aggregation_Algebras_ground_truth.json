{"file_name": "/home/qj213/afp-2021-10-22/thys/Aggregation_Algebras/Linear_Aggregation_Algebras.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Aggregation_Algebras", "problem_names": ["lemma example_real_ext_matrix:\n  fixes x :: \"('a::enum,real ext) square\"\n  shows \"minarc\\<^sub>M x \\<preceq> \\<ominus>\\<ominus>x\"", "lemma example_real_max_ext_matrix:\n  fixes x :: \"('a::enum,real_max ext) square\"\n  shows \"minarc\\<^sub>M x \\<preceq> \\<ominus>\\<ominus>x\"", "lemma example_real_min_ext_matrix:\n  fixes x :: \"('a::enum,real_min ext) square\"\n  shows \"minarc\\<^sub>M x \\<preceq> \\<ominus>\\<ominus>x\"", "lemma add_decreasing: \"x + y \\<le> x\"", "lemma t_min: \"x + y \\<le> min x y\"", "lemma tl_assoc:\n  \"x \\<in> {0..1} \\<Longrightarrow> z \\<in> {0..1} \\<Longrightarrow> tl (tl x y) z = tl x (tl y z)\"", "lemma tl_top_zero:\n  \"x \\<in> {0..1} \\<Longrightarrow> tl 1 x = x\"", "lemma t_top: \"x + top = top\"", "lemma add_increasing: \"x \\<le> x + y\"", "lemma t_max: \"max x y \\<le> x + y\"", "lemma sp_assoc:\n  \"sp (sp x y) z = sp x (sp y z)\"", "lemma sp_mono:\n  assumes \"z \\<in> {0..1}\"\n      and \"x \\<le> y\"\n    shows \"sp z x \\<le> sp z y\""], "translations": [["", "lemma example_real_ext_matrix:\n  fixes x :: \"('a::enum,real ext) square\"\n  shows \"minarc\\<^sub>M x \\<preceq> \\<ominus>\\<ominus>x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. minarc\\<^sub>M x \\<preceq> \\<ominus> \\<ominus> x", "by (rule agg_square_m_algebra.minarc_below)"], ["", "text \\<open>\nAnother example of a linearly ordered commutative semigroup is the set of real numbers with maximum as aggregation.\n\\<close>"], ["", "datatype real_max = Rmax real"], ["", "instantiation real_max :: linordered_ab_semigroup_add\nbegin"], ["", "fun less_eq_real_max where \"less_eq_real_max (Rmax x) (Rmax y) = (x \\<le> y)\""], ["", "fun less_real_max where \"less_real_max (Rmax x) (Rmax y) = (x < y)\""], ["", "fun plus_real_max where \"plus_real_max (Rmax x) (Rmax y) = Rmax (max x y)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(real_max, linordered_ab_semigroup_add_class)", "proof"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>a b c. a + b + c = a + (b + c)\n 2. \\<And>a b. a + b = b + a\n 3. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 4. \\<And>x. x \\<le> x\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 6. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 7. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 8. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "fix x y z :: real_max"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>a b c. a + b + c = a + (b + c)\n 2. \\<And>a b. a + b = b + a\n 3. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 4. \\<And>x. x \\<le> x\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 6. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 7. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 8. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "show \"(x + y) + z = x + (y + z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y + z = x + (y + z)", "by (cases x; cases y; cases z) simp"], ["proof (state)\nthis:\n  x + y + z = x + (y + z)\n\ngoal (7 subgoals):\n 1. \\<And>a b. a + b = b + a\n 2. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 3. \\<And>x. x \\<le> x\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 5. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 6. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 7. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "show \"x + y = y + x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y = y + x", "by (cases x; cases y) simp"], ["proof (state)\nthis:\n  x + y = y + x\n\ngoal (6 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 6. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "show \"(x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)", "by (cases x; cases y) auto"], ["proof (state)\nthis:\n  (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n\ngoal (5 subgoals):\n 1. \\<And>x. x \\<le> x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 3. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 4. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 5. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "show \"x \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> x", "by (cases x) simp"], ["proof (state)\nthis:\n  x \\<le> x\n\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 3. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 4. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "show \"x \\<le> y \\<Longrightarrow> y \\<le> z \\<Longrightarrow> x \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z", "by (cases x; cases y; cases z) simp"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 2. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 3. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "show \"x \\<le> y \\<Longrightarrow> y \\<le> x \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "by (cases x; cases y) simp"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n\ngoal (2 subgoals):\n 1. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 2. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "show \"x \\<le> y \\<Longrightarrow> z + x \\<le> z + y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> z + x \\<le> z + y", "by (cases x; cases y; cases z) simp"], ["proof (state)\nthis:\n  x \\<le> y \\<Longrightarrow> z + x \\<le> z + y\n\ngoal (1 subgoal):\n 1. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "show \"x \\<le> y \\<or> y \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<or> y \\<le> x", "by (cases x; cases y) auto"], ["proof (state)\nthis:\n  x \\<le> y \\<or> y \\<le> x\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma example_real_max_ext_matrix:\n  fixes x :: \"('a::enum,real_max ext) square\"\n  shows \"minarc\\<^sub>M x \\<preceq> \\<ominus>\\<ominus>x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. minarc\\<^sub>M x \\<preceq> \\<ominus> \\<ominus> x", "by (rule agg_square_m_algebra.minarc_below)"], ["", "text \\<open>\nA third example of a linearly ordered commutative semigroup is the set of real numbers with minimum as aggregation.\n\\<close>"], ["", "datatype real_min = Rmin real"], ["", "instantiation real_min :: linordered_ab_semigroup_add\nbegin"], ["", "fun less_eq_real_min where \"less_eq_real_min (Rmin x) (Rmin y) = (x \\<le> y)\""], ["", "fun less_real_min where \"less_real_min (Rmin x) (Rmin y) = (x < y)\""], ["", "fun plus_real_min where \"plus_real_min (Rmin x) (Rmin y) = Rmin (min x y)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(real_min, linordered_ab_semigroup_add_class)", "proof"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>a b c. a + b + c = a + (b + c)\n 2. \\<And>a b. a + b = b + a\n 3. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 4. \\<And>x. x \\<le> x\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 6. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 7. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 8. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "fix x y z :: real_min"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>a b c. a + b + c = a + (b + c)\n 2. \\<And>a b. a + b = b + a\n 3. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 4. \\<And>x. x \\<le> x\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 6. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 7. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 8. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "show \"(x + y) + z = x + (y + z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y + z = x + (y + z)", "by (cases x; cases y; cases z) simp"], ["proof (state)\nthis:\n  x + y + z = x + (y + z)\n\ngoal (7 subgoals):\n 1. \\<And>a b. a + b = b + a\n 2. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 3. \\<And>x. x \\<le> x\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 5. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 6. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 7. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "show \"x + y = y + x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y = y + x", "by (cases x; cases y) simp"], ["proof (state)\nthis:\n  x + y = y + x\n\ngoal (6 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 6. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "show \"(x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)", "by (cases x; cases y) auto"], ["proof (state)\nthis:\n  (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n\ngoal (5 subgoals):\n 1. \\<And>x. x \\<le> x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 3. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 4. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 5. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "show \"x \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> x", "by (cases x) simp"], ["proof (state)\nthis:\n  x \\<le> x\n\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 3. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 4. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "show \"x \\<le> y \\<Longrightarrow> y \\<le> z \\<Longrightarrow> x \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z", "by (cases x; cases y; cases z) simp"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 2. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 3. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "show \"x \\<le> y \\<Longrightarrow> y \\<le> x \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "by (cases x; cases y) simp"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n\ngoal (2 subgoals):\n 1. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 2. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "show \"x \\<le> y \\<Longrightarrow> z + x \\<le> z + y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> z + x \\<le> z + y", "by (cases x; cases y; cases z) simp"], ["proof (state)\nthis:\n  x \\<le> y \\<Longrightarrow> z + x \\<le> z + y\n\ngoal (1 subgoal):\n 1. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "show \"x \\<le> y \\<or> y \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<or> y \\<le> x", "by (cases x; cases y) auto"], ["proof (state)\nthis:\n  x \\<le> y \\<or> y \\<le> x\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma example_real_min_ext_matrix:\n  fixes x :: \"('a::enum,real_min ext) square\"\n  shows \"minarc\\<^sub>M x \\<preceq> \\<ominus>\\<ominus>x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. minarc\\<^sub>M x \\<preceq> \\<ominus> \\<ominus> x", "by (rule agg_square_m_algebra.minarc_below)"], ["", "subsection \\<open>Linearly Ordered Commutative Monoids\\<close>"], ["", "text \\<open>\nAny linearly ordered commutative monoid extended by new least and greatest elements forms a linear aggregation lattice.\nThis is similar to linearly ordered commutative semigroups except that the aggregation $\\bot + \\bot$ produces the unit of the monoid instead of the least element.\nApplied to weighted graphs, this means that the aggregation of the empty graph will be the unit of the monoid (for example, $0$ for real numbers under standard addition, instead of $\\bot$).\n\\<close>"], ["", "class linordered_comm_monoid_add = linordered_ab_semigroup_add + comm_monoid_add"], ["", "datatype 'a ext0 =\n    Bot\n  | Val 'a\n  | Top"], ["", "instantiation ext0 :: (linordered_comm_monoid_add) linear_aggregation_kleene_algebra\nbegin"], ["", "fun plus_ext0 :: \"'a ext0 \\<Rightarrow> 'a ext0 \\<Rightarrow> 'a ext0\" where\n  \"plus_ext0 Bot Bot = Val 0\"\n| \"plus_ext0 Bot x = x\"\n| \"plus_ext0 (Val x) Bot = Val x\"\n| \"plus_ext0 (Val x) (Val y) = Val (x + y)\"\n| \"plus_ext0 (Val _) Top = Top\"\n| \"plus_ext0 Top _ = Top\""], ["", "fun sup_ext0 :: \"'a ext0 \\<Rightarrow> 'a ext0 \\<Rightarrow> 'a ext0\" where\n  \"sup_ext0 Bot x = x\"\n| \"sup_ext0 (Val x) Bot = Val x\"\n| \"sup_ext0 (Val x) (Val y) = Val (max x y)\"\n| \"sup_ext0 (Val _) Top = Top\"\n| \"sup_ext0 Top _ = Top\""], ["", "fun inf_ext0 :: \"'a ext0 \\<Rightarrow> 'a ext0 \\<Rightarrow> 'a ext0\" where\n  \"inf_ext0 Bot _ = Bot\"\n| \"inf_ext0 (Val _) Bot = Bot\"\n| \"inf_ext0 (Val x) (Val y) = Val (min x y)\"\n| \"inf_ext0 (Val x) Top = Val x\"\n| \"inf_ext0 Top x = x\""], ["", "fun times_ext0 :: \"'a ext0 \\<Rightarrow> 'a ext0 \\<Rightarrow> 'a ext0\" where \"times_ext0 x y = x \\<sqinter> y\""], ["", "fun uminus_ext0 :: \"'a ext0 \\<Rightarrow> 'a ext0\" where\n  \"uminus_ext0 Bot = Top\"\n| \"uminus_ext0 (Val _) = Bot\"\n| \"uminus_ext0 Top = Bot\""], ["", "fun star_ext0 :: \"'a ext0 \\<Rightarrow> 'a ext0\" where \"star_ext0 _ = Top\""], ["", "fun conv_ext0 :: \"'a ext0 \\<Rightarrow> 'a ext0\" where \"conv_ext0 x = x\""], ["", "definition bot_ext0 :: \"'a ext0\" where \"bot_ext0 \\<equiv> Bot\""], ["", "definition one_ext0 :: \"'a ext0\" where \"one_ext0 \\<equiv> Top\""], ["", "definition top_ext0 :: \"'a ext0\" where \"top_ext0 \\<equiv> Top\""], ["", "fun less_eq_ext0 :: \"'a ext0 \\<Rightarrow> 'a ext0 \\<Rightarrow> bool\" where\n  \"less_eq_ext0 Bot _ = True\"\n| \"less_eq_ext0 (Val _) Bot = False\"\n| \"less_eq_ext0 (Val x) (Val y) = (x \\<le> y)\"\n| \"less_eq_ext0 (Val _) Top = True\"\n| \"less_eq_ext0 Top Bot = False\"\n| \"less_eq_ext0 Top (Val _) = False\"\n| \"less_eq_ext0 Top Top = True\""], ["", "fun less_ext0 :: \"'a ext0 \\<Rightarrow> 'a ext0 \\<Rightarrow> bool\" where \"less_ext0 x y = (x \\<le> y \\<and> \\<not> y \\<le> x)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a ext0, linear_aggregation_kleene_algebra_class)", "proof"], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<sqinter> y \\<le> x\n 6. \\<And>x y. x \\<sqinter> y \\<le> y\n 7. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 8. \\<And>x y. x \\<le> x \\<squnion> y\n 9. \\<And>y x. y \\<le> x \\<squnion> y\n 10. \\<And>y x z.\n        \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n        \\<Longrightarrow> y \\<squnion> z \\<le> x\nA total of 23 subgoals...", "fix x y z :: \"'a ext0\""], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<sqinter> y \\<le> x\n 6. \\<And>x y. x \\<sqinter> y \\<le> y\n 7. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 8. \\<And>x y. x \\<le> x \\<squnion> y\n 9. \\<And>y x. y \\<le> x \\<squnion> y\n 10. \\<And>y x z.\n        \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n        \\<Longrightarrow> y \\<squnion> z \\<le> x\nA total of 23 subgoals...", "show \"(x + y) + z = x + (y + z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y + z = x + (y + z)", "by (cases x; cases y; cases z) (simp_all add: add.assoc)"], ["proof (state)\nthis:\n  x + y + z = x + (y + z)\n\ngoal (22 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<sqinter> y \\<le> x\n 6. \\<And>x y. x \\<sqinter> y \\<le> y\n 7. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 8. \\<And>x y. x \\<le> x \\<squnion> y\n 9. \\<And>y x. y \\<le> x \\<squnion> y\n 10. \\<And>y x z.\n        \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n        \\<Longrightarrow> y \\<squnion> z \\<le> x\nA total of 22 subgoals...", "show \"x + y = y + x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y = y + x", "by (cases x; cases y) (simp_all add: add.commute)"], ["proof (state)\nthis:\n  x + y = y + x\n\ngoal (21 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<sqinter> y \\<le> x\n 6. \\<And>x y. x \\<sqinter> y \\<le> y\n 7. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 8. \\<And>x y. x \\<le> x \\<squnion> y\n 9. \\<And>y x. y \\<le> x \\<squnion> y\n 10. \\<And>y x z.\n        \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n        \\<Longrightarrow> y \\<squnion> z \\<le> x\nA total of 21 subgoals...", "show \"(x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)", "by simp"], ["proof (state)\nthis:\n  (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n\ngoal (20 subgoals):\n 1. \\<And>x. x \\<le> x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 3. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 4. \\<And>x y. x \\<sqinter> y \\<le> x\n 5. \\<And>x y. x \\<sqinter> y \\<le> y\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 7. \\<And>x y. x \\<le> x \\<squnion> y\n 8. \\<And>y x. y \\<le> x \\<squnion> y\n 9. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 10. \\<And>a. bot \\<le> a\nA total of 20 subgoals...", "show \"x \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> x", "using less_eq_ext0.elims(3)"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> ?x \\<le> ?xa;\n   \\<And>uv_.\n      \\<lbrakk>?x = ext0.Val uv_; ?xa = ext0.Bot\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<And>x y.\n      \\<lbrakk>?x = ext0.Val x; ?xa = ext0.Val y; \\<not> x \\<le> y\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = ext0.Top; ?xa = ext0.Bot\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<And>ux_.\n      \\<lbrakk>?x = ext0.Top; ?xa = ext0.Val ux_\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. x \\<le> x", "by fastforce"], ["proof (state)\nthis:\n  x \\<le> x\n\ngoal (19 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 3. \\<And>x y. x \\<sqinter> y \\<le> x\n 4. \\<And>x y. x \\<sqinter> y \\<le> y\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 6. \\<And>x y. x \\<le> x \\<squnion> y\n 7. \\<And>y x. y \\<le> x \\<squnion> y\n 8. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 9. \\<And>a. bot \\<le> a\n 10. \\<And>a. a \\<le> top\nA total of 19 subgoals...", "show \"x \\<le> y \\<Longrightarrow> y \\<le> z \\<Longrightarrow> x \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z", "by (cases x; cases y; cases z) simp_all"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n\ngoal (18 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 2. \\<And>x y. x \\<sqinter> y \\<le> x\n 3. \\<And>x y. x \\<sqinter> y \\<le> y\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 5. \\<And>x y. x \\<le> x \\<squnion> y\n 6. \\<And>y x. y \\<le> x \\<squnion> y\n 7. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 8. \\<And>a. bot \\<le> a\n 9. \\<And>a. a \\<le> top\n 10. \\<And>x y. x \\<le> y \\<or> y \\<le> x\nA total of 18 subgoals...", "show \"x \\<le> y \\<Longrightarrow> y \\<le> x \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n\ngoal (17 subgoals):\n 1. \\<And>x y. x \\<sqinter> y \\<le> x\n 2. \\<And>x y. x \\<sqinter> y \\<le> y\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 4. \\<And>x y. x \\<le> x \\<squnion> y\n 5. \\<And>y x. y \\<le> x \\<squnion> y\n 6. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 7. \\<And>a. bot \\<le> a\n 8. \\<And>a. a \\<le> top\n 9. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 10. \\<And>x y z.\n        x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n        x + z \\<le> y + z\nA total of 17 subgoals...", "show \"x \\<sqinter> y \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqinter> y \\<le> x", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  x \\<sqinter> y \\<le> x\n\ngoal (16 subgoals):\n 1. \\<And>x y. x \\<sqinter> y \\<le> y\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 3. \\<And>x y. x \\<le> x \\<squnion> y\n 4. \\<And>y x. y \\<le> x \\<squnion> y\n 5. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 6. \\<And>a. bot \\<le> a\n 7. \\<And>a. a \\<le> top\n 8. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 9. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 10. \\<And>x y. x + y + bot = x + y\nA total of 16 subgoals...", "show \"x \\<sqinter> y \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqinter> y \\<le> y", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  x \\<sqinter> y \\<le> y\n\ngoal (15 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 2. \\<And>x y. x \\<le> x \\<squnion> y\n 3. \\<And>y x. y \\<le> x \\<squnion> y\n 4. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 5. \\<And>a. bot \\<le> a\n 6. \\<And>a. a \\<le> top\n 7. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 8. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 9. \\<And>x y. x + y + bot = x + y\n 10. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\nA total of 15 subgoals...", "show \"x \\<le> y \\<Longrightarrow> x \\<le> z \\<Longrightarrow> x \\<le> y \\<sqinter> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n    \\<Longrightarrow> x \\<le> y \\<sqinter> z", "by (cases x; cases y; cases z) simp_all"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n  \\<Longrightarrow> x \\<le> y \\<sqinter> z\n\ngoal (14 subgoals):\n 1. \\<And>x y. x \\<le> x \\<squnion> y\n 2. \\<And>y x. y \\<le> x \\<squnion> y\n 3. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 4. \\<And>a. bot \\<le> a\n 5. \\<And>a. a \\<le> top\n 6. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 7. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 8. \\<And>x y. x + y + bot = x + y\n 9. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 10. \\<And>x. - x = (if x = bot then top else bot)\nA total of 14 subgoals...", "show \"x \\<le> x \\<squnion> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> x \\<squnion> y", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  x \\<le> x \\<squnion> y\n\ngoal (13 subgoals):\n 1. \\<And>y x. y \\<le> x \\<squnion> y\n 2. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 3. \\<And>a. bot \\<le> a\n 4. \\<And>a. a \\<le> top\n 5. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 6. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 7. \\<And>x y. x + y + bot = x + y\n 8. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 9. \\<And>x. - x = (if x = bot then top else bot)\n 10. 1 = top\nA total of 13 subgoals...", "show \"y \\<le> x \\<squnion> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<le> x \\<squnion> y", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  y \\<le> x \\<squnion> y\n\ngoal (12 subgoals):\n 1. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 2. \\<And>a. bot \\<le> a\n 3. \\<And>a. a \\<le> top\n 4. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 5. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 6. \\<And>x y. x + y + bot = x + y\n 7. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 8. \\<And>x. - x = (if x = bot then top else bot)\n 9. 1 = top\n 10. \\<And>x y. x * y = x \\<sqinter> y\nA total of 12 subgoals...", "show \"y \\<le> x \\<Longrightarrow> z \\<le> x \\<Longrightarrow> y \\<squnion> z \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n    \\<Longrightarrow> y \\<squnion> z \\<le> x", "by (cases x; cases y; cases z) simp_all"], ["proof (state)\nthis:\n  \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n  \\<Longrightarrow> y \\<squnion> z \\<le> x\n\ngoal (11 subgoals):\n 1. \\<And>a. bot \\<le> a\n 2. \\<And>a. a \\<le> top\n 3. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 4. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 5. \\<And>x y. x + y + bot = x + y\n 6. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 7. \\<And>x. - x = (if x = bot then top else bot)\n 8. 1 = top\n 9. \\<And>x y. x * y = x \\<sqinter> y\n 10. \\<And>x. x\\<^sup>T = x\nA total of 11 subgoals...", "show \"bot \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bot \\<le> x", "by (simp add: bot_ext0_def)"], ["proof (state)\nthis:\n  bot \\<le> x\n\ngoal (10 subgoals):\n 1. \\<And>a. a \\<le> top\n 2. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 3. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 4. \\<And>x y. x + y + bot = x + y\n 5. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 6. \\<And>x. - x = (if x = bot then top else bot)\n 7. 1 = top\n 8. \\<And>x y. x * y = x \\<sqinter> y\n 9. \\<And>x. x\\<^sup>T = x\n 10. \\<And>x. x\\<^sup>\\<star> = top", "show \"x \\<le> top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> top", "by (cases x) (simp_all add: top_ext0_def)"], ["proof (state)\nthis:\n  x \\<le> top\n\ngoal (9 subgoals):\n 1. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 2. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 3. \\<And>x y. x + y + bot = x + y\n 4. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 5. \\<And>x. - x = (if x = bot then top else bot)\n 6. 1 = top\n 7. \\<And>x y. x * y = x \\<sqinter> y\n 8. \\<And>x. x\\<^sup>T = x\n 9. \\<And>x. x\\<^sup>\\<star> = top", "show \"x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow> x + z \\<le> y + z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n    x + z \\<le> y + z", "apply (cases x; cases y; cases z)"], ["proof (prove)\ngoal (27 subgoals):\n 1. \\<lbrakk>x = ext0.Bot; y = ext0.Bot; z = ext0.Bot\\<rbrakk>\n    \\<Longrightarrow> x \\<noteq> bot \\<and>\n                      x + bot \\<le> y + bot \\<longrightarrow>\n                      x + z \\<le> y + z\n 2. \\<And>x2.\n       \\<lbrakk>x = ext0.Bot; y = ext0.Bot; z = ext0.Val x2\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 3. \\<lbrakk>x = ext0.Bot; y = ext0.Bot; z = ext0.Top\\<rbrakk>\n    \\<Longrightarrow> x \\<noteq> bot \\<and>\n                      x + bot \\<le> y + bot \\<longrightarrow>\n                      x + z \\<le> y + z\n 4. \\<And>x2.\n       \\<lbrakk>x = ext0.Bot; y = ext0.Val x2; z = ext0.Bot\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 5. \\<And>x2 x2a.\n       \\<lbrakk>x = ext0.Bot; y = ext0.Val x2; z = ext0.Val x2a\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 6. \\<And>x2.\n       \\<lbrakk>x = ext0.Bot; y = ext0.Val x2; z = ext0.Top\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 7. \\<lbrakk>x = ext0.Bot; y = ext0.Top; z = ext0.Bot\\<rbrakk>\n    \\<Longrightarrow> x \\<noteq> bot \\<and>\n                      x + bot \\<le> y + bot \\<longrightarrow>\n                      x + z \\<le> y + z\n 8. \\<And>x2.\n       \\<lbrakk>x = ext0.Bot; y = ext0.Top; z = ext0.Val x2\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 9. \\<lbrakk>x = ext0.Bot; y = ext0.Top; z = ext0.Top\\<rbrakk>\n    \\<Longrightarrow> x \\<noteq> bot \\<and>\n                      x + bot \\<le> y + bot \\<longrightarrow>\n                      x + z \\<le> y + z\n 10. \\<And>x2.\n        \\<lbrakk>x = ext0.Val x2; y = ext0.Bot; z = ext0.Bot\\<rbrakk>\n        \\<Longrightarrow> x \\<noteq> bot \\<and>\n                          x + bot \\<le> y + bot \\<longrightarrow>\n                          x + z \\<le> y + z\nA total of 27 subgoals...", "prefer 11"], ["proof (prove)\ngoal (27 subgoals):\n 1. \\<And>x2 x2a.\n       \\<lbrakk>x = ext0.Val x2; y = ext0.Bot; z = ext0.Val x2a\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 2. \\<lbrakk>x = ext0.Bot; y = ext0.Bot; z = ext0.Bot\\<rbrakk>\n    \\<Longrightarrow> x \\<noteq> bot \\<and>\n                      x + bot \\<le> y + bot \\<longrightarrow>\n                      x + z \\<le> y + z\n 3. \\<And>x2.\n       \\<lbrakk>x = ext0.Bot; y = ext0.Bot; z = ext0.Val x2\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 4. \\<lbrakk>x = ext0.Bot; y = ext0.Bot; z = ext0.Top\\<rbrakk>\n    \\<Longrightarrow> x \\<noteq> bot \\<and>\n                      x + bot \\<le> y + bot \\<longrightarrow>\n                      x + z \\<le> y + z\n 5. \\<And>x2.\n       \\<lbrakk>x = ext0.Bot; y = ext0.Val x2; z = ext0.Bot\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 6. \\<And>x2 x2a.\n       \\<lbrakk>x = ext0.Bot; y = ext0.Val x2; z = ext0.Val x2a\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 7. \\<And>x2.\n       \\<lbrakk>x = ext0.Bot; y = ext0.Val x2; z = ext0.Top\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 8. \\<lbrakk>x = ext0.Bot; y = ext0.Top; z = ext0.Bot\\<rbrakk>\n    \\<Longrightarrow> x \\<noteq> bot \\<and>\n                      x + bot \\<le> y + bot \\<longrightarrow>\n                      x + z \\<le> y + z\n 9. \\<And>x2.\n       \\<lbrakk>x = ext0.Bot; y = ext0.Top; z = ext0.Val x2\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 10. \\<lbrakk>x = ext0.Bot; y = ext0.Top; z = ext0.Top\\<rbrakk>\n     \\<Longrightarrow> x \\<noteq> bot \\<and>\n                       x + bot \\<le> y + bot \\<longrightarrow>\n                       x + z \\<le> y + z\nA total of 27 subgoals...", "using add_right_mono bot_ext0_def"], ["proof (prove)\nusing this:\n  ?a \\<le> ?b \\<Longrightarrow> ?a + ?c \\<le> ?b + ?c\n  bot \\<equiv> ext0.Bot\n\ngoal (27 subgoals):\n 1. \\<And>x2 x2a.\n       \\<lbrakk>x = ext0.Val x2; y = ext0.Bot; z = ext0.Val x2a\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 2. \\<lbrakk>x = ext0.Bot; y = ext0.Bot; z = ext0.Bot\\<rbrakk>\n    \\<Longrightarrow> x \\<noteq> bot \\<and>\n                      x + bot \\<le> y + bot \\<longrightarrow>\n                      x + z \\<le> y + z\n 3. \\<And>x2.\n       \\<lbrakk>x = ext0.Bot; y = ext0.Bot; z = ext0.Val x2\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 4. \\<lbrakk>x = ext0.Bot; y = ext0.Bot; z = ext0.Top\\<rbrakk>\n    \\<Longrightarrow> x \\<noteq> bot \\<and>\n                      x + bot \\<le> y + bot \\<longrightarrow>\n                      x + z \\<le> y + z\n 5. \\<And>x2.\n       \\<lbrakk>x = ext0.Bot; y = ext0.Val x2; z = ext0.Bot\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 6. \\<And>x2 x2a.\n       \\<lbrakk>x = ext0.Bot; y = ext0.Val x2; z = ext0.Val x2a\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 7. \\<And>x2.\n       \\<lbrakk>x = ext0.Bot; y = ext0.Val x2; z = ext0.Top\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 8. \\<lbrakk>x = ext0.Bot; y = ext0.Top; z = ext0.Bot\\<rbrakk>\n    \\<Longrightarrow> x \\<noteq> bot \\<and>\n                      x + bot \\<le> y + bot \\<longrightarrow>\n                      x + z \\<le> y + z\n 9. \\<And>x2.\n       \\<lbrakk>x = ext0.Bot; y = ext0.Top; z = ext0.Val x2\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 10. \\<lbrakk>x = ext0.Bot; y = ext0.Top; z = ext0.Top\\<rbrakk>\n     \\<Longrightarrow> x \\<noteq> bot \\<and>\n                       x + bot \\<le> y + bot \\<longrightarrow>\n                       x + z \\<le> y + z\nA total of 27 subgoals...", "apply fastforce"], ["proof (prove)\ngoal (26 subgoals):\n 1. \\<lbrakk>x = ext0.Bot; y = ext0.Bot; z = ext0.Bot\\<rbrakk>\n    \\<Longrightarrow> x \\<noteq> bot \\<and>\n                      x + bot \\<le> y + bot \\<longrightarrow>\n                      x + z \\<le> y + z\n 2. \\<And>x2.\n       \\<lbrakk>x = ext0.Bot; y = ext0.Bot; z = ext0.Val x2\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 3. \\<lbrakk>x = ext0.Bot; y = ext0.Bot; z = ext0.Top\\<rbrakk>\n    \\<Longrightarrow> x \\<noteq> bot \\<and>\n                      x + bot \\<le> y + bot \\<longrightarrow>\n                      x + z \\<le> y + z\n 4. \\<And>x2.\n       \\<lbrakk>x = ext0.Bot; y = ext0.Val x2; z = ext0.Bot\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 5. \\<And>x2 x2a.\n       \\<lbrakk>x = ext0.Bot; y = ext0.Val x2; z = ext0.Val x2a\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 6. \\<And>x2.\n       \\<lbrakk>x = ext0.Bot; y = ext0.Val x2; z = ext0.Top\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 7. \\<lbrakk>x = ext0.Bot; y = ext0.Top; z = ext0.Bot\\<rbrakk>\n    \\<Longrightarrow> x \\<noteq> bot \\<and>\n                      x + bot \\<le> y + bot \\<longrightarrow>\n                      x + z \\<le> y + z\n 8. \\<And>x2.\n       \\<lbrakk>x = ext0.Bot; y = ext0.Top; z = ext0.Val x2\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 9. \\<lbrakk>x = ext0.Bot; y = ext0.Top; z = ext0.Top\\<rbrakk>\n    \\<Longrightarrow> x \\<noteq> bot \\<and>\n                      x + bot \\<le> y + bot \\<longrightarrow>\n                      x + z \\<le> y + z\n 10. \\<And>x2.\n        \\<lbrakk>x = ext0.Val x2; y = ext0.Bot; z = ext0.Bot\\<rbrakk>\n        \\<Longrightarrow> x \\<noteq> bot \\<and>\n                          x + bot \\<le> y + bot \\<longrightarrow>\n                          x + z \\<le> y + z\nA total of 26 subgoals...", "by (simp_all add: bot_ext0_def add_right_mono)"], ["proof (state)\nthis:\n  x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n  x + z \\<le> y + z\n\ngoal (8 subgoals):\n 1. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 2. \\<And>x y. x + y + bot = x + y\n 3. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 4. \\<And>x. - x = (if x = bot then top else bot)\n 5. 1 = top\n 6. \\<And>x y. x * y = x \\<sqinter> y\n 7. \\<And>x. x\\<^sup>T = x\n 8. \\<And>x. x\\<^sup>\\<star> = top", "show \"x + y + bot = x + y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y + bot = x + y", "by (cases x; cases y) (simp_all add: bot_ext0_def)"], ["proof (state)\nthis:\n  x + y + bot = x + y\n\ngoal (7 subgoals):\n 1. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 2. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 3. \\<And>x. - x = (if x = bot then top else bot)\n 4. 1 = top\n 5. \\<And>x y. x * y = x \\<sqinter> y\n 6. \\<And>x. x\\<^sup>T = x\n 7. \\<And>x. x\\<^sup>\\<star> = top", "show \"x + y = bot \\<longrightarrow> x = bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y = bot \\<longrightarrow> x = bot", "by (cases x; cases y) (simp_all add: bot_ext0_def)"], ["proof (state)\nthis:\n  x + y = bot \\<longrightarrow> x = bot\n\ngoal (6 subgoals):\n 1. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 2. \\<And>x. - x = (if x = bot then top else bot)\n 3. 1 = top\n 4. \\<And>x y. x * y = x \\<sqinter> y\n 5. \\<And>x. x\\<^sup>T = x\n 6. \\<And>x. x\\<^sup>\\<star> = top", "show \"x \\<le> y \\<or> y \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<or> y \\<le> x", "by (cases x; cases y) (simp_all add: linear)"], ["proof (state)\nthis:\n  x \\<le> y \\<or> y \\<le> x\n\ngoal (5 subgoals):\n 1. \\<And>x. - x = (if x = bot then top else bot)\n 2. 1 = top\n 3. \\<And>x y. x * y = x \\<sqinter> y\n 4. \\<And>x. x\\<^sup>T = x\n 5. \\<And>x. x\\<^sup>\\<star> = top", "show \"-x = (if x = bot then top else bot)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - x = (if x = bot then top else bot)", "by (cases x) (simp_all add: bot_ext0_def top_ext0_def)"], ["proof (state)\nthis:\n  - x = (if x = bot then top else bot)\n\ngoal (4 subgoals):\n 1. 1 = top\n 2. \\<And>x y. x * y = x \\<sqinter> y\n 3. \\<And>x. x\\<^sup>T = x\n 4. \\<And>x. x\\<^sup>\\<star> = top", "show \"(1::'a ext0) = top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 = top", "by (simp add: one_ext0_def top_ext0_def)"], ["proof (state)\nthis:\n  1 = top\n\ngoal (3 subgoals):\n 1. \\<And>x y. x * y = x \\<sqinter> y\n 2. \\<And>x. x\\<^sup>T = x\n 3. \\<And>x. x\\<^sup>\\<star> = top", "show \"x * y = x \\<sqinter> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * y = x \\<sqinter> y", "by simp"], ["proof (state)\nthis:\n  x * y = x \\<sqinter> y\n\ngoal (2 subgoals):\n 1. \\<And>x. x\\<^sup>T = x\n 2. \\<And>x. x\\<^sup>\\<star> = top", "show \"x\\<^sup>T = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sup>T = x", "by simp"], ["proof (state)\nthis:\n  x\\<^sup>T = x\n\ngoal (1 subgoal):\n 1. \\<And>x. x\\<^sup>\\<star> = top", "show \"x\\<^sup>\\<star> = top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sup>\\<star> = top", "by (simp add: top_ext0_def)"], ["proof (state)\nthis:\n  x\\<^sup>\\<star> = top\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>\nAn example of a linearly ordered commutative monoid is the set of real numbers with standard addition and unit $0$.\n\\<close>"], ["", "instantiation real :: linordered_comm_monoid_add\nbegin"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(real, linordered_comm_monoid_add_class)", ".."], ["", "end"], ["", "subsection \\<open>Linearly Ordered Commutative Monoids with a Least Element\\<close>"], ["", "text \\<open>\nIf a linearly ordered commutative monoid already contains a least element which is a unit of aggregation, only a new greatest element has to be added to obtain a linear aggregation lattice.\n\\<close>"], ["", "class linordered_comm_monoid_add_bot = linordered_ab_semigroup_add + order_bot +\n  assumes bot_zero [simp]: \"bot + x = x\"\nbegin"], ["", "sublocale linordered_comm_monoid_add where zero = bot"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.linordered_comm_monoid_add (+) bot (\\<le>) (<)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. bot + a = a", "by simp"], ["", "end"], ["", "datatype 'a extT =\n    Val 'a\n  | Top"], ["", "instantiation extT :: (linordered_comm_monoid_add_bot) linear_aggregation_kleene_algebra\nbegin"], ["", "fun plus_extT :: \"'a extT \\<Rightarrow> 'a extT \\<Rightarrow> 'a extT\" where\n  \"plus_extT (Val x) (Val y) = Val (x + y)\"\n| \"plus_extT (Val _) Top = Top\"\n| \"plus_extT Top _ = Top\""], ["", "fun sup_extT :: \"'a extT \\<Rightarrow> 'a extT \\<Rightarrow> 'a extT\" where\n  \"sup_extT (Val x) (Val y) = Val (max x y)\"\n| \"sup_extT (Val _) Top = Top\"\n| \"sup_extT Top _ = Top\""], ["", "fun inf_extT :: \"'a extT \\<Rightarrow> 'a extT \\<Rightarrow> 'a extT\" where\n  \"inf_extT (Val x) (Val y) = Val (min x y)\"\n| \"inf_extT (Val x) Top = Val x\"\n| \"inf_extT Top x = x\""], ["", "fun times_extT :: \"'a extT \\<Rightarrow> 'a extT \\<Rightarrow> 'a extT\" where \"times_extT x y = x \\<sqinter> y\""], ["", "fun uminus_extT :: \"'a extT \\<Rightarrow> 'a extT\" where \"uminus_extT x = (if x = Val bot then Top else Val bot)\""], ["", "fun star_extT :: \"'a extT \\<Rightarrow> 'a extT\" where \"star_extT _ = Top\""], ["", "fun conv_extT :: \"'a extT \\<Rightarrow> 'a extT\" where \"conv_extT x = x\""], ["", "definition bot_extT :: \"'a extT\" where \"bot_extT \\<equiv> Val bot\""], ["", "definition one_extT :: \"'a extT\" where \"one_extT \\<equiv> Top\""], ["", "definition top_extT :: \"'a extT\" where \"top_extT \\<equiv> Top\""], ["", "fun less_eq_extT :: \"'a extT \\<Rightarrow> 'a extT \\<Rightarrow> bool\" where\n  \"less_eq_extT (Val x) (Val y) = (x \\<le> y)\"\n| \"less_eq_extT Top (Val _) = False\"\n| \"less_eq_extT _ Top = True\""], ["", "fun less_extT :: \"'a extT \\<Rightarrow> 'a extT \\<Rightarrow> bool\" where \"less_extT x y = (x \\<le> y \\<and> \\<not> y \\<le> x)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a extT, linear_aggregation_kleene_algebra_class)", "proof"], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<sqinter> y \\<le> x\n 6. \\<And>x y. x \\<sqinter> y \\<le> y\n 7. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 8. \\<And>x y. x \\<le> x \\<squnion> y\n 9. \\<And>y x. y \\<le> x \\<squnion> y\n 10. \\<And>y x z.\n        \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n        \\<Longrightarrow> y \\<squnion> z \\<le> x\nA total of 23 subgoals...", "fix x y z :: \"'a extT\""], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<sqinter> y \\<le> x\n 6. \\<And>x y. x \\<sqinter> y \\<le> y\n 7. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 8. \\<And>x y. x \\<le> x \\<squnion> y\n 9. \\<And>y x. y \\<le> x \\<squnion> y\n 10. \\<And>y x z.\n        \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n        \\<Longrightarrow> y \\<squnion> z \\<le> x\nA total of 23 subgoals...", "show \"(x + y) + z = x + (y + z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y + z = x + (y + z)", "by (cases x; cases y; cases z) (simp_all add: add.assoc)"], ["proof (state)\nthis:\n  x + y + z = x + (y + z)\n\ngoal (22 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<sqinter> y \\<le> x\n 6. \\<And>x y. x \\<sqinter> y \\<le> y\n 7. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 8. \\<And>x y. x \\<le> x \\<squnion> y\n 9. \\<And>y x. y \\<le> x \\<squnion> y\n 10. \\<And>y x z.\n        \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n        \\<Longrightarrow> y \\<squnion> z \\<le> x\nA total of 22 subgoals...", "show \"x + y = y + x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y = y + x", "by (cases x; cases y) (simp_all add: add.commute)"], ["proof (state)\nthis:\n  x + y = y + x\n\ngoal (21 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<sqinter> y \\<le> x\n 6. \\<And>x y. x \\<sqinter> y \\<le> y\n 7. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 8. \\<And>x y. x \\<le> x \\<squnion> y\n 9. \\<And>y x. y \\<le> x \\<squnion> y\n 10. \\<And>y x z.\n        \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n        \\<Longrightarrow> y \\<squnion> z \\<le> x\nA total of 21 subgoals...", "show \"(x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)", "by simp"], ["proof (state)\nthis:\n  (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n\ngoal (20 subgoals):\n 1. \\<And>x. x \\<le> x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 3. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 4. \\<And>x y. x \\<sqinter> y \\<le> x\n 5. \\<And>x y. x \\<sqinter> y \\<le> y\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 7. \\<And>x y. x \\<le> x \\<squnion> y\n 8. \\<And>y x. y \\<le> x \\<squnion> y\n 9. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 10. \\<And>a. bot \\<le> a\nA total of 20 subgoals...", "show \"x \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> x", "by (cases x) simp_all"], ["proof (state)\nthis:\n  x \\<le> x\n\ngoal (19 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 3. \\<And>x y. x \\<sqinter> y \\<le> x\n 4. \\<And>x y. x \\<sqinter> y \\<le> y\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 6. \\<And>x y. x \\<le> x \\<squnion> y\n 7. \\<And>y x. y \\<le> x \\<squnion> y\n 8. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 9. \\<And>a. bot \\<le> a\n 10. \\<And>a. a \\<le> top\nA total of 19 subgoals...", "show \"x \\<le> y \\<Longrightarrow> y \\<le> z \\<Longrightarrow> x \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z", "by (cases x; cases y; cases z) simp_all"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n\ngoal (18 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 2. \\<And>x y. x \\<sqinter> y \\<le> x\n 3. \\<And>x y. x \\<sqinter> y \\<le> y\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 5. \\<And>x y. x \\<le> x \\<squnion> y\n 6. \\<And>y x. y \\<le> x \\<squnion> y\n 7. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 8. \\<And>a. bot \\<le> a\n 9. \\<And>a. a \\<le> top\n 10. \\<And>x y. x \\<le> y \\<or> y \\<le> x\nA total of 18 subgoals...", "show \"x \\<le> y \\<Longrightarrow> y \\<le> x \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n\ngoal (17 subgoals):\n 1. \\<And>x y. x \\<sqinter> y \\<le> x\n 2. \\<And>x y. x \\<sqinter> y \\<le> y\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 4. \\<And>x y. x \\<le> x \\<squnion> y\n 5. \\<And>y x. y \\<le> x \\<squnion> y\n 6. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 7. \\<And>a. bot \\<le> a\n 8. \\<And>a. a \\<le> top\n 9. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 10. \\<And>x y z.\n        x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n        x + z \\<le> y + z\nA total of 17 subgoals...", "show \"x \\<sqinter> y \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqinter> y \\<le> x", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  x \\<sqinter> y \\<le> x\n\ngoal (16 subgoals):\n 1. \\<And>x y. x \\<sqinter> y \\<le> y\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 3. \\<And>x y. x \\<le> x \\<squnion> y\n 4. \\<And>y x. y \\<le> x \\<squnion> y\n 5. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 6. \\<And>a. bot \\<le> a\n 7. \\<And>a. a \\<le> top\n 8. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 9. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 10. \\<And>x y. x + y + bot = x + y\nA total of 16 subgoals...", "show \"x \\<sqinter> y \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqinter> y \\<le> y", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  x \\<sqinter> y \\<le> y\n\ngoal (15 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 2. \\<And>x y. x \\<le> x \\<squnion> y\n 3. \\<And>y x. y \\<le> x \\<squnion> y\n 4. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 5. \\<And>a. bot \\<le> a\n 6. \\<And>a. a \\<le> top\n 7. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 8. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 9. \\<And>x y. x + y + bot = x + y\n 10. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\nA total of 15 subgoals...", "show \"x \\<le> y \\<Longrightarrow> x \\<le> z \\<Longrightarrow> x \\<le> y \\<sqinter> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n    \\<Longrightarrow> x \\<le> y \\<sqinter> z", "by (cases x; cases y; cases z) simp_all"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n  \\<Longrightarrow> x \\<le> y \\<sqinter> z\n\ngoal (14 subgoals):\n 1. \\<And>x y. x \\<le> x \\<squnion> y\n 2. \\<And>y x. y \\<le> x \\<squnion> y\n 3. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 4. \\<And>a. bot \\<le> a\n 5. \\<And>a. a \\<le> top\n 6. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 7. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 8. \\<And>x y. x + y + bot = x + y\n 9. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 10. \\<And>x. - x = (if x = bot then top else bot)\nA total of 14 subgoals...", "show \"x \\<le> x \\<squnion> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> x \\<squnion> y", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  x \\<le> x \\<squnion> y\n\ngoal (13 subgoals):\n 1. \\<And>y x. y \\<le> x \\<squnion> y\n 2. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 3. \\<And>a. bot \\<le> a\n 4. \\<And>a. a \\<le> top\n 5. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 6. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 7. \\<And>x y. x + y + bot = x + y\n 8. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 9. \\<And>x. - x = (if x = bot then top else bot)\n 10. 1 = top\nA total of 13 subgoals...", "show \"y \\<le> x \\<squnion> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<le> x \\<squnion> y", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  y \\<le> x \\<squnion> y\n\ngoal (12 subgoals):\n 1. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 2. \\<And>a. bot \\<le> a\n 3. \\<And>a. a \\<le> top\n 4. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 5. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 6. \\<And>x y. x + y + bot = x + y\n 7. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 8. \\<And>x. - x = (if x = bot then top else bot)\n 9. 1 = top\n 10. \\<And>x y. x * y = x \\<sqinter> y\nA total of 12 subgoals...", "show \"y \\<le> x \\<Longrightarrow> z \\<le> x \\<Longrightarrow> y \\<squnion> z \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n    \\<Longrightarrow> y \\<squnion> z \\<le> x", "by (cases x; cases y; cases z) simp_all"], ["proof (state)\nthis:\n  \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n  \\<Longrightarrow> y \\<squnion> z \\<le> x\n\ngoal (11 subgoals):\n 1. \\<And>a. bot \\<le> a\n 2. \\<And>a. a \\<le> top\n 3. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 4. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 5. \\<And>x y. x + y + bot = x + y\n 6. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 7. \\<And>x. - x = (if x = bot then top else bot)\n 8. 1 = top\n 9. \\<And>x y. x * y = x \\<sqinter> y\n 10. \\<And>x. x\\<^sup>T = x\nA total of 11 subgoals...", "show \"bot \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bot \\<le> x", "by (cases x) (simp_all add: bot_extT_def)"], ["proof (state)\nthis:\n  bot \\<le> x\n\ngoal (10 subgoals):\n 1. \\<And>a. a \\<le> top\n 2. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 3. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 4. \\<And>x y. x + y + bot = x + y\n 5. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 6. \\<And>x. - x = (if x = bot then top else bot)\n 7. 1 = top\n 8. \\<And>x y. x * y = x \\<sqinter> y\n 9. \\<And>x. x\\<^sup>T = x\n 10. \\<And>x. x\\<^sup>\\<star> = top", "show \"x \\<le> top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> top", "by (cases x) (simp_all add: top_extT_def)"], ["proof (state)\nthis:\n  x \\<le> top\n\ngoal (9 subgoals):\n 1. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 2. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 3. \\<And>x y. x + y + bot = x + y\n 4. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 5. \\<And>x. - x = (if x = bot then top else bot)\n 6. 1 = top\n 7. \\<And>x y. x * y = x \\<sqinter> y\n 8. \\<And>x. x\\<^sup>T = x\n 9. \\<And>x. x\\<^sup>\\<star> = top", "show \"x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow> x + z \\<le> y + z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n    x + z \\<le> y + z", "by (cases x; cases y; cases z) (simp_all add: bot_extT_def add_right_mono)"], ["proof (state)\nthis:\n  x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n  x + z \\<le> y + z\n\ngoal (8 subgoals):\n 1. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 2. \\<And>x y. x + y + bot = x + y\n 3. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 4. \\<And>x. - x = (if x = bot then top else bot)\n 5. 1 = top\n 6. \\<And>x y. x * y = x \\<sqinter> y\n 7. \\<And>x. x\\<^sup>T = x\n 8. \\<And>x. x\\<^sup>\\<star> = top", "show \"x + y + bot = x + y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y + bot = x + y", "by (cases x; cases y) (simp_all add: bot_extT_def)"], ["proof (state)\nthis:\n  x + y + bot = x + y\n\ngoal (7 subgoals):\n 1. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 2. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 3. \\<And>x. - x = (if x = bot then top else bot)\n 4. 1 = top\n 5. \\<And>x y. x * y = x \\<sqinter> y\n 6. \\<And>x. x\\<^sup>T = x\n 7. \\<And>x. x\\<^sup>\\<star> = top", "show \"x + y = bot \\<longrightarrow> x = bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y = bot \\<longrightarrow> x = bot", "apply (cases x; cases y)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>x = extT.Val x1; y = extT.Val x1a\\<rbrakk>\n       \\<Longrightarrow> x + y = bot \\<longrightarrow> x = bot\n 2. \\<And>x1.\n       \\<lbrakk>x = extT.Val x1; y = extT.Top\\<rbrakk>\n       \\<Longrightarrow> x + y = bot \\<longrightarrow> x = bot\n 3. \\<And>x1.\n       \\<lbrakk>x = extT.Top; y = extT.Val x1\\<rbrakk>\n       \\<Longrightarrow> x + y = bot \\<longrightarrow> x = bot\n 4. \\<lbrakk>x = extT.Top; y = extT.Top\\<rbrakk>\n    \\<Longrightarrow> x + y = bot \\<longrightarrow> x = bot", "apply (metis (mono_tags) add.commute add_right_mono bot.extremum bot.extremum_uniqueI bot_zero extT.inject plus_extT.simps(1) bot_extT_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>x = extT.Val x1; y = extT.Top\\<rbrakk>\n       \\<Longrightarrow> x + y = bot \\<longrightarrow> x = bot\n 2. \\<And>x1.\n       \\<lbrakk>x = extT.Top; y = extT.Val x1\\<rbrakk>\n       \\<Longrightarrow> x + y = bot \\<longrightarrow> x = bot\n 3. \\<lbrakk>x = extT.Top; y = extT.Top\\<rbrakk>\n    \\<Longrightarrow> x + y = bot \\<longrightarrow> x = bot", "by (simp_all add: bot_extT_def)"], ["proof (state)\nthis:\n  x + y = bot \\<longrightarrow> x = bot\n\ngoal (6 subgoals):\n 1. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 2. \\<And>x. - x = (if x = bot then top else bot)\n 3. 1 = top\n 4. \\<And>x y. x * y = x \\<sqinter> y\n 5. \\<And>x. x\\<^sup>T = x\n 6. \\<And>x. x\\<^sup>\\<star> = top", "show \"x \\<le> y \\<or> y \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<or> y \\<le> x", "by (cases x; cases y) (simp_all add: linear)"], ["proof (state)\nthis:\n  x \\<le> y \\<or> y \\<le> x\n\ngoal (5 subgoals):\n 1. \\<And>x. - x = (if x = bot then top else bot)\n 2. 1 = top\n 3. \\<And>x y. x * y = x \\<sqinter> y\n 4. \\<And>x. x\\<^sup>T = x\n 5. \\<And>x. x\\<^sup>\\<star> = top", "show \"-x = (if x = bot then top else bot)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - x = (if x = bot then top else bot)", "by (cases x) (simp_all add: bot_extT_def top_extT_def)"], ["proof (state)\nthis:\n  - x = (if x = bot then top else bot)\n\ngoal (4 subgoals):\n 1. 1 = top\n 2. \\<And>x y. x * y = x \\<sqinter> y\n 3. \\<And>x. x\\<^sup>T = x\n 4. \\<And>x. x\\<^sup>\\<star> = top", "show \"(1::'a extT) = top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 = top", "by (simp add: one_extT_def top_extT_def)"], ["proof (state)\nthis:\n  1 = top\n\ngoal (3 subgoals):\n 1. \\<And>x y. x * y = x \\<sqinter> y\n 2. \\<And>x. x\\<^sup>T = x\n 3. \\<And>x. x\\<^sup>\\<star> = top", "show \"x * y = x \\<sqinter> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * y = x \\<sqinter> y", "by simp"], ["proof (state)\nthis:\n  x * y = x \\<sqinter> y\n\ngoal (2 subgoals):\n 1. \\<And>x. x\\<^sup>T = x\n 2. \\<And>x. x\\<^sup>\\<star> = top", "show \"x\\<^sup>T = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sup>T = x", "by simp"], ["proof (state)\nthis:\n  x\\<^sup>T = x\n\ngoal (1 subgoal):\n 1. \\<And>x. x\\<^sup>\\<star> = top", "show \"x\\<^sup>\\<star> = top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sup>\\<star> = top", "by (simp add: top_extT_def)"], ["proof (state)\nthis:\n  x\\<^sup>\\<star> = top\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>\nAn example of a linearly ordered commutative monoid with a least element is the set of real numbers extended by minus infinity with maximum as aggregation.\n\\<close>"], ["", "datatype real_max_bot =\n    MInfty\n  | R real"], ["", "instantiation real_max_bot :: linordered_comm_monoid_add_bot\nbegin"], ["", "definition \"bot_real_max_bot \\<equiv> MInfty\""], ["", "fun less_eq_real_max_bot where\n  \"less_eq_real_max_bot MInfty _ = True\"\n| \"less_eq_real_max_bot (R _) MInfty = False\"\n| \"less_eq_real_max_bot (R x) (R y) = (x \\<le> y)\""], ["", "fun less_real_max_bot where\n  \"less_real_max_bot _ MInfty = False\"\n| \"less_real_max_bot MInfty (R _) = True\"\n| \"less_real_max_bot (R x) (R y) = (x < y)\""], ["", "fun plus_real_max_bot where\n  \"plus_real_max_bot MInfty y = y\"\n| \"plus_real_max_bot x MInfty = x\"\n| \"plus_real_max_bot (R x) (R y) = R (max x y)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(real_max_bot, linordered_comm_monoid_add_bot_class)", "proof"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>a b c. a + b + c = a + (b + c)\n 2. \\<And>a b. a + b = b + a\n 3. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 4. \\<And>x. x \\<le> x\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 6. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 7. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 8. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 9. \\<And>a. bot \\<le> a\n 10. \\<And>x. bot + x = x", "fix x y z :: real_max_bot"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>a b c. a + b + c = a + (b + c)\n 2. \\<And>a b. a + b = b + a\n 3. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 4. \\<And>x. x \\<le> x\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 6. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 7. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 8. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 9. \\<And>a. bot \\<le> a\n 10. \\<And>x. bot + x = x", "show \"(x + y) + z = x + (y + z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y + z = x + (y + z)", "by (cases x; cases y; cases z) simp_all"], ["proof (state)\nthis:\n  x + y + z = x + (y + z)\n\ngoal (9 subgoals):\n 1. \\<And>a b. a + b = b + a\n 2. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 3. \\<And>x. x \\<le> x\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 5. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 6. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 7. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 8. \\<And>a. bot \\<le> a\n 9. \\<And>x. bot + x = x", "show \"x + y = y + x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y = y + x", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  x + y = y + x\n\ngoal (8 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 6. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 7. \\<And>a. bot \\<le> a\n 8. \\<And>x. bot + x = x", "show \"(x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)", "by (cases x; cases y) auto"], ["proof (state)\nthis:\n  (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n\ngoal (7 subgoals):\n 1. \\<And>x. x \\<le> x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 3. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 4. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 5. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 6. \\<And>a. bot \\<le> a\n 7. \\<And>x. bot + x = x", "show \"x \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> x", "by (cases x) simp_all"], ["proof (state)\nthis:\n  x \\<le> x\n\ngoal (6 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 3. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 4. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 5. \\<And>a. bot \\<le> a\n 6. \\<And>x. bot + x = x", "show \"x \\<le> y \\<Longrightarrow> y \\<le> z \\<Longrightarrow> x \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z", "by (cases x; cases y; cases z) simp_all"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n\ngoal (5 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 2. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 3. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 4. \\<And>a. bot \\<le> a\n 5. \\<And>x. bot + x = x", "show \"x \\<le> y \\<Longrightarrow> y \\<le> x \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n\ngoal (4 subgoals):\n 1. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 2. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 3. \\<And>a. bot \\<le> a\n 4. \\<And>x. bot + x = x", "show \"x \\<le> y \\<Longrightarrow> z + x \\<le> z + y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> z + x \\<le> z + y", "by (cases x; cases y; cases z) simp_all"], ["proof (state)\nthis:\n  x \\<le> y \\<Longrightarrow> z + x \\<le> z + y\n\ngoal (3 subgoals):\n 1. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 2. \\<And>a. bot \\<le> a\n 3. \\<And>x. bot + x = x", "show \"x \\<le> y \\<or> y \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<or> y \\<le> x", "by (cases x; cases y) auto"], ["proof (state)\nthis:\n  x \\<le> y \\<or> y \\<le> x\n\ngoal (2 subgoals):\n 1. \\<And>a. bot \\<le> a\n 2. \\<And>x. bot + x = x", "show \"bot \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bot \\<le> x", "by (cases x) (simp_all add: bot_real_max_bot_def)"], ["proof (state)\nthis:\n  bot \\<le> x\n\ngoal (1 subgoal):\n 1. \\<And>x. bot + x = x", "show \"bot + x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bot + x = x", "by (cases x) (simp_all add: bot_real_max_bot_def)"], ["proof (state)\nthis:\n  bot + x = x\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Linearly Ordered Commutative Monoids with a Greatest Element\\<close>"], ["", "text \\<open>\nIf a linearly ordered commutative monoid already contains a greatest element which is a unit of aggregation, only a new least element has to be added to obtain a linear aggregation lattice.\n\\<close>"], ["", "class linordered_comm_monoid_add_top = linordered_ab_semigroup_add + order_top +\n  assumes top_zero [simp]: \"top + x = x\"\nbegin"], ["", "sublocale linordered_comm_monoid_add where zero = top"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.linordered_comm_monoid_add (+) top (\\<le>) (<)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. top + a = a", "by simp"], ["", "lemma add_decreasing: \"x + y \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y \\<le> x", "using add_left_mono top.extremum"], ["proof (prove)\nusing this:\n  ?a \\<le> ?b \\<Longrightarrow> ?c + ?a \\<le> ?c + ?b\n  ?a \\<le> top\n\ngoal (1 subgoal):\n 1. x + y \\<le> x", "by fastforce"], ["", "lemma t_min: \"x + y \\<le> min x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y \\<le> min x y", "using add_commute add_decreasing"], ["proof (prove)\nusing this:\n  ?a + ?b = ?b + ?a\n  ?x + ?y \\<le> ?x\n\ngoal (1 subgoal):\n 1. x + y \\<le> min x y", "by force"], ["", "end"], ["", "datatype 'a extB =\n    Bot\n  | Val 'a"], ["", "instantiation extB :: (linordered_comm_monoid_add_top) linear_aggregation_kleene_algebra\nbegin"], ["", "fun plus_extB :: \"'a extB \\<Rightarrow> 'a extB \\<Rightarrow> 'a extB\" where\n  \"plus_extB Bot Bot = Val top\"\n| \"plus_extB Bot (Val x) = Val x\"\n| \"plus_extB (Val x) Bot = Val x\"\n| \"plus_extB (Val x) (Val y) = Val (x + y)\""], ["", "fun sup_extB :: \"'a extB \\<Rightarrow> 'a extB \\<Rightarrow> 'a extB\" where\n  \"sup_extB Bot x = x\"\n| \"sup_extB (Val x) Bot = Val x\"\n| \"sup_extB (Val x) (Val y) = Val (max x y)\""], ["", "fun inf_extB :: \"'a extB \\<Rightarrow> 'a extB \\<Rightarrow> 'a extB\" where\n  \"inf_extB Bot _ = Bot\"\n| \"inf_extB (Val _) Bot = Bot\"\n| \"inf_extB (Val x) (Val y) = Val (min x y)\""], ["", "fun times_extB :: \"'a extB \\<Rightarrow> 'a extB \\<Rightarrow> 'a extB\" where \"times_extB x y = x \\<sqinter> y\""], ["", "fun uminus_extB :: \"'a extB \\<Rightarrow> 'a extB\" where\n  \"uminus_extB Bot = Val top\"\n| \"uminus_extB (Val _) = Bot\""], ["", "fun star_extB :: \"'a extB \\<Rightarrow> 'a extB\" where \"star_extB _ = Val top\""], ["", "fun conv_extB :: \"'a extB \\<Rightarrow> 'a extB\" where \"conv_extB x = x\""], ["", "definition bot_extB :: \"'a extB\" where \"bot_extB \\<equiv> Bot\""], ["", "definition one_extB :: \"'a extB\" where \"one_extB \\<equiv> Val top\""], ["", "definition top_extB :: \"'a extB\" where \"top_extB \\<equiv> Val top\""], ["", "fun less_eq_extB :: \"'a extB \\<Rightarrow> 'a extB \\<Rightarrow> bool\" where\n  \"less_eq_extB Bot _ = True\"\n| \"less_eq_extB (Val _) Bot = False\"\n| \"less_eq_extB (Val x) (Val y) = (x \\<le> y)\""], ["", "fun less_extB :: \"'a extB \\<Rightarrow> 'a extB \\<Rightarrow> bool\" where \"less_extB x y = (x \\<le> y \\<and> \\<not> y \\<le> x)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a extB, linear_aggregation_kleene_algebra_class)", "proof"], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<sqinter> y \\<le> x\n 6. \\<And>x y. x \\<sqinter> y \\<le> y\n 7. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 8. \\<And>x y. x \\<le> x \\<squnion> y\n 9. \\<And>y x. y \\<le> x \\<squnion> y\n 10. \\<And>y x z.\n        \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n        \\<Longrightarrow> y \\<squnion> z \\<le> x\nA total of 23 subgoals...", "fix x y z :: \"'a extB\""], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<sqinter> y \\<le> x\n 6. \\<And>x y. x \\<sqinter> y \\<le> y\n 7. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 8. \\<And>x y. x \\<le> x \\<squnion> y\n 9. \\<And>y x. y \\<le> x \\<squnion> y\n 10. \\<And>y x z.\n        \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n        \\<Longrightarrow> y \\<squnion> z \\<le> x\nA total of 23 subgoals...", "show \"(x + y) + z = x + (y + z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y + z = x + (y + z)", "by (cases x; cases y; cases z) (simp_all add: add.assoc)"], ["proof (state)\nthis:\n  x + y + z = x + (y + z)\n\ngoal (22 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<sqinter> y \\<le> x\n 6. \\<And>x y. x \\<sqinter> y \\<le> y\n 7. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 8. \\<And>x y. x \\<le> x \\<squnion> y\n 9. \\<And>y x. y \\<le> x \\<squnion> y\n 10. \\<And>y x z.\n        \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n        \\<Longrightarrow> y \\<squnion> z \\<le> x\nA total of 22 subgoals...", "show \"x + y = y + x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y = y + x", "by (cases x; cases y) (simp_all add: add.commute)"], ["proof (state)\nthis:\n  x + y = y + x\n\ngoal (21 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<sqinter> y \\<le> x\n 6. \\<And>x y. x \\<sqinter> y \\<le> y\n 7. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 8. \\<And>x y. x \\<le> x \\<squnion> y\n 9. \\<And>y x. y \\<le> x \\<squnion> y\n 10. \\<And>y x z.\n        \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n        \\<Longrightarrow> y \\<squnion> z \\<le> x\nA total of 21 subgoals...", "show \"(x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)", "by simp"], ["proof (state)\nthis:\n  (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n\ngoal (20 subgoals):\n 1. \\<And>x. x \\<le> x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 3. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 4. \\<And>x y. x \\<sqinter> y \\<le> x\n 5. \\<And>x y. x \\<sqinter> y \\<le> y\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 7. \\<And>x y. x \\<le> x \\<squnion> y\n 8. \\<And>y x. y \\<le> x \\<squnion> y\n 9. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 10. \\<And>a. bot \\<le> a\nA total of 20 subgoals...", "show \"x \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> x", "by (cases x) simp_all"], ["proof (state)\nthis:\n  x \\<le> x\n\ngoal (19 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 3. \\<And>x y. x \\<sqinter> y \\<le> x\n 4. \\<And>x y. x \\<sqinter> y \\<le> y\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 6. \\<And>x y. x \\<le> x \\<squnion> y\n 7. \\<And>y x. y \\<le> x \\<squnion> y\n 8. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 9. \\<And>a. bot \\<le> a\n 10. \\<And>a. a \\<le> top\nA total of 19 subgoals...", "show \"x \\<le> y \\<Longrightarrow> y \\<le> z \\<Longrightarrow> x \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z", "by (cases x; cases y; cases z) simp_all"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n\ngoal (18 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 2. \\<And>x y. x \\<sqinter> y \\<le> x\n 3. \\<And>x y. x \\<sqinter> y \\<le> y\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 5. \\<And>x y. x \\<le> x \\<squnion> y\n 6. \\<And>y x. y \\<le> x \\<squnion> y\n 7. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 8. \\<And>a. bot \\<le> a\n 9. \\<And>a. a \\<le> top\n 10. \\<And>x y. x \\<le> y \\<or> y \\<le> x\nA total of 18 subgoals...", "show \"x \\<le> y \\<Longrightarrow> y \\<le> x \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n\ngoal (17 subgoals):\n 1. \\<And>x y. x \\<sqinter> y \\<le> x\n 2. \\<And>x y. x \\<sqinter> y \\<le> y\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 4. \\<And>x y. x \\<le> x \\<squnion> y\n 5. \\<And>y x. y \\<le> x \\<squnion> y\n 6. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 7. \\<And>a. bot \\<le> a\n 8. \\<And>a. a \\<le> top\n 9. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 10. \\<And>x y z.\n        x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n        x + z \\<le> y + z\nA total of 17 subgoals...", "show \"x \\<sqinter> y \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqinter> y \\<le> x", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  x \\<sqinter> y \\<le> x\n\ngoal (16 subgoals):\n 1. \\<And>x y. x \\<sqinter> y \\<le> y\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 3. \\<And>x y. x \\<le> x \\<squnion> y\n 4. \\<And>y x. y \\<le> x \\<squnion> y\n 5. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 6. \\<And>a. bot \\<le> a\n 7. \\<And>a. a \\<le> top\n 8. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 9. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 10. \\<And>x y. x + y + bot = x + y\nA total of 16 subgoals...", "show \"x \\<sqinter> y \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqinter> y \\<le> y", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  x \\<sqinter> y \\<le> y\n\ngoal (15 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 2. \\<And>x y. x \\<le> x \\<squnion> y\n 3. \\<And>y x. y \\<le> x \\<squnion> y\n 4. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 5. \\<And>a. bot \\<le> a\n 6. \\<And>a. a \\<le> top\n 7. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 8. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 9. \\<And>x y. x + y + bot = x + y\n 10. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\nA total of 15 subgoals...", "show \"x \\<le> y \\<Longrightarrow> x \\<le> z \\<Longrightarrow> x \\<le> y \\<sqinter> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n    \\<Longrightarrow> x \\<le> y \\<sqinter> z", "by (cases x; cases y; cases z) simp_all"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n  \\<Longrightarrow> x \\<le> y \\<sqinter> z\n\ngoal (14 subgoals):\n 1. \\<And>x y. x \\<le> x \\<squnion> y\n 2. \\<And>y x. y \\<le> x \\<squnion> y\n 3. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 4. \\<And>a. bot \\<le> a\n 5. \\<And>a. a \\<le> top\n 6. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 7. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 8. \\<And>x y. x + y + bot = x + y\n 9. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 10. \\<And>x. - x = (if x = bot then top else bot)\nA total of 14 subgoals...", "show \"x \\<le> x \\<squnion> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> x \\<squnion> y", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  x \\<le> x \\<squnion> y\n\ngoal (13 subgoals):\n 1. \\<And>y x. y \\<le> x \\<squnion> y\n 2. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 3. \\<And>a. bot \\<le> a\n 4. \\<And>a. a \\<le> top\n 5. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 6. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 7. \\<And>x y. x + y + bot = x + y\n 8. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 9. \\<And>x. - x = (if x = bot then top else bot)\n 10. 1 = top\nA total of 13 subgoals...", "show \"y \\<le> x \\<squnion> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<le> x \\<squnion> y", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  y \\<le> x \\<squnion> y\n\ngoal (12 subgoals):\n 1. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 2. \\<And>a. bot \\<le> a\n 3. \\<And>a. a \\<le> top\n 4. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 5. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 6. \\<And>x y. x + y + bot = x + y\n 7. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 8. \\<And>x. - x = (if x = bot then top else bot)\n 9. 1 = top\n 10. \\<And>x y. x * y = x \\<sqinter> y\nA total of 12 subgoals...", "show \"y \\<le> x \\<Longrightarrow> z \\<le> x \\<Longrightarrow> y \\<squnion> z \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n    \\<Longrightarrow> y \\<squnion> z \\<le> x", "by (cases x; cases y; cases z) simp_all"], ["proof (state)\nthis:\n  \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n  \\<Longrightarrow> y \\<squnion> z \\<le> x\n\ngoal (11 subgoals):\n 1. \\<And>a. bot \\<le> a\n 2. \\<And>a. a \\<le> top\n 3. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 4. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 5. \\<And>x y. x + y + bot = x + y\n 6. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 7. \\<And>x. - x = (if x = bot then top else bot)\n 8. 1 = top\n 9. \\<And>x y. x * y = x \\<sqinter> y\n 10. \\<And>x. x\\<^sup>T = x\nA total of 11 subgoals...", "show \"bot \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bot \\<le> x", "by (simp add: bot_extB_def)"], ["proof (state)\nthis:\n  bot \\<le> x\n\ngoal (10 subgoals):\n 1. \\<And>a. a \\<le> top\n 2. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 3. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 4. \\<And>x y. x + y + bot = x + y\n 5. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 6. \\<And>x. - x = (if x = bot then top else bot)\n 7. 1 = top\n 8. \\<And>x y. x * y = x \\<sqinter> y\n 9. \\<And>x. x\\<^sup>T = x\n 10. \\<And>x. x\\<^sup>\\<star> = top", "show 1: \"x \\<le> top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> top", "by (cases x) (simp_all add: top_extB_def)"], ["proof (state)\nthis:\n  x \\<le> top\n\ngoal (9 subgoals):\n 1. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 2. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 3. \\<And>x y. x + y + bot = x + y\n 4. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 5. \\<And>x. - x = (if x = bot then top else bot)\n 6. 1 = top\n 7. \\<And>x y. x * y = x \\<sqinter> y\n 8. \\<And>x. x\\<^sup>T = x\n 9. \\<And>x. x\\<^sup>\\<star> = top", "show \"x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow> x + z \\<le> y + z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n    x + z \\<le> y + z", "apply (cases x; cases y; cases z)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<lbrakk>x = extB.Bot; y = extB.Bot; z = extB.Bot\\<rbrakk>\n    \\<Longrightarrow> x \\<noteq> bot \\<and>\n                      x + bot \\<le> y + bot \\<longrightarrow>\n                      x + z \\<le> y + z\n 2. \\<And>x2.\n       \\<lbrakk>x = extB.Bot; y = extB.Bot; z = extB.Val x2\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 3. \\<And>x2.\n       \\<lbrakk>x = extB.Bot; y = extB.Val x2; z = extB.Bot\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 4. \\<And>x2 x2a.\n       \\<lbrakk>x = extB.Bot; y = extB.Val x2; z = extB.Val x2a\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 5. \\<And>x2.\n       \\<lbrakk>x = extB.Val x2; y = extB.Bot; z = extB.Bot\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 6. \\<And>x2 x2a.\n       \\<lbrakk>x = extB.Val x2; y = extB.Bot; z = extB.Val x2a\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 7. \\<And>x2 x2a.\n       \\<lbrakk>x = extB.Val x2; y = extB.Val x2a; z = extB.Bot\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 8. \\<And>x2 x2a x2b.\n       \\<lbrakk>x = extB.Val x2; y = extB.Val x2a; z = extB.Val x2b\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z", "prefer 6"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x2 x2a.\n       \\<lbrakk>x = extB.Val x2; y = extB.Bot; z = extB.Val x2a\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 2. \\<lbrakk>x = extB.Bot; y = extB.Bot; z = extB.Bot\\<rbrakk>\n    \\<Longrightarrow> x \\<noteq> bot \\<and>\n                      x + bot \\<le> y + bot \\<longrightarrow>\n                      x + z \\<le> y + z\n 3. \\<And>x2.\n       \\<lbrakk>x = extB.Bot; y = extB.Bot; z = extB.Val x2\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 4. \\<And>x2.\n       \\<lbrakk>x = extB.Bot; y = extB.Val x2; z = extB.Bot\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 5. \\<And>x2 x2a.\n       \\<lbrakk>x = extB.Bot; y = extB.Val x2; z = extB.Val x2a\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 6. \\<And>x2.\n       \\<lbrakk>x = extB.Val x2; y = extB.Bot; z = extB.Bot\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 7. \\<And>x2 x2a.\n       \\<lbrakk>x = extB.Val x2; y = extB.Val x2a; z = extB.Bot\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 8. \\<And>x2 x2a x2b.\n       \\<lbrakk>x = extB.Val x2; y = extB.Val x2a; z = extB.Val x2b\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z", "using 1"], ["proof (prove)\nusing this:\n  x \\<le> top\n\ngoal (8 subgoals):\n 1. \\<And>x2 x2a.\n       \\<lbrakk>x = extB.Val x2; y = extB.Bot; z = extB.Val x2a\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 2. \\<lbrakk>x = extB.Bot; y = extB.Bot; z = extB.Bot\\<rbrakk>\n    \\<Longrightarrow> x \\<noteq> bot \\<and>\n                      x + bot \\<le> y + bot \\<longrightarrow>\n                      x + z \\<le> y + z\n 3. \\<And>x2.\n       \\<lbrakk>x = extB.Bot; y = extB.Bot; z = extB.Val x2\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 4. \\<And>x2.\n       \\<lbrakk>x = extB.Bot; y = extB.Val x2; z = extB.Bot\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 5. \\<And>x2 x2a.\n       \\<lbrakk>x = extB.Bot; y = extB.Val x2; z = extB.Val x2a\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 6. \\<And>x2.\n       \\<lbrakk>x = extB.Val x2; y = extB.Bot; z = extB.Bot\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 7. \\<And>x2 x2a.\n       \\<lbrakk>x = extB.Val x2; y = extB.Val x2a; z = extB.Bot\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 8. \\<And>x2 x2a x2b.\n       \\<lbrakk>x = extB.Val x2; y = extB.Val x2a; z = extB.Val x2b\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z", "apply (metis (mono_tags, lifting) plus_extB.simps(2,4) top_extB_def add_right_mono less_eq_extB.simps(3) top_zero)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>x = extB.Bot; y = extB.Bot; z = extB.Bot\\<rbrakk>\n    \\<Longrightarrow> x \\<noteq> bot \\<and>\n                      x + bot \\<le> y + bot \\<longrightarrow>\n                      x + z \\<le> y + z\n 2. \\<And>x2.\n       \\<lbrakk>x = extB.Bot; y = extB.Bot; z = extB.Val x2\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 3. \\<And>x2.\n       \\<lbrakk>x = extB.Bot; y = extB.Val x2; z = extB.Bot\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 4. \\<And>x2 x2a.\n       \\<lbrakk>x = extB.Bot; y = extB.Val x2; z = extB.Val x2a\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 5. \\<And>x2.\n       \\<lbrakk>x = extB.Val x2; y = extB.Bot; z = extB.Bot\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 6. \\<And>x2 x2a.\n       \\<lbrakk>x = extB.Val x2; y = extB.Val x2a; z = extB.Bot\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z\n 7. \\<And>x2 x2a x2b.\n       \\<lbrakk>x = extB.Val x2; y = extB.Val x2a; z = extB.Val x2b\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> bot \\<and>\n                         x + bot \\<le> y + bot \\<longrightarrow>\n                         x + z \\<le> y + z", "by (simp_all add: bot_extB_def add_right_mono)"], ["proof (state)\nthis:\n  x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n  x + z \\<le> y + z\n\ngoal (8 subgoals):\n 1. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 2. \\<And>x y. x + y + bot = x + y\n 3. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 4. \\<And>x. - x = (if x = bot then top else bot)\n 5. 1 = top\n 6. \\<And>x y. x * y = x \\<sqinter> y\n 7. \\<And>x. x\\<^sup>T = x\n 8. \\<And>x. x\\<^sup>\\<star> = top", "show \"x + y + bot = x + y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y + bot = x + y", "by (cases x; cases y) (simp_all add: bot_extB_def)"], ["proof (state)\nthis:\n  x + y + bot = x + y\n\ngoal (7 subgoals):\n 1. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 2. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 3. \\<And>x. - x = (if x = bot then top else bot)\n 4. 1 = top\n 5. \\<And>x y. x * y = x \\<sqinter> y\n 6. \\<And>x. x\\<^sup>T = x\n 7. \\<And>x. x\\<^sup>\\<star> = top", "show \"x + y = bot \\<longrightarrow> x = bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y = bot \\<longrightarrow> x = bot", "by (cases x; cases y) (simp_all add: bot_extB_def)"], ["proof (state)\nthis:\n  x + y = bot \\<longrightarrow> x = bot\n\ngoal (6 subgoals):\n 1. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 2. \\<And>x. - x = (if x = bot then top else bot)\n 3. 1 = top\n 4. \\<And>x y. x * y = x \\<sqinter> y\n 5. \\<And>x. x\\<^sup>T = x\n 6. \\<And>x. x\\<^sup>\\<star> = top", "show \"x \\<le> y \\<or> y \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<or> y \\<le> x", "by (cases x; cases y) (simp_all add: linear)"], ["proof (state)\nthis:\n  x \\<le> y \\<or> y \\<le> x\n\ngoal (5 subgoals):\n 1. \\<And>x. - x = (if x = bot then top else bot)\n 2. 1 = top\n 3. \\<And>x y. x * y = x \\<sqinter> y\n 4. \\<And>x. x\\<^sup>T = x\n 5. \\<And>x. x\\<^sup>\\<star> = top", "show \"-x = (if x = bot then top else bot)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - x = (if x = bot then top else bot)", "by (cases x) (simp_all add: bot_extB_def top_extB_def)"], ["proof (state)\nthis:\n  - x = (if x = bot then top else bot)\n\ngoal (4 subgoals):\n 1. 1 = top\n 2. \\<And>x y. x * y = x \\<sqinter> y\n 3. \\<And>x. x\\<^sup>T = x\n 4. \\<And>x. x\\<^sup>\\<star> = top", "show \"(1::'a extB) = top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 = top", "by (simp add: one_extB_def top_extB_def)"], ["proof (state)\nthis:\n  1 = top\n\ngoal (3 subgoals):\n 1. \\<And>x y. x * y = x \\<sqinter> y\n 2. \\<And>x. x\\<^sup>T = x\n 3. \\<And>x. x\\<^sup>\\<star> = top", "show \"x * y = x \\<sqinter> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * y = x \\<sqinter> y", "by simp"], ["proof (state)\nthis:\n  x * y = x \\<sqinter> y\n\ngoal (2 subgoals):\n 1. \\<And>x. x\\<^sup>T = x\n 2. \\<And>x. x\\<^sup>\\<star> = top", "show \"x\\<^sup>T = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sup>T = x", "by simp"], ["proof (state)\nthis:\n  x\\<^sup>T = x\n\ngoal (1 subgoal):\n 1. \\<And>x. x\\<^sup>\\<star> = top", "show \"x\\<^sup>\\<star> = top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sup>\\<star> = top", "by (simp add: top_extB_def)"], ["proof (state)\nthis:\n  x\\<^sup>\\<star> = top\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>\nAn example of a linearly ordered commutative monoid with a greatest element is the set of real numbers extended by infinity with minimum as aggregation.\n\\<close>"], ["", "datatype real_min_top =\n    R real\n  | PInfty"], ["", "instantiation real_min_top :: linordered_comm_monoid_add_top\nbegin"], ["", "definition \"top_real_min_top \\<equiv> PInfty\""], ["", "fun less_eq_real_min_top where\n  \"less_eq_real_min_top _ PInfty = True\"\n| \"less_eq_real_min_top PInfty (R _) = False\"\n| \"less_eq_real_min_top (R x) (R y) = (x \\<le> y)\""], ["", "fun less_real_min_top where\n  \"less_real_min_top PInfty _ = False\"\n| \"less_real_min_top (R _) PInfty = True\"\n| \"less_real_min_top (R x) (R y) = (x < y)\""], ["", "fun plus_real_min_top where\n  \"plus_real_min_top PInfty y = y\"\n| \"plus_real_min_top x PInfty = x\"\n| \"plus_real_min_top (R x) (R y) = R (min x y)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(real_min_top, linordered_comm_monoid_add_top_class)", "proof"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>a b c. a + b + c = a + (b + c)\n 2. \\<And>a b. a + b = b + a\n 3. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 4. \\<And>x. x \\<le> x\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 6. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 7. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 8. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 9. \\<And>a. a \\<le> top\n 10. \\<And>x. top + x = x", "fix x y z :: real_min_top"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>a b c. a + b + c = a + (b + c)\n 2. \\<And>a b. a + b = b + a\n 3. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 4. \\<And>x. x \\<le> x\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 6. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 7. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 8. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 9. \\<And>a. a \\<le> top\n 10. \\<And>x. top + x = x", "show \"(x + y) + z = x + (y + z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y + z = x + (y + z)", "by (cases x; cases y; cases z) simp_all"], ["proof (state)\nthis:\n  x + y + z = x + (y + z)\n\ngoal (9 subgoals):\n 1. \\<And>a b. a + b = b + a\n 2. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 3. \\<And>x. x \\<le> x\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 5. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 6. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 7. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 8. \\<And>a. a \\<le> top\n 9. \\<And>x. top + x = x", "show \"x + y = y + x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y = y + x", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  x + y = y + x\n\ngoal (8 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 6. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 7. \\<And>a. a \\<le> top\n 8. \\<And>x. top + x = x", "show \"(x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)", "by (cases x; cases y) auto"], ["proof (state)\nthis:\n  (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n\ngoal (7 subgoals):\n 1. \\<And>x. x \\<le> x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 3. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 4. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 5. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 6. \\<And>a. a \\<le> top\n 7. \\<And>x. top + x = x", "show \"x \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> x", "by (cases x) simp_all"], ["proof (state)\nthis:\n  x \\<le> x\n\ngoal (6 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 3. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 4. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 5. \\<And>a. a \\<le> top\n 6. \\<And>x. top + x = x", "show \"x \\<le> y \\<Longrightarrow> y \\<le> z \\<Longrightarrow> x \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z", "by (cases x; cases y; cases z) simp_all"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n\ngoal (5 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 2. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 3. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 4. \\<And>a. a \\<le> top\n 5. \\<And>x. top + x = x", "show \"x \\<le> y \\<Longrightarrow> y \\<le> x \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n\ngoal (4 subgoals):\n 1. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 2. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 3. \\<And>a. a \\<le> top\n 4. \\<And>x. top + x = x", "show \"x \\<le> y \\<Longrightarrow> z + x \\<le> z + y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> z + x \\<le> z + y", "by (cases x; cases y; cases z) simp_all"], ["proof (state)\nthis:\n  x \\<le> y \\<Longrightarrow> z + x \\<le> z + y\n\ngoal (3 subgoals):\n 1. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 2. \\<And>a. a \\<le> top\n 3. \\<And>x. top + x = x", "show \"x \\<le> y \\<or> y \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<or> y \\<le> x", "by (cases x; cases y) auto"], ["proof (state)\nthis:\n  x \\<le> y \\<or> y \\<le> x\n\ngoal (2 subgoals):\n 1. \\<And>a. a \\<le> top\n 2. \\<And>x. top + x = x", "show \"x \\<le> top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> top", "by (cases x) (simp_all add: top_real_min_top_def)"], ["proof (state)\nthis:\n  x \\<le> top\n\ngoal (1 subgoal):\n 1. \\<And>x. top + x = x", "show \"top + x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. top + x = x", "by (cases x) (simp_all add: top_real_min_top_def)"], ["proof (state)\nthis:\n  top + x = x\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>\nAnother example of a linearly ordered commutative monoid with a greatest element is the unit interval of real numbers with any triangular norm (t-norm) as aggregation.\nIdeally, we would like to show that the unit interval is an instance of \\<open>linordered_comm_monoid_add_top\\<close>.\nHowever, this class has an addition operation, so the instantiation would require dependent types.\nWe therefore show only the order property in general and a particular instance of the class.\n\\<close>"], ["", "typedef (overloaded) unit = \"{0..1} :: real set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {0..1}", "by auto"], ["", "setup_lifting type_definition_unit"], ["", "instantiation unit :: bounded_linorder\nbegin"], ["", "lift_definition bot_unit :: unit is 0"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<in> {0..1}", "by simp"], ["", "lift_definition top_unit :: unit is 1"], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<in> {0..1}", "by simp"], ["", "lift_definition less_eq_unit :: \"unit \\<Rightarrow> unit \\<Rightarrow> bool\" is less_eq"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition less_unit :: \"unit \\<Rightarrow> unit \\<Rightarrow> bool\" is less"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(Linear_Aggregation_Algebras.unit, bounded_linorder_class)", "apply intro_classes"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 6. \\<And>a. bot \\<le> a\n 7. \\<And>a. a \\<le> top", "using bot_unit.rep_eq top_unit.rep_eq less_eq_unit.rep_eq less_unit.rep_eq unit.Rep_unit_inject unit.Rep_unit"], ["proof (prove)\nusing this:\n  Linear_Aggregation_Algebras.unit.Rep_unit bot = 0\n  Linear_Aggregation_Algebras.unit.Rep_unit top = 1\n  (?x \\<le> ?xa) =\n  (Linear_Aggregation_Algebras.unit.Rep_unit ?x\n   \\<le> Linear_Aggregation_Algebras.unit.Rep_unit ?xa)\n  (?x < ?xa) =\n  (Linear_Aggregation_Algebras.unit.Rep_unit ?x\n   < Linear_Aggregation_Algebras.unit.Rep_unit ?xa)\n  (Linear_Aggregation_Algebras.unit.Rep_unit ?x =\n   Linear_Aggregation_Algebras.unit.Rep_unit ?y) =\n  (?x = ?y)\n  Linear_Aggregation_Algebras.unit.Rep_unit ?x \\<in> {0..1}\n\ngoal (7 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 6. \\<And>a. bot \\<le> a\n 7. \\<And>a. a \\<le> top", "by auto"], ["", "end"], ["", "text \\<open>\nWe give the \\L{}ukasiewicz t-norm as a particular instance.\n\\<close>"], ["", "instantiation unit :: linordered_comm_monoid_add_top\nbegin"], ["", "abbreviation tl :: \"real \\<Rightarrow> real \\<Rightarrow> real\" where\n  \"tl x y \\<equiv> max (x + y - 1) 0\""], ["", "lemma tl_assoc:\n  \"x \\<in> {0..1} \\<Longrightarrow> z \\<in> {0..1} \\<Longrightarrow> tl (tl x y) z = tl x (tl y z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> {0..1}; z \\<in> {0..1}\\<rbrakk>\n    \\<Longrightarrow> local.tl (local.tl x y) z = local.tl x (local.tl y z)", "by auto"], ["", "lemma tl_top_zero:\n  \"x \\<in> {0..1} \\<Longrightarrow> tl 1 x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> {0..1} \\<Longrightarrow> local.tl 1 x = x", "by auto"], ["", "lift_definition plus_unit :: \"unit \\<Rightarrow> unit \\<Rightarrow> unit\" is tl"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>real1 real2.\n       \\<lbrakk>real1 \\<in> {0..1}; real2 \\<in> {0..1}\\<rbrakk>\n       \\<Longrightarrow> local.tl real1 real2 \\<in> {0..1}", "by simp"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS\n     (Linear_Aggregation_Algebras.unit,\n      linordered_comm_monoid_add_top_class)", "apply intro_classes"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b c. a + b + c = a + (b + c)\n 2. \\<And>a b. a + b = b + a\n 3. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 4. \\<And>x. top + x = x", "apply (metis (mono_tags, lifting) plus_unit.rep_eq unit.Rep_unit_inject unit.Rep_unit tl_assoc)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b. a + b = b + a\n 2. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 3. \\<And>x. top + x = x", "using unit.Rep_unit_inject plus_unit.rep_eq"], ["proof (prove)\nusing this:\n  (Linear_Aggregation_Algebras.unit.Rep_unit ?x =\n   Linear_Aggregation_Algebras.unit.Rep_unit ?y) =\n  (?x = ?y)\n  Linear_Aggregation_Algebras.unit.Rep_unit (?x + ?xa) =\n  local.tl (Linear_Aggregation_Algebras.unit.Rep_unit ?x)\n   (Linear_Aggregation_Algebras.unit.Rep_unit ?xa)\n\ngoal (3 subgoals):\n 1. \\<And>a b. a + b = b + a\n 2. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 3. \\<And>x. top + x = x", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 2. \\<And>x. top + x = x", "apply (simp add: less_eq_unit.rep_eq plus_unit.rep_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. top + x = x", "by (metis (mono_tags, lifting) top_unit.rep_eq unit.Rep_unit_inject unit.Rep_unit plus_unit.rep_eq tl_top_zero)"], ["", "end"], ["", "subsection \\<open>Linearly Ordered Commutative Monoids with a Least Element and a Greatest Element\\<close>"], ["", "text \\<open>\nIf a linearly ordered commutative monoid already contains a least element which is a unit of aggregation and a greatest element, it forms a linear aggregation lattice.\n\\<close>"], ["", "class linordered_bounded_comm_monoid_add_bot = linordered_comm_monoid_add_bot + order_top\nbegin"], ["", "subclass bounded_linorder"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.bounded_linorder (\\<le>) (<) bot top", ".."], ["", "subclass aggregation_order"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.aggregation_order (+) bot (\\<le>) (<)", "apply unfold_locales"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 2. \\<And>x y. x + y + bot = x + y\n 3. \\<And>x y. x + y = bot \\<longrightarrow> x = bot", "apply (simp add: add_right_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y. x + y + bot = x + y\n 2. \\<And>x y. x + y = bot \\<longrightarrow> x = bot", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. x + y = bot \\<longrightarrow> x = bot", "by (metis add_0_right add_left_mono bot.extremum bot.extremum_unique)"], ["", "sublocale linear_aggregation_kleene_algebra where sup = max and inf = min and times = min and conv = id and one = top and star = \"\\<lambda>x . top\" and uminus = \"\\<lambda>x . if x = bot then top else bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.linear_aggregation_kleene_algebra (\\<lambda>x. top) top min\n     (\\<lambda>x. if x = bot then top else bot) min (\\<le>) (<) max bot top\n     (+) id", "apply unfold_locales"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>x y. min x y \\<le> x\n 2. \\<And>x y. min x y \\<le> y\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> min y z\n 4. \\<And>x y. x \\<le> max x y\n 5. \\<And>y x. y \\<le> max x y\n 6. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> max y z \\<le> x\n 7. \\<And>x. (if x = bot then top else bot) = (if x = bot then top else bot)\n 8. top = top\n 9. \\<And>x y. min x y = min x y\n 10. \\<And>x. id x = x\nA total of 11 subgoals...", "by simp_all"], ["", "lemma t_top: \"x + top = top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + top = top", "by (metis add_right_mono bot.extremum bot_zero top_unique)"], ["", "lemma add_increasing: \"x \\<le> x + y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> x + y", "using add_left_mono bot.extremum"], ["proof (prove)\nusing this:\n  ?a \\<le> ?b \\<Longrightarrow> ?c + ?a \\<le> ?c + ?b\n  bot \\<le> ?a\n\ngoal (1 subgoal):\n 1. x \\<le> x + y", "by fastforce"], ["", "lemma t_max: \"max x y \\<le> x + y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max x y \\<le> x + y", "using add_commute add_increasing"], ["proof (prove)\nusing this:\n  ?a + ?b = ?b + ?a\n  ?x \\<le> ?x + ?y\n\ngoal (1 subgoal):\n 1. max x y \\<le> x + y", "by force"], ["", "end"], ["", "text \\<open>\nAn example of a linearly ordered commutative monoid with a least and a greatest element is the unit interval of real numbers with any triangular conorm (t-conorm) as aggregation.\nFor the reason outlined above, we show just a particular instance of \\<open>linordered_bounded_comm_monoid_add_bot\\<close>.\nBecause the \\<open>plus\\<close> functions in the two instances given for the unit type are different, we work on a copy of the unit type.\n\\<close>"], ["", "typedef (overloaded) unit2 = \"{0..1} :: real set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {0..1}", "by auto"], ["", "setup_lifting type_definition_unit2"], ["", "instantiation unit2 :: bounded_linorder\nbegin"], ["", "lift_definition bot_unit2 :: unit2 is 0"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<in> {0..1}", "by simp"], ["", "lift_definition top_unit2 :: unit2 is 1"], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<in> {0..1}", "by simp"], ["", "lift_definition less_eq_unit2 :: \"unit2 \\<Rightarrow> unit2 \\<Rightarrow> bool\" is less_eq"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition less_unit2 :: \"unit2 \\<Rightarrow> unit2 \\<Rightarrow> bool\" is less"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(unit2, bounded_linorder_class)", "apply intro_classes"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 6. \\<And>a. bot \\<le> a\n 7. \\<And>a. a \\<le> top", "using bot_unit2.rep_eq top_unit2.rep_eq less_eq_unit2.rep_eq less_unit2.rep_eq unit2.Rep_unit2_inject unit2.Rep_unit2"], ["proof (prove)\nusing this:\n  Rep_unit2 bot = 0\n  Rep_unit2 top = 1\n  (?x \\<le> ?xa) = (Rep_unit2 ?x \\<le> Rep_unit2 ?xa)\n  (?x < ?xa) = (Rep_unit2 ?x < Rep_unit2 ?xa)\n  (Rep_unit2 ?x = Rep_unit2 ?y) = (?x = ?y)\n  Rep_unit2 ?x \\<in> {0..1}\n\ngoal (7 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 6. \\<And>a. bot \\<le> a\n 7. \\<And>a. a \\<le> top", "by auto"], ["", "end"], ["", "text \\<open>\nWe give the product t-conorm as a particular instance.\n\\<close>"], ["", "instantiation unit2 :: linordered_bounded_comm_monoid_add_bot\nbegin"], ["", "abbreviation sp :: \"real \\<Rightarrow> real \\<Rightarrow> real\" where\n  \"sp x y \\<equiv> x + y - x * y\""], ["", "lemma sp_assoc:\n  \"sp (sp x y) z = sp x (sp y z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sp (sp x y) z = sp x (sp y z)", "by (unfold left_diff_distrib right_diff_distrib distrib_left distrib_right) simp"], ["", "lemma sp_mono:\n  assumes \"z \\<in> {0..1}\"\n      and \"x \\<le> y\"\n    shows \"sp z x \\<le> sp z y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sp z x \\<le> sp z y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sp z x \\<le> sp z y", "have \"z + (1 - z) * x \\<le> z + (1 - z) * y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z + (1 - z) * x \\<le> z + (1 - z) * y", "using assms mult_left_mono"], ["proof (prove)\nusing this:\n  z \\<in> {0..1}\n  x \\<le> y\n  \\<lbrakk>?a \\<le> ?b; (0::?'a) \\<le> ?c\\<rbrakk>\n  \\<Longrightarrow> ?c * ?a \\<le> ?c * ?b\n\ngoal (1 subgoal):\n 1. z + (1 - z) * x \\<le> z + (1 - z) * y", "by fastforce"], ["proof (state)\nthis:\n  z + (1 - z) * x \\<le> z + (1 - z) * y\n\ngoal (1 subgoal):\n 1. sp z x \\<le> sp z y", "thus ?thesis"], ["proof (prove)\nusing this:\n  z + (1 - z) * x \\<le> z + (1 - z) * y\n\ngoal (1 subgoal):\n 1. sp z x \\<le> sp z y", "by (unfold left_diff_distrib right_diff_distrib distrib_left distrib_right) simp"], ["proof (state)\nthis:\n  sp z x \\<le> sp z y\n\ngoal:\nNo subgoals!", "qed"], ["", "lift_definition plus_unit2 :: \"unit2 \\<Rightarrow> unit2 \\<Rightarrow> unit2\" is sp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>real1 real2.\n       \\<lbrakk>real1 \\<in> {0..1}; real2 \\<in> {0..1}\\<rbrakk>\n       \\<Longrightarrow> sp real1 real2 \\<in> {0..1}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>real1 real2.\n       \\<lbrakk>real1 \\<in> {0..1}; real2 \\<in> {0..1}\\<rbrakk>\n       \\<Longrightarrow> sp real1 real2 \\<in> {0..1}", "fix x y :: real"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>real1 real2.\n       \\<lbrakk>real1 \\<in> {0..1}; real2 \\<in> {0..1}\\<rbrakk>\n       \\<Longrightarrow> sp real1 real2 \\<in> {0..1}", "assume 1: \"x \\<in> {0..1}\""], ["proof (state)\nthis:\n  x \\<in> {0..1}\n\ngoal (1 subgoal):\n 1. \\<And>real1 real2.\n       \\<lbrakk>real1 \\<in> {0..1}; real2 \\<in> {0..1}\\<rbrakk>\n       \\<Longrightarrow> sp real1 real2 \\<in> {0..1}", "assume 2: \"y \\<in> {0..1}\""], ["proof (state)\nthis:\n  y \\<in> {0..1}\n\ngoal (1 subgoal):\n 1. \\<And>real1 real2.\n       \\<lbrakk>real1 \\<in> {0..1}; real2 \\<in> {0..1}\\<rbrakk>\n       \\<Longrightarrow> sp real1 real2 \\<in> {0..1}", "have \"x - x * y \\<le> 1 - y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x - x * y \\<le> 1 - y", "using 1 2"], ["proof (prove)\nusing this:\n  x \\<in> {0..1}\n  y \\<in> {0..1}\n\ngoal (1 subgoal):\n 1. x - x * y \\<le> 1 - y", "by (metis (full_types) atLeastAtMost_iff diff_ge_0_iff_ge left_diff_distrib' mult.commute mult.left_neutral mult_left_le)"], ["proof (state)\nthis:\n  x - x * y \\<le> 1 - y\n\ngoal (1 subgoal):\n 1. \\<And>real1 real2.\n       \\<lbrakk>real1 \\<in> {0..1}; real2 \\<in> {0..1}\\<rbrakk>\n       \\<Longrightarrow> sp real1 real2 \\<in> {0..1}", "hence 3: \"x + y - x * y \\<le> 1\""], ["proof (prove)\nusing this:\n  x - x * y \\<le> 1 - y\n\ngoal (1 subgoal):\n 1. sp x y \\<le> 1", "by simp"], ["proof (state)\nthis:\n  sp x y \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<And>real1 real2.\n       \\<lbrakk>real1 \\<in> {0..1}; real2 \\<in> {0..1}\\<rbrakk>\n       \\<Longrightarrow> sp real1 real2 \\<in> {0..1}", "have \"y * (x - 1) \\<le> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y * (x - 1) \\<le> 0", "using 1 2"], ["proof (prove)\nusing this:\n  x \\<in> {0..1}\n  y \\<in> {0..1}\n\ngoal (1 subgoal):\n 1. y * (x - 1) \\<le> 0", "by (meson atLeastAtMost_iff le_iff_diff_le_0 mult_nonneg_nonpos)"], ["proof (state)\nthis:\n  y * (x - 1) \\<le> 0\n\ngoal (1 subgoal):\n 1. \\<And>real1 real2.\n       \\<lbrakk>real1 \\<in> {0..1}; real2 \\<in> {0..1}\\<rbrakk>\n       \\<Longrightarrow> sp real1 real2 \\<in> {0..1}", "hence \"x + y - x * y \\<ge> 0\""], ["proof (prove)\nusing this:\n  y * (x - 1) \\<le> 0\n\ngoal (1 subgoal):\n 1. 0 \\<le> sp x y", "using 1"], ["proof (prove)\nusing this:\n  y * (x - 1) \\<le> 0\n  x \\<in> {0..1}\n\ngoal (1 subgoal):\n 1. 0 \\<le> sp x y", "by (metis (no_types) atLeastAtMost_iff diff_diff_eq2 diff_ge_0_iff_ge left_diff_distrib mult.commute mult.left_neutral order_trans)"], ["proof (state)\nthis:\n  0 \\<le> sp x y\n\ngoal (1 subgoal):\n 1. \\<And>real1 real2.\n       \\<lbrakk>real1 \\<in> {0..1}; real2 \\<in> {0..1}\\<rbrakk>\n       \\<Longrightarrow> sp real1 real2 \\<in> {0..1}", "thus \"x + y - x * y \\<in> {0..1}\""], ["proof (prove)\nusing this:\n  0 \\<le> sp x y\n\ngoal (1 subgoal):\n 1. sp x y \\<in> {0..1}", "using 3"], ["proof (prove)\nusing this:\n  0 \\<le> sp x y\n  sp x y \\<le> 1\n\ngoal (1 subgoal):\n 1. sp x y \\<in> {0..1}", "by simp"], ["proof (state)\nthis:\n  sp x y \\<in> {0..1}\n\ngoal:\nNo subgoals!", "qed"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(unit2, linordered_bounded_comm_monoid_add_bot_class)", "apply intro_classes"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b c. a + b + c = a + (b + c)\n 2. \\<And>a b. a + b = b + a\n 3. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 4. \\<And>x. bot + x = x", "apply (metis (mono_tags, lifting) plus_unit2.rep_eq unit2.Rep_unit2_inject sp_assoc)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b. a + b = b + a\n 2. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 3. \\<And>x. bot + x = x", "using unit2.Rep_unit2_inject plus_unit2.rep_eq"], ["proof (prove)\nusing this:\n  (Rep_unit2 ?x = Rep_unit2 ?y) = (?x = ?y)\n  Rep_unit2 (?x + ?xa) = sp (Rep_unit2 ?x) (Rep_unit2 ?xa)\n\ngoal (3 subgoals):\n 1. \\<And>a b. a + b = b + a\n 2. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 3. \\<And>x. bot + x = x", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 2. \\<And>x. bot + x = x", "using sp_mono unit2.Rep_unit2 less_eq_unit2.rep_eq plus_unit2.rep_eq"], ["proof (prove)\nusing this:\n  \\<lbrakk>?z \\<in> {0..1}; ?x \\<le> ?y\\<rbrakk>\n  \\<Longrightarrow> sp ?z ?x \\<le> sp ?z ?y\n  Rep_unit2 ?x \\<in> {0..1}\n  (?x \\<le> ?xa) = (Rep_unit2 ?x \\<le> Rep_unit2 ?xa)\n  Rep_unit2 (?x + ?xa) = sp (Rep_unit2 ?x) (Rep_unit2 ?xa)\n\ngoal (2 subgoals):\n 1. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 2. \\<And>x. bot + x = x", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. bot + x = x", "using bot_unit2.rep_eq unit2.Rep_unit2_inject plus_unit2.rep_eq"], ["proof (prove)\nusing this:\n  Rep_unit2 bot = 0\n  (Rep_unit2 ?x = Rep_unit2 ?y) = (?x = ?y)\n  Rep_unit2 (?x + ?xa) = sp (Rep_unit2 ?x) (Rep_unit2 ?xa)\n\ngoal (1 subgoal):\n 1. \\<And>x. bot + x = x", "by fastforce"], ["", "end"], ["", "subsection \\<open>Constant Aggregation\\<close>"], ["", "text \\<open>\nAny linear order with a constant element extended by new least and greatest elements forms a linear aggregation lattice where the aggregation returns the given constant.\n\\<close>"], ["", "class pointed_linorder = linorder +\n  fixes const :: 'a"], ["", "datatype 'a extC =\n    Bot\n  | Val 'a\n  | Top"], ["", "instantiation extC :: (pointed_linorder) linear_aggregation_kleene_algebra\nbegin"], ["", "fun plus_extC :: \"'a extC \\<Rightarrow> 'a extC \\<Rightarrow> 'a extC\" where \"plus_extC x y = Val const\""], ["", "fun sup_extC :: \"'a extC \\<Rightarrow> 'a extC \\<Rightarrow> 'a extC\" where\n  \"sup_extC Bot x = x\"\n| \"sup_extC (Val x) Bot = Val x\"\n| \"sup_extC (Val x) (Val y) = Val (max x y)\"\n| \"sup_extC (Val _) Top = Top\"\n| \"sup_extC Top _ = Top\""], ["", "fun inf_extC :: \"'a extC \\<Rightarrow> 'a extC \\<Rightarrow> 'a extC\" where\n  \"inf_extC Bot _ = Bot\"\n| \"inf_extC (Val _) Bot = Bot\"\n| \"inf_extC (Val x) (Val y) = Val (min x y)\"\n| \"inf_extC (Val x) Top = Val x\"\n| \"inf_extC Top x = x\""], ["", "fun times_extC :: \"'a extC \\<Rightarrow> 'a extC \\<Rightarrow> 'a extC\" where \"times_extC x y = x \\<sqinter> y\""], ["", "fun uminus_extC :: \"'a extC \\<Rightarrow> 'a extC\" where\n  \"uminus_extC Bot = Top\"\n| \"uminus_extC (Val _) = Bot\"\n| \"uminus_extC Top = Bot\""], ["", "fun star_extC :: \"'a extC \\<Rightarrow> 'a extC\" where \"star_extC _ = Top\""], ["", "fun conv_extC :: \"'a extC \\<Rightarrow> 'a extC\" where \"conv_extC x = x\""], ["", "definition bot_extC :: \"'a extC\" where \"bot_extC \\<equiv> Bot\""], ["", "definition one_extC :: \"'a extC\" where \"one_extC \\<equiv> Top\""], ["", "definition top_extC :: \"'a extC\" where \"top_extC \\<equiv> Top\""], ["", "fun less_eq_extC :: \"'a extC \\<Rightarrow> 'a extC \\<Rightarrow> bool\" where\n  \"less_eq_extC Bot _ = True\"\n| \"less_eq_extC (Val _) Bot = False\"\n| \"less_eq_extC (Val x) (Val y) = (x \\<le> y)\"\n| \"less_eq_extC (Val _) Top = True\"\n| \"less_eq_extC Top Bot = False\"\n| \"less_eq_extC Top (Val _) = False\"\n| \"less_eq_extC Top Top = True\""], ["", "fun less_extC :: \"'a extC \\<Rightarrow> 'a extC \\<Rightarrow> bool\" where \"less_extC x y = (x \\<le> y \\<and> \\<not> y \\<le> x)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a extC, linear_aggregation_kleene_algebra_class)", "proof"], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<sqinter> y \\<le> x\n 6. \\<And>x y. x \\<sqinter> y \\<le> y\n 7. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 8. \\<And>x y. x \\<le> x \\<squnion> y\n 9. \\<And>y x. y \\<le> x \\<squnion> y\n 10. \\<And>y x z.\n        \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n        \\<Longrightarrow> y \\<squnion> z \\<le> x\nA total of 23 subgoals...", "fix x y z :: \"'a extC\""], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<sqinter> y \\<le> x\n 6. \\<And>x y. x \\<sqinter> y \\<le> y\n 7. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 8. \\<And>x y. x \\<le> x \\<squnion> y\n 9. \\<And>y x. y \\<le> x \\<squnion> y\n 10. \\<And>y x z.\n        \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n        \\<Longrightarrow> y \\<squnion> z \\<le> x\nA total of 23 subgoals...", "show \"(x + y) + z = x + (y + z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y + z = x + (y + z)", "by simp"], ["proof (state)\nthis:\n  x + y + z = x + (y + z)\n\ngoal (22 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<sqinter> y \\<le> x\n 6. \\<And>x y. x \\<sqinter> y \\<le> y\n 7. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 8. \\<And>x y. x \\<le> x \\<squnion> y\n 9. \\<And>y x. y \\<le> x \\<squnion> y\n 10. \\<And>y x z.\n        \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n        \\<Longrightarrow> y \\<squnion> z \\<le> x\nA total of 22 subgoals...", "show \"x + y = y + x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y = y + x", "by simp"], ["proof (state)\nthis:\n  x + y = y + x\n\ngoal (21 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<sqinter> y \\<le> x\n 6. \\<And>x y. x \\<sqinter> y \\<le> y\n 7. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 8. \\<And>x y. x \\<le> x \\<squnion> y\n 9. \\<And>y x. y \\<le> x \\<squnion> y\n 10. \\<And>y x z.\n        \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n        \\<Longrightarrow> y \\<squnion> z \\<le> x\nA total of 21 subgoals...", "show \"(x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)", "by simp"], ["proof (state)\nthis:\n  (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n\ngoal (20 subgoals):\n 1. \\<And>x. x \\<le> x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 3. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 4. \\<And>x y. x \\<sqinter> y \\<le> x\n 5. \\<And>x y. x \\<sqinter> y \\<le> y\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 7. \\<And>x y. x \\<le> x \\<squnion> y\n 8. \\<And>y x. y \\<le> x \\<squnion> y\n 9. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 10. \\<And>a. bot \\<le> a\nA total of 20 subgoals...", "show \"x \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> x", "by (cases x) simp_all"], ["proof (state)\nthis:\n  x \\<le> x\n\ngoal (19 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 3. \\<And>x y. x \\<sqinter> y \\<le> x\n 4. \\<And>x y. x \\<sqinter> y \\<le> y\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 6. \\<And>x y. x \\<le> x \\<squnion> y\n 7. \\<And>y x. y \\<le> x \\<squnion> y\n 8. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 9. \\<And>a. bot \\<le> a\n 10. \\<And>a. a \\<le> top\nA total of 19 subgoals...", "show \"x \\<le> y \\<Longrightarrow> y \\<le> z \\<Longrightarrow> x \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z", "by (cases x; cases y; cases z) simp_all"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n\ngoal (18 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 2. \\<And>x y. x \\<sqinter> y \\<le> x\n 3. \\<And>x y. x \\<sqinter> y \\<le> y\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 5. \\<And>x y. x \\<le> x \\<squnion> y\n 6. \\<And>y x. y \\<le> x \\<squnion> y\n 7. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 8. \\<And>a. bot \\<le> a\n 9. \\<And>a. a \\<le> top\n 10. \\<And>x y. x \\<le> y \\<or> y \\<le> x\nA total of 18 subgoals...", "show \"x \\<le> y \\<Longrightarrow> y \\<le> x \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n\ngoal (17 subgoals):\n 1. \\<And>x y. x \\<sqinter> y \\<le> x\n 2. \\<And>x y. x \\<sqinter> y \\<le> y\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 4. \\<And>x y. x \\<le> x \\<squnion> y\n 5. \\<And>y x. y \\<le> x \\<squnion> y\n 6. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 7. \\<And>a. bot \\<le> a\n 8. \\<And>a. a \\<le> top\n 9. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 10. \\<And>x y z.\n        x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n        x + z \\<le> y + z\nA total of 17 subgoals...", "show \"x \\<sqinter> y \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqinter> y \\<le> x", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  x \\<sqinter> y \\<le> x\n\ngoal (16 subgoals):\n 1. \\<And>x y. x \\<sqinter> y \\<le> y\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 3. \\<And>x y. x \\<le> x \\<squnion> y\n 4. \\<And>y x. y \\<le> x \\<squnion> y\n 5. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 6. \\<And>a. bot \\<le> a\n 7. \\<And>a. a \\<le> top\n 8. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 9. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 10. \\<And>x y. x + y + bot = x + y\nA total of 16 subgoals...", "show \"x \\<sqinter> y \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqinter> y \\<le> y", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  x \\<sqinter> y \\<le> y\n\ngoal (15 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 2. \\<And>x y. x \\<le> x \\<squnion> y\n 3. \\<And>y x. y \\<le> x \\<squnion> y\n 4. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 5. \\<And>a. bot \\<le> a\n 6. \\<And>a. a \\<le> top\n 7. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 8. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 9. \\<And>x y. x + y + bot = x + y\n 10. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\nA total of 15 subgoals...", "show \"x \\<le> y \\<Longrightarrow> x \\<le> z \\<Longrightarrow> x \\<le> y \\<sqinter> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n    \\<Longrightarrow> x \\<le> y \\<sqinter> z", "by (cases x; cases y; cases z) simp_all"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n  \\<Longrightarrow> x \\<le> y \\<sqinter> z\n\ngoal (14 subgoals):\n 1. \\<And>x y. x \\<le> x \\<squnion> y\n 2. \\<And>y x. y \\<le> x \\<squnion> y\n 3. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 4. \\<And>a. bot \\<le> a\n 5. \\<And>a. a \\<le> top\n 6. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 7. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 8. \\<And>x y. x + y + bot = x + y\n 9. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 10. \\<And>x. - x = (if x = bot then top else bot)\nA total of 14 subgoals...", "show \"x \\<le> x \\<squnion> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> x \\<squnion> y", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  x \\<le> x \\<squnion> y\n\ngoal (13 subgoals):\n 1. \\<And>y x. y \\<le> x \\<squnion> y\n 2. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 3. \\<And>a. bot \\<le> a\n 4. \\<And>a. a \\<le> top\n 5. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 6. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 7. \\<And>x y. x + y + bot = x + y\n 8. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 9. \\<And>x. - x = (if x = bot then top else bot)\n 10. 1 = top\nA total of 13 subgoals...", "show \"y \\<le> x \\<squnion> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<le> x \\<squnion> y", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  y \\<le> x \\<squnion> y\n\ngoal (12 subgoals):\n 1. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 2. \\<And>a. bot \\<le> a\n 3. \\<And>a. a \\<le> top\n 4. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 5. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 6. \\<And>x y. x + y + bot = x + y\n 7. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 8. \\<And>x. - x = (if x = bot then top else bot)\n 9. 1 = top\n 10. \\<And>x y. x * y = x \\<sqinter> y\nA total of 12 subgoals...", "show \"y \\<le> x \\<Longrightarrow> z \\<le> x \\<Longrightarrow> y \\<squnion> z \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n    \\<Longrightarrow> y \\<squnion> z \\<le> x", "by (cases x; cases y; cases z) simp_all"], ["proof (state)\nthis:\n  \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n  \\<Longrightarrow> y \\<squnion> z \\<le> x\n\ngoal (11 subgoals):\n 1. \\<And>a. bot \\<le> a\n 2. \\<And>a. a \\<le> top\n 3. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 4. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 5. \\<And>x y. x + y + bot = x + y\n 6. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 7. \\<And>x. - x = (if x = bot then top else bot)\n 8. 1 = top\n 9. \\<And>x y. x * y = x \\<sqinter> y\n 10. \\<And>x. x\\<^sup>T = x\nA total of 11 subgoals...", "show \"bot \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bot \\<le> x", "by (simp add: bot_extC_def)"], ["proof (state)\nthis:\n  bot \\<le> x\n\ngoal (10 subgoals):\n 1. \\<And>a. a \\<le> top\n 2. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 3. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 4. \\<And>x y. x + y + bot = x + y\n 5. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 6. \\<And>x. - x = (if x = bot then top else bot)\n 7. 1 = top\n 8. \\<And>x y. x * y = x \\<sqinter> y\n 9. \\<And>x. x\\<^sup>T = x\n 10. \\<And>x. x\\<^sup>\\<star> = top", "show \"x \\<le> top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> top", "by (cases x) (simp_all add: top_extC_def)"], ["proof (state)\nthis:\n  x \\<le> top\n\ngoal (9 subgoals):\n 1. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 2. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 3. \\<And>x y. x + y + bot = x + y\n 4. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 5. \\<And>x. - x = (if x = bot then top else bot)\n 6. 1 = top\n 7. \\<And>x y. x * y = x \\<sqinter> y\n 8. \\<And>x. x\\<^sup>T = x\n 9. \\<And>x. x\\<^sup>\\<star> = top", "show \"x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow> x + z \\<le> y + z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n    x + z \\<le> y + z", "by simp"], ["proof (state)\nthis:\n  x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n  x + z \\<le> y + z\n\ngoal (8 subgoals):\n 1. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 2. \\<And>x y. x + y + bot = x + y\n 3. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 4. \\<And>x. - x = (if x = bot then top else bot)\n 5. 1 = top\n 6. \\<And>x y. x * y = x \\<sqinter> y\n 7. \\<And>x. x\\<^sup>T = x\n 8. \\<And>x. x\\<^sup>\\<star> = top", "show \"x + y + bot = x + y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y + bot = x + y", "by simp"], ["proof (state)\nthis:\n  x + y + bot = x + y\n\ngoal (7 subgoals):\n 1. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 2. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 3. \\<And>x. - x = (if x = bot then top else bot)\n 4. 1 = top\n 5. \\<And>x y. x * y = x \\<sqinter> y\n 6. \\<And>x. x\\<^sup>T = x\n 7. \\<And>x. x\\<^sup>\\<star> = top", "show \"x + y = bot \\<longrightarrow> x = bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y = bot \\<longrightarrow> x = bot", "by (simp add: bot_extC_def)"], ["proof (state)\nthis:\n  x + y = bot \\<longrightarrow> x = bot\n\ngoal (6 subgoals):\n 1. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 2. \\<And>x. - x = (if x = bot then top else bot)\n 3. 1 = top\n 4. \\<And>x y. x * y = x \\<sqinter> y\n 5. \\<And>x. x\\<^sup>T = x\n 6. \\<And>x. x\\<^sup>\\<star> = top", "show \"x \\<le> y \\<or> y \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<or> y \\<le> x", "by (cases x; cases y) (simp_all add: linear)"], ["proof (state)\nthis:\n  x \\<le> y \\<or> y \\<le> x\n\ngoal (5 subgoals):\n 1. \\<And>x. - x = (if x = bot then top else bot)\n 2. 1 = top\n 3. \\<And>x y. x * y = x \\<sqinter> y\n 4. \\<And>x. x\\<^sup>T = x\n 5. \\<And>x. x\\<^sup>\\<star> = top", "show \"-x = (if x = bot then top else bot)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - x = (if x = bot then top else bot)", "by (cases x) (simp_all add: bot_extC_def top_extC_def)"], ["proof (state)\nthis:\n  - x = (if x = bot then top else bot)\n\ngoal (4 subgoals):\n 1. 1 = top\n 2. \\<And>x y. x * y = x \\<sqinter> y\n 3. \\<And>x. x\\<^sup>T = x\n 4. \\<And>x. x\\<^sup>\\<star> = top", "show \"(1::'a extC) = top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 = top", "by (simp add: one_extC_def top_extC_def)"], ["proof (state)\nthis:\n  1 = top\n\ngoal (3 subgoals):\n 1. \\<And>x y. x * y = x \\<sqinter> y\n 2. \\<And>x. x\\<^sup>T = x\n 3. \\<And>x. x\\<^sup>\\<star> = top", "show \"x * y = x \\<sqinter> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * y = x \\<sqinter> y", "by simp"], ["proof (state)\nthis:\n  x * y = x \\<sqinter> y\n\ngoal (2 subgoals):\n 1. \\<And>x. x\\<^sup>T = x\n 2. \\<And>x. x\\<^sup>\\<star> = top", "show \"x\\<^sup>T = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sup>T = x", "by simp"], ["proof (state)\nthis:\n  x\\<^sup>T = x\n\ngoal (1 subgoal):\n 1. \\<And>x. x\\<^sup>\\<star> = top", "show \"x\\<^sup>\\<star> = top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sup>\\<star> = top", "by (simp add: top_extC_def)"], ["proof (state)\nthis:\n  x\\<^sup>\\<star> = top\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>\nAn example of a linear order is the set of real numbers.\nAny real number can be chosen as the constant.\n\\<close>"], ["", "instantiation real :: pointed_linorder\nbegin"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(real, pointed_linorder_class)", ".."], ["", "end"], ["", "text \\<open>\nThe following instance shows that any linear order with a constant forms a linearly ordered commutative semigroup with the alpha-median operation as aggregation.\nThe alpha-median of two elements is the median of these elements and the given constant.\n\\<close>"], ["", "fun median3 :: \"'a::ord \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\" where\n  \"median3 x y z =\n    (if x \\<le> y \\<and> y \\<le> z then y else\n     if x \\<le> z \\<and> z \\<le> y then z else\n     if y \\<le> x \\<and> x \\<le> z then x else\n     if y \\<le> z \\<and> z \\<le> x then z else\n     if z \\<le> x \\<and> x \\<le> y then x else y)\""], ["", "interpretation alpha_median: linordered_ab_semigroup_add where plus = \"median3 const\" and less_eq = less_eq and less = less"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.linordered_ab_semigroup_add (median3 const) (\\<le>) (<)", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a b c.\n       median3 const (median3 const a b) c =\n       median3 const a (median3 const b c)\n 2. \\<And>a b. median3 const a b = median3 const b a\n 3. \\<And>a b c.\n       a \\<le> b \\<Longrightarrow> median3 const c a \\<le> median3 const c b", "fix a b c :: 'a"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a b c.\n       median3 const (median3 const a b) c =\n       median3 const a (median3 const b c)\n 2. \\<And>a b. median3 const a b = median3 const b a\n 3. \\<And>a b c.\n       a \\<le> b \\<Longrightarrow> median3 const c a \\<le> median3 const c b", "show \"median3 const (median3 const a b) c = median3 const a (median3 const b c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. median3 const (median3 const a b) c =\n    median3 const a (median3 const b c)", "by (cases \"const \\<le> a\"; cases \"const \\<le> b\"; cases \"const \\<le> c\"; cases \"a \\<le> b\"; cases \"a \\<le> c\"; cases \"b \\<le> c\") auto"], ["proof (state)\nthis:\n  median3 const (median3 const a b) c = median3 const a (median3 const b c)\n\ngoal (2 subgoals):\n 1. \\<And>a b. median3 const a b = median3 const b a\n 2. \\<And>a b c.\n       a \\<le> b \\<Longrightarrow> median3 const c a \\<le> median3 const c b", "show \"median3 const a b = median3 const b a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. median3 const a b = median3 const b a", "by (cases \"const \\<le> a\"; cases \"const \\<le> b\"; cases \"a \\<le> b\") auto"], ["proof (state)\nthis:\n  median3 const a b = median3 const b a\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       a \\<le> b \\<Longrightarrow> median3 const c a \\<le> median3 const c b", "assume \"a \\<le> b\""], ["proof (state)\nthis:\n  a \\<le> b\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       a \\<le> b \\<Longrightarrow> median3 const c a \\<le> median3 const c b", "thus \"median3 const c a \\<le> median3 const c b\""], ["proof (prove)\nusing this:\n  a \\<le> b\n\ngoal (1 subgoal):\n 1. median3 const c a \\<le> median3 const c b", "by (cases \"const \\<le> a\"; cases \"const \\<le> b\"; cases \"const \\<le> c\"; cases \"a \\<le> c\"; cases \"b \\<le> c\") auto"], ["proof (state)\nthis:\n  median3 const c a \\<le> median3 const c b\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Counting Aggregation\\<close>"], ["", "text \\<open>\nAny linear order extended by new least and greatest elements and a copy of the natural numbers forms a linear aggregation lattice where the aggregation counts non-$\\bot$ elements using the copy of the natural numbers.\n\\<close>"], ["", "datatype 'a extN =\n    Bot\n  | Val 'a\n  | N nat\n  | Top"], ["", "instantiation extN :: (linorder) linear_aggregation_kleene_algebra\nbegin"], ["", "fun plus_extN :: \"'a extN \\<Rightarrow> 'a extN \\<Rightarrow> 'a extN\" where\n  \"plus_extN Bot Bot = N 0\"\n| \"plus_extN Bot (Val _) = N 1\"\n| \"plus_extN Bot (N y) = N y\"\n| \"plus_extN Bot Top = N 1\"\n| \"plus_extN (Val _) Bot = N 1\"\n| \"plus_extN (Val _) (Val _) = N 2\"\n| \"plus_extN (Val _) (N y) = N (y + 1)\"\n| \"plus_extN (Val _) Top = N 2\"\n| \"plus_extN (N x) Bot = N x\"\n| \"plus_extN (N x) (Val _) = N (x + 1)\"\n| \"plus_extN (N x) (N y) = N (x + y)\"\n| \"plus_extN (N x) Top = N (x + 1)\"\n| \"plus_extN Top Bot = N 1\"\n| \"plus_extN Top (Val _) = N 2\"\n| \"plus_extN Top (N y) = N (y + 1)\"\n| \"plus_extN Top Top = N 2\""], ["", "fun sup_extN :: \"'a extN \\<Rightarrow> 'a extN \\<Rightarrow> 'a extN\" where\n  \"sup_extN Bot x = x\"\n| \"sup_extN (Val x) Bot = Val x\"\n| \"sup_extN (Val x) (Val y) = Val (max x y)\"\n| \"sup_extN (Val _) (N y) = N y\"\n| \"sup_extN (Val _) Top = Top\"\n| \"sup_extN (N x) Bot = N x\"\n| \"sup_extN (N x) (Val _) = N x\"\n| \"sup_extN (N x) (N y) = N (max x y)\"\n| \"sup_extN (N _) Top = Top\"\n| \"sup_extN Top _ = Top\""], ["", "fun inf_extN :: \"'a extN \\<Rightarrow> 'a extN \\<Rightarrow> 'a extN\" where\n  \"inf_extN Bot _ = Bot\"\n| \"inf_extN (Val _) Bot = Bot\"\n| \"inf_extN (Val x) (Val y) = Val (min x y)\"\n| \"inf_extN (Val x) (N _) = Val x\"\n| \"inf_extN (Val x) Top = Val x\"\n| \"inf_extN (N _) Bot = Bot\"\n| \"inf_extN (N _) (Val y) = Val y\"\n| \"inf_extN (N x) (N y) = N (min x y)\"\n| \"inf_extN (N x) Top = N x\"\n| \"inf_extN Top y = y\""], ["", "fun times_extN :: \"'a extN \\<Rightarrow> 'a extN \\<Rightarrow> 'a extN\" where \"times_extN x y = x \\<sqinter> y\""], ["", "fun uminus_extN :: \"'a extN \\<Rightarrow> 'a extN\" where\n  \"uminus_extN Bot = Top\"\n| \"uminus_extN (Val _) = Bot\"\n| \"uminus_extN (N _) = Bot\"\n| \"uminus_extN Top = Bot\""], ["", "fun star_extN :: \"'a extN \\<Rightarrow> 'a extN\" where \"star_extN _ = Top\""], ["", "fun conv_extN :: \"'a extN \\<Rightarrow> 'a extN\" where \"conv_extN x = x\""], ["", "definition bot_extN :: \"'a extN\" where \"bot_extN \\<equiv> Bot\""], ["", "definition one_extN :: \"'a extN\" where \"one_extN \\<equiv> Top\""], ["", "definition top_extN :: \"'a extN\" where \"top_extN \\<equiv> Top\""], ["", "fun less_eq_extN :: \"'a extN \\<Rightarrow> 'a extN \\<Rightarrow> bool\" where\n  \"less_eq_extN Bot _ = True\"\n| \"less_eq_extN (Val _) Bot = False\"\n| \"less_eq_extN (Val x) (Val y) = (x \\<le> y)\"\n| \"less_eq_extN (Val _) (N _) = True\"\n| \"less_eq_extN (Val _) Top = True\"\n| \"less_eq_extN (N _) Bot = False\"\n| \"less_eq_extN (N _) (Val _) = False\"\n| \"less_eq_extN (N x) (N y) = (x \\<le> y)\"\n| \"less_eq_extN (N _) Top = True\"\n| \"less_eq_extN Top Bot = False\"\n| \"less_eq_extN Top (Val _) = False\"\n| \"less_eq_extN Top (N _) = False\"\n| \"less_eq_extN Top Top = True\""], ["", "fun less_extN :: \"'a extN \\<Rightarrow> 'a extN \\<Rightarrow> bool\" where \"less_extN x y = (x \\<le> y \\<and> \\<not> y \\<le> x)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a extN, linear_aggregation_kleene_algebra_class)", "proof"], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<sqinter> y \\<le> x\n 6. \\<And>x y. x \\<sqinter> y \\<le> y\n 7. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 8. \\<And>x y. x \\<le> x \\<squnion> y\n 9. \\<And>y x. y \\<le> x \\<squnion> y\n 10. \\<And>y x z.\n        \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n        \\<Longrightarrow> y \\<squnion> z \\<le> x\nA total of 23 subgoals...", "fix x y z :: \"'a extN\""], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<sqinter> y \\<le> x\n 6. \\<And>x y. x \\<sqinter> y \\<le> y\n 7. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 8. \\<And>x y. x \\<le> x \\<squnion> y\n 9. \\<And>y x. y \\<le> x \\<squnion> y\n 10. \\<And>y x z.\n        \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n        \\<Longrightarrow> y \\<squnion> z \\<le> x\nA total of 23 subgoals...", "show \"(x + y) + z = x + (y + z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y + z = x + (y + z)", "by (cases x; cases y; cases z) simp_all"], ["proof (state)\nthis:\n  x + y + z = x + (y + z)\n\ngoal (22 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<sqinter> y \\<le> x\n 6. \\<And>x y. x \\<sqinter> y \\<le> y\n 7. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 8. \\<And>x y. x \\<le> x \\<squnion> y\n 9. \\<And>y x. y \\<le> x \\<squnion> y\n 10. \\<And>y x z.\n        \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n        \\<Longrightarrow> y \\<squnion> z \\<le> x\nA total of 22 subgoals...", "show \"x + y = y + x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y = y + x", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  x + y = y + x\n\ngoal (21 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<sqinter> y \\<le> x\n 6. \\<And>x y. x \\<sqinter> y \\<le> y\n 7. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 8. \\<And>x y. x \\<le> x \\<squnion> y\n 9. \\<And>y x. y \\<le> x \\<squnion> y\n 10. \\<And>y x z.\n        \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n        \\<Longrightarrow> y \\<squnion> z \\<le> x\nA total of 21 subgoals...", "show \"(x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)", "by simp"], ["proof (state)\nthis:\n  (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n\ngoal (20 subgoals):\n 1. \\<And>x. x \\<le> x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 3. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 4. \\<And>x y. x \\<sqinter> y \\<le> x\n 5. \\<And>x y. x \\<sqinter> y \\<le> y\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 7. \\<And>x y. x \\<le> x \\<squnion> y\n 8. \\<And>y x. y \\<le> x \\<squnion> y\n 9. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 10. \\<And>a. bot \\<le> a\nA total of 20 subgoals...", "show \"x \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> x", "by (cases x) simp_all"], ["proof (state)\nthis:\n  x \\<le> x\n\ngoal (19 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 3. \\<And>x y. x \\<sqinter> y \\<le> x\n 4. \\<And>x y. x \\<sqinter> y \\<le> y\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 6. \\<And>x y. x \\<le> x \\<squnion> y\n 7. \\<And>y x. y \\<le> x \\<squnion> y\n 8. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 9. \\<And>a. bot \\<le> a\n 10. \\<And>a. a \\<le> top\nA total of 19 subgoals...", "show \"x \\<le> y \\<Longrightarrow> y \\<le> z \\<Longrightarrow> x \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z", "by (cases x; cases y; cases z) simp_all"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n\ngoal (18 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 2. \\<And>x y. x \\<sqinter> y \\<le> x\n 3. \\<And>x y. x \\<sqinter> y \\<le> y\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 5. \\<And>x y. x \\<le> x \\<squnion> y\n 6. \\<And>y x. y \\<le> x \\<squnion> y\n 7. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 8. \\<And>a. bot \\<le> a\n 9. \\<And>a. a \\<le> top\n 10. \\<And>x y. x \\<le> y \\<or> y \\<le> x\nA total of 18 subgoals...", "show \"x \\<le> y \\<Longrightarrow> y \\<le> x \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n\ngoal (17 subgoals):\n 1. \\<And>x y. x \\<sqinter> y \\<le> x\n 2. \\<And>x y. x \\<sqinter> y \\<le> y\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 4. \\<And>x y. x \\<le> x \\<squnion> y\n 5. \\<And>y x. y \\<le> x \\<squnion> y\n 6. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 7. \\<And>a. bot \\<le> a\n 8. \\<And>a. a \\<le> top\n 9. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 10. \\<And>x y z.\n        x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n        x + z \\<le> y + z\nA total of 17 subgoals...", "show \"x \\<sqinter> y \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqinter> y \\<le> x", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  x \\<sqinter> y \\<le> x\n\ngoal (16 subgoals):\n 1. \\<And>x y. x \\<sqinter> y \\<le> y\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 3. \\<And>x y. x \\<le> x \\<squnion> y\n 4. \\<And>y x. y \\<le> x \\<squnion> y\n 5. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 6. \\<And>a. bot \\<le> a\n 7. \\<And>a. a \\<le> top\n 8. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 9. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 10. \\<And>x y. x + y + bot = x + y\nA total of 16 subgoals...", "show \"x \\<sqinter> y \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqinter> y \\<le> y", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  x \\<sqinter> y \\<le> y\n\ngoal (15 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z\n 2. \\<And>x y. x \\<le> x \\<squnion> y\n 3. \\<And>y x. y \\<le> x \\<squnion> y\n 4. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 5. \\<And>a. bot \\<le> a\n 6. \\<And>a. a \\<le> top\n 7. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 8. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 9. \\<And>x y. x + y + bot = x + y\n 10. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\nA total of 15 subgoals...", "show \"x \\<le> y \\<Longrightarrow> x \\<le> z \\<Longrightarrow> x \\<le> y \\<sqinter> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n    \\<Longrightarrow> x \\<le> y \\<sqinter> z", "by (cases x; cases y; cases z) simp_all"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n  \\<Longrightarrow> x \\<le> y \\<sqinter> z\n\ngoal (14 subgoals):\n 1. \\<And>x y. x \\<le> x \\<squnion> y\n 2. \\<And>y x. y \\<le> x \\<squnion> y\n 3. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 4. \\<And>a. bot \\<le> a\n 5. \\<And>a. a \\<le> top\n 6. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 7. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 8. \\<And>x y. x + y + bot = x + y\n 9. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 10. \\<And>x. - x = (if x = bot then top else bot)\nA total of 14 subgoals...", "show \"x \\<le> x \\<squnion> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> x \\<squnion> y", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  x \\<le> x \\<squnion> y\n\ngoal (13 subgoals):\n 1. \\<And>y x. y \\<le> x \\<squnion> y\n 2. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 3. \\<And>a. bot \\<le> a\n 4. \\<And>a. a \\<le> top\n 5. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 6. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 7. \\<And>x y. x + y + bot = x + y\n 8. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 9. \\<And>x. - x = (if x = bot then top else bot)\n 10. 1 = top\nA total of 13 subgoals...", "show \"y \\<le> x \\<squnion> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<le> x \\<squnion> y", "by (cases x; cases y) simp_all"], ["proof (state)\nthis:\n  y \\<le> x \\<squnion> y\n\ngoal (12 subgoals):\n 1. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y \\<squnion> z \\<le> x\n 2. \\<And>a. bot \\<le> a\n 3. \\<And>a. a \\<le> top\n 4. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 5. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 6. \\<And>x y. x + y + bot = x + y\n 7. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 8. \\<And>x. - x = (if x = bot then top else bot)\n 9. 1 = top\n 10. \\<And>x y. x * y = x \\<sqinter> y\nA total of 12 subgoals...", "show \"y \\<le> x \\<Longrightarrow> z \\<le> x \\<Longrightarrow> y \\<squnion> z \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n    \\<Longrightarrow> y \\<squnion> z \\<le> x", "by (cases x; cases y; cases z) simp_all"], ["proof (state)\nthis:\n  \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n  \\<Longrightarrow> y \\<squnion> z \\<le> x\n\ngoal (11 subgoals):\n 1. \\<And>a. bot \\<le> a\n 2. \\<And>a. a \\<le> top\n 3. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 4. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 5. \\<And>x y. x + y + bot = x + y\n 6. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 7. \\<And>x. - x = (if x = bot then top else bot)\n 8. 1 = top\n 9. \\<And>x y. x * y = x \\<sqinter> y\n 10. \\<And>x. x\\<^sup>T = x\nA total of 11 subgoals...", "show \"bot \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bot \\<le> x", "by (simp add: bot_extN_def)"], ["proof (state)\nthis:\n  bot \\<le> x\n\ngoal (10 subgoals):\n 1. \\<And>a. a \\<le> top\n 2. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 3. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 4. \\<And>x y. x + y + bot = x + y\n 5. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 6. \\<And>x. - x = (if x = bot then top else bot)\n 7. 1 = top\n 8. \\<And>x y. x * y = x \\<sqinter> y\n 9. \\<And>x. x\\<^sup>T = x\n 10. \\<And>x. x\\<^sup>\\<star> = top", "show \"x \\<le> top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> top", "by (cases x) (simp_all add: top_extN_def)"], ["proof (state)\nthis:\n  x \\<le> top\n\ngoal (9 subgoals):\n 1. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 2. \\<And>x y z.\n       x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n       x + z \\<le> y + z\n 3. \\<And>x y. x + y + bot = x + y\n 4. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 5. \\<And>x. - x = (if x = bot then top else bot)\n 6. 1 = top\n 7. \\<And>x y. x * y = x \\<sqinter> y\n 8. \\<And>x. x\\<^sup>T = x\n 9. \\<And>x. x\\<^sup>\\<star> = top", "show \"x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow> x + z \\<le> y + z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n    x + z \\<le> y + z", "by (cases x; cases y; cases z) (simp_all add: bot_extN_def)"], ["proof (state)\nthis:\n  x \\<noteq> bot \\<and> x + bot \\<le> y + bot \\<longrightarrow>\n  x + z \\<le> y + z\n\ngoal (8 subgoals):\n 1. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 2. \\<And>x y. x + y + bot = x + y\n 3. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 4. \\<And>x. - x = (if x = bot then top else bot)\n 5. 1 = top\n 6. \\<And>x y. x * y = x \\<sqinter> y\n 7. \\<And>x. x\\<^sup>T = x\n 8. \\<And>x. x\\<^sup>\\<star> = top", "show \"x + y + bot = x + y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y + bot = x + y", "by (cases x; cases y) (simp_all add: bot_extN_def)"], ["proof (state)\nthis:\n  x + y + bot = x + y\n\ngoal (7 subgoals):\n 1. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 2. \\<And>x y. x + y = bot \\<longrightarrow> x = bot\n 3. \\<And>x. - x = (if x = bot then top else bot)\n 4. 1 = top\n 5. \\<And>x y. x * y = x \\<sqinter> y\n 6. \\<And>x. x\\<^sup>T = x\n 7. \\<And>x. x\\<^sup>\\<star> = top", "show \"x + y = bot \\<longrightarrow> x = bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y = bot \\<longrightarrow> x = bot", "by (cases x; cases y) (simp_all add: bot_extN_def)"], ["proof (state)\nthis:\n  x + y = bot \\<longrightarrow> x = bot\n\ngoal (6 subgoals):\n 1. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 2. \\<And>x. - x = (if x = bot then top else bot)\n 3. 1 = top\n 4. \\<And>x y. x * y = x \\<sqinter> y\n 5. \\<And>x. x\\<^sup>T = x\n 6. \\<And>x. x\\<^sup>\\<star> = top", "show \"x \\<le> y \\<or> y \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<or> y \\<le> x", "by (cases x; cases y) (simp_all add: linear)"], ["proof (state)\nthis:\n  x \\<le> y \\<or> y \\<le> x\n\ngoal (5 subgoals):\n 1. \\<And>x. - x = (if x = bot then top else bot)\n 2. 1 = top\n 3. \\<And>x y. x * y = x \\<sqinter> y\n 4. \\<And>x. x\\<^sup>T = x\n 5. \\<And>x. x\\<^sup>\\<star> = top", "show \"-x = (if x = bot then top else bot)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - x = (if x = bot then top else bot)", "by (cases x) (simp_all add: bot_extN_def top_extN_def)"], ["proof (state)\nthis:\n  - x = (if x = bot then top else bot)\n\ngoal (4 subgoals):\n 1. 1 = top\n 2. \\<And>x y. x * y = x \\<sqinter> y\n 3. \\<And>x. x\\<^sup>T = x\n 4. \\<And>x. x\\<^sup>\\<star> = top", "show \"(1::'a extN) = top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 = top", "by (simp add: one_extN_def top_extN_def)"], ["proof (state)\nthis:\n  1 = top\n\ngoal (3 subgoals):\n 1. \\<And>x y. x * y = x \\<sqinter> y\n 2. \\<And>x. x\\<^sup>T = x\n 3. \\<And>x. x\\<^sup>\\<star> = top", "show \"x * y = x \\<sqinter> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * y = x \\<sqinter> y", "by simp"], ["proof (state)\nthis:\n  x * y = x \\<sqinter> y\n\ngoal (2 subgoals):\n 1. \\<And>x. x\\<^sup>T = x\n 2. \\<And>x. x\\<^sup>\\<star> = top", "show \"x\\<^sup>T = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sup>T = x", "by simp"], ["proof (state)\nthis:\n  x\\<^sup>T = x\n\ngoal (1 subgoal):\n 1. \\<And>x. x\\<^sup>\\<star> = top", "show \"x\\<^sup>\\<star> = top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sup>\\<star> = top", "by (simp add: top_extN_def)"], ["proof (state)\nthis:\n  x\\<^sup>\\<star> = top\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}