{"file_name": "/home/qj213/afp-2021-10-22/thys/Aggregation_Algebras/Matrix_Aggregation_Algebras.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Aggregation_Algebras", "problem_names": ["lemma add_bot_bot_bot:\n  \"x + bot + bot + bot = x + bot\"", "lemma agg_sum_bot:\n  \"(\\<Sum>\\<^sub>k bot::'a::aggregation_order) = bot + bot\"", "lemma agg_sum_bot_bot:\n  \"(\\<Sum>\\<^sub>k bot + bot::'a::aggregation_order) = bot + bot\"", "lemma agg_sum_not_bot_1:\n  fixes f :: \"'a::finite \\<Rightarrow> 'b::aggregation_order\"\n  assumes \"f i \\<noteq> bot\"\n    shows \"(\\<Sum>\\<^sub>k f k) \\<noteq> bot\"", "lemma agg_sum_not_bot:\n  fixes f :: \"('a::finite,'b::aggregation_order) square\"\n  assumes \"f (i,j) \\<noteq> bot\"\n    shows \"(\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l)) \\<noteq> bot\"", "lemma agg_sum_distrib:\n  fixes f g :: \"'a \\<Rightarrow> 'b::aggregation_order\"\n  shows \"(\\<Sum>\\<^sub>k f k + g k) = (\\<Sum>\\<^sub>k f k) + (\\<Sum>\\<^sub>k g k)\"", "lemma agg_sum_distrib_2:\n  fixes f g :: \"('a,'b::aggregation_order) square\"\n  shows \"(\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l) + g (k,l)) = (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l)) + (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l g (k,l))\"", "lemma agg_sum_add_bot:\n  fixes f :: \"'a \\<Rightarrow> 'b::aggregation_order\"\n  shows \"(\\<Sum>\\<^sub>k f k) = (\\<Sum>\\<^sub>k f k) + bot\"", "lemma agg_sum_add_bot_2:\n  fixes f :: \"'a \\<Rightarrow> 'b::aggregation_order\"\n  shows \"(\\<Sum>\\<^sub>k f k + bot) = (\\<Sum>\\<^sub>k f k)\"", "lemma agg_sum_commute:\n  fixes f :: \"('a,'b::aggregation_order) square\"\n  shows \"(\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l)) = (\\<Sum>\\<^sub>l \\<Sum>\\<^sub>k f (k,l))\"", "lemma agg_delta:\n  fixes f :: \"'a::finite \\<Rightarrow> 'b::aggregation_order\"\n  shows \"(\\<Sum>\\<^sub>l if l = j then f l else zero) = f j + bot\"", "lemma agg_delta_1:\n  fixes f :: \"'a::finite \\<Rightarrow> 'b::aggregation_order\"\n  shows \"(\\<Sum>\\<^sub>l if l = j then f l else bot) = f j + bot\"", "lemma agg_delta_2:\n  fixes f :: \"('a::finite,'b::aggregation_order) square\"\n  shows \"(\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l if k = i \\<and> l = j then f (k,l) else bot) = f (i,j) + bot\"", "lemma bot_plus_bot:\n  \"mbot \\<oplus>\\<^sub>M mbot = mzero\"", "lemma sum_bot:\n  \"sum\\<^sub>M (mbot :: ('a::enum,'b::aggregation_order) square) = mzero\"", "lemma sum_plus_bot:\n  fixes f :: \"('a::enum,'b::aggregation_order) square\"\n  shows \"sum\\<^sub>M f \\<oplus>\\<^sub>M mbot = sum\\<^sub>M f\"", "lemma sum_plus_zero:\n  fixes f :: \"('a::enum,'b::aggregation_order) square\"\n  shows \"sum\\<^sub>M f \\<oplus>\\<^sub>M mzero = sum\\<^sub>M f\"", "lemma agg_matrix_bot:\n  fixes f :: \"('a,'b::aggregation_order) square\"\n  assumes \"\\<forall>i j . f (i,j) = bot\"\n    shows \"f = mbot\"", "lemma sum_bot_2:\n  \"sum2\\<^sub>M (mbot :: ('a,'b::aggregation_order) square) = mzero\"", "lemma sum_plus_bot_2:\n  fixes f :: \"('a,'b::aggregation_order) square\"\n  shows \"sum2\\<^sub>M f \\<oplus>\\<^sub>M mbot = sum2\\<^sub>M f\"", "lemma sum_plus_zero_2:\n  fixes f :: \"('a,'b::aggregation_order) square\"\n  shows \"sum2\\<^sub>M f \\<oplus>\\<^sub>M mzero = sum2\\<^sub>M f\"", "lemma enum_pos'_inverse:\n  \"List.member xs x \\<Longrightarrow> xs!(enum_pos' xs x) = x\"", "lemma enum_pos_inverse [simp]:\n  \"enum_class.enum!(enum_pos x) = x\"", "lemma enum_pos_injective [simp]:\n  \"enum_pos x = enum_pos y \\<Longrightarrow> x = y\"", "lemma minarc_at_most_one:\n  fixes f :: \"('a::enum,'b::{aggregation_order,top}) square\"\n  assumes \"(minarc\\<^sub>M f) e \\<noteq> bot\"\n      and \"(minarc\\<^sub>M f) d \\<noteq> bot\"\n    shows \"e = d\"", "lemma least_order:\n  assumes transitive: \"\\<forall>x y z . le x y \\<and> le y z \\<longrightarrow> le x z\"\n      and total: \"\\<forall>x y . le x y \\<or> le y x\"\n    shows \"finite A \\<Longrightarrow> A \\<noteq> {} \\<Longrightarrow> \\<exists>x . x \\<in> A \\<and> (\\<forall>y . y \\<in> A \\<longrightarrow> le x y)\"", "lemma minarc_at_least_one:\n  fixes f :: \"('a::enum,'b::linear_aggregation_lattice) square\"\n  assumes \"f \\<noteq> mbot\"\n    shows \"\\<exists>e . (minarc\\<^sub>M f) e = top\"", "lemma regular_bot_top_2:\n  \"regular x \\<longleftrightarrow> x = bot \\<or> x = top\""], "translations": [["", "lemma add_bot_bot_bot:\n  \"x + bot + bot + bot = x + bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + bot + bot + bot = x + bot", "by simp"], ["", "end"], ["", "text \\<open>\nWe introduce notation for finite sums over aggregation orders.\nThe index variable of the summation ranges over the finite universe of its type.\nFinite sums are defined recursively using the binary aggregation and $\\bot + \\bot$ for the empty sum.\n\\<close>"], ["", "syntax (xsymbols)\n  \"_sum_ab_semigroup_add_0\" :: \"idt \\<Rightarrow> 'a::bounded_semilattice_sup_bot \\<Rightarrow> 'a\" (\"(\\<Sum>\\<^sub>_ _)\" [0,10] 10)"], ["", "translations\n  \"\\<Sum>\\<^sub>x t\" => \"XCONST ab_semigroup_add_0.sum_0 XCONST plus (XCONST plus XCONST bot XCONST bot) (\\<lambda>x . t) { x . CONST True }\""], ["", "text \\<open>\nThe following are basic properties of such sums.\n\\<close>"], ["", "lemma agg_sum_bot:\n  \"(\\<Sum>\\<^sub>k bot::'a::aggregation_order) = bot + bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0 (\\<lambda>k. bot) {k. True} = zero", "proof (induct rule: infinite_finite_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>A.\n       infinite A \\<Longrightarrow>\n       aggregation.sum_0 (\\<lambda>k. bot) A = zero\n 2. aggregation.sum_0 (\\<lambda>k. bot) {} = zero\n 3. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        aggregation.sum_0 (\\<lambda>k. bot) F = zero\\<rbrakk>\n       \\<Longrightarrow> aggregation.sum_0 (\\<lambda>k. bot) (insert x F) =\n                         zero", "case (infinite A)"], ["proof (state)\nthis:\n  infinite A\n\ngoal (3 subgoals):\n 1. \\<And>A.\n       infinite A \\<Longrightarrow>\n       aggregation.sum_0 (\\<lambda>k. bot) A = zero\n 2. aggregation.sum_0 (\\<lambda>k. bot) {} = zero\n 3. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        aggregation.sum_0 (\\<lambda>k. bot) F = zero\\<rbrakk>\n       \\<Longrightarrow> aggregation.sum_0 (\\<lambda>k. bot) (insert x F) =\n                         zero", "thus ?case"], ["proof (prove)\nusing this:\n  infinite A\n\ngoal (1 subgoal):\n 1. aggregation.sum_0 (\\<lambda>k. bot) A = zero", "by simp"], ["proof (state)\nthis:\n  aggregation.sum_0 (\\<lambda>k. bot) A = zero\n\ngoal (2 subgoals):\n 1. aggregation.sum_0 (\\<lambda>k. bot) {} = zero\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        aggregation.sum_0 (\\<lambda>k. bot) F = zero\\<rbrakk>\n       \\<Longrightarrow> aggregation.sum_0 (\\<lambda>k. bot) (insert x F) =\n                         zero", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. aggregation.sum_0 (\\<lambda>k. bot) {} = zero\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        aggregation.sum_0 (\\<lambda>k. bot) F = zero\\<rbrakk>\n       \\<Longrightarrow> aggregation.sum_0 (\\<lambda>k. bot) (insert x F) =\n                         zero", "case empty"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. aggregation.sum_0 (\\<lambda>k. bot) {} = zero\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        aggregation.sum_0 (\\<lambda>k. bot) F = zero\\<rbrakk>\n       \\<Longrightarrow> aggregation.sum_0 (\\<lambda>k. bot) (insert x F) =\n                         zero", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0 (\\<lambda>k. bot) {} = zero", "by simp"], ["proof (state)\nthis:\n  aggregation.sum_0 (\\<lambda>k. bot) {} = zero\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        aggregation.sum_0 (\\<lambda>k. bot) F = zero\\<rbrakk>\n       \\<Longrightarrow> aggregation.sum_0 (\\<lambda>k. bot) (insert x F) =\n                         zero", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        aggregation.sum_0 (\\<lambda>k. bot) F = zero\\<rbrakk>\n       \\<Longrightarrow> aggregation.sum_0 (\\<lambda>k. bot) (insert x F) =\n                         zero", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  aggregation.sum_0 (\\<lambda>k. bot) F = zero\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        aggregation.sum_0 (\\<lambda>k. bot) F = zero\\<rbrakk>\n       \\<Longrightarrow> aggregation.sum_0 (\\<lambda>k. bot) (insert x F) =\n                         zero", "thus ?case"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  aggregation.sum_0 (\\<lambda>k. bot) F = zero\n\ngoal (1 subgoal):\n 1. aggregation.sum_0 (\\<lambda>k. bot) (insert x F) = zero", "by (metis add.commute add_add_bot aggregation.sum_0.insert)"], ["proof (state)\nthis:\n  aggregation.sum_0 (\\<lambda>k. bot) (insert x F) = zero\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma agg_sum_bot_bot:\n  \"(\\<Sum>\\<^sub>k bot + bot::'a::aggregation_order) = bot + bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0 (\\<lambda>k. zero) {k. True} = zero", "by (rule aggregation.sum_0.neutral_const)"], ["", "lemma agg_sum_not_bot_1:\n  fixes f :: \"'a::finite \\<Rightarrow> 'b::aggregation_order\"\n  assumes \"f i \\<noteq> bot\"\n    shows \"(\\<Sum>\\<^sub>k f k) \\<noteq> bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0 f {k. True} \\<noteq> bot", "by (metis assms add_bot aggregation.sum_0.remove finite_code mem_Collect_eq)"], ["", "lemma agg_sum_not_bot:\n  fixes f :: \"('a::finite,'b::aggregation_order) square\"\n  assumes \"f (i,j) \\<noteq> bot\"\n    shows \"(\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l)) \\<noteq> bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True} \\<noteq>\n    bot", "by (metis assms agg_sum_not_bot_1)"], ["", "lemma agg_sum_distrib:\n  fixes f g :: \"'a \\<Rightarrow> 'b::aggregation_order\"\n  shows \"(\\<Sum>\\<^sub>k f k + g k) = (\\<Sum>\\<^sub>k f k) + (\\<Sum>\\<^sub>k g k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0 (\\<lambda>k. f k + g k) {k. True} =\n    aggregation.sum_0 f {k. True} + aggregation.sum_0 g {k. True}", "by (rule aggregation.sum_0.distrib)"], ["", "lemma agg_sum_distrib_2:\n  fixes f g :: \"('a,'b::aggregation_order) square\"\n  shows \"(\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l) + g (k,l)) = (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l)) + (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l g (k,l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0 (\\<lambda>l. f (k, l) + g (k, l)) {l. True})\n     {k. True} =\n    aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True} +\n    aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n     {k. True}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0 (\\<lambda>l. f (k, l) + g (k, l)) {l. True})\n     {k. True} =\n    aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True} +\n    aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n     {k. True}", "have \"(\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l) + g (k,l)) = (\\<Sum>\\<^sub>k (\\<Sum>\\<^sub>l f (k,l)) + (\\<Sum>\\<^sub>l g (k,l)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0 (\\<lambda>l. f (k, l) + g (k, l)) {l. True})\n     {k. True} =\n    aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True} +\n         aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n     {k. True}", "by (metis (no_types) aggregation.sum_0.distrib)"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. f (k, l) + g (k, l)) {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True} +\n       aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0 (\\<lambda>l. f (k, l) + g (k, l)) {l. True})\n     {k. True} =\n    aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True} +\n    aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n     {k. True}", "also"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. f (k, l) + g (k, l)) {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True} +\n       aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0 (\\<lambda>l. f (k, l) + g (k, l)) {l. True})\n     {k. True} =\n    aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True} +\n    aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n     {k. True}", "have \"... = (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l)) + (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l g (k,l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True} +\n         aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n     {k. True} =\n    aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True} +\n    aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n     {k. True}", "by (metis (no_types) aggregation.sum_0.distrib)"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True} +\n       aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True} +\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0 (\\<lambda>l. f (k, l) + g (k, l)) {l. True})\n     {k. True} =\n    aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True} +\n    aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n     {k. True}", "finally"], ["proof (chain)\npicking this:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. f (k, l) + g (k, l)) {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True} +\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n   {k. True}", "show ?thesis"], ["proof (prove)\nusing this:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. f (k, l) + g (k, l)) {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True} +\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0 (\\<lambda>l. f (k, l) + g (k, l)) {l. True})\n     {k. True} =\n    aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True} +\n    aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n     {k. True}", "."], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. f (k, l) + g (k, l)) {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True} +\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n   {k. True}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma agg_sum_add_bot:\n  fixes f :: \"'a \\<Rightarrow> 'b::aggregation_order\"\n  shows \"(\\<Sum>\\<^sub>k f k) = (\\<Sum>\\<^sub>k f k) + bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0 f {k. True} = aggregation.sum_0 f {k. True} + bot", "by (metis (no_types) add_add_bot aggregation.sum_0.F_one)"], ["", "lemma agg_sum_add_bot_2:\n  fixes f :: \"'a \\<Rightarrow> 'b::aggregation_order\"\n  shows \"(\\<Sum>\\<^sub>k f k + bot) = (\\<Sum>\\<^sub>k f k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0 (\\<lambda>k. f k + bot) {k. True} =\n    aggregation.sum_0 f {k. True}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. aggregation.sum_0 (\\<lambda>k. f k + bot) {k. True} =\n    aggregation.sum_0 f {k. True}", "have \"(\\<Sum>\\<^sub>k f k + bot) = (\\<Sum>\\<^sub>k f k) + (\\<Sum>\\<^sub>k::'a bot::'b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0 (\\<lambda>k. f k + bot) {k. True} =\n    aggregation.sum_0 f {k. True} +\n    aggregation.sum_0 (\\<lambda>k. bot) {k. True}", "using agg_sum_distrib"], ["proof (prove)\nusing this:\n  aggregation.sum_0 (\\<lambda>k. ?f k + ?g k) {k. True} =\n  aggregation.sum_0 ?f {k. True} + aggregation.sum_0 ?g {k. True}\n\ngoal (1 subgoal):\n 1. aggregation.sum_0 (\\<lambda>k. f k + bot) {k. True} =\n    aggregation.sum_0 f {k. True} +\n    aggregation.sum_0 (\\<lambda>k. bot) {k. True}", "by simp"], ["proof (state)\nthis:\n  aggregation.sum_0 (\\<lambda>k. f k + bot) {k. True} =\n  aggregation.sum_0 f {k. True} +\n  aggregation.sum_0 (\\<lambda>k. bot) {k. True}\n\ngoal (1 subgoal):\n 1. aggregation.sum_0 (\\<lambda>k. f k + bot) {k. True} =\n    aggregation.sum_0 f {k. True}", "also"], ["proof (state)\nthis:\n  aggregation.sum_0 (\\<lambda>k. f k + bot) {k. True} =\n  aggregation.sum_0 f {k. True} +\n  aggregation.sum_0 (\\<lambda>k. bot) {k. True}\n\ngoal (1 subgoal):\n 1. aggregation.sum_0 (\\<lambda>k. f k + bot) {k. True} =\n    aggregation.sum_0 f {k. True}", "have \"... = (\\<Sum>\\<^sub>k f k) + (bot + bot)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0 f {k. True} +\n    aggregation.sum_0 (\\<lambda>k. bot) {k. True} =\n    aggregation.sum_0 f {k. True} + zero", "by (metis agg_sum_bot)"], ["proof (state)\nthis:\n  aggregation.sum_0 f {k. True} +\n  aggregation.sum_0 (\\<lambda>k. bot) {k. True} =\n  aggregation.sum_0 f {k. True} + zero\n\ngoal (1 subgoal):\n 1. aggregation.sum_0 (\\<lambda>k. f k + bot) {k. True} =\n    aggregation.sum_0 f {k. True}", "also"], ["proof (state)\nthis:\n  aggregation.sum_0 f {k. True} +\n  aggregation.sum_0 (\\<lambda>k. bot) {k. True} =\n  aggregation.sum_0 f {k. True} + zero\n\ngoal (1 subgoal):\n 1. aggregation.sum_0 (\\<lambda>k. f k + bot) {k. True} =\n    aggregation.sum_0 f {k. True}", "have \"... = (\\<Sum>\\<^sub>k f k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0 f {k. True} + zero = aggregation.sum_0 f {k. True}", "by simp"], ["proof (state)\nthis:\n  aggregation.sum_0 f {k. True} + zero = aggregation.sum_0 f {k. True}\n\ngoal (1 subgoal):\n 1. aggregation.sum_0 (\\<lambda>k. f k + bot) {k. True} =\n    aggregation.sum_0 f {k. True}", "finally"], ["proof (chain)\npicking this:\n  aggregation.sum_0 (\\<lambda>k. f k + bot) {k. True} =\n  aggregation.sum_0 f {k. True}", "show ?thesis"], ["proof (prove)\nusing this:\n  aggregation.sum_0 (\\<lambda>k. f k + bot) {k. True} =\n  aggregation.sum_0 f {k. True}\n\ngoal (1 subgoal):\n 1. aggregation.sum_0 (\\<lambda>k. f k + bot) {k. True} =\n    aggregation.sum_0 f {k. True}", "by simp"], ["proof (state)\nthis:\n  aggregation.sum_0 (\\<lambda>k. f k + bot) {k. True} =\n  aggregation.sum_0 f {k. True}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma agg_sum_commute:\n  fixes f :: \"('a,'b::aggregation_order) square\"\n  shows \"(\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l)) = (\\<Sum>\\<^sub>l \\<Sum>\\<^sub>k f (k,l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True} =\n    aggregation.sum_0\n     (\\<lambda>l. aggregation.sum_0 (\\<lambda>k. f (k, l)) {k. True})\n     {l. True}", "by (rule aggregation.sum_0.swap)"], ["", "lemma agg_delta:\n  fixes f :: \"'a::finite \\<Rightarrow> 'b::aggregation_order\"\n  shows \"(\\<Sum>\\<^sub>l if l = j then f l else zero) = f j + bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0 (\\<lambda>l. if l = j then f l else zero) {l. True} =\n    f j + bot", "apply (subst aggregation.sum_0.delta)"], ["proof (prove)\ngoal (2 subgoals):\n 1. finite {l. True}\n 2. (if j \\<in> {l. True} then f j + zero else zero) = f j + bot", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if j \\<in> {l. True} then f j + zero else zero) = f j + bot", "by (metis add.commute add.left_commute add_add_bot mem_Collect_eq)"], ["", "lemma agg_delta_1:\n  fixes f :: \"'a::finite \\<Rightarrow> 'b::aggregation_order\"\n  shows \"(\\<Sum>\\<^sub>l if l = j then f l else bot) = f j + bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    f j + bot", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    f j + bot", "let ?f = \"(\\<lambda>l . if l = j then f l else bot)\""], ["proof (state)\ngoal (1 subgoal):\n 1. aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    f j + bot", "let ?S = \"{l::'a . True}\""], ["proof (state)\ngoal (1 subgoal):\n 1. aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    f j + bot", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    f j + bot", "proof (cases \"j \\<in> ?S\")"], ["proof (state)\ngoal (2 subgoals):\n 1. j \\<in> {l. True} \\<Longrightarrow>\n    aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    f j + bot\n 2. j \\<notin> {l. True} \\<Longrightarrow>\n    aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    f j + bot", "case False"], ["proof (state)\nthis:\n  j \\<notin> {l. True}\n\ngoal (2 subgoals):\n 1. j \\<in> {l. True} \\<Longrightarrow>\n    aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    f j + bot\n 2. j \\<notin> {l. True} \\<Longrightarrow>\n    aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    f j + bot", "thus ?thesis"], ["proof (prove)\nusing this:\n  j \\<notin> {l. True}\n\ngoal (1 subgoal):\n 1. aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    f j + bot", "by simp"], ["proof (state)\nthis:\n  aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n  f j + bot\n\ngoal (1 subgoal):\n 1. j \\<in> {l. True} \\<Longrightarrow>\n    aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    f j + bot", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. j \\<in> {l. True} \\<Longrightarrow>\n    aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    f j + bot", "case True"], ["proof (state)\nthis:\n  j \\<in> {l. True}\n\ngoal (1 subgoal):\n 1. j \\<in> {l. True} \\<Longrightarrow>\n    aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    f j + bot", "let ?A = \"?S - {j}\""], ["proof (state)\ngoal (1 subgoal):\n 1. j \\<in> {l. True} \\<Longrightarrow>\n    aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    f j + bot", "let ?B = \"{j}\""], ["proof (state)\ngoal (1 subgoal):\n 1. j \\<in> {l. True} \\<Longrightarrow>\n    aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    f j + bot", "from True"], ["proof (chain)\npicking this:\n  j \\<in> {l. True}", "have eq: \"?S = ?A \\<union> ?B\""], ["proof (prove)\nusing this:\n  j \\<in> {l. True}\n\ngoal (1 subgoal):\n 1. {l. True} = {l. True} - {j} \\<union> {j}", "by blast"], ["proof (state)\nthis:\n  {l. True} = {l. True} - {j} \\<union> {j}\n\ngoal (1 subgoal):\n 1. j \\<in> {l. True} \\<Longrightarrow>\n    aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    f j + bot", "have dj: \"?A \\<inter> ?B = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ({l. True} - {j}) \\<inter> {j} = {}", "by simp"], ["proof (state)\nthis:\n  ({l. True} - {j}) \\<inter> {j} = {}\n\ngoal (1 subgoal):\n 1. j \\<in> {l. True} \\<Longrightarrow>\n    aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    f j + bot", "have fAB: \"finite ?A\" \"finite ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite ({l. True} - {j}) &&& finite {j}", "by auto"], ["proof (state)\nthis:\n  finite ({l. True} - {j})\n  finite {j}\n\ngoal (1 subgoal):\n 1. j \\<in> {l. True} \\<Longrightarrow>\n    aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    f j + bot", "have \"aggregation.sum_0 ?f ?S = aggregation.sum_0 ?f ?A + aggregation.sum_0 ?f ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot)\n     ({l. True} - {j}) +\n    aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {j}", "using aggregation.sum_0.union_disjoint[OF fAB dj, of ?f, unfolded eq [symmetric]]"], ["proof (prove)\nusing this:\n  aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n  aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot)\n   ({l. True} - {j}) +\n  aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {j}\n\ngoal (1 subgoal):\n 1. aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot)\n     ({l. True} - {j}) +\n    aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {j}", "by simp"], ["proof (state)\nthis:\n  aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n  aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot)\n   ({l. True} - {j}) +\n  aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {j}\n\ngoal (1 subgoal):\n 1. j \\<in> {l. True} \\<Longrightarrow>\n    aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    f j + bot", "also"], ["proof (state)\nthis:\n  aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n  aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot)\n   ({l. True} - {j}) +\n  aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {j}\n\ngoal (1 subgoal):\n 1. j \\<in> {l. True} \\<Longrightarrow>\n    aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    f j + bot", "have \"... = aggregation.sum_0 (\\<lambda>l . bot) ?A + aggregation.sum_0 ?f ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot)\n     ({l. True} - {j}) +\n    aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {j} =\n    aggregation.sum_0 (\\<lambda>l. bot) ({l. True} - {j}) +\n    aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {j}", "by (subst aggregation.sum_0.cong[where ?B=\"?A\"]) simp_all"], ["proof (state)\nthis:\n  aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot)\n   ({l. True} - {j}) +\n  aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {j} =\n  aggregation.sum_0 (\\<lambda>l. bot) ({l. True} - {j}) +\n  aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {j}\n\ngoal (1 subgoal):\n 1. j \\<in> {l. True} \\<Longrightarrow>\n    aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    f j + bot", "also"], ["proof (state)\nthis:\n  aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot)\n   ({l. True} - {j}) +\n  aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {j} =\n  aggregation.sum_0 (\\<lambda>l. bot) ({l. True} - {j}) +\n  aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {j}\n\ngoal (1 subgoal):\n 1. j \\<in> {l. True} \\<Longrightarrow>\n    aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    f j + bot", "have \"... = zero + aggregation.sum_0 ?f ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0 (\\<lambda>l. bot) ({l. True} - {j}) +\n    aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {j} =\n    zero + aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {j}", "by (metis (no_types, lifting) add.commute add_add_bot aggregation.sum_0.F_g_one aggregation.sum_0.neutral)"], ["proof (state)\nthis:\n  aggregation.sum_0 (\\<lambda>l. bot) ({l. True} - {j}) +\n  aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {j} =\n  zero + aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {j}\n\ngoal (1 subgoal):\n 1. j \\<in> {l. True} \\<Longrightarrow>\n    aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    f j + bot", "also"], ["proof (state)\nthis:\n  aggregation.sum_0 (\\<lambda>l. bot) ({l. True} - {j}) +\n  aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {j} =\n  zero + aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {j}\n\ngoal (1 subgoal):\n 1. j \\<in> {l. True} \\<Longrightarrow>\n    aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    f j + bot", "have \"... = zero + (f j + zero)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. zero + aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {j} =\n    zero + (f j + zero)", "by simp"], ["proof (state)\nthis:\n  zero + aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {j} =\n  zero + (f j + zero)\n\ngoal (1 subgoal):\n 1. j \\<in> {l. True} \\<Longrightarrow>\n    aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    f j + bot", "also"], ["proof (state)\nthis:\n  zero + aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {j} =\n  zero + (f j + zero)\n\ngoal (1 subgoal):\n 1. j \\<in> {l. True} \\<Longrightarrow>\n    aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    f j + bot", "have \"... = f j + bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. zero + (f j + zero) = f j + bot", "by (metis add.commute add.left_commute add_add_bot)"], ["proof (state)\nthis:\n  zero + (f j + zero) = f j + bot\n\ngoal (1 subgoal):\n 1. j \\<in> {l. True} \\<Longrightarrow>\n    aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    f j + bot", "finally"], ["proof (chain)\npicking this:\n  aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n  f j + bot", "show ?thesis"], ["proof (prove)\nusing this:\n  aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n  f j + bot\n\ngoal (1 subgoal):\n 1. aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n    f j + bot", "."], ["proof (state)\nthis:\n  aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n  f j + bot\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  aggregation.sum_0 (\\<lambda>l. if l = j then f l else bot) {l. True} =\n  f j + bot\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma agg_delta_2:\n  fixes f :: \"('a::finite,'b::aggregation_order) square\"\n  shows \"(\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l if k = i \\<and> l = j then f (k,l) else bot) = f (i,j) + bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0\n          (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot)\n          {l. True})\n     {k. True} =\n    f (i, j) + bot", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0\n          (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot)\n          {l. True})\n     {k. True} =\n    f (i, j) + bot", "have \"\\<forall>k . (\\<Sum>\\<^sub>l if k = i \\<and> l = j then f (k,l) else bot) = (if k = i then f (k,j) + bot else zero)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>k.\n       aggregation.sum_0\n        (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot)\n        {l. True} =\n       (if k = i then f (k, j) + bot else zero)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       aggregation.sum_0\n        (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot)\n        {l. True} =\n       (if k = i then f (k, j) + bot else zero)", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       aggregation.sum_0\n        (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot)\n        {l. True} =\n       (if k = i then f (k, j) + bot else zero)", "have \"(\\<Sum>\\<^sub>l if k = i \\<and> l = j then f (k,l) else bot) = (\\<Sum>\\<^sub>l if l = j then if k = i then f (k,l) else bot else bot)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot) {l. True} =\n    aggregation.sum_0\n     (\\<lambda>l. if l = j then if k = i then f (k, l) else bot else bot)\n     {l. True}", "by meson"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot) {l. True} =\n  aggregation.sum_0\n   (\\<lambda>l. if l = j then if k = i then f (k, l) else bot else bot)\n   {l. True}\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       aggregation.sum_0\n        (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot)\n        {l. True} =\n       (if k = i then f (k, j) + bot else zero)", "also"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot) {l. True} =\n  aggregation.sum_0\n   (\\<lambda>l. if l = j then if k = i then f (k, l) else bot else bot)\n   {l. True}\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       aggregation.sum_0\n        (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot)\n        {l. True} =\n       (if k = i then f (k, j) + bot else zero)", "have \"... = (if k = i then f (k,j) else bot) + bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>l. if l = j then if k = i then f (k, l) else bot else bot)\n     {l. True} =\n    (if k = i then f (k, j) else bot) + bot", "by (rule agg_delta_1)"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>l. if l = j then if k = i then f (k, l) else bot else bot)\n   {l. True} =\n  (if k = i then f (k, j) else bot) + bot\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       aggregation.sum_0\n        (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot)\n        {l. True} =\n       (if k = i then f (k, j) + bot else zero)", "finally"], ["proof (chain)\npicking this:\n  aggregation.sum_0\n   (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot) {l. True} =\n  (if k = i then f (k, j) else bot) + bot", "show \"(\\<Sum>\\<^sub>l if k = i \\<and> l = j then f (k,l) else bot) = (if k = i then f (k,j) + bot else zero)\""], ["proof (prove)\nusing this:\n  aggregation.sum_0\n   (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot) {l. True} =\n  (if k = i then f (k, j) else bot) + bot\n\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot) {l. True} =\n    (if k = i then f (k, j) + bot else zero)", "by simp"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot) {l. True} =\n  (if k = i then f (k, j) + bot else zero)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>k.\n     aggregation.sum_0\n      (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot) {l. True} =\n     (if k = i then f (k, j) + bot else zero)\n\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0\n          (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot)\n          {l. True})\n     {k. True} =\n    f (i, j) + bot", "hence \"(\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l if k = i \\<and> l = j then f (k,l) else bot) = (\\<Sum>\\<^sub>k if k = i then f (k,j) + bot else zero)\""], ["proof (prove)\nusing this:\n  \\<forall>k.\n     aggregation.sum_0\n      (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot) {l. True} =\n     (if k = i then f (k, j) + bot else zero)\n\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0\n          (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot)\n          {l. True})\n     {k. True} =\n    aggregation.sum_0 (\\<lambda>k. if k = i then f (k, j) + bot else zero)\n     {k. True}", "using aggregation.sum_0.cong"], ["proof (prove)\nusing this:\n  \\<forall>k.\n     aggregation.sum_0\n      (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot) {l. True} =\n     (if k = i then f (k, j) + bot else zero)\n  \\<lbrakk>?A = ?B;\n   \\<And>x. x \\<in> ?B \\<Longrightarrow> ?g x = ?h x\\<rbrakk>\n  \\<Longrightarrow> aggregation.sum_0 ?g ?A = aggregation.sum_0 ?h ?B\n\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0\n          (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot)\n          {l. True})\n     {k. True} =\n    aggregation.sum_0 (\\<lambda>k. if k = i then f (k, j) + bot else zero)\n     {k. True}", "by auto"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot)\n        {l. True})\n   {k. True} =\n  aggregation.sum_0 (\\<lambda>k. if k = i then f (k, j) + bot else zero)\n   {k. True}\n\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0\n          (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot)\n          {l. True})\n     {k. True} =\n    f (i, j) + bot", "also"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot)\n        {l. True})\n   {k. True} =\n  aggregation.sum_0 (\\<lambda>k. if k = i then f (k, j) + bot else zero)\n   {k. True}\n\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0\n          (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot)\n          {l. True})\n     {k. True} =\n    f (i, j) + bot", "have \"... = f (i,j) + bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0 (\\<lambda>k. if k = i then f (k, j) + bot else zero)\n     {k. True} =\n    f (i, j) + bot", "apply (subst agg_delta)"], ["proof (prove)\ngoal (1 subgoal):\n 1. f (i, j) + bot + bot = f (i, j) + bot", "by simp"], ["proof (state)\nthis:\n  aggregation.sum_0 (\\<lambda>k. if k = i then f (k, j) + bot else zero)\n   {k. True} =\n  f (i, j) + bot\n\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0\n          (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot)\n          {l. True})\n     {k. True} =\n    f (i, j) + bot", "finally"], ["proof (chain)\npicking this:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot)\n        {l. True})\n   {k. True} =\n  f (i, j) + bot", "show ?thesis"], ["proof (prove)\nusing this:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot)\n        {l. True})\n   {k. True} =\n  f (i, j) + bot\n\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0\n          (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot)\n          {l. True})\n     {k. True} =\n    f (i, j) + bot", "."], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l. if k = i \\<and> l = j then f (k, l) else bot)\n        {l. True})\n   {k. True} =\n  f (i, j) + bot\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Matrix Aggregation\\<close>"], ["", "text \\<open>\nThe following definitions introduce the matrix of unit elements, componentwise aggregation and aggregation on matrices.\nThe aggregation of a matrix is a single value, but because s-algebras are single-sorted the result has to be encoded as a matrix of the same type (size) as the input.\nWe store the aggregated matrix value in the `first' entry of a matrix, setting all other entries to the unit value.\nThe first entry is determined by requiring an enumeration of indices.\nIt does not have to be the first entry; any fixed location in the matrix would work as well.\n\\<close>"], ["", "definition zero_matrix :: \"('a,'b::{plus,bot}) square\" (\"mzero\") where \"mzero = (\\<lambda>e . bot + bot)\""], ["", "definition plus_matrix :: \"('a,'b::plus) square \\<Rightarrow> ('a,'b) square \\<Rightarrow> ('a,'b) square\" (infixl \"\\<oplus>\\<^sub>M\" 65) where \"plus_matrix f g = (\\<lambda>e . f e + g e)\""], ["", "definition sum_matrix :: \"('a::enum,'b::{plus,bot}) square \\<Rightarrow> ('a,'b) square\" (\"sum\\<^sub>M _\" [80] 80) where \"sum_matrix f = (\\<lambda>(i,j) . if i = hd enum_class.enum \\<and> j = i then \\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l) else bot + bot)\""], ["", "text \\<open>\nBasic properties of these operations are given in the following.\n\\<close>"], ["", "lemma bot_plus_bot:\n  \"mbot \\<oplus>\\<^sub>M mbot = mzero\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mbot \\<oplus>\\<^sub>M mbot = mzero", "by (simp add: plus_matrix_def bot_matrix_def zero_matrix_def)"], ["", "lemma sum_bot:\n  \"sum\\<^sub>M (mbot :: ('a::enum,'b::aggregation_order) square) = mzero\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum\\<^sub>M mbot = mzero", "proof (rule ext, rule prod_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x a b. (sum\\<^sub>M mbot) (a, b) = mzero (a, b)", "fix i j :: \"'a\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x a b. (sum\\<^sub>M mbot) (a, b) = mzero (a, b)", "have \"(sum\\<^sub>M mbot :: ('a,'b) square) (i,j) = (if i = hd enum_class.enum \\<and> j = i then \\<Sum>\\<^sub>(k::'a) \\<Sum>\\<^sub>(l::'a) bot else bot + bot)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sum\\<^sub>M mbot) (i, j) =\n    (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. bot) {l. True})\n           {k. True}\n     else zero)", "by (unfold sum_matrix_def bot_matrix_def) simp"], ["proof (state)\nthis:\n  (sum\\<^sub>M mbot) (i, j) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. bot) {l. True})\n         {k. True}\n   else zero)\n\ngoal (1 subgoal):\n 1. \\<And>x a b. (sum\\<^sub>M mbot) (a, b) = mzero (a, b)", "also"], ["proof (state)\nthis:\n  (sum\\<^sub>M mbot) (i, j) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. bot) {l. True})\n         {k. True}\n   else zero)\n\ngoal (1 subgoal):\n 1. \\<And>x a b. (sum\\<^sub>M mbot) (a, b) = mzero (a, b)", "have \"... = bot + bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. bot) {l. True})\n           {k. True}\n     else zero) =\n    zero", "using agg_sum_bot aggregation.sum_0.neutral"], ["proof (prove)\nusing this:\n  aggregation.sum_0 (\\<lambda>k. bot) {k. True} = zero\n  \\<forall>x\\<in>?A. ?g x = zero \\<Longrightarrow>\n  aggregation.sum_0 ?g ?A = zero\n\ngoal (1 subgoal):\n 1. (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. bot) {l. True})\n           {k. True}\n     else zero) =\n    zero", "by fastforce"], ["proof (state)\nthis:\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. bot) {l. True})\n         {k. True}\n   else zero) =\n  zero\n\ngoal (1 subgoal):\n 1. \\<And>x a b. (sum\\<^sub>M mbot) (a, b) = mzero (a, b)", "also"], ["proof (state)\nthis:\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. bot) {l. True})\n         {k. True}\n   else zero) =\n  zero\n\ngoal (1 subgoal):\n 1. \\<And>x a b. (sum\\<^sub>M mbot) (a, b) = mzero (a, b)", "have \"... = mzero (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. zero = mzero (i, j)", "by (simp add: zero_matrix_def)"], ["proof (state)\nthis:\n  zero = mzero (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>x a b. (sum\\<^sub>M mbot) (a, b) = mzero (a, b)", "finally"], ["proof (chain)\npicking this:\n  (sum\\<^sub>M mbot) (i, j) = mzero (i, j)", "show \"(sum\\<^sub>M mbot :: ('a,'b) square) (i,j) = mzero (i,j)\""], ["proof (prove)\nusing this:\n  (sum\\<^sub>M mbot) (i, j) = mzero (i, j)\n\ngoal (1 subgoal):\n 1. (sum\\<^sub>M mbot) (i, j) = mzero (i, j)", "."], ["proof (state)\nthis:\n  (sum\\<^sub>M mbot) (i, j) = mzero (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_plus_bot:\n  fixes f :: \"('a::enum,'b::aggregation_order) square\"\n  shows \"sum\\<^sub>M f \\<oplus>\\<^sub>M mbot = sum\\<^sub>M f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum\\<^sub>M f \\<oplus>\\<^sub>M mbot = sum\\<^sub>M f", "proof (rule ext, rule prod_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M mbot) (a, b) = (sum\\<^sub>M f) (a, b)", "let ?h = \"hd enum_class.enum\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M mbot) (a, b) = (sum\\<^sub>M f) (a, b)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M mbot) (a, b) = (sum\\<^sub>M f) (a, b)", "have \"(sum\\<^sub>M f \\<oplus>\\<^sub>M mbot) (i,j) = (if i = ?h \\<and> j = i then (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l)) + bot else zero + bot)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sum\\<^sub>M f \\<oplus>\\<^sub>M mbot) (i, j) =\n    (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n           {k. True} +\n          bot\n     else zero + bot)", "by (simp add: plus_matrix_def bot_matrix_def sum_matrix_def)"], ["proof (state)\nthis:\n  (sum\\<^sub>M f \\<oplus>\\<^sub>M mbot) (i, j) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n         {k. True} +\n        bot\n   else zero + bot)\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M mbot) (a, b) = (sum\\<^sub>M f) (a, b)", "also"], ["proof (state)\nthis:\n  (sum\\<^sub>M f \\<oplus>\\<^sub>M mbot) (i, j) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n         {k. True} +\n        bot\n   else zero + bot)\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M mbot) (a, b) = (sum\\<^sub>M f) (a, b)", "have \"... = (if i = ?h \\<and> j = i then \\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l) else zero)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n           {k. True} +\n          bot\n     else zero + bot) =\n    (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n           {k. True}\n     else zero)", "by (metis (no_types, lifting) add_add_bot aggregation.sum_0.F_one)"], ["proof (state)\nthis:\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n         {k. True} +\n        bot\n   else zero + bot) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n         {k. True}\n   else zero)\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M mbot) (a, b) = (sum\\<^sub>M f) (a, b)", "also"], ["proof (state)\nthis:\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n         {k. True} +\n        bot\n   else zero + bot) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n         {k. True}\n   else zero)\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M mbot) (a, b) = (sum\\<^sub>M f) (a, b)", "have \"... = (sum\\<^sub>M f) (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n           {k. True}\n     else zero) =\n    (sum\\<^sub>M f) (i, j)", "by (simp add: sum_matrix_def)"], ["proof (state)\nthis:\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n         {k. True}\n   else zero) =\n  (sum\\<^sub>M f) (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M mbot) (a, b) = (sum\\<^sub>M f) (a, b)", "finally"], ["proof (chain)\npicking this:\n  (sum\\<^sub>M f \\<oplus>\\<^sub>M mbot) (i, j) = (sum\\<^sub>M f) (i, j)", "show \"(sum\\<^sub>M f \\<oplus>\\<^sub>M mbot) (i,j) = (sum\\<^sub>M f) (i,j)\""], ["proof (prove)\nusing this:\n  (sum\\<^sub>M f \\<oplus>\\<^sub>M mbot) (i, j) = (sum\\<^sub>M f) (i, j)\n\ngoal (1 subgoal):\n 1. (sum\\<^sub>M f \\<oplus>\\<^sub>M mbot) (i, j) = (sum\\<^sub>M f) (i, j)", "by simp"], ["proof (state)\nthis:\n  (sum\\<^sub>M f \\<oplus>\\<^sub>M mbot) (i, j) = (sum\\<^sub>M f) (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_plus_zero:\n  fixes f :: \"('a::enum,'b::aggregation_order) square\"\n  shows \"sum\\<^sub>M f \\<oplus>\\<^sub>M mzero = sum\\<^sub>M f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum\\<^sub>M f \\<oplus>\\<^sub>M mzero = sum\\<^sub>M f", "by (rule ext, rule prod_cases) (simp add: plus_matrix_def zero_matrix_def sum_matrix_def)"], ["", "lemma agg_matrix_bot:\n  fixes f :: \"('a,'b::aggregation_order) square\"\n  assumes \"\\<forall>i j . f (i,j) = bot\"\n    shows \"f = mbot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = mbot", "apply (unfold bot_matrix_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. f = (\\<lambda>e. bot)", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>i j. f (i, j) = bot\n\ngoal (1 subgoal):\n 1. f = (\\<lambda>e. bot)", "by auto"], ["", "text \\<open>\nWe consider a different implementation of matrix aggregation which stores the aggregated value in all entries of the matrix instead of a particular one.\nThis does not require an enumeration of the indices.\nAll results continue to hold using this alternative implementation.\n\\<close>"], ["", "definition sum_matrix_2 :: \"('a,'b::{plus,bot}) square \\<Rightarrow> ('a,'b) square\" (\"sum2\\<^sub>M _\" [80] 80) where \"sum_matrix_2 f = (\\<lambda>e . \\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l))\""], ["", "lemma sum_bot_2:\n  \"sum2\\<^sub>M (mbot :: ('a,'b::aggregation_order) square) = mzero\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum2\\<^sub>M mbot = mzero", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. (sum2\\<^sub>M mbot) x = mzero x", "fix e"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. (sum2\\<^sub>M mbot) x = mzero x", "have \"(sum2\\<^sub>M mbot :: ('a,'b) square) e = (\\<Sum>\\<^sub>(k::'a) \\<Sum>\\<^sub>(l::'a) bot)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sum2\\<^sub>M mbot) e =\n    aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. bot) {l. True}) {k. True}", "by (unfold sum_matrix_2_def bot_matrix_def) simp"], ["proof (state)\nthis:\n  (sum2\\<^sub>M mbot) e =\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. bot) {l. True}) {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>x. (sum2\\<^sub>M mbot) x = mzero x", "also"], ["proof (state)\nthis:\n  (sum2\\<^sub>M mbot) e =\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. bot) {l. True}) {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>x. (sum2\\<^sub>M mbot) x = mzero x", "have \"... = bot + bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. bot) {l. True}) {k. True} =\n    zero", "using agg_sum_bot aggregation.sum_0.neutral"], ["proof (prove)\nusing this:\n  aggregation.sum_0 (\\<lambda>k. bot) {k. True} = zero\n  \\<forall>x\\<in>?A. ?g x = zero \\<Longrightarrow>\n  aggregation.sum_0 ?g ?A = zero\n\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. bot) {l. True}) {k. True} =\n    zero", "by fastforce"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. bot) {l. True}) {k. True} =\n  zero\n\ngoal (1 subgoal):\n 1. \\<And>x. (sum2\\<^sub>M mbot) x = mzero x", "also"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. bot) {l. True}) {k. True} =\n  zero\n\ngoal (1 subgoal):\n 1. \\<And>x. (sum2\\<^sub>M mbot) x = mzero x", "have \"... = mzero e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. zero = mzero e", "by (simp add: zero_matrix_def)"], ["proof (state)\nthis:\n  zero = mzero e\n\ngoal (1 subgoal):\n 1. \\<And>x. (sum2\\<^sub>M mbot) x = mzero x", "finally"], ["proof (chain)\npicking this:\n  (sum2\\<^sub>M mbot) e = mzero e", "show \"(sum2\\<^sub>M mbot :: ('a,'b) square) e = mzero e\""], ["proof (prove)\nusing this:\n  (sum2\\<^sub>M mbot) e = mzero e\n\ngoal (1 subgoal):\n 1. (sum2\\<^sub>M mbot) e = mzero e", "."], ["proof (state)\nthis:\n  (sum2\\<^sub>M mbot) e = mzero e\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_plus_bot_2:\n  fixes f :: \"('a,'b::aggregation_order) square\"\n  shows \"sum2\\<^sub>M f \\<oplus>\\<^sub>M mbot = sum2\\<^sub>M f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum2\\<^sub>M f \\<oplus>\\<^sub>M mbot = sum2\\<^sub>M f", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. (sum2\\<^sub>M f \\<oplus>\\<^sub>M mbot) x = (sum2\\<^sub>M f) x", "fix e"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. (sum2\\<^sub>M f \\<oplus>\\<^sub>M mbot) x = (sum2\\<^sub>M f) x", "have \"(sum2\\<^sub>M f \\<oplus>\\<^sub>M mbot) e = (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l)) + bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sum2\\<^sub>M f \\<oplus>\\<^sub>M mbot) e =\n    aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True} +\n    bot", "by (simp add: plus_matrix_def bot_matrix_def sum_matrix_2_def)"], ["proof (state)\nthis:\n  (sum2\\<^sub>M f \\<oplus>\\<^sub>M mbot) e =\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True} +\n  bot\n\ngoal (1 subgoal):\n 1. \\<And>x. (sum2\\<^sub>M f \\<oplus>\\<^sub>M mbot) x = (sum2\\<^sub>M f) x", "also"], ["proof (state)\nthis:\n  (sum2\\<^sub>M f \\<oplus>\\<^sub>M mbot) e =\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True} +\n  bot\n\ngoal (1 subgoal):\n 1. \\<And>x. (sum2\\<^sub>M f \\<oplus>\\<^sub>M mbot) x = (sum2\\<^sub>M f) x", "have \"... = (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True} +\n    bot =\n    aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True}", "by (metis (no_types, lifting) add_add_bot aggregation.sum_0.F_one)"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True} +\n  bot =\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>x. (sum2\\<^sub>M f \\<oplus>\\<^sub>M mbot) x = (sum2\\<^sub>M f) x", "also"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True} +\n  bot =\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>x. (sum2\\<^sub>M f \\<oplus>\\<^sub>M mbot) x = (sum2\\<^sub>M f) x", "have \"... = (sum2\\<^sub>M f) e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True} =\n    (sum2\\<^sub>M f) e", "by (simp add: sum_matrix_2_def)"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True} =\n  (sum2\\<^sub>M f) e\n\ngoal (1 subgoal):\n 1. \\<And>x. (sum2\\<^sub>M f \\<oplus>\\<^sub>M mbot) x = (sum2\\<^sub>M f) x", "finally"], ["proof (chain)\npicking this:\n  (sum2\\<^sub>M f \\<oplus>\\<^sub>M mbot) e = (sum2\\<^sub>M f) e", "show \"(sum2\\<^sub>M f \\<oplus>\\<^sub>M mbot) e = (sum2\\<^sub>M f) e\""], ["proof (prove)\nusing this:\n  (sum2\\<^sub>M f \\<oplus>\\<^sub>M mbot) e = (sum2\\<^sub>M f) e\n\ngoal (1 subgoal):\n 1. (sum2\\<^sub>M f \\<oplus>\\<^sub>M mbot) e = (sum2\\<^sub>M f) e", "by simp"], ["proof (state)\nthis:\n  (sum2\\<^sub>M f \\<oplus>\\<^sub>M mbot) e = (sum2\\<^sub>M f) e\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_plus_zero_2:\n  fixes f :: \"('a,'b::aggregation_order) square\"\n  shows \"sum2\\<^sub>M f \\<oplus>\\<^sub>M mzero = sum2\\<^sub>M f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum2\\<^sub>M f \\<oplus>\\<^sub>M mzero = sum2\\<^sub>M f", "by (simp add: plus_matrix_def zero_matrix_def sum_matrix_2_def)"], ["", "subsection \\<open>Aggregation Lattices\\<close>"], ["", "text \\<open>\nWe extend aggregation orders to dense bounded distributive lattices.\nAxiom \\<open>add_lattice\\<close> implements the inclusion-exclusion principle at the level of edge weights.\n\\<close>"], ["", "class aggregation_lattice = bounded_distrib_lattice + dense_lattice + aggregation_order +\n  assumes add_lattice: \"x + y = (x \\<squnion> y) + (x \\<sqinter> y)\""], ["", "text \\<open>\nAggregation lattices form a Stone relation algebra by reusing the meet operation as composition, using identity as converse and a standard implementation of pseudocomplement.\n\\<close>"], ["", "class aggregation_algebra = aggregation_lattice + uminus + one + times + conv +\n  assumes uminus_def [simp]: \"-x = (if x = bot then top else bot)\"\n  assumes one_def [simp]: \"1 = top\"\n  assumes times_def [simp]: \"x * y = x \\<sqinter> y\"\n  assumes conv_def [simp]: \"x\\<^sup>T = x\"\nbegin"], ["", "subclass stone_algebra"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.stone_algebra (\\<sqinter>) (\\<le>) (<) (\\<squnion>) bot top uminus", "apply unfold_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y. (x \\<sqinter> y = bot) = (x \\<le> - y)\n 2. \\<And>x. - x \\<squnion> - - x = top", "using bot_meet_irreducible bot_unique"], ["proof (prove)\nusing this:\n  ?x \\<sqinter> ?y = bot \\<longrightarrow> ?x = bot \\<or> ?y = bot\n  (?a \\<le> bot) = (?a = bot)\n\ngoal (2 subgoals):\n 1. \\<And>x y. (x \\<sqinter> y = bot) = (x \\<le> - y)\n 2. \\<And>x. - x \\<squnion> - - x = top", "by auto"], ["", "subclass stone_relation_algebra"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.stone_relation_algebra (\\<sqinter>) (\\<le>) (<) (\\<squnion>) bot\n     top uminus (1::'a) (*) conv", "apply unfold_locales"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>x y z. x * y * z = x * (y * z)\n 2. \\<And>x y z. (x \\<squnion> y) * z = x * z \\<squnion> y * z\n 3. \\<And>x. bot * x = bot\n 4. \\<And>x. (1::'a) * x = x\n 5. \\<And>x. x\\<^sup>T\\<^sup>T = x\n 6. \\<And>x y. (x \\<squnion> y)\\<^sup>T = x\\<^sup>T \\<squnion> y\\<^sup>T\n 7. \\<And>x y. (x * y)\\<^sup>T = y\\<^sup>T * x\\<^sup>T\n 8. \\<And>x y z. x * y \\<sqinter> z \\<le> x * (y \\<sqinter> x\\<^sup>T * z)\n 9. \\<And>x y. - - (x * y) = - - x * - - y\n 10. - - (1::'a) = (1::'a)", "prefer 9"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>x y. - - (x * y) = - - x * - - y\n 2. \\<And>x y z. x * y * z = x * (y * z)\n 3. \\<And>x y z. (x \\<squnion> y) * z = x * z \\<squnion> y * z\n 4. \\<And>x. bot * x = bot\n 5. \\<And>x. (1::'a) * x = x\n 6. \\<And>x. x\\<^sup>T\\<^sup>T = x\n 7. \\<And>x y. (x \\<squnion> y)\\<^sup>T = x\\<^sup>T \\<squnion> y\\<^sup>T\n 8. \\<And>x y. (x * y)\\<^sup>T = y\\<^sup>T * x\\<^sup>T\n 9. \\<And>x y z. x * y \\<sqinter> z \\<le> x * (y \\<sqinter> x\\<^sup>T * z)\n 10. - - (1::'a) = (1::'a)", "using bot_meet_irreducible"], ["proof (prove)\nusing this:\n  ?x \\<sqinter> ?y = bot \\<longrightarrow> ?x = bot \\<or> ?y = bot\n\ngoal (10 subgoals):\n 1. \\<And>x y. - - (x * y) = - - x * - - y\n 2. \\<And>x y z. x * y * z = x * (y * z)\n 3. \\<And>x y z. (x \\<squnion> y) * z = x * z \\<squnion> y * z\n 4. \\<And>x. bot * x = bot\n 5. \\<And>x. (1::'a) * x = x\n 6. \\<And>x. x\\<^sup>T\\<^sup>T = x\n 7. \\<And>x y. (x \\<squnion> y)\\<^sup>T = x\\<^sup>T \\<squnion> y\\<^sup>T\n 8. \\<And>x y. (x * y)\\<^sup>T = y\\<^sup>T * x\\<^sup>T\n 9. \\<And>x y z. x * y \\<sqinter> z \\<le> x * (y \\<sqinter> x\\<^sup>T * z)\n 10. - - (1::'a) = (1::'a)", "apply auto[1]"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>x y z. x * y * z = x * (y * z)\n 2. \\<And>x y z. (x \\<squnion> y) * z = x * z \\<squnion> y * z\n 3. \\<And>x. bot * x = bot\n 4. \\<And>x. (1::'a) * x = x\n 5. \\<And>x. x\\<^sup>T\\<^sup>T = x\n 6. \\<And>x y. (x \\<squnion> y)\\<^sup>T = x\\<^sup>T \\<squnion> y\\<^sup>T\n 7. \\<And>x y. (x * y)\\<^sup>T = y\\<^sup>T * x\\<^sup>T\n 8. \\<And>x y z. x * y \\<sqinter> z \\<le> x * (y \\<sqinter> x\\<^sup>T * z)\n 9. - - (1::'a) = (1::'a)", "by (simp_all add: inf.assoc le_infI2 inf_sup_distrib1 inf_sup_distrib2 inf.commute inf.left_commute)"], ["", "end"], ["", "text \\<open>\nWe show that matrices over aggregation lattices form an s-algebra using the above operations.\n\\<close>"], ["", "interpretation agg_square_s_algebra: s_algebra where sup = sup_matrix and inf = inf_matrix and less_eq = less_eq_matrix and less = less_matrix and bot = \"bot_matrix::('a::enum,'b::aggregation_algebra) square\" and top = top_matrix and uminus = uminus_matrix and one = one_matrix and times = times_matrix and conv = conv_matrix and plus = plus_matrix and sum = sum_matrix"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.s_algebra sum_matrix (\\<oplus>\\<^sub>M) (\\<otimes>) (\\<preceq>)\n     (\\<prec>) (\\<oplus>) mbot mtop uminus_matrix mone (\\<odot>) conv_matrix", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       x \\<noteq> mbot \\<and>\n       sum\\<^sub>M x \\<preceq> sum\\<^sub>M y \\<longrightarrow>\n       sum\\<^sub>M z \\<oplus>\\<^sub>M sum\\<^sub>M x \\<preceq>\n       sum\\<^sub>M z \\<oplus>\\<^sub>M sum\\<^sub>M y\n 2. \\<And>x. sum\\<^sub>M x \\<oplus>\\<^sub>M sum\\<^sub>M mbot = sum\\<^sub>M x\n 3. \\<And>x y.\n       sum\\<^sub>M x \\<oplus>\\<^sub>M sum\\<^sub>M y =\n       sum\\<^sub>M (x \\<oplus> y) \\<oplus>\\<^sub>M\n       sum\\<^sub>M (x \\<otimes> y)\n 4. \\<And>x. sum\\<^sub>M x\\<^sup>t = sum\\<^sub>M x", "fix f g h :: \"('a,'b) square\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       x \\<noteq> mbot \\<and>\n       sum\\<^sub>M x \\<preceq> sum\\<^sub>M y \\<longrightarrow>\n       sum\\<^sub>M z \\<oplus>\\<^sub>M sum\\<^sub>M x \\<preceq>\n       sum\\<^sub>M z \\<oplus>\\<^sub>M sum\\<^sub>M y\n 2. \\<And>x. sum\\<^sub>M x \\<oplus>\\<^sub>M sum\\<^sub>M mbot = sum\\<^sub>M x\n 3. \\<And>x y.\n       sum\\<^sub>M x \\<oplus>\\<^sub>M sum\\<^sub>M y =\n       sum\\<^sub>M (x \\<oplus> y) \\<oplus>\\<^sub>M\n       sum\\<^sub>M (x \\<otimes> y)\n 4. \\<And>x. sum\\<^sub>M x\\<^sup>t = sum\\<^sub>M x", "show \"f \\<noteq> mbot \\<and> sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<longrightarrow> h \\<oplus>\\<^sub>M sum\\<^sub>M f \\<preceq> h \\<oplus>\\<^sub>M sum\\<^sub>M g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<and>\n    sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<longrightarrow>\n    h \\<oplus>\\<^sub>M sum\\<^sub>M f \\<preceq>\n    h \\<oplus>\\<^sub>M sum\\<^sub>M g", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<and>\n    sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<Longrightarrow>\n    h \\<oplus>\\<^sub>M sum\\<^sub>M f \\<preceq>\n    h \\<oplus>\\<^sub>M sum\\<^sub>M g", "let ?h = \"hd enum_class.enum\""], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<and>\n    sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<Longrightarrow>\n    h \\<oplus>\\<^sub>M sum\\<^sub>M f \\<preceq>\n    h \\<oplus>\\<^sub>M sum\\<^sub>M g", "assume 1: \"f \\<noteq> mbot \\<and> sum\\<^sub>M f \\<preceq> sum\\<^sub>M g\""], ["proof (state)\nthis:\n  f \\<noteq> mbot \\<and> sum\\<^sub>M f \\<preceq> sum\\<^sub>M g\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<and>\n    sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<Longrightarrow>\n    h \\<oplus>\\<^sub>M sum\\<^sub>M f \\<preceq>\n    h \\<oplus>\\<^sub>M sum\\<^sub>M g", "hence \"\\<exists>k l . f (k,l) \\<noteq> bot\""], ["proof (prove)\nusing this:\n  f \\<noteq> mbot \\<and> sum\\<^sub>M f \\<preceq> sum\\<^sub>M g\n\ngoal (1 subgoal):\n 1. \\<exists>k l. f (k, l) \\<noteq> bot", "by (meson agg_matrix_bot)"], ["proof (state)\nthis:\n  \\<exists>k l. f (k, l) \\<noteq> bot\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<and>\n    sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<Longrightarrow>\n    h \\<oplus>\\<^sub>M sum\\<^sub>M f \\<preceq>\n    h \\<oplus>\\<^sub>M sum\\<^sub>M g", "hence 2: \"(\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l)) \\<noteq> bot\""], ["proof (prove)\nusing this:\n  \\<exists>k l. f (k, l) \\<noteq> bot\n\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True} \\<noteq>\n    bot", "using agg_sum_not_bot"], ["proof (prove)\nusing this:\n  \\<exists>k l. f (k, l) \\<noteq> bot\n  ?f (?i, ?j) \\<noteq> bot \\<Longrightarrow>\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. ?f (k, l)) {l. True})\n   {k. True} \\<noteq>\n  bot\n\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True} \\<noteq>\n    bot", "by blast"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True} \\<noteq>\n  bot\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<and>\n    sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<Longrightarrow>\n    h \\<oplus>\\<^sub>M sum\\<^sub>M f \\<preceq>\n    h \\<oplus>\\<^sub>M sum\\<^sub>M g", "have \"(\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l)) = (sum\\<^sub>M f) (?h,?h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True} =\n    (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)", "by (simp add: sum_matrix_def)"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True} =\n  (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<and>\n    sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<Longrightarrow>\n    h \\<oplus>\\<^sub>M sum\\<^sub>M f \\<preceq>\n    h \\<oplus>\\<^sub>M sum\\<^sub>M g", "also"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True} =\n  (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<and>\n    sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<Longrightarrow>\n    h \\<oplus>\\<^sub>M sum\\<^sub>M f \\<preceq>\n    h \\<oplus>\\<^sub>M sum\\<^sub>M g", "have \"... \\<le> (sum\\<^sub>M g) (?h,?h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)\n    \\<le> (sum\\<^sub>M g) (hd enum_class.enum, hd enum_class.enum)", "using 1"], ["proof (prove)\nusing this:\n  f \\<noteq> mbot \\<and> sum\\<^sub>M f \\<preceq> sum\\<^sub>M g\n\ngoal (1 subgoal):\n 1. (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)\n    \\<le> (sum\\<^sub>M g) (hd enum_class.enum, hd enum_class.enum)", "by (simp add: less_eq_matrix_def)"], ["proof (state)\nthis:\n  (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)\n  \\<le> (sum\\<^sub>M g) (hd enum_class.enum, hd enum_class.enum)\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<and>\n    sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<Longrightarrow>\n    h \\<oplus>\\<^sub>M sum\\<^sub>M f \\<preceq>\n    h \\<oplus>\\<^sub>M sum\\<^sub>M g", "also"], ["proof (state)\nthis:\n  (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)\n  \\<le> (sum\\<^sub>M g) (hd enum_class.enum, hd enum_class.enum)\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<and>\n    sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<Longrightarrow>\n    h \\<oplus>\\<^sub>M sum\\<^sub>M f \\<preceq>\n    h \\<oplus>\\<^sub>M sum\\<^sub>M g", "have \"... = (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l g (k,l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sum\\<^sub>M g) (hd enum_class.enum, hd enum_class.enum) =\n    aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n     {k. True}", "by (simp add: sum_matrix_def)"], ["proof (state)\nthis:\n  (sum\\<^sub>M g) (hd enum_class.enum, hd enum_class.enum) =\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<and>\n    sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<Longrightarrow>\n    h \\<oplus>\\<^sub>M sum\\<^sub>M f \\<preceq>\n    h \\<oplus>\\<^sub>M sum\\<^sub>M g", "finally"], ["proof (chain)\npicking this:\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True}\n  \\<le> aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n         {k. True}", "have \"(\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l)) \\<le> (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l g (k,l))\""], ["proof (prove)\nusing this:\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True}\n  \\<le> aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n         {k. True}\n\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True}\n    \\<le> aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n           {k. True}", "by simp"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True}\n  \\<le> aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n         {k. True}\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<and>\n    sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<Longrightarrow>\n    h \\<oplus>\\<^sub>M sum\\<^sub>M f \\<preceq>\n    h \\<oplus>\\<^sub>M sum\\<^sub>M g", "hence 3: \"(\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l)) + bot \\<le> (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l g (k,l)) + bot\""], ["proof (prove)\nusing this:\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True}\n  \\<le> aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n         {k. True}\n\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True} +\n    bot\n    \\<le> aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n           {k. True} +\n          bot", "by (metis (no_types, lifting) add_add_bot aggregation.sum_0.F_one)"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True} +\n  bot\n  \\<le> aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n         {k. True} +\n        bot\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<and>\n    sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<Longrightarrow>\n    h \\<oplus>\\<^sub>M sum\\<^sub>M f \\<preceq>\n    h \\<oplus>\\<^sub>M sum\\<^sub>M g", "show \"h \\<oplus>\\<^sub>M sum\\<^sub>M f \\<preceq> h \\<oplus>\\<^sub>M sum\\<^sub>M g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h \\<oplus>\\<^sub>M sum\\<^sub>M f \\<preceq>\n    h \\<oplus>\\<^sub>M sum\\<^sub>M g", "proof (unfold less_eq_matrix_def, rule allI, rule prod_cases, unfold plus_matrix_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       h (a, b) + (sum\\<^sub>M f) (a, b)\n       \\<le> h (a, b) + (sum\\<^sub>M g) (a, b)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       h (a, b) + (sum\\<^sub>M f) (a, b)\n       \\<le> h (a, b) + (sum\\<^sub>M g) (a, b)", "have 4: \"h (i,j) + (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l)) \\<le> h (i,j) + (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l g (k,l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h (i, j) +\n    aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True}\n    \\<le> h (i, j) +\n          aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n           {k. True}", "using 2 3"], ["proof (prove)\nusing this:\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True} \\<noteq>\n  bot\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True} +\n  bot\n  \\<le> aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n         {k. True} +\n        bot\n\ngoal (1 subgoal):\n 1. h (i, j) +\n    aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True}\n    \\<le> h (i, j) +\n          aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n           {k. True}", "by (metis (no_types, lifting) add_right_isotone add.commute)"], ["proof (state)\nthis:\n  h (i, j) +\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True}\n  \\<le> h (i, j) +\n        aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n         {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       h (a, b) + (sum\\<^sub>M f) (a, b)\n       \\<le> h (a, b) + (sum\\<^sub>M g) (a, b)", "have \"h (i,j) + (sum\\<^sub>M f) (i,j) = h (i,j) + (if i = ?h \\<and> j = i then \\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l) else zero)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h (i, j) + (sum\\<^sub>M f) (i, j) =\n    h (i, j) +\n    (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n           {k. True}\n     else zero)", "by (simp add: sum_matrix_def)"], ["proof (state)\nthis:\n  h (i, j) + (sum\\<^sub>M f) (i, j) =\n  h (i, j) +\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n         {k. True}\n   else zero)\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       h (a, b) + (sum\\<^sub>M f) (a, b)\n       \\<le> h (a, b) + (sum\\<^sub>M g) (a, b)", "also"], ["proof (state)\nthis:\n  h (i, j) + (sum\\<^sub>M f) (i, j) =\n  h (i, j) +\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n         {k. True}\n   else zero)\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       h (a, b) + (sum\\<^sub>M f) (a, b)\n       \\<le> h (a, b) + (sum\\<^sub>M g) (a, b)", "have \"... = (if i = ?h \\<and> j = i then h (i,j) + (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l)) else h (i,j) + zero)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h (i, j) +\n    (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n           {k. True}\n     else zero) =\n    (if i = hd enum_class.enum \\<and> j = i\n     then h (i, j) +\n          aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n           {k. True}\n     else h (i, j) + zero)", "by simp"], ["proof (state)\nthis:\n  h (i, j) +\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n         {k. True}\n   else zero) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then h (i, j) +\n        aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n         {k. True}\n   else h (i, j) + zero)\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       h (a, b) + (sum\\<^sub>M f) (a, b)\n       \\<le> h (a, b) + (sum\\<^sub>M g) (a, b)", "also"], ["proof (state)\nthis:\n  h (i, j) +\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n         {k. True}\n   else zero) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then h (i, j) +\n        aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n         {k. True}\n   else h (i, j) + zero)\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       h (a, b) + (sum\\<^sub>M f) (a, b)\n       \\<le> h (a, b) + (sum\\<^sub>M g) (a, b)", "have \"... \\<le> (if i = ?h \\<and> j = i then h (i,j) + (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l g (k,l)) else h (i,j) + zero)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i = hd enum_class.enum \\<and> j = i\n     then h (i, j) +\n          aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n           {k. True}\n     else h (i, j) + zero)\n    \\<le> (if i = hd enum_class.enum \\<and> j = i\n           then h (i, j) +\n                aggregation.sum_0\n                 (\\<lambda>k.\n                     aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n                 {k. True}\n           else h (i, j) + zero)", "using 4 inf.eq_iff"], ["proof (prove)\nusing this:\n  h (i, j) +\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True}\n  \\<le> h (i, j) +\n        aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n         {k. True}\n  (?x = ?y) = (?y \\<le> ?x \\<and> ?x \\<le> ?y)\n\ngoal (1 subgoal):\n 1. (if i = hd enum_class.enum \\<and> j = i\n     then h (i, j) +\n          aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n           {k. True}\n     else h (i, j) + zero)\n    \\<le> (if i = hd enum_class.enum \\<and> j = i\n           then h (i, j) +\n                aggregation.sum_0\n                 (\\<lambda>k.\n                     aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n                 {k. True}\n           else h (i, j) + zero)", "by auto"], ["proof (state)\nthis:\n  (if i = hd enum_class.enum \\<and> j = i\n   then h (i, j) +\n        aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n         {k. True}\n   else h (i, j) + zero)\n  \\<le> (if i = hd enum_class.enum \\<and> j = i\n         then h (i, j) +\n              aggregation.sum_0\n               (\\<lambda>k.\n                   aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n               {k. True}\n         else h (i, j) + zero)\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       h (a, b) + (sum\\<^sub>M f) (a, b)\n       \\<le> h (a, b) + (sum\\<^sub>M g) (a, b)", "also"], ["proof (state)\nthis:\n  (if i = hd enum_class.enum \\<and> j = i\n   then h (i, j) +\n        aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n         {k. True}\n   else h (i, j) + zero)\n  \\<le> (if i = hd enum_class.enum \\<and> j = i\n         then h (i, j) +\n              aggregation.sum_0\n               (\\<lambda>k.\n                   aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n               {k. True}\n         else h (i, j) + zero)\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       h (a, b) + (sum\\<^sub>M f) (a, b)\n       \\<le> h (a, b) + (sum\\<^sub>M g) (a, b)", "have \"... = h (i,j) + (if i = ?h \\<and> j = i then \\<Sum>\\<^sub>k \\<Sum>\\<^sub>l g (k,l) else zero)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i = hd enum_class.enum \\<and> j = i\n     then h (i, j) +\n          aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n           {k. True}\n     else h (i, j) + zero) =\n    h (i, j) +\n    (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n           {k. True}\n     else zero)", "by simp"], ["proof (state)\nthis:\n  (if i = hd enum_class.enum \\<and> j = i\n   then h (i, j) +\n        aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n         {k. True}\n   else h (i, j) + zero) =\n  h (i, j) +\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n         {k. True}\n   else zero)\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       h (a, b) + (sum\\<^sub>M f) (a, b)\n       \\<le> h (a, b) + (sum\\<^sub>M g) (a, b)", "finally"], ["proof (chain)\npicking this:\n  h (i, j) + (sum\\<^sub>M f) (i, j)\n  \\<le> h (i, j) +\n        (if i = hd enum_class.enum \\<and> j = i\n         then aggregation.sum_0\n               (\\<lambda>k.\n                   aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n               {k. True}\n         else zero)", "show \"h (i,j) + (sum\\<^sub>M f) (i,j) \\<le> h (i,j) + (sum\\<^sub>M g) (i,j)\""], ["proof (prove)\nusing this:\n  h (i, j) + (sum\\<^sub>M f) (i, j)\n  \\<le> h (i, j) +\n        (if i = hd enum_class.enum \\<and> j = i\n         then aggregation.sum_0\n               (\\<lambda>k.\n                   aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n               {k. True}\n         else zero)\n\ngoal (1 subgoal):\n 1. h (i, j) + (sum\\<^sub>M f) (i, j)\n    \\<le> h (i, j) + (sum\\<^sub>M g) (i, j)", "by (simp add: sum_matrix_def)"], ["proof (state)\nthis:\n  h (i, j) + (sum\\<^sub>M f) (i, j) \\<le> h (i, j) + (sum\\<^sub>M g) (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  h \\<oplus>\\<^sub>M sum\\<^sub>M f \\<preceq>\n  h \\<oplus>\\<^sub>M sum\\<^sub>M g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f \\<noteq> mbot \\<and>\n  sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<longrightarrow>\n  h \\<oplus>\\<^sub>M sum\\<^sub>M f \\<preceq>\n  h \\<oplus>\\<^sub>M sum\\<^sub>M g\n\ngoal (3 subgoals):\n 1. \\<And>x. sum\\<^sub>M x \\<oplus>\\<^sub>M sum\\<^sub>M mbot = sum\\<^sub>M x\n 2. \\<And>x y.\n       sum\\<^sub>M x \\<oplus>\\<^sub>M sum\\<^sub>M y =\n       sum\\<^sub>M (x \\<oplus> y) \\<oplus>\\<^sub>M\n       sum\\<^sub>M (x \\<otimes> y)\n 3. \\<And>x. sum\\<^sub>M x\\<^sup>t = sum\\<^sub>M x", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x. sum\\<^sub>M x \\<oplus>\\<^sub>M sum\\<^sub>M mbot = sum\\<^sub>M x\n 2. \\<And>x y.\n       sum\\<^sub>M x \\<oplus>\\<^sub>M sum\\<^sub>M y =\n       sum\\<^sub>M (x \\<oplus> y) \\<oplus>\\<^sub>M\n       sum\\<^sub>M (x \\<otimes> y)\n 3. \\<And>x. sum\\<^sub>M x\\<^sup>t = sum\\<^sub>M x", "fix f :: \"('a,'b) square\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x. sum\\<^sub>M x \\<oplus>\\<^sub>M sum\\<^sub>M mbot = sum\\<^sub>M x\n 2. \\<And>x y.\n       sum\\<^sub>M x \\<oplus>\\<^sub>M sum\\<^sub>M y =\n       sum\\<^sub>M (x \\<oplus> y) \\<oplus>\\<^sub>M\n       sum\\<^sub>M (x \\<otimes> y)\n 3. \\<And>x. sum\\<^sub>M x\\<^sup>t = sum\\<^sub>M x", "show \"sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M mbot = sum\\<^sub>M f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M mbot = sum\\<^sub>M f", "by (simp add: sum_bot sum_plus_zero)"], ["proof (state)\nthis:\n  sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M mbot = sum\\<^sub>M f\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       sum\\<^sub>M x \\<oplus>\\<^sub>M sum\\<^sub>M y =\n       sum\\<^sub>M (x \\<oplus> y) \\<oplus>\\<^sub>M\n       sum\\<^sub>M (x \\<otimes> y)\n 2. \\<And>x. sum\\<^sub>M x\\<^sup>t = sum\\<^sub>M x", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       sum\\<^sub>M x \\<oplus>\\<^sub>M sum\\<^sub>M y =\n       sum\\<^sub>M (x \\<oplus> y) \\<oplus>\\<^sub>M\n       sum\\<^sub>M (x \\<otimes> y)\n 2. \\<And>x. sum\\<^sub>M x\\<^sup>t = sum\\<^sub>M x", "fix f g :: \"('a,'b) square\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       sum\\<^sub>M x \\<oplus>\\<^sub>M sum\\<^sub>M y =\n       sum\\<^sub>M (x \\<oplus> y) \\<oplus>\\<^sub>M\n       sum\\<^sub>M (x \\<otimes> y)\n 2. \\<And>x. sum\\<^sub>M x\\<^sup>t = sum\\<^sub>M x", "show \"sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g = sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M sum\\<^sub>M (f \\<otimes> g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g =\n    sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M sum\\<^sub>M (f \\<otimes> g)", "proof (rule ext, rule prod_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (a, b) =\n       (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum\\<^sub>M (f \\<otimes> g))\n        (a, b)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (a, b) =\n       (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum\\<^sub>M (f \\<otimes> g))\n        (a, b)", "let ?h = \"hd enum_class.enum\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (a, b) =\n       (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum\\<^sub>M (f \\<otimes> g))\n        (a, b)", "have \"(sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (i,j) = (sum\\<^sub>M f) (i,j) + (sum\\<^sub>M g) (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (i, j) =\n    (sum\\<^sub>M f) (i, j) + (sum\\<^sub>M g) (i, j)", "by (simp add: plus_matrix_def)"], ["proof (state)\nthis:\n  (sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (i, j) =\n  (sum\\<^sub>M f) (i, j) + (sum\\<^sub>M g) (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (a, b) =\n       (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum\\<^sub>M (f \\<otimes> g))\n        (a, b)", "also"], ["proof (state)\nthis:\n  (sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (i, j) =\n  (sum\\<^sub>M f) (i, j) + (sum\\<^sub>M g) (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (a, b) =\n       (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum\\<^sub>M (f \\<otimes> g))\n        (a, b)", "have \"... = (if i = ?h \\<and> j = i then \\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l) else zero) + (if i = ?h \\<and> j = i then \\<Sum>\\<^sub>k \\<Sum>\\<^sub>l g (k,l) else zero)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sum\\<^sub>M f) (i, j) + (sum\\<^sub>M g) (i, j) =\n    (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n           {k. True}\n     else zero) +\n    (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n           {k. True}\n     else zero)", "by (simp add: sum_matrix_def)"], ["proof (state)\nthis:\n  (sum\\<^sub>M f) (i, j) + (sum\\<^sub>M g) (i, j) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n         {k. True}\n   else zero) +\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n         {k. True}\n   else zero)\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (a, b) =\n       (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum\\<^sub>M (f \\<otimes> g))\n        (a, b)", "also"], ["proof (state)\nthis:\n  (sum\\<^sub>M f) (i, j) + (sum\\<^sub>M g) (i, j) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n         {k. True}\n   else zero) +\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n         {k. True}\n   else zero)\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (a, b) =\n       (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum\\<^sub>M (f \\<otimes> g))\n        (a, b)", "have \"... = (if i = ?h \\<and> j = i then (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l)) + (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l g (k,l)) else zero)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n           {k. True}\n     else zero) +\n    (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n           {k. True}\n     else zero) =\n    (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n           {k. True} +\n          aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n           {k. True}\n     else zero)", "by simp"], ["proof (state)\nthis:\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n         {k. True}\n   else zero) +\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n         {k. True}\n   else zero) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n         {k. True} +\n        aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n         {k. True}\n   else zero)\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (a, b) =\n       (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum\\<^sub>M (f \\<otimes> g))\n        (a, b)", "also"], ["proof (state)\nthis:\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n         {k. True}\n   else zero) +\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n         {k. True}\n   else zero) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n         {k. True} +\n        aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n         {k. True}\n   else zero)\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (a, b) =\n       (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum\\<^sub>M (f \\<otimes> g))\n        (a, b)", "have \"... = (if i = ?h \\<and> j = i then \\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l) + g (k,l) else zero)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n           {k. True} +\n          aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n           {k. True}\n     else zero) =\n    (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k.\n               aggregation.sum_0 (\\<lambda>l. f (k, l) + g (k, l))\n                {l. True})\n           {k. True}\n     else zero)", "using agg_sum_distrib_2"], ["proof (prove)\nusing this:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. ?f (k, l) + ?g (k, l)) {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. ?f (k, l)) {l. True})\n   {k. True} +\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. ?g (k, l)) {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n           {k. True} +\n          aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n           {k. True}\n     else zero) =\n    (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k.\n               aggregation.sum_0 (\\<lambda>l. f (k, l) + g (k, l))\n                {l. True})\n           {k. True}\n     else zero)", "by (metis (no_types))"], ["proof (state)\nthis:\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n         {k. True} +\n        aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n         {k. True}\n   else zero) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. f (k, l) + g (k, l)) {l. True})\n         {k. True}\n   else zero)\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (a, b) =\n       (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum\\<^sub>M (f \\<otimes> g))\n        (a, b)", "also"], ["proof (state)\nthis:\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n         {k. True} +\n        aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n         {k. True}\n   else zero) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. f (k, l) + g (k, l)) {l. True})\n         {k. True}\n   else zero)\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (a, b) =\n       (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum\\<^sub>M (f \\<otimes> g))\n        (a, b)", "have \"... = (if i = ?h \\<and> j = i then \\<Sum>\\<^sub>k \\<Sum>\\<^sub>l (f (k,l) \\<squnion> g (k,l)) + (f (k,l) \\<sqinter> g (k,l)) else zero)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k.\n               aggregation.sum_0 (\\<lambda>l. f (k, l) + g (k, l))\n                {l. True})\n           {k. True}\n     else zero) =\n    (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k.\n               aggregation.sum_0\n                (\\<lambda>l.\n                    f (k, l) \\<squnion> g (k, l) +\n                    f (k, l) \\<sqinter> g (k, l))\n                {l. True})\n           {k. True}\n     else zero)", "using add_lattice aggregation.sum_0.cong"], ["proof (prove)\nusing this:\n  ?x + ?y = ?x \\<squnion> ?y + ?x \\<sqinter> ?y\n  \\<lbrakk>?A = ?B;\n   \\<And>x. x \\<in> ?B \\<Longrightarrow> ?g x = ?h x\\<rbrakk>\n  \\<Longrightarrow> aggregation.sum_0 ?g ?A = aggregation.sum_0 ?h ?B\n\ngoal (1 subgoal):\n 1. (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k.\n               aggregation.sum_0 (\\<lambda>l. f (k, l) + g (k, l))\n                {l. True})\n           {k. True}\n     else zero) =\n    (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k.\n               aggregation.sum_0\n                (\\<lambda>l.\n                    f (k, l) \\<squnion> g (k, l) +\n                    f (k, l) \\<sqinter> g (k, l))\n                {l. True})\n           {k. True}\n     else zero)", "by (metis (no_types, lifting))"], ["proof (state)\nthis:\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. f (k, l) + g (k, l)) {l. True})\n         {k. True}\n   else zero) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0\n              (\\<lambda>l.\n                  f (k, l) \\<squnion> g (k, l) +\n                  f (k, l) \\<sqinter> g (k, l))\n              {l. True})\n         {k. True}\n   else zero)\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (a, b) =\n       (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum\\<^sub>M (f \\<otimes> g))\n        (a, b)", "also"], ["proof (state)\nthis:\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. f (k, l) + g (k, l)) {l. True})\n         {k. True}\n   else zero) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0\n              (\\<lambda>l.\n                  f (k, l) \\<squnion> g (k, l) +\n                  f (k, l) \\<sqinter> g (k, l))\n              {l. True})\n         {k. True}\n   else zero)\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (a, b) =\n       (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum\\<^sub>M (f \\<otimes> g))\n        (a, b)", "have \"... = (if i = ?h \\<and> j = i then \\<Sum>\\<^sub>k \\<Sum>\\<^sub>l (f \\<oplus> g) (k,l) + (f \\<otimes> g) (k,l) else zero)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k.\n               aggregation.sum_0\n                (\\<lambda>l.\n                    f (k, l) \\<squnion> g (k, l) +\n                    f (k, l) \\<sqinter> g (k, l))\n                {l. True})\n           {k. True}\n     else zero) =\n    (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k.\n               aggregation.sum_0\n                (\\<lambda>l. (f \\<oplus> g) (k, l) + (f \\<otimes> g) (k, l))\n                {l. True})\n           {k. True}\n     else zero)", "by (simp add: sup_matrix_def inf_matrix_def)"], ["proof (state)\nthis:\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0\n              (\\<lambda>l.\n                  f (k, l) \\<squnion> g (k, l) +\n                  f (k, l) \\<sqinter> g (k, l))\n              {l. True})\n         {k. True}\n   else zero) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0\n              (\\<lambda>l. (f \\<oplus> g) (k, l) + (f \\<otimes> g) (k, l))\n              {l. True})\n         {k. True}\n   else zero)\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (a, b) =\n       (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum\\<^sub>M (f \\<otimes> g))\n        (a, b)", "also"], ["proof (state)\nthis:\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0\n              (\\<lambda>l.\n                  f (k, l) \\<squnion> g (k, l) +\n                  f (k, l) \\<sqinter> g (k, l))\n              {l. True})\n         {k. True}\n   else zero) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0\n              (\\<lambda>l. (f \\<oplus> g) (k, l) + (f \\<otimes> g) (k, l))\n              {l. True})\n         {k. True}\n   else zero)\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (a, b) =\n       (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum\\<^sub>M (f \\<otimes> g))\n        (a, b)", "have \"... = (if i = ?h \\<and> j = i then (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l (f \\<oplus> g) (k,l)) + (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l (f \\<otimes> g) (k,l)) else zero)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k.\n               aggregation.sum_0\n                (\\<lambda>l. (f \\<oplus> g) (k, l) + (f \\<otimes> g) (k, l))\n                {l. True})\n           {k. True}\n     else zero) =\n    (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k.\n               aggregation.sum_0 (\\<lambda>l. (f \\<oplus> g) (k, l))\n                {l. True})\n           {k. True} +\n          aggregation.sum_0\n           (\\<lambda>k.\n               aggregation.sum_0 (\\<lambda>l. (f \\<otimes> g) (k, l))\n                {l. True})\n           {k. True}\n     else zero)", "using agg_sum_distrib_2"], ["proof (prove)\nusing this:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. ?f (k, l) + ?g (k, l)) {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. ?f (k, l)) {l. True})\n   {k. True} +\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. ?g (k, l)) {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k.\n               aggregation.sum_0\n                (\\<lambda>l. (f \\<oplus> g) (k, l) + (f \\<otimes> g) (k, l))\n                {l. True})\n           {k. True}\n     else zero) =\n    (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k.\n               aggregation.sum_0 (\\<lambda>l. (f \\<oplus> g) (k, l))\n                {l. True})\n           {k. True} +\n          aggregation.sum_0\n           (\\<lambda>k.\n               aggregation.sum_0 (\\<lambda>l. (f \\<otimes> g) (k, l))\n                {l. True})\n           {k. True}\n     else zero)", "by (metis (no_types))"], ["proof (state)\nthis:\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0\n              (\\<lambda>l. (f \\<oplus> g) (k, l) + (f \\<otimes> g) (k, l))\n              {l. True})\n         {k. True}\n   else zero) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. (f \\<oplus> g) (k, l))\n              {l. True})\n         {k. True} +\n        aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. (f \\<otimes> g) (k, l))\n              {l. True})\n         {k. True}\n   else zero)\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (a, b) =\n       (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum\\<^sub>M (f \\<otimes> g))\n        (a, b)", "also"], ["proof (state)\nthis:\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0\n              (\\<lambda>l. (f \\<oplus> g) (k, l) + (f \\<otimes> g) (k, l))\n              {l. True})\n         {k. True}\n   else zero) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. (f \\<oplus> g) (k, l))\n              {l. True})\n         {k. True} +\n        aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. (f \\<otimes> g) (k, l))\n              {l. True})\n         {k. True}\n   else zero)\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (a, b) =\n       (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum\\<^sub>M (f \\<otimes> g))\n        (a, b)", "have \"... = (if i = ?h \\<and> j = i then \\<Sum>\\<^sub>k \\<Sum>\\<^sub>l (f \\<oplus> g) (k,l) else zero) + (if i = ?h \\<and> j = i then \\<Sum>\\<^sub>k \\<Sum>\\<^sub>l (f \\<otimes> g) (k,l) else zero)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k.\n               aggregation.sum_0 (\\<lambda>l. (f \\<oplus> g) (k, l))\n                {l. True})\n           {k. True} +\n          aggregation.sum_0\n           (\\<lambda>k.\n               aggregation.sum_0 (\\<lambda>l. (f \\<otimes> g) (k, l))\n                {l. True})\n           {k. True}\n     else zero) =\n    (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k.\n               aggregation.sum_0 (\\<lambda>l. (f \\<oplus> g) (k, l))\n                {l. True})\n           {k. True}\n     else zero) +\n    (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k.\n               aggregation.sum_0 (\\<lambda>l. (f \\<otimes> g) (k, l))\n                {l. True})\n           {k. True}\n     else zero)", "by simp"], ["proof (state)\nthis:\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. (f \\<oplus> g) (k, l))\n              {l. True})\n         {k. True} +\n        aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. (f \\<otimes> g) (k, l))\n              {l. True})\n         {k. True}\n   else zero) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. (f \\<oplus> g) (k, l))\n              {l. True})\n         {k. True}\n   else zero) +\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. (f \\<otimes> g) (k, l))\n              {l. True})\n         {k. True}\n   else zero)\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (a, b) =\n       (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum\\<^sub>M (f \\<otimes> g))\n        (a, b)", "also"], ["proof (state)\nthis:\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. (f \\<oplus> g) (k, l))\n              {l. True})\n         {k. True} +\n        aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. (f \\<otimes> g) (k, l))\n              {l. True})\n         {k. True}\n   else zero) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. (f \\<oplus> g) (k, l))\n              {l. True})\n         {k. True}\n   else zero) +\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. (f \\<otimes> g) (k, l))\n              {l. True})\n         {k. True}\n   else zero)\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (a, b) =\n       (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum\\<^sub>M (f \\<otimes> g))\n        (a, b)", "have \"... = (sum\\<^sub>M (f \\<oplus> g)) (i,j) + (sum\\<^sub>M (f \\<otimes> g)) (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k.\n               aggregation.sum_0 (\\<lambda>l. (f \\<oplus> g) (k, l))\n                {l. True})\n           {k. True}\n     else zero) +\n    (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k.\n               aggregation.sum_0 (\\<lambda>l. (f \\<otimes> g) (k, l))\n                {l. True})\n           {k. True}\n     else zero) =\n    (sum\\<^sub>M (f \\<oplus> g)) (i, j) +\n    (sum\\<^sub>M (f \\<otimes> g)) (i, j)", "by (simp add: sum_matrix_def)"], ["proof (state)\nthis:\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. (f \\<oplus> g) (k, l))\n              {l. True})\n         {k. True}\n   else zero) +\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. (f \\<otimes> g) (k, l))\n              {l. True})\n         {k. True}\n   else zero) =\n  (sum\\<^sub>M (f \\<oplus> g)) (i, j) + (sum\\<^sub>M (f \\<otimes> g)) (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (a, b) =\n       (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum\\<^sub>M (f \\<otimes> g))\n        (a, b)", "also"], ["proof (state)\nthis:\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. (f \\<oplus> g) (k, l))\n              {l. True})\n         {k. True}\n   else zero) +\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. (f \\<otimes> g) (k, l))\n              {l. True})\n         {k. True}\n   else zero) =\n  (sum\\<^sub>M (f \\<oplus> g)) (i, j) + (sum\\<^sub>M (f \\<otimes> g)) (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (a, b) =\n       (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum\\<^sub>M (f \\<otimes> g))\n        (a, b)", "have \"... = (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M sum\\<^sub>M (f \\<otimes> g)) (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sum\\<^sub>M (f \\<oplus> g)) (i, j) +\n    (sum\\<^sub>M (f \\<otimes> g)) (i, j) =\n    (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n     sum\\<^sub>M (f \\<otimes> g))\n     (i, j)", "by (simp add: plus_matrix_def)"], ["proof (state)\nthis:\n  (sum\\<^sub>M (f \\<oplus> g)) (i, j) +\n  (sum\\<^sub>M (f \\<otimes> g)) (i, j) =\n  (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M sum\\<^sub>M (f \\<otimes> g))\n   (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (a, b) =\n       (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum\\<^sub>M (f \\<otimes> g))\n        (a, b)", "finally"], ["proof (chain)\npicking this:\n  (sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (i, j) =\n  (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M sum\\<^sub>M (f \\<otimes> g))\n   (i, j)", "show \"(sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (i,j) = (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M sum\\<^sub>M (f \\<otimes> g)) (i,j)\""], ["proof (prove)\nusing this:\n  (sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (i, j) =\n  (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M sum\\<^sub>M (f \\<otimes> g))\n   (i, j)\n\ngoal (1 subgoal):\n 1. (sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (i, j) =\n    (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n     sum\\<^sub>M (f \\<otimes> g))\n     (i, j)", "."], ["proof (state)\nthis:\n  (sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g) (i, j) =\n  (sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M sum\\<^sub>M (f \\<otimes> g))\n   (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sum\\<^sub>M f \\<oplus>\\<^sub>M sum\\<^sub>M g =\n  sum\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M sum\\<^sub>M (f \\<otimes> g)\n\ngoal (1 subgoal):\n 1. \\<And>x. sum\\<^sub>M x\\<^sup>t = sum\\<^sub>M x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. sum\\<^sub>M x\\<^sup>t = sum\\<^sub>M x", "fix f :: \"('a,'b) square\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. sum\\<^sub>M x\\<^sup>t = sum\\<^sub>M x", "show \"sum\\<^sub>M (f\\<^sup>t) = sum\\<^sub>M f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum\\<^sub>M f\\<^sup>t = sum\\<^sub>M f", "proof (rule ext, rule prod_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x a b. (sum\\<^sub>M f\\<^sup>t) (a, b) = (sum\\<^sub>M f) (a, b)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x a b. (sum\\<^sub>M f\\<^sup>t) (a, b) = (sum\\<^sub>M f) (a, b)", "let ?h = \"hd enum_class.enum\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x a b. (sum\\<^sub>M f\\<^sup>t) (a, b) = (sum\\<^sub>M f) (a, b)", "have \"(sum\\<^sub>M (f\\<^sup>t)) (i,j) = (if i = ?h \\<and> j = i then \\<Sum>\\<^sub>k \\<Sum>\\<^sub>l (f\\<^sup>t) (k,l) else zero)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sum\\<^sub>M f\\<^sup>t) (i, j) =\n    (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k.\n               aggregation.sum_0 (\\<lambda>l. (f\\<^sup>t) (k, l)) {l. True})\n           {k. True}\n     else zero)", "by (simp add: sum_matrix_def)"], ["proof (state)\nthis:\n  (sum\\<^sub>M f\\<^sup>t) (i, j) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. (f\\<^sup>t) (k, l)) {l. True})\n         {k. True}\n   else zero)\n\ngoal (1 subgoal):\n 1. \\<And>x a b. (sum\\<^sub>M f\\<^sup>t) (a, b) = (sum\\<^sub>M f) (a, b)", "also"], ["proof (state)\nthis:\n  (sum\\<^sub>M f\\<^sup>t) (i, j) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. (f\\<^sup>t) (k, l)) {l. True})\n         {k. True}\n   else zero)\n\ngoal (1 subgoal):\n 1. \\<And>x a b. (sum\\<^sub>M f\\<^sup>t) (a, b) = (sum\\<^sub>M f) (a, b)", "have \"... = (if i = ?h \\<and> j = i then \\<Sum>\\<^sub>k \\<Sum>\\<^sub>l (f (l,k))\\<^sup>T else zero)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k.\n               aggregation.sum_0 (\\<lambda>l. (f\\<^sup>t) (k, l)) {l. True})\n           {k. True}\n     else zero) =\n    (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k.\n               aggregation.sum_0 (\\<lambda>l. f (l, k)\\<^sup>T) {l. True})\n           {k. True}\n     else zero)", "by (simp add: conv_matrix_def)"], ["proof (state)\nthis:\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. (f\\<^sup>t) (k, l)) {l. True})\n         {k. True}\n   else zero) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. f (l, k)\\<^sup>T) {l. True})\n         {k. True}\n   else zero)\n\ngoal (1 subgoal):\n 1. \\<And>x a b. (sum\\<^sub>M f\\<^sup>t) (a, b) = (sum\\<^sub>M f) (a, b)", "also"], ["proof (state)\nthis:\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. (f\\<^sup>t) (k, l)) {l. True})\n         {k. True}\n   else zero) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. f (l, k)\\<^sup>T) {l. True})\n         {k. True}\n   else zero)\n\ngoal (1 subgoal):\n 1. \\<And>x a b. (sum\\<^sub>M f\\<^sup>t) (a, b) = (sum\\<^sub>M f) (a, b)", "have \"... = (if i = ?h \\<and> j = i then \\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (l,k) else zero)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k.\n               aggregation.sum_0 (\\<lambda>l. f (l, k)\\<^sup>T) {l. True})\n           {k. True}\n     else zero) =\n    (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (l, k)) {l. True})\n           {k. True}\n     else zero)", "by simp"], ["proof (state)\nthis:\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. f (l, k)\\<^sup>T) {l. True})\n         {k. True}\n   else zero) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (l, k)) {l. True})\n         {k. True}\n   else zero)\n\ngoal (1 subgoal):\n 1. \\<And>x a b. (sum\\<^sub>M f\\<^sup>t) (a, b) = (sum\\<^sub>M f) (a, b)", "also"], ["proof (state)\nthis:\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. f (l, k)\\<^sup>T) {l. True})\n         {k. True}\n   else zero) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (l, k)) {l. True})\n         {k. True}\n   else zero)\n\ngoal (1 subgoal):\n 1. \\<And>x a b. (sum\\<^sub>M f\\<^sup>t) (a, b) = (sum\\<^sub>M f) (a, b)", "have \"... = (if i = ?h \\<and> j = i then \\<Sum>\\<^sub>l \\<Sum>\\<^sub>k f (l,k) else zero)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (l, k)) {l. True})\n           {k. True}\n     else zero) =\n    (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>l. aggregation.sum_0 (\\<lambda>k. f (l, k)) {k. True})\n           {l. True}\n     else zero)", "by (metis agg_sum_commute)"], ["proof (state)\nthis:\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (l, k)) {l. True})\n         {k. True}\n   else zero) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>l. aggregation.sum_0 (\\<lambda>k. f (l, k)) {k. True})\n         {l. True}\n   else zero)\n\ngoal (1 subgoal):\n 1. \\<And>x a b. (sum\\<^sub>M f\\<^sup>t) (a, b) = (sum\\<^sub>M f) (a, b)", "also"], ["proof (state)\nthis:\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (l, k)) {l. True})\n         {k. True}\n   else zero) =\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>l. aggregation.sum_0 (\\<lambda>k. f (l, k)) {k. True})\n         {l. True}\n   else zero)\n\ngoal (1 subgoal):\n 1. \\<And>x a b. (sum\\<^sub>M f\\<^sup>t) (a, b) = (sum\\<^sub>M f) (a, b)", "have \"... = (sum\\<^sub>M f) (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i = hd enum_class.enum \\<and> j = i\n     then aggregation.sum_0\n           (\\<lambda>l. aggregation.sum_0 (\\<lambda>k. f (l, k)) {k. True})\n           {l. True}\n     else zero) =\n    (sum\\<^sub>M f) (i, j)", "by (simp add: sum_matrix_def)"], ["proof (state)\nthis:\n  (if i = hd enum_class.enum \\<and> j = i\n   then aggregation.sum_0\n         (\\<lambda>l. aggregation.sum_0 (\\<lambda>k. f (l, k)) {k. True})\n         {l. True}\n   else zero) =\n  (sum\\<^sub>M f) (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>x a b. (sum\\<^sub>M f\\<^sup>t) (a, b) = (sum\\<^sub>M f) (a, b)", "finally"], ["proof (chain)\npicking this:\n  (sum\\<^sub>M f\\<^sup>t) (i, j) = (sum\\<^sub>M f) (i, j)", "show \"(sum\\<^sub>M (f\\<^sup>t)) (i,j) = (sum\\<^sub>M f) (i,j)\""], ["proof (prove)\nusing this:\n  (sum\\<^sub>M f\\<^sup>t) (i, j) = (sum\\<^sub>M f) (i, j)\n\ngoal (1 subgoal):\n 1. (sum\\<^sub>M f\\<^sup>t) (i, j) = (sum\\<^sub>M f) (i, j)", "."], ["proof (state)\nthis:\n  (sum\\<^sub>M f\\<^sup>t) (i, j) = (sum\\<^sub>M f) (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sum\\<^sub>M f\\<^sup>t = sum\\<^sub>M f\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\nWe show the same for the alternative implementation that stores the result of aggregation in all elements of the matrix.\n\\<close>"], ["", "interpretation agg_square_s_algebra_2: s_algebra where sup = sup_matrix and inf = inf_matrix and less_eq = less_eq_matrix and less = less_matrix and bot = \"bot_matrix::('a::finite,'b::aggregation_algebra) square\" and top = top_matrix and uminus = uminus_matrix and one = one_matrix and times = times_matrix and conv = conv_matrix and plus = plus_matrix and sum = sum_matrix_2"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.s_algebra sum_matrix_2 (\\<oplus>\\<^sub>M) (\\<otimes>) (\\<preceq>)\n     (\\<prec>) (\\<oplus>) mbot mtop uminus_matrix mone (\\<odot>) conv_matrix", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       x \\<noteq> mbot \\<and>\n       sum2\\<^sub>M x \\<preceq> sum2\\<^sub>M y \\<longrightarrow>\n       sum2\\<^sub>M z \\<oplus>\\<^sub>M sum2\\<^sub>M x \\<preceq>\n       sum2\\<^sub>M z \\<oplus>\\<^sub>M sum2\\<^sub>M y\n 2. \\<And>x.\n       sum2\\<^sub>M x \\<oplus>\\<^sub>M sum2\\<^sub>M mbot = sum2\\<^sub>M x\n 3. \\<And>x y.\n       sum2\\<^sub>M x \\<oplus>\\<^sub>M sum2\\<^sub>M y =\n       sum2\\<^sub>M (x \\<oplus> y) \\<oplus>\\<^sub>M\n       sum2\\<^sub>M (x \\<otimes> y)\n 4. \\<And>x. sum2\\<^sub>M x\\<^sup>t = sum2\\<^sub>M x", "fix f g h :: \"('a,'b) square\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       x \\<noteq> mbot \\<and>\n       sum2\\<^sub>M x \\<preceq> sum2\\<^sub>M y \\<longrightarrow>\n       sum2\\<^sub>M z \\<oplus>\\<^sub>M sum2\\<^sub>M x \\<preceq>\n       sum2\\<^sub>M z \\<oplus>\\<^sub>M sum2\\<^sub>M y\n 2. \\<And>x.\n       sum2\\<^sub>M x \\<oplus>\\<^sub>M sum2\\<^sub>M mbot = sum2\\<^sub>M x\n 3. \\<And>x y.\n       sum2\\<^sub>M x \\<oplus>\\<^sub>M sum2\\<^sub>M y =\n       sum2\\<^sub>M (x \\<oplus> y) \\<oplus>\\<^sub>M\n       sum2\\<^sub>M (x \\<otimes> y)\n 4. \\<And>x. sum2\\<^sub>M x\\<^sup>t = sum2\\<^sub>M x", "show \"f \\<noteq> mbot \\<and> sum2\\<^sub>M f \\<preceq> sum2\\<^sub>M g \\<longrightarrow> h \\<oplus>\\<^sub>M sum2\\<^sub>M f \\<preceq> h \\<oplus>\\<^sub>M sum2\\<^sub>M g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<and>\n    sum2\\<^sub>M f \\<preceq> sum2\\<^sub>M g \\<longrightarrow>\n    h \\<oplus>\\<^sub>M sum2\\<^sub>M f \\<preceq>\n    h \\<oplus>\\<^sub>M sum2\\<^sub>M g", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<and>\n    sum2\\<^sub>M f \\<preceq> sum2\\<^sub>M g \\<Longrightarrow>\n    h \\<oplus>\\<^sub>M sum2\\<^sub>M f \\<preceq>\n    h \\<oplus>\\<^sub>M sum2\\<^sub>M g", "assume 1: \"f \\<noteq> mbot \\<and> sum2\\<^sub>M f \\<preceq> sum2\\<^sub>M g\""], ["proof (state)\nthis:\n  f \\<noteq> mbot \\<and> sum2\\<^sub>M f \\<preceq> sum2\\<^sub>M g\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<and>\n    sum2\\<^sub>M f \\<preceq> sum2\\<^sub>M g \\<Longrightarrow>\n    h \\<oplus>\\<^sub>M sum2\\<^sub>M f \\<preceq>\n    h \\<oplus>\\<^sub>M sum2\\<^sub>M g", "hence \"\\<exists>k l . f (k,l) \\<noteq> bot\""], ["proof (prove)\nusing this:\n  f \\<noteq> mbot \\<and> sum2\\<^sub>M f \\<preceq> sum2\\<^sub>M g\n\ngoal (1 subgoal):\n 1. \\<exists>k l. f (k, l) \\<noteq> bot", "by (meson agg_matrix_bot)"], ["proof (state)\nthis:\n  \\<exists>k l. f (k, l) \\<noteq> bot\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<and>\n    sum2\\<^sub>M f \\<preceq> sum2\\<^sub>M g \\<Longrightarrow>\n    h \\<oplus>\\<^sub>M sum2\\<^sub>M f \\<preceq>\n    h \\<oplus>\\<^sub>M sum2\\<^sub>M g", "hence 2: \"(\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l)) \\<noteq> bot\""], ["proof (prove)\nusing this:\n  \\<exists>k l. f (k, l) \\<noteq> bot\n\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True} \\<noteq>\n    bot", "using agg_sum_not_bot"], ["proof (prove)\nusing this:\n  \\<exists>k l. f (k, l) \\<noteq> bot\n  ?f (?i, ?j) \\<noteq> bot \\<Longrightarrow>\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. ?f (k, l)) {l. True})\n   {k. True} \\<noteq>\n  bot\n\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True} \\<noteq>\n    bot", "by blast"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True} \\<noteq>\n  bot\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<and>\n    sum2\\<^sub>M f \\<preceq> sum2\\<^sub>M g \\<Longrightarrow>\n    h \\<oplus>\\<^sub>M sum2\\<^sub>M f \\<preceq>\n    h \\<oplus>\\<^sub>M sum2\\<^sub>M g", "obtain c :: 'a where True"], ["proof (prove)\ngoal (1 subgoal):\n 1. (True \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by simp"], ["proof (state)\nthis:\n  True\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<and>\n    sum2\\<^sub>M f \\<preceq> sum2\\<^sub>M g \\<Longrightarrow>\n    h \\<oplus>\\<^sub>M sum2\\<^sub>M f \\<preceq>\n    h \\<oplus>\\<^sub>M sum2\\<^sub>M g", "have \"(\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l)) = (sum2\\<^sub>M f) (c,c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True} =\n    (sum2\\<^sub>M f) (c, c)", "by (simp add: sum_matrix_2_def)"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True} =\n  (sum2\\<^sub>M f) (c, c)\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<and>\n    sum2\\<^sub>M f \\<preceq> sum2\\<^sub>M g \\<Longrightarrow>\n    h \\<oplus>\\<^sub>M sum2\\<^sub>M f \\<preceq>\n    h \\<oplus>\\<^sub>M sum2\\<^sub>M g", "also"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True} =\n  (sum2\\<^sub>M f) (c, c)\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<and>\n    sum2\\<^sub>M f \\<preceq> sum2\\<^sub>M g \\<Longrightarrow>\n    h \\<oplus>\\<^sub>M sum2\\<^sub>M f \\<preceq>\n    h \\<oplus>\\<^sub>M sum2\\<^sub>M g", "have \"... \\<le> (sum2\\<^sub>M g) (c,c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sum2\\<^sub>M f) (c, c) \\<le> (sum2\\<^sub>M g) (c, c)", "using 1"], ["proof (prove)\nusing this:\n  f \\<noteq> mbot \\<and> sum2\\<^sub>M f \\<preceq> sum2\\<^sub>M g\n\ngoal (1 subgoal):\n 1. (sum2\\<^sub>M f) (c, c) \\<le> (sum2\\<^sub>M g) (c, c)", "by (simp add: less_eq_matrix_def)"], ["proof (state)\nthis:\n  (sum2\\<^sub>M f) (c, c) \\<le> (sum2\\<^sub>M g) (c, c)\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<and>\n    sum2\\<^sub>M f \\<preceq> sum2\\<^sub>M g \\<Longrightarrow>\n    h \\<oplus>\\<^sub>M sum2\\<^sub>M f \\<preceq>\n    h \\<oplus>\\<^sub>M sum2\\<^sub>M g", "also"], ["proof (state)\nthis:\n  (sum2\\<^sub>M f) (c, c) \\<le> (sum2\\<^sub>M g) (c, c)\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<and>\n    sum2\\<^sub>M f \\<preceq> sum2\\<^sub>M g \\<Longrightarrow>\n    h \\<oplus>\\<^sub>M sum2\\<^sub>M f \\<preceq>\n    h \\<oplus>\\<^sub>M sum2\\<^sub>M g", "have \"... = (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l g (k,l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sum2\\<^sub>M g) (c, c) =\n    aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n     {k. True}", "by (simp add: sum_matrix_2_def)"], ["proof (state)\nthis:\n  (sum2\\<^sub>M g) (c, c) =\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<and>\n    sum2\\<^sub>M f \\<preceq> sum2\\<^sub>M g \\<Longrightarrow>\n    h \\<oplus>\\<^sub>M sum2\\<^sub>M f \\<preceq>\n    h \\<oplus>\\<^sub>M sum2\\<^sub>M g", "finally"], ["proof (chain)\npicking this:\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True}\n  \\<le> aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n         {k. True}", "have \"(\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l)) \\<le> (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l g (k,l))\""], ["proof (prove)\nusing this:\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True}\n  \\<le> aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n         {k. True}\n\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True}\n    \\<le> aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n           {k. True}", "by simp"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True}\n  \\<le> aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n         {k. True}\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<and>\n    sum2\\<^sub>M f \\<preceq> sum2\\<^sub>M g \\<Longrightarrow>\n    h \\<oplus>\\<^sub>M sum2\\<^sub>M f \\<preceq>\n    h \\<oplus>\\<^sub>M sum2\\<^sub>M g", "hence 3: \"(\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l)) + bot \\<le> (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l g (k,l)) + bot\""], ["proof (prove)\nusing this:\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True}\n  \\<le> aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n         {k. True}\n\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True} +\n    bot\n    \\<le> aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n           {k. True} +\n          bot", "by (metis (no_types, lifting) add_add_bot aggregation.sum_0.F_one)"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True} +\n  bot\n  \\<le> aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n         {k. True} +\n        bot\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<and>\n    sum2\\<^sub>M f \\<preceq> sum2\\<^sub>M g \\<Longrightarrow>\n    h \\<oplus>\\<^sub>M sum2\\<^sub>M f \\<preceq>\n    h \\<oplus>\\<^sub>M sum2\\<^sub>M g", "show \"h \\<oplus>\\<^sub>M sum2\\<^sub>M f \\<preceq> h \\<oplus>\\<^sub>M sum2\\<^sub>M g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h \\<oplus>\\<^sub>M sum2\\<^sub>M f \\<preceq>\n    h \\<oplus>\\<^sub>M sum2\\<^sub>M g", "proof (unfold less_eq_matrix_def, rule allI, unfold plus_matrix_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e. h e + (sum2\\<^sub>M f) e \\<le> h e + (sum2\\<^sub>M g) e", "fix e"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e. h e + (sum2\\<^sub>M f) e \\<le> h e + (sum2\\<^sub>M g) e", "have \"h e + (sum2\\<^sub>M f) e = h e + (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h e + (sum2\\<^sub>M f) e =\n    h e +\n    aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True}", "by (simp add: sum_matrix_2_def)"], ["proof (state)\nthis:\n  h e + (sum2\\<^sub>M f) e =\n  h e +\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>e. h e + (sum2\\<^sub>M f) e \\<le> h e + (sum2\\<^sub>M g) e", "also"], ["proof (state)\nthis:\n  h e + (sum2\\<^sub>M f) e =\n  h e +\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>e. h e + (sum2\\<^sub>M f) e \\<le> h e + (sum2\\<^sub>M g) e", "have \"... \\<le> h e + (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l g (k,l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h e +\n    aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True}\n    \\<le> h e +\n          aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n           {k. True}", "using 2 3"], ["proof (prove)\nusing this:\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True} \\<noteq>\n  bot\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True} +\n  bot\n  \\<le> aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n         {k. True} +\n        bot\n\ngoal (1 subgoal):\n 1. h e +\n    aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True}\n    \\<le> h e +\n          aggregation.sum_0\n           (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n           {k. True}", "by (metis (no_types, lifting) add_right_isotone add.commute)"], ["proof (state)\nthis:\n  h e +\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True}\n  \\<le> h e +\n        aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n         {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>e. h e + (sum2\\<^sub>M f) e \\<le> h e + (sum2\\<^sub>M g) e", "finally"], ["proof (chain)\npicking this:\n  h e + (sum2\\<^sub>M f) e\n  \\<le> h e +\n        aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n         {k. True}", "show \"h e + (sum2\\<^sub>M f) e \\<le> h e + (sum2\\<^sub>M g) e\""], ["proof (prove)\nusing this:\n  h e + (sum2\\<^sub>M f) e\n  \\<le> h e +\n        aggregation.sum_0\n         (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n         {k. True}\n\ngoal (1 subgoal):\n 1. h e + (sum2\\<^sub>M f) e \\<le> h e + (sum2\\<^sub>M g) e", "by (simp add: sum_matrix_2_def)"], ["proof (state)\nthis:\n  h e + (sum2\\<^sub>M f) e \\<le> h e + (sum2\\<^sub>M g) e\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  h \\<oplus>\\<^sub>M sum2\\<^sub>M f \\<preceq>\n  h \\<oplus>\\<^sub>M sum2\\<^sub>M g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f \\<noteq> mbot \\<and>\n  sum2\\<^sub>M f \\<preceq> sum2\\<^sub>M g \\<longrightarrow>\n  h \\<oplus>\\<^sub>M sum2\\<^sub>M f \\<preceq>\n  h \\<oplus>\\<^sub>M sum2\\<^sub>M g\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       sum2\\<^sub>M x \\<oplus>\\<^sub>M sum2\\<^sub>M mbot = sum2\\<^sub>M x\n 2. \\<And>x y.\n       sum2\\<^sub>M x \\<oplus>\\<^sub>M sum2\\<^sub>M y =\n       sum2\\<^sub>M (x \\<oplus> y) \\<oplus>\\<^sub>M\n       sum2\\<^sub>M (x \\<otimes> y)\n 3. \\<And>x. sum2\\<^sub>M x\\<^sup>t = sum2\\<^sub>M x", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x.\n       sum2\\<^sub>M x \\<oplus>\\<^sub>M sum2\\<^sub>M mbot = sum2\\<^sub>M x\n 2. \\<And>x y.\n       sum2\\<^sub>M x \\<oplus>\\<^sub>M sum2\\<^sub>M y =\n       sum2\\<^sub>M (x \\<oplus> y) \\<oplus>\\<^sub>M\n       sum2\\<^sub>M (x \\<otimes> y)\n 3. \\<And>x. sum2\\<^sub>M x\\<^sup>t = sum2\\<^sub>M x", "fix f :: \"('a,'b) square\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x.\n       sum2\\<^sub>M x \\<oplus>\\<^sub>M sum2\\<^sub>M mbot = sum2\\<^sub>M x\n 2. \\<And>x y.\n       sum2\\<^sub>M x \\<oplus>\\<^sub>M sum2\\<^sub>M y =\n       sum2\\<^sub>M (x \\<oplus> y) \\<oplus>\\<^sub>M\n       sum2\\<^sub>M (x \\<otimes> y)\n 3. \\<And>x. sum2\\<^sub>M x\\<^sup>t = sum2\\<^sub>M x", "show \"sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M mbot = sum2\\<^sub>M f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M mbot = sum2\\<^sub>M f", "by (simp add: sum_bot_2 sum_plus_zero_2)"], ["proof (state)\nthis:\n  sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M mbot = sum2\\<^sub>M f\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       sum2\\<^sub>M x \\<oplus>\\<^sub>M sum2\\<^sub>M y =\n       sum2\\<^sub>M (x \\<oplus> y) \\<oplus>\\<^sub>M\n       sum2\\<^sub>M (x \\<otimes> y)\n 2. \\<And>x. sum2\\<^sub>M x\\<^sup>t = sum2\\<^sub>M x", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       sum2\\<^sub>M x \\<oplus>\\<^sub>M sum2\\<^sub>M y =\n       sum2\\<^sub>M (x \\<oplus> y) \\<oplus>\\<^sub>M\n       sum2\\<^sub>M (x \\<otimes> y)\n 2. \\<And>x. sum2\\<^sub>M x\\<^sup>t = sum2\\<^sub>M x", "fix f g :: \"('a,'b) square\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       sum2\\<^sub>M x \\<oplus>\\<^sub>M sum2\\<^sub>M y =\n       sum2\\<^sub>M (x \\<oplus> y) \\<oplus>\\<^sub>M\n       sum2\\<^sub>M (x \\<otimes> y)\n 2. \\<And>x. sum2\\<^sub>M x\\<^sup>t = sum2\\<^sub>M x", "show \"sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M g = sum2\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M sum2\\<^sub>M (f \\<otimes> g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M g =\n    sum2\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n    sum2\\<^sub>M (f \\<otimes> g)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M g) x =\n       (sum2\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum2\\<^sub>M (f \\<otimes> g))\n        x", "fix e"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M g) x =\n       (sum2\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum2\\<^sub>M (f \\<otimes> g))\n        x", "have \"(sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M g) e = (sum2\\<^sub>M f) e + (sum2\\<^sub>M g) e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M g) e =\n    (sum2\\<^sub>M f) e + (sum2\\<^sub>M g) e", "by (simp add: plus_matrix_def)"], ["proof (state)\nthis:\n  (sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M g) e =\n  (sum2\\<^sub>M f) e + (sum2\\<^sub>M g) e\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M g) x =\n       (sum2\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum2\\<^sub>M (f \\<otimes> g))\n        x", "also"], ["proof (state)\nthis:\n  (sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M g) e =\n  (sum2\\<^sub>M f) e + (sum2\\<^sub>M g) e\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M g) x =\n       (sum2\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum2\\<^sub>M (f \\<otimes> g))\n        x", "have \"... = (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l)) + (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l g (k,l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sum2\\<^sub>M f) e + (sum2\\<^sub>M g) e =\n    aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True} +\n    aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n     {k. True}", "by (simp add: sum_matrix_2_def)"], ["proof (state)\nthis:\n  (sum2\\<^sub>M f) e + (sum2\\<^sub>M g) e =\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True} +\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M g) x =\n       (sum2\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum2\\<^sub>M (f \\<otimes> g))\n        x", "also"], ["proof (state)\nthis:\n  (sum2\\<^sub>M f) e + (sum2\\<^sub>M g) e =\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True} +\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M g) x =\n       (sum2\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum2\\<^sub>M (f \\<otimes> g))\n        x", "have \"... = (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (k,l) + g (k,l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True} +\n    aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n     {k. True} =\n    aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0 (\\<lambda>l. f (k, l) + g (k, l)) {l. True})\n     {k. True}", "using agg_sum_distrib_2"], ["proof (prove)\nusing this:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. ?f (k, l) + ?g (k, l)) {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. ?f (k, l)) {l. True})\n   {k. True} +\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. ?g (k, l)) {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n     {k. True} +\n    aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n     {k. True} =\n    aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0 (\\<lambda>l. f (k, l) + g (k, l)) {l. True})\n     {k. True}", "by (metis (no_types))"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True} +\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. f (k, l) + g (k, l)) {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M g) x =\n       (sum2\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum2\\<^sub>M (f \\<otimes> g))\n        x", "also"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (k, l)) {l. True})\n   {k. True} +\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. g (k, l)) {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. f (k, l) + g (k, l)) {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M g) x =\n       (sum2\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum2\\<^sub>M (f \\<otimes> g))\n        x", "have \"... = (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l (f (k,l) \\<squnion> g (k,l)) + (f (k,l) \\<sqinter> g (k,l)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0 (\\<lambda>l. f (k, l) + g (k, l)) {l. True})\n     {k. True} =\n    aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0\n          (\\<lambda>l.\n              f (k, l) \\<squnion> g (k, l) + f (k, l) \\<sqinter> g (k, l))\n          {l. True})\n     {k. True}", "using add_lattice aggregation.sum_0.cong"], ["proof (prove)\nusing this:\n  ?x + ?y = ?x \\<squnion> ?y + ?x \\<sqinter> ?y\n  \\<lbrakk>?A = ?B;\n   \\<And>x. x \\<in> ?B \\<Longrightarrow> ?g x = ?h x\\<rbrakk>\n  \\<Longrightarrow> aggregation.sum_0 ?g ?A = aggregation.sum_0 ?h ?B\n\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0 (\\<lambda>l. f (k, l) + g (k, l)) {l. True})\n     {k. True} =\n    aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0\n          (\\<lambda>l.\n              f (k, l) \\<squnion> g (k, l) + f (k, l) \\<sqinter> g (k, l))\n          {l. True})\n     {k. True}", "by (metis (no_types, lifting))"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. f (k, l) + g (k, l)) {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l.\n            f (k, l) \\<squnion> g (k, l) + f (k, l) \\<sqinter> g (k, l))\n        {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M g) x =\n       (sum2\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum2\\<^sub>M (f \\<otimes> g))\n        x", "also"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. f (k, l) + g (k, l)) {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l.\n            f (k, l) \\<squnion> g (k, l) + f (k, l) \\<sqinter> g (k, l))\n        {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M g) x =\n       (sum2\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum2\\<^sub>M (f \\<otimes> g))\n        x", "have \"... = (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l (f \\<oplus> g) (k,l) + (f \\<otimes> g) (k,l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0\n          (\\<lambda>l.\n              f (k, l) \\<squnion> g (k, l) + f (k, l) \\<sqinter> g (k, l))\n          {l. True})\n     {k. True} =\n    aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0\n          (\\<lambda>l. (f \\<oplus> g) (k, l) + (f \\<otimes> g) (k, l))\n          {l. True})\n     {k. True}", "by (simp add: sup_matrix_def inf_matrix_def)"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l.\n            f (k, l) \\<squnion> g (k, l) + f (k, l) \\<sqinter> g (k, l))\n        {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l. (f \\<oplus> g) (k, l) + (f \\<otimes> g) (k, l))\n        {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M g) x =\n       (sum2\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum2\\<^sub>M (f \\<otimes> g))\n        x", "also"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l.\n            f (k, l) \\<squnion> g (k, l) + f (k, l) \\<sqinter> g (k, l))\n        {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l. (f \\<oplus> g) (k, l) + (f \\<otimes> g) (k, l))\n        {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M g) x =\n       (sum2\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum2\\<^sub>M (f \\<otimes> g))\n        x", "have \"... = (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l (f \\<oplus> g) (k,l)) + (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l (f \\<otimes> g) (k,l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0\n          (\\<lambda>l. (f \\<oplus> g) (k, l) + (f \\<otimes> g) (k, l))\n          {l. True})\n     {k. True} =\n    aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0 (\\<lambda>l. (f \\<oplus> g) (k, l)) {l. True})\n     {k. True} +\n    aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0 (\\<lambda>l. (f \\<otimes> g) (k, l)) {l. True})\n     {k. True}", "using agg_sum_distrib_2"], ["proof (prove)\nusing this:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. ?f (k, l) + ?g (k, l)) {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. ?f (k, l)) {l. True})\n   {k. True} +\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. ?g (k, l)) {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0\n          (\\<lambda>l. (f \\<oplus> g) (k, l) + (f \\<otimes> g) (k, l))\n          {l. True})\n     {k. True} =\n    aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0 (\\<lambda>l. (f \\<oplus> g) (k, l)) {l. True})\n     {k. True} +\n    aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0 (\\<lambda>l. (f \\<otimes> g) (k, l)) {l. True})\n     {k. True}", "by (metis (no_types))"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l. (f \\<oplus> g) (k, l) + (f \\<otimes> g) (k, l))\n        {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. (f \\<oplus> g) (k, l)) {l. True})\n   {k. True} +\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. (f \\<otimes> g) (k, l)) {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M g) x =\n       (sum2\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum2\\<^sub>M (f \\<otimes> g))\n        x", "also"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l. (f \\<oplus> g) (k, l) + (f \\<otimes> g) (k, l))\n        {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. (f \\<oplus> g) (k, l)) {l. True})\n   {k. True} +\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. (f \\<otimes> g) (k, l)) {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M g) x =\n       (sum2\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum2\\<^sub>M (f \\<otimes> g))\n        x", "have \"... = (sum2\\<^sub>M (f \\<oplus> g)) e + (sum2\\<^sub>M (f \\<otimes> g)) e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0 (\\<lambda>l. (f \\<oplus> g) (k, l)) {l. True})\n     {k. True} +\n    aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0 (\\<lambda>l. (f \\<otimes> g) (k, l)) {l. True})\n     {k. True} =\n    (sum2\\<^sub>M (f \\<oplus> g)) e + (sum2\\<^sub>M (f \\<otimes> g)) e", "by (simp add: sum_matrix_2_def)"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. (f \\<oplus> g) (k, l)) {l. True})\n   {k. True} +\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. (f \\<otimes> g) (k, l)) {l. True})\n   {k. True} =\n  (sum2\\<^sub>M (f \\<oplus> g)) e + (sum2\\<^sub>M (f \\<otimes> g)) e\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M g) x =\n       (sum2\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum2\\<^sub>M (f \\<otimes> g))\n        x", "also"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. (f \\<oplus> g) (k, l)) {l. True})\n   {k. True} +\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. (f \\<otimes> g) (k, l)) {l. True})\n   {k. True} =\n  (sum2\\<^sub>M (f \\<oplus> g)) e + (sum2\\<^sub>M (f \\<otimes> g)) e\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M g) x =\n       (sum2\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum2\\<^sub>M (f \\<otimes> g))\n        x", "have \"... = (sum2\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M sum2\\<^sub>M (f \\<otimes> g)) e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sum2\\<^sub>M (f \\<oplus> g)) e + (sum2\\<^sub>M (f \\<otimes> g)) e =\n    (sum2\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n     sum2\\<^sub>M (f \\<otimes> g))\n     e", "by (simp add: plus_matrix_def)"], ["proof (state)\nthis:\n  (sum2\\<^sub>M (f \\<oplus> g)) e + (sum2\\<^sub>M (f \\<otimes> g)) e =\n  (sum2\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n   sum2\\<^sub>M (f \\<otimes> g))\n   e\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M g) x =\n       (sum2\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n        sum2\\<^sub>M (f \\<otimes> g))\n        x", "finally"], ["proof (chain)\npicking this:\n  (sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M g) e =\n  (sum2\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n   sum2\\<^sub>M (f \\<otimes> g))\n   e", "show \"(sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M g) e = (sum2\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M sum2\\<^sub>M (f \\<otimes> g)) e\""], ["proof (prove)\nusing this:\n  (sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M g) e =\n  (sum2\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n   sum2\\<^sub>M (f \\<otimes> g))\n   e\n\ngoal (1 subgoal):\n 1. (sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M g) e =\n    (sum2\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n     sum2\\<^sub>M (f \\<otimes> g))\n     e", "."], ["proof (state)\nthis:\n  (sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M g) e =\n  (sum2\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M\n   sum2\\<^sub>M (f \\<otimes> g))\n   e\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sum2\\<^sub>M f \\<oplus>\\<^sub>M sum2\\<^sub>M g =\n  sum2\\<^sub>M (f \\<oplus> g) \\<oplus>\\<^sub>M sum2\\<^sub>M (f \\<otimes> g)\n\ngoal (1 subgoal):\n 1. \\<And>x. sum2\\<^sub>M x\\<^sup>t = sum2\\<^sub>M x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. sum2\\<^sub>M x\\<^sup>t = sum2\\<^sub>M x", "fix f :: \"('a,'b) square\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. sum2\\<^sub>M x\\<^sup>t = sum2\\<^sub>M x", "show \"sum2\\<^sub>M (f\\<^sup>t) = sum2\\<^sub>M f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum2\\<^sub>M f\\<^sup>t = sum2\\<^sub>M f", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. (sum2\\<^sub>M f\\<^sup>t) x = (sum2\\<^sub>M f) x", "fix e"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. (sum2\\<^sub>M f\\<^sup>t) x = (sum2\\<^sub>M f) x", "have \"(sum2\\<^sub>M (f\\<^sup>t)) e = (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l (f\\<^sup>t) (k,l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sum2\\<^sub>M f\\<^sup>t) e =\n    aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0 (\\<lambda>l. (f\\<^sup>t) (k, l)) {l. True})\n     {k. True}", "by (simp add: sum_matrix_2_def)"], ["proof (state)\nthis:\n  (sum2\\<^sub>M f\\<^sup>t) e =\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. (f\\<^sup>t) (k, l)) {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>x. (sum2\\<^sub>M f\\<^sup>t) x = (sum2\\<^sub>M f) x", "also"], ["proof (state)\nthis:\n  (sum2\\<^sub>M f\\<^sup>t) e =\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. (f\\<^sup>t) (k, l)) {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>x. (sum2\\<^sub>M f\\<^sup>t) x = (sum2\\<^sub>M f) x", "have \"... = (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l (f (l,k))\\<^sup>T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0 (\\<lambda>l. (f\\<^sup>t) (k, l)) {l. True})\n     {k. True} =\n    aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0 (\\<lambda>l. f (l, k)\\<^sup>T) {l. True})\n     {k. True}", "by (simp add: conv_matrix_def)"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. (f\\<^sup>t) (k, l)) {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (l, k)\\<^sup>T) {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>x. (sum2\\<^sub>M f\\<^sup>t) x = (sum2\\<^sub>M f) x", "also"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. (f\\<^sup>t) (k, l)) {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (l, k)\\<^sup>T) {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>x. (sum2\\<^sub>M f\\<^sup>t) x = (sum2\\<^sub>M f) x", "have \"... = (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l f (l,k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0 (\\<lambda>l. f (l, k)\\<^sup>T) {l. True})\n     {k. True} =\n    aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (l, k)) {l. True})\n     {k. True}", "by simp"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (l, k)\\<^sup>T) {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (l, k)) {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>x. (sum2\\<^sub>M f\\<^sup>t) x = (sum2\\<^sub>M f) x", "also"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (l, k)\\<^sup>T) {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (l, k)) {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>x. (sum2\\<^sub>M f\\<^sup>t) x = (sum2\\<^sub>M f) x", "have \"... = (\\<Sum>\\<^sub>l \\<Sum>\\<^sub>k f (l,k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (l, k)) {l. True})\n     {k. True} =\n    aggregation.sum_0\n     (\\<lambda>l. aggregation.sum_0 (\\<lambda>k. f (l, k)) {k. True})\n     {l. True}", "by (metis agg_sum_commute)"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (l, k)) {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>l. aggregation.sum_0 (\\<lambda>k. f (l, k)) {k. True})\n   {l. True}\n\ngoal (1 subgoal):\n 1. \\<And>x. (sum2\\<^sub>M f\\<^sup>t) x = (sum2\\<^sub>M f) x", "also"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k. aggregation.sum_0 (\\<lambda>l. f (l, k)) {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>l. aggregation.sum_0 (\\<lambda>k. f (l, k)) {k. True})\n   {l. True}\n\ngoal (1 subgoal):\n 1. \\<And>x. (sum2\\<^sub>M f\\<^sup>t) x = (sum2\\<^sub>M f) x", "have \"... = (sum2\\<^sub>M f) e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>l. aggregation.sum_0 (\\<lambda>k. f (l, k)) {k. True})\n     {l. True} =\n    (sum2\\<^sub>M f) e", "by (simp add: sum_matrix_2_def)"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>l. aggregation.sum_0 (\\<lambda>k. f (l, k)) {k. True})\n   {l. True} =\n  (sum2\\<^sub>M f) e\n\ngoal (1 subgoal):\n 1. \\<And>x. (sum2\\<^sub>M f\\<^sup>t) x = (sum2\\<^sub>M f) x", "finally"], ["proof (chain)\npicking this:\n  (sum2\\<^sub>M f\\<^sup>t) e = (sum2\\<^sub>M f) e", "show \"(sum2\\<^sub>M (f\\<^sup>t)) e = (sum2\\<^sub>M f) e\""], ["proof (prove)\nusing this:\n  (sum2\\<^sub>M f\\<^sup>t) e = (sum2\\<^sub>M f) e\n\ngoal (1 subgoal):\n 1. (sum2\\<^sub>M f\\<^sup>t) e = (sum2\\<^sub>M f) e", "."], ["proof (state)\nthis:\n  (sum2\\<^sub>M f\\<^sup>t) e = (sum2\\<^sub>M f) e\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sum2\\<^sub>M f\\<^sup>t = sum2\\<^sub>M f\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Matrix Minimisation\\<close>"], ["", "text \\<open>\nWe construct an operation that finds the minimum entry of a matrix.\nBecause a matrix can have several entries with the same minimum value, we introduce a lexicographic order on the indices to make the operation deterministic.\nThe order is obtained by enumerating the universe of the index.\n\\<close>"], ["", "primrec enum_pos' :: \"'a list \\<Rightarrow> 'a::enum \\<Rightarrow> nat\" where\n  \"enum_pos' Nil x = 0\"\n| \"enum_pos' (y#ys) x = (if x = y then 0 else 1 + enum_pos' ys x)\""], ["", "lemma enum_pos'_inverse:\n  \"List.member xs x \\<Longrightarrow> xs!(enum_pos' xs x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. List.member xs x \\<Longrightarrow> xs ! enum_pos' xs x = x", "apply (induct xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. List.member [] x \\<Longrightarrow> [] ! enum_pos' [] x = x\n 2. \\<And>a xs.\n       \\<lbrakk>List.member xs x \\<Longrightarrow> xs ! enum_pos' xs x = x;\n        List.member (a # xs) x\\<rbrakk>\n       \\<Longrightarrow> (a # xs) ! enum_pos' (a # xs) x = x", "apply (simp add: member_rec(2))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>List.member xs x \\<Longrightarrow> xs ! enum_pos' xs x = x;\n        List.member (a # xs) x\\<rbrakk>\n       \\<Longrightarrow> (a # xs) ! enum_pos' (a # xs) x = x", "by (metis diff_add_inverse enum_pos'.simps(2) less_one member_rec(1) not_add_less1 nth_Cons')"], ["", "text \\<open>\nThe following function finds the position of an index in the enumerated universe.\n\\<close>"], ["", "fun enum_pos :: \"'a::enum \\<Rightarrow> nat\" where \"enum_pos x = enum_pos' (enum_class.enum::'a list) x\""], ["", "lemma enum_pos_inverse [simp]:\n  \"enum_class.enum!(enum_pos x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enum_class.enum ! enum_pos x = x", "apply (unfold enum_pos.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. enum_class.enum ! enum_pos' enum_class.enum x = x", "apply (rule enum_pos'_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. List.member enum_class.enum x", "by (metis in_enum List.member_def)"], ["", "lemma enum_pos_injective [simp]:\n  \"enum_pos x = enum_pos y \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enum_pos x = enum_pos y \\<Longrightarrow> x = y", "by (metis enum_pos_inverse)"], ["", "text \\<open>\nThe position in the enumerated universe determines the order.\n\\<close>"], ["", "abbreviation enum_pos_less_eq :: \"'a::enum \\<Rightarrow> 'a \\<Rightarrow> bool\" where \"enum_pos_less_eq x y \\<equiv> (enum_pos x \\<le> enum_pos y)\""], ["", "abbreviation enum_pos_less :: \"'a::enum \\<Rightarrow> 'a \\<Rightarrow> bool\" where \"enum_pos_less x y \\<equiv> (enum_pos x < enum_pos y)\""], ["", "sublocale enum < enum_order: order where less_eq = \"\\<lambda>x y . enum_pos_less_eq x y\" and less = \"\\<lambda>x y . enum_pos x < enum_pos y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.order enum_pos_less_eq enum_pos_less", "apply unfold_locales"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y.\n       enum_pos_less x y =\n       (enum_pos_less_eq x y \\<and> \\<not> enum_pos_less_eq y x)\n 2. \\<And>x. enum_pos_less_eq x x\n 3. \\<And>x y z.\n       \\<lbrakk>enum_pos_less_eq x y; enum_pos_less_eq y z\\<rbrakk>\n       \\<Longrightarrow> enum_pos_less_eq x z\n 4. \\<And>x y.\n       \\<lbrakk>enum_pos_less_eq x y; enum_pos_less_eq y x\\<rbrakk>\n       \\<Longrightarrow> x = y", "by auto"], ["", "text \\<open>\nBased on this, a lexicographic order is defined on pairs, which represent locations in a matrix.\n\\<close>"], ["", "abbreviation enum_lex_less :: \"'a::enum \\<times> 'a \\<Rightarrow> 'a \\<times> 'a \\<Rightarrow> bool\" where \"enum_lex_less \\<equiv> (\\<lambda>(i,j) (k,l) . enum_pos_less i k \\<or> (i = k \\<and> enum_pos_less j l))\""], ["", "abbreviation enum_lex_less_eq :: \"'a::enum \\<times> 'a \\<Rightarrow> 'a \\<times> 'a \\<Rightarrow> bool\" where \"enum_lex_less_eq \\<equiv> (\\<lambda>(i,j) (k,l) . enum_pos_less i k \\<or> (i = k \\<and> enum_pos_less_eq j l))\""], ["", "text \\<open>\nThe $m$-operation determines the location of the non-$\\bot$ minimum element which is first in the lexicographic order.\nThe result is returned as a regular matrix with $\\top$ at that location and $\\bot$ everywhere else.\nIn the weighted-graph model, this represents a single unweighted edge of the graph.\n\\<close>"], ["", "definition minarc_matrix :: \"('a::enum,'b::{bot,ord,plus,top}) square \\<Rightarrow> ('a,'b) square\" (\"minarc\\<^sub>M _\" [80] 80) where \"minarc_matrix f = (\\<lambda>e . if f e \\<noteq> bot \\<and> (\\<forall>d . (f d \\<noteq> bot \\<longrightarrow> (f e + bot \\<le> f d + bot \\<and> (enum_lex_less d e \\<longrightarrow> f e + bot \\<noteq> f d + bot)))) then top else bot)\""], ["", "lemma minarc_at_most_one:\n  fixes f :: \"('a::enum,'b::{aggregation_order,top}) square\"\n  assumes \"(minarc\\<^sub>M f) e \\<noteq> bot\"\n      and \"(minarc\\<^sub>M f) d \\<noteq> bot\"\n    shows \"e = d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e = d", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. e = d", "have 1: \"f e + bot \\<le> f d + bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f e + bot \\<le> f d + bot", "by (metis assms minarc_matrix_def)"], ["proof (state)\nthis:\n  f e + bot \\<le> f d + bot\n\ngoal (1 subgoal):\n 1. e = d", "have \"f d + bot \\<le> f e + bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f d + bot \\<le> f e + bot", "by (metis assms minarc_matrix_def)"], ["proof (state)\nthis:\n  f d + bot \\<le> f e + bot\n\ngoal (1 subgoal):\n 1. e = d", "hence \"f e + bot = f d + bot\""], ["proof (prove)\nusing this:\n  f d + bot \\<le> f e + bot\n\ngoal (1 subgoal):\n 1. f e + bot = f d + bot", "using 1"], ["proof (prove)\nusing this:\n  f d + bot \\<le> f e + bot\n  f e + bot \\<le> f d + bot\n\ngoal (1 subgoal):\n 1. f e + bot = f d + bot", "by simp"], ["proof (state)\nthis:\n  f e + bot = f d + bot\n\ngoal (1 subgoal):\n 1. e = d", "hence \"\\<not> enum_lex_less d e \\<and> \\<not> enum_lex_less e d\""], ["proof (prove)\nusing this:\n  f e + bot = f d + bot\n\ngoal (1 subgoal):\n 1. \\<not> enum_lex_less d e \\<and> \\<not> enum_lex_less e d", "using assms"], ["proof (prove)\nusing this:\n  f e + bot = f d + bot\n  (minarc\\<^sub>M f) e \\<noteq> bot\n  (minarc\\<^sub>M f) d \\<noteq> bot\n\ngoal (1 subgoal):\n 1. \\<not> enum_lex_less d e \\<and> \\<not> enum_lex_less e d", "by (unfold minarc_matrix_def) (metis (lifting))"], ["proof (state)\nthis:\n  \\<not> enum_lex_less d e \\<and> \\<not> enum_lex_less e d\n\ngoal (1 subgoal):\n 1. e = d", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> enum_lex_less d e \\<and> \\<not> enum_lex_less e d\n\ngoal (1 subgoal):\n 1. e = d", "using enum_pos_injective less_linear"], ["proof (prove)\nusing this:\n  \\<not> enum_lex_less d e \\<and> \\<not> enum_lex_less e d\n  enum_pos ?x = enum_pos ?y \\<Longrightarrow> ?x = ?y\n  ?x < ?y \\<or> ?x = ?y \\<or> ?y < ?x\n\ngoal (1 subgoal):\n 1. e = d", "by auto"], ["proof (state)\nthis:\n  e = d\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Linear Aggregation Lattices\\<close>"], ["", "text \\<open>\nWe now assume that the aggregation order is linear and forms a bounded lattice.\nIt follows that these structures are aggregation lattices.\nA linear order on matrix entries is necessary to obtain a unique minimum entry.\n\\<close>"], ["", "class linear_aggregation_lattice = linear_bounded_lattice + aggregation_order\nbegin"], ["", "subclass aggregation_lattice"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.aggregation_lattice (\\<sqinter>) (\\<le>) (<) (\\<squnion>) bot top\n     (+)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. x + y = x \\<squnion> y + x \\<sqinter> y", "by (metis add_commute sup_inf_selective)"], ["", "sublocale heyting: bounded_heyting_lattice where implies = \"\\<lambda>x y . if x \\<le> y then top else y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.bounded_heyting_lattice (\\<sqinter>) (\\<le>) (<) (\\<squnion>) bot\n     top (\\<lambda>x y. if x \\<le> y then top else y)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       (x \\<sqinter> y \\<le> z) = (x \\<le> (if y \\<le> z then top else z))", "by (simp add: inf_less_eq)"], ["", "end"], ["", "text \\<open>\nEvery non-empty set with a transitive total relation has a least element with respect to this relation.\n\\<close>"], ["", "lemma least_order:\n  assumes transitive: \"\\<forall>x y z . le x y \\<and> le y z \\<longrightarrow> le x z\"\n      and total: \"\\<forall>x y . le x y \\<or> le y x\"\n    shows \"finite A \\<Longrightarrow> A \\<noteq> {} \\<Longrightarrow> \\<exists>x . x \\<in> A \\<and> (\\<forall>y . y \\<in> A \\<longrightarrow> le x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> A \\<and>\n                         (\\<forall>y. y \\<in> A \\<longrightarrow> le x y)", "proof (induct A rule: finite_ne_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<exists>xa.\n          xa \\<in> {x} \\<and>\n          (\\<forall>y. y \\<in> {x} \\<longrightarrow> le xa y)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<exists>x.\n           x \\<in> F \\<and>\n           (\\<forall>y. y \\<in> F \\<longrightarrow> le x y)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> insert x F \\<and>\n                            (\\<forall>y.\n                                y \\<in> insert x F \\<longrightarrow>\n                                le xa y)", "case singleton"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<exists>xa.\n          xa \\<in> {x} \\<and>\n          (\\<forall>y. y \\<in> {x} \\<longrightarrow> le xa y)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<exists>x.\n           x \\<in> F \\<and>\n           (\\<forall>y. y \\<in> F \\<longrightarrow> le x y)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> insert x F \\<and>\n                            (\\<forall>y.\n                                y \\<in> insert x F \\<longrightarrow>\n                                le xa y)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xa.\n       xa \\<in> {x_} \\<and>\n       (\\<forall>y. y \\<in> {x_} \\<longrightarrow> le xa y)", "using total"], ["proof (prove)\nusing this:\n  \\<forall>x y. le x y \\<or> le y x\n\ngoal (1 subgoal):\n 1. \\<exists>xa.\n       xa \\<in> {x_} \\<and>\n       (\\<forall>y. y \\<in> {x_} \\<longrightarrow> le xa y)", "by auto"], ["proof (state)\nthis:\n  \\<exists>xa.\n     xa \\<in> {x_} \\<and>\n     (\\<forall>y. y \\<in> {x_} \\<longrightarrow> le xa y)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<exists>x.\n           x \\<in> F \\<and>\n           (\\<forall>y. y \\<in> F \\<longrightarrow> le x y)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> insert x F \\<and>\n                            (\\<forall>y.\n                                y \\<in> insert x F \\<longrightarrow>\n                                le xa y)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<exists>x.\n           x \\<in> F \\<and>\n           (\\<forall>y. y \\<in> F \\<longrightarrow> le x y)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> insert x F \\<and>\n                            (\\<forall>y.\n                                y \\<in> insert x F \\<longrightarrow>\n                                le xa y)", "case insert"], ["proof (state)\nthis:\n  finite F_\n  F_ \\<noteq> {}\n  x_ \\<notin> F_\n  \\<exists>x.\n     x \\<in> F_ \\<and> (\\<forall>y. y \\<in> F_ \\<longrightarrow> le x y)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<exists>x.\n           x \\<in> F \\<and>\n           (\\<forall>y. y \\<in> F \\<longrightarrow> le x y)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> insert x F \\<and>\n                            (\\<forall>y.\n                                y \\<in> insert x F \\<longrightarrow>\n                                le xa y)", "thus ?case"], ["proof (prove)\nusing this:\n  finite F_\n  F_ \\<noteq> {}\n  x_ \\<notin> F_\n  \\<exists>x.\n     x \\<in> F_ \\<and> (\\<forall>y. y \\<in> F_ \\<longrightarrow> le x y)\n\ngoal (1 subgoal):\n 1. \\<exists>xa.\n       xa \\<in> insert x_ F_ \\<and>\n       (\\<forall>y. y \\<in> insert x_ F_ \\<longrightarrow> le xa y)", "by (metis insert_iff transitive total)"], ["proof (state)\nthis:\n  \\<exists>xa.\n     xa \\<in> insert x_ F_ \\<and>\n     (\\<forall>y. y \\<in> insert x_ F_ \\<longrightarrow> le xa y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma minarc_at_least_one:\n  fixes f :: \"('a::enum,'b::linear_aggregation_lattice) square\"\n  assumes \"f \\<noteq> mbot\"\n    shows \"\\<exists>e . (minarc\\<^sub>M f) e = top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>e. (minarc\\<^sub>M f) e = top", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>e. (minarc\\<^sub>M f) e = top", "let ?nbe = \"{ (e,f e) | e . f e \\<noteq> bot }\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>e. (minarc\\<^sub>M f) e = top", "have 1: \"finite ?nbe\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {(e, f e) |e. f e \\<noteq> bot}", "using finite_code finite_image_set"], ["proof (prove)\nusing this:\n  finite ?A = True\n  finite {x. ?P x} \\<Longrightarrow> finite {?f x |x. ?P x}\n\ngoal (1 subgoal):\n 1. finite {(e, f e) |e. f e \\<noteq> bot}", "by blast"], ["proof (state)\nthis:\n  finite {(e, f e) |e. f e \\<noteq> bot}\n\ngoal (1 subgoal):\n 1. \\<exists>e. (minarc\\<^sub>M f) e = top", "have 2: \"?nbe \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(e, f e) |e. f e \\<noteq> bot} \\<noteq> {}", "using assms agg_matrix_bot"], ["proof (prove)\nusing this:\n  f \\<noteq> mbot\n  \\<forall>i j. ?f (i, j) = bot \\<Longrightarrow> ?f = mbot\n\ngoal (1 subgoal):\n 1. {(e, f e) |e. f e \\<noteq> bot} \\<noteq> {}", "by fastforce"], ["proof (state)\nthis:\n  {(e, f e) |e. f e \\<noteq> bot} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>e. (minarc\\<^sub>M f) e = top", "let ?le = \"\\<lambda>(e::'a \\<times> 'a,fe::'b) (d::'a \\<times> 'a,fd) . fe + bot \\<le> fd + bot\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>e. (minarc\\<^sub>M f) e = top", "have 3: \"\\<forall>x y z . ?le x y \\<and> ?le y z \\<longrightarrow> ?le x z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y z.\n       (case x of\n        (e, fe) \\<Rightarrow> \\<lambda>(d, fd). fe + bot \\<le> fd + bot)\n        y \\<and>\n       (case y of\n        (e, fe) \\<Rightarrow> \\<lambda>(d, fd). fe + bot \\<le> fd + bot)\n        z \\<longrightarrow>\n       (case x of\n        (e, fe) \\<Rightarrow> \\<lambda>(d, fd). fe + bot \\<le> fd + bot)\n        z", "by auto"], ["proof (state)\nthis:\n  \\<forall>x y z.\n     (case x of\n      (e, fe) \\<Rightarrow> \\<lambda>(d, fd). fe + bot \\<le> fd + bot)\n      y \\<and>\n     (case y of\n      (e, fe) \\<Rightarrow> \\<lambda>(d, fd). fe + bot \\<le> fd + bot)\n      z \\<longrightarrow>\n     (case x of\n      (e, fe) \\<Rightarrow> \\<lambda>(d, fd). fe + bot \\<le> fd + bot)\n      z\n\ngoal (1 subgoal):\n 1. \\<exists>e. (minarc\\<^sub>M f) e = top", "have 4: \"\\<forall>x y . ?le x y \\<or> ?le y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y.\n       (case x of\n        (e, fe) \\<Rightarrow> \\<lambda>(d, fd). fe + bot \\<le> fd + bot)\n        y \\<or>\n       (case y of\n        (e, fe) \\<Rightarrow> \\<lambda>(d, fd). fe + bot \\<le> fd + bot)\n        x", "by (simp add: linear)"], ["proof (state)\nthis:\n  \\<forall>x y.\n     (case x of\n      (e, fe) \\<Rightarrow> \\<lambda>(d, fd). fe + bot \\<le> fd + bot)\n      y \\<or>\n     (case y of\n      (e, fe) \\<Rightarrow> \\<lambda>(d, fd). fe + bot \\<le> fd + bot)\n      x\n\ngoal (1 subgoal):\n 1. \\<exists>e. (minarc\\<^sub>M f) e = top", "have \"\\<exists>x . x \\<in> ?nbe \\<and> (\\<forall>y . y \\<in> ?nbe \\<longrightarrow> ?le x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       x \\<in> {(e, f e) |e. f e \\<noteq> bot} \\<and>\n       (\\<forall>y.\n           y \\<in> {(e, f e) |e. f e \\<noteq> bot} \\<longrightarrow>\n           (case x of\n            (e, fe) \\<Rightarrow> \\<lambda>(d, fd). fe + bot \\<le> fd + bot)\n            y)", "by (rule least_order, rule 3, rule 4, rule 1, rule 2)"], ["proof (state)\nthis:\n  \\<exists>x.\n     x \\<in> {(e, f e) |e. f e \\<noteq> bot} \\<and>\n     (\\<forall>y.\n         y \\<in> {(e, f e) |e. f e \\<noteq> bot} \\<longrightarrow>\n         (case x of\n          (e, fe) \\<Rightarrow> \\<lambda>(d, fd). fe + bot \\<le> fd + bot)\n          y)\n\ngoal (1 subgoal):\n 1. \\<exists>e. (minarc\\<^sub>M f) e = top", "then"], ["proof (chain)\npicking this:\n  \\<exists>x.\n     x \\<in> {(e, f e) |e. f e \\<noteq> bot} \\<and>\n     (\\<forall>y.\n         y \\<in> {(e, f e) |e. f e \\<noteq> bot} \\<longrightarrow>\n         (case x of\n          (e, fe) \\<Rightarrow> \\<lambda>(d, fd). fe + bot \\<le> fd + bot)\n          y)", "obtain e fe where 5: \"(e,fe) \\<in> ?nbe \\<and> (\\<forall>y . y \\<in> ?nbe \\<longrightarrow> ?le (e,fe) y)\""], ["proof (prove)\nusing this:\n  \\<exists>x.\n     x \\<in> {(e, f e) |e. f e \\<noteq> bot} \\<and>\n     (\\<forall>y.\n         y \\<in> {(e, f e) |e. f e \\<noteq> bot} \\<longrightarrow>\n         (case x of\n          (e, fe) \\<Rightarrow> \\<lambda>(d, fd). fe + bot \\<le> fd + bot)\n          y)\n\ngoal (1 subgoal):\n 1. (\\<And>e fe.\n        (e, fe) \\<in> {(e, f e) |e. f e \\<noteq> bot} \\<and>\n        (\\<forall>y.\n            y \\<in> {(e, f e) |e. f e \\<noteq> bot} \\<longrightarrow>\n            (case (e, fe) of\n             (e, fe) \\<Rightarrow>\n               \\<lambda>(d, fd). fe + bot \\<le> fd + bot)\n             y) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (e, fe) \\<in> {(e, f e) |e. f e \\<noteq> bot} \\<and>\n  (\\<forall>y.\n      y \\<in> {(e, f e) |e. f e \\<noteq> bot} \\<longrightarrow>\n      (case (e, fe) of\n       (e, fe) \\<Rightarrow> \\<lambda>(d, fd). fe + bot \\<le> fd + bot)\n       y)\n\ngoal (1 subgoal):\n 1. \\<exists>e. (minarc\\<^sub>M f) e = top", "let ?me = \"{ e . f e \\<noteq> bot \\<and> f e + bot = fe + bot }\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>e. (minarc\\<^sub>M f) e = top", "have 6: \"finite ?me\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {e. f e \\<noteq> bot \\<and> f e + bot = fe + bot}", "using finite_code finite_image_set"], ["proof (prove)\nusing this:\n  finite ?A = True\n  finite {x. ?P x} \\<Longrightarrow> finite {?f x |x. ?P x}\n\ngoal (1 subgoal):\n 1. finite {e. f e \\<noteq> bot \\<and> f e + bot = fe + bot}", "by blast"], ["proof (state)\nthis:\n  finite {e. f e \\<noteq> bot \\<and> f e + bot = fe + bot}\n\ngoal (1 subgoal):\n 1. \\<exists>e. (minarc\\<^sub>M f) e = top", "have 7: \"?me \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {e. f e \\<noteq> bot \\<and> f e + bot = fe + bot} \\<noteq> {}", "using 5"], ["proof (prove)\nusing this:\n  (e, fe) \\<in> {(e, f e) |e. f e \\<noteq> bot} \\<and>\n  (\\<forall>y.\n      y \\<in> {(e, f e) |e. f e \\<noteq> bot} \\<longrightarrow>\n      (case (e, fe) of\n       (e, fe) \\<Rightarrow> \\<lambda>(d, fd). fe + bot \\<le> fd + bot)\n       y)\n\ngoal (1 subgoal):\n 1. {e. f e \\<noteq> bot \\<and> f e + bot = fe + bot} \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  {e. f e \\<noteq> bot \\<and> f e + bot = fe + bot} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>e. (minarc\\<^sub>M f) e = top", "have 8: \"\\<forall>x y z . enum_lex_less_eq x y \\<and> enum_lex_less_eq y z \\<longrightarrow> enum_lex_less_eq x z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y z.\n       enum_lex_less_eq x y \\<and> enum_lex_less_eq y z \\<longrightarrow>\n       enum_lex_less_eq x z", "by auto"], ["proof (state)\nthis:\n  \\<forall>x y z.\n     enum_lex_less_eq x y \\<and> enum_lex_less_eq y z \\<longrightarrow>\n     enum_lex_less_eq x z\n\ngoal (1 subgoal):\n 1. \\<exists>e. (minarc\\<^sub>M f) e = top", "have 9: \"\\<forall>x y . enum_lex_less_eq x y \\<or> enum_lex_less_eq y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y. enum_lex_less_eq x y \\<or> enum_lex_less_eq y x", "by auto"], ["proof (state)\nthis:\n  \\<forall>x y. enum_lex_less_eq x y \\<or> enum_lex_less_eq y x\n\ngoal (1 subgoal):\n 1. \\<exists>e. (minarc\\<^sub>M f) e = top", "have \"\\<exists>x . x \\<in> ?me \\<and> (\\<forall>y . y \\<in> ?me \\<longrightarrow> enum_lex_less_eq x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       x \\<in> {e. f e \\<noteq> bot \\<and> f e + bot = fe + bot} \\<and>\n       (\\<forall>y.\n           y \\<in> {e. f e \\<noteq> bot \\<and>\n                       f e + bot = fe + bot} \\<longrightarrow>\n           enum_lex_less_eq x y)", "by (rule least_order, rule 8, rule 9, rule 6, rule 7)"], ["proof (state)\nthis:\n  \\<exists>x.\n     x \\<in> {e. f e \\<noteq> bot \\<and> f e + bot = fe + bot} \\<and>\n     (\\<forall>y.\n         y \\<in> {e. f e \\<noteq> bot \\<and>\n                     f e + bot = fe + bot} \\<longrightarrow>\n         enum_lex_less_eq x y)\n\ngoal (1 subgoal):\n 1. \\<exists>e. (minarc\\<^sub>M f) e = top", "then"], ["proof (chain)\npicking this:\n  \\<exists>x.\n     x \\<in> {e. f e \\<noteq> bot \\<and> f e + bot = fe + bot} \\<and>\n     (\\<forall>y.\n         y \\<in> {e. f e \\<noteq> bot \\<and>\n                     f e + bot = fe + bot} \\<longrightarrow>\n         enum_lex_less_eq x y)", "obtain m where 10: \"m \\<in> ?me \\<and> (\\<forall>y . y \\<in> ?me \\<longrightarrow> enum_lex_less_eq m y)\""], ["proof (prove)\nusing this:\n  \\<exists>x.\n     x \\<in> {e. f e \\<noteq> bot \\<and> f e + bot = fe + bot} \\<and>\n     (\\<forall>y.\n         y \\<in> {e. f e \\<noteq> bot \\<and>\n                     f e + bot = fe + bot} \\<longrightarrow>\n         enum_lex_less_eq x y)\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        m \\<in> {e. f e \\<noteq> bot \\<and> f e + bot = fe + bot} \\<and>\n        (\\<forall>y.\n            y \\<in> {e. f e \\<noteq> bot \\<and>\n                        f e + bot = fe + bot} \\<longrightarrow>\n            enum_lex_less_eq m y) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  m \\<in> {e. f e \\<noteq> bot \\<and> f e + bot = fe + bot} \\<and>\n  (\\<forall>y.\n      y \\<in> {e. f e \\<noteq> bot \\<and>\n                  f e + bot = fe + bot} \\<longrightarrow>\n      enum_lex_less_eq m y)\n\ngoal (1 subgoal):\n 1. \\<exists>e. (minarc\\<^sub>M f) e = top", "have 11: \"f m \\<noteq> bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f m \\<noteq> bot", "using 10 5"], ["proof (prove)\nusing this:\n  m \\<in> {e. f e \\<noteq> bot \\<and> f e + bot = fe + bot} \\<and>\n  (\\<forall>y.\n      y \\<in> {e. f e \\<noteq> bot \\<and>\n                  f e + bot = fe + bot} \\<longrightarrow>\n      enum_lex_less_eq m y)\n  (e, fe) \\<in> {(e, f e) |e. f e \\<noteq> bot} \\<and>\n  (\\<forall>y.\n      y \\<in> {(e, f e) |e. f e \\<noteq> bot} \\<longrightarrow>\n      (case (e, fe) of\n       (e, fe) \\<Rightarrow> \\<lambda>(d, fd). fe + bot \\<le> fd + bot)\n       y)\n\ngoal (1 subgoal):\n 1. f m \\<noteq> bot", "by auto"], ["proof (state)\nthis:\n  f m \\<noteq> bot\n\ngoal (1 subgoal):\n 1. \\<exists>e. (minarc\\<^sub>M f) e = top", "have 12: \"\\<forall>d. f d \\<noteq> bot \\<longrightarrow> f m + bot \\<le> f d + bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>d. f d \\<noteq> bot \\<longrightarrow> f m + bot \\<le> f d + bot", "using 10 5"], ["proof (prove)\nusing this:\n  m \\<in> {e. f e \\<noteq> bot \\<and> f e + bot = fe + bot} \\<and>\n  (\\<forall>y.\n      y \\<in> {e. f e \\<noteq> bot \\<and>\n                  f e + bot = fe + bot} \\<longrightarrow>\n      enum_lex_less_eq m y)\n  (e, fe) \\<in> {(e, f e) |e. f e \\<noteq> bot} \\<and>\n  (\\<forall>y.\n      y \\<in> {(e, f e) |e. f e \\<noteq> bot} \\<longrightarrow>\n      (case (e, fe) of\n       (e, fe) \\<Rightarrow> \\<lambda>(d, fd). fe + bot \\<le> fd + bot)\n       y)\n\ngoal (1 subgoal):\n 1. \\<forall>d. f d \\<noteq> bot \\<longrightarrow> f m + bot \\<le> f d + bot", "by simp"], ["proof (state)\nthis:\n  \\<forall>d. f d \\<noteq> bot \\<longrightarrow> f m + bot \\<le> f d + bot\n\ngoal (1 subgoal):\n 1. \\<exists>e. (minarc\\<^sub>M f) e = top", "have \"\\<forall>d. f d \\<noteq> bot \\<and> enum_lex_less d m \\<longrightarrow> f m + bot \\<noteq> f d + bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>d.\n       f d \\<noteq> bot \\<and> enum_lex_less d m \\<longrightarrow>\n       f m + bot \\<noteq> f d + bot", "using 10"], ["proof (prove)\nusing this:\n  m \\<in> {e. f e \\<noteq> bot \\<and> f e + bot = fe + bot} \\<and>\n  (\\<forall>y.\n      y \\<in> {e. f e \\<noteq> bot \\<and>\n                  f e + bot = fe + bot} \\<longrightarrow>\n      enum_lex_less_eq m y)\n\ngoal (1 subgoal):\n 1. \\<forall>d.\n       f d \\<noteq> bot \\<and> enum_lex_less d m \\<longrightarrow>\n       f m + bot \\<noteq> f d + bot", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>d.\n     f d \\<noteq> bot \\<and> enum_lex_less d m \\<longrightarrow>\n     f m + bot \\<noteq> f d + bot\n\ngoal (1 subgoal):\n 1. \\<exists>e. (minarc\\<^sub>M f) e = top", "hence \"(minarc\\<^sub>M f) m = top\""], ["proof (prove)\nusing this:\n  \\<forall>d.\n     f d \\<noteq> bot \\<and> enum_lex_less d m \\<longrightarrow>\n     f m + bot \\<noteq> f d + bot\n\ngoal (1 subgoal):\n 1. (minarc\\<^sub>M f) m = top", "using 11 12"], ["proof (prove)\nusing this:\n  \\<forall>d.\n     f d \\<noteq> bot \\<and> enum_lex_less d m \\<longrightarrow>\n     f m + bot \\<noteq> f d + bot\n  f m \\<noteq> bot\n  \\<forall>d. f d \\<noteq> bot \\<longrightarrow> f m + bot \\<le> f d + bot\n\ngoal (1 subgoal):\n 1. (minarc\\<^sub>M f) m = top", "by (simp add: minarc_matrix_def)"], ["proof (state)\nthis:\n  (minarc\\<^sub>M f) m = top\n\ngoal (1 subgoal):\n 1. \\<exists>e. (minarc\\<^sub>M f) e = top", "thus ?thesis"], ["proof (prove)\nusing this:\n  (minarc\\<^sub>M f) m = top\n\ngoal (1 subgoal):\n 1. \\<exists>e. (minarc\\<^sub>M f) e = top", "by blast"], ["proof (state)\nthis:\n  \\<exists>e. (minarc\\<^sub>M f) e = top\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\nLinear aggregation lattices form a Stone relation algebra by reusing the meet operation as composition, using identity as converse and a standard implementation of pseudocomplement.\n\\<close>"], ["", "class linear_aggregation_algebra = linear_aggregation_lattice + uminus + one + times + conv +\n  assumes uminus_def_2 [simp]: \"-x = (if x = bot then top else bot)\"\n  assumes one_def_2 [simp]: \"1 = top\"\n  assumes times_def_2 [simp]: \"x * y = x \\<sqinter> y\"\n  assumes conv_def_2 [simp]: \"x\\<^sup>T = x\"\nbegin"], ["", "subclass aggregation_algebra"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.aggregation_algebra (1::'a) (*) uminus (\\<sqinter>) (\\<le>) (<)\n     (\\<squnion>) bot top (+) conv", "apply unfold_locales"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x. - x = (if x = bot then top else bot)\n 2. (1::'a) = top\n 3. \\<And>x y. x * y = x \\<sqinter> y\n 4. \\<And>x. x\\<^sup>T = x", "using inf_dense"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<noteq> bot; ?y \\<noteq> bot\\<rbrakk>\n  \\<Longrightarrow> ?x \\<sqinter> ?y \\<noteq> bot\n\ngoal (4 subgoals):\n 1. \\<And>x. - x = (if x = bot then top else bot)\n 2. (1::'a) = top\n 3. \\<And>x y. x * y = x \\<sqinter> y\n 4. \\<And>x. x\\<^sup>T = x", "by auto"], ["", "lemma regular_bot_top_2:\n  \"regular x \\<longleftrightarrow> x = bot \\<or> x = top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. regular x = (x = bot \\<or> x = top)", "by simp"], ["", "sublocale heyting: heyting_stone_algebra where implies = \"\\<lambda>x y . if x \\<le> y then top else y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.heyting_stone_algebra uminus (\\<sqinter>) (\\<le>) (<) (\\<squnion>)\n     bot top (\\<lambda>x y. if x \\<le> y then top else y)", "apply unfold_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. - x = (if x \\<le> bot then top else bot)\n 2. \\<And>x. - x \\<squnion> - - x = top", "apply (simp add: antisym)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. - x \\<squnion> - - x = top", "by auto"], ["", "end"], ["", "text \\<open>\nWe show that matrices over linear aggregation lattices form an m-algebra using the above operations.\n\\<close>"], ["", "interpretation agg_square_m_algebra: m_algebra where sup = sup_matrix and inf = inf_matrix and less_eq = less_eq_matrix and less = less_matrix and bot = \"bot_matrix::('a::enum,'b::linear_aggregation_algebra) square\" and top = top_matrix and uminus = uminus_matrix and one = one_matrix and times = times_matrix and conv = conv_matrix and plus = plus_matrix and sum = sum_matrix and minarc = minarc_matrix"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.m_algebra minarc_matrix sum_matrix (\\<oplus>\\<^sub>M) (\\<otimes>)\n     (\\<preceq>) (\\<prec>) (\\<oplus>) mbot mtop uminus_matrix mone (\\<odot>)\n     conv_matrix", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x. minarc\\<^sub>M x \\<preceq> \\<ominus> \\<ominus> x\n 2. \\<And>x.\n       x \\<noteq> mbot \\<longrightarrow>\n       matrix_stone_relation_algebra.arc (minarc\\<^sub>M x)\n 3. \\<And>y x.\n       matrix_stone_relation_algebra.arc y \\<and>\n       y \\<otimes> x \\<noteq> mbot \\<longrightarrow>\n       sum\\<^sub>M (minarc\\<^sub>M x \\<otimes> x) \\<preceq>\n       sum\\<^sub>M (y \\<otimes> x)\n 4. \\<And>x y.\n       sum\\<^sub>M x \\<preceq> sum\\<^sub>M y \\<or>\n       sum\\<^sub>M y \\<preceq> sum\\<^sub>M x\n 5. finite {x. matrix_p_algebra.regular x}", "fix f :: \"('a,'b) square\""], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x. minarc\\<^sub>M x \\<preceq> \\<ominus> \\<ominus> x\n 2. \\<And>x.\n       x \\<noteq> mbot \\<longrightarrow>\n       matrix_stone_relation_algebra.arc (minarc\\<^sub>M x)\n 3. \\<And>y x.\n       matrix_stone_relation_algebra.arc y \\<and>\n       y \\<otimes> x \\<noteq> mbot \\<longrightarrow>\n       sum\\<^sub>M (minarc\\<^sub>M x \\<otimes> x) \\<preceq>\n       sum\\<^sub>M (y \\<otimes> x)\n 4. \\<And>x y.\n       sum\\<^sub>M x \\<preceq> sum\\<^sub>M y \\<or>\n       sum\\<^sub>M y \\<preceq> sum\\<^sub>M x\n 5. finite {x. matrix_p_algebra.regular x}", "show \"minarc\\<^sub>M f \\<preceq> \\<ominus>\\<ominus>f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. minarc\\<^sub>M f \\<preceq> \\<ominus> \\<ominus> f", "proof (unfold less_eq_matrix_def, rule allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e. (minarc\\<^sub>M f) e \\<le> (\\<ominus> \\<ominus> f) e", "fix e :: \"'a \\<times> 'a\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e. (minarc\\<^sub>M f) e \\<le> (\\<ominus> \\<ominus> f) e", "have \"(minarc\\<^sub>M f) e \\<le> (if f e \\<noteq> bot then top else --(f e))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (minarc\\<^sub>M f) e \\<le> (if f e \\<noteq> bot then top else - - f e)", "by (simp add: minarc_matrix_def)"], ["proof (state)\nthis:\n  (minarc\\<^sub>M f) e \\<le> (if f e \\<noteq> bot then top else - - f e)\n\ngoal (1 subgoal):\n 1. \\<And>e. (minarc\\<^sub>M f) e \\<le> (\\<ominus> \\<ominus> f) e", "also"], ["proof (state)\nthis:\n  (minarc\\<^sub>M f) e \\<le> (if f e \\<noteq> bot then top else - - f e)\n\ngoal (1 subgoal):\n 1. \\<And>e. (minarc\\<^sub>M f) e \\<le> (\\<ominus> \\<ominus> f) e", "have \"... = --(f e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if f e \\<noteq> bot then top else - - f e) = - - f e", "by simp"], ["proof (state)\nthis:\n  (if f e \\<noteq> bot then top else - - f e) = - - f e\n\ngoal (1 subgoal):\n 1. \\<And>e. (minarc\\<^sub>M f) e \\<le> (\\<ominus> \\<ominus> f) e", "also"], ["proof (state)\nthis:\n  (if f e \\<noteq> bot then top else - - f e) = - - f e\n\ngoal (1 subgoal):\n 1. \\<And>e. (minarc\\<^sub>M f) e \\<le> (\\<ominus> \\<ominus> f) e", "have \"... = (\\<ominus>\\<ominus>f) e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - - f e = (\\<ominus> \\<ominus> f) e", "by (simp add: uminus_matrix_def)"], ["proof (state)\nthis:\n  - - f e = (\\<ominus> \\<ominus> f) e\n\ngoal (1 subgoal):\n 1. \\<And>e. (minarc\\<^sub>M f) e \\<le> (\\<ominus> \\<ominus> f) e", "finally"], ["proof (chain)\npicking this:\n  (minarc\\<^sub>M f) e \\<le> (\\<ominus> \\<ominus> f) e", "show \"(minarc\\<^sub>M f) e \\<le> (\\<ominus>\\<ominus>f) e\""], ["proof (prove)\nusing this:\n  (minarc\\<^sub>M f) e \\<le> (\\<ominus> \\<ominus> f) e\n\ngoal (1 subgoal):\n 1. (minarc\\<^sub>M f) e \\<le> (\\<ominus> \\<ominus> f) e", "."], ["proof (state)\nthis:\n  (minarc\\<^sub>M f) e \\<le> (\\<ominus> \\<ominus> f) e\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  minarc\\<^sub>M f \\<preceq> \\<ominus> \\<ominus> f\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       x \\<noteq> mbot \\<longrightarrow>\n       matrix_stone_relation_algebra.arc (minarc\\<^sub>M x)\n 2. \\<And>y x.\n       matrix_stone_relation_algebra.arc y \\<and>\n       y \\<otimes> x \\<noteq> mbot \\<longrightarrow>\n       sum\\<^sub>M (minarc\\<^sub>M x \\<otimes> x) \\<preceq>\n       sum\\<^sub>M (y \\<otimes> x)\n 3. \\<And>x y.\n       sum\\<^sub>M x \\<preceq> sum\\<^sub>M y \\<or>\n       sum\\<^sub>M y \\<preceq> sum\\<^sub>M x\n 4. finite {x. matrix_p_algebra.regular x}", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       x \\<noteq> mbot \\<longrightarrow>\n       matrix_stone_relation_algebra.arc (minarc\\<^sub>M x)\n 2. \\<And>y x.\n       matrix_stone_relation_algebra.arc y \\<and>\n       y \\<otimes> x \\<noteq> mbot \\<longrightarrow>\n       sum\\<^sub>M (minarc\\<^sub>M x \\<otimes> x) \\<preceq>\n       sum\\<^sub>M (y \\<otimes> x)\n 3. \\<And>x y.\n       sum\\<^sub>M x \\<preceq> sum\\<^sub>M y \\<or>\n       sum\\<^sub>M y \\<preceq> sum\\<^sub>M x\n 4. finite {x. matrix_p_algebra.regular x}", "fix f :: \"('a,'b) square\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       x \\<noteq> mbot \\<longrightarrow>\n       matrix_stone_relation_algebra.arc (minarc\\<^sub>M x)\n 2. \\<And>y x.\n       matrix_stone_relation_algebra.arc y \\<and>\n       y \\<otimes> x \\<noteq> mbot \\<longrightarrow>\n       sum\\<^sub>M (minarc\\<^sub>M x \\<otimes> x) \\<preceq>\n       sum\\<^sub>M (y \\<otimes> x)\n 3. \\<And>x y.\n       sum\\<^sub>M x \\<preceq> sum\\<^sub>M y \\<or>\n       sum\\<^sub>M y \\<preceq> sum\\<^sub>M x\n 4. finite {x. matrix_p_algebra.regular x}", "let ?at = \"bounded_distrib_allegory_signature.arc mone times_matrix less_eq_matrix mtop conv_matrix\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       x \\<noteq> mbot \\<longrightarrow>\n       matrix_stone_relation_algebra.arc (minarc\\<^sub>M x)\n 2. \\<And>y x.\n       matrix_stone_relation_algebra.arc y \\<and>\n       y \\<otimes> x \\<noteq> mbot \\<longrightarrow>\n       sum\\<^sub>M (minarc\\<^sub>M x \\<otimes> x) \\<preceq>\n       sum\\<^sub>M (y \\<otimes> x)\n 3. \\<And>x y.\n       sum\\<^sub>M x \\<preceq> sum\\<^sub>M y \\<or>\n       sum\\<^sub>M y \\<preceq> sum\\<^sub>M x\n 4. finite {x. matrix_p_algebra.regular x}", "show \"f \\<noteq> mbot \\<longrightarrow> ?at (minarc\\<^sub>M f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<longrightarrow>\n    matrix_stone_relation_algebra.arc (minarc\\<^sub>M f)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<Longrightarrow>\n    matrix_stone_relation_algebra.arc (minarc\\<^sub>M f)", "assume 1: \"f \\<noteq> mbot\""], ["proof (state)\nthis:\n  f \\<noteq> mbot\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<Longrightarrow>\n    matrix_stone_relation_algebra.arc (minarc\\<^sub>M f)", "have \"minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f \\<odot> mtop)\\<^sup>t = minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. minarc\\<^sub>M f \\<odot> mtop \\<odot>\n    (minarc\\<^sub>M f \\<odot> mtop)\\<^sup>t =\n    minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t", "by (metis matrix_bounded_idempotent_semiring.surjective_top_closed matrix_monoid.mult_assoc matrix_stone_relation_algebra.conv_dist_comp matrix_stone_relation_algebra.conv_top)"], ["proof (state)\nthis:\n  minarc\\<^sub>M f \\<odot> mtop \\<odot>\n  (minarc\\<^sub>M f \\<odot> mtop)\\<^sup>t =\n  minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<Longrightarrow>\n    matrix_stone_relation_algebra.arc (minarc\\<^sub>M f)", "also"], ["proof (state)\nthis:\n  minarc\\<^sub>M f \\<odot> mtop \\<odot>\n  (minarc\\<^sub>M f \\<odot> mtop)\\<^sup>t =\n  minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<Longrightarrow>\n    matrix_stone_relation_algebra.arc (minarc\\<^sub>M f)", "have \"... \\<preceq> mone\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_idempotent_semiring.coreflexive\n     (minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t)", "proof (unfold less_eq_matrix_def, rule allI, rule prod_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t)\n        (a, b)\n       \\<le> mone (a, b)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t)\n        (a, b)\n       \\<le> mone (a, b)", "have \"(minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t) (i,j) = (\\<Squnion>\\<^sub>l (\\<Squnion>\\<^sub>k (minarc\\<^sub>M f) (i,k) * mtop (k,l)) * ((minarc\\<^sub>M f)\\<^sup>t) (l,j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t)\n     (i, j) =\n    sup_monoid.sum\n     (\\<lambda>l.\n         sup_monoid.sum\n          (\\<lambda>k. (minarc\\<^sub>M f) (i, k) * mtop (k, l)) {k. True} *\n         ((minarc\\<^sub>M f)\\<^sup>t) (l, j))\n     {l. True}", "by (simp add: times_matrix_def)"], ["proof (state)\nthis:\n  (minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t)\n   (i, j) =\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum (\\<lambda>k. (minarc\\<^sub>M f) (i, k) * mtop (k, l))\n        {k. True} *\n       ((minarc\\<^sub>M f)\\<^sup>t) (l, j))\n   {l. True}\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t)\n        (a, b)\n       \\<le> mone (a, b)", "also"], ["proof (state)\nthis:\n  (minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t)\n   (i, j) =\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum (\\<lambda>k. (minarc\\<^sub>M f) (i, k) * mtop (k, l))\n        {k. True} *\n       ((minarc\\<^sub>M f)\\<^sup>t) (l, j))\n   {l. True}\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t)\n        (a, b)\n       \\<le> mone (a, b)", "have \"... = (\\<Squnion>\\<^sub>l (\\<Squnion>\\<^sub>k (minarc\\<^sub>M f) (i,k) * top) * ((minarc\\<^sub>M f) (j,l))\\<^sup>T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sup_monoid.sum\n     (\\<lambda>l.\n         sup_monoid.sum\n          (\\<lambda>k. (minarc\\<^sub>M f) (i, k) * mtop (k, l)) {k. True} *\n         ((minarc\\<^sub>M f)\\<^sup>t) (l, j))\n     {l. True} =\n    sup_monoid.sum\n     (\\<lambda>l.\n         sup_monoid.sum (\\<lambda>k. (minarc\\<^sub>M f) (i, k) * top)\n          {k. True} *\n         (minarc\\<^sub>M f) (j, l)\\<^sup>T)\n     {l. True}", "by (simp add: top_matrix_def conv_matrix_def)"], ["proof (state)\nthis:\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum (\\<lambda>k. (minarc\\<^sub>M f) (i, k) * mtop (k, l))\n        {k. True} *\n       ((minarc\\<^sub>M f)\\<^sup>t) (l, j))\n   {l. True} =\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum (\\<lambda>k. (minarc\\<^sub>M f) (i, k) * top)\n        {k. True} *\n       (minarc\\<^sub>M f) (j, l)\\<^sup>T)\n   {l. True}\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t)\n        (a, b)\n       \\<le> mone (a, b)", "also"], ["proof (state)\nthis:\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum (\\<lambda>k. (minarc\\<^sub>M f) (i, k) * mtop (k, l))\n        {k. True} *\n       ((minarc\\<^sub>M f)\\<^sup>t) (l, j))\n   {l. True} =\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum (\\<lambda>k. (minarc\\<^sub>M f) (i, k) * top)\n        {k. True} *\n       (minarc\\<^sub>M f) (j, l)\\<^sup>T)\n   {l. True}\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t)\n        (a, b)\n       \\<le> mone (a, b)", "have \"... = (\\<Squnion>\\<^sub>l \\<Squnion>\\<^sub>k (minarc\\<^sub>M f) (i,k) * top * ((minarc\\<^sub>M f) (j,l))\\<^sup>T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sup_monoid.sum\n     (\\<lambda>l.\n         sup_monoid.sum (\\<lambda>k. (minarc\\<^sub>M f) (i, k) * top)\n          {k. True} *\n         (minarc\\<^sub>M f) (j, l)\\<^sup>T)\n     {l. True} =\n    sup_monoid.sum\n     (\\<lambda>l.\n         sup_monoid.sum\n          (\\<lambda>k.\n              (minarc\\<^sub>M f) (i, k) * top *\n              (minarc\\<^sub>M f) (j, l)\\<^sup>T)\n          {k. True})\n     {l. True}", "by (metis comp_right_dist_sum)"], ["proof (state)\nthis:\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum (\\<lambda>k. (minarc\\<^sub>M f) (i, k) * top)\n        {k. True} *\n       (minarc\\<^sub>M f) (j, l)\\<^sup>T)\n   {l. True} =\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum\n        (\\<lambda>k.\n            (minarc\\<^sub>M f) (i, k) * top *\n            (minarc\\<^sub>M f) (j, l)\\<^sup>T)\n        {k. True})\n   {l. True}\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t)\n        (a, b)\n       \\<le> mone (a, b)", "also"], ["proof (state)\nthis:\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum (\\<lambda>k. (minarc\\<^sub>M f) (i, k) * top)\n        {k. True} *\n       (minarc\\<^sub>M f) (j, l)\\<^sup>T)\n   {l. True} =\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum\n        (\\<lambda>k.\n            (minarc\\<^sub>M f) (i, k) * top *\n            (minarc\\<^sub>M f) (j, l)\\<^sup>T)\n        {k. True})\n   {l. True}\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t)\n        (a, b)\n       \\<le> mone (a, b)", "have \"... = (\\<Squnion>\\<^sub>l \\<Squnion>\\<^sub>k if i = j \\<and> l = k then (minarc\\<^sub>M f) (i,k) * top * ((minarc\\<^sub>M f) (j,l))\\<^sup>T else bot)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sup_monoid.sum\n     (\\<lambda>l.\n         sup_monoid.sum\n          (\\<lambda>k.\n              (minarc\\<^sub>M f) (i, k) * top *\n              (minarc\\<^sub>M f) (j, l)\\<^sup>T)\n          {k. True})\n     {l. True} =\n    sup_monoid.sum\n     (\\<lambda>l.\n         sup_monoid.sum\n          (\\<lambda>k.\n              if i = j \\<and> l = k\n              then (minarc\\<^sub>M f) (i, k) * top *\n                   (minarc\\<^sub>M f) (j, l)\\<^sup>T\n              else bot)\n          {k. True})\n     {l. True}", "apply (rule sup_monoid.sum.cong)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {l. True} = {l. True}\n 2. \\<And>x.\n       x \\<in> {l. True} \\<Longrightarrow>\n       sup_monoid.sum\n        (\\<lambda>k.\n            (minarc\\<^sub>M f) (i, k) * top *\n            (minarc\\<^sub>M f) (j, x)\\<^sup>T)\n        {k. True} =\n       sup_monoid.sum\n        (\\<lambda>k.\n            if i = j \\<and> x = k\n            then (minarc\\<^sub>M f) (i, k) * top *\n                 (minarc\\<^sub>M f) (j, x)\\<^sup>T\n            else bot)\n        {k. True}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {l. True} \\<Longrightarrow>\n       sup_monoid.sum\n        (\\<lambda>k.\n            (minarc\\<^sub>M f) (i, k) * top *\n            (minarc\\<^sub>M f) (j, x)\\<^sup>T)\n        {k. True} =\n       sup_monoid.sum\n        (\\<lambda>k.\n            if i = j \\<and> x = k\n            then (minarc\\<^sub>M f) (i, k) * top *\n                 (minarc\\<^sub>M f) (j, x)\\<^sup>T\n            else bot)\n        {k. True}", "by (metis (no_types, lifting) comp_left_zero comp_right_zero conv_bot prod.inject minarc_at_most_one)"], ["proof (state)\nthis:\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum\n        (\\<lambda>k.\n            (minarc\\<^sub>M f) (i, k) * top *\n            (minarc\\<^sub>M f) (j, l)\\<^sup>T)\n        {k. True})\n   {l. True} =\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum\n        (\\<lambda>k.\n            if i = j \\<and> l = k\n            then (minarc\\<^sub>M f) (i, k) * top *\n                 (minarc\\<^sub>M f) (j, l)\\<^sup>T\n            else bot)\n        {k. True})\n   {l. True}\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t)\n        (a, b)\n       \\<le> mone (a, b)", "also"], ["proof (state)\nthis:\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum\n        (\\<lambda>k.\n            (minarc\\<^sub>M f) (i, k) * top *\n            (minarc\\<^sub>M f) (j, l)\\<^sup>T)\n        {k. True})\n   {l. True} =\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum\n        (\\<lambda>k.\n            if i = j \\<and> l = k\n            then (minarc\\<^sub>M f) (i, k) * top *\n                 (minarc\\<^sub>M f) (j, l)\\<^sup>T\n            else bot)\n        {k. True})\n   {l. True}\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t)\n        (a, b)\n       \\<le> mone (a, b)", "have \"... = (if i = j then (\\<Squnion>\\<^sub>l \\<Squnion>\\<^sub>k if l = k then (minarc\\<^sub>M f) (i,k) * top * ((minarc\\<^sub>M f) (j,l))\\<^sup>T else bot) else bot)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sup_monoid.sum\n     (\\<lambda>l.\n         sup_monoid.sum\n          (\\<lambda>k.\n              if i = j \\<and> l = k\n              then (minarc\\<^sub>M f) (i, k) * top *\n                   (minarc\\<^sub>M f) (j, l)\\<^sup>T\n              else bot)\n          {k. True})\n     {l. True} =\n    (if i = j\n     then sup_monoid.sum\n           (\\<lambda>l.\n               sup_monoid.sum\n                (\\<lambda>k.\n                    if l = k\n                    then (minarc\\<^sub>M f) (i, k) * top *\n                         (minarc\\<^sub>M f) (j, l)\\<^sup>T\n                    else bot)\n                {k. True})\n           {l. True}\n     else bot)", "by auto"], ["proof (state)\nthis:\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum\n        (\\<lambda>k.\n            if i = j \\<and> l = k\n            then (minarc\\<^sub>M f) (i, k) * top *\n                 (minarc\\<^sub>M f) (j, l)\\<^sup>T\n            else bot)\n        {k. True})\n   {l. True} =\n  (if i = j\n   then sup_monoid.sum\n         (\\<lambda>l.\n             sup_monoid.sum\n              (\\<lambda>k.\n                  if l = k\n                  then (minarc\\<^sub>M f) (i, k) * top *\n                       (minarc\\<^sub>M f) (j, l)\\<^sup>T\n                  else bot)\n              {k. True})\n         {l. True}\n   else bot)\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t)\n        (a, b)\n       \\<le> mone (a, b)", "also"], ["proof (state)\nthis:\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum\n        (\\<lambda>k.\n            if i = j \\<and> l = k\n            then (minarc\\<^sub>M f) (i, k) * top *\n                 (minarc\\<^sub>M f) (j, l)\\<^sup>T\n            else bot)\n        {k. True})\n   {l. True} =\n  (if i = j\n   then sup_monoid.sum\n         (\\<lambda>l.\n             sup_monoid.sum\n              (\\<lambda>k.\n                  if l = k\n                  then (minarc\\<^sub>M f) (i, k) * top *\n                       (minarc\\<^sub>M f) (j, l)\\<^sup>T\n                  else bot)\n              {k. True})\n         {l. True}\n   else bot)\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t)\n        (a, b)\n       \\<le> mone (a, b)", "have \"... \\<le> (if i = j then top else bot)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i = j\n     then sup_monoid.sum\n           (\\<lambda>l.\n               sup_monoid.sum\n                (\\<lambda>k.\n                    if l = k\n                    then (minarc\\<^sub>M f) (i, k) * top *\n                         (minarc\\<^sub>M f) (j, l)\\<^sup>T\n                    else bot)\n                {k. True})\n           {l. True}\n     else bot)\n    \\<le> (if i = j then top else bot)", "by simp"], ["proof (state)\nthis:\n  (if i = j\n   then sup_monoid.sum\n         (\\<lambda>l.\n             sup_monoid.sum\n              (\\<lambda>k.\n                  if l = k\n                  then (minarc\\<^sub>M f) (i, k) * top *\n                       (minarc\\<^sub>M f) (j, l)\\<^sup>T\n                  else bot)\n              {k. True})\n         {l. True}\n   else bot)\n  \\<le> (if i = j then top else bot)\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t)\n        (a, b)\n       \\<le> mone (a, b)", "also"], ["proof (state)\nthis:\n  (if i = j\n   then sup_monoid.sum\n         (\\<lambda>l.\n             sup_monoid.sum\n              (\\<lambda>k.\n                  if l = k\n                  then (minarc\\<^sub>M f) (i, k) * top *\n                       (minarc\\<^sub>M f) (j, l)\\<^sup>T\n                  else bot)\n              {k. True})\n         {l. True}\n   else bot)\n  \\<le> (if i = j then top else bot)\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t)\n        (a, b)\n       \\<le> mone (a, b)", "have \"... = mone (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i = j then top else bot) = mone (i, j)", "by (simp add: one_matrix_def)"], ["proof (state)\nthis:\n  (if i = j then top else bot) = mone (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t)\n        (a, b)\n       \\<le> mone (a, b)", "finally"], ["proof (chain)\npicking this:\n  (minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t) (i, j)\n  \\<le> mone (i, j)", "show \"(minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t) (i,j) \\<le> mone (i,j)\""], ["proof (prove)\nusing this:\n  (minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t) (i, j)\n  \\<le> mone (i, j)\n\ngoal (1 subgoal):\n 1. (minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t)\n     (i, j)\n    \\<le> mone (i, j)", "."], ["proof (state)\nthis:\n  (minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t) (i, j)\n  \\<le> mone (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  matrix_idempotent_semiring.coreflexive\n   (minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\\<^sup>t)\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<Longrightarrow>\n    matrix_stone_relation_algebra.arc (minarc\\<^sub>M f)", "finally"], ["proof (chain)\npicking this:\n  matrix_stone_relation_algebra.injective (minarc\\<^sub>M f \\<odot> mtop)", "have 2: \"minarc\\<^sub>M f \\<odot> mtop \\<odot> (minarc\\<^sub>M f \\<odot> mtop)\\<^sup>t \\<preceq> mone\""], ["proof (prove)\nusing this:\n  matrix_stone_relation_algebra.injective (minarc\\<^sub>M f \\<odot> mtop)\n\ngoal (1 subgoal):\n 1. matrix_stone_relation_algebra.injective (minarc\\<^sub>M f \\<odot> mtop)", "."], ["proof (state)\nthis:\n  matrix_stone_relation_algebra.injective (minarc\\<^sub>M f \\<odot> mtop)\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<Longrightarrow>\n    matrix_stone_relation_algebra.arc (minarc\\<^sub>M f)", "have 3: \"mtop \\<odot> (minarc\\<^sub>M f \\<odot> mtop) = mtop\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_bounded_idempotent_semiring.surjective\n     (minarc\\<^sub>M f \\<odot> mtop)", "proof (rule ext, rule prod_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (mtop \\<odot> (minarc\\<^sub>M f \\<odot> mtop)) (a, b) = mtop (a, b)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (mtop \\<odot> (minarc\\<^sub>M f \\<odot> mtop)) (a, b) = mtop (a, b)", "from minarc_at_least_one"], ["proof (chain)\npicking this:\n  ?f \\<noteq> mbot \\<Longrightarrow> \\<exists>e. (minarc\\<^sub>M ?f) e = top", "obtain ei ej where \"(minarc\\<^sub>M f) (ei,ej) = top\""], ["proof (prove)\nusing this:\n  ?f \\<noteq> mbot \\<Longrightarrow> \\<exists>e. (minarc\\<^sub>M ?f) e = top\n\ngoal (1 subgoal):\n 1. (\\<And>ei ej.\n        (minarc\\<^sub>M f) (ei, ej) = top \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using 1"], ["proof (prove)\nusing this:\n  ?f \\<noteq> mbot \\<Longrightarrow> \\<exists>e. (minarc\\<^sub>M ?f) e = top\n  f \\<noteq> mbot\n\ngoal (1 subgoal):\n 1. (\\<And>ei ej.\n        (minarc\\<^sub>M f) (ei, ej) = top \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  (minarc\\<^sub>M f) (ei, ej) = top\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (mtop \\<odot> (minarc\\<^sub>M f \\<odot> mtop)) (a, b) = mtop (a, b)", "hence 4: \"top * top \\<le> (\\<Squnion>\\<^sub>l (minarc\\<^sub>M f) (ei,l) * top)\""], ["proof (prove)\nusing this:\n  (minarc\\<^sub>M f) (ei, ej) = top\n\ngoal (1 subgoal):\n 1. top * top\n    \\<le> sup_monoid.sum (\\<lambda>l. (minarc\\<^sub>M f) (ei, l) * top)\n           {l. True}", "by (metis comp_inf.ub_sum)"], ["proof (state)\nthis:\n  top * top\n  \\<le> sup_monoid.sum (\\<lambda>l. (minarc\\<^sub>M f) (ei, l) * top)\n         {l. True}\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (mtop \\<odot> (minarc\\<^sub>M f \\<odot> mtop)) (a, b) = mtop (a, b)", "have \"top * (\\<Squnion>\\<^sub>l (minarc\\<^sub>M f) (ei,l) * top) \\<le> (\\<Squnion>\\<^sub>k top * (\\<Squnion>\\<^sub>l (minarc\\<^sub>M f) (k,l) * top))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. top *\n    sup_monoid.sum (\\<lambda>l. (minarc\\<^sub>M f) (ei, l) * top) {l. True}\n    \\<le> sup_monoid.sum\n           (\\<lambda>k.\n               top *\n               sup_monoid.sum (\\<lambda>l. (minarc\\<^sub>M f) (k, l) * top)\n                {l. True})\n           {k. True}", "by (rule comp_inf.ub_sum)"], ["proof (state)\nthis:\n  top *\n  sup_monoid.sum (\\<lambda>l. (minarc\\<^sub>M f) (ei, l) * top) {l. True}\n  \\<le> sup_monoid.sum\n         (\\<lambda>k.\n             top *\n             sup_monoid.sum (\\<lambda>l. (minarc\\<^sub>M f) (k, l) * top)\n              {l. True})\n         {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (mtop \\<odot> (minarc\\<^sub>M f \\<odot> mtop)) (a, b) = mtop (a, b)", "hence \"top \\<le> (\\<Squnion>\\<^sub>k top * (\\<Squnion>\\<^sub>l (minarc\\<^sub>M f) (k,l) * top))\""], ["proof (prove)\nusing this:\n  top *\n  sup_monoid.sum (\\<lambda>l. (minarc\\<^sub>M f) (ei, l) * top) {l. True}\n  \\<le> sup_monoid.sum\n         (\\<lambda>k.\n             top *\n             sup_monoid.sum (\\<lambda>l. (minarc\\<^sub>M f) (k, l) * top)\n              {l. True})\n         {k. True}\n\ngoal (1 subgoal):\n 1. bounded_distrib_lattice_class.comp_inf.reflexive\n     (sup_monoid.sum\n       (\\<lambda>k.\n           top *\n           sup_monoid.sum (\\<lambda>l. (minarc\\<^sub>M f) (k, l) * top)\n            {l. True})\n       {k. True})", "using 4"], ["proof (prove)\nusing this:\n  top *\n  sup_monoid.sum (\\<lambda>l. (minarc\\<^sub>M f) (ei, l) * top) {l. True}\n  \\<le> sup_monoid.sum\n         (\\<lambda>k.\n             top *\n             sup_monoid.sum (\\<lambda>l. (minarc\\<^sub>M f) (k, l) * top)\n              {l. True})\n         {k. True}\n  top * top\n  \\<le> sup_monoid.sum (\\<lambda>l. (minarc\\<^sub>M f) (ei, l) * top)\n         {l. True}\n\ngoal (1 subgoal):\n 1. bounded_distrib_lattice_class.comp_inf.reflexive\n     (sup_monoid.sum\n       (\\<lambda>k.\n           top *\n           sup_monoid.sum (\\<lambda>l. (minarc\\<^sub>M f) (k, l) * top)\n            {l. True})\n       {k. True})", "by auto"], ["proof (state)\nthis:\n  bounded_distrib_lattice_class.comp_inf.reflexive\n   (sup_monoid.sum\n     (\\<lambda>k.\n         top *\n         sup_monoid.sum (\\<lambda>l. (minarc\\<^sub>M f) (k, l) * top)\n          {l. True})\n     {k. True})\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (mtop \\<odot> (minarc\\<^sub>M f \\<odot> mtop)) (a, b) = mtop (a, b)", "also"], ["proof (state)\nthis:\n  bounded_distrib_lattice_class.comp_inf.reflexive\n   (sup_monoid.sum\n     (\\<lambda>k.\n         top *\n         sup_monoid.sum (\\<lambda>l. (minarc\\<^sub>M f) (k, l) * top)\n          {l. True})\n     {k. True})\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (mtop \\<odot> (minarc\\<^sub>M f \\<odot> mtop)) (a, b) = mtop (a, b)", "have \"... = (\\<Squnion>\\<^sub>k mtop (i,k) * (\\<Squnion>\\<^sub>l (minarc\\<^sub>M f) (k,l) * mtop (l,j)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sup_monoid.sum\n     (\\<lambda>k.\n         top *\n         sup_monoid.sum (\\<lambda>l. (minarc\\<^sub>M f) (k, l) * top)\n          {l. True})\n     {k. True} =\n    sup_monoid.sum\n     (\\<lambda>k.\n         mtop (i, k) *\n         sup_monoid.sum\n          (\\<lambda>l. (minarc\\<^sub>M f) (k, l) * mtop (l, j)) {l. True})\n     {k. True}", "by (simp add: top_matrix_def)"], ["proof (state)\nthis:\n  sup_monoid.sum\n   (\\<lambda>k.\n       top *\n       sup_monoid.sum (\\<lambda>l. (minarc\\<^sub>M f) (k, l) * top)\n        {l. True})\n   {k. True} =\n  sup_monoid.sum\n   (\\<lambda>k.\n       mtop (i, k) *\n       sup_monoid.sum (\\<lambda>l. (minarc\\<^sub>M f) (k, l) * mtop (l, j))\n        {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (mtop \\<odot> (minarc\\<^sub>M f \\<odot> mtop)) (a, b) = mtop (a, b)", "also"], ["proof (state)\nthis:\n  sup_monoid.sum\n   (\\<lambda>k.\n       top *\n       sup_monoid.sum (\\<lambda>l. (minarc\\<^sub>M f) (k, l) * top)\n        {l. True})\n   {k. True} =\n  sup_monoid.sum\n   (\\<lambda>k.\n       mtop (i, k) *\n       sup_monoid.sum (\\<lambda>l. (minarc\\<^sub>M f) (k, l) * mtop (l, j))\n        {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (mtop \\<odot> (minarc\\<^sub>M f \\<odot> mtop)) (a, b) = mtop (a, b)", "have \"... = (mtop \\<odot> (minarc\\<^sub>M f \\<odot> mtop)) (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sup_monoid.sum\n     (\\<lambda>k.\n         mtop (i, k) *\n         sup_monoid.sum\n          (\\<lambda>l. (minarc\\<^sub>M f) (k, l) * mtop (l, j)) {l. True})\n     {k. True} =\n    (mtop \\<odot> (minarc\\<^sub>M f \\<odot> mtop)) (i, j)", "by (simp add: times_matrix_def)"], ["proof (state)\nthis:\n  sup_monoid.sum\n   (\\<lambda>k.\n       mtop (i, k) *\n       sup_monoid.sum (\\<lambda>l. (minarc\\<^sub>M f) (k, l) * mtop (l, j))\n        {l. True})\n   {k. True} =\n  (mtop \\<odot> (minarc\\<^sub>M f \\<odot> mtop)) (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       (mtop \\<odot> (minarc\\<^sub>M f \\<odot> mtop)) (a, b) = mtop (a, b)", "finally"], ["proof (chain)\npicking this:\n  bounded_distrib_lattice_class.comp_inf.reflexive\n   ((mtop \\<odot> (minarc\\<^sub>M f \\<odot> mtop)) (i, j))", "show \"(mtop \\<odot> (minarc\\<^sub>M f \\<odot> mtop)) (i,j) = mtop (i,j)\""], ["proof (prove)\nusing this:\n  bounded_distrib_lattice_class.comp_inf.reflexive\n   ((mtop \\<odot> (minarc\\<^sub>M f \\<odot> mtop)) (i, j))\n\ngoal (1 subgoal):\n 1. (mtop \\<odot> (minarc\\<^sub>M f \\<odot> mtop)) (i, j) = mtop (i, j)", "by (simp add: eq_iff top_matrix_def)"], ["proof (state)\nthis:\n  (mtop \\<odot> (minarc\\<^sub>M f \\<odot> mtop)) (i, j) = mtop (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  matrix_bounded_idempotent_semiring.surjective\n   (minarc\\<^sub>M f \\<odot> mtop)\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<Longrightarrow>\n    matrix_stone_relation_algebra.arc (minarc\\<^sub>M f)", "have \"(minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop)\\<^sup>t = (minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> (minarc\\<^sub>M f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot>\n    ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop)\\<^sup>t =\n    (minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> minarc\\<^sub>M f", "by (metis matrix_stone_relation_algebra.comp_associative matrix_stone_relation_algebra.conv_dist_comp matrix_stone_relation_algebra.conv_involutive matrix_stone_relation_algebra.conv_top matrix_bounded_idempotent_semiring.surjective_top_closed)"], ["proof (state)\nthis:\n  (minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot>\n  ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop)\\<^sup>t =\n  (minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> minarc\\<^sub>M f\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<Longrightarrow>\n    matrix_stone_relation_algebra.arc (minarc\\<^sub>M f)", "also"], ["proof (state)\nthis:\n  (minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot>\n  ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop)\\<^sup>t =\n  (minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> minarc\\<^sub>M f\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<Longrightarrow>\n    matrix_stone_relation_algebra.arc (minarc\\<^sub>M f)", "have \"... \\<preceq> mone\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_idempotent_semiring.coreflexive\n     ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> minarc\\<^sub>M f)", "proof (unfold less_eq_matrix_def, rule allI, rule prod_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> minarc\\<^sub>M f)\n        (a, b)\n       \\<le> mone (a, b)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> minarc\\<^sub>M f)\n        (a, b)\n       \\<le> mone (a, b)", "have \"((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> minarc\\<^sub>M f) (i,j) = (\\<Squnion>\\<^sub>l (\\<Squnion>\\<^sub>k ((minarc\\<^sub>M f)\\<^sup>t) (i,k) * mtop (k,l)) * (minarc\\<^sub>M f) (l,j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> minarc\\<^sub>M f)\n     (i, j) =\n    sup_monoid.sum\n     (\\<lambda>l.\n         sup_monoid.sum\n          (\\<lambda>k. ((minarc\\<^sub>M f)\\<^sup>t) (i, k) * mtop (k, l))\n          {k. True} *\n         (minarc\\<^sub>M f) (l, j))\n     {l. True}", "by (simp add: times_matrix_def)"], ["proof (state)\nthis:\n  ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> minarc\\<^sub>M f)\n   (i, j) =\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum\n        (\\<lambda>k. ((minarc\\<^sub>M f)\\<^sup>t) (i, k) * mtop (k, l))\n        {k. True} *\n       (minarc\\<^sub>M f) (l, j))\n   {l. True}\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> minarc\\<^sub>M f)\n        (a, b)\n       \\<le> mone (a, b)", "also"], ["proof (state)\nthis:\n  ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> minarc\\<^sub>M f)\n   (i, j) =\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum\n        (\\<lambda>k. ((minarc\\<^sub>M f)\\<^sup>t) (i, k) * mtop (k, l))\n        {k. True} *\n       (minarc\\<^sub>M f) (l, j))\n   {l. True}\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> minarc\\<^sub>M f)\n        (a, b)\n       \\<le> mone (a, b)", "have \"... = (\\<Squnion>\\<^sub>l (\\<Squnion>\\<^sub>k ((minarc\\<^sub>M f) (k,i))\\<^sup>T * top) * (minarc\\<^sub>M f) (l,j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sup_monoid.sum\n     (\\<lambda>l.\n         sup_monoid.sum\n          (\\<lambda>k. ((minarc\\<^sub>M f)\\<^sup>t) (i, k) * mtop (k, l))\n          {k. True} *\n         (minarc\\<^sub>M f) (l, j))\n     {l. True} =\n    sup_monoid.sum\n     (\\<lambda>l.\n         sup_monoid.sum\n          (\\<lambda>k. (minarc\\<^sub>M f) (k, i)\\<^sup>T * top) {k. True} *\n         (minarc\\<^sub>M f) (l, j))\n     {l. True}", "by (simp add: top_matrix_def conv_matrix_def)"], ["proof (state)\nthis:\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum\n        (\\<lambda>k. ((minarc\\<^sub>M f)\\<^sup>t) (i, k) * mtop (k, l))\n        {k. True} *\n       (minarc\\<^sub>M f) (l, j))\n   {l. True} =\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum (\\<lambda>k. (minarc\\<^sub>M f) (k, i)\\<^sup>T * top)\n        {k. True} *\n       (minarc\\<^sub>M f) (l, j))\n   {l. True}\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> minarc\\<^sub>M f)\n        (a, b)\n       \\<le> mone (a, b)", "also"], ["proof (state)\nthis:\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum\n        (\\<lambda>k. ((minarc\\<^sub>M f)\\<^sup>t) (i, k) * mtop (k, l))\n        {k. True} *\n       (minarc\\<^sub>M f) (l, j))\n   {l. True} =\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum (\\<lambda>k. (minarc\\<^sub>M f) (k, i)\\<^sup>T * top)\n        {k. True} *\n       (minarc\\<^sub>M f) (l, j))\n   {l. True}\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> minarc\\<^sub>M f)\n        (a, b)\n       \\<le> mone (a, b)", "have \"... = (\\<Squnion>\\<^sub>l \\<Squnion>\\<^sub>k ((minarc\\<^sub>M f) (k,i))\\<^sup>T * top * (minarc\\<^sub>M f) (l,j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sup_monoid.sum\n     (\\<lambda>l.\n         sup_monoid.sum\n          (\\<lambda>k. (minarc\\<^sub>M f) (k, i)\\<^sup>T * top) {k. True} *\n         (minarc\\<^sub>M f) (l, j))\n     {l. True} =\n    sup_monoid.sum\n     (\\<lambda>l.\n         sup_monoid.sum\n          (\\<lambda>k.\n              (minarc\\<^sub>M f) (k, i)\\<^sup>T * top *\n              (minarc\\<^sub>M f) (l, j))\n          {k. True})\n     {l. True}", "by (metis comp_right_dist_sum)"], ["proof (state)\nthis:\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum (\\<lambda>k. (minarc\\<^sub>M f) (k, i)\\<^sup>T * top)\n        {k. True} *\n       (minarc\\<^sub>M f) (l, j))\n   {l. True} =\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum\n        (\\<lambda>k.\n            (minarc\\<^sub>M f) (k, i)\\<^sup>T * top *\n            (minarc\\<^sub>M f) (l, j))\n        {k. True})\n   {l. True}\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> minarc\\<^sub>M f)\n        (a, b)\n       \\<le> mone (a, b)", "also"], ["proof (state)\nthis:\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum (\\<lambda>k. (minarc\\<^sub>M f) (k, i)\\<^sup>T * top)\n        {k. True} *\n       (minarc\\<^sub>M f) (l, j))\n   {l. True} =\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum\n        (\\<lambda>k.\n            (minarc\\<^sub>M f) (k, i)\\<^sup>T * top *\n            (minarc\\<^sub>M f) (l, j))\n        {k. True})\n   {l. True}\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> minarc\\<^sub>M f)\n        (a, b)\n       \\<le> mone (a, b)", "have \"... = (\\<Squnion>\\<^sub>l \\<Squnion>\\<^sub>k if i = j \\<and> l = k then ((minarc\\<^sub>M f) (k,i))\\<^sup>T * top * (minarc\\<^sub>M f) (l,j) else bot)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sup_monoid.sum\n     (\\<lambda>l.\n         sup_monoid.sum\n          (\\<lambda>k.\n              (minarc\\<^sub>M f) (k, i)\\<^sup>T * top *\n              (minarc\\<^sub>M f) (l, j))\n          {k. True})\n     {l. True} =\n    sup_monoid.sum\n     (\\<lambda>l.\n         sup_monoid.sum\n          (\\<lambda>k.\n              if i = j \\<and> l = k\n              then (minarc\\<^sub>M f) (k, i)\\<^sup>T * top *\n                   (minarc\\<^sub>M f) (l, j)\n              else bot)\n          {k. True})\n     {l. True}", "apply (rule sup_monoid.sum.cong)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {l. True} = {l. True}\n 2. \\<And>x.\n       x \\<in> {l. True} \\<Longrightarrow>\n       sup_monoid.sum\n        (\\<lambda>k.\n            (minarc\\<^sub>M f) (k, i)\\<^sup>T * top *\n            (minarc\\<^sub>M f) (x, j))\n        {k. True} =\n       sup_monoid.sum\n        (\\<lambda>k.\n            if i = j \\<and> x = k\n            then (minarc\\<^sub>M f) (k, i)\\<^sup>T * top *\n                 (minarc\\<^sub>M f) (x, j)\n            else bot)\n        {k. True}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {l. True} \\<Longrightarrow>\n       sup_monoid.sum\n        (\\<lambda>k.\n            (minarc\\<^sub>M f) (k, i)\\<^sup>T * top *\n            (minarc\\<^sub>M f) (x, j))\n        {k. True} =\n       sup_monoid.sum\n        (\\<lambda>k.\n            if i = j \\<and> x = k\n            then (minarc\\<^sub>M f) (k, i)\\<^sup>T * top *\n                 (minarc\\<^sub>M f) (x, j)\n            else bot)\n        {k. True}", "by (metis (no_types, lifting) comp_left_zero comp_right_zero conv_bot prod.inject minarc_at_most_one)"], ["proof (state)\nthis:\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum\n        (\\<lambda>k.\n            (minarc\\<^sub>M f) (k, i)\\<^sup>T * top *\n            (minarc\\<^sub>M f) (l, j))\n        {k. True})\n   {l. True} =\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum\n        (\\<lambda>k.\n            if i = j \\<and> l = k\n            then (minarc\\<^sub>M f) (k, i)\\<^sup>T * top *\n                 (minarc\\<^sub>M f) (l, j)\n            else bot)\n        {k. True})\n   {l. True}\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> minarc\\<^sub>M f)\n        (a, b)\n       \\<le> mone (a, b)", "also"], ["proof (state)\nthis:\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum\n        (\\<lambda>k.\n            (minarc\\<^sub>M f) (k, i)\\<^sup>T * top *\n            (minarc\\<^sub>M f) (l, j))\n        {k. True})\n   {l. True} =\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum\n        (\\<lambda>k.\n            if i = j \\<and> l = k\n            then (minarc\\<^sub>M f) (k, i)\\<^sup>T * top *\n                 (minarc\\<^sub>M f) (l, j)\n            else bot)\n        {k. True})\n   {l. True}\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> minarc\\<^sub>M f)\n        (a, b)\n       \\<le> mone (a, b)", "have \"... = (if i = j then (\\<Squnion>\\<^sub>l \\<Squnion>\\<^sub>k if l = k then ((minarc\\<^sub>M f) (k,i))\\<^sup>T * top * (minarc\\<^sub>M f) (l,j) else bot) else bot)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sup_monoid.sum\n     (\\<lambda>l.\n         sup_monoid.sum\n          (\\<lambda>k.\n              if i = j \\<and> l = k\n              then (minarc\\<^sub>M f) (k, i)\\<^sup>T * top *\n                   (minarc\\<^sub>M f) (l, j)\n              else bot)\n          {k. True})\n     {l. True} =\n    (if i = j\n     then sup_monoid.sum\n           (\\<lambda>l.\n               sup_monoid.sum\n                (\\<lambda>k.\n                    if l = k\n                    then (minarc\\<^sub>M f) (k, i)\\<^sup>T * top *\n                         (minarc\\<^sub>M f) (l, j)\n                    else bot)\n                {k. True})\n           {l. True}\n     else bot)", "by auto"], ["proof (state)\nthis:\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum\n        (\\<lambda>k.\n            if i = j \\<and> l = k\n            then (minarc\\<^sub>M f) (k, i)\\<^sup>T * top *\n                 (minarc\\<^sub>M f) (l, j)\n            else bot)\n        {k. True})\n   {l. True} =\n  (if i = j\n   then sup_monoid.sum\n         (\\<lambda>l.\n             sup_monoid.sum\n              (\\<lambda>k.\n                  if l = k\n                  then (minarc\\<^sub>M f) (k, i)\\<^sup>T * top *\n                       (minarc\\<^sub>M f) (l, j)\n                  else bot)\n              {k. True})\n         {l. True}\n   else bot)\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> minarc\\<^sub>M f)\n        (a, b)\n       \\<le> mone (a, b)", "also"], ["proof (state)\nthis:\n  sup_monoid.sum\n   (\\<lambda>l.\n       sup_monoid.sum\n        (\\<lambda>k.\n            if i = j \\<and> l = k\n            then (minarc\\<^sub>M f) (k, i)\\<^sup>T * top *\n                 (minarc\\<^sub>M f) (l, j)\n            else bot)\n        {k. True})\n   {l. True} =\n  (if i = j\n   then sup_monoid.sum\n         (\\<lambda>l.\n             sup_monoid.sum\n              (\\<lambda>k.\n                  if l = k\n                  then (minarc\\<^sub>M f) (k, i)\\<^sup>T * top *\n                       (minarc\\<^sub>M f) (l, j)\n                  else bot)\n              {k. True})\n         {l. True}\n   else bot)\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> minarc\\<^sub>M f)\n        (a, b)\n       \\<le> mone (a, b)", "have \"... \\<le> (if i = j then top else bot)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i = j\n     then sup_monoid.sum\n           (\\<lambda>l.\n               sup_monoid.sum\n                (\\<lambda>k.\n                    if l = k\n                    then (minarc\\<^sub>M f) (k, i)\\<^sup>T * top *\n                         (minarc\\<^sub>M f) (l, j)\n                    else bot)\n                {k. True})\n           {l. True}\n     else bot)\n    \\<le> (if i = j then top else bot)", "by simp"], ["proof (state)\nthis:\n  (if i = j\n   then sup_monoid.sum\n         (\\<lambda>l.\n             sup_monoid.sum\n              (\\<lambda>k.\n                  if l = k\n                  then (minarc\\<^sub>M f) (k, i)\\<^sup>T * top *\n                       (minarc\\<^sub>M f) (l, j)\n                  else bot)\n              {k. True})\n         {l. True}\n   else bot)\n  \\<le> (if i = j then top else bot)\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> minarc\\<^sub>M f)\n        (a, b)\n       \\<le> mone (a, b)", "also"], ["proof (state)\nthis:\n  (if i = j\n   then sup_monoid.sum\n         (\\<lambda>l.\n             sup_monoid.sum\n              (\\<lambda>k.\n                  if l = k\n                  then (minarc\\<^sub>M f) (k, i)\\<^sup>T * top *\n                       (minarc\\<^sub>M f) (l, j)\n                  else bot)\n              {k. True})\n         {l. True}\n   else bot)\n  \\<le> (if i = j then top else bot)\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> minarc\\<^sub>M f)\n        (a, b)\n       \\<le> mone (a, b)", "have \"... = mone (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i = j then top else bot) = mone (i, j)", "by (simp add: one_matrix_def)"], ["proof (state)\nthis:\n  (if i = j then top else bot) = mone (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> minarc\\<^sub>M f)\n        (a, b)\n       \\<le> mone (a, b)", "finally"], ["proof (chain)\npicking this:\n  ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> minarc\\<^sub>M f) (i, j)\n  \\<le> mone (i, j)", "show \"((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> (minarc\\<^sub>M f)) (i,j) \\<le> mone (i,j)\""], ["proof (prove)\nusing this:\n  ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> minarc\\<^sub>M f) (i, j)\n  \\<le> mone (i, j)\n\ngoal (1 subgoal):\n 1. ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> minarc\\<^sub>M f)\n     (i, j)\n    \\<le> mone (i, j)", "."], ["proof (state)\nthis:\n  ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> minarc\\<^sub>M f) (i, j)\n  \\<le> mone (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  matrix_idempotent_semiring.coreflexive\n   ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> minarc\\<^sub>M f)\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<Longrightarrow>\n    matrix_stone_relation_algebra.arc (minarc\\<^sub>M f)", "finally"], ["proof (chain)\npicking this:\n  matrix_stone_relation_algebra.injective\n   ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop)", "have 5: \"(minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop \\<odot> ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop)\\<^sup>t \\<preceq> mone\""], ["proof (prove)\nusing this:\n  matrix_stone_relation_algebra.injective\n   ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop)\n\ngoal (1 subgoal):\n 1. matrix_stone_relation_algebra.injective\n     ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop)", "."], ["proof (state)\nthis:\n  matrix_stone_relation_algebra.injective\n   ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop)\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<Longrightarrow>\n    matrix_stone_relation_algebra.arc (minarc\\<^sub>M f)", "have \"mtop \\<odot> ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop) = mtop\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_bounded_idempotent_semiring.surjective\n     ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop)", "using 3"], ["proof (prove)\nusing this:\n  matrix_bounded_idempotent_semiring.surjective\n   (minarc\\<^sub>M f \\<odot> mtop)\n\ngoal (1 subgoal):\n 1. matrix_bounded_idempotent_semiring.surjective\n     ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop)", "by (metis matrix_monoid.mult_assoc matrix_stone_relation_algebra.conv_dist_comp matrix_stone_relation_algebra.conv_top)"], ["proof (state)\nthis:\n  matrix_bounded_idempotent_semiring.surjective\n   ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop)\n\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<Longrightarrow>\n    matrix_stone_relation_algebra.arc (minarc\\<^sub>M f)", "thus \"?at (minarc\\<^sub>M f)\""], ["proof (prove)\nusing this:\n  matrix_bounded_idempotent_semiring.surjective\n   ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop)\n\ngoal (1 subgoal):\n 1. matrix_stone_relation_algebra.arc (minarc\\<^sub>M f)", "using 2 3 5"], ["proof (prove)\nusing this:\n  matrix_bounded_idempotent_semiring.surjective\n   ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop)\n  matrix_stone_relation_algebra.injective (minarc\\<^sub>M f \\<odot> mtop)\n  matrix_bounded_idempotent_semiring.surjective\n   (minarc\\<^sub>M f \\<odot> mtop)\n  matrix_stone_relation_algebra.injective\n   ((minarc\\<^sub>M f)\\<^sup>t \\<odot> mtop)\n\ngoal (1 subgoal):\n 1. matrix_stone_relation_algebra.arc (minarc\\<^sub>M f)", "by blast"], ["proof (state)\nthis:\n  matrix_stone_relation_algebra.arc (minarc\\<^sub>M f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f \\<noteq> mbot \\<longrightarrow>\n  matrix_stone_relation_algebra.arc (minarc\\<^sub>M f)\n\ngoal (3 subgoals):\n 1. \\<And>y x.\n       matrix_stone_relation_algebra.arc y \\<and>\n       y \\<otimes> x \\<noteq> mbot \\<longrightarrow>\n       sum\\<^sub>M (minarc\\<^sub>M x \\<otimes> x) \\<preceq>\n       sum\\<^sub>M (y \\<otimes> x)\n 2. \\<And>x y.\n       sum\\<^sub>M x \\<preceq> sum\\<^sub>M y \\<or>\n       sum\\<^sub>M y \\<preceq> sum\\<^sub>M x\n 3. finite {x. matrix_p_algebra.regular x}", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>y x.\n       matrix_stone_relation_algebra.arc y \\<and>\n       y \\<otimes> x \\<noteq> mbot \\<longrightarrow>\n       sum\\<^sub>M (minarc\\<^sub>M x \\<otimes> x) \\<preceq>\n       sum\\<^sub>M (y \\<otimes> x)\n 2. \\<And>x y.\n       sum\\<^sub>M x \\<preceq> sum\\<^sub>M y \\<or>\n       sum\\<^sub>M y \\<preceq> sum\\<^sub>M x\n 3. finite {x. matrix_p_algebra.regular x}", "fix f g :: \"('a,'b) square\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>y x.\n       matrix_stone_relation_algebra.arc y \\<and>\n       y \\<otimes> x \\<noteq> mbot \\<longrightarrow>\n       sum\\<^sub>M (minarc\\<^sub>M x \\<otimes> x) \\<preceq>\n       sum\\<^sub>M (y \\<otimes> x)\n 2. \\<And>x y.\n       sum\\<^sub>M x \\<preceq> sum\\<^sub>M y \\<or>\n       sum\\<^sub>M y \\<preceq> sum\\<^sub>M x\n 3. finite {x. matrix_p_algebra.regular x}", "let ?at = \"bounded_distrib_allegory_signature.arc mone times_matrix less_eq_matrix mtop conv_matrix\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>y x.\n       matrix_stone_relation_algebra.arc y \\<and>\n       y \\<otimes> x \\<noteq> mbot \\<longrightarrow>\n       sum\\<^sub>M (minarc\\<^sub>M x \\<otimes> x) \\<preceq>\n       sum\\<^sub>M (y \\<otimes> x)\n 2. \\<And>x y.\n       sum\\<^sub>M x \\<preceq> sum\\<^sub>M y \\<or>\n       sum\\<^sub>M y \\<preceq> sum\\<^sub>M x\n 3. finite {x. matrix_p_algebra.regular x}", "show \"?at g \\<and> g \\<otimes> f \\<noteq> mbot \\<longrightarrow> sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f) \\<preceq> sum\\<^sub>M (g \\<otimes> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_stone_relation_algebra.arc g \\<and>\n    g \\<otimes> f \\<noteq> mbot \\<longrightarrow>\n    sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f) \\<preceq>\n    sum\\<^sub>M (g \\<otimes> f)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. matrix_stone_relation_algebra.arc g \\<and>\n    g \\<otimes> f \\<noteq> mbot \\<Longrightarrow>\n    sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f) \\<preceq>\n    sum\\<^sub>M (g \\<otimes> f)", "assume 1: \"?at g \\<and> g \\<otimes> f \\<noteq> mbot\""], ["proof (state)\nthis:\n  matrix_stone_relation_algebra.arc g \\<and> g \\<otimes> f \\<noteq> mbot\n\ngoal (1 subgoal):\n 1. matrix_stone_relation_algebra.arc g \\<and>\n    g \\<otimes> f \\<noteq> mbot \\<Longrightarrow>\n    sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f) \\<preceq>\n    sum\\<^sub>M (g \\<otimes> f)", "hence 2: \"g = \\<ominus>\\<ominus>g\""], ["proof (prove)\nusing this:\n  matrix_stone_relation_algebra.arc g \\<and> g \\<otimes> f \\<noteq> mbot\n\ngoal (1 subgoal):\n 1. matrix_p_algebra.regular g", "using matrix_stone_relation_algebra.arc_regular"], ["proof (prove)\nusing this:\n  matrix_stone_relation_algebra.arc g \\<and> g \\<otimes> f \\<noteq> mbot\n  matrix_stone_relation_algebra.arc ?x \\<Longrightarrow>\n  matrix_p_algebra.regular ?x\n\ngoal (1 subgoal):\n 1. matrix_p_algebra.regular g", "by blast"], ["proof (state)\nthis:\n  matrix_p_algebra.regular g\n\ngoal (1 subgoal):\n 1. matrix_stone_relation_algebra.arc g \\<and>\n    g \\<otimes> f \\<noteq> mbot \\<Longrightarrow>\n    sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f) \\<preceq>\n    sum\\<^sub>M (g \\<otimes> f)", "show \"sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f) \\<preceq> sum\\<^sub>M (g \\<otimes> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f) \\<preceq>\n    sum\\<^sub>M (g \\<otimes> f)", "proof (unfold less_eq_matrix_def, rule allI, rule prod_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (a, b)\n       \\<le> (sum\\<^sub>M (g \\<otimes> f)) (a, b)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (a, b)\n       \\<le> (sum\\<^sub>M (g \\<otimes> f)) (a, b)", "from minarc_at_least_one"], ["proof (chain)\npicking this:\n  ?f \\<noteq> mbot \\<Longrightarrow> \\<exists>e. (minarc\\<^sub>M ?f) e = top", "obtain ei ej where 3: \"(minarc\\<^sub>M f) (ei,ej) = top\""], ["proof (prove)\nusing this:\n  ?f \\<noteq> mbot \\<Longrightarrow> \\<exists>e. (minarc\\<^sub>M ?f) e = top\n\ngoal (1 subgoal):\n 1. (\\<And>ei ej.\n        (minarc\\<^sub>M f) (ei, ej) = top \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using 1"], ["proof (prove)\nusing this:\n  ?f \\<noteq> mbot \\<Longrightarrow> \\<exists>e. (minarc\\<^sub>M ?f) e = top\n  matrix_stone_relation_algebra.arc g \\<and> g \\<otimes> f \\<noteq> mbot\n\ngoal (1 subgoal):\n 1. (\\<And>ei ej.\n        (minarc\\<^sub>M f) (ei, ej) = top \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  (minarc\\<^sub>M f) (ei, ej) = top\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (a, b)\n       \\<le> (sum\\<^sub>M (g \\<otimes> f)) (a, b)", "hence 4: \"\\<forall>k l . \\<not>(k = ei \\<and> l = ej) \\<longrightarrow> (minarc\\<^sub>M f) (k,l) = bot\""], ["proof (prove)\nusing this:\n  (minarc\\<^sub>M f) (ei, ej) = top\n\ngoal (1 subgoal):\n 1. \\<forall>k l.\n       \\<not> (k = ei \\<and> l = ej) \\<longrightarrow>\n       (minarc\\<^sub>M f) (k, l) = bot", "by (metis (mono_tags, hide_lams) bot.extremum inf.bot_unique prod.inject minarc_at_most_one)"], ["proof (state)\nthis:\n  \\<forall>k l.\n     \\<not> (k = ei \\<and> l = ej) \\<longrightarrow>\n     (minarc\\<^sub>M f) (k, l) = bot\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (a, b)\n       \\<le> (sum\\<^sub>M (g \\<otimes> f)) (a, b)", "from agg_matrix_bot"], ["proof (chain)\npicking this:\n  \\<forall>i j. ?f (i, j) = bot \\<Longrightarrow> ?f = mbot", "obtain di dj where 5: \"(g \\<otimes> f) (di,dj) \\<noteq> bot\""], ["proof (prove)\nusing this:\n  \\<forall>i j. ?f (i, j) = bot \\<Longrightarrow> ?f = mbot\n\ngoal (1 subgoal):\n 1. (\\<And>di dj.\n        (g \\<otimes> f) (di, dj) \\<noteq> bot \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using 1"], ["proof (prove)\nusing this:\n  \\<forall>i j. ?f (i, j) = bot \\<Longrightarrow> ?f = mbot\n  matrix_stone_relation_algebra.arc g \\<and> g \\<otimes> f \\<noteq> mbot\n\ngoal (1 subgoal):\n 1. (\\<And>di dj.\n        (g \\<otimes> f) (di, dj) \\<noteq> bot \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  (g \\<otimes> f) (di, dj) \\<noteq> bot\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (a, b)\n       \\<le> (sum\\<^sub>M (g \\<otimes> f)) (a, b)", "hence 6: \"g (di,dj) \\<noteq> bot\""], ["proof (prove)\nusing this:\n  (g \\<otimes> f) (di, dj) \\<noteq> bot\n\ngoal (1 subgoal):\n 1. g (di, dj) \\<noteq> bot", "by (metis inf_bot_left inf_matrix_def)"], ["proof (state)\nthis:\n  g (di, dj) \\<noteq> bot\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (a, b)\n       \\<le> (sum\\<^sub>M (g \\<otimes> f)) (a, b)", "hence 7: \"g (di,dj) = top\""], ["proof (prove)\nusing this:\n  g (di, dj) \\<noteq> bot\n\ngoal (1 subgoal):\n 1. g (di, dj) = top", "using 2"], ["proof (prove)\nusing this:\n  g (di, dj) \\<noteq> bot\n  matrix_p_algebra.regular g\n\ngoal (1 subgoal):\n 1. g (di, dj) = top", "by (metis uminus_matrix_def uminus_def)"], ["proof (state)\nthis:\n  g (di, dj) = top\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (a, b)\n       \\<le> (sum\\<^sub>M (g \\<otimes> f)) (a, b)", "hence 8: \"(g \\<otimes> f) (di,dj) = f (di,dj)\""], ["proof (prove)\nusing this:\n  g (di, dj) = top\n\ngoal (1 subgoal):\n 1. (g \\<otimes> f) (di, dj) = f (di, dj)", "by (metis inf_matrix_def inf_top.left_neutral)"], ["proof (state)\nthis:\n  (g \\<otimes> f) (di, dj) = f (di, dj)\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (a, b)\n       \\<le> (sum\\<^sub>M (g \\<otimes> f)) (a, b)", "have 9: \"\\<forall>k l . k \\<noteq> di \\<longrightarrow> g (k,l) = bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>k l. k \\<noteq> di \\<longrightarrow> g (k, l) = bot", "proof (intro allI, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k l. k \\<noteq> di \\<Longrightarrow> g (k, l) = bot", "fix k l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k l. k \\<noteq> di \\<Longrightarrow> g (k, l) = bot", "assume 10: \"k \\<noteq> di\""], ["proof (state)\nthis:\n  k \\<noteq> di\n\ngoal (1 subgoal):\n 1. \\<And>k l. k \\<noteq> di \\<Longrightarrow> g (k, l) = bot", "have \"top * (g (k,l))\\<^sup>T = g (di,dj) * top * (g\\<^sup>t) (l,k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. top * g (k, l)\\<^sup>T = g (di, dj) * top * (g\\<^sup>t) (l, k)", "using 7"], ["proof (prove)\nusing this:\n  g (di, dj) = top\n\ngoal (1 subgoal):\n 1. top * g (k, l)\\<^sup>T = g (di, dj) * top * (g\\<^sup>t) (l, k)", "by (simp add: conv_matrix_def)"], ["proof (state)\nthis:\n  top * g (k, l)\\<^sup>T = g (di, dj) * top * (g\\<^sup>t) (l, k)\n\ngoal (1 subgoal):\n 1. \\<And>k l. k \\<noteq> di \\<Longrightarrow> g (k, l) = bot", "also"], ["proof (state)\nthis:\n  top * g (k, l)\\<^sup>T = g (di, dj) * top * (g\\<^sup>t) (l, k)\n\ngoal (1 subgoal):\n 1. \\<And>k l. k \\<noteq> di \\<Longrightarrow> g (k, l) = bot", "have \"... \\<le> (\\<Squnion>\\<^sub>n g (di,n) * top) * (g\\<^sup>t) (l,k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g (di, dj) * top * (g\\<^sup>t) (l, k)\n    \\<le> sup_monoid.sum (\\<lambda>n. g (di, n) * top) {n. True} *\n          (g\\<^sup>t) (l, k)", "by (metis comp_inf.ub_sum comp_right_dist_sum)"], ["proof (state)\nthis:\n  g (di, dj) * top * (g\\<^sup>t) (l, k)\n  \\<le> sup_monoid.sum (\\<lambda>n. g (di, n) * top) {n. True} *\n        (g\\<^sup>t) (l, k)\n\ngoal (1 subgoal):\n 1. \\<And>k l. k \\<noteq> di \\<Longrightarrow> g (k, l) = bot", "also"], ["proof (state)\nthis:\n  g (di, dj) * top * (g\\<^sup>t) (l, k)\n  \\<le> sup_monoid.sum (\\<lambda>n. g (di, n) * top) {n. True} *\n        (g\\<^sup>t) (l, k)\n\ngoal (1 subgoal):\n 1. \\<And>k l. k \\<noteq> di \\<Longrightarrow> g (k, l) = bot", "have \"... \\<le> (\\<Squnion>\\<^sub>m (\\<Squnion>\\<^sub>n g (di,n) * top) * (g\\<^sup>t) (m,k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sup_monoid.sum (\\<lambda>n. g (di, n) * top) {n. True} *\n    (g\\<^sup>t) (l, k)\n    \\<le> sup_monoid.sum\n           (\\<lambda>m.\n               sup_monoid.sum (\\<lambda>n. g (di, n) * top) {n. True} *\n               (g\\<^sup>t) (m, k))\n           {m. True}", "by (metis comp_inf.ub_sum)"], ["proof (state)\nthis:\n  sup_monoid.sum (\\<lambda>n. g (di, n) * top) {n. True} *\n  (g\\<^sup>t) (l, k)\n  \\<le> sup_monoid.sum\n         (\\<lambda>m.\n             sup_monoid.sum (\\<lambda>n. g (di, n) * top) {n. True} *\n             (g\\<^sup>t) (m, k))\n         {m. True}\n\ngoal (1 subgoal):\n 1. \\<And>k l. k \\<noteq> di \\<Longrightarrow> g (k, l) = bot", "also"], ["proof (state)\nthis:\n  sup_monoid.sum (\\<lambda>n. g (di, n) * top) {n. True} *\n  (g\\<^sup>t) (l, k)\n  \\<le> sup_monoid.sum\n         (\\<lambda>m.\n             sup_monoid.sum (\\<lambda>n. g (di, n) * top) {n. True} *\n             (g\\<^sup>t) (m, k))\n         {m. True}\n\ngoal (1 subgoal):\n 1. \\<And>k l. k \\<noteq> di \\<Longrightarrow> g (k, l) = bot", "have \"... = (g \\<odot> mtop \\<odot> g\\<^sup>t) (di,k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sup_monoid.sum\n     (\\<lambda>m.\n         sup_monoid.sum (\\<lambda>n. g (di, n) * top) {n. True} *\n         (g\\<^sup>t) (m, k))\n     {m. True} =\n    (g \\<odot> mtop \\<odot> g\\<^sup>t) (di, k)", "by (simp add: times_matrix_def top_matrix_def)"], ["proof (state)\nthis:\n  sup_monoid.sum\n   (\\<lambda>m.\n       sup_monoid.sum (\\<lambda>n. g (di, n) * top) {n. True} *\n       (g\\<^sup>t) (m, k))\n   {m. True} =\n  (g \\<odot> mtop \\<odot> g\\<^sup>t) (di, k)\n\ngoal (1 subgoal):\n 1. \\<And>k l. k \\<noteq> di \\<Longrightarrow> g (k, l) = bot", "also"], ["proof (state)\nthis:\n  sup_monoid.sum\n   (\\<lambda>m.\n       sup_monoid.sum (\\<lambda>n. g (di, n) * top) {n. True} *\n       (g\\<^sup>t) (m, k))\n   {m. True} =\n  (g \\<odot> mtop \\<odot> g\\<^sup>t) (di, k)\n\ngoal (1 subgoal):\n 1. \\<And>k l. k \\<noteq> di \\<Longrightarrow> g (k, l) = bot", "have \"... \\<le> mone (di,k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (g \\<odot> mtop \\<odot> g\\<^sup>t) (di, k) \\<le> mone (di, k)", "using 1"], ["proof (prove)\nusing this:\n  matrix_stone_relation_algebra.arc g \\<and> g \\<otimes> f \\<noteq> mbot\n\ngoal (1 subgoal):\n 1. (g \\<odot> mtop \\<odot> g\\<^sup>t) (di, k) \\<le> mone (di, k)", "by (metis matrix_stone_relation_algebra.arc_expanded less_eq_matrix_def)"], ["proof (state)\nthis:\n  (g \\<odot> mtop \\<odot> g\\<^sup>t) (di, k) \\<le> mone (di, k)\n\ngoal (1 subgoal):\n 1. \\<And>k l. k \\<noteq> di \\<Longrightarrow> g (k, l) = bot", "also"], ["proof (state)\nthis:\n  (g \\<odot> mtop \\<odot> g\\<^sup>t) (di, k) \\<le> mone (di, k)\n\ngoal (1 subgoal):\n 1. \\<And>k l. k \\<noteq> di \\<Longrightarrow> g (k, l) = bot", "have \"... = bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mone (di, k) = bot", "apply (unfold one_matrix_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case (di, k) of (i, j) \\<Rightarrow> if i = j then 1::'b else bot) =\n    bot", "using 10"], ["proof (prove)\nusing this:\n  k \\<noteq> di\n\ngoal (1 subgoal):\n 1. (case (di, k) of (i, j) \\<Rightarrow> if i = j then 1::'b else bot) =\n    bot", "by auto"], ["proof (state)\nthis:\n  mone (di, k) = bot\n\ngoal (1 subgoal):\n 1. \\<And>k l. k \\<noteq> di \\<Longrightarrow> g (k, l) = bot", "finally"], ["proof (chain)\npicking this:\n  top * g (k, l)\\<^sup>T \\<le> bot", "have \"g (k,l) \\<noteq> top\""], ["proof (prove)\nusing this:\n  top * g (k, l)\\<^sup>T \\<le> bot\n\ngoal (1 subgoal):\n 1. g (k, l) \\<noteq> top", "using 5"], ["proof (prove)\nusing this:\n  top * g (k, l)\\<^sup>T \\<le> bot\n  (g \\<otimes> f) (di, dj) \\<noteq> bot\n\ngoal (1 subgoal):\n 1. g (k, l) \\<noteq> top", "by (metis bot.extremum conv_def inf.bot_unique mult.left_neutral one_def)"], ["proof (state)\nthis:\n  g (k, l) \\<noteq> top\n\ngoal (1 subgoal):\n 1. \\<And>k l. k \\<noteq> di \\<Longrightarrow> g (k, l) = bot", "thus \"g (k,l) = bot\""], ["proof (prove)\nusing this:\n  g (k, l) \\<noteq> top\n\ngoal (1 subgoal):\n 1. g (k, l) = bot", "using 2"], ["proof (prove)\nusing this:\n  g (k, l) \\<noteq> top\n  matrix_p_algebra.regular g\n\ngoal (1 subgoal):\n 1. g (k, l) = bot", "by (metis uminus_def uminus_matrix_def)"], ["proof (state)\nthis:\n  g (k, l) = bot\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>k l. k \\<noteq> di \\<longrightarrow> g (k, l) = bot\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (a, b)\n       \\<le> (sum\\<^sub>M (g \\<otimes> f)) (a, b)", "have \"\\<forall>k l . l \\<noteq> dj \\<longrightarrow> g (k,l) = bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>k l. l \\<noteq> dj \\<longrightarrow> g (k, l) = bot", "proof (intro allI, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k l. l \\<noteq> dj \\<Longrightarrow> g (k, l) = bot", "fix k l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k l. l \\<noteq> dj \\<Longrightarrow> g (k, l) = bot", "assume 11: \"l \\<noteq> dj\""], ["proof (state)\nthis:\n  l \\<noteq> dj\n\ngoal (1 subgoal):\n 1. \\<And>k l. l \\<noteq> dj \\<Longrightarrow> g (k, l) = bot", "have \"(g (k,l))\\<^sup>T * top = (g\\<^sup>t) (l,k) * top * g (di,dj)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g (k, l)\\<^sup>T * top = (g\\<^sup>t) (l, k) * top * g (di, dj)", "using 7"], ["proof (prove)\nusing this:\n  g (di, dj) = top\n\ngoal (1 subgoal):\n 1. g (k, l)\\<^sup>T * top = (g\\<^sup>t) (l, k) * top * g (di, dj)", "by (simp add: comp_associative conv_matrix_def)"], ["proof (state)\nthis:\n  g (k, l)\\<^sup>T * top = (g\\<^sup>t) (l, k) * top * g (di, dj)\n\ngoal (1 subgoal):\n 1. \\<And>k l. l \\<noteq> dj \\<Longrightarrow> g (k, l) = bot", "also"], ["proof (state)\nthis:\n  g (k, l)\\<^sup>T * top = (g\\<^sup>t) (l, k) * top * g (di, dj)\n\ngoal (1 subgoal):\n 1. \\<And>k l. l \\<noteq> dj \\<Longrightarrow> g (k, l) = bot", "have \"... \\<le> (\\<Squnion>\\<^sub>n (g\\<^sup>t) (l,n) * top) * g (di,dj)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (g\\<^sup>t) (l, k) * top * g (di, dj)\n    \\<le> sup_monoid.sum (\\<lambda>n. (g\\<^sup>t) (l, n) * top) {n. True} *\n          g (di, dj)", "by (metis comp_inf.ub_sum comp_right_dist_sum)"], ["proof (state)\nthis:\n  (g\\<^sup>t) (l, k) * top * g (di, dj)\n  \\<le> sup_monoid.sum (\\<lambda>n. (g\\<^sup>t) (l, n) * top) {n. True} *\n        g (di, dj)\n\ngoal (1 subgoal):\n 1. \\<And>k l. l \\<noteq> dj \\<Longrightarrow> g (k, l) = bot", "also"], ["proof (state)\nthis:\n  (g\\<^sup>t) (l, k) * top * g (di, dj)\n  \\<le> sup_monoid.sum (\\<lambda>n. (g\\<^sup>t) (l, n) * top) {n. True} *\n        g (di, dj)\n\ngoal (1 subgoal):\n 1. \\<And>k l. l \\<noteq> dj \\<Longrightarrow> g (k, l) = bot", "have \"... \\<le> (\\<Squnion>\\<^sub>m (\\<Squnion>\\<^sub>n (g\\<^sup>t) (l,n) * top) * g (m,dj))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sup_monoid.sum (\\<lambda>n. (g\\<^sup>t) (l, n) * top) {n. True} *\n    g (di, dj)\n    \\<le> sup_monoid.sum\n           (\\<lambda>m.\n               sup_monoid.sum (\\<lambda>n. (g\\<^sup>t) (l, n) * top)\n                {n. True} *\n               g (m, dj))\n           {m. True}", "by (metis comp_inf.ub_sum)"], ["proof (state)\nthis:\n  sup_monoid.sum (\\<lambda>n. (g\\<^sup>t) (l, n) * top) {n. True} *\n  g (di, dj)\n  \\<le> sup_monoid.sum\n         (\\<lambda>m.\n             sup_monoid.sum (\\<lambda>n. (g\\<^sup>t) (l, n) * top)\n              {n. True} *\n             g (m, dj))\n         {m. True}\n\ngoal (1 subgoal):\n 1. \\<And>k l. l \\<noteq> dj \\<Longrightarrow> g (k, l) = bot", "also"], ["proof (state)\nthis:\n  sup_monoid.sum (\\<lambda>n. (g\\<^sup>t) (l, n) * top) {n. True} *\n  g (di, dj)\n  \\<le> sup_monoid.sum\n         (\\<lambda>m.\n             sup_monoid.sum (\\<lambda>n. (g\\<^sup>t) (l, n) * top)\n              {n. True} *\n             g (m, dj))\n         {m. True}\n\ngoal (1 subgoal):\n 1. \\<And>k l. l \\<noteq> dj \\<Longrightarrow> g (k, l) = bot", "have \"... = (g\\<^sup>t \\<odot> mtop \\<odot> g) (l,dj)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sup_monoid.sum\n     (\\<lambda>m.\n         sup_monoid.sum (\\<lambda>n. (g\\<^sup>t) (l, n) * top) {n. True} *\n         g (m, dj))\n     {m. True} =\n    (g\\<^sup>t \\<odot> mtop \\<odot> g) (l, dj)", "by (simp add: times_matrix_def top_matrix_def)"], ["proof (state)\nthis:\n  sup_monoid.sum\n   (\\<lambda>m.\n       sup_monoid.sum (\\<lambda>n. (g\\<^sup>t) (l, n) * top) {n. True} *\n       g (m, dj))\n   {m. True} =\n  (g\\<^sup>t \\<odot> mtop \\<odot> g) (l, dj)\n\ngoal (1 subgoal):\n 1. \\<And>k l. l \\<noteq> dj \\<Longrightarrow> g (k, l) = bot", "also"], ["proof (state)\nthis:\n  sup_monoid.sum\n   (\\<lambda>m.\n       sup_monoid.sum (\\<lambda>n. (g\\<^sup>t) (l, n) * top) {n. True} *\n       g (m, dj))\n   {m. True} =\n  (g\\<^sup>t \\<odot> mtop \\<odot> g) (l, dj)\n\ngoal (1 subgoal):\n 1. \\<And>k l. l \\<noteq> dj \\<Longrightarrow> g (k, l) = bot", "have \"... \\<le> mone (l,dj)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (g\\<^sup>t \\<odot> mtop \\<odot> g) (l, dj) \\<le> mone (l, dj)", "using 1"], ["proof (prove)\nusing this:\n  matrix_stone_relation_algebra.arc g \\<and> g \\<otimes> f \\<noteq> mbot\n\ngoal (1 subgoal):\n 1. (g\\<^sup>t \\<odot> mtop \\<odot> g) (l, dj) \\<le> mone (l, dj)", "by (metis matrix_stone_relation_algebra.arc_expanded less_eq_matrix_def)"], ["proof (state)\nthis:\n  (g\\<^sup>t \\<odot> mtop \\<odot> g) (l, dj) \\<le> mone (l, dj)\n\ngoal (1 subgoal):\n 1. \\<And>k l. l \\<noteq> dj \\<Longrightarrow> g (k, l) = bot", "also"], ["proof (state)\nthis:\n  (g\\<^sup>t \\<odot> mtop \\<odot> g) (l, dj) \\<le> mone (l, dj)\n\ngoal (1 subgoal):\n 1. \\<And>k l. l \\<noteq> dj \\<Longrightarrow> g (k, l) = bot", "have \"... = bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mone (l, dj) = bot", "apply (unfold one_matrix_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case (l, dj) of (i, j) \\<Rightarrow> if i = j then 1::'b else bot) =\n    bot", "using 11"], ["proof (prove)\nusing this:\n  l \\<noteq> dj\n\ngoal (1 subgoal):\n 1. (case (l, dj) of (i, j) \\<Rightarrow> if i = j then 1::'b else bot) =\n    bot", "by auto"], ["proof (state)\nthis:\n  mone (l, dj) = bot\n\ngoal (1 subgoal):\n 1. \\<And>k l. l \\<noteq> dj \\<Longrightarrow> g (k, l) = bot", "finally"], ["proof (chain)\npicking this:\n  g (k, l)\\<^sup>T * top \\<le> bot", "have \"g (k,l) \\<noteq> top\""], ["proof (prove)\nusing this:\n  g (k, l)\\<^sup>T * top \\<le> bot\n\ngoal (1 subgoal):\n 1. g (k, l) \\<noteq> top", "using 5"], ["proof (prove)\nusing this:\n  g (k, l)\\<^sup>T * top \\<le> bot\n  (g \\<otimes> f) (di, dj) \\<noteq> bot\n\ngoal (1 subgoal):\n 1. g (k, l) \\<noteq> top", "by (metis bot.extremum comp_right_one conv_def one_def top.extremum_unique)"], ["proof (state)\nthis:\n  g (k, l) \\<noteq> top\n\ngoal (1 subgoal):\n 1. \\<And>k l. l \\<noteq> dj \\<Longrightarrow> g (k, l) = bot", "thus \"g (k,l) = bot\""], ["proof (prove)\nusing this:\n  g (k, l) \\<noteq> top\n\ngoal (1 subgoal):\n 1. g (k, l) = bot", "using 2"], ["proof (prove)\nusing this:\n  g (k, l) \\<noteq> top\n  matrix_p_algebra.regular g\n\ngoal (1 subgoal):\n 1. g (k, l) = bot", "by (metis uminus_def uminus_matrix_def)"], ["proof (state)\nthis:\n  g (k, l) = bot\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>k l. l \\<noteq> dj \\<longrightarrow> g (k, l) = bot\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (a, b)\n       \\<le> (sum\\<^sub>M (g \\<otimes> f)) (a, b)", "hence 12: \"\\<forall>k l . \\<not>(k = di \\<and> l = dj) \\<longrightarrow> (g \\<otimes> f) (k,l) = bot\""], ["proof (prove)\nusing this:\n  \\<forall>k l. l \\<noteq> dj \\<longrightarrow> g (k, l) = bot\n\ngoal (1 subgoal):\n 1. \\<forall>k l.\n       \\<not> (k = di \\<and> l = dj) \\<longrightarrow>\n       (g \\<otimes> f) (k, l) = bot", "using 9"], ["proof (prove)\nusing this:\n  \\<forall>k l. l \\<noteq> dj \\<longrightarrow> g (k, l) = bot\n  \\<forall>k l. k \\<noteq> di \\<longrightarrow> g (k, l) = bot\n\ngoal (1 subgoal):\n 1. \\<forall>k l.\n       \\<not> (k = di \\<and> l = dj) \\<longrightarrow>\n       (g \\<otimes> f) (k, l) = bot", "by (metis inf_bot_left inf_matrix_def)"], ["proof (state)\nthis:\n  \\<forall>k l.\n     \\<not> (k = di \\<and> l = dj) \\<longrightarrow>\n     (g \\<otimes> f) (k, l) = bot\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (a, b)\n       \\<le> (sum\\<^sub>M (g \\<otimes> f)) (a, b)", "have \"(\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l (minarc\\<^sub>M f \\<otimes> f) (k,l)) = (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l if k = ei \\<and> l = ej then (minarc\\<^sub>M f \\<otimes> f) (k,l) else (minarc\\<^sub>M f \\<otimes> f) (k,l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0\n          (\\<lambda>l. (minarc\\<^sub>M f \\<otimes> f) (k, l)) {l. True})\n     {k. True} =\n    aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0\n          (\\<lambda>l.\n              if k = ei \\<and> l = ej\n              then (minarc\\<^sub>M f \\<otimes> f) (k, l)\n              else (minarc\\<^sub>M f \\<otimes> f) (k, l))\n          {l. True})\n     {k. True}", "by simp"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. (minarc\\<^sub>M f \\<otimes> f) (k, l))\n        {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l.\n            if k = ei \\<and> l = ej\n            then (minarc\\<^sub>M f \\<otimes> f) (k, l)\n            else (minarc\\<^sub>M f \\<otimes> f) (k, l))\n        {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (a, b)\n       \\<le> (sum\\<^sub>M (g \\<otimes> f)) (a, b)", "also"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. (minarc\\<^sub>M f \\<otimes> f) (k, l))\n        {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l.\n            if k = ei \\<and> l = ej\n            then (minarc\\<^sub>M f \\<otimes> f) (k, l)\n            else (minarc\\<^sub>M f \\<otimes> f) (k, l))\n        {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (a, b)\n       \\<le> (sum\\<^sub>M (g \\<otimes> f)) (a, b)", "have \"... = (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l if k = ei \\<and> l = ej then (minarc\\<^sub>M f \\<otimes> f) (k,l) else (minarc\\<^sub>M f) (k,l) \\<sqinter> f (k,l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0\n          (\\<lambda>l.\n              if k = ei \\<and> l = ej\n              then (minarc\\<^sub>M f \\<otimes> f) (k, l)\n              else (minarc\\<^sub>M f \\<otimes> f) (k, l))\n          {l. True})\n     {k. True} =\n    aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0\n          (\\<lambda>l.\n              if k = ei \\<and> l = ej\n              then (minarc\\<^sub>M f \\<otimes> f) (k, l)\n              else (minarc\\<^sub>M f) (k, l) \\<sqinter> f (k, l))\n          {l. True})\n     {k. True}", "by (unfold inf_matrix_def) simp"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l.\n            if k = ei \\<and> l = ej\n            then (minarc\\<^sub>M f \\<otimes> f) (k, l)\n            else (minarc\\<^sub>M f \\<otimes> f) (k, l))\n        {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l.\n            if k = ei \\<and> l = ej\n            then (minarc\\<^sub>M f \\<otimes> f) (k, l)\n            else (minarc\\<^sub>M f) (k, l) \\<sqinter> f (k, l))\n        {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (a, b)\n       \\<le> (sum\\<^sub>M (g \\<otimes> f)) (a, b)", "also"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l.\n            if k = ei \\<and> l = ej\n            then (minarc\\<^sub>M f \\<otimes> f) (k, l)\n            else (minarc\\<^sub>M f \\<otimes> f) (k, l))\n        {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l.\n            if k = ei \\<and> l = ej\n            then (minarc\\<^sub>M f \\<otimes> f) (k, l)\n            else (minarc\\<^sub>M f) (k, l) \\<sqinter> f (k, l))\n        {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (a, b)\n       \\<le> (sum\\<^sub>M (g \\<otimes> f)) (a, b)", "have \"... = (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l if k = ei \\<and> l = ej then (minarc\\<^sub>M f \\<otimes> f) (k,l) else bot)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0\n          (\\<lambda>l.\n              if k = ei \\<and> l = ej\n              then (minarc\\<^sub>M f \\<otimes> f) (k, l)\n              else (minarc\\<^sub>M f) (k, l) \\<sqinter> f (k, l))\n          {l. True})\n     {k. True} =\n    aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0\n          (\\<lambda>l.\n              if k = ei \\<and> l = ej\n              then (minarc\\<^sub>M f \\<otimes> f) (k, l) else bot)\n          {l. True})\n     {k. True}", "apply (rule aggregation.sum_0.cong)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {k. True} = {k. True}\n 2. \\<And>x.\n       x \\<in> {k. True} \\<Longrightarrow>\n       aggregation.sum_0\n        (\\<lambda>l.\n            if x = ei \\<and> l = ej\n            then (minarc\\<^sub>M f \\<otimes> f) (x, l)\n            else (minarc\\<^sub>M f) (x, l) \\<sqinter> f (x, l))\n        {l. True} =\n       aggregation.sum_0\n        (\\<lambda>l.\n            if x = ei \\<and> l = ej\n            then (minarc\\<^sub>M f \\<otimes> f) (x, l) else bot)\n        {l. True}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {k. True} \\<Longrightarrow>\n       aggregation.sum_0\n        (\\<lambda>l.\n            if x = ei \\<and> l = ej\n            then (minarc\\<^sub>M f \\<otimes> f) (x, l)\n            else (minarc\\<^sub>M f) (x, l) \\<sqinter> f (x, l))\n        {l. True} =\n       aggregation.sum_0\n        (\\<lambda>l.\n            if x = ei \\<and> l = ej\n            then (minarc\\<^sub>M f \\<otimes> f) (x, l) else bot)\n        {l. True}", "using 4"], ["proof (prove)\nusing this:\n  \\<forall>k l.\n     \\<not> (k = ei \\<and> l = ej) \\<longrightarrow>\n     (minarc\\<^sub>M f) (k, l) = bot\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {k. True} \\<Longrightarrow>\n       aggregation.sum_0\n        (\\<lambda>l.\n            if x = ei \\<and> l = ej\n            then (minarc\\<^sub>M f \\<otimes> f) (x, l)\n            else (minarc\\<^sub>M f) (x, l) \\<sqinter> f (x, l))\n        {l. True} =\n       aggregation.sum_0\n        (\\<lambda>l.\n            if x = ei \\<and> l = ej\n            then (minarc\\<^sub>M f \\<otimes> f) (x, l) else bot)\n        {l. True}", "by (metis inf_bot_left)"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l.\n            if k = ei \\<and> l = ej\n            then (minarc\\<^sub>M f \\<otimes> f) (k, l)\n            else (minarc\\<^sub>M f) (k, l) \\<sqinter> f (k, l))\n        {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l.\n            if k = ei \\<and> l = ej\n            then (minarc\\<^sub>M f \\<otimes> f) (k, l) else bot)\n        {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (a, b)\n       \\<le> (sum\\<^sub>M (g \\<otimes> f)) (a, b)", "also"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l.\n            if k = ei \\<and> l = ej\n            then (minarc\\<^sub>M f \\<otimes> f) (k, l)\n            else (minarc\\<^sub>M f) (k, l) \\<sqinter> f (k, l))\n        {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l.\n            if k = ei \\<and> l = ej\n            then (minarc\\<^sub>M f \\<otimes> f) (k, l) else bot)\n        {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (a, b)\n       \\<le> (sum\\<^sub>M (g \\<otimes> f)) (a, b)", "have \"... = (minarc\\<^sub>M f \\<otimes> f) (ei,ej) + bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0\n          (\\<lambda>l.\n              if k = ei \\<and> l = ej\n              then (minarc\\<^sub>M f \\<otimes> f) (k, l) else bot)\n          {l. True})\n     {k. True} =\n    (minarc\\<^sub>M f \\<otimes> f) (ei, ej) + bot", "by (unfold agg_delta_2) simp"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l.\n            if k = ei \\<and> l = ej\n            then (minarc\\<^sub>M f \\<otimes> f) (k, l) else bot)\n        {l. True})\n   {k. True} =\n  (minarc\\<^sub>M f \\<otimes> f) (ei, ej) + bot\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (a, b)\n       \\<le> (sum\\<^sub>M (g \\<otimes> f)) (a, b)", "also"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l.\n            if k = ei \\<and> l = ej\n            then (minarc\\<^sub>M f \\<otimes> f) (k, l) else bot)\n        {l. True})\n   {k. True} =\n  (minarc\\<^sub>M f \\<otimes> f) (ei, ej) + bot\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (a, b)\n       \\<le> (sum\\<^sub>M (g \\<otimes> f)) (a, b)", "have \"... = f (ei,ej) + bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (minarc\\<^sub>M f \\<otimes> f) (ei, ej) + bot = f (ei, ej) + bot", "using 3"], ["proof (prove)\nusing this:\n  (minarc\\<^sub>M f) (ei, ej) = top\n\ngoal (1 subgoal):\n 1. (minarc\\<^sub>M f \\<otimes> f) (ei, ej) + bot = f (ei, ej) + bot", "by (simp add: inf_matrix_def)"], ["proof (state)\nthis:\n  (minarc\\<^sub>M f \\<otimes> f) (ei, ej) + bot = f (ei, ej) + bot\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (a, b)\n       \\<le> (sum\\<^sub>M (g \\<otimes> f)) (a, b)", "also"], ["proof (state)\nthis:\n  (minarc\\<^sub>M f \\<otimes> f) (ei, ej) + bot = f (ei, ej) + bot\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (a, b)\n       \\<le> (sum\\<^sub>M (g \\<otimes> f)) (a, b)", "have \"... \\<le> (g \\<otimes> f) (di,dj) + bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (ei, ej) + bot \\<le> (g \\<otimes> f) (di, dj) + bot", "using 3 5 6 7 8"], ["proof (prove)\nusing this:\n  (minarc\\<^sub>M f) (ei, ej) = top\n  (g \\<otimes> f) (di, dj) \\<noteq> bot\n  g (di, dj) \\<noteq> bot\n  g (di, dj) = top\n  (g \\<otimes> f) (di, dj) = f (di, dj)\n\ngoal (1 subgoal):\n 1. f (ei, ej) + bot \\<le> (g \\<otimes> f) (di, dj) + bot", "by (metis minarc_matrix_def)"], ["proof (state)\nthis:\n  f (ei, ej) + bot \\<le> (g \\<otimes> f) (di, dj) + bot\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (a, b)\n       \\<le> (sum\\<^sub>M (g \\<otimes> f)) (a, b)", "also"], ["proof (state)\nthis:\n  f (ei, ej) + bot \\<le> (g \\<otimes> f) (di, dj) + bot\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (a, b)\n       \\<le> (sum\\<^sub>M (g \\<otimes> f)) (a, b)", "have \"... = (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l if k = di \\<and> l = dj then (g \\<otimes> f) (k,l) else bot)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (g \\<otimes> f) (di, dj) + bot =\n    aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0\n          (\\<lambda>l.\n              if k = di \\<and> l = dj then (g \\<otimes> f) (k, l) else bot)\n          {l. True})\n     {k. True}", "by (unfold agg_delta_2) simp"], ["proof (state)\nthis:\n  (g \\<otimes> f) (di, dj) + bot =\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l.\n            if k = di \\<and> l = dj then (g \\<otimes> f) (k, l) else bot)\n        {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (a, b)\n       \\<le> (sum\\<^sub>M (g \\<otimes> f)) (a, b)", "also"], ["proof (state)\nthis:\n  (g \\<otimes> f) (di, dj) + bot =\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l.\n            if k = di \\<and> l = dj then (g \\<otimes> f) (k, l) else bot)\n        {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (a, b)\n       \\<le> (sum\\<^sub>M (g \\<otimes> f)) (a, b)", "have \"... = (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l if k = di \\<and> l = dj then (g \\<otimes> f) (k,l) else (g \\<otimes> f) (k,l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0\n          (\\<lambda>l.\n              if k = di \\<and> l = dj then (g \\<otimes> f) (k, l) else bot)\n          {l. True})\n     {k. True} =\n    aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0\n          (\\<lambda>l.\n              if k = di \\<and> l = dj then (g \\<otimes> f) (k, l)\n              else (g \\<otimes> f) (k, l))\n          {l. True})\n     {k. True}", "apply (rule aggregation.sum_0.cong)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {k. True} = {k. True}\n 2. \\<And>x.\n       x \\<in> {k. True} \\<Longrightarrow>\n       aggregation.sum_0\n        (\\<lambda>l.\n            if x = di \\<and> l = dj then (g \\<otimes> f) (x, l) else bot)\n        {l. True} =\n       aggregation.sum_0\n        (\\<lambda>l.\n            if x = di \\<and> l = dj then (g \\<otimes> f) (x, l)\n            else (g \\<otimes> f) (x, l))\n        {l. True}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {k. True} \\<Longrightarrow>\n       aggregation.sum_0\n        (\\<lambda>l.\n            if x = di \\<and> l = dj then (g \\<otimes> f) (x, l) else bot)\n        {l. True} =\n       aggregation.sum_0\n        (\\<lambda>l.\n            if x = di \\<and> l = dj then (g \\<otimes> f) (x, l)\n            else (g \\<otimes> f) (x, l))\n        {l. True}", "using 12"], ["proof (prove)\nusing this:\n  \\<forall>k l.\n     \\<not> (k = di \\<and> l = dj) \\<longrightarrow>\n     (g \\<otimes> f) (k, l) = bot\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {k. True} \\<Longrightarrow>\n       aggregation.sum_0\n        (\\<lambda>l.\n            if x = di \\<and> l = dj then (g \\<otimes> f) (x, l) else bot)\n        {l. True} =\n       aggregation.sum_0\n        (\\<lambda>l.\n            if x = di \\<and> l = dj then (g \\<otimes> f) (x, l)\n            else (g \\<otimes> f) (x, l))\n        {l. True}", "by metis"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l.\n            if k = di \\<and> l = dj then (g \\<otimes> f) (k, l) else bot)\n        {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l.\n            if k = di \\<and> l = dj then (g \\<otimes> f) (k, l)\n            else (g \\<otimes> f) (k, l))\n        {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (a, b)\n       \\<le> (sum\\<^sub>M (g \\<otimes> f)) (a, b)", "also"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l.\n            if k = di \\<and> l = dj then (g \\<otimes> f) (k, l) else bot)\n        {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l.\n            if k = di \\<and> l = dj then (g \\<otimes> f) (k, l)\n            else (g \\<otimes> f) (k, l))\n        {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (a, b)\n       \\<le> (sum\\<^sub>M (g \\<otimes> f)) (a, b)", "have \"... = (\\<Sum>\\<^sub>k \\<Sum>\\<^sub>l (g \\<otimes> f) (k,l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0\n          (\\<lambda>l.\n              if k = di \\<and> l = dj then (g \\<otimes> f) (k, l)\n              else (g \\<otimes> f) (k, l))\n          {l. True})\n     {k. True} =\n    aggregation.sum_0\n     (\\<lambda>k.\n         aggregation.sum_0 (\\<lambda>l. (g \\<otimes> f) (k, l)) {l. True})\n     {k. True}", "by simp"], ["proof (state)\nthis:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0\n        (\\<lambda>l.\n            if k = di \\<and> l = dj then (g \\<otimes> f) (k, l)\n            else (g \\<otimes> f) (k, l))\n        {l. True})\n   {k. True} =\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. (g \\<otimes> f) (k, l)) {l. True})\n   {k. True}\n\ngoal (1 subgoal):\n 1. \\<And>e a b.\n       (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (a, b)\n       \\<le> (sum\\<^sub>M (g \\<otimes> f)) (a, b)", "finally"], ["proof (chain)\npicking this:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. (minarc\\<^sub>M f \\<otimes> f) (k, l))\n        {l. True})\n   {k. True}\n  \\<le> aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. (g \\<otimes> f) (k, l))\n              {l. True})\n         {k. True}", "show \"(sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (i,j) \\<le> (sum\\<^sub>M (g \\<otimes> f)) (i,j)\""], ["proof (prove)\nusing this:\n  aggregation.sum_0\n   (\\<lambda>k.\n       aggregation.sum_0 (\\<lambda>l. (minarc\\<^sub>M f \\<otimes> f) (k, l))\n        {l. True})\n   {k. True}\n  \\<le> aggregation.sum_0\n         (\\<lambda>k.\n             aggregation.sum_0 (\\<lambda>l. (g \\<otimes> f) (k, l))\n              {l. True})\n         {k. True}\n\ngoal (1 subgoal):\n 1. (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (i, j)\n    \\<le> (sum\\<^sub>M (g \\<otimes> f)) (i, j)", "by (simp add: sum_matrix_def)"], ["proof (state)\nthis:\n  (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (i, j)\n  \\<le> (sum\\<^sub>M (g \\<otimes> f)) (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f) \\<preceq>\n  sum\\<^sub>M (g \\<otimes> f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  matrix_stone_relation_algebra.arc g \\<and>\n  g \\<otimes> f \\<noteq> mbot \\<longrightarrow>\n  sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f) \\<preceq>\n  sum\\<^sub>M (g \\<otimes> f)\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       sum\\<^sub>M x \\<preceq> sum\\<^sub>M y \\<or>\n       sum\\<^sub>M y \\<preceq> sum\\<^sub>M x\n 2. finite {x. matrix_p_algebra.regular x}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       sum\\<^sub>M x \\<preceq> sum\\<^sub>M y \\<or>\n       sum\\<^sub>M y \\<preceq> sum\\<^sub>M x\n 2. finite {x. matrix_p_algebra.regular x}", "fix f g :: \"('a,'b) square\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       sum\\<^sub>M x \\<preceq> sum\\<^sub>M y \\<or>\n       sum\\<^sub>M y \\<preceq> sum\\<^sub>M x\n 2. finite {x. matrix_p_algebra.regular x}", "let ?h = \"hd enum_class.enum\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       sum\\<^sub>M x \\<preceq> sum\\<^sub>M y \\<or>\n       sum\\<^sub>M y \\<preceq> sum\\<^sub>M x\n 2. finite {x. matrix_p_algebra.regular x}", "show \"sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<or> sum\\<^sub>M g \\<preceq> sum\\<^sub>M f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<or>\n    sum\\<^sub>M g \\<preceq> sum\\<^sub>M f", "proof (cases \"(sum\\<^sub>M f) (?h,?h) \\<le> (sum\\<^sub>M g) (?h,?h)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)\n    \\<le> (sum\\<^sub>M g)\n           (hd enum_class.enum, hd enum_class.enum) \\<Longrightarrow>\n    sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<or>\n    sum\\<^sub>M g \\<preceq> sum\\<^sub>M f\n 2. \\<not> (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)\n           \\<le> (sum\\<^sub>M g)\n                  (hd enum_class.enum, hd enum_class.enum) \\<Longrightarrow>\n    sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<or>\n    sum\\<^sub>M g \\<preceq> sum\\<^sub>M f", "case 1: True"], ["proof (state)\nthis:\n  (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)\n  \\<le> (sum\\<^sub>M g) (hd enum_class.enum, hd enum_class.enum)\n\ngoal (2 subgoals):\n 1. (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)\n    \\<le> (sum\\<^sub>M g)\n           (hd enum_class.enum, hd enum_class.enum) \\<Longrightarrow>\n    sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<or>\n    sum\\<^sub>M g \\<preceq> sum\\<^sub>M f\n 2. \\<not> (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)\n           \\<le> (sum\\<^sub>M g)\n                  (hd enum_class.enum, hd enum_class.enum) \\<Longrightarrow>\n    sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<or>\n    sum\\<^sub>M g \\<preceq> sum\\<^sub>M f", "have \"sum\\<^sub>M f \\<preceq> sum\\<^sub>M g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum\\<^sub>M f \\<preceq> sum\\<^sub>M g", "apply (unfold less_eq_matrix_def, rule allI, rule prod_cases)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e a b. (sum\\<^sub>M f) (a, b) \\<le> (sum\\<^sub>M g) (a, b)", "using 1"], ["proof (prove)\nusing this:\n  (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)\n  \\<le> (sum\\<^sub>M g) (hd enum_class.enum, hd enum_class.enum)\n\ngoal (1 subgoal):\n 1. \\<And>e a b. (sum\\<^sub>M f) (a, b) \\<le> (sum\\<^sub>M g) (a, b)", "by (unfold sum_matrix_def) auto"], ["proof (state)\nthis:\n  sum\\<^sub>M f \\<preceq> sum\\<^sub>M g\n\ngoal (2 subgoals):\n 1. (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)\n    \\<le> (sum\\<^sub>M g)\n           (hd enum_class.enum, hd enum_class.enum) \\<Longrightarrow>\n    sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<or>\n    sum\\<^sub>M g \\<preceq> sum\\<^sub>M f\n 2. \\<not> (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)\n           \\<le> (sum\\<^sub>M g)\n                  (hd enum_class.enum, hd enum_class.enum) \\<Longrightarrow>\n    sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<or>\n    sum\\<^sub>M g \\<preceq> sum\\<^sub>M f", "thus ?thesis"], ["proof (prove)\nusing this:\n  sum\\<^sub>M f \\<preceq> sum\\<^sub>M g\n\ngoal (1 subgoal):\n 1. sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<or>\n    sum\\<^sub>M g \\<preceq> sum\\<^sub>M f", "by simp"], ["proof (state)\nthis:\n  sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<or>\n  sum\\<^sub>M g \\<preceq> sum\\<^sub>M f\n\ngoal (1 subgoal):\n 1. \\<not> (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)\n           \\<le> (sum\\<^sub>M g)\n                  (hd enum_class.enum, hd enum_class.enum) \\<Longrightarrow>\n    sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<or>\n    sum\\<^sub>M g \\<preceq> sum\\<^sub>M f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)\n           \\<le> (sum\\<^sub>M g)\n                  (hd enum_class.enum, hd enum_class.enum) \\<Longrightarrow>\n    sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<or>\n    sum\\<^sub>M g \\<preceq> sum\\<^sub>M f", "case False"], ["proof (state)\nthis:\n  \\<not> (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)\n         \\<le> (sum\\<^sub>M g) (hd enum_class.enum, hd enum_class.enum)\n\ngoal (1 subgoal):\n 1. \\<not> (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)\n           \\<le> (sum\\<^sub>M g)\n                  (hd enum_class.enum, hd enum_class.enum) \\<Longrightarrow>\n    sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<or>\n    sum\\<^sub>M g \\<preceq> sum\\<^sub>M f", "hence 2: \"(sum\\<^sub>M g) (?h,?h) \\<le> (sum\\<^sub>M f) (?h,?h)\""], ["proof (prove)\nusing this:\n  \\<not> (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)\n         \\<le> (sum\\<^sub>M g) (hd enum_class.enum, hd enum_class.enum)\n\ngoal (1 subgoal):\n 1. (sum\\<^sub>M g) (hd enum_class.enum, hd enum_class.enum)\n    \\<le> (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)", "by (simp add: linear)"], ["proof (state)\nthis:\n  (sum\\<^sub>M g) (hd enum_class.enum, hd enum_class.enum)\n  \\<le> (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)\n\ngoal (1 subgoal):\n 1. \\<not> (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)\n           \\<le> (sum\\<^sub>M g)\n                  (hd enum_class.enum, hd enum_class.enum) \\<Longrightarrow>\n    sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<or>\n    sum\\<^sub>M g \\<preceq> sum\\<^sub>M f", "have \"sum\\<^sub>M g \\<preceq> sum\\<^sub>M f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum\\<^sub>M g \\<preceq> sum\\<^sub>M f", "apply (unfold less_eq_matrix_def, rule allI, rule prod_cases)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e a b. (sum\\<^sub>M g) (a, b) \\<le> (sum\\<^sub>M f) (a, b)", "using 2"], ["proof (prove)\nusing this:\n  (sum\\<^sub>M g) (hd enum_class.enum, hd enum_class.enum)\n  \\<le> (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)\n\ngoal (1 subgoal):\n 1. \\<And>e a b. (sum\\<^sub>M g) (a, b) \\<le> (sum\\<^sub>M f) (a, b)", "by (unfold sum_matrix_def) auto"], ["proof (state)\nthis:\n  sum\\<^sub>M g \\<preceq> sum\\<^sub>M f\n\ngoal (1 subgoal):\n 1. \\<not> (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)\n           \\<le> (sum\\<^sub>M g)\n                  (hd enum_class.enum, hd enum_class.enum) \\<Longrightarrow>\n    sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<or>\n    sum\\<^sub>M g \\<preceq> sum\\<^sub>M f", "thus ?thesis"], ["proof (prove)\nusing this:\n  sum\\<^sub>M g \\<preceq> sum\\<^sub>M f\n\ngoal (1 subgoal):\n 1. sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<or>\n    sum\\<^sub>M g \\<preceq> sum\\<^sub>M f", "by simp"], ["proof (state)\nthis:\n  sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<or>\n  sum\\<^sub>M g \\<preceq> sum\\<^sub>M f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<or>\n  sum\\<^sub>M g \\<preceq> sum\\<^sub>M f\n\ngoal (1 subgoal):\n 1. finite {x. matrix_p_algebra.regular x}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. finite {x. matrix_p_algebra.regular x}", "have \"finite { f :: ('a,'b) square . (\\<forall>e . regular (f e)) }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {f. \\<forall>e. regular (f e)}", "by (unfold regular_bot_top_2, rule finite_set_of_finite_funs_pred) auto"], ["proof (state)\nthis:\n  finite {f. \\<forall>e. regular (f e)}\n\ngoal (1 subgoal):\n 1. finite {x. matrix_p_algebra.regular x}", "thus \"finite { f :: ('a,'b) square . matrix_p_algebra.regular f }\""], ["proof (prove)\nusing this:\n  finite {f. \\<forall>e. regular (f e)}\n\ngoal (1 subgoal):\n 1. finite {f. matrix_p_algebra.regular f}", "by (unfold uminus_matrix_def) meson"], ["proof (state)\nthis:\n  finite {f. matrix_p_algebra.regular f}\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\nWe show the same for the alternative implementation that stores the result of aggregation in all elements of the matrix.\n\\<close>"], ["", "interpretation agg_square_m_algebra_2: m_algebra where sup = sup_matrix and inf = inf_matrix and less_eq = less_eq_matrix and less = less_matrix and bot = \"bot_matrix::('a::enum,'b::linear_aggregation_algebra) square\" and top = top_matrix and uminus = uminus_matrix and one = one_matrix and times = times_matrix and conv = conv_matrix and plus = plus_matrix and sum = sum_matrix_2 and minarc = minarc_matrix"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.m_algebra minarc_matrix sum_matrix_2 (\\<oplus>\\<^sub>M)\n     (\\<otimes>) (\\<preceq>) (\\<prec>) (\\<oplus>) mbot mtop uminus_matrix\n     mone (\\<odot>) conv_matrix", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x. minarc\\<^sub>M x \\<preceq> \\<ominus> \\<ominus> x\n 2. \\<And>x.\n       x \\<noteq> mbot \\<longrightarrow>\n       matrix_stone_relation_algebra.arc (minarc\\<^sub>M x)\n 3. \\<And>y x.\n       matrix_stone_relation_algebra.arc y \\<and>\n       y \\<otimes> x \\<noteq> mbot \\<longrightarrow>\n       sum2\\<^sub>M (minarc\\<^sub>M x \\<otimes> x) \\<preceq>\n       sum2\\<^sub>M (y \\<otimes> x)\n 4. \\<And>x y.\n       sum2\\<^sub>M x \\<preceq> sum2\\<^sub>M y \\<or>\n       sum2\\<^sub>M y \\<preceq> sum2\\<^sub>M x\n 5. finite {x. matrix_p_algebra.regular x}", "fix f :: \"('a,'b) square\""], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x. minarc\\<^sub>M x \\<preceq> \\<ominus> \\<ominus> x\n 2. \\<And>x.\n       x \\<noteq> mbot \\<longrightarrow>\n       matrix_stone_relation_algebra.arc (minarc\\<^sub>M x)\n 3. \\<And>y x.\n       matrix_stone_relation_algebra.arc y \\<and>\n       y \\<otimes> x \\<noteq> mbot \\<longrightarrow>\n       sum2\\<^sub>M (minarc\\<^sub>M x \\<otimes> x) \\<preceq>\n       sum2\\<^sub>M (y \\<otimes> x)\n 4. \\<And>x y.\n       sum2\\<^sub>M x \\<preceq> sum2\\<^sub>M y \\<or>\n       sum2\\<^sub>M y \\<preceq> sum2\\<^sub>M x\n 5. finite {x. matrix_p_algebra.regular x}", "show \"minarc\\<^sub>M f \\<preceq> \\<ominus>\\<ominus>f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. minarc\\<^sub>M f \\<preceq> \\<ominus> \\<ominus> f", "by (simp add: agg_square_m_algebra.minarc_below)"], ["proof (state)\nthis:\n  minarc\\<^sub>M f \\<preceq> \\<ominus> \\<ominus> f\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       x \\<noteq> mbot \\<longrightarrow>\n       matrix_stone_relation_algebra.arc (minarc\\<^sub>M x)\n 2. \\<And>y x.\n       matrix_stone_relation_algebra.arc y \\<and>\n       y \\<otimes> x \\<noteq> mbot \\<longrightarrow>\n       sum2\\<^sub>M (minarc\\<^sub>M x \\<otimes> x) \\<preceq>\n       sum2\\<^sub>M (y \\<otimes> x)\n 3. \\<And>x y.\n       sum2\\<^sub>M x \\<preceq> sum2\\<^sub>M y \\<or>\n       sum2\\<^sub>M y \\<preceq> sum2\\<^sub>M x\n 4. finite {x. matrix_p_algebra.regular x}", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       x \\<noteq> mbot \\<longrightarrow>\n       matrix_stone_relation_algebra.arc (minarc\\<^sub>M x)\n 2. \\<And>y x.\n       matrix_stone_relation_algebra.arc y \\<and>\n       y \\<otimes> x \\<noteq> mbot \\<longrightarrow>\n       sum2\\<^sub>M (minarc\\<^sub>M x \\<otimes> x) \\<preceq>\n       sum2\\<^sub>M (y \\<otimes> x)\n 3. \\<And>x y.\n       sum2\\<^sub>M x \\<preceq> sum2\\<^sub>M y \\<or>\n       sum2\\<^sub>M y \\<preceq> sum2\\<^sub>M x\n 4. finite {x. matrix_p_algebra.regular x}", "fix f :: \"('a,'b) square\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       x \\<noteq> mbot \\<longrightarrow>\n       matrix_stone_relation_algebra.arc (minarc\\<^sub>M x)\n 2. \\<And>y x.\n       matrix_stone_relation_algebra.arc y \\<and>\n       y \\<otimes> x \\<noteq> mbot \\<longrightarrow>\n       sum2\\<^sub>M (minarc\\<^sub>M x \\<otimes> x) \\<preceq>\n       sum2\\<^sub>M (y \\<otimes> x)\n 3. \\<And>x y.\n       sum2\\<^sub>M x \\<preceq> sum2\\<^sub>M y \\<or>\n       sum2\\<^sub>M y \\<preceq> sum2\\<^sub>M x\n 4. finite {x. matrix_p_algebra.regular x}", "let ?at = \"bounded_distrib_allegory_signature.arc mone times_matrix less_eq_matrix mtop conv_matrix\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       x \\<noteq> mbot \\<longrightarrow>\n       matrix_stone_relation_algebra.arc (minarc\\<^sub>M x)\n 2. \\<And>y x.\n       matrix_stone_relation_algebra.arc y \\<and>\n       y \\<otimes> x \\<noteq> mbot \\<longrightarrow>\n       sum2\\<^sub>M (minarc\\<^sub>M x \\<otimes> x) \\<preceq>\n       sum2\\<^sub>M (y \\<otimes> x)\n 3. \\<And>x y.\n       sum2\\<^sub>M x \\<preceq> sum2\\<^sub>M y \\<or>\n       sum2\\<^sub>M y \\<preceq> sum2\\<^sub>M x\n 4. finite {x. matrix_p_algebra.regular x}", "show \"f \\<noteq> mbot \\<longrightarrow> ?at (minarc\\<^sub>M f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<noteq> mbot \\<longrightarrow>\n    matrix_stone_relation_algebra.arc (minarc\\<^sub>M f)", "by (simp add: agg_square_m_algebra.minarc_arc)"], ["proof (state)\nthis:\n  f \\<noteq> mbot \\<longrightarrow>\n  matrix_stone_relation_algebra.arc (minarc\\<^sub>M f)\n\ngoal (3 subgoals):\n 1. \\<And>y x.\n       matrix_stone_relation_algebra.arc y \\<and>\n       y \\<otimes> x \\<noteq> mbot \\<longrightarrow>\n       sum2\\<^sub>M (minarc\\<^sub>M x \\<otimes> x) \\<preceq>\n       sum2\\<^sub>M (y \\<otimes> x)\n 2. \\<And>x y.\n       sum2\\<^sub>M x \\<preceq> sum2\\<^sub>M y \\<or>\n       sum2\\<^sub>M y \\<preceq> sum2\\<^sub>M x\n 3. finite {x. matrix_p_algebra.regular x}", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>y x.\n       matrix_stone_relation_algebra.arc y \\<and>\n       y \\<otimes> x \\<noteq> mbot \\<longrightarrow>\n       sum2\\<^sub>M (minarc\\<^sub>M x \\<otimes> x) \\<preceq>\n       sum2\\<^sub>M (y \\<otimes> x)\n 2. \\<And>x y.\n       sum2\\<^sub>M x \\<preceq> sum2\\<^sub>M y \\<or>\n       sum2\\<^sub>M y \\<preceq> sum2\\<^sub>M x\n 3. finite {x. matrix_p_algebra.regular x}", "fix f g :: \"('a,'b) square\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>y x.\n       matrix_stone_relation_algebra.arc y \\<and>\n       y \\<otimes> x \\<noteq> mbot \\<longrightarrow>\n       sum2\\<^sub>M (minarc\\<^sub>M x \\<otimes> x) \\<preceq>\n       sum2\\<^sub>M (y \\<otimes> x)\n 2. \\<And>x y.\n       sum2\\<^sub>M x \\<preceq> sum2\\<^sub>M y \\<or>\n       sum2\\<^sub>M y \\<preceq> sum2\\<^sub>M x\n 3. finite {x. matrix_p_algebra.regular x}", "let ?at = \"bounded_distrib_allegory_signature.arc mone times_matrix less_eq_matrix mtop conv_matrix\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>y x.\n       matrix_stone_relation_algebra.arc y \\<and>\n       y \\<otimes> x \\<noteq> mbot \\<longrightarrow>\n       sum2\\<^sub>M (minarc\\<^sub>M x \\<otimes> x) \\<preceq>\n       sum2\\<^sub>M (y \\<otimes> x)\n 2. \\<And>x y.\n       sum2\\<^sub>M x \\<preceq> sum2\\<^sub>M y \\<or>\n       sum2\\<^sub>M y \\<preceq> sum2\\<^sub>M x\n 3. finite {x. matrix_p_algebra.regular x}", "show \"?at g \\<and> g \\<otimes> f \\<noteq> mbot \\<longrightarrow> sum2\\<^sub>M (minarc\\<^sub>M f \\<otimes> f) \\<preceq> sum2\\<^sub>M (g \\<otimes> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_stone_relation_algebra.arc g \\<and>\n    g \\<otimes> f \\<noteq> mbot \\<longrightarrow>\n    sum2\\<^sub>M (minarc\\<^sub>M f \\<otimes> f) \\<preceq>\n    sum2\\<^sub>M (g \\<otimes> f)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. matrix_stone_relation_algebra.arc g \\<and>\n    g \\<otimes> f \\<noteq> mbot \\<Longrightarrow>\n    sum2\\<^sub>M (minarc\\<^sub>M f \\<otimes> f) \\<preceq>\n    sum2\\<^sub>M (g \\<otimes> f)", "let ?h = \"hd enum_class.enum\""], ["proof (state)\ngoal (1 subgoal):\n 1. matrix_stone_relation_algebra.arc g \\<and>\n    g \\<otimes> f \\<noteq> mbot \\<Longrightarrow>\n    sum2\\<^sub>M (minarc\\<^sub>M f \\<otimes> f) \\<preceq>\n    sum2\\<^sub>M (g \\<otimes> f)", "assume \"?at g \\<and> g \\<otimes> f \\<noteq> mbot\""], ["proof (state)\nthis:\n  matrix_stone_relation_algebra.arc g \\<and> g \\<otimes> f \\<noteq> mbot\n\ngoal (1 subgoal):\n 1. matrix_stone_relation_algebra.arc g \\<and>\n    g \\<otimes> f \\<noteq> mbot \\<Longrightarrow>\n    sum2\\<^sub>M (minarc\\<^sub>M f \\<otimes> f) \\<preceq>\n    sum2\\<^sub>M (g \\<otimes> f)", "hence \"sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f) \\<preceq> sum\\<^sub>M (g \\<otimes> f)\""], ["proof (prove)\nusing this:\n  matrix_stone_relation_algebra.arc g \\<and> g \\<otimes> f \\<noteq> mbot\n\ngoal (1 subgoal):\n 1. sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f) \\<preceq>\n    sum\\<^sub>M (g \\<otimes> f)", "by (simp add: agg_square_m_algebra.minarc_min)"], ["proof (state)\nthis:\n  sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f) \\<preceq>\n  sum\\<^sub>M (g \\<otimes> f)\n\ngoal (1 subgoal):\n 1. matrix_stone_relation_algebra.arc g \\<and>\n    g \\<otimes> f \\<noteq> mbot \\<Longrightarrow>\n    sum2\\<^sub>M (minarc\\<^sub>M f \\<otimes> f) \\<preceq>\n    sum2\\<^sub>M (g \\<otimes> f)", "hence \"(sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f)) (?h,?h) \\<le> (sum\\<^sub>M (g \\<otimes> f)) (?h,?h)\""], ["proof (prove)\nusing this:\n  sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f) \\<preceq>\n  sum\\<^sub>M (g \\<otimes> f)\n\ngoal (1 subgoal):\n 1. (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f))\n     (hd enum_class.enum, hd enum_class.enum)\n    \\<le> (sum\\<^sub>M (g \\<otimes> f))\n           (hd enum_class.enum, hd enum_class.enum)", "by (simp add: less_eq_matrix_def)"], ["proof (state)\nthis:\n  (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f))\n   (hd enum_class.enum, hd enum_class.enum)\n  \\<le> (sum\\<^sub>M (g \\<otimes> f))\n         (hd enum_class.enum, hd enum_class.enum)\n\ngoal (1 subgoal):\n 1. matrix_stone_relation_algebra.arc g \\<and>\n    g \\<otimes> f \\<noteq> mbot \\<Longrightarrow>\n    sum2\\<^sub>M (minarc\\<^sub>M f \\<otimes> f) \\<preceq>\n    sum2\\<^sub>M (g \\<otimes> f)", "thus \"sum2\\<^sub>M (minarc\\<^sub>M f \\<otimes> f) \\<preceq> sum2\\<^sub>M (g \\<otimes> f)\""], ["proof (prove)\nusing this:\n  (sum\\<^sub>M (minarc\\<^sub>M f \\<otimes> f))\n   (hd enum_class.enum, hd enum_class.enum)\n  \\<le> (sum\\<^sub>M (g \\<otimes> f))\n         (hd enum_class.enum, hd enum_class.enum)\n\ngoal (1 subgoal):\n 1. sum2\\<^sub>M (minarc\\<^sub>M f \\<otimes> f) \\<preceq>\n    sum2\\<^sub>M (g \\<otimes> f)", "by (simp add: sum_matrix_def sum_matrix_2_def less_eq_matrix_def)"], ["proof (state)\nthis:\n  sum2\\<^sub>M (minarc\\<^sub>M f \\<otimes> f) \\<preceq>\n  sum2\\<^sub>M (g \\<otimes> f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  matrix_stone_relation_algebra.arc g \\<and>\n  g \\<otimes> f \\<noteq> mbot \\<longrightarrow>\n  sum2\\<^sub>M (minarc\\<^sub>M f \\<otimes> f) \\<preceq>\n  sum2\\<^sub>M (g \\<otimes> f)\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       sum2\\<^sub>M x \\<preceq> sum2\\<^sub>M y \\<or>\n       sum2\\<^sub>M y \\<preceq> sum2\\<^sub>M x\n 2. finite {x. matrix_p_algebra.regular x}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       sum2\\<^sub>M x \\<preceq> sum2\\<^sub>M y \\<or>\n       sum2\\<^sub>M y \\<preceq> sum2\\<^sub>M x\n 2. finite {x. matrix_p_algebra.regular x}", "fix f g :: \"('a,'b) square\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       sum2\\<^sub>M x \\<preceq> sum2\\<^sub>M y \\<or>\n       sum2\\<^sub>M y \\<preceq> sum2\\<^sub>M x\n 2. finite {x. matrix_p_algebra.regular x}", "let ?h = \"hd enum_class.enum\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       sum2\\<^sub>M x \\<preceq> sum2\\<^sub>M y \\<or>\n       sum2\\<^sub>M y \\<preceq> sum2\\<^sub>M x\n 2. finite {x. matrix_p_algebra.regular x}", "have \"sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<or> sum\\<^sub>M g \\<preceq> sum\\<^sub>M f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<or>\n    sum\\<^sub>M g \\<preceq> sum\\<^sub>M f", "by (simp add: agg_square_m_algebra.sum_linear)"], ["proof (state)\nthis:\n  sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<or>\n  sum\\<^sub>M g \\<preceq> sum\\<^sub>M f\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       sum2\\<^sub>M x \\<preceq> sum2\\<^sub>M y \\<or>\n       sum2\\<^sub>M y \\<preceq> sum2\\<^sub>M x\n 2. finite {x. matrix_p_algebra.regular x}", "hence \"(sum\\<^sub>M f) (?h,?h) \\<le> (sum\\<^sub>M g) (?h,?h) \\<or> (sum\\<^sub>M g) (?h,?h) \\<le> (sum\\<^sub>M f) (?h,?h)\""], ["proof (prove)\nusing this:\n  sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<or>\n  sum\\<^sub>M g \\<preceq> sum\\<^sub>M f\n\ngoal (1 subgoal):\n 1. (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)\n    \\<le> (sum\\<^sub>M g) (hd enum_class.enum, hd enum_class.enum) \\<or>\n    (sum\\<^sub>M g) (hd enum_class.enum, hd enum_class.enum)\n    \\<le> (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)", "using less_eq_matrix_def"], ["proof (prove)\nusing this:\n  sum\\<^sub>M f \\<preceq> sum\\<^sub>M g \\<or>\n  sum\\<^sub>M g \\<preceq> sum\\<^sub>M f\n  (?f \\<preceq> ?g) = (\\<forall>e. ?f e \\<le> ?g e)\n\ngoal (1 subgoal):\n 1. (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)\n    \\<le> (sum\\<^sub>M g) (hd enum_class.enum, hd enum_class.enum) \\<or>\n    (sum\\<^sub>M g) (hd enum_class.enum, hd enum_class.enum)\n    \\<le> (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)", "by auto"], ["proof (state)\nthis:\n  (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)\n  \\<le> (sum\\<^sub>M g) (hd enum_class.enum, hd enum_class.enum) \\<or>\n  (sum\\<^sub>M g) (hd enum_class.enum, hd enum_class.enum)\n  \\<le> (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       sum2\\<^sub>M x \\<preceq> sum2\\<^sub>M y \\<or>\n       sum2\\<^sub>M y \\<preceq> sum2\\<^sub>M x\n 2. finite {x. matrix_p_algebra.regular x}", "thus \"sum2\\<^sub>M f \\<preceq> sum2\\<^sub>M g \\<or> sum2\\<^sub>M g \\<preceq> sum2\\<^sub>M f\""], ["proof (prove)\nusing this:\n  (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)\n  \\<le> (sum\\<^sub>M g) (hd enum_class.enum, hd enum_class.enum) \\<or>\n  (sum\\<^sub>M g) (hd enum_class.enum, hd enum_class.enum)\n  \\<le> (sum\\<^sub>M f) (hd enum_class.enum, hd enum_class.enum)\n\ngoal (1 subgoal):\n 1. sum2\\<^sub>M f \\<preceq> sum2\\<^sub>M g \\<or>\n    sum2\\<^sub>M g \\<preceq> sum2\\<^sub>M f", "by (simp add: sum_matrix_def sum_matrix_2_def less_eq_matrix_def)"], ["proof (state)\nthis:\n  sum2\\<^sub>M f \\<preceq> sum2\\<^sub>M g \\<or>\n  sum2\\<^sub>M g \\<preceq> sum2\\<^sub>M f\n\ngoal (1 subgoal):\n 1. finite {x. matrix_p_algebra.regular x}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. finite {x. matrix_p_algebra.regular x}", "show \"finite { f :: ('a,'b) square . matrix_p_algebra.regular f }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {f. matrix_p_algebra.regular f}", "by (simp add: agg_square_m_algebra.finite_regular)"], ["proof (state)\nthis:\n  finite {f. matrix_p_algebra.regular f}\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\nBy defining the Kleene star as $\\top$ aggregation lattices form a Kleene algebra.\n\\<close>"], ["", "class aggregation_kleene_algebra = aggregation_algebra + star +\n  assumes star_def [simp]: \"x\\<^sup>\\<star> = top\"\nbegin"], ["", "subclass stone_kleene_relation_algebra"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.stone_kleene_relation_algebra star (1::'a) (*) (\\<squnion>)\n     (\\<le>) (<) bot (\\<sqinter>) top conv uminus", "apply unfold_locales"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>y. Rf y (y\\<^sup>\\<star>) \\<le> y\\<^sup>\\<star>\n 2. \\<And>z y x.\n       z \\<squnion> y * x \\<le> x \\<longrightarrow>\n       y\\<^sup>\\<star> * z \\<le> x\n 3. \\<And>z x y.\n       z \\<squnion> x * y \\<le> x \\<longrightarrow>\n       z * y\\<^sup>\\<star> \\<le> x\n 4. \\<And>x. - - x\\<^sup>\\<star> = (- - x)\\<^sup>\\<star>", "by (simp_all add: inf.assoc le_infI2 inf_sup_distrib1 inf_sup_distrib2)"], ["", "end"], ["", "class linear_aggregation_kleene_algebra = linear_aggregation_algebra + star +\n  assumes star_def_2 [simp]: \"x\\<^sup>\\<star> = top\"\nbegin"], ["", "subclass aggregation_kleene_algebra"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.aggregation_kleene_algebra star (1::'a) (*) uminus (\\<sqinter>)\n     (\\<le>) (<) (\\<squnion>) bot top (+) conv", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x\\<^sup>\\<star> = top", "by simp"], ["", "end"], ["", "interpretation agg_square_m_kleene_algebra: m_kleene_algebra where sup = sup_matrix and inf = inf_matrix and less_eq = less_eq_matrix and less = less_matrix and bot = \"bot_matrix::('a::enum,'b::linear_aggregation_kleene_algebra) square\" and top = top_matrix and uminus = uminus_matrix and one = one_matrix and times = times_matrix and conv = conv_matrix and star = star_matrix and plus = plus_matrix and sum = sum_matrix and minarc = minarc_matrix"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.m_kleene_algebra minarc_matrix sum_matrix (\\<oplus>\\<^sub>M)\n     (\\<otimes>) (\\<preceq>) (\\<prec>) (\\<oplus>) mbot mtop uminus_matrix\n     mone (\\<odot>) conv_matrix star_matrix", ".."], ["", "interpretation agg_square_m_kleene_algebra_2: m_kleene_algebra where sup = sup_matrix and inf = inf_matrix and less_eq = less_eq_matrix and less = less_matrix and bot = \"bot_matrix::('a::enum,'b::linear_aggregation_kleene_algebra) square\" and top = top_matrix and uminus = uminus_matrix and one = one_matrix and times = times_matrix and conv = conv_matrix and star = star_matrix and plus = plus_matrix and sum = sum_matrix_2 and minarc = minarc_matrix"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.m_kleene_algebra minarc_matrix sum_matrix_2 (\\<oplus>\\<^sub>M)\n     (\\<otimes>) (\\<preceq>) (\\<prec>) (\\<oplus>) mbot mtop uminus_matrix\n     mone (\\<odot>) conv_matrix star_matrix", ".."], ["", "end"]]}