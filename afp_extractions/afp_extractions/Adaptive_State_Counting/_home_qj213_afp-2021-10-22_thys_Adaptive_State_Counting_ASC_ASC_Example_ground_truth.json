{"file_name": "/home/qj213/afp-2021-10-22/thys/Adaptive_State_Counting/ASC/ASC_Example.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Adaptive_State_Counting", "problem_names": ["lemma nodes_from_rel : \"nodes (from_rel rel q0) \\<subseteq> insert q0 (image (snd \\<circ> snd) rel)\"\n  (is \"nodes ?M \\<subseteq> insert q0 (image (snd \\<circ> snd) rel)\")", "lemma well_formed_from_rel :\n  assumes \"well_formed_rel rel\"\n  shows \"well_formed (from_rel rel q0)\"  (is \"well_formed ?M\")", "lemma completely_specified_from_rel :\n  assumes \"completely_specified_rel_over rel (nodes ((from_rel rel q0)))\"\n  shows \"completely_specified (from_rel rel q0)\"  (is \"completely_specified ?M\")", "lemma observable_from_rel :\n  assumes \"observable_rel rel\"\n  shows \"observable (from_rel rel q0)\"  (is \"observable ?M\")", "lemma OFMS_from_rel :\n  assumes \"OFSM_rel rel q0\"\n  shows \"OFSM (from_rel rel q0)\"", "lemma example_nodes :\n  \"nodes M\\<^sub>S = {0,1}\" \"nodes M\\<^sub>I = {0,1}\"", "lemma example_OFSM :\n  \"OFSM M\\<^sub>S\" \"OFSM M\\<^sub>I\"", "lemma example_fault_domain : \"asc_fault_domain M\\<^sub>S M\\<^sub>I 2\"", "lemma example_productF : \"productF M\\<^sub>S M\\<^sub>I FAIL\\<^sub>I PM\\<^sub>I\"", "lemma example_det_state_cover : \"is_det_state_cover M\\<^sub>S V\\<^sub>I\"", "lemma \"applicable_set M\\<^sub>S \\<Omega>\\<^sub>I\"", "lemma example_test_tools : \"test_tools M\\<^sub>S M\\<^sub>I FAIL\\<^sub>I PM\\<^sub>I V\\<^sub>I \\<Omega>\\<^sub>I\"", "lemma OFSM_not_vacuous :\n  \"\\<exists> M :: (nat,nat,nat) FSM . OFSM M\"", "lemma fault_domain_not_vacuous :\n  \"\\<exists> (M2::(nat,nat,nat) FSM) (M1::(nat,nat,nat) FSM) m . asc_fault_domain M2 M1 m\"", "lemma test_tools_not_vacuous :\n  \"\\<exists> (M2::(nat,nat,nat) FSM)\n     (M1::(nat,nat,nat) FSM)\n     (FAIL::(nat\\<times>nat))\n     (PM::(nat,nat,nat\\<times>nat) FSM)\n     (V::(nat list set))\n     (\\<Omega>::(nat,nat) ATC set) . test_tools M2 M1 FAIL PM V \\<Omega>\"", "lemma precondition_not_vacuous :\n  shows \"\\<exists> (M2::(nat,nat,nat) FSM)\n           (M1::(nat,nat,nat) FSM)\n           (FAIL::(nat\\<times>nat))\n           (PM::(nat,nat,nat\\<times>nat) FSM)\n           (V::(nat list set))\n           (\\<Omega>::(nat,nat) ATC set)\n           (m :: nat) .\n              OFSM M1 \\<and> OFSM M2 \\<and> asc_fault_domain M2 M1 m \\<and> test_tools M2 M1 FAIL PM V \\<Omega>\""], "translations": [["", "lemma nodes_from_rel : \"nodes (from_rel rel q0) \\<subseteq> insert q0 (image (snd \\<circ> snd) rel)\"\n  (is \"nodes ?M \\<subseteq> insert q0 (image (snd \\<circ> snd) rel)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes (from_rel rel q0) \\<subseteq> insert q0 ((snd \\<circ> snd) ` rel)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. nodes (from_rel rel q0) \\<subseteq> insert q0 ((snd \\<circ> snd) ` rel)", "have \"\\<And> q io p . q \\<in> succ ?M io p \\<Longrightarrow> q \\<in> image (snd \\<circ> snd) rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>q io p.\n       q \\<in> succ (from_rel rel q0) io p \\<Longrightarrow>\n       q \\<in> (snd \\<circ> snd) ` rel", "by force"], ["proof (state)\nthis:\n  ?q \\<in> succ (from_rel rel q0) ?io ?p \\<Longrightarrow>\n  ?q \\<in> (snd \\<circ> snd) ` rel\n\ngoal (1 subgoal):\n 1. nodes (from_rel rel q0) \\<subseteq> insert q0 ((snd \\<circ> snd) ` rel)", "have \"\\<And> q . q \\<in> nodes ?M \\<Longrightarrow> q = q0 \\<or> q \\<in> image (snd \\<circ> snd) rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>q.\n       q \\<in> nodes (from_rel rel q0) \\<Longrightarrow>\n       q = q0 \\<or> q \\<in> (snd \\<circ> snd) ` rel", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>q.\n       q \\<in> nodes (from_rel rel q0) \\<Longrightarrow>\n       q = q0 \\<or> q \\<in> (snd \\<circ> snd) ` rel", "fix q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>q.\n       q \\<in> nodes (from_rel rel q0) \\<Longrightarrow>\n       q = q0 \\<or> q \\<in> (snd \\<circ> snd) ` rel", "assume \"q \\<in> nodes ?M\""], ["proof (state)\nthis:\n  q \\<in> nodes (from_rel rel q0)\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       q \\<in> nodes (from_rel rel q0) \\<Longrightarrow>\n       q = q0 \\<or> q \\<in> (snd \\<circ> snd) ` rel", "then"], ["proof (chain)\npicking this:\n  q \\<in> nodes (from_rel rel q0)", "show \"q = q0 \\<or> q \\<in> image (snd \\<circ> snd) rel\""], ["proof (prove)\nusing this:\n  q \\<in> nodes (from_rel rel q0)\n\ngoal (1 subgoal):\n 1. q = q0 \\<or> q \\<in> (snd \\<circ> snd) ` rel", "proof (cases rule: FSM.nodes.cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. q = initial (from_rel rel q0) \\<Longrightarrow>\n    q = q0 \\<or> q \\<in> (snd \\<circ> snd) ` rel\n 2. \\<And>p a.\n       \\<lbrakk>q = snd a; p \\<in> nodes (from_rel rel q0);\n        snd a \\<in> succ (from_rel rel q0) (fst a) p\\<rbrakk>\n       \\<Longrightarrow> q = q0 \\<or> q \\<in> (snd \\<circ> snd) ` rel", "case initial"], ["proof (state)\nthis:\n  q = initial (from_rel rel q0)\n\ngoal (2 subgoals):\n 1. q = initial (from_rel rel q0) \\<Longrightarrow>\n    q = q0 \\<or> q \\<in> (snd \\<circ> snd) ` rel\n 2. \\<And>p a.\n       \\<lbrakk>q = snd a; p \\<in> nodes (from_rel rel q0);\n        snd a \\<in> succ (from_rel rel q0) (fst a) p\\<rbrakk>\n       \\<Longrightarrow> q = q0 \\<or> q \\<in> (snd \\<circ> snd) ` rel", "then"], ["proof (chain)\npicking this:\n  q = initial (from_rel rel q0)", "show ?thesis"], ["proof (prove)\nusing this:\n  q = initial (from_rel rel q0)\n\ngoal (1 subgoal):\n 1. q = q0 \\<or> q \\<in> (snd \\<circ> snd) ` rel", "by auto"], ["proof (state)\nthis:\n  q = q0 \\<or> q \\<in> (snd \\<circ> snd) ` rel\n\ngoal (1 subgoal):\n 1. \\<And>p a.\n       \\<lbrakk>q = snd a; p \\<in> nodes (from_rel rel q0);\n        snd a \\<in> succ (from_rel rel q0) (fst a) p\\<rbrakk>\n       \\<Longrightarrow> q = q0 \\<or> q \\<in> (snd \\<circ> snd) ` rel", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p a.\n       \\<lbrakk>q = snd a; p \\<in> nodes (from_rel rel q0);\n        snd a \\<in> succ (from_rel rel q0) (fst a) p\\<rbrakk>\n       \\<Longrightarrow> q = q0 \\<or> q \\<in> (snd \\<circ> snd) ` rel", "case (execute p a)"], ["proof (state)\nthis:\n  q = snd a\n  p \\<in> nodes (from_rel rel q0)\n  snd a \\<in> succ (from_rel rel q0) (fst a) p\n\ngoal (1 subgoal):\n 1. \\<And>p a.\n       \\<lbrakk>q = snd a; p \\<in> nodes (from_rel rel q0);\n        snd a \\<in> succ (from_rel rel q0) (fst a) p\\<rbrakk>\n       \\<Longrightarrow> q = q0 \\<or> q \\<in> (snd \\<circ> snd) ` rel", "then"], ["proof (chain)\npicking this:\n  q = snd a\n  p \\<in> nodes (from_rel rel q0)\n  snd a \\<in> succ (from_rel rel q0) (fst a) p", "show ?thesis"], ["proof (prove)\nusing this:\n  q = snd a\n  p \\<in> nodes (from_rel rel q0)\n  snd a \\<in> succ (from_rel rel q0) (fst a) p\n\ngoal (1 subgoal):\n 1. q = q0 \\<or> q \\<in> (snd \\<circ> snd) ` rel", "using \\<open>\\<And> q io p . q \\<in> succ ?M io p \\<Longrightarrow> q \\<in> image (snd \\<circ> snd) rel\\<close>"], ["proof (prove)\nusing this:\n  q = snd a\n  p \\<in> nodes (from_rel rel q0)\n  snd a \\<in> succ (from_rel rel q0) (fst a) p\n  ?q \\<in> succ (from_rel rel q0) ?io ?p \\<Longrightarrow>\n  ?q \\<in> (snd \\<circ> snd) ` rel\n\ngoal (1 subgoal):\n 1. q = q0 \\<or> q \\<in> (snd \\<circ> snd) ` rel", "by blast"], ["proof (state)\nthis:\n  q = q0 \\<or> q \\<in> (snd \\<circ> snd) ` rel\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  q = q0 \\<or> q \\<in> (snd \\<circ> snd) ` rel\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?q \\<in> nodes (from_rel rel q0) \\<Longrightarrow>\n  ?q = q0 \\<or> ?q \\<in> (snd \\<circ> snd) ` rel\n\ngoal (1 subgoal):\n 1. nodes (from_rel rel q0) \\<subseteq> insert q0 ((snd \\<circ> snd) ` rel)", "then"], ["proof (chain)\npicking this:\n  ?q \\<in> nodes (from_rel rel q0) \\<Longrightarrow>\n  ?q = q0 \\<or> ?q \\<in> (snd \\<circ> snd) ` rel", "show \"nodes ?M \\<subseteq> insert q0 (image (snd \\<circ> snd) rel)\""], ["proof (prove)\nusing this:\n  ?q \\<in> nodes (from_rel rel q0) \\<Longrightarrow>\n  ?q = q0 \\<or> ?q \\<in> (snd \\<circ> snd) ` rel\n\ngoal (1 subgoal):\n 1. nodes (from_rel rel q0) \\<subseteq> insert q0 ((snd \\<circ> snd) ` rel)", "by blast"], ["proof (state)\nthis:\n  nodes (from_rel rel q0) \\<subseteq> insert q0 ((snd \\<circ> snd) ` rel)\n\ngoal:\nNo subgoals!", "qed"], ["", "fun well_formed_rel :: \"('state \\<times> ('in \\<times> 'out) \\<times> 'state) set \\<Rightarrow> bool\" where\n  \"well_formed_rel rel = (finite rel\n                          \\<and> (\\<forall> s1 x y . (x \\<notin> image (fst \\<circ> fst \\<circ> snd) rel\n                                            \\<or> y \\<notin> image (snd \\<circ> fst \\<circ> snd) rel)\n                                        \\<longrightarrow> \\<not>(\\<exists> s2 . (s1,(x,y),s2) \\<in> rel))\n                          \\<and> rel \\<noteq> {})\""], ["", "lemma well_formed_from_rel :\n  assumes \"well_formed_rel rel\"\n  shows \"well_formed (from_rel rel q0)\"  (is \"well_formed ?M\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. well_formed (from_rel rel q0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. well_formed (from_rel rel q0)", "have \"nodes ?M \\<subseteq> insert q0 (image (snd \\<circ> snd) rel)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes (from_rel rel q0) \\<subseteq> insert q0 ((snd \\<circ> snd) ` rel)", "using nodes_from_rel[of rel q0]"], ["proof (prove)\nusing this:\n  nodes (from_rel rel q0) \\<subseteq> insert q0 ((snd \\<circ> snd) ` rel)\n\ngoal (1 subgoal):\n 1. nodes (from_rel rel q0) \\<subseteq> insert q0 ((snd \\<circ> snd) ` rel)", "by auto"], ["proof (state)\nthis:\n  nodes (from_rel rel q0) \\<subseteq> insert q0 ((snd \\<circ> snd) ` rel)\n\ngoal (1 subgoal):\n 1. well_formed (from_rel rel q0)", "moreover"], ["proof (state)\nthis:\n  nodes (from_rel rel q0) \\<subseteq> insert q0 ((snd \\<circ> snd) ` rel)\n\ngoal (1 subgoal):\n 1. well_formed (from_rel rel q0)", "have \"finite (insert q0 (image (snd \\<circ> snd) rel))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (insert q0 ((snd \\<circ> snd) ` rel))", "using assms"], ["proof (prove)\nusing this:\n  ASC_Example.well_formed_rel rel\n\ngoal (1 subgoal):\n 1. finite (insert q0 ((snd \\<circ> snd) ` rel))", "by auto"], ["proof (state)\nthis:\n  finite (insert q0 ((snd \\<circ> snd) ` rel))\n\ngoal (1 subgoal):\n 1. well_formed (from_rel rel q0)", "ultimately"], ["proof (chain)\npicking this:\n  nodes (from_rel rel q0) \\<subseteq> insert q0 ((snd \\<circ> snd) ` rel)\n  finite (insert q0 ((snd \\<circ> snd) ` rel))", "have \"finite (nodes ?M)\""], ["proof (prove)\nusing this:\n  nodes (from_rel rel q0) \\<subseteq> insert q0 ((snd \\<circ> snd) ` rel)\n  finite (insert q0 ((snd \\<circ> snd) ` rel))\n\ngoal (1 subgoal):\n 1. finite (nodes (from_rel rel q0))", "by (simp add: Finite_Set.finite_subset)"], ["proof (state)\nthis:\n  finite (nodes (from_rel rel q0))\n\ngoal (1 subgoal):\n 1. well_formed (from_rel rel q0)", "moreover"], ["proof (state)\nthis:\n  finite (nodes (from_rel rel q0))\n\ngoal (1 subgoal):\n 1. well_formed (from_rel rel q0)", "have \"finite (inputs ?M)\" \"finite (outputs ?M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (inputs (from_rel rel q0)) &&& finite (outputs (from_rel rel q0))", "using assms"], ["proof (prove)\nusing this:\n  ASC_Example.well_formed_rel rel\n\ngoal (1 subgoal):\n 1. finite (inputs (from_rel rel q0)) &&& finite (outputs (from_rel rel q0))", "by auto"], ["proof (state)\nthis:\n  finite (inputs (from_rel rel q0))\n  finite (outputs (from_rel rel q0))\n\ngoal (1 subgoal):\n 1. well_formed (from_rel rel q0)", "ultimately"], ["proof (chain)\npicking this:\n  finite (nodes (from_rel rel q0))\n  finite (inputs (from_rel rel q0))\n  finite (outputs (from_rel rel q0))", "have \"finite_FSM ?M\""], ["proof (prove)\nusing this:\n  finite (nodes (from_rel rel q0))\n  finite (inputs (from_rel rel q0))\n  finite (outputs (from_rel rel q0))\n\ngoal (1 subgoal):\n 1. finite_FSM (from_rel rel q0)", "by auto"], ["proof (state)\nthis:\n  finite_FSM (from_rel rel q0)\n\ngoal (1 subgoal):\n 1. well_formed (from_rel rel q0)", "moreover"], ["proof (state)\nthis:\n  finite_FSM (from_rel rel q0)\n\ngoal (1 subgoal):\n 1. well_formed (from_rel rel q0)", "have \"inputs ?M \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inputs (from_rel rel q0) \\<noteq> {}", "using assms"], ["proof (prove)\nusing this:\n  ASC_Example.well_formed_rel rel\n\ngoal (1 subgoal):\n 1. inputs (from_rel rel q0) \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  inputs (from_rel rel q0) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. well_formed (from_rel rel q0)", "moreover"], ["proof (state)\nthis:\n  inputs (from_rel rel q0) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. well_formed (from_rel rel q0)", "have \"outputs ?M \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. outputs (from_rel rel q0) \\<noteq> {}", "using assms"], ["proof (prove)\nusing this:\n  ASC_Example.well_formed_rel rel\n\ngoal (1 subgoal):\n 1. outputs (from_rel rel q0) \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  outputs (from_rel rel q0) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. well_formed (from_rel rel q0)", "moreover"], ["proof (state)\nthis:\n  outputs (from_rel rel q0) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. well_formed (from_rel rel q0)", "have \"\\<And> s1 x y . (x \\<notin> inputs ?M \\<or> y \\<notin> outputs ?M) \\<longrightarrow> succ ?M (x,y) s1 = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s1 x y.\n       x \\<notin> inputs (from_rel rel q0) \\<or>\n       y \\<notin> outputs (from_rel rel q0) \\<longrightarrow>\n       succ (from_rel rel q0) (x, y) s1 = {}", "using assms"], ["proof (prove)\nusing this:\n  ASC_Example.well_formed_rel rel\n\ngoal (1 subgoal):\n 1. \\<And>s1 x y.\n       x \\<notin> inputs (from_rel rel q0) \\<or>\n       y \\<notin> outputs (from_rel rel q0) \\<longrightarrow>\n       succ (from_rel rel q0) (x, y) s1 = {}", "by auto"], ["proof (state)\nthis:\n  ?x \\<notin> inputs (from_rel rel q0) \\<or>\n  ?y \\<notin> outputs (from_rel rel q0) \\<longrightarrow>\n  succ (from_rel rel q0) (?x, ?y) ?s1.0 = {}\n\ngoal (1 subgoal):\n 1. well_formed (from_rel rel q0)", "ultimately"], ["proof (chain)\npicking this:\n  finite_FSM (from_rel rel q0)\n  inputs (from_rel rel q0) \\<noteq> {}\n  outputs (from_rel rel q0) \\<noteq> {}\n  ?x \\<notin> inputs (from_rel rel q0) \\<or>\n  ?y \\<notin> outputs (from_rel rel q0) \\<longrightarrow>\n  succ (from_rel rel q0) (?x, ?y) ?s1.0 = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  finite_FSM (from_rel rel q0)\n  inputs (from_rel rel q0) \\<noteq> {}\n  outputs (from_rel rel q0) \\<noteq> {}\n  ?x \\<notin> inputs (from_rel rel q0) \\<or>\n  ?y \\<notin> outputs (from_rel rel q0) \\<longrightarrow>\n  succ (from_rel rel q0) (?x, ?y) ?s1.0 = {}\n\ngoal (1 subgoal):\n 1. well_formed (from_rel rel q0)", "by auto"], ["proof (state)\nthis:\n  well_formed (from_rel rel q0)\n\ngoal:\nNo subgoals!", "qed"], ["", "fun completely_specified_rel_over :: \"('state \\<times> ('in \\<times> 'out) \\<times> 'state) set \\<Rightarrow> 'state set \\<Rightarrow> bool\"\n  where\n  \"completely_specified_rel_over rel nods = (\\<forall> s1 \\<in> nods .\n                                                \\<forall> x \\<in> image (fst \\<circ> fst \\<circ> snd) rel .\n                                                  \\<exists> y \\<in> image (snd \\<circ> fst \\<circ> snd) rel .\n                                                    \\<exists> s2 . (s1,(x,y),s2) \\<in> rel)\""], ["", "lemma completely_specified_from_rel :\n  assumes \"completely_specified_rel_over rel (nodes ((from_rel rel q0)))\"\n  shows \"completely_specified (from_rel rel q0)\"  (is \"completely_specified ?M\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_specified (from_rel rel q0)", "unfolding completely_specified.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s1\\<in>nodes (from_rel rel q0).\n       \\<forall>x\\<in>inputs (from_rel rel q0).\n          \\<exists>y\\<in>outputs (from_rel rel q0).\n             \\<exists>s2. s2 \\<in> succ (from_rel rel q0) (x, y) s1", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s1.\n       s1 \\<in> nodes (from_rel rel q0) \\<Longrightarrow>\n       \\<forall>x\\<in>inputs (from_rel rel q0).\n          \\<exists>y\\<in>outputs (from_rel rel q0).\n             \\<exists>s2. s2 \\<in> succ (from_rel rel q0) (x, y) s1", "fix s1"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s1.\n       s1 \\<in> nodes (from_rel rel q0) \\<Longrightarrow>\n       \\<forall>x\\<in>inputs (from_rel rel q0).\n          \\<exists>y\\<in>outputs (from_rel rel q0).\n             \\<exists>s2. s2 \\<in> succ (from_rel rel q0) (x, y) s1", "assume \"s1 \\<in> nodes (from_rel rel q0)\""], ["proof (state)\nthis:\n  s1 \\<in> nodes (from_rel rel q0)\n\ngoal (1 subgoal):\n 1. \\<And>s1.\n       s1 \\<in> nodes (from_rel rel q0) \\<Longrightarrow>\n       \\<forall>x\\<in>inputs (from_rel rel q0).\n          \\<exists>y\\<in>outputs (from_rel rel q0).\n             \\<exists>s2. s2 \\<in> succ (from_rel rel q0) (x, y) s1", "show  \"\\<forall>x\\<in>inputs ?M. \\<exists>y\\<in>outputs ?M. \\<exists>s2. s2 \\<in> succ ?M (x, y) s1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>inputs (from_rel rel q0).\n       \\<exists>y\\<in>outputs (from_rel rel q0).\n          \\<exists>s2. s2 \\<in> succ (from_rel rel q0) (x, y) s1", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> inputs (from_rel rel q0) \\<Longrightarrow>\n       \\<exists>y\\<in>outputs (from_rel rel q0).\n          \\<exists>s2. s2 \\<in> succ (from_rel rel q0) (x, y) s1", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> inputs (from_rel rel q0) \\<Longrightarrow>\n       \\<exists>y\\<in>outputs (from_rel rel q0).\n          \\<exists>s2. s2 \\<in> succ (from_rel rel q0) (x, y) s1", "assume \"x \\<in> inputs (from_rel rel q0)\""], ["proof (state)\nthis:\n  x \\<in> inputs (from_rel rel q0)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> inputs (from_rel rel q0) \\<Longrightarrow>\n       \\<exists>y\\<in>outputs (from_rel rel q0).\n          \\<exists>s2. s2 \\<in> succ (from_rel rel q0) (x, y) s1", "then"], ["proof (chain)\npicking this:\n  x \\<in> inputs (from_rel rel q0)", "have \"x \\<in>  image (fst \\<circ> fst \\<circ> snd) rel\""], ["proof (prove)\nusing this:\n  x \\<in> inputs (from_rel rel q0)\n\ngoal (1 subgoal):\n 1. x \\<in> (fst \\<circ> fst \\<circ> snd) ` rel", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> inputs (from_rel rel q0)\n  completely_specified_rel_over rel (nodes (from_rel rel q0))\n\ngoal (1 subgoal):\n 1. x \\<in> (fst \\<circ> fst \\<circ> snd) ` rel", "by auto"], ["proof (state)\nthis:\n  x \\<in> (fst \\<circ> fst \\<circ> snd) ` rel\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> inputs (from_rel rel q0) \\<Longrightarrow>\n       \\<exists>y\\<in>outputs (from_rel rel q0).\n          \\<exists>s2. s2 \\<in> succ (from_rel rel q0) (x, y) s1", "obtain y s2 where \"y \\<in> image (snd \\<circ> fst \\<circ> snd) rel\" \"(s1,(x,y),s2) \\<in> rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y s2.\n        \\<lbrakk>y \\<in> (snd \\<circ> fst \\<circ> snd) ` rel;\n         (s1, (x, y), s2) \\<in> rel\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms \\<open>s1 \\<in> nodes (from_rel rel q0)\\<close> \\<open>x \\<in>  image (fst \\<circ> fst \\<circ> snd) rel\\<close>"], ["proof (prove)\nusing this:\n  completely_specified_rel_over rel (nodes (from_rel rel q0))\n  s1 \\<in> nodes (from_rel rel q0)\n  x \\<in> (fst \\<circ> fst \\<circ> snd) ` rel\n\ngoal (1 subgoal):\n 1. (\\<And>y s2.\n        \\<lbrakk>y \\<in> (snd \\<circ> fst \\<circ> snd) ` rel;\n         (s1, (x, y), s2) \\<in> rel\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson completely_specified_rel_over.elims(2))"], ["proof (state)\nthis:\n  y \\<in> (snd \\<circ> fst \\<circ> snd) ` rel\n  (s1, (x, y), s2) \\<in> rel\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> inputs (from_rel rel q0) \\<Longrightarrow>\n       \\<exists>y\\<in>outputs (from_rel rel q0).\n          \\<exists>s2. s2 \\<in> succ (from_rel rel q0) (x, y) s1", "then"], ["proof (chain)\npicking this:\n  y \\<in> (snd \\<circ> fst \\<circ> snd) ` rel\n  (s1, (x, y), s2) \\<in> rel", "have \"y \\<in> outputs (from_rel rel q0)\" \"s2 \\<in> succ (from_rel rel q0) (x, y) s1\""], ["proof (prove)\nusing this:\n  y \\<in> (snd \\<circ> fst \\<circ> snd) ` rel\n  (s1, (x, y), s2) \\<in> rel\n\ngoal (1 subgoal):\n 1. y \\<in> outputs (from_rel rel q0) &&&\n    s2 \\<in> succ (from_rel rel q0) (x, y) s1", "by auto"], ["proof (state)\nthis:\n  y \\<in> outputs (from_rel rel q0)\n  s2 \\<in> succ (from_rel rel q0) (x, y) s1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> inputs (from_rel rel q0) \\<Longrightarrow>\n       \\<exists>y\\<in>outputs (from_rel rel q0).\n          \\<exists>s2. s2 \\<in> succ (from_rel rel q0) (x, y) s1", "then"], ["proof (chain)\npicking this:\n  y \\<in> outputs (from_rel rel q0)\n  s2 \\<in> succ (from_rel rel q0) (x, y) s1", "show \"\\<exists>y\\<in>outputs (from_rel rel q0). \\<exists>s2. s2 \\<in> succ (from_rel rel q0) (x, y) s1\""], ["proof (prove)\nusing this:\n  y \\<in> outputs (from_rel rel q0)\n  s2 \\<in> succ (from_rel rel q0) (x, y) s1\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>outputs (from_rel rel q0).\n       \\<exists>s2. s2 \\<in> succ (from_rel rel q0) (x, y) s1", "by blast"], ["proof (state)\nthis:\n  \\<exists>y\\<in>outputs (from_rel rel q0).\n     \\<exists>s2. s2 \\<in> succ (from_rel rel q0) (x, y) s1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>inputs (from_rel rel q0).\n     \\<exists>y\\<in>outputs (from_rel rel q0).\n        \\<exists>s2. s2 \\<in> succ (from_rel rel q0) (x, y) s1\n\ngoal:\nNo subgoals!", "qed"], ["", "fun observable_rel :: \"('state \\<times> ('in \\<times> 'out) \\<times> 'state) set \\<Rightarrow> bool\" where\n  \"observable_rel rel = (\\<forall> io s1 . { s2 . (s1,io,s2) \\<in> rel } = {}\n                                    \\<or> (\\<exists> s2 . { s2' . (s1,io,s2') \\<in> rel } = {s2}))\""], ["", "lemma observable_from_rel :\n  assumes \"observable_rel rel\"\n  shows \"observable (from_rel rel q0)\"  (is \"observable ?M\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. observable (from_rel rel q0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. observable (from_rel rel q0)", "have \"\\<And> io s1 . { s2 . (s1,io,s2) \\<in> rel } = succ ?M io s1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>io s1. {s2. (s1, io, s2) \\<in> rel} = succ (from_rel rel q0) io s1", "by auto"], ["proof (state)\nthis:\n  {s2. (?s1.0, ?io, s2) \\<in> rel} = succ (from_rel rel q0) ?io ?s1.0\n\ngoal (1 subgoal):\n 1. observable (from_rel rel q0)", "then"], ["proof (chain)\npicking this:\n  {s2. (?s1.0, ?io, s2) \\<in> rel} = succ (from_rel rel q0) ?io ?s1.0", "show ?thesis"], ["proof (prove)\nusing this:\n  {s2. (?s1.0, ?io, s2) \\<in> rel} = succ (from_rel rel q0) ?io ?s1.0\n\ngoal (1 subgoal):\n 1. observable (from_rel rel q0)", "using assms"], ["proof (prove)\nusing this:\n  {s2. (?s1.0, ?io, s2) \\<in> rel} = succ (from_rel rel q0) ?io ?s1.0\n  ASC_Example.observable_rel rel\n\ngoal (1 subgoal):\n 1. observable (from_rel rel q0)", "by auto"], ["proof (state)\nthis:\n  observable (from_rel rel q0)\n\ngoal:\nNo subgoals!", "qed"], ["", "abbreviation \"OFSM_rel rel q0 \\<equiv> well_formed_rel rel\n                                \\<and> completely_specified_rel_over rel (nodes (from_rel rel q0))\n                                \\<and> observable_rel rel\""], ["", "lemma OFMS_from_rel :\n  assumes \"OFSM_rel rel q0\"\n  shows \"OFSM (from_rel rel q0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OFSM (from_rel rel q0)", "by (metis assms completely_specified_from_rel observable_from_rel well_formed_from_rel)"], ["", "subsection \\<open> Example FSMs and properties \\<close>"], ["", "abbreviation \"M\\<^sub>S_rel :: (nat\\<times>(nat\\<times>nat)\\<times>nat) set \\<equiv> {(0,(0,0),1), (0,(0,1),1), (1,(0,2),1)}\""], ["", "abbreviation \"M\\<^sub>S :: (nat,nat,nat) FSM \\<equiv> from_rel M\\<^sub>S_rel 0\""], ["", "abbreviation \"M\\<^sub>I_rel :: (nat\\<times>(nat\\<times>nat)\\<times>nat) set \\<equiv> {(0,(0,0),1), (0,(0,1),1), (1,(0,2),0)}\""], ["", "abbreviation \"M\\<^sub>I :: (nat,nat,nat) FSM \\<equiv> from_rel M\\<^sub>I_rel 0\""], ["", "lemma example_nodes :\n  \"nodes M\\<^sub>S = {0,1}\" \"nodes M\\<^sub>I = {0,1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes M\\<^sub>S = {0, 1} &&& nodes M\\<^sub>I = {0, 1}", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. nodes M\\<^sub>S = {0, 1}\n 2. nodes M\\<^sub>I = {0, 1}", "have \"0 \\<in> nodes M\\<^sub>S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<in> nodes M\\<^sub>S", "by auto"], ["proof (state)\nthis:\n  0 \\<in> nodes M\\<^sub>S\n\ngoal (2 subgoals):\n 1. nodes M\\<^sub>S = {0, 1}\n 2. nodes M\\<^sub>I = {0, 1}", "have \"1 \\<in> succ M\\<^sub>S (0,0) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<in> succ M\\<^sub>S (0, 0) 0", "by auto"], ["proof (state)\nthis:\n  1 \\<in> succ M\\<^sub>S (0, 0) 0\n\ngoal (2 subgoals):\n 1. nodes M\\<^sub>S = {0, 1}\n 2. nodes M\\<^sub>I = {0, 1}", "have \"1 \\<in> nodes M\\<^sub>S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<in> nodes M\\<^sub>S", "by (meson \\<open>0 \\<in> nodes M\\<^sub>S\\<close> \\<open>1 \\<in> succ M\\<^sub>S (0, 0) 0\\<close> succ_nodes)"], ["proof (state)\nthis:\n  1 \\<in> nodes M\\<^sub>S\n\ngoal (2 subgoals):\n 1. nodes M\\<^sub>S = {0, 1}\n 2. nodes M\\<^sub>I = {0, 1}", "have \"{0,1} \\<subseteq> nodes M\\<^sub>S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0, 1} \\<subseteq> nodes M\\<^sub>S", "using \\<open>0 \\<in> nodes M\\<^sub>S\\<close> \\<open>1 \\<in> nodes M\\<^sub>S\\<close>"], ["proof (prove)\nusing this:\n  0 \\<in> nodes M\\<^sub>S\n  1 \\<in> nodes M\\<^sub>S\n\ngoal (1 subgoal):\n 1. {0, 1} \\<subseteq> nodes M\\<^sub>S", "by auto"], ["proof (state)\nthis:\n  {0, 1} \\<subseteq> nodes M\\<^sub>S\n\ngoal (2 subgoals):\n 1. nodes M\\<^sub>S = {0, 1}\n 2. nodes M\\<^sub>I = {0, 1}", "moreover"], ["proof (state)\nthis:\n  {0, 1} \\<subseteq> nodes M\\<^sub>S\n\ngoal (2 subgoals):\n 1. nodes M\\<^sub>S = {0, 1}\n 2. nodes M\\<^sub>I = {0, 1}", "have \"nodes M\\<^sub>S \\<subseteq> {0,1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes M\\<^sub>S \\<subseteq> {0, 1}", "using nodes_from_rel[of M\\<^sub>S_rel 0]"], ["proof (prove)\nusing this:\n  nodes M\\<^sub>S \\<subseteq> insert 0 ((snd \\<circ> snd) ` M\\<^sub>S_rel)\n\ngoal (1 subgoal):\n 1. nodes M\\<^sub>S \\<subseteq> {0, 1}", "by auto"], ["proof (state)\nthis:\n  nodes M\\<^sub>S \\<subseteq> {0, 1}\n\ngoal (2 subgoals):\n 1. nodes M\\<^sub>S = {0, 1}\n 2. nodes M\\<^sub>I = {0, 1}", "ultimately"], ["proof (chain)\npicking this:\n  {0, 1} \\<subseteq> nodes M\\<^sub>S\n  nodes M\\<^sub>S \\<subseteq> {0, 1}", "show \"nodes M\\<^sub>S = {0,1}\""], ["proof (prove)\nusing this:\n  {0, 1} \\<subseteq> nodes M\\<^sub>S\n  nodes M\\<^sub>S \\<subseteq> {0, 1}\n\ngoal (1 subgoal):\n 1. nodes M\\<^sub>S = {0, 1}", "by blast"], ["proof (state)\nthis:\n  nodes M\\<^sub>S = {0, 1}\n\ngoal (1 subgoal):\n 1. nodes M\\<^sub>I = {0, 1}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. nodes M\\<^sub>I = {0, 1}", "have \"0 \\<in> nodes M\\<^sub>I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<in> nodes M\\<^sub>I", "by auto"], ["proof (state)\nthis:\n  0 \\<in> nodes M\\<^sub>I\n\ngoal (1 subgoal):\n 1. nodes M\\<^sub>I = {0, 1}", "have \"1 \\<in> succ M\\<^sub>I (0,0) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<in> succ M\\<^sub>I (0, 0) 0", "by auto"], ["proof (state)\nthis:\n  1 \\<in> succ M\\<^sub>I (0, 0) 0\n\ngoal (1 subgoal):\n 1. nodes M\\<^sub>I = {0, 1}", "have \"1 \\<in> nodes M\\<^sub>I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<in> nodes M\\<^sub>I", "by (meson \\<open>0 \\<in> nodes M\\<^sub>I\\<close> \\<open>1 \\<in> succ M\\<^sub>I (0, 0) 0\\<close> succ_nodes)"], ["proof (state)\nthis:\n  1 \\<in> nodes M\\<^sub>I\n\ngoal (1 subgoal):\n 1. nodes M\\<^sub>I = {0, 1}", "have \"{0,1} \\<subseteq> nodes M\\<^sub>I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0, 1} \\<subseteq> nodes M\\<^sub>I", "using \\<open>0 \\<in> nodes M\\<^sub>I\\<close> \\<open>1 \\<in> nodes M\\<^sub>I\\<close>"], ["proof (prove)\nusing this:\n  0 \\<in> nodes M\\<^sub>I\n  1 \\<in> nodes M\\<^sub>I\n\ngoal (1 subgoal):\n 1. {0, 1} \\<subseteq> nodes M\\<^sub>I", "by auto"], ["proof (state)\nthis:\n  {0, 1} \\<subseteq> nodes M\\<^sub>I\n\ngoal (1 subgoal):\n 1. nodes M\\<^sub>I = {0, 1}", "moreover"], ["proof (state)\nthis:\n  {0, 1} \\<subseteq> nodes M\\<^sub>I\n\ngoal (1 subgoal):\n 1. nodes M\\<^sub>I = {0, 1}", "have \"nodes M\\<^sub>I \\<subseteq> {0,1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes M\\<^sub>I \\<subseteq> {0, 1}", "using nodes_from_rel[of M\\<^sub>I_rel 0]"], ["proof (prove)\nusing this:\n  nodes M\\<^sub>I \\<subseteq> insert 0 ((snd \\<circ> snd) ` M\\<^sub>I_rel)\n\ngoal (1 subgoal):\n 1. nodes M\\<^sub>I \\<subseteq> {0, 1}", "by auto"], ["proof (state)\nthis:\n  nodes M\\<^sub>I \\<subseteq> {0, 1}\n\ngoal (1 subgoal):\n 1. nodes M\\<^sub>I = {0, 1}", "ultimately"], ["proof (chain)\npicking this:\n  {0, 1} \\<subseteq> nodes M\\<^sub>I\n  nodes M\\<^sub>I \\<subseteq> {0, 1}", "show \"nodes M\\<^sub>I = {0,1}\""], ["proof (prove)\nusing this:\n  {0, 1} \\<subseteq> nodes M\\<^sub>I\n  nodes M\\<^sub>I \\<subseteq> {0, 1}\n\ngoal (1 subgoal):\n 1. nodes M\\<^sub>I = {0, 1}", "by blast"], ["proof (state)\nthis:\n  nodes M\\<^sub>I = {0, 1}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma example_OFSM :\n  \"OFSM M\\<^sub>S\" \"OFSM M\\<^sub>I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OFSM M\\<^sub>S &&& OFSM M\\<^sub>I", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. OFSM M\\<^sub>S\n 2. OFSM M\\<^sub>I", "have \"well_formed_rel M\\<^sub>S_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ASC_Example.well_formed_rel M\\<^sub>S_rel", "unfolding well_formed_rel.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite M\\<^sub>S_rel \\<and>\n    (\\<forall>s1 x y.\n        x \\<notin> (fst \\<circ> fst \\<circ> snd) ` M\\<^sub>S_rel \\<or>\n        y \\<notin> (snd \\<circ> fst \\<circ> snd) `\n                   M\\<^sub>S_rel \\<longrightarrow>\n        (\\<nexists>s2. (s1, (x, y), s2) \\<in> M\\<^sub>S_rel)) \\<and>\n    M\\<^sub>S_rel \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  ASC_Example.well_formed_rel M\\<^sub>S_rel\n\ngoal (2 subgoals):\n 1. OFSM M\\<^sub>S\n 2. OFSM M\\<^sub>I", "moreover"], ["proof (state)\nthis:\n  ASC_Example.well_formed_rel M\\<^sub>S_rel\n\ngoal (2 subgoals):\n 1. OFSM M\\<^sub>S\n 2. OFSM M\\<^sub>I", "have \"completely_specified_rel_over M\\<^sub>S_rel (nodes (from_rel M\\<^sub>S_rel 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_specified_rel_over M\\<^sub>S_rel (nodes M\\<^sub>S)", "unfolding completely_specified_rel_over.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s1\\<in>nodes M\\<^sub>S.\n       \\<forall>x\\<in>(fst \\<circ> fst \\<circ> snd) ` M\\<^sub>S_rel.\n          \\<exists>y\\<in>(snd \\<circ> fst \\<circ> snd) ` M\\<^sub>S_rel.\n             \\<exists>s2. (s1, (x, y), s2) \\<in> M\\<^sub>S_rel", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s1.\n       s1 \\<in> nodes M\\<^sub>S \\<Longrightarrow>\n       \\<forall>x\\<in>(fst \\<circ> fst \\<circ> snd) ` M\\<^sub>S_rel.\n          \\<exists>y\\<in>(snd \\<circ> fst \\<circ> snd) ` M\\<^sub>S_rel.\n             \\<exists>s2. (s1, (x, y), s2) \\<in> M\\<^sub>S_rel", "fix s1"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s1.\n       s1 \\<in> nodes M\\<^sub>S \\<Longrightarrow>\n       \\<forall>x\\<in>(fst \\<circ> fst \\<circ> snd) ` M\\<^sub>S_rel.\n          \\<exists>y\\<in>(snd \\<circ> fst \\<circ> snd) ` M\\<^sub>S_rel.\n             \\<exists>s2. (s1, (x, y), s2) \\<in> M\\<^sub>S_rel", "assume \"(s1::nat) \\<in> nodes (from_rel M\\<^sub>S_rel 0)\""], ["proof (state)\nthis:\n  s1 \\<in> nodes M\\<^sub>S\n\ngoal (1 subgoal):\n 1. \\<And>s1.\n       s1 \\<in> nodes M\\<^sub>S \\<Longrightarrow>\n       \\<forall>x\\<in>(fst \\<circ> fst \\<circ> snd) ` M\\<^sub>S_rel.\n          \\<exists>y\\<in>(snd \\<circ> fst \\<circ> snd) ` M\\<^sub>S_rel.\n             \\<exists>s2. (s1, (x, y), s2) \\<in> M\\<^sub>S_rel", "then"], ["proof (chain)\npicking this:\n  s1 \\<in> nodes M\\<^sub>S", "have \"s1 \\<in> (insert 0 (image (snd \\<circ> snd) M\\<^sub>S_rel))\""], ["proof (prove)\nusing this:\n  s1 \\<in> nodes M\\<^sub>S\n\ngoal (1 subgoal):\n 1. s1 \\<in> insert 0 ((snd \\<circ> snd) ` M\\<^sub>S_rel)", "using nodes_from_rel[of M\\<^sub>S_rel 0]"], ["proof (prove)\nusing this:\n  s1 \\<in> nodes M\\<^sub>S\n  nodes M\\<^sub>S \\<subseteq> insert 0 ((snd \\<circ> snd) ` M\\<^sub>S_rel)\n\ngoal (1 subgoal):\n 1. s1 \\<in> insert 0 ((snd \\<circ> snd) ` M\\<^sub>S_rel)", "by blast"], ["proof (state)\nthis:\n  s1 \\<in> insert 0 ((snd \\<circ> snd) ` M\\<^sub>S_rel)\n\ngoal (1 subgoal):\n 1. \\<And>s1.\n       s1 \\<in> nodes M\\<^sub>S \\<Longrightarrow>\n       \\<forall>x\\<in>(fst \\<circ> fst \\<circ> snd) ` M\\<^sub>S_rel.\n          \\<exists>y\\<in>(snd \\<circ> fst \\<circ> snd) ` M\\<^sub>S_rel.\n             \\<exists>s2. (s1, (x, y), s2) \\<in> M\\<^sub>S_rel", "moreover"], ["proof (state)\nthis:\n  s1 \\<in> insert 0 ((snd \\<circ> snd) ` M\\<^sub>S_rel)\n\ngoal (1 subgoal):\n 1. \\<And>s1.\n       s1 \\<in> nodes M\\<^sub>S \\<Longrightarrow>\n       \\<forall>x\\<in>(fst \\<circ> fst \\<circ> snd) ` M\\<^sub>S_rel.\n          \\<exists>y\\<in>(snd \\<circ> fst \\<circ> snd) ` M\\<^sub>S_rel.\n             \\<exists>s2. (s1, (x, y), s2) \\<in> M\\<^sub>S_rel", "have \"completely_specified_rel_over M\\<^sub>S_rel (insert 0 (image (snd \\<circ> snd) M\\<^sub>S_rel))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_specified_rel_over M\\<^sub>S_rel\n     (insert 0 ((snd \\<circ> snd) ` M\\<^sub>S_rel))", "unfolding completely_specified_rel_over.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s1\\<in>insert 0 ((snd \\<circ> snd) ` M\\<^sub>S_rel).\n       \\<forall>x\\<in>(fst \\<circ> fst \\<circ> snd) ` M\\<^sub>S_rel.\n          \\<exists>y\\<in>(snd \\<circ> fst \\<circ> snd) ` M\\<^sub>S_rel.\n             \\<exists>s2. (s1, (x, y), s2) \\<in> M\\<^sub>S_rel", "by auto"], ["proof (state)\nthis:\n  completely_specified_rel_over M\\<^sub>S_rel\n   (insert 0 ((snd \\<circ> snd) ` M\\<^sub>S_rel))\n\ngoal (1 subgoal):\n 1. \\<And>s1.\n       s1 \\<in> nodes M\\<^sub>S \\<Longrightarrow>\n       \\<forall>x\\<in>(fst \\<circ> fst \\<circ> snd) ` M\\<^sub>S_rel.\n          \\<exists>y\\<in>(snd \\<circ> fst \\<circ> snd) ` M\\<^sub>S_rel.\n             \\<exists>s2. (s1, (x, y), s2) \\<in> M\\<^sub>S_rel", "ultimately"], ["proof (chain)\npicking this:\n  s1 \\<in> insert 0 ((snd \\<circ> snd) ` M\\<^sub>S_rel)\n  completely_specified_rel_over M\\<^sub>S_rel\n   (insert 0 ((snd \\<circ> snd) ` M\\<^sub>S_rel))", "show \"\\<forall>x\\<in>(fst \\<circ> fst \\<circ> snd) ` M\\<^sub>S_rel.\n                      \\<exists>y\\<in>(snd \\<circ> fst \\<circ> snd) ` M\\<^sub>S_rel. \\<exists>s2. (s1, (x, y), s2) \\<in> M\\<^sub>S_rel\""], ["proof (prove)\nusing this:\n  s1 \\<in> insert 0 ((snd \\<circ> snd) ` M\\<^sub>S_rel)\n  completely_specified_rel_over M\\<^sub>S_rel\n   (insert 0 ((snd \\<circ> snd) ` M\\<^sub>S_rel))\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>(fst \\<circ> fst \\<circ> snd) ` M\\<^sub>S_rel.\n       \\<exists>y\\<in>(snd \\<circ> fst \\<circ> snd) ` M\\<^sub>S_rel.\n          \\<exists>s2. (s1, (x, y), s2) \\<in> M\\<^sub>S_rel", "by simp"], ["proof (state)\nthis:\n  \\<forall>x\\<in>(fst \\<circ> fst \\<circ> snd) ` M\\<^sub>S_rel.\n     \\<exists>y\\<in>(snd \\<circ> fst \\<circ> snd) ` M\\<^sub>S_rel.\n        \\<exists>s2. (s1, (x, y), s2) \\<in> M\\<^sub>S_rel\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  completely_specified_rel_over M\\<^sub>S_rel (nodes M\\<^sub>S)\n\ngoal (2 subgoals):\n 1. OFSM M\\<^sub>S\n 2. OFSM M\\<^sub>I", "moreover"], ["proof (state)\nthis:\n  completely_specified_rel_over M\\<^sub>S_rel (nodes M\\<^sub>S)\n\ngoal (2 subgoals):\n 1. OFSM M\\<^sub>S\n 2. OFSM M\\<^sub>I", "have \"observable_rel M\\<^sub>S_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ASC_Example.observable_rel M\\<^sub>S_rel", "by auto"], ["proof (state)\nthis:\n  ASC_Example.observable_rel M\\<^sub>S_rel\n\ngoal (2 subgoals):\n 1. OFSM M\\<^sub>S\n 2. OFSM M\\<^sub>I", "ultimately"], ["proof (chain)\npicking this:\n  ASC_Example.well_formed_rel M\\<^sub>S_rel\n  completely_specified_rel_over M\\<^sub>S_rel (nodes M\\<^sub>S)\n  ASC_Example.observable_rel M\\<^sub>S_rel", "have \"OFSM_rel M\\<^sub>S_rel 0\""], ["proof (prove)\nusing this:\n  ASC_Example.well_formed_rel M\\<^sub>S_rel\n  completely_specified_rel_over M\\<^sub>S_rel (nodes M\\<^sub>S)\n  ASC_Example.observable_rel M\\<^sub>S_rel\n\ngoal (1 subgoal):\n 1. OFSM_rel M\\<^sub>S_rel 0", "by auto"], ["proof (state)\nthis:\n  OFSM_rel M\\<^sub>S_rel 0\n\ngoal (2 subgoals):\n 1. OFSM M\\<^sub>S\n 2. OFSM M\\<^sub>I", "then"], ["proof (chain)\npicking this:\n  OFSM_rel M\\<^sub>S_rel 0", "show \"OFSM M\\<^sub>S\""], ["proof (prove)\nusing this:\n  OFSM_rel M\\<^sub>S_rel 0\n\ngoal (1 subgoal):\n 1. OFSM M\\<^sub>S", "using OFMS_from_rel[of M\\<^sub>S_rel 0]"], ["proof (prove)\nusing this:\n  OFSM_rel M\\<^sub>S_rel 0\n  OFSM_rel M\\<^sub>S_rel 0 \\<Longrightarrow> OFSM M\\<^sub>S\n\ngoal (1 subgoal):\n 1. OFSM M\\<^sub>S", "by linarith"], ["proof (state)\nthis:\n  OFSM M\\<^sub>S\n\ngoal (1 subgoal):\n 1. OFSM M\\<^sub>I", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. OFSM M\\<^sub>I", "have \"well_formed_rel M\\<^sub>I_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ASC_Example.well_formed_rel M\\<^sub>I_rel", "unfolding well_formed_rel.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite M\\<^sub>I_rel \\<and>\n    (\\<forall>s1 x y.\n        x \\<notin> (fst \\<circ> fst \\<circ> snd) ` M\\<^sub>I_rel \\<or>\n        y \\<notin> (snd \\<circ> fst \\<circ> snd) `\n                   M\\<^sub>I_rel \\<longrightarrow>\n        (\\<nexists>s2. (s1, (x, y), s2) \\<in> M\\<^sub>I_rel)) \\<and>\n    M\\<^sub>I_rel \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  ASC_Example.well_formed_rel M\\<^sub>I_rel\n\ngoal (1 subgoal):\n 1. OFSM M\\<^sub>I", "moreover"], ["proof (state)\nthis:\n  ASC_Example.well_formed_rel M\\<^sub>I_rel\n\ngoal (1 subgoal):\n 1. OFSM M\\<^sub>I", "have \"completely_specified_rel_over M\\<^sub>I_rel (nodes (from_rel M\\<^sub>I_rel 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_specified_rel_over M\\<^sub>I_rel (nodes M\\<^sub>I)", "unfolding completely_specified_rel_over.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s1\\<in>nodes M\\<^sub>I.\n       \\<forall>x\\<in>(fst \\<circ> fst \\<circ> snd) ` M\\<^sub>I_rel.\n          \\<exists>y\\<in>(snd \\<circ> fst \\<circ> snd) ` M\\<^sub>I_rel.\n             \\<exists>s2. (s1, (x, y), s2) \\<in> M\\<^sub>I_rel", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s1.\n       s1 \\<in> nodes M\\<^sub>I \\<Longrightarrow>\n       \\<forall>x\\<in>(fst \\<circ> fst \\<circ> snd) ` M\\<^sub>I_rel.\n          \\<exists>y\\<in>(snd \\<circ> fst \\<circ> snd) ` M\\<^sub>I_rel.\n             \\<exists>s2. (s1, (x, y), s2) \\<in> M\\<^sub>I_rel", "fix s1"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s1.\n       s1 \\<in> nodes M\\<^sub>I \\<Longrightarrow>\n       \\<forall>x\\<in>(fst \\<circ> fst \\<circ> snd) ` M\\<^sub>I_rel.\n          \\<exists>y\\<in>(snd \\<circ> fst \\<circ> snd) ` M\\<^sub>I_rel.\n             \\<exists>s2. (s1, (x, y), s2) \\<in> M\\<^sub>I_rel", "assume \"(s1::nat) \\<in> nodes (from_rel M\\<^sub>I_rel 0)\""], ["proof (state)\nthis:\n  s1 \\<in> nodes M\\<^sub>I\n\ngoal (1 subgoal):\n 1. \\<And>s1.\n       s1 \\<in> nodes M\\<^sub>I \\<Longrightarrow>\n       \\<forall>x\\<in>(fst \\<circ> fst \\<circ> snd) ` M\\<^sub>I_rel.\n          \\<exists>y\\<in>(snd \\<circ> fst \\<circ> snd) ` M\\<^sub>I_rel.\n             \\<exists>s2. (s1, (x, y), s2) \\<in> M\\<^sub>I_rel", "then"], ["proof (chain)\npicking this:\n  s1 \\<in> nodes M\\<^sub>I", "have \"s1 \\<in> (insert 0 (image (snd \\<circ> snd) M\\<^sub>I_rel))\""], ["proof (prove)\nusing this:\n  s1 \\<in> nodes M\\<^sub>I\n\ngoal (1 subgoal):\n 1. s1 \\<in> insert 0 ((snd \\<circ> snd) ` M\\<^sub>I_rel)", "using nodes_from_rel[of M\\<^sub>I_rel 0]"], ["proof (prove)\nusing this:\n  s1 \\<in> nodes M\\<^sub>I\n  nodes M\\<^sub>I \\<subseteq> insert 0 ((snd \\<circ> snd) ` M\\<^sub>I_rel)\n\ngoal (1 subgoal):\n 1. s1 \\<in> insert 0 ((snd \\<circ> snd) ` M\\<^sub>I_rel)", "by blast"], ["proof (state)\nthis:\n  s1 \\<in> insert 0 ((snd \\<circ> snd) ` M\\<^sub>I_rel)\n\ngoal (1 subgoal):\n 1. \\<And>s1.\n       s1 \\<in> nodes M\\<^sub>I \\<Longrightarrow>\n       \\<forall>x\\<in>(fst \\<circ> fst \\<circ> snd) ` M\\<^sub>I_rel.\n          \\<exists>y\\<in>(snd \\<circ> fst \\<circ> snd) ` M\\<^sub>I_rel.\n             \\<exists>s2. (s1, (x, y), s2) \\<in> M\\<^sub>I_rel", "have \"completely_specified_rel_over M\\<^sub>I_rel (insert 0 (image (snd \\<circ> snd) M\\<^sub>I_rel))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_specified_rel_over M\\<^sub>I_rel\n     (insert 0 ((snd \\<circ> snd) ` M\\<^sub>I_rel))", "unfolding completely_specified_rel_over.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s1\\<in>insert 0 ((snd \\<circ> snd) ` M\\<^sub>I_rel).\n       \\<forall>x\\<in>(fst \\<circ> fst \\<circ> snd) ` M\\<^sub>I_rel.\n          \\<exists>y\\<in>(snd \\<circ> fst \\<circ> snd) ` M\\<^sub>I_rel.\n             \\<exists>s2. (s1, (x, y), s2) \\<in> M\\<^sub>I_rel", "by auto"], ["proof (state)\nthis:\n  completely_specified_rel_over M\\<^sub>I_rel\n   (insert 0 ((snd \\<circ> snd) ` M\\<^sub>I_rel))\n\ngoal (1 subgoal):\n 1. \\<And>s1.\n       s1 \\<in> nodes M\\<^sub>I \\<Longrightarrow>\n       \\<forall>x\\<in>(fst \\<circ> fst \\<circ> snd) ` M\\<^sub>I_rel.\n          \\<exists>y\\<in>(snd \\<circ> fst \\<circ> snd) ` M\\<^sub>I_rel.\n             \\<exists>s2. (s1, (x, y), s2) \\<in> M\\<^sub>I_rel", "show \"\\<forall>x\\<in>(fst \\<circ> fst \\<circ> snd) ` M\\<^sub>I_rel.\n            \\<exists>y\\<in>(snd \\<circ> fst \\<circ> snd) ` M\\<^sub>I_rel. \\<exists>s2. (s1, (x, y), s2) \\<in> M\\<^sub>I_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>(fst \\<circ> fst \\<circ> snd) ` M\\<^sub>I_rel.\n       \\<exists>y\\<in>(snd \\<circ> fst \\<circ> snd) ` M\\<^sub>I_rel.\n          \\<exists>s2. (s1, (x, y), s2) \\<in> M\\<^sub>I_rel", "by (meson \\<open>completely_specified_rel_over M\\<^sub>I_rel (insert 0 ((snd \\<circ> snd) ` M\\<^sub>I_rel))\\<close>\n          \\<open>s1 \\<in> insert 0 ((snd \\<circ> snd) ` M\\<^sub>I_rel)\\<close> completely_specified_rel_over.elims(2))"], ["proof (state)\nthis:\n  \\<forall>x\\<in>(fst \\<circ> fst \\<circ> snd) ` M\\<^sub>I_rel.\n     \\<exists>y\\<in>(snd \\<circ> fst \\<circ> snd) ` M\\<^sub>I_rel.\n        \\<exists>s2. (s1, (x, y), s2) \\<in> M\\<^sub>I_rel\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  completely_specified_rel_over M\\<^sub>I_rel (nodes M\\<^sub>I)\n\ngoal (1 subgoal):\n 1. OFSM M\\<^sub>I", "moreover"], ["proof (state)\nthis:\n  completely_specified_rel_over M\\<^sub>I_rel (nodes M\\<^sub>I)\n\ngoal (1 subgoal):\n 1. OFSM M\\<^sub>I", "have \"observable_rel M\\<^sub>I_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ASC_Example.observable_rel M\\<^sub>I_rel", "by auto"], ["proof (state)\nthis:\n  ASC_Example.observable_rel M\\<^sub>I_rel\n\ngoal (1 subgoal):\n 1. OFSM M\\<^sub>I", "ultimately"], ["proof (chain)\npicking this:\n  ASC_Example.well_formed_rel M\\<^sub>I_rel\n  completely_specified_rel_over M\\<^sub>I_rel (nodes M\\<^sub>I)\n  ASC_Example.observable_rel M\\<^sub>I_rel", "have \"OFSM_rel M\\<^sub>I_rel 0\""], ["proof (prove)\nusing this:\n  ASC_Example.well_formed_rel M\\<^sub>I_rel\n  completely_specified_rel_over M\\<^sub>I_rel (nodes M\\<^sub>I)\n  ASC_Example.observable_rel M\\<^sub>I_rel\n\ngoal (1 subgoal):\n 1. OFSM_rel M\\<^sub>I_rel 0", "by auto"], ["proof (state)\nthis:\n  OFSM_rel M\\<^sub>I_rel 0\n\ngoal (1 subgoal):\n 1. OFSM M\\<^sub>I", "then"], ["proof (chain)\npicking this:\n  OFSM_rel M\\<^sub>I_rel 0", "show \"OFSM M\\<^sub>I\""], ["proof (prove)\nusing this:\n  OFSM_rel M\\<^sub>I_rel 0\n\ngoal (1 subgoal):\n 1. OFSM M\\<^sub>I", "using OFMS_from_rel[of M\\<^sub>I_rel 0]"], ["proof (prove)\nusing this:\n  OFSM_rel M\\<^sub>I_rel 0\n  OFSM_rel M\\<^sub>I_rel 0 \\<Longrightarrow> OFSM M\\<^sub>I\n\ngoal (1 subgoal):\n 1. OFSM M\\<^sub>I", "by linarith"], ["proof (state)\nthis:\n  OFSM M\\<^sub>I\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma example_fault_domain : \"asc_fault_domain M\\<^sub>S M\\<^sub>I 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asc_fault_domain M\\<^sub>S M\\<^sub>I 2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. asc_fault_domain M\\<^sub>S M\\<^sub>I 2", "have \"inputs M\\<^sub>S = inputs M\\<^sub>I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inputs M\\<^sub>S = inputs M\\<^sub>I", "by auto"], ["proof (state)\nthis:\n  inputs M\\<^sub>S = inputs M\\<^sub>I\n\ngoal (1 subgoal):\n 1. asc_fault_domain M\\<^sub>S M\\<^sub>I 2", "moreover"], ["proof (state)\nthis:\n  inputs M\\<^sub>S = inputs M\\<^sub>I\n\ngoal (1 subgoal):\n 1. asc_fault_domain M\\<^sub>S M\\<^sub>I 2", "have \"card (nodes M\\<^sub>I) \\<le> 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |M\\<^sub>I| \\<le> 2", "using example_nodes(2)"], ["proof (prove)\nusing this:\n  nodes M\\<^sub>I = {0, 1}\n\ngoal (1 subgoal):\n 1. |M\\<^sub>I| \\<le> 2", "by auto"], ["proof (state)\nthis:\n  |M\\<^sub>I| \\<le> 2\n\ngoal (1 subgoal):\n 1. asc_fault_domain M\\<^sub>S M\\<^sub>I 2", "ultimately"], ["proof (chain)\npicking this:\n  inputs M\\<^sub>S = inputs M\\<^sub>I\n  |M\\<^sub>I| \\<le> 2", "show \"asc_fault_domain M\\<^sub>S M\\<^sub>I 2\""], ["proof (prove)\nusing this:\n  inputs M\\<^sub>S = inputs M\\<^sub>I\n  |M\\<^sub>I| \\<le> 2\n\ngoal (1 subgoal):\n 1. asc_fault_domain M\\<^sub>S M\\<^sub>I 2", "by auto"], ["proof (state)\nthis:\n  asc_fault_domain M\\<^sub>S M\\<^sub>I 2\n\ngoal:\nNo subgoals!", "qed"], ["", "abbreviation \"FAIL\\<^sub>I :: (nat\\<times>nat) \\<equiv> (3,3)\""], ["", "abbreviation \"PM\\<^sub>I :: (nat, nat, nat\\<times>nat) FSM \\<equiv> \\<lparr>\n            succ = (\\<lambda> a (p1,p2) . (if (p1 \\<in> nodes M\\<^sub>S \\<and> p2 \\<in> nodes M\\<^sub>I \\<and> (fst a \\<in> inputs M\\<^sub>S)\n                                        \\<and> (snd a \\<in> outputs M\\<^sub>S \\<union> outputs M\\<^sub>I))\n                                    then (if (succ M\\<^sub>S a p1 = {} \\<and> succ M\\<^sub>I a p2 \\<noteq> {})\n                                      then {FAIL\\<^sub>I}\n                                      else (succ M\\<^sub>S a p1 \\<times> succ M\\<^sub>I a p2))\n                                    else {})),\n            inputs = inputs M\\<^sub>S,\n            outputs = outputs M\\<^sub>S \\<union> outputs M\\<^sub>I,\n            initial = (initial M\\<^sub>S, initial M\\<^sub>I)\n          \\<rparr>\""], ["", "lemma example_productF : \"productF M\\<^sub>S M\\<^sub>I FAIL\\<^sub>I PM\\<^sub>I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. productF M\\<^sub>S M\\<^sub>I FAIL\\<^sub>I PM\\<^sub>I", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. productF M\\<^sub>S M\\<^sub>I FAIL\\<^sub>I PM\\<^sub>I", "have \"inputs M\\<^sub>S = inputs M\\<^sub>I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inputs M\\<^sub>S = inputs M\\<^sub>I", "by auto"], ["proof (state)\nthis:\n  inputs M\\<^sub>S = inputs M\\<^sub>I\n\ngoal (1 subgoal):\n 1. productF M\\<^sub>S M\\<^sub>I FAIL\\<^sub>I PM\\<^sub>I", "moreover"], ["proof (state)\nthis:\n  inputs M\\<^sub>S = inputs M\\<^sub>I\n\ngoal (1 subgoal):\n 1. productF M\\<^sub>S M\\<^sub>I FAIL\\<^sub>I PM\\<^sub>I", "have \"fst FAIL\\<^sub>I \\<notin> nodes M\\<^sub>S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst FAIL\\<^sub>I \\<notin> nodes M\\<^sub>S", "using example_nodes(1)"], ["proof (prove)\nusing this:\n  nodes M\\<^sub>S = {0, 1}\n\ngoal (1 subgoal):\n 1. fst FAIL\\<^sub>I \\<notin> nodes M\\<^sub>S", "by auto"], ["proof (state)\nthis:\n  fst FAIL\\<^sub>I \\<notin> nodes M\\<^sub>S\n\ngoal (1 subgoal):\n 1. productF M\\<^sub>S M\\<^sub>I FAIL\\<^sub>I PM\\<^sub>I", "moreover"], ["proof (state)\nthis:\n  fst FAIL\\<^sub>I \\<notin> nodes M\\<^sub>S\n\ngoal (1 subgoal):\n 1. productF M\\<^sub>S M\\<^sub>I FAIL\\<^sub>I PM\\<^sub>I", "have \"snd FAIL\\<^sub>I \\<notin> nodes M\\<^sub>I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd FAIL\\<^sub>I \\<notin> nodes M\\<^sub>I", "using example_nodes(2)"], ["proof (prove)\nusing this:\n  nodes M\\<^sub>I = {0, 1}\n\ngoal (1 subgoal):\n 1. snd FAIL\\<^sub>I \\<notin> nodes M\\<^sub>I", "by auto"], ["proof (state)\nthis:\n  snd FAIL\\<^sub>I \\<notin> nodes M\\<^sub>I\n\ngoal (1 subgoal):\n 1. productF M\\<^sub>S M\\<^sub>I FAIL\\<^sub>I PM\\<^sub>I", "ultimately"], ["proof (chain)\npicking this:\n  inputs M\\<^sub>S = inputs M\\<^sub>I\n  fst FAIL\\<^sub>I \\<notin> nodes M\\<^sub>S\n  snd FAIL\\<^sub>I \\<notin> nodes M\\<^sub>I", "show ?thesis"], ["proof (prove)\nusing this:\n  inputs M\\<^sub>S = inputs M\\<^sub>I\n  fst FAIL\\<^sub>I \\<notin> nodes M\\<^sub>S\n  snd FAIL\\<^sub>I \\<notin> nodes M\\<^sub>I\n\ngoal (1 subgoal):\n 1. productF M\\<^sub>S M\\<^sub>I FAIL\\<^sub>I PM\\<^sub>I", "unfolding productF.simps"], ["proof (prove)\nusing this:\n  inputs M\\<^sub>S = inputs M\\<^sub>I\n  fst FAIL\\<^sub>I \\<notin> nodes M\\<^sub>S\n  snd FAIL\\<^sub>I \\<notin> nodes M\\<^sub>I\n\ngoal (1 subgoal):\n 1. inputs M\\<^sub>S = inputs M\\<^sub>I \\<and>\n    fst FAIL\\<^sub>I \\<notin> nodes M\\<^sub>S \\<and>\n    snd FAIL\\<^sub>I \\<notin> nodes M\\<^sub>I \\<and> PM\\<^sub>I = PM\\<^sub>I", "by blast"], ["proof (state)\nthis:\n  productF M\\<^sub>S M\\<^sub>I FAIL\\<^sub>I PM\\<^sub>I\n\ngoal:\nNo subgoals!", "qed"], ["", "abbreviation \"V\\<^sub>I :: nat list set \\<equiv> {[],[0]}\""], ["", "lemma example_det_state_cover : \"is_det_state_cover M\\<^sub>S V\\<^sub>I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_det_state_cover M\\<^sub>S V\\<^sub>I", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_det_state_cover M\\<^sub>S V\\<^sub>I", "have \"d_reaches M\\<^sub>S (initial M\\<^sub>S) [] (initial M\\<^sub>S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d_reaches M\\<^sub>S (initial M\\<^sub>S) [] (initial M\\<^sub>S)", "by auto"], ["proof (state)\nthis:\n  d_reaches M\\<^sub>S (initial M\\<^sub>S) [] (initial M\\<^sub>S)\n\ngoal (1 subgoal):\n 1. is_det_state_cover M\\<^sub>S V\\<^sub>I", "then"], ["proof (chain)\npicking this:\n  d_reaches M\\<^sub>S (initial M\\<^sub>S) [] (initial M\\<^sub>S)", "have \"initial M\\<^sub>S \\<in> d_reachable M\\<^sub>S (initial M\\<^sub>S)\""], ["proof (prove)\nusing this:\n  d_reaches M\\<^sub>S (initial M\\<^sub>S) [] (initial M\\<^sub>S)\n\ngoal (1 subgoal):\n 1. initial M\\<^sub>S \\<in> d_reachable M\\<^sub>S (initial M\\<^sub>S)", "unfolding d_reachable.simps"], ["proof (prove)\nusing this:\n  d_reaches M\\<^sub>S (initial M\\<^sub>S) [] (initial M\\<^sub>S)\n\ngoal (1 subgoal):\n 1. initial M\\<^sub>S\n    \\<in> {q. \\<exists>xs. d_reaches M\\<^sub>S (initial M\\<^sub>S) xs q}", "by blast"], ["proof (state)\nthis:\n  initial M\\<^sub>S \\<in> d_reachable M\\<^sub>S (initial M\\<^sub>S)\n\ngoal (1 subgoal):\n 1. is_det_state_cover M\\<^sub>S V\\<^sub>I", "have \"d_reached_by M\\<^sub>S (initial M\\<^sub>S) [0] 1 [1] [0]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d_reached_by M\\<^sub>S (initial M\\<^sub>S) [0] 1 [1] [0]", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. length [0] = length [0] \\<and>\n    length [0] = length [1] \\<and>\n    path M\\<^sub>S (([0] || [0]) || [1]) (initial M\\<^sub>S) \\<and>\n    target (([0] || [0]) || [1]) (initial M\\<^sub>S) = 1\n 2. \\<forall>ys2 tr2.\n       length [0] = length ys2 \\<and>\n       length [0] = length tr2 \\<and>\n       path M\\<^sub>S (([0] || ys2) || tr2)\n        (initial M\\<^sub>S) \\<longrightarrow>\n       target (([0] || ys2) || tr2) (initial M\\<^sub>S) = 1", "show \"length [0] = length [0] \\<and>\n    length [0] = length [1] \\<and> path M\\<^sub>S (([0] || [0]) || [1]) (initial M\\<^sub>S)\n                            \\<and> target (([0] || [0]) || [1]) (initial M\\<^sub>S) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length [0::'a] = length [0::'b] \\<and>\n    length [0::'c] = length [1::'d] \\<and>\n    path M\\<^sub>S (([0] || [0]) || [1]) (initial M\\<^sub>S) \\<and>\n    target (([0::'e] || [0::'f]) || [1]) (initial M\\<^sub>S) = 1", "by auto"], ["proof (state)\nthis:\n  length [0::?'a1] = length [0::?'b1] \\<and>\n  length [0::?'c1] = length [1::?'d1] \\<and>\n  path M\\<^sub>S (([0] || [0]) || [1]) (initial M\\<^sub>S) \\<and>\n  target (([0::?'e1] || [0::?'f1]) || [1]) (initial M\\<^sub>S) = 1\n\ngoal (1 subgoal):\n 1. \\<forall>ys2 tr2.\n       length [0] = length ys2 \\<and>\n       length [0] = length tr2 \\<and>\n       path M\\<^sub>S (([0] || ys2) || tr2)\n        (initial M\\<^sub>S) \\<longrightarrow>\n       target (([0] || ys2) || tr2) (initial M\\<^sub>S) = 1", "have \"\\<And>ys2 tr2.\n       length [0] = length ys2\n          \\<and> length [0] = length tr2\n          \\<and> path M\\<^sub>S (([0] || ys2) || tr2) (initial M\\<^sub>S)\n            \\<longrightarrow> target (([0] || ys2) || tr2) (initial M\\<^sub>S) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys2 tr2.\n       length [0::'a] = length ys2 \\<and>\n       length [0::'b] = length tr2 \\<and>\n       path M\\<^sub>S (([0] || ys2) || tr2)\n        (initial M\\<^sub>S) \\<longrightarrow>\n       target (([0::'c] || ys2) || tr2) (initial M\\<^sub>S) = 1", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ys2 tr2.\n       length [0::'a] = length ys2 \\<and>\n       length [0::'b] = length tr2 \\<and>\n       path M\\<^sub>S (([0] || ys2) || tr2)\n        (initial M\\<^sub>S) \\<Longrightarrow>\n       target (([0::'c] || ys2) || tr2) (initial M\\<^sub>S) = 1", "fix ys2 tr2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ys2 tr2.\n       length [0::'a] = length ys2 \\<and>\n       length [0::'b] = length tr2 \\<and>\n       path M\\<^sub>S (([0] || ys2) || tr2)\n        (initial M\\<^sub>S) \\<Longrightarrow>\n       target (([0::'c] || ys2) || tr2) (initial M\\<^sub>S) = 1", "assume \"length [0] = length ys2 \\<and> length [0] = length tr2\n                            \\<and> path M\\<^sub>S (([0] || ys2) || tr2) (initial M\\<^sub>S)\""], ["proof (state)\nthis:\n  length [0::'d] = length ys2 \\<and>\n  length [0::'e] = length tr2 \\<and>\n  path M\\<^sub>S (([0] || ys2) || tr2) (initial M\\<^sub>S)\n\ngoal (1 subgoal):\n 1. \\<And>ys2 tr2.\n       length [0::'a] = length ys2 \\<and>\n       length [0::'b] = length tr2 \\<and>\n       path M\\<^sub>S (([0] || ys2) || tr2)\n        (initial M\\<^sub>S) \\<Longrightarrow>\n       target (([0::'c] || ys2) || tr2) (initial M\\<^sub>S) = 1", "then"], ["proof (chain)\npicking this:\n  length [0::'d] = length ys2 \\<and>\n  length [0::'e] = length tr2 \\<and>\n  path M\\<^sub>S (([0] || ys2) || tr2) (initial M\\<^sub>S)", "have \"length ys2 = 1\" \"length tr2 = 1\" \"path M\\<^sub>S (([0] || ys2) || tr2) (initial M\\<^sub>S)\""], ["proof (prove)\nusing this:\n  length [0::'d] = length ys2 \\<and>\n  length [0::'e] = length tr2 \\<and>\n  path M\\<^sub>S (([0] || ys2) || tr2) (initial M\\<^sub>S)\n\ngoal (1 subgoal):\n 1. length ys2 = 1 &&&\n    length tr2 = 1 &&&\n    path M\\<^sub>S (([0] || ys2) || tr2) (initial M\\<^sub>S)", "by auto"], ["proof (state)\nthis:\n  length ys2 = 1\n  length tr2 = 1\n  path M\\<^sub>S (([0] || ys2) || tr2) (initial M\\<^sub>S)\n\ngoal (1 subgoal):\n 1. \\<And>ys2 tr2.\n       length [0::'a] = length ys2 \\<and>\n       length [0::'b] = length tr2 \\<and>\n       path M\\<^sub>S (([0] || ys2) || tr2)\n        (initial M\\<^sub>S) \\<Longrightarrow>\n       target (([0::'c] || ys2) || tr2) (initial M\\<^sub>S) = 1", "moreover"], ["proof (state)\nthis:\n  length ys2 = 1\n  length tr2 = 1\n  path M\\<^sub>S (([0] || ys2) || tr2) (initial M\\<^sub>S)\n\ngoal (1 subgoal):\n 1. \\<And>ys2 tr2.\n       length [0::'a] = length ys2 \\<and>\n       length [0::'b] = length tr2 \\<and>\n       path M\\<^sub>S (([0] || ys2) || tr2)\n        (initial M\\<^sub>S) \\<Longrightarrow>\n       target (([0::'c] || ys2) || tr2) (initial M\\<^sub>S) = 1", "obtain y2 where \"ys2 = [y2]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y2. ys2 = [y2] \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using \\<open>length ys2 = 1\\<close>"], ["proof (prove)\nusing this:\n  length ys2 = 1\n\ngoal (1 subgoal):\n 1. (\\<And>y2. ys2 = [y2] \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (metis One_nat_def \\<open>length [0] = length ys2 \\<and> length [0] = length tr2\n            \\<and> path M\\<^sub>S (([0] || ys2) || tr2) (initial M\\<^sub>S)\\<close> append.simps(1) append_butlast_last_id\n            butlast_snoc length_butlast length_greater_0_conv list.size(3) nat.simps(3))"], ["proof (state)\nthis:\n  ys2 = [y2]\n\ngoal (1 subgoal):\n 1. \\<And>ys2 tr2.\n       length [0::'a] = length ys2 \\<and>\n       length [0::'b] = length tr2 \\<and>\n       path M\\<^sub>S (([0] || ys2) || tr2)\n        (initial M\\<^sub>S) \\<Longrightarrow>\n       target (([0::'c] || ys2) || tr2) (initial M\\<^sub>S) = 1", "moreover"], ["proof (state)\nthis:\n  ys2 = [y2]\n\ngoal (1 subgoal):\n 1. \\<And>ys2 tr2.\n       length [0::'a] = length ys2 \\<and>\n       length [0::'b] = length tr2 \\<and>\n       path M\\<^sub>S (([0] || ys2) || tr2)\n        (initial M\\<^sub>S) \\<Longrightarrow>\n       target (([0::'c] || ys2) || tr2) (initial M\\<^sub>S) = 1", "obtain t2 where \"tr2 = [t2]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t2. tr2 = [t2] \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using \\<open>length tr2 = 1\\<close>"], ["proof (prove)\nusing this:\n  length tr2 = 1\n\ngoal (1 subgoal):\n 1. (\\<And>t2. tr2 = [t2] \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (metis One_nat_def \\<open>length [0] = length ys2 \\<and> length [0] = length tr2\n            \\<and> path M\\<^sub>S (([0] || ys2) || tr2) (initial M\\<^sub>S)\\<close> append.simps(1) append_butlast_last_id\n            butlast_snoc length_butlast length_greater_0_conv list.size(3) nat.simps(3))"], ["proof (state)\nthis:\n  tr2 = [t2]\n\ngoal (1 subgoal):\n 1. \\<And>ys2 tr2.\n       length [0::'a] = length ys2 \\<and>\n       length [0::'b] = length tr2 \\<and>\n       path M\\<^sub>S (([0] || ys2) || tr2)\n        (initial M\\<^sub>S) \\<Longrightarrow>\n       target (([0::'c] || ys2) || tr2) (initial M\\<^sub>S) = 1", "ultimately"], ["proof (chain)\npicking this:\n  length ys2 = 1\n  length tr2 = 1\n  path M\\<^sub>S (([0] || ys2) || tr2) (initial M\\<^sub>S)\n  ys2 = [y2]\n  tr2 = [t2]", "have \"path M\\<^sub>S [((0,y2),t2)] (initial M\\<^sub>S)\""], ["proof (prove)\nusing this:\n  length ys2 = 1\n  length tr2 = 1\n  path M\\<^sub>S (([0] || ys2) || tr2) (initial M\\<^sub>S)\n  ys2 = [y2]\n  tr2 = [t2]\n\ngoal (1 subgoal):\n 1. path M\\<^sub>S [((0, y2), t2)] (initial M\\<^sub>S)", "by auto"], ["proof (state)\nthis:\n  path M\\<^sub>S [((0, y2), t2)] (initial M\\<^sub>S)\n\ngoal (1 subgoal):\n 1. \\<And>ys2 tr2.\n       length [0::'a] = length ys2 \\<and>\n       length [0::'b] = length tr2 \\<and>\n       path M\\<^sub>S (([0] || ys2) || tr2)\n        (initial M\\<^sub>S) \\<Longrightarrow>\n       target (([0::'c] || ys2) || tr2) (initial M\\<^sub>S) = 1", "then"], ["proof (chain)\npicking this:\n  path M\\<^sub>S [((0, y2), t2)] (initial M\\<^sub>S)", "have \"t2 \\<in> succ M\\<^sub>S (0,y2) (initial M\\<^sub>S)\""], ["proof (prove)\nusing this:\n  path M\\<^sub>S [((0, y2), t2)] (initial M\\<^sub>S)\n\ngoal (1 subgoal):\n 1. t2 \\<in> succ M\\<^sub>S (0, y2) (initial M\\<^sub>S)", "by auto"], ["proof (state)\nthis:\n  t2 \\<in> succ M\\<^sub>S (0, y2) (initial M\\<^sub>S)\n\ngoal (1 subgoal):\n 1. \\<And>ys2 tr2.\n       length [0::'a] = length ys2 \\<and>\n       length [0::'b] = length tr2 \\<and>\n       path M\\<^sub>S (([0] || ys2) || tr2)\n        (initial M\\<^sub>S) \\<Longrightarrow>\n       target (([0::'c] || ys2) || tr2) (initial M\\<^sub>S) = 1", "moreover"], ["proof (state)\nthis:\n  t2 \\<in> succ M\\<^sub>S (0, y2) (initial M\\<^sub>S)\n\ngoal (1 subgoal):\n 1. \\<And>ys2 tr2.\n       length [0::'a] = length ys2 \\<and>\n       length [0::'b] = length tr2 \\<and>\n       path M\\<^sub>S (([0] || ys2) || tr2)\n        (initial M\\<^sub>S) \\<Longrightarrow>\n       target (([0::'c] || ys2) || tr2) (initial M\\<^sub>S) = 1", "have \"\\<And> y . succ M\\<^sub>S (0,y) (initial M\\<^sub>S) \\<subseteq> {1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y. succ M\\<^sub>S (0, y) (initial M\\<^sub>S) \\<subseteq> {1}", "by auto"], ["proof (state)\nthis:\n  succ M\\<^sub>S (0, ?y2) (initial M\\<^sub>S) \\<subseteq> {1}\n\ngoal (1 subgoal):\n 1. \\<And>ys2 tr2.\n       length [0::'a] = length ys2 \\<and>\n       length [0::'b] = length tr2 \\<and>\n       path M\\<^sub>S (([0] || ys2) || tr2)\n        (initial M\\<^sub>S) \\<Longrightarrow>\n       target (([0::'c] || ys2) || tr2) (initial M\\<^sub>S) = 1", "ultimately"], ["proof (chain)\npicking this:\n  t2 \\<in> succ M\\<^sub>S (0, y2) (initial M\\<^sub>S)\n  succ M\\<^sub>S (0, ?y2) (initial M\\<^sub>S) \\<subseteq> {1}", "have \"t2 = 1\""], ["proof (prove)\nusing this:\n  t2 \\<in> succ M\\<^sub>S (0, y2) (initial M\\<^sub>S)\n  succ M\\<^sub>S (0, ?y2) (initial M\\<^sub>S) \\<subseteq> {1}\n\ngoal (1 subgoal):\n 1. t2 = 1", "by blast"], ["proof (state)\nthis:\n  t2 = 1\n\ngoal (1 subgoal):\n 1. \\<And>ys2 tr2.\n       length [0::'a] = length ys2 \\<and>\n       length [0::'b] = length tr2 \\<and>\n       path M\\<^sub>S (([0] || ys2) || tr2)\n        (initial M\\<^sub>S) \\<Longrightarrow>\n       target (([0::'c] || ys2) || tr2) (initial M\\<^sub>S) = 1", "show \"target (([0] || ys2) || tr2) (initial M\\<^sub>S) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. target (([0::'f] || ys2) || tr2) (initial M\\<^sub>S) = 1", "using \\<open>ys2 = [y2]\\<close> \\<open>tr2 = [t2]\\<close> \\<open>t2 = 1\\<close>"], ["proof (prove)\nusing this:\n  ys2 = [y2]\n  tr2 = [t2]\n  t2 = 1\n\ngoal (1 subgoal):\n 1. target (([0::'f] || ys2) || tr2) (initial M\\<^sub>S) = 1", "by auto"], ["proof (state)\nthis:\n  target (([0::?'f3] || ys2) || tr2) (initial M\\<^sub>S) = 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length [0::?'a2] = length ?ys2.1 \\<and>\n  length [0::?'b2] = length ?tr2.1 \\<and>\n  path M\\<^sub>S (([0] || ?ys2.1) || ?tr2.1)\n   (initial M\\<^sub>S) \\<longrightarrow>\n  target (([0::?'c2] || ?ys2.1) || ?tr2.1) (initial M\\<^sub>S) = 1\n\ngoal (1 subgoal):\n 1. \\<forall>ys2 tr2.\n       length [0] = length ys2 \\<and>\n       length [0] = length tr2 \\<and>\n       path M\\<^sub>S (([0] || ys2) || tr2)\n        (initial M\\<^sub>S) \\<longrightarrow>\n       target (([0] || ys2) || tr2) (initial M\\<^sub>S) = 1", "then"], ["proof (chain)\npicking this:\n  length [0::?'a2] = length ?ys2.1 \\<and>\n  length [0::?'b2] = length ?tr2.1 \\<and>\n  path M\\<^sub>S (([0] || ?ys2.1) || ?tr2.1)\n   (initial M\\<^sub>S) \\<longrightarrow>\n  target (([0::?'c2] || ?ys2.1) || ?tr2.1) (initial M\\<^sub>S) = 1", "show \"\\<forall>ys2 tr2.\n       length [0] = length ys2 \\<and> length [0] = length tr2\n          \\<and> path M\\<^sub>S (([0] || ys2) || tr2) (initial M\\<^sub>S)\n            \\<longrightarrow> target (([0] || ys2) || tr2) (initial M\\<^sub>S) = 1\""], ["proof (prove)\nusing this:\n  length [0::?'a2] = length ?ys2.1 \\<and>\n  length [0::?'b2] = length ?tr2.1 \\<and>\n  path M\\<^sub>S (([0] || ?ys2.1) || ?tr2.1)\n   (initial M\\<^sub>S) \\<longrightarrow>\n  target (([0::?'c2] || ?ys2.1) || ?tr2.1) (initial M\\<^sub>S) = 1\n\ngoal (1 subgoal):\n 1. \\<forall>ys2 tr2.\n       length [0::'a] = length ys2 \\<and>\n       length [0::'b] = length tr2 \\<and>\n       path M\\<^sub>S (([0] || ys2) || tr2)\n        (initial M\\<^sub>S) \\<longrightarrow>\n       target (([0::'c] || ys2) || tr2) (initial M\\<^sub>S) = 1", "by auto"], ["proof (state)\nthis:\n  \\<forall>ys2 tr2.\n     length [0::?'a3] = length ys2 \\<and>\n     length [0::?'b3] = length tr2 \\<and>\n     path M\\<^sub>S (([0] || ys2) || tr2)\n      (initial M\\<^sub>S) \\<longrightarrow>\n     target (([0::?'c3] || ys2) || tr2) (initial M\\<^sub>S) = 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  d_reached_by M\\<^sub>S (initial M\\<^sub>S) [0] 1 [1] [0]\n\ngoal (1 subgoal):\n 1. is_det_state_cover M\\<^sub>S V\\<^sub>I", "then"], ["proof (chain)\npicking this:\n  d_reached_by M\\<^sub>S (initial M\\<^sub>S) [0] 1 [1] [0]", "have \"d_reaches M\\<^sub>S (initial M\\<^sub>S) [0] 1\""], ["proof (prove)\nusing this:\n  d_reached_by M\\<^sub>S (initial M\\<^sub>S) [0] 1 [1] [0]\n\ngoal (1 subgoal):\n 1. d_reaches M\\<^sub>S (initial M\\<^sub>S) [0] 1", "unfolding d_reaches.simps"], ["proof (prove)\nusing this:\n  d_reached_by M\\<^sub>S (initial M\\<^sub>S) [0] 1 [1] [0]\n\ngoal (1 subgoal):\n 1. \\<exists>tr ys. d_reached_by M\\<^sub>S (initial M\\<^sub>S) [0] 1 tr ys", "by blast"], ["proof (state)\nthis:\n  d_reaches M\\<^sub>S (initial M\\<^sub>S) [0] 1\n\ngoal (1 subgoal):\n 1. is_det_state_cover M\\<^sub>S V\\<^sub>I", "then"], ["proof (chain)\npicking this:\n  d_reaches M\\<^sub>S (initial M\\<^sub>S) [0] 1", "have \"1 \\<in> d_reachable M\\<^sub>S (initial M\\<^sub>S)\""], ["proof (prove)\nusing this:\n  d_reaches M\\<^sub>S (initial M\\<^sub>S) [0] 1\n\ngoal (1 subgoal):\n 1. 1 \\<in> d_reachable M\\<^sub>S (initial M\\<^sub>S)", "unfolding d_reachable.simps"], ["proof (prove)\nusing this:\n  d_reaches M\\<^sub>S (initial M\\<^sub>S) [0] 1\n\ngoal (1 subgoal):\n 1. 1 \\<in> {q. \\<exists>xs. d_reaches M\\<^sub>S (initial M\\<^sub>S) xs q}", "by blast"], ["proof (state)\nthis:\n  1 \\<in> d_reachable M\\<^sub>S (initial M\\<^sub>S)\n\ngoal (1 subgoal):\n 1. is_det_state_cover M\\<^sub>S V\\<^sub>I", "then"], ["proof (chain)\npicking this:\n  1 \\<in> d_reachable M\\<^sub>S (initial M\\<^sub>S)", "have \"{0,1} \\<subseteq> d_reachable M\\<^sub>S (initial M\\<^sub>S)\""], ["proof (prove)\nusing this:\n  1 \\<in> d_reachable M\\<^sub>S (initial M\\<^sub>S)\n\ngoal (1 subgoal):\n 1. {0, 1} \\<subseteq> d_reachable M\\<^sub>S (initial M\\<^sub>S)", "using \\<open>initial M\\<^sub>S \\<in> d_reachable M\\<^sub>S (initial M\\<^sub>S)\\<close>"], ["proof (prove)\nusing this:\n  1 \\<in> d_reachable M\\<^sub>S (initial M\\<^sub>S)\n  initial M\\<^sub>S \\<in> d_reachable M\\<^sub>S (initial M\\<^sub>S)\n\ngoal (1 subgoal):\n 1. {0, 1} \\<subseteq> d_reachable M\\<^sub>S (initial M\\<^sub>S)", "by auto"], ["proof (state)\nthis:\n  {0, 1} \\<subseteq> d_reachable M\\<^sub>S (initial M\\<^sub>S)\n\ngoal (1 subgoal):\n 1. is_det_state_cover M\\<^sub>S V\\<^sub>I", "moreover"], ["proof (state)\nthis:\n  {0, 1} \\<subseteq> d_reachable M\\<^sub>S (initial M\\<^sub>S)\n\ngoal (1 subgoal):\n 1. is_det_state_cover M\\<^sub>S V\\<^sub>I", "have \"d_reachable M\\<^sub>S (initial M\\<^sub>S) \\<subseteq> nodes M\\<^sub>S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d_reachable M\\<^sub>S (initial M\\<^sub>S) \\<subseteq> nodes M\\<^sub>S", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> d_reachable M\\<^sub>S (initial M\\<^sub>S) \\<Longrightarrow>\n       x \\<in> nodes M\\<^sub>S", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> d_reachable M\\<^sub>S (initial M\\<^sub>S) \\<Longrightarrow>\n       x \\<in> nodes M\\<^sub>S", "assume \"s\\<in>d_reachable M\\<^sub>S (initial M\\<^sub>S)\""], ["proof (state)\nthis:\n  s \\<in> d_reachable M\\<^sub>S (initial M\\<^sub>S)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> d_reachable M\\<^sub>S (initial M\\<^sub>S) \\<Longrightarrow>\n       x \\<in> nodes M\\<^sub>S", "then"], ["proof (chain)\npicking this:\n  s \\<in> d_reachable M\\<^sub>S (initial M\\<^sub>S)", "have \"s \\<in> reachable M\\<^sub>S (initial M\\<^sub>S)\""], ["proof (prove)\nusing this:\n  s \\<in> d_reachable M\\<^sub>S (initial M\\<^sub>S)\n\ngoal (1 subgoal):\n 1. s \\<in> reachable M\\<^sub>S (initial M\\<^sub>S)", "using d_reachable_reachable"], ["proof (prove)\nusing this:\n  s \\<in> d_reachable M\\<^sub>S (initial M\\<^sub>S)\n  d_reachable ?M ?p \\<subseteq> reachable ?M ?p\n\ngoal (1 subgoal):\n 1. s \\<in> reachable M\\<^sub>S (initial M\\<^sub>S)", "by auto"], ["proof (state)\nthis:\n  s \\<in> reachable M\\<^sub>S (initial M\\<^sub>S)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> d_reachable M\\<^sub>S (initial M\\<^sub>S) \\<Longrightarrow>\n       x \\<in> nodes M\\<^sub>S", "then"], ["proof (chain)\npicking this:\n  s \\<in> reachable M\\<^sub>S (initial M\\<^sub>S)", "show \"s \\<in> nodes M\\<^sub>S\""], ["proof (prove)\nusing this:\n  s \\<in> reachable M\\<^sub>S (initial M\\<^sub>S)\n\ngoal (1 subgoal):\n 1. s \\<in> nodes M\\<^sub>S", "by blast"], ["proof (state)\nthis:\n  s \\<in> nodes M\\<^sub>S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  d_reachable M\\<^sub>S (initial M\\<^sub>S) \\<subseteq> nodes M\\<^sub>S\n\ngoal (1 subgoal):\n 1. is_det_state_cover M\\<^sub>S V\\<^sub>I", "ultimately"], ["proof (chain)\npicking this:\n  {0, 1} \\<subseteq> d_reachable M\\<^sub>S (initial M\\<^sub>S)\n  d_reachable M\\<^sub>S (initial M\\<^sub>S) \\<subseteq> nodes M\\<^sub>S", "have \"d_reachable M\\<^sub>S (initial M\\<^sub>S) = {0,1}\""], ["proof (prove)\nusing this:\n  {0, 1} \\<subseteq> d_reachable M\\<^sub>S (initial M\\<^sub>S)\n  d_reachable M\\<^sub>S (initial M\\<^sub>S) \\<subseteq> nodes M\\<^sub>S\n\ngoal (1 subgoal):\n 1. d_reachable M\\<^sub>S (initial M\\<^sub>S) = {0, 1}", "using example_nodes(1)"], ["proof (prove)\nusing this:\n  {0, 1} \\<subseteq> d_reachable M\\<^sub>S (initial M\\<^sub>S)\n  d_reachable M\\<^sub>S (initial M\\<^sub>S) \\<subseteq> nodes M\\<^sub>S\n  nodes M\\<^sub>S = {0, 1}\n\ngoal (1 subgoal):\n 1. d_reachable M\\<^sub>S (initial M\\<^sub>S) = {0, 1}", "by blast"], ["proof (state)\nthis:\n  d_reachable M\\<^sub>S (initial M\\<^sub>S) = {0, 1}\n\ngoal (1 subgoal):\n 1. is_det_state_cover M\\<^sub>S V\\<^sub>I", "fix f' :: \"nat \\<Rightarrow> nat list\""], ["proof (state)\ngoal (1 subgoal):\n 1. is_det_state_cover M\\<^sub>S V\\<^sub>I", "let ?f = \"f'( 0 := [], 1 := [0])\""], ["proof (state)\ngoal (1 subgoal):\n 1. is_det_state_cover M\\<^sub>S V\\<^sub>I", "have \"is_det_state_cover_ass M\\<^sub>S ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_det_state_cover_ass M\\<^sub>S (f'(0 := [], 1 := [0]))", "unfolding is_det_state_cover_ass.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f'(0 := [], 1 := [0])) (initial M\\<^sub>S) = [] \\<and>\n    (\\<forall>s\\<in>d_reachable M\\<^sub>S (initial M\\<^sub>S).\n        d_reaches M\\<^sub>S (initial M\\<^sub>S) ((f'(0 := [], 1 := [0])) s)\n         s)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (f'(0 := [], 1 := [0])) (initial M\\<^sub>S) = []\n 2. \\<forall>s\\<in>d_reachable M\\<^sub>S (initial M\\<^sub>S).\n       d_reaches M\\<^sub>S (initial M\\<^sub>S) ((f'(0 := [], 1 := [0])) s) s", "show \"?f (initial M\\<^sub>S) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f'(0 := [], 1 := [0])) (initial M\\<^sub>S) = []", "by auto"], ["proof (state)\nthis:\n  (f'(0 := [], 1 := [0])) (initial M\\<^sub>S) = []\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>d_reachable M\\<^sub>S (initial M\\<^sub>S).\n       d_reaches M\\<^sub>S (initial M\\<^sub>S) ((f'(0 := [], 1 := [0])) s) s", "show \"\\<forall>s\\<in>d_reachable M\\<^sub>S (initial M\\<^sub>S). d_reaches M\\<^sub>S (initial M\\<^sub>S) (?f s) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>d_reachable M\\<^sub>S (initial M\\<^sub>S).\n       d_reaches M\\<^sub>S (initial M\\<^sub>S) ((f'(0 := [], 1 := [0])) s) s", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> d_reachable M\\<^sub>S (initial M\\<^sub>S) \\<Longrightarrow>\n       d_reaches M\\<^sub>S (initial M\\<^sub>S) ((f'(0 := [], 1 := [0])) s) s", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> d_reachable M\\<^sub>S (initial M\\<^sub>S) \\<Longrightarrow>\n       d_reaches M\\<^sub>S (initial M\\<^sub>S) ((f'(0 := [], 1 := [0])) s) s", "assume \"s\\<in>d_reachable M\\<^sub>S (initial M\\<^sub>S)\""], ["proof (state)\nthis:\n  s \\<in> d_reachable M\\<^sub>S (initial M\\<^sub>S)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> d_reachable M\\<^sub>S (initial M\\<^sub>S) \\<Longrightarrow>\n       d_reaches M\\<^sub>S (initial M\\<^sub>S) ((f'(0 := [], 1 := [0])) s) s", "then"], ["proof (chain)\npicking this:\n  s \\<in> d_reachable M\\<^sub>S (initial M\\<^sub>S)", "have \"s \\<in> reachable M\\<^sub>S (initial M\\<^sub>S)\""], ["proof (prove)\nusing this:\n  s \\<in> d_reachable M\\<^sub>S (initial M\\<^sub>S)\n\ngoal (1 subgoal):\n 1. s \\<in> reachable M\\<^sub>S (initial M\\<^sub>S)", "using d_reachable_reachable"], ["proof (prove)\nusing this:\n  s \\<in> d_reachable M\\<^sub>S (initial M\\<^sub>S)\n  d_reachable ?M ?p \\<subseteq> reachable ?M ?p\n\ngoal (1 subgoal):\n 1. s \\<in> reachable M\\<^sub>S (initial M\\<^sub>S)", "by auto"], ["proof (state)\nthis:\n  s \\<in> reachable M\\<^sub>S (initial M\\<^sub>S)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> d_reachable M\\<^sub>S (initial M\\<^sub>S) \\<Longrightarrow>\n       d_reaches M\\<^sub>S (initial M\\<^sub>S) ((f'(0 := [], 1 := [0])) s) s", "then"], ["proof (chain)\npicking this:\n  s \\<in> reachable M\\<^sub>S (initial M\\<^sub>S)", "have \"s \\<in> nodes M\\<^sub>S\""], ["proof (prove)\nusing this:\n  s \\<in> reachable M\\<^sub>S (initial M\\<^sub>S)\n\ngoal (1 subgoal):\n 1. s \\<in> nodes M\\<^sub>S", "by blast"], ["proof (state)\nthis:\n  s \\<in> nodes M\\<^sub>S\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> d_reachable M\\<^sub>S (initial M\\<^sub>S) \\<Longrightarrow>\n       d_reaches M\\<^sub>S (initial M\\<^sub>S) ((f'(0 := [], 1 := [0])) s) s", "then"], ["proof (chain)\npicking this:\n  s \\<in> nodes M\\<^sub>S", "have \"s = 0 \\<or> s = 1\""], ["proof (prove)\nusing this:\n  s \\<in> nodes M\\<^sub>S\n\ngoal (1 subgoal):\n 1. s = 0 \\<or> s = 1", "using example_nodes(1)"], ["proof (prove)\nusing this:\n  s \\<in> nodes M\\<^sub>S\n  nodes M\\<^sub>S = {0, 1}\n\ngoal (1 subgoal):\n 1. s = 0 \\<or> s = 1", "by blast"], ["proof (state)\nthis:\n  s = 0 \\<or> s = 1\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> d_reachable M\\<^sub>S (initial M\\<^sub>S) \\<Longrightarrow>\n       d_reaches M\\<^sub>S (initial M\\<^sub>S) ((f'(0 := [], 1 := [0])) s) s", "then"], ["proof (chain)\npicking this:\n  s = 0 \\<or> s = 1", "show \"d_reaches M\\<^sub>S (initial M\\<^sub>S) (?f s) s\""], ["proof (prove)\nusing this:\n  s = 0 \\<or> s = 1\n\ngoal (1 subgoal):\n 1. d_reaches M\\<^sub>S (initial M\\<^sub>S) ((f'(0 := [], 1 := [0])) s) s", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. s = 0 \\<Longrightarrow>\n    d_reaches M\\<^sub>S (initial M\\<^sub>S) ((f'(0 := [], 1 := [0])) s) s\n 2. s = 1 \\<Longrightarrow>\n    d_reaches M\\<^sub>S (initial M\\<^sub>S) ((f'(0 := [], 1 := [0])) s) s", "assume \"s = 0\""], ["proof (state)\nthis:\n  s = 0\n\ngoal (2 subgoals):\n 1. s = 0 \\<Longrightarrow>\n    d_reaches M\\<^sub>S (initial M\\<^sub>S) ((f'(0 := [], 1 := [0])) s) s\n 2. s = 1 \\<Longrightarrow>\n    d_reaches M\\<^sub>S (initial M\\<^sub>S) ((f'(0 := [], 1 := [0])) s) s", "then"], ["proof (chain)\npicking this:\n  s = 0", "show \"d_reaches M\\<^sub>S (initial M\\<^sub>S) (?f s) s\""], ["proof (prove)\nusing this:\n  s = 0\n\ngoal (1 subgoal):\n 1. d_reaches M\\<^sub>S (initial M\\<^sub>S) ((f'(0 := [], 1 := [0])) s) s", "using \\<open>d_reaches M\\<^sub>S (initial M\\<^sub>S) [] (initial M\\<^sub>S)\\<close>"], ["proof (prove)\nusing this:\n  s = 0\n  d_reaches M\\<^sub>S (initial M\\<^sub>S) [] (initial M\\<^sub>S)\n\ngoal (1 subgoal):\n 1. d_reaches M\\<^sub>S (initial M\\<^sub>S) ((f'(0 := [], 1 := [0])) s) s", "by auto"], ["proof (state)\nthis:\n  d_reaches M\\<^sub>S (initial M\\<^sub>S) ((f'(0 := [], 1 := [0])) s) s\n\ngoal (1 subgoal):\n 1. s = 1 \\<Longrightarrow>\n    d_reaches M\\<^sub>S (initial M\\<^sub>S) ((f'(0 := [], 1 := [0])) s) s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. s = 1 \\<Longrightarrow>\n    d_reaches M\\<^sub>S (initial M\\<^sub>S) ((f'(0 := [], 1 := [0])) s) s", "assume \"s = 1\""], ["proof (state)\nthis:\n  s = 1\n\ngoal (1 subgoal):\n 1. s = 1 \\<Longrightarrow>\n    d_reaches M\\<^sub>S (initial M\\<^sub>S) ((f'(0 := [], 1 := [0])) s) s", "then"], ["proof (chain)\npicking this:\n  s = 1", "show \"d_reaches M\\<^sub>S (initial M\\<^sub>S) (?f s) s\""], ["proof (prove)\nusing this:\n  s = 1\n\ngoal (1 subgoal):\n 1. d_reaches M\\<^sub>S (initial M\\<^sub>S) ((f'(0 := [], 1 := [0])) s) s", "using \\<open>d_reaches M\\<^sub>S (initial M\\<^sub>S) [0] 1\\<close>"], ["proof (prove)\nusing this:\n  s = 1\n  d_reaches M\\<^sub>S (initial M\\<^sub>S) [0] 1\n\ngoal (1 subgoal):\n 1. d_reaches M\\<^sub>S (initial M\\<^sub>S) ((f'(0 := [], 1 := [0])) s) s", "by auto"], ["proof (state)\nthis:\n  d_reaches M\\<^sub>S (initial M\\<^sub>S) ((f'(0 := [], 1 := [0])) s) s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  d_reaches M\\<^sub>S (initial M\\<^sub>S) ((f'(0 := [], 1 := [0])) s) s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>s\\<in>d_reachable M\\<^sub>S (initial M\\<^sub>S).\n     d_reaches M\\<^sub>S (initial M\\<^sub>S) ((f'(0 := [], 1 := [0])) s) s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_det_state_cover_ass M\\<^sub>S (f'(0 := [], 1 := [0]))\n\ngoal (1 subgoal):\n 1. is_det_state_cover M\\<^sub>S V\\<^sub>I", "moreover"], ["proof (state)\nthis:\n  is_det_state_cover_ass M\\<^sub>S (f'(0 := [], 1 := [0]))\n\ngoal (1 subgoal):\n 1. is_det_state_cover M\\<^sub>S V\\<^sub>I", "have \"V\\<^sub>I = image ?f (d_reachable M\\<^sub>S (initial M\\<^sub>S))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V\\<^sub>I =\n    f'(0 := [], 1 := [0]) ` d_reachable M\\<^sub>S (initial M\\<^sub>S)", "using \\<open>d_reachable M\\<^sub>S (initial M\\<^sub>S) = {0,1}\\<close>"], ["proof (prove)\nusing this:\n  d_reachable M\\<^sub>S (initial M\\<^sub>S) = {0, 1}\n\ngoal (1 subgoal):\n 1. V\\<^sub>I =\n    f'(0 := [], 1 := [0]) ` d_reachable M\\<^sub>S (initial M\\<^sub>S)", "by auto"], ["proof (state)\nthis:\n  V\\<^sub>I =\n  f'(0 := [], 1 := [0]) ` d_reachable M\\<^sub>S (initial M\\<^sub>S)\n\ngoal (1 subgoal):\n 1. is_det_state_cover M\\<^sub>S V\\<^sub>I", "ultimately"], ["proof (chain)\npicking this:\n  is_det_state_cover_ass M\\<^sub>S (f'(0 := [], 1 := [0]))\n  V\\<^sub>I =\n  f'(0 := [], 1 := [0]) ` d_reachable M\\<^sub>S (initial M\\<^sub>S)", "show ?thesis"], ["proof (prove)\nusing this:\n  is_det_state_cover_ass M\\<^sub>S (f'(0 := [], 1 := [0]))\n  V\\<^sub>I =\n  f'(0 := [], 1 := [0]) ` d_reachable M\\<^sub>S (initial M\\<^sub>S)\n\ngoal (1 subgoal):\n 1. is_det_state_cover M\\<^sub>S V\\<^sub>I", "unfolding is_det_state_cover.simps"], ["proof (prove)\nusing this:\n  is_det_state_cover_ass M\\<^sub>S (f'(0 := [], 1 := [0]))\n  V\\<^sub>I =\n  f'(0 := [], 1 := [0]) ` d_reachable M\\<^sub>S (initial M\\<^sub>S)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       is_det_state_cover_ass M\\<^sub>S f \\<and>\n       V\\<^sub>I = f ` d_reachable M\\<^sub>S (initial M\\<^sub>S)", "by blast"], ["proof (state)\nthis:\n  is_det_state_cover M\\<^sub>S V\\<^sub>I\n\ngoal:\nNo subgoals!", "qed"], ["", "abbreviation \"\\<Omega>\\<^sub>I::(nat,nat) ATC set \\<equiv> { Node 0 (\\<lambda> y . Leaf) }\""], ["", "lemma \"applicable_set M\\<^sub>S \\<Omega>\\<^sub>I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. applicable_set M\\<^sub>S \\<Omega>\\<^sub>I", "by auto"], ["", "lemma example_test_tools : \"test_tools M\\<^sub>S M\\<^sub>I FAIL\\<^sub>I PM\\<^sub>I V\\<^sub>I \\<Omega>\\<^sub>I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test_tools M\\<^sub>S M\\<^sub>I FAIL\\<^sub>I PM\\<^sub>I V\\<^sub>I\n     \\<Omega>\\<^sub>I", "using example_productF example_det_state_cover"], ["proof (prove)\nusing this:\n  productF M\\<^sub>S M\\<^sub>I FAIL\\<^sub>I PM\\<^sub>I\n  is_det_state_cover M\\<^sub>S V\\<^sub>I\n\ngoal (1 subgoal):\n 1. test_tools M\\<^sub>S M\\<^sub>I FAIL\\<^sub>I PM\\<^sub>I V\\<^sub>I\n     \\<Omega>\\<^sub>I", "by auto"], ["", "lemma OFSM_not_vacuous :\n  \"\\<exists> M :: (nat,nat,nat) FSM . OFSM M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>M. OFSM M", "using example_OFSM(1)"], ["proof (prove)\nusing this:\n  OFSM M\\<^sub>S\n\ngoal (1 subgoal):\n 1. \\<exists>M. OFSM M", "by blast"], ["", "lemma fault_domain_not_vacuous :\n  \"\\<exists> (M2::(nat,nat,nat) FSM) (M1::(nat,nat,nat) FSM) m . asc_fault_domain M2 M1 m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>M2 M1 m. asc_fault_domain M2 M1 m", "using example_fault_domain"], ["proof (prove)\nusing this:\n  asc_fault_domain M\\<^sub>S M\\<^sub>I 2\n\ngoal (1 subgoal):\n 1. \\<exists>M2 M1 m. asc_fault_domain M2 M1 m", "by blast"], ["", "lemma test_tools_not_vacuous :\n  \"\\<exists> (M2::(nat,nat,nat) FSM)\n     (M1::(nat,nat,nat) FSM)\n     (FAIL::(nat\\<times>nat))\n     (PM::(nat,nat,nat\\<times>nat) FSM)\n     (V::(nat list set))\n     (\\<Omega>::(nat,nat) ATC set) . test_tools M2 M1 FAIL PM V \\<Omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>M2 M1 FAIL PM V \\<Omega>. test_tools M2 M1 FAIL PM V \\<Omega>", "proof (rule exI, rule exI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>FAIL PM V \\<Omega>. test_tools ?M2.0 ?M1.2 FAIL PM V \\<Omega>", "show \"\\<exists> FAIL PM V \\<Omega>. test_tools M\\<^sub>S M\\<^sub>I FAIL PM V \\<Omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>FAIL PM V \\<Omega>.\n       test_tools M\\<^sub>S M\\<^sub>I FAIL PM V \\<Omega>", "using example_test_tools"], ["proof (prove)\nusing this:\n  test_tools M\\<^sub>S M\\<^sub>I FAIL\\<^sub>I PM\\<^sub>I V\\<^sub>I\n   \\<Omega>\\<^sub>I\n\ngoal (1 subgoal):\n 1. \\<exists>FAIL PM V \\<Omega>.\n       test_tools M\\<^sub>S M\\<^sub>I FAIL PM V \\<Omega>", "by blast"], ["proof (state)\nthis:\n  \\<exists>FAIL PM V \\<Omega>.\n     test_tools M\\<^sub>S M\\<^sub>I FAIL PM V \\<Omega>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma precondition_not_vacuous :\n  shows \"\\<exists> (M2::(nat,nat,nat) FSM)\n           (M1::(nat,nat,nat) FSM)\n           (FAIL::(nat\\<times>nat))\n           (PM::(nat,nat,nat\\<times>nat) FSM)\n           (V::(nat list set))\n           (\\<Omega>::(nat,nat) ATC set)\n           (m :: nat) .\n              OFSM M1 \\<and> OFSM M2 \\<and> asc_fault_domain M2 M1 m \\<and> test_tools M2 M1 FAIL PM V \\<Omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>M2 M1 FAIL PM V \\<Omega> m.\n       OFSM M1 \\<and>\n       OFSM M2 \\<and>\n       asc_fault_domain M2 M1 m \\<and> test_tools M2 M1 FAIL PM V \\<Omega>", "proof (intro exI)"], ["proof (state)\ngoal (1 subgoal):\n 1. OFSM ?M1.1 \\<and>\n    OFSM ?M2.0 \\<and>\n    asc_fault_domain ?M2.0 ?M1.1 ?m6 \\<and>\n    test_tools ?M2.0 ?M1.1 ?FAIL2 ?PM3 ?V4 ?\\<Omega>5", "show \"OFSM M\\<^sub>I \\<and> OFSM M\\<^sub>S \\<and> asc_fault_domain M\\<^sub>S M\\<^sub>I 2 \\<and> test_tools M\\<^sub>S M\\<^sub>I FAIL\\<^sub>I PM\\<^sub>I V\\<^sub>I \\<Omega>\\<^sub>I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OFSM M\\<^sub>I \\<and>\n    OFSM M\\<^sub>S \\<and>\n    asc_fault_domain M\\<^sub>S M\\<^sub>I 2 \\<and>\n    test_tools M\\<^sub>S M\\<^sub>I FAIL\\<^sub>I PM\\<^sub>I V\\<^sub>I\n     \\<Omega>\\<^sub>I", "using example_OFSM(2,1) example_fault_domain example_test_tools"], ["proof (prove)\nusing this:\n  OFSM M\\<^sub>I\n  OFSM M\\<^sub>S\n  asc_fault_domain M\\<^sub>S M\\<^sub>I 2\n  test_tools M\\<^sub>S M\\<^sub>I FAIL\\<^sub>I PM\\<^sub>I V\\<^sub>I\n   \\<Omega>\\<^sub>I\n\ngoal (1 subgoal):\n 1. OFSM M\\<^sub>I \\<and>\n    OFSM M\\<^sub>S \\<and>\n    asc_fault_domain M\\<^sub>S M\\<^sub>I 2 \\<and>\n    test_tools M\\<^sub>S M\\<^sub>I FAIL\\<^sub>I PM\\<^sub>I V\\<^sub>I\n     \\<Omega>\\<^sub>I", "by linarith"], ["proof (state)\nthis:\n  OFSM M\\<^sub>I \\<and>\n  OFSM M\\<^sub>S \\<and>\n  asc_fault_domain M\\<^sub>S M\\<^sub>I 2 \\<and>\n  test_tools M\\<^sub>S M\\<^sub>I FAIL\\<^sub>I PM\\<^sub>I V\\<^sub>I\n   \\<Omega>\\<^sub>I\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}