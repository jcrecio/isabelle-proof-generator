{"file_name": "/home/qj213/afp-2021-10-22/thys/Projective_Measurements/Linear_Algebra_Complements.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Projective_Measurements", "problem_names": ["lemma mult_real_cpx:\n  fixes a::complex\n  fixes b::complex\n  assumes \"a\\<in> Reals\"\n  shows \"a* (Re b) = Re (a * b)\"", "lemma fct_bound:\n  fixes f::\"complex\\<Rightarrow> real\"\n  assumes \"f(-1) + f 1 = 1\"\nand \"0 \\<le> f 1\"\nand \"0 \\<le> f (-1)\"\nshows \"-1 \\<le> f 1  - f(-1) \\<and> f 1  - f(-1) \\<le> 1\"", "lemma fct_bound':\n  fixes f::\"complex\\<Rightarrow> real\"\n  assumes \"f(-1) + f 1 = 1\"\nand \"0 \\<le> f 1\"\nand \"0 \\<le> f (-1)\"\nshows \"\\<bar>f 1  - f(-1)\\<bar> \\<le> 1\"", "lemma pos_sum_1_le:\n  assumes \"finite I\"\nand \"\\<forall> i \\<in> I. (0::real) \\<le> f i\"\nand \"(\\<Sum>i\\<in> I. f i) = 1\"\nand \"j\\<in> I\"\nshows \"f j \\<le> 1\"", "lemma last_subset:\n  assumes \"A \\<subseteq> {a,b}\"\n  and \"a\\<noteq> b\"\nand \"A \\<noteq> {a, b}\"\nand \"A\\<noteq> {}\"\nand \"A \\<noteq> {a}\"\nshows \"A = {b}\"", "lemma disjoint_Un:\n  assumes \"disjoint_family_on A (insert x F)\"\n  and \"x\\<notin> F\"\nshows \"(A x) \\<inter> (\\<Union> a\\<in> F. A a) = {}\"", "lemma sum_but_one:\n  assumes \"\\<forall>j < (n::nat). j \\<noteq>i \\<longrightarrow> f j = (0::'a::ring)\"\n  and \"i < n\"\n  shows \"(\\<Sum> j \\<in> {0 ..< n}. f j * g j) = f i * g i\"", "lemma sum_2_elems:\n  assumes \"I = {a,b}\"\n    and \"a\\<noteq> b\"\n  shows \"(\\<Sum>a\\<in>I. f a) = f a + f b\"", "lemma sum_4_elems:\n  shows \"(\\<Sum>i<(4::nat). f i) = f 0 + f 1 + f 2 + f 3\"", "lemma disj_family_sum:\n  shows \"finite I \\<Longrightarrow> disjoint_family_on A I \\<Longrightarrow> (\\<And>i. i \\<in> I \\<Longrightarrow> finite (A i))  \\<Longrightarrow> \n  (\\<Sum> i \\<in> (\\<Union>n \\<in> I. A n). f i) = (\\<Sum> n\\<in> I. (\\<Sum> i \\<in> A n. f i))\"", "lemma integrable_real_mult_right:\n  fixes c::real\n  assumes \"integrable M f\"\n  shows \"integrable M (\\<lambda>w. c * f w)\"", "lemma mult_conj_cmod_square:\n  fixes z::complex\n  shows \"z * conjugate z = (cmod z)\\<^sup>2\"", "lemma vec_norm_sq_cpx_vec_length_sq:\n  shows \"(vec_norm v)\\<^sup>2 = (cpx_vec_length v)\\<^sup>2\"", "lemma vec_norm_eq_cpx_vec_length:\n  shows \"vec_norm v = cpx_vec_length v\"", "lemma cpx_vec_length_square:\n  shows \"\\<parallel>v\\<parallel>\\<^sup>2 = (\\<Sum>i = 0..<dim_vec v. (cmod (Matrix.vec_index v i))\\<^sup>2)\"", "lemma state_qbit_norm_sq:\n  assumes \"v\\<in> state_qbit n\"\n  shows \"(cpx_vec_length v)\\<^sup>2 = 1\"", "lemma dagger_adjoint:\nshows \"dagger M = Complex_Matrix.adjoint M\"", "lemmas lt_sum_union_disjoint = sum.union_disjoint\n  [var_simplified explicit_ab_group_add,\n    unoverload_type 'c,\n    OF type.comm_monoid_add_axioms,\n    untransferred]", "lemmas lt_disj_family_sum = disj_family_sum\n  [var_simplified explicit_ab_group_add,\n    unoverload_type 'd,\nOF type.comm_monoid_add_axioms,\n    untransferred]", "lemmas lt_sum_reindex_cong = sum.reindex_cong\n  [var_simplified explicit_ab_group_add,\n    unoverload_type 'd,\nOF type.comm_monoid_add_axioms,\n    untransferred]", "lemmas sum_with_union_disjoint =\n  lt_sum_union_disjoint\n    [cancel_type_definition,\n    OF carrier_ne,\n    simplified pred_fun_def, simplified]", "lemmas disj_family_sum_with =\n  lt_disj_family_sum\n    [cancel_type_definition,\n    OF carrier_ne,\n    simplified pred_fun_def, simplified]", "lemmas sum_with_reindex_cong = \n  lt_sum_reindex_cong\n    [cancel_type_definition,\n    OF carrier_ne,\n    simplified pred_fun_def, simplified]", "lemma (in comm_monoid_add_on_with) sum_with_cong':\n  shows \"finite I \\<Longrightarrow> (\\<And>i. i\\<in> I \\<Longrightarrow> A i = B i) \\<Longrightarrow> (\\<And>i. i\\<in> I \\<Longrightarrow> A i \\<in> S) \\<Longrightarrow> \n    (\\<And>i. i\\<in> I \\<Longrightarrow> B i \\<in> S) \\<Longrightarrow> sum_with pls z A I = sum_with pls z B I\"", "lemma smult_one:\n  shows \"(1::'a::monoid_mult) \\<cdot>\\<^sub>m A = A\"", "lemma times_diag_index:\n  fixes A::\"'a::comm_ring Matrix.mat\"\n  assumes \"A \\<in> carrier_mat n n\"\nand \"B\\<in> carrier_mat n n\"\nand \"diagonal_mat B\"\nand \"j < n\"\nand \"i < n\"\nshows \"Matrix.vec_index (Matrix.row (A*B) j) i = diag_mat B ! i *A $$ (j, i)\"", "lemma inner_prod_adjoint_comp:\n  assumes \"(U::'a::conjugatable_field Matrix.mat) \\<in> carrier_mat n n\"\nand \"(V::'a::conjugatable_field Matrix.mat) \\<in> carrier_mat n n\"\nand \"i < n\"\nand \"j < n\"\nshows \"Complex_Matrix.inner_prod  (Matrix.col V i) (Matrix.col U j) = \n  ((Complex_Matrix.adjoint V) * U) $$ (i, j)\"", "lemma mat_unit_vec_col:\n  assumes \"(A::'a::conjugatable_field Matrix.mat) \\<in> carrier_mat n n\"\nand \"i < n\"\nshows \"A *\\<^sub>v (unit_vec n i) = Matrix.col A i\"", "lemma mat_prod_unit_vec_cong:\n  assumes \"(A::'a::conjugatable_field Matrix.mat) \\<in> carrier_mat n n\"\nand \"B\\<in> carrier_mat n n\"\nand \"\\<And>i. i < n \\<Longrightarrow> A *\\<^sub>v (unit_vec n i) = B *\\<^sub>v (unit_vec n i)\"\nshows \"A = B\"", "lemma smult_smult_times:\n  fixes a::\"'a::semigroup_mult\"\n  shows \"a\\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A) = (a * k)\\<cdot>\\<^sub>m A\"", "lemma mat_minus_minus:\n  fixes A :: \"'a :: ab_group_add Matrix.mat\"\n  assumes \"A \\<in> carrier_mat n m\"\n  and \"B\\<in> carrier_mat n m\"\n  and \"C\\<in> carrier_mat n m\"\nshows \"A - (B - C) = A - B + C\"", "lemma hermitian_square:\n  assumes \"hermitian M\"\n  shows \"M \\<in> carrier_mat (dim_row M) (dim_row M)\"", "lemma hermitian_add:\n  assumes \"A\\<in> carrier_mat n n\"\n  and \"B\\<in> carrier_mat n n\"\nand \"hermitian A\"\nand \"hermitian B\"\nshows \"hermitian (A + B)\"", "lemma hermitian_minus:\n  assumes \"A\\<in> carrier_mat n n\"\n  and \"B\\<in> carrier_mat n n\"\nand \"hermitian A\"\nand \"hermitian B\"\nshows \"hermitian (A - B)\"", "lemma hermitian_smult:\n  fixes a::real\n  fixes A::\"complex Matrix.mat\"\n  assumes \"A \\<in> carrier_mat n n\"\nand \"hermitian A\"\nshows \"hermitian (a \\<cdot>\\<^sub>m  A)\"", "lemma unitary_eigenvalues_norm_square:\n  fixes U::\"complex Matrix.mat\"\n  assumes \"unitary U\"\n  and \"U \\<in> carrier_mat n n\"\n  and \"eigenvalue U k\"\nshows \"conjugate k * k = 1\"", "lemma outer_prod_smult_left:\n  fixes v::\"complex Matrix.vec\"\n  shows \"outer_prod (a \\<cdot>\\<^sub>v v) w = a \\<cdot>\\<^sub>m outer_prod v w\"", "lemma outer_prod_smult_right:\n  fixes v::\"complex Matrix.vec\"\n  shows \"outer_prod v (a \\<cdot>\\<^sub>v w) = (conjugate a) \\<cdot>\\<^sub>m outer_prod v w\"", "lemma outer_prod_add_left:\n  fixes v::\"complex Matrix.vec\"\n  assumes \"dim_vec v = dim_vec x\"\n  shows \"outer_prod (v + x) w = outer_prod v w + (outer_prod x w)\"", "lemma outer_prod_add_right:\n  fixes v::\"complex Matrix.vec\"\n  assumes \"dim_vec w = dim_vec x\"\n  shows \"outer_prod v (w + x) = outer_prod v w + (outer_prod v x)\"", "lemma outer_prod_minus_left:\n  fixes v::\"complex Matrix.vec\"\n  assumes \"dim_vec v = dim_vec x\"\n  shows \"outer_prod (v - x) w = outer_prod v w - (outer_prod x w)\"", "lemma outer_prod_minus_right:\n  fixes v::\"complex Matrix.vec\"\n  assumes \"dim_vec w = dim_vec x\"\n  shows \"outer_prod v (w - x) = outer_prod v w - (outer_prod v x)\"", "lemma outer_minus_minus:\n  fixes a::\"complex Matrix.vec\" \n  assumes \"dim_vec a = dim_vec b\"\n  and \"dim_vec u = dim_vec v\"\n  shows \"outer_prod (a - b) (u - v) = outer_prod a u - outer_prod a v -\n      outer_prod b u +  outer_prod b v\"", "lemma  outer_trace_inner:\n  assumes \"A \\<in> carrier_mat n n\"\n  and \"dim_vec u = n\"\nand \"dim_vec v = n\"\n  shows \"Complex_Matrix.trace (outer_prod u v * A) = Complex_Matrix.inner_prod v (A *\\<^sub>v u)\"", "lemma zero_hermitian:\n  shows \"hermitian (0\\<^sub>m n n)\"", "lemma  trace_1: \n  shows \"Complex_Matrix.trace ((1\\<^sub>m n)::complex Matrix.mat) =(n::complex)\"", "lemma  trace_add: \n  assumes \"square_mat A\"\n  and \"square_mat B\"\n  and \"dim_row A = dim_row B\"\n  shows \"Complex_Matrix.trace (A + B) = Complex_Matrix.trace A + Complex_Matrix.trace B\"", "lemma bra_vec_carrier:\n  shows \"bra_vec v \\<in> carrier_mat 1 (dim_vec v)\"", "lemma mat_mult_ket_carrier:\n  assumes \"A\\<in> carrier_mat n m\"\nshows \"A * |v\\<rangle> \\<in> carrier_mat n 1\"", "lemma mat_mult_ket:\n  assumes \"A \\<in> carrier_mat n m\"\nand \"dim_vec v = m\"\nshows \"A * |v\\<rangle> = |A *\\<^sub>v v\\<rangle>\"", "lemma unitary_density:\n  assumes \"density_operator R\"\n  and \"unitary U\"\n  and \"R\\<in> carrier_mat n n\"\n  and \"U\\<in> carrier_mat n n\"\nshows \"density_operator (U * R * (Complex_Matrix.adjoint U))\"", "lemma tensor_vec_dim[simp]:\n  shows \"dim_vec (tensor_vec u v) = dim_vec u * (dim_vec v)\"", "lemma index_tensor_vec[simp]:\n  assumes \"0 < dim_vec v\" \n  and \"i < dim_vec u * dim_vec v\"\nshows \"vec_index (tensor_vec u v) i = \n  vec_index u (i div (dim_vec v)) * vec_index v (i mod dim_vec v)\"", "lemma  outer_prod_tensor_comm:\n  fixes a::\"complex Matrix.vec\"\n  fixes u::\"complex Matrix.vec\"\n  assumes \"0 < dim_vec a\"\n  and \"0 < dim_vec b\"\nshows \"outer_prod (tensor_vec u v) (tensor_vec a b) = tensor_mat (outer_prod u a) (outer_prod v b)\"", "lemma tensor_mat_adjoint:\n  assumes \"m1 \\<in> carrier_mat r1 c1\"\n    and \"m2 \\<in> carrier_mat r2 c2\"\n    and \"0 < c1\"\n    and \"0 < c2\"\nand \"0 < r1\"\nand \"0 < r2\"\n  shows \"Complex_Matrix.adjoint (tensor_mat m1 m2) = \n  tensor_mat (Complex_Matrix.adjoint m1) (Complex_Matrix.adjoint m2)\"", "lemma index_tensor_mat':\n  assumes \"0 < dim_col A\"\n  and \"0 < dim_col B\"\n  and \"i < dim_row A * dim_row B\"\n  and \"j < dim_col A * dim_col B\"\n  shows \"(A \\<Otimes> B) $$ (i, j) = \n    A $$ (i div (dim_row B), j div (dim_col B)) * B $$ (i mod (dim_row B), j mod (dim_col B))\"", "lemma tensor_mat_carrier:\n  shows \"tensor_mat U V \\<in> carrier_mat (dim_row U * dim_row V) (dim_col U * dim_col V)\"", "lemma tensor_mat_id:\n  assumes \"0 < d1\"\n  and \"0 < d2\"\nshows \"tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) = 1\\<^sub>m (d1 * d2)\"", "lemma tensor_mat_hermitian:\n  assumes \"A \\<in> carrier_mat n n\"\n  and \"B \\<in> carrier_mat n' n'\"\n  and \"0 < n\"\n  and \"0 < n'\"\n  and \"hermitian A\"\n  and \"hermitian B\"\n  shows \"hermitian (tensor_mat A B)\"", "lemma  tensor_mat_unitary:\n  assumes \"Complex_Matrix.unitary U\"\n  and \"Complex_Matrix.unitary V\"\nand \"0 < dim_row U\"\nand \"0 < dim_row V\"\nshows \"Complex_Matrix.unitary (tensor_mat U V)\"", "lemma (in fixed_carrier_mat) smult_mem:\n  assumes \"A \\<in> fc_mats\"\n  shows \"a \\<cdot>\\<^sub>m A \\<in> fc_mats\"", "lemma (in fixed_carrier_mat) sum_mat_empty[simp]:\n  shows \"sum_mat A {} = 0\\<^sub>m dimR dimC\"", "lemma (in fixed_carrier_mat) sum_mat_carrier:\n  shows \"(\\<And>i. i \\<in> I \\<Longrightarrow> (A i)\\<in> fc_mats) \\<Longrightarrow> sum_mat A I \\<in> carrier_mat dimR dimC\"", "lemma (in fixed_carrier_mat) sum_mat_insert:\n  assumes \"A x \\<in> fc_mats\" \"A ` I \\<subseteq> fc_mats\"\n    and A: \"finite I\" and x: \"x \\<notin> I\"\n  shows \"sum_mat A (insert x I) = A x + sum_mat A I\"", "lemma (in cpx_sq_mat) one_mem:\n  shows \"1\\<^sub>m dimR \\<in> fc_mats\"", "lemma (in cpx_sq_mat) square_mats:\n  assumes \"A \\<in> fc_mats\"\n  shows \"square_mat A\"", "lemma (in cpx_sq_mat) cpx_sq_mat_mult:\n  assumes \"A \\<in> fc_mats\"\n  and \"B \\<in> fc_mats\"\nshows \"A * B \\<in> fc_mats\"", "lemma (in cpx_sq_mat) sum_mat_distrib_left:\n  shows \"finite I \\<Longrightarrow> R\\<in> fc_mats \\<Longrightarrow> (\\<And>i. i \\<in> I \\<Longrightarrow> (A i)\\<in> fc_mats) \\<Longrightarrow> \n    sum_mat (\\<lambda>i. R * (A i)) I = R * (sum_mat A I)\"", "lemma (in cpx_sq_mat) sum_mat_distrib_right:\n  shows \"finite I \\<Longrightarrow> R\\<in> fc_mats \\<Longrightarrow> (\\<And>i. i \\<in> I \\<Longrightarrow> (A i)\\<in> fc_mats) \\<Longrightarrow> \n    sum_mat (\\<lambda>i. (A i) * R) I = (sum_mat A I) * R\"", "lemma (in cpx_sq_mat)  trace_sum_mat:\n  fixes A::\"'b \\<Rightarrow> complex Matrix.mat\"\n  shows \"finite I \\<Longrightarrow> (\\<And>i. i \\<in> I \\<Longrightarrow> (A i)\\<in> fc_mats) \\<Longrightarrow>\n  Complex_Matrix.trace (sum_mat A I) = (\\<Sum> i\\<in> I. Complex_Matrix.trace (A i))\"", "lemma (in cpx_sq_mat) cpx_sq_mat_smult:\n  assumes \"A \\<in> fc_mats\"\n  shows \"x  \\<cdot>\\<^sub>m A \\<in> fc_mats\"", "lemma (in cpx_sq_mat) mult_add_distrib_right:\n  assumes \"A\\<in> fc_mats\" \"B\\<in> fc_mats\" \"C\\<in> fc_mats\"\n  shows \"A * (B + C) = A * B + A * C\"", "lemma (in cpx_sq_mat) mult_add_distrib_left:\n  assumes \"A\\<in> fc_mats\" \"B\\<in> fc_mats\" \"C\\<in> fc_mats\"\n  shows \"(B + C) * A = B * A + C * A\"", "lemma (in cpx_sq_mat)  mult_sum_mat_distrib_left:\n  shows \"finite I \\<Longrightarrow> (\\<And>i. i \\<in> I \\<Longrightarrow> (A i)\\<in> fc_mats) \\<Longrightarrow> B \\<in> fc_mats \\<Longrightarrow>\n  (sum_mat (\\<lambda>i. B * (A i)) I) = B * (sum_mat A I)\"", "lemma (in cpx_sq_mat)  mult_sum_mat_distrib_right:\n  shows \"finite I \\<Longrightarrow> (\\<And>i. i \\<in> I \\<Longrightarrow> (A i)\\<in> fc_mats) \\<Longrightarrow> B \\<in> fc_mats \\<Longrightarrow>\n  (sum_mat (\\<lambda>i. (A i) * B) I) = (sum_mat A I) * B\"", "lemma (in cpx_sq_mat) trace_sum_mat_mat_distrib:\n  assumes \"finite I\"\nand \"\\<And>i. i\\<in> I \\<Longrightarrow> B i \\<in> fc_mats\"\nand \"A\\<in> fc_mats\"\nand \"C \\<in> fc_mats\"\nshows \"(\\<Sum> i\\<in> I. Complex_Matrix.trace(A * (B i) * C)) = \n  Complex_Matrix.trace (A * (sum_mat B I) * C)\"", "lemma (in cpx_sq_mat) zero_col_dim:\n  assumes \"U \\<in> fc_mats\"\n  shows \"dim_vec (zero_col U i) = dimR\"", "lemma (in cpx_sq_mat) zero_col_col:\n  assumes \"i < dimR\"\n  shows \"zero_col U i = Matrix.col U i\"", "lemma (in cpx_sq_mat) sum_mat_index:\n  shows \"finite I \\<Longrightarrow> (\\<And>i. i \\<in> I \\<Longrightarrow> (A i)\\<in> fc_mats) \\<Longrightarrow> i < dimR \\<Longrightarrow> j < dimC \\<Longrightarrow> \n    (sum_mat (\\<lambda>k. (A k)) I) $$ (i,j) = (\\<Sum> k\\<in>I. (A k) $$ (i,j))\"", "lemma (in cpx_sq_mat) sum_mat_cong:\n  shows \"finite I \\<Longrightarrow> (\\<And>i. i\\<in> I \\<Longrightarrow> A i = B i) \\<Longrightarrow> (\\<And>i. i\\<in> I \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow> \n    (\\<And>i. i\\<in> I \\<Longrightarrow> B i \\<in> fc_mats) \\<Longrightarrow> sum_mat A I = sum_mat B I\"", "lemma (in cpx_sq_mat) smult_sum_mat:\n  shows \"finite I \\<Longrightarrow> (\\<And>i. i\\<in> I \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow> a \\<cdot>\\<^sub>m sum_mat A I = sum_mat (\\<lambda>i. a  \\<cdot>\\<^sub>m (A i)) I\"", "lemma (in cpx_sq_mat) zero_sum_mat:\n  shows \"finite I \\<Longrightarrow> sum_mat (\\<lambda>i. ((0\\<^sub>m dimR dimR)::complex Matrix.mat)) I = ((0\\<^sub>m dimR dimR)::complex Matrix.mat)\"", "lemma (in cpx_sq_mat) sum_mat_adjoint:\n  shows \"finite I \\<Longrightarrow> (\\<And>i. i\\<in> I \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow> \n    Complex_Matrix.adjoint (sum_mat A I) = sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) I\"", "lemma (in cpx_sq_mat) sum_mat_hermitian:\n  assumes \"finite I\"\nand \"\\<forall>i\\<in> I. hermitian (A i)\"\nand \"\\<forall>i\\<in> I. A i\\<in> fc_mats\"\nshows \"hermitian (sum_mat A I)\"", "lemma (in cpx_sq_mat) sum_mat_positive:\nshows \"finite I \\<Longrightarrow> (\\<And>i. i\\<in> I \\<Longrightarrow> Complex_Matrix.positive (A i)) \\<Longrightarrow> \n  (\\<And>i. i \\<in> I \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow> Complex_Matrix.positive (sum_mat A I)\"", "lemma (in cpx_sq_mat) sum_mat_left_ortho_zero:\n  shows \"finite I \\<Longrightarrow> \n    (\\<And>i. i\\<in> I \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow> (B \\<in> fc_mats) \\<Longrightarrow>\n    (\\<And> i. i\\<in> I \\<Longrightarrow> A i * B = (0\\<^sub>m dimR dimR)) \\<Longrightarrow> \n    (sum_mat A I) * B = 0\\<^sub>m dimR dimR\"", "lemma (in cpx_sq_mat) sum_mat_right_ortho_zero:\n  shows \"finite I \\<Longrightarrow> \n    (\\<And>i. i\\<in> I \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow> (B \\<in> fc_mats) \\<Longrightarrow>\n    (\\<And> i. i\\<in> I \\<Longrightarrow> B * A i = (0\\<^sub>m dimR dimR)) \\<Longrightarrow> \n    B * (sum_mat A I)  = 0\\<^sub>m dimR dimR\"", "lemma (in cpx_sq_mat) sum_mat_ortho_square:\n  shows \"finite I \\<Longrightarrow> (\\<And>i. i\\<in> I \\<Longrightarrow> ((A i)::complex Matrix.mat) * (A i) = A i) \\<Longrightarrow> \n    (\\<And>i. i\\<in> I \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n    (\\<And> i j. i\\<in> I \\<Longrightarrow> j\\<in> I \\<Longrightarrow> i\\<noteq> j \\<Longrightarrow> A i * (A j) = (0\\<^sub>m dimR dimR)) \\<Longrightarrow> \n    (sum_mat A I) * (sum_mat A I) = (sum_mat A I)\"", "lemma diagonal_unit_vec:\n  assumes \"B \\<in> carrier_mat n n\"\nand \"diagonal_mat (B::complex Matrix.mat)\"\nshows \"B *\\<^sub>v (unit_vec n i) = B $$ (i,i)  \\<cdot>\\<^sub>v (unit_vec n i)\"", "lemma mat_vec_mult_assoc:\n  assumes \"A \\<in> carrier_mat n p\"\nand \"B\\<in> carrier_mat p q\"\nand \"dim_vec v = q\"\nshows \"A *\\<^sub>v (B *\\<^sub>v v) = (A * B) *\\<^sub>v v\"", "lemma (in cpx_sq_mat) similar_eigenvectors:\n  assumes \"A\\<in> fc_mats\"\n  and \"B\\<in> fc_mats\"\n  and \"P\\<in> fc_mats\"\n  and \"similar_mat_wit A B P (Complex_Matrix.adjoint P)\"\n  and \"diagonal_mat B\"\n  and \"i < n\"\nshows \"A *\\<^sub>v (P *\\<^sub>v (unit_vec dimR i)) = B $$ (i,i) \\<cdot>\\<^sub>v (P *\\<^sub>v (unit_vec dimR i))\"", "lemma projector_hermitian:\n  assumes \"projector M\"\n  shows \"hermitian M\"", "lemma zero_projector[simp]:\n  shows \"projector (0\\<^sub>m n n)\"", "lemma projector_square_eq:\n  assumes \"projector M\"\n  shows \"M * M = M\"", "lemma projector_positive:\n  assumes \"projector M\"\n  shows \"Complex_Matrix.positive M\"", "lemma projector_collapse_trace:\n  assumes \"projector (P::complex Matrix.mat)\"\n  and \"P \\<in> carrier_mat n n\"\n  and \"R\\<in> carrier_mat n n\"\nshows \"Complex_Matrix.trace (P * R * P) = Complex_Matrix.trace (R * P)\"", "lemma positive_proj_trace:\n  assumes \"projector (P::complex Matrix.mat)\"\n  and \"Complex_Matrix.positive R\"\n  and \"P \\<in> carrier_mat n n\"\n  and \"R\\<in> carrier_mat n n\"\nshows \"Complex_Matrix.trace (R * P) \\<ge> 0\"", "lemma trace_proj_pos_real:\n  assumes \"projector (P::complex Matrix.mat)\"\n  and \"Complex_Matrix.positive R\"\n  and \"P \\<in> carrier_mat n n\"\n  and \"R\\<in> carrier_mat n n\"\nshows \"Re (Complex_Matrix.trace (R * P)) = Complex_Matrix.trace (R * P)\"", "lemma (in cpx_sq_mat) trace_sum_mat_proj_pos_real:\n  fixes f::\"'a \\<Rightarrow> real\"\n  assumes \"finite I\"\n  and \"\\<forall> i\\<in> I. projector (P i)\"\n  and \"Complex_Matrix.positive R\"\n  and \"\\<forall>i\\<in> I. P i \\<in> fc_mats\"\n  and \"R \\<in> fc_mats\"\nshows \"Complex_Matrix.trace (R * (sum_mat (\\<lambda>i. f i \\<cdot>\\<^sub>m (P i)) I)) = \n  Re (Complex_Matrix.trace (R * (sum_mat (\\<lambda>i. f i \\<cdot>\\<^sub>m (P i)) I)))\"", "lemma rank_1_proj_square_mat:\n  shows \"square_mat (rank_1_proj v)\"", "lemma rank_1_proj_dim[simp]:\n  shows \"dim_row (rank_1_proj v) = dim_vec v\"", "lemma rank_1_proj_carrier[simp]:\n  shows \"rank_1_proj v \\<in> carrier_mat (dim_vec v) (dim_vec v)\"", "lemma rank_1_proj_coord:\n  assumes \"i < dim_vec v\"\n  and \"j < dim_vec v\"\nshows \"(rank_1_proj v) $$ (i, j) = Matrix.vec_index v i * (cnj (Matrix.vec_index v j))\"", "lemma rank_1_proj_adjoint:\n  shows \"Complex_Matrix.adjoint (rank_1_proj (v::complex Matrix.vec)) = rank_1_proj v\"", "lemma rank_1_proj_hermitian:\n  shows \"hermitian (rank_1_proj (v::complex Matrix.vec))\"", "lemma rank_1_proj_trace:\n  assumes \"\\<parallel>v\\<parallel> = 1\"\n  shows \"Complex_Matrix.trace (rank_1_proj v) = 1\"", "lemma rank_1_proj_mat_col:\n  assumes \"A \\<in> carrier_mat n n\"\n  and \"i < n\"\n  and \"j < n\"\n  and \"k < n\"\nshows \"(rank_1_proj (Matrix.col A i)) $$ (j, k) = A $$ (j, i) * conjugate (A $$ (k,i))\"", "lemma (in cpx_sq_mat) weighted_sum_rank_1_proj_unitary_index:\n  assumes \"A \\<in> fc_mats\"\nand \"B \\<in> fc_mats\"\nand \"diagonal_mat B\"\nand \"Complex_Matrix.unitary A\"\nand \"j < dimR\"\nand \"k < dimR\"\nshows \"(sum_mat (\\<lambda>i. (diag_mat B)!i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i)) {..< dimR}) $$ (j,k) = \n  (A * B * (Complex_Matrix.adjoint A)) $$ (j,k)\"", "lemma (in cpx_sq_mat) weighted_sum_rank_1_proj_unitary:\n  assumes \"A \\<in> fc_mats\"\nand \"B \\<in> fc_mats\"\nand \"diagonal_mat B\"\nand \"Complex_Matrix.unitary A\"\nshows \"(sum_mat (\\<lambda>i. (diag_mat B)!i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i)) {..< dimR}) = \n  (A * B * (Complex_Matrix.adjoint A))\"", "lemma rank_1_proj_projector:\n  assumes \"\\<parallel>v\\<parallel> = 1\"\n  shows \"projector (rank_1_proj v)\"", "lemma rank_1_proj_positive:\n  assumes \"\\<parallel>v\\<parallel> = 1\"\n  shows \"Complex_Matrix.positive (rank_1_proj v)\"", "lemma rank_1_proj_density:\n  assumes \"\\<parallel>v\\<parallel> = 1\"\n  shows \"density_operator (rank_1_proj v)\"", "lemma (in cpx_sq_mat) sum_rank_1_proj_unitary_index:\n  assumes \"A \\<in> fc_mats\"\nand \"Complex_Matrix.unitary A\"\nand \"j < dimR\"\nand \"k < dimR\"\nshows \"(sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..< dimR}) $$ (j,k) = (1\\<^sub>m dimR) $$ (j,k)\"", "lemma (in cpx_sq_mat) rank_1_proj_sum_density:\n  assumes \"finite I\"\n  and \"\\<forall>i\\<in> I. \\<parallel>u i\\<parallel> = 1\" \n  and \"\\<forall>i\\<in> I. dim_vec (u i) = dimR\"\n  and \"\\<forall>i\\<in> I. 0 \\<le> p i\"\n  and \"(\\<Sum>i\\<in> I. p i) = 1\"\nshows \"density_operator (sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m (rank_1_proj (u i))) I)\"", "lemma (in cpx_sq_mat) sum_rank_1_proj_unitary:\n  assumes \"A \\<in> fc_mats\"\nand \"Complex_Matrix.unitary A\"\nshows \"(sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..< dimR})= (1\\<^sub>m dimR)\"", "lemma (in cpx_sq_mat) rank_1_proj_unitary:\n  assumes \"A \\<in> fc_mats\"\nand \"Complex_Matrix.unitary A\"\nand \"j < dimR\"\nand \"k < dimR\"\nshows \"rank_1_proj (Matrix.col A j) * (rank_1_proj (Matrix.col A k)) =\n  (1\\<^sub>m dimR) $$ (j,k) \\<cdot>\\<^sub>m (outer_prod (Matrix.col A j) (Matrix.col A k))\"", "lemma (in cpx_sq_mat) rank_1_proj_unitary_ne:\n  assumes \"A \\<in> fc_mats\"\nand \"Complex_Matrix.unitary A\"\nand \"j < dimR\"\nand \"k < dimR\"\nand \"j\\<noteq> k\"\nshows \"rank_1_proj (Matrix.col A j) * (rank_1_proj (Matrix.col A k)) =  (0\\<^sub>m dimR dimR)\"", "lemma (in cpx_sq_mat) rank_1_proj_unitary_eq:\n  assumes \"A \\<in> fc_mats\"\nand \"Complex_Matrix.unitary A\"\nand \"j < dimR\"\nshows \"rank_1_proj (Matrix.col A j) * (rank_1_proj (Matrix.col A j)) =  rank_1_proj (Matrix.col A j)\""], "translations": [["", "lemma mult_real_cpx:\n  fixes a::complex\n  fixes b::complex\n  assumes \"a\\<in> Reals\"\n  shows \"a* (Re b) = Re (a * b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * complex_of_real (Re b) = complex_of_real (Re (a * b))", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> \\<real>\n\ngoal (1 subgoal):\n 1. a * complex_of_real (Re b) = complex_of_real (Re (a * b))", "by (metis Reals_cases complex.exhaust complex.sel(1) complex_of_real_mult_Complex of_real_mult)"], ["", "lemma fct_bound:\n  fixes f::\"complex\\<Rightarrow> real\"\n  assumes \"f(-1) + f 1 = 1\"\nand \"0 \\<le> f 1\"\nand \"0 \\<le> f (-1)\"\nshows \"-1 \\<le> f 1  - f(-1) \\<and> f 1  - f(-1) \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - 1 \\<le> f 1 - f (- 1) \\<and> f 1 - f (- 1) \\<le> 1", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. - 1 \\<le> f 1 - f (- 1)\n 2. f 1 - f (- 1) \\<le> 1", "have \"f 1  - f(-1) = 1 - f(-1) - f(-1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f 1 - f (- 1) = 1 - f (- 1) - f (- 1)", "using assms"], ["proof (prove)\nusing this:\n  f (- 1) + f 1 = 1\n  0 \\<le> f 1\n  0 \\<le> f (- 1)\n\ngoal (1 subgoal):\n 1. f 1 - f (- 1) = 1 - f (- 1) - f (- 1)", "by simp"], ["proof (state)\nthis:\n  f 1 - f (- 1) = 1 - f (- 1) - f (- 1)\n\ngoal (2 subgoals):\n 1. - 1 \\<le> f 1 - f (- 1)\n 2. f 1 - f (- 1) \\<le> 1", "also"], ["proof (state)\nthis:\n  f 1 - f (- 1) = 1 - f (- 1) - f (- 1)\n\ngoal (2 subgoals):\n 1. - 1 \\<le> f 1 - f (- 1)\n 2. f 1 - f (- 1) \\<le> 1", "have \"...\\<ge> -1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - 1 \\<le> 1 - f (- 1) - f (- 1)", "using assms"], ["proof (prove)\nusing this:\n  f (- 1) + f 1 = 1\n  0 \\<le> f 1\n  0 \\<le> f (- 1)\n\ngoal (1 subgoal):\n 1. - 1 \\<le> 1 - f (- 1) - f (- 1)", "by simp"], ["proof (state)\nthis:\n  - 1 \\<le> 1 - f (- 1) - f (- 1)\n\ngoal (2 subgoals):\n 1. - 1 \\<le> f 1 - f (- 1)\n 2. f 1 - f (- 1) \\<le> 1", "finally"], ["proof (chain)\npicking this:\n  - 1 \\<le> f 1 - f (- 1)", "show \"-1 \\<le> f 1  - f(-1)\""], ["proof (prove)\nusing this:\n  - 1 \\<le> f 1 - f (- 1)\n\ngoal (1 subgoal):\n 1. - 1 \\<le> f 1 - f (- 1)", "."], ["proof (state)\nthis:\n  - 1 \\<le> f 1 - f (- 1)\n\ngoal (1 subgoal):\n 1. f 1 - f (- 1) \\<le> 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f 1 - f (- 1) \\<le> 1", "have \"f(-1) - f 1  = 1 - f 1  - f 1 \""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (- 1) - f 1 = 1 - f 1 - f 1", "using assms"], ["proof (prove)\nusing this:\n  f (- 1) + f 1 = 1\n  0 \\<le> f 1\n  0 \\<le> f (- 1)\n\ngoal (1 subgoal):\n 1. f (- 1) - f 1 = 1 - f 1 - f 1", "by simp"], ["proof (state)\nthis:\n  f (- 1) - f 1 = 1 - f 1 - f 1\n\ngoal (1 subgoal):\n 1. f 1 - f (- 1) \\<le> 1", "also"], ["proof (state)\nthis:\n  f (- 1) - f 1 = 1 - f 1 - f 1\n\ngoal (1 subgoal):\n 1. f 1 - f (- 1) \\<le> 1", "have \"... \\<ge> -1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - 1 \\<le> 1 - f 1 - f 1", "using assms"], ["proof (prove)\nusing this:\n  f (- 1) + f 1 = 1\n  0 \\<le> f 1\n  0 \\<le> f (- 1)\n\ngoal (1 subgoal):\n 1. - 1 \\<le> 1 - f 1 - f 1", "by simp"], ["proof (state)\nthis:\n  - 1 \\<le> 1 - f 1 - f 1\n\ngoal (1 subgoal):\n 1. f 1 - f (- 1) \\<le> 1", "finally"], ["proof (chain)\npicking this:\n  - 1 \\<le> f (- 1) - f 1", "have \"-1 \\<le> f(-1) - f 1\""], ["proof (prove)\nusing this:\n  - 1 \\<le> f (- 1) - f 1\n\ngoal (1 subgoal):\n 1. - 1 \\<le> f (- 1) - f 1", "."], ["proof (state)\nthis:\n  - 1 \\<le> f (- 1) - f 1\n\ngoal (1 subgoal):\n 1. f 1 - f (- 1) \\<le> 1", "thus \"f 1 - f (-1) \\<le> 1\""], ["proof (prove)\nusing this:\n  - 1 \\<le> f (- 1) - f 1\n\ngoal (1 subgoal):\n 1. f 1 - f (- 1) \\<le> 1", "by simp"], ["proof (state)\nthis:\n  f 1 - f (- 1) \\<le> 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fct_bound':\n  fixes f::\"complex\\<Rightarrow> real\"\n  assumes \"f(-1) + f 1 = 1\"\nand \"0 \\<le> f 1\"\nand \"0 \\<le> f (-1)\"\nshows \"\\<bar>f 1  - f(-1)\\<bar> \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>f 1 - f (- 1)\\<bar> \\<le> 1", "using assms fct_bound"], ["proof (prove)\nusing this:\n  f (- 1) + f 1 = 1\n  0 \\<le> f 1\n  0 \\<le> f (- 1)\n  \\<lbrakk>?f (- 1) + ?f 1 = 1; 0 \\<le> ?f 1; 0 \\<le> ?f (- 1)\\<rbrakk>\n  \\<Longrightarrow> - 1 \\<le> ?f 1 - ?f (- 1) \\<and> ?f 1 - ?f (- 1) \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<bar>f 1 - f (- 1)\\<bar> \\<le> 1", "by auto"], ["", "lemma pos_sum_1_le:\n  assumes \"finite I\"\nand \"\\<forall> i \\<in> I. (0::real) \\<le> f i\"\nand \"(\\<Sum>i\\<in> I. f i) = 1\"\nand \"j\\<in> I\"\nshows \"f j \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f j \\<le> 1", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> f j \\<le> 1 \\<Longrightarrow> False", "assume \"\\<not> f j \\<le> 1\""], ["proof (state)\nthis:\n  \\<not> f j \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<not> f j \\<le> 1 \\<Longrightarrow> False", "hence \"1 < f j\""], ["proof (prove)\nusing this:\n  \\<not> f j \\<le> 1\n\ngoal (1 subgoal):\n 1. 1 < f j", "by simp"], ["proof (state)\nthis:\n  1 < f j\n\ngoal (1 subgoal):\n 1. \\<not> f j \\<le> 1 \\<Longrightarrow> False", "hence \"1 < (\\<Sum>i\\<in> I. f i)\""], ["proof (prove)\nusing this:\n  1 < f j\n\ngoal (1 subgoal):\n 1. 1 < sum f I", "using assms"], ["proof (prove)\nusing this:\n  1 < f j\n  finite I\n  \\<forall>i\\<in>I. 0 \\<le> f i\n  sum f I = 1\n  j \\<in> I\n\ngoal (1 subgoal):\n 1. 1 < sum f I", "by (metis \\<open>\\<not> f j \\<le> 1\\<close> sum_nonneg_leq_bound)"], ["proof (state)\nthis:\n  1 < sum f I\n\ngoal (1 subgoal):\n 1. \\<not> f j \\<le> 1 \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  1 < sum f I\n\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  1 < sum f I\n  finite I\n  \\<forall>i\\<in>I. 0 \\<le> f i\n  sum f I = 1\n  j \\<in> I\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma last_subset:\n  assumes \"A \\<subseteq> {a,b}\"\n  and \"a\\<noteq> b\"\nand \"A \\<noteq> {a, b}\"\nand \"A\\<noteq> {}\"\nand \"A \\<noteq> {a}\"\nshows \"A = {b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = {b}", "using assms"], ["proof (prove)\nusing this:\n  A \\<subseteq> {a, b}\n  a \\<noteq> b\n  A \\<noteq> {a, b}\n  A \\<noteq> {}\n  A \\<noteq> {a}\n\ngoal (1 subgoal):\n 1. A = {b}", "by blast"], ["", "lemma disjoint_Un:\n  assumes \"disjoint_family_on A (insert x F)\"\n  and \"x\\<notin> F\"\nshows \"(A x) \\<inter> (\\<Union> a\\<in> F. A a) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x \\<inter> \\<Union> (A ` F) = {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A x \\<inter> \\<Union> (A ` F) = {}", "have \"(A x) \\<inter> (\\<Union> a\\<in> F. A a) = (\\<Union>i\\<in>F. (A x) \\<inter> A i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x \\<inter> \\<Union> (A ` F) = (\\<Union>i\\<in>F. A x \\<inter> A i)", "using Int_UN_distrib"], ["proof (prove)\nusing this:\n  ?B \\<inter> \\<Union> (?A ` ?I) = (\\<Union>i\\<in>?I. ?B \\<inter> ?A i)\n\ngoal (1 subgoal):\n 1. A x \\<inter> \\<Union> (A ` F) = (\\<Union>i\\<in>F. A x \\<inter> A i)", "by simp"], ["proof (state)\nthis:\n  A x \\<inter> \\<Union> (A ` F) = (\\<Union>i\\<in>F. A x \\<inter> A i)\n\ngoal (1 subgoal):\n 1. A x \\<inter> \\<Union> (A ` F) = {}", "also"], ["proof (state)\nthis:\n  A x \\<inter> \\<Union> (A ` F) = (\\<Union>i\\<in>F. A x \\<inter> A i)\n\ngoal (1 subgoal):\n 1. A x \\<inter> \\<Union> (A ` F) = {}", "have \"... = (\\<Union>i\\<in>F. {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>i\\<in>F. A x \\<inter> A i) = (\\<Union>i\\<in>F. {})", "using assms disjoint_family_onD"], ["proof (prove)\nusing this:\n  disjoint_family_on A (insert x F)\n  x \\<notin> F\n  \\<lbrakk>disjoint_family_on ?A ?I; ?i \\<in> ?I; ?j \\<in> ?I;\n   ?i \\<noteq> ?j\\<rbrakk>\n  \\<Longrightarrow> ?A ?i \\<inter> ?A ?j = {}\n\ngoal (1 subgoal):\n 1. (\\<Union>i\\<in>F. A x \\<inter> A i) = (\\<Union>i\\<in>F. {})", "by fastforce"], ["proof (state)\nthis:\n  (\\<Union>i\\<in>F. A x \\<inter> A i) = (\\<Union>i\\<in>F. {})\n\ngoal (1 subgoal):\n 1. A x \\<inter> \\<Union> (A ` F) = {}", "also"], ["proof (state)\nthis:\n  (\\<Union>i\\<in>F. A x \\<inter> A i) = (\\<Union>i\\<in>F. {})\n\ngoal (1 subgoal):\n 1. A x \\<inter> \\<Union> (A ` F) = {}", "have \"... = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>i\\<in>F. {}) = {}", "using SUP_bot_conv(2)"], ["proof (prove)\nusing this:\n  (\\<bottom> = \\<Squnion> (?B ` ?A)) = (\\<forall>x\\<in>?A. ?B x = \\<bottom>)\n\ngoal (1 subgoal):\n 1. (\\<Union>i\\<in>F. {}) = {}", "by simp"], ["proof (state)\nthis:\n  (\\<Union>i\\<in>F. {}) = {}\n\ngoal (1 subgoal):\n 1. A x \\<inter> \\<Union> (A ` F) = {}", "finally"], ["proof (chain)\npicking this:\n  A x \\<inter> \\<Union> (A ` F) = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  A x \\<inter> \\<Union> (A ` F) = {}\n\ngoal (1 subgoal):\n 1. A x \\<inter> \\<Union> (A ` F) = {}", "."], ["proof (state)\nthis:\n  A x \\<inter> \\<Union> (A ` F) = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_but_one:\n  assumes \"\\<forall>j < (n::nat). j \\<noteq>i \\<longrightarrow> f j = (0::'a::ring)\"\n  and \"i < n\"\n  shows \"(\\<Sum> j \\<in> {0 ..< n}. f j * g j) = f i * g i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>j = 0..<n. f j * g j) = f i * g i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>j = 0..<n. f j * g j) = f i * g i", "have \"sum (\\<lambda>x. f x * g x) (({0 ..< n} - {i}) \\<union> {i}) = sum (\\<lambda>x. f x * g x) ({0 ..< n} - {i}) + \n    sum (\\<lambda>x. f x * g x) {i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{0..<n} - {i} \\<union> {i}. f x * g x) =\n    (\\<Sum>x\\<in>{0..<n} - {i}. f x * g x) + (\\<Sum>x\\<in>{i}. f x * g x)", "by (rule sum.union_disjoint, auto)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{0..<n} - {i} \\<union> {i}. f x * g x) =\n  (\\<Sum>x\\<in>{0..<n} - {i}. f x * g x) + (\\<Sum>x\\<in>{i}. f x * g x)\n\ngoal (1 subgoal):\n 1. (\\<Sum>j = 0..<n. f j * g j) = f i * g i", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{0..<n} - {i} \\<union> {i}. f x * g x) =\n  (\\<Sum>x\\<in>{0..<n} - {i}. f x * g x) + (\\<Sum>x\\<in>{i}. f x * g x)\n\ngoal (1 subgoal):\n 1. (\\<Sum>j = 0..<n. f j * g j) = f i * g i", "have \"... = sum (\\<lambda>x. f x * g x) {i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{0..<n} - {i}. f x * g x) + (\\<Sum>x\\<in>{i}. f x * g x) =\n    (\\<Sum>x\\<in>{i}. f x * g x)", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>j<n. j \\<noteq> i \\<longrightarrow> f j = (0::'a)\n  i < n\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{0..<n} - {i}. f x * g x) + (\\<Sum>x\\<in>{i}. f x * g x) =\n    (\\<Sum>x\\<in>{i}. f x * g x)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{0..<n} - {i}. f x * g x) + (\\<Sum>x\\<in>{i}. f x * g x) =\n  (\\<Sum>x\\<in>{i}. f x * g x)\n\ngoal (1 subgoal):\n 1. (\\<Sum>j = 0..<n. f j * g j) = f i * g i", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{0..<n} - {i}. f x * g x) + (\\<Sum>x\\<in>{i}. f x * g x) =\n  (\\<Sum>x\\<in>{i}. f x * g x)\n\ngoal (1 subgoal):\n 1. (\\<Sum>j = 0..<n. f j * g j) = f i * g i", "have \"... = f i * g i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{i}. f x * g x) = f i * g i", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{i}. f x * g x) = f i * g i\n\ngoal (1 subgoal):\n 1. (\\<Sum>j = 0..<n. f j * g j) = f i * g i", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>x\\<in>{0..<n} - {i} \\<union> {i}. f x * g x) = f i * g i", "have \"sum (\\<lambda>x. f x * g x) (({0 ..< n} - {i}) \\<union> {i}) = f i * g i\""], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>{0..<n} - {i} \\<union> {i}. f x * g x) = f i * g i\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{0..<n} - {i} \\<union> {i}. f x * g x) = f i * g i", "."], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{0..<n} - {i} \\<union> {i}. f x * g x) = f i * g i\n\ngoal (1 subgoal):\n 1. (\\<Sum>j = 0..<n. f j * g j) = f i * g i", "moreover"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{0..<n} - {i} \\<union> {i}. f x * g x) = f i * g i\n\ngoal (1 subgoal):\n 1. (\\<Sum>j = 0..<n. f j * g j) = f i * g i", "have \"{0 ..< n} = ({0 ..< n} - {i}) \\<union> {i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..<n} = {0..<n} - {i} \\<union> {i}", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>j<n. j \\<noteq> i \\<longrightarrow> f j = (0::'a)\n  i < n\n\ngoal (1 subgoal):\n 1. {0..<n} = {0..<n} - {i} \\<union> {i}", "by auto"], ["proof (state)\nthis:\n  {0..<n} = {0..<n} - {i} \\<union> {i}\n\ngoal (1 subgoal):\n 1. (\\<Sum>j = 0..<n. f j * g j) = f i * g i", "ultimately"], ["proof (chain)\npicking this:\n  (\\<Sum>x\\<in>{0..<n} - {i} \\<union> {i}. f x * g x) = f i * g i\n  {0..<n} = {0..<n} - {i} \\<union> {i}", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>{0..<n} - {i} \\<union> {i}. f x * g x) = f i * g i\n  {0..<n} = {0..<n} - {i} \\<union> {i}\n\ngoal (1 subgoal):\n 1. (\\<Sum>j = 0..<n. f j * g j) = f i * g i", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>j = 0..<n. f j * g j) = f i * g i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_2_elems:\n  assumes \"I = {a,b}\"\n    and \"a\\<noteq> b\"\n  shows \"(\\<Sum>a\\<in>I. f a) = f a + f b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f I = f a + f b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sum f I = f a + f b", "have \"(\\<Sum>a\\<in>I. f a) = (\\<Sum>a\\<in>(insert a {b}). f a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f I = sum f {a, b}", "using assms"], ["proof (prove)\nusing this:\n  I = {a, b}\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. sum f I = sum f {a, b}", "by simp"], ["proof (state)\nthis:\n  sum f I = sum f {a, b}\n\ngoal (1 subgoal):\n 1. sum f I = f a + f b", "also"], ["proof (state)\nthis:\n  sum f I = sum f {a, b}\n\ngoal (1 subgoal):\n 1. sum f I = f a + f b", "have \"... = f a + (\\<Sum>a\\<in>{b}. f a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f {a, b} = f a + sum f {b}", "proof (rule sum.insert)"], ["proof (state)\ngoal (2 subgoals):\n 1. finite {b}\n 2. a \\<notin> {b}", "show \"finite {b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {b}", "by simp"], ["proof (state)\nthis:\n  finite {b}\n\ngoal (1 subgoal):\n 1. a \\<notin> {b}", "show \"a\\<notin> {b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> {b}", "using assms"], ["proof (prove)\nusing this:\n  I = {a, b}\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. a \\<notin> {b}", "by simp"], ["proof (state)\nthis:\n  a \\<notin> {b}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sum f {a, b} = f a + sum f {b}\n\ngoal (1 subgoal):\n 1. sum f I = f a + f b", "also"], ["proof (state)\nthis:\n  sum f {a, b} = f a + sum f {b}\n\ngoal (1 subgoal):\n 1. sum f I = f a + f b", "have \"... = f a + f b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f a + sum f {b} = f a + f b", "by simp"], ["proof (state)\nthis:\n  f a + sum f {b} = f a + f b\n\ngoal (1 subgoal):\n 1. sum f I = f a + f b", "finally"], ["proof (chain)\npicking this:\n  sum f I = f a + f b", "show ?thesis"], ["proof (prove)\nusing this:\n  sum f I = f a + f b\n\ngoal (1 subgoal):\n 1. sum f I = f a + f b", "."], ["proof (state)\nthis:\n  sum f I = f a + f b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_4_elems:\n  shows \"(\\<Sum>i<(4::nat). f i) = f 0 + f 1 + f 2 + f 3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f {..<4} = f 0 + f 1 + f 2 + f 3", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sum f {..<4} = f 0 + f 1 + f 2 + f 3", "have \"(\\<Sum>i<(4::nat). f i) = (\\<Sum>i<(3::nat). f i)  + f 3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f {..<4} = sum f {..<3} + f 3", "by (metis Suc_numeral semiring_norm(2) semiring_norm(8) sum.lessThan_Suc)"], ["proof (state)\nthis:\n  sum f {..<4} = sum f {..<3} + f 3\n\ngoal (1 subgoal):\n 1. sum f {..<4} = f 0 + f 1 + f 2 + f 3", "moreover"], ["proof (state)\nthis:\n  sum f {..<4} = sum f {..<3} + f 3\n\ngoal (1 subgoal):\n 1. sum f {..<4} = f 0 + f 1 + f 2 + f 3", "have \"(\\<Sum>i<(3::nat). f i) = (\\<Sum>i<(2::nat). f i) + f 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f {..<3} = sum f {..<2} + f 2", "by (metis Suc_1 add_2_eq_Suc' nat_1_add_1 numeral_code(3) numerals(1) \n        one_plus_numeral_commute sum.lessThan_Suc)"], ["proof (state)\nthis:\n  sum f {..<3} = sum f {..<2} + f 2\n\ngoal (1 subgoal):\n 1. sum f {..<4} = f 0 + f 1 + f 2 + f 3", "moreover"], ["proof (state)\nthis:\n  sum f {..<3} = sum f {..<2} + f 2\n\ngoal (1 subgoal):\n 1. sum f {..<4} = f 0 + f 1 + f 2 + f 3", "have \"(\\<Sum>i<(2::nat). f i) = (\\<Sum>i<(1::nat). f i) + f 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f {..<2} = sum f {..<1} + f 1", "by (metis Suc_1 sum.lessThan_Suc)"], ["proof (state)\nthis:\n  sum f {..<2} = sum f {..<1} + f 1\n\ngoal (1 subgoal):\n 1. sum f {..<4} = f 0 + f 1 + f 2 + f 3", "ultimately"], ["proof (chain)\npicking this:\n  sum f {..<4} = sum f {..<3} + f 3\n  sum f {..<3} = sum f {..<2} + f 2\n  sum f {..<2} = sum f {..<1} + f 1", "show ?thesis"], ["proof (prove)\nusing this:\n  sum f {..<4} = sum f {..<3} + f 3\n  sum f {..<3} = sum f {..<2} + f 2\n  sum f {..<2} = sum f {..<1} + f 1\n\ngoal (1 subgoal):\n 1. sum f {..<4} = f 0 + f 1 + f 2 + f 3", "by simp"], ["proof (state)\nthis:\n  sum f {..<4} = f 0 + f 1 + f 2 + f 3\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma disj_family_sum:\n  shows \"finite I \\<Longrightarrow> disjoint_family_on A I \\<Longrightarrow> (\\<And>i. i \\<in> I \\<Longrightarrow> finite (A i))  \\<Longrightarrow> \n  (\\<Sum> i \\<in> (\\<Union>n \\<in> I. A n). f i) = (\\<Sum> n\\<in> I. (\\<Sum> i \\<in> A n. f i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; disjoint_family_on A I;\n     \\<And>i. i \\<in> I \\<Longrightarrow> finite (A i)\\<rbrakk>\n    \\<Longrightarrow> sum f (\\<Union> (A ` I)) =\n                      (\\<Sum>n\\<in>I. sum f (A n))", "proof (induct rule:finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>disjoint_family_on A {};\n     \\<And>i. i \\<in> {} \\<Longrightarrow> finite (A i)\\<rbrakk>\n    \\<Longrightarrow> sum f (\\<Union> (A ` {})) =\n                      (\\<Sum>n\\<in>{}. sum f (A n))\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>disjoint_family_on A F;\n         \\<And>i. i \\<in> F \\<Longrightarrow> finite (A i)\\<rbrakk>\n        \\<Longrightarrow> sum f (\\<Union> (A ` F)) =\n                          (\\<Sum>n\\<in>F. sum f (A n));\n        disjoint_family_on A (insert x F);\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> finite (A i)\\<rbrakk>\n       \\<Longrightarrow> sum f (\\<Union> (A ` insert x F)) =\n                         (\\<Sum>n\\<in>insert x F. sum f (A n))", "case empty"], ["proof (state)\nthis:\n  disjoint_family_on A {}\n  ?i \\<in> {} \\<Longrightarrow> finite (A ?i)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>disjoint_family_on A {};\n     \\<And>i. i \\<in> {} \\<Longrightarrow> finite (A i)\\<rbrakk>\n    \\<Longrightarrow> sum f (\\<Union> (A ` {})) =\n                      (\\<Sum>n\\<in>{}. sum f (A n))\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>disjoint_family_on A F;\n         \\<And>i. i \\<in> F \\<Longrightarrow> finite (A i)\\<rbrakk>\n        \\<Longrightarrow> sum f (\\<Union> (A ` F)) =\n                          (\\<Sum>n\\<in>F. sum f (A n));\n        disjoint_family_on A (insert x F);\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> finite (A i)\\<rbrakk>\n       \\<Longrightarrow> sum f (\\<Union> (A ` insert x F)) =\n                         (\\<Sum>n\\<in>insert x F. sum f (A n))", "then"], ["proof (chain)\npicking this:\n  disjoint_family_on A {}\n  ?i \\<in> {} \\<Longrightarrow> finite (A ?i)", "show ?case"], ["proof (prove)\nusing this:\n  disjoint_family_on A {}\n  ?i \\<in> {} \\<Longrightarrow> finite (A ?i)\n\ngoal (1 subgoal):\n 1. sum f (\\<Union> (A ` {})) = (\\<Sum>n\\<in>{}. sum f (A n))", "by simp"], ["proof (state)\nthis:\n  sum f (\\<Union> (A ` {})) = (\\<Sum>n\\<in>{}. sum f (A n))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>disjoint_family_on A F;\n         \\<And>i. i \\<in> F \\<Longrightarrow> finite (A i)\\<rbrakk>\n        \\<Longrightarrow> sum f (\\<Union> (A ` F)) =\n                          (\\<Sum>n\\<in>F. sum f (A n));\n        disjoint_family_on A (insert x F);\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> finite (A i)\\<rbrakk>\n       \\<Longrightarrow> sum f (\\<Union> (A ` insert x F)) =\n                         (\\<Sum>n\\<in>insert x F. sum f (A n))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>disjoint_family_on A F;\n         \\<And>i. i \\<in> F \\<Longrightarrow> finite (A i)\\<rbrakk>\n        \\<Longrightarrow> sum f (\\<Union> (A ` F)) =\n                          (\\<Sum>n\\<in>F. sum f (A n));\n        disjoint_family_on A (insert x F);\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> finite (A i)\\<rbrakk>\n       \\<Longrightarrow> sum f (\\<Union> (A ` insert x F)) =\n                         (\\<Sum>n\\<in>insert x F. sum f (A n))", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>disjoint_family_on A F;\n   \\<And>i. i \\<in> F \\<Longrightarrow> finite (A i)\\<rbrakk>\n  \\<Longrightarrow> sum f (\\<Union> (A ` F)) = (\\<Sum>n\\<in>F. sum f (A n))\n  disjoint_family_on A (insert x F)\n  ?i \\<in> insert x F \\<Longrightarrow> finite (A ?i)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>disjoint_family_on A F;\n         \\<And>i. i \\<in> F \\<Longrightarrow> finite (A i)\\<rbrakk>\n        \\<Longrightarrow> sum f (\\<Union> (A ` F)) =\n                          (\\<Sum>n\\<in>F. sum f (A n));\n        disjoint_family_on A (insert x F);\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> finite (A i)\\<rbrakk>\n       \\<Longrightarrow> sum f (\\<Union> (A ` insert x F)) =\n                         (\\<Sum>n\\<in>insert x F. sum f (A n))", "hence \"disjoint_family_on A F\""], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>disjoint_family_on A F;\n   \\<And>i. i \\<in> F \\<Longrightarrow> finite (A i)\\<rbrakk>\n  \\<Longrightarrow> sum f (\\<Union> (A ` F)) = (\\<Sum>n\\<in>F. sum f (A n))\n  disjoint_family_on A (insert x F)\n  ?i \\<in> insert x F \\<Longrightarrow> finite (A ?i)\n\ngoal (1 subgoal):\n 1. disjoint_family_on A F", "by (meson disjoint_family_on_mono subset_insertI)"], ["proof (state)\nthis:\n  disjoint_family_on A F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>disjoint_family_on A F;\n         \\<And>i. i \\<in> F \\<Longrightarrow> finite (A i)\\<rbrakk>\n        \\<Longrightarrow> sum f (\\<Union> (A ` F)) =\n                          (\\<Sum>n\\<in>F. sum f (A n));\n        disjoint_family_on A (insert x F);\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> finite (A i)\\<rbrakk>\n       \\<Longrightarrow> sum f (\\<Union> (A ` insert x F)) =\n                         (\\<Sum>n\\<in>insert x F. sum f (A n))", "have \"(\\<Union>n \\<in> (insert x F). A n) = A x \\<union> (\\<Union>n \\<in> F. A n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (A ` insert x F) = A x \\<union> \\<Union> (A ` F)", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>disjoint_family_on A F;\n   \\<And>i. i \\<in> F \\<Longrightarrow> finite (A i)\\<rbrakk>\n  \\<Longrightarrow> sum f (\\<Union> (A ` F)) = (\\<Sum>n\\<in>F. sum f (A n))\n  disjoint_family_on A (insert x F)\n  ?i \\<in> insert x F \\<Longrightarrow> finite (A ?i)\n\ngoal (1 subgoal):\n 1. \\<Union> (A ` insert x F) = A x \\<union> \\<Union> (A ` F)", "by simp"], ["proof (state)\nthis:\n  \\<Union> (A ` insert x F) = A x \\<union> \\<Union> (A ` F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>disjoint_family_on A F;\n         \\<And>i. i \\<in> F \\<Longrightarrow> finite (A i)\\<rbrakk>\n        \\<Longrightarrow> sum f (\\<Union> (A ` F)) =\n                          (\\<Sum>n\\<in>F. sum f (A n));\n        disjoint_family_on A (insert x F);\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> finite (A i)\\<rbrakk>\n       \\<Longrightarrow> sum f (\\<Union> (A ` insert x F)) =\n                         (\\<Sum>n\\<in>insert x F. sum f (A n))", "hence \"(\\<Sum> i \\<in> (\\<Union>n \\<in> (insert x F). A n). f i) = (\\<Sum> i \\<in> (A x \\<union> (\\<Union>n \\<in> F. A n)). f i)\""], ["proof (prove)\nusing this:\n  \\<Union> (A ` insert x F) = A x \\<union> \\<Union> (A ` F)\n\ngoal (1 subgoal):\n 1. sum f (\\<Union> (A ` insert x F)) =\n    sum f (A x \\<union> \\<Union> (A ` F))", "by simp"], ["proof (state)\nthis:\n  sum f (\\<Union> (A ` insert x F)) = sum f (A x \\<union> \\<Union> (A ` F))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>disjoint_family_on A F;\n         \\<And>i. i \\<in> F \\<Longrightarrow> finite (A i)\\<rbrakk>\n        \\<Longrightarrow> sum f (\\<Union> (A ` F)) =\n                          (\\<Sum>n\\<in>F. sum f (A n));\n        disjoint_family_on A (insert x F);\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> finite (A i)\\<rbrakk>\n       \\<Longrightarrow> sum f (\\<Union> (A ` insert x F)) =\n                         (\\<Sum>n\\<in>insert x F. sum f (A n))", "also"], ["proof (state)\nthis:\n  sum f (\\<Union> (A ` insert x F)) = sum f (A x \\<union> \\<Union> (A ` F))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>disjoint_family_on A F;\n         \\<And>i. i \\<in> F \\<Longrightarrow> finite (A i)\\<rbrakk>\n        \\<Longrightarrow> sum f (\\<Union> (A ` F)) =\n                          (\\<Sum>n\\<in>F. sum f (A n));\n        disjoint_family_on A (insert x F);\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> finite (A i)\\<rbrakk>\n       \\<Longrightarrow> sum f (\\<Union> (A ` insert x F)) =\n                         (\\<Sum>n\\<in>insert x F. sum f (A n))", "have \"... = (\\<Sum> i \\<in>  A x. f i) + (\\<Sum> i \\<in> (\\<Union>n \\<in> F. A n). f i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f (A x \\<union> \\<Union> (A ` F)) =\n    sum f (A x) + sum f (\\<Union> (A ` F))", "by (rule sum.union_disjoint, (simp add: insert disjoint_Un)+)"], ["proof (state)\nthis:\n  sum f (A x \\<union> \\<Union> (A ` F)) =\n  sum f (A x) + sum f (\\<Union> (A ` F))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>disjoint_family_on A F;\n         \\<And>i. i \\<in> F \\<Longrightarrow> finite (A i)\\<rbrakk>\n        \\<Longrightarrow> sum f (\\<Union> (A ` F)) =\n                          (\\<Sum>n\\<in>F. sum f (A n));\n        disjoint_family_on A (insert x F);\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> finite (A i)\\<rbrakk>\n       \\<Longrightarrow> sum f (\\<Union> (A ` insert x F)) =\n                         (\\<Sum>n\\<in>insert x F. sum f (A n))", "also"], ["proof (state)\nthis:\n  sum f (A x \\<union> \\<Union> (A ` F)) =\n  sum f (A x) + sum f (\\<Union> (A ` F))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>disjoint_family_on A F;\n         \\<And>i. i \\<in> F \\<Longrightarrow> finite (A i)\\<rbrakk>\n        \\<Longrightarrow> sum f (\\<Union> (A ` F)) =\n                          (\\<Sum>n\\<in>F. sum f (A n));\n        disjoint_family_on A (insert x F);\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> finite (A i)\\<rbrakk>\n       \\<Longrightarrow> sum f (\\<Union> (A ` insert x F)) =\n                         (\\<Sum>n\\<in>insert x F. sum f (A n))", "have \"... = (\\<Sum> i \\<in>  A x. f i) + (\\<Sum>n\\<in>F. sum f (A n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f (A x) + sum f (\\<Union> (A ` F)) =\n    sum f (A x) + (\\<Sum>n\\<in>F. sum f (A n))", "using  \\<open>disjoint_family_on A F\\<close>"], ["proof (prove)\nusing this:\n  disjoint_family_on A F\n\ngoal (1 subgoal):\n 1. sum f (A x) + sum f (\\<Union> (A ` F)) =\n    sum f (A x) + (\\<Sum>n\\<in>F. sum f (A n))", "by (simp add: insert)"], ["proof (state)\nthis:\n  sum f (A x) + sum f (\\<Union> (A ` F)) =\n  sum f (A x) + (\\<Sum>n\\<in>F. sum f (A n))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>disjoint_family_on A F;\n         \\<And>i. i \\<in> F \\<Longrightarrow> finite (A i)\\<rbrakk>\n        \\<Longrightarrow> sum f (\\<Union> (A ` F)) =\n                          (\\<Sum>n\\<in>F. sum f (A n));\n        disjoint_family_on A (insert x F);\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> finite (A i)\\<rbrakk>\n       \\<Longrightarrow> sum f (\\<Union> (A ` insert x F)) =\n                         (\\<Sum>n\\<in>insert x F. sum f (A n))", "also"], ["proof (state)\nthis:\n  sum f (A x) + sum f (\\<Union> (A ` F)) =\n  sum f (A x) + (\\<Sum>n\\<in>F. sum f (A n))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>disjoint_family_on A F;\n         \\<And>i. i \\<in> F \\<Longrightarrow> finite (A i)\\<rbrakk>\n        \\<Longrightarrow> sum f (\\<Union> (A ` F)) =\n                          (\\<Sum>n\\<in>F. sum f (A n));\n        disjoint_family_on A (insert x F);\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> finite (A i)\\<rbrakk>\n       \\<Longrightarrow> sum f (\\<Union> (A ` insert x F)) =\n                         (\\<Sum>n\\<in>insert x F. sum f (A n))", "have \"... = (\\<Sum>n\\<in>(insert x F). sum f (A n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f (A x) + (\\<Sum>n\\<in>F. sum f (A n)) =\n    (\\<Sum>n\\<in>insert x F. sum f (A n))", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>disjoint_family_on A F;\n   \\<And>i. i \\<in> F \\<Longrightarrow> finite (A i)\\<rbrakk>\n  \\<Longrightarrow> sum f (\\<Union> (A ` F)) = (\\<Sum>n\\<in>F. sum f (A n))\n  disjoint_family_on A (insert x F)\n  ?i \\<in> insert x F \\<Longrightarrow> finite (A ?i)\n\ngoal (1 subgoal):\n 1. sum f (A x) + (\\<Sum>n\\<in>F. sum f (A n)) =\n    (\\<Sum>n\\<in>insert x F. sum f (A n))", "by simp"], ["proof (state)\nthis:\n  sum f (A x) + (\\<Sum>n\\<in>F. sum f (A n)) =\n  (\\<Sum>n\\<in>insert x F. sum f (A n))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>disjoint_family_on A F;\n         \\<And>i. i \\<in> F \\<Longrightarrow> finite (A i)\\<rbrakk>\n        \\<Longrightarrow> sum f (\\<Union> (A ` F)) =\n                          (\\<Sum>n\\<in>F. sum f (A n));\n        disjoint_family_on A (insert x F);\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> finite (A i)\\<rbrakk>\n       \\<Longrightarrow> sum f (\\<Union> (A ` insert x F)) =\n                         (\\<Sum>n\\<in>insert x F. sum f (A n))", "finally"], ["proof (chain)\npicking this:\n  sum f (\\<Union> (A ` insert x F)) = (\\<Sum>n\\<in>insert x F. sum f (A n))", "show ?case"], ["proof (prove)\nusing this:\n  sum f (\\<Union> (A ` insert x F)) = (\\<Sum>n\\<in>insert x F. sum f (A n))\n\ngoal (1 subgoal):\n 1. sum f (\\<Union> (A ` insert x F)) =\n    (\\<Sum>n\\<in>insert x F. sum f (A n))", "."], ["proof (state)\nthis:\n  sum f (\\<Union> (A ` insert x F)) = (\\<Sum>n\\<in>insert x F. sum f (A n))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma integrable_real_mult_right:\n  fixes c::real\n  assumes \"integrable M f\"\n  shows \"integrable M (\\<lambda>w. c * f w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integrable M (\\<lambda>w. c * f w)", "proof (cases \"c = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. c = 0 \\<Longrightarrow> integrable M (\\<lambda>w. c * f w)\n 2. c \\<noteq> 0 \\<Longrightarrow> integrable M (\\<lambda>w. c * f w)", "case True"], ["proof (state)\nthis:\n  c = 0\n\ngoal (2 subgoals):\n 1. c = 0 \\<Longrightarrow> integrable M (\\<lambda>w. c * f w)\n 2. c \\<noteq> 0 \\<Longrightarrow> integrable M (\\<lambda>w. c * f w)", "thus ?thesis"], ["proof (prove)\nusing this:\n  c = 0\n\ngoal (1 subgoal):\n 1. integrable M (\\<lambda>w. c * f w)", "by simp"], ["proof (state)\nthis:\n  integrable M (\\<lambda>w. c * f w)\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> integrable M (\\<lambda>w. c * f w)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> integrable M (\\<lambda>w. c * f w)", "case False"], ["proof (state)\nthis:\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow> integrable M (\\<lambda>w. c * f w)", "thus ?thesis"], ["proof (prove)\nusing this:\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. integrable M (\\<lambda>w. c * f w)", "using integrable_mult_right[of c] assms"], ["proof (prove)\nusing this:\n  c \\<noteq> 0\n  (c \\<noteq> 0 \\<Longrightarrow> integrable ?M ?f) \\<Longrightarrow>\n  integrable ?M (\\<lambda>x. c * ?f x)\n  integrable M f\n\ngoal (1 subgoal):\n 1. integrable M (\\<lambda>w. c * f w)", "by simp"], ["proof (state)\nthis:\n  integrable M (\\<lambda>w. c * f w)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Unifying notions between Isabelle Marries Dirac and QHLProver\\<close>"], ["", "lemma mult_conj_cmod_square:\n  fixes z::complex\n  shows \"z * conjugate z = (cmod z)\\<^sup>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z * conjugate z = complex_of_real ((cmod z)\\<^sup>2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. z * conjugate z = complex_of_real ((cmod z)\\<^sup>2)", "have \"z * conjugate z = (Re z)\\<^sup>2 + (Im z)\\<^sup>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z * conjugate z = complex_of_real ((Re z)\\<^sup>2 + (Im z)\\<^sup>2)", "using  complex_mult_cnj"], ["proof (prove)\nusing this:\n  ?z * cnj ?z = complex_of_real ((Re ?z)\\<^sup>2 + (Im ?z)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. z * conjugate z = complex_of_real ((Re z)\\<^sup>2 + (Im z)\\<^sup>2)", "by auto"], ["proof (state)\nthis:\n  z * conjugate z = complex_of_real ((Re z)\\<^sup>2 + (Im z)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. z * conjugate z = complex_of_real ((cmod z)\\<^sup>2)", "also"], ["proof (state)\nthis:\n  z * conjugate z = complex_of_real ((Re z)\\<^sup>2 + (Im z)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. z * conjugate z = complex_of_real ((cmod z)\\<^sup>2)", "have \"... = (cmod z)\\<^sup>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. complex_of_real ((Re z)\\<^sup>2 + (Im z)\\<^sup>2) =\n    complex_of_real ((cmod z)\\<^sup>2)", "unfolding cmod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. complex_of_real ((Re z)\\<^sup>2 + (Im z)\\<^sup>2) =\n    complex_of_real ((sqrt ((Re z)\\<^sup>2 + (Im z)\\<^sup>2))\\<^sup>2)", "by simp"], ["proof (state)\nthis:\n  complex_of_real ((Re z)\\<^sup>2 + (Im z)\\<^sup>2) =\n  complex_of_real ((cmod z)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. z * conjugate z = complex_of_real ((cmod z)\\<^sup>2)", "finally"], ["proof (chain)\npicking this:\n  z * conjugate z = complex_of_real ((cmod z)\\<^sup>2)", "show ?thesis"], ["proof (prove)\nusing this:\n  z * conjugate z = complex_of_real ((cmod z)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. z * conjugate z = complex_of_real ((cmod z)\\<^sup>2)", "."], ["proof (state)\nthis:\n  z * conjugate z = complex_of_real ((cmod z)\\<^sup>2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma vec_norm_sq_cpx_vec_length_sq:\n  shows \"(vec_norm v)\\<^sup>2 = (cpx_vec_length v)\\<^sup>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (vec_norm v)\\<^sup>2 = complex_of_real (\\<parallel>v\\<parallel>\\<^sup>2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (vec_norm v)\\<^sup>2 = complex_of_real (\\<parallel>v\\<parallel>\\<^sup>2)", "have \"(vec_norm v)\\<^sup>2 = inner_prod v v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (vec_norm v)\\<^sup>2 = Complex_Matrix.inner_prod v v", "unfolding vec_norm_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (csqrt (Complex_Matrix.inner_prod v v))\\<^sup>2 =\n    Complex_Matrix.inner_prod v v", "using power2_csqrt"], ["proof (prove)\nusing this:\n  (csqrt ?z)\\<^sup>2 = ?z\n\ngoal (1 subgoal):\n 1. (csqrt (Complex_Matrix.inner_prod v v))\\<^sup>2 =\n    Complex_Matrix.inner_prod v v", "by blast"], ["proof (state)\nthis:\n  (vec_norm v)\\<^sup>2 = Complex_Matrix.inner_prod v v\n\ngoal (1 subgoal):\n 1. (vec_norm v)\\<^sup>2 = complex_of_real (\\<parallel>v\\<parallel>\\<^sup>2)", "also"], ["proof (state)\nthis:\n  (vec_norm v)\\<^sup>2 = Complex_Matrix.inner_prod v v\n\ngoal (1 subgoal):\n 1. (vec_norm v)\\<^sup>2 = complex_of_real (\\<parallel>v\\<parallel>\\<^sup>2)", "have \"... = (\\<Sum>i<dim_vec v. (cmod (Matrix.vec_index v i))\\<^sup>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod v v =\n    complex_of_real (\\<Sum>i<dim_vec v. (cmod (v $ i))\\<^sup>2)", "unfolding Matrix.scalar_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<dim_vec (conjugate v). v $ i * conjugate v $ i) =\n    complex_of_real (\\<Sum>i<dim_vec v. (cmod (v $ i))\\<^sup>2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<dim_vec (conjugate v). v $ i * conjugate v $ i) =\n    complex_of_real (\\<Sum>i<dim_vec v. (cmod (v $ i))\\<^sup>2)", "have \"\\<And>i. i < dim_vec v \\<Longrightarrow> Matrix.vec_index v  i * conjugate (Matrix.vec_index v i) = \n      (cmod (Matrix.vec_index v i))\\<^sup>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dim_vec v \\<Longrightarrow>\n       v $ i * conjugate (v $ i) = complex_of_real ((cmod (v $ i))\\<^sup>2)", "using mult_conj_cmod_square"], ["proof (prove)\nusing this:\n  ?z * conjugate ?z = complex_of_real ((cmod ?z)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dim_vec v \\<Longrightarrow>\n       v $ i * conjugate (v $ i) = complex_of_real ((cmod (v $ i))\\<^sup>2)", "by simp"], ["proof (state)\nthis:\n  ?i < dim_vec v \\<Longrightarrow>\n  v $ ?i * conjugate (v $ ?i) = complex_of_real ((cmod (v $ ?i))\\<^sup>2)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<dim_vec (conjugate v). v $ i * conjugate v $ i) =\n    complex_of_real (\\<Sum>i<dim_vec v. (cmod (v $ i))\\<^sup>2)", "thus \"(\\<Sum>i = 0..<dim_vec (conjugate v). Matrix.vec_index v i * \n      Matrix.vec_index (conjugate v) i) =  (\\<Sum>i<dim_vec v. (cmod (Matrix.vec_index v i))\\<^sup>2)\""], ["proof (prove)\nusing this:\n  ?i < dim_vec v \\<Longrightarrow>\n  v $ ?i * conjugate (v $ ?i) = complex_of_real ((cmod (v $ ?i))\\<^sup>2)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<dim_vec (conjugate v). v $ i * conjugate v $ i) =\n    complex_of_real (\\<Sum>i<dim_vec v. (cmod (v $ i))\\<^sup>2)", "by (simp add: lessThan_atLeast0)"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<dim_vec (conjugate v). v $ i * conjugate v $ i) =\n  complex_of_real (\\<Sum>i<dim_vec v. (cmod (v $ i))\\<^sup>2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Complex_Matrix.inner_prod v v =\n  complex_of_real (\\<Sum>i<dim_vec v. (cmod (v $ i))\\<^sup>2)\n\ngoal (1 subgoal):\n 1. (vec_norm v)\\<^sup>2 = complex_of_real (\\<parallel>v\\<parallel>\\<^sup>2)", "finally"], ["proof (chain)\npicking this:\n  (vec_norm v)\\<^sup>2 =\n  complex_of_real (\\<Sum>i<dim_vec v. (cmod (v $ i))\\<^sup>2)", "show \"(vec_norm v)\\<^sup>2 = (cpx_vec_length v)\\<^sup>2\""], ["proof (prove)\nusing this:\n  (vec_norm v)\\<^sup>2 =\n  complex_of_real (\\<Sum>i<dim_vec v. (cmod (v $ i))\\<^sup>2)\n\ngoal (1 subgoal):\n 1. (vec_norm v)\\<^sup>2 = complex_of_real (\\<parallel>v\\<parallel>\\<^sup>2)", "unfolding cpx_vec_length_def"], ["proof (prove)\nusing this:\n  (vec_norm v)\\<^sup>2 =\n  complex_of_real (\\<Sum>i<dim_vec v. (cmod (v $ i))\\<^sup>2)\n\ngoal (1 subgoal):\n 1. (vec_norm v)\\<^sup>2 =\n    complex_of_real\n     ((sqrt (\\<Sum>i<dim_vec v. (cmod (v $ i))\\<^sup>2))\\<^sup>2)", "by (simp add: sum_nonneg)"], ["proof (state)\nthis:\n  (vec_norm v)\\<^sup>2 = complex_of_real (\\<parallel>v\\<parallel>\\<^sup>2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma vec_norm_eq_cpx_vec_length:\n  shows \"vec_norm v = cpx_vec_length v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_norm v = complex_of_real \\<parallel>v\\<parallel>", "using vec_norm_sq_cpx_vec_length_sq"], ["proof (prove)\nusing this:\n  (vec_norm ?v)\\<^sup>2 = complex_of_real (\\<parallel>?v\\<parallel>\\<^sup>2)\n\ngoal (1 subgoal):\n 1. vec_norm v = complex_of_real \\<parallel>v\\<parallel>", "by (metis cpx_vec_length_inner_prod inner_prod_csqrt power2_csqrt vec_norm_def)"], ["", "lemma cpx_vec_length_square:\n  shows \"\\<parallel>v\\<parallel>\\<^sup>2 = (\\<Sum>i = 0..<dim_vec v. (cmod (Matrix.vec_index v i))\\<^sup>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<parallel>v\\<parallel>\\<^sup>2 =\n    (\\<Sum>i = 0..<dim_vec v. (cmod (v $ i))\\<^sup>2)", "unfolding cpx_vec_length_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (sqrt (\\<Sum>i<dim_vec v. (cmod (v $ i))\\<^sup>2))\\<^sup>2 =\n    (\\<Sum>i = 0..<dim_vec v. (cmod (v $ i))\\<^sup>2)", "by (simp add: lessThan_atLeast0 sum_nonneg)"], ["", "lemma state_qbit_norm_sq:\n  assumes \"v\\<in> state_qbit n\"\n  shows \"(cpx_vec_length v)\\<^sup>2 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<parallel>v\\<parallel>\\<^sup>2 = 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<parallel>v\\<parallel>\\<^sup>2 = 1", "have \"cpx_vec_length v = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<parallel>v\\<parallel> = 1", "using assms"], ["proof (prove)\nusing this:\n  v \\<in> state_qbit n\n\ngoal (1 subgoal):\n 1. \\<parallel>v\\<parallel> = 1", "unfolding state_qbit_def"], ["proof (prove)\nusing this:\n  v \\<in> {v |v. dim_vec v = 2 ^ n \\<and> \\<parallel>v\\<parallel> = 1}\n\ngoal (1 subgoal):\n 1. \\<parallel>v\\<parallel> = 1", "by simp"], ["proof (state)\nthis:\n  \\<parallel>v\\<parallel> = 1\n\ngoal (1 subgoal):\n 1. \\<parallel>v\\<parallel>\\<^sup>2 = 1", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<parallel>v\\<parallel> = 1\n\ngoal (1 subgoal):\n 1. \\<parallel>v\\<parallel>\\<^sup>2 = 1", "by simp"], ["proof (state)\nthis:\n  \\<parallel>v\\<parallel>\\<^sup>2 = 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dagger_adjoint:\nshows \"dagger M = Complex_Matrix.adjoint M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M\\<^sup>\\<dagger> = Complex_Matrix.adjoint M", "unfolding dagger_def Complex_Matrix.adjoint_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.mat (dim_col M) (dim_row M)\n     (\\<lambda>(i, j). cnj (M $$ (j, i))) =\n    Matrix.mat (dim_col M) (dim_row M)\n     (\\<lambda>(i, j). conjugate (M $$ (j, i)))", "by (simp add: cong_mat)"], ["", "subsection \\<open>Types to sets lemmata transfers\\<close>"], ["", "context ab_group_add_on_with begin"], ["", "context includes lifting_syntax assumes ltd: \"\\<exists>(Rep::'s \\<Rightarrow> 'a) (Abs::'a \\<Rightarrow> 's). \n  type_definition Rep Abs S\" begin"], ["", "interpretation local_typedef_ab_group_add_on_with pls z mns um S \"TYPE('s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local_typedef_ab_group_add_on_with TYPE('s) pls z mns um S", "by unfold_locales fact"], ["", "lemmas lt_sum_union_disjoint = sum.union_disjoint\n  [var_simplified explicit_ab_group_add,\n    unoverload_type 'c,\n    OF type.comm_monoid_add_axioms,\n    untransferred]"], ["", "lemmas lt_disj_family_sum = disj_family_sum\n  [var_simplified explicit_ab_group_add,\n    unoverload_type 'd,\nOF type.comm_monoid_add_axioms,\n    untransferred]"], ["", "lemmas lt_sum_reindex_cong = sum.reindex_cong\n  [var_simplified explicit_ab_group_add,\n    unoverload_type 'd,\nOF type.comm_monoid_add_axioms,\n    untransferred]"], ["", "end"], ["", "lemmas sum_with_union_disjoint =\n  lt_sum_union_disjoint\n    [cancel_type_definition,\n    OF carrier_ne,\n    simplified pred_fun_def, simplified]"], ["", "lemmas disj_family_sum_with =\n  lt_disj_family_sum\n    [cancel_type_definition,\n    OF carrier_ne,\n    simplified pred_fun_def, simplified]"], ["", "lemmas sum_with_reindex_cong = \n  lt_sum_reindex_cong\n    [cancel_type_definition,\n    OF carrier_ne,\n    simplified pred_fun_def, simplified]"], ["", "end"], ["", "lemma (in comm_monoid_add_on_with) sum_with_cong':\n  shows \"finite I \\<Longrightarrow> (\\<And>i. i\\<in> I \\<Longrightarrow> A i = B i) \\<Longrightarrow> (\\<And>i. i\\<in> I \\<Longrightarrow> A i \\<in> S) \\<Longrightarrow> \n    (\\<And>i. i\\<in> I \\<Longrightarrow> B i \\<in> S) \\<Longrightarrow> sum_with pls z A I = sum_with pls z B I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; \\<And>i. i \\<in> I \\<Longrightarrow> A i = B i;\n     \\<And>i. i \\<in> I \\<Longrightarrow> A i \\<in> S;\n     \\<And>i. i \\<in> I \\<Longrightarrow> B i \\<in> S\\<rbrakk>\n    \\<Longrightarrow> sum_with pls z A I = sum_with pls z B I", "proof (induct rule: finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i. i \\<in> {} \\<Longrightarrow> A i = B i;\n     \\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> S;\n     \\<And>i. i \\<in> {} \\<Longrightarrow> B i \\<in> S\\<rbrakk>\n    \\<Longrightarrow> sum_with pls z A {} = sum_with pls z B {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i = B i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> S;\n         \\<And>i. i \\<in> F \\<Longrightarrow> B i \\<in> S\\<rbrakk>\n        \\<Longrightarrow> sum_with pls z A F = sum_with pls z B F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i = B i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> S;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> B i \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sum_with pls z A (insert x F) =\n                         sum_with pls z B (insert x F)", "case empty"], ["proof (state)\nthis:\n  ?i \\<in> {} \\<Longrightarrow> A ?i = B ?i\n  ?i \\<in> {} \\<Longrightarrow> A ?i \\<in> S\n  ?i \\<in> {} \\<Longrightarrow> B ?i \\<in> S\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i. i \\<in> {} \\<Longrightarrow> A i = B i;\n     \\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> S;\n     \\<And>i. i \\<in> {} \\<Longrightarrow> B i \\<in> S\\<rbrakk>\n    \\<Longrightarrow> sum_with pls z A {} = sum_with pls z B {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i = B i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> S;\n         \\<And>i. i \\<in> F \\<Longrightarrow> B i \\<in> S\\<rbrakk>\n        \\<Longrightarrow> sum_with pls z A F = sum_with pls z B F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i = B i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> S;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> B i \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sum_with pls z A (insert x F) =\n                         sum_with pls z B (insert x F)", "then"], ["proof (chain)\npicking this:\n  ?i \\<in> {} \\<Longrightarrow> A ?i = B ?i\n  ?i \\<in> {} \\<Longrightarrow> A ?i \\<in> S\n  ?i \\<in> {} \\<Longrightarrow> B ?i \\<in> S", "show ?case"], ["proof (prove)\nusing this:\n  ?i \\<in> {} \\<Longrightarrow> A ?i = B ?i\n  ?i \\<in> {} \\<Longrightarrow> A ?i \\<in> S\n  ?i \\<in> {} \\<Longrightarrow> B ?i \\<in> S\n\ngoal (1 subgoal):\n 1. sum_with pls z A {} = sum_with pls z B {}", "by simp"], ["proof (state)\nthis:\n  sum_with pls z A {} = sum_with pls z B {}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i = B i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> S;\n         \\<And>i. i \\<in> F \\<Longrightarrow> B i \\<in> S\\<rbrakk>\n        \\<Longrightarrow> sum_with pls z A F = sum_with pls z B F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i = B i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> S;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> B i \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sum_with pls z A (insert x F) =\n                         sum_with pls z B (insert x F)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i = B i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> S;\n         \\<And>i. i \\<in> F \\<Longrightarrow> B i \\<in> S\\<rbrakk>\n        \\<Longrightarrow> sum_with pls z A F = sum_with pls z B F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i = B i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> S;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> B i \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sum_with pls z A (insert x F) =\n                         sum_with pls z B (insert x F)", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i = B i;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> S;\n   \\<And>i. i \\<in> F \\<Longrightarrow> B i \\<in> S\\<rbrakk>\n  \\<Longrightarrow> sum_with pls z A F = sum_with pls z B F\n  ?i \\<in> insert x F \\<Longrightarrow> A ?i = B ?i\n  ?i \\<in> insert x F \\<Longrightarrow> A ?i \\<in> S\n  ?i \\<in> insert x F \\<Longrightarrow> B ?i \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i = B i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> S;\n         \\<And>i. i \\<in> F \\<Longrightarrow> B i \\<in> S\\<rbrakk>\n        \\<Longrightarrow> sum_with pls z A F = sum_with pls z B F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i = B i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> S;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> B i \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sum_with pls z A (insert x F) =\n                         sum_with pls z B (insert x F)", "have \"sum_with pls z A (insert x F) = pls (A x) (sum_with pls z A F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_with pls z A (insert x F) = pls (A x) (sum_with pls z A F)", "using insert \n      sum_with_insert[of A]"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i = B i;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> S;\n   \\<And>i. i \\<in> F \\<Longrightarrow> B i \\<in> S\\<rbrakk>\n  \\<Longrightarrow> sum_with pls z A F = sum_with pls z B F\n  ?i \\<in> insert x F \\<Longrightarrow> A ?i = B ?i\n  ?i \\<in> insert x F \\<Longrightarrow> A ?i \\<in> S\n  ?i \\<in> insert x F \\<Longrightarrow> B ?i \\<in> S\n  \\<lbrakk>A ?x \\<in> S; A ` ?A \\<subseteq> S; finite ?A;\n   ?x \\<notin> ?A\\<rbrakk>\n  \\<Longrightarrow> sum_with pls z A (insert ?x ?A) =\n                    pls (A ?x) (sum_with pls z A ?A)\n\ngoal (1 subgoal):\n 1. sum_with pls z A (insert x F) = pls (A x) (sum_with pls z A F)", "by (simp add:  image_subset_iff)"], ["proof (state)\nthis:\n  sum_with pls z A (insert x F) = pls (A x) (sum_with pls z A F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i = B i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> S;\n         \\<And>i. i \\<in> F \\<Longrightarrow> B i \\<in> S\\<rbrakk>\n        \\<Longrightarrow> sum_with pls z A F = sum_with pls z B F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i = B i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> S;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> B i \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sum_with pls z A (insert x F) =\n                         sum_with pls z B (insert x F)", "also"], ["proof (state)\nthis:\n  sum_with pls z A (insert x F) = pls (A x) (sum_with pls z A F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i = B i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> S;\n         \\<And>i. i \\<in> F \\<Longrightarrow> B i \\<in> S\\<rbrakk>\n        \\<Longrightarrow> sum_with pls z A F = sum_with pls z B F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i = B i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> S;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> B i \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sum_with pls z A (insert x F) =\n                         sum_with pls z B (insert x F)", "have \"... = pls (B x)  (sum_with pls z B F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pls (A x) (sum_with pls z A F) = pls (B x) (sum_with pls z B F)", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i = B i;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> S;\n   \\<And>i. i \\<in> F \\<Longrightarrow> B i \\<in> S\\<rbrakk>\n  \\<Longrightarrow> sum_with pls z A F = sum_with pls z B F\n  ?i \\<in> insert x F \\<Longrightarrow> A ?i = B ?i\n  ?i \\<in> insert x F \\<Longrightarrow> A ?i \\<in> S\n  ?i \\<in> insert x F \\<Longrightarrow> B ?i \\<in> S\n\ngoal (1 subgoal):\n 1. pls (A x) (sum_with pls z A F) = pls (B x) (sum_with pls z B F)", "by simp"], ["proof (state)\nthis:\n  pls (A x) (sum_with pls z A F) = pls (B x) (sum_with pls z B F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i = B i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> S;\n         \\<And>i. i \\<in> F \\<Longrightarrow> B i \\<in> S\\<rbrakk>\n        \\<Longrightarrow> sum_with pls z A F = sum_with pls z B F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i = B i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> S;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> B i \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sum_with pls z A (insert x F) =\n                         sum_with pls z B (insert x F)", "also"], ["proof (state)\nthis:\n  pls (A x) (sum_with pls z A F) = pls (B x) (sum_with pls z B F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i = B i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> S;\n         \\<And>i. i \\<in> F \\<Longrightarrow> B i \\<in> S\\<rbrakk>\n        \\<Longrightarrow> sum_with pls z A F = sum_with pls z B F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i = B i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> S;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> B i \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sum_with pls z A (insert x F) =\n                         sum_with pls z B (insert x F)", "have \"... = sum_with pls z B (insert x F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pls (B x) (sum_with pls z B F) = sum_with pls z B (insert x F)", "using insert sum_with_insert[of B]"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i = B i;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> S;\n   \\<And>i. i \\<in> F \\<Longrightarrow> B i \\<in> S\\<rbrakk>\n  \\<Longrightarrow> sum_with pls z A F = sum_with pls z B F\n  ?i \\<in> insert x F \\<Longrightarrow> A ?i = B ?i\n  ?i \\<in> insert x F \\<Longrightarrow> A ?i \\<in> S\n  ?i \\<in> insert x F \\<Longrightarrow> B ?i \\<in> S\n  \\<lbrakk>B ?x \\<in> S; B ` ?A \\<subseteq> S; finite ?A;\n   ?x \\<notin> ?A\\<rbrakk>\n  \\<Longrightarrow> sum_with pls z B (insert ?x ?A) =\n                    pls (B ?x) (sum_with pls z B ?A)\n\ngoal (1 subgoal):\n 1. pls (B x) (sum_with pls z B F) = sum_with pls z B (insert x F)", "by (simp add:  image_subset_iff)"], ["proof (state)\nthis:\n  pls (B x) (sum_with pls z B F) = sum_with pls z B (insert x F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i = B i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> S;\n         \\<And>i. i \\<in> F \\<Longrightarrow> B i \\<in> S\\<rbrakk>\n        \\<Longrightarrow> sum_with pls z A F = sum_with pls z B F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i = B i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> S;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> B i \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sum_with pls z A (insert x F) =\n                         sum_with pls z B (insert x F)", "finally"], ["proof (chain)\npicking this:\n  sum_with pls z A (insert x F) = sum_with pls z B (insert x F)", "show ?case"], ["proof (prove)\nusing this:\n  sum_with pls z A (insert x F) = sum_with pls z B (insert x F)\n\ngoal (1 subgoal):\n 1. sum_with pls z A (insert x F) = sum_with pls z B (insert x F)", "."], ["proof (state)\nthis:\n  sum_with pls z A (insert x F) = sum_with pls z B (insert x F)\n\ngoal:\nNo subgoals!", "qed"], ["", "section \\<open>Linear algebra complements\\<close>"], ["", "subsection \\<open>Additional properties of matrices\\<close>"], ["", "lemma smult_one:\n  shows \"(1::'a::monoid_mult) \\<cdot>\\<^sub>m A = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) \\<cdot>\\<^sub>m A = A", "by (simp add:eq_matI)"], ["", "lemma times_diag_index:\n  fixes A::\"'a::comm_ring Matrix.mat\"\n  assumes \"A \\<in> carrier_mat n n\"\nand \"B\\<in> carrier_mat n n\"\nand \"diagonal_mat B\"\nand \"j < n\"\nand \"i < n\"\nshows \"Matrix.vec_index (Matrix.row (A*B) j) i = diag_mat B ! i *A $$ (j, i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row (A * B) j $ i = diag_mat B ! i * A $$ (j, i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Matrix.row (A * B) j $ i = diag_mat B ! i * A $$ (j, i)", "have \"Matrix.vec_index (Matrix.row (A*B) j) i = (A*B) $$ (j,i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row (A * B) j $ i = (A * B) $$ (j, i)", "using Matrix.row_def[of \"A*B\" ] assms"], ["proof (prove)\nusing this:\n  Matrix.row (A * B) ?i =\n  Matrix.vec (dim_col (A * B)) (\\<lambda>j. (A * B) $$ (?i, j))\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  diagonal_mat B\n  j < n\n  i < n\n\ngoal (1 subgoal):\n 1. Matrix.row (A * B) j $ i = (A * B) $$ (j, i)", "by simp"], ["proof (state)\nthis:\n  Matrix.row (A * B) j $ i = (A * B) $$ (j, i)\n\ngoal (1 subgoal):\n 1. Matrix.row (A * B) j $ i = diag_mat B ! i * A $$ (j, i)", "also"], ["proof (state)\nthis:\n  Matrix.row (A * B) j $ i = (A * B) $$ (j, i)\n\ngoal (1 subgoal):\n 1. Matrix.row (A * B) j $ i = diag_mat B ! i * A $$ (j, i)", "have \"... = Matrix.scalar_prod (Matrix.row A j) (Matrix.col B i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A * B) $$ (j, i) = Matrix.row A j \\<bullet> Matrix.col B i", "using assms \n      times_mat_def[of A]"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  diagonal_mat B\n  j < n\n  i < n\n  A * ?B \\<equiv>\n  Matrix.mat (dim_row A) (dim_col ?B)\n   (\\<lambda>(i, j). Matrix.row A i \\<bullet> Matrix.col ?B j)\n\ngoal (1 subgoal):\n 1. (A * B) $$ (j, i) = Matrix.row A j \\<bullet> Matrix.col B i", "by simp"], ["proof (state)\nthis:\n  (A * B) $$ (j, i) = Matrix.row A j \\<bullet> Matrix.col B i\n\ngoal (1 subgoal):\n 1. Matrix.row (A * B) j $ i = diag_mat B ! i * A $$ (j, i)", "also"], ["proof (state)\nthis:\n  (A * B) $$ (j, i) = Matrix.row A j \\<bullet> Matrix.col B i\n\ngoal (1 subgoal):\n 1. Matrix.row (A * B) j $ i = diag_mat B ! i * A $$ (j, i)", "have \"... = Matrix.scalar_prod (Matrix.col B i) (Matrix.row A j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row A j \\<bullet> Matrix.col B i =\n    Matrix.col B i \\<bullet> Matrix.row A j", "using comm_scalar_prod[of \"Matrix.row A j\" n] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>Matrix.row A j \\<in> carrier_vec n;\n   ?v\\<^sub>2 \\<in> carrier_vec n\\<rbrakk>\n  \\<Longrightarrow> Matrix.row A j \\<bullet> ?v\\<^sub>2 =\n                    ?v\\<^sub>2 \\<bullet> Matrix.row A j\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  diagonal_mat B\n  j < n\n  i < n\n\ngoal (1 subgoal):\n 1. Matrix.row A j \\<bullet> Matrix.col B i =\n    Matrix.col B i \\<bullet> Matrix.row A j", "by auto"], ["proof (state)\nthis:\n  Matrix.row A j \\<bullet> Matrix.col B i =\n  Matrix.col B i \\<bullet> Matrix.row A j\n\ngoal (1 subgoal):\n 1. Matrix.row (A * B) j $ i = diag_mat B ! i * A $$ (j, i)", "also"], ["proof (state)\nthis:\n  Matrix.row A j \\<bullet> Matrix.col B i =\n  Matrix.col B i \\<bullet> Matrix.row A j\n\ngoal (1 subgoal):\n 1. Matrix.row (A * B) j $ i = diag_mat B ! i * A $$ (j, i)", "have \"... = (Matrix.vec_index (Matrix.col B i) i) * (Matrix.vec_index  (Matrix.row A j) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.col B i \\<bullet> Matrix.row A j =\n    Matrix.col B i $ i * Matrix.row A j $ i", "unfolding Matrix.scalar_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>ia = 0..<dim_vec (Matrix.row A j).\n        Matrix.col B i $ ia * Matrix.row A j $ ia) =\n    Matrix.col B i $ i * Matrix.row A j $ i", "proof (rule sum_but_one)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>ia<dim_vec (Matrix.row A j).\n       ia \\<noteq> i \\<longrightarrow> Matrix.col B i $ ia = (0::'a)\n 2. i < dim_vec (Matrix.row A j)", "show \"i < dim_vec (Matrix.row A j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < dim_vec (Matrix.row A j)", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  diagonal_mat B\n  j < n\n  i < n\n\ngoal (1 subgoal):\n 1. i < dim_vec (Matrix.row A j)", "by simp"], ["proof (state)\nthis:\n  i < dim_vec (Matrix.row A j)\n\ngoal (1 subgoal):\n 1. \\<forall>ia<dim_vec (Matrix.row A j).\n       ia \\<noteq> i \\<longrightarrow> Matrix.col B i $ ia = (0::'a)", "show \"\\<forall>ia<dim_vec (Matrix.row A j). ia \\<noteq> i \\<longrightarrow> Matrix.vec_index (Matrix.col B i) ia = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ia<dim_vec (Matrix.row A j).\n       ia \\<noteq> i \\<longrightarrow> Matrix.col B i $ ia = (0::'a)", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  diagonal_mat B\n  j < n\n  i < n\n\ngoal (1 subgoal):\n 1. \\<forall>ia<dim_vec (Matrix.row A j).\n       ia \\<noteq> i \\<longrightarrow> Matrix.col B i $ ia = (0::'a)", "by (metis carrier_matD(1) carrier_matD(2) diagonal_mat_def index_col index_row(2))"], ["proof (state)\nthis:\n  \\<forall>ia<dim_vec (Matrix.row A j).\n     ia \\<noteq> i \\<longrightarrow> Matrix.col B i $ ia = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Matrix.col B i \\<bullet> Matrix.row A j =\n  Matrix.col B i $ i * Matrix.row A j $ i\n\ngoal (1 subgoal):\n 1. Matrix.row (A * B) j $ i = diag_mat B ! i * A $$ (j, i)", "also"], ["proof (state)\nthis:\n  Matrix.col B i \\<bullet> Matrix.row A j =\n  Matrix.col B i $ i * Matrix.row A j $ i\n\ngoal (1 subgoal):\n 1. Matrix.row (A * B) j $ i = diag_mat B ! i * A $$ (j, i)", "have \"... = B $$(i,i) * (Matrix.vec_index  (Matrix.row A j) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.col B i $ i * Matrix.row A j $ i =\n    B $$ (i, i) * Matrix.row A j $ i", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  diagonal_mat B\n  j < n\n  i < n\n\ngoal (1 subgoal):\n 1. Matrix.col B i $ i * Matrix.row A j $ i =\n    B $$ (i, i) * Matrix.row A j $ i", "by auto"], ["proof (state)\nthis:\n  Matrix.col B i $ i * Matrix.row A j $ i = B $$ (i, i) * Matrix.row A j $ i\n\ngoal (1 subgoal):\n 1. Matrix.row (A * B) j $ i = diag_mat B ! i * A $$ (j, i)", "also"], ["proof (state)\nthis:\n  Matrix.col B i $ i * Matrix.row A j $ i = B $$ (i, i) * Matrix.row A j $ i\n\ngoal (1 subgoal):\n 1. Matrix.row (A * B) j $ i = diag_mat B ! i * A $$ (j, i)", "have \"... = diag_mat B ! i * (Matrix.vec_index  (Matrix.row A j) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B $$ (i, i) * Matrix.row A j $ i = diag_mat B ! i * Matrix.row A j $ i", "unfolding diag_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. B $$ (i, i) * Matrix.row A j $ i =\n    map (\\<lambda>i. B $$ (i, i)) [0..<dim_row B] ! i * Matrix.row A j $ i", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  diagonal_mat B\n  j < n\n  i < n\n\ngoal (1 subgoal):\n 1. B $$ (i, i) * Matrix.row A j $ i =\n    map (\\<lambda>i. B $$ (i, i)) [0..<dim_row B] ! i * Matrix.row A j $ i", "by simp"], ["proof (state)\nthis:\n  B $$ (i, i) * Matrix.row A j $ i = diag_mat B ! i * Matrix.row A j $ i\n\ngoal (1 subgoal):\n 1. Matrix.row (A * B) j $ i = diag_mat B ! i * A $$ (j, i)", "also"], ["proof (state)\nthis:\n  B $$ (i, i) * Matrix.row A j $ i = diag_mat B ! i * Matrix.row A j $ i\n\ngoal (1 subgoal):\n 1. Matrix.row (A * B) j $ i = diag_mat B ! i * A $$ (j, i)", "have \"... = diag_mat B ! i * A $$ (j, i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_mat B ! i * Matrix.row A j $ i = diag_mat B ! i * A $$ (j, i)", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  diagonal_mat B\n  j < n\n  i < n\n\ngoal (1 subgoal):\n 1. diag_mat B ! i * Matrix.row A j $ i = diag_mat B ! i * A $$ (j, i)", "by simp"], ["proof (state)\nthis:\n  diag_mat B ! i * Matrix.row A j $ i = diag_mat B ! i * A $$ (j, i)\n\ngoal (1 subgoal):\n 1. Matrix.row (A * B) j $ i = diag_mat B ! i * A $$ (j, i)", "finally"], ["proof (chain)\npicking this:\n  Matrix.row (A * B) j $ i = diag_mat B ! i * A $$ (j, i)", "show ?thesis"], ["proof (prove)\nusing this:\n  Matrix.row (A * B) j $ i = diag_mat B ! i * A $$ (j, i)\n\ngoal (1 subgoal):\n 1. Matrix.row (A * B) j $ i = diag_mat B ! i * A $$ (j, i)", "."], ["proof (state)\nthis:\n  Matrix.row (A * B) j $ i = diag_mat B ! i * A $$ (j, i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inner_prod_adjoint_comp:\n  assumes \"(U::'a::conjugatable_field Matrix.mat) \\<in> carrier_mat n n\"\nand \"(V::'a::conjugatable_field Matrix.mat) \\<in> carrier_mat n n\"\nand \"i < n\"\nand \"j < n\"\nshows \"Complex_Matrix.inner_prod  (Matrix.col V i) (Matrix.col U j) = \n  ((Complex_Matrix.adjoint V) * U) $$ (i, j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod (Matrix.col V i) (Matrix.col U j) =\n    (Complex_Matrix.adjoint V * U) $$ (i, j)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod (Matrix.col V i) (Matrix.col U j) =\n    (Complex_Matrix.adjoint V * U) $$ (i, j)", "have \"Complex_Matrix.inner_prod (Matrix.col V i) (Matrix.col U j) = \n    Matrix.scalar_prod (Matrix.col U j) (Matrix.row (Complex_Matrix.adjoint V) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod (Matrix.col V i) (Matrix.col U j) =\n    Matrix.col U j \\<bullet> Matrix.row (Complex_Matrix.adjoint V) i", "using adjoint_row[of i V] assms"], ["proof (prove)\nusing this:\n  i < dim_col V \\<Longrightarrow>\n  Matrix.row (Complex_Matrix.adjoint V) i = conjugate (Matrix.col V i)\n  U \\<in> carrier_mat n n\n  V \\<in> carrier_mat n n\n  i < n\n  j < n\n\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod (Matrix.col V i) (Matrix.col U j) =\n    Matrix.col U j \\<bullet> Matrix.row (Complex_Matrix.adjoint V) i", "by simp"], ["proof (state)\nthis:\n  Complex_Matrix.inner_prod (Matrix.col V i) (Matrix.col U j) =\n  Matrix.col U j \\<bullet> Matrix.row (Complex_Matrix.adjoint V) i\n\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod (Matrix.col V i) (Matrix.col U j) =\n    (Complex_Matrix.adjoint V * U) $$ (i, j)", "also"], ["proof (state)\nthis:\n  Complex_Matrix.inner_prod (Matrix.col V i) (Matrix.col U j) =\n  Matrix.col U j \\<bullet> Matrix.row (Complex_Matrix.adjoint V) i\n\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod (Matrix.col V i) (Matrix.col U j) =\n    (Complex_Matrix.adjoint V * U) $$ (i, j)", "have \"... = Matrix.scalar_prod (Matrix.row (Complex_Matrix.adjoint V) i) (Matrix.col U j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.col U j \\<bullet> Matrix.row (Complex_Matrix.adjoint V) i =\n    Matrix.row (Complex_Matrix.adjoint V) i \\<bullet> Matrix.col U j", "by (metis adjoint_row assms(1) assms(2) assms(3) carrier_matD(1) carrier_matD(2) Matrix.col_dim \n        conjugate_vec_sprod_comm)"], ["proof (state)\nthis:\n  Matrix.col U j \\<bullet> Matrix.row (Complex_Matrix.adjoint V) i =\n  Matrix.row (Complex_Matrix.adjoint V) i \\<bullet> Matrix.col U j\n\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod (Matrix.col V i) (Matrix.col U j) =\n    (Complex_Matrix.adjoint V * U) $$ (i, j)", "also"], ["proof (state)\nthis:\n  Matrix.col U j \\<bullet> Matrix.row (Complex_Matrix.adjoint V) i =\n  Matrix.row (Complex_Matrix.adjoint V) i \\<bullet> Matrix.col U j\n\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod (Matrix.col V i) (Matrix.col U j) =\n    (Complex_Matrix.adjoint V * U) $$ (i, j)", "have \"... = ((Complex_Matrix.adjoint V) * U) $$ (i, j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row (Complex_Matrix.adjoint V) i \\<bullet> Matrix.col U j =\n    (Complex_Matrix.adjoint V * U) $$ (i, j)", "using assms"], ["proof (prove)\nusing this:\n  U \\<in> carrier_mat n n\n  V \\<in> carrier_mat n n\n  i < n\n  j < n\n\ngoal (1 subgoal):\n 1. Matrix.row (Complex_Matrix.adjoint V) i \\<bullet> Matrix.col U j =\n    (Complex_Matrix.adjoint V * U) $$ (i, j)", "by (simp add:times_mat_def)"], ["proof (state)\nthis:\n  Matrix.row (Complex_Matrix.adjoint V) i \\<bullet> Matrix.col U j =\n  (Complex_Matrix.adjoint V * U) $$ (i, j)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod (Matrix.col V i) (Matrix.col U j) =\n    (Complex_Matrix.adjoint V * U) $$ (i, j)", "finally"], ["proof (chain)\npicking this:\n  Complex_Matrix.inner_prod (Matrix.col V i) (Matrix.col U j) =\n  (Complex_Matrix.adjoint V * U) $$ (i, j)", "show ?thesis"], ["proof (prove)\nusing this:\n  Complex_Matrix.inner_prod (Matrix.col V i) (Matrix.col U j) =\n  (Complex_Matrix.adjoint V * U) $$ (i, j)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod (Matrix.col V i) (Matrix.col U j) =\n    (Complex_Matrix.adjoint V * U) $$ (i, j)", "."], ["proof (state)\nthis:\n  Complex_Matrix.inner_prod (Matrix.col V i) (Matrix.col U j) =\n  (Complex_Matrix.adjoint V * U) $$ (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mat_unit_vec_col:\n  assumes \"(A::'a::conjugatable_field Matrix.mat) \\<in> carrier_mat n n\"\nand \"i < n\"\nshows \"A *\\<^sub>v (unit_vec n i) = Matrix.col A i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A *\\<^sub>v unit_vec n i = Matrix.col A i", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia.\n       ia < dim_vec (Matrix.col A i) \\<Longrightarrow>\n       (A *\\<^sub>v unit_vec n i) $ ia = Matrix.col A i $ ia\n 2. dim_vec (A *\\<^sub>v unit_vec n i) = dim_vec (Matrix.col A i)", "show \"dim_vec (A *\\<^sub>v unit_vec n i) = dim_vec (Matrix.col A i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (A *\\<^sub>v unit_vec n i) = dim_vec (Matrix.col A i)", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  i < n\n\ngoal (1 subgoal):\n 1. dim_vec (A *\\<^sub>v unit_vec n i) = dim_vec (Matrix.col A i)", "by simp"], ["proof (state)\nthis:\n  dim_vec (A *\\<^sub>v unit_vec n i) = dim_vec (Matrix.col A i)\n\ngoal (1 subgoal):\n 1. \\<And>ia.\n       ia < dim_vec (Matrix.col A i) \\<Longrightarrow>\n       (A *\\<^sub>v unit_vec n i) $ ia = Matrix.col A i $ ia", "show \"\\<And>j. j < dim_vec (Matrix.col A i) \\<Longrightarrow> Matrix.vec_index (A *\\<^sub>v unit_vec n i)  j = \n    Matrix.vec_index (Matrix.col A i)  j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < dim_vec (Matrix.col A i) \\<Longrightarrow>\n       (A *\\<^sub>v unit_vec n i) $ j = Matrix.col A i $ j", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < dim_vec (Matrix.col A i) \\<Longrightarrow>\n       (A *\\<^sub>v unit_vec n i) $ j = Matrix.col A i $ j", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < dim_vec (Matrix.col A i) \\<Longrightarrow>\n       (A *\\<^sub>v unit_vec n i) $ j = Matrix.col A i $ j", "assume \"j < dim_vec (Matrix.col A i)\""], ["proof (state)\nthis:\n  j < dim_vec (Matrix.col A i)\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < dim_vec (Matrix.col A i) \\<Longrightarrow>\n       (A *\\<^sub>v unit_vec n i) $ j = Matrix.col A i $ j", "hence \"Matrix.vec_index (A *\\<^sub>v unit_vec n i)  j = \n      Matrix.scalar_prod (Matrix.row A j) (unit_vec n i)\""], ["proof (prove)\nusing this:\n  j < dim_vec (Matrix.col A i)\n\ngoal (1 subgoal):\n 1. (A *\\<^sub>v unit_vec n i) $ j = Matrix.row A j \\<bullet> unit_vec n i", "unfolding mult_mat_vec_def"], ["proof (prove)\nusing this:\n  j < dim_vec (Matrix.col A i)\n\ngoal (1 subgoal):\n 1. Matrix.vec (dim_row A)\n     (\\<lambda>ia. Matrix.row A ia \\<bullet> unit_vec n i) $\n    j =\n    Matrix.row A j \\<bullet> unit_vec n i", "by simp"], ["proof (state)\nthis:\n  (A *\\<^sub>v unit_vec n i) $ j = Matrix.row A j \\<bullet> unit_vec n i\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < dim_vec (Matrix.col A i) \\<Longrightarrow>\n       (A *\\<^sub>v unit_vec n i) $ j = Matrix.col A i $ j", "also"], ["proof (state)\nthis:\n  (A *\\<^sub>v unit_vec n i) $ j = Matrix.row A j \\<bullet> unit_vec n i\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < dim_vec (Matrix.col A i) \\<Longrightarrow>\n       (A *\\<^sub>v unit_vec n i) $ j = Matrix.col A i $ j", "have \"... = Matrix.scalar_prod  (unit_vec n i) (Matrix.row A j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row A j \\<bullet> unit_vec n i =\n    unit_vec n i \\<bullet> Matrix.row A j", "using comm_scalar_prod\n        assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v\\<^sub>1 \\<in> carrier_vec ?n;\n   ?v\\<^sub>2 \\<in> carrier_vec ?n\\<rbrakk>\n  \\<Longrightarrow> ?v\\<^sub>1 \\<bullet> ?v\\<^sub>2 =\n                    ?v\\<^sub>2 \\<bullet> ?v\\<^sub>1\n  A \\<in> carrier_mat n n\n  i < n\n\ngoal (1 subgoal):\n 1. Matrix.row A j \\<bullet> unit_vec n i =\n    unit_vec n i \\<bullet> Matrix.row A j", "by auto"], ["proof (state)\nthis:\n  Matrix.row A j \\<bullet> unit_vec n i =\n  unit_vec n i \\<bullet> Matrix.row A j\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < dim_vec (Matrix.col A i) \\<Longrightarrow>\n       (A *\\<^sub>v unit_vec n i) $ j = Matrix.col A i $ j", "also"], ["proof (state)\nthis:\n  Matrix.row A j \\<bullet> unit_vec n i =\n  unit_vec n i \\<bullet> Matrix.row A j\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < dim_vec (Matrix.col A i) \\<Longrightarrow>\n       (A *\\<^sub>v unit_vec n i) $ j = Matrix.col A i $ j", "have \"... = (Matrix.vec_index (unit_vec n i) i) * (Matrix.vec_index (Matrix.row A j) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unit_vec n i \\<bullet> Matrix.row A j =\n    unit_vec n i $ i * Matrix.row A j $ i", "unfolding Matrix.scalar_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>ia = 0..<dim_vec (Matrix.row A j).\n        unit_vec n i $ ia * Matrix.row A j $ ia) =\n    unit_vec n i $ i * Matrix.row A j $ i", "proof (rule sum_but_one)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>ia<dim_vec (Matrix.row A j).\n       ia \\<noteq> i \\<longrightarrow> unit_vec n i $ ia = (0::'a)\n 2. i < dim_vec (Matrix.row A j)", "show \"i < dim_vec (Matrix.row A j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < dim_vec (Matrix.row A j)", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  i < n\n\ngoal (1 subgoal):\n 1. i < dim_vec (Matrix.row A j)", "by auto"], ["proof (state)\nthis:\n  i < dim_vec (Matrix.row A j)\n\ngoal (1 subgoal):\n 1. \\<forall>ia<dim_vec (Matrix.row A j).\n       ia \\<noteq> i \\<longrightarrow> unit_vec n i $ ia = (0::'a)", "show \"\\<forall>ia<dim_vec (Matrix.row A j). ia \\<noteq> i \\<longrightarrow> Matrix.vec_index (unit_vec n i) ia = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ia<dim_vec (Matrix.row A j).\n       ia \\<noteq> i \\<longrightarrow> unit_vec n i $ ia = (0::'b)", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  i < n\n\ngoal (1 subgoal):\n 1. \\<forall>ia<dim_vec (Matrix.row A j).\n       ia \\<noteq> i \\<longrightarrow> unit_vec n i $ ia = (0::'b)", "unfolding unit_vec_def"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  i < n\n\ngoal (1 subgoal):\n 1. \\<forall>ia<dim_vec (Matrix.row A j).\n       ia \\<noteq> i \\<longrightarrow>\n       Matrix.vec n (\\<lambda>j. if j = i then 1::'b else (0::'b)) $ ia =\n       (0::'b)", "by auto"], ["proof (state)\nthis:\n  \\<forall>ia<dim_vec (Matrix.row A j).\n     ia \\<noteq> i \\<longrightarrow> unit_vec n i $ ia = (0::?'b1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  unit_vec n i \\<bullet> Matrix.row A j =\n  unit_vec n i $ i * Matrix.row A j $ i\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < dim_vec (Matrix.col A i) \\<Longrightarrow>\n       (A *\\<^sub>v unit_vec n i) $ j = Matrix.col A i $ j", "also"], ["proof (state)\nthis:\n  unit_vec n i \\<bullet> Matrix.row A j =\n  unit_vec n i $ i * Matrix.row A j $ i\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < dim_vec (Matrix.col A i) \\<Longrightarrow>\n       (A *\\<^sub>v unit_vec n i) $ j = Matrix.col A i $ j", "have \"... = (Matrix.vec_index (Matrix.row A j) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unit_vec n i $ i * Matrix.row A j $ i = Matrix.row A j $ i", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  i < n\n\ngoal (1 subgoal):\n 1. unit_vec n i $ i * Matrix.row A j $ i = Matrix.row A j $ i", "by simp"], ["proof (state)\nthis:\n  unit_vec n i $ i * Matrix.row A j $ i = Matrix.row A j $ i\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < dim_vec (Matrix.col A i) \\<Longrightarrow>\n       (A *\\<^sub>v unit_vec n i) $ j = Matrix.col A i $ j", "also"], ["proof (state)\nthis:\n  unit_vec n i $ i * Matrix.row A j $ i = Matrix.row A j $ i\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < dim_vec (Matrix.col A i) \\<Longrightarrow>\n       (A *\\<^sub>v unit_vec n i) $ j = Matrix.col A i $ j", "have \"... = A $$ (j, i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row A j $ i = A $$ (j, i)", "using assms \\<open>j < dim_vec (Matrix.col A i)\\<close>"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  i < n\n  j < dim_vec (Matrix.col A i)\n\ngoal (1 subgoal):\n 1. Matrix.row A j $ i = A $$ (j, i)", "by simp"], ["proof (state)\nthis:\n  Matrix.row A j $ i = A $$ (j, i)\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < dim_vec (Matrix.col A i) \\<Longrightarrow>\n       (A *\\<^sub>v unit_vec n i) $ j = Matrix.col A i $ j", "also"], ["proof (state)\nthis:\n  Matrix.row A j $ i = A $$ (j, i)\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < dim_vec (Matrix.col A i) \\<Longrightarrow>\n       (A *\\<^sub>v unit_vec n i) $ j = Matrix.col A i $ j", "have \"... = Matrix.vec_index (Matrix.col A i)  j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $$ (j, i) = Matrix.col A i $ j", "using assms \\<open>j < dim_vec (Matrix.col A i)\\<close>"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  i < n\n  j < dim_vec (Matrix.col A i)\n\ngoal (1 subgoal):\n 1. A $$ (j, i) = Matrix.col A i $ j", "by simp"], ["proof (state)\nthis:\n  A $$ (j, i) = Matrix.col A i $ j\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j < dim_vec (Matrix.col A i) \\<Longrightarrow>\n       (A *\\<^sub>v unit_vec n i) $ j = Matrix.col A i $ j", "finally"], ["proof (chain)\npicking this:\n  (A *\\<^sub>v unit_vec n i) $ j = Matrix.col A i $ j", "show \"Matrix.vec_index (A *\\<^sub>v unit_vec n i)  j = \n      Matrix.vec_index (Matrix.col A i)  j\""], ["proof (prove)\nusing this:\n  (A *\\<^sub>v unit_vec n i) $ j = Matrix.col A i $ j\n\ngoal (1 subgoal):\n 1. (A *\\<^sub>v unit_vec n i) $ j = Matrix.col A i $ j", "."], ["proof (state)\nthis:\n  (A *\\<^sub>v unit_vec n i) $ j = Matrix.col A i $ j\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?j < dim_vec (Matrix.col A i) \\<Longrightarrow>\n  (A *\\<^sub>v unit_vec n i) $ ?j = Matrix.col A i $ ?j\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mat_prod_unit_vec_cong:\n  assumes \"(A::'a::conjugatable_field Matrix.mat) \\<in> carrier_mat n n\"\nand \"B\\<in> carrier_mat n n\"\nand \"\\<And>i. i < n \\<Longrightarrow> A *\\<^sub>v (unit_vec n i) = B *\\<^sub>v (unit_vec n i)\"\nshows \"A = B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = B", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row B; j < dim_col B\\<rbrakk>\n       \\<Longrightarrow> A $$ (i, j) = B $$ (i, j)\n 2. dim_row A = dim_row B\n 3. dim_col A = dim_col B", "show \"dim_row A = dim_row B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row A = dim_row B", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  ?i < n \\<Longrightarrow>\n  A *\\<^sub>v unit_vec n ?i = B *\\<^sub>v unit_vec n ?i\n\ngoal (1 subgoal):\n 1. dim_row A = dim_row B", "by simp"], ["proof (state)\nthis:\n  dim_row A = dim_row B\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row B; j < dim_col B\\<rbrakk>\n       \\<Longrightarrow> A $$ (i, j) = B $$ (i, j)\n 2. dim_col A = dim_col B", "show \"dim_col A = dim_col B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col A = dim_col B", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  ?i < n \\<Longrightarrow>\n  A *\\<^sub>v unit_vec n ?i = B *\\<^sub>v unit_vec n ?i\n\ngoal (1 subgoal):\n 1. dim_col A = dim_col B", "by simp"], ["proof (state)\nthis:\n  dim_col A = dim_col B\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row B; j < dim_col B\\<rbrakk>\n       \\<Longrightarrow> A $$ (i, j) = B $$ (i, j)", "show \"\\<And>i j. i < dim_row B \\<Longrightarrow> j < dim_col B \\<Longrightarrow> A $$ (i, j) = B $$ (i, j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row B; j < dim_col B\\<rbrakk>\n       \\<Longrightarrow> A $$ (i, j) = B $$ (i, j)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row B; j < dim_col B\\<rbrakk>\n       \\<Longrightarrow> A $$ (i, j) = B $$ (i, j)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row B; j < dim_col B\\<rbrakk>\n       \\<Longrightarrow> A $$ (i, j) = B $$ (i, j)", "assume ij: \"i < dim_row B\" \"j < dim_col B\""], ["proof (state)\nthis:\n  i < dim_row B\n  j < dim_col B\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row B; j < dim_col B\\<rbrakk>\n       \\<Longrightarrow> A $$ (i, j) = B $$ (i, j)", "hence \"A $$ (i,j) = Matrix.vec_index (Matrix.col A j) i\""], ["proof (prove)\nusing this:\n  i < dim_row B\n  j < dim_col B\n\ngoal (1 subgoal):\n 1. A $$ (i, j) = Matrix.col A j $ i", "using assms"], ["proof (prove)\nusing this:\n  i < dim_row B\n  j < dim_col B\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  ?i < n \\<Longrightarrow>\n  A *\\<^sub>v unit_vec n ?i = B *\\<^sub>v unit_vec n ?i\n\ngoal (1 subgoal):\n 1. A $$ (i, j) = Matrix.col A j $ i", "by simp"], ["proof (state)\nthis:\n  A $$ (i, j) = Matrix.col A j $ i\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row B; j < dim_col B\\<rbrakk>\n       \\<Longrightarrow> A $$ (i, j) = B $$ (i, j)", "also"], ["proof (state)\nthis:\n  A $$ (i, j) = Matrix.col A j $ i\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row B; j < dim_col B\\<rbrakk>\n       \\<Longrightarrow> A $$ (i, j) = B $$ (i, j)", "have \"... = Matrix.vec_index (A *\\<^sub>v (unit_vec n j)) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.col A j $ i = (A *\\<^sub>v unit_vec n j) $ i", "using mat_unit_vec_col[of A] ij assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>A \\<in> carrier_mat ?n ?n; ?i < ?n\\<rbrakk>\n  \\<Longrightarrow> A *\\<^sub>v unit_vec ?n ?i = Matrix.col A ?i\n  i < dim_row B\n  j < dim_col B\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  ?i < n \\<Longrightarrow>\n  A *\\<^sub>v unit_vec n ?i = B *\\<^sub>v unit_vec n ?i\n\ngoal (1 subgoal):\n 1. Matrix.col A j $ i = (A *\\<^sub>v unit_vec n j) $ i", "by simp"], ["proof (state)\nthis:\n  Matrix.col A j $ i = (A *\\<^sub>v unit_vec n j) $ i\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row B; j < dim_col B\\<rbrakk>\n       \\<Longrightarrow> A $$ (i, j) = B $$ (i, j)", "also"], ["proof (state)\nthis:\n  Matrix.col A j $ i = (A *\\<^sub>v unit_vec n j) $ i\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row B; j < dim_col B\\<rbrakk>\n       \\<Longrightarrow> A $$ (i, j) = B $$ (i, j)", "have \"... = Matrix.vec_index (B *\\<^sub>v (unit_vec n j)) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A *\\<^sub>v unit_vec n j) $ i = (B *\\<^sub>v unit_vec n j) $ i", "using assms ij"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  ?i < n \\<Longrightarrow>\n  A *\\<^sub>v unit_vec n ?i = B *\\<^sub>v unit_vec n ?i\n  i < dim_row B\n  j < dim_col B\n\ngoal (1 subgoal):\n 1. (A *\\<^sub>v unit_vec n j) $ i = (B *\\<^sub>v unit_vec n j) $ i", "by simp"], ["proof (state)\nthis:\n  (A *\\<^sub>v unit_vec n j) $ i = (B *\\<^sub>v unit_vec n j) $ i\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row B; j < dim_col B\\<rbrakk>\n       \\<Longrightarrow> A $$ (i, j) = B $$ (i, j)", "also"], ["proof (state)\nthis:\n  (A *\\<^sub>v unit_vec n j) $ i = (B *\\<^sub>v unit_vec n j) $ i\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row B; j < dim_col B\\<rbrakk>\n       \\<Longrightarrow> A $$ (i, j) = B $$ (i, j)", "have \"... = Matrix.vec_index (Matrix.col B j) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (B *\\<^sub>v unit_vec n j) $ i = Matrix.col B j $ i", "using mat_unit_vec_col ij assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?A \\<in> carrier_mat ?n ?n; ?i < ?n\\<rbrakk>\n  \\<Longrightarrow> ?A *\\<^sub>v unit_vec ?n ?i = Matrix.col ?A ?i\n  i < dim_row B\n  j < dim_col B\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  ?i < n \\<Longrightarrow>\n  A *\\<^sub>v unit_vec n ?i = B *\\<^sub>v unit_vec n ?i\n\ngoal (1 subgoal):\n 1. (B *\\<^sub>v unit_vec n j) $ i = Matrix.col B j $ i", "by simp"], ["proof (state)\nthis:\n  (B *\\<^sub>v unit_vec n j) $ i = Matrix.col B j $ i\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row B; j < dim_col B\\<rbrakk>\n       \\<Longrightarrow> A $$ (i, j) = B $$ (i, j)", "also"], ["proof (state)\nthis:\n  (B *\\<^sub>v unit_vec n j) $ i = Matrix.col B j $ i\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row B; j < dim_col B\\<rbrakk>\n       \\<Longrightarrow> A $$ (i, j) = B $$ (i, j)", "have \"... = B $$ (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.col B j $ i = B $$ (i, j)", "using assms ij"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  ?i < n \\<Longrightarrow>\n  A *\\<^sub>v unit_vec n ?i = B *\\<^sub>v unit_vec n ?i\n  i < dim_row B\n  j < dim_col B\n\ngoal (1 subgoal):\n 1. Matrix.col B j $ i = B $$ (i, j)", "by simp"], ["proof (state)\nthis:\n  Matrix.col B j $ i = B $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row B; j < dim_col B\\<rbrakk>\n       \\<Longrightarrow> A $$ (i, j) = B $$ (i, j)", "finally"], ["proof (chain)\npicking this:\n  A $$ (i, j) = B $$ (i, j)", "show \"A $$ (i, j) = B $$ (i, j)\""], ["proof (prove)\nusing this:\n  A $$ (i, j) = B $$ (i, j)\n\ngoal (1 subgoal):\n 1. A $$ (i, j) = B $$ (i, j)", "."], ["proof (state)\nthis:\n  A $$ (i, j) = B $$ (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?i < dim_row B; ?j < dim_col B\\<rbrakk>\n  \\<Longrightarrow> A $$ (?i, ?j) = B $$ (?i, ?j)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma smult_smult_times:\n  fixes a::\"'a::semigroup_mult\"\n  shows \"a\\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A) = (a * k)\\<cdot>\\<^sub>m A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A) = a * k \\<cdot>\\<^sub>m A", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (a * k \\<cdot>\\<^sub>m A);\n        j < dim_col (a * k \\<cdot>\\<^sub>m A)\\<rbrakk>\n       \\<Longrightarrow> (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) $$\n                         (i, j) =\n                         (a * k \\<cdot>\\<^sub>m A) $$ (i, j)\n 2. dim_row (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) =\n    dim_row (a * k \\<cdot>\\<^sub>m A)\n 3. dim_col (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) =\n    dim_col (a * k \\<cdot>\\<^sub>m A)", "show r:\"dim_row (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) = dim_row (a * k \\<cdot>\\<^sub>m A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) =\n    dim_row (a * k \\<cdot>\\<^sub>m A)", "by simp"], ["proof (state)\nthis:\n  dim_row (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) =\n  dim_row (a * k \\<cdot>\\<^sub>m A)\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (a * k \\<cdot>\\<^sub>m A);\n        j < dim_col (a * k \\<cdot>\\<^sub>m A)\\<rbrakk>\n       \\<Longrightarrow> (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) $$\n                         (i, j) =\n                         (a * k \\<cdot>\\<^sub>m A) $$ (i, j)\n 2. dim_col (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) =\n    dim_col (a * k \\<cdot>\\<^sub>m A)", "show c:\"dim_col (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) = dim_col (a * k \\<cdot>\\<^sub>m A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) =\n    dim_col (a * k \\<cdot>\\<^sub>m A)", "by simp"], ["proof (state)\nthis:\n  dim_col (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) =\n  dim_col (a * k \\<cdot>\\<^sub>m A)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (a * k \\<cdot>\\<^sub>m A);\n        j < dim_col (a * k \\<cdot>\\<^sub>m A)\\<rbrakk>\n       \\<Longrightarrow> (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) $$\n                         (i, j) =\n                         (a * k \\<cdot>\\<^sub>m A) $$ (i, j)", "show \"\\<And>i j. i < dim_row (a * k \\<cdot>\\<^sub>m A) \\<Longrightarrow>\n           j < dim_col (a * k \\<cdot>\\<^sub>m A) \\<Longrightarrow> (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) $$ (i, j) = (a * k \\<cdot>\\<^sub>m A) $$ (i, j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (a * k \\<cdot>\\<^sub>m A);\n        j < dim_col (a * k \\<cdot>\\<^sub>m A)\\<rbrakk>\n       \\<Longrightarrow> (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) $$\n                         (i, j) =\n                         (a * k \\<cdot>\\<^sub>m A) $$ (i, j)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (a * k \\<cdot>\\<^sub>m A);\n        j < dim_col (a * k \\<cdot>\\<^sub>m A)\\<rbrakk>\n       \\<Longrightarrow> (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) $$\n                         (i, j) =\n                         (a * k \\<cdot>\\<^sub>m A) $$ (i, j)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (a * k \\<cdot>\\<^sub>m A);\n        j < dim_col (a * k \\<cdot>\\<^sub>m A)\\<rbrakk>\n       \\<Longrightarrow> (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) $$\n                         (i, j) =\n                         (a * k \\<cdot>\\<^sub>m A) $$ (i, j)", "assume \"i < dim_row (a * k \\<cdot>\\<^sub>m A)\" and \"j < dim_col (a * k \\<cdot>\\<^sub>m A)\""], ["proof (state)\nthis:\n  i < dim_row (a * k \\<cdot>\\<^sub>m A)\n  j < dim_col (a * k \\<cdot>\\<^sub>m A)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (a * k \\<cdot>\\<^sub>m A);\n        j < dim_col (a * k \\<cdot>\\<^sub>m A)\\<rbrakk>\n       \\<Longrightarrow> (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) $$\n                         (i, j) =\n                         (a * k \\<cdot>\\<^sub>m A) $$ (i, j)", "note ij = this"], ["proof (state)\nthis:\n  i < dim_row (a * k \\<cdot>\\<^sub>m A)\n  j < dim_col (a * k \\<cdot>\\<^sub>m A)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (a * k \\<cdot>\\<^sub>m A);\n        j < dim_col (a * k \\<cdot>\\<^sub>m A)\\<rbrakk>\n       \\<Longrightarrow> (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) $$\n                         (i, j) =\n                         (a * k \\<cdot>\\<^sub>m A) $$ (i, j)", "hence \"(a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) $$ (i, j) = a * (k \\<cdot>\\<^sub>m A) $$ (i, j)\""], ["proof (prove)\nusing this:\n  i < dim_row (a * k \\<cdot>\\<^sub>m A)\n  j < dim_col (a * k \\<cdot>\\<^sub>m A)\n\ngoal (1 subgoal):\n 1. (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) $$ (i, j) =\n    a * (k \\<cdot>\\<^sub>m A) $$ (i, j)", "by simp"], ["proof (state)\nthis:\n  (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) $$ (i, j) =\n  a * (k \\<cdot>\\<^sub>m A) $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (a * k \\<cdot>\\<^sub>m A);\n        j < dim_col (a * k \\<cdot>\\<^sub>m A)\\<rbrakk>\n       \\<Longrightarrow> (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) $$\n                         (i, j) =\n                         (a * k \\<cdot>\\<^sub>m A) $$ (i, j)", "also"], ["proof (state)\nthis:\n  (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) $$ (i, j) =\n  a * (k \\<cdot>\\<^sub>m A) $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (a * k \\<cdot>\\<^sub>m A);\n        j < dim_col (a * k \\<cdot>\\<^sub>m A)\\<rbrakk>\n       \\<Longrightarrow> (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) $$\n                         (i, j) =\n                         (a * k \\<cdot>\\<^sub>m A) $$ (i, j)", "have \"... = a * (k * A $$ (i,j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * (k \\<cdot>\\<^sub>m A) $$ (i, j) = a * (k * A $$ (i, j))", "using ij"], ["proof (prove)\nusing this:\n  i < dim_row (a * k \\<cdot>\\<^sub>m A)\n  j < dim_col (a * k \\<cdot>\\<^sub>m A)\n\ngoal (1 subgoal):\n 1. a * (k \\<cdot>\\<^sub>m A) $$ (i, j) = a * (k * A $$ (i, j))", "by simp"], ["proof (state)\nthis:\n  a * (k \\<cdot>\\<^sub>m A) $$ (i, j) = a * (k * A $$ (i, j))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (a * k \\<cdot>\\<^sub>m A);\n        j < dim_col (a * k \\<cdot>\\<^sub>m A)\\<rbrakk>\n       \\<Longrightarrow> (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) $$\n                         (i, j) =\n                         (a * k \\<cdot>\\<^sub>m A) $$ (i, j)", "also"], ["proof (state)\nthis:\n  a * (k \\<cdot>\\<^sub>m A) $$ (i, j) = a * (k * A $$ (i, j))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (a * k \\<cdot>\\<^sub>m A);\n        j < dim_col (a * k \\<cdot>\\<^sub>m A)\\<rbrakk>\n       \\<Longrightarrow> (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) $$\n                         (i, j) =\n                         (a * k \\<cdot>\\<^sub>m A) $$ (i, j)", "have \"... = (a * k) * A $$ (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * (k * A $$ (i, j)) = a * k * A $$ (i, j)", "by (simp add: semigroup_mult_class.mult.assoc)"], ["proof (state)\nthis:\n  a * (k * A $$ (i, j)) = a * k * A $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (a * k \\<cdot>\\<^sub>m A);\n        j < dim_col (a * k \\<cdot>\\<^sub>m A)\\<rbrakk>\n       \\<Longrightarrow> (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) $$\n                         (i, j) =\n                         (a * k \\<cdot>\\<^sub>m A) $$ (i, j)", "also"], ["proof (state)\nthis:\n  a * (k * A $$ (i, j)) = a * k * A $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (a * k \\<cdot>\\<^sub>m A);\n        j < dim_col (a * k \\<cdot>\\<^sub>m A)\\<rbrakk>\n       \\<Longrightarrow> (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) $$\n                         (i, j) =\n                         (a * k \\<cdot>\\<^sub>m A) $$ (i, j)", "have \"... = (a * k \\<cdot>\\<^sub>m A) $$ (i, j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * k * A $$ (i, j) = (a * k \\<cdot>\\<^sub>m A) $$ (i, j)", "using r c ij"], ["proof (prove)\nusing this:\n  dim_row (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) =\n  dim_row (a * k \\<cdot>\\<^sub>m A)\n  dim_col (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) =\n  dim_col (a * k \\<cdot>\\<^sub>m A)\n  i < dim_row (a * k \\<cdot>\\<^sub>m A)\n  j < dim_col (a * k \\<cdot>\\<^sub>m A)\n\ngoal (1 subgoal):\n 1. a * k * A $$ (i, j) = (a * k \\<cdot>\\<^sub>m A) $$ (i, j)", "by simp"], ["proof (state)\nthis:\n  a * k * A $$ (i, j) = (a * k \\<cdot>\\<^sub>m A) $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (a * k \\<cdot>\\<^sub>m A);\n        j < dim_col (a * k \\<cdot>\\<^sub>m A)\\<rbrakk>\n       \\<Longrightarrow> (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) $$\n                         (i, j) =\n                         (a * k \\<cdot>\\<^sub>m A) $$ (i, j)", "finally"], ["proof (chain)\npicking this:\n  (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) $$ (i, j) =\n  (a * k \\<cdot>\\<^sub>m A) $$ (i, j)", "show \"(a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) $$ (i, j) = (a * k \\<cdot>\\<^sub>m A) $$ (i, j)\""], ["proof (prove)\nusing this:\n  (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) $$ (i, j) =\n  (a * k \\<cdot>\\<^sub>m A) $$ (i, j)\n\ngoal (1 subgoal):\n 1. (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) $$ (i, j) =\n    (a * k \\<cdot>\\<^sub>m A) $$ (i, j)", "."], ["proof (state)\nthis:\n  (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) $$ (i, j) =\n  (a * k \\<cdot>\\<^sub>m A) $$ (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?i < dim_row (a * k \\<cdot>\\<^sub>m A);\n   ?j < dim_col (a * k \\<cdot>\\<^sub>m A)\\<rbrakk>\n  \\<Longrightarrow> (a \\<cdot>\\<^sub>m (k \\<cdot>\\<^sub>m A)) $$ (?i, ?j) =\n                    (a * k \\<cdot>\\<^sub>m A) $$ (?i, ?j)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mat_minus_minus:\n  fixes A :: \"'a :: ab_group_add Matrix.mat\"\n  assumes \"A \\<in> carrier_mat n m\"\n  and \"B\\<in> carrier_mat n m\"\n  and \"C\\<in> carrier_mat n m\"\nshows \"A - (B - C) = A - B + C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A - (B - C) = A - B + C", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A - B + C); j < dim_col (A - B + C)\\<rbrakk>\n       \\<Longrightarrow> (A - (B - C)) $$ (i, j) = (A - B + C) $$ (i, j)\n 2. dim_row (A - (B - C)) = dim_row (A - B + C)\n 3. dim_col (A - (B - C)) = dim_col (A - B + C)", "show \"dim_row (A - (B - C)) = dim_row (A - B + C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (A - (B - C)) = dim_row (A - B + C)", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n m\n  B \\<in> carrier_mat n m\n  C \\<in> carrier_mat n m\n\ngoal (1 subgoal):\n 1. dim_row (A - (B - C)) = dim_row (A - B + C)", "by simp"], ["proof (state)\nthis:\n  dim_row (A - (B - C)) = dim_row (A - B + C)\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A - B + C); j < dim_col (A - B + C)\\<rbrakk>\n       \\<Longrightarrow> (A - (B - C)) $$ (i, j) = (A - B + C) $$ (i, j)\n 2. dim_col (A - (B - C)) = dim_col (A - B + C)", "show \"dim_col (A - (B - C)) = dim_col (A - B + C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (A - (B - C)) = dim_col (A - B + C)", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n m\n  B \\<in> carrier_mat n m\n  C \\<in> carrier_mat n m\n\ngoal (1 subgoal):\n 1. dim_col (A - (B - C)) = dim_col (A - B + C)", "by simp"], ["proof (state)\nthis:\n  dim_col (A - (B - C)) = dim_col (A - B + C)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A - B + C); j < dim_col (A - B + C)\\<rbrakk>\n       \\<Longrightarrow> (A - (B - C)) $$ (i, j) = (A - B + C) $$ (i, j)", "show \"\\<And>i j. i < dim_row (A - B + C) \\<Longrightarrow> j < dim_col (A - B + C) \\<Longrightarrow> \n    (A - (B - C)) $$ (i, j) = (A - B + C) $$ (i, j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A - B + C); j < dim_col (A - B + C)\\<rbrakk>\n       \\<Longrightarrow> (A - (B - C)) $$ (i, j) = (A - B + C) $$ (i, j)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A - B + C); j < dim_col (A - B + C)\\<rbrakk>\n       \\<Longrightarrow> (A - (B - C)) $$ (i, j) = (A - B + C) $$ (i, j)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A - B + C); j < dim_col (A - B + C)\\<rbrakk>\n       \\<Longrightarrow> (A - (B - C)) $$ (i, j) = (A - B + C) $$ (i, j)", "assume \"i < dim_row (A - B + C)\" and \"j < dim_col (A - B + C)\""], ["proof (state)\nthis:\n  i < dim_row (A - B + C)\n  j < dim_col (A - B + C)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A - B + C); j < dim_col (A - B + C)\\<rbrakk>\n       \\<Longrightarrow> (A - (B - C)) $$ (i, j) = (A - B + C) $$ (i, j)", "note ij = this"], ["proof (state)\nthis:\n  i < dim_row (A - B + C)\n  j < dim_col (A - B + C)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A - B + C); j < dim_col (A - B + C)\\<rbrakk>\n       \\<Longrightarrow> (A - (B - C)) $$ (i, j) = (A - B + C) $$ (i, j)", "have \"(A - (B - C)) $$ (i, j) = (A $$ (i,j) - B $$ (i,j) + C $$ (i,j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A - (B - C)) $$ (i, j) = A $$ (i, j) - B $$ (i, j) + C $$ (i, j)", "using ij assms"], ["proof (prove)\nusing this:\n  i < dim_row (A - B + C)\n  j < dim_col (A - B + C)\n  A \\<in> carrier_mat n m\n  B \\<in> carrier_mat n m\n  C \\<in> carrier_mat n m\n\ngoal (1 subgoal):\n 1. (A - (B - C)) $$ (i, j) = A $$ (i, j) - B $$ (i, j) + C $$ (i, j)", "by simp"], ["proof (state)\nthis:\n  (A - (B - C)) $$ (i, j) = A $$ (i, j) - B $$ (i, j) + C $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A - B + C); j < dim_col (A - B + C)\\<rbrakk>\n       \\<Longrightarrow> (A - (B - C)) $$ (i, j) = (A - B + C) $$ (i, j)", "also"], ["proof (state)\nthis:\n  (A - (B - C)) $$ (i, j) = A $$ (i, j) - B $$ (i, j) + C $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A - B + C); j < dim_col (A - B + C)\\<rbrakk>\n       \\<Longrightarrow> (A - (B - C)) $$ (i, j) = (A - B + C) $$ (i, j)", "have \"... = (A - B + C) $$ (i, j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $$ (i, j) - B $$ (i, j) + C $$ (i, j) = (A - B + C) $$ (i, j)", "using assms ij"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n m\n  B \\<in> carrier_mat n m\n  C \\<in> carrier_mat n m\n  i < dim_row (A - B + C)\n  j < dim_col (A - B + C)\n\ngoal (1 subgoal):\n 1. A $$ (i, j) - B $$ (i, j) + C $$ (i, j) = (A - B + C) $$ (i, j)", "by simp"], ["proof (state)\nthis:\n  A $$ (i, j) - B $$ (i, j) + C $$ (i, j) = (A - B + C) $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A - B + C); j < dim_col (A - B + C)\\<rbrakk>\n       \\<Longrightarrow> (A - (B - C)) $$ (i, j) = (A - B + C) $$ (i, j)", "finally"], ["proof (chain)\npicking this:\n  (A - (B - C)) $$ (i, j) = (A - B + C) $$ (i, j)", "show \"(A - (B - C)) $$ (i, j) = (A - B + C) $$ (i, j)\""], ["proof (prove)\nusing this:\n  (A - (B - C)) $$ (i, j) = (A - B + C) $$ (i, j)\n\ngoal (1 subgoal):\n 1. (A - (B - C)) $$ (i, j) = (A - B + C) $$ (i, j)", "."], ["proof (state)\nthis:\n  (A - (B - C)) $$ (i, j) = (A - B + C) $$ (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?i < dim_row (A - B + C); ?j < dim_col (A - B + C)\\<rbrakk>\n  \\<Longrightarrow> (A - (B - C)) $$ (?i, ?j) = (A - B + C) $$ (?i, ?j)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Complements on complex matrices\\<close>"], ["", "lemma hermitian_square:\n  assumes \"hermitian M\"\n  shows \"M \\<in> carrier_mat (dim_row M) (dim_row M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M \\<in> carrier_mat (dim_row M) (dim_row M)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. M \\<in> carrier_mat (dim_row M) (dim_row M)", "have \"dim_col M = dim_row M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col M = dim_row M", "using assms"], ["proof (prove)\nusing this:\n  hermitian M\n\ngoal (1 subgoal):\n 1. dim_col M = dim_row M", "unfolding hermitian_def adjoint_def"], ["proof (prove)\nusing this:\n  Complex_Matrix.adjoint M = M\n\ngoal (1 subgoal):\n 1. dim_col M = dim_row M", "by (metis adjoint_dim_col)"], ["proof (state)\nthis:\n  dim_col M = dim_row M\n\ngoal (1 subgoal):\n 1. M \\<in> carrier_mat (dim_row M) (dim_row M)", "thus ?thesis"], ["proof (prove)\nusing this:\n  dim_col M = dim_row M\n\ngoal (1 subgoal):\n 1. M \\<in> carrier_mat (dim_row M) (dim_row M)", "by auto"], ["proof (state)\nthis:\n  M \\<in> carrier_mat (dim_row M) (dim_row M)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma hermitian_add:\n  assumes \"A\\<in> carrier_mat n n\"\n  and \"B\\<in> carrier_mat n n\"\nand \"hermitian A\"\nand \"hermitian B\"\nshows \"hermitian (A + B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hermitian (A + B)", "unfolding hermitian_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (A + B) = A + B", "by (metis adjoint_add assms hermitian_def)"], ["", "lemma hermitian_minus:\n  assumes \"A\\<in> carrier_mat n n\"\n  and \"B\\<in> carrier_mat n n\"\nand \"hermitian A\"\nand \"hermitian B\"\nshows \"hermitian (A - B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hermitian (A - B)", "unfolding hermitian_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (A - B) = A - B", "by (metis adjoint_minus assms hermitian_def)"], ["", "lemma hermitian_smult:\n  fixes a::real\n  fixes A::\"complex Matrix.mat\"\n  assumes \"A \\<in> carrier_mat n n\"\nand \"hermitian A\"\nshows \"hermitian (a \\<cdot>\\<^sub>m  A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hermitian (complex_of_real a \\<cdot>\\<^sub>m A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. hermitian (complex_of_real a \\<cdot>\\<^sub>m A)", "have dim: \"Complex_Matrix.adjoint A \\<in> carrier_mat n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint A \\<in> carrier_mat n n", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  hermitian A\n\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint A \\<in> carrier_mat n n", "by (simp add: adjoint_dim)"], ["proof (state)\nthis:\n  Complex_Matrix.adjoint A \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. hermitian (complex_of_real a \\<cdot>\\<^sub>m A)", "{"], ["proof (state)\nthis:\n  Complex_Matrix.adjoint A \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. hermitian (complex_of_real a \\<cdot>\\<^sub>m A)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. hermitian (complex_of_real a \\<cdot>\\<^sub>m A)", "assume \"i < n\" and \"j < n\""], ["proof (state)\nthis:\n  i < n\n  j < n\n\ngoal (1 subgoal):\n 1. hermitian (complex_of_real a \\<cdot>\\<^sub>m A)", "hence \"Complex_Matrix.adjoint (a \\<cdot>\\<^sub>m A) $$ (i,j) = a * (Complex_Matrix.adjoint A $$ (i,j))\""], ["proof (prove)\nusing this:\n  i < n\n  j < n\n\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (complex_of_real a \\<cdot>\\<^sub>m A) $$ (i, j) =\n    complex_of_real a * Complex_Matrix.adjoint A $$ (i, j)", "using adjoint_scale[of a A] assms"], ["proof (prove)\nusing this:\n  i < n\n  j < n\n  Complex_Matrix.adjoint (complex_of_real a \\<cdot>\\<^sub>m A) =\n  conjugate (complex_of_real a) \\<cdot>\\<^sub>m Complex_Matrix.adjoint A\n  A \\<in> carrier_mat n n\n  hermitian A\n\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (complex_of_real a \\<cdot>\\<^sub>m A) $$ (i, j) =\n    complex_of_real a * Complex_Matrix.adjoint A $$ (i, j)", "by simp"], ["proof (state)\nthis:\n  Complex_Matrix.adjoint (complex_of_real a \\<cdot>\\<^sub>m A) $$ (i, j) =\n  complex_of_real a * Complex_Matrix.adjoint A $$ (i, j)\n\ngoal (1 subgoal):\n 1. hermitian (complex_of_real a \\<cdot>\\<^sub>m A)", "also"], ["proof (state)\nthis:\n  Complex_Matrix.adjoint (complex_of_real a \\<cdot>\\<^sub>m A) $$ (i, j) =\n  complex_of_real a * Complex_Matrix.adjoint A $$ (i, j)\n\ngoal (1 subgoal):\n 1. hermitian (complex_of_real a \\<cdot>\\<^sub>m A)", "have \"... = a * (A $$ (i,j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. complex_of_real a * Complex_Matrix.adjoint A $$ (i, j) =\n    complex_of_real a * A $$ (i, j)", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  hermitian A\n\ngoal (1 subgoal):\n 1. complex_of_real a * Complex_Matrix.adjoint A $$ (i, j) =\n    complex_of_real a * A $$ (i, j)", "unfolding hermitian_def"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  Complex_Matrix.adjoint A = A\n\ngoal (1 subgoal):\n 1. complex_of_real a * Complex_Matrix.adjoint A $$ (i, j) =\n    complex_of_real a * A $$ (i, j)", "by simp"], ["proof (state)\nthis:\n  complex_of_real a * Complex_Matrix.adjoint A $$ (i, j) =\n  complex_of_real a * A $$ (i, j)\n\ngoal (1 subgoal):\n 1. hermitian (complex_of_real a \\<cdot>\\<^sub>m A)", "also"], ["proof (state)\nthis:\n  complex_of_real a * Complex_Matrix.adjoint A $$ (i, j) =\n  complex_of_real a * A $$ (i, j)\n\ngoal (1 subgoal):\n 1. hermitian (complex_of_real a \\<cdot>\\<^sub>m A)", "have \"... = (a \\<cdot>\\<^sub>m A) $$ (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. complex_of_real a * A $$ (i, j) =\n    (complex_of_real a \\<cdot>\\<^sub>m A) $$ (i, j)", "using \\<open>i < n\\<close> \\<open>j < n\\<close> assms"], ["proof (prove)\nusing this:\n  i < n\n  j < n\n  A \\<in> carrier_mat n n\n  hermitian A\n\ngoal (1 subgoal):\n 1. complex_of_real a * A $$ (i, j) =\n    (complex_of_real a \\<cdot>\\<^sub>m A) $$ (i, j)", "by simp"], ["proof (state)\nthis:\n  complex_of_real a * A $$ (i, j) =\n  (complex_of_real a \\<cdot>\\<^sub>m A) $$ (i, j)\n\ngoal (1 subgoal):\n 1. hermitian (complex_of_real a \\<cdot>\\<^sub>m A)", "finally"], ["proof (chain)\npicking this:\n  Complex_Matrix.adjoint (complex_of_real a \\<cdot>\\<^sub>m A) $$ (i, j) =\n  (complex_of_real a \\<cdot>\\<^sub>m A) $$ (i, j)", "have \"Complex_Matrix.adjoint (a \\<cdot>\\<^sub>m A) $$ (i,j) = (a \\<cdot>\\<^sub>m A) $$ (i,j)\""], ["proof (prove)\nusing this:\n  Complex_Matrix.adjoint (complex_of_real a \\<cdot>\\<^sub>m A) $$ (i, j) =\n  (complex_of_real a \\<cdot>\\<^sub>m A) $$ (i, j)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (complex_of_real a \\<cdot>\\<^sub>m A) $$ (i, j) =\n    (complex_of_real a \\<cdot>\\<^sub>m A) $$ (i, j)", "."], ["proof (state)\nthis:\n  Complex_Matrix.adjoint (complex_of_real a \\<cdot>\\<^sub>m A) $$ (i, j) =\n  (complex_of_real a \\<cdot>\\<^sub>m A) $$ (i, j)\n\ngoal (1 subgoal):\n 1. hermitian (complex_of_real a \\<cdot>\\<^sub>m A)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?i2 < n; ?j2 < n\\<rbrakk>\n  \\<Longrightarrow> Complex_Matrix.adjoint\n                     (complex_of_real a \\<cdot>\\<^sub>m A) $$\n                    (?i2, ?j2) =\n                    (complex_of_real a \\<cdot>\\<^sub>m A) $$ (?i2, ?j2)\n\ngoal (1 subgoal):\n 1. hermitian (complex_of_real a \\<cdot>\\<^sub>m A)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i2 < n; ?j2 < n\\<rbrakk>\n  \\<Longrightarrow> Complex_Matrix.adjoint\n                     (complex_of_real a \\<cdot>\\<^sub>m A) $$\n                    (?i2, ?j2) =\n                    (complex_of_real a \\<cdot>\\<^sub>m A) $$ (?i2, ?j2)\n\ngoal (1 subgoal):\n 1. hermitian (complex_of_real a \\<cdot>\\<^sub>m A)", "using dim assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i2 < n; ?j2 < n\\<rbrakk>\n  \\<Longrightarrow> Complex_Matrix.adjoint\n                     (complex_of_real a \\<cdot>\\<^sub>m A) $$\n                    (?i2, ?j2) =\n                    (complex_of_real a \\<cdot>\\<^sub>m A) $$ (?i2, ?j2)\n  Complex_Matrix.adjoint A \\<in> carrier_mat n n\n  A \\<in> carrier_mat n n\n  hermitian A\n\ngoal (1 subgoal):\n 1. hermitian (complex_of_real a \\<cdot>\\<^sub>m A)", "unfolding hermitian_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i2 < n; ?j2 < n\\<rbrakk>\n  \\<Longrightarrow> Complex_Matrix.adjoint\n                     (complex_of_real a \\<cdot>\\<^sub>m A) $$\n                    (?i2, ?j2) =\n                    (complex_of_real a \\<cdot>\\<^sub>m A) $$ (?i2, ?j2)\n  Complex_Matrix.adjoint A \\<in> carrier_mat n n\n  A \\<in> carrier_mat n n\n  Complex_Matrix.adjoint A = A\n\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (complex_of_real a \\<cdot>\\<^sub>m A) =\n    complex_of_real a \\<cdot>\\<^sub>m A", "by auto"], ["proof (state)\nthis:\n  hermitian (complex_of_real a \\<cdot>\\<^sub>m A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unitary_eigenvalues_norm_square:\n  fixes U::\"complex Matrix.mat\"\n  assumes \"unitary U\"\n  and \"U \\<in> carrier_mat n n\"\n  and \"eigenvalue U k\"\nshows \"conjugate k * k = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conjugate k * k = 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. conjugate k * k = 1", "have \"\\<exists>v. eigenvector U v k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v. eigenvector U v k", "using assms"], ["proof (prove)\nusing this:\n  Complex_Matrix.unitary U\n  U \\<in> carrier_mat n n\n  eigenvalue U k\n\ngoal (1 subgoal):\n 1. \\<exists>v. eigenvector U v k", "unfolding eigenvalue_def"], ["proof (prove)\nusing this:\n  Complex_Matrix.unitary U\n  U \\<in> carrier_mat n n\n  \\<exists>v. eigenvector U v k\n\ngoal (1 subgoal):\n 1. \\<exists>v. eigenvector U v k", "by simp"], ["proof (state)\nthis:\n  \\<exists>v. eigenvector U v k\n\ngoal (1 subgoal):\n 1. conjugate k * k = 1", "from this"], ["proof (chain)\npicking this:\n  \\<exists>v. eigenvector U v k", "obtain v where \"eigenvector U v k\""], ["proof (prove)\nusing this:\n  \\<exists>v. eigenvector U v k\n\ngoal (1 subgoal):\n 1. (\\<And>v. eigenvector U v k \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  eigenvector U v k\n\ngoal (1 subgoal):\n 1. conjugate k * k = 1", "define vn where \"vn = vec_normalize v\""], ["proof (state)\nthis:\n  vn = vec_normalize v\n\ngoal (1 subgoal):\n 1. conjugate k * k = 1", "have \"eigenvector U vn k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eigenvector U vn k", "using normalize_keep_eigenvector \\<open>eigenvector U v k\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>eigenvector ?A ?v ?e; ?A \\<in> carrier_mat ?n ?n;\n   ?v \\<in> carrier_vec ?n\\<rbrakk>\n  \\<Longrightarrow> eigenvector ?A (vec_normalize ?v) ?e\n  eigenvector U v k\n\ngoal (1 subgoal):\n 1. eigenvector U vn k", "using assms(2) eigenvector_def vn_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>eigenvector ?A ?v ?e; ?A \\<in> carrier_mat ?n ?n;\n   ?v \\<in> carrier_vec ?n\\<rbrakk>\n  \\<Longrightarrow> eigenvector ?A (vec_normalize ?v) ?e\n  eigenvector U v k\n  U \\<in> carrier_mat n n\n  eigenvector ?A ?v ?k =\n  (?v \\<in> carrier_vec (dim_row ?A) \\<and>\n   ?v \\<noteq> 0\\<^sub>v (dim_row ?A) \\<and>\n   ?A *\\<^sub>v ?v = ?k \\<cdot>\\<^sub>v ?v)\n  vn = vec_normalize v\n\ngoal (1 subgoal):\n 1. eigenvector U vn k", "by blast"], ["proof (state)\nthis:\n  eigenvector U vn k\n\ngoal (1 subgoal):\n 1. conjugate k * k = 1", "have \"vn \\<in> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vn \\<in> carrier_vec n", "using \\<open>eigenvector U v k\\<close> assms(2) eigenvector_def normalized_vec_dim vn_def"], ["proof (prove)\nusing this:\n  eigenvector U v k\n  U \\<in> carrier_mat n n\n  eigenvector ?A ?v ?k =\n  (?v \\<in> carrier_vec (dim_row ?A) \\<and>\n   ?v \\<noteq> 0\\<^sub>v (dim_row ?A) \\<and>\n   ?A *\\<^sub>v ?v = ?k \\<cdot>\\<^sub>v ?v)\n  ?v \\<in> carrier_vec ?n \\<Longrightarrow>\n  vec_normalize ?v \\<in> carrier_vec ?n\n  vn = vec_normalize v\n\ngoal (1 subgoal):\n 1. vn \\<in> carrier_vec n", "by blast"], ["proof (state)\nthis:\n  vn \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. conjugate k * k = 1", "have \"Complex_Matrix.inner_prod vn vn = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod vn vn = 1", "using \\<open>vn = vec_normalize v\\<close> \\<open>eigenvector U v k\\<close> \n        eigenvector_def normalized_vec_norm"], ["proof (prove)\nusing this:\n  vn = vec_normalize v\n  eigenvector U v k\n  eigenvector ?A ?v ?k =\n  (?v \\<in> carrier_vec (dim_row ?A) \\<and>\n   ?v \\<noteq> 0\\<^sub>v (dim_row ?A) \\<and>\n   ?A *\\<^sub>v ?v = ?k \\<cdot>\\<^sub>v ?v)\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?v \\<noteq> 0\\<^sub>v ?n\\<rbrakk>\n  \\<Longrightarrow> Complex_Matrix.inner_prod (vec_normalize ?v)\n                     (vec_normalize ?v) =\n                    1\n\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod vn vn = 1", "by blast"], ["proof (state)\nthis:\n  Complex_Matrix.inner_prod vn vn = 1\n\ngoal (1 subgoal):\n 1. conjugate k * k = 1", "hence \"conjugate k * k = conjugate k * k * Complex_Matrix.inner_prod vn vn\""], ["proof (prove)\nusing this:\n  Complex_Matrix.inner_prod vn vn = 1\n\ngoal (1 subgoal):\n 1. conjugate k * k = conjugate k * k * Complex_Matrix.inner_prod vn vn", "by simp"], ["proof (state)\nthis:\n  conjugate k * k = conjugate k * k * Complex_Matrix.inner_prod vn vn\n\ngoal (1 subgoal):\n 1. conjugate k * k = 1", "also"], ["proof (state)\nthis:\n  conjugate k * k = conjugate k * k * Complex_Matrix.inner_prod vn vn\n\ngoal (1 subgoal):\n 1. conjugate k * k = 1", "have \"... = conjugate k * Complex_Matrix.inner_prod vn (k \\<cdot>\\<^sub>v vn)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conjugate k * k * Complex_Matrix.inner_prod vn vn =\n    conjugate k * Complex_Matrix.inner_prod vn (k \\<cdot>\\<^sub>v vn)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. conjugate k * k * Complex_Matrix.inner_prod vn vn =\n    conjugate k * Complex_Matrix.inner_prod vn (k \\<cdot>\\<^sub>v vn)", "have \"k * Complex_Matrix.inner_prod vn vn = Complex_Matrix.inner_prod vn (k \\<cdot>\\<^sub>v vn)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k * Complex_Matrix.inner_prod vn vn =\n    Complex_Matrix.inner_prod vn (k \\<cdot>\\<^sub>v vn)", "using inner_prod_smult_left[of vn n vn k] \\<open>vn \\<in> carrier_vec n\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>vn \\<in> carrier_vec n; vn \\<in> carrier_vec n\\<rbrakk>\n  \\<Longrightarrow> Complex_Matrix.inner_prod vn (k \\<cdot>\\<^sub>v vn) =\n                    k * Complex_Matrix.inner_prod vn vn\n  vn \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. k * Complex_Matrix.inner_prod vn vn =\n    Complex_Matrix.inner_prod vn (k \\<cdot>\\<^sub>v vn)", "by simp"], ["proof (state)\nthis:\n  k * Complex_Matrix.inner_prod vn vn =\n  Complex_Matrix.inner_prod vn (k \\<cdot>\\<^sub>v vn)\n\ngoal (1 subgoal):\n 1. conjugate k * k * Complex_Matrix.inner_prod vn vn =\n    conjugate k * Complex_Matrix.inner_prod vn (k \\<cdot>\\<^sub>v vn)", "thus ?thesis"], ["proof (prove)\nusing this:\n  k * Complex_Matrix.inner_prod vn vn =\n  Complex_Matrix.inner_prod vn (k \\<cdot>\\<^sub>v vn)\n\ngoal (1 subgoal):\n 1. conjugate k * k * Complex_Matrix.inner_prod vn vn =\n    conjugate k * Complex_Matrix.inner_prod vn (k \\<cdot>\\<^sub>v vn)", "by simp"], ["proof (state)\nthis:\n  conjugate k * k * Complex_Matrix.inner_prod vn vn =\n  conjugate k * Complex_Matrix.inner_prod vn (k \\<cdot>\\<^sub>v vn)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  conjugate k * k * Complex_Matrix.inner_prod vn vn =\n  conjugate k * Complex_Matrix.inner_prod vn (k \\<cdot>\\<^sub>v vn)\n\ngoal (1 subgoal):\n 1. conjugate k * k = 1", "also"], ["proof (state)\nthis:\n  conjugate k * k * Complex_Matrix.inner_prod vn vn =\n  conjugate k * Complex_Matrix.inner_prod vn (k \\<cdot>\\<^sub>v vn)\n\ngoal (1 subgoal):\n 1. conjugate k * k = 1", "have \"... = Complex_Matrix.inner_prod (k \\<cdot>\\<^sub>v vn) (k \\<cdot>\\<^sub>v vn)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conjugate k * Complex_Matrix.inner_prod vn (k \\<cdot>\\<^sub>v vn) =\n    Complex_Matrix.inner_prod (k \\<cdot>\\<^sub>v vn) (k \\<cdot>\\<^sub>v vn)", "using inner_prod_smult_right[of vn n _ k]"], ["proof (prove)\nusing this:\n  \\<lbrakk>vn \\<in> carrier_vec n; ?v \\<in> carrier_vec n\\<rbrakk>\n  \\<Longrightarrow> Complex_Matrix.inner_prod (k \\<cdot>\\<^sub>v vn) ?v =\n                    conjugate k * Complex_Matrix.inner_prod vn ?v\n\ngoal (1 subgoal):\n 1. conjugate k * Complex_Matrix.inner_prod vn (k \\<cdot>\\<^sub>v vn) =\n    Complex_Matrix.inner_prod (k \\<cdot>\\<^sub>v vn) (k \\<cdot>\\<^sub>v vn)", "by (simp add: \\<open>vn \\<in> carrier_vec n\\<close>)"], ["proof (state)\nthis:\n  conjugate k * Complex_Matrix.inner_prod vn (k \\<cdot>\\<^sub>v vn) =\n  Complex_Matrix.inner_prod (k \\<cdot>\\<^sub>v vn) (k \\<cdot>\\<^sub>v vn)\n\ngoal (1 subgoal):\n 1. conjugate k * k = 1", "also"], ["proof (state)\nthis:\n  conjugate k * Complex_Matrix.inner_prod vn (k \\<cdot>\\<^sub>v vn) =\n  Complex_Matrix.inner_prod (k \\<cdot>\\<^sub>v vn) (k \\<cdot>\\<^sub>v vn)\n\ngoal (1 subgoal):\n 1. conjugate k * k = 1", "have \"... = Complex_Matrix.inner_prod (U *\\<^sub>v vn) (U *\\<^sub>v vn)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod (k \\<cdot>\\<^sub>v vn)\n     (k \\<cdot>\\<^sub>v vn) =\n    Complex_Matrix.inner_prod (U *\\<^sub>v vn) (U *\\<^sub>v vn)", "using \\<open>eigenvector U vn k\\<close>"], ["proof (prove)\nusing this:\n  eigenvector U vn k\n\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod (k \\<cdot>\\<^sub>v vn)\n     (k \\<cdot>\\<^sub>v vn) =\n    Complex_Matrix.inner_prod (U *\\<^sub>v vn) (U *\\<^sub>v vn)", "unfolding eigenvector_def"], ["proof (prove)\nusing this:\n  vn \\<in> carrier_vec (dim_row U) \\<and>\n  vn \\<noteq> 0\\<^sub>v (dim_row U) \\<and>\n  U *\\<^sub>v vn = k \\<cdot>\\<^sub>v vn\n\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod (k \\<cdot>\\<^sub>v vn)\n     (k \\<cdot>\\<^sub>v vn) =\n    Complex_Matrix.inner_prod (U *\\<^sub>v vn) (U *\\<^sub>v vn)", "by simp"], ["proof (state)\nthis:\n  Complex_Matrix.inner_prod (k \\<cdot>\\<^sub>v vn) (k \\<cdot>\\<^sub>v vn) =\n  Complex_Matrix.inner_prod (U *\\<^sub>v vn) (U *\\<^sub>v vn)\n\ngoal (1 subgoal):\n 1. conjugate k * k = 1", "also"], ["proof (state)\nthis:\n  Complex_Matrix.inner_prod (k \\<cdot>\\<^sub>v vn) (k \\<cdot>\\<^sub>v vn) =\n  Complex_Matrix.inner_prod (U *\\<^sub>v vn) (U *\\<^sub>v vn)\n\ngoal (1 subgoal):\n 1. conjugate k * k = 1", "have \"... =  \n    Complex_Matrix.inner_prod (Complex_Matrix.adjoint U *\\<^sub>v (U *\\<^sub>v vn)) vn\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod (U *\\<^sub>v vn) (U *\\<^sub>v vn) =\n    Complex_Matrix.inner_prod\n     (Complex_Matrix.adjoint U *\\<^sub>v (U *\\<^sub>v vn)) vn", "using adjoint_def_alter[of \"U *\\<^sub>v vn\" n vn n U] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>U *\\<^sub>v vn \\<in> carrier_vec n; vn \\<in> carrier_vec n;\n   U \\<in> carrier_mat n n\\<rbrakk>\n  \\<Longrightarrow> Complex_Matrix.inner_prod (U *\\<^sub>v vn)\n                     (U *\\<^sub>v vn) =\n                    Complex_Matrix.inner_prod\n                     (Complex_Matrix.adjoint U *\\<^sub>v (U *\\<^sub>v vn))\n                     vn\n  Complex_Matrix.unitary U\n  U \\<in> carrier_mat n n\n  eigenvalue U k\n\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod (U *\\<^sub>v vn) (U *\\<^sub>v vn) =\n    Complex_Matrix.inner_prod\n     (Complex_Matrix.adjoint U *\\<^sub>v (U *\\<^sub>v vn)) vn", "by (metis \\<open>eigenvector U vn k\\<close> carrier_matD(1) carrier_vec_dim_vec dim_mult_mat_vec \n        eigenvector_def)"], ["proof (state)\nthis:\n  Complex_Matrix.inner_prod (U *\\<^sub>v vn) (U *\\<^sub>v vn) =\n  Complex_Matrix.inner_prod\n   (Complex_Matrix.adjoint U *\\<^sub>v (U *\\<^sub>v vn)) vn\n\ngoal (1 subgoal):\n 1. conjugate k * k = 1", "also"], ["proof (state)\nthis:\n  Complex_Matrix.inner_prod (U *\\<^sub>v vn) (U *\\<^sub>v vn) =\n  Complex_Matrix.inner_prod\n   (Complex_Matrix.adjoint U *\\<^sub>v (U *\\<^sub>v vn)) vn\n\ngoal (1 subgoal):\n 1. conjugate k * k = 1", "have \"... = Complex_Matrix.inner_prod vn vn\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod\n     (Complex_Matrix.adjoint U *\\<^sub>v (U *\\<^sub>v vn)) vn =\n    Complex_Matrix.inner_prod vn vn", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod\n     (Complex_Matrix.adjoint U *\\<^sub>v (U *\\<^sub>v vn)) vn =\n    Complex_Matrix.inner_prod vn vn", "have \"Complex_Matrix.adjoint U *\\<^sub>v (U *\\<^sub>v vn) = (Complex_Matrix.adjoint U * U) *\\<^sub>v vn\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint U *\\<^sub>v (U *\\<^sub>v vn) =\n    Complex_Matrix.adjoint U * U *\\<^sub>v vn", "using assms"], ["proof (prove)\nusing this:\n  Complex_Matrix.unitary U\n  U \\<in> carrier_mat n n\n  eigenvalue U k\n\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint U *\\<^sub>v (U *\\<^sub>v vn) =\n    Complex_Matrix.adjoint U * U *\\<^sub>v vn", "by (metis \\<open>eigenvector U vn k\\<close> adjoint_dim assoc_mult_mat_vec carrier_matD(1) eigenvector_def)"], ["proof (state)\nthis:\n  Complex_Matrix.adjoint U *\\<^sub>v (U *\\<^sub>v vn) =\n  Complex_Matrix.adjoint U * U *\\<^sub>v vn\n\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod\n     (Complex_Matrix.adjoint U *\\<^sub>v (U *\\<^sub>v vn)) vn =\n    Complex_Matrix.inner_prod vn vn", "also"], ["proof (state)\nthis:\n  Complex_Matrix.adjoint U *\\<^sub>v (U *\\<^sub>v vn) =\n  Complex_Matrix.adjoint U * U *\\<^sub>v vn\n\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod\n     (Complex_Matrix.adjoint U *\\<^sub>v (U *\\<^sub>v vn)) vn =\n    Complex_Matrix.inner_prod vn vn", "have \"... = vn\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint U * U *\\<^sub>v vn = vn", "using assms"], ["proof (prove)\nusing this:\n  Complex_Matrix.unitary U\n  U \\<in> carrier_mat n n\n  eigenvalue U k\n\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint U * U *\\<^sub>v vn = vn", "unfolding unitary_def inverts_mat_def"], ["proof (prove)\nusing this:\n  U \\<in> carrier_mat (dim_row U) (dim_row U) \\<and>\n  U * Complex_Matrix.adjoint U = 1\\<^sub>m (dim_row U)\n  U \\<in> carrier_mat n n\n  eigenvalue U k\n\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint U * U *\\<^sub>v vn = vn", "by (metis \\<open>eigenvector U vn k\\<close> assms(1) eigenvector_def one_mult_mat_vec unitary_simps(1))"], ["proof (state)\nthis:\n  Complex_Matrix.adjoint U * U *\\<^sub>v vn = vn\n\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod\n     (Complex_Matrix.adjoint U *\\<^sub>v (U *\\<^sub>v vn)) vn =\n    Complex_Matrix.inner_prod vn vn", "finally"], ["proof (chain)\npicking this:\n  Complex_Matrix.adjoint U *\\<^sub>v (U *\\<^sub>v vn) = vn", "show ?thesis"], ["proof (prove)\nusing this:\n  Complex_Matrix.adjoint U *\\<^sub>v (U *\\<^sub>v vn) = vn\n\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod\n     (Complex_Matrix.adjoint U *\\<^sub>v (U *\\<^sub>v vn)) vn =\n    Complex_Matrix.inner_prod vn vn", "by simp"], ["proof (state)\nthis:\n  Complex_Matrix.inner_prod\n   (Complex_Matrix.adjoint U *\\<^sub>v (U *\\<^sub>v vn)) vn =\n  Complex_Matrix.inner_prod vn vn\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Complex_Matrix.inner_prod\n   (Complex_Matrix.adjoint U *\\<^sub>v (U *\\<^sub>v vn)) vn =\n  Complex_Matrix.inner_prod vn vn\n\ngoal (1 subgoal):\n 1. conjugate k * k = 1", "also"], ["proof (state)\nthis:\n  Complex_Matrix.inner_prod\n   (Complex_Matrix.adjoint U *\\<^sub>v (U *\\<^sub>v vn)) vn =\n  Complex_Matrix.inner_prod vn vn\n\ngoal (1 subgoal):\n 1. conjugate k * k = 1", "have \"... = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod vn vn = 1", "using \\<open>vn = vec_normalize v\\<close> \\<open>eigenvector U v k\\<close> eigenvector_def \n      normalized_vec_norm"], ["proof (prove)\nusing this:\n  vn = vec_normalize v\n  eigenvector U v k\n  eigenvector ?A ?v ?k =\n  (?v \\<in> carrier_vec (dim_row ?A) \\<and>\n   ?v \\<noteq> 0\\<^sub>v (dim_row ?A) \\<and>\n   ?A *\\<^sub>v ?v = ?k \\<cdot>\\<^sub>v ?v)\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?v \\<noteq> 0\\<^sub>v ?n\\<rbrakk>\n  \\<Longrightarrow> Complex_Matrix.inner_prod (vec_normalize ?v)\n                     (vec_normalize ?v) =\n                    1\n\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod vn vn = 1", "by blast"], ["proof (state)\nthis:\n  Complex_Matrix.inner_prod vn vn = 1\n\ngoal (1 subgoal):\n 1. conjugate k * k = 1", "finally"], ["proof (chain)\npicking this:\n  conjugate k * k = 1", "show ?thesis"], ["proof (prove)\nusing this:\n  conjugate k * k = 1\n\ngoal (1 subgoal):\n 1. conjugate k * k = 1", "."], ["proof (state)\nthis:\n  conjugate k * k = 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma outer_prod_smult_left:\n  fixes v::\"complex Matrix.vec\"\n  shows \"outer_prod (a \\<cdot>\\<^sub>v v) w = a \\<cdot>\\<^sub>m outer_prod v w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. outer_prod (a \\<cdot>\\<^sub>v v) w = a \\<cdot>\\<^sub>m outer_prod v w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. outer_prod (a \\<cdot>\\<^sub>v v) w = a \\<cdot>\\<^sub>m outer_prod v w", "define paw where \"paw = outer_prod (a \\<cdot>\\<^sub>v v) w\""], ["proof (state)\nthis:\n  paw = outer_prod (a \\<cdot>\\<^sub>v v) w\n\ngoal (1 subgoal):\n 1. outer_prod (a \\<cdot>\\<^sub>v v) w = a \\<cdot>\\<^sub>m outer_prod v w", "define apw where \"apw = a \\<cdot>\\<^sub>m outer_prod v w\""], ["proof (state)\nthis:\n  apw = a \\<cdot>\\<^sub>m outer_prod v w\n\ngoal (1 subgoal):\n 1. outer_prod (a \\<cdot>\\<^sub>v v) w = a \\<cdot>\\<^sub>m outer_prod v w", "have \"paw = apw\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paw = apw", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_row paw = dim_row apw\n 3. dim_col paw = dim_col apw", "have \"dim_row paw = dim_vec v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row paw = dim_vec v", "unfolding paw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (outer_prod (a \\<cdot>\\<^sub>v v) w) = dim_vec v", "using outer_prod_dim"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n\ngoal (1 subgoal):\n 1. dim_row (outer_prod (a \\<cdot>\\<^sub>v v) w) = dim_vec v", "by (metis carrier_matD(1) carrier_vec_dim_vec index_smult_vec(2))"], ["proof (state)\nthis:\n  dim_row paw = dim_vec v\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_row paw = dim_row apw\n 3. dim_col paw = dim_col apw", "also"], ["proof (state)\nthis:\n  dim_row paw = dim_vec v\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_row paw = dim_row apw\n 3. dim_col paw = dim_col apw", "have \"... = dim_row apw\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec v = dim_row apw", "unfolding apw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec v = dim_row (a \\<cdot>\\<^sub>m outer_prod v w)", "using outer_prod_dim"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n\ngoal (1 subgoal):\n 1. dim_vec v = dim_row (a \\<cdot>\\<^sub>m outer_prod v w)", "by (metis carrier_matD(1) carrier_vec_dim_vec index_smult_mat(2))"], ["proof (state)\nthis:\n  dim_vec v = dim_row apw\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_row paw = dim_row apw\n 3. dim_col paw = dim_col apw", "finally"], ["proof (chain)\npicking this:\n  dim_row paw = dim_row apw", "show dr: \"dim_row paw = dim_row apw\""], ["proof (prove)\nusing this:\n  dim_row paw = dim_row apw\n\ngoal (1 subgoal):\n 1. dim_row paw = dim_row apw", "."], ["proof (state)\nthis:\n  dim_row paw = dim_row apw\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_col paw = dim_col apw", "have \"dim_col paw = dim_vec w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col paw = dim_vec w", "unfolding paw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (outer_prod (a \\<cdot>\\<^sub>v v) w) = dim_vec w", "using outer_prod_dim"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n\ngoal (1 subgoal):\n 1. dim_col (outer_prod (a \\<cdot>\\<^sub>v v) w) = dim_vec w", "using carrier_vec_dim_vec"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n  ?v \\<in> carrier_vec (dim_vec ?v)\n\ngoal (1 subgoal):\n 1. dim_col (outer_prod (a \\<cdot>\\<^sub>v v) w) = dim_vec w", "by blast"], ["proof (state)\nthis:\n  dim_col paw = dim_vec w\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_col paw = dim_col apw", "also"], ["proof (state)\nthis:\n  dim_col paw = dim_vec w\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_col paw = dim_col apw", "have \"... = dim_col apw\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec w = dim_col apw", "unfolding apw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec w = dim_col (a \\<cdot>\\<^sub>m outer_prod v w)", "using outer_prod_dim"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n\ngoal (1 subgoal):\n 1. dim_vec w = dim_col (a \\<cdot>\\<^sub>m outer_prod v w)", "by (metis apw_def carrier_matD(2) carrier_vec_dim_vec smult_carrier_mat)"], ["proof (state)\nthis:\n  dim_vec w = dim_col apw\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_col paw = dim_col apw", "finally"], ["proof (chain)\npicking this:\n  dim_col paw = dim_col apw", "show dc: \"dim_col paw = dim_col apw\""], ["proof (prove)\nusing this:\n  dim_col paw = dim_col apw\n\ngoal (1 subgoal):\n 1. dim_col paw = dim_col apw", "."], ["proof (state)\nthis:\n  dim_col paw = dim_col apw\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "show \"\\<And>i j. i < dim_row apw \\<Longrightarrow> j < dim_col apw \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "assume  \"i < dim_row apw\" and \"j < dim_col apw\""], ["proof (state)\nthis:\n  i < dim_row apw\n  j < dim_col apw\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "note ij = this"], ["proof (state)\nthis:\n  i < dim_row apw\n  j < dim_col apw\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "hence \"paw $$ (i,j) = a * (Matrix.vec_index v i) * cnj (Matrix.vec_index w j)\""], ["proof (prove)\nusing this:\n  i < dim_row apw\n  j < dim_col apw\n\ngoal (1 subgoal):\n 1. paw $$ (i, j) = a * v $ i * cnj (w $ j)", "using dr dc"], ["proof (prove)\nusing this:\n  i < dim_row apw\n  j < dim_col apw\n  dim_row paw = dim_row apw\n  dim_col paw = dim_col apw\n\ngoal (1 subgoal):\n 1. paw $$ (i, j) = a * v $ i * cnj (w $ j)", "unfolding  paw_def outer_prod_def"], ["proof (prove)\nusing this:\n  i < dim_row apw\n  j < dim_col apw\n  dim_row\n   (Matrix.mat (dim_vec (a \\<cdot>\\<^sub>v v)) 1\n     (\\<lambda>(i, j). (a \\<cdot>\\<^sub>v v) $ i) *\n    Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)) =\n  dim_row apw\n  dim_col\n   (Matrix.mat (dim_vec (a \\<cdot>\\<^sub>v v)) 1\n     (\\<lambda>(i, j). (a \\<cdot>\\<^sub>v v) $ i) *\n    Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)) =\n  dim_col apw\n\ngoal (1 subgoal):\n 1. (Matrix.mat (dim_vec (a \\<cdot>\\<^sub>v v)) 1\n      (\\<lambda>(i, j). (a \\<cdot>\\<^sub>v v) $ i) *\n     Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)) $$\n    (i, j) =\n    a * v $ i * cnj (w $ j)", "by simp"], ["proof (state)\nthis:\n  paw $$ (i, j) = a * v $ i * cnj (w $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "also"], ["proof (state)\nthis:\n  paw $$ (i, j) = a * v $ i * cnj (w $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "have \"... = apw $$ (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * v $ i * cnj (w $ j) = apw $$ (i, j)", "using dr dc ij"], ["proof (prove)\nusing this:\n  dim_row paw = dim_row apw\n  dim_col paw = dim_col apw\n  i < dim_row apw\n  j < dim_col apw\n\ngoal (1 subgoal):\n 1. a * v $ i * cnj (w $ j) = apw $$ (i, j)", "unfolding apw_def outer_prod_def"], ["proof (prove)\nusing this:\n  dim_row paw =\n  dim_row\n   (a \\<cdot>\\<^sub>m\n    (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n     Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)))\n  dim_col paw =\n  dim_col\n   (a \\<cdot>\\<^sub>m\n    (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n     Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)))\n  i < dim_row\n       (a \\<cdot>\\<^sub>m\n        (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n         Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)))\n  j < dim_col\n       (a \\<cdot>\\<^sub>m\n        (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n         Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)))\n\ngoal (1 subgoal):\n 1. a * v $ i * cnj (w $ j) =\n    (a \\<cdot>\\<^sub>m\n     (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n      Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y))) $$\n    (i, j)", "by simp"], ["proof (state)\nthis:\n  a * v $ i * cnj (w $ j) = apw $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "finally"], ["proof (chain)\npicking this:\n  paw $$ (i, j) = apw $$ (i, j)", "show \"paw $$ (i, j) = apw $$ (i, j)\""], ["proof (prove)\nusing this:\n  paw $$ (i, j) = apw $$ (i, j)\n\ngoal (1 subgoal):\n 1. paw $$ (i, j) = apw $$ (i, j)", "."], ["proof (state)\nthis:\n  paw $$ (i, j) = apw $$ (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?i < dim_row apw; ?j < dim_col apw\\<rbrakk>\n  \\<Longrightarrow> paw $$ (?i, ?j) = apw $$ (?i, ?j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  paw = apw\n\ngoal (1 subgoal):\n 1. outer_prod (a \\<cdot>\\<^sub>v v) w = a \\<cdot>\\<^sub>m outer_prod v w", "thus ?thesis"], ["proof (prove)\nusing this:\n  paw = apw\n\ngoal (1 subgoal):\n 1. outer_prod (a \\<cdot>\\<^sub>v v) w = a \\<cdot>\\<^sub>m outer_prod v w", "unfolding paw_def apw_def"], ["proof (prove)\nusing this:\n  outer_prod (a \\<cdot>\\<^sub>v v) w = a \\<cdot>\\<^sub>m outer_prod v w\n\ngoal (1 subgoal):\n 1. outer_prod (a \\<cdot>\\<^sub>v v) w = a \\<cdot>\\<^sub>m outer_prod v w", "by simp"], ["proof (state)\nthis:\n  outer_prod (a \\<cdot>\\<^sub>v v) w = a \\<cdot>\\<^sub>m outer_prod v w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma outer_prod_smult_right:\n  fixes v::\"complex Matrix.vec\"\n  shows \"outer_prod v (a \\<cdot>\\<^sub>v w) = (conjugate a) \\<cdot>\\<^sub>m outer_prod v w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. outer_prod v (a \\<cdot>\\<^sub>v w) =\n    conjugate a \\<cdot>\\<^sub>m outer_prod v w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. outer_prod v (a \\<cdot>\\<^sub>v w) =\n    conjugate a \\<cdot>\\<^sub>m outer_prod v w", "define paw where \"paw = outer_prod v (a \\<cdot>\\<^sub>v w)\""], ["proof (state)\nthis:\n  paw = outer_prod v (a \\<cdot>\\<^sub>v w)\n\ngoal (1 subgoal):\n 1. outer_prod v (a \\<cdot>\\<^sub>v w) =\n    conjugate a \\<cdot>\\<^sub>m outer_prod v w", "define apw where \"apw = (conjugate a) \\<cdot>\\<^sub>m outer_prod v w\""], ["proof (state)\nthis:\n  apw = conjugate a \\<cdot>\\<^sub>m outer_prod v w\n\ngoal (1 subgoal):\n 1. outer_prod v (a \\<cdot>\\<^sub>v w) =\n    conjugate a \\<cdot>\\<^sub>m outer_prod v w", "have \"paw = apw\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paw = apw", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_row paw = dim_row apw\n 3. dim_col paw = dim_col apw", "have \"dim_row paw = dim_vec v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row paw = dim_vec v", "unfolding paw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (outer_prod v (a \\<cdot>\\<^sub>v w)) = dim_vec v", "using outer_prod_dim"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n\ngoal (1 subgoal):\n 1. dim_row (outer_prod v (a \\<cdot>\\<^sub>v w)) = dim_vec v", "by (metis carrier_matD(1) carrier_vec_dim_vec)"], ["proof (state)\nthis:\n  dim_row paw = dim_vec v\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_row paw = dim_row apw\n 3. dim_col paw = dim_col apw", "also"], ["proof (state)\nthis:\n  dim_row paw = dim_vec v\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_row paw = dim_row apw\n 3. dim_col paw = dim_col apw", "have \"... = dim_row apw\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec v = dim_row apw", "unfolding apw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec v = dim_row (conjugate a \\<cdot>\\<^sub>m outer_prod v w)", "using outer_prod_dim"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n\ngoal (1 subgoal):\n 1. dim_vec v = dim_row (conjugate a \\<cdot>\\<^sub>m outer_prod v w)", "by (metis carrier_matD(1) carrier_vec_dim_vec index_smult_mat(2))"], ["proof (state)\nthis:\n  dim_vec v = dim_row apw\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_row paw = dim_row apw\n 3. dim_col paw = dim_col apw", "finally"], ["proof (chain)\npicking this:\n  dim_row paw = dim_row apw", "show dr: \"dim_row paw = dim_row apw\""], ["proof (prove)\nusing this:\n  dim_row paw = dim_row apw\n\ngoal (1 subgoal):\n 1. dim_row paw = dim_row apw", "."], ["proof (state)\nthis:\n  dim_row paw = dim_row apw\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_col paw = dim_col apw", "have \"dim_col paw = dim_vec w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col paw = dim_vec w", "unfolding paw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (outer_prod v (a \\<cdot>\\<^sub>v w)) = dim_vec w", "using outer_prod_dim"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n\ngoal (1 subgoal):\n 1. dim_col (outer_prod v (a \\<cdot>\\<^sub>v w)) = dim_vec w", "using carrier_vec_dim_vec"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n  ?v \\<in> carrier_vec (dim_vec ?v)\n\ngoal (1 subgoal):\n 1. dim_col (outer_prod v (a \\<cdot>\\<^sub>v w)) = dim_vec w", "by (metis carrier_matD(2) index_smult_vec(2))"], ["proof (state)\nthis:\n  dim_col paw = dim_vec w\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_col paw = dim_col apw", "also"], ["proof (state)\nthis:\n  dim_col paw = dim_vec w\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_col paw = dim_col apw", "have \"... = dim_col apw\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec w = dim_col apw", "unfolding apw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec w = dim_col (conjugate a \\<cdot>\\<^sub>m outer_prod v w)", "using outer_prod_dim"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n\ngoal (1 subgoal):\n 1. dim_vec w = dim_col (conjugate a \\<cdot>\\<^sub>m outer_prod v w)", "by (metis apw_def carrier_matD(2) carrier_vec_dim_vec smult_carrier_mat)"], ["proof (state)\nthis:\n  dim_vec w = dim_col apw\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_col paw = dim_col apw", "finally"], ["proof (chain)\npicking this:\n  dim_col paw = dim_col apw", "show dc: \"dim_col paw = dim_col apw\""], ["proof (prove)\nusing this:\n  dim_col paw = dim_col apw\n\ngoal (1 subgoal):\n 1. dim_col paw = dim_col apw", "."], ["proof (state)\nthis:\n  dim_col paw = dim_col apw\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "show \"\\<And>i j. i < dim_row apw \\<Longrightarrow> j < dim_col apw \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "assume  \"i < dim_row apw\" and \"j < dim_col apw\""], ["proof (state)\nthis:\n  i < dim_row apw\n  j < dim_col apw\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "note ij = this"], ["proof (state)\nthis:\n  i < dim_row apw\n  j < dim_col apw\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "hence \"paw $$ (i,j) = (conjugate a) * (Matrix.vec_index v i) * cnj (Matrix.vec_index w j)\""], ["proof (prove)\nusing this:\n  i < dim_row apw\n  j < dim_col apw\n\ngoal (1 subgoal):\n 1. paw $$ (i, j) = conjugate a * v $ i * cnj (w $ j)", "using dr dc"], ["proof (prove)\nusing this:\n  i < dim_row apw\n  j < dim_col apw\n  dim_row paw = dim_row apw\n  dim_col paw = dim_col apw\n\ngoal (1 subgoal):\n 1. paw $$ (i, j) = conjugate a * v $ i * cnj (w $ j)", "unfolding  paw_def outer_prod_def"], ["proof (prove)\nusing this:\n  i < dim_row apw\n  j < dim_col apw\n  dim_row\n   (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n    Matrix.mat 1 (dim_vec (a \\<cdot>\\<^sub>v w))\n     (\\<lambda>(i, y). conjugate (a \\<cdot>\\<^sub>v w) $ y)) =\n  dim_row apw\n  dim_col\n   (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n    Matrix.mat 1 (dim_vec (a \\<cdot>\\<^sub>v w))\n     (\\<lambda>(i, y). conjugate (a \\<cdot>\\<^sub>v w) $ y)) =\n  dim_col apw\n\ngoal (1 subgoal):\n 1. (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n     Matrix.mat 1 (dim_vec (a \\<cdot>\\<^sub>v w))\n      (\\<lambda>(i, y). conjugate (a \\<cdot>\\<^sub>v w) $ y)) $$\n    (i, j) =\n    conjugate a * v $ i * cnj (w $ j)", "by simp"], ["proof (state)\nthis:\n  paw $$ (i, j) = conjugate a * v $ i * cnj (w $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "also"], ["proof (state)\nthis:\n  paw $$ (i, j) = conjugate a * v $ i * cnj (w $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "have \"... = apw $$ (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conjugate a * v $ i * cnj (w $ j) = apw $$ (i, j)", "using dr dc ij"], ["proof (prove)\nusing this:\n  dim_row paw = dim_row apw\n  dim_col paw = dim_col apw\n  i < dim_row apw\n  j < dim_col apw\n\ngoal (1 subgoal):\n 1. conjugate a * v $ i * cnj (w $ j) = apw $$ (i, j)", "unfolding apw_def outer_prod_def"], ["proof (prove)\nusing this:\n  dim_row paw =\n  dim_row\n   (conjugate a \\<cdot>\\<^sub>m\n    (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n     Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)))\n  dim_col paw =\n  dim_col\n   (conjugate a \\<cdot>\\<^sub>m\n    (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n     Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)))\n  i < dim_row\n       (conjugate a \\<cdot>\\<^sub>m\n        (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n         Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)))\n  j < dim_col\n       (conjugate a \\<cdot>\\<^sub>m\n        (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n         Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)))\n\ngoal (1 subgoal):\n 1. conjugate a * v $ i * cnj (w $ j) =\n    (conjugate a \\<cdot>\\<^sub>m\n     (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n      Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y))) $$\n    (i, j)", "by simp"], ["proof (state)\nthis:\n  conjugate a * v $ i * cnj (w $ j) = apw $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "finally"], ["proof (chain)\npicking this:\n  paw $$ (i, j) = apw $$ (i, j)", "show \"paw $$ (i, j) = apw $$ (i, j)\""], ["proof (prove)\nusing this:\n  paw $$ (i, j) = apw $$ (i, j)\n\ngoal (1 subgoal):\n 1. paw $$ (i, j) = apw $$ (i, j)", "."], ["proof (state)\nthis:\n  paw $$ (i, j) = apw $$ (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?i < dim_row apw; ?j < dim_col apw\\<rbrakk>\n  \\<Longrightarrow> paw $$ (?i, ?j) = apw $$ (?i, ?j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  paw = apw\n\ngoal (1 subgoal):\n 1. outer_prod v (a \\<cdot>\\<^sub>v w) =\n    conjugate a \\<cdot>\\<^sub>m outer_prod v w", "thus ?thesis"], ["proof (prove)\nusing this:\n  paw = apw\n\ngoal (1 subgoal):\n 1. outer_prod v (a \\<cdot>\\<^sub>v w) =\n    conjugate a \\<cdot>\\<^sub>m outer_prod v w", "unfolding paw_def apw_def"], ["proof (prove)\nusing this:\n  outer_prod v (a \\<cdot>\\<^sub>v w) =\n  conjugate a \\<cdot>\\<^sub>m outer_prod v w\n\ngoal (1 subgoal):\n 1. outer_prod v (a \\<cdot>\\<^sub>v w) =\n    conjugate a \\<cdot>\\<^sub>m outer_prod v w", "by simp"], ["proof (state)\nthis:\n  outer_prod v (a \\<cdot>\\<^sub>v w) =\n  conjugate a \\<cdot>\\<^sub>m outer_prod v w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma outer_prod_add_left:\n  fixes v::\"complex Matrix.vec\"\n  assumes \"dim_vec v = dim_vec x\"\n  shows \"outer_prod (v + x) w = outer_prod v w + (outer_prod x w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. outer_prod (v + x) w = outer_prod v w + outer_prod x w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. outer_prod (v + x) w = outer_prod v w + outer_prod x w", "define paw where \"paw = outer_prod (v+x) w\""], ["proof (state)\nthis:\n  paw = outer_prod (v + x) w\n\ngoal (1 subgoal):\n 1. outer_prod (v + x) w = outer_prod v w + outer_prod x w", "define apw where \"apw = outer_prod v w + (outer_prod x w)\""], ["proof (state)\nthis:\n  apw = outer_prod v w + outer_prod x w\n\ngoal (1 subgoal):\n 1. outer_prod (v + x) w = outer_prod v w + outer_prod x w", "have \"paw = apw\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paw = apw", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_row paw = dim_row apw\n 3. dim_col paw = dim_col apw", "have rv: \"dim_row paw = dim_vec v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row paw = dim_vec v", "unfolding paw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (outer_prod (v + x) w) = dim_vec v", "using outer_prod_dim assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n  dim_vec v = dim_vec x\n\ngoal (1 subgoal):\n 1. dim_row (outer_prod (v + x) w) = dim_vec v", "by (metis carrier_matD(1) carrier_vec_dim_vec index_add_vec(2) paw_def)"], ["proof (state)\nthis:\n  dim_row paw = dim_vec v\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_row paw = dim_row apw\n 3. dim_col paw = dim_col apw", "also"], ["proof (state)\nthis:\n  dim_row paw = dim_vec v\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_row paw = dim_row apw\n 3. dim_col paw = dim_col apw", "have \"... = dim_row apw\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec v = dim_row apw", "unfolding apw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec v = dim_row (outer_prod v w + outer_prod x w)", "using outer_prod_dim assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n  dim_vec v = dim_vec x\n\ngoal (1 subgoal):\n 1. dim_vec v = dim_row (outer_prod v w + outer_prod x w)", "by (metis carrier_matD(1) carrier_vec_dim_vec index_add_mat(2))"], ["proof (state)\nthis:\n  dim_vec v = dim_row apw\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_row paw = dim_row apw\n 3. dim_col paw = dim_col apw", "finally"], ["proof (chain)\npicking this:\n  dim_row paw = dim_row apw", "show dr: \"dim_row paw = dim_row apw\""], ["proof (prove)\nusing this:\n  dim_row paw = dim_row apw\n\ngoal (1 subgoal):\n 1. dim_row paw = dim_row apw", "."], ["proof (state)\nthis:\n  dim_row paw = dim_row apw\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_col paw = dim_col apw", "have cw: \"dim_col paw = dim_vec w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col paw = dim_vec w", "unfolding paw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (outer_prod (v + x) w) = dim_vec w", "using outer_prod_dim assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n  dim_vec v = dim_vec x\n\ngoal (1 subgoal):\n 1. dim_col (outer_prod (v + x) w) = dim_vec w", "using carrier_vec_dim_vec"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n  dim_vec v = dim_vec x\n  ?v \\<in> carrier_vec (dim_vec ?v)\n\ngoal (1 subgoal):\n 1. dim_col (outer_prod (v + x) w) = dim_vec w", "by (metis carrier_matD(2))"], ["proof (state)\nthis:\n  dim_col paw = dim_vec w\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_col paw = dim_col apw", "also"], ["proof (state)\nthis:\n  dim_col paw = dim_vec w\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_col paw = dim_col apw", "have \"... = dim_col apw\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec w = dim_col apw", "unfolding apw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec w = dim_col (outer_prod v w + outer_prod x w)", "using outer_prod_dim"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n\ngoal (1 subgoal):\n 1. dim_vec w = dim_col (outer_prod v w + outer_prod x w)", "by (metis apw_def carrier_matD(2) carrier_vec_dim_vec add_carrier_mat)"], ["proof (state)\nthis:\n  dim_vec w = dim_col apw\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_col paw = dim_col apw", "finally"], ["proof (chain)\npicking this:\n  dim_col paw = dim_col apw", "show dc: \"dim_col paw = dim_col apw\""], ["proof (prove)\nusing this:\n  dim_col paw = dim_col apw\n\ngoal (1 subgoal):\n 1. dim_col paw = dim_col apw", "."], ["proof (state)\nthis:\n  dim_col paw = dim_col apw\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "show \"\\<And>i j. i < dim_row apw \\<Longrightarrow> j < dim_col apw \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "assume  \"i < dim_row apw\" and \"j < dim_col apw\""], ["proof (state)\nthis:\n  i < dim_row apw\n  j < dim_col apw\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "note ij = this"], ["proof (state)\nthis:\n  i < dim_row apw\n  j < dim_col apw\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "hence \"paw $$ (i,j) = (Matrix.vec_index v i + Matrix.vec_index x i) * \n        cnj (Matrix.vec_index w j)\""], ["proof (prove)\nusing this:\n  i < dim_row apw\n  j < dim_col apw\n\ngoal (1 subgoal):\n 1. paw $$ (i, j) = (v $ i + x $ i) * cnj (w $ j)", "using dr dc"], ["proof (prove)\nusing this:\n  i < dim_row apw\n  j < dim_col apw\n  dim_row paw = dim_row apw\n  dim_col paw = dim_col apw\n\ngoal (1 subgoal):\n 1. paw $$ (i, j) = (v $ i + x $ i) * cnj (w $ j)", "unfolding  paw_def outer_prod_def"], ["proof (prove)\nusing this:\n  i < dim_row apw\n  j < dim_col apw\n  dim_row\n   (Matrix.mat (dim_vec (v + x)) 1 (\\<lambda>(i, j). (v + x) $ i) *\n    Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)) =\n  dim_row apw\n  dim_col\n   (Matrix.mat (dim_vec (v + x)) 1 (\\<lambda>(i, j). (v + x) $ i) *\n    Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)) =\n  dim_col apw\n\ngoal (1 subgoal):\n 1. (Matrix.mat (dim_vec (v + x)) 1 (\\<lambda>(i, j). (v + x) $ i) *\n     Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)) $$\n    (i, j) =\n    (v $ i + x $ i) * cnj (w $ j)", "by simp"], ["proof (state)\nthis:\n  paw $$ (i, j) = (v $ i + x $ i) * cnj (w $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "also"], ["proof (state)\nthis:\n  paw $$ (i, j) = (v $ i + x $ i) * cnj (w $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "have \"... = Matrix.vec_index v i * cnj (Matrix.vec_index w j) + \n        Matrix.vec_index x i * cnj (Matrix.vec_index w j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v $ i + x $ i) * cnj (w $ j) =\n    v $ i * cnj (w $ j) + x $ i * cnj (w $ j)", "by (simp add: ring_class.ring_distribs(2))"], ["proof (state)\nthis:\n  (v $ i + x $ i) * cnj (w $ j) = v $ i * cnj (w $ j) + x $ i * cnj (w $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "also"], ["proof (state)\nthis:\n  (v $ i + x $ i) * cnj (w $ j) = v $ i * cnj (w $ j) + x $ i * cnj (w $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "have \"... = (outer_prod v w) $$ (i,j) + (outer_prod x w) $$ (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v $ i * cnj (w $ j) + x $ i * cnj (w $ j) =\n    outer_prod v w $$ (i, j) + outer_prod x w $$ (i, j)", "using rv cw dr dc ij assms"], ["proof (prove)\nusing this:\n  dim_row paw = dim_vec v\n  dim_col paw = dim_vec w\n  dim_row paw = dim_row apw\n  dim_col paw = dim_col apw\n  i < dim_row apw\n  j < dim_col apw\n  dim_vec v = dim_vec x\n\ngoal (1 subgoal):\n 1. v $ i * cnj (w $ j) + x $ i * cnj (w $ j) =\n    outer_prod v w $$ (i, j) + outer_prod x w $$ (i, j)", "unfolding outer_prod_def"], ["proof (prove)\nusing this:\n  dim_row paw = dim_vec v\n  dim_col paw = dim_vec w\n  dim_row paw = dim_row apw\n  dim_col paw = dim_col apw\n  i < dim_row apw\n  j < dim_col apw\n  dim_vec v = dim_vec x\n\ngoal (1 subgoal):\n 1. v $ i * cnj (w $ j) + x $ i * cnj (w $ j) =\n    (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n     Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)) $$\n    (i, j) +\n    (Matrix.mat (dim_vec x) 1 (\\<lambda>(i, j). x $ i) *\n     Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)) $$\n    (i, j)", "by auto"], ["proof (state)\nthis:\n  v $ i * cnj (w $ j) + x $ i * cnj (w $ j) =\n  outer_prod v w $$ (i, j) + outer_prod x w $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "also"], ["proof (state)\nthis:\n  v $ i * cnj (w $ j) + x $ i * cnj (w $ j) =\n  outer_prod v w $$ (i, j) + outer_prod x w $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "have \"... = apw $$ (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. outer_prod v w $$ (i, j) + outer_prod x w $$ (i, j) = apw $$ (i, j)", "using dr dc ij"], ["proof (prove)\nusing this:\n  dim_row paw = dim_row apw\n  dim_col paw = dim_col apw\n  i < dim_row apw\n  j < dim_col apw\n\ngoal (1 subgoal):\n 1. outer_prod v w $$ (i, j) + outer_prod x w $$ (i, j) = apw $$ (i, j)", "unfolding apw_def outer_prod_def"], ["proof (prove)\nusing this:\n  dim_row paw =\n  dim_row\n   (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n    Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y) +\n    Matrix.mat (dim_vec x) 1 (\\<lambda>(i, j). x $ i) *\n    Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y))\n  dim_col paw =\n  dim_col\n   (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n    Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y) +\n    Matrix.mat (dim_vec x) 1 (\\<lambda>(i, j). x $ i) *\n    Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y))\n  i < dim_row\n       (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n        Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y) +\n        Matrix.mat (dim_vec x) 1 (\\<lambda>(i, j). x $ i) *\n        Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y))\n  j < dim_col\n       (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n        Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y) +\n        Matrix.mat (dim_vec x) 1 (\\<lambda>(i, j). x $ i) *\n        Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y))\n\ngoal (1 subgoal):\n 1. (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n     Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)) $$\n    (i, j) +\n    (Matrix.mat (dim_vec x) 1 (\\<lambda>(i, j). x $ i) *\n     Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)) $$\n    (i, j) =\n    (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n     Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y) +\n     Matrix.mat (dim_vec x) 1 (\\<lambda>(i, j). x $ i) *\n     Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)) $$\n    (i, j)", "by simp"], ["proof (state)\nthis:\n  outer_prod v w $$ (i, j) + outer_prod x w $$ (i, j) = apw $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "finally"], ["proof (chain)\npicking this:\n  paw $$ (i, j) = apw $$ (i, j)", "show \"paw $$ (i, j) = apw $$ (i, j)\""], ["proof (prove)\nusing this:\n  paw $$ (i, j) = apw $$ (i, j)\n\ngoal (1 subgoal):\n 1. paw $$ (i, j) = apw $$ (i, j)", "."], ["proof (state)\nthis:\n  paw $$ (i, j) = apw $$ (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?i < dim_row apw; ?j < dim_col apw\\<rbrakk>\n  \\<Longrightarrow> paw $$ (?i, ?j) = apw $$ (?i, ?j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  paw = apw\n\ngoal (1 subgoal):\n 1. outer_prod (v + x) w = outer_prod v w + outer_prod x w", "thus ?thesis"], ["proof (prove)\nusing this:\n  paw = apw\n\ngoal (1 subgoal):\n 1. outer_prod (v + x) w = outer_prod v w + outer_prod x w", "unfolding paw_def apw_def"], ["proof (prove)\nusing this:\n  outer_prod (v + x) w = outer_prod v w + outer_prod x w\n\ngoal (1 subgoal):\n 1. outer_prod (v + x) w = outer_prod v w + outer_prod x w", "by simp"], ["proof (state)\nthis:\n  outer_prod (v + x) w = outer_prod v w + outer_prod x w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma outer_prod_add_right:\n  fixes v::\"complex Matrix.vec\"\n  assumes \"dim_vec w = dim_vec x\"\n  shows \"outer_prod v (w + x) = outer_prod v w + (outer_prod v x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. outer_prod v (w + x) = outer_prod v w + outer_prod v x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. outer_prod v (w + x) = outer_prod v w + outer_prod v x", "define paw where \"paw = outer_prod v (w+x)\""], ["proof (state)\nthis:\n  paw = outer_prod v (w + x)\n\ngoal (1 subgoal):\n 1. outer_prod v (w + x) = outer_prod v w + outer_prod v x", "define apw where \"apw = outer_prod v w + (outer_prod v x)\""], ["proof (state)\nthis:\n  apw = outer_prod v w + outer_prod v x\n\ngoal (1 subgoal):\n 1. outer_prod v (w + x) = outer_prod v w + outer_prod v x", "have \"paw = apw\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paw = apw", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_row paw = dim_row apw\n 3. dim_col paw = dim_col apw", "have rv: \"dim_row paw = dim_vec v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row paw = dim_vec v", "unfolding paw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (outer_prod v (w + x)) = dim_vec v", "using outer_prod_dim assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n  dim_vec w = dim_vec x\n\ngoal (1 subgoal):\n 1. dim_row (outer_prod v (w + x)) = dim_vec v", "by (metis carrier_matD(1) carrier_vec_dim_vec index_add_vec(2) paw_def)"], ["proof (state)\nthis:\n  dim_row paw = dim_vec v\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_row paw = dim_row apw\n 3. dim_col paw = dim_col apw", "also"], ["proof (state)\nthis:\n  dim_row paw = dim_vec v\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_row paw = dim_row apw\n 3. dim_col paw = dim_col apw", "have \"... = dim_row apw\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec v = dim_row apw", "unfolding apw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec v = dim_row (outer_prod v w + outer_prod v x)", "using outer_prod_dim assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n  dim_vec w = dim_vec x\n\ngoal (1 subgoal):\n 1. dim_vec v = dim_row (outer_prod v w + outer_prod v x)", "by (metis carrier_matD(1) carrier_vec_dim_vec index_add_mat(2))"], ["proof (state)\nthis:\n  dim_vec v = dim_row apw\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_row paw = dim_row apw\n 3. dim_col paw = dim_col apw", "finally"], ["proof (chain)\npicking this:\n  dim_row paw = dim_row apw", "show dr: \"dim_row paw = dim_row apw\""], ["proof (prove)\nusing this:\n  dim_row paw = dim_row apw\n\ngoal (1 subgoal):\n 1. dim_row paw = dim_row apw", "."], ["proof (state)\nthis:\n  dim_row paw = dim_row apw\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_col paw = dim_col apw", "have cw: \"dim_col paw = dim_vec w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col paw = dim_vec w", "unfolding paw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (outer_prod v (w + x)) = dim_vec w", "using outer_prod_dim assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n  dim_vec w = dim_vec x\n\ngoal (1 subgoal):\n 1. dim_col (outer_prod v (w + x)) = dim_vec w", "using carrier_vec_dim_vec"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n  dim_vec w = dim_vec x\n  ?v \\<in> carrier_vec (dim_vec ?v)\n\ngoal (1 subgoal):\n 1. dim_col (outer_prod v (w + x)) = dim_vec w", "by (metis carrier_matD(2) index_add_vec(2) paw_def)"], ["proof (state)\nthis:\n  dim_col paw = dim_vec w\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_col paw = dim_col apw", "also"], ["proof (state)\nthis:\n  dim_col paw = dim_vec w\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_col paw = dim_col apw", "have \"... = dim_col apw\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec w = dim_col apw", "unfolding apw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec w = dim_col (outer_prod v w + outer_prod v x)", "using outer_prod_dim"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n\ngoal (1 subgoal):\n 1. dim_vec w = dim_col (outer_prod v w + outer_prod v x)", "by (metis assms carrier_matD(2) carrier_vec_dim_vec index_add_mat(3))"], ["proof (state)\nthis:\n  dim_vec w = dim_col apw\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_col paw = dim_col apw", "finally"], ["proof (chain)\npicking this:\n  dim_col paw = dim_col apw", "show dc: \"dim_col paw = dim_col apw\""], ["proof (prove)\nusing this:\n  dim_col paw = dim_col apw\n\ngoal (1 subgoal):\n 1. dim_col paw = dim_col apw", "."], ["proof (state)\nthis:\n  dim_col paw = dim_col apw\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "show \"\\<And>i j. i < dim_row apw \\<Longrightarrow> j < dim_col apw \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "assume  \"i < dim_row apw\" and \"j < dim_col apw\""], ["proof (state)\nthis:\n  i < dim_row apw\n  j < dim_col apw\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "note ij = this"], ["proof (state)\nthis:\n  i < dim_row apw\n  j < dim_col apw\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "hence \"paw $$ (i,j) = Matrix.vec_index v i * \n        (cnj (Matrix.vec_index w j + (Matrix.vec_index x j)))\""], ["proof (prove)\nusing this:\n  i < dim_row apw\n  j < dim_col apw\n\ngoal (1 subgoal):\n 1. paw $$ (i, j) = v $ i * cnj (w $ j + x $ j)", "using dr dc"], ["proof (prove)\nusing this:\n  i < dim_row apw\n  j < dim_col apw\n  dim_row paw = dim_row apw\n  dim_col paw = dim_col apw\n\ngoal (1 subgoal):\n 1. paw $$ (i, j) = v $ i * cnj (w $ j + x $ j)", "unfolding  paw_def outer_prod_def"], ["proof (prove)\nusing this:\n  i < dim_row apw\n  j < dim_col apw\n  dim_row\n   (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n    Matrix.mat 1 (dim_vec (w + x))\n     (\\<lambda>(i, y). conjugate (w + x) $ y)) =\n  dim_row apw\n  dim_col\n   (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n    Matrix.mat 1 (dim_vec (w + x))\n     (\\<lambda>(i, y). conjugate (w + x) $ y)) =\n  dim_col apw\n\ngoal (1 subgoal):\n 1. (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n     Matrix.mat 1 (dim_vec (w + x))\n      (\\<lambda>(i, y). conjugate (w + x) $ y)) $$\n    (i, j) =\n    v $ i * cnj (w $ j + x $ j)", "by simp"], ["proof (state)\nthis:\n  paw $$ (i, j) = v $ i * cnj (w $ j + x $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "also"], ["proof (state)\nthis:\n  paw $$ (i, j) = v $ i * cnj (w $ j + x $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "have \"... = Matrix.vec_index v i * cnj (Matrix.vec_index w j) + \n        Matrix.vec_index v i * cnj (Matrix.vec_index x j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v $ i * cnj (w $ j + x $ j) = v $ i * cnj (w $ j) + v $ i * cnj (x $ j)", "by (simp add: ring_class.ring_distribs(1))"], ["proof (state)\nthis:\n  v $ i * cnj (w $ j + x $ j) = v $ i * cnj (w $ j) + v $ i * cnj (x $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "also"], ["proof (state)\nthis:\n  v $ i * cnj (w $ j + x $ j) = v $ i * cnj (w $ j) + v $ i * cnj (x $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "have \"... = (outer_prod v w) $$ (i,j) + (outer_prod v x) $$ (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v $ i * cnj (w $ j) + v $ i * cnj (x $ j) =\n    outer_prod v w $$ (i, j) + outer_prod v x $$ (i, j)", "using rv cw dr dc ij assms"], ["proof (prove)\nusing this:\n  dim_row paw = dim_vec v\n  dim_col paw = dim_vec w\n  dim_row paw = dim_row apw\n  dim_col paw = dim_col apw\n  i < dim_row apw\n  j < dim_col apw\n  dim_vec w = dim_vec x\n\ngoal (1 subgoal):\n 1. v $ i * cnj (w $ j) + v $ i * cnj (x $ j) =\n    outer_prod v w $$ (i, j) + outer_prod v x $$ (i, j)", "unfolding outer_prod_def"], ["proof (prove)\nusing this:\n  dim_row paw = dim_vec v\n  dim_col paw = dim_vec w\n  dim_row paw = dim_row apw\n  dim_col paw = dim_col apw\n  i < dim_row apw\n  j < dim_col apw\n  dim_vec w = dim_vec x\n\ngoal (1 subgoal):\n 1. v $ i * cnj (w $ j) + v $ i * cnj (x $ j) =\n    (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n     Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)) $$\n    (i, j) +\n    (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n     Matrix.mat 1 (dim_vec x) (\\<lambda>(i, y). conjugate x $ y)) $$\n    (i, j)", "by auto"], ["proof (state)\nthis:\n  v $ i * cnj (w $ j) + v $ i * cnj (x $ j) =\n  outer_prod v w $$ (i, j) + outer_prod v x $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "also"], ["proof (state)\nthis:\n  v $ i * cnj (w $ j) + v $ i * cnj (x $ j) =\n  outer_prod v w $$ (i, j) + outer_prod v x $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "have \"... = apw $$ (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. outer_prod v w $$ (i, j) + outer_prod v x $$ (i, j) = apw $$ (i, j)", "using dr dc ij"], ["proof (prove)\nusing this:\n  dim_row paw = dim_row apw\n  dim_col paw = dim_col apw\n  i < dim_row apw\n  j < dim_col apw\n\ngoal (1 subgoal):\n 1. outer_prod v w $$ (i, j) + outer_prod v x $$ (i, j) = apw $$ (i, j)", "unfolding apw_def outer_prod_def"], ["proof (prove)\nusing this:\n  dim_row paw =\n  dim_row\n   (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n    Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y) +\n    Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n    Matrix.mat 1 (dim_vec x) (\\<lambda>(i, y). conjugate x $ y))\n  dim_col paw =\n  dim_col\n   (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n    Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y) +\n    Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n    Matrix.mat 1 (dim_vec x) (\\<lambda>(i, y). conjugate x $ y))\n  i < dim_row\n       (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n        Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y) +\n        Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n        Matrix.mat 1 (dim_vec x) (\\<lambda>(i, y). conjugate x $ y))\n  j < dim_col\n       (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n        Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y) +\n        Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n        Matrix.mat 1 (dim_vec x) (\\<lambda>(i, y). conjugate x $ y))\n\ngoal (1 subgoal):\n 1. (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n     Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)) $$\n    (i, j) +\n    (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n     Matrix.mat 1 (dim_vec x) (\\<lambda>(i, y). conjugate x $ y)) $$\n    (i, j) =\n    (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n     Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y) +\n     Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n     Matrix.mat 1 (dim_vec x) (\\<lambda>(i, y). conjugate x $ y)) $$\n    (i, j)", "by simp"], ["proof (state)\nthis:\n  outer_prod v w $$ (i, j) + outer_prod v x $$ (i, j) = apw $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "finally"], ["proof (chain)\npicking this:\n  paw $$ (i, j) = apw $$ (i, j)", "show \"paw $$ (i, j) = apw $$ (i, j)\""], ["proof (prove)\nusing this:\n  paw $$ (i, j) = apw $$ (i, j)\n\ngoal (1 subgoal):\n 1. paw $$ (i, j) = apw $$ (i, j)", "."], ["proof (state)\nthis:\n  paw $$ (i, j) = apw $$ (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?i < dim_row apw; ?j < dim_col apw\\<rbrakk>\n  \\<Longrightarrow> paw $$ (?i, ?j) = apw $$ (?i, ?j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  paw = apw\n\ngoal (1 subgoal):\n 1. outer_prod v (w + x) = outer_prod v w + outer_prod v x", "thus ?thesis"], ["proof (prove)\nusing this:\n  paw = apw\n\ngoal (1 subgoal):\n 1. outer_prod v (w + x) = outer_prod v w + outer_prod v x", "unfolding paw_def apw_def"], ["proof (prove)\nusing this:\n  outer_prod v (w + x) = outer_prod v w + outer_prod v x\n\ngoal (1 subgoal):\n 1. outer_prod v (w + x) = outer_prod v w + outer_prod v x", "by simp"], ["proof (state)\nthis:\n  outer_prod v (w + x) = outer_prod v w + outer_prod v x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma outer_prod_minus_left:\n  fixes v::\"complex Matrix.vec\"\n  assumes \"dim_vec v = dim_vec x\"\n  shows \"outer_prod (v - x) w = outer_prod v w - (outer_prod x w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. outer_prod (v - x) w = outer_prod v w - outer_prod x w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. outer_prod (v - x) w = outer_prod v w - outer_prod x w", "define paw where \"paw = outer_prod (v-x) w\""], ["proof (state)\nthis:\n  paw = outer_prod (v - x) w\n\ngoal (1 subgoal):\n 1. outer_prod (v - x) w = outer_prod v w - outer_prod x w", "define apw where \"apw = outer_prod v w - (outer_prod x w)\""], ["proof (state)\nthis:\n  apw = outer_prod v w - outer_prod x w\n\ngoal (1 subgoal):\n 1. outer_prod (v - x) w = outer_prod v w - outer_prod x w", "have \"paw = apw\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paw = apw", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_row paw = dim_row apw\n 3. dim_col paw = dim_col apw", "have rv: \"dim_row paw = dim_vec v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row paw = dim_vec v", "unfolding paw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (outer_prod (v - x) w) = dim_vec v", "using outer_prod_dim assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n  dim_vec v = dim_vec x\n\ngoal (1 subgoal):\n 1. dim_row (outer_prod (v - x) w) = dim_vec v", "by (metis carrier_matD(1) carrier_vec_dim_vec index_minus_vec(2) paw_def)"], ["proof (state)\nthis:\n  dim_row paw = dim_vec v\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_row paw = dim_row apw\n 3. dim_col paw = dim_col apw", "also"], ["proof (state)\nthis:\n  dim_row paw = dim_vec v\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_row paw = dim_row apw\n 3. dim_col paw = dim_col apw", "have \"... = dim_row apw\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec v = dim_row apw", "unfolding apw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec v = dim_row (outer_prod v w - outer_prod x w)", "using outer_prod_dim assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n  dim_vec v = dim_vec x\n\ngoal (1 subgoal):\n 1. dim_vec v = dim_row (outer_prod v w - outer_prod x w)", "by (metis carrier_matD(1) carrier_vec_dim_vec index_minus_mat(2))"], ["proof (state)\nthis:\n  dim_vec v = dim_row apw\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_row paw = dim_row apw\n 3. dim_col paw = dim_col apw", "finally"], ["proof (chain)\npicking this:\n  dim_row paw = dim_row apw", "show dr: \"dim_row paw = dim_row apw\""], ["proof (prove)\nusing this:\n  dim_row paw = dim_row apw\n\ngoal (1 subgoal):\n 1. dim_row paw = dim_row apw", "."], ["proof (state)\nthis:\n  dim_row paw = dim_row apw\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_col paw = dim_col apw", "have cw: \"dim_col paw = dim_vec w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col paw = dim_vec w", "unfolding paw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (outer_prod (v - x) w) = dim_vec w", "using outer_prod_dim assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n  dim_vec v = dim_vec x\n\ngoal (1 subgoal):\n 1. dim_col (outer_prod (v - x) w) = dim_vec w", "using carrier_vec_dim_vec"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n  dim_vec v = dim_vec x\n  ?v \\<in> carrier_vec (dim_vec ?v)\n\ngoal (1 subgoal):\n 1. dim_col (outer_prod (v - x) w) = dim_vec w", "by (metis carrier_matD(2))"], ["proof (state)\nthis:\n  dim_col paw = dim_vec w\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_col paw = dim_col apw", "also"], ["proof (state)\nthis:\n  dim_col paw = dim_vec w\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_col paw = dim_col apw", "have \"... = dim_col apw\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec w = dim_col apw", "unfolding apw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec w = dim_col (outer_prod v w - outer_prod x w)", "using outer_prod_dim"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n\ngoal (1 subgoal):\n 1. dim_vec w = dim_col (outer_prod v w - outer_prod x w)", "by (metis apw_def carrier_matD(2) carrier_vec_dim_vec minus_carrier_mat)"], ["proof (state)\nthis:\n  dim_vec w = dim_col apw\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_col paw = dim_col apw", "finally"], ["proof (chain)\npicking this:\n  dim_col paw = dim_col apw", "show dc: \"dim_col paw = dim_col apw\""], ["proof (prove)\nusing this:\n  dim_col paw = dim_col apw\n\ngoal (1 subgoal):\n 1. dim_col paw = dim_col apw", "."], ["proof (state)\nthis:\n  dim_col paw = dim_col apw\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "show \"\\<And>i j. i < dim_row apw \\<Longrightarrow> j < dim_col apw \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "assume  \"i < dim_row apw\" and \"j < dim_col apw\""], ["proof (state)\nthis:\n  i < dim_row apw\n  j < dim_col apw\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "note ij = this"], ["proof (state)\nthis:\n  i < dim_row apw\n  j < dim_col apw\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "hence \"paw $$ (i,j) = (Matrix.vec_index v i - Matrix.vec_index x i) * \n        cnj (Matrix.vec_index w j)\""], ["proof (prove)\nusing this:\n  i < dim_row apw\n  j < dim_col apw\n\ngoal (1 subgoal):\n 1. paw $$ (i, j) = (v $ i - x $ i) * cnj (w $ j)", "using dr dc"], ["proof (prove)\nusing this:\n  i < dim_row apw\n  j < dim_col apw\n  dim_row paw = dim_row apw\n  dim_col paw = dim_col apw\n\ngoal (1 subgoal):\n 1. paw $$ (i, j) = (v $ i - x $ i) * cnj (w $ j)", "unfolding  paw_def outer_prod_def"], ["proof (prove)\nusing this:\n  i < dim_row apw\n  j < dim_col apw\n  dim_row\n   (Matrix.mat (dim_vec (v - x)) 1 (\\<lambda>(i, j). (v - x) $ i) *\n    Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)) =\n  dim_row apw\n  dim_col\n   (Matrix.mat (dim_vec (v - x)) 1 (\\<lambda>(i, j). (v - x) $ i) *\n    Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)) =\n  dim_col apw\n\ngoal (1 subgoal):\n 1. (Matrix.mat (dim_vec (v - x)) 1 (\\<lambda>(i, j). (v - x) $ i) *\n     Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)) $$\n    (i, j) =\n    (v $ i - x $ i) * cnj (w $ j)", "by simp"], ["proof (state)\nthis:\n  paw $$ (i, j) = (v $ i - x $ i) * cnj (w $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "also"], ["proof (state)\nthis:\n  paw $$ (i, j) = (v $ i - x $ i) * cnj (w $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "have \"... = Matrix.vec_index v i * cnj (Matrix.vec_index w j) - \n        Matrix.vec_index x i * cnj (Matrix.vec_index w j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v $ i - x $ i) * cnj (w $ j) =\n    v $ i * cnj (w $ j) - x $ i * cnj (w $ j)", "by (simp add: ring_class.ring_distribs)"], ["proof (state)\nthis:\n  (v $ i - x $ i) * cnj (w $ j) = v $ i * cnj (w $ j) - x $ i * cnj (w $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "also"], ["proof (state)\nthis:\n  (v $ i - x $ i) * cnj (w $ j) = v $ i * cnj (w $ j) - x $ i * cnj (w $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "have \"... = (outer_prod v w) $$ (i,j) - (outer_prod x w) $$ (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v $ i * cnj (w $ j) - x $ i * cnj (w $ j) =\n    outer_prod v w $$ (i, j) - outer_prod x w $$ (i, j)", "using rv cw dr dc ij assms"], ["proof (prove)\nusing this:\n  dim_row paw = dim_vec v\n  dim_col paw = dim_vec w\n  dim_row paw = dim_row apw\n  dim_col paw = dim_col apw\n  i < dim_row apw\n  j < dim_col apw\n  dim_vec v = dim_vec x\n\ngoal (1 subgoal):\n 1. v $ i * cnj (w $ j) - x $ i * cnj (w $ j) =\n    outer_prod v w $$ (i, j) - outer_prod x w $$ (i, j)", "unfolding outer_prod_def"], ["proof (prove)\nusing this:\n  dim_row paw = dim_vec v\n  dim_col paw = dim_vec w\n  dim_row paw = dim_row apw\n  dim_col paw = dim_col apw\n  i < dim_row apw\n  j < dim_col apw\n  dim_vec v = dim_vec x\n\ngoal (1 subgoal):\n 1. v $ i * cnj (w $ j) - x $ i * cnj (w $ j) =\n    (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n     Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)) $$\n    (i, j) -\n    (Matrix.mat (dim_vec x) 1 (\\<lambda>(i, j). x $ i) *\n     Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)) $$\n    (i, j)", "by auto"], ["proof (state)\nthis:\n  v $ i * cnj (w $ j) - x $ i * cnj (w $ j) =\n  outer_prod v w $$ (i, j) - outer_prod x w $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "also"], ["proof (state)\nthis:\n  v $ i * cnj (w $ j) - x $ i * cnj (w $ j) =\n  outer_prod v w $$ (i, j) - outer_prod x w $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "have \"... = apw $$ (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. outer_prod v w $$ (i, j) - outer_prod x w $$ (i, j) = apw $$ (i, j)", "using dr dc ij"], ["proof (prove)\nusing this:\n  dim_row paw = dim_row apw\n  dim_col paw = dim_col apw\n  i < dim_row apw\n  j < dim_col apw\n\ngoal (1 subgoal):\n 1. outer_prod v w $$ (i, j) - outer_prod x w $$ (i, j) = apw $$ (i, j)", "unfolding apw_def outer_prod_def"], ["proof (prove)\nusing this:\n  dim_row paw =\n  dim_row\n   (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n    Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y) -\n    Matrix.mat (dim_vec x) 1 (\\<lambda>(i, j). x $ i) *\n    Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y))\n  dim_col paw =\n  dim_col\n   (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n    Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y) -\n    Matrix.mat (dim_vec x) 1 (\\<lambda>(i, j). x $ i) *\n    Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y))\n  i < dim_row\n       (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n        Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y) -\n        Matrix.mat (dim_vec x) 1 (\\<lambda>(i, j). x $ i) *\n        Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y))\n  j < dim_col\n       (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n        Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y) -\n        Matrix.mat (dim_vec x) 1 (\\<lambda>(i, j). x $ i) *\n        Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y))\n\ngoal (1 subgoal):\n 1. (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n     Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)) $$\n    (i, j) -\n    (Matrix.mat (dim_vec x) 1 (\\<lambda>(i, j). x $ i) *\n     Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)) $$\n    (i, j) =\n    (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n     Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y) -\n     Matrix.mat (dim_vec x) 1 (\\<lambda>(i, j). x $ i) *\n     Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)) $$\n    (i, j)", "by simp"], ["proof (state)\nthis:\n  outer_prod v w $$ (i, j) - outer_prod x w $$ (i, j) = apw $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "finally"], ["proof (chain)\npicking this:\n  paw $$ (i, j) = apw $$ (i, j)", "show \"paw $$ (i, j) = apw $$ (i, j)\""], ["proof (prove)\nusing this:\n  paw $$ (i, j) = apw $$ (i, j)\n\ngoal (1 subgoal):\n 1. paw $$ (i, j) = apw $$ (i, j)", "."], ["proof (state)\nthis:\n  paw $$ (i, j) = apw $$ (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?i < dim_row apw; ?j < dim_col apw\\<rbrakk>\n  \\<Longrightarrow> paw $$ (?i, ?j) = apw $$ (?i, ?j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  paw = apw\n\ngoal (1 subgoal):\n 1. outer_prod (v - x) w = outer_prod v w - outer_prod x w", "thus ?thesis"], ["proof (prove)\nusing this:\n  paw = apw\n\ngoal (1 subgoal):\n 1. outer_prod (v - x) w = outer_prod v w - outer_prod x w", "unfolding paw_def apw_def"], ["proof (prove)\nusing this:\n  outer_prod (v - x) w = outer_prod v w - outer_prod x w\n\ngoal (1 subgoal):\n 1. outer_prod (v - x) w = outer_prod v w - outer_prod x w", "by simp"], ["proof (state)\nthis:\n  outer_prod (v - x) w = outer_prod v w - outer_prod x w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma outer_prod_minus_right:\n  fixes v::\"complex Matrix.vec\"\n  assumes \"dim_vec w = dim_vec x\"\n  shows \"outer_prod v (w - x) = outer_prod v w - (outer_prod v x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. outer_prod v (w - x) = outer_prod v w - outer_prod v x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. outer_prod v (w - x) = outer_prod v w - outer_prod v x", "define paw where \"paw = outer_prod v (w-x)\""], ["proof (state)\nthis:\n  paw = outer_prod v (w - x)\n\ngoal (1 subgoal):\n 1. outer_prod v (w - x) = outer_prod v w - outer_prod v x", "define apw where \"apw = outer_prod v w - (outer_prod v x)\""], ["proof (state)\nthis:\n  apw = outer_prod v w - outer_prod v x\n\ngoal (1 subgoal):\n 1. outer_prod v (w - x) = outer_prod v w - outer_prod v x", "have \"paw = apw\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paw = apw", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_row paw = dim_row apw\n 3. dim_col paw = dim_col apw", "have rv: \"dim_row paw = dim_vec v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row paw = dim_vec v", "unfolding paw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (outer_prod v (w - x)) = dim_vec v", "using outer_prod_dim assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n  dim_vec w = dim_vec x\n\ngoal (1 subgoal):\n 1. dim_row (outer_prod v (w - x)) = dim_vec v", "by (metis carrier_matD(1) carrier_vec_dim_vec paw_def)"], ["proof (state)\nthis:\n  dim_row paw = dim_vec v\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_row paw = dim_row apw\n 3. dim_col paw = dim_col apw", "also"], ["proof (state)\nthis:\n  dim_row paw = dim_vec v\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_row paw = dim_row apw\n 3. dim_col paw = dim_col apw", "have \"... = dim_row apw\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec v = dim_row apw", "unfolding apw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec v = dim_row (outer_prod v w - outer_prod v x)", "using outer_prod_dim assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n  dim_vec w = dim_vec x\n\ngoal (1 subgoal):\n 1. dim_vec v = dim_row (outer_prod v w - outer_prod v x)", "by (metis carrier_matD(1) carrier_vec_dim_vec index_minus_mat(2))"], ["proof (state)\nthis:\n  dim_vec v = dim_row apw\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_row paw = dim_row apw\n 3. dim_col paw = dim_col apw", "finally"], ["proof (chain)\npicking this:\n  dim_row paw = dim_row apw", "show dr: \"dim_row paw = dim_row apw\""], ["proof (prove)\nusing this:\n  dim_row paw = dim_row apw\n\ngoal (1 subgoal):\n 1. dim_row paw = dim_row apw", "."], ["proof (state)\nthis:\n  dim_row paw = dim_row apw\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_col paw = dim_col apw", "have cw: \"dim_col paw = dim_vec w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col paw = dim_vec w", "unfolding paw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (outer_prod v (w - x)) = dim_vec w", "using outer_prod_dim assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n  dim_vec w = dim_vec x\n\ngoal (1 subgoal):\n 1. dim_col (outer_prod v (w - x)) = dim_vec w", "using carrier_vec_dim_vec"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n  dim_vec w = dim_vec x\n  ?v \\<in> carrier_vec (dim_vec ?v)\n\ngoal (1 subgoal):\n 1. dim_col (outer_prod v (w - x)) = dim_vec w", "by (metis carrier_matD(2) index_minus_vec(2) paw_def)"], ["proof (state)\nthis:\n  dim_col paw = dim_vec w\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_col paw = dim_col apw", "also"], ["proof (state)\nthis:\n  dim_col paw = dim_vec w\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_col paw = dim_col apw", "have \"... = dim_col apw\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec w = dim_col apw", "unfolding apw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec w = dim_col (outer_prod v w - outer_prod v x)", "using outer_prod_dim"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n\ngoal (1 subgoal):\n 1. dim_vec w = dim_col (outer_prod v w - outer_prod v x)", "by (metis assms carrier_matD(2) carrier_vec_dim_vec index_minus_mat(3))"], ["proof (state)\nthis:\n  dim_vec w = dim_col apw\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\n 2. dim_col paw = dim_col apw", "finally"], ["proof (chain)\npicking this:\n  dim_col paw = dim_col apw", "show dc: \"dim_col paw = dim_col apw\""], ["proof (prove)\nusing this:\n  dim_col paw = dim_col apw\n\ngoal (1 subgoal):\n 1. dim_col paw = dim_col apw", "."], ["proof (state)\nthis:\n  dim_col paw = dim_col apw\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "show \"\\<And>i j. i < dim_row apw \\<Longrightarrow> j < dim_col apw \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "assume  \"i < dim_row apw\" and \"j < dim_col apw\""], ["proof (state)\nthis:\n  i < dim_row apw\n  j < dim_col apw\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "note ij = this"], ["proof (state)\nthis:\n  i < dim_row apw\n  j < dim_col apw\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "hence \"paw $$ (i,j) = Matrix.vec_index v i * \n        (cnj (Matrix.vec_index w j - (Matrix.vec_index x j)))\""], ["proof (prove)\nusing this:\n  i < dim_row apw\n  j < dim_col apw\n\ngoal (1 subgoal):\n 1. paw $$ (i, j) = v $ i * cnj (w $ j - x $ j)", "using dr dc"], ["proof (prove)\nusing this:\n  i < dim_row apw\n  j < dim_col apw\n  dim_row paw = dim_row apw\n  dim_col paw = dim_col apw\n\ngoal (1 subgoal):\n 1. paw $$ (i, j) = v $ i * cnj (w $ j - x $ j)", "unfolding  paw_def outer_prod_def"], ["proof (prove)\nusing this:\n  i < dim_row apw\n  j < dim_col apw\n  dim_row\n   (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n    Matrix.mat 1 (dim_vec (w - x))\n     (\\<lambda>(i, y). conjugate (w - x) $ y)) =\n  dim_row apw\n  dim_col\n   (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n    Matrix.mat 1 (dim_vec (w - x))\n     (\\<lambda>(i, y). conjugate (w - x) $ y)) =\n  dim_col apw\n\ngoal (1 subgoal):\n 1. (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n     Matrix.mat 1 (dim_vec (w - x))\n      (\\<lambda>(i, y). conjugate (w - x) $ y)) $$\n    (i, j) =\n    v $ i * cnj (w $ j - x $ j)", "by simp"], ["proof (state)\nthis:\n  paw $$ (i, j) = v $ i * cnj (w $ j - x $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "also"], ["proof (state)\nthis:\n  paw $$ (i, j) = v $ i * cnj (w $ j - x $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "have \"... = Matrix.vec_index v i * cnj (Matrix.vec_index w j) - \n        Matrix.vec_index v i * cnj (Matrix.vec_index x j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v $ i * cnj (w $ j - x $ j) = v $ i * cnj (w $ j) - v $ i * cnj (x $ j)", "by (simp add: ring_class.ring_distribs)"], ["proof (state)\nthis:\n  v $ i * cnj (w $ j - x $ j) = v $ i * cnj (w $ j) - v $ i * cnj (x $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "also"], ["proof (state)\nthis:\n  v $ i * cnj (w $ j - x $ j) = v $ i * cnj (w $ j) - v $ i * cnj (x $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "have \"... = (outer_prod v w) $$ (i,j) - (outer_prod v x) $$ (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v $ i * cnj (w $ j) - v $ i * cnj (x $ j) =\n    outer_prod v w $$ (i, j) - outer_prod v x $$ (i, j)", "using rv cw dr dc ij assms"], ["proof (prove)\nusing this:\n  dim_row paw = dim_vec v\n  dim_col paw = dim_vec w\n  dim_row paw = dim_row apw\n  dim_col paw = dim_col apw\n  i < dim_row apw\n  j < dim_col apw\n  dim_vec w = dim_vec x\n\ngoal (1 subgoal):\n 1. v $ i * cnj (w $ j) - v $ i * cnj (x $ j) =\n    outer_prod v w $$ (i, j) - outer_prod v x $$ (i, j)", "unfolding outer_prod_def"], ["proof (prove)\nusing this:\n  dim_row paw = dim_vec v\n  dim_col paw = dim_vec w\n  dim_row paw = dim_row apw\n  dim_col paw = dim_col apw\n  i < dim_row apw\n  j < dim_col apw\n  dim_vec w = dim_vec x\n\ngoal (1 subgoal):\n 1. v $ i * cnj (w $ j) - v $ i * cnj (x $ j) =\n    (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n     Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)) $$\n    (i, j) -\n    (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n     Matrix.mat 1 (dim_vec x) (\\<lambda>(i, y). conjugate x $ y)) $$\n    (i, j)", "by auto"], ["proof (state)\nthis:\n  v $ i * cnj (w $ j) - v $ i * cnj (x $ j) =\n  outer_prod v w $$ (i, j) - outer_prod v x $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "also"], ["proof (state)\nthis:\n  v $ i * cnj (w $ j) - v $ i * cnj (x $ j) =\n  outer_prod v w $$ (i, j) - outer_prod v x $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "have \"... = apw $$ (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. outer_prod v w $$ (i, j) - outer_prod v x $$ (i, j) = apw $$ (i, j)", "using dr dc ij"], ["proof (prove)\nusing this:\n  dim_row paw = dim_row apw\n  dim_col paw = dim_col apw\n  i < dim_row apw\n  j < dim_col apw\n\ngoal (1 subgoal):\n 1. outer_prod v w $$ (i, j) - outer_prod v x $$ (i, j) = apw $$ (i, j)", "unfolding apw_def outer_prod_def"], ["proof (prove)\nusing this:\n  dim_row paw =\n  dim_row\n   (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n    Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y) -\n    Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n    Matrix.mat 1 (dim_vec x) (\\<lambda>(i, y). conjugate x $ y))\n  dim_col paw =\n  dim_col\n   (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n    Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y) -\n    Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n    Matrix.mat 1 (dim_vec x) (\\<lambda>(i, y). conjugate x $ y))\n  i < dim_row\n       (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n        Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y) -\n        Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n        Matrix.mat 1 (dim_vec x) (\\<lambda>(i, y). conjugate x $ y))\n  j < dim_col\n       (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n        Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y) -\n        Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n        Matrix.mat 1 (dim_vec x) (\\<lambda>(i, y). conjugate x $ y))\n\ngoal (1 subgoal):\n 1. (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n     Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y)) $$\n    (i, j) -\n    (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n     Matrix.mat 1 (dim_vec x) (\\<lambda>(i, y). conjugate x $ y)) $$\n    (i, j) =\n    (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n     Matrix.mat 1 (dim_vec w) (\\<lambda>(i, y). conjugate w $ y) -\n     Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n     Matrix.mat 1 (dim_vec x) (\\<lambda>(i, y). conjugate x $ y)) $$\n    (i, j)", "by simp"], ["proof (state)\nthis:\n  outer_prod v w $$ (i, j) - outer_prod v x $$ (i, j) = apw $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row apw; j < dim_col apw\\<rbrakk>\n       \\<Longrightarrow> paw $$ (i, j) = apw $$ (i, j)", "finally"], ["proof (chain)\npicking this:\n  paw $$ (i, j) = apw $$ (i, j)", "show \"paw $$ (i, j) = apw $$ (i, j)\""], ["proof (prove)\nusing this:\n  paw $$ (i, j) = apw $$ (i, j)\n\ngoal (1 subgoal):\n 1. paw $$ (i, j) = apw $$ (i, j)", "."], ["proof (state)\nthis:\n  paw $$ (i, j) = apw $$ (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?i < dim_row apw; ?j < dim_col apw\\<rbrakk>\n  \\<Longrightarrow> paw $$ (?i, ?j) = apw $$ (?i, ?j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  paw = apw\n\ngoal (1 subgoal):\n 1. outer_prod v (w - x) = outer_prod v w - outer_prod v x", "thus ?thesis"], ["proof (prove)\nusing this:\n  paw = apw\n\ngoal (1 subgoal):\n 1. outer_prod v (w - x) = outer_prod v w - outer_prod v x", "unfolding paw_def apw_def"], ["proof (prove)\nusing this:\n  outer_prod v (w - x) = outer_prod v w - outer_prod v x\n\ngoal (1 subgoal):\n 1. outer_prod v (w - x) = outer_prod v w - outer_prod v x", "by simp"], ["proof (state)\nthis:\n  outer_prod v (w - x) = outer_prod v w - outer_prod v x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma outer_minus_minus:\n  fixes a::\"complex Matrix.vec\" \n  assumes \"dim_vec a = dim_vec b\"\n  and \"dim_vec u = dim_vec v\"\n  shows \"outer_prod (a - b) (u - v) = outer_prod a u - outer_prod a v -\n      outer_prod b u +  outer_prod b v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. outer_prod (a - b) (u - v) =\n    outer_prod a u - outer_prod a v - outer_prod b u + outer_prod b v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. outer_prod (a - b) (u - v) =\n    outer_prod a u - outer_prod a v - outer_prod b u + outer_prod b v", "have \"outer_prod (a - b) (u - v) = outer_prod a (u - v)\n    - outer_prod b (u - v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. outer_prod (a - b) (u - v) = outer_prod a (u - v) - outer_prod b (u - v)", "using  outer_prod_minus_left assms"], ["proof (prove)\nusing this:\n  dim_vec ?v = dim_vec ?x \\<Longrightarrow>\n  outer_prod (?v - ?x) ?w = outer_prod ?v ?w - outer_prod ?x ?w\n  dim_vec a = dim_vec b\n  dim_vec u = dim_vec v\n\ngoal (1 subgoal):\n 1. outer_prod (a - b) (u - v) = outer_prod a (u - v) - outer_prod b (u - v)", "by simp"], ["proof (state)\nthis:\n  outer_prod (a - b) (u - v) = outer_prod a (u - v) - outer_prod b (u - v)\n\ngoal (1 subgoal):\n 1. outer_prod (a - b) (u - v) =\n    outer_prod a u - outer_prod a v - outer_prod b u + outer_prod b v", "also"], ["proof (state)\nthis:\n  outer_prod (a - b) (u - v) = outer_prod a (u - v) - outer_prod b (u - v)\n\ngoal (1 subgoal):\n 1. outer_prod (a - b) (u - v) =\n    outer_prod a u - outer_prod a v - outer_prod b u + outer_prod b v", "have \"... = outer_prod a u - outer_prod a v -\n    outer_prod b (u - v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. outer_prod a (u - v) - outer_prod b (u - v) =\n    outer_prod a u - outer_prod a v - outer_prod b (u - v)", "using assms outer_prod_minus_right"], ["proof (prove)\nusing this:\n  dim_vec a = dim_vec b\n  dim_vec u = dim_vec v\n  dim_vec ?w = dim_vec ?x \\<Longrightarrow>\n  outer_prod ?v (?w - ?x) = outer_prod ?v ?w - outer_prod ?v ?x\n\ngoal (1 subgoal):\n 1. outer_prod a (u - v) - outer_prod b (u - v) =\n    outer_prod a u - outer_prod a v - outer_prod b (u - v)", "by simp"], ["proof (state)\nthis:\n  outer_prod a (u - v) - outer_prod b (u - v) =\n  outer_prod a u - outer_prod a v - outer_prod b (u - v)\n\ngoal (1 subgoal):\n 1. outer_prod (a - b) (u - v) =\n    outer_prod a u - outer_prod a v - outer_prod b u + outer_prod b v", "also"], ["proof (state)\nthis:\n  outer_prod a (u - v) - outer_prod b (u - v) =\n  outer_prod a u - outer_prod a v - outer_prod b (u - v)\n\ngoal (1 subgoal):\n 1. outer_prod (a - b) (u - v) =\n    outer_prod a u - outer_prod a v - outer_prod b u + outer_prod b v", "have \"... = outer_prod a u - outer_prod a v -\n    (outer_prod b u - outer_prod b v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. outer_prod a u - outer_prod a v - outer_prod b (u - v) =\n    outer_prod a u - outer_prod a v - (outer_prod b u - outer_prod b v)", "using assms outer_prod_minus_right"], ["proof (prove)\nusing this:\n  dim_vec a = dim_vec b\n  dim_vec u = dim_vec v\n  dim_vec ?w = dim_vec ?x \\<Longrightarrow>\n  outer_prod ?v (?w - ?x) = outer_prod ?v ?w - outer_prod ?v ?x\n\ngoal (1 subgoal):\n 1. outer_prod a u - outer_prod a v - outer_prod b (u - v) =\n    outer_prod a u - outer_prod a v - (outer_prod b u - outer_prod b v)", "by simp"], ["proof (state)\nthis:\n  outer_prod a u - outer_prod a v - outer_prod b (u - v) =\n  outer_prod a u - outer_prod a v - (outer_prod b u - outer_prod b v)\n\ngoal (1 subgoal):\n 1. outer_prod (a - b) (u - v) =\n    outer_prod a u - outer_prod a v - outer_prod b u + outer_prod b v", "also"], ["proof (state)\nthis:\n  outer_prod a u - outer_prod a v - outer_prod b (u - v) =\n  outer_prod a u - outer_prod a v - (outer_prod b u - outer_prod b v)\n\ngoal (1 subgoal):\n 1. outer_prod (a - b) (u - v) =\n    outer_prod a u - outer_prod a v - outer_prod b u + outer_prod b v", "have \"...  = outer_prod a u - outer_prod a v -\n    outer_prod b u +  outer_prod b v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. outer_prod a u - outer_prod a v - (outer_prod b u - outer_prod b v) =\n    outer_prod a u - outer_prod a v - outer_prod b u + outer_prod b v", "proof (rule mat_minus_minus)"], ["proof (state)\ngoal (3 subgoals):\n 1. outer_prod a u - outer_prod a v \\<in> carrier_mat ?n ?m\n 2. outer_prod b u \\<in> carrier_mat ?n ?m\n 3. outer_prod b v \\<in> carrier_mat ?n ?m", "show \"outer_prod b u \\<in> carrier_mat (dim_vec b) (dim_vec u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. outer_prod b u \\<in> carrier_mat (dim_vec b) (dim_vec u)", "by simp"], ["proof (state)\nthis:\n  outer_prod b u \\<in> carrier_mat (dim_vec b) (dim_vec u)\n\ngoal (2 subgoals):\n 1. outer_prod a u - outer_prod a v\n    \\<in> carrier_mat (dim_vec b) (dim_vec u)\n 2. outer_prod b v \\<in> carrier_mat (dim_vec b) (dim_vec u)", "show \"outer_prod b v \\<in> carrier_mat (dim_vec b) (dim_vec u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. outer_prod b v \\<in> carrier_mat (dim_vec b) (dim_vec u)", "using assms"], ["proof (prove)\nusing this:\n  dim_vec a = dim_vec b\n  dim_vec u = dim_vec v\n\ngoal (1 subgoal):\n 1. outer_prod b v \\<in> carrier_mat (dim_vec b) (dim_vec u)", "by simp"], ["proof (state)\nthis:\n  outer_prod b v \\<in> carrier_mat (dim_vec b) (dim_vec u)\n\ngoal (1 subgoal):\n 1. outer_prod a u - outer_prod a v\n    \\<in> carrier_mat (dim_vec b) (dim_vec u)", "show \"outer_prod a u - outer_prod a v \\<in> carrier_mat (dim_vec b) (dim_vec u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. outer_prod a u - outer_prod a v\n    \\<in> carrier_mat (dim_vec b) (dim_vec u)", "using assms"], ["proof (prove)\nusing this:\n  dim_vec a = dim_vec b\n  dim_vec u = dim_vec v\n\ngoal (1 subgoal):\n 1. outer_prod a u - outer_prod a v\n    \\<in> carrier_mat (dim_vec b) (dim_vec u)", "by (metis carrier_vecI minus_carrier_mat outer_prod_dim)"], ["proof (state)\nthis:\n  outer_prod a u - outer_prod a v \\<in> carrier_mat (dim_vec b) (dim_vec u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  outer_prod a u - outer_prod a v - (outer_prod b u - outer_prod b v) =\n  outer_prod a u - outer_prod a v - outer_prod b u + outer_prod b v\n\ngoal (1 subgoal):\n 1. outer_prod (a - b) (u - v) =\n    outer_prod a u - outer_prod a v - outer_prod b u + outer_prod b v", "finally"], ["proof (chain)\npicking this:\n  outer_prod (a - b) (u - v) =\n  outer_prod a u - outer_prod a v - outer_prod b u + outer_prod b v", "show ?thesis"], ["proof (prove)\nusing this:\n  outer_prod (a - b) (u - v) =\n  outer_prod a u - outer_prod a v - outer_prod b u + outer_prod b v\n\ngoal (1 subgoal):\n 1. outer_prod (a - b) (u - v) =\n    outer_prod a u - outer_prod a v - outer_prod b u + outer_prod b v", "."], ["proof (state)\nthis:\n  outer_prod (a - b) (u - v) =\n  outer_prod a u - outer_prod a v - outer_prod b u + outer_prod b v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma  outer_trace_inner:\n  assumes \"A \\<in> carrier_mat n n\"\n  and \"dim_vec u = n\"\nand \"dim_vec v = n\"\n  shows \"Complex_Matrix.trace (outer_prod u v * A) = Complex_Matrix.inner_prod v (A *\\<^sub>v u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (outer_prod u v * A) =\n    Complex_Matrix.inner_prod v (A *\\<^sub>v u)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (outer_prod u v * A) =\n    Complex_Matrix.inner_prod v (A *\\<^sub>v u)", "have \"Complex_Matrix.trace (outer_prod u v * A) = Complex_Matrix.trace (A * outer_prod u v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (outer_prod u v * A) =\n    Complex_Matrix.trace (A * outer_prod u v)", "proof (rule trace_comm)"], ["proof (state)\ngoal (2 subgoals):\n 1. outer_prod u v \\<in> carrier_mat ?n ?n\n 2. A \\<in> carrier_mat ?n ?n", "show \"A \\<in> carrier_mat n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat n n", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  dim_vec u = n\n  dim_vec v = n\n\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat n n", "by simp"], ["proof (state)\nthis:\n  A \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. outer_prod u v \\<in> carrier_mat n n", "show \"outer_prod u v \\<in> carrier_mat n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. outer_prod u v \\<in> carrier_mat n n", "using  assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  dim_vec u = n\n  dim_vec v = n\n\ngoal (1 subgoal):\n 1. outer_prod u v \\<in> carrier_mat n n", "by (metis carrier_vec_dim_vec outer_prod_dim)"], ["proof (state)\nthis:\n  outer_prod u v \\<in> carrier_mat n n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Complex_Matrix.trace (outer_prod u v * A) =\n  Complex_Matrix.trace (A * outer_prod u v)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (outer_prod u v * A) =\n    Complex_Matrix.inner_prod v (A *\\<^sub>v u)", "also"], ["proof (state)\nthis:\n  Complex_Matrix.trace (outer_prod u v * A) =\n  Complex_Matrix.trace (A * outer_prod u v)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (outer_prod u v * A) =\n    Complex_Matrix.inner_prod v (A *\\<^sub>v u)", "have \"... = Complex_Matrix.inner_prod v (A *\\<^sub>v u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (A * outer_prod u v) =\n    Complex_Matrix.inner_prod v (A *\\<^sub>v u)", "using trace_outer_prod_right[of A n u v]\n    assms   carrier_vec_dim_vec"], ["proof (prove)\nusing this:\n  \\<lbrakk>A \\<in> carrier_mat n n; u \\<in> carrier_vec n;\n   v \\<in> carrier_vec n\\<rbrakk>\n  \\<Longrightarrow> Complex_Matrix.trace (A * outer_prod u v) =\n                    Complex_Matrix.inner_prod v (A *\\<^sub>v u)\n  A \\<in> carrier_mat n n\n  dim_vec u = n\n  dim_vec v = n\n  ?v \\<in> carrier_vec (dim_vec ?v)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (A * outer_prod u v) =\n    Complex_Matrix.inner_prod v (A *\\<^sub>v u)", "by metis"], ["proof (state)\nthis:\n  Complex_Matrix.trace (A * outer_prod u v) =\n  Complex_Matrix.inner_prod v (A *\\<^sub>v u)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (outer_prod u v * A) =\n    Complex_Matrix.inner_prod v (A *\\<^sub>v u)", "finally"], ["proof (chain)\npicking this:\n  Complex_Matrix.trace (outer_prod u v * A) =\n  Complex_Matrix.inner_prod v (A *\\<^sub>v u)", "show ?thesis"], ["proof (prove)\nusing this:\n  Complex_Matrix.trace (outer_prod u v * A) =\n  Complex_Matrix.inner_prod v (A *\\<^sub>v u)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (outer_prod u v * A) =\n    Complex_Matrix.inner_prod v (A *\\<^sub>v u)", "."], ["proof (state)\nthis:\n  Complex_Matrix.trace (outer_prod u v * A) =\n  Complex_Matrix.inner_prod v (A *\\<^sub>v u)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma zero_hermitian:\n  shows \"hermitian (0\\<^sub>m n n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hermitian (0\\<^sub>m n n)", "unfolding hermitian_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (0\\<^sub>m n n) = 0\\<^sub>m n n", "by (metis adjoint_minus hermitian_def hermitian_one minus_r_inv_mat one_carrier_mat)"], ["", "lemma  trace_1: \n  shows \"Complex_Matrix.trace ((1\\<^sub>m n)::complex Matrix.mat) =(n::complex)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (1\\<^sub>m n) = of_nat n", "using one_mat_def"], ["proof (prove)\nusing this:\n  1\\<^sub>m ?n \\<equiv>\n  Matrix.mat ?n ?n (\\<lambda>(i, j). if i = j then 1::?'a else (0::?'a))\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (1\\<^sub>m n) = of_nat n", "by (simp add: Complex_Matrix.trace_def Matrix.mat_def)"], ["", "lemma  trace_add: \n  assumes \"square_mat A\"\n  and \"square_mat B\"\n  and \"dim_row A = dim_row B\"\n  shows \"Complex_Matrix.trace (A + B) = Complex_Matrix.trace A + Complex_Matrix.trace B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (A + B) =\n    Complex_Matrix.trace A + Complex_Matrix.trace B", "using  assms"], ["proof (prove)\nusing this:\n  square_mat A\n  square_mat B\n  dim_row A = dim_row B\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (A + B) =\n    Complex_Matrix.trace A + Complex_Matrix.trace B", "by (simp add: Complex_Matrix.trace_def sum.distrib)"], ["", "lemma bra_vec_carrier:\n  shows \"bra_vec v \\<in> carrier_mat 1 (dim_vec v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bra_vec v \\<in> carrier_mat 1 (dim_vec v)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. bra_vec v \\<in> carrier_mat 1 (dim_vec v)", "have \"dim_row (ket_vec v) = dim_vec v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row |v\\<rangle> = dim_vec v", "unfolding ket_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i)) = dim_vec v", "by simp"], ["proof (state)\nthis:\n  dim_row |v\\<rangle> = dim_vec v\n\ngoal (1 subgoal):\n 1. bra_vec v \\<in> carrier_mat 1 (dim_vec v)", "thus ?thesis"], ["proof (prove)\nusing this:\n  dim_row |v\\<rangle> = dim_vec v\n\ngoal (1 subgoal):\n 1. bra_vec v \\<in> carrier_mat 1 (dim_vec v)", "using bra_bra_vec[of v] bra_def[of \"ket_vec v\"]"], ["proof (prove)\nusing this:\n  dim_row |v\\<rangle> = dim_vec v\n  \\<langle>|v\\<rangle>| = bra_vec v\n  \\<langle>|v\\<rangle>| \\<equiv>\n  Matrix.mat 1 (dim_row |v\\<rangle>)\n   (\\<lambda>(i, j). cnj (|v\\<rangle> $$ (j, i)))\n\ngoal (1 subgoal):\n 1. bra_vec v \\<in> carrier_mat 1 (dim_vec v)", "by simp"], ["proof (state)\nthis:\n  bra_vec v \\<in> carrier_mat 1 (dim_vec v)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mat_mult_ket_carrier:\n  assumes \"A\\<in> carrier_mat n m\"\nshows \"A * |v\\<rangle> \\<in> carrier_mat n 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A * |v\\<rangle> \\<in> carrier_mat n 1", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n m\n\ngoal (1 subgoal):\n 1. A * |v\\<rangle> \\<in> carrier_mat n 1", "by (metis bra_bra_vec bra_vec_carrier carrier_matD(1) carrier_matI dagger_of_ket_is_bra \n          dim_row_of_dagger index_mult_mat(2) index_mult_mat(3))"], ["", "lemma mat_mult_ket:\n  assumes \"A \\<in> carrier_mat n m\"\nand \"dim_vec v = m\"\nshows \"A * |v\\<rangle> = |A *\\<^sub>v v\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A * |v\\<rangle> = |A *\\<^sub>v v\\<rangle>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A * |v\\<rangle> = |A *\\<^sub>v v\\<rangle>", "have rn: \"dim_row (A * |v\\<rangle>) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (A * |v\\<rangle>) = n", "unfolding times_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row\n     (Matrix.mat (dim_row A) (dim_col |v\\<rangle>)\n       (\\<lambda>(i, j).\n           Matrix.row A i \\<bullet> Matrix.col |v\\<rangle> j)) =\n    n", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n m\n  dim_vec v = m\n\ngoal (1 subgoal):\n 1. dim_row\n     (Matrix.mat (dim_row A) (dim_col |v\\<rangle>)\n       (\\<lambda>(i, j).\n           Matrix.row A i \\<bullet> Matrix.col |v\\<rangle> j)) =\n    n", "by simp"], ["proof (state)\nthis:\n  dim_row (A * |v\\<rangle>) = n\n\ngoal (1 subgoal):\n 1. A * |v\\<rangle> = |A *\\<^sub>v v\\<rangle>", "have co: \"dim_col |A *\\<^sub>v v\\<rangle> = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col |A *\\<^sub>v v\\<rangle> = 1", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n m\n  dim_vec v = m\n\ngoal (1 subgoal):\n 1. dim_col |A *\\<^sub>v v\\<rangle> = 1", "unfolding ket_vec_def"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n m\n  dim_vec v = m\n\ngoal (1 subgoal):\n 1. dim_col\n     (Matrix.mat (dim_vec (A *\\<^sub>v v)) 1\n       (\\<lambda>(i, j). (A *\\<^sub>v v) $ i)) =\n    1", "by simp"], ["proof (state)\nthis:\n  dim_col |A *\\<^sub>v v\\<rangle> = 1\n\ngoal (1 subgoal):\n 1. A * |v\\<rangle> = |A *\\<^sub>v v\\<rangle>", "have cov: \"dim_col |v\\<rangle> = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col |v\\<rangle> = 1", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n m\n  dim_vec v = m\n\ngoal (1 subgoal):\n 1. dim_col |v\\<rangle> = 1", "unfolding ket_vec_def"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n m\n  dim_vec v = m\n\ngoal (1 subgoal):\n 1. dim_col (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i)) = 1", "by simp"], ["proof (state)\nthis:\n  dim_col |v\\<rangle> = 1\n\ngoal (1 subgoal):\n 1. A * |v\\<rangle> = |A *\\<^sub>v v\\<rangle>", "have er: \"dim_row (A * |v\\<rangle>) = dim_row |A *\\<^sub>v v\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (A * |v\\<rangle>) = dim_row |A *\\<^sub>v v\\<rangle>", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n m\n  dim_vec v = m\n\ngoal (1 subgoal):\n 1. dim_row (A * |v\\<rangle>) = dim_row |A *\\<^sub>v v\\<rangle>", "by (metis bra_bra_vec bra_vec_carrier carrier_matD(2) dagger_of_ket_is_bra dim_col_of_dagger \n        dim_mult_mat_vec index_mult_mat(2))"], ["proof (state)\nthis:\n  dim_row (A * |v\\<rangle>) = dim_row |A *\\<^sub>v v\\<rangle>\n\ngoal (1 subgoal):\n 1. A * |v\\<rangle> = |A *\\<^sub>v v\\<rangle>", "have ec: \"dim_col (A * |v\\<rangle>) = dim_col |A *\\<^sub>v v\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (A * |v\\<rangle>) = dim_col |A *\\<^sub>v v\\<rangle>", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n m\n  dim_vec v = m\n\ngoal (1 subgoal):\n 1. dim_col (A * |v\\<rangle>) = dim_col |A *\\<^sub>v v\\<rangle>", "by (metis carrier_matD(2) index_mult_mat(3) mat_mult_ket_carrier)"], ["proof (state)\nthis:\n  dim_col (A * |v\\<rangle>) = dim_col |A *\\<^sub>v v\\<rangle>\n\ngoal (1 subgoal):\n 1. A * |v\\<rangle> = |A *\\<^sub>v v\\<rangle>", "{"], ["proof (state)\nthis:\n  dim_col (A * |v\\<rangle>) = dim_col |A *\\<^sub>v v\\<rangle>\n\ngoal (1 subgoal):\n 1. A * |v\\<rangle> = |A *\\<^sub>v v\\<rangle>", "fix i::nat"], ["proof (state)\ngoal (1 subgoal):\n 1. A * |v\\<rangle> = |A *\\<^sub>v v\\<rangle>", "fix j::nat"], ["proof (state)\ngoal (1 subgoal):\n 1. A * |v\\<rangle> = |A *\\<^sub>v v\\<rangle>", "assume \"i < n\"\n    and \"j < 1\""], ["proof (state)\nthis:\n  i < n\n  j < 1\n\ngoal (1 subgoal):\n 1. A * |v\\<rangle> = |A *\\<^sub>v v\\<rangle>", "hence \"j = 0\""], ["proof (prove)\nusing this:\n  i < n\n  j < 1\n\ngoal (1 subgoal):\n 1. j = 0", "by simp"], ["proof (state)\nthis:\n  j = 0\n\ngoal (1 subgoal):\n 1. A * |v\\<rangle> = |A *\\<^sub>v v\\<rangle>", "have \"(A * |v\\<rangle>) $$ (i,0) = Matrix.scalar_prod (Matrix.row A i) (Matrix.col |v\\<rangle> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A * |v\\<rangle>) $$ (i, 0) =\n    Matrix.row A i \\<bullet> Matrix.col |v\\<rangle> 0", "using times_mat_def[of A] \\<open>i < n\\<close> rn cov"], ["proof (prove)\nusing this:\n  A * ?B \\<equiv>\n  Matrix.mat (dim_row A) (dim_col ?B)\n   (\\<lambda>(i, j). Matrix.row A i \\<bullet> Matrix.col ?B j)\n  i < n\n  dim_row (A * |v\\<rangle>) = n\n  dim_col |v\\<rangle> = 1\n\ngoal (1 subgoal):\n 1. (A * |v\\<rangle>) $$ (i, 0) =\n    Matrix.row A i \\<bullet> Matrix.col |v\\<rangle> 0", "by simp"], ["proof (state)\nthis:\n  (A * |v\\<rangle>) $$ (i, 0) =\n  Matrix.row A i \\<bullet> Matrix.col |v\\<rangle> 0\n\ngoal (1 subgoal):\n 1. A * |v\\<rangle> = |A *\\<^sub>v v\\<rangle>", "also"], ["proof (state)\nthis:\n  (A * |v\\<rangle>) $$ (i, 0) =\n  Matrix.row A i \\<bullet> Matrix.col |v\\<rangle> 0\n\ngoal (1 subgoal):\n 1. A * |v\\<rangle> = |A *\\<^sub>v v\\<rangle>", "have \"... = Matrix.scalar_prod (Matrix.row A i) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row A i \\<bullet> Matrix.col |v\\<rangle> 0 =\n    Matrix.row A i \\<bullet> v", "using ket_vec_col"], ["proof (prove)\nusing this:\n  Matrix.col |?v\\<rangle> 0 = ?v\n\ngoal (1 subgoal):\n 1. Matrix.row A i \\<bullet> Matrix.col |v\\<rangle> 0 =\n    Matrix.row A i \\<bullet> v", "by simp"], ["proof (state)\nthis:\n  Matrix.row A i \\<bullet> Matrix.col |v\\<rangle> 0 =\n  Matrix.row A i \\<bullet> v\n\ngoal (1 subgoal):\n 1. A * |v\\<rangle> = |A *\\<^sub>v v\\<rangle>", "also"], ["proof (state)\nthis:\n  Matrix.row A i \\<bullet> Matrix.col |v\\<rangle> 0 =\n  Matrix.row A i \\<bullet> v\n\ngoal (1 subgoal):\n 1. A * |v\\<rangle> = |A *\\<^sub>v v\\<rangle>", "have \"... =  |A *\\<^sub>v v\\<rangle> $$ (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row A i \\<bullet> v = |A *\\<^sub>v v\\<rangle> $$ (i, j)", "unfolding mult_mat_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row A i \\<bullet> v =\n    |Matrix.vec (dim_row A)\n      (\\<lambda>i. Matrix.row A i \\<bullet> v)\\<rangle> $$\n    (i, j)", "using \\<open>i < n\\<close> \\<open>j = 0\\<close> assms(1)"], ["proof (prove)\nusing this:\n  i < n\n  j = 0\n  A \\<in> carrier_mat n m\n\ngoal (1 subgoal):\n 1. Matrix.row A i \\<bullet> v =\n    |Matrix.vec (dim_row A)\n      (\\<lambda>i. Matrix.row A i \\<bullet> v)\\<rangle> $$\n    (i, j)", "by auto"], ["proof (state)\nthis:\n  Matrix.row A i \\<bullet> v = |A *\\<^sub>v v\\<rangle> $$ (i, j)\n\ngoal (1 subgoal):\n 1. A * |v\\<rangle> = |A *\\<^sub>v v\\<rangle>", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?i2 < n; ?j2 < 1\\<rbrakk>\n  \\<Longrightarrow> Matrix.row A ?i2 \\<bullet> v =\n                    |A *\\<^sub>v v\\<rangle> $$ (?i2, ?j2)\n\ngoal (1 subgoal):\n 1. A * |v\\<rangle> = |A *\\<^sub>v v\\<rangle>", "note idx = this"], ["proof (state)\nthis:\n  \\<lbrakk>?i2 < n; ?j2 < 1\\<rbrakk>\n  \\<Longrightarrow> Matrix.row A ?i2 \\<bullet> v =\n                    |A *\\<^sub>v v\\<rangle> $$ (?i2, ?j2)\n\ngoal (1 subgoal):\n 1. A * |v\\<rangle> = |A *\\<^sub>v v\\<rangle>", "have \"A * |v\\<rangle> = Matrix.mat n 1 (\\<lambda>(i, j). Matrix.scalar_prod (Matrix.row A i) (Matrix.col |v\\<rangle> j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A * |v\\<rangle> =\n    Matrix.mat n 1\n     (\\<lambda>(i, j). Matrix.row A i \\<bullet> Matrix.col |v\\<rangle> j)", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n m\n  dim_vec v = m\n\ngoal (1 subgoal):\n 1. A * |v\\<rangle> =\n    Matrix.mat n 1\n     (\\<lambda>(i, j). Matrix.row A i \\<bullet> Matrix.col |v\\<rangle> j)", "unfolding times_mat_def ket_vec_def"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n m\n  dim_vec v = m\n\ngoal (1 subgoal):\n 1. Matrix.mat (dim_row A)\n     (dim_col (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i)))\n     (\\<lambda>(i, j).\n         Matrix.row A i \\<bullet>\n         Matrix.col (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i)) j) =\n    Matrix.mat n 1\n     (\\<lambda>(i, j).\n         Matrix.row A i \\<bullet>\n         Matrix.col (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i)) j)", "by simp"], ["proof (state)\nthis:\n  A * |v\\<rangle> =\n  Matrix.mat n 1\n   (\\<lambda>(i, j). Matrix.row A i \\<bullet> Matrix.col |v\\<rangle> j)\n\ngoal (1 subgoal):\n 1. A * |v\\<rangle> = |A *\\<^sub>v v\\<rangle>", "also"], ["proof (state)\nthis:\n  A * |v\\<rangle> =\n  Matrix.mat n 1\n   (\\<lambda>(i, j). Matrix.row A i \\<bullet> Matrix.col |v\\<rangle> j)\n\ngoal (1 subgoal):\n 1. A * |v\\<rangle> = |A *\\<^sub>v v\\<rangle>", "have \"... = |A *\\<^sub>v v\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.mat n 1\n     (\\<lambda>(i, j). Matrix.row A i \\<bullet> Matrix.col |v\\<rangle> j) =\n    |A *\\<^sub>v v\\<rangle>", "using er ec idx rn co"], ["proof (prove)\nusing this:\n  dim_row (A * |v\\<rangle>) = dim_row |A *\\<^sub>v v\\<rangle>\n  dim_col (A * |v\\<rangle>) = dim_col |A *\\<^sub>v v\\<rangle>\n  \\<lbrakk>?i2 < n; ?j2 < 1\\<rbrakk>\n  \\<Longrightarrow> Matrix.row A ?i2 \\<bullet> v =\n                    |A *\\<^sub>v v\\<rangle> $$ (?i2, ?j2)\n  dim_row (A * |v\\<rangle>) = n\n  dim_col |A *\\<^sub>v v\\<rangle> = 1\n\ngoal (1 subgoal):\n 1. Matrix.mat n 1\n     (\\<lambda>(i, j). Matrix.row A i \\<bullet> Matrix.col |v\\<rangle> j) =\n    |A *\\<^sub>v v\\<rangle>", "by auto"], ["proof (state)\nthis:\n  Matrix.mat n 1\n   (\\<lambda>(i, j). Matrix.row A i \\<bullet> Matrix.col |v\\<rangle> j) =\n  |A *\\<^sub>v v\\<rangle>\n\ngoal (1 subgoal):\n 1. A * |v\\<rangle> = |A *\\<^sub>v v\\<rangle>", "finally"], ["proof (chain)\npicking this:\n  A * |v\\<rangle> = |A *\\<^sub>v v\\<rangle>", "show ?thesis"], ["proof (prove)\nusing this:\n  A * |v\\<rangle> = |A *\\<^sub>v v\\<rangle>\n\ngoal (1 subgoal):\n 1. A * |v\\<rangle> = |A *\\<^sub>v v\\<rangle>", "."], ["proof (state)\nthis:\n  A * |v\\<rangle> = |A *\\<^sub>v v\\<rangle>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unitary_density:\n  assumes \"density_operator R\"\n  and \"unitary U\"\n  and \"R\\<in> carrier_mat n n\"\n  and \"U\\<in> carrier_mat n n\"\nshows \"density_operator (U * R * (Complex_Matrix.adjoint U))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. density_operator (U * R * Complex_Matrix.adjoint U)", "unfolding density_operator_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.positive (U * R * Complex_Matrix.adjoint U) \\<and>\n    Complex_Matrix.trace (U * R * Complex_Matrix.adjoint U) = 1", "proof (intro conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. Complex_Matrix.positive (U * R * Complex_Matrix.adjoint U)\n 2. Complex_Matrix.trace (U * R * Complex_Matrix.adjoint U) = 1", "show \"Complex_Matrix.positive (U * R * Complex_Matrix.adjoint U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.positive (U * R * Complex_Matrix.adjoint U)", "proof (rule positive_close_under_left_right_mult_adjoint)"], ["proof (state)\ngoal (3 subgoals):\n 1. U \\<in> carrier_mat ?n ?n\n 2. R \\<in> carrier_mat ?n ?n\n 3. Complex_Matrix.positive R", "show \"U \\<in> carrier_mat n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. U \\<in> carrier_mat n n", "using assms"], ["proof (prove)\nusing this:\n  density_operator R\n  Complex_Matrix.unitary U\n  R \\<in> carrier_mat n n\n  U \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. U \\<in> carrier_mat n n", "by simp"], ["proof (state)\nthis:\n  U \\<in> carrier_mat n n\n\ngoal (2 subgoals):\n 1. R \\<in> carrier_mat n n\n 2. Complex_Matrix.positive R", "show \"R \\<in> carrier_mat n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R \\<in> carrier_mat n n", "using assms"], ["proof (prove)\nusing this:\n  density_operator R\n  Complex_Matrix.unitary U\n  R \\<in> carrier_mat n n\n  U \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. R \\<in> carrier_mat n n", "by simp"], ["proof (state)\nthis:\n  R \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. Complex_Matrix.positive R", "show \"Complex_Matrix.positive R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.positive R", "using assms"], ["proof (prove)\nusing this:\n  density_operator R\n  Complex_Matrix.unitary U\n  R \\<in> carrier_mat n n\n  U \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. Complex_Matrix.positive R", "unfolding density_operator_def"], ["proof (prove)\nusing this:\n  Complex_Matrix.positive R \\<and> Complex_Matrix.trace R = 1\n  Complex_Matrix.unitary U\n  R \\<in> carrier_mat n n\n  U \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. Complex_Matrix.positive R", "by simp"], ["proof (state)\nthis:\n  Complex_Matrix.positive R\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Complex_Matrix.positive (U * R * Complex_Matrix.adjoint U)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (U * R * Complex_Matrix.adjoint U) = 1", "have \"Complex_Matrix.trace (U * R * Complex_Matrix.adjoint U) = \n    Complex_Matrix.trace (Complex_Matrix.adjoint U * U * R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (U * R * Complex_Matrix.adjoint U) =\n    Complex_Matrix.trace (Complex_Matrix.adjoint U * U * R)", "using trace_comm[of \"U * R\" n \"Complex_Matrix.adjoint U\"] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>U * R \\<in> carrier_mat n n;\n   Complex_Matrix.adjoint U \\<in> carrier_mat n n\\<rbrakk>\n  \\<Longrightarrow> Complex_Matrix.trace\n                     (U * R * Complex_Matrix.adjoint U) =\n                    Complex_Matrix.trace\n                     (Complex_Matrix.adjoint U * (U * R))\n  density_operator R\n  Complex_Matrix.unitary U\n  R \\<in> carrier_mat n n\n  U \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (U * R * Complex_Matrix.adjoint U) =\n    Complex_Matrix.trace (Complex_Matrix.adjoint U * U * R)", "by (metis adjoint_dim  mat_assoc_test(10))"], ["proof (state)\nthis:\n  Complex_Matrix.trace (U * R * Complex_Matrix.adjoint U) =\n  Complex_Matrix.trace (Complex_Matrix.adjoint U * U * R)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (U * R * Complex_Matrix.adjoint U) = 1", "also"], ["proof (state)\nthis:\n  Complex_Matrix.trace (U * R * Complex_Matrix.adjoint U) =\n  Complex_Matrix.trace (Complex_Matrix.adjoint U * U * R)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (U * R * Complex_Matrix.adjoint U) = 1", "have \"... = Complex_Matrix.trace R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (Complex_Matrix.adjoint U * U * R) =\n    Complex_Matrix.trace R", "using assms"], ["proof (prove)\nusing this:\n  density_operator R\n  Complex_Matrix.unitary U\n  R \\<in> carrier_mat n n\n  U \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (Complex_Matrix.adjoint U * U * R) =\n    Complex_Matrix.trace R", "by simp"], ["proof (state)\nthis:\n  Complex_Matrix.trace (Complex_Matrix.adjoint U * U * R) =\n  Complex_Matrix.trace R\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (U * R * Complex_Matrix.adjoint U) = 1", "also"], ["proof (state)\nthis:\n  Complex_Matrix.trace (Complex_Matrix.adjoint U * U * R) =\n  Complex_Matrix.trace R\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (U * R * Complex_Matrix.adjoint U) = 1", "have \"... = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace R = 1", "using assms"], ["proof (prove)\nusing this:\n  density_operator R\n  Complex_Matrix.unitary U\n  R \\<in> carrier_mat n n\n  U \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace R = 1", "unfolding density_operator_def"], ["proof (prove)\nusing this:\n  Complex_Matrix.positive R \\<and> Complex_Matrix.trace R = 1\n  Complex_Matrix.unitary U\n  R \\<in> carrier_mat n n\n  U \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace R = 1", "by simp"], ["proof (state)\nthis:\n  Complex_Matrix.trace R = 1\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (U * R * Complex_Matrix.adjoint U) = 1", "finally"], ["proof (chain)\npicking this:\n  Complex_Matrix.trace (U * R * Complex_Matrix.adjoint U) = 1", "show \"Complex_Matrix.trace (U * R * Complex_Matrix.adjoint U) = 1\""], ["proof (prove)\nusing this:\n  Complex_Matrix.trace (U * R * Complex_Matrix.adjoint U) = 1\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (U * R * Complex_Matrix.adjoint U) = 1", "."], ["proof (state)\nthis:\n  Complex_Matrix.trace (U * R * Complex_Matrix.adjoint U) = 1\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Tensor product complements\\<close>"], ["", "lemma tensor_vec_dim[simp]:\n  shows \"dim_vec (tensor_vec u v) = dim_vec u * (dim_vec v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (u \\<otimes> v) = dim_vec u * dim_vec v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dim_vec (u \\<otimes> v) = dim_vec u * dim_vec v", "have \"length (mult.vec_vec_Tensor (*) (list_of_vec u) (list_of_vec v)) = \n    length (list_of_vec u) * length (list_of_vec v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (mult.vec_vec_Tensor (*) (list_of_vec u) (list_of_vec v)) =\n    length (list_of_vec u) * length (list_of_vec v)", "using  mult.vec_vec_Tensor_length[of \"1::real\" \"(*)\" \"list_of_vec u\" \"list_of_vec v\"]"], ["proof (prove)\nusing this:\n  Matrix_Tensor.mult (complex_of_real 1) (*) \\<Longrightarrow>\n  length (mult.vec_vec_Tensor (*) (list_of_vec u) (list_of_vec v)) =\n  length (list_of_vec u) * length (list_of_vec v)\n\ngoal (1 subgoal):\n 1. length (mult.vec_vec_Tensor (*) (list_of_vec u) (list_of_vec v)) =\n    length (list_of_vec u) * length (list_of_vec v)", "by (simp add: Matrix_Tensor.mult_def)"], ["proof (state)\nthis:\n  length (mult.vec_vec_Tensor (*) (list_of_vec u) (list_of_vec v)) =\n  length (list_of_vec u) * length (list_of_vec v)\n\ngoal (1 subgoal):\n 1. dim_vec (u \\<otimes> v) = dim_vec u * dim_vec v", "thus ?thesis"], ["proof (prove)\nusing this:\n  length (mult.vec_vec_Tensor (*) (list_of_vec u) (list_of_vec v)) =\n  length (list_of_vec u) * length (list_of_vec v)\n\ngoal (1 subgoal):\n 1. dim_vec (u \\<otimes> v) = dim_vec u * dim_vec v", "unfolding tensor_vec_def"], ["proof (prove)\nusing this:\n  length (mult.vec_vec_Tensor (*) (list_of_vec u) (list_of_vec v)) =\n  length (list_of_vec u) * length (list_of_vec v)\n\ngoal (1 subgoal):\n 1. dim_vec\n     (vec_of_list\n       (mult.vec_vec_Tensor (*) (list_of_vec u) (list_of_vec v))) =\n    dim_vec u * dim_vec v", "by simp"], ["proof (state)\nthis:\n  dim_vec (u \\<otimes> v) = dim_vec u * dim_vec v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma index_tensor_vec[simp]:\n  assumes \"0 < dim_vec v\" \n  and \"i < dim_vec u * dim_vec v\"\nshows \"vec_index (tensor_vec u v) i = \n  vec_index u (i div (dim_vec v)) * vec_index v (i mod dim_vec v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (u \\<otimes> v) $ i = u $ (i div dim_vec v) * v $ (i mod dim_vec v)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (u \\<otimes> v) $ i = u $ (i div dim_vec v) * v $ (i mod dim_vec v)", "have m: \"Matrix_Tensor.mult (1::complex) (*)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix_Tensor.mult 1 (*)", "by (simp add: Matrix_Tensor.mult_def)"], ["proof (state)\nthis:\n  Matrix_Tensor.mult 1 (*)\n\ngoal (1 subgoal):\n 1. (u \\<otimes> v) $ i = u $ (i div dim_vec v) * v $ (i mod dim_vec v)", "have \"length (list_of_vec v) = dim_vec v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (list_of_vec v) = dim_vec v", "using assms"], ["proof (prove)\nusing this:\n  0 < dim_vec v\n  i < dim_vec u * dim_vec v\n\ngoal (1 subgoal):\n 1. length (list_of_vec v) = dim_vec v", "by simp"], ["proof (state)\nthis:\n  length (list_of_vec v) = dim_vec v\n\ngoal (1 subgoal):\n 1. (u \\<otimes> v) $ i = u $ (i div dim_vec v) * v $ (i mod dim_vec v)", "hence \"vec_index (tensor_vec u v) i = (*) (vec_index u (i div dim_vec v)) (vec_index v (i mod dim_vec v))\""], ["proof (prove)\nusing this:\n  length (list_of_vec v) = dim_vec v\n\ngoal (1 subgoal):\n 1. (u \\<otimes> v) $ i = u $ (i div dim_vec v) * v $ (i mod dim_vec v)", "unfolding tensor_vec_def"], ["proof (prove)\nusing this:\n  length (list_of_vec v) = dim_vec v\n\ngoal (1 subgoal):\n 1. vec_of_list (mult.vec_vec_Tensor (*) (list_of_vec u) (list_of_vec v)) $\n    i =\n    u $ (i div dim_vec v) * v $ (i mod dim_vec v)", "using mult.vec_vec_Tensor_elements assms m"], ["proof (prove)\nusing this:\n  length (list_of_vec v) = dim_vec v\n  \\<lbrakk>Matrix_Tensor.mult ?id ?f; ?y \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<length ?x * length ?y.\n                       mult.vec_vec_Tensor ?f ?x ?y ! i =\n                       ?f (?x ! (i div length ?y)) (?y ! (i mod length ?y))\n  0 < dim_vec v\n  i < dim_vec u * dim_vec v\n  Matrix_Tensor.mult 1 (*)\n\ngoal (1 subgoal):\n 1. vec_of_list (mult.vec_vec_Tensor (*) (list_of_vec u) (list_of_vec v)) $\n    i =\n    u $ (i div dim_vec v) * v $ (i mod dim_vec v)", "by (metis (mono_tags, lifting) length_greater_0_conv length_list_of_vec list_of_vec_index \n        mult.vec_vec_Tensor_elements vec_of_list_index)"], ["proof (state)\nthis:\n  (u \\<otimes> v) $ i = u $ (i div dim_vec v) * v $ (i mod dim_vec v)\n\ngoal (1 subgoal):\n 1. (u \\<otimes> v) $ i = u $ (i div dim_vec v) * v $ (i mod dim_vec v)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (u \\<otimes> v) $ i = u $ (i div dim_vec v) * v $ (i mod dim_vec v)\n\ngoal (1 subgoal):\n 1. (u \\<otimes> v) $ i = u $ (i div dim_vec v) * v $ (i mod dim_vec v)", "by simp"], ["proof (state)\nthis:\n  (u \\<otimes> v) $ i = u $ (i div dim_vec v) * v $ (i mod dim_vec v)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma  outer_prod_tensor_comm:\n  fixes a::\"complex Matrix.vec\"\n  fixes u::\"complex Matrix.vec\"\n  assumes \"0 < dim_vec a\"\n  and \"0 < dim_vec b\"\nshows \"outer_prod (tensor_vec u v) (tensor_vec a b) = tensor_mat (outer_prod u a) (outer_prod v b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. outer_prod (u \\<otimes> v) (a \\<otimes> b) =\n    outer_prod u a \\<Otimes> outer_prod v b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. outer_prod (u \\<otimes> v) (a \\<otimes> b) =\n    outer_prod u a \\<Otimes> outer_prod v b", "define ot where \"ot = outer_prod (tensor_vec u v) (tensor_vec a b)\""], ["proof (state)\nthis:\n  ot = outer_prod (u \\<otimes> v) (a \\<otimes> b)\n\ngoal (1 subgoal):\n 1. outer_prod (u \\<otimes> v) (a \\<otimes> b) =\n    outer_prod u a \\<Otimes> outer_prod v b", "define to where \"to = tensor_mat (outer_prod u a) (outer_prod v b)\""], ["proof (state)\nthis:\n  to = outer_prod u a \\<Otimes> outer_prod v b\n\ngoal (1 subgoal):\n 1. outer_prod (u \\<otimes> v) (a \\<otimes> b) =\n    outer_prod u a \\<Otimes> outer_prod v b", "define dv where \"dv = dim_vec v\""], ["proof (state)\nthis:\n  dv = dim_vec v\n\ngoal (1 subgoal):\n 1. outer_prod (u \\<otimes> v) (a \\<otimes> b) =\n    outer_prod u a \\<Otimes> outer_prod v b", "define db where \"db = dim_vec b\""], ["proof (state)\nthis:\n  db = dim_vec b\n\ngoal (1 subgoal):\n 1. outer_prod (u \\<otimes> v) (a \\<otimes> b) =\n    outer_prod u a \\<Otimes> outer_prod v b", "have \"ot = to\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ot = to", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)\n 2. dim_row ot = dim_row to\n 3. dim_col ot = dim_col to", "have ro: \"dim_row ot = dim_vec u * dim_vec v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row ot = dim_vec u * dim_vec v", "unfolding ot_def outer_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row\n     (Matrix.mat (dim_vec (u \\<otimes> v)) 1\n       (\\<lambda>(i, j). (u \\<otimes> v) $ i) *\n      Matrix.mat 1 (dim_vec (a \\<otimes> b))\n       (\\<lambda>(i, y). conjugate (a \\<otimes> b) $ y)) =\n    dim_vec u * dim_vec v", "by simp"], ["proof (state)\nthis:\n  dim_row ot = dim_vec u * dim_vec v\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)\n 2. dim_row ot = dim_row to\n 3. dim_col ot = dim_col to", "have \"dim_row to = dim_row (outer_prod u a) * dim_row (outer_prod v b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row to = dim_row (outer_prod u a) * dim_row (outer_prod v b)", "unfolding to_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (outer_prod u a \\<Otimes> outer_prod v b) =\n    dim_row (outer_prod u a) * dim_row (outer_prod v b)", "by simp"], ["proof (state)\nthis:\n  dim_row to = dim_row (outer_prod u a) * dim_row (outer_prod v b)\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)\n 2. dim_row ot = dim_row to\n 3. dim_col ot = dim_col to", "also"], ["proof (state)\nthis:\n  dim_row to = dim_row (outer_prod u a) * dim_row (outer_prod v b)\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)\n 2. dim_row ot = dim_row to\n 3. dim_col ot = dim_col to", "have \"... = dim_vec u * dim_vec v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (outer_prod u a) * dim_row (outer_prod v b) =\n    dim_vec u * dim_vec v", "using outer_prod_dim"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n\ngoal (1 subgoal):\n 1. dim_row (outer_prod u a) * dim_row (outer_prod v b) =\n    dim_vec u * dim_vec v", "by (metis carrier_matD(1) carrier_vec_dim_vec)"], ["proof (state)\nthis:\n  dim_row (outer_prod u a) * dim_row (outer_prod v b) =\n  dim_vec u * dim_vec v\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)\n 2. dim_row ot = dim_row to\n 3. dim_col ot = dim_col to", "finally"], ["proof (chain)\npicking this:\n  dim_row to = dim_vec u * dim_vec v", "have rt: \"dim_row to = dim_vec u * dim_vec v\""], ["proof (prove)\nusing this:\n  dim_row to = dim_vec u * dim_vec v\n\ngoal (1 subgoal):\n 1. dim_row to = dim_vec u * dim_vec v", "."], ["proof (state)\nthis:\n  dim_row to = dim_vec u * dim_vec v\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)\n 2. dim_row ot = dim_row to\n 3. dim_col ot = dim_col to", "show \"dim_row ot = dim_row to\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row ot = dim_row to", "using ro rt"], ["proof (prove)\nusing this:\n  dim_row ot = dim_vec u * dim_vec v\n  dim_row to = dim_vec u * dim_vec v\n\ngoal (1 subgoal):\n 1. dim_row ot = dim_row to", "by simp"], ["proof (state)\nthis:\n  dim_row ot = dim_row to\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)\n 2. dim_col ot = dim_col to", "have co: \"dim_col ot = dim_vec a * dim_vec b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col ot = dim_vec a * dim_vec b", "unfolding ot_def outer_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col\n     (Matrix.mat (dim_vec (u \\<otimes> v)) 1\n       (\\<lambda>(i, j). (u \\<otimes> v) $ i) *\n      Matrix.mat 1 (dim_vec (a \\<otimes> b))\n       (\\<lambda>(i, y). conjugate (a \\<otimes> b) $ y)) =\n    dim_vec a * dim_vec b", "by simp"], ["proof (state)\nthis:\n  dim_col ot = dim_vec a * dim_vec b\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)\n 2. dim_col ot = dim_col to", "have \"dim_col to = dim_col (outer_prod u a) * dim_col (outer_prod v b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col to = dim_col (outer_prod u a) * dim_col (outer_prod v b)", "unfolding to_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (outer_prod u a \\<Otimes> outer_prod v b) =\n    dim_col (outer_prod u a) * dim_col (outer_prod v b)", "by simp"], ["proof (state)\nthis:\n  dim_col to = dim_col (outer_prod u a) * dim_col (outer_prod v b)\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)\n 2. dim_col ot = dim_col to", "also"], ["proof (state)\nthis:\n  dim_col to = dim_col (outer_prod u a) * dim_col (outer_prod v b)\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)\n 2. dim_col ot = dim_col to", "have \"... = dim_vec a * dim_vec b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (outer_prod u a) * dim_col (outer_prod v b) =\n    dim_vec a * dim_vec b", "using outer_prod_dim"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n\ngoal (1 subgoal):\n 1. dim_col (outer_prod u a) * dim_col (outer_prod v b) =\n    dim_vec a * dim_vec b", "by (metis carrier_matD(2) carrier_vec_dim_vec)"], ["proof (state)\nthis:\n  dim_col (outer_prod u a) * dim_col (outer_prod v b) =\n  dim_vec a * dim_vec b\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)\n 2. dim_col ot = dim_col to", "finally"], ["proof (chain)\npicking this:\n  dim_col to = dim_vec a * dim_vec b", "have ct: \"dim_col to = dim_vec a * dim_vec b\""], ["proof (prove)\nusing this:\n  dim_col to = dim_vec a * dim_vec b\n\ngoal (1 subgoal):\n 1. dim_col to = dim_vec a * dim_vec b", "."], ["proof (state)\nthis:\n  dim_col to = dim_vec a * dim_vec b\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)\n 2. dim_col ot = dim_col to", "show \"dim_col ot = dim_col to\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col ot = dim_col to", "using co ct"], ["proof (prove)\nusing this:\n  dim_col ot = dim_vec a * dim_vec b\n  dim_col to = dim_vec a * dim_vec b\n\ngoal (1 subgoal):\n 1. dim_col ot = dim_col to", "by simp"], ["proof (state)\nthis:\n  dim_col ot = dim_col to\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)", "show \"\\<And>i j. i < dim_row to \\<Longrightarrow> j < dim_col to \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)", "assume \"i < dim_row to\" and \"j < dim_col to\""], ["proof (state)\nthis:\n  i < dim_row to\n  j < dim_col to\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)", "note ij = this"], ["proof (state)\nthis:\n  i < dim_row to\n  j < dim_col to\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)", "have \"ot $$ (i,j) = Matrix.vec_index (tensor_vec u v) i * \n        (conjugate (Matrix.vec_index (tensor_vec a b) j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ot $$ (i, j) = (u \\<otimes> v) $ i * conjugate ((a \\<otimes> b) $ j)", "unfolding ot_def outer_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Matrix.mat (dim_vec (u \\<otimes> v)) 1\n      (\\<lambda>(i, j). (u \\<otimes> v) $ i) *\n     Matrix.mat 1 (dim_vec (a \\<otimes> b))\n      (\\<lambda>(i, y). conjugate (a \\<otimes> b) $ y)) $$\n    (i, j) =\n    (u \\<otimes> v) $ i * conjugate ((a \\<otimes> b) $ j)", "using ij rt ct"], ["proof (prove)\nusing this:\n  i < dim_row to\n  j < dim_col to\n  dim_row to = dim_vec u * dim_vec v\n  dim_col to = dim_vec a * dim_vec b\n\ngoal (1 subgoal):\n 1. (Matrix.mat (dim_vec (u \\<otimes> v)) 1\n      (\\<lambda>(i, j). (u \\<otimes> v) $ i) *\n     Matrix.mat 1 (dim_vec (a \\<otimes> b))\n      (\\<lambda>(i, y). conjugate (a \\<otimes> b) $ y)) $$\n    (i, j) =\n    (u \\<otimes> v) $ i * conjugate ((a \\<otimes> b) $ j)", "by simp"], ["proof (state)\nthis:\n  ot $$ (i, j) = (u \\<otimes> v) $ i * conjugate ((a \\<otimes> b) $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)", "also"], ["proof (state)\nthis:\n  ot $$ (i, j) = (u \\<otimes> v) $ i * conjugate ((a \\<otimes> b) $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)", "have \"... = vec_index u (i div dv) * vec_index v (i mod dv)  * \n        (conjugate (Matrix.vec_index (tensor_vec a b) j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (u \\<otimes> v) $ i * conjugate ((a \\<otimes> b) $ j) =\n    u $ (i div dv) * v $ (i mod dv) * conjugate ((a \\<otimes> b) $ j)", "using ij rt assms"], ["proof (prove)\nusing this:\n  i < dim_row to\n  j < dim_col to\n  dim_row to = dim_vec u * dim_vec v\n  0 < dim_vec a\n  0 < dim_vec b\n\ngoal (1 subgoal):\n 1. (u \\<otimes> v) $ i * conjugate ((a \\<otimes> b) $ j) =\n    u $ (i div dv) * v $ (i mod dv) * conjugate ((a \\<otimes> b) $ j)", "unfolding dv_def"], ["proof (prove)\nusing this:\n  i < dim_row to\n  j < dim_col to\n  dim_row to = dim_vec u * dim_vec v\n  0 < dim_vec a\n  0 < dim_vec b\n\ngoal (1 subgoal):\n 1. (u \\<otimes> v) $ i * conjugate ((a \\<otimes> b) $ j) =\n    u $ (i div dim_vec v) * v $ (i mod dim_vec v) *\n    conjugate ((a \\<otimes> b) $ j)", "by (metis index_tensor_vec less_nat_zero_code nat_0_less_mult_iff neq0_conv)"], ["proof (state)\nthis:\n  (u \\<otimes> v) $ i * conjugate ((a \\<otimes> b) $ j) =\n  u $ (i div dv) * v $ (i mod dv) * conjugate ((a \\<otimes> b) $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)", "also"], ["proof (state)\nthis:\n  (u \\<otimes> v) $ i * conjugate ((a \\<otimes> b) $ j) =\n  u $ (i div dv) * v $ (i mod dv) * conjugate ((a \\<otimes> b) $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)", "have \"... = vec_index u (i div dv) * vec_index v (i mod dv)  *\n        (conjugate (vec_index a (j div db) * vec_index b (j mod db)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u $ (i div dv) * v $ (i mod dv) * conjugate ((a \\<otimes> b) $ j) =\n    u $ (i div dv) * v $ (i mod dv) *\n    conjugate (a $ (j div db) * b $ (j mod db))", "using ij ct assms"], ["proof (prove)\nusing this:\n  i < dim_row to\n  j < dim_col to\n  dim_col to = dim_vec a * dim_vec b\n  0 < dim_vec a\n  0 < dim_vec b\n\ngoal (1 subgoal):\n 1. u $ (i div dv) * v $ (i mod dv) * conjugate ((a \\<otimes> b) $ j) =\n    u $ (i div dv) * v $ (i mod dv) *\n    conjugate (a $ (j div db) * b $ (j mod db))", "unfolding db_def"], ["proof (prove)\nusing this:\n  i < dim_row to\n  j < dim_col to\n  dim_col to = dim_vec a * dim_vec b\n  0 < dim_vec a\n  0 < dim_vec b\n\ngoal (1 subgoal):\n 1. u $ (i div dv) * v $ (i mod dv) * conjugate ((a \\<otimes> b) $ j) =\n    u $ (i div dv) * v $ (i mod dv) *\n    conjugate (a $ (j div dim_vec b) * b $ (j mod dim_vec b))", "by simp"], ["proof (state)\nthis:\n  u $ (i div dv) * v $ (i mod dv) * conjugate ((a \\<otimes> b) $ j) =\n  u $ (i div dv) * v $ (i mod dv) *\n  conjugate (a $ (j div db) * b $ (j mod db))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)", "also"], ["proof (state)\nthis:\n  u $ (i div dv) * v $ (i mod dv) * conjugate ((a \\<otimes> b) $ j) =\n  u $ (i div dv) * v $ (i mod dv) *\n  conjugate (a $ (j div db) * b $ (j mod db))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)", "have \"... = vec_index u (i div dv) * vec_index v (i mod dv)  *\n        (conjugate (vec_index a (j div db))) * (conjugate (vec_index b (j mod db)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u $ (i div dv) * v $ (i mod dv) *\n    conjugate (a $ (j div db) * b $ (j mod db)) =\n    u $ (i div dv) * v $ (i mod dv) * conjugate (a $ (j div db)) *\n    conjugate (b $ (j mod db))", "by simp"], ["proof (state)\nthis:\n  u $ (i div dv) * v $ (i mod dv) *\n  conjugate (a $ (j div db) * b $ (j mod db)) =\n  u $ (i div dv) * v $ (i mod dv) * conjugate (a $ (j div db)) *\n  conjugate (b $ (j mod db))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)", "also"], ["proof (state)\nthis:\n  u $ (i div dv) * v $ (i mod dv) *\n  conjugate (a $ (j div db) * b $ (j mod db)) =\n  u $ (i div dv) * v $ (i mod dv) * conjugate (a $ (j div db)) *\n  conjugate (b $ (j mod db))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)", "have \"... = vec_index u (i div dv) * (conjugate (vec_index a (j div db))) * \n        vec_index v (i mod dv) * (conjugate (vec_index b (j mod db)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u $ (i div dv) * v $ (i mod dv) * conjugate (a $ (j div db)) *\n    conjugate (b $ (j mod db)) =\n    u $ (i div dv) * conjugate (a $ (j div db)) * v $ (i mod dv) *\n    conjugate (b $ (j mod db))", "by simp"], ["proof (state)\nthis:\n  u $ (i div dv) * v $ (i mod dv) * conjugate (a $ (j div db)) *\n  conjugate (b $ (j mod db)) =\n  u $ (i div dv) * conjugate (a $ (j div db)) * v $ (i mod dv) *\n  conjugate (b $ (j mod db))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)", "also"], ["proof (state)\nthis:\n  u $ (i div dv) * v $ (i mod dv) * conjugate (a $ (j div db)) *\n  conjugate (b $ (j mod db)) =\n  u $ (i div dv) * conjugate (a $ (j div db)) * v $ (i mod dv) *\n  conjugate (b $ (j mod db))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)", "have \"... = (outer_prod u a) $$ (i div dv, j div db) * \n        vec_index v (i mod dv) * (conjugate (vec_index b (j mod db)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u $ (i div dv) * conjugate (a $ (j div db)) * v $ (i mod dv) *\n    conjugate (b $ (j mod db)) =\n    outer_prod u a $$ (i div dv, j div db) * v $ (i mod dv) *\n    conjugate (b $ (j mod db))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. u $ (i div dv) * conjugate (a $ (j div db)) * v $ (i mod dv) *\n    conjugate (b $ (j mod db)) =\n    outer_prod u a $$ (i div dv, j div db) * v $ (i mod dv) *\n    conjugate (b $ (j mod db))", "have \"i div dv < dim_vec u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i div dv < dim_vec u", "using ij rt"], ["proof (prove)\nusing this:\n  i < dim_row to\n  j < dim_col to\n  dim_row to = dim_vec u * dim_vec v\n\ngoal (1 subgoal):\n 1. i div dv < dim_vec u", "unfolding dv_def"], ["proof (prove)\nusing this:\n  i < dim_row to\n  j < dim_col to\n  dim_row to = dim_vec u * dim_vec v\n\ngoal (1 subgoal):\n 1. i div dim_vec v < dim_vec u", "by (simp add: less_mult_imp_div_less)"], ["proof (state)\nthis:\n  i div dv < dim_vec u\n\ngoal (1 subgoal):\n 1. u $ (i div dv) * conjugate (a $ (j div db)) * v $ (i mod dv) *\n    conjugate (b $ (j mod db)) =\n    outer_prod u a $$ (i div dv, j div db) * v $ (i mod dv) *\n    conjugate (b $ (j mod db))", "moreover"], ["proof (state)\nthis:\n  i div dv < dim_vec u\n\ngoal (1 subgoal):\n 1. u $ (i div dv) * conjugate (a $ (j div db)) * v $ (i mod dv) *\n    conjugate (b $ (j mod db)) =\n    outer_prod u a $$ (i div dv, j div db) * v $ (i mod dv) *\n    conjugate (b $ (j mod db))", "have \"j div db < dim_vec a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j div db < dim_vec a", "using ij ct assms"], ["proof (prove)\nusing this:\n  i < dim_row to\n  j < dim_col to\n  dim_col to = dim_vec a * dim_vec b\n  0 < dim_vec a\n  0 < dim_vec b\n\ngoal (1 subgoal):\n 1. j div db < dim_vec a", "unfolding db_def"], ["proof (prove)\nusing this:\n  i < dim_row to\n  j < dim_col to\n  dim_col to = dim_vec a * dim_vec b\n  0 < dim_vec a\n  0 < dim_vec b\n\ngoal (1 subgoal):\n 1. j div dim_vec b < dim_vec a", "by (simp add: less_mult_imp_div_less)"], ["proof (state)\nthis:\n  j div db < dim_vec a\n\ngoal (1 subgoal):\n 1. u $ (i div dv) * conjugate (a $ (j div db)) * v $ (i mod dv) *\n    conjugate (b $ (j mod db)) =\n    outer_prod u a $$ (i div dv, j div db) * v $ (i mod dv) *\n    conjugate (b $ (j mod db))", "ultimately"], ["proof (chain)\npicking this:\n  i div dv < dim_vec u\n  j div db < dim_vec a", "have \"vec_index u (i div dv) * (conjugate (vec_index a (j div db))) = \n          (outer_prod u a) $$ (i div dv, j div db)\""], ["proof (prove)\nusing this:\n  i div dv < dim_vec u\n  j div db < dim_vec a\n\ngoal (1 subgoal):\n 1. u $ (i div dv) * conjugate (a $ (j div db)) =\n    outer_prod u a $$ (i div dv, j div db)", "unfolding outer_prod_def"], ["proof (prove)\nusing this:\n  i div dv < dim_vec u\n  j div db < dim_vec a\n\ngoal (1 subgoal):\n 1. u $ (i div dv) * conjugate (a $ (j div db)) =\n    (Matrix.mat (dim_vec u) 1 (\\<lambda>(i, j). u $ i) *\n     Matrix.mat 1 (dim_vec a) (\\<lambda>(i, y). conjugate a $ y)) $$\n    (i div dv, j div db)", "by simp"], ["proof (state)\nthis:\n  u $ (i div dv) * conjugate (a $ (j div db)) =\n  outer_prod u a $$ (i div dv, j div db)\n\ngoal (1 subgoal):\n 1. u $ (i div dv) * conjugate (a $ (j div db)) * v $ (i mod dv) *\n    conjugate (b $ (j mod db)) =\n    outer_prod u a $$ (i div dv, j div db) * v $ (i mod dv) *\n    conjugate (b $ (j mod db))", "thus ?thesis"], ["proof (prove)\nusing this:\n  u $ (i div dv) * conjugate (a $ (j div db)) =\n  outer_prod u a $$ (i div dv, j div db)\n\ngoal (1 subgoal):\n 1. u $ (i div dv) * conjugate (a $ (j div db)) * v $ (i mod dv) *\n    conjugate (b $ (j mod db)) =\n    outer_prod u a $$ (i div dv, j div db) * v $ (i mod dv) *\n    conjugate (b $ (j mod db))", "by simp"], ["proof (state)\nthis:\n  u $ (i div dv) * conjugate (a $ (j div db)) * v $ (i mod dv) *\n  conjugate (b $ (j mod db)) =\n  outer_prod u a $$ (i div dv, j div db) * v $ (i mod dv) *\n  conjugate (b $ (j mod db))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  u $ (i div dv) * conjugate (a $ (j div db)) * v $ (i mod dv) *\n  conjugate (b $ (j mod db)) =\n  outer_prod u a $$ (i div dv, j div db) * v $ (i mod dv) *\n  conjugate (b $ (j mod db))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)", "also"], ["proof (state)\nthis:\n  u $ (i div dv) * conjugate (a $ (j div db)) * v $ (i mod dv) *\n  conjugate (b $ (j mod db)) =\n  outer_prod u a $$ (i div dv, j div db) * v $ (i mod dv) *\n  conjugate (b $ (j mod db))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)", "have \"... = (outer_prod u a) $$ (i div dv, j div db) * \n        (outer_prod v b) $$ (i mod dv, j mod db)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. outer_prod u a $$ (i div dv, j div db) * v $ (i mod dv) *\n    conjugate (b $ (j mod db)) =\n    outer_prod u a $$ (i div dv, j div db) *\n    outer_prod v b $$ (i mod dv, j mod db)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. outer_prod u a $$ (i div dv, j div db) * v $ (i mod dv) *\n    conjugate (b $ (j mod db)) =\n    outer_prod u a $$ (i div dv, j div db) *\n    outer_prod v b $$ (i mod dv, j mod db)", "have \"i mod dv < dim_vec v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i mod dv < dim_vec v", "using ij rt"], ["proof (prove)\nusing this:\n  i < dim_row to\n  j < dim_col to\n  dim_row to = dim_vec u * dim_vec v\n\ngoal (1 subgoal):\n 1. i mod dv < dim_vec v", "unfolding dv_def"], ["proof (prove)\nusing this:\n  i < dim_row to\n  j < dim_col to\n  dim_row to = dim_vec u * dim_vec v\n\ngoal (1 subgoal):\n 1. i mod dim_vec v < dim_vec v", "using assms mod_less_divisor"], ["proof (prove)\nusing this:\n  i < dim_row to\n  j < dim_col to\n  dim_row to = dim_vec u * dim_vec v\n  0 < dim_vec a\n  0 < dim_vec b\n  0 < ?n \\<Longrightarrow> ?m mod ?n < ?n\n\ngoal (1 subgoal):\n 1. i mod dim_vec v < dim_vec v", "by (metis less_nat_zero_code mult.commute neq0_conv times_nat.simps(1))"], ["proof (state)\nthis:\n  i mod dv < dim_vec v\n\ngoal (1 subgoal):\n 1. outer_prod u a $$ (i div dv, j div db) * v $ (i mod dv) *\n    conjugate (b $ (j mod db)) =\n    outer_prod u a $$ (i div dv, j div db) *\n    outer_prod v b $$ (i mod dv, j mod db)", "moreover"], ["proof (state)\nthis:\n  i mod dv < dim_vec v\n\ngoal (1 subgoal):\n 1. outer_prod u a $$ (i div dv, j div db) * v $ (i mod dv) *\n    conjugate (b $ (j mod db)) =\n    outer_prod u a $$ (i div dv, j div db) *\n    outer_prod v b $$ (i mod dv, j mod db)", "have \"j mod db < dim_vec b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j mod db < dim_vec b", "using ij ct assms"], ["proof (prove)\nusing this:\n  i < dim_row to\n  j < dim_col to\n  dim_col to = dim_vec a * dim_vec b\n  0 < dim_vec a\n  0 < dim_vec b\n\ngoal (1 subgoal):\n 1. j mod db < dim_vec b", "unfolding db_def"], ["proof (prove)\nusing this:\n  i < dim_row to\n  j < dim_col to\n  dim_col to = dim_vec a * dim_vec b\n  0 < dim_vec a\n  0 < dim_vec b\n\ngoal (1 subgoal):\n 1. j mod dim_vec b < dim_vec b", "by (simp add: less_mult_imp_div_less)"], ["proof (state)\nthis:\n  j mod db < dim_vec b\n\ngoal (1 subgoal):\n 1. outer_prod u a $$ (i div dv, j div db) * v $ (i mod dv) *\n    conjugate (b $ (j mod db)) =\n    outer_prod u a $$ (i div dv, j div db) *\n    outer_prod v b $$ (i mod dv, j mod db)", "ultimately"], ["proof (chain)\npicking this:\n  i mod dv < dim_vec v\n  j mod db < dim_vec b", "have \"vec_index v (i mod dv) * (conjugate (vec_index b (j mod db))) = \n          (outer_prod v b) $$ (i mod dv, j mod db)\""], ["proof (prove)\nusing this:\n  i mod dv < dim_vec v\n  j mod db < dim_vec b\n\ngoal (1 subgoal):\n 1. v $ (i mod dv) * conjugate (b $ (j mod db)) =\n    outer_prod v b $$ (i mod dv, j mod db)", "unfolding outer_prod_def"], ["proof (prove)\nusing this:\n  i mod dv < dim_vec v\n  j mod db < dim_vec b\n\ngoal (1 subgoal):\n 1. v $ (i mod dv) * conjugate (b $ (j mod db)) =\n    (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n     Matrix.mat 1 (dim_vec b) (\\<lambda>(i, y). conjugate b $ y)) $$\n    (i mod dv, j mod db)", "by simp"], ["proof (state)\nthis:\n  v $ (i mod dv) * conjugate (b $ (j mod db)) =\n  outer_prod v b $$ (i mod dv, j mod db)\n\ngoal (1 subgoal):\n 1. outer_prod u a $$ (i div dv, j div db) * v $ (i mod dv) *\n    conjugate (b $ (j mod db)) =\n    outer_prod u a $$ (i div dv, j div db) *\n    outer_prod v b $$ (i mod dv, j mod db)", "thus ?thesis"], ["proof (prove)\nusing this:\n  v $ (i mod dv) * conjugate (b $ (j mod db)) =\n  outer_prod v b $$ (i mod dv, j mod db)\n\ngoal (1 subgoal):\n 1. outer_prod u a $$ (i div dv, j div db) * v $ (i mod dv) *\n    conjugate (b $ (j mod db)) =\n    outer_prod u a $$ (i div dv, j div db) *\n    outer_prod v b $$ (i mod dv, j mod db)", "by simp"], ["proof (state)\nthis:\n  outer_prod u a $$ (i div dv, j div db) * v $ (i mod dv) *\n  conjugate (b $ (j mod db)) =\n  outer_prod u a $$ (i div dv, j div db) *\n  outer_prod v b $$ (i mod dv, j mod db)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  outer_prod u a $$ (i div dv, j div db) * v $ (i mod dv) *\n  conjugate (b $ (j mod db)) =\n  outer_prod u a $$ (i div dv, j div db) *\n  outer_prod v b $$ (i mod dv, j mod db)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)", "also"], ["proof (state)\nthis:\n  outer_prod u a $$ (i div dv, j div db) * v $ (i mod dv) *\n  conjugate (b $ (j mod db)) =\n  outer_prod u a $$ (i div dv, j div db) *\n  outer_prod v b $$ (i mod dv, j mod db)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)", "have \"... = tensor_mat (outer_prod u a) (outer_prod v b) $$ (i, j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. outer_prod u a $$ (i div dv, j div db) *\n    outer_prod v b $$ (i mod dv, j mod db) =\n    (outer_prod u a \\<Otimes> outer_prod v b) $$ (i, j)", "proof (rule index_tensor_mat[symmetric])"], ["proof (state)\ngoal (8 subgoals):\n 1. dim_row (outer_prod u a) = ?rA\n 2. dim_col (outer_prod u a) = ?cA\n 3. dim_row (outer_prod v b) = dv\n 4. dim_col (outer_prod v b) = db\n 5. i < ?rA * dv\n 6. j < ?cA * db\n 7. 0 < ?cA\n 8. 0 < db", "show \"dim_row (outer_prod u a) = dim_vec u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (outer_prod u a) = dim_vec u", "unfolding outer_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row\n     (Matrix.mat (dim_vec u) 1 (\\<lambda>(i, j). u $ i) *\n      Matrix.mat 1 (dim_vec a) (\\<lambda>(i, y). conjugate a $ y)) =\n    dim_vec u", "by simp"], ["proof (state)\nthis:\n  dim_row (outer_prod u a) = dim_vec u\n\ngoal (7 subgoals):\n 1. dim_col (outer_prod u a) = ?cA\n 2. dim_row (outer_prod v b) = dv\n 3. dim_col (outer_prod v b) = db\n 4. i < dim_vec u * dv\n 5. j < ?cA * db\n 6. 0 < ?cA\n 7. 0 < db", "show \"dim_row (outer_prod v b) = dv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (outer_prod v b) = dv", "unfolding outer_prod_def dv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row\n     (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n      Matrix.mat 1 (dim_vec b) (\\<lambda>(i, y). conjugate b $ y)) =\n    dim_vec v", "by simp"], ["proof (state)\nthis:\n  dim_row (outer_prod v b) = dv\n\ngoal (6 subgoals):\n 1. dim_col (outer_prod u a) = ?cA\n 2. dim_col (outer_prod v b) = db\n 3. i < dim_vec u * dv\n 4. j < ?cA * db\n 5. 0 < ?cA\n 6. 0 < db", "show \"dim_col (outer_prod v b) = db\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (outer_prod v b) = db", "unfolding db_def outer_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col\n     (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n      Matrix.mat 1 (dim_vec b) (\\<lambda>(i, y). conjugate b $ y)) =\n    dim_vec b", "by simp"], ["proof (state)\nthis:\n  dim_col (outer_prod v b) = db\n\ngoal (5 subgoals):\n 1. dim_col (outer_prod u a) = ?cA\n 2. i < dim_vec u * dv\n 3. j < ?cA * db\n 4. 0 < ?cA\n 5. 0 < db", "show \"i < dim_vec u * dv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < dim_vec u * dv", "unfolding dv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < dim_vec u * dim_vec v", "using ij rt"], ["proof (prove)\nusing this:\n  i < dim_row to\n  j < dim_col to\n  dim_row to = dim_vec u * dim_vec v\n\ngoal (1 subgoal):\n 1. i < dim_vec u * dim_vec v", "by simp"], ["proof (state)\nthis:\n  i < dim_vec u * dv\n\ngoal (4 subgoals):\n 1. dim_col (outer_prod u a) = ?cA\n 2. j < ?cA * db\n 3. 0 < ?cA\n 4. 0 < db", "show \"dim_col (outer_prod u a) = dim_vec a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (outer_prod u a) = dim_vec a", "unfolding outer_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col\n     (Matrix.mat (dim_vec u) 1 (\\<lambda>(i, j). u $ i) *\n      Matrix.mat 1 (dim_vec a) (\\<lambda>(i, y). conjugate a $ y)) =\n    dim_vec a", "by simp"], ["proof (state)\nthis:\n  dim_col (outer_prod u a) = dim_vec a\n\ngoal (3 subgoals):\n 1. j < dim_vec a * db\n 2. 0 < dim_vec a\n 3. 0 < db", "show \"j < dim_vec a * db\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < dim_vec a * db", "unfolding db_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. j < dim_vec a * dim_vec b", "using ij ct"], ["proof (prove)\nusing this:\n  i < dim_row to\n  j < dim_col to\n  dim_col to = dim_vec a * dim_vec b\n\ngoal (1 subgoal):\n 1. j < dim_vec a * dim_vec b", "by simp"], ["proof (state)\nthis:\n  j < dim_vec a * db\n\ngoal (2 subgoals):\n 1. 0 < dim_vec a\n 2. 0 < db", "show \"0 < dim_vec a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < dim_vec a", "using assms"], ["proof (prove)\nusing this:\n  0 < dim_vec a\n  0 < dim_vec b\n\ngoal (1 subgoal):\n 1. 0 < dim_vec a", "by simp"], ["proof (state)\nthis:\n  0 < dim_vec a\n\ngoal (1 subgoal):\n 1. 0 < db", "show \"0 < db\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < db", "unfolding db_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < dim_vec b", "using assms"], ["proof (prove)\nusing this:\n  0 < dim_vec a\n  0 < dim_vec b\n\ngoal (1 subgoal):\n 1. 0 < dim_vec b", "by simp"], ["proof (state)\nthis:\n  0 < db\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  outer_prod u a $$ (i div dv, j div db) *\n  outer_prod v b $$ (i mod dv, j mod db) =\n  (outer_prod u a \\<Otimes> outer_prod v b) $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row to; j < dim_col to\\<rbrakk>\n       \\<Longrightarrow> ot $$ (i, j) = to $$ (i, j)", "finally"], ["proof (chain)\npicking this:\n  ot $$ (i, j) = (outer_prod u a \\<Otimes> outer_prod v b) $$ (i, j)", "show \"ot $$ (i, j) = to $$ (i, j)\""], ["proof (prove)\nusing this:\n  ot $$ (i, j) = (outer_prod u a \\<Otimes> outer_prod v b) $$ (i, j)\n\ngoal (1 subgoal):\n 1. ot $$ (i, j) = to $$ (i, j)", "unfolding to_def"], ["proof (prove)\nusing this:\n  ot $$ (i, j) = (outer_prod u a \\<Otimes> outer_prod v b) $$ (i, j)\n\ngoal (1 subgoal):\n 1. ot $$ (i, j) = (outer_prod u a \\<Otimes> outer_prod v b) $$ (i, j)", "."], ["proof (state)\nthis:\n  ot $$ (i, j) = to $$ (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?i < dim_row to; ?j < dim_col to\\<rbrakk>\n  \\<Longrightarrow> ot $$ (?i, ?j) = to $$ (?i, ?j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ot = to\n\ngoal (1 subgoal):\n 1. outer_prod (u \\<otimes> v) (a \\<otimes> b) =\n    outer_prod u a \\<Otimes> outer_prod v b", "thus ?thesis"], ["proof (prove)\nusing this:\n  ot = to\n\ngoal (1 subgoal):\n 1. outer_prod (u \\<otimes> v) (a \\<otimes> b) =\n    outer_prod u a \\<Otimes> outer_prod v b", "unfolding ot_def to_def"], ["proof (prove)\nusing this:\n  outer_prod (u \\<otimes> v) (a \\<otimes> b) =\n  outer_prod u a \\<Otimes> outer_prod v b\n\ngoal (1 subgoal):\n 1. outer_prod (u \\<otimes> v) (a \\<otimes> b) =\n    outer_prod u a \\<Otimes> outer_prod v b", "by simp"], ["proof (state)\nthis:\n  outer_prod (u \\<otimes> v) (a \\<otimes> b) =\n  outer_prod u a \\<Otimes> outer_prod v b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tensor_mat_adjoint:\n  assumes \"m1 \\<in> carrier_mat r1 c1\"\n    and \"m2 \\<in> carrier_mat r2 c2\"\n    and \"0 < c1\"\n    and \"0 < c2\"\nand \"0 < r1\"\nand \"0 < r2\"\n  shows \"Complex_Matrix.adjoint (tensor_mat m1 m2) = \n  tensor_mat (Complex_Matrix.adjoint m1) (Complex_Matrix.adjoint m2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (m1 \\<Otimes> m2) =\n    Complex_Matrix.adjoint m1 \\<Otimes> Complex_Matrix.adjoint m2", "apply (rule eq_matI, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_col m1 * dim_col m2;\n        j < dim_row m1 * dim_row m2\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$\n                         (i, j) =\n                         (Complex_Matrix.adjoint m1 \\<Otimes>\n                          Complex_Matrix.adjoint m2) $$\n                         (i, j)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_col m1 * dim_col m2;\n        j < dim_row m1 * dim_row m2\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$\n                         (i, j) =\n                         (Complex_Matrix.adjoint m1 \\<Otimes>\n                          Complex_Matrix.adjoint m2) $$\n                         (i, j)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_col m1 * dim_col m2;\n        j < dim_row m1 * dim_row m2\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$\n                         (i, j) =\n                         (Complex_Matrix.adjoint m1 \\<Otimes>\n                          Complex_Matrix.adjoint m2) $$\n                         (i, j)", "assume \"i < dim_col m1 * dim_col m2\" and \"j < dim_row m1 * dim_row m2\""], ["proof (state)\nthis:\n  i < dim_col m1 * dim_col m2\n  j < dim_row m1 * dim_row m2\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_col m1 * dim_col m2;\n        j < dim_row m1 * dim_row m2\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$\n                         (i, j) =\n                         (Complex_Matrix.adjoint m1 \\<Otimes>\n                          Complex_Matrix.adjoint m2) $$\n                         (i, j)", "note ij = this"], ["proof (state)\nthis:\n  i < dim_col m1 * dim_col m2\n  j < dim_row m1 * dim_row m2\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_col m1 * dim_col m2;\n        j < dim_row m1 * dim_row m2\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$\n                         (i, j) =\n                         (Complex_Matrix.adjoint m1 \\<Otimes>\n                          Complex_Matrix.adjoint m2) $$\n                         (i, j)", "have c1: \"dim_col m1 = c1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col m1 = c1", "using assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat r1 c1\n  m2 \\<in> carrier_mat r2 c2\n  0 < c1\n  0 < c2\n  0 < r1\n  0 < r2\n\ngoal (1 subgoal):\n 1. dim_col m1 = c1", "by simp"], ["proof (state)\nthis:\n  dim_col m1 = c1\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_col m1 * dim_col m2;\n        j < dim_row m1 * dim_row m2\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$\n                         (i, j) =\n                         (Complex_Matrix.adjoint m1 \\<Otimes>\n                          Complex_Matrix.adjoint m2) $$\n                         (i, j)", "have r1: \"dim_row m1 = r1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row m1 = r1", "using assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat r1 c1\n  m2 \\<in> carrier_mat r2 c2\n  0 < c1\n  0 < c2\n  0 < r1\n  0 < r2\n\ngoal (1 subgoal):\n 1. dim_row m1 = r1", "by simp"], ["proof (state)\nthis:\n  dim_row m1 = r1\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_col m1 * dim_col m2;\n        j < dim_row m1 * dim_row m2\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$\n                         (i, j) =\n                         (Complex_Matrix.adjoint m1 \\<Otimes>\n                          Complex_Matrix.adjoint m2) $$\n                         (i, j)", "have c2: \"dim_col m2 = c2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col m2 = c2", "using assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat r1 c1\n  m2 \\<in> carrier_mat r2 c2\n  0 < c1\n  0 < c2\n  0 < r1\n  0 < r2\n\ngoal (1 subgoal):\n 1. dim_col m2 = c2", "by simp"], ["proof (state)\nthis:\n  dim_col m2 = c2\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_col m1 * dim_col m2;\n        j < dim_row m1 * dim_row m2\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$\n                         (i, j) =\n                         (Complex_Matrix.adjoint m1 \\<Otimes>\n                          Complex_Matrix.adjoint m2) $$\n                         (i, j)", "have r2: \"dim_row m2 = r2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row m2 = r2", "using assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat r1 c1\n  m2 \\<in> carrier_mat r2 c2\n  0 < c1\n  0 < c2\n  0 < r1\n  0 < r2\n\ngoal (1 subgoal):\n 1. dim_row m2 = r2", "by simp"], ["proof (state)\nthis:\n  dim_row m2 = r2\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_col m1 * dim_col m2;\n        j < dim_row m1 * dim_row m2\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$\n                         (i, j) =\n                         (Complex_Matrix.adjoint m1 \\<Otimes>\n                          Complex_Matrix.adjoint m2) $$\n                         (i, j)", "have \"Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$ (i, j) = conjugate ((m1 \\<Otimes> m2) $$ (j, i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$ (i, j) =\n    conjugate ((m1 \\<Otimes> m2) $$ (j, i))", "using  ij"], ["proof (prove)\nusing this:\n  i < dim_col m1 * dim_col m2\n  j < dim_row m1 * dim_row m2\n\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$ (i, j) =\n    conjugate ((m1 \\<Otimes> m2) $$ (j, i))", "by (simp add: adjoint_eval)"], ["proof (state)\nthis:\n  Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$ (i, j) =\n  conjugate ((m1 \\<Otimes> m2) $$ (j, i))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_col m1 * dim_col m2;\n        j < dim_row m1 * dim_row m2\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$\n                         (i, j) =\n                         (Complex_Matrix.adjoint m1 \\<Otimes>\n                          Complex_Matrix.adjoint m2) $$\n                         (i, j)", "also"], ["proof (state)\nthis:\n  Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$ (i, j) =\n  conjugate ((m1 \\<Otimes> m2) $$ (j, i))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_col m1 * dim_col m2;\n        j < dim_row m1 * dim_row m2\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$\n                         (i, j) =\n                         (Complex_Matrix.adjoint m1 \\<Otimes>\n                          Complex_Matrix.adjoint m2) $$\n                         (i, j)", "have \"... = conjugate (m1 $$ (j div r2, i div c2) * m2 $$ (j mod r2, i mod c2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conjugate ((m1 \\<Otimes> m2) $$ (j, i)) =\n    conjugate (m1 $$ (j div r2, i div c2) * m2 $$ (j mod r2, i mod c2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. conjugate ((m1 \\<Otimes> m2) $$ (j, i)) =\n    conjugate (m1 $$ (j div r2, i div c2) * m2 $$ (j mod r2, i mod c2))", "have \"(m1 \\<Otimes> m2) $$ (j, i) = m1 $$ (j div r2, i div c2) * m2 $$ (j mod r2, i mod c2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (m1 \\<Otimes> m2) $$ (j, i) =\n    m1 $$ (j div r2, i div c2) * m2 $$ (j mod r2, i mod c2)", "proof (rule index_tensor_mat[of m1 r1 c1 m2 r2 c2 j i], (auto simp add: assms ij c1 c2 r1 r2))"], ["proof (state)\ngoal (2 subgoals):\n 1. j < r1 * r2\n 2. i < c1 * c2", "show \"j < r1 * r2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < r1 * r2", "using ij r1 r2"], ["proof (prove)\nusing this:\n  i < dim_col m1 * dim_col m2\n  j < dim_row m1 * dim_row m2\n  dim_row m1 = r1\n  dim_row m2 = r2\n\ngoal (1 subgoal):\n 1. j < r1 * r2", "by simp"], ["proof (state)\nthis:\n  j < r1 * r2\n\ngoal (1 subgoal):\n 1. i < c1 * c2", "show \"i < c1 * c2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < c1 * c2", "using ij c1 c2"], ["proof (prove)\nusing this:\n  i < dim_col m1 * dim_col m2\n  j < dim_row m1 * dim_row m2\n  dim_col m1 = c1\n  dim_col m2 = c2\n\ngoal (1 subgoal):\n 1. i < c1 * c2", "by simp"], ["proof (state)\nthis:\n  i < c1 * c2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (m1 \\<Otimes> m2) $$ (j, i) =\n  m1 $$ (j div r2, i div c2) * m2 $$ (j mod r2, i mod c2)\n\ngoal (1 subgoal):\n 1. conjugate ((m1 \\<Otimes> m2) $$ (j, i)) =\n    conjugate (m1 $$ (j div r2, i div c2) * m2 $$ (j mod r2, i mod c2))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (m1 \\<Otimes> m2) $$ (j, i) =\n  m1 $$ (j div r2, i div c2) * m2 $$ (j mod r2, i mod c2)\n\ngoal (1 subgoal):\n 1. conjugate ((m1 \\<Otimes> m2) $$ (j, i)) =\n    conjugate (m1 $$ (j div r2, i div c2) * m2 $$ (j mod r2, i mod c2))", "by simp"], ["proof (state)\nthis:\n  conjugate ((m1 \\<Otimes> m2) $$ (j, i)) =\n  conjugate (m1 $$ (j div r2, i div c2) * m2 $$ (j mod r2, i mod c2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  conjugate ((m1 \\<Otimes> m2) $$ (j, i)) =\n  conjugate (m1 $$ (j div r2, i div c2) * m2 $$ (j mod r2, i mod c2))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_col m1 * dim_col m2;\n        j < dim_row m1 * dim_row m2\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$\n                         (i, j) =\n                         (Complex_Matrix.adjoint m1 \\<Otimes>\n                          Complex_Matrix.adjoint m2) $$\n                         (i, j)", "also"], ["proof (state)\nthis:\n  conjugate ((m1 \\<Otimes> m2) $$ (j, i)) =\n  conjugate (m1 $$ (j div r2, i div c2) * m2 $$ (j mod r2, i mod c2))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_col m1 * dim_col m2;\n        j < dim_row m1 * dim_row m2\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$\n                         (i, j) =\n                         (Complex_Matrix.adjoint m1 \\<Otimes>\n                          Complex_Matrix.adjoint m2) $$\n                         (i, j)", "have \"... = conjugate (m1 $$ (j div r2, i div c2)) * conjugate ( m2 $$ (j mod r2, i mod c2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conjugate (m1 $$ (j div r2, i div c2) * m2 $$ (j mod r2, i mod c2)) =\n    conjugate (m1 $$ (j div r2, i div c2)) *\n    conjugate (m2 $$ (j mod r2, i mod c2))", "by simp"], ["proof (state)\nthis:\n  conjugate (m1 $$ (j div r2, i div c2) * m2 $$ (j mod r2, i mod c2)) =\n  conjugate (m1 $$ (j div r2, i div c2)) *\n  conjugate (m2 $$ (j mod r2, i mod c2))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_col m1 * dim_col m2;\n        j < dim_row m1 * dim_row m2\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$\n                         (i, j) =\n                         (Complex_Matrix.adjoint m1 \\<Otimes>\n                          Complex_Matrix.adjoint m2) $$\n                         (i, j)", "also"], ["proof (state)\nthis:\n  conjugate (m1 $$ (j div r2, i div c2) * m2 $$ (j mod r2, i mod c2)) =\n  conjugate (m1 $$ (j div r2, i div c2)) *\n  conjugate (m2 $$ (j mod r2, i mod c2))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_col m1 * dim_col m2;\n        j < dim_row m1 * dim_row m2\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$\n                         (i, j) =\n                         (Complex_Matrix.adjoint m1 \\<Otimes>\n                          Complex_Matrix.adjoint m2) $$\n                         (i, j)", "have \"... = (Complex_Matrix.adjoint m1) $$ (i div c2, j div r2) * \n    conjugate ( m2 $$ (j mod r2, i mod c2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conjugate (m1 $$ (j div r2, i div c2)) *\n    conjugate (m2 $$ (j mod r2, i mod c2)) =\n    Complex_Matrix.adjoint m1 $$ (i div c2, j div r2) *\n    conjugate (m2 $$ (j mod r2, i mod c2))", "by (metis adjoint_eval c2 ij less_mult_imp_div_less r2)"], ["proof (state)\nthis:\n  conjugate (m1 $$ (j div r2, i div c2)) *\n  conjugate (m2 $$ (j mod r2, i mod c2)) =\n  Complex_Matrix.adjoint m1 $$ (i div c2, j div r2) *\n  conjugate (m2 $$ (j mod r2, i mod c2))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_col m1 * dim_col m2;\n        j < dim_row m1 * dim_row m2\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$\n                         (i, j) =\n                         (Complex_Matrix.adjoint m1 \\<Otimes>\n                          Complex_Matrix.adjoint m2) $$\n                         (i, j)", "also"], ["proof (state)\nthis:\n  conjugate (m1 $$ (j div r2, i div c2)) *\n  conjugate (m2 $$ (j mod r2, i mod c2)) =\n  Complex_Matrix.adjoint m1 $$ (i div c2, j div r2) *\n  conjugate (m2 $$ (j mod r2, i mod c2))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_col m1 * dim_col m2;\n        j < dim_row m1 * dim_row m2\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$\n                         (i, j) =\n                         (Complex_Matrix.adjoint m1 \\<Otimes>\n                          Complex_Matrix.adjoint m2) $$\n                         (i, j)", "have \"... = (Complex_Matrix.adjoint m1) $$ (i div c2, j div r2) *\n    (Complex_Matrix.adjoint m2) $$ (i mod c2, j mod r2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint m1 $$ (i div c2, j div r2) *\n    conjugate (m2 $$ (j mod r2, i mod c2)) =\n    Complex_Matrix.adjoint m1 $$ (i div c2, j div r2) *\n    Complex_Matrix.adjoint m2 $$ (i mod c2, j mod r2)", "by (metis Euclidean_Division.div_eq_0_iff adjoint_eval assms(4) bits_mod_div_trivial c2 \n        gr_implies_not_zero ij(2) mult_not_zero r2)"], ["proof (state)\nthis:\n  Complex_Matrix.adjoint m1 $$ (i div c2, j div r2) *\n  conjugate (m2 $$ (j mod r2, i mod c2)) =\n  Complex_Matrix.adjoint m1 $$ (i div c2, j div r2) *\n  Complex_Matrix.adjoint m2 $$ (i mod c2, j mod r2)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_col m1 * dim_col m2;\n        j < dim_row m1 * dim_row m2\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$\n                         (i, j) =\n                         (Complex_Matrix.adjoint m1 \\<Otimes>\n                          Complex_Matrix.adjoint m2) $$\n                         (i, j)", "also"], ["proof (state)\nthis:\n  Complex_Matrix.adjoint m1 $$ (i div c2, j div r2) *\n  conjugate (m2 $$ (j mod r2, i mod c2)) =\n  Complex_Matrix.adjoint m1 $$ (i div c2, j div r2) *\n  Complex_Matrix.adjoint m2 $$ (i mod c2, j mod r2)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_col m1 * dim_col m2;\n        j < dim_row m1 * dim_row m2\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$\n                         (i, j) =\n                         (Complex_Matrix.adjoint m1 \\<Otimes>\n                          Complex_Matrix.adjoint m2) $$\n                         (i, j)", "have \"... = (tensor_mat (Complex_Matrix.adjoint m1) (Complex_Matrix.adjoint m2)) $$ (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint m1 $$ (i div c2, j div r2) *\n    Complex_Matrix.adjoint m2 $$ (i mod c2, j mod r2) =\n    (Complex_Matrix.adjoint m1 \\<Otimes> Complex_Matrix.adjoint m2) $$\n    (i, j)", "proof (rule index_tensor_mat[symmetric], (simp add: ij c1 c2 r1 r2) +)"], ["proof (state)\ngoal (4 subgoals):\n 1. i < c1 * c2\n 2. j < r1 * r2\n 3. 0 < r1\n 4. 0 < r2", "show \"i < c1 * c2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < c1 * c2", "using ij c1 c2"], ["proof (prove)\nusing this:\n  i < dim_col m1 * dim_col m2\n  j < dim_row m1 * dim_row m2\n  dim_col m1 = c1\n  dim_col m2 = c2\n\ngoal (1 subgoal):\n 1. i < c1 * c2", "by simp"], ["proof (state)\nthis:\n  i < c1 * c2\n\ngoal (3 subgoals):\n 1. j < r1 * r2\n 2. 0 < r1\n 3. 0 < r2", "show \"j < r1 * r2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < r1 * r2", "using ij r1 r2"], ["proof (prove)\nusing this:\n  i < dim_col m1 * dim_col m2\n  j < dim_row m1 * dim_row m2\n  dim_row m1 = r1\n  dim_row m2 = r2\n\ngoal (1 subgoal):\n 1. j < r1 * r2", "by simp"], ["proof (state)\nthis:\n  j < r1 * r2\n\ngoal (2 subgoals):\n 1. 0 < r1\n 2. 0 < r2", "show \"0 < r1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < r1", "using assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat r1 c1\n  m2 \\<in> carrier_mat r2 c2\n  0 < c1\n  0 < c2\n  0 < r1\n  0 < r2\n\ngoal (1 subgoal):\n 1. 0 < r1", "by simp"], ["proof (state)\nthis:\n  0 < r1\n\ngoal (1 subgoal):\n 1. 0 < r2", "show \"0 < r2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < r2", "using assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat r1 c1\n  m2 \\<in> carrier_mat r2 c2\n  0 < c1\n  0 < c2\n  0 < r1\n  0 < r2\n\ngoal (1 subgoal):\n 1. 0 < r2", "by simp"], ["proof (state)\nthis:\n  0 < r2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Complex_Matrix.adjoint m1 $$ (i div c2, j div r2) *\n  Complex_Matrix.adjoint m2 $$ (i mod c2, j mod r2) =\n  (Complex_Matrix.adjoint m1 \\<Otimes> Complex_Matrix.adjoint m2) $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_col m1 * dim_col m2;\n        j < dim_row m1 * dim_row m2\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$\n                         (i, j) =\n                         (Complex_Matrix.adjoint m1 \\<Otimes>\n                          Complex_Matrix.adjoint m2) $$\n                         (i, j)", "finally"], ["proof (chain)\npicking this:\n  Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$ (i, j) =\n  (Complex_Matrix.adjoint m1 \\<Otimes> Complex_Matrix.adjoint m2) $$ (i, j)", "show \"Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$ (i, j) =\n           (Complex_Matrix.adjoint m1 \\<Otimes> Complex_Matrix.adjoint m2) $$ (i, j)\""], ["proof (prove)\nusing this:\n  Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$ (i, j) =\n  (Complex_Matrix.adjoint m1 \\<Otimes> Complex_Matrix.adjoint m2) $$ (i, j)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$ (i, j) =\n    (Complex_Matrix.adjoint m1 \\<Otimes> Complex_Matrix.adjoint m2) $$\n    (i, j)", "."], ["proof (state)\nthis:\n  Complex_Matrix.adjoint (m1 \\<Otimes> m2) $$ (i, j) =\n  (Complex_Matrix.adjoint m1 \\<Otimes> Complex_Matrix.adjoint m2) $$ (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma index_tensor_mat':\n  assumes \"0 < dim_col A\"\n  and \"0 < dim_col B\"\n  and \"i < dim_row A * dim_row B\"\n  and \"j < dim_col A * dim_col B\"\n  shows \"(A \\<Otimes> B) $$ (i, j) = \n    A $$ (i div (dim_row B), j div (dim_col B)) * B $$ (i mod (dim_row B), j mod (dim_col B))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<Otimes> B) $$ (i, j) =\n    A $$ (i div dim_row B, j div dim_col B) *\n    B $$ (i mod dim_row B, j mod dim_col B)", "by (rule index_tensor_mat, (simp add: assms)+)"], ["", "lemma tensor_mat_carrier:\n  shows \"tensor_mat U V \\<in> carrier_mat (dim_row U * dim_row V) (dim_col U * dim_col V)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. U \\<Otimes> V\n    \\<in> carrier_mat (dim_row U * dim_row V) (dim_col U * dim_col V)", "by auto"], ["", "lemma tensor_mat_id:\n  assumes \"0 < d1\"\n  and \"0 < d2\"\nshows \"tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) = 1\\<^sub>m (d1 * d2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1\\<^sub>m d1 \\<Otimes> 1\\<^sub>m d2 = 1\\<^sub>m (d1 * d2)", "proof (rule eq_matI, auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>j.\n       j < d1 * d2 \\<Longrightarrow>\n       (1\\<^sub>m d1 \\<Otimes> 1\\<^sub>m d2) $$ (j, j) = 1\n 2. \\<And>i j.\n       \\<lbrakk>i < d1 * d2; j < d1 * d2; i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> (1\\<^sub>m d1 \\<Otimes> 1\\<^sub>m d2) $$ (i, j) = 0", "show \"tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) $$ (i, i) = 1\" if \"i < (d1 * d2)\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. (1\\<^sub>m d1 \\<Otimes> 1\\<^sub>m d2) $$ (i, i) = 1", "using that index_tensor_mat'[of \"1\\<^sub>m d1\" \"1\\<^sub>m d2\"]"], ["proof (prove)\nusing this:\n  i < d1 * d2\n  \\<lbrakk>0 < dim_col (1\\<^sub>m d1); 0 < dim_col (1\\<^sub>m d2);\n   ?i < dim_row (1\\<^sub>m d1) * dim_row (1\\<^sub>m d2);\n   ?j < dim_col (1\\<^sub>m d1) * dim_col (1\\<^sub>m d2)\\<rbrakk>\n  \\<Longrightarrow> (1\\<^sub>m d1 \\<Otimes> 1\\<^sub>m d2) $$ (?i, ?j) =\n                    1\\<^sub>m d1 $$\n                    (?i div dim_row (1\\<^sub>m d2),\n                     ?j div dim_col (1\\<^sub>m d2)) *\n                    1\\<^sub>m d2 $$\n                    (?i mod dim_row (1\\<^sub>m d2),\n                     ?j mod dim_col (1\\<^sub>m d2))\n\ngoal (1 subgoal):\n 1. (1\\<^sub>m d1 \\<Otimes> 1\\<^sub>m d2) $$ (i, i) = 1", "by (simp add: assms less_mult_imp_div_less)"], ["proof (state)\nthis:\n  ?i < d1 * d2 \\<Longrightarrow>\n  (1\\<^sub>m d1 \\<Otimes> 1\\<^sub>m d2) $$ (?i, ?i) = 1\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d1 * d2; j < d1 * d2; i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> (1\\<^sub>m d1 \\<Otimes> 1\\<^sub>m d2) $$ (i, j) = 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d1 * d2; j < d1 * d2; i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> (1\\<^sub>m d1 \\<Otimes> 1\\<^sub>m d2) $$ (i, j) = 0", "show \"tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) $$ (i, j) = 0\" if \"i < d1 * d2\" \"j < d1 * d2\" \"i \\<noteq> j\" for i j"], ["proof (prove)\ngoal (1 subgoal):\n 1. (1\\<^sub>m d1 \\<Otimes> 1\\<^sub>m d2) $$ (i, j) = 0", "using that index_tensor_mat[of \"1\\<^sub>m d1\" d1 d1 \"1\\<^sub>m d2\" d2 d2 i j]"], ["proof (prove)\nusing this:\n  i < d1 * d2\n  j < d1 * d2\n  i \\<noteq> j\n  \\<lbrakk>dim_row (1\\<^sub>m d1) = d1; dim_col (1\\<^sub>m d1) = d1;\n   dim_row (1\\<^sub>m d2) = d2; dim_col (1\\<^sub>m d2) = d2; i < d1 * d2;\n   j < d1 * d2; 0 < d1; 0 < d2\\<rbrakk>\n  \\<Longrightarrow> (1\\<^sub>m d1 \\<Otimes> 1\\<^sub>m d2) $$ (i, j) =\n                    1\\<^sub>m d1 $$ (i div d2, j div d2) *\n                    1\\<^sub>m d2 $$ (i mod d2, j mod d2)\n\ngoal (1 subgoal):\n 1. (1\\<^sub>m d1 \\<Otimes> 1\\<^sub>m d2) $$ (i, j) = 0", "by (metis assms(1) assms(2) index_one_mat(1) index_one_mat(2) index_one_mat(3) \n        less_mult_imp_div_less mod_less_divisor mult_div_mod_eq mult_not_zero)"], ["proof (state)\nthis:\n  \\<lbrakk>?i < d1 * d2; ?j < d1 * d2; ?i \\<noteq> ?j\\<rbrakk>\n  \\<Longrightarrow> (1\\<^sub>m d1 \\<Otimes> 1\\<^sub>m d2) $$ (?i, ?j) = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tensor_mat_hermitian:\n  assumes \"A \\<in> carrier_mat n n\"\n  and \"B \\<in> carrier_mat n' n'\"\n  and \"0 < n\"\n  and \"0 < n'\"\n  and \"hermitian A\"\n  and \"hermitian B\"\n  shows \"hermitian (tensor_mat A B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hermitian (A \\<Otimes> B)", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n' n'\n  0 < n\n  0 < n'\n  hermitian A\n  hermitian B\n\ngoal (1 subgoal):\n 1. hermitian (A \\<Otimes> B)", "by (metis hermitian_def tensor_mat_adjoint)"], ["", "lemma  tensor_mat_unitary:\n  assumes \"Complex_Matrix.unitary U\"\n  and \"Complex_Matrix.unitary V\"\nand \"0 < dim_row U\"\nand \"0 < dim_row V\"\nshows \"Complex_Matrix.unitary (tensor_mat U V)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.unitary (U \\<Otimes> V)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Complex_Matrix.unitary (U \\<Otimes> V)", "define UI where \"UI = tensor_mat U V\""], ["proof (state)\nthis:\n  UI = U \\<Otimes> V\n\ngoal (1 subgoal):\n 1. Complex_Matrix.unitary (U \\<Otimes> V)", "have \"Complex_Matrix.adjoint UI = \n    tensor_mat (Complex_Matrix.adjoint U) (Complex_Matrix.adjoint V)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint UI =\n    Complex_Matrix.adjoint U \\<Otimes> Complex_Matrix.adjoint V", "unfolding UI_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (U \\<Otimes> V) =\n    Complex_Matrix.adjoint U \\<Otimes> Complex_Matrix.adjoint V", "proof (rule tensor_mat_adjoint)"], ["proof (state)\ngoal (6 subgoals):\n 1. U \\<in> carrier_mat ?r1.0 ?c1.0\n 2. V \\<in> carrier_mat ?r2.0 ?c2.0\n 3. 0 < ?c1.0\n 4. 0 < ?c2.0\n 5. 0 < ?r1.0\n 6. 0 < ?r2.0", "show \"U \\<in> carrier_mat (dim_row U) (dim_row U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. U \\<in> carrier_mat (dim_row U) (dim_row U)", "using assms"], ["proof (prove)\nusing this:\n  Complex_Matrix.unitary U\n  Complex_Matrix.unitary V\n  0 < dim_row U\n  0 < dim_row V\n\ngoal (1 subgoal):\n 1. U \\<in> carrier_mat (dim_row U) (dim_row U)", "unfolding Complex_Matrix.unitary_def"], ["proof (prove)\nusing this:\n  U \\<in> carrier_mat (dim_row U) (dim_row U) \\<and>\n  inverts_mat U (Complex_Matrix.adjoint U)\n  V \\<in> carrier_mat (dim_row V) (dim_row V) \\<and>\n  inverts_mat V (Complex_Matrix.adjoint V)\n  0 < dim_row U\n  0 < dim_row V\n\ngoal (1 subgoal):\n 1. U \\<in> carrier_mat (dim_row U) (dim_row U)", "by simp"], ["proof (state)\nthis:\n  U \\<in> carrier_mat (dim_row U) (dim_row U)\n\ngoal (5 subgoals):\n 1. V \\<in> carrier_mat ?r2.0 ?c2.0\n 2. 0 < dim_row U\n 3. 0 < ?c2.0\n 4. 0 < dim_row U\n 5. 0 < ?r2.0", "show \"V \\<in> carrier_mat (dim_row V) (dim_row V)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<in> carrier_mat (dim_row V) (dim_row V)", "using assms"], ["proof (prove)\nusing this:\n  Complex_Matrix.unitary U\n  Complex_Matrix.unitary V\n  0 < dim_row U\n  0 < dim_row V\n\ngoal (1 subgoal):\n 1. V \\<in> carrier_mat (dim_row V) (dim_row V)", "unfolding Complex_Matrix.unitary_def"], ["proof (prove)\nusing this:\n  U \\<in> carrier_mat (dim_row U) (dim_row U) \\<and>\n  inverts_mat U (Complex_Matrix.adjoint U)\n  V \\<in> carrier_mat (dim_row V) (dim_row V) \\<and>\n  inverts_mat V (Complex_Matrix.adjoint V)\n  0 < dim_row U\n  0 < dim_row V\n\ngoal (1 subgoal):\n 1. V \\<in> carrier_mat (dim_row V) (dim_row V)", "by simp"], ["proof (state)\nthis:\n  V \\<in> carrier_mat (dim_row V) (dim_row V)\n\ngoal (4 subgoals):\n 1. 0 < dim_row U\n 2. 0 < dim_row V\n 3. 0 < dim_row U\n 4. 0 < dim_row V", "show \"0 < dim_row V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < dim_row V", "using assms"], ["proof (prove)\nusing this:\n  Complex_Matrix.unitary U\n  Complex_Matrix.unitary V\n  0 < dim_row U\n  0 < dim_row V\n\ngoal (1 subgoal):\n 1. 0 < dim_row V", "by simp"], ["proof (state)\nthis:\n  0 < dim_row V\n\ngoal (3 subgoals):\n 1. 0 < dim_row U\n 2. 0 < dim_row U\n 3. 0 < dim_row V", "show \"0 < dim_row U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < dim_row U", "using assms"], ["proof (prove)\nusing this:\n  Complex_Matrix.unitary U\n  Complex_Matrix.unitary V\n  0 < dim_row U\n  0 < dim_row V\n\ngoal (1 subgoal):\n 1. 0 < dim_row U", "by simp"], ["proof (state)\nthis:\n  0 < dim_row U\n\ngoal (2 subgoals):\n 1. 0 < dim_row U\n 2. 0 < dim_row V", "show \"0 < dim_row V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < dim_row V", "using assms"], ["proof (prove)\nusing this:\n  Complex_Matrix.unitary U\n  Complex_Matrix.unitary V\n  0 < dim_row U\n  0 < dim_row V\n\ngoal (1 subgoal):\n 1. 0 < dim_row V", "by simp"], ["proof (state)\nthis:\n  0 < dim_row V\n\ngoal (1 subgoal):\n 1. 0 < dim_row U", "show \"0 < dim_row U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < dim_row U", "using assms"], ["proof (prove)\nusing this:\n  Complex_Matrix.unitary U\n  Complex_Matrix.unitary V\n  0 < dim_row U\n  0 < dim_row V\n\ngoal (1 subgoal):\n 1. 0 < dim_row U", "by simp"], ["proof (state)\nthis:\n  0 < dim_row U\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Complex_Matrix.adjoint UI =\n  Complex_Matrix.adjoint U \\<Otimes> Complex_Matrix.adjoint V\n\ngoal (1 subgoal):\n 1. Complex_Matrix.unitary (U \\<Otimes> V)", "hence \"UI * (Complex_Matrix.adjoint UI) = \n    tensor_mat (U * Complex_Matrix.adjoint U) (V * Complex_Matrix.adjoint V)\""], ["proof (prove)\nusing this:\n  Complex_Matrix.adjoint UI =\n  Complex_Matrix.adjoint U \\<Otimes> Complex_Matrix.adjoint V\n\ngoal (1 subgoal):\n 1. UI * Complex_Matrix.adjoint UI =\n    U * Complex_Matrix.adjoint U \\<Otimes> V * Complex_Matrix.adjoint V", "using mult_distr_tensor[of U \"Complex_Matrix.adjoint U\" \"V\" \"Complex_Matrix.adjoint V\"]"], ["proof (prove)\nusing this:\n  Complex_Matrix.adjoint UI =\n  Complex_Matrix.adjoint U \\<Otimes> Complex_Matrix.adjoint V\n  \\<lbrakk>dim_col U = dim_row (Complex_Matrix.adjoint U);\n   dim_col V = dim_row (Complex_Matrix.adjoint V); 0 < dim_col U;\n   0 < dim_col (Complex_Matrix.adjoint U); 0 < dim_col V;\n   0 < dim_col (Complex_Matrix.adjoint V)\\<rbrakk>\n  \\<Longrightarrow> U * Complex_Matrix.adjoint U \\<Otimes>\n                    V * Complex_Matrix.adjoint V =\n                    (U \\<Otimes> V) *\n                    (Complex_Matrix.adjoint U \\<Otimes>\n                     Complex_Matrix.adjoint V)\n\ngoal (1 subgoal):\n 1. UI * Complex_Matrix.adjoint UI =\n    U * Complex_Matrix.adjoint U \\<Otimes> V * Complex_Matrix.adjoint V", "unfolding UI_def"], ["proof (prove)\nusing this:\n  Complex_Matrix.adjoint (U \\<Otimes> V) =\n  Complex_Matrix.adjoint U \\<Otimes> Complex_Matrix.adjoint V\n  \\<lbrakk>dim_col U = dim_row (Complex_Matrix.adjoint U);\n   dim_col V = dim_row (Complex_Matrix.adjoint V); 0 < dim_col U;\n   0 < dim_col (Complex_Matrix.adjoint U); 0 < dim_col V;\n   0 < dim_col (Complex_Matrix.adjoint V)\\<rbrakk>\n  \\<Longrightarrow> U * Complex_Matrix.adjoint U \\<Otimes>\n                    V * Complex_Matrix.adjoint V =\n                    (U \\<Otimes> V) *\n                    (Complex_Matrix.adjoint U \\<Otimes>\n                     Complex_Matrix.adjoint V)\n\ngoal (1 subgoal):\n 1. (U \\<Otimes> V) * Complex_Matrix.adjoint (U \\<Otimes> V) =\n    U * Complex_Matrix.adjoint U \\<Otimes> V * Complex_Matrix.adjoint V", "by (metis (no_types, lifting) Complex_Matrix.unitary_def adjoint_dim_col adjoint_dim_row \n        assms carrier_matD(2) )"], ["proof (state)\nthis:\n  UI * Complex_Matrix.adjoint UI =\n  U * Complex_Matrix.adjoint U \\<Otimes> V * Complex_Matrix.adjoint V\n\ngoal (1 subgoal):\n 1. Complex_Matrix.unitary (U \\<Otimes> V)", "also"], ["proof (state)\nthis:\n  UI * Complex_Matrix.adjoint UI =\n  U * Complex_Matrix.adjoint U \\<Otimes> V * Complex_Matrix.adjoint V\n\ngoal (1 subgoal):\n 1. Complex_Matrix.unitary (U \\<Otimes> V)", "have \"... = tensor_mat (1\\<^sub>m (dim_row U)) (1\\<^sub>m (dim_row V))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. U * Complex_Matrix.adjoint U \\<Otimes> V * Complex_Matrix.adjoint V =\n    1\\<^sub>m (dim_row U) \\<Otimes> 1\\<^sub>m (dim_row V)", "using assms unitary_simps(2)"], ["proof (prove)\nusing this:\n  Complex_Matrix.unitary U\n  Complex_Matrix.unitary V\n  0 < dim_row U\n  0 < dim_row V\n  \\<lbrakk>?A \\<in> carrier_mat ?n ?n; Complex_Matrix.unitary ?A\\<rbrakk>\n  \\<Longrightarrow> ?A * Complex_Matrix.adjoint ?A = 1\\<^sub>m ?n\n\ngoal (1 subgoal):\n 1. U * Complex_Matrix.adjoint U \\<Otimes> V * Complex_Matrix.adjoint V =\n    1\\<^sub>m (dim_row U) \\<Otimes> 1\\<^sub>m (dim_row V)", "by (metis Complex_Matrix.unitary_def)"], ["proof (state)\nthis:\n  U * Complex_Matrix.adjoint U \\<Otimes> V * Complex_Matrix.adjoint V =\n  1\\<^sub>m (dim_row U) \\<Otimes> 1\\<^sub>m (dim_row V)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.unitary (U \\<Otimes> V)", "also"], ["proof (state)\nthis:\n  U * Complex_Matrix.adjoint U \\<Otimes> V * Complex_Matrix.adjoint V =\n  1\\<^sub>m (dim_row U) \\<Otimes> 1\\<^sub>m (dim_row V)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.unitary (U \\<Otimes> V)", "have \"... = (1\\<^sub>m (dim_row U * dim_row V))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1\\<^sub>m (dim_row U) \\<Otimes> 1\\<^sub>m (dim_row V) =\n    1\\<^sub>m (dim_row U * dim_row V)", "using tensor_mat_id assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 < ?d1.0; 0 < ?d2.0\\<rbrakk>\n  \\<Longrightarrow> 1\\<^sub>m ?d1.0 \\<Otimes> 1\\<^sub>m ?d2.0 =\n                    1\\<^sub>m (?d1.0 * ?d2.0)\n  Complex_Matrix.unitary U\n  Complex_Matrix.unitary V\n  0 < dim_row U\n  0 < dim_row V\n\ngoal (1 subgoal):\n 1. 1\\<^sub>m (dim_row U) \\<Otimes> 1\\<^sub>m (dim_row V) =\n    1\\<^sub>m (dim_row U * dim_row V)", "by simp"], ["proof (state)\nthis:\n  1\\<^sub>m (dim_row U) \\<Otimes> 1\\<^sub>m (dim_row V) =\n  1\\<^sub>m (dim_row U * dim_row V)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.unitary (U \\<Otimes> V)", "finally"], ["proof (chain)\npicking this:\n  UI * Complex_Matrix.adjoint UI = 1\\<^sub>m (dim_row U * dim_row V)", "have \"UI * (Complex_Matrix.adjoint UI) = (1\\<^sub>m (dim_row U * dim_row V))\""], ["proof (prove)\nusing this:\n  UI * Complex_Matrix.adjoint UI = 1\\<^sub>m (dim_row U * dim_row V)\n\ngoal (1 subgoal):\n 1. UI * Complex_Matrix.adjoint UI = 1\\<^sub>m (dim_row U * dim_row V)", "."], ["proof (state)\nthis:\n  UI * Complex_Matrix.adjoint UI = 1\\<^sub>m (dim_row U * dim_row V)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.unitary (U \\<Otimes> V)", "hence \"inverts_mat UI (Complex_Matrix.adjoint UI)\""], ["proof (prove)\nusing this:\n  UI * Complex_Matrix.adjoint UI = 1\\<^sub>m (dim_row U * dim_row V)\n\ngoal (1 subgoal):\n 1. inverts_mat UI (Complex_Matrix.adjoint UI)", "unfolding inverts_mat_def UI_def"], ["proof (prove)\nusing this:\n  (U \\<Otimes> V) * Complex_Matrix.adjoint (U \\<Otimes> V) =\n  1\\<^sub>m (dim_row U * dim_row V)\n\ngoal (1 subgoal):\n 1. (U \\<Otimes> V) * Complex_Matrix.adjoint (U \\<Otimes> V) =\n    1\\<^sub>m (dim_row (U \\<Otimes> V))", "by simp"], ["proof (state)\nthis:\n  inverts_mat UI (Complex_Matrix.adjoint UI)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.unitary (U \\<Otimes> V)", "thus ?thesis"], ["proof (prove)\nusing this:\n  inverts_mat UI (Complex_Matrix.adjoint UI)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.unitary (U \\<Otimes> V)", "using assms"], ["proof (prove)\nusing this:\n  inverts_mat UI (Complex_Matrix.adjoint UI)\n  Complex_Matrix.unitary U\n  Complex_Matrix.unitary V\n  0 < dim_row U\n  0 < dim_row V\n\ngoal (1 subgoal):\n 1. Complex_Matrix.unitary (U \\<Otimes> V)", "unfolding Complex_Matrix.unitary_def UI_def"], ["proof (prove)\nusing this:\n  inverts_mat (U \\<Otimes> V) (Complex_Matrix.adjoint (U \\<Otimes> V))\n  U \\<in> carrier_mat (dim_row U) (dim_row U) \\<and>\n  inverts_mat U (Complex_Matrix.adjoint U)\n  V \\<in> carrier_mat (dim_row V) (dim_row V) \\<and>\n  inverts_mat V (Complex_Matrix.adjoint V)\n  0 < dim_row U\n  0 < dim_row V\n\ngoal (1 subgoal):\n 1. U \\<Otimes> V\n    \\<in> carrier_mat (dim_row (U \\<Otimes> V))\n           (dim_row (U \\<Otimes> V)) \\<and>\n    inverts_mat (U \\<Otimes> V) (Complex_Matrix.adjoint (U \\<Otimes> V))", "by (metis carrier_matD(2) carrier_matI dim_col_tensor_mat dim_row_tensor_mat)"], ["proof (state)\nthis:\n  Complex_Matrix.unitary (U \\<Otimes> V)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Fixed carrier matrices locale\\<close>"], ["", "text \\<open>We define a locale for matrices with a fixed number of rows and columns, and define a\nfinite sum operation on this locale. The \\verb+Type_To_Sets+ transfer tools then permits to obtain\nlemmata on the locale for free. \\<close>"], ["", "locale fixed_carrier_mat =\n  fixes fc_mats::\"'a::field Matrix.mat set\" \n  fixes dimR dimC\n  assumes fc_mats_carrier: \"fc_mats = carrier_mat dimR dimC\"\nbegin"], ["", "sublocale semigroup_add_on_with fc_mats \"(+)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semigroup_add_on_with fc_mats (+)", "proof (unfold_locales)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<in> fc_mats; b \\<in> fc_mats; c \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> a + b + c = a + (b + c)\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> fc_mats; b \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> a + b \\<in> fc_mats", "show \"\\<And>a b. a \\<in> fc_mats \\<Longrightarrow> b \\<in> fc_mats \\<Longrightarrow> a + b \\<in> fc_mats\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> fc_mats; b \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> a + b \\<in> fc_mats", "using fc_mats_carrier"], ["proof (prove)\nusing this:\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> fc_mats; b \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> a + b \\<in> fc_mats", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk>?a \\<in> fc_mats; ?b \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> ?a + ?b \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<in> fc_mats; b \\<in> fc_mats; c \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> a + b + c = a + (b + c)", "show \"\\<And>a b c. a \\<in> fc_mats \\<Longrightarrow> b \\<in> fc_mats \\<Longrightarrow> c \\<in> fc_mats \\<Longrightarrow> a + b + c = a + (b + c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<in> fc_mats; b \\<in> fc_mats; c \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> a + b + c = a + (b + c)", "using fc_mats_carrier"], ["proof (prove)\nusing this:\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<in> fc_mats; b \\<in> fc_mats; c \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> a + b + c = a + (b + c)", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk>?a \\<in> fc_mats; ?b \\<in> fc_mats; ?c \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> ?a + ?b + ?c = ?a + (?b + ?c)\n\ngoal:\nNo subgoals!", "qed"], ["", "sublocale ab_semigroup_add_on_with fc_mats \"(+)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ab_semigroup_add_on_with fc_mats (+)", "proof (unfold_locales)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> fc_mats; b \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> a + b = b + a", "show \"\\<And>a b. a \\<in> fc_mats \\<Longrightarrow> b \\<in> fc_mats \\<Longrightarrow> a + b = b + a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> fc_mats; b \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> a + b = b + a", "using fc_mats_carrier"], ["proof (prove)\nusing this:\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> fc_mats; b \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> a + b = b + a", "by (simp add: comm_add_mat)"], ["proof (state)\nthis:\n  \\<lbrakk>?a \\<in> fc_mats; ?b \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> ?a + ?b = ?b + ?a\n\ngoal:\nNo subgoals!", "qed"], ["", "sublocale comm_monoid_add_on_with fc_mats \"(+)\" \"0\\<^sub>m dimR dimC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_monoid_add_on_with fc_mats (+) (0\\<^sub>m dimR dimC)", "proof (unfold_locales)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a. a \\<in> fc_mats \\<Longrightarrow> 0\\<^sub>m dimR dimC + a = a\n 2. 0\\<^sub>m dimR dimC \\<in> fc_mats", "show \"0\\<^sub>m dimR dimC \\<in> fc_mats\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0\\<^sub>m dimR dimC \\<in> fc_mats", "using fc_mats_carrier"], ["proof (prove)\nusing this:\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. 0\\<^sub>m dimR dimC \\<in> fc_mats", "by simp"], ["proof (state)\nthis:\n  0\\<^sub>m dimR dimC \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> fc_mats \\<Longrightarrow> 0\\<^sub>m dimR dimC + a = a", "show \"\\<And>a. a \\<in> fc_mats \\<Longrightarrow> 0\\<^sub>m dimR dimC + a = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> fc_mats \\<Longrightarrow> 0\\<^sub>m dimR dimC + a = a", "using fc_mats_carrier"], ["proof (prove)\nusing this:\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> fc_mats \\<Longrightarrow> 0\\<^sub>m dimR dimC + a = a", "by simp"], ["proof (state)\nthis:\n  ?a \\<in> fc_mats \\<Longrightarrow> 0\\<^sub>m dimR dimC + ?a = ?a\n\ngoal:\nNo subgoals!", "qed"], ["", "sublocale ab_group_add_on_with fc_mats \"(+)\" \"0\\<^sub>m dimR dimC\" \"(-)\" \"uminus\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ab_group_add_on_with fc_mats (+) (0\\<^sub>m dimR dimC) (-) uminus", "proof (unfold_locales)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a. a \\<in> fc_mats \\<Longrightarrow> - a + a = 0\\<^sub>m dimR dimC\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> fc_mats; b \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> a - b = a + - b\n 3. \\<And>a. a \\<in> fc_mats \\<Longrightarrow> - a \\<in> fc_mats", "show \"\\<And>a. a \\<in> fc_mats \\<Longrightarrow> - a + a = 0\\<^sub>m dimR dimC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> fc_mats \\<Longrightarrow> - a + a = 0\\<^sub>m dimR dimC", "using fc_mats_carrier"], ["proof (prove)\nusing this:\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> fc_mats \\<Longrightarrow> - a + a = 0\\<^sub>m dimR dimC", "by simp"], ["proof (state)\nthis:\n  ?a \\<in> fc_mats \\<Longrightarrow> - ?a + ?a = 0\\<^sub>m dimR dimC\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> fc_mats; b \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> a - b = a + - b\n 2. \\<And>a. a \\<in> fc_mats \\<Longrightarrow> - a \\<in> fc_mats", "show \"\\<And>a b. a \\<in> fc_mats \\<Longrightarrow> b \\<in> fc_mats \\<Longrightarrow> a - b = a + - b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> fc_mats; b \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> a - b = a + - b", "using fc_mats_carrier"], ["proof (prove)\nusing this:\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> fc_mats; b \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> a - b = a + - b", "by (simp add: add_uminus_minus_mat)"], ["proof (state)\nthis:\n  \\<lbrakk>?a \\<in> fc_mats; ?b \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> ?a - ?b = ?a + - ?b\n\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> fc_mats \\<Longrightarrow> - a \\<in> fc_mats", "show \"\\<And>a. a \\<in> fc_mats \\<Longrightarrow> - a \\<in> fc_mats\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> fc_mats \\<Longrightarrow> - a \\<in> fc_mats", "using fc_mats_carrier"], ["proof (prove)\nusing this:\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> fc_mats \\<Longrightarrow> - a \\<in> fc_mats", "by simp"], ["proof (state)\nthis:\n  ?a \\<in> fc_mats \\<Longrightarrow> - ?a \\<in> fc_mats\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma (in fixed_carrier_mat) smult_mem:\n  assumes \"A \\<in> fc_mats\"\n  shows \"a \\<cdot>\\<^sub>m A \\<in> fc_mats\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>m A \\<in> fc_mats", "using fc_mats_carrier assms"], ["proof (prove)\nusing this:\n  fc_mats = carrier_mat dimR dimC\n  A \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>m A \\<in> fc_mats", "by auto"], ["", "definition (in fixed_carrier_mat) sum_mat where\n\"sum_mat A I = sum_with (+) (0\\<^sub>m dimR dimC) A I\""], ["", "lemma (in fixed_carrier_mat) sum_mat_empty[simp]:\n  shows \"sum_mat A {} = 0\\<^sub>m dimR dimC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat A {} = 0\\<^sub>m dimR dimC", "unfolding sum_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_with (+) (0\\<^sub>m dimR dimC) A {} = 0\\<^sub>m dimR dimC", "by simp"], ["", "lemma (in fixed_carrier_mat) sum_mat_carrier:\n  shows \"(\\<And>i. i \\<in> I \\<Longrightarrow> (A i)\\<in> fc_mats) \\<Longrightarrow> sum_mat A I \\<in> carrier_mat dimR dimC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        i \\<in> I \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n    local.sum_mat A I \\<in> carrier_mat dimR dimC", "unfolding sum_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        i \\<in> I \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n    sum_with (+) (0\\<^sub>m dimR dimC) A I \\<in> carrier_mat dimR dimC", "using sum_with_mem[of A I] fc_mats_carrier"], ["proof (prove)\nusing this:\n  A ` I \\<subseteq> fc_mats \\<Longrightarrow>\n  sum_with (+) (0\\<^sub>m dimR dimC) A I \\<in> fc_mats\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        i \\<in> I \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n    sum_with (+) (0\\<^sub>m dimR dimC) A I \\<in> carrier_mat dimR dimC", "by auto"], ["", "lemma (in fixed_carrier_mat) sum_mat_insert:\n  assumes \"A x \\<in> fc_mats\" \"A ` I \\<subseteq> fc_mats\"\n    and A: \"finite I\" and x: \"x \\<notin> I\"\n  shows \"sum_mat A (insert x I) = A x + sum_mat A I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat A (insert x I) = A x + local.sum_mat A I", "unfolding sum_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_with (+) (0\\<^sub>m dimR dimC) A (insert x I) =\n    A x + sum_with (+) (0\\<^sub>m dimR dimC) A I", "using assms sum_with_insert[of A x I]"], ["proof (prove)\nusing this:\n  A x \\<in> fc_mats\n  A ` I \\<subseteq> fc_mats\n  finite I\n  x \\<notin> I\n  \\<lbrakk>A x \\<in> fc_mats; A ` I \\<subseteq> fc_mats; finite I;\n   x \\<notin> I\\<rbrakk>\n  \\<Longrightarrow> sum_with (+) (0\\<^sub>m dimR dimC) A (insert x I) =\n                    A x + sum_with (+) (0\\<^sub>m dimR dimC) A I\n\ngoal (1 subgoal):\n 1. sum_with (+) (0\\<^sub>m dimR dimC) A (insert x I) =\n    A x + sum_with (+) (0\\<^sub>m dimR dimC) A I", "by simp"], ["", "subsection \\<open>A locale for square matrices\\<close>"], ["", "locale cpx_sq_mat = fixed_carrier_mat \"fc_mats::complex Matrix.mat set\" for fc_mats +\n  assumes dim_eq: \"dimR = dimC\"\n  and npos: \"0 < dimR\""], ["", "lemma (in cpx_sq_mat) one_mem:\n  shows \"1\\<^sub>m dimR \\<in> fc_mats\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1\\<^sub>m dimR \\<in> fc_mats", "using fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. 1\\<^sub>m dimR \\<in> fc_mats", "by simp"], ["", "lemma (in cpx_sq_mat) square_mats:\n  assumes \"A \\<in> fc_mats\"\n  shows \"square_mat A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. square_mat A", "using fc_mats_carrier dim_eq assms"], ["proof (prove)\nusing this:\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n  A \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. square_mat A", "by simp"], ["", "lemma (in cpx_sq_mat) cpx_sq_mat_mult:\n  assumes \"A \\<in> fc_mats\"\n  and \"B \\<in> fc_mats\"\nshows \"A * B \\<in> fc_mats\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A * B \\<in> fc_mats", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A * B \\<in> fc_mats", "have \"dim_row (A * B) = dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (A * B) = dimR", "using assms fc_mats_carrier"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. dim_row (A * B) = dimR", "by simp"], ["proof (state)\nthis:\n  dim_row (A * B) = dimR\n\ngoal (1 subgoal):\n 1. A * B \\<in> fc_mats", "moreover"], ["proof (state)\nthis:\n  dim_row (A * B) = dimR\n\ngoal (1 subgoal):\n 1. A * B \\<in> fc_mats", "have \"dim_col (A * B) = dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (A * B) = dimR", "using assms fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. dim_col (A * B) = dimR", "by simp"], ["proof (state)\nthis:\n  dim_col (A * B) = dimR\n\ngoal (1 subgoal):\n 1. A * B \\<in> fc_mats", "ultimately"], ["proof (chain)\npicking this:\n  dim_row (A * B) = dimR\n  dim_col (A * B) = dimR", "show ?thesis"], ["proof (prove)\nusing this:\n  dim_row (A * B) = dimR\n  dim_col (A * B) = dimR\n\ngoal (1 subgoal):\n 1. A * B \\<in> fc_mats", "using fc_mats_carrier carrier_mat_def dim_eq"], ["proof (prove)\nusing this:\n  dim_row (A * B) = dimR\n  dim_col (A * B) = dimR\n  fc_mats = carrier_mat dimR dimC\n  carrier_mat ?nr ?nc = {m. dim_row m = ?nr \\<and> dim_col m = ?nc}\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. A * B \\<in> fc_mats", "by auto"], ["proof (state)\nthis:\n  A * B \\<in> fc_mats\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in cpx_sq_mat) sum_mat_distrib_left:\n  shows \"finite I \\<Longrightarrow> R\\<in> fc_mats \\<Longrightarrow> (\\<And>i. i \\<in> I \\<Longrightarrow> (A i)\\<in> fc_mats) \\<Longrightarrow> \n    sum_mat (\\<lambda>i. R * (A i)) I = R * (sum_mat A I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; R \\<in> fc_mats;\n     \\<And>i. i \\<in> I \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) I =\n                      R * local.sum_mat A I", "proof (induct rule: finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>R \\<in> fc_mats;\n     \\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) {} =\n                      R * local.sum_mat A {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) F =\n                          R * local.sum_mat A F;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) (insert x F) =\n                         R * local.sum_mat A (insert x F)", "case empty"], ["proof (state)\nthis:\n  R \\<in> fc_mats\n  ?i1 \\<in> {} \\<Longrightarrow> A ?i1 \\<in> fc_mats\n\ngoal (2 subgoals):\n 1. \\<lbrakk>R \\<in> fc_mats;\n     \\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) {} =\n                      R * local.sum_mat A {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) F =\n                          R * local.sum_mat A F;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) (insert x F) =\n                         R * local.sum_mat A (insert x F)", "hence a: \"sum_mat (\\<lambda>i. R * (A i)) {} = 0\\<^sub>m dimR dimC\""], ["proof (prove)\nusing this:\n  R \\<in> fc_mats\n  ?i1 \\<in> {} \\<Longrightarrow> A ?i1 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. R * A i) {} = 0\\<^sub>m dimR dimC", "unfolding sum_mat_def"], ["proof (prove)\nusing this:\n  R \\<in> fc_mats\n  ?i1 \\<in> {} \\<Longrightarrow> A ?i1 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. sum_with (+) (0\\<^sub>m dimR dimC) (\\<lambda>i. R * A i) {} =\n    0\\<^sub>m dimR dimC", "by simp"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. R * A i) {} = 0\\<^sub>m dimR dimC\n\ngoal (2 subgoals):\n 1. \\<lbrakk>R \\<in> fc_mats;\n     \\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) {} =\n                      R * local.sum_mat A {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) F =\n                          R * local.sum_mat A F;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) (insert x F) =\n                         R * local.sum_mat A (insert x F)", "have \"sum_mat A {} = 0\\<^sub>m dimR dimC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat A {} = 0\\<^sub>m dimR dimC", "unfolding sum_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_with (+) (0\\<^sub>m dimR dimC) A {} = 0\\<^sub>m dimR dimC", "by simp"], ["proof (state)\nthis:\n  local.sum_mat A {} = 0\\<^sub>m dimR dimC\n\ngoal (2 subgoals):\n 1. \\<lbrakk>R \\<in> fc_mats;\n     \\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) {} =\n                      R * local.sum_mat A {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) F =\n                          R * local.sum_mat A F;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) (insert x F) =\n                         R * local.sum_mat A (insert x F)", "hence \"R * (sum_mat A {}) = 0\\<^sub>m dimR dimC\""], ["proof (prove)\nusing this:\n  local.sum_mat A {} = 0\\<^sub>m dimR dimC\n\ngoal (1 subgoal):\n 1. R * local.sum_mat A {} = 0\\<^sub>m dimR dimC", "using  fc_mats_carrier\n      right_mult_zero_mat[of R dimR dimC dimC] empty dim_eq"], ["proof (prove)\nusing this:\n  local.sum_mat A {} = 0\\<^sub>m dimR dimC\n  fc_mats = carrier_mat dimR dimC\n  R \\<in> carrier_mat dimR dimC \\<Longrightarrow>\n  R * 0\\<^sub>m dimC dimC = 0\\<^sub>m dimR dimC\n  R \\<in> fc_mats\n  ?i1 \\<in> {} \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. R * local.sum_mat A {} = 0\\<^sub>m dimR dimC", "by simp"], ["proof (state)\nthis:\n  R * local.sum_mat A {} = 0\\<^sub>m dimR dimC\n\ngoal (2 subgoals):\n 1. \\<lbrakk>R \\<in> fc_mats;\n     \\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) {} =\n                      R * local.sum_mat A {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) F =\n                          R * local.sum_mat A F;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) (insert x F) =\n                         R * local.sum_mat A (insert x F)", "thus ?case"], ["proof (prove)\nusing this:\n  R * local.sum_mat A {} = 0\\<^sub>m dimR dimC\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. R * A i) {} = R * local.sum_mat A {}", "using a"], ["proof (prove)\nusing this:\n  R * local.sum_mat A {} = 0\\<^sub>m dimR dimC\n  local.sum_mat (\\<lambda>i. R * A i) {} = 0\\<^sub>m dimR dimC\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. R * A i) {} = R * local.sum_mat A {}", "by simp"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. R * A i) {} = R * local.sum_mat A {}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) F =\n                          R * local.sum_mat A F;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) (insert x F) =\n                         R * local.sum_mat A (insert x F)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) F =\n                          R * local.sum_mat A F;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) (insert x F) =\n                         R * local.sum_mat A (insert x F)", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>R \\<in> fc_mats;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) F =\n                    R * local.sum_mat A F\n  R \\<in> fc_mats\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) F =\n                          R * local.sum_mat A F;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) (insert x F) =\n                         R * local.sum_mat A (insert x F)", "hence \"sum_mat (\\<lambda>i. R * A i) (insert x F) = R * (A x) + sum_mat (\\<lambda>i. R * A i) F\""], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>R \\<in> fc_mats;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) F =\n                    R * local.sum_mat A F\n  R \\<in> fc_mats\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. R * A i) (insert x F) =\n    R * A x + local.sum_mat (\\<lambda>i. R * A i) F", "using sum_mat_insert[of \"\\<lambda>i. R * A i\" x F]"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>R \\<in> fc_mats;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) F =\n                    R * local.sum_mat A F\n  R \\<in> fc_mats\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  \\<lbrakk>R * A x \\<in> fc_mats;\n   (\\<lambda>i. R * A i) ` F \\<subseteq> fc_mats; finite F;\n   x \\<notin> F\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) (insert x F) =\n                    R * A x + local.sum_mat (\\<lambda>i. R * A i) F\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. R * A i) (insert x F) =\n    R * A x + local.sum_mat (\\<lambda>i. R * A i) F", "by (simp add: image_subsetI fc_mats_carrier dim_eq)"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. R * A i) (insert x F) =\n  R * A x + local.sum_mat (\\<lambda>i. R * A i) F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) F =\n                          R * local.sum_mat A F;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) (insert x F) =\n                         R * local.sum_mat A (insert x F)", "also"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. R * A i) (insert x F) =\n  R * A x + local.sum_mat (\\<lambda>i. R * A i) F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) F =\n                          R * local.sum_mat A F;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) (insert x F) =\n                         R * local.sum_mat A (insert x F)", "have \"... = R * (A x) + R * (sum_mat A F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R * A x + local.sum_mat (\\<lambda>i. R * A i) F =\n    R * A x + R * local.sum_mat A F", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>R \\<in> fc_mats;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) F =\n                    R * local.sum_mat A F\n  R \\<in> fc_mats\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. R * A x + local.sum_mat (\\<lambda>i. R * A i) F =\n    R * A x + R * local.sum_mat A F", "by simp"], ["proof (state)\nthis:\n  R * A x + local.sum_mat (\\<lambda>i. R * A i) F =\n  R * A x + R * local.sum_mat A F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) F =\n                          R * local.sum_mat A F;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) (insert x F) =\n                         R * local.sum_mat A (insert x F)", "also"], ["proof (state)\nthis:\n  R * A x + local.sum_mat (\\<lambda>i. R * A i) F =\n  R * A x + R * local.sum_mat A F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) F =\n                          R * local.sum_mat A F;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) (insert x F) =\n                         R * local.sum_mat A (insert x F)", "have \"... = R * (A x + (sum_mat A F))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R * A x + R * local.sum_mat A F = R * (A x + local.sum_mat A F)", "by (metis dim_eq fc_mats_carrier insert.prems(1) insert.prems(2) insertCI mult_add_distrib_mat \n        sum_mat_carrier)"], ["proof (state)\nthis:\n  R * A x + R * local.sum_mat A F = R * (A x + local.sum_mat A F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) F =\n                          R * local.sum_mat A F;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) (insert x F) =\n                         R * local.sum_mat A (insert x F)", "also"], ["proof (state)\nthis:\n  R * A x + R * local.sum_mat A F = R * (A x + local.sum_mat A F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) F =\n                          R * local.sum_mat A F;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) (insert x F) =\n                         R * local.sum_mat A (insert x F)", "have \"... = R * sum_mat A (insert x F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R * (A x + local.sum_mat A F) = R * local.sum_mat A (insert x F)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. R * (A x + local.sum_mat A F) = R * local.sum_mat A (insert x F)", "have \"A x + (sum_mat A F) = sum_mat A (insert x F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x + local.sum_mat A F = local.sum_mat A (insert x F)", "by (rule sum_mat_insert[symmetric], (auto simp add: insert))"], ["proof (state)\nthis:\n  A x + local.sum_mat A F = local.sum_mat A (insert x F)\n\ngoal (1 subgoal):\n 1. R * (A x + local.sum_mat A F) = R * local.sum_mat A (insert x F)", "thus ?thesis"], ["proof (prove)\nusing this:\n  A x + local.sum_mat A F = local.sum_mat A (insert x F)\n\ngoal (1 subgoal):\n 1. R * (A x + local.sum_mat A F) = R * local.sum_mat A (insert x F)", "by simp"], ["proof (state)\nthis:\n  R * (A x + local.sum_mat A F) = R * local.sum_mat A (insert x F)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  R * (A x + local.sum_mat A F) = R * local.sum_mat A (insert x F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) F =\n                          R * local.sum_mat A F;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. R * A i) (insert x F) =\n                         R * local.sum_mat A (insert x F)", "finally"], ["proof (chain)\npicking this:\n  local.sum_mat (\\<lambda>i. R * A i) (insert x F) =\n  R * local.sum_mat A (insert x F)", "show ?case"], ["proof (prove)\nusing this:\n  local.sum_mat (\\<lambda>i. R * A i) (insert x F) =\n  R * local.sum_mat A (insert x F)\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. R * A i) (insert x F) =\n    R * local.sum_mat A (insert x F)", "."], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. R * A i) (insert x F) =\n  R * local.sum_mat A (insert x F)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in cpx_sq_mat) sum_mat_distrib_right:\n  shows \"finite I \\<Longrightarrow> R\\<in> fc_mats \\<Longrightarrow> (\\<And>i. i \\<in> I \\<Longrightarrow> (A i)\\<in> fc_mats) \\<Longrightarrow> \n    sum_mat (\\<lambda>i. (A i) * R) I = (sum_mat A I) * R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; R \\<in> fc_mats;\n     \\<And>i. i \\<in> I \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) I =\n                      local.sum_mat A I * R", "proof (induct rule: finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>R \\<in> fc_mats;\n     \\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) {} =\n                      local.sum_mat A {} * R\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) F =\n                          local.sum_mat A F * R;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) (insert x F) =\n                         local.sum_mat A (insert x F) * R", "case empty"], ["proof (state)\nthis:\n  R \\<in> fc_mats\n  ?i1 \\<in> {} \\<Longrightarrow> A ?i1 \\<in> fc_mats\n\ngoal (2 subgoals):\n 1. \\<lbrakk>R \\<in> fc_mats;\n     \\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) {} =\n                      local.sum_mat A {} * R\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) F =\n                          local.sum_mat A F * R;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) (insert x F) =\n                         local.sum_mat A (insert x F) * R", "hence a: \"sum_mat (\\<lambda>i. (A i) * R) {} = 0\\<^sub>m dimR dimC\""], ["proof (prove)\nusing this:\n  R \\<in> fc_mats\n  ?i1 \\<in> {} \\<Longrightarrow> A ?i1 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. A i * R) {} = 0\\<^sub>m dimR dimC", "unfolding sum_mat_def"], ["proof (prove)\nusing this:\n  R \\<in> fc_mats\n  ?i1 \\<in> {} \\<Longrightarrow> A ?i1 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. sum_with (+) (0\\<^sub>m dimR dimC) (\\<lambda>i. A i * R) {} =\n    0\\<^sub>m dimR dimC", "by simp"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. A i * R) {} = 0\\<^sub>m dimR dimC\n\ngoal (2 subgoals):\n 1. \\<lbrakk>R \\<in> fc_mats;\n     \\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) {} =\n                      local.sum_mat A {} * R\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) F =\n                          local.sum_mat A F * R;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) (insert x F) =\n                         local.sum_mat A (insert x F) * R", "have \"sum_mat A {} = 0\\<^sub>m dimR dimC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat A {} = 0\\<^sub>m dimR dimC", "unfolding sum_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_with (+) (0\\<^sub>m dimR dimC) A {} = 0\\<^sub>m dimR dimC", "by simp"], ["proof (state)\nthis:\n  local.sum_mat A {} = 0\\<^sub>m dimR dimC\n\ngoal (2 subgoals):\n 1. \\<lbrakk>R \\<in> fc_mats;\n     \\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) {} =\n                      local.sum_mat A {} * R\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) F =\n                          local.sum_mat A F * R;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) (insert x F) =\n                         local.sum_mat A (insert x F) * R", "hence \"(sum_mat A {}) * R = 0\\<^sub>m dimR dimC\""], ["proof (prove)\nusing this:\n  local.sum_mat A {} = 0\\<^sub>m dimR dimC\n\ngoal (1 subgoal):\n 1. local.sum_mat A {} * R = 0\\<^sub>m dimR dimC", "using  fc_mats_carrier right_mult_zero_mat[of R ] \n      dim_eq empty"], ["proof (prove)\nusing this:\n  local.sum_mat A {} = 0\\<^sub>m dimR dimC\n  fc_mats = carrier_mat dimR dimC\n  R \\<in> carrier_mat ?nr ?n \\<Longrightarrow>\n  R * 0\\<^sub>m ?n ?nc = 0\\<^sub>m ?nr ?nc\n  dimR = dimC\n  R \\<in> fc_mats\n  ?i1 \\<in> {} \\<Longrightarrow> A ?i1 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. local.sum_mat A {} * R = 0\\<^sub>m dimR dimC", "by simp"], ["proof (state)\nthis:\n  local.sum_mat A {} * R = 0\\<^sub>m dimR dimC\n\ngoal (2 subgoals):\n 1. \\<lbrakk>R \\<in> fc_mats;\n     \\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) {} =\n                      local.sum_mat A {} * R\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) F =\n                          local.sum_mat A F * R;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) (insert x F) =\n                         local.sum_mat A (insert x F) * R", "thus ?case"], ["proof (prove)\nusing this:\n  local.sum_mat A {} * R = 0\\<^sub>m dimR dimC\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. A i * R) {} = local.sum_mat A {} * R", "using a"], ["proof (prove)\nusing this:\n  local.sum_mat A {} * R = 0\\<^sub>m dimR dimC\n  local.sum_mat (\\<lambda>i. A i * R) {} = 0\\<^sub>m dimR dimC\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. A i * R) {} = local.sum_mat A {} * R", "by simp"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. A i * R) {} = local.sum_mat A {} * R\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) F =\n                          local.sum_mat A F * R;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) (insert x F) =\n                         local.sum_mat A (insert x F) * R", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) F =\n                          local.sum_mat A F * R;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) (insert x F) =\n                         local.sum_mat A (insert x F) * R", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>R \\<in> fc_mats;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) F =\n                    local.sum_mat A F * R\n  R \\<in> fc_mats\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) F =\n                          local.sum_mat A F * R;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) (insert x F) =\n                         local.sum_mat A (insert x F) * R", "have a: \"(\\<lambda>i. A i * R) ` F \\<subseteq> fc_mats\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>i. A i * R) ` F \\<subseteq> fc_mats", "using insert cpx_sq_mat_mult"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>R \\<in> fc_mats;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) F =\n                    local.sum_mat A F * R\n  R \\<in> fc_mats\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  \\<lbrakk>?A \\<in> fc_mats; ?B \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> ?A * ?B \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. (\\<lambda>i. A i * R) ` F \\<subseteq> fc_mats", "by (simp add: image_subsetI)"], ["proof (state)\nthis:\n  (\\<lambda>i. A i * R) ` F \\<subseteq> fc_mats\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) F =\n                          local.sum_mat A F * R;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) (insert x F) =\n                         local.sum_mat A (insert x F) * R", "have \"A x * R \\<in> fc_mats\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x * R \\<in> fc_mats", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>R \\<in> fc_mats;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) F =\n                    local.sum_mat A F * R\n  R \\<in> fc_mats\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. A x * R \\<in> fc_mats", "by (metis insertI1 local.fc_mats_carrier mult_carrier_mat dim_eq)"], ["proof (state)\nthis:\n  A x * R \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) F =\n                          local.sum_mat A F * R;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) (insert x F) =\n                         local.sum_mat A (insert x F) * R", "hence \"sum_mat (\\<lambda>i. A i * R) (insert x F) = (A x) * R + sum_mat (\\<lambda>i. A i * R) F\""], ["proof (prove)\nusing this:\n  A x * R \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. A i * R) (insert x F) =\n    A x * R + local.sum_mat (\\<lambda>i. A i * R) F", "using insert a"], ["proof (prove)\nusing this:\n  A x * R \\<in> fc_mats\n  finite F\n  x \\<notin> F\n  \\<lbrakk>R \\<in> fc_mats;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) F =\n                    local.sum_mat A F * R\n  R \\<in> fc_mats\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  (\\<lambda>i. A i * R) ` F \\<subseteq> fc_mats\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. A i * R) (insert x F) =\n    A x * R + local.sum_mat (\\<lambda>i. A i * R) F", "using sum_mat_insert[of \"\\<lambda>i. A i * R\" x F]"], ["proof (prove)\nusing this:\n  A x * R \\<in> fc_mats\n  finite F\n  x \\<notin> F\n  \\<lbrakk>R \\<in> fc_mats;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) F =\n                    local.sum_mat A F * R\n  R \\<in> fc_mats\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  (\\<lambda>i. A i * R) ` F \\<subseteq> fc_mats\n  \\<lbrakk>A x * R \\<in> fc_mats;\n   (\\<lambda>i. A i * R) ` F \\<subseteq> fc_mats; finite F;\n   x \\<notin> F\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) (insert x F) =\n                    A x * R + local.sum_mat (\\<lambda>i. A i * R) F\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. A i * R) (insert x F) =\n    A x * R + local.sum_mat (\\<lambda>i. A i * R) F", "by (simp add: image_subsetI local.fc_mats_carrier)"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. A i * R) (insert x F) =\n  A x * R + local.sum_mat (\\<lambda>i. A i * R) F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) F =\n                          local.sum_mat A F * R;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) (insert x F) =\n                         local.sum_mat A (insert x F) * R", "also"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. A i * R) (insert x F) =\n  A x * R + local.sum_mat (\\<lambda>i. A i * R) F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) F =\n                          local.sum_mat A F * R;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) (insert x F) =\n                         local.sum_mat A (insert x F) * R", "have \"... = (A x) * R + (sum_mat A F) * R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x * R + local.sum_mat (\\<lambda>i. A i * R) F =\n    A x * R + local.sum_mat A F * R", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>R \\<in> fc_mats;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) F =\n                    local.sum_mat A F * R\n  R \\<in> fc_mats\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. A x * R + local.sum_mat (\\<lambda>i. A i * R) F =\n    A x * R + local.sum_mat A F * R", "by simp"], ["proof (state)\nthis:\n  A x * R + local.sum_mat (\\<lambda>i. A i * R) F =\n  A x * R + local.sum_mat A F * R\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) F =\n                          local.sum_mat A F * R;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) (insert x F) =\n                         local.sum_mat A (insert x F) * R", "also"], ["proof (state)\nthis:\n  A x * R + local.sum_mat (\\<lambda>i. A i * R) F =\n  A x * R + local.sum_mat A F * R\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) F =\n                          local.sum_mat A F * R;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) (insert x F) =\n                         local.sum_mat A (insert x F) * R", "have \"... = (A x + (sum_mat A F)) * R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x * R + local.sum_mat A F * R = (A x + local.sum_mat A F) * R", "proof (rule add_mult_distrib_mat[symmetric])"], ["proof (state)\ngoal (3 subgoals):\n 1. A x \\<in> carrier_mat ?nr ?n\n 2. local.sum_mat A F \\<in> carrier_mat ?nr ?n\n 3. R \\<in> carrier_mat ?n ?nc", "show \"A x \\<in> carrier_mat dimR dimC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x \\<in> carrier_mat dimR dimC", "using insert fc_mats_carrier"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>R \\<in> fc_mats;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) F =\n                    local.sum_mat A F * R\n  R \\<in> fc_mats\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. A x \\<in> carrier_mat dimR dimC", "by simp"], ["proof (state)\nthis:\n  A x \\<in> carrier_mat dimR dimC\n\ngoal (2 subgoals):\n 1. local.sum_mat A F \\<in> carrier_mat dimR dimC\n 2. R \\<in> carrier_mat dimC ?nc", "show \"sum_mat A F \\<in> carrier_mat dimR dimC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat A F \\<in> carrier_mat dimR dimC", "using insert fc_mats_carrier sum_mat_carrier"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>R \\<in> fc_mats;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) F =\n                    local.sum_mat A F * R\n  R \\<in> fc_mats\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  fc_mats = carrier_mat dimR dimC\n  (\\<And>i.\n      i \\<in> ?I \\<Longrightarrow> ?A i \\<in> fc_mats) \\<Longrightarrow>\n  local.sum_mat ?A ?I \\<in> carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. local.sum_mat A F \\<in> carrier_mat dimR dimC", "by blast"], ["proof (state)\nthis:\n  local.sum_mat A F \\<in> carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. R \\<in> carrier_mat dimC ?nc", "show \"R \\<in> carrier_mat dimC dimC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R \\<in> carrier_mat dimC dimC", "using insert fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>R \\<in> fc_mats;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) F =\n                    local.sum_mat A F * R\n  R \\<in> fc_mats\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. R \\<in> carrier_mat dimC dimC", "by simp"], ["proof (state)\nthis:\n  R \\<in> carrier_mat dimC dimC\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A x * R + local.sum_mat A F * R = (A x + local.sum_mat A F) * R\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) F =\n                          local.sum_mat A F * R;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) (insert x F) =\n                         local.sum_mat A (insert x F) * R", "also"], ["proof (state)\nthis:\n  A x * R + local.sum_mat A F * R = (A x + local.sum_mat A F) * R\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) F =\n                          local.sum_mat A F * R;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) (insert x F) =\n                         local.sum_mat A (insert x F) * R", "have \"... = sum_mat A (insert x F) * R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A x + local.sum_mat A F) * R = local.sum_mat A (insert x F) * R", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (A x + local.sum_mat A F) * R = local.sum_mat A (insert x F) * R", "have \"A x + (sum_mat A F) = sum_mat A (insert x F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x + local.sum_mat A F = local.sum_mat A (insert x F)", "by (rule sum_mat_insert[symmetric], (auto simp add: insert))"], ["proof (state)\nthis:\n  A x + local.sum_mat A F = local.sum_mat A (insert x F)\n\ngoal (1 subgoal):\n 1. (A x + local.sum_mat A F) * R = local.sum_mat A (insert x F) * R", "thus ?thesis"], ["proof (prove)\nusing this:\n  A x + local.sum_mat A F = local.sum_mat A (insert x F)\n\ngoal (1 subgoal):\n 1. (A x + local.sum_mat A F) * R = local.sum_mat A (insert x F) * R", "by simp"], ["proof (state)\nthis:\n  (A x + local.sum_mat A F) * R = local.sum_mat A (insert x F) * R\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (A x + local.sum_mat A F) * R = local.sum_mat A (insert x F) * R\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>R \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) F =\n                          local.sum_mat A F * R;\n        R \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * R) (insert x F) =\n                         local.sum_mat A (insert x F) * R", "finally"], ["proof (chain)\npicking this:\n  local.sum_mat (\\<lambda>i. A i * R) (insert x F) =\n  local.sum_mat A (insert x F) * R", "show ?case"], ["proof (prove)\nusing this:\n  local.sum_mat (\\<lambda>i. A i * R) (insert x F) =\n  local.sum_mat A (insert x F) * R\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. A i * R) (insert x F) =\n    local.sum_mat A (insert x F) * R", "."], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. A i * R) (insert x F) =\n  local.sum_mat A (insert x F) * R\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in cpx_sq_mat)  trace_sum_mat:\n  fixes A::\"'b \\<Rightarrow> complex Matrix.mat\"\n  shows \"finite I \\<Longrightarrow> (\\<And>i. i \\<in> I \\<Longrightarrow> (A i)\\<in> fc_mats) \\<Longrightarrow>\n  Complex_Matrix.trace (sum_mat A I) = (\\<Sum> i\\<in> I. Complex_Matrix.trace (A i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I;\n     \\<And>i. i \\<in> I \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> Complex_Matrix.trace (local.sum_mat A I) =\n                      (\\<Sum>i\\<in>I. Complex_Matrix.trace (A i))", "unfolding sum_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I;\n     \\<And>i. i \\<in> I \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> Complex_Matrix.trace\n                       (sum_with (+) (0\\<^sub>m dimR dimC) A I) =\n                      (\\<Sum>i\\<in>I. Complex_Matrix.trace (A i))", "proof (induct rule: finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>i.\n        i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n    Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A {}) =\n    (\\<Sum>i\\<in>{}. Complex_Matrix.trace (A i))\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A F) =\n        (\\<Sum>i\\<in>F. Complex_Matrix.trace (A i));\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.trace\n                          (sum_with (+) (0\\<^sub>m dimR dimC) A\n                            (insert x F)) =\n                         (\\<Sum>i\\<in>insert x F.\n                            Complex_Matrix.trace (A i))", "case empty"], ["proof (state)\nthis:\n  ?i1 \\<in> {} \\<Longrightarrow> A ?i1 \\<in> fc_mats\n\ngoal (2 subgoals):\n 1. (\\<And>i.\n        i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n    Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A {}) =\n    (\\<Sum>i\\<in>{}. Complex_Matrix.trace (A i))\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A F) =\n        (\\<Sum>i\\<in>F. Complex_Matrix.trace (A i));\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.trace\n                          (sum_with (+) (0\\<^sub>m dimR dimC) A\n                            (insert x F)) =\n                         (\\<Sum>i\\<in>insert x F.\n                            Complex_Matrix.trace (A i))", "then"], ["proof (chain)\npicking this:\n  ?i1 \\<in> {} \\<Longrightarrow> A ?i1 \\<in> fc_mats", "show ?case"], ["proof (prove)\nusing this:\n  ?i1 \\<in> {} \\<Longrightarrow> A ?i1 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A {}) =\n    (\\<Sum>i\\<in>{}. Complex_Matrix.trace (A i))", "using trace_zero dim_eq"], ["proof (prove)\nusing this:\n  ?i1 \\<in> {} \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  Complex_Matrix.trace (0\\<^sub>m ?n ?n) = (0::?'a)\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A {}) =\n    (\\<Sum>i\\<in>{}. Complex_Matrix.trace (A i))", "by simp"], ["proof (state)\nthis:\n  Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A {}) =\n  (\\<Sum>i\\<in>{}. Complex_Matrix.trace (A i))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A F) =\n        (\\<Sum>i\\<in>F. Complex_Matrix.trace (A i));\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.trace\n                          (sum_with (+) (0\\<^sub>m dimR dimC) A\n                            (insert x F)) =\n                         (\\<Sum>i\\<in>insert x F.\n                            Complex_Matrix.trace (A i))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A F) =\n        (\\<Sum>i\\<in>F. Complex_Matrix.trace (A i));\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.trace\n                          (sum_with (+) (0\\<^sub>m dimR dimC) A\n                            (insert x F)) =\n                         (\\<Sum>i\\<in>insert x F.\n                            Complex_Matrix.trace (A i))", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  (\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n  Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A F) =\n  (\\<Sum>i\\<in>F. Complex_Matrix.trace (A i))\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A F) =\n        (\\<Sum>i\\<in>F. Complex_Matrix.trace (A i));\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.trace\n                          (sum_with (+) (0\\<^sub>m dimR dimC) A\n                            (insert x F)) =\n                         (\\<Sum>i\\<in>insert x F.\n                            Complex_Matrix.trace (A i))", "have \"Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A (insert x F)) = \n    Complex_Matrix.trace (A x + sum_with (+) (0\\<^sub>m dimR dimC) A F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (sum_with (+) (0\\<^sub>m dimR dimC) A (insert x F)) =\n    Complex_Matrix.trace (A x + sum_with (+) (0\\<^sub>m dimR dimC) A F)", "using sum_with_insert[of A x F] insert"], ["proof (prove)\nusing this:\n  \\<lbrakk>A x \\<in> fc_mats; A ` F \\<subseteq> fc_mats; finite F;\n   x \\<notin> F\\<rbrakk>\n  \\<Longrightarrow> sum_with (+) (0\\<^sub>m dimR dimC) A (insert x F) =\n                    A x + sum_with (+) (0\\<^sub>m dimR dimC) A F\n  finite F\n  x \\<notin> F\n  (\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n  Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A F) =\n  (\\<Sum>i\\<in>F. Complex_Matrix.trace (A i))\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (sum_with (+) (0\\<^sub>m dimR dimC) A (insert x F)) =\n    Complex_Matrix.trace (A x + sum_with (+) (0\\<^sub>m dimR dimC) A F)", "by (simp add: image_subset_iff dim_eq)"], ["proof (state)\nthis:\n  Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A (insert x F)) =\n  Complex_Matrix.trace (A x + sum_with (+) (0\\<^sub>m dimR dimC) A F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A F) =\n        (\\<Sum>i\\<in>F. Complex_Matrix.trace (A i));\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.trace\n                          (sum_with (+) (0\\<^sub>m dimR dimC) A\n                            (insert x F)) =\n                         (\\<Sum>i\\<in>insert x F.\n                            Complex_Matrix.trace (A i))", "also"], ["proof (state)\nthis:\n  Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A (insert x F)) =\n  Complex_Matrix.trace (A x + sum_with (+) (0\\<^sub>m dimR dimC) A F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A F) =\n        (\\<Sum>i\\<in>F. Complex_Matrix.trace (A i));\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.trace\n                          (sum_with (+) (0\\<^sub>m dimR dimC) A\n                            (insert x F)) =\n                         (\\<Sum>i\\<in>insert x F.\n                            Complex_Matrix.trace (A i))", "have \"... = Complex_Matrix.trace (A x) + \n    Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (A x + sum_with (+) (0\\<^sub>m dimR dimC) A F) =\n    Complex_Matrix.trace (A x) +\n    Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A F)", "using trace_add square_mats insert"], ["proof (prove)\nusing this:\n  \\<lbrakk>square_mat ?A; square_mat ?B; dim_row ?A = dim_row ?B\\<rbrakk>\n  \\<Longrightarrow> Complex_Matrix.trace (?A + ?B) =\n                    Complex_Matrix.trace ?A + Complex_Matrix.trace ?B\n  ?A \\<in> fc_mats \\<Longrightarrow> square_mat ?A\n  finite F\n  x \\<notin> F\n  (\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n  Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A F) =\n  (\\<Sum>i\\<in>F. Complex_Matrix.trace (A i))\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (A x + sum_with (+) (0\\<^sub>m dimR dimC) A F) =\n    Complex_Matrix.trace (A x) +\n    Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A F)", "by (metis carrier_matD(1) fc_mats_carrier image_subset_iff insert_iff sum_with_mem)"], ["proof (state)\nthis:\n  Complex_Matrix.trace (A x + sum_with (+) (0\\<^sub>m dimR dimC) A F) =\n  Complex_Matrix.trace (A x) +\n  Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A F) =\n        (\\<Sum>i\\<in>F. Complex_Matrix.trace (A i));\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.trace\n                          (sum_with (+) (0\\<^sub>m dimR dimC) A\n                            (insert x F)) =\n                         (\\<Sum>i\\<in>insert x F.\n                            Complex_Matrix.trace (A i))", "also"], ["proof (state)\nthis:\n  Complex_Matrix.trace (A x + sum_with (+) (0\\<^sub>m dimR dimC) A F) =\n  Complex_Matrix.trace (A x) +\n  Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A F) =\n        (\\<Sum>i\\<in>F. Complex_Matrix.trace (A i));\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.trace\n                          (sum_with (+) (0\\<^sub>m dimR dimC) A\n                            (insert x F)) =\n                         (\\<Sum>i\\<in>insert x F.\n                            Complex_Matrix.trace (A i))", "have \"... = Complex_Matrix.trace (A x) + (\\<Sum> i\\<in> F. Complex_Matrix.trace (A i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (A x) +\n    Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A F) =\n    Complex_Matrix.trace (A x) + (\\<Sum>i\\<in>F. Complex_Matrix.trace (A i))", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  (\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n  Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A F) =\n  (\\<Sum>i\\<in>F. Complex_Matrix.trace (A i))\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (A x) +\n    Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A F) =\n    Complex_Matrix.trace (A x) + (\\<Sum>i\\<in>F. Complex_Matrix.trace (A i))", "by simp"], ["proof (state)\nthis:\n  Complex_Matrix.trace (A x) +\n  Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A F) =\n  Complex_Matrix.trace (A x) + (\\<Sum>i\\<in>F. Complex_Matrix.trace (A i))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A F) =\n        (\\<Sum>i\\<in>F. Complex_Matrix.trace (A i));\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.trace\n                          (sum_with (+) (0\\<^sub>m dimR dimC) A\n                            (insert x F)) =\n                         (\\<Sum>i\\<in>insert x F.\n                            Complex_Matrix.trace (A i))", "also"], ["proof (state)\nthis:\n  Complex_Matrix.trace (A x) +\n  Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A F) =\n  Complex_Matrix.trace (A x) + (\\<Sum>i\\<in>F. Complex_Matrix.trace (A i))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A F) =\n        (\\<Sum>i\\<in>F. Complex_Matrix.trace (A i));\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.trace\n                          (sum_with (+) (0\\<^sub>m dimR dimC) A\n                            (insert x F)) =\n                         (\\<Sum>i\\<in>insert x F.\n                            Complex_Matrix.trace (A i))", "have \"... = (\\<Sum> i\\<in> (insert x F). Complex_Matrix.trace (A i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (A x) +\n    (\\<Sum>i\\<in>F. Complex_Matrix.trace (A i)) =\n    (\\<Sum>i\\<in>insert x F. Complex_Matrix.trace (A i))", "using sum_with_insert[of A x F] insert"], ["proof (prove)\nusing this:\n  \\<lbrakk>A x \\<in> fc_mats; A ` F \\<subseteq> fc_mats; finite F;\n   x \\<notin> F\\<rbrakk>\n  \\<Longrightarrow> sum_with (+) (0\\<^sub>m dimR dimC) A (insert x F) =\n                    A x + sum_with (+) (0\\<^sub>m dimR dimC) A F\n  finite F\n  x \\<notin> F\n  (\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n  Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A F) =\n  (\\<Sum>i\\<in>F. Complex_Matrix.trace (A i))\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (A x) +\n    (\\<Sum>i\\<in>F. Complex_Matrix.trace (A i)) =\n    (\\<Sum>i\\<in>insert x F. Complex_Matrix.trace (A i))", "by (simp add: image_subset_iff)"], ["proof (state)\nthis:\n  Complex_Matrix.trace (A x) + (\\<Sum>i\\<in>F. Complex_Matrix.trace (A i)) =\n  (\\<Sum>i\\<in>insert x F. Complex_Matrix.trace (A i))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A F) =\n        (\\<Sum>i\\<in>F. Complex_Matrix.trace (A i));\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.trace\n                          (sum_with (+) (0\\<^sub>m dimR dimC) A\n                            (insert x F)) =\n                         (\\<Sum>i\\<in>insert x F.\n                            Complex_Matrix.trace (A i))", "finally"], ["proof (chain)\npicking this:\n  Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A (insert x F)) =\n  (\\<Sum>i\\<in>insert x F. Complex_Matrix.trace (A i))", "show ?case"], ["proof (prove)\nusing this:\n  Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A (insert x F)) =\n  (\\<Sum>i\\<in>insert x F. Complex_Matrix.trace (A i))\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (sum_with (+) (0\\<^sub>m dimR dimC) A (insert x F)) =\n    (\\<Sum>i\\<in>insert x F. Complex_Matrix.trace (A i))", "."], ["proof (state)\nthis:\n  Complex_Matrix.trace (sum_with (+) (0\\<^sub>m dimR dimC) A (insert x F)) =\n  (\\<Sum>i\\<in>insert x F. Complex_Matrix.trace (A i))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in cpx_sq_mat) cpx_sq_mat_smult:\n  assumes \"A \\<in> fc_mats\"\n  shows \"x  \\<cdot>\\<^sub>m A \\<in> fc_mats\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot>\\<^sub>m A \\<in> fc_mats", "using assms fc_mats_carrier"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. x \\<cdot>\\<^sub>m A \\<in> fc_mats", "by auto"], ["", "lemma (in cpx_sq_mat) mult_add_distrib_right:\n  assumes \"A\\<in> fc_mats\" \"B\\<in> fc_mats\" \"C\\<in> fc_mats\"\n  shows \"A * (B + C) = A * B + A * C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A * (B + C) = A * B + A * C", "using assms fc_mats_carrier mult_add_distrib_mat dim_eq"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  C \\<in> fc_mats\n  fc_mats = carrier_mat dimR dimC\n  \\<lbrakk>?A \\<in> carrier_mat ?nr ?n; ?B \\<in> carrier_mat ?n ?nc;\n   ?C \\<in> carrier_mat ?n ?nc\\<rbrakk>\n  \\<Longrightarrow> ?A * (?B + ?C) = ?A * ?B + ?A * ?C\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. A * (B + C) = A * B + A * C", "by simp"], ["", "lemma (in cpx_sq_mat) mult_add_distrib_left:\n  assumes \"A\\<in> fc_mats\" \"B\\<in> fc_mats\" \"C\\<in> fc_mats\"\n  shows \"(B + C) * A = B * A + C * A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (B + C) * A = B * A + C * A", "using assms fc_mats_carrier add_mult_distrib_mat dim_eq"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  C \\<in> fc_mats\n  fc_mats = carrier_mat dimR dimC\n  \\<lbrakk>?A \\<in> carrier_mat ?nr ?n; ?B \\<in> carrier_mat ?nr ?n;\n   ?C \\<in> carrier_mat ?n ?nc\\<rbrakk>\n  \\<Longrightarrow> (?A + ?B) * ?C = ?A * ?C + ?B * ?C\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. (B + C) * A = B * A + C * A", "by simp"], ["", "lemma (in cpx_sq_mat)  mult_sum_mat_distrib_left:\n  shows \"finite I \\<Longrightarrow> (\\<And>i. i \\<in> I \\<Longrightarrow> (A i)\\<in> fc_mats) \\<Longrightarrow> B \\<in> fc_mats \\<Longrightarrow>\n  (sum_mat (\\<lambda>i. B * (A i)) I) = B * (sum_mat A I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I;\n     \\<And>i. i \\<in> I \\<Longrightarrow> A i \\<in> fc_mats;\n     B \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) I =\n                      B * local.sum_mat A I", "proof (induct rule: finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats;\n     B \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) {} =\n                      B * local.sum_mat A {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) F =\n                          B * local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) (insert x F) =\n                         B * local.sum_mat A (insert x F)", "case empty"], ["proof (state)\nthis:\n  ?i1 \\<in> {} \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  B \\<in> fc_mats\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats;\n     B \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) {} =\n                      B * local.sum_mat A {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) F =\n                          B * local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) (insert x F) =\n                         B * local.sum_mat A (insert x F)", "hence \"sum_mat A {} = 0\\<^sub>m dimR dimC\""], ["proof (prove)\nusing this:\n  ?i1 \\<in> {} \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  B \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. local.sum_mat A {} = 0\\<^sub>m dimR dimC", "using sum_mat_empty"], ["proof (prove)\nusing this:\n  ?i1 \\<in> {} \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  B \\<in> fc_mats\n  local.sum_mat ?A {} = 0\\<^sub>m dimR dimC\n\ngoal (1 subgoal):\n 1. local.sum_mat A {} = 0\\<^sub>m dimR dimC", "by simp"], ["proof (state)\nthis:\n  local.sum_mat A {} = 0\\<^sub>m dimR dimC\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats;\n     B \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) {} =\n                      B * local.sum_mat A {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) F =\n                          B * local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) (insert x F) =\n                         B * local.sum_mat A (insert x F)", "hence \"B * (sum_mat A {}) = 0\\<^sub>m dimR dimC\""], ["proof (prove)\nusing this:\n  local.sum_mat A {} = 0\\<^sub>m dimR dimC\n\ngoal (1 subgoal):\n 1. B * local.sum_mat A {} = 0\\<^sub>m dimR dimC", "using empty"], ["proof (prove)\nusing this:\n  local.sum_mat A {} = 0\\<^sub>m dimR dimC\n  ?i1 \\<in> {} \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  B \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. B * local.sum_mat A {} = 0\\<^sub>m dimR dimC", "by (simp add: fc_mats_carrier dim_eq)"], ["proof (state)\nthis:\n  B * local.sum_mat A {} = 0\\<^sub>m dimR dimC\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats;\n     B \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) {} =\n                      B * local.sum_mat A {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) F =\n                          B * local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) (insert x F) =\n                         B * local.sum_mat A (insert x F)", "moreover"], ["proof (state)\nthis:\n  B * local.sum_mat A {} = 0\\<^sub>m dimR dimC\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats;\n     B \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) {} =\n                      B * local.sum_mat A {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) F =\n                          B * local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) (insert x F) =\n                         B * local.sum_mat A (insert x F)", "have \"sum_mat (\\<lambda>i. B * (A i)) {} = 0\\<^sub>m dimR dimC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. B * A i) {} = 0\\<^sub>m dimR dimC", "using sum_mat_empty[of \"\\<lambda>i. B * (A i)\"]"], ["proof (prove)\nusing this:\n  local.sum_mat (\\<lambda>i. B * A i) {} = 0\\<^sub>m dimR dimC\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. B * A i) {} = 0\\<^sub>m dimR dimC", "by simp"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. B * A i) {} = 0\\<^sub>m dimR dimC\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats;\n     B \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) {} =\n                      B * local.sum_mat A {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) F =\n                          B * local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) (insert x F) =\n                         B * local.sum_mat A (insert x F)", "ultimately"], ["proof (chain)\npicking this:\n  B * local.sum_mat A {} = 0\\<^sub>m dimR dimC\n  local.sum_mat (\\<lambda>i. B * A i) {} = 0\\<^sub>m dimR dimC", "show ?case"], ["proof (prove)\nusing this:\n  B * local.sum_mat A {} = 0\\<^sub>m dimR dimC\n  local.sum_mat (\\<lambda>i. B * A i) {} = 0\\<^sub>m dimR dimC\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. B * A i) {} = B * local.sum_mat A {}", "by simp"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. B * A i) {} = B * local.sum_mat A {}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) F =\n                          B * local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) (insert x F) =\n                         B * local.sum_mat A (insert x F)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) F =\n                          B * local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) (insert x F) =\n                         B * local.sum_mat A (insert x F)", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   B \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) F =\n                    B * local.sum_mat A F\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  B \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) F =\n                          B * local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) (insert x F) =\n                         B * local.sum_mat A (insert x F)", "have \"sum_mat (\\<lambda>i. B * (A i)) (insert x F) = B * (A x) + sum_mat (\\<lambda>i. B * (A i)) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. B * A i) (insert x F) =\n    B * A x + local.sum_mat (\\<lambda>i. B * A i) F", "using sum_with_insert[of \"\\<lambda>i. B * (A i)\" x F] insert"], ["proof (prove)\nusing this:\n  \\<lbrakk>B * A x \\<in> fc_mats;\n   (\\<lambda>i. B * A i) ` F \\<subseteq> fc_mats; finite F;\n   x \\<notin> F\\<rbrakk>\n  \\<Longrightarrow> sum_with (+) (0\\<^sub>m dimR dimC) (\\<lambda>i. B * A i)\n                     (insert x F) =\n                    B * A x +\n                    sum_with (+) (0\\<^sub>m dimR dimC) (\\<lambda>i. B * A i)\n                     F\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   B \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) F =\n                    B * local.sum_mat A F\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  B \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. B * A i) (insert x F) =\n    B * A x + local.sum_mat (\\<lambda>i. B * A i) F", "by (simp add: image_subset_iff local.sum_mat_def cpx_sq_mat_mult)"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. B * A i) (insert x F) =\n  B * A x + local.sum_mat (\\<lambda>i. B * A i) F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) F =\n                          B * local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) (insert x F) =\n                         B * local.sum_mat A (insert x F)", "also"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. B * A i) (insert x F) =\n  B * A x + local.sum_mat (\\<lambda>i. B * A i) F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) F =\n                          B * local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) (insert x F) =\n                         B * local.sum_mat A (insert x F)", "have \"... = B * (A x) + B * (sum_mat A F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B * A x + local.sum_mat (\\<lambda>i. B * A i) F =\n    B * A x + B * local.sum_mat A F", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   B \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) F =\n                    B * local.sum_mat A F\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  B \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. B * A x + local.sum_mat (\\<lambda>i. B * A i) F =\n    B * A x + B * local.sum_mat A F", "by simp"], ["proof (state)\nthis:\n  B * A x + local.sum_mat (\\<lambda>i. B * A i) F =\n  B * A x + B * local.sum_mat A F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) F =\n                          B * local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) (insert x F) =\n                         B * local.sum_mat A (insert x F)", "also"], ["proof (state)\nthis:\n  B * A x + local.sum_mat (\\<lambda>i. B * A i) F =\n  B * A x + B * local.sum_mat A F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) F =\n                          B * local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) (insert x F) =\n                         B * local.sum_mat A (insert x F)", "have \"... = B * (A x + (sum_mat A F))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B * A x + B * local.sum_mat A F = B * (A x + local.sum_mat A F)", "proof (rule mult_add_distrib_right[symmetric])"], ["proof (state)\ngoal (3 subgoals):\n 1. B \\<in> fc_mats\n 2. A x \\<in> fc_mats\n 3. local.sum_mat A F \\<in> fc_mats", "show \"B\\<in> fc_mats\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<in> fc_mats", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   B \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) F =\n                    B * local.sum_mat A F\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  B \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. B \\<in> fc_mats", "by simp"], ["proof (state)\nthis:\n  B \\<in> fc_mats\n\ngoal (2 subgoals):\n 1. A x \\<in> fc_mats\n 2. local.sum_mat A F \\<in> fc_mats", "show \"A x \\<in> fc_mats\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x \\<in> fc_mats", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   B \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) F =\n                    B * local.sum_mat A F\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  B \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. A x \\<in> fc_mats", "by simp"], ["proof (state)\nthis:\n  A x \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. local.sum_mat A F \\<in> fc_mats", "show \"sum_mat A F \\<in> fc_mats\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat A F \\<in> fc_mats", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   B \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) F =\n                    B * local.sum_mat A F\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  B \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. local.sum_mat A F \\<in> fc_mats", "by (simp add: fc_mats_carrier sum_mat_carrier)"], ["proof (state)\nthis:\n  local.sum_mat A F \\<in> fc_mats\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  B * A x + B * local.sum_mat A F = B * (A x + local.sum_mat A F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) F =\n                          B * local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) (insert x F) =\n                         B * local.sum_mat A (insert x F)", "also"], ["proof (state)\nthis:\n  B * A x + B * local.sum_mat A F = B * (A x + local.sum_mat A F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) F =\n                          B * local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) (insert x F) =\n                         B * local.sum_mat A (insert x F)", "have \"... = B * (sum_mat A (insert x F))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B * (A x + local.sum_mat A F) = B * local.sum_mat A (insert x F)", "using sum_with_insert[of A x F] insert"], ["proof (prove)\nusing this:\n  \\<lbrakk>A x \\<in> fc_mats; A ` F \\<subseteq> fc_mats; finite F;\n   x \\<notin> F\\<rbrakk>\n  \\<Longrightarrow> sum_with (+) (0\\<^sub>m dimR dimC) A (insert x F) =\n                    A x + sum_with (+) (0\\<^sub>m dimR dimC) A F\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   B \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) F =\n                    B * local.sum_mat A F\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  B \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. B * (A x + local.sum_mat A F) = B * local.sum_mat A (insert x F)", "by (simp add: image_subset_iff sum_mat_def)"], ["proof (state)\nthis:\n  B * (A x + local.sum_mat A F) = B * local.sum_mat A (insert x F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) F =\n                          B * local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. B * A i) (insert x F) =\n                         B * local.sum_mat A (insert x F)", "finally"], ["proof (chain)\npicking this:\n  local.sum_mat (\\<lambda>i. B * A i) (insert x F) =\n  B * local.sum_mat A (insert x F)", "show ?case"], ["proof (prove)\nusing this:\n  local.sum_mat (\\<lambda>i. B * A i) (insert x F) =\n  B * local.sum_mat A (insert x F)\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. B * A i) (insert x F) =\n    B * local.sum_mat A (insert x F)", "."], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. B * A i) (insert x F) =\n  B * local.sum_mat A (insert x F)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in cpx_sq_mat)  mult_sum_mat_distrib_right:\n  shows \"finite I \\<Longrightarrow> (\\<And>i. i \\<in> I \\<Longrightarrow> (A i)\\<in> fc_mats) \\<Longrightarrow> B \\<in> fc_mats \\<Longrightarrow>\n  (sum_mat (\\<lambda>i. (A i) * B) I) = (sum_mat A I) * B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I;\n     \\<And>i. i \\<in> I \\<Longrightarrow> A i \\<in> fc_mats;\n     B \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) I =\n                      local.sum_mat A I * B", "proof (induct rule: finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats;\n     B \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) {} =\n                      local.sum_mat A {} * B\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) F =\n                          local.sum_mat A F * B;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) (insert x F) =\n                         local.sum_mat A (insert x F) * B", "case empty"], ["proof (state)\nthis:\n  ?i1 \\<in> {} \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  B \\<in> fc_mats\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats;\n     B \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) {} =\n                      local.sum_mat A {} * B\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) F =\n                          local.sum_mat A F * B;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) (insert x F) =\n                         local.sum_mat A (insert x F) * B", "hence \"sum_mat A {} = 0\\<^sub>m dimR dimC\""], ["proof (prove)\nusing this:\n  ?i1 \\<in> {} \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  B \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. local.sum_mat A {} = 0\\<^sub>m dimR dimC", "using sum_mat_empty"], ["proof (prove)\nusing this:\n  ?i1 \\<in> {} \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  B \\<in> fc_mats\n  local.sum_mat ?A {} = 0\\<^sub>m dimR dimC\n\ngoal (1 subgoal):\n 1. local.sum_mat A {} = 0\\<^sub>m dimR dimC", "by simp"], ["proof (state)\nthis:\n  local.sum_mat A {} = 0\\<^sub>m dimR dimC\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats;\n     B \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) {} =\n                      local.sum_mat A {} * B\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) F =\n                          local.sum_mat A F * B;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) (insert x F) =\n                         local.sum_mat A (insert x F) * B", "hence \"(sum_mat A {}) * B = 0\\<^sub>m dimR dimC\""], ["proof (prove)\nusing this:\n  local.sum_mat A {} = 0\\<^sub>m dimR dimC\n\ngoal (1 subgoal):\n 1. local.sum_mat A {} * B = 0\\<^sub>m dimR dimC", "using empty"], ["proof (prove)\nusing this:\n  local.sum_mat A {} = 0\\<^sub>m dimR dimC\n  ?i1 \\<in> {} \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  B \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. local.sum_mat A {} * B = 0\\<^sub>m dimR dimC", "by (simp add: fc_mats_carrier dim_eq)"], ["proof (state)\nthis:\n  local.sum_mat A {} * B = 0\\<^sub>m dimR dimC\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats;\n     B \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) {} =\n                      local.sum_mat A {} * B\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) F =\n                          local.sum_mat A F * B;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) (insert x F) =\n                         local.sum_mat A (insert x F) * B", "moreover"], ["proof (state)\nthis:\n  local.sum_mat A {} * B = 0\\<^sub>m dimR dimC\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats;\n     B \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) {} =\n                      local.sum_mat A {} * B\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) F =\n                          local.sum_mat A F * B;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) (insert x F) =\n                         local.sum_mat A (insert x F) * B", "have \"sum_mat (\\<lambda>i. (A i) * B) {} = 0\\<^sub>m dimR dimC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. A i * B) {} = 0\\<^sub>m dimR dimC", "by simp"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. A i * B) {} = 0\\<^sub>m dimR dimC\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats;\n     B \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) {} =\n                      local.sum_mat A {} * B\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) F =\n                          local.sum_mat A F * B;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) (insert x F) =\n                         local.sum_mat A (insert x F) * B", "ultimately"], ["proof (chain)\npicking this:\n  local.sum_mat A {} * B = 0\\<^sub>m dimR dimC\n  local.sum_mat (\\<lambda>i. A i * B) {} = 0\\<^sub>m dimR dimC", "show ?case"], ["proof (prove)\nusing this:\n  local.sum_mat A {} * B = 0\\<^sub>m dimR dimC\n  local.sum_mat (\\<lambda>i. A i * B) {} = 0\\<^sub>m dimR dimC\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. A i * B) {} = local.sum_mat A {} * B", "by simp"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. A i * B) {} = local.sum_mat A {} * B\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) F =\n                          local.sum_mat A F * B;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) (insert x F) =\n                         local.sum_mat A (insert x F) * B", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) F =\n                          local.sum_mat A F * B;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) (insert x F) =\n                         local.sum_mat A (insert x F) * B", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   B \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) F =\n                    local.sum_mat A F * B\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  B \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) F =\n                          local.sum_mat A F * B;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) (insert x F) =\n                         local.sum_mat A (insert x F) * B", "have \"sum_mat (\\<lambda>i. (A i) * B) (insert x F) = (A x) * B + sum_mat (\\<lambda>i. (A i) * B) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. A i * B) (insert x F) =\n    A x * B + local.sum_mat (\\<lambda>i. A i * B) F", "using sum_with_insert[of \"\\<lambda>i. (A i) * B\" x F] insert"], ["proof (prove)\nusing this:\n  \\<lbrakk>A x * B \\<in> fc_mats;\n   (\\<lambda>i. A i * B) ` F \\<subseteq> fc_mats; finite F;\n   x \\<notin> F\\<rbrakk>\n  \\<Longrightarrow> sum_with (+) (0\\<^sub>m dimR dimC) (\\<lambda>i. A i * B)\n                     (insert x F) =\n                    A x * B +\n                    sum_with (+) (0\\<^sub>m dimR dimC) (\\<lambda>i. A i * B)\n                     F\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   B \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) F =\n                    local.sum_mat A F * B\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  B \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. A i * B) (insert x F) =\n    A x * B + local.sum_mat (\\<lambda>i. A i * B) F", "by (simp add: image_subset_iff local.sum_mat_def cpx_sq_mat_mult)"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. A i * B) (insert x F) =\n  A x * B + local.sum_mat (\\<lambda>i. A i * B) F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) F =\n                          local.sum_mat A F * B;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) (insert x F) =\n                         local.sum_mat A (insert x F) * B", "also"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. A i * B) (insert x F) =\n  A x * B + local.sum_mat (\\<lambda>i. A i * B) F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) F =\n                          local.sum_mat A F * B;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) (insert x F) =\n                         local.sum_mat A (insert x F) * B", "have \"... = (A x) * B + (sum_mat A F) * B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x * B + local.sum_mat (\\<lambda>i. A i * B) F =\n    A x * B + local.sum_mat A F * B", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   B \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) F =\n                    local.sum_mat A F * B\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  B \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. A x * B + local.sum_mat (\\<lambda>i. A i * B) F =\n    A x * B + local.sum_mat A F * B", "by simp"], ["proof (state)\nthis:\n  A x * B + local.sum_mat (\\<lambda>i. A i * B) F =\n  A x * B + local.sum_mat A F * B\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) F =\n                          local.sum_mat A F * B;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) (insert x F) =\n                         local.sum_mat A (insert x F) * B", "also"], ["proof (state)\nthis:\n  A x * B + local.sum_mat (\\<lambda>i. A i * B) F =\n  A x * B + local.sum_mat A F * B\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) F =\n                          local.sum_mat A F * B;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) (insert x F) =\n                         local.sum_mat A (insert x F) * B", "have \"... = (A x + (sum_mat A F)) * B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x * B + local.sum_mat A F * B = (A x + local.sum_mat A F) * B", "proof (rule mult_add_distrib_left[symmetric])"], ["proof (state)\ngoal (3 subgoals):\n 1. B \\<in> fc_mats\n 2. A x \\<in> fc_mats\n 3. local.sum_mat A F \\<in> fc_mats", "show \"B\\<in> fc_mats\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<in> fc_mats", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   B \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) F =\n                    local.sum_mat A F * B\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  B \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. B \\<in> fc_mats", "by simp"], ["proof (state)\nthis:\n  B \\<in> fc_mats\n\ngoal (2 subgoals):\n 1. A x \\<in> fc_mats\n 2. local.sum_mat A F \\<in> fc_mats", "show \"A x \\<in> fc_mats\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x \\<in> fc_mats", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   B \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) F =\n                    local.sum_mat A F * B\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  B \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. A x \\<in> fc_mats", "by simp"], ["proof (state)\nthis:\n  A x \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. local.sum_mat A F \\<in> fc_mats", "show \"sum_mat A F \\<in> fc_mats\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat A F \\<in> fc_mats", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   B \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) F =\n                    local.sum_mat A F * B\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  B \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. local.sum_mat A F \\<in> fc_mats", "by (simp add: fc_mats_carrier sum_mat_carrier)"], ["proof (state)\nthis:\n  local.sum_mat A F \\<in> fc_mats\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A x * B + local.sum_mat A F * B = (A x + local.sum_mat A F) * B\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) F =\n                          local.sum_mat A F * B;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) (insert x F) =\n                         local.sum_mat A (insert x F) * B", "also"], ["proof (state)\nthis:\n  A x * B + local.sum_mat A F * B = (A x + local.sum_mat A F) * B\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) F =\n                          local.sum_mat A F * B;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) (insert x F) =\n                         local.sum_mat A (insert x F) * B", "have \"... = (sum_mat A (insert x F)) * B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A x + local.sum_mat A F) * B = local.sum_mat A (insert x F) * B", "using sum_with_insert[of A x F] insert"], ["proof (prove)\nusing this:\n  \\<lbrakk>A x \\<in> fc_mats; A ` F \\<subseteq> fc_mats; finite F;\n   x \\<notin> F\\<rbrakk>\n  \\<Longrightarrow> sum_with (+) (0\\<^sub>m dimR dimC) A (insert x F) =\n                    A x + sum_with (+) (0\\<^sub>m dimR dimC) A F\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   B \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) F =\n                    local.sum_mat A F * B\n  ?i1 \\<in> insert x F \\<Longrightarrow> A ?i1 \\<in> fc_mats\n  B \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. (A x + local.sum_mat A F) * B = local.sum_mat A (insert x F) * B", "by (simp add: image_subset_iff sum_mat_def)"], ["proof (state)\nthis:\n  (A x + local.sum_mat A F) * B = local.sum_mat A (insert x F) * B\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) F =\n                          local.sum_mat A F * B;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. A i * B) (insert x F) =\n                         local.sum_mat A (insert x F) * B", "finally"], ["proof (chain)\npicking this:\n  local.sum_mat (\\<lambda>i. A i * B) (insert x F) =\n  local.sum_mat A (insert x F) * B", "show ?case"], ["proof (prove)\nusing this:\n  local.sum_mat (\\<lambda>i. A i * B) (insert x F) =\n  local.sum_mat A (insert x F) * B\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. A i * B) (insert x F) =\n    local.sum_mat A (insert x F) * B", "."], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. A i * B) (insert x F) =\n  local.sum_mat A (insert x F) * B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in cpx_sq_mat) trace_sum_mat_mat_distrib:\n  assumes \"finite I\"\nand \"\\<And>i. i\\<in> I \\<Longrightarrow> B i \\<in> fc_mats\"\nand \"A\\<in> fc_mats\"\nand \"C \\<in> fc_mats\"\nshows \"(\\<Sum> i\\<in> I. Complex_Matrix.trace(A * (B i) * C)) = \n  Complex_Matrix.trace (A * (sum_mat B I) * C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>I. Complex_Matrix.trace (A * B i * C)) =\n    Complex_Matrix.trace (A * local.sum_mat B I * C)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>I. Complex_Matrix.trace (A * B i * C)) =\n    Complex_Matrix.trace (A * local.sum_mat B I * C)", "have seq: \"sum_mat (\\<lambda>i. A * (B i) * C) I = A * (sum_mat B I) * C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. A * B i * C) I = A * local.sum_mat B I * C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. A * B i * C) I = A * local.sum_mat B I * C", "have \"sum_mat (\\<lambda>i. A * (B i) * C) I = (sum_mat (\\<lambda>i. A * (B i)) I) * C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. A * B i * C) I =\n    local.sum_mat (\\<lambda>i. A * B i) I * C", "proof (rule mult_sum_mat_distrib_right)"], ["proof (state)\ngoal (3 subgoals):\n 1. finite I\n 2. \\<And>i. i \\<in> I \\<Longrightarrow> A * B i \\<in> fc_mats\n 3. C \\<in> fc_mats", "show \"finite I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I", "using assms"], ["proof (prove)\nusing this:\n  finite I\n  ?i1 \\<in> I \\<Longrightarrow> B ?i1 \\<in> fc_mats\n  A \\<in> fc_mats\n  C \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. finite I", "by simp"], ["proof (state)\nthis:\n  finite I\n\ngoal (2 subgoals):\n 1. \\<And>i. i \\<in> I \\<Longrightarrow> A * B i \\<in> fc_mats\n 2. C \\<in> fc_mats", "show \"C\\<in> fc_mats\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<in> fc_mats", "using assms"], ["proof (prove)\nusing this:\n  finite I\n  ?i1 \\<in> I \\<Longrightarrow> B ?i1 \\<in> fc_mats\n  A \\<in> fc_mats\n  C \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. C \\<in> fc_mats", "by simp"], ["proof (state)\nthis:\n  C \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> I \\<Longrightarrow> A * B i \\<in> fc_mats", "show \"\\<And>i. i \\<in> I \\<Longrightarrow> A * B i \\<in> fc_mats\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> I \\<Longrightarrow> A * B i \\<in> fc_mats", "using assms cpx_sq_mat_mult"], ["proof (prove)\nusing this:\n  finite I\n  ?i1 \\<in> I \\<Longrightarrow> B ?i1 \\<in> fc_mats\n  A \\<in> fc_mats\n  C \\<in> fc_mats\n  \\<lbrakk>?A \\<in> fc_mats; ?B \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> ?A * ?B \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> I \\<Longrightarrow> A * B i \\<in> fc_mats", "by simp"], ["proof (state)\nthis:\n  ?i1 \\<in> I \\<Longrightarrow> A * B ?i1 \\<in> fc_mats\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. A * B i * C) I =\n  local.sum_mat (\\<lambda>i. A * B i) I * C\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. A * B i * C) I = A * local.sum_mat B I * C", "moreover"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. A * B i * C) I =\n  local.sum_mat (\\<lambda>i. A * B i) I * C\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. A * B i * C) I = A * local.sum_mat B I * C", "have \"sum_mat (\\<lambda>i. A * (B i)) I = A * (sum_mat B I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. A * B i) I = A * local.sum_mat B I", "by (rule mult_sum_mat_distrib_left, (auto simp add: assms))"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. A * B i) I = A * local.sum_mat B I\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. A * B i * C) I = A * local.sum_mat B I * C", "ultimately"], ["proof (chain)\npicking this:\n  local.sum_mat (\\<lambda>i. A * B i * C) I =\n  local.sum_mat (\\<lambda>i. A * B i) I * C\n  local.sum_mat (\\<lambda>i. A * B i) I = A * local.sum_mat B I", "show \"sum_mat (\\<lambda>i. A * (B i) * C) I = A * (sum_mat B I)  * C\""], ["proof (prove)\nusing this:\n  local.sum_mat (\\<lambda>i. A * B i * C) I =\n  local.sum_mat (\\<lambda>i. A * B i) I * C\n  local.sum_mat (\\<lambda>i. A * B i) I = A * local.sum_mat B I\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. A * B i * C) I = A * local.sum_mat B I * C", "by simp"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. A * B i * C) I = A * local.sum_mat B I * C\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. A * B i * C) I = A * local.sum_mat B I * C\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>I. Complex_Matrix.trace (A * B i * C)) =\n    Complex_Matrix.trace (A * local.sum_mat B I * C)", "have \"(\\<Sum> i\\<in> I. Complex_Matrix.trace(A * (B i) * C)) = \n    Complex_Matrix.trace (sum_mat (\\<lambda>i. A * (B i) * C) I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>I. Complex_Matrix.trace (A * B i * C)) =\n    Complex_Matrix.trace (local.sum_mat (\\<lambda>i. A * B i * C) I)", "proof (rule trace_sum_mat[symmetric])"], ["proof (state)\ngoal (2 subgoals):\n 1. finite I\n 2. \\<And>i. i \\<in> I \\<Longrightarrow> A * B i * C \\<in> fc_mats", "show \"finite I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I", "using assms"], ["proof (prove)\nusing this:\n  finite I\n  ?i1 \\<in> I \\<Longrightarrow> B ?i1 \\<in> fc_mats\n  A \\<in> fc_mats\n  C \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. finite I", "by simp"], ["proof (state)\nthis:\n  finite I\n\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> I \\<Longrightarrow> A * B i * C \\<in> fc_mats", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> I \\<Longrightarrow> A * B i * C \\<in> fc_mats", "assume \"i\\<in> I\""], ["proof (state)\nthis:\n  i \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> I \\<Longrightarrow> A * B i * C \\<in> fc_mats", "thus \"A * B i * C \\<in> fc_mats\""], ["proof (prove)\nusing this:\n  i \\<in> I\n\ngoal (1 subgoal):\n 1. A * B i * C \\<in> fc_mats", "using assms"], ["proof (prove)\nusing this:\n  i \\<in> I\n  finite I\n  ?i1 \\<in> I \\<Longrightarrow> B ?i1 \\<in> fc_mats\n  A \\<in> fc_mats\n  C \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. A * B i * C \\<in> fc_mats", "by (simp add: cpx_sq_mat_mult)"], ["proof (state)\nthis:\n  A * B i * C \\<in> fc_mats\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>I. Complex_Matrix.trace (A * B i * C)) =\n  Complex_Matrix.trace (local.sum_mat (\\<lambda>i. A * B i * C) I)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>I. Complex_Matrix.trace (A * B i * C)) =\n    Complex_Matrix.trace (A * local.sum_mat B I * C)", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>I. Complex_Matrix.trace (A * B i * C)) =\n  Complex_Matrix.trace (local.sum_mat (\\<lambda>i. A * B i * C) I)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>I. Complex_Matrix.trace (A * B i * C)) =\n    Complex_Matrix.trace (A * local.sum_mat B I * C)", "have \"... = Complex_Matrix.trace (A * (sum_mat B I) * C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (local.sum_mat (\\<lambda>i. A * B i * C) I) =\n    Complex_Matrix.trace (A * local.sum_mat B I * C)", "using seq"], ["proof (prove)\nusing this:\n  local.sum_mat (\\<lambda>i. A * B i * C) I = A * local.sum_mat B I * C\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (local.sum_mat (\\<lambda>i. A * B i * C) I) =\n    Complex_Matrix.trace (A * local.sum_mat B I * C)", "by simp"], ["proof (state)\nthis:\n  Complex_Matrix.trace (local.sum_mat (\\<lambda>i. A * B i * C) I) =\n  Complex_Matrix.trace (A * local.sum_mat B I * C)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>I. Complex_Matrix.trace (A * B i * C)) =\n    Complex_Matrix.trace (A * local.sum_mat B I * C)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>i\\<in>I. Complex_Matrix.trace (A * B i * C)) =\n  Complex_Matrix.trace (A * local.sum_mat B I * C)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>i\\<in>I. Complex_Matrix.trace (A * B i * C)) =\n  Complex_Matrix.trace (A * local.sum_mat B I * C)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>I. Complex_Matrix.trace (A * B i * C)) =\n    Complex_Matrix.trace (A * local.sum_mat B I * C)", "."], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>I. Complex_Matrix.trace (A * B i * C)) =\n  Complex_Matrix.trace (A * local.sum_mat B I * C)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition (in cpx_sq_mat) zero_col where\n\"zero_col U = (\\<lambda>i. if i < dimR then Matrix.col U i else 0\\<^sub>v dimR)\""], ["", "lemma (in cpx_sq_mat) zero_col_dim:\n  assumes \"U \\<in> fc_mats\"\n  shows \"dim_vec (zero_col U i) = dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (zero_col U i) = dimR", "using assms fc_mats_carrier"], ["proof (prove)\nusing this:\n  U \\<in> fc_mats\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. dim_vec (zero_col U i) = dimR", "unfolding zero_col_def"], ["proof (prove)\nusing this:\n  U \\<in> fc_mats\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. dim_vec (if i < dimR then Matrix.col U i else 0\\<^sub>v dimR) = dimR", "by simp"], ["", "lemma (in cpx_sq_mat) zero_col_col:\n  assumes \"i < dimR\"\n  shows \"zero_col U i = Matrix.col U i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. zero_col U i = Matrix.col U i", "using assms"], ["proof (prove)\nusing this:\n  i < dimR\n\ngoal (1 subgoal):\n 1. zero_col U i = Matrix.col U i", "unfolding zero_col_def"], ["proof (prove)\nusing this:\n  i < dimR\n\ngoal (1 subgoal):\n 1. (if i < dimR then Matrix.col U i else 0\\<^sub>v dimR) = Matrix.col U i", "by simp"], ["", "lemma (in cpx_sq_mat) sum_mat_index:\n  shows \"finite I \\<Longrightarrow> (\\<And>i. i \\<in> I \\<Longrightarrow> (A i)\\<in> fc_mats) \\<Longrightarrow> i < dimR \\<Longrightarrow> j < dimC \\<Longrightarrow> \n    (sum_mat (\\<lambda>k. (A k)) I) $$ (i,j) = (\\<Sum> k\\<in>I. (A k) $$ (i,j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I;\n     \\<And>i. i \\<in> I \\<Longrightarrow> A i \\<in> fc_mats; i < dimR;\n     j < dimC\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat A I $$ (i, j) =\n                      (\\<Sum>k\\<in>I. A k $$ (i, j))", "proof (induct rule: finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats;\n     i < dimR; j < dimC\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat A {} $$ (i, j) =\n                      (\\<Sum>k\\<in>{}. A k $$ (i, j))\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         i < dimR; j < dimC\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F $$ (i, j) =\n                          (\\<Sum>k\\<in>F. A k $$ (i, j));\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        i < dimR; j < dimC\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) $$ (i, j) =\n                         (\\<Sum>k\\<in>insert x F. A k $$ (i, j))", "case empty"], ["proof (state)\nthis:\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  i < dimR\n  j < dimC\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats;\n     i < dimR; j < dimC\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat A {} $$ (i, j) =\n                      (\\<Sum>k\\<in>{}. A k $$ (i, j))\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         i < dimR; j < dimC\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F $$ (i, j) =\n                          (\\<Sum>k\\<in>F. A k $$ (i, j));\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        i < dimR; j < dimC\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) $$ (i, j) =\n                         (\\<Sum>k\\<in>insert x F. A k $$ (i, j))", "thus ?case"], ["proof (prove)\nusing this:\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  i < dimR\n  j < dimC\n\ngoal (1 subgoal):\n 1. local.sum_mat A {} $$ (i, j) = (\\<Sum>k\\<in>{}. A k $$ (i, j))", "unfolding sum_mat_def"], ["proof (prove)\nusing this:\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  i < dimR\n  j < dimC\n\ngoal (1 subgoal):\n 1. sum_with (+) (0\\<^sub>m dimR dimC) A {} $$ (i, j) =\n    (\\<Sum>k\\<in>{}. A k $$ (i, j))", "by simp"], ["proof (state)\nthis:\n  local.sum_mat A {} $$ (i, j) = (\\<Sum>k\\<in>{}. A k $$ (i, j))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         i < dimR; j < dimC\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F $$ (i, j) =\n                          (\\<Sum>k\\<in>F. A k $$ (i, j));\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        i < dimR; j < dimC\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) $$ (i, j) =\n                         (\\<Sum>k\\<in>insert x F. A k $$ (i, j))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         i < dimR; j < dimC\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F $$ (i, j) =\n                          (\\<Sum>k\\<in>F. A k $$ (i, j));\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        i < dimR; j < dimC\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) $$ (i, j) =\n                         (\\<Sum>k\\<in>insert x F. A k $$ (i, j))", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats; i < dimR;\n   j < dimC\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F $$ (i, j) =\n                    (\\<Sum>k\\<in>F. A k $$ (i, j))\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  i < dimR\n  j < dimC\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         i < dimR; j < dimC\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F $$ (i, j) =\n                          (\\<Sum>k\\<in>F. A k $$ (i, j));\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        i < dimR; j < dimC\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) $$ (i, j) =\n                         (\\<Sum>k\\<in>insert x F. A k $$ (i, j))", "hence \"(sum_mat (\\<lambda>k. (A k)) (insert x F)) $$ (i,j) = \n    (A x + (sum_mat (\\<lambda>k. (A k)) F)) $$ (i,j)\""], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats; i < dimR;\n   j < dimC\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F $$ (i, j) =\n                    (\\<Sum>k\\<in>F. A k $$ (i, j))\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  i < dimR\n  j < dimC\n\ngoal (1 subgoal):\n 1. local.sum_mat A (insert x F) $$ (i, j) =\n    (A x + local.sum_mat A F) $$ (i, j)", "using insert sum_mat_insert[of A]"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats; i < dimR;\n   j < dimC\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F $$ (i, j) =\n                    (\\<Sum>k\\<in>F. A k $$ (i, j))\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  i < dimR\n  j < dimC\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats; i < dimR;\n   j < dimC\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F $$ (i, j) =\n                    (\\<Sum>k\\<in>F. A k $$ (i, j))\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  i < dimR\n  j < dimC\n  \\<lbrakk>A ?x \\<in> fc_mats; A ` ?I \\<subseteq> fc_mats; finite ?I;\n   ?x \\<notin> ?I\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A (insert ?x ?I) =\n                    A ?x + local.sum_mat A ?I\n\ngoal (1 subgoal):\n 1. local.sum_mat A (insert x F) $$ (i, j) =\n    (A x + local.sum_mat A F) $$ (i, j)", "by (simp add: image_subsetI local.fc_mats_carrier)"], ["proof (state)\nthis:\n  local.sum_mat A (insert x F) $$ (i, j) =\n  (A x + local.sum_mat A F) $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         i < dimR; j < dimC\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F $$ (i, j) =\n                          (\\<Sum>k\\<in>F. A k $$ (i, j));\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        i < dimR; j < dimC\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) $$ (i, j) =\n                         (\\<Sum>k\\<in>insert x F. A k $$ (i, j))", "also"], ["proof (state)\nthis:\n  local.sum_mat A (insert x F) $$ (i, j) =\n  (A x + local.sum_mat A F) $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         i < dimR; j < dimC\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F $$ (i, j) =\n                          (\\<Sum>k\\<in>F. A k $$ (i, j));\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        i < dimR; j < dimC\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) $$ (i, j) =\n                         (\\<Sum>k\\<in>insert x F. A k $$ (i, j))", "have \"... = (A x) $$ (i,j) + (sum_mat (\\<lambda>k. (A k)) F) $$ (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A x + local.sum_mat A F) $$ (i, j) =\n    A x $$ (i, j) + local.sum_mat A F $$ (i, j)", "using insert       \n      sum_mat_carrier[of F A] fc_mats_carrier"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats; i < dimR;\n   j < dimC\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F $$ (i, j) =\n                    (\\<Sum>k\\<in>F. A k $$ (i, j))\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  i < dimR\n  j < dimC\n  (\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n  local.sum_mat A F \\<in> carrier_mat dimR dimC\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. (A x + local.sum_mat A F) $$ (i, j) =\n    A x $$ (i, j) + local.sum_mat A F $$ (i, j)", "by simp"], ["proof (state)\nthis:\n  (A x + local.sum_mat A F) $$ (i, j) =\n  A x $$ (i, j) + local.sum_mat A F $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         i < dimR; j < dimC\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F $$ (i, j) =\n                          (\\<Sum>k\\<in>F. A k $$ (i, j));\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        i < dimR; j < dimC\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) $$ (i, j) =\n                         (\\<Sum>k\\<in>insert x F. A k $$ (i, j))", "also"], ["proof (state)\nthis:\n  (A x + local.sum_mat A F) $$ (i, j) =\n  A x $$ (i, j) + local.sum_mat A F $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         i < dimR; j < dimC\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F $$ (i, j) =\n                          (\\<Sum>k\\<in>F. A k $$ (i, j));\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        i < dimR; j < dimC\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) $$ (i, j) =\n                         (\\<Sum>k\\<in>insert x F. A k $$ (i, j))", "have \"... = (A x) $$ (i,j) + (\\<Sum> k\\<in>F. (A k) $$ (i,j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x $$ (i, j) + local.sum_mat A F $$ (i, j) =\n    A x $$ (i, j) + (\\<Sum>k\\<in>F. A k $$ (i, j))", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats; i < dimR;\n   j < dimC\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F $$ (i, j) =\n                    (\\<Sum>k\\<in>F. A k $$ (i, j))\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  i < dimR\n  j < dimC\n\ngoal (1 subgoal):\n 1. A x $$ (i, j) + local.sum_mat A F $$ (i, j) =\n    A x $$ (i, j) + (\\<Sum>k\\<in>F. A k $$ (i, j))", "by simp"], ["proof (state)\nthis:\n  A x $$ (i, j) + local.sum_mat A F $$ (i, j) =\n  A x $$ (i, j) + (\\<Sum>k\\<in>F. A k $$ (i, j))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         i < dimR; j < dimC\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F $$ (i, j) =\n                          (\\<Sum>k\\<in>F. A k $$ (i, j));\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        i < dimR; j < dimC\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) $$ (i, j) =\n                         (\\<Sum>k\\<in>insert x F. A k $$ (i, j))", "also"], ["proof (state)\nthis:\n  A x $$ (i, j) + local.sum_mat A F $$ (i, j) =\n  A x $$ (i, j) + (\\<Sum>k\\<in>F. A k $$ (i, j))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         i < dimR; j < dimC\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F $$ (i, j) =\n                          (\\<Sum>k\\<in>F. A k $$ (i, j));\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        i < dimR; j < dimC\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) $$ (i, j) =\n                         (\\<Sum>k\\<in>insert x F. A k $$ (i, j))", "have \"... = (\\<Sum> k\\<in>(insert x F). (A k) $$ (i,j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x $$ (i, j) + (\\<Sum>k\\<in>F. A k $$ (i, j)) =\n    (\\<Sum>k\\<in>insert x F. A k $$ (i, j))", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats; i < dimR;\n   j < dimC\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F $$ (i, j) =\n                    (\\<Sum>k\\<in>F. A k $$ (i, j))\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  i < dimR\n  j < dimC\n\ngoal (1 subgoal):\n 1. A x $$ (i, j) + (\\<Sum>k\\<in>F. A k $$ (i, j)) =\n    (\\<Sum>k\\<in>insert x F. A k $$ (i, j))", "by simp"], ["proof (state)\nthis:\n  A x $$ (i, j) + (\\<Sum>k\\<in>F. A k $$ (i, j)) =\n  (\\<Sum>k\\<in>insert x F. A k $$ (i, j))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         i < dimR; j < dimC\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F $$ (i, j) =\n                          (\\<Sum>k\\<in>F. A k $$ (i, j));\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        i < dimR; j < dimC\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) $$ (i, j) =\n                         (\\<Sum>k\\<in>insert x F. A k $$ (i, j))", "finally"], ["proof (chain)\npicking this:\n  local.sum_mat A (insert x F) $$ (i, j) =\n  (\\<Sum>k\\<in>insert x F. A k $$ (i, j))", "show ?case"], ["proof (prove)\nusing this:\n  local.sum_mat A (insert x F) $$ (i, j) =\n  (\\<Sum>k\\<in>insert x F. A k $$ (i, j))\n\ngoal (1 subgoal):\n 1. local.sum_mat A (insert x F) $$ (i, j) =\n    (\\<Sum>k\\<in>insert x F. A k $$ (i, j))", "."], ["proof (state)\nthis:\n  local.sum_mat A (insert x F) $$ (i, j) =\n  (\\<Sum>k\\<in>insert x F. A k $$ (i, j))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in cpx_sq_mat) sum_mat_cong:\n  shows \"finite I \\<Longrightarrow> (\\<And>i. i\\<in> I \\<Longrightarrow> A i = B i) \\<Longrightarrow> (\\<And>i. i\\<in> I \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow> \n    (\\<And>i. i\\<in> I \\<Longrightarrow> B i \\<in> fc_mats) \\<Longrightarrow> sum_mat A I = sum_mat B I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; \\<And>i. i \\<in> I \\<Longrightarrow> A i = B i;\n     \\<And>i. i \\<in> I \\<Longrightarrow> A i \\<in> fc_mats;\n     \\<And>i. i \\<in> I \\<Longrightarrow> B i \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat A I = local.sum_mat B I", "proof (induct rule: finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i. i \\<in> {} \\<Longrightarrow> A i = B i;\n     \\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats;\n     \\<And>i. i \\<in> {} \\<Longrightarrow> B i \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat A {} = local.sum_mat B {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i = B i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> B i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F = local.sum_mat B F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i = B i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> B i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) =\n                         local.sum_mat B (insert x F)", "case empty"], ["proof (state)\nthis:\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 = B ?i2\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  ?i2 \\<in> {} \\<Longrightarrow> B ?i2 \\<in> fc_mats\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i. i \\<in> {} \\<Longrightarrow> A i = B i;\n     \\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats;\n     \\<And>i. i \\<in> {} \\<Longrightarrow> B i \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat A {} = local.sum_mat B {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i = B i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> B i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F = local.sum_mat B F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i = B i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> B i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) =\n                         local.sum_mat B (insert x F)", "then"], ["proof (chain)\npicking this:\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 = B ?i2\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  ?i2 \\<in> {} \\<Longrightarrow> B ?i2 \\<in> fc_mats", "show ?case"], ["proof (prove)\nusing this:\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 = B ?i2\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  ?i2 \\<in> {} \\<Longrightarrow> B ?i2 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. local.sum_mat A {} = local.sum_mat B {}", "by simp"], ["proof (state)\nthis:\n  local.sum_mat A {} = local.sum_mat B {}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i = B i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> B i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F = local.sum_mat B F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i = B i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> B i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) =\n                         local.sum_mat B (insert x F)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i = B i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> B i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F = local.sum_mat B F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i = B i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> B i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) =\n                         local.sum_mat B (insert x F)", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i = B i;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   \\<And>i. i \\<in> F \\<Longrightarrow> B i \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F = local.sum_mat B F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 = B ?i2\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  ?i2 \\<in> insert x F \\<Longrightarrow> B ?i2 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i = B i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> B i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F = local.sum_mat B F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i = B i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> B i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) =\n                         local.sum_mat B (insert x F)", "have \"sum_mat A (insert x F) = A x + sum_mat A F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat A (insert x F) = A x + local.sum_mat A F", "using insert sum_mat_insert[of A]"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i = B i;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   \\<And>i. i \\<in> F \\<Longrightarrow> B i \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F = local.sum_mat B F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 = B ?i2\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  ?i2 \\<in> insert x F \\<Longrightarrow> B ?i2 \\<in> fc_mats\n  \\<lbrakk>A ?x \\<in> fc_mats; A ` ?I \\<subseteq> fc_mats; finite ?I;\n   ?x \\<notin> ?I\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A (insert ?x ?I) =\n                    A ?x + local.sum_mat A ?I\n\ngoal (1 subgoal):\n 1. local.sum_mat A (insert x F) = A x + local.sum_mat A F", "by (simp add:  image_subset_iff)"], ["proof (state)\nthis:\n  local.sum_mat A (insert x F) = A x + local.sum_mat A F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i = B i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> B i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F = local.sum_mat B F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i = B i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> B i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) =\n                         local.sum_mat B (insert x F)", "also"], ["proof (state)\nthis:\n  local.sum_mat A (insert x F) = A x + local.sum_mat A F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i = B i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> B i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F = local.sum_mat B F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i = B i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> B i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) =\n                         local.sum_mat B (insert x F)", "have \"... = B x + sum_mat B F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x + local.sum_mat A F = B x + local.sum_mat B F", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i = B i;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   \\<And>i. i \\<in> F \\<Longrightarrow> B i \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F = local.sum_mat B F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 = B ?i2\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  ?i2 \\<in> insert x F \\<Longrightarrow> B ?i2 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. A x + local.sum_mat A F = B x + local.sum_mat B F", "by simp"], ["proof (state)\nthis:\n  A x + local.sum_mat A F = B x + local.sum_mat B F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i = B i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> B i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F = local.sum_mat B F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i = B i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> B i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) =\n                         local.sum_mat B (insert x F)", "also"], ["proof (state)\nthis:\n  A x + local.sum_mat A F = B x + local.sum_mat B F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i = B i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> B i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F = local.sum_mat B F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i = B i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> B i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) =\n                         local.sum_mat B (insert x F)", "have \"... = sum_mat B (insert x F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B x + local.sum_mat B F = local.sum_mat B (insert x F)", "using insert sum_mat_insert[of B]"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i = B i;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   \\<And>i. i \\<in> F \\<Longrightarrow> B i \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F = local.sum_mat B F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 = B ?i2\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  ?i2 \\<in> insert x F \\<Longrightarrow> B ?i2 \\<in> fc_mats\n  \\<lbrakk>B ?x \\<in> fc_mats; B ` ?I \\<subseteq> fc_mats; finite ?I;\n   ?x \\<notin> ?I\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat B (insert ?x ?I) =\n                    B ?x + local.sum_mat B ?I\n\ngoal (1 subgoal):\n 1. B x + local.sum_mat B F = local.sum_mat B (insert x F)", "by (simp add:  image_subset_iff)"], ["proof (state)\nthis:\n  B x + local.sum_mat B F = local.sum_mat B (insert x F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i = B i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         \\<And>i. i \\<in> F \\<Longrightarrow> B i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F = local.sum_mat B F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i = B i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> B i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) =\n                         local.sum_mat B (insert x F)", "finally"], ["proof (chain)\npicking this:\n  local.sum_mat A (insert x F) = local.sum_mat B (insert x F)", "show ?case"], ["proof (prove)\nusing this:\n  local.sum_mat A (insert x F) = local.sum_mat B (insert x F)\n\ngoal (1 subgoal):\n 1. local.sum_mat A (insert x F) = local.sum_mat B (insert x F)", "."], ["proof (state)\nthis:\n  local.sum_mat A (insert x F) = local.sum_mat B (insert x F)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in cpx_sq_mat) smult_sum_mat:\n  shows \"finite I \\<Longrightarrow> (\\<And>i. i\\<in> I \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow> a \\<cdot>\\<^sub>m sum_mat A I = sum_mat (\\<lambda>i. a  \\<cdot>\\<^sub>m (A i)) I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I;\n     \\<And>i. i \\<in> I \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot>\\<^sub>m local.sum_mat A I =\n                      local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) I", "proof (induct rule: finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>i.\n        i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n    a \\<cdot>\\<^sub>m local.sum_mat A {} =\n    local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        a \\<cdot>\\<^sub>m local.sum_mat A F =\n        local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) F;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot>\\<^sub>m local.sum_mat A (insert x F) =\n                         local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i)\n                          (insert x F)", "case empty"], ["proof (state)\nthis:\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 \\<in> fc_mats\n\ngoal (2 subgoals):\n 1. (\\<And>i.\n        i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n    a \\<cdot>\\<^sub>m local.sum_mat A {} =\n    local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        a \\<cdot>\\<^sub>m local.sum_mat A F =\n        local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) F;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot>\\<^sub>m local.sum_mat A (insert x F) =\n                         local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i)\n                          (insert x F)", "then"], ["proof (chain)\npicking this:\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 \\<in> fc_mats", "show ?case"], ["proof (prove)\nusing this:\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>m local.sum_mat A {} =\n    local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) {}", "by simp"], ["proof (state)\nthis:\n  a \\<cdot>\\<^sub>m local.sum_mat A {} =\n  local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) {}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        a \\<cdot>\\<^sub>m local.sum_mat A F =\n        local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) F;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot>\\<^sub>m local.sum_mat A (insert x F) =\n                         local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i)\n                          (insert x F)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        a \\<cdot>\\<^sub>m local.sum_mat A F =\n        local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) F;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot>\\<^sub>m local.sum_mat A (insert x F) =\n                         local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i)\n                          (insert x F)", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  (\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n  a \\<cdot>\\<^sub>m local.sum_mat A F =\n  local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        a \\<cdot>\\<^sub>m local.sum_mat A F =\n        local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) F;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot>\\<^sub>m local.sum_mat A (insert x F) =\n                         local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i)\n                          (insert x F)", "have \"a \\<cdot>\\<^sub>m sum_mat A (insert x F) = a \\<cdot>\\<^sub>m (A x + sum_mat A F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>m local.sum_mat A (insert x F) =\n    a \\<cdot>\\<^sub>m (A x + local.sum_mat A F)", "using insert sum_mat_insert[of A]"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  (\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n  a \\<cdot>\\<^sub>m local.sum_mat A F =\n  local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  \\<lbrakk>A ?x \\<in> fc_mats; A ` ?I \\<subseteq> fc_mats; finite ?I;\n   ?x \\<notin> ?I\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A (insert ?x ?I) =\n                    A ?x + local.sum_mat A ?I\n\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>m local.sum_mat A (insert x F) =\n    a \\<cdot>\\<^sub>m (A x + local.sum_mat A F)", "by (simp add:  image_subset_iff)"], ["proof (state)\nthis:\n  a \\<cdot>\\<^sub>m local.sum_mat A (insert x F) =\n  a \\<cdot>\\<^sub>m (A x + local.sum_mat A F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        a \\<cdot>\\<^sub>m local.sum_mat A F =\n        local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) F;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot>\\<^sub>m local.sum_mat A (insert x F) =\n                         local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i)\n                          (insert x F)", "also"], ["proof (state)\nthis:\n  a \\<cdot>\\<^sub>m local.sum_mat A (insert x F) =\n  a \\<cdot>\\<^sub>m (A x + local.sum_mat A F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        a \\<cdot>\\<^sub>m local.sum_mat A F =\n        local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) F;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot>\\<^sub>m local.sum_mat A (insert x F) =\n                         local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i)\n                          (insert x F)", "have \"... = a \\<cdot>\\<^sub>m A x + a \\<cdot>\\<^sub>m (sum_mat A F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>m (A x + local.sum_mat A F) =\n    a \\<cdot>\\<^sub>m A x + a \\<cdot>\\<^sub>m local.sum_mat A F", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  (\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n  a \\<cdot>\\<^sub>m local.sum_mat A F =\n  local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>m (A x + local.sum_mat A F) =\n    a \\<cdot>\\<^sub>m A x + a \\<cdot>\\<^sub>m local.sum_mat A F", "by (metis add_smult_distrib_left_mat fc_mats_carrier insert_iff sum_mat_carrier)"], ["proof (state)\nthis:\n  a \\<cdot>\\<^sub>m (A x + local.sum_mat A F) =\n  a \\<cdot>\\<^sub>m A x + a \\<cdot>\\<^sub>m local.sum_mat A F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        a \\<cdot>\\<^sub>m local.sum_mat A F =\n        local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) F;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot>\\<^sub>m local.sum_mat A (insert x F) =\n                         local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i)\n                          (insert x F)", "also"], ["proof (state)\nthis:\n  a \\<cdot>\\<^sub>m (A x + local.sum_mat A F) =\n  a \\<cdot>\\<^sub>m A x + a \\<cdot>\\<^sub>m local.sum_mat A F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        a \\<cdot>\\<^sub>m local.sum_mat A F =\n        local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) F;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot>\\<^sub>m local.sum_mat A (insert x F) =\n                         local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i)\n                          (insert x F)", "have \"... = a \\<cdot>\\<^sub>m  A x + sum_mat (\\<lambda>i. a  \\<cdot>\\<^sub>m (A i)) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>m A x + a \\<cdot>\\<^sub>m local.sum_mat A F =\n    a \\<cdot>\\<^sub>m A x +\n    local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) F", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  (\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n  a \\<cdot>\\<^sub>m local.sum_mat A F =\n  local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>m A x + a \\<cdot>\\<^sub>m local.sum_mat A F =\n    a \\<cdot>\\<^sub>m A x +\n    local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) F", "by simp"], ["proof (state)\nthis:\n  a \\<cdot>\\<^sub>m A x + a \\<cdot>\\<^sub>m local.sum_mat A F =\n  a \\<cdot>\\<^sub>m A x +\n  local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        a \\<cdot>\\<^sub>m local.sum_mat A F =\n        local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) F;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot>\\<^sub>m local.sum_mat A (insert x F) =\n                         local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i)\n                          (insert x F)", "also"], ["proof (state)\nthis:\n  a \\<cdot>\\<^sub>m A x + a \\<cdot>\\<^sub>m local.sum_mat A F =\n  a \\<cdot>\\<^sub>m A x +\n  local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        a \\<cdot>\\<^sub>m local.sum_mat A F =\n        local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) F;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot>\\<^sub>m local.sum_mat A (insert x F) =\n                         local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i)\n                          (insert x F)", "have \"... = sum_mat (\\<lambda>i. a  \\<cdot>\\<^sub>m (A i)) (insert x F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>m A x +\n    local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) F =\n    local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) (insert x F)", "using insert \n      sum_mat_insert[of \"(\\<lambda>i. a  \\<cdot>\\<^sub>m (A i))\"]"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  (\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n  a \\<cdot>\\<^sub>m local.sum_mat A F =\n  local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  \\<lbrakk>a \\<cdot>\\<^sub>m A ?x \\<in> fc_mats;\n   (\\<lambda>i. a \\<cdot>\\<^sub>m A i) ` ?I \\<subseteq> fc_mats; finite ?I;\n   ?x \\<notin> ?I\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i)\n                     (insert ?x ?I) =\n                    a \\<cdot>\\<^sub>m A ?x +\n                    local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) ?I\n\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>m A x +\n    local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) F =\n    local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) (insert x F)", "by (simp add: image_subset_iff cpx_sq_mat_smult)"], ["proof (state)\nthis:\n  a \\<cdot>\\<^sub>m A x +\n  local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) F =\n  local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) (insert x F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        a \\<cdot>\\<^sub>m local.sum_mat A F =\n        local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) F;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot>\\<^sub>m local.sum_mat A (insert x F) =\n                         local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i)\n                          (insert x F)", "finally"], ["proof (chain)\npicking this:\n  a \\<cdot>\\<^sub>m local.sum_mat A (insert x F) =\n  local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) (insert x F)", "show ?case"], ["proof (prove)\nusing this:\n  a \\<cdot>\\<^sub>m local.sum_mat A (insert x F) =\n  local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) (insert x F)\n\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>m local.sum_mat A (insert x F) =\n    local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) (insert x F)", "."], ["proof (state)\nthis:\n  a \\<cdot>\\<^sub>m local.sum_mat A (insert x F) =\n  local.sum_mat (\\<lambda>i. a \\<cdot>\\<^sub>m A i) (insert x F)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in cpx_sq_mat) zero_sum_mat:\n  shows \"finite I \\<Longrightarrow> sum_mat (\\<lambda>i. ((0\\<^sub>m dimR dimR)::complex Matrix.mat)) I = ((0\\<^sub>m dimR dimR)::complex Matrix.mat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow>\n    local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) I = 0\\<^sub>m dimR dimR", "proof (induct rule:finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) {} = 0\\<^sub>m dimR dimR\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F =\n        0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR)\n                          (insert x F) =\n                         0\\<^sub>m dimR dimR", "case empty"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) {} = 0\\<^sub>m dimR dimR\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F =\n        0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR)\n                          (insert x F) =\n                         0\\<^sub>m dimR dimR", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) {} = 0\\<^sub>m dimR dimR", "using dim_eq sum_mat_empty"], ["proof (prove)\nusing this:\n  dimR = dimC\n  local.sum_mat ?A {} = 0\\<^sub>m dimR dimC\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) {} = 0\\<^sub>m dimR dimR", "by auto"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) {} = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F =\n        0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR)\n                          (insert x F) =\n                         0\\<^sub>m dimR dimR", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F =\n        0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR)\n                          (insert x F) =\n                         0\\<^sub>m dimR dimR", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F =\n        0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR)\n                          (insert x F) =\n                         0\\<^sub>m dimR dimR", "have \"sum_mat (\\<lambda>i. ((0\\<^sub>m dimR dimR)::complex Matrix.mat)) (insert x F) = \n    0\\<^sub>m dimR dimR + sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) (insert x F) =\n    0\\<^sub>m dimR dimR + local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F", "using insert dim_eq zero_mem sum_mat_insert[of \"\\<lambda>i. ((0\\<^sub>m dimR dimR)::complex Matrix.mat)\"]"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F = 0\\<^sub>m dimR dimR\n  dimR = dimC\n  0\\<^sub>m dimR dimC \\<in> fc_mats\n  \\<lbrakk>0\\<^sub>m dimR dimR \\<in> fc_mats;\n   (\\<lambda>i. 0\\<^sub>m dimR dimR) ` ?I \\<subseteq> fc_mats; finite ?I;\n   ?x \\<notin> ?I\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR)\n                     (insert ?x ?I) =\n                    0\\<^sub>m dimR dimR +\n                    local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) ?I\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) (insert x F) =\n    0\\<^sub>m dimR dimR + local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F", "by fastforce"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) (insert x F) =\n  0\\<^sub>m dimR dimR + local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F =\n        0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR)\n                          (insert x F) =\n                         0\\<^sub>m dimR dimR", "also"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) (insert x F) =\n  0\\<^sub>m dimR dimR + local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F =\n        0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR)\n                          (insert x F) =\n                         0\\<^sub>m dimR dimR", "have \"... = ((0\\<^sub>m dimR dimR)::complex Matrix.mat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0\\<^sub>m dimR dimR +\n    local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F =\n    0\\<^sub>m dimR dimR", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. 0\\<^sub>m dimR dimR +\n    local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F =\n    0\\<^sub>m dimR dimR", "by auto"], ["proof (state)\nthis:\n  0\\<^sub>m dimR dimR + local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F =\n  0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F =\n        0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR)\n                          (insert x F) =\n                         0\\<^sub>m dimR dimR", "finally"], ["proof (chain)\npicking this:\n  local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) (insert x F) =\n  0\\<^sub>m dimR dimR", "show ?case"], ["proof (prove)\nusing this:\n  local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) (insert x F) =\n  0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) (insert x F) =\n    0\\<^sub>m dimR dimR", "."], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) (insert x F) =\n  0\\<^sub>m dimR dimR\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in cpx_sq_mat) sum_mat_adjoint:\n  shows \"finite I \\<Longrightarrow> (\\<And>i. i\\<in> I \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow> \n    Complex_Matrix.adjoint (sum_mat A I) = sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I;\n     \\<And>i. i \\<in> I \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> Complex_Matrix.adjoint (local.sum_mat A I) =\n                      local.sum_mat\n                       (\\<lambda>i. Complex_Matrix.adjoint (A i)) I", "proof (induct rule: finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>i.\n        i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n    Complex_Matrix.adjoint (local.sum_mat A {}) =\n    local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        Complex_Matrix.adjoint (local.sum_mat A F) =\n        local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) F;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint\n                          (local.sum_mat A (insert x F)) =\n                         local.sum_mat\n                          (\\<lambda>i. Complex_Matrix.adjoint (A i))\n                          (insert x F)", "case empty"], ["proof (state)\nthis:\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 \\<in> fc_mats\n\ngoal (2 subgoals):\n 1. (\\<And>i.\n        i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n    Complex_Matrix.adjoint (local.sum_mat A {}) =\n    local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        Complex_Matrix.adjoint (local.sum_mat A F) =\n        local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) F;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint\n                          (local.sum_mat A (insert x F)) =\n                         local.sum_mat\n                          (\\<lambda>i. Complex_Matrix.adjoint (A i))\n                          (insert x F)", "then"], ["proof (chain)\npicking this:\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 \\<in> fc_mats", "show ?case"], ["proof (prove)\nusing this:\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (local.sum_mat A {}) =\n    local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) {}", "using zero_hermitian[of dimR]"], ["proof (prove)\nusing this:\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  hermitian (0\\<^sub>m dimR dimR)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (local.sum_mat A {}) =\n    local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) {}", "by (metis (no_types) dim_eq hermitian_def sum_mat_empty)"], ["proof (state)\nthis:\n  Complex_Matrix.adjoint (local.sum_mat A {}) =\n  local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) {}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        Complex_Matrix.adjoint (local.sum_mat A F) =\n        local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) F;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint\n                          (local.sum_mat A (insert x F)) =\n                         local.sum_mat\n                          (\\<lambda>i. Complex_Matrix.adjoint (A i))\n                          (insert x F)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        Complex_Matrix.adjoint (local.sum_mat A F) =\n        local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) F;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint\n                          (local.sum_mat A (insert x F)) =\n                         local.sum_mat\n                          (\\<lambda>i. Complex_Matrix.adjoint (A i))\n                          (insert x F)", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  (\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n  Complex_Matrix.adjoint (local.sum_mat A F) =\n  local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        Complex_Matrix.adjoint (local.sum_mat A F) =\n        local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) F;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint\n                          (local.sum_mat A (insert x F)) =\n                         local.sum_mat\n                          (\\<lambda>i. Complex_Matrix.adjoint (A i))\n                          (insert x F)", "have \"Complex_Matrix.adjoint (sum_mat A (insert x F)) = \n    Complex_Matrix.adjoint (A x + sum_mat A F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (local.sum_mat A (insert x F)) =\n    Complex_Matrix.adjoint (A x + local.sum_mat A F)", "using insert sum_mat_insert[of A]"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  (\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n  Complex_Matrix.adjoint (local.sum_mat A F) =\n  local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  \\<lbrakk>A ?x \\<in> fc_mats; A ` ?I \\<subseteq> fc_mats; finite ?I;\n   ?x \\<notin> ?I\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A (insert ?x ?I) =\n                    A ?x + local.sum_mat A ?I\n\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (local.sum_mat A (insert x F)) =\n    Complex_Matrix.adjoint (A x + local.sum_mat A F)", "by (simp add:  image_subset_iff)"], ["proof (state)\nthis:\n  Complex_Matrix.adjoint (local.sum_mat A (insert x F)) =\n  Complex_Matrix.adjoint (A x + local.sum_mat A F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        Complex_Matrix.adjoint (local.sum_mat A F) =\n        local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) F;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint\n                          (local.sum_mat A (insert x F)) =\n                         local.sum_mat\n                          (\\<lambda>i. Complex_Matrix.adjoint (A i))\n                          (insert x F)", "also"], ["proof (state)\nthis:\n  Complex_Matrix.adjoint (local.sum_mat A (insert x F)) =\n  Complex_Matrix.adjoint (A x + local.sum_mat A F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        Complex_Matrix.adjoint (local.sum_mat A F) =\n        local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) F;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint\n                          (local.sum_mat A (insert x F)) =\n                         local.sum_mat\n                          (\\<lambda>i. Complex_Matrix.adjoint (A i))\n                          (insert x F)", "have \"... = Complex_Matrix.adjoint (A x) + Complex_Matrix.adjoint (sum_mat A F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (A x + local.sum_mat A F) =\n    Complex_Matrix.adjoint (A x) +\n    Complex_Matrix.adjoint (local.sum_mat A F)", "proof (rule adjoint_add)"], ["proof (state)\ngoal (2 subgoals):\n 1. A x \\<in> carrier_mat ?n ?m\n 2. local.sum_mat A F \\<in> carrier_mat ?n ?m", "show \"A x \\<in> carrier_mat dimR dimC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x \\<in> carrier_mat dimR dimC", "using  insert fc_mats_carrier"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  (\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n  Complex_Matrix.adjoint (local.sum_mat A F) =\n  local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. A x \\<in> carrier_mat dimR dimC", "by simp"], ["proof (state)\nthis:\n  A x \\<in> carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. local.sum_mat A F \\<in> carrier_mat dimR dimC", "show \"sum_mat A F \\<in> carrier_mat dimR dimC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat A F \\<in> carrier_mat dimR dimC", "using  insert fc_mats_carrier sum_mat_carrier[of F]"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  (\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n  Complex_Matrix.adjoint (local.sum_mat A F) =\n  local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  fc_mats = carrier_mat dimR dimC\n  (\\<And>i.\n      i \\<in> F \\<Longrightarrow> ?A i \\<in> fc_mats) \\<Longrightarrow>\n  local.sum_mat ?A F \\<in> carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. local.sum_mat A F \\<in> carrier_mat dimR dimC", "by simp"], ["proof (state)\nthis:\n  local.sum_mat A F \\<in> carrier_mat dimR dimC\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Complex_Matrix.adjoint (A x + local.sum_mat A F) =\n  Complex_Matrix.adjoint (A x) + Complex_Matrix.adjoint (local.sum_mat A F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        Complex_Matrix.adjoint (local.sum_mat A F) =\n        local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) F;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint\n                          (local.sum_mat A (insert x F)) =\n                         local.sum_mat\n                          (\\<lambda>i. Complex_Matrix.adjoint (A i))\n                          (insert x F)", "also"], ["proof (state)\nthis:\n  Complex_Matrix.adjoint (A x + local.sum_mat A F) =\n  Complex_Matrix.adjoint (A x) + Complex_Matrix.adjoint (local.sum_mat A F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        Complex_Matrix.adjoint (local.sum_mat A F) =\n        local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) F;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint\n                          (local.sum_mat A (insert x F)) =\n                         local.sum_mat\n                          (\\<lambda>i. Complex_Matrix.adjoint (A i))\n                          (insert x F)", "have \"... = Complex_Matrix.adjoint (A x) + sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (A x) +\n    Complex_Matrix.adjoint (local.sum_mat A F) =\n    Complex_Matrix.adjoint (A x) +\n    local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) F", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  (\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n  Complex_Matrix.adjoint (local.sum_mat A F) =\n  local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (A x) +\n    Complex_Matrix.adjoint (local.sum_mat A F) =\n    Complex_Matrix.adjoint (A x) +\n    local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) F", "by simp"], ["proof (state)\nthis:\n  Complex_Matrix.adjoint (A x) +\n  Complex_Matrix.adjoint (local.sum_mat A F) =\n  Complex_Matrix.adjoint (A x) +\n  local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        Complex_Matrix.adjoint (local.sum_mat A F) =\n        local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) F;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint\n                          (local.sum_mat A (insert x F)) =\n                         local.sum_mat\n                          (\\<lambda>i. Complex_Matrix.adjoint (A i))\n                          (insert x F)", "also"], ["proof (state)\nthis:\n  Complex_Matrix.adjoint (A x) +\n  Complex_Matrix.adjoint (local.sum_mat A F) =\n  Complex_Matrix.adjoint (A x) +\n  local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        Complex_Matrix.adjoint (local.sum_mat A F) =\n        local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) F;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint\n                          (local.sum_mat A (insert x F)) =\n                         local.sum_mat\n                          (\\<lambda>i. Complex_Matrix.adjoint (A i))\n                          (insert x F)", "have \"... = sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) (insert x F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (A x) +\n    local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) F =\n    local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) (insert x F)", "proof (rule sum_mat_insert[symmetric], (auto simp add: insert))"], ["proof (state)\ngoal (2 subgoals):\n 1. Complex_Matrix.adjoint (A x) \\<in> fc_mats\n 2. \\<And>i.\n       i \\<in> F \\<Longrightarrow>\n       Complex_Matrix.adjoint (A i) \\<in> fc_mats", "show \"Complex_Matrix.adjoint (A x) \\<in> fc_mats\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (A x) \\<in> fc_mats", "using insert fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  (\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n  Complex_Matrix.adjoint (local.sum_mat A F) =\n  local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (A x) \\<in> fc_mats", "by (simp add: adjoint_dim)"], ["proof (state)\nthis:\n  Complex_Matrix.adjoint (A x) \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> F \\<Longrightarrow>\n       Complex_Matrix.adjoint (A i) \\<in> fc_mats", "show \"\\<And>i. i \\<in> F \\<Longrightarrow> Complex_Matrix.adjoint (A i) \\<in> fc_mats\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> F \\<Longrightarrow>\n       Complex_Matrix.adjoint (A i) \\<in> fc_mats", "using insert fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  (\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n  Complex_Matrix.adjoint (local.sum_mat A F) =\n  local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> F \\<Longrightarrow>\n       Complex_Matrix.adjoint (A i) \\<in> fc_mats", "by (simp add: adjoint_dim)"], ["proof (state)\nthis:\n  ?i2 \\<in> F \\<Longrightarrow> Complex_Matrix.adjoint (A ?i2) \\<in> fc_mats\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Complex_Matrix.adjoint (A x) +\n  local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) F =\n  local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) (insert x F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n        Complex_Matrix.adjoint (local.sum_mat A F) =\n        local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) F;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint\n                          (local.sum_mat A (insert x F)) =\n                         local.sum_mat\n                          (\\<lambda>i. Complex_Matrix.adjoint (A i))\n                          (insert x F)", "finally"], ["proof (chain)\npicking this:\n  Complex_Matrix.adjoint (local.sum_mat A (insert x F)) =\n  local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) (insert x F)", "show ?case"], ["proof (prove)\nusing this:\n  Complex_Matrix.adjoint (local.sum_mat A (insert x F)) =\n  local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) (insert x F)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (local.sum_mat A (insert x F)) =\n    local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) (insert x F)", "."], ["proof (state)\nthis:\n  Complex_Matrix.adjoint (local.sum_mat A (insert x F)) =\n  local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) (insert x F)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in cpx_sq_mat) sum_mat_hermitian:\n  assumes \"finite I\"\nand \"\\<forall>i\\<in> I. hermitian (A i)\"\nand \"\\<forall>i\\<in> I. A i\\<in> fc_mats\"\nshows \"hermitian (sum_mat A I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hermitian (local.sum_mat A I)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. hermitian (local.sum_mat A I)", "have \"Complex_Matrix.adjoint (sum_mat A I) = sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (local.sum_mat A I) =\n    local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) I", "using assms sum_mat_adjoint[of I]"], ["proof (prove)\nusing this:\n  finite I\n  \\<forall>i\\<in>I. hermitian (A i)\n  \\<forall>i\\<in>I. A i \\<in> fc_mats\n  \\<lbrakk>finite I;\n   \\<And>i. i \\<in> I \\<Longrightarrow> ?A i \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> Complex_Matrix.adjoint (local.sum_mat ?A I) =\n                    local.sum_mat\n                     (\\<lambda>i. Complex_Matrix.adjoint (?A i)) I\n\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (local.sum_mat A I) =\n    local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) I", "by simp"], ["proof (state)\nthis:\n  Complex_Matrix.adjoint (local.sum_mat A I) =\n  local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) I\n\ngoal (1 subgoal):\n 1. hermitian (local.sum_mat A I)", "also"], ["proof (state)\nthis:\n  Complex_Matrix.adjoint (local.sum_mat A I) =\n  local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) I\n\ngoal (1 subgoal):\n 1. hermitian (local.sum_mat A I)", "have \"... = sum_mat A I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) I =\n    local.sum_mat A I", "proof (rule sum_mat_cong, (auto simp add: assms))"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i. i \\<in> I \\<Longrightarrow> Complex_Matrix.adjoint (A i) = A i\n 2. \\<And>i.\n       i \\<in> I \\<Longrightarrow>\n       Complex_Matrix.adjoint (A i) \\<in> fc_mats", "show \"\\<And>i. i \\<in> I \\<Longrightarrow> Complex_Matrix.adjoint (A i) = A i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> I \\<Longrightarrow> Complex_Matrix.adjoint (A i) = A i", "using assms"], ["proof (prove)\nusing this:\n  finite I\n  \\<forall>i\\<in>I. hermitian (A i)\n  \\<forall>i\\<in>I. A i \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> I \\<Longrightarrow> Complex_Matrix.adjoint (A i) = A i", "unfolding hermitian_def"], ["proof (prove)\nusing this:\n  finite I\n  \\<forall>i\\<in>I. Complex_Matrix.adjoint (A i) = A i\n  \\<forall>i\\<in>I. A i \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> I \\<Longrightarrow> Complex_Matrix.adjoint (A i) = A i", "by simp"], ["proof (state)\nthis:\n  ?i2 \\<in> I \\<Longrightarrow> Complex_Matrix.adjoint (A ?i2) = A ?i2\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> I \\<Longrightarrow>\n       Complex_Matrix.adjoint (A i) \\<in> fc_mats", "show \"\\<And>i. i \\<in> I \\<Longrightarrow> Complex_Matrix.adjoint (A i) \\<in> fc_mats\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> I \\<Longrightarrow>\n       Complex_Matrix.adjoint (A i) \\<in> fc_mats", "using assms fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  finite I\n  \\<forall>i\\<in>I. hermitian (A i)\n  \\<forall>i\\<in>I. A i \\<in> fc_mats\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> I \\<Longrightarrow>\n       Complex_Matrix.adjoint (A i) \\<in> fc_mats", "by (simp add: adjoint_dim)"], ["proof (state)\nthis:\n  ?i2 \\<in> I \\<Longrightarrow> Complex_Matrix.adjoint (A ?i2) \\<in> fc_mats\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. Complex_Matrix.adjoint (A i)) I =\n  local.sum_mat A I\n\ngoal (1 subgoal):\n 1. hermitian (local.sum_mat A I)", "finally"], ["proof (chain)\npicking this:\n  Complex_Matrix.adjoint (local.sum_mat A I) = local.sum_mat A I", "show ?thesis"], ["proof (prove)\nusing this:\n  Complex_Matrix.adjoint (local.sum_mat A I) = local.sum_mat A I\n\ngoal (1 subgoal):\n 1. hermitian (local.sum_mat A I)", "unfolding hermitian_def"], ["proof (prove)\nusing this:\n  Complex_Matrix.adjoint (local.sum_mat A I) = local.sum_mat A I\n\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (local.sum_mat A I) = local.sum_mat A I", "."], ["proof (state)\nthis:\n  hermitian (local.sum_mat A I)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in cpx_sq_mat) sum_mat_positive:\nshows \"finite I \\<Longrightarrow> (\\<And>i. i\\<in> I \\<Longrightarrow> Complex_Matrix.positive (A i)) \\<Longrightarrow> \n  (\\<And>i. i \\<in> I \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow> Complex_Matrix.positive (sum_mat A I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I;\n     \\<And>i. i \\<in> I \\<Longrightarrow> Complex_Matrix.positive (A i);\n     \\<And>i. i \\<in> I \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> Complex_Matrix.positive (local.sum_mat A I)", "proof (induct rule: finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i.\n                i \\<in> {} \\<Longrightarrow> Complex_Matrix.positive (A i);\n     \\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> Complex_Matrix.positive (local.sum_mat A {})\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i.\n                    i \\<in> F \\<Longrightarrow>\n                    Complex_Matrix.positive (A i);\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> Complex_Matrix.positive (local.sum_mat A F);\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           Complex_Matrix.positive (A i);\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.positive\n                          (local.sum_mat A (insert x F))", "case empty"], ["proof (state)\nthis:\n  ?i2 \\<in> {} \\<Longrightarrow> Complex_Matrix.positive (A ?i2)\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 \\<in> fc_mats\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i.\n                i \\<in> {} \\<Longrightarrow> Complex_Matrix.positive (A i);\n     \\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n    \\<Longrightarrow> Complex_Matrix.positive (local.sum_mat A {})\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i.\n                    i \\<in> F \\<Longrightarrow>\n                    Complex_Matrix.positive (A i);\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> Complex_Matrix.positive (local.sum_mat A F);\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           Complex_Matrix.positive (A i);\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.positive\n                          (local.sum_mat A (insert x F))", "then"], ["proof (chain)\npicking this:\n  ?i2 \\<in> {} \\<Longrightarrow> Complex_Matrix.positive (A ?i2)\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 \\<in> fc_mats", "show ?case"], ["proof (prove)\nusing this:\n  ?i2 \\<in> {} \\<Longrightarrow> Complex_Matrix.positive (A ?i2)\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. Complex_Matrix.positive (local.sum_mat A {})", "using positive_zero[of dimR]"], ["proof (prove)\nusing this:\n  ?i2 \\<in> {} \\<Longrightarrow> Complex_Matrix.positive (A ?i2)\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  Complex_Matrix.positive (0\\<^sub>m dimR dimR)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.positive (local.sum_mat A {})", "by (metis (no_types) dim_eq sum_mat_empty)"], ["proof (state)\nthis:\n  Complex_Matrix.positive (local.sum_mat A {})\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i.\n                    i \\<in> F \\<Longrightarrow>\n                    Complex_Matrix.positive (A i);\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> Complex_Matrix.positive (local.sum_mat A F);\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           Complex_Matrix.positive (A i);\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.positive\n                          (local.sum_mat A (insert x F))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i.\n                    i \\<in> F \\<Longrightarrow>\n                    Complex_Matrix.positive (A i);\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> Complex_Matrix.positive (local.sum_mat A F);\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           Complex_Matrix.positive (A i);\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.positive\n                          (local.sum_mat A (insert x F))", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i.\n              i \\<in> F \\<Longrightarrow> Complex_Matrix.positive (A i);\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> Complex_Matrix.positive (local.sum_mat A F)\n  ?i2 \\<in> insert x F \\<Longrightarrow> Complex_Matrix.positive (A ?i2)\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i.\n                    i \\<in> F \\<Longrightarrow>\n                    Complex_Matrix.positive (A i);\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> Complex_Matrix.positive (local.sum_mat A F);\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           Complex_Matrix.positive (A i);\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.positive\n                          (local.sum_mat A (insert x F))", "hence \"sum_mat A (insert x F) = A x + (sum_mat A F)\""], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i.\n              i \\<in> F \\<Longrightarrow> Complex_Matrix.positive (A i);\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> Complex_Matrix.positive (local.sum_mat A F)\n  ?i2 \\<in> insert x F \\<Longrightarrow> Complex_Matrix.positive (A ?i2)\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. local.sum_mat A (insert x F) = A x + local.sum_mat A F", "using sum_mat_insert[of A]"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i.\n              i \\<in> F \\<Longrightarrow> Complex_Matrix.positive (A i);\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> Complex_Matrix.positive (local.sum_mat A F)\n  ?i2 \\<in> insert x F \\<Longrightarrow> Complex_Matrix.positive (A ?i2)\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  \\<lbrakk>A ?x \\<in> fc_mats; A ` ?I \\<subseteq> fc_mats; finite ?I;\n   ?x \\<notin> ?I\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A (insert ?x ?I) =\n                    A ?x + local.sum_mat A ?I\n\ngoal (1 subgoal):\n 1. local.sum_mat A (insert x F) = A x + local.sum_mat A F", "by (simp add:  image_subset_iff)"], ["proof (state)\nthis:\n  local.sum_mat A (insert x F) = A x + local.sum_mat A F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i.\n                    i \\<in> F \\<Longrightarrow>\n                    Complex_Matrix.positive (A i);\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> Complex_Matrix.positive (local.sum_mat A F);\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           Complex_Matrix.positive (A i);\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.positive\n                          (local.sum_mat A (insert x F))", "moreover"], ["proof (state)\nthis:\n  local.sum_mat A (insert x F) = A x + local.sum_mat A F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i.\n                    i \\<in> F \\<Longrightarrow>\n                    Complex_Matrix.positive (A i);\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> Complex_Matrix.positive (local.sum_mat A F);\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           Complex_Matrix.positive (A i);\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.positive\n                          (local.sum_mat A (insert x F))", "have \"Complex_Matrix.positive (A x + (sum_mat A F))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.positive (A x + local.sum_mat A F)", "proof (rule positive_add, (auto simp add: insert))"], ["proof (state)\ngoal (2 subgoals):\n 1. A x \\<in> carrier_mat ?n ?n\n 2. local.sum_mat A F \\<in> carrier_mat ?n ?n", "show \"A x \\<in> carrier_mat dimR dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x \\<in> carrier_mat dimR dimR", "using insert fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i.\n              i \\<in> F \\<Longrightarrow> Complex_Matrix.positive (A i);\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> Complex_Matrix.positive (local.sum_mat A F)\n  ?i2 \\<in> insert x F \\<Longrightarrow> Complex_Matrix.positive (A ?i2)\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. A x \\<in> carrier_mat dimR dimR", "by simp"], ["proof (state)\nthis:\n  A x \\<in> carrier_mat dimR dimR\n\ngoal (1 subgoal):\n 1. local.sum_mat A F \\<in> carrier_mat dimR dimR", "show \"sum_mat A F \\<in> carrier_mat dimR dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat A F \\<in> carrier_mat dimR dimR", "using insert sum_mat_carrier dim_eq"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i.\n              i \\<in> F \\<Longrightarrow> Complex_Matrix.positive (A i);\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> Complex_Matrix.positive (local.sum_mat A F)\n  ?i2 \\<in> insert x F \\<Longrightarrow> Complex_Matrix.positive (A ?i2)\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  (\\<And>i.\n      i \\<in> ?I \\<Longrightarrow> ?A i \\<in> fc_mats) \\<Longrightarrow>\n  local.sum_mat ?A ?I \\<in> carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. local.sum_mat A F \\<in> carrier_mat dimR dimR", "by (metis insertCI)"], ["proof (state)\nthis:\n  local.sum_mat A F \\<in> carrier_mat dimR dimR\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Complex_Matrix.positive (A x + local.sum_mat A F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i.\n                    i \\<in> F \\<Longrightarrow>\n                    Complex_Matrix.positive (A i);\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n        \\<Longrightarrow> Complex_Matrix.positive (local.sum_mat A F);\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           Complex_Matrix.positive (A i);\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.positive\n                          (local.sum_mat A (insert x F))", "ultimately"], ["proof (chain)\npicking this:\n  local.sum_mat A (insert x F) = A x + local.sum_mat A F\n  Complex_Matrix.positive (A x + local.sum_mat A F)", "show \"Complex_Matrix.positive (sum_mat A (insert x F))\""], ["proof (prove)\nusing this:\n  local.sum_mat A (insert x F) = A x + local.sum_mat A F\n  Complex_Matrix.positive (A x + local.sum_mat A F)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.positive (local.sum_mat A (insert x F))", "by simp"], ["proof (state)\nthis:\n  Complex_Matrix.positive (local.sum_mat A (insert x F))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in cpx_sq_mat) sum_mat_left_ortho_zero:\n  shows \"finite I \\<Longrightarrow> \n    (\\<And>i. i\\<in> I \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow> (B \\<in> fc_mats) \\<Longrightarrow>\n    (\\<And> i. i\\<in> I \\<Longrightarrow> A i * B = (0\\<^sub>m dimR dimR)) \\<Longrightarrow> \n    (sum_mat A I) * B = 0\\<^sub>m dimR dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I;\n     \\<And>i. i \\<in> I \\<Longrightarrow> A i \\<in> fc_mats;\n     B \\<in> fc_mats;\n     \\<And>i.\n        i \\<in> I \\<Longrightarrow> A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat A I * B = 0\\<^sub>m dimR dimR", "proof (induct rule:finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats;\n     B \\<in> fc_mats;\n     \\<And>i.\n        i \\<in> {} \\<Longrightarrow> A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat A {} * B = 0\\<^sub>m dimR dimR\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats;\n         \\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F * B = 0\\<^sub>m dimR dimR;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) * B =\n                         0\\<^sub>m dimR dimR", "case empty"], ["proof (state)\nthis:\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  B \\<in> fc_mats\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 * B = 0\\<^sub>m dimR dimR\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats;\n     B \\<in> fc_mats;\n     \\<And>i.\n        i \\<in> {} \\<Longrightarrow> A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat A {} * B = 0\\<^sub>m dimR dimR\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats;\n         \\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F * B = 0\\<^sub>m dimR dimR;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) * B =\n                         0\\<^sub>m dimR dimR", "then"], ["proof (chain)\npicking this:\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  B \\<in> fc_mats\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 * B = 0\\<^sub>m dimR dimR", "show ?case"], ["proof (prove)\nusing this:\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  B \\<in> fc_mats\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 * B = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. local.sum_mat A {} * B = 0\\<^sub>m dimR dimR", "using dim_eq"], ["proof (prove)\nusing this:\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  B \\<in> fc_mats\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 * B = 0\\<^sub>m dimR dimR\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. local.sum_mat A {} * B = 0\\<^sub>m dimR dimR", "by (metis  finite.intros(1) sum_mat_empty mult_sum_mat_distrib_right)"], ["proof (state)\nthis:\n  local.sum_mat A {} * B = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats;\n         \\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F * B = 0\\<^sub>m dimR dimR;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) * B =\n                         0\\<^sub>m dimR dimR", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats;\n         \\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F * B = 0\\<^sub>m dimR dimR;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) * B =\n                         0\\<^sub>m dimR dimR", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   B \\<in> fc_mats;\n   \\<And>i.\n      i \\<in> F \\<Longrightarrow> A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F * B = 0\\<^sub>m dimR dimR\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  B \\<in> fc_mats\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 * B = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats;\n         \\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F * B = 0\\<^sub>m dimR dimR;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) * B =\n                         0\\<^sub>m dimR dimR", "have \"(sum_mat A (insert x F)) * B = \n    (A x + sum_mat A F) * B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat A (insert x F) * B = (A x + local.sum_mat A F) * B", "using insert sum_mat_insert[of A]"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   B \\<in> fc_mats;\n   \\<And>i.\n      i \\<in> F \\<Longrightarrow> A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F * B = 0\\<^sub>m dimR dimR\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  B \\<in> fc_mats\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 * B = 0\\<^sub>m dimR dimR\n  \\<lbrakk>A ?x \\<in> fc_mats; A ` ?I \\<subseteq> fc_mats; finite ?I;\n   ?x \\<notin> ?I\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A (insert ?x ?I) =\n                    A ?x + local.sum_mat A ?I\n\ngoal (1 subgoal):\n 1. local.sum_mat A (insert x F) * B = (A x + local.sum_mat A F) * B", "by (simp add: image_subset_iff)"], ["proof (state)\nthis:\n  local.sum_mat A (insert x F) * B = (A x + local.sum_mat A F) * B\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats;\n         \\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F * B = 0\\<^sub>m dimR dimR;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) * B =\n                         0\\<^sub>m dimR dimR", "also"], ["proof (state)\nthis:\n  local.sum_mat A (insert x F) * B = (A x + local.sum_mat A F) * B\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats;\n         \\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F * B = 0\\<^sub>m dimR dimR;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) * B =\n                         0\\<^sub>m dimR dimR", "have \"... = A x * B + sum_mat A F * B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A x + local.sum_mat A F) * B = A x * B + local.sum_mat A F * B", "proof (rule add_mult_distrib_mat)"], ["proof (state)\ngoal (3 subgoals):\n 1. A x \\<in> carrier_mat ?nr ?n\n 2. local.sum_mat A F \\<in> carrier_mat ?nr ?n\n 3. B \\<in> carrier_mat ?n ?nc", "show \"A x \\<in> carrier_mat dimR dimC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x \\<in> carrier_mat dimR dimC", "using insert fc_mats_carrier"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   B \\<in> fc_mats;\n   \\<And>i.\n      i \\<in> F \\<Longrightarrow> A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F * B = 0\\<^sub>m dimR dimR\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  B \\<in> fc_mats\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 * B = 0\\<^sub>m dimR dimR\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. A x \\<in> carrier_mat dimR dimC", "by simp"], ["proof (state)\nthis:\n  A x \\<in> carrier_mat dimR dimC\n\ngoal (2 subgoals):\n 1. local.sum_mat A F \\<in> carrier_mat dimR dimC\n 2. B \\<in> carrier_mat dimC ?nc", "show \"sum_mat A F \\<in> carrier_mat dimR dimC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat A F \\<in> carrier_mat dimR dimC", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   B \\<in> fc_mats;\n   \\<And>i.\n      i \\<in> F \\<Longrightarrow> A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F * B = 0\\<^sub>m dimR dimR\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  B \\<in> fc_mats\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 * B = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. local.sum_mat A F \\<in> carrier_mat dimR dimC", "by (metis insert_iff local.fc_mats_carrier sum_mat_carrier)"], ["proof (state)\nthis:\n  local.sum_mat A F \\<in> carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. B \\<in> carrier_mat dimC ?nc", "show \"B \\<in> carrier_mat dimC dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<in> carrier_mat dimC dimR", "using insert fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   B \\<in> fc_mats;\n   \\<And>i.\n      i \\<in> F \\<Longrightarrow> A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F * B = 0\\<^sub>m dimR dimR\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  B \\<in> fc_mats\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 * B = 0\\<^sub>m dimR dimR\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. B \\<in> carrier_mat dimC dimR", "by simp"], ["proof (state)\nthis:\n  B \\<in> carrier_mat dimC dimR\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (A x + local.sum_mat A F) * B = A x * B + local.sum_mat A F * B\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats;\n         \\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F * B = 0\\<^sub>m dimR dimR;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) * B =\n                         0\\<^sub>m dimR dimR", "also"], ["proof (state)\nthis:\n  (A x + local.sum_mat A F) * B = A x * B + local.sum_mat A F * B\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats;\n         \\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F * B = 0\\<^sub>m dimR dimR;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) * B =\n                         0\\<^sub>m dimR dimR", "have \"... = A x * B + (0\\<^sub>m dimR dimR)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x * B + local.sum_mat A F * B = A x * B + 0\\<^sub>m dimR dimR", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   B \\<in> fc_mats;\n   \\<And>i.\n      i \\<in> F \\<Longrightarrow> A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F * B = 0\\<^sub>m dimR dimR\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  B \\<in> fc_mats\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 * B = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. A x * B + local.sum_mat A F * B = A x * B + 0\\<^sub>m dimR dimR", "by simp"], ["proof (state)\nthis:\n  A x * B + local.sum_mat A F * B = A x * B + 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats;\n         \\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F * B = 0\\<^sub>m dimR dimR;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) * B =\n                         0\\<^sub>m dimR dimR", "also"], ["proof (state)\nthis:\n  A x * B + local.sum_mat A F * B = A x * B + 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats;\n         \\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F * B = 0\\<^sub>m dimR dimR;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) * B =\n                         0\\<^sub>m dimR dimR", "have \"... = 0\\<^sub>m dimR dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x * B + 0\\<^sub>m dimR dimR = 0\\<^sub>m dimR dimR", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   B \\<in> fc_mats;\n   \\<And>i.\n      i \\<in> F \\<Longrightarrow> A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F * B = 0\\<^sub>m dimR dimR\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  B \\<in> fc_mats\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 * B = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. A x * B + 0\\<^sub>m dimR dimR = 0\\<^sub>m dimR dimR", "by simp"], ["proof (state)\nthis:\n  A x * B + 0\\<^sub>m dimR dimR = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats;\n         \\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F * B = 0\\<^sub>m dimR dimR;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           A i * B = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) * B =\n                         0\\<^sub>m dimR dimR", "finally"], ["proof (chain)\npicking this:\n  local.sum_mat A (insert x F) * B = 0\\<^sub>m dimR dimR", "show ?case"], ["proof (prove)\nusing this:\n  local.sum_mat A (insert x F) * B = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. local.sum_mat A (insert x F) * B = 0\\<^sub>m dimR dimR", "."], ["proof (state)\nthis:\n  local.sum_mat A (insert x F) * B = 0\\<^sub>m dimR dimR\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in cpx_sq_mat) sum_mat_right_ortho_zero:\n  shows \"finite I \\<Longrightarrow> \n    (\\<And>i. i\\<in> I \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow> (B \\<in> fc_mats) \\<Longrightarrow>\n    (\\<And> i. i\\<in> I \\<Longrightarrow> B * A i = (0\\<^sub>m dimR dimR)) \\<Longrightarrow> \n    B * (sum_mat A I)  = 0\\<^sub>m dimR dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I;\n     \\<And>i. i \\<in> I \\<Longrightarrow> A i \\<in> fc_mats;\n     B \\<in> fc_mats;\n     \\<And>i.\n        i \\<in> I \\<Longrightarrow> B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n    \\<Longrightarrow> B * local.sum_mat A I = 0\\<^sub>m dimR dimR", "proof (induct rule:finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats;\n     B \\<in> fc_mats;\n     \\<And>i.\n        i \\<in> {} \\<Longrightarrow> B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n    \\<Longrightarrow> B * local.sum_mat A {} = 0\\<^sub>m dimR dimR\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats;\n         \\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> B * local.sum_mat A F = 0\\<^sub>m dimR dimR;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> B * local.sum_mat A (insert x F) =\n                         0\\<^sub>m dimR dimR", "case empty"], ["proof (state)\nthis:\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  B \\<in> fc_mats\n  ?i2 \\<in> {} \\<Longrightarrow> B * A ?i2 = 0\\<^sub>m dimR dimR\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats;\n     B \\<in> fc_mats;\n     \\<And>i.\n        i \\<in> {} \\<Longrightarrow> B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n    \\<Longrightarrow> B * local.sum_mat A {} = 0\\<^sub>m dimR dimR\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats;\n         \\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> B * local.sum_mat A F = 0\\<^sub>m dimR dimR;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> B * local.sum_mat A (insert x F) =\n                         0\\<^sub>m dimR dimR", "then"], ["proof (chain)\npicking this:\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  B \\<in> fc_mats\n  ?i2 \\<in> {} \\<Longrightarrow> B * A ?i2 = 0\\<^sub>m dimR dimR", "show ?case"], ["proof (prove)\nusing this:\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  B \\<in> fc_mats\n  ?i2 \\<in> {} \\<Longrightarrow> B * A ?i2 = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. B * local.sum_mat A {} = 0\\<^sub>m dimR dimR", "using dim_eq"], ["proof (prove)\nusing this:\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  B \\<in> fc_mats\n  ?i2 \\<in> {} \\<Longrightarrow> B * A ?i2 = 0\\<^sub>m dimR dimR\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. B * local.sum_mat A {} = 0\\<^sub>m dimR dimR", "by (metis  finite.intros(1) sum_mat_empty mult_sum_mat_distrib_left)"], ["proof (state)\nthis:\n  B * local.sum_mat A {} = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats;\n         \\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> B * local.sum_mat A F = 0\\<^sub>m dimR dimR;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> B * local.sum_mat A (insert x F) =\n                         0\\<^sub>m dimR dimR", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats;\n         \\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> B * local.sum_mat A F = 0\\<^sub>m dimR dimR;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> B * local.sum_mat A (insert x F) =\n                         0\\<^sub>m dimR dimR", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   B \\<in> fc_mats;\n   \\<And>i.\n      i \\<in> F \\<Longrightarrow> B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> B * local.sum_mat A F = 0\\<^sub>m dimR dimR\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  B \\<in> fc_mats\n  ?i2 \\<in> insert x F \\<Longrightarrow> B * A ?i2 = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats;\n         \\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> B * local.sum_mat A F = 0\\<^sub>m dimR dimR;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> B * local.sum_mat A (insert x F) =\n                         0\\<^sub>m dimR dimR", "have \"B * (sum_mat A (insert x F)) = \n    B * (A x + sum_mat A F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B * local.sum_mat A (insert x F) = B * (A x + local.sum_mat A F)", "using insert sum_mat_insert[of A]"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   B \\<in> fc_mats;\n   \\<And>i.\n      i \\<in> F \\<Longrightarrow> B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> B * local.sum_mat A F = 0\\<^sub>m dimR dimR\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  B \\<in> fc_mats\n  ?i2 \\<in> insert x F \\<Longrightarrow> B * A ?i2 = 0\\<^sub>m dimR dimR\n  \\<lbrakk>A ?x \\<in> fc_mats; A ` ?I \\<subseteq> fc_mats; finite ?I;\n   ?x \\<notin> ?I\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A (insert ?x ?I) =\n                    A ?x + local.sum_mat A ?I\n\ngoal (1 subgoal):\n 1. B * local.sum_mat A (insert x F) = B * (A x + local.sum_mat A F)", "by (simp add: image_subset_iff)"], ["proof (state)\nthis:\n  B * local.sum_mat A (insert x F) = B * (A x + local.sum_mat A F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats;\n         \\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> B * local.sum_mat A F = 0\\<^sub>m dimR dimR;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> B * local.sum_mat A (insert x F) =\n                         0\\<^sub>m dimR dimR", "also"], ["proof (state)\nthis:\n  B * local.sum_mat A (insert x F) = B * (A x + local.sum_mat A F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats;\n         \\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> B * local.sum_mat A F = 0\\<^sub>m dimR dimR;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> B * local.sum_mat A (insert x F) =\n                         0\\<^sub>m dimR dimR", "have \"... = B * A x + B * sum_mat A F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B * (A x + local.sum_mat A F) = B * A x + B * local.sum_mat A F", "proof (rule mult_add_distrib_mat)"], ["proof (state)\ngoal (3 subgoals):\n 1. B \\<in> carrier_mat ?nr ?n\n 2. A x \\<in> carrier_mat ?n ?nc\n 3. local.sum_mat A F \\<in> carrier_mat ?n ?nc", "show \"A x \\<in> carrier_mat dimR dimC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x \\<in> carrier_mat dimR dimC", "using insert fc_mats_carrier"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   B \\<in> fc_mats;\n   \\<And>i.\n      i \\<in> F \\<Longrightarrow> B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> B * local.sum_mat A F = 0\\<^sub>m dimR dimR\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  B \\<in> fc_mats\n  ?i2 \\<in> insert x F \\<Longrightarrow> B * A ?i2 = 0\\<^sub>m dimR dimR\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. A x \\<in> carrier_mat dimR dimC", "by simp"], ["proof (state)\nthis:\n  A x \\<in> carrier_mat dimR dimC\n\ngoal (2 subgoals):\n 1. B \\<in> carrier_mat ?nr dimR\n 2. local.sum_mat A F \\<in> carrier_mat dimR dimC", "show \"sum_mat A F \\<in> carrier_mat dimR dimC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat A F \\<in> carrier_mat dimR dimC", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   B \\<in> fc_mats;\n   \\<And>i.\n      i \\<in> F \\<Longrightarrow> B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> B * local.sum_mat A F = 0\\<^sub>m dimR dimR\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  B \\<in> fc_mats\n  ?i2 \\<in> insert x F \\<Longrightarrow> B * A ?i2 = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. local.sum_mat A F \\<in> carrier_mat dimR dimC", "by (metis insert_iff local.fc_mats_carrier sum_mat_carrier)"], ["proof (state)\nthis:\n  local.sum_mat A F \\<in> carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. B \\<in> carrier_mat ?nr dimR", "show \"B \\<in> carrier_mat dimC dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<in> carrier_mat dimC dimR", "using insert fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   B \\<in> fc_mats;\n   \\<And>i.\n      i \\<in> F \\<Longrightarrow> B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> B * local.sum_mat A F = 0\\<^sub>m dimR dimR\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  B \\<in> fc_mats\n  ?i2 \\<in> insert x F \\<Longrightarrow> B * A ?i2 = 0\\<^sub>m dimR dimR\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. B \\<in> carrier_mat dimC dimR", "by simp"], ["proof (state)\nthis:\n  B \\<in> carrier_mat dimC dimR\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  B * (A x + local.sum_mat A F) = B * A x + B * local.sum_mat A F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats;\n         \\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> B * local.sum_mat A F = 0\\<^sub>m dimR dimR;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> B * local.sum_mat A (insert x F) =\n                         0\\<^sub>m dimR dimR", "also"], ["proof (state)\nthis:\n  B * (A x + local.sum_mat A F) = B * A x + B * local.sum_mat A F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats;\n         \\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> B * local.sum_mat A F = 0\\<^sub>m dimR dimR;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> B * local.sum_mat A (insert x F) =\n                         0\\<^sub>m dimR dimR", "have \"... = B * A x + (0\\<^sub>m dimR dimR)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B * A x + B * local.sum_mat A F = B * A x + 0\\<^sub>m dimR dimR", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   B \\<in> fc_mats;\n   \\<And>i.\n      i \\<in> F \\<Longrightarrow> B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> B * local.sum_mat A F = 0\\<^sub>m dimR dimR\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  B \\<in> fc_mats\n  ?i2 \\<in> insert x F \\<Longrightarrow> B * A ?i2 = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. B * A x + B * local.sum_mat A F = B * A x + 0\\<^sub>m dimR dimR", "by simp"], ["proof (state)\nthis:\n  B * A x + B * local.sum_mat A F = B * A x + 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats;\n         \\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> B * local.sum_mat A F = 0\\<^sub>m dimR dimR;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> B * local.sum_mat A (insert x F) =\n                         0\\<^sub>m dimR dimR", "also"], ["proof (state)\nthis:\n  B * A x + B * local.sum_mat A F = B * A x + 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats;\n         \\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> B * local.sum_mat A F = 0\\<^sub>m dimR dimR;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> B * local.sum_mat A (insert x F) =\n                         0\\<^sub>m dimR dimR", "have \"... = 0\\<^sub>m dimR dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B * A x + 0\\<^sub>m dimR dimR = 0\\<^sub>m dimR dimR", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   B \\<in> fc_mats;\n   \\<And>i.\n      i \\<in> F \\<Longrightarrow> B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> B * local.sum_mat A F = 0\\<^sub>m dimR dimR\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  B \\<in> fc_mats\n  ?i2 \\<in> insert x F \\<Longrightarrow> B * A ?i2 = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. B * A x + 0\\<^sub>m dimR dimR = 0\\<^sub>m dimR dimR", "by simp"], ["proof (state)\nthis:\n  B * A x + 0\\<^sub>m dimR dimR = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         B \\<in> fc_mats;\n         \\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> B * local.sum_mat A F = 0\\<^sub>m dimR dimR;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        B \\<in> fc_mats;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           B * A i = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> B * local.sum_mat A (insert x F) =\n                         0\\<^sub>m dimR dimR", "finally"], ["proof (chain)\npicking this:\n  B * local.sum_mat A (insert x F) = 0\\<^sub>m dimR dimR", "show ?case"], ["proof (prove)\nusing this:\n  B * local.sum_mat A (insert x F) = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. B * local.sum_mat A (insert x F) = 0\\<^sub>m dimR dimR", "."], ["proof (state)\nthis:\n  B * local.sum_mat A (insert x F) = 0\\<^sub>m dimR dimR\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in cpx_sq_mat) sum_mat_ortho_square:\n  shows \"finite I \\<Longrightarrow> (\\<And>i. i\\<in> I \\<Longrightarrow> ((A i)::complex Matrix.mat) * (A i) = A i) \\<Longrightarrow> \n    (\\<And>i. i\\<in> I \\<Longrightarrow> A i \\<in> fc_mats) \\<Longrightarrow>\n    (\\<And> i j. i\\<in> I \\<Longrightarrow> j\\<in> I \\<Longrightarrow> i\\<noteq> j \\<Longrightarrow> A i * (A j) = (0\\<^sub>m dimR dimR)) \\<Longrightarrow> \n    (sum_mat A I) * (sum_mat A I) = (sum_mat A I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; \\<And>i. i \\<in> I \\<Longrightarrow> A i * A i = A i;\n     \\<And>i. i \\<in> I \\<Longrightarrow> A i \\<in> fc_mats;\n     \\<And>i j.\n        \\<lbrakk>i \\<in> I; j \\<in> I; i \\<noteq> j\\<rbrakk>\n        \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat A I * local.sum_mat A I =\n                      local.sum_mat A I", "proof (induct rule:finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i. i \\<in> {} \\<Longrightarrow> A i * A i = A i;\n     \\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats;\n     \\<And>i j.\n        \\<lbrakk>i \\<in> {}; j \\<in> {}; i \\<noteq> j\\<rbrakk>\n        \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat A {} * local.sum_mat A {} =\n                      local.sum_mat A {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         \\<And>i j.\n            \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n            \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                          local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i * A i = A i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        \\<And>i j.\n           \\<lbrakk>i \\<in> insert x F; j \\<in> insert x F;\n            i \\<noteq> j\\<rbrakk>\n           \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) *\n                         local.sum_mat A (insert x F) =\n                         local.sum_mat A (insert x F)", "case empty"], ["proof (state)\nthis:\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 * A ?i2 = A ?i2\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  \\<lbrakk>?i2 \\<in> {}; ?j2 \\<in> {}; ?i2 \\<noteq> ?j2\\<rbrakk>\n  \\<Longrightarrow> A ?i2 * A ?j2 = 0\\<^sub>m dimR dimR\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i. i \\<in> {} \\<Longrightarrow> A i * A i = A i;\n     \\<And>i. i \\<in> {} \\<Longrightarrow> A i \\<in> fc_mats;\n     \\<And>i j.\n        \\<lbrakk>i \\<in> {}; j \\<in> {}; i \\<noteq> j\\<rbrakk>\n        \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n    \\<Longrightarrow> local.sum_mat A {} * local.sum_mat A {} =\n                      local.sum_mat A {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         \\<And>i j.\n            \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n            \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                          local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i * A i = A i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        \\<And>i j.\n           \\<lbrakk>i \\<in> insert x F; j \\<in> insert x F;\n            i \\<noteq> j\\<rbrakk>\n           \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) *\n                         local.sum_mat A (insert x F) =\n                         local.sum_mat A (insert x F)", "then"], ["proof (chain)\npicking this:\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 * A ?i2 = A ?i2\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  \\<lbrakk>?i2 \\<in> {}; ?j2 \\<in> {}; ?i2 \\<noteq> ?j2\\<rbrakk>\n  \\<Longrightarrow> A ?i2 * A ?j2 = 0\\<^sub>m dimR dimR", "show ?case"], ["proof (prove)\nusing this:\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 * A ?i2 = A ?i2\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  \\<lbrakk>?i2 \\<in> {}; ?j2 \\<in> {}; ?i2 \\<noteq> ?j2\\<rbrakk>\n  \\<Longrightarrow> A ?i2 * A ?j2 = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. local.sum_mat A {} * local.sum_mat A {} = local.sum_mat A {}", "using dim_eq"], ["proof (prove)\nusing this:\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 * A ?i2 = A ?i2\n  ?i2 \\<in> {} \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  \\<lbrakk>?i2 \\<in> {}; ?j2 \\<in> {}; ?i2 \\<noteq> ?j2\\<rbrakk>\n  \\<Longrightarrow> A ?i2 * A ?j2 = 0\\<^sub>m dimR dimR\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. local.sum_mat A {} * local.sum_mat A {} = local.sum_mat A {}", "by (metis fc_mats_carrier right_mult_zero_mat sum_mat_empty zero_mem)"], ["proof (state)\nthis:\n  local.sum_mat A {} * local.sum_mat A {} = local.sum_mat A {}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         \\<And>i j.\n            \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n            \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                          local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i * A i = A i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        \\<And>i j.\n           \\<lbrakk>i \\<in> insert x F; j \\<in> insert x F;\n            i \\<noteq> j\\<rbrakk>\n           \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) *\n                         local.sum_mat A (insert x F) =\n                         local.sum_mat A (insert x F)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         \\<And>i j.\n            \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n            \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                          local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i * A i = A i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        \\<And>i j.\n           \\<lbrakk>i \\<in> insert x F; j \\<in> insert x F;\n            i \\<noteq> j\\<rbrakk>\n           \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) *\n                         local.sum_mat A (insert x F) =\n                         local.sum_mat A (insert x F)", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   \\<And>i j.\n      \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n      \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                    local.sum_mat A F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 * A ?i2 = A ?i2\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  \\<lbrakk>?i2 \\<in> insert x F; ?j2 \\<in> insert x F;\n   ?i2 \\<noteq> ?j2\\<rbrakk>\n  \\<Longrightarrow> A ?i2 * A ?j2 = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         \\<And>i j.\n            \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n            \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                          local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i * A i = A i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        \\<And>i j.\n           \\<lbrakk>i \\<in> insert x F; j \\<in> insert x F;\n            i \\<noteq> j\\<rbrakk>\n           \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) *\n                         local.sum_mat A (insert x F) =\n                         local.sum_mat A (insert x F)", "have \"(sum_mat A (insert x F)) * (sum_mat A (insert x F)) = \n    (A x + sum_mat A F) * (A x + sum_mat A F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat A (insert x F) * local.sum_mat A (insert x F) =\n    (A x + local.sum_mat A F) * (A x + local.sum_mat A F)", "using insert sum_mat_insert[of A]"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   \\<And>i j.\n      \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n      \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                    local.sum_mat A F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 * A ?i2 = A ?i2\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  \\<lbrakk>?i2 \\<in> insert x F; ?j2 \\<in> insert x F;\n   ?i2 \\<noteq> ?j2\\<rbrakk>\n  \\<Longrightarrow> A ?i2 * A ?j2 = 0\\<^sub>m dimR dimR\n  \\<lbrakk>A ?x \\<in> fc_mats; A ` ?I \\<subseteq> fc_mats; finite ?I;\n   ?x \\<notin> ?I\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A (insert ?x ?I) =\n                    A ?x + local.sum_mat A ?I\n\ngoal (1 subgoal):\n 1. local.sum_mat A (insert x F) * local.sum_mat A (insert x F) =\n    (A x + local.sum_mat A F) * (A x + local.sum_mat A F)", "by (simp add: \\<open>\\<And>i. i \\<in> insert x F \\<Longrightarrow> A i * A i = A i\\<close> image_subset_iff)"], ["proof (state)\nthis:\n  local.sum_mat A (insert x F) * local.sum_mat A (insert x F) =\n  (A x + local.sum_mat A F) * (A x + local.sum_mat A F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         \\<And>i j.\n            \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n            \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                          local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i * A i = A i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        \\<And>i j.\n           \\<lbrakk>i \\<in> insert x F; j \\<in> insert x F;\n            i \\<noteq> j\\<rbrakk>\n           \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) *\n                         local.sum_mat A (insert x F) =\n                         local.sum_mat A (insert x F)", "also"], ["proof (state)\nthis:\n  local.sum_mat A (insert x F) * local.sum_mat A (insert x F) =\n  (A x + local.sum_mat A F) * (A x + local.sum_mat A F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         \\<And>i j.\n            \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n            \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                          local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i * A i = A i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        \\<And>i j.\n           \\<lbrakk>i \\<in> insert x F; j \\<in> insert x F;\n            i \\<noteq> j\\<rbrakk>\n           \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) *\n                         local.sum_mat A (insert x F) =\n                         local.sum_mat A (insert x F)", "have \"... = A x * (A x + sum_mat A F) + sum_mat A F * (A x + sum_mat A F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A x + local.sum_mat A F) * (A x + local.sum_mat A F) =\n    A x * (A x + local.sum_mat A F) +\n    local.sum_mat A F * (A x + local.sum_mat A F)", "proof (rule add_mult_distrib_mat)"], ["proof (state)\ngoal (3 subgoals):\n 1. A x \\<in> carrier_mat ?nr ?n\n 2. local.sum_mat A F \\<in> carrier_mat ?nr ?n\n 3. A x + local.sum_mat A F \\<in> carrier_mat ?n ?nc", "show \"A x \\<in> carrier_mat dimR dimC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x \\<in> carrier_mat dimR dimC", "using insert fc_mats_carrier"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   \\<And>i j.\n      \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n      \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                    local.sum_mat A F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 * A ?i2 = A ?i2\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  \\<lbrakk>?i2 \\<in> insert x F; ?j2 \\<in> insert x F;\n   ?i2 \\<noteq> ?j2\\<rbrakk>\n  \\<Longrightarrow> A ?i2 * A ?j2 = 0\\<^sub>m dimR dimR\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. A x \\<in> carrier_mat dimR dimC", "by simp"], ["proof (state)\nthis:\n  A x \\<in> carrier_mat dimR dimC\n\ngoal (2 subgoals):\n 1. local.sum_mat A F \\<in> carrier_mat dimR dimC\n 2. A x + local.sum_mat A F \\<in> carrier_mat dimC ?nc", "show \"sum_mat A F \\<in> carrier_mat dimR dimC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat A F \\<in> carrier_mat dimR dimC", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   \\<And>i j.\n      \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n      \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                    local.sum_mat A F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 * A ?i2 = A ?i2\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  \\<lbrakk>?i2 \\<in> insert x F; ?j2 \\<in> insert x F;\n   ?i2 \\<noteq> ?j2\\<rbrakk>\n  \\<Longrightarrow> A ?i2 * A ?j2 = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. local.sum_mat A F \\<in> carrier_mat dimR dimC", "by (metis insert_iff local.fc_mats_carrier sum_mat_carrier)"], ["proof (state)\nthis:\n  local.sum_mat A F \\<in> carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. A x + local.sum_mat A F \\<in> carrier_mat dimC ?nc", "thus \"A x + sum_mat A F \\<in> carrier_mat dimC dimC\""], ["proof (prove)\nusing this:\n  local.sum_mat A F \\<in> carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. A x + local.sum_mat A F \\<in> carrier_mat dimC dimC", "using insert dim_eq"], ["proof (prove)\nusing this:\n  local.sum_mat A F \\<in> carrier_mat dimR dimC\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   \\<And>i j.\n      \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n      \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                    local.sum_mat A F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 * A ?i2 = A ?i2\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  \\<lbrakk>?i2 \\<in> insert x F; ?j2 \\<in> insert x F;\n   ?i2 \\<noteq> ?j2\\<rbrakk>\n  \\<Longrightarrow> A ?i2 * A ?j2 = 0\\<^sub>m dimR dimR\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. A x + local.sum_mat A F \\<in> carrier_mat dimC dimC", "by simp"], ["proof (state)\nthis:\n  A x + local.sum_mat A F \\<in> carrier_mat dimC dimC\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (A x + local.sum_mat A F) * (A x + local.sum_mat A F) =\n  A x * (A x + local.sum_mat A F) +\n  local.sum_mat A F * (A x + local.sum_mat A F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         \\<And>i j.\n            \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n            \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                          local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i * A i = A i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        \\<And>i j.\n           \\<lbrakk>i \\<in> insert x F; j \\<in> insert x F;\n            i \\<noteq> j\\<rbrakk>\n           \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) *\n                         local.sum_mat A (insert x F) =\n                         local.sum_mat A (insert x F)", "also"], ["proof (state)\nthis:\n  (A x + local.sum_mat A F) * (A x + local.sum_mat A F) =\n  A x * (A x + local.sum_mat A F) +\n  local.sum_mat A F * (A x + local.sum_mat A F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         \\<And>i j.\n            \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n            \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                          local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i * A i = A i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        \\<And>i j.\n           \\<lbrakk>i \\<in> insert x F; j \\<in> insert x F;\n            i \\<noteq> j\\<rbrakk>\n           \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) *\n                         local.sum_mat A (insert x F) =\n                         local.sum_mat A (insert x F)", "have \"... = A x * A x + A x * (sum_mat A F) + sum_mat A F * (A x + sum_mat A F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x * (A x + local.sum_mat A F) +\n    local.sum_mat A F * (A x + local.sum_mat A F) =\n    A x * A x + A x * local.sum_mat A F +\n    local.sum_mat A F * (A x + local.sum_mat A F)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A x * (A x + local.sum_mat A F) +\n    local.sum_mat A F * (A x + local.sum_mat A F) =\n    A x * A x + A x * local.sum_mat A F +\n    local.sum_mat A F * (A x + local.sum_mat A F)", "have \"A x * (A x + sum_mat A F) = A x * A x + A x * (sum_mat A F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x * (A x + local.sum_mat A F) = A x * A x + A x * local.sum_mat A F", "using dim_eq insert.prems(2) mult_add_distrib_right sum_mat_carrier"], ["proof (prove)\nusing this:\n  dimR = dimC\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  \\<lbrakk>?A \\<in> fc_mats; ?B \\<in> fc_mats; ?C \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> ?A * (?B + ?C) = ?A * ?B + ?A * ?C\n  (\\<And>i.\n      i \\<in> ?I \\<Longrightarrow> ?A i \\<in> fc_mats) \\<Longrightarrow>\n  local.sum_mat ?A ?I \\<in> carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. A x * (A x + local.sum_mat A F) = A x * A x + A x * local.sum_mat A F", "by (metis fc_mats_carrier insertI1 subsetD subset_insertI)"], ["proof (state)\nthis:\n  A x * (A x + local.sum_mat A F) = A x * A x + A x * local.sum_mat A F\n\ngoal (1 subgoal):\n 1. A x * (A x + local.sum_mat A F) +\n    local.sum_mat A F * (A x + local.sum_mat A F) =\n    A x * A x + A x * local.sum_mat A F +\n    local.sum_mat A F * (A x + local.sum_mat A F)", "thus ?thesis"], ["proof (prove)\nusing this:\n  A x * (A x + local.sum_mat A F) = A x * A x + A x * local.sum_mat A F\n\ngoal (1 subgoal):\n 1. A x * (A x + local.sum_mat A F) +\n    local.sum_mat A F * (A x + local.sum_mat A F) =\n    A x * A x + A x * local.sum_mat A F +\n    local.sum_mat A F * (A x + local.sum_mat A F)", "by simp"], ["proof (state)\nthis:\n  A x * (A x + local.sum_mat A F) +\n  local.sum_mat A F * (A x + local.sum_mat A F) =\n  A x * A x + A x * local.sum_mat A F +\n  local.sum_mat A F * (A x + local.sum_mat A F)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A x * (A x + local.sum_mat A F) +\n  local.sum_mat A F * (A x + local.sum_mat A F) =\n  A x * A x + A x * local.sum_mat A F +\n  local.sum_mat A F * (A x + local.sum_mat A F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         \\<And>i j.\n            \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n            \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                          local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i * A i = A i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        \\<And>i j.\n           \\<lbrakk>i \\<in> insert x F; j \\<in> insert x F;\n            i \\<noteq> j\\<rbrakk>\n           \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) *\n                         local.sum_mat A (insert x F) =\n                         local.sum_mat A (insert x F)", "also"], ["proof (state)\nthis:\n  A x * (A x + local.sum_mat A F) +\n  local.sum_mat A F * (A x + local.sum_mat A F) =\n  A x * A x + A x * local.sum_mat A F +\n  local.sum_mat A F * (A x + local.sum_mat A F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         \\<And>i j.\n            \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n            \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                          local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i * A i = A i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        \\<And>i j.\n           \\<lbrakk>i \\<in> insert x F; j \\<in> insert x F;\n            i \\<noteq> j\\<rbrakk>\n           \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) *\n                         local.sum_mat A (insert x F) =\n                         local.sum_mat A (insert x F)", "have \"... = A x * A x + A x * (sum_mat A F) + sum_mat A F * A x + \n    sum_mat A F * (sum_mat A F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x * A x + A x * local.sum_mat A F +\n    local.sum_mat A F * (A x + local.sum_mat A F) =\n    A x * A x + A x * local.sum_mat A F + local.sum_mat A F * A x +\n    local.sum_mat A F * local.sum_mat A F", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A x * A x + A x * local.sum_mat A F +\n    local.sum_mat A F * (A x + local.sum_mat A F) =\n    A x * A x + A x * local.sum_mat A F + local.sum_mat A F * A x +\n    local.sum_mat A F * local.sum_mat A F", "have \"sum_mat A F * (A x + local.sum_mat A F) = \n      sum_mat A F * A x + local.sum_mat A F * local.sum_mat A F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat A F * (A x + local.sum_mat A F) =\n    local.sum_mat A F * A x + local.sum_mat A F * local.sum_mat A F", "using insert dim_eq add_assoc add_mem mult_add_distrib_right cpx_sq_mat_mult sum_mat_carrier"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   \\<And>i j.\n      \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n      \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                    local.sum_mat A F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 * A ?i2 = A ?i2\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  \\<lbrakk>?i2 \\<in> insert x F; ?j2 \\<in> insert x F;\n   ?i2 \\<noteq> ?j2\\<rbrakk>\n  \\<Longrightarrow> A ?i2 * A ?j2 = 0\\<^sub>m dimR dimR\n  dimR = dimC\n  \\<lbrakk>?a \\<in> fc_mats; ?b \\<in> fc_mats; ?c \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> ?a + ?b + ?c = ?a + (?b + ?c)\n  \\<lbrakk>?a \\<in> fc_mats; ?b \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> ?a + ?b \\<in> fc_mats\n  \\<lbrakk>?A \\<in> fc_mats; ?B \\<in> fc_mats; ?C \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> ?A * (?B + ?C) = ?A * ?B + ?A * ?C\n  \\<lbrakk>?A \\<in> fc_mats; ?B \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> ?A * ?B \\<in> fc_mats\n  (\\<And>i.\n      i \\<in> ?I \\<Longrightarrow> ?A i \\<in> fc_mats) \\<Longrightarrow>\n  local.sum_mat ?A ?I \\<in> carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. local.sum_mat A F * (A x + local.sum_mat A F) =\n    local.sum_mat A F * A x + local.sum_mat A F * local.sum_mat A F", "by (metis fc_mats_carrier insertI1 subsetD subset_insertI)"], ["proof (state)\nthis:\n  local.sum_mat A F * (A x + local.sum_mat A F) =\n  local.sum_mat A F * A x + local.sum_mat A F * local.sum_mat A F\n\ngoal (1 subgoal):\n 1. A x * A x + A x * local.sum_mat A F +\n    local.sum_mat A F * (A x + local.sum_mat A F) =\n    A x * A x + A x * local.sum_mat A F + local.sum_mat A F * A x +\n    local.sum_mat A F * local.sum_mat A F", "hence \"A x * A x + A x * sum_mat A F + sum_mat A F * (A x + sum_mat A F) =\n      A x * A x + A x * sum_mat A F + (sum_mat A F * A x + sum_mat A F * sum_mat A F)\""], ["proof (prove)\nusing this:\n  local.sum_mat A F * (A x + local.sum_mat A F) =\n  local.sum_mat A F * A x + local.sum_mat A F * local.sum_mat A F\n\ngoal (1 subgoal):\n 1. A x * A x + A x * local.sum_mat A F +\n    local.sum_mat A F * (A x + local.sum_mat A F) =\n    A x * A x + A x * local.sum_mat A F +\n    (local.sum_mat A F * A x + local.sum_mat A F * local.sum_mat A F)", "by simp"], ["proof (state)\nthis:\n  A x * A x + A x * local.sum_mat A F +\n  local.sum_mat A F * (A x + local.sum_mat A F) =\n  A x * A x + A x * local.sum_mat A F +\n  (local.sum_mat A F * A x + local.sum_mat A F * local.sum_mat A F)\n\ngoal (1 subgoal):\n 1. A x * A x + A x * local.sum_mat A F +\n    local.sum_mat A F * (A x + local.sum_mat A F) =\n    A x * A x + A x * local.sum_mat A F + local.sum_mat A F * A x +\n    local.sum_mat A F * local.sum_mat A F", "also"], ["proof (state)\nthis:\n  A x * A x + A x * local.sum_mat A F +\n  local.sum_mat A F * (A x + local.sum_mat A F) =\n  A x * A x + A x * local.sum_mat A F +\n  (local.sum_mat A F * A x + local.sum_mat A F * local.sum_mat A F)\n\ngoal (1 subgoal):\n 1. A x * A x + A x * local.sum_mat A F +\n    local.sum_mat A F * (A x + local.sum_mat A F) =\n    A x * A x + A x * local.sum_mat A F + local.sum_mat A F * A x +\n    local.sum_mat A F * local.sum_mat A F", "have \"... = A x * A x + A x * sum_mat A F + sum_mat A F * A x + sum_mat A F * sum_mat A F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x * A x + A x * local.sum_mat A F +\n    (local.sum_mat A F * A x + local.sum_mat A F * local.sum_mat A F) =\n    A x * A x + A x * local.sum_mat A F + local.sum_mat A F * A x +\n    local.sum_mat A F * local.sum_mat A F", "proof (rule assoc_add_mat[symmetric])"], ["proof (state)\ngoal (3 subgoals):\n 1. A x * A x + A x * local.sum_mat A F \\<in> carrier_mat ?nr ?nc\n 2. local.sum_mat A F * A x \\<in> carrier_mat ?nr ?nc\n 3. local.sum_mat A F * local.sum_mat A F \\<in> carrier_mat ?nr ?nc", "show \"A x * A x + A x * sum_mat A F \\<in> carrier_mat dimR dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x * A x + A x * local.sum_mat A F \\<in> carrier_mat dimR dimR", "using sum_mat_carrier insert \n        dim_eq fc_mats_carrier"], ["proof (prove)\nusing this:\n  (\\<And>i.\n      i \\<in> ?I \\<Longrightarrow> ?A i \\<in> fc_mats) \\<Longrightarrow>\n  local.sum_mat ?A ?I \\<in> carrier_mat dimR dimC\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   \\<And>i j.\n      \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n      \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                    local.sum_mat A F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 * A ?i2 = A ?i2\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  \\<lbrakk>?i2 \\<in> insert x F; ?j2 \\<in> insert x F;\n   ?i2 \\<noteq> ?j2\\<rbrakk>\n  \\<Longrightarrow> A ?i2 * A ?j2 = 0\\<^sub>m dimR dimR\n  dimR = dimC\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. A x * A x + A x * local.sum_mat A F \\<in> carrier_mat dimR dimR", "by (metis add_mem cpx_sq_mat_mult insertCI)"], ["proof (state)\nthis:\n  A x * A x + A x * local.sum_mat A F \\<in> carrier_mat dimR dimR\n\ngoal (2 subgoals):\n 1. local.sum_mat A F * A x \\<in> carrier_mat dimR dimR\n 2. local.sum_mat A F * local.sum_mat A F \\<in> carrier_mat dimR dimR", "show \"sum_mat A F * A x \\<in> carrier_mat dimR dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat A F * A x \\<in> carrier_mat dimR dimR", "using sum_mat_carrier insert \n        dim_eq fc_mats_carrier"], ["proof (prove)\nusing this:\n  (\\<And>i.\n      i \\<in> ?I \\<Longrightarrow> ?A i \\<in> fc_mats) \\<Longrightarrow>\n  local.sum_mat ?A ?I \\<in> carrier_mat dimR dimC\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   \\<And>i j.\n      \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n      \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                    local.sum_mat A F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 * A ?i2 = A ?i2\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  \\<lbrakk>?i2 \\<in> insert x F; ?j2 \\<in> insert x F;\n   ?i2 \\<noteq> ?j2\\<rbrakk>\n  \\<Longrightarrow> A ?i2 * A ?j2 = 0\\<^sub>m dimR dimR\n  dimR = dimC\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. local.sum_mat A F * A x \\<in> carrier_mat dimR dimR", "by (metis cpx_sq_mat_mult insertCI)"], ["proof (state)\nthis:\n  local.sum_mat A F * A x \\<in> carrier_mat dimR dimR\n\ngoal (1 subgoal):\n 1. local.sum_mat A F * local.sum_mat A F \\<in> carrier_mat dimR dimR", "show \"sum_mat A F * sum_mat A F \\<in> carrier_mat dimR dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat A F * local.sum_mat A F \\<in> carrier_mat dimR dimR", "using sum_mat_carrier insert \n        dim_eq fc_mats_carrier"], ["proof (prove)\nusing this:\n  (\\<And>i.\n      i \\<in> ?I \\<Longrightarrow> ?A i \\<in> fc_mats) \\<Longrightarrow>\n  local.sum_mat ?A ?I \\<in> carrier_mat dimR dimC\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   \\<And>i j.\n      \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n      \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                    local.sum_mat A F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 * A ?i2 = A ?i2\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  \\<lbrakk>?i2 \\<in> insert x F; ?j2 \\<in> insert x F;\n   ?i2 \\<noteq> ?j2\\<rbrakk>\n  \\<Longrightarrow> A ?i2 * A ?j2 = 0\\<^sub>m dimR dimR\n  dimR = dimC\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. local.sum_mat A F * local.sum_mat A F \\<in> carrier_mat dimR dimR", "by (metis cpx_sq_mat_mult insertCI)"], ["proof (state)\nthis:\n  local.sum_mat A F * local.sum_mat A F \\<in> carrier_mat dimR dimR\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A x * A x + A x * local.sum_mat A F +\n  (local.sum_mat A F * A x + local.sum_mat A F * local.sum_mat A F) =\n  A x * A x + A x * local.sum_mat A F + local.sum_mat A F * A x +\n  local.sum_mat A F * local.sum_mat A F\n\ngoal (1 subgoal):\n 1. A x * A x + A x * local.sum_mat A F +\n    local.sum_mat A F * (A x + local.sum_mat A F) =\n    A x * A x + A x * local.sum_mat A F + local.sum_mat A F * A x +\n    local.sum_mat A F * local.sum_mat A F", "finally"], ["proof (chain)\npicking this:\n  A x * A x + A x * local.sum_mat A F +\n  local.sum_mat A F * (A x + local.sum_mat A F) =\n  A x * A x + A x * local.sum_mat A F + local.sum_mat A F * A x +\n  local.sum_mat A F * local.sum_mat A F", "show ?thesis"], ["proof (prove)\nusing this:\n  A x * A x + A x * local.sum_mat A F +\n  local.sum_mat A F * (A x + local.sum_mat A F) =\n  A x * A x + A x * local.sum_mat A F + local.sum_mat A F * A x +\n  local.sum_mat A F * local.sum_mat A F\n\ngoal (1 subgoal):\n 1. A x * A x + A x * local.sum_mat A F +\n    local.sum_mat A F * (A x + local.sum_mat A F) =\n    A x * A x + A x * local.sum_mat A F + local.sum_mat A F * A x +\n    local.sum_mat A F * local.sum_mat A F", "."], ["proof (state)\nthis:\n  A x * A x + A x * local.sum_mat A F +\n  local.sum_mat A F * (A x + local.sum_mat A F) =\n  A x * A x + A x * local.sum_mat A F + local.sum_mat A F * A x +\n  local.sum_mat A F * local.sum_mat A F\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A x * A x + A x * local.sum_mat A F +\n  local.sum_mat A F * (A x + local.sum_mat A F) =\n  A x * A x + A x * local.sum_mat A F + local.sum_mat A F * A x +\n  local.sum_mat A F * local.sum_mat A F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         \\<And>i j.\n            \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n            \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                          local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i * A i = A i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        \\<And>i j.\n           \\<lbrakk>i \\<in> insert x F; j \\<in> insert x F;\n            i \\<noteq> j\\<rbrakk>\n           \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) *\n                         local.sum_mat A (insert x F) =\n                         local.sum_mat A (insert x F)", "also"], ["proof (state)\nthis:\n  A x * A x + A x * local.sum_mat A F +\n  local.sum_mat A F * (A x + local.sum_mat A F) =\n  A x * A x + A x * local.sum_mat A F + local.sum_mat A F * A x +\n  local.sum_mat A F * local.sum_mat A F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         \\<And>i j.\n            \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n            \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                          local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i * A i = A i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        \\<And>i j.\n           \\<lbrakk>i \\<in> insert x F; j \\<in> insert x F;\n            i \\<noteq> j\\<rbrakk>\n           \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) *\n                         local.sum_mat A (insert x F) =\n                         local.sum_mat A (insert x F)", "have \"... = A x +  sum_mat A F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x * A x + A x * local.sum_mat A F + local.sum_mat A F * A x +\n    local.sum_mat A F * local.sum_mat A F =\n    A x + local.sum_mat A F", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A x * A x + A x * local.sum_mat A F + local.sum_mat A F * A x +\n    local.sum_mat A F * local.sum_mat A F =\n    A x + local.sum_mat A F", "have \"A x * A x = A x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x * A x = A x", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   \\<And>i j.\n      \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n      \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                    local.sum_mat A F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 * A ?i2 = A ?i2\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  \\<lbrakk>?i2 \\<in> insert x F; ?j2 \\<in> insert x F;\n   ?i2 \\<noteq> ?j2\\<rbrakk>\n  \\<Longrightarrow> A ?i2 * A ?j2 = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. A x * A x = A x", "by simp"], ["proof (state)\nthis:\n  A x * A x = A x\n\ngoal (1 subgoal):\n 1. A x * A x + A x * local.sum_mat A F + local.sum_mat A F * A x +\n    local.sum_mat A F * local.sum_mat A F =\n    A x + local.sum_mat A F", "moreover"], ["proof (state)\nthis:\n  A x * A x = A x\n\ngoal (1 subgoal):\n 1. A x * A x + A x * local.sum_mat A F + local.sum_mat A F * A x +\n    local.sum_mat A F * local.sum_mat A F =\n    A x + local.sum_mat A F", "have \"sum_mat A F * sum_mat A F = sum_mat A F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat A F * local.sum_mat A F = local.sum_mat A F", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   \\<And>i j.\n      \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n      \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                    local.sum_mat A F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 * A ?i2 = A ?i2\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  \\<lbrakk>?i2 \\<in> insert x F; ?j2 \\<in> insert x F;\n   ?i2 \\<noteq> ?j2\\<rbrakk>\n  \\<Longrightarrow> A ?i2 * A ?j2 = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. local.sum_mat A F * local.sum_mat A F = local.sum_mat A F", "by simp"], ["proof (state)\nthis:\n  local.sum_mat A F * local.sum_mat A F = local.sum_mat A F\n\ngoal (1 subgoal):\n 1. A x * A x + A x * local.sum_mat A F + local.sum_mat A F * A x +\n    local.sum_mat A F * local.sum_mat A F =\n    A x + local.sum_mat A F", "moreover"], ["proof (state)\nthis:\n  local.sum_mat A F * local.sum_mat A F = local.sum_mat A F\n\ngoal (1 subgoal):\n 1. A x * A x + A x * local.sum_mat A F + local.sum_mat A F * A x +\n    local.sum_mat A F * local.sum_mat A F =\n    A x + local.sum_mat A F", "have \"A x * (sum_mat A F) = 0\\<^sub>m dimR dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x * local.sum_mat A F = 0\\<^sub>m dimR dimR", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A x * local.sum_mat A F = 0\\<^sub>m dimR dimR", "have \"A x * (sum_mat A F) = sum_mat (\\<lambda>i. A x * (A i)) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x * local.sum_mat A F = local.sum_mat (\\<lambda>i. A x * A i) F", "by (rule sum_mat_distrib_left[symmetric], (simp add: insert)+)"], ["proof (state)\nthis:\n  A x * local.sum_mat A F = local.sum_mat (\\<lambda>i. A x * A i) F\n\ngoal (1 subgoal):\n 1. A x * local.sum_mat A F = 0\\<^sub>m dimR dimR", "also"], ["proof (state)\nthis:\n  A x * local.sum_mat A F = local.sum_mat (\\<lambda>i. A x * A i) F\n\ngoal (1 subgoal):\n 1. A x * local.sum_mat A F = 0\\<^sub>m dimR dimR", "have \"... = sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. A x * A i) F =\n    local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F", "proof (rule sum_mat_cong, (auto simp add: insert zero_mem))"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i. i \\<in> F \\<Longrightarrow> A x * A i = 0\\<^sub>m dimR dimR\n 2. \\<And>i. i \\<in> F \\<Longrightarrow> A x * A i \\<in> fc_mats\n 3. \\<And>i. i \\<in> F \\<Longrightarrow> 0\\<^sub>m dimR dimR \\<in> fc_mats", "show \"\\<And>i. i \\<in> F \\<Longrightarrow> A x * A i = 0\\<^sub>m dimR dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> F \\<Longrightarrow> A x * A i = 0\\<^sub>m dimR dimR", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   \\<And>i j.\n      \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n      \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                    local.sum_mat A F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 * A ?i2 = A ?i2\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  \\<lbrakk>?i2 \\<in> insert x F; ?j2 \\<in> insert x F;\n   ?i2 \\<noteq> ?j2\\<rbrakk>\n  \\<Longrightarrow> A ?i2 * A ?j2 = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> F \\<Longrightarrow> A x * A i = 0\\<^sub>m dimR dimR", "by auto"], ["proof (state)\nthis:\n  ?i2 \\<in> F \\<Longrightarrow> A x * A ?i2 = 0\\<^sub>m dimR dimR\n\ngoal (2 subgoals):\n 1. \\<And>i. i \\<in> F \\<Longrightarrow> A x * A i \\<in> fc_mats\n 2. \\<And>i. i \\<in> F \\<Longrightarrow> 0\\<^sub>m dimR dimR \\<in> fc_mats", "show \"\\<And>i. i \\<in> F \\<Longrightarrow> A x * A i \\<in> fc_mats\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> F \\<Longrightarrow> A x * A i \\<in> fc_mats", "using insert cpx_sq_mat_mult"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   \\<And>i j.\n      \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n      \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                    local.sum_mat A F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 * A ?i2 = A ?i2\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  \\<lbrakk>?i2 \\<in> insert x F; ?j2 \\<in> insert x F;\n   ?i2 \\<noteq> ?j2\\<rbrakk>\n  \\<Longrightarrow> A ?i2 * A ?j2 = 0\\<^sub>m dimR dimR\n  \\<lbrakk>?A \\<in> fc_mats; ?B \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> ?A * ?B \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> F \\<Longrightarrow> A x * A i \\<in> fc_mats", "by auto"], ["proof (state)\nthis:\n  ?i2 \\<in> F \\<Longrightarrow> A x * A ?i2 \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> F \\<Longrightarrow> 0\\<^sub>m dimR dimR \\<in> fc_mats", "show \"\\<And>i. i \\<in> F \\<Longrightarrow> 0\\<^sub>m dimR dimR \\<in> fc_mats\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> F \\<Longrightarrow> 0\\<^sub>m dimR dimR \\<in> fc_mats", "using zero_mem dim_eq"], ["proof (prove)\nusing this:\n  0\\<^sub>m dimR dimC \\<in> fc_mats\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> F \\<Longrightarrow> 0\\<^sub>m dimR dimR \\<in> fc_mats", "by simp"], ["proof (state)\nthis:\n  ?i2 \\<in> F \\<Longrightarrow> 0\\<^sub>m dimR dimR \\<in> fc_mats\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. A x * A i) F =\n  local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F\n\ngoal (1 subgoal):\n 1. A x * local.sum_mat A F = 0\\<^sub>m dimR dimR", "also"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. A x * A i) F =\n  local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F\n\ngoal (1 subgoal):\n 1. A x * local.sum_mat A F = 0\\<^sub>m dimR dimR", "have \"... = 0\\<^sub>m dimR dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F = 0\\<^sub>m dimR dimR", "using zero_sum_mat insert"], ["proof (prove)\nusing this:\n  finite ?I \\<Longrightarrow>\n  local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) ?I = 0\\<^sub>m dimR dimR\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   \\<And>i j.\n      \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n      \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                    local.sum_mat A F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 * A ?i2 = A ?i2\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  \\<lbrakk>?i2 \\<in> insert x F; ?j2 \\<in> insert x F;\n   ?i2 \\<noteq> ?j2\\<rbrakk>\n  \\<Longrightarrow> A ?i2 * A ?j2 = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F = 0\\<^sub>m dimR dimR", "by simp"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. A x * local.sum_mat A F = 0\\<^sub>m dimR dimR", "finally"], ["proof (chain)\npicking this:\n  A x * local.sum_mat A F = 0\\<^sub>m dimR dimR", "show ?thesis"], ["proof (prove)\nusing this:\n  A x * local.sum_mat A F = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. A x * local.sum_mat A F = 0\\<^sub>m dimR dimR", "."], ["proof (state)\nthis:\n  A x * local.sum_mat A F = 0\\<^sub>m dimR dimR\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A x * local.sum_mat A F = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. A x * A x + A x * local.sum_mat A F + local.sum_mat A F * A x +\n    local.sum_mat A F * local.sum_mat A F =\n    A x + local.sum_mat A F", "moreover"], ["proof (state)\nthis:\n  A x * local.sum_mat A F = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. A x * A x + A x * local.sum_mat A F + local.sum_mat A F * A x +\n    local.sum_mat A F * local.sum_mat A F =\n    A x + local.sum_mat A F", "have \"sum_mat A F * A x = 0\\<^sub>m dimR dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat A F * A x = 0\\<^sub>m dimR dimR", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.sum_mat A F * A x = 0\\<^sub>m dimR dimR", "have \"sum_mat A F * A x = sum_mat (\\<lambda>i. A i * (A x)) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat A F * A x = local.sum_mat (\\<lambda>i. A i * A x) F", "by (rule sum_mat_distrib_right[symmetric], (simp add: insert)+)"], ["proof (state)\nthis:\n  local.sum_mat A F * A x = local.sum_mat (\\<lambda>i. A i * A x) F\n\ngoal (1 subgoal):\n 1. local.sum_mat A F * A x = 0\\<^sub>m dimR dimR", "also"], ["proof (state)\nthis:\n  local.sum_mat A F * A x = local.sum_mat (\\<lambda>i. A i * A x) F\n\ngoal (1 subgoal):\n 1. local.sum_mat A F * A x = 0\\<^sub>m dimR dimR", "have \"... = sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. A i * A x) F =\n    local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F", "proof (rule sum_mat_cong, (auto simp add: insert zero_mem))"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i. i \\<in> F \\<Longrightarrow> A i * A x = 0\\<^sub>m dimR dimR\n 2. \\<And>i. i \\<in> F \\<Longrightarrow> A i * A x \\<in> fc_mats\n 3. \\<And>i. i \\<in> F \\<Longrightarrow> 0\\<^sub>m dimR dimR \\<in> fc_mats", "show \"\\<And>i. i \\<in> F \\<Longrightarrow> A i * A x = 0\\<^sub>m dimR dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> F \\<Longrightarrow> A i * A x = 0\\<^sub>m dimR dimR", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   \\<And>i j.\n      \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n      \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                    local.sum_mat A F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 * A ?i2 = A ?i2\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  \\<lbrakk>?i2 \\<in> insert x F; ?j2 \\<in> insert x F;\n   ?i2 \\<noteq> ?j2\\<rbrakk>\n  \\<Longrightarrow> A ?i2 * A ?j2 = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> F \\<Longrightarrow> A i * A x = 0\\<^sub>m dimR dimR", "by auto"], ["proof (state)\nthis:\n  ?i2 \\<in> F \\<Longrightarrow> A ?i2 * A x = 0\\<^sub>m dimR dimR\n\ngoal (2 subgoals):\n 1. \\<And>i. i \\<in> F \\<Longrightarrow> A i * A x \\<in> fc_mats\n 2. \\<And>i. i \\<in> F \\<Longrightarrow> 0\\<^sub>m dimR dimR \\<in> fc_mats", "show \"\\<And>i. i \\<in> F \\<Longrightarrow> A i * A x \\<in> fc_mats\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> F \\<Longrightarrow> A i * A x \\<in> fc_mats", "using insert cpx_sq_mat_mult"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   \\<And>i j.\n      \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n      \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                    local.sum_mat A F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 * A ?i2 = A ?i2\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  \\<lbrakk>?i2 \\<in> insert x F; ?j2 \\<in> insert x F;\n   ?i2 \\<noteq> ?j2\\<rbrakk>\n  \\<Longrightarrow> A ?i2 * A ?j2 = 0\\<^sub>m dimR dimR\n  \\<lbrakk>?A \\<in> fc_mats; ?B \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> ?A * ?B \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> F \\<Longrightarrow> A i * A x \\<in> fc_mats", "by auto"], ["proof (state)\nthis:\n  ?i2 \\<in> F \\<Longrightarrow> A ?i2 * A x \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> F \\<Longrightarrow> 0\\<^sub>m dimR dimR \\<in> fc_mats", "show \"\\<And>i. i \\<in> F \\<Longrightarrow> 0\\<^sub>m dimR dimR \\<in> fc_mats\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> F \\<Longrightarrow> 0\\<^sub>m dimR dimR \\<in> fc_mats", "using zero_mem dim_eq"], ["proof (prove)\nusing this:\n  0\\<^sub>m dimR dimC \\<in> fc_mats\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> F \\<Longrightarrow> 0\\<^sub>m dimR dimR \\<in> fc_mats", "by simp"], ["proof (state)\nthis:\n  ?i2 \\<in> F \\<Longrightarrow> 0\\<^sub>m dimR dimR \\<in> fc_mats\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. A i * A x) F =\n  local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F\n\ngoal (1 subgoal):\n 1. local.sum_mat A F * A x = 0\\<^sub>m dimR dimR", "also"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. A i * A x) F =\n  local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F\n\ngoal (1 subgoal):\n 1. local.sum_mat A F * A x = 0\\<^sub>m dimR dimR", "have \"... = 0\\<^sub>m dimR dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F = 0\\<^sub>m dimR dimR", "using zero_sum_mat insert"], ["proof (prove)\nusing this:\n  finite ?I \\<Longrightarrow>\n  local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) ?I = 0\\<^sub>m dimR dimR\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   \\<And>i j.\n      \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n      \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                    local.sum_mat A F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 * A ?i2 = A ?i2\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  \\<lbrakk>?i2 \\<in> insert x F; ?j2 \\<in> insert x F;\n   ?i2 \\<noteq> ?j2\\<rbrakk>\n  \\<Longrightarrow> A ?i2 * A ?j2 = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F = 0\\<^sub>m dimR dimR", "by simp"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. 0\\<^sub>m dimR dimR) F = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. local.sum_mat A F * A x = 0\\<^sub>m dimR dimR", "finally"], ["proof (chain)\npicking this:\n  local.sum_mat A F * A x = 0\\<^sub>m dimR dimR", "show ?thesis"], ["proof (prove)\nusing this:\n  local.sum_mat A F * A x = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. local.sum_mat A F * A x = 0\\<^sub>m dimR dimR", "."], ["proof (state)\nthis:\n  local.sum_mat A F * A x = 0\\<^sub>m dimR dimR\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.sum_mat A F * A x = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. A x * A x + A x * local.sum_mat A F + local.sum_mat A F * A x +\n    local.sum_mat A F * local.sum_mat A F =\n    A x + local.sum_mat A F", "ultimately"], ["proof (chain)\npicking this:\n  A x * A x = A x\n  local.sum_mat A F * local.sum_mat A F = local.sum_mat A F\n  A x * local.sum_mat A F = 0\\<^sub>m dimR dimR\n  local.sum_mat A F * A x = 0\\<^sub>m dimR dimR", "show ?thesis"], ["proof (prove)\nusing this:\n  A x * A x = A x\n  local.sum_mat A F * local.sum_mat A F = local.sum_mat A F\n  A x * local.sum_mat A F = 0\\<^sub>m dimR dimR\n  local.sum_mat A F * A x = 0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. A x * A x + A x * local.sum_mat A F + local.sum_mat A F * A x +\n    local.sum_mat A F * local.sum_mat A F =\n    A x + local.sum_mat A F", "using add_commute add_zero insert.prems(2) zero_mem dim_eq"], ["proof (prove)\nusing this:\n  A x * A x = A x\n  local.sum_mat A F * local.sum_mat A F = local.sum_mat A F\n  A x * local.sum_mat A F = 0\\<^sub>m dimR dimR\n  local.sum_mat A F * A x = 0\\<^sub>m dimR dimR\n  \\<lbrakk>?a \\<in> fc_mats; ?b \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> ?a + ?b = ?b + ?a\n  ?a \\<in> fc_mats \\<Longrightarrow> 0\\<^sub>m dimR dimC + ?a = ?a\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  0\\<^sub>m dimR dimC \\<in> fc_mats\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. A x * A x + A x * local.sum_mat A F + local.sum_mat A F * A x +\n    local.sum_mat A F * local.sum_mat A F =\n    A x + local.sum_mat A F", "by auto"], ["proof (state)\nthis:\n  A x * A x + A x * local.sum_mat A F + local.sum_mat A F * A x +\n  local.sum_mat A F * local.sum_mat A F =\n  A x + local.sum_mat A F\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A x * A x + A x * local.sum_mat A F + local.sum_mat A F * A x +\n  local.sum_mat A F * local.sum_mat A F =\n  A x + local.sum_mat A F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         \\<And>i j.\n            \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n            \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                          local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i * A i = A i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        \\<And>i j.\n           \\<lbrakk>i \\<in> insert x F; j \\<in> insert x F;\n            i \\<noteq> j\\<rbrakk>\n           \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) *\n                         local.sum_mat A (insert x F) =\n                         local.sum_mat A (insert x F)", "also"], ["proof (state)\nthis:\n  A x * A x + A x * local.sum_mat A F + local.sum_mat A F * A x +\n  local.sum_mat A F * local.sum_mat A F =\n  A x + local.sum_mat A F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         \\<And>i j.\n            \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n            \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                          local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i * A i = A i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        \\<And>i j.\n           \\<lbrakk>i \\<in> insert x F; j \\<in> insert x F;\n            i \\<noteq> j\\<rbrakk>\n           \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) *\n                         local.sum_mat A (insert x F) =\n                         local.sum_mat A (insert x F)", "have \"... = sum_mat A (insert x F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x + local.sum_mat A F = local.sum_mat A (insert x F)", "using insert sum_mat_insert[of A x F]"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n   \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n   \\<And>i j.\n      \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n      \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                    local.sum_mat A F\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 * A ?i2 = A ?i2\n  ?i2 \\<in> insert x F \\<Longrightarrow> A ?i2 \\<in> fc_mats\n  \\<lbrakk>?i2 \\<in> insert x F; ?j2 \\<in> insert x F;\n   ?i2 \\<noteq> ?j2\\<rbrakk>\n  \\<Longrightarrow> A ?i2 * A ?j2 = 0\\<^sub>m dimR dimR\n  \\<lbrakk>A x \\<in> fc_mats; A ` F \\<subseteq> fc_mats; finite F;\n   x \\<notin> F\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat A (insert x F) = A x + local.sum_mat A F\n\ngoal (1 subgoal):\n 1. A x + local.sum_mat A F = local.sum_mat A (insert x F)", "by (simp add: \\<open>\\<And>i. i \\<in> insert x F \\<Longrightarrow> A i * A i = A i\\<close> image_subsetI)"], ["proof (state)\nthis:\n  A x + local.sum_mat A F = local.sum_mat A (insert x F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>i. i \\<in> F \\<Longrightarrow> A i * A i = A i;\n         \\<And>i. i \\<in> F \\<Longrightarrow> A i \\<in> fc_mats;\n         \\<And>i j.\n            \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n            \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n        \\<Longrightarrow> local.sum_mat A F * local.sum_mat A F =\n                          local.sum_mat A F;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i * A i = A i;\n        \\<And>i. i \\<in> insert x F \\<Longrightarrow> A i \\<in> fc_mats;\n        \\<And>i j.\n           \\<lbrakk>i \\<in> insert x F; j \\<in> insert x F;\n            i \\<noteq> j\\<rbrakk>\n           \\<Longrightarrow> A i * A j = 0\\<^sub>m dimR dimR\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat A (insert x F) *\n                         local.sum_mat A (insert x F) =\n                         local.sum_mat A (insert x F)", "finally"], ["proof (chain)\npicking this:\n  local.sum_mat A (insert x F) * local.sum_mat A (insert x F) =\n  local.sum_mat A (insert x F)", "show ?case"], ["proof (prove)\nusing this:\n  local.sum_mat A (insert x F) * local.sum_mat A (insert x F) =\n  local.sum_mat A (insert x F)\n\ngoal (1 subgoal):\n 1. local.sum_mat A (insert x F) * local.sum_mat A (insert x F) =\n    local.sum_mat A (insert x F)", "."], ["proof (state)\nthis:\n  local.sum_mat A (insert x F) * local.sum_mat A (insert x F) =\n  local.sum_mat A (insert x F)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma diagonal_unit_vec:\n  assumes \"B \\<in> carrier_mat n n\"\nand \"diagonal_mat (B::complex Matrix.mat)\"\nshows \"B *\\<^sub>v (unit_vec n i) = B $$ (i,i)  \\<cdot>\\<^sub>v (unit_vec n i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B *\\<^sub>v unit_vec n i = B $$ (i, i) \\<cdot>\\<^sub>v unit_vec n i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. B *\\<^sub>v unit_vec n i = B $$ (i, i) \\<cdot>\\<^sub>v unit_vec n i", "define v::\"complex Matrix.vec\" where \"v = unit_vec n i\""], ["proof (state)\nthis:\n  v = unit_vec n i\n\ngoal (1 subgoal):\n 1. B *\\<^sub>v unit_vec n i = B $$ (i, i) \\<cdot>\\<^sub>v unit_vec n i", "have \"B *\\<^sub>v v = Matrix.vec n (\\<lambda> i. Matrix.scalar_prod (Matrix.row B i) v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B *\\<^sub>v v = Matrix.vec n (\\<lambda>i. Matrix.row B i \\<bullet> v)", "using assms"], ["proof (prove)\nusing this:\n  B \\<in> carrier_mat n n\n  diagonal_mat B\n\ngoal (1 subgoal):\n 1. B *\\<^sub>v v = Matrix.vec n (\\<lambda>i. Matrix.row B i \\<bullet> v)", "unfolding mult_mat_vec_def"], ["proof (prove)\nusing this:\n  B \\<in> carrier_mat n n\n  diagonal_mat B\n\ngoal (1 subgoal):\n 1. Matrix.vec (dim_row B) (\\<lambda>i. Matrix.row B i \\<bullet> v) =\n    Matrix.vec n (\\<lambda>i. Matrix.row B i \\<bullet> v)", "by simp"], ["proof (state)\nthis:\n  B *\\<^sub>v v = Matrix.vec n (\\<lambda>i. Matrix.row B i \\<bullet> v)\n\ngoal (1 subgoal):\n 1. B *\\<^sub>v unit_vec n i = B $$ (i, i) \\<cdot>\\<^sub>v unit_vec n i", "also"], ["proof (state)\nthis:\n  B *\\<^sub>v v = Matrix.vec n (\\<lambda>i. Matrix.row B i \\<bullet> v)\n\ngoal (1 subgoal):\n 1. B *\\<^sub>v unit_vec n i = B $$ (i, i) \\<cdot>\\<^sub>v unit_vec n i", "have \"... = Matrix.vec n (\\<lambda> i. B $$(i,i) * Matrix.vec_index v i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.vec n (\\<lambda>i. Matrix.row B i \\<bullet> v) =\n    Matrix.vec n (\\<lambda>i. B $$ (i, i) * v $ i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Matrix.vec n (\\<lambda>i. Matrix.row B i \\<bullet> v) =\n    Matrix.vec n (\\<lambda>i. B $$ (i, i) * v $ i)", "have \"\\<forall>i < n. (Matrix.scalar_prod (Matrix.row B i) v = B $$(i,i) * Matrix.vec_index v i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<n. Matrix.row B i \\<bullet> v = B $$ (i, i) * v $ i", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < n \\<Longrightarrow>\n       Matrix.row B i \\<bullet> v = B $$ (i, i) * v $ i", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < n \\<Longrightarrow>\n       Matrix.row B i \\<bullet> v = B $$ (i, i) * v $ i", "assume \"i < n\""], ["proof (state)\nthis:\n  i < n\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < n \\<Longrightarrow>\n       Matrix.row B i \\<bullet> v = B $$ (i, i) * v $ i", "have \"(Matrix.scalar_prod (Matrix.row B i) v) = \n        (\\<Sum> j \\<in> {0 ..< n}. Matrix.vec_index (Matrix.row B i) j * Matrix.vec_index v j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row B i \\<bullet> v =\n    (\\<Sum>j = 0..<n. Matrix.row B i $ j * v $ j)", "using assms"], ["proof (prove)\nusing this:\n  B \\<in> carrier_mat n n\n  diagonal_mat B\n\ngoal (1 subgoal):\n 1. Matrix.row B i \\<bullet> v =\n    (\\<Sum>j = 0..<n. Matrix.row B i $ j * v $ j)", "unfolding Matrix.scalar_prod_def v_def"], ["proof (prove)\nusing this:\n  B \\<in> carrier_mat n n\n  diagonal_mat B\n\ngoal (1 subgoal):\n 1. (\\<Sum>ib = 0..<dim_vec (unit_vec n i).\n        Matrix.row B i $ ib * unit_vec n i $ ib) =\n    (\\<Sum>j = 0..<n. Matrix.row B i $ j * unit_vec n i $ j)", "by simp"], ["proof (state)\nthis:\n  Matrix.row B i \\<bullet> v = (\\<Sum>j = 0..<n. Matrix.row B i $ j * v $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < n \\<Longrightarrow>\n       Matrix.row B i \\<bullet> v = B $$ (i, i) * v $ i", "also"], ["proof (state)\nthis:\n  Matrix.row B i \\<bullet> v = (\\<Sum>j = 0..<n. Matrix.row B i $ j * v $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < n \\<Longrightarrow>\n       Matrix.row B i \\<bullet> v = B $$ (i, i) * v $ i", "have \"... = Matrix.vec_index (Matrix.row B i) i * Matrix.vec_index v i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>j = 0..<n. Matrix.row B i $ j * v $ j) =\n    Matrix.row B i $ i * v $ i", "proof (rule sum_but_one)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>j<n. j \\<noteq> i \\<longrightarrow> Matrix.row B i $ j = 0\n 2. i < n", "show \"\\<forall>j < n. j \\<noteq> i \\<longrightarrow> Matrix.vec_index (Matrix.row B i) j = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j<n. j \\<noteq> i \\<longrightarrow> Matrix.row B i $ j = 0", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < n; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> Matrix.row B i $ j = 0", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < n; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> Matrix.row B i $ j = 0", "assume \"j < n\" and \"j \\<noteq> i\""], ["proof (state)\nthis:\n  j < n\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < n; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> Matrix.row B i $ j = 0", "hence \"Matrix.vec_index (Matrix.row B i) j = B $$ (i,j)\""], ["proof (prove)\nusing this:\n  j < n\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. Matrix.row B i $ j = B $$ (i, j)", "using \\<open>i < n\\<close> \\<open>j < n\\<close> assms"], ["proof (prove)\nusing this:\n  j < n\n  j \\<noteq> i\n  i < n\n  j < n\n  B \\<in> carrier_mat n n\n  diagonal_mat B\n\ngoal (1 subgoal):\n 1. Matrix.row B i $ j = B $$ (i, j)", "by auto"], ["proof (state)\nthis:\n  Matrix.row B i $ j = B $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < n; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> Matrix.row B i $ j = 0", "also"], ["proof (state)\nthis:\n  Matrix.row B i $ j = B $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < n; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> Matrix.row B i $ j = 0", "have \"... = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B $$ (i, j) = 0", "using assms \\<open>i < n\\<close> \\<open>j < n\\<close> \\<open>j\\<noteq> i\\<close>"], ["proof (prove)\nusing this:\n  B \\<in> carrier_mat n n\n  diagonal_mat B\n  i < n\n  j < n\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. B $$ (i, j) = 0", "unfolding diagonal_mat_def"], ["proof (prove)\nusing this:\n  B \\<in> carrier_mat n n\n  \\<forall>i<dim_row B.\n     \\<forall>j<dim_col B. i \\<noteq> j \\<longrightarrow> B $$ (i, j) = 0\n  i < n\n  j < n\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. B $$ (i, j) = 0", "by simp"], ["proof (state)\nthis:\n  B $$ (i, j) = 0\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < n; j \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> Matrix.row B i $ j = 0", "finally"], ["proof (chain)\npicking this:\n  Matrix.row B i $ j = 0", "show \"Matrix.vec_index (Matrix.row B i) j = 0\""], ["proof (prove)\nusing this:\n  Matrix.row B i $ j = 0\n\ngoal (1 subgoal):\n 1. Matrix.row B i $ j = 0", "."], ["proof (state)\nthis:\n  Matrix.row B i $ j = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j<n. j \\<noteq> i \\<longrightarrow> Matrix.row B i $ j = 0\n\ngoal (1 subgoal):\n 1. i < n", "show \"i < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < n", "using \\<open>i < n\\<close>"], ["proof (prove)\nusing this:\n  i < n\n\ngoal (1 subgoal):\n 1. i < n", "."], ["proof (state)\nthis:\n  i < n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>j = 0..<n. Matrix.row B i $ j * v $ j) = Matrix.row B i $ i * v $ i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < n \\<Longrightarrow>\n       Matrix.row B i \\<bullet> v = B $$ (i, i) * v $ i", "also"], ["proof (state)\nthis:\n  (\\<Sum>j = 0..<n. Matrix.row B i $ j * v $ j) = Matrix.row B i $ i * v $ i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < n \\<Longrightarrow>\n       Matrix.row B i \\<bullet> v = B $$ (i, i) * v $ i", "have \"... = B $$(i,i) * Matrix.vec_index v i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row B i $ i * v $ i = B $$ (i, i) * v $ i", "using assms \\<open>i < n\\<close>"], ["proof (prove)\nusing this:\n  B \\<in> carrier_mat n n\n  diagonal_mat B\n  i < n\n\ngoal (1 subgoal):\n 1. Matrix.row B i $ i * v $ i = B $$ (i, i) * v $ i", "by auto"], ["proof (state)\nthis:\n  Matrix.row B i $ i * v $ i = B $$ (i, i) * v $ i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < n \\<Longrightarrow>\n       Matrix.row B i \\<bullet> v = B $$ (i, i) * v $ i", "finally"], ["proof (chain)\npicking this:\n  Matrix.row B i \\<bullet> v = B $$ (i, i) * v $ i", "show \"(Matrix.scalar_prod (Matrix.row B i) v) = B $$(i,i) * Matrix.vec_index v i\""], ["proof (prove)\nusing this:\n  Matrix.row B i \\<bullet> v = B $$ (i, i) * v $ i\n\ngoal (1 subgoal):\n 1. Matrix.row B i \\<bullet> v = B $$ (i, i) * v $ i", "."], ["proof (state)\nthis:\n  Matrix.row B i \\<bullet> v = B $$ (i, i) * v $ i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i<n. Matrix.row B i \\<bullet> v = B $$ (i, i) * v $ i\n\ngoal (1 subgoal):\n 1. Matrix.vec n (\\<lambda>i. Matrix.row B i \\<bullet> v) =\n    Matrix.vec n (\\<lambda>i. B $$ (i, i) * v $ i)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>i<n. Matrix.row B i \\<bullet> v = B $$ (i, i) * v $ i\n\ngoal (1 subgoal):\n 1. Matrix.vec n (\\<lambda>i. Matrix.row B i \\<bullet> v) =\n    Matrix.vec n (\\<lambda>i. B $$ (i, i) * v $ i)", "by auto"], ["proof (state)\nthis:\n  Matrix.vec n (\\<lambda>i. Matrix.row B i \\<bullet> v) =\n  Matrix.vec n (\\<lambda>i. B $$ (i, i) * v $ i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Matrix.vec n (\\<lambda>i. Matrix.row B i \\<bullet> v) =\n  Matrix.vec n (\\<lambda>i. B $$ (i, i) * v $ i)\n\ngoal (1 subgoal):\n 1. B *\\<^sub>v unit_vec n i = B $$ (i, i) \\<cdot>\\<^sub>v unit_vec n i", "also"], ["proof (state)\nthis:\n  Matrix.vec n (\\<lambda>i. Matrix.row B i \\<bullet> v) =\n  Matrix.vec n (\\<lambda>i. B $$ (i, i) * v $ i)\n\ngoal (1 subgoal):\n 1. B *\\<^sub>v unit_vec n i = B $$ (i, i) \\<cdot>\\<^sub>v unit_vec n i", "have \"... = B $$ (i,i)  \\<cdot>\\<^sub>v v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.vec n (\\<lambda>i. B $$ (i, i) * v $ i) =\n    B $$ (i, i) \\<cdot>\\<^sub>v v", "unfolding v_def unit_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.vec n\n     (\\<lambda>ia.\n         B $$ (ia, ia) *\n         Matrix.vec n (\\<lambda>j. if j = i then 1 else 0) $ ia) =\n    B $$ (i, i) \\<cdot>\\<^sub>v\n    Matrix.vec n (\\<lambda>j. if j = i then 1 else 0)", "by auto"], ["proof (state)\nthis:\n  Matrix.vec n (\\<lambda>i. B $$ (i, i) * v $ i) =\n  B $$ (i, i) \\<cdot>\\<^sub>v v\n\ngoal (1 subgoal):\n 1. B *\\<^sub>v unit_vec n i = B $$ (i, i) \\<cdot>\\<^sub>v unit_vec n i", "finally"], ["proof (chain)\npicking this:\n  B *\\<^sub>v v = B $$ (i, i) \\<cdot>\\<^sub>v v", "have \"B *\\<^sub>v v = B $$ (i,i)  \\<cdot>\\<^sub>v v\""], ["proof (prove)\nusing this:\n  B *\\<^sub>v v = B $$ (i, i) \\<cdot>\\<^sub>v v\n\ngoal (1 subgoal):\n 1. B *\\<^sub>v v = B $$ (i, i) \\<cdot>\\<^sub>v v", "."], ["proof (state)\nthis:\n  B *\\<^sub>v v = B $$ (i, i) \\<cdot>\\<^sub>v v\n\ngoal (1 subgoal):\n 1. B *\\<^sub>v unit_vec n i = B $$ (i, i) \\<cdot>\\<^sub>v unit_vec n i", "thus ?thesis"], ["proof (prove)\nusing this:\n  B *\\<^sub>v v = B $$ (i, i) \\<cdot>\\<^sub>v v\n\ngoal (1 subgoal):\n 1. B *\\<^sub>v unit_vec n i = B $$ (i, i) \\<cdot>\\<^sub>v unit_vec n i", "unfolding v_def"], ["proof (prove)\nusing this:\n  B *\\<^sub>v unit_vec n i = B $$ (i, i) \\<cdot>\\<^sub>v unit_vec n i\n\ngoal (1 subgoal):\n 1. B *\\<^sub>v unit_vec n i = B $$ (i, i) \\<cdot>\\<^sub>v unit_vec n i", "by simp"], ["proof (state)\nthis:\n  B *\\<^sub>v unit_vec n i = B $$ (i, i) \\<cdot>\\<^sub>v unit_vec n i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mat_vec_mult_assoc:\n  assumes \"A \\<in> carrier_mat n p\"\nand \"B\\<in> carrier_mat p q\"\nand \"dim_vec v = q\"\nshows \"A *\\<^sub>v (B *\\<^sub>v v) = (A * B) *\\<^sub>v v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A *\\<^sub>v (B *\\<^sub>v v) = A * B *\\<^sub>v v", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n p\n  B \\<in> carrier_mat p q\n  dim_vec v = q\n\ngoal (1 subgoal):\n 1. A *\\<^sub>v (B *\\<^sub>v v) = A * B *\\<^sub>v v", "by auto"], ["", "lemma (in cpx_sq_mat) similar_eigenvectors:\n  assumes \"A\\<in> fc_mats\"\n  and \"B\\<in> fc_mats\"\n  and \"P\\<in> fc_mats\"\n  and \"similar_mat_wit A B P (Complex_Matrix.adjoint P)\"\n  and \"diagonal_mat B\"\n  and \"i < n\"\nshows \"A *\\<^sub>v (P *\\<^sub>v (unit_vec dimR i)) = B $$ (i,i) \\<cdot>\\<^sub>v (P *\\<^sub>v (unit_vec dimR i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A *\\<^sub>v (P *\\<^sub>v unit_vec dimR i) =\n    B $$ (i, i) \\<cdot>\\<^sub>v (P *\\<^sub>v unit_vec dimR i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A *\\<^sub>v (P *\\<^sub>v unit_vec dimR i) =\n    B $$ (i, i) \\<cdot>\\<^sub>v (P *\\<^sub>v unit_vec dimR i)", "have \"A *\\<^sub>v (P *\\<^sub>v (unit_vec dimR i)) = \n    (P * B * (Complex_Matrix.adjoint P)) *\\<^sub>v (P *\\<^sub>v (unit_vec dimR i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A *\\<^sub>v (P *\\<^sub>v unit_vec dimR i) =\n    P * B * Complex_Matrix.adjoint P *\\<^sub>v (P *\\<^sub>v unit_vec dimR i)", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  P \\<in> fc_mats\n  similar_mat_wit A B P (Complex_Matrix.adjoint P)\n  diagonal_mat B\n  i < n\n\ngoal (1 subgoal):\n 1. A *\\<^sub>v (P *\\<^sub>v unit_vec dimR i) =\n    P * B * Complex_Matrix.adjoint P *\\<^sub>v (P *\\<^sub>v unit_vec dimR i)", "unfolding similar_mat_wit_def"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  P \\<in> fc_mats\n  let n = dim_row A\n  in {A, B, P, Complex_Matrix.adjoint P} \\<subseteq> carrier_mat n n \\<and>\n     P * Complex_Matrix.adjoint P = 1\\<^sub>m n \\<and>\n     Complex_Matrix.adjoint P * P = 1\\<^sub>m n \\<and>\n     A = P * B * Complex_Matrix.adjoint P\n  diagonal_mat B\n  i < n\n\ngoal (1 subgoal):\n 1. A *\\<^sub>v (P *\\<^sub>v unit_vec dimR i) =\n    P * B * Complex_Matrix.adjoint P *\\<^sub>v (P *\\<^sub>v unit_vec dimR i)", "by metis"], ["proof (state)\nthis:\n  A *\\<^sub>v (P *\\<^sub>v unit_vec dimR i) =\n  P * B * Complex_Matrix.adjoint P *\\<^sub>v (P *\\<^sub>v unit_vec dimR i)\n\ngoal (1 subgoal):\n 1. A *\\<^sub>v (P *\\<^sub>v unit_vec dimR i) =\n    B $$ (i, i) \\<cdot>\\<^sub>v (P *\\<^sub>v unit_vec dimR i)", "also"], ["proof (state)\nthis:\n  A *\\<^sub>v (P *\\<^sub>v unit_vec dimR i) =\n  P * B * Complex_Matrix.adjoint P *\\<^sub>v (P *\\<^sub>v unit_vec dimR i)\n\ngoal (1 subgoal):\n 1. A *\\<^sub>v (P *\\<^sub>v unit_vec dimR i) =\n    B $$ (i, i) \\<cdot>\\<^sub>v (P *\\<^sub>v unit_vec dimR i)", "have \"... = P * B * (Complex_Matrix.adjoint P) * P *\\<^sub>v (unit_vec dimR i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P * B * Complex_Matrix.adjoint P *\\<^sub>v\n    (P *\\<^sub>v unit_vec dimR i) =\n    P * B * Complex_Matrix.adjoint P * P *\\<^sub>v unit_vec dimR i", "proof (rule mat_vec_mult_assoc[of _ dimR dimR], (auto simp add: assms fc_mats_carrier))"], ["proof (state)\ngoal (2 subgoals):\n 1. P * B * Complex_Matrix.adjoint P \\<in> carrier_mat dimR dimR\n 2. P \\<in> carrier_mat dimR dimR", "show \"P \\<in> carrier_mat dimR dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<in> carrier_mat dimR dimR", "using assms fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  P \\<in> fc_mats\n  similar_mat_wit A B P (Complex_Matrix.adjoint P)\n  diagonal_mat B\n  i < n\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. P \\<in> carrier_mat dimR dimR", "by simp"], ["proof (state)\nthis:\n  P \\<in> carrier_mat dimR dimR\n\ngoal (1 subgoal):\n 1. P * B * Complex_Matrix.adjoint P \\<in> carrier_mat dimR dimR", "show \"P * B * Complex_Matrix.adjoint P \\<in> carrier_mat dimR dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P * B * Complex_Matrix.adjoint P \\<in> carrier_mat dimR dimR", "using assms fc_mats_carrier"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  P \\<in> fc_mats\n  similar_mat_wit A B P (Complex_Matrix.adjoint P)\n  diagonal_mat B\n  i < n\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. P * B * Complex_Matrix.adjoint P \\<in> carrier_mat dimR dimR", "by auto"], ["proof (state)\nthis:\n  P * B * Complex_Matrix.adjoint P \\<in> carrier_mat dimR dimR\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P * B * Complex_Matrix.adjoint P *\\<^sub>v (P *\\<^sub>v unit_vec dimR i) =\n  P * B * Complex_Matrix.adjoint P * P *\\<^sub>v unit_vec dimR i\n\ngoal (1 subgoal):\n 1. A *\\<^sub>v (P *\\<^sub>v unit_vec dimR i) =\n    B $$ (i, i) \\<cdot>\\<^sub>v (P *\\<^sub>v unit_vec dimR i)", "also"], ["proof (state)\nthis:\n  P * B * Complex_Matrix.adjoint P *\\<^sub>v (P *\\<^sub>v unit_vec dimR i) =\n  P * B * Complex_Matrix.adjoint P * P *\\<^sub>v unit_vec dimR i\n\ngoal (1 subgoal):\n 1. A *\\<^sub>v (P *\\<^sub>v unit_vec dimR i) =\n    B $$ (i, i) \\<cdot>\\<^sub>v (P *\\<^sub>v unit_vec dimR i)", "have \"... = P * B * ((Complex_Matrix.adjoint P) * P) *\\<^sub>v (unit_vec dimR i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P * B * Complex_Matrix.adjoint P * P *\\<^sub>v unit_vec dimR i =\n    P * B * (Complex_Matrix.adjoint P * P) *\\<^sub>v unit_vec dimR i", "using assms dim_eq"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  P \\<in> fc_mats\n  similar_mat_wit A B P (Complex_Matrix.adjoint P)\n  diagonal_mat B\n  i < n\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. P * B * Complex_Matrix.adjoint P * P *\\<^sub>v unit_vec dimR i =\n    P * B * (Complex_Matrix.adjoint P * P) *\\<^sub>v unit_vec dimR i", "by (smt fc_mats_carrier mat_assoc_test(1) similar_mat_witD2(6) similar_mat_wit_sym)"], ["proof (state)\nthis:\n  P * B * Complex_Matrix.adjoint P * P *\\<^sub>v unit_vec dimR i =\n  P * B * (Complex_Matrix.adjoint P * P) *\\<^sub>v unit_vec dimR i\n\ngoal (1 subgoal):\n 1. A *\\<^sub>v (P *\\<^sub>v unit_vec dimR i) =\n    B $$ (i, i) \\<cdot>\\<^sub>v (P *\\<^sub>v unit_vec dimR i)", "also"], ["proof (state)\nthis:\n  P * B * Complex_Matrix.adjoint P * P *\\<^sub>v unit_vec dimR i =\n  P * B * (Complex_Matrix.adjoint P * P) *\\<^sub>v unit_vec dimR i\n\ngoal (1 subgoal):\n 1. A *\\<^sub>v (P *\\<^sub>v unit_vec dimR i) =\n    B $$ (i, i) \\<cdot>\\<^sub>v (P *\\<^sub>v unit_vec dimR i)", "have \"... = P * B *\\<^sub>v (unit_vec dimR i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P * B * (Complex_Matrix.adjoint P * P) *\\<^sub>v unit_vec dimR i =\n    P * B *\\<^sub>v unit_vec dimR i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P * B * (Complex_Matrix.adjoint P * P) *\\<^sub>v unit_vec dimR i =\n    P * B *\\<^sub>v unit_vec dimR i", "have \"(Complex_Matrix.adjoint P) * P = 1\\<^sub>m dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint P * P = 1\\<^sub>m dimR", "using assms dim_eq"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  P \\<in> fc_mats\n  similar_mat_wit A B P (Complex_Matrix.adjoint P)\n  diagonal_mat B\n  i < n\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint P * P = 1\\<^sub>m dimR", "unfolding similar_mat_wit_def"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  P \\<in> fc_mats\n  let n = dim_row A\n  in {A, B, P, Complex_Matrix.adjoint P} \\<subseteq> carrier_mat n n \\<and>\n     P * Complex_Matrix.adjoint P = 1\\<^sub>m n \\<and>\n     Complex_Matrix.adjoint P * P = 1\\<^sub>m n \\<and>\n     A = P * B * Complex_Matrix.adjoint P\n  diagonal_mat B\n  i < n\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint P * P = 1\\<^sub>m dimR", "by (simp add: fc_mats_carrier)"], ["proof (state)\nthis:\n  Complex_Matrix.adjoint P * P = 1\\<^sub>m dimR\n\ngoal (1 subgoal):\n 1. P * B * (Complex_Matrix.adjoint P * P) *\\<^sub>v unit_vec dimR i =\n    P * B *\\<^sub>v unit_vec dimR i", "thus ?thesis"], ["proof (prove)\nusing this:\n  Complex_Matrix.adjoint P * P = 1\\<^sub>m dimR\n\ngoal (1 subgoal):\n 1. P * B * (Complex_Matrix.adjoint P * P) *\\<^sub>v unit_vec dimR i =\n    P * B *\\<^sub>v unit_vec dimR i", "using assms(2) local.fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  Complex_Matrix.adjoint P * P = 1\\<^sub>m dimR\n  B \\<in> fc_mats\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. P * B * (Complex_Matrix.adjoint P * P) *\\<^sub>v unit_vec dimR i =\n    P * B *\\<^sub>v unit_vec dimR i", "by auto"], ["proof (state)\nthis:\n  P * B * (Complex_Matrix.adjoint P * P) *\\<^sub>v unit_vec dimR i =\n  P * B *\\<^sub>v unit_vec dimR i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P * B * (Complex_Matrix.adjoint P * P) *\\<^sub>v unit_vec dimR i =\n  P * B *\\<^sub>v unit_vec dimR i\n\ngoal (1 subgoal):\n 1. A *\\<^sub>v (P *\\<^sub>v unit_vec dimR i) =\n    B $$ (i, i) \\<cdot>\\<^sub>v (P *\\<^sub>v unit_vec dimR i)", "also"], ["proof (state)\nthis:\n  P * B * (Complex_Matrix.adjoint P * P) *\\<^sub>v unit_vec dimR i =\n  P * B *\\<^sub>v unit_vec dimR i\n\ngoal (1 subgoal):\n 1. A *\\<^sub>v (P *\\<^sub>v unit_vec dimR i) =\n    B $$ (i, i) \\<cdot>\\<^sub>v (P *\\<^sub>v unit_vec dimR i)", "have \"... = P *\\<^sub>v (B *\\<^sub>v (unit_vec dimR i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P * B *\\<^sub>v unit_vec dimR i =\n    P *\\<^sub>v (B *\\<^sub>v unit_vec dimR i)", "using mat_vec_mult_assoc assms fc_mats_carrier \n      dim_eq"], ["proof (prove)\nusing this:\n  \\<lbrakk>?A \\<in> carrier_mat ?n ?p; ?B \\<in> carrier_mat ?p ?q;\n   dim_vec ?v = ?q\\<rbrakk>\n  \\<Longrightarrow> ?A *\\<^sub>v (?B *\\<^sub>v ?v) = ?A * ?B *\\<^sub>v ?v\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  P \\<in> fc_mats\n  similar_mat_wit A B P (Complex_Matrix.adjoint P)\n  diagonal_mat B\n  i < n\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. P * B *\\<^sub>v unit_vec dimR i =\n    P *\\<^sub>v (B *\\<^sub>v unit_vec dimR i)", "by simp"], ["proof (state)\nthis:\n  P * B *\\<^sub>v unit_vec dimR i =\n  P *\\<^sub>v (B *\\<^sub>v unit_vec dimR i)\n\ngoal (1 subgoal):\n 1. A *\\<^sub>v (P *\\<^sub>v unit_vec dimR i) =\n    B $$ (i, i) \\<cdot>\\<^sub>v (P *\\<^sub>v unit_vec dimR i)", "also"], ["proof (state)\nthis:\n  P * B *\\<^sub>v unit_vec dimR i =\n  P *\\<^sub>v (B *\\<^sub>v unit_vec dimR i)\n\ngoal (1 subgoal):\n 1. A *\\<^sub>v (P *\\<^sub>v unit_vec dimR i) =\n    B $$ (i, i) \\<cdot>\\<^sub>v (P *\\<^sub>v unit_vec dimR i)", "have \"... = P *\\<^sub>v (B $$ (i,i) \\<cdot>\\<^sub>v (unit_vec dimR i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P *\\<^sub>v (B *\\<^sub>v unit_vec dimR i) =\n    P *\\<^sub>v (B $$ (i, i) \\<cdot>\\<^sub>v unit_vec dimR i)", "using assms diagonal_unit_vec \n      fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  P \\<in> fc_mats\n  similar_mat_wit A B P (Complex_Matrix.adjoint P)\n  diagonal_mat B\n  i < n\n  \\<lbrakk>?B \\<in> carrier_mat ?n ?n; diagonal_mat ?B\\<rbrakk>\n  \\<Longrightarrow> ?B *\\<^sub>v unit_vec ?n ?i =\n                    ?B $$ (?i, ?i) \\<cdot>\\<^sub>v unit_vec ?n ?i\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. P *\\<^sub>v (B *\\<^sub>v unit_vec dimR i) =\n    P *\\<^sub>v (B $$ (i, i) \\<cdot>\\<^sub>v unit_vec dimR i)", "by simp"], ["proof (state)\nthis:\n  P *\\<^sub>v (B *\\<^sub>v unit_vec dimR i) =\n  P *\\<^sub>v (B $$ (i, i) \\<cdot>\\<^sub>v unit_vec dimR i)\n\ngoal (1 subgoal):\n 1. A *\\<^sub>v (P *\\<^sub>v unit_vec dimR i) =\n    B $$ (i, i) \\<cdot>\\<^sub>v (P *\\<^sub>v unit_vec dimR i)", "also"], ["proof (state)\nthis:\n  P *\\<^sub>v (B *\\<^sub>v unit_vec dimR i) =\n  P *\\<^sub>v (B $$ (i, i) \\<cdot>\\<^sub>v unit_vec dimR i)\n\ngoal (1 subgoal):\n 1. A *\\<^sub>v (P *\\<^sub>v unit_vec dimR i) =\n    B $$ (i, i) \\<cdot>\\<^sub>v (P *\\<^sub>v unit_vec dimR i)", "have \"... = B $$ (i,i) \\<cdot>\\<^sub>v (P *\\<^sub>v (unit_vec dimR i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P *\\<^sub>v (B $$ (i, i) \\<cdot>\\<^sub>v unit_vec dimR i) =\n    B $$ (i, i) \\<cdot>\\<^sub>v (P *\\<^sub>v unit_vec dimR i)", "proof (rule mult_mat_vec)"], ["proof (state)\ngoal (2 subgoals):\n 1. P \\<in> carrier_mat ?nr ?nc\n 2. unit_vec dimR i \\<in> carrier_vec ?nc", "show \"P \\<in> carrier_mat dimR dimC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<in> carrier_mat dimR dimC", "using assms fc_mats_carrier"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  P \\<in> fc_mats\n  similar_mat_wit A B P (Complex_Matrix.adjoint P)\n  diagonal_mat B\n  i < n\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. P \\<in> carrier_mat dimR dimC", "by simp"], ["proof (state)\nthis:\n  P \\<in> carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. unit_vec dimR i \\<in> carrier_vec dimC", "show \"unit_vec dimR i \\<in> carrier_vec dimC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unit_vec dimR i \\<in> carrier_vec dimC", "using dim_eq"], ["proof (prove)\nusing this:\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. unit_vec dimR i \\<in> carrier_vec dimC", "by simp"], ["proof (state)\nthis:\n  unit_vec dimR i \\<in> carrier_vec dimC\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P *\\<^sub>v (B $$ (i, i) \\<cdot>\\<^sub>v unit_vec dimR i) =\n  B $$ (i, i) \\<cdot>\\<^sub>v (P *\\<^sub>v unit_vec dimR i)\n\ngoal (1 subgoal):\n 1. A *\\<^sub>v (P *\\<^sub>v unit_vec dimR i) =\n    B $$ (i, i) \\<cdot>\\<^sub>v (P *\\<^sub>v unit_vec dimR i)", "finally"], ["proof (chain)\npicking this:\n  A *\\<^sub>v (P *\\<^sub>v unit_vec dimR i) =\n  B $$ (i, i) \\<cdot>\\<^sub>v (P *\\<^sub>v unit_vec dimR i)", "show ?thesis"], ["proof (prove)\nusing this:\n  A *\\<^sub>v (P *\\<^sub>v unit_vec dimR i) =\n  B $$ (i, i) \\<cdot>\\<^sub>v (P *\\<^sub>v unit_vec dimR i)\n\ngoal (1 subgoal):\n 1. A *\\<^sub>v (P *\\<^sub>v unit_vec dimR i) =\n    B $$ (i, i) \\<cdot>\\<^sub>v (P *\\<^sub>v unit_vec dimR i)", "."], ["proof (state)\nthis:\n  A *\\<^sub>v (P *\\<^sub>v unit_vec dimR i) =\n  B $$ (i, i) \\<cdot>\\<^sub>v (P *\\<^sub>v unit_vec dimR i)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Projectors\\<close>"], ["", "definition projector where\n\"projector M \\<longleftrightarrow> (hermitian M \\<and> M * M = M)\""], ["", "lemma projector_hermitian:\n  assumes \"projector M\"\n  shows \"hermitian M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hermitian M", "using assms"], ["proof (prove)\nusing this:\n  projector M\n\ngoal (1 subgoal):\n 1. hermitian M", "unfolding projector_def"], ["proof (prove)\nusing this:\n  hermitian M \\<and> M * M = M\n\ngoal (1 subgoal):\n 1. hermitian M", "by simp"], ["", "lemma zero_projector[simp]:\n  shows \"projector (0\\<^sub>m n n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. projector (0\\<^sub>m n n)", "unfolding projector_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. hermitian (0\\<^sub>m n n) \\<and>\n    0\\<^sub>m n n * 0\\<^sub>m n n = 0\\<^sub>m n n", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. hermitian (0\\<^sub>m n n)\n 2. 0\\<^sub>m n n * 0\\<^sub>m n n = 0\\<^sub>m n n", "show \"hermitian (0\\<^sub>m n n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hermitian (0\\<^sub>m n n)", "using zero_hermitian[of n]"], ["proof (prove)\nusing this:\n  hermitian (0\\<^sub>m n n)\n\ngoal (1 subgoal):\n 1. hermitian (0\\<^sub>m n n)", "by simp"], ["proof (state)\nthis:\n  hermitian (0\\<^sub>m n n)\n\ngoal (1 subgoal):\n 1. 0\\<^sub>m n n * 0\\<^sub>m n n = 0\\<^sub>m n n", "show \"0\\<^sub>m n n * 0\\<^sub>m n n = 0\\<^sub>m n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0\\<^sub>m n n * 0\\<^sub>m n n = 0\\<^sub>m n n", "by simp"], ["proof (state)\nthis:\n  0\\<^sub>m n n * 0\\<^sub>m n n = 0\\<^sub>m n n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma projector_square_eq:\n  assumes \"projector M\"\n  shows \"M * M = M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M * M = M", "using assms"], ["proof (prove)\nusing this:\n  projector M\n\ngoal (1 subgoal):\n 1. M * M = M", "unfolding projector_def"], ["proof (prove)\nusing this:\n  hermitian M \\<and> M * M = M\n\ngoal (1 subgoal):\n 1. M * M = M", "by simp"], ["", "lemma projector_positive:\n  assumes \"projector M\"\n  shows \"Complex_Matrix.positive M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.positive M", "proof (rule positive_if_decomp)"], ["proof (state)\ngoal (2 subgoals):\n 1. M \\<in> carrier_mat ?n ?n\n 2. \\<exists>Ma. Ma * Complex_Matrix.adjoint Ma = M", "show \"M \\<in> carrier_mat (dim_row M) (dim_row M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M \\<in> carrier_mat (dim_row M) (dim_row M)", "using assms projector_hermitian hermitian_square"], ["proof (prove)\nusing this:\n  projector M\n  projector ?M \\<Longrightarrow> hermitian ?M\n  hermitian ?M \\<Longrightarrow>\n  ?M \\<in> carrier_mat (dim_row ?M) (dim_row ?M)\n\ngoal (1 subgoal):\n 1. M \\<in> carrier_mat (dim_row M) (dim_row M)", "by auto"], ["proof (state)\nthis:\n  M \\<in> carrier_mat (dim_row M) (dim_row M)\n\ngoal (1 subgoal):\n 1. \\<exists>Ma. Ma * Complex_Matrix.adjoint Ma = M", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>Ma. Ma * Complex_Matrix.adjoint Ma = M", "have \"M = Complex_Matrix.adjoint M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M = Complex_Matrix.adjoint M", "using assms projector_hermitian[of M]"], ["proof (prove)\nusing this:\n  projector M\n  projector M \\<Longrightarrow> hermitian M\n\ngoal (1 subgoal):\n 1. M = Complex_Matrix.adjoint M", "unfolding hermitian_def"], ["proof (prove)\nusing this:\n  projector M\n  projector M \\<Longrightarrow> Complex_Matrix.adjoint M = M\n\ngoal (1 subgoal):\n 1. M = Complex_Matrix.adjoint M", "by simp"], ["proof (state)\nthis:\n  M = Complex_Matrix.adjoint M\n\ngoal (1 subgoal):\n 1. \\<exists>Ma. Ma * Complex_Matrix.adjoint Ma = M", "hence \"M * Complex_Matrix.adjoint M = M * M\""], ["proof (prove)\nusing this:\n  M = Complex_Matrix.adjoint M\n\ngoal (1 subgoal):\n 1. M * Complex_Matrix.adjoint M = M * M", "by simp"], ["proof (state)\nthis:\n  M * Complex_Matrix.adjoint M = M * M\n\ngoal (1 subgoal):\n 1. \\<exists>Ma. Ma * Complex_Matrix.adjoint Ma = M", "also"], ["proof (state)\nthis:\n  M * Complex_Matrix.adjoint M = M * M\n\ngoal (1 subgoal):\n 1. \\<exists>Ma. Ma * Complex_Matrix.adjoint Ma = M", "have \"... = M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M * M = M", "using assms projector_square_eq"], ["proof (prove)\nusing this:\n  projector M\n  projector ?M \\<Longrightarrow> ?M * ?M = ?M\n\ngoal (1 subgoal):\n 1. M * M = M", "by auto"], ["proof (state)\nthis:\n  M * M = M\n\ngoal (1 subgoal):\n 1. \\<exists>Ma. Ma * Complex_Matrix.adjoint Ma = M", "finally"], ["proof (chain)\npicking this:\n  M * Complex_Matrix.adjoint M = M", "have \"M * Complex_Matrix.adjoint M = M\""], ["proof (prove)\nusing this:\n  M * Complex_Matrix.adjoint M = M\n\ngoal (1 subgoal):\n 1. M * Complex_Matrix.adjoint M = M", "."], ["proof (state)\nthis:\n  M * Complex_Matrix.adjoint M = M\n\ngoal (1 subgoal):\n 1. \\<exists>Ma. Ma * Complex_Matrix.adjoint Ma = M", "thus \"\\<exists>Ma. Ma * Complex_Matrix.adjoint Ma = M\""], ["proof (prove)\nusing this:\n  M * Complex_Matrix.adjoint M = M\n\ngoal (1 subgoal):\n 1. \\<exists>Ma. Ma * Complex_Matrix.adjoint Ma = M", "by auto"], ["proof (state)\nthis:\n  \\<exists>Ma. Ma * Complex_Matrix.adjoint Ma = M\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma projector_collapse_trace:\n  assumes \"projector (P::complex Matrix.mat)\"\n  and \"P \\<in> carrier_mat n n\"\n  and \"R\\<in> carrier_mat n n\"\nshows \"Complex_Matrix.trace (P * R * P) = Complex_Matrix.trace (R * P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (P * R * P) = Complex_Matrix.trace (R * P)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (P * R * P) = Complex_Matrix.trace (R * P)", "have \"Complex_Matrix.trace (R * P) = Complex_Matrix.trace (P * R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (R * P) = Complex_Matrix.trace (P * R)", "using trace_comm assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?A \\<in> carrier_mat ?n ?n; ?B \\<in> carrier_mat ?n ?n\\<rbrakk>\n  \\<Longrightarrow> Complex_Matrix.trace (?A * ?B) =\n                    Complex_Matrix.trace (?B * ?A)\n  projector P\n  P \\<in> carrier_mat n n\n  R \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (R * P) = Complex_Matrix.trace (P * R)", "by auto"], ["proof (state)\nthis:\n  Complex_Matrix.trace (R * P) = Complex_Matrix.trace (P * R)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (P * R * P) = Complex_Matrix.trace (R * P)", "also"], ["proof (state)\nthis:\n  Complex_Matrix.trace (R * P) = Complex_Matrix.trace (P * R)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (P * R * P) = Complex_Matrix.trace (R * P)", "have \"... = Complex_Matrix.trace ((P * P) * R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (P * R) = Complex_Matrix.trace (P * P * R)", "using assms projector_square_eq[of P]"], ["proof (prove)\nusing this:\n  projector P\n  P \\<in> carrier_mat n n\n  R \\<in> carrier_mat n n\n  projector P \\<Longrightarrow> P * P = P\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (P * R) = Complex_Matrix.trace (P * P * R)", "by simp"], ["proof (state)\nthis:\n  Complex_Matrix.trace (P * R) = Complex_Matrix.trace (P * P * R)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (P * R * P) = Complex_Matrix.trace (R * P)", "also"], ["proof (state)\nthis:\n  Complex_Matrix.trace (P * R) = Complex_Matrix.trace (P * P * R)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (P * R * P) = Complex_Matrix.trace (R * P)", "have \"... = Complex_Matrix.trace (P * (P * R))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (P * P * R) = Complex_Matrix.trace (P * (P * R))", "using assms"], ["proof (prove)\nusing this:\n  projector P\n  P \\<in> carrier_mat n n\n  R \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (P * P * R) = Complex_Matrix.trace (P * (P * R))", "by auto"], ["proof (state)\nthis:\n  Complex_Matrix.trace (P * P * R) = Complex_Matrix.trace (P * (P * R))\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (P * R * P) = Complex_Matrix.trace (R * P)", "also"], ["proof (state)\nthis:\n  Complex_Matrix.trace (P * P * R) = Complex_Matrix.trace (P * (P * R))\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (P * R * P) = Complex_Matrix.trace (R * P)", "have \"... = Complex_Matrix.trace (P * R * P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (P * (P * R)) = Complex_Matrix.trace (P * R * P)", "using trace_comm[of P n \"P * R\"] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>P \\<in> carrier_mat n n; P * R \\<in> carrier_mat n n\\<rbrakk>\n  \\<Longrightarrow> Complex_Matrix.trace (P * (P * R)) =\n                    Complex_Matrix.trace (P * R * P)\n  projector P\n  P \\<in> carrier_mat n n\n  R \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (P * (P * R)) = Complex_Matrix.trace (P * R * P)", "by auto"], ["proof (state)\nthis:\n  Complex_Matrix.trace (P * (P * R)) = Complex_Matrix.trace (P * R * P)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (P * R * P) = Complex_Matrix.trace (R * P)", "finally"], ["proof (chain)\npicking this:\n  Complex_Matrix.trace (R * P) = Complex_Matrix.trace (P * R * P)", "have \"Complex_Matrix.trace (R * P) = Complex_Matrix.trace (P * R * P)\""], ["proof (prove)\nusing this:\n  Complex_Matrix.trace (R * P) = Complex_Matrix.trace (P * R * P)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (R * P) = Complex_Matrix.trace (P * R * P)", "."], ["proof (state)\nthis:\n  Complex_Matrix.trace (R * P) = Complex_Matrix.trace (P * R * P)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (P * R * P) = Complex_Matrix.trace (R * P)", "thus ?thesis"], ["proof (prove)\nusing this:\n  Complex_Matrix.trace (R * P) = Complex_Matrix.trace (P * R * P)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (P * R * P) = Complex_Matrix.trace (R * P)", "by simp"], ["proof (state)\nthis:\n  Complex_Matrix.trace (P * R * P) = Complex_Matrix.trace (R * P)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma positive_proj_trace:\n  assumes \"projector (P::complex Matrix.mat)\"\n  and \"Complex_Matrix.positive R\"\n  and \"P \\<in> carrier_mat n n\"\n  and \"R\\<in> carrier_mat n n\"\nshows \"Complex_Matrix.trace (R * P) \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> Complex_Matrix.trace (R * P)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 \\<le> Complex_Matrix.trace (R * P)", "have \"Complex_Matrix.trace (R * P) = Complex_Matrix.trace ((P * R) * P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (R * P) = Complex_Matrix.trace (P * R * P)", "using  assms projector_collapse_trace"], ["proof (prove)\nusing this:\n  projector P\n  Complex_Matrix.positive R\n  P \\<in> carrier_mat n n\n  R \\<in> carrier_mat n n\n  \\<lbrakk>projector ?P; ?P \\<in> carrier_mat ?n ?n;\n   ?R \\<in> carrier_mat ?n ?n\\<rbrakk>\n  \\<Longrightarrow> Complex_Matrix.trace (?P * ?R * ?P) =\n                    Complex_Matrix.trace (?R * ?P)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (R * P) = Complex_Matrix.trace (P * R * P)", "by auto"], ["proof (state)\nthis:\n  Complex_Matrix.trace (R * P) = Complex_Matrix.trace (P * R * P)\n\ngoal (1 subgoal):\n 1. 0 \\<le> Complex_Matrix.trace (R * P)", "also"], ["proof (state)\nthis:\n  Complex_Matrix.trace (R * P) = Complex_Matrix.trace (P * R * P)\n\ngoal (1 subgoal):\n 1. 0 \\<le> Complex_Matrix.trace (R * P)", "have \"... = Complex_Matrix.trace ((P * R) * (Complex_Matrix.adjoint P))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (P * R * P) =\n    Complex_Matrix.trace (P * R * Complex_Matrix.adjoint P)", "using assms projector_hermitian[of P]"], ["proof (prove)\nusing this:\n  projector P\n  Complex_Matrix.positive R\n  P \\<in> carrier_mat n n\n  R \\<in> carrier_mat n n\n  projector P \\<Longrightarrow> hermitian P\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (P * R * P) =\n    Complex_Matrix.trace (P * R * Complex_Matrix.adjoint P)", "unfolding hermitian_def"], ["proof (prove)\nusing this:\n  projector P\n  Complex_Matrix.positive R\n  P \\<in> carrier_mat n n\n  R \\<in> carrier_mat n n\n  projector P \\<Longrightarrow> Complex_Matrix.adjoint P = P\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (P * R * P) =\n    Complex_Matrix.trace (P * R * Complex_Matrix.adjoint P)", "by simp"], ["proof (state)\nthis:\n  Complex_Matrix.trace (P * R * P) =\n  Complex_Matrix.trace (P * R * Complex_Matrix.adjoint P)\n\ngoal (1 subgoal):\n 1. 0 \\<le> Complex_Matrix.trace (R * P)", "also"], ["proof (state)\nthis:\n  Complex_Matrix.trace (P * R * P) =\n  Complex_Matrix.trace (P * R * Complex_Matrix.adjoint P)\n\ngoal (1 subgoal):\n 1. 0 \\<le> Complex_Matrix.trace (R * P)", "have \"... \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> Complex_Matrix.trace (P * R * Complex_Matrix.adjoint P)", "proof (rule positive_trace)"], ["proof (state)\ngoal (2 subgoals):\n 1. P * R * Complex_Matrix.adjoint P \\<in> carrier_mat ?n ?n\n 2. Complex_Matrix.positive (P * R * Complex_Matrix.adjoint P)", "show \" P * R * Complex_Matrix.adjoint P \\<in> carrier_mat n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P * R * Complex_Matrix.adjoint P \\<in> carrier_mat n n", "using assms"], ["proof (prove)\nusing this:\n  projector P\n  Complex_Matrix.positive R\n  P \\<in> carrier_mat n n\n  R \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. P * R * Complex_Matrix.adjoint P \\<in> carrier_mat n n", "by auto"], ["proof (state)\nthis:\n  P * R * Complex_Matrix.adjoint P \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. Complex_Matrix.positive (P * R * Complex_Matrix.adjoint P)", "show \"Complex_Matrix.positive (P * R * Complex_Matrix.adjoint P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.positive (P * R * Complex_Matrix.adjoint P)", "by (rule positive_close_under_left_right_mult_adjoint[of _ n], (auto simp add: assms))"], ["proof (state)\nthis:\n  Complex_Matrix.positive (P * R * Complex_Matrix.adjoint P)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 \\<le> Complex_Matrix.trace (P * R * Complex_Matrix.adjoint P)\n\ngoal (1 subgoal):\n 1. 0 \\<le> Complex_Matrix.trace (R * P)", "finally"], ["proof (chain)\npicking this:\n  0 \\<le> Complex_Matrix.trace (R * P)", "show ?thesis"], ["proof (prove)\nusing this:\n  0 \\<le> Complex_Matrix.trace (R * P)\n\ngoal (1 subgoal):\n 1. 0 \\<le> Complex_Matrix.trace (R * P)", "."], ["proof (state)\nthis:\n  0 \\<le> Complex_Matrix.trace (R * P)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma trace_proj_pos_real:\n  assumes \"projector (P::complex Matrix.mat)\"\n  and \"Complex_Matrix.positive R\"\n  and \"P \\<in> carrier_mat n n\"\n  and \"R\\<in> carrier_mat n n\"\nshows \"Re (Complex_Matrix.trace (R * P)) = Complex_Matrix.trace (R * P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. complex_of_real (Re (Complex_Matrix.trace (R * P))) =\n    Complex_Matrix.trace (R * P)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. complex_of_real (Re (Complex_Matrix.trace (R * P))) =\n    Complex_Matrix.trace (R * P)", "have \"Complex_Matrix.trace (R * P) \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> Complex_Matrix.trace (R * P)", "using assms  positive_proj_trace"], ["proof (prove)\nusing this:\n  projector P\n  Complex_Matrix.positive R\n  P \\<in> carrier_mat n n\n  R \\<in> carrier_mat n n\n  \\<lbrakk>projector ?P; Complex_Matrix.positive ?R;\n   ?P \\<in> carrier_mat ?n ?n; ?R \\<in> carrier_mat ?n ?n\\<rbrakk>\n  \\<Longrightarrow> 0 \\<le> Complex_Matrix.trace (?R * ?P)\n\ngoal (1 subgoal):\n 1. 0 \\<le> Complex_Matrix.trace (R * P)", "by simp"], ["proof (state)\nthis:\n  0 \\<le> Complex_Matrix.trace (R * P)\n\ngoal (1 subgoal):\n 1. complex_of_real (Re (Complex_Matrix.trace (R * P))) =\n    Complex_Matrix.trace (R * P)", "thus ?thesis"], ["proof (prove)\nusing this:\n  0 \\<le> Complex_Matrix.trace (R * P)\n\ngoal (1 subgoal):\n 1. complex_of_real (Re (Complex_Matrix.trace (R * P))) =\n    Complex_Matrix.trace (R * P)", "by (simp add: complex_eqI)"], ["proof (state)\nthis:\n  complex_of_real (Re (Complex_Matrix.trace (R * P))) =\n  Complex_Matrix.trace (R * P)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in cpx_sq_mat) trace_sum_mat_proj_pos_real:\n  fixes f::\"'a \\<Rightarrow> real\"\n  assumes \"finite I\"\n  and \"\\<forall> i\\<in> I. projector (P i)\"\n  and \"Complex_Matrix.positive R\"\n  and \"\\<forall>i\\<in> I. P i \\<in> fc_mats\"\n  and \"R \\<in> fc_mats\"\nshows \"Complex_Matrix.trace (R * (sum_mat (\\<lambda>i. f i \\<cdot>\\<^sub>m (P i)) I)) = \n  Re (Complex_Matrix.trace (R * (sum_mat (\\<lambda>i. f i \\<cdot>\\<^sub>m (P i)) I)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (R *\n      local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n       I) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (R *\n            local.sum_mat\n             (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (R *\n      local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n       I) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (R *\n            local.sum_mat\n             (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))", "have sm:  \"\\<And>x. x \\<in> I \\<Longrightarrow> Complex_Matrix.trace (f x \\<cdot>\\<^sub>m (R * P x)) = \n    f x * Complex_Matrix.trace (R * P x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> I \\<Longrightarrow>\n       Complex_Matrix.trace\n        (complex_of_real (f x) \\<cdot>\\<^sub>m (R * P x)) =\n       complex_of_real (f x) * Complex_Matrix.trace (R * P x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> I \\<Longrightarrow>\n       Complex_Matrix.trace\n        (complex_of_real (f x) \\<cdot>\\<^sub>m (R * P x)) =\n       complex_of_real (f x) * Complex_Matrix.trace (R * P x)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> I \\<Longrightarrow>\n       Complex_Matrix.trace\n        (complex_of_real (f x) \\<cdot>\\<^sub>m (R * P x)) =\n       complex_of_real (f x) * Complex_Matrix.trace (R * P x)", "assume \"i\\<in> I\""], ["proof (state)\nthis:\n  i \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> I \\<Longrightarrow>\n       Complex_Matrix.trace\n        (complex_of_real (f x) \\<cdot>\\<^sub>m (R * P x)) =\n       complex_of_real (f x) * Complex_Matrix.trace (R * P x)", "show \"Complex_Matrix.trace (f i \\<cdot>\\<^sub>m (R * P i)) = f i * Complex_Matrix.trace (R * P i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (complex_of_real (f i) \\<cdot>\\<^sub>m (R * P i)) =\n    complex_of_real (f i) * Complex_Matrix.trace (R * P i)", "proof (rule trace_smult)"], ["proof (state)\ngoal (1 subgoal):\n 1. R * P i \\<in> carrier_mat ?n ?n", "show \"R * P i \\<in> carrier_mat dimR dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R * P i \\<in> carrier_mat dimR dimR", "using assms cpx_sq_mat_mult fc_mats_carrier \\<open>i\\<in> I\\<close> \n          dim_eq"], ["proof (prove)\nusing this:\n  finite I\n  \\<forall>i\\<in>I. projector (P i)\n  Complex_Matrix.positive R\n  \\<forall>i\\<in>I. P i \\<in> fc_mats\n  R \\<in> fc_mats\n  \\<lbrakk>?A \\<in> fc_mats; ?B \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> ?A * ?B \\<in> fc_mats\n  fc_mats = carrier_mat dimR dimC\n  i \\<in> I\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. R * P i \\<in> carrier_mat dimR dimR", "by simp"], ["proof (state)\nthis:\n  R * P i \\<in> carrier_mat dimR dimR\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Complex_Matrix.trace (complex_of_real (f i) \\<cdot>\\<^sub>m (R * P i)) =\n  complex_of_real (f i) * Complex_Matrix.trace (R * P i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x2 \\<in> I \\<Longrightarrow>\n  Complex_Matrix.trace\n   (complex_of_real (f ?x2) \\<cdot>\\<^sub>m (R * P ?x2)) =\n  complex_of_real (f ?x2) * Complex_Matrix.trace (R * P ?x2)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (R *\n      local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n       I) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (R *\n            local.sum_mat\n             (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))", "have sw: \"\\<And>x. x \\<in> I \\<Longrightarrow> R * (f x \\<cdot>\\<^sub>m P x) = f x \\<cdot>\\<^sub>m (R * P x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> I \\<Longrightarrow>\n       R * (complex_of_real (f x) \\<cdot>\\<^sub>m P x) =\n       complex_of_real (f x) \\<cdot>\\<^sub>m (R * P x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> I \\<Longrightarrow>\n       R * (complex_of_real (f x) \\<cdot>\\<^sub>m P x) =\n       complex_of_real (f x) \\<cdot>\\<^sub>m (R * P x)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> I \\<Longrightarrow>\n       R * (complex_of_real (f x) \\<cdot>\\<^sub>m P x) =\n       complex_of_real (f x) \\<cdot>\\<^sub>m (R * P x)", "assume \"i \\<in> I\""], ["proof (state)\nthis:\n  i \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> I \\<Longrightarrow>\n       R * (complex_of_real (f x) \\<cdot>\\<^sub>m P x) =\n       complex_of_real (f x) \\<cdot>\\<^sub>m (R * P x)", "show \"R * (f i \\<cdot>\\<^sub>m P i) = f i \\<cdot>\\<^sub>m (R * P i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i) =\n    complex_of_real (f i) \\<cdot>\\<^sub>m (R * P i)", "proof (rule mult_smult_distrib)"], ["proof (state)\ngoal (2 subgoals):\n 1. R \\<in> carrier_mat ?nr ?n\n 2. P i \\<in> carrier_mat ?n ?nc", "show \"R\\<in> carrier_mat dimR dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R \\<in> carrier_mat dimR dimR", "using assms fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  finite I\n  \\<forall>i\\<in>I. projector (P i)\n  Complex_Matrix.positive R\n  \\<forall>i\\<in>I. P i \\<in> fc_mats\n  R \\<in> fc_mats\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. R \\<in> carrier_mat dimR dimR", "by simp"], ["proof (state)\nthis:\n  R \\<in> carrier_mat dimR dimR\n\ngoal (1 subgoal):\n 1. P i \\<in> carrier_mat dimR ?nc", "show \"P i \\<in> carrier_mat dimR dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P i \\<in> carrier_mat dimR dimR", "using assms \\<open>i\\<in> I\\<close> fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  finite I\n  \\<forall>i\\<in>I. projector (P i)\n  Complex_Matrix.positive R\n  \\<forall>i\\<in>I. P i \\<in> fc_mats\n  R \\<in> fc_mats\n  i \\<in> I\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. P i \\<in> carrier_mat dimR dimR", "by simp"], ["proof (state)\nthis:\n  P i \\<in> carrier_mat dimR dimR\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i) =\n  complex_of_real (f i) \\<cdot>\\<^sub>m (R * P i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x2 \\<in> I \\<Longrightarrow>\n  R * (complex_of_real (f ?x2) \\<cdot>\\<^sub>m P ?x2) =\n  complex_of_real (f ?x2) \\<cdot>\\<^sub>m (R * P ?x2)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (R *\n      local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n       I) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (R *\n            local.sum_mat\n             (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))", "have dr: \"Complex_Matrix.trace (R * (sum_mat (\\<lambda>i. f i \\<cdot>\\<^sub>m (P i)) I)) = \n    Complex_Matrix.trace (sum_mat (\\<lambda>i. (R * (f i \\<cdot>\\<^sub>m (P i)))) I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (R *\n      local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n       I) =\n    Complex_Matrix.trace\n     (local.sum_mat\n       (\\<lambda>i. R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i)) I)", "using sum_mat_distrib_left[of I] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite I; ?R \\<in> fc_mats;\n   \\<And>i. i \\<in> I \\<Longrightarrow> ?A i \\<in> fc_mats\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. ?R * ?A i) I =\n                    ?R * local.sum_mat ?A I\n  finite I\n  \\<forall>i\\<in>I. projector (P i)\n  Complex_Matrix.positive R\n  \\<forall>i\\<in>I. P i \\<in> fc_mats\n  R \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (R *\n      local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n       I) =\n    Complex_Matrix.trace\n     (local.sum_mat\n       (\\<lambda>i. R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i)) I)", "by (simp add: cpx_sq_mat_smult)"], ["proof (state)\nthis:\n  Complex_Matrix.trace\n   (R *\n    local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n     I) =\n  Complex_Matrix.trace\n   (local.sum_mat\n     (\\<lambda>i. R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i)) I)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (R *\n      local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n       I) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (R *\n            local.sum_mat\n             (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))", "also"], ["proof (state)\nthis:\n  Complex_Matrix.trace\n   (R *\n    local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n     I) =\n  Complex_Matrix.trace\n   (local.sum_mat\n     (\\<lambda>i. R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i)) I)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (R *\n      local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n       I) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (R *\n            local.sum_mat\n             (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))", "have trs: \"... = (\\<Sum> i\\<in> I. Complex_Matrix.trace (R * (f i \\<cdot>\\<^sub>m (P i))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (local.sum_mat\n       (\\<lambda>i. R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i)) I) =\n    (\\<Sum>i\\<in>I.\n       Complex_Matrix.trace\n        (R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i)))", "proof (rule trace_sum_mat, (simp add: assms))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> I \\<Longrightarrow>\n       R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i) \\<in> fc_mats", "show \"\\<And>i. i \\<in> I \\<Longrightarrow> R * (f i \\<cdot>\\<^sub>m P i) \\<in> fc_mats\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> I \\<Longrightarrow>\n       R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i) \\<in> fc_mats", "using assms"], ["proof (prove)\nusing this:\n  finite I\n  \\<forall>i\\<in>I. projector (P i)\n  Complex_Matrix.positive R\n  \\<forall>i\\<in>I. P i \\<in> fc_mats\n  R \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> I \\<Longrightarrow>\n       R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i) \\<in> fc_mats", "by (simp add: cpx_sq_mat_smult cpx_sq_mat_mult)"], ["proof (state)\nthis:\n  ?i2 \\<in> I \\<Longrightarrow>\n  R * (complex_of_real (f ?i2) \\<cdot>\\<^sub>m P ?i2) \\<in> fc_mats\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Complex_Matrix.trace\n   (local.sum_mat\n     (\\<lambda>i. R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i)) I) =\n  (\\<Sum>i\\<in>I.\n     Complex_Matrix.trace (R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i)))\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (R *\n      local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n       I) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (R *\n            local.sum_mat\n             (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))", "also"], ["proof (state)\nthis:\n  Complex_Matrix.trace\n   (local.sum_mat\n     (\\<lambda>i. R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i)) I) =\n  (\\<Sum>i\\<in>I.\n     Complex_Matrix.trace (R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i)))\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (R *\n      local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n       I) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (R *\n            local.sum_mat\n             (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))", "have \"... = (\\<Sum> i\\<in> I. Complex_Matrix.trace (f i \\<cdot>\\<^sub>m (R * (P i))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>I.\n       Complex_Matrix.trace\n        (R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i))) =\n    (\\<Sum>i\\<in>I.\n       Complex_Matrix.trace\n        (complex_of_real (f i) \\<cdot>\\<^sub>m (R * P i)))", "by (rule sum.cong, (simp add: sw)+)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>I.\n     Complex_Matrix.trace\n      (R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i))) =\n  (\\<Sum>i\\<in>I.\n     Complex_Matrix.trace (complex_of_real (f i) \\<cdot>\\<^sub>m (R * P i)))\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (R *\n      local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n       I) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (R *\n            local.sum_mat\n             (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>I.\n     Complex_Matrix.trace\n      (R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i))) =\n  (\\<Sum>i\\<in>I.\n     Complex_Matrix.trace (complex_of_real (f i) \\<cdot>\\<^sub>m (R * P i)))\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (R *\n      local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n       I) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (R *\n            local.sum_mat\n             (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))", "have \"... = (\\<Sum> i\\<in> I. f i * Complex_Matrix.trace (R * (P i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>I.\n       Complex_Matrix.trace\n        (complex_of_real (f i) \\<cdot>\\<^sub>m (R * P i))) =\n    (\\<Sum>i\\<in>I. complex_of_real (f i) * Complex_Matrix.trace (R * P i))", "by (rule sum.cong, (simp add: sm)+)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>I.\n     Complex_Matrix.trace\n      (complex_of_real (f i) \\<cdot>\\<^sub>m (R * P i))) =\n  (\\<Sum>i\\<in>I. complex_of_real (f i) * Complex_Matrix.trace (R * P i))\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (R *\n      local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n       I) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (R *\n            local.sum_mat\n             (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>I.\n     Complex_Matrix.trace\n      (complex_of_real (f i) \\<cdot>\\<^sub>m (R * P i))) =\n  (\\<Sum>i\\<in>I. complex_of_real (f i) * Complex_Matrix.trace (R * P i))\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (R *\n      local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n       I) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (R *\n            local.sum_mat\n             (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))", "have \"... = (\\<Sum> i\\<in> I. complex_of_real (f i * Re (Complex_Matrix.trace (R * (P i)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>I.\n       complex_of_real (f i) * Complex_Matrix.trace (R * P i)) =\n    (\\<Sum>i\\<in>I.\n       complex_of_real (f i * Re (Complex_Matrix.trace (R * P i))))", "proof (rule sum.cong, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> I \\<Longrightarrow>\n       complex_of_real (f x) * Complex_Matrix.trace (R * P x) =\n       complex_of_real (f x * Re (Complex_Matrix.trace (R * P x)))", "show \"\\<And>x. x \\<in> I \\<Longrightarrow>\n         complex_of_real (f x) * Complex_Matrix.trace (R * P x) =\n         complex_of_real (f x * Re (Complex_Matrix.trace (R * P x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> I \\<Longrightarrow>\n       complex_of_real (f x) * Complex_Matrix.trace (R * P x) =\n       complex_of_real (f x * Re (Complex_Matrix.trace (R * P x)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> I \\<Longrightarrow>\n       complex_of_real (f x) * Complex_Matrix.trace (R * P x) =\n       complex_of_real (f x * Re (Complex_Matrix.trace (R * P x)))", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> I \\<Longrightarrow>\n       complex_of_real (f x) * Complex_Matrix.trace (R * P x) =\n       complex_of_real (f x * Re (Complex_Matrix.trace (R * P x)))", "assume \"x\\<in> I\""], ["proof (state)\nthis:\n  x \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> I \\<Longrightarrow>\n       complex_of_real (f x) * Complex_Matrix.trace (R * P x) =\n       complex_of_real (f x * Re (Complex_Matrix.trace (R * P x)))", "have \"complex_of_real (f x) * Complex_Matrix.trace (R * P x) = \n        complex_of_real (f x) * complex_of_real (Re (Complex_Matrix.trace (R * P x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. complex_of_real (f x) * Complex_Matrix.trace (R * P x) =\n    complex_of_real (f x) *\n    complex_of_real (Re (Complex_Matrix.trace (R * P x)))", "using assms sum.cong[of I I] fc_mats_carrier trace_proj_pos_real \\<open>x \\<in> I\\<close> dim_eq"], ["proof (prove)\nusing this:\n  finite I\n  \\<forall>i\\<in>I. projector (P i)\n  Complex_Matrix.positive R\n  \\<forall>i\\<in>I. P i \\<in> fc_mats\n  R \\<in> fc_mats\n  \\<lbrakk>I = I; \\<And>x. x \\<in> I \\<Longrightarrow> ?g x = ?h x\\<rbrakk>\n  \\<Longrightarrow> sum ?g I = sum ?h I\n  fc_mats = carrier_mat dimR dimC\n  \\<lbrakk>projector ?P; Complex_Matrix.positive ?R;\n   ?P \\<in> carrier_mat ?n ?n; ?R \\<in> carrier_mat ?n ?n\\<rbrakk>\n  \\<Longrightarrow> complex_of_real (Re (Complex_Matrix.trace (?R * ?P))) =\n                    Complex_Matrix.trace (?R * ?P)\n  x \\<in> I\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. complex_of_real (f x) * Complex_Matrix.trace (R * P x) =\n    complex_of_real (f x) *\n    complex_of_real (Re (Complex_Matrix.trace (R * P x)))", "by auto"], ["proof (state)\nthis:\n  complex_of_real (f x) * Complex_Matrix.trace (R * P x) =\n  complex_of_real (f x) *\n  complex_of_real (Re (Complex_Matrix.trace (R * P x)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> I \\<Longrightarrow>\n       complex_of_real (f x) * Complex_Matrix.trace (R * P x) =\n       complex_of_real (f x * Re (Complex_Matrix.trace (R * P x)))", "also"], ["proof (state)\nthis:\n  complex_of_real (f x) * Complex_Matrix.trace (R * P x) =\n  complex_of_real (f x) *\n  complex_of_real (Re (Complex_Matrix.trace (R * P x)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> I \\<Longrightarrow>\n       complex_of_real (f x) * Complex_Matrix.trace (R * P x) =\n       complex_of_real (f x * Re (Complex_Matrix.trace (R * P x)))", "have \"... = complex_of_real (f x * Re (Complex_Matrix.trace (R * P x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. complex_of_real (f x) *\n    complex_of_real (Re (Complex_Matrix.trace (R * P x))) =\n    complex_of_real (f x * Re (Complex_Matrix.trace (R * P x)))", "by simp"], ["proof (state)\nthis:\n  complex_of_real (f x) *\n  complex_of_real (Re (Complex_Matrix.trace (R * P x))) =\n  complex_of_real (f x * Re (Complex_Matrix.trace (R * P x)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> I \\<Longrightarrow>\n       complex_of_real (f x) * Complex_Matrix.trace (R * P x) =\n       complex_of_real (f x * Re (Complex_Matrix.trace (R * P x)))", "finally"], ["proof (chain)\npicking this:\n  complex_of_real (f x) * Complex_Matrix.trace (R * P x) =\n  complex_of_real (f x * Re (Complex_Matrix.trace (R * P x)))", "show \"complex_of_real (f x) * Complex_Matrix.trace (R * P x) =\n         complex_of_real (f x * Re (Complex_Matrix.trace (R * P x)))\""], ["proof (prove)\nusing this:\n  complex_of_real (f x) * Complex_Matrix.trace (R * P x) =\n  complex_of_real (f x * Re (Complex_Matrix.trace (R * P x)))\n\ngoal (1 subgoal):\n 1. complex_of_real (f x) * Complex_Matrix.trace (R * P x) =\n    complex_of_real (f x * Re (Complex_Matrix.trace (R * P x)))", "."], ["proof (state)\nthis:\n  complex_of_real (f x) * Complex_Matrix.trace (R * P x) =\n  complex_of_real (f x * Re (Complex_Matrix.trace (R * P x)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x2 \\<in> I \\<Longrightarrow>\n  complex_of_real (f ?x2) * Complex_Matrix.trace (R * P ?x2) =\n  complex_of_real (f ?x2 * Re (Complex_Matrix.trace (R * P ?x2)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>I. complex_of_real (f i) * Complex_Matrix.trace (R * P i)) =\n  (\\<Sum>i\\<in>I.\n     complex_of_real (f i * Re (Complex_Matrix.trace (R * P i))))\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (R *\n      local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n       I) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (R *\n            local.sum_mat\n             (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>I. complex_of_real (f i) * Complex_Matrix.trace (R * P i)) =\n  (\\<Sum>i\\<in>I.\n     complex_of_real (f i * Re (Complex_Matrix.trace (R * P i))))\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (R *\n      local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n       I) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (R *\n            local.sum_mat\n             (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))", "have \"... = (\\<Sum> i\\<in> I. f i * Re (Complex_Matrix.trace (R * (P i))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>I.\n       complex_of_real (f i * Re (Complex_Matrix.trace (R * P i)))) =\n    complex_of_real\n     (\\<Sum>i\\<in>I. f i * Re (Complex_Matrix.trace (R * P i)))", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>I.\n     complex_of_real (f i * Re (Complex_Matrix.trace (R * P i)))) =\n  complex_of_real (\\<Sum>i\\<in>I. f i * Re (Complex_Matrix.trace (R * P i)))\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (R *\n      local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n       I) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (R *\n            local.sum_mat\n             (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>I.\n     complex_of_real (f i * Re (Complex_Matrix.trace (R * P i)))) =\n  complex_of_real (\\<Sum>i\\<in>I. f i * Re (Complex_Matrix.trace (R * P i)))\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (R *\n      local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n       I) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (R *\n            local.sum_mat\n             (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))", "have \"... = (\\<Sum> i\\<in> I. Re (Complex_Matrix.trace (f i \\<cdot>\\<^sub>m (R * (P i)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. complex_of_real\n     (\\<Sum>i\\<in>I. f i * Re (Complex_Matrix.trace (R * P i))) =\n    complex_of_real\n     (\\<Sum>i\\<in>I.\n        Re (Complex_Matrix.trace\n             (complex_of_real (f i) \\<cdot>\\<^sub>m (R * P i))))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. complex_of_real\n     (\\<Sum>i\\<in>I. f i * Re (Complex_Matrix.trace (R * P i))) =\n    complex_of_real\n     (\\<Sum>i\\<in>I.\n        Re (Complex_Matrix.trace\n             (complex_of_real (f i) \\<cdot>\\<^sub>m (R * P i))))", "have \"(\\<Sum> i\\<in> I. f i * Re (Complex_Matrix.trace (R * (P i)))) = \n      (\\<Sum> i\\<in> I. Re (Complex_Matrix.trace (f i \\<cdot>\\<^sub>m (R * (P i)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>I. f i * Re (Complex_Matrix.trace (R * P i))) =\n    (\\<Sum>i\\<in>I.\n       Re (Complex_Matrix.trace\n            (complex_of_real (f i) \\<cdot>\\<^sub>m (R * P i))))", "by (rule sum.cong, (simp add: sm)+)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>I. f i * Re (Complex_Matrix.trace (R * P i))) =\n  (\\<Sum>i\\<in>I.\n     Re (Complex_Matrix.trace\n          (complex_of_real (f i) \\<cdot>\\<^sub>m (R * P i))))\n\ngoal (1 subgoal):\n 1. complex_of_real\n     (\\<Sum>i\\<in>I. f i * Re (Complex_Matrix.trace (R * P i))) =\n    complex_of_real\n     (\\<Sum>i\\<in>I.\n        Re (Complex_Matrix.trace\n             (complex_of_real (f i) \\<cdot>\\<^sub>m (R * P i))))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>i\\<in>I. f i * Re (Complex_Matrix.trace (R * P i))) =\n  (\\<Sum>i\\<in>I.\n     Re (Complex_Matrix.trace\n          (complex_of_real (f i) \\<cdot>\\<^sub>m (R * P i))))\n\ngoal (1 subgoal):\n 1. complex_of_real\n     (\\<Sum>i\\<in>I. f i * Re (Complex_Matrix.trace (R * P i))) =\n    complex_of_real\n     (\\<Sum>i\\<in>I.\n        Re (Complex_Matrix.trace\n             (complex_of_real (f i) \\<cdot>\\<^sub>m (R * P i))))", "by simp"], ["proof (state)\nthis:\n  complex_of_real\n   (\\<Sum>i\\<in>I. f i * Re (Complex_Matrix.trace (R * P i))) =\n  complex_of_real\n   (\\<Sum>i\\<in>I.\n      Re (Complex_Matrix.trace\n           (complex_of_real (f i) \\<cdot>\\<^sub>m (R * P i))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  complex_of_real\n   (\\<Sum>i\\<in>I. f i * Re (Complex_Matrix.trace (R * P i))) =\n  complex_of_real\n   (\\<Sum>i\\<in>I.\n      Re (Complex_Matrix.trace\n           (complex_of_real (f i) \\<cdot>\\<^sub>m (R * P i))))\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (R *\n      local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n       I) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (R *\n            local.sum_mat\n             (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))", "also"], ["proof (state)\nthis:\n  complex_of_real\n   (\\<Sum>i\\<in>I. f i * Re (Complex_Matrix.trace (R * P i))) =\n  complex_of_real\n   (\\<Sum>i\\<in>I.\n      Re (Complex_Matrix.trace\n           (complex_of_real (f i) \\<cdot>\\<^sub>m (R * P i))))\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (R *\n      local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n       I) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (R *\n            local.sum_mat\n             (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))", "have \"... = (\\<Sum> i\\<in> I. Re (Complex_Matrix.trace (R * (f i \\<cdot>\\<^sub>m (P i)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. complex_of_real\n     (\\<Sum>i\\<in>I.\n        Re (Complex_Matrix.trace\n             (complex_of_real (f i) \\<cdot>\\<^sub>m (R * P i)))) =\n    complex_of_real\n     (\\<Sum>i\\<in>I.\n        Re (Complex_Matrix.trace\n             (R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i))))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. complex_of_real\n     (\\<Sum>i\\<in>I.\n        Re (Complex_Matrix.trace\n             (complex_of_real (f i) \\<cdot>\\<^sub>m (R * P i)))) =\n    complex_of_real\n     (\\<Sum>i\\<in>I.\n        Re (Complex_Matrix.trace\n             (R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i))))", "have \"\\<And>i. i \\<in> I \\<Longrightarrow> f i \\<cdot>\\<^sub>m (R * (P i)) = R * (f i \\<cdot>\\<^sub>m (P i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> I \\<Longrightarrow>\n       complex_of_real (f i) \\<cdot>\\<^sub>m (R * P i) =\n       R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i)", "using sw"], ["proof (prove)\nusing this:\n  ?x2 \\<in> I \\<Longrightarrow>\n  R * (complex_of_real (f ?x2) \\<cdot>\\<^sub>m P ?x2) =\n  complex_of_real (f ?x2) \\<cdot>\\<^sub>m (R * P ?x2)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> I \\<Longrightarrow>\n       complex_of_real (f i) \\<cdot>\\<^sub>m (R * P i) =\n       R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i)", "by simp"], ["proof (state)\nthis:\n  ?i2 \\<in> I \\<Longrightarrow>\n  complex_of_real (f ?i2) \\<cdot>\\<^sub>m (R * P ?i2) =\n  R * (complex_of_real (f ?i2) \\<cdot>\\<^sub>m P ?i2)\n\ngoal (1 subgoal):\n 1. complex_of_real\n     (\\<Sum>i\\<in>I.\n        Re (Complex_Matrix.trace\n             (complex_of_real (f i) \\<cdot>\\<^sub>m (R * P i)))) =\n    complex_of_real\n     (\\<Sum>i\\<in>I.\n        Re (Complex_Matrix.trace\n             (R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i))))", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?i2 \\<in> I \\<Longrightarrow>\n  complex_of_real (f ?i2) \\<cdot>\\<^sub>m (R * P ?i2) =\n  R * (complex_of_real (f ?i2) \\<cdot>\\<^sub>m P ?i2)\n\ngoal (1 subgoal):\n 1. complex_of_real\n     (\\<Sum>i\\<in>I.\n        Re (Complex_Matrix.trace\n             (complex_of_real (f i) \\<cdot>\\<^sub>m (R * P i)))) =\n    complex_of_real\n     (\\<Sum>i\\<in>I.\n        Re (Complex_Matrix.trace\n             (R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i))))", "by simp"], ["proof (state)\nthis:\n  complex_of_real\n   (\\<Sum>i\\<in>I.\n      Re (Complex_Matrix.trace\n           (complex_of_real (f i) \\<cdot>\\<^sub>m (R * P i)))) =\n  complex_of_real\n   (\\<Sum>i\\<in>I.\n      Re (Complex_Matrix.trace\n           (R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  complex_of_real\n   (\\<Sum>i\\<in>I.\n      Re (Complex_Matrix.trace\n           (complex_of_real (f i) \\<cdot>\\<^sub>m (R * P i)))) =\n  complex_of_real\n   (\\<Sum>i\\<in>I.\n      Re (Complex_Matrix.trace\n           (R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i))))\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (R *\n      local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n       I) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (R *\n            local.sum_mat\n             (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))", "also"], ["proof (state)\nthis:\n  complex_of_real\n   (\\<Sum>i\\<in>I.\n      Re (Complex_Matrix.trace\n           (complex_of_real (f i) \\<cdot>\\<^sub>m (R * P i)))) =\n  complex_of_real\n   (\\<Sum>i\\<in>I.\n      Re (Complex_Matrix.trace\n           (R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i))))\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (R *\n      local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n       I) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (R *\n            local.sum_mat\n             (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))", "have \"... = Re (\\<Sum> i\\<in> I. (Complex_Matrix.trace (R * (f i \\<cdot>\\<^sub>m (P i)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. complex_of_real\n     (\\<Sum>i\\<in>I.\n        Re (Complex_Matrix.trace\n             (R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i)))) =\n    complex_of_real\n     (Re (\\<Sum>i\\<in>I.\n            Complex_Matrix.trace\n             (R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i))))", "by simp"], ["proof (state)\nthis:\n  complex_of_real\n   (\\<Sum>i\\<in>I.\n      Re (Complex_Matrix.trace\n           (R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i)))) =\n  complex_of_real\n   (Re (\\<Sum>i\\<in>I.\n          Complex_Matrix.trace\n           (R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i))))\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (R *\n      local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n       I) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (R *\n            local.sum_mat\n             (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))", "also"], ["proof (state)\nthis:\n  complex_of_real\n   (\\<Sum>i\\<in>I.\n      Re (Complex_Matrix.trace\n           (R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i)))) =\n  complex_of_real\n   (Re (\\<Sum>i\\<in>I.\n          Complex_Matrix.trace\n           (R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i))))\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (R *\n      local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n       I) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (R *\n            local.sum_mat\n             (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))", "have \"... = Re (Complex_Matrix.trace (sum_mat (\\<lambda>i. R * (f i \\<cdot>\\<^sub>m (P i))) I))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. complex_of_real\n     (Re (\\<Sum>i\\<in>I.\n            Complex_Matrix.trace\n             (R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i)))) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (local.sum_mat\n             (\\<lambda>i. R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i))\n             I)))", "using trs"], ["proof (prove)\nusing this:\n  Complex_Matrix.trace\n   (local.sum_mat\n     (\\<lambda>i. R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i)) I) =\n  (\\<Sum>i\\<in>I.\n     Complex_Matrix.trace (R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i)))\n\ngoal (1 subgoal):\n 1. complex_of_real\n     (Re (\\<Sum>i\\<in>I.\n            Complex_Matrix.trace\n             (R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i)))) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (local.sum_mat\n             (\\<lambda>i. R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i))\n             I)))", "by simp"], ["proof (state)\nthis:\n  complex_of_real\n   (Re (\\<Sum>i\\<in>I.\n          Complex_Matrix.trace\n           (R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i)))) =\n  complex_of_real\n   (Re (Complex_Matrix.trace\n         (local.sum_mat\n           (\\<lambda>i. R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i))\n           I)))\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (R *\n      local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n       I) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (R *\n            local.sum_mat\n             (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))", "also"], ["proof (state)\nthis:\n  complex_of_real\n   (Re (\\<Sum>i\\<in>I.\n          Complex_Matrix.trace\n           (R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i)))) =\n  complex_of_real\n   (Re (Complex_Matrix.trace\n         (local.sum_mat\n           (\\<lambda>i. R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i))\n           I)))\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (R *\n      local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n       I) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (R *\n            local.sum_mat\n             (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))", "have \"... = Re (Complex_Matrix.trace (R * (sum_mat (\\<lambda>i. f i \\<cdot>\\<^sub>m (P i))) I))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. complex_of_real\n     (Re (Complex_Matrix.trace\n           (local.sum_mat\n             (\\<lambda>i. R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i))\n             I))) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (R *\n            local.sum_mat\n             (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))", "using dr"], ["proof (prove)\nusing this:\n  Complex_Matrix.trace\n   (R *\n    local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n     I) =\n  Complex_Matrix.trace\n   (local.sum_mat\n     (\\<lambda>i. R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i)) I)\n\ngoal (1 subgoal):\n 1. complex_of_real\n     (Re (Complex_Matrix.trace\n           (local.sum_mat\n             (\\<lambda>i. R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i))\n             I))) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (R *\n            local.sum_mat\n             (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))", "by simp"], ["proof (state)\nthis:\n  complex_of_real\n   (Re (Complex_Matrix.trace\n         (local.sum_mat\n           (\\<lambda>i. R * (complex_of_real (f i) \\<cdot>\\<^sub>m P i))\n           I))) =\n  complex_of_real\n   (Re (Complex_Matrix.trace\n         (R *\n          local.sum_mat\n           (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (R *\n      local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n       I) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (R *\n            local.sum_mat\n             (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))", "finally"], ["proof (chain)\npicking this:\n  Complex_Matrix.trace\n   (R *\n    local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n     I) =\n  complex_of_real\n   (Re (Complex_Matrix.trace\n         (R *\n          local.sum_mat\n           (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))", "show ?thesis"], ["proof (prove)\nusing this:\n  Complex_Matrix.trace\n   (R *\n    local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n     I) =\n  complex_of_real\n   (Re (Complex_Matrix.trace\n         (R *\n          local.sum_mat\n           (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (R *\n      local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n       I) =\n    complex_of_real\n     (Re (Complex_Matrix.trace\n           (R *\n            local.sum_mat\n             (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))", "."], ["proof (state)\nthis:\n  Complex_Matrix.trace\n   (R *\n    local.sum_mat (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i)\n     I) =\n  complex_of_real\n   (Re (Complex_Matrix.trace\n         (R *\n          local.sum_mat\n           (\\<lambda>i. complex_of_real (f i) \\<cdot>\\<^sub>m P i) I)))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Rank 1 projection\\<close>"], ["", "definition rank_1_proj where\n\"rank_1_proj v = outer_prod v v\""], ["", "lemma rank_1_proj_square_mat:\n  shows \"square_mat (rank_1_proj v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. square_mat (rank_1_proj v)", "using outer_prod_dim"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n\ngoal (1 subgoal):\n 1. square_mat (rank_1_proj v)", "unfolding rank_1_proj_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n\ngoal (1 subgoal):\n 1. square_mat (outer_prod v v)", "by (metis carrier_matD(1) carrier_matD(2) carrier_vec_dim_vec  square_mat.simps)"], ["", "lemma rank_1_proj_dim[simp]:\n  shows \"dim_row (rank_1_proj v) = dim_vec v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (rank_1_proj v) = dim_vec v", "using outer_prod_dim"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n\ngoal (1 subgoal):\n 1. dim_row (rank_1_proj v) = dim_vec v", "unfolding rank_1_proj_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n\ngoal (1 subgoal):\n 1. dim_row (outer_prod v v) = dim_vec v", "using carrier_vecI"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n  dim_vec ?v = ?n \\<Longrightarrow> ?v \\<in> carrier_vec ?n\n\ngoal (1 subgoal):\n 1. dim_row (outer_prod v v) = dim_vec v", "by blast"], ["", "lemma rank_1_proj_carrier[simp]:\n  shows \"rank_1_proj v \\<in> carrier_mat (dim_vec v) (dim_vec v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rank_1_proj v \\<in> carrier_mat (dim_vec v) (dim_vec v)", "using outer_prod_dim"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n\ngoal (1 subgoal):\n 1. rank_1_proj v \\<in> carrier_mat (dim_vec v) (dim_vec v)", "unfolding rank_1_proj_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n\ngoal (1 subgoal):\n 1. outer_prod v v \\<in> carrier_mat (dim_vec v) (dim_vec v)", "using carrier_vecI"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?m\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?v ?w \\<in> carrier_mat ?n ?m\n  dim_vec ?v = ?n \\<Longrightarrow> ?v \\<in> carrier_vec ?n\n\ngoal (1 subgoal):\n 1. outer_prod v v \\<in> carrier_mat (dim_vec v) (dim_vec v)", "by blast"], ["", "lemma rank_1_proj_coord:\n  assumes \"i < dim_vec v\"\n  and \"j < dim_vec v\"\nshows \"(rank_1_proj v) $$ (i, j) = Matrix.vec_index v i * (cnj (Matrix.vec_index v j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rank_1_proj v $$ (i, j) = v $ i * cnj (v $ j)", "using assms"], ["proof (prove)\nusing this:\n  i < dim_vec v\n  j < dim_vec v\n\ngoal (1 subgoal):\n 1. rank_1_proj v $$ (i, j) = v $ i * cnj (v $ j)", "unfolding rank_1_proj_def outer_prod_def"], ["proof (prove)\nusing this:\n  i < dim_vec v\n  j < dim_vec v\n\ngoal (1 subgoal):\n 1. (Matrix.mat (dim_vec v) 1 (\\<lambda>(i, j). v $ i) *\n     Matrix.mat 1 (dim_vec v) (\\<lambda>(i, y). conjugate v $ y)) $$\n    (i, j) =\n    v $ i * cnj (v $ j)", "by auto"], ["", "lemma rank_1_proj_adjoint:\n  shows \"Complex_Matrix.adjoint (rank_1_proj (v::complex Matrix.vec)) = rank_1_proj v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (rank_1_proj v) = rank_1_proj v", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (rank_1_proj v);\n        j < dim_col (rank_1_proj v)\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (rank_1_proj v) $$ (i, j) =\n                         rank_1_proj v $$ (i, j)\n 2. dim_row (Complex_Matrix.adjoint (rank_1_proj v)) =\n    dim_row (rank_1_proj v)\n 3. dim_col (Complex_Matrix.adjoint (rank_1_proj v)) =\n    dim_col (rank_1_proj v)", "show \"dim_row (Complex_Matrix.adjoint (rank_1_proj v)) = dim_row (rank_1_proj v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (Complex_Matrix.adjoint (rank_1_proj v)) =\n    dim_row (rank_1_proj v)", "using rank_1_proj_square_mat"], ["proof (prove)\nusing this:\n  square_mat (rank_1_proj ?v)\n\ngoal (1 subgoal):\n 1. dim_row (Complex_Matrix.adjoint (rank_1_proj v)) =\n    dim_row (rank_1_proj v)", "by auto"], ["proof (state)\nthis:\n  dim_row (Complex_Matrix.adjoint (rank_1_proj v)) = dim_row (rank_1_proj v)\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (rank_1_proj v);\n        j < dim_col (rank_1_proj v)\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (rank_1_proj v) $$ (i, j) =\n                         rank_1_proj v $$ (i, j)\n 2. dim_col (Complex_Matrix.adjoint (rank_1_proj v)) =\n    dim_col (rank_1_proj v)", "thus \"dim_col (Complex_Matrix.adjoint (rank_1_proj v)) = dim_col (rank_1_proj v)\""], ["proof (prove)\nusing this:\n  dim_row (Complex_Matrix.adjoint (rank_1_proj v)) = dim_row (rank_1_proj v)\n\ngoal (1 subgoal):\n 1. dim_col (Complex_Matrix.adjoint (rank_1_proj v)) =\n    dim_col (rank_1_proj v)", "by auto"], ["proof (state)\nthis:\n  dim_col (Complex_Matrix.adjoint (rank_1_proj v)) = dim_col (rank_1_proj v)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (rank_1_proj v);\n        j < dim_col (rank_1_proj v)\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (rank_1_proj v) $$ (i, j) =\n                         rank_1_proj v $$ (i, j)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (rank_1_proj v);\n        j < dim_col (rank_1_proj v)\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (rank_1_proj v) $$ (i, j) =\n                         rank_1_proj v $$ (i, j)", "assume \"i < dim_row (rank_1_proj v)\" and \"j < dim_col (rank_1_proj v)\""], ["proof (state)\nthis:\n  i < dim_row (rank_1_proj v)\n  j < dim_col (rank_1_proj v)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (rank_1_proj v);\n        j < dim_col (rank_1_proj v)\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (rank_1_proj v) $$ (i, j) =\n                         rank_1_proj v $$ (i, j)", "note ij = this"], ["proof (state)\nthis:\n  i < dim_row (rank_1_proj v)\n  j < dim_col (rank_1_proj v)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (rank_1_proj v);\n        j < dim_col (rank_1_proj v)\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (rank_1_proj v) $$ (i, j) =\n                         rank_1_proj v $$ (i, j)", "have \"Complex_Matrix.adjoint (rank_1_proj v) $$ (i, j) = conjugate ((rank_1_proj v) $$ (j, i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (rank_1_proj v) $$ (i, j) =\n    conjugate (rank_1_proj v $$ (j, i))", "using ij \\<open>dim_col (Complex_Matrix.adjoint (rank_1_proj v)) = dim_col (rank_1_proj v)\\<close> \n      adjoint_eval"], ["proof (prove)\nusing this:\n  i < dim_row (rank_1_proj v)\n  j < dim_col (rank_1_proj v)\n  dim_col (Complex_Matrix.adjoint (rank_1_proj v)) = dim_col (rank_1_proj v)\n  \\<lbrakk>?i < dim_col ?A; ?j < dim_row ?A\\<rbrakk>\n  \\<Longrightarrow> Complex_Matrix.adjoint ?A $$ (?i, ?j) =\n                    conjugate (?A $$ (?j, ?i))\n\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (rank_1_proj v) $$ (i, j) =\n    conjugate (rank_1_proj v $$ (j, i))", "by fastforce"], ["proof (state)\nthis:\n  Complex_Matrix.adjoint (rank_1_proj v) $$ (i, j) =\n  conjugate (rank_1_proj v $$ (j, i))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (rank_1_proj v);\n        j < dim_col (rank_1_proj v)\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (rank_1_proj v) $$ (i, j) =\n                         rank_1_proj v $$ (i, j)", "also"], ["proof (state)\nthis:\n  Complex_Matrix.adjoint (rank_1_proj v) $$ (i, j) =\n  conjugate (rank_1_proj v $$ (j, i))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (rank_1_proj v);\n        j < dim_col (rank_1_proj v)\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (rank_1_proj v) $$ (i, j) =\n                         rank_1_proj v $$ (i, j)", "have \"... = conjugate (Matrix.vec_index v j * (cnj (Matrix.vec_index v i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conjugate (rank_1_proj v $$ (j, i)) = conjugate (v $ j * cnj (v $ i))", "using rank_1_proj_coord ij"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i < dim_vec ?v; ?j < dim_vec ?v\\<rbrakk>\n  \\<Longrightarrow> rank_1_proj ?v $$ (?i, ?j) = ?v $ ?i * cnj (?v $ ?j)\n  i < dim_row (rank_1_proj v)\n  j < dim_col (rank_1_proj v)\n\ngoal (1 subgoal):\n 1. conjugate (rank_1_proj v $$ (j, i)) = conjugate (v $ j * cnj (v $ i))", "by (metis \\<open>dim_col (Complex_Matrix.adjoint (rank_1_proj v)) = dim_col (rank_1_proj v)\\<close> \n        adjoint_dim_col rank_1_proj_dim)"], ["proof (state)\nthis:\n  conjugate (rank_1_proj v $$ (j, i)) = conjugate (v $ j * cnj (v $ i))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (rank_1_proj v);\n        j < dim_col (rank_1_proj v)\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (rank_1_proj v) $$ (i, j) =\n                         rank_1_proj v $$ (i, j)", "also"], ["proof (state)\nthis:\n  conjugate (rank_1_proj v $$ (j, i)) = conjugate (v $ j * cnj (v $ i))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (rank_1_proj v);\n        j < dim_col (rank_1_proj v)\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (rank_1_proj v) $$ (i, j) =\n                         rank_1_proj v $$ (i, j)", "have \"... = Matrix.vec_index v i * (cnj (Matrix.vec_index v j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conjugate (v $ j * cnj (v $ i)) = v $ i * cnj (v $ j)", "by simp"], ["proof (state)\nthis:\n  conjugate (v $ j * cnj (v $ i)) = v $ i * cnj (v $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (rank_1_proj v);\n        j < dim_col (rank_1_proj v)\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (rank_1_proj v) $$ (i, j) =\n                         rank_1_proj v $$ (i, j)", "also"], ["proof (state)\nthis:\n  conjugate (v $ j * cnj (v $ i)) = v $ i * cnj (v $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (rank_1_proj v);\n        j < dim_col (rank_1_proj v)\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (rank_1_proj v) $$ (i, j) =\n                         rank_1_proj v $$ (i, j)", "have \"... = rank_1_proj v $$ (i, j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v $ i * cnj (v $ j) = rank_1_proj v $$ (i, j)", "using ij rank_1_proj_coord"], ["proof (prove)\nusing this:\n  i < dim_row (rank_1_proj v)\n  j < dim_col (rank_1_proj v)\n  \\<lbrakk>?i < dim_vec ?v; ?j < dim_vec ?v\\<rbrakk>\n  \\<Longrightarrow> rank_1_proj ?v $$ (?i, ?j) = ?v $ ?i * cnj (?v $ ?j)\n\ngoal (1 subgoal):\n 1. v $ i * cnj (v $ j) = rank_1_proj v $$ (i, j)", "by (metis \\<open>dim_col (Complex_Matrix.adjoint (rank_1_proj v)) = dim_col (rank_1_proj v)\\<close> \n        adjoint_dim_col rank_1_proj_dim)"], ["proof (state)\nthis:\n  v $ i * cnj (v $ j) = rank_1_proj v $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (rank_1_proj v);\n        j < dim_col (rank_1_proj v)\\<rbrakk>\n       \\<Longrightarrow> Complex_Matrix.adjoint (rank_1_proj v) $$ (i, j) =\n                         rank_1_proj v $$ (i, j)", "finally"], ["proof (chain)\npicking this:\n  Complex_Matrix.adjoint (rank_1_proj v) $$ (i, j) = rank_1_proj v $$ (i, j)", "show \"Complex_Matrix.adjoint (rank_1_proj v) $$ (i, j) = rank_1_proj v $$ (i, j)\""], ["proof (prove)\nusing this:\n  Complex_Matrix.adjoint (rank_1_proj v) $$ (i, j) = rank_1_proj v $$ (i, j)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (rank_1_proj v) $$ (i, j) =\n    rank_1_proj v $$ (i, j)", "."], ["proof (state)\nthis:\n  Complex_Matrix.adjoint (rank_1_proj v) $$ (i, j) = rank_1_proj v $$ (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rank_1_proj_hermitian:\n  shows \"hermitian (rank_1_proj (v::complex Matrix.vec))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hermitian (rank_1_proj v)", "using rank_1_proj_adjoint"], ["proof (prove)\nusing this:\n  Complex_Matrix.adjoint (rank_1_proj ?v) = rank_1_proj ?v\n\ngoal (1 subgoal):\n 1. hermitian (rank_1_proj v)", "unfolding hermitian_def"], ["proof (prove)\nusing this:\n  Complex_Matrix.adjoint (rank_1_proj ?v) = rank_1_proj ?v\n\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (rank_1_proj v) = rank_1_proj v", "by simp"], ["", "lemma rank_1_proj_trace:\n  assumes \"\\<parallel>v\\<parallel> = 1\"\n  shows \"Complex_Matrix.trace (rank_1_proj v) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (rank_1_proj v) = 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (rank_1_proj v) = 1", "have \"Complex_Matrix.trace (rank_1_proj v) = inner_prod v v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (rank_1_proj v) = Complex_Matrix.inner_prod v v", "using trace_outer_prod"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?n\\<rbrakk>\n  \\<Longrightarrow> Complex_Matrix.trace (outer_prod ?v ?w) =\n                    Complex_Matrix.inner_prod ?w ?v\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (rank_1_proj v) = Complex_Matrix.inner_prod v v", "unfolding rank_1_proj_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?n\\<rbrakk>\n  \\<Longrightarrow> Complex_Matrix.trace (outer_prod ?v ?w) =\n                    Complex_Matrix.inner_prod ?w ?v\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (outer_prod v v) = Complex_Matrix.inner_prod v v", "using carrier_vecI"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec ?n; ?w \\<in> carrier_vec ?n\\<rbrakk>\n  \\<Longrightarrow> Complex_Matrix.trace (outer_prod ?v ?w) =\n                    Complex_Matrix.inner_prod ?w ?v\n  dim_vec ?v = ?n \\<Longrightarrow> ?v \\<in> carrier_vec ?n\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (outer_prod v v) = Complex_Matrix.inner_prod v v", "by blast"], ["proof (state)\nthis:\n  Complex_Matrix.trace (rank_1_proj v) = Complex_Matrix.inner_prod v v\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (rank_1_proj v) = 1", "also"], ["proof (state)\nthis:\n  Complex_Matrix.trace (rank_1_proj v) = Complex_Matrix.inner_prod v v\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (rank_1_proj v) = 1", "have \"... = (vec_norm v)\\<^sup>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod v v = (vec_norm v)\\<^sup>2", "unfolding vec_norm_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod v v =\n    (csqrt (Complex_Matrix.inner_prod v v))\\<^sup>2", "using power2_csqrt"], ["proof (prove)\nusing this:\n  (csqrt ?z)\\<^sup>2 = ?z\n\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod v v =\n    (csqrt (Complex_Matrix.inner_prod v v))\\<^sup>2", "by presburger"], ["proof (state)\nthis:\n  Complex_Matrix.inner_prod v v = (vec_norm v)\\<^sup>2\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (rank_1_proj v) = 1", "also"], ["proof (state)\nthis:\n  Complex_Matrix.inner_prod v v = (vec_norm v)\\<^sup>2\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (rank_1_proj v) = 1", "have \"... = \\<parallel>v\\<parallel>\\<^sup>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (vec_norm v)\\<^sup>2 = complex_of_real (\\<parallel>v\\<parallel>\\<^sup>2)", "using vec_norm_sq_cpx_vec_length_sq"], ["proof (prove)\nusing this:\n  (vec_norm ?v)\\<^sup>2 = complex_of_real (\\<parallel>?v\\<parallel>\\<^sup>2)\n\ngoal (1 subgoal):\n 1. (vec_norm v)\\<^sup>2 = complex_of_real (\\<parallel>v\\<parallel>\\<^sup>2)", "by simp"], ["proof (state)\nthis:\n  (vec_norm v)\\<^sup>2 = complex_of_real (\\<parallel>v\\<parallel>\\<^sup>2)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (rank_1_proj v) = 1", "also"], ["proof (state)\nthis:\n  (vec_norm v)\\<^sup>2 = complex_of_real (\\<parallel>v\\<parallel>\\<^sup>2)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (rank_1_proj v) = 1", "have \"... = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. complex_of_real (\\<parallel>v\\<parallel>\\<^sup>2) = 1", "using assms"], ["proof (prove)\nusing this:\n  \\<parallel>v\\<parallel> = 1\n\ngoal (1 subgoal):\n 1. complex_of_real (\\<parallel>v\\<parallel>\\<^sup>2) = 1", "by simp"], ["proof (state)\nthis:\n  complex_of_real (\\<parallel>v\\<parallel>\\<^sup>2) = 1\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (rank_1_proj v) = 1", "finally"], ["proof (chain)\npicking this:\n  Complex_Matrix.trace (rank_1_proj v) = 1", "show ?thesis"], ["proof (prove)\nusing this:\n  Complex_Matrix.trace (rank_1_proj v) = 1\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (rank_1_proj v) = 1", "."], ["proof (state)\nthis:\n  Complex_Matrix.trace (rank_1_proj v) = 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rank_1_proj_mat_col:\n  assumes \"A \\<in> carrier_mat n n\"\n  and \"i < n\"\n  and \"j < n\"\n  and \"k < n\"\nshows \"(rank_1_proj (Matrix.col A i)) $$ (j, k) = A $$ (j, i) * conjugate (A $$ (k,i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A i) $$ (j, k) =\n    A $$ (j, i) * conjugate (A $$ (k, i))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A i) $$ (j, k) =\n    A $$ (j, i) * conjugate (A $$ (k, i))", "have \"(rank_1_proj (Matrix.col A i)) $$ (j, k) = Matrix.vec_index (Matrix.col A i) j * \n    conjugate (Matrix.vec_index (Matrix.col A i) k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A i) $$ (j, k) =\n    Matrix.col A i $ j * conjugate (Matrix.col A i $ k)", "using index_outer_prod[of \"Matrix.col A i\" n \"Matrix.col A i\" n] \n      assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>Matrix.col A i \\<in> carrier_vec n;\n   Matrix.col A i \\<in> carrier_vec n; ?i < n; ?j < n\\<rbrakk>\n  \\<Longrightarrow> outer_prod (Matrix.col A i) (Matrix.col A i) $$\n                    (?i, ?j) =\n                    Matrix.col A i $ ?i * conjugate (Matrix.col A i $ ?j)\n  A \\<in> carrier_mat n n\n  i < n\n  j < n\n  k < n\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A i) $$ (j, k) =\n    Matrix.col A i $ j * conjugate (Matrix.col A i $ k)", "unfolding rank_1_proj_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>Matrix.col A i \\<in> carrier_vec n;\n   Matrix.col A i \\<in> carrier_vec n; ?i < n; ?j < n\\<rbrakk>\n  \\<Longrightarrow> outer_prod (Matrix.col A i) (Matrix.col A i) $$\n                    (?i, ?j) =\n                    Matrix.col A i $ ?i * conjugate (Matrix.col A i $ ?j)\n  A \\<in> carrier_mat n n\n  i < n\n  j < n\n  k < n\n\ngoal (1 subgoal):\n 1. outer_prod (Matrix.col A i) (Matrix.col A i) $$ (j, k) =\n    Matrix.col A i $ j * conjugate (Matrix.col A i $ k)", "by simp"], ["proof (state)\nthis:\n  rank_1_proj (Matrix.col A i) $$ (j, k) =\n  Matrix.col A i $ j * conjugate (Matrix.col A i $ k)\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A i) $$ (j, k) =\n    A $$ (j, i) * conjugate (A $$ (k, i))", "also"], ["proof (state)\nthis:\n  rank_1_proj (Matrix.col A i) $$ (j, k) =\n  Matrix.col A i $ j * conjugate (Matrix.col A i $ k)\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A i) $$ (j, k) =\n    A $$ (j, i) * conjugate (A $$ (k, i))", "have \"... = A $$ (j, i) * conjugate (A $$ (k,i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.col A i $ j * conjugate (Matrix.col A i $ k) =\n    A $$ (j, i) * conjugate (A $$ (k, i))", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  i < n\n  j < n\n  k < n\n\ngoal (1 subgoal):\n 1. Matrix.col A i $ j * conjugate (Matrix.col A i $ k) =\n    A $$ (j, i) * conjugate (A $$ (k, i))", "by simp"], ["proof (state)\nthis:\n  Matrix.col A i $ j * conjugate (Matrix.col A i $ k) =\n  A $$ (j, i) * conjugate (A $$ (k, i))\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A i) $$ (j, k) =\n    A $$ (j, i) * conjugate (A $$ (k, i))", "finally"], ["proof (chain)\npicking this:\n  rank_1_proj (Matrix.col A i) $$ (j, k) =\n  A $$ (j, i) * conjugate (A $$ (k, i))", "show ?thesis"], ["proof (prove)\nusing this:\n  rank_1_proj (Matrix.col A i) $$ (j, k) =\n  A $$ (j, i) * conjugate (A $$ (k, i))\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A i) $$ (j, k) =\n    A $$ (j, i) * conjugate (A $$ (k, i))", "."], ["proof (state)\nthis:\n  rank_1_proj (Matrix.col A i) $$ (j, k) =\n  A $$ (j, i) * conjugate (A $$ (k, i))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in cpx_sq_mat) weighted_sum_rank_1_proj_unitary_index:\n  assumes \"A \\<in> fc_mats\"\nand \"B \\<in> fc_mats\"\nand \"diagonal_mat B\"\nand \"Complex_Matrix.unitary A\"\nand \"j < dimR\"\nand \"k < dimR\"\nshows \"(sum_mat (\\<lambda>i. (diag_mat B)!i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i)) {..< dimR}) $$ (j,k) = \n  (A * B * (Complex_Matrix.adjoint A)) $$ (j,k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat\n     (\\<lambda>i.\n         diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i))\n     {..<dimR} $$\n    (j, k) =\n    (A * B * Complex_Matrix.adjoint A) $$ (j, k)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.sum_mat\n     (\\<lambda>i.\n         diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i))\n     {..<dimR} $$\n    (j, k) =\n    (A * B * Complex_Matrix.adjoint A) $$ (j, k)", "have \"(sum_mat (\\<lambda>i. (diag_mat B)!i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i)) {..< dimR}) $$ (j,k) = \n    (\\<Sum> i\\<in> {..< dimR}. ((diag_mat B)!i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i)) $$ (j,k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat\n     (\\<lambda>i.\n         diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i))\n     {..<dimR} $$\n    (j, k) =\n    (\\<Sum>i<dimR.\n        (diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i)) $$\n        (j, k))", "proof (rule sum_mat_index, (auto simp add: fc_mats_carrier assms))"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < dimR \\<Longrightarrow>\n       diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i)\n       \\<in> carrier_mat dimR dimC\n 2. k < dimC", "show \"\\<And>i. i < dimR \\<Longrightarrow> (diag_mat B)!i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i) \\<in> carrier_mat dimR dimC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dimR \\<Longrightarrow>\n       diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i)\n       \\<in> carrier_mat dimR dimC", "using rank_1_proj_carrier assms fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  rank_1_proj ?v \\<in> carrier_mat (dim_vec ?v) (dim_vec ?v)\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  diagonal_mat B\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dimR \\<Longrightarrow>\n       diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i)\n       \\<in> carrier_mat dimR dimC", "by (metis smult_carrier_mat zero_col_col zero_col_dim)"], ["proof (state)\nthis:\n  ?i2 < dimR \\<Longrightarrow>\n  diag_mat B ! ?i2 \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A ?i2)\n  \\<in> carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. k < dimC", "show \"k < dimC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k < dimC", "using assms dim_eq"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  diagonal_mat B\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. k < dimC", "by simp"], ["proof (state)\nthis:\n  k < dimC\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.sum_mat\n   (\\<lambda>i. diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i))\n   {..<dimR} $$\n  (j, k) =\n  (\\<Sum>i<dimR.\n      (diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i)) $$\n      (j, k))\n\ngoal (1 subgoal):\n 1. local.sum_mat\n     (\\<lambda>i.\n         diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i))\n     {..<dimR} $$\n    (j, k) =\n    (A * B * Complex_Matrix.adjoint A) $$ (j, k)", "also"], ["proof (state)\nthis:\n  local.sum_mat\n   (\\<lambda>i. diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i))\n   {..<dimR} $$\n  (j, k) =\n  (\\<Sum>i<dimR.\n      (diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i)) $$\n      (j, k))\n\ngoal (1 subgoal):\n 1. local.sum_mat\n     (\\<lambda>i.\n         diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i))\n     {..<dimR} $$\n    (j, k) =\n    (A * B * Complex_Matrix.adjoint A) $$ (j, k)", "have \"... = (\\<Sum> i\\<in> {..< dimR}. (diag_mat B)!i* A $$ (j, i) * conjugate (A $$ (k,i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i<dimR.\n        (diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i)) $$\n        (j, k)) =\n    (\\<Sum>i<dimR. diag_mat B ! i * A $$ (j, i) * conjugate (A $$ (k, i)))", "proof (rule sum.cong, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {..<dimR} \\<Longrightarrow>\n       (diag_mat B ! x \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A x)) $$\n       (j, k) =\n       diag_mat B ! x * A $$ (j, x) * conjugate (A $$ (k, x))", "have idx: \"\\<And>x. x \\<in> {..<dimR} \\<Longrightarrow> (rank_1_proj (Matrix.col A x)) $$ (j, k) = \n      A $$ (j, x) * conjugate (A $$ (k, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {..<dimR} \\<Longrightarrow>\n       rank_1_proj (Matrix.col A x) $$ (j, k) =\n       A $$ (j, x) * conjugate (A $$ (k, x))", "using rank_1_proj_mat_col assms fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  \\<lbrakk>?A \\<in> carrier_mat ?n ?n; ?i < ?n; ?j < ?n; ?k < ?n\\<rbrakk>\n  \\<Longrightarrow> rank_1_proj (Matrix.col ?A ?i) $$ (?j, ?k) =\n                    ?A $$ (?j, ?i) * conjugate (?A $$ (?k, ?i))\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  diagonal_mat B\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {..<dimR} \\<Longrightarrow>\n       rank_1_proj (Matrix.col A x) $$ (j, k) =\n       A $$ (j, x) * conjugate (A $$ (k, x))", "by blast"], ["proof (state)\nthis:\n  ?x2 \\<in> {..<dimR} \\<Longrightarrow>\n  rank_1_proj (Matrix.col A ?x2) $$ (j, k) =\n  A $$ (j, ?x2) * conjugate (A $$ (k, ?x2))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {..<dimR} \\<Longrightarrow>\n       (diag_mat B ! x \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A x)) $$\n       (j, k) =\n       diag_mat B ! x * A $$ (j, x) * conjugate (A $$ (k, x))", "show \"\\<And>x. x \\<in> {..<dimR} \\<Longrightarrow> ((diag_mat B)!x \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A x)) $$ (j, k) = \n      (diag_mat B)!x * A $$ (j, x) * conjugate (A $$ (k, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {..<dimR} \\<Longrightarrow>\n       (diag_mat B ! x \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A x)) $$\n       (j, k) =\n       diag_mat B ! x * A $$ (j, x) * conjugate (A $$ (k, x))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {..<dimR} \\<Longrightarrow>\n       (diag_mat B ! x \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A x)) $$\n       (j, k) =\n       diag_mat B ! x * A $$ (j, x) * conjugate (A $$ (k, x))", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {..<dimR} \\<Longrightarrow>\n       (diag_mat B ! x \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A x)) $$\n       (j, k) =\n       diag_mat B ! x * A $$ (j, x) * conjugate (A $$ (k, x))", "assume \"x\\<in> {..< dimR}\""], ["proof (state)\nthis:\n  x \\<in> {..<dimR}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {..<dimR} \\<Longrightarrow>\n       (diag_mat B ! x \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A x)) $$\n       (j, k) =\n       diag_mat B ! x * A $$ (j, x) * conjugate (A $$ (k, x))", "have \"((diag_mat B)!x \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A x)) $$ (j, k) = \n        (diag_mat B)!x * (rank_1_proj (Matrix.col A x)) $$ (j, k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (diag_mat B ! x \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A x)) $$\n    (j, k) =\n    diag_mat B ! x * rank_1_proj (Matrix.col A x) $$ (j, k)", "proof (rule index_smult_mat)"], ["proof (state)\ngoal (2 subgoals):\n 1. j < dim_row (rank_1_proj (Matrix.col A x))\n 2. k < dim_col (rank_1_proj (Matrix.col A x))", "show \"j < dim_row (rank_1_proj (Matrix.col A x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < dim_row (rank_1_proj (Matrix.col A x))", "using \\<open>x\\<in> {..< dimR}\\<close> assms fc_mats_carrier"], ["proof (prove)\nusing this:\n  x \\<in> {..<dimR}\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  diagonal_mat B\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. j < dim_row (rank_1_proj (Matrix.col A x))", "by simp"], ["proof (state)\nthis:\n  j < dim_row (rank_1_proj (Matrix.col A x))\n\ngoal (1 subgoal):\n 1. k < dim_col (rank_1_proj (Matrix.col A x))", "show \"k < dim_col (rank_1_proj (Matrix.col A x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k < dim_col (rank_1_proj (Matrix.col A x))", "using \\<open>x\\<in> {..< dimR}\\<close> assms fc_mats_carrier \n            rank_1_proj_carrier[of \"Matrix.col A x\"]"], ["proof (prove)\nusing this:\n  x \\<in> {..<dimR}\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  diagonal_mat B\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  fc_mats = carrier_mat dimR dimC\n  rank_1_proj (Matrix.col A x)\n  \\<in> carrier_mat (dim_vec (Matrix.col A x)) (dim_vec (Matrix.col A x))\n\ngoal (1 subgoal):\n 1. k < dim_col (rank_1_proj (Matrix.col A x))", "by simp"], ["proof (state)\nthis:\n  k < dim_col (rank_1_proj (Matrix.col A x))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (diag_mat B ! x \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A x)) $$ (j, k) =\n  diag_mat B ! x * rank_1_proj (Matrix.col A x) $$ (j, k)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {..<dimR} \\<Longrightarrow>\n       (diag_mat B ! x \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A x)) $$\n       (j, k) =\n       diag_mat B ! x * A $$ (j, x) * conjugate (A $$ (k, x))", "thus \"((diag_mat B)!x \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A x)) $$ (j, k) = \n        (diag_mat B)!x * A $$ (j, x) * conjugate (A $$ (k, x))\""], ["proof (prove)\nusing this:\n  (diag_mat B ! x \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A x)) $$ (j, k) =\n  diag_mat B ! x * rank_1_proj (Matrix.col A x) $$ (j, k)\n\ngoal (1 subgoal):\n 1. (diag_mat B ! x \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A x)) $$\n    (j, k) =\n    diag_mat B ! x * A $$ (j, x) * conjugate (A $$ (k, x))", "using idx \\<open>x\\<in> {..< dimR}\\<close>"], ["proof (prove)\nusing this:\n  (diag_mat B ! x \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A x)) $$ (j, k) =\n  diag_mat B ! x * rank_1_proj (Matrix.col A x) $$ (j, k)\n  ?x2 \\<in> {..<dimR} \\<Longrightarrow>\n  rank_1_proj (Matrix.col A ?x2) $$ (j, k) =\n  A $$ (j, ?x2) * conjugate (A $$ (k, ?x2))\n  x \\<in> {..<dimR}\n\ngoal (1 subgoal):\n 1. (diag_mat B ! x \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A x)) $$\n    (j, k) =\n    diag_mat B ! x * A $$ (j, x) * conjugate (A $$ (k, x))", "by simp"], ["proof (state)\nthis:\n  (diag_mat B ! x \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A x)) $$ (j, k) =\n  diag_mat B ! x * A $$ (j, x) * conjugate (A $$ (k, x))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x2 \\<in> {..<dimR} \\<Longrightarrow>\n  (diag_mat B ! ?x2 \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A ?x2)) $$\n  (j, k) =\n  diag_mat B ! ?x2 * A $$ (j, ?x2) * conjugate (A $$ (k, ?x2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>i<dimR.\n      (diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i)) $$\n      (j, k)) =\n  (\\<Sum>i<dimR. diag_mat B ! i * A $$ (j, i) * conjugate (A $$ (k, i)))\n\ngoal (1 subgoal):\n 1. local.sum_mat\n     (\\<lambda>i.\n         diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i))\n     {..<dimR} $$\n    (j, k) =\n    (A * B * Complex_Matrix.adjoint A) $$ (j, k)", "also"], ["proof (state)\nthis:\n  (\\<Sum>i<dimR.\n      (diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i)) $$\n      (j, k)) =\n  (\\<Sum>i<dimR. diag_mat B ! i * A $$ (j, i) * conjugate (A $$ (k, i)))\n\ngoal (1 subgoal):\n 1. local.sum_mat\n     (\\<lambda>i.\n         diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i))\n     {..<dimR} $$\n    (j, k) =\n    (A * B * Complex_Matrix.adjoint A) $$ (j, k)", "have \"... = Matrix.scalar_prod (Matrix.col (Complex_Matrix.adjoint A) k) (Matrix.row (A*B) j) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i<dimR. diag_mat B ! i * A $$ (j, i) * conjugate (A $$ (k, i))) =\n    Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row (A * B) j", "unfolding Matrix.scalar_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i<dimR. diag_mat B ! i * A $$ (j, i) * conjugate (A $$ (k, i))) =\n    (\\<Sum>i = 0..<dim_vec (Matrix.row (A * B) j).\n        Matrix.col (Complex_Matrix.adjoint A) k $ i *\n        Matrix.row (A * B) j $ i)", "proof (rule sum.cong)"], ["proof (state)\ngoal (2 subgoals):\n 1. {..<dimR} = {0..<dim_vec (Matrix.row (A * B) j)}\n 2. \\<And>x.\n       x \\<in> {0..<dim_vec (Matrix.row (A * B) j)} \\<Longrightarrow>\n       diag_mat B ! x * A $$ (j, x) * conjugate (A $$ (k, x)) =\n       Matrix.col (Complex_Matrix.adjoint A) k $ x *\n       Matrix.row (A * B) j $ x", "show \"{..<dimR} = {0..<dim_vec (Matrix.row (A*B) j)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {..<dimR} = {0..<dim_vec (Matrix.row (A * B) j)}", "using assms fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  diagonal_mat B\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. {..<dimR} = {0..<dim_vec (Matrix.row (A * B) j)}", "by auto"], ["proof (state)\nthis:\n  {..<dimR} = {0..<dim_vec (Matrix.row (A * B) j)}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_vec (Matrix.row (A * B) j)} \\<Longrightarrow>\n       diag_mat B ! x * A $$ (j, x) * conjugate (A $$ (k, x)) =\n       Matrix.col (Complex_Matrix.adjoint A) k $ x *\n       Matrix.row (A * B) j $ x", "show \"\\<And>x. x \\<in> {0..<dim_vec (Matrix.row (A*B) j)} \\<Longrightarrow>\n      diag_mat B ! x * A $$ (j, x) * conjugate (A $$ (k, x)) = \n      Matrix.vec_index ((Matrix.col (Complex_Matrix.adjoint A) k)) x * \n      Matrix.vec_index (Matrix.row (A*B) j) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_vec (Matrix.row (A * B) j)} \\<Longrightarrow>\n       diag_mat B ! x * A $$ (j, x) * conjugate (A $$ (k, x)) =\n       Matrix.col (Complex_Matrix.adjoint A) k $ x *\n       Matrix.row (A * B) j $ x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_vec (Matrix.row (A * B) j)} \\<Longrightarrow>\n       diag_mat B ! x * A $$ (j, x) * conjugate (A $$ (k, x)) =\n       Matrix.col (Complex_Matrix.adjoint A) k $ x *\n       Matrix.row (A * B) j $ x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_vec (Matrix.row (A * B) j)} \\<Longrightarrow>\n       diag_mat B ! x * A $$ (j, x) * conjugate (A $$ (k, x)) =\n       Matrix.col (Complex_Matrix.adjoint A) k $ x *\n       Matrix.row (A * B) j $ x", "assume \"x\\<in> {0..<dim_vec (Matrix.row (A*B) j)}\""], ["proof (state)\nthis:\n  x \\<in> {0..<dim_vec (Matrix.row (A * B) j)}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_vec (Matrix.row (A * B) j)} \\<Longrightarrow>\n       diag_mat B ! x * A $$ (j, x) * conjugate (A $$ (k, x)) =\n       Matrix.col (Complex_Matrix.adjoint A) k $ x *\n       Matrix.row (A * B) j $ x", "hence \"x\\<in> {0..<dimR}\""], ["proof (prove)\nusing this:\n  x \\<in> {0..<dim_vec (Matrix.row (A * B) j)}\n\ngoal (1 subgoal):\n 1. x \\<in> {0..<dimR}", "using assms fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  x \\<in> {0..<dim_vec (Matrix.row (A * B) j)}\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  diagonal_mat B\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. x \\<in> {0..<dimR}", "by simp"], ["proof (state)\nthis:\n  x \\<in> {0..<dimR}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_vec (Matrix.row (A * B) j)} \\<Longrightarrow>\n       diag_mat B ! x * A $$ (j, x) * conjugate (A $$ (k, x)) =\n       Matrix.col (Complex_Matrix.adjoint A) k $ x *\n       Matrix.row (A * B) j $ x", "have \"diag_mat B ! x *A $$ (j, x) = Matrix.vec_index (Matrix.row (A*B) j) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_mat B ! x * A $$ (j, x) = Matrix.row (A * B) j $ x", "proof (rule times_diag_index[symmetric, of _ dimR], (auto simp add: assms))"], ["proof (state)\ngoal (3 subgoals):\n 1. A \\<in> carrier_mat dimR dimR\n 2. B \\<in> carrier_mat dimR dimR\n 3. x < dimR", "show \"A \\<in> carrier_mat dimR dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat dimR dimR", "using assms fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  diagonal_mat B\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat dimR dimR", "by simp"], ["proof (state)\nthis:\n  A \\<in> carrier_mat dimR dimR\n\ngoal (2 subgoals):\n 1. B \\<in> carrier_mat dimR dimR\n 2. x < dimR", "show \"B \\<in> carrier_mat dimR dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<in> carrier_mat dimR dimR", "using assms fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  diagonal_mat B\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. B \\<in> carrier_mat dimR dimR", "by simp"], ["proof (state)\nthis:\n  B \\<in> carrier_mat dimR dimR\n\ngoal (1 subgoal):\n 1. x < dimR", "show \"x < dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < dimR", "using \\<open>x\\<in>{0..< dimR}\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> {0..<dimR}\n\ngoal (1 subgoal):\n 1. x < dimR", "by simp"], ["proof (state)\nthis:\n  x < dimR\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  diag_mat B ! x * A $$ (j, x) = Matrix.row (A * B) j $ x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_vec (Matrix.row (A * B) j)} \\<Longrightarrow>\n       diag_mat B ! x * A $$ (j, x) * conjugate (A $$ (k, x)) =\n       Matrix.col (Complex_Matrix.adjoint A) k $ x *\n       Matrix.row (A * B) j $ x", "moreover"], ["proof (state)\nthis:\n  diag_mat B ! x * A $$ (j, x) = Matrix.row (A * B) j $ x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_vec (Matrix.row (A * B) j)} \\<Longrightarrow>\n       diag_mat B ! x * A $$ (j, x) * conjugate (A $$ (k, x)) =\n       Matrix.col (Complex_Matrix.adjoint A) k $ x *\n       Matrix.row (A * B) j $ x", "have \"conjugate (A $$ (k, x)) = \n        Matrix.vec_index ((Matrix.col (Complex_Matrix.adjoint A) k)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conjugate (A $$ (k, x)) = Matrix.col (Complex_Matrix.adjoint A) k $ x", "using \\<open>x\\<in> {0..<dimR}\\<close> assms \n        fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  x \\<in> {0..<dimR}\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  diagonal_mat B\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. conjugate (A $$ (k, x)) = Matrix.col (Complex_Matrix.adjoint A) k $ x", "by (simp add: adjoint_col)"], ["proof (state)\nthis:\n  conjugate (A $$ (k, x)) = Matrix.col (Complex_Matrix.adjoint A) k $ x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_vec (Matrix.row (A * B) j)} \\<Longrightarrow>\n       diag_mat B ! x * A $$ (j, x) * conjugate (A $$ (k, x)) =\n       Matrix.col (Complex_Matrix.adjoint A) k $ x *\n       Matrix.row (A * B) j $ x", "ultimately"], ["proof (chain)\npicking this:\n  diag_mat B ! x * A $$ (j, x) = Matrix.row (A * B) j $ x\n  conjugate (A $$ (k, x)) = Matrix.col (Complex_Matrix.adjoint A) k $ x", "show \"diag_mat B ! x * A $$ (j, x) * conjugate (A $$ (k, x)) = \n        Matrix.vec_index ((Matrix.col (Complex_Matrix.adjoint A) k)) x * \n        Matrix.vec_index (Matrix.row (A*B) j) x\""], ["proof (prove)\nusing this:\n  diag_mat B ! x * A $$ (j, x) = Matrix.row (A * B) j $ x\n  conjugate (A $$ (k, x)) = Matrix.col (Complex_Matrix.adjoint A) k $ x\n\ngoal (1 subgoal):\n 1. diag_mat B ! x * A $$ (j, x) * conjugate (A $$ (k, x)) =\n    Matrix.col (Complex_Matrix.adjoint A) k $ x * Matrix.row (A * B) j $ x", "by simp"], ["proof (state)\nthis:\n  diag_mat B ! x * A $$ (j, x) * conjugate (A $$ (k, x)) =\n  Matrix.col (Complex_Matrix.adjoint A) k $ x * Matrix.row (A * B) j $ x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x2 \\<in> {0..<dim_vec (Matrix.row (A * B) j)} \\<Longrightarrow>\n  diag_mat B ! ?x2 * A $$ (j, ?x2) * conjugate (A $$ (k, ?x2)) =\n  Matrix.col (Complex_Matrix.adjoint A) k $ ?x2 * Matrix.row (A * B) j $ ?x2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>i<dimR. diag_mat B ! i * A $$ (j, i) * conjugate (A $$ (k, i))) =\n  Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row (A * B) j\n\ngoal (1 subgoal):\n 1. local.sum_mat\n     (\\<lambda>i.\n         diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i))\n     {..<dimR} $$\n    (j, k) =\n    (A * B * Complex_Matrix.adjoint A) $$ (j, k)", "also"], ["proof (state)\nthis:\n  (\\<Sum>i<dimR. diag_mat B ! i * A $$ (j, i) * conjugate (A $$ (k, i))) =\n  Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row (A * B) j\n\ngoal (1 subgoal):\n 1. local.sum_mat\n     (\\<lambda>i.\n         diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i))\n     {..<dimR} $$\n    (j, k) =\n    (A * B * Complex_Matrix.adjoint A) $$ (j, k)", "have \"... = (A*B * (Complex_Matrix.adjoint A)) $$ (j,k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row (A * B) j =\n    (A * B * Complex_Matrix.adjoint A) $$ (j, k)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row (A * B) j =\n    (A * B * Complex_Matrix.adjoint A) $$ (j, k)", "have \"Matrix.mat (dim_row (A*B)) (dim_col (Complex_Matrix.adjoint A))\n     (\\<lambda>(i, j). Matrix.scalar_prod (Matrix.row (A*B) i) (Matrix.col (Complex_Matrix.adjoint A) j)) $$\n    (j, k) =  Matrix.scalar_prod (Matrix.row (A*B) j) (Matrix.col (Complex_Matrix.adjoint A) k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.mat (dim_row (A * B)) (dim_col (Complex_Matrix.adjoint A))\n     (\\<lambda>(i, j).\n         Matrix.row (A * B) i \\<bullet>\n         Matrix.col (Complex_Matrix.adjoint A) j) $$\n    (j, k) =\n    Matrix.row (A * B) j \\<bullet> Matrix.col (Complex_Matrix.adjoint A) k", "using assms fc_mats_carrier"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  diagonal_mat B\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. Matrix.mat (dim_row (A * B)) (dim_col (Complex_Matrix.adjoint A))\n     (\\<lambda>(i, j).\n         Matrix.row (A * B) i \\<bullet>\n         Matrix.col (Complex_Matrix.adjoint A) j) $$\n    (j, k) =\n    Matrix.row (A * B) j \\<bullet> Matrix.col (Complex_Matrix.adjoint A) k", "by simp"], ["proof (state)\nthis:\n  Matrix.mat (dim_row (A * B)) (dim_col (Complex_Matrix.adjoint A))\n   (\\<lambda>(i, j).\n       Matrix.row (A * B) i \\<bullet>\n       Matrix.col (Complex_Matrix.adjoint A) j) $$\n  (j, k) =\n  Matrix.row (A * B) j \\<bullet> Matrix.col (Complex_Matrix.adjoint A) k\n\ngoal (1 subgoal):\n 1. Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row (A * B) j =\n    (A * B * Complex_Matrix.adjoint A) $$ (j, k)", "also"], ["proof (state)\nthis:\n  Matrix.mat (dim_row (A * B)) (dim_col (Complex_Matrix.adjoint A))\n   (\\<lambda>(i, j).\n       Matrix.row (A * B) i \\<bullet>\n       Matrix.col (Complex_Matrix.adjoint A) j) $$\n  (j, k) =\n  Matrix.row (A * B) j \\<bullet> Matrix.col (Complex_Matrix.adjoint A) k\n\ngoal (1 subgoal):\n 1. Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row (A * B) j =\n    (A * B * Complex_Matrix.adjoint A) $$ (j, k)", "have \"... = Matrix.scalar_prod (Matrix.col (Complex_Matrix.adjoint A) k) (Matrix.row (A*B) j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row (A * B) j \\<bullet> Matrix.col (Complex_Matrix.adjoint A) k =\n    Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row (A * B) j", "using assms comm_scalar_prod[of \"Matrix.row (A*B) j\" dimR] fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  diagonal_mat B\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  \\<lbrakk>Matrix.row (A * B) j \\<in> carrier_vec dimR;\n   ?v\\<^sub>2 \\<in> carrier_vec dimR\\<rbrakk>\n  \\<Longrightarrow> Matrix.row (A * B) j \\<bullet> ?v\\<^sub>2 =\n                    ?v\\<^sub>2 \\<bullet> Matrix.row (A * B) j\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. Matrix.row (A * B) j \\<bullet> Matrix.col (Complex_Matrix.adjoint A) k =\n    Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row (A * B) j", "by (metis adjoint_dim Matrix.col_carrier_vec row_carrier_vec cpx_sq_mat_mult)"], ["proof (state)\nthis:\n  Matrix.row (A * B) j \\<bullet> Matrix.col (Complex_Matrix.adjoint A) k =\n  Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row (A * B) j\n\ngoal (1 subgoal):\n 1. Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row (A * B) j =\n    (A * B * Complex_Matrix.adjoint A) $$ (j, k)", "thus ?thesis"], ["proof (prove)\nusing this:\n  Matrix.row (A * B) j \\<bullet> Matrix.col (Complex_Matrix.adjoint A) k =\n  Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row (A * B) j\n\ngoal (1 subgoal):\n 1. Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row (A * B) j =\n    (A * B * Complex_Matrix.adjoint A) $$ (j, k)", "using assms fc_mats_carrier"], ["proof (prove)\nusing this:\n  Matrix.row (A * B) j \\<bullet> Matrix.col (Complex_Matrix.adjoint A) k =\n  Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row (A * B) j\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  diagonal_mat B\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row (A * B) j =\n    (A * B * Complex_Matrix.adjoint A) $$ (j, k)", "unfolding times_mat_def"], ["proof (prove)\nusing this:\n  Matrix.row\n   (Matrix.mat (dim_row A) (dim_col B)\n     (\\<lambda>(i, j). Matrix.row A i \\<bullet> Matrix.col B j))\n   j \\<bullet>\n  Matrix.col (Complex_Matrix.adjoint A) k =\n  Matrix.col (Complex_Matrix.adjoint A) k \\<bullet>\n  Matrix.row\n   (Matrix.mat (dim_row A) (dim_col B)\n     (\\<lambda>(i, j). Matrix.row A i \\<bullet> Matrix.col B j))\n   j\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  diagonal_mat B\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. Matrix.col (Complex_Matrix.adjoint A) k \\<bullet>\n    Matrix.row\n     (Matrix.mat (dim_row A) (dim_col B)\n       (\\<lambda>(i, j). Matrix.row A i \\<bullet> Matrix.col B j))\n     j =\n    Matrix.mat\n     (dim_row\n       (Matrix.mat (dim_row A) (dim_col B)\n         (\\<lambda>(i, j). Matrix.row A i \\<bullet> Matrix.col B j)))\n     (dim_col (Complex_Matrix.adjoint A))\n     (\\<lambda>(i, j).\n         Matrix.row\n          (Matrix.mat (dim_row A) (dim_col B)\n            (\\<lambda>(i, j). Matrix.row A i \\<bullet> Matrix.col B j))\n          i \\<bullet>\n         Matrix.col (Complex_Matrix.adjoint A) j) $$\n    (j, k)", "by simp"], ["proof (state)\nthis:\n  Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row (A * B) j =\n  (A * B * Complex_Matrix.adjoint A) $$ (j, k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row (A * B) j =\n  (A * B * Complex_Matrix.adjoint A) $$ (j, k)\n\ngoal (1 subgoal):\n 1. local.sum_mat\n     (\\<lambda>i.\n         diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i))\n     {..<dimR} $$\n    (j, k) =\n    (A * B * Complex_Matrix.adjoint A) $$ (j, k)", "finally"], ["proof (chain)\npicking this:\n  local.sum_mat\n   (\\<lambda>i. diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i))\n   {..<dimR} $$\n  (j, k) =\n  (A * B * Complex_Matrix.adjoint A) $$ (j, k)", "show ?thesis"], ["proof (prove)\nusing this:\n  local.sum_mat\n   (\\<lambda>i. diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i))\n   {..<dimR} $$\n  (j, k) =\n  (A * B * Complex_Matrix.adjoint A) $$ (j, k)\n\ngoal (1 subgoal):\n 1. local.sum_mat\n     (\\<lambda>i.\n         diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i))\n     {..<dimR} $$\n    (j, k) =\n    (A * B * Complex_Matrix.adjoint A) $$ (j, k)", "."], ["proof (state)\nthis:\n  local.sum_mat\n   (\\<lambda>i. diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i))\n   {..<dimR} $$\n  (j, k) =\n  (A * B * Complex_Matrix.adjoint A) $$ (j, k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in cpx_sq_mat) weighted_sum_rank_1_proj_unitary:\n  assumes \"A \\<in> fc_mats\"\nand \"B \\<in> fc_mats\"\nand \"diagonal_mat B\"\nand \"Complex_Matrix.unitary A\"\nshows \"(sum_mat (\\<lambda>i. (diag_mat B)!i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i)) {..< dimR}) = \n  (A * B * (Complex_Matrix.adjoint A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat\n     (\\<lambda>i.\n         diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i))\n     {..<dimR} =\n    A * B * Complex_Matrix.adjoint A", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A * B * Complex_Matrix.adjoint A);\n        j < dim_col (A * B * Complex_Matrix.adjoint A)\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat\n                          (\\<lambda>i.\n                              diag_mat B ! i \\<cdot>\\<^sub>m\n                              rank_1_proj (Matrix.col A i))\n                          {..<dimR} $$\n                         (i, j) =\n                         (A * B * Complex_Matrix.adjoint A) $$ (i, j)\n 2. dim_row\n     (local.sum_mat\n       (\\<lambda>i.\n           diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i))\n       {..<dimR}) =\n    dim_row (A * B * Complex_Matrix.adjoint A)\n 3. dim_col\n     (local.sum_mat\n       (\\<lambda>i.\n           diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i))\n       {..<dimR}) =\n    dim_col (A * B * Complex_Matrix.adjoint A)", "show \"dim_row (sum_mat (\\<lambda>i. diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i)) {..<dimR}) =\n    dim_row (A * B * Complex_Matrix.adjoint A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row\n     (local.sum_mat\n       (\\<lambda>i.\n           diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i))\n       {..<dimR}) =\n    dim_row (A * B * Complex_Matrix.adjoint A)", "using assms fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  diagonal_mat B\n  Complex_Matrix.unitary A\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. dim_row\n     (local.sum_mat\n       (\\<lambda>i.\n           diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i))\n       {..<dimR}) =\n    dim_row (A * B * Complex_Matrix.adjoint A)", "by (metis (no_types, lifting) carrier_matD(1) cpx_sq_mat_smult dim_col index_mult_mat(2) \n        rank_1_proj_carrier sum_mat_carrier)"], ["proof (state)\nthis:\n  dim_row\n   (local.sum_mat\n     (\\<lambda>i.\n         diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i))\n     {..<dimR}) =\n  dim_row (A * B * Complex_Matrix.adjoint A)\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A * B * Complex_Matrix.adjoint A);\n        j < dim_col (A * B * Complex_Matrix.adjoint A)\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat\n                          (\\<lambda>i.\n                              diag_mat B ! i \\<cdot>\\<^sub>m\n                              rank_1_proj (Matrix.col A i))\n                          {..<dimR} $$\n                         (i, j) =\n                         (A * B * Complex_Matrix.adjoint A) $$ (i, j)\n 2. dim_col\n     (local.sum_mat\n       (\\<lambda>i.\n           diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i))\n       {..<dimR}) =\n    dim_col (A * B * Complex_Matrix.adjoint A)", "show \"dim_col (local.sum_mat (\\<lambda>i. diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i)) {..<dimR}) =\n    dim_col (A * B * Complex_Matrix.adjoint A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col\n     (local.sum_mat\n       (\\<lambda>i.\n           diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i))\n       {..<dimR}) =\n    dim_col (A * B * Complex_Matrix.adjoint A)", "using assms fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  diagonal_mat B\n  Complex_Matrix.unitary A\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. dim_col\n     (local.sum_mat\n       (\\<lambda>i.\n           diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i))\n       {..<dimR}) =\n    dim_col (A * B * Complex_Matrix.adjoint A)", "by (metis (mono_tags, lifting) adjoint_dim_col carrier_matD(1) carrier_matI dim_col \n        index_mult_mat(3) index_smult_mat(2) index_smult_mat(3) rank_1_proj_dim \n        rank_1_proj_square_mat square_mat.elims(2) square_mats sum_mat_carrier)"], ["proof (state)\nthis:\n  dim_col\n   (local.sum_mat\n     (\\<lambda>i.\n         diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i))\n     {..<dimR}) =\n  dim_col (A * B * Complex_Matrix.adjoint A)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A * B * Complex_Matrix.adjoint A);\n        j < dim_col (A * B * Complex_Matrix.adjoint A)\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat\n                          (\\<lambda>i.\n                              diag_mat B ! i \\<cdot>\\<^sub>m\n                              rank_1_proj (Matrix.col A i))\n                          {..<dimR} $$\n                         (i, j) =\n                         (A * B * Complex_Matrix.adjoint A) $$ (i, j)", "show \"\\<And>i j. i < dim_row (A * B * Complex_Matrix.adjoint A) \\<Longrightarrow>\n           j < dim_col (A * B * Complex_Matrix.adjoint A) \\<Longrightarrow>\n           local.sum_mat (\\<lambda>i. diag_mat B ! i \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A i)) {..<dimR} $$ (i, j) =\n           (A * B * Complex_Matrix.adjoint A) $$ (i, j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A * B * Complex_Matrix.adjoint A);\n        j < dim_col (A * B * Complex_Matrix.adjoint A)\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat\n                          (\\<lambda>i.\n                              diag_mat B ! i \\<cdot>\\<^sub>m\n                              rank_1_proj (Matrix.col A i))\n                          {..<dimR} $$\n                         (i, j) =\n                         (A * B * Complex_Matrix.adjoint A) $$ (i, j)", "using weighted_sum_rank_1_proj_unitary_index[of A B] dim_eq fc_mats_carrier"], ["proof (prove)\nusing this:\n  \\<lbrakk>A \\<in> fc_mats; B \\<in> fc_mats; diagonal_mat B;\n   Complex_Matrix.unitary A; ?j < dimR; ?k < dimR\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat\n                     (\\<lambda>i.\n                         diag_mat B ! i \\<cdot>\\<^sub>m\n                         rank_1_proj (Matrix.col A i))\n                     {..<dimR} $$\n                    (?j, ?k) =\n                    (A * B * Complex_Matrix.adjoint A) $$ (?j, ?k)\n  dimR = dimC\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A * B * Complex_Matrix.adjoint A);\n        j < dim_col (A * B * Complex_Matrix.adjoint A)\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat\n                          (\\<lambda>i.\n                              diag_mat B ! i \\<cdot>\\<^sub>m\n                              rank_1_proj (Matrix.col A i))\n                          {..<dimR} $$\n                         (i, j) =\n                         (A * B * Complex_Matrix.adjoint A) $$ (i, j)", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>A \\<in> fc_mats; B \\<in> fc_mats; diagonal_mat B;\n   Complex_Matrix.unitary A; ?j < dimR; ?k < dimR\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat\n                     (\\<lambda>i.\n                         diag_mat B ! i \\<cdot>\\<^sub>m\n                         rank_1_proj (Matrix.col A i))\n                     {..<dimR} $$\n                    (?j, ?k) =\n                    (A * B * Complex_Matrix.adjoint A) $$ (?j, ?k)\n  dimR = dimC\n  fc_mats = carrier_mat dimR dimC\n  A \\<in> fc_mats\n  B \\<in> fc_mats\n  diagonal_mat B\n  Complex_Matrix.unitary A\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A * B * Complex_Matrix.adjoint A);\n        j < dim_col (A * B * Complex_Matrix.adjoint A)\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat\n                          (\\<lambda>i.\n                              diag_mat B ! i \\<cdot>\\<^sub>m\n                              rank_1_proj (Matrix.col A i))\n                          {..<dimR} $$\n                         (i, j) =\n                         (A * B * Complex_Matrix.adjoint A) $$ (i, j)", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?i2 < dim_row (A * B * Complex_Matrix.adjoint A);\n   ?j2 < dim_col (A * B * Complex_Matrix.adjoint A)\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat\n                     (\\<lambda>i.\n                         diag_mat B ! i \\<cdot>\\<^sub>m\n                         rank_1_proj (Matrix.col A i))\n                     {..<dimR} $$\n                    (?i2, ?j2) =\n                    (A * B * Complex_Matrix.adjoint A) $$ (?i2, ?j2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rank_1_proj_projector:\n  assumes \"\\<parallel>v\\<parallel> = 1\"\n  shows \"projector (rank_1_proj v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. projector (rank_1_proj v)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. projector (rank_1_proj v)", "have  \"Complex_Matrix.adjoint (rank_1_proj v) = rank_1_proj v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (rank_1_proj v) = rank_1_proj v", "using rank_1_proj_adjoint"], ["proof (prove)\nusing this:\n  Complex_Matrix.adjoint (rank_1_proj ?v) = rank_1_proj ?v\n\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (rank_1_proj v) = rank_1_proj v", "by simp"], ["proof (state)\nthis:\n  Complex_Matrix.adjoint (rank_1_proj v) = rank_1_proj v\n\ngoal (1 subgoal):\n 1. projector (rank_1_proj v)", "hence a: \"hermitian (rank_1_proj v)\""], ["proof (prove)\nusing this:\n  Complex_Matrix.adjoint (rank_1_proj v) = rank_1_proj v\n\ngoal (1 subgoal):\n 1. hermitian (rank_1_proj v)", "unfolding hermitian_def"], ["proof (prove)\nusing this:\n  Complex_Matrix.adjoint (rank_1_proj v) = rank_1_proj v\n\ngoal (1 subgoal):\n 1. Complex_Matrix.adjoint (rank_1_proj v) = rank_1_proj v", "by simp"], ["proof (state)\nthis:\n  hermitian (rank_1_proj v)\n\ngoal (1 subgoal):\n 1. projector (rank_1_proj v)", "have \"rank_1_proj v * rank_1_proj v = inner_prod v v  \\<cdot>\\<^sub>m outer_prod v v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rank_1_proj v * rank_1_proj v =\n    Complex_Matrix.inner_prod v v \\<cdot>\\<^sub>m outer_prod v v", "unfolding rank_1_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. outer_prod v v * outer_prod v v =\n    Complex_Matrix.inner_prod v v \\<cdot>\\<^sub>m outer_prod v v", "using outer_prod_mult_outer_prod assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a \\<in> carrier_vec ?d1.0; ?b \\<in> carrier_vec ?d2.0;\n   ?c \\<in> carrier_vec ?d2.0; ?d \\<in> carrier_vec ?d3.0\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?a ?b * outer_prod ?c ?d =\n                    Complex_Matrix.inner_prod ?b ?c \\<cdot>\\<^sub>m\n                    outer_prod ?a ?d\n  \\<parallel>v\\<parallel> = 1\n\ngoal (1 subgoal):\n 1. outer_prod v v * outer_prod v v =\n    Complex_Matrix.inner_prod v v \\<cdot>\\<^sub>m outer_prod v v", "using carrier_vec_dim_vec"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a \\<in> carrier_vec ?d1.0; ?b \\<in> carrier_vec ?d2.0;\n   ?c \\<in> carrier_vec ?d2.0; ?d \\<in> carrier_vec ?d3.0\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?a ?b * outer_prod ?c ?d =\n                    Complex_Matrix.inner_prod ?b ?c \\<cdot>\\<^sub>m\n                    outer_prod ?a ?d\n  \\<parallel>v\\<parallel> = 1\n  ?v \\<in> carrier_vec (dim_vec ?v)\n\ngoal (1 subgoal):\n 1. outer_prod v v * outer_prod v v =\n    Complex_Matrix.inner_prod v v \\<cdot>\\<^sub>m outer_prod v v", "by blast"], ["proof (state)\nthis:\n  rank_1_proj v * rank_1_proj v =\n  Complex_Matrix.inner_prod v v \\<cdot>\\<^sub>m outer_prod v v\n\ngoal (1 subgoal):\n 1. projector (rank_1_proj v)", "also"], ["proof (state)\nthis:\n  rank_1_proj v * rank_1_proj v =\n  Complex_Matrix.inner_prod v v \\<cdot>\\<^sub>m outer_prod v v\n\ngoal (1 subgoal):\n 1. projector (rank_1_proj v)", "have \"... = (vec_norm v)\\<^sup>2  \\<cdot>\\<^sub>m outer_prod v v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod v v \\<cdot>\\<^sub>m outer_prod v v =\n    (vec_norm v)\\<^sup>2 \\<cdot>\\<^sub>m outer_prod v v", "unfolding vec_norm_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod v v \\<cdot>\\<^sub>m outer_prod v v =\n    (csqrt (Complex_Matrix.inner_prod v v))\\<^sup>2 \\<cdot>\\<^sub>m\n    outer_prod v v", "using power2_csqrt"], ["proof (prove)\nusing this:\n  (csqrt ?z)\\<^sup>2 = ?z\n\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod v v \\<cdot>\\<^sub>m outer_prod v v =\n    (csqrt (Complex_Matrix.inner_prod v v))\\<^sup>2 \\<cdot>\\<^sub>m\n    outer_prod v v", "by presburger"], ["proof (state)\nthis:\n  Complex_Matrix.inner_prod v v \\<cdot>\\<^sub>m outer_prod v v =\n  (vec_norm v)\\<^sup>2 \\<cdot>\\<^sub>m outer_prod v v\n\ngoal (1 subgoal):\n 1. projector (rank_1_proj v)", "also"], ["proof (state)\nthis:\n  Complex_Matrix.inner_prod v v \\<cdot>\\<^sub>m outer_prod v v =\n  (vec_norm v)\\<^sup>2 \\<cdot>\\<^sub>m outer_prod v v\n\ngoal (1 subgoal):\n 1. projector (rank_1_proj v)", "have \"... =  (cpx_vec_length v)\\<^sup>2 \\<cdot>\\<^sub>m outer_prod v v \""], ["proof (prove)\ngoal (1 subgoal):\n 1. (vec_norm v)\\<^sup>2 \\<cdot>\\<^sub>m outer_prod v v =\n    complex_of_real (\\<parallel>v\\<parallel>\\<^sup>2) \\<cdot>\\<^sub>m\n    outer_prod v v", "using vec_norm_sq_cpx_vec_length_sq"], ["proof (prove)\nusing this:\n  (vec_norm ?v)\\<^sup>2 = complex_of_real (\\<parallel>?v\\<parallel>\\<^sup>2)\n\ngoal (1 subgoal):\n 1. (vec_norm v)\\<^sup>2 \\<cdot>\\<^sub>m outer_prod v v =\n    complex_of_real (\\<parallel>v\\<parallel>\\<^sup>2) \\<cdot>\\<^sub>m\n    outer_prod v v", "by simp"], ["proof (state)\nthis:\n  (vec_norm v)\\<^sup>2 \\<cdot>\\<^sub>m outer_prod v v =\n  complex_of_real (\\<parallel>v\\<parallel>\\<^sup>2) \\<cdot>\\<^sub>m\n  outer_prod v v\n\ngoal (1 subgoal):\n 1. projector (rank_1_proj v)", "also"], ["proof (state)\nthis:\n  (vec_norm v)\\<^sup>2 \\<cdot>\\<^sub>m outer_prod v v =\n  complex_of_real (\\<parallel>v\\<parallel>\\<^sup>2) \\<cdot>\\<^sub>m\n  outer_prod v v\n\ngoal (1 subgoal):\n 1. projector (rank_1_proj v)", "have \"... = outer_prod v v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. complex_of_real (\\<parallel>v\\<parallel>\\<^sup>2) \\<cdot>\\<^sub>m\n    outer_prod v v =\n    outer_prod v v", "using assms state_qbit_norm_sq smult_one[of \"outer_prod v v\"]"], ["proof (prove)\nusing this:\n  \\<parallel>v\\<parallel> = 1\n  ?v \\<in> state_qbit ?n \\<Longrightarrow>\n  \\<parallel>?v\\<parallel>\\<^sup>2 = 1\n  1 \\<cdot>\\<^sub>m outer_prod v v = outer_prod v v\n\ngoal (1 subgoal):\n 1. complex_of_real (\\<parallel>v\\<parallel>\\<^sup>2) \\<cdot>\\<^sub>m\n    outer_prod v v =\n    outer_prod v v", "by simp"], ["proof (state)\nthis:\n  complex_of_real (\\<parallel>v\\<parallel>\\<^sup>2) \\<cdot>\\<^sub>m\n  outer_prod v v =\n  outer_prod v v\n\ngoal (1 subgoal):\n 1. projector (rank_1_proj v)", "also"], ["proof (state)\nthis:\n  complex_of_real (\\<parallel>v\\<parallel>\\<^sup>2) \\<cdot>\\<^sub>m\n  outer_prod v v =\n  outer_prod v v\n\ngoal (1 subgoal):\n 1. projector (rank_1_proj v)", "have \"... = rank_1_proj v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. outer_prod v v = rank_1_proj v", "unfolding rank_1_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. outer_prod v v = outer_prod v v", "by simp"], ["proof (state)\nthis:\n  outer_prod v v = rank_1_proj v\n\ngoal (1 subgoal):\n 1. projector (rank_1_proj v)", "finally"], ["proof (chain)\npicking this:\n  rank_1_proj v * rank_1_proj v = rank_1_proj v", "show ?thesis"], ["proof (prove)\nusing this:\n  rank_1_proj v * rank_1_proj v = rank_1_proj v\n\ngoal (1 subgoal):\n 1. projector (rank_1_proj v)", "using a"], ["proof (prove)\nusing this:\n  rank_1_proj v * rank_1_proj v = rank_1_proj v\n  hermitian (rank_1_proj v)\n\ngoal (1 subgoal):\n 1. projector (rank_1_proj v)", "unfolding projector_def"], ["proof (prove)\nusing this:\n  rank_1_proj v * rank_1_proj v = rank_1_proj v\n  hermitian (rank_1_proj v)\n\ngoal (1 subgoal):\n 1. hermitian (rank_1_proj v) \\<and>\n    rank_1_proj v * rank_1_proj v = rank_1_proj v", "by simp"], ["proof (state)\nthis:\n  projector (rank_1_proj v)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rank_1_proj_positive:\n  assumes \"\\<parallel>v\\<parallel> = 1\"\n  shows \"Complex_Matrix.positive (rank_1_proj v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.positive (rank_1_proj v)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Complex_Matrix.positive (rank_1_proj v)", "have \"projector (rank_1_proj v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. projector (rank_1_proj v)", "using assms rank_1_proj_projector"], ["proof (prove)\nusing this:\n  \\<parallel>v\\<parallel> = 1\n  \\<parallel>?v\\<parallel> = 1 \\<Longrightarrow> projector (rank_1_proj ?v)\n\ngoal (1 subgoal):\n 1. projector (rank_1_proj v)", "by simp"], ["proof (state)\nthis:\n  projector (rank_1_proj v)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.positive (rank_1_proj v)", "thus ?thesis"], ["proof (prove)\nusing this:\n  projector (rank_1_proj v)\n\ngoal (1 subgoal):\n 1. Complex_Matrix.positive (rank_1_proj v)", "using projector_positive"], ["proof (prove)\nusing this:\n  projector (rank_1_proj v)\n  projector ?M \\<Longrightarrow> Complex_Matrix.positive ?M\n\ngoal (1 subgoal):\n 1. Complex_Matrix.positive (rank_1_proj v)", "by simp"], ["proof (state)\nthis:\n  Complex_Matrix.positive (rank_1_proj v)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rank_1_proj_density:\n  assumes \"\\<parallel>v\\<parallel> = 1\"\n  shows \"density_operator (rank_1_proj v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. density_operator (rank_1_proj v)", "unfolding density_operator_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.positive (rank_1_proj v) \\<and>\n    Complex_Matrix.trace (rank_1_proj v) = 1", "using assms"], ["proof (prove)\nusing this:\n  \\<parallel>v\\<parallel> = 1\n\ngoal (1 subgoal):\n 1. Complex_Matrix.positive (rank_1_proj v) \\<and>\n    Complex_Matrix.trace (rank_1_proj v) = 1", "by (simp add: rank_1_proj_positive rank_1_proj_trace)"], ["", "lemma (in cpx_sq_mat) sum_rank_1_proj_unitary_index:\n  assumes \"A \\<in> fc_mats\"\nand \"Complex_Matrix.unitary A\"\nand \"j < dimR\"\nand \"k < dimR\"\nshows \"(sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..< dimR}) $$ (j,k) = (1\\<^sub>m dimR) $$ (j,k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR} $$\n    (j, k) =\n    1\\<^sub>m dimR $$ (j, k)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR} $$\n    (j, k) =\n    1\\<^sub>m dimR $$ (j, k)", "have \"(sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..< dimR}) $$ (j,k) = \n    (\\<Sum> i\\<in> {..< dimR}. (rank_1_proj (Matrix.col A i)) $$ (j,k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR} $$\n    (j, k) =\n    (\\<Sum>i<dimR. rank_1_proj (Matrix.col A i) $$ (j, k))", "proof (rule sum_mat_index, (auto simp add: fc_mats_carrier assms))"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < dimR \\<Longrightarrow>\n       rank_1_proj (Matrix.col A i) \\<in> carrier_mat dimR dimC\n 2. k < dimC", "show \"\\<And>i. i < dimR \\<Longrightarrow> rank_1_proj (Matrix.col A i) \\<in> carrier_mat dimR dimC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dimR \\<Longrightarrow>\n       rank_1_proj (Matrix.col A i) \\<in> carrier_mat dimR dimC", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dimR \\<Longrightarrow>\n       rank_1_proj (Matrix.col A i) \\<in> carrier_mat dimR dimC", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dimR \\<Longrightarrow>\n       rank_1_proj (Matrix.col A i) \\<in> carrier_mat dimR dimC", "assume \"i < dimR\""], ["proof (state)\nthis:\n  i < dimR\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dimR \\<Longrightarrow>\n       rank_1_proj (Matrix.col A i) \\<in> carrier_mat dimR dimC", "hence \"dim_vec (Matrix.col A i) = dimR\""], ["proof (prove)\nusing this:\n  i < dimR\n\ngoal (1 subgoal):\n 1. dim_vec (Matrix.col A i) = dimR", "using assms fc_mats_carrier"], ["proof (prove)\nusing this:\n  i < dimR\n  A \\<in> fc_mats\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. dim_vec (Matrix.col A i) = dimR", "by simp"], ["proof (state)\nthis:\n  dim_vec (Matrix.col A i) = dimR\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dimR \\<Longrightarrow>\n       rank_1_proj (Matrix.col A i) \\<in> carrier_mat dimR dimC", "thus \"rank_1_proj (Matrix.col A i) \\<in> carrier_mat dimR dimC\""], ["proof (prove)\nusing this:\n  dim_vec (Matrix.col A i) = dimR\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A i) \\<in> carrier_mat dimR dimC", "using rank_1_proj_carrier assms\n        fc_mats_carrier dim_eq fc_mats_carrier"], ["proof (prove)\nusing this:\n  dim_vec (Matrix.col A i) = dimR\n  rank_1_proj ?v \\<in> carrier_mat (dim_vec ?v) (dim_vec ?v)\n  A \\<in> fc_mats\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A i) \\<in> carrier_mat dimR dimC", "by (metis dim_col fc_mats_carrier)"], ["proof (state)\nthis:\n  rank_1_proj (Matrix.col A i) \\<in> carrier_mat dimR dimC\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?i2 < dimR \\<Longrightarrow>\n  rank_1_proj (Matrix.col A ?i2) \\<in> carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. k < dimC", "show \"k < dimC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k < dimC", "using assms dim_eq"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. k < dimC", "by simp"], ["proof (state)\nthis:\n  k < dimC\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR} $$\n  (j, k) =\n  (\\<Sum>i<dimR. rank_1_proj (Matrix.col A i) $$ (j, k))\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR} $$\n    (j, k) =\n    1\\<^sub>m dimR $$ (j, k)", "also"], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR} $$\n  (j, k) =\n  (\\<Sum>i<dimR. rank_1_proj (Matrix.col A i) $$ (j, k))\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR} $$\n    (j, k) =\n    1\\<^sub>m dimR $$ (j, k)", "have \"... = (\\<Sum> i\\<in> {..< dimR}. A $$ (j, i) * conjugate (A $$ (k,i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i<dimR. rank_1_proj (Matrix.col A i) $$ (j, k)) =\n    (\\<Sum>i<dimR. A $$ (j, i) * conjugate (A $$ (k, i)))", "proof (rule sum.cong, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {..<dimR} \\<Longrightarrow>\n       rank_1_proj (Matrix.col A x) $$ (j, k) =\n       A $$ (j, x) * conjugate (A $$ (k, x))", "show \"\\<And>x. x \\<in> {..<dimR} \\<Longrightarrow> rank_1_proj (Matrix.col A x) $$ (j, k) = \n      A $$ (j, x) * conjugate (A $$ (k, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {..<dimR} \\<Longrightarrow>\n       rank_1_proj (Matrix.col A x) $$ (j, k) =\n       A $$ (j, x) * conjugate (A $$ (k, x))", "using rank_1_proj_mat_col assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?A \\<in> carrier_mat ?n ?n; ?i < ?n; ?j < ?n; ?k < ?n\\<rbrakk>\n  \\<Longrightarrow> rank_1_proj (Matrix.col ?A ?i) $$ (?j, ?k) =\n                    ?A $$ (?j, ?i) * conjugate (?A $$ (?k, ?i))\n  A \\<in> fc_mats\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {..<dimR} \\<Longrightarrow>\n       rank_1_proj (Matrix.col A x) $$ (j, k) =\n       A $$ (j, x) * conjugate (A $$ (k, x))", "using local.fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  \\<lbrakk>?A \\<in> carrier_mat ?n ?n; ?i < ?n; ?j < ?n; ?k < ?n\\<rbrakk>\n  \\<Longrightarrow> rank_1_proj (Matrix.col ?A ?i) $$ (?j, ?k) =\n                    ?A $$ (?j, ?i) * conjugate (?A $$ (?k, ?i))\n  A \\<in> fc_mats\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {..<dimR} \\<Longrightarrow>\n       rank_1_proj (Matrix.col A x) $$ (j, k) =\n       A $$ (j, x) * conjugate (A $$ (k, x))", "by blast"], ["proof (state)\nthis:\n  ?x2 \\<in> {..<dimR} \\<Longrightarrow>\n  rank_1_proj (Matrix.col A ?x2) $$ (j, k) =\n  A $$ (j, ?x2) * conjugate (A $$ (k, ?x2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>i<dimR. rank_1_proj (Matrix.col A i) $$ (j, k)) =\n  (\\<Sum>i<dimR. A $$ (j, i) * conjugate (A $$ (k, i)))\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR} $$\n    (j, k) =\n    1\\<^sub>m dimR $$ (j, k)", "also"], ["proof (state)\nthis:\n  (\\<Sum>i<dimR. rank_1_proj (Matrix.col A i) $$ (j, k)) =\n  (\\<Sum>i<dimR. A $$ (j, i) * conjugate (A $$ (k, i)))\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR} $$\n    (j, k) =\n    1\\<^sub>m dimR $$ (j, k)", "have \"... = Matrix.scalar_prod (Matrix.col (Complex_Matrix.adjoint A) k) (Matrix.row A j) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i<dimR. A $$ (j, i) * conjugate (A $$ (k, i))) =\n    Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row A j", "unfolding Matrix.scalar_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i<dimR. A $$ (j, i) * conjugate (A $$ (k, i))) =\n    (\\<Sum>i = 0..<dim_vec (Matrix.row A j).\n        Matrix.col (Complex_Matrix.adjoint A) k $ i * Matrix.row A j $ i)", "proof (rule sum.cong)"], ["proof (state)\ngoal (2 subgoals):\n 1. {..<dimR} = {0..<dim_vec (Matrix.row A j)}\n 2. \\<And>x.\n       x \\<in> {0..<dim_vec (Matrix.row A j)} \\<Longrightarrow>\n       A $$ (j, x) * conjugate (A $$ (k, x)) =\n       Matrix.col (Complex_Matrix.adjoint A) k $ x * Matrix.row A j $ x", "show \"{..<dimR} = {0..<dim_vec (Matrix.row A j)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {..<dimR} = {0..<dim_vec (Matrix.row A j)}", "using assms fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. {..<dimR} = {0..<dim_vec (Matrix.row A j)}", "by auto"], ["proof (state)\nthis:\n  {..<dimR} = {0..<dim_vec (Matrix.row A j)}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_vec (Matrix.row A j)} \\<Longrightarrow>\n       A $$ (j, x) * conjugate (A $$ (k, x)) =\n       Matrix.col (Complex_Matrix.adjoint A) k $ x * Matrix.row A j $ x", "show \"\\<And>x. x \\<in> {0..<dim_vec (Matrix.row A j)} \\<Longrightarrow>\n      A $$ (j, x) * conjugate (A $$ (k, x)) = \n      Matrix.vec_index ((Matrix.col (Complex_Matrix.adjoint A) k)) x * Matrix.vec_index (Matrix.row A j) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_vec (Matrix.row A j)} \\<Longrightarrow>\n       A $$ (j, x) * conjugate (A $$ (k, x)) =\n       Matrix.col (Complex_Matrix.adjoint A) k $ x * Matrix.row A j $ x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_vec (Matrix.row A j)} \\<Longrightarrow>\n       A $$ (j, x) * conjugate (A $$ (k, x)) =\n       Matrix.col (Complex_Matrix.adjoint A) k $ x * Matrix.row A j $ x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_vec (Matrix.row A j)} \\<Longrightarrow>\n       A $$ (j, x) * conjugate (A $$ (k, x)) =\n       Matrix.col (Complex_Matrix.adjoint A) k $ x * Matrix.row A j $ x", "assume \"x\\<in> {0..<dim_vec (Matrix.row A j)}\""], ["proof (state)\nthis:\n  x \\<in> {0..<dim_vec (Matrix.row A j)}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_vec (Matrix.row A j)} \\<Longrightarrow>\n       A $$ (j, x) * conjugate (A $$ (k, x)) =\n       Matrix.col (Complex_Matrix.adjoint A) k $ x * Matrix.row A j $ x", "hence \"x\\<in> {0..<dimR}\""], ["proof (prove)\nusing this:\n  x \\<in> {0..<dim_vec (Matrix.row A j)}\n\ngoal (1 subgoal):\n 1. x \\<in> {0..<dimR}", "using assms fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  x \\<in> {0..<dim_vec (Matrix.row A j)}\n  A \\<in> fc_mats\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. x \\<in> {0..<dimR}", "by simp"], ["proof (state)\nthis:\n  x \\<in> {0..<dimR}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_vec (Matrix.row A j)} \\<Longrightarrow>\n       A $$ (j, x) * conjugate (A $$ (k, x)) =\n       Matrix.col (Complex_Matrix.adjoint A) k $ x * Matrix.row A j $ x", "hence \"A $$ (j, x) = Matrix.vec_index (Matrix.row A j) x\""], ["proof (prove)\nusing this:\n  x \\<in> {0..<dimR}\n\ngoal (1 subgoal):\n 1. A $$ (j, x) = Matrix.row A j $ x", "using \\<open>x\\<in> {0..<dimR}\\<close> \n          assms fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  x \\<in> {0..<dimR}\n  x \\<in> {0..<dimR}\n  A \\<in> fc_mats\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. A $$ (j, x) = Matrix.row A j $ x", "by simp"], ["proof (state)\nthis:\n  A $$ (j, x) = Matrix.row A j $ x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_vec (Matrix.row A j)} \\<Longrightarrow>\n       A $$ (j, x) * conjugate (A $$ (k, x)) =\n       Matrix.col (Complex_Matrix.adjoint A) k $ x * Matrix.row A j $ x", "moreover"], ["proof (state)\nthis:\n  A $$ (j, x) = Matrix.row A j $ x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_vec (Matrix.row A j)} \\<Longrightarrow>\n       A $$ (j, x) * conjugate (A $$ (k, x)) =\n       Matrix.col (Complex_Matrix.adjoint A) k $ x * Matrix.row A j $ x", "have \"conjugate (A $$ (k, x)) = \n        Matrix.vec_index ((Matrix.col (Complex_Matrix.adjoint A) k)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conjugate (A $$ (k, x)) = Matrix.col (Complex_Matrix.adjoint A) k $ x", "using \\<open>x\\<in> {0..<dimR}\\<close> \n        assms fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  x \\<in> {0..<dimR}\n  A \\<in> fc_mats\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. conjugate (A $$ (k, x)) = Matrix.col (Complex_Matrix.adjoint A) k $ x", "by (simp add: adjoint_col)"], ["proof (state)\nthis:\n  conjugate (A $$ (k, x)) = Matrix.col (Complex_Matrix.adjoint A) k $ x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_vec (Matrix.row A j)} \\<Longrightarrow>\n       A $$ (j, x) * conjugate (A $$ (k, x)) =\n       Matrix.col (Complex_Matrix.adjoint A) k $ x * Matrix.row A j $ x", "ultimately"], ["proof (chain)\npicking this:\n  A $$ (j, x) = Matrix.row A j $ x\n  conjugate (A $$ (k, x)) = Matrix.col (Complex_Matrix.adjoint A) k $ x", "show \"A $$ (j, x) * conjugate (A $$ (k, x)) = \n        Matrix.vec_index ((Matrix.col (Complex_Matrix.adjoint A) k)) x * \n        Matrix.vec_index (Matrix.row A j) x\""], ["proof (prove)\nusing this:\n  A $$ (j, x) = Matrix.row A j $ x\n  conjugate (A $$ (k, x)) = Matrix.col (Complex_Matrix.adjoint A) k $ x\n\ngoal (1 subgoal):\n 1. A $$ (j, x) * conjugate (A $$ (k, x)) =\n    Matrix.col (Complex_Matrix.adjoint A) k $ x * Matrix.row A j $ x", "by simp"], ["proof (state)\nthis:\n  A $$ (j, x) * conjugate (A $$ (k, x)) =\n  Matrix.col (Complex_Matrix.adjoint A) k $ x * Matrix.row A j $ x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x2 \\<in> {0..<dim_vec (Matrix.row A j)} \\<Longrightarrow>\n  A $$ (j, ?x2) * conjugate (A $$ (k, ?x2)) =\n  Matrix.col (Complex_Matrix.adjoint A) k $ ?x2 * Matrix.row A j $ ?x2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>i<dimR. A $$ (j, i) * conjugate (A $$ (k, i))) =\n  Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row A j\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR} $$\n    (j, k) =\n    1\\<^sub>m dimR $$ (j, k)", "also"], ["proof (state)\nthis:\n  (\\<Sum>i<dimR. A $$ (j, i) * conjugate (A $$ (k, i))) =\n  Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row A j\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR} $$\n    (j, k) =\n    1\\<^sub>m dimR $$ (j, k)", "have \"... = (A * (Complex_Matrix.adjoint A)) $$ (j,k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row A j =\n    (A * Complex_Matrix.adjoint A) $$ (j, k)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row A j =\n    (A * Complex_Matrix.adjoint A) $$ (j, k)", "have \"Matrix.mat (dim_row A) (dim_col (Complex_Matrix.adjoint A))\n     (\\<lambda>(i, j). Matrix.scalar_prod (Matrix.row A i) (Matrix.col (Complex_Matrix.adjoint A) j)) $$\n    (j, k) =  Matrix.scalar_prod (Matrix.row A j) (Matrix.col (Complex_Matrix.adjoint A) k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.mat (dim_row A) (dim_col (Complex_Matrix.adjoint A))\n     (\\<lambda>(i, j).\n         Matrix.row A i \\<bullet>\n         Matrix.col (Complex_Matrix.adjoint A) j) $$\n    (j, k) =\n    Matrix.row A j \\<bullet> Matrix.col (Complex_Matrix.adjoint A) k", "using assms fc_mats_carrier"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. Matrix.mat (dim_row A) (dim_col (Complex_Matrix.adjoint A))\n     (\\<lambda>(i, j).\n         Matrix.row A i \\<bullet>\n         Matrix.col (Complex_Matrix.adjoint A) j) $$\n    (j, k) =\n    Matrix.row A j \\<bullet> Matrix.col (Complex_Matrix.adjoint A) k", "by simp"], ["proof (state)\nthis:\n  Matrix.mat (dim_row A) (dim_col (Complex_Matrix.adjoint A))\n   (\\<lambda>(i, j).\n       Matrix.row A i \\<bullet> Matrix.col (Complex_Matrix.adjoint A) j) $$\n  (j, k) =\n  Matrix.row A j \\<bullet> Matrix.col (Complex_Matrix.adjoint A) k\n\ngoal (1 subgoal):\n 1. Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row A j =\n    (A * Complex_Matrix.adjoint A) $$ (j, k)", "also"], ["proof (state)\nthis:\n  Matrix.mat (dim_row A) (dim_col (Complex_Matrix.adjoint A))\n   (\\<lambda>(i, j).\n       Matrix.row A i \\<bullet> Matrix.col (Complex_Matrix.adjoint A) j) $$\n  (j, k) =\n  Matrix.row A j \\<bullet> Matrix.col (Complex_Matrix.adjoint A) k\n\ngoal (1 subgoal):\n 1. Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row A j =\n    (A * Complex_Matrix.adjoint A) $$ (j, k)", "have \"... = Matrix.scalar_prod (Matrix.col (Complex_Matrix.adjoint A) k) (Matrix.row A j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row A j \\<bullet> Matrix.col (Complex_Matrix.adjoint A) k =\n    Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row A j", "using assms comm_scalar_prod[of \"Matrix.row A j\" dimR] fc_mats_carrier"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  \\<lbrakk>Matrix.row A j \\<in> carrier_vec dimR;\n   ?v\\<^sub>2 \\<in> carrier_vec dimR\\<rbrakk>\n  \\<Longrightarrow> Matrix.row A j \\<bullet> ?v\\<^sub>2 =\n                    ?v\\<^sub>2 \\<bullet> Matrix.row A j\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. Matrix.row A j \\<bullet> Matrix.col (Complex_Matrix.adjoint A) k =\n    Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row A j", "by (simp add: adjoint_dim dim_eq)"], ["proof (state)\nthis:\n  Matrix.row A j \\<bullet> Matrix.col (Complex_Matrix.adjoint A) k =\n  Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row A j\n\ngoal (1 subgoal):\n 1. Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row A j =\n    (A * Complex_Matrix.adjoint A) $$ (j, k)", "thus ?thesis"], ["proof (prove)\nusing this:\n  Matrix.row A j \\<bullet> Matrix.col (Complex_Matrix.adjoint A) k =\n  Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row A j\n\ngoal (1 subgoal):\n 1. Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row A j =\n    (A * Complex_Matrix.adjoint A) $$ (j, k)", "using assms fc_mats_carrier"], ["proof (prove)\nusing this:\n  Matrix.row A j \\<bullet> Matrix.col (Complex_Matrix.adjoint A) k =\n  Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row A j\n  A \\<in> fc_mats\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row A j =\n    (A * Complex_Matrix.adjoint A) $$ (j, k)", "unfolding times_mat_def"], ["proof (prove)\nusing this:\n  Matrix.row A j \\<bullet> Matrix.col (Complex_Matrix.adjoint A) k =\n  Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row A j\n  A \\<in> fc_mats\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row A j =\n    Matrix.mat (dim_row A) (dim_col (Complex_Matrix.adjoint A))\n     (\\<lambda>(i, j).\n         Matrix.row A i \\<bullet>\n         Matrix.col (Complex_Matrix.adjoint A) j) $$\n    (j, k)", "by simp"], ["proof (state)\nthis:\n  Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row A j =\n  (A * Complex_Matrix.adjoint A) $$ (j, k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row A j =\n  (A * Complex_Matrix.adjoint A) $$ (j, k)\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR} $$\n    (j, k) =\n    1\\<^sub>m dimR $$ (j, k)", "also"], ["proof (state)\nthis:\n  Matrix.col (Complex_Matrix.adjoint A) k \\<bullet> Matrix.row A j =\n  (A * Complex_Matrix.adjoint A) $$ (j, k)\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR} $$\n    (j, k) =\n    1\\<^sub>m dimR $$ (j, k)", "have \"... = (1\\<^sub>m dimR) $$ (j,k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A * Complex_Matrix.adjoint A) $$ (j, k) = 1\\<^sub>m dimR $$ (j, k)", "using assms dim_eq"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. (A * Complex_Matrix.adjoint A) $$ (j, k) = 1\\<^sub>m dimR $$ (j, k)", "by (simp add: fc_mats_carrier)"], ["proof (state)\nthis:\n  (A * Complex_Matrix.adjoint A) $$ (j, k) = 1\\<^sub>m dimR $$ (j, k)\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR} $$\n    (j, k) =\n    1\\<^sub>m dimR $$ (j, k)", "finally"], ["proof (chain)\npicking this:\n  local.sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR} $$\n  (j, k) =\n  1\\<^sub>m dimR $$ (j, k)", "show ?thesis"], ["proof (prove)\nusing this:\n  local.sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR} $$\n  (j, k) =\n  1\\<^sub>m dimR $$ (j, k)\n\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR} $$\n    (j, k) =\n    1\\<^sub>m dimR $$ (j, k)", "."], ["proof (state)\nthis:\n  local.sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR} $$\n  (j, k) =\n  1\\<^sub>m dimR $$ (j, k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in cpx_sq_mat) rank_1_proj_sum_density:\n  assumes \"finite I\"\n  and \"\\<forall>i\\<in> I. \\<parallel>u i\\<parallel> = 1\" \n  and \"\\<forall>i\\<in> I. dim_vec (u i) = dimR\"\n  and \"\\<forall>i\\<in> I. 0 \\<le> p i\"\n  and \"(\\<Sum>i\\<in> I. p i) = 1\"\nshows \"density_operator (sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m (rank_1_proj (u i))) I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. density_operator\n     (local.sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m rank_1_proj (u i)) I)", "unfolding density_operator_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.positive\n     (local.sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m rank_1_proj (u i))\n       I) \\<and>\n    Complex_Matrix.trace\n     (local.sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m rank_1_proj (u i)) I) =\n    1", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. Complex_Matrix.positive\n     (local.sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m rank_1_proj (u i)) I)\n 2. Complex_Matrix.trace\n     (local.sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m rank_1_proj (u i)) I) =\n    1", "have \"Complex_Matrix.trace (sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m rank_1_proj (u i)) I) = \n    (\\<Sum>i\\<in> I. Complex_Matrix.trace (p i \\<cdot>\\<^sub>m rank_1_proj (u i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (local.sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m rank_1_proj (u i)) I) =\n    (\\<Sum>i\\<in>I.\n       Complex_Matrix.trace (p i \\<cdot>\\<^sub>m rank_1_proj (u i)))", "proof (rule trace_sum_mat, (simp add: assms))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> I \\<Longrightarrow>\n       p i \\<cdot>\\<^sub>m rank_1_proj (u i) \\<in> fc_mats", "show \"\\<And>i. i \\<in> I \\<Longrightarrow> p i \\<cdot>\\<^sub>m rank_1_proj (u i) \\<in> fc_mats\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> I \\<Longrightarrow>\n       p i \\<cdot>\\<^sub>m rank_1_proj (u i) \\<in> fc_mats", "using assms smult_mem fc_mats_carrier \n        dim_eq"], ["proof (prove)\nusing this:\n  finite I\n  \\<forall>i\\<in>I. \\<parallel>u i\\<parallel> = 1\n  \\<forall>i\\<in>I. dim_vec (u i) = dimR\n  \\<forall>i\\<in>I. 0 \\<le> p i\n  sum p I = 1\n  ?A \\<in> fc_mats \\<Longrightarrow> ?a \\<cdot>\\<^sub>m ?A \\<in> fc_mats\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> I \\<Longrightarrow>\n       p i \\<cdot>\\<^sub>m rank_1_proj (u i) \\<in> fc_mats", "by auto"], ["proof (state)\nthis:\n  ?i2 \\<in> I \\<Longrightarrow>\n  p ?i2 \\<cdot>\\<^sub>m rank_1_proj (u ?i2) \\<in> fc_mats\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Complex_Matrix.trace\n   (local.sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m rank_1_proj (u i)) I) =\n  (\\<Sum>i\\<in>I.\n     Complex_Matrix.trace (p i \\<cdot>\\<^sub>m rank_1_proj (u i)))\n\ngoal (2 subgoals):\n 1. Complex_Matrix.positive\n     (local.sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m rank_1_proj (u i)) I)\n 2. Complex_Matrix.trace\n     (local.sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m rank_1_proj (u i)) I) =\n    1", "also"], ["proof (state)\nthis:\n  Complex_Matrix.trace\n   (local.sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m rank_1_proj (u i)) I) =\n  (\\<Sum>i\\<in>I.\n     Complex_Matrix.trace (p i \\<cdot>\\<^sub>m rank_1_proj (u i)))\n\ngoal (2 subgoals):\n 1. Complex_Matrix.positive\n     (local.sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m rank_1_proj (u i)) I)\n 2. Complex_Matrix.trace\n     (local.sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m rank_1_proj (u i)) I) =\n    1", "have \"... = (\\<Sum>i\\<in> I. p i * Complex_Matrix.trace (rank_1_proj (u i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>I.\n       Complex_Matrix.trace (p i \\<cdot>\\<^sub>m rank_1_proj (u i))) =\n    (\\<Sum>i\\<in>I. p i * Complex_Matrix.trace (rank_1_proj (u i)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>I.\n       Complex_Matrix.trace (p i \\<cdot>\\<^sub>m rank_1_proj (u i))) =\n    (\\<Sum>i\\<in>I. p i * Complex_Matrix.trace (rank_1_proj (u i)))", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>I.\n       Complex_Matrix.trace (p i \\<cdot>\\<^sub>m rank_1_proj (u i))) =\n    (\\<Sum>i\\<in>I. p i * Complex_Matrix.trace (rank_1_proj (u i)))", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>I.\n       Complex_Matrix.trace (p i \\<cdot>\\<^sub>m rank_1_proj (u i))) =\n    (\\<Sum>i\\<in>I. p i * Complex_Matrix.trace (rank_1_proj (u i)))", "assume \"i \\<in> I\""], ["proof (state)\nthis:\n  i \\<in> I\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>I.\n       Complex_Matrix.trace (p i \\<cdot>\\<^sub>m rank_1_proj (u i))) =\n    (\\<Sum>i\\<in>I. p i * Complex_Matrix.trace (rank_1_proj (u i)))", "hence \"Complex_Matrix.trace (p i \\<cdot>\\<^sub>m rank_1_proj (u i)) = \n        p i * Complex_Matrix.trace (rank_1_proj (u i))\""], ["proof (prove)\nusing this:\n  i \\<in> I\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (p i \\<cdot>\\<^sub>m rank_1_proj (u i)) =\n    p i * Complex_Matrix.trace (rank_1_proj (u i))", "using trace_smult[of \"rank_1_proj (u i)\" dimR] assms fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  i \\<in> I\n  rank_1_proj (u i) \\<in> carrier_mat dimR dimR \\<Longrightarrow>\n  Complex_Matrix.trace (?c \\<cdot>\\<^sub>m rank_1_proj (u i)) =\n  ?c * Complex_Matrix.trace (rank_1_proj (u i))\n  finite I\n  \\<forall>i\\<in>I. \\<parallel>u i\\<parallel> = 1\n  \\<forall>i\\<in>I. dim_vec (u i) = dimR\n  \\<forall>i\\<in>I. 0 \\<le> p i\n  sum p I = 1\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace (p i \\<cdot>\\<^sub>m rank_1_proj (u i)) =\n    p i * Complex_Matrix.trace (rank_1_proj (u i))", "by auto"], ["proof (state)\nthis:\n  Complex_Matrix.trace (p i \\<cdot>\\<^sub>m rank_1_proj (u i)) =\n  p i * Complex_Matrix.trace (rank_1_proj (u i))\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>I.\n       Complex_Matrix.trace (p i \\<cdot>\\<^sub>m rank_1_proj (u i))) =\n    (\\<Sum>i\\<in>I. p i * Complex_Matrix.trace (rank_1_proj (u i)))", "}"], ["proof (state)\nthis:\n  ?i4 \\<in> I \\<Longrightarrow>\n  Complex_Matrix.trace (p ?i4 \\<cdot>\\<^sub>m rank_1_proj (u ?i4)) =\n  p ?i4 * Complex_Matrix.trace (rank_1_proj (u ?i4))\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>I.\n       Complex_Matrix.trace (p i \\<cdot>\\<^sub>m rank_1_proj (u i))) =\n    (\\<Sum>i\\<in>I. p i * Complex_Matrix.trace (rank_1_proj (u i)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?i4 \\<in> I \\<Longrightarrow>\n  Complex_Matrix.trace (p ?i4 \\<cdot>\\<^sub>m rank_1_proj (u ?i4)) =\n  p ?i4 * Complex_Matrix.trace (rank_1_proj (u ?i4))\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>I.\n       Complex_Matrix.trace (p i \\<cdot>\\<^sub>m rank_1_proj (u i))) =\n    (\\<Sum>i\\<in>I. p i * Complex_Matrix.trace (rank_1_proj (u i)))", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>I.\n     Complex_Matrix.trace (p i \\<cdot>\\<^sub>m rank_1_proj (u i))) =\n  (\\<Sum>i\\<in>I. p i * Complex_Matrix.trace (rank_1_proj (u i)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>I.\n     Complex_Matrix.trace (p i \\<cdot>\\<^sub>m rank_1_proj (u i))) =\n  (\\<Sum>i\\<in>I. p i * Complex_Matrix.trace (rank_1_proj (u i)))\n\ngoal (2 subgoals):\n 1. Complex_Matrix.positive\n     (local.sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m rank_1_proj (u i)) I)\n 2. Complex_Matrix.trace\n     (local.sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m rank_1_proj (u i)) I) =\n    1", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>I.\n     Complex_Matrix.trace (p i \\<cdot>\\<^sub>m rank_1_proj (u i))) =\n  (\\<Sum>i\\<in>I. p i * Complex_Matrix.trace (rank_1_proj (u i)))\n\ngoal (2 subgoals):\n 1. Complex_Matrix.positive\n     (local.sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m rank_1_proj (u i)) I)\n 2. Complex_Matrix.trace\n     (local.sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m rank_1_proj (u i)) I) =\n    1", "have \"... = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>I. p i * Complex_Matrix.trace (rank_1_proj (u i))) = 1", "using assms rank_1_proj_trace assms"], ["proof (prove)\nusing this:\n  finite I\n  \\<forall>i\\<in>I. \\<parallel>u i\\<parallel> = 1\n  \\<forall>i\\<in>I. dim_vec (u i) = dimR\n  \\<forall>i\\<in>I. 0 \\<le> p i\n  sum p I = 1\n  \\<parallel>?v\\<parallel> = 1 \\<Longrightarrow>\n  Complex_Matrix.trace (rank_1_proj ?v) = 1\n  finite I\n  \\<forall>i\\<in>I. \\<parallel>u i\\<parallel> = 1\n  \\<forall>i\\<in>I. dim_vec (u i) = dimR\n  \\<forall>i\\<in>I. 0 \\<le> p i\n  sum p I = 1\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>I. p i * Complex_Matrix.trace (rank_1_proj (u i))) = 1", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>I. p i * Complex_Matrix.trace (rank_1_proj (u i))) = 1\n\ngoal (2 subgoals):\n 1. Complex_Matrix.positive\n     (local.sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m rank_1_proj (u i)) I)\n 2. Complex_Matrix.trace\n     (local.sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m rank_1_proj (u i)) I) =\n    1", "finally"], ["proof (chain)\npicking this:\n  Complex_Matrix.trace\n   (local.sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m rank_1_proj (u i)) I) =\n  1", "show \"Complex_Matrix.trace (sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m rank_1_proj (u i)) I) = 1\""], ["proof (prove)\nusing this:\n  Complex_Matrix.trace\n   (local.sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m rank_1_proj (u i)) I) =\n  1\n\ngoal (1 subgoal):\n 1. Complex_Matrix.trace\n     (local.sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m rank_1_proj (u i)) I) =\n    1", "."], ["proof (state)\nthis:\n  Complex_Matrix.trace\n   (local.sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m rank_1_proj (u i)) I) =\n  1\n\ngoal (1 subgoal):\n 1. Complex_Matrix.positive\n     (local.sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m rank_1_proj (u i)) I)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Complex_Matrix.positive\n     (local.sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m rank_1_proj (u i)) I)", "show \"Complex_Matrix.positive (sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m rank_1_proj (u i)) I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.positive\n     (local.sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m rank_1_proj (u i)) I)", "proof (rule sum_mat_positive, (simp add: assms))"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i \\<in> I \\<Longrightarrow>\n       Complex_Matrix.positive (p i \\<cdot>\\<^sub>m rank_1_proj (u i))\n 2. \\<And>i.\n       i \\<in> I \\<Longrightarrow>\n       p i \\<cdot>\\<^sub>m rank_1_proj (u i) \\<in> fc_mats", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i \\<in> I \\<Longrightarrow>\n       Complex_Matrix.positive (p i \\<cdot>\\<^sub>m rank_1_proj (u i))\n 2. \\<And>i.\n       i \\<in> I \\<Longrightarrow>\n       p i \\<cdot>\\<^sub>m rank_1_proj (u i) \\<in> fc_mats", "assume \"i\\<in> I\""], ["proof (state)\nthis:\n  i \\<in> I\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i \\<in> I \\<Longrightarrow>\n       Complex_Matrix.positive (p i \\<cdot>\\<^sub>m rank_1_proj (u i))\n 2. \\<And>i.\n       i \\<in> I \\<Longrightarrow>\n       p i \\<cdot>\\<^sub>m rank_1_proj (u i) \\<in> fc_mats", "thus \"p i \\<cdot>\\<^sub>m rank_1_proj (u i) \\<in> fc_mats\""], ["proof (prove)\nusing this:\n  i \\<in> I\n\ngoal (1 subgoal):\n 1. p i \\<cdot>\\<^sub>m rank_1_proj (u i) \\<in> fc_mats", "using assms smult_mem fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  i \\<in> I\n  finite I\n  \\<forall>i\\<in>I. \\<parallel>u i\\<parallel> = 1\n  \\<forall>i\\<in>I. dim_vec (u i) = dimR\n  \\<forall>i\\<in>I. 0 \\<le> p i\n  sum p I = 1\n  ?A \\<in> fc_mats \\<Longrightarrow> ?a \\<cdot>\\<^sub>m ?A \\<in> fc_mats\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. p i \\<cdot>\\<^sub>m rank_1_proj (u i) \\<in> fc_mats", "by auto"], ["proof (state)\nthis:\n  p i \\<cdot>\\<^sub>m rank_1_proj (u i) \\<in> fc_mats\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> I \\<Longrightarrow>\n       Complex_Matrix.positive (p i \\<cdot>\\<^sub>m rank_1_proj (u i))", "show \"Complex_Matrix.positive (p i \\<cdot>\\<^sub>m rank_1_proj (u i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.positive (p i \\<cdot>\\<^sub>m rank_1_proj (u i))", "using assms \\<open>i\\<in> I\\<close> \n        rank_1_proj_positive positive_smult[of \"rank_1_proj (u i)\" dimR] dim_eq"], ["proof (prove)\nusing this:\n  finite I\n  \\<forall>i\\<in>I. \\<parallel>u i\\<parallel> = 1\n  \\<forall>i\\<in>I. dim_vec (u i) = dimR\n  \\<forall>i\\<in>I. 0 \\<le> p i\n  sum p I = 1\n  i \\<in> I\n  \\<parallel>?v\\<parallel> = 1 \\<Longrightarrow>\n  Complex_Matrix.positive (rank_1_proj ?v)\n  \\<lbrakk>rank_1_proj (u i) \\<in> carrier_mat dimR dimR;\n   Complex_Matrix.positive (rank_1_proj (u i)); 0 \\<le> ?c\\<rbrakk>\n  \\<Longrightarrow> Complex_Matrix.positive\n                     (?c \\<cdot>\\<^sub>m rank_1_proj (u i))\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. Complex_Matrix.positive (p i \\<cdot>\\<^sub>m rank_1_proj (u i))", "by auto"], ["proof (state)\nthis:\n  Complex_Matrix.positive (p i \\<cdot>\\<^sub>m rank_1_proj (u i))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Complex_Matrix.positive\n   (local.sum_mat (\\<lambda>i. p i \\<cdot>\\<^sub>m rank_1_proj (u i)) I)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in cpx_sq_mat) sum_rank_1_proj_unitary:\n  assumes \"A \\<in> fc_mats\"\nand \"Complex_Matrix.unitary A\"\nshows \"(sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..< dimR})= (1\\<^sub>m dimR)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR} =\n    1\\<^sub>m dimR", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (1\\<^sub>m dimR);\n        j < dim_col (1\\<^sub>m dimR)\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat\n                          (\\<lambda>i. rank_1_proj (Matrix.col A i))\n                          {..<dimR} $$\n                         (i, j) =\n                         1\\<^sub>m dimR $$ (i, j)\n 2. dim_row\n     (local.sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR}) =\n    dim_row (1\\<^sub>m dimR)\n 3. dim_col\n     (local.sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR}) =\n    dim_col (1\\<^sub>m dimR)", "show \"dim_row (sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR}) = dim_row (1\\<^sub>m dimR)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row\n     (local.sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR}) =\n    dim_row (1\\<^sub>m dimR)", "using assms fc_mats_carrier"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  Complex_Matrix.unitary A\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. dim_row\n     (local.sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR}) =\n    dim_row (1\\<^sub>m dimR)", "by (metis carrier_matD(1) dim_col dim_eq index_one_mat(2) rank_1_proj_carrier sum_mat_carrier)"], ["proof (state)\nthis:\n  dim_row\n   (local.sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR}) =\n  dim_row (1\\<^sub>m dimR)\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (1\\<^sub>m dimR);\n        j < dim_col (1\\<^sub>m dimR)\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat\n                          (\\<lambda>i. rank_1_proj (Matrix.col A i))\n                          {..<dimR} $$\n                         (i, j) =\n                         1\\<^sub>m dimR $$ (i, j)\n 2. dim_col\n     (local.sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR}) =\n    dim_col (1\\<^sub>m dimR)", "show \"dim_col (sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR}) = dim_col (1\\<^sub>m dimR)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col\n     (local.sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR}) =\n    dim_col (1\\<^sub>m dimR)", "using assms fc_mats_carrier rank_1_proj_carrier sum_mat_carrier"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  Complex_Matrix.unitary A\n  fc_mats = carrier_mat dimR dimC\n  rank_1_proj ?v \\<in> carrier_mat (dim_vec ?v) (dim_vec ?v)\n  (\\<And>i.\n      i \\<in> ?I \\<Longrightarrow> ?A i \\<in> fc_mats) \\<Longrightarrow>\n  local.sum_mat ?A ?I \\<in> carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. dim_col\n     (local.sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR}) =\n    dim_col (1\\<^sub>m dimR)", "by (metis carrier_matD(2) dim_col dim_eq index_one_mat(3) square_mat.simps square_mats)"], ["proof (state)\nthis:\n  dim_col\n   (local.sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR}) =\n  dim_col (1\\<^sub>m dimR)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (1\\<^sub>m dimR);\n        j < dim_col (1\\<^sub>m dimR)\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat\n                          (\\<lambda>i. rank_1_proj (Matrix.col A i))\n                          {..<dimR} $$\n                         (i, j) =\n                         1\\<^sub>m dimR $$ (i, j)", "show \"\\<And>i j. i < dim_row (1\\<^sub>m dimR) \\<Longrightarrow>\n     j < dim_col (1\\<^sub>m dimR) \\<Longrightarrow> sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i)) {..<dimR} $$ (i, j) = \n      1\\<^sub>m dimR $$ (i, j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (1\\<^sub>m dimR);\n        j < dim_col (1\\<^sub>m dimR)\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat\n                          (\\<lambda>i. rank_1_proj (Matrix.col A i))\n                          {..<dimR} $$\n                         (i, j) =\n                         1\\<^sub>m dimR $$ (i, j)", "using assms sum_rank_1_proj_unitary_index"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  Complex_Matrix.unitary A\n  \\<lbrakk>?A \\<in> fc_mats; Complex_Matrix.unitary ?A; ?j < dimR;\n   ?k < dimR\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat\n                     (\\<lambda>i. rank_1_proj (Matrix.col ?A i))\n                     {..<dimR} $$\n                    (?j, ?k) =\n                    1\\<^sub>m dimR $$ (?j, ?k)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (1\\<^sub>m dimR);\n        j < dim_col (1\\<^sub>m dimR)\\<rbrakk>\n       \\<Longrightarrow> local.sum_mat\n                          (\\<lambda>i. rank_1_proj (Matrix.col A i))\n                          {..<dimR} $$\n                         (i, j) =\n                         1\\<^sub>m dimR $$ (i, j)", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk>?i4 < dim_row (1\\<^sub>m dimR);\n   ?j4 < dim_col (1\\<^sub>m dimR)\\<rbrakk>\n  \\<Longrightarrow> local.sum_mat (\\<lambda>i. rank_1_proj (Matrix.col A i))\n                     {..<dimR} $$\n                    (?i4, ?j4) =\n                    1\\<^sub>m dimR $$ (?i4, ?j4)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in cpx_sq_mat) rank_1_proj_unitary:\n  assumes \"A \\<in> fc_mats\"\nand \"Complex_Matrix.unitary A\"\nand \"j < dimR\"\nand \"k < dimR\"\nshows \"rank_1_proj (Matrix.col A j) * (rank_1_proj (Matrix.col A k)) =\n  (1\\<^sub>m dimR) $$ (j,k) \\<cdot>\\<^sub>m (outer_prod (Matrix.col A j) (Matrix.col A k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n    1\\<^sub>m dimR $$ (j, k) \\<cdot>\\<^sub>m\n    outer_prod (Matrix.col A j) (Matrix.col A k)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n    1\\<^sub>m dimR $$ (j, k) \\<cdot>\\<^sub>m\n    outer_prod (Matrix.col A j) (Matrix.col A k)", "have \"rank_1_proj (Matrix.col A j) * (rank_1_proj (Matrix.col A k)) = \n    Complex_Matrix.inner_prod (Matrix.col A j) (Matrix.col A k) \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n    Complex_Matrix.inner_prod (Matrix.col A j)\n     (Matrix.col A k) \\<cdot>\\<^sub>m\n    outer_prod (Matrix.col A j) (Matrix.col A k)", "using outer_prod_mult_outer_prod assms Matrix.col_dim local.fc_mats_carrier"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a \\<in> carrier_vec ?d1.0; ?b \\<in> carrier_vec ?d2.0;\n   ?c \\<in> carrier_vec ?d2.0; ?d \\<in> carrier_vec ?d3.0\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?a ?b * outer_prod ?c ?d =\n                    Complex_Matrix.inner_prod ?b ?c \\<cdot>\\<^sub>m\n                    outer_prod ?a ?d\n  A \\<in> fc_mats\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  Matrix.col ?A ?i \\<in> carrier_vec (dim_row ?A)\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n    Complex_Matrix.inner_prod (Matrix.col A j)\n     (Matrix.col A k) \\<cdot>\\<^sub>m\n    outer_prod (Matrix.col A j) (Matrix.col A k)", "unfolding rank_1_proj_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a \\<in> carrier_vec ?d1.0; ?b \\<in> carrier_vec ?d2.0;\n   ?c \\<in> carrier_vec ?d2.0; ?d \\<in> carrier_vec ?d3.0\\<rbrakk>\n  \\<Longrightarrow> outer_prod ?a ?b * outer_prod ?c ?d =\n                    Complex_Matrix.inner_prod ?b ?c \\<cdot>\\<^sub>m\n                    outer_prod ?a ?d\n  A \\<in> fc_mats\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  Matrix.col ?A ?i \\<in> carrier_vec (dim_row ?A)\n  fc_mats = carrier_mat dimR dimC\n\ngoal (1 subgoal):\n 1. outer_prod (Matrix.col A j) (Matrix.col A j) *\n    outer_prod (Matrix.col A k) (Matrix.col A k) =\n    Complex_Matrix.inner_prod (Matrix.col A j)\n     (Matrix.col A k) \\<cdot>\\<^sub>m\n    outer_prod (Matrix.col A j) (Matrix.col A k)", "by blast"], ["proof (state)\nthis:\n  rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n  Complex_Matrix.inner_prod (Matrix.col A j)\n   (Matrix.col A k) \\<cdot>\\<^sub>m\n  outer_prod (Matrix.col A j) (Matrix.col A k)\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n    1\\<^sub>m dimR $$ (j, k) \\<cdot>\\<^sub>m\n    outer_prod (Matrix.col A j) (Matrix.col A k)", "also"], ["proof (state)\nthis:\n  rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n  Complex_Matrix.inner_prod (Matrix.col A j)\n   (Matrix.col A k) \\<cdot>\\<^sub>m\n  outer_prod (Matrix.col A j) (Matrix.col A k)\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n    1\\<^sub>m dimR $$ (j, k) \\<cdot>\\<^sub>m\n    outer_prod (Matrix.col A j) (Matrix.col A k)", "have \"... = (Complex_Matrix.adjoint A * A) $$ (j, k)\\<cdot>\\<^sub>m (outer_prod (Matrix.col A j) (Matrix.col A k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod (Matrix.col A j)\n     (Matrix.col A k) \\<cdot>\\<^sub>m\n    outer_prod (Matrix.col A j) (Matrix.col A k) =\n    (Complex_Matrix.adjoint A * A) $$ (j, k) \\<cdot>\\<^sub>m\n    outer_prod (Matrix.col A j) (Matrix.col A k)", "using inner_prod_adjoint_comp[of A dimR A] assms fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  \\<lbrakk>A \\<in> carrier_mat dimR dimR; A \\<in> carrier_mat dimR dimR;\n   ?i < dimR; ?j < dimR\\<rbrakk>\n  \\<Longrightarrow> Complex_Matrix.inner_prod (Matrix.col A ?i)\n                     (Matrix.col A ?j) =\n                    (Complex_Matrix.adjoint A * A) $$ (?i, ?j)\n  A \\<in> fc_mats\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. Complex_Matrix.inner_prod (Matrix.col A j)\n     (Matrix.col A k) \\<cdot>\\<^sub>m\n    outer_prod (Matrix.col A j) (Matrix.col A k) =\n    (Complex_Matrix.adjoint A * A) $$ (j, k) \\<cdot>\\<^sub>m\n    outer_prod (Matrix.col A j) (Matrix.col A k)", "by simp"], ["proof (state)\nthis:\n  Complex_Matrix.inner_prod (Matrix.col A j)\n   (Matrix.col A k) \\<cdot>\\<^sub>m\n  outer_prod (Matrix.col A j) (Matrix.col A k) =\n  (Complex_Matrix.adjoint A * A) $$ (j, k) \\<cdot>\\<^sub>m\n  outer_prod (Matrix.col A j) (Matrix.col A k)\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n    1\\<^sub>m dimR $$ (j, k) \\<cdot>\\<^sub>m\n    outer_prod (Matrix.col A j) (Matrix.col A k)", "also"], ["proof (state)\nthis:\n  Complex_Matrix.inner_prod (Matrix.col A j)\n   (Matrix.col A k) \\<cdot>\\<^sub>m\n  outer_prod (Matrix.col A j) (Matrix.col A k) =\n  (Complex_Matrix.adjoint A * A) $$ (j, k) \\<cdot>\\<^sub>m\n  outer_prod (Matrix.col A j) (Matrix.col A k)\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n    1\\<^sub>m dimR $$ (j, k) \\<cdot>\\<^sub>m\n    outer_prod (Matrix.col A j) (Matrix.col A k)", "have \"... = (1\\<^sub>m dimR) $$ (j,k) \\<cdot>\\<^sub>m (outer_prod (Matrix.col A j) (Matrix.col A k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Complex_Matrix.adjoint A * A) $$ (j, k) \\<cdot>\\<^sub>m\n    outer_prod (Matrix.col A j) (Matrix.col A k) =\n    1\\<^sub>m dimR $$ (j, k) \\<cdot>\\<^sub>m\n    outer_prod (Matrix.col A j) (Matrix.col A k)", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n\ngoal (1 subgoal):\n 1. (Complex_Matrix.adjoint A * A) $$ (j, k) \\<cdot>\\<^sub>m\n    outer_prod (Matrix.col A j) (Matrix.col A k) =\n    1\\<^sub>m dimR $$ (j, k) \\<cdot>\\<^sub>m\n    outer_prod (Matrix.col A j) (Matrix.col A k)", "unfolding Complex_Matrix.unitary_def"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  A \\<in> carrier_mat (dim_row A) (dim_row A) \\<and>\n  inverts_mat A (Complex_Matrix.adjoint A)\n  j < dimR\n  k < dimR\n\ngoal (1 subgoal):\n 1. (Complex_Matrix.adjoint A * A) $$ (j, k) \\<cdot>\\<^sub>m\n    outer_prod (Matrix.col A j) (Matrix.col A k) =\n    1\\<^sub>m dimR $$ (j, k) \\<cdot>\\<^sub>m\n    outer_prod (Matrix.col A j) (Matrix.col A k)", "by (metis add_commute assms(2) index_add_mat(2) index_one_mat(2) one_mem unitary_simps(1))"], ["proof (state)\nthis:\n  (Complex_Matrix.adjoint A * A) $$ (j, k) \\<cdot>\\<^sub>m\n  outer_prod (Matrix.col A j) (Matrix.col A k) =\n  1\\<^sub>m dimR $$ (j, k) \\<cdot>\\<^sub>m\n  outer_prod (Matrix.col A j) (Matrix.col A k)\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n    1\\<^sub>m dimR $$ (j, k) \\<cdot>\\<^sub>m\n    outer_prod (Matrix.col A j) (Matrix.col A k)", "finally"], ["proof (chain)\npicking this:\n  rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n  1\\<^sub>m dimR $$ (j, k) \\<cdot>\\<^sub>m\n  outer_prod (Matrix.col A j) (Matrix.col A k)", "show ?thesis"], ["proof (prove)\nusing this:\n  rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n  1\\<^sub>m dimR $$ (j, k) \\<cdot>\\<^sub>m\n  outer_prod (Matrix.col A j) (Matrix.col A k)\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n    1\\<^sub>m dimR $$ (j, k) \\<cdot>\\<^sub>m\n    outer_prod (Matrix.col A j) (Matrix.col A k)", "."], ["proof (state)\nthis:\n  rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n  1\\<^sub>m dimR $$ (j, k) \\<cdot>\\<^sub>m\n  outer_prod (Matrix.col A j) (Matrix.col A k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in cpx_sq_mat) rank_1_proj_unitary_ne:\n  assumes \"A \\<in> fc_mats\"\nand \"Complex_Matrix.unitary A\"\nand \"j < dimR\"\nand \"k < dimR\"\nand \"j\\<noteq> k\"\nshows \"rank_1_proj (Matrix.col A j) * (rank_1_proj (Matrix.col A k)) =  (0\\<^sub>m dimR dimR)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n    0\\<^sub>m dimR dimR", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n    0\\<^sub>m dimR dimR", "have \"dim_row (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) = dim_row (outer_prod (Matrix.col A j) (Matrix.col A k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row\n     (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) =\n    dim_row (outer_prod (Matrix.col A j) (Matrix.col A k))", "by simp"], ["proof (state)\nthis:\n  dim_row (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) =\n  dim_row (outer_prod (Matrix.col A j) (Matrix.col A k))\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n    0\\<^sub>m dimR dimR", "also"], ["proof (state)\nthis:\n  dim_row (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) =\n  dim_row (outer_prod (Matrix.col A j) (Matrix.col A k))\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n    0\\<^sub>m dimR dimR", "have \"... = dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (outer_prod (Matrix.col A j) (Matrix.col A k)) = dimR", "using assms fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  j \\<noteq> k\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. dim_row (outer_prod (Matrix.col A j) (Matrix.col A k)) = dimR", "by auto"], ["proof (state)\nthis:\n  dim_row (outer_prod (Matrix.col A j) (Matrix.col A k)) = dimR\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n    0\\<^sub>m dimR dimR", "finally"], ["proof (chain)\npicking this:\n  dim_row (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) =\n  dimR", "have rw: \"dim_row (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) = dimR\""], ["proof (prove)\nusing this:\n  dim_row (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) =\n  dimR\n\ngoal (1 subgoal):\n 1. dim_row\n     (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) =\n    dimR", "."], ["proof (state)\nthis:\n  dim_row (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) =\n  dimR\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n    0\\<^sub>m dimR dimR", "have \"dim_col (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) = dim_col (outer_prod (Matrix.col A j) (Matrix.col A k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col\n     (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) =\n    dim_col (outer_prod (Matrix.col A j) (Matrix.col A k))", "by simp"], ["proof (state)\nthis:\n  dim_col (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) =\n  dim_col (outer_prod (Matrix.col A j) (Matrix.col A k))\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n    0\\<^sub>m dimR dimR", "also"], ["proof (state)\nthis:\n  dim_col (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) =\n  dim_col (outer_prod (Matrix.col A j) (Matrix.col A k))\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n    0\\<^sub>m dimR dimR", "have \"... = dimR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (outer_prod (Matrix.col A j) (Matrix.col A k)) = dimR", "using assms fc_mats_carrier dim_eq"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  j \\<noteq> k\n  fc_mats = carrier_mat dimR dimC\n  dimR = dimC\n\ngoal (1 subgoal):\n 1. dim_col (outer_prod (Matrix.col A j) (Matrix.col A k)) = dimR", "by auto"], ["proof (state)\nthis:\n  dim_col (outer_prod (Matrix.col A j) (Matrix.col A k)) = dimR\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n    0\\<^sub>m dimR dimR", "finally"], ["proof (chain)\npicking this:\n  dim_col (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) =\n  dimR", "have cl: \"dim_col (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) = dimR\""], ["proof (prove)\nusing this:\n  dim_col (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) =\n  dimR\n\ngoal (1 subgoal):\n 1. dim_col\n     (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) =\n    dimR", "."], ["proof (state)\nthis:\n  dim_col (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) =\n  dimR\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n    0\\<^sub>m dimR dimR", "have \"rank_1_proj (Matrix.col A j) * (rank_1_proj (Matrix.col A k)) = \n      (0::complex) \\<cdot>\\<^sub>m (outer_prod (Matrix.col A j) (Matrix.col A k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n    0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)", "using assms rank_1_proj_unitary"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  Complex_Matrix.unitary A\n  j < dimR\n  k < dimR\n  j \\<noteq> k\n  \\<lbrakk>?A \\<in> fc_mats; Complex_Matrix.unitary ?A; ?j < dimR;\n   ?k < dimR\\<rbrakk>\n  \\<Longrightarrow> rank_1_proj (Matrix.col ?A ?j) *\n                    rank_1_proj (Matrix.col ?A ?k) =\n                    1\\<^sub>m dimR $$ (?j, ?k) \\<cdot>\\<^sub>m\n                    outer_prod (Matrix.col ?A ?j) (Matrix.col ?A ?k)\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n    0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)", "by simp"], ["proof (state)\nthis:\n  rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n  0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n    0\\<^sub>m dimR dimR", "also"], ["proof (state)\nthis:\n  rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n  0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n    0\\<^sub>m dimR dimR", "have \"... = (0\\<^sub>m dimR dimR)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k) =\n    0\\<^sub>m dimR dimR", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i ja.\n       \\<lbrakk>i < dim_row (0\\<^sub>m dimR dimR);\n        ja < dim_col (0\\<^sub>m dimR dimR)\\<rbrakk>\n       \\<Longrightarrow> (0 \\<cdot>\\<^sub>m\n                          outer_prod (Matrix.col A j) (Matrix.col A k)) $$\n                         (i, ja) =\n                         0\\<^sub>m dimR dimR $$ (i, ja)\n 2. dim_row\n     (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) =\n    dim_row (0\\<^sub>m dimR dimR)\n 3. dim_col\n     (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) =\n    dim_col (0\\<^sub>m dimR dimR)", "show \"dim_row (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) = dim_row (0\\<^sub>m dimR dimR)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row\n     (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) =\n    dim_row (0\\<^sub>m dimR dimR)", "using rw"], ["proof (prove)\nusing this:\n  dim_row (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) =\n  dimR\n\ngoal (1 subgoal):\n 1. dim_row\n     (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) =\n    dim_row (0\\<^sub>m dimR dimR)", "by simp"], ["proof (state)\nthis:\n  dim_row (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) =\n  dim_row (0\\<^sub>m dimR dimR)\n\ngoal (2 subgoals):\n 1. \\<And>i ja.\n       \\<lbrakk>i < dim_row (0\\<^sub>m dimR dimR);\n        ja < dim_col (0\\<^sub>m dimR dimR)\\<rbrakk>\n       \\<Longrightarrow> (0 \\<cdot>\\<^sub>m\n                          outer_prod (Matrix.col A j) (Matrix.col A k)) $$\n                         (i, ja) =\n                         0\\<^sub>m dimR dimR $$ (i, ja)\n 2. dim_col\n     (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) =\n    dim_col (0\\<^sub>m dimR dimR)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i ja.\n       \\<lbrakk>i < dim_row (0\\<^sub>m dimR dimR);\n        ja < dim_col (0\\<^sub>m dimR dimR)\\<rbrakk>\n       \\<Longrightarrow> (0 \\<cdot>\\<^sub>m\n                          outer_prod (Matrix.col A j) (Matrix.col A k)) $$\n                         (i, ja) =\n                         0\\<^sub>m dimR dimR $$ (i, ja)\n 2. dim_col\n     (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) =\n    dim_col (0\\<^sub>m dimR dimR)", "show \"dim_col (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) = dim_col (0\\<^sub>m dimR dimR)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col\n     (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) =\n    dim_col (0\\<^sub>m dimR dimR)", "using cl"], ["proof (prove)\nusing this:\n  dim_col (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) =\n  dimR\n\ngoal (1 subgoal):\n 1. dim_col\n     (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) =\n    dim_col (0\\<^sub>m dimR dimR)", "by simp"], ["proof (state)\nthis:\n  dim_col (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) =\n  dim_col (0\\<^sub>m dimR dimR)\n\ngoal (1 subgoal):\n 1. \\<And>i ja.\n       \\<lbrakk>i < dim_row (0\\<^sub>m dimR dimR);\n        ja < dim_col (0\\<^sub>m dimR dimR)\\<rbrakk>\n       \\<Longrightarrow> (0 \\<cdot>\\<^sub>m\n                          outer_prod (Matrix.col A j) (Matrix.col A k)) $$\n                         (i, ja) =\n                         0\\<^sub>m dimR dimR $$ (i, ja)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i ja.\n       \\<lbrakk>i < dim_row (0\\<^sub>m dimR dimR);\n        ja < dim_col (0\\<^sub>m dimR dimR)\\<rbrakk>\n       \\<Longrightarrow> (0 \\<cdot>\\<^sub>m\n                          outer_prod (Matrix.col A j) (Matrix.col A k)) $$\n                         (i, ja) =\n                         0\\<^sub>m dimR dimR $$ (i, ja)", "show \"\\<And>i p. i < dim_row (0\\<^sub>m dimR dimR) \\<Longrightarrow> p < dim_col (0\\<^sub>m dimR dimR) \\<Longrightarrow> \n      (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) $$ (i, p) = 0\\<^sub>m dimR dimR $$ (i, p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i p.\n       \\<lbrakk>i < dim_row (0\\<^sub>m dimR dimR);\n        p < dim_col (0\\<^sub>m dimR dimR)\\<rbrakk>\n       \\<Longrightarrow> (0 \\<cdot>\\<^sub>m\n                          outer_prod (Matrix.col A j) (Matrix.col A k)) $$\n                         (i, p) =\n                         0\\<^sub>m dimR dimR $$ (i, p)", "using rw cl"], ["proof (prove)\nusing this:\n  dim_row (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) =\n  dimR\n  dim_col (0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k)) =\n  dimR\n\ngoal (1 subgoal):\n 1. \\<And>i p.\n       \\<lbrakk>i < dim_row (0\\<^sub>m dimR dimR);\n        p < dim_col (0\\<^sub>m dimR dimR)\\<rbrakk>\n       \\<Longrightarrow> (0 \\<cdot>\\<^sub>m\n                          outer_prod (Matrix.col A j) (Matrix.col A k)) $$\n                         (i, p) =\n                         0\\<^sub>m dimR dimR $$ (i, p)", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?i2 < dim_row (0\\<^sub>m dimR dimR);\n   ?p2 < dim_col (0\\<^sub>m dimR dimR)\\<rbrakk>\n  \\<Longrightarrow> (0 \\<cdot>\\<^sub>m\n                     outer_prod (Matrix.col A j) (Matrix.col A k)) $$\n                    (?i2, ?p2) =\n                    0\\<^sub>m dimR dimR $$ (?i2, ?p2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A k) =\n  0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n    0\\<^sub>m dimR dimR", "finally"], ["proof (chain)\npicking this:\n  rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n  0\\<^sub>m dimR dimR", "show ?thesis"], ["proof (prove)\nusing this:\n  rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n  0\\<^sub>m dimR dimR\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n    0\\<^sub>m dimR dimR", "."], ["proof (state)\nthis:\n  rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A k) =\n  0\\<^sub>m dimR dimR\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in cpx_sq_mat) rank_1_proj_unitary_eq:\n  assumes \"A \\<in> fc_mats\"\nand \"Complex_Matrix.unitary A\"\nand \"j < dimR\"\nshows \"rank_1_proj (Matrix.col A j) * (rank_1_proj (Matrix.col A j)) =  rank_1_proj (Matrix.col A j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A j) =\n    rank_1_proj (Matrix.col A j)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A j) =\n    rank_1_proj (Matrix.col A j)", "have \"rank_1_proj (Matrix.col A j) * (rank_1_proj (Matrix.col A j)) = (1::complex) \\<cdot>\\<^sub>m (rank_1_proj (Matrix.col A j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A j) =\n    1 \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A j)", "using assms rank_1_proj_unitary"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  Complex_Matrix.unitary A\n  j < dimR\n  \\<lbrakk>?A \\<in> fc_mats; Complex_Matrix.unitary ?A; ?j < dimR;\n   ?k < dimR\\<rbrakk>\n  \\<Longrightarrow> rank_1_proj (Matrix.col ?A ?j) *\n                    rank_1_proj (Matrix.col ?A ?k) =\n                    1\\<^sub>m dimR $$ (?j, ?k) \\<cdot>\\<^sub>m\n                    outer_prod (Matrix.col ?A ?j) (Matrix.col ?A ?k)\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A j) =\n    1 \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A j)", "unfolding rank_1_proj_def"], ["proof (prove)\nusing this:\n  A \\<in> fc_mats\n  Complex_Matrix.unitary A\n  j < dimR\n  \\<lbrakk>?A \\<in> fc_mats; Complex_Matrix.unitary ?A; ?j < dimR;\n   ?k < dimR\\<rbrakk>\n  \\<Longrightarrow> outer_prod (Matrix.col ?A ?j) (Matrix.col ?A ?j) *\n                    outer_prod (Matrix.col ?A ?k) (Matrix.col ?A ?k) =\n                    1\\<^sub>m dimR $$ (?j, ?k) \\<cdot>\\<^sub>m\n                    outer_prod (Matrix.col ?A ?j) (Matrix.col ?A ?k)\n\ngoal (1 subgoal):\n 1. outer_prod (Matrix.col A j) (Matrix.col A j) *\n    outer_prod (Matrix.col A j) (Matrix.col A j) =\n    1 \\<cdot>\\<^sub>m outer_prod (Matrix.col A j) (Matrix.col A j)", "by simp"], ["proof (state)\nthis:\n  rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A j) =\n  1 \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A j)\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A j) =\n    rank_1_proj (Matrix.col A j)", "also"], ["proof (state)\nthis:\n  rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A j) =\n  1 \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A j)\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A j) =\n    rank_1_proj (Matrix.col A j)", "have \"... = (rank_1_proj (Matrix.col A j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A j) =\n    rank_1_proj (Matrix.col A j)", "by (simp add: smult_one)"], ["proof (state)\nthis:\n  1 \\<cdot>\\<^sub>m rank_1_proj (Matrix.col A j) =\n  rank_1_proj (Matrix.col A j)\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A j) =\n    rank_1_proj (Matrix.col A j)", "finally"], ["proof (chain)\npicking this:\n  rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A j) =\n  rank_1_proj (Matrix.col A j)", "show ?thesis"], ["proof (prove)\nusing this:\n  rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A j) =\n  rank_1_proj (Matrix.col A j)\n\ngoal (1 subgoal):\n 1. rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A j) =\n    rank_1_proj (Matrix.col A j)", "."], ["proof (state)\nthis:\n  rank_1_proj (Matrix.col A j) * rank_1_proj (Matrix.col A j) =\n  rank_1_proj (Matrix.col A j)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}