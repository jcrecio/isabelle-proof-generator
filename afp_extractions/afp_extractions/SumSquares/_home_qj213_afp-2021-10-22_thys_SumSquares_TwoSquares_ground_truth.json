{"file_name": "/home/qj213/afp-2021-10-22/thys/SumSquares/TwoSquares.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/SumSquares", "problem_names": ["lemma best_division_abs: \"(n::int) > 0 \\<Longrightarrow> \\<exists> k. 2 * \\<bar>a - k*n\\<bar> \\<le> n\"", "lemma sum2sq_int_nat_eq: \"sum2sq_nat a b = sum2sq_int (a, b)\"", "lemma is_sum2sq_int_nat_eq: \"is_sum2sq_nat n = is_sum2sq_int (int n)\"", "lemma product_two_squares_aux: \"sum2sq_int(a, b) * sum2sq_int(c, d) = sum2sq_int(a*c - b*d, a*d + b*c)\"", "lemma product_two_squares_int: \"is_sum2sq_int m \\<Longrightarrow> is_sum2sq_int n \\<Longrightarrow> is_sum2sq_int (m*n)\"", "lemma product_two_squares_nat: \"is_sum2sq_nat m \\<Longrightarrow> is_sum2sq_nat n \\<Longrightarrow> is_sum2sq_nat (m*n)\"", "lemma sots1_aux:\n  assumes \"prime (4*k+3)\"\n  assumes \"odd (multiplicity (4*k+3) n)\"\n  shows \"\\<not> is_sum2sq_nat n\"", "lemma sots1: assumes \"is_sum2sq_nat n\"\n  shows \"\\<And> k. prime (4*k+3) \\<longrightarrow> even (multiplicity (4*k+3) n)\"", "lemma aux_lemma: assumes \"[(a::nat) = b] (mod c)\" \"b < c\"\n  shows \"\\<exists> k. a = c*k + b\"", "lemma Legendre_1mod4: \"prime (4*k+1::nat) \\<Longrightarrow> (Legendre (-1) (4*k+1)) = 1\"", "lemma qf1_prime_exists: \"prime (4*k+1) \\<Longrightarrow> is_sum2sq_nat (4*k+1)\"", "lemma fermat_two_squares: assumes \"prime p\" \"(\\<not> [p = 3] (mod 4))\"\n  shows \"is_sum2sq_nat p\"", "lemma sots2: assumes \"\\<And> k. prime (4*k+3) \\<longrightarrow> even (multiplicity (4*k+3) n)\"\n  shows \"is_sum2sq_nat n\"", "theorem sum_of_two_squares:\n    \"is_sum2sq_nat n \\<longleftrightarrow> (\\<forall> k. prime (4*k+3) \\<longrightarrow> even (multiplicity (4*k+3) n))\"", "lemma k_mod_eq: \"(\\<forall>p::nat. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> P p) = (\\<forall>k. prime (4*k+3) \\<longrightarrow> P (4*k+3))\"", "theorem sum_of_two_squares':\n    \"is_sum2sq_nat n \\<longleftrightarrow> (\\<forall> p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> even (multiplicity p n))\"", "theorem sum_of_two_squares_prime: assumes \"prime p\"\n  shows \"is_sum2sq_nat p = [p\\<noteq>3] (mod 4)\""], "translations": [["", "lemma best_division_abs: \"(n::int) > 0 \\<Longrightarrow> \\<exists> k. 2 * \\<bar>a - k*n\\<bar> \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "assume a: \"n > 0\""], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "define k where \"k = a div n\""], ["proof (state)\nthis:\n  k = a div n\n\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "hence h: \"a - k * n = a mod n\""], ["proof (prove)\nusing this:\n  k = a div n\n\ngoal (1 subgoal):\n 1. a - k * n = a mod n", "by (simp add: mod_div_mult_eq algebra_simps)"], ["proof (state)\nthis:\n  a - k * n = a mod n\n\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "thus ?thesis"], ["proof (prove)\nusing this:\n  a - k * n = a mod n\n\ngoal (1 subgoal):\n 1. \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "proof (cases \"2 * (a mod n) \\<le> n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>a - k * n = a mod n; 2 * (a mod n) \\<le> n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n\n 2. \\<lbrakk>a - k * n = a mod n; \\<not> 2 * (a mod n) \\<le> n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "case True"], ["proof (state)\nthis:\n  2 * (a mod n) \\<le> n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a - k * n = a mod n; 2 * (a mod n) \\<le> n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n\n 2. \\<lbrakk>a - k * n = a mod n; \\<not> 2 * (a mod n) \\<le> n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "hence \"2 * \\<bar>a - k*n\\<bar> \\<le> n\""], ["proof (prove)\nusing this:\n  2 * (a mod n) \\<le> n\n\ngoal (1 subgoal):\n 1. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "using h pos_mod_sign a"], ["proof (prove)\nusing this:\n  2 * (a mod n) \\<le> n\n  a - k * n = a mod n\n  (0::?'a) < ?b \\<Longrightarrow> (0::?'a) \\<le> ?a mod ?b\n  0 < n\n\ngoal (1 subgoal):\n 1. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "by auto"], ["proof (state)\nthis:\n  2 * \\<bar>a - k * n\\<bar> \\<le> n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a - k * n = a mod n; 2 * (a mod n) \\<le> n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n\n 2. \\<lbrakk>a - k * n = a mod n; \\<not> 2 * (a mod n) \\<le> n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "thus ?thesis"], ["proof (prove)\nusing this:\n  2 * \\<bar>a - k * n\\<bar> \\<le> n\n\ngoal (1 subgoal):\n 1. \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "by blast"], ["proof (state)\nthis:\n  \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a - k * n = a mod n; \\<not> 2 * (a mod n) \\<le> n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>a - k * n = a mod n; \\<not> 2 * (a mod n) \\<le> n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "case False"], ["proof (state)\nthis:\n  \\<not> 2 * (a mod n) \\<le> n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a - k * n = a mod n; \\<not> 2 * (a mod n) \\<le> n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "hence \"2 * (n - a mod n) \\<le> n\""], ["proof (prove)\nusing this:\n  \\<not> 2 * (a mod n) \\<le> n\n\ngoal (1 subgoal):\n 1. 2 * (n - a mod n) \\<le> n", "by auto"], ["proof (state)\nthis:\n  2 * (n - a mod n) \\<le> n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a - k * n = a mod n; \\<not> 2 * (a mod n) \\<le> n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "have \"a - (k+1)*n = a mod n - n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a - (k + 1) * n = a mod n - n", "using h"], ["proof (prove)\nusing this:\n  a - k * n = a mod n\n\ngoal (1 subgoal):\n 1. a - (k + 1) * n = a mod n - n", "by (simp add: algebra_simps)"], ["proof (state)\nthis:\n  a - (k + 1) * n = a mod n - n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a - k * n = a mod n; \\<not> 2 * (a mod n) \\<le> n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "hence \"2 * \\<bar>a - (k+1)*n\\<bar> \\<le> n\""], ["proof (prove)\nusing this:\n  a - (k + 1) * n = a mod n - n\n\ngoal (1 subgoal):\n 1. 2 * \\<bar>a - (k + 1) * n\\<bar> \\<le> n", "using h pos_mod_bound[of n a] a False"], ["proof (prove)\nusing this:\n  a - (k + 1) * n = a mod n - n\n  a - k * n = a mod n\n  0 < n \\<Longrightarrow> a mod n < n\n  0 < n\n  \\<not> 2 * (a mod n) \\<le> n\n\ngoal (1 subgoal):\n 1. 2 * \\<bar>a - (k + 1) * n\\<bar> \\<le> n", "by fastforce"], ["proof (state)\nthis:\n  2 * \\<bar>a - (k + 1) * n\\<bar> \\<le> n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a - k * n = a mod n; \\<not> 2 * (a mod n) \\<le> n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "thus ?thesis"], ["proof (prove)\nusing this:\n  2 * \\<bar>a - (k + 1) * n\\<bar> \\<le> n\n\ngoal (1 subgoal):\n 1. \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "by blast"], ["proof (state)\nthis:\n  \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "definition\n  sum2sq_int :: \"int \\<times> int \\<Rightarrow> int\" where\n  \"sum2sq_int = (\\<lambda>(a,b). a^2+b^2)\""], ["", "private"], ["", "definition\n  is_sum2sq_int :: \"int \\<Rightarrow> bool\" where\n  \"is_sum2sq_int n \\<longleftrightarrow> (\\<exists> a b. n = sum2sq_int(a,b))\""], ["", "private"], ["", "lemma sum2sq_int_nat_eq: \"sum2sq_nat a b = sum2sq_int (a, b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int (sum2sq_nat a b) = sum2sq_int (int a, int b)", "unfolding sum2sq_nat_def sum2sq_int_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. int (a\\<^sup>2 + b\\<^sup>2) =\n    (case (int a, int b) of (a, b) \\<Rightarrow> a\\<^sup>2 + b\\<^sup>2)", "by simp"], ["", "private"], ["", "lemma is_sum2sq_int_nat_eq: \"is_sum2sq_nat n = is_sum2sq_int (int n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sum2sq_nat n = is_sum2sq_int (int n)", "unfolding is_sum2sq_nat_def is_sum2sq_int_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>a b. n = sum2sq_nat a b) =\n    (\\<exists>a b. int n = sum2sq_int (a, b))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>a b. n = sum2sq_nat a b \\<Longrightarrow>\n    \\<exists>a b. int n = sum2sq_int (a, b)\n 2. \\<exists>a b. int n = sum2sq_int (a, b) \\<Longrightarrow>\n    \\<exists>a b. n = sum2sq_nat a b", "assume \"\\<exists>a b. n = sum2sq_nat a b\""], ["proof (state)\nthis:\n  \\<exists>a b. n = sum2sq_nat a b\n\ngoal (2 subgoals):\n 1. \\<exists>a b. n = sum2sq_nat a b \\<Longrightarrow>\n    \\<exists>a b. int n = sum2sq_int (a, b)\n 2. \\<exists>a b. int n = sum2sq_int (a, b) \\<Longrightarrow>\n    \\<exists>a b. n = sum2sq_nat a b", "thus \"\\<exists>a b. int n = sum2sq_int (a, b)\""], ["proof (prove)\nusing this:\n  \\<exists>a b. n = sum2sq_nat a b\n\ngoal (1 subgoal):\n 1. \\<exists>a b. int n = sum2sq_int (a, b)", "using sum2sq_int_nat_eq"], ["proof (prove)\nusing this:\n  \\<exists>a b. n = sum2sq_nat a b\n  int (sum2sq_nat ?a ?b) = sum2sq_int (int ?a, int ?b)\n\ngoal (1 subgoal):\n 1. \\<exists>a b. int n = sum2sq_int (a, b)", "by force"], ["proof (state)\nthis:\n  \\<exists>a b. int n = sum2sq_int (a, b)\n\ngoal (1 subgoal):\n 1. \\<exists>a b. int n = sum2sq_int (a, b) \\<Longrightarrow>\n    \\<exists>a b. n = sum2sq_nat a b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a b. int n = sum2sq_int (a, b) \\<Longrightarrow>\n    \\<exists>a b. n = sum2sq_nat a b", "assume \"\\<exists>a b. int n = sum2sq_int (a, b)\""], ["proof (state)\nthis:\n  \\<exists>a b. int n = sum2sq_int (a, b)\n\ngoal (1 subgoal):\n 1. \\<exists>a b. int n = sum2sq_int (a, b) \\<Longrightarrow>\n    \\<exists>a b. n = sum2sq_nat a b", "then"], ["proof (chain)\npicking this:\n  \\<exists>a b. int n = sum2sq_int (a, b)", "obtain a b where \"int n = sum2sq_int (a, b)\""], ["proof (prove)\nusing this:\n  \\<exists>a b. int n = sum2sq_int (a, b)\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        int n = sum2sq_int (a, b) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  int n = sum2sq_int (a, b)\n\ngoal (1 subgoal):\n 1. \\<exists>a b. int n = sum2sq_int (a, b) \\<Longrightarrow>\n    \\<exists>a b. n = sum2sq_nat a b", "hence \"int n = sum2sq_int (int (nat \\<bar>a\\<bar>), int (nat \\<bar>b\\<bar>))\""], ["proof (prove)\nusing this:\n  int n = sum2sq_int (a, b)\n\ngoal (1 subgoal):\n 1. int n = sum2sq_int (int (nat \\<bar>a\\<bar>), int (nat \\<bar>b\\<bar>))", "unfolding sum2sq_int_def"], ["proof (prove)\nusing this:\n  int n = (case (a, b) of (a, b) \\<Rightarrow> a\\<^sup>2 + b\\<^sup>2)\n\ngoal (1 subgoal):\n 1. int n =\n    (case (int (nat \\<bar>a\\<bar>), int (nat \\<bar>b\\<bar>)) of\n     (a, b) \\<Rightarrow> a\\<^sup>2 + b\\<^sup>2)", "by simp"], ["proof (state)\nthis:\n  int n = sum2sq_int (int (nat \\<bar>a\\<bar>), int (nat \\<bar>b\\<bar>))\n\ngoal (1 subgoal):\n 1. \\<exists>a b. int n = sum2sq_int (a, b) \\<Longrightarrow>\n    \\<exists>a b. n = sum2sq_nat a b", "hence \"int n = int (sum2sq_nat (nat \\<bar>a\\<bar>) (nat \\<bar>b\\<bar>))\""], ["proof (prove)\nusing this:\n  int n = sum2sq_int (int (nat \\<bar>a\\<bar>), int (nat \\<bar>b\\<bar>))\n\ngoal (1 subgoal):\n 1. int n = int (sum2sq_nat (nat \\<bar>a\\<bar>) (nat \\<bar>b\\<bar>))", "using sum2sq_int_nat_eq"], ["proof (prove)\nusing this:\n  int n = sum2sq_int (int (nat \\<bar>a\\<bar>), int (nat \\<bar>b\\<bar>))\n  int (sum2sq_nat ?a ?b) = sum2sq_int (int ?a, int ?b)\n\ngoal (1 subgoal):\n 1. int n = int (sum2sq_nat (nat \\<bar>a\\<bar>) (nat \\<bar>b\\<bar>))", "by presburger"], ["proof (state)\nthis:\n  int n = int (sum2sq_nat (nat \\<bar>a\\<bar>) (nat \\<bar>b\\<bar>))\n\ngoal (1 subgoal):\n 1. \\<exists>a b. int n = sum2sq_int (a, b) \\<Longrightarrow>\n    \\<exists>a b. n = sum2sq_nat a b", "thus \"\\<exists>a b. n = sum2sq_nat a b\""], ["proof (prove)\nusing this:\n  int n = int (sum2sq_nat (nat \\<bar>a\\<bar>) (nat \\<bar>b\\<bar>))\n\ngoal (1 subgoal):\n 1. \\<exists>a b. n = sum2sq_nat a b", "by auto"], ["proof (state)\nthis:\n  \\<exists>a b. n = sum2sq_nat a b\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma product_two_squares_aux: \"sum2sq_int(a, b) * sum2sq_int(c, d) = sum2sq_int(a*c - b*d, a*d + b*c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum2sq_int (a, b) * sum2sq_int (c, d) =\n    sum2sq_int (a * c - b * d, a * d + b * c)", "unfolding power2_eq_square sum2sq_int_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case (a, b) of (a, b) \\<Rightarrow> a * a + b * b) *\n    (case (c, d) of (a, b) \\<Rightarrow> a * a + b * b) =\n    (case (a * c - b * d, a * d + b * c) of\n     (a, b) \\<Rightarrow> a * a + b * b)", "by (simp add: algebra_simps)"], ["", "private"], ["", "lemma product_two_squares_int: \"is_sum2sq_int m \\<Longrightarrow> is_sum2sq_int n \\<Longrightarrow> is_sum2sq_int (m*n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_sum2sq_int m; is_sum2sq_int n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_int (m * n)", "by (unfold is_sum2sq_int_def, auto simp only: product_two_squares_aux, blast)"], ["", "private"], ["", "lemma product_two_squares_nat: \"is_sum2sq_nat m \\<Longrightarrow> is_sum2sq_nat n \\<Longrightarrow> is_sum2sq_nat (m*n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_sum2sq_nat m; is_sum2sq_nat n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat (m * n)", "using product_two_squares_int is_sum2sq_int_nat_eq"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_sum2sq_int ?m; is_sum2sq_int ?n\\<rbrakk>\n  \\<Longrightarrow> is_sum2sq_int (?m * ?n)\n  is_sum2sq_nat ?n = is_sum2sq_int (int ?n)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_sum2sq_nat m; is_sum2sq_nat n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat (m * n)", "by simp"], ["", "private"], ["", "lemma sots1_aux:\n  assumes \"prime (4*k+3)\"\n  assumes \"odd (multiplicity (4*k+3) n)\"\n  shows \"\\<not> is_sum2sq_nat n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_sum2sq_nat n", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "assume \"is_sum2sq_nat n\""], ["proof (state)\nthis:\n  is_sum2sq_nat n\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  is_sum2sq_nat n", "obtain a b where h1: \"n = a^2 + b^2\""], ["proof (prove)\nusing this:\n  is_sum2sq_nat n\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        n = a\\<^sup>2 + b\\<^sup>2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding is_sum2sq_nat_def sum2sq_nat_def"], ["proof (prove)\nusing this:\n  \\<exists>a b. n = a\\<^sup>2 + b\\<^sup>2\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        n = a\\<^sup>2 + b\\<^sup>2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  n = a\\<^sup>2 + b\\<^sup>2\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "have ab_nz: \"a \\<noteq> 0 \\<or> b \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<or> b \\<noteq> 0", "by (rule ccontr) (insert assms, auto simp: h1)"], ["proof (state)\nthis:\n  a \\<noteq> 0 \\<or> b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "let ?p = \"4*k+3\""], ["proof (state)\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "let ?g = \"gcd a b\""], ["proof (state)\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "have h2: \"?g \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd a b \\<noteq> 0", "using assms(2) h1 odd_pos"], ["proof (prove)\nusing this:\n  odd (multiplicity (4 * k + 3) n)\n  n = a\\<^sup>2 + b\\<^sup>2\n  odd ?n \\<Longrightarrow> 0 < ?n\n\ngoal (1 subgoal):\n 1. gcd a b \\<noteq> 0", "by fastforce"], ["proof (state)\nthis:\n  gcd a b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  gcd a b \\<noteq> 0", "obtain a' b' where h3: \"a = a' * ?g\" \"b = b' * ?g\" \"coprime a' b'\""], ["proof (prove)\nusing this:\n  gcd a b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>a' b'.\n        \\<lbrakk>a = a' * gcd a b; b = b' * gcd a b; coprime a' b'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using gcd_coprime_exists"], ["proof (prove)\nusing this:\n  gcd a b \\<noteq> 0\n  gcd ?a ?b \\<noteq> (0::?'a) \\<Longrightarrow>\n  \\<exists>a' b'.\n     ?a = a' * gcd ?a ?b \\<and> ?b = b' * gcd ?a ?b \\<and> coprime a' b'\n\ngoal (1 subgoal):\n 1. (\\<And>a' b'.\n        \\<lbrakk>a = a' * gcd a b; b = b' * gcd a b; coprime a' b'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a = a' * gcd a b\n  b = b' * gcd a b\n  coprime a' b'\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "have \"?g^2 dvd n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (gcd a b)\\<^sup>2 dvd n", "using dvd_add h1"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a dvd ?b; ?a dvd ?c\\<rbrakk> \\<Longrightarrow> ?a dvd ?b + ?c\n  n = a\\<^sup>2 + b\\<^sup>2\n\ngoal (1 subgoal):\n 1. (gcd a b)\\<^sup>2 dvd n", "by auto"], ["proof (state)\nthis:\n  (gcd a b)\\<^sup>2 dvd n\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  (gcd a b)\\<^sup>2 dvd n", "obtain m where h4: \"m * ?g^2 = n\""], ["proof (prove)\nusing this:\n  (gcd a b)\\<^sup>2 dvd n\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        m * (gcd a b)\\<^sup>2 = n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using dvd_div_mult_self"], ["proof (prove)\nusing this:\n  (gcd a b)\\<^sup>2 dvd n\n  ?a dvd ?b \\<Longrightarrow> ?b div ?a * ?a = ?b\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        m * (gcd a b)\\<^sup>2 = n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  m * (gcd a b)\\<^sup>2 = n\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  m * (gcd a b)\\<^sup>2 = n\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "have \"\\<dots> = (a' * ?g)^2 + (b' * ?g)^2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = (a' * gcd a b)\\<^sup>2 + (b' * gcd a b)\\<^sup>2", "unfolding h1"], ["proof (prove)\ngoal (1 subgoal):\n 1. a\\<^sup>2 + b\\<^sup>2 = (a' * gcd a b)\\<^sup>2 + (b' * gcd a b)\\<^sup>2", "using h3"], ["proof (prove)\nusing this:\n  a = a' * gcd a b\n  b = b' * gcd a b\n  coprime a' b'\n\ngoal (1 subgoal):\n 1. a\\<^sup>2 + b\\<^sup>2 = (a' * gcd a b)\\<^sup>2 + (b' * gcd a b)\\<^sup>2", "by presburger"], ["proof (state)\nthis:\n  n = (a' * gcd a b)\\<^sup>2 + (b' * gcd a b)\\<^sup>2\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  n = (a' * gcd a b)\\<^sup>2 + (b' * gcd a b)\\<^sup>2\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "have \"\\<dots> = ?g^2 * a'^2 + ?g^2 * b'^2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a' * gcd a b)\\<^sup>2 + (b' * gcd a b)\\<^sup>2 =\n    (gcd a b)\\<^sup>2 * a'\\<^sup>2 + (gcd a b)\\<^sup>2 * b'\\<^sup>2", "unfolding power2_eq_square"], ["proof (prove)\ngoal (1 subgoal):\n 1. a' * gcd a b * (a' * gcd a b) + b' * gcd a b * (b' * gcd a b) =\n    gcd a b * gcd a b * (a' * a') + gcd a b * gcd a b * (b' * b')", "by simp"], ["proof (state)\nthis:\n  (a' * gcd a b)\\<^sup>2 + (b' * gcd a b)\\<^sup>2 =\n  (gcd a b)\\<^sup>2 * a'\\<^sup>2 + (gcd a b)\\<^sup>2 * b'\\<^sup>2\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  m * (gcd a b)\\<^sup>2 =\n  (gcd a b)\\<^sup>2 * a'\\<^sup>2 + (gcd a b)\\<^sup>2 * b'\\<^sup>2", "have \"?g^2 * m = ?g^2 * (a'^2 + b'^2)\""], ["proof (prove)\nusing this:\n  m * (gcd a b)\\<^sup>2 =\n  (gcd a b)\\<^sup>2 * a'\\<^sup>2 + (gcd a b)\\<^sup>2 * b'\\<^sup>2\n\ngoal (1 subgoal):\n 1. (gcd a b)\\<^sup>2 * m = (gcd a b)\\<^sup>2 * (a'\\<^sup>2 + b'\\<^sup>2)", "by (simp add: distrib_left mult.commute)"], ["proof (state)\nthis:\n  (gcd a b)\\<^sup>2 * m = (gcd a b)\\<^sup>2 * (a'\\<^sup>2 + b'\\<^sup>2)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "hence h5: \"m = a'^2 + b'^2\""], ["proof (prove)\nusing this:\n  (gcd a b)\\<^sup>2 * m = (gcd a b)\\<^sup>2 * (a'\\<^sup>2 + b'\\<^sup>2)\n\ngoal (1 subgoal):\n 1. m = a'\\<^sup>2 + b'\\<^sup>2", "using h2"], ["proof (prove)\nusing this:\n  (gcd a b)\\<^sup>2 * m = (gcd a b)\\<^sup>2 * (a'\\<^sup>2 + b'\\<^sup>2)\n  gcd a b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. m = a'\\<^sup>2 + b'\\<^sup>2", "by auto"], ["proof (state)\nthis:\n  m = a'\\<^sup>2 + b'\\<^sup>2\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "let ?mul = \"multiplicity ?p ?g\""], ["proof (state)\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "have \"multiplicity ?p (?g^2) = ?mul + ?mul\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity (4 * k + 3) ((gcd a b)\\<^sup>2) =\n    multiplicity (4 * k + 3) (gcd a b) + multiplicity (4 * k + 3) (gcd a b)", "unfolding power2_eq_square"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity (4 * k + 3) (gcd a b * gcd a b) =\n    multiplicity (4 * k + 3) (gcd a b) + multiplicity (4 * k + 3) (gcd a b)", "using h2 assms"], ["proof (prove)\nusing this:\n  gcd a b \\<noteq> 0\n  prime (4 * k + 3)\n  odd (multiplicity (4 * k + 3) n)\n\ngoal (1 subgoal):\n 1. multiplicity (4 * k + 3) (gcd a b * gcd a b) =\n    multiplicity (4 * k + 3) (gcd a b) + multiplicity (4 * k + 3) (gcd a b)", "by (subst prime_elem_multiplicity_mult_distrib) simp_all"], ["proof (state)\nthis:\n  multiplicity (4 * k + 3) ((gcd a b)\\<^sup>2) =\n  multiplicity (4 * k + 3) (gcd a b) + multiplicity (4 * k + 3) (gcd a b)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "hence \"even (multiplicity ?p (?g^2))\""], ["proof (prove)\nusing this:\n  multiplicity (4 * k + 3) ((gcd a b)\\<^sup>2) =\n  multiplicity (4 * k + 3) (gcd a b) + multiplicity (4 * k + 3) (gcd a b)\n\ngoal (1 subgoal):\n 1. even (multiplicity (4 * k + 3) ((gcd a b)\\<^sup>2))", "by simp"], ["proof (state)\nthis:\n  even (multiplicity (4 * k + 3) ((gcd a b)\\<^sup>2))\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  even (multiplicity (4 * k + 3) ((gcd a b)\\<^sup>2))\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "have \"m \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<noteq> 0", "using assms(2) h4 odd_pos"], ["proof (prove)\nusing this:\n  odd (multiplicity (4 * k + 3) n)\n  m * (gcd a b)\\<^sup>2 = n\n  odd ?n \\<Longrightarrow> 0 < ?n\n\ngoal (1 subgoal):\n 1. m \\<noteq> 0", "by fastforce"], ["proof (state)\nthis:\n  m \\<noteq> 0\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  even (multiplicity (4 * k + 3) ((gcd a b)\\<^sup>2))\n  m \\<noteq> 0", "have \"odd (multiplicity ?p m)\""], ["proof (prove)\nusing this:\n  even (multiplicity (4 * k + 3) ((gcd a b)\\<^sup>2))\n  m \\<noteq> 0\n\ngoal (1 subgoal):\n 1. odd (multiplicity (4 * k + 3) m)", "using assms ab_nz"], ["proof (prove)\nusing this:\n  even (multiplicity (4 * k + 3) ((gcd a b)\\<^sup>2))\n  m \\<noteq> 0\n  prime (4 * k + 3)\n  odd (multiplicity (4 * k + 3) n)\n  a \\<noteq> 0 \\<or> b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. odd (multiplicity (4 * k + 3) m)", "by (simp_all add: h4 [symmetric] prime_elem_multiplicity_mult_distrib)"], ["proof (state)\nthis:\n  odd (multiplicity (4 * k + 3) m)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "hence \"?p dvd m\""], ["proof (prove)\nusing this:\n  odd (multiplicity (4 * k + 3) m)\n\ngoal (1 subgoal):\n 1. 4 * k + 3 dvd m", "using not_dvd_imp_multiplicity_0"], ["proof (prove)\nusing this:\n  odd (multiplicity (4 * k + 3) m)\n  \\<not> ?p dvd ?x \\<Longrightarrow> multiplicity ?p ?x = 0\n\ngoal (1 subgoal):\n 1. 4 * k + 3 dvd m", "by force"], ["proof (state)\nthis:\n  4 * k + 3 dvd m\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "hence h6: \"?p dvd a'^2+b'^2\""], ["proof (prove)\nusing this:\n  4 * k + 3 dvd m\n\ngoal (1 subgoal):\n 1. 4 * k + 3 dvd a'\\<^sup>2 + b'\\<^sup>2", "using h5"], ["proof (prove)\nusing this:\n  4 * k + 3 dvd m\n  m = a'\\<^sup>2 + b'\\<^sup>2\n\ngoal (1 subgoal):\n 1. 4 * k + 3 dvd a'\\<^sup>2 + b'\\<^sup>2", "by auto"], ["proof (state)\nthis:\n  4 * k + 3 dvd a'\\<^sup>2 + b'\\<^sup>2\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "{"], ["proof (state)\nthis:\n  4 * k + 3 dvd a'\\<^sup>2 + b'\\<^sup>2\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "assume \"?p dvd a'^2\""], ["proof (state)\nthis:\n  4 * k + 3 dvd a'\\<^sup>2\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  4 * k + 3 dvd a'\\<^sup>2\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "hence \"?p dvd b'^2\""], ["proof (prove)\nusing this:\n  4 * k + 3 dvd a'\\<^sup>2\n\ngoal (1 subgoal):\n 1. 4 * k + 3 dvd b'\\<^sup>2", "using h6 dvd_add_right_iff"], ["proof (prove)\nusing this:\n  4 * k + 3 dvd a'\\<^sup>2\n  4 * k + 3 dvd a'\\<^sup>2 + b'\\<^sup>2\n  ?a dvd ?b \\<Longrightarrow> (?a dvd ?b + ?c) = (?a dvd ?c)\n\ngoal (1 subgoal):\n 1. 4 * k + 3 dvd b'\\<^sup>2", "by blast"], ["proof (state)\nthis:\n  4 * k + 3 dvd b'\\<^sup>2\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  4 * k + 3 dvd a'\\<^sup>2\n  4 * k + 3 dvd b'\\<^sup>2", "have \"?p dvd a'\" \"?p dvd b'\""], ["proof (prove)\nusing this:\n  4 * k + 3 dvd a'\\<^sup>2\n  4 * k + 3 dvd b'\\<^sup>2\n\ngoal (1 subgoal):\n 1. 4 * k + 3 dvd a' &&& 4 * k + 3 dvd b'", "using assms(1) prime_dvd_power_nat"], ["proof (prove)\nusing this:\n  4 * k + 3 dvd a'\\<^sup>2\n  4 * k + 3 dvd b'\\<^sup>2\n  prime (4 * k + 3)\n  \\<lbrakk>prime ?p; ?p dvd ?x ^ ?n\\<rbrakk> \\<Longrightarrow> ?p dvd ?x\n\ngoal (1 subgoal):\n 1. 4 * k + 3 dvd a' &&& 4 * k + 3 dvd b'", "by blast+"], ["proof (state)\nthis:\n  4 * k + 3 dvd a'\n  4 * k + 3 dvd b'\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "hence \"False\""], ["proof (prove)\nusing this:\n  4 * k + 3 dvd a'\n  4 * k + 3 dvd b'\n\ngoal (1 subgoal):\n 1. False", "using assms(1) h3(3) coprime_common_divisor_nat[of a' b' ?p] not_prime_1"], ["proof (prove)\nusing this:\n  4 * k + 3 dvd a'\n  4 * k + 3 dvd b'\n  prime (4 * k + 3)\n  coprime a' b'\n  \\<lbrakk>coprime a' b'; 4 * k + 3 dvd a'; 4 * k + 3 dvd b'\\<rbrakk>\n  \\<Longrightarrow> 4 * k + 3 = 1\n  \\<not> prime (1::?'a)\n\ngoal (1 subgoal):\n 1. False", "by linarith"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "}"], ["proof (state)\nthis:\n  4 * k + 3 dvd a'\\<^sup>2 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "hence \"\\<not> (?p dvd a'^2)\""], ["proof (prove)\nusing this:\n  4 * k + 3 dvd a'\\<^sup>2 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> 4 * k + 3 dvd a'\\<^sup>2", ".."], ["proof (state)\nthis:\n  \\<not> 4 * k + 3 dvd a'\\<^sup>2\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "hence h7: \"\\<not> (?p dvd a')\""], ["proof (prove)\nusing this:\n  \\<not> 4 * k + 3 dvd a'\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<not> 4 * k + 3 dvd a'", "using assms(1)"], ["proof (prove)\nusing this:\n  \\<not> 4 * k + 3 dvd a'\\<^sup>2\n  prime (4 * k + 3)\n\ngoal (1 subgoal):\n 1. \\<not> 4 * k + 3 dvd a'", "by (simp add: power2_eq_square prime_dvd_mult_iff)"], ["proof (state)\nthis:\n  \\<not> 4 * k + 3 dvd a'\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "hence \"coprime ?p a'\""], ["proof (prove)\nusing this:\n  \\<not> 4 * k + 3 dvd a'\n\ngoal (1 subgoal):\n 1. coprime (4 * k + 3) a'", "using assms(1)"], ["proof (prove)\nusing this:\n  \\<not> 4 * k + 3 dvd a'\n  prime (4 * k + 3)\n\ngoal (1 subgoal):\n 1. coprime (4 * k + 3) a'", "by (simp add: prime_imp_coprime)"], ["proof (state)\nthis:\n  coprime (4 * k + 3) a'\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "thm prime_imp_coprime_nat"], ["proof (state)\nthis:\n  coprime (4 * k + 3) a'\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  coprime (4 * k + 3) a'\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "have \"a' \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a' \\<noteq> 0", "using h7 dvd_0_right[of ?p]"], ["proof (prove)\nusing this:\n  \\<not> 4 * k + 3 dvd a'\n  4 * k + 3 dvd 0\n\ngoal (1 subgoal):\n 1. a' \\<noteq> 0", "by meson"], ["proof (state)\nthis:\n  a' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  coprime (4 * k + 3) a'\n  a' \\<noteq> 0", "obtain ainv aux where \"a' * ainv = ?p * aux + 1\""], ["proof (prove)\nusing this:\n  coprime (4 * k + 3) a'\n  a' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>ainv aux.\n        a' * ainv = (4 * k + 3) * aux + 1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using bezout_nat[of \"a'\" ?p]"], ["proof (prove)\nusing this:\n  coprime (4 * k + 3) a'\n  a' \\<noteq> 0\n  a' \\<noteq> 0 \\<Longrightarrow>\n  \\<exists>x y. a' * x = (4 * k + 3) * y + gcd a' (4 * k + 3)\n\ngoal (1 subgoal):\n 1. (\\<And>ainv aux.\n        a' * ainv = (4 * k + 3) * aux + 1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: ac_simps)"], ["proof (state)\nthis:\n  a' * ainv = (4 * k + 3) * aux + 1\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "hence \"[a' * ainv = 1] (mod ?p)\""], ["proof (prove)\nusing this:\n  a' * ainv = (4 * k + 3) * aux + 1\n\ngoal (1 subgoal):\n 1. [a' * ainv = 1] (mod 4 * k + 3)", "using cong_to_1'_nat"], ["proof (prove)\nusing this:\n  a' * ainv = (4 * k + 3) * aux + 1\n  [?a = 1] (mod ?n) =\n  (?a = 0 \\<and> ?n = 1 \\<or> (\\<exists>m. ?a = 1 + m * ?n))\n\ngoal (1 subgoal):\n 1. [a' * ainv = 1] (mod 4 * k + 3)", "by auto"], ["proof (state)\nthis:\n  [a' * ainv = 1] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "from cong_mult [OF this this]"], ["proof (chain)\npicking this:\n  [a' * ainv * (a' * ainv) = 1 * 1] (mod 4 * k + 3)", "have h11: \"[1 = ainv^2 * a'^2] (mod ?p)\""], ["proof (prove)\nusing this:\n  [a' * ainv * (a' * ainv) = 1 * 1] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. [1 = ainv\\<^sup>2 * a'\\<^sup>2] (mod 4 * k + 3)", "unfolding power2_eq_square"], ["proof (prove)\nusing this:\n  [a' * ainv * (a' * ainv) = 1 * 1] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. [1 = ainv * ainv * (a' * a')] (mod 4 * k + 3)", "by (simp add: algebra_simps cong_sym)"], ["proof (state)\nthis:\n  [1 = ainv\\<^sup>2 * a'\\<^sup>2] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "let ?bdiva = \"ainv * b'\""], ["proof (state)\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "have \"[ainv^2 * (a'^2 + b'^2) = 0] (mod ?p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [ainv\\<^sup>2 * (a'\\<^sup>2 + b'\\<^sup>2) = 0] (mod 4 * k + 3)", "using h6 cong_dvd_modulus_nat cong_mult_self_right"], ["proof (prove)\nusing this:\n  4 * k + 3 dvd a'\\<^sup>2 + b'\\<^sup>2\n  \\<lbrakk>[?x = ?y] (mod ?m); ?n dvd ?m\\<rbrakk>\n  \\<Longrightarrow> [?x = ?y] (mod ?n)\n  [?b * ?a = 0::?'a] (mod ?a)\n\ngoal (1 subgoal):\n 1. [ainv\\<^sup>2 * (a'\\<^sup>2 + b'\\<^sup>2) = 0] (mod 4 * k + 3)", "by blast"], ["proof (state)\nthis:\n  [ainv\\<^sup>2 * (a'\\<^sup>2 + b'\\<^sup>2) = 0] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "from cong_add [OF h11 this]"], ["proof (chain)\npicking this:\n  [1 +\n   ainv\\<^sup>2 *\n   (a'\\<^sup>2 +\n    b'\\<^sup>2) = ainv\\<^sup>2 * a'\\<^sup>2 + 0] (mod 4 * k + 3)", "have \"[1 + ainv^2 * b'^2 = 0] (mod ?p)\""], ["proof (prove)\nusing this:\n  [1 +\n   ainv\\<^sup>2 *\n   (a'\\<^sup>2 +\n    b'\\<^sup>2) = ainv\\<^sup>2 * a'\\<^sup>2 + 0] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. [1 + ainv\\<^sup>2 * b'\\<^sup>2 = 0] (mod 4 * k + 3)", "unfolding add_mult_distrib2"], ["proof (prove)\nusing this:\n  [1 +\n   (ainv\\<^sup>2 * a'\\<^sup>2 +\n    ainv\\<^sup>2 *\n    b'\\<^sup>2) = ainv\\<^sup>2 * a'\\<^sup>2 + 0] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. [1 + ainv\\<^sup>2 * b'\\<^sup>2 = 0] (mod 4 * k + 3)", "using cong_add_lcancel_nat[of \"ainv^2 * a'^2\"]"], ["proof (prove)\nusing this:\n  [1 +\n   (ainv\\<^sup>2 * a'\\<^sup>2 +\n    ainv\\<^sup>2 *\n    b'\\<^sup>2) = ainv\\<^sup>2 * a'\\<^sup>2 + 0] (mod 4 * k + 3)\n  [ainv\\<^sup>2 * a'\\<^sup>2 +\n   ?x = ainv\\<^sup>2 * a'\\<^sup>2 + ?y] (mod ?n) =\n  [?x = ?y] (mod ?n)\n\ngoal (1 subgoal):\n 1. [1 + ainv\\<^sup>2 * b'\\<^sup>2 = 0] (mod 4 * k + 3)", "by fastforce"], ["proof (state)\nthis:\n  [1 + ainv\\<^sup>2 * b'\\<^sup>2 = 0] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "hence h8: \"[?bdiva^2 + 1 = 0] (mod ?p)\""], ["proof (prove)\nusing this:\n  [1 + ainv\\<^sup>2 * b'\\<^sup>2 = 0] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. [(ainv * b')\\<^sup>2 + 1 = 0] (mod 4 * k + 3)", "by (simp add: power_mult_distrib)"], ["proof (state)\nthis:\n  [(ainv * b')\\<^sup>2 + 1 = 0] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "{"], ["proof (state)\nthis:\n  [(ainv * b')\\<^sup>2 + 1 = 0] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "assume \"?p dvd ?bdiva\""], ["proof (state)\nthis:\n  4 * k + 3 dvd ainv * b'\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "hence \"?p dvd (?bdiva^2)\""], ["proof (prove)\nusing this:\n  4 * k + 3 dvd ainv * b'\n\ngoal (1 subgoal):\n 1. 4 * k + 3 dvd (ainv * b')\\<^sup>2", "by (simp add: assms(1) prime_dvd_power_nat_iff)"], ["proof (state)\nthis:\n  4 * k + 3 dvd (ainv * b')\\<^sup>2\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "hence \"[?bdiva^2 = 0] (mod ?p)\""], ["proof (prove)\nusing this:\n  4 * k + 3 dvd (ainv * b')\\<^sup>2\n\ngoal (1 subgoal):\n 1. [(ainv * b')\\<^sup>2 = 0] (mod 4 * k + 3)", "using cong_altdef_nat"], ["proof (prove)\nusing this:\n  4 * k + 3 dvd (ainv * b')\\<^sup>2\n  ?b \\<le> ?a \\<Longrightarrow> [?a = ?b] (mod ?m) = (?m dvd ?a - ?b)\n\ngoal (1 subgoal):\n 1. [(ainv * b')\\<^sup>2 = 0] (mod 4 * k + 3)", "by auto"], ["proof (state)\nthis:\n  [(ainv * b')\\<^sup>2 = 0] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "hence \"[?bdiva^2 +1 = 1] (mod ?p)\""], ["proof (prove)\nusing this:\n  [(ainv * b')\\<^sup>2 = 0] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. [(ainv * b')\\<^sup>2 + 1 = 1] (mod 4 * k + 3)", "using cong_add_rcancel_0_nat"], ["proof (prove)\nusing this:\n  [(ainv * b')\\<^sup>2 = 0] (mod 4 * k + 3)\n  [?x + ?a = ?a] (mod ?n) = [?x = 0] (mod ?n)\n\ngoal (1 subgoal):\n 1. [(ainv * b')\\<^sup>2 + 1 = 1] (mod 4 * k + 3)", "by blast"], ["proof (state)\nthis:\n  [(ainv * b')\\<^sup>2 + 1 = 1] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "from this h8"], ["proof (chain)\npicking this:\n  [(ainv * b')\\<^sup>2 + 1 = 1] (mod 4 * k + 3)\n  [(ainv * b')\\<^sup>2 + 1 = 0] (mod 4 * k + 3)", "have \"[0 = 1] (mod ?p)\""], ["proof (prove)\nusing this:\n  [(ainv * b')\\<^sup>2 + 1 = 1] (mod 4 * k + 3)\n  [(ainv * b')\\<^sup>2 + 1 = 0] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. [0 = 1] (mod 4 * k + 3)", "using cong_sym cong_trans"], ["proof (prove)\nusing this:\n  [(ainv * b')\\<^sup>2 + 1 = 1] (mod 4 * k + 3)\n  [(ainv * b')\\<^sup>2 + 1 = 0] (mod 4 * k + 3)\n  [?b = ?c] (mod ?a) \\<Longrightarrow> [?c = ?b] (mod ?a)\n  \\<lbrakk>[?b = ?c] (mod ?a); [?c = ?d] (mod ?a)\\<rbrakk>\n  \\<Longrightarrow> [?b = ?d] (mod ?a)\n\ngoal (1 subgoal):\n 1. [0 = 1] (mod 4 * k + 3)", "by blast"], ["proof (state)\nthis:\n  [0 = 1] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "hence \"?p dvd 1\""], ["proof (prove)\nusing this:\n  [0 = 1] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_unit (4 * k + 3)", "using cong_0_1_nat"], ["proof (prove)\nusing this:\n  [0 = 1] (mod 4 * k + 3)\n  [0 = 1] (mod ?n) = (?n = 1)\n\ngoal (1 subgoal):\n 1. is_unit (4 * k + 3)", "by auto"], ["proof (state)\nthis:\n  is_unit (4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "hence \"False\""], ["proof (prove)\nusing this:\n  is_unit (4 * k + 3)\n\ngoal (1 subgoal):\n 1. False", "using assms(1)"], ["proof (prove)\nusing this:\n  is_unit (4 * k + 3)\n  prime (4 * k + 3)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "}"], ["proof (state)\nthis:\n  4 * k + 3 dvd ainv * b' \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "hence \"\\<not> (?p dvd ?bdiva)\""], ["proof (prove)\nusing this:\n  4 * k + 3 dvd ainv * b' \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> 4 * k + 3 dvd ainv * b'", ".."], ["proof (state)\nthis:\n  \\<not> 4 * k + 3 dvd ainv * b'\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "hence h9: \"[?bdiva^(?p-1) = 1] (mod ?p)\""], ["proof (prove)\nusing this:\n  \\<not> 4 * k + 3 dvd ainv * b'\n\ngoal (1 subgoal):\n 1. [(ainv * b') ^ (4 * k + 3 - 1) = 1] (mod 4 * k + 3)", "using assms(1) fermat_theorem [of ?p ?bdiva]"], ["proof (prove)\nusing this:\n  \\<not> 4 * k + 3 dvd ainv * b'\n  prime (4 * k + 3)\n  \\<lbrakk>prime (4 * k + 3); \\<not> 4 * k + 3 dvd ainv * b'\\<rbrakk>\n  \\<Longrightarrow> [(ainv * b') ^ (4 * k + 3 - 1) = 1] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. [(ainv * b') ^ (4 * k + 3 - 1) = 1] (mod 4 * k + 3)", "by simp"], ["proof (state)\nthis:\n  [(ainv * b') ^ (4 * k + 3 - 1) = 1] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "have h10: \"?p\\<ge>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 3 \\<le> 4 * k + 3", "by simp"], ["proof (state)\nthis:\n  3 \\<le> 4 * k + 3\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "have h11: \"[?bdiva^(4*k+2) = 1] (mod ?p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [(ainv * b') ^ (4 * k + 2) = 1] (mod 4 * k + 3)", "using h9"], ["proof (prove)\nusing this:\n  [(ainv * b') ^ (4 * k + 3 - 1) = 1] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. [(ainv * b') ^ (4 * k + 2) = 1] (mod 4 * k + 3)", "by auto"], ["proof (state)\nthis:\n  [(ainv * b') ^ (4 * k + 2) = 1] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "have \"[(?bdiva^2 + 1)^2 = 0] (mod ?p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [((ainv * b')\\<^sup>2 + 1)\\<^sup>2 = 0] (mod 4 * k + 3)", "using h8 cong_pow [of \"?bdiva^2 + 1\" 0 ?p 2]"], ["proof (prove)\nusing this:\n  [(ainv * b')\\<^sup>2 + 1 = 0] (mod 4 * k + 3)\n  [(ainv * b')\\<^sup>2 + 1 = 0] (mod 4 * k + 3) \\<Longrightarrow>\n  [((ainv * b')\\<^sup>2 + 1)\\<^sup>2 = 0\\<^sup>2] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. [((ainv * b')\\<^sup>2 + 1)\\<^sup>2 = 0] (mod 4 * k + 3)", "by auto"], ["proof (state)\nthis:\n  [((ainv * b')\\<^sup>2 + 1)\\<^sup>2 = 0] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  [((ainv * b')\\<^sup>2 + 1)\\<^sup>2 = 0] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "have \"?bdiva ^ 4 = (?bdiva ^ 2) ^ 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ainv * b') ^ 4 = ((ainv * b')\\<^sup>2)\\<^sup>2", "by auto"], ["proof (state)\nthis:\n  (ainv * b') ^ 4 = ((ainv * b')\\<^sup>2)\\<^sup>2\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "hence \"(?bdiva^2 + 1)^2 = ?bdiva^4 + ?bdiva^2 + ?bdiva^2 + 1\""], ["proof (prove)\nusing this:\n  (ainv * b') ^ 4 = ((ainv * b')\\<^sup>2)\\<^sup>2\n\ngoal (1 subgoal):\n 1. ((ainv * b')\\<^sup>2 + 1)\\<^sup>2 =\n    (ainv * b') ^ 4 + (ainv * b')\\<^sup>2 + (ainv * b')\\<^sup>2 + 1", "by (auto simp: algebra_simps power2_eq_square)"], ["proof (state)\nthis:\n  ((ainv * b')\\<^sup>2 + 1)\\<^sup>2 =\n  (ainv * b') ^ 4 + (ainv * b')\\<^sup>2 + (ainv * b')\\<^sup>2 + 1\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  [((ainv * b')\\<^sup>2 + 1)\\<^sup>2 = 0] (mod 4 * k + 3)\n  ((ainv * b')\\<^sup>2 + 1)\\<^sup>2 =\n  (ainv * b') ^ 4 + (ainv * b')\\<^sup>2 + (ainv * b')\\<^sup>2 + 1", "have \"[?bdiva^4 + ?bdiva^2 + ?bdiva^2 + 1 = 0] (mod ?p)\""], ["proof (prove)\nusing this:\n  [((ainv * b')\\<^sup>2 + 1)\\<^sup>2 = 0] (mod 4 * k + 3)\n  ((ainv * b')\\<^sup>2 + 1)\\<^sup>2 =\n  (ainv * b') ^ 4 + (ainv * b')\\<^sup>2 + (ainv * b')\\<^sup>2 + 1\n\ngoal (1 subgoal):\n 1. [(ainv * b') ^ 4 + (ainv * b')\\<^sup>2 + (ainv * b')\\<^sup>2 +\n     1 = 0] (mod 4 * k + 3)", "by simp"], ["proof (state)\nthis:\n  [(ainv * b') ^ 4 + (ainv * b')\\<^sup>2 + (ainv * b')\\<^sup>2 +\n   1 = 0] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  [(ainv * b') ^ 4 + (ainv * b')\\<^sup>2 + (ainv * b')\\<^sup>2 +\n   1 = 0] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "have \"[?bdiva^4 + ?bdiva^2 + (?bdiva^2 + 1) = ?bdiva^4 + ?bdiva^2 + 0] (mod ?p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [(ainv * b') ^ 4 + (ainv * b')\\<^sup>2 +\n     ((ainv * b')\\<^sup>2 +\n      1) = (ainv * b') ^ 4 + (ainv * b')\\<^sup>2 + 0] (mod 4 * k + 3)", "using h8 cong_add_lcancel_nat"], ["proof (prove)\nusing this:\n  [(ainv * b')\\<^sup>2 + 1 = 0] (mod 4 * k + 3)\n  [?a + ?x = ?a + ?y] (mod ?n) = [?x = ?y] (mod ?n)\n\ngoal (1 subgoal):\n 1. [(ainv * b') ^ 4 + (ainv * b')\\<^sup>2 +\n     ((ainv * b')\\<^sup>2 +\n      1) = (ainv * b') ^ 4 + (ainv * b')\\<^sup>2 + 0] (mod 4 * k + 3)", "by blast"], ["proof (state)\nthis:\n  [(ainv * b') ^ 4 + (ainv * b')\\<^sup>2 +\n   ((ainv * b')\\<^sup>2 +\n    1) = (ainv * b') ^ 4 + (ainv * b')\\<^sup>2 + 0] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  [(ainv * b') ^ 4 + (ainv * b')\\<^sup>2 + (ainv * b')\\<^sup>2 +\n   1 = 0] (mod 4 * k + 3)\n  [(ainv * b') ^ 4 + (ainv * b')\\<^sup>2 +\n   ((ainv * b')\\<^sup>2 +\n    1) = (ainv * b') ^ 4 + (ainv * b')\\<^sup>2 + 0] (mod 4 * k + 3)", "have \"[?bdiva^4 + ?bdiva^2 = 0] (mod ?p)\""], ["proof (prove)\nusing this:\n  [(ainv * b') ^ 4 + (ainv * b')\\<^sup>2 + (ainv * b')\\<^sup>2 +\n   1 = 0] (mod 4 * k + 3)\n  [(ainv * b') ^ 4 + (ainv * b')\\<^sup>2 +\n   ((ainv * b')\\<^sup>2 +\n    1) = (ainv * b') ^ 4 + (ainv * b')\\<^sup>2 + 0] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. [(ainv * b') ^ 4 + (ainv * b')\\<^sup>2 = 0] (mod 4 * k + 3)", "by (simp add: cong_def)"], ["proof (state)\nthis:\n  [(ainv * b') ^ 4 + (ainv * b')\\<^sup>2 = 0] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "hence \"[?bdiva^4 + ?bdiva^2 + 1 = 0 + 1] (mod ?p)\""], ["proof (prove)\nusing this:\n  [(ainv * b') ^ 4 + (ainv * b')\\<^sup>2 = 0] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. [(ainv * b') ^ 4 + (ainv * b')\\<^sup>2 + 1 = 0 + 1] (mod 4 * k + 3)", "using cong_add_rcancel_nat"], ["proof (prove)\nusing this:\n  [(ainv * b') ^ 4 + (ainv * b')\\<^sup>2 = 0] (mod 4 * k + 3)\n  [?x + ?a = ?y + ?a] (mod ?n) = [?x = ?y] (mod ?n)\n\ngoal (1 subgoal):\n 1. [(ainv * b') ^ 4 + (ainv * b')\\<^sup>2 + 1 = 0 + 1] (mod 4 * k + 3)", "by blast"], ["proof (state)\nthis:\n  [(ainv * b') ^ 4 + (ainv * b')\\<^sup>2 + 1 = 0 + 1] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  [(ainv * b') ^ 4 + (ainv * b')\\<^sup>2 + 1 = 0 + 1] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "have \"[?bdiva^4 + (?bdiva^2 + 1) = ?bdiva^4 + 0] (mod ?p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [(ainv * b') ^ 4 +\n     ((ainv * b')\\<^sup>2 + 1) = (ainv * b') ^ 4 + 0] (mod 4 * k + 3)", "using h8 cong_add_lcancel_nat"], ["proof (prove)\nusing this:\n  [(ainv * b')\\<^sup>2 + 1 = 0] (mod 4 * k + 3)\n  [?a + ?x = ?a + ?y] (mod ?n) = [?x = ?y] (mod ?n)\n\ngoal (1 subgoal):\n 1. [(ainv * b') ^ 4 +\n     ((ainv * b')\\<^sup>2 + 1) = (ainv * b') ^ 4 + 0] (mod 4 * k + 3)", "by blast"], ["proof (state)\nthis:\n  [(ainv * b') ^ 4 +\n   ((ainv * b')\\<^sup>2 + 1) = (ainv * b') ^ 4 + 0] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  [(ainv * b') ^ 4 + (ainv * b')\\<^sup>2 + 1 = 0 + 1] (mod 4 * k + 3)\n  [(ainv * b') ^ 4 +\n   ((ainv * b')\\<^sup>2 + 1) = (ainv * b') ^ 4 + 0] (mod 4 * k + 3)", "have \"[?bdiva^4 = 1] (mod ?p)\""], ["proof (prove)\nusing this:\n  [(ainv * b') ^ 4 + (ainv * b')\\<^sup>2 + 1 = 0 + 1] (mod 4 * k + 3)\n  [(ainv * b') ^ 4 +\n   ((ainv * b')\\<^sup>2 + 1) = (ainv * b') ^ 4 + 0] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. [(ainv * b') ^ 4 = 1] (mod 4 * k + 3)", "by (simp add: cong_def)"], ["proof (state)\nthis:\n  [(ainv * b') ^ 4 = 1] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "hence \"[(?bdiva^4)^k = 1^k] (mod ?p)\""], ["proof (prove)\nusing this:\n  [(ainv * b') ^ 4 = 1] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. [((ainv * b') ^ 4) ^ k = 1 ^ k] (mod 4 * k + 3)", "using cong_pow"], ["proof (prove)\nusing this:\n  [(ainv * b') ^ 4 = 1] (mod 4 * k + 3)\n  [?b = ?c] (mod ?a) \\<Longrightarrow> [?b ^ ?n = ?c ^ ?n] (mod ?a)\n\ngoal (1 subgoal):\n 1. [((ainv * b') ^ 4) ^ k = 1 ^ k] (mod 4 * k + 3)", "by blast"], ["proof (state)\nthis:\n  [((ainv * b') ^ 4) ^ k = 1 ^ k] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "hence h12: \"[?bdiva^(4*k) = 1] (mod ?p)\""], ["proof (prove)\nusing this:\n  [((ainv * b') ^ 4) ^ k = 1 ^ k] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. [(ainv * b') ^ (4 * k) = 1] (mod 4 * k + 3)", "by (simp add: power_mult)"], ["proof (state)\nthis:\n  [(ainv * b') ^ (4 * k) = 1] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "hence h13: \"[?bdiva^(4*k)*(?bdiva^2 + 1) = 1*(?bdiva^2 + 1)] (mod ?p)\""], ["proof (prove)\nusing this:\n  [(ainv * b') ^ (4 * k) = 1] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. [(ainv * b') ^ (4 * k) *\n     ((ainv * b')\\<^sup>2 +\n      1) = 1 * ((ainv * b')\\<^sup>2 + 1)] (mod 4 * k + 3)", "using cong_scalar_right"], ["proof (prove)\nusing this:\n  [(ainv * b') ^ (4 * k) = 1] (mod 4 * k + 3)\n  [?b = ?c] (mod ?a) \\<Longrightarrow> [?b * ?d = ?c * ?d] (mod ?a)\n\ngoal (1 subgoal):\n 1. [(ainv * b') ^ (4 * k) *\n     ((ainv * b')\\<^sup>2 +\n      1) = 1 * ((ainv * b')\\<^sup>2 + 1)] (mod 4 * k + 3)", "by blast"], ["proof (state)\nthis:\n  [(ainv * b') ^ (4 * k) *\n   ((ainv * b')\\<^sup>2 +\n    1) = 1 * ((ainv * b')\\<^sup>2 + 1)] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "have \"?bdiva^(4*k)*(?bdiva^2 + 1) = ?bdiva^(4*k+2)+?bdiva^(4*k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ainv * b') ^ (4 * k) * ((ainv * b')\\<^sup>2 + 1) =\n    (ainv * b') ^ (4 * k + 2) + (ainv * b') ^ (4 * k)", "unfolding add_mult_distrib2 power_add"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ainv * b') ^ (4 * k) * (ainv * b')\\<^sup>2 +\n    (ainv * b') ^ (4 * k) * 1 =\n    (ainv * b') ^ (4 * k) * (ainv * b')\\<^sup>2 + (ainv * b') ^ (4 * k)", "by simp"], ["proof (state)\nthis:\n  (ainv * b') ^ (4 * k) * ((ainv * b')\\<^sup>2 + 1) =\n  (ainv * b') ^ (4 * k + 2) + (ainv * b') ^ (4 * k)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "hence \"[?bdiva^(4*k+2)+?bdiva^(4*k) = ?bdiva^2 + 1] (mod ?p)\""], ["proof (prove)\nusing this:\n  (ainv * b') ^ (4 * k) * ((ainv * b')\\<^sup>2 + 1) =\n  (ainv * b') ^ (4 * k + 2) + (ainv * b') ^ (4 * k)\n\ngoal (1 subgoal):\n 1. [(ainv * b') ^ (4 * k + 2) +\n     (ainv * b') ^ (4 * k) = (ainv * b')\\<^sup>2 + 1] (mod 4 * k + 3)", "using h13"], ["proof (prove)\nusing this:\n  (ainv * b') ^ (4 * k) * ((ainv * b')\\<^sup>2 + 1) =\n  (ainv * b') ^ (4 * k + 2) + (ainv * b') ^ (4 * k)\n  [(ainv * b') ^ (4 * k) *\n   ((ainv * b')\\<^sup>2 +\n    1) = 1 * ((ainv * b')\\<^sup>2 + 1)] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. [(ainv * b') ^ (4 * k + 2) +\n     (ainv * b') ^ (4 * k) = (ainv * b')\\<^sup>2 + 1] (mod 4 * k + 3)", "unfolding nat_mult_1"], ["proof (prove)\nusing this:\n  (ainv * b') ^ (4 * k) * ((ainv * b')\\<^sup>2 + 1) =\n  (ainv * b') ^ (4 * k + 2) + (ainv * b') ^ (4 * k)\n  [(ainv * b') ^ (4 * k) *\n   ((ainv * b')\\<^sup>2 + 1) = (ainv * b')\\<^sup>2 + 1] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. [(ainv * b') ^ (4 * k + 2) +\n     (ainv * b') ^ (4 * k) = (ainv * b')\\<^sup>2 + 1] (mod 4 * k + 3)", "by presburger"], ["proof (state)\nthis:\n  [(ainv * b') ^ (4 * k + 2) +\n   (ainv * b') ^ (4 * k) = (ainv * b')\\<^sup>2 + 1] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  [(ainv * b') ^ (4 * k + 2) +\n   (ainv * b') ^ (4 * k) = (ainv * b')\\<^sup>2 + 1] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "have \"[?bdiva^(4*k+2) + ?bdiva^(4*k) = 1 + 1] (mod ?p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [(ainv * b') ^ (4 * k + 2) +\n     (ainv * b') ^ (4 * k) = 1 + 1] (mod 4 * k + 3)", "using h11 h12 cong_add"], ["proof (prove)\nusing this:\n  [(ainv * b') ^ (4 * k + 2) = 1] (mod 4 * k + 3)\n  [(ainv * b') ^ (4 * k) = 1] (mod 4 * k + 3)\n  \\<lbrakk>[?b = ?c] (mod ?a); [?d = ?e] (mod ?a)\\<rbrakk>\n  \\<Longrightarrow> [?b + ?d = ?c + ?e] (mod ?a)\n\ngoal (1 subgoal):\n 1. [(ainv * b') ^ (4 * k + 2) +\n     (ainv * b') ^ (4 * k) = 1 + 1] (mod 4 * k + 3)", "by blast"], ["proof (state)\nthis:\n  [(ainv * b') ^ (4 * k + 2) +\n   (ainv * b') ^ (4 * k) = 1 + 1] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  [(ainv * b') ^ (4 * k + 2) +\n   (ainv * b') ^ (4 * k) = (ainv * b')\\<^sup>2 + 1] (mod 4 * k + 3)\n  [(ainv * b') ^ (4 * k + 2) +\n   (ainv * b') ^ (4 * k) = 1 + 1] (mod 4 * k + 3)", "have \"[?bdiva^2 + 1 = 2] (mod ?p)\""], ["proof (prove)\nusing this:\n  [(ainv * b') ^ (4 * k + 2) +\n   (ainv * b') ^ (4 * k) = (ainv * b')\\<^sup>2 + 1] (mod 4 * k + 3)\n  [(ainv * b') ^ (4 * k + 2) +\n   (ainv * b') ^ (4 * k) = 1 + 1] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. [(ainv * b')\\<^sup>2 + 1 = 2] (mod 4 * k + 3)", "by (auto simp add: cong_def)"], ["proof (state)\nthis:\n  [(ainv * b')\\<^sup>2 + 1 = 2] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "hence \"[0 = 2] (mod ?p)\""], ["proof (prove)\nusing this:\n  [(ainv * b')\\<^sup>2 + 1 = 2] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. [0 = 2] (mod 4 * k + 3)", "using h8"], ["proof (prove)\nusing this:\n  [(ainv * b')\\<^sup>2 + 1 = 2] (mod 4 * k + 3)\n  [(ainv * b')\\<^sup>2 + 1 = 0] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. [0 = 2] (mod 4 * k + 3)", "by (simp add: cong_def)"], ["proof (state)\nthis:\n  [0 = 2] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  [0 = 2] (mod 4 * k + 3)", "have \"?p dvd 2\""], ["proof (prove)\nusing this:\n  [0 = 2] (mod 4 * k + 3)\n\ngoal (1 subgoal):\n 1. 4 * k + 3 dvd 2", "by (auto dest: cong_dvd_iff)"], ["proof (state)\nthis:\n  4 * k + 3 dvd 2\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  4 * k + 3 dvd 2", "show False"], ["proof (prove)\nusing this:\n  4 * k + 3 dvd 2\n\ngoal (1 subgoal):\n 1. False", "by (auto dest: dvd_imp_le)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma sots1: assumes \"is_sum2sq_nat n\"\n  shows \"\\<And> k. prime (4*k+3) \\<longrightarrow> even (multiplicity (4*k+3) n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       prime (4 * k + 3) \\<longrightarrow> even (multiplicity (4 * k + 3) n)", "using sots1_aux assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>prime (4 * ?k + 3); odd (multiplicity (4 * ?k + 3) ?n)\\<rbrakk>\n  \\<Longrightarrow> \\<not> is_sum2sq_nat ?n\n  is_sum2sq_nat n\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       prime (4 * k + 3) \\<longrightarrow> even (multiplicity (4 * k + 3) n)", "by blast"], ["", "private"], ["", "lemma aux_lemma: assumes \"[(a::nat) = b] (mod c)\" \"b < c\"\n  shows \"\\<exists> k. a = c*k + b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k. a = c * k + b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k. a = c * k + b", "have \"a mod c = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a mod c = b", "using assms"], ["proof (prove)\nusing this:\n  [a = b] (mod c)\n  b < c\n\ngoal (1 subgoal):\n 1. a mod c = b", "by (simp add: cong_def mod_if)"], ["proof (state)\nthis:\n  a mod c = b\n\ngoal (1 subgoal):\n 1. \\<exists>k. a = c * k + b", "hence \"b \\<le> a\""], ["proof (prove)\nusing this:\n  a mod c = b\n\ngoal (1 subgoal):\n 1. b \\<le> a", "using assms"], ["proof (prove)\nusing this:\n  a mod c = b\n  [a = b] (mod c)\n  b < c\n\ngoal (1 subgoal):\n 1. b \\<le> a", "by auto"], ["proof (state)\nthis:\n  b \\<le> a\n\ngoal (1 subgoal):\n 1. \\<exists>k. a = c * k + b", "thus ?thesis"], ["proof (prove)\nusing this:\n  b \\<le> a\n\ngoal (1 subgoal):\n 1. \\<exists>k. a = c * k + b", "using cong_le_nat assms(1)"], ["proof (prove)\nusing this:\n  b \\<le> a\n  ?y \\<le> ?x \\<Longrightarrow>\n  [?x = ?y] (mod ?n) = (\\<exists>q. ?x = q * ?n + ?y)\n  [a = b] (mod c)\n\ngoal (1 subgoal):\n 1. \\<exists>k. a = c * k + b", "by auto"], ["proof (state)\nthis:\n  \\<exists>k. a = c * k + b\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma Legendre_1mod4: \"prime (4*k+1::nat) \\<Longrightarrow> (Legendre (-1) (4*k+1)) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> Legendre (- 1) (int (4 * k + 1)) = 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> Legendre (- 1) (int (4 * k + 1)) = 1", "let ?p = \"4*k+1\""], ["proof (state)\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> Legendre (- 1) (int (4 * k + 1)) = 1", "let ?L = \"Legendre (-1) ?p\""], ["proof (state)\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> Legendre (- 1) (int (4 * k + 1)) = 1", "assume p: \"prime ?p\""], ["proof (state)\nthis:\n  prime (4 * k + 1)\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> Legendre (- 1) (int (4 * k + 1)) = 1", "from p"], ["proof (chain)\npicking this:\n  prime (4 * k + 1)", "have \"k \\<noteq> 0\""], ["proof (prove)\nusing this:\n  prime (4 * k + 1)\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0", "by (intro notI) simp_all"], ["proof (state)\nthis:\n  k \\<noteq> 0\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> Legendre (- 1) (int (4 * k + 1)) = 1", "hence p2: \"?p > 2\""], ["proof (prove)\nusing this:\n  k \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 2 < 4 * k + 1", "by simp"], ["proof (state)\nthis:\n  2 < 4 * k + 1\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> Legendre (- 1) (int (4 * k + 1)) = 1", "with p"], ["proof (chain)\npicking this:\n  prime (4 * k + 1)\n  2 < 4 * k + 1", "have \"[?L = (-1)^((?p - 1) div 2)] (mod ?p)\""], ["proof (prove)\nusing this:\n  prime (4 * k + 1)\n  2 < 4 * k + 1\n\ngoal (1 subgoal):\n 1. [Legendre (- 1)\n      (int (4 * k +\n            1)) = (- 1) ^ ((4 * k + 1 - 1) div 2)] (mod int (4 * k + 1))", "by (rule euler_criterion)"], ["proof (state)\nthis:\n  [Legendre (- 1)\n    (int (4 * k +\n          1)) = (- 1) ^ ((4 * k + 1 - 1) div 2)] (mod int (4 * k + 1))\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> Legendre (- 1) (int (4 * k + 1)) = 1", "hence \"[?L = (-1)^(2 * nat k)] (mod ?p)\""], ["proof (prove)\nusing this:\n  [Legendre (- 1)\n    (int (4 * k +\n          1)) = (- 1) ^ ((4 * k + 1 - 1) div 2)] (mod int (4 * k + 1))\n\ngoal (1 subgoal):\n 1. [Legendre (- 1)\n      (int (4 * k + 1)) = (- 1) ^ (2 * nat (int k))] (mod int (4 * k + 1))", "by auto"], ["proof (state)\nthis:\n  [Legendre (- 1)\n    (int (4 * k + 1)) = (- 1) ^ (2 * nat (int k))] (mod int (4 * k + 1))\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> Legendre (- 1) (int (4 * k + 1)) = 1", "hence \"[?L = 1] (mod ?p)\""], ["proof (prove)\nusing this:\n  [Legendre (- 1)\n    (int (4 * k + 1)) = (- 1) ^ (2 * nat (int k))] (mod int (4 * k + 1))\n\ngoal (1 subgoal):\n 1. [Legendre (- 1) (int (4 * k + 1)) = 1] (mod int (4 * k + 1))", "unfolding power_mult"], ["proof (prove)\nusing this:\n  [Legendre (- 1)\n    (int (4 * k + 1)) = (- 1)\\<^sup>2 ^ nat (int k)] (mod int (4 * k + 1))\n\ngoal (1 subgoal):\n 1. [Legendre (- 1) (int (4 * k + 1)) = 1] (mod int (4 * k + 1))", "by simp"], ["proof (state)\nthis:\n  [Legendre (- 1) (int (4 * k + 1)) = 1] (mod int (4 * k + 1))\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> Legendre (- 1) (int (4 * k + 1)) = 1", "hence \"?p dvd 1-?L\""], ["proof (prove)\nusing this:\n  [Legendre (- 1) (int (4 * k + 1)) = 1] (mod int (4 * k + 1))\n\ngoal (1 subgoal):\n 1. int (4 * k + 1) dvd 1 - Legendre (- 1) (int (4 * k + 1))", "using cong_iff_dvd_diff dvd_minus_iff[of ?p \"?L-1\"]"], ["proof (prove)\nusing this:\n  [Legendre (- 1) (int (4 * k + 1)) = 1] (mod int (4 * k + 1))\n  [?a = ?b] (mod ?m) = (?m dvd ?a - ?b)\n  (int (4 * k + 1) dvd - (Legendre (- 1) (int (4 * k + 1)) - 1)) =\n  (int (4 * k + 1) dvd Legendre (- 1) (int (4 * k + 1)) - 1)\n\ngoal (1 subgoal):\n 1. int (4 * k + 1) dvd 1 - Legendre (- 1) (int (4 * k + 1))", "by auto"], ["proof (state)\nthis:\n  int (4 * k + 1) dvd 1 - Legendre (- 1) (int (4 * k + 1))\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> Legendre (- 1) (int (4 * k + 1)) = 1", "moreover"], ["proof (state)\nthis:\n  int (4 * k + 1) dvd 1 - Legendre (- 1) (int (4 * k + 1))\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> Legendre (- 1) (int (4 * k + 1)) = 1", "have \"?L=1 \\<or> ?L=0 \\<or> ?L=-1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Legendre (- 1) (int (4 * k + 1)) = 1 \\<or>\n    Legendre (- 1) (int (4 * k + 1)) = 0 \\<or>\n    Legendre (- 1) (int (4 * k + 1)) = - 1", "by (simp add: Legendre_def)"], ["proof (state)\nthis:\n  Legendre (- 1) (int (4 * k + 1)) = 1 \\<or>\n  Legendre (- 1) (int (4 * k + 1)) = 0 \\<or>\n  Legendre (- 1) (int (4 * k + 1)) = - 1\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> Legendre (- 1) (int (4 * k + 1)) = 1", "ultimately"], ["proof (chain)\npicking this:\n  int (4 * k + 1) dvd 1 - Legendre (- 1) (int (4 * k + 1))\n  Legendre (- 1) (int (4 * k + 1)) = 1 \\<or>\n  Legendre (- 1) (int (4 * k + 1)) = 0 \\<or>\n  Legendre (- 1) (int (4 * k + 1)) = - 1", "have \"?L = 1 \\<or> ?p dvd 1 \\<or> ?p dvd (2::int)\""], ["proof (prove)\nusing this:\n  int (4 * k + 1) dvd 1 - Legendre (- 1) (int (4 * k + 1))\n  Legendre (- 1) (int (4 * k + 1)) = 1 \\<or>\n  Legendre (- 1) (int (4 * k + 1)) = 0 \\<or>\n  Legendre (- 1) (int (4 * k + 1)) = - 1\n\ngoal (1 subgoal):\n 1. Legendre (- 1) (int (4 * k + 1)) = 1 \\<or>\n    is_unit (4 * k + 1) \\<or> int (4 * k + 1) dvd 2", "by auto"], ["proof (state)\nthis:\n  Legendre (- 1) (int (4 * k + 1)) = 1 \\<or>\n  is_unit (4 * k + 1) \\<or> int (4 * k + 1) dvd 2\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> Legendre (- 1) (int (4 * k + 1)) = 1", "moreover"], ["proof (state)\nthis:\n  Legendre (- 1) (int (4 * k + 1)) = 1 \\<or>\n  is_unit (4 * k + 1) \\<or> int (4 * k + 1) dvd 2\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> Legendre (- 1) (int (4 * k + 1)) = 1", "{"], ["proof (state)\nthis:\n  Legendre (- 1) (int (4 * k + 1)) = 1 \\<or>\n  is_unit (4 * k + 1) \\<or> int (4 * k + 1) dvd 2\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> Legendre (- 1) (int (4 * k + 1)) = 1", "assume \"?p dvd 1 \\<or> ?p dvd (2::int)\""], ["proof (state)\nthis:\n  is_unit (4 * k + 1) \\<or> int (4 * k + 1) dvd 2\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> Legendre (- 1) (int (4 * k + 1)) = 1", "with p2"], ["proof (chain)\npicking this:\n  2 < 4 * k + 1\n  is_unit (4 * k + 1) \\<or> int (4 * k + 1) dvd 2", "have False"], ["proof (prove)\nusing this:\n  2 < 4 * k + 1\n  is_unit (4 * k + 1) \\<or> int (4 * k + 1) dvd 2\n\ngoal (1 subgoal):\n 1. False", "by (auto simp add: zdvd_not_zless)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> Legendre (- 1) (int (4 * k + 1)) = 1", "}"], ["proof (state)\nthis:\n  is_unit (4 * k + 1) \\<or> int (4 * k + 1) dvd 2 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> Legendre (- 1) (int (4 * k + 1)) = 1", "ultimately"], ["proof (chain)\npicking this:\n  Legendre (- 1) (int (4 * k + 1)) = 1 \\<or>\n  is_unit (4 * k + 1) \\<or> int (4 * k + 1) dvd 2\n  is_unit (4 * k + 1) \\<or> int (4 * k + 1) dvd 2 \\<Longrightarrow> False", "show ?thesis"], ["proof (prove)\nusing this:\n  Legendre (- 1) (int (4 * k + 1)) = 1 \\<or>\n  is_unit (4 * k + 1) \\<or> int (4 * k + 1) dvd 2\n  is_unit (4 * k + 1) \\<or> int (4 * k + 1) dvd 2 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. Legendre (- 1) (int (4 * k + 1)) = 1", "by auto"], ["proof (state)\nthis:\n  Legendre (- 1) (int (4 * k + 1)) = 1\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma qf1_prime_exists: \"prime (4*k+1) \\<Longrightarrow> is_sum2sq_nat (4*k+1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "let ?p = \"4*k+1\""], ["proof (state)\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "assume p: \"prime ?p\""], ["proof (state)\nthis:\n  prime (4 * k + 1)\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "hence \"Legendre (-1) ?p = 1\""], ["proof (prove)\nusing this:\n  prime (4 * k + 1)\n\ngoal (1 subgoal):\n 1. Legendre (- 1) (int (4 * k + 1)) = 1", "by (rule Legendre_1mod4)"], ["proof (state)\nthis:\n  Legendre (- 1) (int (4 * k + 1)) = 1\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "moreover"], ["proof (state)\nthis:\n  Legendre (- 1) (int (4 * k + 1)) = 1\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "{"], ["proof (state)\nthis:\n  Legendre (- 1) (int (4 * k + 1)) = 1\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "assume \"\\<not> QuadRes ?p (-1)\""], ["proof (state)\nthis:\n  \\<not> QuadRes (int (4 * k + 1)) (- 1)\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "hence \"Legendre (-1) ?p \\<noteq> 1\""], ["proof (prove)\nusing this:\n  \\<not> QuadRes (int (4 * k + 1)) (- 1)\n\ngoal (1 subgoal):\n 1. Legendre (- 1) (int (4 * k + 1)) \\<noteq> 1", "by (unfold Legendre_def, auto)"], ["proof (state)\nthis:\n  Legendre (- 1) (int (4 * k + 1)) \\<noteq> 1\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "}"], ["proof (state)\nthis:\n  \\<not> QuadRes (int (4 * k + 1)) (- 1) \\<Longrightarrow>\n  Legendre (- 1) (int (4 * k + 1)) \\<noteq> 1\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "ultimately"], ["proof (chain)\npicking this:\n  Legendre (- 1) (int (4 * k + 1)) = 1\n  \\<not> QuadRes (int (4 * k + 1)) (- 1) \\<Longrightarrow>\n  Legendre (- 1) (int (4 * k + 1)) \\<noteq> 1", "have \"QuadRes ?p (-1)\""], ["proof (prove)\nusing this:\n  Legendre (- 1) (int (4 * k + 1)) = 1\n  \\<not> QuadRes (int (4 * k + 1)) (- 1) \\<Longrightarrow>\n  Legendre (- 1) (int (4 * k + 1)) \\<noteq> 1\n\ngoal (1 subgoal):\n 1. QuadRes (int (4 * k + 1)) (- 1)", "by auto"], ["proof (state)\nthis:\n  QuadRes (int (4 * k + 1)) (- 1)\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "then"], ["proof (chain)\npicking this:\n  QuadRes (int (4 * k + 1)) (- 1)", "obtain s1 where s1: \"[s1^2 = -1] (mod ?p)\""], ["proof (prove)\nusing this:\n  QuadRes (int (4 * k + 1)) (- 1)\n\ngoal (1 subgoal):\n 1. (\\<And>s1.\n        [s1\\<^sup>2 = - 1] (mod int (4 * k + 1)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: QuadRes_def)"], ["proof (state)\nthis:\n  [s1\\<^sup>2 = - 1] (mod int (4 * k + 1))\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "hence s1': \"[s1^2 + 1 = 0] (mod ?p)\""], ["proof (prove)\nusing this:\n  [s1\\<^sup>2 = - 1] (mod int (4 * k + 1))\n\ngoal (1 subgoal):\n 1. [s1\\<^sup>2 + 1 = 0] (mod int (4 * k + 1))", "by (simp add: cong_iff_dvd_diff)"], ["proof (state)\nthis:\n  [s1\\<^sup>2 + 1 = 0] (mod int (4 * k + 1))\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "define s2 where \"s2 = nat \\<bar>s1\\<bar>\""], ["proof (state)\nthis:\n  s2 = nat \\<bar>s1\\<bar>\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "hence \"int (s2^2 + 1) = s1^2 + 1\""], ["proof (prove)\nusing this:\n  s2 = nat \\<bar>s1\\<bar>\n\ngoal (1 subgoal):\n 1. int (s2\\<^sup>2 + 1) = s1\\<^sup>2 + 1", "by auto"], ["proof (state)\nthis:\n  int (s2\\<^sup>2 + 1) = s1\\<^sup>2 + 1\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "with s1'"], ["proof (chain)\npicking this:\n  [s1\\<^sup>2 + 1 = 0] (mod int (4 * k + 1))\n  int (s2\\<^sup>2 + 1) = s1\\<^sup>2 + 1", "have \"[int (s2^2 + 1) = 0] (mod ?p)\""], ["proof (prove)\nusing this:\n  [s1\\<^sup>2 + 1 = 0] (mod int (4 * k + 1))\n  int (s2\\<^sup>2 + 1) = s1\\<^sup>2 + 1\n\ngoal (1 subgoal):\n 1. [int (s2\\<^sup>2 + 1) = 0] (mod int (4 * k + 1))", "by presburger"], ["proof (state)\nthis:\n  [int (s2\\<^sup>2 + 1) = 0] (mod int (4 * k + 1))\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "hence s2: \"[s2^2 + 1 = 0] (mod ?p)\""], ["proof (prove)\nusing this:\n  [int (s2\\<^sup>2 + 1) = 0] (mod int (4 * k + 1))\n\ngoal (1 subgoal):\n 1. [s2\\<^sup>2 + 1 = 0] (mod 4 * k + 1)", "using cong_int_iff"], ["proof (prove)\nusing this:\n  [int (s2\\<^sup>2 + 1) = 0] (mod int (4 * k + 1))\n  [int ?m = int ?q] (mod int ?n) = [?m = ?q] (mod ?n)\n\ngoal (1 subgoal):\n 1. [s2\\<^sup>2 + 1 = 0] (mod 4 * k + 1)", "by fastforce"], ["proof (state)\nthis:\n  [s2\\<^sup>2 + 1 = 0] (mod 4 * k + 1)\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "from p"], ["proof (chain)\npicking this:\n  prime (4 * k + 1)", "have p0: \"?p > 0\""], ["proof (prove)\nusing this:\n  prime (4 * k + 1)\n\ngoal (1 subgoal):\n 1. 0 < 4 * k + 1", "by simp"], ["proof (state)\nthis:\n  0 < 4 * k + 1\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "then"], ["proof (chain)\npicking this:\n  0 < 4 * k + 1", "obtain s where s0p: \"0 \\<le> s \\<and> s < ?p \\<and> [s2 = s] (mod ?p)\""], ["proof (prove)\nusing this:\n  0 < 4 * k + 1\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        0 \\<le> s \\<and>\n        s < 4 * k + 1 \\<and> [s2 = s] (mod 4 * k + 1) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using cong_less_unique_nat[of ?p]"], ["proof (prove)\nusing this:\n  0 < 4 * k + 1\n  0 < 4 * k + 1 \\<Longrightarrow>\n  \\<exists>!b.\n     0 \\<le> b \\<and> b < 4 * k + 1 \\<and> [?a = b] (mod 4 * k + 1)\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        0 \\<le> s \\<and>\n        s < 4 * k + 1 \\<and> [s2 = s] (mod 4 * k + 1) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  0 \\<le> s \\<and> s < 4 * k + 1 \\<and> [s2 = s] (mod 4 * k + 1)\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "then"], ["proof (chain)\npicking this:\n  0 \\<le> s \\<and> s < 4 * k + 1 \\<and> [s2 = s] (mod 4 * k + 1)", "have \"[s^2 = s2^2] (mod ?p)\""], ["proof (prove)\nusing this:\n  0 \\<le> s \\<and> s < 4 * k + 1 \\<and> [s2 = s] (mod 4 * k + 1)\n\ngoal (1 subgoal):\n 1. [s\\<^sup>2 = s2\\<^sup>2] (mod 4 * k + 1)", "by (simp add: cong_sym cong_pow)"], ["proof (state)\nthis:\n  [s\\<^sup>2 = s2\\<^sup>2] (mod 4 * k + 1)\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "with s2"], ["proof (chain)\npicking this:\n  [s2\\<^sup>2 + 1 = 0] (mod 4 * k + 1)\n  [s\\<^sup>2 = s2\\<^sup>2] (mod 4 * k + 1)", "have s: \"[s^2 + 1 = 0] (mod ?p)\""], ["proof (prove)\nusing this:\n  [s2\\<^sup>2 + 1 = 0] (mod 4 * k + 1)\n  [s\\<^sup>2 = s2\\<^sup>2] (mod 4 * k + 1)\n\ngoal (1 subgoal):\n 1. [s\\<^sup>2 + 1 = 0] (mod 4 * k + 1)", "using cong_trans cong_add_rcancel_nat"], ["proof (prove)\nusing this:\n  [s2\\<^sup>2 + 1 = 0] (mod 4 * k + 1)\n  [s\\<^sup>2 = s2\\<^sup>2] (mod 4 * k + 1)\n  \\<lbrakk>[?b = ?c] (mod ?a); [?c = ?d] (mod ?a)\\<rbrakk>\n  \\<Longrightarrow> [?b = ?d] (mod ?a)\n  [?x + ?a = ?y + ?a] (mod ?n) = [?x = ?y] (mod ?n)\n\ngoal (1 subgoal):\n 1. [s\\<^sup>2 + 1 = 0] (mod 4 * k + 1)", "by blast"], ["proof (state)\nthis:\n  [s\\<^sup>2 + 1 = 0] (mod 4 * k + 1)\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "hence \"?p dvd s^2 + 1\""], ["proof (prove)\nusing this:\n  [s\\<^sup>2 + 1 = 0] (mod 4 * k + 1)\n\ngoal (1 subgoal):\n 1. 4 * k + 1 dvd s\\<^sup>2 + 1", "using cong_altdef_nat"], ["proof (prove)\nusing this:\n  [s\\<^sup>2 + 1 = 0] (mod 4 * k + 1)\n  ?b \\<le> ?a \\<Longrightarrow> [?a = ?b] (mod ?m) = (?m dvd ?a - ?b)\n\ngoal (1 subgoal):\n 1. 4 * k + 1 dvd s\\<^sup>2 + 1", "by auto"], ["proof (state)\nthis:\n  4 * k + 1 dvd s\\<^sup>2 + 1\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "then"], ["proof (chain)\npicking this:\n  4 * k + 1 dvd s\\<^sup>2 + 1", "obtain t where t: \"s^2 + 1 = ?p*t\""], ["proof (prove)\nusing this:\n  4 * k + 1 dvd s\\<^sup>2 + 1\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        s\\<^sup>2 + 1 = (4 * k + 1) * t \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: dvd_def)"], ["proof (state)\nthis:\n  s\\<^sup>2 + 1 = (4 * k + 1) * t\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "hence \"?p*t = sum2sq_nat s 1\""], ["proof (prove)\nusing this:\n  s\\<^sup>2 + 1 = (4 * k + 1) * t\n\ngoal (1 subgoal):\n 1. (4 * k + 1) * t = sum2sq_nat s 1", "by (simp add: sum2sq_nat_def)"], ["proof (state)\nthis:\n  (4 * k + 1) * t = sum2sq_nat s 1\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "hence qf1pt: \"is_sum2sq_nat (?p*t)\""], ["proof (prove)\nusing this:\n  (4 * k + 1) * t = sum2sq_nat s 1\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat ((4 * k + 1) * t)", "by (auto simp add: is_sum2sq_nat_def)"], ["proof (state)\nthis:\n  is_sum2sq_nat ((4 * k + 1) * t)\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "have t_l_p: \"t < ?p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t < 4 * k + 1", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> t < 4 * k + 1 \\<Longrightarrow> False", "assume \"\\<not> t < ?p\""], ["proof (state)\nthis:\n  \\<not> t < 4 * k + 1\n\ngoal (1 subgoal):\n 1. \\<not> t < 4 * k + 1 \\<Longrightarrow> False", "hence \"t > ?p - 1\""], ["proof (prove)\nusing this:\n  \\<not> t < 4 * k + 1\n\ngoal (1 subgoal):\n 1. 4 * k + 1 - 1 < t", "by simp"], ["proof (state)\nthis:\n  4 * k + 1 - 1 < t\n\ngoal (1 subgoal):\n 1. \\<not> t < 4 * k + 1 \\<Longrightarrow> False", "with p0"], ["proof (chain)\npicking this:\n  0 < 4 * k + 1\n  4 * k + 1 - 1 < t", "have \"?p*(?p - 1) < ?p*t\""], ["proof (prove)\nusing this:\n  0 < 4 * k + 1\n  4 * k + 1 - 1 < t\n\ngoal (1 subgoal):\n 1. (4 * k + 1) * (4 * k + 1 - 1) < (4 * k + 1) * t", "by (simp only: mult_less_mono2)"], ["proof (state)\nthis:\n  (4 * k + 1) * (4 * k + 1 - 1) < (4 * k + 1) * t\n\ngoal (1 subgoal):\n 1. \\<not> t < 4 * k + 1 \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  (4 * k + 1) * (4 * k + 1 - 1) < (4 * k + 1) * t\n\ngoal (1 subgoal):\n 1. \\<not> t < 4 * k + 1 \\<Longrightarrow> False", "with t"], ["proof (chain)\npicking this:\n  s\\<^sup>2 + 1 = (4 * k + 1) * t\n  (4 * k + 1) * (4 * k + 1 - 1) < (4 * k + 1) * t", "have \"\\<dots> = s^2 + 1\""], ["proof (prove)\nusing this:\n  s\\<^sup>2 + 1 = (4 * k + 1) * t\n  (4 * k + 1) * (4 * k + 1 - 1) < (4 * k + 1) * t\n\ngoal (1 subgoal):\n 1. (4 * k + 1) * t = s\\<^sup>2 + 1", "by simp"], ["proof (state)\nthis:\n  (4 * k + 1) * t = s\\<^sup>2 + 1\n\ngoal (1 subgoal):\n 1. \\<not> t < 4 * k + 1 \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  (4 * k + 1) * t = s\\<^sup>2 + 1\n\ngoal (1 subgoal):\n 1. \\<not> t < 4 * k + 1 \\<Longrightarrow> False", "have \"\\<dots> \\<le> ?p*(?p - 1) - ?p + 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sup>2 + 1 \\<le> (4 * k + 1) * (4 * k + 1 - 1) - (4 * k + 1) + 2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. s\\<^sup>2 + 1 \\<le> (4 * k + 1) * (4 * k + 1 - 1) - (4 * k + 1) + 2", "from s0p"], ["proof (chain)\npicking this:\n  0 \\<le> s \\<and> s < 4 * k + 1 \\<and> [s2 = s] (mod 4 * k + 1)", "have \"s \\<le> ?p - 1\""], ["proof (prove)\nusing this:\n  0 \\<le> s \\<and> s < 4 * k + 1 \\<and> [s2 = s] (mod 4 * k + 1)\n\ngoal (1 subgoal):\n 1. s \\<le> 4 * k + 1 - 1", "by (auto simp add: less_le)"], ["proof (state)\nthis:\n  s \\<le> 4 * k + 1 - 1\n\ngoal (1 subgoal):\n 1. s\\<^sup>2 + 1 \\<le> (4 * k + 1) * (4 * k + 1 - 1) - (4 * k + 1) + 2", "with s0p"], ["proof (chain)\npicking this:\n  0 \\<le> s \\<and> s < 4 * k + 1 \\<and> [s2 = s] (mod 4 * k + 1)\n  s \\<le> 4 * k + 1 - 1", "have \"s^2 \\<le> (?p - 1)^2\""], ["proof (prove)\nusing this:\n  0 \\<le> s \\<and> s < 4 * k + 1 \\<and> [s2 = s] (mod 4 * k + 1)\n  s \\<le> 4 * k + 1 - 1\n\ngoal (1 subgoal):\n 1. s\\<^sup>2 \\<le> (4 * k + 1 - 1)\\<^sup>2", "by (simp only: power_mono)"], ["proof (state)\nthis:\n  s\\<^sup>2 \\<le> (4 * k + 1 - 1)\\<^sup>2\n\ngoal (1 subgoal):\n 1. s\\<^sup>2 + 1 \\<le> (4 * k + 1) * (4 * k + 1 - 1) - (4 * k + 1) + 2", "also"], ["proof (state)\nthis:\n  s\\<^sup>2 \\<le> (4 * k + 1 - 1)\\<^sup>2\n\ngoal (1 subgoal):\n 1. s\\<^sup>2 + 1 \\<le> (4 * k + 1) * (4 * k + 1 - 1) - (4 * k + 1) + 2", "have \"\\<dots> = ?p*(?p - 1) - 1*(?p - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (4 * k + 1 - 1)\\<^sup>2 =\n    (4 * k + 1) * (4 * k + 1 - 1) - 1 * (4 * k + 1 - 1)", "by (simp only: power2_eq_square diff_mult_distrib)"], ["proof (state)\nthis:\n  (4 * k + 1 - 1)\\<^sup>2 =\n  (4 * k + 1) * (4 * k + 1 - 1) - 1 * (4 * k + 1 - 1)\n\ngoal (1 subgoal):\n 1. s\\<^sup>2 + 1 \\<le> (4 * k + 1) * (4 * k + 1 - 1) - (4 * k + 1) + 2", "finally"], ["proof (chain)\npicking this:\n  s\\<^sup>2 \\<le> (4 * k + 1) * (4 * k + 1 - 1) - 1 * (4 * k + 1 - 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  s\\<^sup>2 \\<le> (4 * k + 1) * (4 * k + 1 - 1) - 1 * (4 * k + 1 - 1)\n\ngoal (1 subgoal):\n 1. s\\<^sup>2 + 1 \\<le> (4 * k + 1) * (4 * k + 1 - 1) - (4 * k + 1) + 2", "by auto"], ["proof (state)\nthis:\n  s\\<^sup>2 + 1 \\<le> (4 * k + 1) * (4 * k + 1 - 1) - (4 * k + 1) + 2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s\\<^sup>2 + 1 \\<le> (4 * k + 1) * (4 * k + 1 - 1) - (4 * k + 1) + 2\n\ngoal (1 subgoal):\n 1. \\<not> t < 4 * k + 1 \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  (4 * k + 1) * (4 * k + 1 - 1)\n  < (4 * k + 1) * (4 * k + 1 - 1) - (4 * k + 1) + 2", "have \"?p < 2\""], ["proof (prove)\nusing this:\n  (4 * k + 1) * (4 * k + 1 - 1)\n  < (4 * k + 1) * (4 * k + 1 - 1) - (4 * k + 1) + 2\n\ngoal (1 subgoal):\n 1. 4 * k + 1 < 2", "by simp"], ["proof (state)\nthis:\n  4 * k + 1 < 2\n\ngoal (1 subgoal):\n 1. \\<not> t < 4 * k + 1 \\<Longrightarrow> False", "with p"], ["proof (chain)\npicking this:\n  prime (4 * k + 1)\n  4 * k + 1 < 2", "show False"], ["proof (prove)\nusing this:\n  prime (4 * k + 1)\n  4 * k + 1 < 2\n\ngoal (1 subgoal):\n 1. False", "by (unfold prime_def, auto)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t < 4 * k + 1\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "have tpos: \"t \\<ge> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<le> t", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> t \\<Longrightarrow> False", "assume \"\\<not> t \\<ge> 1\""], ["proof (state)\nthis:\n  \\<not> 1 \\<le> t\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> t \\<Longrightarrow> False", "hence \"t < 1\""], ["proof (prove)\nusing this:\n  \\<not> 1 \\<le> t\n\ngoal (1 subgoal):\n 1. t < 1", "by auto"], ["proof (state)\nthis:\n  t < 1\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> t \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  t < 1\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> t \\<Longrightarrow> False", "{"], ["proof (state)\nthis:\n  t < 1\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> t \\<Longrightarrow> False", "assume \"t = 0\""], ["proof (state)\nthis:\n  t = 0\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> t \\<Longrightarrow> False", "with t"], ["proof (chain)\npicking this:\n  s\\<^sup>2 + 1 = (4 * k + 1) * t\n  t = 0", "have \"s^2 + 1 = 0\""], ["proof (prove)\nusing this:\n  s\\<^sup>2 + 1 = (4 * k + 1) * t\n  t = 0\n\ngoal (1 subgoal):\n 1. s\\<^sup>2 + 1 = 0", "by simp"], ["proof (state)\nthis:\n  s\\<^sup>2 + 1 = 0\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> t \\<Longrightarrow> False", "}"], ["proof (state)\nthis:\n  t = 0 \\<Longrightarrow> s\\<^sup>2 + 1 = 0\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> t \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  t = 0 \\<Longrightarrow> s\\<^sup>2 + 1 = 0\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> t \\<Longrightarrow> False", "{"], ["proof (state)\nthis:\n  t = 0 \\<Longrightarrow> s\\<^sup>2 + 1 = 0\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> t \\<Longrightarrow> False", "assume \"t < 0\""], ["proof (state)\nthis:\n  t < 0\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> t \\<Longrightarrow> False", "with p0"], ["proof (chain)\npicking this:\n  0 < 4 * k + 1\n  t < 0", "have \"?p*t < ?p*0\""], ["proof (prove)\nusing this:\n  0 < 4 * k + 1\n  t < 0\n\ngoal (1 subgoal):\n 1. (4 * k + 1) * t < (4 * k + 1) * 0", "by (simp only: zmult_zless_mono2)"], ["proof (state)\nthis:\n  (4 * k + 1) * t < (4 * k + 1) * 0\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> t \\<Longrightarrow> False", "with t"], ["proof (chain)\npicking this:\n  s\\<^sup>2 + 1 = (4 * k + 1) * t\n  (4 * k + 1) * t < (4 * k + 1) * 0", "have \"s^2 + 1 < 0\""], ["proof (prove)\nusing this:\n  s\\<^sup>2 + 1 = (4 * k + 1) * t\n  (4 * k + 1) * t < (4 * k + 1) * 0\n\ngoal (1 subgoal):\n 1. s\\<^sup>2 + 1 < 0", "by auto"], ["proof (state)\nthis:\n  s\\<^sup>2 + 1 < 0\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> t \\<Longrightarrow> False", "}"], ["proof (state)\nthis:\n  t < 0 \\<Longrightarrow> s\\<^sup>2 + 1 < 0\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> t \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  t < 0 \\<Longrightarrow> s\\<^sup>2 + 1 < 0\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> t \\<Longrightarrow> False", "have \"s^2 \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> s\\<^sup>2", "by (simp only: zero_le_power2)"], ["proof (state)\nthis:\n  0 \\<le> s\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<not> 1 \\<le> t \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  t < 1\n  t = 0 \\<Longrightarrow> s\\<^sup>2 + 1 = 0\n  t < 0 \\<Longrightarrow> s\\<^sup>2 + 1 < 0\n  0 \\<le> s\\<^sup>2", "show False"], ["proof (prove)\nusing this:\n  t < 1\n  t = 0 \\<Longrightarrow> s\\<^sup>2 + 1 = 0\n  t < 0 \\<Longrightarrow> s\\<^sup>2 + 1 < 0\n  0 \\<le> s\\<^sup>2\n\ngoal (1 subgoal):\n 1. False", "by (auto simp add: less_le)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  1 \\<le> t\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "moreover"], ["proof (state)\nthis:\n  1 \\<le> t\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "{"], ["proof (state)\nthis:\n  1 \\<le> t\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "assume t1: \"t > 0\""], ["proof (state)\nthis:\n  0 < t\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "then"], ["proof (chain)\npicking this:\n  0 < t", "obtain tn where tn: \"tn = t - 1\""], ["proof (prove)\nusing this:\n  0 < t\n\ngoal (1 subgoal):\n 1. (\\<And>tn. tn = t - 1 \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  tn = t - 1\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "have \"is_sum2sq_nat (?p*(1+ 0))\" (is \"?Q 0\")\n      \\<comment> \\<open>So, $Q~n =$ there exist $x,y$ such that $x^2+y^2 =(p*(1+ int(n)))$\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sum2sq_nat ((4 * k + 1) * (1 + 0))", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + 0)) \\<Longrightarrow> False", "assume nQ1: \"\\<not> ?Q 0\""], ["proof (state)\nthis:\n  \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + 0))\n\ngoal (1 subgoal):\n 1. \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + 0)) \\<Longrightarrow> False", "have \"(1 + tn) < ?p \\<Longrightarrow> \\<not> ?Q tn\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 + tn < 4 * k + 1 \\<Longrightarrow>\n    \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + tn))", "proof (induct tn rule: infinite_descent0)"], ["proof (state)\ngoal (2 subgoals):\n 1. 1 + 0 < 4 * k + 1 \\<Longrightarrow>\n    \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + 0))\n 2. \\<And>n.\n       \\<lbrakk>0 < n;\n        \\<not> (1 + n < 4 * k + 1 \\<longrightarrow>\n                \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + n)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<n.\n                            \\<not> (1 + m < 4 * k + 1 \\<longrightarrow>\n                                    \\<not> is_sum2sq_nat\n      ((4 * k + 1) * (1 + m)))", "case 0"], ["proof (state)\nthis:\n  1 + 0 < 4 * k + 1\n\ngoal (2 subgoals):\n 1. 1 + 0 < 4 * k + 1 \\<Longrightarrow>\n    \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + 0))\n 2. \\<And>n.\n       \\<lbrakk>0 < n;\n        \\<not> (1 + n < 4 * k + 1 \\<longrightarrow>\n                \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + n)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<n.\n                            \\<not> (1 + m < 4 * k + 1 \\<longrightarrow>\n                                    \\<not> is_sum2sq_nat\n      ((4 * k + 1) * (1 + m)))", "from nQ1"], ["proof (chain)\npicking this:\n  \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + 0))", "show \"1+ 0 < ?p \\<Longrightarrow> \\<not> ?Q 0\""], ["proof (prove)\nusing this:\n  \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + 0))\n\ngoal (1 subgoal):\n 1. 1 + 0 < 4 * k + 1 \\<Longrightarrow>\n    \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + 0))", "by simp"], ["proof (state)\nthis:\n  1 + 0 < 4 * k + 1 \\<Longrightarrow>\n  \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + 0))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < n;\n        \\<not> (1 + n < 4 * k + 1 \\<longrightarrow>\n                \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + n)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<n.\n                            \\<not> (1 + m < 4 * k + 1 \\<longrightarrow>\n                                    \\<not> is_sum2sq_nat\n      ((4 * k + 1) * (1 + m)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < n;\n        \\<not> (1 + n < 4 * k + 1 \\<longrightarrow>\n                \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + n)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<n.\n                            \\<not> (1 + m < 4 * k + 1 \\<longrightarrow>\n                                    \\<not> is_sum2sq_nat\n      ((4 * k + 1) * (1 + m)))", "case (smaller n)"], ["proof (state)\nthis:\n  0 < n\n  \\<not> (1 + n < 4 * k + 1 \\<longrightarrow>\n          \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + n)))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < n;\n        \\<not> (1 + n < 4 * k + 1 \\<longrightarrow>\n                \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + n)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<n.\n                            \\<not> (1 + m < 4 * k + 1 \\<longrightarrow>\n                                    \\<not> is_sum2sq_nat\n      ((4 * k + 1) * (1 + m)))", "hence n0: \"n > 0\" and IH: \"1+ n < ?p \\<and> ?Q n\""], ["proof (prove)\nusing this:\n  0 < n\n  \\<not> (1 + n < 4 * k + 1 \\<longrightarrow>\n          \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + n)))\n\ngoal (1 subgoal):\n 1. 0 < n &&& 1 + n < 4 * k + 1 \\<and> is_sum2sq_nat ((4 * k + 1) * (1 + n))", "by auto"], ["proof (state)\nthis:\n  0 < n\n  1 + n < 4 * k + 1 \\<and> is_sum2sq_nat ((4 * k + 1) * (1 + n))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < n;\n        \\<not> (1 + n < 4 * k + 1 \\<longrightarrow>\n                \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + n)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<n.\n                            \\<not> (1 + m < 4 * k + 1 \\<longrightarrow>\n                                    \\<not> is_sum2sq_nat\n      ((4 * k + 1) * (1 + m)))", "then"], ["proof (chain)\npicking this:\n  0 < n\n  1 + n < 4 * k + 1 \\<and> is_sum2sq_nat ((4 * k + 1) * (1 + n))", "obtain x y where \"x^2 + y^2 = int (?p*(1+ n))\""], ["proof (prove)\nusing this:\n  0 < n\n  1 + n < 4 * k + 1 \\<and> is_sum2sq_nat ((4 * k + 1) * (1 + n))\n\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        x\\<^sup>2 + y\\<^sup>2 =\n        int ((4 * k + 1) * (1 + n)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using is_sum2sq_int_nat_eq"], ["proof (prove)\nusing this:\n  0 < n\n  1 + n < 4 * k + 1 \\<and> is_sum2sq_nat ((4 * k + 1) * (1 + n))\n  is_sum2sq_nat ?n = is_sum2sq_int (int ?n)\n\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        x\\<^sup>2 + y\\<^sup>2 =\n        int ((4 * k + 1) * (1 + n)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (unfold is_sum2sq_int_def sum2sq_int_def, auto)"], ["proof (state)\nthis:\n  x\\<^sup>2 + y\\<^sup>2 = int ((4 * k + 1) * (1 + n))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < n;\n        \\<not> (1 + n < 4 * k + 1 \\<longrightarrow>\n                \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + n)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<n.\n                            \\<not> (1 + m < 4 * k + 1 \\<longrightarrow>\n                                    \\<not> is_sum2sq_nat\n      ((4 * k + 1) * (1 + m)))", "hence xy: \"x^2 + y^2 = (int ?p)*(int (1+ n))\""], ["proof (prove)\nusing this:\n  x\\<^sup>2 + y\\<^sup>2 = int ((4 * k + 1) * (1 + n))\n\ngoal (1 subgoal):\n 1. x\\<^sup>2 + y\\<^sup>2 = int (4 * k + 1) * int (1 + n)", "unfolding of_nat_mult"], ["proof (prove)\nusing this:\n  x\\<^sup>2 + y\\<^sup>2 = int (4 * k + 1) * int (1 + n)\n\ngoal (1 subgoal):\n 1. x\\<^sup>2 + y\\<^sup>2 = int (4 * k + 1) * int (1 + n)", "by presburger"], ["proof (state)\nthis:\n  x\\<^sup>2 + y\\<^sup>2 = int (4 * k + 1) * int (1 + n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < n;\n        \\<not> (1 + n < 4 * k + 1 \\<longrightarrow>\n                \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + n)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<n.\n                            \\<not> (1 + m < 4 * k + 1 \\<longrightarrow>\n                                    \\<not> is_sum2sq_nat\n      ((4 * k + 1) * (1 + m)))", "let ?n1 = \"int (1 + n)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < n;\n        \\<not> (1 + n < 4 * k + 1 \\<longrightarrow>\n                \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + n)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<n.\n                            \\<not> (1 + m < 4 * k + 1 \\<longrightarrow>\n                                    \\<not> is_sum2sq_nat\n      ((4 * k + 1) * (1 + m)))", "from n0"], ["proof (chain)\npicking this:\n  0 < n", "have n1pos: \"?n1 > 0\""], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. 0 < int (1 + n)", "by simp"], ["proof (state)\nthis:\n  0 < int (1 + n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < n;\n        \\<not> (1 + n < 4 * k + 1 \\<longrightarrow>\n                \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + n)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<n.\n                            \\<not> (1 + m < 4 * k + 1 \\<longrightarrow>\n                                    \\<not> is_sum2sq_nat\n      ((4 * k + 1) * (1 + m)))", "then"], ["proof (chain)\npicking this:\n  0 < int (1 + n)", "obtain r v where rv: \"v = x-r*?n1 \\<and> 2*\\<bar>v\\<bar> \\<le> ?n1\""], ["proof (prove)\nusing this:\n  0 < int (1 + n)\n\ngoal (1 subgoal):\n 1. (\\<And>v r.\n        v = x - r * int (1 + n) \\<and>\n        2 * \\<bar>v\\<bar> \\<le> int (1 + n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (frule_tac n=\"?n1\" in best_division_abs, auto)"], ["proof (state)\nthis:\n  v = x - r * int (1 + n) \\<and> 2 * \\<bar>v\\<bar> \\<le> int (1 + n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < n;\n        \\<not> (1 + n < 4 * k + 1 \\<longrightarrow>\n                \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + n)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<n.\n                            \\<not> (1 + m < 4 * k + 1 \\<longrightarrow>\n                                    \\<not> is_sum2sq_nat\n      ((4 * k + 1) * (1 + m)))", "from n1pos"], ["proof (chain)\npicking this:\n  0 < int (1 + n)", "obtain s w where sw: \"w = y-s*?n1 \\<and> 2*\\<bar>w\\<bar> \\<le> ?n1\""], ["proof (prove)\nusing this:\n  0 < int (1 + n)\n\ngoal (1 subgoal):\n 1. (\\<And>w s.\n        w = y - s * int (1 + n) \\<and>\n        2 * \\<bar>w\\<bar> \\<le> int (1 + n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (frule_tac n=\"?n1\" in best_division_abs, auto)"], ["proof (state)\nthis:\n  w = y - s * int (1 + n) \\<and> 2 * \\<bar>w\\<bar> \\<le> int (1 + n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < n;\n        \\<not> (1 + n < 4 * k + 1 \\<longrightarrow>\n                \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + n)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<n.\n                            \\<not> (1 + m < 4 * k + 1 \\<longrightarrow>\n                                    \\<not> is_sum2sq_nat\n      ((4 * k + 1) * (1 + m)))", "let ?C = \"v^2 + w^2\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < n;\n        \\<not> (1 + n < 4 * k + 1 \\<longrightarrow>\n                \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + n)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<n.\n                            \\<not> (1 + m < 4 * k + 1 \\<longrightarrow>\n                                    \\<not> is_sum2sq_nat\n      ((4 * k + 1) * (1 + m)))", "have \"?n1 dvd ?C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int (1 + n) dvd v\\<^sup>2 + w\\<^sup>2", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. v\\<^sup>2 + w\\<^sup>2 = int (1 + n) * ?k", "from rv sw"], ["proof (chain)\npicking this:\n  v = x - r * int (1 + n) \\<and> 2 * \\<bar>v\\<bar> \\<le> int (1 + n)\n  w = y - s * int (1 + n) \\<and> 2 * \\<bar>w\\<bar> \\<le> int (1 + n)", "have \"?C = (x-r*?n1)^2 + (y-s*?n1)^2\""], ["proof (prove)\nusing this:\n  v = x - r * int (1 + n) \\<and> 2 * \\<bar>v\\<bar> \\<le> int (1 + n)\n  w = y - s * int (1 + n) \\<and> 2 * \\<bar>w\\<bar> \\<le> int (1 + n)\n\ngoal (1 subgoal):\n 1. v\\<^sup>2 + w\\<^sup>2 =\n    (x - r * int (1 + n))\\<^sup>2 + (y - s * int (1 + n))\\<^sup>2", "by simp"], ["proof (state)\nthis:\n  v\\<^sup>2 + w\\<^sup>2 =\n  (x - r * int (1 + n))\\<^sup>2 + (y - s * int (1 + n))\\<^sup>2\n\ngoal (1 subgoal):\n 1. v\\<^sup>2 + w\\<^sup>2 = int (1 + n) * ?k", "also"], ["proof (state)\nthis:\n  v\\<^sup>2 + w\\<^sup>2 =\n  (x - r * int (1 + n))\\<^sup>2 + (y - s * int (1 + n))\\<^sup>2\n\ngoal (1 subgoal):\n 1. v\\<^sup>2 + w\\<^sup>2 = int (1 + n) * ?k", "have \"\\<dots> = x^2 + y^2 - 2*x*(r*?n1) - 2*y*(s*?n1) + (r*?n1)^2 + (s*?n1)^2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x - r * int (1 + n))\\<^sup>2 + (y - s * int (1 + n))\\<^sup>2 =\n    x\\<^sup>2 + y\\<^sup>2 - 2 * x * (r * int (1 + n)) -\n    2 * y * (s * int (1 + n)) +\n    (r * int (1 + n))\\<^sup>2 +\n    (s * int (1 + n))\\<^sup>2", "unfolding power2_eq_square"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x - r * int (1 + n)) * (x - r * int (1 + n)) +\n    (y - s * int (1 + n)) * (y - s * int (1 + n)) =\n    x * x + y * y - 2 * x * (r * int (1 + n)) - 2 * y * (s * int (1 + n)) +\n    r * int (1 + n) * (r * int (1 + n)) +\n    s * int (1 + n) * (s * int (1 + n))", "by (simp add: algebra_simps)"], ["proof (state)\nthis:\n  (x - r * int (1 + n))\\<^sup>2 + (y - s * int (1 + n))\\<^sup>2 =\n  x\\<^sup>2 + y\\<^sup>2 - 2 * x * (r * int (1 + n)) -\n  2 * y * (s * int (1 + n)) +\n  (r * int (1 + n))\\<^sup>2 +\n  (s * int (1 + n))\\<^sup>2\n\ngoal (1 subgoal):\n 1. v\\<^sup>2 + w\\<^sup>2 = int (1 + n) * ?k", "also"], ["proof (state)\nthis:\n  (x - r * int (1 + n))\\<^sup>2 + (y - s * int (1 + n))\\<^sup>2 =\n  x\\<^sup>2 + y\\<^sup>2 - 2 * x * (r * int (1 + n)) -\n  2 * y * (s * int (1 + n)) +\n  (r * int (1 + n))\\<^sup>2 +\n  (s * int (1 + n))\\<^sup>2\n\ngoal (1 subgoal):\n 1. v\\<^sup>2 + w\\<^sup>2 = int (1 + n) * ?k", "with xy"], ["proof (chain)\npicking this:\n  x\\<^sup>2 + y\\<^sup>2 = int (4 * k + 1) * int (1 + n)\n  (x - r * int (1 + n))\\<^sup>2 + (y - s * int (1 + n))\\<^sup>2 =\n  x\\<^sup>2 + y\\<^sup>2 - 2 * x * (r * int (1 + n)) -\n  2 * y * (s * int (1 + n)) +\n  (r * int (1 + n))\\<^sup>2 +\n  (s * int (1 + n))\\<^sup>2", "have \"\\<dots> = ?n1*?p - ?n1*(2*x*r) - ?n1*(2*y*s) + ?n1^2*r^2 + ?n1^2*s^2\""], ["proof (prove)\nusing this:\n  x\\<^sup>2 + y\\<^sup>2 = int (4 * k + 1) * int (1 + n)\n  (x - r * int (1 + n))\\<^sup>2 + (y - s * int (1 + n))\\<^sup>2 =\n  x\\<^sup>2 + y\\<^sup>2 - 2 * x * (r * int (1 + n)) -\n  2 * y * (s * int (1 + n)) +\n  (r * int (1 + n))\\<^sup>2 +\n  (s * int (1 + n))\\<^sup>2\n\ngoal (1 subgoal):\n 1. x\\<^sup>2 + y\\<^sup>2 - 2 * x * (r * int (1 + n)) -\n    2 * y * (s * int (1 + n)) +\n    (r * int (1 + n))\\<^sup>2 +\n    (s * int (1 + n))\\<^sup>2 =\n    int (1 + n) * int (4 * k + 1) - int (1 + n) * (2 * x * r) -\n    int (1 + n) * (2 * y * s) +\n    (int (1 + n))\\<^sup>2 * r\\<^sup>2 +\n    (int (1 + n))\\<^sup>2 * s\\<^sup>2", "by (simp only: ac_simps power_mult_distrib)"], ["proof (state)\nthis:\n  x\\<^sup>2 + y\\<^sup>2 - 2 * x * (r * int (1 + n)) -\n  2 * y * (s * int (1 + n)) +\n  (r * int (1 + n))\\<^sup>2 +\n  (s * int (1 + n))\\<^sup>2 =\n  int (1 + n) * int (4 * k + 1) - int (1 + n) * (2 * x * r) -\n  int (1 + n) * (2 * y * s) +\n  (int (1 + n))\\<^sup>2 * r\\<^sup>2 +\n  (int (1 + n))\\<^sup>2 * s\\<^sup>2\n\ngoal (1 subgoal):\n 1. v\\<^sup>2 + w\\<^sup>2 = int (1 + n) * ?k", "finally"], ["proof (chain)\npicking this:\n  v\\<^sup>2 + w\\<^sup>2 =\n  int (1 + n) * int (4 * k + 1) - int (1 + n) * (2 * x * r) -\n  int (1 + n) * (2 * y * s) +\n  (int (1 + n))\\<^sup>2 * r\\<^sup>2 +\n  (int (1 + n))\\<^sup>2 * s\\<^sup>2", "show \"?C = ?n1*(?p - 2*x*r - 2*y*s + ?n1*(r^2 + s^2))\""], ["proof (prove)\nusing this:\n  v\\<^sup>2 + w\\<^sup>2 =\n  int (1 + n) * int (4 * k + 1) - int (1 + n) * (2 * x * r) -\n  int (1 + n) * (2 * y * s) +\n  (int (1 + n))\\<^sup>2 * r\\<^sup>2 +\n  (int (1 + n))\\<^sup>2 * s\\<^sup>2\n\ngoal (1 subgoal):\n 1. v\\<^sup>2 + w\\<^sup>2 =\n    int (1 + n) *\n    (int (4 * k + 1) - 2 * x * r - 2 * y * s +\n     int (1 + n) * (r\\<^sup>2 + s\\<^sup>2))", "by (simp only: power_mult_distrib distrib_left ac_simps\n              left_diff_distrib right_diff_distrib power2_eq_square)"], ["proof (state)\nthis:\n  v\\<^sup>2 + w\\<^sup>2 =\n  int (1 + n) *\n  (int (4 * k + 1) - 2 * x * r - 2 * y * s +\n   int (1 + n) * (r\\<^sup>2 + s\\<^sup>2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  int (1 + n) dvd v\\<^sup>2 + w\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < n;\n        \\<not> (1 + n < 4 * k + 1 \\<longrightarrow>\n                \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + n)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<n.\n                            \\<not> (1 + m < 4 * k + 1 \\<longrightarrow>\n                                    \\<not> is_sum2sq_nat\n      ((4 * k + 1) * (1 + m)))", "then"], ["proof (chain)\npicking this:\n  int (1 + n) dvd v\\<^sup>2 + w\\<^sup>2", "obtain m1 where m1: \"?C = ?n1*m1\""], ["proof (prove)\nusing this:\n  int (1 + n) dvd v\\<^sup>2 + w\\<^sup>2\n\ngoal (1 subgoal):\n 1. (\\<And>m1.\n        v\\<^sup>2 + w\\<^sup>2 = int (1 + n) * m1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: dvd_def)"], ["proof (state)\nthis:\n  v\\<^sup>2 + w\\<^sup>2 = int (1 + n) * m1\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < n;\n        \\<not> (1 + n < 4 * k + 1 \\<longrightarrow>\n                \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + n)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<n.\n                            \\<not> (1 + m < 4 * k + 1 \\<longrightarrow>\n                                    \\<not> is_sum2sq_nat\n      ((4 * k + 1) * (1 + m)))", "have mn: \"m1 < ?n1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m1 < int (1 + n)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> m1 < int (1 + n) \\<Longrightarrow> False", "assume \"\\<not> m1 < ?n1\""], ["proof (state)\nthis:\n  \\<not> m1 < int (1 + n)\n\ngoal (1 subgoal):\n 1. \\<not> m1 < int (1 + n) \\<Longrightarrow> False", "hence \"?n1-m1 \\<le> 0\""], ["proof (prove)\nusing this:\n  \\<not> m1 < int (1 + n)\n\ngoal (1 subgoal):\n 1. int (1 + n) - m1 \\<le> 0", "by simp"], ["proof (state)\nthis:\n  int (1 + n) - m1 \\<le> 0\n\ngoal (1 subgoal):\n 1. \\<not> m1 < int (1 + n) \\<Longrightarrow> False", "hence \"4*?n1 - 4*m1 \\<le> 0\""], ["proof (prove)\nusing this:\n  int (1 + n) - m1 \\<le> 0\n\ngoal (1 subgoal):\n 1. 4 * int (1 + n) - 4 * m1 \\<le> 0", "by simp"], ["proof (state)\nthis:\n  4 * int (1 + n) - 4 * m1 \\<le> 0\n\ngoal (1 subgoal):\n 1. \\<not> m1 < int (1 + n) \\<Longrightarrow> False", "with n1pos"], ["proof (chain)\npicking this:\n  0 < int (1 + n)\n  4 * int (1 + n) - 4 * m1 \\<le> 0", "have \"2*?n1 - 4*m1 < 0\""], ["proof (prove)\nusing this:\n  0 < int (1 + n)\n  4 * int (1 + n) - 4 * m1 \\<le> 0\n\ngoal (1 subgoal):\n 1. 2 * int (1 + n) - 4 * m1 < 0", "by simp"], ["proof (state)\nthis:\n  2 * int (1 + n) - 4 * m1 < 0\n\ngoal (1 subgoal):\n 1. \\<not> m1 < int (1 + n) \\<Longrightarrow> False", "with n1pos"], ["proof (chain)\npicking this:\n  0 < int (1 + n)\n  2 * int (1 + n) - 4 * m1 < 0", "have \"?n1*(2*?n1 - 4*m1) < ?n1*0\""], ["proof (prove)\nusing this:\n  0 < int (1 + n)\n  2 * int (1 + n) - 4 * m1 < 0\n\ngoal (1 subgoal):\n 1. int (1 + n) * (2 * int (1 + n) - 4 * m1) < int (1 + n) * 0", "by (simp only: zmult_zless_mono2)"], ["proof (state)\nthis:\n  int (1 + n) * (2 * int (1 + n) - 4 * m1) < int (1 + n) * 0\n\ngoal (1 subgoal):\n 1. \\<not> m1 < int (1 + n) \\<Longrightarrow> False", "hence contr: \"?n1*(2*?n1- 4*m1) < 0\""], ["proof (prove)\nusing this:\n  int (1 + n) * (2 * int (1 + n) - 4 * m1) < int (1 + n) * 0\n\ngoal (1 subgoal):\n 1. int (1 + n) * (2 * int (1 + n) - 4 * m1) < 0", "by simp"], ["proof (state)\nthis:\n  int (1 + n) * (2 * int (1 + n) - 4 * m1) < 0\n\ngoal (1 subgoal):\n 1. \\<not> m1 < int (1 + n) \\<Longrightarrow> False", "have hlp: \"2*\\<bar>v\\<bar> \\<ge> 0 \\<and> 2*\\<bar>w\\<bar> \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> 2 * \\<bar>v\\<bar> \\<and> 0 \\<le> 2 * \\<bar>w\\<bar>", "by simp"], ["proof (state)\nthis:\n  0 \\<le> 2 * \\<bar>v\\<bar> \\<and> 0 \\<le> 2 * \\<bar>w\\<bar>\n\ngoal (1 subgoal):\n 1. \\<not> m1 < int (1 + n) \\<Longrightarrow> False", "from m1"], ["proof (chain)\npicking this:\n  v\\<^sup>2 + w\\<^sup>2 = int (1 + n) * m1", "have \"4*?n1*m1 = 4*v^2 + 4*w^2\""], ["proof (prove)\nusing this:\n  v\\<^sup>2 + w\\<^sup>2 = int (1 + n) * m1\n\ngoal (1 subgoal):\n 1. 4 * int (1 + n) * m1 = 4 * v\\<^sup>2 + 4 * w\\<^sup>2", "by arith"], ["proof (state)\nthis:\n  4 * int (1 + n) * m1 = 4 * v\\<^sup>2 + 4 * w\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<not> m1 < int (1 + n) \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  4 * int (1 + n) * m1 = 4 * v\\<^sup>2 + 4 * w\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<not> m1 < int (1 + n) \\<Longrightarrow> False", "have \"\\<dots> = (2*\\<bar>v\\<bar>)^2 + (2*\\<bar>w\\<bar>)^2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 4 * v\\<^sup>2 + 4 * w\\<^sup>2 =\n    (2 * \\<bar>v\\<bar>)\\<^sup>2 + (2 * \\<bar>w\\<bar>)\\<^sup>2", "by (auto simp add: power_mult_distrib)"], ["proof (state)\nthis:\n  4 * v\\<^sup>2 + 4 * w\\<^sup>2 =\n  (2 * \\<bar>v\\<bar>)\\<^sup>2 + (2 * \\<bar>w\\<bar>)\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<not> m1 < int (1 + n) \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  4 * v\\<^sup>2 + 4 * w\\<^sup>2 =\n  (2 * \\<bar>v\\<bar>)\\<^sup>2 + (2 * \\<bar>w\\<bar>)\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<not> m1 < int (1 + n) \\<Longrightarrow> False", "from rv hlp"], ["proof (chain)\npicking this:\n  v = x - r * int (1 + n) \\<and> 2 * \\<bar>v\\<bar> \\<le> int (1 + n)\n  0 \\<le> 2 * \\<bar>v\\<bar> \\<and> 0 \\<le> 2 * \\<bar>w\\<bar>", "have \"\\<dots> \\<le> ?n1^2 + (2*\\<bar>w\\<bar>)^2\""], ["proof (prove)\nusing this:\n  v = x - r * int (1 + n) \\<and> 2 * \\<bar>v\\<bar> \\<le> int (1 + n)\n  0 \\<le> 2 * \\<bar>v\\<bar> \\<and> 0 \\<le> 2 * \\<bar>w\\<bar>\n\ngoal (1 subgoal):\n 1. (2 * \\<bar>v\\<bar>)\\<^sup>2 + (2 * \\<bar>w\\<bar>)\\<^sup>2\n    \\<le> (int (1 + n))\\<^sup>2 + (2 * \\<bar>w\\<bar>)\\<^sup>2", "using power_mono [of \"2*\\<bar>b\\<bar>\" \"1 + int n\" 2 for b]"], ["proof (prove)\nusing this:\n  v = x - r * int (1 + n) \\<and> 2 * \\<bar>v\\<bar> \\<le> int (1 + n)\n  0 \\<le> 2 * \\<bar>v\\<bar> \\<and> 0 \\<le> 2 * \\<bar>w\\<bar>\n  \\<lbrakk>2 * \\<bar>?b2\\<bar> \\<le> 1 + int n;\n   0 \\<le> 2 * \\<bar>?b2\\<bar>\\<rbrakk>\n  \\<Longrightarrow> (2 * \\<bar>?b2\\<bar>)\\<^sup>2 \\<le> (1 + int n)\\<^sup>2\n\ngoal (1 subgoal):\n 1. (2 * \\<bar>v\\<bar>)\\<^sup>2 + (2 * \\<bar>w\\<bar>)\\<^sup>2\n    \\<le> (int (1 + n))\\<^sup>2 + (2 * \\<bar>w\\<bar>)\\<^sup>2", "by auto"], ["proof (state)\nthis:\n  (2 * \\<bar>v\\<bar>)\\<^sup>2 + (2 * \\<bar>w\\<bar>)\\<^sup>2\n  \\<le> (int (1 + n))\\<^sup>2 + (2 * \\<bar>w\\<bar>)\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<not> m1 < int (1 + n) \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  (2 * \\<bar>v\\<bar>)\\<^sup>2 + (2 * \\<bar>w\\<bar>)\\<^sup>2\n  \\<le> (int (1 + n))\\<^sup>2 + (2 * \\<bar>w\\<bar>)\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<not> m1 < int (1 + n) \\<Longrightarrow> False", "from sw hlp"], ["proof (chain)\npicking this:\n  w = y - s * int (1 + n) \\<and> 2 * \\<bar>w\\<bar> \\<le> int (1 + n)\n  0 \\<le> 2 * \\<bar>v\\<bar> \\<and> 0 \\<le> 2 * \\<bar>w\\<bar>", "have \"\\<dots> \\<le> ?n1^2 + ?n1^2\""], ["proof (prove)\nusing this:\n  w = y - s * int (1 + n) \\<and> 2 * \\<bar>w\\<bar> \\<le> int (1 + n)\n  0 \\<le> 2 * \\<bar>v\\<bar> \\<and> 0 \\<le> 2 * \\<bar>w\\<bar>\n\ngoal (1 subgoal):\n 1. (int (1 + n))\\<^sup>2 + (2 * \\<bar>w\\<bar>)\\<^sup>2\n    \\<le> (int (1 + n))\\<^sup>2 + (int (1 + n))\\<^sup>2", "using power_mono [of \"2*\\<bar>b\\<bar>\" \"1 + int n\" 2 for b]"], ["proof (prove)\nusing this:\n  w = y - s * int (1 + n) \\<and> 2 * \\<bar>w\\<bar> \\<le> int (1 + n)\n  0 \\<le> 2 * \\<bar>v\\<bar> \\<and> 0 \\<le> 2 * \\<bar>w\\<bar>\n  \\<lbrakk>2 * \\<bar>?b2\\<bar> \\<le> 1 + int n;\n   0 \\<le> 2 * \\<bar>?b2\\<bar>\\<rbrakk>\n  \\<Longrightarrow> (2 * \\<bar>?b2\\<bar>)\\<^sup>2 \\<le> (1 + int n)\\<^sup>2\n\ngoal (1 subgoal):\n 1. (int (1 + n))\\<^sup>2 + (2 * \\<bar>w\\<bar>)\\<^sup>2\n    \\<le> (int (1 + n))\\<^sup>2 + (int (1 + n))\\<^sup>2", "by auto"], ["proof (state)\nthis:\n  (int (1 + n))\\<^sup>2 + (2 * \\<bar>w\\<bar>)\\<^sup>2\n  \\<le> (int (1 + n))\\<^sup>2 + (int (1 + n))\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<not> m1 < int (1 + n) \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  4 * int (1 + n) * m1 \\<le> (int (1 + n))\\<^sup>2 + (int (1 + n))\\<^sup>2", "have \"?n1*m1*4 \\<le> ?n1*?n1*2\""], ["proof (prove)\nusing this:\n  4 * int (1 + n) * m1 \\<le> (int (1 + n))\\<^sup>2 + (int (1 + n))\\<^sup>2\n\ngoal (1 subgoal):\n 1. int (1 + n) * m1 * 4 \\<le> int (1 + n) * int (1 + n) * 2", "by (simp add: power2_eq_square ac_simps)"], ["proof (state)\nthis:\n  int (1 + n) * m1 * 4 \\<le> int (1 + n) * int (1 + n) * 2\n\ngoal (1 subgoal):\n 1. \\<not> m1 < int (1 + n) \\<Longrightarrow> False", "hence \"?n1*(2*?n1- 4*m1) \\<ge> 0\""], ["proof (prove)\nusing this:\n  int (1 + n) * m1 * 4 \\<le> int (1 + n) * int (1 + n) * 2\n\ngoal (1 subgoal):\n 1. 0 \\<le> int (1 + n) * (2 * int (1 + n) - 4 * m1)", "by (simp only: right_diff_distrib ac_simps)"], ["proof (state)\nthis:\n  0 \\<le> int (1 + n) * (2 * int (1 + n) - 4 * m1)\n\ngoal (1 subgoal):\n 1. \\<not> m1 < int (1 + n) \\<Longrightarrow> False", "with contr"], ["proof (chain)\npicking this:\n  int (1 + n) * (2 * int (1 + n) - 4 * m1) < 0\n  0 \\<le> int (1 + n) * (2 * int (1 + n) - 4 * m1)", "show False"], ["proof (prove)\nusing this:\n  int (1 + n) * (2 * int (1 + n) - 4 * m1) < 0\n  0 \\<le> int (1 + n) * (2 * int (1 + n) - 4 * m1)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  m1 < int (1 + n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < n;\n        \\<not> (1 + n < 4 * k + 1 \\<longrightarrow>\n                \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + n)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<n.\n                            \\<not> (1 + m < 4 * k + 1 \\<longrightarrow>\n                                    \\<not> is_sum2sq_nat\n      ((4 * k + 1) * (1 + m)))", "have \"?p*m1 = (r*v + s*w + m1)^2 + (r*w - s*v)^2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int (4 * k + 1) * m1 =\n    (r * v + s * w + m1)\\<^sup>2 + (r * w - s * v)\\<^sup>2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. int (4 * k + 1) * m1 =\n    (r * v + s * w + m1)\\<^sup>2 + (r * w - s * v)\\<^sup>2", "from m1 xy"], ["proof (chain)\npicking this:\n  v\\<^sup>2 + w\\<^sup>2 = int (1 + n) * m1\n  x\\<^sup>2 + y\\<^sup>2 = int (4 * k + 1) * int (1 + n)", "have \"(?p*?n1)*?C = (x^2+y^2)*(v^2+w^2)\""], ["proof (prove)\nusing this:\n  v\\<^sup>2 + w\\<^sup>2 = int (1 + n) * m1\n  x\\<^sup>2 + y\\<^sup>2 = int (4 * k + 1) * int (1 + n)\n\ngoal (1 subgoal):\n 1. int (4 * k + 1) * int (1 + n) * (v\\<^sup>2 + w\\<^sup>2) =\n    (x\\<^sup>2 + y\\<^sup>2) * (v\\<^sup>2 + w\\<^sup>2)", "by simp"], ["proof (state)\nthis:\n  int (4 * k + 1) * int (1 + n) * (v\\<^sup>2 + w\\<^sup>2) =\n  (x\\<^sup>2 + y\\<^sup>2) * (v\\<^sup>2 + w\\<^sup>2)\n\ngoal (1 subgoal):\n 1. int (4 * k + 1) * m1 =\n    (r * v + s * w + m1)\\<^sup>2 + (r * w - s * v)\\<^sup>2", "also"], ["proof (state)\nthis:\n  int (4 * k + 1) * int (1 + n) * (v\\<^sup>2 + w\\<^sup>2) =\n  (x\\<^sup>2 + y\\<^sup>2) * (v\\<^sup>2 + w\\<^sup>2)\n\ngoal (1 subgoal):\n 1. int (4 * k + 1) * m1 =\n    (r * v + s * w + m1)\\<^sup>2 + (r * w - s * v)\\<^sup>2", "have \"\\<dots> = (x*v + y*w)^2 + (x*w - y*v)^2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x\\<^sup>2 + y\\<^sup>2) * (v\\<^sup>2 + w\\<^sup>2) =\n    (x * v + y * w)\\<^sup>2 + (x * w - y * v)\\<^sup>2", "by (simp add: eval_nat_numeral field_simps)"], ["proof (state)\nthis:\n  (x\\<^sup>2 + y\\<^sup>2) * (v\\<^sup>2 + w\\<^sup>2) =\n  (x * v + y * w)\\<^sup>2 + (x * w - y * v)\\<^sup>2\n\ngoal (1 subgoal):\n 1. int (4 * k + 1) * m1 =\n    (r * v + s * w + m1)\\<^sup>2 + (r * w - s * v)\\<^sup>2", "also"], ["proof (state)\nthis:\n  (x\\<^sup>2 + y\\<^sup>2) * (v\\<^sup>2 + w\\<^sup>2) =\n  (x * v + y * w)\\<^sup>2 + (x * w - y * v)\\<^sup>2\n\ngoal (1 subgoal):\n 1. int (4 * k + 1) * m1 =\n    (r * v + s * w + m1)\\<^sup>2 + (r * w - s * v)\\<^sup>2", "with rv sw"], ["proof (chain)\npicking this:\n  v = x - r * int (1 + n) \\<and> 2 * \\<bar>v\\<bar> \\<le> int (1 + n)\n  w = y - s * int (1 + n) \\<and> 2 * \\<bar>w\\<bar> \\<le> int (1 + n)\n  (x\\<^sup>2 + y\\<^sup>2) * (v\\<^sup>2 + w\\<^sup>2) =\n  (x * v + y * w)\\<^sup>2 + (x * w - y * v)\\<^sup>2", "have \"\\<dots> = ((r*?n1+v)*v + (s*?n1+w)*w)^2 + ((r*?n1+v)*w - (s*?n1+w)*v)^2\""], ["proof (prove)\nusing this:\n  v = x - r * int (1 + n) \\<and> 2 * \\<bar>v\\<bar> \\<le> int (1 + n)\n  w = y - s * int (1 + n) \\<and> 2 * \\<bar>w\\<bar> \\<le> int (1 + n)\n  (x\\<^sup>2 + y\\<^sup>2) * (v\\<^sup>2 + w\\<^sup>2) =\n  (x * v + y * w)\\<^sup>2 + (x * w - y * v)\\<^sup>2\n\ngoal (1 subgoal):\n 1. (x * v + y * w)\\<^sup>2 + (x * w - y * v)\\<^sup>2 =\n    ((r * int (1 + n) + v) * v + (s * int (1 + n) + w) * w)\\<^sup>2 +\n    ((r * int (1 + n) + v) * w - (s * int (1 + n) + w) * v)\\<^sup>2", "by simp"], ["proof (state)\nthis:\n  (x * v + y * w)\\<^sup>2 + (x * w - y * v)\\<^sup>2 =\n  ((r * int (1 + n) + v) * v + (s * int (1 + n) + w) * w)\\<^sup>2 +\n  ((r * int (1 + n) + v) * w - (s * int (1 + n) + w) * v)\\<^sup>2\n\ngoal (1 subgoal):\n 1. int (4 * k + 1) * m1 =\n    (r * v + s * w + m1)\\<^sup>2 + (r * w - s * v)\\<^sup>2", "also"], ["proof (state)\nthis:\n  (x * v + y * w)\\<^sup>2 + (x * w - y * v)\\<^sup>2 =\n  ((r * int (1 + n) + v) * v + (s * int (1 + n) + w) * w)\\<^sup>2 +\n  ((r * int (1 + n) + v) * w - (s * int (1 + n) + w) * v)\\<^sup>2\n\ngoal (1 subgoal):\n 1. int (4 * k + 1) * m1 =\n    (r * v + s * w + m1)\\<^sup>2 + (r * w - s * v)\\<^sup>2", "have \"\\<dots> = (?n1*(r*v) + ?n1*(s*w) + (v^2+w^2))^2 + (?n1*(r*w) - ?n1*(s*v))^2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((r * int (1 + n) + v) * v + (s * int (1 + n) + w) * w)\\<^sup>2 +\n    ((r * int (1 + n) + v) * w - (s * int (1 + n) + w) * v)\\<^sup>2 =\n    (int (1 + n) * (r * v) + int (1 + n) * (s * w) +\n     (v\\<^sup>2 + w\\<^sup>2))\\<^sup>2 +\n    (int (1 + n) * (r * w) - int (1 + n) * (s * v))\\<^sup>2", "by (simp add: eval_nat_numeral field_simps)"], ["proof (state)\nthis:\n  ((r * int (1 + n) + v) * v + (s * int (1 + n) + w) * w)\\<^sup>2 +\n  ((r * int (1 + n) + v) * w - (s * int (1 + n) + w) * v)\\<^sup>2 =\n  (int (1 + n) * (r * v) + int (1 + n) * (s * w) +\n   (v\\<^sup>2 + w\\<^sup>2))\\<^sup>2 +\n  (int (1 + n) * (r * w) - int (1 + n) * (s * v))\\<^sup>2\n\ngoal (1 subgoal):\n 1. int (4 * k + 1) * m1 =\n    (r * v + s * w + m1)\\<^sup>2 + (r * w - s * v)\\<^sup>2", "also"], ["proof (state)\nthis:\n  ((r * int (1 + n) + v) * v + (s * int (1 + n) + w) * w)\\<^sup>2 +\n  ((r * int (1 + n) + v) * w - (s * int (1 + n) + w) * v)\\<^sup>2 =\n  (int (1 + n) * (r * v) + int (1 + n) * (s * w) +\n   (v\\<^sup>2 + w\\<^sup>2))\\<^sup>2 +\n  (int (1 + n) * (r * w) - int (1 + n) * (s * v))\\<^sup>2\n\ngoal (1 subgoal):\n 1. int (4 * k + 1) * m1 =\n    (r * v + s * w + m1)\\<^sup>2 + (r * w - s * v)\\<^sup>2", "from m1"], ["proof (chain)\npicking this:\n  v\\<^sup>2 + w\\<^sup>2 = int (1 + n) * m1", "have \"\\<dots> = (?n1*(r*v) + ?n1*(s*w) + ?n1*m1)^2 + (?n1*(r*w) - ?n1*(s*v))^2\""], ["proof (prove)\nusing this:\n  v\\<^sup>2 + w\\<^sup>2 = int (1 + n) * m1\n\ngoal (1 subgoal):\n 1. (int (1 + n) * (r * v) + int (1 + n) * (s * w) +\n     (v\\<^sup>2 + w\\<^sup>2))\\<^sup>2 +\n    (int (1 + n) * (r * w) - int (1 + n) * (s * v))\\<^sup>2 =\n    (int (1 + n) * (r * v) + int (1 + n) * (s * w) +\n     int (1 + n) * m1)\\<^sup>2 +\n    (int (1 + n) * (r * w) - int (1 + n) * (s * v))\\<^sup>2", "by simp"], ["proof (state)\nthis:\n  (int (1 + n) * (r * v) + int (1 + n) * (s * w) +\n   (v\\<^sup>2 + w\\<^sup>2))\\<^sup>2 +\n  (int (1 + n) * (r * w) - int (1 + n) * (s * v))\\<^sup>2 =\n  (int (1 + n) * (r * v) + int (1 + n) * (s * w) +\n   int (1 + n) * m1)\\<^sup>2 +\n  (int (1 + n) * (r * w) - int (1 + n) * (s * v))\\<^sup>2\n\ngoal (1 subgoal):\n 1. int (4 * k + 1) * m1 =\n    (r * v + s * w + m1)\\<^sup>2 + (r * w - s * v)\\<^sup>2", "finally"], ["proof (chain)\npicking this:\n  int (4 * k + 1) * int (1 + n) * (v\\<^sup>2 + w\\<^sup>2) =\n  (int (1 + n) * (r * v) + int (1 + n) * (s * w) +\n   int (1 + n) * m1)\\<^sup>2 +\n  (int (1 + n) * (r * w) - int (1 + n) * (s * v))\\<^sup>2", "have \"(?p*?n1)*?C = ?n1^2*(r*v + s*w + m1)^2 + ?n1^2*(r*w - s*v)^2\""], ["proof (prove)\nusing this:\n  int (4 * k + 1) * int (1 + n) * (v\\<^sup>2 + w\\<^sup>2) =\n  (int (1 + n) * (r * v) + int (1 + n) * (s * w) +\n   int (1 + n) * m1)\\<^sup>2 +\n  (int (1 + n) * (r * w) - int (1 + n) * (s * v))\\<^sup>2\n\ngoal (1 subgoal):\n 1. int (4 * k + 1) * int (1 + n) * (v\\<^sup>2 + w\\<^sup>2) =\n    (int (1 + n))\\<^sup>2 * (r * v + s * w + m1)\\<^sup>2 +\n    (int (1 + n))\\<^sup>2 * (r * w - s * v)\\<^sup>2", "by (simp add: eval_nat_numeral field_simps)"], ["proof (state)\nthis:\n  int (4 * k + 1) * int (1 + n) * (v\\<^sup>2 + w\\<^sup>2) =\n  (int (1 + n))\\<^sup>2 * (r * v + s * w + m1)\\<^sup>2 +\n  (int (1 + n))\\<^sup>2 * (r * w - s * v)\\<^sup>2\n\ngoal (1 subgoal):\n 1. int (4 * k + 1) * m1 =\n    (r * v + s * w + m1)\\<^sup>2 + (r * w - s * v)\\<^sup>2", "with m1"], ["proof (chain)\npicking this:\n  v\\<^sup>2 + w\\<^sup>2 = int (1 + n) * m1\n  int (4 * k + 1) * int (1 + n) * (v\\<^sup>2 + w\\<^sup>2) =\n  (int (1 + n))\\<^sup>2 * (r * v + s * w + m1)\\<^sup>2 +\n  (int (1 + n))\\<^sup>2 * (r * w - s * v)\\<^sup>2", "have \"?n1^2*(?p*m1) = ?n1^2*((r*v + s*w + m1)^2 + (r*w - s*v)^2)\""], ["proof (prove)\nusing this:\n  v\\<^sup>2 + w\\<^sup>2 = int (1 + n) * m1\n  int (4 * k + 1) * int (1 + n) * (v\\<^sup>2 + w\\<^sup>2) =\n  (int (1 + n))\\<^sup>2 * (r * v + s * w + m1)\\<^sup>2 +\n  (int (1 + n))\\<^sup>2 * (r * w - s * v)\\<^sup>2\n\ngoal (1 subgoal):\n 1. (int (1 + n))\\<^sup>2 * (int (4 * k + 1) * m1) =\n    (int (1 + n))\\<^sup>2 *\n    ((r * v + s * w + m1)\\<^sup>2 + (r * w - s * v)\\<^sup>2)", "by (simp only: ac_simps power2_eq_square, simp add: distrib_left)"], ["proof (state)\nthis:\n  (int (1 + n))\\<^sup>2 * (int (4 * k + 1) * m1) =\n  (int (1 + n))\\<^sup>2 *\n  ((r * v + s * w + m1)\\<^sup>2 + (r * w - s * v)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. int (4 * k + 1) * m1 =\n    (r * v + s * w + m1)\\<^sup>2 + (r * w - s * v)\\<^sup>2", "hence \"?n1^2*(?p*m1 - (r*v+s*w+m1)^2 - (r*w-s*v)^2) = 0\""], ["proof (prove)\nusing this:\n  (int (1 + n))\\<^sup>2 * (int (4 * k + 1) * m1) =\n  (int (1 + n))\\<^sup>2 *\n  ((r * v + s * w + m1)\\<^sup>2 + (r * w - s * v)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. (int (1 + n))\\<^sup>2 *\n    (int (4 * k + 1) * m1 - (r * v + s * w + m1)\\<^sup>2 -\n     (r * w - s * v)\\<^sup>2) =\n    0", "by (auto simp add: distrib_left right_diff_distrib)"], ["proof (state)\nthis:\n  (int (1 + n))\\<^sup>2 *\n  (int (4 * k + 1) * m1 - (r * v + s * w + m1)\\<^sup>2 -\n   (r * w - s * v)\\<^sup>2) =\n  0\n\ngoal (1 subgoal):\n 1. int (4 * k + 1) * m1 =\n    (r * v + s * w + m1)\\<^sup>2 + (r * w - s * v)\\<^sup>2", "moreover"], ["proof (state)\nthis:\n  (int (1 + n))\\<^sup>2 *\n  (int (4 * k + 1) * m1 - (r * v + s * w + m1)\\<^sup>2 -\n   (r * w - s * v)\\<^sup>2) =\n  0\n\ngoal (1 subgoal):\n 1. int (4 * k + 1) * m1 =\n    (r * v + s * w + m1)\\<^sup>2 + (r * w - s * v)\\<^sup>2", "from n1pos"], ["proof (chain)\npicking this:\n  0 < int (1 + n)", "have \"?n1^2 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  0 < int (1 + n)\n\ngoal (1 subgoal):\n 1. (int (1 + n))\\<^sup>2 \\<noteq> 0", "by (simp add: power2_eq_square)"], ["proof (state)\nthis:\n  (int (1 + n))\\<^sup>2 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. int (4 * k + 1) * m1 =\n    (r * v + s * w + m1)\\<^sup>2 + (r * w - s * v)\\<^sup>2", "ultimately"], ["proof (chain)\npicking this:\n  (int (1 + n))\\<^sup>2 *\n  (int (4 * k + 1) * m1 - (r * v + s * w + m1)\\<^sup>2 -\n   (r * w - s * v)\\<^sup>2) =\n  0\n  (int (1 + n))\\<^sup>2 \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  (int (1 + n))\\<^sup>2 *\n  (int (4 * k + 1) * m1 - (r * v + s * w + m1)\\<^sup>2 -\n   (r * w - s * v)\\<^sup>2) =\n  0\n  (int (1 + n))\\<^sup>2 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. int (4 * k + 1) * m1 =\n    (r * v + s * w + m1)\\<^sup>2 + (r * w - s * v)\\<^sup>2", "by simp"], ["proof (state)\nthis:\n  int (4 * k + 1) * m1 =\n  (r * v + s * w + m1)\\<^sup>2 + (r * w - s * v)\\<^sup>2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  int (4 * k + 1) * m1 =\n  (r * v + s * w + m1)\\<^sup>2 + (r * w - s * v)\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < n;\n        \\<not> (1 + n < 4 * k + 1 \\<longrightarrow>\n                \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + n)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<n.\n                            \\<not> (1 + m < 4 * k + 1 \\<longrightarrow>\n                                    \\<not> is_sum2sq_nat\n      ((4 * k + 1) * (1 + m)))", "hence qf1pm1: \"is_sum2sq_int ((int ?p)*m1)\""], ["proof (prove)\nusing this:\n  int (4 * k + 1) * m1 =\n  (r * v + s * w + m1)\\<^sup>2 + (r * w - s * v)\\<^sup>2\n\ngoal (1 subgoal):\n 1. is_sum2sq_int (int (4 * k + 1) * m1)", "by (unfold is_sum2sq_int_def sum2sq_int_def, auto)"], ["proof (state)\nthis:\n  is_sum2sq_int (int (4 * k + 1) * m1)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < n;\n        \\<not> (1 + n < 4 * k + 1 \\<longrightarrow>\n                \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + n)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<n.\n                            \\<not> (1 + m < 4 * k + 1 \\<longrightarrow>\n                                    \\<not> is_sum2sq_nat\n      ((4 * k + 1) * (1 + m)))", "have m1pos: \"m1 > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < m1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < m1", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < m1", "assume \"v^2 + w^2 = 0\""], ["proof (state)\nthis:\n  v\\<^sup>2 + w\\<^sup>2 = 0\n\ngoal (1 subgoal):\n 1. 0 < m1", "hence \"v = 0 \\<and> w = 0\""], ["proof (prove)\nusing this:\n  v\\<^sup>2 + w\\<^sup>2 = 0\n\ngoal (1 subgoal):\n 1. v = 0 \\<and> w = 0", "using sum_power2_eq_zero_iff"], ["proof (prove)\nusing this:\n  v\\<^sup>2 + w\\<^sup>2 = 0\n  (?x\\<^sup>2 + ?y\\<^sup>2 = (0::?'a)) =\n  (?x = (0::?'a) \\<and> ?y = (0::?'a))\n\ngoal (1 subgoal):\n 1. v = 0 \\<and> w = 0", "by blast"], ["proof (state)\nthis:\n  v = 0 \\<and> w = 0\n\ngoal (1 subgoal):\n 1. 0 < m1", "with rv sw"], ["proof (chain)\npicking this:\n  v = x - r * int (1 + n) \\<and> 2 * \\<bar>v\\<bar> \\<le> int (1 + n)\n  w = y - s * int (1 + n) \\<and> 2 * \\<bar>w\\<bar> \\<le> int (1 + n)\n  v = 0 \\<and> w = 0", "have \"?n1 dvd x \\<and> ?n1 dvd y\""], ["proof (prove)\nusing this:\n  v = x - r * int (1 + n) \\<and> 2 * \\<bar>v\\<bar> \\<le> int (1 + n)\n  w = y - s * int (1 + n) \\<and> 2 * \\<bar>w\\<bar> \\<le> int (1 + n)\n  v = 0 \\<and> w = 0\n\ngoal (1 subgoal):\n 1. int (1 + n) dvd x \\<and> int (1 + n) dvd y", "by (unfold dvd_def, auto)"], ["proof (state)\nthis:\n  int (1 + n) dvd x \\<and> int (1 + n) dvd y\n\ngoal (1 subgoal):\n 1. 0 < m1", "hence \"?n1^2 dvd x^2 \\<and> ?n1^2 dvd y^2\""], ["proof (prove)\nusing this:\n  int (1 + n) dvd x \\<and> int (1 + n) dvd y\n\ngoal (1 subgoal):\n 1. (int (1 + n))\\<^sup>2 dvd x\\<^sup>2 \\<and>\n    (int (1 + n))\\<^sup>2 dvd y\\<^sup>2", "by simp"], ["proof (state)\nthis:\n  (int (1 + n))\\<^sup>2 dvd x\\<^sup>2 \\<and>\n  (int (1 + n))\\<^sup>2 dvd y\\<^sup>2\n\ngoal (1 subgoal):\n 1. 0 < m1", "hence \"?n1^2 dvd x^2 + y^2\""], ["proof (prove)\nusing this:\n  (int (1 + n))\\<^sup>2 dvd x\\<^sup>2 \\<and>\n  (int (1 + n))\\<^sup>2 dvd y\\<^sup>2\n\ngoal (1 subgoal):\n 1. (int (1 + n))\\<^sup>2 dvd x\\<^sup>2 + y\\<^sup>2", "by (simp only: dvd_add)"], ["proof (state)\nthis:\n  (int (1 + n))\\<^sup>2 dvd x\\<^sup>2 + y\\<^sup>2\n\ngoal (1 subgoal):\n 1. 0 < m1", "with xy"], ["proof (chain)\npicking this:\n  x\\<^sup>2 + y\\<^sup>2 = int (4 * k + 1) * int (1 + n)\n  (int (1 + n))\\<^sup>2 dvd x\\<^sup>2 + y\\<^sup>2", "have \"?n1*?n1 dvd ?n1*?p\""], ["proof (prove)\nusing this:\n  x\\<^sup>2 + y\\<^sup>2 = int (4 * k + 1) * int (1 + n)\n  (int (1 + n))\\<^sup>2 dvd x\\<^sup>2 + y\\<^sup>2\n\ngoal (1 subgoal):\n 1. int (1 + n) * int (1 + n) dvd int (1 + n) * int (4 * k + 1)", "by (simp only: power2_eq_square ac_simps)"], ["proof (state)\nthis:\n  int (1 + n) * int (1 + n) dvd int (1 + n) * int (4 * k + 1)\n\ngoal (1 subgoal):\n 1. 0 < m1", "moreover"], ["proof (state)\nthis:\n  int (1 + n) * int (1 + n) dvd int (1 + n) * int (4 * k + 1)\n\ngoal (1 subgoal):\n 1. 0 < m1", "from n1pos"], ["proof (chain)\npicking this:\n  0 < int (1 + n)", "have \"?n1 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  0 < int (1 + n)\n\ngoal (1 subgoal):\n 1. int (1 + n) \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  int (1 + n) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < m1", "ultimately"], ["proof (chain)\npicking this:\n  int (1 + n) * int (1 + n) dvd int (1 + n) * int (4 * k + 1)\n  int (1 + n) \\<noteq> 0", "have \"?n1 dvd ?p\""], ["proof (prove)\nusing this:\n  int (1 + n) * int (1 + n) dvd int (1 + n) * int (4 * k + 1)\n  int (1 + n) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. int (1 + n) dvd int (4 * k + 1)", "by (rule zdvd_mult_cancel)"], ["proof (state)\nthis:\n  int (1 + n) dvd int (4 * k + 1)\n\ngoal (1 subgoal):\n 1. 0 < m1", "with n1pos"], ["proof (chain)\npicking this:\n  0 < int (1 + n)\n  int (1 + n) dvd int (4 * k + 1)", "have \"?n1 \\<ge> 0 \\<and> ?n1 dvd ?p\""], ["proof (prove)\nusing this:\n  0 < int (1 + n)\n  int (1 + n) dvd int (4 * k + 1)\n\ngoal (1 subgoal):\n 1. 0 \\<le> int (1 + n) \\<and> int (1 + n) dvd int (4 * k + 1)", "by simp"], ["proof (state)\nthis:\n  0 \\<le> int (1 + n) \\<and> int (1 + n) dvd int (4 * k + 1)\n\ngoal (1 subgoal):\n 1. 0 < m1", "with p"], ["proof (chain)\npicking this:\n  prime (4 * k + 1)\n  0 \\<le> int (1 + n) \\<and> int (1 + n) dvd int (4 * k + 1)", "have \"?n1 = 1 \\<or> ?n1 = ?p\""], ["proof (prove)\nusing this:\n  prime (4 * k + 1)\n  0 \\<le> int (1 + n) \\<and> int (1 + n) dvd int (4 * k + 1)\n\ngoal (1 subgoal):\n 1. int (1 + n) = 1 \\<or> int (1 + n) = int (4 * k + 1)", "unfolding prime_nat_iff"], ["proof (prove)\nusing this:\n  1 < 4 * k + 1 \\<and>\n  (\\<forall>m. m dvd 4 * k + 1 \\<longrightarrow> m = 1 \\<or> m = 4 * k + 1)\n  0 \\<le> int (1 + n) \\<and> int (1 + n) dvd int (4 * k + 1)\n\ngoal (1 subgoal):\n 1. int (1 + n) = 1 \\<or> int (1 + n) = int (4 * k + 1)", "by presburger"], ["proof (state)\nthis:\n  int (1 + n) = 1 \\<or> int (1 + n) = int (4 * k + 1)\n\ngoal (1 subgoal):\n 1. 0 < m1", "with IH"], ["proof (chain)\npicking this:\n  1 + n < 4 * k + 1 \\<and> is_sum2sq_nat ((4 * k + 1) * (1 + n))\n  int (1 + n) = 1 \\<or> int (1 + n) = int (4 * k + 1)", "have \"?Q 0\""], ["proof (prove)\nusing this:\n  1 + n < 4 * k + 1 \\<and> is_sum2sq_nat ((4 * k + 1) * (1 + n))\n  int (1 + n) = 1 \\<or> int (1 + n) = int (4 * k + 1)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat ((4 * k + 1) * (1 + 0))", "by auto"], ["proof (state)\nthis:\n  is_sum2sq_nat ((4 * k + 1) * (1 + 0))\n\ngoal (1 subgoal):\n 1. 0 < m1", "with nQ1"], ["proof (chain)\npicking this:\n  \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + 0))\n  is_sum2sq_nat ((4 * k + 1) * (1 + 0))", "have False"], ["proof (prove)\nusing this:\n  \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + 0))\n  is_sum2sq_nat ((4 * k + 1) * (1 + 0))\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. 0 < m1", "}"], ["proof (state)\nthis:\n  v\\<^sup>2 + w\\<^sup>2 = 0 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. 0 < m1", "moreover"], ["proof (state)\nthis:\n  v\\<^sup>2 + w\\<^sup>2 = 0 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. 0 < m1", "{"], ["proof (state)\nthis:\n  v\\<^sup>2 + w\\<^sup>2 = 0 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. 0 < m1", "assume \"v^2 + 1*w^2 \\<noteq> 0\""], ["proof (state)\nthis:\n  v\\<^sup>2 + 1 * w\\<^sup>2 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < m1", "moreover"], ["proof (state)\nthis:\n  v\\<^sup>2 + 1 * w\\<^sup>2 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < m1", "have \"v^2 + w^2 \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> v\\<^sup>2 + w\\<^sup>2", "by simp"], ["proof (state)\nthis:\n  0 \\<le> v\\<^sup>2 + w\\<^sup>2\n\ngoal (1 subgoal):\n 1. 0 < m1", "ultimately"], ["proof (chain)\npicking this:\n  v\\<^sup>2 + 1 * w\\<^sup>2 \\<noteq> 0\n  0 \\<le> v\\<^sup>2 + w\\<^sup>2", "have vwpos: \"v^2 + w^2 > 0\""], ["proof (prove)\nusing this:\n  v\\<^sup>2 + 1 * w\\<^sup>2 \\<noteq> 0\n  0 \\<le> v\\<^sup>2 + w\\<^sup>2\n\ngoal (1 subgoal):\n 1. 0 < v\\<^sup>2 + w\\<^sup>2", "by arith"], ["proof (state)\nthis:\n  0 < v\\<^sup>2 + w\\<^sup>2\n\ngoal (1 subgoal):\n 1. 0 < m1", "with m1"], ["proof (chain)\npicking this:\n  v\\<^sup>2 + w\\<^sup>2 = int (1 + n) * m1\n  0 < v\\<^sup>2 + w\\<^sup>2", "have \"m1 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  v\\<^sup>2 + w\\<^sup>2 = int (1 + n) * m1\n  0 < v\\<^sup>2 + w\\<^sup>2\n\ngoal (1 subgoal):\n 1. m1 \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  m1 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < m1", "moreover"], ["proof (state)\nthis:\n  m1 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < m1", "have \"m1 \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> m1", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> 0 \\<le> m1 \\<Longrightarrow> False", "assume \"\\<not> m1 \\<ge> 0\""], ["proof (state)\nthis:\n  \\<not> 0 \\<le> m1\n\ngoal (1 subgoal):\n 1. \\<not> 0 \\<le> m1 \\<Longrightarrow> False", "hence \"m1 < 0\""], ["proof (prove)\nusing this:\n  \\<not> 0 \\<le> m1\n\ngoal (1 subgoal):\n 1. m1 < 0", "by simp"], ["proof (state)\nthis:\n  m1 < 0\n\ngoal (1 subgoal):\n 1. \\<not> 0 \\<le> m1 \\<Longrightarrow> False", "with n1pos"], ["proof (chain)\npicking this:\n  0 < int (1 + n)\n  m1 < 0", "have \"?n1*m1 < ?n1*0\""], ["proof (prove)\nusing this:\n  0 < int (1 + n)\n  m1 < 0\n\ngoal (1 subgoal):\n 1. int (1 + n) * m1 < int (1 + n) * 0", "by (simp only: zmult_zless_mono2)"], ["proof (state)\nthis:\n  int (1 + n) * m1 < int (1 + n) * 0\n\ngoal (1 subgoal):\n 1. \\<not> 0 \\<le> m1 \\<Longrightarrow> False", "with m1 vwpos"], ["proof (chain)\npicking this:\n  v\\<^sup>2 + w\\<^sup>2 = int (1 + n) * m1\n  0 < v\\<^sup>2 + w\\<^sup>2\n  int (1 + n) * m1 < int (1 + n) * 0", "show False"], ["proof (prove)\nusing this:\n  v\\<^sup>2 + w\\<^sup>2 = int (1 + n) * m1\n  0 < v\\<^sup>2 + w\\<^sup>2\n  int (1 + n) * m1 < int (1 + n) * 0\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 \\<le> m1\n\ngoal (1 subgoal):\n 1. 0 < m1", "ultimately"], ["proof (chain)\npicking this:\n  m1 \\<noteq> 0\n  0 \\<le> m1", "have ?thesis"], ["proof (prove)\nusing this:\n  m1 \\<noteq> 0\n  0 \\<le> m1\n\ngoal (1 subgoal):\n 1. 0 < m1", "by auto"], ["proof (state)\nthis:\n  0 < m1\n\ngoal (1 subgoal):\n 1. 0 < m1", "}"], ["proof (state)\nthis:\n  v\\<^sup>2 + 1 * w\\<^sup>2 \\<noteq> 0 \\<Longrightarrow> 0 < m1\n\ngoal (1 subgoal):\n 1. 0 < m1", "ultimately"], ["proof (chain)\npicking this:\n  v\\<^sup>2 + w\\<^sup>2 = 0 \\<Longrightarrow> False\n  v\\<^sup>2 + 1 * w\\<^sup>2 \\<noteq> 0 \\<Longrightarrow> 0 < m1", "show ?thesis"], ["proof (prove)\nusing this:\n  v\\<^sup>2 + w\\<^sup>2 = 0 \\<Longrightarrow> False\n  v\\<^sup>2 + 1 * w\\<^sup>2 \\<noteq> 0 \\<Longrightarrow> 0 < m1\n\ngoal (1 subgoal):\n 1. 0 < m1", "by auto"], ["proof (state)\nthis:\n  0 < m1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < m1\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < n;\n        \\<not> (1 + n < 4 * k + 1 \\<longrightarrow>\n                \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + n)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<n.\n                            \\<not> (1 + m < 4 * k + 1 \\<longrightarrow>\n                                    \\<not> is_sum2sq_nat\n      ((4 * k + 1) * (1 + m)))", "hence \"1 + int((nat m1) - 1) = m1\""], ["proof (prove)\nusing this:\n  0 < m1\n\ngoal (1 subgoal):\n 1. 1 + int (nat m1 - 1) = m1", "by arith"], ["proof (state)\nthis:\n  1 + int (nat m1 - 1) = m1\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < n;\n        \\<not> (1 + n < 4 * k + 1 \\<longrightarrow>\n                \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + n)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<n.\n                            \\<not> (1 + m < 4 * k + 1 \\<longrightarrow>\n                                    \\<not> is_sum2sq_nat\n      ((4 * k + 1) * (1 + m)))", "with qf1pm1"], ["proof (chain)\npicking this:\n  is_sum2sq_int (int (4 * k + 1) * m1)\n  1 + int (nat m1 - 1) = m1", "have Qm1: \"?Q ((nat m1) - 1)\""], ["proof (prove)\nusing this:\n  is_sum2sq_int (int (4 * k + 1) * m1)\n  1 + int (nat m1 - 1) = m1\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat ((4 * k + 1) * (1 + (nat m1 - 1)))", "using is_sum2sq_int_nat_eq"], ["proof (prove)\nusing this:\n  is_sum2sq_int (int (4 * k + 1) * m1)\n  1 + int (nat m1 - 1) = m1\n  is_sum2sq_nat ?n = is_sum2sq_int (int ?n)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat ((4 * k + 1) * (1 + (nat m1 - 1)))", "by (simp add: algebra_simps)"], ["proof (state)\nthis:\n  is_sum2sq_nat ((4 * k + 1) * (1 + (nat m1 - 1)))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < n;\n        \\<not> (1 + n < 4 * k + 1 \\<longrightarrow>\n                \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + n)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<n.\n                            \\<not> (1 + m < 4 * k + 1 \\<longrightarrow>\n                                    \\<not> is_sum2sq_nat\n      ((4 * k + 1) * (1 + m)))", "then"], ["proof (chain)\npicking this:\n  is_sum2sq_nat ((4 * k + 1) * (1 + (nat m1 - 1)))", "obtain mm where tmp: \"mm = (nat m1) - 1 \\<and> ?Q mm\""], ["proof (prove)\nusing this:\n  is_sum2sq_nat ((4 * k + 1) * (1 + (nat m1 - 1)))\n\ngoal (1 subgoal):\n 1. (\\<And>mm.\n        mm = nat m1 - 1 \\<and>\n        is_sum2sq_nat ((4 * k + 1) * (1 + mm)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  mm = nat m1 - 1 \\<and> is_sum2sq_nat ((4 * k + 1) * (1 + mm))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < n;\n        \\<not> (1 + n < 4 * k + 1 \\<longrightarrow>\n                \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + n)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<n.\n                            \\<not> (1 + m < 4 * k + 1 \\<longrightarrow>\n                                    \\<not> is_sum2sq_nat\n      ((4 * k + 1) * (1 + m)))", "moreover"], ["proof (state)\nthis:\n  mm = nat m1 - 1 \\<and> is_sum2sq_nat ((4 * k + 1) * (1 + mm))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < n;\n        \\<not> (1 + n < 4 * k + 1 \\<longrightarrow>\n                \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + n)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<n.\n                            \\<not> (1 + m < 4 * k + 1 \\<longrightarrow>\n                                    \\<not> is_sum2sq_nat\n      ((4 * k + 1) * (1 + m)))", "have \"mm<n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mm < n", "using tmp mn m1pos"], ["proof (prove)\nusing this:\n  mm = nat m1 - 1 \\<and> is_sum2sq_nat ((4 * k + 1) * (1 + mm))\n  m1 < int (1 + n)\n  0 < m1\n\ngoal (1 subgoal):\n 1. mm < n", "by arith"], ["proof (state)\nthis:\n  mm < n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < n;\n        \\<not> (1 + n < 4 * k + 1 \\<longrightarrow>\n                \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + n)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<n.\n                            \\<not> (1 + m < 4 * k + 1 \\<longrightarrow>\n                                    \\<not> is_sum2sq_nat\n      ((4 * k + 1) * (1 + m)))", "moreover"], ["proof (state)\nthis:\n  mm < n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < n;\n        \\<not> (1 + n < 4 * k + 1 \\<longrightarrow>\n                \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + n)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<n.\n                            \\<not> (1 + m < 4 * k + 1 \\<longrightarrow>\n                                    \\<not> is_sum2sq_nat\n      ((4 * k + 1) * (1 + m)))", "with IH"], ["proof (chain)\npicking this:\n  1 + n < 4 * k + 1 \\<and> is_sum2sq_nat ((4 * k + 1) * (1 + n))\n  mm < n", "have \"1 + int mm < ?p\""], ["proof (prove)\nusing this:\n  1 + n < 4 * k + 1 \\<and> is_sum2sq_nat ((4 * k + 1) * (1 + n))\n  mm < n\n\ngoal (1 subgoal):\n 1. 1 + int mm < int (4 * k + 1)", "by auto"], ["proof (state)\nthis:\n  1 + int mm < int (4 * k + 1)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < n;\n        \\<not> (1 + n < 4 * k + 1 \\<longrightarrow>\n                \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + n)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<n.\n                            \\<not> (1 + m < 4 * k + 1 \\<longrightarrow>\n                                    \\<not> is_sum2sq_nat\n      ((4 * k + 1) * (1 + m)))", "ultimately"], ["proof (chain)\npicking this:\n  mm = nat m1 - 1 \\<and> is_sum2sq_nat ((4 * k + 1) * (1 + mm))\n  mm < n\n  1 + int mm < int (4 * k + 1)", "show ?case"], ["proof (prove)\nusing this:\n  mm = nat m1 - 1 \\<and> is_sum2sq_nat ((4 * k + 1) * (1 + mm))\n  mm < n\n  1 + int mm < int (4 * k + 1)\n\ngoal (1 subgoal):\n 1. \\<exists>m<n.\n       \\<not> (1 + m < 4 * k + 1 \\<longrightarrow>\n               \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + m)))", "by auto"], ["proof (state)\nthis:\n  \\<exists>m<n.\n     \\<not> (1 + m < 4 * k + 1 \\<longrightarrow>\n             \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + m)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  1 + tn < 4 * k + 1 \\<Longrightarrow>\n  \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + tn))\n\ngoal (1 subgoal):\n 1. \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + 0)) \\<Longrightarrow> False", "hence \"\\<not> is_sum2sq_nat (?p*t)\""], ["proof (prove)\nusing this:\n  1 + tn < 4 * k + 1 \\<Longrightarrow>\n  \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + tn))\n\ngoal (1 subgoal):\n 1. \\<not> is_sum2sq_nat ((4 * k + 1) * t)", "using tn tpos t_l_p"], ["proof (prove)\nusing this:\n  1 + tn < 4 * k + 1 \\<Longrightarrow>\n  \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + tn))\n  tn = t - 1\n  1 \\<le> t\n  t < 4 * k + 1\n\ngoal (1 subgoal):\n 1. \\<not> is_sum2sq_nat ((4 * k + 1) * t)", "by auto"], ["proof (state)\nthis:\n  \\<not> is_sum2sq_nat ((4 * k + 1) * t)\n\ngoal (1 subgoal):\n 1. \\<not> is_sum2sq_nat ((4 * k + 1) * (1 + 0)) \\<Longrightarrow> False", "with qf1pt"], ["proof (chain)\npicking this:\n  is_sum2sq_nat ((4 * k + 1) * t)\n  \\<not> is_sum2sq_nat ((4 * k + 1) * t)", "show False"], ["proof (prove)\nusing this:\n  is_sum2sq_nat ((4 * k + 1) * t)\n  \\<not> is_sum2sq_nat ((4 * k + 1) * t)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_sum2sq_nat ((4 * k + 1) * (1 + 0))\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "hence ?thesis"], ["proof (prove)\nusing this:\n  is_sum2sq_nat ((4 * k + 1) * (1 + 0))\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat (4 * k + 1)", "by auto"], ["proof (state)\nthis:\n  is_sum2sq_nat (4 * k + 1)\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "}"], ["proof (state)\nthis:\n  0 < t \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)\n\ngoal (1 subgoal):\n 1. prime (4 * k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "ultimately"], ["proof (chain)\npicking this:\n  1 \\<le> t\n  0 < t \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  1 \\<le> t\n  0 < t \\<Longrightarrow> is_sum2sq_nat (4 * k + 1)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat (4 * k + 1)", "by (auto simp add: less_le)"], ["proof (state)\nthis:\n  is_sum2sq_nat (4 * k + 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma fermat_two_squares: assumes \"prime p\" \"(\\<not> [p = 3] (mod 4))\"\n  shows \"is_sum2sq_nat p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sum2sq_nat p", "proof (cases \"p=2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 2 \\<Longrightarrow> is_sum2sq_nat p\n 2. p \\<noteq> 2 \\<Longrightarrow> is_sum2sq_nat p", "case True"], ["proof (state)\nthis:\n  p = 2\n\ngoal (2 subgoals):\n 1. p = 2 \\<Longrightarrow> is_sum2sq_nat p\n 2. p \\<noteq> 2 \\<Longrightarrow> is_sum2sq_nat p", "have \"(2::nat)=1^2+1^2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 = 1\\<^sup>2 + 1\\<^sup>2", "using power2_eq_square"], ["proof (prove)\nusing this:\n  ?a\\<^sup>2 = ?a * ?a\n\ngoal (1 subgoal):\n 1. 2 = 1\\<^sup>2 + 1\\<^sup>2", "by simp"], ["proof (state)\nthis:\n  2 = 1\\<^sup>2 + 1\\<^sup>2\n\ngoal (2 subgoals):\n 1. p = 2 \\<Longrightarrow> is_sum2sq_nat p\n 2. p \\<noteq> 2 \\<Longrightarrow> is_sum2sq_nat p", "thus ?thesis"], ["proof (prove)\nusing this:\n  2 = 1\\<^sup>2 + 1\\<^sup>2\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat p", "unfolding is_sum2sq_nat_def sum2sq_nat_def"], ["proof (prove)\nusing this:\n  2 = 1\\<^sup>2 + 1\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<exists>a b. p = a\\<^sup>2 + b\\<^sup>2", "using True"], ["proof (prove)\nusing this:\n  2 = 1\\<^sup>2 + 1\\<^sup>2\n  p = 2\n\ngoal (1 subgoal):\n 1. \\<exists>a b. p = a\\<^sup>2 + b\\<^sup>2", "by fast"], ["proof (state)\nthis:\n  is_sum2sq_nat p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 2 \\<Longrightarrow> is_sum2sq_nat p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 2 \\<Longrightarrow> is_sum2sq_nat p", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 2\n\ngoal (1 subgoal):\n 1. p \\<noteq> 2 \\<Longrightarrow> is_sum2sq_nat p", "hence \"p > 2\""], ["proof (prove)\nusing this:\n  p \\<noteq> 2\n\ngoal (1 subgoal):\n 1. 2 < p", "using assms(1)"], ["proof (prove)\nusing this:\n  p \\<noteq> 2\n  prime p\n\ngoal (1 subgoal):\n 1. 2 < p", "unfolding prime_nat_iff"], ["proof (prove)\nusing this:\n  p \\<noteq> 2\n  1 < p \\<and> (\\<forall>m. m dvd p \\<longrightarrow> m = 1 \\<or> m = p)\n\ngoal (1 subgoal):\n 1. 2 < p", "by auto"], ["proof (state)\nthis:\n  2 < p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 2 \\<Longrightarrow> is_sum2sq_nat p", "hence h1: \"odd p\""], ["proof (prove)\nusing this:\n  2 < p\n\ngoal (1 subgoal):\n 1. odd p", "using assms(1) prime_odd_nat"], ["proof (prove)\nusing this:\n  2 < p\n  prime p\n  \\<lbrakk>prime ?p; 2 < ?p\\<rbrakk> \\<Longrightarrow> odd ?p\n\ngoal (1 subgoal):\n 1. odd p", "by simp"], ["proof (state)\nthis:\n  odd p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 2 \\<Longrightarrow> is_sum2sq_nat p", "hence h2: \"\\<not> [p = 0] (mod 4)\""], ["proof (prove)\nusing this:\n  odd p\n\ngoal (1 subgoal):\n 1. [p \\<noteq> 0] (mod 4)", "unfolding cong_def"], ["proof (prove)\nusing this:\n  odd p\n\ngoal (1 subgoal):\n 1. p mod 4 \\<noteq> 0 mod 4", "by fastforce"], ["proof (state)\nthis:\n  [p \\<noteq> 0] (mod 4)\n\ngoal (1 subgoal):\n 1. p \\<noteq> 2 \\<Longrightarrow> is_sum2sq_nat p", "have h3: \"\\<not> [p = 2] (mod 4)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [p \\<noteq> 2] (mod 4)", "using h1 cong_dvd_iff [of p 2 2] cong_dvd_modulus_nat"], ["proof (prove)\nusing this:\n  odd p\n  [p = 2] (mod 2) \\<Longrightarrow> even p = even 2\n  \\<lbrakk>[?x = ?y] (mod ?m); ?n dvd ?m\\<rbrakk>\n  \\<Longrightarrow> [?x = ?y] (mod ?n)\n\ngoal (1 subgoal):\n 1. [p \\<noteq> 2] (mod 4)", "by auto"], ["proof (state)\nthis:\n  [p \\<noteq> 2] (mod 4)\n\ngoal (1 subgoal):\n 1. p \\<noteq> 2 \\<Longrightarrow> is_sum2sq_nat p", "obtain x where h4: \"[p = x] (mod 4) \\<and> x<4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        [p = x] (mod 4) \\<and> x < 4 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (meson cong_less_unique_nat zero_less_numeral)"], ["proof (state)\nthis:\n  [p = x] (mod 4) \\<and> x < 4\n\ngoal (1 subgoal):\n 1. p \\<noteq> 2 \\<Longrightarrow> is_sum2sq_nat p", "from h1 h2 h3 h4 assms"], ["proof (chain)\npicking this:\n  odd p\n  [p \\<noteq> 0] (mod 4)\n  [p \\<noteq> 2] (mod 4)\n  [p = x] (mod 4) \\<and> x < 4\n  prime p\n  [p \\<noteq> 3] (mod 4)", "have \"x\\<noteq>0 \\<and> x\\<noteq>2 \\<and> x\\<noteq>3 \\<and> x<4\""], ["proof (prove)\nusing this:\n  odd p\n  [p \\<noteq> 0] (mod 4)\n  [p \\<noteq> 2] (mod 4)\n  [p = x] (mod 4) \\<and> x < 4\n  prime p\n  [p \\<noteq> 3] (mod 4)\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<and> x \\<noteq> 2 \\<and> x \\<noteq> 3 \\<and> x < 4", "by meson"], ["proof (state)\nthis:\n  x \\<noteq> 0 \\<and> x \\<noteq> 2 \\<and> x \\<noteq> 3 \\<and> x < 4\n\ngoal (1 subgoal):\n 1. p \\<noteq> 2 \\<Longrightarrow> is_sum2sq_nat p", "hence \"x=1\""], ["proof (prove)\nusing this:\n  x \\<noteq> 0 \\<and> x \\<noteq> 2 \\<and> x \\<noteq> 3 \\<and> x < 4\n\ngoal (1 subgoal):\n 1. x = 1", "by linarith"], ["proof (state)\nthis:\n  x = 1\n\ngoal (1 subgoal):\n 1. p \\<noteq> 2 \\<Longrightarrow> is_sum2sq_nat p", "from this h4"], ["proof (chain)\npicking this:\n  x = 1\n  [p = x] (mod 4) \\<and> x < 4", "have \"[p = 1] (mod 4)\""], ["proof (prove)\nusing this:\n  x = 1\n  [p = x] (mod 4) \\<and> x < 4\n\ngoal (1 subgoal):\n 1. [p = 1] (mod 4)", "by simp"], ["proof (state)\nthis:\n  [p = 1] (mod 4)\n\ngoal (1 subgoal):\n 1. p \\<noteq> 2 \\<Longrightarrow> is_sum2sq_nat p", "then"], ["proof (chain)\npicking this:\n  [p = 1] (mod 4)", "obtain k where \"p = 4*k+1\""], ["proof (prove)\nusing this:\n  [p = 1] (mod 4)\n\ngoal (1 subgoal):\n 1. (\\<And>k. p = 4 * k + 1 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using aux_lemma"], ["proof (prove)\nusing this:\n  [p = 1] (mod 4)\n  \\<lbrakk>[?a = ?b] (mod ?c); ?b < ?c\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k. ?a = ?c * k + ?b\n\ngoal (1 subgoal):\n 1. (\\<And>k. p = 4 * k + 1 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  p = 4 * k + 1\n\ngoal (1 subgoal):\n 1. p \\<noteq> 2 \\<Longrightarrow> is_sum2sq_nat p", "thus ?thesis"], ["proof (prove)\nusing this:\n  p = 4 * k + 1\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat p", "using qf1_prime_exists assms"], ["proof (prove)\nusing this:\n  p = 4 * k + 1\n  prime (4 * ?k + 1) \\<Longrightarrow> is_sum2sq_nat (4 * ?k + 1)\n  prime p\n  [p \\<noteq> 3] (mod 4)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat p", "by blast"], ["proof (state)\nthis:\n  is_sum2sq_nat p\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma sots2: assumes \"\\<And> k. prime (4*k+3) \\<longrightarrow> even (multiplicity (4*k+3) n)\"\n  shows \"is_sum2sq_nat n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sum2sq_nat n", "using assms"], ["proof (prove)\nusing this:\n  prime (4 * ?k + 3) \\<longrightarrow> even (multiplicity (4 * ?k + 3) n)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n", "proof (induction n rule: nat_less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>m<n.\n                   (\\<forall>x.\n                       prime (4 * x + 3) \\<longrightarrow>\n                       even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                   is_sum2sq_nat m;\n        \\<And>k.\n           prime (4 * k + 3) \\<longrightarrow>\n           even (multiplicity (4 * k + 3) n)\\<rbrakk>\n       \\<Longrightarrow> is_sum2sq_nat n", "case (1 n)"], ["proof (state)\nthis:\n  \\<forall>m<n.\n     (\\<forall>x.\n         prime (4 * x + 3) \\<longrightarrow>\n         even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n     is_sum2sq_nat m\n  prime (4 * ?k + 3) \\<longrightarrow> even (multiplicity (4 * ?k + 3) n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>m<n.\n                   (\\<forall>x.\n                       prime (4 * x + 3) \\<longrightarrow>\n                       even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                   is_sum2sq_nat m;\n        \\<And>k.\n           prime (4 * k + 3) \\<longrightarrow>\n           even (multiplicity (4 * k + 3) n)\\<rbrakk>\n       \\<Longrightarrow> is_sum2sq_nat n", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>m<n.\n     (\\<forall>x.\n         prime (4 * x + 3) \\<longrightarrow>\n         even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n     is_sum2sq_nat m\n  prime (4 * ?k + 3) \\<longrightarrow> even (multiplicity (4 * ?k + 3) n)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n", "proof (cases \"n>1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n\n 2. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     \\<not> 1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "case f: False"], ["proof (state)\nthis:\n  \\<not> 1 < n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n\n 2. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     \\<not> 1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> 1 < n\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n", "proof (cases \"n=1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> 1 < n; n = 1\\<rbrakk> \\<Longrightarrow> is_sum2sq_nat n\n 2. \\<lbrakk>\\<not> 1 < n; n \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "case True"], ["proof (state)\nthis:\n  n = 1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> 1 < n; n = 1\\<rbrakk> \\<Longrightarrow> is_sum2sq_nat n\n 2. \\<lbrakk>\\<not> 1 < n; n \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "have \"(1::nat)=0^2+1^2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 = 0\\<^sup>2 + 1\\<^sup>2", "by (simp add: power2_eq_square)"], ["proof (state)\nthis:\n  1 = 0\\<^sup>2 + 1\\<^sup>2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> 1 < n; n = 1\\<rbrakk> \\<Longrightarrow> is_sum2sq_nat n\n 2. \\<lbrakk>\\<not> 1 < n; n \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "thus ?thesis"], ["proof (prove)\nusing this:\n  1 = 0\\<^sup>2 + 1\\<^sup>2\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n", "using True"], ["proof (prove)\nusing this:\n  1 = 0\\<^sup>2 + 1\\<^sup>2\n  n = 1\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n", "unfolding is_sum2sq_nat_def sum2sq_nat_def"], ["proof (prove)\nusing this:\n  1 = 0\\<^sup>2 + 1\\<^sup>2\n  n = 1\n\ngoal (1 subgoal):\n 1. \\<exists>a b. n = a\\<^sup>2 + b\\<^sup>2", "by blast"], ["proof (state)\nthis:\n  is_sum2sq_nat n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> 1 < n; n \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> 1 < n; n \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> 1 < n; n \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "hence \"n=0\""], ["proof (prove)\nusing this:\n  n \\<noteq> 1\n\ngoal (1 subgoal):\n 1. n = 0", "using f"], ["proof (prove)\nusing this:\n  n \\<noteq> 1\n  \\<not> 1 < n\n\ngoal (1 subgoal):\n 1. n = 0", "by simp"], ["proof (state)\nthis:\n  n = 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> 1 < n; n \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "moreover"], ["proof (state)\nthis:\n  n = 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> 1 < n; n \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "have \"(0::nat)=0^2+0^2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 = 0\\<^sup>2 + 0\\<^sup>2", "by (simp add: power2_eq_square)"], ["proof (state)\nthis:\n  0 = 0\\<^sup>2 + 0\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> 1 < n; n \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "ultimately"], ["proof (chain)\npicking this:\n  n = 0\n  0 = 0\\<^sup>2 + 0\\<^sup>2", "show ?thesis"], ["proof (prove)\nusing this:\n  n = 0\n  0 = 0\\<^sup>2 + 0\\<^sup>2\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n", "unfolding is_sum2sq_nat_def sum2sq_nat_def"], ["proof (prove)\nusing this:\n  n = 0\n  0 = 0\\<^sup>2 + 0\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<exists>a b. n = a\\<^sup>2 + b\\<^sup>2", "by blast"], ["proof (state)\nthis:\n  is_sum2sq_nat n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_sum2sq_nat n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "case True"], ["proof (state)\nthis:\n  1 < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "then"], ["proof (chain)\npicking this:\n  1 < n", "obtain p m where h1: \"prime p \\<and> n = p * m\""], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. (\\<And>p m.\n        prime p \\<and> n = p * m \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prime_divisor_exists[of n]"], ["proof (prove)\nusing this:\n  1 < n\n  \\<lbrakk>n \\<noteq> 0; \\<not> is_unit n\\<rbrakk>\n  \\<Longrightarrow> \\<exists>b. b dvd n \\<and> prime b\n\ngoal (1 subgoal):\n 1. (\\<And>p m.\n        prime p \\<and> n = p * m \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: dvdE)"], ["proof (state)\nthis:\n  prime p \\<and> n = p * m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "with True"], ["proof (chain)\npicking this:\n  1 < n\n  prime p \\<and> n = p * m", "have m_nz: \"m \\<noteq> 0\""], ["proof (prove)\nusing this:\n  1 < n\n  prime p \\<and> n = p * m\n\ngoal (1 subgoal):\n 1. m \\<noteq> 0", "by (intro notI) auto"], ["proof (state)\nthis:\n  m \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "from h1"], ["proof (chain)\npicking this:\n  prime p \\<and> n = p * m", "have h2: \"m<n\""], ["proof (prove)\nusing this:\n  prime p \\<and> n = p * m\n\ngoal (1 subgoal):\n 1. m < n", "using n_less_m_mult_n[of m p] prime_gt_Suc_0_nat[of p] True"], ["proof (prove)\nusing this:\n  prime p \\<and> n = p * m\n  \\<lbrakk>0 < m; Suc 0 < p\\<rbrakk> \\<Longrightarrow> m < p * m\n  prime p \\<Longrightarrow> Suc 0 < p\n  1 < n\n\ngoal (1 subgoal):\n 1. m < n", "by linarith"], ["proof (state)\nthis:\n  m < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "{"], ["proof (state)\nthis:\n  m < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "assume a1: \"[p = 3] (mod 4)\""], ["proof (state)\nthis:\n  [p = 3] (mod 4)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "then"], ["proof (chain)\npicking this:\n  [p = 3] (mod 4)", "obtain kp where \"p = 4*kp+3\""], ["proof (prove)\nusing this:\n  [p = 3] (mod 4)\n\ngoal (1 subgoal):\n 1. (\\<And>kp. p = 4 * kp + 3 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using aux_lemma"], ["proof (prove)\nusing this:\n  [p = 3] (mod 4)\n  \\<lbrakk>[?a = ?b] (mod ?c); ?b < ?c\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k. ?a = ?c * k + ?b\n\ngoal (1 subgoal):\n 1. (\\<And>kp. p = 4 * kp + 3 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  p = 4 * kp + 3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "hence \"even (multiplicity p n)\""], ["proof (prove)\nusing this:\n  p = 4 * kp + 3\n\ngoal (1 subgoal):\n 1. even (multiplicity p n)", "using \"1.prems\" h1"], ["proof (prove)\nusing this:\n  p = 4 * kp + 3\n  prime (4 * ?k + 3) \\<longrightarrow> even (multiplicity (4 * ?k + 3) n)\n  prime p \\<and> n = p * m\n\ngoal (1 subgoal):\n 1. even (multiplicity p n)", "by auto"], ["proof (state)\nthis:\n  even (multiplicity p n)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "moreover"], ["proof (state)\nthis:\n  even (multiplicity p n)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "have \"multiplicity p n \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity p n \\<noteq> 0", "using h1 True m_nz"], ["proof (prove)\nusing this:\n  prime p \\<and> n = p * m\n  1 < n\n  m \\<noteq> 0\n\ngoal (1 subgoal):\n 1. multiplicity p n \\<noteq> 0", "by (subst multiplicity_eq_zero_iff) (auto simp: prime_gt_0_nat)"], ["proof (state)\nthis:\n  multiplicity p n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "ultimately"], ["proof (chain)\npicking this:\n  even (multiplicity p n)\n  multiplicity p n \\<noteq> 0", "have h3: \"multiplicity p n \\<ge> 2\""], ["proof (prove)\nusing this:\n  even (multiplicity p n)\n  multiplicity p n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 2 \\<le> multiplicity p n", "by presburger"], ["proof (state)\nthis:\n  2 \\<le> multiplicity p n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "have \"p dvd m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p dvd m", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> p dvd m \\<Longrightarrow> False", "assume a2: \"\\<not> p dvd m\""], ["proof (state)\nthis:\n  \\<not> p dvd m\n\ngoal (1 subgoal):\n 1. \\<not> p dvd m \\<Longrightarrow> False", "hence \"multiplicity p m = 0\""], ["proof (prove)\nusing this:\n  \\<not> p dvd m\n\ngoal (1 subgoal):\n 1. multiplicity p m = 0", "by (rule not_dvd_imp_multiplicity_0)"], ["proof (state)\nthis:\n  multiplicity p m = 0\n\ngoal (1 subgoal):\n 1. \\<not> p dvd m \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  multiplicity p m = 0\n\ngoal (1 subgoal):\n 1. \\<not> p dvd m \\<Longrightarrow> False", "from h1"], ["proof (chain)\npicking this:\n  prime p \\<and> n = p * m", "have \"multiplicity p p = 1\""], ["proof (prove)\nusing this:\n  prime p \\<and> n = p * m\n\ngoal (1 subgoal):\n 1. multiplicity p p = 1", "by (intro multiplicity_prime) auto"], ["proof (state)\nthis:\n  multiplicity p p = 1\n\ngoal (1 subgoal):\n 1. \\<not> p dvd m \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  multiplicity p p = 1\n\ngoal (1 subgoal):\n 1. \\<not> p dvd m \\<Longrightarrow> False", "have \"m > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < m", "using h1 True"], ["proof (prove)\nusing this:\n  prime p \\<and> n = p * m\n  1 < n\n\ngoal (1 subgoal):\n 1. 0 < m", "by (cases \"m = 0\") simp_all"], ["proof (state)\nthis:\n  0 < m\n\ngoal (1 subgoal):\n 1. \\<not> p dvd m \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  multiplicity p m = 0\n  multiplicity p p = 1\n  0 < m", "have \"multiplicity p n = 1\""], ["proof (prove)\nusing this:\n  multiplicity p m = 0\n  multiplicity p p = 1\n  0 < m\n\ngoal (1 subgoal):\n 1. multiplicity p n = 1", "using h1"], ["proof (prove)\nusing this:\n  multiplicity p m = 0\n  multiplicity p p = 1\n  0 < m\n  prime p \\<and> n = p * m\n\ngoal (1 subgoal):\n 1. multiplicity p n = 1", "using prime_elem_multiplicity_mult_distrib [of p p m] m_nz prime_gt_0_nat"], ["proof (prove)\nusing this:\n  multiplicity p m = 0\n  multiplicity p p = 1\n  0 < m\n  prime p \\<and> n = p * m\n  \\<lbrakk>prime_elem p; p \\<noteq> 0; m \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> multiplicity p (p * m) =\n                    multiplicity p p + multiplicity p m\n  m \\<noteq> 0\n  prime ?p \\<Longrightarrow> 0 < ?p\n\ngoal (1 subgoal):\n 1. multiplicity p n = 1", "by auto"], ["proof (state)\nthis:\n  multiplicity p n = 1\n\ngoal (1 subgoal):\n 1. \\<not> p dvd m \\<Longrightarrow> False", "thus \"False\""], ["proof (prove)\nusing this:\n  multiplicity p n = 1\n\ngoal (1 subgoal):\n 1. False", "using h3"], ["proof (prove)\nusing this:\n  multiplicity p n = 1\n  2 \\<le> multiplicity p n\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p dvd m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "then"], ["proof (chain)\npicking this:\n  p dvd m", "obtain m' where h4: \"m = p * m'\""], ["proof (prove)\nusing this:\n  p dvd m\n\ngoal (1 subgoal):\n 1. (\\<And>m'. m = p * m' \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using dvdE"], ["proof (prove)\nusing this:\n  p dvd m\n  \\<lbrakk>?b dvd ?a; \\<And>k. ?a = ?b * k \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (\\<And>m'. m = p * m' \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  m = p * m'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "with h1"], ["proof (chain)\npicking this:\n  prime p \\<and> n = p * m\n  m = p * m'", "have h5: \"n = p^2 * m'\""], ["proof (prove)\nusing this:\n  prime p \\<and> n = p * m\n  m = p * m'\n\ngoal (1 subgoal):\n 1. n = p\\<^sup>2 * m'", "by (simp add: power2_eq_square)"], ["proof (state)\nthis:\n  n = p\\<^sup>2 * m'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "have h6: \"m'<n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m' < n", "using dual_order.strict_trans h1 h2 h4 nat_mult_less_cancel1 prime_gt_0_nat[of p]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?b < ?a; ?c < ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n  prime p \\<and> n = p * m\n  m < n\n  m = p * m'\n  0 < ?k \\<Longrightarrow> (?k * ?m < ?k * ?n) = (?m < ?n)\n  prime p \\<Longrightarrow> 0 < p\n\ngoal (1 subgoal):\n 1. m' < n", "by blast"], ["proof (state)\nthis:\n  m' < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "have \"\\<And> kq. prime (4*kq + 3) \\<Longrightarrow> even (multiplicity (4*kq + 3) m')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m')", "fix kq::nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m')", "let ?q = \"4*kq + 3\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m')", "assume a2: \"prime ?q\""], ["proof (state)\nthis:\n  prime (4 * kq + 3)\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m')", "{"], ["proof (state)\nthis:\n  prime (4 * kq + 3)\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m')", "assume p: \"p=?q\""], ["proof (state)\nthis:\n  p = 4 * kq + 3\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m')", "hence h7: \"multiplicity ?q (p^2) = 2\""], ["proof (prove)\nusing this:\n  p = 4 * kq + 3\n\ngoal (1 subgoal):\n 1. multiplicity (4 * kq + 3) (p\\<^sup>2) = 2", "using h1"], ["proof (prove)\nusing this:\n  p = 4 * kq + 3\n  prime p \\<and> n = p * m\n\ngoal (1 subgoal):\n 1. multiplicity (4 * kq + 3) (p\\<^sup>2) = 2", "by (auto intro!: multiplicity_prime_power)"], ["proof (state)\nthis:\n  multiplicity (4 * kq + 3) (p\\<^sup>2) = 2\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m')", "have \"even (multiplicity ?q n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. even (multiplicity (4 * kq + 3) n)", "using 1(2)[of kq] a2"], ["proof (prove)\nusing this:\n  prime (4 * kq + 3) \\<longrightarrow> even (multiplicity (4 * kq + 3) n)\n  prime (4 * kq + 3)\n\ngoal (1 subgoal):\n 1. even (multiplicity (4 * kq + 3) n)", "by blast"], ["proof (state)\nthis:\n  even (multiplicity (4 * kq + 3) n)\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m')", "also"], ["proof (state)\nthis:\n  even (multiplicity (4 * kq + 3) n)\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m')", "note h5"], ["proof (state)\nthis:\n  n = p\\<^sup>2 * m'\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m')", "also"], ["proof (state)\nthis:\n  n = p\\<^sup>2 * m'\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m')", "from p h1 h4 m_nz"], ["proof (chain)\npicking this:\n  p = 4 * kq + 3\n  prime p \\<and> n = p * m\n  m = p * m'\n  m \\<noteq> 0", "have \"multiplicity (4 * kq + 3) (p^2 * m') =\n                    Suc (Suc (multiplicity (4 * kq + 3) m'))\""], ["proof (prove)\nusing this:\n  p = 4 * kq + 3\n  prime p \\<and> n = p * m\n  m = p * m'\n  m \\<noteq> 0\n\ngoal (1 subgoal):\n 1. multiplicity (4 * kq + 3) (p\\<^sup>2 * m') =\n    Suc (Suc (multiplicity (4 * kq + 3) m'))", "by (subst prime_elem_multiplicity_mult_distrib) auto"], ["proof (state)\nthis:\n  multiplicity (4 * kq + 3) (p\\<^sup>2 * m') =\n  Suc (Suc (multiplicity (4 * kq + 3) m'))\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m')", "finally"], ["proof (chain)\npicking this:\n  even (Suc (Suc (multiplicity (4 * kq + 3) m')))", "have \"even (multiplicity ?q m')\""], ["proof (prove)\nusing this:\n  even (Suc (Suc (multiplicity (4 * kq + 3) m')))\n\ngoal (1 subgoal):\n 1. even (multiplicity (4 * kq + 3) m')", "by simp"], ["proof (state)\nthis:\n  even (multiplicity (4 * kq + 3) m')\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m')", "}"], ["proof (state)\nthis:\n  p = 4 * kq + 3 \\<Longrightarrow> even (multiplicity (4 * kq + 3) m')\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m')", "moreover"], ["proof (state)\nthis:\n  p = 4 * kq + 3 \\<Longrightarrow> even (multiplicity (4 * kq + 3) m')\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m')", "{"], ["proof (state)\nthis:\n  p = 4 * kq + 3 \\<Longrightarrow> even (multiplicity (4 * kq + 3) m')\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m')", "assume \"p\\<noteq>?q\""], ["proof (state)\nthis:\n  p \\<noteq> 4 * kq + 3\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m')", "from a2 h4 m_nz"], ["proof (chain)\npicking this:\n  prime (4 * kq + 3)\n  m = p * m'\n  m \\<noteq> 0", "have \"multiplicity ?q n = \n                                  multiplicity (4 * kq + 3) (p\\<^sup>2) + multiplicity (4 * kq + 3) m'\""], ["proof (prove)\nusing this:\n  prime (4 * kq + 3)\n  m = p * m'\n  m \\<noteq> 0\n\ngoal (1 subgoal):\n 1. multiplicity (4 * kq + 3) n =\n    multiplicity (4 * kq + 3) (p\\<^sup>2) + multiplicity (4 * kq + 3) m'", "unfolding h5"], ["proof (prove)\nusing this:\n  prime (4 * kq + 3)\n  m = p * m'\n  m \\<noteq> 0\n\ngoal (1 subgoal):\n 1. multiplicity (4 * kq + 3) (p\\<^sup>2 * m') =\n    multiplicity (4 * kq + 3) (p\\<^sup>2) + multiplicity (4 * kq + 3) m'", "by (subst prime_elem_multiplicity_mult_distrib) simp_all"], ["proof (state)\nthis:\n  multiplicity (4 * kq + 3) n =\n  multiplicity (4 * kq + 3) (p\\<^sup>2) + multiplicity (4 * kq + 3) m'\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m')", "also"], ["proof (state)\nthis:\n  multiplicity (4 * kq + 3) n =\n  multiplicity (4 * kq + 3) (p\\<^sup>2) + multiplicity (4 * kq + 3) m'\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m')", "from \\<open>p \\<noteq> ?q\\<close> a2 h1"], ["proof (chain)\npicking this:\n  p \\<noteq> 4 * kq + 3\n  prime (4 * kq + 3)\n  prime p \\<and> n = p * m", "have \"multiplicity ?q (p^2) = 0\""], ["proof (prove)\nusing this:\n  p \\<noteq> 4 * kq + 3\n  prime (4 * kq + 3)\n  prime p \\<and> n = p * m\n\ngoal (1 subgoal):\n 1. multiplicity (4 * kq + 3) (p\\<^sup>2) = 0", "by (intro multiplicity_distinct_prime_power) simp_all"], ["proof (state)\nthis:\n  multiplicity (4 * kq + 3) (p\\<^sup>2) = 0\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m')", "finally"], ["proof (chain)\npicking this:\n  multiplicity (4 * kq + 3) n = 0 + multiplicity (4 * kq + 3) m'", "have \"multiplicity ?q n = multiplicity ?q m'\""], ["proof (prove)\nusing this:\n  multiplicity (4 * kq + 3) n = 0 + multiplicity (4 * kq + 3) m'\n\ngoal (1 subgoal):\n 1. multiplicity (4 * kq + 3) n = multiplicity (4 * kq + 3) m'", "by simp"], ["proof (state)\nthis:\n  multiplicity (4 * kq + 3) n = multiplicity (4 * kq + 3) m'\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m')", "moreover"], ["proof (state)\nthis:\n  multiplicity (4 * kq + 3) n = multiplicity (4 * kq + 3) m'\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m')", "have \"even (multiplicity ?q n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. even (multiplicity (4 * kq + 3) n)", "using 1(2)[of kq] a2"], ["proof (prove)\nusing this:\n  prime (4 * kq + 3) \\<longrightarrow> even (multiplicity (4 * kq + 3) n)\n  prime (4 * kq + 3)\n\ngoal (1 subgoal):\n 1. even (multiplicity (4 * kq + 3) n)", "by blast"], ["proof (state)\nthis:\n  even (multiplicity (4 * kq + 3) n)\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m')", "ultimately"], ["proof (chain)\npicking this:\n  multiplicity (4 * kq + 3) n = multiplicity (4 * kq + 3) m'\n  even (multiplicity (4 * kq + 3) n)", "have \"even (multiplicity ?q m')\""], ["proof (prove)\nusing this:\n  multiplicity (4 * kq + 3) n = multiplicity (4 * kq + 3) m'\n  even (multiplicity (4 * kq + 3) n)\n\ngoal (1 subgoal):\n 1. even (multiplicity (4 * kq + 3) m')", "by simp"], ["proof (state)\nthis:\n  even (multiplicity (4 * kq + 3) m')\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m')", "}"], ["proof (state)\nthis:\n  p \\<noteq> 4 * kq + 3 \\<Longrightarrow>\n  even (multiplicity (4 * kq + 3) m')\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m')", "ultimately"], ["proof (chain)\npicking this:\n  p = 4 * kq + 3 \\<Longrightarrow> even (multiplicity (4 * kq + 3) m')\n  p \\<noteq> 4 * kq + 3 \\<Longrightarrow>\n  even (multiplicity (4 * kq + 3) m')", "show \"even (multiplicity ?q m')\""], ["proof (prove)\nusing this:\n  p = 4 * kq + 3 \\<Longrightarrow> even (multiplicity (4 * kq + 3) m')\n  p \\<noteq> 4 * kq + 3 \\<Longrightarrow>\n  even (multiplicity (4 * kq + 3) m')\n\ngoal (1 subgoal):\n 1. even (multiplicity (4 * kq + 3) m')", "by blast"], ["proof (state)\nthis:\n  even (multiplicity (4 * kq + 3) m')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prime (4 * ?kq + 3) \\<Longrightarrow> even (multiplicity (4 * ?kq + 3) m')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "hence \"is_sum2sq_nat m'\""], ["proof (prove)\nusing this:\n  prime (4 * ?kq + 3) \\<Longrightarrow> even (multiplicity (4 * ?kq + 3) m')\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat m'", "by (simp add: 1 h6)"], ["proof (state)\nthis:\n  is_sum2sq_nat m'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "moreover"], ["proof (state)\nthis:\n  is_sum2sq_nat m'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "have \"p^2 = p^2 + 0^2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p\\<^sup>2 = p\\<^sup>2 + 0\\<^sup>2", "by simp"], ["proof (state)\nthis:\n  p\\<^sup>2 = p\\<^sup>2 + 0\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "hence \"is_sum2sq_nat (p^2)\""], ["proof (prove)\nusing this:\n  p\\<^sup>2 = p\\<^sup>2 + 0\\<^sup>2\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat (p\\<^sup>2)", "unfolding is_sum2sq_nat_def sum2sq_nat_def"], ["proof (prove)\nusing this:\n  p\\<^sup>2 = p\\<^sup>2 + 0\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<exists>a b. p\\<^sup>2 = a\\<^sup>2 + b\\<^sup>2", "by blast"], ["proof (state)\nthis:\n  is_sum2sq_nat (p\\<^sup>2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "ultimately"], ["proof (chain)\npicking this:\n  is_sum2sq_nat m'\n  is_sum2sq_nat (p\\<^sup>2)", "have ?thesis"], ["proof (prove)\nusing this:\n  is_sum2sq_nat m'\n  is_sum2sq_nat (p\\<^sup>2)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n", "using product_two_squares_nat h5"], ["proof (prove)\nusing this:\n  is_sum2sq_nat m'\n  is_sum2sq_nat (p\\<^sup>2)\n  \\<lbrakk>is_sum2sq_nat ?m; is_sum2sq_nat ?n\\<rbrakk>\n  \\<Longrightarrow> is_sum2sq_nat (?m * ?n)\n  n = p\\<^sup>2 * m'\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n", "by blast"], ["proof (state)\nthis:\n  is_sum2sq_nat n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "}"], ["proof (state)\nthis:\n  [p = 3] (mod 4) \\<Longrightarrow> is_sum2sq_nat n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "moreover"], ["proof (state)\nthis:\n  [p = 3] (mod 4) \\<Longrightarrow> is_sum2sq_nat n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "{"], ["proof (state)\nthis:\n  [p = 3] (mod 4) \\<Longrightarrow> is_sum2sq_nat n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "assume a1: \"\\<not> [p = 3] (mod 4)\""], ["proof (state)\nthis:\n  [p \\<noteq> 3] (mod 4)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "have \"\\<And> kq. prime (4*kq+3) \\<Longrightarrow> even (multiplicity (4*kq+3) m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m)", "fix kq"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m)", "let ?q = \"4*(kq::nat) + 3\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m)", "assume a2: \"prime ?q\""], ["proof (state)\nthis:\n  prime (4 * kq + 3)\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m)", "{"], ["proof (state)\nthis:\n  prime (4 * kq + 3)\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m)", "assume \"p = ?q\""], ["proof (state)\nthis:\n  p = 4 * kq + 3\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m)", "then"], ["proof (chain)\npicking this:\n  p = 4 * kq + 3", "have False"], ["proof (prove)\nusing this:\n  p = 4 * kq + 3\n\ngoal (1 subgoal):\n 1. False", "using a1 cong_add_rcancel_0_nat [of \"4 * kq\" 3 4]"], ["proof (prove)\nusing this:\n  p = 4 * kq + 3\n  [p \\<noteq> 3] (mod 4)\n  [4 * kq + 3 = 3] (mod 4) = [4 * kq = 0] (mod 4)\n\ngoal (1 subgoal):\n 1. False", "by (auto simp add: cong_def)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m)", "}"], ["proof (state)\nthis:\n  p = 4 * kq + 3 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m)", "hence \"p\\<noteq>?q\""], ["proof (prove)\nusing this:\n  p = 4 * kq + 3 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. p \\<noteq> 4 * kq + 3", ".."], ["proof (state)\nthis:\n  p \\<noteq> 4 * kq + 3\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m)", "have \"n = p * m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = p * m", "using h1"], ["proof (prove)\nusing this:\n  prime p \\<and> n = p * m\n\ngoal (1 subgoal):\n 1. n = p * m", "by simp"], ["proof (state)\nthis:\n  n = p * m\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m)", "also"], ["proof (state)\nthis:\n  n = p * m\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m)", "from h1 a2 m_nz"], ["proof (chain)\npicking this:\n  prime p \\<and> n = p * m\n  prime (4 * kq + 3)\n  m \\<noteq> 0", "have \"multiplicity ?q \\<dots> = \n                                  multiplicity (4 * kq + 3) p + multiplicity (4 * kq + 3) m\""], ["proof (prove)\nusing this:\n  prime p \\<and> n = p * m\n  prime (4 * kq + 3)\n  m \\<noteq> 0\n\ngoal (1 subgoal):\n 1. multiplicity (4 * kq + 3) (p * m) =\n    multiplicity (4 * kq + 3) p + multiplicity (4 * kq + 3) m", "by (subst prime_elem_multiplicity_mult_distrib) (simp_all add: prime_gt_0_nat)"], ["proof (state)\nthis:\n  multiplicity (4 * kq + 3) (p * m) =\n  multiplicity (4 * kq + 3) p + multiplicity (4 * kq + 3) m\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m)", "also"], ["proof (state)\nthis:\n  multiplicity (4 * kq + 3) (p * m) =\n  multiplicity (4 * kq + 3) p + multiplicity (4 * kq + 3) m\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m)", "from \\<open>p \\<noteq> ?q\\<close> a2 h1"], ["proof (chain)\npicking this:\n  p \\<noteq> 4 * kq + 3\n  prime (4 * kq + 3)\n  prime p \\<and> n = p * m", "have \"multiplicity ?q p = 0\""], ["proof (prove)\nusing this:\n  p \\<noteq> 4 * kq + 3\n  prime (4 * kq + 3)\n  prime p \\<and> n = p * m\n\ngoal (1 subgoal):\n 1. multiplicity (4 * kq + 3) p = 0", "by (intro prime_multiplicity_other) simp_all"], ["proof (state)\nthis:\n  multiplicity (4 * kq + 3) p = 0\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m)", "finally"], ["proof (chain)\npicking this:\n  multiplicity (4 * kq + 3) n = 0 + multiplicity (4 * kq + 3) m", "have \"multiplicity ?q n = multiplicity ?q m\""], ["proof (prove)\nusing this:\n  multiplicity (4 * kq + 3) n = 0 + multiplicity (4 * kq + 3) m\n\ngoal (1 subgoal):\n 1. multiplicity (4 * kq + 3) n = multiplicity (4 * kq + 3) m", "by simp"], ["proof (state)\nthis:\n  multiplicity (4 * kq + 3) n = multiplicity (4 * kq + 3) m\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m)", "moreover"], ["proof (state)\nthis:\n  multiplicity (4 * kq + 3) n = multiplicity (4 * kq + 3) m\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m)", "have \"even (multiplicity ?q n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. even (multiplicity (4 * kq + 3) n)", "using 1(2)[of kq] a2"], ["proof (prove)\nusing this:\n  prime (4 * kq + 3) \\<longrightarrow> even (multiplicity (4 * kq + 3) n)\n  prime (4 * kq + 3)\n\ngoal (1 subgoal):\n 1. even (multiplicity (4 * kq + 3) n)", "by blast"], ["proof (state)\nthis:\n  even (multiplicity (4 * kq + 3) n)\n\ngoal (1 subgoal):\n 1. \\<And>kq.\n       prime (4 * kq + 3) \\<Longrightarrow>\n       even (multiplicity (4 * kq + 3) m)", "ultimately"], ["proof (chain)\npicking this:\n  multiplicity (4 * kq + 3) n = multiplicity (4 * kq + 3) m\n  even (multiplicity (4 * kq + 3) n)", "show \"even (multiplicity ?q m)\""], ["proof (prove)\nusing this:\n  multiplicity (4 * kq + 3) n = multiplicity (4 * kq + 3) m\n  even (multiplicity (4 * kq + 3) n)\n\ngoal (1 subgoal):\n 1. even (multiplicity (4 * kq + 3) m)", "by simp"], ["proof (state)\nthis:\n  even (multiplicity (4 * kq + 3) m)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prime (4 * ?kq + 3) \\<Longrightarrow> even (multiplicity (4 * ?kq + 3) m)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "hence \"is_sum2sq_nat m\""], ["proof (prove)\nusing this:\n  prime (4 * ?kq + 3) \\<Longrightarrow> even (multiplicity (4 * ?kq + 3) m)\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat m", "by (simp add: 1 h2)"], ["proof (state)\nthis:\n  is_sum2sq_nat m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "moreover"], ["proof (state)\nthis:\n  is_sum2sq_nat m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "have \"is_sum2sq_nat p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sum2sq_nat p", "using fermat_two_squares a1 h1"], ["proof (prove)\nusing this:\n  \\<lbrakk>prime ?p; [?p \\<noteq> 3] (mod 4)\\<rbrakk>\n  \\<Longrightarrow> is_sum2sq_nat ?p\n  [p \\<noteq> 3] (mod 4)\n  prime p \\<and> n = p * m\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat p", "by blast"], ["proof (state)\nthis:\n  is_sum2sq_nat p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "ultimately"], ["proof (chain)\npicking this:\n  is_sum2sq_nat m\n  is_sum2sq_nat p", "have ?thesis"], ["proof (prove)\nusing this:\n  is_sum2sq_nat m\n  is_sum2sq_nat p\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n", "using product_two_squares_nat h1"], ["proof (prove)\nusing this:\n  is_sum2sq_nat m\n  is_sum2sq_nat p\n  \\<lbrakk>is_sum2sq_nat ?m; is_sum2sq_nat ?n\\<rbrakk>\n  \\<Longrightarrow> is_sum2sq_nat (?m * ?n)\n  prime p \\<and> n = p * m\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n", "by blast"], ["proof (state)\nthis:\n  is_sum2sq_nat n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "}"], ["proof (state)\nthis:\n  [p \\<noteq> 3] (mod 4) \\<Longrightarrow> is_sum2sq_nat n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n.\n                (\\<forall>x.\n                    prime (4 * x + 3) \\<longrightarrow>\n                    even (multiplicity (4 * x + 3) m)) \\<longrightarrow>\n                is_sum2sq_nat m;\n     \\<And>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n);\n     1 < n\\<rbrakk>\n    \\<Longrightarrow> is_sum2sq_nat n", "ultimately"], ["proof (chain)\npicking this:\n  [p = 3] (mod 4) \\<Longrightarrow> is_sum2sq_nat n\n  [p \\<noteq> 3] (mod 4) \\<Longrightarrow> is_sum2sq_nat n", "show ?thesis"], ["proof (prove)\nusing this:\n  [p = 3] (mod 4) \\<Longrightarrow> is_sum2sq_nat n\n  [p \\<noteq> 3] (mod 4) \\<Longrightarrow> is_sum2sq_nat n\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n", "by blast"], ["proof (state)\nthis:\n  is_sum2sq_nat n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_sum2sq_nat n\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem sum_of_two_squares:\n    \"is_sum2sq_nat n \\<longleftrightarrow> (\\<forall> k. prime (4*k+3) \\<longrightarrow> even (multiplicity (4*k+3) n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sum2sq_nat n =\n    (\\<forall>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n))", "using sots1[of n] sots2[of n]"], ["proof (prove)\nusing this:\n  is_sum2sq_nat n \\<Longrightarrow>\n  prime (4 * ?k + 3) \\<longrightarrow> even (multiplicity (4 * ?k + 3) n)\n  (\\<And>k.\n      prime (4 * k + 3) \\<longrightarrow>\n      even (multiplicity (4 * k + 3) n)) \\<Longrightarrow>\n  is_sum2sq_nat n\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n =\n    (\\<forall>k.\n        prime (4 * k + 3) \\<longrightarrow>\n        even (multiplicity (4 * k + 3) n))", "by blast"], ["", "private"], ["", "lemma k_mod_eq: \"(\\<forall>p::nat. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> P p) = (\\<forall>k. prime (4*k+3) \\<longrightarrow> P (4*k+3))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> P p) =\n    (\\<forall>k. prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>p.\n       prime p \\<and> [p = 3] (mod 4) \\<longrightarrow>\n       P p \\<Longrightarrow>\n    \\<forall>k. prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3)\n 2. \\<forall>k.\n       prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3) \\<Longrightarrow>\n    \\<forall>p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> P p", "assume a1: \"\\<forall>p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> P p\""], ["proof (state)\nthis:\n  \\<forall>p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> P p\n\ngoal (2 subgoals):\n 1. \\<forall>p.\n       prime p \\<and> [p = 3] (mod 4) \\<longrightarrow>\n       P p \\<Longrightarrow>\n    \\<forall>k. prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3)\n 2. \\<forall>k.\n       prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3) \\<Longrightarrow>\n    \\<forall>p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> P p", "{"], ["proof (state)\nthis:\n  \\<forall>p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> P p\n\ngoal (2 subgoals):\n 1. \\<forall>p.\n       prime p \\<and> [p = 3] (mod 4) \\<longrightarrow>\n       P p \\<Longrightarrow>\n    \\<forall>k. prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3)\n 2. \\<forall>k.\n       prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3) \\<Longrightarrow>\n    \\<forall>p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> P p", "fix k :: nat"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>p.\n       prime p \\<and> [p = 3] (mod 4) \\<longrightarrow>\n       P p \\<Longrightarrow>\n    \\<forall>k. prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3)\n 2. \\<forall>k.\n       prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3) \\<Longrightarrow>\n    \\<forall>p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> P p", "assume \"prime (4 * k + 3)\""], ["proof (state)\nthis:\n  prime (4 * k + 3)\n\ngoal (2 subgoals):\n 1. \\<forall>p.\n       prime p \\<and> [p = 3] (mod 4) \\<longrightarrow>\n       P p \\<Longrightarrow>\n    \\<forall>k. prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3)\n 2. \\<forall>k.\n       prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3) \\<Longrightarrow>\n    \\<forall>p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> P p", "moreover"], ["proof (state)\nthis:\n  prime (4 * k + 3)\n\ngoal (2 subgoals):\n 1. \\<forall>p.\n       prime p \\<and> [p = 3] (mod 4) \\<longrightarrow>\n       P p \\<Longrightarrow>\n    \\<forall>k. prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3)\n 2. \\<forall>k.\n       prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3) \\<Longrightarrow>\n    \\<forall>p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> P p", "hence \"[4*k+3 = 3] (mod 4)\""], ["proof (prove)\nusing this:\n  prime (4 * k + 3)\n\ngoal (1 subgoal):\n 1. [4 * k + 3 = 3] (mod 4)", "by (simp add: cong_add_rcancel_0_nat cong_mult_self_left)"], ["proof (state)\nthis:\n  [4 * k + 3 = 3] (mod 4)\n\ngoal (2 subgoals):\n 1. \\<forall>p.\n       prime p \\<and> [p = 3] (mod 4) \\<longrightarrow>\n       P p \\<Longrightarrow>\n    \\<forall>k. prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3)\n 2. \\<forall>k.\n       prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3) \\<Longrightarrow>\n    \\<forall>p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> P p", "ultimately"], ["proof (chain)\npicking this:\n  prime (4 * k + 3)\n  [4 * k + 3 = 3] (mod 4)", "have \"P (4 * k + 3)\""], ["proof (prove)\nusing this:\n  prime (4 * k + 3)\n  [4 * k + 3 = 3] (mod 4)\n\ngoal (1 subgoal):\n 1. P (4 * k + 3)", "using a1"], ["proof (prove)\nusing this:\n  prime (4 * k + 3)\n  [4 * k + 3 = 3] (mod 4)\n  \\<forall>p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> P p\n\ngoal (1 subgoal):\n 1. P (4 * k + 3)", "by blast"], ["proof (state)\nthis:\n  P (4 * k + 3)\n\ngoal (2 subgoals):\n 1. \\<forall>p.\n       prime p \\<and> [p = 3] (mod 4) \\<longrightarrow>\n       P p \\<Longrightarrow>\n    \\<forall>k. prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3)\n 2. \\<forall>k.\n       prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3) \\<Longrightarrow>\n    \\<forall>p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> P p", "}"], ["proof (state)\nthis:\n  prime (4 * ?k2 + 3) \\<Longrightarrow> P (4 * ?k2 + 3)\n\ngoal (2 subgoals):\n 1. \\<forall>p.\n       prime p \\<and> [p = 3] (mod 4) \\<longrightarrow>\n       P p \\<Longrightarrow>\n    \\<forall>k. prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3)\n 2. \\<forall>k.\n       prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3) \\<Longrightarrow>\n    \\<forall>p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> P p", "thus \"\\<forall>k. prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3)\""], ["proof (prove)\nusing this:\n  prime (4 * ?k2 + 3) \\<Longrightarrow> P (4 * ?k2 + 3)\n\ngoal (1 subgoal):\n 1. \\<forall>k. prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3)", "by blast"], ["proof (state)\nthis:\n  \\<forall>k. prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3)\n\ngoal (1 subgoal):\n 1. \\<forall>k.\n       prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3) \\<Longrightarrow>\n    \\<forall>p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> P p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>k.\n       prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3) \\<Longrightarrow>\n    \\<forall>p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> P p", "assume a1: \"\\<forall>k. prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3)\""], ["proof (state)\nthis:\n  \\<forall>k. prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3)\n\ngoal (1 subgoal):\n 1. \\<forall>k.\n       prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3) \\<Longrightarrow>\n    \\<forall>p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> P p", "{"], ["proof (state)\nthis:\n  \\<forall>k. prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3)\n\ngoal (1 subgoal):\n 1. \\<forall>k.\n       prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3) \\<Longrightarrow>\n    \\<forall>p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> P p", "fix p :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>k.\n       prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3) \\<Longrightarrow>\n    \\<forall>p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> P p", "assume \"prime p\" \"[p = 3] (mod 4)\""], ["proof (state)\nthis:\n  prime p\n  [p = 3] (mod 4)\n\ngoal (1 subgoal):\n 1. \\<forall>k.\n       prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3) \\<Longrightarrow>\n    \\<forall>p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> P p", "moreover"], ["proof (state)\nthis:\n  prime p\n  [p = 3] (mod 4)\n\ngoal (1 subgoal):\n 1. \\<forall>k.\n       prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3) \\<Longrightarrow>\n    \\<forall>p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> P p", "with aux_lemma"], ["proof (chain)\npicking this:\n  \\<lbrakk>[?a = ?b] (mod ?c); ?b < ?c\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k. ?a = ?c * k + ?b\n  prime p\n  [p = 3] (mod 4)", "obtain k where \"p = 4*k+3\""], ["proof (prove)\nusing this:\n  \\<lbrakk>[?a = ?b] (mod ?c); ?b < ?c\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k. ?a = ?c * k + ?b\n  prime p\n  [p = 3] (mod 4)\n\ngoal (1 subgoal):\n 1. (\\<And>k. p = 4 * k + 3 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  p = 4 * k + 3\n\ngoal (1 subgoal):\n 1. \\<forall>k.\n       prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3) \\<Longrightarrow>\n    \\<forall>p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> P p", "ultimately"], ["proof (chain)\npicking this:\n  prime p\n  [p = 3] (mod 4)\n  p = 4 * k + 3", "have \"P p\""], ["proof (prove)\nusing this:\n  prime p\n  [p = 3] (mod 4)\n  p = 4 * k + 3\n\ngoal (1 subgoal):\n 1. P p", "using a1"], ["proof (prove)\nusing this:\n  prime p\n  [p = 3] (mod 4)\n  p = 4 * k + 3\n  \\<forall>k. prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3)\n\ngoal (1 subgoal):\n 1. P p", "by blast"], ["proof (state)\nthis:\n  P p\n\ngoal (1 subgoal):\n 1. \\<forall>k.\n       prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3) \\<Longrightarrow>\n    \\<forall>p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> P p", "}"], ["proof (state)\nthis:\n  \\<lbrakk>prime ?p2; [?p2 = 3] (mod 4)\\<rbrakk> \\<Longrightarrow> P ?p2\n\ngoal (1 subgoal):\n 1. \\<forall>k.\n       prime (4 * k + 3) \\<longrightarrow> P (4 * k + 3) \\<Longrightarrow>\n    \\<forall>p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> P p", "thus \"\\<forall>p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> P p\""], ["proof (prove)\nusing this:\n  \\<lbrakk>prime ?p2; [?p2 = 3] (mod 4)\\<rbrakk> \\<Longrightarrow> P ?p2\n\ngoal (1 subgoal):\n 1. \\<forall>p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> P p", "by blast"], ["proof (state)\nthis:\n  \\<forall>p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> P p\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem sum_of_two_squares':\n    \"is_sum2sq_nat n \\<longleftrightarrow> (\\<forall> p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> even (multiplicity p n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sum2sq_nat n =\n    (\\<forall>p.\n        prime p \\<and> [p = 3] (mod 4) \\<longrightarrow>\n        even (multiplicity p n))", "using sum_of_two_squares k_mod_eq"], ["proof (prove)\nusing this:\n  is_sum2sq_nat ?n =\n  (\\<forall>k.\n      prime (4 * k + 3) \\<longrightarrow>\n      even (multiplicity (4 * k + 3) ?n))\n  (\\<forall>p. prime p \\<and> [p = 3] (mod 4) \\<longrightarrow> ?P p) =\n  (\\<forall>k. prime (4 * k + 3) \\<longrightarrow> ?P (4 * k + 3))\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat n =\n    (\\<forall>p.\n        prime p \\<and> [p = 3] (mod 4) \\<longrightarrow>\n        even (multiplicity p n))", "by presburger"], ["", "theorem sum_of_two_squares_prime: assumes \"prime p\"\n  shows \"is_sum2sq_nat p = [p\\<noteq>3] (mod 4)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sum2sq_nat p = [p \\<noteq> 3] (mod 4)", "proof (cases \"[p=3] (mod 4)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. [p = 3] (mod 4) \\<Longrightarrow>\n    is_sum2sq_nat p = [p \\<noteq> 3] (mod 4)\n 2. [p \\<noteq> 3] (mod 4) \\<Longrightarrow>\n    is_sum2sq_nat p = [p \\<noteq> 3] (mod 4)", "case True"], ["proof (state)\nthis:\n  [p = 3] (mod 4)\n\ngoal (2 subgoals):\n 1. [p = 3] (mod 4) \\<Longrightarrow>\n    is_sum2sq_nat p = [p \\<noteq> 3] (mod 4)\n 2. [p \\<noteq> 3] (mod 4) \\<Longrightarrow>\n    is_sum2sq_nat p = [p \\<noteq> 3] (mod 4)", "have \"odd (multiplicity p p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. odd (multiplicity p p)", "using assms"], ["proof (prove)\nusing this:\n  prime p\n\ngoal (1 subgoal):\n 1. odd (multiplicity p p)", "by simp"], ["proof (state)\nthis:\n  odd (multiplicity p p)\n\ngoal (2 subgoals):\n 1. [p = 3] (mod 4) \\<Longrightarrow>\n    is_sum2sq_nat p = [p \\<noteq> 3] (mod 4)\n 2. [p \\<noteq> 3] (mod 4) \\<Longrightarrow>\n    is_sum2sq_nat p = [p \\<noteq> 3] (mod 4)", "hence \"\\<not> (is_sum2sq_nat p)\""], ["proof (prove)\nusing this:\n  odd (multiplicity p p)\n\ngoal (1 subgoal):\n 1. \\<not> is_sum2sq_nat p", "using assms True sum_of_two_squares'"], ["proof (prove)\nusing this:\n  odd (multiplicity p p)\n  prime p\n  [p = 3] (mod 4)\n  is_sum2sq_nat ?n =\n  (\\<forall>p.\n      prime p \\<and> [p = 3] (mod 4) \\<longrightarrow>\n      even (multiplicity p ?n))\n\ngoal (1 subgoal):\n 1. \\<not> is_sum2sq_nat p", "by blast"], ["proof (state)\nthis:\n  \\<not> is_sum2sq_nat p\n\ngoal (2 subgoals):\n 1. [p = 3] (mod 4) \\<Longrightarrow>\n    is_sum2sq_nat p = [p \\<noteq> 3] (mod 4)\n 2. [p \\<noteq> 3] (mod 4) \\<Longrightarrow>\n    is_sum2sq_nat p = [p \\<noteq> 3] (mod 4)", "with True"], ["proof (chain)\npicking this:\n  [p = 3] (mod 4)\n  \\<not> is_sum2sq_nat p", "show ?thesis"], ["proof (prove)\nusing this:\n  [p = 3] (mod 4)\n  \\<not> is_sum2sq_nat p\n\ngoal (1 subgoal):\n 1. is_sum2sq_nat p = [p \\<noteq> 3] (mod 4)", "by simp"], ["proof (state)\nthis:\n  is_sum2sq_nat p = [p \\<noteq> 3] (mod 4)\n\ngoal (1 subgoal):\n 1. [p \\<noteq> 3] (mod 4) \\<Longrightarrow>\n    is_sum2sq_nat p = [p \\<noteq> 3] (mod 4)", "qed (simp add: fermat_two_squares assms)"], ["", "end"], ["", "end"]]}