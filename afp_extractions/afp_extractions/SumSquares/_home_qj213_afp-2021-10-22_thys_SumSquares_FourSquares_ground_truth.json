{"file_name": "/home/qj213/afp-2021-10-22/thys/SumSquares/FourSquares.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/SumSquares", "problem_names": ["lemma best_division_abs: \"(n::int) > 0 \\<Longrightarrow> \\<exists> k. 2 * \\<bar>a - k*n\\<bar> \\<le> n\"", "lemma mult_sum4sq_int: \"sum4sq_int(a,b,c,d) * sum4sq_int(p,q,r,s) =\n  sum4sq_int(a*p+b*q+c*r+d*s, a*q-b*p-c*s+d*r,\n         a*r+b*s-c*p-d*q, a*s-b*r+c*q-d*p)\"", "lemma sum4sq_int_nat_eq: \"sum4sq_nat a b c d = sum4sq_int (a, b, c, d)\"", "lemma is_sum4sq_int_nat_eq: \"is_sum4sq_nat n = is_sum4sq_int (int n)\"", "lemma is_mult_sum4sq_int: \"is_sum4sq_int x \\<Longrightarrow> is_sum4sq_int y \\<Longrightarrow> is_sum4sq_int (x*y)\"", "lemma is_mult_sum4sq_nat: \"is_sum4sq_nat x \\<Longrightarrow> is_sum4sq_nat y \\<Longrightarrow> is_sum4sq_nat (x*y)\"", "lemma mult_oddprime_is_sum4sq: \"\\<lbrakk> prime (nat p); odd p \\<rbrakk> \\<Longrightarrow>\n  \\<exists> t. 0<t \\<and> t<p \\<and> is_sum4sq_int (p*t)\"", "lemma zprime_is_sum4sq: \"prime (nat p) \\<Longrightarrow> is_sum4sq_int p\"", "lemma prime_is_sum4sq: \"prime p \\<Longrightarrow> is_sum4sq_nat p\"", "theorem sum_of_four_squares: \"is_sum4sq_nat n\""], "translations": [["", "lemma best_division_abs: \"(n::int) > 0 \\<Longrightarrow> \\<exists> k. 2 * \\<bar>a - k*n\\<bar> \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "assume a: \"n > 0\""], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "define k where \"k = a div n\""], ["proof (state)\nthis:\n  k = a div n\n\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "have h: \"a - k * n = a mod n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a - k * n = a mod n", "by (simp add: div_mult_mod_eq algebra_simps k_def)"], ["proof (state)\nthis:\n  a - k * n = a mod n\n\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "thus ?thesis"], ["proof (prove)\nusing this:\n  a - k * n = a mod n\n\ngoal (1 subgoal):\n 1. \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "proof (cases \"2 * (a mod n) \\<le> n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>a - k * n = a mod n; 2 * (a mod n) \\<le> n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n\n 2. \\<lbrakk>a - k * n = a mod n; \\<not> 2 * (a mod n) \\<le> n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "case True"], ["proof (state)\nthis:\n  2 * (a mod n) \\<le> n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a - k * n = a mod n; 2 * (a mod n) \\<le> n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n\n 2. \\<lbrakk>a - k * n = a mod n; \\<not> 2 * (a mod n) \\<le> n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "hence \"2 * \\<bar>a - k*n\\<bar> \\<le> n\""], ["proof (prove)\nusing this:\n  2 * (a mod n) \\<le> n\n\ngoal (1 subgoal):\n 1. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "using h pos_mod_sign a"], ["proof (prove)\nusing this:\n  2 * (a mod n) \\<le> n\n  a - k * n = a mod n\n  (0::?'a) < ?b \\<Longrightarrow> (0::?'a) \\<le> ?a mod ?b\n  0 < n\n\ngoal (1 subgoal):\n 1. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "by auto"], ["proof (state)\nthis:\n  2 * \\<bar>a - k * n\\<bar> \\<le> n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a - k * n = a mod n; 2 * (a mod n) \\<le> n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n\n 2. \\<lbrakk>a - k * n = a mod n; \\<not> 2 * (a mod n) \\<le> n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "thus ?thesis"], ["proof (prove)\nusing this:\n  2 * \\<bar>a - k * n\\<bar> \\<le> n\n\ngoal (1 subgoal):\n 1. \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "by blast"], ["proof (state)\nthis:\n  \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a - k * n = a mod n; \\<not> 2 * (a mod n) \\<le> n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>a - k * n = a mod n; \\<not> 2 * (a mod n) \\<le> n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "case False"], ["proof (state)\nthis:\n  \\<not> 2 * (a mod n) \\<le> n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a - k * n = a mod n; \\<not> 2 * (a mod n) \\<le> n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "hence \"2 * (n - a mod n) \\<le> n\""], ["proof (prove)\nusing this:\n  \\<not> 2 * (a mod n) \\<le> n\n\ngoal (1 subgoal):\n 1. 2 * (n - a mod n) \\<le> n", "by auto"], ["proof (state)\nthis:\n  2 * (n - a mod n) \\<le> n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a - k * n = a mod n; \\<not> 2 * (a mod n) \\<le> n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "have \"a - (k+1)*n = a mod n - n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a - (k + 1) * n = a mod n - n", "using h"], ["proof (prove)\nusing this:\n  a - k * n = a mod n\n\ngoal (1 subgoal):\n 1. a - (k + 1) * n = a mod n - n", "by (simp add: algebra_simps)"], ["proof (state)\nthis:\n  a - (k + 1) * n = a mod n - n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a - k * n = a mod n; \\<not> 2 * (a mod n) \\<le> n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "hence \"2 * \\<bar>a - (k+1)*n\\<bar> \\<le> n\""], ["proof (prove)\nusing this:\n  a - (k + 1) * n = a mod n - n\n\ngoal (1 subgoal):\n 1. 2 * \\<bar>a - (k + 1) * n\\<bar> \\<le> n", "using h pos_mod_bound[of n a] a False"], ["proof (prove)\nusing this:\n  a - (k + 1) * n = a mod n - n\n  a - k * n = a mod n\n  0 < n \\<Longrightarrow> a mod n < n\n  0 < n\n  \\<not> 2 * (a mod n) \\<le> n\n\ngoal (1 subgoal):\n 1. 2 * \\<bar>a - (k + 1) * n\\<bar> \\<le> n", "by fastforce"], ["proof (state)\nthis:\n  2 * \\<bar>a - (k + 1) * n\\<bar> \\<le> n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a - k * n = a mod n; \\<not> 2 * (a mod n) \\<le> n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "thus ?thesis"], ["proof (prove)\nusing this:\n  2 * \\<bar>a - (k + 1) * n\\<bar> \\<le> n\n\ngoal (1 subgoal):\n 1. \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n", "by blast"], ["proof (state)\nthis:\n  \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k. 2 * \\<bar>a - k * n\\<bar> \\<le> n\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Shows that all nonnegative integers can be written as the sum of four squares. The proof consists of the following steps:\n\\begin{itemize}\\item For every prime $p=2n+1$ the two sets of residue classes $$\\{x^2 \\bmod p\\mid 0\\le x\\le n\\} ~{\\rm and}~ \\{-1-y^2 \\bmod p \\mid 0 \\le y \\le n\\}$$ both contain $n+1$ different elements and therefore they must have at least one element in common.\n\\item Hence there exist $x,y$ such that $x^2+y^2+1^2+0^2$ is a multiple of $p$.\n\\item The next step is to show, by an infinite descent, that $p$ itself can be written as the sum of four squares.\n\\item Finally, using the multiplicity of this form, the same holds for all positive numbers.\n\\end{itemize}\\<close>"], ["", "private"], ["", "definition\n  sum4sq_int :: \"int \\<times> int \\<times> int \\<times> int \\<Rightarrow> int\" where\n  \"sum4sq_int = (\\<lambda>(a,b,c,d). a^2+b^2+c^2+d^2)\""], ["", "private"], ["", "definition\n  is_sum4sq_int :: \"int \\<Rightarrow> bool\" where\n  \"is_sum4sq_int n \\<longleftrightarrow> (\\<exists> a b c d. n = sum4sq_int(a,b,c,d))\""], ["", "private"], ["", "lemma mult_sum4sq_int: \"sum4sq_int(a,b,c,d) * sum4sq_int(p,q,r,s) =\n  sum4sq_int(a*p+b*q+c*r+d*s, a*q-b*p-c*s+d*r,\n         a*r+b*s-c*p-d*q, a*s-b*r+c*q-d*p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum4sq_int (a, b, c, d) * sum4sq_int (p, q, r, s) =\n    sum4sq_int\n     (a * p + b * q + c * r + d * s, a * q - b * p - c * s + d * r,\n      a * r + b * s - c * p - d * q, a * s - b * r + c * q - d * p)", "by (unfold sum4sq_int_def, simp add: eval_nat_numeral field_simps)"], ["", "private"], ["", "lemma sum4sq_int_nat_eq: \"sum4sq_nat a b c d = sum4sq_int (a, b, c, d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int (sum4sq_nat a b c d) = sum4sq_int (int a, int b, int c, int d)", "unfolding sum4sq_nat_def sum4sq_int_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. int (a\\<^sup>2 + b\\<^sup>2 + c\\<^sup>2 + d\\<^sup>2) =\n    (case (int a, int b, int c, int d) of\n     (a, b, c, d) \\<Rightarrow>\n       a\\<^sup>2 + b\\<^sup>2 + c\\<^sup>2 + d\\<^sup>2)", "by simp"], ["", "private"], ["", "lemma is_sum4sq_int_nat_eq: \"is_sum4sq_nat n = is_sum4sq_int (int n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sum4sq_nat n = is_sum4sq_int (int n)", "unfolding is_sum4sq_nat_def is_sum4sq_int_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>a b c d. n = sum4sq_nat a b c d) =\n    (\\<exists>a b c d. int n = sum4sq_int (a, b, c, d))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>a b c d. n = sum4sq_nat a b c d \\<Longrightarrow>\n    \\<exists>a b c d. int n = sum4sq_int (a, b, c, d)\n 2. \\<exists>a b c d. int n = sum4sq_int (a, b, c, d) \\<Longrightarrow>\n    \\<exists>a b c d. n = sum4sq_nat a b c d", "assume \"\\<exists>a b c d. n = sum4sq_nat a b c d\""], ["proof (state)\nthis:\n  \\<exists>a b c d. n = sum4sq_nat a b c d\n\ngoal (2 subgoals):\n 1. \\<exists>a b c d. n = sum4sq_nat a b c d \\<Longrightarrow>\n    \\<exists>a b c d. int n = sum4sq_int (a, b, c, d)\n 2. \\<exists>a b c d. int n = sum4sq_int (a, b, c, d) \\<Longrightarrow>\n    \\<exists>a b c d. n = sum4sq_nat a b c d", "thus \"\\<exists>a b c d. int n = sum4sq_int (a, b, c, d)\""], ["proof (prove)\nusing this:\n  \\<exists>a b c d. n = sum4sq_nat a b c d\n\ngoal (1 subgoal):\n 1. \\<exists>a b c d. int n = sum4sq_int (a, b, c, d)", "using sum4sq_int_nat_eq"], ["proof (prove)\nusing this:\n  \\<exists>a b c d. n = sum4sq_nat a b c d\n  int (sum4sq_nat ?a ?b ?c ?d) = sum4sq_int (int ?a, int ?b, int ?c, int ?d)\n\ngoal (1 subgoal):\n 1. \\<exists>a b c d. int n = sum4sq_int (a, b, c, d)", "by force"], ["proof (state)\nthis:\n  \\<exists>a b c d. int n = sum4sq_int (a, b, c, d)\n\ngoal (1 subgoal):\n 1. \\<exists>a b c d. int n = sum4sq_int (a, b, c, d) \\<Longrightarrow>\n    \\<exists>a b c d. n = sum4sq_nat a b c d", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a b c d. int n = sum4sq_int (a, b, c, d) \\<Longrightarrow>\n    \\<exists>a b c d. n = sum4sq_nat a b c d", "assume \"\\<exists>a b c d. int n = sum4sq_int (a, b, c, d)\""], ["proof (state)\nthis:\n  \\<exists>a b c d. int n = sum4sq_int (a, b, c, d)\n\ngoal (1 subgoal):\n 1. \\<exists>a b c d. int n = sum4sq_int (a, b, c, d) \\<Longrightarrow>\n    \\<exists>a b c d. n = sum4sq_nat a b c d", "then"], ["proof (chain)\npicking this:\n  \\<exists>a b c d. int n = sum4sq_int (a, b, c, d)", "obtain a b c d where \"int n = sum4sq_int (a, b, c, d)\""], ["proof (prove)\nusing this:\n  \\<exists>a b c d. int n = sum4sq_int (a, b, c, d)\n\ngoal (1 subgoal):\n 1. (\\<And>a b c d.\n        int n = sum4sq_int (a, b, c, d) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  int n = sum4sq_int (a, b, c, d)\n\ngoal (1 subgoal):\n 1. \\<exists>a b c d. int n = sum4sq_int (a, b, c, d) \\<Longrightarrow>\n    \\<exists>a b c d. n = sum4sq_nat a b c d", "hence \"int n = sum4sq_int (int (nat \\<bar>a\\<bar>), int (nat \\<bar>b\\<bar>), int (nat \\<bar>c\\<bar>), int (nat \\<bar>d\\<bar>))\""], ["proof (prove)\nusing this:\n  int n = sum4sq_int (a, b, c, d)\n\ngoal (1 subgoal):\n 1. int n =\n    sum4sq_int\n     (int (nat \\<bar>a\\<bar>), int (nat \\<bar>b\\<bar>),\n      int (nat \\<bar>c\\<bar>), int (nat \\<bar>d\\<bar>))", "unfolding sum4sq_int_def"], ["proof (prove)\nusing this:\n  int n =\n  (case (a, b, c, d) of\n   (a, b, c, d) \\<Rightarrow> a\\<^sup>2 + b\\<^sup>2 + c\\<^sup>2 + d\\<^sup>2)\n\ngoal (1 subgoal):\n 1. int n =\n    (case (int (nat \\<bar>a\\<bar>), int (nat \\<bar>b\\<bar>),\n           int (nat \\<bar>c\\<bar>), int (nat \\<bar>d\\<bar>)) of\n     (a, b, c, d) \\<Rightarrow>\n       a\\<^sup>2 + b\\<^sup>2 + c\\<^sup>2 + d\\<^sup>2)", "by simp"], ["proof (state)\nthis:\n  int n =\n  sum4sq_int\n   (int (nat \\<bar>a\\<bar>), int (nat \\<bar>b\\<bar>),\n    int (nat \\<bar>c\\<bar>), int (nat \\<bar>d\\<bar>))\n\ngoal (1 subgoal):\n 1. \\<exists>a b c d. int n = sum4sq_int (a, b, c, d) \\<Longrightarrow>\n    \\<exists>a b c d. n = sum4sq_nat a b c d", "hence \"int n = int (sum4sq_nat (nat \\<bar>a\\<bar>) (nat \\<bar>b\\<bar>) (nat \\<bar>c\\<bar>) (nat \\<bar>d\\<bar>))\""], ["proof (prove)\nusing this:\n  int n =\n  sum4sq_int\n   (int (nat \\<bar>a\\<bar>), int (nat \\<bar>b\\<bar>),\n    int (nat \\<bar>c\\<bar>), int (nat \\<bar>d\\<bar>))\n\ngoal (1 subgoal):\n 1. int n =\n    int (sum4sq_nat (nat \\<bar>a\\<bar>) (nat \\<bar>b\\<bar>)\n          (nat \\<bar>c\\<bar>) (nat \\<bar>d\\<bar>))", "using sum4sq_int_nat_eq"], ["proof (prove)\nusing this:\n  int n =\n  sum4sq_int\n   (int (nat \\<bar>a\\<bar>), int (nat \\<bar>b\\<bar>),\n    int (nat \\<bar>c\\<bar>), int (nat \\<bar>d\\<bar>))\n  int (sum4sq_nat ?a ?b ?c ?d) = sum4sq_int (int ?a, int ?b, int ?c, int ?d)\n\ngoal (1 subgoal):\n 1. int n =\n    int (sum4sq_nat (nat \\<bar>a\\<bar>) (nat \\<bar>b\\<bar>)\n          (nat \\<bar>c\\<bar>) (nat \\<bar>d\\<bar>))", "by presburger"], ["proof (state)\nthis:\n  int n =\n  int (sum4sq_nat (nat \\<bar>a\\<bar>) (nat \\<bar>b\\<bar>)\n        (nat \\<bar>c\\<bar>) (nat \\<bar>d\\<bar>))\n\ngoal (1 subgoal):\n 1. \\<exists>a b c d. int n = sum4sq_int (a, b, c, d) \\<Longrightarrow>\n    \\<exists>a b c d. n = sum4sq_nat a b c d", "thus \"\\<exists>a b c d. n = sum4sq_nat a b c d\""], ["proof (prove)\nusing this:\n  int n =\n  int (sum4sq_nat (nat \\<bar>a\\<bar>) (nat \\<bar>b\\<bar>)\n        (nat \\<bar>c\\<bar>) (nat \\<bar>d\\<bar>))\n\ngoal (1 subgoal):\n 1. \\<exists>a b c d. n = sum4sq_nat a b c d", "by auto"], ["proof (state)\nthis:\n  \\<exists>a b c d. n = sum4sq_nat a b c d\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma is_mult_sum4sq_int: \"is_sum4sq_int x \\<Longrightarrow> is_sum4sq_int y \\<Longrightarrow> is_sum4sq_int (x*y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_sum4sq_int x; is_sum4sq_int y\\<rbrakk>\n    \\<Longrightarrow> is_sum4sq_int (x * y)", "by (unfold is_sum4sq_int_def, auto simp only: mult_sum4sq_int, blast)"], ["", "private"], ["", "lemma is_mult_sum4sq_nat: \"is_sum4sq_nat x \\<Longrightarrow> is_sum4sq_nat y \\<Longrightarrow> is_sum4sq_nat (x*y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_sum4sq_nat x; is_sum4sq_nat y\\<rbrakk>\n    \\<Longrightarrow> is_sum4sq_nat (x * y)", "using is_mult_sum4sq_int is_sum4sq_int_nat_eq"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_sum4sq_int ?x; is_sum4sq_int ?y\\<rbrakk>\n  \\<Longrightarrow> is_sum4sq_int (?x * ?y)\n  is_sum4sq_nat ?n = is_sum4sq_int (int ?n)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_sum4sq_nat x; is_sum4sq_nat y\\<rbrakk>\n    \\<Longrightarrow> is_sum4sq_nat (x * y)", "by simp"], ["", "private"], ["", "lemma mult_oddprime_is_sum4sq: \"\\<lbrakk> prime (nat p); odd p \\<rbrakk> \\<Longrightarrow>\n  \\<exists> t. 0<t \\<and> t<p \\<and> is_sum4sq_int (p*t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "assume p1: \"prime (nat p)\""], ["proof (state)\nthis:\n  prime (nat p)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "then"], ["proof (chain)\npicking this:\n  prime (nat p)", "have p0: \"p > 1\" and \"prime p\""], ["proof (prove)\nusing this:\n  prime (nat p)\n\ngoal (1 subgoal):\n 1. 1 < p &&& prime p", "by (simp_all add: prime_int_nat_transfer prime_nat_iff)"], ["proof (state)\nthis:\n  1 < p\n  prime p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "assume p2: \"odd p\""], ["proof (state)\nthis:\n  odd p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "then"], ["proof (chain)\npicking this:\n  odd p", "obtain n where n: \"p = 2*n+1\""], ["proof (prove)\nusing this:\n  odd p\n\ngoal (1 subgoal):\n 1. (\\<And>n. p = 2 * n + 1 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using oddE"], ["proof (prove)\nusing this:\n  odd p\n  \\<lbrakk>odd ?a;\n   \\<And>b. ?a = (2::?'a) * b + (1::?'a) \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>n. p = 2 * n + 1 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  p = 2 * n + 1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "with p1"], ["proof (chain)\npicking this:\n  prime (nat p)\n  p = 2 * n + 1", "have n0: \"n > 0\""], ["proof (prove)\nusing this:\n  prime (nat p)\n  p = 2 * n + 1\n\ngoal (1 subgoal):\n 1. 0 < n", "by (auto simp add: prime_nat_iff)"], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "let ?C = \"{0 ..< p}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "let ?D = \"{0 .. n}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "let ?f = \"%x. x^2 mod p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "let ?g = \"%x. (-1-x^2) mod p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "let ?A = \"?f ` ?D\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "let ?B = \"?g ` ?D\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "have finC: \"finite ?C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {0..<p}", "by simp"], ["proof (state)\nthis:\n  finite {0..<p}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "have finD: \"finite ?D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {0..n}", "by simp"], ["proof (state)\nthis:\n  finite {0..n}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "from p0"], ["proof (chain)\npicking this:\n  1 < p", "have AsubC: \"?A \\<subseteq> ?C\" and BsubC: \"?B \\<subseteq> ?C\""], ["proof (prove)\nusing this:\n  1 < p\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<subseteq> {0..<p} &&&\n    (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n} \\<subseteq> {0..<p}", "by (auto simp add: pos_mod_conj)"], ["proof (state)\nthis:\n  (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<subseteq> {0..<p}\n  (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n} \\<subseteq> {0..<p}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "with finC"], ["proof (chain)\npicking this:\n  finite {0..<p}\n  (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<subseteq> {0..<p}\n  (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n} \\<subseteq> {0..<p}", "have finA: \"finite ?A\" and finB: \"finite ?B\""], ["proof (prove)\nusing this:\n  finite {0..<p}\n  (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<subseteq> {0..<p}\n  (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n} \\<subseteq> {0..<p}\n\ngoal (1 subgoal):\n 1. finite ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n}) &&&\n    finite ((\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n})", "by (auto simp add: finite_subset)"], ["proof (state)\nthis:\n  finite ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n})\n  finite ((\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "from AsubC BsubC"], ["proof (chain)\npicking this:\n  (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<subseteq> {0..<p}\n  (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n} \\<subseteq> {0..<p}", "have AunBsubC: \"?A \\<union> ?B \\<subseteq> ?C\""], ["proof (prove)\nusing this:\n  (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<subseteq> {0..<p}\n  (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n} \\<subseteq> {0..<p}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<union>\n    (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n}\n    \\<subseteq> {0..<p}", "by (rule Un_least)"], ["proof (state)\nthis:\n  (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<union>\n  (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n}\n  \\<subseteq> {0..<p}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "from p0"], ["proof (chain)\npicking this:\n  1 < p", "have cardC: \"card ?C = nat p\""], ["proof (prove)\nusing this:\n  1 < p\n\ngoal (1 subgoal):\n 1. card {0..<p} = nat p", "using card_atLeastZeroLessThan_int"], ["proof (prove)\nusing this:\n  1 < p\n  card {0..<?u} = nat ?u\n\ngoal (1 subgoal):\n 1. card {0..<p} = nat p", "by blast"], ["proof (state)\nthis:\n  card {0..<p} = nat p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "from n0"], ["proof (chain)\npicking this:\n  0 < n", "have cardD: \"card ?D = 1+ nat n\""], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. card {0..n} = 1 + nat n", "by simp"], ["proof (state)\nthis:\n  card {0..n} = 1 + nat n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "have cardA: \"card ?A = card ?D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n}) = card {0..n}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n}) = card {0..n}", "have \"inj_on ?f ?D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>x. x\\<^sup>2 mod p) {0..n}", "proof (unfold inj_on_def, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x\\<^sup>2 mod p = y\\<^sup>2 mod p; 0 \\<le> x; x \\<le> n;\n        0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x\\<^sup>2 mod p = y\\<^sup>2 mod p; 0 \\<le> x; x \\<le> n;\n        0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x\\<^sup>2 mod p = y\\<^sup>2 mod p; 0 \\<le> x; x \\<le> n;\n        0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume x0: \"0 \\<le> x\" and xn: \"x \\<le> n\" and y0: \"0 \\<le> y\" and yn: \" y \\<le> n\"\n        and xyp: \"x^2 mod p = y^2 mod p\""], ["proof (state)\nthis:\n  0 \\<le> x\n  x \\<le> n\n  0 \\<le> y\n  y \\<le> n\n  x\\<^sup>2 mod p = y\\<^sup>2 mod p\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x\\<^sup>2 mod p = y\\<^sup>2 mod p; 0 \\<le> x; x \\<le> n;\n        0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "with p0"], ["proof (chain)\npicking this:\n  1 < p\n  0 \\<le> x\n  x \\<le> n\n  0 \\<le> y\n  y \\<le> n\n  x\\<^sup>2 mod p = y\\<^sup>2 mod p", "have \"[x^2 = y^2] (mod p)\""], ["proof (prove)\nusing this:\n  1 < p\n  0 \\<le> x\n  x \\<le> n\n  0 \\<le> y\n  y \\<le> n\n  x\\<^sup>2 mod p = y\\<^sup>2 mod p\n\ngoal (1 subgoal):\n 1. [x\\<^sup>2 = y\\<^sup>2] (mod p)", "using cong_def"], ["proof (prove)\nusing this:\n  1 < p\n  0 \\<le> x\n  x \\<le> n\n  0 \\<le> y\n  y \\<le> n\n  x\\<^sup>2 mod p = y\\<^sup>2 mod p\n  [?b = ?c] (mod ?a) = (?b mod ?a = ?c mod ?a)\n\ngoal (1 subgoal):\n 1. [x\\<^sup>2 = y\\<^sup>2] (mod p)", "by blast"], ["proof (state)\nthis:\n  [x\\<^sup>2 = y\\<^sup>2] (mod p)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x\\<^sup>2 mod p = y\\<^sup>2 mod p; 0 \\<le> x; x \\<le> n;\n        0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "hence \"p dvd x^2-y^2\""], ["proof (prove)\nusing this:\n  [x\\<^sup>2 = y\\<^sup>2] (mod p)\n\ngoal (1 subgoal):\n 1. p dvd x\\<^sup>2 - y\\<^sup>2", "using cong_iff_dvd_diff"], ["proof (prove)\nusing this:\n  [x\\<^sup>2 = y\\<^sup>2] (mod p)\n  [?a = ?b] (mod ?m) = (?m dvd ?a - ?b)\n\ngoal (1 subgoal):\n 1. p dvd x\\<^sup>2 - y\\<^sup>2", "by blast"], ["proof (state)\nthis:\n  p dvd x\\<^sup>2 - y\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x\\<^sup>2 mod p = y\\<^sup>2 mod p; 0 \\<le> x; x \\<le> n;\n        0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "hence \"p dvd (x+y)*(x-y)\""], ["proof (prove)\nusing this:\n  p dvd x\\<^sup>2 - y\\<^sup>2\n\ngoal (1 subgoal):\n 1. p dvd (x + y) * (x - y)", "by (simp add: power2_eq_square algebra_simps)"], ["proof (state)\nthis:\n  p dvd (x + y) * (x - y)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x\\<^sup>2 mod p = y\\<^sup>2 mod p; 0 \\<le> x; x \\<le> n;\n        0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "hence \"p dvd x+y \\<or> p dvd x-y\""], ["proof (prove)\nusing this:\n  p dvd (x + y) * (x - y)\n\ngoal (1 subgoal):\n 1. p dvd x + y \\<or> p dvd x - y", "using \\<open>prime p\\<close> p0"], ["proof (prove)\nusing this:\n  p dvd (x + y) * (x - y)\n  prime p\n  1 < p\n\ngoal (1 subgoal):\n 1. p dvd x + y \\<or> p dvd x - y", "by (auto dest: prime_dvd_multD)"], ["proof (state)\nthis:\n  p dvd x + y \\<or> p dvd x - y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x\\<^sup>2 mod p = y\\<^sup>2 mod p; 0 \\<le> x; x \\<le> n;\n        0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "moreover"], ["proof (state)\nthis:\n  p dvd x + y \\<or> p dvd x - y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x\\<^sup>2 mod p = y\\<^sup>2 mod p; 0 \\<le> x; x \\<le> n;\n        0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "{"], ["proof (state)\nthis:\n  p dvd x + y \\<or> p dvd x - y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x\\<^sup>2 mod p = y\\<^sup>2 mod p; 0 \\<le> x; x \\<le> n;\n        0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume \"p dvd x+y\""], ["proof (state)\nthis:\n  p dvd x + y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x\\<^sup>2 mod p = y\\<^sup>2 mod p; 0 \\<le> x; x \\<le> n;\n        0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "moreover"], ["proof (state)\nthis:\n  p dvd x + y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x\\<^sup>2 mod p = y\\<^sup>2 mod p; 0 \\<le> x; x \\<le> n;\n        0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "from xn yn n"], ["proof (chain)\npicking this:\n  x \\<le> n\n  y \\<le> n\n  p = 2 * n + 1", "have \"x+y < p\""], ["proof (prove)\nusing this:\n  x \\<le> n\n  y \\<le> n\n  p = 2 * n + 1\n\ngoal (1 subgoal):\n 1. x + y < p", "by auto"], ["proof (state)\nthis:\n  x + y < p\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x\\<^sup>2 mod p = y\\<^sup>2 mod p; 0 \\<le> x; x \\<le> n;\n        0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "ultimately"], ["proof (chain)\npicking this:\n  p dvd x + y\n  x + y < p", "have \"\\<not> x+y > 0\""], ["proof (prove)\nusing this:\n  p dvd x + y\n  x + y < p\n\ngoal (1 subgoal):\n 1. \\<not> 0 < x + y", "by (auto simp add: zdvd_not_zless)"], ["proof (state)\nthis:\n  \\<not> 0 < x + y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x\\<^sup>2 mod p = y\\<^sup>2 mod p; 0 \\<le> x; x \\<le> n;\n        0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "with x0 y0"], ["proof (chain)\npicking this:\n  0 \\<le> x\n  0 \\<le> y\n  \\<not> 0 < x + y", "have \"x = y\""], ["proof (prove)\nusing this:\n  0 \\<le> x\n  0 \\<le> y\n  \\<not> 0 < x + y\n\ngoal (1 subgoal):\n 1. x = y", "by auto"], ["proof (state)\nthis:\n  x = y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x\\<^sup>2 mod p = y\\<^sup>2 mod p; 0 \\<le> x; x \\<le> n;\n        0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "} \\<comment> \\<open>both are zero\\<close>"], ["proof (state)\nthis:\n  p dvd x + y \\<Longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x\\<^sup>2 mod p = y\\<^sup>2 mod p; 0 \\<le> x; x \\<le> n;\n        0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "moreover"], ["proof (state)\nthis:\n  p dvd x + y \\<Longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x\\<^sup>2 mod p = y\\<^sup>2 mod p; 0 \\<le> x; x \\<le> n;\n        0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "{"], ["proof (state)\nthis:\n  p dvd x + y \\<Longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x\\<^sup>2 mod p = y\\<^sup>2 mod p; 0 \\<le> x; x \\<le> n;\n        0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume ass: \"p dvd x-y\""], ["proof (state)\nthis:\n  p dvd x - y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x\\<^sup>2 mod p = y\\<^sup>2 mod p; 0 \\<le> x; x \\<le> n;\n        0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "have \"x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y", "proof (rule ccontr, case_tac \"x-y \\<ge> 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<noteq> y; 0 \\<le> x - y\\<rbrakk> \\<Longrightarrow> False\n 2. \\<lbrakk>x \\<noteq> y; \\<not> 0 \\<le> x - y\\<rbrakk>\n    \\<Longrightarrow> False", "assume \"x-y \\<ge> 0\" and \"x \\<noteq> y\""], ["proof (state)\nthis:\n  0 \\<le> x - y\n  x \\<noteq> y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<noteq> y; 0 \\<le> x - y\\<rbrakk> \\<Longrightarrow> False\n 2. \\<lbrakk>x \\<noteq> y; \\<not> 0 \\<le> x - y\\<rbrakk>\n    \\<Longrightarrow> False", "hence \"x-y > 0\""], ["proof (prove)\nusing this:\n  0 \\<le> x - y\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. 0 < x - y", "by auto"], ["proof (state)\nthis:\n  0 < x - y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<noteq> y; 0 \\<le> x - y\\<rbrakk> \\<Longrightarrow> False\n 2. \\<lbrakk>x \\<noteq> y; \\<not> 0 \\<le> x - y\\<rbrakk>\n    \\<Longrightarrow> False", "with ass"], ["proof (chain)\npicking this:\n  p dvd x - y\n  0 < x - y", "have \"\\<not> x-y < p\""], ["proof (prove)\nusing this:\n  p dvd x - y\n  0 < x - y\n\ngoal (1 subgoal):\n 1. \\<not> x - y < p", "by (auto simp add: zdvd_not_zless)"], ["proof (state)\nthis:\n  \\<not> x - y < p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<noteq> y; 0 \\<le> x - y\\<rbrakk> \\<Longrightarrow> False\n 2. \\<lbrakk>x \\<noteq> y; \\<not> 0 \\<le> x - y\\<rbrakk>\n    \\<Longrightarrow> False", "with xn y0 n p0"], ["proof (chain)\npicking this:\n  x \\<le> n\n  0 \\<le> y\n  p = 2 * n + 1\n  1 < p\n  \\<not> x - y < p", "show \"False\""], ["proof (prove)\nusing this:\n  x \\<le> n\n  0 \\<le> y\n  p = 2 * n + 1\n  1 < p\n  \\<not> x - y < p\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> y; \\<not> 0 \\<le> x - y\\<rbrakk>\n    \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> y; \\<not> 0 \\<le> x - y\\<rbrakk>\n    \\<Longrightarrow> False", "assume \"\\<not> 0 \\<le> x-y\""], ["proof (state)\nthis:\n  \\<not> 0 \\<le> x - y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> y; \\<not> 0 \\<le> x - y\\<rbrakk>\n    \\<Longrightarrow> False", "hence \"y-x > 0\""], ["proof (prove)\nusing this:\n  \\<not> 0 \\<le> x - y\n\ngoal (1 subgoal):\n 1. 0 < y - x", "by auto"], ["proof (state)\nthis:\n  0 < y - x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> y; \\<not> 0 \\<le> x - y\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  0 < y - x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> y; \\<not> 0 \\<le> x - y\\<rbrakk>\n    \\<Longrightarrow> False", "from x0 yn n p0"], ["proof (chain)\npicking this:\n  0 \\<le> x\n  y \\<le> n\n  p = 2 * n + 1\n  1 < p", "have \"y-x < p\""], ["proof (prove)\nusing this:\n  0 \\<le> x\n  y \\<le> n\n  p = 2 * n + 1\n  1 < p\n\ngoal (1 subgoal):\n 1. y - x < p", "by auto"], ["proof (state)\nthis:\n  y - x < p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> y; \\<not> 0 \\<le> x - y\\<rbrakk>\n    \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  0 < y - x\n  y - x < p", "have \"\\<not> p dvd y-x\""], ["proof (prove)\nusing this:\n  0 < y - x\n  y - x < p\n\ngoal (1 subgoal):\n 1. \\<not> p dvd y - x", "by (auto simp add: zdvd_not_zless)"], ["proof (state)\nthis:\n  \\<not> p dvd y - x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> y; \\<not> 0 \\<le> x - y\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<not> p dvd y - x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> y; \\<not> 0 \\<le> x - y\\<rbrakk>\n    \\<Longrightarrow> False", "from ass"], ["proof (chain)\npicking this:\n  p dvd x - y", "have \"p dvd -(x-y)\""], ["proof (prove)\nusing this:\n  p dvd x - y\n\ngoal (1 subgoal):\n 1. p dvd - (x - y)", "by (simp only: dvd_minus_iff)"], ["proof (state)\nthis:\n  p dvd - (x - y)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> y; \\<not> 0 \\<le> x - y\\<rbrakk>\n    \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> p dvd y - x\n  p dvd - (x - y)", "show \"False\""], ["proof (prove)\nusing this:\n  \\<not> p dvd y - x\n  p dvd - (x - y)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x = y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x\\<^sup>2 mod p = y\\<^sup>2 mod p; 0 \\<le> x; x \\<le> n;\n        0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "}"], ["proof (state)\nthis:\n  p dvd x - y \\<Longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x\\<^sup>2 mod p = y\\<^sup>2 mod p; 0 \\<le> x; x \\<le> n;\n        0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "ultimately"], ["proof (chain)\npicking this:\n  p dvd x + y \\<or> p dvd x - y\n  p dvd x + y \\<Longrightarrow> x = y\n  p dvd x - y \\<Longrightarrow> x = y", "show \"x=y\""], ["proof (prove)\nusing this:\n  p dvd x + y \\<or> p dvd x - y\n  p dvd x + y \\<Longrightarrow> x = y\n  p dvd x - y \\<Longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. x = y", "by auto"], ["proof (state)\nthis:\n  x = y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inj_on (\\<lambda>x. x\\<^sup>2 mod p) {0..n}\n\ngoal (1 subgoal):\n 1. card ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n}) = card {0..n}", "with finD"], ["proof (chain)\npicking this:\n  finite {0..n}\n  inj_on (\\<lambda>x. x\\<^sup>2 mod p) {0..n}", "show ?thesis"], ["proof (prove)\nusing this:\n  finite {0..n}\n  inj_on (\\<lambda>x. x\\<^sup>2 mod p) {0..n}\n\ngoal (1 subgoal):\n 1. card ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n}) = card {0..n}", "by (simp only: inj_on_iff_eq_card)"], ["proof (state)\nthis:\n  card ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n}) = card {0..n}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n}) = card {0..n}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "have cardB: \"card ?B = card ?D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card ((\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n}) = card {0..n}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card ((\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n}) = card {0..n}", "have \"inj_on ?g ?D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) {0..n}", "proof (unfold inj_on_def, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>(- 1 - x\\<^sup>2) mod p = (- 1 - y\\<^sup>2) mod p;\n        0 \\<le> x; x \\<le> n; 0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>(- 1 - x\\<^sup>2) mod p = (- 1 - y\\<^sup>2) mod p;\n        0 \\<le> x; x \\<le> n; 0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>(- 1 - x\\<^sup>2) mod p = (- 1 - y\\<^sup>2) mod p;\n        0 \\<le> x; x \\<le> n; 0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume x0: \"0 \\<le> x\" and xn: \"x \\<le> n\" and y0: \"0 \\<le> y\" and yn: \" y \\<le> n\"\n        and xyp: \"(-1-x^2) mod p = (-1-y^2) mod p\""], ["proof (state)\nthis:\n  0 \\<le> x\n  x \\<le> n\n  0 \\<le> y\n  y \\<le> n\n  (- 1 - x\\<^sup>2) mod p = (- 1 - y\\<^sup>2) mod p\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>(- 1 - x\\<^sup>2) mod p = (- 1 - y\\<^sup>2) mod p;\n        0 \\<le> x; x \\<le> n; 0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "with p0"], ["proof (chain)\npicking this:\n  1 < p\n  0 \\<le> x\n  x \\<le> n\n  0 \\<le> y\n  y \\<le> n\n  (- 1 - x\\<^sup>2) mod p = (- 1 - y\\<^sup>2) mod p", "have \"[-1-y^2 = -1-x^2] (mod p)\""], ["proof (prove)\nusing this:\n  1 < p\n  0 \\<le> x\n  x \\<le> n\n  0 \\<le> y\n  y \\<le> n\n  (- 1 - x\\<^sup>2) mod p = (- 1 - y\\<^sup>2) mod p\n\ngoal (1 subgoal):\n 1. [- 1 - y\\<^sup>2 = - 1 - x\\<^sup>2] (mod p)", "by (simp only: cong_def)"], ["proof (state)\nthis:\n  [- 1 - y\\<^sup>2 = - 1 - x\\<^sup>2] (mod p)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>(- 1 - x\\<^sup>2) mod p = (- 1 - y\\<^sup>2) mod p;\n        0 \\<le> x; x \\<le> n; 0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "hence \"p dvd (-1-y^2) - (-1-x^2)\""], ["proof (prove)\nusing this:\n  [- 1 - y\\<^sup>2 = - 1 - x\\<^sup>2] (mod p)\n\ngoal (1 subgoal):\n 1. p dvd - 1 - y\\<^sup>2 - (- 1 - x\\<^sup>2)", "by (simp only: cong_iff_dvd_diff)"], ["proof (state)\nthis:\n  p dvd - 1 - y\\<^sup>2 - (- 1 - x\\<^sup>2)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>(- 1 - x\\<^sup>2) mod p = (- 1 - y\\<^sup>2) mod p;\n        0 \\<le> x; x \\<le> n; 0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "moreover"], ["proof (state)\nthis:\n  p dvd - 1 - y\\<^sup>2 - (- 1 - x\\<^sup>2)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>(- 1 - x\\<^sup>2) mod p = (- 1 - y\\<^sup>2) mod p;\n        0 \\<le> x; x \\<le> n; 0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "have \"-1-y^2 - (-1-x^2) = x^2 - y^2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - 1 - y\\<^sup>2 - (- 1 - x\\<^sup>2) = x\\<^sup>2 - y\\<^sup>2", "by arith"], ["proof (state)\nthis:\n  - 1 - y\\<^sup>2 - (- 1 - x\\<^sup>2) = x\\<^sup>2 - y\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>(- 1 - x\\<^sup>2) mod p = (- 1 - y\\<^sup>2) mod p;\n        0 \\<le> x; x \\<le> n; 0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "ultimately"], ["proof (chain)\npicking this:\n  p dvd - 1 - y\\<^sup>2 - (- 1 - x\\<^sup>2)\n  - 1 - y\\<^sup>2 - (- 1 - x\\<^sup>2) = x\\<^sup>2 - y\\<^sup>2", "have \"p dvd x^2-y^2\""], ["proof (prove)\nusing this:\n  p dvd - 1 - y\\<^sup>2 - (- 1 - x\\<^sup>2)\n  - 1 - y\\<^sup>2 - (- 1 - x\\<^sup>2) = x\\<^sup>2 - y\\<^sup>2\n\ngoal (1 subgoal):\n 1. p dvd x\\<^sup>2 - y\\<^sup>2", "by simp"], ["proof (state)\nthis:\n  p dvd x\\<^sup>2 - y\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>(- 1 - x\\<^sup>2) mod p = (- 1 - y\\<^sup>2) mod p;\n        0 \\<le> x; x \\<le> n; 0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "hence \"p dvd (x+y)*(x-y)\""], ["proof (prove)\nusing this:\n  p dvd x\\<^sup>2 - y\\<^sup>2\n\ngoal (1 subgoal):\n 1. p dvd (x + y) * (x - y)", "by (simp add: power2_eq_square algebra_simps)"], ["proof (state)\nthis:\n  p dvd (x + y) * (x - y)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>(- 1 - x\\<^sup>2) mod p = (- 1 - y\\<^sup>2) mod p;\n        0 \\<le> x; x \\<le> n; 0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "with p1"], ["proof (chain)\npicking this:\n  prime (nat p)\n  p dvd (x + y) * (x - y)", "have \"p dvd x+y \\<or> p dvd x-y\""], ["proof (prove)\nusing this:\n  prime (nat p)\n  p dvd (x + y) * (x - y)\n\ngoal (1 subgoal):\n 1. p dvd x + y \\<or> p dvd x - y", "using \\<open>prime p\\<close> p0"], ["proof (prove)\nusing this:\n  prime (nat p)\n  p dvd (x + y) * (x - y)\n  prime p\n  1 < p\n\ngoal (1 subgoal):\n 1. p dvd x + y \\<or> p dvd x - y", "by (auto dest: prime_dvd_multD)"], ["proof (state)\nthis:\n  p dvd x + y \\<or> p dvd x - y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>(- 1 - x\\<^sup>2) mod p = (- 1 - y\\<^sup>2) mod p;\n        0 \\<le> x; x \\<le> n; 0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "moreover"], ["proof (state)\nthis:\n  p dvd x + y \\<or> p dvd x - y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>(- 1 - x\\<^sup>2) mod p = (- 1 - y\\<^sup>2) mod p;\n        0 \\<le> x; x \\<le> n; 0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "{"], ["proof (state)\nthis:\n  p dvd x + y \\<or> p dvd x - y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>(- 1 - x\\<^sup>2) mod p = (- 1 - y\\<^sup>2) mod p;\n        0 \\<le> x; x \\<le> n; 0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume \"p dvd x+y\""], ["proof (state)\nthis:\n  p dvd x + y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>(- 1 - x\\<^sup>2) mod p = (- 1 - y\\<^sup>2) mod p;\n        0 \\<le> x; x \\<le> n; 0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "moreover"], ["proof (state)\nthis:\n  p dvd x + y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>(- 1 - x\\<^sup>2) mod p = (- 1 - y\\<^sup>2) mod p;\n        0 \\<le> x; x \\<le> n; 0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "from xn yn n"], ["proof (chain)\npicking this:\n  x \\<le> n\n  y \\<le> n\n  p = 2 * n + 1", "have \"x+y < p\""], ["proof (prove)\nusing this:\n  x \\<le> n\n  y \\<le> n\n  p = 2 * n + 1\n\ngoal (1 subgoal):\n 1. x + y < p", "by auto"], ["proof (state)\nthis:\n  x + y < p\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>(- 1 - x\\<^sup>2) mod p = (- 1 - y\\<^sup>2) mod p;\n        0 \\<le> x; x \\<le> n; 0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "ultimately"], ["proof (chain)\npicking this:\n  p dvd x + y\n  x + y < p", "have \"\\<not> x+y > 0\""], ["proof (prove)\nusing this:\n  p dvd x + y\n  x + y < p\n\ngoal (1 subgoal):\n 1. \\<not> 0 < x + y", "by (auto simp add: zdvd_not_zless)"], ["proof (state)\nthis:\n  \\<not> 0 < x + y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>(- 1 - x\\<^sup>2) mod p = (- 1 - y\\<^sup>2) mod p;\n        0 \\<le> x; x \\<le> n; 0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "with x0 y0"], ["proof (chain)\npicking this:\n  0 \\<le> x\n  0 \\<le> y\n  \\<not> 0 < x + y", "have \"x = y\""], ["proof (prove)\nusing this:\n  0 \\<le> x\n  0 \\<le> y\n  \\<not> 0 < x + y\n\ngoal (1 subgoal):\n 1. x = y", "by auto"], ["proof (state)\nthis:\n  x = y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>(- 1 - x\\<^sup>2) mod p = (- 1 - y\\<^sup>2) mod p;\n        0 \\<le> x; x \\<le> n; 0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "} \\<comment> \\<open>both are zero\\<close>"], ["proof (state)\nthis:\n  p dvd x + y \\<Longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>(- 1 - x\\<^sup>2) mod p = (- 1 - y\\<^sup>2) mod p;\n        0 \\<le> x; x \\<le> n; 0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "moreover"], ["proof (state)\nthis:\n  p dvd x + y \\<Longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>(- 1 - x\\<^sup>2) mod p = (- 1 - y\\<^sup>2) mod p;\n        0 \\<le> x; x \\<le> n; 0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "{"], ["proof (state)\nthis:\n  p dvd x + y \\<Longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>(- 1 - x\\<^sup>2) mod p = (- 1 - y\\<^sup>2) mod p;\n        0 \\<le> x; x \\<le> n; 0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume ass: \"p dvd x-y\""], ["proof (state)\nthis:\n  p dvd x - y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>(- 1 - x\\<^sup>2) mod p = (- 1 - y\\<^sup>2) mod p;\n        0 \\<le> x; x \\<le> n; 0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "have \"x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y", "proof (rule ccontr, case_tac \"x-y \\<ge> 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<noteq> y; 0 \\<le> x - y\\<rbrakk> \\<Longrightarrow> False\n 2. \\<lbrakk>x \\<noteq> y; \\<not> 0 \\<le> x - y\\<rbrakk>\n    \\<Longrightarrow> False", "assume \"x-y \\<ge> 0\" and \"x \\<noteq> y\""], ["proof (state)\nthis:\n  0 \\<le> x - y\n  x \\<noteq> y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<noteq> y; 0 \\<le> x - y\\<rbrakk> \\<Longrightarrow> False\n 2. \\<lbrakk>x \\<noteq> y; \\<not> 0 \\<le> x - y\\<rbrakk>\n    \\<Longrightarrow> False", "hence \"x-y > 0\""], ["proof (prove)\nusing this:\n  0 \\<le> x - y\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. 0 < x - y", "by auto"], ["proof (state)\nthis:\n  0 < x - y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<noteq> y; 0 \\<le> x - y\\<rbrakk> \\<Longrightarrow> False\n 2. \\<lbrakk>x \\<noteq> y; \\<not> 0 \\<le> x - y\\<rbrakk>\n    \\<Longrightarrow> False", "with ass"], ["proof (chain)\npicking this:\n  p dvd x - y\n  0 < x - y", "have \"\\<not> x-y < p\""], ["proof (prove)\nusing this:\n  p dvd x - y\n  0 < x - y\n\ngoal (1 subgoal):\n 1. \\<not> x - y < p", "by (auto simp add: zdvd_not_zless)"], ["proof (state)\nthis:\n  \\<not> x - y < p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<noteq> y; 0 \\<le> x - y\\<rbrakk> \\<Longrightarrow> False\n 2. \\<lbrakk>x \\<noteq> y; \\<not> 0 \\<le> x - y\\<rbrakk>\n    \\<Longrightarrow> False", "with xn y0 n p0"], ["proof (chain)\npicking this:\n  x \\<le> n\n  0 \\<le> y\n  p = 2 * n + 1\n  1 < p\n  \\<not> x - y < p", "show \"False\""], ["proof (prove)\nusing this:\n  x \\<le> n\n  0 \\<le> y\n  p = 2 * n + 1\n  1 < p\n  \\<not> x - y < p\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> y; \\<not> 0 \\<le> x - y\\<rbrakk>\n    \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> y; \\<not> 0 \\<le> x - y\\<rbrakk>\n    \\<Longrightarrow> False", "assume \"\\<not> 0 \\<le> x-y\""], ["proof (state)\nthis:\n  \\<not> 0 \\<le> x - y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> y; \\<not> 0 \\<le> x - y\\<rbrakk>\n    \\<Longrightarrow> False", "hence \"y-x > 0\""], ["proof (prove)\nusing this:\n  \\<not> 0 \\<le> x - y\n\ngoal (1 subgoal):\n 1. 0 < y - x", "by auto"], ["proof (state)\nthis:\n  0 < y - x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> y; \\<not> 0 \\<le> x - y\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  0 < y - x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> y; \\<not> 0 \\<le> x - y\\<rbrakk>\n    \\<Longrightarrow> False", "from x0 yn n p0"], ["proof (chain)\npicking this:\n  0 \\<le> x\n  y \\<le> n\n  p = 2 * n + 1\n  1 < p", "have \"y-x < p\""], ["proof (prove)\nusing this:\n  0 \\<le> x\n  y \\<le> n\n  p = 2 * n + 1\n  1 < p\n\ngoal (1 subgoal):\n 1. y - x < p", "by auto"], ["proof (state)\nthis:\n  y - x < p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> y; \\<not> 0 \\<le> x - y\\<rbrakk>\n    \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  0 < y - x\n  y - x < p", "have \"\\<not> p dvd y-x\""], ["proof (prove)\nusing this:\n  0 < y - x\n  y - x < p\n\ngoal (1 subgoal):\n 1. \\<not> p dvd y - x", "by (auto simp add: zdvd_not_zless)"], ["proof (state)\nthis:\n  \\<not> p dvd y - x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> y; \\<not> 0 \\<le> x - y\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<not> p dvd y - x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> y; \\<not> 0 \\<le> x - y\\<rbrakk>\n    \\<Longrightarrow> False", "from ass"], ["proof (chain)\npicking this:\n  p dvd x - y", "have \"p dvd -(x-y)\""], ["proof (prove)\nusing this:\n  p dvd x - y\n\ngoal (1 subgoal):\n 1. p dvd - (x - y)", "by (simp only: dvd_minus_iff)"], ["proof (state)\nthis:\n  p dvd - (x - y)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> y; \\<not> 0 \\<le> x - y\\<rbrakk>\n    \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> p dvd y - x\n  p dvd - (x - y)", "show \"False\""], ["proof (prove)\nusing this:\n  \\<not> p dvd y - x\n  p dvd - (x - y)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x = y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>(- 1 - x\\<^sup>2) mod p = (- 1 - y\\<^sup>2) mod p;\n        0 \\<le> x; x \\<le> n; 0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "}"], ["proof (state)\nthis:\n  p dvd x - y \\<Longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>(- 1 - x\\<^sup>2) mod p = (- 1 - y\\<^sup>2) mod p;\n        0 \\<le> x; x \\<le> n; 0 \\<le> y; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x = y", "ultimately"], ["proof (chain)\npicking this:\n  p dvd x + y \\<or> p dvd x - y\n  p dvd x + y \\<Longrightarrow> x = y\n  p dvd x - y \\<Longrightarrow> x = y", "show \"x=y\""], ["proof (prove)\nusing this:\n  p dvd x + y \\<or> p dvd x - y\n  p dvd x + y \\<Longrightarrow> x = y\n  p dvd x - y \\<Longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. x = y", "by auto"], ["proof (state)\nthis:\n  x = y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inj_on (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) {0..n}\n\ngoal (1 subgoal):\n 1. card ((\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n}) = card {0..n}", "with finD"], ["proof (chain)\npicking this:\n  finite {0..n}\n  inj_on (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) {0..n}", "show ?thesis"], ["proof (prove)\nusing this:\n  finite {0..n}\n  inj_on (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) {0..n}\n\ngoal (1 subgoal):\n 1. card ((\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n}) = card {0..n}", "by (simp only: inj_on_iff_eq_card)"], ["proof (state)\nthis:\n  card ((\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n}) = card {0..n}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card ((\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n}) = card {0..n}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "have \"?A \\<inter> ?B \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<inter>\n    (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n} \\<noteq>\n    {}", "proof (rule ccontr, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<inter>\n    (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n} =\n    {} \\<Longrightarrow>\n    False", "assume ABdisj: \"?A \\<inter> ?B = {}\""], ["proof (state)\nthis:\n  (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<inter>\n  (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n} =\n  {}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<inter>\n    (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n} =\n    {} \\<Longrightarrow>\n    False", "from cardA cardB cardD"], ["proof (chain)\npicking this:\n  card ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n}) = card {0..n}\n  card ((\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n}) = card {0..n}\n  card {0..n} = 1 + nat n", "have \"2 + 2*(nat n) = card ?A + card ?B\""], ["proof (prove)\nusing this:\n  card ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n}) = card {0..n}\n  card ((\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n}) = card {0..n}\n  card {0..n} = 1 + nat n\n\ngoal (1 subgoal):\n 1. 2 + 2 * nat n =\n    card ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n}) +\n    card ((\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n})", "by auto"], ["proof (state)\nthis:\n  2 + 2 * nat n =\n  card ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n}) +\n  card ((\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n})\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<inter>\n    (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n} =\n    {} \\<Longrightarrow>\n    False", "also"], ["proof (state)\nthis:\n  2 + 2 * nat n =\n  card ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n}) +\n  card ((\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n})\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<inter>\n    (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n} =\n    {} \\<Longrightarrow>\n    False", "with finA finB ABdisj"], ["proof (chain)\npicking this:\n  finite ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n})\n  finite ((\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n})\n  (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<inter>\n  (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n} =\n  {}\n  2 + 2 * nat n =\n  card ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n}) +\n  card ((\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n})", "have \"\\<dots> = card (?A \\<union> ?B)\""], ["proof (prove)\nusing this:\n  finite ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n})\n  finite ((\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n})\n  (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<inter>\n  (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n} =\n  {}\n  2 + 2 * nat n =\n  card ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n}) +\n  card ((\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n})\n\ngoal (1 subgoal):\n 1. card ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n}) +\n    card ((\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n}) =\n    card\n     ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<union>\n      (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n})", "by (simp only: card_Un_disjoint)"], ["proof (state)\nthis:\n  card ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n}) +\n  card ((\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n}) =\n  card\n   ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<union>\n    (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n})\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<inter>\n    (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n} =\n    {} \\<Longrightarrow>\n    False", "also"], ["proof (state)\nthis:\n  card ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n}) +\n  card ((\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n}) =\n  card\n   ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<union>\n    (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n})\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<inter>\n    (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n} =\n    {} \\<Longrightarrow>\n    False", "with finC AunBsubC"], ["proof (chain)\npicking this:\n  finite {0..<p}\n  (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<union>\n  (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n}\n  \\<subseteq> {0..<p}\n  card ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n}) +\n  card ((\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n}) =\n  card\n   ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<union>\n    (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n})", "have \"\\<dots> \\<le> card ?C\""], ["proof (prove)\nusing this:\n  finite {0..<p}\n  (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<union>\n  (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n}\n  \\<subseteq> {0..<p}\n  card ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n}) +\n  card ((\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n}) =\n  card\n   ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<union>\n    (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n})\n\ngoal (1 subgoal):\n 1. card\n     ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<union>\n      (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n})\n    \\<le> card {0..<p}", "by (simp only: card_mono)"], ["proof (state)\nthis:\n  card\n   ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<union>\n    (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n})\n  \\<le> card {0..<p}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<inter>\n    (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n} =\n    {} \\<Longrightarrow>\n    False", "also"], ["proof (state)\nthis:\n  card\n   ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<union>\n    (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n})\n  \\<le> card {0..<p}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<inter>\n    (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n} =\n    {} \\<Longrightarrow>\n    False", "with cardC"], ["proof (chain)\npicking this:\n  card {0..<p} = nat p\n  card\n   ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<union>\n    (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n})\n  \\<le> card {0..<p}", "have \"\\<dots> = nat p\""], ["proof (prove)\nusing this:\n  card {0..<p} = nat p\n  card\n   ((\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<union>\n    (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n})\n  \\<le> card {0..<p}\n\ngoal (1 subgoal):\n 1. card {0..<p} = nat p", "by simp"], ["proof (state)\nthis:\n  card {0..<p} = nat p\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<inter>\n    (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n} =\n    {} \\<Longrightarrow>\n    False", "finally"], ["proof (chain)\npicking this:\n  2 + 2 * nat n \\<le> nat p", "have \"2 + 2*(nat n) \\<le> nat p\""], ["proof (prove)\nusing this:\n  2 + 2 * nat n \\<le> nat p\n\ngoal (1 subgoal):\n 1. 2 + 2 * nat n \\<le> nat p", "by simp"], ["proof (state)\nthis:\n  2 + 2 * nat n \\<le> nat p\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<inter>\n    (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n} =\n    {} \\<Longrightarrow>\n    False", "with n"], ["proof (chain)\npicking this:\n  p = 2 * n + 1\n  2 + 2 * nat n \\<le> nat p", "show \"False\""], ["proof (prove)\nusing this:\n  p = 2 * n + 1\n  2 + 2 * nat n \\<le> nat p\n\ngoal (1 subgoal):\n 1. False", "by arith"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<inter>\n  (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n} \\<noteq>\n  {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<inter>\n  (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n} \\<noteq>\n  {}", "obtain z where \"z \\<in> ?A \\<and> z \\<in> ?B\""], ["proof (prove)\nusing this:\n  (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<inter>\n  (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n} \\<noteq>\n  {}\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        z \\<in> (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<and>\n        z \\<in> (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) `\n                {0..n} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  z \\<in> (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<and>\n  z \\<in> (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "then"], ["proof (chain)\npicking this:\n  z \\<in> (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<and>\n  z \\<in> (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n}", "obtain x y where xy: \"x \\<in> ?D \\<and> y \\<in> ?D \\<and> z = x^2 mod p \\<and> z = (-1-y^2) mod p\""], ["proof (prove)\nusing this:\n  z \\<in> (\\<lambda>x. x\\<^sup>2 mod p) ` {0..n} \\<and>\n  z \\<in> (\\<lambda>x. (- 1 - x\\<^sup>2) mod p) ` {0..n}\n\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        x \\<in> {0..n} \\<and>\n        y \\<in> {0..n} \\<and>\n        z = x\\<^sup>2 mod p \\<and>\n        z = (- 1 - y\\<^sup>2) mod p \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x \\<in> {0..n} \\<and>\n  y \\<in> {0..n} \\<and>\n  z = x\\<^sup>2 mod p \\<and> z = (- 1 - y\\<^sup>2) mod p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "with p0"], ["proof (chain)\npicking this:\n  1 < p\n  x \\<in> {0..n} \\<and>\n  y \\<in> {0..n} \\<and>\n  z = x\\<^sup>2 mod p \\<and> z = (- 1 - y\\<^sup>2) mod p", "have \"[x^2=-1-y^2](mod p)\""], ["proof (prove)\nusing this:\n  1 < p\n  x \\<in> {0..n} \\<and>\n  y \\<in> {0..n} \\<and>\n  z = x\\<^sup>2 mod p \\<and> z = (- 1 - y\\<^sup>2) mod p\n\ngoal (1 subgoal):\n 1. [x\\<^sup>2 = - 1 - y\\<^sup>2] (mod p)", "by (simp add: cong_def)"], ["proof (state)\nthis:\n  [x\\<^sup>2 = - 1 - y\\<^sup>2] (mod p)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "hence \"p dvd x^2-(-1-y^2)\""], ["proof (prove)\nusing this:\n  [x\\<^sup>2 = - 1 - y\\<^sup>2] (mod p)\n\ngoal (1 subgoal):\n 1. p dvd x\\<^sup>2 - (- 1 - y\\<^sup>2)", "by (simp only: cong_iff_dvd_diff)"], ["proof (state)\nthis:\n  p dvd x\\<^sup>2 - (- 1 - y\\<^sup>2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "moreover"], ["proof (state)\nthis:\n  p dvd x\\<^sup>2 - (- 1 - y\\<^sup>2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "have \"x^2-(-1-y^2)=x^2+y^2+1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sup>2 - (- 1 - y\\<^sup>2) = x\\<^sup>2 + y\\<^sup>2 + 1", "by arith"], ["proof (state)\nthis:\n  x\\<^sup>2 - (- 1 - y\\<^sup>2) = x\\<^sup>2 + y\\<^sup>2 + 1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "ultimately"], ["proof (chain)\npicking this:\n  p dvd x\\<^sup>2 - (- 1 - y\\<^sup>2)\n  x\\<^sup>2 - (- 1 - y\\<^sup>2) = x\\<^sup>2 + y\\<^sup>2 + 1", "have \"p dvd sum4sq_int(x,y,1,0)\""], ["proof (prove)\nusing this:\n  p dvd x\\<^sup>2 - (- 1 - y\\<^sup>2)\n  x\\<^sup>2 - (- 1 - y\\<^sup>2) = x\\<^sup>2 + y\\<^sup>2 + 1\n\ngoal (1 subgoal):\n 1. p dvd sum4sq_int (x, y, 1, 0)", "by (auto simp add: sum4sq_int_def)"], ["proof (state)\nthis:\n  p dvd sum4sq_int (x, y, 1, 0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "then"], ["proof (chain)\npicking this:\n  p dvd sum4sq_int (x, y, 1, 0)", "obtain t where t: \"p * t = sum4sq_int(x,y,1,0)\""], ["proof (prove)\nusing this:\n  p dvd sum4sq_int (x, y, 1, 0)\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        p * t = sum4sq_int (x, y, 1, 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp only: dvd_def eq_refl)"], ["proof (state)\nthis:\n  p * t = sum4sq_int (x, y, 1, 0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "hence \"is_sum4sq_int (p*t)\""], ["proof (prove)\nusing this:\n  p * t = sum4sq_int (x, y, 1, 0)\n\ngoal (1 subgoal):\n 1. is_sum4sq_int (p * t)", "by (unfold is_sum4sq_int_def, auto)"], ["proof (state)\nthis:\n  is_sum4sq_int (p * t)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "moreover"], ["proof (state)\nthis:\n  is_sum4sq_int (p * t)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "have \"t > 0 \\<and> t < p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < t \\<and> t < p", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < t\n 2. t < p", "have \"x^2 \\<ge> 0 \\<and> y^2 \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> x\\<^sup>2 \\<and> 0 \\<le> y\\<^sup>2", "by simp"], ["proof (state)\nthis:\n  0 \\<le> x\\<^sup>2 \\<and> 0 \\<le> y\\<^sup>2\n\ngoal (2 subgoals):\n 1. 0 < t\n 2. t < p", "hence \"x^2+y^2+1 > 0\""], ["proof (prove)\nusing this:\n  0 \\<le> x\\<^sup>2 \\<and> 0 \\<le> y\\<^sup>2\n\ngoal (1 subgoal):\n 1. 0 < x\\<^sup>2 + y\\<^sup>2 + 1", "by arith"], ["proof (state)\nthis:\n  0 < x\\<^sup>2 + y\\<^sup>2 + 1\n\ngoal (2 subgoals):\n 1. 0 < t\n 2. t < p", "with t"], ["proof (chain)\npicking this:\n  p * t = sum4sq_int (x, y, 1, 0)\n  0 < x\\<^sup>2 + y\\<^sup>2 + 1", "have \"p*t > 0\""], ["proof (prove)\nusing this:\n  p * t = sum4sq_int (x, y, 1, 0)\n  0 < x\\<^sup>2 + y\\<^sup>2 + 1\n\ngoal (1 subgoal):\n 1. 0 < p * t", "by (unfold sum4sq_int_def, auto)"], ["proof (state)\nthis:\n  0 < p * t\n\ngoal (2 subgoals):\n 1. 0 < t\n 2. t < p", "moreover"], ["proof (state)\nthis:\n  0 < p * t\n\ngoal (2 subgoals):\n 1. 0 < t\n 2. t < p", "{"], ["proof (state)\nthis:\n  0 < p * t\n\ngoal (2 subgoals):\n 1. 0 < t\n 2. t < p", "assume \"t < 0\""], ["proof (state)\nthis:\n  t < 0\n\ngoal (2 subgoals):\n 1. 0 < t\n 2. t < p", "with p0"], ["proof (chain)\npicking this:\n  1 < p\n  t < 0", "have \"p*t < p*0\""], ["proof (prove)\nusing this:\n  1 < p\n  t < 0\n\ngoal (1 subgoal):\n 1. p * t < p * 0", "by (simp only: zmult_zless_mono2)"], ["proof (state)\nthis:\n  p * t < p * 0\n\ngoal (2 subgoals):\n 1. 0 < t\n 2. t < p", "hence \"p*t < 0\""], ["proof (prove)\nusing this:\n  p * t < p * 0\n\ngoal (1 subgoal):\n 1. p * t < 0", "by simp"], ["proof (state)\nthis:\n  p * t < 0\n\ngoal (2 subgoals):\n 1. 0 < t\n 2. t < p", "}"], ["proof (state)\nthis:\n  t < 0 \\<Longrightarrow> p * t < 0\n\ngoal (2 subgoals):\n 1. 0 < t\n 2. t < p", "moreover"], ["proof (state)\nthis:\n  t < 0 \\<Longrightarrow> p * t < 0\n\ngoal (2 subgoals):\n 1. 0 < t\n 2. t < p", "{"], ["proof (state)\nthis:\n  t < 0 \\<Longrightarrow> p * t < 0\n\ngoal (2 subgoals):\n 1. 0 < t\n 2. t < p", "assume \"t = 0\""], ["proof (state)\nthis:\n  t = 0\n\ngoal (2 subgoals):\n 1. 0 < t\n 2. t < p", "hence \"p*t = 0\""], ["proof (prove)\nusing this:\n  t = 0\n\ngoal (1 subgoal):\n 1. p * t = 0", "by simp"], ["proof (state)\nthis:\n  p * t = 0\n\ngoal (2 subgoals):\n 1. 0 < t\n 2. t < p", "}"], ["proof (state)\nthis:\n  t = 0 \\<Longrightarrow> p * t = 0\n\ngoal (2 subgoals):\n 1. 0 < t\n 2. t < p", "ultimately"], ["proof (chain)\npicking this:\n  0 < p * t\n  t < 0 \\<Longrightarrow> p * t < 0\n  t = 0 \\<Longrightarrow> p * t = 0", "have \"\\<not> t < 0 \\<and> t \\<noteq> 0\""], ["proof (prove)\nusing this:\n  0 < p * t\n  t < 0 \\<Longrightarrow> p * t < 0\n  t = 0 \\<Longrightarrow> p * t = 0\n\ngoal (1 subgoal):\n 1. \\<not> t < 0 \\<and> t \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  \\<not> t < 0 \\<and> t \\<noteq> 0\n\ngoal (2 subgoals):\n 1. 0 < t\n 2. t < p", "thus \"t > 0\""], ["proof (prove)\nusing this:\n  \\<not> t < 0 \\<and> t \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < t", "by simp"], ["proof (state)\nthis:\n  0 < t\n\ngoal (1 subgoal):\n 1. t < p", "from xy"], ["proof (chain)\npicking this:\n  x \\<in> {0..n} \\<and>\n  y \\<in> {0..n} \\<and>\n  z = x\\<^sup>2 mod p \\<and> z = (- 1 - y\\<^sup>2) mod p", "have \"x^2 \\<le> n^2 \\<and> y^2 \\<le> n^2\""], ["proof (prove)\nusing this:\n  x \\<in> {0..n} \\<and>\n  y \\<in> {0..n} \\<and>\n  z = x\\<^sup>2 mod p \\<and> z = (- 1 - y\\<^sup>2) mod p\n\ngoal (1 subgoal):\n 1. x\\<^sup>2 \\<le> n\\<^sup>2 \\<and> y\\<^sup>2 \\<le> n\\<^sup>2", "by (auto simp add: power_mono)"], ["proof (state)\nthis:\n  x\\<^sup>2 \\<le> n\\<^sup>2 \\<and> y\\<^sup>2 \\<le> n\\<^sup>2\n\ngoal (1 subgoal):\n 1. t < p", "hence \"x^2+y^2+1 \\<le> 2*n^2 + 1\""], ["proof (prove)\nusing this:\n  x\\<^sup>2 \\<le> n\\<^sup>2 \\<and> y\\<^sup>2 \\<le> n\\<^sup>2\n\ngoal (1 subgoal):\n 1. x\\<^sup>2 + y\\<^sup>2 + 1 \\<le> 2 * n\\<^sup>2 + 1", "by auto"], ["proof (state)\nthis:\n  x\\<^sup>2 + y\\<^sup>2 + 1 \\<le> 2 * n\\<^sup>2 + 1\n\ngoal (1 subgoal):\n 1. t < p", "with t"], ["proof (chain)\npicking this:\n  p * t = sum4sq_int (x, y, 1, 0)\n  x\\<^sup>2 + y\\<^sup>2 + 1 \\<le> 2 * n\\<^sup>2 + 1", "have contr: \"p*t \\<le> 2*n^2+1\""], ["proof (prove)\nusing this:\n  p * t = sum4sq_int (x, y, 1, 0)\n  x\\<^sup>2 + y\\<^sup>2 + 1 \\<le> 2 * n\\<^sup>2 + 1\n\ngoal (1 subgoal):\n 1. p * t \\<le> 2 * n\\<^sup>2 + 1", "by (simp add: sum4sq_int_def)"], ["proof (state)\nthis:\n  p * t \\<le> 2 * n\\<^sup>2 + 1\n\ngoal (1 subgoal):\n 1. t < p", "moreover"], ["proof (state)\nthis:\n  p * t \\<le> 2 * n\\<^sup>2 + 1\n\ngoal (1 subgoal):\n 1. t < p", "{"], ["proof (state)\nthis:\n  p * t \\<le> 2 * n\\<^sup>2 + 1\n\ngoal (1 subgoal):\n 1. t < p", "assume \"t > n+1\""], ["proof (state)\nthis:\n  n + 1 < t\n\ngoal (1 subgoal):\n 1. t < p", "with p0"], ["proof (chain)\npicking this:\n  1 < p\n  n + 1 < t", "have \"p*(n+1) < p*t\""], ["proof (prove)\nusing this:\n  1 < p\n  n + 1 < t\n\ngoal (1 subgoal):\n 1. p * (n + 1) < p * t", "by (simp only: zmult_zless_mono2)"], ["proof (state)\nthis:\n  p * (n + 1) < p * t\n\ngoal (1 subgoal):\n 1. t < p", "with n"], ["proof (chain)\npicking this:\n  p = 2 * n + 1\n  p * (n + 1) < p * t", "have \"p*t > (2*n+1)*n + (2*n+1)*1\""], ["proof (prove)\nusing this:\n  p = 2 * n + 1\n  p * (n + 1) < p * t\n\ngoal (1 subgoal):\n 1. (2 * n + 1) * n + (2 * n + 1) * 1 < p * t", "by (simp only: distrib_left)"], ["proof (state)\nthis:\n  (2 * n + 1) * n + (2 * n + 1) * 1 < p * t\n\ngoal (1 subgoal):\n 1. t < p", "hence \"p*t > 2*n*n + n + 2*n + 1\""], ["proof (prove)\nusing this:\n  (2 * n + 1) * n + (2 * n + 1) * 1 < p * t\n\ngoal (1 subgoal):\n 1. 2 * n * n + n + 2 * n + 1 < p * t", "by (simp only: distrib_right mult_1_left)"], ["proof (state)\nthis:\n  2 * n * n + n + 2 * n + 1 < p * t\n\ngoal (1 subgoal):\n 1. t < p", "with n0"], ["proof (chain)\npicking this:\n  0 < n\n  2 * n * n + n + 2 * n + 1 < p * t", "have \"p*t > 2*n^2 + 1\""], ["proof (prove)\nusing this:\n  0 < n\n  2 * n * n + n + 2 * n + 1 < p * t\n\ngoal (1 subgoal):\n 1. 2 * n\\<^sup>2 + 1 < p * t", "by (simp add: power2_eq_square)"], ["proof (state)\nthis:\n  2 * n\\<^sup>2 + 1 < p * t\n\ngoal (1 subgoal):\n 1. t < p", "}"], ["proof (state)\nthis:\n  n + 1 < t \\<Longrightarrow> 2 * n\\<^sup>2 + 1 < p * t\n\ngoal (1 subgoal):\n 1. t < p", "ultimately"], ["proof (chain)\npicking this:\n  p * t \\<le> 2 * n\\<^sup>2 + 1\n  n + 1 < t \\<Longrightarrow> 2 * n\\<^sup>2 + 1 < p * t", "have \"\\<not> t > n+1\""], ["proof (prove)\nusing this:\n  p * t \\<le> 2 * n\\<^sup>2 + 1\n  n + 1 < t \\<Longrightarrow> 2 * n\\<^sup>2 + 1 < p * t\n\ngoal (1 subgoal):\n 1. \\<not> n + 1 < t", "by auto"], ["proof (state)\nthis:\n  \\<not> n + 1 < t\n\ngoal (1 subgoal):\n 1. t < p", "with n0 n"], ["proof (chain)\npicking this:\n  0 < n\n  p = 2 * n + 1\n  \\<not> n + 1 < t", "show \"t < p\""], ["proof (prove)\nusing this:\n  0 < n\n  p = 2 * n + 1\n  \\<not> n + 1 < t\n\ngoal (1 subgoal):\n 1. t < p", "by auto"], ["proof (state)\nthis:\n  t < p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < t \\<and> t < p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); odd p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "ultimately"], ["proof (chain)\npicking this:\n  is_sum4sq_int (p * t)\n  0 < t \\<and> t < p", "show ?thesis"], ["proof (prove)\nusing this:\n  is_sum4sq_int (p * t)\n  0 < t \\<and> t < p\n\ngoal (1 subgoal):\n 1. \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "by blast"], ["proof (state)\nthis:\n  \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma zprime_is_sum4sq: \"prime (nat p) \\<Longrightarrow> is_sum4sq_int p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime (nat p) \\<Longrightarrow> is_sum4sq_int p", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>prime (nat p); ?P\\<rbrakk> \\<Longrightarrow> is_sum4sq_int p\n 2. \\<lbrakk>prime (nat p); \\<not> ?P\\<rbrakk>\n    \\<Longrightarrow> is_sum4sq_int p", "assume p2: \"p=2\""], ["proof (state)\nthis:\n  p = 2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>prime (nat p); ?P\\<rbrakk> \\<Longrightarrow> is_sum4sq_int p\n 2. \\<lbrakk>prime (nat p); \\<not> ?P\\<rbrakk>\n    \\<Longrightarrow> is_sum4sq_int p", "hence \"p = sum4sq_int(1,1,0,0)\""], ["proof (prove)\nusing this:\n  p = 2\n\ngoal (1 subgoal):\n 1. p = sum4sq_int (1, 1, 0, 0)", "by (auto simp add: sum4sq_int_def)"], ["proof (state)\nthis:\n  p = sum4sq_int (1, 1, 0, 0)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>prime (nat p); ?P\\<rbrakk> \\<Longrightarrow> is_sum4sq_int p\n 2. \\<lbrakk>prime (nat p); \\<not> ?P\\<rbrakk>\n    \\<Longrightarrow> is_sum4sq_int p", "thus ?thesis"], ["proof (prove)\nusing this:\n  p = sum4sq_int (1, 1, 0, 0)\n\ngoal (1 subgoal):\n 1. is_sum4sq_int p", "by (auto simp add: is_sum4sq_int_def)"], ["proof (state)\nthis:\n  is_sum4sq_int p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); p \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> is_sum4sq_int p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); p \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> is_sum4sq_int p", "assume \"\\<not> p =2\" and prp: \"prime (nat p)\""], ["proof (state)\nthis:\n  p \\<noteq> 2\n  prime (nat p)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); p \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> is_sum4sq_int p", "hence \"\\<not> nat p = 2\""], ["proof (prove)\nusing this:\n  p \\<noteq> 2\n  prime (nat p)\n\ngoal (1 subgoal):\n 1. nat p \\<noteq> 2", "by simp"], ["proof (state)\nthis:\n  nat p \\<noteq> 2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); p \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> is_sum4sq_int p", "with prp"], ["proof (chain)\npicking this:\n  prime (nat p)\n  nat p \\<noteq> 2", "have \"2 < nat p\""], ["proof (prove)\nusing this:\n  prime (nat p)\n  nat p \\<noteq> 2\n\ngoal (1 subgoal):\n 1. 2 < nat p", "using prime_nat_iff"], ["proof (prove)\nusing this:\n  prime (nat p)\n  nat p \\<noteq> 2\n  prime ?n =\n  (1 < ?n \\<and>\n   (\\<forall>m. m dvd ?n \\<longrightarrow> m = 1 \\<or> m = ?n))\n\ngoal (1 subgoal):\n 1. 2 < nat p", "by force"], ["proof (state)\nthis:\n  2 < nat p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); p \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> is_sum4sq_int p", "moreover"], ["proof (state)\nthis:\n  2 < nat p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); p \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> is_sum4sq_int p", "with prp"], ["proof (chain)\npicking this:\n  prime (nat p)\n  2 < nat p", "have \"odd (nat p)\""], ["proof (prove)\nusing this:\n  prime (nat p)\n  2 < nat p\n\ngoal (1 subgoal):\n 1. odd (nat p)", "using prime_odd_nat[of \"nat p\"]"], ["proof (prove)\nusing this:\n  prime (nat p)\n  2 < nat p\n  \\<lbrakk>prime (nat p); 2 < nat p\\<rbrakk> \\<Longrightarrow> odd (nat p)\n\ngoal (1 subgoal):\n 1. odd (nat p)", "by blast"], ["proof (state)\nthis:\n  odd (nat p)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); p \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> is_sum4sq_int p", "ultimately"], ["proof (chain)\npicking this:\n  2 < nat p\n  odd (nat p)", "have \"odd p\""], ["proof (prove)\nusing this:\n  2 < nat p\n  odd (nat p)\n\ngoal (1 subgoal):\n 1. odd p", "by (simp add: even_nat_iff)"], ["proof (state)\nthis:\n  odd p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); p \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> is_sum4sq_int p", "with prp"], ["proof (chain)\npicking this:\n  prime (nat p)\n  odd p", "have \"\\<exists> t. 0<t \\<and> t<p \\<and> is_sum4sq_int (p*t)\""], ["proof (prove)\nusing this:\n  prime (nat p)\n  odd p\n\ngoal (1 subgoal):\n 1. \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "by (rule mult_oddprime_is_sum4sq)"], ["proof (state)\nthis:\n  \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); p \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> is_sum4sq_int p", "then"], ["proof (chain)\npicking this:\n  \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)", "obtain a b c d t where pt_sol: \"0<t \\<and> t<p \\<and> p*t = sum4sq_int(a,b,c,d)\""], ["proof (prove)\nusing this:\n  \\<exists>t>0. t < p \\<and> is_sum4sq_int (p * t)\n\ngoal (1 subgoal):\n 1. (\\<And>t a b c d.\n        0 < t \\<and>\n        t < p \\<and> p * t = sum4sq_int (a, b, c, d) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (unfold is_sum4sq_int_def, blast)"], ["proof (state)\nthis:\n  0 < t \\<and> t < p \\<and> p * t = sum4sq_int (a, b, c, d)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); p \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> is_sum4sq_int p", "hence Qt: \"0<t \\<and> t<p \\<and> (\\<exists> a1 a2 a3 a4. p*t = sum4sq_int(a1,a2,a3,a4))\"\n    (is \"?Q t\")"], ["proof (prove)\nusing this:\n  0 < t \\<and> t < p \\<and> p * t = sum4sq_int (a, b, c, d)\n\ngoal (1 subgoal):\n 1. 0 < t \\<and>\n    t < p \\<and> (\\<exists>a1 a2 a3 a4. p * t = sum4sq_int (a1, a2, a3, a4))", "by blast"], ["proof (state)\nthis:\n  0 < t \\<and>\n  t < p \\<and> (\\<exists>a1 a2 a3 a4. p * t = sum4sq_int (a1, a2, a3, a4))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); p \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> is_sum4sq_int p", "have \"?Q 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < 1 \\<and>\n    1 < p \\<and> (\\<exists>a1 a2 a3 a4. p * 1 = sum4sq_int (a1, a2, a3, a4))", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (0 < 1 \\<and>\n            1 < p \\<and>\n            (\\<exists>a1 a2 a3 a4.\n                p * 1 = sum4sq_int (a1, a2, a3, a4))) \\<Longrightarrow>\n    False", "assume nQ1: \"\\<not> ?Q 1\""], ["proof (state)\nthis:\n  \\<not> (0 < 1 \\<and>\n          1 < p \\<and>\n          (\\<exists>a1 a2 a3 a4. p * 1 = sum4sq_int (a1, a2, a3, a4)))\n\ngoal (1 subgoal):\n 1. \\<not> (0 < 1 \\<and>\n            1 < p \\<and>\n            (\\<exists>a1 a2 a3 a4.\n                p * 1 = sum4sq_int (a1, a2, a3, a4))) \\<Longrightarrow>\n    False", "have \"\\<not> ?Q t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (0 < t \\<and>\n            t < p \\<and>\n            (\\<exists>a1 a2 a3 a4. p * t = sum4sq_int (a1, a2, a3, a4)))", "proof (induct t rule: infinite_descent0_measure[where V=\"\\<lambda>x. (nat x)- 1\"], clarify)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x a1 a2 a3 a4.\n       \\<lbrakk>nat x - 1 = 0; 0 < x; x < p;\n        p * x = sum4sq_int (a1, a2, a3, a4)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>0 < nat x - 1;\n        \\<not> \\<not> (0 < x \\<and>\n                       x < p \\<and>\n                       (\\<exists>a1 a2 a3 a4.\n                           p * x = sum4sq_int (a1, a2, a3, a4)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            nat y - 1 < nat x - 1 \\<and>\n                            \\<not> \\<not> (0 < y \\<and>\n     y < p \\<and>\n     (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4)))", "fix x a b c d"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x a1 a2 a3 a4.\n       \\<lbrakk>nat x - 1 = 0; 0 < x; x < p;\n        p * x = sum4sq_int (a1, a2, a3, a4)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>0 < nat x - 1;\n        \\<not> \\<not> (0 < x \\<and>\n                       x < p \\<and>\n                       (\\<exists>a1 a2 a3 a4.\n                           p * x = sum4sq_int (a1, a2, a3, a4)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            nat y - 1 < nat x - 1 \\<and>\n                            \\<not> \\<not> (0 < y \\<and>\n     y < p \\<and>\n     (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4)))", "assume \"nat x - 1 = 0\" and \"x > 0\" and s: \"p*x=sum4sq_int(a,b,c,d)\" and \"x < p\""], ["proof (state)\nthis:\n  nat x - 1 = 0\n  0 < x\n  p * x = sum4sq_int (a, b, c, d)\n  x < p\n\ngoal (2 subgoals):\n 1. \\<And>x a1 a2 a3 a4.\n       \\<lbrakk>nat x - 1 = 0; 0 < x; x < p;\n        p * x = sum4sq_int (a1, a2, a3, a4)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>0 < nat x - 1;\n        \\<not> \\<not> (0 < x \\<and>\n                       x < p \\<and>\n                       (\\<exists>a1 a2 a3 a4.\n                           p * x = sum4sq_int (a1, a2, a3, a4)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            nat y - 1 < nat x - 1 \\<and>\n                            \\<not> \\<not> (0 < y \\<and>\n     y < p \\<and>\n     (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4)))", "moreover"], ["proof (state)\nthis:\n  nat x - 1 = 0\n  0 < x\n  p * x = sum4sq_int (a, b, c, d)\n  x < p\n\ngoal (2 subgoals):\n 1. \\<And>x a1 a2 a3 a4.\n       \\<lbrakk>nat x - 1 = 0; 0 < x; x < p;\n        p * x = sum4sq_int (a1, a2, a3, a4)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>0 < nat x - 1;\n        \\<not> \\<not> (0 < x \\<and>\n                       x < p \\<and>\n                       (\\<exists>a1 a2 a3 a4.\n                           p * x = sum4sq_int (a1, a2, a3, a4)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            nat y - 1 < nat x - 1 \\<and>\n                            \\<not> \\<not> (0 < y \\<and>\n     y < p \\<and>\n     (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4)))", "hence \"x = 1\""], ["proof (prove)\nusing this:\n  nat x - 1 = 0\n  0 < x\n  p * x = sum4sq_int (a, b, c, d)\n  x < p\n\ngoal (1 subgoal):\n 1. x = 1", "by arith"], ["proof (state)\nthis:\n  x = 1\n\ngoal (2 subgoals):\n 1. \\<And>x a1 a2 a3 a4.\n       \\<lbrakk>nat x - 1 = 0; 0 < x; x < p;\n        p * x = sum4sq_int (a1, a2, a3, a4)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>0 < nat x - 1;\n        \\<not> \\<not> (0 < x \\<and>\n                       x < p \\<and>\n                       (\\<exists>a1 a2 a3 a4.\n                           p * x = sum4sq_int (a1, a2, a3, a4)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            nat y - 1 < nat x - 1 \\<and>\n                            \\<not> \\<not> (0 < y \\<and>\n     y < p \\<and>\n     (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4)))", "ultimately"], ["proof (chain)\npicking this:\n  nat x - 1 = 0\n  0 < x\n  p * x = sum4sq_int (a, b, c, d)\n  x < p\n  x = 1", "have \"?Q 1\""], ["proof (prove)\nusing this:\n  nat x - 1 = 0\n  0 < x\n  p * x = sum4sq_int (a, b, c, d)\n  x < p\n  x = 1\n\ngoal (1 subgoal):\n 1. 0 < 1 \\<and>\n    1 < p \\<and> (\\<exists>a1 a2 a3 a4. p * 1 = sum4sq_int (a1, a2, a3, a4))", "by auto"], ["proof (state)\nthis:\n  0 < 1 \\<and>\n  1 < p \\<and> (\\<exists>a1 a2 a3 a4. p * 1 = sum4sq_int (a1, a2, a3, a4))\n\ngoal (2 subgoals):\n 1. \\<And>x a1 a2 a3 a4.\n       \\<lbrakk>nat x - 1 = 0; 0 < x; x < p;\n        p * x = sum4sq_int (a1, a2, a3, a4)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>0 < nat x - 1;\n        \\<not> \\<not> (0 < x \\<and>\n                       x < p \\<and>\n                       (\\<exists>a1 a2 a3 a4.\n                           p * x = sum4sq_int (a1, a2, a3, a4)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            nat y - 1 < nat x - 1 \\<and>\n                            \\<not> \\<not> (0 < y \\<and>\n     y < p \\<and>\n     (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4)))", "with nQ1"], ["proof (chain)\npicking this:\n  \\<not> (0 < 1 \\<and>\n          1 < p \\<and>\n          (\\<exists>a1 a2 a3 a4. p * 1 = sum4sq_int (a1, a2, a3, a4)))\n  0 < 1 \\<and>\n  1 < p \\<and> (\\<exists>a1 a2 a3 a4. p * 1 = sum4sq_int (a1, a2, a3, a4))", "show False"], ["proof (prove)\nusing this:\n  \\<not> (0 < 1 \\<and>\n          1 < p \\<and>\n          (\\<exists>a1 a2 a3 a4. p * 1 = sum4sq_int (a1, a2, a3, a4)))\n  0 < 1 \\<and>\n  1 < p \\<and> (\\<exists>a1 a2 a3 a4. p * 1 = sum4sq_int (a1, a2, a3, a4))\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 < nat x - 1;\n        \\<not> \\<not> (0 < x \\<and>\n                       x < p \\<and>\n                       (\\<exists>a1 a2 a3 a4.\n                           p * x = sum4sq_int (a1, a2, a3, a4)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            nat y - 1 < nat x - 1 \\<and>\n                            \\<not> \\<not> (0 < y \\<and>\n     y < p \\<and>\n     (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 < nat x - 1;\n        \\<not> \\<not> (0 < x \\<and>\n                       x < p \\<and>\n                       (\\<exists>a1 a2 a3 a4.\n                           p * x = sum4sq_int (a1, a2, a3, a4)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            nat y - 1 < nat x - 1 \\<and>\n                            \\<not> \\<not> (0 < y \\<and>\n     y < p \\<and>\n     (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4)))", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 < nat x - 1;\n        \\<not> \\<not> (0 < x \\<and>\n                       x < p \\<and>\n                       (\\<exists>a1 a2 a3 a4.\n                           p * x = sum4sq_int (a1, a2, a3, a4)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            nat y - 1 < nat x - 1 \\<and>\n                            \\<not> \\<not> (0 < y \\<and>\n     y < p \\<and>\n     (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4)))", "assume \"0 < nat x - 1\" and \"\\<not> \\<not> ?Q x\""], ["proof (state)\nthis:\n  0 < nat x - 1\n  \\<not> \\<not> (0 < x \\<and>\n                 x < p \\<and>\n                 (\\<exists>a1 a2 a3 a4.\n                     p * x = sum4sq_int (a1, a2, a3, a4)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 < nat x - 1;\n        \\<not> \\<not> (0 < x \\<and>\n                       x < p \\<and>\n                       (\\<exists>a1 a2 a3 a4.\n                           p * x = sum4sq_int (a1, a2, a3, a4)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            nat y - 1 < nat x - 1 \\<and>\n                            \\<not> \\<not> (0 < y \\<and>\n     y < p \\<and>\n     (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4)))", "then"], ["proof (chain)\npicking this:\n  0 < nat x - 1\n  \\<not> \\<not> (0 < x \\<and>\n                 x < p \\<and>\n                 (\\<exists>a1 a2 a3 a4.\n                     p * x = sum4sq_int (a1, a2, a3, a4)))", "obtain a1 a2 a3 a4 where ass: \"1<x \\<and> x<p \\<and> p*x = sum4sq_int(a1,a2,a3,a4)\""], ["proof (prove)\nusing this:\n  0 < nat x - 1\n  \\<not> \\<not> (0 < x \\<and>\n                 x < p \\<and>\n                 (\\<exists>a1 a2 a3 a4.\n                     p * x = sum4sq_int (a1, a2, a3, a4)))\n\ngoal (1 subgoal):\n 1. (\\<And>a1 a2 a3 a4.\n        1 < x \\<and>\n        x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 < nat x - 1;\n        \\<not> \\<not> (0 < x \\<and>\n                       x < p \\<and>\n                       (\\<exists>a1 a2 a3 a4.\n                           p * x = sum4sq_int (a1, a2, a3, a4)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            nat y - 1 < nat x - 1 \\<and>\n                            \\<not> \\<not> (0 < y \\<and>\n     y < p \\<and>\n     (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4)))", "have \"\\<exists> y. nat y - 1 < nat x - 1 \\<and> ?Q y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "assume evx: \"even x\""], ["proof (state)\nthis:\n  even x\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "hence \"even (x*p)\""], ["proof (prove)\nusing this:\n  even x\n\ngoal (1 subgoal):\n 1. even (x * p)", "by simp"], ["proof (state)\nthis:\n  even (x * p)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "with ass"], ["proof (chain)\npicking this:\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)\n  even (x * p)", "have ev1234: \"even (a1^2+a2^2 + a3^2+a4^2)\""], ["proof (prove)\nusing this:\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)\n  even (x * p)\n\ngoal (1 subgoal):\n 1. even (a1\\<^sup>2 + a2\\<^sup>2 + a3\\<^sup>2 + a4\\<^sup>2)", "by (auto simp add: sum4sq_int_def ac_simps)"], ["proof (state)\nthis:\n  even (a1\\<^sup>2 + a2\\<^sup>2 + a3\\<^sup>2 + a4\\<^sup>2)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "have \"\\<exists> b1 b2 b3 b4. p*x=sum4sq_int(b1,b2,b3,b4) \\<and> even (b1+b2) \\<and> even (b3+b4)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "assume ev12: \"even (a1^2+a2^2)\""], ["proof (state)\nthis:\n  even (a1\\<^sup>2 + a2\\<^sup>2)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "with ev1234 ass"], ["proof (chain)\npicking this:\n  even (a1\\<^sup>2 + a2\\<^sup>2 + a3\\<^sup>2 + a4\\<^sup>2)\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)\n  even (a1\\<^sup>2 + a2\\<^sup>2)", "show ?thesis"], ["proof (prove)\nusing this:\n  even (a1\\<^sup>2 + a2\\<^sup>2 + a3\\<^sup>2 + a4\\<^sup>2)\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)\n  even (a1\\<^sup>2 + a2\\<^sup>2)\n\ngoal (1 subgoal):\n 1. \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "by auto"], ["proof (state)\nthis:\n  \\<exists>b1 b2 b3 b4.\n     p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n     even (b1 + b2) \\<and> even (b3 + b4)\n\ngoal (1 subgoal):\n 1. odd (a1\\<^sup>2 + a2\\<^sup>2) \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. odd (a1\\<^sup>2 + a2\\<^sup>2) \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "assume \"\\<not> even (a1^2+a2^2)\""], ["proof (state)\nthis:\n  odd (a1\\<^sup>2 + a2\\<^sup>2)\n\ngoal (1 subgoal):\n 1. odd (a1\\<^sup>2 + a2\\<^sup>2) \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "hence odd12: \"odd (a1^2+a2^2)\""], ["proof (prove)\nusing this:\n  odd (a1\\<^sup>2 + a2\\<^sup>2)\n\ngoal (1 subgoal):\n 1. odd (a1\\<^sup>2 + a2\\<^sup>2)", "by simp"], ["proof (state)\nthis:\n  odd (a1\\<^sup>2 + a2\\<^sup>2)\n\ngoal (1 subgoal):\n 1. odd (a1\\<^sup>2 + a2\\<^sup>2) \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "with ev1234"], ["proof (chain)\npicking this:\n  even (a1\\<^sup>2 + a2\\<^sup>2 + a3\\<^sup>2 + a4\\<^sup>2)\n  odd (a1\\<^sup>2 + a2\\<^sup>2)", "have odd34: \"odd (a3^2+a4^2)\""], ["proof (prove)\nusing this:\n  even (a1\\<^sup>2 + a2\\<^sup>2 + a3\\<^sup>2 + a4\\<^sup>2)\n  odd (a1\\<^sup>2 + a2\\<^sup>2)\n\ngoal (1 subgoal):\n 1. odd (a3\\<^sup>2 + a4\\<^sup>2)", "by auto"], ["proof (state)\nthis:\n  odd (a3\\<^sup>2 + a4\\<^sup>2)\n\ngoal (1 subgoal):\n 1. odd (a1\\<^sup>2 + a2\\<^sup>2) \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "assume ev1: \"even (a1^2)\""], ["proof (state)\nthis:\n  even (a1\\<^sup>2)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "with odd12"], ["proof (chain)\npicking this:\n  odd (a1\\<^sup>2 + a2\\<^sup>2)\n  even (a1\\<^sup>2)", "have odd2: \"odd (a2^2)\""], ["proof (prove)\nusing this:\n  odd (a1\\<^sup>2 + a2\\<^sup>2)\n  even (a1\\<^sup>2)\n\ngoal (1 subgoal):\n 1. odd (a2\\<^sup>2)", "by simp"], ["proof (state)\nthis:\n  odd (a2\\<^sup>2)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "assume \"even (a3^2)\""], ["proof (state)\nthis:\n  even (a3\\<^sup>2)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "moreover"], ["proof (state)\nthis:\n  even (a3\\<^sup>2)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "from ass"], ["proof (chain)\npicking this:\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)", "have \"p*x = sum4sq_int(a1,a3,a2,a4)\""], ["proof (prove)\nusing this:\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)\n\ngoal (1 subgoal):\n 1. p * x = sum4sq_int (a1, a3, a2, a4)", "by (auto simp add: sum4sq_int_def)"], ["proof (state)\nthis:\n  p * x = sum4sq_int (a1, a3, a2, a4)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "ultimately"], ["proof (chain)\npicking this:\n  even (a3\\<^sup>2)\n  p * x = sum4sq_int (a1, a3, a2, a4)", "show ?thesis"], ["proof (prove)\nusing this:\n  even (a3\\<^sup>2)\n  p * x = sum4sq_int (a1, a3, a2, a4)\n\ngoal (1 subgoal):\n 1. \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "using odd2 odd34 ev1"], ["proof (prove)\nusing this:\n  even (a3\\<^sup>2)\n  p * x = sum4sq_int (a1, a3, a2, a4)\n  odd (a2\\<^sup>2)\n  odd (a3\\<^sup>2 + a4\\<^sup>2)\n  even (a1\\<^sup>2)\n\ngoal (1 subgoal):\n 1. \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "by auto"], ["proof (state)\nthis:\n  \\<exists>b1 b2 b3 b4.\n     p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n     even (b1 + b2) \\<and> even (b3 + b4)\n\ngoal (1 subgoal):\n 1. odd (a3\\<^sup>2) \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. odd (a3\\<^sup>2) \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "assume \"\\<not> even (a3^2)\""], ["proof (state)\nthis:\n  odd (a3\\<^sup>2)\n\ngoal (1 subgoal):\n 1. odd (a3\\<^sup>2) \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "moreover"], ["proof (state)\nthis:\n  odd (a3\\<^sup>2)\n\ngoal (1 subgoal):\n 1. odd (a3\\<^sup>2) \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "from ass"], ["proof (chain)\npicking this:\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)", "have \"p*x = sum4sq_int(a1,a4,a2,a3)\""], ["proof (prove)\nusing this:\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)\n\ngoal (1 subgoal):\n 1. p * x = sum4sq_int (a1, a4, a2, a3)", "by (auto simp add: sum4sq_int_def)"], ["proof (state)\nthis:\n  p * x = sum4sq_int (a1, a4, a2, a3)\n\ngoal (1 subgoal):\n 1. odd (a3\\<^sup>2) \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "ultimately"], ["proof (chain)\npicking this:\n  odd (a3\\<^sup>2)\n  p * x = sum4sq_int (a1, a4, a2, a3)", "show ?thesis"], ["proof (prove)\nusing this:\n  odd (a3\\<^sup>2)\n  p * x = sum4sq_int (a1, a4, a2, a3)\n\ngoal (1 subgoal):\n 1. \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "using odd34 odd2 ev1"], ["proof (prove)\nusing this:\n  odd (a3\\<^sup>2)\n  p * x = sum4sq_int (a1, a4, a2, a3)\n  odd (a3\\<^sup>2 + a4\\<^sup>2)\n  odd (a2\\<^sup>2)\n  even (a1\\<^sup>2)\n\ngoal (1 subgoal):\n 1. \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "by auto"], ["proof (state)\nthis:\n  \\<exists>b1 b2 b3 b4.\n     p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n     even (b1 + b2) \\<and> even (b3 + b4)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>b1 b2 b3 b4.\n     p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n     even (b1 + b2) \\<and> even (b3 + b4)\n\ngoal (1 subgoal):\n 1. odd (a1\\<^sup>2) \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. odd (a1\\<^sup>2) \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "assume odd1: \"\\<not> even (a1^2)\""], ["proof (state)\nthis:\n  odd (a1\\<^sup>2)\n\ngoal (1 subgoal):\n 1. odd (a1\\<^sup>2) \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "with odd12"], ["proof (chain)\npicking this:\n  odd (a1\\<^sup>2 + a2\\<^sup>2)\n  odd (a1\\<^sup>2)", "have ev2: \"even (a2^2)\""], ["proof (prove)\nusing this:\n  odd (a1\\<^sup>2 + a2\\<^sup>2)\n  odd (a1\\<^sup>2)\n\ngoal (1 subgoal):\n 1. even (a2\\<^sup>2)", "by simp"], ["proof (state)\nthis:\n  even (a2\\<^sup>2)\n\ngoal (1 subgoal):\n 1. odd (a1\\<^sup>2) \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "assume \"even (a3^2)\""], ["proof (state)\nthis:\n  even (a3\\<^sup>2)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "moreover"], ["proof (state)\nthis:\n  even (a3\\<^sup>2)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "from ass"], ["proof (chain)\npicking this:\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)", "have \"sum4sq_int(a1,a4,a2,a3)=p*x\""], ["proof (prove)\nusing this:\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)\n\ngoal (1 subgoal):\n 1. sum4sq_int (a1, a4, a2, a3) = p * x", "by (auto simp add: sum4sq_int_def)"], ["proof (state)\nthis:\n  sum4sq_int (a1, a4, a2, a3) = p * x\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "ultimately"], ["proof (chain)\npicking this:\n  even (a3\\<^sup>2)\n  sum4sq_int (a1, a4, a2, a3) = p * x", "show ?thesis"], ["proof (prove)\nusing this:\n  even (a3\\<^sup>2)\n  sum4sq_int (a1, a4, a2, a3) = p * x\n\ngoal (1 subgoal):\n 1. \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "using odd34 odd1 ev2"], ["proof (prove)\nusing this:\n  even (a3\\<^sup>2)\n  sum4sq_int (a1, a4, a2, a3) = p * x\n  odd (a3\\<^sup>2 + a4\\<^sup>2)\n  odd (a1\\<^sup>2)\n  even (a2\\<^sup>2)\n\ngoal (1 subgoal):\n 1. \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "by force"], ["proof (state)\nthis:\n  \\<exists>b1 b2 b3 b4.\n     p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n     even (b1 + b2) \\<and> even (b3 + b4)\n\ngoal (1 subgoal):\n 1. odd (a3\\<^sup>2) \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. odd (a3\\<^sup>2) \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "assume \"\\<not> even (a3^2)\""], ["proof (state)\nthis:\n  odd (a3\\<^sup>2)\n\ngoal (1 subgoal):\n 1. odd (a3\\<^sup>2) \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "moreover"], ["proof (state)\nthis:\n  odd (a3\\<^sup>2)\n\ngoal (1 subgoal):\n 1. odd (a3\\<^sup>2) \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "from ass"], ["proof (chain)\npicking this:\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)", "have \"sum4sq_int(a1,a3,a2,a4)=p*x\""], ["proof (prove)\nusing this:\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)\n\ngoal (1 subgoal):\n 1. sum4sq_int (a1, a3, a2, a4) = p * x", "by (auto simp add: sum4sq_int_def)"], ["proof (state)\nthis:\n  sum4sq_int (a1, a3, a2, a4) = p * x\n\ngoal (1 subgoal):\n 1. odd (a3\\<^sup>2) \\<Longrightarrow>\n    \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "ultimately"], ["proof (chain)\npicking this:\n  odd (a3\\<^sup>2)\n  sum4sq_int (a1, a3, a2, a4) = p * x", "show ?thesis"], ["proof (prove)\nusing this:\n  odd (a3\\<^sup>2)\n  sum4sq_int (a1, a3, a2, a4) = p * x\n\ngoal (1 subgoal):\n 1. \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "using odd34 odd1 ev2"], ["proof (prove)\nusing this:\n  odd (a3\\<^sup>2)\n  sum4sq_int (a1, a3, a2, a4) = p * x\n  odd (a3\\<^sup>2 + a4\\<^sup>2)\n  odd (a1\\<^sup>2)\n  even (a2\\<^sup>2)\n\ngoal (1 subgoal):\n 1. \\<exists>b1 b2 b3 b4.\n       p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n       even (b1 + b2) \\<and> even (b3 + b4)", "by force"], ["proof (state)\nthis:\n  \\<exists>b1 b2 b3 b4.\n     p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n     even (b1 + b2) \\<and> even (b3 + b4)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>b1 b2 b3 b4.\n     p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n     even (b1 + b2) \\<and> even (b3 + b4)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>b1 b2 b3 b4.\n     p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n     even (b1 + b2) \\<and> even (b3 + b4)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>b1 b2 b3 b4.\n     p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n     even (b1 + b2) \\<and> even (b3 + b4)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "then"], ["proof (chain)\npicking this:\n  \\<exists>b1 b2 b3 b4.\n     p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n     even (b1 + b2) \\<and> even (b3 + b4)", "obtain b1 b2 b3 b4\n          where b: \"p*x = sum4sq_int(b1,b2,b3,b4) \\<and> even (b1+b2) \\<and> even (b3+b4)\""], ["proof (prove)\nusing this:\n  \\<exists>b1 b2 b3 b4.\n     p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n     even (b1 + b2) \\<and> even (b3 + b4)\n\ngoal (1 subgoal):\n 1. (\\<And>b1 b2 b3 b4.\n        p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n        even (b1 + b2) \\<and> even (b3 + b4) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n  even (b1 + b2) \\<and> even (b3 + b4)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "then"], ["proof (chain)\npicking this:\n  p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n  even (b1 + b2) \\<and> even (b3 + b4)", "obtain c1 c3 where c13: \"b1+b2 = 2*c1 \\<and> b3+b4 = 2*c3\""], ["proof (prove)\nusing this:\n  p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n  even (b1 + b2) \\<and> even (b3 + b4)\n\ngoal (1 subgoal):\n 1. (\\<And>c1 c3.\n        b1 + b2 = 2 * c1 \\<and> b3 + b4 = 2 * c3 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using evenE[of \"b1+b2\"] evenE[of \"b3+b4\"]"], ["proof (prove)\nusing this:\n  p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n  even (b1 + b2) \\<and> even (b3 + b4)\n  \\<lbrakk>even (b1 + b2);\n   \\<And>b. b1 + b2 = 2 * b \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>even (b3 + b4);\n   \\<And>b. b3 + b4 = 2 * b \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>c1 c3.\n        b1 + b2 = 2 * c1 \\<and> b3 + b4 = 2 * c3 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by meson"], ["proof (state)\nthis:\n  b1 + b2 = 2 * c1 \\<and> b3 + b4 = 2 * c3\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "from b"], ["proof (chain)\npicking this:\n  p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n  even (b1 + b2) \\<and> even (b3 + b4)", "have \"even (b1-b2) \\<and> even (b3-b4)\""], ["proof (prove)\nusing this:\n  p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n  even (b1 + b2) \\<and> even (b3 + b4)\n\ngoal (1 subgoal):\n 1. even (b1 - b2) \\<and> even (b3 - b4)", "by simp"], ["proof (state)\nthis:\n  even (b1 - b2) \\<and> even (b3 - b4)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "then"], ["proof (chain)\npicking this:\n  even (b1 - b2) \\<and> even (b3 - b4)", "obtain c2 c4 where c24: \"b1-b2 = 2*c2 \\<and> b3-b4 = 2*c4\""], ["proof (prove)\nusing this:\n  even (b1 - b2) \\<and> even (b3 - b4)\n\ngoal (1 subgoal):\n 1. (\\<And>c2 c4.\n        b1 - b2 = 2 * c2 \\<and> b3 - b4 = 2 * c4 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using evenE[of \"b1-b2\"] evenE[of \"b3-b4\"]"], ["proof (prove)\nusing this:\n  even (b1 - b2) \\<and> even (b3 - b4)\n  \\<lbrakk>even (b1 - b2);\n   \\<And>b. b1 - b2 = 2 * b \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>even (b3 - b4);\n   \\<And>b. b3 - b4 = 2 * b \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>c2 c4.\n        b1 - b2 = 2 * c2 \\<and> b3 - b4 = 2 * c4 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by meson"], ["proof (state)\nthis:\n  b1 - b2 = 2 * c2 \\<and> b3 - b4 = 2 * c4\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "from evx"], ["proof (chain)\npicking this:\n  even x", "obtain y where y: \"x = 2*y\""], ["proof (prove)\nusing this:\n  even x\n\ngoal (1 subgoal):\n 1. (\\<And>y. x = 2 * y \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using evenE"], ["proof (prove)\nusing this:\n  even x\n  \\<lbrakk>even ?a;\n   \\<And>b. ?a = (2::?'a) * b \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>y. x = 2 * y \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  x = 2 * y\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "hence \"4*(p*y) = 2*(p*x)\""], ["proof (prove)\nusing this:\n  x = 2 * y\n\ngoal (1 subgoal):\n 1. 4 * (p * y) = 2 * (p * x)", "by (simp add: ac_simps)"], ["proof (state)\nthis:\n  4 * (p * y) = 2 * (p * x)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "also"], ["proof (state)\nthis:\n  4 * (p * y) = 2 * (p * x)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "from b"], ["proof (chain)\npicking this:\n  p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n  even (b1 + b2) \\<and> even (b3 + b4)", "have \"\\<dots> = 2*b1^2 + 2*b2^2 + 2*b3^2 + 2*b4^2\""], ["proof (prove)\nusing this:\n  p * x = sum4sq_int (b1, b2, b3, b4) \\<and>\n  even (b1 + b2) \\<and> even (b3 + b4)\n\ngoal (1 subgoal):\n 1. 2 * (p * x) =\n    2 * b1\\<^sup>2 + 2 * b2\\<^sup>2 + 2 * b3\\<^sup>2 + 2 * b4\\<^sup>2", "by (auto simp: sum4sq_int_def)"], ["proof (state)\nthis:\n  2 * (p * x) =\n  2 * b1\\<^sup>2 + 2 * b2\\<^sup>2 + 2 * b3\\<^sup>2 + 2 * b4\\<^sup>2\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "also"], ["proof (state)\nthis:\n  2 * (p * x) =\n  2 * b1\\<^sup>2 + 2 * b2\\<^sup>2 + 2 * b3\\<^sup>2 + 2 * b4\\<^sup>2\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "have \"\\<dots> = (b1 + b2)^2 + (b1 - b2)^2 + (b3 + b4)^2 + (b3 - b4)^2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 * b1\\<^sup>2 + 2 * b2\\<^sup>2 + 2 * b3\\<^sup>2 + 2 * b4\\<^sup>2 =\n    (b1 + b2)\\<^sup>2 + (b1 - b2)\\<^sup>2 + (b3 + b4)\\<^sup>2 +\n    (b3 - b4)\\<^sup>2", "by (auto simp add: power2_eq_square algebra_simps)"], ["proof (state)\nthis:\n  2 * b1\\<^sup>2 + 2 * b2\\<^sup>2 + 2 * b3\\<^sup>2 + 2 * b4\\<^sup>2 =\n  (b1 + b2)\\<^sup>2 + (b1 - b2)\\<^sup>2 + (b3 + b4)\\<^sup>2 +\n  (b3 - b4)\\<^sup>2\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "also"], ["proof (state)\nthis:\n  2 * b1\\<^sup>2 + 2 * b2\\<^sup>2 + 2 * b3\\<^sup>2 + 2 * b4\\<^sup>2 =\n  (b1 + b2)\\<^sup>2 + (b1 - b2)\\<^sup>2 + (b3 + b4)\\<^sup>2 +\n  (b3 - b4)\\<^sup>2\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "with c13 c24"], ["proof (chain)\npicking this:\n  b1 + b2 = 2 * c1 \\<and> b3 + b4 = 2 * c3\n  b1 - b2 = 2 * c2 \\<and> b3 - b4 = 2 * c4\n  2 * b1\\<^sup>2 + 2 * b2\\<^sup>2 + 2 * b3\\<^sup>2 + 2 * b4\\<^sup>2 =\n  (b1 + b2)\\<^sup>2 + (b1 - b2)\\<^sup>2 + (b3 + b4)\\<^sup>2 +\n  (b3 - b4)\\<^sup>2", "have \"\\<dots> = 4*(c1^2 + c2^2 + c3^2 + c4^2)\""], ["proof (prove)\nusing this:\n  b1 + b2 = 2 * c1 \\<and> b3 + b4 = 2 * c3\n  b1 - b2 = 2 * c2 \\<and> b3 - b4 = 2 * c4\n  2 * b1\\<^sup>2 + 2 * b2\\<^sup>2 + 2 * b3\\<^sup>2 + 2 * b4\\<^sup>2 =\n  (b1 + b2)\\<^sup>2 + (b1 - b2)\\<^sup>2 + (b3 + b4)\\<^sup>2 +\n  (b3 - b4)\\<^sup>2\n\ngoal (1 subgoal):\n 1. (b1 + b2)\\<^sup>2 + (b1 - b2)\\<^sup>2 + (b3 + b4)\\<^sup>2 +\n    (b3 - b4)\\<^sup>2 =\n    4 * (c1\\<^sup>2 + c2\\<^sup>2 + c3\\<^sup>2 + c4\\<^sup>2)", "by (auto simp add: power_mult_distrib)"], ["proof (state)\nthis:\n  (b1 + b2)\\<^sup>2 + (b1 - b2)\\<^sup>2 + (b3 + b4)\\<^sup>2 +\n  (b3 - b4)\\<^sup>2 =\n  4 * (c1\\<^sup>2 + c2\\<^sup>2 + c3\\<^sup>2 + c4\\<^sup>2)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "finally"], ["proof (chain)\npicking this:\n  4 * (p * y) = 4 * (c1\\<^sup>2 + c2\\<^sup>2 + c3\\<^sup>2 + c4\\<^sup>2)", "have \"p * y = sum4sq_int(c1,c2,c3,c4)\""], ["proof (prove)\nusing this:\n  4 * (p * y) = 4 * (c1\\<^sup>2 + c2\\<^sup>2 + c3\\<^sup>2 + c4\\<^sup>2)\n\ngoal (1 subgoal):\n 1. p * y = sum4sq_int (c1, c2, c3, c4)", "by (auto simp add: sum4sq_int_def)"], ["proof (state)\nthis:\n  p * y = sum4sq_int (c1, c2, c3, c4)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "moreover"], ["proof (state)\nthis:\n  p * y = sum4sq_int (c1, c2, c3, c4)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "from y ass"], ["proof (chain)\npicking this:\n  x = 2 * y\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)", "have \"0 < y \\<and> y < p \\<and> (nat y) - 1 < (nat x) - 1\""], ["proof (prove)\nusing this:\n  x = 2 * y\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)\n\ngoal (1 subgoal):\n 1. 0 < y \\<and> y < p \\<and> nat y - 1 < nat x - 1", "by arith"], ["proof (state)\nthis:\n  0 < y \\<and> y < p \\<and> nat y - 1 < nat x - 1\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "ultimately"], ["proof (chain)\npicking this:\n  p * y = sum4sq_int (c1, c2, c3, c4)\n  0 < y \\<and> y < p \\<and> nat y - 1 < nat x - 1", "show ?thesis"], ["proof (prove)\nusing this:\n  p * y = sum4sq_int (c1, c2, c3, c4)\n  0 < y \\<and> y < p \\<and> nat y - 1 < nat x - 1\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "by blast"], ["proof (state)\nthis:\n  \\<exists>y.\n     nat y - 1 < nat x - 1 \\<and>\n     0 < y \\<and>\n     y < p \\<and>\n     (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))\n\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "assume xodd: \"\\<not> even x\""], ["proof (state)\nthis:\n  odd x\n\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "with ass"], ["proof (chain)\npicking this:\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)\n  odd x", "have \"\\<exists> c1 c2 c3 c4. 2*\\<bar>a1-c1*x\\<bar>\\<le>x \\<and> 2*\\<bar>a2-c2*x\\<bar>\\<le>x \\<and> 2*\\<bar>a3-c3*x\\<bar>\\<le>x \\<and> 2*\\<bar>a4-c4*x\\<bar>\\<le>x\""], ["proof (prove)\nusing this:\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)\n  odd x\n\ngoal (1 subgoal):\n 1. \\<exists>c1 c2 c3 c4.\n       2 * \\<bar>a1 - c1 * x\\<bar> \\<le> x \\<and>\n       2 * \\<bar>a2 - c2 * x\\<bar> \\<le> x \\<and>\n       2 * \\<bar>a3 - c3 * x\\<bar> \\<le> x \\<and>\n       2 * \\<bar>a4 - c4 * x\\<bar> \\<le> x", "by (simp add: best_division_abs)"], ["proof (state)\nthis:\n  \\<exists>c1 c2 c3 c4.\n     2 * \\<bar>a1 - c1 * x\\<bar> \\<le> x \\<and>\n     2 * \\<bar>a2 - c2 * x\\<bar> \\<le> x \\<and>\n     2 * \\<bar>a3 - c3 * x\\<bar> \\<le> x \\<and>\n     2 * \\<bar>a4 - c4 * x\\<bar> \\<le> x\n\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "then"], ["proof (chain)\npicking this:\n  \\<exists>c1 c2 c3 c4.\n     2 * \\<bar>a1 - c1 * x\\<bar> \\<le> x \\<and>\n     2 * \\<bar>a2 - c2 * x\\<bar> \\<le> x \\<and>\n     2 * \\<bar>a3 - c3 * x\\<bar> \\<le> x \\<and>\n     2 * \\<bar>a4 - c4 * x\\<bar> \\<le> x", "obtain b1 c1 b2 c2 b3 c3 b4 c4 where\n          bc_def: \"b1 = a1-c1*x \\<and> b2 = a2-c2*x \\<and> b3 = a3-c3*x \\<and> b4 = a4-c4*x\"\n          and \"2*\\<bar>b1\\<bar>\\<le>x \\<and> 2*\\<bar>b2\\<bar>\\<le>x \\<and> 2*\\<bar>b3\\<bar>\\<le>x \\<and> 2*\\<bar>b4\\<bar>\\<le>x\""], ["proof (prove)\nusing this:\n  \\<exists>c1 c2 c3 c4.\n     2 * \\<bar>a1 - c1 * x\\<bar> \\<le> x \\<and>\n     2 * \\<bar>a2 - c2 * x\\<bar> \\<le> x \\<and>\n     2 * \\<bar>a3 - c3 * x\\<bar> \\<le> x \\<and>\n     2 * \\<bar>a4 - c4 * x\\<bar> \\<le> x\n\ngoal (1 subgoal):\n 1. (\\<And>b1 c1 b2 c2 b3 c3 b4 c4.\n        \\<lbrakk>b1 = a1 - c1 * x \\<and>\n                 b2 = a2 - c2 * x \\<and>\n                 b3 = a3 - c3 * x \\<and> b4 = a4 - c4 * x;\n         2 * \\<bar>b1\\<bar> \\<le> x \\<and>\n         2 * \\<bar>b2\\<bar> \\<le> x \\<and>\n         2 * \\<bar>b3\\<bar> \\<le> x \\<and>\n         2 * \\<bar>b4\\<bar> \\<le> x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  b1 = a1 - c1 * x \\<and>\n  b2 = a2 - c2 * x \\<and> b3 = a3 - c3 * x \\<and> b4 = a4 - c4 * x\n  2 * \\<bar>b1\\<bar> \\<le> x \\<and>\n  2 * \\<bar>b2\\<bar> \\<le> x \\<and>\n  2 * \\<bar>b3\\<bar> \\<le> x \\<and> 2 * \\<bar>b4\\<bar> \\<le> x\n\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "moreover"], ["proof (state)\nthis:\n  b1 = a1 - c1 * x \\<and>\n  b2 = a2 - c2 * x \\<and> b3 = a3 - c3 * x \\<and> b4 = a4 - c4 * x\n  2 * \\<bar>b1\\<bar> \\<le> x \\<and>\n  2 * \\<bar>b2\\<bar> \\<le> x \\<and>\n  2 * \\<bar>b3\\<bar> \\<le> x \\<and> 2 * \\<bar>b4\\<bar> \\<le> x\n\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "have \"2*\\<bar>b1\\<bar>\\<noteq>x \\<and> 2*\\<bar>b2\\<bar>\\<noteq>x \\<and> 2*\\<bar>b3\\<bar>\\<noteq>x \\<and> 2*\\<bar>b4\\<bar>\\<noteq>x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 * \\<bar>b1\\<bar> \\<noteq> x \\<and>\n    2 * \\<bar>b2\\<bar> \\<noteq> x \\<and>\n    2 * \\<bar>b3\\<bar> \\<noteq> x \\<and> 2 * \\<bar>b4\\<bar> \\<noteq> x", "using xodd"], ["proof (prove)\nusing this:\n  odd x\n\ngoal (1 subgoal):\n 1. 2 * \\<bar>b1\\<bar> \\<noteq> x \\<and>\n    2 * \\<bar>b2\\<bar> \\<noteq> x \\<and>\n    2 * \\<bar>b3\\<bar> \\<noteq> x \\<and> 2 * \\<bar>b4\\<bar> \\<noteq> x", "by fastforce"], ["proof (state)\nthis:\n  2 * \\<bar>b1\\<bar> \\<noteq> x \\<and>\n  2 * \\<bar>b2\\<bar> \\<noteq> x \\<and>\n  2 * \\<bar>b3\\<bar> \\<noteq> x \\<and> 2 * \\<bar>b4\\<bar> \\<noteq> x\n\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "ultimately"], ["proof (chain)\npicking this:\n  b1 = a1 - c1 * x \\<and>\n  b2 = a2 - c2 * x \\<and> b3 = a3 - c3 * x \\<and> b4 = a4 - c4 * x\n  2 * \\<bar>b1\\<bar> \\<le> x \\<and>\n  2 * \\<bar>b2\\<bar> \\<le> x \\<and>\n  2 * \\<bar>b3\\<bar> \\<le> x \\<and> 2 * \\<bar>b4\\<bar> \\<le> x\n  2 * \\<bar>b1\\<bar> \\<noteq> x \\<and>\n  2 * \\<bar>b2\\<bar> \\<noteq> x \\<and>\n  2 * \\<bar>b3\\<bar> \\<noteq> x \\<and> 2 * \\<bar>b4\\<bar> \\<noteq> x", "have bc_abs: \"2*\\<bar>b1\\<bar><x \\<and> 2*\\<bar>b2\\<bar><x \\<and> 2*\\<bar>b3\\<bar><x \\<and> 2*\\<bar>b4\\<bar><x\""], ["proof (prove)\nusing this:\n  b1 = a1 - c1 * x \\<and>\n  b2 = a2 - c2 * x \\<and> b3 = a3 - c3 * x \\<and> b4 = a4 - c4 * x\n  2 * \\<bar>b1\\<bar> \\<le> x \\<and>\n  2 * \\<bar>b2\\<bar> \\<le> x \\<and>\n  2 * \\<bar>b3\\<bar> \\<le> x \\<and> 2 * \\<bar>b4\\<bar> \\<le> x\n  2 * \\<bar>b1\\<bar> \\<noteq> x \\<and>\n  2 * \\<bar>b2\\<bar> \\<noteq> x \\<and>\n  2 * \\<bar>b3\\<bar> \\<noteq> x \\<and> 2 * \\<bar>b4\\<bar> \\<noteq> x\n\ngoal (1 subgoal):\n 1. 2 * \\<bar>b1\\<bar> < x \\<and>\n    2 * \\<bar>b2\\<bar> < x \\<and>\n    2 * \\<bar>b3\\<bar> < x \\<and> 2 * \\<bar>b4\\<bar> < x", "by auto"], ["proof (state)\nthis:\n  2 * \\<bar>b1\\<bar> < x \\<and>\n  2 * \\<bar>b2\\<bar> < x \\<and>\n  2 * \\<bar>b3\\<bar> < x \\<and> 2 * \\<bar>b4\\<bar> < x\n\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "let ?B = \"b1^2 + b2^2 + b3^2 + b4^2\""], ["proof (state)\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "let ?C = \"c1^2 + c2^2 + c3^2 + c4^2\""], ["proof (state)\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "have \"x dvd ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x dvd b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 = x * ?k", "from bc_def ass"], ["proof (chain)\npicking this:\n  b1 = a1 - c1 * x \\<and>\n  b2 = a2 - c2 * x \\<and> b3 = a3 - c3 * x \\<and> b4 = a4 - c4 * x\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)", "have\n            \"?B = p*x - 2*(a1*c1+a2*c2+a3*c3+a4*c4)*x + ?C*x^2\""], ["proof (prove)\nusing this:\n  b1 = a1 - c1 * x \\<and>\n  b2 = a2 - c2 * x \\<and> b3 = a3 - c3 * x \\<and> b4 = a4 - c4 * x\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)\n\ngoal (1 subgoal):\n 1. b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 =\n    p * x - 2 * (a1 * c1 + a2 * c2 + a3 * c3 + a4 * c4) * x +\n    (c1\\<^sup>2 + c2\\<^sup>2 + c3\\<^sup>2 + c4\\<^sup>2) * x\\<^sup>2", "unfolding sum4sq_int_def"], ["proof (prove)\nusing this:\n  b1 = a1 - c1 * x \\<and>\n  b2 = a2 - c2 * x \\<and> b3 = a3 - c3 * x \\<and> b4 = a4 - c4 * x\n  1 < x \\<and>\n  x < p \\<and>\n  p * x =\n  (case (a1, a2, a3, a4) of\n   (a, b, c, d) \\<Rightarrow> a\\<^sup>2 + b\\<^sup>2 + c\\<^sup>2 + d\\<^sup>2)\n\ngoal (1 subgoal):\n 1. b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 =\n    p * x - 2 * (a1 * c1 + a2 * c2 + a3 * c3 + a4 * c4) * x +\n    (c1\\<^sup>2 + c2\\<^sup>2 + c3\\<^sup>2 + c4\\<^sup>2) * x\\<^sup>2", "by (auto simp add: power2_eq_square algebra_simps)"], ["proof (state)\nthis:\n  b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 =\n  p * x - 2 * (a1 * c1 + a2 * c2 + a3 * c3 + a4 * c4) * x +\n  (c1\\<^sup>2 + c2\\<^sup>2 + c3\\<^sup>2 + c4\\<^sup>2) * x\\<^sup>2\n\ngoal (1 subgoal):\n 1. b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 = x * ?k", "thus \"?B = x*(p - 2*(a1*c1+a2*c2+a3*c3+a4*c4) + ?C*x)\""], ["proof (prove)\nusing this:\n  b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 =\n  p * x - 2 * (a1 * c1 + a2 * c2 + a3 * c3 + a4 * c4) * x +\n  (c1\\<^sup>2 + c2\\<^sup>2 + c3\\<^sup>2 + c4\\<^sup>2) * x\\<^sup>2\n\ngoal (1 subgoal):\n 1. b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 =\n    x *\n    (p - 2 * (a1 * c1 + a2 * c2 + a3 * c3 + a4 * c4) +\n     (c1\\<^sup>2 + c2\\<^sup>2 + c3\\<^sup>2 + c4\\<^sup>2) * x)", "by (auto simp add: ac_simps power2_eq_square\n              distrib_left right_diff_distrib)"], ["proof (state)\nthis:\n  b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 =\n  x *\n  (p - 2 * (a1 * c1 + a2 * c2 + a3 * c3 + a4 * c4) +\n   (c1\\<^sup>2 + c2\\<^sup>2 + c3\\<^sup>2 + c4\\<^sup>2) * x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x dvd b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2\n\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "then"], ["proof (chain)\npicking this:\n  x dvd b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2", "obtain y where y: \"?B = x * y\""], ["proof (prove)\nusing this:\n  x dvd b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 =\n        x * y \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: dvd_def)"], ["proof (state)\nthis:\n  b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 = x * y\n\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "let ?A1 = \"a1*b1 + a2*b2 + a3*b3 + a4*b4\""], ["proof (state)\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "let ?A2 = \"a1*b2 - a2*b1 - a3*b4 + a4*b3\""], ["proof (state)\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "let ?A3 = \"a1*b3 + a2*b4 - a3*b1 - a4*b2\""], ["proof (state)\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "let ?A4 = \"a1*b4 - a2*b3 + a3*b2 - a4*b1\""], ["proof (state)\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "let ?A = \"sum4sq_int(?A1,?A2,?A3,?A4)\""], ["proof (state)\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "have \"x dvd ?A1 \\<and> x dvd ?A2 \\<and> x dvd ?A3 \\<and> x dvd ?A4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x dvd a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4 \\<and>\n    x dvd a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3 \\<and>\n    x dvd a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2 \\<and>\n    x dvd a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1", "proof (safe)"], ["proof (state)\ngoal (4 subgoals):\n 1. x dvd a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4\n 2. x dvd a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3\n 3. x dvd a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2\n 4. x dvd a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1", "from bc_def"], ["proof (chain)\npicking this:\n  b1 = a1 - c1 * x \\<and>\n  b2 = a2 - c2 * x \\<and> b3 = a3 - c3 * x \\<and> b4 = a4 - c4 * x", "have\n            \"?A1 = (b1+c1*x)*b1 + (b2+c2*x)*b2 + (b3+c3*x)*b3 + (b4+c4*x)*b4\""], ["proof (prove)\nusing this:\n  b1 = a1 - c1 * x \\<and>\n  b2 = a2 - c2 * x \\<and> b3 = a3 - c3 * x \\<and> b4 = a4 - c4 * x\n\ngoal (1 subgoal):\n 1. a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4 =\n    (b1 + c1 * x) * b1 + (b2 + c2 * x) * b2 + (b3 + c3 * x) * b3 +\n    (b4 + c4 * x) * b4", "by simp"], ["proof (state)\nthis:\n  a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4 =\n  (b1 + c1 * x) * b1 + (b2 + c2 * x) * b2 + (b3 + c3 * x) * b3 +\n  (b4 + c4 * x) * b4\n\ngoal (4 subgoals):\n 1. x dvd a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4\n 2. x dvd a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3\n 3. x dvd a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2\n 4. x dvd a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1", "also"], ["proof (state)\nthis:\n  a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4 =\n  (b1 + c1 * x) * b1 + (b2 + c2 * x) * b2 + (b3 + c3 * x) * b3 +\n  (b4 + c4 * x) * b4\n\ngoal (4 subgoals):\n 1. x dvd a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4\n 2. x dvd a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3\n 3. x dvd a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2\n 4. x dvd a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1", "with y"], ["proof (chain)\npicking this:\n  b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 = x * y\n  a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4 =\n  (b1 + c1 * x) * b1 + (b2 + c2 * x) * b2 + (b3 + c3 * x) * b3 +\n  (b4 + c4 * x) * b4", "have \"\\<dots> = x*(y + c1*b1 + c2*b2 + c3*b3 + c4*b4)\""], ["proof (prove)\nusing this:\n  b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 = x * y\n  a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4 =\n  (b1 + c1 * x) * b1 + (b2 + c2 * x) * b2 + (b3 + c3 * x) * b3 +\n  (b4 + c4 * x) * b4\n\ngoal (1 subgoal):\n 1. (b1 + c1 * x) * b1 + (b2 + c2 * x) * b2 + (b3 + c3 * x) * b3 +\n    (b4 + c4 * x) * b4 =\n    x * (y + c1 * b1 + c2 * b2 + c3 * b3 + c4 * b4)", "by (auto simp add: distrib_left power2_eq_square ac_simps)"], ["proof (state)\nthis:\n  (b1 + c1 * x) * b1 + (b2 + c2 * x) * b2 + (b3 + c3 * x) * b3 +\n  (b4 + c4 * x) * b4 =\n  x * (y + c1 * b1 + c2 * b2 + c3 * b3 + c4 * b4)\n\ngoal (4 subgoals):\n 1. x dvd a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4\n 2. x dvd a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3\n 3. x dvd a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2\n 4. x dvd a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1", "finally"], ["proof (chain)\npicking this:\n  a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4 =\n  x * (y + c1 * b1 + c2 * b2 + c3 * b3 + c4 * b4)", "show \"x dvd ?A1\""], ["proof (prove)\nusing this:\n  a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4 =\n  x * (y + c1 * b1 + c2 * b2 + c3 * b3 + c4 * b4)\n\ngoal (1 subgoal):\n 1. x dvd a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4", "by auto"], ["proof (state)\nthis:\n  x dvd a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4\n\ngoal (3 subgoals):\n 1. x dvd a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3\n 2. x dvd a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2\n 3. x dvd a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1", "from bc_def"], ["proof (chain)\npicking this:\n  b1 = a1 - c1 * x \\<and>\n  b2 = a2 - c2 * x \\<and> b3 = a3 - c3 * x \\<and> b4 = a4 - c4 * x", "have\n            \"?A2 = (b1+c1*x)*b2 - (b2+c2*x)*b1 - (b3+c3*x)*b4 + (b4+c4*x)*b3\""], ["proof (prove)\nusing this:\n  b1 = a1 - c1 * x \\<and>\n  b2 = a2 - c2 * x \\<and> b3 = a3 - c3 * x \\<and> b4 = a4 - c4 * x\n\ngoal (1 subgoal):\n 1. a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3 =\n    (b1 + c1 * x) * b2 - (b2 + c2 * x) * b1 - (b3 + c3 * x) * b4 +\n    (b4 + c4 * x) * b3", "by simp"], ["proof (state)\nthis:\n  a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3 =\n  (b1 + c1 * x) * b2 - (b2 + c2 * x) * b1 - (b3 + c3 * x) * b4 +\n  (b4 + c4 * x) * b3\n\ngoal (3 subgoals):\n 1. x dvd a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3\n 2. x dvd a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2\n 3. x dvd a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1", "also"], ["proof (state)\nthis:\n  a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3 =\n  (b1 + c1 * x) * b2 - (b2 + c2 * x) * b1 - (b3 + c3 * x) * b4 +\n  (b4 + c4 * x) * b3\n\ngoal (3 subgoals):\n 1. x dvd a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3\n 2. x dvd a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2\n 3. x dvd a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1", "have \"\\<dots> = x*(c1*b2 - c2*b1 - c3*b4 + c4*b3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (b1 + c1 * x) * b2 - (b2 + c2 * x) * b1 - (b3 + c3 * x) * b4 +\n    (b4 + c4 * x) * b3 =\n    x * (c1 * b2 - c2 * b1 - c3 * b4 + c4 * b3)", "by (auto simp add: distrib_left right_diff_distrib ac_simps)"], ["proof (state)\nthis:\n  (b1 + c1 * x) * b2 - (b2 + c2 * x) * b1 - (b3 + c3 * x) * b4 +\n  (b4 + c4 * x) * b3 =\n  x * (c1 * b2 - c2 * b1 - c3 * b4 + c4 * b3)\n\ngoal (3 subgoals):\n 1. x dvd a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3\n 2. x dvd a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2\n 3. x dvd a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1", "finally"], ["proof (chain)\npicking this:\n  a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3 =\n  x * (c1 * b2 - c2 * b1 - c3 * b4 + c4 * b3)", "show \"x dvd ?A2\""], ["proof (prove)\nusing this:\n  a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3 =\n  x * (c1 * b2 - c2 * b1 - c3 * b4 + c4 * b3)\n\ngoal (1 subgoal):\n 1. x dvd a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3", "by auto"], ["proof (state)\nthis:\n  x dvd a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3\n\ngoal (2 subgoals):\n 1. x dvd a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2\n 2. x dvd a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1", "from bc_def"], ["proof (chain)\npicking this:\n  b1 = a1 - c1 * x \\<and>\n  b2 = a2 - c2 * x \\<and> b3 = a3 - c3 * x \\<and> b4 = a4 - c4 * x", "have\n            \"?A3 = (b1+c1*x)*b3 + (b2+c2*x)*b4 - (b3+c3*x)*b1 - (b4+c4*x)*b2\""], ["proof (prove)\nusing this:\n  b1 = a1 - c1 * x \\<and>\n  b2 = a2 - c2 * x \\<and> b3 = a3 - c3 * x \\<and> b4 = a4 - c4 * x\n\ngoal (1 subgoal):\n 1. a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2 =\n    (b1 + c1 * x) * b3 + (b2 + c2 * x) * b4 - (b3 + c3 * x) * b1 -\n    (b4 + c4 * x) * b2", "by simp"], ["proof (state)\nthis:\n  a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2 =\n  (b1 + c1 * x) * b3 + (b2 + c2 * x) * b4 - (b3 + c3 * x) * b1 -\n  (b4 + c4 * x) * b2\n\ngoal (2 subgoals):\n 1. x dvd a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2\n 2. x dvd a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1", "also"], ["proof (state)\nthis:\n  a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2 =\n  (b1 + c1 * x) * b3 + (b2 + c2 * x) * b4 - (b3 + c3 * x) * b1 -\n  (b4 + c4 * x) * b2\n\ngoal (2 subgoals):\n 1. x dvd a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2\n 2. x dvd a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1", "have \"\\<dots> = x*(c1*b3 + c2*b4 - c3*b1 - c4*b2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (b1 + c1 * x) * b3 + (b2 + c2 * x) * b4 - (b3 + c3 * x) * b1 -\n    (b4 + c4 * x) * b2 =\n    x * (c1 * b3 + c2 * b4 - c3 * b1 - c4 * b2)", "by (auto simp add: distrib_left right_diff_distrib ac_simps)"], ["proof (state)\nthis:\n  (b1 + c1 * x) * b3 + (b2 + c2 * x) * b4 - (b3 + c3 * x) * b1 -\n  (b4 + c4 * x) * b2 =\n  x * (c1 * b3 + c2 * b4 - c3 * b1 - c4 * b2)\n\ngoal (2 subgoals):\n 1. x dvd a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2\n 2. x dvd a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1", "finally"], ["proof (chain)\npicking this:\n  a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2 =\n  x * (c1 * b3 + c2 * b4 - c3 * b1 - c4 * b2)", "show \"x dvd ?A3\""], ["proof (prove)\nusing this:\n  a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2 =\n  x * (c1 * b3 + c2 * b4 - c3 * b1 - c4 * b2)\n\ngoal (1 subgoal):\n 1. x dvd a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2", "by auto"], ["proof (state)\nthis:\n  x dvd a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2\n\ngoal (1 subgoal):\n 1. x dvd a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1", "from bc_def"], ["proof (chain)\npicking this:\n  b1 = a1 - c1 * x \\<and>\n  b2 = a2 - c2 * x \\<and> b3 = a3 - c3 * x \\<and> b4 = a4 - c4 * x", "have\n            \"?A4 = (b1+c1*x)*b4 - (b2+c2*x)*b3 + (b3+c3*x)*b2 - (b4+c4*x)*b1\""], ["proof (prove)\nusing this:\n  b1 = a1 - c1 * x \\<and>\n  b2 = a2 - c2 * x \\<and> b3 = a3 - c3 * x \\<and> b4 = a4 - c4 * x\n\ngoal (1 subgoal):\n 1. a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1 =\n    (b1 + c1 * x) * b4 - (b2 + c2 * x) * b3 + (b3 + c3 * x) * b2 -\n    (b4 + c4 * x) * b1", "by simp"], ["proof (state)\nthis:\n  a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1 =\n  (b1 + c1 * x) * b4 - (b2 + c2 * x) * b3 + (b3 + c3 * x) * b2 -\n  (b4 + c4 * x) * b1\n\ngoal (1 subgoal):\n 1. x dvd a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1", "also"], ["proof (state)\nthis:\n  a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1 =\n  (b1 + c1 * x) * b4 - (b2 + c2 * x) * b3 + (b3 + c3 * x) * b2 -\n  (b4 + c4 * x) * b1\n\ngoal (1 subgoal):\n 1. x dvd a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1", "have \"\\<dots> = x*(c1*b4 - c2*b3 + c3*b2 - c4*b1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (b1 + c1 * x) * b4 - (b2 + c2 * x) * b3 + (b3 + c3 * x) * b2 -\n    (b4 + c4 * x) * b1 =\n    x * (c1 * b4 - c2 * b3 + c3 * b2 - c4 * b1)", "by (auto simp add: distrib_left right_diff_distrib ac_simps)"], ["proof (state)\nthis:\n  (b1 + c1 * x) * b4 - (b2 + c2 * x) * b3 + (b3 + c3 * x) * b2 -\n  (b4 + c4 * x) * b1 =\n  x * (c1 * b4 - c2 * b3 + c3 * b2 - c4 * b1)\n\ngoal (1 subgoal):\n 1. x dvd a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1", "finally"], ["proof (chain)\npicking this:\n  a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1 =\n  x * (c1 * b4 - c2 * b3 + c3 * b2 - c4 * b1)", "show \"x dvd ?A4\""], ["proof (prove)\nusing this:\n  a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1 =\n  x * (c1 * b4 - c2 * b3 + c3 * b2 - c4 * b1)\n\ngoal (1 subgoal):\n 1. x dvd a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1", "by auto"], ["proof (state)\nthis:\n  x dvd a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x dvd a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4 \\<and>\n  x dvd a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3 \\<and>\n  x dvd a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2 \\<and>\n  x dvd a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1\n\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "then"], ["proof (chain)\npicking this:\n  x dvd a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4 \\<and>\n  x dvd a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3 \\<and>\n  x dvd a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2 \\<and>\n  x dvd a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1", "obtain d1 d2 d3 d4 where d:\n          \"?A1=x*d1 \\<and> ?A2=x*d2 \\<and> ?A3=x*d3 \\<and> ?A4=x*d4\""], ["proof (prove)\nusing this:\n  x dvd a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4 \\<and>\n  x dvd a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3 \\<and>\n  x dvd a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2 \\<and>\n  x dvd a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1\n\ngoal (1 subgoal):\n 1. (\\<And>d1 d2 d3 d4.\n        a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4 = x * d1 \\<and>\n        a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3 = x * d2 \\<and>\n        a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2 = x * d3 \\<and>\n        a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1 = x * d4 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: dvd_def)"], ["proof (state)\nthis:\n  a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4 = x * d1 \\<and>\n  a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3 = x * d2 \\<and>\n  a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2 = x * d3 \\<and>\n  a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1 = x * d4\n\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "let ?D = \"sum4sq_int(d1,d2,d3,d4)\""], ["proof (state)\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "from d"], ["proof (chain)\npicking this:\n  a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4 = x * d1 \\<and>\n  a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3 = x * d2 \\<and>\n  a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2 = x * d3 \\<and>\n  a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1 = x * d4", "have \"x^2*?D = ?A\""], ["proof (prove)\nusing this:\n  a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4 = x * d1 \\<and>\n  a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3 = x * d2 \\<and>\n  a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2 = x * d3 \\<and>\n  a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1 = x * d4\n\ngoal (1 subgoal):\n 1. x\\<^sup>2 * sum4sq_int (d1, d2, d3, d4) =\n    sum4sq_int\n     (a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4,\n      a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3,\n      a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2,\n      a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1)", "by (auto simp only: sum4sq_int_def power_mult_distrib distrib_left)"], ["proof (state)\nthis:\n  x\\<^sup>2 * sum4sq_int (d1, d2, d3, d4) =\n  sum4sq_int\n   (a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4,\n    a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3,\n    a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2,\n    a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1)\n\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "also"], ["proof (state)\nthis:\n  x\\<^sup>2 * sum4sq_int (d1, d2, d3, d4) =\n  sum4sq_int\n   (a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4,\n    a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3,\n    a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2,\n    a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1)\n\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "have \"\\<dots> = sum4sq_int(a1,a2,a3,a4)*sum4sq_int(b1,b2,b3,b4)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum4sq_int\n     (a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4,\n      a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3,\n      a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2,\n      a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1) =\n    sum4sq_int (a1, a2, a3, a4) * sum4sq_int (b1, b2, b3, b4)", "by (simp only: mult_sum4sq_int)"], ["proof (state)\nthis:\n  sum4sq_int\n   (a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4,\n    a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3,\n    a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2,\n    a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1) =\n  sum4sq_int (a1, a2, a3, a4) * sum4sq_int (b1, b2, b3, b4)\n\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "also"], ["proof (state)\nthis:\n  sum4sq_int\n   (a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4,\n    a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3,\n    a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2,\n    a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1) =\n  sum4sq_int (a1, a2, a3, a4) * sum4sq_int (b1, b2, b3, b4)\n\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "with y ass"], ["proof (chain)\npicking this:\n  b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 = x * y\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)\n  sum4sq_int\n   (a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4,\n    a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3,\n    a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2,\n    a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1) =\n  sum4sq_int (a1, a2, a3, a4) * sum4sq_int (b1, b2, b3, b4)", "have \"\\<dots> = (p*x)*(x*y)\""], ["proof (prove)\nusing this:\n  b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 = x * y\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)\n  sum4sq_int\n   (a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4,\n    a1 * b2 - a2 * b1 - a3 * b4 + a4 * b3,\n    a1 * b3 + a2 * b4 - a3 * b1 - a4 * b2,\n    a1 * b4 - a2 * b3 + a3 * b2 - a4 * b1) =\n  sum4sq_int (a1, a2, a3, a4) * sum4sq_int (b1, b2, b3, b4)\n\ngoal (1 subgoal):\n 1. sum4sq_int (a1, a2, a3, a4) * sum4sq_int (b1, b2, b3, b4) =\n    p * x * (x * y)", "by (auto simp add: sum4sq_int_def)"], ["proof (state)\nthis:\n  sum4sq_int (a1, a2, a3, a4) * sum4sq_int (b1, b2, b3, b4) =\n  p * x * (x * y)\n\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "also"], ["proof (state)\nthis:\n  sum4sq_int (a1, a2, a3, a4) * sum4sq_int (b1, b2, b3, b4) =\n  p * x * (x * y)\n\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "have \"\\<dots> = x^2*(p*y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p * x * (x * y) = x\\<^sup>2 * (p * y)", "by (simp only: power2_eq_square ac_simps)"], ["proof (state)\nthis:\n  p * x * (x * y) = x\\<^sup>2 * (p * y)\n\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "finally"], ["proof (chain)\npicking this:\n  x\\<^sup>2 * sum4sq_int (d1, d2, d3, d4) = x\\<^sup>2 * (p * y)", "have \"x^2*(?D - p*y) = 0\""], ["proof (prove)\nusing this:\n  x\\<^sup>2 * sum4sq_int (d1, d2, d3, d4) = x\\<^sup>2 * (p * y)\n\ngoal (1 subgoal):\n 1. x\\<^sup>2 * (sum4sq_int (d1, d2, d3, d4) - p * y) = 0", "by (auto simp add: right_diff_distrib)"], ["proof (state)\nthis:\n  x\\<^sup>2 * (sum4sq_int (d1, d2, d3, d4) - p * y) = 0\n\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "with ass"], ["proof (chain)\npicking this:\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)\n  x\\<^sup>2 * (sum4sq_int (d1, d2, d3, d4) - p * y) = 0", "have \"p*y = ?D\""], ["proof (prove)\nusing this:\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)\n  x\\<^sup>2 * (sum4sq_int (d1, d2, d3, d4) - p * y) = 0\n\ngoal (1 subgoal):\n 1. p * y = sum4sq_int (d1, d2, d3, d4)", "by auto"], ["proof (state)\nthis:\n  p * y = sum4sq_int (d1, d2, d3, d4)\n\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "moreover"], ["proof (state)\nthis:\n  p * y = sum4sq_int (d1, d2, d3, d4)\n\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "have y_l_x: \"y < x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y < x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. y < x", "have \"4*b1^2 = (2*\\<bar>b1\\<bar>)^2 \\<and> 4*b2^2 = (2*\\<bar>b2\\<bar>)^2 \\<and>\n            4*b3^2 = (2*\\<bar>b3\\<bar>)^2 \\<and> 4*b4^2 = (2*\\<bar>b4\\<bar>)^2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 4 * b1\\<^sup>2 = (2 * \\<bar>b1\\<bar>)\\<^sup>2 \\<and>\n    4 * b2\\<^sup>2 = (2 * \\<bar>b2\\<bar>)\\<^sup>2 \\<and>\n    4 * b3\\<^sup>2 = (2 * \\<bar>b3\\<bar>)\\<^sup>2 \\<and>\n    4 * b4\\<^sup>2 = (2 * \\<bar>b4\\<bar>)\\<^sup>2", "by simp"], ["proof (state)\nthis:\n  4 * b1\\<^sup>2 = (2 * \\<bar>b1\\<bar>)\\<^sup>2 \\<and>\n  4 * b2\\<^sup>2 = (2 * \\<bar>b2\\<bar>)\\<^sup>2 \\<and>\n  4 * b3\\<^sup>2 = (2 * \\<bar>b3\\<bar>)\\<^sup>2 \\<and>\n  4 * b4\\<^sup>2 = (2 * \\<bar>b4\\<bar>)\\<^sup>2\n\ngoal (1 subgoal):\n 1. y < x", "with bc_abs"], ["proof (chain)\npicking this:\n  2 * \\<bar>b1\\<bar> < x \\<and>\n  2 * \\<bar>b2\\<bar> < x \\<and>\n  2 * \\<bar>b3\\<bar> < x \\<and> 2 * \\<bar>b4\\<bar> < x\n  4 * b1\\<^sup>2 = (2 * \\<bar>b1\\<bar>)\\<^sup>2 \\<and>\n  4 * b2\\<^sup>2 = (2 * \\<bar>b2\\<bar>)\\<^sup>2 \\<and>\n  4 * b3\\<^sup>2 = (2 * \\<bar>b3\\<bar>)\\<^sup>2 \\<and>\n  4 * b4\\<^sup>2 = (2 * \\<bar>b4\\<bar>)\\<^sup>2", "have \"4*b1^2<x^2 \\<and> 4*b2^2<x^2 \\<and> 4*b3^2<x^2 \\<and> 4*b4^2<x^2\""], ["proof (prove)\nusing this:\n  2 * \\<bar>b1\\<bar> < x \\<and>\n  2 * \\<bar>b2\\<bar> < x \\<and>\n  2 * \\<bar>b3\\<bar> < x \\<and> 2 * \\<bar>b4\\<bar> < x\n  4 * b1\\<^sup>2 = (2 * \\<bar>b1\\<bar>)\\<^sup>2 \\<and>\n  4 * b2\\<^sup>2 = (2 * \\<bar>b2\\<bar>)\\<^sup>2 \\<and>\n  4 * b3\\<^sup>2 = (2 * \\<bar>b3\\<bar>)\\<^sup>2 \\<and>\n  4 * b4\\<^sup>2 = (2 * \\<bar>b4\\<bar>)\\<^sup>2\n\ngoal (1 subgoal):\n 1. 4 * b1\\<^sup>2 < x\\<^sup>2 \\<and>\n    4 * b2\\<^sup>2 < x\\<^sup>2 \\<and>\n    4 * b3\\<^sup>2 < x\\<^sup>2 \\<and> 4 * b4\\<^sup>2 < x\\<^sup>2", "using power_strict_mono [of \"2*\\<bar>b\\<bar>\" x 2 for b]"], ["proof (prove)\nusing this:\n  2 * \\<bar>b1\\<bar> < x \\<and>\n  2 * \\<bar>b2\\<bar> < x \\<and>\n  2 * \\<bar>b3\\<bar> < x \\<and> 2 * \\<bar>b4\\<bar> < x\n  4 * b1\\<^sup>2 = (2 * \\<bar>b1\\<bar>)\\<^sup>2 \\<and>\n  4 * b2\\<^sup>2 = (2 * \\<bar>b2\\<bar>)\\<^sup>2 \\<and>\n  4 * b3\\<^sup>2 = (2 * \\<bar>b3\\<bar>)\\<^sup>2 \\<and>\n  4 * b4\\<^sup>2 = (2 * \\<bar>b4\\<bar>)\\<^sup>2\n  \\<lbrakk>2 * \\<bar>?ba2\\<bar> < x; 0 \\<le> 2 * \\<bar>?ba2\\<bar>;\n   0 < 2\\<rbrakk>\n  \\<Longrightarrow> (2 * \\<bar>?ba2\\<bar>)\\<^sup>2 < x\\<^sup>2\n\ngoal (1 subgoal):\n 1. 4 * b1\\<^sup>2 < x\\<^sup>2 \\<and>\n    4 * b2\\<^sup>2 < x\\<^sup>2 \\<and>\n    4 * b3\\<^sup>2 < x\\<^sup>2 \\<and> 4 * b4\\<^sup>2 < x\\<^sup>2", "by auto"], ["proof (state)\nthis:\n  4 * b1\\<^sup>2 < x\\<^sup>2 \\<and>\n  4 * b2\\<^sup>2 < x\\<^sup>2 \\<and>\n  4 * b3\\<^sup>2 < x\\<^sup>2 \\<and> 4 * b4\\<^sup>2 < x\\<^sup>2\n\ngoal (1 subgoal):\n 1. y < x", "hence \"?B < x^2\""], ["proof (prove)\nusing this:\n  4 * b1\\<^sup>2 < x\\<^sup>2 \\<and>\n  4 * b2\\<^sup>2 < x\\<^sup>2 \\<and>\n  4 * b3\\<^sup>2 < x\\<^sup>2 \\<and> 4 * b4\\<^sup>2 < x\\<^sup>2\n\ngoal (1 subgoal):\n 1. b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 < x\\<^sup>2", "by auto"], ["proof (state)\nthis:\n  b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 < x\\<^sup>2\n\ngoal (1 subgoal):\n 1. y < x", "with y"], ["proof (chain)\npicking this:\n  b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 = x * y\n  b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 < x\\<^sup>2", "have \"x*(x-y) > 0\""], ["proof (prove)\nusing this:\n  b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 = x * y\n  b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 < x\\<^sup>2\n\ngoal (1 subgoal):\n 1. 0 < x * (x - y)", "by (auto simp add: power2_eq_square right_diff_distrib)"], ["proof (state)\nthis:\n  0 < x * (x - y)\n\ngoal (1 subgoal):\n 1. y < x", "moreover"], ["proof (state)\nthis:\n  0 < x * (x - y)\n\ngoal (1 subgoal):\n 1. y < x", "from ass"], ["proof (chain)\npicking this:\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)", "have \"x > 0\""], ["proof (prove)\nusing this:\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)\n\ngoal (1 subgoal):\n 1. 0 < x", "by simp"], ["proof (state)\nthis:\n  0 < x\n\ngoal (1 subgoal):\n 1. y < x", "ultimately"], ["proof (chain)\npicking this:\n  0 < x * (x - y)\n  0 < x", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < x * (x - y)\n  0 < x\n\ngoal (1 subgoal):\n 1. y < x", "using zero_less_mult_pos"], ["proof (prove)\nusing this:\n  0 < x * (x - y)\n  0 < x\n  \\<lbrakk>(0::?'a) < ?a * ?b; (0::?'a) < ?a\\<rbrakk>\n  \\<Longrightarrow> (0::?'a) < ?b\n\ngoal (1 subgoal):\n 1. y < x", "by fastforce"], ["proof (state)\nthis:\n  y < x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  y < x\n\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "moreover"], ["proof (state)\nthis:\n  y < x\n\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "have \"y > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < y", "have b2pos: \"b1^2 \\<ge> 0 \\<and> b2^2 \\<ge> 0 \\<and> b3^2 \\<ge> 0 \\<and> b4^2 \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> b1\\<^sup>2 \\<and>\n    0 \\<le> b2\\<^sup>2 \\<and> 0 \\<le> b3\\<^sup>2 \\<and> 0 \\<le> b4\\<^sup>2", "by simp"], ["proof (state)\nthis:\n  0 \\<le> b1\\<^sup>2 \\<and>\n  0 \\<le> b2\\<^sup>2 \\<and> 0 \\<le> b3\\<^sup>2 \\<and> 0 \\<le> b4\\<^sup>2\n\ngoal (1 subgoal):\n 1. 0 < y", "hence \"?B = 0 \\<or> ?B > 0\""], ["proof (prove)\nusing this:\n  0 \\<le> b1\\<^sup>2 \\<and>\n  0 \\<le> b2\\<^sup>2 \\<and> 0 \\<le> b3\\<^sup>2 \\<and> 0 \\<le> b4\\<^sup>2\n\ngoal (1 subgoal):\n 1. b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 = 0 \\<or>\n    0 < b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2", "by arith"], ["proof (state)\nthis:\n  b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 = 0 \\<or>\n  0 < b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2\n\ngoal (1 subgoal):\n 1. 0 < y", "moreover"], ["proof (state)\nthis:\n  b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 = 0 \\<or>\n  0 < b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2\n\ngoal (1 subgoal):\n 1. 0 < y", "{"], ["proof (state)\nthis:\n  b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 = 0 \\<or>\n  0 < b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2\n\ngoal (1 subgoal):\n 1. 0 < y", "assume \"?B = 0\""], ["proof (state)\nthis:\n  b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 = 0\n\ngoal (1 subgoal):\n 1. 0 < y", "moreover"], ["proof (state)\nthis:\n  b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 = 0\n\ngoal (1 subgoal):\n 1. 0 < y", "from b2pos"], ["proof (chain)\npicking this:\n  0 \\<le> b1\\<^sup>2 \\<and>\n  0 \\<le> b2\\<^sup>2 \\<and> 0 \\<le> b3\\<^sup>2 \\<and> 0 \\<le> b4\\<^sup>2", "have\n              \"?B-b1^2 \\<ge> 0 \\<and> ?B-b2^2 \\<ge> 0 \\<and> ?B-b3^2 \\<ge> 0 \\<and> ?B-b4^2 \\<ge> 0\""], ["proof (prove)\nusing this:\n  0 \\<le> b1\\<^sup>2 \\<and>\n  0 \\<le> b2\\<^sup>2 \\<and> 0 \\<le> b3\\<^sup>2 \\<and> 0 \\<le> b4\\<^sup>2\n\ngoal (1 subgoal):\n 1. 0 \\<le> b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 -\n            b1\\<^sup>2 \\<and>\n    0 \\<le> b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 -\n            b2\\<^sup>2 \\<and>\n    0 \\<le> b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 -\n            b3\\<^sup>2 \\<and>\n    0 \\<le> b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 - b4\\<^sup>2", "by arith"], ["proof (state)\nthis:\n  0 \\<le> b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 -\n          b1\\<^sup>2 \\<and>\n  0 \\<le> b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 -\n          b2\\<^sup>2 \\<and>\n  0 \\<le> b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 -\n          b3\\<^sup>2 \\<and>\n  0 \\<le> b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 - b4\\<^sup>2\n\ngoal (1 subgoal):\n 1. 0 < y", "ultimately"], ["proof (chain)\npicking this:\n  b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 = 0\n  0 \\<le> b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 -\n          b1\\<^sup>2 \\<and>\n  0 \\<le> b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 -\n          b2\\<^sup>2 \\<and>\n  0 \\<le> b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 -\n          b3\\<^sup>2 \\<and>\n  0 \\<le> b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 - b4\\<^sup>2", "have \"b1^2 \\<le> 0 \\<and> b2^2 \\<le> 0 \\<and> b3^2 \\<le> 0 \\<and> b4^2 \\<le> 0\""], ["proof (prove)\nusing this:\n  b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 = 0\n  0 \\<le> b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 -\n          b1\\<^sup>2 \\<and>\n  0 \\<le> b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 -\n          b2\\<^sup>2 \\<and>\n  0 \\<le> b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 -\n          b3\\<^sup>2 \\<and>\n  0 \\<le> b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 - b4\\<^sup>2\n\ngoal (1 subgoal):\n 1. b1\\<^sup>2 \\<le> 0 \\<and>\n    b2\\<^sup>2 \\<le> 0 \\<and> b3\\<^sup>2 \\<le> 0 \\<and> b4\\<^sup>2 \\<le> 0", "by auto"], ["proof (state)\nthis:\n  b1\\<^sup>2 \\<le> 0 \\<and>\n  b2\\<^sup>2 \\<le> 0 \\<and> b3\\<^sup>2 \\<le> 0 \\<and> b4\\<^sup>2 \\<le> 0\n\ngoal (1 subgoal):\n 1. 0 < y", "with b2pos"], ["proof (chain)\npicking this:\n  0 \\<le> b1\\<^sup>2 \\<and>\n  0 \\<le> b2\\<^sup>2 \\<and> 0 \\<le> b3\\<^sup>2 \\<and> 0 \\<le> b4\\<^sup>2\n  b1\\<^sup>2 \\<le> 0 \\<and>\n  b2\\<^sup>2 \\<le> 0 \\<and> b3\\<^sup>2 \\<le> 0 \\<and> b4\\<^sup>2 \\<le> 0", "have  \"b1^2 = 0 \\<and> b2^2 = 0 \\<and> b3^2 = 0 \\<and> b4^2 = 0\""], ["proof (prove)\nusing this:\n  0 \\<le> b1\\<^sup>2 \\<and>\n  0 \\<le> b2\\<^sup>2 \\<and> 0 \\<le> b3\\<^sup>2 \\<and> 0 \\<le> b4\\<^sup>2\n  b1\\<^sup>2 \\<le> 0 \\<and>\n  b2\\<^sup>2 \\<le> 0 \\<and> b3\\<^sup>2 \\<le> 0 \\<and> b4\\<^sup>2 \\<le> 0\n\ngoal (1 subgoal):\n 1. b1\\<^sup>2 = 0 \\<and>\n    b2\\<^sup>2 = 0 \\<and> b3\\<^sup>2 = 0 \\<and> b4\\<^sup>2 = 0", "by arith"], ["proof (state)\nthis:\n  b1\\<^sup>2 = 0 \\<and>\n  b2\\<^sup>2 = 0 \\<and> b3\\<^sup>2 = 0 \\<and> b4\\<^sup>2 = 0\n\ngoal (1 subgoal):\n 1. 0 < y", "hence \"b1 = 0 \\<and> b2 = 0 \\<and> b3 = 0 \\<and> b4 = 0\""], ["proof (prove)\nusing this:\n  b1\\<^sup>2 = 0 \\<and>\n  b2\\<^sup>2 = 0 \\<and> b3\\<^sup>2 = 0 \\<and> b4\\<^sup>2 = 0\n\ngoal (1 subgoal):\n 1. b1 = 0 \\<and> b2 = 0 \\<and> b3 = 0 \\<and> b4 = 0", "by auto"], ["proof (state)\nthis:\n  b1 = 0 \\<and> b2 = 0 \\<and> b3 = 0 \\<and> b4 = 0\n\ngoal (1 subgoal):\n 1. 0 < y", "with bc_def"], ["proof (chain)\npicking this:\n  b1 = a1 - c1 * x \\<and>\n  b2 = a2 - c2 * x \\<and> b3 = a3 - c3 * x \\<and> b4 = a4 - c4 * x\n  b1 = 0 \\<and> b2 = 0 \\<and> b3 = 0 \\<and> b4 = 0", "have \"x dvd a1 \\<and> x dvd a2 \\<and> x dvd a3 \\<and> x dvd a4\""], ["proof (prove)\nusing this:\n  b1 = a1 - c1 * x \\<and>\n  b2 = a2 - c2 * x \\<and> b3 = a3 - c3 * x \\<and> b4 = a4 - c4 * x\n  b1 = 0 \\<and> b2 = 0 \\<and> b3 = 0 \\<and> b4 = 0\n\ngoal (1 subgoal):\n 1. x dvd a1 \\<and> x dvd a2 \\<and> x dvd a3 \\<and> x dvd a4", "by auto"], ["proof (state)\nthis:\n  x dvd a1 \\<and> x dvd a2 \\<and> x dvd a3 \\<and> x dvd a4\n\ngoal (1 subgoal):\n 1. 0 < y", "hence \"x^2 dvd a1^2 \\<and> x^2 dvd a2^2 \\<and> x^2 dvd a3^2 \\<and> x^2 dvd a4^2\""], ["proof (prove)\nusing this:\n  x dvd a1 \\<and> x dvd a2 \\<and> x dvd a3 \\<and> x dvd a4\n\ngoal (1 subgoal):\n 1. x\\<^sup>2 dvd a1\\<^sup>2 \\<and>\n    x\\<^sup>2 dvd a2\\<^sup>2 \\<and>\n    x\\<^sup>2 dvd a3\\<^sup>2 \\<and> x\\<^sup>2 dvd a4\\<^sup>2", "by simp"], ["proof (state)\nthis:\n  x\\<^sup>2 dvd a1\\<^sup>2 \\<and>\n  x\\<^sup>2 dvd a2\\<^sup>2 \\<and>\n  x\\<^sup>2 dvd a3\\<^sup>2 \\<and> x\\<^sup>2 dvd a4\\<^sup>2\n\ngoal (1 subgoal):\n 1. 0 < y", "hence \"x^2 dvd a1^2+a2^2+a3^2+a4^2\""], ["proof (prove)\nusing this:\n  x\\<^sup>2 dvd a1\\<^sup>2 \\<and>\n  x\\<^sup>2 dvd a2\\<^sup>2 \\<and>\n  x\\<^sup>2 dvd a3\\<^sup>2 \\<and> x\\<^sup>2 dvd a4\\<^sup>2\n\ngoal (1 subgoal):\n 1. x\\<^sup>2 dvd a1\\<^sup>2 + a2\\<^sup>2 + a3\\<^sup>2 + a4\\<^sup>2", "by (simp only: dvd_add)"], ["proof (state)\nthis:\n  x\\<^sup>2 dvd a1\\<^sup>2 + a2\\<^sup>2 + a3\\<^sup>2 + a4\\<^sup>2\n\ngoal (1 subgoal):\n 1. 0 < y", "with ass"], ["proof (chain)\npicking this:\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)\n  x\\<^sup>2 dvd a1\\<^sup>2 + a2\\<^sup>2 + a3\\<^sup>2 + a4\\<^sup>2", "have \"x^2 dvd p*x\""], ["proof (prove)\nusing this:\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)\n  x\\<^sup>2 dvd a1\\<^sup>2 + a2\\<^sup>2 + a3\\<^sup>2 + a4\\<^sup>2\n\ngoal (1 subgoal):\n 1. x\\<^sup>2 dvd p * x", "by (auto simp only: sum4sq_int_def)"], ["proof (state)\nthis:\n  x\\<^sup>2 dvd p * x\n\ngoal (1 subgoal):\n 1. 0 < y", "hence \"x*x dvd x*p\""], ["proof (prove)\nusing this:\n  x\\<^sup>2 dvd p * x\n\ngoal (1 subgoal):\n 1. x * x dvd x * p", "by (simp only: power2_eq_square ac_simps)"], ["proof (state)\nthis:\n  x * x dvd x * p\n\ngoal (1 subgoal):\n 1. 0 < y", "with ass"], ["proof (chain)\npicking this:\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)\n  x * x dvd x * p", "have \"nat x dvd nat p\""], ["proof (prove)\nusing this:\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)\n  x * x dvd x * p\n\ngoal (1 subgoal):\n 1. nat x dvd nat p", "by (simp add: nat_dvd_iff)"], ["proof (state)\nthis:\n  nat x dvd nat p\n\ngoal (1 subgoal):\n 1. 0 < y", "moreover"], ["proof (state)\nthis:\n  nat x dvd nat p\n\ngoal (1 subgoal):\n 1. 0 < y", "from ass prp"], ["proof (chain)\npicking this:\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)\n  prime (nat p)", "have \"x \\<ge> 0 \\<and> x \\<noteq> 1 \\<and> x \\<noteq> p \\<and> prime (nat p)\""], ["proof (prove)\nusing this:\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)\n  prime (nat p)\n\ngoal (1 subgoal):\n 1. 0 \\<le> x \\<and> x \\<noteq> 1 \\<and> x \\<noteq> p \\<and> prime (nat p)", "by simp"], ["proof (state)\nthis:\n  0 \\<le> x \\<and> x \\<noteq> 1 \\<and> x \\<noteq> p \\<and> prime (nat p)\n\ngoal (1 subgoal):\n 1. 0 < y", "ultimately"], ["proof (chain)\npicking this:\n  nat x dvd nat p\n  0 \\<le> x \\<and> x \\<noteq> 1 \\<and> x \\<noteq> p \\<and> prime (nat p)", "have \"False\""], ["proof (prove)\nusing this:\n  nat x dvd nat p\n  0 \\<le> x \\<and> x \\<noteq> 1 \\<and> x \\<noteq> p \\<and> prime (nat p)\n\ngoal (1 subgoal):\n 1. False", "unfolding prime_nat_iff"], ["proof (prove)\nusing this:\n  nat x dvd nat p\n  0 \\<le> x \\<and>\n  x \\<noteq> 1 \\<and>\n  x \\<noteq> p \\<and>\n  1 < nat p \\<and>\n  (\\<forall>m. m dvd nat p \\<longrightarrow> m = 1 \\<or> m = nat p)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. 0 < y", "}"], ["proof (state)\nthis:\n  b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 = 0 \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. 0 < y", "moreover"], ["proof (state)\nthis:\n  b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 = 0 \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. 0 < y", "{"], ["proof (state)\nthis:\n  b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 = 0 \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. 0 < y", "assume \"?B > 0\""], ["proof (state)\nthis:\n  0 < b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2\n\ngoal (1 subgoal):\n 1. 0 < y", "with y"], ["proof (chain)\npicking this:\n  b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 = x * y\n  0 < b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2", "have \"x*y > 0\""], ["proof (prove)\nusing this:\n  b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 = x * y\n  0 < b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2\n\ngoal (1 subgoal):\n 1. 0 < x * y", "by simp"], ["proof (state)\nthis:\n  0 < x * y\n\ngoal (1 subgoal):\n 1. 0 < y", "moreover"], ["proof (state)\nthis:\n  0 < x * y\n\ngoal (1 subgoal):\n 1. 0 < y", "from ass"], ["proof (chain)\npicking this:\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)", "have \"x > 0\""], ["proof (prove)\nusing this:\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)\n\ngoal (1 subgoal):\n 1. 0 < x", "by simp"], ["proof (state)\nthis:\n  0 < x\n\ngoal (1 subgoal):\n 1. 0 < y", "ultimately"], ["proof (chain)\npicking this:\n  0 < x * y\n  0 < x", "have ?thesis"], ["proof (prove)\nusing this:\n  0 < x * y\n  0 < x\n\ngoal (1 subgoal):\n 1. 0 < y", "using zero_less_mult_pos"], ["proof (prove)\nusing this:\n  0 < x * y\n  0 < x\n  \\<lbrakk>(0::?'a) < ?a * ?b; (0::?'a) < ?a\\<rbrakk>\n  \\<Longrightarrow> (0::?'a) < ?b\n\ngoal (1 subgoal):\n 1. 0 < y", "by blast"], ["proof (state)\nthis:\n  0 < y\n\ngoal (1 subgoal):\n 1. 0 < y", "}"], ["proof (state)\nthis:\n  0 < b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 \\<Longrightarrow>\n  0 < y\n\ngoal (1 subgoal):\n 1. 0 < y", "ultimately"], ["proof (chain)\npicking this:\n  b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 = 0 \\<or>\n  0 < b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2\n  b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 = 0 \\<Longrightarrow>\n  False\n  0 < b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 \\<Longrightarrow>\n  0 < y", "show ?thesis"], ["proof (prove)\nusing this:\n  b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 = 0 \\<or>\n  0 < b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2\n  b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 = 0 \\<Longrightarrow>\n  False\n  0 < b1\\<^sup>2 + b2\\<^sup>2 + b3\\<^sup>2 + b4\\<^sup>2 \\<Longrightarrow>\n  0 < y\n\ngoal (1 subgoal):\n 1. 0 < y", "by auto"], ["proof (state)\nthis:\n  0 < y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < y\n\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "moreover"], ["proof (state)\nthis:\n  0 < y\n\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "with y_l_x"], ["proof (chain)\npicking this:\n  y < x\n  0 < y", "have \"(nat y) - 1 < (nat x) - 1\""], ["proof (prove)\nusing this:\n  y < x\n  0 < y\n\ngoal (1 subgoal):\n 1. nat y - 1 < nat x - 1", "by arith"], ["proof (state)\nthis:\n  nat y - 1 < nat x - 1\n\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "moreover"], ["proof (state)\nthis:\n  nat y - 1 < nat x - 1\n\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "from y_l_x ass"], ["proof (chain)\npicking this:\n  y < x\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)", "have \"y < p\""], ["proof (prove)\nusing this:\n  y < x\n  1 < x \\<and> x < p \\<and> p * x = sum4sq_int (a1, a2, a3, a4)\n\ngoal (1 subgoal):\n 1. y < p", "by auto"], ["proof (state)\nthis:\n  y < p\n\ngoal (1 subgoal):\n 1. odd x \\<Longrightarrow>\n    \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "ultimately"], ["proof (chain)\npicking this:\n  p * y = sum4sq_int (d1, d2, d3, d4)\n  y < x\n  0 < y\n  nat y - 1 < nat x - 1\n  y < p", "show ?thesis"], ["proof (prove)\nusing this:\n  p * y = sum4sq_int (d1, d2, d3, d4)\n  y < x\n  0 < y\n  nat y - 1 < nat x - 1\n  y < p\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       0 < y \\<and>\n       y < p \\<and>\n       (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))", "by blast"], ["proof (state)\nthis:\n  \\<exists>y.\n     nat y - 1 < nat x - 1 \\<and>\n     0 < y \\<and>\n     y < p \\<and>\n     (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>y.\n     nat y - 1 < nat x - 1 \\<and>\n     0 < y \\<and>\n     y < p \\<and>\n     (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 < nat x - 1;\n        \\<not> \\<not> (0 < x \\<and>\n                       x < p \\<and>\n                       (\\<exists>a1 a2 a3 a4.\n                           p * x = sum4sq_int (a1, a2, a3, a4)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            nat y - 1 < nat x - 1 \\<and>\n                            \\<not> \\<not> (0 < y \\<and>\n     y < p \\<and>\n     (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4)))", "thus \"\\<exists> y. nat y - 1 < nat x - 1 \\<and> \\<not> \\<not> ?Q y\""], ["proof (prove)\nusing this:\n  \\<exists>y.\n     nat y - 1 < nat x - 1 \\<and>\n     0 < y \\<and>\n     y < p \\<and>\n     (\\<exists>a1 a2 a3 a4. p * y = sum4sq_int (a1, a2, a3, a4))\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       nat y - 1 < nat x - 1 \\<and>\n       \\<not> \\<not> (0 < y \\<and>\n                      y < p \\<and>\n                      (\\<exists>a1 a2 a3 a4.\n                          p * y = sum4sq_int (a1, a2, a3, a4)))", "by blast"], ["proof (state)\nthis:\n  \\<exists>y.\n     nat y - 1 < nat x - 1 \\<and>\n     \\<not> \\<not> (0 < y \\<and>\n                    y < p \\<and>\n                    (\\<exists>a1 a2 a3 a4.\n                        p * y = sum4sq_int (a1, a2, a3, a4)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> (0 < t \\<and>\n          t < p \\<and>\n          (\\<exists>a1 a2 a3 a4. p * t = sum4sq_int (a1, a2, a3, a4)))\n\ngoal (1 subgoal):\n 1. \\<not> (0 < 1 \\<and>\n            1 < p \\<and>\n            (\\<exists>a1 a2 a3 a4.\n                p * 1 = sum4sq_int (a1, a2, a3, a4))) \\<Longrightarrow>\n    False", "with Qt"], ["proof (chain)\npicking this:\n  0 < t \\<and>\n  t < p \\<and> (\\<exists>a1 a2 a3 a4. p * t = sum4sq_int (a1, a2, a3, a4))\n  \\<not> (0 < t \\<and>\n          t < p \\<and>\n          (\\<exists>a1 a2 a3 a4. p * t = sum4sq_int (a1, a2, a3, a4)))", "show \"False\""], ["proof (prove)\nusing this:\n  0 < t \\<and>\n  t < p \\<and> (\\<exists>a1 a2 a3 a4. p * t = sum4sq_int (a1, a2, a3, a4))\n  \\<not> (0 < t \\<and>\n          t < p \\<and>\n          (\\<exists>a1 a2 a3 a4. p * t = sum4sq_int (a1, a2, a3, a4)))\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < 1 \\<and>\n  1 < p \\<and> (\\<exists>a1 a2 a3 a4. p * 1 = sum4sq_int (a1, a2, a3, a4))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime (nat p); p \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> is_sum4sq_int p", "thus \"is_sum4sq_int p\""], ["proof (prove)\nusing this:\n  0 < 1 \\<and>\n  1 < p \\<and> (\\<exists>a1 a2 a3 a4. p * 1 = sum4sq_int (a1, a2, a3, a4))\n\ngoal (1 subgoal):\n 1. is_sum4sq_int p", "by (auto simp add: is_sum4sq_int_def)"], ["proof (state)\nthis:\n  is_sum4sq_int p\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma prime_is_sum4sq: \"prime p \\<Longrightarrow> is_sum4sq_nat p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime p \\<Longrightarrow> is_sum4sq_nat p", "using zprime_is_sum4sq is_sum4sq_int_nat_eq"], ["proof (prove)\nusing this:\n  prime (nat ?p) \\<Longrightarrow> is_sum4sq_int ?p\n  is_sum4sq_nat ?n = is_sum4sq_int (int ?n)\n\ngoal (1 subgoal):\n 1. prime p \\<Longrightarrow> is_sum4sq_nat p", "by simp"], ["", "theorem sum_of_four_squares: \"is_sum4sq_nat n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sum4sq_nat n", "proof (induction n rule: nat_less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. \\<forall>m<n. is_sum4sq_nat m \\<Longrightarrow> is_sum4sq_nat n", "case (1 n)"], ["proof (state)\nthis:\n  \\<forall>m<n. is_sum4sq_nat m\n\ngoal (1 subgoal):\n 1. \\<And>n. \\<forall>m<n. is_sum4sq_nat m \\<Longrightarrow> is_sum4sq_nat n", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sum4sq_nat n", "proof (cases \"n>1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 1 < n \\<Longrightarrow> is_sum4sq_nat n\n 2. \\<not> 1 < n \\<Longrightarrow> is_sum4sq_nat n", "case False"], ["proof (state)\nthis:\n  \\<not> 1 < n\n\ngoal (2 subgoals):\n 1. 1 < n \\<Longrightarrow> is_sum4sq_nat n\n 2. \\<not> 1 < n \\<Longrightarrow> is_sum4sq_nat n", "hence \"n = 0 \\<or> n = 1\""], ["proof (prove)\nusing this:\n  \\<not> 1 < n\n\ngoal (1 subgoal):\n 1. n = 0 \\<or> n = 1", "by auto"], ["proof (state)\nthis:\n  n = 0 \\<or> n = 1\n\ngoal (2 subgoals):\n 1. 1 < n \\<Longrightarrow> is_sum4sq_nat n\n 2. \\<not> 1 < n \\<Longrightarrow> is_sum4sq_nat n", "moreover"], ["proof (state)\nthis:\n  n = 0 \\<or> n = 1\n\ngoal (2 subgoals):\n 1. 1 < n \\<Longrightarrow> is_sum4sq_nat n\n 2. \\<not> 1 < n \\<Longrightarrow> is_sum4sq_nat n", "have \"0 = sum4sq_nat 0 0 0 0\" \"1 = sum4sq_nat 1 0 0 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 = sum4sq_nat 0 0 0 0 &&& 1 = sum4sq_nat 1 0 0 0", "unfolding sum4sq_nat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 = 0\\<^sup>2 + 0\\<^sup>2 + 0\\<^sup>2 + 0\\<^sup>2 &&&\n    1 = 1\\<^sup>2 + 0\\<^sup>2 + 0\\<^sup>2 + 0\\<^sup>2", "by auto"], ["proof (state)\nthis:\n  0 = sum4sq_nat 0 0 0 0\n  1 = sum4sq_nat 1 0 0 0\n\ngoal (2 subgoals):\n 1. 1 < n \\<Longrightarrow> is_sum4sq_nat n\n 2. \\<not> 1 < n \\<Longrightarrow> is_sum4sq_nat n", "ultimately"], ["proof (chain)\npicking this:\n  n = 0 \\<or> n = 1\n  0 = sum4sq_nat 0 0 0 0\n  1 = sum4sq_nat 1 0 0 0", "show ?thesis"], ["proof (prove)\nusing this:\n  n = 0 \\<or> n = 1\n  0 = sum4sq_nat 0 0 0 0\n  1 = sum4sq_nat 1 0 0 0\n\ngoal (1 subgoal):\n 1. is_sum4sq_nat n", "unfolding is_sum4sq_nat_def"], ["proof (prove)\nusing this:\n  n = 0 \\<or> n = 1\n  0 = sum4sq_nat 0 0 0 0\n  1 = sum4sq_nat 1 0 0 0\n\ngoal (1 subgoal):\n 1. \\<exists>a b c d. n = sum4sq_nat a b c d", "by blast"], ["proof (state)\nthis:\n  is_sum4sq_nat n\n\ngoal (1 subgoal):\n 1. 1 < n \\<Longrightarrow> is_sum4sq_nat n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. 1 < n \\<Longrightarrow> is_sum4sq_nat n", "case True"], ["proof (state)\nthis:\n  1 < n\n\ngoal (1 subgoal):\n 1. 1 < n \\<Longrightarrow> is_sum4sq_nat n", "then"], ["proof (chain)\npicking this:\n  1 < n", "obtain p m where dec: \"prime p \\<and> n = p * m\""], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. (\\<And>p m.\n        prime p \\<and> n = p * m \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prime_factor_nat[of n]"], ["proof (prove)\nusing this:\n  1 < n\n  n \\<noteq> 1 \\<Longrightarrow> \\<exists>p. prime p \\<and> p dvd n\n\ngoal (1 subgoal):\n 1. (\\<And>p m.\n        prime p \\<and> n = p * m \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: dvdE)"], ["proof (state)\nthis:\n  prime p \\<and> n = p * m\n\ngoal (1 subgoal):\n 1. 1 < n \\<Longrightarrow> is_sum4sq_nat n", "moreover"], ["proof (state)\nthis:\n  prime p \\<and> n = p * m\n\ngoal (1 subgoal):\n 1. 1 < n \\<Longrightarrow> is_sum4sq_nat n", "hence \"m<n\""], ["proof (prove)\nusing this:\n  prime p \\<and> n = p * m\n\ngoal (1 subgoal):\n 1. m < n", "using n_less_m_mult_n[of m p] prime_gt_Suc_0_nat[of p] True"], ["proof (prove)\nusing this:\n  prime p \\<and> n = p * m\n  \\<lbrakk>0 < m; Suc 0 < p\\<rbrakk> \\<Longrightarrow> m < p * m\n  prime p \\<Longrightarrow> Suc 0 < p\n  1 < n\n\ngoal (1 subgoal):\n 1. m < n", "by linarith"], ["proof (state)\nthis:\n  m < n\n\ngoal (1 subgoal):\n 1. 1 < n \\<Longrightarrow> is_sum4sq_nat n", "ultimately"], ["proof (chain)\npicking this:\n  prime p \\<and> n = p * m\n  m < n", "have \"is_sum4sq_nat m\" \"is_sum4sq_nat p\""], ["proof (prove)\nusing this:\n  prime p \\<and> n = p * m\n  m < n\n\ngoal (1 subgoal):\n 1. is_sum4sq_nat m &&& is_sum4sq_nat p", "using 1 prime_is_sum4sq"], ["proof (prove)\nusing this:\n  prime p \\<and> n = p * m\n  m < n\n  \\<forall>m<n. is_sum4sq_nat m\n  prime ?p \\<Longrightarrow> is_sum4sq_nat ?p\n\ngoal (1 subgoal):\n 1. is_sum4sq_nat m &&& is_sum4sq_nat p", "by blast+"], ["proof (state)\nthis:\n  is_sum4sq_nat m\n  is_sum4sq_nat p\n\ngoal (1 subgoal):\n 1. 1 < n \\<Longrightarrow> is_sum4sq_nat n", "thus ?thesis"], ["proof (prove)\nusing this:\n  is_sum4sq_nat m\n  is_sum4sq_nat p\n\ngoal (1 subgoal):\n 1. is_sum4sq_nat n", "using dec is_mult_sum4sq_nat"], ["proof (prove)\nusing this:\n  is_sum4sq_nat m\n  is_sum4sq_nat p\n  prime p \\<and> n = p * m\n  \\<lbrakk>is_sum4sq_nat ?x; is_sum4sq_nat ?y\\<rbrakk>\n  \\<Longrightarrow> is_sum4sq_nat (?x * ?y)\n\ngoal (1 subgoal):\n 1. is_sum4sq_nat n", "by blast"], ["proof (state)\nthis:\n  is_sum4sq_nat n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_sum4sq_nat n\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}