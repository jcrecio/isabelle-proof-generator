{"file_name": "/home/qj213/afp-2021-10-22/thys/PAC_Checker/More_Loops.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/PAC_Checker", "problem_names": ["lemma Down_id_eq:\n  \\<open>\\<Down>Id x = x\\<close>", "lemma while_upt_while_direct1:\n  \"b \\<ge> a \\<Longrightarrow>\n  do {\n    (_,\\<sigma>) \\<leftarrow> WHILE\\<^sub>T (FOREACH_cond c) (\\<lambda>x. do {ASSERT (FOREACH_cond c x); FOREACH_body f x})\n      ([a..<b],\\<sigma>);\n    RETURN \\<sigma>\n  } \\<le> do {\n    (_,\\<sigma>) \\<leftarrow> WHILE\\<^sub>T (\\<lambda>(i, x). i < b \\<and> c x) (\\<lambda>(i, x). do {ASSERT (i < b);  \\<sigma>'\\<leftarrow>f i x; RETURN (i+1,\\<sigma>')\n}) (a,\\<sigma>);\n    RETURN \\<sigma>\n  }\"", "lemma while_upt_while_direct2:\n  \"b \\<ge> a \\<Longrightarrow>\n  do {\n    (_,\\<sigma>) \\<leftarrow> WHILE\\<^sub>T (FOREACH_cond c) (\\<lambda>x. do {ASSERT (FOREACH_cond c x); FOREACH_body f x})\n      ([a..<b],\\<sigma>);\n    RETURN \\<sigma>\n  } \\<ge> do {\n    (_,\\<sigma>) \\<leftarrow> WHILE\\<^sub>T (\\<lambda>(i, x). i < b \\<and> c x) (\\<lambda>(i, x). do {ASSERT (i < b);  \\<sigma>'\\<leftarrow>f i x; RETURN (i+1,\\<sigma>')\n}) (a,\\<sigma>);\n    RETURN \\<sigma>\n  }\"", "lemma while_upt_while_direct:\n  \"b \\<ge> a \\<Longrightarrow>\n  do {\n    (_,\\<sigma>) \\<leftarrow> WHILE\\<^sub>T (FOREACH_cond c) (\\<lambda>x. do {ASSERT (FOREACH_cond c x); FOREACH_body f x})\n      ([a..<b],\\<sigma>);\n    RETURN \\<sigma>\n  } = do {\n    (_,\\<sigma>) \\<leftarrow> WHILE\\<^sub>T (\\<lambda>(i, x). i < b \\<and> c x) (\\<lambda>(i, x). do {ASSERT (i < b);  \\<sigma>'\\<leftarrow>f i x; RETURN (i+1,\\<sigma>')\n}) (a,\\<sigma>);\n    RETURN \\<sigma>\n  }\"", "lemma while_nfoldli:\n  \"do {\n    (_,\\<sigma>) \\<leftarrow> WHILE\\<^sub>T (FOREACH_cond c) (\\<lambda>x. do {ASSERT (FOREACH_cond c x); FOREACH_body f x}) (l,\\<sigma>);\n    RETURN \\<sigma>\n  } \\<le> nfoldli l c f \\<sigma>\"", "lemma nfoldli_while: \"nfoldli l c f \\<sigma>\n          \\<le>\n         (WHILE\\<^sub>T\\<^bsup>I\\<^esup>\n           (FOREACH_cond c) (\\<lambda>x. do {ASSERT (FOREACH_cond c x); FOREACH_body f x}) (l, \\<sigma>) \\<bind>\n          (\\<lambda>(_, \\<sigma>). RETURN \\<sigma>))\"", "lemma while_eq_nfoldli: \"do {\n    (_,\\<sigma>) \\<leftarrow> WHILE\\<^sub>T (FOREACH_cond c) (\\<lambda>x. do {ASSERT (FOREACH_cond c x); FOREACH_body f x}) (l,\\<sigma>);\n    RETURN \\<sigma>\n  } = nfoldli l c f \\<sigma>\""], "translations": [["", "lemma Down_id_eq:\n  \\<open>\\<Down>Id x = x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Down> Id x = x", "by auto"], ["", "lemma while_upt_while_direct1:\n  \"b \\<ge> a \\<Longrightarrow>\n  do {\n    (_,\\<sigma>) \\<leftarrow> WHILE\\<^sub>T (FOREACH_cond c) (\\<lambda>x. do {ASSERT (FOREACH_cond c x); FOREACH_body f x})\n      ([a..<b],\\<sigma>);\n    RETURN \\<sigma>\n  } \\<le> do {\n    (_,\\<sigma>) \\<leftarrow> WHILE\\<^sub>T (\\<lambda>(i, x). i < b \\<and> c x) (\\<lambda>(i, x). do {ASSERT (i < b);  \\<sigma>'\\<leftarrow>f i x; RETURN (i+1,\\<sigma>')\n}) (a,\\<sigma>);\n    RETURN \\<sigma>\n  }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> b \\<Longrightarrow>\n    WHILE\\<^sub>T (FOREACH_cond c)\n     (\\<lambda>x.\n         ASSERT (FOREACH_cond c x) \\<bind> (\\<lambda>_. FOREACH_body f x))\n     ([a..<b], \\<sigma>) \\<bind>\n    (\\<lambda>(uu_, \\<sigma>). RETURN \\<sigma>)\n    \\<le> WHILE\\<^sub>T (\\<lambda>(i, x). i < b \\<and> c x)\n           (\\<lambda>(i, x).\n               ASSERT (i < b) \\<bind>\n               (\\<lambda>_.\n                   f i x \\<bind>\n                   (\\<lambda>\\<sigma>'. RETURN (i + 1, \\<sigma>'))))\n           (a, \\<sigma>) \\<bind>\n          (\\<lambda>(uu_, \\<sigma>). RETURN \\<sigma>)", "apply (rewrite at \\<open>_ \\<le> \\<hole>\\<close> Down_id_eq[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> b \\<Longrightarrow>\n    WHILE\\<^sub>T (FOREACH_cond c)\n     (\\<lambda>x.\n         ASSERT (FOREACH_cond c x) \\<bind> (\\<lambda>_. FOREACH_body f x))\n     ([a..<b], \\<sigma>) \\<bind>\n    (\\<lambda>(uu_, \\<sigma>). RETURN \\<sigma>)\n    \\<le> \\<Down> Id\n           (WHILE\\<^sub>T (\\<lambda>(i, x). i < b \\<and> c x)\n             (\\<lambda>(i, x).\n                 ASSERT (i < b) \\<bind>\n                 (\\<lambda>_.\n                     f i x \\<bind>\n                     (\\<lambda>\\<sigma>'. RETURN (i + 1, \\<sigma>'))))\n             (a, \\<sigma>) \\<bind>\n            (\\<lambda>(uu_, \\<sigma>). RETURN \\<sigma>))", "apply (refine_vcg WHILET_refine[where R = \\<open>{((l, x'), (i::nat, x::'a)). x= x' \\<and> i \\<le> b \\<and> i \\<ge> a \\<and>\n     l = drop (i-a) [a..<b]}\\<close>])"], ["proof (prove)\ngoal (4 subgoals):\n 1. a \\<le> b \\<Longrightarrow>\n    (([a..<b], \\<sigma>), a, \\<sigma>)\n    \\<in> {((l, x'), i, x).\n           x = x' \\<and>\n           i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]}\n 2. \\<And>x x' x1 x2.\n       \\<lbrakk>a \\<le> b;\n        (x, x')\n        \\<in> {((l, x'), i, x).\n               x = x' \\<and>\n               i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n        x' = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> FOREACH_cond c x = (x1 < b \\<and> c x2)\n 3. \\<And>x x' x1 x2.\n       \\<lbrakk>a \\<le> b;\n        (x, x')\n        \\<in> {((l, x'), i, x).\n               x = x' \\<and>\n               i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n        FOREACH_cond c x; case x' of (i, x) \\<Rightarrow> i < b \\<and> c x;\n        FOREACH_cond c x; x' = (x1, x2); x1 < b\\<rbrakk>\n       \\<Longrightarrow> FOREACH_body f x\n                         \\<le> \\<Down>\n                                {((l, x'), i, x).\n                                 x = x' \\<and>\n                                 i \\<le> b \\<and>\n                                 a \\<le> i \\<and> l = drop (i - a) [a..<b]}\n                                (f x1 x2 \\<bind>\n                                 (\\<lambda>\\<sigma>'.\n                                     RETURN (x1 + 1, \\<sigma>')))\n 4. \\<And>x x' x1 x2 x1a x2a.\n       \\<lbrakk>a \\<le> b;\n        (x, x')\n        \\<in> {((l, x'), i, x).\n               x = x' \\<and>\n               i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n        x' = (x1, x2); x = (x1a, x2a)\\<rbrakk>\n       \\<Longrightarrow> (x2a, x2) \\<in> Id", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> b \\<Longrightarrow>\n    (([a..<b], \\<sigma>), a, \\<sigma>)\n    \\<in> {((l, x'), i, x).\n           x = x' \\<and>\n           i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]}", "by auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x x' x1 x2.\n       \\<lbrakk>a \\<le> b;\n        (x, x')\n        \\<in> {((l, x'), i, x).\n               x = x' \\<and>\n               i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n        x' = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> FOREACH_cond c x = (x1 < b \\<and> c x2)\n 2. \\<And>x x' x1 x2.\n       \\<lbrakk>a \\<le> b;\n        (x, x')\n        \\<in> {((l, x'), i, x).\n               x = x' \\<and>\n               i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n        FOREACH_cond c x; case x' of (i, x) \\<Rightarrow> i < b \\<and> c x;\n        FOREACH_cond c x; x' = (x1, x2); x1 < b\\<rbrakk>\n       \\<Longrightarrow> FOREACH_body f x\n                         \\<le> \\<Down>\n                                {((l, x'), i, x).\n                                 x = x' \\<and>\n                                 i \\<le> b \\<and>\n                                 a \\<le> i \\<and> l = drop (i - a) [a..<b]}\n                                (f x1 x2 \\<bind>\n                                 (\\<lambda>\\<sigma>'.\n                                     RETURN (x1 + 1, \\<sigma>')))\n 3. \\<And>x x' x1 x2 x1a x2a.\n       \\<lbrakk>a \\<le> b;\n        (x, x')\n        \\<in> {((l, x'), i, x).\n               x = x' \\<and>\n               i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n        x' = (x1, x2); x = (x1a, x2a)\\<rbrakk>\n       \\<Longrightarrow> (x2a, x2) \\<in> Id", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b;\n     (x_, x'_)\n     \\<in> {((l, x'), i, x).\n            x = x' \\<and>\n            i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n     x'_ = (x1_, x2_)\\<rbrakk>\n    \\<Longrightarrow> FOREACH_cond c x_ = (x1_ < b \\<and> c x2_)", "by (auto simp: FOREACH_cond_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x x' x1 x2.\n       \\<lbrakk>a \\<le> b;\n        (x, x')\n        \\<in> {((l, x'), i, x).\n               x = x' \\<and>\n               i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n        FOREACH_cond c x; case x' of (i, x) \\<Rightarrow> i < b \\<and> c x;\n        FOREACH_cond c x; x' = (x1, x2); x1 < b\\<rbrakk>\n       \\<Longrightarrow> FOREACH_body f x\n                         \\<le> \\<Down>\n                                {((l, x'), i, x).\n                                 x = x' \\<and>\n                                 i \\<le> b \\<and>\n                                 a \\<le> i \\<and> l = drop (i - a) [a..<b]}\n                                (f x1 x2 \\<bind>\n                                 (\\<lambda>\\<sigma>'.\n                                     RETURN (x1 + 1, \\<sigma>')))\n 2. \\<And>x x' x1 x2 x1a x2a.\n       \\<lbrakk>a \\<le> b;\n        (x, x')\n        \\<in> {((l, x'), i, x).\n               x = x' \\<and>\n               i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n        x' = (x1, x2); x = (x1a, x2a)\\<rbrakk>\n       \\<Longrightarrow> (x2a, x2) \\<in> Id", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b;\n     (x_, x'_)\n     \\<in> {((l, x'), i, x).\n            x = x' \\<and>\n            i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n     FOREACH_cond c x_; case x'_ of (i, x) \\<Rightarrow> i < b \\<and> c x;\n     FOREACH_cond c x_; x'_ = (x1_, x2_); x1_ < b\\<rbrakk>\n    \\<Longrightarrow> FOREACH_body f x_\n                      \\<le> \\<Down>\n                             {((l, x'), i, x).\n                              x = x' \\<and>\n                              i \\<le> b \\<and>\n                              a \\<le> i \\<and> l = drop (i - a) [a..<b]}\n                             (f x1_ x2_ \\<bind>\n                              (\\<lambda>\\<sigma>'.\n                                  RETURN (x1_ + 1, \\<sigma>')))", "by (auto simp: FOREACH_body_def intro!: bind_refine[OF Id_refine])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x x' x1 x2 x1a x2a.\n       \\<lbrakk>a \\<le> b;\n        (x, x')\n        \\<in> {((l, x'), i, x).\n               x = x' \\<and>\n               i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n        x' = (x1, x2); x = (x1a, x2a)\\<rbrakk>\n       \\<Longrightarrow> (x2a, x2) \\<in> Id", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b;\n     (x_, x'_)\n     \\<in> {((l, x'), i, x).\n            x = x' \\<and>\n            i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n     x'_ = (x1_, x2_); x_ = (x1a_, x2a_)\\<rbrakk>\n    \\<Longrightarrow> (x2a_, x2_) \\<in> Id", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma while_upt_while_direct2:\n  \"b \\<ge> a \\<Longrightarrow>\n  do {\n    (_,\\<sigma>) \\<leftarrow> WHILE\\<^sub>T (FOREACH_cond c) (\\<lambda>x. do {ASSERT (FOREACH_cond c x); FOREACH_body f x})\n      ([a..<b],\\<sigma>);\n    RETURN \\<sigma>\n  } \\<ge> do {\n    (_,\\<sigma>) \\<leftarrow> WHILE\\<^sub>T (\\<lambda>(i, x). i < b \\<and> c x) (\\<lambda>(i, x). do {ASSERT (i < b);  \\<sigma>'\\<leftarrow>f i x; RETURN (i+1,\\<sigma>')\n}) (a,\\<sigma>);\n    RETURN \\<sigma>\n  }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> b \\<Longrightarrow>\n    WHILE\\<^sub>T (\\<lambda>(i, x). i < b \\<and> c x)\n     (\\<lambda>(i, x).\n         ASSERT (i < b) \\<bind>\n         (\\<lambda>_.\n             f i x \\<bind> (\\<lambda>\\<sigma>'. RETURN (i + 1, \\<sigma>'))))\n     (a, \\<sigma>) \\<bind>\n    (\\<lambda>(uu_, \\<sigma>). RETURN \\<sigma>)\n    \\<le> WHILE\\<^sub>T (FOREACH_cond c)\n           (\\<lambda>x.\n               ASSERT (FOREACH_cond c x) \\<bind>\n               (\\<lambda>_. FOREACH_body f x))\n           ([a..<b], \\<sigma>) \\<bind>\n          (\\<lambda>(uu_, \\<sigma>). RETURN \\<sigma>)", "apply (rewrite at \\<open>_ \\<le> \\<hole>\\<close> Down_id_eq[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> b \\<Longrightarrow>\n    WHILE\\<^sub>T (\\<lambda>(i, x). i < b \\<and> c x)\n     (\\<lambda>(i, x).\n         ASSERT (i < b) \\<bind>\n         (\\<lambda>_.\n             f i x \\<bind> (\\<lambda>\\<sigma>'. RETURN (i + 1, \\<sigma>'))))\n     (a, \\<sigma>) \\<bind>\n    (\\<lambda>(uu_, \\<sigma>). RETURN \\<sigma>)\n    \\<le> \\<Down> Id\n           (WHILE\\<^sub>T (FOREACH_cond c)\n             (\\<lambda>x.\n                 ASSERT (FOREACH_cond c x) \\<bind>\n                 (\\<lambda>_. FOREACH_body f x))\n             ([a..<b], \\<sigma>) \\<bind>\n            (\\<lambda>(uu_, \\<sigma>). RETURN \\<sigma>))", "apply (refine_vcg WHILET_refine[where R = \\<open>{((i::nat, x::'a), (l, x')). x= x' \\<and> i \\<le> b \\<and> i \\<ge> a \\<and>\n    l = drop (i-a) [a..<b]}\\<close>])"], ["proof (prove)\ngoal (5 subgoals):\n 1. a \\<le> b \\<Longrightarrow>\n    ((a, \\<sigma>), [a..<b], \\<sigma>)\n    \\<in> {((i, x), l, x').\n           x = x' \\<and>\n           i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]}\n 2. \\<And>x x' x1 x2.\n       \\<lbrakk>a \\<le> b;\n        (x, x')\n        \\<in> {((i, x), l, x').\n               x = x' \\<and>\n               i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n        x = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> (x1 < b \\<and> c x2) = FOREACH_cond c x'\n 3. \\<And>x x' x1 x2.\n       \\<lbrakk>a \\<le> b;\n        (x, x')\n        \\<in> {((i, x), l, x').\n               x = x' \\<and>\n               i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n        case x of (i, x) \\<Rightarrow> i < b \\<and> c x; FOREACH_cond c x';\n        FOREACH_cond c x'; x = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> x1 < b\n 4. \\<And>x x' x1 x2.\n       \\<lbrakk>a \\<le> b;\n        (x, x')\n        \\<in> {((i, x), l, x').\n               x = x' \\<and>\n               i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n        case x of (i, x) \\<Rightarrow> i < b \\<and> c x; FOREACH_cond c x';\n        FOREACH_cond c x'; x = (x1, x2); x1 < b\\<rbrakk>\n       \\<Longrightarrow> f x1 x2 \\<bind>\n                         (\\<lambda>\\<sigma>'. RETURN (x1 + 1, \\<sigma>'))\n                         \\<le> \\<Down>\n                                {((i, x), l, x').\n                                 x = x' \\<and>\n                                 i \\<le> b \\<and>\n                                 a \\<le> i \\<and> l = drop (i - a) [a..<b]}\n                                (FOREACH_body f x')\n 5. \\<And>x x' x1 x2 x1a x2a.\n       \\<lbrakk>a \\<le> b;\n        (x, x')\n        \\<in> {((i, x), l, x').\n               x = x' \\<and>\n               i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n        x' = (x1, x2); x = (x1a, x2a)\\<rbrakk>\n       \\<Longrightarrow> (x2a, x2) \\<in> Id", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> b \\<Longrightarrow>\n    ((a, \\<sigma>), [a..<b], \\<sigma>)\n    \\<in> {((i, x), l, x').\n           x = x' \\<and>\n           i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]}", "by auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x x' x1 x2.\n       \\<lbrakk>a \\<le> b;\n        (x, x')\n        \\<in> {((i, x), l, x').\n               x = x' \\<and>\n               i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n        x = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> (x1 < b \\<and> c x2) = FOREACH_cond c x'\n 2. \\<And>x x' x1 x2.\n       \\<lbrakk>a \\<le> b;\n        (x, x')\n        \\<in> {((i, x), l, x').\n               x = x' \\<and>\n               i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n        case x of (i, x) \\<Rightarrow> i < b \\<and> c x; FOREACH_cond c x';\n        FOREACH_cond c x'; x = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> x1 < b\n 3. \\<And>x x' x1 x2.\n       \\<lbrakk>a \\<le> b;\n        (x, x')\n        \\<in> {((i, x), l, x').\n               x = x' \\<and>\n               i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n        case x of (i, x) \\<Rightarrow> i < b \\<and> c x; FOREACH_cond c x';\n        FOREACH_cond c x'; x = (x1, x2); x1 < b\\<rbrakk>\n       \\<Longrightarrow> f x1 x2 \\<bind>\n                         (\\<lambda>\\<sigma>'. RETURN (x1 + 1, \\<sigma>'))\n                         \\<le> \\<Down>\n                                {((i, x), l, x').\n                                 x = x' \\<and>\n                                 i \\<le> b \\<and>\n                                 a \\<le> i \\<and> l = drop (i - a) [a..<b]}\n                                (FOREACH_body f x')\n 4. \\<And>x x' x1 x2 x1a x2a.\n       \\<lbrakk>a \\<le> b;\n        (x, x')\n        \\<in> {((i, x), l, x').\n               x = x' \\<and>\n               i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n        x' = (x1, x2); x = (x1a, x2a)\\<rbrakk>\n       \\<Longrightarrow> (x2a, x2) \\<in> Id", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b;\n     (x_, x'_)\n     \\<in> {((i, x), l, x').\n            x = x' \\<and>\n            i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n     x_ = (x1_, x2_)\\<rbrakk>\n    \\<Longrightarrow> (x1_ < b \\<and> c x2_) = FOREACH_cond c x'_", "by (auto simp: FOREACH_cond_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x x' x1 x2.\n       \\<lbrakk>a \\<le> b;\n        (x, x')\n        \\<in> {((i, x), l, x').\n               x = x' \\<and>\n               i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n        case x of (i, x) \\<Rightarrow> i < b \\<and> c x; FOREACH_cond c x';\n        FOREACH_cond c x'; x = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> x1 < b\n 2. \\<And>x x' x1 x2.\n       \\<lbrakk>a \\<le> b;\n        (x, x')\n        \\<in> {((i, x), l, x').\n               x = x' \\<and>\n               i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n        case x of (i, x) \\<Rightarrow> i < b \\<and> c x; FOREACH_cond c x';\n        FOREACH_cond c x'; x = (x1, x2); x1 < b\\<rbrakk>\n       \\<Longrightarrow> f x1 x2 \\<bind>\n                         (\\<lambda>\\<sigma>'. RETURN (x1 + 1, \\<sigma>'))\n                         \\<le> \\<Down>\n                                {((i, x), l, x').\n                                 x = x' \\<and>\n                                 i \\<le> b \\<and>\n                                 a \\<le> i \\<and> l = drop (i - a) [a..<b]}\n                                (FOREACH_body f x')\n 3. \\<And>x x' x1 x2 x1a x2a.\n       \\<lbrakk>a \\<le> b;\n        (x, x')\n        \\<in> {((i, x), l, x').\n               x = x' \\<and>\n               i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n        x' = (x1, x2); x = (x1a, x2a)\\<rbrakk>\n       \\<Longrightarrow> (x2a, x2) \\<in> Id", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b;\n     (x_, x'_)\n     \\<in> {((i, x), l, x').\n            x = x' \\<and>\n            i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n     case x_ of (i, x) \\<Rightarrow> i < b \\<and> c x; FOREACH_cond c x'_;\n     FOREACH_cond c x'_; x_ = (x1_, x2_)\\<rbrakk>\n    \\<Longrightarrow> x1_ < b", "by (auto simp: FOREACH_body_def intro!: bind_refine[OF Id_refine])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x x' x1 x2.\n       \\<lbrakk>a \\<le> b;\n        (x, x')\n        \\<in> {((i, x), l, x').\n               x = x' \\<and>\n               i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n        case x of (i, x) \\<Rightarrow> i < b \\<and> c x; FOREACH_cond c x';\n        FOREACH_cond c x'; x = (x1, x2); x1 < b\\<rbrakk>\n       \\<Longrightarrow> f x1 x2 \\<bind>\n                         (\\<lambda>\\<sigma>'. RETURN (x1 + 1, \\<sigma>'))\n                         \\<le> \\<Down>\n                                {((i, x), l, x').\n                                 x = x' \\<and>\n                                 i \\<le> b \\<and>\n                                 a \\<le> i \\<and> l = drop (i - a) [a..<b]}\n                                (FOREACH_body f x')\n 2. \\<And>x x' x1 x2 x1a x2a.\n       \\<lbrakk>a \\<le> b;\n        (x, x')\n        \\<in> {((i, x), l, x').\n               x = x' \\<and>\n               i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n        x' = (x1, x2); x = (x1a, x2a)\\<rbrakk>\n       \\<Longrightarrow> (x2a, x2) \\<in> Id", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b;\n     (x_, x'_)\n     \\<in> {((i, x), l, x').\n            x = x' \\<and>\n            i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n     case x_ of (i, x) \\<Rightarrow> i < b \\<and> c x; FOREACH_cond c x'_;\n     FOREACH_cond c x'_; x_ = (x1_, x2_); x1_ < b\\<rbrakk>\n    \\<Longrightarrow> f x1_ x2_ \\<bind>\n                      (\\<lambda>\\<sigma>'. RETURN (x1_ + 1, \\<sigma>'))\n                      \\<le> \\<Down>\n                             {((i, x), l, x').\n                              x = x' \\<and>\n                              i \\<le> b \\<and>\n                              a \\<le> i \\<and> l = drop (i - a) [a..<b]}\n                             (FOREACH_body f x'_)", "by (auto simp: FOREACH_body_def intro!: bind_refine[OF Id_refine])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x x' x1 x2 x1a x2a.\n       \\<lbrakk>a \\<le> b;\n        (x, x')\n        \\<in> {((i, x), l, x').\n               x = x' \\<and>\n               i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n        x' = (x1, x2); x = (x1a, x2a)\\<rbrakk>\n       \\<Longrightarrow> (x2a, x2) \\<in> Id", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b;\n     (x_, x'_)\n     \\<in> {((i, x), l, x').\n            x = x' \\<and>\n            i \\<le> b \\<and> a \\<le> i \\<and> l = drop (i - a) [a..<b]};\n     x'_ = (x1_, x2_); x_ = (x1a_, x2a_)\\<rbrakk>\n    \\<Longrightarrow> (x2a_, x2_) \\<in> Id", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma while_upt_while_direct:\n  \"b \\<ge> a \\<Longrightarrow>\n  do {\n    (_,\\<sigma>) \\<leftarrow> WHILE\\<^sub>T (FOREACH_cond c) (\\<lambda>x. do {ASSERT (FOREACH_cond c x); FOREACH_body f x})\n      ([a..<b],\\<sigma>);\n    RETURN \\<sigma>\n  } = do {\n    (_,\\<sigma>) \\<leftarrow> WHILE\\<^sub>T (\\<lambda>(i, x). i < b \\<and> c x) (\\<lambda>(i, x). do {ASSERT (i < b);  \\<sigma>'\\<leftarrow>f i x; RETURN (i+1,\\<sigma>')\n}) (a,\\<sigma>);\n    RETURN \\<sigma>\n  }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> b \\<Longrightarrow>\n    WHILE\\<^sub>T (FOREACH_cond c)\n     (\\<lambda>x.\n         ASSERT (FOREACH_cond c x) \\<bind> (\\<lambda>_. FOREACH_body f x))\n     ([a..<b], \\<sigma>) \\<bind>\n    (\\<lambda>(uu_, \\<sigma>). RETURN \\<sigma>) =\n    WHILE\\<^sub>T (\\<lambda>(i, x). i < b \\<and> c x)\n     (\\<lambda>(i, x).\n         ASSERT (i < b) \\<bind>\n         (\\<lambda>_.\n             f i x \\<bind> (\\<lambda>\\<sigma>'. RETURN (i + 1, \\<sigma>'))))\n     (a, \\<sigma>) \\<bind>\n    (\\<lambda>(uu_, \\<sigma>). RETURN \\<sigma>)", "using while_upt_while_direct1[of a b] while_upt_while_direct2[of a b]"], ["proof (prove)\nusing this:\n  a \\<le> b \\<Longrightarrow>\n  WHILE\\<^sub>T (FOREACH_cond ?c)\n   (\\<lambda>x.\n       ASSERT (FOREACH_cond ?c x) \\<bind> (\\<lambda>_. FOREACH_body ?f x))\n   ([a..<b], ?\\<sigma>) \\<bind>\n  (\\<lambda>(uu_, \\<sigma>). RETURN \\<sigma>)\n  \\<le> WHILE\\<^sub>T (\\<lambda>(i, x). i < b \\<and> ?c x)\n         (\\<lambda>(i, x).\n             ASSERT (i < b) \\<bind>\n             (\\<lambda>_.\n                 ?f i x \\<bind>\n                 (\\<lambda>\\<sigma>'. RETURN (i + 1, \\<sigma>'))))\n         (a, ?\\<sigma>) \\<bind>\n        (\\<lambda>(uu_, \\<sigma>). RETURN \\<sigma>)\n  a \\<le> b \\<Longrightarrow>\n  WHILE\\<^sub>T (\\<lambda>(i, x). i < b \\<and> ?c x)\n   (\\<lambda>(i, x).\n       ASSERT (i < b) \\<bind>\n       (\\<lambda>_.\n           ?f i x \\<bind> (\\<lambda>\\<sigma>'. RETURN (i + 1, \\<sigma>'))))\n   (a, ?\\<sigma>) \\<bind>\n  (\\<lambda>(uu_, \\<sigma>). RETURN \\<sigma>)\n  \\<le> WHILE\\<^sub>T (FOREACH_cond ?c)\n         (\\<lambda>x.\n             ASSERT (FOREACH_cond ?c x) \\<bind>\n             (\\<lambda>_. FOREACH_body ?f x))\n         ([a..<b], ?\\<sigma>) \\<bind>\n        (\\<lambda>(uu_, \\<sigma>). RETURN \\<sigma>)\n\ngoal (1 subgoal):\n 1. a \\<le> b \\<Longrightarrow>\n    WHILE\\<^sub>T (FOREACH_cond c)\n     (\\<lambda>x.\n         ASSERT (FOREACH_cond c x) \\<bind> (\\<lambda>_. FOREACH_body f x))\n     ([a..<b], \\<sigma>) \\<bind>\n    (\\<lambda>(uu_, \\<sigma>). RETURN \\<sigma>) =\n    WHILE\\<^sub>T (\\<lambda>(i, x). i < b \\<and> c x)\n     (\\<lambda>(i, x).\n         ASSERT (i < b) \\<bind>\n         (\\<lambda>_.\n             f i x \\<bind> (\\<lambda>\\<sigma>'. RETURN (i + 1, \\<sigma>'))))\n     (a, \\<sigma>) \\<bind>\n    (\\<lambda>(uu_, \\<sigma>). RETURN \\<sigma>)", "unfolding order_class.eq_iff"], ["proof (prove)\nusing this:\n  a \\<le> b \\<Longrightarrow>\n  WHILE\\<^sub>T (FOREACH_cond ?c)\n   (\\<lambda>x.\n       ASSERT (FOREACH_cond ?c x) \\<bind> (\\<lambda>_. FOREACH_body ?f x))\n   ([a..<b], ?\\<sigma>) \\<bind>\n  (\\<lambda>(uu_, \\<sigma>). RETURN \\<sigma>)\n  \\<le> WHILE\\<^sub>T (\\<lambda>(i, x). i < b \\<and> ?c x)\n         (\\<lambda>(i, x).\n             ASSERT (i < b) \\<bind>\n             (\\<lambda>_.\n                 ?f i x \\<bind>\n                 (\\<lambda>\\<sigma>'. RETURN (i + 1, \\<sigma>'))))\n         (a, ?\\<sigma>) \\<bind>\n        (\\<lambda>(uu_, \\<sigma>). RETURN \\<sigma>)\n  a \\<le> b \\<Longrightarrow>\n  WHILE\\<^sub>T (\\<lambda>(i, x). i < b \\<and> ?c x)\n   (\\<lambda>(i, x).\n       ASSERT (i < b) \\<bind>\n       (\\<lambda>_.\n           ?f i x \\<bind> (\\<lambda>\\<sigma>'. RETURN (i + 1, \\<sigma>'))))\n   (a, ?\\<sigma>) \\<bind>\n  (\\<lambda>(uu_, \\<sigma>). RETURN \\<sigma>)\n  \\<le> WHILE\\<^sub>T (FOREACH_cond ?c)\n         (\\<lambda>x.\n             ASSERT (FOREACH_cond ?c x) \\<bind>\n             (\\<lambda>_. FOREACH_body ?f x))\n         ([a..<b], ?\\<sigma>) \\<bind>\n        (\\<lambda>(uu_, \\<sigma>). RETURN \\<sigma>)\n\ngoal (1 subgoal):\n 1. a \\<le> b \\<Longrightarrow>\n    WHILE\\<^sub>T (FOREACH_cond c)\n     (\\<lambda>x.\n         ASSERT (FOREACH_cond c x) \\<bind> (\\<lambda>_. FOREACH_body f x))\n     ([a..<b], \\<sigma>) \\<bind>\n    (\\<lambda>(uu_, y). RETURN y)\n    \\<le> WHILE\\<^sub>T (\\<lambda>(i, x). i < b \\<and> c x)\n           (\\<lambda>(i, x).\n               ASSERT (i < b) \\<bind>\n               (\\<lambda>_.\n                   f i x \\<bind>\n                   (\\<lambda>\\<sigma>'. RETURN (i + 1, \\<sigma>'))))\n           (a, \\<sigma>) \\<bind>\n          (\\<lambda>(uu_, y). RETURN y) \\<and>\n    WHILE\\<^sub>T (\\<lambda>(i, x). i < b \\<and> c x)\n     (\\<lambda>(i, x).\n         ASSERT (i < b) \\<bind>\n         (\\<lambda>_.\n             f i x \\<bind> (\\<lambda>\\<sigma>'. RETURN (i + 1, \\<sigma>'))))\n     (a, \\<sigma>) \\<bind>\n    (\\<lambda>(uu_, y). RETURN y)\n    \\<le> WHILE\\<^sub>T (FOREACH_cond c)\n           (\\<lambda>x.\n               ASSERT (FOREACH_cond c x) \\<bind>\n               (\\<lambda>_. FOREACH_body f x))\n           ([a..<b], \\<sigma>) \\<bind>\n          (\\<lambda>(uu_, y). RETURN y)", "by fast"], ["", "lemma while_nfoldli:\n  \"do {\n    (_,\\<sigma>) \\<leftarrow> WHILE\\<^sub>T (FOREACH_cond c) (\\<lambda>x. do {ASSERT (FOREACH_cond c x); FOREACH_body f x}) (l,\\<sigma>);\n    RETURN \\<sigma>\n  } \\<le> nfoldli l c f \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. WHILE\\<^sub>T (FOREACH_cond c)\n     (\\<lambda>x.\n         ASSERT (FOREACH_cond c x) \\<bind> (\\<lambda>_. FOREACH_body f x))\n     (l, \\<sigma>) \\<bind>\n    (\\<lambda>(uu_, \\<sigma>). RETURN \\<sigma>)\n    \\<le> nfoldli l c f \\<sigma>", "apply (induct l arbitrary: \\<sigma>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>.\n       WHILE\\<^sub>T (FOREACH_cond c)\n        (\\<lambda>x.\n            ASSERT (FOREACH_cond c x) \\<bind>\n            (\\<lambda>_. FOREACH_body f x))\n        ([], \\<sigma>) \\<bind>\n       (\\<lambda>(uu_, y). RETURN y)\n       \\<le> nfoldli [] c f \\<sigma>\n 2. \\<And>a l \\<sigma>.\n       (\\<And>\\<sigma>.\n           WHILE\\<^sub>T (FOREACH_cond c)\n            (\\<lambda>x.\n                ASSERT (FOREACH_cond c x) \\<bind>\n                (\\<lambda>_. FOREACH_body f x))\n            (l, \\<sigma>) \\<bind>\n           (\\<lambda>(uu_, y). RETURN y)\n           \\<le> nfoldli l c f \\<sigma>) \\<Longrightarrow>\n       WHILE\\<^sub>T (FOREACH_cond c)\n        (\\<lambda>x.\n            ASSERT (FOREACH_cond c x) \\<bind>\n            (\\<lambda>_. FOREACH_body f x))\n        (a # l, \\<sigma>) \\<bind>\n       (\\<lambda>(uu_, y). RETURN y)\n       \\<le> nfoldli (a # l) c f \\<sigma>", "apply (subst WHILET_unfold)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>.\n       (if FOREACH_cond c ([], \\<sigma>)\n        then ASSERT (FOREACH_cond c ([], \\<sigma>)) \\<bind>\n             (\\<lambda>_. FOREACH_body f ([], \\<sigma>)) \\<bind>\n             WHILE\\<^sub>T (FOREACH_cond c)\n              (\\<lambda>x.\n                  ASSERT (FOREACH_cond c x) \\<bind>\n                  (\\<lambda>_. FOREACH_body f x))\n        else RETURN ([], \\<sigma>)) \\<bind>\n       (\\<lambda>(uu_, y). RETURN y)\n       \\<le> nfoldli [] c f \\<sigma>\n 2. \\<And>a l \\<sigma>.\n       (\\<And>\\<sigma>.\n           WHILE\\<^sub>T (FOREACH_cond c)\n            (\\<lambda>x.\n                ASSERT (FOREACH_cond c x) \\<bind>\n                (\\<lambda>_. FOREACH_body f x))\n            (l, \\<sigma>) \\<bind>\n           (\\<lambda>(uu_, y). RETURN y)\n           \\<le> nfoldli l c f \\<sigma>) \\<Longrightarrow>\n       WHILE\\<^sub>T (FOREACH_cond c)\n        (\\<lambda>x.\n            ASSERT (FOREACH_cond c x) \\<bind>\n            (\\<lambda>_. FOREACH_body f x))\n        (a # l, \\<sigma>) \\<bind>\n       (\\<lambda>(uu_, y). RETURN y)\n       \\<le> nfoldli (a # l) c f \\<sigma>", "apply (simp add: FOREACH_cond_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l \\<sigma>.\n       (\\<And>\\<sigma>.\n           WHILE\\<^sub>T (FOREACH_cond c)\n            (\\<lambda>x.\n                ASSERT (FOREACH_cond c x) \\<bind>\n                (\\<lambda>_. FOREACH_body f x))\n            (l, \\<sigma>) \\<bind>\n           (\\<lambda>(uu_, y). RETURN y)\n           \\<le> nfoldli l c f \\<sigma>) \\<Longrightarrow>\n       WHILE\\<^sub>T (FOREACH_cond c)\n        (\\<lambda>x.\n            ASSERT (FOREACH_cond c x) \\<bind>\n            (\\<lambda>_. FOREACH_body f x))\n        (a # l, \\<sigma>) \\<bind>\n       (\\<lambda>(uu_, y). RETURN y)\n       \\<le> nfoldli (a # l) c f \\<sigma>", "apply (subst WHILET_unfold)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l \\<sigma>.\n       (\\<And>\\<sigma>.\n           WHILE\\<^sub>T (FOREACH_cond c)\n            (\\<lambda>x.\n                ASSERT (FOREACH_cond c x) \\<bind>\n                (\\<lambda>_. FOREACH_body f x))\n            (l, \\<sigma>) \\<bind>\n           (\\<lambda>(uu_, y). RETURN y)\n           \\<le> nfoldli l c f \\<sigma>) \\<Longrightarrow>\n       (if FOREACH_cond c (a # l, \\<sigma>)\n        then ASSERT (FOREACH_cond c (a # l, \\<sigma>)) \\<bind>\n             (\\<lambda>_. FOREACH_body f (a # l, \\<sigma>)) \\<bind>\n             WHILE\\<^sub>T (FOREACH_cond c)\n              (\\<lambda>x.\n                  ASSERT (FOREACH_cond c x) \\<bind>\n                  (\\<lambda>_. FOREACH_body f x))\n        else RETURN (a # l, \\<sigma>)) \\<bind>\n       (\\<lambda>(uu_, y). RETURN y)\n       \\<le> nfoldli (a # l) c f \\<sigma>", "apply (auto\n    simp: FOREACH_cond_def FOREACH_body_def\n    intro: bind_mono Refine_Basic.bind_mono(1))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nfoldli_while: \"nfoldli l c f \\<sigma>\n          \\<le>\n         (WHILE\\<^sub>T\\<^bsup>I\\<^esup>\n           (FOREACH_cond c) (\\<lambda>x. do {ASSERT (FOREACH_cond c x); FOREACH_body f x}) (l, \\<sigma>) \\<bind>\n          (\\<lambda>(_, \\<sigma>). RETURN \\<sigma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nfoldli l c f \\<sigma>\n    \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n           (\\<lambda>x.\n               ASSERT (FOREACH_cond c x) \\<bind>\n               (\\<lambda>_. FOREACH_body f x))\n           (l, \\<sigma>) \\<bind>\n          (\\<lambda>(uu_, \\<sigma>). RETURN \\<sigma>)", "proof (induct l arbitrary: \\<sigma>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>.\n       nfoldli [] c f \\<sigma>\n       \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n              (\\<lambda>x.\n                  ASSERT (FOREACH_cond c x) \\<bind>\n                  (\\<lambda>_. FOREACH_body f x))\n              ([], \\<sigma>) \\<bind>\n             (\\<lambda>(uu_, y). RETURN y)\n 2. \\<And>a l \\<sigma>.\n       (\\<And>\\<sigma>.\n           nfoldli l c f \\<sigma>\n           \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n                  (\\<lambda>x.\n                      ASSERT (FOREACH_cond c x) \\<bind>\n                      (\\<lambda>_. FOREACH_body f x))\n                  (l, \\<sigma>) \\<bind>\n                 (\\<lambda>(uu_, y). RETURN y)) \\<Longrightarrow>\n       nfoldli (a # l) c f \\<sigma>\n       \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n              (\\<lambda>x.\n                  ASSERT (FOREACH_cond c x) \\<bind>\n                  (\\<lambda>_. FOREACH_body f x))\n              (a # l, \\<sigma>) \\<bind>\n             (\\<lambda>(uu_, y). RETURN y)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>.\n       nfoldli [] c f \\<sigma>\n       \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n              (\\<lambda>x.\n                  ASSERT (FOREACH_cond c x) \\<bind>\n                  (\\<lambda>_. FOREACH_body f x))\n              ([], \\<sigma>) \\<bind>\n             (\\<lambda>(uu_, y). RETURN y)\n 2. \\<And>a l \\<sigma>.\n       (\\<And>\\<sigma>.\n           nfoldli l c f \\<sigma>\n           \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n                  (\\<lambda>x.\n                      ASSERT (FOREACH_cond c x) \\<bind>\n                      (\\<lambda>_. FOREACH_body f x))\n                  (l, \\<sigma>) \\<bind>\n                 (\\<lambda>(uu_, y). RETURN y)) \\<Longrightarrow>\n       nfoldli (a # l) c f \\<sigma>\n       \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n              (\\<lambda>x.\n                  ASSERT (FOREACH_cond c x) \\<bind>\n                  (\\<lambda>_. FOREACH_body f x))\n              (a # l, \\<sigma>) \\<bind>\n             (\\<lambda>(uu_, y). RETURN y)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. nfoldli [] c f \\<sigma>\n    \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n           (\\<lambda>x.\n               ASSERT (FOREACH_cond c x) \\<bind>\n               (\\<lambda>_. FOREACH_body f x))\n           ([], \\<sigma>) \\<bind>\n          (\\<lambda>a. case a of (uu_, a) \\<Rightarrow> RETURN a)", "by (subst WHILEIT_unfold) (auto simp: FOREACH_cond_def)"], ["proof (state)\nthis:\n  nfoldli [] c f \\<sigma>\n  \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n         (\\<lambda>x.\n             ASSERT (FOREACH_cond c x) \\<bind>\n             (\\<lambda>_. FOREACH_body f x))\n         ([], \\<sigma>) \\<bind>\n        (\\<lambda>a. case a of (uu_, a) \\<Rightarrow> RETURN a)\n\ngoal (1 subgoal):\n 1. \\<And>a l \\<sigma>.\n       (\\<And>\\<sigma>.\n           nfoldli l c f \\<sigma>\n           \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n                  (\\<lambda>x.\n                      ASSERT (FOREACH_cond c x) \\<bind>\n                      (\\<lambda>_. FOREACH_body f x))\n                  (l, \\<sigma>) \\<bind>\n                 (\\<lambda>(uu_, y). RETURN y)) \\<Longrightarrow>\n       nfoldli (a # l) c f \\<sigma>\n       \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n              (\\<lambda>x.\n                  ASSERT (FOREACH_cond c x) \\<bind>\n                  (\\<lambda>_. FOREACH_body f x))\n              (a # l, \\<sigma>) \\<bind>\n             (\\<lambda>(uu_, y). RETURN y)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a l \\<sigma>.\n       (\\<And>\\<sigma>.\n           nfoldli l c f \\<sigma>\n           \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n                  (\\<lambda>x.\n                      ASSERT (FOREACH_cond c x) \\<bind>\n                      (\\<lambda>_. FOREACH_body f x))\n                  (l, \\<sigma>) \\<bind>\n                 (\\<lambda>(uu_, y). RETURN y)) \\<Longrightarrow>\n       nfoldli (a # l) c f \\<sigma>\n       \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n              (\\<lambda>x.\n                  ASSERT (FOREACH_cond c x) \\<bind>\n                  (\\<lambda>_. FOREACH_body f x))\n              (a # l, \\<sigma>) \\<bind>\n             (\\<lambda>(uu_, y). RETURN y)", "case (Cons x ls)"], ["proof (state)\nthis:\n  nfoldli ls c f ?\\<sigma>\n  \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n         (\\<lambda>x.\n             ASSERT (FOREACH_cond c x) \\<bind>\n             (\\<lambda>_. FOREACH_body f x))\n         (ls, ?\\<sigma>) \\<bind>\n        (\\<lambda>a. case a of (uu_, a) \\<Rightarrow> RETURN a)\n\ngoal (1 subgoal):\n 1. \\<And>a l \\<sigma>.\n       (\\<And>\\<sigma>.\n           nfoldli l c f \\<sigma>\n           \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n                  (\\<lambda>x.\n                      ASSERT (FOREACH_cond c x) \\<bind>\n                      (\\<lambda>_. FOREACH_body f x))\n                  (l, \\<sigma>) \\<bind>\n                 (\\<lambda>(uu_, y). RETURN y)) \\<Longrightarrow>\n       nfoldli (a # l) c f \\<sigma>\n       \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n              (\\<lambda>x.\n                  ASSERT (FOREACH_cond c x) \\<bind>\n                  (\\<lambda>_. FOREACH_body f x))\n              (a # l, \\<sigma>) \\<bind>\n             (\\<lambda>(uu_, y). RETURN y)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. nfoldli (x # ls) c f \\<sigma>\n    \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n           (\\<lambda>x.\n               ASSERT (FOREACH_cond c x) \\<bind>\n               (\\<lambda>_. FOREACH_body f x))\n           (x # ls, \\<sigma>) \\<bind>\n          (\\<lambda>a. case a of (uu_, a) \\<Rightarrow> RETURN a)", "proof (cases \"c \\<sigma>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. c \\<sigma> \\<Longrightarrow>\n    nfoldli (x # ls) c f \\<sigma>\n    \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n           (\\<lambda>x.\n               ASSERT (FOREACH_cond c x) \\<bind>\n               (\\<lambda>_. FOREACH_body f x))\n           (x # ls, \\<sigma>) \\<bind>\n          (\\<lambda>a. case a of (uu_, a) \\<Rightarrow> RETURN a)\n 2. \\<not> c \\<sigma> \\<Longrightarrow>\n    nfoldli (x # ls) c f \\<sigma>\n    \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n           (\\<lambda>x.\n               ASSERT (FOREACH_cond c x) \\<bind>\n               (\\<lambda>_. FOREACH_body f x))\n           (x # ls, \\<sigma>) \\<bind>\n          (\\<lambda>a. case a of (uu_, a) \\<Rightarrow> RETURN a)", "case False"], ["proof (state)\nthis:\n  \\<not> c \\<sigma>\n\ngoal (2 subgoals):\n 1. c \\<sigma> \\<Longrightarrow>\n    nfoldli (x # ls) c f \\<sigma>\n    \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n           (\\<lambda>x.\n               ASSERT (FOREACH_cond c x) \\<bind>\n               (\\<lambda>_. FOREACH_body f x))\n           (x # ls, \\<sigma>) \\<bind>\n          (\\<lambda>a. case a of (uu_, a) \\<Rightarrow> RETURN a)\n 2. \\<not> c \\<sigma> \\<Longrightarrow>\n    nfoldli (x # ls) c f \\<sigma>\n    \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n           (\\<lambda>x.\n               ASSERT (FOREACH_cond c x) \\<bind>\n               (\\<lambda>_. FOREACH_body f x))\n           (x # ls, \\<sigma>) \\<bind>\n          (\\<lambda>a. case a of (uu_, a) \\<Rightarrow> RETURN a)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> c \\<sigma>\n\ngoal (1 subgoal):\n 1. nfoldli (x # ls) c f \\<sigma>\n    \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n           (\\<lambda>x.\n               ASSERT (FOREACH_cond c x) \\<bind>\n               (\\<lambda>_. FOREACH_body f x))\n           (x # ls, \\<sigma>) \\<bind>\n          (\\<lambda>a. case a of (uu_, a) \\<Rightarrow> RETURN a)", "apply (subst WHILEIT_unfold)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> c \\<sigma> \\<Longrightarrow>\n    nfoldli (x # ls) c f \\<sigma>\n    \\<le> (if I (x # ls, \\<sigma>)\n           then if FOREACH_cond c (x # ls, \\<sigma>)\n                then ASSERT (FOREACH_cond c (x # ls, \\<sigma>)) \\<bind>\n                     (\\<lambda>_. FOREACH_body f (x # ls, \\<sigma>)) \\<bind>\n                     WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n                      (\\<lambda>x.\n                          ASSERT (FOREACH_cond c x) \\<bind>\n                          (\\<lambda>_. FOREACH_body f x))\n                else RETURN (x # ls, \\<sigma>)\n           else FAIL) \\<bind>\n          (\\<lambda>(uu_, y). RETURN y)", "unfolding FOREACH_cond_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> c \\<sigma> \\<Longrightarrow>\n    nfoldli (x # ls) c f \\<sigma>\n    \\<le> (if I (x # ls, \\<sigma>)\n           then if case (x # ls, \\<sigma>) of\n                   (xs, \\<sigma>) \\<Rightarrow>\n                     xs \\<noteq> [] \\<and> c \\<sigma>\n                then ASSERT\n                      (case (x # ls, \\<sigma>) of\n                       (xs, \\<sigma>) \\<Rightarrow>\n                         xs \\<noteq> [] \\<and> c \\<sigma>) \\<bind>\n                     (\\<lambda>_. FOREACH_body f (x # ls, \\<sigma>)) \\<bind>\n                     WHILE\\<^sub>T\\<^bsup>I\\<^esup>\n                      (\\<lambda>(xs, \\<sigma>).\n                          xs \\<noteq> [] \\<and> c \\<sigma>)\n                      (\\<lambda>x.\n                          ASSERT\n                           (case x of\n                            (xs, \\<sigma>) \\<Rightarrow>\n                              xs \\<noteq> [] \\<and> c \\<sigma>) \\<bind>\n                          (\\<lambda>_. FOREACH_body f x))\n                else RETURN (x # ls, \\<sigma>)\n           else FAIL) \\<bind>\n          (\\<lambda>(uu_, y). RETURN y)", "by simp"], ["proof (state)\nthis:\n  nfoldli (x # ls) c f \\<sigma>\n  \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n         (\\<lambda>x.\n             ASSERT (FOREACH_cond c x) \\<bind>\n             (\\<lambda>_. FOREACH_body f x))\n         (x # ls, \\<sigma>) \\<bind>\n        (\\<lambda>a. case a of (uu_, a) \\<Rightarrow> RETURN a)\n\ngoal (1 subgoal):\n 1. c \\<sigma> \\<Longrightarrow>\n    nfoldli (x # ls) c f \\<sigma>\n    \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n           (\\<lambda>x.\n               ASSERT (FOREACH_cond c x) \\<bind>\n               (\\<lambda>_. FOREACH_body f x))\n           (x # ls, \\<sigma>) \\<bind>\n          (\\<lambda>a. case a of (uu_, a) \\<Rightarrow> RETURN a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<sigma> \\<Longrightarrow>\n    nfoldli (x # ls) c f \\<sigma>\n    \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n           (\\<lambda>x.\n               ASSERT (FOREACH_cond c x) \\<bind>\n               (\\<lambda>_. FOREACH_body f x))\n           (x # ls, \\<sigma>) \\<bind>\n          (\\<lambda>a. case a of (uu_, a) \\<Rightarrow> RETURN a)", "case [simp]: True"], ["proof (state)\nthis:\n  c \\<sigma>\n\ngoal (1 subgoal):\n 1. c \\<sigma> \\<Longrightarrow>\n    nfoldli (x # ls) c f \\<sigma>\n    \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n           (\\<lambda>x.\n               ASSERT (FOREACH_cond c x) \\<bind>\n               (\\<lambda>_. FOREACH_body f x))\n           (x # ls, \\<sigma>) \\<bind>\n          (\\<lambda>a. case a of (uu_, a) \\<Rightarrow> RETURN a)", "from Cons"], ["proof (chain)\npicking this:\n  nfoldli ls c f ?\\<sigma>\n  \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n         (\\<lambda>x.\n             ASSERT (FOREACH_cond c x) \\<bind>\n             (\\<lambda>_. FOREACH_body f x))\n         (ls, ?\\<sigma>) \\<bind>\n        (\\<lambda>a. case a of (uu_, a) \\<Rightarrow> RETURN a)", "show ?thesis"], ["proof (prove)\nusing this:\n  nfoldli ls c f ?\\<sigma>\n  \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n         (\\<lambda>x.\n             ASSERT (FOREACH_cond c x) \\<bind>\n             (\\<lambda>_. FOREACH_body f x))\n         (ls, ?\\<sigma>) \\<bind>\n        (\\<lambda>a. case a of (uu_, a) \\<Rightarrow> RETURN a)\n\ngoal (1 subgoal):\n 1. nfoldli (x # ls) c f \\<sigma>\n    \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n           (\\<lambda>x.\n               ASSERT (FOREACH_cond c x) \\<bind>\n               (\\<lambda>_. FOREACH_body f x))\n           (x # ls, \\<sigma>) \\<bind>\n          (\\<lambda>a. case a of (uu_, a) \\<Rightarrow> RETURN a)", "apply (subst WHILEIT_unfold)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        nfoldli ls c f \\<sigma>\n        \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n               (\\<lambda>x.\n                   ASSERT (FOREACH_cond c x) \\<bind>\n                   (\\<lambda>_. FOREACH_body f x))\n               (ls, \\<sigma>) \\<bind>\n              (\\<lambda>a.\n                  case a of\n                  (uu_, a) \\<Rightarrow> RETURN a)) \\<Longrightarrow>\n    nfoldli (x # ls) c f \\<sigma>\n    \\<le> (if I (x # ls, \\<sigma>)\n           then if FOREACH_cond c (x # ls, \\<sigma>)\n                then ASSERT (FOREACH_cond c (x # ls, \\<sigma>)) \\<bind>\n                     (\\<lambda>_. FOREACH_body f (x # ls, \\<sigma>)) \\<bind>\n                     WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n                      (\\<lambda>x.\n                          ASSERT (FOREACH_cond c x) \\<bind>\n                          (\\<lambda>_. FOREACH_body f x))\n                else RETURN (x # ls, \\<sigma>)\n           else FAIL) \\<bind>\n          (\\<lambda>(uu_, y). RETURN y)", "unfolding FOREACH_cond_def FOREACH_body_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        nfoldli ls c f \\<sigma>\n        \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup>\n               (\\<lambda>a.\n                   case a of\n                   (xs, \\<sigma>) \\<Rightarrow>\n                     xs \\<noteq> [] \\<and> c \\<sigma>)\n               (\\<lambda>x.\n                   ASSERT\n                    (case x of\n                     (xs, \\<sigma>) \\<Rightarrow>\n                       xs \\<noteq> [] \\<and> c \\<sigma>) \\<bind>\n                   (\\<lambda>_.\n                       case x of\n                       (xs, \\<sigma>) \\<Rightarrow>\n                         let x = hd xs\n                         in f x \\<sigma> \\<bind>\n                            (\\<lambda>\\<sigma>'.\n                                RETURN (tl xs, \\<sigma>'))))\n               (ls, \\<sigma>) \\<bind>\n              (\\<lambda>a.\n                  case a of\n                  (uu_, a) \\<Rightarrow> RETURN a)) \\<Longrightarrow>\n    nfoldli (x # ls) c f \\<sigma>\n    \\<le> (if I (x # ls, \\<sigma>)\n           then if case (x # ls, \\<sigma>) of\n                   (xs, \\<sigma>) \\<Rightarrow>\n                     xs \\<noteq> [] \\<and> c \\<sigma>\n                then ASSERT\n                      (case (x # ls, \\<sigma>) of\n                       (xs, \\<sigma>) \\<Rightarrow>\n                         xs \\<noteq> [] \\<and> c \\<sigma>) \\<bind>\n                     (\\<lambda>_.\n                         case (x # ls, \\<sigma>) of\n                         (xs, \\<sigma>) \\<Rightarrow>\n                           let x = hd xs\n                           in f x \\<sigma> \\<bind>\n                              (\\<lambda>\\<sigma>'.\n                                  RETURN (tl xs, \\<sigma>'))) \\<bind>\n                     WHILE\\<^sub>T\\<^bsup>I\\<^esup>\n                      (\\<lambda>(xs, \\<sigma>).\n                          xs \\<noteq> [] \\<and> c \\<sigma>)\n                      (\\<lambda>x.\n                          ASSERT\n                           (case x of\n                            (xs, \\<sigma>) \\<Rightarrow>\n                              xs \\<noteq> [] \\<and> c \\<sigma>) \\<bind>\n                          (\\<lambda>_.\n                              case x of\n                              (xs, \\<sigma>) \\<Rightarrow>\n                                let x = hd xs\n                                in f x \\<sigma> \\<bind>\n                                   (\\<lambda>\\<sigma>'.\n RETURN (tl xs, \\<sigma>'))))\n                else RETURN (x # ls, \\<sigma>)\n           else FAIL) \\<bind>\n          (\\<lambda>(uu_, y). RETURN y)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<sigma>.\n                nfoldli ls c f \\<sigma>\n                \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup>\n                       (\\<lambda>a.\n                           case a of\n                           (xs, \\<sigma>) \\<Rightarrow>\n                             xs \\<noteq> [] \\<and> c \\<sigma>)\n                       (\\<lambda>x.\n                           ASSERT\n                            (case x of\n                             (xs, \\<sigma>) \\<Rightarrow>\n                               xs \\<noteq> [] \\<and> c \\<sigma>) \\<bind>\n                           (\\<lambda>_.\n                               case x of\n                               (xs, \\<sigma>) \\<Rightarrow>\n                                 f (hd xs) \\<sigma> \\<bind>\n                                 (\\<lambda>\\<sigma>'.\n                                     RETURN (tl xs, \\<sigma>'))))\n                       (ls, \\<sigma>) \\<bind>\n                      (\\<lambda>a.\n                          case a of (uu_, a) \\<Rightarrow> RETURN a);\n     I (x # ls, \\<sigma>)\\<rbrakk>\n    \\<Longrightarrow> f x \\<sigma> \\<bind> nfoldli ls c f\n                      \\<le> f x \\<sigma> \\<bind>\n                            (\\<lambda>x.\n                                WHILE\\<^sub>T\\<^bsup>I\\<^esup>\n                                 (\\<lambda>(xs, \\<sigma>).\n                                     xs \\<noteq> [] \\<and> c \\<sigma>)\n                                 (\\<lambda>x.\n                                     ASSERT\n(case x of\n (xs, \\<sigma>) \\<Rightarrow> xs \\<noteq> [] \\<and> c \\<sigma>) \\<bind>\n                                     (\\<lambda>_.\n   case x of\n   (xs, \\<sigma>) \\<Rightarrow>\n     f (hd xs) \\<sigma> \\<bind>\n     (\\<lambda>\\<sigma>'. RETURN (tl xs, \\<sigma>'))))\n                                 (ls, x) \\<bind>\n                                (\\<lambda>(uu_, y). RETURN y))", "apply (rule Refine_Basic.bind_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>\\<sigma>.\n                nfoldli ls c f \\<sigma>\n                \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup>\n                       (\\<lambda>a.\n                           case a of\n                           (xs, \\<sigma>) \\<Rightarrow>\n                             xs \\<noteq> [] \\<and> c \\<sigma>)\n                       (\\<lambda>x.\n                           ASSERT\n                            (case x of\n                             (xs, \\<sigma>) \\<Rightarrow>\n                               xs \\<noteq> [] \\<and> c \\<sigma>) \\<bind>\n                           (\\<lambda>_.\n                               case x of\n                               (xs, \\<sigma>) \\<Rightarrow>\n                                 f (hd xs) \\<sigma> \\<bind>\n                                 (\\<lambda>\\<sigma>'.\n                                     RETURN (tl xs, \\<sigma>'))))\n                       (ls, \\<sigma>) \\<bind>\n                      (\\<lambda>a.\n                          case a of (uu_, a) \\<Rightarrow> RETURN a);\n     I (x # ls, \\<sigma>)\\<rbrakk>\n    \\<Longrightarrow> f x \\<sigma> \\<le> f x \\<sigma>\n 2. \\<And>xa.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   nfoldli ls c f \\<sigma>\n                   \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup>\n                          (\\<lambda>a.\n                              case a of\n                              (xs, \\<sigma>) \\<Rightarrow>\n                                xs \\<noteq> [] \\<and> c \\<sigma>)\n                          (\\<lambda>x.\n                              ASSERT\n                               (case x of\n                                (xs, \\<sigma>) \\<Rightarrow>\n                                  xs \\<noteq> [] \\<and> c \\<sigma>) \\<bind>\n                              (\\<lambda>_.\n                                  case x of\n                                  (xs, \\<sigma>) \\<Rightarrow>\n                                    f (hd xs) \\<sigma> \\<bind>\n                                    (\\<lambda>\\<sigma>'.\n  RETURN (tl xs, \\<sigma>'))))\n                          (ls, \\<sigma>) \\<bind>\n                         (\\<lambda>a.\n                             case a of (uu_, a) \\<Rightarrow> RETURN a);\n        I (x # ls, \\<sigma>); RETURN xa \\<le> f x \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> nfoldli ls c f xa\n                         \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup>\n                                (\\<lambda>(xs, \\<sigma>).\n                                    xs \\<noteq> [] \\<and> c \\<sigma>)\n                                (\\<lambda>x.\n                                    ASSERT\n                                     (case x of\n(xs, \\<sigma>) \\<Rightarrow> xs \\<noteq> [] \\<and> c \\<sigma>) \\<bind>\n                                    (\\<lambda>_.\n  case x of\n  (xs, \\<sigma>) \\<Rightarrow>\n    f (hd xs) \\<sigma> \\<bind>\n    (\\<lambda>\\<sigma>'. RETURN (tl xs, \\<sigma>'))))\n                                (ls, xa) \\<bind>\n                               (\\<lambda>(uu_, y). RETURN y)", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  nfoldli (x # ls) c f \\<sigma>\n  \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n         (\\<lambda>x.\n             ASSERT (FOREACH_cond c x) \\<bind>\n             (\\<lambda>_. FOREACH_body f x))\n         (x # ls, \\<sigma>) \\<bind>\n        (\\<lambda>a. case a of (uu_, a) \\<Rightarrow> RETURN a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  nfoldli (x # ls) c f \\<sigma>\n  \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> (FOREACH_cond c)\n         (\\<lambda>x.\n             ASSERT (FOREACH_cond c x) \\<bind>\n             (\\<lambda>_. FOREACH_body f x))\n         (x # ls, \\<sigma>) \\<bind>\n        (\\<lambda>a. case a of (uu_, a) \\<Rightarrow> RETURN a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma while_eq_nfoldli: \"do {\n    (_,\\<sigma>) \\<leftarrow> WHILE\\<^sub>T (FOREACH_cond c) (\\<lambda>x. do {ASSERT (FOREACH_cond c x); FOREACH_body f x}) (l,\\<sigma>);\n    RETURN \\<sigma>\n  } = nfoldli l c f \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. WHILE\\<^sub>T (FOREACH_cond c)\n     (\\<lambda>x.\n         ASSERT (FOREACH_cond c x) \\<bind> (\\<lambda>_. FOREACH_body f x))\n     (l, \\<sigma>) \\<bind>\n    (\\<lambda>(uu_, \\<sigma>). RETURN \\<sigma>) =\n    nfoldli l c f \\<sigma>", "apply (rule antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. WHILE\\<^sub>T (FOREACH_cond c)\n     (\\<lambda>x.\n         ASSERT (FOREACH_cond c x) \\<bind> (\\<lambda>_. FOREACH_body f x))\n     (l, \\<sigma>) \\<bind>\n    (\\<lambda>(uu_, \\<sigma>). RETURN \\<sigma>)\n    \\<le> nfoldli l c f \\<sigma>\n 2. nfoldli l c f \\<sigma>\n    \\<le> WHILE\\<^sub>T (FOREACH_cond c)\n           (\\<lambda>x.\n               ASSERT (FOREACH_cond c x) \\<bind>\n               (\\<lambda>_. FOREACH_body f x))\n           (l, \\<sigma>) \\<bind>\n          (\\<lambda>(uu_, \\<sigma>). RETURN \\<sigma>)", "apply (rule while_nfoldli)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nfoldli l c f \\<sigma>\n    \\<le> WHILE\\<^sub>T (FOREACH_cond c)\n           (\\<lambda>x.\n               ASSERT (FOREACH_cond c x) \\<bind>\n               (\\<lambda>_. FOREACH_body f x))\n           (l, \\<sigma>) \\<bind>\n          (\\<lambda>(uu_, \\<sigma>). RETURN \\<sigma>)", "apply (rule order_trans[OF nfoldli_while[where I=\"\\<lambda>_. True\"]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. WHILE\\<^sub>T\\<^bsup>\\<lambda>_. True\\<^esup> (FOREACH_cond c)\n     (\\<lambda>x.\n         ASSERT (FOREACH_cond c x) \\<bind> (\\<lambda>_. FOREACH_body f x))\n     (l, \\<sigma>) \\<bind>\n    (\\<lambda>(uu_, \\<sigma>). RETURN \\<sigma>)\n    \\<le> WHILE\\<^sub>T (FOREACH_cond c)\n           (\\<lambda>x.\n               ASSERT (FOREACH_cond c x) \\<bind>\n               (\\<lambda>_. FOREACH_body f x))\n           (l, \\<sigma>) \\<bind>\n          (\\<lambda>(uu_, \\<sigma>). RETURN \\<sigma>)", "apply (simp add: WHILET_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}