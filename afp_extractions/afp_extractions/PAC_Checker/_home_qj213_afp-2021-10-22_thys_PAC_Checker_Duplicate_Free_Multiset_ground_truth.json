{"file_name": "/home/qj213/afp-2021-10-22/thys/PAC_Checker/Duplicate_Free_Multiset.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/PAC_Checker", "problem_names": ["lemma remove_diff_multiset[simp]: \\<open>x13 \\<notin># A \\<Longrightarrow> A - add_mset x13 B = A - B\\<close>", "lemma distinct_mset_remdups_mset_id: \\<open>distinct_mset C \\<Longrightarrow> remdups_mset C = C\\<close>", "lemma notin_add_mset_remdups_mset:\n  \\<open>a \\<notin># A \\<Longrightarrow> add_mset a (remdups_mset A) = remdups_mset (add_mset a A)\\<close>", "lemma distinct_mset_image_mset:\n  \\<open>distinct_mset (image_mset f (mset xs)) \\<longleftrightarrow> distinct (map f xs)\\<close>", "lemma distinct_mset_mono: \\<open>D' \\<subseteq># D \\<Longrightarrow> distinct_mset D \\<Longrightarrow> distinct_mset D'\\<close>", "lemma distinct_mset_mono_strict: \\<open>D' \\<subset># D \\<Longrightarrow> distinct_mset D \\<Longrightarrow> distinct_mset D'\\<close>", "lemma distinct_set_mset_eq_iff:\n  assumes \\<open>distinct_mset M\\<close> \\<open>distinct_mset N\\<close>\n  shows \\<open>set_mset M = set_mset N \\<longleftrightarrow> M = N\\<close>", "lemma distinct_mset_union2:\n  \\<open>distinct_mset (A + B) \\<Longrightarrow> distinct_mset B\\<close>", "lemma distinct_mset_mset_set: \\<open>distinct_mset (mset_set A)\\<close>", "lemma distinct_mset_inter_remdups_mset:\n  assumes dist: \\<open>distinct_mset A\\<close>\n  shows \\<open>A \\<inter># remdups_mset B = A \\<inter># B\\<close>", "lemma finite_mset_set_inter:\n  \\<open>finite A \\<Longrightarrow> finite B \\<Longrightarrow> mset_set (A \\<inter> B) = mset_set A \\<inter># mset_set B\\<close>", "lemma removeAll_notin: \\<open>a \\<notin># A \\<Longrightarrow> removeAll_mset a A = A\\<close>", "lemma same_mset_distinct_iff:\n  \\<open>mset M = mset M' \\<Longrightarrow> distinct M \\<longleftrightarrow> distinct M'\\<close>", "lemma in_set_conv_iff:\n  \\<open>x \\<in> set (take n xs) \\<longleftrightarrow> (\\<exists>i < n. i < length xs \\<and> xs ! i = x)\\<close>", "lemma in_set_take_conv_nth:\n  \\<open>x \\<in> set (take n xs) \\<longleftrightarrow> (\\<exists>m<min n (length xs). xs ! m = x)\\<close>", "lemma in_set_remove1D:\n  \\<open>a \\<in> set (remove1 x xs) \\<Longrightarrow> a \\<in> set xs\\<close>", "lemma mset_drop_upto: \\<open>mset (drop a N) = {#N!i. i \\<in># mset_set {a..<length N}#}\\<close>", "lemma Collect_eq_comp': \\<open> {(x, y). P x y} O {(c, a). c = f a} = {(x, a). P x (f a)}\\<close>"], "translations": [["", "lemma remove_diff_multiset[simp]: \\<open>x13 \\<notin># A \\<Longrightarrow> A - add_mset x13 B = A - B\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. x13 \\<notin># A \\<Longrightarrow> A - add_mset x13 B = A - B", "by (metis diff_intersect_left_idem inter_add_right1)"], ["", "text \\<open>Duplicate free multisets are isomorphic to finite sets, but it can be useful to reason about\n  duplication to speak about intermediate execution steps in the refinements.\n\\<close>"], ["", "lemma distinct_mset_remdups_mset_id: \\<open>distinct_mset C \\<Longrightarrow> remdups_mset C = C\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct_mset C \\<Longrightarrow> remdups_mset C = C", "by (induction C)  auto"], ["", "lemma notin_add_mset_remdups_mset:\n  \\<open>a \\<notin># A \\<Longrightarrow> add_mset a (remdups_mset A) = remdups_mset (add_mset a A)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin># A \\<Longrightarrow>\n    add_mset a (remdups_mset A) = remdups_mset (add_mset a A)", "by auto"], ["", "lemma distinct_mset_image_mset:\n  \\<open>distinct_mset (image_mset f (mset xs)) \\<longleftrightarrow> distinct (map f xs)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct_mset (image_mset f (mset xs)) = distinct (map f xs)", "apply (subst mset_map[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct_mset (mset (map f xs)) = distinct (map f xs)", "apply (subst distinct_mset_mset_distinct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (map f xs) = distinct (map f xs)", ".."], ["", "lemma distinct_mset_mono: \\<open>D' \\<subseteq># D \\<Longrightarrow> distinct_mset D \\<Longrightarrow> distinct_mset D'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>D' \\<subseteq># D; distinct_mset D\\<rbrakk>\n    \\<Longrightarrow> distinct_mset D'", "by (metis distinct_mset_union subset_mset.le_iff_add)"], ["", "lemma distinct_mset_mono_strict: \\<open>D' \\<subset># D \\<Longrightarrow> distinct_mset D \\<Longrightarrow> distinct_mset D'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>D' \\<subset># D; distinct_mset D\\<rbrakk>\n    \\<Longrightarrow> distinct_mset D'", "using distinct_mset_mono"], ["proof (prove)\nusing this:\n  \\<lbrakk>?D' \\<subseteq># ?D; distinct_mset ?D\\<rbrakk>\n  \\<Longrightarrow> distinct_mset ?D'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>D' \\<subset># D; distinct_mset D\\<rbrakk>\n    \\<Longrightarrow> distinct_mset D'", "by auto"], ["", "lemma distinct_set_mset_eq_iff:\n  assumes \\<open>distinct_mset M\\<close> \\<open>distinct_mset N\\<close>\n  shows \\<open>set_mset M = set_mset N \\<longleftrightarrow> M = N\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (set_mset M = set_mset N) = (M = N)", "using assms distinct_mset_set_mset_ident"], ["proof (prove)\nusing this:\n  distinct_mset M\n  distinct_mset N\n  distinct_mset ?M \\<Longrightarrow> mset_set (set_mset ?M) = ?M\n\ngoal (1 subgoal):\n 1. (set_mset M = set_mset N) = (M = N)", "by fastforce"], ["", "lemma distinct_mset_union2:\n  \\<open>distinct_mset (A + B) \\<Longrightarrow> distinct_mset B\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct_mset (A + B) \\<Longrightarrow> distinct_mset B", "using distinct_mset_union[of B A]"], ["proof (prove)\nusing this:\n  distinct_mset (B + A) \\<Longrightarrow> distinct_mset B\n\ngoal (1 subgoal):\n 1. distinct_mset (A + B) \\<Longrightarrow> distinct_mset B", "by (auto simp: ac_simps)"], ["", "lemma distinct_mset_mset_set: \\<open>distinct_mset (mset_set A)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct_mset (mset_set A)", "unfolding distinct_mset_def count_mset_set_if"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a.\n       a \\<in># mset_set A \\<longrightarrow>\n       (if a \\<in> A \\<and> finite A then 1 else 0) = 1", "by (auto simp: not_in_iff)"], ["", "lemma distinct_mset_inter_remdups_mset:\n  assumes dist: \\<open>distinct_mset A\\<close>\n  shows \\<open>A \\<inter># remdups_mset B = A \\<inter># B\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<inter># remdups_mset B = A \\<inter># B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A \\<inter># remdups_mset B = A \\<inter># B", "have [simp]: \\<open>A' \\<inter># remove1_mset a (remdups_mset Aa) = A' \\<inter># Aa\\<close>\n    if\n      \\<open>A' \\<inter># remdups_mset Aa = A' \\<inter># Aa\\<close> and\n      \\<open>a \\<notin># A'\\<close> and\n      \\<open>a \\<in># Aa\\<close>\n    for A' Aa :: \\<open>'a multiset\\<close> and a"], ["proof (prove)\ngoal (1 subgoal):\n 1. A' \\<inter># remove1_mset a (remdups_mset Aa) = A' \\<inter># Aa", "by (metis insert_DiffM inter_add_right1 set_mset_remdups_mset that)"], ["proof (state)\nthis:\n  \\<lbrakk>?A' \\<inter># remdups_mset ?Aa = ?A' \\<inter># ?Aa;\n   ?a \\<notin># ?A'; ?a \\<in># ?Aa\\<rbrakk>\n  \\<Longrightarrow> ?A' \\<inter># remove1_mset ?a (remdups_mset ?Aa) =\n                    ?A' \\<inter># ?Aa\n\ngoal (1 subgoal):\n 1. A \\<inter># remdups_mset B = A \\<inter># B", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<inter># remdups_mset B = A \\<inter># B", "using dist"], ["proof (prove)\nusing this:\n  distinct_mset A\n\ngoal (1 subgoal):\n 1. A \\<inter># remdups_mset B = A \\<inter># B", "apply (induction A)"], ["proof (prove)\ngoal (2 subgoals):\n 1. distinct_mset {#} \\<Longrightarrow>\n    {#} \\<inter># remdups_mset B = {#} \\<inter># B\n 2. \\<And>x A.\n       \\<lbrakk>distinct_mset A \\<Longrightarrow>\n                A \\<inter># remdups_mset B = A \\<inter># B;\n        distinct_mset (add_mset x A)\\<rbrakk>\n       \\<Longrightarrow> add_mset x A \\<inter># remdups_mset B =\n                         add_mset x A \\<inter># B", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct_mset {#} \\<Longrightarrow>\n    {#} \\<inter># remdups_mset B = {#} \\<inter># B", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x A.\n       \\<lbrakk>distinct_mset A \\<Longrightarrow>\n                A \\<inter># remdups_mset B = A \\<inter># B;\n        distinct_mset (add_mset x A)\\<rbrakk>\n       \\<Longrightarrow> add_mset x A \\<inter># remdups_mset B =\n                         add_mset x A \\<inter># B", "subgoal for a A'"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct_mset A' \\<Longrightarrow>\n             A' \\<inter># remdups_mset B = A' \\<inter># B;\n     distinct_mset (add_mset a A')\\<rbrakk>\n    \\<Longrightarrow> add_mset a A' \\<inter># remdups_mset B =\n                      add_mset a A' \\<inter># B", "by (cases \\<open>a \\<in># B\\<close>)\n         (use multi_member_split[of a \\<open>B\\<close>]  multi_member_split[of a \\<open>A\\<close>] in\n           \\<open>auto simp: mset_set.insert_remove\\<close>)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  A \\<inter># remdups_mset B = A \\<inter># B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finite_mset_set_inter:\n  \\<open>finite A \\<Longrightarrow> finite B \\<Longrightarrow> mset_set (A \\<inter> B) = mset_set A \\<inter># mset_set B\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite B\\<rbrakk>\n    \\<Longrightarrow> mset_set (A \\<inter> B) =\n                      mset_set A \\<inter># mset_set B", "apply (induction A rule: finite_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. finite B \\<Longrightarrow>\n    mset_set ({} \\<inter> B) = mset_set {} \\<inter># mset_set B\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        finite B \\<Longrightarrow>\n        mset_set (F \\<inter> B) = mset_set F \\<inter># mset_set B;\n        finite B\\<rbrakk>\n       \\<Longrightarrow> mset_set (insert x F \\<inter> B) =\n                         mset_set (insert x F) \\<inter># mset_set B", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite B \\<Longrightarrow>\n    mset_set ({} \\<inter> B) = mset_set {} \\<inter># mset_set B", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        finite B \\<Longrightarrow>\n        mset_set (F \\<inter> B) = mset_set F \\<inter># mset_set B;\n        finite B\\<rbrakk>\n       \\<Longrightarrow> mset_set (insert x F \\<inter> B) =\n                         mset_set (insert x F) \\<inter># mset_set B", "subgoal for a A"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; a \\<notin> A;\n     finite B \\<Longrightarrow>\n     mset_set (A \\<inter> B) = mset_set A \\<inter># mset_set B;\n     finite B\\<rbrakk>\n    \\<Longrightarrow> mset_set (insert a A \\<inter> B) =\n                      mset_set (insert a A) \\<inter># mset_set B", "by (cases \\<open>a \\<in> B\\<close>; cases \\<open>a \\<in># mset_set B\\<close>)\n      (use multi_member_split[of a \\<open>mset_set B\\<close>] in\n        \\<open>auto simp: mset_set.insert_remove\\<close>)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma removeAll_notin: \\<open>a \\<notin># A \\<Longrightarrow> removeAll_mset a A = A\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin># A \\<Longrightarrow> removeAll_mset a A = A", "using count_inI"], ["proof (prove)\nusing this:\n  (count ?M ?x = 0 \\<Longrightarrow> False) \\<Longrightarrow> ?x \\<in># ?M\n\ngoal (1 subgoal):\n 1. a \\<notin># A \\<Longrightarrow> removeAll_mset a A = A", "by force"], ["", "lemma same_mset_distinct_iff:\n  \\<open>mset M = mset M' \\<Longrightarrow> distinct M \\<longleftrightarrow> distinct M'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. mset M = mset M' \\<Longrightarrow> distinct M = distinct M'", "by (auto simp: distinct_mset_mset_distinct[symmetric] simp del: distinct_mset_mset_distinct)"], ["", "subsection \\<open>More Lists\\<close>"], ["", "lemma in_set_conv_iff:\n  \\<open>x \\<in> set (take n xs) \\<longleftrightarrow> (\\<exists>i < n. i < length xs \\<and> xs ! i = x)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> set (take n xs)) =\n    (\\<exists>i<n. i < length xs \\<and> xs ! i = x)", "apply (induction n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (x \\<in> set (take 0 xs)) =\n    (\\<exists>i<0. i < length xs \\<and> xs ! i = x)\n 2. \\<And>n.\n       (x \\<in> set (take n xs)) =\n       (\\<exists>i<n. i < length xs \\<and> xs ! i = x) \\<Longrightarrow>\n       (x \\<in> set (take (Suc n) xs)) =\n       (\\<exists>i<Suc n. i < length xs \\<and> xs ! i = x)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> set (take 0 xs)) =\n    (\\<exists>i<0. i < length xs \\<and> xs ! i = x)", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (x \\<in> set (take n xs)) =\n       (\\<exists>i<n. i < length xs \\<and> xs ! i = x) \\<Longrightarrow>\n       (x \\<in> set (take (Suc n) xs)) =\n       (\\<exists>i<Suc n. i < length xs \\<and> xs ! i = x)", "subgoal for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> set (take n xs)) =\n    (\\<exists>i<n. i < length xs \\<and> xs ! i = x) \\<Longrightarrow>\n    (x \\<in> set (take (Suc n) xs)) =\n    (\\<exists>i<Suc n. i < length xs \\<and> xs ! i = x)", "apply (cases \\<open>Suc n < length xs\\<close>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(x \\<in> set (take n xs)) =\n             (\\<exists>i<n. i < length xs \\<and> xs ! i = x);\n     Suc n < length xs\\<rbrakk>\n    \\<Longrightarrow> (x \\<in> set (take (Suc n) xs)) =\n                      (\\<exists>i<Suc n. i < length xs \\<and> xs ! i = x)\n 2. \\<lbrakk>(x \\<in> set (take n xs)) =\n             (\\<exists>i<n. i < length xs \\<and> xs ! i = x);\n     \\<not> Suc n < length xs\\<rbrakk>\n    \\<Longrightarrow> (x \\<in> set (take (Suc n) xs)) =\n                      (\\<exists>i<Suc n. i < length xs \\<and> xs ! i = x)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(x \\<in> set (take n xs)) =\n             (\\<exists>i<n. i < length xs \\<and> xs ! i = x);\n     Suc n < length xs\\<rbrakk>\n    \\<Longrightarrow> (x \\<in> set (take (Suc n) xs)) =\n                      (\\<exists>i<Suc n. i < length xs \\<and> xs ! i = x)", "by (auto simp: take_Suc_conv_app_nth less_Suc_eq dest: in_set_takeD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(x \\<in> set (take n xs)) =\n             (\\<exists>i<n. i < length xs \\<and> xs ! i = x);\n     \\<not> Suc n < length xs\\<rbrakk>\n    \\<Longrightarrow> (x \\<in> set (take (Suc n) xs)) =\n                      (\\<exists>i<Suc n. i < length xs \\<and> xs ! i = x)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(x \\<in> set (take n xs)) =\n             (\\<exists>i<n. i < length xs \\<and> xs ! i = x);\n     \\<not> Suc n < length xs\\<rbrakk>\n    \\<Longrightarrow> (x \\<in> set (take (Suc n) xs)) =\n                      (\\<exists>i<Suc n. i < length xs \\<and> xs ! i = x)", "apply (cases \\<open>n < length xs\\<close>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(x \\<in> set (take n xs)) =\n             (\\<exists>i<n. i < length xs \\<and> xs ! i = x);\n     \\<not> Suc n < length xs; n < length xs\\<rbrakk>\n    \\<Longrightarrow> (x \\<in> set (take (Suc n) xs)) =\n                      (\\<exists>i<Suc n. i < length xs \\<and> xs ! i = x)\n 2. \\<lbrakk>(x \\<in> set (take n xs)) =\n             (\\<exists>i<n. i < length xs \\<and> xs ! i = x);\n     \\<not> Suc n < length xs; \\<not> n < length xs\\<rbrakk>\n    \\<Longrightarrow> (x \\<in> set (take (Suc n) xs)) =\n                      (\\<exists>i<Suc n. i < length xs \\<and> xs ! i = x)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(x \\<in> set (take n xs)) =\n             (\\<exists>i<n. i < length xs \\<and> xs ! i = x);\n     \\<not> Suc n < length xs; n < length xs\\<rbrakk>\n    \\<Longrightarrow> (x \\<in> set (take (Suc n) xs)) =\n                      (\\<exists>i<Suc n. i < length xs \\<and> xs ! i = x)", "apply (auto simp: in_set_conv_nth)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i ia ib.\n       \\<lbrakk>\\<not> Suc n < length xs; n < length xs; ia < n; i < n;\n        x = xs ! i; xs ! ia = xs ! i; ib < length xs;\n        xs ! ib = xs ! i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ia<Suc n.\n                            ia < length xs \\<and> xs ! ia = xs ! i\n 2. \\<And>i.\n       \\<lbrakk>\\<not> Suc n < length xs; n < length xs;\n        \\<forall>ia<n. xs ! ia \\<noteq> xs ! i; i < length xs;\n        x = xs ! i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ia<Suc n.\n                            ia < length xs \\<and> xs ! ia = xs ! i", "by (rename_tac i, rule_tac x=i in exI; auto; fail)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(x \\<in> set (take n xs)) =\n             (\\<exists>i<n. i < length xs \\<and> xs ! i = x);\n     \\<not> Suc n < length xs; \\<not> n < length xs\\<rbrakk>\n    \\<Longrightarrow> (x \\<in> set (take (Suc n) xs)) =\n                      (\\<exists>i<Suc n. i < length xs \\<and> xs ! i = x)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(x \\<in> set (take n xs)) =\n             (\\<exists>i<n. i < length xs \\<and> xs ! i = x);\n     \\<not> Suc n < length xs; \\<not> n < length xs\\<rbrakk>\n    \\<Longrightarrow> (x \\<in> set (take (Suc n) xs)) =\n                      (\\<exists>i<Suc n. i < length xs \\<and> xs ! i = x)", "apply (auto simp: take_Suc_conv_app_nth dest: in_set_takeD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       \\<lbrakk>\\<not> n < length xs; i < length xs; x = xs ! i;\n        ia < length xs; xs ! ia = xs ! i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ia<Suc n.\n                            ia < length xs \\<and> xs ! ia = xs ! i", "by (rename_tac i, rule_tac x=i in exI; auto; fail)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma in_set_take_conv_nth:\n  \\<open>x \\<in> set (take n xs) \\<longleftrightarrow> (\\<exists>m<min n (length xs). xs ! m = x)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> set (take n xs)) = (\\<exists>m<min n (length xs). xs ! m = x)", "by (metis in_set_conv_nth length_take min.commute min.strict_boundedE nth_take)"], ["", "lemma in_set_remove1D:\n  \\<open>a \\<in> set (remove1 x xs) \\<Longrightarrow> a \\<in> set xs\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> set (remove1 x xs) \\<Longrightarrow> a \\<in> set xs", "by (meson notin_set_remove1)"], ["", "subsection \\<open>Generic Multiset\\<close>"], ["", "lemma mset_drop_upto: \\<open>mset (drop a N) = {#N!i. i \\<in># mset_set {a..<length N}#}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (drop a N) = image_mset ((!) N) (mset_set {a..<length N})", "proof (induction N arbitrary: a)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       mset (drop a []) = image_mset ((!) []) (mset_set {a..<length []})\n 2. \\<And>a N aa.\n       (\\<And>a.\n           mset (drop a N) =\n           image_mset ((!) N) (mset_set {a..<length N})) \\<Longrightarrow>\n       mset (drop aa (a # N)) =\n       image_mset ((!) (a # N)) (mset_set {aa..<length (a # N)})", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>a.\n       mset (drop a []) = image_mset ((!) []) (mset_set {a..<length []})\n 2. \\<And>a N aa.\n       (\\<And>a.\n           mset (drop a N) =\n           image_mset ((!) N) (mset_set {a..<length N})) \\<Longrightarrow>\n       mset (drop aa (a # N)) =\n       image_mset ((!) (a # N)) (mset_set {aa..<length (a # N)})", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (drop a []) = image_mset ((!) []) (mset_set {a..<length []})", "by simp"], ["proof (state)\nthis:\n  mset (drop a []) = image_mset ((!) []) (mset_set {a..<length []})\n\ngoal (1 subgoal):\n 1. \\<And>a N aa.\n       (\\<And>a.\n           mset (drop a N) =\n           image_mset ((!) N) (mset_set {a..<length N})) \\<Longrightarrow>\n       mset (drop aa (a # N)) =\n       image_mset ((!) (a # N)) (mset_set {aa..<length (a # N)})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a N aa.\n       (\\<And>a.\n           mset (drop a N) =\n           image_mset ((!) N) (mset_set {a..<length N})) \\<Longrightarrow>\n       mset (drop aa (a # N)) =\n       image_mset ((!) (a # N)) (mset_set {aa..<length (a # N)})", "case (Cons c N)"], ["proof (state)\nthis:\n  mset (drop ?a N) = image_mset ((!) N) (mset_set {?a..<length N})\n\ngoal (1 subgoal):\n 1. \\<And>a N aa.\n       (\\<And>a.\n           mset (drop a N) =\n           image_mset ((!) N) (mset_set {a..<length N})) \\<Longrightarrow>\n       mset (drop aa (a # N)) =\n       image_mset ((!) (a # N)) (mset_set {aa..<length (a # N)})", "have upt: \\<open>{0..<Suc (length N)} = insert 0 {1..<Suc (length N)}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..<Suc (length N)} = insert 0 {1..<Suc (length N)}", "by auto"], ["proof (state)\nthis:\n  {0..<Suc (length N)} = insert 0 {1..<Suc (length N)}\n\ngoal (1 subgoal):\n 1. \\<And>a N aa.\n       (\\<And>a.\n           mset (drop a N) =\n           image_mset ((!) N) (mset_set {a..<length N})) \\<Longrightarrow>\n       mset (drop aa (a # N)) =\n       image_mset ((!) (a # N)) (mset_set {aa..<length (a # N)})", "then"], ["proof (chain)\npicking this:\n  {0..<Suc (length N)} = insert 0 {1..<Suc (length N)}", "have H: \\<open>mset_set {0..<Suc (length N)} = add_mset 0 (mset_set {1..<Suc (length N)})\\<close>"], ["proof (prove)\nusing this:\n  {0..<Suc (length N)} = insert 0 {1..<Suc (length N)}\n\ngoal (1 subgoal):\n 1. mset_set {0..<Suc (length N)} =\n    add_mset 0 (mset_set {1..<Suc (length N)})", "unfolding upt"], ["proof (prove)\nusing this:\n  insert 0 {1..<Suc (length N)} = insert 0 {1..<Suc (length N)}\n\ngoal (1 subgoal):\n 1. mset_set (insert 0 {1..<Suc (length N)}) =\n    add_mset 0 (mset_set {1..<Suc (length N)})", "by auto"], ["proof (state)\nthis:\n  mset_set {0..<Suc (length N)} = add_mset 0 (mset_set {1..<Suc (length N)})\n\ngoal (1 subgoal):\n 1. \\<And>a N aa.\n       (\\<And>a.\n           mset (drop a N) =\n           image_mset ((!) N) (mset_set {a..<length N})) \\<Longrightarrow>\n       mset (drop aa (a # N)) =\n       image_mset ((!) (a # N)) (mset_set {aa..<length (a # N)})", "have mset_case_Suc: \\<open>{#case x of 0 \\<Rightarrow> c | Suc x \\<Rightarrow> N ! x . x \\<in># mset_set {Suc a..<Suc b}#} =\n    {#N ! (x-1) . x \\<in># mset_set {Suc a..<Suc b}#}\\<close> for a b"], ["proof (prove)\ngoal (1 subgoal):\n 1. {#case x of 0 \\<Rightarrow> c | Suc x \\<Rightarrow> N ! x\n    . x \\<in># mset_set {Suc a..<Suc b}#} =\n    {#N ! (x - 1). x \\<in># mset_set {Suc a..<Suc b}#}", "by (rule image_mset_cong) (auto split: nat.splits)"], ["proof (state)\nthis:\n  {#case x of 0 \\<Rightarrow> c | Suc x \\<Rightarrow> N ! x\n  . x \\<in># mset_set {Suc ?a..<Suc ?b}#} =\n  {#N ! (x - 1). x \\<in># mset_set {Suc ?a..<Suc ?b}#}\n\ngoal (1 subgoal):\n 1. \\<And>a N aa.\n       (\\<And>a.\n           mset (drop a N) =\n           image_mset ((!) N) (mset_set {a..<length N})) \\<Longrightarrow>\n       mset (drop aa (a # N)) =\n       image_mset ((!) (a # N)) (mset_set {aa..<length (a # N)})", "have Suc_Suc: \\<open>{Suc a..<Suc b} = Suc ` {a..<b}\\<close> for a b"], ["proof (prove)\ngoal (1 subgoal):\n 1. {Suc a..<Suc b} = Suc ` {a..<b}", "by auto"], ["proof (state)\nthis:\n  {Suc ?a..<Suc ?b} = Suc ` {?a..<?b}\n\ngoal (1 subgoal):\n 1. \\<And>a N aa.\n       (\\<And>a.\n           mset (drop a N) =\n           image_mset ((!) N) (mset_set {a..<length N})) \\<Longrightarrow>\n       mset (drop aa (a # N)) =\n       image_mset ((!) (a # N)) (mset_set {aa..<length (a # N)})", "then"], ["proof (chain)\npicking this:\n  {Suc ?a..<Suc ?b} = Suc ` {?a..<?b}", "have mset_set_Suc_Suc: \\<open>mset_set {Suc a..<Suc b} = {#Suc n. n \\<in># mset_set {a..<b}#}\\<close> for a b"], ["proof (prove)\nusing this:\n  {Suc ?a..<Suc ?b} = Suc ` {?a..<?b}\n\ngoal (1 subgoal):\n 1. mset_set {Suc a..<Suc b} = image_mset Suc (mset_set {a..<b})", "unfolding Suc_Suc"], ["proof (prove)\nusing this:\n  Suc ` {?a..<?b} = Suc ` {?a..<?b}\n\ngoal (1 subgoal):\n 1. mset_set (Suc ` {a..<b}) = image_mset Suc (mset_set {a..<b})", "by (subst image_mset_mset_set[symmetric]) auto"], ["proof (state)\nthis:\n  mset_set {Suc ?a..<Suc ?b} = image_mset Suc (mset_set {?a..<?b})\n\ngoal (1 subgoal):\n 1. \\<And>a N aa.\n       (\\<And>a.\n           mset (drop a N) =\n           image_mset ((!) N) (mset_set {a..<length N})) \\<Longrightarrow>\n       mset (drop aa (a # N)) =\n       image_mset ((!) (a # N)) (mset_set {aa..<length (a # N)})", "have *: \\<open>{#N ! (x-Suc 0) . x \\<in># mset_set {Suc a..<Suc b}#} = {#N ! x . x \\<in># mset_set {a..<b}#}\\<close>\n    for a b"], ["proof (prove)\ngoal (1 subgoal):\n 1. {#N ! (x - Suc 0). x \\<in># mset_set {Suc a..<Suc b}#} =\n    image_mset ((!) N) (mset_set {a..<b})", "by (auto simp add: mset_set_Suc_Suc)"], ["proof (state)\nthis:\n  {#N ! (x - Suc 0). x \\<in># mset_set {Suc ?a..<Suc ?b}#} =\n  image_mset ((!) N) (mset_set {?a..<?b})\n\ngoal (1 subgoal):\n 1. \\<And>a N aa.\n       (\\<And>a.\n           mset (drop a N) =\n           image_mset ((!) N) (mset_set {a..<length N})) \\<Longrightarrow>\n       mset (drop aa (a # N)) =\n       image_mset ((!) (a # N)) (mset_set {aa..<length (a # N)})", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (drop a (c # N)) =\n    image_mset ((!) (c # N)) (mset_set {a..<length (c # N)})", "apply (cases a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. a = 0 \\<Longrightarrow>\n    mset (drop a (c # N)) =\n    image_mset ((!) (c # N)) (mset_set {a..<length (c # N)})\n 2. \\<And>nat.\n       a = Suc nat \\<Longrightarrow>\n       mset (drop a (c # N)) =\n       image_mset ((!) (c # N)) (mset_set {a..<length (c # N)})", "using Cons[of 0] Cons"], ["proof (prove)\nusing this:\n  mset (drop 0 N) = image_mset ((!) N) (mset_set {0..<length N})\n  mset (drop ?a N) = image_mset ((!) N) (mset_set {?a..<length N})\n\ngoal (2 subgoals):\n 1. a = 0 \\<Longrightarrow>\n    mset (drop a (c # N)) =\n    image_mset ((!) (c # N)) (mset_set {a..<length (c # N)})\n 2. \\<And>nat.\n       a = Suc nat \\<Longrightarrow>\n       mset (drop a (c # N)) =\n       image_mset ((!) (c # N)) (mset_set {a..<length (c # N)})", "by (auto simp: nth_Cons drop_Cons H mset_case_Suc *)"], ["proof (state)\nthis:\n  mset (drop a (c # N)) =\n  image_mset ((!) (c # N)) (mset_set {a..<length (c # N)})\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Other\\<close>"], ["", "text \\<open>I believe this should be added to the simplifier by default...\\<close>"], ["", "lemma Collect_eq_comp': \\<open> {(x, y). P x y} O {(c, a). c = f a} = {(x, a). P x (f a)}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x, y). P x y} O {(c, a). c = f a} = {(x, a). P x (f a)}", "by auto"], ["", "end"]]}