{"file_name": "/home/qj213/afp-2021-10-22/thys/PAC_Checker/Finite_Map_Multiset.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/PAC_Checker", "problem_names": ["lemma fset_mset_mset_fset: \\<open>fset_mset (mset_fset N) = N\\<close>", "lemma mset_fset_fset_mset[simp]:\n  \\<open>mset_fset (fset_mset N) = remdups_mset N\\<close>", "lemma in_mset_fset_fmember[simp]: \\<open>x \\<in># mset_fset N \\<longleftrightarrow> x |\\<in>| N\\<close>", "lemma in_fset_mset_mset[simp]: \\<open>x |\\<in>| fset_mset N \\<longleftrightarrow> x \\<in># N\\<close>", "lemma dom_m_fmdrop[simp]: \\<open>dom_m (fmdrop C N) = remove1_mset C (dom_m N)\\<close>", "lemma dom_m_fmdrop_All: \\<open>dom_m (fmdrop C N) = removeAll_mset C (dom_m N)\\<close>", "lemma dom_m_fmupd[simp]: \\<open>dom_m (fmupd k C N) = add_mset k (remove1_mset k (dom_m N))\\<close>", "lemma distinct_mset_dom: \\<open>distinct_mset (dom_m N)\\<close>", "lemma in_dom_m_lookup_iff: \\<open>C \\<in># dom_m N' \\<longleftrightarrow> fmlookup N' C \\<noteq> None\\<close>", "lemma in_dom_in_ran_m[simp]: \\<open>i \\<in># dom_m N \\<Longrightarrow> the (fmlookup N i) \\<in># ran_m N\\<close>", "lemma fmupd_same[simp]:\n  \\<open>x1 \\<in># dom_m x1aa \\<Longrightarrow> fmupd x1 (the (fmlookup x1aa x1)) x1aa = x1aa\\<close>", "lemma ran_m_fmempty[simp]: \\<open>ran_m fmempty = {#}\\<close> and\n    dom_m_fmempty[simp]: \\<open>dom_m fmempty = {#}\\<close>", "lemma fmrestrict_set_fmupd:\n  \\<open>a \\<in> xs \\<Longrightarrow> fmrestrict_set xs (fmupd a C N) = fmupd a C (fmrestrict_set xs N)\\<close>\n  \\<open>a \\<notin> xs \\<Longrightarrow> fmrestrict_set xs (fmupd a C N) = fmrestrict_set xs N\\<close>", "lemma fset_fmdom_fmrestrict_set:\n  \\<open>fset (fmdom (fmrestrict_set xs N)) = fset (fmdom N) \\<inter> xs\\<close>", "lemma dom_m_fmrestrict_set: \\<open>dom_m (fmrestrict_set (set xs) N) = mset xs \\<inter># dom_m N\\<close>", "lemma dom_m_fmrestrict_set': \\<open>dom_m (fmrestrict_set xs N) = mset_set (xs \\<inter> set_mset (dom_m N))\\<close>", "lemma indom_mI: \\<open>fmlookup m x = Some y \\<Longrightarrow> x \\<in># dom_m m\\<close>", "lemma fmupd_fmdrop_id:\n  assumes \\<open>k |\\<in>| fmdom N'\\<close>\n  shows \\<open>fmupd k (the (fmlookup N' k)) (fmdrop k N') = N'\\<close>", "lemma fm_member_split: \\<open>k |\\<in>| fmdom N' \\<Longrightarrow> \\<exists>N'' v. N' = fmupd k v N'' \\<and> the (fmlookup N' k) = v \\<and>\n    k |\\<notin>| fmdom N''\\<close>", "lemma \\<open>fmdrop k (fmupd k va N'') = fmdrop k N''\\<close>", "lemma fmap_ext_fmdom:\n  \\<open>(fmdom N = fmdom N') \\<Longrightarrow> (\\<And> x. x |\\<in>| fmdom N \\<Longrightarrow> fmlookup N x = fmlookup N' x) \\<Longrightarrow>\n       N = N'\\<close>", "lemma fmrestrict_set_insert_in:\n  \\<open>xa  \\<in> fset (fmdom N) \\<Longrightarrow>\n    fmrestrict_set (insert xa l1) N = fmupd xa (the (fmlookup N xa)) (fmrestrict_set l1 N)\\<close>", "lemma fmrestrict_set_insert_notin:\n  \\<open>xa  \\<notin> fset (fmdom N) \\<Longrightarrow>\n    fmrestrict_set (insert xa l1) N = fmrestrict_set l1 N\\<close>", "lemma fmrestrict_set_insert_in_dom_m[simp]:\n  \\<open>xa  \\<in># dom_m N \\<Longrightarrow>\n    fmrestrict_set (insert xa l1) N = fmupd xa (the (fmlookup N xa)) (fmrestrict_set l1 N)\\<close>", "lemma fmrestrict_set_insert_notin_dom_m[simp]:\n  \\<open>xa  \\<notin># dom_m N \\<Longrightarrow>\n    fmrestrict_set (insert xa l1) N = fmrestrict_set l1 N\\<close>", "lemma fmlookup_restrict_set_id: \\<open>fset (fmdom N) \\<subseteq> A \\<Longrightarrow> fmrestrict_set A N = N\\<close>", "lemma fmlookup_restrict_set_id': \\<open>set_mset (dom_m N) \\<subseteq> A \\<Longrightarrow> fmrestrict_set A N = N\\<close>", "lemma ran_m_mapsto_upd:\n  assumes\n    NC: \\<open>C \\<in># dom_m N\\<close>\n  shows \\<open>ran_m (fmupd C C' N) = add_mset C' (remove1_mset (the (fmlookup N C)) (ran_m N))\\<close>", "lemma ran_m_mapsto_upd_notin:\n  assumes NC: \\<open>C \\<notin># dom_m N\\<close>\n  shows \\<open>ran_m (fmupd C C' N) = add_mset C' (ran_m N)\\<close>", "lemma image_mset_If_eq_notin:\n   \\<open>C \\<notin># A \\<Longrightarrow> {#f (if x = C then a x else b x). x \\<in># A#} = {# f(b x). x \\<in># A #}\\<close>", "lemma filter_mset_cong2:\n  \"(\\<And>x. x \\<in># M \\<Longrightarrow> f x = g x) \\<Longrightarrow> M = N \\<Longrightarrow> filter_mset f M = filter_mset g N\"", "lemma ran_m_fmdrop:\n  \\<open>C \\<in># dom_m N \\<Longrightarrow>  ran_m (fmdrop C N) = remove1_mset (the (fmlookup N C)) (ran_m N)\\<close>", "lemma ran_m_fmdrop_notin:\n  \\<open>C \\<notin># dom_m N \\<Longrightarrow> ran_m (fmdrop C N) = ran_m N\\<close>", "lemma ran_m_fmdrop_If:\n  \\<open>ran_m (fmdrop C N) = (if C \\<in># dom_m N then remove1_mset (the (fmlookup N C)) (ran_m N) else ran_m N)\\<close>", "lemma dom_m_empty_iff[iff]:\n  \\<open>dom_m NU = {#} \\<longleftrightarrow> NU = fmempty\\<close>"], "translations": [["", "lemma fset_mset_mset_fset: \\<open>fset_mset (mset_fset N) = N\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. fset_mset (mset_fset N) = N", "by (auto simp: fset.fset_inverse fset_mset_def)"], ["", "lemma mset_fset_fset_mset[simp]:\n  \\<open>mset_fset (fset_mset N) = remdups_mset N\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. mset_fset (fset_mset N) = remdups_mset N", "by (auto simp: fset.fset_inverse fset_mset_def Abs_fset_inverse remdups_mset_def)"], ["", "lemma in_mset_fset_fmember[simp]: \\<open>x \\<in># mset_fset N \\<longleftrightarrow> x |\\<in>| N\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in># mset_fset N) = (x |\\<in>| N)", "by (auto simp: fmember.rep_eq)"], ["", "lemma in_fset_mset_mset[simp]: \\<open>x |\\<in>| fset_mset N \\<longleftrightarrow> x \\<in># N\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x |\\<in>| fset_mset N) = (x \\<in># N)", "by (auto simp: fmember.rep_eq fset_mset_def Abs_fset_inverse)"], ["", "subsection \\<open>Finite map and multisets\\<close>"], ["", "text \\<open>Roughly the same as \\<^term>\\<open>ran\\<close> and \\<^term>\\<open>dom\\<close>, but with duplication in the content (unlike their\n  finite sets counterpart) while still working on finite domains (unlike a function mapping).\n  Remark that \\<^term>\\<open>dom_m\\<close> (the keys) does not contain duplicates, but we keep for symmetry (and for\n  easier use of multiset operators as in the definition of \\<^term>\\<open>ran_m\\<close>).\n\\<close>"], ["", "definition dom_m where\n  \\<open>dom_m N = mset_fset (fmdom N)\\<close>"], ["", "definition ran_m where\n  \\<open>ran_m N = the `# fmlookup N `# dom_m N\\<close>"], ["", "lemma dom_m_fmdrop[simp]: \\<open>dom_m (fmdrop C N) = remove1_mset C (dom_m N)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. dom_m (fmdrop C N) = remove1_mset C (dom_m N)", "unfolding dom_m_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mset_fset (fmdom (fmdrop C N)) = remove1_mset C (mset_fset (fmdom N))", "by (cases \\<open>C |\\<in>| fmdom N\\<close>)\n    (auto simp: mset_set.remove fmember.rep_eq)"], ["", "lemma dom_m_fmdrop_All: \\<open>dom_m (fmdrop C N) = removeAll_mset C (dom_m N)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. dom_m (fmdrop C N) = removeAll_mset C (dom_m N)", "unfolding dom_m_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mset_fset (fmdom (fmdrop C N)) = removeAll_mset C (mset_fset (fmdom N))", "by (cases \\<open>C |\\<in>| fmdom N\\<close>)\n    (auto simp: mset_set.remove fmember.rep_eq)"], ["", "lemma dom_m_fmupd[simp]: \\<open>dom_m (fmupd k C N) = add_mset k (remove1_mset k (dom_m N))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. dom_m (fmupd k C N) = add_mset k (remove1_mset k (dom_m N))", "unfolding dom_m_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mset_fset (fmdom (fmupd k C N)) =\n    add_mset k (remove1_mset k (mset_fset (fmdom N)))", "by (cases \\<open>k |\\<in>| fmdom N\\<close>)\n    (auto simp: mset_set.remove fmember.rep_eq mset_set.insert_remove)"], ["", "lemma distinct_mset_dom: \\<open>distinct_mset (dom_m N)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct_mset (dom_m N)", "by (simp add: distinct_mset_mset_set dom_m_def)"], ["", "lemma in_dom_m_lookup_iff: \\<open>C \\<in># dom_m N' \\<longleftrightarrow> fmlookup N' C \\<noteq> None\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (C \\<in># dom_m N') = (fmlookup N' C \\<noteq> None)", "by (auto simp: dom_m_def fmdom.rep_eq fmlookup_dom'_iff)"], ["", "lemma in_dom_in_ran_m[simp]: \\<open>i \\<in># dom_m N \\<Longrightarrow> the (fmlookup N i) \\<in># ran_m N\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in># dom_m N \\<Longrightarrow> the (fmlookup N i) \\<in># ran_m N", "by (auto simp: ran_m_def)"], ["", "lemma fmupd_same[simp]:\n  \\<open>x1 \\<in># dom_m x1aa \\<Longrightarrow> fmupd x1 (the (fmlookup x1aa x1)) x1aa = x1aa\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 \\<in># dom_m x1aa \\<Longrightarrow>\n    fmupd x1 (the (fmlookup x1aa x1)) x1aa = x1aa", "by (metis fmap_ext fmupd_lookup in_dom_m_lookup_iff option.collapse)"], ["", "lemma ran_m_fmempty[simp]: \\<open>ran_m fmempty = {#}\\<close> and\n    dom_m_fmempty[simp]: \\<open>dom_m fmempty = {#}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ran_m fmempty = {#} &&& dom_m fmempty = {#}", "by (auto simp: ran_m_def dom_m_def)"], ["", "lemma fmrestrict_set_fmupd:\n  \\<open>a \\<in> xs \\<Longrightarrow> fmrestrict_set xs (fmupd a C N) = fmupd a C (fmrestrict_set xs N)\\<close>\n  \\<open>a \\<notin> xs \\<Longrightarrow> fmrestrict_set xs (fmupd a C N) = fmrestrict_set xs N\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<in> xs \\<Longrightarrow>\n     fmrestrict_set xs (fmupd a C N) = fmupd a C (fmrestrict_set xs N)) &&&\n    (a \\<notin> xs \\<Longrightarrow>\n     fmrestrict_set xs (fmupd a C N) = fmrestrict_set xs N)", "by (auto simp: fmfilter_alt_defs)"], ["", "lemma fset_fmdom_fmrestrict_set:\n  \\<open>fset (fmdom (fmrestrict_set xs N)) = fset (fmdom N) \\<inter> xs\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. fset (fmdom (fmrestrict_set xs N)) = fset (fmdom N) \\<inter> xs", "by (auto simp: fmfilter_alt_defs)"], ["", "lemma dom_m_fmrestrict_set: \\<open>dom_m (fmrestrict_set (set xs) N) = mset xs \\<inter># dom_m N\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. dom_m (fmrestrict_set (set xs) N) = mset xs \\<inter># dom_m N", "using fset_fmdom_fmrestrict_set[of \\<open>set xs\\<close> N] distinct_mset_dom[of N]\n  distinct_mset_inter_remdups_mset[of \\<open>mset_fset (fmdom N)\\<close> \\<open>mset xs\\<close>]"], ["proof (prove)\nusing this:\n  fset (fmdom (fmrestrict_set (set xs) N)) = fset (fmdom N) \\<inter> set xs\n  distinct_mset (dom_m N)\n  distinct_mset (mset_fset (fmdom N)) \\<Longrightarrow>\n  mset_fset (fmdom N) \\<inter># remdups_mset (mset xs) =\n  mset_fset (fmdom N) \\<inter># mset xs\n\ngoal (1 subgoal):\n 1. dom_m (fmrestrict_set (set xs) N) = mset xs \\<inter># dom_m N", "by (auto simp: dom_m_def fset_mset_mset_fset finite_mset_set_inter multiset_inter_commute\n    remdups_mset_def)"], ["", "lemma dom_m_fmrestrict_set': \\<open>dom_m (fmrestrict_set xs N) = mset_set (xs \\<inter> set_mset (dom_m N))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. dom_m (fmrestrict_set xs N) = mset_set (xs \\<inter> set_mset (dom_m N))", "using fset_fmdom_fmrestrict_set[of \\<open>xs\\<close> N] distinct_mset_dom[of N]"], ["proof (prove)\nusing this:\n  fset (fmdom (fmrestrict_set xs N)) = fset (fmdom N) \\<inter> xs\n  distinct_mset (dom_m N)\n\ngoal (1 subgoal):\n 1. dom_m (fmrestrict_set xs N) = mset_set (xs \\<inter> set_mset (dom_m N))", "by (auto simp: dom_m_def fset_mset_mset_fset finite_mset_set_inter multiset_inter_commute\n    remdups_mset_def)"], ["", "lemma indom_mI: \\<open>fmlookup m x = Some y \\<Longrightarrow> x \\<in># dom_m m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup m x = Some y \\<Longrightarrow> x \\<in># dom_m m", "by (drule fmdomI)  (auto simp: dom_m_def fmember.rep_eq)"], ["", "lemma fmupd_fmdrop_id:\n  assumes \\<open>k |\\<in>| fmdom N'\\<close>\n  shows \\<open>fmupd k (the (fmlookup N' k)) (fmdrop k N') = N'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmupd k (the (fmlookup N' k)) (fmdrop k N') = N'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fmupd k (the (fmlookup N' k)) (fmdrop k N') = N'", "have [simp]: \\<open>map_upd k (the (fmlookup N' k))\n       (\\<lambda>x. if x \\<noteq> k then fmlookup N' x else None) =\n     map_upd k (the (fmlookup N' k))\n       (fmlookup N')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_upd k (the (fmlookup N' k))\n     (\\<lambda>x. if x \\<noteq> k then fmlookup N' x else None) =\n    map_upd k (the (fmlookup N' k)) (fmlookup N')", "by (auto intro!: ext simp: map_upd_def)"], ["proof (state)\nthis:\n  map_upd k (the (fmlookup N' k))\n   (\\<lambda>x. if x \\<noteq> k then fmlookup N' x else None) =\n  map_upd k (the (fmlookup N' k)) (fmlookup N')\n\ngoal (1 subgoal):\n 1. fmupd k (the (fmlookup N' k)) (fmdrop k N') = N'", "have [simp]: \\<open>map_upd k (the (fmlookup N' k)) (fmlookup N') = fmlookup N'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_upd k (the (fmlookup N' k)) (fmlookup N') = fmlookup N'", "using assms"], ["proof (prove)\nusing this:\n  k |\\<in>| fmdom N'\n\ngoal (1 subgoal):\n 1. map_upd k (the (fmlookup N' k)) (fmlookup N') = fmlookup N'", "by (auto intro!: ext simp: map_upd_def)"], ["proof (state)\nthis:\n  map_upd k (the (fmlookup N' k)) (fmlookup N') = fmlookup N'\n\ngoal (1 subgoal):\n 1. fmupd k (the (fmlookup N' k)) (fmdrop k N') = N'", "have [simp]: \\<open>finite (dom (\\<lambda>x. if x = k then None else fmlookup N' x))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (dom (\\<lambda>x. if x = k then None else fmlookup N' x))", "by (subst dom_if) auto"], ["proof (state)\nthis:\n  finite (dom (\\<lambda>x. if x = k then None else fmlookup N' x))\n\ngoal (1 subgoal):\n 1. fmupd k (the (fmlookup N' k)) (fmdrop k N') = N'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmupd k (the (fmlookup N' k)) (fmdrop k N') = N'", "apply (auto simp: fmupd_def fmupd.abs_eq[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fmap (map_upd k (the (fmlookup N' k)) (fmlookup (fmdrop k N'))) = N'", "unfolding fmlookup_drop"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fmap\n     (map_upd k (the (fmlookup N' k))\n       (\\<lambda>x. if x \\<noteq> k then fmlookup N' x else None)) =\n    N'", "apply (simp add: fmlookup_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  fmupd k (the (fmlookup N' k)) (fmdrop k N') = N'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fm_member_split: \\<open>k |\\<in>| fmdom N' \\<Longrightarrow> \\<exists>N'' v. N' = fmupd k v N'' \\<and> the (fmlookup N' k) = v \\<and>\n    k |\\<notin>| fmdom N''\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k |\\<in>| fmdom N' \\<Longrightarrow>\n    \\<exists>N'' v.\n       N' = fmupd k v N'' \\<and>\n       the (fmlookup N' k) = v \\<and> k |\\<notin>| fmdom N''", "by (rule exI[of _ \\<open>fmdrop k N'\\<close>])\n    (auto simp: fmupd_fmdrop_id)"], ["", "lemma \\<open>fmdrop k (fmupd k va N'') = fmdrop k N''\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdrop k (fmupd k va N'') = fmdrop k N''", "by (simp add: fmap_ext)"], ["", "lemma fmap_ext_fmdom:\n  \\<open>(fmdom N = fmdom N') \\<Longrightarrow> (\\<And> x. x |\\<in>| fmdom N \\<Longrightarrow> fmlookup N x = fmlookup N' x) \\<Longrightarrow>\n       N = N'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fmdom N = fmdom N';\n     \\<And>x.\n        x |\\<in>| fmdom N \\<Longrightarrow>\n        fmlookup N x = fmlookup N' x\\<rbrakk>\n    \\<Longrightarrow> N = N'", "by (rule fmap_ext)\n    (case_tac \\<open>x |\\<in>| fmdom N\\<close>, auto simp: fmdom_notD)"], ["", "lemma fmrestrict_set_insert_in:\n  \\<open>xa  \\<in> fset (fmdom N) \\<Longrightarrow>\n    fmrestrict_set (insert xa l1) N = fmupd xa (the (fmlookup N xa)) (fmrestrict_set l1 N)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. xa \\<in> fset (fmdom N) \\<Longrightarrow>\n    fmrestrict_set (insert xa l1) N =\n    fmupd xa (the (fmlookup N xa)) (fmrestrict_set l1 N)", "apply (rule fmap_ext_fmdom)"], ["proof (prove)\ngoal (2 subgoals):\n 1. xa \\<in> fset (fmdom N) \\<Longrightarrow>\n    fmdom (fmrestrict_set (insert xa l1) N) =\n    fmdom (fmupd xa (the (fmlookup N xa)) (fmrestrict_set l1 N))\n 2. \\<And>x.\n       \\<lbrakk>xa \\<in> fset (fmdom N);\n        x |\\<in>| fmdom (fmrestrict_set (insert xa l1) N)\\<rbrakk>\n       \\<Longrightarrow> fmlookup (fmrestrict_set (insert xa l1) N) x =\n                         fmlookup\n                          (fmupd xa (the (fmlookup N xa))\n                            (fmrestrict_set l1 N))\n                          x", "apply (auto simp: fset_fmdom_fmrestrict_set fmember.rep_eq notin_fset; fail)[]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>xa \\<in> fset (fmdom N);\n        x |\\<in>| fmdom (fmrestrict_set (insert xa l1) N)\\<rbrakk>\n       \\<Longrightarrow> fmlookup (fmrestrict_set (insert xa l1) N) x =\n                         fmlookup\n                          (fmupd xa (the (fmlookup N xa))\n                            (fmrestrict_set l1 N))\n                          x", "apply (auto simp: fmlookup_dom_iff; fail)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fmrestrict_set_insert_notin:\n  \\<open>xa  \\<notin> fset (fmdom N) \\<Longrightarrow>\n    fmrestrict_set (insert xa l1) N = fmrestrict_set l1 N\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. xa \\<notin> fset (fmdom N) \\<Longrightarrow>\n    fmrestrict_set (insert xa l1) N = fmrestrict_set l1 N", "by (rule fmap_ext_fmdom)\n     (auto simp: fset_fmdom_fmrestrict_set fmember.rep_eq notin_fset)"], ["", "lemma fmrestrict_set_insert_in_dom_m[simp]:\n  \\<open>xa  \\<in># dom_m N \\<Longrightarrow>\n    fmrestrict_set (insert xa l1) N = fmupd xa (the (fmlookup N xa)) (fmrestrict_set l1 N)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. xa \\<in># dom_m N \\<Longrightarrow>\n    fmrestrict_set (insert xa l1) N =\n    fmupd xa (the (fmlookup N xa)) (fmrestrict_set l1 N)", "by (simp add: fmrestrict_set_insert_in dom_m_def)"], ["", "lemma fmrestrict_set_insert_notin_dom_m[simp]:\n  \\<open>xa  \\<notin># dom_m N \\<Longrightarrow>\n    fmrestrict_set (insert xa l1) N = fmrestrict_set l1 N\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. xa \\<notin># dom_m N \\<Longrightarrow>\n    fmrestrict_set (insert xa l1) N = fmrestrict_set l1 N", "by (simp add: fmrestrict_set_insert_notin dom_m_def)"], ["", "lemma fmlookup_restrict_set_id: \\<open>fset (fmdom N) \\<subseteq> A \\<Longrightarrow> fmrestrict_set A N = N\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. fset (fmdom N) \\<subseteq> A \\<Longrightarrow> fmrestrict_set A N = N", "by (metis fmap_ext fmdom'_alt_def fmdom'_notD fmlookup_restrict_set subset_iff)"], ["", "lemma fmlookup_restrict_set_id': \\<open>set_mset (dom_m N) \\<subseteq> A \\<Longrightarrow> fmrestrict_set A N = N\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset (dom_m N) \\<subseteq> A \\<Longrightarrow>\n    fmrestrict_set A N = N", "by (rule fmlookup_restrict_set_id)\n    (auto simp: dom_m_def)"], ["", "lemma ran_m_mapsto_upd:\n  assumes\n    NC: \\<open>C \\<in># dom_m N\\<close>\n  shows \\<open>ran_m (fmupd C C' N) = add_mset C' (remove1_mset (the (fmlookup N C)) (ran_m N))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ran_m (fmupd C C' N) =\n    add_mset C' (remove1_mset (the (fmlookup N C)) (ran_m N))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ran_m (fmupd C C' N) =\n    add_mset C' (remove1_mset (the (fmlookup N C)) (ran_m N))", "define N' where\n    \\<open>N' = fmdrop C N\\<close>"], ["proof (state)\nthis:\n  N' = fmdrop C N\n\ngoal (1 subgoal):\n 1. ran_m (fmupd C C' N) =\n    add_mset C' (remove1_mset (the (fmlookup N C)) (ran_m N))", "have N_N': \\<open>dom_m N = add_mset C (dom_m N')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. dom_m N = add_mset C (dom_m N')", "using NC"], ["proof (prove)\nusing this:\n  C \\<in># dom_m N\n\ngoal (1 subgoal):\n 1. dom_m N = add_mset C (dom_m N')", "unfolding N'_def"], ["proof (prove)\nusing this:\n  C \\<in># dom_m N\n\ngoal (1 subgoal):\n 1. dom_m N = add_mset C (dom_m (fmdrop C N))", "by auto"], ["proof (state)\nthis:\n  dom_m N = add_mset C (dom_m N')\n\ngoal (1 subgoal):\n 1. ran_m (fmupd C C' N) =\n    add_mset C' (remove1_mset (the (fmlookup N C)) (ran_m N))", "have \\<open>C \\<notin># dom_m N'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<notin># dom_m N'", "using NC distinct_mset_dom[of N]"], ["proof (prove)\nusing this:\n  C \\<in># dom_m N\n  distinct_mset (dom_m N)\n\ngoal (1 subgoal):\n 1. C \\<notin># dom_m N'", "unfolding N_N'"], ["proof (prove)\nusing this:\n  C \\<in># add_mset C (dom_m N')\n  distinct_mset (add_mset C (dom_m N'))\n\ngoal (1 subgoal):\n 1. C \\<notin># dom_m N'", "by auto"], ["proof (state)\nthis:\n  C \\<notin># dom_m N'\n\ngoal (1 subgoal):\n 1. ran_m (fmupd C C' N) =\n    add_mset C' (remove1_mset (the (fmlookup N C)) (ran_m N))", "then"], ["proof (chain)\npicking this:\n  C \\<notin># dom_m N'", "show ?thesis"], ["proof (prove)\nusing this:\n  C \\<notin># dom_m N'\n\ngoal (1 subgoal):\n 1. ran_m (fmupd C C' N) =\n    add_mset C' (remove1_mset (the (fmlookup N C)) (ran_m N))", "by (auto simp: N_N' ran_m_def mset_set.insert_remove image_mset_remove1_mset_if\n      intro!: image_mset_cong)"], ["proof (state)\nthis:\n  ran_m (fmupd C C' N) =\n  add_mset C' (remove1_mset (the (fmlookup N C)) (ran_m N))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ran_m_mapsto_upd_notin:\n  assumes NC: \\<open>C \\<notin># dom_m N\\<close>\n  shows \\<open>ran_m (fmupd C C' N) = add_mset C' (ran_m N)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ran_m (fmupd C C' N) = add_mset C' (ran_m N)", "using NC"], ["proof (prove)\nusing this:\n  C \\<notin># dom_m N\n\ngoal (1 subgoal):\n 1. ran_m (fmupd C C' N) = add_mset C' (ran_m N)", "by (auto simp: ran_m_def mset_set.insert_remove image_mset_remove1_mset_if\n      intro!: image_mset_cong split: if_splits)"], ["", "lemma image_mset_If_eq_notin:\n   \\<open>C \\<notin># A \\<Longrightarrow> {#f (if x = C then a x else b x). x \\<in># A#} = {# f(b x). x \\<in># A #}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<notin># A \\<Longrightarrow>\n    {#f (if x = C then a x else b x). x \\<in># A#} = {#f (b x). x \\<in># A#}", "by (induction A) auto"], ["", "lemma filter_mset_cong2:\n  \"(\\<And>x. x \\<in># M \\<Longrightarrow> f x = g x) \\<Longrightarrow> M = N \\<Longrightarrow> filter_mset f M = filter_mset g N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x. x \\<in># M \\<Longrightarrow> f x = g x; M = N\\<rbrakk>\n    \\<Longrightarrow> filter_mset f M = filter_mset g N", "by (hypsubst, rule filter_mset_cong, simp)"], ["", "lemma ran_m_fmdrop:\n  \\<open>C \\<in># dom_m N \\<Longrightarrow>  ran_m (fmdrop C N) = remove1_mset (the (fmlookup N C)) (ran_m N)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<in># dom_m N \\<Longrightarrow>\n    ran_m (fmdrop C N) = remove1_mset (the (fmlookup N C)) (ran_m N)", "using distinct_mset_dom[of N]"], ["proof (prove)\nusing this:\n  distinct_mset (dom_m N)\n\ngoal (1 subgoal):\n 1. C \\<in># dom_m N \\<Longrightarrow>\n    ran_m (fmdrop C N) = remove1_mset (the (fmlookup N C)) (ran_m N)", "by (cases \\<open>fmlookup N C\\<close>)\n    (auto simp: ran_m_def image_mset_If_eq_notin[of C _ \\<open>\\<lambda>x. fst (the x)\\<close>]\n     dest!: multi_member_split\n     intro!: filter_mset_cong2 image_mset_cong2)"], ["", "lemma ran_m_fmdrop_notin:\n  \\<open>C \\<notin># dom_m N \\<Longrightarrow> ran_m (fmdrop C N) = ran_m N\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<notin># dom_m N \\<Longrightarrow> ran_m (fmdrop C N) = ran_m N", "using distinct_mset_dom[of N]"], ["proof (prove)\nusing this:\n  distinct_mset (dom_m N)\n\ngoal (1 subgoal):\n 1. C \\<notin># dom_m N \\<Longrightarrow> ran_m (fmdrop C N) = ran_m N", "by (auto simp: ran_m_def image_mset_If_eq_notin[of C _ \\<open>\\<lambda>x. fst (the x)\\<close>]\n    dest!: multi_member_split\n    intro!: filter_mset_cong2 image_mset_cong2)"], ["", "lemma ran_m_fmdrop_If:\n  \\<open>ran_m (fmdrop C N) = (if C \\<in># dom_m N then remove1_mset (the (fmlookup N C)) (ran_m N) else ran_m N)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ran_m (fmdrop C N) =\n    (if C \\<in># dom_m N then remove1_mset (the (fmlookup N C)) (ran_m N)\n     else ran_m N)", "using distinct_mset_dom[of N]"], ["proof (prove)\nusing this:\n  distinct_mset (dom_m N)\n\ngoal (1 subgoal):\n 1. ran_m (fmdrop C N) =\n    (if C \\<in># dom_m N then remove1_mset (the (fmlookup N C)) (ran_m N)\n     else ran_m N)", "by (auto simp: ran_m_def image_mset_If_eq_notin[of C _ \\<open>\\<lambda>x. fst (the x)\\<close>]\n    dest!: multi_member_split\n    intro!: filter_mset_cong2 image_mset_cong2)"], ["", "lemma dom_m_empty_iff[iff]:\n  \\<open>dom_m NU = {#} \\<longleftrightarrow> NU = fmempty\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (dom_m NU = {#}) = (NU = fmempty)", "by (cases NU) (auto simp: dom_m_def mset_set.insert_remove)"], ["", "end"]]}