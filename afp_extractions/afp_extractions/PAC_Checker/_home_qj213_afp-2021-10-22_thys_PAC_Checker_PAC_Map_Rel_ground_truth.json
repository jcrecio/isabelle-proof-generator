{"file_name": "/home/qj213/afp-2021-10-22/thys/PAC_Checker/PAC_Map_Rel.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/PAC_Checker", "problem_names": ["lemma fmap_rel_alt_def:\n  \\<open>\\<langle>K, V\\<rangle>fmap_rel \\<equiv>\n     {(m1, m2).\n      (\\<forall>i j. i \\<in># dom_m m2 \\<longrightarrow>\n             (j, i) \\<in> K \\<longrightarrow> (the (fmlookup m1 j), the (fmlookup m2 i)) \\<in> V) \\<and>\n      fset (fmdom m1) \\<subseteq> Domain K \\<and>\n      fset (fmdom m2) \\<subseteq> Range K \\<and>\n      (\\<forall>i j. (i, j) \\<in> K \\<longrightarrow> (j \\<in># dom_m m2) = (i \\<in># dom_m m1))}\n\\<close>", "lemma fmdom_empty_fmempty_iff[simp]: \\<open>fmdom m = {||} \\<longleftrightarrow> m = fmempty\\<close>", "lemma fmap_rel_empty1_simp[simp]:\n  \"(fmempty,m)\\<in>\\<langle>K,V\\<rangle>fmap_rel \\<longleftrightarrow> m=fmempty\"", "lemma fmap_rel_empty2_simp[simp]:\n  \"(m,fmempty)\\<in>\\<langle>K,V\\<rangle>fmap_rel \\<longleftrightarrow> m=fmempty\"", "lemma [synth_rules]: \"\\<lbrakk>INTF_OF_REL K TYPE('k); INTF_OF_REL V TYPE('v)\\<rbrakk>\n  \\<Longrightarrow> INTF_OF_REL (\\<langle>K,V\\<rangle>fmap_rel) TYPE(('k,'v) f_map)\"", "lemma fmap_rel_fmupd_fmap_rel:\n  \\<open>(A, B) \\<in> \\<langle>K, R\\<rangle>fmap_rel \\<Longrightarrow> (p, p') \\<in> K \\<Longrightarrow> (q, q') \\<in> R \\<Longrightarrow>\n   (fmupd p q A, fmupd p' q' B) \\<in> \\<langle>K, R\\<rangle>fmap_rel\\<close>\n  if \"single_valued K\" \"single_valued (K\\<inverse>)\"", "lemma remove1_mset_eq_add_mset_iff:\n   \\<open>remove1_mset a A = add_mset a A' \\<longleftrightarrow> A = add_mset a (add_mset a A')\\<close>", "lemma fmap_rel_fmdrop_fmap_rel:\n  \\<open>(fmdrop p A, fmdrop p' B) \\<in> \\<langle>K, R\\<rangle>fmap_rel\\<close>\n  if single: \"single_valued K\" \"single_valued (K\\<inverse>)\" and\n    H0: \\<open>(A, B) \\<in> \\<langle>K, R\\<rangle>fmap_rel\\<close> \\<open>(p, p') \\<in> K\\<close>", "lemma fmap_rel_nat_the_fmlookup[intro]:\n  \\<open>(A, B) \\<in> \\<langle>S, R\\<rangle>fmap_rel \\<Longrightarrow> (p, p') \\<in> S \\<Longrightarrow> p' \\<in># dom_m B \\<Longrightarrow>\n     (the (fmlookup A p), the (fmlookup B p')) \\<in> R\\<close>", "lemma fmap_rel_in_dom_iff:\n  \\<open>(aa, a'a) \\<in> \\<langle>K, V\\<rangle>fmap_rel \\<Longrightarrow>\n    (a, a') \\<in> K \\<Longrightarrow>\n    a' \\<in># dom_m a'a \\<longleftrightarrow>\n    a \\<in># dom_m aa\\<close>", "lemma fmap_rel_fmlookup_rel:\n  \\<open>(a, a') \\<in> K \\<Longrightarrow> (aa, a'a) \\<in> \\<langle>K, V\\<rangle>fmap_rel \\<Longrightarrow>\n         (fmlookup aa a, fmlookup a'a a') \\<in> \\<langle>V\\<rangle>option_rel\\<close>", "lemma in_fdom_alt: \"k\\<in>#dom_m m \\<longleftrightarrow> \\<not>is_None (fmlookup m k)\"", "lemma pat_fmap_empty[pat_rules]: \"fmempty \\<equiv> op_fmap_empty\"", "lemma pat_map_is_empty[pat_rules]:\n  \"(=) $m$fmempty \\<equiv> op_fmap_is_empty$m\"\n  \"(=) $fmempty$m \\<equiv> op_fmap_is_empty$m\"\n  \"(=) $(dom_m$m)${#} \\<equiv> op_fmap_is_empty$m\"\n  \"(=) ${#}$(dom_m$m) \\<equiv> op_fmap_is_empty$m\"", "lemma op_map_contains_key[pat_rules]:\n  \"(\\<in>#) $ k $ (dom_m$m) \\<equiv> op_fmap_contains_key$'k$'m\"", "lemma fmdrop_set_None:\n  \\<open>(op_map_delete, fmdrop) \\<in> Id \\<rightarrow> map_fmap_rel \\<rightarrow> map_fmap_rel\\<close>", "lemma map_upd_fmupd:\n  \\<open>(op_map_update, fmupd) \\<in> Id \\<rightarrow> Id \\<rightarrow> map_fmap_rel \\<rightarrow> map_fmap_rel\\<close>", "lemma [def_pat_rules]:\n  \\<open>((\\<in>#)$k$(dom_m$A)) \\<equiv> Not$(is_None$(fmlookup'$k$A))\\<close>", "lemma op_map_lookup_fmlookup:\n  \\<open>(op_map_lookup, fmlookup') \\<in> Id \\<rightarrow> map_fmap_rel \\<rightarrow> \\<langle>Id\\<rangle>option_rel\\<close>", "lemmas fmap_delete_hnr [sepref_fr_rules] =\n  hm.delete_hnr[FCOMP fmdrop_set_None]", "lemmas fmap_update_hnr [sepref_fr_rules] =\n  hm.update_hnr[FCOMP map_upd_fmupd]", "lemmas fmap_lookup_hnr [sepref_fr_rules] =\n  hm.lookup_hnr[FCOMP op_map_lookup_fmlookup]", "lemma fmempty_empty:\n  \\<open>(uncurry0 (RETURN op_map_empty), uncurry0 (RETURN fmempty)) \\<in> unit_rel \\<rightarrow>\\<^sub>f \\<langle>map_fmap_rel\\<rangle>nres_rel\\<close>", "lemmas [sepref_fr_rules] =\n  hm.empty_hnr[FCOMP fmempty_empty, unfolded op_fmap_empty_def[symmetric]]", "lemmas iam_fmap_delete_hnr [sepref_fr_rules] =\n  iam.delete_hnr[FCOMP fmdrop_set_None]", "lemmas iam_ffmap_update_hnr [sepref_fr_rules] =\n  iam.update_hnr[FCOMP map_upd_fmupd]", "lemmas iam_ffmap_lookup_hnr [sepref_fr_rules] =\n  iam.lookup_hnr[FCOMP op_map_lookup_fmlookup]", "lemma iam_fmempty_empty:\n  \\<open>(uncurry0 (RETURN op_map_empty), uncurry0 (RETURN op_iam_fmap_empty)) \\<in> unit_rel \\<rightarrow>\\<^sub>f \\<langle>map_fmap_rel\\<rangle>nres_rel\\<close>", "lemmas [sepref_fr_rules] =\n  iam.empty_hnr[FCOMP fmempty_empty, unfolded op_iam_fmap_empty_def[symmetric]]", "lemma [sepref_fr_rules]:\n  \\<open>((Array.len), upper_bound_on_dom) \\<in> (iam_fmap_assn nat_assn V)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn\\<close>", "lemma fmap_rel_nat_rel_dom_m[simp]:\n  \\<open>(A, B) \\<in> \\<langle>nat_rel, R\\<rangle>fmap_rel \\<Longrightarrow> dom_m A = dom_m B\\<close>", "lemma ref_two_step':\n  \\<open>A \\<le> B \\<Longrightarrow>  \\<Down> R A \\<le> \\<Down> R B\\<close>"], "translations": [["", "lemma fmap_rel_alt_def:\n  \\<open>\\<langle>K, V\\<rangle>fmap_rel \\<equiv>\n     {(m1, m2).\n      (\\<forall>i j. i \\<in># dom_m m2 \\<longrightarrow>\n             (j, i) \\<in> K \\<longrightarrow> (the (fmlookup m1 j), the (fmlookup m2 i)) \\<in> V) \\<and>\n      fset (fmdom m1) \\<subseteq> Domain K \\<and>\n      fset (fmdom m2) \\<subseteq> Range K \\<and>\n      (\\<forall>i j. (i, j) \\<in> K \\<longrightarrow> (j \\<in># dom_m m2) = (i \\<in># dom_m m1))}\n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>K, V\\<rangle>fmap_rel \\<equiv>\n    {(m1, m2).\n     (\\<forall>i j.\n         i \\<in># dom_m m2 \\<longrightarrow>\n         (j, i) \\<in> K \\<longrightarrow>\n         (the (fmlookup m1 j), the (fmlookup m2 i)) \\<in> V) \\<and>\n     fset (fmdom m1) \\<subseteq> Domain K \\<and>\n     fset (fmdom m2) \\<subseteq> Range K \\<and>\n     (\\<forall>i j.\n         (i, j) \\<in> K \\<longrightarrow>\n         (j \\<in># dom_m m2) = (i \\<in># dom_m m1))}", "unfolding fmap_rel_def dom_m_def fmember.rep_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(m1, m2).\n     (\\<forall>i j.\n         i \\<in> fset (fmdom m2) \\<longrightarrow>\n         (j, i) \\<in> K \\<longrightarrow>\n         (the (fmlookup m1 j), the (fmlookup m2 i)) \\<in> V) \\<and>\n     fset (fmdom m1) \\<subseteq> Domain K \\<and>\n     fset (fmdom m2) \\<subseteq> Range K \\<and>\n     (\\<forall>i j.\n         (i, j) \\<in> K \\<longrightarrow>\n         (j \\<in> fset (fmdom m2)) = (i \\<in> fset (fmdom m1)))} \\<equiv>\n    {(m1, m2).\n     (\\<forall>i j.\n         i \\<in># mset_fset (fmdom m2) \\<longrightarrow>\n         (j, i) \\<in> K \\<longrightarrow>\n         (the (fmlookup m1 j), the (fmlookup m2 i)) \\<in> V) \\<and>\n     fset (fmdom m1) \\<subseteq> Domain K \\<and>\n     fset (fmdom m2) \\<subseteq> Range K \\<and>\n     (\\<forall>i j.\n         (i, j) \\<in> K \\<longrightarrow>\n         (j \\<in># mset_fset (fmdom m2)) = (i \\<in># mset_fset (fmdom m1)))}", "by auto"], ["", "lemma fmdom_empty_fmempty_iff[simp]: \\<open>fmdom m = {||} \\<longleftrightarrow> m = fmempty\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fmdom m = {||}) = (m = fmempty)", "by (metis fmdom_empty fmdrop_fset_fmdom fmdrop_fset_null)"], ["", "lemma fmap_rel_empty1_simp[simp]:\n  \"(fmempty,m)\\<in>\\<langle>K,V\\<rangle>fmap_rel \\<longleftrightarrow> m=fmempty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((fmempty, m) \\<in> \\<langle>K, V\\<rangle>fmap_rel) = (m = fmempty)", "apply (cases \\<open>fmdom m = {||}\\<close>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. fmdom m = {||} \\<Longrightarrow>\n    ((fmempty, m) \\<in> \\<langle>K, V\\<rangle>fmap_rel) = (m = fmempty)\n 2. fmdom m \\<noteq> {||} \\<Longrightarrow>\n    ((fmempty, m) \\<in> \\<langle>K, V\\<rangle>fmap_rel) = (m = fmempty)", "apply (auto simp: fmap_rel_def)[]"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom m \\<noteq> {||} \\<Longrightarrow>\n    ((fmempty, m) \\<in> \\<langle>K, V\\<rangle>fmap_rel) = (m = fmempty)", "by (auto simp add: fmember.rep_eq fmap_rel_def simp del: fmdom_empty_fmempty_iff)"], ["", "lemma fmap_rel_empty2_simp[simp]:\n  \"(m,fmempty)\\<in>\\<langle>K,V\\<rangle>fmap_rel \\<longleftrightarrow> m=fmempty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((m, fmempty) \\<in> \\<langle>K, V\\<rangle>fmap_rel) = (m = fmempty)", "apply (cases \\<open>fmdom m = {||}\\<close>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. fmdom m = {||} \\<Longrightarrow>\n    ((m, fmempty) \\<in> \\<langle>K, V\\<rangle>fmap_rel) = (m = fmempty)\n 2. fmdom m \\<noteq> {||} \\<Longrightarrow>\n    ((m, fmempty) \\<in> \\<langle>K, V\\<rangle>fmap_rel) = (m = fmempty)", "apply (auto simp: fmap_rel_def)[]"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom m \\<noteq> {||} \\<Longrightarrow>\n    ((m, fmempty) \\<in> \\<langle>K, V\\<rangle>fmap_rel) = (m = fmempty)", "by (fastforce simp add: fmember.rep_eq fmap_rel_def simp del: fmdom_empty_fmempty_iff)"], ["", "sepref_decl_intf ('k,'v) f_map is \"('k, 'v) fmap\""], ["", "lemma [synth_rules]: \"\\<lbrakk>INTF_OF_REL K TYPE('k); INTF_OF_REL V TYPE('v)\\<rbrakk>\n  \\<Longrightarrow> INTF_OF_REL (\\<langle>K,V\\<rangle>fmap_rel) TYPE(('k,'v) f_map)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>INTF_OF_REL K TYPE('k); INTF_OF_REL V TYPE('v)\\<rbrakk>\n    \\<Longrightarrow> INTF_OF_REL (\\<langle>K, V\\<rangle>fmap_rel)\n                       TYPE(('k, 'v) f_map)", "by simp"], ["", "subsection \\<open>Operations\\<close>"], ["", "sepref_decl_op fmap_empty: \"fmempty\" :: \"\\<langle>K,V\\<rangle>fmap_rel\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "sepref_decl_op fmap_is_empty: \"(=) fmempty\" :: \"\\<langle>K,V\\<rangle>fmap_rel \\<rightarrow> bool_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((RETURN \\<circ>\\<circ> (=)) fmempty,\n     (RETURN \\<circ>\\<circ> (=)) fmempty)\n    \\<in> \\<langle>K,\n    V\\<rangle>fmap_rel \\<rightarrow>\\<^sub>f \\<langle>bool_rel\\<rangle>nres_rel", "apply (rule fref_ncI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((RETURN \\<circ>\\<circ> (=)) fmempty,\n     (RETURN \\<circ>\\<circ> (=)) fmempty)\n    \\<in> \\<langle>K, V\\<rangle>fmap_rel \\<rightarrow>\n          \\<langle>bool_rel\\<rangle>nres_rel", "apply parametricity"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((=) fmempty, (=) fmempty)\n    \\<in> \\<langle>K, V\\<rangle>fmap_rel \\<rightarrow> bool_rel", "apply (rule fun_relI; auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fmap_rel_fmupd_fmap_rel:\n  \\<open>(A, B) \\<in> \\<langle>K, R\\<rangle>fmap_rel \\<Longrightarrow> (p, p') \\<in> K \\<Longrightarrow> (q, q') \\<in> R \\<Longrightarrow>\n   (fmupd p q A, fmupd p' q' B) \\<in> \\<langle>K, R\\<rangle>fmap_rel\\<close>\n  if \"single_valued K\" \"single_valued (K\\<inverse>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(A, B) \\<in> \\<langle>K, R\\<rangle>fmap_rel; (p, p') \\<in> K;\n     (q, q') \\<in> R\\<rbrakk>\n    \\<Longrightarrow> (fmupd p q A, fmupd p' q' B) \\<in> \\<langle>K,\n                      R\\<rangle>fmap_rel", "using that"], ["proof (prove)\nusing this:\n  single_valued K\n  single_valued (K\\<inverse>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(A, B) \\<in> \\<langle>K, R\\<rangle>fmap_rel; (p, p') \\<in> K;\n     (q, q') \\<in> R\\<rbrakk>\n    \\<Longrightarrow> (fmupd p q A, fmupd p' q' B) \\<in> \\<langle>K,\n                      R\\<rangle>fmap_rel", "unfolding fmap_rel_alt_def"], ["proof (prove)\nusing this:\n  single_valued K\n  single_valued (K\\<inverse>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(A, B)\n             \\<in> {(m1, m2).\n                    (\\<forall>i j.\n                        i \\<in># dom_m m2 \\<longrightarrow>\n                        (j, i) \\<in> K \\<longrightarrow>\n                        (the (fmlookup m1 j), the (fmlookup m2 i))\n                        \\<in> R) \\<and>\n                    fset (fmdom m1) \\<subseteq> Domain K \\<and>\n                    fset (fmdom m2) \\<subseteq> Range K \\<and>\n                    (\\<forall>i j.\n                        (i, j) \\<in> K \\<longrightarrow>\n                        (j \\<in># dom_m m2) = (i \\<in># dom_m m1))};\n     (p, p') \\<in> K; (q, q') \\<in> R\\<rbrakk>\n    \\<Longrightarrow> (fmupd p q A, fmupd p' q' B)\n                      \\<in> {(m1, m2).\n                             (\\<forall>i j.\n                                 i \\<in># dom_m m2 \\<longrightarrow>\n                                 (j, i) \\<in> K \\<longrightarrow>\n                                 (the (fmlookup m1 j), the (fmlookup m2 i))\n                                 \\<in> R) \\<and>\n                             fset (fmdom m1) \\<subseteq> Domain K \\<and>\n                             fset (fmdom m2) \\<subseteq> Range K \\<and>\n                             (\\<forall>i j.\n                                 (i, j) \\<in> K \\<longrightarrow>\n                                 (j \\<in># dom_m m2) = (i \\<in># dom_m m1))}", "apply (case_tac \\<open>p' \\<in># dom_m B\\<close>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(A, B)\n             \\<in> {(m1, m2).\n                    (\\<forall>i j.\n                        i \\<in># dom_m m2 \\<longrightarrow>\n                        (j, i) \\<in> K \\<longrightarrow>\n                        (the (fmlookup m1 j), the (fmlookup m2 i))\n                        \\<in> R) \\<and>\n                    fset (fmdom m1) \\<subseteq> Domain K \\<and>\n                    fset (fmdom m2) \\<subseteq> Range K \\<and>\n                    (\\<forall>i j.\n                        (i, j) \\<in> K \\<longrightarrow>\n                        (j \\<in># dom_m m2) = (i \\<in># dom_m m1))};\n     (p, p') \\<in> K; (q, q') \\<in> R; single_valued K;\n     single_valued (K\\<inverse>); p' \\<in># dom_m B\\<rbrakk>\n    \\<Longrightarrow> (fmupd p q A, fmupd p' q' B)\n                      \\<in> {(m1, m2).\n                             (\\<forall>i j.\n                                 i \\<in># dom_m m2 \\<longrightarrow>\n                                 (j, i) \\<in> K \\<longrightarrow>\n                                 (the (fmlookup m1 j), the (fmlookup m2 i))\n                                 \\<in> R) \\<and>\n                             fset (fmdom m1) \\<subseteq> Domain K \\<and>\n                             fset (fmdom m2) \\<subseteq> Range K \\<and>\n                             (\\<forall>i j.\n                                 (i, j) \\<in> K \\<longrightarrow>\n                                 (j \\<in># dom_m m2) = (i \\<in># dom_m m1))}\n 2. \\<lbrakk>(A, B)\n             \\<in> {(m1, m2).\n                    (\\<forall>i j.\n                        i \\<in># dom_m m2 \\<longrightarrow>\n                        (j, i) \\<in> K \\<longrightarrow>\n                        (the (fmlookup m1 j), the (fmlookup m2 i))\n                        \\<in> R) \\<and>\n                    fset (fmdom m1) \\<subseteq> Domain K \\<and>\n                    fset (fmdom m2) \\<subseteq> Range K \\<and>\n                    (\\<forall>i j.\n                        (i, j) \\<in> K \\<longrightarrow>\n                        (j \\<in># dom_m m2) = (i \\<in># dom_m m1))};\n     (p, p') \\<in> K; (q, q') \\<in> R; single_valued K;\n     single_valued (K\\<inverse>); p' \\<notin># dom_m B\\<rbrakk>\n    \\<Longrightarrow> (fmupd p q A, fmupd p' q' B)\n                      \\<in> {(m1, m2).\n                             (\\<forall>i j.\n                                 i \\<in># dom_m m2 \\<longrightarrow>\n                                 (j, i) \\<in> K \\<longrightarrow>\n                                 (the (fmlookup m1 j), the (fmlookup m2 i))\n                                 \\<in> R) \\<and>\n                             fset (fmdom m1) \\<subseteq> Domain K \\<and>\n                             fset (fmdom m2) \\<subseteq> Range K \\<and>\n                             (\\<forall>i j.\n                                 (i, j) \\<in> K \\<longrightarrow>\n                                 (j \\<in># dom_m m2) = (i \\<in># dom_m m1))}", "apply (auto simp add: all_conj_distrib IS_RIGHT_UNIQUED dest!: multi_member_split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "sepref_decl_op fmap_update: \"fmupd\" :: \"K \\<rightarrow> V \\<rightarrow> \\<langle>K,V\\<rangle>fmap_rel \\<rightarrow> \\<langle>K,V\\<rangle>fmap_rel\"\n  where \"single_valued K\" \"single_valued (K\\<inverse>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>single_valued K; single_valued (K\\<inverse>)\\<rbrakk>\n    \\<Longrightarrow> (uncurry2 (RETURN \\<circ>\\<circ>\\<circ> fmupd),\n                       uncurry2 (RETURN \\<circ>\\<circ>\\<circ> fmupd))\n                      \\<in> (K \\<times>\\<^sub>r V) \\<times>\\<^sub>r\n                            \\<langle>K,\n                            V\\<rangle>fmap_rel \\<rightarrow>\\<^sub>f \\<langle>\\<langle>K,\n                      V\\<rangle>fmap_rel\\<rangle>nres_rel", "apply (rule fref_ncI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>single_valued K; single_valued (K\\<inverse>)\\<rbrakk>\n    \\<Longrightarrow> (uncurry2 (RETURN \\<circ>\\<circ>\\<circ> fmupd),\n                       uncurry2 (RETURN \\<circ>\\<circ>\\<circ> fmupd))\n                      \\<in> (K \\<times>\\<^sub>r V) \\<times>\\<^sub>r\n                            \\<langle>K, V\\<rangle>fmap_rel \\<rightarrow>\n                            \\<langle>\\<langle>K,\n                            V\\<rangle>fmap_rel\\<rangle>nres_rel", "apply parametricity"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>single_valued K; single_valued (K\\<inverse>);\n        (a, a') \\<in> K; (aa, a'a) \\<in> V\\<rbrakk>\n       \\<Longrightarrow> (fmupd a aa, fmupd a' a'a)\n                         \\<in> \\<langle>K, V\\<rangle>fmap_rel \\<rightarrow>\n                               \\<langle>K, V\\<rangle>fmap_rel", "apply (intro fun_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab a'b.\n       \\<lbrakk>single_valued K; single_valued (K\\<inverse>);\n        (a, a') \\<in> K; (aa, a'a) \\<in> V;\n        (ab, a'b) \\<in> \\<langle>K, V\\<rangle>fmap_rel\\<rbrakk>\n       \\<Longrightarrow> (fmupd a aa ab, fmupd a' a'a a'b) \\<in> \\<langle>K,\n                         V\\<rangle>fmap_rel", "by (rule fmap_rel_fmupd_fmap_rel)"], ["", "lemma remove1_mset_eq_add_mset_iff:\n   \\<open>remove1_mset a A = add_mset a A' \\<longleftrightarrow> A = add_mset a (add_mset a A')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (remove1_mset a A = add_mset a A') = (A = add_mset a (add_mset a A'))", "by (metis add_mset_add_single add_mset_diff_bothsides diff_zero remove1_mset_eqE)"], ["", "lemma fmap_rel_fmdrop_fmap_rel:\n  \\<open>(fmdrop p A, fmdrop p' B) \\<in> \\<langle>K, R\\<rangle>fmap_rel\\<close>\n  if single: \"single_valued K\" \"single_valued (K\\<inverse>)\" and\n    H0: \\<open>(A, B) \\<in> \\<langle>K, R\\<rangle>fmap_rel\\<close> \\<open>(p, p') \\<in> K\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fmdrop p A, fmdrop p' B) \\<in> \\<langle>K, R\\<rangle>fmap_rel", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (fmdrop p A, fmdrop p' B) \\<in> \\<langle>K, R\\<rangle>fmap_rel", "have H: \\<open>\\<And>Aa j.\n       \\<forall>i. i \\<in># dom_m B \\<longrightarrow> (\\<forall>j. (j, i) \\<in> K \\<longrightarrow> (the (fmlookup A j), the (fmlookup B i)) \\<in> R) \\<Longrightarrow>\n       remove1_mset p' (dom_m B) = add_mset p' Aa \\<Longrightarrow> (j, p') \\<in> K \\<Longrightarrow> False\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Aa j.\n       \\<lbrakk>\\<forall>i.\n                   i \\<in># dom_m B \\<longrightarrow>\n                   (\\<forall>j.\n                       (j, i) \\<in> K \\<longrightarrow>\n                       (the (fmlookup A j), the (fmlookup B i)) \\<in> R);\n        remove1_mset p' (dom_m B) = add_mset p' Aa; (j, p') \\<in> K\\<rbrakk>\n       \\<Longrightarrow> False", "by (metis dom_m_fmdrop fmlookup_drop in_dom_m_lookup_iff union_single_eq_member)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>i.\n              i \\<in># dom_m B \\<longrightarrow>\n              (\\<forall>j.\n                  (j, i) \\<in> K \\<longrightarrow>\n                  (the (fmlookup A j), the (fmlookup B i)) \\<in> R);\n   remove1_mset p' (dom_m B) = add_mset p' ?Aa; (?j, p') \\<in> K\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. (fmdrop p A, fmdrop p' B) \\<in> \\<langle>K, R\\<rangle>fmap_rel", "have H2: \\<open>\\<And>i Aa j.\n       (p, p') \\<in> K \\<Longrightarrow>\n       \\<forall>i. i \\<in># dom_m B \\<longrightarrow> (\\<forall>j. (j, i) \\<in> K \\<longrightarrow> (the (fmlookup A j), the (fmlookup B i)) \\<in> R) \\<Longrightarrow>\n       \\<forall>i j. (i, j) \\<in> K \\<longrightarrow> (j \\<in># dom_m B) = (i \\<in># dom_m A) \\<Longrightarrow>\n       remove1_mset p' (dom_m B) = add_mset i Aa \\<Longrightarrow>\n       (j, i) \\<in> K \\<Longrightarrow>\n            (the (fmlookup A j), the (fmlookup B i)) \\<in> R \\<and> j \\<in># remove1_mset p (dom_m A) \\<and>\n        i \\<in># remove1_mset p' (dom_m B)\\<close>\n    \\<open>\\<And>i j Aa.\n       (p, p') \\<in> K \\<Longrightarrow>\n       single_valued K \\<Longrightarrow>\n       single_valued (K\\<inverse>) \\<Longrightarrow>\n       \\<forall>i. i \\<in># dom_m B \\<longrightarrow> (\\<forall>j. (j, i) \\<in> K \\<longrightarrow> (the (fmlookup A j), the (fmlookup B i)) \\<in> R) \\<Longrightarrow>\n       fset (fmdom A) \\<subseteq> Domain K \\<Longrightarrow>\n       fset (fmdom B) \\<subseteq> Range K \\<Longrightarrow>\n       \\<forall>i j. (i, j) \\<in> K \\<longrightarrow> (j \\<in># dom_m B) = (i \\<in># dom_m A) \\<Longrightarrow>\n       (i, j) \\<in> K \\<Longrightarrow> remove1_mset p (dom_m A) = add_mset i Aa \\<Longrightarrow> j \\<in># remove1_mset p' (dom_m B)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i Aa j.\n        \\<lbrakk>(p, p') \\<in> K;\n         \\<forall>i.\n            i \\<in># dom_m B \\<longrightarrow>\n            (\\<forall>j.\n                (j, i) \\<in> K \\<longrightarrow>\n                (the (fmlookup A j), the (fmlookup B i)) \\<in> R);\n         \\<forall>i j.\n            (i, j) \\<in> K \\<longrightarrow>\n            (j \\<in># dom_m B) = (i \\<in># dom_m A);\n         remove1_mset p' (dom_m B) = add_mset i Aa; (j, i) \\<in> K\\<rbrakk>\n        \\<Longrightarrow> (the (fmlookup A j), the (fmlookup B i))\n                          \\<in> R \\<and>\n                          j \\<in># remove1_mset p (dom_m A) \\<and>\n                          i \\<in># remove1_mset p' (dom_m B)) &&&\n    (\\<And>i j Aa.\n        \\<lbrakk>(p, p') \\<in> K; single_valued K;\n         single_valued (K\\<inverse>);\n         \\<forall>i.\n            i \\<in># dom_m B \\<longrightarrow>\n            (\\<forall>j.\n                (j, i) \\<in> K \\<longrightarrow>\n                (the (fmlookup A j), the (fmlookup B i)) \\<in> R);\n         fset (fmdom A) \\<subseteq> Domain K;\n         fset (fmdom B) \\<subseteq> Range K;\n         \\<forall>i j.\n            (i, j) \\<in> K \\<longrightarrow>\n            (j \\<in># dom_m B) = (i \\<in># dom_m A);\n         (i, j) \\<in> K; remove1_mset p (dom_m A) = add_mset i Aa\\<rbrakk>\n        \\<Longrightarrow> j \\<in># remove1_mset p' (dom_m B))", "using single"], ["proof (prove)\nusing this:\n  single_valued K\n  single_valued (K\\<inverse>)\n\ngoal (1 subgoal):\n 1. (\\<And>i Aa j.\n        \\<lbrakk>(p, p') \\<in> K;\n         \\<forall>i.\n            i \\<in># dom_m B \\<longrightarrow>\n            (\\<forall>j.\n                (j, i) \\<in> K \\<longrightarrow>\n                (the (fmlookup A j), the (fmlookup B i)) \\<in> R);\n         \\<forall>i j.\n            (i, j) \\<in> K \\<longrightarrow>\n            (j \\<in># dom_m B) = (i \\<in># dom_m A);\n         remove1_mset p' (dom_m B) = add_mset i Aa; (j, i) \\<in> K\\<rbrakk>\n        \\<Longrightarrow> (the (fmlookup A j), the (fmlookup B i))\n                          \\<in> R \\<and>\n                          j \\<in># remove1_mset p (dom_m A) \\<and>\n                          i \\<in># remove1_mset p' (dom_m B)) &&&\n    (\\<And>i j Aa.\n        \\<lbrakk>(p, p') \\<in> K; single_valued K;\n         single_valued (K\\<inverse>);\n         \\<forall>i.\n            i \\<in># dom_m B \\<longrightarrow>\n            (\\<forall>j.\n                (j, i) \\<in> K \\<longrightarrow>\n                (the (fmlookup A j), the (fmlookup B i)) \\<in> R);\n         fset (fmdom A) \\<subseteq> Domain K;\n         fset (fmdom B) \\<subseteq> Range K;\n         \\<forall>i j.\n            (i, j) \\<in> K \\<longrightarrow>\n            (j \\<in># dom_m B) = (i \\<in># dom_m A);\n         (i, j) \\<in> K; remove1_mset p (dom_m A) = add_mset i Aa\\<rbrakk>\n        \\<Longrightarrow> j \\<in># remove1_mset p' (dom_m B))", "by (metis IS_RIGHT_UNIQUED converse.intros dom_m_fmdrop fmlookup_drop in_dom_m_lookup_iff\n        union_single_eq_member)+"], ["proof (state)\nthis:\n  \\<lbrakk>(p, p') \\<in> K;\n   \\<forall>i.\n      i \\<in># dom_m B \\<longrightarrow>\n      (\\<forall>j.\n          (j, i) \\<in> K \\<longrightarrow>\n          (the (fmlookup A j), the (fmlookup B i)) \\<in> R);\n   \\<forall>i j.\n      (i, j) \\<in> K \\<longrightarrow>\n      (j \\<in># dom_m B) = (i \\<in># dom_m A);\n   remove1_mset p' (dom_m B) = add_mset ?i ?Aa; (?j, ?i) \\<in> K\\<rbrakk>\n  \\<Longrightarrow> (the (fmlookup A ?j), the (fmlookup B ?i))\n                    \\<in> R \\<and>\n                    ?j \\<in># remove1_mset p (dom_m A) \\<and>\n                    ?i \\<in># remove1_mset p' (dom_m B)\n  \\<lbrakk>(p, p') \\<in> K; single_valued K; single_valued (K\\<inverse>);\n   \\<forall>i.\n      i \\<in># dom_m B \\<longrightarrow>\n      (\\<forall>j.\n          (j, i) \\<in> K \\<longrightarrow>\n          (the (fmlookup A j), the (fmlookup B i)) \\<in> R);\n   fset (fmdom A) \\<subseteq> Domain K; fset (fmdom B) \\<subseteq> Range K;\n   \\<forall>i j.\n      (i, j) \\<in> K \\<longrightarrow>\n      (j \\<in># dom_m B) = (i \\<in># dom_m A);\n   (?i, ?j) \\<in> K; remove1_mset p (dom_m A) = add_mset ?i ?Aa\\<rbrakk>\n  \\<Longrightarrow> ?j \\<in># remove1_mset p' (dom_m B)\n\ngoal (1 subgoal):\n 1. (fmdrop p A, fmdrop p' B) \\<in> \\<langle>K, R\\<rangle>fmap_rel", "show \\<open>(fmdrop p A, fmdrop p' B) \\<in> \\<langle>K, R\\<rangle>fmap_rel\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fmdrop p A, fmdrop p' B) \\<in> \\<langle>K, R\\<rangle>fmap_rel", "using that"], ["proof (prove)\nusing this:\n  single_valued K\n  single_valued (K\\<inverse>)\n  (A, B) \\<in> \\<langle>K, R\\<rangle>fmap_rel\n  (p, p') \\<in> K\n\ngoal (1 subgoal):\n 1. (fmdrop p A, fmdrop p' B) \\<in> \\<langle>K, R\\<rangle>fmap_rel", "unfolding fmap_rel_alt_def"], ["proof (prove)\nusing this:\n  single_valued K\n  single_valued (K\\<inverse>)\n  (A, B)\n  \\<in> {(m1, m2).\n         (\\<forall>i j.\n             i \\<in># dom_m m2 \\<longrightarrow>\n             (j, i) \\<in> K \\<longrightarrow>\n             (the (fmlookup m1 j), the (fmlookup m2 i)) \\<in> R) \\<and>\n         fset (fmdom m1) \\<subseteq> Domain K \\<and>\n         fset (fmdom m2) \\<subseteq> Range K \\<and>\n         (\\<forall>i j.\n             (i, j) \\<in> K \\<longrightarrow>\n             (j \\<in># dom_m m2) = (i \\<in># dom_m m1))}\n  (p, p') \\<in> K\n\ngoal (1 subgoal):\n 1. (fmdrop p A, fmdrop p' B)\n    \\<in> {(m1, m2).\n           (\\<forall>i j.\n               i \\<in># dom_m m2 \\<longrightarrow>\n               (j, i) \\<in> K \\<longrightarrow>\n               (the (fmlookup m1 j), the (fmlookup m2 i)) \\<in> R) \\<and>\n           fset (fmdom m1) \\<subseteq> Domain K \\<and>\n           fset (fmdom m2) \\<subseteq> Range K \\<and>\n           (\\<forall>i j.\n               (i, j) \\<in> K \\<longrightarrow>\n               (j \\<in># dom_m m2) = (i \\<in># dom_m m1))}", "by (auto simp add: all_conj_distrib IS_RIGHT_UNIQUED\n        dest!: multi_member_split dest: H H2)"], ["proof (state)\nthis:\n  (fmdrop p A, fmdrop p' B) \\<in> \\<langle>K, R\\<rangle>fmap_rel\n\ngoal:\nNo subgoals!", "qed"], ["", "sepref_decl_op fmap_delete: \"fmdrop\" :: \"K \\<rightarrow> \\<langle>K,V\\<rangle>fmap_rel \\<rightarrow> \\<langle>K,V\\<rangle>fmap_rel\"\n  where \"single_valued K\" \"single_valued (K\\<inverse>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>single_valued K; single_valued (K\\<inverse>)\\<rbrakk>\n    \\<Longrightarrow> (uncurry (RETURN \\<circ>\\<circ> fmdrop),\n                       uncurry (RETURN \\<circ>\\<circ> fmdrop))\n                      \\<in> K \\<times>\\<^sub>r \\<langle>K,\n                            V\\<rangle>fmap_rel \\<rightarrow>\\<^sub>f \\<langle>\\<langle>K,\n                      V\\<rangle>fmap_rel\\<rangle>nres_rel", "apply (rule fref_ncI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>single_valued K; single_valued (K\\<inverse>)\\<rbrakk>\n    \\<Longrightarrow> (uncurry (RETURN \\<circ>\\<circ> fmdrop),\n                       uncurry (RETURN \\<circ>\\<circ> fmdrop))\n                      \\<in> K \\<times>\\<^sub>r \\<langle>K,\n                            V\\<rangle>fmap_rel \\<rightarrow>\n                            \\<langle>\\<langle>K,\n                            V\\<rangle>fmap_rel\\<rangle>nres_rel", "apply parametricity"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       \\<lbrakk>single_valued K; single_valued (K\\<inverse>);\n        (a, a') \\<in> K\\<rbrakk>\n       \\<Longrightarrow> (fmdrop a, fmdrop a')\n                         \\<in> \\<langle>K, V\\<rangle>fmap_rel \\<rightarrow>\n                               \\<langle>K, V\\<rangle>fmap_rel", "by (auto simp add: fmap_rel_fmdrop_fmap_rel)"], ["", "lemma fmap_rel_nat_the_fmlookup[intro]:\n  \\<open>(A, B) \\<in> \\<langle>S, R\\<rangle>fmap_rel \\<Longrightarrow> (p, p') \\<in> S \\<Longrightarrow> p' \\<in># dom_m B \\<Longrightarrow>\n     (the (fmlookup A p), the (fmlookup B p')) \\<in> R\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(A, B) \\<in> \\<langle>S, R\\<rangle>fmap_rel; (p, p') \\<in> S;\n     p' \\<in># dom_m B\\<rbrakk>\n    \\<Longrightarrow> (the (fmlookup A p), the (fmlookup B p')) \\<in> R", "by (auto simp: fmap_rel_alt_def distinct_mset_dom)"], ["", "lemma fmap_rel_in_dom_iff:\n  \\<open>(aa, a'a) \\<in> \\<langle>K, V\\<rangle>fmap_rel \\<Longrightarrow>\n    (a, a') \\<in> K \\<Longrightarrow>\n    a' \\<in># dom_m a'a \\<longleftrightarrow>\n    a \\<in># dom_m aa\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(aa, a'a) \\<in> \\<langle>K, V\\<rangle>fmap_rel;\n     (a, a') \\<in> K\\<rbrakk>\n    \\<Longrightarrow> (a' \\<in># dom_m a'a) = (a \\<in># dom_m aa)", "unfolding fmap_rel_alt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(aa, a'a)\n             \\<in> {(m1, m2).\n                    (\\<forall>i j.\n                        i \\<in># dom_m m2 \\<longrightarrow>\n                        (j, i) \\<in> K \\<longrightarrow>\n                        (the (fmlookup m1 j), the (fmlookup m2 i))\n                        \\<in> V) \\<and>\n                    fset (fmdom m1) \\<subseteq> Domain K \\<and>\n                    fset (fmdom m2) \\<subseteq> Range K \\<and>\n                    (\\<forall>i j.\n                        (i, j) \\<in> K \\<longrightarrow>\n                        (j \\<in># dom_m m2) = (i \\<in># dom_m m1))};\n     (a, a') \\<in> K\\<rbrakk>\n    \\<Longrightarrow> (a' \\<in># dom_m a'a) = (a \\<in># dom_m aa)", "by auto"], ["", "lemma fmap_rel_fmlookup_rel:\n  \\<open>(a, a') \\<in> K \\<Longrightarrow> (aa, a'a) \\<in> \\<langle>K, V\\<rangle>fmap_rel \\<Longrightarrow>\n         (fmlookup aa a, fmlookup a'a a') \\<in> \\<langle>V\\<rangle>option_rel\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(a, a') \\<in> K;\n     (aa, a'a) \\<in> \\<langle>K, V\\<rangle>fmap_rel\\<rbrakk>\n    \\<Longrightarrow> (fmlookup aa a, fmlookup a'a a')\n                      \\<in> \\<langle>V\\<rangle>option_rel", "using fmap_rel_nat_the_fmlookup[of aa a'a K V a a']\n    fmap_rel_in_dom_iff[of aa a'a K V a a']\n    in_dom_m_lookup_iff[of a' a'a]\n    in_dom_m_lookup_iff[of a aa]"], ["proof (prove)\nusing this:\n  \\<lbrakk>(aa, a'a) \\<in> \\<langle>K, V\\<rangle>fmap_rel; (a, a') \\<in> K;\n   a' \\<in># dom_m a'a\\<rbrakk>\n  \\<Longrightarrow> (the (fmlookup aa a), the (fmlookup a'a a')) \\<in> V\n  \\<lbrakk>(aa, a'a) \\<in> \\<langle>K, V\\<rangle>fmap_rel;\n   (a, a') \\<in> K\\<rbrakk>\n  \\<Longrightarrow> (a' \\<in># dom_m a'a) = (a \\<in># dom_m aa)\n  (a' \\<in># dom_m a'a) = (fmlookup a'a a' \\<noteq> None)\n  (a \\<in># dom_m aa) = (fmlookup aa a \\<noteq> None)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(a, a') \\<in> K;\n     (aa, a'a) \\<in> \\<langle>K, V\\<rangle>fmap_rel\\<rbrakk>\n    \\<Longrightarrow> (fmlookup aa a, fmlookup a'a a')\n                      \\<in> \\<langle>V\\<rangle>option_rel", "by (cases \\<open>a' \\<in># dom_m a'a\\<close>)\n    (auto simp del: fmap_rel_nat_the_fmlookup)"], ["", "sepref_decl_op fmap_lookup: \"fmlookup\" :: \"\\<langle>K,V\\<rangle>fmap_rel \\<rightarrow> K \\<rightarrow>  \\<langle>V\\<rangle>option_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (uncurry (RETURN \\<circ>\\<circ> fmlookup),\n     uncurry (RETURN \\<circ>\\<circ> fmlookup))\n    \\<in> \\<langle>K, V\\<rangle>fmap_rel \\<times>\\<^sub>r\n          K \\<rightarrow>\\<^sub>f \\<langle>\\<langle>V\\<rangle>option_rel\\<rangle>nres_rel", "apply (rule fref_ncI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (uncurry (RETURN \\<circ>\\<circ> fmlookup),\n     uncurry (RETURN \\<circ>\\<circ> fmlookup))\n    \\<in> \\<langle>K, V\\<rangle>fmap_rel \\<times>\\<^sub>r K \\<rightarrow>\n          \\<langle>\\<langle>V\\<rangle>option_rel\\<rangle>nres_rel", "apply parametricity"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a') \\<in> \\<langle>K, V\\<rangle>fmap_rel \\<Longrightarrow>\n       (fmlookup a, fmlookup a')\n       \\<in> K \\<rightarrow> \\<langle>V\\<rangle>option_rel", "apply (intro fun_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>K, V\\<rangle>fmap_rel;\n        (aa, a'a) \\<in> K\\<rbrakk>\n       \\<Longrightarrow> (fmlookup a aa, fmlookup a' a'a)\n                         \\<in> \\<langle>V\\<rangle>option_rel", "apply (rule fmap_rel_fmlookup_rel; assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma in_fdom_alt: \"k\\<in>#dom_m m \\<longleftrightarrow> \\<not>is_None (fmlookup m k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (k \\<in># dom_m m) = (\\<not> is_None (fmlookup m k))", "apply (auto split: option.split intro: fmdom_notI simp: dom_m_def fmember.rep_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>fmlookup m k = None; k \\<in> fset (fmdom m)\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>x2.\n       fmlookup m k = Some x2 \\<Longrightarrow> k \\<in> fset (fmdom m)", "apply (meson fmdom_notI notin_fset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       fmlookup m k = Some x2 \\<Longrightarrow> k \\<in> fset (fmdom m)", "using notin_fset"], ["proof (prove)\nusing this:\n  (?x |\\<notin>| ?S) = (?x \\<notin> fset ?S)\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       fmlookup m k = Some x2 \\<Longrightarrow> k \\<in> fset (fmdom m)", "by fastforce"], ["", "sepref_decl_op fmap_contains_key: \"\\<lambda>k m. k\\<in>#dom_m m\" :: \"K \\<rightarrow> \\<langle>K,V\\<rangle>fmap_rel \\<rightarrow> bool_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (uncurry (\\<lambda>x1. RETURN \\<circ> (\\<lambda>m. x1 \\<in># dom_m m)),\n     uncurry (\\<lambda>x1. RETURN \\<circ> (\\<lambda>m. x1 \\<in># dom_m m)))\n    \\<in> K \\<times>\\<^sub>r \\<langle>K,\n          V\\<rangle>fmap_rel \\<rightarrow>\\<^sub>f \\<langle>bool_rel\\<rangle>nres_rel", "unfolding in_fdom_alt"], ["proof (prove)\ngoal (1 subgoal):\n 1. (uncurry\n      (\\<lambda>x1.\n          RETURN \\<circ> (\\<lambda>m. \\<not> is_None (fmlookup m x1))),\n     uncurry\n      (\\<lambda>x1.\n          RETURN \\<circ> (\\<lambda>m. \\<not> is_None (fmlookup m x1))))\n    \\<in> K \\<times>\\<^sub>r \\<langle>K,\n          V\\<rangle>fmap_rel \\<rightarrow>\\<^sub>f \\<langle>bool_rel\\<rangle>nres_rel", "apply (rule fref_ncI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (uncurry\n      (\\<lambda>x1.\n          RETURN \\<circ> (\\<lambda>m. \\<not> is_None (fmlookup m x1))),\n     uncurry\n      (\\<lambda>x1.\n          RETURN \\<circ> (\\<lambda>m. \\<not> is_None (fmlookup m x1))))\n    \\<in> K \\<times>\\<^sub>r \\<langle>K, V\\<rangle>fmap_rel \\<rightarrow>\n          \\<langle>bool_rel\\<rangle>nres_rel", "apply parametricity"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> K;\n        (aa, a'a) \\<in> \\<langle>K, V\\<rangle>fmap_rel\\<rbrakk>\n       \\<Longrightarrow> (fmlookup aa a, fmlookup a'a a')\n                         \\<in> \\<langle>?R25 a a' aa a'a\\<rangle>option_rel", "apply (rule fmap_rel_fmlookup_rel; assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Patterns\\<close>"], ["", "lemma pat_fmap_empty[pat_rules]: \"fmempty \\<equiv> op_fmap_empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmempty \\<equiv> op_fmap_empty", "by simp"], ["", "lemma pat_map_is_empty[pat_rules]:\n  \"(=) $m$fmempty \\<equiv> op_fmap_is_empty$m\"\n  \"(=) $fmempty$m \\<equiv> op_fmap_is_empty$m\"\n  \"(=) $(dom_m$m)${#} \\<equiv> op_fmap_is_empty$m\"\n  \"(=) ${#}$(dom_m$m) \\<equiv> op_fmap_is_empty$m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((=) $ m $ fmempty \\<equiv> op_fmap_is_empty $ m) &&&\n     (=) $ fmempty $ m \\<equiv> op_fmap_is_empty $ m) &&&\n    ((=) $ (dom_m $ m) $ {#} \\<equiv> op_fmap_is_empty $ m) &&&\n    (=) $ {#} $ (dom_m $ m) \\<equiv> op_fmap_is_empty $ m", "unfolding atomize_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((=) $ m $ fmempty = op_fmap_is_empty $ m &&&\n     (=) $ fmempty $ m = op_fmap_is_empty $ m) &&&\n    (=) $ (dom_m $ m) $ {#} = op_fmap_is_empty $ m &&&\n    (=) $ {#} $ (dom_m $ m) = op_fmap_is_empty $ m", "by (auto dest: sym)"], ["", "lemma op_map_contains_key[pat_rules]:\n  \"(\\<in>#) $ k $ (dom_m$m) \\<equiv> op_fmap_contains_key$'k$'m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<in>#) $ k $ (dom_m $ m) \\<equiv> op_fmap_contains_key $' k $' m", "by (auto intro!: eq_reflection)"], ["", "subsection \\<open>Mapping to Normal Hashmaps\\<close>"], ["", "abbreviation map_of_fmap :: \\<open>('k \\<Rightarrow> 'v option) \\<Rightarrow> ('k, 'v) fmap\\<close> where\n  \\<open>map_of_fmap h \\<equiv> Abs_fmap h\\<close>"], ["", "definition map_fmap_rel where\n  \\<open>map_fmap_rel = br map_of_fmap (\\<lambda>a. finite (dom a))\\<close>"], ["", "lemma fmdrop_set_None:\n  \\<open>(op_map_delete, fmdrop) \\<in> Id \\<rightarrow> map_fmap_rel \\<rightarrow> map_fmap_rel\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (op_map_delete, fmdrop)\n    \\<in> Id \\<rightarrow> map_fmap_rel \\<rightarrow> map_fmap_rel", "apply (auto simp: map_fmap_rel_def br_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a' aa.\n       finite (dom aa) \\<Longrightarrow>\n       fmdrop a' (map_of_fmap aa) = map_of_fmap (aa(a' := None))", "apply (subst fmdrop.abs_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a' aa.\n       finite (dom aa) \\<Longrightarrow>\n       eq_onp (\\<lambda>m. finite (dom m)) aa aa\n 2. \\<And>a' aa.\n       finite (dom aa) \\<Longrightarrow>\n       map_of_fmap (map_drop a' aa) = map_of_fmap (aa(a' := None))", "apply (auto simp: eq_onp_def fmap.Abs_fmap_inject\n      map_drop_def map_filter_finite\n      intro!: ext)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a' aa.\n       finite (dom aa) \\<Longrightarrow>\n       map_filter (\\<lambda>a'a. a'a \\<noteq> a') aa a' = None\n 2. \\<And>a' aa x.\n       \\<lbrakk>finite (dom aa); x \\<noteq> a'\\<rbrakk>\n       \\<Longrightarrow> map_filter (\\<lambda>a'a. a'a \\<noteq> a') aa x =\n                         aa x", "apply (auto simp: map_filter_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma map_upd_fmupd:\n  \\<open>(op_map_update, fmupd) \\<in> Id \\<rightarrow> Id \\<rightarrow> map_fmap_rel \\<rightarrow> map_fmap_rel\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (op_map_update, fmupd)\n    \\<in> Id \\<rightarrow>\n          Id \\<rightarrow> map_fmap_rel \\<rightarrow> map_fmap_rel", "apply (auto simp: map_fmap_rel_def br_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a' a'a ab.\n       finite (dom ab) \\<Longrightarrow>\n       fmupd a' a'a (map_of_fmap ab) = map_of_fmap (ab(a' \\<mapsto> a'a))", "apply (subst fmupd.abs_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a' a'a ab.\n       finite (dom ab) \\<Longrightarrow>\n       eq_onp (\\<lambda>m. finite (dom m)) ab ab\n 2. \\<And>a' a'a ab.\n       finite (dom ab) \\<Longrightarrow>\n       map_of_fmap (map_upd a' a'a ab) = map_of_fmap (ab(a' \\<mapsto> a'a))", "apply (auto simp: eq_onp_def fmap.Abs_fmap_inject\n      map_drop_def map_filter_finite map_upd_def\n      intro!: ext)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Technically @{term op_map_lookup} has the arguments in the wrong direction.\\<close>"], ["", "definition fmlookup' where\n  [simp]: \\<open>fmlookup' A k = fmlookup k A\\<close>"], ["", "lemma [def_pat_rules]:\n  \\<open>((\\<in>#)$k$(dom_m$A)) \\<equiv> Not$(is_None$(fmlookup'$k$A))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<in>#) $ k $ (dom_m $ A) \\<equiv>\n    Not $ (is_None $ (fmlookup' $ k $ A))", "by (simp add: fold_is_None in_fdom_alt)"], ["", "lemma op_map_lookup_fmlookup:\n  \\<open>(op_map_lookup, fmlookup') \\<in> Id \\<rightarrow> map_fmap_rel \\<rightarrow> \\<langle>Id\\<rangle>option_rel\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (op_map_lookup, fmlookup')\n    \\<in> Id \\<rightarrow>\n          map_fmap_rel \\<rightarrow> \\<langle>Id\\<rangle>option_rel", "by (auto simp: map_fmap_rel_def br_def fmap.Abs_fmap_inverse)"], ["", "abbreviation hm_fmap_assn where\n  \\<open>hm_fmap_assn K V \\<equiv> hr_comp (hm.assn K V) map_fmap_rel\\<close>"], ["", "lemmas fmap_delete_hnr [sepref_fr_rules] =\n  hm.delete_hnr[FCOMP fmdrop_set_None]"], ["", "lemmas fmap_update_hnr [sepref_fr_rules] =\n  hm.update_hnr[FCOMP map_upd_fmupd]"], ["", "lemmas fmap_lookup_hnr [sepref_fr_rules] =\n  hm.lookup_hnr[FCOMP op_map_lookup_fmlookup]"], ["", "lemma fmempty_empty:\n  \\<open>(uncurry0 (RETURN op_map_empty), uncurry0 (RETURN fmempty)) \\<in> unit_rel \\<rightarrow>\\<^sub>f \\<langle>map_fmap_rel\\<rangle>nres_rel\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (uncurry0 (RETURN op_map_empty), uncurry0 (RETURN fmempty))\n    \\<in> unit_rel \\<rightarrow>\\<^sub>f \\<langle>map_fmap_rel\\<rangle>nres_rel", "by (auto simp: map_fmap_rel_def br_def fmempty_def frefI nres_relI)"], ["", "lemmas [sepref_fr_rules] =\n  hm.empty_hnr[FCOMP fmempty_empty, unfolded op_fmap_empty_def[symmetric]]"], ["", "abbreviation iam_fmap_assn where\n  \\<open>iam_fmap_assn K V \\<equiv> hr_comp (iam.assn K V) map_fmap_rel\\<close>"], ["", "lemmas iam_fmap_delete_hnr [sepref_fr_rules] =\n  iam.delete_hnr[FCOMP fmdrop_set_None]"], ["", "lemmas iam_ffmap_update_hnr [sepref_fr_rules] =\n  iam.update_hnr[FCOMP map_upd_fmupd]"], ["", "lemmas iam_ffmap_lookup_hnr [sepref_fr_rules] =\n  iam.lookup_hnr[FCOMP op_map_lookup_fmlookup]"], ["", "definition op_iam_fmap_empty where\n  \\<open>op_iam_fmap_empty = fmempty\\<close>"], ["", "lemma iam_fmempty_empty:\n  \\<open>(uncurry0 (RETURN op_map_empty), uncurry0 (RETURN op_iam_fmap_empty)) \\<in> unit_rel \\<rightarrow>\\<^sub>f \\<langle>map_fmap_rel\\<rangle>nres_rel\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (uncurry0 (RETURN op_map_empty), uncurry0 (RETURN op_iam_fmap_empty))\n    \\<in> unit_rel \\<rightarrow>\\<^sub>f \\<langle>map_fmap_rel\\<rangle>nres_rel", "by (auto simp: map_fmap_rel_def br_def fmempty_def frefI nres_relI op_iam_fmap_empty_def)"], ["", "lemmas [sepref_fr_rules] =\n  iam.empty_hnr[FCOMP fmempty_empty, unfolded op_iam_fmap_empty_def[symmetric]]"], ["", "definition upper_bound_on_dom where\n  \\<open>upper_bound_on_dom A = SPEC(\\<lambda>n. \\<forall>i \\<in>#(dom_m A). i < n)\\<close>"], ["", "lemma [sepref_fr_rules]:\n  \\<open>((Array.len), upper_bound_on_dom) \\<in> (iam_fmap_assn nat_assn V)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Array.len, upper_bound_on_dom)\n    \\<in> (iam_fmap_assn nat_assn V)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (Array.len, upper_bound_on_dom)\n    \\<in> (iam_fmap_assn nat_assn V)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn", "have [simp]: \\<open>finite (dom b) \\<Longrightarrow> i \\<in> fset (fmdom (map_of_fmap b)) \\<longleftrightarrow> i \\<in> dom b\\<close> for i b"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (dom b) \\<Longrightarrow>\n    (i \\<in> fset (fmdom (map_of_fmap b))) = (i \\<in> dom b)", "by (subst fmdom.abs_eq)\n      (auto simp: eq_onp_def fset.Abs_fset_inverse)"], ["proof (state)\nthis:\n  finite (dom ?b1) \\<Longrightarrow>\n  (?i1 \\<in> fset (fmdom (map_of_fmap ?b1))) = (?i1 \\<in> dom ?b1)\n\ngoal (1 subgoal):\n 1. (Array.len, upper_bound_on_dom)\n    \\<in> (iam_fmap_assn nat_assn V)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn", "have 2: \\<open>nat_rel = the_pure (nat_assn)\\<close> and\n    3: \\<open>nat_assn = pure nat_rel\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. nat_rel = the_pure nat_assn &&& nat_assn = nat_assn", "by auto"], ["proof (state)\nthis:\n  nat_rel = the_pure nat_assn\n  nat_assn = nat_assn\n\ngoal (1 subgoal):\n 1. (Array.len, upper_bound_on_dom)\n    \\<in> (iam_fmap_assn nat_assn V)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn", "have [simp]: \\<open>the_pure (\\<lambda>a c :: nat. \\<up> (c = a)) = nat_rel\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. the_pure (\\<lambda>a c. \\<up> (c = a)) = nat_rel", "apply (subst 2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. the_pure (\\<lambda>a c. \\<up> (c = a)) = the_pure nat_assn", "apply (subst 3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. the_pure (\\<lambda>a c. \\<up> (c = a)) = the_pure nat_assn", "apply (subst pure_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. the_pure (\\<lambda>a c. \\<up> (c = a)) =\n    the_pure (\\<lambda>a c. \\<up> ((c, a) \\<in> nat_rel))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  the_pure (\\<lambda>a c. \\<up> (c = a)) = nat_rel\n\ngoal (1 subgoal):\n 1. (Array.len, upper_bound_on_dom)\n    \\<in> (iam_fmap_assn nat_assn V)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn", "have [simp]: \\<open>(iam_of_list l, b) \\<in> the_pure (\\<lambda>a c :: nat. \\<up> (c = a)) \\<rightarrow> \\<langle>the_pure V\\<rangle>option_rel \\<Longrightarrow>\n       b i = Some y \\<Longrightarrow> i < length l\\<close>  for i b l y"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(iam_of_list l, b)\n             \\<in> the_pure (\\<lambda>a c. \\<up> (c = a)) \\<rightarrow>\n                   \\<langle>the_pure V\\<rangle>option_rel;\n     b i = Some y\\<rbrakk>\n    \\<Longrightarrow> i < length l", "by (auto dest!: fun_relD[of _ _ _ _ i i] simp: option_rel_def\n        iam_of_list_def split: if_splits)"], ["proof (state)\nthis:\n  \\<lbrakk>(iam_of_list ?l1, ?b1)\n           \\<in> the_pure (\\<lambda>a c. \\<up> (c = a)) \\<rightarrow>\n                 \\<langle>the_pure V\\<rangle>option_rel;\n   ?b1 ?i1 = Some ?y1\\<rbrakk>\n  \\<Longrightarrow> ?i1 < length ?l1\n\ngoal (1 subgoal):\n 1. (Array.len, upper_bound_on_dom)\n    \\<in> (iam_fmap_assn nat_assn V)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Array.len, upper_bound_on_dom)\n    \\<in> (iam_fmap_assn nat_assn V)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn", "by sepref_to_hoare\n      (sep_auto simp: upper_bound_on_dom_def hr_comp_def iam.assn_def map_rel_def\n        map_fmap_rel_def is_iam_def br_def dom_m_def)"], ["proof (state)\nthis:\n  (Array.len, upper_bound_on_dom)\n  \\<in> (iam_fmap_assn nat_assn V)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fmap_rel_nat_rel_dom_m[simp]:\n  \\<open>(A, B) \\<in> \\<langle>nat_rel, R\\<rangle>fmap_rel \\<Longrightarrow> dom_m A = dom_m B\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (A, B) \\<in> \\<langle>nat_rel, R\\<rangle>fmap_rel \\<Longrightarrow>\n    dom_m A = dom_m B", "by (subst distinct_set_mset_eq_iff[symmetric])\n    (auto simp: fmap_rel_alt_def distinct_mset_dom\n      simp del: fmap_rel_nat_the_fmlookup)"], ["", "lemma ref_two_step':\n  \\<open>A \\<le> B \\<Longrightarrow>  \\<Down> R A \\<le> \\<Down> R B\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<le> B \\<Longrightarrow> \\<Down> R A \\<le> \\<Down> R B", "using ref_two_step"], ["proof (prove)\nusing this:\n  \\<lbrakk>?A \\<le> \\<Down> ?R ?B; ?B \\<le> ?C\\<rbrakk>\n  \\<Longrightarrow> ?A \\<le> \\<Down> ?R ?C\n\ngoal (1 subgoal):\n 1. A \\<le> B \\<Longrightarrow> \\<Down> R A \\<le> \\<Down> R B", "by auto"], ["", "end"]]}