{"file_name": "/home/qj213/afp-2021-10-22/thys/PAC_Checker/PAC_Polynomials.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/PAC_Checker", "problem_names": ["lemma poly_embed_EX:\n  \\<open>\\<exists>\\<phi>. bij (\\<phi> :: string \\<Rightarrow> nat)\\<close>", "lemma normalized_poly_simps[simp]:\n  \\<open>normalized_poly {#}\\<close>\n  \\<open>normalized_poly (add_mset t p) \\<longleftrightarrow> snd t \\<noteq> 0 \\<and>\n    fst t \\<notin># fst `# p \\<and> normalized_poly p\\<close>", "lemma normalized_poly_mono:\n  \\<open>normalized_poly B \\<Longrightarrow> A \\<subseteq># B \\<Longrightarrow> normalized_poly A\\<close>", "lemma add_to_coefficient_simps:\n  \\<open>n + sum_mset (snd `# {#(a', _) \\<in># b. a' = a#}) \\<noteq> 0 \\<Longrightarrow>\n    add_to_coefficient (a, n) b = {#(a', _) \\<in># b. a' \\<noteq> a#} +\n             {#(a, n + sum_mset (snd `# {#(a', _) \\<in># b. a' = a#}))#}\\<close>\n  \\<open>n + sum_mset (snd `# {#(a', _) \\<in># b. a' = a#}) = 0 \\<Longrightarrow>\n    add_to_coefficient (a, n) b = {#(a', _) \\<in># b. a' \\<noteq> a#}\\<close> and\n  add_to_coefficient_simps_If:\n  \\<open>add_to_coefficient (a, n) b = {#(a', _) \\<in># b. a' \\<noteq> a#} +\n             (if n + sum_mset (snd `# {#(a', _) \\<in># b. a' = a#}) = 0 then {#}\n               else {#(a, n + sum_mset (snd `# {#(a', _) \\<in># b. a' = a#}))#})\\<close>", "lemma normalized_poly_normalize_poly[simp]:\n  \\<open>normalized_poly (normalize_poly p)\\<close>", "lemmas add_poly_p_induct =\n  add_poly_p.induct[split_format(complete)]", "lemma add_poly_p_empty_l:\n  \\<open>add_poly_p\\<^sup>*\\<^sup>* (p, q, r) ({#}, q, p + r)\\<close>", "lemma add_poly_p_empty_r:\n  \\<open>add_poly_p\\<^sup>*\\<^sup>* (p, q, r) (p, {#}, q + r)\\<close>", "lemma add_poly_p_sym:\n  \\<open>add_poly_p (p, q, r) (p', q', r') \\<longleftrightarrow> add_poly_p (q, p, r) (q', p', r')\\<close>", "lemma wf_if_measure_in_wf:\n  \\<open>wf R \\<Longrightarrow> (\\<And>a b. (a, b) \\<in> S \\<Longrightarrow> (\\<nu> a, \\<nu> b)\\<in>R) \\<Longrightarrow> wf S\\<close>", "lemma lexn_n:\n  \\<open>n > 0 \\<Longrightarrow> (x # xs, y # ys) \\<in> lexn r n \\<longleftrightarrow>\n  (length xs = n-1 \\<and> length ys = n-1) \\<and> ((x, y) \\<in> r \\<or> (x = y \\<and> (xs, ys) \\<in> lexn r (n - 1)))\\<close>", "lemma wf_add_poly_p:\n  \\<open>wf {(x, y). add_poly_p y x}\\<close>", "lemma mult_poly_by_monom_simps[simp]:\n  \\<open>mult_poly_by_monom t {#} = {#}\\<close>\n  \\<open>mult_poly_by_monom t (ps + qs) =  mult_poly_by_monom t ps + mult_poly_by_monom t qs\\<close>\n  \\<open>mult_poly_by_monom a (add_mset p ps) = add_mset (fst a + fst p, snd a * snd p) (mult_poly_by_monom a ps)\\<close>", "lemmas mult_poly_p_induct = mult_poly_p.induct[split_format(complete)]", "lemma poly_of_vars_simps[simp]:\n  shows\n    \\<open>poly_of_vars (add_mset x xs) = Var (\\<phi> x) * (poly_of_vars xs :: ('a :: {comm_semiring_1}) mpoly)\\<close> (is ?A) and\n    \\<open>poly_of_vars (xs + ys) = poly_of_vars xs * (poly_of_vars ys :: ('a :: {comm_semiring_1}) mpoly)\\<close> (is ?B)", "lemma [simp]:\n  \\<open>poly_of_vars {#} = 1\\<close>", "lemma mononom_of_vars_add[simp]:\n  \\<open>NO_MATCH 0 b \\<Longrightarrow> mononom_of_vars xs b = Const (snd xs) * poly_of_vars (fst xs) + b\\<close>", "lemma polynomial_of_mset_append[simp]:\n  \\<open>polynomial_of_mset (xs + ys) = polynomial_of_mset xs + polynomial_of_mset ys\\<close>", "lemma polynomial_of_mset_Cons[simp]:\n  \\<open>polynomial_of_mset (add_mset x ys) = Const (snd x) * poly_of_vars (fst x) + polynomial_of_mset ys\\<close>", "lemma polynomial_of_mset_empty[simp]:\n  \\<open>polynomial_of_mset {#} = 0\\<close>", "lemma polynomial_of_mset_mult_poly_by_monom[simp]:\n  \\<open>polynomial_of_mset (mult_poly_by_monom x ys) =\n       (Const (snd x) * poly_of_vars (fst x) * polynomial_of_mset ys)\\<close>", "lemma polynomial_of_mset_mult_poly_raw[simp]:\n  \\<open>polynomial_of_mset (mult_poly_raw xs ys) = polynomial_of_mset xs * polynomial_of_mset ys\\<close>", "lemma polynomial_of_mset_uminus:\n  \\<open>polynomial_of_mset {#case x of (a, b) \\<Rightarrow> (a, - b). x \\<in># za#} =\n    - polynomial_of_mset za\\<close>", "lemma X2_X_polynomial_bool_mult_in:\n  \\<open>Var (x1) * (Var (x1) * p) -  Var (x1) * p \\<in> More_Modules.ideal polynomial_bool\\<close>", "lemma polynomial_of_list_remove_powers_polynomial_bool:\n  \\<open>(polynomial_of_mset xs) - polynomial_of_mset (remove_powers xs) \\<in> ideal polynomial_bool\\<close>", "lemma add_poly_p_polynomial_of_mset:\n  \\<open>add_poly_p (p, q, r) (p', q', r') \\<Longrightarrow>\n    polynomial_of_mset r + (polynomial_of_mset p + polynomial_of_mset q) =\n    polynomial_of_mset r' + (polynomial_of_mset p' + polynomial_of_mset q')\\<close>", "lemma rtranclp_add_poly_p_polynomial_of_mset:\n  \\<open>add_poly_p\\<^sup>*\\<^sup>* (p, q, r) (p', q', r') \\<Longrightarrow>\n    polynomial_of_mset r + (polynomial_of_mset p + polynomial_of_mset q) =\n    polynomial_of_mset r' + (polynomial_of_mset p' + polynomial_of_mset q')\\<close>", "lemma rtranclp_add_poly_p_polynomial_of_mset_full:\n  \\<open>add_poly_p\\<^sup>*\\<^sup>* (p, q, {#}) ({#}, {#}, r') \\<Longrightarrow>\n    polynomial_of_mset r' = (polynomial_of_mset p + polynomial_of_mset q)\\<close>", "lemma poly_of_vars_remdups_mset:\n  \\<open>poly_of_vars (remdups_mset (xs)) - (poly_of_vars xs)\n    \\<in> More_Modules.ideal polynomial_bool\\<close>", "lemma polynomial_of_mset_mult_map:\n  \\<open>polynomial_of_mset\n     {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m). x \\<in># q#} -\n    Const m * (poly_of_vars xs * polynomial_of_mset q)\n    \\<in> More_Modules.ideal polynomial_bool\\<close>\n  (is \\<open>?P q \\<in> _\\<close>)", "lemma mult_poly_p_mult_ideal:\n  \\<open>mult_poly_p q (p, r) (p', r') \\<Longrightarrow>\n     (polynomial_of_mset p' * polynomial_of_mset q + polynomial_of_mset r') - (polynomial_of_mset p * polynomial_of_mset q + polynomial_of_mset r)\n       \\<in> ideal polynomial_bool\\<close>", "lemma rtranclp_mult_poly_p_mult_ideal:\n  \\<open>(mult_poly_p q)\\<^sup>*\\<^sup>* (p, r) (p', r') \\<Longrightarrow>\n     (polynomial_of_mset p' * polynomial_of_mset q + polynomial_of_mset r') - (polynomial_of_mset p * polynomial_of_mset q + polynomial_of_mset r)\n       \\<in> ideal polynomial_bool\\<close>", "lemma rtranclp_mult_poly_p_mult_ideal_final:\n  \\<open>(mult_poly_p q)\\<^sup>*\\<^sup>* (p, {#}) ({#}, r) \\<Longrightarrow>\n    (polynomial_of_mset r) - (polynomial_of_mset p * polynomial_of_mset q)\n       \\<in> ideal polynomial_bool\\<close>", "lemma normalize_poly_p_poly_of_mset:\n  \\<open>normalize_poly_p p q \\<Longrightarrow> polynomial_of_mset p = polynomial_of_mset q\\<close>", "lemma rtranclp_normalize_poly_p_poly_of_mset:\n  \\<open>normalize_poly_p\\<^sup>*\\<^sup>* p q \\<Longrightarrow> polynomial_of_mset p = polynomial_of_mset q\\<close>", "lemma \\<phi>'_\\<phi>[simp]:\n  \\<open>x \\<in> V \\<Longrightarrow> \\<phi>' (\\<phi> x) = x\\<close>", "lemma \\<phi>_\\<phi>'[simp]:\n  \\<open>x \\<in> N \\<Longrightarrow> \\<phi> (\\<phi>' x) = x\\<close>"], "translations": [["", "lemma poly_embed_EX:\n  \\<open>\\<exists>\\<phi>. bij (\\<phi> :: string \\<Rightarrow> nat)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<phi>. bij \\<phi>", "by (rule countableE_infinite[of \\<open>UNIV :: string set\\<close>])\n     (auto intro!: infinite_UNIV_listI)"], ["", "text \\<open>Using a multiset instead of a list has some advantage from an abstract point of view. First,\n  we can have monomials that appear several times  and the coefficient can also be zero. Basically,\n  we can represent un-normalised polynomials, which is very useful to talk about intermediate states\n  in our program.\n\\<close>"], ["", "type_synonym term_poly = \\<open>string multiset\\<close>"], ["", "type_synonym mset_polynomial =\n  \\<open>(term_poly * int) multiset\\<close>"], ["", "definition normalized_poly :: \\<open>mset_polynomial \\<Rightarrow> bool\\<close> where\n  \\<open>normalized_poly p \\<longleftrightarrow>\n     distinct_mset (fst `# p) \\<and>\n     0 \\<notin># snd `# p\\<close>"], ["", "lemma normalized_poly_simps[simp]:\n  \\<open>normalized_poly {#}\\<close>\n  \\<open>normalized_poly (add_mset t p) \\<longleftrightarrow> snd t \\<noteq> 0 \\<and>\n    fst t \\<notin># fst `# p \\<and> normalized_poly p\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. normalized_poly {#} &&&\n    normalized_poly (add_mset t p) =\n    (snd t \\<noteq> 0 \\<and>\n     fst t \\<notin># fst `# p \\<and> normalized_poly p)", "by (auto simp: normalized_poly_def)"], ["", "lemma normalized_poly_mono:\n  \\<open>normalized_poly B \\<Longrightarrow> A \\<subseteq># B \\<Longrightarrow> normalized_poly A\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>normalized_poly B; A \\<subseteq># B\\<rbrakk>\n    \\<Longrightarrow> normalized_poly A", "unfolding normalized_poly_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct_mset (fst `# B) \\<and> 0 \\<notin># snd `# B;\n     A \\<subseteq># B\\<rbrakk>\n    \\<Longrightarrow> distinct_mset (fst `# A) \\<and> 0 \\<notin># snd `# A", "by (auto intro: distinct_mset_mono image_mset_subseteq_mono)"], ["", "definition mult_poly_by_monom :: \\<open>term_poly * int \\<Rightarrow> mset_polynomial \\<Rightarrow> mset_polynomial\\<close> where\n  \\<open>mult_poly_by_monom  = (\\<lambda>ys q. image_mset (\\<lambda>xs. (fst xs + fst ys, snd ys * snd xs)) q)\\<close>"], ["", "definition mult_poly_raw :: \\<open>mset_polynomial \\<Rightarrow> mset_polynomial \\<Rightarrow> mset_polynomial\\<close> where\n  \\<open>mult_poly_raw p q =\n    (sum_mset ((\\<lambda>y. mult_poly_by_monom y q) `# p))\\<close>"], ["", "definition remove_powers :: \\<open>mset_polynomial \\<Rightarrow> mset_polynomial\\<close> where\n  \\<open>remove_powers xs =  image_mset (apfst remdups_mset) xs\\<close>"], ["", "definition all_vars_mset :: \\<open>mset_polynomial \\<Rightarrow> string multiset\\<close> where\n  \\<open>all_vars_mset p = \\<Sum>\\<^sub># (fst `# p)\\<close>"], ["", "abbreviation all_vars :: \\<open>mset_polynomial \\<Rightarrow> string set\\<close> where\n  \\<open>all_vars p \\<equiv> set_mset (all_vars_mset p)\\<close>"], ["", "definition add_to_coefficient :: \\<open>_ \\<Rightarrow> mset_polynomial \\<Rightarrow> mset_polynomial\\<close>  where\n  \\<open>add_to_coefficient = (\\<lambda>(a, n) b. {#(a', _) \\<in># b. a' \\<noteq> a#} +\n             (if n + sum_mset (snd `# {#(a', _) \\<in># b. a' = a#}) = 0 then {#}\n               else {#(a, n + sum_mset (snd `# {#(a', _) \\<in># b. a' = a#}))#}))\\<close>"], ["", "definition normalize_poly :: \\<open>mset_polynomial \\<Rightarrow> mset_polynomial\\<close> where\n  \\<open>normalize_poly p = fold_mset add_to_coefficient {#} p\\<close>"], ["", "lemma add_to_coefficient_simps:\n  \\<open>n + sum_mset (snd `# {#(a', _) \\<in># b. a' = a#}) \\<noteq> 0 \\<Longrightarrow>\n    add_to_coefficient (a, n) b = {#(a', _) \\<in># b. a' \\<noteq> a#} +\n             {#(a, n + sum_mset (snd `# {#(a', _) \\<in># b. a' = a#}))#}\\<close>\n  \\<open>n + sum_mset (snd `# {#(a', _) \\<in># b. a' = a#}) = 0 \\<Longrightarrow>\n    add_to_coefficient (a, n) b = {#(a', _) \\<in># b. a' \\<noteq> a#}\\<close> and\n  add_to_coefficient_simps_If:\n  \\<open>add_to_coefficient (a, n) b = {#(a', _) \\<in># b. a' \\<noteq> a#} +\n             (if n + sum_mset (snd `# {#(a', _) \\<in># b. a' = a#}) = 0 then {#}\n               else {#(a, n + sum_mset (snd `# {#(a', _) \\<in># b. a' = a#}))#})\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((n + \\<Sum>\\<^sub># (snd `# {#(a', uu_) \\<in># b. a' = a#}) \\<noteq>\n      0 \\<Longrightarrow>\n      add_to_coefficient (a, n) b =\n      {#(a', uu_) \\<in># b. a' \\<noteq> a#} +\n      {#(a, n +\n            \\<Sum>\\<^sub># (snd `# {#(a', uu_) \\<in># b. a' = a#}))#}) &&&\n     (n + \\<Sum>\\<^sub># (snd `# {#(a', uu_) \\<in># b. a' = a#}) =\n      0 \\<Longrightarrow>\n      add_to_coefficient (a, n) b =\n      {#(a', uu_) \\<in># b. a' \\<noteq> a#})) &&&\n    add_to_coefficient (a, n) b =\n    {#(a', uu_) \\<in># b. a' \\<noteq> a#} +\n    (if n + \\<Sum>\\<^sub># (snd `# {#(a', uu_) \\<in># b. a' = a#}) = 0\n     then {#}\n     else {#(a, n +\n                \\<Sum>\\<^sub># (snd `# {#(a', uu_) \\<in># b. a' = a#}))#})", "by (auto simp: add_to_coefficient_def)"], ["", "interpretation comp_fun_commute \\<open>add_to_coefficient\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_fun_commute add_to_coefficient", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. comp_fun_commute add_to_coefficient", "have [iff]:\n    \\<open>a \\<noteq> aa \\<Longrightarrow>\n    ((case x of (a', _) \\<Rightarrow> a' = a) \\<and> (case x of (a', _) \\<Rightarrow> a' \\<noteq> aa)) \\<longleftrightarrow>\n    (case x of (a', _) \\<Rightarrow> a' = a)\\<close> for a' aa a x"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> aa \\<Longrightarrow>\n    ((case x of (a', x) \\<Rightarrow> a' = a) \\<and>\n     (case x of (a', x) \\<Rightarrow> a' \\<noteq> aa)) =\n    (case x of (a', x) \\<Rightarrow> a' = a)", "by auto"], ["proof (state)\nthis:\n  ?a1 \\<noteq> ?aa1 \\<Longrightarrow>\n  ((case ?x1 of (a', x) \\<Rightarrow> a' = ?a1) \\<and>\n   (case ?x1 of (a', x) \\<Rightarrow> a' \\<noteq> ?aa1)) =\n  (case ?x1 of (a', x) \\<Rightarrow> a' = ?a1)\n\ngoal (1 subgoal):\n 1. comp_fun_commute add_to_coefficient", "show \\<open>comp_fun_commute add_to_coefficient\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_fun_commute add_to_coefficient", "unfolding add_to_coefficient_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_fun_commute\n     (\\<lambda>(a, n) b.\n         {#(a', uu_) \\<in># b. a' \\<noteq> a#} +\n         (if n + \\<Sum>\\<^sub># (snd `# {#(a', uu_) \\<in># b. a' = a#}) = 0\n          then {#}\n          else {#(a, n +\n                     \\<Sum>\\<^sub>#\n                      (snd `# {#(a', uu_) \\<in># b. a' = a#}))#}))", "by standard\n     (auto intro!: ext simp: filter_filter_mset ac_simps add_eq_0_iff)"], ["proof (state)\nthis:\n  comp_fun_commute add_to_coefficient\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma normalized_poly_normalize_poly[simp]:\n  \\<open>normalized_poly (normalize_poly p)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. normalized_poly (normalize_poly p)", "unfolding normalize_poly_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. normalized_poly (fold_mset add_to_coefficient {#} p)", "apply (induction p)"], ["proof (prove)\ngoal (2 subgoals):\n 1. normalized_poly (fold_mset add_to_coefficient {#} {#})\n 2. \\<And>x p.\n       normalized_poly\n        (fold_mset add_to_coefficient {#} p) \\<Longrightarrow>\n       normalized_poly (fold_mset add_to_coefficient {#} (add_mset x p))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. normalized_poly (fold_mset add_to_coefficient {#} {#})", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x p.\n       normalized_poly\n        (fold_mset add_to_coefficient {#} p) \\<Longrightarrow>\n       normalized_poly (fold_mset add_to_coefficient {#} (add_mset x p))", "subgoal for x p"], ["proof (prove)\ngoal (1 subgoal):\n 1. normalized_poly (fold_mset add_to_coefficient {#} p) \\<Longrightarrow>\n    normalized_poly (fold_mset add_to_coefficient {#} (add_mset x p))", "by (cases x)\n      (auto simp: add_to_coefficient_simps_If\n      intro: normalized_poly_mono)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Addition\\<close>"], ["", "inductive add_poly_p :: \\<open>mset_polynomial \\<times> mset_polynomial \\<times> mset_polynomial \\<Rightarrow> mset_polynomial \\<times> mset_polynomial \\<times> mset_polynomial \\<Rightarrow> bool\\<close> where\nadd_new_coeff_r:\n    \\<open>add_poly_p (p, add_mset x q, r) (p, q, add_mset x r)\\<close> |\nadd_new_coeff_l:\n    \\<open>add_poly_p (add_mset x p, q, r) (p, q, add_mset x r)\\<close> |\nadd_same_coeff_l:\n    \\<open>add_poly_p (add_mset (x, n) p, q, add_mset (x, m) r) (p, q, add_mset (x, n + m) r)\\<close> |\nadd_same_coeff_r:\n    \\<open>add_poly_p (p, add_mset (x, n) q, add_mset (x, m) r) (p, q, add_mset (x, n + m) r)\\<close> |\nrem_0_coeff:\n    \\<open>add_poly_p (p, q, add_mset (x, 0) r) (p, q, r)\\<close>"], ["", "inductive_cases add_poly_pE: \\<open>add_poly_p S T\\<close>"], ["", "lemmas add_poly_p_induct =\n  add_poly_p.induct[split_format(complete)]"], ["", "lemma add_poly_p_empty_l:\n  \\<open>add_poly_p\\<^sup>*\\<^sup>* (p, q, r) ({#}, q, p + r)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. add_poly_p\\<^sup>*\\<^sup>* (p, q, r) ({#}, q, p + r)", "apply (induction p arbitrary: r)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r. add_poly_p\\<^sup>*\\<^sup>* ({#}, q, r) ({#}, q, {#} + r)\n 2. \\<And>x p r.\n       (\\<And>r.\n           add_poly_p\\<^sup>*\\<^sup>* (p, q, r)\n            ({#}, q, p + r)) \\<Longrightarrow>\n       add_poly_p\\<^sup>*\\<^sup>* (add_mset x p, q, r)\n        ({#}, q, add_mset x p + r)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. add_poly_p\\<^sup>*\\<^sup>* ({#}, q, r_) ({#}, q, {#} + r_)", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x p r.\n       (\\<And>r.\n           add_poly_p\\<^sup>*\\<^sup>* (p, q, r)\n            ({#}, q, p + r)) \\<Longrightarrow>\n       add_poly_p\\<^sup>*\\<^sup>* (add_mset x p, q, r)\n        ({#}, q, add_mset x p + r)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r.\n        add_poly_p\\<^sup>*\\<^sup>* (p_, q, r)\n         ({#}, q, p_ + r)) \\<Longrightarrow>\n    add_poly_p\\<^sup>*\\<^sup>* (add_mset x_ p_, q, r_)\n     ({#}, q, add_mset x_ p_ + r_)", "by (metis (no_types, lifting) add_new_coeff_l r_into_rtranclp\n      rtranclp_trans union_mset_add_mset_left union_mset_add_mset_right)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma add_poly_p_empty_r:\n  \\<open>add_poly_p\\<^sup>*\\<^sup>* (p, q, r) (p, {#}, q + r)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. add_poly_p\\<^sup>*\\<^sup>* (p, q, r) (p, {#}, q + r)", "apply (induction q arbitrary: r)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r. add_poly_p\\<^sup>*\\<^sup>* (p, {#}, r) (p, {#}, {#} + r)\n 2. \\<And>x q r.\n       (\\<And>r.\n           add_poly_p\\<^sup>*\\<^sup>* (p, q, r)\n            (p, {#}, q + r)) \\<Longrightarrow>\n       add_poly_p\\<^sup>*\\<^sup>* (p, add_mset x q, r)\n        (p, {#}, add_mset x q + r)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. add_poly_p\\<^sup>*\\<^sup>* (p, {#}, r_) (p, {#}, {#} + r_)", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x q r.\n       (\\<And>r.\n           add_poly_p\\<^sup>*\\<^sup>* (p, q, r)\n            (p, {#}, q + r)) \\<Longrightarrow>\n       add_poly_p\\<^sup>*\\<^sup>* (p, add_mset x q, r)\n        (p, {#}, add_mset x q + r)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r.\n        add_poly_p\\<^sup>*\\<^sup>* (p, q_, r)\n         (p, {#}, q_ + r)) \\<Longrightarrow>\n    add_poly_p\\<^sup>*\\<^sup>* (p, add_mset x_ q_, r_)\n     (p, {#}, add_mset x_ q_ + r_)", "by (metis (no_types, lifting) add_new_coeff_r r_into_rtranclp\n      rtranclp_trans union_mset_add_mset_left union_mset_add_mset_right)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma add_poly_p_sym:\n  \\<open>add_poly_p (p, q, r) (p', q', r') \\<longleftrightarrow> add_poly_p (q, p, r) (q', p', r')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. add_poly_p (p, q, r) (p', q', r') = add_poly_p (q, p, r) (q', p', r')", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. add_poly_p (p, q, r) (p', q', r') \\<Longrightarrow>\n    add_poly_p (q, p, r) (q', p', r')\n 2. add_poly_p (q, p, r) (q', p', r') \\<Longrightarrow>\n    add_poly_p (p, q, r) (p', q', r')", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. add_poly_p (p, q, r) (p', q', r') \\<Longrightarrow>\n    add_poly_p (q, p, r) (q', p', r')", "by (cases rule: add_poly_p.cases, assumption)\n      (auto intro: add_poly_p.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. add_poly_p (q, p, r) (q', p', r') \\<Longrightarrow>\n    add_poly_p (p, q, r) (p', q', r')", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. add_poly_p (q, p, r) (q', p', r') \\<Longrightarrow>\n    add_poly_p (p, q, r) (p', q', r')", "by (cases rule: add_poly_p.cases, assumption)\n      (auto intro: add_poly_p.intros)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma wf_if_measure_in_wf:\n  \\<open>wf R \\<Longrightarrow> (\\<And>a b. (a, b) \\<in> S \\<Longrightarrow> (\\<nu> a, \\<nu> b)\\<in>R) \\<Longrightarrow> wf S\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf R;\n     \\<And>a b.\n        (a, b) \\<in> S \\<Longrightarrow> (\\<nu> a, \\<nu> b) \\<in> R\\<rbrakk>\n    \\<Longrightarrow> wf S", "by (metis in_inv_image wfE_min wfI_min wf_inv_image)"], ["", "lemma lexn_n:\n  \\<open>n > 0 \\<Longrightarrow> (x # xs, y # ys) \\<in> lexn r n \\<longleftrightarrow>\n  (length xs = n-1 \\<and> length ys = n-1) \\<and> ((x, y) \\<in> r \\<or> (x = y \\<and> (xs, ys) \\<in> lexn r (n - 1)))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow>\n    ((x # xs, y # ys) \\<in> lexn r n) =\n    ((length xs = n - 1 \\<and> length ys = n - 1) \\<and>\n     ((x, y) \\<in> r \\<or> x = y \\<and> (xs, ys) \\<in> lexn r (n - 1)))", "apply (cases n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < n; n = 0\\<rbrakk>\n    \\<Longrightarrow> ((x # xs, y # ys) \\<in> lexn r n) =\n                      ((length xs = n - 1 \\<and> length ys = n - 1) \\<and>\n                       ((x, y) \\<in> r \\<or>\n                        x = y \\<and> (xs, ys) \\<in> lexn r (n - 1)))\n 2. \\<And>nat.\n       \\<lbrakk>0 < n; n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> ((x # xs, y # ys) \\<in> lexn r n) =\n                         ((length xs = n - 1 \\<and>\n                           length ys = n - 1) \\<and>\n                          ((x, y) \\<in> r \\<or>\n                           x = y \\<and> (xs, ys) \\<in> lexn r (n - 1)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>0 < n; n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> ((x # xs, y # ys) \\<in> lexn r n) =\n                         ((length xs = n - 1 \\<and>\n                           length ys = n - 1) \\<and>\n                          ((x, y) \\<in> r \\<or>\n                           x = y \\<and> (xs, ys) \\<in> lexn r (n - 1)))", "by (auto simp: map_prod_def image_iff lex_prod_def)"], ["", "lemma wf_add_poly_p:\n  \\<open>wf {(x, y). add_poly_p y x}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(x, y). add_poly_p y x}", "by (rule wf_if_measure_in_wf[where R = \\<open>lexn less_than 3\\<close> and\n     \\<nu> = \\<open>\\<lambda>(a,b,c). [size a , size b, size c]\\<close>])\n    (auto simp: add_poly_p.simps wf_lexn\n     simp: lexn_n simp del: lexn.simps(2))"], ["", "lemma mult_poly_by_monom_simps[simp]:\n  \\<open>mult_poly_by_monom t {#} = {#}\\<close>\n  \\<open>mult_poly_by_monom t (ps + qs) =  mult_poly_by_monom t ps + mult_poly_by_monom t qs\\<close>\n  \\<open>mult_poly_by_monom a (add_mset p ps) = add_mset (fst a + fst p, snd a * snd p) (mult_poly_by_monom a ps)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. mult_poly_by_monom t {#} = {#} &&&\n    mult_poly_by_monom t (ps + qs) =\n    mult_poly_by_monom t ps + mult_poly_by_monom t qs &&&\n    mult_poly_by_monom a (add_mset p ps) =\n    add_mset (fst a + fst p, snd a * snd p) (mult_poly_by_monom a ps)", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. mult_poly_by_monom t {#} = {#}\n 2. mult_poly_by_monom t (ps + qs) =\n    mult_poly_by_monom t ps + mult_poly_by_monom t qs\n 3. mult_poly_by_monom a (add_mset p ps) =\n    add_mset (fst a + fst p, snd a * snd p) (mult_poly_by_monom a ps)", "interpret comp_fun_commute \\<open>(\\<lambda>xs. add_mset (xs + t))\\<close> for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_fun_commute (\\<lambda>xs. add_mset (xs + t))", "by standard auto"], ["proof (state)\ngoal (3 subgoals):\n 1. mult_poly_by_monom t {#} = {#}\n 2. mult_poly_by_monom t (ps + qs) =\n    mult_poly_by_monom t ps + mult_poly_by_monom t qs\n 3. mult_poly_by_monom a (add_mset p ps) =\n    add_mset (fst a + fst p, snd a * snd p) (mult_poly_by_monom a ps)", "show\n    \\<open>mult_poly_by_monom t (ps + qs) =  mult_poly_by_monom t ps + mult_poly_by_monom t qs\\<close> for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. mult_poly_by_monom t (ps + qs) =\n    mult_poly_by_monom t ps + mult_poly_by_monom t qs", "by (induction ps)\n      (auto simp: mult_poly_by_monom_def)"], ["proof (state)\nthis:\n  mult_poly_by_monom ?t (ps + qs) =\n  mult_poly_by_monom ?t ps + mult_poly_by_monom ?t qs\n\ngoal (2 subgoals):\n 1. mult_poly_by_monom t {#} = {#}\n 2. mult_poly_by_monom a (add_mset p ps) =\n    add_mset (fst a + fst p, snd a * snd p) (mult_poly_by_monom a ps)", "show\n    \\<open>mult_poly_by_monom a (add_mset p ps) = add_mset (fst a + fst p, snd a * snd p) (mult_poly_by_monom a ps)\\<close>\n    \\<open>mult_poly_by_monom t {#} = {#}\\<close>for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. mult_poly_by_monom a (add_mset p ps) =\n    add_mset (fst a + fst p, snd a * snd p) (mult_poly_by_monom a ps) &&&\n    mult_poly_by_monom t {#} = {#}", "by (auto simp: mult_poly_by_monom_def)"], ["proof (state)\nthis:\n  mult_poly_by_monom a (add_mset p ps) =\n  add_mset (fst a + fst p, snd a * snd p) (mult_poly_by_monom a ps)\n  mult_poly_by_monom ?t {#} = {#}\n\ngoal:\nNo subgoals!", "qed"], ["", "inductive mult_poly_p :: \\<open>mset_polynomial \\<Rightarrow> mset_polynomial \\<times> mset_polynomial \\<Rightarrow> mset_polynomial \\<times> mset_polynomial \\<Rightarrow> bool\\<close>\n  for q :: mset_polynomial where\nmult_step:\n    \\<open>mult_poly_p q (add_mset (xs, n) p, r) (p, (\\<lambda>(ys, m). (remdups_mset (xs + ys), n * m)) `# q + r)\\<close>"], ["", "lemmas mult_poly_p_induct = mult_poly_p.induct[split_format(complete)]"], ["", "subsection \\<open>Normalisation\\<close>"], ["", "inductive normalize_poly_p :: \\<open>mset_polynomial \\<Rightarrow> mset_polynomial \\<Rightarrow> bool\\<close>where\nrem_0_coeff[simp, intro]:\n    \\<open>normalize_poly_p p q \\<Longrightarrow> normalize_poly_p (add_mset (xs, 0) p) q\\<close> |\nmerge_dup_coeff[simp, intro]:\n    \\<open>normalize_poly_p p q \\<Longrightarrow> normalize_poly_p (add_mset (xs, m) (add_mset (xs, n) p)) (add_mset (xs, m + n) q)\\<close> |\nsame[simp, intro]:\n    \\<open>normalize_poly_p p p\\<close> |\nkeep_coeff[simp, intro]:\n    \\<open>normalize_poly_p p q \\<Longrightarrow> normalize_poly_p (add_mset x p) (add_mset x q)\\<close>"], ["", "subsection \\<open>Correctness\\<close>"], ["", "text \\<open>\n  This locales maps string polynomials to real polynomials.\n\\<close>"], ["", "locale poly_embed =\n  fixes \\<phi> :: \\<open>string \\<Rightarrow> nat\\<close>\n  assumes \\<phi>_inj: \\<open>inj \\<phi>\\<close>\nbegin"], ["", "definition poly_of_vars :: \"term_poly \\<Rightarrow> ('a :: {comm_semiring_1}) mpoly\" where\n  \\<open>poly_of_vars xs = fold_mset (\\<lambda>a b. Var (\\<phi> a) * b) (1 :: 'a mpoly) xs\\<close>"], ["", "lemma poly_of_vars_simps[simp]:\n  shows\n    \\<open>poly_of_vars (add_mset x xs) = Var (\\<phi> x) * (poly_of_vars xs :: ('a :: {comm_semiring_1}) mpoly)\\<close> (is ?A) and\n    \\<open>poly_of_vars (xs + ys) = poly_of_vars xs * (poly_of_vars ys :: ('a :: {comm_semiring_1}) mpoly)\\<close> (is ?B)"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_of_vars (add_mset x xs) = Var (\\<phi> x) * poly_of_vars xs &&&\n    poly_of_vars (xs + ys) = poly_of_vars xs * poly_of_vars ys", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. poly_of_vars (add_mset x xs) = Var (\\<phi> x) * poly_of_vars xs\n 2. poly_of_vars (xs + ys) = poly_of_vars xs * poly_of_vars ys", "interpret comp_fun_commute \\<open>(\\<lambda>a b. (b :: 'a :: {comm_semiring_1} mpoly) * Var (\\<phi> a))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_fun_commute (\\<lambda>a b. b * Var (\\<phi> a))", "by standard\n      (auto simp: algebra_simps ac_simps\n         Var_def times_monomial_monomial intro!: ext)"], ["proof (state)\ngoal (2 subgoals):\n 1. poly_of_vars (add_mset x xs) = Var (\\<phi> x) * poly_of_vars xs\n 2. poly_of_vars (xs + ys) = poly_of_vars xs * poly_of_vars ys", "show ?A"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_of_vars (add_mset x xs) = Var (\\<phi> x) * poly_of_vars xs", "by (auto simp: poly_of_vars_def comp_fun_commute_axioms fold_mset_fusion\n      ac_simps)"], ["proof (state)\nthis:\n  poly_of_vars (add_mset x xs) = Var (\\<phi> x) * poly_of_vars xs\n\ngoal (1 subgoal):\n 1. poly_of_vars (xs + ys) = poly_of_vars xs * poly_of_vars ys", "show ?B"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_of_vars (xs + ys) = poly_of_vars xs * poly_of_vars ys", "apply (auto simp: poly_of_vars_def ac_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. fold_mset (\\<lambda>a b. b * Var (\\<phi> a))\n     (fold_mset (\\<lambda>a b. b * Var (\\<phi> a)) 1 xs) ys =\n    fold_mset (\\<lambda>a b. b * Var (\\<phi> a)) 1 xs *\n    fold_mset (\\<lambda>a b. b * Var (\\<phi> a)) 1 ys", "by (simp add: local.comp_fun_commute_axioms local.fold_mset_fusion\n      semiring_normalization_rules(18))"], ["proof (state)\nthis:\n  poly_of_vars (xs + ys) = poly_of_vars xs * poly_of_vars ys\n\ngoal:\nNo subgoals!", "qed"], ["", "definition mononom_of_vars where\n  \\<open>mononom_of_vars \\<equiv> (\\<lambda>(xs, n). (+) (Const n * poly_of_vars xs))\\<close>"], ["", "interpretation comp_fun_commute \\<open>mononom_of_vars\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_fun_commute mononom_of_vars", "by standard\n    (auto simp: algebra_simps ac_simps mononom_of_vars_def\n       Var_def times_monomial_monomial intro!: ext)"], ["", "lemma [simp]:\n  \\<open>poly_of_vars {#} = 1\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_of_vars {#} = 1", "by (auto simp: poly_of_vars_def)"], ["", "lemma mononom_of_vars_add[simp]:\n  \\<open>NO_MATCH 0 b \\<Longrightarrow> mononom_of_vars xs b = Const (snd xs) * poly_of_vars (fst xs) + b\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. NO_MATCH (0::'a) b \\<Longrightarrow>\n    mononom_of_vars xs b = Const (snd xs) * poly_of_vars (fst xs) + b", "by (cases xs)\n    (auto simp: ac_simps mononom_of_vars_def)"], ["", "definition polynomial_of_mset :: \\<open>mset_polynomial \\<Rightarrow> _\\<close> where\n  \\<open>polynomial_of_mset p = sum_mset (mononom_of_vars `# p) 0\\<close>"], ["", "lemma polynomial_of_mset_append[simp]:\n  \\<open>polynomial_of_mset (xs + ys) = polynomial_of_mset xs + polynomial_of_mset ys\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. polynomial_of_mset (xs + ys) =\n    polynomial_of_mset xs + polynomial_of_mset ys", "by (auto simp: ac_simps Const_def polynomial_of_mset_def)"], ["", "lemma polynomial_of_mset_Cons[simp]:\n  \\<open>polynomial_of_mset (add_mset x ys) = Const (snd x) * poly_of_vars (fst x) + polynomial_of_mset ys\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. polynomial_of_mset (add_mset x ys) =\n    Const (snd x) * poly_of_vars (fst x) + polynomial_of_mset ys", "by (cases x)\n    (auto simp: ac_simps polynomial_of_mset_def mononom_of_vars_def)"], ["", "lemma polynomial_of_mset_empty[simp]:\n  \\<open>polynomial_of_mset {#} = 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. polynomial_of_mset {#} = 0", "by (auto simp: polynomial_of_mset_def)"], ["", "lemma polynomial_of_mset_mult_poly_by_monom[simp]:\n  \\<open>polynomial_of_mset (mult_poly_by_monom x ys) =\n       (Const (snd x) * poly_of_vars (fst x) * polynomial_of_mset ys)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. polynomial_of_mset (mult_poly_by_monom x ys) =\n    Const (snd x) * poly_of_vars (fst x) * polynomial_of_mset ys", "by (induction ys)\n   (auto simp: Const_mult algebra_simps)"], ["", "lemma polynomial_of_mset_mult_poly_raw[simp]:\n  \\<open>polynomial_of_mset (mult_poly_raw xs ys) = polynomial_of_mset xs * polynomial_of_mset ys\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. polynomial_of_mset (mult_poly_raw xs ys) =\n    polynomial_of_mset xs * polynomial_of_mset ys", "unfolding mult_poly_raw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. polynomial_of_mset (\\<Sum>y\\<in>#xs. mult_poly_by_monom y ys) =\n    polynomial_of_mset xs * polynomial_of_mset ys", "by (induction xs arbitrary: ys)\n   (auto simp: Const_mult algebra_simps)"], ["", "lemma polynomial_of_mset_uminus:\n  \\<open>polynomial_of_mset {#case x of (a, b) \\<Rightarrow> (a, - b). x \\<in># za#} =\n    - polynomial_of_mset za\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. polynomial_of_mset\n     {#case x of (a, b) \\<Rightarrow> (a, - b). x \\<in># za#} =\n    - polynomial_of_mset za", "by (induction za)\n    auto"], ["", "lemma X2_X_polynomial_bool_mult_in:\n  \\<open>Var (x1) * (Var (x1) * p) -  Var (x1) * p \\<in> More_Modules.ideal polynomial_bool\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. Var x1 * (Var x1 * p) - Var x1 * p\n    \\<in> More_Modules.ideal polynomial_bool", "using ideal_mult_right_in[OF  X2_X_in_pac_ideal[of x1 \\<open>{}\\<close>, unfolded pac_ideal_def], of p]"], ["proof (prove)\nusing this:\n  ((Var x1)\\<^sup>2 - Var x1) * p\n  \\<in> More_Modules.ideal ({} \\<union> polynomial_bool)\n\ngoal (1 subgoal):\n 1. Var x1 * (Var x1 * p) - Var x1 * p\n    \\<in> More_Modules.ideal polynomial_bool", "by (auto simp: right_diff_distrib ac_simps power2_eq_square)"], ["", "lemma polynomial_of_list_remove_powers_polynomial_bool:\n  \\<open>(polynomial_of_mset xs) - polynomial_of_mset (remove_powers xs) \\<in> ideal polynomial_bool\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. polynomial_of_mset xs - polynomial_of_mset (remove_powers xs)\n    \\<in> More_Modules.ideal polynomial_bool", "proof (induction xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. polynomial_of_mset {#} - polynomial_of_mset (remove_powers {#})\n    \\<in> More_Modules.ideal polynomial_bool\n 2. \\<And>x xs.\n       polynomial_of_mset xs - polynomial_of_mset (remove_powers xs)\n       \\<in> More_Modules.ideal polynomial_bool \\<Longrightarrow>\n       polynomial_of_mset (add_mset x xs) -\n       polynomial_of_mset (remove_powers (add_mset x xs))\n       \\<in> More_Modules.ideal polynomial_bool", "case empty"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. polynomial_of_mset {#} - polynomial_of_mset (remove_powers {#})\n    \\<in> More_Modules.ideal polynomial_bool\n 2. \\<And>x xs.\n       polynomial_of_mset xs - polynomial_of_mset (remove_powers xs)\n       \\<in> More_Modules.ideal polynomial_bool \\<Longrightarrow>\n       polynomial_of_mset (add_mset x xs) -\n       polynomial_of_mset (remove_powers (add_mset x xs))\n       \\<in> More_Modules.ideal polynomial_bool", "then"], ["proof (chain)\npicking this:", "show \\<open>?case\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. polynomial_of_mset {#} - polynomial_of_mset (remove_powers {#})\n    \\<in> More_Modules.ideal polynomial_bool", "by (auto simp: remove_powers_def ideal.span_zero)"], ["proof (state)\nthis:\n  polynomial_of_mset {#} - polynomial_of_mset (remove_powers {#})\n  \\<in> More_Modules.ideal polynomial_bool\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       polynomial_of_mset xs - polynomial_of_mset (remove_powers xs)\n       \\<in> More_Modules.ideal polynomial_bool \\<Longrightarrow>\n       polynomial_of_mset (add_mset x xs) -\n       polynomial_of_mset (remove_powers (add_mset x xs))\n       \\<in> More_Modules.ideal polynomial_bool", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       polynomial_of_mset xs - polynomial_of_mset (remove_powers xs)\n       \\<in> More_Modules.ideal polynomial_bool \\<Longrightarrow>\n       polynomial_of_mset (add_mset x xs) -\n       polynomial_of_mset (remove_powers (add_mset x xs))\n       \\<in> More_Modules.ideal polynomial_bool", "case (add x xs)"], ["proof (state)\nthis:\n  polynomial_of_mset xs - polynomial_of_mset (remove_powers xs)\n  \\<in> More_Modules.ideal polynomial_bool\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       polynomial_of_mset xs - polynomial_of_mset (remove_powers xs)\n       \\<in> More_Modules.ideal polynomial_bool \\<Longrightarrow>\n       polynomial_of_mset (add_mset x xs) -\n       polynomial_of_mset (remove_powers (add_mset x xs))\n       \\<in> More_Modules.ideal polynomial_bool", "have H1: \\<open>x1 \\<in># x2 \\<Longrightarrow>\n       Var (\\<phi> x1) * poly_of_vars x2 - p \\<in> More_Modules.ideal polynomial_bool \\<longleftrightarrow>\n       poly_of_vars x2 - p \\<in> More_Modules.ideal polynomial_bool\n       \\<close> for x1 x2 p"], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 \\<in># x2 \\<Longrightarrow>\n    (Var (\\<phi> x1) * poly_of_vars x2 - p\n     \\<in> More_Modules.ideal polynomial_bool) =\n    (poly_of_vars x2 - p \\<in> More_Modules.ideal polynomial_bool)", "apply (subst (2) ideal.span_add_eq[symmetric,\n      of \\<open>Var (\\<phi> x1) * poly_of_vars x2 - poly_of_vars x2\\<close>])"], ["proof (prove)\ngoal (2 subgoals):\n 1. x1 \\<in># x2 \\<Longrightarrow>\n    Var (\\<phi> x1) * poly_of_vars x2 - poly_of_vars x2\n    \\<in> More_Modules.ideal polynomial_bool\n 2. x1 \\<in># x2 \\<Longrightarrow>\n    (Var (\\<phi> x1) * poly_of_vars x2 - p\n     \\<in> More_Modules.ideal polynomial_bool) =\n    (Var (\\<phi> x1) * poly_of_vars x2 - poly_of_vars x2 +\n     (poly_of_vars x2 - p)\n     \\<in> More_Modules.ideal polynomial_bool)", "apply (drule multi_member_split)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>A. x2 = add_mset x1 A \\<Longrightarrow>\n    Var (\\<phi> x1) * poly_of_vars x2 - poly_of_vars x2\n    \\<in> More_Modules.ideal polynomial_bool\n 2. x1 \\<in># x2 \\<Longrightarrow>\n    (Var (\\<phi> x1) * poly_of_vars x2 - p\n     \\<in> More_Modules.ideal polynomial_bool) =\n    (Var (\\<phi> x1) * poly_of_vars x2 - poly_of_vars x2 +\n     (poly_of_vars x2 - p)\n     \\<in> More_Modules.ideal polynomial_bool)", "apply (auto simp: X2_X_polynomial_bool_mult_in)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?x1.2 \\<in># ?x2.2 \\<Longrightarrow>\n  (Var (\\<phi> ?x1.2) * poly_of_vars ?x2.2 - ?p2\n   \\<in> More_Modules.ideal polynomial_bool) =\n  (poly_of_vars ?x2.2 - ?p2 \\<in> More_Modules.ideal polynomial_bool)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       polynomial_of_mset xs - polynomial_of_mset (remove_powers xs)\n       \\<in> More_Modules.ideal polynomial_bool \\<Longrightarrow>\n       polynomial_of_mset (add_mset x xs) -\n       polynomial_of_mset (remove_powers (add_mset x xs))\n       \\<in> More_Modules.ideal polynomial_bool", "have diff: \\<open>poly_of_vars (x) - poly_of_vars (remdups_mset (x)) \\<in> ideal polynomial_bool\\<close> for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_of_vars x - poly_of_vars (remdups_mset x)\n    \\<in> More_Modules.ideal polynomial_bool", "by (induction x)\n     (auto simp: remove_powers_def ideal.span_zero H1\n      simp flip: right_diff_distrib intro!: ideal.span_scale)"], ["proof (state)\nthis:\n  poly_of_vars ?x2 - poly_of_vars (remdups_mset ?x2)\n  \\<in> More_Modules.ideal polynomial_bool\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       polynomial_of_mset xs - polynomial_of_mset (remove_powers xs)\n       \\<in> More_Modules.ideal polynomial_bool \\<Longrightarrow>\n       polynomial_of_mset (add_mset x xs) -\n       polynomial_of_mset (remove_powers (add_mset x xs))\n       \\<in> More_Modules.ideal polynomial_bool", "have [simp]: \\<open>polynomial_of_mset xs -\n    polynomial_of_mset (apfst remdups_mset `# xs)\n    \\<in> More_Modules.ideal polynomial_bool \\<Longrightarrow>\n    poly_of_vars ys * poly_of_vars ys -\n    poly_of_vars ys * poly_of_vars (remdups_mset ys)\n    \\<in> More_Modules.ideal polynomial_bool \\<Longrightarrow>\n    polynomial_of_mset xs + Const y * poly_of_vars ys -\n    (polynomial_of_mset (apfst remdups_mset `# xs) +\n    Const y * poly_of_vars (remdups_mset ys))\n    \\<in> More_Modules.ideal polynomial_bool\\<close> for y ys"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>polynomial_of_mset xs -\n             polynomial_of_mset (apfst remdups_mset `# xs)\n             \\<in> More_Modules.ideal polynomial_bool;\n     poly_of_vars ys * poly_of_vars ys -\n     poly_of_vars ys * poly_of_vars (remdups_mset ys)\n     \\<in> More_Modules.ideal polynomial_bool\\<rbrakk>\n    \\<Longrightarrow> polynomial_of_mset xs + Const y * poly_of_vars ys -\n                      (polynomial_of_mset (apfst remdups_mset `# xs) +\n                       Const y * poly_of_vars (remdups_mset ys))\n                      \\<in> More_Modules.ideal polynomial_bool", "by (metis add_diff_add diff ideal.scale_right_diff_distrib ideal.span_add ideal.span_scale)"], ["proof (state)\nthis:\n  \\<lbrakk>polynomial_of_mset xs -\n           polynomial_of_mset (apfst remdups_mset `# xs)\n           \\<in> More_Modules.ideal polynomial_bool;\n   poly_of_vars ?ys2 * poly_of_vars ?ys2 -\n   poly_of_vars ?ys2 * poly_of_vars (remdups_mset ?ys2)\n   \\<in> More_Modules.ideal polynomial_bool\\<rbrakk>\n  \\<Longrightarrow> polynomial_of_mset xs + Const ?y2 * poly_of_vars ?ys2 -\n                    (polynomial_of_mset (apfst remdups_mset `# xs) +\n                     Const ?y2 * poly_of_vars (remdups_mset ?ys2))\n                    \\<in> More_Modules.ideal polynomial_bool\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       polynomial_of_mset xs - polynomial_of_mset (remove_powers xs)\n       \\<in> More_Modules.ideal polynomial_bool \\<Longrightarrow>\n       polynomial_of_mset (add_mset x xs) -\n       polynomial_of_mset (remove_powers (add_mset x xs))\n       \\<in> More_Modules.ideal polynomial_bool", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. polynomial_of_mset (add_mset x xs) -\n    polynomial_of_mset (remove_powers (add_mset x xs))\n    \\<in> More_Modules.ideal polynomial_bool", "using add"], ["proof (prove)\nusing this:\n  polynomial_of_mset xs - polynomial_of_mset (remove_powers xs)\n  \\<in> More_Modules.ideal polynomial_bool\n\ngoal (1 subgoal):\n 1. polynomial_of_mset (add_mset x xs) -\n    polynomial_of_mset (remove_powers (add_mset x xs))\n    \\<in> More_Modules.ideal polynomial_bool", "apply (cases x)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>polynomial_of_mset xs -\n                polynomial_of_mset (remove_powers xs)\n                \\<in> More_Modules.ideal polynomial_bool;\n        x = (a, b)\\<rbrakk>\n       \\<Longrightarrow> polynomial_of_mset (add_mset x xs) -\n                         polynomial_of_mset (remove_powers (add_mset x xs))\n                         \\<in> More_Modules.ideal polynomial_bool", "subgoal for ys y"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>polynomial_of_mset xs - polynomial_of_mset (remove_powers xs)\n             \\<in> More_Modules.ideal polynomial_bool;\n     x = (ys, y)\\<rbrakk>\n    \\<Longrightarrow> polynomial_of_mset (add_mset x xs) -\n                      polynomial_of_mset (remove_powers (add_mset x xs))\n                      \\<in> More_Modules.ideal polynomial_bool", "using ideal_mult_right_in2[OF diff, of \\<open>poly_of_vars ys\\<close> ys]"], ["proof (prove)\nusing this:\n  poly_of_vars ys * (poly_of_vars ys - poly_of_vars (remdups_mset ys))\n  \\<in> More_Modules.ideal polynomial_bool\n\ngoal (1 subgoal):\n 1. \\<lbrakk>polynomial_of_mset xs - polynomial_of_mset (remove_powers xs)\n             \\<in> More_Modules.ideal polynomial_bool;\n     x = (ys, y)\\<rbrakk>\n    \\<Longrightarrow> polynomial_of_mset (add_mset x xs) -\n                      polynomial_of_mset (remove_powers (add_mset x xs))\n                      \\<in> More_Modules.ideal polynomial_bool", "by (auto simp: remove_powers_def right_diff_distrib\n        ideal.span_diff ideal.span_add field_simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  polynomial_of_mset (add_mset x xs) -\n  polynomial_of_mset (remove_powers (add_mset x xs))\n  \\<in> More_Modules.ideal polynomial_bool\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma add_poly_p_polynomial_of_mset:\n  \\<open>add_poly_p (p, q, r) (p', q', r') \\<Longrightarrow>\n    polynomial_of_mset r + (polynomial_of_mset p + polynomial_of_mset q) =\n    polynomial_of_mset r' + (polynomial_of_mset p' + polynomial_of_mset q')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. add_poly_p (p, q, r) (p', q', r') \\<Longrightarrow>\n    polynomial_of_mset r + (polynomial_of_mset p + polynomial_of_mset q) =\n    polynomial_of_mset r' + (polynomial_of_mset p' + polynomial_of_mset q')", "apply (induction rule: add_poly_p_induct)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>p a b q r.\n       polynomial_of_mset r +\n       (polynomial_of_mset p + polynomial_of_mset (add_mset (a, b) q)) =\n       polynomial_of_mset (add_mset (a, b) r) +\n       (polynomial_of_mset p + polynomial_of_mset q)\n 2. \\<And>a b p q r.\n       polynomial_of_mset r +\n       (polynomial_of_mset (add_mset (a, b) p) + polynomial_of_mset q) =\n       polynomial_of_mset (add_mset (a, b) r) +\n       (polynomial_of_mset p + polynomial_of_mset q)\n 3. \\<And>x n p q m r.\n       polynomial_of_mset (add_mset (x, m) r) +\n       (polynomial_of_mset (add_mset (x, n) p) + polynomial_of_mset q) =\n       polynomial_of_mset (add_mset (x, n + m) r) +\n       (polynomial_of_mset p + polynomial_of_mset q)\n 4. \\<And>p x n q m r.\n       polynomial_of_mset (add_mset (x, m) r) +\n       (polynomial_of_mset p + polynomial_of_mset (add_mset (x, n) q)) =\n       polynomial_of_mset (add_mset (x, n + m) r) +\n       (polynomial_of_mset p + polynomial_of_mset q)\n 5. \\<And>p q x r.\n       polynomial_of_mset (add_mset (x, 0) r) +\n       (polynomial_of_mset p + polynomial_of_mset q) =\n       polynomial_of_mset r + (polynomial_of_mset p + polynomial_of_mset q)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. polynomial_of_mset r_ +\n    (polynomial_of_mset p_ + polynomial_of_mset (add_mset (a_, b_) q_)) =\n    polynomial_of_mset (add_mset (a_, b_) r_) +\n    (polynomial_of_mset p_ + polynomial_of_mset q_)", "by auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b p q r.\n       polynomial_of_mset r +\n       (polynomial_of_mset (add_mset (a, b) p) + polynomial_of_mset q) =\n       polynomial_of_mset (add_mset (a, b) r) +\n       (polynomial_of_mset p + polynomial_of_mset q)\n 2. \\<And>x n p q m r.\n       polynomial_of_mset (add_mset (x, m) r) +\n       (polynomial_of_mset (add_mset (x, n) p) + polynomial_of_mset q) =\n       polynomial_of_mset (add_mset (x, n + m) r) +\n       (polynomial_of_mset p + polynomial_of_mset q)\n 3. \\<And>p x n q m r.\n       polynomial_of_mset (add_mset (x, m) r) +\n       (polynomial_of_mset p + polynomial_of_mset (add_mset (x, n) q)) =\n       polynomial_of_mset (add_mset (x, n + m) r) +\n       (polynomial_of_mset p + polynomial_of_mset q)\n 4. \\<And>p q x r.\n       polynomial_of_mset (add_mset (x, 0) r) +\n       (polynomial_of_mset p + polynomial_of_mset q) =\n       polynomial_of_mset r + (polynomial_of_mset p + polynomial_of_mset q)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. polynomial_of_mset r_ +\n    (polynomial_of_mset (add_mset (a_, b_) p_) + polynomial_of_mset q_) =\n    polynomial_of_mset (add_mset (a_, b_) r_) +\n    (polynomial_of_mset p_ + polynomial_of_mset q_)", "by auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x n p q m r.\n       polynomial_of_mset (add_mset (x, m) r) +\n       (polynomial_of_mset (add_mset (x, n) p) + polynomial_of_mset q) =\n       polynomial_of_mset (add_mset (x, n + m) r) +\n       (polynomial_of_mset p + polynomial_of_mset q)\n 2. \\<And>p x n q m r.\n       polynomial_of_mset (add_mset (x, m) r) +\n       (polynomial_of_mset p + polynomial_of_mset (add_mset (x, n) q)) =\n       polynomial_of_mset (add_mset (x, n + m) r) +\n       (polynomial_of_mset p + polynomial_of_mset q)\n 3. \\<And>p q x r.\n       polynomial_of_mset (add_mset (x, 0) r) +\n       (polynomial_of_mset p + polynomial_of_mset q) =\n       polynomial_of_mset r + (polynomial_of_mset p + polynomial_of_mset q)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. polynomial_of_mset (add_mset (x_, m_) r_) +\n    (polynomial_of_mset (add_mset (x_, n_) p_) + polynomial_of_mset q_) =\n    polynomial_of_mset (add_mset (x_, n_ + m_) r_) +\n    (polynomial_of_mset p_ + polynomial_of_mset q_)", "by (auto simp: algebra_simps Const_add)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p x n q m r.\n       polynomial_of_mset (add_mset (x, m) r) +\n       (polynomial_of_mset p + polynomial_of_mset (add_mset (x, n) q)) =\n       polynomial_of_mset (add_mset (x, n + m) r) +\n       (polynomial_of_mset p + polynomial_of_mset q)\n 2. \\<And>p q x r.\n       polynomial_of_mset (add_mset (x, 0) r) +\n       (polynomial_of_mset p + polynomial_of_mset q) =\n       polynomial_of_mset r + (polynomial_of_mset p + polynomial_of_mset q)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. polynomial_of_mset (add_mset (x_, m_) r_) +\n    (polynomial_of_mset p_ + polynomial_of_mset (add_mset (x_, n_) q_)) =\n    polynomial_of_mset (add_mset (x_, n_ + m_) r_) +\n    (polynomial_of_mset p_ + polynomial_of_mset q_)", "by (auto simp: algebra_simps Const_add)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p q x r.\n       polynomial_of_mset (add_mset (x, 0) r) +\n       (polynomial_of_mset p + polynomial_of_mset q) =\n       polynomial_of_mset r + (polynomial_of_mset p + polynomial_of_mset q)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. polynomial_of_mset (add_mset (x_, 0) r_) +\n    (polynomial_of_mset p_ + polynomial_of_mset q_) =\n    polynomial_of_mset r_ + (polynomial_of_mset p_ + polynomial_of_mset q_)", "by (auto simp: algebra_simps Const_add)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rtranclp_add_poly_p_polynomial_of_mset:\n  \\<open>add_poly_p\\<^sup>*\\<^sup>* (p, q, r) (p', q', r') \\<Longrightarrow>\n    polynomial_of_mset r + (polynomial_of_mset p + polynomial_of_mset q) =\n    polynomial_of_mset r' + (polynomial_of_mset p' + polynomial_of_mset q')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. add_poly_p\\<^sup>*\\<^sup>* (p, q, r) (p', q', r') \\<Longrightarrow>\n    polynomial_of_mset r + (polynomial_of_mset p + polynomial_of_mset q) =\n    polynomial_of_mset r' + (polynomial_of_mset p' + polynomial_of_mset q')", "by (induction rule: rtranclp_induct[of add_poly_p \\<open>(_, _, _)\\<close> \\<open>(_, _, _)\\<close>, split_format(complete), of for r])\n    (auto dest: add_poly_p_polynomial_of_mset)"], ["", "lemma rtranclp_add_poly_p_polynomial_of_mset_full:\n  \\<open>add_poly_p\\<^sup>*\\<^sup>* (p, q, {#}) ({#}, {#}, r') \\<Longrightarrow>\n    polynomial_of_mset r' = (polynomial_of_mset p + polynomial_of_mset q)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. add_poly_p\\<^sup>*\\<^sup>* (p, q, {#}) ({#}, {#}, r') \\<Longrightarrow>\n    polynomial_of_mset r' = polynomial_of_mset p + polynomial_of_mset q", "by (drule rtranclp_add_poly_p_polynomial_of_mset)\n    (auto simp: ac_simps add_eq_0_iff)"], ["", "lemma poly_of_vars_remdups_mset:\n  \\<open>poly_of_vars (remdups_mset (xs)) - (poly_of_vars xs)\n    \\<in> More_Modules.ideal polynomial_bool\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_of_vars (remdups_mset xs) - poly_of_vars xs\n    \\<in> More_Modules.ideal polynomial_bool", "apply (induction xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. poly_of_vars (remdups_mset {#}) - poly_of_vars {#}\n    \\<in> More_Modules.ideal polynomial_bool\n 2. \\<And>x xs.\n       poly_of_vars (remdups_mset xs) - poly_of_vars xs\n       \\<in> More_Modules.ideal polynomial_bool \\<Longrightarrow>\n       poly_of_vars (remdups_mset (add_mset x xs)) -\n       poly_of_vars (add_mset x xs)\n       \\<in> More_Modules.ideal polynomial_bool", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_of_vars (remdups_mset {#}) - poly_of_vars {#}\n    \\<in> More_Modules.ideal polynomial_bool", "by (auto simp: ideal.span_zero)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       poly_of_vars (remdups_mset xs) - poly_of_vars xs\n       \\<in> More_Modules.ideal polynomial_bool \\<Longrightarrow>\n       poly_of_vars (remdups_mset (add_mset x xs)) -\n       poly_of_vars (add_mset x xs)\n       \\<in> More_Modules.ideal polynomial_bool", "subgoal for x xs"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_of_vars (remdups_mset xs) - poly_of_vars xs\n    \\<in> More_Modules.ideal polynomial_bool \\<Longrightarrow>\n    poly_of_vars (remdups_mset (add_mset x xs)) -\n    poly_of_vars (add_mset x xs)\n    \\<in> More_Modules.ideal polynomial_bool", "apply (cases \\<open>x \\<in># xs\\<close>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>poly_of_vars (remdups_mset xs) - poly_of_vars xs\n             \\<in> More_Modules.ideal polynomial_bool;\n     x \\<in># xs\\<rbrakk>\n    \\<Longrightarrow> poly_of_vars (remdups_mset (add_mset x xs)) -\n                      poly_of_vars (add_mset x xs)\n                      \\<in> More_Modules.ideal polynomial_bool\n 2. \\<lbrakk>poly_of_vars (remdups_mset xs) - poly_of_vars xs\n             \\<in> More_Modules.ideal polynomial_bool;\n     x \\<notin># xs\\<rbrakk>\n    \\<Longrightarrow> poly_of_vars (remdups_mset (add_mset x xs)) -\n                      poly_of_vars (add_mset x xs)\n                      \\<in> More_Modules.ideal polynomial_bool", "apply (metis (no_types, lifting) X2_X_polynomial_bool_mult_in diff_add_cancel diff_diff_eq2\n        ideal.span_diff insert_DiffM poly_of_vars_simps(1) remdups_mset_singleton_sum)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>poly_of_vars (remdups_mset xs) - poly_of_vars xs\n             \\<in> More_Modules.ideal polynomial_bool;\n     x \\<notin># xs\\<rbrakk>\n    \\<Longrightarrow> poly_of_vars (remdups_mset (add_mset x xs)) -\n                      poly_of_vars (add_mset x xs)\n                      \\<in> More_Modules.ideal polynomial_bool", "by (metis (no_types, lifting) ideal.span_scale poly_of_vars_simps(1) remdups_mset_singleton_sum\n        right_diff_distrib)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma polynomial_of_mset_mult_map:\n  \\<open>polynomial_of_mset\n     {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m). x \\<in># q#} -\n    Const m * (poly_of_vars xs * polynomial_of_mset q)\n    \\<in> More_Modules.ideal polynomial_bool\\<close>\n  (is \\<open>?P q \\<in> _\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. polynomial_of_mset\n     {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m)\n     . x \\<in># q#} -\n    Const m * (poly_of_vars xs * polynomial_of_mset q)\n    \\<in> More_Modules.ideal polynomial_bool", "proof (induction q)"], ["proof (state)\ngoal (2 subgoals):\n 1. polynomial_of_mset\n     {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m)\n     . x \\<in># {#}#} -\n    Const m * (poly_of_vars xs * polynomial_of_mset {#})\n    \\<in> More_Modules.ideal polynomial_bool\n 2. \\<And>x q.\n       polynomial_of_mset\n        {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m)\n        . x \\<in># q#} -\n       Const m * (poly_of_vars xs * polynomial_of_mset q)\n       \\<in> More_Modules.ideal polynomial_bool \\<Longrightarrow>\n       polynomial_of_mset\n        {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m)\n        . x \\<in># add_mset x q#} -\n       Const m * (poly_of_vars xs * polynomial_of_mset (add_mset x q))\n       \\<in> More_Modules.ideal polynomial_bool", "case empty"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. polynomial_of_mset\n     {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m)\n     . x \\<in># {#}#} -\n    Const m * (poly_of_vars xs * polynomial_of_mset {#})\n    \\<in> More_Modules.ideal polynomial_bool\n 2. \\<And>x q.\n       polynomial_of_mset\n        {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m)\n        . x \\<in># q#} -\n       Const m * (poly_of_vars xs * polynomial_of_mset q)\n       \\<in> More_Modules.ideal polynomial_bool \\<Longrightarrow>\n       polynomial_of_mset\n        {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m)\n        . x \\<in># add_mset x q#} -\n       Const m * (poly_of_vars xs * polynomial_of_mset (add_mset x q))\n       \\<in> More_Modules.ideal polynomial_bool", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. polynomial_of_mset\n     {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m)\n     . x \\<in># {#}#} -\n    Const m * (poly_of_vars xs * polynomial_of_mset {#})\n    \\<in> More_Modules.ideal polynomial_bool", "by (auto simp: algebra_simps ideal.span_zero)"], ["proof (state)\nthis:\n  polynomial_of_mset\n   {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m)\n   . x \\<in># {#}#} -\n  Const m * (poly_of_vars xs * polynomial_of_mset {#})\n  \\<in> More_Modules.ideal polynomial_bool\n\ngoal (1 subgoal):\n 1. \\<And>x q.\n       polynomial_of_mset\n        {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m)\n        . x \\<in># q#} -\n       Const m * (poly_of_vars xs * polynomial_of_mset q)\n       \\<in> More_Modules.ideal polynomial_bool \\<Longrightarrow>\n       polynomial_of_mset\n        {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m)\n        . x \\<in># add_mset x q#} -\n       Const m * (poly_of_vars xs * polynomial_of_mset (add_mset x q))\n       \\<in> More_Modules.ideal polynomial_bool", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x q.\n       polynomial_of_mset\n        {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m)\n        . x \\<in># q#} -\n       Const m * (poly_of_vars xs * polynomial_of_mset q)\n       \\<in> More_Modules.ideal polynomial_bool \\<Longrightarrow>\n       polynomial_of_mset\n        {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m)\n        . x \\<in># add_mset x q#} -\n       Const m * (poly_of_vars xs * polynomial_of_mset (add_mset x q))\n       \\<in> More_Modules.ideal polynomial_bool", "case (add x q)"], ["proof (state)\nthis:\n  polynomial_of_mset\n   {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m)\n   . x \\<in># q#} -\n  Const m * (poly_of_vars xs * polynomial_of_mset q)\n  \\<in> More_Modules.ideal polynomial_bool\n\ngoal (1 subgoal):\n 1. \\<And>x q.\n       polynomial_of_mset\n        {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m)\n        . x \\<in># q#} -\n       Const m * (poly_of_vars xs * polynomial_of_mset q)\n       \\<in> More_Modules.ideal polynomial_bool \\<Longrightarrow>\n       polynomial_of_mset\n        {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m)\n        . x \\<in># add_mset x q#} -\n       Const m * (poly_of_vars xs * polynomial_of_mset (add_mset x q))\n       \\<in> More_Modules.ideal polynomial_bool", "then"], ["proof (chain)\npicking this:\n  polynomial_of_mset\n   {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m)\n   . x \\<in># q#} -\n  Const m * (poly_of_vars xs * polynomial_of_mset q)\n  \\<in> More_Modules.ideal polynomial_bool", "have uP:  \\<open>-?P q \\<in> More_Modules.ideal polynomial_bool\\<close>"], ["proof (prove)\nusing this:\n  polynomial_of_mset\n   {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m)\n   . x \\<in># q#} -\n  Const m * (poly_of_vars xs * polynomial_of_mset q)\n  \\<in> More_Modules.ideal polynomial_bool\n\ngoal (1 subgoal):\n 1. - (polynomial_of_mset\n        {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m)\n        . x \\<in># q#} -\n       Const m * (poly_of_vars xs * polynomial_of_mset q))\n    \\<in> More_Modules.ideal polynomial_bool", "using ideal.span_neg"], ["proof (prove)\nusing this:\n  polynomial_of_mset\n   {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m)\n   . x \\<in># q#} -\n  Const m * (poly_of_vars xs * polynomial_of_mset q)\n  \\<in> More_Modules.ideal polynomial_bool\n  ?x \\<in> More_Modules.ideal ?S \\<Longrightarrow>\n  - ?x \\<in> More_Modules.ideal ?S\n\ngoal (1 subgoal):\n 1. - (polynomial_of_mset\n        {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m)\n        . x \\<in># q#} -\n       Const m * (poly_of_vars xs * polynomial_of_mset q))\n    \\<in> More_Modules.ideal polynomial_bool", "by blast"], ["proof (state)\nthis:\n  - (polynomial_of_mset\n      {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m)\n      . x \\<in># q#} -\n     Const m * (poly_of_vars xs * polynomial_of_mset q))\n  \\<in> More_Modules.ideal polynomial_bool\n\ngoal (1 subgoal):\n 1. \\<And>x q.\n       polynomial_of_mset\n        {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m)\n        . x \\<in># q#} -\n       Const m * (poly_of_vars xs * polynomial_of_mset q)\n       \\<in> More_Modules.ideal polynomial_bool \\<Longrightarrow>\n       polynomial_of_mset\n        {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m)\n        . x \\<in># add_mset x q#} -\n       Const m * (poly_of_vars xs * polynomial_of_mset (add_mset x q))\n       \\<in> More_Modules.ideal polynomial_bool", "have \\<open> Const b * (Const m * poly_of_vars (remdups_mset (a + xs))) -\n           Const b * (Const m * (poly_of_vars a * poly_of_vars xs))\n           \\<in> More_Modules.ideal polynomial_bool\\<close> for a b"], ["proof (prove)\ngoal (1 subgoal):\n 1. Const b * (Const m * poly_of_vars (remdups_mset (a + xs))) -\n    Const b * (Const m * (poly_of_vars a * poly_of_vars xs))\n    \\<in> More_Modules.ideal polynomial_bool", "by (auto simp: Const_mult simp flip: right_diff_distrib' poly_of_vars_simps\n        intro!: ideal.span_scale poly_of_vars_remdups_mset)"], ["proof (state)\nthis:\n  Const ?b2 * (Const m * poly_of_vars (remdups_mset (?a2 + xs))) -\n  Const ?b2 * (Const m * (poly_of_vars ?a2 * poly_of_vars xs))\n  \\<in> More_Modules.ideal polynomial_bool\n\ngoal (1 subgoal):\n 1. \\<And>x q.\n       polynomial_of_mset\n        {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m)\n        . x \\<in># q#} -\n       Const m * (poly_of_vars xs * polynomial_of_mset q)\n       \\<in> More_Modules.ideal polynomial_bool \\<Longrightarrow>\n       polynomial_of_mset\n        {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m)\n        . x \\<in># add_mset x q#} -\n       Const m * (poly_of_vars xs * polynomial_of_mset (add_mset x q))\n       \\<in> More_Modules.ideal polynomial_bool", "then"], ["proof (chain)\npicking this:\n  Const ?b2 * (Const m * poly_of_vars (remdups_mset (?a2 + xs))) -\n  Const ?b2 * (Const m * (poly_of_vars ?a2 * poly_of_vars xs))\n  \\<in> More_Modules.ideal polynomial_bool", "show ?case"], ["proof (prove)\nusing this:\n  Const ?b2 * (Const m * poly_of_vars (remdups_mset (?a2 + xs))) -\n  Const ?b2 * (Const m * (poly_of_vars ?a2 * poly_of_vars xs))\n  \\<in> More_Modules.ideal polynomial_bool\n\ngoal (1 subgoal):\n 1. polynomial_of_mset\n     {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m)\n     . x \\<in># add_mset x q#} -\n    Const m * (poly_of_vars xs * polynomial_of_mset (add_mset x q))\n    \\<in> More_Modules.ideal polynomial_bool", "apply (subst ideal.span_add_eq2[symmetric, OF uP])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b a.\n        Const b * (Const m * poly_of_vars (remdups_mset (a + xs))) -\n        Const b * (Const m * (poly_of_vars a * poly_of_vars xs))\n        \\<in> More_Modules.ideal polynomial_bool) \\<Longrightarrow>\n    polynomial_of_mset\n     {#(remdups_mset (ys + xs), n * m). (ys, n) \\<in># add_mset x q#} -\n    Const m * (poly_of_vars xs * polynomial_of_mset (add_mset x q)) +\n    - (polynomial_of_mset\n        {#(remdups_mset (ys + xs), n * m). (ys, n) \\<in># q#} -\n       Const m * (poly_of_vars xs * polynomial_of_mset q))\n    \\<in> More_Modules.ideal polynomial_bool", "apply (cases x)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>b a.\n                   Const b *\n                   (Const m * poly_of_vars (remdups_mset (a + xs))) -\n                   Const b * (Const m * (poly_of_vars a * poly_of_vars xs))\n                   \\<in> More_Modules.ideal polynomial_bool;\n        x = (a, b)\\<rbrakk>\n       \\<Longrightarrow> polynomial_of_mset\n                          {#(remdups_mset (ys + xs), n * m). (ys,\n                          n) \\<in># add_mset x q#} -\n                         Const m *\n                         (poly_of_vars xs *\n                          polynomial_of_mset (add_mset x q)) +\n                         - (polynomial_of_mset\n                             {#(remdups_mset (ys + xs), n * m). (ys,\n                             n) \\<in># q#} -\n                            Const m *\n                            (poly_of_vars xs * polynomial_of_mset q))\n                         \\<in> More_Modules.ideal polynomial_bool", "apply (auto simp: field_simps Const_mult  simp flip:\n        intro!: ideal.span_scale poly_of_vars_remdups_mset)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  polynomial_of_mset\n   {#case x of (ys, n) \\<Rightarrow> (remdups_mset (ys + xs), n * m)\n   . x \\<in># add_mset x q#} -\n  Const m * (poly_of_vars xs * polynomial_of_mset (add_mset x q))\n  \\<in> More_Modules.ideal polynomial_bool\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mult_poly_p_mult_ideal:\n  \\<open>mult_poly_p q (p, r) (p', r') \\<Longrightarrow>\n     (polynomial_of_mset p' * polynomial_of_mset q + polynomial_of_mset r') - (polynomial_of_mset p * polynomial_of_mset q + polynomial_of_mset r)\n       \\<in> ideal polynomial_bool\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. mult_poly_p q (p, r) (p', r') \\<Longrightarrow>\n    polynomial_of_mset p' * polynomial_of_mset q + polynomial_of_mset r' -\n    (polynomial_of_mset p * polynomial_of_mset q + polynomial_of_mset r)\n    \\<in> More_Modules.ideal polynomial_bool", "proof (induction rule: mult_poly_p_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs n p r.\n       polynomial_of_mset p * polynomial_of_mset q +\n       polynomial_of_mset\n        ({#(remdups_mset (xs + ys), n * m). (ys, m) \\<in># q#} + r) -\n       (polynomial_of_mset (add_mset (xs, n) p) * polynomial_of_mset q +\n        polynomial_of_mset r)\n       \\<in> More_Modules.ideal polynomial_bool", "case (mult_step xs n p r)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>xs n p r.\n       polynomial_of_mset p * polynomial_of_mset q +\n       polynomial_of_mset\n        ({#(remdups_mset (xs + ys), n * m). (ys, m) \\<in># q#} + r) -\n       (polynomial_of_mset (add_mset (xs, n) p) * polynomial_of_mset q +\n        polynomial_of_mset r)\n       \\<in> More_Modules.ideal polynomial_bool", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. polynomial_of_mset p * polynomial_of_mset q +\n    polynomial_of_mset\n     ({#(remdups_mset (xs + ys), n * m). (ys, m) \\<in># q#} + r) -\n    (polynomial_of_mset (add_mset (xs, n) p) * polynomial_of_mset q +\n     polynomial_of_mset r)\n    \\<in> More_Modules.ideal polynomial_bool", "by (auto simp: algebra_simps polynomial_of_mset_mult_map)"], ["proof (state)\nthis:\n  polynomial_of_mset p * polynomial_of_mset q +\n  polynomial_of_mset\n   ({#(remdups_mset (xs + ys), n * m). (ys, m) \\<in># q#} + r) -\n  (polynomial_of_mset (add_mset (xs, n) p) * polynomial_of_mset q +\n   polynomial_of_mset r)\n  \\<in> More_Modules.ideal polynomial_bool\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rtranclp_mult_poly_p_mult_ideal:\n  \\<open>(mult_poly_p q)\\<^sup>*\\<^sup>* (p, r) (p', r') \\<Longrightarrow>\n     (polynomial_of_mset p' * polynomial_of_mset q + polynomial_of_mset r') - (polynomial_of_mset p * polynomial_of_mset q + polynomial_of_mset r)\n       \\<in> ideal polynomial_bool\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (mult_poly_p q)\\<^sup>*\\<^sup>* (p, r) (p', r') \\<Longrightarrow>\n    polynomial_of_mset p' * polynomial_of_mset q + polynomial_of_mset r' -\n    (polynomial_of_mset p * polynomial_of_mset q + polynomial_of_mset r)\n    \\<in> More_Modules.ideal polynomial_bool", "apply (induction p' r' rule: rtranclp_induct[of \\<open>mult_poly_p q\\<close> \\<open>(p, r)\\<close> \\<open>(p', q')\\<close> for p' q', split_format(complete)])"], ["proof (prove)\ngoal (2 subgoals):\n 1. polynomial_of_mset p * polynomial_of_mset q + polynomial_of_mset r -\n    (polynomial_of_mset p * polynomial_of_mset q + polynomial_of_mset r)\n    \\<in> More_Modules.ideal polynomial_bool\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(mult_poly_p q)\\<^sup>*\\<^sup>* (p, r) (a, b);\n        mult_poly_p q (a, b) (aa, ba);\n        polynomial_of_mset a * polynomial_of_mset q + polynomial_of_mset b -\n        (polynomial_of_mset p * polynomial_of_mset q + polynomial_of_mset r)\n        \\<in> More_Modules.ideal polynomial_bool\\<rbrakk>\n       \\<Longrightarrow> polynomial_of_mset aa * polynomial_of_mset q +\n                         polynomial_of_mset ba -\n                         (polynomial_of_mset p * polynomial_of_mset q +\n                          polynomial_of_mset r)\n                         \\<in> More_Modules.ideal polynomial_bool", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. polynomial_of_mset p * polynomial_of_mset q + polynomial_of_mset r -\n    (polynomial_of_mset p * polynomial_of_mset q + polynomial_of_mset r)\n    \\<in> More_Modules.ideal polynomial_bool", "by (auto simp: ideal.span_zero)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(mult_poly_p q)\\<^sup>*\\<^sup>* (p, r) (a, b);\n        mult_poly_p q (a, b) (aa, ba);\n        polynomial_of_mset a * polynomial_of_mset q + polynomial_of_mset b -\n        (polynomial_of_mset p * polynomial_of_mset q + polynomial_of_mset r)\n        \\<in> More_Modules.ideal polynomial_bool\\<rbrakk>\n       \\<Longrightarrow> polynomial_of_mset aa * polynomial_of_mset q +\n                         polynomial_of_mset ba -\n                         (polynomial_of_mset p * polynomial_of_mset q +\n                          polynomial_of_mset r)\n                         \\<in> More_Modules.ideal polynomial_bool", "subgoal for a b aa ba"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(mult_poly_p q)\\<^sup>*\\<^sup>* (p, r) (a, b);\n     mult_poly_p q (a, b) (aa, ba);\n     polynomial_of_mset a * polynomial_of_mset q + polynomial_of_mset b -\n     (polynomial_of_mset p * polynomial_of_mset q + polynomial_of_mset r)\n     \\<in> More_Modules.ideal polynomial_bool\\<rbrakk>\n    \\<Longrightarrow> polynomial_of_mset aa * polynomial_of_mset q +\n                      polynomial_of_mset ba -\n                      (polynomial_of_mset p * polynomial_of_mset q +\n                       polynomial_of_mset r)\n                      \\<in> More_Modules.ideal polynomial_bool", "apply (drule mult_poly_p_mult_ideal)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(mult_poly_p q)\\<^sup>*\\<^sup>* (p, r) (a, b);\n     polynomial_of_mset a * polynomial_of_mset q + polynomial_of_mset b -\n     (polynomial_of_mset p * polynomial_of_mset q + polynomial_of_mset r)\n     \\<in> More_Modules.ideal polynomial_bool;\n     polynomial_of_mset aa * polynomial_of_mset q + polynomial_of_mset ba -\n     (polynomial_of_mset a * polynomial_of_mset q + polynomial_of_mset b)\n     \\<in> More_Modules.ideal polynomial_bool\\<rbrakk>\n    \\<Longrightarrow> polynomial_of_mset aa * polynomial_of_mset q +\n                      polynomial_of_mset ba -\n                      (polynomial_of_mset p * polynomial_of_mset q +\n                       polynomial_of_mset r)\n                      \\<in> More_Modules.ideal polynomial_bool", "apply (drule ideal.span_add)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(mult_poly_p q)\\<^sup>*\\<^sup>* (p, r) (a, b);\n     polynomial_of_mset aa * polynomial_of_mset q + polynomial_of_mset ba -\n     (polynomial_of_mset a * polynomial_of_mset q + polynomial_of_mset b)\n     \\<in> More_Modules.ideal polynomial_bool\\<rbrakk>\n    \\<Longrightarrow> ?y2 \\<in> More_Modules.ideal polynomial_bool\n 2. \\<lbrakk>(mult_poly_p q)\\<^sup>*\\<^sup>* (p, r) (a, b);\n     polynomial_of_mset aa * polynomial_of_mset q + polynomial_of_mset ba -\n     (polynomial_of_mset a * polynomial_of_mset q + polynomial_of_mset b)\n     \\<in> More_Modules.ideal polynomial_bool;\n     polynomial_of_mset a * polynomial_of_mset q + polynomial_of_mset b -\n     (polynomial_of_mset p * polynomial_of_mset q + polynomial_of_mset r) +\n     ?y2\n     \\<in> More_Modules.ideal polynomial_bool\\<rbrakk>\n    \\<Longrightarrow> polynomial_of_mset aa * polynomial_of_mset q +\n                      polynomial_of_mset ba -\n                      (polynomial_of_mset p * polynomial_of_mset q +\n                       polynomial_of_mset r)\n                      \\<in> More_Modules.ideal polynomial_bool", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(mult_poly_p q)\\<^sup>*\\<^sup>* (p, r) (a, b);\n     polynomial_of_mset aa * polynomial_of_mset q + polynomial_of_mset ba -\n     (polynomial_of_mset a * polynomial_of_mset q + polynomial_of_mset b)\n     \\<in> More_Modules.ideal polynomial_bool;\n     polynomial_of_mset a * polynomial_of_mset q + polynomial_of_mset b -\n     (polynomial_of_mset p * polynomial_of_mset q + polynomial_of_mset r) +\n     (polynomial_of_mset aa * polynomial_of_mset q + polynomial_of_mset ba -\n      (polynomial_of_mset a * polynomial_of_mset q + polynomial_of_mset b))\n     \\<in> More_Modules.ideal polynomial_bool\\<rbrakk>\n    \\<Longrightarrow> polynomial_of_mset aa * polynomial_of_mset q +\n                      polynomial_of_mset ba -\n                      (polynomial_of_mset p * polynomial_of_mset q +\n                       polynomial_of_mset r)\n                      \\<in> More_Modules.ideal polynomial_bool", "by (auto simp: group_add_class.diff_add_eq_diff_diff_swap\n        add.inverse_distrib_swap ac_simps add_diff_eq\n      simp flip:  diff_add_eq_diff_diff_swap)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rtranclp_mult_poly_p_mult_ideal_final:\n  \\<open>(mult_poly_p q)\\<^sup>*\\<^sup>* (p, {#}) ({#}, r) \\<Longrightarrow>\n    (polynomial_of_mset r) - (polynomial_of_mset p * polynomial_of_mset q)\n       \\<in> ideal polynomial_bool\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (mult_poly_p q)\\<^sup>*\\<^sup>* (p, {#}) ({#}, r) \\<Longrightarrow>\n    polynomial_of_mset r - polynomial_of_mset p * polynomial_of_mset q\n    \\<in> More_Modules.ideal polynomial_bool", "by (drule rtranclp_mult_poly_p_mult_ideal) auto"], ["", "lemma normalize_poly_p_poly_of_mset:\n  \\<open>normalize_poly_p p q \\<Longrightarrow> polynomial_of_mset p = polynomial_of_mset q\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. normalize_poly_p p q \\<Longrightarrow>\n    polynomial_of_mset p = polynomial_of_mset q", "apply (induction rule: normalize_poly_p.induct)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>p q xs.\n       \\<lbrakk>normalize_poly_p p q;\n        polynomial_of_mset p = polynomial_of_mset q\\<rbrakk>\n       \\<Longrightarrow> polynomial_of_mset (add_mset (xs, 0) p) =\n                         polynomial_of_mset q\n 2. \\<And>p q xs m n.\n       \\<lbrakk>normalize_poly_p p q;\n        polynomial_of_mset p = polynomial_of_mset q\\<rbrakk>\n       \\<Longrightarrow> polynomial_of_mset\n                          (add_mset (xs, m) (add_mset (xs, n) p)) =\n                         polynomial_of_mset (add_mset (xs, m + n) q)\n 3. \\<And>p. polynomial_of_mset p = polynomial_of_mset p\n 4. \\<And>p q x.\n       \\<lbrakk>normalize_poly_p p q;\n        polynomial_of_mset p = polynomial_of_mset q\\<rbrakk>\n       \\<Longrightarrow> polynomial_of_mset (add_mset x p) =\n                         polynomial_of_mset (add_mset x q)", "apply (auto simp: Const_add algebra_simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rtranclp_normalize_poly_p_poly_of_mset:\n  \\<open>normalize_poly_p\\<^sup>*\\<^sup>* p q \\<Longrightarrow> polynomial_of_mset p = polynomial_of_mset q\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. normalize_poly_p\\<^sup>*\\<^sup>* p q \\<Longrightarrow>\n    polynomial_of_mset p = polynomial_of_mset q", "by (induction rule: rtranclp_induct)\n    (auto simp: normalize_poly_p_poly_of_mset)"], ["", "end"], ["", "text \\<open>It would be nice to have the property in the other direction too, but this requires a deep\ndive into the definitions of polynomials.\\<close>"], ["", "locale poly_embed_bij = poly_embed +\n  fixes V N\n  assumes \\<phi>_bij: \\<open>bij_betw \\<phi> V N\\<close>\nbegin"], ["", "definition \\<phi>' :: \\<open>nat \\<Rightarrow> string\\<close> where\n  \\<open>\\<phi>' = the_inv_into V \\<phi>\\<close>"], ["", "lemma \\<phi>'_\\<phi>[simp]:\n  \\<open>x \\<in> V \\<Longrightarrow> \\<phi>' (\\<phi> x) = x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> V \\<Longrightarrow> \\<phi>' (\\<phi> x) = x", "using \\<phi>_bij"], ["proof (prove)\nusing this:\n  bij_betw \\<phi> V N\n\ngoal (1 subgoal):\n 1. x \\<in> V \\<Longrightarrow> \\<phi>' (\\<phi> x) = x", "unfolding \\<phi>'_def"], ["proof (prove)\nusing this:\n  bij_betw \\<phi> V N\n\ngoal (1 subgoal):\n 1. x \\<in> V \\<Longrightarrow> the_inv_into V \\<phi> (\\<phi> x) = x", "by (meson bij_betw_imp_inj_on the_inv_into_f_f)"], ["", "lemma \\<phi>_\\<phi>'[simp]:\n  \\<open>x \\<in> N \\<Longrightarrow> \\<phi> (\\<phi>' x) = x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> N \\<Longrightarrow> \\<phi> (\\<phi>' x) = x", "using \\<phi>_bij"], ["proof (prove)\nusing this:\n  bij_betw \\<phi> V N\n\ngoal (1 subgoal):\n 1. x \\<in> N \\<Longrightarrow> \\<phi> (\\<phi>' x) = x", "unfolding \\<phi>'_def"], ["proof (prove)\nusing this:\n  bij_betw \\<phi> V N\n\ngoal (1 subgoal):\n 1. x \\<in> N \\<Longrightarrow> \\<phi> (the_inv_into V \\<phi> x) = x", "by (meson f_the_inv_into_f_bij_betw)"], ["", "end"], ["", "end"]]}