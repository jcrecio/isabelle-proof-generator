{"file_name": "/home/qj213/afp-2021-10-22/thys/PCF/Continuations.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/PCF", "problem_names": ["lemma ValK_case_ID [simp]:\n  \"ValK_case\\<cdot>ValKF\\<cdot>ValKTT\\<cdot>ValKFF\\<cdot>ValKN = ID\"", "lemma below_monic_ValKF [iff]:\n  \"below_monic_cfun ValKF\"", "lemma below_monic_ValKN [iff]:\n  \"below_monic_cfun ValKN\"", "lemma unitK_simps [simp]:\n  \"unitK\\<cdot>v\\<cdot>c = c\\<cdot>v\"", "lemma bindK_strict:\n  \"bindK\\<cdot>\\<bottom> = \\<bottom>\"", "lemma bindK_unitl:\n  \"bindK\\<cdot>(unitK\\<cdot>e)\\<cdot>f = f\\<cdot>e\"", "lemma bindK_unitr:\n  \"bindK\\<cdot>e\\<cdot>unitK = e\"", "lemma bindK_assoc:\n  \"bindK\\<cdot>(bindK\\<cdot>f\\<cdot>g)\\<cdot>h = bindK\\<cdot>f\\<cdot>(\\<Lambda> v. bindK\\<cdot>(g\\<cdot>v)\\<cdot>h)\"", "lemmas bindK_simps[simp] = bindK_strict bindK_unitl bindK_unitr bindK_assoc", "lemma cont_below [simp, cont2cont]:\n  \"cont (\\<lambda>x::'a::pcpo. if x \\<sqsubseteq> d then \\<bottom> else c)\"", "lemma (in at_least_two_elements) below_monic_unitK [intro, simp]:\n  \"below_monic_cfun (unitK :: 'o ValK \\<rightarrow> 'o ValKM)\"", "lemma admS_eta_rep [intro, simp]:\n  \"fst (lr_rep r) \\<in> admS\"", "lemma admS_theta_rep [intro, simp]:\n  \"snd (lr_rep r) \\<in> admS\"", "lemma mono_lr:\n  shows \"mono (lr :: 'o lflf)\"", "lemma ValD_copy_chain [intro, simp]:\n  \"chain ValD_copy_i\"", "lemma ValD_copy_lub_ID:\n  \"ValD_copy_lub = ID\"", "lemma KM_map_id [intro, simp]:\n  \"KM_map\\<cdot>ID = ID\"", "lemma KM_map_strict [intro, simp]:\n  \"KM_map\\<cdot>f\\<cdot>\\<bottom> = \\<bottom>\"", "lemma ValK_copy_chain [intro, simp]:\n  \"chain (ValK_copy_i :: nat \\<Rightarrow> 'o ValK \\<rightarrow> 'o ValK)\"", "lemma ValK_copy_fix:\n  \"ValK_copy = (ID :: 'o ValK \\<rightarrow> 'o ValK)\"", "lemma ValK_strict [intro, simp]:\n  \"ValK_copy\\<cdot>\\<bottom> = \\<bottom>\"", "lemma ValD_copy_eta_theta_strict [intro, simp]:\n  \"ValD_copy_eta n\\<cdot>\\<bottom> = \\<bottom>\"\n  \"ValD_copy_theta n\\<cdot>\\<bottom> = \\<bottom>\"", "lemma ValD_copy_fix_strict [simp]:\n  \"fst (fix\\<cdot>ValD_copy_rec)\\<cdot>\\<bottom> = \\<bottom>\"\n  \"snd (fix\\<cdot>ValD_copy_rec)\\<cdot>\\<bottom> = \\<bottom>\"", "lemma ValD_copy_rec_ValD_copy_lub:\n  \"fix\\<cdot>ValD_copy_rec = (ValD_copy_lub, cfun_map\\<cdot>ValD_copy_lub\\<cdot>ValD_copy_lub)\" (is \"?lhs = ?rhs\")", "lemma fix_ValD_copy_rec_ID:\n  \"fix\\<cdot>ValD_copy_rec = (ID, ID)\"", "lemma ValK_copy_strict [intro, simp]:\n  \"ValK_copy_eta n\\<cdot>\\<bottom> = (\\<bottom> :: 'o ValKM)\"\n  \"ValK_copy_theta n\\<cdot>\\<bottom> = (\\<bottom> :: 'o ValKM \\<rightarrow> 'o ValKM)\"", "lemma ValK_copy_fix_strict [simp]:\n  \"fst (fix\\<cdot>ValK_copy_rec)\\<cdot>\\<bottom> = \\<bottom>\"\n  \"snd (fix\\<cdot>ValK_copy_rec)\\<cdot>\\<bottom> = \\<bottom>\"", "lemma ValK_copy_rec_ValK_copy:\n  \"fix\\<cdot>ValK_copy_rec\n  = (KM_map\\<cdot>(ValK_copy :: 'o ValK \\<rightarrow> 'o ValK),\n     cfun_map\\<cdot>(KM_map\\<cdot>ValK_copy)\\<cdot>(KM_map\\<cdot>ValK_copy))\" (is \"?lhs = ?rhs\")", "lemma fix_ValK_copy_rec_ID:\n  \"fix\\<cdot>ValK_copy_rec = (ID, ID)\"", "lemma (in at_least_two_elements) min_inv_lr:\n  assumes \"fst ea\\<cdot>\\<bottom> = \\<bottom>\"\n  assumes \"fst eb\\<cdot>\\<bottom> = \\<bottom>\"\n  assumes \"eRSP ea eb R S\"\n  shows \"eRSP (ValD_copy_rec\\<cdot>ea) (ValK_copy_rec\\<cdot>eb) (dual ((lr :: 'o lflf) (dual S, undual R))) (lr (R, S))\"", "lemma F_bottom_triv [intro, simp]:\n  \"\\<eta>: \\<bottom> \\<mapsto> \\<bottom>\"\n  \"\\<theta>: \\<bottom> \\<mapsto> \\<bottom>\"", "lemma etaI [intro, simp]:\n  \"\\<eta>: ValTT \\<mapsto> unitK\\<cdot>ValKTT\"\n  \"\\<eta>: ValFF \\<mapsto> unitK\\<cdot>ValKFF\"\n  \"\\<eta>: ValN\\<cdot>n \\<mapsto> unitK\\<cdot>(ValKN\\<cdot>n)\"", "lemma eta_F:\n  \"\\<theta>: f \\<mapsto> f' \\<Longrightarrow> \\<eta>: ValF\\<cdot>f \\<mapsto> unitK\\<cdot>(ValKF\\<cdot>f')\"", "lemma theta_F:\n  \"(\\<And>x x'. \\<eta>: x \\<mapsto> x' \\<Longrightarrow> \\<eta>: f\\<cdot>x \\<mapsto> f'\\<cdot>x') \\<Longrightarrow> \\<theta>: f \\<mapsto> f'\"", "lemma eta_induct[case_names bottom N F, consumes 1]:\n  \"\\<lbrakk> \\<eta>: x \\<mapsto> x';\n     \\<lbrakk> x = \\<bottom>; x' = \\<bottom> \\<rbrakk> \\<Longrightarrow> P x x';\n     \\<And>n. \\<lbrakk> x = ValTT; x' = unitK\\<cdot>ValKTT \\<rbrakk> \\<Longrightarrow> P x x';\n     \\<And>n. \\<lbrakk> x = ValFF; x' = unitK\\<cdot>ValKFF \\<rbrakk> \\<Longrightarrow> P x x';\n     \\<And>n. \\<lbrakk> x = ValN\\<cdot>n; x' = unitK\\<cdot>(ValKN\\<cdot>n) \\<rbrakk> \\<Longrightarrow> P x x';\n     \\<And>f f'. \\<lbrakk> x = ValF\\<cdot>f; x' = unitK\\<cdot>(ValKF\\<cdot>f'); \\<theta>: f \\<mapsto> f' \\<rbrakk> \\<Longrightarrow> P x x'\n   \\<rbrakk> \\<Longrightarrow> P x x'\"", "lemma theta_induct[case_names F, consumes 1]:\n  \"\\<lbrakk> \\<theta>: f \\<mapsto> f';\n     (\\<And>x x'. \\<eta>: x \\<mapsto> x' \\<Longrightarrow> \\<eta>: f\\<cdot>x \\<mapsto> f'\\<cdot>x') \\<Longrightarrow> P f f'\n   \\<rbrakk> \\<Longrightarrow> P f f'\"", "lemma AbsV_aux:\n  assumes \"\\<eta>: ValF\\<cdot>f \\<mapsto> unitK\\<cdot>(ValKF\\<cdot>f')\"\n  shows \"\\<eta>: ValF\\<cdot>(strictify\\<cdot>f) \\<mapsto> unitK\\<cdot>(ValKF\\<cdot>(\\<Lambda> x c. x\\<cdot>(\\<Lambda> x'. f'\\<cdot>(unitK\\<cdot>x')\\<cdot>c)))\"", "theorem Theorem1:\n  assumes \"\\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\"\n  shows \"\\<eta>: evalD e\\<cdot>\\<rho> \\<mapsto> evalK e\\<cdot>\\<rho>'\"", "lemma DtoKM_KMtoD_chain [intro, simp]:\n  \"chain DtoKM_i\"\n  \"chain KMtoD_i\"", "lemma Lemma1:\n  \"\\<eta>: x \\<mapsto> DtoKM\\<cdot>x\"\n  \"\\<eta>: x \\<mapsto> x' \\<Longrightarrow> x = KMtoD\\<cdot>x'\"", "theorem Theorem2: \"evalD e\\<cdot>\\<rho> = KMtoD\\<cdot>(evalK e\\<cdot>(DtoKM oo \\<rho>))\""], "translations": [["", "lemma ValK_case_ID [simp]:\n  \"ValK_case\\<cdot>ValKF\\<cdot>ValKTT\\<cdot>ValKFF\\<cdot>ValKN = ID\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ValK_case\\<cdot>ValKF\\<cdot>ValKTT\\<cdot>ValKFF\\<cdot>ValKN = ID", "apply (rule cfun_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       ValK_case\\<cdot>ValKF\\<cdot>ValKTT\\<cdot>ValKFF\\<cdot>ValKN\\<cdot>x =\n       ID\\<cdot>x", "apply (case_tac x)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x.\n       x = \\<bottom> \\<Longrightarrow>\n       ValK_case\\<cdot>ValKF\\<cdot>ValKTT\\<cdot>ValKFF\\<cdot>ValKN\\<cdot>x =\n       ID\\<cdot>x\n 2. \\<And>x cfun.\n       x = ValKF\\<cdot>cfun \\<Longrightarrow>\n       ValK_case\\<cdot>ValKF\\<cdot>ValKTT\\<cdot>ValKFF\\<cdot>ValKN\\<cdot>x =\n       ID\\<cdot>x\n 3. \\<And>x.\n       x = ValKTT \\<Longrightarrow>\n       ValK_case\\<cdot>ValKF\\<cdot>ValKTT\\<cdot>ValKFF\\<cdot>ValKN\\<cdot>x =\n       ID\\<cdot>x\n 4. \\<And>x.\n       x = ValKFF \\<Longrightarrow>\n       ValK_case\\<cdot>ValKF\\<cdot>ValKTT\\<cdot>ValKFF\\<cdot>ValKN\\<cdot>x =\n       ID\\<cdot>x\n 5. \\<And>x nat.\n       x = ValKN\\<cdot>nat \\<Longrightarrow>\n       ValK_case\\<cdot>ValKF\\<cdot>ValKTT\\<cdot>ValKFF\\<cdot>ValKN\\<cdot>x =\n       ID\\<cdot>x", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma below_monic_ValKF [iff]:\n  \"below_monic_cfun ValKF\""], ["proof (prove)\ngoal (1 subgoal):\n 1. below_monic_cfun ValKF", "by (rule below_monicI) simp"], ["", "lemma below_monic_ValKN [iff]:\n  \"below_monic_cfun ValKN\""], ["proof (prove)\ngoal (1 subgoal):\n 1. below_monic_cfun ValKN", "by (rule below_monicI) simp"], ["", "(*>*)"], ["", "text\\<open>\n\nWe use the standard continuation monad to ease the semantic\ndefinition.\n\n\\<close>"], ["", "definition unitK :: \"'o ValK \\<rightarrow> 'o ValKM\" where\n  \"unitK \\<equiv> \\<Lambda> a. \\<Lambda> c. c\\<cdot>a\""], ["", "definition bindK :: \"'o ValKM \\<rightarrow> ('o ValK \\<rightarrow> 'o ValKM) \\<rightarrow> 'o ValKM\" where\n  \"bindK \\<equiv> \\<Lambda> m k. \\<Lambda> c. m\\<cdot>(\\<Lambda> a. k\\<cdot>a\\<cdot>c)\""], ["", "definition appKM :: \"'o ValKM \\<rightarrow> 'o ValKM \\<rightarrow> 'o ValKM\" where\n  \"appKM \\<equiv> \\<Lambda> fK xK. bindK\\<cdot>fK\\<cdot>(\\<Lambda> (ValKF\\<cdot>f). f\\<cdot>xK)\""], ["", "(*<*)"], ["", "lemma unitK_simps [simp]:\n  \"unitK\\<cdot>v\\<cdot>c = c\\<cdot>v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unitK\\<cdot>v\\<cdot>c = c\\<cdot>v", "unfolding unitK_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> a c. c\\<cdot>a)\\<cdot>v\\<cdot>c = c\\<cdot>v", "by simp"], ["", "lemma bindK_strict:\n  \"bindK\\<cdot>\\<bottom> = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bindK\\<cdot>\\<bottom> = \\<bottom>", "unfolding bindK_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> m k c. m\\<cdot>(\\<Lambda> a. k\\<cdot>a\\<cdot>c))\\<cdot>\n    \\<bottom> =\n    \\<bottom>", "by (simp add: eta_cfun)"], ["", "lemma bindK_unitl:\n  \"bindK\\<cdot>(unitK\\<cdot>e)\\<cdot>f = f\\<cdot>e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bindK\\<cdot>(unitK\\<cdot>e)\\<cdot>f = f\\<cdot>e", "unfolding bindK_def unitK_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> m k c. m\\<cdot>(\\<Lambda> a. k\\<cdot>a\\<cdot>c))\\<cdot>\n    ((\\<Lambda> a c. c\\<cdot>a)\\<cdot>e)\\<cdot>\n    f =\n    f\\<cdot>e", "by (simp add: eta_cfun)"], ["", "lemma bindK_unitr:\n  \"bindK\\<cdot>e\\<cdot>unitK = e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bindK\\<cdot>e\\<cdot>unitK = e", "unfolding bindK_def unitK_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> m k c. m\\<cdot>(\\<Lambda> a. k\\<cdot>a\\<cdot>c))\\<cdot>\n    e\\<cdot>\n    (\\<Lambda> a c. c\\<cdot>a) =\n    e", "by (simp add: eta_cfun)"], ["", "lemma bindK_assoc:\n  \"bindK\\<cdot>(bindK\\<cdot>f\\<cdot>g)\\<cdot>h = bindK\\<cdot>f\\<cdot>(\\<Lambda> v. bindK\\<cdot>(g\\<cdot>v)\\<cdot>h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bindK\\<cdot>(bindK\\<cdot>f\\<cdot>g)\\<cdot>h =\n    bindK\\<cdot>f\\<cdot>(\\<Lambda> v. bindK\\<cdot>(g\\<cdot>v)\\<cdot>h)", "unfolding bindK_def unitK_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> m k c. m\\<cdot>(\\<Lambda> a. k\\<cdot>a\\<cdot>c))\\<cdot>\n    ((\\<Lambda> m k c. m\\<cdot>(\\<Lambda> a. k\\<cdot>a\\<cdot>c))\\<cdot>\n     f\\<cdot>\n     g)\\<cdot>\n    h =\n    (\\<Lambda> m k c. m\\<cdot>(\\<Lambda> a. k\\<cdot>a\\<cdot>c))\\<cdot>\n    f\\<cdot>\n    (\\<Lambda> v.\n        (\\<Lambda> m k c. m\\<cdot>(\\<Lambda> a. k\\<cdot>a\\<cdot>c))\\<cdot>\n        (g\\<cdot>v)\\<cdot>\n        h)", "by simp"], ["", "lemmas bindK_simps[simp] = bindK_strict bindK_unitl bindK_unitr bindK_assoc"], ["", "(*>*)"], ["", "text\\<open>The interpretations of the constants.\\<close>"], ["", "definition\n  condK :: \"'o ValKM \\<rightarrow> 'o ValKM \\<rightarrow> 'o ValKM \\<rightarrow> 'o ValKM\"\nwhere\n  \"condK \\<equiv> \\<Lambda> iK tK eK. bindK\\<cdot>iK\\<cdot>(\\<Lambda> i. case i of\n                ValKF\\<cdot>f \\<Rightarrow> \\<bottom> | ValKTT \\<Rightarrow> tK | ValKFF \\<Rightarrow> eK | ValKN\\<cdot>n \\<Rightarrow> \\<bottom>)\""], ["", "definition succK :: \"'o ValKM \\<rightarrow> 'o ValKM\" where\n  \"succK \\<equiv> \\<Lambda> nK. bindK\\<cdot>nK\\<cdot>(\\<Lambda> (ValKN\\<cdot>n). unitK\\<cdot>(ValKN\\<cdot>(n + 1)))\""], ["", "definition predK :: \"'o ValKM \\<rightarrow> 'o ValKM\" where\n  \"predK \\<equiv> \\<Lambda> nK. bindK\\<cdot>nK\\<cdot>(\\<Lambda> (ValKN\\<cdot>n). case n of 0 \\<Rightarrow> \\<bottom> | Suc n \\<Rightarrow> unitK\\<cdot>(ValKN\\<cdot>n))\""], ["", "definition isZeroK :: \"'o ValKM \\<rightarrow> 'o ValKM\" where\n  \"isZeroK \\<equiv> \\<Lambda> nK. bindK\\<cdot>nK\\<cdot>(\\<Lambda> (ValKN\\<cdot>n). unitK\\<cdot>(if n = 0 then ValKTT else ValKFF))\""], ["", "text \\<open>\n\nA continuation semantics for PCF. If we had defined our direct\nsemantics using a monad then the correspondence would be more\nsyntactically obvious.\n\n\\<close>"], ["", "type_synonym 'o EnvK = \"'o ValKM Env\""], ["", "primrec\n  evalK :: \"expr \\<Rightarrow> 'o EnvK \\<rightarrow> 'o ValKM\"\nwhere\n  \"evalK (Var v) = (\\<Lambda> \\<rho>. \\<rho>\\<cdot>v)\"\n| \"evalK (App f x) = (\\<Lambda> \\<rho>. appKM\\<cdot>(evalK f\\<cdot>\\<rho>)\\<cdot>(evalK x\\<cdot>\\<rho>))\"\n| \"evalK (AbsN v e) = (\\<Lambda> \\<rho>. unitK\\<cdot>(ValKF\\<cdot>(\\<Lambda> x. evalK e\\<cdot>(env_ext\\<cdot>v\\<cdot>x\\<cdot>\\<rho>))))\"\n| \"evalK (AbsV v e) = (\\<Lambda> \\<rho>. unitK\\<cdot>(ValKF\\<cdot>(\\<Lambda> x c. x\\<cdot>(\\<Lambda> x'. evalK e\\<cdot>(env_ext\\<cdot>v\\<cdot>(unitK\\<cdot>x')\\<cdot>\\<rho>)\\<cdot>c))))\"\n| \"evalK (Diverge) = (\\<Lambda> \\<rho>. \\<bottom>)\"\n| \"evalK (Fix v e) = (\\<Lambda> \\<rho>. \\<mu> x. evalK e\\<cdot>(env_ext\\<cdot>v\\<cdot>x\\<cdot>\\<rho>))\"\n| \"evalK (tt) = (\\<Lambda> \\<rho>. unitK\\<cdot>ValKTT)\"\n| \"evalK (ff) = (\\<Lambda> \\<rho>. unitK\\<cdot>ValKFF)\"\n| \"evalK (Cond i t e) = (\\<Lambda> \\<rho>. condK\\<cdot>(evalK i\\<cdot>\\<rho>)\\<cdot>(evalK t\\<cdot>\\<rho>)\\<cdot>(evalK e\\<cdot>\\<rho>))\"\n| \"evalK (Num n) = (\\<Lambda> \\<rho>. unitK\\<cdot>(ValKN\\<cdot>n))\"\n| \"evalK (Succ e) = (\\<Lambda> \\<rho>. succK\\<cdot>(evalK e\\<cdot>\\<rho>))\"\n| \"evalK (Pred e) = (\\<Lambda> \\<rho>. predK\\<cdot>(evalK e\\<cdot>\\<rho>))\"\n| \"evalK (IsZero e) = (\\<Lambda> \\<rho>. isZeroK\\<cdot>(evalK e\\<cdot>\\<rho>))\""], ["", "text\\<open>\n\nTo establish the chain completeness (admissibility) of our logical\nrelation, we need to show that @{term \"unitK\"} is an \\emph{order\nmonic}, i.e., if @{term \"unitK\\<cdot>x \\<sqsubseteq> unitK\\<cdot>y\"} then @{term \"x \\<sqsubseteq>\ny\"}. This is an order-theoretic version of injectivity.\n\nIn order to define a continuation that witnesses this, we need to be\nable to distinguish converging and diverging computations. We\ntherefore require our observation domain to contain at least two\nelements:\n\n\\<close>"], ["", "locale at_least_two_elements =\n  fixes some_non_bottom_element :: \"'o::domain\"\n  assumes some_non_bottom_element: \"some_non_bottom_element \\<noteq> \\<bottom>\""], ["", "text\\<open>\n\nFollowing \\citet{DBLP:conf/icalp/Reynolds74} and \\citet[Remark\n47]{DBLP:journals/tcs/Filinski07} we use the following continuation:\n\n\\<close>"], ["", "lemma cont_below [simp, cont2cont]:\n  \"cont (\\<lambda>x::'a::pcpo. if x \\<sqsubseteq> d then \\<bottom> else c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cont (\\<lambda>x. if x \\<sqsubseteq> d then \\<bottom> else c)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. cont (\\<lambda>x. if x \\<sqsubseteq> d then \\<bottom> else c)", "proof(rule contI2)"], ["proof (state)\ngoal (2 subgoals):\n 1. monofun (\\<lambda>x. if x \\<sqsubseteq> d then \\<bottom> else c)\n 2. \\<And>Y.\n       \\<lbrakk>chain Y;\n        chain\n         (\\<lambda>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)\\<rbrakk>\n       \\<Longrightarrow> (if (\\<Squnion>i. Y i) \\<sqsubseteq> d\n                          then \\<bottom> else c) \\<sqsubseteq>\n                         (\\<Squnion>i.\n                             if Y i \\<sqsubseteq> d then \\<bottom> else c)", "show \"monofun (\\<lambda>x. if x \\<sqsubseteq> d then \\<bottom> else c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monofun (\\<lambda>x. if x \\<sqsubseteq> d then \\<bottom> else c)", "apply (rule monofunI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       x \\<sqsubseteq> y \\<Longrightarrow>\n       (if x \\<sqsubseteq> d then \\<bottom> else c) \\<sqsubseteq>\n       (if y \\<sqsubseteq> d then \\<bottom> else c)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<sqsubseteq> y; x \\<notsqsubseteq> d;\n        y \\<sqsubseteq> d\\<rbrakk>\n       \\<Longrightarrow> c = \\<bottom>", "apply (cut_tac x=x and y=y and z=d in below_trans)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<sqsubseteq> y; x \\<notsqsubseteq> d;\n        y \\<sqsubseteq> d\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> y\n 2. \\<And>x y.\n       \\<lbrakk>x \\<sqsubseteq> y; x \\<notsqsubseteq> d;\n        y \\<sqsubseteq> d\\<rbrakk>\n       \\<Longrightarrow> y \\<sqsubseteq> d\n 3. \\<And>x y.\n       \\<lbrakk>x \\<sqsubseteq> y; x \\<notsqsubseteq> d; y \\<sqsubseteq> d;\n        x \\<sqsubseteq> d\\<rbrakk>\n       \\<Longrightarrow> c = \\<bottom>", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  monofun (\\<lambda>x. if x \\<sqsubseteq> d then \\<bottom> else c)\n\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>chain Y;\n        chain\n         (\\<lambda>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)\\<rbrakk>\n       \\<Longrightarrow> (if (\\<Squnion>i. Y i) \\<sqsubseteq> d\n                          then \\<bottom> else c) \\<sqsubseteq>\n                         (\\<Squnion>i.\n                             if Y i \\<sqsubseteq> d then \\<bottom> else c)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>chain Y;\n        chain\n         (\\<lambda>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)\\<rbrakk>\n       \\<Longrightarrow> (if (\\<Squnion>i. Y i) \\<sqsubseteq> d\n                          then \\<bottom> else c) \\<sqsubseteq>\n                         (\\<Squnion>i.\n                             if Y i \\<sqsubseteq> d then \\<bottom> else c)", "fix Y :: \"nat \\<Rightarrow> 'a::pcpo\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>chain Y;\n        chain\n         (\\<lambda>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)\\<rbrakk>\n       \\<Longrightarrow> (if (\\<Squnion>i. Y i) \\<sqsubseteq> d\n                          then \\<bottom> else c) \\<sqsubseteq>\n                         (\\<Squnion>i.\n                             if Y i \\<sqsubseteq> d then \\<bottom> else c)", "assume Y: \"chain Y\""], ["proof (state)\nthis:\n  chain Y\n\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>chain Y;\n        chain\n         (\\<lambda>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)\\<rbrakk>\n       \\<Longrightarrow> (if (\\<Squnion>i. Y i) \\<sqsubseteq> d\n                          then \\<bottom> else c) \\<sqsubseteq>\n                         (\\<Squnion>i.\n                             if Y i \\<sqsubseteq> d then \\<bottom> else c)", "assume \"chain (\\<lambda>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)\""], ["proof (state)\nthis:\n  chain (\\<lambda>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)\n\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>chain Y;\n        chain\n         (\\<lambda>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)\\<rbrakk>\n       \\<Longrightarrow> (if (\\<Squnion>i. Y i) \\<sqsubseteq> d\n                          then \\<bottom> else c) \\<sqsubseteq>\n                         (\\<Squnion>i.\n                             if Y i \\<sqsubseteq> d then \\<bottom> else c)", "show \"(if (\\<Squnion> i. Y i) \\<sqsubseteq> d then \\<bottom> else c) \\<sqsubseteq> (\\<Squnion> i. if Y i \\<sqsubseteq> d then \\<bottom> else c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if (\\<Squnion>i. Y i) \\<sqsubseteq> d then \\<bottom>\n     else c) \\<sqsubseteq>\n    (\\<Squnion>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)", "proof(cases \"\\<forall>i. Y i \\<sqsubseteq> d\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>i. Y i \\<sqsubseteq> d \\<Longrightarrow>\n    (if (\\<Squnion>i. Y i) \\<sqsubseteq> d then \\<bottom>\n     else c) \\<sqsubseteq>\n    (\\<Squnion>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)\n 2. \\<not> (\\<forall>i. Y i \\<sqsubseteq> d) \\<Longrightarrow>\n    (if (\\<Squnion>i. Y i) \\<sqsubseteq> d then \\<bottom>\n     else c) \\<sqsubseteq>\n    (\\<Squnion>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)", "case True"], ["proof (state)\nthis:\n  \\<forall>i. Y i \\<sqsubseteq> d\n\ngoal (2 subgoals):\n 1. \\<forall>i. Y i \\<sqsubseteq> d \\<Longrightarrow>\n    (if (\\<Squnion>i. Y i) \\<sqsubseteq> d then \\<bottom>\n     else c) \\<sqsubseteq>\n    (\\<Squnion>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)\n 2. \\<not> (\\<forall>i. Y i \\<sqsubseteq> d) \\<Longrightarrow>\n    (if (\\<Squnion>i. Y i) \\<sqsubseteq> d then \\<bottom>\n     else c) \\<sqsubseteq>\n    (\\<Squnion>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)", "hence \"Lub Y \\<sqsubseteq> d\""], ["proof (prove)\nusing this:\n  \\<forall>i. Y i \\<sqsubseteq> d\n\ngoal (1 subgoal):\n 1. Lub Y \\<sqsubseteq> d", "using lub_below_iff[OF Y]"], ["proof (prove)\nusing this:\n  \\<forall>i. Y i \\<sqsubseteq> d\n  ((\\<Squnion>i. Y i) \\<sqsubseteq> ?x) = (\\<forall>i. Y i \\<sqsubseteq> ?x)\n\ngoal (1 subgoal):\n 1. Lub Y \\<sqsubseteq> d", "by simp"], ["proof (state)\nthis:\n  Lub Y \\<sqsubseteq> d\n\ngoal (2 subgoals):\n 1. \\<forall>i. Y i \\<sqsubseteq> d \\<Longrightarrow>\n    (if (\\<Squnion>i. Y i) \\<sqsubseteq> d then \\<bottom>\n     else c) \\<sqsubseteq>\n    (\\<Squnion>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)\n 2. \\<not> (\\<forall>i. Y i \\<sqsubseteq> d) \\<Longrightarrow>\n    (if (\\<Squnion>i. Y i) \\<sqsubseteq> d then \\<bottom>\n     else c) \\<sqsubseteq>\n    (\\<Squnion>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)", "thus ?thesis"], ["proof (prove)\nusing this:\n  Lub Y \\<sqsubseteq> d\n\ngoal (1 subgoal):\n 1. (if (\\<Squnion>i. Y i) \\<sqsubseteq> d then \\<bottom>\n     else c) \\<sqsubseteq>\n    (\\<Squnion>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)", "by simp"], ["proof (state)\nthis:\n  (if (\\<Squnion>i. Y i) \\<sqsubseteq> d then \\<bottom>\n   else c) \\<sqsubseteq>\n  (\\<Squnion>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i. Y i \\<sqsubseteq> d) \\<Longrightarrow>\n    (if (\\<Squnion>i. Y i) \\<sqsubseteq> d then \\<bottom>\n     else c) \\<sqsubseteq>\n    (\\<Squnion>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i. Y i \\<sqsubseteq> d) \\<Longrightarrow>\n    (if (\\<Squnion>i. Y i) \\<sqsubseteq> d then \\<bottom>\n     else c) \\<sqsubseteq>\n    (\\<Squnion>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<forall>i. Y i \\<sqsubseteq> d)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i. Y i \\<sqsubseteq> d) \\<Longrightarrow>\n    (if (\\<Squnion>i. Y i) \\<sqsubseteq> d then \\<bottom>\n     else c) \\<sqsubseteq>\n    (\\<Squnion>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)", "let ?f = \"\\<lambda>i. if Y i \\<sqsubseteq> d then \\<bottom> else c\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i. Y i \\<sqsubseteq> d) \\<Longrightarrow>\n    (if (\\<Squnion>i. Y i) \\<sqsubseteq> d then \\<bottom>\n     else c) \\<sqsubseteq>\n    (\\<Squnion>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)", "from False"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>i. Y i \\<sqsubseteq> d)", "have LubY: \"\\<not> Lub Y \\<sqsubseteq> d\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>i. Y i \\<sqsubseteq> d)\n\ngoal (1 subgoal):\n 1. Lub Y \\<notsqsubseteq> d", "using lub_below_iff[OF Y]"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>i. Y i \\<sqsubseteq> d)\n  ((\\<Squnion>i. Y i) \\<sqsubseteq> ?x) = (\\<forall>i. Y i \\<sqsubseteq> ?x)\n\ngoal (1 subgoal):\n 1. Lub Y \\<notsqsubseteq> d", "by simp"], ["proof (state)\nthis:\n  Lub Y \\<notsqsubseteq> d\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i. Y i \\<sqsubseteq> d) \\<Longrightarrow>\n    (if (\\<Squnion>i. Y i) \\<sqsubseteq> d then \\<bottom>\n     else c) \\<sqsubseteq>\n    (\\<Squnion>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)", "from False"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>i. Y i \\<sqsubseteq> d)", "have F: \"chain ?f\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>i. Y i \\<sqsubseteq> d)\n\ngoal (1 subgoal):\n 1. chain (\\<lambda>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i. Y i \\<sqsubseteq> d) \\<Longrightarrow>\n    chain (\\<lambda>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)", "apply (rule chainI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<not> (\\<forall>i. Y i \\<sqsubseteq> d) \\<Longrightarrow>\n       (if Y i \\<sqsubseteq> d then \\<bottom> else c) \\<sqsubseteq>\n       (if Y (Suc i) \\<sqsubseteq> d then \\<bottom> else c)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       \\<lbrakk>Y ia \\<notsqsubseteq> d; Y i \\<notsqsubseteq> d;\n        Y (Suc i) \\<sqsubseteq> d\\<rbrakk>\n       \\<Longrightarrow> c = \\<bottom>", "apply (cut_tac i=i and j=\"Suc i\" in chain_mono[OF Y])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i ia.\n       \\<lbrakk>Y ia \\<notsqsubseteq> d; Y i \\<notsqsubseteq> d;\n        Y (Suc i) \\<sqsubseteq> d\\<rbrakk>\n       \\<Longrightarrow> i \\<le> Suc i\n 2. \\<And>i ia.\n       \\<lbrakk>Y ia \\<notsqsubseteq> d; Y i \\<notsqsubseteq> d;\n        Y (Suc i) \\<sqsubseteq> d; Y i \\<sqsubseteq> Y (Suc i)\\<rbrakk>\n       \\<Longrightarrow> c = \\<bottom>", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       \\<lbrakk>Y ia \\<notsqsubseteq> d; Y i \\<notsqsubseteq> d;\n        Y (Suc i) \\<sqsubseteq> d; Y i \\<sqsubseteq> Y (Suc i)\\<rbrakk>\n       \\<Longrightarrow> c = \\<bottom>", "apply (cut_tac x=\"Y i\" and y=\"Y (Suc i)\" and z=d in below_trans)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i ia.\n       \\<lbrakk>Y ia \\<notsqsubseteq> d; Y i \\<notsqsubseteq> d;\n        Y (Suc i) \\<sqsubseteq> d; Y i \\<sqsubseteq> Y (Suc i)\\<rbrakk>\n       \\<Longrightarrow> Y i \\<sqsubseteq> Y (Suc i)\n 2. \\<And>i ia.\n       \\<lbrakk>Y ia \\<notsqsubseteq> d; Y i \\<notsqsubseteq> d;\n        Y (Suc i) \\<sqsubseteq> d; Y i \\<sqsubseteq> Y (Suc i)\\<rbrakk>\n       \\<Longrightarrow> Y (Suc i) \\<sqsubseteq> d\n 3. \\<And>i ia.\n       \\<lbrakk>Y ia \\<notsqsubseteq> d; Y i \\<notsqsubseteq> d;\n        Y (Suc i) \\<sqsubseteq> d; Y i \\<sqsubseteq> Y (Suc i);\n        Y i \\<sqsubseteq> d\\<rbrakk>\n       \\<Longrightarrow> c = \\<bottom>", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  chain (\\<lambda>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i. Y i \\<sqsubseteq> d) \\<Longrightarrow>\n    (if (\\<Squnion>i. Y i) \\<sqsubseteq> d then \\<bottom>\n     else c) \\<sqsubseteq>\n    (\\<Squnion>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)", "from False"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>i. Y i \\<sqsubseteq> d)", "obtain i where Yi: \"\\<not> Y i \\<sqsubseteq> d\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>i. Y i \\<sqsubseteq> d)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        Y i \\<notsqsubseteq> d \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Y i \\<notsqsubseteq> d\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i. Y i \\<sqsubseteq> d) \\<Longrightarrow>\n    (if (\\<Squnion>i. Y i) \\<sqsubseteq> d then \\<bottom>\n     else c) \\<sqsubseteq>\n    (\\<Squnion>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)", "hence M: \"max_in_chain i ?f\""], ["proof (prove)\nusing this:\n  Y i \\<notsqsubseteq> d\n\ngoal (1 subgoal):\n 1. max_in_chain i\n     (\\<lambda>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. Y i \\<notsqsubseteq> d \\<Longrightarrow>\n    max_in_chain i\n     (\\<lambda>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)", "apply (rule max_in_chainI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>Y i \\<notsqsubseteq> d; i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> (if Y i \\<sqsubseteq> d then \\<bottom> else c) =\n                         (if Y j \\<sqsubseteq> d then \\<bottom> else c)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>Y i \\<notsqsubseteq> d; i \\<le> j;\n        Y j \\<sqsubseteq> d\\<rbrakk>\n       \\<Longrightarrow> c = \\<bottom>", "apply (drule chain_mono[OF Y])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>Y i \\<notsqsubseteq> d; Y j \\<sqsubseteq> d;\n        Y i \\<sqsubseteq> Y j\\<rbrakk>\n       \\<Longrightarrow> c = \\<bottom>", "apply (cut_tac x=\"Y i\" and y=\"Y j\" and z=d in below_trans)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>j.\n       \\<lbrakk>Y i \\<notsqsubseteq> d; Y j \\<sqsubseteq> d;\n        Y i \\<sqsubseteq> Y j\\<rbrakk>\n       \\<Longrightarrow> Y i \\<sqsubseteq> Y j\n 2. \\<And>j.\n       \\<lbrakk>Y i \\<notsqsubseteq> d; Y j \\<sqsubseteq> d;\n        Y i \\<sqsubseteq> Y j\\<rbrakk>\n       \\<Longrightarrow> Y j \\<sqsubseteq> d\n 3. \\<And>j.\n       \\<lbrakk>Y i \\<notsqsubseteq> d; Y j \\<sqsubseteq> d;\n        Y i \\<sqsubseteq> Y j; Y i \\<sqsubseteq> d\\<rbrakk>\n       \\<Longrightarrow> c = \\<bottom>", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  max_in_chain i (\\<lambda>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i. Y i \\<sqsubseteq> d) \\<Longrightarrow>\n    (if (\\<Squnion>i. Y i) \\<sqsubseteq> d then \\<bottom>\n     else c) \\<sqsubseteq>\n    (\\<Squnion>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)", "from LubY Yi"], ["proof (chain)\npicking this:\n  Lub Y \\<notsqsubseteq> d\n  Y i \\<notsqsubseteq> d", "show ?thesis"], ["proof (prove)\nusing this:\n  Lub Y \\<notsqsubseteq> d\n  Y i \\<notsqsubseteq> d\n\ngoal (1 subgoal):\n 1. (if (\\<Squnion>i. Y i) \\<sqsubseteq> d then \\<bottom>\n     else c) \\<sqsubseteq>\n    (\\<Squnion>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)", "using iffD1[OF maxinch_is_thelub, OF F M]"], ["proof (prove)\nusing this:\n  Lub Y \\<notsqsubseteq> d\n  Y i \\<notsqsubseteq> d\n  (\\<Squnion>i. if Y i \\<sqsubseteq> d then \\<bottom> else c) =\n  (if Y i \\<sqsubseteq> d then \\<bottom> else c)\n\ngoal (1 subgoal):\n 1. (if (\\<Squnion>i. Y i) \\<sqsubseteq> d then \\<bottom>\n     else c) \\<sqsubseteq>\n    (\\<Squnion>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)", "by simp"], ["proof (state)\nthis:\n  (if (\\<Squnion>i. Y i) \\<sqsubseteq> d then \\<bottom>\n   else c) \\<sqsubseteq>\n  (\\<Squnion>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (if (\\<Squnion>i. Y i) \\<sqsubseteq> d then \\<bottom>\n   else c) \\<sqsubseteq>\n  (\\<Squnion>i. if Y i \\<sqsubseteq> d then \\<bottom> else c)\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "text\\<open>\\<close>"], ["", "lemma (in at_least_two_elements) below_monic_unitK [intro, simp]:\n  \"below_monic_cfun (unitK :: 'o ValK \\<rightarrow> 'o ValKM)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. below_monic_cfun unitK", "proof(rule below_monicI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       unitK\\<cdot>x \\<sqsubseteq> unitK\\<cdot>y \\<Longrightarrow>\n       x \\<sqsubseteq> y", "fix v v' :: \"'o ValK\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       unitK\\<cdot>x \\<sqsubseteq> unitK\\<cdot>y \\<Longrightarrow>\n       x \\<sqsubseteq> y", "assume vv': \"unitK\\<cdot>v \\<sqsubseteq> unitK\\<cdot>v'\""], ["proof (state)\nthis:\n  unitK\\<cdot>v \\<sqsubseteq> unitK\\<cdot>v'\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       unitK\\<cdot>x \\<sqsubseteq> unitK\\<cdot>y \\<Longrightarrow>\n       x \\<sqsubseteq> y", "let ?k = \"\\<Lambda> x. if x \\<sqsubseteq> v' then \\<bottom> else some_non_bottom_element\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       unitK\\<cdot>x \\<sqsubseteq> unitK\\<cdot>y \\<Longrightarrow>\n       x \\<sqsubseteq> y", "from vv'"], ["proof (chain)\npicking this:\n  unitK\\<cdot>v \\<sqsubseteq> unitK\\<cdot>v'", "have \"unitK\\<cdot>v\\<cdot>?k \\<sqsubseteq> unitK\\<cdot>v'\\<cdot>?k\""], ["proof (prove)\nusing this:\n  unitK\\<cdot>v \\<sqsubseteq> unitK\\<cdot>v'\n\ngoal (1 subgoal):\n 1. unitK\\<cdot>v\\<cdot>\n    (\\<Lambda> x.\n        if x \\<sqsubseteq> v' then \\<bottom>\n        else some_non_bottom_element) \\<sqsubseteq>\n    unitK\\<cdot>v'\\<cdot>\n    (\\<Lambda> x.\n        if x \\<sqsubseteq> v' then \\<bottom> else some_non_bottom_element)", "by (rule monofun_cfun_fun)"], ["proof (state)\nthis:\n  unitK\\<cdot>v\\<cdot>\n  (\\<Lambda> x.\n      if x \\<sqsubseteq> v' then \\<bottom>\n      else some_non_bottom_element) \\<sqsubseteq>\n  unitK\\<cdot>v'\\<cdot>\n  (\\<Lambda> x.\n      if x \\<sqsubseteq> v' then \\<bottom> else some_non_bottom_element)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       unitK\\<cdot>x \\<sqsubseteq> unitK\\<cdot>y \\<Longrightarrow>\n       x \\<sqsubseteq> y", "hence \"?k\\<cdot>v \\<sqsubseteq> ?k\\<cdot>v'\""], ["proof (prove)\nusing this:\n  unitK\\<cdot>v\\<cdot>\n  (\\<Lambda> x.\n      if x \\<sqsubseteq> v' then \\<bottom>\n      else some_non_bottom_element) \\<sqsubseteq>\n  unitK\\<cdot>v'\\<cdot>\n  (\\<Lambda> x.\n      if x \\<sqsubseteq> v' then \\<bottom> else some_non_bottom_element)\n\ngoal (1 subgoal):\n 1. (\\<Lambda> x.\n        if x \\<sqsubseteq> v' then \\<bottom>\n        else some_non_bottom_element)\\<cdot>\n    v \\<sqsubseteq>\n    (\\<Lambda> x.\n        if x \\<sqsubseteq> v' then \\<bottom>\n        else some_non_bottom_element)\\<cdot>\n    v'", "by (simp add: unitK_def)"], ["proof (state)\nthis:\n  (\\<Lambda> x.\n      if x \\<sqsubseteq> v' then \\<bottom>\n      else some_non_bottom_element)\\<cdot>\n  v \\<sqsubseteq>\n  (\\<Lambda> x.\n      if x \\<sqsubseteq> v' then \\<bottom>\n      else some_non_bottom_element)\\<cdot>\n  v'\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       unitK\\<cdot>x \\<sqsubseteq> unitK\\<cdot>y \\<Longrightarrow>\n       x \\<sqsubseteq> y", "with some_non_bottom_element"], ["proof (chain)\npicking this:\n  some_non_bottom_element \\<noteq> \\<bottom>\n  (\\<Lambda> x.\n      if x \\<sqsubseteq> v' then \\<bottom>\n      else some_non_bottom_element)\\<cdot>\n  v \\<sqsubseteq>\n  (\\<Lambda> x.\n      if x \\<sqsubseteq> v' then \\<bottom>\n      else some_non_bottom_element)\\<cdot>\n  v'", "show \"v \\<sqsubseteq> v'\""], ["proof (prove)\nusing this:\n  some_non_bottom_element \\<noteq> \\<bottom>\n  (\\<Lambda> x.\n      if x \\<sqsubseteq> v' then \\<bottom>\n      else some_non_bottom_element)\\<cdot>\n  v \\<sqsubseteq>\n  (\\<Lambda> x.\n      if x \\<sqsubseteq> v' then \\<bottom>\n      else some_non_bottom_element)\\<cdot>\n  v'\n\ngoal (1 subgoal):\n 1. v \\<sqsubseteq> v'", "by (auto split: if_split_asm)"], ["proof (state)\nthis:\n  v \\<sqsubseteq> v'\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Logical relation\\<close>"], ["", "text\\<open>\n\nWe follow \\citet{DBLP:conf/icalp/Reynolds74} by simultaneously\ndefining a pair of relations over values and functions. Both are\nbottom-reflecting, in contrast to the situation for computational\nadequacy in \\S\\ref{sec:compad}.  \\citet{DBLP:journals/tcs/Filinski07}\ndiffers by assuming that values are always defined, and relates values\nand monadic computations.\n\n\\<close>"], ["", "type_synonym 'o lfr = \"(ValD, 'o ValKM, ValD \\<rightarrow> ValD, 'o ValKM \\<rightarrow> 'o ValKM) lf_pair_rep\""], ["", "type_synonym 'o lflf = \"(ValD, 'o ValKM, ValD \\<rightarrow> ValD, 'o ValKM \\<rightarrow> 'o ValKM) lf_pair\""], ["", "context at_least_two_elements\nbegin"], ["", "abbreviation lr_eta_rep_N where\n  \"lr_eta_rep_N \\<equiv> { (e, e') .\n       (e = \\<bottom> \\<and> e' = \\<bottom>)\n     \\<or> (e = ValTT \\<and> e' = unitK\\<cdot>ValKTT)\n     \\<or> (e = ValFF \\<and> e' = unitK\\<cdot>ValKFF)\n     \\<or> (\\<exists>n. e = ValN\\<cdot>n \\<and> e' = unitK\\<cdot>(ValKN\\<cdot>n)) }\""], ["", "abbreviation lr_eta_rep_F where\n  \"lr_eta_rep_F \\<equiv> \\<lambda>(rm, rp). { (e, e') .\n       (e = \\<bottom> \\<and> e' = \\<bottom>)\n     \\<or> (\\<exists>f f'. e = ValF\\<cdot>f \\<and> e' = unitK\\<cdot>(ValKF\\<cdot>f') \\<and> (f, f') \\<in> unlr (snd rp)) }\""], ["", "definition lr_eta_rep where\n  \"lr_eta_rep \\<equiv> \\<lambda>r. lr_eta_rep_N \\<union> lr_eta_rep_F r\""], ["", "definition lr_theta_rep where\n  \"lr_theta_rep \\<equiv> \\<lambda>(rm, rp). { (f, f') .\n     (\\<forall>(x, x') \\<in> unlr (fst (undual rm)). (f\\<cdot>x, f'\\<cdot>x') \\<in> unlr (fst rp)) }\""], ["", "definition lr_rep :: \"'o lfr\" where\n  \"lr_rep \\<equiv> \\<lambda>r. (lr_eta_rep r, lr_theta_rep r)\""], ["", "abbreviation lr :: \"'o lflf\" where\n  \"lr \\<equiv> \\<lambda>r. (mklr (fst (lr_rep r)), mklr (snd (lr_rep r)))\""], ["", "(*<*)"], ["", "text\\<open>\n\nProperties of the logical relation.\n\n\\<close>"], ["", "lemma admS_eta_rep [intro, simp]:\n  \"fst (lr_rep r) \\<in> admS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (lr_rep r) \\<in> admS", "unfolding lr_rep_def lr_eta_rep_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ({(e, e').\n          e = \\<bottom> \\<and> e' = \\<bottom> \\<or>\n          e = ValTT \\<and> e' = unitK\\<cdot>ValKTT \\<or>\n          e = ValFF \\<and> e' = unitK\\<cdot>ValKFF \\<or>\n          (\\<exists>n.\n              e = ValN\\<cdot>n \\<and>\n              e' = unitK\\<cdot>(ValKN\\<cdot>n))} \\<union>\n         (case r of\n          (rm, rp) \\<Rightarrow>\n            {(e, e').\n             e = \\<bottom> \\<and> e' = \\<bottom> \\<or>\n             (\\<exists>f f'.\n                 e = ValF\\<cdot>f \\<and>\n                 e' = unitK\\<cdot>(ValKF\\<cdot>f') \\<and>\n                 (f, f') \\<in> unlr (snd rp))}),\n         lr_theta_rep r)\n    \\<in> admS", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(e, e').\n     e = \\<bottom> \\<and> e' = \\<bottom> \\<or>\n     e = ValTT \\<and> e' = unitK\\<cdot>ValKTT \\<or>\n     e = ValFF \\<and> e' = unitK\\<cdot>ValKFF \\<or>\n     (\\<exists>n.\n         e = ValN\\<cdot>n \\<and> e' = unitK\\<cdot>(ValKN\\<cdot>n))} \\<union>\n    (case r of\n     (rm, rp) \\<Rightarrow>\n       {(e, e').\n        e = \\<bottom> \\<and> e' = \\<bottom> \\<or>\n        (\\<exists>f.\n            e = ValF\\<cdot>f \\<and>\n            (\\<exists>f'.\n                e' = unitK\\<cdot>(ValKF\\<cdot>f') \\<and>\n                (f, f') \\<in> unlr (snd rp)))})\n    \\<in> admS", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<bottom>\n    \\<in> {(e, e').\n           e = \\<bottom> \\<and> e' = \\<bottom> \\<or>\n           e = ValTT \\<and> e' = unitK\\<cdot>ValKTT \\<or>\n           e = ValFF \\<and> e' = unitK\\<cdot>ValKFF \\<or>\n           (\\<exists>n.\n               e = ValN\\<cdot>n \\<and>\n               e' = unitK\\<cdot>(ValKN\\<cdot>n))} \\<union>\n          (case r of\n           (rm, rp) \\<Rightarrow>\n             {(e, e').\n              e = \\<bottom> \\<and> e' = \\<bottom> \\<or>\n              (\\<exists>f.\n                  e = ValF\\<cdot>f \\<and>\n                  (\\<exists>f'.\n                      e' = unitK\\<cdot>(ValKF\\<cdot>f') \\<and>\n                      (f, f') \\<in> unlr (snd rp)))})\n 2. adm (\\<lambda>x.\n            x \\<in> {(e, e').\n                     e = \\<bottom> \\<and> e' = \\<bottom> \\<or>\n                     e = ValTT \\<and> e' = unitK\\<cdot>ValKTT \\<or>\n                     e = ValFF \\<and> e' = unitK\\<cdot>ValKFF \\<or>\n                     (\\<exists>n.\n                         e = ValN\\<cdot>n \\<and>\n                         e' = unitK\\<cdot>(ValKN\\<cdot>n))} \\<union>\n                    (case r of\n                     (rm, rp) \\<Rightarrow>\n                       {(e, e').\n                        e = \\<bottom> \\<and> e' = \\<bottom> \\<or>\n                        (\\<exists>f.\n                            e = ValF\\<cdot>f \\<and>\n                            (\\<exists>f'.\n                                e' = unitK\\<cdot>(ValKF\\<cdot>f') \\<and>\n                                (f, f') \\<in> unlr (snd rp)))}))", "apply (auto intro!: adm_disj simp: split_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. adm (\\<lambda>x.\n            \\<exists>n.\n               fst x = ValN\\<cdot>n \\<and>\n               snd x = unitK\\<cdot>(ValKN\\<cdot>n))\n 2. adm (\\<lambda>x.\n            \\<exists>f.\n               fst x = ValF\\<cdot>f \\<and>\n               (\\<exists>f'.\n                   snd x = unitK\\<cdot>(ValKF\\<cdot>f') \\<and>\n                   (f, f') \\<in> unlr (snd (snd r))))", "using adm_below_monic_exists[OF _ below_monic_pair[OF below_monic_ValN below_monic_cfcomp2[OF below_monic_unitK below_monic_ValKN]], where P=\"\\<lambda>_. True\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>adm (\\<lambda>_. True);\n   cont\n    (Rep_cfun\n      (\\<Lambda> x. (ValN\\<cdot>x, (unitK oo ValKN)\\<cdot>x)))\\<rbrakk>\n  \\<Longrightarrow> adm (\\<lambda>x.\n                            \\<exists>y.\n                               x =\n                               (\\<Lambda> x.\n                                   (ValN\\<cdot>x,\n                                    (unitK oo ValKN)\\<cdot>x))\\<cdot>\n                               y \\<and>\n                               True)\n\ngoal (2 subgoals):\n 1. adm (\\<lambda>x.\n            \\<exists>n.\n               fst x = ValN\\<cdot>n \\<and>\n               snd x = unitK\\<cdot>(ValKN\\<cdot>n))\n 2. adm (\\<lambda>x.\n            \\<exists>f.\n               fst x = ValF\\<cdot>f \\<and>\n               (\\<exists>f'.\n                   snd x = unitK\\<cdot>(ValKF\\<cdot>f') \\<and>\n                   (f, f') \\<in> unlr (snd (snd r))))", "apply (simp add: prod_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. adm (\\<lambda>x.\n            \\<exists>f.\n               fst x = ValF\\<cdot>f \\<and>\n               (\\<exists>f'.\n                   snd x = unitK\\<cdot>(ValKF\\<cdot>f') \\<and>\n                   (f, f') \\<in> unlr (snd (snd r))))", "using adm_below_monic_exists[OF _ below_monic_pair_split[OF below_monic_ValF below_monic_cfcomp2[OF below_monic_unitK below_monic_ValKF]], where P=\"\\<lambda>x. x \\<in> unlr (snd (snd r))\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>adm (\\<lambda>x. x \\<in> unlr (snd (snd r)));\n   cont\n    (Rep_cfun\n      (\\<Lambda> x.\n          (ValF\\<cdot>(fst x), (unitK oo ValKF)\\<cdot>(snd x))))\\<rbrakk>\n  \\<Longrightarrow> adm (\\<lambda>x.\n                            \\<exists>y.\n                               x =\n                               (\\<Lambda> x.\n                                   (ValF\\<cdot>(fst x),\n                                    (unitK oo ValKF)\\<cdot>(snd x)))\\<cdot>\n                               y \\<and>\n                               y \\<in> unlr (snd (snd r)))\n\ngoal (1 subgoal):\n 1. adm (\\<lambda>x.\n            \\<exists>f.\n               fst x = ValF\\<cdot>f \\<and>\n               (\\<exists>f'.\n                   snd x = unitK\\<cdot>(ValKF\\<cdot>f') \\<and>\n                   (f, f') \\<in> unlr (snd (snd r))))", "apply (simp add: prod_eq_iff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma admS_theta_rep [intro, simp]:\n  \"snd (lr_rep r) \\<in> admS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (lr_rep r) \\<in> admS", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<bottom> \\<in> snd (lr_rep r)\n 2. adm (\\<lambda>x. x \\<in> snd (lr_rep r))", "show \"\\<bottom> \\<in> snd (lr_rep r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bottom> \\<in> snd (lr_rep r)", "unfolding lr_rep_def lr_theta_rep_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bottom>\n    \\<in> snd (lr_eta_rep r,\n               case r of\n               (rm, rp) \\<Rightarrow>\n                 {(f, f').\n                  \\<forall>(x, x')\\<in>unlr (fst (undual rm)).\n                     (f\\<cdot>x, f'\\<cdot>x') \\<in> unlr (fst rp)})", "by (cases r) simp"], ["proof (state)\nthis:\n  \\<bottom> \\<in> snd (lr_rep r)\n\ngoal (1 subgoal):\n 1. adm (\\<lambda>x. x \\<in> snd (lr_rep r))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. adm (\\<lambda>x. x \\<in> snd (lr_rep r))", "show \"adm (\\<lambda>x. x \\<in> snd (lr_rep r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adm (\\<lambda>x. x \\<in> snd (lr_rep r))", "apply (rule admI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>chain Y; \\<forall>i. Y i \\<in> snd (lr_rep r)\\<rbrakk>\n       \\<Longrightarrow> (\\<Squnion>i. Y i) \\<in> snd (lr_rep r)", "unfolding lr_rep_def lr_theta_rep_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>chain Y;\n        \\<forall>i.\n           Y i\n           \\<in> snd (lr_eta_rep r,\n                      case r of\n                      (rm, rp) \\<Rightarrow>\n                        {(f, f').\n                         \\<forall>(x, x')\\<in>unlr (fst (undual rm)).\n                            (f\\<cdot>x, f'\\<cdot>x')\n                            \\<in> unlr (fst rp)})\\<rbrakk>\n       \\<Longrightarrow> (\\<Squnion>i. Y i)\n                         \\<in> snd (lr_eta_rep r,\n                                    case r of\n                                    (rm, rp) \\<Rightarrow>\n{(f, f').\n \\<forall>(x, x')\\<in>unlr (fst (undual rm)).\n    (f\\<cdot>x, f'\\<cdot>x') \\<in> unlr (fst rp)})", "apply (clarsimp simp: split_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Y a b.\n       \\<lbrakk>chain Y;\n        \\<forall>i.\n           \\<forall>x\\<in>unlr (fst (undual (fst r))).\n              (fst (Y i)\\<cdot>(fst x), snd (Y i)\\<cdot>(snd x))\n              \\<in> unlr (fst (snd r));\n        (a, b) \\<in> unlr (fst (undual (fst r)))\\<rbrakk>\n       \\<Longrightarrow> (fst (\\<Squnion>x. Y x)\\<cdot>a,\n                          snd (\\<Squnion>x. Y x)\\<cdot>b)\n                         \\<in> unlr (fst (snd r))", "apply (rule admD)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>Y a b.\n       \\<lbrakk>chain Y;\n        \\<forall>i.\n           \\<forall>x\\<in>unlr (fst (undual (fst r))).\n              (fst (Y i)\\<cdot>(fst x), snd (Y i)\\<cdot>(snd x))\n              \\<in> unlr (fst (snd r));\n        (a, b) \\<in> unlr (fst (undual (fst r)))\\<rbrakk>\n       \\<Longrightarrow> adm (\\<lambda>c.\n                                 (fst c\\<cdot>a, snd c\\<cdot>b)\n                                 \\<in> unlr (fst (snd r)))\n 2. \\<And>Y a b.\n       \\<lbrakk>chain Y;\n        \\<forall>i.\n           \\<forall>x\\<in>unlr (fst (undual (fst r))).\n              (fst (Y i)\\<cdot>(fst x), snd (Y i)\\<cdot>(snd x))\n              \\<in> unlr (fst (snd r));\n        (a, b) \\<in> unlr (fst (undual (fst r)))\\<rbrakk>\n       \\<Longrightarrow> chain Y\n 3. \\<And>Y a b i.\n       \\<lbrakk>chain Y;\n        \\<forall>i.\n           \\<forall>x\\<in>unlr (fst (undual (fst r))).\n              (fst (Y i)\\<cdot>(fst x), snd (Y i)\\<cdot>(snd x))\n              \\<in> unlr (fst (snd r));\n        (a, b) \\<in> unlr (fst (undual (fst r)))\\<rbrakk>\n       \\<Longrightarrow> (fst (Y i)\\<cdot>a, snd (Y i)\\<cdot>b)\n                         \\<in> unlr (fst (snd r))", "apply (rule adm_subst)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>Y a b.\n       \\<lbrakk>chain Y;\n        \\<forall>i.\n           \\<forall>x\\<in>unlr (fst (undual (fst r))).\n              (fst (Y i)\\<cdot>(fst x), snd (Y i)\\<cdot>(snd x))\n              \\<in> unlr (fst (snd r));\n        (a, b) \\<in> unlr (fst (undual (fst r)))\\<rbrakk>\n       \\<Longrightarrow> cont (\\<lambda>x. (fst x\\<cdot>a, snd x\\<cdot>b))\n 2. \\<And>Y a b.\n       \\<lbrakk>chain Y;\n        \\<forall>i.\n           \\<forall>x\\<in>unlr (fst (undual (fst r))).\n              (fst (Y i)\\<cdot>(fst x), snd (Y i)\\<cdot>(snd x))\n              \\<in> unlr (fst (snd r));\n        (a, b) \\<in> unlr (fst (undual (fst r)))\\<rbrakk>\n       \\<Longrightarrow> adm (\\<lambda>a. a \\<in> unlr (fst (snd r)))\n 3. \\<And>Y a b.\n       \\<lbrakk>chain Y;\n        \\<forall>i.\n           \\<forall>x\\<in>unlr (fst (undual (fst r))).\n              (fst (Y i)\\<cdot>(fst x), snd (Y i)\\<cdot>(snd x))\n              \\<in> unlr (fst (snd r));\n        (a, b) \\<in> unlr (fst (undual (fst r)))\\<rbrakk>\n       \\<Longrightarrow> chain Y\n 4. \\<And>Y a b i.\n       \\<lbrakk>chain Y;\n        \\<forall>i.\n           \\<forall>x\\<in>unlr (fst (undual (fst r))).\n              (fst (Y i)\\<cdot>(fst x), snd (Y i)\\<cdot>(snd x))\n              \\<in> unlr (fst (snd r));\n        (a, b) \\<in> unlr (fst (undual (fst r)))\\<rbrakk>\n       \\<Longrightarrow> (fst (Y i)\\<cdot>a, snd (Y i)\\<cdot>b)\n                         \\<in> unlr (fst (snd r))", "apply force+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  adm (\\<lambda>x. x \\<in> snd (lr_rep r))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mono_lr:\n  shows \"mono (lr :: 'o lflf)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono lr", "apply (rule monoI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. x \\<le> y \\<Longrightarrow> lr x \\<le> lr y", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       x \\<le> y \\<Longrightarrow>\n       fst (lr_rep x) \\<subseteq> fst (lr_rep y) \\<and>\n       snd (lr_rep x) \\<subseteq> snd (lr_rep y)", "apply (simp add: lr_rep_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       x \\<le> y \\<Longrightarrow>\n       lr_eta_rep x \\<subseteq> lr_eta_rep y \\<and>\n       lr_theta_rep x \\<subseteq> lr_theta_rep y", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       x \\<le> y \\<Longrightarrow> lr_eta_rep x \\<subseteq> lr_eta_rep y\n 2. \\<And>x y.\n       x \\<le> y \\<Longrightarrow> lr_theta_rep x \\<subseteq> lr_theta_rep y", "apply (force simp: lr_eta_rep_def split_def dual_less_eq_iff unlr_leq[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       x \\<le> y \\<Longrightarrow> lr_theta_rep x \\<subseteq> lr_theta_rep y", "(* FIXME stuck with the projections on the product *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       x \\<le> y \\<Longrightarrow> lr_theta_rep x \\<subseteq> lr_theta_rep y", "apply (auto simp: lr_theta_rep_def split_def dual_less_eq_iff unlr_leq[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa b ab ac ba ad bb ae bc.\n       \\<lbrakk>\\<forall>x\\<in>unlr (fst (undual a)).\n                   (ad\\<cdot>(fst x), bb\\<cdot>(snd x)) \\<in> unlr aa;\n        (ae, bc) \\<in> unlr (fst (undual ab)); undual ab \\<le> undual a;\n        unlr aa \\<subseteq> unlr ac; unlr b \\<subseteq> unlr ba\\<rbrakk>\n       \\<Longrightarrow> (ad\\<cdot>ae, bb\\<cdot>bc) \\<in> unlr ac", "apply (drule_tac x=\"(ae, bc)\" in bspec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a aa b ab ac ba ad bb ae bc.\n       \\<lbrakk>(ae, bc) \\<in> unlr (fst (undual ab));\n        undual ab \\<le> undual a; unlr aa \\<subseteq> unlr ac;\n        unlr b \\<subseteq> unlr ba\\<rbrakk>\n       \\<Longrightarrow> (ae, bc) \\<in> unlr (fst (undual a))\n 2. \\<And>a aa b ab ac ba ad bb ae bc.\n       \\<lbrakk>(ae, bc) \\<in> unlr (fst (undual ab));\n        undual ab \\<le> undual a; unlr aa \\<subseteq> unlr ac;\n        unlr b \\<subseteq> unlr ba;\n        (ad\\<cdot>(fst (ae, bc)), bb\\<cdot>(snd (ae, bc)))\n        \\<in> unlr aa\\<rbrakk>\n       \\<Longrightarrow> (ad\\<cdot>ae, bb\\<cdot>bc) \\<in> unlr ac", "apply (case_tac a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a aa b ab ac ba ad bb ae bc y.\n       \\<lbrakk>(ae, bc) \\<in> unlr (fst (undual ab));\n        undual ab \\<le> undual a; unlr aa \\<subseteq> unlr ac;\n        unlr b \\<subseteq> unlr ba; a = dual y; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> (ae, bc) \\<in> unlr (fst (undual a))\n 2. \\<And>a aa b ab ac ba ad bb ae bc.\n       \\<lbrakk>(ae, bc) \\<in> unlr (fst (undual ab));\n        undual ab \\<le> undual a; unlr aa \\<subseteq> unlr ac;\n        unlr b \\<subseteq> unlr ba;\n        (ad\\<cdot>(fst (ae, bc)), bb\\<cdot>(snd (ae, bc)))\n        \\<in> unlr aa\\<rbrakk>\n       \\<Longrightarrow> (ad\\<cdot>ae, bb\\<cdot>bc) \\<in> unlr ac", "apply (case_tac ab)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a aa b ab ac ba ad bb ae bc y ya.\n       \\<lbrakk>(ae, bc) \\<in> unlr (fst (undual ab));\n        undual ab \\<le> undual a; unlr aa \\<subseteq> unlr ac;\n        unlr b \\<subseteq> unlr ba; a = dual y; y \\<in> UNIV; ab = dual ya;\n        ya \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> (ae, bc) \\<in> unlr (fst (undual a))\n 2. \\<And>a aa b ab ac ba ad bb ae bc.\n       \\<lbrakk>(ae, bc) \\<in> unlr (fst (undual ab));\n        undual ab \\<le> undual a; unlr aa \\<subseteq> unlr ac;\n        unlr b \\<subseteq> unlr ba;\n        (ad\\<cdot>(fst (ae, bc)), bb\\<cdot>(snd (ae, bc)))\n        \\<in> unlr aa\\<rbrakk>\n       \\<Longrightarrow> (ad\\<cdot>ae, bb\\<cdot>bc) \\<in> unlr ac", "apply (auto simp: unlr_leq[symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "end"], ["", "(* context at_least_two_elements *)"], ["", "text\\<open>\n\nIt takes some effort to set up the minimal invariant relating the two\npairs of domains. One might hope this would be easier using deflations\n(which might compose) rather than ``copy'' functions (which certainly\ndon't).\n\nWe elide these as they are tedious.\n\n\\<close>"], ["", "(*<*)"], ["", "primrec\n  ValD_copy_i :: \"nat \\<Rightarrow> ValD \\<rightarrow> ValD\"\nwhere\n  \"ValD_copy_i 0 = \\<bottom>\"\n| \"ValD_copy_i (Suc n) = (\\<Lambda> v. case v of ValF\\<cdot>f \\<Rightarrow> ValF\\<cdot>(ValD_copy_i n oo f oo ValD_copy_i n) | ValTT \\<Rightarrow> ValTT | ValFF \\<Rightarrow> ValFF | ValN\\<cdot>m \\<Rightarrow> ValN\\<cdot>m)\""], ["", "abbreviation\n  \"ValD_copy_lub \\<equiv> (\\<Squnion>i. ValD_copy_i i)\""], ["", "lemma ValD_copy_chain [intro, simp]:\n  \"chain ValD_copy_i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain ValD_copy_i", "proof(rule chainI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. ValD_copy_i i \\<sqsubseteq> ValD_copy_i (Suc i)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. ValD_copy_i i \\<sqsubseteq> ValD_copy_i (Suc i)", "show \"ValD_copy_i i \\<sqsubseteq> ValD_copy_i (Suc i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ValD_copy_i i \\<sqsubseteq> ValD_copy_i (Suc i)", "proof(induct i)"], ["proof (state)\ngoal (2 subgoals):\n 1. ValD_copy_i 0 \\<sqsubseteq> ValD_copy_i (Suc 0)\n 2. \\<And>i.\n       ValD_copy_i i \\<sqsubseteq> ValD_copy_i (Suc i) \\<Longrightarrow>\n       ValD_copy_i (Suc i) \\<sqsubseteq> ValD_copy_i (Suc (Suc i))", "case (Suc i)"], ["proof (state)\nthis:\n  ValD_copy_i i \\<sqsubseteq> ValD_copy_i (Suc i)\n\ngoal (2 subgoals):\n 1. ValD_copy_i 0 \\<sqsubseteq> ValD_copy_i (Suc 0)\n 2. \\<And>i.\n       ValD_copy_i i \\<sqsubseteq> ValD_copy_i (Suc i) \\<Longrightarrow>\n       ValD_copy_i (Suc i) \\<sqsubseteq> ValD_copy_i (Suc (Suc i))", "{"], ["proof (state)\nthis:\n  ValD_copy_i i \\<sqsubseteq> ValD_copy_i (Suc i)\n\ngoal (2 subgoals):\n 1. ValD_copy_i 0 \\<sqsubseteq> ValD_copy_i (Suc 0)\n 2. \\<And>i.\n       ValD_copy_i i \\<sqsubseteq> ValD_copy_i (Suc i) \\<Longrightarrow>\n       ValD_copy_i (Suc i) \\<sqsubseteq> ValD_copy_i (Suc (Suc i))", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. ValD_copy_i 0 \\<sqsubseteq> ValD_copy_i (Suc 0)\n 2. \\<And>i.\n       ValD_copy_i i \\<sqsubseteq> ValD_copy_i (Suc i) \\<Longrightarrow>\n       ValD_copy_i (Suc i) \\<sqsubseteq> ValD_copy_i (Suc (Suc i))", "have \"ValD_copy_i (Suc i)\\<cdot>x \\<sqsubseteq> ValD_copy_i (Suc (Suc i))\\<cdot>x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ValD_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n    ValD_copy_i (Suc (Suc i))\\<cdot>x", "proof(cases x)"], ["proof (state)\ngoal (5 subgoals):\n 1. x = \\<bottom> \\<Longrightarrow>\n    ValD_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n    ValD_copy_i (Suc (Suc i))\\<cdot>x\n 2. \\<And>cfun.\n       x = ValF\\<cdot>cfun \\<Longrightarrow>\n       ValD_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n       ValD_copy_i (Suc (Suc i))\\<cdot>x\n 3. x = ValTT \\<Longrightarrow>\n    ValD_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n    ValD_copy_i (Suc (Suc i))\\<cdot>x\n 4. x = ValFF \\<Longrightarrow>\n    ValD_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n    ValD_copy_i (Suc (Suc i))\\<cdot>x\n 5. \\<And>nat.\n       x = ValN\\<cdot>nat \\<Longrightarrow>\n       ValD_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n       ValD_copy_i (Suc (Suc i))\\<cdot>x", "case (ValF f)"], ["proof (state)\nthis:\n  x = ValF\\<cdot>f\n\ngoal (5 subgoals):\n 1. x = \\<bottom> \\<Longrightarrow>\n    ValD_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n    ValD_copy_i (Suc (Suc i))\\<cdot>x\n 2. \\<And>cfun.\n       x = ValF\\<cdot>cfun \\<Longrightarrow>\n       ValD_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n       ValD_copy_i (Suc (Suc i))\\<cdot>x\n 3. x = ValTT \\<Longrightarrow>\n    ValD_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n    ValD_copy_i (Suc (Suc i))\\<cdot>x\n 4. x = ValFF \\<Longrightarrow>\n    ValD_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n    ValD_copy_i (Suc (Suc i))\\<cdot>x\n 5. \\<And>nat.\n       x = ValN\\<cdot>nat \\<Longrightarrow>\n       ValD_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n       ValD_copy_i (Suc (Suc i))\\<cdot>x", "with Suc"], ["proof (chain)\npicking this:\n  ValD_copy_i i \\<sqsubseteq> ValD_copy_i (Suc i)\n  x = ValF\\<cdot>f", "show ?thesis"], ["proof (prove)\nusing this:\n  ValD_copy_i i \\<sqsubseteq> ValD_copy_i (Suc i)\n  x = ValF\\<cdot>f\n\ngoal (1 subgoal):\n 1. ValD_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n    ValD_copy_i (Suc (Suc i))\\<cdot>x", "by (clarsimp simp: cfcomp1 cfun_below_iff monofun_cfun)"], ["proof (state)\nthis:\n  ValD_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n  ValD_copy_i (Suc (Suc i))\\<cdot>x\n\ngoal (4 subgoals):\n 1. x = \\<bottom> \\<Longrightarrow>\n    ValD_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n    ValD_copy_i (Suc (Suc i))\\<cdot>x\n 2. x = ValTT \\<Longrightarrow>\n    ValD_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n    ValD_copy_i (Suc (Suc i))\\<cdot>x\n 3. x = ValFF \\<Longrightarrow>\n    ValD_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n    ValD_copy_i (Suc (Suc i))\\<cdot>x\n 4. \\<And>nat.\n       x = ValN\\<cdot>nat \\<Longrightarrow>\n       ValD_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n       ValD_copy_i (Suc (Suc i))\\<cdot>x", "qed simp_all"], ["proof (state)\nthis:\n  ValD_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n  ValD_copy_i (Suc (Suc i))\\<cdot>x\n\ngoal (2 subgoals):\n 1. ValD_copy_i 0 \\<sqsubseteq> ValD_copy_i (Suc 0)\n 2. \\<And>i.\n       ValD_copy_i i \\<sqsubseteq> ValD_copy_i (Suc i) \\<Longrightarrow>\n       ValD_copy_i (Suc i) \\<sqsubseteq> ValD_copy_i (Suc (Suc i))", "}"], ["proof (state)\nthis:\n  ValD_copy_i (Suc i)\\<cdot>?x2 \\<sqsubseteq>\n  ValD_copy_i (Suc (Suc i))\\<cdot>?x2\n\ngoal (2 subgoals):\n 1. ValD_copy_i 0 \\<sqsubseteq> ValD_copy_i (Suc 0)\n 2. \\<And>i.\n       ValD_copy_i i \\<sqsubseteq> ValD_copy_i (Suc i) \\<Longrightarrow>\n       ValD_copy_i (Suc i) \\<sqsubseteq> ValD_copy_i (Suc (Suc i))", "thus ?case"], ["proof (prove)\nusing this:\n  ValD_copy_i (Suc i)\\<cdot>?x2 \\<sqsubseteq>\n  ValD_copy_i (Suc (Suc i))\\<cdot>?x2\n\ngoal (1 subgoal):\n 1. ValD_copy_i (Suc i) \\<sqsubseteq> ValD_copy_i (Suc (Suc i))", "by (simp add: cfun_below_iff)"], ["proof (state)\nthis:\n  ValD_copy_i (Suc i) \\<sqsubseteq> ValD_copy_i (Suc (Suc i))\n\ngoal (1 subgoal):\n 1. ValD_copy_i 0 \\<sqsubseteq> ValD_copy_i (Suc 0)", "qed simp"], ["proof (state)\nthis:\n  ValD_copy_i i \\<sqsubseteq> ValD_copy_i (Suc i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ValD_copy_lub_ID:\n  \"ValD_copy_lub = ID\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ValD_copy_lub = ID", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ValD_copy_lub = ID", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. ValD_copy_lub = ID", "fix x :: ValD"], ["proof (state)\ngoal (1 subgoal):\n 1. ValD_copy_lub = ID", "fix i :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. ValD_copy_lub = ID", "have \"ValD_take i\\<cdot>(ValD_copy_i i\\<cdot>(ValD_take i\\<cdot>x)) = ValD_take i\\<cdot>x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ValD_take i\\<cdot>(ValD_copy_i i\\<cdot>(ValD_take i\\<cdot>x)) =\n    ValD_take i\\<cdot>x", "proof (induct i arbitrary: x)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       ValD_take 0\\<cdot>(ValD_copy_i 0\\<cdot>(ValD_take 0\\<cdot>x)) =\n       ValD_take 0\\<cdot>x\n 2. \\<And>i x.\n       (\\<And>x.\n           ValD_take i\\<cdot>(ValD_copy_i i\\<cdot>(ValD_take i\\<cdot>x)) =\n           ValD_take i\\<cdot>x) \\<Longrightarrow>\n       ValD_take (Suc i)\\<cdot>\n       (ValD_copy_i (Suc i)\\<cdot>(ValD_take (Suc i)\\<cdot>x)) =\n       ValD_take (Suc i)\\<cdot>x", "case (Suc n)"], ["proof (state)\nthis:\n  ValD_take n\\<cdot>(ValD_copy_i n\\<cdot>(ValD_take n\\<cdot>?x)) =\n  ValD_take n\\<cdot>?x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       ValD_take 0\\<cdot>(ValD_copy_i 0\\<cdot>(ValD_take 0\\<cdot>x)) =\n       ValD_take 0\\<cdot>x\n 2. \\<And>i x.\n       (\\<And>x.\n           ValD_take i\\<cdot>(ValD_copy_i i\\<cdot>(ValD_take i\\<cdot>x)) =\n           ValD_take i\\<cdot>x) \\<Longrightarrow>\n       ValD_take (Suc i)\\<cdot>\n       (ValD_copy_i (Suc i)\\<cdot>(ValD_take (Suc i)\\<cdot>x)) =\n       ValD_take (Suc i)\\<cdot>x", "thus ?case"], ["proof (prove)\nusing this:\n  ValD_take n\\<cdot>(ValD_copy_i n\\<cdot>(ValD_take n\\<cdot>?x)) =\n  ValD_take n\\<cdot>?x\n\ngoal (1 subgoal):\n 1. ValD_take (Suc n)\\<cdot>\n    (ValD_copy_i (Suc n)\\<cdot>(ValD_take (Suc n)\\<cdot>x)) =\n    ValD_take (Suc n)\\<cdot>x", "by (cases x) (simp_all add: cfun_map_def)"], ["proof (state)\nthis:\n  ValD_take (Suc n)\\<cdot>\n  (ValD_copy_i (Suc n)\\<cdot>(ValD_take (Suc n)\\<cdot>x)) =\n  ValD_take (Suc n)\\<cdot>x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       ValD_take 0\\<cdot>(ValD_copy_i 0\\<cdot>(ValD_take 0\\<cdot>x)) =\n       ValD_take 0\\<cdot>x", "qed simp"], ["proof (state)\nthis:\n  ValD_take i\\<cdot>(ValD_copy_i i\\<cdot>(ValD_take i\\<cdot>x)) =\n  ValD_take i\\<cdot>x\n\ngoal (1 subgoal):\n 1. ValD_copy_lub = ID", "}"], ["proof (state)\nthis:\n  ValD_take ?i2\\<cdot>(ValD_copy_i ?i2\\<cdot>(ValD_take ?i2\\<cdot>?x2)) =\n  ValD_take ?i2\\<cdot>?x2\n\ngoal (1 subgoal):\n 1. ValD_copy_lub = ID", "hence \"\\<And>x :: ValD. (\\<Squnion>i. ValD_take i\\<cdot>(ValD_copy_i i\\<cdot>(ValD_take i\\<cdot>x))) = (\\<Squnion>i. ValD_take i\\<cdot>x)\""], ["proof (prove)\nusing this:\n  ValD_take ?i2\\<cdot>(ValD_copy_i ?i2\\<cdot>(ValD_take ?i2\\<cdot>?x2)) =\n  ValD_take ?i2\\<cdot>?x2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<Squnion>i.\n           ValD_take i\\<cdot>(ValD_copy_i i\\<cdot>(ValD_take i\\<cdot>x))) =\n       (\\<Squnion>i. ValD_take i\\<cdot>x)", "by (blast intro: lub_eq)"], ["proof (state)\nthis:\n  (\\<Squnion>i.\n      ValD_take i\\<cdot>(ValD_copy_i i\\<cdot>(ValD_take i\\<cdot>?x))) =\n  (\\<Squnion>i. ValD_take i\\<cdot>?x)\n\ngoal (1 subgoal):\n 1. ValD_copy_lub = ID", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<Squnion>i.\n      ValD_take i\\<cdot>(ValD_copy_i i\\<cdot>(ValD_take i\\<cdot>?x))) =\n  (\\<Squnion>i. ValD_take i\\<cdot>?x)\n\ngoal (1 subgoal):\n 1. ValD_copy_lub = ID", "by (simp add: lub_distribs ValD.lub_take cfun_eq_iff)"], ["proof (state)\nthis:\n  ValD_copy_lub = ID\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>\n\nContinuations: we need to ensure the observation type is always the\nsame.\n\n\\<close>"], ["", "definition\n  KM_map :: \"('o ValK \\<rightarrow> 'o ValK) \\<rightarrow> 'o ValKM \\<rightarrow> 'o ValKM\"\nwhere\n  \"KM_map \\<equiv> \\<Lambda> f. cfun_map\\<cdot>(cfun_map\\<cdot>f\\<cdot>ID)\\<cdot>ID\""], ["", "lemma KM_map_id [intro, simp]:\n  \"KM_map\\<cdot>ID = ID\""], ["proof (prove)\ngoal (1 subgoal):\n 1. KM_map\\<cdot>ID = ID", "unfolding KM_map_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> f.\n        cfun_map\\<cdot>(cfun_map\\<cdot>f\\<cdot>ID)\\<cdot>ID)\\<cdot>\n    ID =\n    ID", "by (simp add: cfun_map_ID)"], ["", "lemma KM_map_strict [intro, simp]:\n  \"KM_map\\<cdot>f\\<cdot>\\<bottom> = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. KM_map\\<cdot>f\\<cdot>\\<bottom> = \\<bottom>", "unfolding KM_map_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> f.\n        cfun_map\\<cdot>(cfun_map\\<cdot>f\\<cdot>ID)\\<cdot>ID)\\<cdot>\n    f\\<cdot>\n    \\<bottom> =\n    \\<bottom>", "by (simp add: cfun_map_def)"], ["", "primrec\n  ValK_copy_i :: \"nat \\<Rightarrow> 'o ValK \\<rightarrow> 'o ValK\"\nwhere\n  \"ValK_copy_i 0 = \\<bottom>\"\n| \"ValK_copy_i (Suc n) = (\\<Lambda> v. case v of ValKF\\<cdot>f \\<Rightarrow> ValKF\\<cdot>(cfun_map\\<cdot>(KM_map\\<cdot>(ValK_copy_i n))\\<cdot>(KM_map\\<cdot>(ValK_copy_i n))\\<cdot>f) | ValKTT \\<Rightarrow> ValKTT | ValKFF \\<Rightarrow> ValKFF | ValKN\\<cdot>m \\<Rightarrow> ValKN\\<cdot>m)\""], ["", "abbreviation\n  \"ValK_copy \\<equiv> (\\<Squnion>i. ValK_copy_i i)\""], ["", "lemma ValK_copy_chain [intro, simp]:\n  \"chain (ValK_copy_i :: nat \\<Rightarrow> 'o ValK \\<rightarrow> 'o ValK)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain ValK_copy_i", "proof(rule chainI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. ValK_copy_i i \\<sqsubseteq> ValK_copy_i (Suc i)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. ValK_copy_i i \\<sqsubseteq> ValK_copy_i (Suc i)", "show \"ValK_copy_i i \\<sqsubseteq> (ValK_copy_i (Suc i) :: 'o ValK \\<rightarrow> 'o ValK)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ValK_copy_i i \\<sqsubseteq> ValK_copy_i (Suc i)", "proof(induct i)"], ["proof (state)\ngoal (2 subgoals):\n 1. ValK_copy_i 0 \\<sqsubseteq> ValK_copy_i (Suc 0)\n 2. \\<And>i.\n       ValK_copy_i i \\<sqsubseteq> ValK_copy_i (Suc i) \\<Longrightarrow>\n       ValK_copy_i (Suc i) \\<sqsubseteq> ValK_copy_i (Suc (Suc i))", "case (Suc i)"], ["proof (state)\nthis:\n  ValK_copy_i i \\<sqsubseteq> ValK_copy_i (Suc i)\n\ngoal (2 subgoals):\n 1. ValK_copy_i 0 \\<sqsubseteq> ValK_copy_i (Suc 0)\n 2. \\<And>i.\n       ValK_copy_i i \\<sqsubseteq> ValK_copy_i (Suc i) \\<Longrightarrow>\n       ValK_copy_i (Suc i) \\<sqsubseteq> ValK_copy_i (Suc (Suc i))", "{"], ["proof (state)\nthis:\n  ValK_copy_i i \\<sqsubseteq> ValK_copy_i (Suc i)\n\ngoal (2 subgoals):\n 1. ValK_copy_i 0 \\<sqsubseteq> ValK_copy_i (Suc 0)\n 2. \\<And>i.\n       ValK_copy_i i \\<sqsubseteq> ValK_copy_i (Suc i) \\<Longrightarrow>\n       ValK_copy_i (Suc i) \\<sqsubseteq> ValK_copy_i (Suc (Suc i))", "fix x :: \"'o ValK\""], ["proof (state)\ngoal (2 subgoals):\n 1. ValK_copy_i 0 \\<sqsubseteq> ValK_copy_i (Suc 0)\n 2. \\<And>i.\n       ValK_copy_i i \\<sqsubseteq> ValK_copy_i (Suc i) \\<Longrightarrow>\n       ValK_copy_i (Suc i) \\<sqsubseteq> ValK_copy_i (Suc (Suc i))", "have \"ValK_copy_i (Suc i)\\<cdot>x \\<sqsubseteq> ValK_copy_i (Suc (Suc i))\\<cdot>x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ValK_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n    ValK_copy_i (Suc (Suc i))\\<cdot>x", "proof(cases x)"], ["proof (state)\ngoal (5 subgoals):\n 1. x = \\<bottom> \\<Longrightarrow>\n    ValK_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n    ValK_copy_i (Suc (Suc i))\\<cdot>x\n 2. \\<And>cfun.\n       x = ValKF\\<cdot>cfun \\<Longrightarrow>\n       ValK_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n       ValK_copy_i (Suc (Suc i))\\<cdot>x\n 3. x = ValKTT \\<Longrightarrow>\n    ValK_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n    ValK_copy_i (Suc (Suc i))\\<cdot>x\n 4. x = ValKFF \\<Longrightarrow>\n    ValK_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n    ValK_copy_i (Suc (Suc i))\\<cdot>x\n 5. \\<And>nat.\n       x = ValKN\\<cdot>nat \\<Longrightarrow>\n       ValK_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n       ValK_copy_i (Suc (Suc i))\\<cdot>x", "case (ValKF f)"], ["proof (state)\nthis:\n  x = ValKF\\<cdot>f\n\ngoal (5 subgoals):\n 1. x = \\<bottom> \\<Longrightarrow>\n    ValK_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n    ValK_copy_i (Suc (Suc i))\\<cdot>x\n 2. \\<And>cfun.\n       x = ValKF\\<cdot>cfun \\<Longrightarrow>\n       ValK_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n       ValK_copy_i (Suc (Suc i))\\<cdot>x\n 3. x = ValKTT \\<Longrightarrow>\n    ValK_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n    ValK_copy_i (Suc (Suc i))\\<cdot>x\n 4. x = ValKFF \\<Longrightarrow>\n    ValK_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n    ValK_copy_i (Suc (Suc i))\\<cdot>x\n 5. \\<And>nat.\n       x = ValKN\\<cdot>nat \\<Longrightarrow>\n       ValK_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n       ValK_copy_i (Suc (Suc i))\\<cdot>x", "with Suc"], ["proof (chain)\npicking this:\n  ValK_copy_i i \\<sqsubseteq> ValK_copy_i (Suc i)\n  x = ValKF\\<cdot>f", "show ?thesis"], ["proof (prove)\nusing this:\n  ValK_copy_i i \\<sqsubseteq> ValK_copy_i (Suc i)\n  x = ValKF\\<cdot>f\n\ngoal (1 subgoal):\n 1. ValK_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n    ValK_copy_i (Suc (Suc i))\\<cdot>x", "by (clarsimp simp: monofun_cfun KM_map_def)"], ["proof (state)\nthis:\n  ValK_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n  ValK_copy_i (Suc (Suc i))\\<cdot>x\n\ngoal (4 subgoals):\n 1. x = \\<bottom> \\<Longrightarrow>\n    ValK_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n    ValK_copy_i (Suc (Suc i))\\<cdot>x\n 2. x = ValKTT \\<Longrightarrow>\n    ValK_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n    ValK_copy_i (Suc (Suc i))\\<cdot>x\n 3. x = ValKFF \\<Longrightarrow>\n    ValK_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n    ValK_copy_i (Suc (Suc i))\\<cdot>x\n 4. \\<And>nat.\n       x = ValKN\\<cdot>nat \\<Longrightarrow>\n       ValK_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n       ValK_copy_i (Suc (Suc i))\\<cdot>x", "qed simp_all"], ["proof (state)\nthis:\n  ValK_copy_i (Suc i)\\<cdot>x \\<sqsubseteq>\n  ValK_copy_i (Suc (Suc i))\\<cdot>x\n\ngoal (2 subgoals):\n 1. ValK_copy_i 0 \\<sqsubseteq> ValK_copy_i (Suc 0)\n 2. \\<And>i.\n       ValK_copy_i i \\<sqsubseteq> ValK_copy_i (Suc i) \\<Longrightarrow>\n       ValK_copy_i (Suc i) \\<sqsubseteq> ValK_copy_i (Suc (Suc i))", "}"], ["proof (state)\nthis:\n  ValK_copy_i (Suc i)\\<cdot>?x2 \\<sqsubseteq>\n  ValK_copy_i (Suc (Suc i))\\<cdot>?x2\n\ngoal (2 subgoals):\n 1. ValK_copy_i 0 \\<sqsubseteq> ValK_copy_i (Suc 0)\n 2. \\<And>i.\n       ValK_copy_i i \\<sqsubseteq> ValK_copy_i (Suc i) \\<Longrightarrow>\n       ValK_copy_i (Suc i) \\<sqsubseteq> ValK_copy_i (Suc (Suc i))", "thus ?case"], ["proof (prove)\nusing this:\n  ValK_copy_i (Suc i)\\<cdot>?x2 \\<sqsubseteq>\n  ValK_copy_i (Suc (Suc i))\\<cdot>?x2\n\ngoal (1 subgoal):\n 1. ValK_copy_i (Suc i) \\<sqsubseteq> ValK_copy_i (Suc (Suc i))", "by (simp add: cfun_below_iff)"], ["proof (state)\nthis:\n  ValK_copy_i (Suc i) \\<sqsubseteq> ValK_copy_i (Suc (Suc i))\n\ngoal (1 subgoal):\n 1. ValK_copy_i 0 \\<sqsubseteq> ValK_copy_i (Suc 0)", "qed simp"], ["proof (state)\nthis:\n  ValK_copy_i i \\<sqsubseteq> ValK_copy_i (Suc i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ValK_copy_fix:\n  \"ValK_copy = (ID :: 'o ValK \\<rightarrow> 'o ValK)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ValK_copy = ID", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ValK_copy = ID", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. ValK_copy = ID", "fix x :: \"'o ValK\""], ["proof (state)\ngoal (1 subgoal):\n 1. ValK_copy = ID", "fix i :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. ValK_copy = ID", "have \"ValK_take i\\<cdot>(ValK_copy_i i\\<cdot>(ValK_take i\\<cdot>x)) = ValK_take i\\<cdot>x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ValK_take i\\<cdot>(ValK_copy_i i\\<cdot>(ValK_take i\\<cdot>x)) =\n    ValK_take i\\<cdot>x", "proof (induct i arbitrary: x)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       ValK_take 0\\<cdot>(ValK_copy_i 0\\<cdot>(ValK_take 0\\<cdot>x)) =\n       ValK_take 0\\<cdot>x\n 2. \\<And>i x.\n       (\\<And>x.\n           ValK_take i\\<cdot>(ValK_copy_i i\\<cdot>(ValK_take i\\<cdot>x)) =\n           ValK_take i\\<cdot>x) \\<Longrightarrow>\n       ValK_take (Suc i)\\<cdot>\n       (ValK_copy_i (Suc i)\\<cdot>(ValK_take (Suc i)\\<cdot>x)) =\n       ValK_take (Suc i)\\<cdot>x", "case (Suc n)"], ["proof (state)\nthis:\n  ValK_take n\\<cdot>(ValK_copy_i n\\<cdot>(ValK_take n\\<cdot>?x)) =\n  ValK_take n\\<cdot>?x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       ValK_take 0\\<cdot>(ValK_copy_i 0\\<cdot>(ValK_take 0\\<cdot>x)) =\n       ValK_take 0\\<cdot>x\n 2. \\<And>i x.\n       (\\<And>x.\n           ValK_take i\\<cdot>(ValK_copy_i i\\<cdot>(ValK_take i\\<cdot>x)) =\n           ValK_take i\\<cdot>x) \\<Longrightarrow>\n       ValK_take (Suc i)\\<cdot>\n       (ValK_copy_i (Suc i)\\<cdot>(ValK_take (Suc i)\\<cdot>x)) =\n       ValK_take (Suc i)\\<cdot>x", "thus ?case"], ["proof (prove)\nusing this:\n  ValK_take n\\<cdot>(ValK_copy_i n\\<cdot>(ValK_take n\\<cdot>?x)) =\n  ValK_take n\\<cdot>?x\n\ngoal (1 subgoal):\n 1. ValK_take (Suc n)\\<cdot>\n    (ValK_copy_i (Suc n)\\<cdot>(ValK_take (Suc n)\\<cdot>x)) =\n    ValK_take (Suc n)\\<cdot>x", "by (cases x) (simp_all add: KM_map_def cfun_map_def)"], ["proof (state)\nthis:\n  ValK_take (Suc n)\\<cdot>\n  (ValK_copy_i (Suc n)\\<cdot>(ValK_take (Suc n)\\<cdot>x)) =\n  ValK_take (Suc n)\\<cdot>x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       ValK_take 0\\<cdot>(ValK_copy_i 0\\<cdot>(ValK_take 0\\<cdot>x)) =\n       ValK_take 0\\<cdot>x", "qed simp"], ["proof (state)\nthis:\n  ValK_take i\\<cdot>(ValK_copy_i i\\<cdot>(ValK_take i\\<cdot>x)) =\n  ValK_take i\\<cdot>x\n\ngoal (1 subgoal):\n 1. ValK_copy = ID", "}"], ["proof (state)\nthis:\n  ValK_take ?i2\\<cdot>(ValK_copy_i ?i2\\<cdot>(ValK_take ?i2\\<cdot>?x2)) =\n  ValK_take ?i2\\<cdot>?x2\n\ngoal (1 subgoal):\n 1. ValK_copy = ID", "hence \"\\<And>x :: 'o ValK. (\\<Squnion>i. ValK_take i\\<cdot>(ValK_copy_i i\\<cdot>(ValK_take i\\<cdot>x))) = (\\<Squnion>i. ValK_take i\\<cdot>x)\""], ["proof (prove)\nusing this:\n  ValK_take ?i2\\<cdot>(ValK_copy_i ?i2\\<cdot>(ValK_take ?i2\\<cdot>?x2)) =\n  ValK_take ?i2\\<cdot>?x2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<Squnion>i.\n           ValK_take i\\<cdot>(ValK_copy_i i\\<cdot>(ValK_take i\\<cdot>x))) =\n       (\\<Squnion>i. ValK_take i\\<cdot>x)", "by (blast intro: lub_eq)"], ["proof (state)\nthis:\n  (\\<Squnion>i.\n      ValK_take i\\<cdot>(ValK_copy_i i\\<cdot>(ValK_take i\\<cdot>?x))) =\n  (\\<Squnion>i. ValK_take i\\<cdot>?x)\n\ngoal (1 subgoal):\n 1. ValK_copy = ID", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<Squnion>i.\n      ValK_take i\\<cdot>(ValK_copy_i i\\<cdot>(ValK_take i\\<cdot>?x))) =\n  (\\<Squnion>i. ValK_take i\\<cdot>?x)\n\ngoal (1 subgoal):\n 1. ValK_copy = ID", "by (simp add: lub_distribs ValK.lub_take cfun_eq_iff)"], ["proof (state)\nthis:\n  ValK_copy = ID\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ValK_strict [intro, simp]:\n  \"ValK_copy\\<cdot>\\<bottom> = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ValK_copy\\<cdot>\\<bottom> = \\<bottom>", "by (simp add: ValK_copy_fix)"], ["", "text\\<open>\n\nWe need to respect the purported domain structure, and positive and\nnegative occurrences.\n\n\\<close>"], ["", "fixrec\n  ValD_copy_rec :: \"((ValD \\<rightarrow> ValD) \\<times> ((ValD \\<rightarrow> ValD) \\<rightarrow> (ValD \\<rightarrow> ValD)))\n                  \\<rightarrow> ((ValD \\<rightarrow> ValD) \\<times> ((ValD \\<rightarrow> ValD) \\<rightarrow> (ValD \\<rightarrow> ValD)))\"\nwhere\n  \"ValD_copy_rec\\<cdot>r =\n     (\\<Lambda> v. case v of ValF\\<cdot>f \\<Rightarrow> ValF\\<cdot>(snd r\\<cdot>f) | ValTT \\<Rightarrow> ValTT | ValFF \\<Rightarrow> ValFF | ValN\\<cdot>n \\<Rightarrow> ValN\\<cdot>n,\n      \\<Lambda> f. cfun_map\\<cdot>(strictify\\<cdot>(fst r))\\<cdot>(strictify\\<cdot>(fst r))\\<cdot>f)\""], ["", "abbreviation\n  ValD_copy_eta :: \"nat \\<Rightarrow> ValD \\<rightarrow> ValD\"\nwhere\n  \"ValD_copy_eta i \\<equiv> fst (iterate i\\<cdot>ValD_copy_rec\\<cdot>\\<bottom>)\""], ["", "abbreviation\n  ValD_copy_theta :: \"nat \\<Rightarrow> (ValD \\<rightarrow> ValD) \\<rightarrow> (ValD \\<rightarrow> ValD)\"\nwhere\n  \"ValD_copy_theta i \\<equiv> snd (iterate i\\<cdot>ValD_copy_rec\\<cdot>\\<bottom>)\""], ["", "lemma ValD_copy_eta_theta_strict [intro, simp]:\n  \"ValD_copy_eta n\\<cdot>\\<bottom> = \\<bottom>\"\n  \"ValD_copy_theta n\\<cdot>\\<bottom> = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ValD_copy_eta n\\<cdot>\\<bottom> = \\<bottom> &&&\n    ValD_copy_theta n\\<cdot>\\<bottom> = \\<bottom>", "by (induct n) (simp_all add: cfun_map_def)"], ["", "lemma ValD_copy_fix_strict [simp]:\n  \"fst (fix\\<cdot>ValD_copy_rec)\\<cdot>\\<bottom> = \\<bottom>\"\n  \"snd (fix\\<cdot>ValD_copy_rec)\\<cdot>\\<bottom> = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (fix\\<cdot>Continuations.ValD_copy_rec)\\<cdot>\\<bottom> =\n    \\<bottom> &&&\n    snd (fix\\<cdot>Continuations.ValD_copy_rec)\\<cdot>\\<bottom> = \\<bottom>", "by (subst fix_eq, simp add: cfun_map_def)+"], ["", "lemma ValD_copy_rec_ValD_copy_lub:\n  \"fix\\<cdot>ValD_copy_rec = (ValD_copy_lub, cfun_map\\<cdot>ValD_copy_lub\\<cdot>ValD_copy_lub)\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. fix\\<cdot>Continuations.ValD_copy_rec =\n    (ValD_copy_lub, cfun_map\\<cdot>ValD_copy_lub\\<cdot>ValD_copy_lub)", "proof(rule below_antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. fix\\<cdot>Continuations.ValD_copy_rec \\<sqsubseteq>\n    (ValD_copy_lub, cfun_map\\<cdot>ValD_copy_lub\\<cdot>ValD_copy_lub)\n 2. (ValD_copy_lub,\n     cfun_map\\<cdot>ValD_copy_lub\\<cdot>ValD_copy_lub) \\<sqsubseteq>\n    fix\\<cdot>Continuations.ValD_copy_rec", "show \"?lhs \\<sqsubseteq> ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fix\\<cdot>Continuations.ValD_copy_rec \\<sqsubseteq>\n    (ValD_copy_lub, cfun_map\\<cdot>ValD_copy_lub\\<cdot>ValD_copy_lub)", "apply (rule fix_least)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Continuations.ValD_copy_rec\\<cdot>\n    (ValD_copy_lub, cfun_map\\<cdot>ValD_copy_lub\\<cdot>ValD_copy_lub) =\n    (ValD_copy_lub, cfun_map\\<cdot>ValD_copy_lub\\<cdot>ValD_copy_lub)", "apply (simp add: eta_cfun strictify_cancel ValD_copy_lub_ID cfun_map_def ID_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  fix\\<cdot>Continuations.ValD_copy_rec \\<sqsubseteq>\n  (ValD_copy_lub, cfun_map\\<cdot>ValD_copy_lub\\<cdot>ValD_copy_lub)\n\ngoal (1 subgoal):\n 1. (ValD_copy_lub,\n     cfun_map\\<cdot>ValD_copy_lub\\<cdot>ValD_copy_lub) \\<sqsubseteq>\n    fix\\<cdot>Continuations.ValD_copy_rec", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (ValD_copy_lub,\n     cfun_map\\<cdot>ValD_copy_lub\\<cdot>ValD_copy_lub) \\<sqsubseteq>\n    fix\\<cdot>Continuations.ValD_copy_rec", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (ValD_copy_lub,\n     cfun_map\\<cdot>ValD_copy_lub\\<cdot>ValD_copy_lub) \\<sqsubseteq>\n    fix\\<cdot>Continuations.ValD_copy_rec", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. (ValD_copy_lub,\n     cfun_map\\<cdot>ValD_copy_lub\\<cdot>ValD_copy_lub) \\<sqsubseteq>\n    fix\\<cdot>Continuations.ValD_copy_rec", "have \"ValD_copy_i i \\<sqsubseteq> fst (fix\\<cdot>ValD_copy_rec)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ValD_copy_i i \\<sqsubseteq> fst (fix\\<cdot>Continuations.ValD_copy_rec)", "proof(induct i)"], ["proof (state)\ngoal (2 subgoals):\n 1. ValD_copy_i 0 \\<sqsubseteq> fst (fix\\<cdot>Continuations.ValD_copy_rec)\n 2. \\<And>i.\n       ValD_copy_i i \\<sqsubseteq>\n       fst (fix\\<cdot>Continuations.ValD_copy_rec) \\<Longrightarrow>\n       ValD_copy_i (Suc i) \\<sqsubseteq>\n       fst (fix\\<cdot>Continuations.ValD_copy_rec)", "case (Suc i)"], ["proof (state)\nthis:\n  ValD_copy_i i \\<sqsubseteq> fst (fix\\<cdot>Continuations.ValD_copy_rec)\n\ngoal (2 subgoals):\n 1. ValD_copy_i 0 \\<sqsubseteq> fst (fix\\<cdot>Continuations.ValD_copy_rec)\n 2. \\<And>i.\n       ValD_copy_i i \\<sqsubseteq>\n       fst (fix\\<cdot>Continuations.ValD_copy_rec) \\<Longrightarrow>\n       ValD_copy_i (Suc i) \\<sqsubseteq>\n       fst (fix\\<cdot>Continuations.ValD_copy_rec)", "thus ?case"], ["proof (prove)\nusing this:\n  ValD_copy_i i \\<sqsubseteq> fst (fix\\<cdot>Continuations.ValD_copy_rec)\n\ngoal (1 subgoal):\n 1. ValD_copy_i (Suc i) \\<sqsubseteq>\n    fst (fix\\<cdot>Continuations.ValD_copy_rec)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. ValD_copy_i i \\<sqsubseteq>\n    fst (fix\\<cdot>Continuations.ValD_copy_rec) \\<Longrightarrow>\n    ValD_copy_i (Suc i) \\<sqsubseteq>\n    fst (fix\\<cdot>Continuations.ValD_copy_rec)", "apply (subst fix_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ValD_copy_i i \\<sqsubseteq>\n    fst (fix\\<cdot>Continuations.ValD_copy_rec) \\<Longrightarrow>\n    ValD_copy_i (Suc i) \\<sqsubseteq>\n    fst (Continuations.ValD_copy_rec\\<cdot>\n         (fix\\<cdot>Continuations.ValD_copy_rec))", "apply (subst fix_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ValD_copy_i i \\<sqsubseteq>\n    fst (fix\\<cdot>Continuations.ValD_copy_rec) \\<Longrightarrow>\n    ValD_copy_i (Suc i) \\<sqsubseteq>\n    fst (Continuations.ValD_copy_rec\\<cdot>\n         (Continuations.ValD_copy_rec\\<cdot>\n          (fix\\<cdot>Continuations.ValD_copy_rec)))", "apply (simp add: eta_cfun strictify_cancel cfcomp1 cfun_map_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ValD_copy_i i \\<sqsubseteq>\n    fst (fix\\<cdot>Continuations.ValD_copy_rec) \\<Longrightarrow>\n    ValD_case\\<cdot>\n    (\\<Lambda> f.\n        ValF\\<cdot>\n        (\\<Lambda> x.\n            ValD_copy_i i\\<cdot>(f\\<cdot>(ValD_copy_i i\\<cdot>x))))\\<cdot>\n    ValTT\\<cdot>\n    ValFF\\<cdot>\n    ValN \\<sqsubseteq>\n    ValD_case\\<cdot>\n    (\\<Lambda> f.\n        ValF\\<cdot>\n        (\\<Lambda> x.\n            fst (fix\\<cdot>Continuations.ValD_copy_rec)\\<cdot>\n            (f\\<cdot>\n             (fst (fix\\<cdot>Continuations.ValD_copy_rec)\\<cdot>x))))\\<cdot>\n    ValTT\\<cdot>\n    ValFF\\<cdot>\n    ValN", "apply (intro monofun_cfun_fun monofun_cfun_arg)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ValD_copy_i i \\<sqsubseteq>\n    fst (fix\\<cdot>Continuations.ValD_copy_rec) \\<Longrightarrow>\n    (\\<Lambda> f.\n        ValF\\<cdot>\n        (\\<Lambda> x.\n            ValD_copy_i i\\<cdot>\n            (f\\<cdot>(ValD_copy_i i\\<cdot>x)))) \\<sqsubseteq>\n    (\\<Lambda> f.\n        ValF\\<cdot>\n        (\\<Lambda> x.\n            fst (fix\\<cdot>Continuations.ValD_copy_rec)\\<cdot>\n            (f\\<cdot>\n             (fst (fix\\<cdot>Continuations.ValD_copy_rec)\\<cdot>x))))", "apply (simp add: eta_cfun strictify_cancel monofun_cfun cfcomp1 cfun_map_def cfun_below_iff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ValD_copy_i (Suc i) \\<sqsubseteq>\n  fst (fix\\<cdot>Continuations.ValD_copy_rec)\n\ngoal (1 subgoal):\n 1. ValD_copy_i 0 \\<sqsubseteq> fst (fix\\<cdot>Continuations.ValD_copy_rec)", "qed simp"], ["proof (state)\nthis:\n  ValD_copy_i i \\<sqsubseteq> fst (fix\\<cdot>Continuations.ValD_copy_rec)\n\ngoal (1 subgoal):\n 1. (ValD_copy_lub,\n     cfun_map\\<cdot>ValD_copy_lub\\<cdot>ValD_copy_lub) \\<sqsubseteq>\n    fix\\<cdot>Continuations.ValD_copy_rec", "}"], ["proof (state)\nthis:\n  ValD_copy_i ?i2 \\<sqsubseteq> fst (fix\\<cdot>Continuations.ValD_copy_rec)\n\ngoal (1 subgoal):\n 1. (ValD_copy_lub,\n     cfun_map\\<cdot>ValD_copy_lub\\<cdot>ValD_copy_lub) \\<sqsubseteq>\n    fix\\<cdot>Continuations.ValD_copy_rec", "hence D: \"ValD_copy_lub \\<sqsubseteq> fst (fix\\<cdot>ValD_copy_rec)\""], ["proof (prove)\nusing this:\n  ValD_copy_i ?i2 \\<sqsubseteq> fst (fix\\<cdot>Continuations.ValD_copy_rec)\n\ngoal (1 subgoal):\n 1. ValD_copy_lub \\<sqsubseteq> fst (fix\\<cdot>Continuations.ValD_copy_rec)", "by (simp add: lub_below_iff)"], ["proof (state)\nthis:\n  ValD_copy_lub \\<sqsubseteq> fst (fix\\<cdot>Continuations.ValD_copy_rec)\n\ngoal (1 subgoal):\n 1. (ValD_copy_lub,\n     cfun_map\\<cdot>ValD_copy_lub\\<cdot>ValD_copy_lub) \\<sqsubseteq>\n    fix\\<cdot>Continuations.ValD_copy_rec", "moreover"], ["proof (state)\nthis:\n  ValD_copy_lub \\<sqsubseteq> fst (fix\\<cdot>Continuations.ValD_copy_rec)\n\ngoal (1 subgoal):\n 1. (ValD_copy_lub,\n     cfun_map\\<cdot>ValD_copy_lub\\<cdot>ValD_copy_lub) \\<sqsubseteq>\n    fix\\<cdot>Continuations.ValD_copy_rec", "from D"], ["proof (chain)\npicking this:\n  ValD_copy_lub \\<sqsubseteq> fst (fix\\<cdot>Continuations.ValD_copy_rec)", "have \"cfun_map\\<cdot>ValD_copy_lub\\<cdot>ValD_copy_lub \\<sqsubseteq> snd (fix\\<cdot>ValD_copy_rec)\""], ["proof (prove)\nusing this:\n  ValD_copy_lub \\<sqsubseteq> fst (fix\\<cdot>Continuations.ValD_copy_rec)\n\ngoal (1 subgoal):\n 1. cfun_map\\<cdot>ValD_copy_lub\\<cdot>ValD_copy_lub \\<sqsubseteq>\n    snd (fix\\<cdot>Continuations.ValD_copy_rec)", "by (subst fix_eq) (simp add: eta_cfun strictify_cancel monofun_cfun)"], ["proof (state)\nthis:\n  cfun_map\\<cdot>ValD_copy_lub\\<cdot>ValD_copy_lub \\<sqsubseteq>\n  snd (fix\\<cdot>Continuations.ValD_copy_rec)\n\ngoal (1 subgoal):\n 1. (ValD_copy_lub,\n     cfun_map\\<cdot>ValD_copy_lub\\<cdot>ValD_copy_lub) \\<sqsubseteq>\n    fix\\<cdot>Continuations.ValD_copy_rec", "ultimately"], ["proof (chain)\npicking this:\n  ValD_copy_lub \\<sqsubseteq> fst (fix\\<cdot>Continuations.ValD_copy_rec)\n  cfun_map\\<cdot>ValD_copy_lub\\<cdot>ValD_copy_lub \\<sqsubseteq>\n  snd (fix\\<cdot>Continuations.ValD_copy_rec)", "show \"?rhs \\<sqsubseteq> ?lhs\""], ["proof (prove)\nusing this:\n  ValD_copy_lub \\<sqsubseteq> fst (fix\\<cdot>Continuations.ValD_copy_rec)\n  cfun_map\\<cdot>ValD_copy_lub\\<cdot>ValD_copy_lub \\<sqsubseteq>\n  snd (fix\\<cdot>Continuations.ValD_copy_rec)\n\ngoal (1 subgoal):\n 1. (ValD_copy_lub,\n     cfun_map\\<cdot>ValD_copy_lub\\<cdot>ValD_copy_lub) \\<sqsubseteq>\n    fix\\<cdot>Continuations.ValD_copy_rec", "by (simp add: prod_belowI)"], ["proof (state)\nthis:\n  (ValD_copy_lub,\n   cfun_map\\<cdot>ValD_copy_lub\\<cdot>ValD_copy_lub) \\<sqsubseteq>\n  fix\\<cdot>Continuations.ValD_copy_rec\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fix_ValD_copy_rec_ID:\n  \"fix\\<cdot>ValD_copy_rec = (ID, ID)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fix\\<cdot>Continuations.ValD_copy_rec = (ID, ID)", "using ValD_copy_rec_ValD_copy_lub ValD_copy_lub_ID cfun_map_ID"], ["proof (prove)\nusing this:\n  fix\\<cdot>Continuations.ValD_copy_rec =\n  (ValD_copy_lub, cfun_map\\<cdot>ValD_copy_lub\\<cdot>ValD_copy_lub)\n  ValD_copy_lub = ID\n  cfun_map\\<cdot>ID\\<cdot>ID = ID\n\ngoal (1 subgoal):\n 1. fix\\<cdot>Continuations.ValD_copy_rec = (ID, ID)", "by simp"], ["", "fixrec\n  ValK_copy_rec :: \"(('o ValKM \\<rightarrow> 'o ValKM) \\<times> (('o ValKM \\<rightarrow> 'o ValKM) \\<rightarrow> ('o ValKM \\<rightarrow> 'o ValKM)))\n                  \\<rightarrow> ('o ValKM \\<rightarrow> 'o ValKM) \\<times> (('o ValKM \\<rightarrow> 'o ValKM) \\<rightarrow> ('o ValKM \\<rightarrow> 'o ValKM))\"\nwhere\n  \"ValK_copy_rec\\<cdot>r =\n     (\\<Lambda> vm. KM_map\\<cdot>(\\<Lambda> v. case v of ValKF\\<cdot>f \\<Rightarrow> ValKF\\<cdot>(snd r\\<cdot>f) | ValKTT \\<Rightarrow> ValKTT | ValKFF \\<Rightarrow> ValKFF | ValKN\\<cdot>a \\<Rightarrow> ValKN\\<cdot>a)\\<cdot>vm,\n      \\<Lambda> f. cfun_map\\<cdot>(strictify\\<cdot>(fst r))\\<cdot>(strictify\\<cdot>(fst r))\\<cdot>f)\""], ["", "abbreviation\n  ValK_copy_eta\nwhere\n  \"ValK_copy_eta i \\<equiv> fst (iterate i\\<cdot>ValK_copy_rec\\<cdot>\\<bottom>)\""], ["", "abbreviation\n  ValK_copy_theta\nwhere\n  \"ValK_copy_theta i \\<equiv> snd (iterate i\\<cdot>ValK_copy_rec\\<cdot>\\<bottom>)\""], ["", "lemma ValK_copy_strict [intro, simp]:\n  \"ValK_copy_eta n\\<cdot>\\<bottom> = (\\<bottom> :: 'o ValKM)\"\n  \"ValK_copy_theta n\\<cdot>\\<bottom> = (\\<bottom> :: 'o ValKM \\<rightarrow> 'o ValKM)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ValK_copy_eta n\\<cdot>\\<bottom> = \\<bottom> &&&\n    ValK_copy_theta n\\<cdot>\\<bottom> = \\<bottom>", "by (induct n) (simp_all add: cfun_map_def)"], ["", "lemma ValK_copy_fix_strict [simp]:\n  \"fst (fix\\<cdot>ValK_copy_rec)\\<cdot>\\<bottom> = \\<bottom>\"\n  \"snd (fix\\<cdot>ValK_copy_rec)\\<cdot>\\<bottom> = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (fix\\<cdot>ValK_copy_rec)\\<cdot>\\<bottom> = \\<bottom> &&&\n    snd (fix\\<cdot>ValK_copy_rec)\\<cdot>\\<bottom> = \\<bottom>", "by (subst fix_eq, simp add: cfun_map_def)+"], ["", "lemma ValK_copy_rec_ValK_copy:\n  \"fix\\<cdot>ValK_copy_rec\n  = (KM_map\\<cdot>(ValK_copy :: 'o ValK \\<rightarrow> 'o ValK),\n     cfun_map\\<cdot>(KM_map\\<cdot>ValK_copy)\\<cdot>(KM_map\\<cdot>ValK_copy))\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. fix\\<cdot>ValK_copy_rec =\n    (KM_map\\<cdot>ValK_copy,\n     cfun_map\\<cdot>(KM_map\\<cdot>ValK_copy)\\<cdot>(KM_map\\<cdot>ValK_copy))", "proof(rule below_antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. fix\\<cdot>ValK_copy_rec \\<sqsubseteq>\n    (KM_map\\<cdot>ValK_copy,\n     cfun_map\\<cdot>(KM_map\\<cdot>ValK_copy)\\<cdot>(KM_map\\<cdot>ValK_copy))\n 2. (KM_map\\<cdot>ValK_copy,\n     cfun_map\\<cdot>(KM_map\\<cdot>ValK_copy)\\<cdot>\n     (KM_map\\<cdot>ValK_copy)) \\<sqsubseteq>\n    fix\\<cdot>ValK_copy_rec", "show \"?lhs \\<sqsubseteq> ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fix\\<cdot>ValK_copy_rec \\<sqsubseteq>\n    (KM_map\\<cdot>ValK_copy,\n     cfun_map\\<cdot>(KM_map\\<cdot>ValK_copy)\\<cdot>(KM_map\\<cdot>ValK_copy))", "apply (rule fix_least)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ValK_copy_rec\\<cdot>\n    (KM_map\\<cdot>ValK_copy,\n     cfun_map\\<cdot>(KM_map\\<cdot>ValK_copy)\\<cdot>\n     (KM_map\\<cdot>ValK_copy)) =\n    (KM_map\\<cdot>ValK_copy,\n     cfun_map\\<cdot>(KM_map\\<cdot>ValK_copy)\\<cdot>(KM_map\\<cdot>ValK_copy))", "apply (simp add: eta_cfun strictify_cancel cfun_map_def ID_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. KM_map\\<cdot>\n    (ValK_case\\<cdot>\n     (\\<Lambda> f.\n         ValKF\\<cdot>\n         (\\<Lambda> x.\n             KM_map\\<cdot>ValK_copy\\<cdot>\n             (f\\<cdot>(KM_map\\<cdot>ValK_copy\\<cdot>x))))\\<cdot>\n     ValKTT\\<cdot>\n     ValKFF\\<cdot>\n     ValKN) =\n    KM_map\\<cdot>ValK_copy", "apply (intro cfun_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       KM_map\\<cdot>\n       (ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>\n            (\\<Lambda> x.\n                KM_map\\<cdot>ValK_copy\\<cdot>\n                (f\\<cdot>(KM_map\\<cdot>ValK_copy\\<cdot>x))))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN)\\<cdot>\n       x\\<cdot>\n       xa =\n       KM_map\\<cdot>ValK_copy\\<cdot>x\\<cdot>xa", "apply (simp add: KM_map_def cfun_map_def ValK_copy_fix eta_cfun)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  fix\\<cdot>ValK_copy_rec \\<sqsubseteq>\n  (KM_map\\<cdot>ValK_copy,\n   cfun_map\\<cdot>(KM_map\\<cdot>ValK_copy)\\<cdot>(KM_map\\<cdot>ValK_copy))\n\ngoal (1 subgoal):\n 1. (KM_map\\<cdot>ValK_copy,\n     cfun_map\\<cdot>(KM_map\\<cdot>ValK_copy)\\<cdot>\n     (KM_map\\<cdot>ValK_copy)) \\<sqsubseteq>\n    fix\\<cdot>ValK_copy_rec", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (KM_map\\<cdot>ValK_copy,\n     cfun_map\\<cdot>(KM_map\\<cdot>ValK_copy)\\<cdot>\n     (KM_map\\<cdot>ValK_copy)) \\<sqsubseteq>\n    fix\\<cdot>ValK_copy_rec", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (KM_map\\<cdot>ValK_copy,\n     cfun_map\\<cdot>(KM_map\\<cdot>ValK_copy)\\<cdot>\n     (KM_map\\<cdot>ValK_copy)) \\<sqsubseteq>\n    fix\\<cdot>ValK_copy_rec", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. (KM_map\\<cdot>ValK_copy,\n     cfun_map\\<cdot>(KM_map\\<cdot>ValK_copy)\\<cdot>\n     (KM_map\\<cdot>ValK_copy)) \\<sqsubseteq>\n    fix\\<cdot>ValK_copy_rec", "have \"KM_map\\<cdot>(ValK_copy_i i :: 'o ValK \\<rightarrow> 'o ValK) \\<sqsubseteq> fst (fix\\<cdot>ValK_copy_rec)\"\n     and \"(ValK_copy_i i :: 'o ValK \\<rightarrow> 'o ValK) \\<sqsubseteq> ValK_case\\<cdot>(\\<Lambda> f. ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>ValKTT\\<cdot>ValKFF\\<cdot>ValKN\""], ["proof (prove)\ngoal (1 subgoal):\n 1. KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n    fst (fix\\<cdot>ValK_copy_rec) &&&\n    ValK_copy_i i \\<sqsubseteq>\n    ValK_case\\<cdot>\n    (\\<Lambda> f.\n        ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n    ValKTT\\<cdot>\n    ValKFF\\<cdot>\n    ValKN", "proof(induct i)"], ["proof (state)\ngoal (4 subgoals):\n 1. KM_map\\<cdot>(ValK_copy_i 0) \\<sqsubseteq> fst (fix\\<cdot>ValK_copy_rec)\n 2. ValK_copy_i 0 \\<sqsubseteq>\n    ValK_case\\<cdot>\n    (\\<Lambda> f.\n        ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n    ValKTT\\<cdot>\n    ValKFF\\<cdot>\n    ValKN\n 3. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> KM_map\\<cdot>(ValK_copy_i (Suc i)) \\<sqsubseteq>\n                         fst (fix\\<cdot>ValK_copy_rec)\n 4. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> ValK_copy_i (Suc i) \\<sqsubseteq>\n                         ValK_case\\<cdot>\n                         (\\<Lambda> f.\n                             ValKF\\<cdot>\n                             (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n                         ValKTT\\<cdot>\n                         ValKFF\\<cdot>\n                         ValKN", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. KM_map\\<cdot>(ValK_copy_i 0) \\<sqsubseteq> fst (fix\\<cdot>ValK_copy_rec)\n 2. ValK_copy_i 0 \\<sqsubseteq>\n    ValK_case\\<cdot>\n    (\\<Lambda> f.\n        ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n    ValKTT\\<cdot>\n    ValKFF\\<cdot>\n    ValKN\n 3. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> KM_map\\<cdot>(ValK_copy_i (Suc i)) \\<sqsubseteq>\n                         fst (fix\\<cdot>ValK_copy_rec)\n 4. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> ValK_copy_i (Suc i) \\<sqsubseteq>\n                         ValK_case\\<cdot>\n                         (\\<Lambda> f.\n                             ValKF\\<cdot>\n                             (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n                         ValKTT\\<cdot>\n                         ValKFF\\<cdot>\n                         ValKN", "{"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. KM_map\\<cdot>(ValK_copy_i 0) \\<sqsubseteq> fst (fix\\<cdot>ValK_copy_rec)\n 2. ValK_copy_i 0 \\<sqsubseteq>\n    ValK_case\\<cdot>\n    (\\<Lambda> f.\n        ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n    ValKTT\\<cdot>\n    ValKFF\\<cdot>\n    ValKN\n 3. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> KM_map\\<cdot>(ValK_copy_i (Suc i)) \\<sqsubseteq>\n                         fst (fix\\<cdot>ValK_copy_rec)\n 4. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> ValK_copy_i (Suc i) \\<sqsubseteq>\n                         ValK_case\\<cdot>\n                         (\\<Lambda> f.\n                             ValKF\\<cdot>\n                             (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n                         ValKTT\\<cdot>\n                         ValKFF\\<cdot>\n                         ValKN", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. KM_map\\<cdot>(ValK_copy_i 0) \\<sqsubseteq> fst (fix\\<cdot>ValK_copy_rec)\n 2. ValK_copy_i 0 \\<sqsubseteq>\n    ValK_case\\<cdot>\n    (\\<Lambda> f.\n        ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n    ValKTT\\<cdot>\n    ValKFF\\<cdot>\n    ValKN\n 3. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> KM_map\\<cdot>(ValK_copy_i (Suc i)) \\<sqsubseteq>\n                         fst (fix\\<cdot>ValK_copy_rec)\n 4. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> ValK_copy_i (Suc i) \\<sqsubseteq>\n                         ValK_case\\<cdot>\n                         (\\<Lambda> f.\n                             ValKF\\<cdot>\n                             (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n                         ValKTT\\<cdot>\n                         ValKFF\\<cdot>\n                         ValKN", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. KM_map\\<cdot>(ValK_copy_i 0) \\<sqsubseteq> fst (fix\\<cdot>ValK_copy_rec)", "apply (subst fix_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. KM_map\\<cdot>(ValK_copy_i 0) \\<sqsubseteq>\n    fst (ValK_copy_rec\\<cdot>(fix\\<cdot>ValK_copy_rec))", "apply (auto iff: cfun_below_iff intro!: monofun_cfun_arg simp: KM_map_def cfun_map_def eta_cfun)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  KM_map\\<cdot>(ValK_copy_i 0) \\<sqsubseteq> fst (fix\\<cdot>ValK_copy_rec)\n\ngoal (3 subgoals):\n 1. ValK_copy_i 0 \\<sqsubseteq>\n    ValK_case\\<cdot>\n    (\\<Lambda> f.\n        ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n    ValKTT\\<cdot>\n    ValKFF\\<cdot>\n    ValKN\n 2. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> KM_map\\<cdot>(ValK_copy_i (Suc i)) \\<sqsubseteq>\n                         fst (fix\\<cdot>ValK_copy_rec)\n 3. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> ValK_copy_i (Suc i) \\<sqsubseteq>\n                         ValK_case\\<cdot>\n                         (\\<Lambda> f.\n                             ValKF\\<cdot>\n                             (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n                         ValKTT\\<cdot>\n                         ValKFF\\<cdot>\n                         ValKN", "}"], ["proof (state)\nthis:\n  KM_map\\<cdot>(ValK_copy_i 0) \\<sqsubseteq> fst (fix\\<cdot>ValK_copy_rec)\n\ngoal (3 subgoals):\n 1. ValK_copy_i 0 \\<sqsubseteq>\n    ValK_case\\<cdot>\n    (\\<Lambda> f.\n        ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n    ValKTT\\<cdot>\n    ValKFF\\<cdot>\n    ValKN\n 2. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> KM_map\\<cdot>(ValK_copy_i (Suc i)) \\<sqsubseteq>\n                         fst (fix\\<cdot>ValK_copy_rec)\n 3. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> ValK_copy_i (Suc i) \\<sqsubseteq>\n                         ValK_case\\<cdot>\n                         (\\<Lambda> f.\n                             ValKF\\<cdot>\n                             (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n                         ValKTT\\<cdot>\n                         ValKFF\\<cdot>\n                         ValKN", "{"], ["proof (state)\nthis:\n  KM_map\\<cdot>(ValK_copy_i 0) \\<sqsubseteq> fst (fix\\<cdot>ValK_copy_rec)\n\ngoal (3 subgoals):\n 1. ValK_copy_i 0 \\<sqsubseteq>\n    ValK_case\\<cdot>\n    (\\<Lambda> f.\n        ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n    ValKTT\\<cdot>\n    ValKFF\\<cdot>\n    ValKN\n 2. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> KM_map\\<cdot>(ValK_copy_i (Suc i)) \\<sqsubseteq>\n                         fst (fix\\<cdot>ValK_copy_rec)\n 3. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> ValK_copy_i (Suc i) \\<sqsubseteq>\n                         ValK_case\\<cdot>\n                         (\\<Lambda> f.\n                             ValKF\\<cdot>\n                             (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n                         ValKTT\\<cdot>\n                         ValKFF\\<cdot>\n                         ValKN", "case 2"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. ValK_copy_i 0 \\<sqsubseteq>\n    ValK_case\\<cdot>\n    (\\<Lambda> f.\n        ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n    ValKTT\\<cdot>\n    ValKFF\\<cdot>\n    ValKN\n 2. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> KM_map\\<cdot>(ValK_copy_i (Suc i)) \\<sqsubseteq>\n                         fst (fix\\<cdot>ValK_copy_rec)\n 3. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> ValK_copy_i (Suc i) \\<sqsubseteq>\n                         ValK_case\\<cdot>\n                         (\\<Lambda> f.\n                             ValKF\\<cdot>\n                             (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n                         ValKTT\\<cdot>\n                         ValKFF\\<cdot>\n                         ValKN", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ValK_copy_i 0 \\<sqsubseteq>\n    ValK_case\\<cdot>\n    (\\<Lambda> f.\n        ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n    ValKTT\\<cdot>\n    ValKFF\\<cdot>\n    ValKN", "by simp"], ["proof (state)\nthis:\n  ValK_copy_i 0 \\<sqsubseteq>\n  ValK_case\\<cdot>\n  (\\<Lambda> f. ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n  ValKTT\\<cdot>\n  ValKFF\\<cdot>\n  ValKN\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> KM_map\\<cdot>(ValK_copy_i (Suc i)) \\<sqsubseteq>\n                         fst (fix\\<cdot>ValK_copy_rec)\n 2. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> ValK_copy_i (Suc i) \\<sqsubseteq>\n                         ValK_case\\<cdot>\n                         (\\<Lambda> f.\n                             ValKF\\<cdot>\n                             (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n                         ValKTT\\<cdot>\n                         ValKFF\\<cdot>\n                         ValKN", "}"], ["proof (state)\nthis:\n  ValK_copy_i 0 \\<sqsubseteq>\n  ValK_case\\<cdot>\n  (\\<Lambda> f. ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n  ValKTT\\<cdot>\n  ValKFF\\<cdot>\n  ValKN\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> KM_map\\<cdot>(ValK_copy_i (Suc i)) \\<sqsubseteq>\n                         fst (fix\\<cdot>ValK_copy_rec)\n 2. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> ValK_copy_i (Suc i) \\<sqsubseteq>\n                         ValK_case\\<cdot>\n                         (\\<Lambda> f.\n                             ValKF\\<cdot>\n                             (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n                         ValKTT\\<cdot>\n                         ValKFF\\<cdot>\n                         ValKN", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> KM_map\\<cdot>(ValK_copy_i (Suc i)) \\<sqsubseteq>\n                         fst (fix\\<cdot>ValK_copy_rec)\n 2. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> ValK_copy_i (Suc i) \\<sqsubseteq>\n                         ValK_case\\<cdot>\n                         (\\<Lambda> f.\n                             ValKF\\<cdot>\n                             (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n                         ValKTT\\<cdot>\n                         ValKFF\\<cdot>\n                         ValKN", "case (Suc i)"], ["proof (state)\nthis:\n  KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq> fst (fix\\<cdot>ValK_copy_rec)\n  ValK_copy_i i \\<sqsubseteq>\n  ValK_case\\<cdot>\n  (\\<Lambda> f. ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n  ValKTT\\<cdot>\n  ValKFF\\<cdot>\n  ValKN\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> KM_map\\<cdot>(ValK_copy_i (Suc i)) \\<sqsubseteq>\n                         fst (fix\\<cdot>ValK_copy_rec)\n 2. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> ValK_copy_i (Suc i) \\<sqsubseteq>\n                         ValK_case\\<cdot>\n                         (\\<Lambda> f.\n                             ValKF\\<cdot>\n                             (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n                         ValKTT\\<cdot>\n                         ValKFF\\<cdot>\n                         ValKN", "{"], ["proof (state)\nthis:\n  KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq> fst (fix\\<cdot>ValK_copy_rec)\n  ValK_copy_i i \\<sqsubseteq>\n  ValK_case\\<cdot>\n  (\\<Lambda> f. ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n  ValKTT\\<cdot>\n  ValKFF\\<cdot>\n  ValKN\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> KM_map\\<cdot>(ValK_copy_i (Suc i)) \\<sqsubseteq>\n                         fst (fix\\<cdot>ValK_copy_rec)\n 2. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> ValK_copy_i (Suc i) \\<sqsubseteq>\n                         ValK_case\\<cdot>\n                         (\\<Lambda> f.\n                             ValKF\\<cdot>\n                             (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n                         ValKTT\\<cdot>\n                         ValKFF\\<cdot>\n                         ValKN", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> KM_map\\<cdot>(ValK_copy_i (Suc i)) \\<sqsubseteq>\n                         fst (fix\\<cdot>ValK_copy_rec)\n 2. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> ValK_copy_i (Suc i) \\<sqsubseteq>\n                         ValK_case\\<cdot>\n                         (\\<Lambda> f.\n                             ValKF\\<cdot>\n                             (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n                         ValKTT\\<cdot>\n                         ValKFF\\<cdot>\n                         ValKN", "from Suc"], ["proof (chain)\npicking this:\n  KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq> fst (fix\\<cdot>ValK_copy_rec)\n  ValK_copy_i i \\<sqsubseteq>\n  ValK_case\\<cdot>\n  (\\<Lambda> f. ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n  ValKTT\\<cdot>\n  ValKFF\\<cdot>\n  ValKN", "show ?case"], ["proof (prove)\nusing this:\n  KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq> fst (fix\\<cdot>ValK_copy_rec)\n  ValK_copy_i i \\<sqsubseteq>\n  ValK_case\\<cdot>\n  (\\<Lambda> f. ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n  ValKTT\\<cdot>\n  ValKFF\\<cdot>\n  ValKN\n\ngoal (1 subgoal):\n 1. KM_map\\<cdot>(ValK_copy_i (Suc i)) \\<sqsubseteq>\n    fst (fix\\<cdot>ValK_copy_rec)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n             fst (fix\\<cdot>ValK_copy_rec);\n     ValK_copy_i i \\<sqsubseteq>\n     ValK_case\\<cdot>\n     (\\<Lambda> f.\n         ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n     ValKTT\\<cdot>\n     ValKFF\\<cdot>\n     ValKN\\<rbrakk>\n    \\<Longrightarrow> KM_map\\<cdot>(ValK_copy_i (Suc i)) \\<sqsubseteq>\n                      fst (fix\\<cdot>ValK_copy_rec)", "apply (subst fix_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n             fst (fix\\<cdot>ValK_copy_rec);\n     ValK_copy_i i \\<sqsubseteq>\n     ValK_case\\<cdot>\n     (\\<Lambda> f.\n         ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n     ValKTT\\<cdot>\n     ValKFF\\<cdot>\n     ValKN\\<rbrakk>\n    \\<Longrightarrow> KM_map\\<cdot>(ValK_copy_i (Suc i)) \\<sqsubseteq>\n                      fst (ValK_copy_rec\\<cdot>(fix\\<cdot>ValK_copy_rec))", "apply (subst fix_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n             fst (fix\\<cdot>ValK_copy_rec);\n     ValK_copy_i i \\<sqsubseteq>\n     ValK_case\\<cdot>\n     (\\<Lambda> f.\n         ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n     ValKTT\\<cdot>\n     ValKFF\\<cdot>\n     ValKN\\<rbrakk>\n    \\<Longrightarrow> KM_map\\<cdot>(ValK_copy_i (Suc i)) \\<sqsubseteq>\n                      fst (ValK_copy_rec\\<cdot>\n                           (ValK_copy_rec\\<cdot>(fix\\<cdot>ValK_copy_rec)))", "apply (simp add: eta_cfun strictify_cancel cfcomp1 cfun_map_def KM_map_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<Lambda> f x.\n                 f\\<cdot>\n                 (\\<Lambda> xa.\n                     x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n             fst (fix\\<cdot>ValK_copy_rec);\n     ValK_copy_i i \\<sqsubseteq>\n     ValK_case\\<cdot>\n     (\\<Lambda> f.\n         ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n     ValKTT\\<cdot>\n     ValKFF\\<cdot>\n     ValKN\\<rbrakk>\n    \\<Longrightarrow> (\\<Lambda> f x.\n                          f\\<cdot>\n                          (\\<Lambda> xa.\n                              x\\<cdot>\n                              (ValK_case\\<cdot>\n                               (\\<Lambda> f.\n                                   ValKF\\<cdot>\n                                   (\\<Lambda> x xa.\n f\\<cdot>\n (\\<Lambda> xa.\n     x\\<cdot>(\\<Lambda> x. xa\\<cdot>(ValK_copy_i i\\<cdot>x)))\\<cdot>\n (\\<Lambda> x. xa\\<cdot>(ValK_copy_i i\\<cdot>x))))\\<cdot>\n                               ValKTT\\<cdot>\n                               ValKFF\\<cdot>\n                               ValKN\\<cdot>\n                               xa))) \\<sqsubseteq>\n                      (\\<Lambda> vm x.\n                          vm\\<cdot>\n                          (\\<Lambda> xa.\n                              x\\<cdot>\n                              (ValK_case\\<cdot>\n                               (\\<Lambda> f.\n                                   ValKF\\<cdot>\n                                   (\\<Lambda> x.\n fst (fix\\<cdot>ValK_copy_rec)\\<cdot>\n (f\\<cdot>(fst (fix\\<cdot>ValK_copy_rec)\\<cdot>x))))\\<cdot>\n                               ValKTT\\<cdot>\n                               ValKFF\\<cdot>\n                               ValKN\\<cdot>\n                               xa)))", "apply (intro cfun_belowI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> f x.\n                             f\\<cdot>\n                             (\\<Lambda> xa.\n                                 x\\<cdot>\n                                 (ValK_case\\<cdot>\n                                  (\\<Lambda> f.\nValKF\\<cdot>\n(\\<Lambda> x xa.\n    f\\<cdot>\n    (\\<Lambda> xa.\n        x\\<cdot>(\\<Lambda> x. xa\\<cdot>(ValK_copy_i i\\<cdot>x)))\\<cdot>\n    (\\<Lambda> x. xa\\<cdot>(ValK_copy_i i\\<cdot>x))))\\<cdot>\n                                  ValKTT\\<cdot>\n                                  ValKFF\\<cdot>\n                                  ValKN\\<cdot>\n                                  xa)))\\<cdot>\n                         x\\<cdot>\n                         xa \\<sqsubseteq>\n                         (\\<Lambda> vm x.\n                             vm\\<cdot>\n                             (\\<Lambda> xa.\n                                 x\\<cdot>\n                                 (ValK_case\\<cdot>\n                                  (\\<Lambda> f.\nValKF\\<cdot>\n(\\<Lambda> x.\n    fst (fix\\<cdot>ValK_copy_rec)\\<cdot>\n    (f\\<cdot>(fst (fix\\<cdot>ValK_copy_rec)\\<cdot>x))))\\<cdot>\n                                  ValKTT\\<cdot>\n                                  ValKFF\\<cdot>\n                                  ValKN\\<cdot>\n                                  xa)))\\<cdot>\n                         x\\<cdot>\n                         xa", "apply (simp add: eta_cfun strictify_cancel cfcomp1 cfun_map_def KM_map_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> x\\<cdot>\n                         (\\<Lambda> x.\n                             xa\\<cdot>\n                             (ValK_case\\<cdot>\n                              (\\<Lambda> f.\n                                  ValKF\\<cdot>\n                                  (\\<Lambda> x xa.\nf\\<cdot>\n(\\<Lambda> xa.\n    x\\<cdot>(\\<Lambda> x. xa\\<cdot>(ValK_copy_i i\\<cdot>x)))\\<cdot>\n(\\<Lambda> x. xa\\<cdot>(ValK_copy_i i\\<cdot>x))))\\<cdot>\n                              ValKTT\\<cdot>\n                              ValKFF\\<cdot>\n                              ValKN\\<cdot>\n                              x)) \\<sqsubseteq>\n                         x\\<cdot>\n                         (\\<Lambda> x.\n                             xa\\<cdot>\n                             (ValK_case\\<cdot>\n                              (\\<Lambda> f.\n                                  ValKF\\<cdot>\n                                  (\\<Lambda> x.\nfst (fix\\<cdot>ValK_copy_rec)\\<cdot>\n(f\\<cdot>(fst (fix\\<cdot>ValK_copy_rec)\\<cdot>x))))\\<cdot>\n                              ValKTT\\<cdot>\n                              ValKFF\\<cdot>\n                              ValKN\\<cdot>\n                              x))", "apply (intro monofun_cfun_arg)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> x.\n                             xa\\<cdot>\n                             (ValK_case\\<cdot>\n                              (\\<Lambda> f.\n                                  ValKF\\<cdot>\n                                  (\\<Lambda> x xa.\nf\\<cdot>\n(\\<Lambda> xa.\n    x\\<cdot>(\\<Lambda> x. xa\\<cdot>(ValK_copy_i i\\<cdot>x)))\\<cdot>\n(\\<Lambda> x. xa\\<cdot>(ValK_copy_i i\\<cdot>x))))\\<cdot>\n                              ValKTT\\<cdot>\n                              ValKFF\\<cdot>\n                              ValKN\\<cdot>\n                              x)) \\<sqsubseteq>\n                         (\\<Lambda> x.\n                             xa\\<cdot>\n                             (ValK_case\\<cdot>\n                              (\\<Lambda> f.\n                                  ValKF\\<cdot>\n                                  (\\<Lambda> x.\nfst (fix\\<cdot>ValK_copy_rec)\\<cdot>\n(f\\<cdot>(fst (fix\\<cdot>ValK_copy_rec)\\<cdot>x))))\\<cdot>\n                              ValKTT\\<cdot>\n                              ValKFF\\<cdot>\n                              ValKN\\<cdot>\n                              x))", "apply (intro cfun_belowI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> x.\n                             xa\\<cdot>\n                             (ValK_case\\<cdot>\n                              (\\<Lambda> f.\n                                  ValKF\\<cdot>\n                                  (\\<Lambda> x xa.\nf\\<cdot>\n(\\<Lambda> xa.\n    x\\<cdot>(\\<Lambda> x. xa\\<cdot>(ValK_copy_i i\\<cdot>x)))\\<cdot>\n(\\<Lambda> x. xa\\<cdot>(ValK_copy_i i\\<cdot>x))))\\<cdot>\n                              ValKTT\\<cdot>\n                              ValKFF\\<cdot>\n                              ValKN\\<cdot>\n                              x))\\<cdot>\n                         xb \\<sqsubseteq>\n                         (\\<Lambda> x.\n                             xa\\<cdot>\n                             (ValK_case\\<cdot>\n                              (\\<Lambda> f.\n                                  ValKF\\<cdot>\n                                  (\\<Lambda> x.\nfst (fix\\<cdot>ValK_copy_rec)\\<cdot>\n(f\\<cdot>(fst (fix\\<cdot>ValK_copy_rec)\\<cdot>x))))\\<cdot>\n                              ValKTT\\<cdot>\n                              ValKFF\\<cdot>\n                              ValKN\\<cdot>\n                              x))\\<cdot>\n                         xb", "apply (simp add: eta_cfun strictify_cancel cfcomp1 cfun_map_def KM_map_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xb.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> xa\\<cdot>\n                         (ValK_case\\<cdot>\n                          (\\<Lambda> f.\n                              ValKF\\<cdot>\n                              (\\<Lambda> x xa.\n                                  f\\<cdot>\n                                  (\\<Lambda> xa.\nx\\<cdot>(\\<Lambda> x. xa\\<cdot>(ValK_copy_i i\\<cdot>x)))\\<cdot>\n                                  (\\<Lambda> x.\nxa\\<cdot>(ValK_copy_i i\\<cdot>x))))\\<cdot>\n                          ValKTT\\<cdot>\n                          ValKFF\\<cdot>\n                          ValKN\\<cdot>\n                          xb) \\<sqsubseteq>\n                         xa\\<cdot>\n                         (ValK_case\\<cdot>\n                          (\\<Lambda> f.\n                              ValKF\\<cdot>\n                              (\\<Lambda> x.\n                                  fst (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                                  (f\\<cdot>\n                                   (fst (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                                    x))))\\<cdot>\n                          ValKTT\\<cdot>\n                          ValKFF\\<cdot>\n                          ValKN\\<cdot>\n                          xb)", "apply (intro monofun_cfun_arg)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xb.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> ValK_case\\<cdot>\n                         (\\<Lambda> f.\n                             ValKF\\<cdot>\n                             (\\<Lambda> x xa.\n                                 f\\<cdot>\n                                 (\\<Lambda> xa.\n                                     x\\<cdot>\n                                     (\\<Lambda> x.\n   xa\\<cdot>(ValK_copy_i i\\<cdot>x)))\\<cdot>\n                                 (\\<Lambda> x.\n                                     xa\\<cdot>\n                                     (ValK_copy_i i\\<cdot>x))))\\<cdot>\n                         ValKTT\\<cdot>\n                         ValKFF\\<cdot>\n                         ValKN\\<cdot>\n                         xb \\<sqsubseteq>\n                         ValK_case\\<cdot>\n                         (\\<Lambda> f.\n                             ValKF\\<cdot>\n                             (\\<Lambda> x.\n                                 fst (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                                 (f\\<cdot>\n                                  (fst (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                                   x))))\\<cdot>\n                         ValKTT\\<cdot>\n                         ValKFF\\<cdot>\n                         ValKN\\<cdot>\n                         xb", "apply (simp add: eta_cfun strictify_cancel monofun_cfun cfcomp1 cfun_map_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xb.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> ValK_case\\<cdot>\n                         (\\<Lambda> f.\n                             ValKF\\<cdot>\n                             (\\<Lambda> x xa.\n                                 f\\<cdot>\n                                 (\\<Lambda> xa.\n                                     x\\<cdot>\n                                     (\\<Lambda> x.\n   xa\\<cdot>(ValK_copy_i i\\<cdot>x)))\\<cdot>\n                                 (\\<Lambda> x.\n                                     xa\\<cdot>\n                                     (ValK_copy_i i\\<cdot>x))))\\<cdot>\n                         ValKTT\\<cdot>\n                         ValKFF\\<cdot>\n                         ValKN\\<cdot>\n                         xb \\<sqsubseteq>\n                         ValK_case\\<cdot>\n                         (\\<Lambda> f.\n                             ValKF\\<cdot>\n                             (\\<Lambda> x.\n                                 fst (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                                 (f\\<cdot>\n                                  (fst (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                                   x))))\\<cdot>\n                         ValKTT\\<cdot>\n                         ValKFF\\<cdot>\n                         ValKN\\<cdot>\n                         xb", "apply (intro monofun_cfun)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>xb.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> ValK_case \\<sqsubseteq> ValK_case\n 2. \\<And>xb.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> f.\n                             ValKF\\<cdot>\n                             (\\<Lambda> x xa.\n                                 f\\<cdot>\n                                 (\\<Lambda> xa.\n                                     x\\<cdot>\n                                     (\\<Lambda> x.\n   xa\\<cdot>(ValK_copy_i i\\<cdot>x)))\\<cdot>\n                                 (\\<Lambda> x.\n                                     xa\\<cdot>\n                                     (ValK_copy_i i\\<cdot>\nx)))) \\<sqsubseteq>\n                         (\\<Lambda> f.\n                             ValKF\\<cdot>\n                             (\\<Lambda> x.\n                                 fst (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                                 (f\\<cdot>\n                                  (fst (fix\\<cdot>ValK_copy_rec)\\<cdot>x))))\n 3. \\<And>xb.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> ValKTT \\<sqsubseteq> ValKTT\n 4. \\<And>xb.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> ValKFF \\<sqsubseteq> ValKFF\n 5. \\<And>xb.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> ValKN \\<sqsubseteq> ValKN\n 6. \\<And>xb.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> xb \\<sqsubseteq> xb", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<Lambda> f x.\n                 f\\<cdot>\n                 (\\<Lambda> xa.\n                     x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n             fst (fix\\<cdot>ValK_copy_rec);\n     ValK_copy_i i \\<sqsubseteq>\n     ValK_case\\<cdot>\n     (\\<Lambda> f.\n         ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n     ValKTT\\<cdot>\n     ValKFF\\<cdot>\n     ValKN\\<rbrakk>\n    \\<Longrightarrow> (\\<Lambda> f.\n                          ValKF\\<cdot>\n                          (\\<Lambda> x xa.\n                              f\\<cdot>\n                              (\\<Lambda> xa.\n                                  x\\<cdot>\n                                  (\\<Lambda> x.\nxa\\<cdot>(ValK_copy_i i\\<cdot>x)))\\<cdot>\n                              (\\<Lambda> x.\n                                  xa\\<cdot>\n                                  (ValK_copy_i i\\<cdot>x)))) \\<sqsubseteq>\n                      (\\<Lambda> f.\n                          ValKF\\<cdot>\n                          (\\<Lambda> x.\n                              fst (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                              (f\\<cdot>\n                               (fst (fix\\<cdot>ValK_copy_rec)\\<cdot>x))))", "apply (intro cfun_belowI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> f.\n                             ValKF\\<cdot>\n                             (\\<Lambda> x xa.\n                                 f\\<cdot>\n                                 (\\<Lambda> xa.\n                                     x\\<cdot>\n                                     (\\<Lambda> x.\n   xa\\<cdot>(ValK_copy_i i\\<cdot>x)))\\<cdot>\n                                 (\\<Lambda> x.\n                                     xa\\<cdot>\n                                     (ValK_copy_i i\\<cdot>x))))\\<cdot>\n                         x \\<sqsubseteq>\n                         (\\<Lambda> f.\n                             ValKF\\<cdot>\n                             (\\<Lambda> x.\n                                 fst (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                                 (f\\<cdot>\n                                  (fst (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                                   x))))\\<cdot>\n                         x", "apply (simp add: eta_cfun strictify_cancel monofun_cfun cfcomp1 cfun_map_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> xa xb.\n                             x\\<cdot>\n                             (\\<Lambda> x.\n                                 xa\\<cdot>\n                                 (\\<Lambda> xa.\n                                     x\\<cdot>\n                                     (ValK_copy_i i\\<cdot>xa)))\\<cdot>\n                             (\\<Lambda> x.\n                                 xb\\<cdot>\n                                 (ValK_copy_i i\\<cdot>x))) \\<sqsubseteq>\n                         (\\<Lambda> xa.\n                             fst (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                             (x\\<cdot>\n                              (fst (fix\\<cdot>ValK_copy_rec)\\<cdot>xa)))", "apply (intro cfun_belowI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> xa xb.\n                             x\\<cdot>\n                             (\\<Lambda> x.\n                                 xa\\<cdot>\n                                 (\\<Lambda> xa.\n                                     x\\<cdot>\n                                     (ValK_copy_i i\\<cdot>xa)))\\<cdot>\n                             (\\<Lambda> x.\n                                 xb\\<cdot>(ValK_copy_i i\\<cdot>x)))\\<cdot>\n                         xa\\<cdot>\n                         xb \\<sqsubseteq>\n                         (\\<Lambda> xa.\n                             fst (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                             (x\\<cdot>\n                              (fst (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                               xa)))\\<cdot>\n                         xa\\<cdot>\n                         xb", "apply (subst fix_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> xa xb.\n                             x\\<cdot>\n                             (\\<Lambda> x.\n                                 xa\\<cdot>\n                                 (\\<Lambda> xa.\n                                     x\\<cdot>\n                                     (ValK_copy_i i\\<cdot>xa)))\\<cdot>\n                             (\\<Lambda> x.\n                                 xb\\<cdot>(ValK_copy_i i\\<cdot>x)))\\<cdot>\n                         xa\\<cdot>\n                         xb \\<sqsubseteq>\n                         (\\<Lambda> xa.\n                             fst (ValK_copy_rec\\<cdot>\n                                  (fix\\<cdot>ValK_copy_rec))\\<cdot>\n                             (x\\<cdot>\n                              (fst (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                               xa)))\\<cdot>\n                         xa\\<cdot>\n                         xb", "apply (simp add: eta_cfun strictify_cancel monofun_cfun cfcomp1 KM_map_def cfun_map_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> x\\<cdot>\n                         (\\<Lambda> x.\n                             xa\\<cdot>\n                             (\\<Lambda> xa.\n                                 x\\<cdot>(ValK_copy_i i\\<cdot>xa)))\\<cdot>\n                         (\\<Lambda> x.\n                             xb\\<cdot>(ValK_copy_i i\\<cdot>x)) \\<sqsubseteq>\n                         x\\<cdot>\n                         (fst (fix\\<cdot>ValK_copy_rec)\\<cdot>xa)\\<cdot>\n                         (\\<Lambda> x.\n                             xb\\<cdot>\n                             (ValK_case\\<cdot>\n                              (\\<Lambda> f.\n                                  ValKF\\<cdot>\n                                  (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                                   f))\\<cdot>\n                              ValKTT\\<cdot>\n                              ValKFF\\<cdot>\n                              ValKN\\<cdot>\n                              x))", "apply (intro monofun_cfun)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xa xb.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> x\n 2. \\<And>x xa xb.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> x.\n                             xa\\<cdot>\n                             (\\<Lambda> xa.\n                                 x\\<cdot>\n                                 (ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                         fst (fix\\<cdot>ValK_copy_rec)\\<cdot>xa\n 3. \\<And>x xa xb.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> x.\n                             xb\\<cdot>(ValK_copy_i i\\<cdot>x)) \\<sqsubseteq>\n                         (\\<Lambda> x.\n                             xb\\<cdot>\n                             (ValK_case\\<cdot>\n                              (\\<Lambda> f.\n                                  ValKF\\<cdot>\n                                  (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                                   f))\\<cdot>\n                              ValKTT\\<cdot>\n                              ValKFF\\<cdot>\n                              ValKN\\<cdot>\n                              x))", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> x.\n                             xa\\<cdot>\n                             (\\<Lambda> xa.\n                                 x\\<cdot>\n                                 (ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                         fst (fix\\<cdot>ValK_copy_rec)\\<cdot>xa\n 2. \\<And>xb.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> x.\n                             xb\\<cdot>(ValK_copy_i i\\<cdot>x)) \\<sqsubseteq>\n                         (\\<Lambda> x.\n                             xb\\<cdot>\n                             (ValK_case\\<cdot>\n                              (\\<Lambda> f.\n                                  ValKF\\<cdot>\n                                  (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                                   f))\\<cdot>\n                              ValKTT\\<cdot>\n                              ValKFF\\<cdot>\n                              ValKN\\<cdot>\n                              x))", "apply (subst fix_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> x.\n                             xa\\<cdot>\n                             (\\<Lambda> xa.\n                                 x\\<cdot>\n                                 (ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                         fst (ValK_copy_rec\\<cdot>\n                              (fix\\<cdot>ValK_copy_rec))\\<cdot>\n                         xa\n 2. \\<And>xb.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> x.\n                             xb\\<cdot>(ValK_copy_i i\\<cdot>x)) \\<sqsubseteq>\n                         (\\<Lambda> x.\n                             xb\\<cdot>\n                             (ValK_case\\<cdot>\n                              (\\<Lambda> f.\n                                  ValKF\\<cdot>\n                                  (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                                   f))\\<cdot>\n                              ValKTT\\<cdot>\n                              ValKFF\\<cdot>\n                              ValKN\\<cdot>\n                              x))", "apply (intro cfun_belowI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa x.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> x.\n                             xa\\<cdot>\n                             (\\<Lambda> xa.\n                                 x\\<cdot>(ValK_copy_i i\\<cdot>xa)))\\<cdot>\n                         x \\<sqsubseteq>\n                         fst (ValK_copy_rec\\<cdot>\n                              (fix\\<cdot>ValK_copy_rec))\\<cdot>\n                         xa\\<cdot>\n                         x\n 2. \\<And>xb.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> x.\n                             xb\\<cdot>(ValK_copy_i i\\<cdot>x)) \\<sqsubseteq>\n                         (\\<Lambda> x.\n                             xb\\<cdot>\n                             (ValK_case\\<cdot>\n                              (\\<Lambda> f.\n                                  ValKF\\<cdot>\n                                  (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                                   f))\\<cdot>\n                              ValKTT\\<cdot>\n                              ValKFF\\<cdot>\n                              ValKN\\<cdot>\n                              x))", "apply (simp add: eta_cfun strictify_cancel monofun_cfun cfcomp1 KM_map_def cfun_map_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa x.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> xa\\<cdot>\n                         (\\<Lambda> xa.\n                             x\\<cdot>(ValK_copy_i i\\<cdot>xa)) \\<sqsubseteq>\n                         xa\\<cdot>\n                         (\\<Lambda> xa.\n                             x\\<cdot>\n                             (ValK_case\\<cdot>\n                              (\\<Lambda> f.\n                                  ValKF\\<cdot>\n                                  (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                                   f))\\<cdot>\n                              ValKTT\\<cdot>\n                              ValKFF\\<cdot>\n                              ValKN\\<cdot>\n                              xa))\n 2. \\<And>xb.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> x.\n                             xb\\<cdot>(ValK_copy_i i\\<cdot>x)) \\<sqsubseteq>\n                         (\\<Lambda> x.\n                             xb\\<cdot>\n                             (ValK_case\\<cdot>\n                              (\\<Lambda> f.\n                                  ValKF\\<cdot>\n                                  (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                                   f))\\<cdot>\n                              ValKTT\\<cdot>\n                              ValKFF\\<cdot>\n                              ValKN\\<cdot>\n                              x))", "apply (intro monofun_cfun)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa x.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> xa \\<sqsubseteq> xa\n 2. \\<And>xa x.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> xa.\n                             x\\<cdot>(ValK_copy_i i\\<cdot>xa)) \\<sqsubseteq>\n                         (\\<Lambda> xa.\n                             x\\<cdot>\n                             (ValK_case\\<cdot>\n                              (\\<Lambda> f.\n                                  ValKF\\<cdot>\n                                  (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                                   f))\\<cdot>\n                              ValKTT\\<cdot>\n                              ValKFF\\<cdot>\n                              ValKN\\<cdot>\n                              xa))\n 3. \\<And>xb.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> x.\n                             xb\\<cdot>(ValK_copy_i i\\<cdot>x)) \\<sqsubseteq>\n                         (\\<Lambda> x.\n                             xb\\<cdot>\n                             (ValK_case\\<cdot>\n                              (\\<Lambda> f.\n                                  ValKF\\<cdot>\n                                  (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                                   f))\\<cdot>\n                              ValKTT\\<cdot>\n                              ValKFF\\<cdot>\n                              ValKN\\<cdot>\n                              x))", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> xa.\n                             x\\<cdot>(ValK_copy_i i\\<cdot>xa)) \\<sqsubseteq>\n                         (\\<Lambda> xa.\n                             x\\<cdot>\n                             (ValK_case\\<cdot>\n                              (\\<Lambda> f.\n                                  ValKF\\<cdot>\n                                  (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                                   f))\\<cdot>\n                              ValKTT\\<cdot>\n                              ValKFF\\<cdot>\n                              ValKN\\<cdot>\n                              xa))\n 2. \\<And>xb.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> x.\n                             xb\\<cdot>(ValK_copy_i i\\<cdot>x)) \\<sqsubseteq>\n                         (\\<Lambda> x.\n                             xb\\<cdot>\n                             (ValK_case\\<cdot>\n                              (\\<Lambda> f.\n                                  ValKF\\<cdot>\n                                  (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                                   f))\\<cdot>\n                              ValKTT\\<cdot>\n                              ValKFF\\<cdot>\n                              ValKN\\<cdot>\n                              x))", "apply (intro cfun_belowI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> xa.\n                             x\\<cdot>(ValK_copy_i i\\<cdot>xa))\\<cdot>\n                         xa \\<sqsubseteq>\n                         (\\<Lambda> xa.\n                             x\\<cdot>\n                             (ValK_case\\<cdot>\n                              (\\<Lambda> f.\n                                  ValKF\\<cdot>\n                                  (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                                   f))\\<cdot>\n                              ValKTT\\<cdot>\n                              ValKFF\\<cdot>\n                              ValKN\\<cdot>\n                              xa))\\<cdot>\n                         xa\n 2. \\<And>xb.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> x.\n                             xb\\<cdot>(ValK_copy_i i\\<cdot>x)) \\<sqsubseteq>\n                         (\\<Lambda> x.\n                             xb\\<cdot>\n                             (ValK_case\\<cdot>\n                              (\\<Lambda> f.\n                                  ValKF\\<cdot>\n                                  (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                                   f))\\<cdot>\n                              ValKTT\\<cdot>\n                              ValKFF\\<cdot>\n                              ValKN\\<cdot>\n                              x))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> x\\<cdot>(ValK_copy_i i\\<cdot>xa) \\<sqsubseteq>\n                         x\\<cdot>\n                         (ValK_case\\<cdot>\n                          (\\<Lambda> f.\n                              ValKF\\<cdot>\n                              (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                               f))\\<cdot>\n                          ValKTT\\<cdot>\n                          ValKFF\\<cdot>\n                          ValKN\\<cdot>\n                          xa)\n 2. \\<And>xb.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> x.\n                             xb\\<cdot>(ValK_copy_i i\\<cdot>x)) \\<sqsubseteq>\n                         (\\<Lambda> x.\n                             xb\\<cdot>\n                             (ValK_case\\<cdot>\n                              (\\<Lambda> f.\n                                  ValKF\\<cdot>\n                                  (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                                   f))\\<cdot>\n                              ValKTT\\<cdot>\n                              ValKFF\\<cdot>\n                              ValKN\\<cdot>\n                              x))", "apply (intro monofun_cfun)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> x\n 2. \\<And>x xa.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> ValK_copy_i i \\<sqsubseteq>\n                         ValK_case\\<cdot>\n                         (\\<Lambda> f.\n                             ValKF\\<cdot>\n                             (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n                         ValKTT\\<cdot>\n                         ValKFF\\<cdot>\n                         ValKN\n 3. \\<And>x xa.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> xa \\<sqsubseteq> xa\n 4. \\<And>xb.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> x.\n                             xb\\<cdot>(ValK_copy_i i\\<cdot>x)) \\<sqsubseteq>\n                         (\\<Lambda> x.\n                             xb\\<cdot>\n                             (ValK_case\\<cdot>\n                              (\\<Lambda> f.\n                                  ValKF\\<cdot>\n                                  (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                                   f))\\<cdot>\n                              ValKTT\\<cdot>\n                              ValKFF\\<cdot>\n                              ValKN\\<cdot>\n                              x))", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xb.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> x.\n                             xb\\<cdot>(ValK_copy_i i\\<cdot>x)) \\<sqsubseteq>\n                         (\\<Lambda> x.\n                             xb\\<cdot>\n                             (ValK_case\\<cdot>\n                              (\\<Lambda> f.\n                                  ValKF\\<cdot>\n                                  (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                                   f))\\<cdot>\n                              ValKTT\\<cdot>\n                              ValKFF\\<cdot>\n                              ValKN\\<cdot>\n                              x))", "apply (intro cfun_belowI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xb x.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> x.\n                             xb\\<cdot>(ValK_copy_i i\\<cdot>x))\\<cdot>\n                         x \\<sqsubseteq>\n                         (\\<Lambda> x.\n                             xb\\<cdot>\n                             (ValK_case\\<cdot>\n                              (\\<Lambda> f.\n                                  ValKF\\<cdot>\n                                  (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                                   f))\\<cdot>\n                              ValKTT\\<cdot>\n                              ValKFF\\<cdot>\n                              ValKN\\<cdot>\n                              x))\\<cdot>\n                         x", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xb x.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> xb\\<cdot>(ValK_copy_i i\\<cdot>x) \\<sqsubseteq>\n                         xb\\<cdot>\n                         (ValK_case\\<cdot>\n                          (\\<Lambda> f.\n                              ValKF\\<cdot>\n                              (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>\n                               f))\\<cdot>\n                          ValKTT\\<cdot>\n                          ValKFF\\<cdot>\n                          ValKN\\<cdot>\n                          x)", "apply (intro monofun_cfun)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xb x.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> xb \\<sqsubseteq> xb\n 2. \\<And>xb x.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> ValK_copy_i i \\<sqsubseteq>\n                         ValK_case\\<cdot>\n                         (\\<Lambda> f.\n                             ValKF\\<cdot>\n                             (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n                         ValKTT\\<cdot>\n                         ValKFF\\<cdot>\n                         ValKN\n 3. \\<And>xb x.\n       \\<lbrakk>(\\<Lambda> f x.\n                    f\\<cdot>\n                    (\\<Lambda> xa.\n                        x\\<cdot>(ValK_copy_i i\\<cdot>xa))) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> x", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  KM_map\\<cdot>(ValK_copy_i (Suc i)) \\<sqsubseteq>\n  fst (fix\\<cdot>ValK_copy_rec)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> ValK_copy_i (Suc i) \\<sqsubseteq>\n                         ValK_case\\<cdot>\n                         (\\<Lambda> f.\n                             ValKF\\<cdot>\n                             (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n                         ValKTT\\<cdot>\n                         ValKFF\\<cdot>\n                         ValKN", "}"], ["proof (state)\nthis:\n  KM_map\\<cdot>(ValK_copy_i (Suc i)) \\<sqsubseteq>\n  fst (fix\\<cdot>ValK_copy_rec)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> ValK_copy_i (Suc i) \\<sqsubseteq>\n                         ValK_case\\<cdot>\n                         (\\<Lambda> f.\n                             ValKF\\<cdot>\n                             (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n                         ValKTT\\<cdot>\n                         ValKFF\\<cdot>\n                         ValKN", "{"], ["proof (state)\nthis:\n  KM_map\\<cdot>(ValK_copy_i (Suc i)) \\<sqsubseteq>\n  fst (fix\\<cdot>ValK_copy_rec)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> ValK_copy_i (Suc i) \\<sqsubseteq>\n                         ValK_case\\<cdot>\n                         (\\<Lambda> f.\n                             ValKF\\<cdot>\n                             (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n                         ValKTT\\<cdot>\n                         ValKFF\\<cdot>\n                         ValKN", "case 2"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n                fst (fix\\<cdot>ValK_copy_rec);\n        ValK_copy_i i \\<sqsubseteq>\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n        ValKTT\\<cdot>\n        ValKFF\\<cdot>\n        ValKN\\<rbrakk>\n       \\<Longrightarrow> ValK_copy_i (Suc i) \\<sqsubseteq>\n                         ValK_case\\<cdot>\n                         (\\<Lambda> f.\n                             ValKF\\<cdot>\n                             (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n                         ValKTT\\<cdot>\n                         ValKFF\\<cdot>\n                         ValKN", "from Suc"], ["proof (chain)\npicking this:\n  KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq> fst (fix\\<cdot>ValK_copy_rec)\n  ValK_copy_i i \\<sqsubseteq>\n  ValK_case\\<cdot>\n  (\\<Lambda> f. ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n  ValKTT\\<cdot>\n  ValKFF\\<cdot>\n  ValKN", "show ?case"], ["proof (prove)\nusing this:\n  KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq> fst (fix\\<cdot>ValK_copy_rec)\n  ValK_copy_i i \\<sqsubseteq>\n  ValK_case\\<cdot>\n  (\\<Lambda> f. ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n  ValKTT\\<cdot>\n  ValKFF\\<cdot>\n  ValKN\n\ngoal (1 subgoal):\n 1. ValK_copy_i (Suc i) \\<sqsubseteq>\n    ValK_case\\<cdot>\n    (\\<Lambda> f.\n        ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n    ValKTT\\<cdot>\n    ValKFF\\<cdot>\n    ValKN", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n             fst (fix\\<cdot>ValK_copy_rec);\n     ValK_copy_i i \\<sqsubseteq>\n     ValK_case\\<cdot>\n     (\\<Lambda> f.\n         ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n     ValKTT\\<cdot>\n     ValKFF\\<cdot>\n     ValKN\\<rbrakk>\n    \\<Longrightarrow> ValK_copy_i (Suc i) \\<sqsubseteq>\n                      ValK_case\\<cdot>\n                      (\\<Lambda> f.\n                          ValKF\\<cdot>\n                          (snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n                      ValKTT\\<cdot>\n                      ValKFF\\<cdot>\n                      ValKN", "apply (subst fix_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n             fst (fix\\<cdot>ValK_copy_rec);\n     ValK_copy_i i \\<sqsubseteq>\n     ValK_case\\<cdot>\n     (\\<Lambda> f.\n         ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n     ValKTT\\<cdot>\n     ValKFF\\<cdot>\n     ValKN\\<rbrakk>\n    \\<Longrightarrow> ValK_copy_i (Suc i) \\<sqsubseteq>\n                      ValK_case\\<cdot>\n                      (\\<Lambda> f.\n                          ValKF\\<cdot>\n                          (snd (ValK_copy_rec\\<cdot>\n                                (fix\\<cdot>ValK_copy_rec))\\<cdot>\n                           f))\\<cdot>\n                      ValKTT\\<cdot>\n                      ValKFF\\<cdot>\n                      ValKN", "apply (subst fix_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq>\n             fst (fix\\<cdot>ValK_copy_rec);\n     ValK_copy_i i \\<sqsubseteq>\n     ValK_case\\<cdot>\n     (\\<Lambda> f.\n         ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n     ValKTT\\<cdot>\n     ValKFF\\<cdot>\n     ValKN\\<rbrakk>\n    \\<Longrightarrow> ValK_copy_i (Suc i) \\<sqsubseteq>\n                      ValK_case\\<cdot>\n                      (\\<Lambda> f.\n                          ValKF\\<cdot>\n                          (snd (ValK_copy_rec\\<cdot>\n                                (ValK_copy_rec\\<cdot>\n                                 (fix\\<cdot>ValK_copy_rec)))\\<cdot>\n                           f))\\<cdot>\n                      ValKTT\\<cdot>\n                      ValKFF\\<cdot>\n                      ValKN", "apply (auto simp: eta_cfun strictify_cancel cfcomp1 cfun_map_def KM_map_def cfun_below_iff intro!: monofun_cfun)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ValK_copy_i (Suc i) \\<sqsubseteq>\n  ValK_case\\<cdot>\n  (\\<Lambda> f. ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n  ValKTT\\<cdot>\n  ValKFF\\<cdot>\n  ValKN\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  ValK_copy_i (Suc i) \\<sqsubseteq>\n  ValK_case\\<cdot>\n  (\\<Lambda> f. ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n  ValKTT\\<cdot>\n  ValKFF\\<cdot>\n  ValKN\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  KM_map\\<cdot>(ValK_copy_i i) \\<sqsubseteq> fst (fix\\<cdot>ValK_copy_rec)\n  ValK_copy_i i \\<sqsubseteq>\n  ValK_case\\<cdot>\n  (\\<Lambda> f. ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n  ValKTT\\<cdot>\n  ValKFF\\<cdot>\n  ValKN\n\ngoal (1 subgoal):\n 1. (KM_map\\<cdot>ValK_copy,\n     cfun_map\\<cdot>(KM_map\\<cdot>ValK_copy)\\<cdot>\n     (KM_map\\<cdot>ValK_copy)) \\<sqsubseteq>\n    fix\\<cdot>ValK_copy_rec", "}"], ["proof (state)\nthis:\n  KM_map\\<cdot>(ValK_copy_i ?i2) \\<sqsubseteq> fst (fix\\<cdot>ValK_copy_rec)\n  ValK_copy_i ?i2 \\<sqsubseteq>\n  ValK_case\\<cdot>\n  (\\<Lambda> f. ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n  ValKTT\\<cdot>\n  ValKFF\\<cdot>\n  ValKN\n\ngoal (1 subgoal):\n 1. (KM_map\\<cdot>ValK_copy,\n     cfun_map\\<cdot>(KM_map\\<cdot>ValK_copy)\\<cdot>\n     (KM_map\\<cdot>ValK_copy)) \\<sqsubseteq>\n    fix\\<cdot>ValK_copy_rec", "hence \"(\\<Squnion>i. KM_map\\<cdot>(ValK_copy_i i :: 'o ValK \\<rightarrow> 'o ValK)) \\<sqsubseteq> fst (fix\\<cdot>ValK_copy_rec)\""], ["proof (prove)\nusing this:\n  KM_map\\<cdot>(ValK_copy_i ?i2) \\<sqsubseteq> fst (fix\\<cdot>ValK_copy_rec)\n  ValK_copy_i ?i2 \\<sqsubseteq>\n  ValK_case\\<cdot>\n  (\\<Lambda> f. ValKF\\<cdot>(snd (fix\\<cdot>ValK_copy_rec)\\<cdot>f))\\<cdot>\n  ValKTT\\<cdot>\n  ValKFF\\<cdot>\n  ValKN\n\ngoal (1 subgoal):\n 1. (\\<Squnion>i. KM_map\\<cdot>(ValK_copy_i i)) \\<sqsubseteq>\n    fst (fix\\<cdot>ValK_copy_rec)", "by (simp add: lub_below_iff)"], ["proof (state)\nthis:\n  (\\<Squnion>i. KM_map\\<cdot>(ValK_copy_i i)) \\<sqsubseteq>\n  fst (fix\\<cdot>ValK_copy_rec)\n\ngoal (1 subgoal):\n 1. (KM_map\\<cdot>ValK_copy,\n     cfun_map\\<cdot>(KM_map\\<cdot>ValK_copy)\\<cdot>\n     (KM_map\\<cdot>ValK_copy)) \\<sqsubseteq>\n    fix\\<cdot>ValK_copy_rec", "hence D: \"KM_map\\<cdot>(ValK_copy :: 'o ValK \\<rightarrow> 'o ValK) \\<sqsubseteq> fst (fix\\<cdot>ValK_copy_rec)\""], ["proof (prove)\nusing this:\n  (\\<Squnion>i. KM_map\\<cdot>(ValK_copy_i i)) \\<sqsubseteq>\n  fst (fix\\<cdot>ValK_copy_rec)\n\ngoal (1 subgoal):\n 1. KM_map\\<cdot>ValK_copy \\<sqsubseteq> fst (fix\\<cdot>ValK_copy_rec)", "by (simp add: contlub_cfun_arg[symmetric])"], ["proof (state)\nthis:\n  KM_map\\<cdot>ValK_copy \\<sqsubseteq> fst (fix\\<cdot>ValK_copy_rec)\n\ngoal (1 subgoal):\n 1. (KM_map\\<cdot>ValK_copy,\n     cfun_map\\<cdot>(KM_map\\<cdot>ValK_copy)\\<cdot>\n     (KM_map\\<cdot>ValK_copy)) \\<sqsubseteq>\n    fix\\<cdot>ValK_copy_rec", "from D"], ["proof (chain)\npicking this:\n  KM_map\\<cdot>ValK_copy \\<sqsubseteq> fst (fix\\<cdot>ValK_copy_rec)", "have E: \"cfun_map\\<cdot>(KM_map\\<cdot>(ValK_copy :: 'o ValK \\<rightarrow> 'o ValK))\\<cdot>(KM_map\\<cdot>ValK_copy) \\<sqsubseteq> snd (fix\\<cdot>ValK_copy_rec)\""], ["proof (prove)\nusing this:\n  KM_map\\<cdot>ValK_copy \\<sqsubseteq> fst (fix\\<cdot>ValK_copy_rec)\n\ngoal (1 subgoal):\n 1. cfun_map\\<cdot>(KM_map\\<cdot>ValK_copy)\\<cdot>\n    (KM_map\\<cdot>ValK_copy) \\<sqsubseteq>\n    snd (fix\\<cdot>ValK_copy_rec)", "apply (subst fix_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. KM_map\\<cdot>ValK_copy \\<sqsubseteq>\n    fst (fix\\<cdot>ValK_copy_rec) \\<Longrightarrow>\n    cfun_map\\<cdot>(KM_map\\<cdot>ValK_copy)\\<cdot>\n    (KM_map\\<cdot>ValK_copy) \\<sqsubseteq>\n    snd (ValK_copy_rec\\<cdot>(fix\\<cdot>ValK_copy_rec))", "apply (simp add: eta_cfun strictify_cancel KM_map_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. cfun_map\\<cdot>(cfun_map\\<cdot>ValK_copy\\<cdot>ID)\\<cdot>\n    ID \\<sqsubseteq>\n    fst (fix\\<cdot>ValK_copy_rec) \\<Longrightarrow>\n    cfun_map\\<cdot>\n    (cfun_map\\<cdot>(cfun_map\\<cdot>ValK_copy\\<cdot>ID)\\<cdot>ID)\\<cdot>\n    (cfun_map\\<cdot>(cfun_map\\<cdot>ValK_copy\\<cdot>ID)\\<cdot>\n     ID) \\<sqsubseteq>\n    cfun_map\\<cdot>(fst (fix\\<cdot>ValK_copy_rec))\\<cdot>\n    (fst (fix\\<cdot>ValK_copy_rec))", "apply (intro monofun_cfun)"], ["proof (prove)\ngoal (3 subgoals):\n 1. cfun_map\\<cdot>(cfun_map\\<cdot>ValK_copy\\<cdot>ID)\\<cdot>\n    ID \\<sqsubseteq>\n    fst (fix\\<cdot>ValK_copy_rec) \\<Longrightarrow>\n    cfun_map \\<sqsubseteq> cfun_map\n 2. cfun_map\\<cdot>(cfun_map\\<cdot>ValK_copy\\<cdot>ID)\\<cdot>\n    ID \\<sqsubseteq>\n    fst (fix\\<cdot>ValK_copy_rec) \\<Longrightarrow>\n    cfun_map\\<cdot>(cfun_map\\<cdot>ValK_copy\\<cdot>ID)\\<cdot>\n    ID \\<sqsubseteq>\n    fst (fix\\<cdot>ValK_copy_rec)\n 3. cfun_map\\<cdot>(cfun_map\\<cdot>ValK_copy\\<cdot>ID)\\<cdot>\n    ID \\<sqsubseteq>\n    fst (fix\\<cdot>ValK_copy_rec) \\<Longrightarrow>\n    cfun_map\\<cdot>(cfun_map\\<cdot>ValK_copy\\<cdot>ID)\\<cdot>\n    ID \\<sqsubseteq>\n    fst (fix\\<cdot>ValK_copy_rec)", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  cfun_map\\<cdot>(KM_map\\<cdot>ValK_copy)\\<cdot>\n  (KM_map\\<cdot>ValK_copy) \\<sqsubseteq>\n  snd (fix\\<cdot>ValK_copy_rec)\n\ngoal (1 subgoal):\n 1. (KM_map\\<cdot>ValK_copy,\n     cfun_map\\<cdot>(KM_map\\<cdot>ValK_copy)\\<cdot>\n     (KM_map\\<cdot>ValK_copy)) \\<sqsubseteq>\n    fix\\<cdot>ValK_copy_rec", "show \"?rhs \\<sqsubseteq> ?lhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (KM_map\\<cdot>ValK_copy,\n     cfun_map\\<cdot>(KM_map\\<cdot>ValK_copy)\\<cdot>\n     (KM_map\\<cdot>ValK_copy)) \\<sqsubseteq>\n    fix\\<cdot>ValK_copy_rec", "by (simp add: prod_belowI D E)"], ["proof (state)\nthis:\n  (KM_map\\<cdot>ValK_copy,\n   cfun_map\\<cdot>(KM_map\\<cdot>ValK_copy)\\<cdot>\n   (KM_map\\<cdot>ValK_copy)) \\<sqsubseteq>\n  fix\\<cdot>ValK_copy_rec\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fix_ValK_copy_rec_ID:\n  \"fix\\<cdot>ValK_copy_rec = (ID, ID)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fix\\<cdot>ValK_copy_rec = (ID, ID)", "by (simp add: ValK_copy_rec_ValK_copy ValK_copy_fix cfun_map_ID)"], ["", "lemma (in at_least_two_elements) min_inv_lr:\n  assumes \"fst ea\\<cdot>\\<bottom> = \\<bottom>\"\n  assumes \"fst eb\\<cdot>\\<bottom> = \\<bottom>\"\n  assumes \"eRSP ea eb R S\"\n  shows \"eRSP (ValD_copy_rec\\<cdot>ea) (ValK_copy_rec\\<cdot>eb) (dual ((lr :: 'o lflf) (dual S, undual R))) (lr (R, S))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eRSP (Continuations.ValD_copy_rec\\<cdot>ea) (ValK_copy_rec\\<cdot>eb)\n     (dual (lr (dual S, undual R))) (lr (R, S))", "using assms some_non_bottom_element"], ["proof (prove)\nusing this:\n  fst ea\\<cdot>\\<bottom> = \\<bottom>\n  fst eb\\<cdot>\\<bottom> = \\<bottom>\n  eRSP ea eb R S\n  some_non_bottom_element \\<noteq> \\<bottom>\n\ngoal (1 subgoal):\n 1. eRSP (Continuations.ValD_copy_rec\\<cdot>ea) (ValK_copy_rec\\<cdot>eb)\n     (dual (lr (dual S, undual R))) (lr (R, S))", "apply (simp add: split_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fst ea\\<cdot>\\<bottom> = \\<bottom>;\n     fst eb\\<cdot>\\<bottom> = \\<bottom>;\n     (\\<forall>x\\<in>unlr (fst (undual R)).\n         (fst ea\\<cdot>(fst x), fst eb\\<cdot>(snd x))\n         \\<in> unlr (fst S)) \\<and>\n     (\\<forall>x\\<in>unlr (snd (undual R)).\n         (snd ea\\<cdot>(fst x), snd eb\\<cdot>(snd x)) \\<in> unlr (snd S));\n     some_non_bottom_element \\<noteq> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>x\\<in>fst (lr_rep (dual S, undual R)).\n                          (ValD_case\\<cdot>\n                           (\\<Lambda> f. ValF\\<cdot>(snd ea\\<cdot>f))\\<cdot>\n                           ValTT\\<cdot>\n                           ValFF\\<cdot>\n                           (Abs_cfun (Rep_cfun ValN))\\<cdot>\n                           (fst x),\n                           KM_map\\<cdot>\n                           (Abs_cfun\n                             (Rep_cfun\n                               (ValK_case\\<cdot>\n                                (\\<Lambda> f.\n                                    ValKF\\<cdot>(snd eb\\<cdot>f))\\<cdot>\n                                ValKTT\\<cdot>\n                                ValKFF\\<cdot>\n                                (Abs_cfun (Rep_cfun ValKN)))))\\<cdot>\n                           (snd x))\n                          \\<in> fst (lr_rep (R, S))) \\<and>\n                      (\\<forall>x\\<in>snd (lr_rep (dual S, undual R)).\n                          (cfun_map\\<cdot>(strictify\\<cdot>(fst ea))\\<cdot>\n                           (strictify\\<cdot>(fst ea))\\<cdot>\n                           (fst x),\n                           cfun_map\\<cdot>(strictify\\<cdot>(fst eb))\\<cdot>\n                           (strictify\\<cdot>(fst eb))\\<cdot>\n                           (snd x))\n                          \\<in> snd (lr_rep (R, S)))", "apply (auto simp: split_def lr_rep_def lr_eta_rep_def lr_theta_rep_def KM_map_def cfun_map_def unitK_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>fst ea\\<cdot>\\<bottom> = \\<bottom>;\n        fst eb\\<cdot>\\<bottom> = \\<bottom>;\n        some_non_bottom_element \\<noteq> \\<bottom>;\n        \\<forall>x\\<in>unlr (fst (undual R)).\n           (fst ea\\<cdot>(fst x), fst eb\\<cdot>(snd x)) \\<in> unlr (fst S);\n        \\<forall>x\\<in>unlr (snd (undual R)).\n           (snd ea\\<cdot>(fst x), snd eb\\<cdot>(snd x)) \\<in> unlr (snd S);\n        \\<forall>x\\<in>unlr (fst S).\n           (a\\<cdot>(fst x), b\\<cdot>(snd x)) \\<in> unlr (fst (undual R));\n        (aa, ba) \\<in> unlr (fst (undual R))\\<rbrakk>\n       \\<Longrightarrow> (strictify\\<cdot>(fst ea)\\<cdot>\n                          (a\\<cdot>(strictify\\<cdot>(fst ea)\\<cdot>aa)),\n                          strictify\\<cdot>(fst eb)\\<cdot>\n                          (b\\<cdot>(strictify\\<cdot>(fst eb)\\<cdot>ba)))\n                         \\<in> unlr (fst S)", "apply (force simp: cfun_map_def strictify_cancel unitK_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "(* FIXME obvious but auto misses it *)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "sublocale at_least_two_elements < F: DomSolP lr ValD_copy_rec ValK_copy_rec"], ["proof (prove)\ngoal (1 subgoal):\n 1. DomSolP lr Continuations.ValD_copy_rec ValK_copy_rec", "apply standard"], ["proof (prove)\ngoal (8 subgoals):\n 1. mono lr\n 2. fix\\<cdot>Continuations.ValD_copy_rec = (ID, ID)\n 3. fix\\<cdot>ValK_copy_rec = (ID, ID)\n 4. \\<And>r.\n       fst (Continuations.ValD_copy_rec\\<cdot>r)\\<cdot>\\<bottom> = \\<bottom>\n 5. \\<And>r.\n       snd (Continuations.ValD_copy_rec\\<cdot>r)\\<cdot>\\<bottom> = \\<bottom>\n 6. \\<And>r. fst (ValK_copy_rec\\<cdot>r)\\<cdot>\\<bottom> = \\<bottom>\n 7. \\<And>r. snd (ValK_copy_rec\\<cdot>r)\\<cdot>\\<bottom> = \\<bottom>\n 8. \\<And>R ea eb S.\n       \\<lbrakk>eRSP ea eb R S; fst ea\\<cdot>\\<bottom> = \\<bottom>;\n        snd ea\\<cdot>\\<bottom> = \\<bottom>;\n        fst eb\\<cdot>\\<bottom> = \\<bottom>;\n        snd ea\\<cdot>\\<bottom> = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> eRSP (Continuations.ValD_copy_rec\\<cdot>ea)\n                          (ValK_copy_rec\\<cdot>eb)\n                          (dual (lr (dual S, undual R))) (lr (R, S))", "apply (rule mono_lr)"], ["proof (prove)\ngoal (7 subgoals):\n 1. fix\\<cdot>Continuations.ValD_copy_rec = (ID, ID)\n 2. fix\\<cdot>ValK_copy_rec = (ID, ID)\n 3. \\<And>r.\n       fst (Continuations.ValD_copy_rec\\<cdot>r)\\<cdot>\\<bottom> = \\<bottom>\n 4. \\<And>r.\n       snd (Continuations.ValD_copy_rec\\<cdot>r)\\<cdot>\\<bottom> = \\<bottom>\n 5. \\<And>r. fst (ValK_copy_rec\\<cdot>r)\\<cdot>\\<bottom> = \\<bottom>\n 6. \\<And>r. snd (ValK_copy_rec\\<cdot>r)\\<cdot>\\<bottom> = \\<bottom>\n 7. \\<And>R ea eb S.\n       \\<lbrakk>eRSP ea eb R S; fst ea\\<cdot>\\<bottom> = \\<bottom>;\n        snd ea\\<cdot>\\<bottom> = \\<bottom>;\n        fst eb\\<cdot>\\<bottom> = \\<bottom>;\n        snd ea\\<cdot>\\<bottom> = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> eRSP (Continuations.ValD_copy_rec\\<cdot>ea)\n                          (ValK_copy_rec\\<cdot>eb)\n                          (dual (lr (dual S, undual R))) (lr (R, S))", "apply (rule fix_ValD_copy_rec_ID)"], ["proof (prove)\ngoal (6 subgoals):\n 1. fix\\<cdot>ValK_copy_rec = (ID, ID)\n 2. \\<And>r.\n       fst (Continuations.ValD_copy_rec\\<cdot>r)\\<cdot>\\<bottom> = \\<bottom>\n 3. \\<And>r.\n       snd (Continuations.ValD_copy_rec\\<cdot>r)\\<cdot>\\<bottom> = \\<bottom>\n 4. \\<And>r. fst (ValK_copy_rec\\<cdot>r)\\<cdot>\\<bottom> = \\<bottom>\n 5. \\<And>r. snd (ValK_copy_rec\\<cdot>r)\\<cdot>\\<bottom> = \\<bottom>\n 6. \\<And>R ea eb S.\n       \\<lbrakk>eRSP ea eb R S; fst ea\\<cdot>\\<bottom> = \\<bottom>;\n        snd ea\\<cdot>\\<bottom> = \\<bottom>;\n        fst eb\\<cdot>\\<bottom> = \\<bottom>;\n        snd ea\\<cdot>\\<bottom> = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> eRSP (Continuations.ValD_copy_rec\\<cdot>ea)\n                          (ValK_copy_rec\\<cdot>eb)\n                          (dual (lr (dual S, undual R))) (lr (R, S))", "apply (rule fix_ValK_copy_rec_ID)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>r.\n       fst (Continuations.ValD_copy_rec\\<cdot>r)\\<cdot>\\<bottom> = \\<bottom>\n 2. \\<And>r.\n       snd (Continuations.ValD_copy_rec\\<cdot>r)\\<cdot>\\<bottom> = \\<bottom>\n 3. \\<And>r. fst (ValK_copy_rec\\<cdot>r)\\<cdot>\\<bottom> = \\<bottom>\n 4. \\<And>r. snd (ValK_copy_rec\\<cdot>r)\\<cdot>\\<bottom> = \\<bottom>\n 5. \\<And>R ea eb S.\n       \\<lbrakk>eRSP ea eb R S; fst ea\\<cdot>\\<bottom> = \\<bottom>;\n        snd ea\\<cdot>\\<bottom> = \\<bottom>;\n        fst eb\\<cdot>\\<bottom> = \\<bottom>;\n        snd ea\\<cdot>\\<bottom> = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> eRSP (Continuations.ValD_copy_rec\\<cdot>ea)\n                          (ValK_copy_rec\\<cdot>eb)\n                          (dual (lr (dual S, undual R))) (lr (R, S))", "apply (simp_all add: cfun_map_def)[4]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>R ea eb S.\n       \\<lbrakk>eRSP ea eb R S; fst ea\\<cdot>\\<bottom> = \\<bottom>;\n        snd ea\\<cdot>\\<bottom> = \\<bottom>;\n        fst eb\\<cdot>\\<bottom> = \\<bottom>;\n        snd ea\\<cdot>\\<bottom> = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> eRSP (Continuations.ValD_copy_rec\\<cdot>ea)\n                          (ValK_copy_rec\\<cdot>eb)\n                          (dual (lr (dual S, undual R))) (lr (R, S))", "apply (erule (2) min_inv_lr)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection\\<open>A retraction between the two definitions\\<close>"], ["", "text\\<open>\n\nWe can use the relation to establish a strong connection between the\ndirect and continuation semantics.  All results depend on the\nobservation type being rich enough.\n\n\\<close>"], ["", "context at_least_two_elements\nbegin"], ["", "abbreviation mrel (\"\\<eta>: _ \\<mapsto> _\" [50, 51] 50) where\n  \"\\<eta>: x \\<mapsto> x' \\<equiv> (x, x') \\<in> unlr (fst F.delta)\""], ["", "abbreviation vrel (\"\\<theta>: _ \\<mapsto> _\" [50, 51] 50) where\n  \"\\<theta>: y \\<mapsto> y' \\<equiv> (y, y') \\<in> unlr (snd F.delta)\""], ["", "(*<*)"], ["", "lemma F_bottom_triv [intro, simp]:\n  \"\\<eta>: \\<bottom> \\<mapsto> \\<bottom>\"\n  \"\\<theta>: \\<bottom> \\<mapsto> \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta>: \\<bottom> \\<mapsto> \\<bottom> &&&\n    \\<theta>: \\<bottom> \\<mapsto> \\<bottom>", "by simp_all"], ["", "lemma etaI [intro, simp]:\n  \"\\<eta>: ValTT \\<mapsto> unitK\\<cdot>ValKTT\"\n  \"\\<eta>: ValFF \\<mapsto> unitK\\<cdot>ValKFF\"\n  \"\\<eta>: ValN\\<cdot>n \\<mapsto> unitK\\<cdot>(ValKN\\<cdot>n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta>: ValTT \\<mapsto> unitK\\<cdot>ValKTT &&&\n    \\<eta>: ValFF \\<mapsto> unitK\\<cdot>ValKFF &&&\n    \\<eta>: ValN\\<cdot>n \\<mapsto> unitK\\<cdot>(ValKN\\<cdot>n)", "by (subst F.delta_sol, simp, simp add: lr_rep_def lr_eta_rep_def)+"], ["", "lemma eta_F:\n  \"\\<theta>: f \\<mapsto> f' \\<Longrightarrow> \\<eta>: ValF\\<cdot>f \\<mapsto> unitK\\<cdot>(ValKF\\<cdot>f')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<theta>: f \\<mapsto> f' \\<Longrightarrow>\n    \\<eta>: ValF\\<cdot>f \\<mapsto> unitK\\<cdot>(ValKF\\<cdot>f')", "apply (subst F.delta_sol)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<theta>: f \\<mapsto> f' \\<Longrightarrow>\n    (ValF\\<cdot>f, unitK\\<cdot>(ValKF\\<cdot>f'))\n    \\<in> unlr (fst (lr (dual F.delta, F.delta)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<theta>: f \\<mapsto> f' \\<Longrightarrow>\n    (ValF\\<cdot>f, unitK\\<cdot>(ValKF\\<cdot>f'))\n    \\<in> fst (lr_rep (dual F.delta, F.delta))", "apply (subst lr_rep_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<theta>: f \\<mapsto> f' \\<Longrightarrow>\n    (ValF\\<cdot>f, unitK\\<cdot>(ValKF\\<cdot>f'))\n    \\<in> fst (lr_eta_rep (dual F.delta, F.delta),\n               lr_theta_rep (dual F.delta, F.delta))", "apply (fastforce simp: lr_eta_rep_def split_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma theta_F:\n  \"(\\<And>x x'. \\<eta>: x \\<mapsto> x' \\<Longrightarrow> \\<eta>: f\\<cdot>x \\<mapsto> f'\\<cdot>x') \\<Longrightarrow> \\<theta>: f \\<mapsto> f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x x'.\n        \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n        \\<eta>: f\\<cdot>x \\<mapsto> f'\\<cdot>x') \\<Longrightarrow>\n    \\<theta>: f \\<mapsto> f'", "apply (subst F.delta_sol)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x x'.\n        \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n        \\<eta>: f\\<cdot>x \\<mapsto> f'\\<cdot>x') \\<Longrightarrow>\n    (f, f') \\<in> unlr (snd (lr (dual F.delta, F.delta)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x x'.\n        \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n        \\<eta>: f\\<cdot>x \\<mapsto> f'\\<cdot>x') \\<Longrightarrow>\n    (f, f') \\<in> snd (lr_rep (dual F.delta, F.delta))", "apply (subst lr_rep_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x x'.\n        \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n        \\<eta>: f\\<cdot>x \\<mapsto> f'\\<cdot>x') \\<Longrightarrow>\n    (f, f')\n    \\<in> snd (lr_eta_rep (dual F.delta, F.delta),\n               lr_theta_rep (dual F.delta, F.delta))", "apply (simp add: lr_theta_rep_def split_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma eta_induct[case_names bottom N F, consumes 1]:\n  \"\\<lbrakk> \\<eta>: x \\<mapsto> x';\n     \\<lbrakk> x = \\<bottom>; x' = \\<bottom> \\<rbrakk> \\<Longrightarrow> P x x';\n     \\<And>n. \\<lbrakk> x = ValTT; x' = unitK\\<cdot>ValKTT \\<rbrakk> \\<Longrightarrow> P x x';\n     \\<And>n. \\<lbrakk> x = ValFF; x' = unitK\\<cdot>ValKFF \\<rbrakk> \\<Longrightarrow> P x x';\n     \\<And>n. \\<lbrakk> x = ValN\\<cdot>n; x' = unitK\\<cdot>(ValKN\\<cdot>n) \\<rbrakk> \\<Longrightarrow> P x x';\n     \\<And>f f'. \\<lbrakk> x = ValF\\<cdot>f; x' = unitK\\<cdot>(ValKF\\<cdot>f'); \\<theta>: f \\<mapsto> f' \\<rbrakk> \\<Longrightarrow> P x x'\n   \\<rbrakk> \\<Longrightarrow> P x x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<eta>: x \\<mapsto> x';\n     \\<lbrakk>x = \\<bottom>; x' = \\<bottom>\\<rbrakk>\n     \\<Longrightarrow> P x x';\n     \\<And>n.\n        \\<lbrakk>x = ValTT; x' = unitK\\<cdot>ValKTT\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     \\<And>n.\n        \\<lbrakk>x = ValFF; x' = unitK\\<cdot>ValKFF\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     \\<And>n.\n        \\<lbrakk>x = ValN\\<cdot>n; x' = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     \\<And>f f'.\n        \\<lbrakk>x = ValF\\<cdot>f; x' = unitK\\<cdot>(ValKF\\<cdot>f');\n         \\<theta>: f \\<mapsto> f'\\<rbrakk>\n        \\<Longrightarrow> P x x'\\<rbrakk>\n    \\<Longrightarrow> P x x'", "apply (cases x)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<eta>: x \\<mapsto> x';\n     \\<lbrakk>x = \\<bottom>; x' = \\<bottom>\\<rbrakk>\n     \\<Longrightarrow> P x x';\n     \\<And>n.\n        \\<lbrakk>x = ValTT; x' = unitK\\<cdot>ValKTT\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     \\<And>n.\n        \\<lbrakk>x = ValFF; x' = unitK\\<cdot>ValKFF\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     \\<And>n.\n        \\<lbrakk>x = ValN\\<cdot>n; x' = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     \\<And>f f'.\n        \\<lbrakk>x = ValF\\<cdot>f; x' = unitK\\<cdot>(ValKF\\<cdot>f');\n         \\<theta>: f \\<mapsto> f'\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     x = \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> P x x'\n 2. \\<And>cfun.\n       \\<lbrakk>\\<eta>: x \\<mapsto> x';\n        \\<lbrakk>x = \\<bottom>; x' = \\<bottom>\\<rbrakk>\n        \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValTT; x' = unitK\\<cdot>ValKTT\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValFF; x' = unitK\\<cdot>ValKFF\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValN\\<cdot>n;\n            x' = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>f f'.\n           \\<lbrakk>x = ValF\\<cdot>f; x' = unitK\\<cdot>(ValKF\\<cdot>f');\n            \\<theta>: f \\<mapsto> f'\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        x = ValF\\<cdot>cfun\\<rbrakk>\n       \\<Longrightarrow> P x x'\n 3. \\<lbrakk>\\<eta>: x \\<mapsto> x';\n     \\<lbrakk>x = \\<bottom>; x' = \\<bottom>\\<rbrakk>\n     \\<Longrightarrow> P x x';\n     \\<And>n.\n        \\<lbrakk>x = ValTT; x' = unitK\\<cdot>ValKTT\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     \\<And>n.\n        \\<lbrakk>x = ValFF; x' = unitK\\<cdot>ValKFF\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     \\<And>n.\n        \\<lbrakk>x = ValN\\<cdot>n; x' = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     \\<And>f f'.\n        \\<lbrakk>x = ValF\\<cdot>f; x' = unitK\\<cdot>(ValKF\\<cdot>f');\n         \\<theta>: f \\<mapsto> f'\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     x = ValTT\\<rbrakk>\n    \\<Longrightarrow> P x x'\n 4. \\<lbrakk>\\<eta>: x \\<mapsto> x';\n     \\<lbrakk>x = \\<bottom>; x' = \\<bottom>\\<rbrakk>\n     \\<Longrightarrow> P x x';\n     \\<And>n.\n        \\<lbrakk>x = ValTT; x' = unitK\\<cdot>ValKTT\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     \\<And>n.\n        \\<lbrakk>x = ValFF; x' = unitK\\<cdot>ValKFF\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     \\<And>n.\n        \\<lbrakk>x = ValN\\<cdot>n; x' = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     \\<And>f f'.\n        \\<lbrakk>x = ValF\\<cdot>f; x' = unitK\\<cdot>(ValKF\\<cdot>f');\n         \\<theta>: f \\<mapsto> f'\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     x = ValFF\\<rbrakk>\n    \\<Longrightarrow> P x x'\n 5. \\<And>nat.\n       \\<lbrakk>\\<eta>: x \\<mapsto> x';\n        \\<lbrakk>x = \\<bottom>; x' = \\<bottom>\\<rbrakk>\n        \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValTT; x' = unitK\\<cdot>ValKTT\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValFF; x' = unitK\\<cdot>ValKFF\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValN\\<cdot>n;\n            x' = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>f f'.\n           \\<lbrakk>x = ValF\\<cdot>f; x' = unitK\\<cdot>(ValKF\\<cdot>f');\n            \\<theta>: f \\<mapsto> f'\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        x = ValN\\<cdot>nat\\<rbrakk>\n       \\<Longrightarrow> P x x'", "apply (subst (asm) F.delta_sol, simp, simp add: lr_rep_def lr_eta_rep_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>cfun.\n       \\<lbrakk>\\<eta>: x \\<mapsto> x';\n        \\<lbrakk>x = \\<bottom>; x' = \\<bottom>\\<rbrakk>\n        \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValTT; x' = unitK\\<cdot>ValKTT\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValFF; x' = unitK\\<cdot>ValKFF\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValN\\<cdot>n;\n            x' = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>f f'.\n           \\<lbrakk>x = ValF\\<cdot>f; x' = unitK\\<cdot>(ValKF\\<cdot>f');\n            \\<theta>: f \\<mapsto> f'\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        x = ValF\\<cdot>cfun\\<rbrakk>\n       \\<Longrightarrow> P x x'\n 2. \\<lbrakk>\\<eta>: x \\<mapsto> x';\n     \\<lbrakk>x = \\<bottom>; x' = \\<bottom>\\<rbrakk>\n     \\<Longrightarrow> P x x';\n     \\<And>n.\n        \\<lbrakk>x = ValTT; x' = unitK\\<cdot>ValKTT\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     \\<And>n.\n        \\<lbrakk>x = ValFF; x' = unitK\\<cdot>ValKFF\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     \\<And>n.\n        \\<lbrakk>x = ValN\\<cdot>n; x' = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     \\<And>f f'.\n        \\<lbrakk>x = ValF\\<cdot>f; x' = unitK\\<cdot>(ValKF\\<cdot>f');\n         \\<theta>: f \\<mapsto> f'\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     x = ValTT\\<rbrakk>\n    \\<Longrightarrow> P x x'\n 3. \\<lbrakk>\\<eta>: x \\<mapsto> x';\n     \\<lbrakk>x = \\<bottom>; x' = \\<bottom>\\<rbrakk>\n     \\<Longrightarrow> P x x';\n     \\<And>n.\n        \\<lbrakk>x = ValTT; x' = unitK\\<cdot>ValKTT\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     \\<And>n.\n        \\<lbrakk>x = ValFF; x' = unitK\\<cdot>ValKFF\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     \\<And>n.\n        \\<lbrakk>x = ValN\\<cdot>n; x' = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     \\<And>f f'.\n        \\<lbrakk>x = ValF\\<cdot>f; x' = unitK\\<cdot>(ValKF\\<cdot>f');\n         \\<theta>: f \\<mapsto> f'\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     x = ValFF\\<rbrakk>\n    \\<Longrightarrow> P x x'\n 4. \\<And>nat.\n       \\<lbrakk>\\<eta>: x \\<mapsto> x';\n        \\<lbrakk>x = \\<bottom>; x' = \\<bottom>\\<rbrakk>\n        \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValTT; x' = unitK\\<cdot>ValKTT\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValFF; x' = unitK\\<cdot>ValKFF\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValN\\<cdot>n;\n            x' = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>f f'.\n           \\<lbrakk>x = ValF\\<cdot>f; x' = unitK\\<cdot>(ValKF\\<cdot>f');\n            \\<theta>: f \\<mapsto> f'\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        x = ValN\\<cdot>nat\\<rbrakk>\n       \\<Longrightarrow> P x x'", "defer"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<eta>: x \\<mapsto> x';\n     \\<lbrakk>x = \\<bottom>; x' = \\<bottom>\\<rbrakk>\n     \\<Longrightarrow> P x x';\n     \\<And>n.\n        \\<lbrakk>x = ValTT; x' = unitK\\<cdot>ValKTT\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     \\<And>n.\n        \\<lbrakk>x = ValFF; x' = unitK\\<cdot>ValKFF\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     \\<And>n.\n        \\<lbrakk>x = ValN\\<cdot>n; x' = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     \\<And>f f'.\n        \\<lbrakk>x = ValF\\<cdot>f; x' = unitK\\<cdot>(ValKF\\<cdot>f');\n         \\<theta>: f \\<mapsto> f'\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     x = ValTT\\<rbrakk>\n    \\<Longrightarrow> P x x'\n 2. \\<lbrakk>\\<eta>: x \\<mapsto> x';\n     \\<lbrakk>x = \\<bottom>; x' = \\<bottom>\\<rbrakk>\n     \\<Longrightarrow> P x x';\n     \\<And>n.\n        \\<lbrakk>x = ValTT; x' = unitK\\<cdot>ValKTT\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     \\<And>n.\n        \\<lbrakk>x = ValFF; x' = unitK\\<cdot>ValKFF\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     \\<And>n.\n        \\<lbrakk>x = ValN\\<cdot>n; x' = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     \\<And>f f'.\n        \\<lbrakk>x = ValF\\<cdot>f; x' = unitK\\<cdot>(ValKF\\<cdot>f');\n         \\<theta>: f \\<mapsto> f'\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     x = ValFF\\<rbrakk>\n    \\<Longrightarrow> P x x'\n 3. \\<And>nat.\n       \\<lbrakk>\\<eta>: x \\<mapsto> x';\n        \\<lbrakk>x = \\<bottom>; x' = \\<bottom>\\<rbrakk>\n        \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValTT; x' = unitK\\<cdot>ValKTT\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValFF; x' = unitK\\<cdot>ValKFF\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValN\\<cdot>n;\n            x' = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>f f'.\n           \\<lbrakk>x = ValF\\<cdot>f; x' = unitK\\<cdot>(ValKF\\<cdot>f');\n            \\<theta>: f \\<mapsto> f'\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        x = ValN\\<cdot>nat\\<rbrakk>\n       \\<Longrightarrow> P x x'\n 4. \\<And>cfun.\n       \\<lbrakk>\\<eta>: x \\<mapsto> x';\n        \\<lbrakk>x = \\<bottom>; x' = \\<bottom>\\<rbrakk>\n        \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValTT; x' = unitK\\<cdot>ValKTT\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValFF; x' = unitK\\<cdot>ValKFF\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValN\\<cdot>n;\n            x' = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>f f'.\n           \\<lbrakk>x = ValF\\<cdot>f; x' = unitK\\<cdot>(ValKF\\<cdot>f');\n            \\<theta>: f \\<mapsto> f'\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        x = ValF\\<cdot>cfun\\<rbrakk>\n       \\<Longrightarrow> P x x'", "apply (subst (asm) F.delta_sol, simp, simp add: lr_rep_def lr_eta_rep_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<eta>: x \\<mapsto> x';\n     \\<lbrakk>x = \\<bottom>; x' = \\<bottom>\\<rbrakk>\n     \\<Longrightarrow> P x x';\n     \\<And>n.\n        \\<lbrakk>x = ValTT; x' = unitK\\<cdot>ValKTT\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     \\<And>n.\n        \\<lbrakk>x = ValFF; x' = unitK\\<cdot>ValKFF\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     \\<And>n.\n        \\<lbrakk>x = ValN\\<cdot>n; x' = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     \\<And>f f'.\n        \\<lbrakk>x = ValF\\<cdot>f; x' = unitK\\<cdot>(ValKF\\<cdot>f');\n         \\<theta>: f \\<mapsto> f'\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     x = ValFF\\<rbrakk>\n    \\<Longrightarrow> P x x'\n 2. \\<And>nat.\n       \\<lbrakk>\\<eta>: x \\<mapsto> x';\n        \\<lbrakk>x = \\<bottom>; x' = \\<bottom>\\<rbrakk>\n        \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValTT; x' = unitK\\<cdot>ValKTT\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValFF; x' = unitK\\<cdot>ValKFF\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValN\\<cdot>n;\n            x' = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>f f'.\n           \\<lbrakk>x = ValF\\<cdot>f; x' = unitK\\<cdot>(ValKF\\<cdot>f');\n            \\<theta>: f \\<mapsto> f'\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        x = ValN\\<cdot>nat\\<rbrakk>\n       \\<Longrightarrow> P x x'\n 3. \\<And>cfun.\n       \\<lbrakk>\\<eta>: x \\<mapsto> x';\n        \\<lbrakk>x = \\<bottom>; x' = \\<bottom>\\<rbrakk>\n        \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValTT; x' = unitK\\<cdot>ValKTT\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValFF; x' = unitK\\<cdot>ValKFF\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValN\\<cdot>n;\n            x' = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>f f'.\n           \\<lbrakk>x = ValF\\<cdot>f; x' = unitK\\<cdot>(ValKF\\<cdot>f');\n            \\<theta>: f \\<mapsto> f'\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        x = ValF\\<cdot>cfun\\<rbrakk>\n       \\<Longrightarrow> P x x'", "apply (subst (asm) F.delta_sol, simp, simp add: lr_rep_def lr_eta_rep_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>nat.\n       \\<lbrakk>\\<eta>: x \\<mapsto> x';\n        \\<lbrakk>x = \\<bottom>; x' = \\<bottom>\\<rbrakk>\n        \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValTT; x' = unitK\\<cdot>ValKTT\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValFF; x' = unitK\\<cdot>ValKFF\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValN\\<cdot>n;\n            x' = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>f f'.\n           \\<lbrakk>x = ValF\\<cdot>f; x' = unitK\\<cdot>(ValKF\\<cdot>f');\n            \\<theta>: f \\<mapsto> f'\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        x = ValN\\<cdot>nat\\<rbrakk>\n       \\<Longrightarrow> P x x'\n 2. \\<And>cfun.\n       \\<lbrakk>\\<eta>: x \\<mapsto> x';\n        \\<lbrakk>x = \\<bottom>; x' = \\<bottom>\\<rbrakk>\n        \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValTT; x' = unitK\\<cdot>ValKTT\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValFF; x' = unitK\\<cdot>ValKFF\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValN\\<cdot>n;\n            x' = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>f f'.\n           \\<lbrakk>x = ValF\\<cdot>f; x' = unitK\\<cdot>(ValKF\\<cdot>f');\n            \\<theta>: f \\<mapsto> f'\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        x = ValF\\<cdot>cfun\\<rbrakk>\n       \\<Longrightarrow> P x x'", "apply (subst (asm) F.delta_sol, simp, simp add: lr_rep_def lr_eta_rep_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cfun.\n       \\<lbrakk>\\<eta>: x \\<mapsto> x';\n        \\<lbrakk>x = \\<bottom>; x' = \\<bottom>\\<rbrakk>\n        \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValTT; x' = unitK\\<cdot>ValKTT\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValFF; x' = unitK\\<cdot>ValKFF\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>n.\n           \\<lbrakk>x = ValN\\<cdot>n;\n            x' = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<And>f f'.\n           \\<lbrakk>x = ValF\\<cdot>f; x' = unitK\\<cdot>(ValKF\\<cdot>f');\n            \\<theta>: f \\<mapsto> f'\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        x = ValF\\<cdot>cfun\\<rbrakk>\n       \\<Longrightarrow> P x x'", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cfun.\n       \\<lbrakk>\\<eta>: ValF\\<cdot>cfun \\<mapsto> x';\n        \\<And>f f'.\n           \\<lbrakk>cfun = f; x' = unitK\\<cdot>(ValKF\\<cdot>f');\n            \\<theta>: f \\<mapsto> f'\\<rbrakk>\n           \\<Longrightarrow> P (ValF\\<cdot>f)\n                              (unitK\\<cdot>(ValKF\\<cdot>f'));\n        x = ValF\\<cdot>cfun\\<rbrakk>\n       \\<Longrightarrow> P (ValF\\<cdot>cfun) x'", "apply (subst (asm) F.delta_sol)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cfun.\n       \\<lbrakk>(ValF\\<cdot>cfun, x')\n                \\<in> unlr (fst (lr (dual F.delta, F.delta)));\n        \\<And>f f'.\n           \\<lbrakk>cfun = f; x' = unitK\\<cdot>(ValKF\\<cdot>f');\n            \\<theta>: f \\<mapsto> f'\\<rbrakk>\n           \\<Longrightarrow> P (ValF\\<cdot>f)\n                              (unitK\\<cdot>(ValKF\\<cdot>f'));\n        x = ValF\\<cdot>cfun\\<rbrakk>\n       \\<Longrightarrow> P (ValF\\<cdot>cfun) x'", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cfun.\n       \\<lbrakk>(ValF\\<cdot>cfun, x')\n                \\<in> fst (lr_rep (dual F.delta, F.delta));\n        \\<And>f f'.\n           \\<lbrakk>cfun = f; x' = unitK\\<cdot>(ValKF\\<cdot>f');\n            \\<theta>: f \\<mapsto> f'\\<rbrakk>\n           \\<Longrightarrow> P (ValF\\<cdot>f)\n                              (unitK\\<cdot>(ValKF\\<cdot>f'));\n        x = ValF\\<cdot>cfun\\<rbrakk>\n       \\<Longrightarrow> P (ValF\\<cdot>cfun) x'", "apply (subst (asm) lr_rep_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cfun.\n       \\<lbrakk>(ValF\\<cdot>cfun, x')\n                \\<in> fst (lr_eta_rep (dual F.delta, F.delta),\n                           lr_theta_rep (dual F.delta, F.delta));\n        \\<And>f f'.\n           \\<lbrakk>cfun = f; x' = unitK\\<cdot>(ValKF\\<cdot>f');\n            \\<theta>: f \\<mapsto> f'\\<rbrakk>\n           \\<Longrightarrow> P (ValF\\<cdot>f)\n                              (unitK\\<cdot>(ValKF\\<cdot>f'));\n        x = ValF\\<cdot>cfun\\<rbrakk>\n       \\<Longrightarrow> P (ValF\\<cdot>cfun) x'", "apply (subst (asm) lr_eta_rep_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cfun.\n       \\<lbrakk>(ValF\\<cdot>cfun, x')\n                \\<in> fst ({(e, e').\n                            e = \\<bottom> \\<and> e' = \\<bottom> \\<or>\n                            e = ValTT \\<and> e' = unitK\\<cdot>ValKTT \\<or>\n                            e = ValFF \\<and> e' = unitK\\<cdot>ValKFF \\<or>\n                            (\\<exists>n.\n                                e = ValN\\<cdot>n \\<and>\n                                e' = unitK\\<cdot>(ValKN\\<cdot>n))} \\<union>\n                           (case (dual F.delta, F.delta) of\n                            (rm, rp) \\<Rightarrow>\n                              {(e, e').\n                               e = \\<bottom> \\<and> e' = \\<bottom> \\<or>\n                               (\\<exists>f f'.\n                                   e = ValF\\<cdot>f \\<and>\n                                   e' = unitK\\<cdot>(ValKF\\<cdot>f') \\<and>\n                                   (f, f') \\<in> unlr (snd rp))}),\n                           lr_theta_rep (dual F.delta, F.delta));\n        \\<And>f f'.\n           \\<lbrakk>cfun = f; x' = unitK\\<cdot>(ValKF\\<cdot>f');\n            \\<theta>: f \\<mapsto> f'\\<rbrakk>\n           \\<Longrightarrow> P (ValF\\<cdot>f)\n                              (unitK\\<cdot>(ValKF\\<cdot>f'));\n        x = ValF\\<cdot>cfun\\<rbrakk>\n       \\<Longrightarrow> P (ValF\\<cdot>cfun) x'", "apply clarsimp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma theta_induct[case_names F, consumes 1]:\n  \"\\<lbrakk> \\<theta>: f \\<mapsto> f';\n     (\\<And>x x'. \\<eta>: x \\<mapsto> x' \\<Longrightarrow> \\<eta>: f\\<cdot>x \\<mapsto> f'\\<cdot>x') \\<Longrightarrow> P f f'\n   \\<rbrakk> \\<Longrightarrow> P f f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<theta>: f \\<mapsto> f';\n     (\\<And>x x'.\n         \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n         \\<eta>: f\\<cdot>x \\<mapsto> f'\\<cdot>x') \\<Longrightarrow>\n     P f f'\\<rbrakk>\n    \\<Longrightarrow> P f f'", "apply (subst (asm) F.delta_sol)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(f, f') \\<in> unlr (snd (lr (dual F.delta, F.delta)));\n     (\\<And>x x'.\n         \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n         \\<eta>: f\\<cdot>x \\<mapsto> f'\\<cdot>x') \\<Longrightarrow>\n     P f f'\\<rbrakk>\n    \\<Longrightarrow> P f f'", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(f, f') \\<in> snd (lr_rep (dual F.delta, F.delta));\n     (\\<And>x x'.\n         \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n         \\<eta>: f\\<cdot>x \\<mapsto> f'\\<cdot>x') \\<Longrightarrow>\n     P f f'\\<rbrakk>\n    \\<Longrightarrow> P f f'", "apply (subst (asm) lr_rep_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(f, f')\n             \\<in> snd (lr_eta_rep (dual F.delta, F.delta),\n                        lr_theta_rep (dual F.delta, F.delta));\n     (\\<And>x x'.\n         \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n         \\<eta>: f\\<cdot>x \\<mapsto> f'\\<cdot>x') \\<Longrightarrow>\n     P f f'\\<rbrakk>\n    \\<Longrightarrow> P f f'", "apply (subst (asm) lr_theta_rep_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(f, f')\n             \\<in> snd (lr_eta_rep (dual F.delta, F.delta),\n                        case (dual F.delta, F.delta) of\n                        (rm, rp) \\<Rightarrow>\n                          {(f, f').\n                           \\<forall>(x, x')\\<in>unlr (fst (undual rm)).\n                              (f\\<cdot>x, f'\\<cdot>x')\n                              \\<in> unlr (fst rp)});\n     (\\<And>x x'.\n         \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n         \\<eta>: f\\<cdot>x \\<mapsto> f'\\<cdot>x') \\<Longrightarrow>\n     P f f'\\<rbrakk>\n    \\<Longrightarrow> P f f'", "apply fastforce"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "text\\<open>\n\nTheorem 1 from \\citet{DBLP:conf/icalp/Reynolds74}.\n\n\\<close>"], ["", "lemma AbsV_aux:\n  assumes \"\\<eta>: ValF\\<cdot>f \\<mapsto> unitK\\<cdot>(ValKF\\<cdot>f')\"\n  shows \"\\<eta>: ValF\\<cdot>(strictify\\<cdot>f) \\<mapsto> unitK\\<cdot>(ValKF\\<cdot>(\\<Lambda> x c. x\\<cdot>(\\<Lambda> x'. f'\\<cdot>(unitK\\<cdot>x')\\<cdot>c)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta>: ValF\\<cdot>\n            (strictify\\<cdot>\n             f) \\<mapsto> unitK\\<cdot>\n                          (ValKF\\<cdot>\n                           (\\<Lambda> x c.\n                               x\\<cdot>\n                               (\\<Lambda> x'.\n                                   f'\\<cdot>(unitK\\<cdot>x')\\<cdot>c)))", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta>: ValF\\<cdot>\n            (strictify\\<cdot>\n             f) \\<mapsto> unitK\\<cdot>\n                          (ValKF\\<cdot>\n                           (\\<Lambda> x c.\n                               x\\<cdot>\n                               (\\<Lambda> x'.\n                                   f'\\<cdot>(unitK\\<cdot>x')\\<cdot>c)))", "apply (rule eta_F)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<theta>: strictify\\<cdot>\n              f \\<mapsto> (\\<Lambda> x c.\n                              x\\<cdot>\n                              (\\<Lambda> x'.\n                                  f'\\<cdot>(unitK\\<cdot>x')\\<cdot>c))", "apply (rule theta_F)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x x'.\n       \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n       \\<eta>: strictify\\<cdot>f\\<cdot>\n               x \\<mapsto> (\\<Lambda> x c.\n                               x\\<cdot>\n                               (\\<Lambda> x'.\n                                   f'\\<cdot>(unitK\\<cdot>x')\\<cdot>\n                                   c))\\<cdot>\n                           x'", "using assms"], ["proof (prove)\nusing this:\n  \\<eta>: ValF\\<cdot>f \\<mapsto> unitK\\<cdot>(ValKF\\<cdot>f')\n\ngoal (1 subgoal):\n 1. \\<And>x x'.\n       \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n       \\<eta>: strictify\\<cdot>f\\<cdot>\n               x \\<mapsto> (\\<Lambda> x c.\n                               x\\<cdot>\n                               (\\<Lambda> x'.\n                                   f'\\<cdot>(unitK\\<cdot>x')\\<cdot>\n                                   c))\\<cdot>\n                           x'", "apply (rule eta_induct)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x x'.\n       \\<lbrakk>\\<eta>: x \\<mapsto> x'; ValF\\<cdot>f = \\<bottom>;\n        unitK\\<cdot>(ValKF\\<cdot>f') = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: strictify\\<cdot>f\\<cdot>\n                                 x \\<mapsto> (\\<Lambda> x c.\n           x\\<cdot>(\\<Lambda> x'. f'\\<cdot>(unitK\\<cdot>x')\\<cdot>c))\\<cdot>\n       x'\n 2. \\<And>x x' n.\n       \\<lbrakk>\\<eta>: x \\<mapsto> x'; ValF\\<cdot>f = ValTT;\n        unitK\\<cdot>(ValKF\\<cdot>f') = unitK\\<cdot>ValKTT\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: strictify\\<cdot>f\\<cdot>\n                                 x \\<mapsto> (\\<Lambda> x c.\n           x\\<cdot>(\\<Lambda> x'. f'\\<cdot>(unitK\\<cdot>x')\\<cdot>c))\\<cdot>\n       x'\n 3. \\<And>x x' n.\n       \\<lbrakk>\\<eta>: x \\<mapsto> x'; ValF\\<cdot>f = ValFF;\n        unitK\\<cdot>(ValKF\\<cdot>f') = unitK\\<cdot>ValKFF\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: strictify\\<cdot>f\\<cdot>\n                                 x \\<mapsto> (\\<Lambda> x c.\n           x\\<cdot>(\\<Lambda> x'. f'\\<cdot>(unitK\\<cdot>x')\\<cdot>c))\\<cdot>\n       x'\n 4. \\<And>x x' n.\n       \\<lbrakk>\\<eta>: x \\<mapsto> x'; ValF\\<cdot>f = ValN\\<cdot>n;\n        unitK\\<cdot>(ValKF\\<cdot>f') = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: strictify\\<cdot>f\\<cdot>\n                                 x \\<mapsto> (\\<Lambda> x c.\n           x\\<cdot>(\\<Lambda> x'. f'\\<cdot>(unitK\\<cdot>x')\\<cdot>c))\\<cdot>\n       x'\n 5. \\<And>x x' fa f'a.\n       \\<lbrakk>\\<eta>: x \\<mapsto> x'; ValF\\<cdot>f = ValF\\<cdot>fa;\n        unitK\\<cdot>(ValKF\\<cdot>f') = unitK\\<cdot>(ValKF\\<cdot>f'a);\n        \\<theta>: fa \\<mapsto> f'a\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: strictify\\<cdot>f\\<cdot>\n                                 x \\<mapsto> (\\<Lambda> x c.\n           x\\<cdot>(\\<Lambda> x'. f'\\<cdot>(unitK\\<cdot>x')\\<cdot>c))\\<cdot>\n       x'", "(* FIXME special rule would help *)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x x'.\n       \\<lbrakk>\\<eta>: x \\<mapsto> x'; ValF\\<cdot>f = \\<bottom>;\n        unitK\\<cdot>(ValKF\\<cdot>f') = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: strictify\\<cdot>f\\<cdot>\n                                 x \\<mapsto> (\\<Lambda> x c.\n           x\\<cdot>(\\<Lambda> x'. f'\\<cdot>(unitK\\<cdot>x')\\<cdot>c))\\<cdot>\n       x'\n 2. \\<And>x x' n.\n       \\<lbrakk>\\<eta>: x \\<mapsto> x'; ValF\\<cdot>f = ValTT;\n        unitK\\<cdot>(ValKF\\<cdot>f') = unitK\\<cdot>ValKTT\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: strictify\\<cdot>f\\<cdot>\n                                 x \\<mapsto> (\\<Lambda> x c.\n           x\\<cdot>(\\<Lambda> x'. f'\\<cdot>(unitK\\<cdot>x')\\<cdot>c))\\<cdot>\n       x'\n 3. \\<And>x x' n.\n       \\<lbrakk>\\<eta>: x \\<mapsto> x'; ValF\\<cdot>f = ValFF;\n        unitK\\<cdot>(ValKF\\<cdot>f') = unitK\\<cdot>ValKFF\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: strictify\\<cdot>f\\<cdot>\n                                 x \\<mapsto> (\\<Lambda> x c.\n           x\\<cdot>(\\<Lambda> x'. f'\\<cdot>(unitK\\<cdot>x')\\<cdot>c))\\<cdot>\n       x'\n 4. \\<And>x x' n.\n       \\<lbrakk>\\<eta>: x \\<mapsto> x'; ValF\\<cdot>f = ValN\\<cdot>n;\n        unitK\\<cdot>(ValKF\\<cdot>f') = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: strictify\\<cdot>f\\<cdot>\n                                 x \\<mapsto> (\\<Lambda> x c.\n           x\\<cdot>(\\<Lambda> x'. f'\\<cdot>(unitK\\<cdot>x')\\<cdot>c))\\<cdot>\n       x'\n 5. \\<And>x x' fa f'a.\n       \\<lbrakk>\\<eta>: x \\<mapsto> x'; ValF\\<cdot>f = ValF\\<cdot>fa;\n        unitK\\<cdot>(ValKF\\<cdot>f') = unitK\\<cdot>(ValKF\\<cdot>f'a);\n        \\<theta>: fa \\<mapsto> f'a\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: strictify\\<cdot>f\\<cdot>\n                                 x \\<mapsto> (\\<Lambda> x c.\n           x\\<cdot>(\\<Lambda> x'. f'\\<cdot>(unitK\\<cdot>x')\\<cdot>c))\\<cdot>\n       x'", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x x' fa f'a.\n       \\<lbrakk>\\<eta>: x \\<mapsto> x'; f = fa;\n        unitK\\<cdot>(ValKF\\<cdot>f') = unitK\\<cdot>(ValKF\\<cdot>f'a);\n        \\<theta>: fa \\<mapsto> f'a\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: strictify\\<cdot>fa\\<cdot>\n                                 x \\<mapsto> (\\<Lambda> c.\n           x'\\<cdot>(\\<Lambda> x'. f'\\<cdot>(unitK\\<cdot>x')\\<cdot>c))", "apply (drule injD[OF below_monic_inj[OF below_monic_unitK]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x x' fa f'a.\n       \\<lbrakk>\\<eta>: x \\<mapsto> x'; f = fa; \\<theta>: fa \\<mapsto> f'a;\n        ValKF\\<cdot>f' = ValKF\\<cdot>f'a\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: strictify\\<cdot>fa\\<cdot>\n                                 x \\<mapsto> (\\<Lambda> c.\n           x'\\<cdot>(\\<Lambda> x'. f'\\<cdot>(unitK\\<cdot>x')\\<cdot>c))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x x'.\n       \\<lbrakk>\\<eta>: x \\<mapsto> x'; \\<theta>: f \\<mapsto> f'\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: strictify\\<cdot>f\\<cdot>\n                                 x \\<mapsto> (\\<Lambda> c.\n           x'\\<cdot>(\\<Lambda> x'. f'\\<cdot>(unitK\\<cdot>x')\\<cdot>c))", "apply (erule theta_induct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x x'.\n       \\<lbrakk>\\<eta>: x \\<mapsto> x';\n        \\<And>x x'.\n           \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n           \\<eta>: f\\<cdot>x \\<mapsto> f'\\<cdot>x'\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: strictify\\<cdot>f\\<cdot>\n                                 x \\<mapsto> (\\<Lambda> c.\n           x'\\<cdot>(\\<Lambda> x'. f'\\<cdot>(unitK\\<cdot>x')\\<cdot>c))", "apply (erule eta_induct)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x x'.\n       \\<lbrakk>\\<And>x x'.\n                   \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n                   \\<eta>: f\\<cdot>x \\<mapsto> f'\\<cdot>x';\n        x = \\<bottom>; x' = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: strictify\\<cdot>f\\<cdot>\n                                 x \\<mapsto> (\\<Lambda> c.\n           x'\\<cdot>(\\<Lambda> x'. f'\\<cdot>(unitK\\<cdot>x')\\<cdot>c))\n 2. \\<And>x x' n.\n       \\<lbrakk>\\<And>x x'.\n                   \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n                   \\<eta>: f\\<cdot>x \\<mapsto> f'\\<cdot>x';\n        x = ValTT; x' = unitK\\<cdot>ValKTT\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: strictify\\<cdot>f\\<cdot>\n                                 x \\<mapsto> (\\<Lambda> c.\n           x'\\<cdot>(\\<Lambda> x'. f'\\<cdot>(unitK\\<cdot>x')\\<cdot>c))\n 3. \\<And>x x' n.\n       \\<lbrakk>\\<And>x x'.\n                   \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n                   \\<eta>: f\\<cdot>x \\<mapsto> f'\\<cdot>x';\n        x = ValFF; x' = unitK\\<cdot>ValKFF\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: strictify\\<cdot>f\\<cdot>\n                                 x \\<mapsto> (\\<Lambda> c.\n           x'\\<cdot>(\\<Lambda> x'. f'\\<cdot>(unitK\\<cdot>x')\\<cdot>c))\n 4. \\<And>x x' n.\n       \\<lbrakk>\\<And>x x'.\n                   \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n                   \\<eta>: f\\<cdot>x \\<mapsto> f'\\<cdot>x';\n        x = ValN\\<cdot>n; x' = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: strictify\\<cdot>f\\<cdot>\n                                 x \\<mapsto> (\\<Lambda> c.\n           x'\\<cdot>(\\<Lambda> x'. f'\\<cdot>(unitK\\<cdot>x')\\<cdot>c))\n 5. \\<And>x x' fa f'a.\n       \\<lbrakk>\\<And>x x'.\n                   \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n                   \\<eta>: f\\<cdot>x \\<mapsto> f'\\<cdot>x';\n        x = ValF\\<cdot>fa; x' = unitK\\<cdot>(ValKF\\<cdot>f'a);\n        \\<theta>: fa \\<mapsto> f'a\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: strictify\\<cdot>f\\<cdot>\n                                 x \\<mapsto> (\\<Lambda> c.\n           x'\\<cdot>(\\<Lambda> x'. f'\\<cdot>(unitK\\<cdot>x')\\<cdot>c))", "apply (simp_all add: eta_cfun eta_F)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "text\\<open>\\<close>"], ["", "theorem Theorem1:\n  assumes \"\\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\"\n  shows \"\\<eta>: evalD e\\<cdot>\\<rho> \\<mapsto> evalK e\\<cdot>\\<rho>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK e\\<cdot>\\<rho>'", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK e\\<cdot>\\<rho>'", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\n\ngoal (1 subgoal):\n 1. \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK e\\<cdot>\\<rho>'", "proof(induct e arbitrary: \\<rho> \\<rho>')"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Var x\\<rbrakk>\\<rho> \\<mapsto> evalK (Var x)\\<cdot>\n                 \\<rho>'\n 2. \\<And>e1 e2 \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e1\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e1\\<cdot>\n                          \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e2\\<rbrakk>\\<rho> \\<mapsto> evalK e2\\<cdot>\n                  \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>App e1\n     e2\\<rbrakk>\\<rho> \\<mapsto> evalK (App e1 e2)\\<cdot>\\<rho>'\n 3. \\<And>x1a e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>AbsN x1a\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (AbsN x1a e)\\<cdot>\\<rho>'\n 4. \\<And>x1a e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>AbsV x1a\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (AbsV x1a e)\\<cdot>\\<rho>'\n 5. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>\\<Omega>\\<rbrakk>\\<rho> \\<mapsto> evalK\n                     \\<Omega>\\<cdot>\n                    \\<rho>'\n 6. \\<And>x1a e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Fix x1a\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Fix x1a e)\\<cdot>\\<rho>'\n 7. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>tt\\<rbrakk>\\<rho> \\<mapsto> evalK tt\\<cdot>\\<rho>'\n 8. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>ff\\<rbrakk>\\<rho> \\<mapsto> evalK ff\\<cdot>\\<rho>'\n 9. \\<And>e1 e2 e3 \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e1\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e1\\<cdot>\n                          \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e2\\<rbrakk>\\<rho> \\<mapsto> evalK e2\\<cdot>\n                  \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e3\\<rbrakk>\\<rho> \\<mapsto> evalK e3\\<cdot>\n                  \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Cond e1 e2\n     e3\\<rbrakk>\\<rho> \\<mapsto> evalK (Cond e1 e2 e3)\\<cdot>\\<rho>'\n 10. \\<And>x \\<rho> \\<rho>'.\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>\n                   v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n        \\<eta>: \\<lbrakk>Num x\\<rbrakk>\\<rho> \\<mapsto> evalK (Num x)\\<cdot>\n                  \\<rho>'\nA total of 13 subgoals...", "case App"], ["proof (state)\nthis:\n  \\<forall>v.\n     \\<eta>: ?\\<rho>\\<cdot>v \\<mapsto> ?\\<rho>'\\<cdot>v \\<Longrightarrow>\n  \\<eta>: \\<lbrakk>e1_\\<rbrakk>?\\<rho> \\<mapsto> evalK e1_\\<cdot>?\\<rho>'\n  \\<forall>v.\n     \\<eta>: ?\\<rho>\\<cdot>v \\<mapsto> ?\\<rho>'\\<cdot>v \\<Longrightarrow>\n  \\<eta>: \\<lbrakk>e2_\\<rbrakk>?\\<rho> \\<mapsto> evalK e2_\\<cdot>?\\<rho>'\n  \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\n\ngoal (13 subgoals):\n 1. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Var x\\<rbrakk>\\<rho> \\<mapsto> evalK (Var x)\\<cdot>\n                 \\<rho>'\n 2. \\<And>e1 e2 \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e1\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e1\\<cdot>\n                          \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e2\\<rbrakk>\\<rho> \\<mapsto> evalK e2\\<cdot>\n                  \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>App e1\n     e2\\<rbrakk>\\<rho> \\<mapsto> evalK (App e1 e2)\\<cdot>\\<rho>'\n 3. \\<And>x1a e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>AbsN x1a\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (AbsN x1a e)\\<cdot>\\<rho>'\n 4. \\<And>x1a e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>AbsV x1a\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (AbsV x1a e)\\<cdot>\\<rho>'\n 5. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>\\<Omega>\\<rbrakk>\\<rho> \\<mapsto> evalK\n                     \\<Omega>\\<cdot>\n                    \\<rho>'\n 6. \\<And>x1a e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Fix x1a\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Fix x1a e)\\<cdot>\\<rho>'\n 7. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>tt\\<rbrakk>\\<rho> \\<mapsto> evalK tt\\<cdot>\\<rho>'\n 8. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>ff\\<rbrakk>\\<rho> \\<mapsto> evalK ff\\<cdot>\\<rho>'\n 9. \\<And>e1 e2 e3 \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e1\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e1\\<cdot>\n                          \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e2\\<rbrakk>\\<rho> \\<mapsto> evalK e2\\<cdot>\n                  \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e3\\<rbrakk>\\<rho> \\<mapsto> evalK e3\\<cdot>\n                  \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Cond e1 e2\n     e3\\<rbrakk>\\<rho> \\<mapsto> evalK (Cond e1 e2 e3)\\<cdot>\\<rho>'\n 10. \\<And>x \\<rho> \\<rho>'.\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>\n                   v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n        \\<eta>: \\<lbrakk>Num x\\<rbrakk>\\<rho> \\<mapsto> evalK (Num x)\\<cdot>\n                  \\<rho>'\nA total of 13 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta>: \\<lbrakk>App e1_\n                      e2_\\<rbrakk>\\<rho> \\<mapsto> evalK\n              (App e1_ e2_)\\<cdot>\n             \\<rho>'", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta>: appF\\<cdot>(\\<lbrakk>e1_\\<rbrakk>\\<rho>)\\<cdot>\n            (\\<lbrakk>e2_\\<rbrakk>\\<rho>) \\<mapsto> appKM\\<cdot>\n              (evalK e1_\\<cdot>\\<rho>')\\<cdot>\n              (evalK e2_\\<cdot>\\<rho>')", "apply (simp add: appKM_def bindK_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta>: appF\\<cdot>(\\<lbrakk>e1_\\<rbrakk>\\<rho>)\\<cdot>\n            (\\<lbrakk>e2_\\<rbrakk>\\<rho>) \\<mapsto> (\\<Lambda> c.\n                  evalK e1_\\<cdot>\\<rho>'\\<cdot>\n                  (\\<Lambda> a.\n                      (\\<Lambda> (ValKF\\<cdot>f).\n                          f\\<cdot>(evalK e2_\\<cdot>\\<rho>'))\\<cdot>\n                      a\\<cdot>\n                      c))", "using App.hyps(1)[OF App(3)]"], ["proof (prove)\nusing this:\n  \\<eta>: \\<lbrakk>e1_\\<rbrakk>\\<rho> \\<mapsto> evalK e1_\\<cdot>\\<rho>'\n\ngoal (1 subgoal):\n 1. \\<eta>: appF\\<cdot>(\\<lbrakk>e1_\\<rbrakk>\\<rho>)\\<cdot>\n            (\\<lbrakk>e2_\\<rbrakk>\\<rho>) \\<mapsto> (\\<Lambda> c.\n                  evalK e1_\\<cdot>\\<rho>'\\<cdot>\n                  (\\<Lambda> a.\n                      (\\<Lambda> (ValKF\\<cdot>f).\n                          f\\<cdot>(evalK e2_\\<cdot>\\<rho>'))\\<cdot>\n                      a\\<cdot>\n                      c))", "apply (rule eta_induct)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<lbrakk>e1_\\<rbrakk>\\<rho> = \\<bottom>;\n     evalK e1_\\<cdot>\\<rho>' = \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<eta>: appF\\<cdot>\n                              (\\<lbrakk>e1_\\<rbrakk>\\<rho>)\\<cdot>\n                              (\\<lbrakk>e2_\\<rbrakk>\\<rho>) \\<mapsto> (\\<Lambda> c.\n                                    evalK e1_\\<cdot>\\<rho>'\\<cdot>\n                                    (\\<Lambda> a.\n  (\\<Lambda> (ValKF\\<cdot>f). f\\<cdot>(evalK e2_\\<cdot>\\<rho>'))\\<cdot>\n  a\\<cdot>\n  c))\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>e1_\\<rbrakk>\\<rho> = ValTT;\n        evalK e1_\\<cdot>\\<rho>' = unitK\\<cdot>ValKTT\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: appF\\<cdot>\n                                 (\\<lbrakk>e1_\\<rbrakk>\\<rho>)\\<cdot>\n                                 (\\<lbrakk>e2_\\<rbrakk>\\<rho>) \\<mapsto> (\\<Lambda> c.\n evalK e1_\\<cdot>\\<rho>'\\<cdot>\n (\\<Lambda> a.\n     (\\<Lambda> (ValKF\\<cdot>f). f\\<cdot>(evalK e2_\\<cdot>\\<rho>'))\\<cdot>\n     a\\<cdot>\n     c))\n 3. \\<And>n.\n       \\<lbrakk>\\<lbrakk>e1_\\<rbrakk>\\<rho> = ValFF;\n        evalK e1_\\<cdot>\\<rho>' = unitK\\<cdot>ValKFF\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: appF\\<cdot>\n                                 (\\<lbrakk>e1_\\<rbrakk>\\<rho>)\\<cdot>\n                                 (\\<lbrakk>e2_\\<rbrakk>\\<rho>) \\<mapsto> (\\<Lambda> c.\n evalK e1_\\<cdot>\\<rho>'\\<cdot>\n (\\<Lambda> a.\n     (\\<Lambda> (ValKF\\<cdot>f). f\\<cdot>(evalK e2_\\<cdot>\\<rho>'))\\<cdot>\n     a\\<cdot>\n     c))\n 4. \\<And>n.\n       \\<lbrakk>\\<lbrakk>e1_\\<rbrakk>\\<rho> = ValN\\<cdot>n;\n        evalK e1_\\<cdot>\\<rho>' = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: appF\\<cdot>\n                                 (\\<lbrakk>e1_\\<rbrakk>\\<rho>)\\<cdot>\n                                 (\\<lbrakk>e2_\\<rbrakk>\\<rho>) \\<mapsto> (\\<Lambda> c.\n evalK e1_\\<cdot>\\<rho>'\\<cdot>\n (\\<Lambda> a.\n     (\\<Lambda> (ValKF\\<cdot>f). f\\<cdot>(evalK e2_\\<cdot>\\<rho>'))\\<cdot>\n     a\\<cdot>\n     c))\n 5. \\<And>f f'.\n       \\<lbrakk>\\<lbrakk>e1_\\<rbrakk>\\<rho> = ValF\\<cdot>f;\n        evalK e1_\\<cdot>\\<rho>' = unitK\\<cdot>(ValKF\\<cdot>f');\n        \\<theta>: f \\<mapsto> f'\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: appF\\<cdot>\n                                 (\\<lbrakk>e1_\\<rbrakk>\\<rho>)\\<cdot>\n                                 (\\<lbrakk>e2_\\<rbrakk>\\<rho>) \\<mapsto> (\\<Lambda> c.\n evalK e1_\\<cdot>\\<rho>'\\<cdot>\n (\\<Lambda> a.\n     (\\<Lambda> (ValKF\\<cdot>f). f\\<cdot>(evalK e2_\\<cdot>\\<rho>'))\\<cdot>\n     a\\<cdot>\n     c))", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       \\<lbrakk>\\<lbrakk>e1_\\<rbrakk>\\<rho> = ValF\\<cdot>f;\n        evalK e1_\\<cdot>\\<rho>' = unitK\\<cdot>(ValKF\\<cdot>f');\n        \\<theta>: f \\<mapsto> f'\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: f\\<cdot>\n                                 (\\<lbrakk>e2_\\<rbrakk>\\<rho>) \\<mapsto> (\\<Lambda> c.\n f'\\<cdot>(evalK e2_\\<cdot>\\<rho>')\\<cdot>c)", "apply (simp add: eta_cfun)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       \\<lbrakk>\\<lbrakk>e1_\\<rbrakk>\\<rho> = ValF\\<cdot>f;\n        evalK e1_\\<cdot>\\<rho>' = unitK\\<cdot>(ValKF\\<cdot>f');\n        \\<theta>: f \\<mapsto> f'\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: f\\<cdot>\n                                 (\\<lbrakk>e2_\\<rbrakk>\\<rho>) \\<mapsto> f'\\<cdot>\n                                   (evalK e2_\\<cdot>\\<rho>')", "apply (erule theta_induct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       \\<lbrakk>\\<lbrakk>e1_\\<rbrakk>\\<rho> = ValF\\<cdot>f;\n        evalK e1_\\<cdot>\\<rho>' = unitK\\<cdot>(ValKF\\<cdot>f');\n        \\<And>x x'.\n           \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n           \\<eta>: f\\<cdot>x \\<mapsto> f'\\<cdot>x'\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: f\\<cdot>\n                                 (\\<lbrakk>e2_\\<rbrakk>\\<rho>) \\<mapsto> f'\\<cdot>\n                                   (evalK e2_\\<cdot>\\<rho>')", "using App.hyps(2)[OF App(3)]"], ["proof (prove)\nusing this:\n  \\<eta>: \\<lbrakk>e2_\\<rbrakk>\\<rho> \\<mapsto> evalK e2_\\<cdot>\\<rho>'\n\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       \\<lbrakk>\\<lbrakk>e1_\\<rbrakk>\\<rho> = ValF\\<cdot>f;\n        evalK e1_\\<cdot>\\<rho>' = unitK\\<cdot>(ValKF\\<cdot>f');\n        \\<And>x x'.\n           \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n           \\<eta>: f\\<cdot>x \\<mapsto> f'\\<cdot>x'\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: f\\<cdot>\n                                 (\\<lbrakk>e2_\\<rbrakk>\\<rho>) \\<mapsto> f'\\<cdot>\n                                   (evalK e2_\\<cdot>\\<rho>')", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<eta>: \\<lbrakk>App e1_\n                    e2_\\<rbrakk>\\<rho> \\<mapsto> evalK (App e1_ e2_)\\<cdot>\n           \\<rho>'\n\ngoal (12 subgoals):\n 1. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Var x\\<rbrakk>\\<rho> \\<mapsto> evalK (Var x)\\<cdot>\n                 \\<rho>'\n 2. \\<And>x1a e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>AbsN x1a\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (AbsN x1a e)\\<cdot>\\<rho>'\n 3. \\<And>x1a e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>AbsV x1a\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (AbsV x1a e)\\<cdot>\\<rho>'\n 4. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>\\<Omega>\\<rbrakk>\\<rho> \\<mapsto> evalK\n                     \\<Omega>\\<cdot>\n                    \\<rho>'\n 5. \\<And>x1a e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Fix x1a\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Fix x1a e)\\<cdot>\\<rho>'\n 6. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>tt\\<rbrakk>\\<rho> \\<mapsto> evalK tt\\<cdot>\\<rho>'\n 7. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>ff\\<rbrakk>\\<rho> \\<mapsto> evalK ff\\<cdot>\\<rho>'\n 8. \\<And>e1 e2 e3 \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e1\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e1\\<cdot>\n                          \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e2\\<rbrakk>\\<rho> \\<mapsto> evalK e2\\<cdot>\n                  \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e3\\<rbrakk>\\<rho> \\<mapsto> evalK e3\\<cdot>\n                  \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Cond e1 e2\n     e3\\<rbrakk>\\<rho> \\<mapsto> evalK (Cond e1 e2 e3)\\<cdot>\\<rho>'\n 9. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Num x\\<rbrakk>\\<rho> \\<mapsto> evalK (Num x)\\<cdot>\n                 \\<rho>'\n 10. \\<And>e \\<rho> \\<rho>'.\n        \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                    \\<forall>v.\n                       \\<eta>: \\<rho>\\<cdot>\n                               v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                    \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e\\<cdot>\n                          \\<rho>';\n         \\<forall>v.\n            \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n        \\<Longrightarrow> \\<eta>: \\<lbrakk>Succ\n      e\\<rbrakk>\\<rho> \\<mapsto> evalK (Succ e)\\<cdot>\\<rho>'\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Var x\\<rbrakk>\\<rho> \\<mapsto> evalK (Var x)\\<cdot>\n                 \\<rho>'\n 2. \\<And>x1a e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>AbsN x1a\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (AbsN x1a e)\\<cdot>\\<rho>'\n 3. \\<And>x1a e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>AbsV x1a\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (AbsV x1a e)\\<cdot>\\<rho>'\n 4. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>\\<Omega>\\<rbrakk>\\<rho> \\<mapsto> evalK\n                     \\<Omega>\\<cdot>\n                    \\<rho>'\n 5. \\<And>x1a e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Fix x1a\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Fix x1a e)\\<cdot>\\<rho>'\n 6. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>tt\\<rbrakk>\\<rho> \\<mapsto> evalK tt\\<cdot>\\<rho>'\n 7. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>ff\\<rbrakk>\\<rho> \\<mapsto> evalK ff\\<cdot>\\<rho>'\n 8. \\<And>e1 e2 e3 \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e1\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e1\\<cdot>\n                          \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e2\\<rbrakk>\\<rho> \\<mapsto> evalK e2\\<cdot>\n                  \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e3\\<rbrakk>\\<rho> \\<mapsto> evalK e3\\<cdot>\n                  \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Cond e1 e2\n     e3\\<rbrakk>\\<rho> \\<mapsto> evalK (Cond e1 e2 e3)\\<cdot>\\<rho>'\n 9. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Num x\\<rbrakk>\\<rho> \\<mapsto> evalK (Num x)\\<cdot>\n                 \\<rho>'\n 10. \\<And>e \\<rho> \\<rho>'.\n        \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                    \\<forall>v.\n                       \\<eta>: \\<rho>\\<cdot>\n                               v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                    \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e\\<cdot>\n                          \\<rho>';\n         \\<forall>v.\n            \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n        \\<Longrightarrow> \\<eta>: \\<lbrakk>Succ\n      e\\<rbrakk>\\<rho> \\<mapsto> evalK (Succ e)\\<cdot>\\<rho>'\nA total of 12 subgoals...", "case AbsN"], ["proof (state)\nthis:\n  \\<forall>v.\n     \\<eta>: ?\\<rho>\\<cdot>v \\<mapsto> ?\\<rho>'\\<cdot>v \\<Longrightarrow>\n  \\<eta>: \\<lbrakk>e_\\<rbrakk>?\\<rho> \\<mapsto> evalK e_\\<cdot>?\\<rho>'\n  \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\n\ngoal (12 subgoals):\n 1. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Var x\\<rbrakk>\\<rho> \\<mapsto> evalK (Var x)\\<cdot>\n                 \\<rho>'\n 2. \\<And>x1a e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>AbsN x1a\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (AbsN x1a e)\\<cdot>\\<rho>'\n 3. \\<And>x1a e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>AbsV x1a\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (AbsV x1a e)\\<cdot>\\<rho>'\n 4. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>\\<Omega>\\<rbrakk>\\<rho> \\<mapsto> evalK\n                     \\<Omega>\\<cdot>\n                    \\<rho>'\n 5. \\<And>x1a e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Fix x1a\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Fix x1a e)\\<cdot>\\<rho>'\n 6. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>tt\\<rbrakk>\\<rho> \\<mapsto> evalK tt\\<cdot>\\<rho>'\n 7. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>ff\\<rbrakk>\\<rho> \\<mapsto> evalK ff\\<cdot>\\<rho>'\n 8. \\<And>e1 e2 e3 \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e1\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e1\\<cdot>\n                          \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e2\\<rbrakk>\\<rho> \\<mapsto> evalK e2\\<cdot>\n                  \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e3\\<rbrakk>\\<rho> \\<mapsto> evalK e3\\<cdot>\n                  \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Cond e1 e2\n     e3\\<rbrakk>\\<rho> \\<mapsto> evalK (Cond e1 e2 e3)\\<cdot>\\<rho>'\n 9. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Num x\\<rbrakk>\\<rho> \\<mapsto> evalK (Num x)\\<cdot>\n                 \\<rho>'\n 10. \\<And>e \\<rho> \\<rho>'.\n        \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                    \\<forall>v.\n                       \\<eta>: \\<rho>\\<cdot>\n                               v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                    \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e\\<cdot>\n                          \\<rho>';\n         \\<forall>v.\n            \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n        \\<Longrightarrow> \\<eta>: \\<lbrakk>Succ\n      e\\<rbrakk>\\<rho> \\<mapsto> evalK (Succ e)\\<cdot>\\<rho>'\nA total of 12 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta>: \\<lbrakk>AbsN x1a_\n                      e_\\<rbrakk>\\<rho> \\<mapsto> evalK\n             (AbsN x1a_ e_)\\<cdot>\n            \\<rho>'", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta>: ValF\\<cdot>\n            (\\<Lambda> x.\n                \\<lbrakk>e_\\<rbrakk>(env_ext\\<cdot>x1a_\\<cdot>x\\<cdot>\n                                     \\<rho>)) \\<mapsto> unitK\\<cdot>\n                  (ValKF\\<cdot>\n                   (\\<Lambda> x.\n                       evalK e_\\<cdot>\n                       (env_ext\\<cdot>x1a_\\<cdot>x\\<cdot>\\<rho>')))", "apply (rule eta_F)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<theta>: (\\<Lambda> x.\n                  \\<lbrakk>e_\\<rbrakk>(env_ext\\<cdot>x1a_\\<cdot>x\\<cdot>\n \\<rho>)) \\<mapsto> (\\<Lambda> x.\n                        evalK e_\\<cdot>\n                        (env_ext\\<cdot>x1a_\\<cdot>x\\<cdot>\\<rho>'))", "apply (rule theta_F)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x x'.\n       \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n       \\<eta>: (\\<Lambda> x.\n                   \\<lbrakk>e_\\<rbrakk>(env_ext\\<cdot>x1a_\\<cdot>x\\<cdot>\n  \\<rho>))\\<cdot>\n               x \\<mapsto> (\\<Lambda> x.\n                               evalK e_\\<cdot>\n                               (env_ext\\<cdot>x1a_\\<cdot>x\\<cdot>\n                                \\<rho>'))\\<cdot>\n                           x'", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x x'.\n       \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>e_\\<rbrakk>(env_ext\\<cdot>x1a_\\<cdot>x\\<cdot>\n                                    \\<rho>) \\<mapsto> evalK e_\\<cdot>\n                (env_ext\\<cdot>x1a_\\<cdot>x'\\<cdot>\\<rho>')", "apply (rule AbsN.hyps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x x'.\n       \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n       \\<forall>v.\n          \\<eta>: env_ext\\<cdot>x1a_\\<cdot>x\\<cdot>\\<rho>\\<cdot>\n                  v \\<mapsto> env_ext\\<cdot>x1a_\\<cdot>x'\\<cdot>\n                              \\<rho>'\\<cdot>\n                              v", "using AbsN(2)"], ["proof (prove)\nusing this:\n  \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\n\ngoal (1 subgoal):\n 1. \\<And>x x'.\n       \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n       \\<forall>v.\n          \\<eta>: env_ext\\<cdot>x1a_\\<cdot>x\\<cdot>\\<rho>\\<cdot>\n                  v \\<mapsto> env_ext\\<cdot>x1a_\\<cdot>x'\\<cdot>\n                              \\<rho>'\\<cdot>\n                              v", "unfolding env_ext_def"], ["proof (prove)\nusing this:\n  \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\n\ngoal (1 subgoal):\n 1. \\<And>x x'.\n       \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n       \\<forall>v.\n          \\<eta>: (\\<Lambda> v x \\<rho> v'.\n                      if v = v' then x else \\<rho>\\<cdot>v')\\<cdot>\n                  x1a_\\<cdot>\n                  x\\<cdot>\n                  \\<rho>\\<cdot>\n                  v \\<mapsto> (\\<Lambda> v x \\<rho> v'.\n                                  if v = v' then x\n                                  else \\<rho>\\<cdot>v')\\<cdot>\n                              x1a_\\<cdot>\n                              x'\\<cdot>\n                              \\<rho>'\\<cdot>\n                              v", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<eta>: \\<lbrakk>AbsN x1a_\n                    e_\\<rbrakk>\\<rho> \\<mapsto> evalK (AbsN x1a_ e_)\\<cdot>\n          \\<rho>'\n\ngoal (11 subgoals):\n 1. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Var x\\<rbrakk>\\<rho> \\<mapsto> evalK (Var x)\\<cdot>\n                 \\<rho>'\n 2. \\<And>x1a e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>AbsV x1a\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (AbsV x1a e)\\<cdot>\\<rho>'\n 3. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>\\<Omega>\\<rbrakk>\\<rho> \\<mapsto> evalK\n                     \\<Omega>\\<cdot>\n                    \\<rho>'\n 4. \\<And>x1a e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Fix x1a\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Fix x1a e)\\<cdot>\\<rho>'\n 5. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>tt\\<rbrakk>\\<rho> \\<mapsto> evalK tt\\<cdot>\\<rho>'\n 6. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>ff\\<rbrakk>\\<rho> \\<mapsto> evalK ff\\<cdot>\\<rho>'\n 7. \\<And>e1 e2 e3 \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e1\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e1\\<cdot>\n                          \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e2\\<rbrakk>\\<rho> \\<mapsto> evalK e2\\<cdot>\n                  \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e3\\<rbrakk>\\<rho> \\<mapsto> evalK e3\\<cdot>\n                  \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Cond e1 e2\n     e3\\<rbrakk>\\<rho> \\<mapsto> evalK (Cond e1 e2 e3)\\<cdot>\\<rho>'\n 8. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Num x\\<rbrakk>\\<rho> \\<mapsto> evalK (Num x)\\<cdot>\n                 \\<rho>'\n 9. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Succ\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Succ e)\\<cdot>\\<rho>'\n 10. \\<And>e \\<rho> \\<rho>'.\n        \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                    \\<forall>v.\n                       \\<eta>: \\<rho>\\<cdot>\n                               v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                    \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e\\<cdot>\n                          \\<rho>';\n         \\<forall>v.\n            \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n        \\<Longrightarrow> \\<eta>: \\<lbrakk>Pred\n      e\\<rbrakk>\\<rho> \\<mapsto> evalK (Pred e)\\<cdot>\\<rho>'\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Var x\\<rbrakk>\\<rho> \\<mapsto> evalK (Var x)\\<cdot>\n                 \\<rho>'\n 2. \\<And>x1a e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>AbsV x1a\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (AbsV x1a e)\\<cdot>\\<rho>'\n 3. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>\\<Omega>\\<rbrakk>\\<rho> \\<mapsto> evalK\n                     \\<Omega>\\<cdot>\n                    \\<rho>'\n 4. \\<And>x1a e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Fix x1a\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Fix x1a e)\\<cdot>\\<rho>'\n 5. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>tt\\<rbrakk>\\<rho> \\<mapsto> evalK tt\\<cdot>\\<rho>'\n 6. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>ff\\<rbrakk>\\<rho> \\<mapsto> evalK ff\\<cdot>\\<rho>'\n 7. \\<And>e1 e2 e3 \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e1\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e1\\<cdot>\n                          \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e2\\<rbrakk>\\<rho> \\<mapsto> evalK e2\\<cdot>\n                  \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e3\\<rbrakk>\\<rho> \\<mapsto> evalK e3\\<cdot>\n                  \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Cond e1 e2\n     e3\\<rbrakk>\\<rho> \\<mapsto> evalK (Cond e1 e2 e3)\\<cdot>\\<rho>'\n 8. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Num x\\<rbrakk>\\<rho> \\<mapsto> evalK (Num x)\\<cdot>\n                 \\<rho>'\n 9. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Succ\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Succ e)\\<cdot>\\<rho>'\n 10. \\<And>e \\<rho> \\<rho>'.\n        \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                    \\<forall>v.\n                       \\<eta>: \\<rho>\\<cdot>\n                               v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                    \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e\\<cdot>\n                          \\<rho>';\n         \\<forall>v.\n            \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n        \\<Longrightarrow> \\<eta>: \\<lbrakk>Pred\n      e\\<rbrakk>\\<rho> \\<mapsto> evalK (Pred e)\\<cdot>\\<rho>'\nA total of 11 subgoals...", "case (AbsV v e \\<rho> \\<rho>')"], ["proof (state)\nthis:\n  \\<forall>v.\n     \\<eta>: ?\\<rho>\\<cdot>v \\<mapsto> ?\\<rho>'\\<cdot>v \\<Longrightarrow>\n  \\<eta>: \\<lbrakk>e\\<rbrakk>?\\<rho> \\<mapsto> evalK e\\<cdot>?\\<rho>'\n  \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\n\ngoal (11 subgoals):\n 1. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Var x\\<rbrakk>\\<rho> \\<mapsto> evalK (Var x)\\<cdot>\n                 \\<rho>'\n 2. \\<And>x1a e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>AbsV x1a\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (AbsV x1a e)\\<cdot>\\<rho>'\n 3. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>\\<Omega>\\<rbrakk>\\<rho> \\<mapsto> evalK\n                     \\<Omega>\\<cdot>\n                    \\<rho>'\n 4. \\<And>x1a e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Fix x1a\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Fix x1a e)\\<cdot>\\<rho>'\n 5. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>tt\\<rbrakk>\\<rho> \\<mapsto> evalK tt\\<cdot>\\<rho>'\n 6. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>ff\\<rbrakk>\\<rho> \\<mapsto> evalK ff\\<cdot>\\<rho>'\n 7. \\<And>e1 e2 e3 \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e1\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e1\\<cdot>\n                          \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e2\\<rbrakk>\\<rho> \\<mapsto> evalK e2\\<cdot>\n                  \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e3\\<rbrakk>\\<rho> \\<mapsto> evalK e3\\<cdot>\n                  \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Cond e1 e2\n     e3\\<rbrakk>\\<rho> \\<mapsto> evalK (Cond e1 e2 e3)\\<cdot>\\<rho>'\n 8. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Num x\\<rbrakk>\\<rho> \\<mapsto> evalK (Num x)\\<cdot>\n                 \\<rho>'\n 9. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Succ\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Succ e)\\<cdot>\\<rho>'\n 10. \\<And>e \\<rho> \\<rho>'.\n        \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                    \\<forall>v.\n                       \\<eta>: \\<rho>\\<cdot>\n                               v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                    \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e\\<cdot>\n                          \\<rho>';\n         \\<forall>v.\n            \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n        \\<Longrightarrow> \\<eta>: \\<lbrakk>Pred\n      e\\<rbrakk>\\<rho> \\<mapsto> evalK (Pred e)\\<cdot>\\<rho>'\nA total of 11 subgoals...", "have \"\\<eta>: ValF\\<cdot>(\\<Lambda> x. evalD e\\<cdot>(env_ext\\<cdot>v\\<cdot>x\\<cdot>\\<rho>)) \\<mapsto> unitK\\<cdot>(ValKF\\<cdot>(\\<Lambda> x. evalK e\\<cdot>(env_ext\\<cdot>v\\<cdot>x\\<cdot>\\<rho>')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta>: ValF\\<cdot>\n            (\\<Lambda> x.\n                \\<lbrakk>e\\<rbrakk>(env_ext\\<cdot>v\\<cdot>x\\<cdot>\n                                    \\<rho>)) \\<mapsto> unitK\\<cdot>\n                 (ValKF\\<cdot>\n                  (\\<Lambda> x.\n                      evalK e\\<cdot>\n                      (env_ext\\<cdot>v\\<cdot>x\\<cdot>\\<rho>')))", "apply (rule eta_F)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<theta>: (\\<Lambda> x.\n                  \\<lbrakk>e\\<rbrakk>(env_ext\\<cdot>v\\<cdot>x\\<cdot>\n\\<rho>)) \\<mapsto> (\\<Lambda> x.\n                       evalK e\\<cdot>\n                       (env_ext\\<cdot>v\\<cdot>x\\<cdot>\\<rho>'))", "apply (rule theta_F)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x x'.\n       \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n       \\<eta>: (\\<Lambda> x.\n                   \\<lbrakk>e\\<rbrakk>(env_ext\\<cdot>v\\<cdot>x\\<cdot>\n \\<rho>))\\<cdot>\n               x \\<mapsto> (\\<Lambda> x.\n                               evalK e\\<cdot>\n                               (env_ext\\<cdot>v\\<cdot>x\\<cdot>\n                                \\<rho>'))\\<cdot>\n                           x'", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x x'.\n       \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>e\\<rbrakk>(env_ext\\<cdot>v\\<cdot>x\\<cdot>\n                                   \\<rho>) \\<mapsto> evalK e\\<cdot>\n               (env_ext\\<cdot>v\\<cdot>x'\\<cdot>\\<rho>')", "apply (rule AbsV.hyps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x x'.\n       \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n       \\<forall>va.\n          \\<eta>: env_ext\\<cdot>v\\<cdot>x\\<cdot>\\<rho>\\<cdot>\n                  va \\<mapsto> env_ext\\<cdot>v\\<cdot>x'\\<cdot>\\<rho>'\\<cdot>\n                               va", "using AbsV(2)"], ["proof (prove)\nusing this:\n  \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\n\ngoal (1 subgoal):\n 1. \\<And>x x'.\n       \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n       \\<forall>va.\n          \\<eta>: env_ext\\<cdot>v\\<cdot>x\\<cdot>\\<rho>\\<cdot>\n                  va \\<mapsto> env_ext\\<cdot>v\\<cdot>x'\\<cdot>\\<rho>'\\<cdot>\n                               va", "unfolding env_ext_def"], ["proof (prove)\nusing this:\n  \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\n\ngoal (1 subgoal):\n 1. \\<And>x x'.\n       \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n       \\<forall>va.\n          \\<eta>: (\\<Lambda> v x \\<rho> v'.\n                      if v = v' then x else \\<rho>\\<cdot>v')\\<cdot>\n                  v\\<cdot>\n                  x\\<cdot>\n                  \\<rho>\\<cdot>\n                  va \\<mapsto> (\\<Lambda> v x \\<rho> v'.\n                                   if v = v' then x\n                                   else \\<rho>\\<cdot>v')\\<cdot>\n                               v\\<cdot>\n                               x'\\<cdot>\n                               \\<rho>'\\<cdot>\n                               va", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<eta>: ValF\\<cdot>\n          (\\<Lambda> x.\n              \\<lbrakk>e\\<rbrakk>(env_ext\\<cdot>v\\<cdot>x\\<cdot>\n                                  \\<rho>)) \\<mapsto> unitK\\<cdot>\n               (ValKF\\<cdot>\n                (\\<Lambda> x.\n                    evalK e\\<cdot>(env_ext\\<cdot>v\\<cdot>x\\<cdot>\\<rho>')))\n\ngoal (11 subgoals):\n 1. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Var x\\<rbrakk>\\<rho> \\<mapsto> evalK (Var x)\\<cdot>\n                 \\<rho>'\n 2. \\<And>x1a e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>AbsV x1a\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (AbsV x1a e)\\<cdot>\\<rho>'\n 3. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>\\<Omega>\\<rbrakk>\\<rho> \\<mapsto> evalK\n                     \\<Omega>\\<cdot>\n                    \\<rho>'\n 4. \\<And>x1a e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Fix x1a\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Fix x1a e)\\<cdot>\\<rho>'\n 5. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>tt\\<rbrakk>\\<rho> \\<mapsto> evalK tt\\<cdot>\\<rho>'\n 6. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>ff\\<rbrakk>\\<rho> \\<mapsto> evalK ff\\<cdot>\\<rho>'\n 7. \\<And>e1 e2 e3 \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e1\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e1\\<cdot>\n                          \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e2\\<rbrakk>\\<rho> \\<mapsto> evalK e2\\<cdot>\n                  \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e3\\<rbrakk>\\<rho> \\<mapsto> evalK e3\\<cdot>\n                  \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Cond e1 e2\n     e3\\<rbrakk>\\<rho> \\<mapsto> evalK (Cond e1 e2 e3)\\<cdot>\\<rho>'\n 8. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Num x\\<rbrakk>\\<rho> \\<mapsto> evalK (Num x)\\<cdot>\n                 \\<rho>'\n 9. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Succ\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Succ e)\\<cdot>\\<rho>'\n 10. \\<And>e \\<rho> \\<rho>'.\n        \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                    \\<forall>v.\n                       \\<eta>: \\<rho>\\<cdot>\n                               v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                    \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e\\<cdot>\n                          \\<rho>';\n         \\<forall>v.\n            \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n        \\<Longrightarrow> \\<eta>: \\<lbrakk>Pred\n      e\\<rbrakk>\\<rho> \\<mapsto> evalK (Pred e)\\<cdot>\\<rho>'\nA total of 11 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<eta>: ValF\\<cdot>\n          (\\<Lambda> x.\n              \\<lbrakk>e\\<rbrakk>(env_ext\\<cdot>v\\<cdot>x\\<cdot>\n                                  \\<rho>)) \\<mapsto> unitK\\<cdot>\n               (ValKF\\<cdot>\n                (\\<Lambda> x.\n                    evalK e\\<cdot>(env_ext\\<cdot>v\\<cdot>x\\<cdot>\\<rho>')))\n\ngoal (1 subgoal):\n 1. \\<eta>: \\<lbrakk>AbsV v\n                      e\\<rbrakk>\\<rho> \\<mapsto> evalK (AbsV v e)\\<cdot>\n           \\<rho>'", "by (fastforce dest: AbsV_aux)"], ["proof (state)\nthis:\n  \\<eta>: \\<lbrakk>AbsV v\n                    e\\<rbrakk>\\<rho> \\<mapsto> evalK (AbsV v e)\\<cdot>\n         \\<rho>'\n\ngoal (10 subgoals):\n 1. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Var x\\<rbrakk>\\<rho> \\<mapsto> evalK (Var x)\\<cdot>\n                 \\<rho>'\n 2. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>\\<Omega>\\<rbrakk>\\<rho> \\<mapsto> evalK\n                     \\<Omega>\\<cdot>\n                    \\<rho>'\n 3. \\<And>x1a e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Fix x1a\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Fix x1a e)\\<cdot>\\<rho>'\n 4. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>tt\\<rbrakk>\\<rho> \\<mapsto> evalK tt\\<cdot>\\<rho>'\n 5. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>ff\\<rbrakk>\\<rho> \\<mapsto> evalK ff\\<cdot>\\<rho>'\n 6. \\<And>e1 e2 e3 \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e1\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e1\\<cdot>\n                          \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e2\\<rbrakk>\\<rho> \\<mapsto> evalK e2\\<cdot>\n                  \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e3\\<rbrakk>\\<rho> \\<mapsto> evalK e3\\<cdot>\n                  \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Cond e1 e2\n     e3\\<rbrakk>\\<rho> \\<mapsto> evalK (Cond e1 e2 e3)\\<cdot>\\<rho>'\n 7. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Num x\\<rbrakk>\\<rho> \\<mapsto> evalK (Num x)\\<cdot>\n                 \\<rho>'\n 8. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Succ\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Succ e)\\<cdot>\\<rho>'\n 9. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Pred\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Pred e)\\<cdot>\\<rho>'\n 10. \\<And>e \\<rho> \\<rho>'.\n        \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                    \\<forall>v.\n                       \\<eta>: \\<rho>\\<cdot>\n                               v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                    \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e\\<cdot>\n                          \\<rho>';\n         \\<forall>v.\n            \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n        \\<Longrightarrow> \\<eta>: \\<lbrakk>IsZero\n      e\\<rbrakk>\\<rho> \\<mapsto> evalK (IsZero e)\\<cdot>\\<rho>'", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Var x\\<rbrakk>\\<rho> \\<mapsto> evalK (Var x)\\<cdot>\n                 \\<rho>'\n 2. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>\\<Omega>\\<rbrakk>\\<rho> \\<mapsto> evalK\n                     \\<Omega>\\<cdot>\n                    \\<rho>'\n 3. \\<And>x1a e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Fix x1a\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Fix x1a e)\\<cdot>\\<rho>'\n 4. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>tt\\<rbrakk>\\<rho> \\<mapsto> evalK tt\\<cdot>\\<rho>'\n 5. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>ff\\<rbrakk>\\<rho> \\<mapsto> evalK ff\\<cdot>\\<rho>'\n 6. \\<And>e1 e2 e3 \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e1\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e1\\<cdot>\n                          \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e2\\<rbrakk>\\<rho> \\<mapsto> evalK e2\\<cdot>\n                  \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e3\\<rbrakk>\\<rho> \\<mapsto> evalK e3\\<cdot>\n                  \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Cond e1 e2\n     e3\\<rbrakk>\\<rho> \\<mapsto> evalK (Cond e1 e2 e3)\\<cdot>\\<rho>'\n 7. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Num x\\<rbrakk>\\<rho> \\<mapsto> evalK (Num x)\\<cdot>\n                 \\<rho>'\n 8. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Succ\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Succ e)\\<cdot>\\<rho>'\n 9. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Pred\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Pred e)\\<cdot>\\<rho>'\n 10. \\<And>e \\<rho> \\<rho>'.\n        \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                    \\<forall>v.\n                       \\<eta>: \\<rho>\\<cdot>\n                               v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                    \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e\\<cdot>\n                          \\<rho>';\n         \\<forall>v.\n            \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n        \\<Longrightarrow> \\<eta>: \\<lbrakk>IsZero\n      e\\<rbrakk>\\<rho> \\<mapsto> evalK (IsZero e)\\<cdot>\\<rho>'", "case Fix"], ["proof (state)\nthis:\n  \\<forall>v.\n     \\<eta>: ?\\<rho>\\<cdot>v \\<mapsto> ?\\<rho>'\\<cdot>v \\<Longrightarrow>\n  \\<eta>: \\<lbrakk>e_\\<rbrakk>?\\<rho> \\<mapsto> evalK e_\\<cdot>?\\<rho>'\n  \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\n\ngoal (10 subgoals):\n 1. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Var x\\<rbrakk>\\<rho> \\<mapsto> evalK (Var x)\\<cdot>\n                 \\<rho>'\n 2. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>\\<Omega>\\<rbrakk>\\<rho> \\<mapsto> evalK\n                     \\<Omega>\\<cdot>\n                    \\<rho>'\n 3. \\<And>x1a e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Fix x1a\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Fix x1a e)\\<cdot>\\<rho>'\n 4. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>tt\\<rbrakk>\\<rho> \\<mapsto> evalK tt\\<cdot>\\<rho>'\n 5. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>ff\\<rbrakk>\\<rho> \\<mapsto> evalK ff\\<cdot>\\<rho>'\n 6. \\<And>e1 e2 e3 \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e1\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e1\\<cdot>\n                          \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e2\\<rbrakk>\\<rho> \\<mapsto> evalK e2\\<cdot>\n                  \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e3\\<rbrakk>\\<rho> \\<mapsto> evalK e3\\<cdot>\n                  \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Cond e1 e2\n     e3\\<rbrakk>\\<rho> \\<mapsto> evalK (Cond e1 e2 e3)\\<cdot>\\<rho>'\n 7. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Num x\\<rbrakk>\\<rho> \\<mapsto> evalK (Num x)\\<cdot>\n                 \\<rho>'\n 8. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Succ\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Succ e)\\<cdot>\\<rho>'\n 9. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Pred\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Pred e)\\<cdot>\\<rho>'\n 10. \\<And>e \\<rho> \\<rho>'.\n        \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                    \\<forall>v.\n                       \\<eta>: \\<rho>\\<cdot>\n                               v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                    \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e\\<cdot>\n                          \\<rho>';\n         \\<forall>v.\n            \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n        \\<Longrightarrow> \\<eta>: \\<lbrakk>IsZero\n      e\\<rbrakk>\\<rho> \\<mapsto> evalK (IsZero e)\\<cdot>\\<rho>'", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>v.\n     \\<eta>: ?\\<rho>\\<cdot>v \\<mapsto> ?\\<rho>'\\<cdot>v \\<Longrightarrow>\n  \\<eta>: \\<lbrakk>e_\\<rbrakk>?\\<rho> \\<mapsto> evalK e_\\<cdot>?\\<rho>'\n  \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\n\ngoal (1 subgoal):\n 1. \\<eta>: \\<lbrakk>Fix x1a_\n                      e_\\<rbrakk>\\<rho> \\<mapsto> evalK (Fix x1a_ e_)\\<cdot>\n            \\<rho>'", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                \\<forall>v.\n                   \\<eta>: \\<rho>\\<cdot>\n                           v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                \\<eta>: \\<lbrakk>e_\\<rbrakk>\\<rho> \\<mapsto> evalK e_\\<cdot>\n                       \\<rho>';\n     \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n    \\<Longrightarrow> \\<eta>: (\\<mu> x.\n                                  \\<lbrakk>e_\\<rbrakk>(env_ext\\<cdot>\n                 x1a_\\<cdot>\n                 x\\<cdot>\n                 \\<rho>)) \\<mapsto> (\\<mu> x.\n  evalK e_\\<cdot>(env_ext\\<cdot>x1a_\\<cdot>x\\<cdot>\\<rho>'))", "apply (rule parallel_fix_ind)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                \\<forall>v.\n                   \\<eta>: \\<rho>\\<cdot>\n                           v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                \\<eta>: \\<lbrakk>e_\\<rbrakk>\\<rho> \\<mapsto> evalK e_\\<cdot>\n                       \\<rho>';\n     \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n    \\<Longrightarrow> adm (\\<lambda>x. \\<eta>: fst x \\<mapsto> snd x)\n 2. \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                \\<forall>v.\n                   \\<eta>: \\<rho>\\<cdot>\n                           v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                \\<eta>: \\<lbrakk>e_\\<rbrakk>\\<rho> \\<mapsto> evalK e_\\<cdot>\n                       \\<rho>';\n     \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n    \\<Longrightarrow> \\<eta>: \\<bottom> \\<mapsto> \\<bottom>\n 3. \\<And>x y.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e_\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e_\\<cdot>\n                          \\<rho>';\n        \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v;\n        \\<eta>: x \\<mapsto> y\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: (\\<Lambda> x.\n                                     \\<lbrakk>e_\\<rbrakk>(env_ext\\<cdot>\n                    x1a_\\<cdot>\n                    x\\<cdot>\n                    \\<rho>))\\<cdot>\n                                 x \\<mapsto> (\\<Lambda> x.\n           evalK e_\\<cdot>(env_ext\\<cdot>x1a_\\<cdot>x\\<cdot>\\<rho>'))\\<cdot>\n       y", "apply (simp_all add: env_ext_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<eta>: \\<lbrakk>Fix x1a_\n                    e_\\<rbrakk>\\<rho> \\<mapsto> evalK (Fix x1a_ e_)\\<cdot>\n          \\<rho>'\n\ngoal (9 subgoals):\n 1. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Var x\\<rbrakk>\\<rho> \\<mapsto> evalK (Var x)\\<cdot>\n                 \\<rho>'\n 2. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>\\<Omega>\\<rbrakk>\\<rho> \\<mapsto> evalK\n                     \\<Omega>\\<cdot>\n                    \\<rho>'\n 3. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>tt\\<rbrakk>\\<rho> \\<mapsto> evalK tt\\<cdot>\\<rho>'\n 4. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>ff\\<rbrakk>\\<rho> \\<mapsto> evalK ff\\<cdot>\\<rho>'\n 5. \\<And>e1 e2 e3 \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e1\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e1\\<cdot>\n                          \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e2\\<rbrakk>\\<rho> \\<mapsto> evalK e2\\<cdot>\n                  \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e3\\<rbrakk>\\<rho> \\<mapsto> evalK e3\\<cdot>\n                  \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Cond e1 e2\n     e3\\<rbrakk>\\<rho> \\<mapsto> evalK (Cond e1 e2 e3)\\<cdot>\\<rho>'\n 6. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Num x\\<rbrakk>\\<rho> \\<mapsto> evalK (Num x)\\<cdot>\n                 \\<rho>'\n 7. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Succ\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Succ e)\\<cdot>\\<rho>'\n 8. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Pred\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Pred e)\\<cdot>\\<rho>'\n 9. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>IsZero\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (IsZero e)\\<cdot>\\<rho>'", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Var x\\<rbrakk>\\<rho> \\<mapsto> evalK (Var x)\\<cdot>\n                 \\<rho>'\n 2. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>\\<Omega>\\<rbrakk>\\<rho> \\<mapsto> evalK\n                     \\<Omega>\\<cdot>\n                    \\<rho>'\n 3. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>tt\\<rbrakk>\\<rho> \\<mapsto> evalK tt\\<cdot>\\<rho>'\n 4. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>ff\\<rbrakk>\\<rho> \\<mapsto> evalK ff\\<cdot>\\<rho>'\n 5. \\<And>e1 e2 e3 \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e1\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e1\\<cdot>\n                          \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e2\\<rbrakk>\\<rho> \\<mapsto> evalK e2\\<cdot>\n                  \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e3\\<rbrakk>\\<rho> \\<mapsto> evalK e3\\<cdot>\n                  \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Cond e1 e2\n     e3\\<rbrakk>\\<rho> \\<mapsto> evalK (Cond e1 e2 e3)\\<cdot>\\<rho>'\n 6. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Num x\\<rbrakk>\\<rho> \\<mapsto> evalK (Num x)\\<cdot>\n                 \\<rho>'\n 7. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Succ\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Succ e)\\<cdot>\\<rho>'\n 8. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Pred\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Pred e)\\<cdot>\\<rho>'\n 9. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>IsZero\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (IsZero e)\\<cdot>\\<rho>'", "case Cond"], ["proof (state)\nthis:\n  \\<forall>v.\n     \\<eta>: ?\\<rho>\\<cdot>v \\<mapsto> ?\\<rho>'\\<cdot>v \\<Longrightarrow>\n  \\<eta>: \\<lbrakk>e1_\\<rbrakk>?\\<rho> \\<mapsto> evalK e1_\\<cdot>?\\<rho>'\n  \\<forall>v.\n     \\<eta>: ?\\<rho>\\<cdot>v \\<mapsto> ?\\<rho>'\\<cdot>v \\<Longrightarrow>\n  \\<eta>: \\<lbrakk>e2_\\<rbrakk>?\\<rho> \\<mapsto> evalK e2_\\<cdot>?\\<rho>'\n  \\<forall>v.\n     \\<eta>: ?\\<rho>\\<cdot>v \\<mapsto> ?\\<rho>'\\<cdot>v \\<Longrightarrow>\n  \\<eta>: \\<lbrakk>e3_\\<rbrakk>?\\<rho> \\<mapsto> evalK e3_\\<cdot>?\\<rho>'\n  \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\n\ngoal (9 subgoals):\n 1. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Var x\\<rbrakk>\\<rho> \\<mapsto> evalK (Var x)\\<cdot>\n                 \\<rho>'\n 2. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>\\<Omega>\\<rbrakk>\\<rho> \\<mapsto> evalK\n                     \\<Omega>\\<cdot>\n                    \\<rho>'\n 3. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>tt\\<rbrakk>\\<rho> \\<mapsto> evalK tt\\<cdot>\\<rho>'\n 4. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>ff\\<rbrakk>\\<rho> \\<mapsto> evalK ff\\<cdot>\\<rho>'\n 5. \\<And>e1 e2 e3 \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e1\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e1\\<cdot>\n                          \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e2\\<rbrakk>\\<rho> \\<mapsto> evalK e2\\<cdot>\n                  \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e3\\<rbrakk>\\<rho> \\<mapsto> evalK e3\\<cdot>\n                  \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Cond e1 e2\n     e3\\<rbrakk>\\<rho> \\<mapsto> evalK (Cond e1 e2 e3)\\<cdot>\\<rho>'\n 6. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Num x\\<rbrakk>\\<rho> \\<mapsto> evalK (Num x)\\<cdot>\n                 \\<rho>'\n 7. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Succ\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Succ e)\\<cdot>\\<rho>'\n 8. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Pred\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Pred e)\\<cdot>\\<rho>'\n 9. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>IsZero\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (IsZero e)\\<cdot>\\<rho>'", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>v.\n     \\<eta>: ?\\<rho>\\<cdot>v \\<mapsto> ?\\<rho>'\\<cdot>v \\<Longrightarrow>\n  \\<eta>: \\<lbrakk>e1_\\<rbrakk>?\\<rho> \\<mapsto> evalK e1_\\<cdot>?\\<rho>'\n  \\<forall>v.\n     \\<eta>: ?\\<rho>\\<cdot>v \\<mapsto> ?\\<rho>'\\<cdot>v \\<Longrightarrow>\n  \\<eta>: \\<lbrakk>e2_\\<rbrakk>?\\<rho> \\<mapsto> evalK e2_\\<cdot>?\\<rho>'\n  \\<forall>v.\n     \\<eta>: ?\\<rho>\\<cdot>v \\<mapsto> ?\\<rho>'\\<cdot>v \\<Longrightarrow>\n  \\<eta>: \\<lbrakk>e3_\\<rbrakk>?\\<rho> \\<mapsto> evalK e3_\\<cdot>?\\<rho>'\n  \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\n\ngoal (1 subgoal):\n 1. \\<eta>: \\<lbrakk>Cond e1_ e2_\n                      e3_\\<rbrakk>\\<rho> \\<mapsto> evalK\n              (Cond e1_ e2_ e3_)\\<cdot>\n             \\<rho>'", "apply (simp add: cond_def condK_def eta_cfun)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                \\<forall>v.\n                   \\<eta>: \\<rho>\\<cdot>\n                           v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                \\<eta>: \\<lbrakk>e1_\\<rbrakk>\\<rho> \\<mapsto> evalK\n                         e1_\\<cdot>\n                        \\<rho>';\n     \\<And>\\<rho> \\<rho>'.\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>\n                   v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n        \\<eta>: \\<lbrakk>e2_\\<rbrakk>\\<rho> \\<mapsto> evalK e2_\\<cdot>\n                \\<rho>';\n     \\<And>\\<rho> \\<rho>'.\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>\n                   v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n        \\<eta>: \\<lbrakk>e3_\\<rbrakk>\\<rho> \\<mapsto> evalK e3_\\<cdot>\n                \\<rho>';\n     \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n    \\<Longrightarrow> \\<eta>: ValD_case\\<cdot>\\<bottom>\\<cdot>\n                              (\\<lbrakk>e2_\\<rbrakk>\\<rho>)\\<cdot>\n                              (\\<lbrakk>e3_\\<rbrakk>\\<rho>)\\<cdot>\n                              \\<bottom>\\<cdot>\n                              (\\<lbrakk>e1_\\<rbrakk>\\<rho>) \\<mapsto> bindK\\<cdot>\n                                (evalK e1_\\<cdot>\\<rho>')\\<cdot>\n                                (ValK_case\\<cdot>\\<bottom>\\<cdot>\n                                 (evalK e2_\\<cdot>\\<rho>')\\<cdot>\n                                 (evalK e3_\\<cdot>\\<rho>')\\<cdot>\n                                 \\<bottom>)", "using Cond(1)[OF Cond(4)]"], ["proof (prove)\nusing this:\n  \\<eta>: \\<lbrakk>e1_\\<rbrakk>\\<rho> \\<mapsto> evalK e1_\\<cdot>\\<rho>'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                \\<forall>v.\n                   \\<eta>: \\<rho>\\<cdot>\n                           v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                \\<eta>: \\<lbrakk>e1_\\<rbrakk>\\<rho> \\<mapsto> evalK\n                         e1_\\<cdot>\n                        \\<rho>';\n     \\<And>\\<rho> \\<rho>'.\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>\n                   v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n        \\<eta>: \\<lbrakk>e2_\\<rbrakk>\\<rho> \\<mapsto> evalK e2_\\<cdot>\n                \\<rho>';\n     \\<And>\\<rho> \\<rho>'.\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>\n                   v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n        \\<eta>: \\<lbrakk>e3_\\<rbrakk>\\<rho> \\<mapsto> evalK e3_\\<cdot>\n                \\<rho>';\n     \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n    \\<Longrightarrow> \\<eta>: ValD_case\\<cdot>\\<bottom>\\<cdot>\n                              (\\<lbrakk>e2_\\<rbrakk>\\<rho>)\\<cdot>\n                              (\\<lbrakk>e3_\\<rbrakk>\\<rho>)\\<cdot>\n                              \\<bottom>\\<cdot>\n                              (\\<lbrakk>e1_\\<rbrakk>\\<rho>) \\<mapsto> bindK\\<cdot>\n                                (evalK e1_\\<cdot>\\<rho>')\\<cdot>\n                                (ValK_case\\<cdot>\\<bottom>\\<cdot>\n                                 (evalK e2_\\<cdot>\\<rho>')\\<cdot>\n                                 (evalK e3_\\<cdot>\\<rho>')\\<cdot>\n                                 \\<bottom>)", "apply (rule eta_induct)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                \\<forall>v.\n                   \\<eta>: \\<rho>\\<cdot>\n                           v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                \\<eta>: \\<lbrakk>e1_\\<rbrakk>\\<rho> \\<mapsto> evalK\n                         e1_\\<cdot>\n                        \\<rho>';\n     \\<And>\\<rho> \\<rho>'.\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>\n                   v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n        \\<eta>: \\<lbrakk>e2_\\<rbrakk>\\<rho> \\<mapsto> evalK e2_\\<cdot>\n                \\<rho>';\n     \\<And>\\<rho> \\<rho>'.\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>\n                   v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n        \\<eta>: \\<lbrakk>e3_\\<rbrakk>\\<rho> \\<mapsto> evalK e3_\\<cdot>\n                \\<rho>';\n     \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v;\n     \\<lbrakk>e1_\\<rbrakk>\\<rho> = \\<bottom>;\n     evalK e1_\\<cdot>\\<rho>' = \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<eta>: ValD_case\\<cdot>\\<bottom>\\<cdot>\n                              (\\<lbrakk>e2_\\<rbrakk>\\<rho>)\\<cdot>\n                              (\\<lbrakk>e3_\\<rbrakk>\\<rho>)\\<cdot>\n                              \\<bottom>\\<cdot>\n                              (\\<lbrakk>e1_\\<rbrakk>\\<rho>) \\<mapsto> bindK\\<cdot>\n                                (evalK e1_\\<cdot>\\<rho>')\\<cdot>\n                                (ValK_case\\<cdot>\\<bottom>\\<cdot>\n                                 (evalK e2_\\<cdot>\\<rho>')\\<cdot>\n                                 (evalK e3_\\<cdot>\\<rho>')\\<cdot>\n                                 \\<bottom>)\n 2. \\<And>n.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e1_\\<rbrakk>\\<rho> \\<mapsto> evalK\n                            e1_\\<cdot>\n                           \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e2_\\<rbrakk>\\<rho> \\<mapsto> evalK e2_\\<cdot>\n                   \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e3_\\<rbrakk>\\<rho> \\<mapsto> evalK e3_\\<cdot>\n                   \\<rho>';\n        \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v;\n        \\<lbrakk>e1_\\<rbrakk>\\<rho> = ValTT;\n        evalK e1_\\<cdot>\\<rho>' = unitK\\<cdot>ValKTT\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: ValD_case\\<cdot>\\<bottom>\\<cdot>\n                                 (\\<lbrakk>e2_\\<rbrakk>\\<rho>)\\<cdot>\n                                 (\\<lbrakk>e3_\\<rbrakk>\\<rho>)\\<cdot>\n                                 \\<bottom>\\<cdot>\n                                 (\\<lbrakk>e1_\\<rbrakk>\\<rho>) \\<mapsto> bindK\\<cdot>\n                                   (evalK e1_\\<cdot>\\<rho>')\\<cdot>\n                                   (ValK_case\\<cdot>\\<bottom>\\<cdot>\n                                    (evalK e2_\\<cdot>\\<rho>')\\<cdot>\n                                    (evalK e3_\\<cdot>\\<rho>')\\<cdot>\n                                    \\<bottom>)\n 3. \\<And>n.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e1_\\<rbrakk>\\<rho> \\<mapsto> evalK\n                            e1_\\<cdot>\n                           \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e2_\\<rbrakk>\\<rho> \\<mapsto> evalK e2_\\<cdot>\n                   \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e3_\\<rbrakk>\\<rho> \\<mapsto> evalK e3_\\<cdot>\n                   \\<rho>';\n        \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v;\n        \\<lbrakk>e1_\\<rbrakk>\\<rho> = ValFF;\n        evalK e1_\\<cdot>\\<rho>' = unitK\\<cdot>ValKFF\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: ValD_case\\<cdot>\\<bottom>\\<cdot>\n                                 (\\<lbrakk>e2_\\<rbrakk>\\<rho>)\\<cdot>\n                                 (\\<lbrakk>e3_\\<rbrakk>\\<rho>)\\<cdot>\n                                 \\<bottom>\\<cdot>\n                                 (\\<lbrakk>e1_\\<rbrakk>\\<rho>) \\<mapsto> bindK\\<cdot>\n                                   (evalK e1_\\<cdot>\\<rho>')\\<cdot>\n                                   (ValK_case\\<cdot>\\<bottom>\\<cdot>\n                                    (evalK e2_\\<cdot>\\<rho>')\\<cdot>\n                                    (evalK e3_\\<cdot>\\<rho>')\\<cdot>\n                                    \\<bottom>)\n 4. \\<And>n.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e1_\\<rbrakk>\\<rho> \\<mapsto> evalK\n                            e1_\\<cdot>\n                           \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e2_\\<rbrakk>\\<rho> \\<mapsto> evalK e2_\\<cdot>\n                   \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e3_\\<rbrakk>\\<rho> \\<mapsto> evalK e3_\\<cdot>\n                   \\<rho>';\n        \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v;\n        \\<lbrakk>e1_\\<rbrakk>\\<rho> = ValN\\<cdot>n;\n        evalK e1_\\<cdot>\\<rho>' = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: ValD_case\\<cdot>\\<bottom>\\<cdot>\n                                 (\\<lbrakk>e2_\\<rbrakk>\\<rho>)\\<cdot>\n                                 (\\<lbrakk>e3_\\<rbrakk>\\<rho>)\\<cdot>\n                                 \\<bottom>\\<cdot>\n                                 (\\<lbrakk>e1_\\<rbrakk>\\<rho>) \\<mapsto> bindK\\<cdot>\n                                   (evalK e1_\\<cdot>\\<rho>')\\<cdot>\n                                   (ValK_case\\<cdot>\\<bottom>\\<cdot>\n                                    (evalK e2_\\<cdot>\\<rho>')\\<cdot>\n                                    (evalK e3_\\<cdot>\\<rho>')\\<cdot>\n                                    \\<bottom>)\n 5. \\<And>f f'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e1_\\<rbrakk>\\<rho> \\<mapsto> evalK\n                            e1_\\<cdot>\n                           \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e2_\\<rbrakk>\\<rho> \\<mapsto> evalK e2_\\<cdot>\n                   \\<rho>';\n        \\<And>\\<rho> \\<rho>'.\n           \\<forall>v.\n              \\<eta>: \\<rho>\\<cdot>\n                      v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n           \\<eta>: \\<lbrakk>e3_\\<rbrakk>\\<rho> \\<mapsto> evalK e3_\\<cdot>\n                   \\<rho>';\n        \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v;\n        \\<lbrakk>e1_\\<rbrakk>\\<rho> = ValF\\<cdot>f;\n        evalK e1_\\<cdot>\\<rho>' = unitK\\<cdot>(ValKF\\<cdot>f');\n        \\<theta>: f \\<mapsto> f'\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: ValD_case\\<cdot>\\<bottom>\\<cdot>\n                                 (\\<lbrakk>e2_\\<rbrakk>\\<rho>)\\<cdot>\n                                 (\\<lbrakk>e3_\\<rbrakk>\\<rho>)\\<cdot>\n                                 \\<bottom>\\<cdot>\n                                 (\\<lbrakk>e1_\\<rbrakk>\\<rho>) \\<mapsto> bindK\\<cdot>\n                                   (evalK e1_\\<cdot>\\<rho>')\\<cdot>\n                                   (ValK_case\\<cdot>\\<bottom>\\<cdot>\n                                    (evalK e2_\\<cdot>\\<rho>')\\<cdot>\n                                    (evalK e3_\\<cdot>\\<rho>')\\<cdot>\n                                    \\<bottom>)", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<eta>: \\<lbrakk>Cond e1_ e2_\n                    e3_\\<rbrakk>\\<rho> \\<mapsto> evalK\n            (Cond e1_ e2_ e3_)\\<cdot>\n           \\<rho>'\n\ngoal (8 subgoals):\n 1. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Var x\\<rbrakk>\\<rho> \\<mapsto> evalK (Var x)\\<cdot>\n                 \\<rho>'\n 2. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>\\<Omega>\\<rbrakk>\\<rho> \\<mapsto> evalK\n                     \\<Omega>\\<cdot>\n                    \\<rho>'\n 3. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>tt\\<rbrakk>\\<rho> \\<mapsto> evalK tt\\<cdot>\\<rho>'\n 4. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>ff\\<rbrakk>\\<rho> \\<mapsto> evalK ff\\<cdot>\\<rho>'\n 5. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Num x\\<rbrakk>\\<rho> \\<mapsto> evalK (Num x)\\<cdot>\n                 \\<rho>'\n 6. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Succ\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Succ e)\\<cdot>\\<rho>'\n 7. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Pred\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Pred e)\\<cdot>\\<rho>'\n 8. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>IsZero\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (IsZero e)\\<cdot>\\<rho>'", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Var x\\<rbrakk>\\<rho> \\<mapsto> evalK (Var x)\\<cdot>\n                 \\<rho>'\n 2. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>\\<Omega>\\<rbrakk>\\<rho> \\<mapsto> evalK\n                     \\<Omega>\\<cdot>\n                    \\<rho>'\n 3. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>tt\\<rbrakk>\\<rho> \\<mapsto> evalK tt\\<cdot>\\<rho>'\n 4. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>ff\\<rbrakk>\\<rho> \\<mapsto> evalK ff\\<cdot>\\<rho>'\n 5. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Num x\\<rbrakk>\\<rho> \\<mapsto> evalK (Num x)\\<cdot>\n                 \\<rho>'\n 6. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Succ\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Succ e)\\<cdot>\\<rho>'\n 7. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Pred\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Pred e)\\<cdot>\\<rho>'\n 8. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>IsZero\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (IsZero e)\\<cdot>\\<rho>'", "case Succ"], ["proof (state)\nthis:\n  \\<forall>v.\n     \\<eta>: ?\\<rho>\\<cdot>v \\<mapsto> ?\\<rho>'\\<cdot>v \\<Longrightarrow>\n  \\<eta>: \\<lbrakk>e_\\<rbrakk>?\\<rho> \\<mapsto> evalK e_\\<cdot>?\\<rho>'\n  \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\n\ngoal (8 subgoals):\n 1. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Var x\\<rbrakk>\\<rho> \\<mapsto> evalK (Var x)\\<cdot>\n                 \\<rho>'\n 2. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>\\<Omega>\\<rbrakk>\\<rho> \\<mapsto> evalK\n                     \\<Omega>\\<cdot>\n                    \\<rho>'\n 3. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>tt\\<rbrakk>\\<rho> \\<mapsto> evalK tt\\<cdot>\\<rho>'\n 4. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>ff\\<rbrakk>\\<rho> \\<mapsto> evalK ff\\<cdot>\\<rho>'\n 5. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Num x\\<rbrakk>\\<rho> \\<mapsto> evalK (Num x)\\<cdot>\n                 \\<rho>'\n 6. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Succ\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Succ e)\\<cdot>\\<rho>'\n 7. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Pred\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Pred e)\\<cdot>\\<rho>'\n 8. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>IsZero\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (IsZero e)\\<cdot>\\<rho>'", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>v.\n     \\<eta>: ?\\<rho>\\<cdot>v \\<mapsto> ?\\<rho>'\\<cdot>v \\<Longrightarrow>\n  \\<eta>: \\<lbrakk>e_\\<rbrakk>?\\<rho> \\<mapsto> evalK e_\\<cdot>?\\<rho>'\n  \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\n\ngoal (1 subgoal):\n 1. \\<eta>: \\<lbrakk>Succ\n                      e_\\<rbrakk>\\<rho> \\<mapsto> evalK (Succ e_)\\<cdot>\n            \\<rho>'", "apply (simp add: succ_def succK_def eta_cfun)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                \\<forall>v.\n                   \\<eta>: \\<rho>\\<cdot>\n                           v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                \\<eta>: \\<lbrakk>e_\\<rbrakk>\\<rho> \\<mapsto> evalK e_\\<cdot>\n                       \\<rho>';\n     \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n    \\<Longrightarrow> \\<eta>: (\\<Lambda> (ValN\\<cdot>n).\n                                  ValN\\<cdot>(Suc n))\\<cdot>\n                              (\\<lbrakk>e_\\<rbrakk>\\<rho>) \\<mapsto> bindK\\<cdot>\n                               (evalK e_\\<cdot>\\<rho>')\\<cdot>\n                               (\\<Lambda> (ValKN\\<cdot>n).\n                                   unitK\\<cdot>(ValKN\\<cdot>(Suc n)))", "using Succ(1)[OF Succ(2)]"], ["proof (prove)\nusing this:\n  \\<eta>: \\<lbrakk>e_\\<rbrakk>\\<rho> \\<mapsto> evalK e_\\<cdot>\\<rho>'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                \\<forall>v.\n                   \\<eta>: \\<rho>\\<cdot>\n                           v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                \\<eta>: \\<lbrakk>e_\\<rbrakk>\\<rho> \\<mapsto> evalK e_\\<cdot>\n                       \\<rho>';\n     \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n    \\<Longrightarrow> \\<eta>: (\\<Lambda> (ValN\\<cdot>n).\n                                  ValN\\<cdot>(Suc n))\\<cdot>\n                              (\\<lbrakk>e_\\<rbrakk>\\<rho>) \\<mapsto> bindK\\<cdot>\n                               (evalK e_\\<cdot>\\<rho>')\\<cdot>\n                               (\\<Lambda> (ValKN\\<cdot>n).\n                                   unitK\\<cdot>(ValKN\\<cdot>(Suc n)))", "apply (rule eta_induct)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                \\<forall>v.\n                   \\<eta>: \\<rho>\\<cdot>\n                           v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                \\<eta>: \\<lbrakk>e_\\<rbrakk>\\<rho> \\<mapsto> evalK e_\\<cdot>\n                       \\<rho>';\n     \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v;\n     \\<lbrakk>e_\\<rbrakk>\\<rho> = \\<bottom>;\n     evalK e_\\<cdot>\\<rho>' = \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<eta>: (\\<Lambda> (ValN\\<cdot>n).\n                                  ValN\\<cdot>(Suc n))\\<cdot>\n                              (\\<lbrakk>e_\\<rbrakk>\\<rho>) \\<mapsto> bindK\\<cdot>\n                               (evalK e_\\<cdot>\\<rho>')\\<cdot>\n                               (\\<Lambda> (ValKN\\<cdot>n).\n                                   unitK\\<cdot>(ValKN\\<cdot>(Suc n)))\n 2. \\<And>n.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e_\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e_\\<cdot>\n                          \\<rho>';\n        \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v;\n        \\<lbrakk>e_\\<rbrakk>\\<rho> = ValTT;\n        evalK e_\\<cdot>\\<rho>' = unitK\\<cdot>ValKTT\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: (\\<Lambda> (ValN\\<cdot>n).\n                                     ValN\\<cdot>(Suc n))\\<cdot>\n                                 (\\<lbrakk>e_\\<rbrakk>\\<rho>) \\<mapsto> bindK\\<cdot>\n                                  (evalK e_\\<cdot>\\<rho>')\\<cdot>\n                                  (\\<Lambda> (ValKN\\<cdot>n).\nunitK\\<cdot>(ValKN\\<cdot>(Suc n)))\n 3. \\<And>n.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e_\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e_\\<cdot>\n                          \\<rho>';\n        \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v;\n        \\<lbrakk>e_\\<rbrakk>\\<rho> = ValFF;\n        evalK e_\\<cdot>\\<rho>' = unitK\\<cdot>ValKFF\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: (\\<Lambda> (ValN\\<cdot>n).\n                                     ValN\\<cdot>(Suc n))\\<cdot>\n                                 (\\<lbrakk>e_\\<rbrakk>\\<rho>) \\<mapsto> bindK\\<cdot>\n                                  (evalK e_\\<cdot>\\<rho>')\\<cdot>\n                                  (\\<Lambda> (ValKN\\<cdot>n).\nunitK\\<cdot>(ValKN\\<cdot>(Suc n)))\n 4. \\<And>n.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e_\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e_\\<cdot>\n                          \\<rho>';\n        \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v;\n        \\<lbrakk>e_\\<rbrakk>\\<rho> = ValN\\<cdot>n;\n        evalK e_\\<cdot>\\<rho>' = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: (\\<Lambda> (ValN\\<cdot>n).\n                                     ValN\\<cdot>(Suc n))\\<cdot>\n                                 (\\<lbrakk>e_\\<rbrakk>\\<rho>) \\<mapsto> bindK\\<cdot>\n                                  (evalK e_\\<cdot>\\<rho>')\\<cdot>\n                                  (\\<Lambda> (ValKN\\<cdot>n).\nunitK\\<cdot>(ValKN\\<cdot>(Suc n)))\n 5. \\<And>f f'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e_\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e_\\<cdot>\n                          \\<rho>';\n        \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v;\n        \\<lbrakk>e_\\<rbrakk>\\<rho> = ValF\\<cdot>f;\n        evalK e_\\<cdot>\\<rho>' = unitK\\<cdot>(ValKF\\<cdot>f');\n        \\<theta>: f \\<mapsto> f'\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: (\\<Lambda> (ValN\\<cdot>n).\n                                     ValN\\<cdot>(Suc n))\\<cdot>\n                                 (\\<lbrakk>e_\\<rbrakk>\\<rho>) \\<mapsto> bindK\\<cdot>\n                                  (evalK e_\\<cdot>\\<rho>')\\<cdot>\n                                  (\\<Lambda> (ValKN\\<cdot>n).\nunitK\\<cdot>(ValKN\\<cdot>(Suc n)))", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<eta>: \\<lbrakk>Succ\n                    e_\\<rbrakk>\\<rho> \\<mapsto> evalK (Succ e_)\\<cdot>\n          \\<rho>'\n\ngoal (7 subgoals):\n 1. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Var x\\<rbrakk>\\<rho> \\<mapsto> evalK (Var x)\\<cdot>\n                 \\<rho>'\n 2. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>\\<Omega>\\<rbrakk>\\<rho> \\<mapsto> evalK\n                     \\<Omega>\\<cdot>\n                    \\<rho>'\n 3. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>tt\\<rbrakk>\\<rho> \\<mapsto> evalK tt\\<cdot>\\<rho>'\n 4. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>ff\\<rbrakk>\\<rho> \\<mapsto> evalK ff\\<cdot>\\<rho>'\n 5. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Num x\\<rbrakk>\\<rho> \\<mapsto> evalK (Num x)\\<cdot>\n                 \\<rho>'\n 6. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Pred\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Pred e)\\<cdot>\\<rho>'\n 7. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>IsZero\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (IsZero e)\\<cdot>\\<rho>'", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Var x\\<rbrakk>\\<rho> \\<mapsto> evalK (Var x)\\<cdot>\n                 \\<rho>'\n 2. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>\\<Omega>\\<rbrakk>\\<rho> \\<mapsto> evalK\n                     \\<Omega>\\<cdot>\n                    \\<rho>'\n 3. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>tt\\<rbrakk>\\<rho> \\<mapsto> evalK tt\\<cdot>\\<rho>'\n 4. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>ff\\<rbrakk>\\<rho> \\<mapsto> evalK ff\\<cdot>\\<rho>'\n 5. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Num x\\<rbrakk>\\<rho> \\<mapsto> evalK (Num x)\\<cdot>\n                 \\<rho>'\n 6. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Pred\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Pred e)\\<cdot>\\<rho>'\n 7. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>IsZero\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (IsZero e)\\<cdot>\\<rho>'", "case Pred"], ["proof (state)\nthis:\n  \\<forall>v.\n     \\<eta>: ?\\<rho>\\<cdot>v \\<mapsto> ?\\<rho>'\\<cdot>v \\<Longrightarrow>\n  \\<eta>: \\<lbrakk>e_\\<rbrakk>?\\<rho> \\<mapsto> evalK e_\\<cdot>?\\<rho>'\n  \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\n\ngoal (7 subgoals):\n 1. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Var x\\<rbrakk>\\<rho> \\<mapsto> evalK (Var x)\\<cdot>\n                 \\<rho>'\n 2. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>\\<Omega>\\<rbrakk>\\<rho> \\<mapsto> evalK\n                     \\<Omega>\\<cdot>\n                    \\<rho>'\n 3. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>tt\\<rbrakk>\\<rho> \\<mapsto> evalK tt\\<cdot>\\<rho>'\n 4. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>ff\\<rbrakk>\\<rho> \\<mapsto> evalK ff\\<cdot>\\<rho>'\n 5. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Num x\\<rbrakk>\\<rho> \\<mapsto> evalK (Num x)\\<cdot>\n                 \\<rho>'\n 6. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>Pred\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (Pred e)\\<cdot>\\<rho>'\n 7. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>IsZero\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (IsZero e)\\<cdot>\\<rho>'", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>v.\n     \\<eta>: ?\\<rho>\\<cdot>v \\<mapsto> ?\\<rho>'\\<cdot>v \\<Longrightarrow>\n  \\<eta>: \\<lbrakk>e_\\<rbrakk>?\\<rho> \\<mapsto> evalK e_\\<cdot>?\\<rho>'\n  \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\n\ngoal (1 subgoal):\n 1. \\<eta>: \\<lbrakk>Pred\n                      e_\\<rbrakk>\\<rho> \\<mapsto> evalK (Pred e_)\\<cdot>\n            \\<rho>'", "apply (simp add: pred_def predK_def eta_cfun)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                \\<forall>v.\n                   \\<eta>: \\<rho>\\<cdot>\n                           v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                \\<eta>: \\<lbrakk>e_\\<rbrakk>\\<rho> \\<mapsto> evalK e_\\<cdot>\n                       \\<rho>';\n     \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n    \\<Longrightarrow> \\<eta>: ValD_case\\<cdot>\\<bottom>\\<cdot>\n                              \\<bottom>\\<cdot>\n                              \\<bottom>\\<cdot>\n                              (Abs_cfun\n                                (case_nat \\<bottom> (Rep_cfun ValN)))\\<cdot>\n                              (\\<lbrakk>e_\\<rbrakk>\\<rho>) \\<mapsto> bindK\\<cdot>\n                               (evalK e_\\<cdot>\\<rho>')\\<cdot>\n                               (ValK_case\\<cdot>\\<bottom>\\<cdot>\n                                \\<bottom>\\<cdot>\n                                \\<bottom>\\<cdot>\n                                (Abs_cfun\n                                  (case_nat \\<bottom>\n                                    (\\<lambda>n.\n  unitK\\<cdot>(ValKN\\<cdot>n)))))", "using Pred(1)[OF Pred(2)]"], ["proof (prove)\nusing this:\n  \\<eta>: \\<lbrakk>e_\\<rbrakk>\\<rho> \\<mapsto> evalK e_\\<cdot>\\<rho>'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                \\<forall>v.\n                   \\<eta>: \\<rho>\\<cdot>\n                           v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                \\<eta>: \\<lbrakk>e_\\<rbrakk>\\<rho> \\<mapsto> evalK e_\\<cdot>\n                       \\<rho>';\n     \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n    \\<Longrightarrow> \\<eta>: ValD_case\\<cdot>\\<bottom>\\<cdot>\n                              \\<bottom>\\<cdot>\n                              \\<bottom>\\<cdot>\n                              (Abs_cfun\n                                (case_nat \\<bottom> (Rep_cfun ValN)))\\<cdot>\n                              (\\<lbrakk>e_\\<rbrakk>\\<rho>) \\<mapsto> bindK\\<cdot>\n                               (evalK e_\\<cdot>\\<rho>')\\<cdot>\n                               (ValK_case\\<cdot>\\<bottom>\\<cdot>\n                                \\<bottom>\\<cdot>\n                                \\<bottom>\\<cdot>\n                                (Abs_cfun\n                                  (case_nat \\<bottom>\n                                    (\\<lambda>n.\n  unitK\\<cdot>(ValKN\\<cdot>n)))))", "apply (rule eta_induct)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                \\<forall>v.\n                   \\<eta>: \\<rho>\\<cdot>\n                           v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                \\<eta>: \\<lbrakk>e_\\<rbrakk>\\<rho> \\<mapsto> evalK e_\\<cdot>\n                       \\<rho>';\n     \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v;\n     \\<lbrakk>e_\\<rbrakk>\\<rho> = \\<bottom>;\n     evalK e_\\<cdot>\\<rho>' = \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<eta>: (\\<Lambda> (ValN\\<cdot>a).\n                                  case a of 0 \\<Rightarrow> \\<bottom>\n                                  | Suc a \\<Rightarrow> ValN\\<cdot>a)\\<cdot>\n                              (\\<lbrakk>e_\\<rbrakk>\\<rho>) \\<mapsto> bindK\\<cdot>\n                               (evalK e_\\<cdot>\\<rho>')\\<cdot>\n                               (\\<Lambda> (ValKN\\<cdot>a).\n                                   case a of 0 \\<Rightarrow> \\<bottom>\n                                   | Suc n \\<Rightarrow>\n unitK\\<cdot>(ValKN\\<cdot>n))\n 2. \\<And>n.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e_\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e_\\<cdot>\n                          \\<rho>';\n        \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v;\n        \\<lbrakk>e_\\<rbrakk>\\<rho> = ValTT;\n        evalK e_\\<cdot>\\<rho>' = unitK\\<cdot>ValKTT\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: (\\<Lambda> (ValN\\<cdot>a).\n                                     case a of 0 \\<Rightarrow> \\<bottom>\n                                     | Suc a \\<Rightarrow>\n   ValN\\<cdot>a)\\<cdot>\n                                 (\\<lbrakk>e_\\<rbrakk>\\<rho>) \\<mapsto> bindK\\<cdot>\n                                  (evalK e_\\<cdot>\\<rho>')\\<cdot>\n                                  (\\<Lambda> (ValKN\\<cdot>a).\ncase a of 0 \\<Rightarrow> \\<bottom>\n| Suc n \\<Rightarrow> unitK\\<cdot>(ValKN\\<cdot>n))\n 3. \\<And>n.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e_\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e_\\<cdot>\n                          \\<rho>';\n        \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v;\n        \\<lbrakk>e_\\<rbrakk>\\<rho> = ValFF;\n        evalK e_\\<cdot>\\<rho>' = unitK\\<cdot>ValKFF\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: (\\<Lambda> (ValN\\<cdot>a).\n                                     case a of 0 \\<Rightarrow> \\<bottom>\n                                     | Suc a \\<Rightarrow>\n   ValN\\<cdot>a)\\<cdot>\n                                 (\\<lbrakk>e_\\<rbrakk>\\<rho>) \\<mapsto> bindK\\<cdot>\n                                  (evalK e_\\<cdot>\\<rho>')\\<cdot>\n                                  (\\<Lambda> (ValKN\\<cdot>a).\ncase a of 0 \\<Rightarrow> \\<bottom>\n| Suc n \\<Rightarrow> unitK\\<cdot>(ValKN\\<cdot>n))\n 4. \\<And>n.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e_\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e_\\<cdot>\n                          \\<rho>';\n        \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v;\n        \\<lbrakk>e_\\<rbrakk>\\<rho> = ValN\\<cdot>n;\n        evalK e_\\<cdot>\\<rho>' = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: (\\<Lambda> (ValN\\<cdot>a).\n                                     case a of 0 \\<Rightarrow> \\<bottom>\n                                     | Suc a \\<Rightarrow>\n   ValN\\<cdot>a)\\<cdot>\n                                 (\\<lbrakk>e_\\<rbrakk>\\<rho>) \\<mapsto> bindK\\<cdot>\n                                  (evalK e_\\<cdot>\\<rho>')\\<cdot>\n                                  (\\<Lambda> (ValKN\\<cdot>a).\ncase a of 0 \\<Rightarrow> \\<bottom>\n| Suc n \\<Rightarrow> unitK\\<cdot>(ValKN\\<cdot>n))\n 5. \\<And>f f'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e_\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e_\\<cdot>\n                          \\<rho>';\n        \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v;\n        \\<lbrakk>e_\\<rbrakk>\\<rho> = ValF\\<cdot>f;\n        evalK e_\\<cdot>\\<rho>' = unitK\\<cdot>(ValKF\\<cdot>f');\n        \\<theta>: f \\<mapsto> f'\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: (\\<Lambda> (ValN\\<cdot>a).\n                                     case a of 0 \\<Rightarrow> \\<bottom>\n                                     | Suc a \\<Rightarrow>\n   ValN\\<cdot>a)\\<cdot>\n                                 (\\<lbrakk>e_\\<rbrakk>\\<rho>) \\<mapsto> bindK\\<cdot>\n                                  (evalK e_\\<cdot>\\<rho>')\\<cdot>\n                                  (\\<Lambda> (ValKN\\<cdot>a).\ncase a of 0 \\<Rightarrow> \\<bottom>\n| Suc n \\<Rightarrow> unitK\\<cdot>(ValKN\\<cdot>n))", "apply (simp_all split: nat.split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<eta>: \\<lbrakk>Pred\n                    e_\\<rbrakk>\\<rho> \\<mapsto> evalK (Pred e_)\\<cdot>\n          \\<rho>'\n\ngoal (6 subgoals):\n 1. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Var x\\<rbrakk>\\<rho> \\<mapsto> evalK (Var x)\\<cdot>\n                 \\<rho>'\n 2. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>\\<Omega>\\<rbrakk>\\<rho> \\<mapsto> evalK\n                     \\<Omega>\\<cdot>\n                    \\<rho>'\n 3. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>tt\\<rbrakk>\\<rho> \\<mapsto> evalK tt\\<cdot>\\<rho>'\n 4. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>ff\\<rbrakk>\\<rho> \\<mapsto> evalK ff\\<cdot>\\<rho>'\n 5. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Num x\\<rbrakk>\\<rho> \\<mapsto> evalK (Num x)\\<cdot>\n                 \\<rho>'\n 6. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>IsZero\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (IsZero e)\\<cdot>\\<rho>'", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Var x\\<rbrakk>\\<rho> \\<mapsto> evalK (Var x)\\<cdot>\n                 \\<rho>'\n 2. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>\\<Omega>\\<rbrakk>\\<rho> \\<mapsto> evalK\n                     \\<Omega>\\<cdot>\n                    \\<rho>'\n 3. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>tt\\<rbrakk>\\<rho> \\<mapsto> evalK tt\\<cdot>\\<rho>'\n 4. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>ff\\<rbrakk>\\<rho> \\<mapsto> evalK ff\\<cdot>\\<rho>'\n 5. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Num x\\<rbrakk>\\<rho> \\<mapsto> evalK (Num x)\\<cdot>\n                 \\<rho>'\n 6. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>IsZero\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (IsZero e)\\<cdot>\\<rho>'", "case IsZero"], ["proof (state)\nthis:\n  \\<forall>v.\n     \\<eta>: ?\\<rho>\\<cdot>v \\<mapsto> ?\\<rho>'\\<cdot>v \\<Longrightarrow>\n  \\<eta>: \\<lbrakk>e_\\<rbrakk>?\\<rho> \\<mapsto> evalK e_\\<cdot>?\\<rho>'\n  \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\n\ngoal (6 subgoals):\n 1. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Var x\\<rbrakk>\\<rho> \\<mapsto> evalK (Var x)\\<cdot>\n                 \\<rho>'\n 2. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>\\<Omega>\\<rbrakk>\\<rho> \\<mapsto> evalK\n                     \\<Omega>\\<cdot>\n                    \\<rho>'\n 3. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>tt\\<rbrakk>\\<rho> \\<mapsto> evalK tt\\<cdot>\\<rho>'\n 4. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>ff\\<rbrakk>\\<rho> \\<mapsto> evalK ff\\<cdot>\\<rho>'\n 5. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Num x\\<rbrakk>\\<rho> \\<mapsto> evalK (Num x)\\<cdot>\n                 \\<rho>'\n 6. \\<And>e \\<rho> \\<rho>'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e\\<rbrakk>\\<rho> \\<mapsto> evalK\n                          e\\<cdot>\n                         \\<rho>';\n        \\<forall>v.\n           \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: \\<lbrakk>IsZero\n     e\\<rbrakk>\\<rho> \\<mapsto> evalK (IsZero e)\\<cdot>\\<rho>'", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>v.\n     \\<eta>: ?\\<rho>\\<cdot>v \\<mapsto> ?\\<rho>'\\<cdot>v \\<Longrightarrow>\n  \\<eta>: \\<lbrakk>e_\\<rbrakk>?\\<rho> \\<mapsto> evalK e_\\<cdot>?\\<rho>'\n  \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\n\ngoal (1 subgoal):\n 1. \\<eta>: \\<lbrakk>IsZero\n                      e_\\<rbrakk>\\<rho> \\<mapsto> evalK (IsZero e_)\\<cdot>\n            \\<rho>'", "apply (simp add: isZero_def isZeroK_def eta_cfun)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                \\<forall>v.\n                   \\<eta>: \\<rho>\\<cdot>\n                           v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                \\<eta>: \\<lbrakk>e_\\<rbrakk>\\<rho> \\<mapsto> evalK e_\\<cdot>\n                       \\<rho>';\n     \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n    \\<Longrightarrow> \\<eta>: (\\<Lambda> (ValN\\<cdot>n).\n                                  if n = 0 then ValTT else ValFF)\\<cdot>\n                              (\\<lbrakk>e_\\<rbrakk>\\<rho>) \\<mapsto> bindK\\<cdot>\n                               (evalK e_\\<cdot>\\<rho>')\\<cdot>\n                               (\\<Lambda> (ValKN\\<cdot>n).\n                                   unitK\\<cdot>\n                                   (if n = 0 then ValKTT else ValKFF))", "using IsZero(1)[OF IsZero(2)]"], ["proof (prove)\nusing this:\n  \\<eta>: \\<lbrakk>e_\\<rbrakk>\\<rho> \\<mapsto> evalK e_\\<cdot>\\<rho>'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                \\<forall>v.\n                   \\<eta>: \\<rho>\\<cdot>\n                           v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                \\<eta>: \\<lbrakk>e_\\<rbrakk>\\<rho> \\<mapsto> evalK e_\\<cdot>\n                       \\<rho>';\n     \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v\\<rbrakk>\n    \\<Longrightarrow> \\<eta>: (\\<Lambda> (ValN\\<cdot>n).\n                                  if n = 0 then ValTT else ValFF)\\<cdot>\n                              (\\<lbrakk>e_\\<rbrakk>\\<rho>) \\<mapsto> bindK\\<cdot>\n                               (evalK e_\\<cdot>\\<rho>')\\<cdot>\n                               (\\<Lambda> (ValKN\\<cdot>n).\n                                   unitK\\<cdot>\n                                   (if n = 0 then ValKTT else ValKFF))", "apply (rule eta_induct)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                \\<forall>v.\n                   \\<eta>: \\<rho>\\<cdot>\n                           v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                \\<eta>: \\<lbrakk>e_\\<rbrakk>\\<rho> \\<mapsto> evalK e_\\<cdot>\n                       \\<rho>';\n     \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v;\n     \\<lbrakk>e_\\<rbrakk>\\<rho> = \\<bottom>;\n     evalK e_\\<cdot>\\<rho>' = \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<eta>: (\\<Lambda> (ValN\\<cdot>n).\n                                  if n = 0 then ValTT else ValFF)\\<cdot>\n                              (\\<lbrakk>e_\\<rbrakk>\\<rho>) \\<mapsto> bindK\\<cdot>\n                               (evalK e_\\<cdot>\\<rho>')\\<cdot>\n                               (\\<Lambda> (ValKN\\<cdot>n).\n                                   unitK\\<cdot>\n                                   (if n = 0 then ValKTT else ValKFF))\n 2. \\<And>n.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e_\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e_\\<cdot>\n                          \\<rho>';\n        \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v;\n        \\<lbrakk>e_\\<rbrakk>\\<rho> = ValTT;\n        evalK e_\\<cdot>\\<rho>' = unitK\\<cdot>ValKTT\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: (\\<Lambda> (ValN\\<cdot>n).\n                                     if n = 0 then ValTT else ValFF)\\<cdot>\n                                 (\\<lbrakk>e_\\<rbrakk>\\<rho>) \\<mapsto> bindK\\<cdot>\n                                  (evalK e_\\<cdot>\\<rho>')\\<cdot>\n                                  (\\<Lambda> (ValKN\\<cdot>n).\nunitK\\<cdot>(if n = 0 then ValKTT else ValKFF))\n 3. \\<And>n.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e_\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e_\\<cdot>\n                          \\<rho>';\n        \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v;\n        \\<lbrakk>e_\\<rbrakk>\\<rho> = ValFF;\n        evalK e_\\<cdot>\\<rho>' = unitK\\<cdot>ValKFF\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: (\\<Lambda> (ValN\\<cdot>n).\n                                     if n = 0 then ValTT else ValFF)\\<cdot>\n                                 (\\<lbrakk>e_\\<rbrakk>\\<rho>) \\<mapsto> bindK\\<cdot>\n                                  (evalK e_\\<cdot>\\<rho>')\\<cdot>\n                                  (\\<Lambda> (ValKN\\<cdot>n).\nunitK\\<cdot>(if n = 0 then ValKTT else ValKFF))\n 4. \\<And>n.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e_\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e_\\<cdot>\n                          \\<rho>';\n        \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v;\n        \\<lbrakk>e_\\<rbrakk>\\<rho> = ValN\\<cdot>n;\n        evalK e_\\<cdot>\\<rho>' = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: (\\<Lambda> (ValN\\<cdot>n).\n                                     if n = 0 then ValTT else ValFF)\\<cdot>\n                                 (\\<lbrakk>e_\\<rbrakk>\\<rho>) \\<mapsto> bindK\\<cdot>\n                                  (evalK e_\\<cdot>\\<rho>')\\<cdot>\n                                  (\\<Lambda> (ValKN\\<cdot>n).\nunitK\\<cdot>(if n = 0 then ValKTT else ValKFF))\n 5. \\<And>f f'.\n       \\<lbrakk>\\<And>\\<rho> \\<rho>'.\n                   \\<forall>v.\n                      \\<eta>: \\<rho>\\<cdot>\n                              v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n                   \\<eta>: \\<lbrakk>e_\\<rbrakk>\\<rho> \\<mapsto> evalK\n                           e_\\<cdot>\n                          \\<rho>';\n        \\<forall>v. \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v;\n        \\<lbrakk>e_\\<rbrakk>\\<rho> = ValF\\<cdot>f;\n        evalK e_\\<cdot>\\<rho>' = unitK\\<cdot>(ValKF\\<cdot>f');\n        \\<theta>: f \\<mapsto> f'\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: (\\<Lambda> (ValN\\<cdot>n).\n                                     if n = 0 then ValTT else ValFF)\\<cdot>\n                                 (\\<lbrakk>e_\\<rbrakk>\\<rho>) \\<mapsto> bindK\\<cdot>\n                                  (evalK e_\\<cdot>\\<rho>')\\<cdot>\n                                  (\\<Lambda> (ValKN\\<cdot>n).\nunitK\\<cdot>(if n = 0 then ValKTT else ValKFF))", "apply (simp_all split: nat.split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<eta>: \\<lbrakk>IsZero\n                    e_\\<rbrakk>\\<rho> \\<mapsto> evalK (IsZero e_)\\<cdot>\n          \\<rho>'\n\ngoal (5 subgoals):\n 1. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Var x\\<rbrakk>\\<rho> \\<mapsto> evalK (Var x)\\<cdot>\n                 \\<rho>'\n 2. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>\\<Omega>\\<rbrakk>\\<rho> \\<mapsto> evalK\n                     \\<Omega>\\<cdot>\n                    \\<rho>'\n 3. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>tt\\<rbrakk>\\<rho> \\<mapsto> evalK tt\\<cdot>\\<rho>'\n 4. \\<And>\\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>ff\\<rbrakk>\\<rho> \\<mapsto> evalK ff\\<cdot>\\<rho>'\n 5. \\<And>x \\<rho> \\<rho>'.\n       \\<forall>v.\n          \\<eta>: \\<rho>\\<cdot>v \\<mapsto> \\<rho>'\\<cdot>v \\<Longrightarrow>\n       \\<eta>: \\<lbrakk>Num x\\<rbrakk>\\<rho> \\<mapsto> evalK (Num x)\\<cdot>\n                 \\<rho>'", "qed simp_all"], ["", "(*>*)"], ["", "end"], ["", "text\\<open>\n\nThe retraction between the two value and monadic value spaces.\n\nNote we need to work with an observation type that can represent the\n``explicit values'', i.e. @{typ \"'o ValK\"}.\n\n\\<close>"], ["", "locale value_retraction =\n  fixes VtoO :: \"'o ValK \\<rightarrow> 'o\"\n  fixes OtoV :: \"'o \\<rightarrow> 'o ValK\"\n  assumes OV: \"OtoV oo VtoO = ID\""], ["", "sublocale value_retraction < at_least_two_elements \"VtoO\\<cdot>(ValKN\\<cdot>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. at_least_two_elements (VtoO\\<cdot>(ValKN\\<cdot>0))", "using OV"], ["proof (prove)\nusing this:\n  OtoV oo VtoO = ID\n\ngoal (1 subgoal):\n 1. at_least_two_elements (VtoO\\<cdot>(ValKN\\<cdot>0))", "by - (standard, simp add: injection_defined cfcomp1 cfun_eq_iff)"], ["", "context value_retraction\nbegin"], ["", "fun\n  DtoKM_i :: \"nat \\<Rightarrow> ValD \\<rightarrow> 'o ValKM\"\nand\n  KMtoD_i :: \"nat \\<Rightarrow> 'o ValKM \\<rightarrow> ValD\"\nwhere\n  \"DtoKM_i 0 = \\<bottom>\"\n| \"DtoKM_i (Suc n) = (\\<Lambda> v. case v of\n     ValF\\<cdot>f \\<Rightarrow> unitK\\<cdot>(ValKF\\<cdot>(cfun_map\\<cdot>(KMtoD_i n)\\<cdot>(DtoKM_i n)\\<cdot>f))\n   | ValTT \\<Rightarrow> unitK\\<cdot>ValKTT\n   | ValFF \\<Rightarrow> unitK\\<cdot>ValKFF\n   | ValN\\<cdot>m \\<Rightarrow> unitK\\<cdot>(ValKN\\<cdot>m))\"\n\n| \"KMtoD_i 0 = \\<bottom>\"\n| \"KMtoD_i (Suc n) = (\\<Lambda> v. case OtoV\\<cdot>(v\\<cdot>VtoO) of\n     ValKF\\<cdot>f \\<Rightarrow> ValF\\<cdot>(cfun_map\\<cdot>(DtoKM_i n)\\<cdot>(KMtoD_i n)\\<cdot>f)\n   | ValKTT \\<Rightarrow> ValTT\n   | ValKFF \\<Rightarrow> ValFF\n   | ValKN\\<cdot>m \\<Rightarrow> ValN\\<cdot>m)\""], ["", "abbreviation \"DtoKM \\<equiv> (\\<Squnion>i. DtoKM_i i)\""], ["", "abbreviation \"KMtoD \\<equiv> (\\<Squnion>i. KMtoD_i i)\""], ["", "(*<*)"], ["", "lemma DtoKM_KMtoD_chain [intro, simp]:\n  \"chain DtoKM_i\"\n  \"chain KMtoD_i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain DtoKM_i &&& chain KMtoD_i", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. chain DtoKM_i\n 2. chain KMtoD_i", "let ?C = \"\\<lambda>i. (DtoKM_i i, KMtoD_i i)\""], ["proof (state)\ngoal (2 subgoals):\n 1. chain DtoKM_i\n 2. chain KMtoD_i", "have \"chain ?C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain (\\<lambda>i. (DtoKM_i i, KMtoD_i i))", "proof(rule chainI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (DtoKM_i i, KMtoD_i i) \\<sqsubseteq>\n       (DtoKM_i (Suc i), KMtoD_i (Suc i))", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (DtoKM_i i, KMtoD_i i) \\<sqsubseteq>\n       (DtoKM_i (Suc i), KMtoD_i (Suc i))", "show \"?C i \\<sqsubseteq> ?C (Suc i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (DtoKM_i i, KMtoD_i i) \\<sqsubseteq> (DtoKM_i (Suc i), KMtoD_i (Suc i))", "proof(induct i)"], ["proof (state)\ngoal (2 subgoals):\n 1. (DtoKM_i 0, KMtoD_i 0) \\<sqsubseteq> (DtoKM_i (Suc 0), KMtoD_i (Suc 0))\n 2. \\<And>i.\n       (DtoKM_i i, KMtoD_i i) \\<sqsubseteq>\n       (DtoKM_i (Suc i), KMtoD_i (Suc i)) \\<Longrightarrow>\n       (DtoKM_i (Suc i), KMtoD_i (Suc i)) \\<sqsubseteq>\n       (DtoKM_i (Suc (Suc i)), KMtoD_i (Suc (Suc i)))", "case (Suc i)"], ["proof (state)\nthis:\n  (DtoKM_i i, KMtoD_i i) \\<sqsubseteq> (DtoKM_i (Suc i), KMtoD_i (Suc i))\n\ngoal (2 subgoals):\n 1. (DtoKM_i 0, KMtoD_i 0) \\<sqsubseteq> (DtoKM_i (Suc 0), KMtoD_i (Suc 0))\n 2. \\<And>i.\n       (DtoKM_i i, KMtoD_i i) \\<sqsubseteq>\n       (DtoKM_i (Suc i), KMtoD_i (Suc i)) \\<Longrightarrow>\n       (DtoKM_i (Suc i), KMtoD_i (Suc i)) \\<sqsubseteq>\n       (DtoKM_i (Suc (Suc i)), KMtoD_i (Suc (Suc i)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (DtoKM_i (Suc i), KMtoD_i (Suc i)) \\<sqsubseteq>\n    (DtoKM_i (Suc (Suc i)), KMtoD_i (Suc (Suc i)))", "proof(rule monofun_pair)"], ["proof (state)\ngoal (2 subgoals):\n 1. DtoKM_i (Suc i) \\<sqsubseteq> DtoKM_i (Suc (Suc i))\n 2. KMtoD_i (Suc i) \\<sqsubseteq> KMtoD_i (Suc (Suc i))", "show \"DtoKM_i (Suc i) \\<sqsubseteq> DtoKM_i (Suc (Suc i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DtoKM_i (Suc i) \\<sqsubseteq> DtoKM_i (Suc (Suc i))", "proof(rule cfun_belowI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       DtoKM_i (Suc i)\\<cdot>x \\<sqsubseteq> DtoKM_i (Suc (Suc i))\\<cdot>x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       DtoKM_i (Suc i)\\<cdot>x \\<sqsubseteq> DtoKM_i (Suc (Suc i))\\<cdot>x", "from Suc"], ["proof (chain)\npicking this:\n  (DtoKM_i i, KMtoD_i i) \\<sqsubseteq> (DtoKM_i (Suc i), KMtoD_i (Suc i))", "show \"DtoKM_i (Suc i)\\<cdot>x \\<sqsubseteq> DtoKM_i (Suc (Suc i))\\<cdot>x\""], ["proof (prove)\nusing this:\n  (DtoKM_i i, KMtoD_i i) \\<sqsubseteq> (DtoKM_i (Suc i), KMtoD_i (Suc i))\n\ngoal (1 subgoal):\n 1. DtoKM_i (Suc i)\\<cdot>x \\<sqsubseteq> DtoKM_i (Suc (Suc i))\\<cdot>x", "by (cases x) (auto intro!: monofun_cfun simp: cfun_map_def cfun_below_iff)"], ["proof (state)\nthis:\n  DtoKM_i (Suc i)\\<cdot>x \\<sqsubseteq> DtoKM_i (Suc (Suc i))\\<cdot>x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  DtoKM_i (Suc i) \\<sqsubseteq> DtoKM_i (Suc (Suc i))\n\ngoal (1 subgoal):\n 1. KMtoD_i (Suc i) \\<sqsubseteq> KMtoD_i (Suc (Suc i))", "show \"KMtoD_i (Suc i) \\<sqsubseteq> KMtoD_i (Suc (Suc i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. KMtoD_i (Suc i) \\<sqsubseteq> KMtoD_i (Suc (Suc i))", "proof(rule cfun_belowI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       KMtoD_i (Suc i)\\<cdot>x \\<sqsubseteq> KMtoD_i (Suc (Suc i))\\<cdot>x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       KMtoD_i (Suc i)\\<cdot>x \\<sqsubseteq> KMtoD_i (Suc (Suc i))\\<cdot>x", "from Suc"], ["proof (chain)\npicking this:\n  (DtoKM_i i, KMtoD_i i) \\<sqsubseteq> (DtoKM_i (Suc i), KMtoD_i (Suc i))", "show \"KMtoD_i (Suc i)\\<cdot>x \\<sqsubseteq> KMtoD_i (Suc (Suc i))\\<cdot>x\""], ["proof (prove)\nusing this:\n  (DtoKM_i i, KMtoD_i i) \\<sqsubseteq> (DtoKM_i (Suc i), KMtoD_i (Suc i))\n\ngoal (1 subgoal):\n 1. KMtoD_i (Suc i)\\<cdot>x \\<sqsubseteq> KMtoD_i (Suc (Suc i))\\<cdot>x", "apply (simp add: eta_cfun)"], ["proof (prove)\ngoal (1 subgoal):\n 1. DtoKM_i i \\<sqsubseteq>\n    ValD_case\\<cdot>\n    (\\<Lambda> f.\n        unitK\\<cdot>\n        (ValKF\\<cdot>\n         (cfun_map\\<cdot>(KMtoD_i i)\\<cdot>(DtoKM_i i)\\<cdot>f)))\\<cdot>\n    (unitK\\<cdot>ValKTT)\\<cdot>\n    (unitK\\<cdot>ValKFF)\\<cdot>\n    (\\<Lambda> m. unitK\\<cdot>(ValKN\\<cdot>m)) \\<and>\n    KMtoD_i i \\<sqsubseteq>\n    (\\<Lambda> v.\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValF\\<cdot>\n            (cfun_map\\<cdot>(DtoKM_i i)\\<cdot>(KMtoD_i i)\\<cdot>f))\\<cdot>\n        ValTT\\<cdot>\n        ValFF\\<cdot>\n        ValN\\<cdot>\n        (OtoV\\<cdot>(v\\<cdot>VtoO))) \\<Longrightarrow>\n    ValK_case\\<cdot>\n    (\\<Lambda> f.\n        ValF\\<cdot>\n        (cfun_map\\<cdot>(DtoKM_i i)\\<cdot>(KMtoD_i i)\\<cdot>f))\\<cdot>\n    ValTT\\<cdot>\n    ValFF\\<cdot>\n    ValN\\<cdot>\n    (OtoV\\<cdot>(x\\<cdot>VtoO)) \\<sqsubseteq>\n    ValK_case\\<cdot>\n    (\\<Lambda> f.\n        ValF\\<cdot>\n        (cfun_map\\<cdot>\n         (ValD_case\\<cdot>\n          (\\<Lambda> f.\n              unitK\\<cdot>\n              (ValKF\\<cdot>\n               (cfun_map\\<cdot>(KMtoD_i i)\\<cdot>(DtoKM_i i)\\<cdot>\n                f)))\\<cdot>\n          (unitK\\<cdot>ValKTT)\\<cdot>\n          (unitK\\<cdot>ValKFF)\\<cdot>\n          (\\<Lambda> m. unitK\\<cdot>(ValKN\\<cdot>m)))\\<cdot>\n         (\\<Lambda> v.\n             ValK_case\\<cdot>\n             (\\<Lambda> f.\n                 ValF\\<cdot>\n                 (cfun_map\\<cdot>(DtoKM_i i)\\<cdot>(KMtoD_i i)\\<cdot>\n                  f))\\<cdot>\n             ValTT\\<cdot>\n             ValFF\\<cdot>\n             ValN\\<cdot>\n             (OtoV\\<cdot>(v\\<cdot>VtoO)))\\<cdot>\n         f))\\<cdot>\n    ValTT\\<cdot>\n    ValFF\\<cdot>\n    ValN\\<cdot>\n    (OtoV\\<cdot>(x\\<cdot>VtoO))", "apply (intro monofun_cfun_fun monofun_cfun_arg)"], ["proof (prove)\ngoal (1 subgoal):\n 1. DtoKM_i i \\<sqsubseteq>\n    ValD_case\\<cdot>\n    (\\<Lambda> f.\n        unitK\\<cdot>\n        (ValKF\\<cdot>\n         (cfun_map\\<cdot>(KMtoD_i i)\\<cdot>(DtoKM_i i)\\<cdot>f)))\\<cdot>\n    (unitK\\<cdot>ValKTT)\\<cdot>\n    (unitK\\<cdot>ValKFF)\\<cdot>\n    (\\<Lambda> m. unitK\\<cdot>(ValKN\\<cdot>m)) \\<and>\n    KMtoD_i i \\<sqsubseteq>\n    (\\<Lambda> v.\n        ValK_case\\<cdot>\n        (\\<Lambda> f.\n            ValF\\<cdot>\n            (cfun_map\\<cdot>(DtoKM_i i)\\<cdot>(KMtoD_i i)\\<cdot>f))\\<cdot>\n        ValTT\\<cdot>\n        ValFF\\<cdot>\n        ValN\\<cdot>\n        (OtoV\\<cdot>(v\\<cdot>VtoO))) \\<Longrightarrow>\n    (\\<Lambda> f.\n        ValF\\<cdot>\n        (cfun_map\\<cdot>(DtoKM_i i)\\<cdot>(KMtoD_i i)\\<cdot>\n         f)) \\<sqsubseteq>\n    (\\<Lambda> f.\n        ValF\\<cdot>\n        (cfun_map\\<cdot>\n         (ValD_case\\<cdot>\n          (\\<Lambda> f.\n              unitK\\<cdot>\n              (ValKF\\<cdot>\n               (cfun_map\\<cdot>(KMtoD_i i)\\<cdot>(DtoKM_i i)\\<cdot>\n                f)))\\<cdot>\n          (unitK\\<cdot>ValKTT)\\<cdot>\n          (unitK\\<cdot>ValKFF)\\<cdot>\n          (\\<Lambda> m. unitK\\<cdot>(ValKN\\<cdot>m)))\\<cdot>\n         (\\<Lambda> v.\n             ValK_case\\<cdot>\n             (\\<Lambda> f.\n                 ValF\\<cdot>\n                 (cfun_map\\<cdot>(DtoKM_i i)\\<cdot>(KMtoD_i i)\\<cdot>\n                  f))\\<cdot>\n             ValTT\\<cdot>\n             ValFF\\<cdot>\n             ValN\\<cdot>\n             (OtoV\\<cdot>(v\\<cdot>VtoO)))\\<cdot>\n         f))", "apply (intro cfun_belowI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       DtoKM_i i \\<sqsubseteq>\n       ValD_case\\<cdot>\n       (\\<Lambda> f.\n           unitK\\<cdot>\n           (ValKF\\<cdot>\n            (cfun_map\\<cdot>(KMtoD_i i)\\<cdot>(DtoKM_i i)\\<cdot>f)))\\<cdot>\n       (unitK\\<cdot>ValKTT)\\<cdot>\n       (unitK\\<cdot>ValKFF)\\<cdot>\n       (\\<Lambda> m. unitK\\<cdot>(ValKN\\<cdot>m)) \\<and>\n       KMtoD_i i \\<sqsubseteq>\n       (\\<Lambda> v.\n           ValK_case\\<cdot>\n           (\\<Lambda> f.\n               ValF\\<cdot>\n               (cfun_map\\<cdot>(DtoKM_i i)\\<cdot>(KMtoD_i i)\\<cdot>\n                f))\\<cdot>\n           ValTT\\<cdot>\n           ValFF\\<cdot>\n           ValN\\<cdot>\n           (OtoV\\<cdot>(v\\<cdot>VtoO))) \\<Longrightarrow>\n       (\\<Lambda> f.\n           ValF\\<cdot>\n           (cfun_map\\<cdot>(DtoKM_i i)\\<cdot>(KMtoD_i i)\\<cdot>f))\\<cdot>\n       x \\<sqsubseteq>\n       (\\<Lambda> f.\n           ValF\\<cdot>\n           (cfun_map\\<cdot>\n            (ValD_case\\<cdot>\n             (\\<Lambda> f.\n                 unitK\\<cdot>\n                 (ValKF\\<cdot>\n                  (cfun_map\\<cdot>(KMtoD_i i)\\<cdot>(DtoKM_i i)\\<cdot>\n                   f)))\\<cdot>\n             (unitK\\<cdot>ValKTT)\\<cdot>\n             (unitK\\<cdot>ValKFF)\\<cdot>\n             (\\<Lambda> m. unitK\\<cdot>(ValKN\\<cdot>m)))\\<cdot>\n            (\\<Lambda> v.\n                ValK_case\\<cdot>\n                (\\<Lambda> f.\n                    ValF\\<cdot>\n                    (cfun_map\\<cdot>(DtoKM_i i)\\<cdot>(KMtoD_i i)\\<cdot>\n                     f))\\<cdot>\n                ValTT\\<cdot>\n                ValFF\\<cdot>\n                ValN\\<cdot>\n                (OtoV\\<cdot>(v\\<cdot>VtoO)))\\<cdot>\n            f))\\<cdot>\n       x", "apply (auto intro: monofun_cfun)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  KMtoD_i (Suc i)\\<cdot>x \\<sqsubseteq> KMtoD_i (Suc (Suc i))\\<cdot>x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  KMtoD_i (Suc i) \\<sqsubseteq> KMtoD_i (Suc (Suc i))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (DtoKM_i (Suc i), KMtoD_i (Suc i)) \\<sqsubseteq>\n  (DtoKM_i (Suc (Suc i)), KMtoD_i (Suc (Suc i)))\n\ngoal (1 subgoal):\n 1. (DtoKM_i 0, KMtoD_i 0) \\<sqsubseteq> (DtoKM_i (Suc 0), KMtoD_i (Suc 0))", "qed simp"], ["proof (state)\nthis:\n  (DtoKM_i i, KMtoD_i i) \\<sqsubseteq> (DtoKM_i (Suc i), KMtoD_i (Suc i))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  chain (\\<lambda>i. (DtoKM_i i, KMtoD_i i))\n\ngoal (2 subgoals):\n 1. chain DtoKM_i\n 2. chain KMtoD_i", "then"], ["proof (chain)\npicking this:\n  chain (\\<lambda>i. (DtoKM_i i, KMtoD_i i))", "show \"chain DtoKM_i\" \"chain KMtoD_i\""], ["proof (prove)\nusing this:\n  chain (\\<lambda>i. (DtoKM_i i, KMtoD_i i))\n\ngoal (1 subgoal):\n 1. chain DtoKM_i &&& chain KMtoD_i", "by (auto dest: ch2ch_fst ch2ch_snd)"], ["proof (state)\nthis:\n  chain DtoKM_i\n  chain KMtoD_i\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "text\\<open>\n\nLemma 1 from \\citet{DBLP:conf/icalp/Reynolds74}.\n\n\\<close>"], ["", "lemma Lemma1:\n  \"\\<eta>: x \\<mapsto> DtoKM\\<cdot>x\"\n  \"\\<eta>: x \\<mapsto> x' \\<Longrightarrow> x = KMtoD\\<cdot>x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta>: x \\<mapsto> Lub DtoKM_i\\<cdot>x &&&\n    (\\<eta>: x \\<mapsto> x' \\<Longrightarrow> x = Lub KMtoD_i\\<cdot>x')", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta>: x \\<mapsto> Lub DtoKM_i\\<cdot>x &&&\n    (\\<eta>: x \\<mapsto> x' \\<Longrightarrow> x = Lub KMtoD_i\\<cdot>x')", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<eta>: x \\<mapsto> Lub DtoKM_i\\<cdot>x\n 2. \\<eta>: x \\<mapsto> x' \\<Longrightarrow> x = Lub KMtoD_i\\<cdot>x'", "have K: \"\\<eta>: ValD_copy_i i\\<cdot>x \\<mapsto> DtoKM_i i\\<cdot>x\"\n   and L: \"\\<eta>: x \\<mapsto> x' \\<Longrightarrow> ValD_copy_i i\\<cdot>x = KMtoD_i i\\<cdot>x'\" for x x' i"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta>: ValD_copy_i i\\<cdot>x \\<mapsto> DtoKM_i i\\<cdot>x &&&\n    (\\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n     ValD_copy_i i\\<cdot>x = KMtoD_i i\\<cdot>x')", "proof(induct i arbitrary: x x')"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x. \\<eta>: ValD_copy_i 0\\<cdot>x \\<mapsto> DtoKM_i 0\\<cdot>x\n 2. \\<And>x x'.\n       \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n       ValD_copy_i 0\\<cdot>x = KMtoD_i 0\\<cdot>x'\n 3. \\<And>i x.\n       \\<lbrakk>\\<And>x.\n                   \\<eta>: ValD_copy_i i\\<cdot>\n                           x \\<mapsto> DtoKM_i i\\<cdot>x;\n        \\<And>x x'.\n           \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n           ValD_copy_i i\\<cdot>x = KMtoD_i i\\<cdot>x'\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: ValD_copy_i (Suc i)\\<cdot>\n                                 x \\<mapsto> DtoKM_i (Suc i)\\<cdot>x\n 4. \\<And>i x x'.\n       \\<lbrakk>\\<And>x.\n                   \\<eta>: ValD_copy_i i\\<cdot>\n                           x \\<mapsto> DtoKM_i i\\<cdot>x;\n        \\<And>x x'.\n           \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n           ValD_copy_i i\\<cdot>x = KMtoD_i i\\<cdot>x';\n        \\<eta>: x \\<mapsto> x'\\<rbrakk>\n       \\<Longrightarrow> ValD_copy_i (Suc i)\\<cdot>x =\n                         KMtoD_i (Suc i)\\<cdot>x'", "case (Suc i)"], ["proof (state)\nthis:\n  \\<eta>: ValD_copy_i i\\<cdot>?x \\<mapsto> DtoKM_i i\\<cdot>?x\n  \\<eta>: ?x \\<mapsto> ?x' \\<Longrightarrow>\n  ValD_copy_i i\\<cdot>?x = KMtoD_i i\\<cdot>?x'\n\ngoal (4 subgoals):\n 1. \\<And>x. \\<eta>: ValD_copy_i 0\\<cdot>x \\<mapsto> DtoKM_i 0\\<cdot>x\n 2. \\<And>x x'.\n       \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n       ValD_copy_i 0\\<cdot>x = KMtoD_i 0\\<cdot>x'\n 3. \\<And>i x.\n       \\<lbrakk>\\<And>x.\n                   \\<eta>: ValD_copy_i i\\<cdot>\n                           x \\<mapsto> DtoKM_i i\\<cdot>x;\n        \\<And>x x'.\n           \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n           ValD_copy_i i\\<cdot>x = KMtoD_i i\\<cdot>x'\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: ValD_copy_i (Suc i)\\<cdot>\n                                 x \\<mapsto> DtoKM_i (Suc i)\\<cdot>x\n 4. \\<And>i x x'.\n       \\<lbrakk>\\<And>x.\n                   \\<eta>: ValD_copy_i i\\<cdot>\n                           x \\<mapsto> DtoKM_i i\\<cdot>x;\n        \\<And>x x'.\n           \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n           ValD_copy_i i\\<cdot>x = KMtoD_i i\\<cdot>x';\n        \\<eta>: x \\<mapsto> x'\\<rbrakk>\n       \\<Longrightarrow> ValD_copy_i (Suc i)\\<cdot>x =\n                         KMtoD_i (Suc i)\\<cdot>x'", "{"], ["proof (state)\nthis:\n  \\<eta>: ValD_copy_i i\\<cdot>?x \\<mapsto> DtoKM_i i\\<cdot>?x\n  \\<eta>: ?x \\<mapsto> ?x' \\<Longrightarrow>\n  ValD_copy_i i\\<cdot>?x = KMtoD_i i\\<cdot>?x'\n\ngoal (4 subgoals):\n 1. \\<And>x. \\<eta>: ValD_copy_i 0\\<cdot>x \\<mapsto> DtoKM_i 0\\<cdot>x\n 2. \\<And>x x'.\n       \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n       ValD_copy_i 0\\<cdot>x = KMtoD_i 0\\<cdot>x'\n 3. \\<And>i x.\n       \\<lbrakk>\\<And>x.\n                   \\<eta>: ValD_copy_i i\\<cdot>\n                           x \\<mapsto> DtoKM_i i\\<cdot>x;\n        \\<And>x x'.\n           \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n           ValD_copy_i i\\<cdot>x = KMtoD_i i\\<cdot>x'\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: ValD_copy_i (Suc i)\\<cdot>\n                                 x \\<mapsto> DtoKM_i (Suc i)\\<cdot>x\n 4. \\<And>i x x'.\n       \\<lbrakk>\\<And>x.\n                   \\<eta>: ValD_copy_i i\\<cdot>\n                           x \\<mapsto> DtoKM_i i\\<cdot>x;\n        \\<And>x x'.\n           \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n           ValD_copy_i i\\<cdot>x = KMtoD_i i\\<cdot>x';\n        \\<eta>: x \\<mapsto> x'\\<rbrakk>\n       \\<Longrightarrow> ValD_copy_i (Suc i)\\<cdot>x =\n                         KMtoD_i (Suc i)\\<cdot>x'", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>x. \\<eta>: ValD_copy_i 0\\<cdot>x \\<mapsto> DtoKM_i 0\\<cdot>x\n 2. \\<And>x x'.\n       \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n       ValD_copy_i 0\\<cdot>x = KMtoD_i 0\\<cdot>x'\n 3. \\<And>i x.\n       \\<lbrakk>\\<And>x.\n                   \\<eta>: ValD_copy_i i\\<cdot>\n                           x \\<mapsto> DtoKM_i i\\<cdot>x;\n        \\<And>x x'.\n           \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n           ValD_copy_i i\\<cdot>x = KMtoD_i i\\<cdot>x'\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: ValD_copy_i (Suc i)\\<cdot>\n                                 x \\<mapsto> DtoKM_i (Suc i)\\<cdot>x\n 4. \\<And>i x x'.\n       \\<lbrakk>\\<And>x.\n                   \\<eta>: ValD_copy_i i\\<cdot>\n                           x \\<mapsto> DtoKM_i i\\<cdot>x;\n        \\<And>x x'.\n           \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n           ValD_copy_i i\\<cdot>x = KMtoD_i i\\<cdot>x';\n        \\<eta>: x \\<mapsto> x'\\<rbrakk>\n       \\<Longrightarrow> ValD_copy_i (Suc i)\\<cdot>x =\n                         KMtoD_i (Suc i)\\<cdot>x'", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta>: ValD_copy_i (Suc i)\\<cdot>x \\<mapsto> DtoKM_i (Suc i)\\<cdot>x", "apply (cases x)"], ["proof (prove)\ngoal (5 subgoals):\n 1. x = \\<bottom> \\<Longrightarrow>\n    \\<eta>: ValD_copy_i (Suc i)\\<cdot>x \\<mapsto> DtoKM_i (Suc i)\\<cdot>x\n 2. \\<And>cfun.\n       x = ValF\\<cdot>cfun \\<Longrightarrow>\n       \\<eta>: ValD_copy_i (Suc i)\\<cdot>x \\<mapsto> DtoKM_i (Suc i)\\<cdot>x\n 3. x = ValTT \\<Longrightarrow>\n    \\<eta>: ValD_copy_i (Suc i)\\<cdot>x \\<mapsto> DtoKM_i (Suc i)\\<cdot>x\n 4. x = ValFF \\<Longrightarrow>\n    \\<eta>: ValD_copy_i (Suc i)\\<cdot>x \\<mapsto> DtoKM_i (Suc i)\\<cdot>x\n 5. \\<And>nat.\n       x = ValN\\<cdot>nat \\<Longrightarrow>\n       \\<eta>: ValD_copy_i (Suc i)\\<cdot>x \\<mapsto> DtoKM_i (Suc i)\\<cdot>x", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cfun.\n       x = ValF\\<cdot>cfun \\<Longrightarrow>\n       \\<eta>: ValF\\<cdot>\n               (ValD_copy_i i oo\n                cfun oo\n                ValD_copy_i\n                 i) \\<mapsto> unitK\\<cdot>\n                              (ValKF\\<cdot>\n                               (cfun_map\\<cdot>(KMtoD_i i)\\<cdot>\n                                (DtoKM_i i)\\<cdot>\n                                cfun))", "apply (rule eta_F)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cfun.\n       x = ValF\\<cdot>cfun \\<Longrightarrow>\n       \\<theta>: ValD_copy_i i oo\n                 cfun oo\n                 ValD_copy_i\n                  i \\<mapsto> cfun_map\\<cdot>(KMtoD_i i)\\<cdot>\n                              (DtoKM_i i)\\<cdot>\n                              cfun", "apply (rule theta_F)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cfun x x'.\n       \\<lbrakk>x = ValF\\<cdot>cfun; \\<eta>: x \\<mapsto> x'\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: (ValD_copy_i i oo\n                                  cfun oo ValD_copy_i i)\\<cdot>\n                                 x \\<mapsto> cfun_map\\<cdot>\n       (KMtoD_i i)\\<cdot>\n       (DtoKM_i i)\\<cdot>\n       cfun\\<cdot>\n       x'", "using Suc"], ["proof (prove)\nusing this:\n  \\<eta>: ValD_copy_i i\\<cdot>?x \\<mapsto> DtoKM_i i\\<cdot>?x\n  \\<eta>: ?x \\<mapsto> ?x' \\<Longrightarrow>\n  ValD_copy_i i\\<cdot>?x = KMtoD_i i\\<cdot>?x'\n\ngoal (1 subgoal):\n 1. \\<And>cfun x x'.\n       \\<lbrakk>x = ValF\\<cdot>cfun; \\<eta>: x \\<mapsto> x'\\<rbrakk>\n       \\<Longrightarrow> \\<eta>: (ValD_copy_i i oo\n                                  cfun oo ValD_copy_i i)\\<cdot>\n                                 x \\<mapsto> cfun_map\\<cdot>\n       (KMtoD_i i)\\<cdot>\n       (DtoKM_i i)\\<cdot>\n       cfun\\<cdot>\n       x'", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<eta>: ValD_copy_i (Suc i)\\<cdot>x \\<mapsto> DtoKM_i (Suc i)\\<cdot>x\n\ngoal (3 subgoals):\n 1. \\<And>x. \\<eta>: ValD_copy_i 0\\<cdot>x \\<mapsto> DtoKM_i 0\\<cdot>x\n 2. \\<And>x x'.\n       \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n       ValD_copy_i 0\\<cdot>x = KMtoD_i 0\\<cdot>x'\n 3. \\<And>i x x'.\n       \\<lbrakk>\\<And>x.\n                   \\<eta>: ValD_copy_i i\\<cdot>\n                           x \\<mapsto> DtoKM_i i\\<cdot>x;\n        \\<And>x x'.\n           \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n           ValD_copy_i i\\<cdot>x = KMtoD_i i\\<cdot>x';\n        \\<eta>: x \\<mapsto> x'\\<rbrakk>\n       \\<Longrightarrow> ValD_copy_i (Suc i)\\<cdot>x =\n                         KMtoD_i (Suc i)\\<cdot>x'", "}"], ["proof (state)\nthis:\n  \\<eta>: ValD_copy_i (Suc i)\\<cdot>\n          ?xb2 \\<mapsto> DtoKM_i (Suc i)\\<cdot>?xb2\n\ngoal (3 subgoals):\n 1. \\<And>x. \\<eta>: ValD_copy_i 0\\<cdot>x \\<mapsto> DtoKM_i 0\\<cdot>x\n 2. \\<And>x x'.\n       \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n       ValD_copy_i 0\\<cdot>x = KMtoD_i 0\\<cdot>x'\n 3. \\<And>i x x'.\n       \\<lbrakk>\\<And>x.\n                   \\<eta>: ValD_copy_i i\\<cdot>\n                           x \\<mapsto> DtoKM_i i\\<cdot>x;\n        \\<And>x x'.\n           \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n           ValD_copy_i i\\<cdot>x = KMtoD_i i\\<cdot>x';\n        \\<eta>: x \\<mapsto> x'\\<rbrakk>\n       \\<Longrightarrow> ValD_copy_i (Suc i)\\<cdot>x =\n                         KMtoD_i (Suc i)\\<cdot>x'", "{"], ["proof (state)\nthis:\n  \\<eta>: ValD_copy_i (Suc i)\\<cdot>\n          ?xb2 \\<mapsto> DtoKM_i (Suc i)\\<cdot>?xb2\n\ngoal (3 subgoals):\n 1. \\<And>x. \\<eta>: ValD_copy_i 0\\<cdot>x \\<mapsto> DtoKM_i 0\\<cdot>x\n 2. \\<And>x x'.\n       \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n       ValD_copy_i 0\\<cdot>x = KMtoD_i 0\\<cdot>x'\n 3. \\<And>i x x'.\n       \\<lbrakk>\\<And>x.\n                   \\<eta>: ValD_copy_i i\\<cdot>\n                           x \\<mapsto> DtoKM_i i\\<cdot>x;\n        \\<And>x x'.\n           \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n           ValD_copy_i i\\<cdot>x = KMtoD_i i\\<cdot>x';\n        \\<eta>: x \\<mapsto> x'\\<rbrakk>\n       \\<Longrightarrow> ValD_copy_i (Suc i)\\<cdot>x =\n                         KMtoD_i (Suc i)\\<cdot>x'", "case 2"], ["proof (state)\nthis:\n  \\<eta>: x \\<mapsto> x'\n\ngoal (3 subgoals):\n 1. \\<And>x. \\<eta>: ValD_copy_i 0\\<cdot>x \\<mapsto> DtoKM_i 0\\<cdot>x\n 2. \\<And>x x'.\n       \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n       ValD_copy_i 0\\<cdot>x = KMtoD_i 0\\<cdot>x'\n 3. \\<And>i x x'.\n       \\<lbrakk>\\<And>x.\n                   \\<eta>: ValD_copy_i i\\<cdot>\n                           x \\<mapsto> DtoKM_i i\\<cdot>x;\n        \\<And>x x'.\n           \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n           ValD_copy_i i\\<cdot>x = KMtoD_i i\\<cdot>x';\n        \\<eta>: x \\<mapsto> x'\\<rbrakk>\n       \\<Longrightarrow> ValD_copy_i (Suc i)\\<cdot>x =\n                         KMtoD_i (Suc i)\\<cdot>x'", "thus ?case"], ["proof (prove)\nusing this:\n  \\<eta>: x \\<mapsto> x'\n\ngoal (1 subgoal):\n 1. ValD_copy_i (Suc i)\\<cdot>x = KMtoD_i (Suc i)\\<cdot>x'", "apply (induct rule: eta_induct)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>x = \\<bottom>; x' = \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> ValD_copy_i (Suc i)\\<cdot>x = KMtoD_i (Suc i)\\<cdot>x'\n 2. \\<And>n.\n       \\<lbrakk>x = ValTT; x' = unitK\\<cdot>ValKTT\\<rbrakk>\n       \\<Longrightarrow> ValD_copy_i (Suc i)\\<cdot>x =\n                         KMtoD_i (Suc i)\\<cdot>x'\n 3. \\<And>n.\n       \\<lbrakk>x = ValFF; x' = unitK\\<cdot>ValKFF\\<rbrakk>\n       \\<Longrightarrow> ValD_copy_i (Suc i)\\<cdot>x =\n                         KMtoD_i (Suc i)\\<cdot>x'\n 4. \\<And>n.\n       \\<lbrakk>x = ValN\\<cdot>n; x' = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n       \\<Longrightarrow> ValD_copy_i (Suc i)\\<cdot>x =\n                         KMtoD_i (Suc i)\\<cdot>x'\n 5. \\<And>f f'.\n       \\<lbrakk>x = ValF\\<cdot>f; x' = unitK\\<cdot>(ValKF\\<cdot>f');\n        \\<theta>: f \\<mapsto> f'\\<rbrakk>\n       \\<Longrightarrow> ValD_copy_i (Suc i)\\<cdot>x =\n                         KMtoD_i (Suc i)\\<cdot>x'", "using OV"], ["proof (prove)\nusing this:\n  OtoV oo VtoO = ID\n\ngoal (5 subgoals):\n 1. \\<lbrakk>x = \\<bottom>; x' = \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> ValD_copy_i (Suc i)\\<cdot>x = KMtoD_i (Suc i)\\<cdot>x'\n 2. \\<And>n.\n       \\<lbrakk>x = ValTT; x' = unitK\\<cdot>ValKTT\\<rbrakk>\n       \\<Longrightarrow> ValD_copy_i (Suc i)\\<cdot>x =\n                         KMtoD_i (Suc i)\\<cdot>x'\n 3. \\<And>n.\n       \\<lbrakk>x = ValFF; x' = unitK\\<cdot>ValKFF\\<rbrakk>\n       \\<Longrightarrow> ValD_copy_i (Suc i)\\<cdot>x =\n                         KMtoD_i (Suc i)\\<cdot>x'\n 4. \\<And>n.\n       \\<lbrakk>x = ValN\\<cdot>n; x' = unitK\\<cdot>(ValKN\\<cdot>n)\\<rbrakk>\n       \\<Longrightarrow> ValD_copy_i (Suc i)\\<cdot>x =\n                         KMtoD_i (Suc i)\\<cdot>x'\n 5. \\<And>f f'.\n       \\<lbrakk>x = ValF\\<cdot>f; x' = unitK\\<cdot>(ValKF\\<cdot>f');\n        \\<theta>: f \\<mapsto> f'\\<rbrakk>\n       \\<Longrightarrow> ValD_copy_i (Suc i)\\<cdot>x =\n                         KMtoD_i (Suc i)\\<cdot>x'", "apply (simp_all add: cfun_eq_iff retraction_strict)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       \\<lbrakk>x = ValF\\<cdot>f;\n        \\<forall>x. x'\\<cdot>x = x\\<cdot>(ValKF\\<cdot>f');\n        \\<theta>: f \\<mapsto> f';\n        \\<forall>x. OtoV\\<cdot>(VtoO\\<cdot>x) = x\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            ValD_copy_i i\\<cdot>\n                            (f\\<cdot>(ValD_copy_i i\\<cdot>x)) =\n                            KMtoD_i i\\<cdot>(f'\\<cdot>(DtoKM_i i\\<cdot>x))", "apply (clarsimp simp: cfun_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f f' x.\n       \\<lbrakk>x = ValF\\<cdot>f;\n        \\<forall>x. x'\\<cdot>x = x\\<cdot>(ValKF\\<cdot>f');\n        \\<theta>: f \\<mapsto> f';\n        \\<forall>x. OtoV\\<cdot>(VtoO\\<cdot>x) = x\\<rbrakk>\n       \\<Longrightarrow> ValD_copy_i i\\<cdot>\n                         (f\\<cdot>(ValD_copy_i i\\<cdot>x)) =\n                         KMtoD_i i\\<cdot>(f'\\<cdot>(DtoKM_i i\\<cdot>x))", "apply (erule theta_induct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f f' x.\n       \\<lbrakk>x = ValF\\<cdot>f;\n        \\<forall>x. x'\\<cdot>x = x\\<cdot>(ValKF\\<cdot>f');\n        \\<forall>x. OtoV\\<cdot>(VtoO\\<cdot>x) = x;\n        \\<And>x x'.\n           \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n           \\<eta>: f\\<cdot>x \\<mapsto> f'\\<cdot>x'\\<rbrakk>\n       \\<Longrightarrow> ValD_copy_i i\\<cdot>\n                         (f\\<cdot>(ValD_copy_i i\\<cdot>x)) =\n                         KMtoD_i i\\<cdot>(f'\\<cdot>(DtoKM_i i\\<cdot>x))", "using Suc"], ["proof (prove)\nusing this:\n  \\<eta>: ValD_copy_i i\\<cdot>?x \\<mapsto> DtoKM_i i\\<cdot>?x\n  \\<eta>: ?x \\<mapsto> ?x' \\<Longrightarrow>\n  ValD_copy_i i\\<cdot>?x = KMtoD_i i\\<cdot>?x'\n\ngoal (1 subgoal):\n 1. \\<And>f f' x.\n       \\<lbrakk>x = ValF\\<cdot>f;\n        \\<forall>x. x'\\<cdot>x = x\\<cdot>(ValKF\\<cdot>f');\n        \\<forall>x. OtoV\\<cdot>(VtoO\\<cdot>x) = x;\n        \\<And>x x'.\n           \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n           \\<eta>: f\\<cdot>x \\<mapsto> f'\\<cdot>x'\\<rbrakk>\n       \\<Longrightarrow> ValD_copy_i i\\<cdot>\n                         (f\\<cdot>(ValD_copy_i i\\<cdot>x)) =\n                         KMtoD_i i\\<cdot>(f'\\<cdot>(DtoKM_i i\\<cdot>x))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ValD_copy_i (Suc i)\\<cdot>x = KMtoD_i (Suc i)\\<cdot>x'\n\ngoal (2 subgoals):\n 1. \\<And>x. \\<eta>: ValD_copy_i 0\\<cdot>x \\<mapsto> DtoKM_i 0\\<cdot>x\n 2. \\<And>x x'.\n       \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n       ValD_copy_i 0\\<cdot>x = KMtoD_i 0\\<cdot>x'", "}"], ["proof (state)\nthis:\n  \\<eta>: ?xb2 \\<mapsto> ?x'b2 \\<Longrightarrow>\n  ValD_copy_i (Suc i)\\<cdot>?xb2 = KMtoD_i (Suc i)\\<cdot>?x'b2\n\ngoal (2 subgoals):\n 1. \\<And>x. \\<eta>: ValD_copy_i 0\\<cdot>x \\<mapsto> DtoKM_i 0\\<cdot>x\n 2. \\<And>x x'.\n       \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n       ValD_copy_i 0\\<cdot>x = KMtoD_i 0\\<cdot>x'", "qed simp_all"], ["proof (state)\nthis:\n  \\<eta>: ValD_copy_i ?i\\<cdot>?x \\<mapsto> DtoKM_i ?i\\<cdot>?x\n  \\<eta>: ?x \\<mapsto> ?x' \\<Longrightarrow>\n  ValD_copy_i ?i\\<cdot>?x = KMtoD_i ?i\\<cdot>?x'\n\ngoal (2 subgoals):\n 1. \\<eta>: x \\<mapsto> Lub DtoKM_i\\<cdot>x\n 2. \\<eta>: x \\<mapsto> x' \\<Longrightarrow> x = Lub KMtoD_i\\<cdot>x'", "let ?C1 = \"\\<lambda>i. (ValD_copy_i i, DtoKM_i i)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<eta>: x \\<mapsto> Lub DtoKM_i\\<cdot>x\n 2. \\<eta>: x \\<mapsto> x' \\<Longrightarrow> x = Lub KMtoD_i\\<cdot>x'", "let ?P1 = \"\\<lambda>f. \\<eta>: (fst f)\\<cdot>x \\<mapsto> (snd f)\\<cdot>x\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<eta>: x \\<mapsto> Lub DtoKM_i\\<cdot>x\n 2. \\<eta>: x \\<mapsto> x' \\<Longrightarrow> x = Lub KMtoD_i\\<cdot>x'", "have \"adm ?P1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adm (\\<lambda>f. \\<eta>: fst f\\<cdot>x \\<mapsto> snd f\\<cdot>x)", "by (rule adm_subst) simp_all"], ["proof (state)\nthis:\n  adm (\\<lambda>f. \\<eta>: fst f\\<cdot>x \\<mapsto> snd f\\<cdot>x)\n\ngoal (2 subgoals):\n 1. \\<eta>: x \\<mapsto> Lub DtoKM_i\\<cdot>x\n 2. \\<eta>: x \\<mapsto> x' \\<Longrightarrow> x = Lub KMtoD_i\\<cdot>x'", "with K"], ["proof (chain)\npicking this:\n  \\<eta>: ValD_copy_i ?i\\<cdot>?x \\<mapsto> DtoKM_i ?i\\<cdot>?x\n  adm (\\<lambda>f. \\<eta>: fst f\\<cdot>x \\<mapsto> snd f\\<cdot>x)", "have \"?P1 (\\<Squnion>i. ValD_copy_i i, \\<Squnion>i. DtoKM_i i)\""], ["proof (prove)\nusing this:\n  \\<eta>: ValD_copy_i ?i\\<cdot>?x \\<mapsto> DtoKM_i ?i\\<cdot>?x\n  adm (\\<lambda>f. \\<eta>: fst f\\<cdot>x \\<mapsto> snd f\\<cdot>x)\n\ngoal (1 subgoal):\n 1. \\<eta>: fst (ValD_copy_lub, Lub DtoKM_i)\\<cdot>\n            x \\<mapsto> snd (ValD_copy_lub, Lub DtoKM_i)\\<cdot>x", "using admD[where P=\"?P1\" and Y=\"?C1\"] lub_prod[where S=\"?C1\"]"], ["proof (prove)\nusing this:\n  \\<eta>: ValD_copy_i ?i\\<cdot>?x \\<mapsto> DtoKM_i ?i\\<cdot>?x\n  adm (\\<lambda>f. \\<eta>: fst f\\<cdot>x \\<mapsto> snd f\\<cdot>x)\n  \\<lbrakk>adm (\\<lambda>f. \\<eta>: fst f\\<cdot>x \\<mapsto> snd f\\<cdot>x);\n   chain (\\<lambda>i. (ValD_copy_i i, DtoKM_i i));\n   \\<And>i.\n      \\<eta>: fst (ValD_copy_i i, DtoKM_i i)\\<cdot>\n              x \\<mapsto> snd (ValD_copy_i i, DtoKM_i i)\\<cdot>x\\<rbrakk>\n  \\<Longrightarrow> \\<eta>: fst (\\<Squnion>i.\n                                    (ValD_copy_i i, DtoKM_i i))\\<cdot>\n                            x \\<mapsto> snd\n   (\\<Squnion>i. (ValD_copy_i i, DtoKM_i i))\\<cdot>\n  x\n  chain (\\<lambda>i. (ValD_copy_i i, DtoKM_i i)) \\<Longrightarrow>\n  (\\<Squnion>i. (ValD_copy_i i, DtoKM_i i)) =\n  (\\<Squnion>i. fst (ValD_copy_i i, DtoKM_i i),\n   \\<Squnion>i. snd (ValD_copy_i i, DtoKM_i i))\n\ngoal (1 subgoal):\n 1. \\<eta>: fst (ValD_copy_lub, Lub DtoKM_i)\\<cdot>\n            x \\<mapsto> snd (ValD_copy_lub, Lub DtoKM_i)\\<cdot>x", "by simp"], ["proof (state)\nthis:\n  \\<eta>: fst (ValD_copy_lub, Lub DtoKM_i)\\<cdot>\n          x \\<mapsto> snd (ValD_copy_lub, Lub DtoKM_i)\\<cdot>x\n\ngoal (2 subgoals):\n 1. \\<eta>: x \\<mapsto> Lub DtoKM_i\\<cdot>x\n 2. \\<eta>: x \\<mapsto> x' \\<Longrightarrow> x = Lub KMtoD_i\\<cdot>x'", "moreover"], ["proof (state)\nthis:\n  \\<eta>: fst (ValD_copy_lub, Lub DtoKM_i)\\<cdot>\n          x \\<mapsto> snd (ValD_copy_lub, Lub DtoKM_i)\\<cdot>x\n\ngoal (2 subgoals):\n 1. \\<eta>: x \\<mapsto> Lub DtoKM_i\\<cdot>x\n 2. \\<eta>: x \\<mapsto> x' \\<Longrightarrow> x = Lub KMtoD_i\\<cdot>x'", "{"], ["proof (state)\nthis:\n  \\<eta>: fst (ValD_copy_lub, Lub DtoKM_i)\\<cdot>\n          x \\<mapsto> snd (ValD_copy_lub, Lub DtoKM_i)\\<cdot>x\n\ngoal (2 subgoals):\n 1. \\<eta>: x \\<mapsto> Lub DtoKM_i\\<cdot>x\n 2. \\<eta>: x \\<mapsto> x' \\<Longrightarrow> x = Lub KMtoD_i\\<cdot>x'", "fix x :: ValD"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<eta>: x \\<mapsto> Lub DtoKM_i\\<cdot>x\n 2. \\<eta>: x \\<mapsto> x' \\<Longrightarrow> x = Lub KMtoD_i\\<cdot>x'", "fix x' :: \"'o ValKM\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<eta>: x \\<mapsto> Lub DtoKM_i\\<cdot>x\n 2. \\<eta>: x \\<mapsto> x' \\<Longrightarrow> x = Lub KMtoD_i\\<cdot>x'", "let ?C2 = \"\\<lambda>i. (ValD_copy_i i, KMtoD_i i)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<eta>: x \\<mapsto> Lub DtoKM_i\\<cdot>x\n 2. \\<eta>: x \\<mapsto> x' \\<Longrightarrow> x = Lub KMtoD_i\\<cdot>x'", "let ?P2 = \"\\<lambda>f. (fst f)\\<cdot>x = (snd f)\\<cdot>x'\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<eta>: x \\<mapsto> Lub DtoKM_i\\<cdot>x\n 2. \\<eta>: x \\<mapsto> x' \\<Longrightarrow> x = Lub KMtoD_i\\<cdot>x'", "have \"adm (\\<lambda>f. ?P2 f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adm (\\<lambda>f. fst f\\<cdot>x = snd f\\<cdot>x')", "by simp"], ["proof (state)\nthis:\n  adm (\\<lambda>f. fst f\\<cdot>x = snd f\\<cdot>x')\n\ngoal (2 subgoals):\n 1. \\<eta>: x \\<mapsto> Lub DtoKM_i\\<cdot>x\n 2. \\<eta>: x \\<mapsto> x' \\<Longrightarrow> x = Lub KMtoD_i\\<cdot>x'", "with L"], ["proof (chain)\npicking this:\n  \\<eta>: ?x \\<mapsto> ?x' \\<Longrightarrow>\n  ValD_copy_i ?i\\<cdot>?x = KMtoD_i ?i\\<cdot>?x'\n  adm (\\<lambda>f. fst f\\<cdot>x = snd f\\<cdot>x')", "have \"\\<eta>: x \\<mapsto> x' \\<Longrightarrow> ?P2 (\\<Squnion>i. ValD_copy_i i, \\<Squnion>i. KMtoD_i i)\""], ["proof (prove)\nusing this:\n  \\<eta>: ?x \\<mapsto> ?x' \\<Longrightarrow>\n  ValD_copy_i ?i\\<cdot>?x = KMtoD_i ?i\\<cdot>?x'\n  adm (\\<lambda>f. fst f\\<cdot>x = snd f\\<cdot>x')\n\ngoal (1 subgoal):\n 1. \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n    fst (ValD_copy_lub, Lub KMtoD_i)\\<cdot>x =\n    snd (ValD_copy_lub, Lub KMtoD_i)\\<cdot>x'", "using admD[where P=\"?P2\" and Y=\"?C2\"] lub_prod[where S=\"?C2\"]"], ["proof (prove)\nusing this:\n  \\<eta>: ?x \\<mapsto> ?x' \\<Longrightarrow>\n  ValD_copy_i ?i\\<cdot>?x = KMtoD_i ?i\\<cdot>?x'\n  adm (\\<lambda>f. fst f\\<cdot>x = snd f\\<cdot>x')\n  \\<lbrakk>adm (\\<lambda>f. fst f\\<cdot>x = snd f\\<cdot>x');\n   chain (\\<lambda>i. (ValD_copy_i i, KMtoD_i i));\n   \\<And>i.\n      fst (ValD_copy_i i, KMtoD_i i)\\<cdot>x =\n      snd (ValD_copy_i i, KMtoD_i i)\\<cdot>x'\\<rbrakk>\n  \\<Longrightarrow> fst (\\<Squnion>i. (ValD_copy_i i, KMtoD_i i))\\<cdot>x =\n                    snd (\\<Squnion>i. (ValD_copy_i i, KMtoD_i i))\\<cdot>x'\n  chain (\\<lambda>i. (ValD_copy_i i, KMtoD_i i)) \\<Longrightarrow>\n  (\\<Squnion>i. (ValD_copy_i i, KMtoD_i i)) =\n  (\\<Squnion>i. fst (ValD_copy_i i, KMtoD_i i),\n   \\<Squnion>i. snd (ValD_copy_i i, KMtoD_i i))\n\ngoal (1 subgoal):\n 1. \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n    fst (ValD_copy_lub, Lub KMtoD_i)\\<cdot>x =\n    snd (ValD_copy_lub, Lub KMtoD_i)\\<cdot>x'", "by simp"], ["proof (state)\nthis:\n  \\<eta>: x \\<mapsto> x' \\<Longrightarrow>\n  fst (ValD_copy_lub, Lub KMtoD_i)\\<cdot>x =\n  snd (ValD_copy_lub, Lub KMtoD_i)\\<cdot>x'\n\ngoal (2 subgoals):\n 1. \\<eta>: x \\<mapsto> Lub DtoKM_i\\<cdot>x\n 2. \\<eta>: x \\<mapsto> x' \\<Longrightarrow> x = Lub KMtoD_i\\<cdot>x'", "}"], ["proof (state)\nthis:\n  \\<eta>: ?xa2 \\<mapsto> ?x'a2 \\<Longrightarrow>\n  fst (ValD_copy_lub, Lub KMtoD_i)\\<cdot>?xa2 =\n  snd (ValD_copy_lub, Lub KMtoD_i)\\<cdot>?x'a2\n\ngoal (2 subgoals):\n 1. \\<eta>: x \\<mapsto> Lub DtoKM_i\\<cdot>x\n 2. \\<eta>: x \\<mapsto> x' \\<Longrightarrow> x = Lub KMtoD_i\\<cdot>x'", "ultimately"], ["proof (chain)\npicking this:\n  \\<eta>: fst (ValD_copy_lub, Lub DtoKM_i)\\<cdot>\n          x \\<mapsto> snd (ValD_copy_lub, Lub DtoKM_i)\\<cdot>x\n  \\<eta>: ?xa2 \\<mapsto> ?x'a2 \\<Longrightarrow>\n  fst (ValD_copy_lub, Lub KMtoD_i)\\<cdot>?xa2 =\n  snd (ValD_copy_lub, Lub KMtoD_i)\\<cdot>?x'a2", "show\n    \"\\<eta>: x \\<mapsto> DtoKM\\<cdot>x\"\n    \"\\<eta>: x \\<mapsto> x' \\<Longrightarrow> x = KMtoD\\<cdot>x'\""], ["proof (prove)\nusing this:\n  \\<eta>: fst (ValD_copy_lub, Lub DtoKM_i)\\<cdot>\n          x \\<mapsto> snd (ValD_copy_lub, Lub DtoKM_i)\\<cdot>x\n  \\<eta>: ?xa2 \\<mapsto> ?x'a2 \\<Longrightarrow>\n  fst (ValD_copy_lub, Lub KMtoD_i)\\<cdot>?xa2 =\n  snd (ValD_copy_lub, Lub KMtoD_i)\\<cdot>?x'a2\n\ngoal (1 subgoal):\n 1. \\<eta>: x \\<mapsto> Lub DtoKM_i\\<cdot>x &&&\n    (\\<eta>: x \\<mapsto> x' \\<Longrightarrow> x = Lub KMtoD_i\\<cdot>x')", "by (simp_all add: ValD_copy_lub_ID)"], ["proof (state)\nthis:\n  \\<eta>: x \\<mapsto> Lub DtoKM_i\\<cdot>x\n  \\<eta>: x \\<mapsto> x' \\<Longrightarrow> x = Lub KMtoD_i\\<cdot>x'\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "text\\<open>\n\nTheorem 2 from \\citet{DBLP:conf/icalp/Reynolds74}.\n\n\\<close>"], ["", "theorem Theorem2: \"evalD e\\<cdot>\\<rho> = KMtoD\\<cdot>(evalK e\\<cdot>(DtoKM oo \\<rho>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>e\\<rbrakk>\\<rho> =\n    Lub KMtoD_i\\<cdot>(evalK e\\<cdot>(Lub DtoKM_i oo \\<rho>))", "using Lemma1(2)[OF Theorem1] Lemma1(1)"], ["proof (prove)\nusing this:\n  \\<forall>v.\n     \\<eta>: ?\\<rho>1\\<cdot>v \\<mapsto> ?\\<rho>'1\\<cdot>v \\<Longrightarrow>\n  \\<lbrakk>?e1\\<rbrakk>?\\<rho>1 =\n  Lub KMtoD_i\\<cdot>(evalK ?e1\\<cdot>?\\<rho>'1)\n  \\<eta>: ?x \\<mapsto> Lub DtoKM_i\\<cdot>?x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>e\\<rbrakk>\\<rho> =\n    Lub KMtoD_i\\<cdot>(evalK e\\<cdot>(Lub DtoKM_i oo \\<rho>))", "by (simp add: cfcomp1)"], ["", "end"], ["", "text\\<open>\n\n\\citet[Remark~48]{DBLP:journals/tcs/Filinski07} observes that there\nwill not be a retraction between direct and continuation semantics for\nlanguages with richer notions of effects.\n\nIt should be routine to extend the above approach to the higher-order\nbacktracking language of \\citet{DBLP:conf/icfp/WandV04}.\n\nI wonder if it is possible to construct continuation semantics from\ndirect semantics as proposed by\n\\citet{DBLP:journals/jacm/SethiT80}. Roughly we might hope to lift a\nretraction between two value domains to a retraction at higher types\nby synthesising a suitable logical relation.\n\n\\<close>"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}