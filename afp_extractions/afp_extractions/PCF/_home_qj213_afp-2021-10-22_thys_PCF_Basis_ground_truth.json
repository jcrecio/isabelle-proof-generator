{"file_name": "/home/qj213/afp-2021-10-22/thys/PCF/Basis.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/PCF", "problem_names": ["lemma cfun_map_below_ID:\n  assumes e: \"e \\<sqsubseteq> ID\"\n  shows \"cfun_map\\<cdot>e\\<cdot>e \\<sqsubseteq> ID\"", "lemma cfun_below_ID:\n  \"\\<lbrakk> f \\<sqsubseteq> ID; x \\<sqsubseteq> y \\<rbrakk> \\<Longrightarrow> f\\<cdot>x \\<sqsubseteq> y\"", "lemma oo_below:\n  \"\\<lbrakk> f \\<sqsubseteq> f'; g \\<sqsubseteq> g' \\<rbrakk> \\<Longrightarrow> f oo g \\<sqsubseteq> f' oo g'\"", "lemma cont_case_nat[simp]:\n  \"\\<lbrakk>cont (\\<lambda>x. f x); \\<And>n. cont (\\<lambda>x. g x n) \\<rbrakk> \\<Longrightarrow> cont (\\<lambda>x. case_nat (f x) (g x) n)\"", "lemma cont2cont_if_below_const [cont2cont, simp]:\n  assumes f: \"cont (\\<lambda>x. f x)\" and g: \"cont (\\<lambda>x. g x)\"\n  shows \"cont (\\<lambda>x. if f x \\<sqsubseteq> d then \\<bottom> else g x)\"", "lemma cont2cont_foldl [simp, cont2cont]:\n  fixes f :: \"'a::cpo \\<Rightarrow> 'b::cpo \\<Rightarrow> 'c::cpo \\<Rightarrow> 'b\"\n  fixes xs :: \"'c list\"\n  fixes z :: \"'a \\<Rightarrow> 'b\"\n  assumes \"cont (\\<lambda>(x, y, z). f x y z)\"\n  assumes \"cont z\"\n  shows \"cont (\\<lambda>x. foldl (f x) (z x) xs)\"", "lemma cont2cont_foldr [simp, cont2cont]:\n  fixes f :: \"'a::cpo \\<Rightarrow> 'c::cpo \\<Rightarrow> 'b::cpo \\<Rightarrow> 'b\"\n  fixes xs :: \"'c list\"\n  fixes z :: \"'a \\<Rightarrow> 'b\"\n  assumes \"cont (\\<lambda>(x, y, z). f x y z)\"\n  assumes \"cont z\"\n  shows \"cont (\\<lambda>x. foldr (f x) xs (z x))\"", "lemma fix_argument_promote:\n  assumes \"cont g\"\n  shows \"(\\<Lambda> x. fix\\<cdot>(g x)) = fix\\<cdot>(\\<Lambda> f x. g x\\<cdot>(f\\<cdot>x))\"", "lemma fix_argument_promote_fun:\n  fixes g :: \"'a::type \\<Rightarrow> 'b::pcpo \\<rightarrow> 'b\"\n  shows \"(\\<lambda>x. fix\\<cdot>(g x)) = (\\<mu> f. (\\<lambda>x. g x\\<cdot>(f x)))\"", "lemma adm_cart_prod [intro, simp]:\n  assumes X: \"adm (\\<lambda>x. x \\<in> X)\"\n  assumes Y: \"adm (\\<lambda>x. x \\<in> Y)\"\n  shows \"adm (\\<lambda>x. x \\<in> X \\<times> Y)\"", "lemma adm_exists_unique [intro, simp]:\n  assumes Q: \"\\<And>y. adm (\\<lambda>x. Q x y)\"\n  assumes P: \"\\<And>x x'. P x \\<and> P x' \\<longrightarrow> x = x'\"\n  shows \"adm (\\<lambda>x. \\<exists>y. P y \\<and> Q x y)\"", "lemma below_monicI:\n  \"(\\<And>x y. f x \\<sqsubseteq> f y \\<Longrightarrow> x \\<sqsubseteq> y) \\<Longrightarrow> below_monic f\"", "lemma below_monicE:\n  \"\\<lbrakk> below_monic f; f x \\<sqsubseteq> f y \\<rbrakk> \\<Longrightarrow> x \\<sqsubseteq> y\"", "lemma below_monic_inj:\n  \"below_monic (f :: 'a::cpo \\<Rightarrow> 'b::cpo) \\<Longrightarrow> inj f\"", "lemma below_monic_indexed:\n  assumes \"below_monic_cfun f\"\n  shows \"below_monic (\\<lambda>y i. f\\<cdot>(y i))\"", "lemma below_monic_ID [iff]:\n  \"below_monic_cfun ID\"", "lemma below_monic_cfcomp [iff]:\n  \"below_monic_cfun f \\<Longrightarrow> below_monic_cfun (cfcomp\\<cdot>f)\"", "lemma below_monic_K [iff]:\n  \"below_monic_cfun f \\<Longrightarrow> below_monic_cfun (\\<Lambda> c _. f\\<cdot>c)\"", "lemma below_monic_fun_K [iff]:\n  \"below_monic_cfun f \\<Longrightarrow> below_monic_cfun (\\<Lambda> c. (\\<lambda>_. f\\<cdot>c))\"", "lemma below_monic_cfcomp2 [iff]:\n  \"\\<lbrakk> below_monic_cfun f; below_monic_cfun g \\<rbrakk> \\<Longrightarrow> below_monic_cfun (f oo g)\"", "lemma below_monic_pair [iff]:\n  \"\\<lbrakk> below_monic_cfun f; below_monic_cfun g \\<rbrakk> \\<Longrightarrow> below_monic_cfun (\\<Lambda> x. (f\\<cdot>x, g\\<cdot>x))\"", "lemma below_monic_pair_split [iff]:\n  \"\\<lbrakk> below_monic_cfun f; below_monic_cfun g \\<rbrakk> \\<Longrightarrow> below_monic_cfun (\\<Lambda> x. (f\\<cdot>(fst x), g\\<cdot>(snd x)))\"", "lemma below_monic_sinl [iff]:\n  \"below_monic_cfun sinl\"", "lemma below_monic_sinr [iff]:\n  \"below_monic_cfun sinr\"", "lemma below_monic_chain_inv:\n  fixes f :: \"'a::cpo \\<Rightarrow> 'b::cpo\"\n  assumes Y: \"chain (Y :: nat \\<Rightarrow> 'b::cpo)\"\n  assumes Yi: \"\\<forall>i. \\<exists>y. Y i = f y \\<and> P y\"\n  assumes f: \"below_monic f\"\n  shows \"\\<exists>Y'. chain Y' \\<and> (\\<forall>i. Y i = f (Y' i) \\<and> P (Y' i))\"", "lemma adm_below_monic_exists:\n  \"\\<lbrakk> adm P; below_monic (f::'a::cpo \\<Rightarrow> 'b::cpo); cont f \\<rbrakk> \\<Longrightarrow> adm (\\<lambda>x. \\<exists>y. x = f y \\<and> P y)\""], "translations": [["", "lemma cfun_map_below_ID:\n  assumes e: \"e \\<sqsubseteq> ID\"\n  shows \"cfun_map\\<cdot>e\\<cdot>e \\<sqsubseteq> ID\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cfun_map\\<cdot>e\\<cdot>e \\<sqsubseteq> ID", "proof(intro cfun_belowI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       cfun_map\\<cdot>e\\<cdot>e\\<cdot>x\\<cdot>xa \\<sqsubseteq>\n       ID\\<cdot>x\\<cdot>xa", "fix f x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       cfun_map\\<cdot>e\\<cdot>e\\<cdot>x\\<cdot>xa \\<sqsubseteq>\n       ID\\<cdot>x\\<cdot>xa", "from e"], ["proof (chain)\npicking this:\n  e \\<sqsubseteq> ID", "have \"cfun_map\\<cdot>e\\<cdot>e\\<cdot>f\\<cdot>x \\<sqsubseteq> ID\\<cdot>(f\\<cdot>(ID\\<cdot>x))\""], ["proof (prove)\nusing this:\n  e \\<sqsubseteq> ID\n\ngoal (1 subgoal):\n 1. cfun_map\\<cdot>e\\<cdot>e\\<cdot>f\\<cdot>x \\<sqsubseteq>\n    ID\\<cdot>(f\\<cdot>(ID\\<cdot>x))", "by (simp del: ID1) (fast intro: monofun_cfun)"], ["proof (state)\nthis:\n  cfun_map\\<cdot>e\\<cdot>e\\<cdot>f\\<cdot>x \\<sqsubseteq>\n  ID\\<cdot>(f\\<cdot>(ID\\<cdot>x))\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       cfun_map\\<cdot>e\\<cdot>e\\<cdot>x\\<cdot>xa \\<sqsubseteq>\n       ID\\<cdot>x\\<cdot>xa", "thus \"cfun_map\\<cdot>e\\<cdot>e\\<cdot>f\\<cdot>x \\<sqsubseteq> ID\\<cdot>f\\<cdot>x\""], ["proof (prove)\nusing this:\n  cfun_map\\<cdot>e\\<cdot>e\\<cdot>f\\<cdot>x \\<sqsubseteq>\n  ID\\<cdot>(f\\<cdot>(ID\\<cdot>x))\n\ngoal (1 subgoal):\n 1. cfun_map\\<cdot>e\\<cdot>e\\<cdot>f\\<cdot>x \\<sqsubseteq>\n    ID\\<cdot>f\\<cdot>x", "by simp"], ["proof (state)\nthis:\n  cfun_map\\<cdot>e\\<cdot>e\\<cdot>f\\<cdot>x \\<sqsubseteq> ID\\<cdot>f\\<cdot>x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cfun_below_ID:\n  \"\\<lbrakk> f \\<sqsubseteq> ID; x \\<sqsubseteq> y \\<rbrakk> \\<Longrightarrow> f\\<cdot>x \\<sqsubseteq> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<sqsubseteq> ID; x \\<sqsubseteq> y\\<rbrakk>\n    \\<Longrightarrow> f\\<cdot>x \\<sqsubseteq> y", "by (auto simp: cfun_below_iff elim: below_trans)"], ["", "lemma oo_below:\n  \"\\<lbrakk> f \\<sqsubseteq> f'; g \\<sqsubseteq> g' \\<rbrakk> \\<Longrightarrow> f oo g \\<sqsubseteq> f' oo g'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<sqsubseteq> f'; g \\<sqsubseteq> g'\\<rbrakk>\n    \\<Longrightarrow> f oo g \\<sqsubseteq> f' oo g'", "by (simp add: oo_def cfun_below_iff monofun_cfun)"], ["", "lemma cont_case_nat[simp]:\n  \"\\<lbrakk>cont (\\<lambda>x. f x); \\<And>n. cont (\\<lambda>x. g x n) \\<rbrakk> \\<Longrightarrow> cont (\\<lambda>x. case_nat (f x) (g x) n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>cont f; \\<And>n. cont (\\<lambda>x. g x n)\\<rbrakk>\n    \\<Longrightarrow> cont\n                       (\\<lambda>x.\n                           case n of 0 \\<Rightarrow> f x\n                           | Suc xa \\<Rightarrow> g x xa)", "by (cases n, simp_all)"], ["", "lemma cont2cont_if_below_const [cont2cont, simp]:\n  assumes f: \"cont (\\<lambda>x. f x)\" and g: \"cont (\\<lambda>x. g x)\"\n  shows \"cont (\\<lambda>x. if f x \\<sqsubseteq> d then \\<bottom> else g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cont (\\<lambda>x. if f x \\<sqsubseteq> d then \\<bottom> else g x)", "proof (rule cont_apply [OF f])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. cont (\\<lambda>y. if y \\<sqsubseteq> d then \\<bottom> else g x)\n 2. \\<And>y. cont (\\<lambda>x. if y \\<sqsubseteq> d then \\<bottom> else g x)", "show \"\\<And>x. cont (\\<lambda>y. if y \\<sqsubseteq> d then \\<bottom> else g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. cont (\\<lambda>y. if y \\<sqsubseteq> d then \\<bottom> else g x)", "unfolding cont_def is_lub_def is_ub_def ball_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<forall>Y.\n          chain Y \\<longrightarrow>\n          (\\<forall>xa.\n              (if Y xa \\<sqsubseteq> d then \\<bottom>\n               else g x) \\<sqsubseteq>\n              (if Lub Y \\<sqsubseteq> d then \\<bottom> else g x)) \\<and>\n          (\\<forall>u.\n              (\\<forall>xa.\n                  (if Y xa \\<sqsubseteq> d then \\<bottom>\n                   else g x) \\<sqsubseteq>\n                  u) \\<longrightarrow>\n              (if Lub Y \\<sqsubseteq> d then \\<bottom>\n               else g x) \\<sqsubseteq>\n              u)", "by (simp add: lub_below_iff)"], ["proof (state)\nthis:\n  cont (\\<lambda>y. if y \\<sqsubseteq> d then \\<bottom> else g ?x)\n\ngoal (1 subgoal):\n 1. \\<And>y. cont (\\<lambda>x. if y \\<sqsubseteq> d then \\<bottom> else g x)", "show \"\\<And>y. cont (\\<lambda>x. if y \\<sqsubseteq> d then \\<bottom> else g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y. cont (\\<lambda>x. if y \\<sqsubseteq> d then \\<bottom> else g x)", "by (simp add: g)"], ["proof (state)\nthis:\n  cont (\\<lambda>x. if ?y \\<sqsubseteq> d then \\<bottom> else g x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cont2cont_foldl [simp, cont2cont]:\n  fixes f :: \"'a::cpo \\<Rightarrow> 'b::cpo \\<Rightarrow> 'c::cpo \\<Rightarrow> 'b\"\n  fixes xs :: \"'c list\"\n  fixes z :: \"'a \\<Rightarrow> 'b\"\n  assumes \"cont (\\<lambda>(x, y, z). f x y z)\"\n  assumes \"cont z\"\n  shows \"cont (\\<lambda>x. foldl (f x) (z x) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cont (\\<lambda>x. foldl (f x) (z x) xs)", "using assms"], ["proof (prove)\nusing this:\n  cont (\\<lambda>(x, y, z). f x y z)\n  cont z\n\ngoal (1 subgoal):\n 1. cont (\\<lambda>x. foldl (f x) (z x) xs)", "by (induct xs rule: rev_induct) (auto simp: prod_cont_iff intro: cont_apply)"], ["", "lemma cont2cont_foldr [simp, cont2cont]:\n  fixes f :: \"'a::cpo \\<Rightarrow> 'c::cpo \\<Rightarrow> 'b::cpo \\<Rightarrow> 'b\"\n  fixes xs :: \"'c list\"\n  fixes z :: \"'a \\<Rightarrow> 'b\"\n  assumes \"cont (\\<lambda>(x, y, z). f x y z)\"\n  assumes \"cont z\"\n  shows \"cont (\\<lambda>x. foldr (f x) xs (z x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cont (\\<lambda>x. foldr (f x) xs (z x))", "using assms"], ["proof (prove)\nusing this:\n  cont (\\<lambda>(x, y, z). f x y z)\n  cont z\n\ngoal (1 subgoal):\n 1. cont (\\<lambda>x. foldr (f x) xs (z x))", "by (induct xs) (auto simp: prod_cont_iff intro: cont_apply)"], ["", "text\\<open>\n\nThe following proof is due to\n\\citet[Eqn~2.28]{DBLP:journals/siamcomp/Scott76}.\n\n\\<close>"], ["", "lemma fix_argument_promote:\n  assumes \"cont g\"\n  shows \"(\\<Lambda> x. fix\\<cdot>(g x)) = fix\\<cdot>(\\<Lambda> f x. g x\\<cdot>(f\\<cdot>x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> x. fix\\<cdot>(g x)) =\n    (\\<mu> f. \\<Lambda> x. g x\\<cdot>(f\\<cdot>x))", "proof(rule below_antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<Lambda> x. fix\\<cdot>(g x)) \\<sqsubseteq>\n    (\\<mu> f. \\<Lambda> x. g x\\<cdot>(f\\<cdot>x))\n 2. (\\<mu> f. \\<Lambda> x. g x\\<cdot>(f\\<cdot>x)) \\<sqsubseteq>\n    (\\<Lambda> x. fix\\<cdot>(g x))", "have \"(\\<Lambda> x. g x\\<cdot>(fix\\<cdot>(g x))) = (\\<Lambda> x. fix\\<cdot>(g x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> x. g x\\<cdot>(fix\\<cdot>(g x))) =\n    (\\<Lambda> x. fix\\<cdot>(g x))", "by (subst fix_eq) simp"], ["proof (state)\nthis:\n  (\\<Lambda> x. g x\\<cdot>(fix\\<cdot>(g x))) =\n  (\\<Lambda> x. fix\\<cdot>(g x))\n\ngoal (2 subgoals):\n 1. (\\<Lambda> x. fix\\<cdot>(g x)) \\<sqsubseteq>\n    (\\<mu> f. \\<Lambda> x. g x\\<cdot>(f\\<cdot>x))\n 2. (\\<mu> f. \\<Lambda> x. g x\\<cdot>(f\\<cdot>x)) \\<sqsubseteq>\n    (\\<Lambda> x. fix\\<cdot>(g x))", "with \\<open>cont g\\<close>"], ["proof (chain)\npicking this:\n  cont g\n  (\\<Lambda> x. g x\\<cdot>(fix\\<cdot>(g x))) =\n  (\\<Lambda> x. fix\\<cdot>(g x))", "show \"fix\\<cdot>(\\<Lambda> f x. g x\\<cdot>(f\\<cdot>x)) \\<sqsubseteq> (\\<Lambda> x. fix\\<cdot>(g x))\""], ["proof (prove)\nusing this:\n  cont g\n  (\\<Lambda> x. g x\\<cdot>(fix\\<cdot>(g x))) =\n  (\\<Lambda> x. fix\\<cdot>(g x))\n\ngoal (1 subgoal):\n 1. (\\<mu> f. \\<Lambda> x. g x\\<cdot>(f\\<cdot>x)) \\<sqsubseteq>\n    (\\<Lambda> x. fix\\<cdot>(g x))", "by (simp add: fix_least cont2cont_LAM)"], ["proof (state)\nthis:\n  (\\<mu> f. \\<Lambda> x. g x\\<cdot>(f\\<cdot>x)) \\<sqsubseteq>\n  (\\<Lambda> x. fix\\<cdot>(g x))\n\ngoal (1 subgoal):\n 1. (\\<Lambda> x. fix\\<cdot>(g x)) \\<sqsubseteq>\n    (\\<mu> f. \\<Lambda> x. g x\\<cdot>(f\\<cdot>x))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Lambda> x. fix\\<cdot>(g x)) \\<sqsubseteq>\n    (\\<mu> f. \\<Lambda> x. g x\\<cdot>(f\\<cdot>x))", "show \"(\\<Lambda> x. fix\\<cdot>(g x)) \\<sqsubseteq> fix\\<cdot>(\\<Lambda> f x. g x\\<cdot>(f\\<cdot>x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> x. fix\\<cdot>(g x)) \\<sqsubseteq>\n    (\\<mu> f. \\<Lambda> x. g x\\<cdot>(f\\<cdot>x))", "proof(rule cfun_belowI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<Lambda> x. fix\\<cdot>(g x))\\<cdot>x \\<sqsubseteq>\n       (\\<mu> f. \\<Lambda> x. g x\\<cdot>(f\\<cdot>x))\\<cdot>x", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<Lambda> x. fix\\<cdot>(g x))\\<cdot>x \\<sqsubseteq>\n       (\\<mu> f. \\<Lambda> x. g x\\<cdot>(f\\<cdot>x))\\<cdot>x", "from \\<open>cont g\\<close>"], ["proof (chain)\npicking this:\n  cont g", "have \"g y\\<cdot>(fix\\<cdot>(\\<Lambda> f x. g x\\<cdot>(f\\<cdot>x))\\<cdot>y) = fix\\<cdot>(\\<Lambda> f x. g x\\<cdot>(f\\<cdot>x))\\<cdot>y\""], ["proof (prove)\nusing this:\n  cont g\n\ngoal (1 subgoal):\n 1. g y\\<cdot>((\\<mu> f. \\<Lambda> x. g x\\<cdot>(f\\<cdot>x))\\<cdot>y) =\n    (\\<mu> f. \\<Lambda> x. g x\\<cdot>(f\\<cdot>x))\\<cdot>y", "by (subst fix_eq, simp add: cont2cont_LAM)"], ["proof (state)\nthis:\n  g y\\<cdot>((\\<mu> f. \\<Lambda> x. g x\\<cdot>(f\\<cdot>x))\\<cdot>y) =\n  (\\<mu> f. \\<Lambda> x. g x\\<cdot>(f\\<cdot>x))\\<cdot>y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<Lambda> x. fix\\<cdot>(g x))\\<cdot>x \\<sqsubseteq>\n       (\\<mu> f. \\<Lambda> x. g x\\<cdot>(f\\<cdot>x))\\<cdot>x", "with \\<open>cont g\\<close>"], ["proof (chain)\npicking this:\n  cont g\n  g y\\<cdot>((\\<mu> f. \\<Lambda> x. g x\\<cdot>(f\\<cdot>x))\\<cdot>y) =\n  (\\<mu> f. \\<Lambda> x. g x\\<cdot>(f\\<cdot>x))\\<cdot>y", "show \"(\\<Lambda> x. fix\\<cdot>(g x))\\<cdot>y \\<sqsubseteq> fix\\<cdot>(\\<Lambda> f x. g x\\<cdot>(f\\<cdot>x))\\<cdot>y\""], ["proof (prove)\nusing this:\n  cont g\n  g y\\<cdot>((\\<mu> f. \\<Lambda> x. g x\\<cdot>(f\\<cdot>x))\\<cdot>y) =\n  (\\<mu> f. \\<Lambda> x. g x\\<cdot>(f\\<cdot>x))\\<cdot>y\n\ngoal (1 subgoal):\n 1. (\\<Lambda> x. fix\\<cdot>(g x))\\<cdot>y \\<sqsubseteq>\n    (\\<mu> f. \\<Lambda> x. g x\\<cdot>(f\\<cdot>x))\\<cdot>y", "by (simp add: fix_least)"], ["proof (state)\nthis:\n  (\\<Lambda> x. fix\\<cdot>(g x))\\<cdot>y \\<sqsubseteq>\n  (\\<mu> f. \\<Lambda> x. g x\\<cdot>(f\\<cdot>x))\\<cdot>y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Lambda> x. fix\\<cdot>(g x)) \\<sqsubseteq>\n  (\\<mu> f. \\<Lambda> x. g x\\<cdot>(f\\<cdot>x))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fix_argument_promote_fun:\n  fixes g :: \"'a::type \\<Rightarrow> 'b::pcpo \\<rightarrow> 'b\"\n  shows \"(\\<lambda>x. fix\\<cdot>(g x)) = (\\<mu> f. (\\<lambda>x. g x\\<cdot>(f x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. fix\\<cdot>(g x)) =\n    (\\<mu> x. (\\<lambda>xa. g xa\\<cdot>(x xa)))", "proof(rule below_antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>x. fix\\<cdot>(g x)) \\<sqsubseteq>\n    (\\<mu> x. (\\<lambda>xa. g xa\\<cdot>(x xa)))\n 2. (\\<mu> x. (\\<lambda>xa. g xa\\<cdot>(x xa))) \\<sqsubseteq>\n    (\\<lambda>x. fix\\<cdot>(g x))", "have \"(\\<lambda>x. g x\\<cdot>(fix\\<cdot>(g x))) = (\\<lambda>x. fix\\<cdot>(g x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. g x\\<cdot>(fix\\<cdot>(g x))) =\n    (\\<lambda>x. fix\\<cdot>(g x))", "by (subst fix_eq) simp"], ["proof (state)\nthis:\n  (\\<lambda>x. g x\\<cdot>(fix\\<cdot>(g x))) = (\\<lambda>x. fix\\<cdot>(g x))\n\ngoal (2 subgoals):\n 1. (\\<lambda>x. fix\\<cdot>(g x)) \\<sqsubseteq>\n    (\\<mu> x. (\\<lambda>xa. g xa\\<cdot>(x xa)))\n 2. (\\<mu> x. (\\<lambda>xa. g xa\\<cdot>(x xa))) \\<sqsubseteq>\n    (\\<lambda>x. fix\\<cdot>(g x))", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x. g x\\<cdot>(fix\\<cdot>(g x))) = (\\<lambda>x. fix\\<cdot>(g x))", "show \"(\\<mu> f. (\\<lambda>x. g x\\<cdot>(f x))) \\<sqsubseteq> (\\<lambda>x. fix\\<cdot>(g x))\""], ["proof (prove)\nusing this:\n  (\\<lambda>x. g x\\<cdot>(fix\\<cdot>(g x))) = (\\<lambda>x. fix\\<cdot>(g x))\n\ngoal (1 subgoal):\n 1. (\\<mu> x. (\\<lambda>xa. g xa\\<cdot>(x xa))) \\<sqsubseteq>\n    (\\<lambda>x. fix\\<cdot>(g x))", "by (simp add: fix_least cont_fun)"], ["proof (state)\nthis:\n  (\\<mu> x. (\\<lambda>xa. g xa\\<cdot>(x xa))) \\<sqsubseteq>\n  (\\<lambda>x. fix\\<cdot>(g x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. fix\\<cdot>(g x)) \\<sqsubseteq>\n    (\\<mu> x. (\\<lambda>xa. g xa\\<cdot>(x xa)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x. fix\\<cdot>(g x)) \\<sqsubseteq>\n    (\\<mu> x. (\\<lambda>xa. g xa\\<cdot>(x xa)))", "show \"(\\<lambda>x. fix\\<cdot>(g x)) \\<sqsubseteq> (\\<mu> f. (\\<lambda>x. g x\\<cdot>(f x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. fix\\<cdot>(g x)) \\<sqsubseteq>\n    (\\<mu> x. (\\<lambda>xa. g xa\\<cdot>(x xa)))", "proof(rule fun_belowI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       fix\\<cdot>(g x) \\<sqsubseteq>\n       (\\<mu> x. (\\<lambda>xa. g xa\\<cdot>(x xa))) x", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       fix\\<cdot>(g x) \\<sqsubseteq>\n       (\\<mu> x. (\\<lambda>xa. g xa\\<cdot>(x xa))) x", "have \"g y\\<cdot>((\\<mu> f. (\\<lambda>x. g x\\<cdot>(f x))) y) = (\\<mu> f. (\\<lambda>x. g x\\<cdot>(f x))) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g y\\<cdot>((\\<mu> x. (\\<lambda>xa. g xa\\<cdot>(x xa))) y) =\n    (\\<mu> x. (\\<lambda>xa. g xa\\<cdot>(x xa))) y", "by (subst fix_eq, simp add: cont_fun)"], ["proof (state)\nthis:\n  g y\\<cdot>((\\<mu> x. (\\<lambda>xa. g xa\\<cdot>(x xa))) y) =\n  (\\<mu> x. (\\<lambda>xa. g xa\\<cdot>(x xa))) y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       fix\\<cdot>(g x) \\<sqsubseteq>\n       (\\<mu> x. (\\<lambda>xa. g xa\\<cdot>(x xa))) x", "thus \"fix\\<cdot>(g y) \\<sqsubseteq> (\\<mu> f. (\\<lambda>x. g x\\<cdot>(f x))) y\""], ["proof (prove)\nusing this:\n  g y\\<cdot>((\\<mu> x. (\\<lambda>xa. g xa\\<cdot>(x xa))) y) =\n  (\\<mu> x. (\\<lambda>xa. g xa\\<cdot>(x xa))) y\n\ngoal (1 subgoal):\n 1. fix\\<cdot>(g y) \\<sqsubseteq>\n    (\\<mu> x. (\\<lambda>xa. g xa\\<cdot>(x xa))) y", "by (simp add: fix_least)"], ["proof (state)\nthis:\n  fix\\<cdot>(g y) \\<sqsubseteq>\n  (\\<mu> x. (\\<lambda>xa. g xa\\<cdot>(x xa))) y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>x. fix\\<cdot>(g x)) \\<sqsubseteq>\n  (\\<mu> x. (\\<lambda>xa. g xa\\<cdot>(x xa)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma adm_cart_prod [intro, simp]:\n  assumes X: \"adm (\\<lambda>x. x \\<in> X)\"\n  assumes Y: \"adm (\\<lambda>x. x \\<in> Y)\"\n  shows \"adm (\\<lambda>x. x \\<in> X \\<times> Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adm (\\<lambda>x. x \\<in> X \\<times> Y)", "proof(rule admI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Ya.\n       \\<lbrakk>chain Ya; \\<forall>i. Ya i \\<in> X \\<times> Y\\<rbrakk>\n       \\<Longrightarrow> (\\<Squnion>i. Ya i) \\<in> X \\<times> Y", "fix A"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Ya.\n       \\<lbrakk>chain Ya; \\<forall>i. Ya i \\<in> X \\<times> Y\\<rbrakk>\n       \\<Longrightarrow> (\\<Squnion>i. Ya i) \\<in> X \\<times> Y", "assume A: \"chain A\" and Ai: \"\\<forall>i. A i \\<in> X \\<times> Y\""], ["proof (state)\nthis:\n  chain A\n  \\<forall>i. A i \\<in> X \\<times> Y\n\ngoal (1 subgoal):\n 1. \\<And>Ya.\n       \\<lbrakk>chain Ya; \\<forall>i. Ya i \\<in> X \\<times> Y\\<rbrakk>\n       \\<Longrightarrow> (\\<Squnion>i. Ya i) \\<in> X \\<times> Y", "from Ai"], ["proof (chain)\npicking this:\n  \\<forall>i. A i \\<in> X \\<times> Y", "have \"\\<forall>i. fst (A i) \\<in> X\" and \"\\<forall>i. snd (A i) \\<in> Y\""], ["proof (prove)\nusing this:\n  \\<forall>i. A i \\<in> X \\<times> Y\n\ngoal (1 subgoal):\n 1. \\<forall>i. fst (A i) \\<in> X &&& \\<forall>i. snd (A i) \\<in> Y", "by (auto simp: mem_Times_iff)"], ["proof (state)\nthis:\n  \\<forall>i. fst (A i) \\<in> X\n  \\<forall>i. snd (A i) \\<in> Y\n\ngoal (1 subgoal):\n 1. \\<And>Ya.\n       \\<lbrakk>chain Ya; \\<forall>i. Ya i \\<in> X \\<times> Y\\<rbrakk>\n       \\<Longrightarrow> (\\<Squnion>i. Ya i) \\<in> X \\<times> Y", "with A X Y"], ["proof (chain)\npicking this:\n  chain A\n  adm (\\<lambda>x. x \\<in> X)\n  adm (\\<lambda>x. x \\<in> Y)\n  \\<forall>i. fst (A i) \\<in> X\n  \\<forall>i. snd (A i) \\<in> Y", "show \"Lub A \\<in> X \\<times> Y\""], ["proof (prove)\nusing this:\n  chain A\n  adm (\\<lambda>x. x \\<in> X)\n  adm (\\<lambda>x. x \\<in> Y)\n  \\<forall>i. fst (A i) \\<in> X\n  \\<forall>i. snd (A i) \\<in> Y\n\ngoal (1 subgoal):\n 1. Lub A \\<in> X \\<times> Y", "by (auto intro: admD intro!: adm_subst simp: lub_prod)"], ["proof (state)\nthis:\n  Lub A \\<in> X \\<times> Y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma adm_exists_unique [intro, simp]:\n  assumes Q: \"\\<And>y. adm (\\<lambda>x. Q x y)\"\n  assumes P: \"\\<And>x x'. P x \\<and> P x' \\<longrightarrow> x = x'\"\n  shows \"adm (\\<lambda>x. \\<exists>y. P y \\<and> Q x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adm (\\<lambda>x. \\<exists>y. P y \\<and> Q x y)", "proof(rule admI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>chain Y;\n        \\<forall>i. \\<exists>y. P y \\<and> Q (Y i) y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. P y \\<and> Q (\\<Squnion>i. Y i) y", "fix Y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>chain Y;\n        \\<forall>i. \\<exists>y. P y \\<and> Q (Y i) y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. P y \\<and> Q (\\<Squnion>i. Y i) y", "assume Y: \"chain Y\" and Yi: \"\\<forall>i. \\<exists>y. P y \\<and> Q (Y i) y\""], ["proof (state)\nthis:\n  chain Y\n  \\<forall>i. \\<exists>y. P y \\<and> Q (Y i) y\n\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>chain Y;\n        \\<forall>i. \\<exists>y. P y \\<and> Q (Y i) y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. P y \\<and> Q (\\<Squnion>i. Y i) y", "then"], ["proof (chain)\npicking this:\n  chain Y\n  \\<forall>i. \\<exists>y. P y \\<and> Q (Y i) y", "obtain y where Py: \"P y\""], ["proof (prove)\nusing this:\n  chain Y\n  \\<forall>i. \\<exists>y. P y \\<and> Q (Y i) y\n\ngoal (1 subgoal):\n 1. (\\<And>y. P y \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  P y\n\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>chain Y;\n        \\<forall>i. \\<exists>y. P y \\<and> Q (Y i) y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. P y \\<and> Q (\\<Squnion>i. Y i) y", "with P Q Y Yi"], ["proof (chain)\npicking this:\n  P ?x \\<and> P ?x' \\<longrightarrow> ?x = ?x'\n  adm (\\<lambda>x. Q x ?y)\n  chain Y\n  \\<forall>i. \\<exists>y. P y \\<and> Q (Y i) y\n  P y", "have \"Q (Lub Y) y\""], ["proof (prove)\nusing this:\n  P ?x \\<and> P ?x' \\<longrightarrow> ?x = ?x'\n  adm (\\<lambda>x. Q x ?y)\n  chain Y\n  \\<forall>i. \\<exists>y. P y \\<and> Q (Y i) y\n  P y\n\ngoal (1 subgoal):\n 1. Q (Lub Y) y", "by - (rule admD, fastforce+)"], ["proof (state)\nthis:\n  Q (Lub Y) y\n\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>chain Y;\n        \\<forall>i. \\<exists>y. P y \\<and> Q (Y i) y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. P y \\<and> Q (\\<Squnion>i. Y i) y", "with Py"], ["proof (chain)\npicking this:\n  P y\n  Q (Lub Y) y", "show \"\\<exists>y. P y \\<and> Q (Lub Y) y\""], ["proof (prove)\nusing this:\n  P y\n  Q (Lub Y) y\n\ngoal (1 subgoal):\n 1. \\<exists>y. P y \\<and> Q (Lub Y) y", "by blast"], ["proof (state)\nthis:\n  \\<exists>y. P y \\<and> Q (Lub Y) y\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection\\<open>Order monics\\<close>"], ["", "text\\<open>\n\nOrder monics are invertible with respect to the partial order. They\ndon't need to be continuous!\n\nAll domain data constructors are @{term \"below_monic_cfun\"}.\n\n\\<close>"], ["", "definition\n  below_monic :: \"('a::cpo \\<Rightarrow> 'b::cpo) \\<Rightarrow> bool\"\nwhere\n  \"below_monic f \\<equiv> \\<forall>x y. f x \\<sqsubseteq> f y \\<longrightarrow> x \\<sqsubseteq> y\""], ["", "abbreviation\n  below_monic_cfun :: \"('a::cpo \\<rightarrow> 'b::cpo) \\<Rightarrow> bool\"\nwhere\n  \"below_monic_cfun f \\<equiv> below_monic (Rep_cfun f)\""], ["", "lemma below_monicI:\n  \"(\\<And>x y. f x \\<sqsubseteq> f y \\<Longrightarrow> x \\<sqsubseteq> y) \\<Longrightarrow> below_monic f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        f x \\<sqsubseteq> f y \\<Longrightarrow>\n        x \\<sqsubseteq> y) \\<Longrightarrow>\n    below_monic f", "unfolding below_monic_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        f x \\<sqsubseteq> f y \\<Longrightarrow>\n        x \\<sqsubseteq> y) \\<Longrightarrow>\n    \\<forall>x y. f x \\<sqsubseteq> f y \\<longrightarrow> x \\<sqsubseteq> y", "by simp"], ["", "lemma below_monicE:\n  \"\\<lbrakk> below_monic f; f x \\<sqsubseteq> f y \\<rbrakk> \\<Longrightarrow> x \\<sqsubseteq> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>below_monic f; f x \\<sqsubseteq> f y\\<rbrakk>\n    \\<Longrightarrow> x \\<sqsubseteq> y", "unfolding below_monic_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x y.\n                f x \\<sqsubseteq> f y \\<longrightarrow> x \\<sqsubseteq> y;\n     f x \\<sqsubseteq> f y\\<rbrakk>\n    \\<Longrightarrow> x \\<sqsubseteq> y", "by simp"], ["", "lemma below_monic_inj:\n  \"below_monic (f :: 'a::cpo \\<Rightarrow> 'b::cpo) \\<Longrightarrow> inj f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. below_monic f \\<Longrightarrow> inj f", "by (auto intro!: below_antisym injI elim: below_monicE)"], ["", "lemma below_monic_indexed:\n  assumes \"below_monic_cfun f\"\n  shows \"below_monic (\\<lambda>y i. f\\<cdot>(y i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. below_monic (\\<lambda>y i. f\\<cdot>(y i))", "by (metis (no_types, lifting) assms below_fun_def below_monicE below_monicI)"], ["", "lemma below_monic_ID [iff]:\n  \"below_monic_cfun ID\""], ["proof (prove)\ngoal (1 subgoal):\n 1. below_monic_cfun ID", "by (rule below_monicI) simp"], ["", "lemma below_monic_cfcomp [iff]:\n  \"below_monic_cfun f \\<Longrightarrow> below_monic_cfun (cfcomp\\<cdot>f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. below_monic_cfun f \\<Longrightarrow> below_monic_cfun (cfcomp\\<cdot>f)", "by (rule below_monicI) (auto simp: cfun_below_iff elim: below_monicE)"], ["", "lemma below_monic_K [iff]:\n  \"below_monic_cfun f \\<Longrightarrow> below_monic_cfun (\\<Lambda> c _. f\\<cdot>c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. below_monic_cfun f \\<Longrightarrow>\n    below_monic_cfun (\\<Lambda> c uu_. f\\<cdot>c)", "by (rule below_monicI) (auto simp: cfun_below_iff elim: below_monicE)"], ["", "lemma below_monic_fun_K [iff]:\n  \"below_monic_cfun f \\<Longrightarrow> below_monic_cfun (\\<Lambda> c. (\\<lambda>_. f\\<cdot>c))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. below_monic_cfun f \\<Longrightarrow>\n    below_monic_cfun (\\<Lambda> c. (\\<lambda>_. f\\<cdot>c))", "by (rule below_monicI) (auto simp: fun_below_iff dest: below_monicE)"], ["", "lemma below_monic_cfcomp2 [iff]:\n  \"\\<lbrakk> below_monic_cfun f; below_monic_cfun g \\<rbrakk> \\<Longrightarrow> below_monic_cfun (f oo g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>below_monic_cfun f; below_monic_cfun g\\<rbrakk>\n    \\<Longrightarrow> below_monic_cfun (f oo g)", "by (rule below_monicI) (auto simp: cfun_below_iff elim: below_monicE)"], ["", "lemma below_monic_pair [iff]:\n  \"\\<lbrakk> below_monic_cfun f; below_monic_cfun g \\<rbrakk> \\<Longrightarrow> below_monic_cfun (\\<Lambda> x. (f\\<cdot>x, g\\<cdot>x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>below_monic_cfun f; below_monic_cfun g\\<rbrakk>\n    \\<Longrightarrow> below_monic_cfun (\\<Lambda> x. (f\\<cdot>x, g\\<cdot>x))", "by (rule below_monicI) (auto simp: cfun_below_iff elim: below_monicE)"], ["", "lemma below_monic_pair_split [iff]:\n  \"\\<lbrakk> below_monic_cfun f; below_monic_cfun g \\<rbrakk> \\<Longrightarrow> below_monic_cfun (\\<Lambda> x. (f\\<cdot>(fst x), g\\<cdot>(snd x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>below_monic_cfun f; below_monic_cfun g\\<rbrakk>\n    \\<Longrightarrow> below_monic_cfun\n                       (\\<Lambda> x. (f\\<cdot>(fst x), g\\<cdot>(snd x)))", "by (rule below_monicI) (auto simp: cfun_below_iff elim: below_monicE)"], ["", "lemma below_monic_sinl [iff]:\n  \"below_monic_cfun sinl\""], ["proof (prove)\ngoal (1 subgoal):\n 1. below_monic_cfun sinl", "by (rule below_monicI) (auto simp: cfun_below_iff elim: below_monicE)"], ["", "lemma below_monic_sinr [iff]:\n  \"below_monic_cfun sinr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. below_monic_cfun sinr", "by (rule below_monicI) (auto simp: cfun_below_iff elim: below_monicE)"], ["", "lemma below_monic_chain_inv:\n  fixes f :: \"'a::cpo \\<Rightarrow> 'b::cpo\"\n  assumes Y: \"chain (Y :: nat \\<Rightarrow> 'b::cpo)\"\n  assumes Yi: \"\\<forall>i. \\<exists>y. Y i = f y \\<and> P y\"\n  assumes f: \"below_monic f\"\n  shows \"\\<exists>Y'. chain Y' \\<and> (\\<forall>i. Y i = f (Y' i) \\<and> P (Y' i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Y'.\n       chain Y' \\<and> (\\<forall>i. Y i = f (Y' i) \\<and> P (Y' i))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>Y'.\n       chain Y' \\<and> (\\<forall>i. Y i = f (Y' i) \\<and> P (Y' i))", "let ?Y' = \"\\<lambda>i. SOME y. Y i = f y \\<and> P y\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>Y'.\n       chain Y' \\<and> (\\<forall>i. Y i = f (Y' i) \\<and> P (Y' i))", "have \"chain ?Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain (\\<lambda>i. SOME y. Y i = f y \\<and> P y)", "proof(rule chainI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (SOME y. Y i = f y \\<and> P y) \\<sqsubseteq>\n       (SOME y. Y (Suc i) = f y \\<and> P y)", "fix i :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (SOME y. Y i = f y \\<and> P y) \\<sqsubseteq>\n       (SOME y. Y (Suc i) = f y \\<and> P y)", "show \"(SOME x. Y i = f x \\<and> P x) \\<sqsubseteq> (SOME y. Y (Suc i) = f y \\<and> P y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SOME x. Y i = f x \\<and> P x) \\<sqsubseteq>\n    (SOME y. Y (Suc i) = f y \\<and> P y)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SOME x. Y i = f x \\<and> P x) \\<sqsubseteq>\n    (SOME y. Y (Suc i) = f y \\<and> P y)", "using spec[OF Yi, where x=i] spec[OF Yi, where x=\"Suc i\"]"], ["proof (prove)\nusing this:\n  \\<exists>y. Y i = f y \\<and> P y\n  \\<exists>y. Y (Suc i) = f y \\<and> P y\n\ngoal (1 subgoal):\n 1. (SOME x. Y i = f x \\<and> P x) \\<sqsubseteq>\n    (SOME y. Y (Suc i) = f y \\<and> P y)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y ya.\n       \\<lbrakk>Y i = f y; P y; Y (Suc i) = f ya; P ya\\<rbrakk>\n       \\<Longrightarrow> (SOME x. f y = f x \\<and> P x) \\<sqsubseteq>\n                         (SOME y. f ya = f y \\<and> P y)", "apply (rule someI2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y ya.\n       \\<lbrakk>Y i = f y; P y; Y (Suc i) = f ya; P ya\\<rbrakk>\n       \\<Longrightarrow> f ya = f (?a6 y ya) \\<and> P (?a6 y ya)\n 2. \\<And>y ya yb.\n       \\<lbrakk>Y i = f y; P y; Y (Suc i) = f ya; P ya;\n        f ya = f yb \\<and> P yb\\<rbrakk>\n       \\<Longrightarrow> (SOME x. f y = f x \\<and> P x) \\<sqsubseteq> yb", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y ya yb.\n       \\<lbrakk>Y i = f y; P y; Y (Suc i) = f ya; P ya;\n        f ya = f yb \\<and> P yb\\<rbrakk>\n       \\<Longrightarrow> (SOME x. f y = f x \\<and> P x) \\<sqsubseteq> yb", "apply (rule someI2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y ya yb.\n       \\<lbrakk>Y i = f y; P y; Y (Suc i) = f ya; P ya;\n        f ya = f yb \\<and> P yb\\<rbrakk>\n       \\<Longrightarrow> f y = f (?a13 y ya yb) \\<and> P (?a13 y ya yb)\n 2. \\<And>y ya yb x.\n       \\<lbrakk>Y i = f y; P y; Y (Suc i) = f ya; P ya;\n        f ya = f yb \\<and> P yb; f y = f x \\<and> P x\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> yb", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y ya yb x.\n       \\<lbrakk>Y i = f y; P y; Y (Suc i) = f ya; P ya;\n        f ya = f yb \\<and> P yb; f y = f x \\<and> P x\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> yb", "apply (rule below_monicE[OF f])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y ya yb x.\n       \\<lbrakk>Y i = f y; P y; Y (Suc i) = f ya; P ya;\n        f ya = f yb \\<and> P yb; f y = f x \\<and> P x\\<rbrakk>\n       \\<Longrightarrow> f x \\<sqsubseteq> f yb", "using chain_mono[OF Y, where i=i and j=\"Suc i\"]"], ["proof (prove)\nusing this:\n  i \\<le> Suc i \\<Longrightarrow> Y i \\<sqsubseteq> Y (Suc i)\n\ngoal (1 subgoal):\n 1. \\<And>y ya yb x.\n       \\<lbrakk>Y i = f y; P y; Y (Suc i) = f ya; P ya;\n        f ya = f yb \\<and> P yb; f y = f x \\<and> P x\\<rbrakk>\n       \\<Longrightarrow> f x \\<sqsubseteq> f yb", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (SOME x. Y i = f x \\<and> P x) \\<sqsubseteq>\n  (SOME y. Y (Suc i) = f y \\<and> P y)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  chain (\\<lambda>i. SOME y. Y i = f y \\<and> P y)\n\ngoal (1 subgoal):\n 1. \\<exists>Y'.\n       chain Y' \\<and> (\\<forall>i. Y i = f (Y' i) \\<and> P (Y' i))", "moreover"], ["proof (state)\nthis:\n  chain (\\<lambda>i. SOME y. Y i = f y \\<and> P y)\n\ngoal (1 subgoal):\n 1. \\<exists>Y'.\n       chain Y' \\<and> (\\<forall>i. Y i = f (Y' i) \\<and> P (Y' i))", "from Yi"], ["proof (chain)\npicking this:\n  \\<forall>i. \\<exists>y. Y i = f y \\<and> P y", "have \"Y i = f (?Y' i) \\<and> P (?Y' i)\" for i"], ["proof (prove)\nusing this:\n  \\<forall>i. \\<exists>y. Y i = f y \\<and> P y\n\ngoal (1 subgoal):\n 1. Y i = f (SOME y. Y i = f y \\<and> P y) \\<and>\n    P (SOME y. Y i = f y \\<and> P y)", "by (metis (mono_tags, lifting) someI_ex)"], ["proof (state)\nthis:\n  Y ?i = f (SOME y. Y ?i = f y \\<and> P y) \\<and>\n  P (SOME y. Y ?i = f y \\<and> P y)\n\ngoal (1 subgoal):\n 1. \\<exists>Y'.\n       chain Y' \\<and> (\\<forall>i. Y i = f (Y' i) \\<and> P (Y' i))", "ultimately"], ["proof (chain)\npicking this:\n  chain (\\<lambda>i. SOME y. Y i = f y \\<and> P y)\n  Y ?i = f (SOME y. Y ?i = f y \\<and> P y) \\<and>\n  P (SOME y. Y ?i = f y \\<and> P y)", "show ?thesis"], ["proof (prove)\nusing this:\n  chain (\\<lambda>i. SOME y. Y i = f y \\<and> P y)\n  Y ?i = f (SOME y. Y ?i = f y \\<and> P y) \\<and>\n  P (SOME y. Y ?i = f y \\<and> P y)\n\ngoal (1 subgoal):\n 1. \\<exists>Y'.\n       chain Y' \\<and> (\\<forall>i. Y i = f (Y' i) \\<and> P (Y' i))", "by blast"], ["proof (state)\nthis:\n  \\<exists>Y'. chain Y' \\<and> (\\<forall>i. Y i = f (Y' i) \\<and> P (Y' i))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma adm_below_monic_exists:\n  \"\\<lbrakk> adm P; below_monic (f::'a::cpo \\<Rightarrow> 'b::cpo); cont f \\<rbrakk> \\<Longrightarrow> adm (\\<lambda>x. \\<exists>y. x = f y \\<and> P y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>adm P; below_monic f; cont f\\<rbrakk>\n    \\<Longrightarrow> adm (\\<lambda>x. \\<exists>y. x = f y \\<and> P y)", "apply (rule admI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>adm P; below_monic f; cont f; chain Y;\n        \\<forall>i. \\<exists>y. Y i = f y \\<and> P y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. (\\<Squnion>i. Y i) = f y \\<and> P y", "apply (drule below_monic_chain_inv)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>Y.\n       \\<lbrakk>adm P; below_monic f; cont f;\n        \\<forall>i. \\<exists>y. Y i = f y \\<and> P y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i.\n                            \\<exists>y. Y i = ?f2 Y y \\<and> ?P2 Y y\n 2. \\<And>Y.\n       \\<lbrakk>adm P; below_monic f; cont f;\n        \\<forall>i. \\<exists>y. Y i = f y \\<and> P y\\<rbrakk>\n       \\<Longrightarrow> below_monic (?f2 Y)\n 3. \\<And>Y.\n       \\<lbrakk>adm P; below_monic f; cont f;\n        \\<forall>i. \\<exists>y. Y i = f y \\<and> P y;\n        \\<exists>Y'.\n           chain Y' \\<and>\n           (\\<forall>i. Y i = ?f2 Y (Y' i) \\<and> ?P2 Y (Y' i))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. (\\<Squnion>i. Y i) = f y \\<and> P y", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>adm P; below_monic f; cont f;\n        \\<forall>i. \\<exists>y. Y i = f y \\<and> P y;\n        \\<exists>Y'.\n           chain Y' \\<and>\n           (\\<forall>i. Y i = f (Y' i) \\<and> P (Y' i))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. (\\<Squnion>i. Y i) = f y \\<and> P y", "apply (metis (full_types) admD cont2contlubE lub_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}