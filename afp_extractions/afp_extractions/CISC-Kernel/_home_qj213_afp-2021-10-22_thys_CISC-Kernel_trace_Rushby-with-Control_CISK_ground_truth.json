{"file_name": "/home/qj213/afp-2021-10-22/thys/CISC-Kernel/trace/Rushby-with-Control/CISK.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CISC-Kernel", "problem_names": ["lemma next_action_consistent: \nshows \"\\<forall> s t execs . vpeq (current s) s t \\<and> (\\<forall> d \\<in>  involved (next_action s execs) . vpeq d s t) \\<and> current s = current t  \\<longrightarrow> next_action s execs = next_action t execs\"", "lemma next_execs_consistent:\nshows \"\\<forall> s t execs . vpeq (current s) s t \\<and> (\\<forall> d \\<in> involved (next_action s execs) . vpeq d s t) \\<and> current s = current t \\<longrightarrow> fst (snd (CISK_control s (current s) (execs (current s)))) = fst (snd (CISK_control t (current s) (execs (current s))))\"", "lemma next_state_consistent:\nshows \"\\<forall> s t u execs . vpeq (current s) s t \\<and> vpeq u s t \\<and> current s = current t \\<longrightarrow> vpeq u (next_state s execs) (next_state t execs)\"", "lemma current_next_state:\nshows \"\\<forall> s execs . current (next_state s execs) = current s\"", "lemma locally_respects_next_state:\nshows \"\\<forall> s u execs. \\<not>ifp (current s) u \\<longrightarrow> vpeq u s (next_state s execs)\"", "lemma CISK_control_spec:\nshows \"\\<forall>s d aseqs.\n       case CISK_control s d aseqs of\n       (a, aseqs', s') \\<Rightarrow>\n         thread_empty aseqs \\<and> (a, aseqs') = (None, []) \\<or>\n         aseqs \\<noteq> [] \\<and> hd aseqs \\<noteq> [] \\<and> \\<not> aborting s' d (the a) \\<and> \\<not> waiting s' d (the a) \\<and> (a, aseqs') = (Some (hd (hd aseqs)), tl (hd aseqs) # tl aseqs) \\<or>\n         aseqs \\<noteq> [] \\<and> hd aseqs \\<noteq> [] \\<and> waiting s' d (the a) \\<and> (a, aseqs', s') = (Some (hd (hd aseqs)), aseqs, s) \\<or> (a, aseqs') = (None, tl aseqs)\"", "lemma next_action_after_cswitch:\nshows \"\\<forall> s n d aseqs . fst (CISK_control (cswitch n s) d aseqs) = fst (CISK_control s d aseqs)\"", "lemma next_action_after_next_state:\nshows \"\\<forall> s execs d . current s \\<noteq> d \\<longrightarrow> fst (CISK_control (next_state s execs) d (execs d)) = None \\<or> fst (CISK_control (next_state s execs) d (execs d)) = fst (CISK_control s d (execs d))\"", "lemma next_action_after_step:\nshows \"\\<forall> s a d aseqs . current s \\<noteq> d \\<longrightarrow> fst (CISK_control (step s a) d aseqs) = fst (CISK_control s d aseqs)\"", "lemma next_state_precondition:\nshows \"\\<forall>s d a execs. AS_precondition s d a \\<longrightarrow> AS_precondition (next_state s execs) d a\"", "lemma next_state_invariant:\nshows \"\\<forall>s execs. invariant s \\<longrightarrow> invariant (next_state s execs)\"", "lemma next_action_from_execs:\nshows \"\\<forall> s execs . next_action s execs \\<rightharpoonup> (\\<lambda> a . a \\<in> actions_in_execution (execs (current s)))\"", "lemma next_execs_subset:\nshows \"\\<forall>s execs u . actions_in_execution (next_execs s execs u) \\<subseteq> actions_in_execution (execs u)\"", "theorem unwinding_implies_isecure_CISK:\nshows isecure"], "translations": [["", "lemma next_action_consistent: \nshows \"\\<forall> s t execs . vpeq (current s) s t \\<and> (\\<forall> d \\<in>  involved (next_action s execs) . vpeq d s t) \\<and> current s = current t  \\<longrightarrow> next_action s execs = next_action t execs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       next_action s execs = next_action t execs", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       next_action s execs = next_action t execs", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       next_action s execs = next_action t execs", "fix s t execs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       next_action s execs = next_action t execs", "assume vpeq: \"vpeq (current s) s t\""], ["proof (state)\nthis:\n  vpeq (current s) s t\n\ngoal (1 subgoal):\n 1. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       next_action s execs = next_action t execs", "assume vpeq_involved: \"\\<forall> d \\<in>  involved (next_action s execs) . vpeq d s t\""], ["proof (state)\nthis:\n  \\<forall>d\\<in>involved (next_action s execs). vpeq d s t\n\ngoal (1 subgoal):\n 1. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       next_action s execs = next_action t execs", "assume current_s_t: \"current s = current t\""], ["proof (state)\nthis:\n  current s = current t\n\ngoal (1 subgoal):\n 1. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       next_action s execs = next_action t execs", "from aborting_consistent current_s_t vpeq"], ["proof (chain)\npicking this:\n  \\<forall>s t u. vpeq u s t \\<longrightarrow> aborting s u = aborting t u\n  current s = current t\n  vpeq (current s) s t", "have \"aborting t (current s) = aborting s (current s)\""], ["proof (prove)\nusing this:\n  \\<forall>s t u. vpeq u s t \\<longrightarrow> aborting s u = aborting t u\n  current s = current t\n  vpeq (current s) s t\n\ngoal (1 subgoal):\n 1. aborting t (current s) = aborting s (current s)", "by auto"], ["proof (state)\nthis:\n  aborting t (current s) = aborting s (current s)\n\ngoal (1 subgoal):\n 1. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       next_action s execs = next_action t execs", "from current_s_t this waiting_consistent vpeq_involved"], ["proof (chain)\npicking this:\n  current s = current t\n  aborting t (current s) = aborting s (current s)\n  \\<forall>s t u a.\n     vpeq (current s) s t \\<and>\n     (\\<forall>d\\<in>kinvolved a. vpeq d s t) \\<and>\n     vpeq u s t \\<longrightarrow>\n     waiting s u a = waiting t u a\n  \\<forall>d\\<in>involved (next_action s execs). vpeq d s t", "have \"next_action s execs = next_action t execs\""], ["proof (prove)\nusing this:\n  current s = current t\n  aborting t (current s) = aborting s (current s)\n  \\<forall>s t u a.\n     vpeq (current s) s t \\<and>\n     (\\<forall>d\\<in>kinvolved a. vpeq d s t) \\<and>\n     vpeq u s t \\<longrightarrow>\n     waiting s u a = waiting t u a\n  \\<forall>d\\<in>involved (next_action s execs). vpeq d s t\n\ngoal (1 subgoal):\n 1. next_action s execs = next_action t execs", "unfolding Kernel.next_action_def"], ["proof (prove)\nusing this:\n  current s = current t\n  aborting t (current s) = aborting s (current s)\n  \\<forall>s t u a.\n     vpeq (current s) s t \\<and>\n     (\\<forall>d\\<in>kinvolved a. vpeq d s t) \\<and>\n     vpeq u s t \\<longrightarrow>\n     waiting s u a = waiting t u a\n  \\<forall>d\\<in>involved\n                  (fst (CISK_control s (current s) (execs (current s)))).\n     vpeq d s t\n\ngoal (1 subgoal):\n 1. fst (CISK_control s (current s) (execs (current s))) =\n    fst (CISK_control t (current t) (execs (current t)))", "by(cases \"(s,(current s),execs (current s))\" rule: CISK_control.cases,auto)"], ["proof (state)\nthis:\n  next_action s execs = next_action t execs\n\ngoal (1 subgoal):\n 1. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       next_action s execs = next_action t execs", "}"], ["proof (state)\nthis:\n  \\<lbrakk>vpeq (current ?s2) ?s2 ?t2;\n   \\<forall>d\\<in>involved (next_action ?s2 ?execs2). vpeq d ?s2 ?t2;\n   current ?s2 = current ?t2\\<rbrakk>\n  \\<Longrightarrow> next_action ?s2 ?execs2 = next_action ?t2 ?execs2\n\ngoal (1 subgoal):\n 1. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       next_action s execs = next_action t execs", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>vpeq (current ?s2) ?s2 ?t2;\n   \\<forall>d\\<in>involved (next_action ?s2 ?execs2). vpeq d ?s2 ?t2;\n   current ?s2 = current ?t2\\<rbrakk>\n  \\<Longrightarrow> next_action ?s2 ?execs2 = next_action ?t2 ?execs2\n\ngoal (1 subgoal):\n 1. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       next_action s execs = next_action t execs", "by auto"], ["proof (state)\nthis:\n  \\<forall>s t execs.\n     vpeq (current s) s t \\<and>\n     (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n     current s = current t \\<longrightarrow>\n     next_action s execs = next_action t execs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma next_execs_consistent:\nshows \"\\<forall> s t execs . vpeq (current s) s t \\<and> (\\<forall> d \\<in> involved (next_action s execs) . vpeq d s t) \\<and> current s = current t \\<longrightarrow> fst (snd (CISK_control s (current s) (execs (current s)))) = fst (snd (CISK_control t (current s) (execs (current s))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       fst (snd (CISK_control s (current s) (execs (current s)))) =\n       fst (snd (CISK_control t (current s) (execs (current s))))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       fst (snd (CISK_control s (current s) (execs (current s)))) =\n       fst (snd (CISK_control t (current s) (execs (current s))))", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       fst (snd (CISK_control s (current s) (execs (current s)))) =\n       fst (snd (CISK_control t (current s) (execs (current s))))", "fix s t execs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       fst (snd (CISK_control s (current s) (execs (current s)))) =\n       fst (snd (CISK_control t (current s) (execs (current s))))", "assume vpeq: \"vpeq (current s) s t\""], ["proof (state)\nthis:\n  vpeq (current s) s t\n\ngoal (1 subgoal):\n 1. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       fst (snd (CISK_control s (current s) (execs (current s)))) =\n       fst (snd (CISK_control t (current s) (execs (current s))))", "assume vpeq_involved: \"\\<forall> d \\<in> involved (next_action s execs) . vpeq d s t\""], ["proof (state)\nthis:\n  \\<forall>d\\<in>involved (next_action s execs). vpeq d s t\n\ngoal (1 subgoal):\n 1. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       fst (snd (CISK_control s (current s) (execs (current s)))) =\n       fst (snd (CISK_control t (current s) (execs (current s))))", "assume current_s_t: \"current s = current t\""], ["proof (state)\nthis:\n  current s = current t\n\ngoal (1 subgoal):\n 1. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       fst (snd (CISK_control s (current s) (execs (current s)))) =\n       fst (snd (CISK_control t (current s) (execs (current s))))", "from aborting_consistent current_s_t vpeq"], ["proof (chain)\npicking this:\n  \\<forall>s t u. vpeq u s t \\<longrightarrow> aborting s u = aborting t u\n  current s = current t\n  vpeq (current s) s t", "have 1: \"aborting t (current s) = aborting s (current s)\""], ["proof (prove)\nusing this:\n  \\<forall>s t u. vpeq u s t \\<longrightarrow> aborting s u = aborting t u\n  current s = current t\n  vpeq (current s) s t\n\ngoal (1 subgoal):\n 1. aborting t (current s) = aborting s (current s)", "by auto"], ["proof (state)\nthis:\n  aborting t (current s) = aborting s (current s)\n\ngoal (1 subgoal):\n 1. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       fst (snd (CISK_control s (current s) (execs (current s)))) =\n       fst (snd (CISK_control t (current s) (execs (current s))))", "from 1 vpeq current_s_t vpeq_involved waiting_consistent[THEN spec,THEN spec,THEN spec,THEN spec,where x3=s and x2=t and x1=\"current s\" and x=\"the (next_action s execs)\"]"], ["proof (chain)\npicking this:\n  aborting t (current s) = aborting s (current s)\n  vpeq (current s) s t\n  current s = current t\n  \\<forall>d\\<in>involved (next_action s execs). vpeq d s t\n  vpeq (current s) s t \\<and>\n  (\\<forall>d\\<in>kinvolved (the (next_action s execs)). vpeq d s t) \\<and>\n  vpeq (current s) s t \\<longrightarrow>\n  waiting s (current s) (the (next_action s execs)) =\n  waiting t (current s) (the (next_action s execs))", "have \"fst (snd (CISK_control s (current s) (execs (current s)))) = fst (snd (CISK_control t (current s) (execs (current s))))\""], ["proof (prove)\nusing this:\n  aborting t (current s) = aborting s (current s)\n  vpeq (current s) s t\n  current s = current t\n  \\<forall>d\\<in>involved (next_action s execs). vpeq d s t\n  vpeq (current s) s t \\<and>\n  (\\<forall>d\\<in>kinvolved (the (next_action s execs)). vpeq d s t) \\<and>\n  vpeq (current s) s t \\<longrightarrow>\n  waiting s (current s) (the (next_action s execs)) =\n  waiting t (current s) (the (next_action s execs))\n\ngoal (1 subgoal):\n 1. fst (snd (CISK_control s (current s) (execs (current s)))) =\n    fst (snd (CISK_control t (current s) (execs (current s))))", "unfolding Kernel.next_action_def Kernel.involved_def"], ["proof (prove)\nusing this:\n  aborting t (current s) = aborting s (current s)\n  vpeq (current s) s t\n  current s = current t\n  \\<forall>d\\<in>case fst (CISK_control s (current s)\n                            (execs (current s))) of\n                 None \\<Rightarrow> {} | Some a \\<Rightarrow> kinvolved a.\n     vpeq d s t\n  vpeq (current s) s t \\<and>\n  (\\<forall>d\\<in>kinvolved\n                   (the (fst (CISK_control s (current s)\n                               (execs (current s))))).\n      vpeq d s t) \\<and>\n  vpeq (current s) s t \\<longrightarrow>\n  waiting s (current s)\n   (the (fst (CISK_control s (current s) (execs (current s))))) =\n  waiting t (current s)\n   (the (fst (CISK_control s (current s) (execs (current s)))))\n\ngoal (1 subgoal):\n 1. fst (snd (CISK_control s (current s) (execs (current s)))) =\n    fst (snd (CISK_control t (current s) (execs (current s))))", "by(cases \"(s,(current s),execs (current s))\" rule: CISK_control.cases,auto split: if_split_asm)"], ["proof (state)\nthis:\n  fst (snd (CISK_control s (current s) (execs (current s)))) =\n  fst (snd (CISK_control t (current s) (execs (current s))))\n\ngoal (1 subgoal):\n 1. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       fst (snd (CISK_control s (current s) (execs (current s)))) =\n       fst (snd (CISK_control t (current s) (execs (current s))))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>vpeq (current ?s2) ?s2 ?t2;\n   \\<forall>d\\<in>involved (next_action ?s2 ?execs2). vpeq d ?s2 ?t2;\n   current ?s2 = current ?t2\\<rbrakk>\n  \\<Longrightarrow> fst (snd (CISK_control ?s2 (current ?s2)\n                               (?execs2 (current ?s2)))) =\n                    fst (snd (CISK_control ?t2 (current ?s2)\n                               (?execs2 (current ?s2))))\n\ngoal (1 subgoal):\n 1. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       fst (snd (CISK_control s (current s) (execs (current s)))) =\n       fst (snd (CISK_control t (current s) (execs (current s))))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>vpeq (current ?s2) ?s2 ?t2;\n   \\<forall>d\\<in>involved (next_action ?s2 ?execs2). vpeq d ?s2 ?t2;\n   current ?s2 = current ?t2\\<rbrakk>\n  \\<Longrightarrow> fst (snd (CISK_control ?s2 (current ?s2)\n                               (?execs2 (current ?s2)))) =\n                    fst (snd (CISK_control ?t2 (current ?s2)\n                               (?execs2 (current ?s2))))\n\ngoal (1 subgoal):\n 1. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       fst (snd (CISK_control s (current s) (execs (current s)))) =\n       fst (snd (CISK_control t (current s) (execs (current s))))", "by auto"], ["proof (state)\nthis:\n  \\<forall>s t execs.\n     vpeq (current s) s t \\<and>\n     (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n     current s = current t \\<longrightarrow>\n     fst (snd (CISK_control s (current s) (execs (current s)))) =\n     fst (snd (CISK_control t (current s) (execs (current s))))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma next_state_consistent:\nshows \"\\<forall> s t u execs . vpeq (current s) s t \\<and> vpeq u s t \\<and> current s = current t \\<longrightarrow> vpeq u (next_state s execs) (next_state t execs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s t u execs.\n       vpeq (current s) s t \\<and>\n       vpeq u s t \\<and> current s = current t \\<longrightarrow>\n       vpeq u (next_state s execs) (next_state t execs)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s t u execs.\n       vpeq (current s) s t \\<and>\n       vpeq u s t \\<and> current s = current t \\<longrightarrow>\n       vpeq u (next_state s execs) (next_state t execs)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s t u execs.\n       vpeq (current s) s t \\<and>\n       vpeq u s t \\<and> current s = current t \\<longrightarrow>\n       vpeq u (next_state s execs) (next_state t execs)", "fix s t u execs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s t u execs.\n       vpeq (current s) s t \\<and>\n       vpeq u s t \\<and> current s = current t \\<longrightarrow>\n       vpeq u (next_state s execs) (next_state t execs)", "assume vpeq_s_t: \"vpeq (current s) s t \\<and> vpeq u s t\""], ["proof (state)\nthis:\n  vpeq (current s) s t \\<and> vpeq u s t\n\ngoal (1 subgoal):\n 1. \\<forall>s t u execs.\n       vpeq (current s) s t \\<and>\n       vpeq u s t \\<and> current s = current t \\<longrightarrow>\n       vpeq u (next_state s execs) (next_state t execs)", "assume current_s_t: \"current s = current t\""], ["proof (state)\nthis:\n  current s = current t\n\ngoal (1 subgoal):\n 1. \\<forall>s t u execs.\n       vpeq (current s) s t \\<and>\n       vpeq u s t \\<and> current s = current t \\<longrightarrow>\n       vpeq u (next_state s execs) (next_state t execs)", "from vpeq_s_t current_s_t"], ["proof (chain)\npicking this:\n  vpeq (current s) s t \\<and> vpeq u s t\n  current s = current t", "have \"vpeq u (next_state s execs) (next_state t execs)\""], ["proof (prove)\nusing this:\n  vpeq (current s) s t \\<and> vpeq u s t\n  current s = current t\n\ngoal (1 subgoal):\n 1. vpeq u (next_state s execs) (next_state t execs)", "unfolding Kernel.next_state_def"], ["proof (prove)\nusing this:\n  vpeq (current s) s t \\<and> vpeq u s t\n  current s = current t\n\ngoal (1 subgoal):\n 1. vpeq u (snd (snd (CISK_control s (current s) (execs (current s)))))\n     (snd (snd (CISK_control t (current t) (execs (current t)))))", "using aborting_consistent set_error_consistent"], ["proof (prove)\nusing this:\n  vpeq (current s) s t \\<and> vpeq u s t\n  current s = current t\n  \\<forall>s t u. vpeq u s t \\<longrightarrow> aborting s u = aborting t u\n  \\<forall>s t u a.\n     vpeq u s t \\<longrightarrow>\n     vpeq u (set_error_code s a) (set_error_code t a)\n\ngoal (1 subgoal):\n 1. vpeq u (snd (snd (CISK_control s (current s) (execs (current s)))))\n     (snd (snd (CISK_control t (current t) (execs (current t)))))", "by(cases \"(s,(current s),execs (current s))\" rule: CISK_control.cases,auto)"], ["proof (state)\nthis:\n  vpeq u (next_state s execs) (next_state t execs)\n\ngoal (1 subgoal):\n 1. \\<forall>s t u execs.\n       vpeq (current s) s t \\<and>\n       vpeq u s t \\<and> current s = current t \\<longrightarrow>\n       vpeq u (next_state s execs) (next_state t execs)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>vpeq (current ?s2) ?s2 ?t2 \\<and> vpeq ?u2 ?s2 ?t2;\n   current ?s2 = current ?t2\\<rbrakk>\n  \\<Longrightarrow> vpeq ?u2 (next_state ?s2 ?execs2)\n                     (next_state ?t2 ?execs2)\n\ngoal (1 subgoal):\n 1. \\<forall>s t u execs.\n       vpeq (current s) s t \\<and>\n       vpeq u s t \\<and> current s = current t \\<longrightarrow>\n       vpeq u (next_state s execs) (next_state t execs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>vpeq (current ?s2) ?s2 ?t2 \\<and> vpeq ?u2 ?s2 ?t2;\n   current ?s2 = current ?t2\\<rbrakk>\n  \\<Longrightarrow> vpeq ?u2 (next_state ?s2 ?execs2)\n                     (next_state ?t2 ?execs2)\n\ngoal (1 subgoal):\n 1. \\<forall>s t u execs.\n       vpeq (current s) s t \\<and>\n       vpeq u s t \\<and> current s = current t \\<longrightarrow>\n       vpeq u (next_state s execs) (next_state t execs)", "by auto"], ["proof (state)\nthis:\n  \\<forall>s t u execs.\n     vpeq (current s) s t \\<and>\n     vpeq u s t \\<and> current s = current t \\<longrightarrow>\n     vpeq u (next_state s execs) (next_state t execs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma current_next_state:\nshows \"\\<forall> s execs . current (next_state s execs) = current s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s execs. current (next_state s execs) = current s", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s execs. current (next_state s execs) = current s", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s execs. current (next_state s execs) = current s", "fix s execs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s execs. current (next_state s execs) = current s", "have \"current (next_state s execs) = current s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. current (next_state s execs) = current s", "unfolding Kernel.next_state_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. current (snd (snd (CISK_control s (current s) (execs (current s))))) =\n    current s", "using current_set_error_code"], ["proof (prove)\nusing this:\n  \\<forall>s a. current (set_error_code s a) = current s\n\ngoal (1 subgoal):\n 1. current (snd (snd (CISK_control s (current s) (execs (current s))))) =\n    current s", "by(cases \"(s,(current s),execs (current s))\" rule: CISK_control.cases,auto)"], ["proof (state)\nthis:\n  current (next_state s execs) = current s\n\ngoal (1 subgoal):\n 1. \\<forall>s execs. current (next_state s execs) = current s", "}"], ["proof (state)\nthis:\n  current (next_state ?s2 ?execs2) = current ?s2\n\ngoal (1 subgoal):\n 1. \\<forall>s execs. current (next_state s execs) = current s", "thus ?thesis"], ["proof (prove)\nusing this:\n  current (next_state ?s2 ?execs2) = current ?s2\n\ngoal (1 subgoal):\n 1. \\<forall>s execs. current (next_state s execs) = current s", "by auto"], ["proof (state)\nthis:\n  \\<forall>s execs. current (next_state s execs) = current s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma locally_respects_next_state:\nshows \"\\<forall> s u execs. \\<not>ifp (current s) u \\<longrightarrow> vpeq u s (next_state s execs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s u execs.\n       \\<not> ifp (current s) u \\<longrightarrow>\n       vpeq u s (next_state s execs)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s u execs.\n       \\<not> ifp (current s) u \\<longrightarrow>\n       vpeq u s (next_state s execs)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s u execs.\n       \\<not> ifp (current s) u \\<longrightarrow>\n       vpeq u s (next_state s execs)", "fix s u execs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s u execs.\n       \\<not> ifp (current s) u \\<longrightarrow>\n       vpeq u s (next_state s execs)", "assume \"\\<not>ifp (current s) u\""], ["proof (state)\nthis:\n  \\<not> ifp (current s) u\n\ngoal (1 subgoal):\n 1. \\<forall>s u execs.\n       \\<not> ifp (current s) u \\<longrightarrow>\n       vpeq u s (next_state s execs)", "hence \"vpeq u s (next_state s execs)\""], ["proof (prove)\nusing this:\n  \\<not> ifp (current s) u\n\ngoal (1 subgoal):\n 1. vpeq u s (next_state s execs)", "unfolding Kernel.next_state_def"], ["proof (prove)\nusing this:\n  \\<not> ifp (current s) u\n\ngoal (1 subgoal):\n 1. vpeq u s (snd (snd (CISK_control s (current s) (execs (current s)))))", "using vpeq_reflexive set_error_locally_respects"], ["proof (prove)\nusing this:\n  \\<not> ifp (current s) u\n  \\<forall>a u. vpeq u a a\n  \\<forall>s u a.\n     \\<not> ifp (current s) u \\<longrightarrow>\n     vpeq u s (set_error_code s a)\n\ngoal (1 subgoal):\n 1. vpeq u s (snd (snd (CISK_control s (current s) (execs (current s)))))", "by(cases \"(s,(current s),execs (current s))\" rule: CISK_control.cases,auto)"], ["proof (state)\nthis:\n  vpeq u s (next_state s execs)\n\ngoal (1 subgoal):\n 1. \\<forall>s u execs.\n       \\<not> ifp (current s) u \\<longrightarrow>\n       vpeq u s (next_state s execs)", "}"], ["proof (state)\nthis:\n  \\<not> ifp (current ?s2) ?u2 \\<Longrightarrow>\n  vpeq ?u2 ?s2 (next_state ?s2 ?execs2)\n\ngoal (1 subgoal):\n 1. \\<forall>s u execs.\n       \\<not> ifp (current s) u \\<longrightarrow>\n       vpeq u s (next_state s execs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> ifp (current ?s2) ?u2 \\<Longrightarrow>\n  vpeq ?u2 ?s2 (next_state ?s2 ?execs2)\n\ngoal (1 subgoal):\n 1. \\<forall>s u execs.\n       \\<not> ifp (current s) u \\<longrightarrow>\n       vpeq u s (next_state s execs)", "by auto"], ["proof (state)\nthis:\n  \\<forall>s u execs.\n     \\<not> ifp (current s) u \\<longrightarrow>\n     vpeq u s (next_state s execs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma CISK_control_spec:\nshows \"\\<forall>s d aseqs.\n       case CISK_control s d aseqs of\n       (a, aseqs', s') \\<Rightarrow>\n         thread_empty aseqs \\<and> (a, aseqs') = (None, []) \\<or>\n         aseqs \\<noteq> [] \\<and> hd aseqs \\<noteq> [] \\<and> \\<not> aborting s' d (the a) \\<and> \\<not> waiting s' d (the a) \\<and> (a, aseqs') = (Some (hd (hd aseqs)), tl (hd aseqs) # tl aseqs) \\<or>\n         aseqs \\<noteq> [] \\<and> hd aseqs \\<noteq> [] \\<and> waiting s' d (the a) \\<and> (a, aseqs', s') = (Some (hd (hd aseqs)), aseqs, s) \\<or> (a, aseqs') = (None, tl aseqs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s d aseqs.\n       case CISK_control s d aseqs of\n       (a, aseqs', s') \\<Rightarrow>\n         thread_empty aseqs \\<and> (a, aseqs') = (None, []) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         \\<not> aborting s' d (the a) \\<and>\n         \\<not> waiting s' d (the a) \\<and>\n         (a, aseqs') =\n         (Some (hd (hd aseqs)), tl (hd aseqs) # tl aseqs) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         waiting s' d (the a) \\<and>\n         (a, aseqs', s') = (Some (hd (hd aseqs)), aseqs, s) \\<or>\n         (a, aseqs') = (None, tl aseqs)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s d aseqs.\n       case CISK_control s d aseqs of\n       (a, aseqs', s') \\<Rightarrow>\n         thread_empty aseqs \\<and> (a, aseqs') = (None, []) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         \\<not> aborting s' d (the a) \\<and>\n         \\<not> waiting s' d (the a) \\<and>\n         (a, aseqs') =\n         (Some (hd (hd aseqs)), tl (hd aseqs) # tl aseqs) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         waiting s' d (the a) \\<and>\n         (a, aseqs', s') = (Some (hd (hd aseqs)), aseqs, s) \\<or>\n         (a, aseqs') = (None, tl aseqs)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s d aseqs.\n       case CISK_control s d aseqs of\n       (a, aseqs', s') \\<Rightarrow>\n         thread_empty aseqs \\<and> (a, aseqs') = (None, []) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         \\<not> aborting s' d (the a) \\<and>\n         \\<not> waiting s' d (the a) \\<and>\n         (a, aseqs') =\n         (Some (hd (hd aseqs)), tl (hd aseqs) # tl aseqs) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         waiting s' d (the a) \\<and>\n         (a, aseqs', s') = (Some (hd (hd aseqs)), aseqs, s) \\<or>\n         (a, aseqs') = (None, tl aseqs)", "fix s d aseqs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s d aseqs.\n       case CISK_control s d aseqs of\n       (a, aseqs', s') \\<Rightarrow>\n         thread_empty aseqs \\<and> (a, aseqs') = (None, []) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         \\<not> aborting s' d (the a) \\<and>\n         \\<not> waiting s' d (the a) \\<and>\n         (a, aseqs') =\n         (Some (hd (hd aseqs)), tl (hd aseqs) # tl aseqs) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         waiting s' d (the a) \\<and>\n         (a, aseqs', s') = (Some (hd (hd aseqs)), aseqs, s) \\<or>\n         (a, aseqs') = (None, tl aseqs)", "have \"case CISK_control s d aseqs of\n       (a, aseqs', s') \\<Rightarrow>\n         thread_empty aseqs \\<and> (a, aseqs') = (None, []) \\<or>\n         aseqs \\<noteq> [] \\<and> hd aseqs \\<noteq> [] \\<and> \\<not> aborting s' d (the a) \\<and> \\<not> waiting s' d (the a) \\<and> (a, aseqs') = (Some (hd (hd aseqs)), tl (hd aseqs) # tl aseqs) \\<or>\n         aseqs \\<noteq> [] \\<and> hd aseqs \\<noteq> [] \\<and> waiting s' d (the a) \\<and> (a, aseqs', s') = (Some (hd (hd aseqs)), aseqs, s) \\<or> (a, aseqs') = (None, tl aseqs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. case CISK_control s d aseqs of\n    (a, aseqs', s') \\<Rightarrow>\n      thread_empty aseqs \\<and> (a, aseqs') = (None, []) \\<or>\n      aseqs \\<noteq> [] \\<and>\n      hd aseqs \\<noteq> [] \\<and>\n      \\<not> aborting s' d (the a) \\<and>\n      \\<not> waiting s' d (the a) \\<and>\n      (a, aseqs') = (Some (hd (hd aseqs)), tl (hd aseqs) # tl aseqs) \\<or>\n      aseqs \\<noteq> [] \\<and>\n      hd aseqs \\<noteq> [] \\<and>\n      waiting s' d (the a) \\<and>\n      (a, aseqs', s') = (Some (hd (hd aseqs)), aseqs, s) \\<or>\n      (a, aseqs') = (None, tl aseqs)", "by(cases \"(s,d,aseqs)\" rule: CISK_control.cases,auto)"], ["proof (state)\nthis:\n  case CISK_control s d aseqs of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty aseqs \\<and> (a, aseqs') = (None, []) \\<or>\n    aseqs \\<noteq> [] \\<and>\n    hd aseqs \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') = (Some (hd (hd aseqs)), tl (hd aseqs) # tl aseqs) \\<or>\n    aseqs \\<noteq> [] \\<and>\n    hd aseqs \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') = (Some (hd (hd aseqs)), aseqs, s) \\<or>\n    (a, aseqs') = (None, tl aseqs)\n\ngoal (1 subgoal):\n 1. \\<forall>s d aseqs.\n       case CISK_control s d aseqs of\n       (a, aseqs', s') \\<Rightarrow>\n         thread_empty aseqs \\<and> (a, aseqs') = (None, []) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         \\<not> aborting s' d (the a) \\<and>\n         \\<not> waiting s' d (the a) \\<and>\n         (a, aseqs') =\n         (Some (hd (hd aseqs)), tl (hd aseqs) # tl aseqs) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         waiting s' d (the a) \\<and>\n         (a, aseqs', s') = (Some (hd (hd aseqs)), aseqs, s) \\<or>\n         (a, aseqs') = (None, tl aseqs)", "}"], ["proof (state)\nthis:\n  case CISK_control ?s2 ?d2 ?aseqs2 of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty ?aseqs2 \\<and> (a, aseqs') = (None, []) \\<or>\n    ?aseqs2 \\<noteq> [] \\<and>\n    hd ?aseqs2 \\<noteq> [] \\<and>\n    \\<not> aborting s' ?d2 (the a) \\<and>\n    \\<not> waiting s' ?d2 (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd ?aseqs2)), tl (hd ?aseqs2) # tl ?aseqs2) \\<or>\n    ?aseqs2 \\<noteq> [] \\<and>\n    hd ?aseqs2 \\<noteq> [] \\<and>\n    waiting s' ?d2 (the a) \\<and>\n    (a, aseqs', s') = (Some (hd (hd ?aseqs2)), ?aseqs2, ?s2) \\<or>\n    (a, aseqs') = (None, tl ?aseqs2)\n\ngoal (1 subgoal):\n 1. \\<forall>s d aseqs.\n       case CISK_control s d aseqs of\n       (a, aseqs', s') \\<Rightarrow>\n         thread_empty aseqs \\<and> (a, aseqs') = (None, []) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         \\<not> aborting s' d (the a) \\<and>\n         \\<not> waiting s' d (the a) \\<and>\n         (a, aseqs') =\n         (Some (hd (hd aseqs)), tl (hd aseqs) # tl aseqs) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         waiting s' d (the a) \\<and>\n         (a, aseqs', s') = (Some (hd (hd aseqs)), aseqs, s) \\<or>\n         (a, aseqs') = (None, tl aseqs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  case CISK_control ?s2 ?d2 ?aseqs2 of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty ?aseqs2 \\<and> (a, aseqs') = (None, []) \\<or>\n    ?aseqs2 \\<noteq> [] \\<and>\n    hd ?aseqs2 \\<noteq> [] \\<and>\n    \\<not> aborting s' ?d2 (the a) \\<and>\n    \\<not> waiting s' ?d2 (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd ?aseqs2)), tl (hd ?aseqs2) # tl ?aseqs2) \\<or>\n    ?aseqs2 \\<noteq> [] \\<and>\n    hd ?aseqs2 \\<noteq> [] \\<and>\n    waiting s' ?d2 (the a) \\<and>\n    (a, aseqs', s') = (Some (hd (hd ?aseqs2)), ?aseqs2, ?s2) \\<or>\n    (a, aseqs') = (None, tl ?aseqs2)\n\ngoal (1 subgoal):\n 1. \\<forall>s d aseqs.\n       case CISK_control s d aseqs of\n       (a, aseqs', s') \\<Rightarrow>\n         thread_empty aseqs \\<and> (a, aseqs') = (None, []) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         \\<not> aborting s' d (the a) \\<and>\n         \\<not> waiting s' d (the a) \\<and>\n         (a, aseqs') =\n         (Some (hd (hd aseqs)), tl (hd aseqs) # tl aseqs) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         waiting s' d (the a) \\<and>\n         (a, aseqs', s') = (Some (hd (hd aseqs)), aseqs, s) \\<or>\n         (a, aseqs') = (None, tl aseqs)", "by auto"], ["proof (state)\nthis:\n  \\<forall>s d aseqs.\n     case CISK_control s d aseqs of\n     (a, aseqs', s') \\<Rightarrow>\n       thread_empty aseqs \\<and> (a, aseqs') = (None, []) \\<or>\n       aseqs \\<noteq> [] \\<and>\n       hd aseqs \\<noteq> [] \\<and>\n       \\<not> aborting s' d (the a) \\<and>\n       \\<not> waiting s' d (the a) \\<and>\n       (a, aseqs') = (Some (hd (hd aseqs)), tl (hd aseqs) # tl aseqs) \\<or>\n       aseqs \\<noteq> [] \\<and>\n       hd aseqs \\<noteq> [] \\<and>\n       waiting s' d (the a) \\<and>\n       (a, aseqs', s') = (Some (hd (hd aseqs)), aseqs, s) \\<or>\n       (a, aseqs') = (None, tl aseqs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma next_action_after_cswitch:\nshows \"\\<forall> s n d aseqs . fst (CISK_control (cswitch n s) d aseqs) = fst (CISK_control s d aseqs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s n d aseqs.\n       fst (CISK_control (cswitch n s) d aseqs) =\n       fst (CISK_control s d aseqs)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s n d aseqs.\n       fst (CISK_control (cswitch n s) d aseqs) =\n       fst (CISK_control s d aseqs)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s n d aseqs.\n       fst (CISK_control (cswitch n s) d aseqs) =\n       fst (CISK_control s d aseqs)", "fix s n d aseqs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s n d aseqs.\n       fst (CISK_control (cswitch n s) d aseqs) =\n       fst (CISK_control s d aseqs)", "have \"fst (CISK_control (cswitch n s) d aseqs) = fst (CISK_control s d aseqs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (CISK_control (cswitch n s) d aseqs) = fst (CISK_control s d aseqs)", "using aborting_switch_independent waiting_switch_independent"], ["proof (prove)\nusing this:\n  \\<forall>n s. aborting (cswitch n s) = aborting s\n  \\<forall>n s. waiting (cswitch n s) = waiting s\n\ngoal (1 subgoal):\n 1. fst (CISK_control (cswitch n s) d aseqs) = fst (CISK_control s d aseqs)", "by(cases \"(s,d,aseqs)\" rule: CISK_control.cases,auto)"], ["proof (state)\nthis:\n  fst (CISK_control (cswitch n s) d aseqs) = fst (CISK_control s d aseqs)\n\ngoal (1 subgoal):\n 1. \\<forall>s n d aseqs.\n       fst (CISK_control (cswitch n s) d aseqs) =\n       fst (CISK_control s d aseqs)", "}"], ["proof (state)\nthis:\n  fst (CISK_control (cswitch ?n2 ?s2) ?d2 ?aseqs2) =\n  fst (CISK_control ?s2 ?d2 ?aseqs2)\n\ngoal (1 subgoal):\n 1. \\<forall>s n d aseqs.\n       fst (CISK_control (cswitch n s) d aseqs) =\n       fst (CISK_control s d aseqs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  fst (CISK_control (cswitch ?n2 ?s2) ?d2 ?aseqs2) =\n  fst (CISK_control ?s2 ?d2 ?aseqs2)\n\ngoal (1 subgoal):\n 1. \\<forall>s n d aseqs.\n       fst (CISK_control (cswitch n s) d aseqs) =\n       fst (CISK_control s d aseqs)", "by auto"], ["proof (state)\nthis:\n  \\<forall>s n d aseqs.\n     fst (CISK_control (cswitch n s) d aseqs) = fst (CISK_control s d aseqs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma next_action_after_next_state:\nshows \"\\<forall> s execs d . current s \\<noteq> d \\<longrightarrow> fst (CISK_control (next_state s execs) d (execs d)) = None \\<or> fst (CISK_control (next_state s execs) d (execs d)) = fst (CISK_control s d (execs d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s execs d.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (next_state s execs) d (execs d)) = None \\<or>\n       fst (CISK_control (next_state s execs) d (execs d)) =\n       fst (CISK_control s d (execs d))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s execs d.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (next_state s execs) d (execs d)) = None \\<or>\n       fst (CISK_control (next_state s execs) d (execs d)) =\n       fst (CISK_control s d (execs d))", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s execs d.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (next_state s execs) d (execs d)) = None \\<or>\n       fst (CISK_control (next_state s execs) d (execs d)) =\n       fst (CISK_control s d (execs d))", "fix s execs d aseqs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s execs d.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (next_state s execs) d (execs d)) = None \\<or>\n       fst (CISK_control (next_state s execs) d (execs d)) =\n       fst (CISK_control s d (execs d))", "assume 1: \"current s \\<noteq> d\""], ["proof (state)\nthis:\n  current s \\<noteq> d\n\ngoal (1 subgoal):\n 1. \\<forall>s execs d.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (next_state s execs) d (execs d)) = None \\<or>\n       fst (CISK_control (next_state s execs) d (execs d)) =\n       fst (CISK_control s d (execs d))", "have \"fst (CISK_control (next_state s execs) d aseqs) = None \\<or> fst (CISK_control (next_state s execs) d aseqs) = fst (CISK_control s d aseqs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (CISK_control (next_state s execs) d aseqs) = None \\<or>\n    fst (CISK_control (next_state s execs) d aseqs) =\n    fst (CISK_control s d aseqs)", "proof(cases \"(s,d,aseqs)\" rule: CISK_control.cases,simp,simp,simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>sa da a as execs'.\n       (s, d, aseqs) = (sa, da, (a # as) # execs') \\<Longrightarrow>\n       fst (CISK_control (next_state s execs) d aseqs) = None \\<or>\n       fst (CISK_control (next_state s execs) d aseqs) =\n       fst (CISK_control s d aseqs)", "case (4 sa da a as execs')"], ["proof (state)\nthis:\n  (s, d, aseqs) = (sa, da, (a # as) # execs')\n\ngoal (1 subgoal):\n 1. \\<And>sa da a as execs'.\n       (s, d, aseqs) = (sa, da, (a # as) # execs') \\<Longrightarrow>\n       fst (CISK_control (next_state s execs) d aseqs) = None \\<or>\n       fst (CISK_control (next_state s execs) d aseqs) =\n       fst (CISK_control s d aseqs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (s, d, aseqs) = (sa, da, (a # as) # execs')\n\ngoal (1 subgoal):\n 1. fst (CISK_control (next_state s execs) d aseqs) = None \\<or>\n    fst (CISK_control (next_state s execs) d aseqs) =\n    fst (CISK_control s d aseqs)", "unfolding Kernel.next_state_def"], ["proof (prove)\nusing this:\n  (s, d, aseqs) = (sa, da, (a # as) # execs')\n\ngoal (1 subgoal):\n 1. fst (CISK_control\n          (snd (snd (CISK_control s (current s) (execs (current s))))) d\n          aseqs) =\n    None \\<or>\n    fst (CISK_control\n          (snd (snd (CISK_control s (current s) (execs (current s))))) d\n          aseqs) =\n    fst (CISK_control s d aseqs)", "using aborting_error_update waiting_error_update 1"], ["proof (prove)\nusing this:\n  (s, d, aseqs) = (sa, da, (a # as) # execs')\n  \\<forall>s d a' a.\n     current s \\<noteq> d \\<and> aborting s d a \\<longrightarrow>\n     aborting (set_error_code s a') d a\n  \\<forall>s d a' a.\n     current s \\<noteq> d \\<and> waiting s d a \\<longrightarrow>\n     waiting (set_error_code s a') d a\n  current s \\<noteq> d\n\ngoal (1 subgoal):\n 1. fst (CISK_control\n          (snd (snd (CISK_control s (current s) (execs (current s))))) d\n          aseqs) =\n    None \\<or>\n    fst (CISK_control\n          (snd (snd (CISK_control s (current s) (execs (current s))))) d\n          aseqs) =\n    fst (CISK_control s d aseqs)", "by(cases \"(sa,current sa,execs (current sa))\" rule: CISK_control.cases,auto split: if_split_asm)"], ["proof (state)\nthis:\n  fst (CISK_control (next_state s execs) d aseqs) = None \\<or>\n  fst (CISK_control (next_state s execs) d aseqs) =\n  fst (CISK_control s d aseqs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (CISK_control (next_state s execs) d aseqs) = None \\<or>\n  fst (CISK_control (next_state s execs) d aseqs) =\n  fst (CISK_control s d aseqs)\n\ngoal (1 subgoal):\n 1. \\<forall>s execs d.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (next_state s execs) d (execs d)) = None \\<or>\n       fst (CISK_control (next_state s execs) d (execs d)) =\n       fst (CISK_control s d (execs d))", "}"], ["proof (state)\nthis:\n  current ?s2 \\<noteq> ?d2 \\<Longrightarrow>\n  fst (CISK_control (next_state ?s2 ?execs2) ?d2 ?aseqs2) = None \\<or>\n  fst (CISK_control (next_state ?s2 ?execs2) ?d2 ?aseqs2) =\n  fst (CISK_control ?s2 ?d2 ?aseqs2)\n\ngoal (1 subgoal):\n 1. \\<forall>s execs d.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (next_state s execs) d (execs d)) = None \\<or>\n       fst (CISK_control (next_state s execs) d (execs d)) =\n       fst (CISK_control s d (execs d))", "thus ?thesis"], ["proof (prove)\nusing this:\n  current ?s2 \\<noteq> ?d2 \\<Longrightarrow>\n  fst (CISK_control (next_state ?s2 ?execs2) ?d2 ?aseqs2) = None \\<or>\n  fst (CISK_control (next_state ?s2 ?execs2) ?d2 ?aseqs2) =\n  fst (CISK_control ?s2 ?d2 ?aseqs2)\n\ngoal (1 subgoal):\n 1. \\<forall>s execs d.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (next_state s execs) d (execs d)) = None \\<or>\n       fst (CISK_control (next_state s execs) d (execs d)) =\n       fst (CISK_control s d (execs d))", "by auto"], ["proof (state)\nthis:\n  \\<forall>s execs d.\n     current s \\<noteq> d \\<longrightarrow>\n     fst (CISK_control (next_state s execs) d (execs d)) = None \\<or>\n     fst (CISK_control (next_state s execs) d (execs d)) =\n     fst (CISK_control s d (execs d))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma next_action_after_step:\nshows \"\\<forall> s a d aseqs . current s \\<noteq> d \\<longrightarrow> fst (CISK_control (step s a) d aseqs) = fst (CISK_control s d aseqs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s a d aseqs.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (step s a) d aseqs) = fst (CISK_control s d aseqs)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s a d aseqs.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (step s a) d aseqs) = fst (CISK_control s d aseqs)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s a d aseqs.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (step s a) d aseqs) = fst (CISK_control s d aseqs)", "fix s a d aseqs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s a d aseqs.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (step s a) d aseqs) = fst (CISK_control s d aseqs)", "assume 1: \"current s \\<noteq> d\""], ["proof (state)\nthis:\n  current s \\<noteq> d\n\ngoal (1 subgoal):\n 1. \\<forall>s a d aseqs.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (step s a) d aseqs) = fst (CISK_control s d aseqs)", "from this aborting_after_step"], ["proof (chain)\npicking this:\n  current s \\<noteq> d\n  \\<forall>s a d.\n     current s \\<noteq> d \\<longrightarrow>\n     aborting (kstep s a) d = aborting s d", "have  \"fst (CISK_control (step s a) d aseqs) = fst (CISK_control s d aseqs)\""], ["proof (prove)\nusing this:\n  current s \\<noteq> d\n  \\<forall>s a d.\n     current s \\<noteq> d \\<longrightarrow>\n     aborting (kstep s a) d = aborting s d\n\ngoal (1 subgoal):\n 1. fst (CISK_control (step s a) d aseqs) = fst (CISK_control s d aseqs)", "unfolding Kernel.step_def"], ["proof (prove)\nusing this:\n  current s \\<noteq> d\n  \\<forall>s a d.\n     current s \\<noteq> d \\<longrightarrow>\n     aborting (kstep s a) d = aborting s d\n\ngoal (1 subgoal):\n 1. fst (CISK_control\n          (case a of None \\<Rightarrow> s | Some a \\<Rightarrow> kstep s a)\n          d aseqs) =\n    fst (CISK_control s d aseqs)", "by(cases \"(s,d,aseqs)\" rule: CISK_control.cases,simp,simp,simp,cases a,auto)"], ["proof (state)\nthis:\n  fst (CISK_control (step s a) d aseqs) = fst (CISK_control s d aseqs)\n\ngoal (1 subgoal):\n 1. \\<forall>s a d aseqs.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (step s a) d aseqs) = fst (CISK_control s d aseqs)", "}"], ["proof (state)\nthis:\n  current ?s2 \\<noteq> ?d2 \\<Longrightarrow>\n  fst (CISK_control (step ?s2 ?a2) ?d2 ?aseqs2) =\n  fst (CISK_control ?s2 ?d2 ?aseqs2)\n\ngoal (1 subgoal):\n 1. \\<forall>s a d aseqs.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (step s a) d aseqs) = fst (CISK_control s d aseqs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  current ?s2 \\<noteq> ?d2 \\<Longrightarrow>\n  fst (CISK_control (step ?s2 ?a2) ?d2 ?aseqs2) =\n  fst (CISK_control ?s2 ?d2 ?aseqs2)\n\ngoal (1 subgoal):\n 1. \\<forall>s a d aseqs.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (step s a) d aseqs) = fst (CISK_control s d aseqs)", "by auto"], ["proof (state)\nthis:\n  \\<forall>s a d aseqs.\n     current s \\<noteq> d \\<longrightarrow>\n     fst (CISK_control (step s a) d aseqs) = fst (CISK_control s d aseqs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma next_state_precondition:\nshows \"\\<forall>s d a execs. AS_precondition s d a \\<longrightarrow> AS_precondition (next_state s execs) d a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s d a execs.\n       AS_precondition s d a \\<longrightarrow>\n       AS_precondition (next_state s execs) d a", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s d a execs.\n       AS_precondition s d a \\<longrightarrow>\n       AS_precondition (next_state s execs) d a", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s d a execs.\n       AS_precondition s d a \\<longrightarrow>\n       AS_precondition (next_state s execs) d a", "fix s a d execs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s d a execs.\n       AS_precondition s d a \\<longrightarrow>\n       AS_precondition (next_state s execs) d a", "assume \"AS_precondition s d a\""], ["proof (state)\nthis:\n  AS_precondition s d a\n\ngoal (1 subgoal):\n 1. \\<forall>s d a execs.\n       AS_precondition s d a \\<longrightarrow>\n       AS_precondition (next_state s execs) d a", "hence \"AS_precondition (next_state s execs) d a\""], ["proof (prove)\nusing this:\n  AS_precondition s d a\n\ngoal (1 subgoal):\n 1. AS_precondition (next_state s execs) d a", "unfolding Kernel.next_state_def"], ["proof (prove)\nusing this:\n  AS_precondition s d a\n\ngoal (1 subgoal):\n 1. AS_precondition\n     (snd (snd (CISK_control s (current s) (execs (current s))))) d a", "using precondition_after_set_error_code"], ["proof (prove)\nusing this:\n  AS_precondition s d a\n  \\<forall>s d a a'.\n     AS_precondition s d a \\<and>\n     aborting s (current s) a' \\<longrightarrow>\n     AS_precondition (set_error_code s a') d a\n\ngoal (1 subgoal):\n 1. AS_precondition\n     (snd (snd (CISK_control s (current s) (execs (current s))))) d a", "by(cases \"(s,(current s),execs (current s))\" rule: CISK_control.cases,auto)"], ["proof (state)\nthis:\n  AS_precondition (next_state s execs) d a\n\ngoal (1 subgoal):\n 1. \\<forall>s d a execs.\n       AS_precondition s d a \\<longrightarrow>\n       AS_precondition (next_state s execs) d a", "}"], ["proof (state)\nthis:\n  AS_precondition ?s2 ?d2 ?a2 \\<Longrightarrow>\n  AS_precondition (next_state ?s2 ?execs2) ?d2 ?a2\n\ngoal (1 subgoal):\n 1. \\<forall>s d a execs.\n       AS_precondition s d a \\<longrightarrow>\n       AS_precondition (next_state s execs) d a", "thus ?thesis"], ["proof (prove)\nusing this:\n  AS_precondition ?s2 ?d2 ?a2 \\<Longrightarrow>\n  AS_precondition (next_state ?s2 ?execs2) ?d2 ?a2\n\ngoal (1 subgoal):\n 1. \\<forall>s d a execs.\n       AS_precondition s d a \\<longrightarrow>\n       AS_precondition (next_state s execs) d a", "by auto"], ["proof (state)\nthis:\n  \\<forall>s d a execs.\n     AS_precondition s d a \\<longrightarrow>\n     AS_precondition (next_state s execs) d a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma next_state_invariant:\nshows \"\\<forall>s execs. invariant s \\<longrightarrow> invariant (next_state s execs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s execs.\n       invariant s \\<longrightarrow> invariant (next_state s execs)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s execs.\n       invariant s \\<longrightarrow> invariant (next_state s execs)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s execs.\n       invariant s \\<longrightarrow> invariant (next_state s execs)", "fix s execs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s execs.\n       invariant s \\<longrightarrow> invariant (next_state s execs)", "assume \"invariant s\""], ["proof (state)\nthis:\n  invariant s\n\ngoal (1 subgoal):\n 1. \\<forall>s execs.\n       invariant s \\<longrightarrow> invariant (next_state s execs)", "hence \"invariant (next_state s execs)\""], ["proof (prove)\nusing this:\n  invariant s\n\ngoal (1 subgoal):\n 1. invariant (next_state s execs)", "unfolding Kernel.next_state_def"], ["proof (prove)\nusing this:\n  invariant s\n\ngoal (1 subgoal):\n 1. invariant (snd (snd (CISK_control s (current s) (execs (current s)))))", "using invariant_after_set_error_code"], ["proof (prove)\nusing this:\n  invariant s\n  \\<forall>s a. invariant s \\<longrightarrow> invariant (set_error_code s a)\n\ngoal (1 subgoal):\n 1. invariant (snd (snd (CISK_control s (current s) (execs (current s)))))", "by(cases \"(s,(current s),execs (current s))\" rule: CISK_control.cases,auto)"], ["proof (state)\nthis:\n  invariant (next_state s execs)\n\ngoal (1 subgoal):\n 1. \\<forall>s execs.\n       invariant s \\<longrightarrow> invariant (next_state s execs)", "}"], ["proof (state)\nthis:\n  invariant ?s2 \\<Longrightarrow> invariant (next_state ?s2 ?execs2)\n\ngoal (1 subgoal):\n 1. \\<forall>s execs.\n       invariant s \\<longrightarrow> invariant (next_state s execs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  invariant ?s2 \\<Longrightarrow> invariant (next_state ?s2 ?execs2)\n\ngoal (1 subgoal):\n 1. \\<forall>s execs.\n       invariant s \\<longrightarrow> invariant (next_state s execs)", "by auto"], ["proof (state)\nthis:\n  \\<forall>s execs.\n     invariant s \\<longrightarrow> invariant (next_state s execs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma next_action_from_execs:\nshows \"\\<forall> s execs . next_action s execs \\<rightharpoonup> (\\<lambda> a . a \\<in> actions_in_execution (execs (current s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))", "fix s execs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))", "assume 1: \"next_action s execs = Some a\""], ["proof (state)\nthis:\n  next_action s execs = Some a\n\ngoal (1 subgoal):\n 1. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))", "from 1"], ["proof (chain)\npicking this:\n  next_action s execs = Some a", "have \"a \\<in> actions_in_execution (execs (current s))\""], ["proof (prove)\nusing this:\n  next_action s execs = Some a\n\ngoal (1 subgoal):\n 1. a \\<in> actions_in_execution (execs (current s))", "unfolding Kernel.next_action_def actions_in_execution_def"], ["proof (prove)\nusing this:\n  fst (CISK_control s (current s) (execs (current s))) = Some a\n\ngoal (1 subgoal):\n 1. a \\<in> {a. \\<exists>aseq\\<in>set (execs (current s)). a \\<in> set aseq}", "by (cases \"(s,(current s),execs (current s))\" rule: CISK_control.cases,auto split: if_split_asm)"], ["proof (state)\nthis:\n  a \\<in> actions_in_execution (execs (current s))\n\ngoal (1 subgoal):\n 1. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))", "}"], ["proof (state)\nthis:\n  next_action s execs = Some ?a2 \\<Longrightarrow>\n  ?a2 \\<in> actions_in_execution (execs (current s))\n\ngoal (1 subgoal):\n 1. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))", "hence \"next_action s execs \\<rightharpoonup> (\\<lambda> a . a \\<in> actions_in_execution (execs (current s)))\""], ["proof (prove)\nusing this:\n  next_action s execs = Some ?a2 \\<Longrightarrow>\n  ?a2 \\<in> actions_in_execution (execs (current s))\n\ngoal (1 subgoal):\n 1. next_action s execs \\<rightharpoonup>\n    (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))", "unfolding B_def"], ["proof (prove)\nusing this:\n  next_action s execs = Some ?a2 \\<Longrightarrow>\n  ?a2 \\<in> actions_in_execution (execs (current s))\n\ngoal (1 subgoal):\n 1. case next_action s execs of None \\<Rightarrow> True\n    | Some a \\<Rightarrow> a \\<in> actions_in_execution (execs (current s))", "by (cases \"next_action s execs\",auto)"], ["proof (state)\nthis:\n  next_action s execs \\<rightharpoonup>\n  (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))\n\ngoal (1 subgoal):\n 1. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))", "}"], ["proof (state)\nthis:\n  next_action ?s2 ?execs2 \\<rightharpoonup>\n  (\\<lambda>a. a \\<in> actions_in_execution (?execs2 (current ?s2)))\n\ngoal (1 subgoal):\n 1. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  next_action ?s2 ?execs2 \\<rightharpoonup>\n  (\\<lambda>a. a \\<in> actions_in_execution (?execs2 (current ?s2)))\n\ngoal (1 subgoal):\n 1. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))", "unfolding B_def"], ["proof (prove)\nusing this:\n  case next_action ?s2 ?execs2 of None \\<Rightarrow> True\n  | Some a \\<Rightarrow>\n      a \\<in> actions_in_execution (?execs2 (current ?s2))\n\ngoal (1 subgoal):\n 1. \\<forall>s execs.\n       case next_action s execs of None \\<Rightarrow> True\n       | Some a \\<Rightarrow>\n           a \\<in> actions_in_execution (execs (current s))", "by (auto)"], ["proof (state)\nthis:\n  \\<forall>s execs.\n     next_action s execs \\<rightharpoonup>\n     (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma next_execs_subset:\nshows \"\\<forall>s execs u . actions_in_execution (next_execs s execs u) \\<subseteq> actions_in_execution (execs u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s execs u.\n       actions_in_execution (next_execs s execs u)\n       \\<subseteq> actions_in_execution (execs u)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s execs u.\n       actions_in_execution (next_execs s execs u)\n       \\<subseteq> actions_in_execution (execs u)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s execs u.\n       actions_in_execution (next_execs s execs u)\n       \\<subseteq> actions_in_execution (execs u)", "fix s execs u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s execs u.\n       actions_in_execution (next_execs s execs u)\n       \\<subseteq> actions_in_execution (execs u)", "have \"actions_in_execution (next_execs s execs u) \\<subseteq> actions_in_execution (execs u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. actions_in_execution (next_execs s execs u)\n    \\<subseteq> actions_in_execution (execs u)", "unfolding Kernel.next_execs_def actions_in_execution_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a. \\<exists>aseq\n                 \\<in>set ((execs\n                            (current s :=\n                               fst (snd (CISK_control s (current s)\n    (execs (current s))))))\n                            u).\n           a \\<in> set aseq}\n    \\<subseteq> {a. \\<exists>aseq\\<in>set (execs u). a \\<in> set aseq}", "by (cases \"(s,(current s),execs (current s))\" rule: CISK_control.cases,auto split: if_split_asm)"], ["proof (state)\nthis:\n  actions_in_execution (next_execs s execs u)\n  \\<subseteq> actions_in_execution (execs u)\n\ngoal (1 subgoal):\n 1. \\<forall>s execs u.\n       actions_in_execution (next_execs s execs u)\n       \\<subseteq> actions_in_execution (execs u)", "}"], ["proof (state)\nthis:\n  actions_in_execution (next_execs ?s2 ?execs2 ?u2)\n  \\<subseteq> actions_in_execution (?execs2 ?u2)\n\ngoal (1 subgoal):\n 1. \\<forall>s execs u.\n       actions_in_execution (next_execs s execs u)\n       \\<subseteq> actions_in_execution (execs u)", "thus ?thesis"], ["proof (prove)\nusing this:\n  actions_in_execution (next_execs ?s2 ?execs2 ?u2)\n  \\<subseteq> actions_in_execution (?execs2 ?u2)\n\ngoal (1 subgoal):\n 1. \\<forall>s execs u.\n       actions_in_execution (next_execs s execs u)\n       \\<subseteq> actions_in_execution (execs u)", "by auto"], ["proof (state)\nthis:\n  \\<forall>s execs u.\n     actions_in_execution (next_execs s execs u)\n     \\<subseteq> actions_in_execution (execs u)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem unwinding_implies_isecure_CISK:\nshows isecure"], ["proof (prove)\ngoal (1 subgoal):\n 1. isecure", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. isecure", "interpret int: Interruptible_Separation_Kernel kstep output_f s0 current cswitch interrupt kprecondition realistic_execution CISK_control kinvolved ifp vpeq AS_set invariant AS_precondition aborting waiting"], ["proof (prove)\ngoal (1 subgoal):\n 1. Interruptible_Separation_Kernel kstep output_f s0 current cswitch\n     kprecondition realistic_execution CISK_control kinvolved ifp vpeq\n     AS_set invariant AS_precondition aborting waiting", "proof (unfold_locales)"], ["proof (state)\ngoal (35 subgoals):\n 1. \\<forall>a b c u.\n       vpeq u a b \\<and> vpeq u b c \\<longrightarrow> vpeq u a c\n 2. \\<forall>a b u. vpeq u a b \\<longrightarrow> vpeq u b a\n 3. \\<forall>a u. vpeq u a a\n 4. \\<forall>u. ifp u u\n 5. \\<forall>s t u a.\n       vpeq u s t \\<and>\n       vpeq (current s) s t \\<and>\n       kprecondition s a \\<and>\n       kprecondition t a \\<and> current s = current t \\<longrightarrow>\n       vpeq u (kstep s a) (kstep t a)\n 6. \\<forall>a s u.\n       \\<not> ifp (current s) u \\<and> kprecondition s a \\<longrightarrow>\n       vpeq u s (kstep s a)\n 7. \\<forall>a s t.\n       vpeq (current s) s t \\<and> current s = current t \\<longrightarrow>\n       output_f s a = output_f t a\n 8. \\<forall>s a. current (kstep s a) = current s\n 9. \\<forall>n s t.\n       current s = current t \\<longrightarrow>\n       current (cswitch n s) = current (cswitch n t)\n 10. \\<forall>u s t n.\n        vpeq u s t \\<longrightarrow> vpeq u (cswitch n s) (cswitch n t)\nA total of 35 subgoals...", "show \"\\<forall>a b c u. vpeq u a b \\<and> vpeq u b c \\<longrightarrow> vpeq u a c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a b c u.\n       vpeq u a b \\<and> vpeq u b c \\<longrightarrow> vpeq u a c", "using vpeq_transitive"], ["proof (prove)\nusing this:\n  \\<forall>a b c u.\n     vpeq u a b \\<and> vpeq u b c \\<longrightarrow> vpeq u a c\n\ngoal (1 subgoal):\n 1. \\<forall>a b c u.\n       vpeq u a b \\<and> vpeq u b c \\<longrightarrow> vpeq u a c", "by blast"], ["proof (state)\nthis:\n  \\<forall>a b c u.\n     vpeq u a b \\<and> vpeq u b c \\<longrightarrow> vpeq u a c\n\ngoal (34 subgoals):\n 1. \\<forall>a b u. vpeq u a b \\<longrightarrow> vpeq u b a\n 2. \\<forall>a u. vpeq u a a\n 3. \\<forall>u. ifp u u\n 4. \\<forall>s t u a.\n       vpeq u s t \\<and>\n       vpeq (current s) s t \\<and>\n       kprecondition s a \\<and>\n       kprecondition t a \\<and> current s = current t \\<longrightarrow>\n       vpeq u (kstep s a) (kstep t a)\n 5. \\<forall>a s u.\n       \\<not> ifp (current s) u \\<and> kprecondition s a \\<longrightarrow>\n       vpeq u s (kstep s a)\n 6. \\<forall>a s t.\n       vpeq (current s) s t \\<and> current s = current t \\<longrightarrow>\n       output_f s a = output_f t a\n 7. \\<forall>s a. current (kstep s a) = current s\n 8. \\<forall>n s t.\n       current s = current t \\<longrightarrow>\n       current (cswitch n s) = current (cswitch n t)\n 9. \\<forall>u s t n.\n       vpeq u s t \\<longrightarrow> vpeq u (cswitch n s) (cswitch n t)\n 10. \\<forall>s t execs.\n        vpeq (current s) s t \\<and>\n        (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n        current s = current t \\<longrightarrow>\n        next_action s execs = next_action t execs\nA total of 34 subgoals...", "show \"\\<forall>a b u. vpeq u a b \\<longrightarrow> vpeq u b a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a b u. vpeq u a b \\<longrightarrow> vpeq u b a", "using vpeq_symmetric"], ["proof (prove)\nusing this:\n  \\<forall>a b u. vpeq u a b \\<longrightarrow> vpeq u b a\n\ngoal (1 subgoal):\n 1. \\<forall>a b u. vpeq u a b \\<longrightarrow> vpeq u b a", "by blast"], ["proof (state)\nthis:\n  \\<forall>a b u. vpeq u a b \\<longrightarrow> vpeq u b a\n\ngoal (33 subgoals):\n 1. \\<forall>a u. vpeq u a a\n 2. \\<forall>u. ifp u u\n 3. \\<forall>s t u a.\n       vpeq u s t \\<and>\n       vpeq (current s) s t \\<and>\n       kprecondition s a \\<and>\n       kprecondition t a \\<and> current s = current t \\<longrightarrow>\n       vpeq u (kstep s a) (kstep t a)\n 4. \\<forall>a s u.\n       \\<not> ifp (current s) u \\<and> kprecondition s a \\<longrightarrow>\n       vpeq u s (kstep s a)\n 5. \\<forall>a s t.\n       vpeq (current s) s t \\<and> current s = current t \\<longrightarrow>\n       output_f s a = output_f t a\n 6. \\<forall>s a. current (kstep s a) = current s\n 7. \\<forall>n s t.\n       current s = current t \\<longrightarrow>\n       current (cswitch n s) = current (cswitch n t)\n 8. \\<forall>u s t n.\n       vpeq u s t \\<longrightarrow> vpeq u (cswitch n s) (cswitch n t)\n 9. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       next_action s execs = next_action t execs\n 10. \\<forall>s t execs.\n        vpeq (current s) s t \\<and>\n        (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n        current s = current t \\<longrightarrow>\n        fst (snd (CISK_control s (current s) (execs (current s)))) =\n        fst (snd (CISK_control t (current s) (execs (current s))))\nA total of 33 subgoals...", "show \"\\<forall>a u. vpeq u a a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a u. vpeq u a a", "using vpeq_reflexive"], ["proof (prove)\nusing this:\n  \\<forall>a u. vpeq u a a\n\ngoal (1 subgoal):\n 1. \\<forall>a u. vpeq u a a", "by blast"], ["proof (state)\nthis:\n  \\<forall>a u. vpeq u a a\n\ngoal (32 subgoals):\n 1. \\<forall>u. ifp u u\n 2. \\<forall>s t u a.\n       vpeq u s t \\<and>\n       vpeq (current s) s t \\<and>\n       kprecondition s a \\<and>\n       kprecondition t a \\<and> current s = current t \\<longrightarrow>\n       vpeq u (kstep s a) (kstep t a)\n 3. \\<forall>a s u.\n       \\<not> ifp (current s) u \\<and> kprecondition s a \\<longrightarrow>\n       vpeq u s (kstep s a)\n 4. \\<forall>a s t.\n       vpeq (current s) s t \\<and> current s = current t \\<longrightarrow>\n       output_f s a = output_f t a\n 5. \\<forall>s a. current (kstep s a) = current s\n 6. \\<forall>n s t.\n       current s = current t \\<longrightarrow>\n       current (cswitch n s) = current (cswitch n t)\n 7. \\<forall>u s t n.\n       vpeq u s t \\<longrightarrow> vpeq u (cswitch n s) (cswitch n t)\n 8. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       next_action s execs = next_action t execs\n 9. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       fst (snd (CISK_control s (current s) (execs (current s)))) =\n       fst (snd (CISK_control t (current s) (execs (current s))))\n 10. \\<forall>s t u execs.\n        vpeq (current s) s t \\<and>\n        vpeq u s t \\<and> current s = current t \\<longrightarrow>\n        vpeq u (next_state s execs) (next_state t execs)\nA total of 32 subgoals...", "show \"\\<forall>u. ifp u u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u. ifp u u", "using ifp_reflexive"], ["proof (prove)\nusing this:\n  \\<forall>u. ifp u u\n\ngoal (1 subgoal):\n 1. \\<forall>u. ifp u u", "by blast"], ["proof (state)\nthis:\n  \\<forall>u. ifp u u\n\ngoal (31 subgoals):\n 1. \\<forall>s t u a.\n       vpeq u s t \\<and>\n       vpeq (current s) s t \\<and>\n       kprecondition s a \\<and>\n       kprecondition t a \\<and> current s = current t \\<longrightarrow>\n       vpeq u (kstep s a) (kstep t a)\n 2. \\<forall>a s u.\n       \\<not> ifp (current s) u \\<and> kprecondition s a \\<longrightarrow>\n       vpeq u s (kstep s a)\n 3. \\<forall>a s t.\n       vpeq (current s) s t \\<and> current s = current t \\<longrightarrow>\n       output_f s a = output_f t a\n 4. \\<forall>s a. current (kstep s a) = current s\n 5. \\<forall>n s t.\n       current s = current t \\<longrightarrow>\n       current (cswitch n s) = current (cswitch n t)\n 6. \\<forall>u s t n.\n       vpeq u s t \\<longrightarrow> vpeq u (cswitch n s) (cswitch n t)\n 7. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       next_action s execs = next_action t execs\n 8. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       fst (snd (CISK_control s (current s) (execs (current s)))) =\n       fst (snd (CISK_control t (current s) (execs (current s))))\n 9. \\<forall>s t u execs.\n       vpeq (current s) s t \\<and>\n       vpeq u s t \\<and> current s = current t \\<longrightarrow>\n       vpeq u (next_state s execs) (next_state t execs)\n 10. \\<forall>s execs. current (next_state s execs) = current s\nA total of 31 subgoals...", "show \"\\<forall> s t u a. vpeq u s t \\<and> vpeq (current s) s t \\<and> kprecondition s a \\<and> kprecondition t a \\<and> current s = current t  \\<longrightarrow> vpeq u (kstep s a) (kstep t a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s t u a.\n       vpeq u s t \\<and>\n       vpeq (current s) s t \\<and>\n       kprecondition s a \\<and>\n       kprecondition t a \\<and> current s = current t \\<longrightarrow>\n       vpeq u (kstep s a) (kstep t a)", "using weakly_step_consistent"], ["proof (prove)\nusing this:\n  \\<forall>s t u a.\n     vpeq u s t \\<and>\n     vpeq (current s) s t \\<and>\n     invariant s \\<and>\n     AS_precondition s (current s) a \\<and>\n     invariant t \\<and>\n     AS_precondition t (current t) a \\<and>\n     current s = current t \\<longrightarrow>\n     vpeq u (kstep s a) (kstep t a)\n\ngoal (1 subgoal):\n 1. \\<forall>s t u a.\n       vpeq u s t \\<and>\n       vpeq (current s) s t \\<and>\n       kprecondition s a \\<and>\n       kprecondition t a \\<and> current s = current t \\<longrightarrow>\n       vpeq u (kstep s a) (kstep t a)", "by blast"], ["proof (state)\nthis:\n  \\<forall>s t u a.\n     vpeq u s t \\<and>\n     vpeq (current s) s t \\<and>\n     kprecondition s a \\<and>\n     kprecondition t a \\<and> current s = current t \\<longrightarrow>\n     vpeq u (kstep s a) (kstep t a)\n\ngoal (30 subgoals):\n 1. \\<forall>a s u.\n       \\<not> ifp (current s) u \\<and> kprecondition s a \\<longrightarrow>\n       vpeq u s (kstep s a)\n 2. \\<forall>a s t.\n       vpeq (current s) s t \\<and> current s = current t \\<longrightarrow>\n       output_f s a = output_f t a\n 3. \\<forall>s a. current (kstep s a) = current s\n 4. \\<forall>n s t.\n       current s = current t \\<longrightarrow>\n       current (cswitch n s) = current (cswitch n t)\n 5. \\<forall>u s t n.\n       vpeq u s t \\<longrightarrow> vpeq u (cswitch n s) (cswitch n t)\n 6. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       next_action s execs = next_action t execs\n 7. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       fst (snd (CISK_control s (current s) (execs (current s)))) =\n       fst (snd (CISK_control t (current s) (execs (current s))))\n 8. \\<forall>s t u execs.\n       vpeq (current s) s t \\<and>\n       vpeq u s t \\<and> current s = current t \\<longrightarrow>\n       vpeq u (next_state s execs) (next_state t execs)\n 9. \\<forall>s execs. current (next_state s execs) = current s\n 10. \\<forall>s u execs.\n        \\<not> ifp (current s) u \\<longrightarrow>\n        vpeq u s (next_state s execs)\nA total of 30 subgoals...", "show \"\\<forall> a s u. \\<not>ifp (current s) u  \\<and> kprecondition s a \\<longrightarrow> vpeq u s (kstep s a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a s u.\n       \\<not> ifp (current s) u \\<and> kprecondition s a \\<longrightarrow>\n       vpeq u s (kstep s a)", "using locally_respects"], ["proof (prove)\nusing this:\n  \\<forall>a s u.\n     \\<not> ifp (current s) u \\<and> kprecondition s a \\<longrightarrow>\n     vpeq u s (kstep s a)\n\ngoal (1 subgoal):\n 1. \\<forall>a s u.\n       \\<not> ifp (current s) u \\<and> kprecondition s a \\<longrightarrow>\n       vpeq u s (kstep s a)", "by blast"], ["proof (state)\nthis:\n  \\<forall>a s u.\n     \\<not> ifp (current s) u \\<and> kprecondition s a \\<longrightarrow>\n     vpeq u s (kstep s a)\n\ngoal (29 subgoals):\n 1. \\<forall>a s t.\n       vpeq (current s) s t \\<and> current s = current t \\<longrightarrow>\n       output_f s a = output_f t a\n 2. \\<forall>s a. current (kstep s a) = current s\n 3. \\<forall>n s t.\n       current s = current t \\<longrightarrow>\n       current (cswitch n s) = current (cswitch n t)\n 4. \\<forall>u s t n.\n       vpeq u s t \\<longrightarrow> vpeq u (cswitch n s) (cswitch n t)\n 5. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       next_action s execs = next_action t execs\n 6. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       fst (snd (CISK_control s (current s) (execs (current s)))) =\n       fst (snd (CISK_control t (current s) (execs (current s))))\n 7. \\<forall>s t u execs.\n       vpeq (current s) s t \\<and>\n       vpeq u s t \\<and> current s = current t \\<longrightarrow>\n       vpeq u (next_state s execs) (next_state t execs)\n 8. \\<forall>s execs. current (next_state s execs) = current s\n 9. \\<forall>s u execs.\n       \\<not> ifp (current s) u \\<longrightarrow>\n       vpeq u s (next_state s execs)\n 10. \\<forall>s a.\n        \\<forall>d\\<in>involved a.\n           kprecondition s (the a) \\<longrightarrow> ifp d (current s)\nA total of 29 subgoals...", "show \"\\<forall> a s t. vpeq (current s) s t \\<and> current s = current t \\<longrightarrow> (output_f s a) = (output_f t a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a s t.\n       vpeq (current s) s t \\<and> current s = current t \\<longrightarrow>\n       output_f s a = output_f t a", "using output_consistent"], ["proof (prove)\nusing this:\n  \\<forall>a s t.\n     vpeq (current s) s t \\<and> current s = current t \\<longrightarrow>\n     output_f s a = output_f t a\n\ngoal (1 subgoal):\n 1. \\<forall>a s t.\n       vpeq (current s) s t \\<and> current s = current t \\<longrightarrow>\n       output_f s a = output_f t a", "by blast"], ["proof (state)\nthis:\n  \\<forall>a s t.\n     vpeq (current s) s t \\<and> current s = current t \\<longrightarrow>\n     output_f s a = output_f t a\n\ngoal (28 subgoals):\n 1. \\<forall>s a. current (kstep s a) = current s\n 2. \\<forall>n s t.\n       current s = current t \\<longrightarrow>\n       current (cswitch n s) = current (cswitch n t)\n 3. \\<forall>u s t n.\n       vpeq u s t \\<longrightarrow> vpeq u (cswitch n s) (cswitch n t)\n 4. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       next_action s execs = next_action t execs\n 5. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       fst (snd (CISK_control s (current s) (execs (current s)))) =\n       fst (snd (CISK_control t (current s) (execs (current s))))\n 6. \\<forall>s t u execs.\n       vpeq (current s) s t \\<and>\n       vpeq u s t \\<and> current s = current t \\<longrightarrow>\n       vpeq u (next_state s execs) (next_state t execs)\n 7. \\<forall>s execs. current (next_state s execs) = current s\n 8. \\<forall>s u execs.\n       \\<not> ifp (current s) u \\<longrightarrow>\n       vpeq u s (next_state s execs)\n 9. \\<forall>s a.\n       \\<forall>d\\<in>involved a.\n          kprecondition s (the a) \\<longrightarrow> ifp d (current s)\n 10. \\<forall>s execs.\n        next_action s execs \\<rightharpoonup>\n        (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))\nA total of 28 subgoals...", "show \"\\<forall> s a . current (kstep s a) = current s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s a. current (kstep s a) = current s", "using step_atomicity"], ["proof (prove)\nusing this:\n  \\<forall>s a. current (kstep s a) = current s\n\ngoal (1 subgoal):\n 1. \\<forall>s a. current (kstep s a) = current s", "by blast"], ["proof (state)\nthis:\n  \\<forall>s a. current (kstep s a) = current s\n\ngoal (27 subgoals):\n 1. \\<forall>n s t.\n       current s = current t \\<longrightarrow>\n       current (cswitch n s) = current (cswitch n t)\n 2. \\<forall>u s t n.\n       vpeq u s t \\<longrightarrow> vpeq u (cswitch n s) (cswitch n t)\n 3. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       next_action s execs = next_action t execs\n 4. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       fst (snd (CISK_control s (current s) (execs (current s)))) =\n       fst (snd (CISK_control t (current s) (execs (current s))))\n 5. \\<forall>s t u execs.\n       vpeq (current s) s t \\<and>\n       vpeq u s t \\<and> current s = current t \\<longrightarrow>\n       vpeq u (next_state s execs) (next_state t execs)\n 6. \\<forall>s execs. current (next_state s execs) = current s\n 7. \\<forall>s u execs.\n       \\<not> ifp (current s) u \\<longrightarrow>\n       vpeq u s (next_state s execs)\n 8. \\<forall>s a.\n       \\<forall>d\\<in>involved a.\n          kprecondition s (the a) \\<longrightarrow> ifp d (current s)\n 9. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))\n 10. \\<forall>s execs u.\n        actions_in_execution (next_execs s execs u)\n        \\<subseteq> actions_in_execution (execs u)\nA total of 27 subgoals...", "show \"\\<forall> n s t . current s = current t \\<longrightarrow> current (cswitch n s) = current (cswitch n t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n s t.\n       current s = current t \\<longrightarrow>\n       current (cswitch n s) = current (cswitch n t)", "using cswitch_independent_of_state"], ["proof (prove)\nusing this:\n  \\<forall>n s t.\n     current s = current t \\<longrightarrow>\n     current (cswitch n s) = current (cswitch n t)\n\ngoal (1 subgoal):\n 1. \\<forall>n s t.\n       current s = current t \\<longrightarrow>\n       current (cswitch n s) = current (cswitch n t)", "by blast"], ["proof (state)\nthis:\n  \\<forall>n s t.\n     current s = current t \\<longrightarrow>\n     current (cswitch n s) = current (cswitch n t)\n\ngoal (26 subgoals):\n 1. \\<forall>u s t n.\n       vpeq u s t \\<longrightarrow> vpeq u (cswitch n s) (cswitch n t)\n 2. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       next_action s execs = next_action t execs\n 3. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       fst (snd (CISK_control s (current s) (execs (current s)))) =\n       fst (snd (CISK_control t (current s) (execs (current s))))\n 4. \\<forall>s t u execs.\n       vpeq (current s) s t \\<and>\n       vpeq u s t \\<and> current s = current t \\<longrightarrow>\n       vpeq u (next_state s execs) (next_state t execs)\n 5. \\<forall>s execs. current (next_state s execs) = current s\n 6. \\<forall>s u execs.\n       \\<not> ifp (current s) u \\<longrightarrow>\n       vpeq u s (next_state s execs)\n 7. \\<forall>s a.\n       \\<forall>d\\<in>involved a.\n          kprecondition s (the a) \\<longrightarrow> ifp d (current s)\n 8. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))\n 9. \\<forall>s execs u.\n       actions_in_execution (next_execs s execs u)\n       \\<subseteq> actions_in_execution (execs u)\n 10. [] \\<in> AS_set\nA total of 26 subgoals...", "show \"\\<forall> u s t n . vpeq u s t \\<longrightarrow> vpeq u (cswitch n s) (cswitch n t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u s t n.\n       vpeq u s t \\<longrightarrow> vpeq u (cswitch n s) (cswitch n t)", "using cswitch_consistency"], ["proof (prove)\nusing this:\n  \\<forall>u s t n.\n     vpeq u s t \\<longrightarrow> vpeq u (cswitch n s) (cswitch n t)\n\ngoal (1 subgoal):\n 1. \\<forall>u s t n.\n       vpeq u s t \\<longrightarrow> vpeq u (cswitch n s) (cswitch n t)", "by blast"], ["proof (state)\nthis:\n  \\<forall>u s t n.\n     vpeq u s t \\<longrightarrow> vpeq u (cswitch n s) (cswitch n t)\n\ngoal (25 subgoals):\n 1. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       next_action s execs = next_action t execs\n 2. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       fst (snd (CISK_control s (current s) (execs (current s)))) =\n       fst (snd (CISK_control t (current s) (execs (current s))))\n 3. \\<forall>s t u execs.\n       vpeq (current s) s t \\<and>\n       vpeq u s t \\<and> current s = current t \\<longrightarrow>\n       vpeq u (next_state s execs) (next_state t execs)\n 4. \\<forall>s execs. current (next_state s execs) = current s\n 5. \\<forall>s u execs.\n       \\<not> ifp (current s) u \\<longrightarrow>\n       vpeq u s (next_state s execs)\n 6. \\<forall>s a.\n       \\<forall>d\\<in>involved a.\n          kprecondition s (the a) \\<longrightarrow> ifp d (current s)\n 7. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))\n 8. \\<forall>s execs u.\n       actions_in_execution (next_execs s execs u)\n       \\<subseteq> actions_in_execution (execs u)\n 9. [] \\<in> AS_set\n 10. invariant s0\nA total of 25 subgoals...", "show \"\\<forall>s t execs. vpeq (current s) s t \\<and> (\\<forall> d \\<in> involved (next_action s execs) . vpeq d s t) \\<and> current s = current t \\<longrightarrow> next_action s execs = next_action t execs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       next_action s execs = next_action t execs", "using next_action_consistent"], ["proof (prove)\nusing this:\n  \\<forall>s t execs.\n     vpeq (current s) s t \\<and>\n     (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n     current s = current t \\<longrightarrow>\n     next_action s execs = next_action t execs\n\ngoal (1 subgoal):\n 1. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       next_action s execs = next_action t execs", "by blast"], ["proof (state)\nthis:\n  \\<forall>s t execs.\n     vpeq (current s) s t \\<and>\n     (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n     current s = current t \\<longrightarrow>\n     next_action s execs = next_action t execs\n\ngoal (24 subgoals):\n 1. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       fst (snd (CISK_control s (current s) (execs (current s)))) =\n       fst (snd (CISK_control t (current s) (execs (current s))))\n 2. \\<forall>s t u execs.\n       vpeq (current s) s t \\<and>\n       vpeq u s t \\<and> current s = current t \\<longrightarrow>\n       vpeq u (next_state s execs) (next_state t execs)\n 3. \\<forall>s execs. current (next_state s execs) = current s\n 4. \\<forall>s u execs.\n       \\<not> ifp (current s) u \\<longrightarrow>\n       vpeq u s (next_state s execs)\n 5. \\<forall>s a.\n       \\<forall>d\\<in>involved a.\n          kprecondition s (the a) \\<longrightarrow> ifp d (current s)\n 6. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))\n 7. \\<forall>s execs u.\n       actions_in_execution (next_execs s execs u)\n       \\<subseteq> actions_in_execution (execs u)\n 8. [] \\<in> AS_set\n 9. invariant s0\n 10. \\<forall>s n. invariant s \\<longrightarrow> invariant (cswitch n s)\nA total of 24 subgoals...", "show \"\\<forall>s t execs.\n        vpeq (current s) s t \\<and> (\\<forall> d \\<in> involved (next_action s execs) . vpeq d s t) \\<and> current s = current t \\<longrightarrow>\n        fst (snd (CISK_control s (current s) (execs (current s)))) = fst (snd (CISK_control t (current s) (execs (current s))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       fst (snd (CISK_control s (current s) (execs (current s)))) =\n       fst (snd (CISK_control t (current s) (execs (current s))))", "using next_execs_consistent"], ["proof (prove)\nusing this:\n  \\<forall>s t execs.\n     vpeq (current s) s t \\<and>\n     (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n     current s = current t \\<longrightarrow>\n     fst (snd (CISK_control s (current s) (execs (current s)))) =\n     fst (snd (CISK_control t (current s) (execs (current s))))\n\ngoal (1 subgoal):\n 1. \\<forall>s t execs.\n       vpeq (current s) s t \\<and>\n       (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n       current s = current t \\<longrightarrow>\n       fst (snd (CISK_control s (current s) (execs (current s)))) =\n       fst (snd (CISK_control t (current s) (execs (current s))))", "by blast"], ["proof (state)\nthis:\n  \\<forall>s t execs.\n     vpeq (current s) s t \\<and>\n     (\\<forall>d\\<in>involved (next_action s execs). vpeq d s t) \\<and>\n     current s = current t \\<longrightarrow>\n     fst (snd (CISK_control s (current s) (execs (current s)))) =\n     fst (snd (CISK_control t (current s) (execs (current s))))\n\ngoal (23 subgoals):\n 1. \\<forall>s t u execs.\n       vpeq (current s) s t \\<and>\n       vpeq u s t \\<and> current s = current t \\<longrightarrow>\n       vpeq u (next_state s execs) (next_state t execs)\n 2. \\<forall>s execs. current (next_state s execs) = current s\n 3. \\<forall>s u execs.\n       \\<not> ifp (current s) u \\<longrightarrow>\n       vpeq u s (next_state s execs)\n 4. \\<forall>s a.\n       \\<forall>d\\<in>involved a.\n          kprecondition s (the a) \\<longrightarrow> ifp d (current s)\n 5. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))\n 6. \\<forall>s execs u.\n       actions_in_execution (next_execs s execs u)\n       \\<subseteq> actions_in_execution (execs u)\n 7. [] \\<in> AS_set\n 8. invariant s0\n 9. \\<forall>s n. invariant s \\<longrightarrow> invariant (cswitch n s)\n 10. \\<forall>s d n a.\n        AS_precondition s d a \\<longrightarrow>\n        AS_precondition (cswitch n s) d a\nA total of 23 subgoals...", "show \" \\<forall>s t u execs. vpeq (current s) s t \\<and> vpeq u s t \\<and> current s = current t \\<longrightarrow> vpeq u (next_state s execs) (next_state t execs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s t u execs.\n       vpeq (current s) s t \\<and>\n       vpeq u s t \\<and> current s = current t \\<longrightarrow>\n       vpeq u (next_state s execs) (next_state t execs)", "using next_state_consistent"], ["proof (prove)\nusing this:\n  \\<forall>s t u execs.\n     vpeq (current s) s t \\<and>\n     vpeq u s t \\<and> current s = current t \\<longrightarrow>\n     vpeq u (next_state s execs) (next_state t execs)\n\ngoal (1 subgoal):\n 1. \\<forall>s t u execs.\n       vpeq (current s) s t \\<and>\n       vpeq u s t \\<and> current s = current t \\<longrightarrow>\n       vpeq u (next_state s execs) (next_state t execs)", "by auto"], ["proof (state)\nthis:\n  \\<forall>s t u execs.\n     vpeq (current s) s t \\<and>\n     vpeq u s t \\<and> current s = current t \\<longrightarrow>\n     vpeq u (next_state s execs) (next_state t execs)\n\ngoal (22 subgoals):\n 1. \\<forall>s execs. current (next_state s execs) = current s\n 2. \\<forall>s u execs.\n       \\<not> ifp (current s) u \\<longrightarrow>\n       vpeq u s (next_state s execs)\n 3. \\<forall>s a.\n       \\<forall>d\\<in>involved a.\n          kprecondition s (the a) \\<longrightarrow> ifp d (current s)\n 4. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))\n 5. \\<forall>s execs u.\n       actions_in_execution (next_execs s execs u)\n       \\<subseteq> actions_in_execution (execs u)\n 6. [] \\<in> AS_set\n 7. invariant s0\n 8. \\<forall>s n. invariant s \\<longrightarrow> invariant (cswitch n s)\n 9. \\<forall>s d n a.\n       AS_precondition s d a \\<longrightarrow>\n       AS_precondition (cswitch n s) d a\n 10. \\<forall>s d aseq.\n        invariant s \\<and>\n        aseq \\<in> AS_set \\<and> aseq \\<noteq> [] \\<longrightarrow>\n        AS_precondition s d (hd aseq)\nA total of 22 subgoals...", "show \" \\<forall>s execs. current (next_state s execs) = current s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s execs. current (next_state s execs) = current s", "using current_next_state"], ["proof (prove)\nusing this:\n  \\<forall>s execs. current (next_state s execs) = current s\n\ngoal (1 subgoal):\n 1. \\<forall>s execs. current (next_state s execs) = current s", "by auto"], ["proof (state)\nthis:\n  \\<forall>s execs. current (next_state s execs) = current s\n\ngoal (21 subgoals):\n 1. \\<forall>s u execs.\n       \\<not> ifp (current s) u \\<longrightarrow>\n       vpeq u s (next_state s execs)\n 2. \\<forall>s a.\n       \\<forall>d\\<in>involved a.\n          kprecondition s (the a) \\<longrightarrow> ifp d (current s)\n 3. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))\n 4. \\<forall>s execs u.\n       actions_in_execution (next_execs s execs u)\n       \\<subseteq> actions_in_execution (execs u)\n 5. [] \\<in> AS_set\n 6. invariant s0\n 7. \\<forall>s n. invariant s \\<longrightarrow> invariant (cswitch n s)\n 8. \\<forall>s d n a.\n       AS_precondition s d a \\<longrightarrow>\n       AS_precondition (cswitch n s) d a\n 9. \\<forall>s d aseq.\n       invariant s \\<and>\n       aseq \\<in> AS_set \\<and> aseq \\<noteq> [] \\<longrightarrow>\n       AS_precondition s d (hd aseq)\n 10. \\<forall>s a a'.\n        (\\<exists>aseq\\<in>AS_set. is_sub_seq a a' aseq) \\<and>\n        invariant s \\<and>\n        AS_precondition s (current s) a \\<and>\n        \\<not> aborting s (current s) a \\<and>\n        \\<not> waiting s (current s) a \\<longrightarrow>\n        AS_precondition (kstep s a) (current s) a'\nA total of 21 subgoals...", "show \"\\<forall>s u execs. \\<not> ifp (current s) u \\<longrightarrow> vpeq u s (next_state s execs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s u execs.\n       \\<not> ifp (current s) u \\<longrightarrow>\n       vpeq u s (next_state s execs)", "using locally_respects_next_state"], ["proof (prove)\nusing this:\n  \\<forall>s u execs.\n     \\<not> ifp (current s) u \\<longrightarrow>\n     vpeq u s (next_state s execs)\n\ngoal (1 subgoal):\n 1. \\<forall>s u execs.\n       \\<not> ifp (current s) u \\<longrightarrow>\n       vpeq u s (next_state s execs)", "by auto"], ["proof (state)\nthis:\n  \\<forall>s u execs.\n     \\<not> ifp (current s) u \\<longrightarrow>\n     vpeq u s (next_state s execs)\n\ngoal (20 subgoals):\n 1. \\<forall>s a.\n       \\<forall>d\\<in>involved a.\n          kprecondition s (the a) \\<longrightarrow> ifp d (current s)\n 2. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))\n 3. \\<forall>s execs u.\n       actions_in_execution (next_execs s execs u)\n       \\<subseteq> actions_in_execution (execs u)\n 4. [] \\<in> AS_set\n 5. invariant s0\n 6. \\<forall>s n. invariant s \\<longrightarrow> invariant (cswitch n s)\n 7. \\<forall>s d n a.\n       AS_precondition s d a \\<longrightarrow>\n       AS_precondition (cswitch n s) d a\n 8. \\<forall>s d aseq.\n       invariant s \\<and>\n       aseq \\<in> AS_set \\<and> aseq \\<noteq> [] \\<longrightarrow>\n       AS_precondition s d (hd aseq)\n 9. \\<forall>s a a'.\n       (\\<exists>aseq\\<in>AS_set. is_sub_seq a a' aseq) \\<and>\n       invariant s \\<and>\n       AS_precondition s (current s) a \\<and>\n       \\<not> aborting s (current s) a \\<and>\n       \\<not> waiting s (current s) a \\<longrightarrow>\n       AS_precondition (kstep s a) (current s) a'\n 10. \\<forall>s d a a'.\n        current s \\<noteq> d \\<and> AS_precondition s d a \\<longrightarrow>\n        AS_precondition (kstep s a') d a\nA total of 20 subgoals...", "show \"[] \\<in> AS_set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<in> AS_set", "using empty_in_AS_set"], ["proof (prove)\nusing this:\n  [] \\<in> AS_set\n\ngoal (1 subgoal):\n 1. [] \\<in> AS_set", "by blast"], ["proof (state)\nthis:\n  [] \\<in> AS_set\n\ngoal (19 subgoals):\n 1. \\<forall>s a.\n       \\<forall>d\\<in>involved a.\n          kprecondition s (the a) \\<longrightarrow> ifp d (current s)\n 2. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))\n 3. \\<forall>s execs u.\n       actions_in_execution (next_execs s execs u)\n       \\<subseteq> actions_in_execution (execs u)\n 4. invariant s0\n 5. \\<forall>s n. invariant s \\<longrightarrow> invariant (cswitch n s)\n 6. \\<forall>s d n a.\n       AS_precondition s d a \\<longrightarrow>\n       AS_precondition (cswitch n s) d a\n 7. \\<forall>s d aseq.\n       invariant s \\<and>\n       aseq \\<in> AS_set \\<and> aseq \\<noteq> [] \\<longrightarrow>\n       AS_precondition s d (hd aseq)\n 8. \\<forall>s a a'.\n       (\\<exists>aseq\\<in>AS_set. is_sub_seq a a' aseq) \\<and>\n       invariant s \\<and>\n       AS_precondition s (current s) a \\<and>\n       \\<not> aborting s (current s) a \\<and>\n       \\<not> waiting s (current s) a \\<longrightarrow>\n       AS_precondition (kstep s a) (current s) a'\n 9. \\<forall>s d a a'.\n       current s \\<noteq> d \\<and> AS_precondition s d a \\<longrightarrow>\n       AS_precondition (kstep s a') d a\n 10. \\<forall>s a. invariant s \\<longrightarrow> invariant (kstep s a)\nA total of 19 subgoals...", "show \"\\<forall> s n . invariant s \\<longrightarrow> invariant (cswitch n s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s n. invariant s \\<longrightarrow> invariant (cswitch n s)", "using invariant_after_cswitch"], ["proof (prove)\nusing this:\n  \\<forall>s n. invariant s \\<longrightarrow> invariant (cswitch n s)\n\ngoal (1 subgoal):\n 1. \\<forall>s n. invariant s \\<longrightarrow> invariant (cswitch n s)", "by blast"], ["proof (state)\nthis:\n  \\<forall>s n. invariant s \\<longrightarrow> invariant (cswitch n s)\n\ngoal (18 subgoals):\n 1. \\<forall>s a.\n       \\<forall>d\\<in>involved a.\n          kprecondition s (the a) \\<longrightarrow> ifp d (current s)\n 2. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))\n 3. \\<forall>s execs u.\n       actions_in_execution (next_execs s execs u)\n       \\<subseteq> actions_in_execution (execs u)\n 4. invariant s0\n 5. \\<forall>s d n a.\n       AS_precondition s d a \\<longrightarrow>\n       AS_precondition (cswitch n s) d a\n 6. \\<forall>s d aseq.\n       invariant s \\<and>\n       aseq \\<in> AS_set \\<and> aseq \\<noteq> [] \\<longrightarrow>\n       AS_precondition s d (hd aseq)\n 7. \\<forall>s a a'.\n       (\\<exists>aseq\\<in>AS_set. is_sub_seq a a' aseq) \\<and>\n       invariant s \\<and>\n       AS_precondition s (current s) a \\<and>\n       \\<not> aborting s (current s) a \\<and>\n       \\<not> waiting s (current s) a \\<longrightarrow>\n       AS_precondition (kstep s a) (current s) a'\n 8. \\<forall>s d a a'.\n       current s \\<noteq> d \\<and> AS_precondition s d a \\<longrightarrow>\n       AS_precondition (kstep s a') d a\n 9. \\<forall>s a. invariant s \\<longrightarrow> invariant (kstep s a)\n 10. \\<And>s a. kprecondition s a \\<equiv> kprecondition s a\nA total of 18 subgoals...", "show \"\\<forall> s d n a. AS_precondition s d a \\<longrightarrow> AS_precondition (cswitch n s) d a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s d n a.\n       AS_precondition s d a \\<longrightarrow>\n       AS_precondition (cswitch n s) d a", "using precondition_after_cswitch"], ["proof (prove)\nusing this:\n  \\<forall>s d n a.\n     AS_precondition s d a \\<longrightarrow>\n     AS_precondition (cswitch n s) d a\n\ngoal (1 subgoal):\n 1. \\<forall>s d n a.\n       AS_precondition s d a \\<longrightarrow>\n       AS_precondition (cswitch n s) d a", "by blast"], ["proof (state)\nthis:\n  \\<forall>s d n a.\n     AS_precondition s d a \\<longrightarrow>\n     AS_precondition (cswitch n s) d a\n\ngoal (17 subgoals):\n 1. \\<forall>s a.\n       \\<forall>d\\<in>involved a.\n          kprecondition s (the a) \\<longrightarrow> ifp d (current s)\n 2. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))\n 3. \\<forall>s execs u.\n       actions_in_execution (next_execs s execs u)\n       \\<subseteq> actions_in_execution (execs u)\n 4. invariant s0\n 5. \\<forall>s d aseq.\n       invariant s \\<and>\n       aseq \\<in> AS_set \\<and> aseq \\<noteq> [] \\<longrightarrow>\n       AS_precondition s d (hd aseq)\n 6. \\<forall>s a a'.\n       (\\<exists>aseq\\<in>AS_set. is_sub_seq a a' aseq) \\<and>\n       invariant s \\<and>\n       AS_precondition s (current s) a \\<and>\n       \\<not> aborting s (current s) a \\<and>\n       \\<not> waiting s (current s) a \\<longrightarrow>\n       AS_precondition (kstep s a) (current s) a'\n 7. \\<forall>s d a a'.\n       current s \\<noteq> d \\<and> AS_precondition s d a \\<longrightarrow>\n       AS_precondition (kstep s a') d a\n 8. \\<forall>s a. invariant s \\<longrightarrow> invariant (kstep s a)\n 9. \\<And>s a. kprecondition s a \\<equiv> kprecondition s a\n 10. \\<And>aseq.\n        realistic_execution aseq \\<equiv> set aseq \\<subseteq> AS_set\nA total of 17 subgoals...", "show \"invariant s0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invariant s0", "using invariant_s0"], ["proof (prove)\nusing this:\n  invariant s0\n\ngoal (1 subgoal):\n 1. invariant s0", "by blast"], ["proof (state)\nthis:\n  invariant s0\n\ngoal (16 subgoals):\n 1. \\<forall>s a.\n       \\<forall>d\\<in>involved a.\n          kprecondition s (the a) \\<longrightarrow> ifp d (current s)\n 2. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))\n 3. \\<forall>s execs u.\n       actions_in_execution (next_execs s execs u)\n       \\<subseteq> actions_in_execution (execs u)\n 4. \\<forall>s d aseq.\n       invariant s \\<and>\n       aseq \\<in> AS_set \\<and> aseq \\<noteq> [] \\<longrightarrow>\n       AS_precondition s d (hd aseq)\n 5. \\<forall>s a a'.\n       (\\<exists>aseq\\<in>AS_set. is_sub_seq a a' aseq) \\<and>\n       invariant s \\<and>\n       AS_precondition s (current s) a \\<and>\n       \\<not> aborting s (current s) a \\<and>\n       \\<not> waiting s (current s) a \\<longrightarrow>\n       AS_precondition (kstep s a) (current s) a'\n 6. \\<forall>s d a a'.\n       current s \\<noteq> d \\<and> AS_precondition s d a \\<longrightarrow>\n       AS_precondition (kstep s a') d a\n 7. \\<forall>s a. invariant s \\<longrightarrow> invariant (kstep s a)\n 8. \\<And>s a. kprecondition s a \\<equiv> kprecondition s a\n 9. \\<And>aseq.\n       realistic_execution aseq \\<equiv> set aseq \\<subseteq> AS_set\n 10. \\<forall>s d aseqs.\n        case CISK_control s d aseqs of\n        (a, aseqs', s') \\<Rightarrow>\n          thread_empty aseqs \\<and> (a, aseqs') = (None, []) \\<or>\n          aseqs \\<noteq> [] \\<and>\n          hd aseqs \\<noteq> [] \\<and>\n          \\<not> aborting s' d (the a) \\<and>\n          \\<not> waiting s' d (the a) \\<and>\n          (a, aseqs') =\n          (Some (hd (hd aseqs)), tl (hd aseqs) # tl aseqs) \\<or>\n          aseqs \\<noteq> [] \\<and>\n          hd aseqs \\<noteq> [] \\<and>\n          waiting s' d (the a) \\<and>\n          (a, aseqs', s') = (Some (hd (hd aseqs)), aseqs, s) \\<or>\n          (a, aseqs') = (None, tl aseqs)\nA total of 16 subgoals...", "show \"\\<forall> s d aseq . invariant s \\<and> aseq \\<in> AS_set \\<and> aseq \\<noteq> [] \\<longrightarrow> AS_precondition s d (hd aseq)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s d aseq.\n       invariant s \\<and>\n       aseq \\<in> AS_set \\<and> aseq \\<noteq> [] \\<longrightarrow>\n       AS_precondition s d (hd aseq)", "using AS_prec_first_action"], ["proof (prove)\nusing this:\n  \\<forall>s d aseq.\n     invariant s \\<and>\n     aseq \\<in> AS_set \\<and> aseq \\<noteq> [] \\<longrightarrow>\n     AS_precondition s d (hd aseq)\n\ngoal (1 subgoal):\n 1. \\<forall>s d aseq.\n       invariant s \\<and>\n       aseq \\<in> AS_set \\<and> aseq \\<noteq> [] \\<longrightarrow>\n       AS_precondition s d (hd aseq)", "by blast"], ["proof (state)\nthis:\n  \\<forall>s d aseq.\n     invariant s \\<and>\n     aseq \\<in> AS_set \\<and> aseq \\<noteq> [] \\<longrightarrow>\n     AS_precondition s d (hd aseq)\n\ngoal (15 subgoals):\n 1. \\<forall>s a.\n       \\<forall>d\\<in>involved a.\n          kprecondition s (the a) \\<longrightarrow> ifp d (current s)\n 2. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))\n 3. \\<forall>s execs u.\n       actions_in_execution (next_execs s execs u)\n       \\<subseteq> actions_in_execution (execs u)\n 4. \\<forall>s a a'.\n       (\\<exists>aseq\\<in>AS_set. is_sub_seq a a' aseq) \\<and>\n       invariant s \\<and>\n       AS_precondition s (current s) a \\<and>\n       \\<not> aborting s (current s) a \\<and>\n       \\<not> waiting s (current s) a \\<longrightarrow>\n       AS_precondition (kstep s a) (current s) a'\n 5. \\<forall>s d a a'.\n       current s \\<noteq> d \\<and> AS_precondition s d a \\<longrightarrow>\n       AS_precondition (kstep s a') d a\n 6. \\<forall>s a. invariant s \\<longrightarrow> invariant (kstep s a)\n 7. \\<And>s a. kprecondition s a \\<equiv> kprecondition s a\n 8. \\<And>aseq.\n       realistic_execution aseq \\<equiv> set aseq \\<subseteq> AS_set\n 9. \\<forall>s d aseqs.\n       case CISK_control s d aseqs of\n       (a, aseqs', s') \\<Rightarrow>\n         thread_empty aseqs \\<and> (a, aseqs') = (None, []) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         \\<not> aborting s' d (the a) \\<and>\n         \\<not> waiting s' d (the a) \\<and>\n         (a, aseqs') =\n         (Some (hd (hd aseqs)), tl (hd aseqs) # tl aseqs) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         waiting s' d (the a) \\<and>\n         (a, aseqs', s') = (Some (hd (hd aseqs)), aseqs, s) \\<or>\n         (a, aseqs') = (None, tl aseqs)\n 10. \\<forall>s n d aseqs.\n        fst (CISK_control (cswitch n s) d aseqs) =\n        fst (CISK_control s d aseqs)\nA total of 15 subgoals...", "show \"\\<forall>s a a'. (\\<exists>aseq\\<in>AS_set. is_sub_seq a a' aseq) \\<and> invariant s \\<and> AS_precondition s (current s) a \\<and> \\<not> aborting s (current s) a \\<and> \\<not> waiting s (current s) a \\<longrightarrow>\n             AS_precondition (kstep s a) (current s) a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s a a'.\n       (\\<exists>aseq\\<in>AS_set. is_sub_seq a a' aseq) \\<and>\n       invariant s \\<and>\n       AS_precondition s (current s) a \\<and>\n       \\<not> aborting s (current s) a \\<and>\n       \\<not> waiting s (current s) a \\<longrightarrow>\n       AS_precondition (kstep s a) (current s) a'", "using AS_prec_after_step"], ["proof (prove)\nusing this:\n  \\<forall>s a a'.\n     (\\<exists>aseq\\<in>AS_set. is_sub_seq a a' aseq) \\<and>\n     invariant s \\<and>\n     AS_precondition s (current s) a \\<and>\n     \\<not> aborting s (current s) a \\<and>\n     \\<not> waiting s (current s) a \\<longrightarrow>\n     AS_precondition (kstep s a) (current s) a'\n\ngoal (1 subgoal):\n 1. \\<forall>s a a'.\n       (\\<exists>aseq\\<in>AS_set. is_sub_seq a a' aseq) \\<and>\n       invariant s \\<and>\n       AS_precondition s (current s) a \\<and>\n       \\<not> aborting s (current s) a \\<and>\n       \\<not> waiting s (current s) a \\<longrightarrow>\n       AS_precondition (kstep s a) (current s) a'", "by blast"], ["proof (state)\nthis:\n  \\<forall>s a a'.\n     (\\<exists>aseq\\<in>AS_set. is_sub_seq a a' aseq) \\<and>\n     invariant s \\<and>\n     AS_precondition s (current s) a \\<and>\n     \\<not> aborting s (current s) a \\<and>\n     \\<not> waiting s (current s) a \\<longrightarrow>\n     AS_precondition (kstep s a) (current s) a'\n\ngoal (14 subgoals):\n 1. \\<forall>s a.\n       \\<forall>d\\<in>involved a.\n          kprecondition s (the a) \\<longrightarrow> ifp d (current s)\n 2. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))\n 3. \\<forall>s execs u.\n       actions_in_execution (next_execs s execs u)\n       \\<subseteq> actions_in_execution (execs u)\n 4. \\<forall>s d a a'.\n       current s \\<noteq> d \\<and> AS_precondition s d a \\<longrightarrow>\n       AS_precondition (kstep s a') d a\n 5. \\<forall>s a. invariant s \\<longrightarrow> invariant (kstep s a)\n 6. \\<And>s a. kprecondition s a \\<equiv> kprecondition s a\n 7. \\<And>aseq.\n       realistic_execution aseq \\<equiv> set aseq \\<subseteq> AS_set\n 8. \\<forall>s d aseqs.\n       case CISK_control s d aseqs of\n       (a, aseqs', s') \\<Rightarrow>\n         thread_empty aseqs \\<and> (a, aseqs') = (None, []) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         \\<not> aborting s' d (the a) \\<and>\n         \\<not> waiting s' d (the a) \\<and>\n         (a, aseqs') =\n         (Some (hd (hd aseqs)), tl (hd aseqs) # tl aseqs) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         waiting s' d (the a) \\<and>\n         (a, aseqs', s') = (Some (hd (hd aseqs)), aseqs, s) \\<or>\n         (a, aseqs') = (None, tl aseqs)\n 9. \\<forall>s n d aseqs.\n       fst (CISK_control (cswitch n s) d aseqs) =\n       fst (CISK_control s d aseqs)\n 10. \\<forall>s execs d.\n        current s \\<noteq> d \\<longrightarrow>\n        fst (CISK_control (next_state s execs) d (execs d)) = None \\<or>\n        fst (CISK_control (next_state s execs) d (execs d)) =\n        fst (CISK_control s d (execs d))\nA total of 14 subgoals...", "show \"\\<forall> s d a a' . current s \\<noteq> d \\<and> AS_precondition s d a \\<longrightarrow> AS_precondition (kstep s a') d a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s d a a'.\n       current s \\<noteq> d \\<and> AS_precondition s d a \\<longrightarrow>\n       AS_precondition (kstep s a') d a", "using AS_prec_dom_independent"], ["proof (prove)\nusing this:\n  \\<forall>s d a a'.\n     current s \\<noteq> d \\<and> AS_precondition s d a \\<longrightarrow>\n     AS_precondition (kstep s a') d a\n\ngoal (1 subgoal):\n 1. \\<forall>s d a a'.\n       current s \\<noteq> d \\<and> AS_precondition s d a \\<longrightarrow>\n       AS_precondition (kstep s a') d a", "by blast"], ["proof (state)\nthis:\n  \\<forall>s d a a'.\n     current s \\<noteq> d \\<and> AS_precondition s d a \\<longrightarrow>\n     AS_precondition (kstep s a') d a\n\ngoal (13 subgoals):\n 1. \\<forall>s a.\n       \\<forall>d\\<in>involved a.\n          kprecondition s (the a) \\<longrightarrow> ifp d (current s)\n 2. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))\n 3. \\<forall>s execs u.\n       actions_in_execution (next_execs s execs u)\n       \\<subseteq> actions_in_execution (execs u)\n 4. \\<forall>s a. invariant s \\<longrightarrow> invariant (kstep s a)\n 5. \\<And>s a. kprecondition s a \\<equiv> kprecondition s a\n 6. \\<And>aseq.\n       realistic_execution aseq \\<equiv> set aseq \\<subseteq> AS_set\n 7. \\<forall>s d aseqs.\n       case CISK_control s d aseqs of\n       (a, aseqs', s') \\<Rightarrow>\n         thread_empty aseqs \\<and> (a, aseqs') = (None, []) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         \\<not> aborting s' d (the a) \\<and>\n         \\<not> waiting s' d (the a) \\<and>\n         (a, aseqs') =\n         (Some (hd (hd aseqs)), tl (hd aseqs) # tl aseqs) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         waiting s' d (the a) \\<and>\n         (a, aseqs', s') = (Some (hd (hd aseqs)), aseqs, s) \\<or>\n         (a, aseqs') = (None, tl aseqs)\n 8. \\<forall>s n d aseqs.\n       fst (CISK_control (cswitch n s) d aseqs) =\n       fst (CISK_control s d aseqs)\n 9. \\<forall>s execs d.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (next_state s execs) d (execs d)) = None \\<or>\n       fst (CISK_control (next_state s execs) d (execs d)) =\n       fst (CISK_control s d (execs d))\n 10. \\<forall>s a d aseqs.\n        current s \\<noteq> d \\<longrightarrow>\n        fst (CISK_control (step s a) d aseqs) = fst (CISK_control s d aseqs)\nA total of 13 subgoals...", "show \"\\<forall> s a . invariant s \\<longrightarrow> invariant (kstep s a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s a. invariant s \\<longrightarrow> invariant (kstep s a)", "using spec_of_invariant"], ["proof (prove)\nusing this:\n  \\<forall>s a. invariant s \\<longrightarrow> invariant (kstep s a)\n\ngoal (1 subgoal):\n 1. \\<forall>s a. invariant s \\<longrightarrow> invariant (kstep s a)", "by blast"], ["proof (state)\nthis:\n  \\<forall>s a. invariant s \\<longrightarrow> invariant (kstep s a)\n\ngoal (12 subgoals):\n 1. \\<forall>s a.\n       \\<forall>d\\<in>involved a.\n          kprecondition s (the a) \\<longrightarrow> ifp d (current s)\n 2. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))\n 3. \\<forall>s execs u.\n       actions_in_execution (next_execs s execs u)\n       \\<subseteq> actions_in_execution (execs u)\n 4. \\<And>s a. kprecondition s a \\<equiv> kprecondition s a\n 5. \\<And>aseq.\n       realistic_execution aseq \\<equiv> set aseq \\<subseteq> AS_set\n 6. \\<forall>s d aseqs.\n       case CISK_control s d aseqs of\n       (a, aseqs', s') \\<Rightarrow>\n         thread_empty aseqs \\<and> (a, aseqs') = (None, []) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         \\<not> aborting s' d (the a) \\<and>\n         \\<not> waiting s' d (the a) \\<and>\n         (a, aseqs') =\n         (Some (hd (hd aseqs)), tl (hd aseqs) # tl aseqs) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         waiting s' d (the a) \\<and>\n         (a, aseqs', s') = (Some (hd (hd aseqs)), aseqs, s) \\<or>\n         (a, aseqs') = (None, tl aseqs)\n 7. \\<forall>s n d aseqs.\n       fst (CISK_control (cswitch n s) d aseqs) =\n       fst (CISK_control s d aseqs)\n 8. \\<forall>s execs d.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (next_state s execs) d (execs d)) = None \\<or>\n       fst (CISK_control (next_state s execs) d (execs d)) =\n       fst (CISK_control s d (execs d))\n 9. \\<forall>s a d aseqs.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (step s a) d aseqs) = fst (CISK_control s d aseqs)\n 10. \\<forall>s d a execs.\n        AS_precondition s d a \\<longrightarrow>\n        AS_precondition (next_state s execs) d a\nA total of 12 subgoals...", "show \"\\<And>s a. kprecondition s a \\<equiv> kprecondition s a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s a. kprecondition s a \\<equiv> kprecondition s a", "by auto"], ["proof (state)\nthis:\n  kprecondition ?s ?a \\<equiv> kprecondition ?s ?a\n\ngoal (11 subgoals):\n 1. \\<forall>s a.\n       \\<forall>d\\<in>involved a.\n          kprecondition s (the a) \\<longrightarrow> ifp d (current s)\n 2. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))\n 3. \\<forall>s execs u.\n       actions_in_execution (next_execs s execs u)\n       \\<subseteq> actions_in_execution (execs u)\n 4. \\<And>aseq.\n       realistic_execution aseq \\<equiv> set aseq \\<subseteq> AS_set\n 5. \\<forall>s d aseqs.\n       case CISK_control s d aseqs of\n       (a, aseqs', s') \\<Rightarrow>\n         thread_empty aseqs \\<and> (a, aseqs') = (None, []) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         \\<not> aborting s' d (the a) \\<and>\n         \\<not> waiting s' d (the a) \\<and>\n         (a, aseqs') =\n         (Some (hd (hd aseqs)), tl (hd aseqs) # tl aseqs) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         waiting s' d (the a) \\<and>\n         (a, aseqs', s') = (Some (hd (hd aseqs)), aseqs, s) \\<or>\n         (a, aseqs') = (None, tl aseqs)\n 6. \\<forall>s n d aseqs.\n       fst (CISK_control (cswitch n s) d aseqs) =\n       fst (CISK_control s d aseqs)\n 7. \\<forall>s execs d.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (next_state s execs) d (execs d)) = None \\<or>\n       fst (CISK_control (next_state s execs) d (execs d)) =\n       fst (CISK_control s d (execs d))\n 8. \\<forall>s a d aseqs.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (step s a) d aseqs) = fst (CISK_control s d aseqs)\n 9. \\<forall>s d a execs.\n       AS_precondition s d a \\<longrightarrow>\n       AS_precondition (next_state s execs) d a\n 10. \\<forall>s execs.\n        invariant s \\<longrightarrow> invariant (next_state s execs)\nA total of 11 subgoals...", "show \"\\<And>aseq. realistic_execution aseq \\<equiv> set aseq \\<subseteq> AS_set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aseq.\n       realistic_execution aseq \\<equiv> set aseq \\<subseteq> AS_set", "unfolding realistic_execution_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aseq.\n       set aseq \\<subseteq> AS_set \\<equiv> set aseq \\<subseteq> AS_set", "by auto"], ["proof (state)\nthis:\n  realistic_execution ?aseq \\<equiv> set ?aseq \\<subseteq> AS_set\n\ngoal (10 subgoals):\n 1. \\<forall>s a.\n       \\<forall>d\\<in>involved a.\n          kprecondition s (the a) \\<longrightarrow> ifp d (current s)\n 2. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))\n 3. \\<forall>s execs u.\n       actions_in_execution (next_execs s execs u)\n       \\<subseteq> actions_in_execution (execs u)\n 4. \\<forall>s d aseqs.\n       case CISK_control s d aseqs of\n       (a, aseqs', s') \\<Rightarrow>\n         thread_empty aseqs \\<and> (a, aseqs') = (None, []) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         \\<not> aborting s' d (the a) \\<and>\n         \\<not> waiting s' d (the a) \\<and>\n         (a, aseqs') =\n         (Some (hd (hd aseqs)), tl (hd aseqs) # tl aseqs) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         waiting s' d (the a) \\<and>\n         (a, aseqs', s') = (Some (hd (hd aseqs)), aseqs, s) \\<or>\n         (a, aseqs') = (None, tl aseqs)\n 5. \\<forall>s n d aseqs.\n       fst (CISK_control (cswitch n s) d aseqs) =\n       fst (CISK_control s d aseqs)\n 6. \\<forall>s execs d.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (next_state s execs) d (execs d)) = None \\<or>\n       fst (CISK_control (next_state s execs) d (execs d)) =\n       fst (CISK_control s d (execs d))\n 7. \\<forall>s a d aseqs.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (step s a) d aseqs) = fst (CISK_control s d aseqs)\n 8. \\<forall>s d a execs.\n       AS_precondition s d a \\<longrightarrow>\n       AS_precondition (next_state s execs) d a\n 9. \\<forall>s execs.\n       invariant s \\<longrightarrow> invariant (next_state s execs)\n 10. \\<forall>s a. waiting s (current s) a \\<longrightarrow> kstep s a = s", "show \"\\<forall>s a. \\<forall> d \\<in> involved a. kprecondition s (the a) \\<longrightarrow> ifp d (current s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s a.\n       \\<forall>d\\<in>involved a.\n          kprecondition s (the a) \\<longrightarrow> ifp d (current s)", "using involved_ifp"], ["proof (prove)\nusing this:\n  \\<forall>s a.\n     \\<forall>d\\<in>kinvolved a.\n        AS_precondition s (current s) a \\<longrightarrow> ifp d (current s)\n\ngoal (1 subgoal):\n 1. \\<forall>s a.\n       \\<forall>d\\<in>involved a.\n          kprecondition s (the a) \\<longrightarrow> ifp d (current s)", "unfolding Kernel.involved_def"], ["proof (prove)\nusing this:\n  \\<forall>s a.\n     \\<forall>d\\<in>kinvolved a.\n        AS_precondition s (current s) a \\<longrightarrow> ifp d (current s)\n\ngoal (1 subgoal):\n 1. \\<forall>s a.\n       \\<forall>d\\<in>case a of None \\<Rightarrow> {}\n                      | Some a \\<Rightarrow> kinvolved a.\n          kprecondition s (the a) \\<longrightarrow> ifp d (current s)", "by (auto split: option.splits)"], ["proof (state)\nthis:\n  \\<forall>s a.\n     \\<forall>d\\<in>involved a.\n        kprecondition s (the a) \\<longrightarrow> ifp d (current s)\n\ngoal (9 subgoals):\n 1. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))\n 2. \\<forall>s execs u.\n       actions_in_execution (next_execs s execs u)\n       \\<subseteq> actions_in_execution (execs u)\n 3. \\<forall>s d aseqs.\n       case CISK_control s d aseqs of\n       (a, aseqs', s') \\<Rightarrow>\n         thread_empty aseqs \\<and> (a, aseqs') = (None, []) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         \\<not> aborting s' d (the a) \\<and>\n         \\<not> waiting s' d (the a) \\<and>\n         (a, aseqs') =\n         (Some (hd (hd aseqs)), tl (hd aseqs) # tl aseqs) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         waiting s' d (the a) \\<and>\n         (a, aseqs', s') = (Some (hd (hd aseqs)), aseqs, s) \\<or>\n         (a, aseqs') = (None, tl aseqs)\n 4. \\<forall>s n d aseqs.\n       fst (CISK_control (cswitch n s) d aseqs) =\n       fst (CISK_control s d aseqs)\n 5. \\<forall>s execs d.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (next_state s execs) d (execs d)) = None \\<or>\n       fst (CISK_control (next_state s execs) d (execs d)) =\n       fst (CISK_control s d (execs d))\n 6. \\<forall>s a d aseqs.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (step s a) d aseqs) = fst (CISK_control s d aseqs)\n 7. \\<forall>s d a execs.\n       AS_precondition s d a \\<longrightarrow>\n       AS_precondition (next_state s execs) d a\n 8. \\<forall>s execs.\n       invariant s \\<longrightarrow> invariant (next_state s execs)\n 9. \\<forall>s a. waiting s (current s) a \\<longrightarrow> kstep s a = s", "show \"\\<forall>s execs. next_action s execs \\<rightharpoonup> (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))", "using next_action_from_execs"], ["proof (prove)\nusing this:\n  \\<forall>s execs.\n     next_action s execs \\<rightharpoonup>\n     (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))\n\ngoal (1 subgoal):\n 1. \\<forall>s execs.\n       next_action s execs \\<rightharpoonup>\n       (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))", "by blast"], ["proof (state)\nthis:\n  \\<forall>s execs.\n     next_action s execs \\<rightharpoonup>\n     (\\<lambda>a. a \\<in> actions_in_execution (execs (current s)))\n\ngoal (8 subgoals):\n 1. \\<forall>s execs u.\n       actions_in_execution (next_execs s execs u)\n       \\<subseteq> actions_in_execution (execs u)\n 2. \\<forall>s d aseqs.\n       case CISK_control s d aseqs of\n       (a, aseqs', s') \\<Rightarrow>\n         thread_empty aseqs \\<and> (a, aseqs') = (None, []) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         \\<not> aborting s' d (the a) \\<and>\n         \\<not> waiting s' d (the a) \\<and>\n         (a, aseqs') =\n         (Some (hd (hd aseqs)), tl (hd aseqs) # tl aseqs) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         waiting s' d (the a) \\<and>\n         (a, aseqs', s') = (Some (hd (hd aseqs)), aseqs, s) \\<or>\n         (a, aseqs') = (None, tl aseqs)\n 3. \\<forall>s n d aseqs.\n       fst (CISK_control (cswitch n s) d aseqs) =\n       fst (CISK_control s d aseqs)\n 4. \\<forall>s execs d.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (next_state s execs) d (execs d)) = None \\<or>\n       fst (CISK_control (next_state s execs) d (execs d)) =\n       fst (CISK_control s d (execs d))\n 5. \\<forall>s a d aseqs.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (step s a) d aseqs) = fst (CISK_control s d aseqs)\n 6. \\<forall>s d a execs.\n       AS_precondition s d a \\<longrightarrow>\n       AS_precondition (next_state s execs) d a\n 7. \\<forall>s execs.\n       invariant s \\<longrightarrow> invariant (next_state s execs)\n 8. \\<forall>s a. waiting s (current s) a \\<longrightarrow> kstep s a = s", "show \"\\<forall>s execs u. actions_in_execution (next_execs s execs u) \\<subseteq> actions_in_execution (execs u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s execs u.\n       actions_in_execution (next_execs s execs u)\n       \\<subseteq> actions_in_execution (execs u)", "using next_execs_subset"], ["proof (prove)\nusing this:\n  \\<forall>s execs u.\n     actions_in_execution (next_execs s execs u)\n     \\<subseteq> actions_in_execution (execs u)\n\ngoal (1 subgoal):\n 1. \\<forall>s execs u.\n       actions_in_execution (next_execs s execs u)\n       \\<subseteq> actions_in_execution (execs u)", "by blast"], ["proof (state)\nthis:\n  \\<forall>s execs u.\n     actions_in_execution (next_execs s execs u)\n     \\<subseteq> actions_in_execution (execs u)\n\ngoal (7 subgoals):\n 1. \\<forall>s d aseqs.\n       case CISK_control s d aseqs of\n       (a, aseqs', s') \\<Rightarrow>\n         thread_empty aseqs \\<and> (a, aseqs') = (None, []) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         \\<not> aborting s' d (the a) \\<and>\n         \\<not> waiting s' d (the a) \\<and>\n         (a, aseqs') =\n         (Some (hd (hd aseqs)), tl (hd aseqs) # tl aseqs) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         waiting s' d (the a) \\<and>\n         (a, aseqs', s') = (Some (hd (hd aseqs)), aseqs, s) \\<or>\n         (a, aseqs') = (None, tl aseqs)\n 2. \\<forall>s n d aseqs.\n       fst (CISK_control (cswitch n s) d aseqs) =\n       fst (CISK_control s d aseqs)\n 3. \\<forall>s execs d.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (next_state s execs) d (execs d)) = None \\<or>\n       fst (CISK_control (next_state s execs) d (execs d)) =\n       fst (CISK_control s d (execs d))\n 4. \\<forall>s a d aseqs.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (step s a) d aseqs) = fst (CISK_control s d aseqs)\n 5. \\<forall>s d a execs.\n       AS_precondition s d a \\<longrightarrow>\n       AS_precondition (next_state s execs) d a\n 6. \\<forall>s execs.\n       invariant s \\<longrightarrow> invariant (next_state s execs)\n 7. \\<forall>s a. waiting s (current s) a \\<longrightarrow> kstep s a = s", "show \"\\<forall>s d aseqs.\n       case CISK_control s d aseqs of\n       (a, aseqs', s') \\<Rightarrow>\n         thread_empty aseqs \\<and> (a, aseqs') = (None, []) \\<or>\n         aseqs \\<noteq> [] \\<and> hd aseqs \\<noteq> [] \\<and> \\<not> aborting s' d (the a) \\<and> \\<not> waiting s' d (the a) \\<and> (a, aseqs') = (Some (hd (hd aseqs)), tl (hd aseqs) # tl aseqs) \\<or>\n         aseqs \\<noteq> [] \\<and> hd aseqs \\<noteq> [] \\<and> waiting s' d (the a) \\<and> (a, aseqs', s') = (Some (hd (hd aseqs)), aseqs, s) \\<or> (a, aseqs') = (None, tl aseqs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s d aseqs.\n       case CISK_control s d aseqs of\n       (a, aseqs', s') \\<Rightarrow>\n         thread_empty aseqs \\<and> (a, aseqs') = (None, []) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         \\<not> aborting s' d (the a) \\<and>\n         \\<not> waiting s' d (the a) \\<and>\n         (a, aseqs') =\n         (Some (hd (hd aseqs)), tl (hd aseqs) # tl aseqs) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         waiting s' d (the a) \\<and>\n         (a, aseqs', s') = (Some (hd (hd aseqs)), aseqs, s) \\<or>\n         (a, aseqs') = (None, tl aseqs)", "using CISK_control_spec"], ["proof (prove)\nusing this:\n  \\<forall>s d aseqs.\n     case CISK_control s d aseqs of\n     (a, aseqs', s') \\<Rightarrow>\n       thread_empty aseqs \\<and> (a, aseqs') = (None, []) \\<or>\n       aseqs \\<noteq> [] \\<and>\n       hd aseqs \\<noteq> [] \\<and>\n       \\<not> aborting s' d (the a) \\<and>\n       \\<not> waiting s' d (the a) \\<and>\n       (a, aseqs') = (Some (hd (hd aseqs)), tl (hd aseqs) # tl aseqs) \\<or>\n       aseqs \\<noteq> [] \\<and>\n       hd aseqs \\<noteq> [] \\<and>\n       waiting s' d (the a) \\<and>\n       (a, aseqs', s') = (Some (hd (hd aseqs)), aseqs, s) \\<or>\n       (a, aseqs') = (None, tl aseqs)\n\ngoal (1 subgoal):\n 1. \\<forall>s d aseqs.\n       case CISK_control s d aseqs of\n       (a, aseqs', s') \\<Rightarrow>\n         thread_empty aseqs \\<and> (a, aseqs') = (None, []) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         \\<not> aborting s' d (the a) \\<and>\n         \\<not> waiting s' d (the a) \\<and>\n         (a, aseqs') =\n         (Some (hd (hd aseqs)), tl (hd aseqs) # tl aseqs) \\<or>\n         aseqs \\<noteq> [] \\<and>\n         hd aseqs \\<noteq> [] \\<and>\n         waiting s' d (the a) \\<and>\n         (a, aseqs', s') = (Some (hd (hd aseqs)), aseqs, s) \\<or>\n         (a, aseqs') = (None, tl aseqs)", "by blast"], ["proof (state)\nthis:\n  \\<forall>s d aseqs.\n     case CISK_control s d aseqs of\n     (a, aseqs', s') \\<Rightarrow>\n       thread_empty aseqs \\<and> (a, aseqs') = (None, []) \\<or>\n       aseqs \\<noteq> [] \\<and>\n       hd aseqs \\<noteq> [] \\<and>\n       \\<not> aborting s' d (the a) \\<and>\n       \\<not> waiting s' d (the a) \\<and>\n       (a, aseqs') = (Some (hd (hd aseqs)), tl (hd aseqs) # tl aseqs) \\<or>\n       aseqs \\<noteq> [] \\<and>\n       hd aseqs \\<noteq> [] \\<and>\n       waiting s' d (the a) \\<and>\n       (a, aseqs', s') = (Some (hd (hd aseqs)), aseqs, s) \\<or>\n       (a, aseqs') = (None, tl aseqs)\n\ngoal (6 subgoals):\n 1. \\<forall>s n d aseqs.\n       fst (CISK_control (cswitch n s) d aseqs) =\n       fst (CISK_control s d aseqs)\n 2. \\<forall>s execs d.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (next_state s execs) d (execs d)) = None \\<or>\n       fst (CISK_control (next_state s execs) d (execs d)) =\n       fst (CISK_control s d (execs d))\n 3. \\<forall>s a d aseqs.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (step s a) d aseqs) = fst (CISK_control s d aseqs)\n 4. \\<forall>s d a execs.\n       AS_precondition s d a \\<longrightarrow>\n       AS_precondition (next_state s execs) d a\n 5. \\<forall>s execs.\n       invariant s \\<longrightarrow> invariant (next_state s execs)\n 6. \\<forall>s a. waiting s (current s) a \\<longrightarrow> kstep s a = s", "show \"\\<forall>s n d aseqs. fst (CISK_control (cswitch n s) d aseqs) = fst (CISK_control s d aseqs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s n d aseqs.\n       fst (CISK_control (cswitch n s) d aseqs) =\n       fst (CISK_control s d aseqs)", "using next_action_after_cswitch"], ["proof (prove)\nusing this:\n  \\<forall>s n d aseqs.\n     fst (CISK_control (cswitch n s) d aseqs) = fst (CISK_control s d aseqs)\n\ngoal (1 subgoal):\n 1. \\<forall>s n d aseqs.\n       fst (CISK_control (cswitch n s) d aseqs) =\n       fst (CISK_control s d aseqs)", "by auto"], ["proof (state)\nthis:\n  \\<forall>s n d aseqs.\n     fst (CISK_control (cswitch n s) d aseqs) = fst (CISK_control s d aseqs)\n\ngoal (5 subgoals):\n 1. \\<forall>s execs d.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (next_state s execs) d (execs d)) = None \\<or>\n       fst (CISK_control (next_state s execs) d (execs d)) =\n       fst (CISK_control s d (execs d))\n 2. \\<forall>s a d aseqs.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (step s a) d aseqs) = fst (CISK_control s d aseqs)\n 3. \\<forall>s d a execs.\n       AS_precondition s d a \\<longrightarrow>\n       AS_precondition (next_state s execs) d a\n 4. \\<forall>s execs.\n       invariant s \\<longrightarrow> invariant (next_state s execs)\n 5. \\<forall>s a. waiting s (current s) a \\<longrightarrow> kstep s a = s", "show \"\\<forall>s execs d.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (next_state s execs) d (execs d)) = None \\<or> fst (CISK_control (next_state s execs) d (execs d)) = fst (CISK_control s d (execs d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s execs d.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (next_state s execs) d (execs d)) = None \\<or>\n       fst (CISK_control (next_state s execs) d (execs d)) =\n       fst (CISK_control s d (execs d))", "using next_action_after_next_state"], ["proof (prove)\nusing this:\n  \\<forall>s execs d.\n     current s \\<noteq> d \\<longrightarrow>\n     fst (CISK_control (next_state s execs) d (execs d)) = None \\<or>\n     fst (CISK_control (next_state s execs) d (execs d)) =\n     fst (CISK_control s d (execs d))\n\ngoal (1 subgoal):\n 1. \\<forall>s execs d.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (next_state s execs) d (execs d)) = None \\<or>\n       fst (CISK_control (next_state s execs) d (execs d)) =\n       fst (CISK_control s d (execs d))", "by auto"], ["proof (state)\nthis:\n  \\<forall>s execs d.\n     current s \\<noteq> d \\<longrightarrow>\n     fst (CISK_control (next_state s execs) d (execs d)) = None \\<or>\n     fst (CISK_control (next_state s execs) d (execs d)) =\n     fst (CISK_control s d (execs d))\n\ngoal (4 subgoals):\n 1. \\<forall>s a d aseqs.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (step s a) d aseqs) = fst (CISK_control s d aseqs)\n 2. \\<forall>s d a execs.\n       AS_precondition s d a \\<longrightarrow>\n       AS_precondition (next_state s execs) d a\n 3. \\<forall>s execs.\n       invariant s \\<longrightarrow> invariant (next_state s execs)\n 4. \\<forall>s a. waiting s (current s) a \\<longrightarrow> kstep s a = s", "show \"\\<forall>s a d aseqs. current s \\<noteq> d \\<longrightarrow> fst (CISK_control (step s a) d aseqs) = fst (CISK_control s d aseqs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s a d aseqs.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (step s a) d aseqs) = fst (CISK_control s d aseqs)", "using next_action_after_step"], ["proof (prove)\nusing this:\n  \\<forall>s a d aseqs.\n     current s \\<noteq> d \\<longrightarrow>\n     fst (CISK_control (step s a) d aseqs) = fst (CISK_control s d aseqs)\n\ngoal (1 subgoal):\n 1. \\<forall>s a d aseqs.\n       current s \\<noteq> d \\<longrightarrow>\n       fst (CISK_control (step s a) d aseqs) = fst (CISK_control s d aseqs)", "by auto"], ["proof (state)\nthis:\n  \\<forall>s a d aseqs.\n     current s \\<noteq> d \\<longrightarrow>\n     fst (CISK_control (step s a) d aseqs) = fst (CISK_control s d aseqs)\n\ngoal (3 subgoals):\n 1. \\<forall>s d a execs.\n       AS_precondition s d a \\<longrightarrow>\n       AS_precondition (next_state s execs) d a\n 2. \\<forall>s execs.\n       invariant s \\<longrightarrow> invariant (next_state s execs)\n 3. \\<forall>s a. waiting s (current s) a \\<longrightarrow> kstep s a = s", "show \"\\<forall>s d a execs. AS_precondition s d a \\<longrightarrow> AS_precondition (next_state s execs) d a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s d a execs.\n       AS_precondition s d a \\<longrightarrow>\n       AS_precondition (next_state s execs) d a", "using next_state_precondition"], ["proof (prove)\nusing this:\n  \\<forall>s d a execs.\n     AS_precondition s d a \\<longrightarrow>\n     AS_precondition (next_state s execs) d a\n\ngoal (1 subgoal):\n 1. \\<forall>s d a execs.\n       AS_precondition s d a \\<longrightarrow>\n       AS_precondition (next_state s execs) d a", "by auto"], ["proof (state)\nthis:\n  \\<forall>s d a execs.\n     AS_precondition s d a \\<longrightarrow>\n     AS_precondition (next_state s execs) d a\n\ngoal (2 subgoals):\n 1. \\<forall>s execs.\n       invariant s \\<longrightarrow> invariant (next_state s execs)\n 2. \\<forall>s a. waiting s (current s) a \\<longrightarrow> kstep s a = s", "show \"\\<forall>s execs. invariant s \\<longrightarrow> invariant (next_state s execs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s execs.\n       invariant s \\<longrightarrow> invariant (next_state s execs)", "using next_state_invariant"], ["proof (prove)\nusing this:\n  \\<forall>s execs.\n     invariant s \\<longrightarrow> invariant (next_state s execs)\n\ngoal (1 subgoal):\n 1. \\<forall>s execs.\n       invariant s \\<longrightarrow> invariant (next_state s execs)", "by auto"], ["proof (state)\nthis:\n  \\<forall>s execs.\n     invariant s \\<longrightarrow> invariant (next_state s execs)\n\ngoal (1 subgoal):\n 1. \\<forall>s a. waiting s (current s) a \\<longrightarrow> kstep s a = s", "show \"\\<forall>s a. waiting s (current s) a \\<longrightarrow> kstep s a = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s a. waiting s (current s) a \\<longrightarrow> kstep s a = s", "using spec_of_waiting"], ["proof (prove)\nusing this:\n  \\<forall>s a. waiting s (current s) a \\<longrightarrow> kstep s a = s\n\ngoal (1 subgoal):\n 1. \\<forall>s a. waiting s (current s) a \\<longrightarrow> kstep s a = s", "by blast"], ["proof (state)\nthis:\n  \\<forall>s a. waiting s (current s) a \\<longrightarrow> kstep s a = s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\ngoal (1 subgoal):\n 1. isecure", "note interpreted = int.Interruptible_Separation_Kernel_axioms"], ["proof (state)\nthis:\n  Interruptible_Separation_Kernel kstep output_f s0 current cswitch\n   kprecondition realistic_execution CISK_control kinvolved ifp vpeq AS_set\n   invariant AS_precondition aborting waiting\n\ngoal (1 subgoal):\n 1. isecure", "note run_total_induct = Interruptible_Separation_Kernel.run_total.induct[of kstep output_f s0 current cswitch kprecondition realistic_execution\n                                                                             CISK_control kinvolved ifp vpeq AS_set invariant AS_precondition aborting waiting _ interrupt]"], ["proof (state)\nthis:\n  \\<lbrakk>Interruptible_Separation_Kernel kstep output_f s0 current cswitch\n            kprecondition realistic_execution CISK_control kinvolved ifp\n            vpeq AS_set invariant AS_precondition aborting waiting;\n   \\<And>s execs. ?P 0 s execs;\n   \\<And>n s execs.\n      \\<lbrakk>interrupt (Suc n); ?P n (cswitch (Suc n) s) execs\\<rbrakk>\n      \\<Longrightarrow> ?P (Suc n) s execs;\n   \\<And>n execs s.\n      \\<lbrakk>\\<not> interrupt (Suc n);\n       int.thread_empty (execs (current s)); ?P n s execs\\<rbrakk>\n      \\<Longrightarrow> ?P (Suc n) s execs;\n   \\<And>n execs s.\n      \\<lbrakk>\\<not> interrupt (Suc n);\n       \\<not> int.thread_empty (execs (current s));\n       ?P n (int.step (int.next_state s execs) (int.next_action s execs))\n        (int.next_execs s execs)\\<rbrakk>\n      \\<Longrightarrow> ?P (Suc n) s execs\\<rbrakk>\n  \\<Longrightarrow> ?P ?a0.0 ?a1.0 ?a2.0\n\ngoal (1 subgoal):\n 1. isecure", "have run_equals_run_total:\n     \"\\<And> n s execs . run n s execs \\<equiv> Interruptible_Separation_Kernel.run_total kstep current cswitch interrupt CISK_control n s execs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n s execs. run n s execs \\<equiv> int.run_total n s execs", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n s execs. run n s execs \\<equiv> int.run_total n s execs", "fix n s execs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n s execs. run n s execs \\<equiv> int.run_total n s execs", "show \"run n s execs \\<equiv> Interruptible_Separation_Kernel.run_total kstep current cswitch interrupt CISK_control n s execs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. run n s execs \\<equiv> int.run_total n s execs", "using interpreted int.step_def"], ["proof (prove)\nusing this:\n  Interruptible_Separation_Kernel kstep output_f s0 current cswitch\n   kprecondition realistic_execution CISK_control kinvolved ifp vpeq AS_set\n   invariant AS_precondition aborting waiting\n  int.step ?s ?oa \\<equiv>\n  case ?oa of None \\<Rightarrow> ?s | Some a \\<Rightarrow> kstep ?s a\n\ngoal (1 subgoal):\n 1. run n s execs \\<equiv> int.run_total n s execs", "by(induct n s execs rule: run_total_induct,auto split: option.splits)"], ["proof (state)\nthis:\n  run n s execs \\<equiv> int.run_total n s execs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  run ?n ?s ?execs \\<equiv> int.run_total ?n ?s ?execs\n\ngoal (1 subgoal):\n 1. isecure", "from interpreted"], ["proof (chain)\npicking this:\n  Interruptible_Separation_Kernel kstep output_f s0 current cswitch\n   kprecondition realistic_execution CISK_control kinvolved ifp vpeq AS_set\n   invariant AS_precondition aborting waiting", "have 0: \"Interruptible_Separation_Kernel.isecure_total kstep output_f s0 current cswitch interrupt realistic_execution CISK_control kinvolved ifp\""], ["proof (prove)\nusing this:\n  Interruptible_Separation_Kernel kstep output_f s0 current cswitch\n   kprecondition realistic_execution CISK_control kinvolved ifp vpeq AS_set\n   invariant AS_precondition aborting waiting\n\ngoal (1 subgoal):\n 1. int.isecure_total", "by (metis int.unwinding_implies_isecure_total)"], ["proof (state)\nthis:\n  int.isecure_total\n\ngoal (1 subgoal):\n 1. isecure", "from 0 run_equals_run_total"], ["proof (chain)\npicking this:\n  int.isecure_total\n  run ?n ?s ?execs \\<equiv> int.run_total ?n ?s ?execs", "have 1: \"NI_unrelated\""], ["proof (prove)\nusing this:\n  int.isecure_total\n  run ?n ?s ?execs \\<equiv> int.run_total ?n ?s ?execs\n\ngoal (1 subgoal):\n 1. NI_unrelated", "by (metis realistic_executions_def int.isecure_total_def int.realistic_executions_def int.NI_unrelated_total_def NI_unrelated_def)"], ["proof (state)\nthis:\n  NI_unrelated\n\ngoal (1 subgoal):\n 1. isecure", "from 0 run_equals_run_total"], ["proof (chain)\npicking this:\n  int.isecure_total\n  run ?n ?s ?execs \\<equiv> int.run_total ?n ?s ?execs", "have 2: \"NI_indirect_sources\""], ["proof (prove)\nusing this:\n  int.isecure_total\n  run ?n ?s ?execs \\<equiv> int.run_total ?n ?s ?execs\n\ngoal (1 subgoal):\n 1. NI_indirect_sources", "by (metis realistic_executions_def int.NI_indirect_sources_total_def int.isecure_total_def int.realistic_executions_def NI_indirect_sources_def)"], ["proof (state)\nthis:\n  NI_indirect_sources\n\ngoal (1 subgoal):\n 1. isecure", "from 1 2"], ["proof (chain)\npicking this:\n  NI_unrelated\n  NI_indirect_sources", "show ?thesis"], ["proof (prove)\nusing this:\n  NI_unrelated\n  NI_indirect_sources\n\ngoal (1 subgoal):\n 1. isecure", "unfolding isecure_def"], ["proof (prove)\nusing this:\n  NI_unrelated\n  NI_indirect_sources\n\ngoal (1 subgoal):\n 1. NI_unrelated \\<and> NI_indirect_sources", "by auto"], ["proof (state)\nthis:\n  isecure\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}