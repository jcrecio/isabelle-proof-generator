{"file_name": "/home/qj213/afp-2021-10-22/thys/CISC-Kernel/step/Step_vpeq_weakly_step_consistent.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CISC-Kernel", "problem_names": ["lemma ipc_precondition_weakly_step_consistent:\n  assumes eq_tid: \"vpeq (partition tid) s1 s2\"\n      and inv1: \"atomic_step_invariant s1\"\n      and inv2: \"atomic_step_invariant s2\"\n    shows \"ipc_precondition tid dir partner page s1 = ipc_precondition tid dir partner page s2\"", "lemma ev_signal_precondition_weakly_step_consistent:\n  assumes eq_tid: \"vpeq (partition tid) s1 s2\"\n      and inv1: \"atomic_step_invariant s1\"\n      and inv2: \"atomic_step_invariant s2\"\n    shows \"ev_signal_precondition tid partner s1 = ev_signal_precondition tid partner s2\"", "lemma set_object_value_consistent:\n  assumes eq_obs: \"vpeq u s1 s2\"\n    shows \"vpeq u (set_object_value x y s1) (set_object_value x y s2)\"", "lemma ipc_weakly_step_consistent:\n  assumes eq_obs: \"vpeq u s1 s2\"\n      and eq_act: \"vpeq (partition tid) s1 s2\"\n      and inv1:   \"atomic_step_invariant s1\"\n      and inv2:   \"atomic_step_invariant s2\"\n      and prec1: \"atomic_step_precondition s1 tid ipt\"\n      and prec2: \"atomic_step_precondition s1 tid ipt\"\n      and ipt_case: \"ipt = SK_IPC dir stage partner page\"\n    shows \"vpeq u\n                (atomic_step_ipc tid dir stage partner page s1)\n                (atomic_step_ipc tid dir stage partner page s2)\"", "lemma ev_wait_one_weakly_step_consistent:\n  assumes eq_obs: \"vpeq u s1 s2\"\n      and eq_act: \"vpeq (partition tid) s1 s2\"\n      and inv1:   \"atomic_step_invariant s1\"\n      and inv2:   \"atomic_step_invariant s2\"\n      and prec1: \"atomic_step_precondition s1 (current s1) ipt\"\n      and prec2: \"atomic_step_precondition s1 (current s1) ipt\"\n    shows \"vpeq u\n                (atomic_step_ev_wait_one tid  s1)\n                (atomic_step_ev_wait_one tid  s2)\"", "lemma ev_wait_all_weakly_step_consistent:\n  assumes eq_obs: \"vpeq u s1 s2\"\n      and eq_act: \"vpeq (partition tid) s1 s2\"\n      and inv1:   \"atomic_step_invariant s1\"\n      and inv2:   \"atomic_step_invariant s2\"\n      and prec1: \"atomic_step_precondition s1 (current s1) ipt\"\n      and prec2: \"atomic_step_precondition s1 (current s1) ipt\"\n    shows \"vpeq u\n                (atomic_step_ev_wait_all tid  s1)\n                (atomic_step_ev_wait_all tid  s2)\"", "lemma ev_signal_weakly_step_consistent:\n  assumes eq_obs: \"vpeq u s1 s2\"\n      and eq_act: \"vpeq (partition tid) s1 s2\"\n      and inv1:   \"atomic_step_invariant s1\"\n      and inv2:   \"atomic_step_invariant s2\"\n      and prec1: \"atomic_step_precondition s1 (current s1) ipt\"\n      and prec2: \"atomic_step_precondition s1 (current s1) ipt\"\n    shows \"vpeq u\n                (atomic_step_ev_signal tid partner s1)\n                (atomic_step_ev_signal tid partner s2)\"", "lemma extend_subj_subj_consistent:\n  fixes f :: \"partition_id_t \\<Rightarrow> partition_id_t \\<Rightarrow> bool\"\n  assumes \"vpeq u s1 s2\"\n  shows \"vpeq u (extend_subj_subj f s1) (extend_subj_subj f s2)\"", "theorem atomic_step_weakly_step_consistent:\n  assumes eq_obs: \"vpeq u s1 s2\"\n      and eq_act: \"vpeq (partition (current s1)) s1 s2\"\n      and inv1:   \"atomic_step_invariant s1\"\n      and inv2:   \"atomic_step_invariant s2\"\n      and prec1: \"atomic_step_precondition s1 (current s1) ipt\"\n      and prec2: \"atomic_step_precondition s2 (current s2) ipt\"\n      and eq_curr: \"current s1 = current s2\"\n  shows \"vpeq u (atomic_step s1 ipt) (atomic_step s2 ipt)\""], "translations": [["", "lemma ipc_precondition_weakly_step_consistent:\n  assumes eq_tid: \"vpeq (partition tid) s1 s2\"\n      and inv1: \"atomic_step_invariant s1\"\n      and inv2: \"atomic_step_invariant s2\"\n    shows \"ipc_precondition tid dir partner page s1 = ipc_precondition tid dir partner page s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipc_precondition tid dir partner page s1 =\n    ipc_precondition tid dir partner page s2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ipc_precondition tid dir partner page s1 =\n    ipc_precondition tid dir partner page s2", "let ?sender = \"case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner\""], ["proof (state)\ngoal (1 subgoal):\n 1. ipc_precondition tid dir partner page s1 =\n    ipc_precondition tid dir partner page s2", "let ?receiver = \"case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid\""], ["proof (state)\ngoal (1 subgoal):\n 1. ipc_precondition tid dir partner page s1 =\n    ipc_precondition tid dir partner page s2", "let ?local_access_mode = \"case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE\""], ["proof (state)\ngoal (1 subgoal):\n 1. ipc_precondition tid dir partner page s1 =\n    ipc_precondition tid dir partner page s2", "let ?A = \"sp_impl_subj_subj s1 (partition ?sender) (partition ?receiver)\n             = sp_impl_subj_subj s2 (partition ?sender) (partition ?receiver)\""], ["proof (state)\ngoal (1 subgoal):\n 1. ipc_precondition tid dir partner page s1 =\n    ipc_precondition tid dir partner page s2", "let ?B = \"sp_impl_subj_obj s1 (partition tid) (PAGE page) ?local_access_mode\n         = sp_impl_subj_obj s2 (partition tid) (PAGE page) ?local_access_mode\""], ["proof (state)\ngoal (1 subgoal):\n 1. ipc_precondition tid dir partner page s1 =\n    ipc_precondition tid dir partner page s2", "have A: \"?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sp_impl_subj_subj s1\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid)) =\n    sp_impl_subj_subj s2\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid))", "proof (cases \"Policy.sp_spec_subj_subj (partition ?sender) (partition ?receiver)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Policy.sp_spec_subj_subj\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner\n        | RECV \\<Rightarrow> tid)) \\<Longrightarrow>\n    sp_impl_subj_subj s1\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid)) =\n    sp_impl_subj_subj s2\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid))\n 2. \\<not> Policy.sp_spec_subj_subj\n            (Step.partition\n              (case dir of SEND \\<Rightarrow> tid\n               | RECV \\<Rightarrow> partner))\n            (Step.partition\n              (case dir of SEND \\<Rightarrow> partner\n               | RECV \\<Rightarrow> tid)) \\<Longrightarrow>\n    sp_impl_subj_subj s1\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid)) =\n    sp_impl_subj_subj s2\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid))", "case True"], ["proof (state)\nthis:\n  Policy.sp_spec_subj_subj\n   (Step.partition\n     (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n   (Step.partition\n     (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid))\n\ngoal (2 subgoals):\n 1. Policy.sp_spec_subj_subj\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner\n        | RECV \\<Rightarrow> tid)) \\<Longrightarrow>\n    sp_impl_subj_subj s1\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid)) =\n    sp_impl_subj_subj s2\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid))\n 2. \\<not> Policy.sp_spec_subj_subj\n            (Step.partition\n              (case dir of SEND \\<Rightarrow> tid\n               | RECV \\<Rightarrow> partner))\n            (Step.partition\n              (case dir of SEND \\<Rightarrow> partner\n               | RECV \\<Rightarrow> tid)) \\<Longrightarrow>\n    sp_impl_subj_subj s1\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid)) =\n    sp_impl_subj_subj s2\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid))", "thus ?A"], ["proof (prove)\nusing this:\n  Policy.sp_spec_subj_subj\n   (Step.partition\n     (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n   (Step.partition\n     (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid))\n\ngoal (1 subgoal):\n 1. sp_impl_subj_subj s1\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid)) =\n    sp_impl_subj_subj s2\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid))", "using eq_tid"], ["proof (prove)\nusing this:\n  Policy.sp_spec_subj_subj\n   (Step.partition\n     (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n   (Step.partition\n     (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid))\n  vpeq (Step.partition tid) s1 s2\n\ngoal (1 subgoal):\n 1. sp_impl_subj_subj s1\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid)) =\n    sp_impl_subj_subj s2\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid))", "unfolding vpeq_def vpeq_subj_subj_def"], ["proof (prove)\nusing this:\n  Policy.sp_spec_subj_subj\n   (Step.partition\n     (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n   (Step.partition\n     (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid))\n  vpeq_obj (Step.partition tid) s1 s2 \\<and>\n  (\\<forall>v.\n      (Policy.sp_spec_subj_subj (Step.partition tid) v \\<longrightarrow>\n       sp_impl_subj_subj s1 (Step.partition tid) v =\n       sp_impl_subj_subj s2 (Step.partition tid) v) \\<and>\n      (Policy.sp_spec_subj_subj v (Step.partition tid) \\<longrightarrow>\n       sp_impl_subj_subj s1 v (Step.partition tid) =\n       sp_impl_subj_subj s2 v (Step.partition tid))) \\<and>\n  vpeq_subj_obj (Step.partition tid) s1 s2 \\<and>\n  vpeq_local (Step.partition tid) s1 s2\n\ngoal (1 subgoal):\n 1. sp_impl_subj_subj s1\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid)) =\n    sp_impl_subj_subj s2\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid))", "by (simp split: ipc_direction_t.splits)"], ["proof (state)\nthis:\n  sp_impl_subj_subj s1\n   (Step.partition\n     (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n   (Step.partition\n     (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid)) =\n  sp_impl_subj_subj s2\n   (Step.partition\n     (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n   (Step.partition\n     (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid))\n\ngoal (1 subgoal):\n 1. \\<not> Policy.sp_spec_subj_subj\n            (Step.partition\n              (case dir of SEND \\<Rightarrow> tid\n               | RECV \\<Rightarrow> partner))\n            (Step.partition\n              (case dir of SEND \\<Rightarrow> partner\n               | RECV \\<Rightarrow> tid)) \\<Longrightarrow>\n    sp_impl_subj_subj s1\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid)) =\n    sp_impl_subj_subj s2\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> Policy.sp_spec_subj_subj\n            (Step.partition\n              (case dir of SEND \\<Rightarrow> tid\n               | RECV \\<Rightarrow> partner))\n            (Step.partition\n              (case dir of SEND \\<Rightarrow> partner\n               | RECV \\<Rightarrow> tid)) \\<Longrightarrow>\n    sp_impl_subj_subj s1\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid)) =\n    sp_impl_subj_subj s2\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid))", "case False"], ["proof (state)\nthis:\n  \\<not> Policy.sp_spec_subj_subj\n          (Step.partition\n            (case dir of SEND \\<Rightarrow> tid\n             | RECV \\<Rightarrow> partner))\n          (Step.partition\n            (case dir of SEND \\<Rightarrow> partner\n             | RECV \\<Rightarrow> tid))\n\ngoal (1 subgoal):\n 1. \\<not> Policy.sp_spec_subj_subj\n            (Step.partition\n              (case dir of SEND \\<Rightarrow> tid\n               | RECV \\<Rightarrow> partner))\n            (Step.partition\n              (case dir of SEND \\<Rightarrow> partner\n               | RECV \\<Rightarrow> tid)) \\<Longrightarrow>\n    sp_impl_subj_subj s1\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid)) =\n    sp_impl_subj_subj s2\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid))", "have \"sp_subset s1\" and \"sp_subset s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sp_subset s1 &&& sp_subset s2", "using inv1 inv2"], ["proof (prove)\nusing this:\n  atomic_step_invariant s1\n  atomic_step_invariant s2\n\ngoal (1 subgoal):\n 1. sp_subset s1 &&& sp_subset s2", "unfolding atomic_step_invariant_def sp_subset_def"], ["proof (prove)\nusing this:\n  (\\<forall>p1 p2.\n      sp_impl_subj_subj s1 p1 p2 \\<longrightarrow>\n      Policy.sp_spec_subj_subj p1 p2) \\<and>\n  (\\<forall>p1 p2 m.\n      sp_impl_subj_obj s1 p1 p2 m \\<longrightarrow>\n      Policy.sp_spec_subj_obj p1 p2 m)\n  (\\<forall>p1 p2.\n      sp_impl_subj_subj s2 p1 p2 \\<longrightarrow>\n      Policy.sp_spec_subj_subj p1 p2) \\<and>\n  (\\<forall>p1 p2 m.\n      sp_impl_subj_obj s2 p1 p2 m \\<longrightarrow>\n      Policy.sp_spec_subj_obj p1 p2 m)\n\ngoal (1 subgoal):\n 1. (\\<forall>p1 p2.\n        sp_impl_subj_subj s1 p1 p2 \\<longrightarrow>\n        Policy.sp_spec_subj_subj p1 p2) \\<and>\n    (\\<forall>p1 p2 m.\n        sp_impl_subj_obj s1 p1 p2 m \\<longrightarrow>\n        Policy.sp_spec_subj_obj p1 p2 m) &&&\n    (\\<forall>p1 p2.\n        sp_impl_subj_subj s2 p1 p2 \\<longrightarrow>\n        Policy.sp_spec_subj_subj p1 p2) \\<and>\n    (\\<forall>p1 p2 m.\n        sp_impl_subj_obj s2 p1 p2 m \\<longrightarrow>\n        Policy.sp_spec_subj_obj p1 p2 m)", "by auto"], ["proof (state)\nthis:\n  sp_subset s1\n  sp_subset s2\n\ngoal (1 subgoal):\n 1. \\<not> Policy.sp_spec_subj_subj\n            (Step.partition\n              (case dir of SEND \\<Rightarrow> tid\n               | RECV \\<Rightarrow> partner))\n            (Step.partition\n              (case dir of SEND \\<Rightarrow> partner\n               | RECV \\<Rightarrow> tid)) \\<Longrightarrow>\n    sp_impl_subj_subj s1\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid)) =\n    sp_impl_subj_subj s2\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid))", "hence \"\\<not> sp_impl_subj_subj s1 (partition ?sender) (partition ?receiver)\"\n          and \"\\<not> sp_impl_subj_subj s2 (partition ?sender) (partition ?receiver)\""], ["proof (prove)\nusing this:\n  sp_subset s1\n  sp_subset s2\n\ngoal (1 subgoal):\n 1. \\<not> sp_impl_subj_subj s1\n            (Step.partition\n              (case dir of SEND \\<Rightarrow> tid\n               | RECV \\<Rightarrow> partner))\n            (Step.partition\n              (case dir of SEND \\<Rightarrow> partner\n               | RECV \\<Rightarrow> tid)) &&&\n    \\<not> sp_impl_subj_subj s2\n            (Step.partition\n              (case dir of SEND \\<Rightarrow> tid\n               | RECV \\<Rightarrow> partner))\n            (Step.partition\n              (case dir of SEND \\<Rightarrow> partner\n               | RECV \\<Rightarrow> tid))", "using False"], ["proof (prove)\nusing this:\n  sp_subset s1\n  sp_subset s2\n  \\<not> Policy.sp_spec_subj_subj\n          (Step.partition\n            (case dir of SEND \\<Rightarrow> tid\n             | RECV \\<Rightarrow> partner))\n          (Step.partition\n            (case dir of SEND \\<Rightarrow> partner\n             | RECV \\<Rightarrow> tid))\n\ngoal (1 subgoal):\n 1. \\<not> sp_impl_subj_subj s1\n            (Step.partition\n              (case dir of SEND \\<Rightarrow> tid\n               | RECV \\<Rightarrow> partner))\n            (Step.partition\n              (case dir of SEND \\<Rightarrow> partner\n               | RECV \\<Rightarrow> tid)) &&&\n    \\<not> sp_impl_subj_subj s2\n            (Step.partition\n              (case dir of SEND \\<Rightarrow> tid\n               | RECV \\<Rightarrow> partner))\n            (Step.partition\n              (case dir of SEND \\<Rightarrow> partner\n               | RECV \\<Rightarrow> tid))", "unfolding sp_subset_def"], ["proof (prove)\nusing this:\n  (\\<forall>p1 p2.\n      sp_impl_subj_subj s1 p1 p2 \\<longrightarrow>\n      Policy.sp_spec_subj_subj p1 p2) \\<and>\n  (\\<forall>p1 p2 m.\n      sp_impl_subj_obj s1 p1 p2 m \\<longrightarrow>\n      Policy.sp_spec_subj_obj p1 p2 m)\n  (\\<forall>p1 p2.\n      sp_impl_subj_subj s2 p1 p2 \\<longrightarrow>\n      Policy.sp_spec_subj_subj p1 p2) \\<and>\n  (\\<forall>p1 p2 m.\n      sp_impl_subj_obj s2 p1 p2 m \\<longrightarrow>\n      Policy.sp_spec_subj_obj p1 p2 m)\n  \\<not> Policy.sp_spec_subj_subj\n          (Step.partition\n            (case dir of SEND \\<Rightarrow> tid\n             | RECV \\<Rightarrow> partner))\n          (Step.partition\n            (case dir of SEND \\<Rightarrow> partner\n             | RECV \\<Rightarrow> tid))\n\ngoal (1 subgoal):\n 1. \\<not> sp_impl_subj_subj s1\n            (Step.partition\n              (case dir of SEND \\<Rightarrow> tid\n               | RECV \\<Rightarrow> partner))\n            (Step.partition\n              (case dir of SEND \\<Rightarrow> partner\n               | RECV \\<Rightarrow> tid)) &&&\n    \\<not> sp_impl_subj_subj s2\n            (Step.partition\n              (case dir of SEND \\<Rightarrow> tid\n               | RECV \\<Rightarrow> partner))\n            (Step.partition\n              (case dir of SEND \\<Rightarrow> partner\n               | RECV \\<Rightarrow> tid))", "by auto"], ["proof (state)\nthis:\n  \\<not> sp_impl_subj_subj s1\n          (Step.partition\n            (case dir of SEND \\<Rightarrow> tid\n             | RECV \\<Rightarrow> partner))\n          (Step.partition\n            (case dir of SEND \\<Rightarrow> partner\n             | RECV \\<Rightarrow> tid))\n  \\<not> sp_impl_subj_subj s2\n          (Step.partition\n            (case dir of SEND \\<Rightarrow> tid\n             | RECV \\<Rightarrow> partner))\n          (Step.partition\n            (case dir of SEND \\<Rightarrow> partner\n             | RECV \\<Rightarrow> tid))\n\ngoal (1 subgoal):\n 1. \\<not> Policy.sp_spec_subj_subj\n            (Step.partition\n              (case dir of SEND \\<Rightarrow> tid\n               | RECV \\<Rightarrow> partner))\n            (Step.partition\n              (case dir of SEND \\<Rightarrow> partner\n               | RECV \\<Rightarrow> tid)) \\<Longrightarrow>\n    sp_impl_subj_subj s1\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid)) =\n    sp_impl_subj_subj s2\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid))", "thus ?A"], ["proof (prove)\nusing this:\n  \\<not> sp_impl_subj_subj s1\n          (Step.partition\n            (case dir of SEND \\<Rightarrow> tid\n             | RECV \\<Rightarrow> partner))\n          (Step.partition\n            (case dir of SEND \\<Rightarrow> partner\n             | RECV \\<Rightarrow> tid))\n  \\<not> sp_impl_subj_subj s2\n          (Step.partition\n            (case dir of SEND \\<Rightarrow> tid\n             | RECV \\<Rightarrow> partner))\n          (Step.partition\n            (case dir of SEND \\<Rightarrow> partner\n             | RECV \\<Rightarrow> tid))\n\ngoal (1 subgoal):\n 1. sp_impl_subj_subj s1\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid)) =\n    sp_impl_subj_subj s2\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n     (Step.partition\n       (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid))", "by auto"], ["proof (state)\nthis:\n  sp_impl_subj_subj s1\n   (Step.partition\n     (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n   (Step.partition\n     (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid)) =\n  sp_impl_subj_subj s2\n   (Step.partition\n     (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n   (Step.partition\n     (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sp_impl_subj_subj s1\n   (Step.partition\n     (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n   (Step.partition\n     (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid)) =\n  sp_impl_subj_subj s2\n   (Step.partition\n     (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n   (Step.partition\n     (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid))\n\ngoal (1 subgoal):\n 1. ipc_precondition tid dir partner page s1 =\n    ipc_precondition tid dir partner page s2", "have B: \"?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sp_impl_subj_obj s1 (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE) =\n    sp_impl_subj_obj s2 (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)", "proof (cases \"Policy.sp_spec_subj_obj (partition tid) (PAGE page) ?local_access_mode\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Policy.sp_spec_subj_obj (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ\n      | RECV \\<Rightarrow> WRITE) \\<Longrightarrow>\n    sp_impl_subj_obj s1 (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE) =\n    sp_impl_subj_obj s2 (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)\n 2. \\<not> Policy.sp_spec_subj_obj (Step.partition tid) (PAGE page)\n            (case dir of SEND \\<Rightarrow> READ\n             | RECV \\<Rightarrow> WRITE) \\<Longrightarrow>\n    sp_impl_subj_obj s1 (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE) =\n    sp_impl_subj_obj s2 (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)", "case True"], ["proof (state)\nthis:\n  Policy.sp_spec_subj_obj (Step.partition tid) (PAGE page)\n   (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)\n\ngoal (2 subgoals):\n 1. Policy.sp_spec_subj_obj (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ\n      | RECV \\<Rightarrow> WRITE) \\<Longrightarrow>\n    sp_impl_subj_obj s1 (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE) =\n    sp_impl_subj_obj s2 (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)\n 2. \\<not> Policy.sp_spec_subj_obj (Step.partition tid) (PAGE page)\n            (case dir of SEND \\<Rightarrow> READ\n             | RECV \\<Rightarrow> WRITE) \\<Longrightarrow>\n    sp_impl_subj_obj s1 (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE) =\n    sp_impl_subj_obj s2 (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)", "thus ?B"], ["proof (prove)\nusing this:\n  Policy.sp_spec_subj_obj (Step.partition tid) (PAGE page)\n   (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)\n\ngoal (1 subgoal):\n 1. sp_impl_subj_obj s1 (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE) =\n    sp_impl_subj_obj s2 (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)", "using eq_tid"], ["proof (prove)\nusing this:\n  Policy.sp_spec_subj_obj (Step.partition tid) (PAGE page)\n   (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)\n  vpeq (Step.partition tid) s1 s2\n\ngoal (1 subgoal):\n 1. sp_impl_subj_obj s1 (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE) =\n    sp_impl_subj_obj s2 (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)", "unfolding vpeq_def vpeq_subj_obj_def"], ["proof (prove)\nusing this:\n  Policy.sp_spec_subj_obj (Step.partition tid) (PAGE page)\n   (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)\n  vpeq_obj (Step.partition tid) s1 s2 \\<and>\n  vpeq_subj_subj (Step.partition tid) s1 s2 \\<and>\n  (\\<forall>ob m p1.\n      (Policy.sp_spec_subj_obj (Step.partition tid) ob m \\<longrightarrow>\n       sp_impl_subj_obj s1 (Step.partition tid) ob m =\n       sp_impl_subj_obj s2 (Step.partition tid) ob m) \\<and>\n      (Policy.sp_spec_subj_obj p1 ob PROVIDE \\<and>\n       (Policy.sp_spec_subj_obj (Step.partition tid) ob READ \\<or>\n        Policy.sp_spec_subj_obj (Step.partition tid) ob\n         WRITE) \\<longrightarrow>\n       sp_impl_subj_obj s1 p1 ob PROVIDE =\n       sp_impl_subj_obj s2 p1 ob PROVIDE)) \\<and>\n  vpeq_local (Step.partition tid) s1 s2\n\ngoal (1 subgoal):\n 1. sp_impl_subj_obj s1 (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE) =\n    sp_impl_subj_obj s2 (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)", "by (simp split: ipc_direction_t.splits)"], ["proof (state)\nthis:\n  sp_impl_subj_obj s1 (Step.partition tid) (PAGE page)\n   (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE) =\n  sp_impl_subj_obj s2 (Step.partition tid) (PAGE page)\n   (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)\n\ngoal (1 subgoal):\n 1. \\<not> Policy.sp_spec_subj_obj (Step.partition tid) (PAGE page)\n            (case dir of SEND \\<Rightarrow> READ\n             | RECV \\<Rightarrow> WRITE) \\<Longrightarrow>\n    sp_impl_subj_obj s1 (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE) =\n    sp_impl_subj_obj s2 (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> Policy.sp_spec_subj_obj (Step.partition tid) (PAGE page)\n            (case dir of SEND \\<Rightarrow> READ\n             | RECV \\<Rightarrow> WRITE) \\<Longrightarrow>\n    sp_impl_subj_obj s1 (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE) =\n    sp_impl_subj_obj s2 (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)", "case False"], ["proof (state)\nthis:\n  \\<not> Policy.sp_spec_subj_obj (Step.partition tid) (PAGE page)\n          (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)\n\ngoal (1 subgoal):\n 1. \\<not> Policy.sp_spec_subj_obj (Step.partition tid) (PAGE page)\n            (case dir of SEND \\<Rightarrow> READ\n             | RECV \\<Rightarrow> WRITE) \\<Longrightarrow>\n    sp_impl_subj_obj s1 (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE) =\n    sp_impl_subj_obj s2 (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)", "have \"sp_subset s1\" and \"sp_subset s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sp_subset s1 &&& sp_subset s2", "using inv1 inv2"], ["proof (prove)\nusing this:\n  atomic_step_invariant s1\n  atomic_step_invariant s2\n\ngoal (1 subgoal):\n 1. sp_subset s1 &&& sp_subset s2", "unfolding atomic_step_invariant_def sp_subset_def"], ["proof (prove)\nusing this:\n  (\\<forall>p1 p2.\n      sp_impl_subj_subj s1 p1 p2 \\<longrightarrow>\n      Policy.sp_spec_subj_subj p1 p2) \\<and>\n  (\\<forall>p1 p2 m.\n      sp_impl_subj_obj s1 p1 p2 m \\<longrightarrow>\n      Policy.sp_spec_subj_obj p1 p2 m)\n  (\\<forall>p1 p2.\n      sp_impl_subj_subj s2 p1 p2 \\<longrightarrow>\n      Policy.sp_spec_subj_subj p1 p2) \\<and>\n  (\\<forall>p1 p2 m.\n      sp_impl_subj_obj s2 p1 p2 m \\<longrightarrow>\n      Policy.sp_spec_subj_obj p1 p2 m)\n\ngoal (1 subgoal):\n 1. (\\<forall>p1 p2.\n        sp_impl_subj_subj s1 p1 p2 \\<longrightarrow>\n        Policy.sp_spec_subj_subj p1 p2) \\<and>\n    (\\<forall>p1 p2 m.\n        sp_impl_subj_obj s1 p1 p2 m \\<longrightarrow>\n        Policy.sp_spec_subj_obj p1 p2 m) &&&\n    (\\<forall>p1 p2.\n        sp_impl_subj_subj s2 p1 p2 \\<longrightarrow>\n        Policy.sp_spec_subj_subj p1 p2) \\<and>\n    (\\<forall>p1 p2 m.\n        sp_impl_subj_obj s2 p1 p2 m \\<longrightarrow>\n        Policy.sp_spec_subj_obj p1 p2 m)", "by auto"], ["proof (state)\nthis:\n  sp_subset s1\n  sp_subset s2\n\ngoal (1 subgoal):\n 1. \\<not> Policy.sp_spec_subj_obj (Step.partition tid) (PAGE page)\n            (case dir of SEND \\<Rightarrow> READ\n             | RECV \\<Rightarrow> WRITE) \\<Longrightarrow>\n    sp_impl_subj_obj s1 (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE) =\n    sp_impl_subj_obj s2 (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)", "hence \"\\<not> sp_impl_subj_obj s1 (partition tid) (PAGE page) ?local_access_mode\"\n          and \"\\<not> sp_impl_subj_obj s2 (partition tid) (PAGE page) ?local_access_mode\""], ["proof (prove)\nusing this:\n  sp_subset s1\n  sp_subset s2\n\ngoal (1 subgoal):\n 1. \\<not> sp_impl_subj_obj s1 (Step.partition tid) (PAGE page)\n            (case dir of SEND \\<Rightarrow> READ\n             | RECV \\<Rightarrow> WRITE) &&&\n    \\<not> sp_impl_subj_obj s2 (Step.partition tid) (PAGE page)\n            (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)", "using False"], ["proof (prove)\nusing this:\n  sp_subset s1\n  sp_subset s2\n  \\<not> Policy.sp_spec_subj_obj (Step.partition tid) (PAGE page)\n          (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)\n\ngoal (1 subgoal):\n 1. \\<not> sp_impl_subj_obj s1 (Step.partition tid) (PAGE page)\n            (case dir of SEND \\<Rightarrow> READ\n             | RECV \\<Rightarrow> WRITE) &&&\n    \\<not> sp_impl_subj_obj s2 (Step.partition tid) (PAGE page)\n            (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)", "unfolding sp_subset_def"], ["proof (prove)\nusing this:\n  (\\<forall>p1 p2.\n      sp_impl_subj_subj s1 p1 p2 \\<longrightarrow>\n      Policy.sp_spec_subj_subj p1 p2) \\<and>\n  (\\<forall>p1 p2 m.\n      sp_impl_subj_obj s1 p1 p2 m \\<longrightarrow>\n      Policy.sp_spec_subj_obj p1 p2 m)\n  (\\<forall>p1 p2.\n      sp_impl_subj_subj s2 p1 p2 \\<longrightarrow>\n      Policy.sp_spec_subj_subj p1 p2) \\<and>\n  (\\<forall>p1 p2 m.\n      sp_impl_subj_obj s2 p1 p2 m \\<longrightarrow>\n      Policy.sp_spec_subj_obj p1 p2 m)\n  \\<not> Policy.sp_spec_subj_obj (Step.partition tid) (PAGE page)\n          (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)\n\ngoal (1 subgoal):\n 1. \\<not> sp_impl_subj_obj s1 (Step.partition tid) (PAGE page)\n            (case dir of SEND \\<Rightarrow> READ\n             | RECV \\<Rightarrow> WRITE) &&&\n    \\<not> sp_impl_subj_obj s2 (Step.partition tid) (PAGE page)\n            (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)", "by auto"], ["proof (state)\nthis:\n  \\<not> sp_impl_subj_obj s1 (Step.partition tid) (PAGE page)\n          (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)\n  \\<not> sp_impl_subj_obj s2 (Step.partition tid) (PAGE page)\n          (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)\n\ngoal (1 subgoal):\n 1. \\<not> Policy.sp_spec_subj_obj (Step.partition tid) (PAGE page)\n            (case dir of SEND \\<Rightarrow> READ\n             | RECV \\<Rightarrow> WRITE) \\<Longrightarrow>\n    sp_impl_subj_obj s1 (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE) =\n    sp_impl_subj_obj s2 (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)", "thus ?B"], ["proof (prove)\nusing this:\n  \\<not> sp_impl_subj_obj s1 (Step.partition tid) (PAGE page)\n          (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)\n  \\<not> sp_impl_subj_obj s2 (Step.partition tid) (PAGE page)\n          (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)\n\ngoal (1 subgoal):\n 1. sp_impl_subj_obj s1 (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE) =\n    sp_impl_subj_obj s2 (Step.partition tid) (PAGE page)\n     (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)", "by auto"], ["proof (state)\nthis:\n  sp_impl_subj_obj s1 (Step.partition tid) (PAGE page)\n   (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE) =\n  sp_impl_subj_obj s2 (Step.partition tid) (PAGE page)\n   (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sp_impl_subj_obj s1 (Step.partition tid) (PAGE page)\n   (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE) =\n  sp_impl_subj_obj s2 (Step.partition tid) (PAGE page)\n   (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)\n\ngoal (1 subgoal):\n 1. ipc_precondition tid dir partner page s1 =\n    ipc_precondition tid dir partner page s2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipc_precondition tid dir partner page s1 =\n    ipc_precondition tid dir partner page s2", "using A B"], ["proof (prove)\nusing this:\n  sp_impl_subj_subj s1\n   (Step.partition\n     (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n   (Step.partition\n     (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid)) =\n  sp_impl_subj_subj s2\n   (Step.partition\n     (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n   (Step.partition\n     (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid))\n  sp_impl_subj_obj s1 (Step.partition tid) (PAGE page)\n   (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE) =\n  sp_impl_subj_obj s2 (Step.partition tid) (PAGE page)\n   (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)\n\ngoal (1 subgoal):\n 1. ipc_precondition tid dir partner page s1 =\n    ipc_precondition tid dir partner page s2", "unfolding ipc_precondition_def"], ["proof (prove)\nusing this:\n  sp_impl_subj_subj s1\n   (Step.partition\n     (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n   (Step.partition\n     (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid)) =\n  sp_impl_subj_subj s2\n   (Step.partition\n     (case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner))\n   (Step.partition\n     (case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid))\n  sp_impl_subj_obj s1 (Step.partition tid) (PAGE page)\n   (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE) =\n  sp_impl_subj_obj s2 (Step.partition tid) (PAGE page)\n   (case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE)\n\ngoal (1 subgoal):\n 1. (let sender =\n           case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner;\n         receiver =\n           case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid;\n         local_access_mode =\n           case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE\n     in sp_impl_subj_subj s1 (Step.partition sender)\n         (Step.partition receiver) \\<and>\n        sp_impl_subj_obj s1 (Step.partition tid) (PAGE page)\n         local_access_mode) =\n    (let sender =\n           case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner;\n         receiver =\n           case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid;\n         local_access_mode =\n           case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE\n     in sp_impl_subj_subj s2 (Step.partition sender)\n         (Step.partition receiver) \\<and>\n        sp_impl_subj_obj s2 (Step.partition tid) (PAGE page)\n         local_access_mode)", "by auto"], ["proof (state)\nthis:\n  ipc_precondition tid dir partner page s1 =\n  ipc_precondition tid dir partner page s2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ev_signal_precondition_weakly_step_consistent:\n  assumes eq_tid: \"vpeq (partition tid) s1 s2\"\n      and inv1: \"atomic_step_invariant s1\"\n      and inv2: \"atomic_step_invariant s2\"\n    shows \"ev_signal_precondition tid partner s1 = ev_signal_precondition tid partner s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ev_signal_precondition tid partner s1 =\n    ev_signal_precondition tid partner s2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ev_signal_precondition tid partner s1 =\n    ev_signal_precondition tid partner s2", "let ?A = \"sp_impl_subj_subj s1 (partition tid) (partition partner)\n             = sp_impl_subj_subj s2 (partition tid) (partition partner)\""], ["proof (state)\ngoal (1 subgoal):\n 1. ev_signal_precondition tid partner s1 =\n    ev_signal_precondition tid partner s2", "have A: \"?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sp_impl_subj_subj s1 (Step.partition tid) (Step.partition partner) =\n    sp_impl_subj_subj s2 (Step.partition tid) (Step.partition partner)", "proof (cases \"Policy.sp_spec_subj_subj (partition tid) (partition partner)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Policy.sp_spec_subj_subj (Step.partition tid)\n     (Step.partition partner) \\<Longrightarrow>\n    sp_impl_subj_subj s1 (Step.partition tid) (Step.partition partner) =\n    sp_impl_subj_subj s2 (Step.partition tid) (Step.partition partner)\n 2. \\<not> Policy.sp_spec_subj_subj (Step.partition tid)\n            (Step.partition partner) \\<Longrightarrow>\n    sp_impl_subj_subj s1 (Step.partition tid) (Step.partition partner) =\n    sp_impl_subj_subj s2 (Step.partition tid) (Step.partition partner)", "case True"], ["proof (state)\nthis:\n  Policy.sp_spec_subj_subj (Step.partition tid) (Step.partition partner)\n\ngoal (2 subgoals):\n 1. Policy.sp_spec_subj_subj (Step.partition tid)\n     (Step.partition partner) \\<Longrightarrow>\n    sp_impl_subj_subj s1 (Step.partition tid) (Step.partition partner) =\n    sp_impl_subj_subj s2 (Step.partition tid) (Step.partition partner)\n 2. \\<not> Policy.sp_spec_subj_subj (Step.partition tid)\n            (Step.partition partner) \\<Longrightarrow>\n    sp_impl_subj_subj s1 (Step.partition tid) (Step.partition partner) =\n    sp_impl_subj_subj s2 (Step.partition tid) (Step.partition partner)", "thus ?A"], ["proof (prove)\nusing this:\n  Policy.sp_spec_subj_subj (Step.partition tid) (Step.partition partner)\n\ngoal (1 subgoal):\n 1. sp_impl_subj_subj s1 (Step.partition tid) (Step.partition partner) =\n    sp_impl_subj_subj s2 (Step.partition tid) (Step.partition partner)", "using eq_tid"], ["proof (prove)\nusing this:\n  Policy.sp_spec_subj_subj (Step.partition tid) (Step.partition partner)\n  vpeq (Step.partition tid) s1 s2\n\ngoal (1 subgoal):\n 1. sp_impl_subj_subj s1 (Step.partition tid) (Step.partition partner) =\n    sp_impl_subj_subj s2 (Step.partition tid) (Step.partition partner)", "unfolding vpeq_def vpeq_subj_subj_def"], ["proof (prove)\nusing this:\n  Policy.sp_spec_subj_subj (Step.partition tid) (Step.partition partner)\n  vpeq_obj (Step.partition tid) s1 s2 \\<and>\n  (\\<forall>v.\n      (Policy.sp_spec_subj_subj (Step.partition tid) v \\<longrightarrow>\n       sp_impl_subj_subj s1 (Step.partition tid) v =\n       sp_impl_subj_subj s2 (Step.partition tid) v) \\<and>\n      (Policy.sp_spec_subj_subj v (Step.partition tid) \\<longrightarrow>\n       sp_impl_subj_subj s1 v (Step.partition tid) =\n       sp_impl_subj_subj s2 v (Step.partition tid))) \\<and>\n  vpeq_subj_obj (Step.partition tid) s1 s2 \\<and>\n  vpeq_local (Step.partition tid) s1 s2\n\ngoal (1 subgoal):\n 1. sp_impl_subj_subj s1 (Step.partition tid) (Step.partition partner) =\n    sp_impl_subj_subj s2 (Step.partition tid) (Step.partition partner)", "by (simp split: ipc_direction_t.splits)"], ["proof (state)\nthis:\n  sp_impl_subj_subj s1 (Step.partition tid) (Step.partition partner) =\n  sp_impl_subj_subj s2 (Step.partition tid) (Step.partition partner)\n\ngoal (1 subgoal):\n 1. \\<not> Policy.sp_spec_subj_subj (Step.partition tid)\n            (Step.partition partner) \\<Longrightarrow>\n    sp_impl_subj_subj s1 (Step.partition tid) (Step.partition partner) =\n    sp_impl_subj_subj s2 (Step.partition tid) (Step.partition partner)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> Policy.sp_spec_subj_subj (Step.partition tid)\n            (Step.partition partner) \\<Longrightarrow>\n    sp_impl_subj_subj s1 (Step.partition tid) (Step.partition partner) =\n    sp_impl_subj_subj s2 (Step.partition tid) (Step.partition partner)", "case False"], ["proof (state)\nthis:\n  \\<not> Policy.sp_spec_subj_subj (Step.partition tid)\n          (Step.partition partner)\n\ngoal (1 subgoal):\n 1. \\<not> Policy.sp_spec_subj_subj (Step.partition tid)\n            (Step.partition partner) \\<Longrightarrow>\n    sp_impl_subj_subj s1 (Step.partition tid) (Step.partition partner) =\n    sp_impl_subj_subj s2 (Step.partition tid) (Step.partition partner)", "have \"sp_subset s1\" and \"sp_subset s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sp_subset s1 &&& sp_subset s2", "using inv1 inv2"], ["proof (prove)\nusing this:\n  atomic_step_invariant s1\n  atomic_step_invariant s2\n\ngoal (1 subgoal):\n 1. sp_subset s1 &&& sp_subset s2", "unfolding atomic_step_invariant_def sp_subset_def"], ["proof (prove)\nusing this:\n  (\\<forall>p1 p2.\n      sp_impl_subj_subj s1 p1 p2 \\<longrightarrow>\n      Policy.sp_spec_subj_subj p1 p2) \\<and>\n  (\\<forall>p1 p2 m.\n      sp_impl_subj_obj s1 p1 p2 m \\<longrightarrow>\n      Policy.sp_spec_subj_obj p1 p2 m)\n  (\\<forall>p1 p2.\n      sp_impl_subj_subj s2 p1 p2 \\<longrightarrow>\n      Policy.sp_spec_subj_subj p1 p2) \\<and>\n  (\\<forall>p1 p2 m.\n      sp_impl_subj_obj s2 p1 p2 m \\<longrightarrow>\n      Policy.sp_spec_subj_obj p1 p2 m)\n\ngoal (1 subgoal):\n 1. (\\<forall>p1 p2.\n        sp_impl_subj_subj s1 p1 p2 \\<longrightarrow>\n        Policy.sp_spec_subj_subj p1 p2) \\<and>\n    (\\<forall>p1 p2 m.\n        sp_impl_subj_obj s1 p1 p2 m \\<longrightarrow>\n        Policy.sp_spec_subj_obj p1 p2 m) &&&\n    (\\<forall>p1 p2.\n        sp_impl_subj_subj s2 p1 p2 \\<longrightarrow>\n        Policy.sp_spec_subj_subj p1 p2) \\<and>\n    (\\<forall>p1 p2 m.\n        sp_impl_subj_obj s2 p1 p2 m \\<longrightarrow>\n        Policy.sp_spec_subj_obj p1 p2 m)", "by auto"], ["proof (state)\nthis:\n  sp_subset s1\n  sp_subset s2\n\ngoal (1 subgoal):\n 1. \\<not> Policy.sp_spec_subj_subj (Step.partition tid)\n            (Step.partition partner) \\<Longrightarrow>\n    sp_impl_subj_subj s1 (Step.partition tid) (Step.partition partner) =\n    sp_impl_subj_subj s2 (Step.partition tid) (Step.partition partner)", "hence \"\\<not> sp_impl_subj_subj s1 (partition tid) (partition partner)\"\n          and \"\\<not> sp_impl_subj_subj s2 (partition tid) (partition partner)\""], ["proof (prove)\nusing this:\n  sp_subset s1\n  sp_subset s2\n\ngoal (1 subgoal):\n 1. \\<not> sp_impl_subj_subj s1 (Step.partition tid)\n            (Step.partition partner) &&&\n    \\<not> sp_impl_subj_subj s2 (Step.partition tid)\n            (Step.partition partner)", "using False"], ["proof (prove)\nusing this:\n  sp_subset s1\n  sp_subset s2\n  \\<not> Policy.sp_spec_subj_subj (Step.partition tid)\n          (Step.partition partner)\n\ngoal (1 subgoal):\n 1. \\<not> sp_impl_subj_subj s1 (Step.partition tid)\n            (Step.partition partner) &&&\n    \\<not> sp_impl_subj_subj s2 (Step.partition tid)\n            (Step.partition partner)", "unfolding sp_subset_def"], ["proof (prove)\nusing this:\n  (\\<forall>p1 p2.\n      sp_impl_subj_subj s1 p1 p2 \\<longrightarrow>\n      Policy.sp_spec_subj_subj p1 p2) \\<and>\n  (\\<forall>p1 p2 m.\n      sp_impl_subj_obj s1 p1 p2 m \\<longrightarrow>\n      Policy.sp_spec_subj_obj p1 p2 m)\n  (\\<forall>p1 p2.\n      sp_impl_subj_subj s2 p1 p2 \\<longrightarrow>\n      Policy.sp_spec_subj_subj p1 p2) \\<and>\n  (\\<forall>p1 p2 m.\n      sp_impl_subj_obj s2 p1 p2 m \\<longrightarrow>\n      Policy.sp_spec_subj_obj p1 p2 m)\n  \\<not> Policy.sp_spec_subj_subj (Step.partition tid)\n          (Step.partition partner)\n\ngoal (1 subgoal):\n 1. \\<not> sp_impl_subj_subj s1 (Step.partition tid)\n            (Step.partition partner) &&&\n    \\<not> sp_impl_subj_subj s2 (Step.partition tid)\n            (Step.partition partner)", "by auto"], ["proof (state)\nthis:\n  \\<not> sp_impl_subj_subj s1 (Step.partition tid) (Step.partition partner)\n  \\<not> sp_impl_subj_subj s2 (Step.partition tid) (Step.partition partner)\n\ngoal (1 subgoal):\n 1. \\<not> Policy.sp_spec_subj_subj (Step.partition tid)\n            (Step.partition partner) \\<Longrightarrow>\n    sp_impl_subj_subj s1 (Step.partition tid) (Step.partition partner) =\n    sp_impl_subj_subj s2 (Step.partition tid) (Step.partition partner)", "thus ?A"], ["proof (prove)\nusing this:\n  \\<not> sp_impl_subj_subj s1 (Step.partition tid) (Step.partition partner)\n  \\<not> sp_impl_subj_subj s2 (Step.partition tid) (Step.partition partner)\n\ngoal (1 subgoal):\n 1. sp_impl_subj_subj s1 (Step.partition tid) (Step.partition partner) =\n    sp_impl_subj_subj s2 (Step.partition tid) (Step.partition partner)", "by auto"], ["proof (state)\nthis:\n  sp_impl_subj_subj s1 (Step.partition tid) (Step.partition partner) =\n  sp_impl_subj_subj s2 (Step.partition tid) (Step.partition partner)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sp_impl_subj_subj s1 (Step.partition tid) (Step.partition partner) =\n  sp_impl_subj_subj s2 (Step.partition tid) (Step.partition partner)\n\ngoal (1 subgoal):\n 1. ev_signal_precondition tid partner s1 =\n    ev_signal_precondition tid partner s2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ev_signal_precondition tid partner s1 =\n    ev_signal_precondition tid partner s2", "using A"], ["proof (prove)\nusing this:\n  sp_impl_subj_subj s1 (Step.partition tid) (Step.partition partner) =\n  sp_impl_subj_subj s2 (Step.partition tid) (Step.partition partner)\n\ngoal (1 subgoal):\n 1. ev_signal_precondition tid partner s1 =\n    ev_signal_precondition tid partner s2", "unfolding ev_signal_precondition_def"], ["proof (prove)\nusing this:\n  sp_impl_subj_subj s1 (Step.partition tid) (Step.partition partner) =\n  sp_impl_subj_subj s2 (Step.partition tid) (Step.partition partner)\n\ngoal (1 subgoal):\n 1. sp_impl_subj_subj s1 (Step.partition tid) (Step.partition partner) =\n    sp_impl_subj_subj s2 (Step.partition tid) (Step.partition partner)", "by auto"], ["proof (state)\nthis:\n  ev_signal_precondition tid partner s1 =\n  ev_signal_precondition tid partner s2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma set_object_value_consistent:\n  assumes eq_obs: \"vpeq u s1 s2\"\n    shows \"vpeq u (set_object_value x y s1) (set_object_value x y s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq u (set_object_value x y s1) (set_object_value x y s2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vpeq u (set_object_value x y s1) (set_object_value x y s2)", "let ?s1' = \"set_object_value x y s1\" and ?s2' = \"set_object_value x y s2\""], ["proof (state)\ngoal (1 subgoal):\n 1. vpeq u (set_object_value x y s1) (set_object_value x y s2)", "have E1: \"vpeq_obj u ?s1' ?s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq_obj u (set_object_value x y s1) (set_object_value x y s2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vpeq_obj u (set_object_value x y s1) (set_object_value x y s2)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. vpeq_obj u (set_object_value x y s1) (set_object_value x y s2)", "fix x'"], ["proof (state)\ngoal (1 subgoal):\n 1. vpeq_obj u (set_object_value x y s1) (set_object_value x y s2)", "assume 1: \"Policy.sp_spec_subj_obj u x' READ\""], ["proof (state)\nthis:\n  Policy.sp_spec_subj_obj u x' READ\n\ngoal (1 subgoal):\n 1. vpeq_obj u (set_object_value x y s1) (set_object_value x y s2)", "have \"obj ?s1' x' = obj ?s2' x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obj (set_object_value x y s1) x' = obj (set_object_value x y s2) x'", "proof (cases \"x = x'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = x' \\<Longrightarrow>\n    obj (set_object_value x y s1) x' = obj (set_object_value x y s2) x'\n 2. x \\<noteq> x' \\<Longrightarrow>\n    obj (set_object_value x y s1) x' = obj (set_object_value x y s2) x'", "case True"], ["proof (state)\nthis:\n  x = x'\n\ngoal (2 subgoals):\n 1. x = x' \\<Longrightarrow>\n    obj (set_object_value x y s1) x' = obj (set_object_value x y s2) x'\n 2. x \\<noteq> x' \\<Longrightarrow>\n    obj (set_object_value x y s1) x' = obj (set_object_value x y s2) x'", "thus \"obj ?s1' x' = obj ?s2' x'\""], ["proof (prove)\nusing this:\n  x = x'\n\ngoal (1 subgoal):\n 1. obj (set_object_value x y s1) x' = obj (set_object_value x y s2) x'", "unfolding set_object_value_def"], ["proof (prove)\nusing this:\n  x = x'\n\ngoal (1 subgoal):\n 1. obj (s1\\<lparr>obj := (obj s1)(x := y)\\<rparr>) x' =\n    obj (s2\\<lparr>obj := (obj s2)(x := y)\\<rparr>) x'", "by auto"], ["proof (state)\nthis:\n  obj (set_object_value x y s1) x' = obj (set_object_value x y s2) x'\n\ngoal (1 subgoal):\n 1. x \\<noteq> x' \\<Longrightarrow>\n    obj (set_object_value x y s1) x' = obj (set_object_value x y s2) x'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> x' \\<Longrightarrow>\n    obj (set_object_value x y s1) x' = obj (set_object_value x y s2) x'", "case False"], ["proof (state)\nthis:\n  x \\<noteq> x'\n\ngoal (1 subgoal):\n 1. x \\<noteq> x' \\<Longrightarrow>\n    obj (set_object_value x y s1) x' = obj (set_object_value x y s2) x'", "hence 2: \"obj ?s1' x' = obj s1 x'\"\n              and 3: \"obj ?s2' x' = obj s2 x'\""], ["proof (prove)\nusing this:\n  x \\<noteq> x'\n\ngoal (1 subgoal):\n 1. obj (set_object_value x y s1) x' = obj s1 x' &&&\n    obj (set_object_value x y s2) x' = obj s2 x'", "unfolding set_object_value_def"], ["proof (prove)\nusing this:\n  x \\<noteq> x'\n\ngoal (1 subgoal):\n 1. obj (s1\\<lparr>obj := (obj s1)(x := y)\\<rparr>) x' = obj s1 x' &&&\n    obj (s2\\<lparr>obj := (obj s2)(x := y)\\<rparr>) x' = obj s2 x'", "by auto"], ["proof (state)\nthis:\n  obj (set_object_value x y s1) x' = obj s1 x'\n  obj (set_object_value x y s2) x' = obj s2 x'\n\ngoal (1 subgoal):\n 1. x \\<noteq> x' \\<Longrightarrow>\n    obj (set_object_value x y s1) x' = obj (set_object_value x y s2) x'", "have 4: \"obj s1 x' = obj s2 x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obj s1 x' = obj s2 x'", "using 1 eq_obs"], ["proof (prove)\nusing this:\n  Policy.sp_spec_subj_obj u x' READ\n  vpeq u s1 s2\n\ngoal (1 subgoal):\n 1. obj s1 x' = obj s2 x'", "unfolding vpeq_def vpeq_obj_def"], ["proof (prove)\nusing this:\n  Policy.sp_spec_subj_obj u x' READ\n  (\\<forall>obj_id.\n      Policy.sp_spec_subj_obj u obj_id READ \\<longrightarrow>\n      obj s1 obj_id = obj s2 obj_id) \\<and>\n  vpeq_subj_subj u s1 s2 \\<and>\n  vpeq_subj_obj u s1 s2 \\<and> vpeq_local u s1 s2\n\ngoal (1 subgoal):\n 1. obj s1 x' = obj s2 x'", "by auto"], ["proof (state)\nthis:\n  obj s1 x' = obj s2 x'\n\ngoal (1 subgoal):\n 1. x \\<noteq> x' \\<Longrightarrow>\n    obj (set_object_value x y s1) x' = obj (set_object_value x y s2) x'", "from 2 3 4"], ["proof (chain)\npicking this:\n  obj (set_object_value x y s1) x' = obj s1 x'\n  obj (set_object_value x y s2) x' = obj s2 x'\n  obj s1 x' = obj s2 x'", "show \"obj ?s1' x' = obj ?s2' x'\""], ["proof (prove)\nusing this:\n  obj (set_object_value x y s1) x' = obj s1 x'\n  obj (set_object_value x y s2) x' = obj s2 x'\n  obj s1 x' = obj s2 x'\n\ngoal (1 subgoal):\n 1. obj (set_object_value x y s1) x' = obj (set_object_value x y s2) x'", "by simp"], ["proof (state)\nthis:\n  obj (set_object_value x y s1) x' = obj (set_object_value x y s2) x'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  obj (set_object_value x y s1) x' = obj (set_object_value x y s2) x'\n\ngoal (1 subgoal):\n 1. vpeq_obj u (set_object_value x y s1) (set_object_value x y s2)", "}"], ["proof (state)\nthis:\n  Policy.sp_spec_subj_obj u ?x'2 READ \\<Longrightarrow>\n  obj (set_object_value x y s1) ?x'2 = obj (set_object_value x y s2) ?x'2\n\ngoal (1 subgoal):\n 1. vpeq_obj u (set_object_value x y s1) (set_object_value x y s2)", "thus \"vpeq_obj u ?s1' ?s2'\""], ["proof (prove)\nusing this:\n  Policy.sp_spec_subj_obj u ?x'2 READ \\<Longrightarrow>\n  obj (set_object_value x y s1) ?x'2 = obj (set_object_value x y s2) ?x'2\n\ngoal (1 subgoal):\n 1. vpeq_obj u (set_object_value x y s1) (set_object_value x y s2)", "unfolding vpeq_obj_def"], ["proof (prove)\nusing this:\n  Policy.sp_spec_subj_obj u ?x'2 READ \\<Longrightarrow>\n  obj (set_object_value x y s1) ?x'2 = obj (set_object_value x y s2) ?x'2\n\ngoal (1 subgoal):\n 1. \\<forall>obj_id.\n       Policy.sp_spec_subj_obj u obj_id READ \\<longrightarrow>\n       obj (set_object_value x y s1) obj_id =\n       obj (set_object_value x y s2) obj_id", "by auto"], ["proof (state)\nthis:\n  vpeq_obj u (set_object_value x y s1) (set_object_value x y s2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  vpeq_obj u (set_object_value x y s1) (set_object_value x y s2)\n\ngoal (1 subgoal):\n 1. vpeq u (set_object_value x y s1) (set_object_value x y s2)", "have E4: \"vpeq_subj_subj u ?s1' ?s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq_subj_subj u (set_object_value x y s1) (set_object_value x y s2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vpeq_subj_subj u (set_object_value x y s1) (set_object_value x y s2)", "have \"sp_impl_subj_subj ?s1' = sp_impl_subj_subj s1\"\n       and \"sp_impl_subj_subj ?s2' = sp_impl_subj_subj s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sp_impl_subj_subj (set_object_value x y s1) = sp_impl_subj_subj s1 &&&\n    sp_impl_subj_subj (set_object_value x y s2) = sp_impl_subj_subj s2", "unfolding set_object_value_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sp_impl_subj_subj (s1\\<lparr>obj := (obj s1)(x := y)\\<rparr>) =\n    sp_impl_subj_subj s1 &&&\n    sp_impl_subj_subj (s2\\<lparr>obj := (obj s2)(x := y)\\<rparr>) =\n    sp_impl_subj_subj s2", "by auto"], ["proof (state)\nthis:\n  sp_impl_subj_subj (set_object_value x y s1) = sp_impl_subj_subj s1\n  sp_impl_subj_subj (set_object_value x y s2) = sp_impl_subj_subj s2\n\ngoal (1 subgoal):\n 1. vpeq_subj_subj u (set_object_value x y s1) (set_object_value x y s2)", "thus \"vpeq_subj_subj u ?s1' ?s2'\""], ["proof (prove)\nusing this:\n  sp_impl_subj_subj (set_object_value x y s1) = sp_impl_subj_subj s1\n  sp_impl_subj_subj (set_object_value x y s2) = sp_impl_subj_subj s2\n\ngoal (1 subgoal):\n 1. vpeq_subj_subj u (set_object_value x y s1) (set_object_value x y s2)", "using eq_obs"], ["proof (prove)\nusing this:\n  sp_impl_subj_subj (set_object_value x y s1) = sp_impl_subj_subj s1\n  sp_impl_subj_subj (set_object_value x y s2) = sp_impl_subj_subj s2\n  vpeq u s1 s2\n\ngoal (1 subgoal):\n 1. vpeq_subj_subj u (set_object_value x y s1) (set_object_value x y s2)", "unfolding vpeq_def vpeq_subj_subj_def"], ["proof (prove)\nusing this:\n  sp_impl_subj_subj (set_object_value x y s1) = sp_impl_subj_subj s1\n  sp_impl_subj_subj (set_object_value x y s2) = sp_impl_subj_subj s2\n  vpeq_obj u s1 s2 \\<and>\n  (\\<forall>v.\n      (Policy.sp_spec_subj_subj u v \\<longrightarrow>\n       sp_impl_subj_subj s1 u v = sp_impl_subj_subj s2 u v) \\<and>\n      (Policy.sp_spec_subj_subj v u \\<longrightarrow>\n       sp_impl_subj_subj s1 v u = sp_impl_subj_subj s2 v u)) \\<and>\n  vpeq_subj_obj u s1 s2 \\<and> vpeq_local u s1 s2\n\ngoal (1 subgoal):\n 1. \\<forall>v.\n       (Policy.sp_spec_subj_subj u v \\<longrightarrow>\n        sp_impl_subj_subj (set_object_value x y s1) u v =\n        sp_impl_subj_subj (set_object_value x y s2) u v) \\<and>\n       (Policy.sp_spec_subj_subj v u \\<longrightarrow>\n        sp_impl_subj_subj (set_object_value x y s1) v u =\n        sp_impl_subj_subj (set_object_value x y s2) v u)", "by auto"], ["proof (state)\nthis:\n  vpeq_subj_subj u (set_object_value x y s1) (set_object_value x y s2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  vpeq_subj_subj u (set_object_value x y s1) (set_object_value x y s2)\n\ngoal (1 subgoal):\n 1. vpeq u (set_object_value x y s1) (set_object_value x y s2)", "have E5: \"vpeq_subj_obj u ?s1' ?s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq_subj_obj u (set_object_value x y s1) (set_object_value x y s2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vpeq_subj_obj u (set_object_value x y s1) (set_object_value x y s2)", "have \"sp_impl_subj_obj ?s1' = sp_impl_subj_obj s1\"\n       and \"sp_impl_subj_obj ?s2' = sp_impl_subj_obj s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sp_impl_subj_obj (set_object_value x y s1) = sp_impl_subj_obj s1 &&&\n    sp_impl_subj_obj (set_object_value x y s2) = sp_impl_subj_obj s2", "unfolding set_object_value_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sp_impl_subj_obj (s1\\<lparr>obj := (obj s1)(x := y)\\<rparr>) =\n    sp_impl_subj_obj s1 &&&\n    sp_impl_subj_obj (s2\\<lparr>obj := (obj s2)(x := y)\\<rparr>) =\n    sp_impl_subj_obj s2", "by auto"], ["proof (state)\nthis:\n  sp_impl_subj_obj (set_object_value x y s1) = sp_impl_subj_obj s1\n  sp_impl_subj_obj (set_object_value x y s2) = sp_impl_subj_obj s2\n\ngoal (1 subgoal):\n 1. vpeq_subj_obj u (set_object_value x y s1) (set_object_value x y s2)", "thus \"vpeq_subj_obj u ?s1' ?s2'\""], ["proof (prove)\nusing this:\n  sp_impl_subj_obj (set_object_value x y s1) = sp_impl_subj_obj s1\n  sp_impl_subj_obj (set_object_value x y s2) = sp_impl_subj_obj s2\n\ngoal (1 subgoal):\n 1. vpeq_subj_obj u (set_object_value x y s1) (set_object_value x y s2)", "using eq_obs"], ["proof (prove)\nusing this:\n  sp_impl_subj_obj (set_object_value x y s1) = sp_impl_subj_obj s1\n  sp_impl_subj_obj (set_object_value x y s2) = sp_impl_subj_obj s2\n  vpeq u s1 s2\n\ngoal (1 subgoal):\n 1. vpeq_subj_obj u (set_object_value x y s1) (set_object_value x y s2)", "unfolding vpeq_def vpeq_subj_obj_def"], ["proof (prove)\nusing this:\n  sp_impl_subj_obj (set_object_value x y s1) = sp_impl_subj_obj s1\n  sp_impl_subj_obj (set_object_value x y s2) = sp_impl_subj_obj s2\n  vpeq_obj u s1 s2 \\<and>\n  vpeq_subj_subj u s1 s2 \\<and>\n  (\\<forall>ob m p1.\n      (Policy.sp_spec_subj_obj u ob m \\<longrightarrow>\n       sp_impl_subj_obj s1 u ob m = sp_impl_subj_obj s2 u ob m) \\<and>\n      (Policy.sp_spec_subj_obj p1 ob PROVIDE \\<and>\n       (Policy.sp_spec_subj_obj u ob READ \\<or>\n        Policy.sp_spec_subj_obj u ob WRITE) \\<longrightarrow>\n       sp_impl_subj_obj s1 p1 ob PROVIDE =\n       sp_impl_subj_obj s2 p1 ob PROVIDE)) \\<and>\n  vpeq_local u s1 s2\n\ngoal (1 subgoal):\n 1. \\<forall>ob m p1.\n       (Policy.sp_spec_subj_obj u ob m \\<longrightarrow>\n        sp_impl_subj_obj (set_object_value x y s1) u ob m =\n        sp_impl_subj_obj (set_object_value x y s2) u ob m) \\<and>\n       (Policy.sp_spec_subj_obj p1 ob PROVIDE \\<and>\n        (Policy.sp_spec_subj_obj u ob READ \\<or>\n         Policy.sp_spec_subj_obj u ob WRITE) \\<longrightarrow>\n        sp_impl_subj_obj (set_object_value x y s1) p1 ob PROVIDE =\n        sp_impl_subj_obj (set_object_value x y s2) p1 ob PROVIDE)", "by auto"], ["proof (state)\nthis:\n  vpeq_subj_obj u (set_object_value x y s1) (set_object_value x y s2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  vpeq_subj_obj u (set_object_value x y s1) (set_object_value x y s2)\n\ngoal (1 subgoal):\n 1. vpeq u (set_object_value x y s1) (set_object_value x y s2)", "from eq_obs"], ["proof (chain)\npicking this:\n  vpeq u s1 s2", "have E6: \"vpeq_local u ?s1' ?s2'\""], ["proof (prove)\nusing this:\n  vpeq u s1 s2\n\ngoal (1 subgoal):\n 1. vpeq_local u (set_object_value x y s1) (set_object_value x y s2)", "unfolding vpeq_def vpeq_local_def set_object_value_def"], ["proof (prove)\nusing this:\n  vpeq_obj u s1 s2 \\<and>\n  vpeq_subj_subj u s1 s2 \\<and>\n  vpeq_subj_obj u s1 s2 \\<and>\n  (\\<forall>tid.\n      Step.partition tid = u \\<longrightarrow>\n      thread s1 tid = thread s2 tid)\n\ngoal (1 subgoal):\n 1. \\<forall>tid.\n       Step.partition tid = u \\<longrightarrow>\n       thread (s1\\<lparr>obj := (obj s1)(x := y)\\<rparr>) tid =\n       thread (s2\\<lparr>obj := (obj s2)(x := y)\\<rparr>) tid", "by simp"], ["proof (state)\nthis:\n  vpeq_local u (set_object_value x y s1) (set_object_value x y s2)\n\ngoal (1 subgoal):\n 1. vpeq u (set_object_value x y s1) (set_object_value x y s2)", "from E1 E4 E5 E6"], ["proof (chain)\npicking this:\n  vpeq_obj u (set_object_value x y s1) (set_object_value x y s2)\n  vpeq_subj_subj u (set_object_value x y s1) (set_object_value x y s2)\n  vpeq_subj_obj u (set_object_value x y s1) (set_object_value x y s2)\n  vpeq_local u (set_object_value x y s1) (set_object_value x y s2)", "show ?thesis"], ["proof (prove)\nusing this:\n  vpeq_obj u (set_object_value x y s1) (set_object_value x y s2)\n  vpeq_subj_subj u (set_object_value x y s1) (set_object_value x y s2)\n  vpeq_subj_obj u (set_object_value x y s1) (set_object_value x y s2)\n  vpeq_local u (set_object_value x y s1) (set_object_value x y s2)\n\ngoal (1 subgoal):\n 1. vpeq u (set_object_value x y s1) (set_object_value x y s2)", "unfolding vpeq_def"], ["proof (prove)\nusing this:\n  vpeq_obj u (set_object_value x y s1) (set_object_value x y s2)\n  vpeq_subj_subj u (set_object_value x y s1) (set_object_value x y s2)\n  vpeq_subj_obj u (set_object_value x y s1) (set_object_value x y s2)\n  vpeq_local u (set_object_value x y s1) (set_object_value x y s2)\n\ngoal (1 subgoal):\n 1. vpeq_obj u (set_object_value x y s1) (set_object_value x y s2) \\<and>\n    vpeq_subj_subj u (set_object_value x y s1)\n     (set_object_value x y s2) \\<and>\n    vpeq_subj_obj u (set_object_value x y s1)\n     (set_object_value x y s2) \\<and>\n    vpeq_local u (set_object_value x y s1) (set_object_value x y s2)", "by auto"], ["proof (state)\nthis:\n  vpeq u (set_object_value x y s1) (set_object_value x y s2)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Weak step consistency of atomic step functions\\<close>"], ["", "lemma ipc_weakly_step_consistent:\n  assumes eq_obs: \"vpeq u s1 s2\"\n      and eq_act: \"vpeq (partition tid) s1 s2\"\n      and inv1:   \"atomic_step_invariant s1\"\n      and inv2:   \"atomic_step_invariant s2\"\n      and prec1: \"atomic_step_precondition s1 tid ipt\"\n      and prec2: \"atomic_step_precondition s1 tid ipt\"\n      and ipt_case: \"ipt = SK_IPC dir stage partner page\"\n    shows \"vpeq u\n                (atomic_step_ipc tid dir stage partner page s1)\n                (atomic_step_ipc tid dir stage partner page s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq u (atomic_step_ipc tid dir stage partner page s1)\n     (atomic_step_ipc tid dir stage partner page s2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vpeq u (atomic_step_ipc tid dir stage partner page s1)\n     (atomic_step_ipc tid dir stage partner page s2)", "have \"\\<And> mypage . \\<lbrakk> dir = SEND; stage = BUF mypage \\<rbrakk> \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mypage.\n       \\<lbrakk>dir = SEND; stage = BUF mypage\\<rbrakk>\n       \\<Longrightarrow> vpeq u\n                          (atomic_step_ipc tid dir stage partner page s1)\n                          (atomic_step_ipc tid dir stage partner page s2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>mypage.\n       \\<lbrakk>dir = SEND; stage = BUF mypage\\<rbrakk>\n       \\<Longrightarrow> vpeq u\n                          (atomic_step_ipc tid dir stage partner page s1)\n                          (atomic_step_ipc tid dir stage partner page s2)", "fix mypage"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>mypage.\n       \\<lbrakk>dir = SEND; stage = BUF mypage\\<rbrakk>\n       \\<Longrightarrow> vpeq u\n                          (atomic_step_ipc tid dir stage partner page s1)\n                          (atomic_step_ipc tid dir stage partner page s2)", "assume dir_send: \"dir = SEND\""], ["proof (state)\nthis:\n  dir = SEND\n\ngoal (1 subgoal):\n 1. \\<And>mypage.\n       \\<lbrakk>dir = SEND; stage = BUF mypage\\<rbrakk>\n       \\<Longrightarrow> vpeq u\n                          (atomic_step_ipc tid dir stage partner page s1)\n                          (atomic_step_ipc tid dir stage partner page s2)", "assume stage_buf: \"stage = BUF mypage\""], ["proof (state)\nthis:\n  stage = BUF mypage\n\ngoal (1 subgoal):\n 1. \\<And>mypage.\n       \\<lbrakk>dir = SEND; stage = BUF mypage\\<rbrakk>\n       \\<Longrightarrow> vpeq u\n                          (atomic_step_ipc tid dir stage partner page s1)\n                          (atomic_step_ipc tid dir stage partner page s2)", "have \"Policy.sp_spec_subj_obj (partition tid) (PAGE page) READ\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Policy.sp_spec_subj_obj (Step.partition tid) (PAGE page) READ", "using inv1 prec1 dir_send stage_buf ipt_case"], ["proof (prove)\nusing this:\n  atomic_step_invariant s1\n  atomic_step_precondition s1 tid ipt\n  dir = SEND\n  stage = BUF mypage\n  ipt = SK_IPC dir stage partner page\n\ngoal (1 subgoal):\n 1. Policy.sp_spec_subj_obj (Step.partition tid) (PAGE page) READ", "unfolding atomic_step_invariant_def sp_subset_def"], ["proof (prove)\nusing this:\n  (\\<forall>p1 p2.\n      sp_impl_subj_subj s1 p1 p2 \\<longrightarrow>\n      Policy.sp_spec_subj_subj p1 p2) \\<and>\n  (\\<forall>p1 p2 m.\n      sp_impl_subj_obj s1 p1 p2 m \\<longrightarrow>\n      Policy.sp_spec_subj_obj p1 p2 m)\n  atomic_step_precondition s1 tid ipt\n  dir = SEND\n  stage = BUF mypage\n  ipt = SK_IPC dir stage partner page\n\ngoal (1 subgoal):\n 1. Policy.sp_spec_subj_obj (Step.partition tid) (PAGE page) READ", "unfolding atomic_step_precondition_def ipc_precondition_def opposite_ipc_direction_def"], ["proof (prove)\nusing this:\n  (\\<forall>p1 p2.\n      sp_impl_subj_subj s1 p1 p2 \\<longrightarrow>\n      Policy.sp_spec_subj_subj p1 p2) \\<and>\n  (\\<forall>p1 p2 m.\n      sp_impl_subj_obj s1 p1 p2 m \\<longrightarrow>\n      Policy.sp_spec_subj_obj p1 p2 m)\n  case ipt of SK_IPC dir PREP partner page \\<Rightarrow> True\n  | SK_IPC dir WAIT partner page \\<Rightarrow>\n      let sender =\n            case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner;\n          receiver =\n            case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid;\n          local_access_mode =\n            case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE\n      in sp_impl_subj_subj s1 (Step.partition sender)\n          (Step.partition receiver) \\<and>\n         sp_impl_subj_obj s1 (Step.partition tid) (PAGE page)\n          local_access_mode\n  | SK_IPC dir (BUF page') partner page \\<Rightarrow>\n      (let sender =\n             case dir of SEND \\<Rightarrow> tid\n             | RECV \\<Rightarrow> partner;\n           receiver =\n             case dir of SEND \\<Rightarrow> partner\n             | RECV \\<Rightarrow> tid;\n           local_access_mode =\n             case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE\n       in sp_impl_subj_subj s1 (Step.partition sender)\n           (Step.partition receiver) \\<and>\n          sp_impl_subj_obj s1 (Step.partition tid) (PAGE page)\n           local_access_mode) \\<and>\n      (let sender =\n             case case dir of SEND \\<Rightarrow> RECV\n                  | RECV \\<Rightarrow> SEND of\n             SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid;\n           receiver =\n             case case dir of SEND \\<Rightarrow> RECV\n                  | RECV \\<Rightarrow> SEND of\n             SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner;\n           local_access_mode =\n             case case dir of SEND \\<Rightarrow> RECV\n                  | RECV \\<Rightarrow> SEND of\n             SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE\n       in sp_impl_subj_subj s1 (Step.partition sender)\n           (Step.partition receiver) \\<and>\n          sp_impl_subj_obj s1 (Step.partition partner) (PAGE page')\n           local_access_mode)\n  | SK_EV_SIGNAL EV_SIGNAL_PREP partner \\<Rightarrow> True\n  | SK_EV_SIGNAL EV_SIGNAL_FINISH partner \\<Rightarrow>\n      ev_signal_precondition tid partner s1\n  | _ \\<Rightarrow> True\n  dir = SEND\n  stage = BUF mypage\n  ipt = SK_IPC dir stage partner page\n\ngoal (1 subgoal):\n 1. Policy.sp_spec_subj_obj (Step.partition tid) (PAGE page) READ", "by auto"], ["proof (state)\nthis:\n  Policy.sp_spec_subj_obj (Step.partition tid) (PAGE page) READ\n\ngoal (1 subgoal):\n 1. \\<And>mypage.\n       \\<lbrakk>dir = SEND; stage = BUF mypage\\<rbrakk>\n       \\<Longrightarrow> vpeq u\n                          (atomic_step_ipc tid dir stage partner page s1)\n                          (atomic_step_ipc tid dir stage partner page s2)", "hence \"obj s1 (PAGE page) = obj s2 (PAGE page)\""], ["proof (prove)\nusing this:\n  Policy.sp_spec_subj_obj (Step.partition tid) (PAGE page) READ\n\ngoal (1 subgoal):\n 1. obj s1 (PAGE page) = obj s2 (PAGE page)", "using eq_act"], ["proof (prove)\nusing this:\n  Policy.sp_spec_subj_obj (Step.partition tid) (PAGE page) READ\n  vpeq (Step.partition tid) s1 s2\n\ngoal (1 subgoal):\n 1. obj s1 (PAGE page) = obj s2 (PAGE page)", "unfolding vpeq_def vpeq_obj_def vpeq_local_def"], ["proof (prove)\nusing this:\n  Policy.sp_spec_subj_obj (Step.partition tid) (PAGE page) READ\n  (\\<forall>obj_id.\n      Policy.sp_spec_subj_obj (Step.partition tid) obj_id\n       READ \\<longrightarrow>\n      obj s1 obj_id = obj s2 obj_id) \\<and>\n  vpeq_subj_subj (Step.partition tid) s1 s2 \\<and>\n  vpeq_subj_obj (Step.partition tid) s1 s2 \\<and>\n  (\\<forall>tida.\n      Step.partition tida = Step.partition tid \\<longrightarrow>\n      thread s1 tida = thread s2 tida)\n\ngoal (1 subgoal):\n 1. obj s1 (PAGE page) = obj s2 (PAGE page)", "by auto"], ["proof (state)\nthis:\n  obj s1 (PAGE page) = obj s2 (PAGE page)\n\ngoal (1 subgoal):\n 1. \\<And>mypage.\n       \\<lbrakk>dir = SEND; stage = BUF mypage\\<rbrakk>\n       \\<Longrightarrow> vpeq u\n                          (atomic_step_ipc tid dir stage partner page s1)\n                          (atomic_step_ipc tid dir stage partner page s2)", "thus \"vpeq u\n                (atomic_step_ipc tid dir stage partner page s1)\n                (atomic_step_ipc tid dir stage partner page s2)\""], ["proof (prove)\nusing this:\n  obj s1 (PAGE page) = obj s2 (PAGE page)\n\ngoal (1 subgoal):\n 1. vpeq u (atomic_step_ipc tid dir stage partner page s1)\n     (atomic_step_ipc tid dir stage partner page s2)", "using dir_send stage_buf eq_obs set_object_value_consistent"], ["proof (prove)\nusing this:\n  obj s1 (PAGE page) = obj s2 (PAGE page)\n  dir = SEND\n  stage = BUF mypage\n  vpeq u s1 s2\n  vpeq ?u ?s1.0 ?s2.0 \\<Longrightarrow>\n  vpeq ?u (set_object_value ?x ?y ?s1.0) (set_object_value ?x ?y ?s2.0)\n\ngoal (1 subgoal):\n 1. vpeq u (atomic_step_ipc tid dir stage partner page s1)\n     (atomic_step_ipc tid dir stage partner page s2)", "unfolding atomic_step_ipc_def"], ["proof (prove)\nusing this:\n  obj s1 (PAGE page) = obj s2 (PAGE page)\n  dir = SEND\n  stage = BUF mypage\n  vpeq u s1 s2\n  vpeq ?u ?s1.0 ?s2.0 \\<Longrightarrow>\n  vpeq ?u (set_object_value ?x ?y ?s1.0) (set_object_value ?x ?y ?s2.0)\n\ngoal (1 subgoal):\n 1. vpeq u\n     (case stage of\n      BUF page' \\<Rightarrow>\n        case dir of\n        SEND \\<Rightarrow>\n          set_object_value (PAGE page') (obj s1 (PAGE page)) s1\n        | RECV \\<Rightarrow> s1\n      | _ \\<Rightarrow> s1)\n     (case stage of\n      BUF page' \\<Rightarrow>\n        case dir of\n        SEND \\<Rightarrow>\n          set_object_value (PAGE page') (obj s2 (PAGE page)) s2\n        | RECV \\<Rightarrow> s2\n      | _ \\<Rightarrow> s2)", "by auto"], ["proof (state)\nthis:\n  vpeq u (atomic_step_ipc tid dir stage partner page s1)\n   (atomic_step_ipc tid dir stage partner page s2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>dir = SEND; stage = BUF ?mypage\\<rbrakk>\n  \\<Longrightarrow> vpeq u (atomic_step_ipc tid dir stage partner page s1)\n                     (atomic_step_ipc tid dir stage partner page s2)\n\ngoal (1 subgoal):\n 1. vpeq u (atomic_step_ipc tid dir stage partner page s1)\n     (atomic_step_ipc tid dir stage partner page s2)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>dir = SEND; stage = BUF ?mypage\\<rbrakk>\n  \\<Longrightarrow> vpeq u (atomic_step_ipc tid dir stage partner page s1)\n                     (atomic_step_ipc tid dir stage partner page s2)\n\ngoal (1 subgoal):\n 1. vpeq u (atomic_step_ipc tid dir stage partner page s1)\n     (atomic_step_ipc tid dir stage partner page s2)", "using eq_obs"], ["proof (prove)\nusing this:\n  \\<lbrakk>dir = SEND; stage = BUF ?mypage\\<rbrakk>\n  \\<Longrightarrow> vpeq u (atomic_step_ipc tid dir stage partner page s1)\n                     (atomic_step_ipc tid dir stage partner page s2)\n  vpeq u s1 s2\n\ngoal (1 subgoal):\n 1. vpeq u (atomic_step_ipc tid dir stage partner page s1)\n     (atomic_step_ipc tid dir stage partner page s2)", "unfolding atomic_step_ipc_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>dir = SEND; stage = BUF ?mypage\\<rbrakk>\n  \\<Longrightarrow> vpeq u\n                     (case stage of\n                      BUF page' \\<Rightarrow>\n                        case dir of\n                        SEND \\<Rightarrow>\n                          set_object_value (PAGE page') (obj s1 (PAGE page))\n                           s1\n                        | RECV \\<Rightarrow> s1\n                      | _ \\<Rightarrow> s1)\n                     (case stage of\n                      BUF page' \\<Rightarrow>\n                        case dir of\n                        SEND \\<Rightarrow>\n                          set_object_value (PAGE page') (obj s2 (PAGE page))\n                           s2\n                        | RECV \\<Rightarrow> s2\n                      | _ \\<Rightarrow> s2)\n  vpeq u s1 s2\n\ngoal (1 subgoal):\n 1. vpeq u\n     (case stage of\n      BUF page' \\<Rightarrow>\n        case dir of\n        SEND \\<Rightarrow>\n          set_object_value (PAGE page') (obj s1 (PAGE page)) s1\n        | RECV \\<Rightarrow> s1\n      | _ \\<Rightarrow> s1)\n     (case stage of\n      BUF page' \\<Rightarrow>\n        case dir of\n        SEND \\<Rightarrow>\n          set_object_value (PAGE page') (obj s2 (PAGE page)) s2\n        | RECV \\<Rightarrow> s2\n      | _ \\<Rightarrow> s2)", "by (cases \"stage\", auto, cases \"dir\", auto)"], ["proof (state)\nthis:\n  vpeq u (atomic_step_ipc tid dir stage partner page s1)\n   (atomic_step_ipc tid dir stage partner page s2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ev_wait_one_weakly_step_consistent:\n  assumes eq_obs: \"vpeq u s1 s2\"\n      and eq_act: \"vpeq (partition tid) s1 s2\"\n      and inv1:   \"atomic_step_invariant s1\"\n      and inv2:   \"atomic_step_invariant s2\"\n      and prec1: \"atomic_step_precondition s1 (current s1) ipt\"\n      and prec2: \"atomic_step_precondition s1 (current s1) ipt\"\n    shows \"vpeq u\n                (atomic_step_ev_wait_one tid  s1)\n                (atomic_step_ev_wait_one tid  s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq u (atomic_step_ev_wait_one tid s1) (atomic_step_ev_wait_one tid s2)", "using assms"], ["proof (prove)\nusing this:\n  vpeq u s1 s2\n  vpeq (Step.partition tid) s1 s2\n  atomic_step_invariant s1\n  atomic_step_invariant s2\n  atomic_step_precondition s1 (current s1) ipt\n  atomic_step_precondition s1 (current s1) ipt\n\ngoal (1 subgoal):\n 1. vpeq u (atomic_step_ev_wait_one tid s1) (atomic_step_ev_wait_one tid s2)", "unfolding vpeq_def vpeq_subj_subj_def vpeq_obj_def vpeq_subj_obj_def vpeq_local_def\n              atomic_step_ev_wait_one_def"], ["proof (prove)\nusing this:\n  (\\<forall>obj_id.\n      Policy.sp_spec_subj_obj u obj_id READ \\<longrightarrow>\n      obj s1 obj_id = obj s2 obj_id) \\<and>\n  (\\<forall>v.\n      (Policy.sp_spec_subj_subj u v \\<longrightarrow>\n       sp_impl_subj_subj s1 u v = sp_impl_subj_subj s2 u v) \\<and>\n      (Policy.sp_spec_subj_subj v u \\<longrightarrow>\n       sp_impl_subj_subj s1 v u = sp_impl_subj_subj s2 v u)) \\<and>\n  (\\<forall>ob m p1.\n      (Policy.sp_spec_subj_obj u ob m \\<longrightarrow>\n       sp_impl_subj_obj s1 u ob m = sp_impl_subj_obj s2 u ob m) \\<and>\n      (Policy.sp_spec_subj_obj p1 ob PROVIDE \\<and>\n       (Policy.sp_spec_subj_obj u ob READ \\<or>\n        Policy.sp_spec_subj_obj u ob WRITE) \\<longrightarrow>\n       sp_impl_subj_obj s1 p1 ob PROVIDE =\n       sp_impl_subj_obj s2 p1 ob PROVIDE)) \\<and>\n  (\\<forall>tid.\n      Step.partition tid = u \\<longrightarrow>\n      thread s1 tid = thread s2 tid)\n  (\\<forall>obj_id.\n      Policy.sp_spec_subj_obj (Step.partition tid) obj_id\n       READ \\<longrightarrow>\n      obj s1 obj_id = obj s2 obj_id) \\<and>\n  (\\<forall>v.\n      (Policy.sp_spec_subj_subj (Step.partition tid) v \\<longrightarrow>\n       sp_impl_subj_subj s1 (Step.partition tid) v =\n       sp_impl_subj_subj s2 (Step.partition tid) v) \\<and>\n      (Policy.sp_spec_subj_subj v (Step.partition tid) \\<longrightarrow>\n       sp_impl_subj_subj s1 v (Step.partition tid) =\n       sp_impl_subj_subj s2 v (Step.partition tid))) \\<and>\n  (\\<forall>ob m p1.\n      (Policy.sp_spec_subj_obj (Step.partition tid) ob m \\<longrightarrow>\n       sp_impl_subj_obj s1 (Step.partition tid) ob m =\n       sp_impl_subj_obj s2 (Step.partition tid) ob m) \\<and>\n      (Policy.sp_spec_subj_obj p1 ob PROVIDE \\<and>\n       (Policy.sp_spec_subj_obj (Step.partition tid) ob READ \\<or>\n        Policy.sp_spec_subj_obj (Step.partition tid) ob\n         WRITE) \\<longrightarrow>\n       sp_impl_subj_obj s1 p1 ob PROVIDE =\n       sp_impl_subj_obj s2 p1 ob PROVIDE)) \\<and>\n  (\\<forall>tida.\n      Step.partition tida = Step.partition tid \\<longrightarrow>\n      thread s1 tida = thread s2 tida)\n  atomic_step_invariant s1\n  atomic_step_invariant s2\n  atomic_step_precondition s1 (current s1) ipt\n  atomic_step_precondition s1 (current s1) ipt\n\ngoal (1 subgoal):\n 1. (\\<forall>obj_id.\n        Policy.sp_spec_subj_obj u obj_id READ \\<longrightarrow>\n        obj (s1\\<lparr>thread := (thread s1)\n                         (tid := thread s1 tid\n                            \\<lparr>ev_counter :=\nev_counter (thread s1 tid) - 1\\<rparr>)\\<rparr>)\n         obj_id =\n        obj (s2\\<lparr>thread := (thread s2)\n                         (tid := thread s2 tid\n                            \\<lparr>ev_counter :=\nev_counter (thread s2 tid) - 1\\<rparr>)\\<rparr>)\n         obj_id) \\<and>\n    (\\<forall>v.\n        (Policy.sp_spec_subj_subj u v \\<longrightarrow>\n         sp_impl_subj_subj\n          (s1\\<lparr>thread := (thread s1)\n                       (tid := thread s1 tid\n                          \\<lparr>ev_counter :=\n                                    ev_counter (thread s1 tid) -\n                                    1\\<rparr>)\\<rparr>)\n          u v =\n         sp_impl_subj_subj\n          (s2\\<lparr>thread := (thread s2)\n                       (tid := thread s2 tid\n                          \\<lparr>ev_counter :=\n                                    ev_counter (thread s2 tid) -\n                                    1\\<rparr>)\\<rparr>)\n          u v) \\<and>\n        (Policy.sp_spec_subj_subj v u \\<longrightarrow>\n         sp_impl_subj_subj\n          (s1\\<lparr>thread := (thread s1)\n                       (tid := thread s1 tid\n                          \\<lparr>ev_counter :=\n                                    ev_counter (thread s1 tid) -\n                                    1\\<rparr>)\\<rparr>)\n          v u =\n         sp_impl_subj_subj\n          (s2\\<lparr>thread := (thread s2)\n                       (tid := thread s2 tid\n                          \\<lparr>ev_counter :=\n                                    ev_counter (thread s2 tid) -\n                                    1\\<rparr>)\\<rparr>)\n          v u)) \\<and>\n    (\\<forall>ob m p1.\n        (Policy.sp_spec_subj_obj u ob m \\<longrightarrow>\n         sp_impl_subj_obj\n          (s1\\<lparr>thread := (thread s1)\n                       (tid := thread s1 tid\n                          \\<lparr>ev_counter :=\n                                    ev_counter (thread s1 tid) -\n                                    1\\<rparr>)\\<rparr>)\n          u ob m =\n         sp_impl_subj_obj\n          (s2\\<lparr>thread := (thread s2)\n                       (tid := thread s2 tid\n                          \\<lparr>ev_counter :=\n                                    ev_counter (thread s2 tid) -\n                                    1\\<rparr>)\\<rparr>)\n          u ob m) \\<and>\n        (Policy.sp_spec_subj_obj p1 ob PROVIDE \\<and>\n         (Policy.sp_spec_subj_obj u ob READ \\<or>\n          Policy.sp_spec_subj_obj u ob WRITE) \\<longrightarrow>\n         sp_impl_subj_obj\n          (s1\\<lparr>thread := (thread s1)\n                       (tid := thread s1 tid\n                          \\<lparr>ev_counter :=\n                                    ev_counter (thread s1 tid) -\n                                    1\\<rparr>)\\<rparr>)\n          p1 ob PROVIDE =\n         sp_impl_subj_obj\n          (s2\\<lparr>thread := (thread s2)\n                       (tid := thread s2 tid\n                          \\<lparr>ev_counter :=\n                                    ev_counter (thread s2 tid) -\n                                    1\\<rparr>)\\<rparr>)\n          p1 ob PROVIDE)) \\<and>\n    (\\<forall>tida.\n        Step.partition tida = u \\<longrightarrow>\n        thread\n         (s1\\<lparr>thread := (thread s1)\n                      (tid := thread s1 tid\n                         \\<lparr>ev_counter :=\n                                   ev_counter (thread s1 tid) -\n                                   1\\<rparr>)\\<rparr>)\n         tida =\n        thread\n         (s2\\<lparr>thread := (thread s2)\n                      (tid := thread s2 tid\n                         \\<lparr>ev_counter :=\n                                   ev_counter (thread s2 tid) -\n                                   1\\<rparr>)\\<rparr>)\n         tida)", "by simp"], ["", "lemma ev_wait_all_weakly_step_consistent:\n  assumes eq_obs: \"vpeq u s1 s2\"\n      and eq_act: \"vpeq (partition tid) s1 s2\"\n      and inv1:   \"atomic_step_invariant s1\"\n      and inv2:   \"atomic_step_invariant s2\"\n      and prec1: \"atomic_step_precondition s1 (current s1) ipt\"\n      and prec2: \"atomic_step_precondition s1 (current s1) ipt\"\n    shows \"vpeq u\n                (atomic_step_ev_wait_all tid  s1)\n                (atomic_step_ev_wait_all tid  s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq u (atomic_step_ev_wait_all tid s1) (atomic_step_ev_wait_all tid s2)", "using assms"], ["proof (prove)\nusing this:\n  vpeq u s1 s2\n  vpeq (Step.partition tid) s1 s2\n  atomic_step_invariant s1\n  atomic_step_invariant s2\n  atomic_step_precondition s1 (current s1) ipt\n  atomic_step_precondition s1 (current s1) ipt\n\ngoal (1 subgoal):\n 1. vpeq u (atomic_step_ev_wait_all tid s1) (atomic_step_ev_wait_all tid s2)", "unfolding vpeq_def vpeq_subj_subj_def vpeq_obj_def vpeq_subj_obj_def vpeq_local_def\n              atomic_step_ev_wait_all_def"], ["proof (prove)\nusing this:\n  (\\<forall>obj_id.\n      Policy.sp_spec_subj_obj u obj_id READ \\<longrightarrow>\n      obj s1 obj_id = obj s2 obj_id) \\<and>\n  (\\<forall>v.\n      (Policy.sp_spec_subj_subj u v \\<longrightarrow>\n       sp_impl_subj_subj s1 u v = sp_impl_subj_subj s2 u v) \\<and>\n      (Policy.sp_spec_subj_subj v u \\<longrightarrow>\n       sp_impl_subj_subj s1 v u = sp_impl_subj_subj s2 v u)) \\<and>\n  (\\<forall>ob m p1.\n      (Policy.sp_spec_subj_obj u ob m \\<longrightarrow>\n       sp_impl_subj_obj s1 u ob m = sp_impl_subj_obj s2 u ob m) \\<and>\n      (Policy.sp_spec_subj_obj p1 ob PROVIDE \\<and>\n       (Policy.sp_spec_subj_obj u ob READ \\<or>\n        Policy.sp_spec_subj_obj u ob WRITE) \\<longrightarrow>\n       sp_impl_subj_obj s1 p1 ob PROVIDE =\n       sp_impl_subj_obj s2 p1 ob PROVIDE)) \\<and>\n  (\\<forall>tid.\n      Step.partition tid = u \\<longrightarrow>\n      thread s1 tid = thread s2 tid)\n  (\\<forall>obj_id.\n      Policy.sp_spec_subj_obj (Step.partition tid) obj_id\n       READ \\<longrightarrow>\n      obj s1 obj_id = obj s2 obj_id) \\<and>\n  (\\<forall>v.\n      (Policy.sp_spec_subj_subj (Step.partition tid) v \\<longrightarrow>\n       sp_impl_subj_subj s1 (Step.partition tid) v =\n       sp_impl_subj_subj s2 (Step.partition tid) v) \\<and>\n      (Policy.sp_spec_subj_subj v (Step.partition tid) \\<longrightarrow>\n       sp_impl_subj_subj s1 v (Step.partition tid) =\n       sp_impl_subj_subj s2 v (Step.partition tid))) \\<and>\n  (\\<forall>ob m p1.\n      (Policy.sp_spec_subj_obj (Step.partition tid) ob m \\<longrightarrow>\n       sp_impl_subj_obj s1 (Step.partition tid) ob m =\n       sp_impl_subj_obj s2 (Step.partition tid) ob m) \\<and>\n      (Policy.sp_spec_subj_obj p1 ob PROVIDE \\<and>\n       (Policy.sp_spec_subj_obj (Step.partition tid) ob READ \\<or>\n        Policy.sp_spec_subj_obj (Step.partition tid) ob\n         WRITE) \\<longrightarrow>\n       sp_impl_subj_obj s1 p1 ob PROVIDE =\n       sp_impl_subj_obj s2 p1 ob PROVIDE)) \\<and>\n  (\\<forall>tida.\n      Step.partition tida = Step.partition tid \\<longrightarrow>\n      thread s1 tida = thread s2 tida)\n  atomic_step_invariant s1\n  atomic_step_invariant s2\n  atomic_step_precondition s1 (current s1) ipt\n  atomic_step_precondition s1 (current s1) ipt\n\ngoal (1 subgoal):\n 1. (\\<forall>obj_id.\n        Policy.sp_spec_subj_obj u obj_id READ \\<longrightarrow>\n        obj (s1\\<lparr>thread := (thread s1)\n                         (tid := thread s1 tid\n                            \\<lparr>ev_counter := 0\\<rparr>)\\<rparr>)\n         obj_id =\n        obj (s2\\<lparr>thread := (thread s2)\n                         (tid := thread s2 tid\n                            \\<lparr>ev_counter := 0\\<rparr>)\\<rparr>)\n         obj_id) \\<and>\n    (\\<forall>v.\n        (Policy.sp_spec_subj_subj u v \\<longrightarrow>\n         sp_impl_subj_subj\n          (s1\\<lparr>thread := (thread s1)\n                       (tid := thread s1 tid\n                          \\<lparr>ev_counter := 0\\<rparr>)\\<rparr>)\n          u v =\n         sp_impl_subj_subj\n          (s2\\<lparr>thread := (thread s2)\n                       (tid := thread s2 tid\n                          \\<lparr>ev_counter := 0\\<rparr>)\\<rparr>)\n          u v) \\<and>\n        (Policy.sp_spec_subj_subj v u \\<longrightarrow>\n         sp_impl_subj_subj\n          (s1\\<lparr>thread := (thread s1)\n                       (tid := thread s1 tid\n                          \\<lparr>ev_counter := 0\\<rparr>)\\<rparr>)\n          v u =\n         sp_impl_subj_subj\n          (s2\\<lparr>thread := (thread s2)\n                       (tid := thread s2 tid\n                          \\<lparr>ev_counter := 0\\<rparr>)\\<rparr>)\n          v u)) \\<and>\n    (\\<forall>ob m p1.\n        (Policy.sp_spec_subj_obj u ob m \\<longrightarrow>\n         sp_impl_subj_obj\n          (s1\\<lparr>thread := (thread s1)\n                       (tid := thread s1 tid\n                          \\<lparr>ev_counter := 0\\<rparr>)\\<rparr>)\n          u ob m =\n         sp_impl_subj_obj\n          (s2\\<lparr>thread := (thread s2)\n                       (tid := thread s2 tid\n                          \\<lparr>ev_counter := 0\\<rparr>)\\<rparr>)\n          u ob m) \\<and>\n        (Policy.sp_spec_subj_obj p1 ob PROVIDE \\<and>\n         (Policy.sp_spec_subj_obj u ob READ \\<or>\n          Policy.sp_spec_subj_obj u ob WRITE) \\<longrightarrow>\n         sp_impl_subj_obj\n          (s1\\<lparr>thread := (thread s1)\n                       (tid := thread s1 tid\n                          \\<lparr>ev_counter := 0\\<rparr>)\\<rparr>)\n          p1 ob PROVIDE =\n         sp_impl_subj_obj\n          (s2\\<lparr>thread := (thread s2)\n                       (tid := thread s2 tid\n                          \\<lparr>ev_counter := 0\\<rparr>)\\<rparr>)\n          p1 ob PROVIDE)) \\<and>\n    (\\<forall>tida.\n        Step.partition tida = u \\<longrightarrow>\n        thread\n         (s1\\<lparr>thread := (thread s1)\n                      (tid := thread s1 tid\n                         \\<lparr>ev_counter := 0\\<rparr>)\\<rparr>)\n         tida =\n        thread\n         (s2\\<lparr>thread := (thread s2)\n                      (tid := thread s2 tid\n                         \\<lparr>ev_counter := 0\\<rparr>)\\<rparr>)\n         tida)", "by simp"], ["", "lemma ev_signal_weakly_step_consistent:\n  assumes eq_obs: \"vpeq u s1 s2\"\n      and eq_act: \"vpeq (partition tid) s1 s2\"\n      and inv1:   \"atomic_step_invariant s1\"\n      and inv2:   \"atomic_step_invariant s2\"\n      and prec1: \"atomic_step_precondition s1 (current s1) ipt\"\n      and prec2: \"atomic_step_precondition s1 (current s1) ipt\"\n    shows \"vpeq u\n                (atomic_step_ev_signal tid partner s1)\n                (atomic_step_ev_signal tid partner s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq u (atomic_step_ev_signal tid partner s1)\n     (atomic_step_ev_signal tid partner s2)", "using assms"], ["proof (prove)\nusing this:\n  vpeq u s1 s2\n  vpeq (Step.partition tid) s1 s2\n  atomic_step_invariant s1\n  atomic_step_invariant s2\n  atomic_step_precondition s1 (current s1) ipt\n  atomic_step_precondition s1 (current s1) ipt\n\ngoal (1 subgoal):\n 1. vpeq u (atomic_step_ev_signal tid partner s1)\n     (atomic_step_ev_signal tid partner s2)", "unfolding vpeq_def vpeq_subj_subj_def vpeq_obj_def vpeq_subj_obj_def vpeq_local_def\n              atomic_step_ev_signal_def"], ["proof (prove)\nusing this:\n  (\\<forall>obj_id.\n      Policy.sp_spec_subj_obj u obj_id READ \\<longrightarrow>\n      obj s1 obj_id = obj s2 obj_id) \\<and>\n  (\\<forall>v.\n      (Policy.sp_spec_subj_subj u v \\<longrightarrow>\n       sp_impl_subj_subj s1 u v = sp_impl_subj_subj s2 u v) \\<and>\n      (Policy.sp_spec_subj_subj v u \\<longrightarrow>\n       sp_impl_subj_subj s1 v u = sp_impl_subj_subj s2 v u)) \\<and>\n  (\\<forall>ob m p1.\n      (Policy.sp_spec_subj_obj u ob m \\<longrightarrow>\n       sp_impl_subj_obj s1 u ob m = sp_impl_subj_obj s2 u ob m) \\<and>\n      (Policy.sp_spec_subj_obj p1 ob PROVIDE \\<and>\n       (Policy.sp_spec_subj_obj u ob READ \\<or>\n        Policy.sp_spec_subj_obj u ob WRITE) \\<longrightarrow>\n       sp_impl_subj_obj s1 p1 ob PROVIDE =\n       sp_impl_subj_obj s2 p1 ob PROVIDE)) \\<and>\n  (\\<forall>tid.\n      Step.partition tid = u \\<longrightarrow>\n      thread s1 tid = thread s2 tid)\n  (\\<forall>obj_id.\n      Policy.sp_spec_subj_obj (Step.partition tid) obj_id\n       READ \\<longrightarrow>\n      obj s1 obj_id = obj s2 obj_id) \\<and>\n  (\\<forall>v.\n      (Policy.sp_spec_subj_subj (Step.partition tid) v \\<longrightarrow>\n       sp_impl_subj_subj s1 (Step.partition tid) v =\n       sp_impl_subj_subj s2 (Step.partition tid) v) \\<and>\n      (Policy.sp_spec_subj_subj v (Step.partition tid) \\<longrightarrow>\n       sp_impl_subj_subj s1 v (Step.partition tid) =\n       sp_impl_subj_subj s2 v (Step.partition tid))) \\<and>\n  (\\<forall>ob m p1.\n      (Policy.sp_spec_subj_obj (Step.partition tid) ob m \\<longrightarrow>\n       sp_impl_subj_obj s1 (Step.partition tid) ob m =\n       sp_impl_subj_obj s2 (Step.partition tid) ob m) \\<and>\n      (Policy.sp_spec_subj_obj p1 ob PROVIDE \\<and>\n       (Policy.sp_spec_subj_obj (Step.partition tid) ob READ \\<or>\n        Policy.sp_spec_subj_obj (Step.partition tid) ob\n         WRITE) \\<longrightarrow>\n       sp_impl_subj_obj s1 p1 ob PROVIDE =\n       sp_impl_subj_obj s2 p1 ob PROVIDE)) \\<and>\n  (\\<forall>tida.\n      Step.partition tida = Step.partition tid \\<longrightarrow>\n      thread s1 tida = thread s2 tida)\n  atomic_step_invariant s1\n  atomic_step_invariant s2\n  atomic_step_precondition s1 (current s1) ipt\n  atomic_step_precondition s1 (current s1) ipt\n\ngoal (1 subgoal):\n 1. (\\<forall>obj_id.\n        Policy.sp_spec_subj_obj u obj_id READ \\<longrightarrow>\n        obj (s1\\<lparr>thread := (thread s1)\n                         (partner := thread s1 partner\n                            \\<lparr>ev_counter :=\nSuc (ev_counter (thread s1 partner))\\<rparr>)\\<rparr>)\n         obj_id =\n        obj (s2\\<lparr>thread := (thread s2)\n                         (partner := thread s2 partner\n                            \\<lparr>ev_counter :=\nSuc (ev_counter (thread s2 partner))\\<rparr>)\\<rparr>)\n         obj_id) \\<and>\n    (\\<forall>v.\n        (Policy.sp_spec_subj_subj u v \\<longrightarrow>\n         sp_impl_subj_subj\n          (s1\\<lparr>thread := (thread s1)\n                       (partner := thread s1 partner\n                          \\<lparr>ev_counter :=\n                                    Suc (ev_counter\n    (thread s1 partner))\\<rparr>)\\<rparr>)\n          u v =\n         sp_impl_subj_subj\n          (s2\\<lparr>thread := (thread s2)\n                       (partner := thread s2 partner\n                          \\<lparr>ev_counter :=\n                                    Suc (ev_counter\n    (thread s2 partner))\\<rparr>)\\<rparr>)\n          u v) \\<and>\n        (Policy.sp_spec_subj_subj v u \\<longrightarrow>\n         sp_impl_subj_subj\n          (s1\\<lparr>thread := (thread s1)\n                       (partner := thread s1 partner\n                          \\<lparr>ev_counter :=\n                                    Suc (ev_counter\n    (thread s1 partner))\\<rparr>)\\<rparr>)\n          v u =\n         sp_impl_subj_subj\n          (s2\\<lparr>thread := (thread s2)\n                       (partner := thread s2 partner\n                          \\<lparr>ev_counter :=\n                                    Suc (ev_counter\n    (thread s2 partner))\\<rparr>)\\<rparr>)\n          v u)) \\<and>\n    (\\<forall>ob m p1.\n        (Policy.sp_spec_subj_obj u ob m \\<longrightarrow>\n         sp_impl_subj_obj\n          (s1\\<lparr>thread := (thread s1)\n                       (partner := thread s1 partner\n                          \\<lparr>ev_counter :=\n                                    Suc (ev_counter\n    (thread s1 partner))\\<rparr>)\\<rparr>)\n          u ob m =\n         sp_impl_subj_obj\n          (s2\\<lparr>thread := (thread s2)\n                       (partner := thread s2 partner\n                          \\<lparr>ev_counter :=\n                                    Suc (ev_counter\n    (thread s2 partner))\\<rparr>)\\<rparr>)\n          u ob m) \\<and>\n        (Policy.sp_spec_subj_obj p1 ob PROVIDE \\<and>\n         (Policy.sp_spec_subj_obj u ob READ \\<or>\n          Policy.sp_spec_subj_obj u ob WRITE) \\<longrightarrow>\n         sp_impl_subj_obj\n          (s1\\<lparr>thread := (thread s1)\n                       (partner := thread s1 partner\n                          \\<lparr>ev_counter :=\n                                    Suc (ev_counter\n    (thread s1 partner))\\<rparr>)\\<rparr>)\n          p1 ob PROVIDE =\n         sp_impl_subj_obj\n          (s2\\<lparr>thread := (thread s2)\n                       (partner := thread s2 partner\n                          \\<lparr>ev_counter :=\n                                    Suc (ev_counter\n    (thread s2 partner))\\<rparr>)\\<rparr>)\n          p1 ob PROVIDE)) \\<and>\n    (\\<forall>tid.\n        Step.partition tid = u \\<longrightarrow>\n        thread\n         (s1\\<lparr>thread := (thread s1)\n                      (partner := thread s1 partner\n                         \\<lparr>ev_counter :=\n                                   Suc (ev_counter\n   (thread s1 partner))\\<rparr>)\\<rparr>)\n         tid =\n        thread\n         (s2\\<lparr>thread := (thread s2)\n                      (partner := thread s2 partner\n                         \\<lparr>ev_counter :=\n                                   Suc (ev_counter\n   (thread s2 partner))\\<rparr>)\\<rparr>)\n         tid)", "by simp"], ["", "text \\<open>The use of @{term extend_f} is to provide infrastructure to support use in dynamic policies, currently not used.\\<close>"], ["", "definition extend_f :: \"(partition_id_t \\<Rightarrow> partition_id_t \\<Rightarrow> bool) \\<Rightarrow> (partition_id_t \\<Rightarrow> partition_id_t \\<Rightarrow> bool) \\<Rightarrow> (partition_id_t \\<Rightarrow> partition_id_t \\<Rightarrow> bool)\" where\n  \"extend_f f g \\<equiv> \\<lambda> p1 p2 . f p1 p2 \\<or> g p1 p2\""], ["", "definition extend_subj_subj :: \"(partition_id_t \\<Rightarrow> partition_id_t \\<Rightarrow> bool) \\<Rightarrow> state_t \\<Rightarrow> state_t\" where\n  \"extend_subj_subj f s \\<equiv> s \\<lparr> sp_impl_subj_subj := extend_f f (sp_impl_subj_subj s) \\<rparr>\""], ["", "lemma extend_subj_subj_consistent:\n  fixes f :: \"partition_id_t \\<Rightarrow> partition_id_t \\<Rightarrow> bool\"\n  assumes \"vpeq u s1 s2\"\n  shows \"vpeq u (extend_subj_subj f s1) (extend_subj_subj f s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq u (extend_subj_subj f s1) (extend_subj_subj f s2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vpeq u (extend_subj_subj f s1) (extend_subj_subj f s2)", "let ?g1 = \"sp_impl_subj_subj s1\" and ?g2 = \"sp_impl_subj_subj s2\""], ["proof (state)\ngoal (1 subgoal):\n 1. vpeq u (extend_subj_subj f s1) (extend_subj_subj f s2)", "have \"\\<forall> v . Policy.sp_spec_subj_subj u v \\<longrightarrow> ?g1 u v = ?g2 u v\"\n   and \"\\<forall> v . Policy.sp_spec_subj_subj v u \\<longrightarrow> ?g1 v u = ?g2 v u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v.\n       Policy.sp_spec_subj_subj u v \\<longrightarrow>\n       sp_impl_subj_subj s1 u v = sp_impl_subj_subj s2 u v &&&\n    \\<forall>v.\n       Policy.sp_spec_subj_subj v u \\<longrightarrow>\n       sp_impl_subj_subj s1 v u = sp_impl_subj_subj s2 v u", "using assms"], ["proof (prove)\nusing this:\n  vpeq u s1 s2\n\ngoal (1 subgoal):\n 1. \\<forall>v.\n       Policy.sp_spec_subj_subj u v \\<longrightarrow>\n       sp_impl_subj_subj s1 u v = sp_impl_subj_subj s2 u v &&&\n    \\<forall>v.\n       Policy.sp_spec_subj_subj v u \\<longrightarrow>\n       sp_impl_subj_subj s1 v u = sp_impl_subj_subj s2 v u", "unfolding vpeq_def vpeq_subj_subj_def"], ["proof (prove)\nusing this:\n  vpeq_obj u s1 s2 \\<and>\n  (\\<forall>v.\n      (Policy.sp_spec_subj_subj u v \\<longrightarrow>\n       sp_impl_subj_subj s1 u v = sp_impl_subj_subj s2 u v) \\<and>\n      (Policy.sp_spec_subj_subj v u \\<longrightarrow>\n       sp_impl_subj_subj s1 v u = sp_impl_subj_subj s2 v u)) \\<and>\n  vpeq_subj_obj u s1 s2 \\<and> vpeq_local u s1 s2\n\ngoal (1 subgoal):\n 1. \\<forall>v.\n       Policy.sp_spec_subj_subj u v \\<longrightarrow>\n       sp_impl_subj_subj s1 u v = sp_impl_subj_subj s2 u v &&&\n    \\<forall>v.\n       Policy.sp_spec_subj_subj v u \\<longrightarrow>\n       sp_impl_subj_subj s1 v u = sp_impl_subj_subj s2 v u", "by auto"], ["proof (state)\nthis:\n  \\<forall>v.\n     Policy.sp_spec_subj_subj u v \\<longrightarrow>\n     sp_impl_subj_subj s1 u v = sp_impl_subj_subj s2 u v\n  \\<forall>v.\n     Policy.sp_spec_subj_subj v u \\<longrightarrow>\n     sp_impl_subj_subj s1 v u = sp_impl_subj_subj s2 v u\n\ngoal (1 subgoal):\n 1. vpeq u (extend_subj_subj f s1) (extend_subj_subj f s2)", "hence \"\\<forall> v . Policy.sp_spec_subj_subj u v \\<longrightarrow> extend_f f ?g1 u v = extend_f f ?g2 u v\"\n    and \"\\<forall> v . Policy.sp_spec_subj_subj v u \\<longrightarrow> extend_f f ?g1 v u = extend_f f ?g2 v u\""], ["proof (prove)\nusing this:\n  \\<forall>v.\n     Policy.sp_spec_subj_subj u v \\<longrightarrow>\n     sp_impl_subj_subj s1 u v = sp_impl_subj_subj s2 u v\n  \\<forall>v.\n     Policy.sp_spec_subj_subj v u \\<longrightarrow>\n     sp_impl_subj_subj s1 v u = sp_impl_subj_subj s2 v u\n\ngoal (1 subgoal):\n 1. \\<forall>v.\n       Policy.sp_spec_subj_subj u v \\<longrightarrow>\n       extend_f f (sp_impl_subj_subj s1) u v =\n       extend_f f (sp_impl_subj_subj s2) u v &&&\n    \\<forall>v.\n       Policy.sp_spec_subj_subj v u \\<longrightarrow>\n       extend_f f (sp_impl_subj_subj s1) v u =\n       extend_f f (sp_impl_subj_subj s2) v u", "unfolding extend_f_def"], ["proof (prove)\nusing this:\n  \\<forall>v.\n     Policy.sp_spec_subj_subj u v \\<longrightarrow>\n     sp_impl_subj_subj s1 u v = sp_impl_subj_subj s2 u v\n  \\<forall>v.\n     Policy.sp_spec_subj_subj v u \\<longrightarrow>\n     sp_impl_subj_subj s1 v u = sp_impl_subj_subj s2 v u\n\ngoal (1 subgoal):\n 1. \\<forall>v.\n       Policy.sp_spec_subj_subj u v \\<longrightarrow>\n       (f u v \\<or> sp_impl_subj_subj s1 u v) =\n       (f u v \\<or> sp_impl_subj_subj s2 u v) &&&\n    \\<forall>v.\n       Policy.sp_spec_subj_subj v u \\<longrightarrow>\n       (f v u \\<or> sp_impl_subj_subj s1 v u) =\n       (f v u \\<or> sp_impl_subj_subj s2 v u)", "by auto"], ["proof (state)\nthis:\n  \\<forall>v.\n     Policy.sp_spec_subj_subj u v \\<longrightarrow>\n     extend_f f (sp_impl_subj_subj s1) u v =\n     extend_f f (sp_impl_subj_subj s2) u v\n  \\<forall>v.\n     Policy.sp_spec_subj_subj v u \\<longrightarrow>\n     extend_f f (sp_impl_subj_subj s1) v u =\n     extend_f f (sp_impl_subj_subj s2) v u\n\ngoal (1 subgoal):\n 1. vpeq u (extend_subj_subj f s1) (extend_subj_subj f s2)", "hence 1: \"vpeq_subj_subj u (extend_subj_subj f s1) (extend_subj_subj f s2)\""], ["proof (prove)\nusing this:\n  \\<forall>v.\n     Policy.sp_spec_subj_subj u v \\<longrightarrow>\n     extend_f f (sp_impl_subj_subj s1) u v =\n     extend_f f (sp_impl_subj_subj s2) u v\n  \\<forall>v.\n     Policy.sp_spec_subj_subj v u \\<longrightarrow>\n     extend_f f (sp_impl_subj_subj s1) v u =\n     extend_f f (sp_impl_subj_subj s2) v u\n\ngoal (1 subgoal):\n 1. vpeq_subj_subj u (extend_subj_subj f s1) (extend_subj_subj f s2)", "unfolding vpeq_subj_subj_def extend_subj_subj_def"], ["proof (prove)\nusing this:\n  \\<forall>v.\n     Policy.sp_spec_subj_subj u v \\<longrightarrow>\n     extend_f f (sp_impl_subj_subj s1) u v =\n     extend_f f (sp_impl_subj_subj s2) u v\n  \\<forall>v.\n     Policy.sp_spec_subj_subj v u \\<longrightarrow>\n     extend_f f (sp_impl_subj_subj s1) v u =\n     extend_f f (sp_impl_subj_subj s2) v u\n\ngoal (1 subgoal):\n 1. \\<forall>v.\n       (Policy.sp_spec_subj_subj u v \\<longrightarrow>\n        sp_impl_subj_subj\n         (s1\\<lparr>sp_impl_subj_subj :=\n                      extend_f f (sp_impl_subj_subj s1)\\<rparr>)\n         u v =\n        sp_impl_subj_subj\n         (s2\\<lparr>sp_impl_subj_subj :=\n                      extend_f f (sp_impl_subj_subj s2)\\<rparr>)\n         u v) \\<and>\n       (Policy.sp_spec_subj_subj v u \\<longrightarrow>\n        sp_impl_subj_subj\n         (s1\\<lparr>sp_impl_subj_subj :=\n                      extend_f f (sp_impl_subj_subj s1)\\<rparr>)\n         v u =\n        sp_impl_subj_subj\n         (s2\\<lparr>sp_impl_subj_subj :=\n                      extend_f f (sp_impl_subj_subj s2)\\<rparr>)\n         v u)", "by auto"], ["proof (state)\nthis:\n  vpeq_subj_subj u (extend_subj_subj f s1) (extend_subj_subj f s2)\n\ngoal (1 subgoal):\n 1. vpeq u (extend_subj_subj f s1) (extend_subj_subj f s2)", "have 2: \"vpeq_obj u (extend_subj_subj f s1) (extend_subj_subj f s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq_obj u (extend_subj_subj f s1) (extend_subj_subj f s2)", "using assms"], ["proof (prove)\nusing this:\n  vpeq u s1 s2\n\ngoal (1 subgoal):\n 1. vpeq_obj u (extend_subj_subj f s1) (extend_subj_subj f s2)", "unfolding vpeq_def vpeq_obj_def extend_subj_subj_def"], ["proof (prove)\nusing this:\n  (\\<forall>obj_id.\n      Policy.sp_spec_subj_obj u obj_id READ \\<longrightarrow>\n      obj s1 obj_id = obj s2 obj_id) \\<and>\n  vpeq_subj_subj u s1 s2 \\<and>\n  vpeq_subj_obj u s1 s2 \\<and> vpeq_local u s1 s2\n\ngoal (1 subgoal):\n 1. \\<forall>obj_id.\n       Policy.sp_spec_subj_obj u obj_id READ \\<longrightarrow>\n       obj (s1\\<lparr>sp_impl_subj_subj :=\n                        extend_f f (sp_impl_subj_subj s1)\\<rparr>)\n        obj_id =\n       obj (s2\\<lparr>sp_impl_subj_subj :=\n                        extend_f f (sp_impl_subj_subj s2)\\<rparr>)\n        obj_id", "by fastforce"], ["proof (state)\nthis:\n  vpeq_obj u (extend_subj_subj f s1) (extend_subj_subj f s2)\n\ngoal (1 subgoal):\n 1. vpeq u (extend_subj_subj f s1) (extend_subj_subj f s2)", "have 3: \"vpeq_subj_obj u (extend_subj_subj f s1) (extend_subj_subj f s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq_subj_obj u (extend_subj_subj f s1) (extend_subj_subj f s2)", "using assms"], ["proof (prove)\nusing this:\n  vpeq u s1 s2\n\ngoal (1 subgoal):\n 1. vpeq_subj_obj u (extend_subj_subj f s1) (extend_subj_subj f s2)", "unfolding vpeq_def vpeq_subj_obj_def extend_subj_subj_def"], ["proof (prove)\nusing this:\n  vpeq_obj u s1 s2 \\<and>\n  vpeq_subj_subj u s1 s2 \\<and>\n  (\\<forall>ob m p1.\n      (Policy.sp_spec_subj_obj u ob m \\<longrightarrow>\n       sp_impl_subj_obj s1 u ob m = sp_impl_subj_obj s2 u ob m) \\<and>\n      (Policy.sp_spec_subj_obj p1 ob PROVIDE \\<and>\n       (Policy.sp_spec_subj_obj u ob READ \\<or>\n        Policy.sp_spec_subj_obj u ob WRITE) \\<longrightarrow>\n       sp_impl_subj_obj s1 p1 ob PROVIDE =\n       sp_impl_subj_obj s2 p1 ob PROVIDE)) \\<and>\n  vpeq_local u s1 s2\n\ngoal (1 subgoal):\n 1. \\<forall>ob m p1.\n       (Policy.sp_spec_subj_obj u ob m \\<longrightarrow>\n        sp_impl_subj_obj\n         (s1\\<lparr>sp_impl_subj_subj :=\n                      extend_f f (sp_impl_subj_subj s1)\\<rparr>)\n         u ob m =\n        sp_impl_subj_obj\n         (s2\\<lparr>sp_impl_subj_subj :=\n                      extend_f f (sp_impl_subj_subj s2)\\<rparr>)\n         u ob m) \\<and>\n       (Policy.sp_spec_subj_obj p1 ob PROVIDE \\<and>\n        (Policy.sp_spec_subj_obj u ob READ \\<or>\n         Policy.sp_spec_subj_obj u ob WRITE) \\<longrightarrow>\n        sp_impl_subj_obj\n         (s1\\<lparr>sp_impl_subj_subj :=\n                      extend_f f (sp_impl_subj_subj s1)\\<rparr>)\n         p1 ob PROVIDE =\n        sp_impl_subj_obj\n         (s2\\<lparr>sp_impl_subj_subj :=\n                      extend_f f (sp_impl_subj_subj s2)\\<rparr>)\n         p1 ob PROVIDE)", "by fastforce"], ["proof (state)\nthis:\n  vpeq_subj_obj u (extend_subj_subj f s1) (extend_subj_subj f s2)\n\ngoal (1 subgoal):\n 1. vpeq u (extend_subj_subj f s1) (extend_subj_subj f s2)", "have 4: \"vpeq_local u (extend_subj_subj f s1) (extend_subj_subj f s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq_local u (extend_subj_subj f s1) (extend_subj_subj f s2)", "using assms"], ["proof (prove)\nusing this:\n  vpeq u s1 s2\n\ngoal (1 subgoal):\n 1. vpeq_local u (extend_subj_subj f s1) (extend_subj_subj f s2)", "unfolding vpeq_def vpeq_local_def extend_subj_subj_def"], ["proof (prove)\nusing this:\n  vpeq_obj u s1 s2 \\<and>\n  vpeq_subj_subj u s1 s2 \\<and>\n  vpeq_subj_obj u s1 s2 \\<and>\n  (\\<forall>tid.\n      Step.partition tid = u \\<longrightarrow>\n      thread s1 tid = thread s2 tid)\n\ngoal (1 subgoal):\n 1. \\<forall>tid.\n       Step.partition tid = u \\<longrightarrow>\n       thread\n        (s1\\<lparr>sp_impl_subj_subj :=\n                     extend_f f (sp_impl_subj_subj s1)\\<rparr>)\n        tid =\n       thread\n        (s2\\<lparr>sp_impl_subj_subj :=\n                     extend_f f (sp_impl_subj_subj s2)\\<rparr>)\n        tid", "by fastforce"], ["proof (state)\nthis:\n  vpeq_local u (extend_subj_subj f s1) (extend_subj_subj f s2)\n\ngoal (1 subgoal):\n 1. vpeq u (extend_subj_subj f s1) (extend_subj_subj f s2)", "from 1 2 3 4"], ["proof (chain)\npicking this:\n  vpeq_subj_subj u (extend_subj_subj f s1) (extend_subj_subj f s2)\n  vpeq_obj u (extend_subj_subj f s1) (extend_subj_subj f s2)\n  vpeq_subj_obj u (extend_subj_subj f s1) (extend_subj_subj f s2)\n  vpeq_local u (extend_subj_subj f s1) (extend_subj_subj f s2)", "show ?thesis"], ["proof (prove)\nusing this:\n  vpeq_subj_subj u (extend_subj_subj f s1) (extend_subj_subj f s2)\n  vpeq_obj u (extend_subj_subj f s1) (extend_subj_subj f s2)\n  vpeq_subj_obj u (extend_subj_subj f s1) (extend_subj_subj f s2)\n  vpeq_local u (extend_subj_subj f s1) (extend_subj_subj f s2)\n\ngoal (1 subgoal):\n 1. vpeq u (extend_subj_subj f s1) (extend_subj_subj f s2)", "using assms"], ["proof (prove)\nusing this:\n  vpeq_subj_subj u (extend_subj_subj f s1) (extend_subj_subj f s2)\n  vpeq_obj u (extend_subj_subj f s1) (extend_subj_subj f s2)\n  vpeq_subj_obj u (extend_subj_subj f s1) (extend_subj_subj f s2)\n  vpeq_local u (extend_subj_subj f s1) (extend_subj_subj f s2)\n  vpeq u s1 s2\n\ngoal (1 subgoal):\n 1. vpeq u (extend_subj_subj f s1) (extend_subj_subj f s2)", "unfolding vpeq_def"], ["proof (prove)\nusing this:\n  vpeq_subj_subj u (extend_subj_subj f s1) (extend_subj_subj f s2)\n  vpeq_obj u (extend_subj_subj f s1) (extend_subj_subj f s2)\n  vpeq_subj_obj u (extend_subj_subj f s1) (extend_subj_subj f s2)\n  vpeq_local u (extend_subj_subj f s1) (extend_subj_subj f s2)\n  vpeq_obj u s1 s2 \\<and>\n  vpeq_subj_subj u s1 s2 \\<and>\n  vpeq_subj_obj u s1 s2 \\<and> vpeq_local u s1 s2\n\ngoal (1 subgoal):\n 1. vpeq_obj u (extend_subj_subj f s1) (extend_subj_subj f s2) \\<and>\n    vpeq_subj_subj u (extend_subj_subj f s1) (extend_subj_subj f s2) \\<and>\n    vpeq_subj_obj u (extend_subj_subj f s1) (extend_subj_subj f s2) \\<and>\n    vpeq_local u (extend_subj_subj f s1) (extend_subj_subj f s2)", "by fast"], ["proof (state)\nthis:\n  vpeq u (extend_subj_subj f s1) (extend_subj_subj f s2)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Summary theorems on view-partitioning weak step consistency\\<close>"], ["", "text \\<open>The atomic step is weakly step consistent with view partitioning.\n Here, the ``weakness'' is that we assume that the two states are vp-equivalent\n not only w.r.t. the observer domain @{term u}, but also w.r.t. the caller\n domain @{term \"partition tid\"}).\\<close>"], ["", "theorem atomic_step_weakly_step_consistent:\n  assumes eq_obs: \"vpeq u s1 s2\"\n      and eq_act: \"vpeq (partition (current s1)) s1 s2\"\n      and inv1:   \"atomic_step_invariant s1\"\n      and inv2:   \"atomic_step_invariant s2\"\n      and prec1: \"atomic_step_precondition s1 (current s1) ipt\"\n      and prec2: \"atomic_step_precondition s2 (current s2) ipt\"\n      and eq_curr: \"current s1 = current s2\"\n  shows \"vpeq u (atomic_step s1 ipt) (atomic_step s2 ipt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq u (atomic_step s1 ipt) (atomic_step s2 ipt)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vpeq u (atomic_step s1 ipt) (atomic_step s2 ipt)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq u (atomic_step s1 ipt) (atomic_step s2 ipt)", "using assms \n          ipc_weakly_step_consistent\n          ev_wait_all_weakly_step_consistent\n          ev_wait_one_weakly_step_consistent\n          ev_signal_weakly_step_consistent\n          vpeq_refl"], ["proof (prove)\nusing this:\n  vpeq u s1 s2\n  vpeq (Step.partition (current s1)) s1 s2\n  atomic_step_invariant s1\n  atomic_step_invariant s2\n  atomic_step_precondition s1 (current s1) ipt\n  atomic_step_precondition s2 (current s2) ipt\n  current s1 = current s2\n  \\<lbrakk>vpeq ?u ?s1.0 ?s2.0; vpeq (Step.partition ?tid) ?s1.0 ?s2.0;\n   atomic_step_invariant ?s1.0; atomic_step_invariant ?s2.0;\n   atomic_step_precondition ?s1.0 ?tid ?ipt;\n   atomic_step_precondition ?s1.0 ?tid ?ipt;\n   ?ipt = SK_IPC ?dir ?stage ?partner ?page\\<rbrakk>\n  \\<Longrightarrow> vpeq ?u\n                     (atomic_step_ipc ?tid ?dir ?stage ?partner ?page ?s1.0)\n                     (atomic_step_ipc ?tid ?dir ?stage ?partner ?page ?s2.0)\n  \\<lbrakk>vpeq ?u ?s1.0 ?s2.0; vpeq (Step.partition ?tid) ?s1.0 ?s2.0;\n   atomic_step_invariant ?s1.0; atomic_step_invariant ?s2.0;\n   atomic_step_precondition ?s1.0 (current ?s1.0) ?ipt;\n   atomic_step_precondition ?s1.0 (current ?s1.0) ?ipt\\<rbrakk>\n  \\<Longrightarrow> vpeq ?u (atomic_step_ev_wait_all ?tid ?s1.0)\n                     (atomic_step_ev_wait_all ?tid ?s2.0)\n  \\<lbrakk>vpeq ?u ?s1.0 ?s2.0; vpeq (Step.partition ?tid) ?s1.0 ?s2.0;\n   atomic_step_invariant ?s1.0; atomic_step_invariant ?s2.0;\n   atomic_step_precondition ?s1.0 (current ?s1.0) ?ipt;\n   atomic_step_precondition ?s1.0 (current ?s1.0) ?ipt\\<rbrakk>\n  \\<Longrightarrow> vpeq ?u (atomic_step_ev_wait_one ?tid ?s1.0)\n                     (atomic_step_ev_wait_one ?tid ?s2.0)\n  \\<lbrakk>vpeq ?u ?s1.0 ?s2.0; vpeq (Step.partition ?tid) ?s1.0 ?s2.0;\n   atomic_step_invariant ?s1.0; atomic_step_invariant ?s2.0;\n   atomic_step_precondition ?s1.0 (current ?s1.0) ?ipt;\n   atomic_step_precondition ?s1.0 (current ?s1.0) ?ipt\\<rbrakk>\n  \\<Longrightarrow> vpeq ?u (atomic_step_ev_signal ?tid ?partner ?s1.0)\n                     (atomic_step_ev_signal ?tid ?partner ?s2.0)\n  vpeq ?u ?s ?s\n\ngoal (1 subgoal):\n 1. vpeq u (atomic_step s1 ipt) (atomic_step s2 ipt)", "unfolding atomic_step_def"], ["proof (prove)\nusing this:\n  vpeq u s1 s2\n  vpeq (Step.partition (current s1)) s1 s2\n  atomic_step_invariant s1\n  atomic_step_invariant s2\n  atomic_step_precondition s1 (current s1) ipt\n  atomic_step_precondition s2 (current s2) ipt\n  current s1 = current s2\n  \\<lbrakk>vpeq ?u ?s1.0 ?s2.0; vpeq (Step.partition ?tid) ?s1.0 ?s2.0;\n   atomic_step_invariant ?s1.0; atomic_step_invariant ?s2.0;\n   atomic_step_precondition ?s1.0 ?tid ?ipt;\n   atomic_step_precondition ?s1.0 ?tid ?ipt;\n   ?ipt = SK_IPC ?dir ?stage ?partner ?page\\<rbrakk>\n  \\<Longrightarrow> vpeq ?u\n                     (atomic_step_ipc ?tid ?dir ?stage ?partner ?page ?s1.0)\n                     (atomic_step_ipc ?tid ?dir ?stage ?partner ?page ?s2.0)\n  \\<lbrakk>vpeq ?u ?s1.0 ?s2.0; vpeq (Step.partition ?tid) ?s1.0 ?s2.0;\n   atomic_step_invariant ?s1.0; atomic_step_invariant ?s2.0;\n   atomic_step_precondition ?s1.0 (current ?s1.0) ?ipt;\n   atomic_step_precondition ?s1.0 (current ?s1.0) ?ipt\\<rbrakk>\n  \\<Longrightarrow> vpeq ?u (atomic_step_ev_wait_all ?tid ?s1.0)\n                     (atomic_step_ev_wait_all ?tid ?s2.0)\n  \\<lbrakk>vpeq ?u ?s1.0 ?s2.0; vpeq (Step.partition ?tid) ?s1.0 ?s2.0;\n   atomic_step_invariant ?s1.0; atomic_step_invariant ?s2.0;\n   atomic_step_precondition ?s1.0 (current ?s1.0) ?ipt;\n   atomic_step_precondition ?s1.0 (current ?s1.0) ?ipt\\<rbrakk>\n  \\<Longrightarrow> vpeq ?u (atomic_step_ev_wait_one ?tid ?s1.0)\n                     (atomic_step_ev_wait_one ?tid ?s2.0)\n  \\<lbrakk>vpeq ?u ?s1.0 ?s2.0; vpeq (Step.partition ?tid) ?s1.0 ?s2.0;\n   atomic_step_invariant ?s1.0; atomic_step_invariant ?s2.0;\n   atomic_step_precondition ?s1.0 (current ?s1.0) ?ipt;\n   atomic_step_precondition ?s1.0 (current ?s1.0) ?ipt\\<rbrakk>\n  \\<Longrightarrow> vpeq ?u (atomic_step_ev_signal ?tid ?partner ?s1.0)\n                     (atomic_step_ev_signal ?tid ?partner ?s2.0)\n  vpeq ?u ?s ?s\n\ngoal (1 subgoal):\n 1. vpeq u\n     (case ipt of\n      SK_IPC dir stage partner page \\<Rightarrow>\n        atomic_step_ipc (current s1) dir stage partner page s1\n      | SK_EV_WAIT EV_FINISH EV_CONSUME_ALL \\<Rightarrow>\n          atomic_step_ev_wait_all (current s1) s1\n      | SK_EV_WAIT EV_FINISH EV_CONSUME_ONE \\<Rightarrow>\n          atomic_step_ev_wait_one (current s1) s1\n      | SK_EV_WAIT _ consume \\<Rightarrow> s1\n      | SK_EV_SIGNAL EV_SIGNAL_PREP partner \\<Rightarrow> s1\n      | SK_EV_SIGNAL EV_SIGNAL_FINISH partner \\<Rightarrow>\n          atomic_step_ev_signal (current s1) partner s1\n      | NONE \\<Rightarrow> s1)\n     (case ipt of\n      SK_IPC dir stage partner page \\<Rightarrow>\n        atomic_step_ipc (current s2) dir stage partner page s2\n      | SK_EV_WAIT EV_FINISH EV_CONSUME_ALL \\<Rightarrow>\n          atomic_step_ev_wait_all (current s2) s2\n      | SK_EV_WAIT EV_FINISH EV_CONSUME_ONE \\<Rightarrow>\n          atomic_step_ev_wait_one (current s2) s2\n      | SK_EV_WAIT _ consume \\<Rightarrow> s2\n      | SK_EV_SIGNAL EV_SIGNAL_PREP partner \\<Rightarrow> s2\n      | SK_EV_SIGNAL EV_SIGNAL_FINISH partner \\<Rightarrow>\n          atomic_step_ev_signal (current s2) partner s2\n      | NONE \\<Rightarrow> s2)", "apply (cases ipt, auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x21 x22.\n       \\<lbrakk>vpeq (Step.partition (current s2)) s1 s2;\n        atomic_step_precondition s1 (current s2) (SK_EV_WAIT x21 x22);\n        atomic_step_precondition s2 (current s2) (SK_EV_WAIT x21 x22);\n        ipt = SK_EV_WAIT x21 x22; vpeq u s1 s2; atomic_step_invariant s1;\n        atomic_step_invariant s2; current s1 = current s2;\n        \\<And>u s1 s2 tid ipt dir stage partner page.\n           \\<lbrakk>vpeq u s1 s2; vpeq (Step.partition tid) s1 s2;\n            atomic_step_invariant s1; atomic_step_invariant s2;\n            atomic_step_precondition s1 tid (SK_IPC dir stage partner page);\n            ipt = SK_IPC dir stage partner page\\<rbrakk>\n           \\<Longrightarrow> vpeq u\n                              (atomic_step_ipc tid dir stage partner page\n                                s1)\n                              (atomic_step_ipc tid dir stage partner page\n                                s2);\n        \\<And>u s1 s2 tid ipt.\n           \\<lbrakk>vpeq u s1 s2; vpeq (Step.partition tid) s1 s2;\n            atomic_step_invariant s1; atomic_step_invariant s2;\n            atomic_step_precondition s1 (current s1) ipt\\<rbrakk>\n           \\<Longrightarrow> vpeq u (atomic_step_ev_wait_all tid s1)\n                              (atomic_step_ev_wait_all tid s2);\n        \\<And>u s1 s2 tid ipt.\n           \\<lbrakk>vpeq u s1 s2; vpeq (Step.partition tid) s1 s2;\n            atomic_step_invariant s1; atomic_step_invariant s2;\n            atomic_step_precondition s1 (current s1) ipt\\<rbrakk>\n           \\<Longrightarrow> vpeq u (atomic_step_ev_wait_one tid s1)\n                              (atomic_step_ev_wait_one tid s2);\n        \\<And>u s1 s2 tid ipt partner.\n           \\<lbrakk>vpeq u s1 s2; vpeq (Step.partition tid) s1 s2;\n            atomic_step_invariant s1; atomic_step_invariant s2;\n            atomic_step_precondition s1 (current s1) ipt\\<rbrakk>\n           \\<Longrightarrow> vpeq u (atomic_step_ev_signal tid partner s1)\n                              (atomic_step_ev_signal tid partner s2);\n        \\<And>u s. vpeq u s s\\<rbrakk>\n       \\<Longrightarrow> vpeq u\n                          (case x21 of\n                           EV_FINISH \\<Rightarrow>\n                             case x22 of\n                             EV_CONSUME_ALL \\<Rightarrow>\n                               atomic_step_ev_wait_all (current s1) s1\n                             | EV_CONSUME_ONE \\<Rightarrow>\n                                 atomic_step_ev_wait_one (current s1) s1\n                           | _ \\<Rightarrow> s1)\n                          (case x21 of\n                           EV_FINISH \\<Rightarrow>\n                             case x22 of\n                             EV_CONSUME_ALL \\<Rightarrow>\n                               atomic_step_ev_wait_all (current s2) s2\n                             | EV_CONSUME_ONE \\<Rightarrow>\n                                 atomic_step_ev_wait_one (current s2) s2\n                           | _ \\<Rightarrow> s2)\n 2. \\<And>x31 x32.\n       \\<lbrakk>vpeq (Step.partition (current s2)) s1 s2;\n        atomic_step_precondition s1 (current s2) (SK_EV_SIGNAL x31 x32);\n        atomic_step_precondition s2 (current s2) (SK_EV_SIGNAL x31 x32);\n        ipt = SK_EV_SIGNAL x31 x32; vpeq u s1 s2; atomic_step_invariant s1;\n        atomic_step_invariant s2; current s1 = current s2;\n        \\<And>u s1 s2 tid ipt dir stage partner page.\n           \\<lbrakk>vpeq u s1 s2; vpeq (Step.partition tid) s1 s2;\n            atomic_step_invariant s1; atomic_step_invariant s2;\n            atomic_step_precondition s1 tid (SK_IPC dir stage partner page);\n            ipt = SK_IPC dir stage partner page\\<rbrakk>\n           \\<Longrightarrow> vpeq u\n                              (atomic_step_ipc tid dir stage partner page\n                                s1)\n                              (atomic_step_ipc tid dir stage partner page\n                                s2);\n        \\<And>u s1 s2 tid ipt.\n           \\<lbrakk>vpeq u s1 s2; vpeq (Step.partition tid) s1 s2;\n            atomic_step_invariant s1; atomic_step_invariant s2;\n            atomic_step_precondition s1 (current s1) ipt\\<rbrakk>\n           \\<Longrightarrow> vpeq u (atomic_step_ev_wait_all tid s1)\n                              (atomic_step_ev_wait_all tid s2);\n        \\<And>u s1 s2 tid ipt.\n           \\<lbrakk>vpeq u s1 s2; vpeq (Step.partition tid) s1 s2;\n            atomic_step_invariant s1; atomic_step_invariant s2;\n            atomic_step_precondition s1 (current s1) ipt\\<rbrakk>\n           \\<Longrightarrow> vpeq u (atomic_step_ev_wait_one tid s1)\n                              (atomic_step_ev_wait_one tid s2);\n        \\<And>u s1 s2 tid ipt partner.\n           \\<lbrakk>vpeq u s1 s2; vpeq (Step.partition tid) s1 s2;\n            atomic_step_invariant s1; atomic_step_invariant s2;\n            atomic_step_precondition s1 (current s1) ipt\\<rbrakk>\n           \\<Longrightarrow> vpeq u (atomic_step_ev_signal tid partner s1)\n                              (atomic_step_ev_signal tid partner s2);\n        \\<And>u s. vpeq u s s\\<rbrakk>\n       \\<Longrightarrow> vpeq u\n                          (case x31 of EV_SIGNAL_PREP \\<Rightarrow> s1\n                           | EV_SIGNAL_FINISH \\<Rightarrow>\n                               atomic_step_ev_signal (current s1) x32 s1)\n                          (case x31 of EV_SIGNAL_PREP \\<Rightarrow> s2\n                           | EV_SIGNAL_FINISH \\<Rightarrow>\n                               atomic_step_ev_signal (current s2) x32 s2)", "apply  (simp split: ev_consume_t.splits ev_wait_stage_t.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x31 x32.\n       \\<lbrakk>vpeq (Step.partition (current s2)) s1 s2;\n        atomic_step_precondition s1 (current s2) (SK_EV_SIGNAL x31 x32);\n        atomic_step_precondition s2 (current s2) (SK_EV_SIGNAL x31 x32);\n        ipt = SK_EV_SIGNAL x31 x32; vpeq u s1 s2; atomic_step_invariant s1;\n        atomic_step_invariant s2; current s1 = current s2;\n        \\<And>u s1 s2 tid ipt dir stage partner page.\n           \\<lbrakk>vpeq u s1 s2; vpeq (Step.partition tid) s1 s2;\n            atomic_step_invariant s1; atomic_step_invariant s2;\n            atomic_step_precondition s1 tid (SK_IPC dir stage partner page);\n            ipt = SK_IPC dir stage partner page\\<rbrakk>\n           \\<Longrightarrow> vpeq u\n                              (atomic_step_ipc tid dir stage partner page\n                                s1)\n                              (atomic_step_ipc tid dir stage partner page\n                                s2);\n        \\<And>u s1 s2 tid ipt.\n           \\<lbrakk>vpeq u s1 s2; vpeq (Step.partition tid) s1 s2;\n            atomic_step_invariant s1; atomic_step_invariant s2;\n            atomic_step_precondition s1 (current s1) ipt\\<rbrakk>\n           \\<Longrightarrow> vpeq u (atomic_step_ev_wait_all tid s1)\n                              (atomic_step_ev_wait_all tid s2);\n        \\<And>u s1 s2 tid ipt.\n           \\<lbrakk>vpeq u s1 s2; vpeq (Step.partition tid) s1 s2;\n            atomic_step_invariant s1; atomic_step_invariant s2;\n            atomic_step_precondition s1 (current s1) ipt\\<rbrakk>\n           \\<Longrightarrow> vpeq u (atomic_step_ev_wait_one tid s1)\n                              (atomic_step_ev_wait_one tid s2);\n        \\<And>u s1 s2 tid ipt partner.\n           \\<lbrakk>vpeq u s1 s2; vpeq (Step.partition tid) s1 s2;\n            atomic_step_invariant s1; atomic_step_invariant s2;\n            atomic_step_precondition s1 (current s1) ipt\\<rbrakk>\n           \\<Longrightarrow> vpeq u (atomic_step_ev_signal tid partner s1)\n                              (atomic_step_ev_signal tid partner s2);\n        \\<And>u s. vpeq u s s\\<rbrakk>\n       \\<Longrightarrow> vpeq u\n                          (case x31 of EV_SIGNAL_PREP \\<Rightarrow> s1\n                           | EV_SIGNAL_FINISH \\<Rightarrow>\n                               atomic_step_ev_signal (current s1) x32 s1)\n                          (case x31 of EV_SIGNAL_PREP \\<Rightarrow> s2\n                           | EV_SIGNAL_FINISH \\<Rightarrow>\n                               atomic_step_ev_signal (current s2) x32 s2)", "by  (simp split: ev_signal_stage_t.splits)"], ["proof (state)\nthis:\n  vpeq u (atomic_step s1 ipt) (atomic_step s2 ipt)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}