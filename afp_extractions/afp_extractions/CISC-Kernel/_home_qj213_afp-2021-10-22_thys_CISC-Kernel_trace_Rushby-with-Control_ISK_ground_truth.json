{"file_name": "/home/qj213/afp-2021-10-22/thys/CISC-Kernel/trace/Rushby-with-Control/ISK.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CISC-Kernel", "problem_names": ["lemma next_execution_is_realistic_partial:\nassumes na_def: \"next_execs s execs d = aseq # aseqs\"\n    and d_is_curr: \"d = current s\"\n    and realistic: \"realistic_executions_ind execs\"\n    and thread_not_empty: \"\\<not>thread_empty(execs (current s))\"\nshows \"realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\"", "lemma run_total_equals_run:\n  assumes realistic_exec: \"realistic_executions execs\"\n      and invariant: \"invariant s\"      \n    shows \"strict_equal (run n (Some s) execs) (run_total n s execs)\"", "lemma realistic_purge:\n  shows \"\\<forall> execs d . realistic_executions execs \\<longrightarrow> realistic_executions (purge execs d)\"", "lemma remove_gateway_comm_subset:\nshows \"set (remove_gateway_communications d exec) \\<subseteq> set exec \\<union> {[]}\"", "lemma realistic_ipurge_l:\n  shows \"\\<forall> execs d . realistic_executions execs \\<longrightarrow> realistic_executions (ipurge_l execs d)\"", "lemma realistic_ipurge_r:\n  shows \"\\<forall> execs d . realistic_executions execs \\<longrightarrow> realistic_executions (ipurge_r execs d)\"", "theorem unwinding_implies_isecure_total:\nshows isecure_total"], "translations": [["", "lemma next_execution_is_realistic_partial:\nassumes na_def: \"next_execs s execs d = aseq # aseqs\"\n    and d_is_curr: \"d = current s\"\n    and realistic: \"realistic_executions_ind execs\"\n    and thread_not_empty: \"\\<not>thread_empty(execs (current s))\"\nshows \"realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "let ?c = \"control s (current s) (execs (current s))\""], ["proof (state)\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "assume c_empty: \"let (a,aseqs',s') = ?c in\n              (a,aseqs') = (None,[])\""], ["proof (state)\nthis:\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') = (None, [])\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "from na_def d_is_curr c_empty"], ["proof (chain)\npicking this:\n  next_execs s execs d = aseq # aseqs\n  d = current s\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') = (None, [])", "have ?thesis"], ["proof (prove)\nusing this:\n  next_execs s execs d = aseq # aseqs\n  d = current s\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') = (None, [])\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "unfolding realistic_executions_ind_def next_execs_def"], ["proof (prove)\nusing this:\n  (execs\n   (current s := fst (snd (control s (current s) (execs (current s))))))\n   d =\n  aseq # aseqs\n  d = current s\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') = (None, [])\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "by (auto)"], ["proof (state)\nthis:\n  realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "}"], ["proof (state)\nthis:\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') = (None, []) \\<Longrightarrow>\n  realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "moreover"], ["proof (state)\nthis:\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') = (None, []) \\<Longrightarrow>\n  realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "{"], ["proof (state)\nthis:\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') = (None, []) \\<Longrightarrow>\n  realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "let ?ct= \"execs (current s)\""], ["proof (state)\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "let ?execs' = \"(tl (hd ?ct))#(tl ?ct)\""], ["proof (state)\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "let ?a' = \"Some (hd (hd ?ct))\""], ["proof (state)\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "assume hd_thread_not_empty: \"hd (execs (current s)) \\<noteq> []\""], ["proof (state)\nthis:\n  hd (execs (current s)) \\<noteq> []\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "assume c_executing: \"let (a,aseqs',s') = ?c in\n                            (a,aseqs') = (?a', ?execs')\""], ["proof (state)\nthis:\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') =\n     (Some (hd (hd (execs (current s)))),\n      tl (hd (execs (current s))) # tl (execs (current s)))\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "from na_def c_executing d_is_curr"], ["proof (chain)\npicking this:\n  next_execs s execs d = aseq # aseqs\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') =\n     (Some (hd (hd (execs (current s)))),\n      tl (hd (execs (current s))) # tl (execs (current s)))\n  d = current s", "have as_defs: \"aseq = tl (hd ?ct) \\<and> aseqs = tl ?ct\""], ["proof (prove)\nusing this:\n  next_execs s execs d = aseq # aseqs\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') =\n     (Some (hd (hd (execs (current s)))),\n      tl (hd (execs (current s))) # tl (execs (current s)))\n  d = current s\n\ngoal (1 subgoal):\n 1. aseq = tl (hd (execs (current s))) \\<and> aseqs = tl (execs (current s))", "unfolding next_execs_def"], ["proof (prove)\nusing this:\n  (execs\n   (current s := fst (snd (control s (current s) (execs (current s))))))\n   d =\n  aseq # aseqs\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') =\n     (Some (hd (hd (execs (current s)))),\n      tl (hd (execs (current s))) # tl (execs (current s)))\n  d = current s\n\ngoal (1 subgoal):\n 1. aseq = tl (hd (execs (current s))) \\<and> aseqs = tl (execs (current s))", "by (auto)"], ["proof (state)\nthis:\n  aseq = tl (hd (execs (current s))) \\<and> aseqs = tl (execs (current s))\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "from realistic[unfolded realistic_executions_ind_def,THEN spec,where x=d] d_is_curr"], ["proof (chain)\npicking this:\n  case execs d of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n  d = current s", "have subset: \"set (tl ?execs') \\<subseteq> AS_set\""], ["proof (prove)\nusing this:\n  case execs d of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n  d = current s\n\ngoal (1 subgoal):\n 1. set (tl (tl (hd (execs (current s))) # tl (execs (current s))))\n    \\<subseteq> AS_set", "unfolding Let_def realistic_AS_partial_def"], ["proof (prove)\nusing this:\n  case execs d of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      (\\<exists>n aseq'.\n          n \\<le> length aseq' \\<and>\n          aseq' \\<in> AS_set \\<and> aseq = lastn n aseq') \\<and>\n      set aseqs \\<subseteq> AS_set\n  d = current s\n\ngoal (1 subgoal):\n 1. set (tl (tl (hd (execs (current s))) # tl (execs (current s))))\n    \\<subseteq> AS_set", "by (cases \"execs d\",auto)"], ["proof (state)\nthis:\n  set (tl (tl (hd (execs (current s))) # tl (execs (current s))))\n  \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "from d_is_curr thread_not_empty hd_thread_not_empty realistic[unfolded realistic_executions_ind_def,THEN spec,where x=d]"], ["proof (chain)\npicking this:\n  d = current s\n  \\<not> thread_empty (execs (current s))\n  hd (execs (current s)) \\<noteq> []\n  case execs d of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "obtain n aseq' where n_aseq': \"n \\<le> length aseq' \\<and> aseq' \\<in> AS_set \\<and> hd ?ct = lastn n aseq'\""], ["proof (prove)\nusing this:\n  d = current s\n  \\<not> thread_empty (execs (current s))\n  hd (execs (current s)) \\<noteq> []\n  case execs d of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. (\\<And>n aseq'.\n        n \\<le> length aseq' \\<and>\n        aseq' \\<in> AS_set \\<and>\n        hd (execs (current s)) = lastn n aseq' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding realistic_AS_partial_def"], ["proof (prove)\nusing this:\n  d = current s\n  \\<not> thread_empty (execs (current s))\n  hd (execs (current s)) \\<noteq> []\n  case execs d of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      (\\<exists>n aseq'.\n          n \\<le> length aseq' \\<and>\n          aseq' \\<in> AS_set \\<and> aseq = lastn n aseq') \\<and>\n      set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. (\\<And>n aseq'.\n        n \\<le> length aseq' \\<and>\n        aseq' \\<in> AS_set \\<and>\n        hd (execs (current s)) = lastn n aseq' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \"execs d\",auto)"], ["proof (state)\nthis:\n  n \\<le> length aseq' \\<and>\n  aseq' \\<in> AS_set \\<and> hd (execs (current s)) = lastn n aseq'\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "from this hd_thread_not_empty"], ["proof (chain)\npicking this:\n  n \\<le> length aseq' \\<and>\n  aseq' \\<in> AS_set \\<and> hd (execs (current s)) = lastn n aseq'\n  hd (execs (current s)) \\<noteq> []", "have \"n > 0\""], ["proof (prove)\nusing this:\n  n \\<le> length aseq' \\<and>\n  aseq' \\<in> AS_set \\<and> hd (execs (current s)) = lastn n aseq'\n  hd (execs (current s)) \\<noteq> []\n\ngoal (1 subgoal):\n 1. 0 < n", "unfolding lastn_def"], ["proof (prove)\nusing this:\n  n \\<le> length aseq' \\<and>\n  aseq' \\<in> AS_set \\<and>\n  hd (execs (current s)) = drop (length aseq' - n) aseq'\n  hd (execs (current s)) \\<noteq> []\n\ngoal (1 subgoal):\n 1. 0 < n", "by(cases n,auto)"], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "from this n_aseq' lastn_one_less[where n=n and x=aseq' and a=\"hd (hd ?ct)\" and y=\"tl (hd ?ct)\"] hd_thread_not_empty"], ["proof (chain)\npicking this:\n  0 < n\n  n \\<le> length aseq' \\<and>\n  aseq' \\<in> AS_set \\<and> hd (execs (current s)) = lastn n aseq'\n  0 < n \\<and>\n  n \\<le> length aseq' \\<and>\n  lastn n aseq' =\n  hd (hd (execs (current s))) #\n  tl (hd (execs (current s))) \\<longrightarrow>\n  lastn (n - 1) aseq' = tl (hd (execs (current s)))\n  hd (execs (current s)) \\<noteq> []", "have \"n - 1 \\<le> length aseq' \\<and> aseq' \\<in> AS_set \\<and> tl (hd ?ct) = lastn (n - 1) aseq'\""], ["proof (prove)\nusing this:\n  0 < n\n  n \\<le> length aseq' \\<and>\n  aseq' \\<in> AS_set \\<and> hd (execs (current s)) = lastn n aseq'\n  0 < n \\<and>\n  n \\<le> length aseq' \\<and>\n  lastn n aseq' =\n  hd (hd (execs (current s))) #\n  tl (hd (execs (current s))) \\<longrightarrow>\n  lastn (n - 1) aseq' = tl (hd (execs (current s)))\n  hd (execs (current s)) \\<noteq> []\n\ngoal (1 subgoal):\n 1. n - 1 \\<le> length aseq' \\<and>\n    aseq' \\<in> AS_set \\<and>\n    tl (hd (execs (current s))) = lastn (n - 1) aseq'", "by auto"], ["proof (state)\nthis:\n  n - 1 \\<le> length aseq' \\<and>\n  aseq' \\<in> AS_set \\<and>\n  tl (hd (execs (current s))) = lastn (n - 1) aseq'\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "from this as_defs subset"], ["proof (chain)\npicking this:\n  n - 1 \\<le> length aseq' \\<and>\n  aseq' \\<in> AS_set \\<and>\n  tl (hd (execs (current s))) = lastn (n - 1) aseq'\n  aseq = tl (hd (execs (current s))) \\<and> aseqs = tl (execs (current s))\n  set (tl (tl (hd (execs (current s))) # tl (execs (current s))))\n  \\<subseteq> AS_set", "have ?thesis"], ["proof (prove)\nusing this:\n  n - 1 \\<le> length aseq' \\<and>\n  aseq' \\<in> AS_set \\<and>\n  tl (hd (execs (current s))) = lastn (n - 1) aseq'\n  aseq = tl (hd (execs (current s))) \\<and> aseqs = tl (execs (current s))\n  set (tl (tl (hd (execs (current s))) # tl (execs (current s))))\n  \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "unfolding realistic_AS_partial_def"], ["proof (prove)\nusing this:\n  n - 1 \\<le> length aseq' \\<and>\n  aseq' \\<in> AS_set \\<and>\n  tl (hd (execs (current s))) = lastn (n - 1) aseq'\n  aseq = tl (hd (execs (current s))) \\<and> aseqs = tl (execs (current s))\n  set (tl (tl (hd (execs (current s))) # tl (execs (current s))))\n  \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. (\\<exists>n aseq'.\n        n \\<le> length aseq' \\<and>\n        aseq' \\<in> AS_set \\<and> aseq = lastn n aseq') \\<and>\n    set aseqs \\<subseteq> AS_set", "by auto"], ["proof (state)\nthis:\n  realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "}"], ["proof (state)\nthis:\n  \\<lbrakk>hd (execs (current s)) \\<noteq> [];\n   let (a, aseqs', s') = control s (current s) (execs (current s))\n   in (a, aseqs') =\n      (Some (hd (hd (execs (current s)))),\n       tl (hd (execs (current s))) # tl (execs (current s)))\\<rbrakk>\n  \\<Longrightarrow> realistic_AS_partial aseq \\<and>\n                    set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>hd (execs (current s)) \\<noteq> [];\n   let (a, aseqs', s') = control s (current s) (execs (current s))\n   in (a, aseqs') =\n      (Some (hd (hd (execs (current s)))),\n       tl (hd (execs (current s))) # tl (execs (current s)))\\<rbrakk>\n  \\<Longrightarrow> realistic_AS_partial aseq \\<and>\n                    set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "{"], ["proof (state)\nthis:\n  \\<lbrakk>hd (execs (current s)) \\<noteq> [];\n   let (a, aseqs', s') = control s (current s) (execs (current s))\n   in (a, aseqs') =\n      (Some (hd (hd (execs (current s)))),\n       tl (hd (execs (current s))) # tl (execs (current s)))\\<rbrakk>\n  \\<Longrightarrow> realistic_AS_partial aseq \\<and>\n                    set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "let ?ct= \"execs (current s)\""], ["proof (state)\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "let ?execs' = \"?ct\""], ["proof (state)\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "let ?a' = \"Some (hd (hd ?ct))\""], ["proof (state)\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "assume c_waiting: \"let (a,aseqs',s') = ?c in\n                            (a,aseqs') = (?a', ?execs')\""], ["proof (state)\nthis:\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') = (Some (hd (hd (execs (current s)))), execs (current s))\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "from na_def c_waiting d_is_curr"], ["proof (chain)\npicking this:\n  next_execs s execs d = aseq # aseqs\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') = (Some (hd (hd (execs (current s)))), execs (current s))\n  d = current s", "have as_defs: \"aseq = hd ?execs' \\<and> aseqs = tl ?execs'\""], ["proof (prove)\nusing this:\n  next_execs s execs d = aseq # aseqs\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') = (Some (hd (hd (execs (current s)))), execs (current s))\n  d = current s\n\ngoal (1 subgoal):\n 1. aseq = hd (execs (current s)) \\<and> aseqs = tl (execs (current s))", "unfolding next_execs_def"], ["proof (prove)\nusing this:\n  (execs\n   (current s := fst (snd (control s (current s) (execs (current s))))))\n   d =\n  aseq # aseqs\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') = (Some (hd (hd (execs (current s)))), execs (current s))\n  d = current s\n\ngoal (1 subgoal):\n 1. aseq = hd (execs (current s)) \\<and> aseqs = tl (execs (current s))", "by (auto)"], ["proof (state)\nthis:\n  aseq = hd (execs (current s)) \\<and> aseqs = tl (execs (current s))\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "from realistic[unfolded realistic_executions_ind_def,THEN spec,where x=d] d_is_curr set_tl_is_subset[where x=\"?execs'\"]"], ["proof (chain)\npicking this:\n  case execs d of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n  d = current s\n  set (tl (execs (current s))) \\<subseteq> set (execs (current s))", "have subset: \"set (tl ?execs') \\<subseteq> AS_set\""], ["proof (prove)\nusing this:\n  case execs d of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n  d = current s\n  set (tl (execs (current s))) \\<subseteq> set (execs (current s))\n\ngoal (1 subgoal):\n 1. set (tl (execs (current s))) \\<subseteq> AS_set", "unfolding Let_def realistic_AS_partial_def"], ["proof (prove)\nusing this:\n  case execs d of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      (\\<exists>n aseq'.\n          n \\<le> length aseq' \\<and>\n          aseq' \\<in> AS_set \\<and> aseq = lastn n aseq') \\<and>\n      set aseqs \\<subseteq> AS_set\n  d = current s\n  set (tl (execs (current s))) \\<subseteq> set (execs (current s))\n\ngoal (1 subgoal):\n 1. set (tl (execs (current s))) \\<subseteq> AS_set", "by (cases \"execs d\",auto)"], ["proof (state)\nthis:\n  set (tl (execs (current s))) \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "from na_def c_waiting d_is_curr"], ["proof (chain)\npicking this:\n  next_execs s execs d = aseq # aseqs\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') = (Some (hd (hd (execs (current s)))), execs (current s))\n  d = current s", "have \"?execs' \\<noteq> []\""], ["proof (prove)\nusing this:\n  next_execs s execs d = aseq # aseqs\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') = (Some (hd (hd (execs (current s)))), execs (current s))\n  d = current s\n\ngoal (1 subgoal):\n 1. execs (current s) \\<noteq> []", "unfolding next_execs_def"], ["proof (prove)\nusing this:\n  (execs\n   (current s := fst (snd (control s (current s) (execs (current s))))))\n   d =\n  aseq # aseqs\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') = (Some (hd (hd (execs (current s)))), execs (current s))\n  d = current s\n\ngoal (1 subgoal):\n 1. execs (current s) \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  execs (current s) \\<noteq> []\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "from realistic[unfolded realistic_executions_ind_def,THEN spec,where x=d] d_is_curr thread_not_empty"], ["proof (chain)\npicking this:\n  case execs d of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n  d = current s\n  \\<not> thread_empty (execs (current s))", "obtain n aseq' where witness: \"n \\<le> length aseq' \\<and> aseq' \\<in> AS_set \\<and> hd(execs d) = lastn n aseq'\""], ["proof (prove)\nusing this:\n  case execs d of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n  d = current s\n  \\<not> thread_empty (execs (current s))\n\ngoal (1 subgoal):\n 1. (\\<And>n aseq'.\n        n \\<le> length aseq' \\<and>\n        aseq' \\<in> AS_set \\<and>\n        hd (execs d) = lastn n aseq' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding realistic_AS_partial_def"], ["proof (prove)\nusing this:\n  case execs d of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      (\\<exists>n aseq'.\n          n \\<le> length aseq' \\<and>\n          aseq' \\<in> AS_set \\<and> aseq = lastn n aseq') \\<and>\n      set aseqs \\<subseteq> AS_set\n  d = current s\n  \\<not> thread_empty (execs (current s))\n\ngoal (1 subgoal):\n 1. (\\<And>n aseq'.\n        n \\<le> length aseq' \\<and>\n        aseq' \\<in> AS_set \\<and>\n        hd (execs d) = lastn n aseq' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \"execs d\",auto)"], ["proof (state)\nthis:\n  n \\<le> length aseq' \\<and>\n  aseq' \\<in> AS_set \\<and> hd (execs d) = lastn n aseq'\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "from d_is_curr this subset as_defs"], ["proof (chain)\npicking this:\n  d = current s\n  n \\<le> length aseq' \\<and>\n  aseq' \\<in> AS_set \\<and> hd (execs d) = lastn n aseq'\n  set (tl (execs (current s))) \\<subseteq> AS_set\n  aseq = hd (execs (current s)) \\<and> aseqs = tl (execs (current s))", "have ?thesis"], ["proof (prove)\nusing this:\n  d = current s\n  n \\<le> length aseq' \\<and>\n  aseq' \\<in> AS_set \\<and> hd (execs d) = lastn n aseq'\n  set (tl (execs (current s))) \\<subseteq> AS_set\n  aseq = hd (execs (current s)) \\<and> aseqs = tl (execs (current s))\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "unfolding realistic_AS_partial_def"], ["proof (prove)\nusing this:\n  d = current s\n  n \\<le> length aseq' \\<and>\n  aseq' \\<in> AS_set \\<and> hd (execs d) = lastn n aseq'\n  set (tl (execs (current s))) \\<subseteq> AS_set\n  aseq = hd (execs (current s)) \\<and> aseqs = tl (execs (current s))\n\ngoal (1 subgoal):\n 1. (\\<exists>n aseq'.\n        n \\<le> length aseq' \\<and>\n        aseq' \\<in> AS_set \\<and> aseq = lastn n aseq') \\<and>\n    set aseqs \\<subseteq> AS_set", "by auto"], ["proof (state)\nthis:\n  realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "}"], ["proof (state)\nthis:\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') =\n     (Some (hd (hd (execs (current s)))),\n      execs (current s)) \\<Longrightarrow>\n  realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "moreover"], ["proof (state)\nthis:\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') =\n     (Some (hd (hd (execs (current s)))),\n      execs (current s)) \\<Longrightarrow>\n  realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "{"], ["proof (state)\nthis:\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') =\n     (Some (hd (hd (execs (current s)))),\n      execs (current s)) \\<Longrightarrow>\n  realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "let ?ct= \"execs (current s)\""], ["proof (state)\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "let ?execs' = \"tl ?ct\""], ["proof (state)\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "let ?a' = \"None\""], ["proof (state)\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "assume c_aborting: \"let (a,aseqs',s') = ?c in\n                            (a,aseqs') = (?a', ?execs')\""], ["proof (state)\nthis:\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') = (None, tl (execs (current s)))\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "from na_def c_aborting d_is_curr"], ["proof (chain)\npicking this:\n  next_execs s execs d = aseq # aseqs\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') = (None, tl (execs (current s)))\n  d = current s", "have as_defs: \"aseq = hd ?execs' \\<and> aseqs = tl ?execs'\""], ["proof (prove)\nusing this:\n  next_execs s execs d = aseq # aseqs\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') = (None, tl (execs (current s)))\n  d = current s\n\ngoal (1 subgoal):\n 1. aseq = hd (tl (execs (current s))) \\<and>\n    aseqs = tl (tl (execs (current s)))", "unfolding next_execs_def"], ["proof (prove)\nusing this:\n  (execs\n   (current s := fst (snd (control s (current s) (execs (current s))))))\n   d =\n  aseq # aseqs\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') = (None, tl (execs (current s)))\n  d = current s\n\ngoal (1 subgoal):\n 1. aseq = hd (tl (execs (current s))) \\<and>\n    aseqs = tl (tl (execs (current s)))", "by (auto)"], ["proof (state)\nthis:\n  aseq = hd (tl (execs (current s))) \\<and>\n  aseqs = tl (tl (execs (current s)))\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "from realistic[unfolded realistic_executions_ind_def,THEN spec,where x=d] d_is_curr set_tl_is_subset[where x=\"?execs'\"]"], ["proof (chain)\npicking this:\n  case execs d of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n  d = current s\n  set (tl (tl (execs (current s)))) \\<subseteq> set (tl (execs (current s)))", "have subset: \"set (tl ?execs') \\<subseteq> AS_set\""], ["proof (prove)\nusing this:\n  case execs d of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n  d = current s\n  set (tl (tl (execs (current s)))) \\<subseteq> set (tl (execs (current s)))\n\ngoal (1 subgoal):\n 1. set (tl (tl (execs (current s)))) \\<subseteq> AS_set", "unfolding Let_def realistic_AS_partial_def"], ["proof (prove)\nusing this:\n  case execs d of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      (\\<exists>n aseq'.\n          n \\<le> length aseq' \\<and>\n          aseq' \\<in> AS_set \\<and> aseq = lastn n aseq') \\<and>\n      set aseqs \\<subseteq> AS_set\n  d = current s\n  set (tl (tl (execs (current s)))) \\<subseteq> set (tl (execs (current s)))\n\ngoal (1 subgoal):\n 1. set (tl (tl (execs (current s)))) \\<subseteq> AS_set", "by (cases \"execs d\",auto)"], ["proof (state)\nthis:\n  set (tl (tl (execs (current s)))) \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "from na_def c_aborting d_is_curr"], ["proof (chain)\npicking this:\n  next_execs s execs d = aseq # aseqs\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') = (None, tl (execs (current s)))\n  d = current s", "have \"?execs' \\<noteq> []\""], ["proof (prove)\nusing this:\n  next_execs s execs d = aseq # aseqs\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') = (None, tl (execs (current s)))\n  d = current s\n\ngoal (1 subgoal):\n 1. tl (execs (current s)) \\<noteq> []", "unfolding next_execs_def"], ["proof (prove)\nusing this:\n  (execs\n   (current s := fst (snd (control s (current s) (execs (current s))))))\n   d =\n  aseq # aseqs\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') = (None, tl (execs (current s)))\n  d = current s\n\ngoal (1 subgoal):\n 1. tl (execs (current s)) \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  tl (execs (current s)) \\<noteq> []\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "from empty_in_AS_set this\n    realistic[unfolded realistic_executions_ind_def,THEN spec,where x=d] d_is_curr"], ["proof (chain)\npicking this:\n  [] \\<in> AS_set\n  tl (execs (current s)) \\<noteq> []\n  case execs d of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n  d = current s", "have \"length (hd ?execs') \\<le> length (hd ?execs') \\<and> (hd ?execs') \\<in> AS_set \\<and> hd ?execs' = lastn (length (hd ?execs')) (hd ?execs')\""], ["proof (prove)\nusing this:\n  [] \\<in> AS_set\n  tl (execs (current s)) \\<noteq> []\n  case execs d of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n  d = current s\n\ngoal (1 subgoal):\n 1. length (hd (tl (execs (current s))))\n    \\<le> length (hd (tl (execs (current s)))) \\<and>\n    hd (tl (execs (current s))) \\<in> AS_set \\<and>\n    hd (tl (execs (current s))) =\n    lastn (length (hd (tl (execs (current s)))))\n     (hd (tl (execs (current s))))", "unfolding lastn_def"], ["proof (prove)\nusing this:\n  [] \\<in> AS_set\n  tl (execs (current s)) \\<noteq> []\n  case execs d of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n  d = current s\n\ngoal (1 subgoal):\n 1. length (hd (tl (execs (current s))))\n    \\<le> length (hd (tl (execs (current s)))) \\<and>\n    hd (tl (execs (current s))) \\<in> AS_set \\<and>\n    hd (tl (execs (current s))) =\n    drop\n     (length (hd (tl (execs (current s)))) -\n      length (hd (tl (execs (current s)))))\n     (hd (tl (execs (current s))))", "by (cases \"execs (current s)\",auto)"], ["proof (state)\nthis:\n  length (hd (tl (execs (current s))))\n  \\<le> length (hd (tl (execs (current s)))) \\<and>\n  hd (tl (execs (current s))) \\<in> AS_set \\<and>\n  hd (tl (execs (current s))) =\n  lastn (length (hd (tl (execs (current s))))) (hd (tl (execs (current s))))\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "from this subset as_defs"], ["proof (chain)\npicking this:\n  length (hd (tl (execs (current s))))\n  \\<le> length (hd (tl (execs (current s)))) \\<and>\n  hd (tl (execs (current s))) \\<in> AS_set \\<and>\n  hd (tl (execs (current s))) =\n  lastn (length (hd (tl (execs (current s))))) (hd (tl (execs (current s))))\n  set (tl (tl (execs (current s)))) \\<subseteq> AS_set\n  aseq = hd (tl (execs (current s))) \\<and>\n  aseqs = tl (tl (execs (current s)))", "have ?thesis"], ["proof (prove)\nusing this:\n  length (hd (tl (execs (current s))))\n  \\<le> length (hd (tl (execs (current s)))) \\<and>\n  hd (tl (execs (current s))) \\<in> AS_set \\<and>\n  hd (tl (execs (current s))) =\n  lastn (length (hd (tl (execs (current s))))) (hd (tl (execs (current s))))\n  set (tl (tl (execs (current s)))) \\<subseteq> AS_set\n  aseq = hd (tl (execs (current s))) \\<and>\n  aseqs = tl (tl (execs (current s)))\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "unfolding realistic_AS_partial_def"], ["proof (prove)\nusing this:\n  length (hd (tl (execs (current s))))\n  \\<le> length (hd (tl (execs (current s)))) \\<and>\n  hd (tl (execs (current s))) \\<in> AS_set \\<and>\n  hd (tl (execs (current s))) =\n  lastn (length (hd (tl (execs (current s))))) (hd (tl (execs (current s))))\n  set (tl (tl (execs (current s)))) \\<subseteq> AS_set\n  aseq = hd (tl (execs (current s))) \\<and>\n  aseqs = tl (tl (execs (current s)))\n\ngoal (1 subgoal):\n 1. (\\<exists>n aseq'.\n        n \\<le> length aseq' \\<and>\n        aseq' \\<in> AS_set \\<and> aseq = lastn n aseq') \\<and>\n    set aseqs \\<subseteq> AS_set", "by auto"], ["proof (state)\nthis:\n  realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "}"], ["proof (state)\nthis:\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') = (None, tl (execs (current s))) \\<Longrightarrow>\n  realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "ultimately"], ["proof (chain)\npicking this:\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') = (None, []) \\<Longrightarrow>\n  realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n  \\<lbrakk>hd (execs (current s)) \\<noteq> [];\n   let (a, aseqs', s') = control s (current s) (execs (current s))\n   in (a, aseqs') =\n      (Some (hd (hd (execs (current s)))),\n       tl (hd (execs (current s))) # tl (execs (current s)))\\<rbrakk>\n  \\<Longrightarrow> realistic_AS_partial aseq \\<and>\n                    set aseqs \\<subseteq> AS_set\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') =\n     (Some (hd (hd (execs (current s)))),\n      execs (current s)) \\<Longrightarrow>\n  realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') = (None, tl (execs (current s))) \\<Longrightarrow>\n  realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "show ?thesis"], ["proof (prove)\nusing this:\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') = (None, []) \\<Longrightarrow>\n  realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n  \\<lbrakk>hd (execs (current s)) \\<noteq> [];\n   let (a, aseqs', s') = control s (current s) (execs (current s))\n   in (a, aseqs') =\n      (Some (hd (hd (execs (current s)))),\n       tl (hd (execs (current s))) # tl (execs (current s)))\\<rbrakk>\n  \\<Longrightarrow> realistic_AS_partial aseq \\<and>\n                    set aseqs \\<subseteq> AS_set\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') =\n     (Some (hd (hd (execs (current s)))),\n      execs (current s)) \\<Longrightarrow>\n  realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') = (None, tl (execs (current s))) \\<Longrightarrow>\n  realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "using control_spec[THEN spec,THEN spec,THEN spec,where x2=s and x1=\"current s\" and x=\"execs (current s)\"]\n        d_is_curr thread_not_empty"], ["proof (prove)\nusing this:\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') = (None, []) \\<Longrightarrow>\n  realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n  \\<lbrakk>hd (execs (current s)) \\<noteq> [];\n   let (a, aseqs', s') = control s (current s) (execs (current s))\n   in (a, aseqs') =\n      (Some (hd (hd (execs (current s)))),\n       tl (hd (execs (current s))) # tl (execs (current s)))\\<rbrakk>\n  \\<Longrightarrow> realistic_AS_partial aseq \\<and>\n                    set aseqs \\<subseteq> AS_set\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') =\n     (Some (hd (hd (execs (current s)))),\n      execs (current s)) \\<Longrightarrow>\n  realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n  let (a, aseqs', s') = control s (current s) (execs (current s))\n  in (a, aseqs') = (None, tl (execs (current s))) \\<Longrightarrow>\n  realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n  case control s (current s) (execs (current s)) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (execs (current s)) \\<and> (a, aseqs') = (None, []) \\<or>\n    execs (current s) \\<noteq> [] \\<and>\n    hd (execs (current s)) \\<noteq> [] \\<and>\n    \\<not> aborting s' (current s) (the a) \\<and>\n    \\<not> waiting s' (current s) (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (execs (current s)))),\n     tl (hd (execs (current s))) # tl (execs (current s))) \\<or>\n    execs (current s) \\<noteq> [] \\<and>\n    hd (execs (current s)) \\<noteq> [] \\<and>\n    waiting s' (current s) (the a) \\<and>\n    (a, aseqs', s') =\n    (Some (hd (hd (execs (current s)))), execs (current s), s) \\<or>\n    (a, aseqs') = (None, tl (execs (current s)))\n  d = current s\n  \\<not> thread_empty (execs (current s))\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "by (auto simp add: Let_def)"], ["proof (state)\nthis:\n  realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  The lemma that proves that the total run function is equivalent to the partial run function, i.e., that in this refinement the case of the run function where the precondition is False will never occur.\n\\<close>"], ["", "lemma run_total_equals_run:\n  assumes realistic_exec: \"realistic_executions execs\"\n      and invariant: \"invariant s\"      \n    shows \"strict_equal (run n (Some s) execs) (run_total n s execs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_equal (run n (Some s) execs) (run_total n s execs)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. strict_equal (run n (Some s) execs) (run_total n s execs)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. strict_equal (run n (Some s) execs) (run_total n s execs)", "fix n ms s execs"], ["proof (state)\ngoal (1 subgoal):\n 1. strict_equal (run n (Some s) execs) (run_total n s execs)", "have \"strict_equal ms s \\<and> realistic_executions_ind execs \\<and> precondition_ind s execs \\<longrightarrow> strict_equal (run n ms execs) (run_total n s execs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_equal ms s \\<and>\n    realistic_executions_ind execs \\<and>\n    precondition_ind s execs \\<longrightarrow>\n    strict_equal (run n ms execs) (run_total n s execs)", "proof (induct n ms execs arbitrary: s rule: run.induct)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>s execs sa.\n       strict_equal s sa \\<and>\n       realistic_executions_ind execs \\<and>\n       precondition_ind sa execs \\<longrightarrow>\n       strict_equal (run 0 s execs) (run_total 0 sa execs)\n 2. \\<And>n execs s.\n       strict_equal None s \\<and>\n       realistic_executions_ind execs \\<and>\n       precondition_ind s execs \\<longrightarrow>\n       strict_equal (run (Suc n) None execs) (run_total (Suc n) s execs)\n 3. \\<And>n s execs sa.\n       \\<lbrakk>interrupt (Suc n);\n        \\<And>sa.\n           strict_equal (Some (cswitch (Suc n) s)) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some (cswitch (Suc n) s)) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 4. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 5. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 6. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "case (1 s execs sa)"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>s execs sa.\n       strict_equal s sa \\<and>\n       realistic_executions_ind execs \\<and>\n       precondition_ind sa execs \\<longrightarrow>\n       strict_equal (run 0 s execs) (run_total 0 sa execs)\n 2. \\<And>n execs s.\n       strict_equal None s \\<and>\n       realistic_executions_ind execs \\<and>\n       precondition_ind s execs \\<longrightarrow>\n       strict_equal (run (Suc n) None execs) (run_total (Suc n) s execs)\n 3. \\<And>n s execs sa.\n       \\<lbrakk>interrupt (Suc n);\n        \\<And>sa.\n           strict_equal (Some (cswitch (Suc n) s)) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some (cswitch (Suc n) s)) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 4. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 5. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 6. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_equal s sa \\<and>\n    realistic_executions_ind execs \\<and>\n    precondition_ind sa execs \\<longrightarrow>\n    strict_equal (run 0 s execs) (run_total 0 sa execs)", "by auto"], ["proof (state)\nthis:\n  strict_equal s sa \\<and>\n  realistic_executions_ind execs \\<and>\n  precondition_ind sa execs \\<longrightarrow>\n  strict_equal (run 0 s execs) (run_total 0 sa execs)\n\ngoal (5 subgoals):\n 1. \\<And>n execs s.\n       strict_equal None s \\<and>\n       realistic_executions_ind execs \\<and>\n       precondition_ind s execs \\<longrightarrow>\n       strict_equal (run (Suc n) None execs) (run_total (Suc n) s execs)\n 2. \\<And>n s execs sa.\n       \\<lbrakk>interrupt (Suc n);\n        \\<And>sa.\n           strict_equal (Some (cswitch (Suc n) s)) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some (cswitch (Suc n) s)) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 3. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 4. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 5. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>n execs s.\n       strict_equal None s \\<and>\n       realistic_executions_ind execs \\<and>\n       precondition_ind s execs \\<longrightarrow>\n       strict_equal (run (Suc n) None execs) (run_total (Suc n) s execs)\n 2. \\<And>n s execs sa.\n       \\<lbrakk>interrupt (Suc n);\n        \\<And>sa.\n           strict_equal (Some (cswitch (Suc n) s)) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some (cswitch (Suc n) s)) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 3. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 4. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 5. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "case (2 n execs s)"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>n execs s.\n       strict_equal None s \\<and>\n       realistic_executions_ind execs \\<and>\n       precondition_ind s execs \\<longrightarrow>\n       strict_equal (run (Suc n) None execs) (run_total (Suc n) s execs)\n 2. \\<And>n s execs sa.\n       \\<lbrakk>interrupt (Suc n);\n        \\<And>sa.\n           strict_equal (Some (cswitch (Suc n) s)) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some (cswitch (Suc n) s)) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 3. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 4. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 5. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_equal None s \\<and>\n    realistic_executions_ind execs \\<and>\n    precondition_ind s execs \\<longrightarrow>\n    strict_equal (run (Suc n) None execs) (run_total (Suc n) s execs)", "unfolding strict_equal_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case None of None \\<Rightarrow> False\n     | Some a' \\<Rightarrow> a' = s) \\<and>\n    realistic_executions_ind execs \\<and>\n    precondition_ind s execs \\<longrightarrow>\n    (case run (Suc n) None execs of None \\<Rightarrow> False\n     | Some a' \\<Rightarrow> a' = run_total (Suc n) s execs)", "by auto"], ["proof (state)\nthis:\n  strict_equal None s \\<and>\n  realistic_executions_ind execs \\<and>\n  precondition_ind s execs \\<longrightarrow>\n  strict_equal (run (Suc n) None execs) (run_total (Suc n) s execs)\n\ngoal (4 subgoals):\n 1. \\<And>n s execs sa.\n       \\<lbrakk>interrupt (Suc n);\n        \\<And>sa.\n           strict_equal (Some (cswitch (Suc n) s)) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some (cswitch (Suc n) s)) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 3. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 4. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n s execs sa.\n       \\<lbrakk>interrupt (Suc n);\n        \\<And>sa.\n           strict_equal (Some (cswitch (Suc n) s)) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some (cswitch (Suc n) s)) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 3. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 4. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "case (3 n s execs sa)"], ["proof (state)\nthis:\n  interrupt (Suc n)\n  strict_equal (Some (cswitch (Suc n) s)) ?s \\<and>\n  realistic_executions_ind execs \\<and>\n  precondition_ind ?s execs \\<longrightarrow>\n  strict_equal (run n (Some (cswitch (Suc n) s)) execs)\n   (run_total n ?s execs)\n\ngoal (4 subgoals):\n 1. \\<And>n s execs sa.\n       \\<lbrakk>interrupt (Suc n);\n        \\<And>sa.\n           strict_equal (Some (cswitch (Suc n) s)) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some (cswitch (Suc n) s)) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 3. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 4. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "assume interrupt: \"interrupt (Suc n)\""], ["proof (state)\nthis:\n  interrupt (Suc n)\n\ngoal (4 subgoals):\n 1. \\<And>n s execs sa.\n       \\<lbrakk>interrupt (Suc n);\n        \\<And>sa.\n           strict_equal (Some (cswitch (Suc n) s)) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some (cswitch (Suc n) s)) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 3. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 4. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "assume IH: \"(\\<And>sa. strict_equal (Some (cswitch (Suc n) s)) sa \\<and> realistic_executions_ind execs \\<and> precondition_ind sa execs \\<longrightarrow>\n             strict_equal (run n (Some (cswitch (Suc n) s)) execs) (run_total n sa execs))\""], ["proof (state)\nthis:\n  strict_equal (Some (cswitch (Suc n) s)) ?sa \\<and>\n  realistic_executions_ind execs \\<and>\n  precondition_ind ?sa execs \\<longrightarrow>\n  strict_equal (run n (Some (cswitch (Suc n) s)) execs)\n   (run_total n ?sa execs)\n\ngoal (4 subgoals):\n 1. \\<And>n s execs sa.\n       \\<lbrakk>interrupt (Suc n);\n        \\<And>sa.\n           strict_equal (Some (cswitch (Suc n) s)) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some (cswitch (Suc n) s)) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 3. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 4. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "{"], ["proof (state)\nthis:\n  strict_equal (Some (cswitch (Suc n) s)) ?sa \\<and>\n  realistic_executions_ind execs \\<and>\n  precondition_ind ?sa execs \\<longrightarrow>\n  strict_equal (run n (Some (cswitch (Suc n) s)) execs)\n   (run_total n ?sa execs)\n\ngoal (4 subgoals):\n 1. \\<And>n s execs sa.\n       \\<lbrakk>interrupt (Suc n);\n        \\<And>sa.\n           strict_equal (Some (cswitch (Suc n) s)) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some (cswitch (Suc n) s)) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 3. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 4. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "assume equal_s_sa: \"strict_equal (Some s) sa\""], ["proof (state)\nthis:\n  strict_equal (Some s) sa\n\ngoal (4 subgoals):\n 1. \\<And>n s execs sa.\n       \\<lbrakk>interrupt (Suc n);\n        \\<And>sa.\n           strict_equal (Some (cswitch (Suc n) s)) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some (cswitch (Suc n) s)) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 3. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 4. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "assume realistic: \"realistic_executions_ind execs\""], ["proof (state)\nthis:\n  realistic_executions_ind execs\n\ngoal (4 subgoals):\n 1. \\<And>n s execs sa.\n       \\<lbrakk>interrupt (Suc n);\n        \\<And>sa.\n           strict_equal (Some (cswitch (Suc n) s)) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some (cswitch (Suc n) s)) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 3. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 4. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "assume inv_sa: \"precondition_ind sa execs\""], ["proof (state)\nthis:\n  precondition_ind sa execs\n\ngoal (4 subgoals):\n 1. \\<And>n s execs sa.\n       \\<lbrakk>interrupt (Suc n);\n        \\<And>sa.\n           strict_equal (Some (cswitch (Suc n) s)) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some (cswitch (Suc n) s)) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 3. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 4. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "have inv_nsa: \"precondition_ind (cswitch (Suc n) sa) execs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. precondition_ind (cswitch (Suc n) sa) execs", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. precondition_ind (cswitch (Suc n) sa) execs", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. precondition_ind (cswitch (Suc n) sa) execs", "fix d"], ["proof (state)\ngoal (1 subgoal):\n 1. precondition_ind (cswitch (Suc n) sa) execs", "have \"fst (control (cswitch (Suc n) sa) d (execs d)) \\<rightharpoonup> AS_precondition (cswitch (Suc n) sa) d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (control (cswitch (Suc n) sa) d (execs d)) \\<rightharpoonup>\n    AS_precondition (cswitch (Suc n) sa) d", "using next_action_after_cswitch inv_sa[unfolded precondition_ind_def,THEN conjunct2,THEN spec,where x=d]\n                  precondition_after_cswitch"], ["proof (prove)\nusing this:\n  \\<forall>s n d aseqs.\n     fst (control (cswitch n s) d aseqs) = fst (control s d aseqs)\n  fst (control sa d (execs d)) \\<rightharpoonup> AS_precondition sa d\n  \\<forall>s d n a.\n     AS_precondition s d a \\<longrightarrow>\n     AS_precondition (cswitch n s) d a\n\ngoal (1 subgoal):\n 1. fst (control (cswitch (Suc n) sa) d (execs d)) \\<rightharpoonup>\n    AS_precondition (cswitch (Suc n) sa) d", "unfolding Let_def B_def precondition_ind_def"], ["proof (prove)\nusing this:\n  \\<forall>s n d aseqs.\n     fst (control (cswitch n s) d aseqs) = fst (control s d aseqs)\n  case fst (control sa d (execs d)) of None \\<Rightarrow> True\n  | Some a \\<Rightarrow> AS_precondition sa d a\n  \\<forall>s d n a.\n     AS_precondition s d a \\<longrightarrow>\n     AS_precondition (cswitch n s) d a\n\ngoal (1 subgoal):\n 1. case fst (control (cswitch (Suc n) sa) d (execs d)) of\n    None \\<Rightarrow> True\n    | Some a \\<Rightarrow> AS_precondition (cswitch (Suc n) sa) d a", "by(cases \"fst (control (cswitch (Suc n) sa) d (execs d))\",auto)"], ["proof (state)\nthis:\n  fst (control (cswitch (Suc n) sa) d (execs d)) \\<rightharpoonup>\n  AS_precondition (cswitch (Suc n) sa) d\n\ngoal (1 subgoal):\n 1. precondition_ind (cswitch (Suc n) sa) execs", "}"], ["proof (state)\nthis:\n  fst (control (cswitch (Suc n) sa) ?d2 (execs ?d2)) \\<rightharpoonup>\n  AS_precondition (cswitch (Suc n) sa) ?d2\n\ngoal (1 subgoal):\n 1. precondition_ind (cswitch (Suc n) sa) execs", "thus ?thesis"], ["proof (prove)\nusing this:\n  fst (control (cswitch (Suc n) sa) ?d2 (execs ?d2)) \\<rightharpoonup>\n  AS_precondition (cswitch (Suc n) sa) ?d2\n\ngoal (1 subgoal):\n 1. precondition_ind (cswitch (Suc n) sa) execs", "using inv_sa invariant_after_cswitch"], ["proof (prove)\nusing this:\n  fst (control (cswitch (Suc n) sa) ?d2 (execs ?d2)) \\<rightharpoonup>\n  AS_precondition (cswitch (Suc n) sa) ?d2\n  precondition_ind sa execs\n  \\<forall>s n. invariant s \\<longrightarrow> invariant (cswitch n s)\n\ngoal (1 subgoal):\n 1. precondition_ind (cswitch (Suc n) sa) execs", "unfolding precondition_ind_def"], ["proof (prove)\nusing this:\n  fst (control (cswitch (Suc n) sa) ?d2 (execs ?d2)) \\<rightharpoonup>\n  AS_precondition (cswitch (Suc n) sa) ?d2\n  invariant sa \\<and>\n  (\\<forall>d.\n      fst (control sa d (execs d)) \\<rightharpoonup> AS_precondition sa d)\n  \\<forall>s n. invariant s \\<longrightarrow> invariant (cswitch n s)\n\ngoal (1 subgoal):\n 1. invariant (cswitch (Suc n) sa) \\<and>\n    (\\<forall>d.\n        fst (control (cswitch (Suc n) sa) d (execs d)) \\<rightharpoonup>\n        AS_precondition (cswitch (Suc n) sa) d)", "by auto"], ["proof (state)\nthis:\n  precondition_ind (cswitch (Suc n) sa) execs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  precondition_ind (cswitch (Suc n) sa) execs\n\ngoal (4 subgoals):\n 1. \\<And>n s execs sa.\n       \\<lbrakk>interrupt (Suc n);\n        \\<And>sa.\n           strict_equal (Some (cswitch (Suc n) s)) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some (cswitch (Suc n) s)) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 3. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 4. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "from equal_s_sa realistic inv_nsa inv_sa IH[where sa=\"cswitch (Suc n) sa\"]"], ["proof (chain)\npicking this:\n  strict_equal (Some s) sa\n  realistic_executions_ind execs\n  precondition_ind (cswitch (Suc n) sa) execs\n  precondition_ind sa execs\n  strict_equal (Some (cswitch (Suc n) s)) (cswitch (Suc n) sa) \\<and>\n  realistic_executions_ind execs \\<and>\n  precondition_ind (cswitch (Suc n) sa) execs \\<longrightarrow>\n  strict_equal (run n (Some (cswitch (Suc n) s)) execs)\n   (run_total n (cswitch (Suc n) sa) execs)", "have equal_ns_nt: \"strict_equal (run n (Some (cswitch (Suc n) s)) execs) (run_total n (cswitch (Suc n) sa) execs)\""], ["proof (prove)\nusing this:\n  strict_equal (Some s) sa\n  realistic_executions_ind execs\n  precondition_ind (cswitch (Suc n) sa) execs\n  precondition_ind sa execs\n  strict_equal (Some (cswitch (Suc n) s)) (cswitch (Suc n) sa) \\<and>\n  realistic_executions_ind execs \\<and>\n  precondition_ind (cswitch (Suc n) sa) execs \\<longrightarrow>\n  strict_equal (run n (Some (cswitch (Suc n) s)) execs)\n   (run_total n (cswitch (Suc n) sa) execs)\n\ngoal (1 subgoal):\n 1. strict_equal (run n (Some (cswitch (Suc n) s)) execs)\n     (run_total n (cswitch (Suc n) sa) execs)", "unfolding strict_equal_def"], ["proof (prove)\nusing this:\n  case Some s of None \\<Rightarrow> False | Some a' \\<Rightarrow> a' = sa\n  realistic_executions_ind execs\n  precondition_ind (cswitch (Suc n) sa) execs\n  precondition_ind sa execs\n  (case Some (cswitch (Suc n) s) of None \\<Rightarrow> False\n   | Some a' \\<Rightarrow> a' = cswitch (Suc n) sa) \\<and>\n  realistic_executions_ind execs \\<and>\n  precondition_ind (cswitch (Suc n) sa) execs \\<longrightarrow>\n  (case run n (Some (cswitch (Suc n) s)) execs of None \\<Rightarrow> False\n   | Some a' \\<Rightarrow> a' = run_total n (cswitch (Suc n) sa) execs)\n\ngoal (1 subgoal):\n 1. case run n (Some (cswitch (Suc n) s)) execs of None \\<Rightarrow> False\n    | Some a' \\<Rightarrow> a' = run_total n (cswitch (Suc n) sa) execs", "by(auto)"], ["proof (state)\nthis:\n  strict_equal (run n (Some (cswitch (Suc n) s)) execs)\n   (run_total n (cswitch (Suc n) sa) execs)\n\ngoal (4 subgoals):\n 1. \\<And>n s execs sa.\n       \\<lbrakk>interrupt (Suc n);\n        \\<And>sa.\n           strict_equal (Some (cswitch (Suc n) s)) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some (cswitch (Suc n) s)) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 3. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 4. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>strict_equal (Some s) sa; realistic_executions_ind execs;\n   precondition_ind sa execs\\<rbrakk>\n  \\<Longrightarrow> strict_equal (run n (Some (cswitch (Suc n) s)) execs)\n                     (run_total n (cswitch (Suc n) sa) execs)\n\ngoal (4 subgoals):\n 1. \\<And>n s execs sa.\n       \\<lbrakk>interrupt (Suc n);\n        \\<And>sa.\n           strict_equal (Some (cswitch (Suc n) s)) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some (cswitch (Suc n) s)) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 3. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 4. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "from this interrupt"], ["proof (chain)\npicking this:\n  \\<lbrakk>strict_equal (Some s) sa; realistic_executions_ind execs;\n   precondition_ind sa execs\\<rbrakk>\n  \\<Longrightarrow> strict_equal (run n (Some (cswitch (Suc n) s)) execs)\n                     (run_total n (cswitch (Suc n) sa) execs)\n  interrupt (Suc n)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>strict_equal (Some s) sa; realistic_executions_ind execs;\n   precondition_ind sa execs\\<rbrakk>\n  \\<Longrightarrow> strict_equal (run n (Some (cswitch (Suc n) s)) execs)\n                     (run_total n (cswitch (Suc n) sa) execs)\n  interrupt (Suc n)\n\ngoal (1 subgoal):\n 1. strict_equal (Some s) sa \\<and>\n    realistic_executions_ind execs \\<and>\n    precondition_ind sa execs \\<longrightarrow>\n    strict_equal (run (Suc n) (Some s) execs) (run_total (Suc n) sa execs)", "by auto"], ["proof (state)\nthis:\n  strict_equal (Some s) sa \\<and>\n  realistic_executions_ind execs \\<and>\n  precondition_ind sa execs \\<longrightarrow>\n  strict_equal (run (Suc n) (Some s) execs) (run_total (Suc n) sa execs)\n\ngoal (3 subgoals):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 3. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 3. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "case (4 n execs s sa)"], ["proof (state)\nthis:\n  \\<not> interrupt (Suc n)\n  thread_empty (execs (current s))\n  strict_equal (Some s) ?s \\<and>\n  realistic_executions_ind execs \\<and>\n  precondition_ind ?s execs \\<longrightarrow>\n  strict_equal (run n (Some s) execs) (run_total n ?s execs)\n\ngoal (3 subgoals):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 3. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "assume not_interrupt: \"\\<not>interrupt (Suc n)\""], ["proof (state)\nthis:\n  \\<not> interrupt (Suc n)\n\ngoal (3 subgoals):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 3. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "assume thread_empty: \"thread_empty(execs (current s))\""], ["proof (state)\nthis:\n  thread_empty (execs (current s))\n\ngoal (3 subgoals):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 3. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "assume IH: \"(\\<And>sa. strict_equal (Some s) sa \\<and> realistic_executions_ind execs \\<and> precondition_ind sa execs \\<longrightarrow> strict_equal (run n (Some s) execs) (run_total n sa execs))\""], ["proof (state)\nthis:\n  strict_equal (Some s) ?sa \\<and>\n  realistic_executions_ind execs \\<and>\n  precondition_ind ?sa execs \\<longrightarrow>\n  strict_equal (run n (Some s) execs) (run_total n ?sa execs)\n\ngoal (3 subgoals):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 3. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "have current_s_sa: \"strict_equal (Some s) sa \\<longrightarrow> current s = current sa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_equal (Some s) sa \\<longrightarrow> current s = current sa", "unfolding strict_equal_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case Some s of None \\<Rightarrow> False\n     | Some a' \\<Rightarrow> a' = sa) \\<longrightarrow>\n    current s = current sa", "by auto"], ["proof (state)\nthis:\n  strict_equal (Some s) sa \\<longrightarrow> current s = current sa\n\ngoal (3 subgoals):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 3. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "{"], ["proof (state)\nthis:\n  strict_equal (Some s) sa \\<longrightarrow> current s = current sa\n\ngoal (3 subgoals):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 3. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "assume equal_s_sa: \"strict_equal (Some s) sa\""], ["proof (state)\nthis:\n  strict_equal (Some s) sa\n\ngoal (3 subgoals):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 3. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "assume realistic: \"realistic_executions_ind execs\""], ["proof (state)\nthis:\n  realistic_executions_ind execs\n\ngoal (3 subgoals):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 3. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "assume inv_sa: \"precondition_ind sa execs\""], ["proof (state)\nthis:\n  precondition_ind sa execs\n\ngoal (3 subgoals):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 3. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "from equal_s_sa realistic inv_sa IH[where sa=\"sa\"]"], ["proof (chain)\npicking this:\n  strict_equal (Some s) sa\n  realistic_executions_ind execs\n  precondition_ind sa execs\n  strict_equal (Some s) sa \\<and>\n  realistic_executions_ind execs \\<and>\n  precondition_ind sa execs \\<longrightarrow>\n  strict_equal (run n (Some s) execs) (run_total n sa execs)", "have equal_ns_nt: \"strict_equal (run n (Some s) execs) (run_total n sa execs)\""], ["proof (prove)\nusing this:\n  strict_equal (Some s) sa\n  realistic_executions_ind execs\n  precondition_ind sa execs\n  strict_equal (Some s) sa \\<and>\n  realistic_executions_ind execs \\<and>\n  precondition_ind sa execs \\<longrightarrow>\n  strict_equal (run n (Some s) execs) (run_total n sa execs)\n\ngoal (1 subgoal):\n 1. strict_equal (run n (Some s) execs) (run_total n sa execs)", "unfolding strict_equal_def"], ["proof (prove)\nusing this:\n  case Some s of None \\<Rightarrow> False | Some a' \\<Rightarrow> a' = sa\n  realistic_executions_ind execs\n  precondition_ind sa execs\n  (case Some s of None \\<Rightarrow> False\n   | Some a' \\<Rightarrow> a' = sa) \\<and>\n  realistic_executions_ind execs \\<and>\n  precondition_ind sa execs \\<longrightarrow>\n  (case run n (Some s) execs of None \\<Rightarrow> False\n   | Some a' \\<Rightarrow> a' = run_total n sa execs)\n\ngoal (1 subgoal):\n 1. case run n (Some s) execs of None \\<Rightarrow> False\n    | Some a' \\<Rightarrow> a' = run_total n sa execs", "by(auto)"], ["proof (state)\nthis:\n  strict_equal (run n (Some s) execs) (run_total n sa execs)\n\ngoal (3 subgoals):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 3. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>strict_equal (Some s) sa; realistic_executions_ind execs;\n   precondition_ind sa execs\\<rbrakk>\n  \\<Longrightarrow> strict_equal (run n (Some s) execs)\n                     (run_total n sa execs)\n\ngoal (3 subgoals):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n); thread_empty (execs (current s));\n        \\<And>sa.\n           strict_equal (Some s) sa \\<and>\n           realistic_executions_ind execs \\<and>\n           precondition_ind sa execs \\<longrightarrow>\n           strict_equal (run n (Some s) execs)\n            (run_total n sa execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 3. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "from this current_s_sa thread_empty not_interrupt"], ["proof (chain)\npicking this:\n  \\<lbrakk>strict_equal (Some s) sa; realistic_executions_ind execs;\n   precondition_ind sa execs\\<rbrakk>\n  \\<Longrightarrow> strict_equal (run n (Some s) execs)\n                     (run_total n sa execs)\n  strict_equal (Some s) sa \\<longrightarrow> current s = current sa\n  thread_empty (execs (current s))\n  \\<not> interrupt (Suc n)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>strict_equal (Some s) sa; realistic_executions_ind execs;\n   precondition_ind sa execs\\<rbrakk>\n  \\<Longrightarrow> strict_equal (run n (Some s) execs)\n                     (run_total n sa execs)\n  strict_equal (Some s) sa \\<longrightarrow> current s = current sa\n  thread_empty (execs (current s))\n  \\<not> interrupt (Suc n)\n\ngoal (1 subgoal):\n 1. strict_equal (Some s) sa \\<and>\n    realistic_executions_ind execs \\<and>\n    precondition_ind sa execs \\<longrightarrow>\n    strict_equal (run (Suc n) (Some s) execs) (run_total (Suc n) sa execs)", "by auto"], ["proof (state)\nthis:\n  strict_equal (Some s) sa \\<and>\n  realistic_executions_ind execs \\<and>\n  precondition_ind sa execs \\<longrightarrow>\n  strict_equal (run (Suc n) (Some s) execs) (run_total (Suc n) sa execs)\n\ngoal (2 subgoals):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "case (5 n execs s sa)"], ["proof (state)\nthis:\n  \\<not> interrupt (Suc n)\n  \\<not> thread_empty (execs (current s))\n  \\<not> precondition (next_state s execs) (next_action s execs)\n\ngoal (2 subgoals):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "assume not_interrupt: \"\\<not>interrupt (Suc n)\""], ["proof (state)\nthis:\n  \\<not> interrupt (Suc n)\n\ngoal (2 subgoals):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "assume thread_not_empty: \"\\<not>thread_empty(execs (current s))\""], ["proof (state)\nthis:\n  \\<not> thread_empty (execs (current s))\n\ngoal (2 subgoals):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "assume not_prec: \"\\<not> precondition (next_state s execs) (next_action s execs)\"\n    \\<comment> \\<open>In locale ISK, the precondition can be proven to hold at all times. This case cannot happen, and we can prove False.\\<close>"], ["proof (state)\nthis:\n  \\<not> precondition (next_state s execs) (next_action s execs)\n\ngoal (2 subgoals):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "{"], ["proof (state)\nthis:\n  \\<not> precondition (next_state s execs) (next_action s execs)\n\ngoal (2 subgoals):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "assume equal_s_sa: \"strict_equal (Some s) sa\""], ["proof (state)\nthis:\n  strict_equal (Some s) sa\n\ngoal (2 subgoals):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "assume realistic: \"realistic_executions_ind execs\""], ["proof (state)\nthis:\n  realistic_executions_ind execs\n\ngoal (2 subgoals):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "assume inv_sa: \"precondition_ind sa execs\""], ["proof (state)\nthis:\n  precondition_ind sa execs\n\ngoal (2 subgoals):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "from equal_s_sa"], ["proof (chain)\npicking this:\n  strict_equal (Some s) sa", "have s_sa: \"s = sa\""], ["proof (prove)\nusing this:\n  strict_equal (Some s) sa\n\ngoal (1 subgoal):\n 1. s = sa", "unfolding strict_equal_def"], ["proof (prove)\nusing this:\n  case Some s of None \\<Rightarrow> False | Some a' \\<Rightarrow> a' = sa\n\ngoal (1 subgoal):\n 1. s = sa", "by auto"], ["proof (state)\nthis:\n  s = sa\n\ngoal (2 subgoals):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "from inv_sa"], ["proof (chain)\npicking this:\n  precondition_ind sa execs", "have\n        \"next_action sa execs \\<rightharpoonup> AS_precondition sa (current sa)\""], ["proof (prove)\nusing this:\n  precondition_ind sa execs\n\ngoal (1 subgoal):\n 1. next_action sa execs \\<rightharpoonup> AS_precondition sa (current sa)", "unfolding precondition_ind_def B_def next_action_def"], ["proof (prove)\nusing this:\n  invariant sa \\<and>\n  (\\<forall>d.\n      case fst (control sa d (execs d)) of None \\<Rightarrow> True\n      | Some a \\<Rightarrow> AS_precondition sa d a)\n\ngoal (1 subgoal):\n 1. case fst (control sa (current sa) (execs (current sa))) of\n    None \\<Rightarrow> True\n    | Some a \\<Rightarrow> AS_precondition sa (current sa) a", "by (cases \"next_action sa execs\",auto)"], ["proof (state)\nthis:\n  next_action sa execs \\<rightharpoonup> AS_precondition sa (current sa)\n\ngoal (2 subgoals):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "from this next_state_precondition"], ["proof (chain)\npicking this:\n  next_action sa execs \\<rightharpoonup> AS_precondition sa (current sa)\n  \\<forall>s d a execs.\n     AS_precondition s d a \\<longrightarrow>\n     AS_precondition (next_state s execs) d a", "have \"next_action sa execs \\<rightharpoonup> AS_precondition (next_state sa execs) (current sa)\""], ["proof (prove)\nusing this:\n  next_action sa execs \\<rightharpoonup> AS_precondition sa (current sa)\n  \\<forall>s d a execs.\n     AS_precondition s d a \\<longrightarrow>\n     AS_precondition (next_state s execs) d a\n\ngoal (1 subgoal):\n 1. next_action sa execs \\<rightharpoonup>\n    AS_precondition (next_state sa execs) (current sa)", "unfolding precondition_ind_def B_def"], ["proof (prove)\nusing this:\n  case next_action sa execs of None \\<Rightarrow> True\n  | Some a \\<Rightarrow> AS_precondition sa (current sa) a\n  \\<forall>s d a execs.\n     AS_precondition s d a \\<longrightarrow>\n     AS_precondition (next_state s execs) d a\n\ngoal (1 subgoal):\n 1. case next_action sa execs of None \\<Rightarrow> True\n    | Some a \\<Rightarrow>\n        AS_precondition (next_state sa execs) (current sa) a", "by (cases \"next_action sa execs\",auto)"], ["proof (state)\nthis:\n  next_action sa execs \\<rightharpoonup>\n  AS_precondition (next_state sa execs) (current sa)\n\ngoal (2 subgoals):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "from inv_sa this s_sa next_state_invariant current_next_state"], ["proof (chain)\npicking this:\n  precondition_ind sa execs\n  next_action sa execs \\<rightharpoonup>\n  AS_precondition (next_state sa execs) (current sa)\n  s = sa\n  \\<forall>s execs.\n     invariant s \\<longrightarrow> invariant (next_state s execs)\n  \\<forall>s execs. current (next_state s execs) = current s", "have prec_s: \"precondition (next_state s execs) (next_action s execs)\""], ["proof (prove)\nusing this:\n  precondition_ind sa execs\n  next_action sa execs \\<rightharpoonup>\n  AS_precondition (next_state sa execs) (current sa)\n  s = sa\n  \\<forall>s execs.\n     invariant s \\<longrightarrow> invariant (next_state s execs)\n  \\<forall>s execs. current (next_state s execs) = current s\n\ngoal (1 subgoal):\n 1. precondition (next_state s execs) (next_action s execs)", "unfolding precondition_ind_def kprecondition_def precondition_def B_def"], ["proof (prove)\nusing this:\n  invariant sa \\<and>\n  (\\<forall>d.\n      case fst (control sa d (execs d)) of None \\<Rightarrow> True\n      | Some a \\<Rightarrow> AS_precondition sa d a)\n  case next_action sa execs of None \\<Rightarrow> True\n  | Some a \\<Rightarrow>\n      AS_precondition (next_state sa execs) (current sa) a\n  s = sa\n  \\<forall>s execs.\n     invariant s \\<longrightarrow> invariant (next_state s execs)\n  \\<forall>s execs. current (next_state s execs) = current s\n\ngoal (1 subgoal):\n 1. case next_action s execs of None \\<Rightarrow> True\n    | Some a \\<Rightarrow>\n        invariant (next_state s execs) \\<and>\n        AS_precondition (next_state s execs) (current (next_state s execs))\n         a", "by (cases \"next_action sa execs\",auto)"], ["proof (state)\nthis:\n  precondition (next_state s execs) (next_action s execs)\n\ngoal (2 subgoals):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "from this not_prec"], ["proof (chain)\npicking this:\n  precondition (next_state s execs) (next_action s execs)\n  \\<not> precondition (next_state s execs) (next_action s execs)", "have False"], ["proof (prove)\nusing this:\n  precondition (next_state s execs) (next_action s execs)\n  \\<not> precondition (next_state s execs) (next_action s execs)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>strict_equal (Some s) sa; realistic_executions_ind execs;\n   precondition_ind sa execs\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        \\<not> precondition (next_state s execs)\n                (next_action s execs)\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)\n 2. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>strict_equal (Some s) sa; realistic_executions_ind execs;\n   precondition_ind sa execs\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. strict_equal (Some s) sa \\<and>\n    realistic_executions_ind execs \\<and>\n    precondition_ind sa execs \\<longrightarrow>\n    strict_equal (run (Suc n) (Some s) execs) (run_total (Suc n) sa execs)", "by auto"], ["proof (state)\nthis:\n  strict_equal (Some s) sa \\<and>\n  realistic_executions_ind execs \\<and>\n  precondition_ind sa execs \\<longrightarrow>\n  strict_equal (run (Suc n) (Some s) execs) (run_total (Suc n) sa execs)\n\ngoal (1 subgoal):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "case (6 n execs s sa)"], ["proof (state)\nthis:\n  \\<not> interrupt (Suc n)\n  \\<not> thread_empty (execs (current s))\n  precondition (next_state s execs) (next_action s execs)\n  strict_equal (Some (step (next_state s execs) (next_action s execs)))\n   ?s \\<and>\n  realistic_executions_ind (next_execs s execs) \\<and>\n  precondition_ind ?s (next_execs s execs) \\<longrightarrow>\n  strict_equal\n   (run n (Some (step (next_state s execs) (next_action s execs)))\n     (next_execs s execs))\n   (run_total n ?s (next_execs s execs))\n\ngoal (1 subgoal):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "assume not_interrupt: \"\\<not>interrupt (Suc n)\""], ["proof (state)\nthis:\n  \\<not> interrupt (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "assume thread_not_empty: \"\\<not>thread_empty(execs (current s))\""], ["proof (state)\nthis:\n  \\<not> thread_empty (execs (current s))\n\ngoal (1 subgoal):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "assume prec: \"precondition (next_state s execs) (next_action s execs)\""], ["proof (state)\nthis:\n  precondition (next_state s execs) (next_action s execs)\n\ngoal (1 subgoal):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "assume IH: \"(\\<And>sa. strict_equal (Some (step (next_state s execs) (next_action s execs))) sa \\<and>\n             realistic_executions_ind (next_execs s execs) \\<and> precondition_ind sa (next_execs s execs) \\<longrightarrow>\n             strict_equal (run n (Some (step (next_state s execs) (next_action s execs))) (next_execs s execs)) (run_total n sa (next_execs s execs)))\""], ["proof (state)\nthis:\n  strict_equal (Some (step (next_state s execs) (next_action s execs)))\n   ?sa \\<and>\n  realistic_executions_ind (next_execs s execs) \\<and>\n  precondition_ind ?sa (next_execs s execs) \\<longrightarrow>\n  strict_equal\n   (run n (Some (step (next_state s execs) (next_action s execs)))\n     (next_execs s execs))\n   (run_total n ?sa (next_execs s execs))\n\ngoal (1 subgoal):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "have current_s_sa: \"strict_equal (Some s) sa \\<longrightarrow> current s = current sa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_equal (Some s) sa \\<longrightarrow> current s = current sa", "unfolding strict_equal_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case Some s of None \\<Rightarrow> False\n     | Some a' \\<Rightarrow> a' = sa) \\<longrightarrow>\n    current s = current sa", "by auto"], ["proof (state)\nthis:\n  strict_equal (Some s) sa \\<longrightarrow> current s = current sa\n\ngoal (1 subgoal):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "{"], ["proof (state)\nthis:\n  strict_equal (Some s) sa \\<longrightarrow> current s = current sa\n\ngoal (1 subgoal):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "assume equal_s_sa: \"strict_equal (Some s) sa\""], ["proof (state)\nthis:\n  strict_equal (Some s) sa\n\ngoal (1 subgoal):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "assume realistic: \"realistic_executions_ind execs\""], ["proof (state)\nthis:\n  realistic_executions_ind execs\n\ngoal (1 subgoal):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "assume inv_sa: \"precondition_ind sa execs\""], ["proof (state)\nthis:\n  precondition_ind sa execs\n\ngoal (1 subgoal):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "from equal_s_sa"], ["proof (chain)\npicking this:\n  strict_equal (Some s) sa", "have s_sa: \"s = sa\""], ["proof (prove)\nusing this:\n  strict_equal (Some s) sa\n\ngoal (1 subgoal):\n 1. s = sa", "unfolding strict_equal_def"], ["proof (prove)\nusing this:\n  case Some s of None \\<Rightarrow> False | Some a' \\<Rightarrow> a' = sa\n\ngoal (1 subgoal):\n 1. s = sa", "by auto"], ["proof (state)\nthis:\n  s = sa\n\ngoal (1 subgoal):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "let ?a = \"next_action s execs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "let ?ns = \"step (next_state s execs) ?a\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "let ?na = \"next_execs s execs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "let ?c = \"control s (current s) (execs (current s))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "have equal_ns_nsa: \"strict_equal (Some ?ns) ?ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_equal (Some (step (next_state s execs) (next_action s execs)))\n     (step (next_state s execs) (next_action s execs))", "unfolding strict_equal_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. case Some (step (next_state s execs) (next_action s execs)) of\n    None \\<Rightarrow> False\n    | Some a' \\<Rightarrow>\n        a' = step (next_state s execs) (next_action s execs)", "by auto"], ["proof (state)\nthis:\n  strict_equal (Some (step (next_state s execs) (next_action s execs)))\n   (step (next_state s execs) (next_action s execs))\n\ngoal (1 subgoal):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "from inv_sa equal_s_sa"], ["proof (chain)\npicking this:\n  precondition_ind sa execs\n  strict_equal (Some s) sa", "have inv_s: \"invariant s\""], ["proof (prove)\nusing this:\n  precondition_ind sa execs\n  strict_equal (Some s) sa\n\ngoal (1 subgoal):\n 1. invariant s", "unfolding strict_equal_def precondition_ind_def"], ["proof (prove)\nusing this:\n  invariant sa \\<and>\n  (\\<forall>d.\n      fst (control sa d (execs d)) \\<rightharpoonup> AS_precondition sa d)\n  case Some s of None \\<Rightarrow> False | Some a' \\<Rightarrow> a' = sa\n\ngoal (1 subgoal):\n 1. invariant s", "by auto\n\n      \\<comment> \\<open>Two things are proven inductive. First, the assumptions that the execution is realistic (statement realistic-na). This proof uses lemma next-execution-is-realistic-partial.\n          Secondly, the precondition: if the precondition holds for the current action, then it holds for the next action (statement invariant-na).\\<close>"], ["proof (state)\nthis:\n  invariant s\n\ngoal (1 subgoal):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "have realistic_na: \"realistic_executions_ind ?na\""], ["proof (prove)\ngoal (1 subgoal):\n 1. realistic_executions_ind (next_execs s execs)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. realistic_executions_ind (next_execs s execs)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. realistic_executions_ind (next_execs s execs)", "fix d"], ["proof (state)\ngoal (1 subgoal):\n 1. realistic_executions_ind (next_execs s execs)", "have \"case ?na d of [] \\<Rightarrow> True | aseq # aseqs \\<Rightarrow> realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. case next_execs s execs d of [] \\<Rightarrow> True\n    | aseq # aseqs \\<Rightarrow>\n        realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "proof(cases \"?na d\",simp,rename_tac aseq aseqs,simp,cases \"d = current s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>aseq aseqs.\n       \\<lbrakk>next_execs s execs d = aseq # aseqs; d = current s\\<rbrakk>\n       \\<Longrightarrow> realistic_AS_partial aseq \\<and>\n                         set aseqs \\<subseteq> AS_set\n 2. \\<And>aseq aseqs.\n       \\<lbrakk>next_execs s execs d = aseq # aseqs;\n        d \\<noteq> current s\\<rbrakk>\n       \\<Longrightarrow> realistic_AS_partial aseq \\<and>\n                         set aseqs \\<subseteq> AS_set", "case False"], ["proof (state)\nthis:\n  d \\<noteq> current s\n\ngoal (2 subgoals):\n 1. \\<And>aseq aseqs.\n       \\<lbrakk>next_execs s execs d = aseq # aseqs; d = current s\\<rbrakk>\n       \\<Longrightarrow> realistic_AS_partial aseq \\<and>\n                         set aseqs \\<subseteq> AS_set\n 2. \\<And>aseq aseqs.\n       \\<lbrakk>next_execs s execs d = aseq # aseqs;\n        d \\<noteq> current s\\<rbrakk>\n       \\<Longrightarrow> realistic_AS_partial aseq \\<and>\n                         set aseqs \\<subseteq> AS_set", "fix aseq aseqs"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>aseq aseqs.\n       \\<lbrakk>next_execs s execs d = aseq # aseqs; d = current s\\<rbrakk>\n       \\<Longrightarrow> realistic_AS_partial aseq \\<and>\n                         set aseqs \\<subseteq> AS_set\n 2. \\<And>aseq aseqs.\n       \\<lbrakk>next_execs s execs d = aseq # aseqs;\n        d \\<noteq> current s\\<rbrakk>\n       \\<Longrightarrow> realistic_AS_partial aseq \\<and>\n                         set aseqs \\<subseteq> AS_set", "assume \"next_execs s execs d = aseq # aseqs\""], ["proof (state)\nthis:\n  next_execs s execs d = aseq # aseqs\n\ngoal (2 subgoals):\n 1. \\<And>aseq aseqs.\n       \\<lbrakk>next_execs s execs d = aseq # aseqs; d = current s\\<rbrakk>\n       \\<Longrightarrow> realistic_AS_partial aseq \\<and>\n                         set aseqs \\<subseteq> AS_set\n 2. \\<And>aseq aseqs.\n       \\<lbrakk>next_execs s execs d = aseq # aseqs;\n        d \\<noteq> current s\\<rbrakk>\n       \\<Longrightarrow> realistic_AS_partial aseq \\<and>\n                         set aseqs \\<subseteq> AS_set", "from False this realistic[unfolded realistic_executions_ind_def,THEN spec,where x=d]"], ["proof (chain)\npicking this:\n  d \\<noteq> current s\n  next_execs s execs d = aseq # aseqs\n  case execs d of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "show \"realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\""], ["proof (prove)\nusing this:\n  d \\<noteq> current s\n  next_execs s execs d = aseq # aseqs\n  case execs d of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "unfolding next_execs_def"], ["proof (prove)\nusing this:\n  d \\<noteq> current s\n  (execs\n   (current s := fst (snd (control s (current s) (execs (current s))))))\n   d =\n  aseq # aseqs\n  case execs d of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "by simp"], ["proof (state)\nthis:\n  realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. \\<And>aseq aseqs.\n       \\<lbrakk>next_execs s execs d = aseq # aseqs; d = current s\\<rbrakk>\n       \\<Longrightarrow> realistic_AS_partial aseq \\<and>\n                         set aseqs \\<subseteq> AS_set", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aseq aseqs.\n       \\<lbrakk>next_execs s execs d = aseq # aseqs; d = current s\\<rbrakk>\n       \\<Longrightarrow> realistic_AS_partial aseq \\<and>\n                         set aseqs \\<subseteq> AS_set", "case True"], ["proof (state)\nthis:\n  d = current s\n\ngoal (1 subgoal):\n 1. \\<And>aseq aseqs.\n       \\<lbrakk>next_execs s execs d = aseq # aseqs; d = current s\\<rbrakk>\n       \\<Longrightarrow> realistic_AS_partial aseq \\<and>\n                         set aseqs \\<subseteq> AS_set", "fix aseq aseqs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aseq aseqs.\n       \\<lbrakk>next_execs s execs d = aseq # aseqs; d = current s\\<rbrakk>\n       \\<Longrightarrow> realistic_AS_partial aseq \\<and>\n                         set aseqs \\<subseteq> AS_set", "assume na_def: \"next_execs s execs d = aseq # aseqs\""], ["proof (state)\nthis:\n  next_execs s execs d = aseq # aseqs\n\ngoal (1 subgoal):\n 1. \\<And>aseq aseqs.\n       \\<lbrakk>next_execs s execs d = aseq # aseqs; d = current s\\<rbrakk>\n       \\<Longrightarrow> realistic_AS_partial aseq \\<and>\n                         set aseqs \\<subseteq> AS_set", "from next_execution_is_realistic_partial na_def True realistic thread_not_empty"], ["proof (chain)\npicking this:\n  \\<lbrakk>next_execs ?s ?execs ?d = ?aseq # ?aseqs; ?d = current ?s;\n   realistic_executions_ind ?execs;\n   \\<not> thread_empty (?execs (current ?s))\\<rbrakk>\n  \\<Longrightarrow> realistic_AS_partial ?aseq \\<and>\n                    set ?aseqs \\<subseteq> AS_set\n  next_execs s execs d = aseq # aseqs\n  d = current s\n  realistic_executions_ind execs\n  \\<not> thread_empty (execs (current s))", "show \"realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\""], ["proof (prove)\nusing this:\n  \\<lbrakk>next_execs ?s ?execs ?d = ?aseq # ?aseqs; ?d = current ?s;\n   realistic_executions_ind ?execs;\n   \\<not> thread_empty (?execs (current ?s))\\<rbrakk>\n  \\<Longrightarrow> realistic_AS_partial ?aseq \\<and>\n                    set ?aseqs \\<subseteq> AS_set\n  next_execs s execs d = aseq # aseqs\n  d = current s\n  realistic_executions_ind execs\n  \\<not> thread_empty (execs (current s))\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "by blast"], ["proof (state)\nthis:\n  realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  case next_execs s execs d of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. realistic_executions_ind (next_execs s execs)", "}"], ["proof (state)\nthis:\n  case next_execs s execs ?d2 of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. realistic_executions_ind (next_execs s execs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  case next_execs s execs ?d2 of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. realistic_executions_ind (next_execs s execs)", "unfolding realistic_executions_ind_def"], ["proof (prove)\nusing this:\n  case next_execs s execs ?d2 of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. \\<forall>d.\n       case next_execs s execs d of [] \\<Rightarrow> True\n       | aseq # aseqs \\<Rightarrow>\n           realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "by auto"], ["proof (state)\nthis:\n  realistic_executions_ind (next_execs s execs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  realistic_executions_ind (next_execs s execs)\n\ngoal (1 subgoal):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "have invariant_na: \"precondition_ind ?ns ?na\""], ["proof (prove)\ngoal (1 subgoal):\n 1. precondition_ind (step (next_state s execs) (next_action s execs))\n     (next_execs s execs)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. precondition_ind (step (next_state s execs) (next_action s execs))\n     (next_execs s execs)", "from spec_of_invariant inv_sa next_state_invariant s_sa"], ["proof (chain)\npicking this:\n  \\<forall>s a. invariant s \\<longrightarrow> invariant (kstep s a)\n  precondition_ind sa execs\n  \\<forall>s execs.\n     invariant s \\<longrightarrow> invariant (next_state s execs)\n  s = sa", "have inv_ns: \"invariant ?ns\""], ["proof (prove)\nusing this:\n  \\<forall>s a. invariant s \\<longrightarrow> invariant (kstep s a)\n  precondition_ind sa execs\n  \\<forall>s execs.\n     invariant s \\<longrightarrow> invariant (next_state s execs)\n  s = sa\n\ngoal (1 subgoal):\n 1. invariant (step (next_state s execs) (next_action s execs))", "unfolding precondition_ind_def step_def"], ["proof (prove)\nusing this:\n  \\<forall>s a. invariant s \\<longrightarrow> invariant (kstep s a)\n  invariant sa \\<and>\n  (\\<forall>d.\n      fst (control sa d (execs d)) \\<rightharpoonup> AS_precondition sa d)\n  \\<forall>s execs.\n     invariant s \\<longrightarrow> invariant (next_state s execs)\n  s = sa\n\ngoal (1 subgoal):\n 1. invariant\n     (case next_action s execs of None \\<Rightarrow> next_state s execs\n      | Some a \\<Rightarrow> kstep (next_state s execs) a)", "by (cases \"next_action sa execs\",auto)"], ["proof (state)\nthis:\n  invariant (step (next_state s execs) (next_action s execs))\n\ngoal (1 subgoal):\n 1. precondition_ind (step (next_state s execs) (next_action s execs))\n     (next_execs s execs)", "have \"\\<forall>d. fst (control ?ns d (?na d)) \\<rightharpoonup> AS_precondition ?ns d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>d.\n       fst (control (step (next_state s execs) (next_action s execs)) d\n             (next_execs s execs d)) \\<rightharpoonup>\n       AS_precondition (step (next_state s execs) (next_action s execs)) d", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>d.\n       fst (control (step (next_state s execs) (next_action s execs)) d\n             (next_execs s execs d)) \\<rightharpoonup>\n       AS_precondition (step (next_state s execs) (next_action s execs)) d", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>d.\n       fst (control (step (next_state s execs) (next_action s execs)) d\n             (next_execs s execs d)) \\<rightharpoonup>\n       AS_precondition (step (next_state s execs) (next_action s execs)) d", "fix d"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>d.\n       fst (control (step (next_state s execs) (next_action s execs)) d\n             (next_execs s execs d)) \\<rightharpoonup>\n       AS_precondition (step (next_state s execs) (next_action s execs)) d", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>d.\n       fst (control (step (next_state s execs) (next_action s execs)) d\n             (next_execs s execs d)) \\<rightharpoonup>\n       AS_precondition (step (next_state s execs) (next_action s execs)) d", "let ?a' = \"fst (control ?ns d (?na d))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>d.\n       fst (control (step (next_state s execs) (next_action s execs)) d\n             (next_execs s execs d)) \\<rightharpoonup>\n       AS_precondition (step (next_state s execs) (next_action s execs)) d", "assume snd_action_not_none: \"?a' \\<noteq> None\""], ["proof (state)\nthis:\n  fst (control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d)) \\<noteq>\n  None\n\ngoal (1 subgoal):\n 1. \\<forall>d.\n       fst (control (step (next_state s execs) (next_action s execs)) d\n             (next_execs s execs d)) \\<rightharpoonup>\n       AS_precondition (step (next_state s execs) (next_action s execs)) d", "have \"AS_precondition ?ns d (the ?a')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "proof (cases \"d = current s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. d = current s \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))\n 2. d \\<noteq> current s \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "case True"], ["proof (state)\nthis:\n  d = current s\n\ngoal (2 subgoals):\n 1. d = current s \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))\n 2. d \\<noteq> current s \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "{"], ["proof (state)\nthis:\n  d = current s\n\ngoal (2 subgoals):\n 1. d = current s \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))\n 2. d \\<noteq> current s \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "have ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "proof (cases \"?a\")"], ["proof (state)\ngoal (2 subgoals):\n 1. next_action s execs = None \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))\n 2. \\<And>a.\n       next_action s execs = Some a \\<Longrightarrow>\n       AS_precondition (step (next_state s execs) (next_action s execs)) d\n        (the (fst (control (step (next_state s execs) (next_action s execs))\n                    d (next_execs s execs d))))", "case (Some a)\n                \\<comment> \\<open>Assuming that the current domain executes some action a, and assuming that the action a' after that is not None (statement snd-action-not-none),\n                    we prove that the precondition is inductive, i.e., it will hold for a'.\n                    Two cases arise: either action a is delayed (case waiting) or not (case executing).\\<close>"], ["proof (state)\nthis:\n  next_action s execs = Some a\n\ngoal (2 subgoals):\n 1. next_action s execs = None \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))\n 2. \\<And>a.\n       next_action s execs = Some a \\<Longrightarrow>\n       AS_precondition (step (next_state s execs) (next_action s execs)) d\n        (the (fst (control (step (next_state s execs) (next_action s execs))\n                    d (next_execs s execs d))))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "proof(cases \"?na d = execs (current s)\" rule :case_split[case_names waiting executing])"], ["proof (state)\ngoal (2 subgoals):\n 1. next_execs s execs d = execs (current s) \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))\n 2. next_execs s execs d \\<noteq> execs (current s) \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "case executing \\<comment> \\<open>The kernel is executing two consecutive actions a and a'. We show that [a,a'] is a subsequence in some action in AS-set.\n                                   The PO's ensure that the precondition is inductive.\\<close>"], ["proof (state)\nthis:\n  next_execs s execs d \\<noteq> execs (current s)\n\ngoal (2 subgoals):\n 1. next_execs s execs d = execs (current s) \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))\n 2. next_execs s execs d \\<noteq> execs (current s) \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "from executing True Some control_spec[THEN spec,THEN spec,THEN spec,where x2=s and x1=d and x=\"execs d\"]"], ["proof (chain)\npicking this:\n  next_execs s execs d \\<noteq> execs (current s)\n  d = current s\n  next_action s execs = Some a\n  case control s d (execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (execs d) \\<and> (a, aseqs') = (None, []) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (execs d))), tl (hd (execs d)) # tl (execs d)) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') = (Some (hd (hd (execs d))), execs d, s) \\<or>\n    (a, aseqs') = (None, tl (execs d))", "have a_def: \"a = hd (hd (execs (current s))) \\<and> ?na d = (tl (hd (execs (current s))))#(tl (execs (current s)))\""], ["proof (prove)\nusing this:\n  next_execs s execs d \\<noteq> execs (current s)\n  d = current s\n  next_action s execs = Some a\n  case control s d (execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (execs d) \\<and> (a, aseqs') = (None, []) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (execs d))), tl (hd (execs d)) # tl (execs d)) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') = (Some (hd (hd (execs d))), execs d, s) \\<or>\n    (a, aseqs') = (None, tl (execs d))\n\ngoal (1 subgoal):\n 1. a = hd (hd (execs (current s))) \\<and>\n    next_execs s execs d =\n    tl (hd (execs (current s))) # tl (execs (current s))", "unfolding next_action_def next_execs_def Let_def"], ["proof (prove)\nusing this:\n  (execs\n   (current s := fst (snd (control s (current s) (execs (current s))))))\n   d \\<noteq>\n  execs (current s)\n  d = current s\n  fst (control s (current s) (execs (current s))) = Some a\n  case control s d (execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (execs d) \\<and> (a, aseqs') = (None, []) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (execs d))), tl (hd (execs d)) # tl (execs d)) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') = (Some (hd (hd (execs d))), execs d, s) \\<or>\n    (a, aseqs') = (None, tl (execs d))\n\ngoal (1 subgoal):\n 1. a = hd (hd (execs (current s))) \\<and>\n    (execs\n     (current s := fst (snd (control s (current s) (execs (current s))))))\n     d =\n    tl (hd (execs (current s))) # tl (execs (current s))", "by(auto)"], ["proof (state)\nthis:\n  a = hd (hd (execs (current s))) \\<and>\n  next_execs s execs d =\n  tl (hd (execs (current s))) # tl (execs (current s))\n\ngoal (2 subgoals):\n 1. next_execs s execs d = execs (current s) \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))\n 2. next_execs s execs d \\<noteq> execs (current s) \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "from a_def True snd_action_not_none control_spec[THEN spec,THEN spec,THEN spec,where x2=\"?ns\" and x1=d and x=\"?na d\"]\n                    second_elt_is_hd_tl[where x=\" hd (execs (current s))\" and a=\"hd(tl(hd (execs (current s))))\" and x'=\"tl (tl(hd (execs (current s))))\"]"], ["proof (chain)\npicking this:\n  a = hd (hd (execs (current s))) \\<and>\n  next_execs s execs d =\n  tl (hd (execs (current s))) # tl (execs (current s))\n  d = current s\n  fst (control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d)) \\<noteq>\n  None\n  case control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (next_execs s execs d) \\<and>\n    (a, aseqs') = (None, []) \\<or>\n    next_execs s execs d \\<noteq> [] \\<and>\n    hd (next_execs s execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (next_execs s execs d))),\n     tl (hd (next_execs s execs d)) # tl (next_execs s execs d)) \\<or>\n    next_execs s execs d \\<noteq> [] \\<and>\n    hd (next_execs s execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') =\n    (Some (hd (hd (next_execs s execs d))), next_execs s execs d,\n     step (next_state s execs) (next_action s execs)) \\<or>\n    (a, aseqs') = (None, tl (next_execs s execs d))\n  tl (hd (execs (current s))) =\n  hd (tl (hd (execs (current s)))) #\n  tl (tl (hd (execs (current s)))) \\<longrightarrow>\n  hd (tl (hd (execs (current s)))) = hd (execs (current s)) ! 1", "have na_def: \"the ?a' = (hd (execs (current s)))!1\""], ["proof (prove)\nusing this:\n  a = hd (hd (execs (current s))) \\<and>\n  next_execs s execs d =\n  tl (hd (execs (current s))) # tl (execs (current s))\n  d = current s\n  fst (control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d)) \\<noteq>\n  None\n  case control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (next_execs s execs d) \\<and>\n    (a, aseqs') = (None, []) \\<or>\n    next_execs s execs d \\<noteq> [] \\<and>\n    hd (next_execs s execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (next_execs s execs d))),\n     tl (hd (next_execs s execs d)) # tl (next_execs s execs d)) \\<or>\n    next_execs s execs d \\<noteq> [] \\<and>\n    hd (next_execs s execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') =\n    (Some (hd (hd (next_execs s execs d))), next_execs s execs d,\n     step (next_state s execs) (next_action s execs)) \\<or>\n    (a, aseqs') = (None, tl (next_execs s execs d))\n  tl (hd (execs (current s))) =\n  hd (tl (hd (execs (current s)))) #\n  tl (tl (hd (execs (current s)))) \\<longrightarrow>\n  hd (tl (hd (execs (current s)))) = hd (execs (current s)) ! 1\n\ngoal (1 subgoal):\n 1. the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d))) =\n    hd (execs (current s)) ! 1", "unfolding next_execs_def"], ["proof (prove)\nusing this:\n  a = hd (hd (execs (current s))) \\<and>\n  (execs\n   (current s := fst (snd (control s (current s) (execs (current s))))))\n   d =\n  tl (hd (execs (current s))) # tl (execs (current s))\n  d = current s\n  fst (control (step (next_state s execs) (next_action s execs)) d\n        ((execs\n          (current s :=\n             fst (snd (control s (current s) (execs (current s))))))\n          d)) \\<noteq>\n  None\n  case control (step (next_state s execs) (next_action s execs)) d\n        ((execs\n          (current s :=\n             fst (snd (control s (current s) (execs (current s))))))\n          d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty\n     ((execs\n       (current s := fst (snd (control s (current s) (execs (current s))))))\n       d) \\<and>\n    (a, aseqs') = (None, []) \\<or>\n    (execs\n     (current s := fst (snd (control s (current s) (execs (current s))))))\n     d \\<noteq>\n    [] \\<and>\n    hd ((execs\n         (current s :=\n            fst (snd (control s (current s) (execs (current s))))))\n         d) \\<noteq>\n    [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some\n      (hd (hd ((execs\n                (current s :=\n                   fst (snd (control s (current s) (execs (current s))))))\n                d))),\n     tl (hd ((execs\n              (current s :=\n                 fst (snd (control s (current s) (execs (current s))))))\n              d)) #\n     tl ((execs\n          (current s :=\n             fst (snd (control s (current s) (execs (current s))))))\n          d)) \\<or>\n    (execs\n     (current s := fst (snd (control s (current s) (execs (current s))))))\n     d \\<noteq>\n    [] \\<and>\n    hd ((execs\n         (current s :=\n            fst (snd (control s (current s) (execs (current s))))))\n         d) \\<noteq>\n    [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') =\n    (Some\n      (hd (hd ((execs\n                (current s :=\n                   fst (snd (control s (current s) (execs (current s))))))\n                d))),\n     (execs\n      (current s := fst (snd (control s (current s) (execs (current s))))))\n      d,\n     step (next_state s execs) (next_action s execs)) \\<or>\n    (a, aseqs') =\n    (None,\n     tl ((execs\n          (current s :=\n             fst (snd (control s (current s) (execs (current s))))))\n          d))\n  tl (hd (execs (current s))) =\n  hd (tl (hd (execs (current s)))) #\n  tl (tl (hd (execs (current s)))) \\<longrightarrow>\n  hd (tl (hd (execs (current s)))) = hd (execs (current s)) ! 1\n\ngoal (1 subgoal):\n 1. the (fst (control (step (next_state s execs) (next_action s execs)) d\n               ((execs\n                 (current s :=\n                    fst (snd (control s (current s) (execs (current s))))))\n                 d))) =\n    hd (execs (current s)) ! 1", "by(auto)"], ["proof (state)\nthis:\n  the (fst (control (step (next_state s execs) (next_action s execs)) d\n             (next_execs s execs d))) =\n  hd (execs (current s)) ! 1\n\ngoal (2 subgoals):\n 1. next_execs s execs d = execs (current s) \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))\n 2. next_execs s execs d \\<noteq> execs (current s) \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "from Some realistic[unfolded realistic_executions_ind_def,THEN spec,where x=d] True thread_not_empty"], ["proof (chain)\npicking this:\n  next_action s execs = Some a\n  case execs d of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n  d = current s\n  \\<not> thread_empty (execs (current s))", "obtain n aseq' where witness: \"n \\<le> length aseq' \\<and> aseq' \\<in> AS_set \\<and> hd(execs d) = lastn n aseq'\""], ["proof (prove)\nusing this:\n  next_action s execs = Some a\n  case execs d of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n  d = current s\n  \\<not> thread_empty (execs (current s))\n\ngoal (1 subgoal):\n 1. (\\<And>n aseq'.\n        n \\<le> length aseq' \\<and>\n        aseq' \\<in> AS_set \\<and>\n        hd (execs d) = lastn n aseq' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding realistic_AS_partial_def"], ["proof (prove)\nusing this:\n  next_action s execs = Some a\n  case execs d of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      (\\<exists>n aseq'.\n          n \\<le> length aseq' \\<and>\n          aseq' \\<in> AS_set \\<and> aseq = lastn n aseq') \\<and>\n      set aseqs \\<subseteq> AS_set\n  d = current s\n  \\<not> thread_empty (execs (current s))\n\ngoal (1 subgoal):\n 1. (\\<And>n aseq'.\n        n \\<le> length aseq' \\<and>\n        aseq' \\<in> AS_set \\<and>\n        hd (execs d) = lastn n aseq' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \"execs d\",auto)"], ["proof (state)\nthis:\n  n \\<le> length aseq' \\<and>\n  aseq' \\<in> AS_set \\<and> hd (execs d) = lastn n aseq'\n\ngoal (2 subgoals):\n 1. next_execs s execs d = execs (current s) \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))\n 2. next_execs s execs d \\<noteq> execs (current s) \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "from True executing length_lt_2_implies_tl_empty[where x=\"hd (execs (current s))\"]\n                    Some control_spec[THEN spec,THEN spec,THEN spec,where x2=s and x1=d and x=\"execs d\"]\n                    snd_action_not_none control_spec[THEN spec,THEN spec,THEN spec,where x2=\"?ns\" and x1=d and x=\"?na d\"]"], ["proof (chain)\npicking this:\n  d = current s\n  next_execs s execs d \\<noteq> execs (current s)\n  length (hd (execs (current s))) < 2 \\<longrightarrow>\n  tl (hd (execs (current s))) = []\n  next_action s execs = Some a\n  case control s d (execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (execs d) \\<and> (a, aseqs') = (None, []) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (execs d))), tl (hd (execs d)) # tl (execs d)) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') = (Some (hd (hd (execs d))), execs d, s) \\<or>\n    (a, aseqs') = (None, tl (execs d))\n  fst (control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d)) \\<noteq>\n  None\n  case control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (next_execs s execs d) \\<and>\n    (a, aseqs') = (None, []) \\<or>\n    next_execs s execs d \\<noteq> [] \\<and>\n    hd (next_execs s execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (next_execs s execs d))),\n     tl (hd (next_execs s execs d)) # tl (next_execs s execs d)) \\<or>\n    next_execs s execs d \\<noteq> [] \\<and>\n    hd (next_execs s execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') =\n    (Some (hd (hd (next_execs s execs d))), next_execs s execs d,\n     step (next_state s execs) (next_action s execs)) \\<or>\n    (a, aseqs') = (None, tl (next_execs s execs d))", "have in_action_sequence: \"length (hd (execs (current s))) \\<ge> 2\""], ["proof (prove)\nusing this:\n  d = current s\n  next_execs s execs d \\<noteq> execs (current s)\n  length (hd (execs (current s))) < 2 \\<longrightarrow>\n  tl (hd (execs (current s))) = []\n  next_action s execs = Some a\n  case control s d (execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (execs d) \\<and> (a, aseqs') = (None, []) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (execs d))), tl (hd (execs d)) # tl (execs d)) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') = (Some (hd (hd (execs d))), execs d, s) \\<or>\n    (a, aseqs') = (None, tl (execs d))\n  fst (control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d)) \\<noteq>\n  None\n  case control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (next_execs s execs d) \\<and>\n    (a, aseqs') = (None, []) \\<or>\n    next_execs s execs d \\<noteq> [] \\<and>\n    hd (next_execs s execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (next_execs s execs d))),\n     tl (hd (next_execs s execs d)) # tl (next_execs s execs d)) \\<or>\n    next_execs s execs d \\<noteq> [] \\<and>\n    hd (next_execs s execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') =\n    (Some (hd (hd (next_execs s execs d))), next_execs s execs d,\n     step (next_state s execs) (next_action s execs)) \\<or>\n    (a, aseqs') = (None, tl (next_execs s execs d))\n\ngoal (1 subgoal):\n 1. 2 \\<le> length (hd (execs (current s)))", "unfolding next_action_def next_execs_def"], ["proof (prove)\nusing this:\n  d = current s\n  (execs\n   (current s := fst (snd (control s (current s) (execs (current s))))))\n   d \\<noteq>\n  execs (current s)\n  length (hd (execs (current s))) < 2 \\<longrightarrow>\n  tl (hd (execs (current s))) = []\n  fst (control s (current s) (execs (current s))) = Some a\n  case control s d (execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (execs d) \\<and> (a, aseqs') = (None, []) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (execs d))), tl (hd (execs d)) # tl (execs d)) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') = (Some (hd (hd (execs d))), execs d, s) \\<or>\n    (a, aseqs') = (None, tl (execs d))\n  fst (control\n        (step (next_state s execs)\n          (fst (control s (current s) (execs (current s)))))\n        d ((execs\n            (current s :=\n               fst (snd (control s (current s) (execs (current s))))))\n            d)) \\<noteq>\n  None\n  case control\n        (step (next_state s execs)\n          (fst (control s (current s) (execs (current s)))))\n        d ((execs\n            (current s :=\n               fst (snd (control s (current s) (execs (current s))))))\n            d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty\n     ((execs\n       (current s := fst (snd (control s (current s) (execs (current s))))))\n       d) \\<and>\n    (a, aseqs') = (None, []) \\<or>\n    (execs\n     (current s := fst (snd (control s (current s) (execs (current s))))))\n     d \\<noteq>\n    [] \\<and>\n    hd ((execs\n         (current s :=\n            fst (snd (control s (current s) (execs (current s))))))\n         d) \\<noteq>\n    [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some\n      (hd (hd ((execs\n                (current s :=\n                   fst (snd (control s (current s) (execs (current s))))))\n                d))),\n     tl (hd ((execs\n              (current s :=\n                 fst (snd (control s (current s) (execs (current s))))))\n              d)) #\n     tl ((execs\n          (current s :=\n             fst (snd (control s (current s) (execs (current s))))))\n          d)) \\<or>\n    (execs\n     (current s := fst (snd (control s (current s) (execs (current s))))))\n     d \\<noteq>\n    [] \\<and>\n    hd ((execs\n         (current s :=\n            fst (snd (control s (current s) (execs (current s))))))\n         d) \\<noteq>\n    [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') =\n    (Some\n      (hd (hd ((execs\n                (current s :=\n                   fst (snd (control s (current s) (execs (current s))))))\n                d))),\n     (execs\n      (current s := fst (snd (control s (current s) (execs (current s))))))\n      d,\n     step (next_state s execs)\n      (fst (control s (current s) (execs (current s))))) \\<or>\n    (a, aseqs') =\n    (None,\n     tl ((execs\n          (current s :=\n             fst (snd (control s (current s) (execs (current s))))))\n          d))\n\ngoal (1 subgoal):\n 1. 2 \\<le> length (hd (execs (current s)))", "by auto"], ["proof (state)\nthis:\n  2 \\<le> length (hd (execs (current s)))\n\ngoal (2 subgoals):\n 1. next_execs s execs d = execs (current s) \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))\n 2. next_execs s execs d \\<noteq> execs (current s) \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "from this witness consecutive_is_sub_seq[where a=a and b=\"the ?a'\" and n=n and y=aseq' and x=\"tl (tl (hd (execs (current s))))\"] \n                    a_def na_def True in_action_sequence\n                    x_is_hd_snd_tl[where x=\"hd (execs (current s))\"]"], ["proof (chain)\npicking this:\n  2 \\<le> length (hd (execs (current s)))\n  n \\<le> length aseq' \\<and>\n  aseq' \\<in> AS_set \\<and> hd (execs d) = lastn n aseq'\n  a #\n  the (fst (control (step (next_state s execs) (next_action s execs)) d\n             (next_execs s execs d))) #\n  tl (tl (hd (execs (current s)))) =\n  lastn n aseq' \\<Longrightarrow>\n  is_sub_seq a\n   (the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d))))\n   aseq'\n  a = hd (hd (execs (current s))) \\<and>\n  next_execs s execs d =\n  tl (hd (execs (current s))) # tl (execs (current s))\n  the (fst (control (step (next_state s execs) (next_action s execs)) d\n             (next_execs s execs d))) =\n  hd (execs (current s)) ! 1\n  d = current s\n  2 \\<le> length (hd (execs (current s)))\n  2 \\<le> length (hd (execs (current s))) \\<longrightarrow>\n  hd (execs (current s)) =\n  hd (hd (execs (current s))) #\n  hd (execs (current s)) ! 1 # tl (tl (hd (execs (current s))))", "have 1: \"\\<exists> aseq' \\<in> AS_set . is_sub_seq a (the ?a') aseq'\""], ["proof (prove)\nusing this:\n  2 \\<le> length (hd (execs (current s)))\n  n \\<le> length aseq' \\<and>\n  aseq' \\<in> AS_set \\<and> hd (execs d) = lastn n aseq'\n  a #\n  the (fst (control (step (next_state s execs) (next_action s execs)) d\n             (next_execs s execs d))) #\n  tl (tl (hd (execs (current s)))) =\n  lastn n aseq' \\<Longrightarrow>\n  is_sub_seq a\n   (the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d))))\n   aseq'\n  a = hd (hd (execs (current s))) \\<and>\n  next_execs s execs d =\n  tl (hd (execs (current s))) # tl (execs (current s))\n  the (fst (control (step (next_state s execs) (next_action s execs)) d\n             (next_execs s execs d))) =\n  hd (execs (current s)) ! 1\n  d = current s\n  2 \\<le> length (hd (execs (current s)))\n  2 \\<le> length (hd (execs (current s))) \\<longrightarrow>\n  hd (execs (current s)) =\n  hd (hd (execs (current s))) #\n  hd (execs (current s)) ! 1 # tl (tl (hd (execs (current s))))\n\ngoal (1 subgoal):\n 1. \\<exists>aseq'\\<in>AS_set.\n       is_sub_seq a\n        (the (fst (control (step (next_state s execs) (next_action s execs))\n                    d (next_execs s execs d))))\n        aseq'", "by(auto)"], ["proof (state)\nthis:\n  \\<exists>aseq'\\<in>AS_set.\n     is_sub_seq a\n      (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                  (next_execs s execs d))))\n      aseq'\n\ngoal (2 subgoals):\n 1. next_execs s execs d = execs (current s) \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))\n 2. next_execs s execs d \\<noteq> execs (current s) \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "from True Some inv_sa[unfolded precondition_ind_def,THEN conjunct2,THEN spec,where x=\"current s\"] s_sa"], ["proof (chain)\npicking this:\n  d = current s\n  next_action s execs = Some a\n  fst (control sa (current s) (execs (current s))) \\<rightharpoonup>\n  AS_precondition sa (current s)\n  s = sa", "have 2: \"AS_precondition s (current s) a\""], ["proof (prove)\nusing this:\n  d = current s\n  next_action s execs = Some a\n  fst (control sa (current s) (execs (current s))) \\<rightharpoonup>\n  AS_precondition sa (current s)\n  s = sa\n\ngoal (1 subgoal):\n 1. AS_precondition s (current s) a", "unfolding strict_equal_def next_action_def B_def"], ["proof (prove)\nusing this:\n  d = current s\n  fst (control s (current s) (execs (current s))) = Some a\n  case fst (control sa (current s) (execs (current s))) of\n  None \\<Rightarrow> True\n  | Some a \\<Rightarrow> AS_precondition sa (current s) a\n  s = sa\n\ngoal (1 subgoal):\n 1. AS_precondition s (current s) a", "by auto"], ["proof (state)\nthis:\n  AS_precondition s (current s) a\n\ngoal (2 subgoals):\n 1. next_execs s execs d = execs (current s) \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))\n 2. next_execs s execs d \\<noteq> execs (current s) \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "from executing True Some control_spec[THEN spec,THEN spec,THEN spec,where x2=s and x1=d and x=\"execs d\"]"], ["proof (chain)\npicking this:\n  next_execs s execs d \\<noteq> execs (current s)\n  d = current s\n  next_action s execs = Some a\n  case control s d (execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (execs d) \\<and> (a, aseqs') = (None, []) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (execs d))), tl (hd (execs d)) # tl (execs d)) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') = (Some (hd (hd (execs d))), execs d, s) \\<or>\n    (a, aseqs') = (None, tl (execs d))", "have not_aborting: \"\\<not>aborting (next_state s execs) (current s) (the ?a)\""], ["proof (prove)\nusing this:\n  next_execs s execs d \\<noteq> execs (current s)\n  d = current s\n  next_action s execs = Some a\n  case control s d (execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (execs d) \\<and> (a, aseqs') = (None, []) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (execs d))), tl (hd (execs d)) # tl (execs d)) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') = (Some (hd (hd (execs d))), execs d, s) \\<or>\n    (a, aseqs') = (None, tl (execs d))\n\ngoal (1 subgoal):\n 1. \\<not> aborting (next_state s execs) (current s)\n            (the (next_action s execs))", "unfolding next_action_def next_state_def next_execs_def"], ["proof (prove)\nusing this:\n  (execs\n   (current s := fst (snd (control s (current s) (execs (current s))))))\n   d \\<noteq>\n  execs (current s)\n  d = current s\n  fst (control s (current s) (execs (current s))) = Some a\n  case control s d (execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (execs d) \\<and> (a, aseqs') = (None, []) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (execs d))), tl (hd (execs d)) # tl (execs d)) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') = (Some (hd (hd (execs d))), execs d, s) \\<or>\n    (a, aseqs') = (None, tl (execs d))\n\ngoal (1 subgoal):\n 1. \\<not> aborting (snd (snd (control s (current s) (execs (current s)))))\n            (current s)\n            (the (fst (control s (current s) (execs (current s)))))", "by auto"], ["proof (state)\nthis:\n  \\<not> aborting (next_state s execs) (current s)\n          (the (next_action s execs))\n\ngoal (2 subgoals):\n 1. next_execs s execs d = execs (current s) \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))\n 2. next_execs s execs d \\<noteq> execs (current s) \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "from executing True Some control_spec[THEN spec,THEN spec,THEN spec,where x2=s and x1=d and x=\"execs d\"]"], ["proof (chain)\npicking this:\n  next_execs s execs d \\<noteq> execs (current s)\n  d = current s\n  next_action s execs = Some a\n  case control s d (execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (execs d) \\<and> (a, aseqs') = (None, []) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (execs d))), tl (hd (execs d)) # tl (execs d)) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') = (Some (hd (hd (execs d))), execs d, s) \\<or>\n    (a, aseqs') = (None, tl (execs d))", "have not_waiting: \"\\<not>waiting (next_state s execs) (current s) (the ?a)\""], ["proof (prove)\nusing this:\n  next_execs s execs d \\<noteq> execs (current s)\n  d = current s\n  next_action s execs = Some a\n  case control s d (execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (execs d) \\<and> (a, aseqs') = (None, []) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (execs d))), tl (hd (execs d)) # tl (execs d)) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') = (Some (hd (hd (execs d))), execs d, s) \\<or>\n    (a, aseqs') = (None, tl (execs d))\n\ngoal (1 subgoal):\n 1. \\<not> waiting (next_state s execs) (current s)\n            (the (next_action s execs))", "unfolding next_action_def next_state_def next_execs_def"], ["proof (prove)\nusing this:\n  (execs\n   (current s := fst (snd (control s (current s) (execs (current s))))))\n   d \\<noteq>\n  execs (current s)\n  d = current s\n  fst (control s (current s) (execs (current s))) = Some a\n  case control s d (execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (execs d) \\<and> (a, aseqs') = (None, []) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (execs d))), tl (hd (execs d)) # tl (execs d)) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') = (Some (hd (hd (execs d))), execs d, s) \\<or>\n    (a, aseqs') = (None, tl (execs d))\n\ngoal (1 subgoal):\n 1. \\<not> waiting (snd (snd (control s (current s) (execs (current s)))))\n            (current s)\n            (the (fst (control s (current s) (execs (current s)))))", "by auto"], ["proof (state)\nthis:\n  \\<not> waiting (next_state s execs) (current s)\n          (the (next_action s execs))\n\ngoal (2 subgoals):\n 1. next_execs s execs d = execs (current s) \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))\n 2. next_execs s execs d \\<noteq> execs (current s) \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "from True this\n                    1 2 inv_s\n                    sub_seq_in_prefixes[where X=AS_set] Some next_state_invariant\n                    current_next_state[THEN spec,THEN spec,where x1=s and x=execs]\n                    AS_prec_after_step[THEN spec,THEN spec,THEN spec,where x2=\"next_state s execs\" and x1=\"a\" and x=\"the ?a'\"]\n                    next_state_precondition not_aborting not_waiting"], ["proof (chain)\npicking this:\n  d = current s\n  \\<not> waiting (next_state s execs) (current s)\n          (the (next_action s execs))\n  \\<exists>aseq'\\<in>AS_set.\n     is_sub_seq a\n      (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                  (next_execs s execs d))))\n      aseq'\n  AS_precondition s (current s) a\n  invariant s\n  \\<exists>y\\<in>prefixes AS_set. is_sub_seq ?a ?a' y \\<Longrightarrow>\n  \\<exists>y\\<in>AS_set. is_sub_seq ?a ?a' y\n  next_action s execs = Some a\n  \\<forall>s execs.\n     invariant s \\<longrightarrow> invariant (next_state s execs)\n  current (next_state s execs) = current s\n  (\\<exists>aseq\\<in>AS_set.\n      is_sub_seq a\n       (the (fst (control (step (next_state s execs) (next_action s execs))\n                   d (next_execs s execs d))))\n       aseq) \\<and>\n  invariant (next_state s execs) \\<and>\n  AS_precondition (next_state s execs) (current (next_state s execs))\n   a \\<and>\n  \\<not> aborting (next_state s execs) (current (next_state s execs))\n          a \\<and>\n  \\<not> waiting (next_state s execs) (current (next_state s execs))\n          a \\<longrightarrow>\n  AS_precondition (kstep (next_state s execs) a)\n   (current (next_state s execs))\n   (the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d))))\n  \\<forall>s d a execs.\n     AS_precondition s d a \\<longrightarrow>\n     AS_precondition (next_state s execs) d a\n  \\<not> aborting (next_state s execs) (current s)\n          (the (next_action s execs))\n  \\<not> waiting (next_state s execs) (current s)\n          (the (next_action s execs))", "show ?thesis"], ["proof (prove)\nusing this:\n  d = current s\n  \\<not> waiting (next_state s execs) (current s)\n          (the (next_action s execs))\n  \\<exists>aseq'\\<in>AS_set.\n     is_sub_seq a\n      (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                  (next_execs s execs d))))\n      aseq'\n  AS_precondition s (current s) a\n  invariant s\n  \\<exists>y\\<in>prefixes AS_set. is_sub_seq ?a ?a' y \\<Longrightarrow>\n  \\<exists>y\\<in>AS_set. is_sub_seq ?a ?a' y\n  next_action s execs = Some a\n  \\<forall>s execs.\n     invariant s \\<longrightarrow> invariant (next_state s execs)\n  current (next_state s execs) = current s\n  (\\<exists>aseq\\<in>AS_set.\n      is_sub_seq a\n       (the (fst (control (step (next_state s execs) (next_action s execs))\n                   d (next_execs s execs d))))\n       aseq) \\<and>\n  invariant (next_state s execs) \\<and>\n  AS_precondition (next_state s execs) (current (next_state s execs))\n   a \\<and>\n  \\<not> aborting (next_state s execs) (current (next_state s execs))\n          a \\<and>\n  \\<not> waiting (next_state s execs) (current (next_state s execs))\n          a \\<longrightarrow>\n  AS_precondition (kstep (next_state s execs) a)\n   (current (next_state s execs))\n   (the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d))))\n  \\<forall>s d a execs.\n     AS_precondition s d a \\<longrightarrow>\n     AS_precondition (next_state s execs) d a\n  \\<not> aborting (next_state s execs) (current s)\n          (the (next_action s execs))\n  \\<not> waiting (next_state s execs) (current s)\n          (the (next_action s execs))\n\ngoal (1 subgoal):\n 1. AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "unfolding step_def"], ["proof (prove)\nusing this:\n  d = current s\n  \\<not> waiting (next_state s execs) (current s)\n          (the (next_action s execs))\n  \\<exists>aseq'\\<in>AS_set.\n     is_sub_seq a\n      (the (fst (control\n                  (case next_action s execs of\n                   None \\<Rightarrow> next_state s execs\n                   | Some a \\<Rightarrow> kstep (next_state s execs) a)\n                  d (next_execs s execs d))))\n      aseq'\n  AS_precondition s (current s) a\n  invariant s\n  \\<exists>y\\<in>prefixes AS_set. is_sub_seq ?a ?a' y \\<Longrightarrow>\n  \\<exists>y\\<in>AS_set. is_sub_seq ?a ?a' y\n  next_action s execs = Some a\n  \\<forall>s execs.\n     invariant s \\<longrightarrow> invariant (next_state s execs)\n  current (next_state s execs) = current s\n  (\\<exists>aseq\\<in>AS_set.\n      is_sub_seq a\n       (the (fst (control\n                   (case next_action s execs of\n                    None \\<Rightarrow> next_state s execs\n                    | Some a \\<Rightarrow> kstep (next_state s execs) a)\n                   d (next_execs s execs d))))\n       aseq) \\<and>\n  invariant (next_state s execs) \\<and>\n  AS_precondition (next_state s execs) (current (next_state s execs))\n   a \\<and>\n  \\<not> aborting (next_state s execs) (current (next_state s execs))\n          a \\<and>\n  \\<not> waiting (next_state s execs) (current (next_state s execs))\n          a \\<longrightarrow>\n  AS_precondition (kstep (next_state s execs) a)\n   (current (next_state s execs))\n   (the (fst (control\n               (case next_action s execs of\n                None \\<Rightarrow> next_state s execs\n                | Some a \\<Rightarrow> kstep (next_state s execs) a)\n               d (next_execs s execs d))))\n  \\<forall>s d a execs.\n     AS_precondition s d a \\<longrightarrow>\n     AS_precondition (next_state s execs) d a\n  \\<not> aborting (next_state s execs) (current s)\n          (the (next_action s execs))\n  \\<not> waiting (next_state s execs) (current s)\n          (the (next_action s execs))\n\ngoal (1 subgoal):\n 1. AS_precondition\n     (case next_action s execs of None \\<Rightarrow> next_state s execs\n      | Some a \\<Rightarrow> kstep (next_state s execs) a)\n     d (the (fst (control\n                   (case next_action s execs of\n                    None \\<Rightarrow> next_state s execs\n                    | Some a \\<Rightarrow> kstep (next_state s execs) a)\n                   d (next_execs s execs d))))", "by auto"], ["proof (state)\nthis:\n  AS_precondition (step (next_state s execs) (next_action s execs)) d\n   (the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d))))\n\ngoal (1 subgoal):\n 1. next_execs s execs d = execs (current s) \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. next_execs s execs d = execs (current s) \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "case waiting \\<comment> \\<open>The kernel is delaying action a. Thus the action after a, which is a', is equal to a.\\<close>"], ["proof (state)\nthis:\n  next_execs s execs d = execs (current s)\n\ngoal (1 subgoal):\n 1. next_execs s execs d = execs (current s) \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "from tl_hd_x_not_tl_x[where x=\"execs d\"] True waiting control_spec[THEN spec,THEN spec,THEN spec,where x2=s and x1=d and x=\"execs d\"] Some"], ["proof (chain)\npicking this:\n  execs d \\<noteq> [] \\<and> hd (execs d) \\<noteq> [] \\<longrightarrow>\n  tl (hd (execs d)) # tl (execs d) \\<noteq> execs d\n  d = current s\n  next_execs s execs d = execs (current s)\n  case control s d (execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (execs d) \\<and> (a, aseqs') = (None, []) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (execs d))), tl (hd (execs d)) # tl (execs d)) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') = (Some (hd (hd (execs d))), execs d, s) \\<or>\n    (a, aseqs') = (None, tl (execs d))\n  next_action s execs = Some a", "have a_def: \"?na d = execs (current s) \\<and> next_state s execs = s \\<and> waiting s d (the ?a)\""], ["proof (prove)\nusing this:\n  execs d \\<noteq> [] \\<and> hd (execs d) \\<noteq> [] \\<longrightarrow>\n  tl (hd (execs d)) # tl (execs d) \\<noteq> execs d\n  d = current s\n  next_execs s execs d = execs (current s)\n  case control s d (execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (execs d) \\<and> (a, aseqs') = (None, []) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (execs d))), tl (hd (execs d)) # tl (execs d)) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') = (Some (hd (hd (execs d))), execs d, s) \\<or>\n    (a, aseqs') = (None, tl (execs d))\n  next_action s execs = Some a\n\ngoal (1 subgoal):\n 1. next_execs s execs d = execs (current s) \\<and>\n    next_state s execs = s \\<and> waiting s d (the (next_action s execs))", "unfolding next_action_def next_execs_def next_state_def"], ["proof (prove)\nusing this:\n  execs d \\<noteq> [] \\<and> hd (execs d) \\<noteq> [] \\<longrightarrow>\n  tl (hd (execs d)) # tl (execs d) \\<noteq> execs d\n  d = current s\n  (execs\n   (current s := fst (snd (control s (current s) (execs (current s))))))\n   d =\n  execs (current s)\n  case control s d (execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (execs d) \\<and> (a, aseqs') = (None, []) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (execs d))), tl (hd (execs d)) # tl (execs d)) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') = (Some (hd (hd (execs d))), execs d, s) \\<or>\n    (a, aseqs') = (None, tl (execs d))\n  fst (control s (current s) (execs (current s))) = Some a\n\ngoal (1 subgoal):\n 1. (execs\n     (current s := fst (snd (control s (current s) (execs (current s))))))\n     d =\n    execs (current s) \\<and>\n    snd (snd (control s (current s) (execs (current s)))) = s \\<and>\n    waiting s d (the (fst (control s (current s) (execs (current s)))))", "by(auto)"], ["proof (state)\nthis:\n  next_execs s execs d = execs (current s) \\<and>\n  next_state s execs = s \\<and> waiting s d (the (next_action s execs))\n\ngoal (1 subgoal):\n 1. next_execs s execs d = execs (current s) \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "from Some waiting a_def True snd_action_not_none control_spec[THEN spec,THEN spec,THEN spec,where x2=\"?ns\" and x1=d and x=\"?na d\"]"], ["proof (chain)\npicking this:\n  next_action s execs = Some a\n  next_execs s execs d = execs (current s)\n  next_execs s execs d = execs (current s) \\<and>\n  next_state s execs = s \\<and> waiting s d (the (next_action s execs))\n  d = current s\n  fst (control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d)) \\<noteq>\n  None\n  case control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (next_execs s execs d) \\<and>\n    (a, aseqs') = (None, []) \\<or>\n    next_execs s execs d \\<noteq> [] \\<and>\n    hd (next_execs s execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (next_execs s execs d))),\n     tl (hd (next_execs s execs d)) # tl (next_execs s execs d)) \\<or>\n    next_execs s execs d \\<noteq> [] \\<and>\n    hd (next_execs s execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') =\n    (Some (hd (hd (next_execs s execs d))), next_execs s execs d,\n     step (next_state s execs) (next_action s execs)) \\<or>\n    (a, aseqs') = (None, tl (next_execs s execs d))", "have na_def: \"the ?a' = hd (hd (execs (current s)))\""], ["proof (prove)\nusing this:\n  next_action s execs = Some a\n  next_execs s execs d = execs (current s)\n  next_execs s execs d = execs (current s) \\<and>\n  next_state s execs = s \\<and> waiting s d (the (next_action s execs))\n  d = current s\n  fst (control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d)) \\<noteq>\n  None\n  case control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (next_execs s execs d) \\<and>\n    (a, aseqs') = (None, []) \\<or>\n    next_execs s execs d \\<noteq> [] \\<and>\n    hd (next_execs s execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (next_execs s execs d))),\n     tl (hd (next_execs s execs d)) # tl (next_execs s execs d)) \\<or>\n    next_execs s execs d \\<noteq> [] \\<and>\n    hd (next_execs s execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') =\n    (Some (hd (hd (next_execs s execs d))), next_execs s execs d,\n     step (next_state s execs) (next_action s execs)) \\<or>\n    (a, aseqs') = (None, tl (next_execs s execs d))\n\ngoal (1 subgoal):\n 1. the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d))) =\n    hd (hd (execs (current s)))", "unfolding next_action_def next_execs_def"], ["proof (prove)\nusing this:\n  fst (control s (current s) (execs (current s))) = Some a\n  (execs\n   (current s := fst (snd (control s (current s) (execs (current s))))))\n   d =\n  execs (current s)\n  (execs\n   (current s := fst (snd (control s (current s) (execs (current s))))))\n   d =\n  execs (current s) \\<and>\n  next_state s execs = s \\<and>\n  waiting s d (the (fst (control s (current s) (execs (current s)))))\n  d = current s\n  fst (control\n        (step (next_state s execs)\n          (fst (control s (current s) (execs (current s)))))\n        d ((execs\n            (current s :=\n               fst (snd (control s (current s) (execs (current s))))))\n            d)) \\<noteq>\n  None\n  case control\n        (step (next_state s execs)\n          (fst (control s (current s) (execs (current s)))))\n        d ((execs\n            (current s :=\n               fst (snd (control s (current s) (execs (current s))))))\n            d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty\n     ((execs\n       (current s := fst (snd (control s (current s) (execs (current s))))))\n       d) \\<and>\n    (a, aseqs') = (None, []) \\<or>\n    (execs\n     (current s := fst (snd (control s (current s) (execs (current s))))))\n     d \\<noteq>\n    [] \\<and>\n    hd ((execs\n         (current s :=\n            fst (snd (control s (current s) (execs (current s))))))\n         d) \\<noteq>\n    [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some\n      (hd (hd ((execs\n                (current s :=\n                   fst (snd (control s (current s) (execs (current s))))))\n                d))),\n     tl (hd ((execs\n              (current s :=\n                 fst (snd (control s (current s) (execs (current s))))))\n              d)) #\n     tl ((execs\n          (current s :=\n             fst (snd (control s (current s) (execs (current s))))))\n          d)) \\<or>\n    (execs\n     (current s := fst (snd (control s (current s) (execs (current s))))))\n     d \\<noteq>\n    [] \\<and>\n    hd ((execs\n         (current s :=\n            fst (snd (control s (current s) (execs (current s))))))\n         d) \\<noteq>\n    [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') =\n    (Some\n      (hd (hd ((execs\n                (current s :=\n                   fst (snd (control s (current s) (execs (current s))))))\n                d))),\n     (execs\n      (current s := fst (snd (control s (current s) (execs (current s))))))\n      d,\n     step (next_state s execs)\n      (fst (control s (current s) (execs (current s))))) \\<or>\n    (a, aseqs') =\n    (None,\n     tl ((execs\n          (current s :=\n             fst (snd (control s (current s) (execs (current s))))))\n          d))\n\ngoal (1 subgoal):\n 1. the (fst (control\n               (step (next_state s execs)\n                 (fst (control s (current s) (execs (current s)))))\n               d ((execs\n                   (current s :=\n                      fst (snd (control s (current s)\n                                 (execs (current s))))))\n                   d))) =\n    hd (hd (execs (current s)))", "by(auto)"], ["proof (state)\nthis:\n  the (fst (control (step (next_state s execs) (next_action s execs)) d\n             (next_execs s execs d))) =\n  hd (hd (execs (current s)))\n\ngoal (1 subgoal):\n 1. next_execs s execs d = execs (current s) \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "from spec_of_waiting a_def True"], ["proof (chain)\npicking this:\n  \\<forall>s a. waiting s (current s) a \\<longrightarrow> kstep s a = s\n  next_execs s execs d = execs (current s) \\<and>\n  next_state s execs = s \\<and> waiting s d (the (next_action s execs))\n  d = current s", "have no_step: \"step s ?a = s\""], ["proof (prove)\nusing this:\n  \\<forall>s a. waiting s (current s) a \\<longrightarrow> kstep s a = s\n  next_execs s execs d = execs (current s) \\<and>\n  next_state s execs = s \\<and> waiting s d (the (next_action s execs))\n  d = current s\n\ngoal (1 subgoal):\n 1. step s (next_action s execs) = s", "unfolding step_def"], ["proof (prove)\nusing this:\n  \\<forall>s a. waiting s (current s) a \\<longrightarrow> kstep s a = s\n  next_execs s execs d = execs (current s) \\<and>\n  next_state s execs = s \\<and> waiting s d (the (next_action s execs))\n  d = current s\n\ngoal (1 subgoal):\n 1. (case next_action s execs of None \\<Rightarrow> s\n     | Some a \\<Rightarrow> kstep s a) =\n    s", "by (cases \"next_action s execs\",auto)"], ["proof (state)\nthis:\n  step s (next_action s execs) = s\n\ngoal (1 subgoal):\n 1. next_execs s execs d = execs (current s) \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "from no_step Some True a_def \n                          inv_sa[unfolded precondition_ind_def,THEN conjunct2,THEN spec,where x=\"current s\"] s_sa"], ["proof (chain)\npicking this:\n  step s (next_action s execs) = s\n  next_action s execs = Some a\n  d = current s\n  next_execs s execs d = execs (current s) \\<and>\n  next_state s execs = s \\<and> waiting s d (the (next_action s execs))\n  fst (control sa (current s) (execs (current s))) \\<rightharpoonup>\n  AS_precondition sa (current s)\n  s = sa", "have 2: \"AS_precondition s (current s) (the ?a')\""], ["proof (prove)\nusing this:\n  step s (next_action s execs) = s\n  next_action s execs = Some a\n  d = current s\n  next_execs s execs d = execs (current s) \\<and>\n  next_state s execs = s \\<and> waiting s d (the (next_action s execs))\n  fst (control sa (current s) (execs (current s))) \\<rightharpoonup>\n  AS_precondition sa (current s)\n  s = sa\n\ngoal (1 subgoal):\n 1. AS_precondition s (current s)\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "unfolding next_action_def B_def"], ["proof (prove)\nusing this:\n  step s (fst (control s (current s) (execs (current s)))) = s\n  fst (control s (current s) (execs (current s))) = Some a\n  d = current s\n  next_execs s execs d = execs (current s) \\<and>\n  next_state s execs = s \\<and>\n  waiting s d (the (fst (control s (current s) (execs (current s)))))\n  case fst (control sa (current s) (execs (current s))) of\n  None \\<Rightarrow> True\n  | Some a \\<Rightarrow> AS_precondition sa (current s) a\n  s = sa\n\ngoal (1 subgoal):\n 1. AS_precondition s (current s)\n     (the (fst (control\n                 (step (next_state s execs)\n                   (fst (control s (current s) (execs (current s)))))\n                 d (next_execs s execs d))))", "by(auto)"], ["proof (state)\nthis:\n  AS_precondition s (current s)\n   (the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d))))\n\ngoal (1 subgoal):\n 1. next_execs s execs d = execs (current s) \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "from a_def na_def this True Some no_step"], ["proof (chain)\npicking this:\n  next_execs s execs d = execs (current s) \\<and>\n  next_state s execs = s \\<and> waiting s d (the (next_action s execs))\n  the (fst (control (step (next_state s execs) (next_action s execs)) d\n             (next_execs s execs d))) =\n  hd (hd (execs (current s)))\n  AS_precondition s (current s)\n   (the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d))))\n  d = current s\n  next_action s execs = Some a\n  step s (next_action s execs) = s", "show ?thesis"], ["proof (prove)\nusing this:\n  next_execs s execs d = execs (current s) \\<and>\n  next_state s execs = s \\<and> waiting s d (the (next_action s execs))\n  the (fst (control (step (next_state s execs) (next_action s execs)) d\n             (next_execs s execs d))) =\n  hd (hd (execs (current s)))\n  AS_precondition s (current s)\n   (the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d))))\n  d = current s\n  next_action s execs = Some a\n  step s (next_action s execs) = s\n\ngoal (1 subgoal):\n 1. AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "unfolding step_def"], ["proof (prove)\nusing this:\n  next_execs s execs d = execs (current s) \\<and>\n  next_state s execs = s \\<and> waiting s d (the (next_action s execs))\n  the (fst (control\n             (case next_action s execs of\n              None \\<Rightarrow> next_state s execs\n              | Some a \\<Rightarrow> kstep (next_state s execs) a)\n             d (next_execs s execs d))) =\n  hd (hd (execs (current s)))\n  AS_precondition s (current s)\n   (the (fst (control\n               (case next_action s execs of\n                None \\<Rightarrow> next_state s execs\n                | Some a \\<Rightarrow> kstep (next_state s execs) a)\n               d (next_execs s execs d))))\n  d = current s\n  next_action s execs = Some a\n  (case next_action s execs of None \\<Rightarrow> s\n   | Some a \\<Rightarrow> kstep s a) =\n  s\n\ngoal (1 subgoal):\n 1. AS_precondition\n     (case next_action s execs of None \\<Rightarrow> next_state s execs\n      | Some a \\<Rightarrow> kstep (next_state s execs) a)\n     d (the (fst (control\n                   (case next_action s execs of\n                    None \\<Rightarrow> next_state s execs\n                    | Some a \\<Rightarrow> kstep (next_state s execs) a)\n                   d (next_execs s execs d))))", "by(auto)"], ["proof (state)\nthis:\n  AS_precondition (step (next_state s execs) (next_action s execs)) d\n   (the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AS_precondition (step (next_state s execs) (next_action s execs)) d\n   (the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d))))\n\ngoal (1 subgoal):\n 1. next_action s execs = None \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. next_action s execs = None \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "case None\n                \\<comment> \\<open>Assuming that the current domain does not execute an action, and assuming that the action a' after that is not None (statement snd-action-not-none),\n                    we prove that the precondition is inductive, i.e., it will hold for a'.\n                    This holds, since the control mechanism will ensure that action a' is the start of a new action sequence in AS-set.\\<close>"], ["proof (state)\nthis:\n  next_action s execs = None\n\ngoal (1 subgoal):\n 1. next_action s execs = None \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "from None True snd_action_not_none control_spec[THEN spec,THEN spec,THEN spec,where x2=\"?ns\" and x1=d and x=\"?na d\"]\n                     control_spec[THEN spec,THEN spec,THEN spec,where x2=s and x1=d and x=\"execs d\"]"], ["proof (chain)\npicking this:\n  next_action s execs = None\n  d = current s\n  fst (control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d)) \\<noteq>\n  None\n  case control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (next_execs s execs d) \\<and>\n    (a, aseqs') = (None, []) \\<or>\n    next_execs s execs d \\<noteq> [] \\<and>\n    hd (next_execs s execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (next_execs s execs d))),\n     tl (hd (next_execs s execs d)) # tl (next_execs s execs d)) \\<or>\n    next_execs s execs d \\<noteq> [] \\<and>\n    hd (next_execs s execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') =\n    (Some (hd (hd (next_execs s execs d))), next_execs s execs d,\n     step (next_state s execs) (next_action s execs)) \\<or>\n    (a, aseqs') = (None, tl (next_execs s execs d))\n  case control s d (execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (execs d) \\<and> (a, aseqs') = (None, []) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (execs d))), tl (hd (execs d)) # tl (execs d)) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') = (Some (hd (hd (execs d))), execs d, s) \\<or>\n    (a, aseqs') = (None, tl (execs d))", "have na_def: \"the ?a' = hd (hd (tl (execs (current s)))) \\<and> ?na d = tl (execs (current s))\""], ["proof (prove)\nusing this:\n  next_action s execs = None\n  d = current s\n  fst (control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d)) \\<noteq>\n  None\n  case control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (next_execs s execs d) \\<and>\n    (a, aseqs') = (None, []) \\<or>\n    next_execs s execs d \\<noteq> [] \\<and>\n    hd (next_execs s execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (next_execs s execs d))),\n     tl (hd (next_execs s execs d)) # tl (next_execs s execs d)) \\<or>\n    next_execs s execs d \\<noteq> [] \\<and>\n    hd (next_execs s execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') =\n    (Some (hd (hd (next_execs s execs d))), next_execs s execs d,\n     step (next_state s execs) (next_action s execs)) \\<or>\n    (a, aseqs') = (None, tl (next_execs s execs d))\n  case control s d (execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (execs d) \\<and> (a, aseqs') = (None, []) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (execs d))), tl (hd (execs d)) # tl (execs d)) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') = (Some (hd (hd (execs d))), execs d, s) \\<or>\n    (a, aseqs') = (None, tl (execs d))\n\ngoal (1 subgoal):\n 1. the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d))) =\n    hd (hd (tl (execs (current s)))) \\<and>\n    next_execs s execs d = tl (execs (current s))", "unfolding next_action_def next_execs_def"], ["proof (prove)\nusing this:\n  fst (control s (current s) (execs (current s))) = None\n  d = current s\n  fst (control\n        (step (next_state s execs)\n          (fst (control s (current s) (execs (current s)))))\n        d ((execs\n            (current s :=\n               fst (snd (control s (current s) (execs (current s))))))\n            d)) \\<noteq>\n  None\n  case control\n        (step (next_state s execs)\n          (fst (control s (current s) (execs (current s)))))\n        d ((execs\n            (current s :=\n               fst (snd (control s (current s) (execs (current s))))))\n            d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty\n     ((execs\n       (current s := fst (snd (control s (current s) (execs (current s))))))\n       d) \\<and>\n    (a, aseqs') = (None, []) \\<or>\n    (execs\n     (current s := fst (snd (control s (current s) (execs (current s))))))\n     d \\<noteq>\n    [] \\<and>\n    hd ((execs\n         (current s :=\n            fst (snd (control s (current s) (execs (current s))))))\n         d) \\<noteq>\n    [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some\n      (hd (hd ((execs\n                (current s :=\n                   fst (snd (control s (current s) (execs (current s))))))\n                d))),\n     tl (hd ((execs\n              (current s :=\n                 fst (snd (control s (current s) (execs (current s))))))\n              d)) #\n     tl ((execs\n          (current s :=\n             fst (snd (control s (current s) (execs (current s))))))\n          d)) \\<or>\n    (execs\n     (current s := fst (snd (control s (current s) (execs (current s))))))\n     d \\<noteq>\n    [] \\<and>\n    hd ((execs\n         (current s :=\n            fst (snd (control s (current s) (execs (current s))))))\n         d) \\<noteq>\n    [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') =\n    (Some\n      (hd (hd ((execs\n                (current s :=\n                   fst (snd (control s (current s) (execs (current s))))))\n                d))),\n     (execs\n      (current s := fst (snd (control s (current s) (execs (current s))))))\n      d,\n     step (next_state s execs)\n      (fst (control s (current s) (execs (current s))))) \\<or>\n    (a, aseqs') =\n    (None,\n     tl ((execs\n          (current s :=\n             fst (snd (control s (current s) (execs (current s))))))\n          d))\n  case control s d (execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (execs d) \\<and> (a, aseqs') = (None, []) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (execs d))), tl (hd (execs d)) # tl (execs d)) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') = (Some (hd (hd (execs d))), execs d, s) \\<or>\n    (a, aseqs') = (None, tl (execs d))\n\ngoal (1 subgoal):\n 1. the (fst (control\n               (step (next_state s execs)\n                 (fst (control s (current s) (execs (current s)))))\n               d ((execs\n                   (current s :=\n                      fst (snd (control s (current s)\n                                 (execs (current s))))))\n                   d))) =\n    hd (hd (tl (execs (current s)))) \\<and>\n    (execs\n     (current s := fst (snd (control s (current s) (execs (current s))))))\n     d =\n    tl (execs (current s))", "by(auto)"], ["proof (state)\nthis:\n  the (fst (control (step (next_state s execs) (next_action s execs)) d\n             (next_execs s execs d))) =\n  hd (hd (tl (execs (current s)))) \\<and>\n  next_execs s execs d = tl (execs (current s))\n\ngoal (1 subgoal):\n 1. next_action s execs = None \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "from True None snd_action_not_none control_spec[THEN spec,THEN spec,THEN spec,where x2=\"?ns\" and x1=d and x=\"?na d\"]\n                     this"], ["proof (chain)\npicking this:\n  d = current s\n  next_action s execs = None\n  fst (control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d)) \\<noteq>\n  None\n  case control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (next_execs s execs d) \\<and>\n    (a, aseqs') = (None, []) \\<or>\n    next_execs s execs d \\<noteq> [] \\<and>\n    hd (next_execs s execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (next_execs s execs d))),\n     tl (hd (next_execs s execs d)) # tl (next_execs s execs d)) \\<or>\n    next_execs s execs d \\<noteq> [] \\<and>\n    hd (next_execs s execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') =\n    (Some (hd (hd (next_execs s execs d))), next_execs s execs d,\n     step (next_state s execs) (next_action s execs)) \\<or>\n    (a, aseqs') = (None, tl (next_execs s execs d))\n  the (fst (control (step (next_state s execs) (next_action s execs)) d\n             (next_execs s execs d))) =\n  hd (hd (tl (execs (current s)))) \\<and>\n  next_execs s execs d = tl (execs (current s))", "have 1: \"tl (execs (current s)) \\<noteq> [] \\<and> hd (tl (execs (current s))) \\<noteq> []\""], ["proof (prove)\nusing this:\n  d = current s\n  next_action s execs = None\n  fst (control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d)) \\<noteq>\n  None\n  case control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (next_execs s execs d) \\<and>\n    (a, aseqs') = (None, []) \\<or>\n    next_execs s execs d \\<noteq> [] \\<and>\n    hd (next_execs s execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (next_execs s execs d))),\n     tl (hd (next_execs s execs d)) # tl (next_execs s execs d)) \\<or>\n    next_execs s execs d \\<noteq> [] \\<and>\n    hd (next_execs s execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') =\n    (Some (hd (hd (next_execs s execs d))), next_execs s execs d,\n     step (next_state s execs) (next_action s execs)) \\<or>\n    (a, aseqs') = (None, tl (next_execs s execs d))\n  the (fst (control (step (next_state s execs) (next_action s execs)) d\n             (next_execs s execs d))) =\n  hd (hd (tl (execs (current s)))) \\<and>\n  next_execs s execs d = tl (execs (current s))\n\ngoal (1 subgoal):\n 1. tl (execs (current s)) \\<noteq> [] \\<and>\n    hd (tl (execs (current s))) \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  tl (execs (current s)) \\<noteq> [] \\<and>\n  hd (tl (execs (current s))) \\<noteq> []\n\ngoal (1 subgoal):\n 1. next_action s execs = None \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "from this realistic[unfolded realistic_executions_ind_def,THEN spec,where x=d] True thread_not_empty"], ["proof (chain)\npicking this:\n  tl (execs (current s)) \\<noteq> [] \\<and>\n  hd (tl (execs (current s))) \\<noteq> []\n  case execs d of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n  d = current s\n  \\<not> thread_empty (execs (current s))", "have \"hd (tl (execs (current s))) \\<in> AS_set\""], ["proof (prove)\nusing this:\n  tl (execs (current s)) \\<noteq> [] \\<and>\n  hd (tl (execs (current s))) \\<noteq> []\n  case execs d of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n  d = current s\n  \\<not> thread_empty (execs (current s))\n\ngoal (1 subgoal):\n 1. hd (tl (execs (current s))) \\<in> AS_set", "by (cases \"execs d\",auto)"], ["proof (state)\nthis:\n  hd (tl (execs (current s))) \\<in> AS_set\n\ngoal (1 subgoal):\n 1. next_action s execs = None \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "from True snd_action_not_none this\n                  inv_ns this na_def 1\n                  AS_prec_first_action[THEN spec,THEN spec,THEN spec,where x2=\"?ns\" and x=\"hd (tl (execs (current s)))\" and x1=d]"], ["proof (chain)\npicking this:\n  d = current s\n  fst (control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d)) \\<noteq>\n  None\n  hd (tl (execs (current s))) \\<in> AS_set\n  invariant (step (next_state s execs) (next_action s execs))\n  hd (tl (execs (current s))) \\<in> AS_set\n  the (fst (control (step (next_state s execs) (next_action s execs)) d\n             (next_execs s execs d))) =\n  hd (hd (tl (execs (current s)))) \\<and>\n  next_execs s execs d = tl (execs (current s))\n  tl (execs (current s)) \\<noteq> [] \\<and>\n  hd (tl (execs (current s))) \\<noteq> []\n  invariant (step (next_state s execs) (next_action s execs)) \\<and>\n  hd (tl (execs (current s))) \\<in> AS_set \\<and>\n  hd (tl (execs (current s))) \\<noteq> [] \\<longrightarrow>\n  AS_precondition (step (next_state s execs) (next_action s execs)) d\n   (hd (hd (tl (execs (current s)))))", "show ?thesis"], ["proof (prove)\nusing this:\n  d = current s\n  fst (control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d)) \\<noteq>\n  None\n  hd (tl (execs (current s))) \\<in> AS_set\n  invariant (step (next_state s execs) (next_action s execs))\n  hd (tl (execs (current s))) \\<in> AS_set\n  the (fst (control (step (next_state s execs) (next_action s execs)) d\n             (next_execs s execs d))) =\n  hd (hd (tl (execs (current s)))) \\<and>\n  next_execs s execs d = tl (execs (current s))\n  tl (execs (current s)) \\<noteq> [] \\<and>\n  hd (tl (execs (current s))) \\<noteq> []\n  invariant (step (next_state s execs) (next_action s execs)) \\<and>\n  hd (tl (execs (current s))) \\<in> AS_set \\<and>\n  hd (tl (execs (current s))) \\<noteq> [] \\<longrightarrow>\n  AS_precondition (step (next_state s execs) (next_action s execs)) d\n   (hd (hd (tl (execs (current s)))))\n\ngoal (1 subgoal):\n 1. AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "by auto"], ["proof (state)\nthis:\n  AS_precondition (step (next_state s execs) (next_action s execs)) d\n   (the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AS_precondition (step (next_state s execs) (next_action s execs)) d\n   (the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d))))\n\ngoal (2 subgoals):\n 1. d = current s \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))\n 2. d \\<noteq> current s \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "}"], ["proof (state)\nthis:\n  AS_precondition (step (next_state s execs) (next_action s execs)) d\n   (the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d))))\n\ngoal (2 subgoals):\n 1. d = current s \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))\n 2. d \\<noteq> current s \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "thus ?thesis"], ["proof (prove)\nusing this:\n  AS_precondition (step (next_state s execs) (next_action s execs)) d\n   (the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d))))\n\ngoal (1 subgoal):\n 1. AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "using control_spec[THEN spec,THEN spec,THEN spec,where x2=\"?ns\" and x1=\"current s\" and x=\"?na (current s)\"]\n                    thread_not_empty True snd_action_not_none"], ["proof (prove)\nusing this:\n  AS_precondition (step (next_state s execs) (next_action s execs)) d\n   (the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d))))\n  case control (step (next_state s execs) (next_action s execs)) (current s)\n        (next_execs s execs (current s)) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (next_execs s execs (current s)) \\<and>\n    (a, aseqs') = (None, []) \\<or>\n    next_execs s execs (current s) \\<noteq> [] \\<and>\n    hd (next_execs s execs (current s)) \\<noteq> [] \\<and>\n    \\<not> aborting s' (current s) (the a) \\<and>\n    \\<not> waiting s' (current s) (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (next_execs s execs (current s)))),\n     tl (hd (next_execs s execs (current s))) #\n     tl (next_execs s execs (current s))) \\<or>\n    next_execs s execs (current s) \\<noteq> [] \\<and>\n    hd (next_execs s execs (current s)) \\<noteq> [] \\<and>\n    waiting s' (current s) (the a) \\<and>\n    (a, aseqs', s') =\n    (Some (hd (hd (next_execs s execs (current s)))),\n     next_execs s execs (current s),\n     step (next_state s execs) (next_action s execs)) \\<or>\n    (a, aseqs') = (None, tl (next_execs s execs (current s)))\n  \\<not> thread_empty (execs (current s))\n  d = current s\n  fst (control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d)) \\<noteq>\n  None\n\ngoal (1 subgoal):\n 1. AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "by (auto simp add: Let_def)"], ["proof (state)\nthis:\n  AS_precondition (step (next_state s execs) (next_action s execs)) d\n   (the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d))))\n\ngoal (1 subgoal):\n 1. d \\<noteq> current s \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. d \\<noteq> current s \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "case False"], ["proof (state)\nthis:\n  d \\<noteq> current s\n\ngoal (1 subgoal):\n 1. d \\<noteq> current s \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "from False"], ["proof (chain)\npicking this:\n  d \\<noteq> current s", "have equal_na_a: \"?na d = execs d\""], ["proof (prove)\nusing this:\n  d \\<noteq> current s\n\ngoal (1 subgoal):\n 1. next_execs s execs d = execs d", "unfolding next_execs_def"], ["proof (prove)\nusing this:\n  d \\<noteq> current s\n\ngoal (1 subgoal):\n 1. (execs\n     (current s := fst (snd (control s (current s) (execs (current s))))))\n     d =\n    execs d", "by auto"], ["proof (state)\nthis:\n  next_execs s execs d = execs d\n\ngoal (1 subgoal):\n 1. d \\<noteq> current s \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "from this False current_next_state next_action_after_step"], ["proof (chain)\npicking this:\n  next_execs s execs d = execs d\n  d \\<noteq> current s\n  \\<forall>s execs. current (next_state s execs) = current s\n  \\<forall>s a d aseqs.\n     current s \\<noteq> d \\<longrightarrow>\n     fst (control (step s a) d aseqs) = fst (control s d aseqs)", "have \"?a' = fst (control (next_state s execs) d (next_execs s execs d))\""], ["proof (prove)\nusing this:\n  next_execs s execs d = execs d\n  d \\<noteq> current s\n  \\<forall>s execs. current (next_state s execs) = current s\n  \\<forall>s a d aseqs.\n     current s \\<noteq> d \\<longrightarrow>\n     fst (control (step s a) d aseqs) = fst (control s d aseqs)\n\ngoal (1 subgoal):\n 1. fst (control (step (next_state s execs) (next_action s execs)) d\n          (next_execs s execs d)) =\n    fst (control (next_state s execs) d (next_execs s execs d))", "unfolding next_action_def"], ["proof (prove)\nusing this:\n  next_execs s execs d = execs d\n  d \\<noteq> current s\n  \\<forall>s execs. current (next_state s execs) = current s\n  \\<forall>s a d aseqs.\n     current s \\<noteq> d \\<longrightarrow>\n     fst (control (step s a) d aseqs) = fst (control s d aseqs)\n\ngoal (1 subgoal):\n 1. fst (control\n          (step (next_state s execs)\n            (fst (control s (current s) (execs (current s)))))\n          d (next_execs s execs d)) =\n    fst (control (next_state s execs) d (next_execs s execs d))", "by auto"], ["proof (state)\nthis:\n  fst (control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d)) =\n  fst (control (next_state s execs) d (next_execs s execs d))\n\ngoal (1 subgoal):\n 1. d \\<noteq> current s \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "from inv_sa[unfolded precondition_ind_def,THEN conjunct2,THEN spec,where x=d] s_sa equal_na_a  this\n                 next_action_after_next_state[THEN spec,THEN spec,THEN spec,where x=d and x2=s and x1=execs]\n                 snd_action_not_none False"], ["proof (chain)\npicking this:\n  fst (control sa d (execs d)) \\<rightharpoonup> AS_precondition sa d\n  s = sa\n  next_execs s execs d = execs d\n  fst (control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d)) =\n  fst (control (next_state s execs) d (next_execs s execs d))\n  current s \\<noteq> d \\<longrightarrow>\n  fst (control (next_state s execs) d (execs d)) = None \\<or>\n  fst (control (next_state s execs) d (execs d)) =\n  fst (control s d (execs d))\n  fst (control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d)) \\<noteq>\n  None\n  d \\<noteq> current s", "have \"AS_precondition s d (the ?a')\""], ["proof (prove)\nusing this:\n  fst (control sa d (execs d)) \\<rightharpoonup> AS_precondition sa d\n  s = sa\n  next_execs s execs d = execs d\n  fst (control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d)) =\n  fst (control (next_state s execs) d (next_execs s execs d))\n  current s \\<noteq> d \\<longrightarrow>\n  fst (control (next_state s execs) d (execs d)) = None \\<or>\n  fst (control (next_state s execs) d (execs d)) =\n  fst (control s d (execs d))\n  fst (control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d)) \\<noteq>\n  None\n  d \\<noteq> current s\n\ngoal (1 subgoal):\n 1. AS_precondition s d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "unfolding precondition_ind_def next_action_def B_def"], ["proof (prove)\nusing this:\n  case fst (control sa d (execs d)) of None \\<Rightarrow> True\n  | Some a \\<Rightarrow> AS_precondition sa d a\n  s = sa\n  next_execs s execs d = execs d\n  fst (control\n        (step (next_state s execs)\n          (fst (control s (current s) (execs (current s)))))\n        d (next_execs s execs d)) =\n  fst (control (next_state s execs) d (next_execs s execs d))\n  current s \\<noteq> d \\<longrightarrow>\n  fst (control (next_state s execs) d (execs d)) = None \\<or>\n  fst (control (next_state s execs) d (execs d)) =\n  fst (control s d (execs d))\n  fst (control\n        (step (next_state s execs)\n          (fst (control s (current s) (execs (current s)))))\n        d (next_execs s execs d)) \\<noteq>\n  None\n  d \\<noteq> current s\n\ngoal (1 subgoal):\n 1. AS_precondition s d\n     (the (fst (control\n                 (step (next_state s execs)\n                   (fst (control s (current s) (execs (current s)))))\n                 d (next_execs s execs d))))", "by (cases \"fst (control sa d (execs d))\",auto)"], ["proof (state)\nthis:\n  AS_precondition s d\n   (the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d))))\n\ngoal (1 subgoal):\n 1. d \\<noteq> current s \\<Longrightarrow>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "from equal_na_a False this next_state_precondition current_next_state\n              AS_prec_dom_independent[THEN spec,THEN spec,THEN spec,THEN spec,where x3=\"next_state s execs\" and x2=d and x=\"the ?a\" and x1=\"the ?a'\"]"], ["proof (chain)\npicking this:\n  next_execs s execs d = execs d\n  d \\<noteq> current s\n  AS_precondition s d\n   (the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d))))\n  \\<forall>s d a execs.\n     AS_precondition s d a \\<longrightarrow>\n     AS_precondition (next_state s execs) d a\n  \\<forall>s execs. current (next_state s execs) = current s\n  current (next_state s execs) \\<noteq> d \\<and>\n  AS_precondition (next_state s execs) d\n   (the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d)))) \\<longrightarrow>\n  AS_precondition (kstep (next_state s execs) (the (next_action s execs))) d\n   (the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d))))", "show ?thesis"], ["proof (prove)\nusing this:\n  next_execs s execs d = execs d\n  d \\<noteq> current s\n  AS_precondition s d\n   (the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d))))\n  \\<forall>s d a execs.\n     AS_precondition s d a \\<longrightarrow>\n     AS_precondition (next_state s execs) d a\n  \\<forall>s execs. current (next_state s execs) = current s\n  current (next_state s execs) \\<noteq> d \\<and>\n  AS_precondition (next_state s execs) d\n   (the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d)))) \\<longrightarrow>\n  AS_precondition (kstep (next_state s execs) (the (next_action s execs))) d\n   (the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d))))\n\ngoal (1 subgoal):\n 1. AS_precondition (step (next_state s execs) (next_action s execs)) d\n     (the (fst (control (step (next_state s execs) (next_action s execs)) d\n                 (next_execs s execs d))))", "unfolding step_def"], ["proof (prove)\nusing this:\n  next_execs s execs d = execs d\n  d \\<noteq> current s\n  AS_precondition s d\n   (the (fst (control\n               (case next_action s execs of\n                None \\<Rightarrow> next_state s execs\n                | Some a \\<Rightarrow> kstep (next_state s execs) a)\n               d (next_execs s execs d))))\n  \\<forall>s d a execs.\n     AS_precondition s d a \\<longrightarrow>\n     AS_precondition (next_state s execs) d a\n  \\<forall>s execs. current (next_state s execs) = current s\n  current (next_state s execs) \\<noteq> d \\<and>\n  AS_precondition (next_state s execs) d\n   (the (fst (control\n               (case next_action s execs of\n                None \\<Rightarrow> next_state s execs\n                | Some a \\<Rightarrow> kstep (next_state s execs) a)\n               d (next_execs s execs d)))) \\<longrightarrow>\n  AS_precondition (kstep (next_state s execs) (the (next_action s execs))) d\n   (the (fst (control\n               (case next_action s execs of\n                None \\<Rightarrow> next_state s execs\n                | Some a \\<Rightarrow> kstep (next_state s execs) a)\n               d (next_execs s execs d))))\n\ngoal (1 subgoal):\n 1. AS_precondition\n     (case next_action s execs of None \\<Rightarrow> next_state s execs\n      | Some a \\<Rightarrow> kstep (next_state s execs) a)\n     d (the (fst (control\n                   (case next_action s execs of\n                    None \\<Rightarrow> next_state s execs\n                    | Some a \\<Rightarrow> kstep (next_state s execs) a)\n                   d (next_execs s execs d))))", "by (cases \"next_action s execs\",auto)"], ["proof (state)\nthis:\n  AS_precondition (step (next_state s execs) (next_action s execs)) d\n   (the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AS_precondition (step (next_state s execs) (next_action s execs)) d\n   (the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d))))\n\ngoal (1 subgoal):\n 1. \\<forall>d.\n       fst (control (step (next_state s execs) (next_action s execs)) d\n             (next_execs s execs d)) \\<rightharpoonup>\n       AS_precondition (step (next_state s execs) (next_action s execs)) d", "}"], ["proof (state)\nthis:\n  fst (control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d)) \\<noteq>\n  None \\<Longrightarrow>\n  AS_precondition (step (next_state s execs) (next_action s execs)) d\n   (the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d))))\n\ngoal (1 subgoal):\n 1. \\<forall>d.\n       fst (control (step (next_state s execs) (next_action s execs)) d\n             (next_execs s execs d)) \\<rightharpoonup>\n       AS_precondition (step (next_state s execs) (next_action s execs)) d", "hence \"fst (control ?ns d (?na d)) \\<rightharpoonup> AS_precondition ?ns d\""], ["proof (prove)\nusing this:\n  fst (control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d)) \\<noteq>\n  None \\<Longrightarrow>\n  AS_precondition (step (next_state s execs) (next_action s execs)) d\n   (the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d))))\n\ngoal (1 subgoal):\n 1. fst (control (step (next_state s execs) (next_action s execs)) d\n          (next_execs s execs d)) \\<rightharpoonup>\n    AS_precondition (step (next_state s execs) (next_action s execs)) d", "unfolding B_def"], ["proof (prove)\nusing this:\n  fst (control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d)) \\<noteq>\n  None \\<Longrightarrow>\n  AS_precondition (step (next_state s execs) (next_action s execs)) d\n   (the (fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d))))\n\ngoal (1 subgoal):\n 1. case fst (control (step (next_state s execs) (next_action s execs)) d\n               (next_execs s execs d)) of\n    None \\<Rightarrow> True\n    | Some a \\<Rightarrow>\n        AS_precondition (step (next_state s execs) (next_action s execs)) d\n         a", "by (cases \"fst (control ?ns d (?na d))\",auto)"], ["proof (state)\nthis:\n  fst (control (step (next_state s execs) (next_action s execs)) d\n        (next_execs s execs d)) \\<rightharpoonup>\n  AS_precondition (step (next_state s execs) (next_action s execs)) d\n\ngoal (1 subgoal):\n 1. \\<forall>d.\n       fst (control (step (next_state s execs) (next_action s execs)) d\n             (next_execs s execs d)) \\<rightharpoonup>\n       AS_precondition (step (next_state s execs) (next_action s execs)) d", "}"], ["proof (state)\nthis:\n  fst (control (step (next_state s execs) (next_action s execs)) ?d2\n        (next_execs s execs ?d2)) \\<rightharpoonup>\n  AS_precondition (step (next_state s execs) (next_action s execs)) ?d2\n\ngoal (1 subgoal):\n 1. \\<forall>d.\n       fst (control (step (next_state s execs) (next_action s execs)) d\n             (next_execs s execs d)) \\<rightharpoonup>\n       AS_precondition (step (next_state s execs) (next_action s execs)) d", "thus ?thesis"], ["proof (prove)\nusing this:\n  fst (control (step (next_state s execs) (next_action s execs)) ?d2\n        (next_execs s execs ?d2)) \\<rightharpoonup>\n  AS_precondition (step (next_state s execs) (next_action s execs)) ?d2\n\ngoal (1 subgoal):\n 1. \\<forall>d.\n       fst (control (step (next_state s execs) (next_action s execs)) d\n             (next_execs s execs d)) \\<rightharpoonup>\n       AS_precondition (step (next_state s execs) (next_action s execs)) d", "by auto"], ["proof (state)\nthis:\n  \\<forall>d.\n     fst (control (step (next_state s execs) (next_action s execs)) d\n           (next_execs s execs d)) \\<rightharpoonup>\n     AS_precondition (step (next_state s execs) (next_action s execs)) d\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>d.\n     fst (control (step (next_state s execs) (next_action s execs)) d\n           (next_execs s execs d)) \\<rightharpoonup>\n     AS_precondition (step (next_state s execs) (next_action s execs)) d\n\ngoal (1 subgoal):\n 1. precondition_ind (step (next_state s execs) (next_action s execs))\n     (next_execs s execs)", "from this inv_ns"], ["proof (chain)\npicking this:\n  \\<forall>d.\n     fst (control (step (next_state s execs) (next_action s execs)) d\n           (next_execs s execs d)) \\<rightharpoonup>\n     AS_precondition (step (next_state s execs) (next_action s execs)) d\n  invariant (step (next_state s execs) (next_action s execs))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>d.\n     fst (control (step (next_state s execs) (next_action s execs)) d\n           (next_execs s execs d)) \\<rightharpoonup>\n     AS_precondition (step (next_state s execs) (next_action s execs)) d\n  invariant (step (next_state s execs) (next_action s execs))\n\ngoal (1 subgoal):\n 1. precondition_ind (step (next_state s execs) (next_action s execs))\n     (next_execs s execs)", "unfolding precondition_ind_def B_def Let_def"], ["proof (prove)\nusing this:\n  \\<forall>d.\n     case fst (control (step (next_state s execs) (next_action s execs)) d\n                (next_execs s execs d)) of\n     None \\<Rightarrow> True\n     | Some a \\<Rightarrow>\n         AS_precondition (step (next_state s execs) (next_action s execs)) d\n          a\n  invariant (step (next_state s execs) (next_action s execs))\n\ngoal (1 subgoal):\n 1. invariant (step (next_state s execs) (next_action s execs)) \\<and>\n    (\\<forall>d.\n        case fst (control (step (next_state s execs) (next_action s execs))\n                   d (next_execs s execs d)) of\n        None \\<Rightarrow> True\n        | Some a \\<Rightarrow>\n            AS_precondition\n             (step (next_state s execs) (next_action s execs)) d a)", "by (auto)"], ["proof (state)\nthis:\n  precondition_ind (step (next_state s execs) (next_action s execs))\n   (next_execs s execs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  precondition_ind (step (next_state s execs) (next_action s execs))\n   (next_execs s execs)\n\ngoal (1 subgoal):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "from equal_ns_nsa realistic_na invariant_na s_sa IH[where sa=\"?ns\"]"], ["proof (chain)\npicking this:\n  strict_equal (Some (step (next_state s execs) (next_action s execs)))\n   (step (next_state s execs) (next_action s execs))\n  realistic_executions_ind (next_execs s execs)\n  precondition_ind (step (next_state s execs) (next_action s execs))\n   (next_execs s execs)\n  s = sa\n  strict_equal (Some (step (next_state s execs) (next_action s execs)))\n   (step (next_state s execs) (next_action s execs)) \\<and>\n  realistic_executions_ind (next_execs s execs) \\<and>\n  precondition_ind (step (next_state s execs) (next_action s execs))\n   (next_execs s execs) \\<longrightarrow>\n  strict_equal\n   (run n (Some (step (next_state s execs) (next_action s execs)))\n     (next_execs s execs))\n   (run_total n (step (next_state s execs) (next_action s execs))\n     (next_execs s execs))", "have equal_ns_nt: \"strict_equal (run n (Some ?ns) ?na) (run_total n (step (next_state sa execs) (next_action sa execs)) (next_execs sa execs))\""], ["proof (prove)\nusing this:\n  strict_equal (Some (step (next_state s execs) (next_action s execs)))\n   (step (next_state s execs) (next_action s execs))\n  realistic_executions_ind (next_execs s execs)\n  precondition_ind (step (next_state s execs) (next_action s execs))\n   (next_execs s execs)\n  s = sa\n  strict_equal (Some (step (next_state s execs) (next_action s execs)))\n   (step (next_state s execs) (next_action s execs)) \\<and>\n  realistic_executions_ind (next_execs s execs) \\<and>\n  precondition_ind (step (next_state s execs) (next_action s execs))\n   (next_execs s execs) \\<longrightarrow>\n  strict_equal\n   (run n (Some (step (next_state s execs) (next_action s execs)))\n     (next_execs s execs))\n   (run_total n (step (next_state s execs) (next_action s execs))\n     (next_execs s execs))\n\ngoal (1 subgoal):\n 1. strict_equal\n     (run n (Some (step (next_state s execs) (next_action s execs)))\n       (next_execs s execs))\n     (run_total n (step (next_state sa execs) (next_action sa execs))\n       (next_execs sa execs))", "by(auto)"], ["proof (state)\nthis:\n  strict_equal\n   (run n (Some (step (next_state s execs) (next_action s execs)))\n     (next_execs s execs))\n   (run_total n (step (next_state sa execs) (next_action sa execs))\n     (next_execs sa execs))\n\ngoal (1 subgoal):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>strict_equal (Some s) sa; realistic_executions_ind execs;\n   precondition_ind sa execs\\<rbrakk>\n  \\<Longrightarrow> strict_equal\n                     (run n\n                       (Some\n                         (step (next_state s execs) (next_action s execs)))\n                       (next_execs s execs))\n                     (run_total n\n                       (step (next_state sa execs) (next_action sa execs))\n                       (next_execs sa execs))\n\ngoal (1 subgoal):\n 1. \\<And>n execs s sa.\n       \\<lbrakk>\\<not> interrupt (Suc n);\n        \\<not> thread_empty (execs (current s));\n        precondition (next_state s execs) (next_action s execs);\n        \\<And>sa.\n           strict_equal\n            (Some (step (next_state s execs) (next_action s execs)))\n            sa \\<and>\n           realistic_executions_ind (next_execs s execs) \\<and>\n           precondition_ind sa (next_execs s execs) \\<longrightarrow>\n           strict_equal\n            (run n (Some (step (next_state s execs) (next_action s execs)))\n              (next_execs s execs))\n            (run_total n sa (next_execs s execs))\\<rbrakk>\n       \\<Longrightarrow> strict_equal (Some s) sa \\<and>\n                         realistic_executions_ind execs \\<and>\n                         precondition_ind sa execs \\<longrightarrow>\n                         strict_equal (run (Suc n) (Some s) execs)\n                          (run_total (Suc n) sa execs)", "from this current_s_sa thread_not_empty not_interrupt prec"], ["proof (chain)\npicking this:\n  \\<lbrakk>strict_equal (Some s) sa; realistic_executions_ind execs;\n   precondition_ind sa execs\\<rbrakk>\n  \\<Longrightarrow> strict_equal\n                     (run n\n                       (Some\n                         (step (next_state s execs) (next_action s execs)))\n                       (next_execs s execs))\n                     (run_total n\n                       (step (next_state sa execs) (next_action sa execs))\n                       (next_execs sa execs))\n  strict_equal (Some s) sa \\<longrightarrow> current s = current sa\n  \\<not> thread_empty (execs (current s))\n  \\<not> interrupt (Suc n)\n  precondition (next_state s execs) (next_action s execs)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>strict_equal (Some s) sa; realistic_executions_ind execs;\n   precondition_ind sa execs\\<rbrakk>\n  \\<Longrightarrow> strict_equal\n                     (run n\n                       (Some\n                         (step (next_state s execs) (next_action s execs)))\n                       (next_execs s execs))\n                     (run_total n\n                       (step (next_state sa execs) (next_action sa execs))\n                       (next_execs sa execs))\n  strict_equal (Some s) sa \\<longrightarrow> current s = current sa\n  \\<not> thread_empty (execs (current s))\n  \\<not> interrupt (Suc n)\n  precondition (next_state s execs) (next_action s execs)\n\ngoal (1 subgoal):\n 1. strict_equal (Some s) sa \\<and>\n    realistic_executions_ind execs \\<and>\n    precondition_ind sa execs \\<longrightarrow>\n    strict_equal (run (Suc n) (Some s) execs) (run_total (Suc n) sa execs)", "by auto"], ["proof (state)\nthis:\n  strict_equal (Some s) sa \\<and>\n  realistic_executions_ind execs \\<and>\n  precondition_ind sa execs \\<longrightarrow>\n  strict_equal (run (Suc n) (Some s) execs) (run_total (Suc n) sa execs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  strict_equal ms s \\<and>\n  realistic_executions_ind execs \\<and>\n  precondition_ind s execs \\<longrightarrow>\n  strict_equal (run n ms execs) (run_total n s execs)\n\ngoal (1 subgoal):\n 1. strict_equal (run n (Some s) execs) (run_total n s execs)", "}"], ["proof (state)\nthis:\n  strict_equal ?ms2 ?sa2 \\<and>\n  realistic_executions_ind ?execsa2 \\<and>\n  precondition_ind ?sa2 ?execsa2 \\<longrightarrow>\n  strict_equal (run ?na2 ?ms2 ?execsa2) (run_total ?na2 ?sa2 ?execsa2)\n\ngoal (1 subgoal):\n 1. strict_equal (run n (Some s) execs) (run_total n s execs)", "hence thm_inductive: \"\\<forall> m s execs n . strict_equal m s \\<and> realistic_executions_ind execs \\<and> precondition_ind s execs \\<longrightarrow> strict_equal (run n m execs) (run_total n s execs)\""], ["proof (prove)\nusing this:\n  strict_equal ?ms2 ?sa2 \\<and>\n  realistic_executions_ind ?execsa2 \\<and>\n  precondition_ind ?sa2 ?execsa2 \\<longrightarrow>\n  strict_equal (run ?na2 ?ms2 ?execsa2) (run_total ?na2 ?sa2 ?execsa2)\n\ngoal (1 subgoal):\n 1. \\<forall>m s execs n.\n       strict_equal m s \\<and>\n       realistic_executions_ind execs \\<and>\n       precondition_ind s execs \\<longrightarrow>\n       strict_equal (run n m execs) (run_total n s execs)", "by blast"], ["proof (state)\nthis:\n  \\<forall>m s execs n.\n     strict_equal m s \\<and>\n     realistic_executions_ind execs \\<and>\n     precondition_ind s execs \\<longrightarrow>\n     strict_equal (run n m execs) (run_total n s execs)\n\ngoal (1 subgoal):\n 1. strict_equal (run n (Some s) execs) (run_total n s execs)", "have 1: \"strict_equal (Some s) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_equal (Some s) s", "unfolding strict_equal_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. case Some s of None \\<Rightarrow> False | Some a' \\<Rightarrow> a' = s", "by simp"], ["proof (state)\nthis:\n  strict_equal (Some s) s\n\ngoal (1 subgoal):\n 1. strict_equal (run n (Some s) execs) (run_total n s execs)", "have 2: \"realistic_executions_ind execs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. realistic_executions_ind execs", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. realistic_executions_ind execs", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. realistic_executions_ind execs", "fix d"], ["proof (state)\ngoal (1 subgoal):\n 1. realistic_executions_ind execs", "have \"case execs d of [] \\<Rightarrow> True | aseq # aseqs \\<Rightarrow> realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. case execs d of [] \\<Rightarrow> True\n    | aseq # aseqs \\<Rightarrow>\n        realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "proof(cases \"execs d\",simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       execs d = a # list \\<Longrightarrow>\n       case execs d of [] \\<Rightarrow> True\n       | aseq # aseqs \\<Rightarrow>\n           realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "case (Cons aseq aseqs)"], ["proof (state)\nthis:\n  execs d = aseq # aseqs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       execs d = a # list \\<Longrightarrow>\n       case execs d of [] \\<Rightarrow> True\n       | aseq # aseqs \\<Rightarrow>\n           realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "from Cons realistic_exec[unfolded realistic_executions_def,THEN spec,where x=d]"], ["proof (chain)\npicking this:\n  execs d = aseq # aseqs\n  realistic_execution (execs d)", "have 0: \"length aseq \\<le> length aseq \\<and> aseq \\<in> AS_set \\<and> aseq = lastn (length aseq) aseq\""], ["proof (prove)\nusing this:\n  execs d = aseq # aseqs\n  realistic_execution (execs d)\n\ngoal (1 subgoal):\n 1. length aseq \\<le> length aseq \\<and>\n    aseq \\<in> AS_set \\<and> aseq = lastn (length aseq) aseq", "unfolding lastn_def realistic_execution_def"], ["proof (prove)\nusing this:\n  execs d = aseq # aseqs\n  set (execs d) \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. length aseq \\<le> length aseq \\<and>\n    aseq \\<in> AS_set \\<and> aseq = drop (length aseq - length aseq) aseq", "by auto"], ["proof (state)\nthis:\n  length aseq \\<le> length aseq \\<and>\n  aseq \\<in> AS_set \\<and> aseq = lastn (length aseq) aseq\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       execs d = a # list \\<Longrightarrow>\n       case execs d of [] \\<Rightarrow> True\n       | aseq # aseqs \\<Rightarrow>\n           realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "hence 1: \"realistic_AS_partial aseq\""], ["proof (prove)\nusing this:\n  length aseq \\<le> length aseq \\<and>\n  aseq \\<in> AS_set \\<and> aseq = lastn (length aseq) aseq\n\ngoal (1 subgoal):\n 1. realistic_AS_partial aseq", "unfolding realistic_AS_partial_def"], ["proof (prove)\nusing this:\n  length aseq \\<le> length aseq \\<and>\n  aseq \\<in> AS_set \\<and> aseq = lastn (length aseq) aseq\n\ngoal (1 subgoal):\n 1. \\<exists>n aseq'.\n       n \\<le> length aseq' \\<and>\n       aseq' \\<in> AS_set \\<and> aseq = lastn n aseq'", "by auto"], ["proof (state)\nthis:\n  realistic_AS_partial aseq\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       execs d = a # list \\<Longrightarrow>\n       case execs d of [] \\<Rightarrow> True\n       | aseq # aseqs \\<Rightarrow>\n           realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "from Cons realistic_exec[unfolded realistic_executions_def,THEN spec,where x=d]"], ["proof (chain)\npicking this:\n  execs d = aseq # aseqs\n  realistic_execution (execs d)", "have 2: \"set aseqs \\<subseteq> AS_set\""], ["proof (prove)\nusing this:\n  execs d = aseq # aseqs\n  realistic_execution (execs d)\n\ngoal (1 subgoal):\n 1. set aseqs \\<subseteq> AS_set", "unfolding realistic_execution_def"], ["proof (prove)\nusing this:\n  execs d = aseq # aseqs\n  set (execs d) \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. set aseqs \\<subseteq> AS_set", "by auto"], ["proof (state)\nthis:\n  set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       execs d = a # list \\<Longrightarrow>\n       case execs d of [] \\<Rightarrow> True\n       | aseq # aseqs \\<Rightarrow>\n           realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "from Cons 1 2"], ["proof (chain)\npicking this:\n  execs d = aseq # aseqs\n  realistic_AS_partial aseq\n  set aseqs \\<subseteq> AS_set", "show ?thesis"], ["proof (prove)\nusing this:\n  execs d = aseq # aseqs\n  realistic_AS_partial aseq\n  set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. case execs d of [] \\<Rightarrow> True\n    | aseq # aseqs \\<Rightarrow>\n        realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "by auto"], ["proof (state)\nthis:\n  case execs d of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  case execs d of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. realistic_executions_ind execs", "}"], ["proof (state)\nthis:\n  case execs ?d2 of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. realistic_executions_ind execs", "thus ?thesis"], ["proof (prove)\nusing this:\n  case execs ?d2 of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. realistic_executions_ind execs", "unfolding realistic_executions_ind_def"], ["proof (prove)\nusing this:\n  case execs ?d2 of [] \\<Rightarrow> True\n  | aseq # aseqs \\<Rightarrow>\n      realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. \\<forall>d.\n       case execs d of [] \\<Rightarrow> True\n       | aseq # aseqs \\<Rightarrow>\n           realistic_AS_partial aseq \\<and> set aseqs \\<subseteq> AS_set", "by auto"], ["proof (state)\nthis:\n  realistic_executions_ind execs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  realistic_executions_ind execs\n\ngoal (1 subgoal):\n 1. strict_equal (run n (Some s) execs) (run_total n s execs)", "have 3: \"precondition_ind s execs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. precondition_ind s execs", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. precondition_ind s execs", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. precondition_ind s execs", "fix d"], ["proof (state)\ngoal (1 subgoal):\n 1. precondition_ind s execs", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. precondition_ind s execs", "assume not_empty: \"fst (control s d (execs d)) \\<noteq> None\""], ["proof (state)\nthis:\n  fst (control s d (execs d)) \\<noteq> None\n\ngoal (1 subgoal):\n 1. precondition_ind s execs", "from not_empty realistic_exec[unfolded realistic_executions_def,THEN spec,where x=d]"], ["proof (chain)\npicking this:\n  fst (control s d (execs d)) \\<noteq> None\n  realistic_execution (execs d)", "have current_aseq_is_realistic: \"hd (execs d) \\<in> AS_set\""], ["proof (prove)\nusing this:\n  fst (control s d (execs d)) \\<noteq> None\n  realistic_execution (execs d)\n\ngoal (1 subgoal):\n 1. hd (execs d) \\<in> AS_set", "using control_spec[THEN spec,THEN spec,THEN spec,where x=\"execs d\" and x1=d and x2=s]"], ["proof (prove)\nusing this:\n  fst (control s d (execs d)) \\<noteq> None\n  realistic_execution (execs d)\n  case control s d (execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (execs d) \\<and> (a, aseqs') = (None, []) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (execs d))), tl (hd (execs d)) # tl (execs d)) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') = (Some (hd (hd (execs d))), execs d, s) \\<or>\n    (a, aseqs') = (None, tl (execs d))\n\ngoal (1 subgoal):\n 1. hd (execs d) \\<in> AS_set", "unfolding realistic_execution_def"], ["proof (prove)\nusing this:\n  fst (control s d (execs d)) \\<noteq> None\n  set (execs d) \\<subseteq> AS_set\n  case control s d (execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (execs d) \\<and> (a, aseqs') = (None, []) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (execs d))), tl (hd (execs d)) # tl (execs d)) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') = (Some (hd (hd (execs d))), execs d, s) \\<or>\n    (a, aseqs') = (None, tl (execs d))\n\ngoal (1 subgoal):\n 1. hd (execs d) \\<in> AS_set", "by(cases \"execs d\",auto)"], ["proof (state)\nthis:\n  hd (execs d) \\<in> AS_set\n\ngoal (1 subgoal):\n 1. precondition_ind s execs", "from not_empty current_aseq_is_realistic invariant AS_prec_first_action[THEN spec,THEN spec,THEN spec, where x2=s and x1=d and x=\"hd (execs d)\"]"], ["proof (chain)\npicking this:\n  fst (control s d (execs d)) \\<noteq> None\n  hd (execs d) \\<in> AS_set\n  invariant s\n  invariant s \\<and>\n  hd (execs d) \\<in> AS_set \\<and>\n  hd (execs d) \\<noteq> [] \\<longrightarrow>\n  AS_precondition s d (hd (hd (execs d)))", "have \"AS_precondition s d (the (fst (control s d (execs d))))\""], ["proof (prove)\nusing this:\n  fst (control s d (execs d)) \\<noteq> None\n  hd (execs d) \\<in> AS_set\n  invariant s\n  invariant s \\<and>\n  hd (execs d) \\<in> AS_set \\<and>\n  hd (execs d) \\<noteq> [] \\<longrightarrow>\n  AS_precondition s d (hd (hd (execs d)))\n\ngoal (1 subgoal):\n 1. AS_precondition s d (the (fst (control s d (execs d))))", "using control_spec[THEN spec,THEN spec,THEN spec,where x=\"execs d\" and x1=d and x2=s]"], ["proof (prove)\nusing this:\n  fst (control s d (execs d)) \\<noteq> None\n  hd (execs d) \\<in> AS_set\n  invariant s\n  invariant s \\<and>\n  hd (execs d) \\<in> AS_set \\<and>\n  hd (execs d) \\<noteq> [] \\<longrightarrow>\n  AS_precondition s d (hd (hd (execs d)))\n  case control s d (execs d) of\n  (a, aseqs', s') \\<Rightarrow>\n    thread_empty (execs d) \\<and> (a, aseqs') = (None, []) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    \\<not> aborting s' d (the a) \\<and>\n    \\<not> waiting s' d (the a) \\<and>\n    (a, aseqs') =\n    (Some (hd (hd (execs d))), tl (hd (execs d)) # tl (execs d)) \\<or>\n    execs d \\<noteq> [] \\<and>\n    hd (execs d) \\<noteq> [] \\<and>\n    waiting s' d (the a) \\<and>\n    (a, aseqs', s') = (Some (hd (hd (execs d))), execs d, s) \\<or>\n    (a, aseqs') = (None, tl (execs d))\n\ngoal (1 subgoal):\n 1. AS_precondition s d (the (fst (control s d (execs d))))", "by auto"], ["proof (state)\nthis:\n  AS_precondition s d (the (fst (control s d (execs d))))\n\ngoal (1 subgoal):\n 1. precondition_ind s execs", "}"], ["proof (state)\nthis:\n  fst (control s d (execs d)) \\<noteq> None \\<Longrightarrow>\n  AS_precondition s d (the (fst (control s d (execs d))))\n\ngoal (1 subgoal):\n 1. precondition_ind s execs", "hence \"fst (control s d (execs d)) \\<rightharpoonup> AS_precondition s d\""], ["proof (prove)\nusing this:\n  fst (control s d (execs d)) \\<noteq> None \\<Longrightarrow>\n  AS_precondition s d (the (fst (control s d (execs d))))\n\ngoal (1 subgoal):\n 1. fst (control s d (execs d)) \\<rightharpoonup> AS_precondition s d", "unfolding B_def"], ["proof (prove)\nusing this:\n  fst (control s d (execs d)) \\<noteq> None \\<Longrightarrow>\n  AS_precondition s d (the (fst (control s d (execs d))))\n\ngoal (1 subgoal):\n 1. case fst (control s d (execs d)) of None \\<Rightarrow> True\n    | Some a \\<Rightarrow> AS_precondition s d a", "by (cases \" fst (control s d (execs d))\",auto)"], ["proof (state)\nthis:\n  fst (control s d (execs d)) \\<rightharpoonup> AS_precondition s d\n\ngoal (1 subgoal):\n 1. precondition_ind s execs", "}"], ["proof (state)\nthis:\n  fst (control s ?d2 (execs ?d2)) \\<rightharpoonup> AS_precondition s ?d2\n\ngoal (1 subgoal):\n 1. precondition_ind s execs", "from this invariant"], ["proof (chain)\npicking this:\n  fst (control s ?d2 (execs ?d2)) \\<rightharpoonup> AS_precondition s ?d2\n  invariant s", "show ?thesis"], ["proof (prove)\nusing this:\n  fst (control s ?d2 (execs ?d2)) \\<rightharpoonup> AS_precondition s ?d2\n  invariant s\n\ngoal (1 subgoal):\n 1. precondition_ind s execs", "unfolding precondition_ind_def"], ["proof (prove)\nusing this:\n  fst (control s ?d2 (execs ?d2)) \\<rightharpoonup> AS_precondition s ?d2\n  invariant s\n\ngoal (1 subgoal):\n 1. invariant s \\<and>\n    (\\<forall>d.\n        fst (control s d (execs d)) \\<rightharpoonup> AS_precondition s d)", "by auto"], ["proof (state)\nthis:\n  precondition_ind s execs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  precondition_ind s execs\n\ngoal (1 subgoal):\n 1. strict_equal (run n (Some s) execs) (run_total n s execs)", "from thm_inductive 1 2 3"], ["proof (chain)\npicking this:\n  \\<forall>m s execs n.\n     strict_equal m s \\<and>\n     realistic_executions_ind execs \\<and>\n     precondition_ind s execs \\<longrightarrow>\n     strict_equal (run n m execs) (run_total n s execs)\n  strict_equal (Some s) s\n  realistic_executions_ind execs\n  precondition_ind s execs", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>m s execs n.\n     strict_equal m s \\<and>\n     realistic_executions_ind execs \\<and>\n     precondition_ind s execs \\<longrightarrow>\n     strict_equal (run n m execs) (run_total n s execs)\n  strict_equal (Some s) s\n  realistic_executions_ind execs\n  precondition_ind s execs\n\ngoal (1 subgoal):\n 1. strict_equal (run n (Some s) execs) (run_total n s execs)", "by auto"], ["proof (state)\nthis:\n  strict_equal (run n (Some s) execs) (run_total n s execs)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Theorem unwinding\\_implies\\_isecure gives security for all realistic executions.\n  For unrealistic executions, it holds vacuously and therefore does not tell us anything.\n  In order to prove security for this refinement (i.e., for function run\\_total), we have to prove that purging yields realistic runs.\n\\<close>"], ["", "lemma realistic_purge:\n  shows \"\\<forall> execs d . realistic_executions execs \\<longrightarrow> realistic_executions (purge execs d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>execs d.\n       realistic_executions execs \\<longrightarrow>\n       realistic_executions (purge execs d)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>execs d.\n       realistic_executions execs \\<longrightarrow>\n       realistic_executions (purge execs d)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>execs d.\n       realistic_executions execs \\<longrightarrow>\n       realistic_executions (purge execs d)", "fix execs d"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>execs d.\n       realistic_executions execs \\<longrightarrow>\n       realistic_executions (purge execs d)", "assume \"realistic_executions execs\""], ["proof (state)\nthis:\n  realistic_executions execs\n\ngoal (1 subgoal):\n 1. \\<forall>execs d.\n       realistic_executions execs \\<longrightarrow>\n       realistic_executions (purge execs d)", "hence \"realistic_executions (purge execs d)\""], ["proof (prove)\nusing this:\n  realistic_executions execs\n\ngoal (1 subgoal):\n 1. realistic_executions (purge execs d)", "using someI[where P=realistic_execution and x=\"execs d\"]"], ["proof (prove)\nusing this:\n  realistic_executions execs\n  realistic_execution (execs d) \\<Longrightarrow>\n  realistic_execution (Eps realistic_execution)\n\ngoal (1 subgoal):\n 1. realistic_executions (purge execs d)", "unfolding realistic_executions_def purge_def"], ["proof (prove)\nusing this:\n  \\<forall>d. realistic_execution (execs d)\n  realistic_execution (execs d) \\<Longrightarrow>\n  realistic_execution (Eps realistic_execution)\n\ngoal (1 subgoal):\n 1. \\<forall>da.\n       realistic_execution\n        (if unrelated da d then Eps realistic_execution else execs da)", "by(simp)"], ["proof (state)\nthis:\n  realistic_executions (purge execs d)\n\ngoal (1 subgoal):\n 1. \\<forall>execs d.\n       realistic_executions execs \\<longrightarrow>\n       realistic_executions (purge execs d)", "}"], ["proof (state)\nthis:\n  realistic_executions ?execs2 \\<Longrightarrow>\n  realistic_executions (purge ?execs2 ?d2)\n\ngoal (1 subgoal):\n 1. \\<forall>execs d.\n       realistic_executions execs \\<longrightarrow>\n       realistic_executions (purge execs d)", "thus ?thesis"], ["proof (prove)\nusing this:\n  realistic_executions ?execs2 \\<Longrightarrow>\n  realistic_executions (purge ?execs2 ?d2)\n\ngoal (1 subgoal):\n 1. \\<forall>execs d.\n       realistic_executions execs \\<longrightarrow>\n       realistic_executions (purge execs d)", "by auto"], ["proof (state)\nthis:\n  \\<forall>execs d.\n     realistic_executions execs \\<longrightarrow>\n     realistic_executions (purge execs d)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma remove_gateway_comm_subset:\nshows \"set (remove_gateway_communications d exec) \\<subseteq> set exec \\<union> {[]}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (remove_gateway_communications d exec)\n    \\<subseteq> set exec \\<union> {[]}", "by(induct exec,auto)"], ["", "lemma realistic_ipurge_l:\n  shows \"\\<forall> execs d . realistic_executions execs \\<longrightarrow> realistic_executions (ipurge_l execs d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>execs d.\n       realistic_executions execs \\<longrightarrow>\n       realistic_executions (ipurge_l execs d)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>execs d.\n       realistic_executions execs \\<longrightarrow>\n       realistic_executions (ipurge_l execs d)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>execs d.\n       realistic_executions execs \\<longrightarrow>\n       realistic_executions (ipurge_l execs d)", "fix execs d"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>execs d.\n       realistic_executions execs \\<longrightarrow>\n       realistic_executions (ipurge_l execs d)", "assume 1: \"realistic_executions execs\""], ["proof (state)\nthis:\n  realistic_executions execs\n\ngoal (1 subgoal):\n 1. \\<forall>execs d.\n       realistic_executions execs \\<longrightarrow>\n       realistic_executions (ipurge_l execs d)", "from empty_in_AS_set remove_gateway_comm_subset[where d=d and exec=\"execs d\"] 1"], ["proof (chain)\npicking this:\n  [] \\<in> AS_set\n  set (remove_gateway_communications d (execs d))\n  \\<subseteq> set (execs d) \\<union> {[]}\n  realistic_executions execs", "have \"realistic_executions (ipurge_l execs d)\""], ["proof (prove)\nusing this:\n  [] \\<in> AS_set\n  set (remove_gateway_communications d (execs d))\n  \\<subseteq> set (execs d) \\<union> {[]}\n  realistic_executions execs\n\ngoal (1 subgoal):\n 1. realistic_executions (ipurge_l execs d)", "unfolding realistic_execution_def realistic_executions_def ipurge_l_def"], ["proof (prove)\nusing this:\n  [] \\<in> AS_set\n  set (remove_gateway_communications d (execs d))\n  \\<subseteq> set (execs d) \\<union> {[]}\n  \\<forall>d. set (execs d) \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. \\<forall>da.\n       set (if intermediary da d then []\n            else if da = d then remove_gateway_communications d (execs d)\n                 else execs da)\n       \\<subseteq> AS_set", "by(auto)"], ["proof (state)\nthis:\n  realistic_executions (ipurge_l execs d)\n\ngoal (1 subgoal):\n 1. \\<forall>execs d.\n       realistic_executions execs \\<longrightarrow>\n       realistic_executions (ipurge_l execs d)", "}"], ["proof (state)\nthis:\n  realistic_executions ?execs2 \\<Longrightarrow>\n  realistic_executions (ipurge_l ?execs2 ?d2)\n\ngoal (1 subgoal):\n 1. \\<forall>execs d.\n       realistic_executions execs \\<longrightarrow>\n       realistic_executions (ipurge_l execs d)", "thus ?thesis"], ["proof (prove)\nusing this:\n  realistic_executions ?execs2 \\<Longrightarrow>\n  realistic_executions (ipurge_l ?execs2 ?d2)\n\ngoal (1 subgoal):\n 1. \\<forall>execs d.\n       realistic_executions execs \\<longrightarrow>\n       realistic_executions (ipurge_l execs d)", "by auto"], ["proof (state)\nthis:\n  \\<forall>execs d.\n     realistic_executions execs \\<longrightarrow>\n     realistic_executions (ipurge_l execs d)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma realistic_ipurge_r:\n  shows \"\\<forall> execs d . realistic_executions execs \\<longrightarrow> realistic_executions (ipurge_r execs d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>execs d.\n       realistic_executions execs \\<longrightarrow>\n       realistic_executions (ipurge_r execs d)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>execs d.\n       realistic_executions execs \\<longrightarrow>\n       realistic_executions (ipurge_r execs d)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>execs d.\n       realistic_executions execs \\<longrightarrow>\n       realistic_executions (ipurge_r execs d)", "fix execs d"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>execs d.\n       realistic_executions execs \\<longrightarrow>\n       realistic_executions (ipurge_r execs d)", "assume 1: \"realistic_executions execs\""], ["proof (state)\nthis:\n  realistic_executions execs\n\ngoal (1 subgoal):\n 1. \\<forall>execs d.\n       realistic_executions execs \\<longrightarrow>\n       realistic_executions (ipurge_r execs d)", "from empty_in_AS_set remove_gateway_comm_subset[where d=d and exec=\"execs d\"] 1"], ["proof (chain)\npicking this:\n  [] \\<in> AS_set\n  set (remove_gateway_communications d (execs d))\n  \\<subseteq> set (execs d) \\<union> {[]}\n  realistic_executions execs", "have \"realistic_executions (ipurge_r execs d)\""], ["proof (prove)\nusing this:\n  [] \\<in> AS_set\n  set (remove_gateway_communications d (execs d))\n  \\<subseteq> set (execs d) \\<union> {[]}\n  realistic_executions execs\n\ngoal (1 subgoal):\n 1. realistic_executions (ipurge_r execs d)", "using someI[where P=\"\\<lambda> x . realistic_execution x\" and x=\"execs d\"]"], ["proof (prove)\nusing this:\n  [] \\<in> AS_set\n  set (remove_gateway_communications d (execs d))\n  \\<subseteq> set (execs d) \\<union> {[]}\n  realistic_executions execs\n  realistic_execution (execs d) \\<Longrightarrow>\n  realistic_execution (SOME x. realistic_execution x)\n\ngoal (1 subgoal):\n 1. realistic_executions (ipurge_r execs d)", "unfolding realistic_execution_def realistic_executions_def ipurge_r_def"], ["proof (prove)\nusing this:\n  [] \\<in> AS_set\n  set (remove_gateway_communications d (execs d))\n  \\<subseteq> set (execs d) \\<union> {[]}\n  \\<forall>d. set (execs d) \\<subseteq> AS_set\n  set (execs d) \\<subseteq> AS_set \\<Longrightarrow>\n  set (SOME x. set x \\<subseteq> AS_set) \\<subseteq> AS_set\n\ngoal (1 subgoal):\n 1. \\<forall>da.\n       set (if intermediary da d then []\n            else if ind_source da d\n                 then SOME alpha. set alpha \\<subseteq> AS_set\n                 else if da = d\n                      then remove_gateway_communications d (execs d)\n                      else execs da)\n       \\<subseteq> AS_set", "by(auto)"], ["proof (state)\nthis:\n  realistic_executions (ipurge_r execs d)\n\ngoal (1 subgoal):\n 1. \\<forall>execs d.\n       realistic_executions execs \\<longrightarrow>\n       realistic_executions (ipurge_r execs d)", "}"], ["proof (state)\nthis:\n  realistic_executions ?execs2 \\<Longrightarrow>\n  realistic_executions (ipurge_r ?execs2 ?d2)\n\ngoal (1 subgoal):\n 1. \\<forall>execs d.\n       realistic_executions execs \\<longrightarrow>\n       realistic_executions (ipurge_r execs d)", "thus ?thesis"], ["proof (prove)\nusing this:\n  realistic_executions ?execs2 \\<Longrightarrow>\n  realistic_executions (ipurge_r ?execs2 ?d2)\n\ngoal (1 subgoal):\n 1. \\<forall>execs d.\n       realistic_executions execs \\<longrightarrow>\n       realistic_executions (ipurge_r execs d)", "by auto"], ["proof (state)\nthis:\n  \\<forall>execs d.\n     realistic_executions execs \\<longrightarrow>\n     realistic_executions (ipurge_r execs d)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  We now have sufficient lemma's to prove security for run\\_total.\n  The definition of security is similar to that in Section~\\ref{sec:sep_kernel}.\n  It now assumes that the executions are realistic and concerns function run\\_total instead of function run.\n\\<close>"], ["", "definition NI_unrelated_total::bool\nwhere \"NI_unrelated_total\n  \\<equiv> \\<forall> execs a n . realistic_executions execs \\<longrightarrow>\n                     (let s_f = run_total n s0 execs in\n                       output_f s_f a = output_f (run_total n s0 (purge execs (current s_f))) a\n                        \\<and> current s_f = current (run_total n s0 (purge execs (current s_f))))\""], ["", "definition NI_indirect_sources_total::bool\nwhere \"NI_indirect_sources_total\n  \\<equiv> \\<forall> execs a n. realistic_executions execs \\<longrightarrow>\n                    (let s_f = run_total n s0 execs in\n                      output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n                      output_f (run_total n s0 (ipurge_r execs (current s_f))) a)\""], ["", "definition isecure_total::bool\nwhere \"isecure_total \\<equiv> NI_unrelated_total \\<and> NI_indirect_sources_total\""], ["", "theorem unwinding_implies_isecure_total:\nshows isecure_total"], ["proof (prove)\ngoal (1 subgoal):\n 1. isecure_total", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. isecure_total", "from unwinding_implies_isecure"], ["proof (chain)\npicking this:\n  isecure", "have secure_partial: \"NI_unrelated\""], ["proof (prove)\nusing this:\n  isecure\n\ngoal (1 subgoal):\n 1. NI_unrelated", "unfolding isecure_def"], ["proof (prove)\nusing this:\n  NI_indirect_sources \\<and> NI_unrelated\n\ngoal (1 subgoal):\n 1. NI_unrelated", "by blast"], ["proof (state)\nthis:\n  NI_unrelated\n\ngoal (1 subgoal):\n 1. isecure_total", "from unwinding_implies_isecure"], ["proof (chain)\npicking this:\n  isecure", "have isecure1_partial: \"NI_indirect_sources\""], ["proof (prove)\nusing this:\n  isecure\n\ngoal (1 subgoal):\n 1. NI_indirect_sources", "unfolding isecure_def"], ["proof (prove)\nusing this:\n  NI_indirect_sources \\<and> NI_unrelated\n\ngoal (1 subgoal):\n 1. NI_indirect_sources", "by blast"], ["proof (state)\nthis:\n  NI_indirect_sources\n\ngoal (1 subgoal):\n 1. isecure_total", "have NI_unrelated_total: NI_unrelated_total"], ["proof (prove)\ngoal (1 subgoal):\n 1. NI_unrelated_total", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. NI_unrelated_total", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. NI_unrelated_total", "fix execs a n"], ["proof (state)\ngoal (1 subgoal):\n 1. NI_unrelated_total", "assume realistic: \"realistic_executions execs\""], ["proof (state)\nthis:\n  realistic_executions execs\n\ngoal (1 subgoal):\n 1. NI_unrelated_total", "from invariant_s0 realistic run_total_equals_run[where n=n and s=s0 and execs=execs]"], ["proof (chain)\npicking this:\n  invariant s0\n  realistic_executions execs\n  \\<lbrakk>realistic_executions execs; invariant s0\\<rbrakk>\n  \\<Longrightarrow> strict_equal (run n (Some s0) execs)\n                     (run_total n s0 execs)", "have 1: \"strict_equal (run n (Some s0) execs) (run_total n s0 execs)\""], ["proof (prove)\nusing this:\n  invariant s0\n  realistic_executions execs\n  \\<lbrakk>realistic_executions execs; invariant s0\\<rbrakk>\n  \\<Longrightarrow> strict_equal (run n (Some s0) execs)\n                     (run_total n s0 execs)\n\ngoal (1 subgoal):\n 1. strict_equal (run n (Some s0) execs) (run_total n s0 execs)", "by auto"], ["proof (state)\nthis:\n  strict_equal (run n (Some s0) execs) (run_total n s0 execs)\n\ngoal (1 subgoal):\n 1. NI_unrelated_total", "have \"let s_f = run_total n s0 execs in output_f s_f a = output_f (run_total n s0 (purge execs (current s_f))) a \\<and> current s_f = current (run_total n s0 (purge execs (current s_f)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. let s_f = run_total n s0 execs\n    in output_f s_f a =\n       output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n       current s_f = current (run_total n s0 (purge execs (current s_f)))", "proof (cases \"run n (Some s0) execs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. run n (Some s0) execs = None \\<Longrightarrow>\n    let s_f = run_total n s0 execs\n    in output_f s_f a =\n       output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n       current s_f = current (run_total n s0 (purge execs (current s_f)))\n 2. \\<And>aa.\n       run n (Some s0) execs = Some aa \\<Longrightarrow>\n       let s_f = run_total n s0 execs\n       in output_f s_f a =\n          output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n          current s_f = current (run_total n s0 (purge execs (current s_f)))", "case None"], ["proof (state)\nthis:\n  run n (Some s0) execs = None\n\ngoal (2 subgoals):\n 1. run n (Some s0) execs = None \\<Longrightarrow>\n    let s_f = run_total n s0 execs\n    in output_f s_f a =\n       output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n       current s_f = current (run_total n s0 (purge execs (current s_f)))\n 2. \\<And>aa.\n       run n (Some s0) execs = Some aa \\<Longrightarrow>\n       let s_f = run_total n s0 execs\n       in output_f s_f a =\n          output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n          current s_f = current (run_total n s0 (purge execs (current s_f)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  run n (Some s0) execs = None\n\ngoal (1 subgoal):\n 1. let s_f = run_total n s0 execs\n    in output_f s_f a =\n       output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n       current s_f = current (run_total n s0 (purge execs (current s_f)))", "using 1"], ["proof (prove)\nusing this:\n  run n (Some s0) execs = None\n  strict_equal (run n (Some s0) execs) (run_total n s0 execs)\n\ngoal (1 subgoal):\n 1. let s_f = run_total n s0 execs\n    in output_f s_f a =\n       output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n       current s_f = current (run_total n s0 (purge execs (current s_f)))", "unfolding NI_unrelated_total_def strict_equal_def"], ["proof (prove)\nusing this:\n  run n (Some s0) execs = None\n  case run n (Some s0) execs of None \\<Rightarrow> False\n  | Some a' \\<Rightarrow> a' = run_total n s0 execs\n\ngoal (1 subgoal):\n 1. let s_f = run_total n s0 execs\n    in output_f s_f a =\n       output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n       current s_f = current (run_total n s0 (purge execs (current s_f)))", "by auto"], ["proof (state)\nthis:\n  let s_f = run_total n s0 execs\n  in output_f s_f a =\n     output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n     current s_f = current (run_total n s0 (purge execs (current s_f)))\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       run n (Some s0) execs = Some aa \\<Longrightarrow>\n       let s_f = run_total n s0 execs\n       in output_f s_f a =\n          output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n          current s_f = current (run_total n s0 (purge execs (current s_f)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       run n (Some s0) execs = Some aa \\<Longrightarrow>\n       let s_f = run_total n s0 execs\n       in output_f s_f a =\n          output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n          current s_f = current (run_total n s0 (purge execs (current s_f)))", "case (Some s_f)"], ["proof (state)\nthis:\n  run n (Some s0) execs = Some s_f\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       run n (Some s0) execs = Some aa \\<Longrightarrow>\n       let s_f = run_total n s0 execs\n       in output_f s_f a =\n          output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n          current s_f = current (run_total n s0 (purge execs (current s_f)))", "from realistic_purge invariant_s0 realistic run_total_equals_run[where n=n and s=s0 and execs=\"purge execs (current s_f)\"]"], ["proof (chain)\npicking this:\n  \\<forall>execs d.\n     realistic_executions execs \\<longrightarrow>\n     realistic_executions (purge execs d)\n  invariant s0\n  realistic_executions execs\n  \\<lbrakk>realistic_executions (purge execs (current s_f));\n   invariant s0\\<rbrakk>\n  \\<Longrightarrow> strict_equal\n                     (run n (Some s0) (purge execs (current s_f)))\n                     (run_total n s0 (purge execs (current s_f)))", "have 2: \"strict_equal (run n (Some s0) (purge execs (current s_f))) (run_total n s0 (purge execs (current s_f)))\""], ["proof (prove)\nusing this:\n  \\<forall>execs d.\n     realistic_executions execs \\<longrightarrow>\n     realistic_executions (purge execs d)\n  invariant s0\n  realistic_executions execs\n  \\<lbrakk>realistic_executions (purge execs (current s_f));\n   invariant s0\\<rbrakk>\n  \\<Longrightarrow> strict_equal\n                     (run n (Some s0) (purge execs (current s_f)))\n                     (run_total n s0 (purge execs (current s_f)))\n\ngoal (1 subgoal):\n 1. strict_equal (run n (Some s0) (purge execs (current s_f)))\n     (run_total n s0 (purge execs (current s_f)))", "by auto"], ["proof (state)\nthis:\n  strict_equal (run n (Some s0) (purge execs (current s_f)))\n   (run_total n s0 (purge execs (current s_f)))\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       run n (Some s0) execs = Some aa \\<Longrightarrow>\n       let s_f = run_total n s0 execs\n       in output_f s_f a =\n          output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n          current s_f = current (run_total n s0 (purge execs (current s_f)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. let s_f = run_total n s0 execs\n    in output_f s_f a =\n       output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n       current s_f = current (run_total n s0 (purge execs (current s_f)))", "proof(cases \"run n (Some s0) (purge execs (current s_f))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. run n (Some s0) (purge execs (current s_f)) = None \\<Longrightarrow>\n    let s_f = run_total n s0 execs\n    in output_f s_f a =\n       output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n       current s_f = current (run_total n s0 (purge execs (current s_f)))\n 2. \\<And>aa.\n       run n (Some s0) (purge execs (current s_f)) =\n       Some aa \\<Longrightarrow>\n       let s_f = run_total n s0 execs\n       in output_f s_f a =\n          output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n          current s_f = current (run_total n s0 (purge execs (current s_f)))", "case None"], ["proof (state)\nthis:\n  run n (Some s0) (purge execs (current s_f)) = None\n\ngoal (2 subgoals):\n 1. run n (Some s0) (purge execs (current s_f)) = None \\<Longrightarrow>\n    let s_f = run_total n s0 execs\n    in output_f s_f a =\n       output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n       current s_f = current (run_total n s0 (purge execs (current s_f)))\n 2. \\<And>aa.\n       run n (Some s0) (purge execs (current s_f)) =\n       Some aa \\<Longrightarrow>\n       let s_f = run_total n s0 execs\n       in output_f s_f a =\n          output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n          current s_f = current (run_total n s0 (purge execs (current s_f)))", "from 2 None"], ["proof (chain)\npicking this:\n  strict_equal (run n (Some s0) (purge execs (current s_f)))\n   (run_total n s0 (purge execs (current s_f)))\n  run n (Some s0) (purge execs (current s_f)) = None", "show ?thesis"], ["proof (prove)\nusing this:\n  strict_equal (run n (Some s0) (purge execs (current s_f)))\n   (run_total n s0 (purge execs (current s_f)))\n  run n (Some s0) (purge execs (current s_f)) = None\n\ngoal (1 subgoal):\n 1. let s_f = run_total n s0 execs\n    in output_f s_f a =\n       output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n       current s_f = current (run_total n s0 (purge execs (current s_f)))", "using 2"], ["proof (prove)\nusing this:\n  strict_equal (run n (Some s0) (purge execs (current s_f)))\n   (run_total n s0 (purge execs (current s_f)))\n  run n (Some s0) (purge execs (current s_f)) = None\n  strict_equal (run n (Some s0) (purge execs (current s_f)))\n   (run_total n s0 (purge execs (current s_f)))\n\ngoal (1 subgoal):\n 1. let s_f = run_total n s0 execs\n    in output_f s_f a =\n       output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n       current s_f = current (run_total n s0 (purge execs (current s_f)))", "unfolding NI_unrelated_total_def strict_equal_def"], ["proof (prove)\nusing this:\n  case run n (Some s0) (purge execs (current s_f)) of\n  None \\<Rightarrow> False\n  | Some a' \\<Rightarrow> a' = run_total n s0 (purge execs (current s_f))\n  run n (Some s0) (purge execs (current s_f)) = None\n  case run n (Some s0) (purge execs (current s_f)) of\n  None \\<Rightarrow> False\n  | Some a' \\<Rightarrow> a' = run_total n s0 (purge execs (current s_f))\n\ngoal (1 subgoal):\n 1. let s_f = run_total n s0 execs\n    in output_f s_f a =\n       output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n       current s_f = current (run_total n s0 (purge execs (current s_f)))", "by auto"], ["proof (state)\nthis:\n  let s_f = run_total n s0 execs\n  in output_f s_f a =\n     output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n     current s_f = current (run_total n s0 (purge execs (current s_f)))\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       run n (Some s0) (purge execs (current s_f)) =\n       Some aa \\<Longrightarrow>\n       let s_f = run_total n s0 execs\n       in output_f s_f a =\n          output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n          current s_f = current (run_total n s0 (purge execs (current s_f)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       run n (Some s0) (purge execs (current s_f)) =\n       Some aa \\<Longrightarrow>\n       let s_f = run_total n s0 execs\n       in output_f s_f a =\n          output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n          current s_f = current (run_total n s0 (purge execs (current s_f)))", "case (Some s_f2)"], ["proof (state)\nthis:\n  run n (Some s0) (purge execs (current s_f)) = Some s_f2\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       run n (Some s0) (purge execs (current s_f)) =\n       Some aa \\<Longrightarrow>\n       let s_f = run_total n s0 execs\n       in output_f s_f a =\n          output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n          current s_f = current (run_total n s0 (purge execs (current s_f)))", "from \\<open>run n (Some s0) execs = Some s_f\\<close> Some 1 2  secure_partial[unfolded NI_unrelated_def,THEN spec,THEN spec,THEN spec,where x=n and x2=execs]"], ["proof (chain)\npicking this:\n  run n (Some s0) execs = Some s_f\n  run n (Some s0) (purge execs (current s_f)) = Some s_f2\n  strict_equal (run n (Some s0) execs) (run_total n s0 execs)\n  strict_equal (run n (Some s0) (purge execs (current s_f)))\n   (run_total n s0 (purge execs (current s_f)))\n  run n (Some s0) execs \\<rightharpoonup>\n  (\\<lambda>s_f.\n      run n (Some s0) (purge execs (current s_f)) \\<rightharpoonup>\n      (\\<lambda>s_f2.\n          output_f s_f ?x1 = output_f s_f2 ?x1 \\<and>\n          current s_f = current s_f2))", "show ?thesis"], ["proof (prove)\nusing this:\n  run n (Some s0) execs = Some s_f\n  run n (Some s0) (purge execs (current s_f)) = Some s_f2\n  strict_equal (run n (Some s0) execs) (run_total n s0 execs)\n  strict_equal (run n (Some s0) (purge execs (current s_f)))\n   (run_total n s0 (purge execs (current s_f)))\n  run n (Some s0) execs \\<rightharpoonup>\n  (\\<lambda>s_f.\n      run n (Some s0) (purge execs (current s_f)) \\<rightharpoonup>\n      (\\<lambda>s_f2.\n          output_f s_f ?x1 = output_f s_f2 ?x1 \\<and>\n          current s_f = current s_f2))\n\ngoal (1 subgoal):\n 1. let s_f = run_total n s0 execs\n    in output_f s_f a =\n       output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n       current s_f = current (run_total n s0 (purge execs (current s_f)))", "unfolding strict_equal_def NI_unrelated_def"], ["proof (prove)\nusing this:\n  run n (Some s0) execs = Some s_f\n  run n (Some s0) (purge execs (current s_f)) = Some s_f2\n  case run n (Some s0) execs of None \\<Rightarrow> False\n  | Some a' \\<Rightarrow> a' = run_total n s0 execs\n  case run n (Some s0) (purge execs (current s_f)) of\n  None \\<Rightarrow> False\n  | Some a' \\<Rightarrow> a' = run_total n s0 (purge execs (current s_f))\n  run n (Some s0) execs \\<rightharpoonup>\n  (\\<lambda>s_f.\n      run n (Some s0) (purge execs (current s_f)) \\<rightharpoonup>\n      (\\<lambda>s_f2.\n          output_f s_f ?x1 = output_f s_f2 ?x1 \\<and>\n          current s_f = current s_f2))\n\ngoal (1 subgoal):\n 1. let s_f = run_total n s0 execs\n    in output_f s_f a =\n       output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n       current s_f = current (run_total n s0 (purge execs (current s_f)))", "by(simp add: Let_def B_def B2_def)"], ["proof (state)\nthis:\n  let s_f = run_total n s0 execs\n  in output_f s_f a =\n     output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n     current s_f = current (run_total n s0 (purge execs (current s_f)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  let s_f = run_total n s0 execs\n  in output_f s_f a =\n     output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n     current s_f = current (run_total n s0 (purge execs (current s_f)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  let s_f = run_total n s0 execs\n  in output_f s_f a =\n     output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n     current s_f = current (run_total n s0 (purge execs (current s_f)))\n\ngoal (1 subgoal):\n 1. NI_unrelated_total", "}"], ["proof (state)\nthis:\n  realistic_executions ?execs2 \\<Longrightarrow>\n  let s_f = run_total ?n2 s0 ?execs2\n  in output_f s_f ?a2 =\n     output_f (run_total ?n2 s0 (purge ?execs2 (current s_f))) ?a2 \\<and>\n     current s_f = current (run_total ?n2 s0 (purge ?execs2 (current s_f)))\n\ngoal (1 subgoal):\n 1. NI_unrelated_total", "thus ?thesis"], ["proof (prove)\nusing this:\n  realistic_executions ?execs2 \\<Longrightarrow>\n  let s_f = run_total ?n2 s0 ?execs2\n  in output_f s_f ?a2 =\n     output_f (run_total ?n2 s0 (purge ?execs2 (current s_f))) ?a2 \\<and>\n     current s_f = current (run_total ?n2 s0 (purge ?execs2 (current s_f)))\n\ngoal (1 subgoal):\n 1. NI_unrelated_total", "unfolding NI_unrelated_total_def"], ["proof (prove)\nusing this:\n  realistic_executions ?execs2 \\<Longrightarrow>\n  let s_f = run_total ?n2 s0 ?execs2\n  in output_f s_f ?a2 =\n     output_f (run_total ?n2 s0 (purge ?execs2 (current s_f))) ?a2 \\<and>\n     current s_f = current (run_total ?n2 s0 (purge ?execs2 (current s_f)))\n\ngoal (1 subgoal):\n 1. \\<forall>execs a n.\n       realistic_executions execs \\<longrightarrow>\n       (let s_f = run_total n s0 execs\n        in output_f s_f a =\n           output_f (run_total n s0 (purge execs (current s_f))) a \\<and>\n           current s_f =\n           current (run_total n s0 (purge execs (current s_f))))", "by auto"], ["proof (state)\nthis:\n  NI_unrelated_total\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  NI_unrelated_total\n\ngoal (1 subgoal):\n 1. isecure_total", "have NI_indirect_sources_total: NI_indirect_sources_total"], ["proof (prove)\ngoal (1 subgoal):\n 1. NI_indirect_sources_total", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. NI_indirect_sources_total", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. NI_indirect_sources_total", "fix execs a n"], ["proof (state)\ngoal (1 subgoal):\n 1. NI_indirect_sources_total", "assume realistic: \"realistic_executions execs\""], ["proof (state)\nthis:\n  realistic_executions execs\n\ngoal (1 subgoal):\n 1. NI_indirect_sources_total", "from invariant_s0 realistic run_total_equals_run[where n=n and s=s0 and execs=execs]"], ["proof (chain)\npicking this:\n  invariant s0\n  realistic_executions execs\n  \\<lbrakk>realistic_executions execs; invariant s0\\<rbrakk>\n  \\<Longrightarrow> strict_equal (run n (Some s0) execs)\n                     (run_total n s0 execs)", "have 1: \"strict_equal (run n (Some s0) execs) (run_total n s0 execs)\""], ["proof (prove)\nusing this:\n  invariant s0\n  realistic_executions execs\n  \\<lbrakk>realistic_executions execs; invariant s0\\<rbrakk>\n  \\<Longrightarrow> strict_equal (run n (Some s0) execs)\n                     (run_total n s0 execs)\n\ngoal (1 subgoal):\n 1. strict_equal (run n (Some s0) execs) (run_total n s0 execs)", "by auto"], ["proof (state)\nthis:\n  strict_equal (run n (Some s0) execs) (run_total n s0 execs)\n\ngoal (1 subgoal):\n 1. NI_indirect_sources_total", "have \"let s_f = run_total n s0 execs in output_f (run_total n s0 (ipurge_l execs (current s_f))) a = output_f (run_total n s0 (ipurge_r execs (current s_f))) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. let s_f = run_total n s0 execs\n    in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n       output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "proof (cases \"run n (Some s0) execs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. run n (Some s0) execs = None \\<Longrightarrow>\n    let s_f = run_total n s0 execs\n    in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n       output_f (run_total n s0 (ipurge_r execs (current s_f))) a\n 2. \\<And>aa.\n       run n (Some s0) execs = Some aa \\<Longrightarrow>\n       let s_f = run_total n s0 execs\n       in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n          output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "case None"], ["proof (state)\nthis:\n  run n (Some s0) execs = None\n\ngoal (2 subgoals):\n 1. run n (Some s0) execs = None \\<Longrightarrow>\n    let s_f = run_total n s0 execs\n    in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n       output_f (run_total n s0 (ipurge_r execs (current s_f))) a\n 2. \\<And>aa.\n       run n (Some s0) execs = Some aa \\<Longrightarrow>\n       let s_f = run_total n s0 execs\n       in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n          output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "thus ?thesis"], ["proof (prove)\nusing this:\n  run n (Some s0) execs = None\n\ngoal (1 subgoal):\n 1. let s_f = run_total n s0 execs\n    in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n       output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "using 1"], ["proof (prove)\nusing this:\n  run n (Some s0) execs = None\n  strict_equal (run n (Some s0) execs) (run_total n s0 execs)\n\ngoal (1 subgoal):\n 1. let s_f = run_total n s0 execs\n    in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n       output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "unfolding NI_unrelated_total_def strict_equal_def"], ["proof (prove)\nusing this:\n  run n (Some s0) execs = None\n  case run n (Some s0) execs of None \\<Rightarrow> False\n  | Some a' \\<Rightarrow> a' = run_total n s0 execs\n\ngoal (1 subgoal):\n 1. let s_f = run_total n s0 execs\n    in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n       output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "by auto"], ["proof (state)\nthis:\n  let s_f = run_total n s0 execs\n  in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n     output_f (run_total n s0 (ipurge_r execs (current s_f))) a\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       run n (Some s0) execs = Some aa \\<Longrightarrow>\n       let s_f = run_total n s0 execs\n       in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n          output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       run n (Some s0) execs = Some aa \\<Longrightarrow>\n       let s_f = run_total n s0 execs\n       in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n          output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "case (Some s_f)"], ["proof (state)\nthis:\n  run n (Some s0) execs = Some s_f\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       run n (Some s0) execs = Some aa \\<Longrightarrow>\n       let s_f = run_total n s0 execs\n       in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n          output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "from realistic_ipurge_l invariant_s0 realistic run_total_equals_run[where n=n and s=s0 and execs=\"ipurge_l execs (current s_f)\"]"], ["proof (chain)\npicking this:\n  \\<forall>execs d.\n     realistic_executions execs \\<longrightarrow>\n     realistic_executions (ipurge_l execs d)\n  invariant s0\n  realistic_executions execs\n  \\<lbrakk>realistic_executions (ipurge_l execs (current s_f));\n   invariant s0\\<rbrakk>\n  \\<Longrightarrow> strict_equal\n                     (run n (Some s0) (ipurge_l execs (current s_f)))\n                     (run_total n s0 (ipurge_l execs (current s_f)))", "have 2: \"strict_equal (run n (Some s0) (ipurge_l execs (current s_f))) (run_total n s0 (ipurge_l execs (current s_f)))\""], ["proof (prove)\nusing this:\n  \\<forall>execs d.\n     realistic_executions execs \\<longrightarrow>\n     realistic_executions (ipurge_l execs d)\n  invariant s0\n  realistic_executions execs\n  \\<lbrakk>realistic_executions (ipurge_l execs (current s_f));\n   invariant s0\\<rbrakk>\n  \\<Longrightarrow> strict_equal\n                     (run n (Some s0) (ipurge_l execs (current s_f)))\n                     (run_total n s0 (ipurge_l execs (current s_f)))\n\ngoal (1 subgoal):\n 1. strict_equal (run n (Some s0) (ipurge_l execs (current s_f)))\n     (run_total n s0 (ipurge_l execs (current s_f)))", "by auto"], ["proof (state)\nthis:\n  strict_equal (run n (Some s0) (ipurge_l execs (current s_f)))\n   (run_total n s0 (ipurge_l execs (current s_f)))\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       run n (Some s0) execs = Some aa \\<Longrightarrow>\n       let s_f = run_total n s0 execs\n       in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n          output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "from realistic_ipurge_r invariant_s0 realistic run_total_equals_run[where n=n and s=s0 and execs=\"ipurge_r execs (current s_f)\"]"], ["proof (chain)\npicking this:\n  \\<forall>execs d.\n     realistic_executions execs \\<longrightarrow>\n     realistic_executions (ipurge_r execs d)\n  invariant s0\n  realistic_executions execs\n  \\<lbrakk>realistic_executions (ipurge_r execs (current s_f));\n   invariant s0\\<rbrakk>\n  \\<Longrightarrow> strict_equal\n                     (run n (Some s0) (ipurge_r execs (current s_f)))\n                     (run_total n s0 (ipurge_r execs (current s_f)))", "have 3: \"strict_equal (run n (Some s0) (ipurge_r execs (current s_f))) (run_total n s0 (ipurge_r execs (current s_f)))\""], ["proof (prove)\nusing this:\n  \\<forall>execs d.\n     realistic_executions execs \\<longrightarrow>\n     realistic_executions (ipurge_r execs d)\n  invariant s0\n  realistic_executions execs\n  \\<lbrakk>realistic_executions (ipurge_r execs (current s_f));\n   invariant s0\\<rbrakk>\n  \\<Longrightarrow> strict_equal\n                     (run n (Some s0) (ipurge_r execs (current s_f)))\n                     (run_total n s0 (ipurge_r execs (current s_f)))\n\ngoal (1 subgoal):\n 1. strict_equal (run n (Some s0) (ipurge_r execs (current s_f)))\n     (run_total n s0 (ipurge_r execs (current s_f)))", "by auto"], ["proof (state)\nthis:\n  strict_equal (run n (Some s0) (ipurge_r execs (current s_f)))\n   (run_total n s0 (ipurge_r execs (current s_f)))\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       run n (Some s0) execs = Some aa \\<Longrightarrow>\n       let s_f = run_total n s0 execs\n       in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n          output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. let s_f = run_total n s0 execs\n    in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n       output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "proof(cases \"run n (Some s0) (ipurge_l execs (current s_f))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. run n (Some s0) (ipurge_l execs (current s_f)) = None \\<Longrightarrow>\n    let s_f = run_total n s0 execs\n    in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n       output_f (run_total n s0 (ipurge_r execs (current s_f))) a\n 2. \\<And>aa.\n       run n (Some s0) (ipurge_l execs (current s_f)) =\n       Some aa \\<Longrightarrow>\n       let s_f = run_total n s0 execs\n       in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n          output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "case None"], ["proof (state)\nthis:\n  run n (Some s0) (ipurge_l execs (current s_f)) = None\n\ngoal (2 subgoals):\n 1. run n (Some s0) (ipurge_l execs (current s_f)) = None \\<Longrightarrow>\n    let s_f = run_total n s0 execs\n    in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n       output_f (run_total n s0 (ipurge_r execs (current s_f))) a\n 2. \\<And>aa.\n       run n (Some s0) (ipurge_l execs (current s_f)) =\n       Some aa \\<Longrightarrow>\n       let s_f = run_total n s0 execs\n       in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n          output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "from 2 None"], ["proof (chain)\npicking this:\n  strict_equal (run n (Some s0) (ipurge_l execs (current s_f)))\n   (run_total n s0 (ipurge_l execs (current s_f)))\n  run n (Some s0) (ipurge_l execs (current s_f)) = None", "show ?thesis"], ["proof (prove)\nusing this:\n  strict_equal (run n (Some s0) (ipurge_l execs (current s_f)))\n   (run_total n s0 (ipurge_l execs (current s_f)))\n  run n (Some s0) (ipurge_l execs (current s_f)) = None\n\ngoal (1 subgoal):\n 1. let s_f = run_total n s0 execs\n    in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n       output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "using 2"], ["proof (prove)\nusing this:\n  strict_equal (run n (Some s0) (ipurge_l execs (current s_f)))\n   (run_total n s0 (ipurge_l execs (current s_f)))\n  run n (Some s0) (ipurge_l execs (current s_f)) = None\n  strict_equal (run n (Some s0) (ipurge_l execs (current s_f)))\n   (run_total n s0 (ipurge_l execs (current s_f)))\n\ngoal (1 subgoal):\n 1. let s_f = run_total n s0 execs\n    in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n       output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "unfolding NI_unrelated_total_def strict_equal_def"], ["proof (prove)\nusing this:\n  case run n (Some s0) (ipurge_l execs (current s_f)) of\n  None \\<Rightarrow> False\n  | Some a' \\<Rightarrow> a' = run_total n s0 (ipurge_l execs (current s_f))\n  run n (Some s0) (ipurge_l execs (current s_f)) = None\n  case run n (Some s0) (ipurge_l execs (current s_f)) of\n  None \\<Rightarrow> False\n  | Some a' \\<Rightarrow> a' = run_total n s0 (ipurge_l execs (current s_f))\n\ngoal (1 subgoal):\n 1. let s_f = run_total n s0 execs\n    in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n       output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "by auto"], ["proof (state)\nthis:\n  let s_f = run_total n s0 execs\n  in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n     output_f (run_total n s0 (ipurge_r execs (current s_f))) a\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       run n (Some s0) (ipurge_l execs (current s_f)) =\n       Some aa \\<Longrightarrow>\n       let s_f = run_total n s0 execs\n       in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n          output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       run n (Some s0) (ipurge_l execs (current s_f)) =\n       Some aa \\<Longrightarrow>\n       let s_f = run_total n s0 execs\n       in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n          output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "case (Some s_ipurge_l)"], ["proof (state)\nthis:\n  run n (Some s0) (ipurge_l execs (current s_f)) = Some s_ipurge_l\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       run n (Some s0) (ipurge_l execs (current s_f)) =\n       Some aa \\<Longrightarrow>\n       let s_f = run_total n s0 execs\n       in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n          output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. let s_f = run_total n s0 execs\n    in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n       output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "proof(cases \"run n (Some s0) (ipurge_r execs (current s_f))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. run n (Some s0) (ipurge_r execs (current s_f)) = None \\<Longrightarrow>\n    let s_f = run_total n s0 execs\n    in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n       output_f (run_total n s0 (ipurge_r execs (current s_f))) a\n 2. \\<And>aa.\n       run n (Some s0) (ipurge_r execs (current s_f)) =\n       Some aa \\<Longrightarrow>\n       let s_f = run_total n s0 execs\n       in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n          output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "case None"], ["proof (state)\nthis:\n  run n (Some s0) (ipurge_r execs (current s_f)) = None\n\ngoal (2 subgoals):\n 1. run n (Some s0) (ipurge_r execs (current s_f)) = None \\<Longrightarrow>\n    let s_f = run_total n s0 execs\n    in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n       output_f (run_total n s0 (ipurge_r execs (current s_f))) a\n 2. \\<And>aa.\n       run n (Some s0) (ipurge_r execs (current s_f)) =\n       Some aa \\<Longrightarrow>\n       let s_f = run_total n s0 execs\n       in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n          output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "from 3 None"], ["proof (chain)\npicking this:\n  strict_equal (run n (Some s0) (ipurge_r execs (current s_f)))\n   (run_total n s0 (ipurge_r execs (current s_f)))\n  run n (Some s0) (ipurge_r execs (current s_f)) = None", "show ?thesis"], ["proof (prove)\nusing this:\n  strict_equal (run n (Some s0) (ipurge_r execs (current s_f)))\n   (run_total n s0 (ipurge_r execs (current s_f)))\n  run n (Some s0) (ipurge_r execs (current s_f)) = None\n\ngoal (1 subgoal):\n 1. let s_f = run_total n s0 execs\n    in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n       output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "using 2"], ["proof (prove)\nusing this:\n  strict_equal (run n (Some s0) (ipurge_r execs (current s_f)))\n   (run_total n s0 (ipurge_r execs (current s_f)))\n  run n (Some s0) (ipurge_r execs (current s_f)) = None\n  strict_equal (run n (Some s0) (ipurge_l execs (current s_f)))\n   (run_total n s0 (ipurge_l execs (current s_f)))\n\ngoal (1 subgoal):\n 1. let s_f = run_total n s0 execs\n    in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n       output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "unfolding NI_unrelated_total_def strict_equal_def"], ["proof (prove)\nusing this:\n  case run n (Some s0) (ipurge_r execs (current s_f)) of\n  None \\<Rightarrow> False\n  | Some a' \\<Rightarrow> a' = run_total n s0 (ipurge_r execs (current s_f))\n  run n (Some s0) (ipurge_r execs (current s_f)) = None\n  case run n (Some s0) (ipurge_l execs (current s_f)) of\n  None \\<Rightarrow> False\n  | Some a' \\<Rightarrow> a' = run_total n s0 (ipurge_l execs (current s_f))\n\ngoal (1 subgoal):\n 1. let s_f = run_total n s0 execs\n    in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n       output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "by auto"], ["proof (state)\nthis:\n  let s_f = run_total n s0 execs\n  in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n     output_f (run_total n s0 (ipurge_r execs (current s_f))) a\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       run n (Some s0) (ipurge_r execs (current s_f)) =\n       Some aa \\<Longrightarrow>\n       let s_f = run_total n s0 execs\n       in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n          output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       run n (Some s0) (ipurge_r execs (current s_f)) =\n       Some aa \\<Longrightarrow>\n       let s_f = run_total n s0 execs\n       in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n          output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "case (Some s_ipurge_r)"], ["proof (state)\nthis:\n  run n (Some s0) (ipurge_r execs (current s_f)) = Some s_ipurge_r\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       run n (Some s0) (ipurge_r execs (current s_f)) =\n       Some aa \\<Longrightarrow>\n       let s_f = run_total n s0 execs\n       in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n          output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "from \\<open>run n (Some s0) execs = Some s_f\\<close> \\<open>run n (Some s0) (ipurge_l execs (current s_f)) = Some s_ipurge_l\\<close>\n                  Some 1 2 3 isecure1_partial[unfolded NI_indirect_sources_def,THEN spec,THEN spec,THEN spec,where x=n and x2=execs]"], ["proof (chain)\npicking this:\n  run n (Some s0) execs = Some s_f\n  run n (Some s0) (ipurge_l execs (current s_f)) = Some s_ipurge_l\n  run n (Some s0) (ipurge_r execs (current s_f)) = Some s_ipurge_r\n  strict_equal (run n (Some s0) execs) (run_total n s0 execs)\n  strict_equal (run n (Some s0) (ipurge_l execs (current s_f)))\n   (run_total n s0 (ipurge_l execs (current s_f)))\n  strict_equal (run n (Some s0) (ipurge_r execs (current s_f)))\n   (run_total n s0 (ipurge_r execs (current s_f)))\n  run n (Some s0) execs \\<rightharpoonup>\n  (\\<lambda>s_f.\n      B2 (run n (Some s0) (ipurge_l execs (current s_f)))\n       (run n (Some s0) (ipurge_r execs (current s_f)))\n       (\\<lambda>s_l s_r. output_f s_l ?x1 = output_f s_r ?x1))", "show ?thesis"], ["proof (prove)\nusing this:\n  run n (Some s0) execs = Some s_f\n  run n (Some s0) (ipurge_l execs (current s_f)) = Some s_ipurge_l\n  run n (Some s0) (ipurge_r execs (current s_f)) = Some s_ipurge_r\n  strict_equal (run n (Some s0) execs) (run_total n s0 execs)\n  strict_equal (run n (Some s0) (ipurge_l execs (current s_f)))\n   (run_total n s0 (ipurge_l execs (current s_f)))\n  strict_equal (run n (Some s0) (ipurge_r execs (current s_f)))\n   (run_total n s0 (ipurge_r execs (current s_f)))\n  run n (Some s0) execs \\<rightharpoonup>\n  (\\<lambda>s_f.\n      B2 (run n (Some s0) (ipurge_l execs (current s_f)))\n       (run n (Some s0) (ipurge_r execs (current s_f)))\n       (\\<lambda>s_l s_r. output_f s_l ?x1 = output_f s_r ?x1))\n\ngoal (1 subgoal):\n 1. let s_f = run_total n s0 execs\n    in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n       output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "unfolding strict_equal_def NI_unrelated_def"], ["proof (prove)\nusing this:\n  run n (Some s0) execs = Some s_f\n  run n (Some s0) (ipurge_l execs (current s_f)) = Some s_ipurge_l\n  run n (Some s0) (ipurge_r execs (current s_f)) = Some s_ipurge_r\n  case run n (Some s0) execs of None \\<Rightarrow> False\n  | Some a' \\<Rightarrow> a' = run_total n s0 execs\n  case run n (Some s0) (ipurge_l execs (current s_f)) of\n  None \\<Rightarrow> False\n  | Some a' \\<Rightarrow> a' = run_total n s0 (ipurge_l execs (current s_f))\n  case run n (Some s0) (ipurge_r execs (current s_f)) of\n  None \\<Rightarrow> False\n  | Some a' \\<Rightarrow> a' = run_total n s0 (ipurge_r execs (current s_f))\n  run n (Some s0) execs \\<rightharpoonup>\n  (\\<lambda>s_f.\n      B2 (run n (Some s0) (ipurge_l execs (current s_f)))\n       (run n (Some s0) (ipurge_r execs (current s_f)))\n       (\\<lambda>s_l s_r. output_f s_l ?x1 = output_f s_r ?x1))\n\ngoal (1 subgoal):\n 1. let s_f = run_total n s0 execs\n    in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n       output_f (run_total n s0 (ipurge_r execs (current s_f))) a", "by(simp add: Let_def B_def B2_def)"], ["proof (state)\nthis:\n  let s_f = run_total n s0 execs\n  in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n     output_f (run_total n s0 (ipurge_r execs (current s_f))) a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  let s_f = run_total n s0 execs\n  in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n     output_f (run_total n s0 (ipurge_r execs (current s_f))) a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  let s_f = run_total n s0 execs\n  in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n     output_f (run_total n s0 (ipurge_r execs (current s_f))) a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  let s_f = run_total n s0 execs\n  in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n     output_f (run_total n s0 (ipurge_r execs (current s_f))) a\n\ngoal (1 subgoal):\n 1. NI_indirect_sources_total", "}"], ["proof (state)\nthis:\n  realistic_executions ?execs2 \\<Longrightarrow>\n  let s_f = run_total ?n2 s0 ?execs2\n  in output_f (run_total ?n2 s0 (ipurge_l ?execs2 (current s_f))) ?a2 =\n     output_f (run_total ?n2 s0 (ipurge_r ?execs2 (current s_f))) ?a2\n\ngoal (1 subgoal):\n 1. NI_indirect_sources_total", "thus ?thesis"], ["proof (prove)\nusing this:\n  realistic_executions ?execs2 \\<Longrightarrow>\n  let s_f = run_total ?n2 s0 ?execs2\n  in output_f (run_total ?n2 s0 (ipurge_l ?execs2 (current s_f))) ?a2 =\n     output_f (run_total ?n2 s0 (ipurge_r ?execs2 (current s_f))) ?a2\n\ngoal (1 subgoal):\n 1. NI_indirect_sources_total", "unfolding NI_indirect_sources_total_def"], ["proof (prove)\nusing this:\n  realistic_executions ?execs2 \\<Longrightarrow>\n  let s_f = run_total ?n2 s0 ?execs2\n  in output_f (run_total ?n2 s0 (ipurge_l ?execs2 (current s_f))) ?a2 =\n     output_f (run_total ?n2 s0 (ipurge_r ?execs2 (current s_f))) ?a2\n\ngoal (1 subgoal):\n 1. \\<forall>execs a n.\n       realistic_executions execs \\<longrightarrow>\n       (let s_f = run_total n s0 execs\n        in output_f (run_total n s0 (ipurge_l execs (current s_f))) a =\n           output_f (run_total n s0 (ipurge_r execs (current s_f))) a)", "by auto"], ["proof (state)\nthis:\n  NI_indirect_sources_total\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  NI_indirect_sources_total\n\ngoal (1 subgoal):\n 1. isecure_total", "from NI_unrelated_total NI_indirect_sources_total"], ["proof (chain)\npicking this:\n  NI_unrelated_total\n  NI_indirect_sources_total", "show ?thesis"], ["proof (prove)\nusing this:\n  NI_unrelated_total\n  NI_indirect_sources_total\n\ngoal (1 subgoal):\n 1. isecure_total", "unfolding isecure_total_def"], ["proof (prove)\nusing this:\n  NI_unrelated_total\n  NI_indirect_sources_total\n\ngoal (1 subgoal):\n 1. NI_unrelated_total \\<and> NI_indirect_sources_total", "by auto"], ["proof (state)\nthis:\n  isecure_total\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}