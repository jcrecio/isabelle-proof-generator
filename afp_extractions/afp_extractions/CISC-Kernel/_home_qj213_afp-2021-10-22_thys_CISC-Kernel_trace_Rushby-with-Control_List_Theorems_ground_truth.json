{"file_name": "/home/qj213/afp-2021-10-22/thys/CISC-Kernel/trace/Rushby-with-Control/List_Theorems.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CISC-Kernel", "problem_names": ["lemma drop_one[simp]:\n  shows \"drop (Suc 0) x = tl x\"", "lemma length_ge_one:\n  shows \"x \\<noteq> [] \\<longrightarrow> length x \\<ge> 1\"", "lemma take_but_one[simp]:\n  shows \"x \\<noteq> [] \\<longrightarrow> lastn ((length x) - 1) x = tl x\"", "lemma Suc_m_minus_n[simp]:\n  shows \"m \\<ge> n \\<longrightarrow> Suc m - n = Suc (m - n)\"", "lemma lastn_one_less:\n shows \"n > 0 \\<and> n \\<le> length x \\<and> lastn n x = (a#y) \\<longrightarrow> lastn (n - 1) x = y\"", "lemma list_sub_implies_member:\n  shows \"\\<forall> a x . set (a#x) \\<subseteq> Z \\<longrightarrow> a \\<in> Z\"", "lemma subset_smaller_list:\n  shows \"\\<forall> a x . set (a#x) \\<subseteq> Z \\<longrightarrow> set x \\<subseteq> Z\"", "lemma second_elt_is_hd_tl: \n  shows \"tl x = (a # x') \\<longrightarrow> a = x ! 1\"", "lemma length_ge_2_implies_tl_not_empty:\n  shows \"length x \\<ge> 2 \\<longrightarrow> tl x \\<noteq> []\"", "lemma length_lt_2_implies_tl_empty:\n  shows \"length x < 2 \\<longrightarrow> tl x = []\"", "lemma first_second_is_sub_seq:\n  shows \"length x \\<ge> 2 \\<Longrightarrow> is_sub_seq (hd x) (x!1) x\"", "lemma hd_drop_is_nth:\n  shows \"n < length x \\<Longrightarrow> hd (drop n x) = x!n\"", "lemma def_of_hd:\n  shows \"y = a # x \\<longrightarrow> hd y = a\"", "lemma def_of_tl:\n  shows \"y = a # x \\<longrightarrow> tl y = x\"", "lemma drop_yields_results_implies_nbound:\n  shows \"drop n x \\<noteq> [] \\<longrightarrow> n < length x\"", "lemma consecutive_is_sub_seq:\n  shows \"a # (b # x) = lastn n y \\<Longrightarrow> is_sub_seq a b y\"", "lemma sub_seq_in_prefixes:\n  assumes \"\\<exists>y \\<in> prefixes X. is_sub_seq a a' y\"\n  shows \"\\<exists>y \\<in> X. is_sub_seq a a' y\"", "lemma set_tl_is_subset:\nshows \"set (tl x) \\<subseteq> set x\"", "lemma x_is_hd_snd_tl:\nshows \"length x \\<ge> 2 \\<longrightarrow> x = (hd x) # x!1 # tl(tl x)\"", "lemma tl_x_not_x:\nshows \"x \\<noteq> [] \\<longrightarrow> tl x \\<noteq> x\"", "lemma tl_hd_x_not_tl_x:\nshows \"x \\<noteq> [] \\<and> hd x \\<noteq> [] \\<longrightarrow> tl (hd x) # tl x \\<noteq> x\""], "translations": [["", "lemma drop_one[simp]:\n  shows \"drop (Suc 0) x = tl x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. drop (Suc 0) x = tl x", "by(induct x,auto)"], ["", "lemma length_ge_one:\n  shows \"x \\<noteq> [] \\<longrightarrow> length x \\<ge> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> [] \\<longrightarrow> 1 \\<le> length x", "by(induct x,auto)"], ["", "lemma take_but_one[simp]:\n  shows \"x \\<noteq> [] \\<longrightarrow> lastn ((length x) - 1) x = tl x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> [] \\<longrightarrow> lastn (length x - 1) x = tl x", "unfolding lastn_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> [] \\<longrightarrow>\n    drop (length x - (length x - 1)) x = tl x", "using length_ge_one[where x=x]"], ["proof (prove)\nusing this:\n  x \\<noteq> [] \\<longrightarrow> 1 \\<le> length x\n\ngoal (1 subgoal):\n 1. x \\<noteq> [] \\<longrightarrow>\n    drop (length x - (length x - 1)) x = tl x", "by auto"], ["", "lemma Suc_m_minus_n[simp]:\n  shows \"m \\<ge> n \\<longrightarrow> Suc m - n = Suc (m - n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> m \\<longrightarrow> Suc m - n = Suc (m - n)", "by auto"], ["", "lemma lastn_one_less:\n shows \"n > 0 \\<and> n \\<le> length x \\<and> lastn n x = (a#y) \\<longrightarrow> lastn (n - 1) x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n \\<and> n \\<le> length x \\<and> lastn n x = a # y \\<longrightarrow>\n    lastn (n - 1) x = y", "unfolding lastn_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n \\<and>\n    n \\<le> length x \\<and> drop (length x - n) x = a # y \\<longrightarrow>\n    drop (length x - (n - 1)) x = y", "using drop_Suc[where n=\"length x - n\" and xs=x] drop_tl[where n=\"length x - n\" and xs=x]"], ["proof (prove)\nusing this:\n  drop (Suc (length x - n)) x = drop (length x - n) (tl x)\n  drop (length x - n) (tl x) = tl (drop (length x - n) x)\n\ngoal (1 subgoal):\n 1. 0 < n \\<and>\n    n \\<le> length x \\<and> drop (length x - n) x = a # y \\<longrightarrow>\n    drop (length x - (n - 1)) x = y", "by(auto)"], ["", "lemma list_sub_implies_member:\n  shows \"\\<forall> a x . set (a#x) \\<subseteq> Z \\<longrightarrow> a \\<in> Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a x. set (a # x) \\<subseteq> Z \\<longrightarrow> a \\<in> Z", "by auto"], ["", "lemma subset_smaller_list:\n  shows \"\\<forall> a x . set (a#x) \\<subseteq> Z \\<longrightarrow> set x \\<subseteq> Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a x.\n       set (a # x) \\<subseteq> Z \\<longrightarrow> set x \\<subseteq> Z", "by auto"], ["", "lemma second_elt_is_hd_tl: \n  shows \"tl x = (a # x') \\<longrightarrow> a = x ! 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tl x = a # x' \\<longrightarrow> a = x ! 1", "by (cases x,auto)"], ["", "lemma length_ge_2_implies_tl_not_empty:\n  shows \"length x \\<ge> 2 \\<longrightarrow> tl x \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 \\<le> length x \\<longrightarrow> tl x \\<noteq> []", "by (cases x,auto)"], ["", "lemma length_lt_2_implies_tl_empty:\n  shows \"length x < 2 \\<longrightarrow> tl x = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length x < 2 \\<longrightarrow> tl x = []", "by (cases x,auto)"], ["", "lemma first_second_is_sub_seq:\n  shows \"length x \\<ge> 2 \\<Longrightarrow> is_sub_seq (hd x) (x!1) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 \\<le> length x \\<Longrightarrow> is_sub_seq (hd x) (x ! 1) x", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. 2 \\<le> length x \\<Longrightarrow> is_sub_seq (hd x) (x ! 1) x", "assume \"length x \\<ge> 2\""], ["proof (state)\nthis:\n  2 \\<le> length x\n\ngoal (1 subgoal):\n 1. 2 \\<le> length x \\<Longrightarrow> is_sub_seq (hd x) (x ! 1) x", "hence 1: \"(Suc 0) < length x\""], ["proof (prove)\nusing this:\n  2 \\<le> length x\n\ngoal (1 subgoal):\n 1. Suc 0 < length x", "by auto"], ["proof (state)\nthis:\n  Suc 0 < length x\n\ngoal (1 subgoal):\n 1. 2 \\<le> length x \\<Longrightarrow> is_sub_seq (hd x) (x ! 1) x", "hence \"x!0 = hd x\""], ["proof (prove)\nusing this:\n  Suc 0 < length x\n\ngoal (1 subgoal):\n 1. x ! 0 = hd x", "by(cases x,auto)"], ["proof (state)\nthis:\n  x ! 0 = hd x\n\ngoal (1 subgoal):\n 1. 2 \\<le> length x \\<Longrightarrow> is_sub_seq (hd x) (x ! 1) x", "from this 1"], ["proof (chain)\npicking this:\n  x ! 0 = hd x\n  Suc 0 < length x", "show \"is_sub_seq (hd x) (x!1) x\""], ["proof (prove)\nusing this:\n  x ! 0 = hd x\n  Suc 0 < length x\n\ngoal (1 subgoal):\n 1. is_sub_seq (hd x) (x ! 1) x", "unfolding is_sub_seq_def"], ["proof (prove)\nusing this:\n  x ! 0 = hd x\n  Suc 0 < length x\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       Suc n < length x \\<and> x ! n = hd x \\<and> x ! Suc n = x ! 1", "by auto"], ["proof (state)\nthis:\n  is_sub_seq (hd x) (x ! 1) x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma hd_drop_is_nth:\n  shows \"n < length x \\<Longrightarrow> hd (drop n x) = x!n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length x \\<Longrightarrow> hd (drop n x) = x ! n", "proof(induct x arbitrary: n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n. n < length [] \\<Longrightarrow> hd (drop n []) = [] ! n\n 2. \\<And>a x n.\n       \\<lbrakk>\\<And>n.\n                   n < length x \\<Longrightarrow> hd (drop n x) = x ! n;\n        n < length (a # x)\\<rbrakk>\n       \\<Longrightarrow> hd (drop n (a # x)) = (a # x) ! n", "case Nil"], ["proof (state)\nthis:\n  n < length []\n\ngoal (2 subgoals):\n 1. \\<And>n. n < length [] \\<Longrightarrow> hd (drop n []) = [] ! n\n 2. \\<And>a x n.\n       \\<lbrakk>\\<And>n.\n                   n < length x \\<Longrightarrow> hd (drop n x) = x ! n;\n        n < length (a # x)\\<rbrakk>\n       \\<Longrightarrow> hd (drop n (a # x)) = (a # x) ! n", "thus ?case"], ["proof (prove)\nusing this:\n  n < length []\n\ngoal (1 subgoal):\n 1. hd (drop n []) = [] ! n", "by simp"], ["proof (state)\nthis:\n  hd (drop n []) = [] ! n\n\ngoal (1 subgoal):\n 1. \\<And>a x n.\n       \\<lbrakk>\\<And>n.\n                   n < length x \\<Longrightarrow> hd (drop n x) = x ! n;\n        n < length (a # x)\\<rbrakk>\n       \\<Longrightarrow> hd (drop n (a # x)) = (a # x) ! n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x n.\n       \\<lbrakk>\\<And>n.\n                   n < length x \\<Longrightarrow> hd (drop n x) = x ! n;\n        n < length (a # x)\\<rbrakk>\n       \\<Longrightarrow> hd (drop n (a # x)) = (a # x) ! n", "case (Cons a x)"], ["proof (state)\nthis:\n  ?n < length x \\<Longrightarrow> hd (drop ?n x) = x ! ?n\n  n < length (a # x)\n\ngoal (1 subgoal):\n 1. \\<And>a x n.\n       \\<lbrakk>\\<And>n.\n                   n < length x \\<Longrightarrow> hd (drop n x) = x ! n;\n        n < length (a # x)\\<rbrakk>\n       \\<Longrightarrow> hd (drop n (a # x)) = (a # x) ! n", "{"], ["proof (state)\nthis:\n  ?n < length x \\<Longrightarrow> hd (drop ?n x) = x ! ?n\n  n < length (a # x)\n\ngoal (1 subgoal):\n 1. \\<And>a x n.\n       \\<lbrakk>\\<And>n.\n                   n < length x \\<Longrightarrow> hd (drop n x) = x ! n;\n        n < length (a # x)\\<rbrakk>\n       \\<Longrightarrow> hd (drop n (a # x)) = (a # x) ! n", "have \"hd (drop n (a # x)) = (a # x) ! n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd (drop n (a # x)) = (a # x) ! n", "proof(cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> hd (drop n (a # x)) = (a # x) ! n\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> hd (drop n (a # x)) = (a # x) ! n", "case 0"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> hd (drop n (a # x)) = (a # x) ! n\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> hd (drop n (a # x)) = (a # x) ! n", "thus ?thesis"], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. hd (drop n (a # x)) = (a # x) ! n", "by simp"], ["proof (state)\nthis:\n  hd (drop n (a # x)) = (a # x) ! n\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> hd (drop n (a # x)) = (a # x) ! n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> hd (drop n (a # x)) = (a # x) ! n", "case (Suc m)"], ["proof (state)\nthis:\n  n = Suc m\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> hd (drop n (a # x)) = (a # x) ! n", "from Suc Cons"], ["proof (chain)\npicking this:\n  n = Suc m\n  ?n < length x \\<Longrightarrow> hd (drop ?n x) = x ! ?n\n  n < length (a # x)", "show ?thesis"], ["proof (prove)\nusing this:\n  n = Suc m\n  ?n < length x \\<Longrightarrow> hd (drop ?n x) = x ! ?n\n  n < length (a # x)\n\ngoal (1 subgoal):\n 1. hd (drop n (a # x)) = (a # x) ! n", "by auto"], ["proof (state)\nthis:\n  hd (drop n (a # x)) = (a # x) ! n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  hd (drop n (a # x)) = (a # x) ! n\n\ngoal (1 subgoal):\n 1. \\<And>a x n.\n       \\<lbrakk>\\<And>n.\n                   n < length x \\<Longrightarrow> hd (drop n x) = x ! n;\n        n < length (a # x)\\<rbrakk>\n       \\<Longrightarrow> hd (drop n (a # x)) = (a # x) ! n", "}"], ["proof (state)\nthis:\n  hd (drop n (a # x)) = (a # x) ! n\n\ngoal (1 subgoal):\n 1. \\<And>a x n.\n       \\<lbrakk>\\<And>n.\n                   n < length x \\<Longrightarrow> hd (drop n x) = x ! n;\n        n < length (a # x)\\<rbrakk>\n       \\<Longrightarrow> hd (drop n (a # x)) = (a # x) ! n", "thus ?case"], ["proof (prove)\nusing this:\n  hd (drop n (a # x)) = (a # x) ! n\n\ngoal (1 subgoal):\n 1. hd (drop n (a # x)) = (a # x) ! n", "by auto"], ["proof (state)\nthis:\n  hd (drop n (a # x)) = (a # x) ! n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma def_of_hd:\n  shows \"y = a # x \\<longrightarrow> hd y = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y = a # x \\<longrightarrow> hd y = a", "by simp"], ["", "lemma def_of_tl:\n  shows \"y = a # x \\<longrightarrow> tl y = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y = a # x \\<longrightarrow> tl y = x", "by simp"], ["", "lemma drop_yields_results_implies_nbound:\n  shows \"drop n x \\<noteq> [] \\<longrightarrow> n < length x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. drop n x \\<noteq> [] \\<longrightarrow> n < length x", "by(induct x,auto)"], ["", "lemma consecutive_is_sub_seq:\n  shows \"a # (b # x) = lastn n y \\<Longrightarrow> is_sub_seq a b y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a # b # x = lastn n y \\<Longrightarrow> is_sub_seq a b y", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. a # b # x = lastn n y \\<Longrightarrow> is_sub_seq a b y", "assume 1: \"a # (b # x) = lastn n y\""], ["proof (state)\nthis:\n  a # b # x = lastn n y\n\ngoal (1 subgoal):\n 1. a # b # x = lastn n y \\<Longrightarrow> is_sub_seq a b y", "from 1 drop_Suc[where n=\"(length y) - n\" and xs=\"y\"]\n       drop_tl[where n=\"(length y) - n\" and xs=\"y\"] \n       def_of_tl[where y=\"lastn n y\" and a=a and x =\"b#x\"]\n       drop_yields_results_implies_nbound[where n=\"Suc (length y - n)\" and x=y]"], ["proof (chain)\npicking this:\n  a # b # x = lastn n y\n  drop (Suc (length y - n)) y = drop (length y - n) (tl y)\n  drop (length y - n) (tl y) = tl (drop (length y - n) y)\n  lastn n y = a # b # x \\<longrightarrow> tl (lastn n y) = b # x\n  drop (Suc (length y - n)) y \\<noteq> [] \\<longrightarrow>\n  Suc (length y - n) < length y", "have 3: \"Suc (length y - n) < length y\""], ["proof (prove)\nusing this:\n  a # b # x = lastn n y\n  drop (Suc (length y - n)) y = drop (length y - n) (tl y)\n  drop (length y - n) (tl y) = tl (drop (length y - n) y)\n  lastn n y = a # b # x \\<longrightarrow> tl (lastn n y) = b # x\n  drop (Suc (length y - n)) y \\<noteq> [] \\<longrightarrow>\n  Suc (length y - n) < length y\n\ngoal (1 subgoal):\n 1. Suc (length y - n) < length y", "unfolding lastn_def"], ["proof (prove)\nusing this:\n  a # b # x = drop (length y - n) y\n  drop (Suc (length y - n)) y = drop (length y - n) (tl y)\n  drop (length y - n) (tl y) = tl (drop (length y - n) y)\n  drop (length y - n) y = a # b # x \\<longrightarrow>\n  tl (drop (length y - n) y) = b # x\n  drop (Suc (length y - n)) y \\<noteq> [] \\<longrightarrow>\n  Suc (length y - n) < length y\n\ngoal (1 subgoal):\n 1. Suc (length y - n) < length y", "by auto"], ["proof (state)\nthis:\n  Suc (length y - n) < length y\n\ngoal (1 subgoal):\n 1. a # b # x = lastn n y \\<Longrightarrow> is_sub_seq a b y", "from 3 1 hd_drop_is_nth[where n=\"(length y) - n\" and x=y] def_of_hd[where y=\"drop (length y - n) y\" and x=\"b#x\" and a=a]"], ["proof (chain)\npicking this:\n  Suc (length y - n) < length y\n  a # b # x = lastn n y\n  length y - n < length y \\<Longrightarrow>\n  hd (drop (length y - n) y) = y ! (length y - n)\n  drop (length y - n) y = a # b # x \\<longrightarrow>\n  hd (drop (length y - n) y) = a", "have 4: \"y!(length y - n) = a\""], ["proof (prove)\nusing this:\n  Suc (length y - n) < length y\n  a # b # x = lastn n y\n  length y - n < length y \\<Longrightarrow>\n  hd (drop (length y - n) y) = y ! (length y - n)\n  drop (length y - n) y = a # b # x \\<longrightarrow>\n  hd (drop (length y - n) y) = a\n\ngoal (1 subgoal):\n 1. y ! (length y - n) = a", "unfolding lastn_def"], ["proof (prove)\nusing this:\n  Suc (length y - n) < length y\n  a # b # x = drop (length y - n) y\n  length y - n < length y \\<Longrightarrow>\n  hd (drop (length y - n) y) = y ! (length y - n)\n  drop (length y - n) y = a # b # x \\<longrightarrow>\n  hd (drop (length y - n) y) = a\n\ngoal (1 subgoal):\n 1. y ! (length y - n) = a", "by auto"], ["proof (state)\nthis:\n  y ! (length y - n) = a\n\ngoal (1 subgoal):\n 1. a # b # x = lastn n y \\<Longrightarrow> is_sub_seq a b y", "from 3 1 hd_drop_is_nth[where n=\"Suc ((length y) - n)\" and x=y] def_of_hd[where y=\"drop (Suc (length y - n)) y\" and x=\"x\" and a=b]\n       drop_Suc[where n=\"(length y) - n\" and xs=\"y\"]\n       drop_tl[where n=\"(length y) - n\" and xs=\"y\"] \n       def_of_tl[where y=\"lastn n y\" and a=a and x =\"b#x\"]"], ["proof (chain)\npicking this:\n  Suc (length y - n) < length y\n  a # b # x = lastn n y\n  Suc (length y - n) < length y \\<Longrightarrow>\n  hd (drop (Suc (length y - n)) y) = y ! Suc (length y - n)\n  drop (Suc (length y - n)) y = b # x \\<longrightarrow>\n  hd (drop (Suc (length y - n)) y) = b\n  drop (Suc (length y - n)) y = drop (length y - n) (tl y)\n  drop (length y - n) (tl y) = tl (drop (length y - n) y)\n  lastn n y = a # b # x \\<longrightarrow> tl (lastn n y) = b # x", "have 5: \"y!Suc (length y - n) = b\""], ["proof (prove)\nusing this:\n  Suc (length y - n) < length y\n  a # b # x = lastn n y\n  Suc (length y - n) < length y \\<Longrightarrow>\n  hd (drop (Suc (length y - n)) y) = y ! Suc (length y - n)\n  drop (Suc (length y - n)) y = b # x \\<longrightarrow>\n  hd (drop (Suc (length y - n)) y) = b\n  drop (Suc (length y - n)) y = drop (length y - n) (tl y)\n  drop (length y - n) (tl y) = tl (drop (length y - n) y)\n  lastn n y = a # b # x \\<longrightarrow> tl (lastn n y) = b # x\n\ngoal (1 subgoal):\n 1. y ! Suc (length y - n) = b", "unfolding lastn_def"], ["proof (prove)\nusing this:\n  Suc (length y - n) < length y\n  a # b # x = drop (length y - n) y\n  Suc (length y - n) < length y \\<Longrightarrow>\n  hd (drop (Suc (length y - n)) y) = y ! Suc (length y - n)\n  drop (Suc (length y - n)) y = b # x \\<longrightarrow>\n  hd (drop (Suc (length y - n)) y) = b\n  drop (Suc (length y - n)) y = drop (length y - n) (tl y)\n  drop (length y - n) (tl y) = tl (drop (length y - n) y)\n  drop (length y - n) y = a # b # x \\<longrightarrow>\n  tl (drop (length y - n) y) = b # x\n\ngoal (1 subgoal):\n 1. y ! Suc (length y - n) = b", "by auto"], ["proof (state)\nthis:\n  y ! Suc (length y - n) = b\n\ngoal (1 subgoal):\n 1. a # b # x = lastn n y \\<Longrightarrow> is_sub_seq a b y", "from 3 4 5"], ["proof (chain)\npicking this:\n  Suc (length y - n) < length y\n  y ! (length y - n) = a\n  y ! Suc (length y - n) = b", "show ?thesis"], ["proof (prove)\nusing this:\n  Suc (length y - n) < length y\n  y ! (length y - n) = a\n  y ! Suc (length y - n) = b\n\ngoal (1 subgoal):\n 1. is_sub_seq a b y", "unfolding is_sub_seq_def"], ["proof (prove)\nusing this:\n  Suc (length y - n) < length y\n  y ! (length y - n) = a\n  y ! Suc (length y - n) = b\n\ngoal (1 subgoal):\n 1. \\<exists>n. Suc n < length y \\<and> y ! n = a \\<and> y ! Suc n = b", "by auto"], ["proof (state)\nthis:\n  is_sub_seq a b y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sub_seq_in_prefixes:\n  assumes \"\\<exists>y \\<in> prefixes X. is_sub_seq a a' y\"\n  shows \"\\<exists>y \\<in> X. is_sub_seq a a' y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>X. is_sub_seq a a' y", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>X. is_sub_seq a a' y", "from assms"], ["proof (chain)\npicking this:\n  \\<exists>y\\<in>prefixes X. is_sub_seq a a' y", "obtain y where y: \"y \\<in> prefixes X \\<and> is_sub_seq a a' y\""], ["proof (prove)\nusing this:\n  \\<exists>y\\<in>prefixes X. is_sub_seq a a' y\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        y \\<in> prefixes X \\<and> is_sub_seq a a' y \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  y \\<in> prefixes X \\<and> is_sub_seq a a' y\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>X. is_sub_seq a a' y", "then"], ["proof (chain)\npicking this:\n  y \\<in> prefixes X \\<and> is_sub_seq a a' y", "obtain n x where x: \"n > 0 \\<and> x \\<in> X \\<and> take n x = y\""], ["proof (prove)\nusing this:\n  y \\<in> prefixes X \\<and> is_sub_seq a a' y\n\ngoal (1 subgoal):\n 1. (\\<And>n x.\n        0 < n \\<and> x \\<in> X \\<and> take n x = y \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding prefixes_def"], ["proof (prove)\nusing this:\n  y \\<in> {x. \\<exists>n y.\n                 0 < n \\<and> y \\<in> X \\<and> take n y = x} \\<and>\n  is_sub_seq a a' y\n\ngoal (1 subgoal):\n 1. (\\<And>n x.\n        0 < n \\<and> x \\<in> X \\<and> take n x = y \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  0 < n \\<and> x \\<in> X \\<and> take n x = y\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>X. is_sub_seq a a' y", "from y"], ["proof (chain)\npicking this:\n  y \\<in> prefixes X \\<and> is_sub_seq a a' y", "obtain i where sub_seq_index: \"Suc i < length y \\<and> y ! i = a \\<and> y ! Suc i = a'\""], ["proof (prove)\nusing this:\n  y \\<in> prefixes X \\<and> is_sub_seq a a' y\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        Suc i < length y \\<and>\n        y ! i = a \\<and> y ! Suc i = a' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding is_sub_seq_def"], ["proof (prove)\nusing this:\n  y \\<in> prefixes X \\<and>\n  (\\<exists>n. Suc n < length y \\<and> y ! n = a \\<and> y ! Suc n = a')\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        Suc i < length y \\<and>\n        y ! i = a \\<and> y ! Suc i = a' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Suc i < length y \\<and> y ! i = a \\<and> y ! Suc i = a'\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>X. is_sub_seq a a' y", "from sub_seq_index x"], ["proof (chain)\npicking this:\n  Suc i < length y \\<and> y ! i = a \\<and> y ! Suc i = a'\n  0 < n \\<and> x \\<in> X \\<and> take n x = y", "have \"is_sub_seq a a' x\""], ["proof (prove)\nusing this:\n  Suc i < length y \\<and> y ! i = a \\<and> y ! Suc i = a'\n  0 < n \\<and> x \\<in> X \\<and> take n x = y\n\ngoal (1 subgoal):\n 1. is_sub_seq a a' x", "unfolding is_sub_seq_def"], ["proof (prove)\nusing this:\n  Suc i < length y \\<and> y ! i = a \\<and> y ! Suc i = a'\n  0 < n \\<and> x \\<in> X \\<and> take n x = y\n\ngoal (1 subgoal):\n 1. \\<exists>n. Suc n < length x \\<and> x ! n = a \\<and> x ! Suc n = a'", "using nth_take"], ["proof (prove)\nusing this:\n  Suc i < length y \\<and> y ! i = a \\<and> y ! Suc i = a'\n  0 < n \\<and> x \\<in> X \\<and> take n x = y\n  ?i < ?n \\<Longrightarrow> take ?n ?xs ! ?i = ?xs ! ?i\n\ngoal (1 subgoal):\n 1. \\<exists>n. Suc n < length x \\<and> x ! n = a \\<and> x ! Suc n = a'", "by auto"], ["proof (state)\nthis:\n  is_sub_seq a a' x\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>X. is_sub_seq a a' y", "from this x"], ["proof (chain)\npicking this:\n  is_sub_seq a a' x\n  0 < n \\<and> x \\<in> X \\<and> take n x = y", "show ?thesis"], ["proof (prove)\nusing this:\n  is_sub_seq a a' x\n  0 < n \\<and> x \\<in> X \\<and> take n x = y\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>X. is_sub_seq a a' y", "by metis"], ["proof (state)\nthis:\n  \\<exists>y\\<in>X. is_sub_seq a a' y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma set_tl_is_subset:\nshows \"set (tl x) \\<subseteq> set x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (tl x) \\<subseteq> set x", "by(induct x,auto)"], ["", "lemma x_is_hd_snd_tl:\nshows \"length x \\<ge> 2 \\<longrightarrow> x = (hd x) # x!1 # tl(tl x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 \\<le> length x \\<longrightarrow> x = hd x # x ! 1 # tl (tl x)", "proof(induct x)"], ["proof (state)\ngoal (2 subgoals):\n 1. 2 \\<le> length [] \\<longrightarrow> [] = hd [] # [] ! 1 # tl (tl [])\n 2. \\<And>a x.\n       2 \\<le> length x \\<longrightarrow>\n       x = hd x # x ! 1 # tl (tl x) \\<Longrightarrow>\n       2 \\<le> length (a # x) \\<longrightarrow>\n       a # x = hd (a # x) # (a # x) ! 1 # tl (tl (a # x))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. 2 \\<le> length [] \\<longrightarrow> [] = hd [] # [] ! 1 # tl (tl [])\n 2. \\<And>a x.\n       2 \\<le> length x \\<longrightarrow>\n       x = hd x # x ! 1 # tl (tl x) \\<Longrightarrow>\n       2 \\<le> length (a # x) \\<longrightarrow>\n       a # x = hd (a # x) # (a # x) ! 1 # tl (tl (a # x))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 \\<le> length [] \\<longrightarrow> [] = hd [] # [] ! 1 # tl (tl [])", "by auto"], ["proof (state)\nthis:\n  2 \\<le> length [] \\<longrightarrow> [] = hd [] # [] ! 1 # tl (tl [])\n\ngoal (1 subgoal):\n 1. \\<And>a x.\n       2 \\<le> length x \\<longrightarrow>\n       x = hd x # x ! 1 # tl (tl x) \\<Longrightarrow>\n       2 \\<le> length (a # x) \\<longrightarrow>\n       a # x = hd (a # x) # (a # x) ! 1 # tl (tl (a # x))", "case (Cons a xs)"], ["proof (state)\nthis:\n  2 \\<le> length xs \\<longrightarrow> xs = hd xs # xs ! 1 # tl (tl xs)\n\ngoal (1 subgoal):\n 1. \\<And>a x.\n       2 \\<le> length x \\<longrightarrow>\n       x = hd x # x ! 1 # tl (tl x) \\<Longrightarrow>\n       2 \\<le> length (a # x) \\<longrightarrow>\n       a # x = hd (a # x) # (a # x) ! 1 # tl (tl (a # x))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 \\<le> length (a # xs) \\<longrightarrow>\n    a # xs = hd (a # xs) # (a # xs) ! 1 # tl (tl (a # xs))", "by(induct xs,auto)"], ["proof (state)\nthis:\n  2 \\<le> length (a # xs) \\<longrightarrow>\n  a # xs = hd (a # xs) # (a # xs) ! 1 # tl (tl (a # xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tl_x_not_x:\nshows \"x \\<noteq> [] \\<longrightarrow> tl x \\<noteq> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> [] \\<longrightarrow> tl x \\<noteq> x", "by(induct x,auto)"], ["", "lemma tl_hd_x_not_tl_x:\nshows \"x \\<noteq> [] \\<and> hd x \\<noteq> [] \\<longrightarrow> tl (hd x) # tl x \\<noteq> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> [] \\<and> hd x \\<noteq> [] \\<longrightarrow>\n    tl (hd x) # tl x \\<noteq> x", "using tl_x_not_x"], ["proof (prove)\nusing this:\n  ?x \\<noteq> [] \\<longrightarrow> tl ?x \\<noteq> ?x\n\ngoal (1 subgoal):\n 1. x \\<noteq> [] \\<and> hd x \\<noteq> [] \\<longrightarrow>\n    tl (hd x) # tl x \\<noteq> x", "by(induct x,simp,auto)"], ["", "end"]]}