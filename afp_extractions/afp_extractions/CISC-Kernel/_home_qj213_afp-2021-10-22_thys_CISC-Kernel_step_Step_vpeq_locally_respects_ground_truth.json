{"file_name": "/home/qj213/afp-2021-10-22/thys/CISC-Kernel/step/Step_vpeq_locally_respects.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CISC-Kernel", "problem_names": ["lemma ipc_respects_policy:\n  assumes no: \"\\<not> Policy.ifp (partition tid) u\"\n    and inv: \"atomic_step_invariant s\"\n    and prec: \"atomic_step_precondition s tid (SK_IPC dir stage partner pag)\"\n    and ipt_case: \"ipt = SK_IPC dir stage partner page\"\n  shows \"vpeq u s (atomic_step_ipc tid dir stage partner page s)\"", "lemma ev_signal_respects_policy:\n  assumes no: \"\\<not> Policy.ifp (partition tid) u\"\n    and inv: \"atomic_step_invariant s\"\n    and prec: \"atomic_step_precondition s tid (SK_EV_SIGNAL EV_SIGNAL_FINISH partner)\"\n    and ipt_case: \"ipt = SK_EV_SIGNAL EV_SIGNAL_FINISH partner\"\n  shows \"vpeq u s (atomic_step_ev_signal tid partner s)\"", "lemma ev_wait_all_respects_policy:\n  assumes no: \"\\<not> Policy.ifp (partition tid) u\"\n    and inv: \"atomic_step_invariant s\"\n    and prec: \"atomic_step_precondition s tid ipt\"\n    and ipt_case: \"ipt = SK_EV_WAIT ev_wait_stage EV_CONSUME_ALL\"\n  shows \"vpeq u s (atomic_step_ev_wait_all tid s)\"", "lemma ev_wait_one_respects_policy:\n  assumes no: \"\\<not> Policy.ifp (partition tid) u\"\n    and inv: \"atomic_step_invariant s\"\n    and prec: \"atomic_step_precondition s tid ipt\"\n    and ipt_case: \"ipt = SK_EV_WAIT ev_wait_stage EV_CONSUME_ONE\"\n  shows \"vpeq u s (atomic_step_ev_wait_one tid s)\"", "theorem atomic_step_respects_policy:\n  assumes no: \"\\<not> Policy.ifp (partition (current s)) u\"\n      and inv: \"atomic_step_invariant s\"\n      and prec: \"atomic_step_precondition s (current s) ipt\"\n   shows \"vpeq u s (atomic_step s ipt)\""], "translations": [["", "lemma ipc_respects_policy:\n  assumes no: \"\\<not> Policy.ifp (partition tid) u\"\n    and inv: \"atomic_step_invariant s\"\n    and prec: \"atomic_step_precondition s tid (SK_IPC dir stage partner pag)\"\n    and ipt_case: \"ipt = SK_IPC dir stage partner page\"\n  shows \"vpeq u s (atomic_step_ipc tid dir stage partner page s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ipc tid dir stage partner page s)", "proof(cases stage)"], ["proof (state)\ngoal (3 subgoals):\n 1. stage = PREP \\<Longrightarrow>\n    vpeq u s (atomic_step_ipc tid dir stage partner page s)\n 2. stage = WAIT \\<Longrightarrow>\n    vpeq u s (atomic_step_ipc tid dir stage partner page s)\n 3. \\<And>x3.\n       stage = BUF x3 \\<Longrightarrow>\n       vpeq u s (atomic_step_ipc tid dir stage partner page s)", "case PREP"], ["proof (state)\nthis:\n  stage = PREP\n\ngoal (3 subgoals):\n 1. stage = PREP \\<Longrightarrow>\n    vpeq u s (atomic_step_ipc tid dir stage partner page s)\n 2. stage = WAIT \\<Longrightarrow>\n    vpeq u s (atomic_step_ipc tid dir stage partner page s)\n 3. \\<And>x3.\n       stage = BUF x3 \\<Longrightarrow>\n       vpeq u s (atomic_step_ipc tid dir stage partner page s)", "thus ?thesis"], ["proof (prove)\nusing this:\n  stage = PREP\n\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ipc tid dir stage partner page s)", "unfolding atomic_step_ipc_def"], ["proof (prove)\nusing this:\n  stage = PREP\n\ngoal (1 subgoal):\n 1. vpeq u s\n     (case stage of\n      BUF page' \\<Rightarrow>\n        case dir of\n        SEND \\<Rightarrow>\n          set_object_value (PAGE page') (obj s (PAGE page)) s\n        | RECV \\<Rightarrow> s\n      | _ \\<Rightarrow> s)", "using vpeq_refl"], ["proof (prove)\nusing this:\n  stage = PREP\n  vpeq ?u ?s ?s\n\ngoal (1 subgoal):\n 1. vpeq u s\n     (case stage of\n      BUF page' \\<Rightarrow>\n        case dir of\n        SEND \\<Rightarrow>\n          set_object_value (PAGE page') (obj s (PAGE page)) s\n        | RECV \\<Rightarrow> s\n      | _ \\<Rightarrow> s)", "by simp"], ["proof (state)\nthis:\n  vpeq u s (atomic_step_ipc tid dir stage partner page s)\n\ngoal (2 subgoals):\n 1. stage = WAIT \\<Longrightarrow>\n    vpeq u s (atomic_step_ipc tid dir stage partner page s)\n 2. \\<And>x3.\n       stage = BUF x3 \\<Longrightarrow>\n       vpeq u s (atomic_step_ipc tid dir stage partner page s)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. stage = WAIT \\<Longrightarrow>\n    vpeq u s (atomic_step_ipc tid dir stage partner page s)\n 2. \\<And>x3.\n       stage = BUF x3 \\<Longrightarrow>\n       vpeq u s (atomic_step_ipc tid dir stage partner page s)", "case WAIT"], ["proof (state)\nthis:\n  stage = WAIT\n\ngoal (2 subgoals):\n 1. stage = WAIT \\<Longrightarrow>\n    vpeq u s (atomic_step_ipc tid dir stage partner page s)\n 2. \\<And>x3.\n       stage = BUF x3 \\<Longrightarrow>\n       vpeq u s (atomic_step_ipc tid dir stage partner page s)", "thus ?thesis"], ["proof (prove)\nusing this:\n  stage = WAIT\n\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ipc tid dir stage partner page s)", "unfolding atomic_step_ipc_def"], ["proof (prove)\nusing this:\n  stage = WAIT\n\ngoal (1 subgoal):\n 1. vpeq u s\n     (case stage of\n      BUF page' \\<Rightarrow>\n        case dir of\n        SEND \\<Rightarrow>\n          set_object_value (PAGE page') (obj s (PAGE page)) s\n        | RECV \\<Rightarrow> s\n      | _ \\<Rightarrow> s)", "using vpeq_refl"], ["proof (prove)\nusing this:\n  stage = WAIT\n  vpeq ?u ?s ?s\n\ngoal (1 subgoal):\n 1. vpeq u s\n     (case stage of\n      BUF page' \\<Rightarrow>\n        case dir of\n        SEND \\<Rightarrow>\n          set_object_value (PAGE page') (obj s (PAGE page)) s\n        | RECV \\<Rightarrow> s\n      | _ \\<Rightarrow> s)", "by simp"], ["proof (state)\nthis:\n  vpeq u s (atomic_step_ipc tid dir stage partner page s)\n\ngoal (1 subgoal):\n 1. \\<And>x3.\n       stage = BUF x3 \\<Longrightarrow>\n       vpeq u s (atomic_step_ipc tid dir stage partner page s)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x3.\n       stage = BUF x3 \\<Longrightarrow>\n       vpeq u s (atomic_step_ipc tid dir stage partner page s)", "case (BUF mypage)"], ["proof (state)\nthis:\n  stage = BUF mypage\n\ngoal (1 subgoal):\n 1. \\<And>x3.\n       stage = BUF x3 \\<Longrightarrow>\n       vpeq u s (atomic_step_ipc tid dir stage partner page s)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ipc tid dir stage partner page s)", "proof(cases dir)"], ["proof (state)\ngoal (2 subgoals):\n 1. dir = SEND \\<Longrightarrow>\n    vpeq u s (atomic_step_ipc tid dir stage partner page s)\n 2. dir = RECV \\<Longrightarrow>\n    vpeq u s (atomic_step_ipc tid dir stage partner page s)", "case RECV"], ["proof (state)\nthis:\n  dir = RECV\n\ngoal (2 subgoals):\n 1. dir = SEND \\<Longrightarrow>\n    vpeq u s (atomic_step_ipc tid dir stage partner page s)\n 2. dir = RECV \\<Longrightarrow>\n    vpeq u s (atomic_step_ipc tid dir stage partner page s)", "thus ?thesis"], ["proof (prove)\nusing this:\n  dir = RECV\n\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ipc tid dir stage partner page s)", "unfolding atomic_step_ipc_def"], ["proof (prove)\nusing this:\n  dir = RECV\n\ngoal (1 subgoal):\n 1. vpeq u s\n     (case stage of\n      BUF page' \\<Rightarrow>\n        case dir of\n        SEND \\<Rightarrow>\n          set_object_value (PAGE page') (obj s (PAGE page)) s\n        | RECV \\<Rightarrow> s\n      | _ \\<Rightarrow> s)", "using vpeq_refl BUF"], ["proof (prove)\nusing this:\n  dir = RECV\n  vpeq ?u ?s ?s\n  stage = BUF mypage\n\ngoal (1 subgoal):\n 1. vpeq u s\n     (case stage of\n      BUF page' \\<Rightarrow>\n        case dir of\n        SEND \\<Rightarrow>\n          set_object_value (PAGE page') (obj s (PAGE page)) s\n        | RECV \\<Rightarrow> s\n      | _ \\<Rightarrow> s)", "by simp"], ["proof (state)\nthis:\n  vpeq u s (atomic_step_ipc tid dir stage partner page s)\n\ngoal (1 subgoal):\n 1. dir = SEND \\<Longrightarrow>\n    vpeq u s (atomic_step_ipc tid dir stage partner page s)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. dir = SEND \\<Longrightarrow>\n    vpeq u s (atomic_step_ipc tid dir stage partner page s)", "case SEND"], ["proof (state)\nthis:\n  dir = SEND\n\ngoal (1 subgoal):\n 1. dir = SEND \\<Longrightarrow>\n    vpeq u s (atomic_step_ipc tid dir stage partner page s)", "have \"Policy.sp_spec_subj_subj (partition tid) (partition partner)\"\n       and \"Policy.sp_spec_subj_obj (partition partner) (PAGE mypage) WRITE\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Policy.sp_spec_subj_subj (Step.partition tid)\n     (Step.partition partner) &&&\n    Policy.sp_spec_subj_obj (Step.partition partner) (PAGE mypage) WRITE", "using BUF SEND inv prec ipt_case"], ["proof (prove)\nusing this:\n  stage = BUF mypage\n  dir = SEND\n  atomic_step_invariant s\n  atomic_step_precondition s tid (SK_IPC dir stage partner pag)\n  ipt = SK_IPC dir stage partner page\n\ngoal (1 subgoal):\n 1. Policy.sp_spec_subj_subj (Step.partition tid)\n     (Step.partition partner) &&&\n    Policy.sp_spec_subj_obj (Step.partition partner) (PAGE mypage) WRITE", "unfolding atomic_step_invariant_def sp_subset_def"], ["proof (prove)\nusing this:\n  stage = BUF mypage\n  dir = SEND\n  (\\<forall>p1 p2.\n      sp_impl_subj_subj s p1 p2 \\<longrightarrow>\n      Policy.sp_spec_subj_subj p1 p2) \\<and>\n  (\\<forall>p1 p2 m.\n      sp_impl_subj_obj s p1 p2 m \\<longrightarrow>\n      Policy.sp_spec_subj_obj p1 p2 m)\n  atomic_step_precondition s tid (SK_IPC dir stage partner pag)\n  ipt = SK_IPC dir stage partner page\n\ngoal (1 subgoal):\n 1. Policy.sp_spec_subj_subj (Step.partition tid)\n     (Step.partition partner) &&&\n    Policy.sp_spec_subj_obj (Step.partition partner) (PAGE mypage) WRITE", "unfolding atomic_step_precondition_def ipc_precondition_def opposite_ipc_direction_def"], ["proof (prove)\nusing this:\n  stage = BUF mypage\n  dir = SEND\n  (\\<forall>p1 p2.\n      sp_impl_subj_subj s p1 p2 \\<longrightarrow>\n      Policy.sp_spec_subj_subj p1 p2) \\<and>\n  (\\<forall>p1 p2 m.\n      sp_impl_subj_obj s p1 p2 m \\<longrightarrow>\n      Policy.sp_spec_subj_obj p1 p2 m)\n  case SK_IPC dir stage partner pag of\n  SK_IPC dir PREP partner page \\<Rightarrow> True\n  | SK_IPC dir WAIT partner page \\<Rightarrow>\n      let sender =\n            case dir of SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner;\n          receiver =\n            case dir of SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid;\n          local_access_mode =\n            case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE\n      in sp_impl_subj_subj s (Step.partition sender)\n          (Step.partition receiver) \\<and>\n         sp_impl_subj_obj s (Step.partition tid) (PAGE page)\n          local_access_mode\n  | SK_IPC dir (BUF page') partner page \\<Rightarrow>\n      (let sender =\n             case dir of SEND \\<Rightarrow> tid\n             | RECV \\<Rightarrow> partner;\n           receiver =\n             case dir of SEND \\<Rightarrow> partner\n             | RECV \\<Rightarrow> tid;\n           local_access_mode =\n             case dir of SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE\n       in sp_impl_subj_subj s (Step.partition sender)\n           (Step.partition receiver) \\<and>\n          sp_impl_subj_obj s (Step.partition tid) (PAGE page)\n           local_access_mode) \\<and>\n      (let sender =\n             case case dir of SEND \\<Rightarrow> RECV\n                  | RECV \\<Rightarrow> SEND of\n             SEND \\<Rightarrow> partner | RECV \\<Rightarrow> tid;\n           receiver =\n             case case dir of SEND \\<Rightarrow> RECV\n                  | RECV \\<Rightarrow> SEND of\n             SEND \\<Rightarrow> tid | RECV \\<Rightarrow> partner;\n           local_access_mode =\n             case case dir of SEND \\<Rightarrow> RECV\n                  | RECV \\<Rightarrow> SEND of\n             SEND \\<Rightarrow> READ | RECV \\<Rightarrow> WRITE\n       in sp_impl_subj_subj s (Step.partition sender)\n           (Step.partition receiver) \\<and>\n          sp_impl_subj_obj s (Step.partition partner) (PAGE page')\n           local_access_mode)\n  | SK_EV_SIGNAL EV_SIGNAL_PREP partner \\<Rightarrow> True\n  | SK_EV_SIGNAL EV_SIGNAL_FINISH partner \\<Rightarrow>\n      ev_signal_precondition tid partner s\n  | _ \\<Rightarrow> True\n  ipt = SK_IPC dir stage partner page\n\ngoal (1 subgoal):\n 1. Policy.sp_spec_subj_subj (Step.partition tid)\n     (Step.partition partner) &&&\n    Policy.sp_spec_subj_obj (Step.partition partner) (PAGE mypage) WRITE", "by auto"], ["proof (state)\nthis:\n  Policy.sp_spec_subj_subj (Step.partition tid) (Step.partition partner)\n  Policy.sp_spec_subj_obj (Step.partition partner) (PAGE mypage) WRITE\n\ngoal (1 subgoal):\n 1. dir = SEND \\<Longrightarrow>\n    vpeq u s (atomic_step_ipc tid dir stage partner page s)", "hence \"\\<not> Policy.sp_spec_subj_obj u (PAGE mypage) READ\""], ["proof (prove)\nusing this:\n  Policy.sp_spec_subj_subj (Step.partition tid) (Step.partition partner)\n  Policy.sp_spec_subj_obj (Step.partition partner) (PAGE mypage) WRITE\n\ngoal (1 subgoal):\n 1. \\<not> Policy.sp_spec_subj_obj u (PAGE mypage) READ", "using no Policy_properties.ifp_compatible_with_ipc"], ["proof (prove)\nusing this:\n  Policy.sp_spec_subj_subj (Step.partition tid) (Step.partition partner)\n  Policy.sp_spec_subj_obj (Step.partition partner) (PAGE mypage) WRITE\n  \\<not> Policy.ifp (Step.partition tid) u\n  \\<forall>a b c x.\n     Policy.sp_spec_subj_subj a b \\<and>\n     Policy.sp_spec_subj_obj b (PAGE x) WRITE \\<and>\n     Policy.sp_spec_subj_obj c (PAGE x) READ \\<longrightarrow>\n     Policy.ifp a c\n\ngoal (1 subgoal):\n 1. \\<not> Policy.sp_spec_subj_obj u (PAGE mypage) READ", "by auto"], ["proof (state)\nthis:\n  \\<not> Policy.sp_spec_subj_obj u (PAGE mypage) READ\n\ngoal (1 subgoal):\n 1. dir = SEND \\<Longrightarrow>\n    vpeq u s (atomic_step_ipc tid dir stage partner page s)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> Policy.sp_spec_subj_obj u (PAGE mypage) READ\n\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ipc tid dir stage partner page s)", "using BUF SEND assms"], ["proof (prove)\nusing this:\n  \\<not> Policy.sp_spec_subj_obj u (PAGE mypage) READ\n  stage = BUF mypage\n  dir = SEND\n  \\<not> Policy.ifp (Step.partition tid) u\n  atomic_step_invariant s\n  atomic_step_precondition s tid (SK_IPC dir stage partner pag)\n  ipt = SK_IPC dir stage partner page\n\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ipc tid dir stage partner page s)", "unfolding atomic_step_ipc_def set_object_value_def"], ["proof (prove)\nusing this:\n  \\<not> Policy.sp_spec_subj_obj u (PAGE mypage) READ\n  stage = BUF mypage\n  dir = SEND\n  \\<not> Policy.ifp (Step.partition tid) u\n  atomic_step_invariant s\n  atomic_step_precondition s tid (SK_IPC dir stage partner pag)\n  ipt = SK_IPC dir stage partner page\n\ngoal (1 subgoal):\n 1. vpeq u s\n     (case stage of\n      BUF page' \\<Rightarrow>\n        case dir of\n        SEND \\<Rightarrow> s\n          \\<lparr>obj := (obj s)(PAGE page' := obj s (PAGE page))\\<rparr>\n        | RECV \\<Rightarrow> s\n      | _ \\<Rightarrow> s)", "unfolding vpeq_def vpeq_obj_def vpeq_subj_obj_def vpeq_subj_subj_def vpeq_local_def"], ["proof (prove)\nusing this:\n  \\<not> Policy.sp_spec_subj_obj u (PAGE mypage) READ\n  stage = BUF mypage\n  dir = SEND\n  \\<not> Policy.ifp (Step.partition tid) u\n  atomic_step_invariant s\n  atomic_step_precondition s tid (SK_IPC dir stage partner pag)\n  ipt = SK_IPC dir stage partner page\n\ngoal (1 subgoal):\n 1. (\\<forall>obj_id.\n        Policy.sp_spec_subj_obj u obj_id READ \\<longrightarrow>\n        obj s obj_id =\n        obj (case stage of\n             BUF page' \\<Rightarrow>\n               case dir of\n               SEND \\<Rightarrow> s\n                 \\<lparr>obj := (obj s)\n                           (PAGE page' := obj s (PAGE page))\\<rparr>\n               | RECV \\<Rightarrow> s\n             | _ \\<Rightarrow> s)\n         obj_id) \\<and>\n    (\\<forall>v.\n        (Policy.sp_spec_subj_subj u v \\<longrightarrow>\n         sp_impl_subj_subj s u v =\n         sp_impl_subj_subj\n          (case stage of\n           BUF page' \\<Rightarrow>\n             case dir of\n             SEND \\<Rightarrow> s\n               \\<lparr>obj := (obj s)\n                         (PAGE page' := obj s (PAGE page))\\<rparr>\n             | RECV \\<Rightarrow> s\n           | _ \\<Rightarrow> s)\n          u v) \\<and>\n        (Policy.sp_spec_subj_subj v u \\<longrightarrow>\n         sp_impl_subj_subj s v u =\n         sp_impl_subj_subj\n          (case stage of\n           BUF page' \\<Rightarrow>\n             case dir of\n             SEND \\<Rightarrow> s\n               \\<lparr>obj := (obj s)\n                         (PAGE page' := obj s (PAGE page))\\<rparr>\n             | RECV \\<Rightarrow> s\n           | _ \\<Rightarrow> s)\n          v u)) \\<and>\n    (\\<forall>ob m p1.\n        (Policy.sp_spec_subj_obj u ob m \\<longrightarrow>\n         sp_impl_subj_obj s u ob m =\n         sp_impl_subj_obj\n          (case stage of\n           BUF page' \\<Rightarrow>\n             case dir of\n             SEND \\<Rightarrow> s\n               \\<lparr>obj := (obj s)\n                         (PAGE page' := obj s (PAGE page))\\<rparr>\n             | RECV \\<Rightarrow> s\n           | _ \\<Rightarrow> s)\n          u ob m) \\<and>\n        (Policy.sp_spec_subj_obj p1 ob PROVIDE \\<and>\n         (Policy.sp_spec_subj_obj u ob READ \\<or>\n          Policy.sp_spec_subj_obj u ob WRITE) \\<longrightarrow>\n         sp_impl_subj_obj s p1 ob PROVIDE =\n         sp_impl_subj_obj\n          (case stage of\n           BUF page' \\<Rightarrow>\n             case dir of\n             SEND \\<Rightarrow> s\n               \\<lparr>obj := (obj s)\n                         (PAGE page' := obj s (PAGE page))\\<rparr>\n             | RECV \\<Rightarrow> s\n           | _ \\<Rightarrow> s)\n          p1 ob PROVIDE)) \\<and>\n    (\\<forall>tid.\n        Step.partition tid = u \\<longrightarrow>\n        thread s tid =\n        thread\n         (case stage of\n          BUF page' \\<Rightarrow>\n            case dir of\n            SEND \\<Rightarrow> s\n              \\<lparr>obj := (obj s)\n                        (PAGE page' := obj s (PAGE page))\\<rparr>\n            | RECV \\<Rightarrow> s\n          | _ \\<Rightarrow> s)\n         tid)", "by auto"], ["proof (state)\nthis:\n  vpeq u s (atomic_step_ipc tid dir stage partner page s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  vpeq u s (atomic_step_ipc tid dir stage partner page s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ev_signal_respects_policy:\n  assumes no: \"\\<not> Policy.ifp (partition tid) u\"\n    and inv: \"atomic_step_invariant s\"\n    and prec: \"atomic_step_precondition s tid (SK_EV_SIGNAL EV_SIGNAL_FINISH partner)\"\n    and ipt_case: \"ipt = SK_EV_SIGNAL EV_SIGNAL_FINISH partner\"\n  shows \"vpeq u s (atomic_step_ev_signal tid partner s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ev_signal tid partner s)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ev_signal tid partner s)", "from inv no"], ["proof (chain)\npicking this:\n  atomic_step_invariant s\n  \\<not> Policy.ifp (Step.partition tid) u", "have \"\\<not> sp_impl_subj_subj s (partition tid) u\""], ["proof (prove)\nusing this:\n  atomic_step_invariant s\n  \\<not> Policy.ifp (Step.partition tid) u\n\ngoal (1 subgoal):\n 1. \\<not> sp_impl_subj_subj s (Step.partition tid) u", "unfolding Policy.ifp_def atomic_step_invariant_def sp_subset_def"], ["proof (prove)\nusing this:\n  (\\<forall>p1 p2.\n      sp_impl_subj_subj s p1 p2 \\<longrightarrow>\n      Policy.sp_spec_subj_subj p1 p2) \\<and>\n  (\\<forall>p1 p2 m.\n      sp_impl_subj_obj s p1 p2 m \\<longrightarrow>\n      Policy.sp_spec_subj_obj p1 p2 m)\n  \\<not> (Policy.sp_spec_subj_subj (Step.partition tid) u \\<or>\n          Policy.sp_spec_subj_subj u (Step.partition tid) \\<or>\n          (\\<exists>c y.\n              Policy.sp_spec_subj_subj (Step.partition tid) c \\<and>\n              Policy.sp_spec_subj_obj c (PAGE y) WRITE \\<and>\n              Policy.sp_spec_subj_obj u (PAGE y) READ) \\<or>\n          Step.partition tid = u)\n\ngoal (1 subgoal):\n 1. \\<not> sp_impl_subj_subj s (Step.partition tid) u", "by auto"], ["proof (state)\nthis:\n  \\<not> sp_impl_subj_subj s (Step.partition tid) u\n\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ev_signal tid partner s)", "with prec"], ["proof (chain)\npicking this:\n  atomic_step_precondition s tid (SK_EV_SIGNAL EV_SIGNAL_FINISH partner)\n  \\<not> sp_impl_subj_subj s (Step.partition tid) u", "have 1:\"(partition partner) \\<noteq> u\""], ["proof (prove)\nusing this:\n  atomic_step_precondition s tid (SK_EV_SIGNAL EV_SIGNAL_FINISH partner)\n  \\<not> sp_impl_subj_subj s (Step.partition tid) u\n\ngoal (1 subgoal):\n 1. Step.partition partner \\<noteq> u", "unfolding atomic_step_precondition_def ev_signal_precondition_def"], ["proof (prove)\nusing this:\n  case SK_EV_SIGNAL EV_SIGNAL_FINISH partner of\n  SK_IPC dir PREP partner page \\<Rightarrow> True\n  | SK_IPC dir WAIT partner page \\<Rightarrow>\n      ipc_precondition tid dir partner page s\n  | SK_IPC dir (BUF page') partner page \\<Rightarrow>\n      ipc_precondition tid dir partner page s \\<and>\n      ipc_precondition partner (opposite_ipc_direction dir) tid page' s\n  | SK_EV_SIGNAL EV_SIGNAL_PREP partner \\<Rightarrow> True\n  | SK_EV_SIGNAL EV_SIGNAL_FINISH partner \\<Rightarrow>\n      sp_impl_subj_subj s (Step.partition tid) (Step.partition partner)\n  | _ \\<Rightarrow> True\n  \\<not> sp_impl_subj_subj s (Step.partition tid) u\n\ngoal (1 subgoal):\n 1. Step.partition partner \\<noteq> u", "by (auto simp add: ev_signal_stage_t.splits)"], ["proof (state)\nthis:\n  Step.partition partner \\<noteq> u\n\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ev_signal tid partner s)", "then"], ["proof (chain)\npicking this:\n  Step.partition partner \\<noteq> u", "have 2:\"vpeq_local u s (atomic_step_ev_signal tid partner s)\""], ["proof (prove)\nusing this:\n  Step.partition partner \\<noteq> u\n\ngoal (1 subgoal):\n 1. vpeq_local u s (atomic_step_ev_signal tid partner s)", "unfolding vpeq_local_def atomic_step_ev_signal_def"], ["proof (prove)\nusing this:\n  Step.partition partner \\<noteq> u\n\ngoal (1 subgoal):\n 1. \\<forall>tid.\n       Step.partition tid = u \\<longrightarrow>\n       thread s tid =\n       thread\n        (s\\<lparr>thread := (thread s)\n                    (partner := thread s partner\n                       \\<lparr>ev_counter :=\n                                 Suc (ev_counter\n (thread s partner))\\<rparr>)\\<rparr>)\n        tid", "by simp"], ["proof (state)\nthis:\n  vpeq_local u s (atomic_step_ev_signal tid partner s)\n\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ev_signal tid partner s)", "have 3:\"vpeq_obj u s (atomic_step_ev_signal tid partner s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq_obj u s (atomic_step_ev_signal tid partner s)", "unfolding vpeq_obj_def atomic_step_ev_signal_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>obj_id.\n       Policy.sp_spec_subj_obj u obj_id READ \\<longrightarrow>\n       obj s obj_id =\n       obj (s\\<lparr>thread := (thread s)\n                       (partner := thread s partner\n                          \\<lparr>ev_counter :=\n                                    Suc (ev_counter\n    (thread s partner))\\<rparr>)\\<rparr>)\n        obj_id", "by simp"], ["proof (state)\nthis:\n  vpeq_obj u s (atomic_step_ev_signal tid partner s)\n\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ev_signal tid partner s)", "have 4:\"vpeq_subj_subj u s (atomic_step_ev_signal tid partner s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq_subj_subj u s (atomic_step_ev_signal tid partner s)", "unfolding vpeq_subj_subj_def atomic_step_ev_signal_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v.\n       (Policy.sp_spec_subj_subj u v \\<longrightarrow>\n        sp_impl_subj_subj s u v =\n        sp_impl_subj_subj\n         (s\\<lparr>thread := (thread s)\n                     (partner := thread s partner\n                        \\<lparr>ev_counter :=\n                                  Suc (ev_counter\n  (thread s partner))\\<rparr>)\\<rparr>)\n         u v) \\<and>\n       (Policy.sp_spec_subj_subj v u \\<longrightarrow>\n        sp_impl_subj_subj s v u =\n        sp_impl_subj_subj\n         (s\\<lparr>thread := (thread s)\n                     (partner := thread s partner\n                        \\<lparr>ev_counter :=\n                                  Suc (ev_counter\n  (thread s partner))\\<rparr>)\\<rparr>)\n         v u)", "by simp"], ["proof (state)\nthis:\n  vpeq_subj_subj u s (atomic_step_ev_signal tid partner s)\n\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ev_signal tid partner s)", "have 5:\"vpeq_subj_obj u s (atomic_step_ev_signal tid partner s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq_subj_obj u s (atomic_step_ev_signal tid partner s)", "unfolding vpeq_subj_obj_def atomic_step_ev_signal_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ob m p1.\n       (Policy.sp_spec_subj_obj u ob m \\<longrightarrow>\n        sp_impl_subj_obj s u ob m =\n        sp_impl_subj_obj\n         (s\\<lparr>thread := (thread s)\n                     (partner := thread s partner\n                        \\<lparr>ev_counter :=\n                                  Suc (ev_counter\n  (thread s partner))\\<rparr>)\\<rparr>)\n         u ob m) \\<and>\n       (Policy.sp_spec_subj_obj p1 ob PROVIDE \\<and>\n        (Policy.sp_spec_subj_obj u ob READ \\<or>\n         Policy.sp_spec_subj_obj u ob WRITE) \\<longrightarrow>\n        sp_impl_subj_obj s p1 ob PROVIDE =\n        sp_impl_subj_obj\n         (s\\<lparr>thread := (thread s)\n                     (partner := thread s partner\n                        \\<lparr>ev_counter :=\n                                  Suc (ev_counter\n  (thread s partner))\\<rparr>)\\<rparr>)\n         p1 ob PROVIDE)", "by simp"], ["proof (state)\nthis:\n  vpeq_subj_obj u s (atomic_step_ev_signal tid partner s)\n\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ev_signal tid partner s)", "with 2 3 4 5"], ["proof (chain)\npicking this:\n  vpeq_local u s (atomic_step_ev_signal tid partner s)\n  vpeq_obj u s (atomic_step_ev_signal tid partner s)\n  vpeq_subj_subj u s (atomic_step_ev_signal tid partner s)\n  vpeq_subj_obj u s (atomic_step_ev_signal tid partner s)\n  vpeq_subj_obj u s (atomic_step_ev_signal tid partner s)", "show ?thesis"], ["proof (prove)\nusing this:\n  vpeq_local u s (atomic_step_ev_signal tid partner s)\n  vpeq_obj u s (atomic_step_ev_signal tid partner s)\n  vpeq_subj_subj u s (atomic_step_ev_signal tid partner s)\n  vpeq_subj_obj u s (atomic_step_ev_signal tid partner s)\n  vpeq_subj_obj u s (atomic_step_ev_signal tid partner s)\n\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ev_signal tid partner s)", "unfolding vpeq_def"], ["proof (prove)\nusing this:\n  vpeq_local u s (atomic_step_ev_signal tid partner s)\n  vpeq_obj u s (atomic_step_ev_signal tid partner s)\n  vpeq_subj_subj u s (atomic_step_ev_signal tid partner s)\n  vpeq_subj_obj u s (atomic_step_ev_signal tid partner s)\n  vpeq_subj_obj u s (atomic_step_ev_signal tid partner s)\n\ngoal (1 subgoal):\n 1. vpeq_obj u s (atomic_step_ev_signal tid partner s) \\<and>\n    vpeq_subj_subj u s (atomic_step_ev_signal tid partner s) \\<and>\n    vpeq_subj_obj u s (atomic_step_ev_signal tid partner s) \\<and>\n    vpeq_local u s (atomic_step_ev_signal tid partner s)", "by simp"], ["proof (state)\nthis:\n  vpeq u s (atomic_step_ev_signal tid partner s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ev_wait_all_respects_policy:\n  assumes no: \"\\<not> Policy.ifp (partition tid) u\"\n    and inv: \"atomic_step_invariant s\"\n    and prec: \"atomic_step_precondition s tid ipt\"\n    and ipt_case: \"ipt = SK_EV_WAIT ev_wait_stage EV_CONSUME_ALL\"\n  shows \"vpeq u s (atomic_step_ev_wait_all tid s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ev_wait_all tid s)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ev_wait_all tid s)", "from assms"], ["proof (chain)\npicking this:\n  \\<not> Policy.ifp (Step.partition tid) u\n  atomic_step_invariant s\n  atomic_step_precondition s tid ipt\n  ipt = SK_EV_WAIT ev_wait_stage EV_CONSUME_ALL", "have 1:\"(partition tid) \\<noteq> u\""], ["proof (prove)\nusing this:\n  \\<not> Policy.ifp (Step.partition tid) u\n  atomic_step_invariant s\n  atomic_step_precondition s tid ipt\n  ipt = SK_EV_WAIT ev_wait_stage EV_CONSUME_ALL\n\ngoal (1 subgoal):\n 1. Step.partition tid \\<noteq> u", "unfolding Policy.ifp_def"], ["proof (prove)\nusing this:\n  \\<not> (Policy.sp_spec_subj_subj (Step.partition tid) u \\<or>\n          Policy.sp_spec_subj_subj u (Step.partition tid) \\<or>\n          (\\<exists>c y.\n              Policy.sp_spec_subj_subj (Step.partition tid) c \\<and>\n              Policy.sp_spec_subj_obj c (PAGE y) WRITE \\<and>\n              Policy.sp_spec_subj_obj u (PAGE y) READ) \\<or>\n          Step.partition tid = u)\n  atomic_step_invariant s\n  atomic_step_precondition s tid ipt\n  ipt = SK_EV_WAIT ev_wait_stage EV_CONSUME_ALL\n\ngoal (1 subgoal):\n 1. Step.partition tid \\<noteq> u", "by simp"], ["proof (state)\nthis:\n  Step.partition tid \\<noteq> u\n\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ev_wait_all tid s)", "then"], ["proof (chain)\npicking this:\n  Step.partition tid \\<noteq> u", "have 2:\"vpeq_local u s (atomic_step_ev_wait_all tid s)\""], ["proof (prove)\nusing this:\n  Step.partition tid \\<noteq> u\n\ngoal (1 subgoal):\n 1. vpeq_local u s (atomic_step_ev_wait_all tid s)", "unfolding vpeq_local_def atomic_step_ev_wait_all_def"], ["proof (prove)\nusing this:\n  Step.partition tid \\<noteq> u\n\ngoal (1 subgoal):\n 1. \\<forall>tida.\n       Step.partition tida = u \\<longrightarrow>\n       thread s tida =\n       thread\n        (s\\<lparr>thread := (thread s)\n                    (tid := thread s tid\n                       \\<lparr>ev_counter := 0\\<rparr>)\\<rparr>)\n        tida", "by simp"], ["proof (state)\nthis:\n  vpeq_local u s (atomic_step_ev_wait_all tid s)\n\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ev_wait_all tid s)", "have 3:\"vpeq_obj u s (atomic_step_ev_wait_all tid s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq_obj u s (atomic_step_ev_wait_all tid s)", "unfolding vpeq_obj_def atomic_step_ev_wait_all_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>obj_id.\n       Policy.sp_spec_subj_obj u obj_id READ \\<longrightarrow>\n       obj s obj_id =\n       obj (s\\<lparr>thread := (thread s)\n                       (tid := thread s tid\n                          \\<lparr>ev_counter := 0\\<rparr>)\\<rparr>)\n        obj_id", "by simp"], ["proof (state)\nthis:\n  vpeq_obj u s (atomic_step_ev_wait_all tid s)\n\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ev_wait_all tid s)", "have 4:\"vpeq_subj_subj u s (atomic_step_ev_wait_all tid s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq_subj_subj u s (atomic_step_ev_wait_all tid s)", "unfolding vpeq_subj_subj_def atomic_step_ev_wait_all_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v.\n       (Policy.sp_spec_subj_subj u v \\<longrightarrow>\n        sp_impl_subj_subj s u v =\n        sp_impl_subj_subj\n         (s\\<lparr>thread := (thread s)\n                     (tid := thread s tid\n                        \\<lparr>ev_counter := 0\\<rparr>)\\<rparr>)\n         u v) \\<and>\n       (Policy.sp_spec_subj_subj v u \\<longrightarrow>\n        sp_impl_subj_subj s v u =\n        sp_impl_subj_subj\n         (s\\<lparr>thread := (thread s)\n                     (tid := thread s tid\n                        \\<lparr>ev_counter := 0\\<rparr>)\\<rparr>)\n         v u)", "by simp"], ["proof (state)\nthis:\n  vpeq_subj_subj u s (atomic_step_ev_wait_all tid s)\n\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ev_wait_all tid s)", "have 5:\"vpeq_subj_obj u s (atomic_step_ev_wait_all tid s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq_subj_obj u s (atomic_step_ev_wait_all tid s)", "unfolding vpeq_subj_obj_def atomic_step_ev_wait_all_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ob m p1.\n       (Policy.sp_spec_subj_obj u ob m \\<longrightarrow>\n        sp_impl_subj_obj s u ob m =\n        sp_impl_subj_obj\n         (s\\<lparr>thread := (thread s)\n                     (tid := thread s tid\n                        \\<lparr>ev_counter := 0\\<rparr>)\\<rparr>)\n         u ob m) \\<and>\n       (Policy.sp_spec_subj_obj p1 ob PROVIDE \\<and>\n        (Policy.sp_spec_subj_obj u ob READ \\<or>\n         Policy.sp_spec_subj_obj u ob WRITE) \\<longrightarrow>\n        sp_impl_subj_obj s p1 ob PROVIDE =\n        sp_impl_subj_obj\n         (s\\<lparr>thread := (thread s)\n                     (tid := thread s tid\n                        \\<lparr>ev_counter := 0\\<rparr>)\\<rparr>)\n         p1 ob PROVIDE)", "by simp"], ["proof (state)\nthis:\n  vpeq_subj_obj u s (atomic_step_ev_wait_all tid s)\n\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ev_wait_all tid s)", "with 2 3 4 5"], ["proof (chain)\npicking this:\n  vpeq_local u s (atomic_step_ev_wait_all tid s)\n  vpeq_obj u s (atomic_step_ev_wait_all tid s)\n  vpeq_subj_subj u s (atomic_step_ev_wait_all tid s)\n  vpeq_subj_obj u s (atomic_step_ev_wait_all tid s)\n  vpeq_subj_obj u s (atomic_step_ev_wait_all tid s)", "show ?thesis"], ["proof (prove)\nusing this:\n  vpeq_local u s (atomic_step_ev_wait_all tid s)\n  vpeq_obj u s (atomic_step_ev_wait_all tid s)\n  vpeq_subj_subj u s (atomic_step_ev_wait_all tid s)\n  vpeq_subj_obj u s (atomic_step_ev_wait_all tid s)\n  vpeq_subj_obj u s (atomic_step_ev_wait_all tid s)\n\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ev_wait_all tid s)", "unfolding vpeq_def"], ["proof (prove)\nusing this:\n  vpeq_local u s (atomic_step_ev_wait_all tid s)\n  vpeq_obj u s (atomic_step_ev_wait_all tid s)\n  vpeq_subj_subj u s (atomic_step_ev_wait_all tid s)\n  vpeq_subj_obj u s (atomic_step_ev_wait_all tid s)\n  vpeq_subj_obj u s (atomic_step_ev_wait_all tid s)\n\ngoal (1 subgoal):\n 1. vpeq_obj u s (atomic_step_ev_wait_all tid s) \\<and>\n    vpeq_subj_subj u s (atomic_step_ev_wait_all tid s) \\<and>\n    vpeq_subj_obj u s (atomic_step_ev_wait_all tid s) \\<and>\n    vpeq_local u s (atomic_step_ev_wait_all tid s)", "by simp"], ["proof (state)\nthis:\n  vpeq u s (atomic_step_ev_wait_all tid s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ev_wait_one_respects_policy:\n  assumes no: \"\\<not> Policy.ifp (partition tid) u\"\n    and inv: \"atomic_step_invariant s\"\n    and prec: \"atomic_step_precondition s tid ipt\"\n    and ipt_case: \"ipt = SK_EV_WAIT ev_wait_stage EV_CONSUME_ONE\"\n  shows \"vpeq u s (atomic_step_ev_wait_one tid s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ev_wait_one tid s)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ev_wait_one tid s)", "from assms"], ["proof (chain)\npicking this:\n  \\<not> Policy.ifp (Step.partition tid) u\n  atomic_step_invariant s\n  atomic_step_precondition s tid ipt\n  ipt = SK_EV_WAIT ev_wait_stage EV_CONSUME_ONE", "have 1:\"(partition tid) \\<noteq> u\""], ["proof (prove)\nusing this:\n  \\<not> Policy.ifp (Step.partition tid) u\n  atomic_step_invariant s\n  atomic_step_precondition s tid ipt\n  ipt = SK_EV_WAIT ev_wait_stage EV_CONSUME_ONE\n\ngoal (1 subgoal):\n 1. Step.partition tid \\<noteq> u", "unfolding Policy.ifp_def"], ["proof (prove)\nusing this:\n  \\<not> (Policy.sp_spec_subj_subj (Step.partition tid) u \\<or>\n          Policy.sp_spec_subj_subj u (Step.partition tid) \\<or>\n          (\\<exists>c y.\n              Policy.sp_spec_subj_subj (Step.partition tid) c \\<and>\n              Policy.sp_spec_subj_obj c (PAGE y) WRITE \\<and>\n              Policy.sp_spec_subj_obj u (PAGE y) READ) \\<or>\n          Step.partition tid = u)\n  atomic_step_invariant s\n  atomic_step_precondition s tid ipt\n  ipt = SK_EV_WAIT ev_wait_stage EV_CONSUME_ONE\n\ngoal (1 subgoal):\n 1. Step.partition tid \\<noteq> u", "by simp"], ["proof (state)\nthis:\n  Step.partition tid \\<noteq> u\n\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ev_wait_one tid s)", "then"], ["proof (chain)\npicking this:\n  Step.partition tid \\<noteq> u", "have 2:\"vpeq_local u s (atomic_step_ev_wait_one tid s)\""], ["proof (prove)\nusing this:\n  Step.partition tid \\<noteq> u\n\ngoal (1 subgoal):\n 1. vpeq_local u s (atomic_step_ev_wait_one tid s)", "unfolding vpeq_local_def atomic_step_ev_wait_one_def"], ["proof (prove)\nusing this:\n  Step.partition tid \\<noteq> u\n\ngoal (1 subgoal):\n 1. \\<forall>tida.\n       Step.partition tida = u \\<longrightarrow>\n       thread s tida =\n       thread\n        (s\\<lparr>thread := (thread s)\n                    (tid := thread s tid\n                       \\<lparr>ev_counter :=\n                                 ev_counter (thread s tid) -\n                                 1\\<rparr>)\\<rparr>)\n        tida", "by simp"], ["proof (state)\nthis:\n  vpeq_local u s (atomic_step_ev_wait_one tid s)\n\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ev_wait_one tid s)", "have 3:\"vpeq_obj u s (atomic_step_ev_wait_one tid s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq_obj u s (atomic_step_ev_wait_one tid s)", "unfolding vpeq_obj_def atomic_step_ev_wait_one_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>obj_id.\n       Policy.sp_spec_subj_obj u obj_id READ \\<longrightarrow>\n       obj s obj_id =\n       obj (s\\<lparr>thread := (thread s)\n                       (tid := thread s tid\n                          \\<lparr>ev_counter :=\n                                    ev_counter (thread s tid) -\n                                    1\\<rparr>)\\<rparr>)\n        obj_id", "by simp"], ["proof (state)\nthis:\n  vpeq_obj u s (atomic_step_ev_wait_one tid s)\n\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ev_wait_one tid s)", "have 4:\"vpeq_subj_subj u s (atomic_step_ev_wait_one tid s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq_subj_subj u s (atomic_step_ev_wait_one tid s)", "unfolding vpeq_subj_subj_def atomic_step_ev_wait_one_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v.\n       (Policy.sp_spec_subj_subj u v \\<longrightarrow>\n        sp_impl_subj_subj s u v =\n        sp_impl_subj_subj\n         (s\\<lparr>thread := (thread s)\n                     (tid := thread s tid\n                        \\<lparr>ev_counter :=\n                                  ev_counter (thread s tid) -\n                                  1\\<rparr>)\\<rparr>)\n         u v) \\<and>\n       (Policy.sp_spec_subj_subj v u \\<longrightarrow>\n        sp_impl_subj_subj s v u =\n        sp_impl_subj_subj\n         (s\\<lparr>thread := (thread s)\n                     (tid := thread s tid\n                        \\<lparr>ev_counter :=\n                                  ev_counter (thread s tid) -\n                                  1\\<rparr>)\\<rparr>)\n         v u)", "by simp"], ["proof (state)\nthis:\n  vpeq_subj_subj u s (atomic_step_ev_wait_one tid s)\n\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ev_wait_one tid s)", "have 5:\"vpeq_subj_obj u s (atomic_step_ev_wait_one tid s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq_subj_obj u s (atomic_step_ev_wait_one tid s)", "unfolding vpeq_subj_obj_def atomic_step_ev_wait_one_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ob m p1.\n       (Policy.sp_spec_subj_obj u ob m \\<longrightarrow>\n        sp_impl_subj_obj s u ob m =\n        sp_impl_subj_obj\n         (s\\<lparr>thread := (thread s)\n                     (tid := thread s tid\n                        \\<lparr>ev_counter :=\n                                  ev_counter (thread s tid) -\n                                  1\\<rparr>)\\<rparr>)\n         u ob m) \\<and>\n       (Policy.sp_spec_subj_obj p1 ob PROVIDE \\<and>\n        (Policy.sp_spec_subj_obj u ob READ \\<or>\n         Policy.sp_spec_subj_obj u ob WRITE) \\<longrightarrow>\n        sp_impl_subj_obj s p1 ob PROVIDE =\n        sp_impl_subj_obj\n         (s\\<lparr>thread := (thread s)\n                     (tid := thread s tid\n                        \\<lparr>ev_counter :=\n                                  ev_counter (thread s tid) -\n                                  1\\<rparr>)\\<rparr>)\n         p1 ob PROVIDE)", "by simp"], ["proof (state)\nthis:\n  vpeq_subj_obj u s (atomic_step_ev_wait_one tid s)\n\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ev_wait_one tid s)", "with 2 3 4 5"], ["proof (chain)\npicking this:\n  vpeq_local u s (atomic_step_ev_wait_one tid s)\n  vpeq_obj u s (atomic_step_ev_wait_one tid s)\n  vpeq_subj_subj u s (atomic_step_ev_wait_one tid s)\n  vpeq_subj_obj u s (atomic_step_ev_wait_one tid s)\n  vpeq_subj_obj u s (atomic_step_ev_wait_one tid s)", "show ?thesis"], ["proof (prove)\nusing this:\n  vpeq_local u s (atomic_step_ev_wait_one tid s)\n  vpeq_obj u s (atomic_step_ev_wait_one tid s)\n  vpeq_subj_subj u s (atomic_step_ev_wait_one tid s)\n  vpeq_subj_obj u s (atomic_step_ev_wait_one tid s)\n  vpeq_subj_obj u s (atomic_step_ev_wait_one tid s)\n\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step_ev_wait_one tid s)", "unfolding vpeq_def"], ["proof (prove)\nusing this:\n  vpeq_local u s (atomic_step_ev_wait_one tid s)\n  vpeq_obj u s (atomic_step_ev_wait_one tid s)\n  vpeq_subj_subj u s (atomic_step_ev_wait_one tid s)\n  vpeq_subj_obj u s (atomic_step_ev_wait_one tid s)\n  vpeq_subj_obj u s (atomic_step_ev_wait_one tid s)\n\ngoal (1 subgoal):\n 1. vpeq_obj u s (atomic_step_ev_wait_one tid s) \\<and>\n    vpeq_subj_subj u s (atomic_step_ev_wait_one tid s) \\<and>\n    vpeq_subj_obj u s (atomic_step_ev_wait_one tid s) \\<and>\n    vpeq_local u s (atomic_step_ev_wait_one tid s)", "by simp"], ["proof (state)\nthis:\n  vpeq u s (atomic_step_ev_wait_one tid s)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Summary theorems on view-partitioning locally respects\\<close>"], ["", "text \\<open>Atomic step locally respects the information flow policy (ifp). The policy ifp is not necessarily the same\n  as sp\\_spec\\_subj\\_subj.\\<close>"], ["", "theorem atomic_step_respects_policy:\n  assumes no: \"\\<not> Policy.ifp (partition (current s)) u\"\n      and inv: \"atomic_step_invariant s\"\n      and prec: \"atomic_step_precondition s (current s) ipt\"\n   shows \"vpeq u s (atomic_step s ipt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step s ipt)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step s ipt)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step s ipt)", "using assms ipc_respects_policy vpeq_refl\n                ev_signal_respects_policy ev_wait_one_respects_policy\n                ev_wait_all_respects_policy"], ["proof (prove)\nusing this:\n  \\<not> Policy.ifp (Step.partition (current s)) u\n  atomic_step_invariant s\n  atomic_step_precondition s (current s) ipt\n  \\<lbrakk>\\<not> Policy.ifp (Step.partition ?tid) ?u;\n   atomic_step_invariant ?s;\n   atomic_step_precondition ?s ?tid (SK_IPC ?dir ?stage ?partner ?pag);\n   ?ipt = SK_IPC ?dir ?stage ?partner ?page\\<rbrakk>\n  \\<Longrightarrow> vpeq ?u ?s\n                     (atomic_step_ipc ?tid ?dir ?stage ?partner ?page ?s)\n  vpeq ?u ?s ?s\n  \\<lbrakk>\\<not> Policy.ifp (Step.partition ?tid) ?u;\n   atomic_step_invariant ?s;\n   atomic_step_precondition ?s ?tid\n    (SK_EV_SIGNAL EV_SIGNAL_FINISH ?partner);\n   ?ipt = SK_EV_SIGNAL EV_SIGNAL_FINISH ?partner\\<rbrakk>\n  \\<Longrightarrow> vpeq ?u ?s (atomic_step_ev_signal ?tid ?partner ?s)\n  \\<lbrakk>\\<not> Policy.ifp (Step.partition ?tid) ?u;\n   atomic_step_invariant ?s; atomic_step_precondition ?s ?tid ?ipt;\n   ?ipt = SK_EV_WAIT ?ev_wait_stage EV_CONSUME_ONE\\<rbrakk>\n  \\<Longrightarrow> vpeq ?u ?s (atomic_step_ev_wait_one ?tid ?s)\n  \\<lbrakk>\\<not> Policy.ifp (Step.partition ?tid) ?u;\n   atomic_step_invariant ?s; atomic_step_precondition ?s ?tid ?ipt;\n   ?ipt = SK_EV_WAIT ?ev_wait_stage EV_CONSUME_ALL\\<rbrakk>\n  \\<Longrightarrow> vpeq ?u ?s (atomic_step_ev_wait_all ?tid ?s)\n\ngoal (1 subgoal):\n 1. vpeq u s (atomic_step s ipt)", "unfolding atomic_step_def"], ["proof (prove)\nusing this:\n  \\<not> Policy.ifp (Step.partition (current s)) u\n  atomic_step_invariant s\n  atomic_step_precondition s (current s) ipt\n  \\<lbrakk>\\<not> Policy.ifp (Step.partition ?tid) ?u;\n   atomic_step_invariant ?s;\n   atomic_step_precondition ?s ?tid (SK_IPC ?dir ?stage ?partner ?pag);\n   ?ipt = SK_IPC ?dir ?stage ?partner ?page\\<rbrakk>\n  \\<Longrightarrow> vpeq ?u ?s\n                     (atomic_step_ipc ?tid ?dir ?stage ?partner ?page ?s)\n  vpeq ?u ?s ?s\n  \\<lbrakk>\\<not> Policy.ifp (Step.partition ?tid) ?u;\n   atomic_step_invariant ?s;\n   atomic_step_precondition ?s ?tid\n    (SK_EV_SIGNAL EV_SIGNAL_FINISH ?partner);\n   ?ipt = SK_EV_SIGNAL EV_SIGNAL_FINISH ?partner\\<rbrakk>\n  \\<Longrightarrow> vpeq ?u ?s (atomic_step_ev_signal ?tid ?partner ?s)\n  \\<lbrakk>\\<not> Policy.ifp (Step.partition ?tid) ?u;\n   atomic_step_invariant ?s; atomic_step_precondition ?s ?tid ?ipt;\n   ?ipt = SK_EV_WAIT ?ev_wait_stage EV_CONSUME_ONE\\<rbrakk>\n  \\<Longrightarrow> vpeq ?u ?s (atomic_step_ev_wait_one ?tid ?s)\n  \\<lbrakk>\\<not> Policy.ifp (Step.partition ?tid) ?u;\n   atomic_step_invariant ?s; atomic_step_precondition ?s ?tid ?ipt;\n   ?ipt = SK_EV_WAIT ?ev_wait_stage EV_CONSUME_ALL\\<rbrakk>\n  \\<Longrightarrow> vpeq ?u ?s (atomic_step_ev_wait_all ?tid ?s)\n\ngoal (1 subgoal):\n 1. vpeq u s\n     (case ipt of\n      SK_IPC dir stage partner page \\<Rightarrow>\n        atomic_step_ipc (current s) dir stage partner page s\n      | SK_EV_WAIT EV_FINISH EV_CONSUME_ALL \\<Rightarrow>\n          atomic_step_ev_wait_all (current s) s\n      | SK_EV_WAIT EV_FINISH EV_CONSUME_ONE \\<Rightarrow>\n          atomic_step_ev_wait_one (current s) s\n      | SK_EV_WAIT _ consume \\<Rightarrow> s\n      | SK_EV_SIGNAL EV_SIGNAL_PREP partner \\<Rightarrow> s\n      | SK_EV_SIGNAL EV_SIGNAL_FINISH partner \\<Rightarrow>\n          atomic_step_ev_signal (current s) partner s\n      | NONE \\<Rightarrow> s)", "by (auto split: int_point_t.splits ev_consume_t.splits ev_wait_stage_t.splits ev_signal_stage_t.splits)"], ["proof (state)\nthis:\n  vpeq u s (atomic_step s ipt)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}