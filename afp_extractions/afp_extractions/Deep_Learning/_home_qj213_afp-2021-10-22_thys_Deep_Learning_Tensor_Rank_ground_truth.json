{"file_name": "/home/qj213/afp-2021-10-22/thys/Deep_Learning/Tensor_Rank.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Deep_Learning", "problem_names": ["lemma cprank_max1_order0: \"cprank_max1 B \\<Longrightarrow> order A = 0 \\<Longrightarrow> cprank_max1 (A \\<otimes> B)\"", "lemma cprank_max1_order_le1: \"order A \\<le> 0 \\<Longrightarrow> cprank_max1 B \\<Longrightarrow> cprank_max1 (A \\<otimes> B)\"", "lemma cprank_max1_prod: \"cprank_max1 A \\<Longrightarrow> cprank_max1 B \\<Longrightarrow> cprank_max1 (A \\<otimes> B)\"", "lemma cprank_max1_prod_list:\nassumes \"\\<And>B. B\\<in>set Bs \\<Longrightarrow> cprank_max1 B\"\nshows \"cprank_max1 (prod_list Bs)\"", "lemma cprank_max1_prod_listE:\n  fixes A::\"'a::comm_ring_1 tensor\"\n  assumes \"cprank_max1 A\"\n  obtains Bs a where \"\\<And>B. B\\<in>set Bs \\<Longrightarrow> order B = 1\" \"a \\<cdot> prod_list Bs = A\"", "lemma cprank_max1: \"cprank_max1 A \\<Longrightarrow> cprank_max 1 A\"", "lemma cprank_max_plus: \"cprank_max i A \\<Longrightarrow> cprank_max j B \\<Longrightarrow> dims A = dims B \\<Longrightarrow> cprank_max (i+j) (A+B)\"", "lemma cprank_max_listsum:\nassumes \"\\<And>A. A\\<in>set As \\<Longrightarrow> dims A = ds\"\nand \"\\<And>A. A\\<in>set As \\<Longrightarrow> cprank_max n A\"\nshows \"cprank_max (n*length As) (listsum ds As)\"", "lemma cprank_maxE:\nassumes \"cprank_max n A\"\nobtains BS where \"(\\<And>B. B\\<in>set BS \\<Longrightarrow> cprank_max1 B)\" and \"(\\<And>B. B\\<in>set BS \\<Longrightarrow> dims A = dims B)\" and \"listsum (dims A) BS = A\" and \"length BS = n\"", "lemma cprank_maxI:\nassumes \"\\<And>B. B\\<in>set BS \\<Longrightarrow> cprank_max1 B\"\nand \"\\<And>B. B\\<in>set BS \\<Longrightarrow> dims B = ds\"\nshows \"cprank_max (length BS) (listsum ds BS)\"", "lemma cprank_max_0E: \"cprank_max 0 A \\<Longrightarrow> A = tensor0 (dims A)\"", "lemma listsum_prod_distr_right:\nassumes \"(\\<And>C. C\\<in>set CS \\<Longrightarrow> dims C = ds)\"\nshows \"A \\<otimes> listsum ds CS = listsum (dims A @ ds) (map (\\<lambda>C. A \\<otimes> C) CS)\"", "lemma cprank_max_prod_order1:\nassumes \"order A = 1\"\nand \"cprank_max n B\"\nshows \"cprank_max n (A\\<otimes>B)\"", "lemma cprank_max_upper_bound: (* Stronger bound is possible, one of the factors in prod_list can be dropped. *)\nshows \"cprank_max (prod_list (dims A)) A\"", "lemma cprank_upper_bound: \"cprank A \\<le> prod_list (dims A)\"", "lemma cprank_max_cprank: \"cprank_max (cprank A) A\""], "translations": [["", "lemma cprank_max1_order0: \"cprank_max1 B \\<Longrightarrow> order A = 0 \\<Longrightarrow> cprank_max1 (A \\<otimes> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>cprank_max1 B; order A = 0\\<rbrakk>\n    \\<Longrightarrow> cprank_max1 (A \\<otimes> B)", "proof (induction B rule:cprank_max1.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>Aa.\n       \\<lbrakk>order Aa \\<le> 1; order A = 0\\<rbrakk>\n       \\<Longrightarrow> cprank_max1 (A \\<otimes> Aa)\n 2. \\<And>Aa B.\n       \\<lbrakk>order Aa = 1; cprank_max1 B;\n        order A = 0 \\<Longrightarrow> cprank_max1 (A \\<otimes> B);\n        order A = 0\\<rbrakk>\n       \\<Longrightarrow> cprank_max1 (A \\<otimes> (Aa \\<otimes> B))", "case order1"], ["proof (state)\nthis:\n  order A_ \\<le> 1\n  order A = 0\n\ngoal (2 subgoals):\n 1. \\<And>Aa.\n       \\<lbrakk>order Aa \\<le> 1; order A = 0\\<rbrakk>\n       \\<Longrightarrow> cprank_max1 (A \\<otimes> Aa)\n 2. \\<And>Aa B.\n       \\<lbrakk>order Aa = 1; cprank_max1 B;\n        order A = 0 \\<Longrightarrow> cprank_max1 (A \\<otimes> B);\n        order A = 0\\<rbrakk>\n       \\<Longrightarrow> cprank_max1 (A \\<otimes> (Aa \\<otimes> B))", "then"], ["proof (chain)\npicking this:\n  order A_ \\<le> 1\n  order A = 0", "show ?case"], ["proof (prove)\nusing this:\n  order A_ \\<le> 1\n  order A = 0\n\ngoal (1 subgoal):\n 1. cprank_max1 (A \\<otimes> A_)", "by (simp add: cprank_max1.order1)"], ["proof (state)\nthis:\n  cprank_max1 (A \\<otimes> A_)\n\ngoal (1 subgoal):\n 1. \\<And>Aa B.\n       \\<lbrakk>order Aa = 1; cprank_max1 B;\n        order A = 0 \\<Longrightarrow> cprank_max1 (A \\<otimes> B);\n        order A = 0\\<rbrakk>\n       \\<Longrightarrow> cprank_max1 (A \\<otimes> (Aa \\<otimes> B))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Aa B.\n       \\<lbrakk>order Aa = 1; cprank_max1 B;\n        order A = 0 \\<Longrightarrow> cprank_max1 (A \\<otimes> B);\n        order A = 0\\<rbrakk>\n       \\<Longrightarrow> cprank_max1 (A \\<otimes> (Aa \\<otimes> B))", "case (higher_order A' B)"], ["proof (state)\nthis:\n  order A' = 1\n  cprank_max1 B\n  order A = 0 \\<Longrightarrow> cprank_max1 (A \\<otimes> B)\n  order A = 0\n\ngoal (1 subgoal):\n 1. \\<And>Aa B.\n       \\<lbrakk>order Aa = 1; cprank_max1 B;\n        order A = 0 \\<Longrightarrow> cprank_max1 (A \\<otimes> B);\n        order A = 0\\<rbrakk>\n       \\<Longrightarrow> cprank_max1 (A \\<otimes> (Aa \\<otimes> B))", "then"], ["proof (chain)\npicking this:\n  order A' = 1\n  cprank_max1 B\n  order A = 0 \\<Longrightarrow> cprank_max1 (A \\<otimes> B)\n  order A = 0", "have \"order (A \\<otimes> A') = 1\""], ["proof (prove)\nusing this:\n  order A' = 1\n  cprank_max1 B\n  order A = 0 \\<Longrightarrow> cprank_max1 (A \\<otimes> B)\n  order A = 0\n\ngoal (1 subgoal):\n 1. order (A \\<otimes> A') = 1", "by simp"], ["proof (state)\nthis:\n  order (A \\<otimes> A') = 1\n\ngoal (1 subgoal):\n 1. \\<And>Aa B.\n       \\<lbrakk>order Aa = 1; cprank_max1 B;\n        order A = 0 \\<Longrightarrow> cprank_max1 (A \\<otimes> B);\n        order A = 0\\<rbrakk>\n       \\<Longrightarrow> cprank_max1 (A \\<otimes> (Aa \\<otimes> B))", "then"], ["proof (chain)\npicking this:\n  order (A \\<otimes> A') = 1", "show ?case"], ["proof (prove)\nusing this:\n  order (A \\<otimes> A') = 1\n\ngoal (1 subgoal):\n 1. cprank_max1 (A \\<otimes> (A' \\<otimes> B))", "using higher_order cprank_max1.higher_order"], ["proof (prove)\nusing this:\n  order (A \\<otimes> A') = 1\n  order A' = 1\n  cprank_max1 B\n  order A = 0 \\<Longrightarrow> cprank_max1 (A \\<otimes> B)\n  order A = 0\n  \\<lbrakk>order ?A = 1; cprank_max1 ?B\\<rbrakk>\n  \\<Longrightarrow> cprank_max1 (?A \\<otimes> ?B)\n\ngoal (1 subgoal):\n 1. cprank_max1 (A \\<otimes> (A' \\<otimes> B))", "by (metis mult.assoc)"], ["proof (state)\nthis:\n  cprank_max1 (A \\<otimes> (A' \\<otimes> B))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cprank_max1_order_le1: \"order A \\<le> 0 \\<Longrightarrow> cprank_max1 B \\<Longrightarrow> cprank_max1 (A \\<otimes> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>order A \\<le> 0; cprank_max1 B\\<rbrakk>\n    \\<Longrightarrow> cprank_max1 (A \\<otimes> B)", "by (simp add: cprank_max1_order0)"], ["", "lemma cprank_max1_prod: \"cprank_max1 A \\<Longrightarrow> cprank_max1 B \\<Longrightarrow> cprank_max1 (A \\<otimes> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>cprank_max1 A; cprank_max1 B\\<rbrakk>\n    \\<Longrightarrow> cprank_max1 (A \\<otimes> B)", "apply(induction A rule: cprank_max1.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>order A \\<le> 1; cprank_max1 B\\<rbrakk>\n       \\<Longrightarrow> cprank_max1 (A \\<otimes> B)\n 2. \\<And>A Ba.\n       \\<lbrakk>order A = 1; cprank_max1 Ba;\n        cprank_max1 B \\<Longrightarrow> cprank_max1 (Ba \\<otimes> B);\n        cprank_max1 B\\<rbrakk>\n       \\<Longrightarrow> cprank_max1 (A \\<otimes> Ba \\<otimes> B)", "apply (meson higher_order le_neq_trans less_one cprank_max1_order0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A Ba.\n       \\<lbrakk>order A = 1; cprank_max1 Ba;\n        cprank_max1 B \\<Longrightarrow> cprank_max1 (Ba \\<otimes> B);\n        cprank_max1 B\\<rbrakk>\n       \\<Longrightarrow> cprank_max1 (A \\<otimes> Ba \\<otimes> B)", "by (simp add: higher_order mult.assoc)"], ["", "lemma cprank_max1_prod_list:\nassumes \"\\<And>B. B\\<in>set Bs \\<Longrightarrow> cprank_max1 B\"\nshows \"cprank_max1 (prod_list Bs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cprank_max1 (prod_list Bs)", "using assms"], ["proof (prove)\nusing this:\n  ?B \\<in> set Bs \\<Longrightarrow> cprank_max1 ?B\n\ngoal (1 subgoal):\n 1. cprank_max1 (prod_list Bs)", "by (induction Bs, metis dims_smult dims_tensor0 list.size(3) prod_list.Nil order1 order_0_multiple_of_one zero_le_one, simp add: cprank_max1_prod)"], ["", "lemma cprank_max1_prod_listE:\n  fixes A::\"'a::comm_ring_1 tensor\"\n  assumes \"cprank_max1 A\"\n  obtains Bs a where \"\\<And>B. B\\<in>set Bs \\<Longrightarrow> order B = 1\" \"a \\<cdot> prod_list Bs = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Bs a.\n        \\<lbrakk>\\<And>B. B \\<in> set Bs \\<Longrightarrow> order B = 1;\n         a \\<cdot> prod_list Bs = A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  cprank_max1 A\n\ngoal (1 subgoal):\n 1. (\\<And>Bs a.\n        \\<lbrakk>\\<And>B. B \\<in> set Bs \\<Longrightarrow> order B = 1;\n         a \\<cdot> prod_list Bs = A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (induction A arbitrary:thesis rule:cprank_max1.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A thesis.\n       \\<lbrakk>order A \\<le> 1;\n        \\<And>Bs a.\n           \\<lbrakk>\\<And>B. B \\<in> set Bs \\<Longrightarrow> order B = 1;\n            a \\<cdot> prod_list Bs = A\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>A B thesis.\n       \\<lbrakk>order A = 1; cprank_max1 B;\n        \\<And>thesis.\n           (\\<And>Bs a.\n               \\<lbrakk>\\<And>B.\n                           B \\<in> set Bs \\<Longrightarrow> order B = 1;\n                a \\<cdot> prod_list Bs = B\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>Bs a.\n           \\<lbrakk>\\<And>B. B \\<in> set Bs \\<Longrightarrow> order B = 1;\n            a \\<cdot> prod_list Bs = A \\<otimes> B\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (order1 A)"], ["proof (state)\nthis:\n  order A \\<le> 1\n  \\<lbrakk>\\<And>B. B \\<in> set ?Bs \\<Longrightarrow> order B = 1;\n   ?a \\<cdot> prod_list ?Bs = A\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (2 subgoals):\n 1. \\<And>A thesis.\n       \\<lbrakk>order A \\<le> 1;\n        \\<And>Bs a.\n           \\<lbrakk>\\<And>B. B \\<in> set Bs \\<Longrightarrow> order B = 1;\n            a \\<cdot> prod_list Bs = A\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>A B thesis.\n       \\<lbrakk>order A = 1; cprank_max1 B;\n        \\<And>thesis.\n           (\\<And>Bs a.\n               \\<lbrakk>\\<And>B.\n                           B \\<in> set Bs \\<Longrightarrow> order B = 1;\n                a \\<cdot> prod_list Bs = B\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>Bs a.\n           \\<lbrakk>\\<And>B. B \\<in> set Bs \\<Longrightarrow> order B = 1;\n            a \\<cdot> prod_list Bs = A \\<otimes> B\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  order A \\<le> 1\n  \\<lbrakk>\\<And>B. B \\<in> set ?Bs \\<Longrightarrow> order B = 1;\n   ?a \\<cdot> prod_list ?Bs = A\\<rbrakk>\n  \\<Longrightarrow> thesis", "show ?case"], ["proof (prove)\nusing this:\n  order A \\<le> 1\n  \\<lbrakk>\\<And>B. B \\<in> set ?Bs \\<Longrightarrow> order B = 1;\n   ?a \\<cdot> prod_list ?Bs = A\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "proof (cases \"order A = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>order A \\<le> 1;\n     \\<And>Bs a.\n        \\<lbrakk>\\<And>B. B \\<in> set Bs \\<Longrightarrow> order B = 1;\n         a \\<cdot> prod_list Bs = A\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     order A = 0\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>order A \\<le> 1;\n     \\<And>Bs a.\n        \\<lbrakk>\\<And>B. B \\<in> set Bs \\<Longrightarrow> order B = 1;\n         a \\<cdot> prod_list Bs = A\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     order A \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> thesis", "case True"], ["proof (state)\nthis:\n  order A = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order A \\<le> 1;\n     \\<And>Bs a.\n        \\<lbrakk>\\<And>B. B \\<in> set Bs \\<Longrightarrow> order B = 1;\n         a \\<cdot> prod_list Bs = A\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     order A = 0\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>order A \\<le> 1;\n     \\<And>Bs a.\n        \\<lbrakk>\\<And>B. B \\<in> set Bs \\<Longrightarrow> order B = 1;\n         a \\<cdot> prod_list Bs = A\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     order A \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  order A = 0", "obtain a where \"A = a \\<cdot> prod_list []\""], ["proof (prove)\nusing this:\n  order A = 0\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        A = a \\<cdot> prod_list [] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using order_0_multiple_of_one"], ["proof (prove)\nusing this:\n  order A = 0\n  \\<lbrakk>order ?A = 0;\n   \\<And>a. ?A = a \\<cdot> 1 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        A = a \\<cdot> prod_list [] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod_list.Nil"], ["proof (prove)\nusing this:\n  order A = 0\n  \\<lbrakk>order ?A = 0;\n   \\<And>a. ?A = a \\<cdot> 1 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  prod_list [] = (1::?'a)\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        A = a \\<cdot> prod_list [] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  A = a \\<cdot> prod_list []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order A \\<le> 1;\n     \\<And>Bs a.\n        \\<lbrakk>\\<And>B. B \\<in> set Bs \\<Longrightarrow> order B = 1;\n         a \\<cdot> prod_list Bs = A\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     order A = 0\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>order A \\<le> 1;\n     \\<And>Bs a.\n        \\<lbrakk>\\<And>B. B \\<in> set Bs \\<Longrightarrow> order B = 1;\n         a \\<cdot> prod_list Bs = A\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     order A \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  A = a \\<cdot> prod_list []", "show ?thesis"], ["proof (prove)\nusing this:\n  A = a \\<cdot> prod_list []\n\ngoal (1 subgoal):\n 1. thesis", "using length_pos_if_in_set order1.prems"], ["proof (prove)\nusing this:\n  A = a \\<cdot> prod_list []\n  ?x \\<in> set ?xs \\<Longrightarrow> 0 < length ?xs\n  \\<lbrakk>\\<And>B. B \\<in> set ?Bs \\<Longrightarrow> order B = 1;\n   ?a \\<cdot> prod_list ?Bs = A\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by fastforce"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>order A \\<le> 1;\n     \\<And>Bs a.\n        \\<lbrakk>\\<And>B. B \\<in> set Bs \\<Longrightarrow> order B = 1;\n         a \\<cdot> prod_list Bs = A\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     order A \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>order A \\<le> 1;\n     \\<And>Bs a.\n        \\<lbrakk>\\<And>B. B \\<in> set Bs \\<Longrightarrow> order B = 1;\n         a \\<cdot> prod_list Bs = A\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     order A \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> thesis", "case False"], ["proof (state)\nthis:\n  order A \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>order A \\<le> 1;\n     \\<And>Bs a.\n        \\<lbrakk>\\<And>B. B \\<in> set Bs \\<Longrightarrow> order B = 1;\n         a \\<cdot> prod_list Bs = A\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     order A \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  order A \\<noteq> 0", "have \"order A = 1\""], ["proof (prove)\nusing this:\n  order A \\<noteq> 0\n\ngoal (1 subgoal):\n 1. order A = 1", "using order1"], ["proof (prove)\nusing this:\n  order A \\<noteq> 0\n  order A \\<le> 1\n  \\<lbrakk>\\<And>B. B \\<in> set ?Bs \\<Longrightarrow> order B = 1;\n   ?a \\<cdot> prod_list ?Bs = A\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. order A = 1", "by linarith"], ["proof (state)\nthis:\n  order A = 1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>order A \\<le> 1;\n     \\<And>Bs a.\n        \\<lbrakk>\\<And>B. B \\<in> set Bs \\<Longrightarrow> order B = 1;\n         a \\<cdot> prod_list Bs = A\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     order A \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  order A = 1", "have \"A = 1 \\<cdot> prod_list [A]\""], ["proof (prove)\nusing this:\n  order A = 1\n\ngoal (1 subgoal):\n 1. A = (1::'a) \\<cdot> prod_list [A]", "by (simp add: smult_1)"], ["proof (state)\nthis:\n  A = (1::'a) \\<cdot> prod_list [A]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>order A \\<le> 1;\n     \\<And>Bs a.\n        \\<lbrakk>\\<And>B. B \\<in> set Bs \\<Longrightarrow> order B = 1;\n         a \\<cdot> prod_list Bs = A\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     order A \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  A = (1::'a) \\<cdot> prod_list [A]", "show ?thesis"], ["proof (prove)\nusing this:\n  A = (1::'a) \\<cdot> prod_list [A]\n\ngoal (1 subgoal):\n 1. thesis", "by (metis \\<open>order A = 1\\<close> length_greater_0_conv length_pos_if_in_set order1.prems set_ConsD)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>A B thesis.\n       \\<lbrakk>order A = 1; cprank_max1 B;\n        \\<And>thesis.\n           (\\<And>Bs a.\n               \\<lbrakk>\\<And>B.\n                           B \\<in> set Bs \\<Longrightarrow> order B = 1;\n                a \\<cdot> prod_list Bs = B\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>Bs a.\n           \\<lbrakk>\\<And>B. B \\<in> set Bs \\<Longrightarrow> order B = 1;\n            a \\<cdot> prod_list Bs = A \\<otimes> B\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A B thesis.\n       \\<lbrakk>order A = 1; cprank_max1 B;\n        \\<And>thesis.\n           (\\<And>Bs a.\n               \\<lbrakk>\\<And>B.\n                           B \\<in> set Bs \\<Longrightarrow> order B = 1;\n                a \\<cdot> prod_list Bs = B\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>Bs a.\n           \\<lbrakk>\\<And>B. B \\<in> set Bs \\<Longrightarrow> order B = 1;\n            a \\<cdot> prod_list Bs = A \\<otimes> B\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (higher_order A B)"], ["proof (state)\nthis:\n  order A = 1\n  cprank_max1 B\n  (\\<And>Bs a.\n      \\<lbrakk>\\<And>B. B \\<in> set Bs \\<Longrightarrow> order B = 1;\n       a \\<cdot> prod_list Bs = B\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n  \\<lbrakk>\\<And>B. B \\<in> set ?Bs \\<Longrightarrow> order B = 1;\n   ?a \\<cdot> prod_list ?Bs = A \\<otimes> B\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>A B thesis.\n       \\<lbrakk>order A = 1; cprank_max1 B;\n        \\<And>thesis.\n           (\\<And>Bs a.\n               \\<lbrakk>\\<And>B.\n                           B \\<in> set Bs \\<Longrightarrow> order B = 1;\n                a \\<cdot> prod_list Bs = B\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>Bs a.\n           \\<lbrakk>\\<And>B. B \\<in> set Bs \\<Longrightarrow> order B = 1;\n            a \\<cdot> prod_list Bs = A \\<otimes> B\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  order A = 1\n  cprank_max1 B\n  (\\<And>Bs a.\n      \\<lbrakk>\\<And>B. B \\<in> set Bs \\<Longrightarrow> order B = 1;\n       a \\<cdot> prod_list Bs = B\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n  \\<lbrakk>\\<And>B. B \\<in> set ?Bs \\<Longrightarrow> order B = 1;\n   ?a \\<cdot> prod_list ?Bs = A \\<otimes> B\\<rbrakk>\n  \\<Longrightarrow> thesis", "obtain Bs b where \"(\\<And>B'. B' \\<in> set Bs \\<Longrightarrow> order B' = 1)\" \"b \\<cdot> prod_list Bs = B\""], ["proof (prove)\nusing this:\n  order A = 1\n  cprank_max1 B\n  (\\<And>Bs a.\n      \\<lbrakk>\\<And>B. B \\<in> set Bs \\<Longrightarrow> order B = 1;\n       a \\<cdot> prod_list Bs = B\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n  \\<lbrakk>\\<And>B. B \\<in> set ?Bs \\<Longrightarrow> order B = 1;\n   ?a \\<cdot> prod_list ?Bs = A \\<otimes> B\\<rbrakk>\n  \\<Longrightarrow> thesisa__\n\ngoal (1 subgoal):\n 1. (\\<And>Bs b.\n        \\<lbrakk>\\<And>B'. B' \\<in> set Bs \\<Longrightarrow> order B' = 1;\n         b \\<cdot> prod_list Bs = B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  ?B' \\<in> set Bs \\<Longrightarrow> order ?B' = 1\n  b \\<cdot> prod_list Bs = B\n\ngoal (1 subgoal):\n 1. \\<And>A B thesis.\n       \\<lbrakk>order A = 1; cprank_max1 B;\n        \\<And>thesis.\n           (\\<And>Bs a.\n               \\<lbrakk>\\<And>B.\n                           B \\<in> set Bs \\<Longrightarrow> order B = 1;\n                a \\<cdot> prod_list Bs = B\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>Bs a.\n           \\<lbrakk>\\<And>B. B \\<in> set Bs \\<Longrightarrow> order B = 1;\n            a \\<cdot> prod_list Bs = A \\<otimes> B\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  ?B' \\<in> set Bs \\<Longrightarrow> order ?B' = 1\n  b \\<cdot> prod_list Bs = B", "have \"(\\<And>B. B \\<in> set (A # Bs) \\<Longrightarrow> order B = 1)\""], ["proof (prove)\nusing this:\n  ?B' \\<in> set Bs \\<Longrightarrow> order ?B' = 1\n  b \\<cdot> prod_list Bs = B\n\ngoal (1 subgoal):\n 1. \\<And>B. B \\<in> set (A # Bs) \\<Longrightarrow> order B = 1", "using higher_order"], ["proof (prove)\nusing this:\n  ?B' \\<in> set Bs \\<Longrightarrow> order ?B' = 1\n  b \\<cdot> prod_list Bs = B\n  order A = 1\n  cprank_max1 B\n  (\\<And>Bs a.\n      \\<lbrakk>\\<And>B. B \\<in> set Bs \\<Longrightarrow> order B = 1;\n       a \\<cdot> prod_list Bs = B\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n  \\<lbrakk>\\<And>B. B \\<in> set ?Bs \\<Longrightarrow> order B = 1;\n   ?a \\<cdot> prod_list ?Bs = A \\<otimes> B\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>B. B \\<in> set (A # Bs) \\<Longrightarrow> order B = 1", "by auto"], ["proof (state)\nthis:\n  ?B \\<in> set (A # Bs) \\<Longrightarrow> order ?B = 1\n\ngoal (1 subgoal):\n 1. \\<And>A B thesis.\n       \\<lbrakk>order A = 1; cprank_max1 B;\n        \\<And>thesis.\n           (\\<And>Bs a.\n               \\<lbrakk>\\<And>B.\n                           B \\<in> set Bs \\<Longrightarrow> order B = 1;\n                a \\<cdot> prod_list Bs = B\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>Bs a.\n           \\<lbrakk>\\<And>B. B \\<in> set Bs \\<Longrightarrow> order B = 1;\n            a \\<cdot> prod_list Bs = A \\<otimes> B\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "have \"A \\<otimes> B = b \\<cdot> (A \\<otimes> prod_list Bs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<otimes> B = b \\<cdot> (A \\<otimes> prod_list Bs)", "using smult_prod_extract2  \\<open>b \\<cdot> prod_list Bs = B\\<close>"], ["proof (prove)\nusing this:\n  ?a \\<cdot> (?A \\<otimes> ?B) = ?A \\<otimes> (?a \\<cdot> ?B)\n  b \\<cdot> prod_list Bs = B\n\ngoal (1 subgoal):\n 1. A \\<otimes> B = b \\<cdot> (A \\<otimes> prod_list Bs)", "by metis"], ["proof (state)\nthis:\n  A \\<otimes> B = b \\<cdot> (A \\<otimes> prod_list Bs)\n\ngoal (1 subgoal):\n 1. \\<And>A B thesis.\n       \\<lbrakk>order A = 1; cprank_max1 B;\n        \\<And>thesis.\n           (\\<And>Bs a.\n               \\<lbrakk>\\<And>B.\n                           B \\<in> set Bs \\<Longrightarrow> order B = 1;\n                a \\<cdot> prod_list Bs = B\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>Bs a.\n           \\<lbrakk>\\<And>B. B \\<in> set Bs \\<Longrightarrow> order B = 1;\n            a \\<cdot> prod_list Bs = A \\<otimes> B\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  A \\<otimes> B = b \\<cdot> (A \\<otimes> prod_list Bs)", "show ?case"], ["proof (prove)\nusing this:\n  A \\<otimes> B = b \\<cdot> (A \\<otimes> prod_list Bs)\n\ngoal (1 subgoal):\n 1. thesis", "by (metis \\<open>\\<And>Ba. Ba \\<in> set (A # Bs) \\<Longrightarrow> order Ba = 1\\<close> higher_order.prems prod_list.Cons)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "inductive cprank_max :: \"nat \\<Rightarrow> 'a::ring_1 tensor \\<Rightarrow> bool\" where\ncprank_max0: \"cprank_max 0 (tensor0 ds)\" |\ncprank_max_Suc: \"dims A = dims B \\<Longrightarrow> cprank_max1 A \\<Longrightarrow> cprank_max j B \\<Longrightarrow> cprank_max (Suc j) (A+B)\""], ["", "lemma cprank_max1: \"cprank_max1 A \\<Longrightarrow> cprank_max 1 A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cprank_max1 A \\<Longrightarrow> cprank_max 1 A", "by (metis One_nat_def dims_tensor0 cprank_max.simps cprank_max0 tensor_add_0_right)"], ["", "lemma cprank_max_plus: \"cprank_max i A \\<Longrightarrow> cprank_max j B \\<Longrightarrow> dims A = dims B \\<Longrightarrow> cprank_max (i+j) (A+B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>cprank_max i A; cprank_max j B; dims A = dims B\\<rbrakk>\n    \\<Longrightarrow> cprank_max (i + j) (A + B)", "apply (induction A rule:cprank_max.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ds.\n       \\<lbrakk>cprank_max j B; dims (tensor0 ds) = dims B\\<rbrakk>\n       \\<Longrightarrow> cprank_max (0 + j) (tensor0 ds + B)\n 2. \\<And>A Ba ja.\n       \\<lbrakk>dims A = dims Ba; cprank_max1 A; cprank_max ja Ba;\n        \\<lbrakk>cprank_max j B; dims Ba = dims B\\<rbrakk>\n        \\<Longrightarrow> cprank_max (ja + j) (Ba + B);\n        cprank_max j B; dims (A + Ba) = dims B\\<rbrakk>\n       \\<Longrightarrow> cprank_max (Suc ja + j) (A + Ba + B)", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A Ba ja.\n       \\<lbrakk>dims A = dims Ba; cprank_max1 A; cprank_max ja Ba;\n        \\<lbrakk>cprank_max j B; dims Ba = dims B\\<rbrakk>\n        \\<Longrightarrow> cprank_max (ja + j) (Ba + B);\n        cprank_max j B; dims (A + Ba) = dims B\\<rbrakk>\n       \\<Longrightarrow> cprank_max (Suc ja + j) (A + Ba + B)", "by (metis add_Suc plus_assoc plus_dim1 cprank_max.intros(2))"], ["", "lemma cprank_max_listsum:\nassumes \"\\<And>A. A\\<in>set As \\<Longrightarrow> dims A = ds\"\nand \"\\<And>A. A\\<in>set As \\<Longrightarrow> cprank_max n A\"\nshows \"cprank_max (n*length As) (listsum ds As)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cprank_max (n * length As) (listsum ds As)", "using assms"], ["proof (prove)\nusing this:\n  ?A \\<in> set As \\<Longrightarrow> dims ?A = ds\n  ?A \\<in> set As \\<Longrightarrow> cprank_max n ?A\n\ngoal (1 subgoal):\n 1. cprank_max (n * length As) (listsum ds As)", "proof (induction As)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>A. A \\<in> set [] \\<Longrightarrow> dims A = ds;\n     \\<And>A. A \\<in> set [] \\<Longrightarrow> cprank_max n A\\<rbrakk>\n    \\<Longrightarrow> cprank_max (n * length []) (listsum ds [])\n 2. \\<And>a As.\n       \\<lbrakk>\\<lbrakk>\\<And>A.\n                            A \\<in> set As \\<Longrightarrow> dims A = ds;\n                 \\<And>A.\n                    A \\<in> set As \\<Longrightarrow> cprank_max n A\\<rbrakk>\n                \\<Longrightarrow> cprank_max (n * length As)\n                                   (listsum ds As);\n        \\<And>A. A \\<in> set (a # As) \\<Longrightarrow> dims A = ds;\n        \\<And>A.\n           A \\<in> set (a # As) \\<Longrightarrow> cprank_max n A\\<rbrakk>\n       \\<Longrightarrow> cprank_max (n * length (a # As))\n                          (listsum ds (a # As))", "case Nil"], ["proof (state)\nthis:\n  ?A \\<in> set [] \\<Longrightarrow> dims ?A = ds\n  ?A \\<in> set [] \\<Longrightarrow> cprank_max n ?A\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>A. A \\<in> set [] \\<Longrightarrow> dims A = ds;\n     \\<And>A. A \\<in> set [] \\<Longrightarrow> cprank_max n A\\<rbrakk>\n    \\<Longrightarrow> cprank_max (n * length []) (listsum ds [])\n 2. \\<And>a As.\n       \\<lbrakk>\\<lbrakk>\\<And>A.\n                            A \\<in> set As \\<Longrightarrow> dims A = ds;\n                 \\<And>A.\n                    A \\<in> set As \\<Longrightarrow> cprank_max n A\\<rbrakk>\n                \\<Longrightarrow> cprank_max (n * length As)\n                                   (listsum ds As);\n        \\<And>A. A \\<in> set (a # As) \\<Longrightarrow> dims A = ds;\n        \\<And>A.\n           A \\<in> set (a # As) \\<Longrightarrow> cprank_max n A\\<rbrakk>\n       \\<Longrightarrow> cprank_max (n * length (a # As))\n                          (listsum ds (a # As))", "then"], ["proof (chain)\npicking this:\n  ?A \\<in> set [] \\<Longrightarrow> dims ?A = ds\n  ?A \\<in> set [] \\<Longrightarrow> cprank_max n ?A", "show ?case"], ["proof (prove)\nusing this:\n  ?A \\<in> set [] \\<Longrightarrow> dims ?A = ds\n  ?A \\<in> set [] \\<Longrightarrow> cprank_max n ?A\n\ngoal (1 subgoal):\n 1. cprank_max (n * length []) (listsum ds [])", "using listsum_Nil cprank_max.simps"], ["proof (prove)\nusing this:\n  ?A \\<in> set [] \\<Longrightarrow> dims ?A = ds\n  ?A \\<in> set [] \\<Longrightarrow> cprank_max n ?A\n  listsum ?ds [] = tensor0 ?ds\n  cprank_max ?a1.0 ?a2.0 =\n  ((\\<exists>ds. ?a1.0 = 0 \\<and> ?a2.0 = tensor0 ds) \\<or>\n   (\\<exists>A B j.\n       ?a1.0 = Suc j \\<and>\n       ?a2.0 = A + B \\<and>\n       dims A = dims B \\<and> cprank_max1 A \\<and> cprank_max j B))\n\ngoal (1 subgoal):\n 1. cprank_max (n * length []) (listsum ds [])", "by fastforce"], ["proof (state)\nthis:\n  cprank_max (n * length []) (listsum ds [])\n\ngoal (1 subgoal):\n 1. \\<And>a As.\n       \\<lbrakk>\\<lbrakk>\\<And>A.\n                            A \\<in> set As \\<Longrightarrow> dims A = ds;\n                 \\<And>A.\n                    A \\<in> set As \\<Longrightarrow> cprank_max n A\\<rbrakk>\n                \\<Longrightarrow> cprank_max (n * length As)\n                                   (listsum ds As);\n        \\<And>A. A \\<in> set (a # As) \\<Longrightarrow> dims A = ds;\n        \\<And>A.\n           A \\<in> set (a # As) \\<Longrightarrow> cprank_max n A\\<rbrakk>\n       \\<Longrightarrow> cprank_max (n * length (a # As))\n                          (listsum ds (a # As))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a As.\n       \\<lbrakk>\\<lbrakk>\\<And>A.\n                            A \\<in> set As \\<Longrightarrow> dims A = ds;\n                 \\<And>A.\n                    A \\<in> set As \\<Longrightarrow> cprank_max n A\\<rbrakk>\n                \\<Longrightarrow> cprank_max (n * length As)\n                                   (listsum ds As);\n        \\<And>A. A \\<in> set (a # As) \\<Longrightarrow> dims A = ds;\n        \\<And>A.\n           A \\<in> set (a # As) \\<Longrightarrow> cprank_max n A\\<rbrakk>\n       \\<Longrightarrow> cprank_max (n * length (a # As))\n                          (listsum ds (a # As))", "case (Cons A As)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>A. A \\<in> set As \\<Longrightarrow> dims A = ds;\n   \\<And>A. A \\<in> set As \\<Longrightarrow> cprank_max n A\\<rbrakk>\n  \\<Longrightarrow> cprank_max (n * length As) (listsum ds As)\n  ?A \\<in> set (A # As) \\<Longrightarrow> dims ?A = ds\n  ?A \\<in> set (A # As) \\<Longrightarrow> cprank_max n ?A\n\ngoal (1 subgoal):\n 1. \\<And>a As.\n       \\<lbrakk>\\<lbrakk>\\<And>A.\n                            A \\<in> set As \\<Longrightarrow> dims A = ds;\n                 \\<And>A.\n                    A \\<in> set As \\<Longrightarrow> cprank_max n A\\<rbrakk>\n                \\<Longrightarrow> cprank_max (n * length As)\n                                   (listsum ds As);\n        \\<And>A. A \\<in> set (a # As) \\<Longrightarrow> dims A = ds;\n        \\<And>A.\n           A \\<in> set (a # As) \\<Longrightarrow> cprank_max n A\\<rbrakk>\n       \\<Longrightarrow> cprank_max (n * length (a # As))\n                          (listsum ds (a # As))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>A. A \\<in> set As \\<Longrightarrow> dims A = ds;\n   \\<And>A. A \\<in> set As \\<Longrightarrow> cprank_max n A\\<rbrakk>\n  \\<Longrightarrow> cprank_max (n * length As) (listsum ds As)\n  ?A \\<in> set (A # As) \\<Longrightarrow> dims ?A = ds\n  ?A \\<in> set (A # As) \\<Longrightarrow> cprank_max n ?A", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>A. A \\<in> set As \\<Longrightarrow> dims A = ds;\n   \\<And>A. A \\<in> set As \\<Longrightarrow> cprank_max n A\\<rbrakk>\n  \\<Longrightarrow> cprank_max (n * length As) (listsum ds As)\n  ?A \\<in> set (A # As) \\<Longrightarrow> dims ?A = ds\n  ?A \\<in> set (A # As) \\<Longrightarrow> cprank_max n ?A\n\ngoal (1 subgoal):\n 1. cprank_max (n * length (A # As)) (listsum ds (A # As))", "using cprank_max_plus[of n A \"n * length As\" \"listsum ds As\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>A. A \\<in> set As \\<Longrightarrow> dims A = ds;\n   \\<And>A. A \\<in> set As \\<Longrightarrow> cprank_max n A\\<rbrakk>\n  \\<Longrightarrow> cprank_max (n * length As) (listsum ds As)\n  ?A \\<in> set (A # As) \\<Longrightarrow> dims ?A = ds\n  ?A \\<in> set (A # As) \\<Longrightarrow> cprank_max n ?A\n  \\<lbrakk>cprank_max n A; cprank_max (n * length As) (listsum ds As);\n   dims A = dims (listsum ds As)\\<rbrakk>\n  \\<Longrightarrow> cprank_max (n + n * length As) (A + listsum ds As)\n\ngoal (1 subgoal):\n 1. cprank_max (n * length (A # As)) (listsum ds (A # As))", "by (simp add: length_Cons list.set_intros(1) listsum_Cons listsum_dims set_subset_Cons subsetCE)"], ["proof (state)\nthis:\n  cprank_max (n * length (A # As)) (listsum ds (A # As))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cprank_maxE:\nassumes \"cprank_max n A\"\nobtains BS where \"(\\<And>B. B\\<in>set BS \\<Longrightarrow> cprank_max1 B)\" and \"(\\<And>B. B\\<in>set BS \\<Longrightarrow> dims A = dims B)\" and \"listsum (dims A) BS = A\" and \"length BS = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>BS.\n        \\<lbrakk>\\<And>B. B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n         \\<And>B. B \\<in> set BS \\<Longrightarrow> dims A = dims B;\n         listsum (dims A) BS = A; length BS = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  cprank_max n A\n\ngoal (1 subgoal):\n 1. (\\<And>BS.\n        \\<lbrakk>\\<And>B. B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n         \\<And>B. B \\<in> set BS \\<Longrightarrow> dims A = dims B;\n         listsum (dims A) BS = A; length BS = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (induction arbitrary:thesis rule:cprank_max.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ds thesis.\n       (\\<And>BS.\n           \\<lbrakk>\\<And>B. B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n            \\<And>B.\n               B \\<in> set BS \\<Longrightarrow> dims (tensor0 ds) = dims B;\n            listsum (dims (tensor0 ds)) BS = tensor0 ds;\n            length BS = 0\\<rbrakk>\n           \\<Longrightarrow> thesis) \\<Longrightarrow>\n       thesis\n 2. \\<And>A B j thesis.\n       \\<lbrakk>dims A = dims B; cprank_max1 A; cprank_max j B;\n        \\<And>thesis.\n           (\\<And>BS.\n               \\<lbrakk>\\<And>B.\n                           B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n                \\<And>Ba.\n                   Ba \\<in> set BS \\<Longrightarrow> dims B = dims Ba;\n                listsum (dims B) BS = B; length BS = j\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>BS.\n           \\<lbrakk>\\<And>B. B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n            \\<And>Ba.\n               Ba \\<in> set BS \\<Longrightarrow> dims (A + B) = dims Ba;\n            listsum (dims (A + B)) BS = A + B; length BS = Suc j\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (cprank_max0 ds)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>B. B \\<in> set ?BS \\<Longrightarrow> cprank_max1 B;\n   \\<And>B. B \\<in> set ?BS \\<Longrightarrow> dims (tensor0 ds) = dims B;\n   listsum (dims (tensor0 ds)) ?BS = tensor0 ds; length ?BS = 0\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (2 subgoals):\n 1. \\<And>ds thesis.\n       (\\<And>BS.\n           \\<lbrakk>\\<And>B. B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n            \\<And>B.\n               B \\<in> set BS \\<Longrightarrow> dims (tensor0 ds) = dims B;\n            listsum (dims (tensor0 ds)) BS = tensor0 ds;\n            length BS = 0\\<rbrakk>\n           \\<Longrightarrow> thesis) \\<Longrightarrow>\n       thesis\n 2. \\<And>A B j thesis.\n       \\<lbrakk>dims A = dims B; cprank_max1 A; cprank_max j B;\n        \\<And>thesis.\n           (\\<And>BS.\n               \\<lbrakk>\\<And>B.\n                           B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n                \\<And>Ba.\n                   Ba \\<in> set BS \\<Longrightarrow> dims B = dims Ba;\n                listsum (dims B) BS = B; length BS = j\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>BS.\n           \\<lbrakk>\\<And>B. B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n            \\<And>Ba.\n               Ba \\<in> set BS \\<Longrightarrow> dims (A + B) = dims Ba;\n            listsum (dims (A + B)) BS = A + B; length BS = Suc j\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "have \"Tensor_Plus.listsum (dims (tensor0 ds)) [] = tensor0 ds\""], ["proof (prove)\ngoal (1 subgoal):\n 1. listsum (dims (tensor0 ds)) [] = tensor0 ds", "by (simp add: listsum_Nil)"], ["proof (state)\nthis:\n  listsum (dims (tensor0 ds)) [] = tensor0 ds\n\ngoal (2 subgoals):\n 1. \\<And>ds thesis.\n       (\\<And>BS.\n           \\<lbrakk>\\<And>B. B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n            \\<And>B.\n               B \\<in> set BS \\<Longrightarrow> dims (tensor0 ds) = dims B;\n            listsum (dims (tensor0 ds)) BS = tensor0 ds;\n            length BS = 0\\<rbrakk>\n           \\<Longrightarrow> thesis) \\<Longrightarrow>\n       thesis\n 2. \\<And>A B j thesis.\n       \\<lbrakk>dims A = dims B; cprank_max1 A; cprank_max j B;\n        \\<And>thesis.\n           (\\<And>BS.\n               \\<lbrakk>\\<And>B.\n                           B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n                \\<And>Ba.\n                   Ba \\<in> set BS \\<Longrightarrow> dims B = dims Ba;\n                listsum (dims B) BS = B; length BS = j\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>BS.\n           \\<lbrakk>\\<And>B. B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n            \\<And>Ba.\n               Ba \\<in> set BS \\<Longrightarrow> dims (A + B) = dims Ba;\n            listsum (dims (A + B)) BS = A + B; length BS = Suc j\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  listsum (dims (tensor0 ds)) [] = tensor0 ds", "show ?case"], ["proof (prove)\nusing this:\n  listsum (dims (tensor0 ds)) [] = tensor0 ds\n\ngoal (1 subgoal):\n 1. thesis", "using cprank_max0.prems"], ["proof (prove)\nusing this:\n  listsum (dims (tensor0 ds)) [] = tensor0 ds\n  \\<lbrakk>\\<And>B. B \\<in> set ?BS \\<Longrightarrow> cprank_max1 B;\n   \\<And>B. B \\<in> set ?BS \\<Longrightarrow> dims (tensor0 ds) = dims B;\n   listsum (dims (tensor0 ds)) ?BS = tensor0 ds; length ?BS = 0\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by fastforce"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>A B j thesis.\n       \\<lbrakk>dims A = dims B; cprank_max1 A; cprank_max j B;\n        \\<And>thesis.\n           (\\<And>BS.\n               \\<lbrakk>\\<And>B.\n                           B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n                \\<And>Ba.\n                   Ba \\<in> set BS \\<Longrightarrow> dims B = dims Ba;\n                listsum (dims B) BS = B; length BS = j\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>BS.\n           \\<lbrakk>\\<And>B. B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n            \\<And>Ba.\n               Ba \\<in> set BS \\<Longrightarrow> dims (A + B) = dims Ba;\n            listsum (dims (A + B)) BS = A + B; length BS = Suc j\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A B j thesis.\n       \\<lbrakk>dims A = dims B; cprank_max1 A; cprank_max j B;\n        \\<And>thesis.\n           (\\<And>BS.\n               \\<lbrakk>\\<And>B.\n                           B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n                \\<And>Ba.\n                   Ba \\<in> set BS \\<Longrightarrow> dims B = dims Ba;\n                listsum (dims B) BS = B; length BS = j\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>BS.\n           \\<lbrakk>\\<And>B. B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n            \\<And>Ba.\n               Ba \\<in> set BS \\<Longrightarrow> dims (A + B) = dims Ba;\n            listsum (dims (A + B)) BS = A + B; length BS = Suc j\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (cprank_max_Suc A B j)"], ["proof (state)\nthis:\n  dims A = dims B\n  cprank_max1 A\n  cprank_max j B\n  (\\<And>BS.\n      \\<lbrakk>\\<And>B. B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n       \\<And>Ba. Ba \\<in> set BS \\<Longrightarrow> dims B = dims Ba;\n       listsum (dims B) BS = B; length BS = j\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n  \\<lbrakk>\\<And>B. B \\<in> set ?BS \\<Longrightarrow> cprank_max1 B;\n   \\<And>Ba. Ba \\<in> set ?BS \\<Longrightarrow> dims (A + B) = dims Ba;\n   listsum (dims (A + B)) ?BS = A + B; length ?BS = Suc j\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>A B j thesis.\n       \\<lbrakk>dims A = dims B; cprank_max1 A; cprank_max j B;\n        \\<And>thesis.\n           (\\<And>BS.\n               \\<lbrakk>\\<And>B.\n                           B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n                \\<And>Ba.\n                   Ba \\<in> set BS \\<Longrightarrow> dims B = dims Ba;\n                listsum (dims B) BS = B; length BS = j\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>BS.\n           \\<lbrakk>\\<And>B. B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n            \\<And>Ba.\n               Ba \\<in> set BS \\<Longrightarrow> dims (A + B) = dims Ba;\n            listsum (dims (A + B)) BS = A + B; length BS = Suc j\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  dims A = dims B\n  cprank_max1 A\n  cprank_max j B\n  (\\<And>BS.\n      \\<lbrakk>\\<And>B. B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n       \\<And>Ba. Ba \\<in> set BS \\<Longrightarrow> dims B = dims Ba;\n       listsum (dims B) BS = B; length BS = j\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n  \\<lbrakk>\\<And>B. B \\<in> set ?BS \\<Longrightarrow> cprank_max1 B;\n   \\<And>Ba. Ba \\<in> set ?BS \\<Longrightarrow> dims (A + B) = dims Ba;\n   listsum (dims (A + B)) ?BS = A + B; length ?BS = Suc j\\<rbrakk>\n  \\<Longrightarrow> thesis", "obtain BS where BS_def:\"(\\<And>B. B \\<in> set BS \\<Longrightarrow> cprank_max1 B)\" \"(\\<And>B'. B' \\<in> set BS \\<Longrightarrow> dims B' = dims B)\"\n                       \"listsum (dims B) BS = B\" \"length BS = j\""], ["proof (prove)\nusing this:\n  dims A = dims B\n  cprank_max1 A\n  cprank_max j B\n  (\\<And>BS.\n      \\<lbrakk>\\<And>B. B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n       \\<And>Ba. Ba \\<in> set BS \\<Longrightarrow> dims B = dims Ba;\n       listsum (dims B) BS = B; length BS = j\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n  \\<lbrakk>\\<And>B. B \\<in> set ?BS \\<Longrightarrow> cprank_max1 B;\n   \\<And>Ba. Ba \\<in> set ?BS \\<Longrightarrow> dims (A + B) = dims Ba;\n   listsum (dims (A + B)) ?BS = A + B; length ?BS = Suc j\\<rbrakk>\n  \\<Longrightarrow> thesisa__\n\ngoal (1 subgoal):\n 1. (\\<And>BS.\n        \\<lbrakk>\\<And>B. B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n         \\<And>B'. B' \\<in> set BS \\<Longrightarrow> dims B' = dims B;\n         listsum (dims B) BS = B; length BS = j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  ?B \\<in> set BS \\<Longrightarrow> cprank_max1 ?B\n  ?B' \\<in> set BS \\<Longrightarrow> dims ?B' = dims B\n  listsum (dims B) BS = B\n  length BS = j\n\ngoal (1 subgoal):\n 1. \\<And>A B j thesis.\n       \\<lbrakk>dims A = dims B; cprank_max1 A; cprank_max j B;\n        \\<And>thesis.\n           (\\<And>BS.\n               \\<lbrakk>\\<And>B.\n                           B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n                \\<And>Ba.\n                   Ba \\<in> set BS \\<Longrightarrow> dims B = dims Ba;\n                listsum (dims B) BS = B; length BS = j\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>BS.\n           \\<lbrakk>\\<And>B. B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n            \\<And>Ba.\n               Ba \\<in> set BS \\<Longrightarrow> dims (A + B) = dims Ba;\n            listsum (dims (A + B)) BS = A + B; length BS = Suc j\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  ?B \\<in> set BS \\<Longrightarrow> cprank_max1 ?B\n  ?B' \\<in> set BS \\<Longrightarrow> dims ?B' = dims B\n  listsum (dims B) BS = B\n  length BS = j", "have \"listsum (dims (A + B)) (A # BS) = A + B\""], ["proof (prove)\nusing this:\n  ?B \\<in> set BS \\<Longrightarrow> cprank_max1 ?B\n  ?B' \\<in> set BS \\<Longrightarrow> dims ?B' = dims B\n  listsum (dims B) BS = B\n  length BS = j\n\ngoal (1 subgoal):\n 1. listsum (dims (A + B)) (A # BS) = A + B", "by (simp add: listsum_Cons cprank_max_Suc.hyps(1))"], ["proof (state)\nthis:\n  listsum (dims (A + B)) (A # BS) = A + B\n\ngoal (1 subgoal):\n 1. \\<And>A B j thesis.\n       \\<lbrakk>dims A = dims B; cprank_max1 A; cprank_max j B;\n        \\<And>thesis.\n           (\\<And>BS.\n               \\<lbrakk>\\<And>B.\n                           B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n                \\<And>Ba.\n                   Ba \\<in> set BS \\<Longrightarrow> dims B = dims Ba;\n                listsum (dims B) BS = B; length BS = j\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>BS.\n           \\<lbrakk>\\<And>B. B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n            \\<And>Ba.\n               Ba \\<in> set BS \\<Longrightarrow> dims (A + B) = dims Ba;\n            listsum (dims (A + B)) BS = A + B; length BS = Suc j\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  listsum (dims (A + B)) (A # BS) = A + B", "show ?case"], ["proof (prove)\nusing this:\n  listsum (dims (A + B)) (A # BS) = A + B\n\ngoal (1 subgoal):\n 1. thesis", "using BS_def length_Cons cprank_max_Suc.hyps(2) cprank_max_Suc.prems set_ConsD"], ["proof (prove)\nusing this:\n  listsum (dims (A + B)) (A # BS) = A + B\n  ?B \\<in> set BS \\<Longrightarrow> cprank_max1 ?B\n  ?B' \\<in> set BS \\<Longrightarrow> dims ?B' = dims B\n  listsum (dims B) BS = B\n  length BS = j\n  length (?x # ?xs) = Suc (length ?xs)\n  cprank_max1 A\n  \\<lbrakk>\\<And>B. B \\<in> set ?BS \\<Longrightarrow> cprank_max1 B;\n   \\<And>Ba. Ba \\<in> set ?BS \\<Longrightarrow> dims (A + B) = dims Ba;\n   listsum (dims (A + B)) ?BS = A + B; length ?BS = Suc j\\<rbrakk>\n  \\<Longrightarrow> thesis\n  ?y \\<in> set (?x # ?xs) \\<Longrightarrow> ?y = ?x \\<or> ?y \\<in> set ?xs\n\ngoal (1 subgoal):\n 1. thesis", "by (metis plus_dim1 cprank_max_Suc.hyps(1))"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cprank_maxI:\nassumes \"\\<And>B. B\\<in>set BS \\<Longrightarrow> cprank_max1 B\"\nand \"\\<And>B. B\\<in>set BS \\<Longrightarrow> dims B = ds\"\nshows \"cprank_max (length BS) (listsum ds BS)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cprank_max (length BS) (listsum ds BS)", "using assms"], ["proof (prove)\nusing this:\n  ?B \\<in> set BS \\<Longrightarrow> cprank_max1 ?B\n  ?B \\<in> set BS \\<Longrightarrow> dims ?B = ds\n\ngoal (1 subgoal):\n 1. cprank_max (length BS) (listsum ds BS)", "proof (induction BS)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>B. B \\<in> set [] \\<Longrightarrow> cprank_max1 B;\n     \\<And>B. B \\<in> set [] \\<Longrightarrow> dims B = ds\\<rbrakk>\n    \\<Longrightarrow> cprank_max (length []) (listsum ds [])\n 2. \\<And>a BS.\n       \\<lbrakk>\\<lbrakk>\\<And>B.\n                            B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n                 \\<And>B.\n                    B \\<in> set BS \\<Longrightarrow> dims B = ds\\<rbrakk>\n                \\<Longrightarrow> cprank_max (length BS) (listsum ds BS);\n        \\<And>B. B \\<in> set (a # BS) \\<Longrightarrow> cprank_max1 B;\n        \\<And>B. B \\<in> set (a # BS) \\<Longrightarrow> dims B = ds\\<rbrakk>\n       \\<Longrightarrow> cprank_max (length (a # BS)) (listsum ds (a # BS))", "case Nil"], ["proof (state)\nthis:\n  ?B \\<in> set [] \\<Longrightarrow> cprank_max1 ?B\n  ?B \\<in> set [] \\<Longrightarrow> dims ?B = ds\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>B. B \\<in> set [] \\<Longrightarrow> cprank_max1 B;\n     \\<And>B. B \\<in> set [] \\<Longrightarrow> dims B = ds\\<rbrakk>\n    \\<Longrightarrow> cprank_max (length []) (listsum ds [])\n 2. \\<And>a BS.\n       \\<lbrakk>\\<lbrakk>\\<And>B.\n                            B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n                 \\<And>B.\n                    B \\<in> set BS \\<Longrightarrow> dims B = ds\\<rbrakk>\n                \\<Longrightarrow> cprank_max (length BS) (listsum ds BS);\n        \\<And>B. B \\<in> set (a # BS) \\<Longrightarrow> cprank_max1 B;\n        \\<And>B. B \\<in> set (a # BS) \\<Longrightarrow> dims B = ds\\<rbrakk>\n       \\<Longrightarrow> cprank_max (length (a # BS)) (listsum ds (a # BS))", "then"], ["proof (chain)\npicking this:\n  ?B \\<in> set [] \\<Longrightarrow> cprank_max1 ?B\n  ?B \\<in> set [] \\<Longrightarrow> dims ?B = ds", "show ?case"], ["proof (prove)\nusing this:\n  ?B \\<in> set [] \\<Longrightarrow> cprank_max1 ?B\n  ?B \\<in> set [] \\<Longrightarrow> dims ?B = ds\n\ngoal (1 subgoal):\n 1. cprank_max (length []) (listsum ds [])", "by (simp add: listsum_Nil cprank_max0)"], ["proof (state)\nthis:\n  cprank_max (length []) (listsum ds [])\n\ngoal (1 subgoal):\n 1. \\<And>a BS.\n       \\<lbrakk>\\<lbrakk>\\<And>B.\n                            B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n                 \\<And>B.\n                    B \\<in> set BS \\<Longrightarrow> dims B = ds\\<rbrakk>\n                \\<Longrightarrow> cprank_max (length BS) (listsum ds BS);\n        \\<And>B. B \\<in> set (a # BS) \\<Longrightarrow> cprank_max1 B;\n        \\<And>B. B \\<in> set (a # BS) \\<Longrightarrow> dims B = ds\\<rbrakk>\n       \\<Longrightarrow> cprank_max (length (a # BS)) (listsum ds (a # BS))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a BS.\n       \\<lbrakk>\\<lbrakk>\\<And>B.\n                            B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n                 \\<And>B.\n                    B \\<in> set BS \\<Longrightarrow> dims B = ds\\<rbrakk>\n                \\<Longrightarrow> cprank_max (length BS) (listsum ds BS);\n        \\<And>B. B \\<in> set (a # BS) \\<Longrightarrow> cprank_max1 B;\n        \\<And>B. B \\<in> set (a # BS) \\<Longrightarrow> dims B = ds\\<rbrakk>\n       \\<Longrightarrow> cprank_max (length (a # BS)) (listsum ds (a # BS))", "case (Cons B BS)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>B. B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n   \\<And>B. B \\<in> set BS \\<Longrightarrow> dims B = ds\\<rbrakk>\n  \\<Longrightarrow> cprank_max (length BS) (listsum ds BS)\n  ?B \\<in> set (B # BS) \\<Longrightarrow> cprank_max1 ?B\n  ?B \\<in> set (B # BS) \\<Longrightarrow> dims ?B = ds\n\ngoal (1 subgoal):\n 1. \\<And>a BS.\n       \\<lbrakk>\\<lbrakk>\\<And>B.\n                            B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n                 \\<And>B.\n                    B \\<in> set BS \\<Longrightarrow> dims B = ds\\<rbrakk>\n                \\<Longrightarrow> cprank_max (length BS) (listsum ds BS);\n        \\<And>B. B \\<in> set (a # BS) \\<Longrightarrow> cprank_max1 B;\n        \\<And>B. B \\<in> set (a # BS) \\<Longrightarrow> dims B = ds\\<rbrakk>\n       \\<Longrightarrow> cprank_max (length (a # BS)) (listsum ds (a # BS))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>B. B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n   \\<And>B. B \\<in> set BS \\<Longrightarrow> dims B = ds\\<rbrakk>\n  \\<Longrightarrow> cprank_max (length BS) (listsum ds BS)\n  ?B \\<in> set (B # BS) \\<Longrightarrow> cprank_max1 ?B\n  ?B \\<in> set (B # BS) \\<Longrightarrow> dims ?B = ds", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>B. B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n   \\<And>B. B \\<in> set BS \\<Longrightarrow> dims B = ds\\<rbrakk>\n  \\<Longrightarrow> cprank_max (length BS) (listsum ds BS)\n  ?B \\<in> set (B # BS) \\<Longrightarrow> cprank_max1 ?B\n  ?B \\<in> set (B # BS) \\<Longrightarrow> dims ?B = ds\n\ngoal (1 subgoal):\n 1. cprank_max (length (B # BS)) (listsum ds (B # BS))", "by (simp add: length_Cons list.set_intros(1) list.set_intros(2) listsum_Cons listsum_dims cprank_max_Suc)"], ["proof (state)\nthis:\n  cprank_max (length (B # BS)) (listsum ds (B # BS))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cprank_max_0E: \"cprank_max 0 A \\<Longrightarrow> A = tensor0 (dims A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cprank_max 0 A \\<Longrightarrow> A = tensor0 (dims A)", "by (metis dims_tensor0 length_0_conv cprank_max0 cprank_maxE)"], ["", "lemma listsum_prod_distr_right:\nassumes \"(\\<And>C. C\\<in>set CS \\<Longrightarrow> dims C = ds)\"\nshows \"A \\<otimes> listsum ds CS = listsum (dims A @ ds) (map (\\<lambda>C. A \\<otimes> C) CS)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<otimes> listsum ds CS =\n    listsum (dims A @ ds) (map ((\\<otimes>) A) CS)", "using assms"], ["proof (prove)\nusing this:\n  ?C \\<in> set CS \\<Longrightarrow> dims ?C = ds\n\ngoal (1 subgoal):\n 1. A \\<otimes> listsum ds CS =\n    listsum (dims A @ ds) (map ((\\<otimes>) A) CS)", "proof (induction CS)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>C.\n        C \\<in> set [] \\<Longrightarrow> dims C = ds) \\<Longrightarrow>\n    A \\<otimes> listsum ds [] =\n    listsum (dims A @ ds) (map ((\\<otimes>) A) [])\n 2. \\<And>a CS.\n       \\<lbrakk>(\\<And>C.\n                    C \\<in> set CS \\<Longrightarrow>\n                    dims C = ds) \\<Longrightarrow>\n                A \\<otimes> listsum ds CS =\n                listsum (dims A @ ds) (map ((\\<otimes>) A) CS);\n        \\<And>C. C \\<in> set (a # CS) \\<Longrightarrow> dims C = ds\\<rbrakk>\n       \\<Longrightarrow> A \\<otimes> listsum ds (a # CS) =\n                         listsum (dims A @ ds)\n                          (map ((\\<otimes>) A) (a # CS))", "case Nil"], ["proof (state)\nthis:\n  ?C \\<in> set [] \\<Longrightarrow> dims ?C = ds\n\ngoal (2 subgoals):\n 1. (\\<And>C.\n        C \\<in> set [] \\<Longrightarrow> dims C = ds) \\<Longrightarrow>\n    A \\<otimes> listsum ds [] =\n    listsum (dims A @ ds) (map ((\\<otimes>) A) [])\n 2. \\<And>a CS.\n       \\<lbrakk>(\\<And>C.\n                    C \\<in> set CS \\<Longrightarrow>\n                    dims C = ds) \\<Longrightarrow>\n                A \\<otimes> listsum ds CS =\n                listsum (dims A @ ds) (map ((\\<otimes>) A) CS);\n        \\<And>C. C \\<in> set (a # CS) \\<Longrightarrow> dims C = ds\\<rbrakk>\n       \\<Longrightarrow> A \\<otimes> listsum ds (a # CS) =\n                         listsum (dims A @ ds)\n                          (map ((\\<otimes>) A) (a # CS))", "then"], ["proof (chain)\npicking this:\n  ?C \\<in> set [] \\<Longrightarrow> dims ?C = ds", "show ?case"], ["proof (prove)\nusing this:\n  ?C \\<in> set [] \\<Longrightarrow> dims ?C = ds\n\ngoal (1 subgoal):\n 1. A \\<otimes> listsum ds [] =\n    listsum (dims A @ ds) (map ((\\<otimes>) A) [])", "by (simp add:listsum_Nil)"], ["proof (state)\nthis:\n  A \\<otimes> listsum ds [] = listsum (dims A @ ds) (map ((\\<otimes>) A) [])\n\ngoal (1 subgoal):\n 1. \\<And>a CS.\n       \\<lbrakk>(\\<And>C.\n                    C \\<in> set CS \\<Longrightarrow>\n                    dims C = ds) \\<Longrightarrow>\n                A \\<otimes> listsum ds CS =\n                listsum (dims A @ ds) (map ((\\<otimes>) A) CS);\n        \\<And>C. C \\<in> set (a # CS) \\<Longrightarrow> dims C = ds\\<rbrakk>\n       \\<Longrightarrow> A \\<otimes> listsum ds (a # CS) =\n                         listsum (dims A @ ds)\n                          (map ((\\<otimes>) A) (a # CS))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a CS.\n       \\<lbrakk>(\\<And>C.\n                    C \\<in> set CS \\<Longrightarrow>\n                    dims C = ds) \\<Longrightarrow>\n                A \\<otimes> listsum ds CS =\n                listsum (dims A @ ds) (map ((\\<otimes>) A) CS);\n        \\<And>C. C \\<in> set (a # CS) \\<Longrightarrow> dims C = ds\\<rbrakk>\n       \\<Longrightarrow> A \\<otimes> listsum ds (a # CS) =\n                         listsum (dims A @ ds)\n                          (map ((\\<otimes>) A) (a # CS))", "case (Cons C CS)"], ["proof (state)\nthis:\n  (\\<And>C. C \\<in> set CS \\<Longrightarrow> dims C = ds) \\<Longrightarrow>\n  A \\<otimes> listsum ds CS = listsum (dims A @ ds) (map ((\\<otimes>) A) CS)\n  ?C \\<in> set (C # CS) \\<Longrightarrow> dims ?C = ds\n\ngoal (1 subgoal):\n 1. \\<And>a CS.\n       \\<lbrakk>(\\<And>C.\n                    C \\<in> set CS \\<Longrightarrow>\n                    dims C = ds) \\<Longrightarrow>\n                A \\<otimes> listsum ds CS =\n                listsum (dims A @ ds) (map ((\\<otimes>) A) CS);\n        \\<And>C. C \\<in> set (a # CS) \\<Longrightarrow> dims C = ds\\<rbrakk>\n       \\<Longrightarrow> A \\<otimes> listsum ds (a # CS) =\n                         listsum (dims A @ ds)\n                          (map ((\\<otimes>) A) (a # CS))", "then"], ["proof (chain)\npicking this:\n  (\\<And>C. C \\<in> set CS \\<Longrightarrow> dims C = ds) \\<Longrightarrow>\n  A \\<otimes> listsum ds CS = listsum (dims A @ ds) (map ((\\<otimes>) A) CS)\n  ?C \\<in> set (C # CS) \\<Longrightarrow> dims ?C = ds", "have \"dims C = dims (listsum ds CS)\""], ["proof (prove)\nusing this:\n  (\\<And>C. C \\<in> set CS \\<Longrightarrow> dims C = ds) \\<Longrightarrow>\n  A \\<otimes> listsum ds CS = listsum (dims A @ ds) (map ((\\<otimes>) A) CS)\n  ?C \\<in> set (C # CS) \\<Longrightarrow> dims ?C = ds\n\ngoal (1 subgoal):\n 1. dims C = dims (listsum ds CS)", "by (simp add: list.set_intros(1) list.set_intros(2) listsum_dims)"], ["proof (state)\nthis:\n  dims C = dims (listsum ds CS)\n\ngoal (1 subgoal):\n 1. \\<And>a CS.\n       \\<lbrakk>(\\<And>C.\n                    C \\<in> set CS \\<Longrightarrow>\n                    dims C = ds) \\<Longrightarrow>\n                A \\<otimes> listsum ds CS =\n                listsum (dims A @ ds) (map ((\\<otimes>) A) CS);\n        \\<And>C. C \\<in> set (a # CS) \\<Longrightarrow> dims C = ds\\<rbrakk>\n       \\<Longrightarrow> A \\<otimes> listsum ds (a # CS) =\n                         listsum (dims A @ ds)\n                          (map ((\\<otimes>) A) (a # CS))", "then"], ["proof (chain)\npicking this:\n  dims C = dims (listsum ds CS)", "show ?case"], ["proof (prove)\nusing this:\n  dims C = dims (listsum ds CS)\n\ngoal (1 subgoal):\n 1. A \\<otimes> listsum ds (C # CS) =\n    listsum (dims A @ ds) (map ((\\<otimes>) A) (C # CS))", "unfolding listsum_Cons list.map(2)"], ["proof (prove)\nusing this:\n  dims C = dims (listsum ds CS)\n\ngoal (1 subgoal):\n 1. A \\<otimes> (C + listsum ds CS) =\n    A \\<otimes> C + listsum (dims A @ ds) (map ((\\<otimes>) A) CS)", "using tensor_prod_distr_right Cons.IH Cons.prems list.set_intros(2)"], ["proof (prove)\nusing this:\n  dims C = dims (listsum ds CS)\n  dims ?A = dims ?B \\<Longrightarrow>\n  ?C \\<otimes> (?A + ?B) = ?C \\<otimes> ?A + ?C \\<otimes> ?B\n  (\\<And>C. C \\<in> set CS \\<Longrightarrow> dims C = ds) \\<Longrightarrow>\n  A \\<otimes> listsum ds CS = listsum (dims A @ ds) (map ((\\<otimes>) A) CS)\n  ?C \\<in> set (C # CS) \\<Longrightarrow> dims ?C = ds\n  ?y \\<in> set ?x22.0 \\<Longrightarrow> ?y \\<in> set (?x21.0 # ?x22.0)\n\ngoal (1 subgoal):\n 1. A \\<otimes> (C + listsum ds CS) =\n    A \\<otimes> C + listsum (dims A @ ds) (map ((\\<otimes>) A) CS)", "by fastforce"], ["proof (state)\nthis:\n  A \\<otimes> listsum ds (C # CS) =\n  listsum (dims A @ ds) (map ((\\<otimes>) A) (C # CS))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cprank_max_prod_order1:\nassumes \"order A = 1\"\nand \"cprank_max n B\"\nshows \"cprank_max n (A\\<otimes>B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cprank_max n (A \\<otimes> B)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cprank_max n (A \\<otimes> B)", "obtain CS where \"(\\<And>C. C\\<in>set CS \\<Longrightarrow> cprank_max1 C)\"\n              and \"(\\<And>C. C\\<in>set CS \\<Longrightarrow> dims C = dims B)\"\n              and \"listsum (dims B) CS = B\"\n              and \"length CS = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>CS.\n        \\<lbrakk>\\<And>C. C \\<in> set CS \\<Longrightarrow> cprank_max1 C;\n         \\<And>C. C \\<in> set CS \\<Longrightarrow> dims C = dims B;\n         listsum (dims B) CS = B; length CS = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(2) cprank_maxE"], ["proof (prove)\nusing this:\n  cprank_max n B\n  \\<lbrakk>cprank_max ?n ?A;\n   \\<And>BS.\n      \\<lbrakk>\\<And>B. B \\<in> set BS \\<Longrightarrow> cprank_max1 B;\n       \\<And>B. B \\<in> set BS \\<Longrightarrow> dims ?A = dims B;\n       listsum (dims ?A) BS = ?A; length BS = ?n\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>CS.\n        \\<lbrakk>\\<And>C. C \\<in> set CS \\<Longrightarrow> cprank_max1 C;\n         \\<And>C. C \\<in> set CS \\<Longrightarrow> dims C = dims B;\n         listsum (dims B) CS = B; length CS = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  ?C \\<in> set CS \\<Longrightarrow> cprank_max1 ?C\n  ?C \\<in> set CS \\<Longrightarrow> dims ?C = dims B\n  listsum (dims B) CS = B\n  length CS = n\n\ngoal (1 subgoal):\n 1. cprank_max n (A \\<otimes> B)", "define CS' where \"CS' = map (\\<lambda>C. A\\<otimes>C) CS\""], ["proof (state)\nthis:\n  CS' = map ((\\<otimes>) A) CS\n\ngoal (1 subgoal):\n 1. cprank_max n (A \\<otimes> B)", "then"], ["proof (chain)\npicking this:\n  CS' = map ((\\<otimes>) A) CS", "have \"\\<And>C'. C'\\<in>set CS' \\<Longrightarrow> cprank_max1 C'\""], ["proof (prove)\nusing this:\n  CS' = map ((\\<otimes>) A) CS\n\ngoal (1 subgoal):\n 1. \\<And>C'. C' \\<in> set CS' \\<Longrightarrow> cprank_max1 C'", "using assms(1) higher_order \\<open>\\<And>C. C \\<in> set CS \\<Longrightarrow> cprank_max1 C\\<close> imageE set_map"], ["proof (prove)\nusing this:\n  CS' = map ((\\<otimes>) A) CS\n  order A = 1\n  \\<lbrakk>order ?A = 1; cprank_max1 ?B\\<rbrakk>\n  \\<Longrightarrow> cprank_max1 (?A \\<otimes> ?B)\n  ?C \\<in> set CS \\<Longrightarrow> cprank_max1 ?C\n  \\<lbrakk>?b \\<in> ?f ` ?A;\n   \\<And>x.\n      \\<lbrakk>?b = ?f x; x \\<in> ?A\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  set (map ?f ?xs) = ?f ` set ?xs\n\ngoal (1 subgoal):\n 1. \\<And>C'. C' \\<in> set CS' \\<Longrightarrow> cprank_max1 C'", "by auto"], ["proof (state)\nthis:\n  ?C' \\<in> set CS' \\<Longrightarrow> cprank_max1 ?C'\n\ngoal (1 subgoal):\n 1. cprank_max n (A \\<otimes> B)", "have \"listsum (dims A @ dims B) CS' = A\\<otimes>B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. listsum (dims A @ dims B) CS' = A \\<otimes> B", "using CS'_def \\<open>Tensor_Plus.listsum (dims B) CS = B\\<close>"], ["proof (prove)\nusing this:\n  CS' = map ((\\<otimes>) A) CS\n  listsum (dims B) CS = B\n\ngoal (1 subgoal):\n 1. listsum (dims A @ dims B) CS' = A \\<otimes> B", "using \\<open>\\<And>Ca. Ca \\<in> set CS \\<Longrightarrow> dims Ca = dims B\\<close> listsum_prod_distr_right"], ["proof (prove)\nusing this:\n  CS' = map ((\\<otimes>) A) CS\n  listsum (dims B) CS = B\n  ?Ca \\<in> set CS \\<Longrightarrow> dims ?Ca = dims B\n  (\\<And>C.\n      C \\<in> set ?CS \\<Longrightarrow> dims C = ?ds) \\<Longrightarrow>\n  ?A \\<otimes> listsum ?ds ?CS =\n  listsum (dims ?A @ ?ds) (map ((\\<otimes>) ?A) ?CS)\n\ngoal (1 subgoal):\n 1. listsum (dims A @ dims B) CS' = A \\<otimes> B", "by fastforce"], ["proof (state)\nthis:\n  listsum (dims A @ dims B) CS' = A \\<otimes> B\n\ngoal (1 subgoal):\n 1. cprank_max n (A \\<otimes> B)", "then"], ["proof (chain)\npicking this:\n  listsum (dims A @ dims B) CS' = A \\<otimes> B", "show ?thesis"], ["proof (prove)\nusing this:\n  listsum (dims A @ dims B) CS' = A \\<otimes> B\n\ngoal (1 subgoal):\n 1. cprank_max n (A \\<otimes> B)", "by (metis (mono_tags, lifting) CS'_def \\<open>\\<And>C'. C' \\<in> set CS' \\<Longrightarrow> cprank_max1 C'\\<close> \\<open>\\<And>Ca. Ca \\<in> set CS \\<Longrightarrow> dims Ca = dims B\\<close> \\<open>length CS = n\\<close> dims_tensor_prod imageE length_map cprank_maxI set_map)"], ["proof (state)\nthis:\n  cprank_max n (A \\<otimes> B)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cprank_max_upper_bound: (* Stronger bound is possible, one of the factors in prod_list can be dropped. *)\nshows \"cprank_max (prod_list (dims A)) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cprank_max (prod_list (dims A)) A", "proof (induction A rule:subtensor_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A. dims A = [] \\<Longrightarrow> cprank_max (prod_list (dims A)) A\n 2. \\<And>A.\n       \\<lbrakk>dims A \\<noteq> [];\n        \\<And>i.\n           i < hd (dims A) \\<Longrightarrow>\n           cprank_max (prod_list (dims (subtensor A i)))\n            (subtensor A i)\\<rbrakk>\n       \\<Longrightarrow> cprank_max (prod_list (dims A)) A", "case (order_0 A)"], ["proof (state)\nthis:\n  dims A = []\n\ngoal (2 subgoals):\n 1. \\<And>A. dims A = [] \\<Longrightarrow> cprank_max (prod_list (dims A)) A\n 2. \\<And>A.\n       \\<lbrakk>dims A \\<noteq> [];\n        \\<And>i.\n           i < hd (dims A) \\<Longrightarrow>\n           cprank_max (prod_list (dims (subtensor A i)))\n            (subtensor A i)\\<rbrakk>\n       \\<Longrightarrow> cprank_max (prod_list (dims A)) A", "then"], ["proof (chain)\npicking this:\n  dims A = []", "have \"cprank_max 1 A\""], ["proof (prove)\nusing this:\n  dims A = []\n\ngoal (1 subgoal):\n 1. cprank_max 1 A", "using order1 cprank_max1"], ["proof (prove)\nusing this:\n  dims A = []\n  order ?A \\<le> 1 \\<Longrightarrow> cprank_max1 ?A\n  cprank_max1 ?A \\<Longrightarrow> cprank_max 1 ?A\n\ngoal (1 subgoal):\n 1. cprank_max 1 A", "by force"], ["proof (state)\nthis:\n  cprank_max 1 A\n\ngoal (2 subgoals):\n 1. \\<And>A. dims A = [] \\<Longrightarrow> cprank_max (prod_list (dims A)) A\n 2. \\<And>A.\n       \\<lbrakk>dims A \\<noteq> [];\n        \\<And>i.\n           i < hd (dims A) \\<Longrightarrow>\n           cprank_max (prod_list (dims (subtensor A i)))\n            (subtensor A i)\\<rbrakk>\n       \\<Longrightarrow> cprank_max (prod_list (dims A)) A", "then"], ["proof (chain)\npicking this:\n  cprank_max 1 A", "show ?case"], ["proof (prove)\nusing this:\n  cprank_max 1 A\n\ngoal (1 subgoal):\n 1. cprank_max (prod_list (dims A)) A", "using order_0"], ["proof (prove)\nusing this:\n  cprank_max 1 A\n  dims A = []\n\ngoal (1 subgoal):\n 1. cprank_max (prod_list (dims A)) A", "by auto"], ["proof (state)\nthis:\n  cprank_max (prod_list (dims A)) A\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<lbrakk>dims A \\<noteq> [];\n        \\<And>i.\n           i < hd (dims A) \\<Longrightarrow>\n           cprank_max (prod_list (dims (subtensor A i)))\n            (subtensor A i)\\<rbrakk>\n       \\<Longrightarrow> cprank_max (prod_list (dims A)) A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<lbrakk>dims A \\<noteq> [];\n        \\<And>i.\n           i < hd (dims A) \\<Longrightarrow>\n           cprank_max (prod_list (dims (subtensor A i)))\n            (subtensor A i)\\<rbrakk>\n       \\<Longrightarrow> cprank_max (prod_list (dims A)) A", "case (order_step A)"], ["proof (state)\nthis:\n  dims A \\<noteq> []\n  ?i < hd (dims A) \\<Longrightarrow>\n  cprank_max (prod_list (dims (subtensor A ?i))) (subtensor A ?i)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<lbrakk>dims A \\<noteq> [];\n        \\<And>i.\n           i < hd (dims A) \\<Longrightarrow>\n           cprank_max (prod_list (dims (subtensor A i)))\n            (subtensor A i)\\<rbrakk>\n       \\<Longrightarrow> cprank_max (prod_list (dims A)) A", "define Bs where \"Bs = map (\\<lambda>i. unit_vec (hd (dims A)) i \\<otimes> subtensor A i) [0..<hd (dims A)]\""], ["proof (state)\nthis:\n  Bs =\n  map (\\<lambda>i. unit_vec (hd (dims A)) i \\<otimes> subtensor A i)\n   [0..<hd (dims A)]\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<lbrakk>dims A \\<noteq> [];\n        \\<And>i.\n           i < hd (dims A) \\<Longrightarrow>\n           cprank_max (prod_list (dims (subtensor A i)))\n            (subtensor A i)\\<rbrakk>\n       \\<Longrightarrow> cprank_max (prod_list (dims A)) A", "have \"\\<And>B. B \\<in> set Bs \\<Longrightarrow> dims A = dims B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>B. B \\<in> set Bs \\<Longrightarrow> dims A = dims B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B. B \\<in> set Bs \\<Longrightarrow> dims A = dims B", "fix B"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B. B \\<in> set Bs \\<Longrightarrow> dims A = dims B", "assume \"B \\<in> set Bs\""], ["proof (state)\nthis:\n  B \\<in> set Bs\n\ngoal (1 subgoal):\n 1. \\<And>B. B \\<in> set Bs \\<Longrightarrow> dims A = dims B", "obtain i where \"i<hd (dims A)\" \"Bs!i=B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < hd (dims A); Bs ! i = B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Bs_def \\<open>B \\<in> set Bs\\<close>"], ["proof (prove)\nusing this:\n  Bs =\n  map (\\<lambda>i. unit_vec (hd (dims A)) i \\<otimes> subtensor A i)\n   [0..<hd (dims A)]\n  B \\<in> set Bs\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < hd (dims A); Bs ! i = B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i < hd (dims A)\n  Bs ! i = B\n\ngoal (1 subgoal):\n 1. \\<And>B. B \\<in> set Bs \\<Longrightarrow> dims A = dims B", "then"], ["proof (chain)\npicking this:\n  i < hd (dims A)\n  Bs ! i = B", "have \"dims (unit_vec (hd (dims A)) i \\<otimes> subtensor A i) = dims A\""], ["proof (prove)\nusing this:\n  i < hd (dims A)\n  Bs ! i = B\n\ngoal (1 subgoal):\n 1. dims (unit_vec (hd (dims A)) i \\<otimes> subtensor A i) = dims A", "using dims_unit_vec order_step.hyps"], ["proof (prove)\nusing this:\n  i < hd (dims A)\n  Bs ! i = B\n  dims (unit_vec ?n ?i) = [?n]\n  dims A \\<noteq> []\n\ngoal (1 subgoal):\n 1. dims (unit_vec (hd (dims A)) i \\<otimes> subtensor A i) = dims A", "by (metis append_Cons dims_subtensor dims_tensor_prod list.exhaust_sel self_append_conv2)"], ["proof (state)\nthis:\n  dims (unit_vec (hd (dims A)) i \\<otimes> subtensor A i) = dims A\n\ngoal (1 subgoal):\n 1. \\<And>B. B \\<in> set Bs \\<Longrightarrow> dims A = dims B", "then"], ["proof (chain)\npicking this:\n  dims (unit_vec (hd (dims A)) i \\<otimes> subtensor A i) = dims A", "show \"dims A = dims B\""], ["proof (prove)\nusing this:\n  dims (unit_vec (hd (dims A)) i \\<otimes> subtensor A i) = dims A\n\ngoal (1 subgoal):\n 1. dims A = dims B", "using Bs_def \\<open>Bs ! i = B\\<close> \\<open>i < hd (dims A)\\<close>"], ["proof (prove)\nusing this:\n  dims (unit_vec (hd (dims A)) i \\<otimes> subtensor A i) = dims A\n  Bs =\n  map (\\<lambda>i. unit_vec (hd (dims A)) i \\<otimes> subtensor A i)\n   [0..<hd (dims A)]\n  Bs ! i = B\n  i < hd (dims A)\n\ngoal (1 subgoal):\n 1. dims A = dims B", "by auto"], ["proof (state)\nthis:\n  dims A = dims B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?B \\<in> set Bs \\<Longrightarrow> dims A = dims ?B\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<lbrakk>dims A \\<noteq> [];\n        \\<And>i.\n           i < hd (dims A) \\<Longrightarrow>\n           cprank_max (prod_list (dims (subtensor A i)))\n            (subtensor A i)\\<rbrakk>\n       \\<Longrightarrow> cprank_max (prod_list (dims A)) A", "have \"\\<And>B. B \\<in> set Bs \\<Longrightarrow> cprank_max (prod_list (tl (dims A))) B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>B.\n       B \\<in> set Bs \\<Longrightarrow>\n       cprank_max (prod_list (tl (dims A))) B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B.\n       B \\<in> set Bs \\<Longrightarrow>\n       cprank_max (prod_list (tl (dims A))) B", "fix B"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B.\n       B \\<in> set Bs \\<Longrightarrow>\n       cprank_max (prod_list (tl (dims A))) B", "assume \"B \\<in> set Bs\""], ["proof (state)\nthis:\n  B \\<in> set Bs\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       B \\<in> set Bs \\<Longrightarrow>\n       cprank_max (prod_list (tl (dims A))) B", "obtain i where \"i<hd (dims A)\" \"Bs!i=B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < hd (dims A); Bs ! i = B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Bs_def \\<open>B \\<in> set Bs\\<close>"], ["proof (prove)\nusing this:\n  Bs =\n  map (\\<lambda>i. unit_vec (hd (dims A)) i \\<otimes> subtensor A i)\n   [0..<hd (dims A)]\n  B \\<in> set Bs\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < hd (dims A); Bs ! i = B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i < hd (dims A)\n  Bs ! i = B\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       B \\<in> set Bs \\<Longrightarrow>\n       cprank_max (prod_list (tl (dims A))) B", "then"], ["proof (chain)\npicking this:\n  i < hd (dims A)\n  Bs ! i = B", "have \"cprank_max (prod_list (tl (dims A))) (unit_vec (hd (dims A)) i \\<otimes> subtensor A i)\""], ["proof (prove)\nusing this:\n  i < hd (dims A)\n  Bs ! i = B\n\ngoal (1 subgoal):\n 1. cprank_max (prod_list (tl (dims A)))\n     (unit_vec (hd (dims A)) i \\<otimes> subtensor A i)", "by (metis One_nat_def dims_subtensor dims_unit_vec length_Cons list.size(3) order_step.IH order_step.hyps cprank_max_prod_order1)"], ["proof (state)\nthis:\n  cprank_max (prod_list (tl (dims A)))\n   (unit_vec (hd (dims A)) i \\<otimes> subtensor A i)\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       B \\<in> set Bs \\<Longrightarrow>\n       cprank_max (prod_list (tl (dims A))) B", "then"], ["proof (chain)\npicking this:\n  cprank_max (prod_list (tl (dims A)))\n   (unit_vec (hd (dims A)) i \\<otimes> subtensor A i)", "show \"cprank_max (prod_list (tl (dims A))) B\""], ["proof (prove)\nusing this:\n  cprank_max (prod_list (tl (dims A)))\n   (unit_vec (hd (dims A)) i \\<otimes> subtensor A i)\n\ngoal (1 subgoal):\n 1. cprank_max (prod_list (tl (dims A))) B", "using Bs_def \\<open>Bs ! i = B\\<close> \\<open>i < hd (dims A)\\<close>"], ["proof (prove)\nusing this:\n  cprank_max (prod_list (tl (dims A)))\n   (unit_vec (hd (dims A)) i \\<otimes> subtensor A i)\n  Bs =\n  map (\\<lambda>i. unit_vec (hd (dims A)) i \\<otimes> subtensor A i)\n   [0..<hd (dims A)]\n  Bs ! i = B\n  i < hd (dims A)\n\ngoal (1 subgoal):\n 1. cprank_max (prod_list (tl (dims A))) B", "by auto"], ["proof (state)\nthis:\n  cprank_max (prod_list (tl (dims A))) B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?B \\<in> set Bs \\<Longrightarrow> cprank_max (prod_list (tl (dims A))) ?B\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<lbrakk>dims A \\<noteq> [];\n        \\<And>i.\n           i < hd (dims A) \\<Longrightarrow>\n           cprank_max (prod_list (dims (subtensor A i)))\n            (subtensor A i)\\<rbrakk>\n       \\<Longrightarrow> cprank_max (prod_list (dims A)) A", "then"], ["proof (chain)\npicking this:\n  ?B \\<in> set Bs \\<Longrightarrow> cprank_max (prod_list (tl (dims A))) ?B", "show ?case"], ["proof (prove)\nusing this:\n  ?B \\<in> set Bs \\<Longrightarrow> cprank_max (prod_list (tl (dims A))) ?B\n\ngoal (1 subgoal):\n 1. cprank_max (prod_list (dims A)) A", "using subtensor_decomposition[OF order_step.hyps] cprank_max_listsum"], ["proof (prove)\nusing this:\n  ?B \\<in> set Bs \\<Longrightarrow> cprank_max (prod_list (tl (dims A))) ?B\n  listsum (dims A)\n   (map (\\<lambda>i. unit_vec (hd (dims A)) i \\<otimes> subtensor A i)\n     [0..<hd (dims A)]) =\n  A\n  \\<lbrakk>\\<And>A. A \\<in> set ?As \\<Longrightarrow> dims A = ?ds;\n   \\<And>A. A \\<in> set ?As \\<Longrightarrow> cprank_max ?n A\\<rbrakk>\n  \\<Longrightarrow> cprank_max (?n * length ?As) (listsum ?ds ?As)\n\ngoal (1 subgoal):\n 1. cprank_max (prod_list (dims A)) A", "by (metis (no_types, lifting) Bs_def \\<open>\\<And>Ba. Ba \\<in> set Bs \\<Longrightarrow> dims A = dims Ba\\<close> diff_zero length_map length_upt list.exhaust_sel prod_list.Cons mult.commute order_step.hyps)"], ["proof (state)\nthis:\n  cprank_max (prod_list (dims A)) A\n\ngoal:\nNo subgoals!", "qed"], ["", "definition cprank :: \"'a::ring_1 tensor \\<Rightarrow> nat\" where\n\"cprank A = (LEAST n. cprank_max n A)\""], ["", "lemma cprank_upper_bound: \"cprank A \\<le> prod_list (dims A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cprank A \\<le> prod_list (dims A)", "unfolding cprank_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST n. cprank_max n A) \\<le> prod_list (dims A)", "using cprank_max_upper_bound Least_le"], ["proof (prove)\nusing this:\n  cprank_max (prod_list (dims ?A)) ?A\n  ?P ?k \\<Longrightarrow> (LEAST x. ?P x) \\<le> ?k\n\ngoal (1 subgoal):\n 1. (LEAST n. cprank_max n A) \\<le> prod_list (dims A)", "by fastforce"], ["", "lemma cprank_max_cprank: \"cprank_max (cprank A) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cprank_max (cprank A) A", "unfolding cprank_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. cprank_max (LEAST n. cprank_max n A) A", "using cprank_max_upper_bound"], ["proof (prove)\nusing this:\n  cprank_max (prod_list (dims ?A)) ?A\n\ngoal (1 subgoal):\n 1. cprank_max (LEAST n. cprank_max n A) A", "by (metis LeastI)"], ["", "end"]]}