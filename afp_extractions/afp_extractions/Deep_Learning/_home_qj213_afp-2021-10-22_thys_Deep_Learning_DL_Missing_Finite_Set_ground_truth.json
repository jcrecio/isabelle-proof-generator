{"file_name": "/home/qj213/afp-2021-10-22/thys/Deep_Learning/DL_Missing_Finite_Set.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Deep_Learning", "problem_names": ["lemma card_even[simp]: \"card {a \\<in> Collect even. a < 2 * n} = n\"", "lemma card_odd[simp]: \"card {a \\<in> Collect odd. a < 2 * n} = n\""], "translations": [["", "lemma card_even[simp]: \"card {a \\<in> Collect even. a < 2 * n} = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {a \\<in> Collect even. a < 2 * n} = n", "proof (induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. card {a \\<in> Collect even. a < 2 * 0} = 0\n 2. \\<And>n.\n       card {a \\<in> Collect even. a < 2 * n} = n \\<Longrightarrow>\n       card {a \\<in> Collect even. a < 2 * Suc n} = Suc n", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. card {a \\<in> Collect even. a < 2 * 0} = 0\n 2. \\<And>n.\n       card {a \\<in> Collect even. a < 2 * n} = n \\<Longrightarrow>\n       card {a \\<in> Collect even. a < 2 * Suc n} = Suc n", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {a \\<in> Collect even. a < 2 * 0} = 0", "by auto"], ["proof (state)\nthis:\n  card {a \\<in> Collect even. a < 2 * 0} = 0\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       card {a \\<in> Collect even. a < 2 * n} = n \\<Longrightarrow>\n       card {a \\<in> Collect even. a < 2 * Suc n} = Suc n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       card {a \\<in> Collect even. a < 2 * n} = n \\<Longrightarrow>\n       card {a \\<in> Collect even. a < 2 * Suc n} = Suc n", "case (Suc n)"], ["proof (state)\nthis:\n  card {a \\<in> Collect even. a < 2 * n} = n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       card {a \\<in> Collect even. a < 2 * n} = n \\<Longrightarrow>\n       card {a \\<in> Collect even. a < 2 * Suc n} = Suc n", "have \"{a \\<in> Collect even. a < 2 * Suc n} = insert (2*n) {a \\<in> Collect even. a < 2 * n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {a \\<in> Collect even. a < 2 * Suc n} =\n    insert (2 * n) {a \\<in> Collect even. a < 2 * n}", "using le_eq_less_or_eq less_Suc_eq_le subset_antisym"], ["proof (prove)\nusing this:\n  (?m \\<le> ?n) = (?m < ?n \\<or> ?m = ?n)\n  (?m < Suc ?n) = (?m \\<le> ?n)\n  \\<lbrakk>?A \\<subseteq> ?B; ?B \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> ?A = ?B\n\ngoal (1 subgoal):\n 1. {a \\<in> Collect even. a < 2 * Suc n} =\n    insert (2 * n) {a \\<in> Collect even. a < 2 * n}", "by force"], ["proof (state)\nthis:\n  {a \\<in> Collect even. a < 2 * Suc n} =\n  insert (2 * n) {a \\<in> Collect even. a < 2 * n}\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       card {a \\<in> Collect even. a < 2 * n} = n \\<Longrightarrow>\n       card {a \\<in> Collect even. a < 2 * Suc n} = Suc n", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {a \\<in> Collect even. a < 2 * Suc n} = Suc n", "unfolding \\<open>{a \\<in> Collect even. a < 2 * Suc n} = insert (2*n) {a \\<in> Collect even. a < 2 * n}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (insert (2 * n) {a \\<in> Collect even. a < 2 * n}) = Suc n", "using Suc card_insert_disjoint[of \"{a \\<in> Collect even. a < 2 * n}\" \"2*n\"]"], ["proof (prove)\nusing this:\n  card {a \\<in> Collect even. a < 2 * n} = n\n  \\<lbrakk>finite {a \\<in> Collect even. a < 2 * n};\n   2 * n \\<notin> {a \\<in> Collect even. a < 2 * n}\\<rbrakk>\n  \\<Longrightarrow> card\n                     (insert (2 * n) {a \\<in> Collect even. a < 2 * n}) =\n                    Suc (card {a \\<in> Collect even. a < 2 * n})\n\ngoal (1 subgoal):\n 1. card (insert (2 * n) {a \\<in> Collect even. a < 2 * n}) = Suc n", "by (simp add: finite_M_bounded_by_nat less_not_refl2)"], ["proof (state)\nthis:\n  card {a \\<in> Collect even. a < 2 * Suc n} = Suc n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_odd[simp]: \"card {a \\<in> Collect odd. a < 2 * n} = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {a \\<in> {a. odd a}. a < 2 * n} = n", "proof (induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. card {a \\<in> {a. odd a}. a < 2 * 0} = 0\n 2. \\<And>n.\n       card {a \\<in> {a. odd a}. a < 2 * n} = n \\<Longrightarrow>\n       card {a \\<in> {a. odd a}. a < 2 * Suc n} = Suc n", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. card {a \\<in> {a. odd a}. a < 2 * 0} = 0\n 2. \\<And>n.\n       card {a \\<in> {a. odd a}. a < 2 * n} = n \\<Longrightarrow>\n       card {a \\<in> {a. odd a}. a < 2 * Suc n} = Suc n", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {a \\<in> {a. odd a}. a < 2 * 0} = 0", "by auto"], ["proof (state)\nthis:\n  card {a \\<in> {a. odd a}. a < 2 * 0} = 0\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       card {a \\<in> {a. odd a}. a < 2 * n} = n \\<Longrightarrow>\n       card {a \\<in> {a. odd a}. a < 2 * Suc n} = Suc n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       card {a \\<in> {a. odd a}. a < 2 * n} = n \\<Longrightarrow>\n       card {a \\<in> {a. odd a}. a < 2 * Suc n} = Suc n", "case (Suc n)"], ["proof (state)\nthis:\n  card {a \\<in> {a. odd a}. a < 2 * n} = n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       card {a \\<in> {a. odd a}. a < 2 * n} = n \\<Longrightarrow>\n       card {a \\<in> {a. odd a}. a < 2 * Suc n} = Suc n", "have \"{a \\<in> Collect odd. a < 2 * Suc n} = insert (2*n+1) {a \\<in> Collect odd. a < 2 * n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {a \\<in> {a. odd a}. a < 2 * Suc n} =\n    insert (2 * n + 1) {a \\<in> {a. odd a}. a < 2 * n}", "using le_eq_less_or_eq less_Suc_eq_le subset_antisym"], ["proof (prove)\nusing this:\n  (?m \\<le> ?n) = (?m < ?n \\<or> ?m = ?n)\n  (?m < Suc ?n) = (?m \\<le> ?n)\n  \\<lbrakk>?A \\<subseteq> ?B; ?B \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> ?A = ?B\n\ngoal (1 subgoal):\n 1. {a \\<in> {a. odd a}. a < 2 * Suc n} =\n    insert (2 * n + 1) {a \\<in> {a. odd a}. a < 2 * n}", "by force"], ["proof (state)\nthis:\n  {a \\<in> {a. odd a}. a < 2 * Suc n} =\n  insert (2 * n + 1) {a \\<in> {a. odd a}. a < 2 * n}\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       card {a \\<in> {a. odd a}. a < 2 * n} = n \\<Longrightarrow>\n       card {a \\<in> {a. odd a}. a < 2 * Suc n} = Suc n", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {a \\<in> {a. odd a}. a < 2 * Suc n} = Suc n", "unfolding \\<open>{a \\<in> Collect odd. a < 2 * Suc n} = insert (2*n+1) {a \\<in> Collect odd. a < 2 * n}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (insert (2 * n + 1) {a \\<in> {a. odd a}. a < 2 * n}) = Suc n", "using Suc card_insert_disjoint[of \"{a \\<in> Collect even. a < 2 * n}\" \"2*n\"]"], ["proof (prove)\nusing this:\n  card {a \\<in> {a. odd a}. a < 2 * n} = n\n  \\<lbrakk>finite {a \\<in> Collect even. a < 2 * n};\n   2 * n \\<notin> {a \\<in> Collect even. a < 2 * n}\\<rbrakk>\n  \\<Longrightarrow> card\n                     (insert (2 * n) {a \\<in> Collect even. a < 2 * n}) =\n                    Suc (card {a \\<in> Collect even. a < 2 * n})\n\ngoal (1 subgoal):\n 1. card (insert (2 * n + 1) {a \\<in> {a. odd a}. a < 2 * n}) = Suc n", "by (simp add: finite_M_bounded_by_nat less_not_refl2)"], ["proof (state)\nthis:\n  card {a \\<in> {a. odd a}. a < 2 * Suc n} = Suc n\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}