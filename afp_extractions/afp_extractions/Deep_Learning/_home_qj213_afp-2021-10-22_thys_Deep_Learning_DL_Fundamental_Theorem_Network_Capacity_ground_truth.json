{"file_name": "/home/qj213/afp-2021-10-22/thys/Deep_Learning/DL_Fundamental_Theorem_Network_Capacity.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Deep_Learning", "problem_names": ["lemma polyfun_polynomial:\n  shows \"polyfun {..<weight_space_dim} polynomial_f\"", "lemma\npolynomial_p_not_0: \"polynomial_p\\<noteq>0\" and\nvars_polynomial_p: \"vars polynomial_p \\<subseteq> {..<weight_space_dim}\" and\npolynomial_pf: \"\\<And>w. insertion w polynomial_p = polynomial_f w\"", "lemma  if_polynomial_0_rank:\nassumes \"polynomial_f w \\<noteq> 0\"\nshows \"r ^ N_half \\<le> cprank (A w)\"", "lemma  if_polynomial_0_evaluate:\nassumes \"polynomial_f wd \\<noteq> 0\"\nassumes \"\\<forall>inputs. input_sizes (deep_model_l rs) = map dim_vec inputs \\<longrightarrow> evaluate_net (insert_weights shared_weights (deep_model_l rs) wd) inputs\n = evaluate_net (insert_weights shared_weights (shallow_model (rs ! 0) Z (last rs) (2*N_half-1)) ws) inputs\"\nshows \"Z \\<ge> r ^ N_half\"", "lemma  if_polynomial_0_evaluate_notex:\nassumes \"polynomial_f wd \\<noteq> 0\"\nshows \"\\<not>(\\<exists>weights_shallow Z. Z < r ^ N_half \\<and> (\\<forall>inputs. input_sizes (deep_model_l rs) = map dim_vec inputs \\<longrightarrow>\nevaluate_net (insert_weights shared_weights (deep_model_l rs) wd) inputs\n = evaluate_net (insert_weights shared_weights (shallow_model (rs ! 0) Z (last rs) (2*N_half-1)) ws) inputs))\"", "theorem fundamental_theorem_network_capacity:\n\"AE x in lborel_f weight_space_dim. r ^ N_half \\<le> cprank (A x)\"", "theorem fundamental_theorem_network_capacity_v2:\nshows \"AE wd in lborel_f weight_space_dim.\n   \\<not>(\\<exists>ws Z. Z < r ^ N_half \\<and>  (\\<forall>inputs. input_sizes (deep_model_l rs) = map dim_vec inputs \\<longrightarrow>\nevaluate_net (insert_weights shared_weights (deep_model_l rs) wd) inputs\n = evaluate_net (insert_weights shared_weights (shallow_model (rs ! 0) Z (last rs) (2*N_half-1)) ws) inputs))\"", "lemma space_lebesgue_f: \"space (lebesgue_f n) = Pi\\<^sub>E {..<n} (\\<lambda>_. UNIV)\"", "theorem fundamental_theorem_network_capacity_v3:\n  assumes\n    \"S = {wd \\<in> space (lebesgue_f weight_space_dim).\n      \\<exists>ws Z. Z < r ^ N_half \\<and>  (\\<forall>inputs. input_sizes (deep_model_l rs) = map dim_vec inputs \\<longrightarrow>\n        evaluate_net (insert_weights shared_weights (deep_model_l rs) wd) inputs\n      = evaluate_net (insert_weights shared_weights (shallow_model (rs ! 0) Z (last rs) (2*N_half-1)) ws) inputs)}\"\n  shows \"S \\<in> null_sets (completion (lborel_f weight_space_dim))\""], "translations": [["", "lemma polyfun_polynomial:\n  shows \"polyfun {..<weight_space_dim} polynomial_f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. polyfun {..<weight_space_dim} polynomial_f", "unfolding polynomial_f_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. polyfun {..<weight_space_dim}\n     (\\<lambda>w. det (submatrix (ten2mat (A w)) rows_with_1 rows_with_1))", "using polyfun_det_deep_model"], ["proof (prove)\nusing this:\n  polyfun {..<weight_space_dim} (\\<lambda>f. det (witness_submatrix f))\n\ngoal (1 subgoal):\n 1. polyfun {..<weight_space_dim}\n     (\\<lambda>w. det (submatrix (ten2mat (A w)) rows_with_1 rows_with_1))", "unfolding witness_submatrix_def A'_def"], ["proof (prove)\nusing this:\n  polyfun {..<weight_space_dim}\n   (\\<lambda>f. det (submatrix (ten2mat (A f)) rows_with_1 rows_with_1))\n\ngoal (1 subgoal):\n 1. polyfun {..<weight_space_dim}\n     (\\<lambda>w. det (submatrix (ten2mat (A w)) rows_with_1 rows_with_1))", "."], ["", "definition \"polynomial_p = (SOME p. vars p \\<subseteq> {..<weight_space_dim} \\<and> (\\<forall>x. insertion x p = polynomial_f x))\""], ["", "lemma\npolynomial_p_not_0: \"polynomial_p\\<noteq>0\" and\nvars_polynomial_p: \"vars polynomial_p \\<subseteq> {..<weight_space_dim}\" and\npolynomial_pf: \"\\<And>w. insertion w polynomial_p = polynomial_f w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. polynomial_p \\<noteq> 0 &&&\n    vars polynomial_p \\<subseteq> {..<weight_space_dim} &&&\n    (\\<And>w. insertion w polynomial_p = polynomial_f w)", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. polynomial_p \\<noteq> 0\n 2. vars polynomial_p \\<subseteq> {..<weight_space_dim}\n 3. \\<And>w. insertion w polynomial_p = polynomial_f w", "have \"vars polynomial_p \\<subseteq> {..<weight_space_dim} \\<and> (\\<forall>x. insertion x polynomial_p = polynomial_f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars polynomial_p \\<subseteq> {..<weight_space_dim} \\<and>\n    (\\<forall>x. insertion x polynomial_p = polynomial_f x)", "unfolding polynomial_p_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vars\n     (SOME p.\n         vars p \\<subseteq> {..<weight_space_dim} \\<and>\n         (\\<forall>x. insertion x p = polynomial_f x))\n    \\<subseteq> {..<weight_space_dim} \\<and>\n    (\\<forall>x.\n        insertion x\n         (SOME p.\n             vars p \\<subseteq> {..<weight_space_dim} \\<and>\n             (\\<forall>x. insertion x p = polynomial_f x)) =\n        polynomial_f x)", "using someI_ex[OF polyfun_polynomial[unfolded polyfun_def]]"], ["proof (prove)\nusing this:\n  vars\n   (SOME x.\n       vars x \\<subseteq> {..<weight_space_dim} \\<and>\n       (\\<forall>xa. insertion xa x = polynomial_f xa))\n  \\<subseteq> {..<weight_space_dim} \\<and>\n  (\\<forall>x.\n      insertion x\n       (SOME x.\n           vars x \\<subseteq> {..<weight_space_dim} \\<and>\n           (\\<forall>xa. insertion xa x = polynomial_f xa)) =\n      polynomial_f x)\n\ngoal (1 subgoal):\n 1. vars\n     (SOME p.\n         vars p \\<subseteq> {..<weight_space_dim} \\<and>\n         (\\<forall>x. insertion x p = polynomial_f x))\n    \\<subseteq> {..<weight_space_dim} \\<and>\n    (\\<forall>x.\n        insertion x\n         (SOME p.\n             vars p \\<subseteq> {..<weight_space_dim} \\<and>\n             (\\<forall>x. insertion x p = polynomial_f x)) =\n        polynomial_f x)", "."], ["proof (state)\nthis:\n  vars polynomial_p \\<subseteq> {..<weight_space_dim} \\<and>\n  (\\<forall>x. insertion x polynomial_p = polynomial_f x)\n\ngoal (3 subgoals):\n 1. polynomial_p \\<noteq> 0\n 2. vars polynomial_p \\<subseteq> {..<weight_space_dim}\n 3. \\<And>w. insertion w polynomial_p = polynomial_f w", "then"], ["proof (chain)\npicking this:\n  vars polynomial_p \\<subseteq> {..<weight_space_dim} \\<and>\n  (\\<forall>x. insertion x polynomial_p = polynomial_f x)", "show \"vars polynomial_p \\<subseteq> {..<weight_space_dim}\" \"\\<And>w. insertion w polynomial_p = polynomial_f w\""], ["proof (prove)\nusing this:\n  vars polynomial_p \\<subseteq> {..<weight_space_dim} \\<and>\n  (\\<forall>x. insertion x polynomial_p = polynomial_f x)\n\ngoal (1 subgoal):\n 1. vars polynomial_p \\<subseteq> {..<weight_space_dim} &&&\n    (\\<And>w. insertion w polynomial_p = polynomial_f w)", "by auto"], ["proof (state)\nthis:\n  vars polynomial_p \\<subseteq> {..<weight_space_dim}\n  insertion ?w1 polynomial_p = polynomial_f ?w1\n\ngoal (1 subgoal):\n 1. polynomial_p \\<noteq> 0", "show \"polynomial_p\\<noteq>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. polynomial_p \\<noteq> 0", "using A'_def Aw'_def' \\<open>\\<And>w. insertion w polynomial_p = polynomial_f w\\<close> polynomial_f_def witness_det"], ["proof (prove)\nusing this:\n  A' ?ws = ten2mat (A ?ws)\n  Aw' = A' witness_weights\n  insertion ?w polynomial_p = polynomial_f ?w\n  polynomial_f ?w = det (submatrix (ten2mat (A ?w)) rows_with_1 rows_with_1)\n  det (submatrix Aw' rows_with_1 rows_with_1) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. polynomial_p \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  polynomial_p \\<noteq> 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma  if_polynomial_0_rank:\nassumes \"polynomial_f w \\<noteq> 0\"\nshows \"r ^ N_half \\<le> cprank (A w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r ^ N_half \\<le> cprank (A w)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. r ^ N_half \\<le> cprank (A w)", "have \"r ^ N_half = dim_row (submatrix (matricize {n. even n} (A w)) rows_with_1 rows_with_1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r ^ N_half = dim_row (submatrix (ten2mat (A w)) rows_with_1 rows_with_1)", "by (metis (full_types) Aw'_def card_rows_with_1 dim_submatrix(1) dims_A dims_Aw dims_matricize(1) set_le_in)"], ["proof (state)\nthis:\n  r ^ N_half = dim_row (submatrix (ten2mat (A w)) rows_with_1 rows_with_1)\n\ngoal (1 subgoal):\n 1. r ^ N_half \\<le> cprank (A w)", "also"], ["proof (state)\nthis:\n  r ^ N_half = dim_row (submatrix (ten2mat (A w)) rows_with_1 rows_with_1)\n\ngoal (1 subgoal):\n 1. r ^ N_half \\<le> cprank (A w)", "have \"... \\<le> mrank (matricize {n. even n} (A w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (submatrix (ten2mat (A w)) rows_with_1 rows_with_1)\n    \\<le> mrank (ten2mat (A w))", "using assms vec_space.rank_gt_minor[OF carrier_matI[OF dims_A'_pow, unfolded weight_space_dim_def]]"], ["proof (prove)\nusing this:\n  polynomial_f w \\<noteq> 0\n  det (submatrix (A' ?ws2) ?I ?J) \\<noteq> 0 \\<Longrightarrow>\n  card {j. j < last rs ^ N_half \\<and> j \\<in> ?J}\n  \\<le> vec_space.rank (last rs ^ N_half) (A' ?ws2)\n\ngoal (1 subgoal):\n 1. dim_row (submatrix (ten2mat (A w)) rows_with_1 rows_with_1)\n    \\<le> mrank (ten2mat (A w))", "by (metis (full_types) A'_def dim_submatrix(1) dims_A'_pow(1) polynomial_f_def)"], ["proof (state)\nthis:\n  dim_row (submatrix (ten2mat (A w)) rows_with_1 rows_with_1)\n  \\<le> mrank (ten2mat (A w))\n\ngoal (1 subgoal):\n 1. r ^ N_half \\<le> cprank (A w)", "also"], ["proof (state)\nthis:\n  dim_row (submatrix (ten2mat (A w)) rows_with_1 rows_with_1)\n  \\<le> mrank (ten2mat (A w))\n\ngoal (1 subgoal):\n 1. r ^ N_half \\<le> cprank (A w)", "have \"... \\<le> cprank (A w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mrank (ten2mat (A w)) \\<le> cprank (A w)", "using matrix_rank_le_cp_rank"], ["proof (prove)\nusing this:\n  mrank (matricize ?I ?A) \\<le> cprank ?A\n\ngoal (1 subgoal):\n 1. mrank (ten2mat (A w)) \\<le> cprank (A w)", "by blast"], ["proof (state)\nthis:\n  mrank (ten2mat (A w)) \\<le> cprank (A w)\n\ngoal (1 subgoal):\n 1. r ^ N_half \\<le> cprank (A w)", "finally"], ["proof (chain)\npicking this:\n  r ^ N_half \\<le> cprank (A w)", "show ?thesis"], ["proof (prove)\nusing this:\n  r ^ N_half \\<le> cprank (A w)\n\ngoal (1 subgoal):\n 1. r ^ N_half \\<le> cprank (A w)", "."], ["proof (state)\nthis:\n  r ^ N_half \\<le> cprank (A w)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma  if_polynomial_0_evaluate:\nassumes \"polynomial_f wd \\<noteq> 0\"\nassumes \"\\<forall>inputs. input_sizes (deep_model_l rs) = map dim_vec inputs \\<longrightarrow> evaluate_net (insert_weights shared_weights (deep_model_l rs) wd) inputs\n = evaluate_net (insert_weights shared_weights (shallow_model (rs ! 0) Z (last rs) (2*N_half-1)) ws) inputs\"\nshows \"Z \\<ge> r ^ N_half\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r ^ N_half \\<le> Z", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. r ^ N_half \\<le> Z", "have valid1:\"valid_net' (insert_weights shared_weights (deep_model_l rs) wd)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_net' (insert_weights shared_weights (deep_model_l rs) wd)", "using remove_insert_weights valid_deep_model"], ["proof (prove)\nusing this:\n  remove_weights (insert_weights ?s ?m ?w) = ?m\n  valid_net (deep_model ?Y ?r ?rs)\n\ngoal (1 subgoal):\n 1. valid_net' (insert_weights shared_weights (deep_model_l rs) wd)", "by presburger"], ["proof (state)\nthis:\n  valid_net' (insert_weights shared_weights (deep_model_l rs) wd)\n\ngoal (1 subgoal):\n 1. r ^ N_half \\<le> Z", "have valid2:\"valid_net' (insert_weights shared_weights (shallow_model (rs ! 0) Z (last rs) (2*N_half-1)) ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_net'\n     (insert_weights shared_weights\n       (shallow_model (rs ! 0) Z (last rs) (2 * N_half - 1)) ws)", "by (simp add: remove_insert_weights valid_shallow_model)"], ["proof (state)\nthis:\n  valid_net'\n   (insert_weights shared_weights\n     (shallow_model (rs ! 0) Z (last rs) (2 * N_half - 1)) ws)\n\ngoal (1 subgoal):\n 1. r ^ N_half \\<le> Z", "have input_sizes: \"input_sizes (insert_weights shared_weights (deep_model_l rs) wd)\n    = input_sizes (insert_weights shared_weights (shallow_model (rs ! 0) Z (last rs) (2 * N_half - 1)) ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. input_sizes (insert_weights shared_weights (deep_model_l rs) wd) =\n    input_sizes\n     (insert_weights shared_weights\n       (shallow_model (rs ! 0) Z (last rs) (2 * N_half - 1)) ws)", "using input_sizes_remove_weights input_sizes_deep_model remove_insert_weights"], ["proof (prove)\nusing this:\n  input_sizes ?m = input_sizes (remove_weights ?m)\n  input_sizes (deep_model_l rs) = replicate (2 * N_half) (last rs)\n  remove_weights (insert_weights ?s ?m ?w) = ?m\n\ngoal (1 subgoal):\n 1. input_sizes (insert_weights shared_weights (deep_model_l rs) wd) =\n    input_sizes\n     (insert_weights shared_weights\n       (shallow_model (rs ! 0) Z (last rs) (2 * N_half - 1)) ws)", "by (simp add: N_half_def input_sizes_shallow_model)"], ["proof (state)\nthis:\n  input_sizes (insert_weights shared_weights (deep_model_l rs) wd) =\n  input_sizes\n   (insert_weights shared_weights\n     (shallow_model (rs ! 0) Z (last rs) (2 * N_half - 1)) ws)\n\ngoal (1 subgoal):\n 1. r ^ N_half \\<le> Z", "have 0:\"tensors_from_net (insert_weights shared_weights (deep_model_l rs) wd)\n        = tensors_from_net (insert_weights shared_weights (shallow_model (rs ! 0) Z (last rs) (2*N_half -1)) ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensors_from_net (insert_weights shared_weights (deep_model_l rs) wd) =\n    tensors_from_net\n     (insert_weights shared_weights\n       (shallow_model (rs ! 0) Z (last rs) (2 * N_half - 1)) ws)", "using tensors_from_net_eqI[OF valid1 valid2 input_sizes, unfolded input_sizes_remove_weights remove_insert_weights]"], ["proof (prove)\nusing this:\n  (\\<And>inputs.\n      input_sizes (deep_model_l rs) = map dim_vec inputs \\<Longrightarrow>\n      evaluate_net (insert_weights shared_weights (deep_model_l rs) wd)\n       inputs =\n      evaluate_net\n       (insert_weights shared_weights\n         (shallow_model (rs ! 0) Z (last rs) (2 * N_half - 1)) ws)\n       inputs) \\<Longrightarrow>\n  tensors_from_net (insert_weights shared_weights (deep_model_l rs) wd) =\n  tensors_from_net\n   (insert_weights shared_weights\n     (shallow_model (rs ! 0) Z (last rs) (2 * N_half - 1)) ws)\n\ngoal (1 subgoal):\n 1. tensors_from_net (insert_weights shared_weights (deep_model_l rs) wd) =\n    tensors_from_net\n     (insert_weights shared_weights\n       (shallow_model (rs ! 0) Z (last rs) (2 * N_half - 1)) ws)", "using assms"], ["proof (prove)\nusing this:\n  (\\<And>inputs.\n      input_sizes (deep_model_l rs) = map dim_vec inputs \\<Longrightarrow>\n      evaluate_net (insert_weights shared_weights (deep_model_l rs) wd)\n       inputs =\n      evaluate_net\n       (insert_weights shared_weights\n         (shallow_model (rs ! 0) Z (last rs) (2 * N_half - 1)) ws)\n       inputs) \\<Longrightarrow>\n  tensors_from_net (insert_weights shared_weights (deep_model_l rs) wd) =\n  tensors_from_net\n   (insert_weights shared_weights\n     (shallow_model (rs ! 0) Z (last rs) (2 * N_half - 1)) ws)\n  polynomial_f wd \\<noteq> 0\n  \\<forall>inputs.\n     input_sizes (deep_model_l rs) = map dim_vec inputs \\<longrightarrow>\n     evaluate_net (insert_weights shared_weights (deep_model_l rs) wd)\n      inputs =\n     evaluate_net\n      (insert_weights shared_weights\n        (shallow_model (rs ! 0) Z (last rs) (2 * N_half - 1)) ws)\n      inputs\n\ngoal (1 subgoal):\n 1. tensors_from_net (insert_weights shared_weights (deep_model_l rs) wd) =\n    tensors_from_net\n     (insert_weights shared_weights\n       (shallow_model (rs ! 0) Z (last rs) (2 * N_half - 1)) ws)", "by blast"], ["proof (state)\nthis:\n  tensors_from_net (insert_weights shared_weights (deep_model_l rs) wd) =\n  tensors_from_net\n   (insert_weights shared_weights\n     (shallow_model (rs ! 0) Z (last rs) (2 * N_half - 1)) ws)\n\ngoal (1 subgoal):\n 1. r ^ N_half \\<le> Z", "have \"cprank (tensors_from_net (insert_weights shared_weights (deep_model_l rs) wd) $ y) \\<le> Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cprank\n     (tensors_from_net\n       (insert_weights shared_weights (deep_model_l rs) wd) $\n      y)\n    \\<le> Z", "unfolding 0"], ["proof (prove)\ngoal (1 subgoal):\n 1. cprank\n     (tensors_from_net\n       (insert_weights shared_weights\n         (shallow_model (rs ! 0) Z (last rs) (2 * N_half - 1)) ws) $\n      y)\n    \\<le> Z", "using y_valid cprank_shallow_model"], ["proof (prove)\nusing this:\n  y < rs ! 0\n  \\<lbrakk>?m = insert_weights ?s (shallow_model ?Y ?Z ?M ?N) ?w;\n   ?y < ?Y\\<rbrakk>\n  \\<Longrightarrow> cprank (tensors_from_net ?m $ ?y) \\<le> ?Z\n\ngoal (1 subgoal):\n 1. cprank\n     (tensors_from_net\n       (insert_weights shared_weights\n         (shallow_model (rs ! 0) Z (last rs) (2 * N_half - 1)) ws) $\n      y)\n    \\<le> Z", "by blast"], ["proof (state)\nthis:\n  cprank\n   (tensors_from_net (insert_weights shared_weights (deep_model_l rs) wd) $\n    y)\n  \\<le> Z\n\ngoal (1 subgoal):\n 1. r ^ N_half \\<le> Z", "then"], ["proof (chain)\npicking this:\n  cprank\n   (tensors_from_net (insert_weights shared_weights (deep_model_l rs) wd) $\n    y)\n  \\<le> Z", "show ?thesis"], ["proof (prove)\nusing this:\n  cprank\n   (tensors_from_net (insert_weights shared_weights (deep_model_l rs) wd) $\n    y)\n  \\<le> Z\n\ngoal (1 subgoal):\n 1. r ^ N_half \\<le> Z", "using if_polynomial_0_rank assms"], ["proof (prove)\nusing this:\n  cprank\n   (tensors_from_net (insert_weights shared_weights (deep_model_l rs) wd) $\n    y)\n  \\<le> Z\n  polynomial_f ?w \\<noteq> 0 \\<Longrightarrow>\n  r ^ N_half \\<le> cprank (A ?w)\n  polynomial_f wd \\<noteq> 0\n  \\<forall>inputs.\n     input_sizes (deep_model_l rs) = map dim_vec inputs \\<longrightarrow>\n     evaluate_net (insert_weights shared_weights (deep_model_l rs) wd)\n      inputs =\n     evaluate_net\n      (insert_weights shared_weights\n        (shallow_model (rs ! 0) Z (last rs) (2 * N_half - 1)) ws)\n      inputs\n\ngoal (1 subgoal):\n 1. r ^ N_half \\<le> Z", "using A_def assms(1)  less_le_trans not_le remove_insert_weights"], ["proof (prove)\nusing this:\n  cprank\n   (tensors_from_net (insert_weights shared_weights (deep_model_l rs) wd) $\n    y)\n  \\<le> Z\n  polynomial_f ?w \\<noteq> 0 \\<Longrightarrow>\n  r ^ N_half \\<le> cprank (A ?w)\n  polynomial_f wd \\<noteq> 0\n  \\<forall>inputs.\n     input_sizes (deep_model_l rs) = map dim_vec inputs \\<longrightarrow>\n     evaluate_net (insert_weights shared_weights (deep_model_l rs) wd)\n      inputs =\n     evaluate_net\n      (insert_weights shared_weights\n        (shallow_model (rs ! 0) Z (last rs) (2 * N_half - 1)) ws)\n      inputs\n  A ?ws =\n  tensors_from_net (insert_weights shared_weights (deep_model_l rs) ?ws) $ y\n  polynomial_f wd \\<noteq> 0\n  \\<lbrakk>?x < ?y; ?y \\<le> ?z\\<rbrakk> \\<Longrightarrow> ?x < ?z\n  (\\<not> ?x \\<le> ?y) = (?y < ?x)\n  remove_weights (insert_weights ?s ?m ?w) = ?m\n\ngoal (1 subgoal):\n 1. r ^ N_half \\<le> Z", "by fastforce"], ["proof (state)\nthis:\n  r ^ N_half \\<le> Z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma  if_polynomial_0_evaluate_notex:\nassumes \"polynomial_f wd \\<noteq> 0\"\nshows \"\\<not>(\\<exists>weights_shallow Z. Z < r ^ N_half \\<and> (\\<forall>inputs. input_sizes (deep_model_l rs) = map dim_vec inputs \\<longrightarrow>\nevaluate_net (insert_weights shared_weights (deep_model_l rs) wd) inputs\n = evaluate_net (insert_weights shared_weights (shallow_model (rs ! 0) Z (last rs) (2*N_half-1)) ws) inputs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>weights_shallow Z.\n       Z < r ^ N_half \\<and>\n       (\\<forall>inputs.\n           input_sizes (deep_model_l rs) =\n           map dim_vec inputs \\<longrightarrow>\n           evaluate_net (insert_weights shared_weights (deep_model_l rs) wd)\n            inputs =\n           evaluate_net\n            (insert_weights shared_weights\n              (shallow_model (rs ! 0) Z (last rs) (2 * N_half - 1)) ws)\n            inputs)", "using assms if_polynomial_0_evaluate not_le"], ["proof (prove)\nusing this:\n  polynomial_f wd \\<noteq> 0\n  \\<lbrakk>polynomial_f ?wd \\<noteq> 0;\n   \\<forall>inputs.\n      input_sizes (deep_model_l rs) = map dim_vec inputs \\<longrightarrow>\n      evaluate_net (insert_weights shared_weights (deep_model_l rs) ?wd)\n       inputs =\n      evaluate_net\n       (insert_weights shared_weights\n         (shallow_model (rs ! 0) ?Z (last rs) (2 * N_half - 1)) ?ws)\n       inputs\\<rbrakk>\n  \\<Longrightarrow> r ^ N_half \\<le> ?Z\n  (\\<not> ?x \\<le> ?y) = (?y < ?x)\n\ngoal (1 subgoal):\n 1. \\<nexists>weights_shallow Z.\n       Z < r ^ N_half \\<and>\n       (\\<forall>inputs.\n           input_sizes (deep_model_l rs) =\n           map dim_vec inputs \\<longrightarrow>\n           evaluate_net (insert_weights shared_weights (deep_model_l rs) wd)\n            inputs =\n           evaluate_net\n            (insert_weights shared_weights\n              (shallow_model (rs ! 0) Z (last rs) (2 * N_half - 1)) ws)\n            inputs)", "by blast"], ["", "theorem fundamental_theorem_network_capacity:\n\"AE x in lborel_f weight_space_dim. r ^ N_half \\<le> cprank (A x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AE x in lborel_f weight_space_dim. r ^ N_half \\<le> cprank (A x)", "using AE_I'[OF lebesgue_mpoly_zero_set[OF polynomial_p_not_0 vars_polynomial_p]]"], ["proof (prove)\nusing this:\n  {x \\<in> space (lborel_f weight_space_dim). \\<not> ?P x}\n  \\<subseteq> {f \\<in> space (lborel_f weight_space_dim).\n               insertion f polynomial_p = 0} \\<Longrightarrow>\n  almost_everywhere (lborel_f weight_space_dim) ?P\n\ngoal (1 subgoal):\n 1. AE x in lborel_f weight_space_dim. r ^ N_half \\<le> cprank (A x)", "by (metis (mono_tags, lifting) Collect_mono if_polynomial_0_rank polynomial_pf)"], ["", "theorem fundamental_theorem_network_capacity_v2:\nshows \"AE wd in lborel_f weight_space_dim.\n   \\<not>(\\<exists>ws Z. Z < r ^ N_half \\<and>  (\\<forall>inputs. input_sizes (deep_model_l rs) = map dim_vec inputs \\<longrightarrow>\nevaluate_net (insert_weights shared_weights (deep_model_l rs) wd) inputs\n = evaluate_net (insert_weights shared_weights (shallow_model (rs ! 0) Z (last rs) (2*N_half-1)) ws) inputs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AE wd in lborel_f\n              weight_space_dim. \\<nexists>ws Z.\n                                   Z < r ^ N_half \\<and>\n                                   (\\<forall>inputs.\n input_sizes (deep_model_l rs) = map dim_vec inputs \\<longrightarrow>\n evaluate_net (insert_weights shared_weights (deep_model_l rs) wd) inputs =\n evaluate_net\n  (insert_weights shared_weights\n    (shallow_model (rs ! 0) Z (last rs) (2 * N_half - 1)) ws)\n  inputs)", "apply (rule AE_I'[OF lebesgue_mpoly_zero_set[OF polynomial_p_not_0 vars_polynomial_p], unfolded polynomial_pf])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {wd \\<in> space (lborel_f weight_space_dim).\n     \\<not> (\\<nexists>ws Z.\n                Z < r ^ N_half \\<and>\n                (\\<forall>inputs.\n                    input_sizes (deep_model_l rs) =\n                    map dim_vec inputs \\<longrightarrow>\n                    evaluate_net\n                     (insert_weights shared_weights (deep_model_l rs) wd)\n                     inputs =\n                    evaluate_net\n                     (insert_weights shared_weights\n                       (shallow_model (rs ! 0) Z (last rs) (2 * N_half - 1))\n                       ws)\n                     inputs))}\n    \\<subseteq> {f \\<in> space (lborel_f weight_space_dim).\n                 polynomial_f f = 0}", "apply (rule subsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {wd \\<in> space (lborel_f weight_space_dim).\n                \\<not> (\\<nexists>ws Z.\n                           Z < r ^ N_half \\<and>\n                           (\\<forall>inputs.\n                               input_sizes (deep_model_l rs) =\n                               map dim_vec inputs \\<longrightarrow>\n                               evaluate_net\n                                (insert_weights shared_weights\n                                  (deep_model_l rs) wd)\n                                inputs =\n                               evaluate_net\n                                (insert_weights shared_weights\n                                  (shallow_model (rs ! 0) Z (last rs)\n                                    (2 * N_half - 1))\n                                  ws)\n                                inputs))} \\<Longrightarrow>\n       x \\<in> {f \\<in> space (lborel_f weight_space_dim).\n                polynomial_f f = 0}", "unfolding mem_Collect_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> space (lborel_f weight_space_dim) \\<and>\n       \\<not> (\\<nexists>ws Z.\n                  Z < r ^ N_half \\<and>\n                  (\\<forall>inputs.\n                      input_sizes (deep_model_l rs) =\n                      map dim_vec inputs \\<longrightarrow>\n                      evaluate_net\n                       (insert_weights shared_weights (deep_model_l rs) x)\n                       inputs =\n                      evaluate_net\n                       (insert_weights shared_weights\n                         (shallow_model (rs ! 0) Z (last rs)\n                           (2 * N_half - 1))\n                         ws)\n                       inputs)) \\<Longrightarrow>\n       x \\<in> space (lborel_f weight_space_dim) \\<and> polynomial_f x = 0", "using if_polynomial_0_evaluate_notex"], ["proof (prove)\nusing this:\n  polynomial_f ?wd \\<noteq> 0 \\<Longrightarrow>\n  \\<nexists>weights_shallow Z.\n     Z < r ^ N_half \\<and>\n     (\\<forall>inputs.\n         input_sizes (deep_model_l rs) =\n         map dim_vec inputs \\<longrightarrow>\n         evaluate_net (insert_weights shared_weights (deep_model_l rs) ?wd)\n          inputs =\n         evaluate_net\n          (insert_weights shared_weights\n            (shallow_model (rs ! 0) Z (last rs) (2 * N_half - 1)) ?ws)\n          inputs)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> space (lborel_f weight_space_dim) \\<and>\n       \\<not> (\\<nexists>ws Z.\n                  Z < r ^ N_half \\<and>\n                  (\\<forall>inputs.\n                      input_sizes (deep_model_l rs) =\n                      map dim_vec inputs \\<longrightarrow>\n                      evaluate_net\n                       (insert_weights shared_weights (deep_model_l rs) x)\n                       inputs =\n                      evaluate_net\n                       (insert_weights shared_weights\n                         (shallow_model (rs ! 0) Z (last rs)\n                           (2 * N_half - 1))\n                         ws)\n                       inputs)) \\<Longrightarrow>\n       x \\<in> space (lborel_f weight_space_dim) \\<and> polynomial_f x = 0", "by metis"], ["", "abbreviation lebesgue_f where \"lebesgue_f n \\<equiv> completion (lborel_f n)\""], ["", "lemma space_lebesgue_f: \"space (lebesgue_f n) = Pi\\<^sub>E {..<n} (\\<lambda>_. UNIV)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space (completion (lborel_f n)) = {..<n} \\<rightarrow>\\<^sub>E UNIV", "by (simp add: space_lborel_f)"], ["", "theorem fundamental_theorem_network_capacity_v3:\n  assumes\n    \"S = {wd \\<in> space (lebesgue_f weight_space_dim).\n      \\<exists>ws Z. Z < r ^ N_half \\<and>  (\\<forall>inputs. input_sizes (deep_model_l rs) = map dim_vec inputs \\<longrightarrow>\n        evaluate_net (insert_weights shared_weights (deep_model_l rs) wd) inputs\n      = evaluate_net (insert_weights shared_weights (shallow_model (rs ! 0) Z (last rs) (2*N_half-1)) ws) inputs)}\"\n  shows \"S \\<in> null_sets (completion (lborel_f weight_space_dim))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<in> null_sets (completion (lborel_f weight_space_dim))", "unfolding assms"], ["proof (prove)\ngoal (1 subgoal):\n 1. {wd \\<in> space (completion (lborel_f weight_space_dim)).\n     \\<exists>ws Z.\n        Z < r ^ N_half \\<and>\n        (\\<forall>inputs.\n            input_sizes (deep_model_l rs) =\n            map dim_vec inputs \\<longrightarrow>\n            evaluate_net\n             (insert_weights shared_weights (deep_model_l rs) wd) inputs =\n            evaluate_net\n             (insert_weights shared_weights\n               (shallow_model (rs ! 0) Z (last rs) (2 * N_half - 1)) ws)\n             inputs)}\n    \\<in> null_sets (completion (lborel_f weight_space_dim))", "using fundamental_theorem_network_capacity_v2[unfolded completion.AE_iff_null_sets[unfolded AE_completion_iff], unfolded not_not]"], ["proof (prove)\nusing this:\n  {x \\<in> space (completion (lborel_f weight_space_dim)).\n   \\<exists>ws Z.\n      Z < r ^ N_half \\<and>\n      (\\<forall>inputs.\n          input_sizes (deep_model_l rs) =\n          map dim_vec inputs \\<longrightarrow>\n          evaluate_net (insert_weights shared_weights (deep_model_l rs) x)\n           inputs =\n          evaluate_net\n           (insert_weights shared_weights\n             (shallow_model (rs ! 0) Z (last rs) (2 * N_half - 1)) ws)\n           inputs)}\n  \\<in> null_sets (completion (lborel_f weight_space_dim))\n\ngoal (1 subgoal):\n 1. {wd \\<in> space (completion (lborel_f weight_space_dim)).\n     \\<exists>ws Z.\n        Z < r ^ N_half \\<and>\n        (\\<forall>inputs.\n            input_sizes (deep_model_l rs) =\n            map dim_vec inputs \\<longrightarrow>\n            evaluate_net\n             (insert_weights shared_weights (deep_model_l rs) wd) inputs =\n            evaluate_net\n             (insert_weights shared_weights\n               (shallow_model (rs ! 0) Z (last rs) (2 * N_half - 1)) ws)\n             inputs)}\n    \\<in> null_sets (completion (lborel_f weight_space_dim))", "by blast"], ["", "end"], ["", "end"]]}