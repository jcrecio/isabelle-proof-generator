{"file_name": "/home/qj213/afp-2021-10-22/thys/Deep_Learning/DL_Shallow_Model.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Deep_Learning", "problem_names": ["lemma valid_shallow_model': \"valid_net (shallow_model' Z M N)\"", "lemma output_size_shallow_model': \"output_size (shallow_model' Z M N) = Z\"", "lemma valid_shallow_model: \"valid_net (shallow_model Y Z M N)\"", "lemma output_size_shallow_model: \"output_size (shallow_model Y Z M N) = Y\"", "lemma input_sizes_shallow_model: \"input_sizes (shallow_model Y Z M N) = replicate (Suc N) M\"", "lemma balanced_net_shallow_model': \"balanced_net (shallow_model' Z M N)\"", "lemma balanced_net_shallow_model: \"balanced_net (shallow_model Y Z M N)\"", "lemma cprank_max1_shallow_model':\nassumes \"y < output_size (shallow_model' Z M N)\"\nshows \"cprank_max1 (tensors_from_net (insert_weights s (shallow_model' Z M N) w) $ y)\"", "lemma cprank_shallow_model:\nassumes \"m = insert_weights s (shallow_model Y Z M N) w\"\nassumes \"y < Y\"\nshows \"cprank (tensors_from_net m $ y) \\<le> Z\""], "translations": [["", "lemma valid_shallow_model': \"valid_net (shallow_model' Z M N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_net (shallow_model' Z M N)", "apply (induction N)"], ["proof (prove)\ngoal (2 subgoals):\n 1. valid_net (shallow_model' Z M 0)\n 2. \\<And>N.\n       valid_net (shallow_model' Z M N) \\<Longrightarrow>\n       valid_net (shallow_model' Z M (Suc N))", "unfolding shallow_model'.simps"], ["proof (prove)\ngoal (2 subgoals):\n 1. valid_net (Conv (Z, M) (Input M))\n 2. \\<And>N.\n       valid_net (shallow_model' Z M N) \\<Longrightarrow>\n       valid_net (Pool (Conv (Z, M) (Input M)) (shallow_model' Z M N))", "by (simp add: valid_net.intros, metis shallow_model'.elims shallow_model'.simps(1) valid_net.intros output_size.simps)"], ["", "lemma output_size_shallow_model': \"output_size (shallow_model' Z M N) = Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. output_size (shallow_model' Z M N) = Z", "apply (induction N)"], ["proof (prove)\ngoal (2 subgoals):\n 1. output_size (shallow_model' Z M 0) = Z\n 2. \\<And>N.\n       output_size (shallow_model' Z M N) = Z \\<Longrightarrow>\n       output_size (shallow_model' Z M (Suc N)) = Z", "unfolding shallow_model'.simps"], ["proof (prove)\ngoal (2 subgoals):\n 1. output_size (Conv (Z, M) (Input M)) = Z\n 2. \\<And>N.\n       output_size (shallow_model' Z M N) = Z \\<Longrightarrow>\n       output_size (Pool (Conv (Z, M) (Input M)) (shallow_model' Z M N)) = Z", "using output_size.simps"], ["proof (prove)\nusing this:\n  output_size (Input ?M) = ?M\n  output_size (Conv (?r0.0, ?r1.0) ?m) = ?r0.0\n  output_size (Pool ?m1.0 ?m2.0) = output_size ?m1.0\n\ngoal (2 subgoals):\n 1. output_size (Conv (Z, M) (Input M)) = Z\n 2. \\<And>N.\n       output_size (shallow_model' Z M N) = Z \\<Longrightarrow>\n       output_size (Pool (Conv (Z, M) (Input M)) (shallow_model' Z M N)) = Z", "by simp_all"], ["", "lemma valid_shallow_model: \"valid_net (shallow_model Y Z M N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_net (shallow_model Y Z M N)", "unfolding shallow_model_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_net (Conv (Y, Z) (shallow_model' Z M N))", "using valid_shallow_model' valid_net.intros output_size.simps output_size_shallow_model'"], ["proof (prove)\nusing this:\n  valid_net (shallow_model' ?Z ?M ?N)\n  valid_net (Input ?M)\n  \\<lbrakk>output_size ?m = ?r1.0; valid_net ?m\\<rbrakk>\n  \\<Longrightarrow> valid_net (Conv (?r0.0, ?r1.0) ?m)\n  \\<lbrakk>output_size ?m1.0 = output_size ?m2.0; valid_net ?m1.0;\n   valid_net ?m2.0\\<rbrakk>\n  \\<Longrightarrow> valid_net (Pool ?m1.0 ?m2.0)\n  output_size (Input ?M) = ?M\n  output_size (Conv (?r0.0, ?r1.0) ?m) = ?r0.0\n  output_size (Pool ?m1.0 ?m2.0) = output_size ?m1.0\n  output_size (shallow_model' ?Z ?M ?N) = ?Z\n\ngoal (1 subgoal):\n 1. valid_net (Conv (Y, Z) (shallow_model' Z M N))", "by metis"], ["", "lemma output_size_shallow_model: \"output_size (shallow_model Y Z M N) = Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. output_size (shallow_model Y Z M N) = Y", "unfolding shallow_model_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. output_size (Conv (Y, Z) (shallow_model' Z M N)) = Y", "using output_size_shallow_model' output_size.simps"], ["proof (prove)\nusing this:\n  output_size (shallow_model' ?Z ?M ?N) = ?Z\n  output_size (Input ?M) = ?M\n  output_size (Conv (?r0.0, ?r1.0) ?m) = ?r0.0\n  output_size (Pool ?m1.0 ?m2.0) = output_size ?m1.0\n\ngoal (1 subgoal):\n 1. output_size (Conv (Y, Z) (shallow_model' Z M N)) = Y", "by simp"], ["", "lemma input_sizes_shallow_model: \"input_sizes (shallow_model Y Z M N) = replicate (Suc N) M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. input_sizes (shallow_model Y Z M N) = replicate (Suc N) M", "apply (induction N)"], ["proof (prove)\ngoal (2 subgoals):\n 1. input_sizes (shallow_model Y Z M 0) = replicate (Suc 0) M\n 2. \\<And>N.\n       input_sizes (shallow_model Y Z M N) =\n       replicate (Suc N) M \\<Longrightarrow>\n       input_sizes (shallow_model Y Z M (Suc N)) = replicate (Suc (Suc N)) M", "unfolding shallow_model_def input_sizes.simps"], ["proof (prove)\ngoal (2 subgoals):\n 1. input_sizes (shallow_model' Z M 0) = replicate (Suc 0) M\n 2. \\<And>N.\n       input_sizes (shallow_model' Z M N) =\n       replicate (Suc N) M \\<Longrightarrow>\n       input_sizes (shallow_model' Z M (Suc N)) = replicate (Suc (Suc N)) M", "by simp_all"], ["", "lemma balanced_net_shallow_model': \"balanced_net (shallow_model' Z M N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. balanced_net (shallow_model' Z M N)", "proof(induction N)"], ["proof (state)\ngoal (2 subgoals):\n 1. balanced_net (shallow_model' Z M 0)\n 2. \\<And>N.\n       balanced_net (shallow_model' Z M N) \\<Longrightarrow>\n       balanced_net (shallow_model' Z M (Suc N))", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. balanced_net (shallow_model' Z M 0)\n 2. \\<And>N.\n       balanced_net (shallow_model' Z M N) \\<Longrightarrow>\n       balanced_net (shallow_model' Z M (Suc N))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. balanced_net (shallow_model' Z M 0)", "by (metis balanced_net.simps shallow_model'.simps(1))"], ["proof (state)\nthis:\n  balanced_net (shallow_model' Z M 0)\n\ngoal (1 subgoal):\n 1. \\<And>N.\n       balanced_net (shallow_model' Z M N) \\<Longrightarrow>\n       balanced_net (shallow_model' Z M (Suc N))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>N.\n       balanced_net (shallow_model' Z M N) \\<Longrightarrow>\n       balanced_net (shallow_model' Z M (Suc N))", "case (Suc N)"], ["proof (state)\nthis:\n  balanced_net (shallow_model' Z M N)\n\ngoal (1 subgoal):\n 1. \\<And>N.\n       balanced_net (shallow_model' Z M N) \\<Longrightarrow>\n       balanced_net (shallow_model' Z M (Suc N))", "have \"count_weights True (Conv (Z, M) (Input M)) = count_weights True (shallow_model' Z M N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count_weights True (Conv (Z, M) (Input M)) =\n    count_weights True (shallow_model' Z M N)", "by (induction N; simp)"], ["proof (state)\nthis:\n  count_weights True (Conv (Z, M) (Input M)) =\n  count_weights True (shallow_model' Z M N)\n\ngoal (1 subgoal):\n 1. \\<And>N.\n       balanced_net (shallow_model' Z M N) \\<Longrightarrow>\n       balanced_net (shallow_model' Z M (Suc N))", "then"], ["proof (chain)\npicking this:\n  count_weights True (Conv (Z, M) (Input M)) =\n  count_weights True (shallow_model' Z M N)", "show ?case"], ["proof (prove)\nusing this:\n  count_weights True (Conv (Z, M) (Input M)) =\n  count_weights True (shallow_model' Z M N)\n\ngoal (1 subgoal):\n 1. balanced_net (shallow_model' Z M (Suc N))", "unfolding shallow_model'.simps"], ["proof (prove)\nusing this:\n  count_weights True (Conv (Z, M) (Input M)) =\n  count_weights True (shallow_model' Z M N)\n\ngoal (1 subgoal):\n 1. balanced_net (Pool (Conv (Z, M) (Input M)) (shallow_model' Z M N))", "by (simp add: Suc.IH balanced_net_Conv balanced_net_Input balanced_net_Pool)"], ["proof (state)\nthis:\n  balanced_net (shallow_model' Z M (Suc N))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma balanced_net_shallow_model: \"balanced_net (shallow_model Y Z M N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. balanced_net (shallow_model Y Z M N)", "unfolding shallow_model_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. balanced_net (Conv (Y, Z) (shallow_model' Z M N))", "by (simp add: balanced_net_Conv balanced_net_shallow_model')"], ["", "lemma cprank_max1_shallow_model':\nassumes \"y < output_size (shallow_model' Z M N)\"\nshows \"cprank_max1 (tensors_from_net (insert_weights s (shallow_model' Z M N) w) $ y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cprank_max1\n     (tensors_from_net (insert_weights s (shallow_model' Z M N) w) $ y)", "using assms"], ["proof (prove)\nusing this:\n  y < output_size (shallow_model' Z M N)\n\ngoal (1 subgoal):\n 1. cprank_max1\n     (tensors_from_net (insert_weights s (shallow_model' Z M N) w) $ y)", "proof (induction N arbitrary:w)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>w.\n       y < output_size (shallow_model' Z M 0) \\<Longrightarrow>\n       cprank_max1\n        (tensors_from_net (insert_weights s (shallow_model' Z M 0) w) $ y)\n 2. \\<And>N w.\n       \\<lbrakk>\\<And>w.\n                   y < output_size (shallow_model' Z M N) \\<Longrightarrow>\n                   cprank_max1\n                    (tensors_from_net\n                      (insert_weights s (shallow_model' Z M N) w) $\n                     y);\n        y < output_size (shallow_model' Z M (Suc N))\\<rbrakk>\n       \\<Longrightarrow> cprank_max1\n                          (tensors_from_net\n                            (insert_weights s (shallow_model' Z M (Suc N))\n                              w) $\n                           y)", "case 0"], ["proof (state)\nthis:\n  y < output_size (shallow_model' Z M 0)\n\ngoal (2 subgoals):\n 1. \\<And>w.\n       y < output_size (shallow_model' Z M 0) \\<Longrightarrow>\n       cprank_max1\n        (tensors_from_net (insert_weights s (shallow_model' Z M 0) w) $ y)\n 2. \\<And>N w.\n       \\<lbrakk>\\<And>w.\n                   y < output_size (shallow_model' Z M N) \\<Longrightarrow>\n                   cprank_max1\n                    (tensors_from_net\n                      (insert_weights s (shallow_model' Z M N) w) $\n                     y);\n        y < output_size (shallow_model' Z M (Suc N))\\<rbrakk>\n       \\<Longrightarrow> cprank_max1\n                          (tensors_from_net\n                            (insert_weights s (shallow_model' Z M (Suc N))\n                              w) $\n                           y)", "then"], ["proof (chain)\npicking this:\n  y < output_size (shallow_model' Z M 0)", "have \"input_sizes (insert_weights s (shallow_model' Z M 0) w) = [M]\""], ["proof (prove)\nusing this:\n  y < output_size (shallow_model' Z M 0)\n\ngoal (1 subgoal):\n 1. input_sizes (insert_weights s (shallow_model' Z M 0) w) = [M]", "unfolding shallow_model_def shallow_model'.simps insert_weights.simps\n    input_sizes.simps"], ["proof (prove)\nusing this:\n  y < output_size (Conv (Z, M) (Input M))\n\ngoal (1 subgoal):\n 1. [M] = [M]", "by metis"], ["proof (state)\nthis:\n  input_sizes (insert_weights s (shallow_model' Z M 0) w) = [M]\n\ngoal (2 subgoals):\n 1. \\<And>w.\n       y < output_size (shallow_model' Z M 0) \\<Longrightarrow>\n       cprank_max1\n        (tensors_from_net (insert_weights s (shallow_model' Z M 0) w) $ y)\n 2. \\<And>N w.\n       \\<lbrakk>\\<And>w.\n                   y < output_size (shallow_model' Z M N) \\<Longrightarrow>\n                   cprank_max1\n                    (tensors_from_net\n                      (insert_weights s (shallow_model' Z M N) w) $\n                     y);\n        y < output_size (shallow_model' Z M (Suc N))\\<rbrakk>\n       \\<Longrightarrow> cprank_max1\n                          (tensors_from_net\n                            (insert_weights s (shallow_model' Z M (Suc N))\n                              w) $\n                           y)", "then"], ["proof (chain)\npicking this:\n  input_sizes (insert_weights s (shallow_model' Z M 0) w) = [M]", "have \"dims (tensors_from_net (insert_weights s (shallow_model' Z M 0) w) $ y) = [M]\""], ["proof (prove)\nusing this:\n  input_sizes (insert_weights s (shallow_model' Z M 0) w) = [M]\n\ngoal (1 subgoal):\n 1. dims\n     (tensors_from_net (insert_weights s (shallow_model' Z M 0) w) $ y) =\n    [M]", "using dims_tensors_from_net[OF vec_setI] \"0.prems\"(1) output_size_correct_tensors\n    remove_insert_weights valid_shallow_model'"], ["proof (prove)\nusing this:\n  input_sizes (insert_weights s (shallow_model' Z M 0) w) = [M]\n  \\<lbrakk>tensors_from_net ?m $ ?i1 = ?T;\n   ?i1 < dim_vec (tensors_from_net ?m)\\<rbrakk>\n  \\<Longrightarrow> dims ?T = input_sizes ?m\n  y < output_size (shallow_model' Z M 0)\n  valid_net' ?m \\<Longrightarrow>\n  output_size' ?m = dim_vec (tensors_from_net ?m)\n  remove_weights (insert_weights ?s ?m ?w) = ?m\n  valid_net (shallow_model' ?Z ?M ?N)\n\ngoal (1 subgoal):\n 1. dims\n     (tensors_from_net (insert_weights s (shallow_model' Z M 0) w) $ y) =\n    [M]", "by metis"], ["proof (state)\nthis:\n  dims (tensors_from_net (insert_weights s (shallow_model' Z M 0) w) $ y) =\n  [M]\n\ngoal (2 subgoals):\n 1. \\<And>w.\n       y < output_size (shallow_model' Z M 0) \\<Longrightarrow>\n       cprank_max1\n        (tensors_from_net (insert_weights s (shallow_model' Z M 0) w) $ y)\n 2. \\<And>N w.\n       \\<lbrakk>\\<And>w.\n                   y < output_size (shallow_model' Z M N) \\<Longrightarrow>\n                   cprank_max1\n                    (tensors_from_net\n                      (insert_weights s (shallow_model' Z M N) w) $\n                     y);\n        y < output_size (shallow_model' Z M (Suc N))\\<rbrakk>\n       \\<Longrightarrow> cprank_max1\n                          (tensors_from_net\n                            (insert_weights s (shallow_model' Z M (Suc N))\n                              w) $\n                           y)", "then"], ["proof (chain)\npicking this:\n  dims (tensors_from_net (insert_weights s (shallow_model' Z M 0) w) $ y) =\n  [M]", "show ?case"], ["proof (prove)\nusing this:\n  dims (tensors_from_net (insert_weights s (shallow_model' Z M 0) w) $ y) =\n  [M]\n\ngoal (1 subgoal):\n 1. cprank_max1\n     (tensors_from_net (insert_weights s (shallow_model' Z M 0) w) $ y)", "using order1"], ["proof (prove)\nusing this:\n  dims (tensors_from_net (insert_weights s (shallow_model' Z M 0) w) $ y) =\n  [M]\n  order ?A \\<le> 1 \\<Longrightarrow> cprank_max1 ?A\n\ngoal (1 subgoal):\n 1. cprank_max1\n     (tensors_from_net (insert_weights s (shallow_model' Z M 0) w) $ y)", "by (metis One_nat_def eq_imp_le length_Cons list.size(3))"], ["proof (state)\nthis:\n  cprank_max1\n   (tensors_from_net (insert_weights s (shallow_model' Z M 0) w) $ y)\n\ngoal (1 subgoal):\n 1. \\<And>N w.\n       \\<lbrakk>\\<And>w.\n                   y < output_size (shallow_model' Z M N) \\<Longrightarrow>\n                   cprank_max1\n                    (tensors_from_net\n                      (insert_weights s (shallow_model' Z M N) w) $\n                     y);\n        y < output_size (shallow_model' Z M (Suc N))\\<rbrakk>\n       \\<Longrightarrow> cprank_max1\n                          (tensors_from_net\n                            (insert_weights s (shallow_model' Z M (Suc N))\n                              w) $\n                           y)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>N w.\n       \\<lbrakk>\\<And>w.\n                   y < output_size (shallow_model' Z M N) \\<Longrightarrow>\n                   cprank_max1\n                    (tensors_from_net\n                      (insert_weights s (shallow_model' Z M N) w) $\n                     y);\n        y < output_size (shallow_model' Z M (Suc N))\\<rbrakk>\n       \\<Longrightarrow> cprank_max1\n                          (tensors_from_net\n                            (insert_weights s (shallow_model' Z M (Suc N))\n                              w) $\n                           y)", "case (Suc N)"], ["proof (state)\nthis:\n  y < output_size (shallow_model' Z M N) \\<Longrightarrow>\n  cprank_max1\n   (tensors_from_net (insert_weights s (shallow_model' Z M N) ?w) $ y)\n  y < output_size (shallow_model' Z M (Suc N))\n\ngoal (1 subgoal):\n 1. \\<And>N w.\n       \\<lbrakk>\\<And>w.\n                   y < output_size (shallow_model' Z M N) \\<Longrightarrow>\n                   cprank_max1\n                    (tensors_from_net\n                      (insert_weights s (shallow_model' Z M N) w) $\n                     y);\n        y < output_size (shallow_model' Z M (Suc N))\\<rbrakk>\n       \\<Longrightarrow> cprank_max1\n                          (tensors_from_net\n                            (insert_weights s (shallow_model' Z M (Suc N))\n                              w) $\n                           y)", "have y_le_IH:\"y < dim_vec (tensors_from_net (insert_weights s (shallow_model' Z M N) (\\<lambda>i. w (i + (count_weights s (shallow_model' Z M 0))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y < dim_vec\n         (tensors_from_net\n           (insert_weights s (shallow_model' Z M N)\n             (\\<lambda>i. w (i + count_weights s (shallow_model' Z M 0)))))", "using output_size_correct_tensors[of \"insert_weights s (shallow_model' Z M N) (\\<lambda>i. w (i + (count_weights s (shallow_model' Z M 0))))\",\n    unfolded remove_insert_weights, OF valid_shallow_model']"], ["proof (prove)\nusing this:\n  output_size (shallow_model' Z M N) =\n  dim_vec\n   (tensors_from_net\n     (insert_weights s (shallow_model' Z M N)\n       (\\<lambda>i. w (i + count_weights s (shallow_model' Z M 0)))))\n\ngoal (1 subgoal):\n 1. y < dim_vec\n         (tensors_from_net\n           (insert_weights s (shallow_model' Z M N)\n             (\\<lambda>i. w (i + count_weights s (shallow_model' Z M 0)))))", "using Suc.prems(1) output_size_shallow_model'"], ["proof (prove)\nusing this:\n  output_size (shallow_model' Z M N) =\n  dim_vec\n   (tensors_from_net\n     (insert_weights s (shallow_model' Z M N)\n       (\\<lambda>i. w (i + count_weights s (shallow_model' Z M 0)))))\n  y < output_size (shallow_model' Z M (Suc N))\n  output_size (shallow_model' ?Z ?M ?N) = ?Z\n\ngoal (1 subgoal):\n 1. y < dim_vec\n         (tensors_from_net\n           (insert_weights s (shallow_model' Z M N)\n             (\\<lambda>i. w (i + count_weights s (shallow_model' Z M 0)))))", "by auto"], ["proof (state)\nthis:\n  y < dim_vec\n       (tensors_from_net\n         (insert_weights s (shallow_model' Z M N)\n           (\\<lambda>i. w (i + count_weights s (shallow_model' Z M 0)))))\n\ngoal (1 subgoal):\n 1. \\<And>N w.\n       \\<lbrakk>\\<And>w.\n                   y < output_size (shallow_model' Z M N) \\<Longrightarrow>\n                   cprank_max1\n                    (tensors_from_net\n                      (insert_weights s (shallow_model' Z M N) w) $\n                     y);\n        y < output_size (shallow_model' Z M (Suc N))\\<rbrakk>\n       \\<Longrightarrow> cprank_max1\n                          (tensors_from_net\n                            (insert_weights s (shallow_model' Z M (Suc N))\n                              w) $\n                           y)", "have cprank_max1_IH:\"cprank_max1 (tensors_from_net (insert_weights s (shallow_model' Z M N) (\\<lambda>i. w (i + (count_weights s (shallow_model' Z M 0))))) $ y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cprank_max1\n     (tensors_from_net\n       (insert_weights s (shallow_model' Z M N)\n         (\\<lambda>i. w (i + count_weights s (shallow_model' Z M 0)))) $\n      y)", "using Suc.IH Suc.prems(1) output_size_shallow_model'"], ["proof (prove)\nusing this:\n  y < output_size (shallow_model' Z M N) \\<Longrightarrow>\n  cprank_max1\n   (tensors_from_net (insert_weights s (shallow_model' Z M N) ?w) $ y)\n  y < output_size (shallow_model' Z M (Suc N))\n  output_size (shallow_model' ?Z ?M ?N) = ?Z\n\ngoal (1 subgoal):\n 1. cprank_max1\n     (tensors_from_net\n       (insert_weights s (shallow_model' Z M N)\n         (\\<lambda>i. w (i + count_weights s (shallow_model' Z M 0)))) $\n      y)", "by auto"], ["proof (state)\nthis:\n  cprank_max1\n   (tensors_from_net\n     (insert_weights s (shallow_model' Z M N)\n       (\\<lambda>i. w (i + count_weights s (shallow_model' Z M 0)))) $\n    y)\n\ngoal (1 subgoal):\n 1. \\<And>N w.\n       \\<lbrakk>\\<And>w.\n                   y < output_size (shallow_model' Z M N) \\<Longrightarrow>\n                   cprank_max1\n                    (tensors_from_net\n                      (insert_weights s (shallow_model' Z M N) w) $\n                     y);\n        y < output_size (shallow_model' Z M (Suc N))\\<rbrakk>\n       \\<Longrightarrow> cprank_max1\n                          (tensors_from_net\n                            (insert_weights s (shallow_model' Z M (Suc N))\n                              w) $\n                           y)", "have y_le_0:\"y < dim_vec (tensors_from_net (insert_weights s (shallow_model' Z M 0) w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y < dim_vec\n         (tensors_from_net (insert_weights s (shallow_model' Z M 0) w))", "by (metis assms output_size_correct_tensors output_size_shallow_model' remove_insert_weights valid_shallow_model')"], ["proof (state)\nthis:\n  y < dim_vec (tensors_from_net (insert_weights s (shallow_model' Z M 0) w))\n\ngoal (1 subgoal):\n 1. \\<And>N w.\n       \\<lbrakk>\\<And>w.\n                   y < output_size (shallow_model' Z M N) \\<Longrightarrow>\n                   cprank_max1\n                    (tensors_from_net\n                      (insert_weights s (shallow_model' Z M N) w) $\n                     y);\n        y < output_size (shallow_model' Z M (Suc N))\\<rbrakk>\n       \\<Longrightarrow> cprank_max1\n                          (tensors_from_net\n                            (insert_weights s (shallow_model' Z M (Suc N))\n                              w) $\n                           y)", "have cprank_max1_0:\"cprank_max1 (tensors_from_net (insert_weights s (shallow_model' Z M 0) w) $ y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cprank_max1\n     (tensors_from_net (insert_weights s (shallow_model' Z M 0) w) $ y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cprank_max1\n     (tensors_from_net (insert_weights s (shallow_model' Z M 0) w) $ y)", "have \"input_sizes (insert_weights s (shallow_model' Z M 0) w) = [M]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. input_sizes (insert_weights s (shallow_model' Z M 0) w) = [M]", "unfolding shallow_model_def shallow_model'.simps insert_weights.simps\n      input_sizes.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. [M] = [M]", "by metis"], ["proof (state)\nthis:\n  input_sizes (insert_weights s (shallow_model' Z M 0) w) = [M]\n\ngoal (1 subgoal):\n 1. cprank_max1\n     (tensors_from_net (insert_weights s (shallow_model' Z M 0) w) $ y)", "then"], ["proof (chain)\npicking this:\n  input_sizes (insert_weights s (shallow_model' Z M 0) w) = [M]", "show ?thesis"], ["proof (prove)\nusing this:\n  input_sizes (insert_weights s (shallow_model' Z M 0) w) = [M]\n\ngoal (1 subgoal):\n 1. cprank_max1\n     (tensors_from_net (insert_weights s (shallow_model' Z M 0) w) $ y)", "using order1 dims_tensors_from_net[OF vec_setI]  One_nat_def eq_imp_le length_Cons list.size(3) y_le_0"], ["proof (prove)\nusing this:\n  input_sizes (insert_weights s (shallow_model' Z M 0) w) = [M]\n  order ?A \\<le> 1 \\<Longrightarrow> cprank_max1 ?A\n  \\<lbrakk>tensors_from_net ?m $ ?i1 = ?T;\n   ?i1 < dim_vec (tensors_from_net ?m)\\<rbrakk>\n  \\<Longrightarrow> dims ?T = input_sizes ?m\n  1 = Suc 0\n  ?m = ?n \\<Longrightarrow> ?m \\<le> ?n\n  length (?x # ?xs) = Suc (length ?xs)\n  length [] = 0\n  y < dim_vec (tensors_from_net (insert_weights s (shallow_model' Z M 0) w))\n\ngoal (1 subgoal):\n 1. cprank_max1\n     (tensors_from_net (insert_weights s (shallow_model' Z M 0) w) $ y)", "by metis"], ["proof (state)\nthis:\n  cprank_max1\n   (tensors_from_net (insert_weights s (shallow_model' Z M 0) w) $ y)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cprank_max1\n   (tensors_from_net (insert_weights s (shallow_model' Z M 0) w) $ y)\n\ngoal (1 subgoal):\n 1. \\<And>N w.\n       \\<lbrakk>\\<And>w.\n                   y < output_size (shallow_model' Z M N) \\<Longrightarrow>\n                   cprank_max1\n                    (tensors_from_net\n                      (insert_weights s (shallow_model' Z M N) w) $\n                     y);\n        y < output_size (shallow_model' Z M (Suc N))\\<rbrakk>\n       \\<Longrightarrow> cprank_max1\n                          (tensors_from_net\n                            (insert_weights s (shallow_model' Z M (Suc N))\n                              w) $\n                           y)", "then"], ["proof (chain)\npicking this:\n  cprank_max1\n   (tensors_from_net (insert_weights s (shallow_model' Z M 0) w) $ y)", "show ?case"], ["proof (prove)\nusing this:\n  cprank_max1\n   (tensors_from_net (insert_weights s (shallow_model' Z M 0) w) $ y)\n\ngoal (1 subgoal):\n 1. cprank_max1\n     (tensors_from_net (insert_weights s (shallow_model' Z M (Suc N)) w) $\n      y)", "unfolding shallow_model'.simps(2) insert_weights.simps tensors_from_net.simps"], ["proof (prove)\nusing this:\n  cprank_max1\n   (tensors_from_net (insert_weights s (shallow_model' Z M 0) w) $ y)\n\ngoal (1 subgoal):\n 1. cprank_max1\n     (component_mult\n       (tensors_from_net (insert_weights s (shallow_model' Z M 0) w))\n       (tensors_from_net\n         (insert_weights s (shallow_model' Z M N)\n           (if s then w\n            else (\\<lambda>i.\n                     w (i + count_weights s (shallow_model' Z M 0)))))) $\n      y)", "using cprank_max1_IH cprank_max1_0 cprank_max1_prod index_component_mult y_le_0 y_le_IH"], ["proof (prove)\nusing this:\n  cprank_max1\n   (tensors_from_net (insert_weights s (shallow_model' Z M 0) w) $ y)\n  cprank_max1\n   (tensors_from_net\n     (insert_weights s (shallow_model' Z M N)\n       (\\<lambda>i. w (i + count_weights s (shallow_model' Z M 0)))) $\n    y)\n  cprank_max1\n   (tensors_from_net (insert_weights s (shallow_model' Z M 0) w) $ y)\n  \\<lbrakk>cprank_max1 ?A; cprank_max1 ?B\\<rbrakk>\n  \\<Longrightarrow> cprank_max1 (?A \\<otimes> ?B)\n  \\<lbrakk>?i < dim_vec ?v; ?i < dim_vec ?w\\<rbrakk>\n  \\<Longrightarrow> component_mult ?v ?w $ ?i = ?v $ ?i * ?w $ ?i\n  y < dim_vec (tensors_from_net (insert_weights s (shallow_model' Z M 0) w))\n  y < dim_vec\n       (tensors_from_net\n         (insert_weights s (shallow_model' Z M N)\n           (\\<lambda>i. w (i + count_weights s (shallow_model' Z M 0)))))\n\ngoal (1 subgoal):\n 1. cprank_max1\n     (component_mult\n       (tensors_from_net (insert_weights s (shallow_model' Z M 0) w))\n       (tensors_from_net\n         (insert_weights s (shallow_model' Z M N)\n           (if s then w\n            else (\\<lambda>i.\n                     w (i + count_weights s (shallow_model' Z M 0)))))) $\n      y)", "by (metis Suc.IH output_size_correct_tensors remove_insert_weights valid_shallow_model')"], ["proof (state)\nthis:\n  cprank_max1\n   (tensors_from_net (insert_weights s (shallow_model' Z M (Suc N)) w) $ y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cprank_shallow_model:\nassumes \"m = insert_weights s (shallow_model Y Z M N) w\"\nassumes \"y < Y\"\nshows \"cprank (tensors_from_net m $ y) \\<le> Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cprank (tensors_from_net m $ y) \\<le> Z", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cprank (tensors_from_net m $ y) \\<le> Z", "have \"s \\<Longrightarrow> shared_weight_net m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<Longrightarrow> shared_weight_net m", "by (simp add: assms(1) balanced_net_shallow_model shared_weight_net_insert_weights)"], ["proof (state)\nthis:\n  s \\<Longrightarrow> shared_weight_net m\n\ngoal (1 subgoal):\n 1. cprank (tensors_from_net m $ y) \\<le> Z", "have \"cprank_max Z (tensors_from_net m $ y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cprank_max Z (tensors_from_net m $ y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cprank_max Z (tensors_from_net m $ y)", "have dim_extract: \"dim_row (extract_matrix w Y Z) = Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (extract_matrix w Y Z) = Y", "using dim_extract_matrix(1)"], ["proof (prove)\nusing this:\n  dim_row (extract_matrix ?as ?m ?n) = ?m\n\ngoal (1 subgoal):\n 1. dim_row (extract_matrix w Y Z) = Y", "by force"], ["proof (state)\nthis:\n  dim_row (extract_matrix w Y Z) = Y\n\ngoal (1 subgoal):\n 1. cprank_max Z (tensors_from_net m $ y)", "have dimc_extract_matrix: \"dim_col (extract_matrix w Y Z) = Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (extract_matrix w Y Z) = Z", "using dim_extract_matrix(2)"], ["proof (prove)\nusing this:\n  dim_col (extract_matrix ?as ?m ?n) = ?n\n\ngoal (1 subgoal):\n 1. dim_col (extract_matrix w Y Z) = Z", "by force"], ["proof (state)\nthis:\n  dim_col (extract_matrix w Y Z) = Z\n\ngoal (1 subgoal):\n 1. cprank_max Z (tensors_from_net m $ y)", "have input_sizes: \"(input_sizes (insert_weights s (shallow_model' Z M N) (\\<lambda>i. w (i + Y * Z)))) = (input_sizes (shallow_model' Z M N))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. input_sizes\n     (insert_weights s (shallow_model' Z M N) (\\<lambda>i. w (i + Y * Z))) =\n    input_sizes (shallow_model' Z M N)", "using input_sizes_remove_weights remove_insert_weights"], ["proof (prove)\nusing this:\n  input_sizes ?m = input_sizes (remove_weights ?m)\n  remove_weights (insert_weights ?s ?m ?w) = ?m\n\ngoal (1 subgoal):\n 1. input_sizes\n     (insert_weights s (shallow_model' Z M N) (\\<lambda>i. w (i + Y * Z))) =\n    input_sizes (shallow_model' Z M N)", "by auto"], ["proof (state)\nthis:\n  input_sizes\n   (insert_weights s (shallow_model' Z M N) (\\<lambda>i. w (i + Y * Z))) =\n  input_sizes (shallow_model' Z M N)\n\ngoal (1 subgoal):\n 1. cprank_max Z (tensors_from_net m $ y)", "have 0:\"tensors_from_net m $ y = Tensor_Plus.listsum (input_sizes (shallow_model' Z M N))\n      (map (\\<lambda>j. (extract_matrix w Y Z)  $$ (y, j) \\<cdot> (tensors_from_net (insert_weights s (shallow_model' Z M N) (\\<lambda>i. w (i + Y * Z)))) $ j) [0..<Z])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensors_from_net m $ y =\n    listsum (input_sizes (shallow_model' Z M N))\n     (map (\\<lambda>j.\n              extract_matrix w Y Z $$ (y, j) \\<cdot>\n              tensors_from_net\n               (insert_weights s (shallow_model' Z M N)\n                 (\\<lambda>i. w (i + Y * Z))) $\n              j)\n       [0..<Z])", "unfolding \\<open>m = insert_weights s (shallow_model Y Z M N) w\\<close> shallow_model_def insert_weights.simps tensors_from_net.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_tensorlist_mult (extract_matrix w Y Z)\n     (tensors_from_net\n       (insert_weights s (shallow_model' Z M N)\n         (\\<lambda>i. w (i + Y * Z))))\n     (input_sizes\n       (insert_weights s (shallow_model' Z M N)\n         (\\<lambda>i. w (i + Y * Z)))) $\n    y =\n    listsum (input_sizes (shallow_model' Z M N))\n     (map (\\<lambda>j.\n              extract_matrix w Y Z $$ (y, j) \\<cdot>\n              tensors_from_net\n               (insert_weights s (shallow_model' Z M N)\n                 (\\<lambda>i. w (i + Y * Z))) $\n              j)\n       [0..<Z])", "using nth_mat_tensorlist_mult dims_tensors_from_net assms(2) dim_extract output_size_correct_tensors[of \"insert_weights s (shallow_model' Z M N) (\\<lambda>i. w (i + Y * Z))\", unfolded remove_insert_weights, OF valid_shallow_model']\n      dimc_extract_matrix output_size_shallow_model' input_sizes"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>A. A \\<in> set\\<^sub>v ?Ts \\<Longrightarrow> dims A = ?ds;\n   ?i < dim_row ?A; dim_vec ?Ts = dim_col ?A\\<rbrakk>\n  \\<Longrightarrow> mat_tensorlist_mult ?A ?Ts ?ds $ ?i =\n                    listsum ?ds\n                     (map (\\<lambda>j. ?A $$ (?i, j) \\<cdot> ?Ts $ j)\n                       [0..<dim_vec ?Ts])\n  ?T \\<in> set\\<^sub>v (tensors_from_net ?m) \\<Longrightarrow>\n  dims ?T = input_sizes ?m\n  y < Y\n  dim_row (extract_matrix w Y Z) = Y\n  output_size (shallow_model' Z M N) =\n  dim_vec\n   (tensors_from_net\n     (insert_weights s (shallow_model' Z M N) (\\<lambda>i. w (i + Y * Z))))\n  dim_col (extract_matrix w Y Z) = Z\n  output_size (shallow_model' ?Z ?M ?N) = ?Z\n  input_sizes\n   (insert_weights s (shallow_model' Z M N) (\\<lambda>i. w (i + Y * Z))) =\n  input_sizes (shallow_model' Z M N)\n\ngoal (1 subgoal):\n 1. mat_tensorlist_mult (extract_matrix w Y Z)\n     (tensors_from_net\n       (insert_weights s (shallow_model' Z M N)\n         (\\<lambda>i. w (i + Y * Z))))\n     (input_sizes\n       (insert_weights s (shallow_model' Z M N)\n         (\\<lambda>i. w (i + Y * Z)))) $\n    y =\n    listsum (input_sizes (shallow_model' Z M N))\n     (map (\\<lambda>j.\n              extract_matrix w Y Z $$ (y, j) \\<cdot>\n              tensors_from_net\n               (insert_weights s (shallow_model' Z M N)\n                 (\\<lambda>i. w (i + Y * Z))) $\n              j)\n       [0..<Z])", "by auto"], ["proof (state)\nthis:\n  tensors_from_net m $ y =\n  listsum (input_sizes (shallow_model' Z M N))\n   (map (\\<lambda>j.\n            extract_matrix w Y Z $$ (y, j) \\<cdot>\n            tensors_from_net\n             (insert_weights s (shallow_model' Z M N)\n               (\\<lambda>i. w (i + Y * Z))) $\n            j)\n     [0..<Z])\n\ngoal (1 subgoal):\n 1. cprank_max Z (tensors_from_net m $ y)", "define Bs where \"Bs = map (\\<lambda>j. extract_matrix w Y Z $$ (y, j) \\<cdot> tensors_from_net (insert_weights s (shallow_model' Z M N) (\\<lambda>i. w (i + Y * Z))) $ j) [0..<Z]\""], ["proof (state)\nthis:\n  Bs =\n  map (\\<lambda>j.\n          extract_matrix w Y Z $$ (y, j) \\<cdot>\n          tensors_from_net\n           (insert_weights s (shallow_model' Z M N)\n             (\\<lambda>i. w (i + Y * Z))) $\n          j)\n   [0..<Z]\n\ngoal (1 subgoal):\n 1. cprank_max Z (tensors_from_net m $ y)", "have \"\\<And>B. B \\<in> set Bs \\<Longrightarrow> cprank_max1 B\" \"\\<And>B. B \\<in> set Bs \\<Longrightarrow> dims B = input_sizes (shallow_model' Z M N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>B. B \\<in> set Bs \\<Longrightarrow> cprank_max1 B) &&&\n    (\\<And>B.\n        B \\<in> set Bs \\<Longrightarrow>\n        dims B = input_sizes (shallow_model' Z M N))", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>B. B \\<in> set Bs \\<Longrightarrow> cprank_max1 B\n 2. \\<And>B.\n       B \\<in> set Bs \\<Longrightarrow>\n       dims B = input_sizes (shallow_model' Z M N)", "fix B"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>B. B \\<in> set Bs \\<Longrightarrow> cprank_max1 B\n 2. \\<And>B.\n       B \\<in> set Bs \\<Longrightarrow>\n       dims B = input_sizes (shallow_model' Z M N)", "assume \"B \\<in> set Bs\""], ["proof (state)\nthis:\n  B \\<in> set Bs\n\ngoal (2 subgoals):\n 1. \\<And>B. B \\<in> set Bs \\<Longrightarrow> cprank_max1 B\n 2. \\<And>B.\n       B \\<in> set Bs \\<Longrightarrow>\n       dims B = input_sizes (shallow_model' Z M N)", "then"], ["proof (chain)\npicking this:\n  B \\<in> set Bs", "obtain j where \"B = Bs ! j\" \"j < length Bs\""], ["proof (prove)\nusing this:\n  B \\<in> set Bs\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>B = Bs ! j; j < length Bs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis in_set_conv_nth)"], ["proof (state)\nthis:\n  B = Bs ! j\n  j < length Bs\n\ngoal (2 subgoals):\n 1. \\<And>B. B \\<in> set Bs \\<Longrightarrow> cprank_max1 B\n 2. \\<And>B.\n       B \\<in> set Bs \\<Longrightarrow>\n       dims B = input_sizes (shallow_model' Z M N)", "then"], ["proof (chain)\npicking this:\n  B = Bs ! j\n  j < length Bs", "have \"j < Z\""], ["proof (prove)\nusing this:\n  B = Bs ! j\n  j < length Bs\n\ngoal (1 subgoal):\n 1. j < Z", "using length_map Bs_def"], ["proof (prove)\nusing this:\n  B = Bs ! j\n  j < length Bs\n  length (map ?f ?xs) = length ?xs\n  Bs =\n  map (\\<lambda>j.\n          extract_matrix w Y Z $$ (y, j) \\<cdot>\n          tensors_from_net\n           (insert_weights s (shallow_model' Z M N)\n             (\\<lambda>i. w (i + Y * Z))) $\n          j)\n   [0..<Z]\n\ngoal (1 subgoal):\n 1. j < Z", "by simp"], ["proof (state)\nthis:\n  j < Z\n\ngoal (2 subgoals):\n 1. \\<And>B. B \\<in> set Bs \\<Longrightarrow> cprank_max1 B\n 2. \\<And>B.\n       B \\<in> set Bs \\<Longrightarrow>\n       dims B = input_sizes (shallow_model' Z M N)", "have 1:\"cprank_max1 (tensors_from_net (insert_weights s (shallow_model' Z M N) (\\<lambda>i. w (i + Y * Z))) $ j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cprank_max1\n     (tensors_from_net\n       (insert_weights s (shallow_model' Z M N)\n         (\\<lambda>i. w (i + Y * Z))) $\n      j)", "using \\<open>j < Z\\<close> output_size_shallow_model' cprank_max1_shallow_model'"], ["proof (prove)\nusing this:\n  j < Z\n  output_size (shallow_model' ?Z ?M ?N) = ?Z\n  ?y < output_size (shallow_model' ?Z ?M ?N) \\<Longrightarrow>\n  cprank_max1\n   (tensors_from_net (insert_weights ?s (shallow_model' ?Z ?M ?N) ?w) $ ?y)\n\ngoal (1 subgoal):\n 1. cprank_max1\n     (tensors_from_net\n       (insert_weights s (shallow_model' Z M N)\n         (\\<lambda>i. w (i + Y * Z))) $\n      j)", "by auto"], ["proof (state)\nthis:\n  cprank_max1\n   (tensors_from_net\n     (insert_weights s (shallow_model' Z M N) (\\<lambda>i. w (i + Y * Z))) $\n    j)\n\ngoal (2 subgoals):\n 1. \\<And>B. B \\<in> set Bs \\<Longrightarrow> cprank_max1 B\n 2. \\<And>B.\n       B \\<in> set Bs \\<Longrightarrow>\n       dims B = input_sizes (shallow_model' Z M N)", "then"], ["proof (chain)\npicking this:\n  cprank_max1\n   (tensors_from_net\n     (insert_weights s (shallow_model' Z M N) (\\<lambda>i. w (i + Y * Z))) $\n    j)", "have \"cprank_max1 (extract_matrix w Y Z $$ (y, j) \\<cdot> tensors_from_net (insert_weights s (shallow_model' Z M N) (\\<lambda>i. w (i + Y * Z))) $ j)\""], ["proof (prove)\nusing this:\n  cprank_max1\n   (tensors_from_net\n     (insert_weights s (shallow_model' Z M N) (\\<lambda>i. w (i + Y * Z))) $\n    j)\n\ngoal (1 subgoal):\n 1. cprank_max1\n     (extract_matrix w Y Z $$ (y, j) \\<cdot>\n      tensors_from_net\n       (insert_weights s (shallow_model' Z M N)\n         (\\<lambda>i. w (i + Y * Z))) $\n      j)", "using smult_prod_extract1 cprank_max1_order0[OF 1, of \"extract_matrix w Y Z $$ (y, j) \\<cdot> 1\"]"], ["proof (prove)\nusing this:\n  cprank_max1\n   (tensors_from_net\n     (insert_weights s (shallow_model' Z M N) (\\<lambda>i. w (i + Y * Z))) $\n    j)\n  ?a \\<cdot> (?A \\<otimes> ?B) = ?a \\<cdot> ?A \\<otimes> ?B\n  order (extract_matrix w Y Z $$ (y, j) \\<cdot> 1) = 0 \\<Longrightarrow>\n  cprank_max1\n   (extract_matrix w Y Z $$ (y, j) \\<cdot> 1 \\<otimes>\n    tensors_from_net\n     (insert_weights s (shallow_model' Z M N) (\\<lambda>i. w (i + Y * Z))) $\n    j)\n\ngoal (1 subgoal):\n 1. cprank_max1\n     (extract_matrix w Y Z $$ (y, j) \\<cdot>\n      tensors_from_net\n       (insert_weights s (shallow_model' Z M N)\n         (\\<lambda>i. w (i + Y * Z))) $\n      j)", "by (metis dims_smult mult.left_neutral order_tensor_one)"], ["proof (state)\nthis:\n  cprank_max1\n   (extract_matrix w Y Z $$ (y, j) \\<cdot>\n    tensors_from_net\n     (insert_weights s (shallow_model' Z M N) (\\<lambda>i. w (i + Y * Z))) $\n    j)\n\ngoal (2 subgoals):\n 1. \\<And>B. B \\<in> set Bs \\<Longrightarrow> cprank_max1 B\n 2. \\<And>B.\n       B \\<in> set Bs \\<Longrightarrow>\n       dims B = input_sizes (shallow_model' Z M N)", "then"], ["proof (chain)\npicking this:\n  cprank_max1\n   (extract_matrix w Y Z $$ (y, j) \\<cdot>\n    tensors_from_net\n     (insert_weights s (shallow_model' Z M N) (\\<lambda>i. w (i + Y * Z))) $\n    j)", "show \"cprank_max1 B\""], ["proof (prove)\nusing this:\n  cprank_max1\n   (extract_matrix w Y Z $$ (y, j) \\<cdot>\n    tensors_from_net\n     (insert_weights s (shallow_model' Z M N) (\\<lambda>i. w (i + Y * Z))) $\n    j)\n\ngoal (1 subgoal):\n 1. cprank_max1 B", "by (simp add: Bs_def \\<open>B = Bs ! j\\<close> \\<open>j < Z\\<close>)"], ["proof (state)\nthis:\n  cprank_max1 B\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       B \\<in> set Bs \\<Longrightarrow>\n       dims B = input_sizes (shallow_model' Z M N)", "show \"dims B = input_sizes (shallow_model' Z M N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dims B = input_sizes (shallow_model' Z M N)", "unfolding \\<open>B = Bs ! j\\<close> Bs_def\n        nth_map[of j \"[0..<Z]\", unfolded length_upt Nat.diff_0, OF \\<open>j < Z\\<close>] dims_smult\n        input_sizes[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. dims\n     (tensors_from_net\n       (insert_weights s (shallow_model' Z M N)\n         (\\<lambda>i. w (i + Y * Z))) $\n      ([0..<Z] ! j)) =\n    input_sizes\n     (insert_weights s (shallow_model' Z M N) (\\<lambda>i. w (i + Y * Z)))", "by (rule dims_tensors_from_net; rule vec_setI[where i=j], simp add:\\<open>j < Z\\<close>, metis (no_types) \\<open>j < Z\\<close> output_size_correct_tensors output_size_shallow_model' remove_insert_weights valid_shallow_model')"], ["proof (state)\nthis:\n  dims B = input_sizes (shallow_model' Z M N)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?B \\<in> set Bs \\<Longrightarrow> cprank_max1 ?B\n  ?B \\<in> set Bs \\<Longrightarrow>\n  dims ?B = input_sizes (shallow_model' Z M N)\n\ngoal (1 subgoal):\n 1. cprank_max Z (tensors_from_net m $ y)", "then"], ["proof (chain)\npicking this:\n  ?B \\<in> set Bs \\<Longrightarrow> cprank_max1 ?B\n  ?B \\<in> set Bs \\<Longrightarrow>\n  dims ?B = input_sizes (shallow_model' Z M N)", "show ?thesis"], ["proof (prove)\nusing this:\n  ?B \\<in> set Bs \\<Longrightarrow> cprank_max1 ?B\n  ?B \\<in> set Bs \\<Longrightarrow>\n  dims ?B = input_sizes (shallow_model' Z M N)\n\ngoal (1 subgoal):\n 1. cprank_max Z (tensors_from_net m $ y)", "unfolding 0"], ["proof (prove)\nusing this:\n  ?B \\<in> set Bs \\<Longrightarrow> cprank_max1 ?B\n  ?B \\<in> set Bs \\<Longrightarrow>\n  dims ?B = input_sizes (shallow_model' Z M N)\n\ngoal (1 subgoal):\n 1. cprank_max Z\n     (listsum (input_sizes (shallow_model' Z M N))\n       (map (\\<lambda>j.\n                extract_matrix w Y Z $$ (y, j) \\<cdot>\n                tensors_from_net\n                 (insert_weights s (shallow_model' Z M N)\n                   (\\<lambda>i. w (i + Y * Z))) $\n                j)\n         [0..<Z]))", "using cprank_maxI length_map Bs_def"], ["proof (prove)\nusing this:\n  ?B \\<in> set Bs \\<Longrightarrow> cprank_max1 ?B\n  ?B \\<in> set Bs \\<Longrightarrow>\n  dims ?B = input_sizes (shallow_model' Z M N)\n  \\<lbrakk>\\<And>B. B \\<in> set ?BS \\<Longrightarrow> cprank_max1 B;\n   \\<And>B. B \\<in> set ?BS \\<Longrightarrow> dims B = ?ds\\<rbrakk>\n  \\<Longrightarrow> cprank_max (length ?BS) (listsum ?ds ?BS)\n  length (map ?f ?xs) = length ?xs\n  Bs =\n  map (\\<lambda>j.\n          extract_matrix w Y Z $$ (y, j) \\<cdot>\n          tensors_from_net\n           (insert_weights s (shallow_model' Z M N)\n             (\\<lambda>i. w (i + Y * Z))) $\n          j)\n   [0..<Z]\n\ngoal (1 subgoal):\n 1. cprank_max Z\n     (listsum (input_sizes (shallow_model' Z M N))\n       (map (\\<lambda>j.\n                extract_matrix w Y Z $$ (y, j) \\<cdot>\n                tensors_from_net\n                 (insert_weights s (shallow_model' Z M N)\n                   (\\<lambda>i. w (i + Y * Z))) $\n                j)\n         [0..<Z]))", "by (metis (no_types, lifting) diff_zero length_upt)"], ["proof (state)\nthis:\n  cprank_max Z (tensors_from_net m $ y)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cprank_max Z (tensors_from_net m $ y)\n\ngoal (1 subgoal):\n 1. cprank (tensors_from_net m $ y) \\<le> Z", "then"], ["proof (chain)\npicking this:\n  cprank_max Z (tensors_from_net m $ y)", "show ?thesis"], ["proof (prove)\nusing this:\n  cprank_max Z (tensors_from_net m $ y)\n\ngoal (1 subgoal):\n 1. cprank (tensors_from_net m $ y) \\<le> Z", "unfolding cprank_def"], ["proof (prove)\nusing this:\n  cprank_max Z (tensors_from_net m $ y)\n\ngoal (1 subgoal):\n 1. (LEAST n. cprank_max n (tensors_from_net m $ y)) \\<le> Z", "by (simp add: Least_le)"], ["proof (state)\nthis:\n  cprank (tensors_from_net m $ y) \\<le> Z\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}