{"file_name": "/home/qj213/afp-2021-10-22/thys/Deep_Learning/DL_Deep_Model.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Deep_Learning", "problem_names": ["lemma valid_deep_model: \"valid_net (deep_model Y r rs)\"", "lemma valid_deep_model': \"valid_net (deep_model' r rs)\"", "lemma input_sizes_deep_model':\nassumes \"length rs \\<ge> 1\"\nshows \"input_sizes (deep_model'_l rs) = replicate (2^(length rs - 1)) (last rs)\"", "lemma input_sizes_deep_model:\nassumes \"length rs \\<ge> 2\"\nshows \"input_sizes (deep_model_l rs) = replicate (2^(length rs - 2)) (last rs)\"", "lemma evaluate_net_Conv_id:\nassumes \"valid_net' m\"\nand \"input_sizes m = map dim_vec input\"\nand \"j<nr\"\nshows \"evaluate_net (Conv (id_matrix nr (output_size' m)) m) input $ j\n = (if j<output_size' m then evaluate_net m input $ j else 0)\"", "lemma tensors_from_net_Conv_id:\nassumes \"valid_net' m\"\nand \"i<nr\"\nshows \"tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i\n = (if i<output_size' m then tensors_from_net m $ i else tensor0 (input_sizes m))\"\n  (is \"?a $ i = ?b\")", "lemma evaluate_net_Conv_copy_first:\nassumes \"valid_net' m\"\nand \"input_sizes m = map dim_vec input\"\nand \"j<nr\"\nand \"output_size' m > 0\"\nshows \"evaluate_net (Conv (copy_first_matrix nr (output_size' m)) m) input $ j\n = evaluate_net m input $ 0\"", "lemma tensors_from_net_Conv_copy_first:\nassumes \"valid_net' m\"\nand \"i<nr\"\nand \"output_size' m > 0\"\nshows \"tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $ i = tensors_from_net m $ 0\"\n  (is \"?a $ i = ?b\")", "lemma evaluate_net_Conv_all1:\nassumes \"valid_net' m\"\nand \"input_sizes m = map dim_vec input\"\nand \"i<nr\"\nshows \"evaluate_net (Conv (all1_matrix nr (output_size' m)) m) input $ i\n = Groups_List.sum_list (list_of_vec (evaluate_net m input))\"", "lemma tensors_from_net_Conv_all1:\nassumes \"valid_net' m\"\nand \"i<nr\"\nshows \"tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i\n = listsum (input_sizes m) (list_of_vec (tensors_from_net m))\"\n  (is \"?a $ i = ?b\")", "lemma witness_is_deep_model: \"remove_weights (witness Y r rs) = deep_model Y r rs\"", "lemma witness'_is_deep_model: \"remove_weights (witness' Y rs) = deep_model' Y rs\"", "lemma witness_valid: \"valid_net' (witness Y r rs)\"", "lemma witness'_valid: \"valid_net' (witness' Y rs)\"", "lemma shared_weight_net_witness: \"shared_weight_net (witness Y r rs)\"", "lemma witness_l0': \"witness' Y [M] =\n    (Pool\n      (Conv (id_matrix Y M) (Input M))\n      (Conv (id_matrix Y M) (Input M))\n    )\"", "lemma witness_l1: \"witness Y r0 [M] =\n  Conv (all1_matrix Y r0) (witness' r0 [M])\"", "lemma tensors_ht_l0:\nassumes \"j<r0\"\nshows \"tensors_from_net (Conv (id_matrix r0 M) (Input M)) $ j\n = (if j<M then unit_vec M j else tensor0 [M])\"", "lemma tensor_prod_unit_vec:\n\"unit_vec M j \\<otimes> unit_vec M j = tensor_from_lookup [M,M] (\\<lambda>is. if is=[j,j] then 1 else 0)\" (is \"?A=?B\")", "lemma tensors_ht_l0':\nassumes \"j<r0\"\nshows \"tensors_from_net (witness' r0 [M]) $ j\n = (if j<M then unit_vec M j \\<otimes> unit_vec M j else tensor0 [M,M])\" (is \"_ = ?b\")", "lemma lookup_tensors_ht_l0':\nassumes \"j<r0\"\nand \"is \\<lhd> [M,M]\"\nshows \"(Tensor.lookup (tensors_from_net (witness' r0 [M]) $ j)) is = (if is=[j,j] then 1 else 0)\"", "lemma lookup_tensors_ht_l1:\nassumes \"j < r1\"\nand \"is \\<lhd> [M,M]\"\nshows \"Tensor.lookup (tensors_from_net (witness r1 r0 [M]) $ j) is\n   = (if is!0 = is!1 \\<and> is!0<r0 then 1 else 0)\"", "lemma length_output_deep_model:\nassumes \"remove_weights m = deep_model_l rs\"\nshows \"dim_vec (tensors_from_net m) = rs ! 0\"", "lemma length_output_deep_model':\nassumes \"remove_weights m = deep_model'_l rs\"\nshows \"dim_vec (tensors_from_net m) = rs ! 0\"", "lemma length_output_witness:\n\"dim_vec (tensors_from_net (witness_l rs)) = rs ! 0\"", "lemma length_output_witness':\n\"dim_vec (tensors_from_net (witness'_l rs)) = rs ! 0\"", "lemma dims_output_deep_model:\nassumes \"length rs \\<ge> 2\"\nand \"\\<And>r. r\\<in>set rs \\<Longrightarrow> r > 0\"\nand \"j < rs!0\"\nand \"remove_weights m = deep_model_l rs\"\nshows \"Tensor.dims (tensors_from_net m $ j) = replicate (2^(length rs - 2)) (last rs)\"", "lemma dims_output_witness:\nassumes \"length rs \\<ge> 2\"\nand \"\\<And>r. r\\<in>set rs \\<Longrightarrow> r > 0\"\nand \"j < rs!0\"\nshows \"Tensor.dims (tensors_from_net (witness_l rs) $ j) = replicate (2^(length rs - 2)) (last rs)\"", "lemma dims_output_deep_model':\nassumes \"length rs \\<ge> 1\"\nand \"\\<And>r. r\\<in>set rs \\<Longrightarrow> r > 0\"\nand \"j < rs!0\"\nand \"remove_weights m = deep_model'_l rs\"\nshows \"Tensor.dims (tensors_from_net m $ j) = replicate (2^(length rs - 1)) (last rs)\"", "lemma dims_output_witness':\nassumes \"length rs \\<ge> 1\"\nand \"\\<And>r. r\\<in>set rs \\<Longrightarrow> r > 0\"\nand \"j < rs!0\"\nshows \"Tensor.dims (tensors_from_net (witness'_l rs) $ j) = replicate (2^(length rs - 1)) (last rs)\"", "lemma dims_tensor_deep_model:\nassumes \"remove_weights m = deep_model_l rs\"\nshows \"dims (tensors_from_net m $ y) = replicate (2 * N_half) (last rs)\"", "lemma order_tensor_deep_model:\nassumes \"remove_weights m = deep_model_l rs\"\nshows \"order (tensors_from_net m $ y) = 2 * N_half\"", "lemma dims_A:\nshows \"Tensor.dims (A ws) = replicate (2 * N_half) (last rs)\"", "lemma order_A:\nshows \"order (A ws) = 2 * N_half\"", "lemma dims_A':\nshows \"dim_row (A' ws) = prod_list (nths (Tensor.dims (A ws)) {n. even n})\"\nand \"dim_col (A' ws) = prod_list (nths (Tensor.dims (A ws)) {n. odd n})\"", "lemma dims_A'_pow:\nshows \"dim_row (A' ws) = (last rs) ^ N_half\" \"dim_col (A' ws) = (last rs) ^ N_half\"", "lemma witness_weights:\"witness_l rs = insert_weights shared_weights (deep_model_l rs) witness_weights\"", "lemma Aw_def': \"Aw = A witness_weights\"", "lemma Aw'_def': \"Aw' = A' witness_weights\"", "lemma dims_Aw: \"Tensor.dims Aw = replicate (2 * N_half) (last rs)\"", "lemma order_Aw: \"order Aw = 2 * N_half\"", "lemma dims_Aw':\n\"dim_row Aw' = prod_list (nths (Tensor.dims Aw) {n. even n})\"\n\"dim_col Aw' = prod_list (nths (Tensor.dims Aw) {n. odd n})\"", "lemma dims_Aw'_pow: \"dim_row Aw' = (last rs) ^ N_half\" \"dim_col Aw' = (last rs) ^ N_half\"", "lemma witness_tensor:\nassumes \"is \\<lhd> Tensor.dims Aw\"\nshows \"Tensor.lookup Aw is\n   = (if nths is {n. even n} = nths is {n. odd n} \\<and> (\\<forall>i\\<in>set is. i < last (butlast rs)) then 1 else 0)\"", "lemma witness_matricization:\nassumes \"i < dim_row Aw'\" and \"j < dim_col Aw'\"\nshows \"Aw' $$ (i, j)\n = (if i=j \\<and> (\\<forall>i0\\<in>set (digit_encode (nths (Tensor.dims Aw) {n. even n}) i). i0 < last (butlast rs)) then 1 else 0)\"", "lemma card_low_digits:\nassumes \"m>0\" \"\\<And>d. d\\<in>set ds \\<Longrightarrow> m \\<le> d\"\nshows \"card {i. i<prod_list ds \\<and> (\\<forall>i0\\<in>set (digit_encode ds i). i0 < m)} = m ^ (length ds)\"", "lemma card_rows_with_1: \"card {i\\<in>rows_with_1. i<dim_row Aw'} = r ^ N_half\"", "lemma infinite_rows_with_1: \"infinite rows_with_1\"", "lemma witness_submatrix: \"submatrix Aw' rows_with_1 rows_with_1 = 1\\<^sub>m (r^N_half)\"", "lemma witness_det: \"det (submatrix Aw' rows_with_1 rows_with_1) \\<noteq> 0\""], "translations": [["", "lemma valid_deep_model: \"valid_net (deep_model Y r rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_net (deep_model Y r rs)", "apply (induction rs arbitrary: Y r)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Y r. valid_net (deep_model Y r [])\n 2. \\<And>a rs Y r.\n       (\\<And>Y r. valid_net (deep_model Y r rs)) \\<Longrightarrow>\n       valid_net (deep_model Y r (a # rs))", "apply (simp add: valid_net.intros(1) valid_net.intros(2))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a rs Y r.\n       (\\<And>Y r. valid_net (deep_model Y r rs)) \\<Longrightarrow>\n       valid_net (deep_model Y r (a # rs))", "using valid_net.intros(2) valid_net.intros(3)"], ["proof (prove)\nusing this:\n  \\<lbrakk>output_size ?m = ?r1.0; valid_net ?m\\<rbrakk>\n  \\<Longrightarrow> valid_net (Conv (?r0.0, ?r1.0) ?m)\n  \\<lbrakk>output_size ?m1.0 = output_size ?m2.0; valid_net ?m1.0;\n   valid_net ?m2.0\\<rbrakk>\n  \\<Longrightarrow> valid_net (Pool ?m1.0 ?m2.0)\n\ngoal (1 subgoal):\n 1. \\<And>a rs Y r.\n       (\\<And>Y r. valid_net (deep_model Y r rs)) \\<Longrightarrow>\n       valid_net (deep_model Y r (a # rs))", "by auto"], ["", "lemma valid_deep_model': \"valid_net (deep_model' r rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_net (deep_model' r rs)", "apply (induction rs arbitrary: r)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r. valid_net (deep_model' r [])\n 2. \\<And>a rs r.\n       (\\<And>r. valid_net (deep_model' r rs)) \\<Longrightarrow>\n       valid_net (deep_model' r (a # rs))", "apply (simp add: valid_net.intros(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a rs r.\n       (\\<And>r. valid_net (deep_model' r rs)) \\<Longrightarrow>\n       valid_net (deep_model' r (a # rs))", "by (metis deep_model'.elims deep_model'.simps(2) deep_model.elims output_size.simps valid_net.simps)"], ["", "lemma input_sizes_deep_model':\nassumes \"length rs \\<ge> 1\"\nshows \"input_sizes (deep_model'_l rs) = replicate (2^(length rs - 1)) (last rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. input_sizes (deep_model'_l rs) =\n    replicate (2 ^ (length rs - 1)) (last rs)", "using assms"], ["proof (prove)\nusing this:\n  1 \\<le> length rs\n\ngoal (1 subgoal):\n 1. input_sizes (deep_model'_l rs) =\n    replicate (2 ^ (length rs - 1)) (last rs)", "proof (induction \"butlast rs\" arbitrary:rs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>rs.\n       \\<lbrakk>[] = butlast rs; 1 \\<le> length rs\\<rbrakk>\n       \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                         replicate (2 ^ (length rs - 1)) (last rs)\n 2. \\<And>a x rs.\n       \\<lbrakk>\\<And>rs.\n                   \\<lbrakk>x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n                   \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                                     replicate (2 ^ (length rs - 1))\n(last rs);\n        a # x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n       \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                         replicate (2 ^ (length rs - 1)) (last rs)", "case Nil"], ["proof (state)\nthis:\n  [] = butlast rs\n  1 \\<le> length rs\n\ngoal (2 subgoals):\n 1. \\<And>rs.\n       \\<lbrakk>[] = butlast rs; 1 \\<le> length rs\\<rbrakk>\n       \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                         replicate (2 ^ (length rs - 1)) (last rs)\n 2. \\<And>a x rs.\n       \\<lbrakk>\\<And>rs.\n                   \\<lbrakk>x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n                   \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                                     replicate (2 ^ (length rs - 1))\n(last rs);\n        a # x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n       \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                         replicate (2 ^ (length rs - 1)) (last rs)", "then"], ["proof (chain)\npicking this:\n  [] = butlast rs\n  1 \\<le> length rs", "have \"rs = [rs!0]\""], ["proof (prove)\nusing this:\n  [] = butlast rs\n  1 \\<le> length rs\n\ngoal (1 subgoal):\n 1. rs = [rs ! 0]", "by (metis One_nat_def diff_diff_cancel diff_zero length_0_conv length_Suc_conv length_butlast nth_Cons_0)"], ["proof (state)\nthis:\n  rs = [rs ! 0]\n\ngoal (2 subgoals):\n 1. \\<And>rs.\n       \\<lbrakk>[] = butlast rs; 1 \\<le> length rs\\<rbrakk>\n       \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                         replicate (2 ^ (length rs - 1)) (last rs)\n 2. \\<And>a x rs.\n       \\<lbrakk>\\<And>rs.\n                   \\<lbrakk>x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n                   \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                                     replicate (2 ^ (length rs - 1))\n(last rs);\n        a # x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n       \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                         replicate (2 ^ (length rs - 1)) (last rs)", "then"], ["proof (chain)\npicking this:\n  rs = [rs ! 0]", "have \"input_sizes (deep_model'_l rs) = [last rs]\""], ["proof (prove)\nusing this:\n  rs = [rs ! 0]\n\ngoal (1 subgoal):\n 1. input_sizes (deep_model'_l rs) = [last rs]", "by (metis deep_model'.simps(1) input_sizes.simps(1) last.simps list.sel(3))"], ["proof (state)\nthis:\n  input_sizes (deep_model'_l rs) = [last rs]\n\ngoal (2 subgoals):\n 1. \\<And>rs.\n       \\<lbrakk>[] = butlast rs; 1 \\<le> length rs\\<rbrakk>\n       \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                         replicate (2 ^ (length rs - 1)) (last rs)\n 2. \\<And>a x rs.\n       \\<lbrakk>\\<And>rs.\n                   \\<lbrakk>x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n                   \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                                     replicate (2 ^ (length rs - 1))\n(last rs);\n        a # x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n       \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                         replicate (2 ^ (length rs - 1)) (last rs)", "then"], ["proof (chain)\npicking this:\n  input_sizes (deep_model'_l rs) = [last rs]", "show \"input_sizes (deep_model'_l rs) = replicate (2 ^ (length rs - 1)) (last rs)\""], ["proof (prove)\nusing this:\n  input_sizes (deep_model'_l rs) = [last rs]\n\ngoal (1 subgoal):\n 1. input_sizes (deep_model'_l rs) =\n    replicate (2 ^ (length rs - 1)) (last rs)", "by (metis One_nat_def \\<open>[] = butlast rs\\<close> empty_replicate length_butlast list.size(3) power_0 replicate.simps(2))"], ["proof (state)\nthis:\n  input_sizes (deep_model'_l rs) = replicate (2 ^ (length rs - 1)) (last rs)\n\ngoal (1 subgoal):\n 1. \\<And>a x rs.\n       \\<lbrakk>\\<And>rs.\n                   \\<lbrakk>x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n                   \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                                     replicate (2 ^ (length rs - 1))\n(last rs);\n        a # x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n       \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                         replicate (2 ^ (length rs - 1)) (last rs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x rs.\n       \\<lbrakk>\\<And>rs.\n                   \\<lbrakk>x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n                   \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                                     replicate (2 ^ (length rs - 1))\n(last rs);\n        a # x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n       \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                         replicate (2 ^ (length rs - 1)) (last rs)", "case (Cons r rs' rs)"], ["proof (state)\nthis:\n  \\<lbrakk>rs' = butlast ?rs; 1 \\<le> length ?rs\\<rbrakk>\n  \\<Longrightarrow> input_sizes (deep_model'_l ?rs) =\n                    replicate (2 ^ (length ?rs - 1)) (last ?rs)\n  r # rs' = butlast rs\n  1 \\<le> length rs\n\ngoal (1 subgoal):\n 1. \\<And>a x rs.\n       \\<lbrakk>\\<And>rs.\n                   \\<lbrakk>x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n                   \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                                     replicate (2 ^ (length rs - 1))\n(last rs);\n        a # x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n       \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                         replicate (2 ^ (length rs - 1)) (last rs)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>rs' = butlast ?rs; 1 \\<le> length ?rs\\<rbrakk>\n  \\<Longrightarrow> input_sizes (deep_model'_l ?rs) =\n                    replicate (2 ^ (length ?rs - 1)) (last ?rs)\n  r # rs' = butlast rs\n  1 \\<le> length rs", "have IH: \"input_sizes (deep_model'_l (tl rs)) = replicate (2 ^ (length (tl rs) - 1)) (last rs)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>rs' = butlast ?rs; 1 \\<le> length ?rs\\<rbrakk>\n  \\<Longrightarrow> input_sizes (deep_model'_l ?rs) =\n                    replicate (2 ^ (length ?rs - 1)) (last ?rs)\n  r # rs' = butlast rs\n  1 \\<le> length rs\n\ngoal (1 subgoal):\n 1. input_sizes (deep_model'_l (tl rs)) =\n    replicate (2 ^ (length (tl rs) - 1)) (last rs)", "by (metis (no_types, lifting) One_nat_def butlast_tl diff_is_0_eq' last_tl length_Cons\n    length_butlast length_tl list.sel(3) list.size(3) nat_le_linear not_one_le_zero)"], ["proof (state)\nthis:\n  input_sizes (deep_model'_l (tl rs)) =\n  replicate (2 ^ (length (tl rs) - 1)) (last rs)\n\ngoal (1 subgoal):\n 1. \\<And>a x rs.\n       \\<lbrakk>\\<And>rs.\n                   \\<lbrakk>x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n                   \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                                     replicate (2 ^ (length rs - 1))\n(last rs);\n        a # x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n       \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                         replicate (2 ^ (length rs - 1)) (last rs)", "have \"rs = r # (tl rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rs = r # tl rs", "by (metis Cons.hyps(2) Cons.prems One_nat_def append_Cons append_butlast_last_id length_greater_0_conv less_le_trans list.sel(3) zero_less_Suc)"], ["proof (state)\nthis:\n  rs = r # tl rs\n\ngoal (1 subgoal):\n 1. \\<And>a x rs.\n       \\<lbrakk>\\<And>rs.\n                   \\<lbrakk>x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n                   \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                                     replicate (2 ^ (length rs - 1))\n(last rs);\n        a # x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n       \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                         replicate (2 ^ (length rs - 1)) (last rs)", "then"], ["proof (chain)\npicking this:\n  rs = r # tl rs", "have \"deep_model'_l rs = Pool (deep_model_l rs) (deep_model_l rs)\""], ["proof (prove)\nusing this:\n  rs = r # tl rs\n\ngoal (1 subgoal):\n 1. deep_model'_l rs = Pool (deep_model_l rs) (deep_model_l rs)", "by (metis Cons.hyps(2) One_nat_def butlast.simps(2) deep_model'.elims list.sel(3) list.simps(3) nth_Cons_0 nth_Cons_Suc)"], ["proof (state)\nthis:\n  deep_model'_l rs = Pool (deep_model_l rs) (deep_model_l rs)\n\ngoal (1 subgoal):\n 1. \\<And>a x rs.\n       \\<lbrakk>\\<And>rs.\n                   \\<lbrakk>x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n                   \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                                     replicate (2 ^ (length rs - 1))\n(last rs);\n        a # x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n       \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                         replicate (2 ^ (length rs - 1)) (last rs)", "then"], ["proof (chain)\npicking this:\n  deep_model'_l rs = Pool (deep_model_l rs) (deep_model_l rs)", "have \"input_sizes (deep_model'_l rs) = input_sizes (deep_model_l rs) @ input_sizes (deep_model_l rs)\""], ["proof (prove)\nusing this:\n  deep_model'_l rs = Pool (deep_model_l rs) (deep_model_l rs)\n\ngoal (1 subgoal):\n 1. input_sizes (deep_model'_l rs) =\n    input_sizes (deep_model_l rs) @ input_sizes (deep_model_l rs)", "using input_sizes.simps(3)"], ["proof (prove)\nusing this:\n  deep_model'_l rs = Pool (deep_model_l rs) (deep_model_l rs)\n  input_sizes (Pool ?m1.0 ?m2.0) = input_sizes ?m1.0 @ input_sizes ?m2.0\n\ngoal (1 subgoal):\n 1. input_sizes (deep_model'_l rs) =\n    input_sizes (deep_model_l rs) @ input_sizes (deep_model_l rs)", "by metis"], ["proof (state)\nthis:\n  input_sizes (deep_model'_l rs) =\n  input_sizes (deep_model_l rs) @ input_sizes (deep_model_l rs)\n\ngoal (1 subgoal):\n 1. \\<And>a x rs.\n       \\<lbrakk>\\<And>rs.\n                   \\<lbrakk>x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n                   \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                                     replicate (2 ^ (length rs - 1))\n(last rs);\n        a # x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n       \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                         replicate (2 ^ (length rs - 1)) (last rs)", "also"], ["proof (state)\nthis:\n  input_sizes (deep_model'_l rs) =\n  input_sizes (deep_model_l rs) @ input_sizes (deep_model_l rs)\n\ngoal (1 subgoal):\n 1. \\<And>a x rs.\n       \\<lbrakk>\\<And>rs.\n                   \\<lbrakk>x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n                   \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                                     replicate (2 ^ (length rs - 1))\n(last rs);\n        a # x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n       \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                         replicate (2 ^ (length rs - 1)) (last rs)", "have \"... = input_sizes (deep_model'_l (tl rs)) @ input_sizes (deep_model'_l (tl rs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. input_sizes (deep_model_l rs) @ input_sizes (deep_model_l rs) =\n    input_sizes (deep_model'_l (tl rs)) @\n    input_sizes (deep_model'_l (tl rs))", "by (metis (no_types, lifting) Cons.hyps(2) One_nat_def deep_model.elims input_sizes.simps(2)\n    length_Cons length_butlast length_greater_0_conv length_tl list.sel(2) list.sel(3) list.size(3)\n    nth_tl one_neq_zero)"], ["proof (state)\nthis:\n  input_sizes (deep_model_l rs) @ input_sizes (deep_model_l rs) =\n  input_sizes (deep_model'_l (tl rs)) @ input_sizes (deep_model'_l (tl rs))\n\ngoal (1 subgoal):\n 1. \\<And>a x rs.\n       \\<lbrakk>\\<And>rs.\n                   \\<lbrakk>x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n                   \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                                     replicate (2 ^ (length rs - 1))\n(last rs);\n        a # x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n       \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                         replicate (2 ^ (length rs - 1)) (last rs)", "also"], ["proof (state)\nthis:\n  input_sizes (deep_model_l rs) @ input_sizes (deep_model_l rs) =\n  input_sizes (deep_model'_l (tl rs)) @ input_sizes (deep_model'_l (tl rs))\n\ngoal (1 subgoal):\n 1. \\<And>a x rs.\n       \\<lbrakk>\\<And>rs.\n                   \\<lbrakk>x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n                   \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                                     replicate (2 ^ (length rs - 1))\n(last rs);\n        a # x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n       \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                         replicate (2 ^ (length rs - 1)) (last rs)", "have \"... = replicate (2 ^ (length (tl rs) - 1)) (last rs) @ replicate (2 ^ (length (tl rs) - 1)) (last rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. input_sizes (deep_model'_l (tl rs)) @\n    input_sizes (deep_model'_l (tl rs)) =\n    replicate (2 ^ (length (tl rs) - 1)) (last rs) @\n    replicate (2 ^ (length (tl rs) - 1)) (last rs)", "using IH"], ["proof (prove)\nusing this:\n  input_sizes (deep_model'_l (tl rs)) =\n  replicate (2 ^ (length (tl rs) - 1)) (last rs)\n\ngoal (1 subgoal):\n 1. input_sizes (deep_model'_l (tl rs)) @\n    input_sizes (deep_model'_l (tl rs)) =\n    replicate (2 ^ (length (tl rs) - 1)) (last rs) @\n    replicate (2 ^ (length (tl rs) - 1)) (last rs)", "by auto"], ["proof (state)\nthis:\n  input_sizes (deep_model'_l (tl rs)) @\n  input_sizes (deep_model'_l (tl rs)) =\n  replicate (2 ^ (length (tl rs) - 1)) (last rs) @\n  replicate (2 ^ (length (tl rs) - 1)) (last rs)\n\ngoal (1 subgoal):\n 1. \\<And>a x rs.\n       \\<lbrakk>\\<And>rs.\n                   \\<lbrakk>x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n                   \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                                     replicate (2 ^ (length rs - 1))\n(last rs);\n        a # x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n       \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                         replicate (2 ^ (length rs - 1)) (last rs)", "also"], ["proof (state)\nthis:\n  input_sizes (deep_model'_l (tl rs)) @\n  input_sizes (deep_model'_l (tl rs)) =\n  replicate (2 ^ (length (tl rs) - 1)) (last rs) @\n  replicate (2 ^ (length (tl rs) - 1)) (last rs)\n\ngoal (1 subgoal):\n 1. \\<And>a x rs.\n       \\<lbrakk>\\<And>rs.\n                   \\<lbrakk>x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n                   \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                                     replicate (2 ^ (length rs - 1))\n(last rs);\n        a # x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n       \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                         replicate (2 ^ (length rs - 1)) (last rs)", "have \"... = replicate (2 ^ (length rs - 1)) (last rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. replicate (2 ^ (length (tl rs) - 1)) (last rs) @\n    replicate (2 ^ (length (tl rs) - 1)) (last rs) =\n    replicate (2 ^ (length rs - 1)) (last rs)", "using replicate_add[of \"2 ^ (length (tl rs) - 1)\" \"2 ^ (length (tl rs) - 1)\" \"last rs\"]"], ["proof (prove)\nusing this:\n  replicate (2 ^ (length (tl rs) - 1) + 2 ^ (length (tl rs) - 1))\n   (last rs) =\n  replicate (2 ^ (length (tl rs) - 1)) (last rs) @\n  replicate (2 ^ (length (tl rs) - 1)) (last rs)\n\ngoal (1 subgoal):\n 1. replicate (2 ^ (length (tl rs) - 1)) (last rs) @\n    replicate (2 ^ (length (tl rs) - 1)) (last rs) =\n    replicate (2 ^ (length rs - 1)) (last rs)", "by (metis Cons.hyps(2) One_nat_def butlast_tl length_butlast list.sel(3) list.size(4) mult_2_right\n    power_add power_one_right)"], ["proof (state)\nthis:\n  replicate (2 ^ (length (tl rs) - 1)) (last rs) @\n  replicate (2 ^ (length (tl rs) - 1)) (last rs) =\n  replicate (2 ^ (length rs - 1)) (last rs)\n\ngoal (1 subgoal):\n 1. \\<And>a x rs.\n       \\<lbrakk>\\<And>rs.\n                   \\<lbrakk>x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n                   \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                                     replicate (2 ^ (length rs - 1))\n(last rs);\n        a # x = butlast rs; 1 \\<le> length rs\\<rbrakk>\n       \\<Longrightarrow> input_sizes (deep_model'_l rs) =\n                         replicate (2 ^ (length rs - 1)) (last rs)", "finally"], ["proof (chain)\npicking this:\n  input_sizes (deep_model'_l rs) = replicate (2 ^ (length rs - 1)) (last rs)", "show ?case"], ["proof (prove)\nusing this:\n  input_sizes (deep_model'_l rs) = replicate (2 ^ (length rs - 1)) (last rs)\n\ngoal (1 subgoal):\n 1. input_sizes (deep_model'_l rs) =\n    replicate (2 ^ (length rs - 1)) (last rs)", "by auto"], ["proof (state)\nthis:\n  input_sizes (deep_model'_l rs) = replicate (2 ^ (length rs - 1)) (last rs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma input_sizes_deep_model:\nassumes \"length rs \\<ge> 2\"\nshows \"input_sizes (deep_model_l rs) = replicate (2^(length rs - 2)) (last rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. input_sizes (deep_model_l rs) =\n    replicate (2 ^ (length rs - 2)) (last rs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. input_sizes (deep_model_l rs) =\n    replicate (2 ^ (length rs - 2)) (last rs)", "have \"input_sizes (deep_model_l rs) = input_sizes (deep_model'_l (tl rs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. input_sizes (deep_model_l rs) = input_sizes (deep_model'_l (tl rs))", "by (metis One_nat_def Suc_1 assms hd_Cons_tl deep_model.elims input_sizes.simps(2) length_Cons\n    length_greater_0_conv lessI linorder_not_le list.size(3) not_numeral_le_zero nth_tl)"], ["proof (state)\nthis:\n  input_sizes (deep_model_l rs) = input_sizes (deep_model'_l (tl rs))\n\ngoal (1 subgoal):\n 1. input_sizes (deep_model_l rs) =\n    replicate (2 ^ (length rs - 2)) (last rs)", "also"], ["proof (state)\nthis:\n  input_sizes (deep_model_l rs) = input_sizes (deep_model'_l (tl rs))\n\ngoal (1 subgoal):\n 1. input_sizes (deep_model_l rs) =\n    replicate (2 ^ (length rs - 2)) (last rs)", "have \"... = replicate (2^(length rs - 2)) (last rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. input_sizes (deep_model'_l (tl rs)) =\n    replicate (2 ^ (length rs - 2)) (last rs)", "using input_sizes_deep_model'"], ["proof (prove)\nusing this:\n  1 \\<le> length ?rs \\<Longrightarrow>\n  input_sizes (deep_model'_l ?rs) =\n  replicate (2 ^ (length ?rs - 1)) (last ?rs)\n\ngoal (1 subgoal):\n 1. input_sizes (deep_model'_l (tl rs)) =\n    replicate (2 ^ (length rs - 2)) (last rs)", "by (metis (no_types, lifting) One_nat_def Suc_1 Suc_eq_plus1 assms diff_diff_left hd_Cons_tl\n    last_tl length_Cons length_tl linorder_not_le list.size(3) not_less_eq not_numeral_le_zero\n    numeral_le_one_iff semiring_norm(69))"], ["proof (state)\nthis:\n  input_sizes (deep_model'_l (tl rs)) =\n  replicate (2 ^ (length rs - 2)) (last rs)\n\ngoal (1 subgoal):\n 1. input_sizes (deep_model_l rs) =\n    replicate (2 ^ (length rs - 2)) (last rs)", "finally"], ["proof (chain)\npicking this:\n  input_sizes (deep_model_l rs) = replicate (2 ^ (length rs - 2)) (last rs)", "show ?thesis"], ["proof (prove)\nusing this:\n  input_sizes (deep_model_l rs) = replicate (2 ^ (length rs - 2)) (last rs)\n\ngoal (1 subgoal):\n 1. input_sizes (deep_model_l rs) =\n    replicate (2 ^ (length rs - 2)) (last rs)", "by auto"], ["proof (state)\nthis:\n  input_sizes (deep_model_l rs) = replicate (2 ^ (length rs - 2)) (last rs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma evaluate_net_Conv_id:\nassumes \"valid_net' m\"\nand \"input_sizes m = map dim_vec input\"\nand \"j<nr\"\nshows \"evaluate_net (Conv (id_matrix nr (output_size' m)) m) input $ j\n = (if j<output_size' m then evaluate_net m input $ j else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate_net (Conv (id_matrix nr (output_size' m)) m) input $ j =\n    (if j < output_size' m then evaluate_net m input $ j else 0)", "unfolding evaluate_net.simps output_size_correct[OF assms(1) assms(2)[symmetric]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (id_matrix nr (dim_vec (evaluate_net m input)) *\\<^sub>v\n     evaluate_net m input) $\n    j =\n    (if j < dim_vec (evaluate_net m input) then evaluate_net m input $ j\n     else 0)", "using mult_id_matrix[OF \\<open>j<nr\\<close>, of \"evaluate_net m input\", unfolded dim_vec_of_list]"], ["proof (prove)\nusing this:\n  (id_matrix nr (dim_vec (evaluate_net m input)) *\\<^sub>v\n   evaluate_net m input) $\n  j =\n  (if j < dim_vec (evaluate_net m input) then evaluate_net m input $ j\n   else 0)\n\ngoal (1 subgoal):\n 1. (id_matrix nr (dim_vec (evaluate_net m input)) *\\<^sub>v\n     evaluate_net m input) $\n    j =\n    (if j < dim_vec (evaluate_net m input) then evaluate_net m input $ j\n     else 0)", "by metis"], ["", "lemma tensors_from_net_Conv_id:\nassumes \"valid_net' m\"\nand \"i<nr\"\nshows \"tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i\n = (if i<output_size' m then tensors_from_net m $ i else tensor0 (input_sizes m))\"\n  (is \"?a $ i = ?b\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i =\n    (if i < output_size' m then tensors_from_net m $ i\n     else tensor0 (input_sizes m))", "proof (rule tensor_lookup_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. dims (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i) =\n    dims\n     (if i < output_size' m then tensors_from_net m $ i\n      else tensor0 (input_sizes m))\n 2. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i) is =\n       lookup\n        (if i < output_size' m then tensors_from_net m $ i\n         else tensor0 (input_sizes m))\n        is", "have \"Tensor.dims (?a $ i) = input_sizes m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dims (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i) =\n    input_sizes m", "by (metis assms(1) assms(2) dims_tensors_from_net\n    id_matrix_dim(1) id_matrix_dim(2) input_sizes.simps(2) output_size.simps(2)\n    output_size_correct_tensors remove_weights.simps(2) valid_net.intros(2) vec_setI)"], ["proof (state)\nthis:\n  dims (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i) =\n  input_sizes m\n\ngoal (2 subgoals):\n 1. dims (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i) =\n    dims\n     (if i < output_size' m then tensors_from_net m $ i\n      else tensor0 (input_sizes m))\n 2. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i) is =\n       lookup\n        (if i < output_size' m then tensors_from_net m $ i\n         else tensor0 (input_sizes m))\n        is", "moreover"], ["proof (state)\nthis:\n  dims (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i) =\n  input_sizes m\n\ngoal (2 subgoals):\n 1. dims (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i) =\n    dims\n     (if i < output_size' m then tensors_from_net m $ i\n      else tensor0 (input_sizes m))\n 2. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i) is =\n       lookup\n        (if i < output_size' m then tensors_from_net m $ i\n         else tensor0 (input_sizes m))\n        is", "have \"Tensor.dims (?b) = input_sizes m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dims\n     (if i < output_size' m then tensors_from_net m $ i\n      else tensor0 (input_sizes m)) =\n    input_sizes m", "using dims_tensors_from_net\n    output_size_correct_tensors[OF assms(1)] dims_tensor0"], ["proof (prove)\nusing this:\n  ?T \\<in> set\\<^sub>v (tensors_from_net ?m) \\<Longrightarrow>\n  dims ?T = input_sizes ?m\n  output_size' m = dim_vec (tensors_from_net m)\n  dims (tensor0 ?d) = ?d\n\ngoal (1 subgoal):\n 1. dims\n     (if i < output_size' m then tensors_from_net m $ i\n      else tensor0 (input_sizes m)) =\n    input_sizes m", "by (simp add: vec_setI)"], ["proof (state)\nthis:\n  dims\n   (if i < output_size' m then tensors_from_net m $ i\n    else tensor0 (input_sizes m)) =\n  input_sizes m\n\ngoal (2 subgoals):\n 1. dims (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i) =\n    dims\n     (if i < output_size' m then tensors_from_net m $ i\n      else tensor0 (input_sizes m))\n 2. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i) is =\n       lookup\n        (if i < output_size' m then tensors_from_net m $ i\n         else tensor0 (input_sizes m))\n        is", "ultimately"], ["proof (chain)\npicking this:\n  dims (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i) =\n  input_sizes m\n  dims\n   (if i < output_size' m then tensors_from_net m $ i\n    else tensor0 (input_sizes m)) =\n  input_sizes m", "show \"Tensor.dims (?a $ i) = Tensor.dims (?b)\""], ["proof (prove)\nusing this:\n  dims (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i) =\n  input_sizes m\n  dims\n   (if i < output_size' m then tensors_from_net m $ i\n    else tensor0 (input_sizes m)) =\n  input_sizes m\n\ngoal (1 subgoal):\n 1. dims (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i) =\n    dims\n     (if i < output_size' m then tensors_from_net m $ i\n      else tensor0 (input_sizes m))", "by auto"], ["proof (state)\nthis:\n  dims (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i) =\n  dims\n   (if i < output_size' m then tensors_from_net m $ i\n    else tensor0 (input_sizes m))\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i) is =\n       lookup\n        (if i < output_size' m then tensors_from_net m $ i\n         else tensor0 (input_sizes m))\n        is", "define Convm where \"Convm = Conv (id_matrix nr (output_size' m)) m\""], ["proof (state)\nthis:\n  Convm = Conv (id_matrix nr (output_size' m)) m\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i) is =\n       lookup\n        (if i < output_size' m then tensors_from_net m $ i\n         else tensor0 (input_sizes m))\n        is", "fix \"is\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i) is =\n       lookup\n        (if i < output_size' m then tensors_from_net m $ i\n         else tensor0 (input_sizes m))\n        is", "assume \"is \\<lhd> Tensor.dims (?a$i)\""], ["proof (state)\nthis:\n  is \\<lhd>\n  dims (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i)\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i) is =\n       lookup\n        (if i < output_size' m then tensors_from_net m $ i\n         else tensor0 (input_sizes m))\n        is", "then"], ["proof (chain)\npicking this:\n  is \\<lhd>\n  dims (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i)", "have \"is \\<lhd> input_sizes m\""], ["proof (prove)\nusing this:\n  is \\<lhd>\n  dims (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i)\n\ngoal (1 subgoal):\n 1. is \\<lhd> input_sizes m", "using \\<open>Tensor.dims (?a$i) = input_sizes m\\<close>"], ["proof (prove)\nusing this:\n  is \\<lhd>\n  dims (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i)\n  dims (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i) =\n  input_sizes m\n\ngoal (1 subgoal):\n 1. is \\<lhd> input_sizes m", "by auto"], ["proof (state)\nthis:\n  is \\<lhd> input_sizes m\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i) is =\n       lookup\n        (if i < output_size' m then tensors_from_net m $ i\n         else tensor0 (input_sizes m))\n        is", "have \"valid_net' Convm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_net' Convm", "by (simp add: assms id_matrix_dim valid_net.intros(2) Convm_def)"], ["proof (state)\nthis:\n  valid_net' Convm\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i) is =\n       lookup\n        (if i < output_size' m then tensors_from_net m $ i\n         else tensor0 (input_sizes m))\n        is", "have \"base_input m is = base_input Convm is\""], ["proof (prove)\ngoal (1 subgoal):\n 1. base_input m is = base_input Convm is", "by (simp add: Convm_def base_input_def)"], ["proof (state)\nthis:\n  base_input m is = base_input Convm is\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i) is =\n       lookup\n        (if i < output_size' m then tensors_from_net m $ i\n         else tensor0 (input_sizes m))\n        is", "have \"i < output_size' Convm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < output_size' Convm", "unfolding Convm_def remove_weights.simps output_size.simps\n    id_matrix_dim"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < nr", "using assms"], ["proof (prove)\nusing this:\n  valid_net' m\n  i < nr\n\ngoal (1 subgoal):\n 1. i < nr", "by metis"], ["proof (state)\nthis:\n  i < output_size' Convm\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i) is =\n       lookup\n        (if i < output_size' m then tensors_from_net m $ i\n         else tensor0 (input_sizes m))\n        is", "have \"is \\<lhd> input_sizes (Conv (id_matrix nr (output_size' m)) m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is \\<lhd> input_sizes (Conv (id_matrix nr (output_size' m)) m)", "by (metis \\<open>is \\<lhd> input_sizes m\\<close> input_sizes.simps(2))"], ["proof (state)\nthis:\n  is \\<lhd> input_sizes (Conv (id_matrix nr (output_size' m)) m)\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i) is =\n       lookup\n        (if i < output_size' m then tensors_from_net m $ i\n         else tensor0 (input_sizes m))\n        is", "then"], ["proof (chain)\npicking this:\n  is \\<lhd> input_sizes (Conv (id_matrix nr (output_size' m)) m)", "have f1: \"lookup (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i) is = evaluate_net (Conv (id_matrix nr (output_size' m)) m) (base_input (Conv (id_matrix nr (output_size' m)) m) is) $ i\""], ["proof (prove)\nusing this:\n  is \\<lhd> input_sizes (Conv (id_matrix nr (output_size' m)) m)\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i)\n     is =\n    evaluate_net (Conv (id_matrix nr (output_size' m)) m)\n     (base_input (Conv (id_matrix nr (output_size' m)) m) is) $\n    i", "using Convm_def \\<open>i < output_size' Convm\\<close> \\<open>valid_net' Convm\\<close> lookup_tensors_from_net"], ["proof (prove)\nusing this:\n  is \\<lhd> input_sizes (Conv (id_matrix nr (output_size' m)) m)\n  Convm = Conv (id_matrix nr (output_size' m)) m\n  i < output_size' Convm\n  valid_net' Convm\n  \\<lbrakk>valid_net' ?m; ?is \\<lhd> input_sizes ?m;\n   ?j < output_size' ?m\\<rbrakk>\n  \\<Longrightarrow> lookup (tensors_from_net ?m $ ?j) ?is =\n                    evaluate_net ?m (base_input ?m ?is) $ ?j\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i)\n     is =\n    evaluate_net (Conv (id_matrix nr (output_size' m)) m)\n     (base_input (Conv (id_matrix nr (output_size' m)) m) is) $\n    i", "by blast"], ["proof (state)\nthis:\n  lookup (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i)\n   is =\n  evaluate_net (Conv (id_matrix nr (output_size' m)) m)\n   (base_input (Conv (id_matrix nr (output_size' m)) m) is) $\n  i\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i) is =\n       lookup\n        (if i < output_size' m then tensors_from_net m $ i\n         else tensor0 (input_sizes m))\n        is", "have \"lookup (tensor0 (input_sizes m)) is = (0::real)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (tensor0 (input_sizes m)) is = 0", "by (meson \\<open>is \\<lhd> input_sizes m\\<close> lookup_tensor0)"], ["proof (state)\nthis:\n  lookup (tensor0 (input_sizes m)) is = 0\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i) is =\n       lookup\n        (if i < output_size' m then tensors_from_net m $ i\n         else tensor0 (input_sizes m))\n        is", "then"], ["proof (chain)\npicking this:\n  lookup (tensor0 (input_sizes m)) is = 0", "show \"Tensor.lookup (?a $ i) is = Tensor.lookup ?b is\""], ["proof (prove)\nusing this:\n  lookup (tensor0 (input_sizes m)) is = 0\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i)\n     is =\n    lookup\n     (if i < output_size' m then tensors_from_net m $ i\n      else tensor0 (input_sizes m))\n     is", "using Convm_def \\<open>base_input m is = base_input Convm is\\<close> \\<open>is \\<lhd> input_sizes m\\<close> assms(1) assms(2)\n   base_input_length evaluate_net_Conv_id f1 lookup_tensors_from_net"], ["proof (prove)\nusing this:\n  lookup (tensor0 (input_sizes m)) is = 0\n  Convm = Conv (id_matrix nr (output_size' m)) m\n  base_input m is = base_input Convm is\n  is \\<lhd> input_sizes m\n  valid_net' m\n  i < nr\n  ?is \\<lhd> input_sizes ?m \\<Longrightarrow>\n  input_sizes ?m = map dim_vec (base_input ?m ?is)\n  \\<lbrakk>valid_net' ?m; input_sizes ?m = map dim_vec ?input;\n   ?j < ?nr\\<rbrakk>\n  \\<Longrightarrow> evaluate_net (Conv (id_matrix ?nr (output_size' ?m)) ?m)\n                     ?input $\n                    ?j =\n                    (if ?j < output_size' ?m\n                     then evaluate_net ?m ?input $ ?j else 0)\n  lookup (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i)\n   is =\n  evaluate_net (Conv (id_matrix nr (output_size' m)) m)\n   (base_input (Conv (id_matrix nr (output_size' m)) m) is) $\n  i\n  \\<lbrakk>valid_net' ?m; ?is \\<lhd> input_sizes ?m;\n   ?j < output_size' ?m\\<rbrakk>\n  \\<Longrightarrow> lookup (tensors_from_net ?m $ ?j) ?is =\n                    evaluate_net ?m (base_input ?m ?is) $ ?j\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i)\n     is =\n    lookup\n     (if i < output_size' m then tensors_from_net m $ i\n      else tensor0 (input_sizes m))\n     is", "by auto"], ["proof (state)\nthis:\n  lookup (tensors_from_net (Conv (id_matrix nr (output_size' m)) m) $ i)\n   is =\n  lookup\n   (if i < output_size' m then tensors_from_net m $ i\n    else tensor0 (input_sizes m))\n   is\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma evaluate_net_Conv_copy_first:\nassumes \"valid_net' m\"\nand \"input_sizes m = map dim_vec input\"\nand \"j<nr\"\nand \"output_size' m > 0\"\nshows \"evaluate_net (Conv (copy_first_matrix nr (output_size' m)) m) input $ j\n = evaluate_net m input $ 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate_net (Conv (copy_first_matrix nr (output_size' m)) m) input $\n    j =\n    evaluate_net m input $ 0", "unfolding evaluate_net.simps output_size_correct[OF assms(1) assms(2)[symmetric]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (copy_first_matrix nr (dim_vec (evaluate_net m input)) *\\<^sub>v\n     evaluate_net m input) $\n    j =\n    evaluate_net m input $ 0", "using mult_copy_first_matrix[OF \\<open>j<nr\\<close>, of \"evaluate_net m input\", unfolded dim_vec_of_list]\n  assms(3) copy_first_matrix_dim(1)"], ["proof (prove)\nusing this:\n  0 < dim_vec (evaluate_net m input) \\<Longrightarrow>\n  (copy_first_matrix nr (dim_vec (evaluate_net m input)) *\\<^sub>v\n   evaluate_net m input) $\n  j =\n  evaluate_net m input $ 0\n  j < nr\n  dim_row (copy_first_matrix ?nr ?nc) = ?nr\n\ngoal (1 subgoal):\n 1. (copy_first_matrix nr (dim_vec (evaluate_net m input)) *\\<^sub>v\n     evaluate_net m input) $\n    j =\n    evaluate_net m input $ 0", "by (metis \\<open>output_size' m = dim_vec (evaluate_net m input)\\<close> assms(4))"], ["", "lemma tensors_from_net_Conv_copy_first:\nassumes \"valid_net' m\"\nand \"i<nr\"\nand \"output_size' m > 0\"\nshows \"tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $ i = tensors_from_net m $ 0\"\n  (is \"?a $ i = ?b\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $ i =\n    tensors_from_net m $ 0", "proof (rule tensor_lookup_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. dims\n     (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n      i) =\n    dims (tensors_from_net m $ 0)\n 2. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n         i)\n        is =\n       lookup (tensors_from_net m $ 0) is", "have \"Tensor.dims (?a$i) = input_sizes m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dims\n     (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n      i) =\n    input_sizes m", "by (metis assms(1) assms(2) copy_first_matrix_dim(1) copy_first_matrix_dim(2) dims_tensors_from_net\n    input_sizes.simps(2) output_size.simps(2) output_size_correct_tensors remove_weights.simps(2)\n    valid_net.intros(2) vec_setI)"], ["proof (state)\nthis:\n  dims\n   (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $ i) =\n  input_sizes m\n\ngoal (2 subgoals):\n 1. dims\n     (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n      i) =\n    dims (tensors_from_net m $ 0)\n 2. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n         i)\n        is =\n       lookup (tensors_from_net m $ 0) is", "moreover"], ["proof (state)\nthis:\n  dims\n   (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $ i) =\n  input_sizes m\n\ngoal (2 subgoals):\n 1. dims\n     (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n      i) =\n    dims (tensors_from_net m $ 0)\n 2. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n         i)\n        is =\n       lookup (tensors_from_net m $ 0) is", "have \"Tensor.dims (?b) = input_sizes m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dims (tensors_from_net m $ 0) = input_sizes m", "using dims_tensors_from_net\n    output_size_correct_tensors[OF assms(1)]"], ["proof (prove)\nusing this:\n  ?T \\<in> set\\<^sub>v (tensors_from_net ?m) \\<Longrightarrow>\n  dims ?T = input_sizes ?m\n  output_size' m = dim_vec (tensors_from_net m)\n\ngoal (1 subgoal):\n 1. dims (tensors_from_net m $ 0) = input_sizes m", "using assms(3)"], ["proof (prove)\nusing this:\n  ?T \\<in> set\\<^sub>v (tensors_from_net ?m) \\<Longrightarrow>\n  dims ?T = input_sizes ?m\n  output_size' m = dim_vec (tensors_from_net m)\n  0 < output_size' m\n\ngoal (1 subgoal):\n 1. dims (tensors_from_net m $ 0) = input_sizes m", "by (simp add: vec_setI)"], ["proof (state)\nthis:\n  dims (tensors_from_net m $ 0) = input_sizes m\n\ngoal (2 subgoals):\n 1. dims\n     (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n      i) =\n    dims (tensors_from_net m $ 0)\n 2. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n         i)\n        is =\n       lookup (tensors_from_net m $ 0) is", "ultimately"], ["proof (chain)\npicking this:\n  dims\n   (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $ i) =\n  input_sizes m\n  dims (tensors_from_net m $ 0) = input_sizes m", "show \"Tensor.dims (?a$i) = Tensor.dims (?b)\""], ["proof (prove)\nusing this:\n  dims\n   (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $ i) =\n  input_sizes m\n  dims (tensors_from_net m $ 0) = input_sizes m\n\ngoal (1 subgoal):\n 1. dims\n     (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n      i) =\n    dims (tensors_from_net m $ 0)", "by auto"], ["proof (state)\nthis:\n  dims\n   (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $ i) =\n  dims (tensors_from_net m $ 0)\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n         i)\n        is =\n       lookup (tensors_from_net m $ 0) is", "define Convm where \"Convm = Conv (copy_first_matrix nr (output_size' m)) m\""], ["proof (state)\nthis:\n  Convm = Conv (copy_first_matrix nr (output_size' m)) m\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n         i)\n        is =\n       lookup (tensors_from_net m $ 0) is", "fix \"is\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n         i)\n        is =\n       lookup (tensors_from_net m $ 0) is", "assume \"is \\<lhd> Tensor.dims (?a$i)\""], ["proof (state)\nthis:\n  is \\<lhd>\n  dims\n   (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $ i)\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n         i)\n        is =\n       lookup (tensors_from_net m $ 0) is", "then"], ["proof (chain)\npicking this:\n  is \\<lhd>\n  dims\n   (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $ i)", "have \"is \\<lhd> input_sizes m\""], ["proof (prove)\nusing this:\n  is \\<lhd>\n  dims\n   (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $ i)\n\ngoal (1 subgoal):\n 1. is \\<lhd> input_sizes m", "using \\<open>Tensor.dims (?a$i) = input_sizes m\\<close>"], ["proof (prove)\nusing this:\n  is \\<lhd>\n  dims\n   (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $ i)\n  dims\n   (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $ i) =\n  input_sizes m\n\ngoal (1 subgoal):\n 1. is \\<lhd> input_sizes m", "by auto"], ["proof (state)\nthis:\n  is \\<lhd> input_sizes m\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n         i)\n        is =\n       lookup (tensors_from_net m $ 0) is", "have \"valid_net' Convm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_net' Convm", "by (simp add: assms copy_first_matrix_dim valid_net.intros(2) Convm_def)"], ["proof (state)\nthis:\n  valid_net' Convm\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n         i)\n        is =\n       lookup (tensors_from_net m $ 0) is", "have \"base_input m is = base_input Convm is\""], ["proof (prove)\ngoal (1 subgoal):\n 1. base_input m is = base_input Convm is", "by (simp add: Convm_def base_input_def)"], ["proof (state)\nthis:\n  base_input m is = base_input Convm is\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n         i)\n        is =\n       lookup (tensors_from_net m $ 0) is", "have \"i < output_size' Convm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < output_size' Convm", "unfolding Convm_def remove_weights.simps output_size.simps\n    copy_first_matrix_dim"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < nr", "using assms"], ["proof (prove)\nusing this:\n  valid_net' m\n  i < nr\n  0 < output_size' m\n\ngoal (1 subgoal):\n 1. i < nr", "by metis"], ["proof (state)\nthis:\n  i < output_size' Convm\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $\n         i)\n        is =\n       lookup (tensors_from_net m $ 0) is", "show \"Tensor.lookup (?a $ i) is = Tensor.lookup ?b is\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup\n     (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $ i)\n     is =\n    lookup (tensors_from_net m $ 0) is", "by (metis Convm_def \\<open>base_input m is = base_input Convm is\\<close> \\<open>i < output_size' Convm\\<close>\n    \\<open>is \\<lhd> input_sizes m\\<close> \\<open>valid_net' Convm\\<close> assms(1) assms(2) assms(3) base_input_length\n    evaluate_net_Conv_copy_first input_sizes.simps(2) lookup_tensors_from_net)"], ["proof (state)\nthis:\n  lookup\n   (tensors_from_net (Conv (copy_first_matrix nr (output_size' m)) m) $ i)\n   is =\n  lookup (tensors_from_net m $ 0) is\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma evaluate_net_Conv_all1:\nassumes \"valid_net' m\"\nand \"input_sizes m = map dim_vec input\"\nand \"i<nr\"\nshows \"evaluate_net (Conv (all1_matrix nr (output_size' m)) m) input $ i\n = Groups_List.sum_list (list_of_vec (evaluate_net m input))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate_net (Conv (all1_matrix nr (output_size' m)) m) input $ i =\n    sum_list (list_of_vec (evaluate_net m input))", "unfolding evaluate_net.simps output_size_correct[OF assms(1) assms(2)[symmetric]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (all1_matrix nr (dim_vec (evaluate_net m input)) *\\<^sub>v\n     evaluate_net m input) $\n    i =\n    sum_list (list_of_vec (evaluate_net m input))", "using mult_all1_matrix[OF \\<open>i<nr\\<close>, of \"evaluate_net m input\", unfolded dim_vec_of_list]\n  assms(3) all1_matrix_dim(1)"], ["proof (prove)\nusing this:\n  (all1_matrix nr (dim_vec (evaluate_net m input)) *\\<^sub>v\n   evaluate_net m input) $\n  i =\n  sum_list (list_of_vec (evaluate_net m input))\n  i < nr\n  dim_row (all1_matrix ?nr ?nc) = ?nr\n\ngoal (1 subgoal):\n 1. (all1_matrix nr (dim_vec (evaluate_net m input)) *\\<^sub>v\n     evaluate_net m input) $\n    i =\n    sum_list (list_of_vec (evaluate_net m input))", "by metis"], ["", "lemma tensors_from_net_Conv_all1:\nassumes \"valid_net' m\"\nand \"i<nr\"\nshows \"tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i\n = listsum (input_sizes m) (list_of_vec (tensors_from_net m))\"\n  (is \"?a $ i = ?b\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i =\n    listsum (input_sizes m) (list_of_vec (tensors_from_net m))", "proof (rule tensor_lookup_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. dims (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i) =\n    dims (listsum (input_sizes m) (list_of_vec (tensors_from_net m)))\n 2. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n        is =\n       lookup (listsum (input_sizes m) (list_of_vec (tensors_from_net m)))\n        is", "have \"i < dim_vec ?a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < dim_vec\n         (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m))", "by (metis assms all1_matrix_dim output_size.simps(2)\n    output_size_correct_tensors remove_weights.simps(2) valid_net.intros(2))"], ["proof (state)\nthis:\n  i < dim_vec (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m))\n\ngoal (2 subgoals):\n 1. dims (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i) =\n    dims (listsum (input_sizes m) (list_of_vec (tensors_from_net m)))\n 2. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n        is =\n       lookup (listsum (input_sizes m) (list_of_vec (tensors_from_net m)))\n        is", "then"], ["proof (chain)\npicking this:\n  i < dim_vec (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m))", "show \"Tensor.dims (?a $ i) = Tensor.dims (?b)\""], ["proof (prove)\nusing this:\n  i < dim_vec (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m))\n\ngoal (1 subgoal):\n 1. dims (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i) =\n    dims (listsum (input_sizes m) (list_of_vec (tensors_from_net m)))", "using dims_tensors_from_net input_sizes.simps(2) listsum_dims"], ["proof (prove)\nusing this:\n  i < dim_vec (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m))\n  ?T \\<in> set\\<^sub>v (tensors_from_net ?m) \\<Longrightarrow>\n  dims ?T = input_sizes ?m\n  input_sizes (Conv ?A ?m) = input_sizes ?m\n  (\\<And>A.\n      A \\<in> set ?As \\<Longrightarrow> dims A = ?ds) \\<Longrightarrow>\n  dims (listsum ?ds ?As) = ?ds\n\ngoal (1 subgoal):\n 1. dims (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i) =\n    dims (listsum (input_sizes m) (list_of_vec (tensors_from_net m)))", "by (metis index_vec_of_list in_set_conv_nth length_list_of_vec vec_list vec_setI)"], ["proof (state)\nthis:\n  dims (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i) =\n  dims (listsum (input_sizes m) (list_of_vec (tensors_from_net m)))\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n        is =\n       lookup (listsum (input_sizes m) (list_of_vec (tensors_from_net m)))\n        is", "define Convm where \"Convm = Conv (all1_matrix nr (output_size' m)) m\""], ["proof (state)\nthis:\n  Convm = Conv (all1_matrix nr (output_size' m)) m\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n        is =\n       lookup (listsum (input_sizes m) (list_of_vec (tensors_from_net m)))\n        is", "fix \"is\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n        is =\n       lookup (listsum (input_sizes m) (list_of_vec (tensors_from_net m)))\n        is", "assume \"is \\<lhd> Tensor.dims (?a $ i)\""], ["proof (state)\nthis:\n  is \\<lhd>\n  dims (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n        is =\n       lookup (listsum (input_sizes m) (list_of_vec (tensors_from_net m)))\n        is", "then"], ["proof (chain)\npicking this:\n  is \\<lhd>\n  dims (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)", "have \"is \\<lhd> input_sizes m\""], ["proof (prove)\nusing this:\n  is \\<lhd>\n  dims (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n\ngoal (1 subgoal):\n 1. is \\<lhd> input_sizes m", "using \\<open>i < dim_vec ?a\\<close> dims_tensors_from_net input_sizes.simps(2)"], ["proof (prove)\nusing this:\n  is \\<lhd>\n  dims (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n  i < dim_vec (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m))\n  ?T \\<in> set\\<^sub>v (tensors_from_net ?m) \\<Longrightarrow>\n  dims ?T = input_sizes ?m\n  input_sizes (Conv ?A ?m) = input_sizes ?m\n\ngoal (1 subgoal):\n 1. is \\<lhd> input_sizes m", "by (metis vec_setI)"], ["proof (state)\nthis:\n  is \\<lhd> input_sizes m\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n        is =\n       lookup (listsum (input_sizes m) (list_of_vec (tensors_from_net m)))\n        is", "then"], ["proof (chain)\npicking this:\n  is \\<lhd> input_sizes m", "have \"is \\<lhd> input_sizes Convm\""], ["proof (prove)\nusing this:\n  is \\<lhd> input_sizes m\n\ngoal (1 subgoal):\n 1. is \\<lhd> input_sizes Convm", "by (simp add: Convm_def)"], ["proof (state)\nthis:\n  is \\<lhd> input_sizes Convm\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n        is =\n       lookup (listsum (input_sizes m) (list_of_vec (tensors_from_net m)))\n        is", "have \"valid_net' Convm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_net' Convm", "by (simp add: Convm_def assms all1_matrix_dim valid_net.intros(2))"], ["proof (state)\nthis:\n  valid_net' Convm\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n        is =\n       lookup (listsum (input_sizes m) (list_of_vec (tensors_from_net m)))\n        is", "have \"i< output_size' Convm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < output_size' Convm", "using Convm_def \\<open>i < dim_vec ?a\\<close> \\<open>valid_net' Convm\\<close>\n    output_size_correct_tensors"], ["proof (prove)\nusing this:\n  Convm = Conv (all1_matrix nr (output_size' m)) m\n  i < dim_vec (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m))\n  valid_net' Convm\n  valid_net' ?m \\<Longrightarrow>\n  output_size' ?m = dim_vec (tensors_from_net ?m)\n\ngoal (1 subgoal):\n 1. i < output_size' Convm", "by presburger"], ["proof (state)\nthis:\n  i < output_size' Convm\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n        is =\n       lookup (listsum (input_sizes m) (list_of_vec (tensors_from_net m)))\n        is", "have \"base_input Convm is = base_input m is\""], ["proof (prove)\ngoal (1 subgoal):\n 1. base_input Convm is = base_input m is", "unfolding base_input_def Convm_def input_sizes.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. map2 unit\\<^sub>v (input_sizes m) is =\n    map2 unit\\<^sub>v (input_sizes m) is", "by metis"], ["proof (state)\nthis:\n  base_input Convm is = base_input m is\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n        is =\n       lookup (listsum (input_sizes m) (list_of_vec (tensors_from_net m)))\n        is", "have \"Tensor.lookup (?a $ i) is = evaluate_net Convm (base_input Convm is) $ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n     is =\n    evaluate_net Convm (base_input Convm is) $ i", "using lookup_tensors_from_net[OF \\<open>valid_net' Convm\\<close> \\<open>is \\<lhd> input_sizes Convm\\<close> \\<open>i< output_size' Convm\\<close>]"], ["proof (prove)\nusing this:\n  lookup (tensors_from_net Convm $ i) is =\n  evaluate_net Convm (base_input Convm is) $ i\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n     is =\n    evaluate_net Convm (base_input Convm is) $ i", "by (metis Convm_def )"], ["proof (state)\nthis:\n  lookup (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n   is =\n  evaluate_net Convm (base_input Convm is) $ i\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n        is =\n       lookup (listsum (input_sizes m) (list_of_vec (tensors_from_net m)))\n        is", "also"], ["proof (state)\nthis:\n  lookup (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n   is =\n  evaluate_net Convm (base_input Convm is) $ i\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n        is =\n       lookup (listsum (input_sizes m) (list_of_vec (tensors_from_net m)))\n        is", "have \"... = monoid_add_class.sum_list (list_of_vec (evaluate_net m (base_input Convm is)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate_net Convm (base_input Convm is) $ i =\n    sum_list (list_of_vec (evaluate_net m (base_input Convm is)))", "using evaluate_net_Conv_all1 Convm_def \\<open>is \\<lhd> input_sizes Convm\\<close> assms base_input_length \\<open>i < nr\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>valid_net' ?m; input_sizes ?m = map dim_vec ?input;\n   ?i < ?nr\\<rbrakk>\n  \\<Longrightarrow> evaluate_net\n                     (Conv (all1_matrix ?nr (output_size' ?m)) ?m) ?input $\n                    ?i =\n                    sum_list (list_of_vec (evaluate_net ?m ?input))\n  Convm = Conv (all1_matrix nr (output_size' m)) m\n  is \\<lhd> input_sizes Convm\n  valid_net' m\n  i < nr\n  ?is \\<lhd> input_sizes ?m \\<Longrightarrow>\n  input_sizes ?m = map dim_vec (base_input ?m ?is)\n  i < nr\n\ngoal (1 subgoal):\n 1. evaluate_net Convm (base_input Convm is) $ i =\n    sum_list (list_of_vec (evaluate_net m (base_input Convm is)))", "by simp"], ["proof (state)\nthis:\n  evaluate_net Convm (base_input Convm is) $ i =\n  sum_list (list_of_vec (evaluate_net m (base_input Convm is)))\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n        is =\n       lookup (listsum (input_sizes m) (list_of_vec (tensors_from_net m)))\n        is", "also"], ["proof (state)\nthis:\n  evaluate_net Convm (base_input Convm is) $ i =\n  sum_list (list_of_vec (evaluate_net m (base_input Convm is)))\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n        is =\n       lookup (listsum (input_sizes m) (list_of_vec (tensors_from_net m)))\n        is", "have \"... = monoid_add_class.sum_list (list_of_vec (map_vec (\\<lambda>A.  lookup A is)(tensors_from_net m)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (list_of_vec (evaluate_net m (base_input Convm is))) =\n    sum_list\n     (list_of_vec (map_vec (\\<lambda>A. lookup A is) (tensors_from_net m)))", "unfolding \\<open>base_input Convm is = base_input m is\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (list_of_vec (evaluate_net m (base_input m is))) =\n    sum_list\n     (list_of_vec (map_vec (\\<lambda>A. lookup A is) (tensors_from_net m)))", "using lookup_tensors_from_net[OF \\<open>valid_net' m\\<close> \\<open>is \\<lhd> input_sizes m\\<close>]\n     base_input_length[OF \\<open>is \\<lhd> input_sizes m\\<close>] output_size_correct[OF assms(1)]  output_size_correct_tensors[OF assms(1)]\n    eq_vecI[of \"evaluate_net m (base_input m is)\" \"map_vec (\\<lambda>A. lookup A is) (tensors_from_net m)\"] index_map_vec(1) index_map_vec(2)"], ["proof (prove)\nusing this:\n  ?j < output_size' m \\<Longrightarrow>\n  lookup (tensors_from_net m $ ?j) is =\n  evaluate_net m (base_input m is) $ ?j\n  input_sizes m = map dim_vec (base_input m is)\n  map dim_vec ?inputs = input_sizes m \\<Longrightarrow>\n  output_size' m = dim_vec (evaluate_net m ?inputs)\n  output_size' m = dim_vec (tensors_from_net m)\n  \\<lbrakk>\\<And>i.\n              i < dim_vec\n                   (evaluate_net m (base_input m is)) \\<Longrightarrow>\n              map_vec (\\<lambda>A. lookup A is) (tensors_from_net m) $ i =\n              evaluate_net m (base_input m is) $ i;\n   dim_vec (map_vec (\\<lambda>A. lookup A is) (tensors_from_net m)) =\n   dim_vec (evaluate_net m (base_input m is))\\<rbrakk>\n  \\<Longrightarrow> map_vec (\\<lambda>A. lookup A is) (tensors_from_net m) =\n                    evaluate_net m (base_input m is)\n  ?i < dim_vec ?v \\<Longrightarrow> map_vec ?f ?v $ ?i = ?f (?v $ ?i)\n  dim_vec (map_vec ?f ?v) = dim_vec ?v\n\ngoal (1 subgoal):\n 1. sum_list (list_of_vec (evaluate_net m (base_input m is))) =\n    sum_list\n     (list_of_vec (map_vec (\\<lambda>A. lookup A is) (tensors_from_net m)))", "by force"], ["proof (state)\nthis:\n  sum_list (list_of_vec (evaluate_net m (base_input Convm is))) =\n  sum_list\n   (list_of_vec (map_vec (\\<lambda>A. lookup A is) (tensors_from_net m)))\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n        is =\n       lookup (listsum (input_sizes m) (list_of_vec (tensors_from_net m)))\n        is", "also"], ["proof (state)\nthis:\n  sum_list (list_of_vec (evaluate_net m (base_input Convm is))) =\n  sum_list\n   (list_of_vec (map_vec (\\<lambda>A. lookup A is) (tensors_from_net m)))\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n        is =\n       lookup (listsum (input_sizes m) (list_of_vec (tensors_from_net m)))\n        is", "have \"... = monoid_add_class.sum_list (map (\\<lambda>A.  lookup A is) (list_of_vec (tensors_from_net m)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list\n     (list_of_vec\n       (map_vec (\\<lambda>A. lookup A is) (tensors_from_net m))) =\n    (\\<Sum>A\\<leftarrow>list_of_vec (tensors_from_net m). lookup A is)", "using eq_vecI[of \"vec_of_list (list_of_vec (map_vec (\\<lambda>A.  lookup A is)(tensors_from_net m)))\"\n    \"vec_of_list (map (\\<lambda>A.  lookup A is) (list_of_vec (tensors_from_net m)))\"]  dim_vec_of_list\n    nth_list_of_vec length_map list_vec nth_map  index_map_vec(1) index_map_vec(2) vec_list"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i.\n              i < dim_vec\n                   (vec_of_list\n                     (list_of_vec\n                       (map_vec (\\<lambda>A. lookup A is)\n                         (tensors_from_net m)))) \\<Longrightarrow>\n              vec_of_list\n               (map (\\<lambda>A. lookup A is)\n                 (list_of_vec (tensors_from_net m))) $\n              i =\n              vec_of_list\n               (list_of_vec\n                 (map_vec (\\<lambda>A. lookup A is) (tensors_from_net m))) $\n              i;\n   dim_vec\n    (vec_of_list\n      (map (\\<lambda>A. lookup A is) (list_of_vec (tensors_from_net m)))) =\n   dim_vec\n    (vec_of_list\n      (list_of_vec\n        (map_vec (\\<lambda>A. lookup A is) (tensors_from_net m))))\\<rbrakk>\n  \\<Longrightarrow> vec_of_list\n                     (map (\\<lambda>A. lookup A is)\n                       (list_of_vec (tensors_from_net m))) =\n                    vec_of_list\n                     (list_of_vec\n                       (map_vec (\\<lambda>A. lookup A is)\n                         (tensors_from_net m)))\n  dim_vec (vec_of_list ?as) = length ?as\n  ?i < dim_vec ?v \\<Longrightarrow> list_of_vec ?v ! ?i = ?v $ ?i\n  length (map ?f ?xs) = length ?xs\n  list_of_vec (vec_of_list ?xs) = ?xs\n  ?n < length ?xs \\<Longrightarrow> map ?f ?xs ! ?n = ?f (?xs ! ?n)\n  ?i < dim_vec ?v \\<Longrightarrow> map_vec ?f ?v $ ?i = ?f (?v $ ?i)\n  dim_vec (map_vec ?f ?v) = dim_vec ?v\n  vec_of_list (list_of_vec ?v) = ?v\n\ngoal (1 subgoal):\n 1. sum_list\n     (list_of_vec\n       (map_vec (\\<lambda>A. lookup A is) (tensors_from_net m))) =\n    (\\<Sum>A\\<leftarrow>list_of_vec (tensors_from_net m). lookup A is)", "by (metis (no_types, lifting))"], ["proof (state)\nthis:\n  sum_list\n   (list_of_vec (map_vec (\\<lambda>A. lookup A is) (tensors_from_net m))) =\n  (\\<Sum>A\\<leftarrow>list_of_vec (tensors_from_net m). lookup A is)\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n        is =\n       lookup (listsum (input_sizes m) (list_of_vec (tensors_from_net m)))\n        is", "also"], ["proof (state)\nthis:\n  sum_list\n   (list_of_vec (map_vec (\\<lambda>A. lookup A is) (tensors_from_net m))) =\n  (\\<Sum>A\\<leftarrow>list_of_vec (tensors_from_net m). lookup A is)\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n        is =\n       lookup (listsum (input_sizes m) (list_of_vec (tensors_from_net m)))\n        is", "have \"... = Tensor.lookup ?b is\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>A\\<leftarrow>list_of_vec (tensors_from_net m). lookup A is) =\n    lookup (listsum (input_sizes m) (list_of_vec (tensors_from_net m))) is", "using dims_tensors_from_net set_list_of_vec"], ["proof (prove)\nusing this:\n  ?T \\<in> set\\<^sub>v (tensors_from_net ?m) \\<Longrightarrow>\n  dims ?T = input_sizes ?m\n  set (list_of_vec ?v) = set\\<^sub>v ?v\n\ngoal (1 subgoal):\n 1. (\\<Sum>A\\<leftarrow>list_of_vec (tensors_from_net m). lookup A is) =\n    lookup (listsum (input_sizes m) (list_of_vec (tensors_from_net m))) is", "using lookup_listsum[OF \\<open>is \\<lhd> input_sizes m\\<close>, of \"list_of_vec (tensors_from_net m)\"]"], ["proof (prove)\nusing this:\n  ?T \\<in> set\\<^sub>v (tensors_from_net ?m) \\<Longrightarrow>\n  dims ?T = input_sizes ?m\n  set (list_of_vec ?v) = set\\<^sub>v ?v\n  (\\<And>A.\n      A \\<in> set (list_of_vec (tensors_from_net m)) \\<Longrightarrow>\n      dims A = input_sizes m) \\<Longrightarrow>\n  lookup (listsum (input_sizes m) (list_of_vec (tensors_from_net m))) is =\n  (\\<Sum>A\\<leftarrow>list_of_vec (tensors_from_net m). lookup A is)\n\ngoal (1 subgoal):\n 1. (\\<Sum>A\\<leftarrow>list_of_vec (tensors_from_net m). lookup A is) =\n    lookup (listsum (input_sizes m) (list_of_vec (tensors_from_net m))) is", "by metis"], ["proof (state)\nthis:\n  (\\<Sum>A\\<leftarrow>list_of_vec (tensors_from_net m). lookup A is) =\n  lookup (listsum (input_sizes m) (list_of_vec (tensors_from_net m))) is\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $\n         i) \\<Longrightarrow>\n       lookup\n        (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n        is =\n       lookup (listsum (input_sizes m) (list_of_vec (tensors_from_net m)))\n        is", "finally"], ["proof (chain)\npicking this:\n  lookup (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n   is =\n  lookup (listsum (input_sizes m) (list_of_vec (tensors_from_net m))) is", "show \"Tensor.lookup (?a $ i) is = Tensor.lookup ?b is\""], ["proof (prove)\nusing this:\n  lookup (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n   is =\n  lookup (listsum (input_sizes m) (list_of_vec (tensors_from_net m))) is\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n     is =\n    lookup (listsum (input_sizes m) (list_of_vec (tensors_from_net m))) is", "by blast"], ["proof (state)\nthis:\n  lookup (tensors_from_net (Conv (all1_matrix nr (output_size' m)) m) $ i)\n   is =\n  lookup (listsum (input_sizes m) (list_of_vec (tensors_from_net m))) is\n\ngoal:\nNo subgoals!", "qed"], ["", "fun witness and witness' where\n\"witness' Y [] = Input Y\" |\n\"witness' Y (r # rs) = Pool (witness Y r rs) (witness Y r rs)\" |\n\"witness Y r rs = Conv ((if length rs = 0 then id_matrix else (if length rs = 1 then all1_matrix else copy_first_matrix)) Y r) (witness' r rs)\""], ["", "abbreviation \"witness_l rs == witness (rs!0) (rs!1) (tl (tl rs))\""], ["", "abbreviation \"witness'_l rs == witness' (rs!0) (tl rs)\""], ["", "lemma witness_is_deep_model: \"remove_weights (witness Y r rs) = deep_model Y r rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remove_weights (witness Y r rs) = deep_model Y r rs", "proof (induction rs arbitrary: Y r)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>Y r. remove_weights (witness Y r []) = deep_model Y r []\n 2. \\<And>a rs Y r.\n       (\\<And>Y r.\n           remove_weights (witness Y r rs) =\n           deep_model Y r rs) \\<Longrightarrow>\n       remove_weights (witness Y r (a # rs)) = deep_model Y r (a # rs)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>Y r. remove_weights (witness Y r []) = deep_model Y r []\n 2. \\<And>a rs Y r.\n       (\\<And>Y r.\n           remove_weights (witness Y r rs) =\n           deep_model Y r rs) \\<Longrightarrow>\n       remove_weights (witness Y r (a # rs)) = deep_model Y r (a # rs)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. remove_weights (witness Y r []) = deep_model Y r []", "unfolding witness.simps witness'.simps deep_model.simps deep_model'.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. remove_weights\n     (Conv\n       ((if length [] = 0 then id_matrix\n         else if length [] = 1 then all1_matrix else copy_first_matrix)\n         Y r)\n       (Input r)) =\n    Conv (Y, r) (Input r)", "by (simp add: id_matrix_dim)"], ["proof (state)\nthis:\n  remove_weights (witness Y r []) = deep_model Y r []\n\ngoal (1 subgoal):\n 1. \\<And>a rs Y r.\n       (\\<And>Y r.\n           remove_weights (witness Y r rs) =\n           deep_model Y r rs) \\<Longrightarrow>\n       remove_weights (witness Y r (a # rs)) = deep_model Y r (a # rs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a rs Y r.\n       (\\<And>Y r.\n           remove_weights (witness Y r rs) =\n           deep_model Y r rs) \\<Longrightarrow>\n       remove_weights (witness Y r (a # rs)) = deep_model Y r (a # rs)", "case (Cons r' rs Y r)"], ["proof (state)\nthis:\n  remove_weights (witness ?Y ?r rs) = deep_model ?Y ?r rs\n\ngoal (1 subgoal):\n 1. \\<And>a rs Y r.\n       (\\<And>Y r.\n           remove_weights (witness Y r rs) =\n           deep_model Y r rs) \\<Longrightarrow>\n       remove_weights (witness Y r (a # rs)) = deep_model Y r (a # rs)", "have \"dim_row ((if length (r' # rs) = 0 then id_matrix else (if length (r' # rs) = 1 then all1_matrix else copy_first_matrix)) Y r) = Y\"\n       \"dim_col ((if length (r' # rs) = 0 then id_matrix else (if length (r' # rs) = 1 then all1_matrix else copy_first_matrix)) Y r) = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row\n     ((if length (r' # rs) = 0 then id_matrix\n       else if length (r' # rs) = 1 then all1_matrix else copy_first_matrix)\n       Y r) =\n    Y &&&\n    dim_col\n     ((if length (r' # rs) = 0 then id_matrix\n       else if length (r' # rs) = 1 then all1_matrix else copy_first_matrix)\n       Y r) =\n    r", "by (simp_all add: all1_matrix_dim copy_first_matrix_dim)"], ["proof (state)\nthis:\n  dim_row\n   ((if length (r' # rs) = 0 then id_matrix\n     else if length (r' # rs) = 1 then all1_matrix else copy_first_matrix)\n     Y r) =\n  Y\n  dim_col\n   ((if length (r' # rs) = 0 then id_matrix\n     else if length (r' # rs) = 1 then all1_matrix else copy_first_matrix)\n     Y r) =\n  r\n\ngoal (1 subgoal):\n 1. \\<And>a rs Y r.\n       (\\<And>Y r.\n           remove_weights (witness Y r rs) =\n           deep_model Y r rs) \\<Longrightarrow>\n       remove_weights (witness Y r (a # rs)) = deep_model Y r (a # rs)", "then"], ["proof (chain)\npicking this:\n  dim_row\n   ((if length (r' # rs) = 0 then id_matrix\n     else if length (r' # rs) = 1 then all1_matrix else copy_first_matrix)\n     Y r) =\n  Y\n  dim_col\n   ((if length (r' # rs) = 0 then id_matrix\n     else if length (r' # rs) = 1 then all1_matrix else copy_first_matrix)\n     Y r) =\n  r", "show ?case"], ["proof (prove)\nusing this:\n  dim_row\n   ((if length (r' # rs) = 0 then id_matrix\n     else if length (r' # rs) = 1 then all1_matrix else copy_first_matrix)\n     Y r) =\n  Y\n  dim_col\n   ((if length (r' # rs) = 0 then id_matrix\n     else if length (r' # rs) = 1 then all1_matrix else copy_first_matrix)\n     Y r) =\n  r\n\ngoal (1 subgoal):\n 1. remove_weights (witness Y r (r' # rs)) = deep_model Y r (r' # rs)", "unfolding witness.simps"], ["proof (prove)\nusing this:\n  dim_row\n   ((if length (r' # rs) = 0 then id_matrix\n     else if length (r' # rs) = 1 then all1_matrix else copy_first_matrix)\n     Y r) =\n  Y\n  dim_col\n   ((if length (r' # rs) = 0 then id_matrix\n     else if length (r' # rs) = 1 then all1_matrix else copy_first_matrix)\n     Y r) =\n  r\n\ngoal (1 subgoal):\n 1. remove_weights\n     (Conv\n       ((if length (r' # rs) = 0 then id_matrix\n         else if length (r' # rs) = 1 then all1_matrix\n              else copy_first_matrix)\n         Y r)\n       (witness' r (r' # rs))) =\n    deep_model Y r (r' # rs)", "unfolding witness'.simps"], ["proof (prove)\nusing this:\n  dim_row\n   ((if length (r' # rs) = 0 then id_matrix\n     else if length (r' # rs) = 1 then all1_matrix else copy_first_matrix)\n     Y r) =\n  Y\n  dim_col\n   ((if length (r' # rs) = 0 then id_matrix\n     else if length (r' # rs) = 1 then all1_matrix else copy_first_matrix)\n     Y r) =\n  r\n\ngoal (1 subgoal):\n 1. remove_weights\n     (Conv\n       ((if length (r' # rs) = 0 then id_matrix\n         else if length (r' # rs) = 1 then all1_matrix\n              else copy_first_matrix)\n         Y r)\n       (Pool (witness r r' rs) (witness r r' rs))) =\n    deep_model Y r (r' # rs)", "unfolding remove_weights.simps"], ["proof (prove)\nusing this:\n  dim_row\n   ((if length (r' # rs) = 0 then id_matrix\n     else if length (r' # rs) = 1 then all1_matrix else copy_first_matrix)\n     Y r) =\n  Y\n  dim_col\n   ((if length (r' # rs) = 0 then id_matrix\n     else if length (r' # rs) = 1 then all1_matrix else copy_first_matrix)\n     Y r) =\n  r\n\ngoal (1 subgoal):\n 1. Conv\n     (dim_row\n       ((if length (r' # rs) = 0 then id_matrix\n         else if length (r' # rs) = 1 then all1_matrix\n              else copy_first_matrix)\n         Y r),\n      dim_col\n       ((if length (r' # rs) = 0 then id_matrix\n         else if length (r' # rs) = 1 then all1_matrix\n              else copy_first_matrix)\n         Y r))\n     (Pool (remove_weights (witness r r' rs))\n       (remove_weights (witness r r' rs))) =\n    deep_model Y r (r' # rs)", "using Cons"], ["proof (prove)\nusing this:\n  dim_row\n   ((if length (r' # rs) = 0 then id_matrix\n     else if length (r' # rs) = 1 then all1_matrix else copy_first_matrix)\n     Y r) =\n  Y\n  dim_col\n   ((if length (r' # rs) = 0 then id_matrix\n     else if length (r' # rs) = 1 then all1_matrix else copy_first_matrix)\n     Y r) =\n  r\n  remove_weights (witness ?Y ?r rs) = deep_model ?Y ?r rs\n\ngoal (1 subgoal):\n 1. Conv\n     (dim_row\n       ((if length (r' # rs) = 0 then id_matrix\n         else if length (r' # rs) = 1 then all1_matrix\n              else copy_first_matrix)\n         Y r),\n      dim_col\n       ((if length (r' # rs) = 0 then id_matrix\n         else if length (r' # rs) = 1 then all1_matrix\n              else copy_first_matrix)\n         Y r))\n     (Pool (remove_weights (witness r r' rs))\n       (remove_weights (witness r r' rs))) =\n    deep_model Y r (r' # rs)", "by simp"], ["proof (state)\nthis:\n  remove_weights (witness Y r (r' # rs)) = deep_model Y r (r' # rs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma witness'_is_deep_model: \"remove_weights (witness' Y rs) = deep_model' Y rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remove_weights (witness' Y rs) = deep_model' Y rs", "proof (induction rs arbitrary: Y)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>Y. remove_weights (witness' Y []) = deep_model' Y []\n 2. \\<And>a rs Y.\n       (\\<And>Y.\n           remove_weights (witness' Y rs) =\n           deep_model' Y rs) \\<Longrightarrow>\n       remove_weights (witness' Y (a # rs)) = deep_model' Y (a # rs)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>Y. remove_weights (witness' Y []) = deep_model' Y []\n 2. \\<And>a rs Y.\n       (\\<And>Y.\n           remove_weights (witness' Y rs) =\n           deep_model' Y rs) \\<Longrightarrow>\n       remove_weights (witness' Y (a # rs)) = deep_model' Y (a # rs)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. remove_weights (witness' Y []) = deep_model' Y []", "unfolding witness.simps witness'.simps deep_model.simps deep_model'.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. remove_weights (Input Y) = Input Y", "by (simp add: id_matrix_dim)"], ["proof (state)\nthis:\n  remove_weights (witness' Y []) = deep_model' Y []\n\ngoal (1 subgoal):\n 1. \\<And>a rs Y.\n       (\\<And>Y.\n           remove_weights (witness' Y rs) =\n           deep_model' Y rs) \\<Longrightarrow>\n       remove_weights (witness' Y (a # rs)) = deep_model' Y (a # rs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a rs Y.\n       (\\<And>Y.\n           remove_weights (witness' Y rs) =\n           deep_model' Y rs) \\<Longrightarrow>\n       remove_weights (witness' Y (a # rs)) = deep_model' Y (a # rs)", "case (Cons r rs Y)"], ["proof (state)\nthis:\n  remove_weights (witness' ?Y rs) = deep_model' ?Y rs\n\ngoal (1 subgoal):\n 1. \\<And>a rs Y.\n       (\\<And>Y.\n           remove_weights (witness' Y rs) =\n           deep_model' Y rs) \\<Longrightarrow>\n       remove_weights (witness' Y (a # rs)) = deep_model' Y (a # rs)", "have \"dim_row ((if length rs = 0 then id_matrix else (if length rs = 1 then all1_matrix else copy_first_matrix)) Y r) = Y\"\n       \"dim_col ((if length rs = 0 then id_matrix else (if length rs = 1 then all1_matrix else copy_first_matrix)) Y r) = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row\n     ((if length rs = 0 then id_matrix\n       else if length rs = 1 then all1_matrix else copy_first_matrix)\n       Y r) =\n    Y &&&\n    dim_col\n     ((if length rs = 0 then id_matrix\n       else if length rs = 1 then all1_matrix else copy_first_matrix)\n       Y r) =\n    r", "by (simp_all add: all1_matrix_dim copy_first_matrix_dim id_matrix_dim)"], ["proof (state)\nthis:\n  dim_row\n   ((if length rs = 0 then id_matrix\n     else if length rs = 1 then all1_matrix else copy_first_matrix)\n     Y r) =\n  Y\n  dim_col\n   ((if length rs = 0 then id_matrix\n     else if length rs = 1 then all1_matrix else copy_first_matrix)\n     Y r) =\n  r\n\ngoal (1 subgoal):\n 1. \\<And>a rs Y.\n       (\\<And>Y.\n           remove_weights (witness' Y rs) =\n           deep_model' Y rs) \\<Longrightarrow>\n       remove_weights (witness' Y (a # rs)) = deep_model' Y (a # rs)", "then"], ["proof (chain)\npicking this:\n  dim_row\n   ((if length rs = 0 then id_matrix\n     else if length rs = 1 then all1_matrix else copy_first_matrix)\n     Y r) =\n  Y\n  dim_col\n   ((if length rs = 0 then id_matrix\n     else if length rs = 1 then all1_matrix else copy_first_matrix)\n     Y r) =\n  r", "show ?case"], ["proof (prove)\nusing this:\n  dim_row\n   ((if length rs = 0 then id_matrix\n     else if length rs = 1 then all1_matrix else copy_first_matrix)\n     Y r) =\n  Y\n  dim_col\n   ((if length rs = 0 then id_matrix\n     else if length rs = 1 then all1_matrix else copy_first_matrix)\n     Y r) =\n  r\n\ngoal (1 subgoal):\n 1. remove_weights (witness' Y (r # rs)) = deep_model' Y (r # rs)", "unfolding witness'.simps"], ["proof (prove)\nusing this:\n  dim_row\n   ((if length rs = 0 then id_matrix\n     else if length rs = 1 then all1_matrix else copy_first_matrix)\n     Y r) =\n  Y\n  dim_col\n   ((if length rs = 0 then id_matrix\n     else if length rs = 1 then all1_matrix else copy_first_matrix)\n     Y r) =\n  r\n\ngoal (1 subgoal):\n 1. remove_weights (Pool (witness Y r rs) (witness Y r rs)) =\n    deep_model' Y (r # rs)", "unfolding witness.simps"], ["proof (prove)\nusing this:\n  dim_row\n   ((if length rs = 0 then id_matrix\n     else if length rs = 1 then all1_matrix else copy_first_matrix)\n     Y r) =\n  Y\n  dim_col\n   ((if length rs = 0 then id_matrix\n     else if length rs = 1 then all1_matrix else copy_first_matrix)\n     Y r) =\n  r\n\ngoal (1 subgoal):\n 1. remove_weights\n     (Pool\n       (Conv\n         ((if length rs = 0 then id_matrix\n           else if length rs = 1 then all1_matrix else copy_first_matrix)\n           Y r)\n         (witness' r rs))\n       (Conv\n         ((if length rs = 0 then id_matrix\n           else if length rs = 1 then all1_matrix else copy_first_matrix)\n           Y r)\n         (witness' r rs))) =\n    deep_model' Y (r # rs)", "unfolding remove_weights.simps"], ["proof (prove)\nusing this:\n  dim_row\n   ((if length rs = 0 then id_matrix\n     else if length rs = 1 then all1_matrix else copy_first_matrix)\n     Y r) =\n  Y\n  dim_col\n   ((if length rs = 0 then id_matrix\n     else if length rs = 1 then all1_matrix else copy_first_matrix)\n     Y r) =\n  r\n\ngoal (1 subgoal):\n 1. Pool\n     (Conv\n       (dim_row\n         ((if length rs = 0 then id_matrix\n           else if length rs = 1 then all1_matrix else copy_first_matrix)\n           Y r),\n        dim_col\n         ((if length rs = 0 then id_matrix\n           else if length rs = 1 then all1_matrix else copy_first_matrix)\n           Y r))\n       (remove_weights (witness' r rs)))\n     (Conv\n       (dim_row\n         ((if length rs = 0 then id_matrix\n           else if length rs = 1 then all1_matrix else copy_first_matrix)\n           Y r),\n        dim_col\n         ((if length rs = 0 then id_matrix\n           else if length rs = 1 then all1_matrix else copy_first_matrix)\n           Y r))\n       (remove_weights (witness' r rs))) =\n    deep_model' Y (r # rs)", "using Cons"], ["proof (prove)\nusing this:\n  dim_row\n   ((if length rs = 0 then id_matrix\n     else if length rs = 1 then all1_matrix else copy_first_matrix)\n     Y r) =\n  Y\n  dim_col\n   ((if length rs = 0 then id_matrix\n     else if length rs = 1 then all1_matrix else copy_first_matrix)\n     Y r) =\n  r\n  remove_weights (witness' ?Y rs) = deep_model' ?Y rs\n\ngoal (1 subgoal):\n 1. Pool\n     (Conv\n       (dim_row\n         ((if length rs = 0 then id_matrix\n           else if length rs = 1 then all1_matrix else copy_first_matrix)\n           Y r),\n        dim_col\n         ((if length rs = 0 then id_matrix\n           else if length rs = 1 then all1_matrix else copy_first_matrix)\n           Y r))\n       (remove_weights (witness' r rs)))\n     (Conv\n       (dim_row\n         ((if length rs = 0 then id_matrix\n           else if length rs = 1 then all1_matrix else copy_first_matrix)\n           Y r),\n        dim_col\n         ((if length rs = 0 then id_matrix\n           else if length rs = 1 then all1_matrix else copy_first_matrix)\n           Y r))\n       (remove_weights (witness' r rs))) =\n    deep_model' Y (r # rs)", "by simp"], ["proof (state)\nthis:\n  remove_weights (witness' Y (r # rs)) = deep_model' Y (r # rs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma witness_valid: \"valid_net' (witness Y r rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_net' (witness Y r rs)", "using valid_deep_model witness_is_deep_model"], ["proof (prove)\nusing this:\n  valid_net (deep_model ?Y ?r ?rs)\n  remove_weights (witness ?Y ?r ?rs) = deep_model ?Y ?r ?rs\n\ngoal (1 subgoal):\n 1. valid_net' (witness Y r rs)", "by auto"], ["", "lemma witness'_valid: \"valid_net' (witness' Y rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_net' (witness' Y rs)", "using valid_deep_model' witness'_is_deep_model"], ["proof (prove)\nusing this:\n  valid_net (deep_model' ?r ?rs)\n  remove_weights (witness' ?Y ?rs) = deep_model' ?Y ?rs\n\ngoal (1 subgoal):\n 1. valid_net' (witness' Y rs)", "by auto"], ["", "lemma shared_weight_net_witness: \"shared_weight_net (witness Y r rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. shared_weight_net (witness Y r rs)", "proof (induction rs arbitrary:Y r)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>Y r. shared_weight_net (witness Y r [])\n 2. \\<And>a rs Y r.\n       (\\<And>Y r. shared_weight_net (witness Y r rs)) \\<Longrightarrow>\n       shared_weight_net (witness Y r (a # rs))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>Y r. shared_weight_net (witness Y r [])\n 2. \\<And>a rs Y r.\n       (\\<And>Y r. shared_weight_net (witness Y r rs)) \\<Longrightarrow>\n       shared_weight_net (witness Y r (a # rs))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. shared_weight_net (witness Y r [])", "unfolding witness.simps witness'.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. shared_weight_net\n     (Conv\n       ((if length [] = 0 then id_matrix\n         else if length [] = 1 then all1_matrix else copy_first_matrix)\n         Y r)\n       (Input r))", "by (simp add: shared_weight_net_Conv shared_weight_net_Input)"], ["proof (state)\nthis:\n  shared_weight_net (witness Y r [])\n\ngoal (1 subgoal):\n 1. \\<And>a rs Y r.\n       (\\<And>Y r. shared_weight_net (witness Y r rs)) \\<Longrightarrow>\n       shared_weight_net (witness Y r (a # rs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a rs Y r.\n       (\\<And>Y r. shared_weight_net (witness Y r rs)) \\<Longrightarrow>\n       shared_weight_net (witness Y r (a # rs))", "case (Cons a rs)"], ["proof (state)\nthis:\n  shared_weight_net (witness ?Y ?r rs)\n\ngoal (1 subgoal):\n 1. \\<And>a rs Y r.\n       (\\<And>Y r. shared_weight_net (witness Y r rs)) \\<Longrightarrow>\n       shared_weight_net (witness Y r (a # rs))", "then"], ["proof (chain)\npicking this:\n  shared_weight_net (witness ?Y ?r rs)", "show ?case"], ["proof (prove)\nusing this:\n  shared_weight_net (witness ?Y ?r rs)\n\ngoal (1 subgoal):\n 1. shared_weight_net (witness Y r (a # rs))", "unfolding witness.simps witness'.simps"], ["proof (prove)\nusing this:\n  shared_weight_net\n   (Conv\n     ((if length rs = 0 then id_matrix\n       else if length rs = 1 then all1_matrix else copy_first_matrix)\n       ?Y ?r)\n     (witness' ?r rs))\n\ngoal (1 subgoal):\n 1. shared_weight_net\n     (Conv\n       ((if length (a # rs) = 0 then id_matrix\n         else if length (a # rs) = 1 then all1_matrix\n              else copy_first_matrix)\n         Y r)\n       (Pool\n         (Conv\n           ((if length rs = 0 then id_matrix\n             else if length rs = 1 then all1_matrix else copy_first_matrix)\n             r a)\n           (witness' a rs))\n         (Conv\n           ((if length rs = 0 then id_matrix\n             else if length rs = 1 then all1_matrix else copy_first_matrix)\n             r a)\n           (witness' a rs))))", "by (simp add: shared_weight_net_Conv shared_weight_net_Input shared_weight_net_Pool)"], ["proof (state)\nthis:\n  shared_weight_net (witness Y r (a # rs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma witness_l0': \"witness' Y [M] =\n    (Pool\n      (Conv (id_matrix Y M) (Input M))\n      (Conv (id_matrix Y M) (Input M))\n    )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. witness' Y [M] =\n    Pool (Conv (id_matrix Y M) (Input M)) (Conv (id_matrix Y M) (Input M))", "unfolding witness'.simps witness.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. Pool\n     (Conv\n       ((if length [] = 0 then id_matrix\n         else if length [] = 1 then all1_matrix else copy_first_matrix)\n         Y M)\n       (Input M))\n     (Conv\n       ((if length [] = 0 then id_matrix\n         else if length [] = 1 then all1_matrix else copy_first_matrix)\n         Y M)\n       (Input M)) =\n    Pool (Conv (id_matrix Y M) (Input M)) (Conv (id_matrix Y M) (Input M))", "by simp"], ["", "lemma witness_l1: \"witness Y r0 [M] =\n  Conv (all1_matrix Y r0) (witness' r0 [M])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. witness Y r0 [M] = Conv (all1_matrix Y r0) (witness' r0 [M])", "unfolding witness'.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. witness Y r0 [M] =\n    Conv (all1_matrix Y r0) (Pool (witness r0 M []) (witness r0 M []))", "by simp"], ["", "lemma tensors_ht_l0:\nassumes \"j<r0\"\nshows \"tensors_from_net (Conv (id_matrix r0 M) (Input M)) $ j\n = (if j<M then unit_vec M j else tensor0 [M])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensors_from_net (Conv (id_matrix r0 M) (Input M)) $ j =\n    (if j < M then unit_vec M j else tensor0 [M])", "by (metis assms input_sizes.simps(1) output_size.simps(1) remove_weights.simps(1) tensors_from_net.simps(1)\n  tensors_from_net_Conv_id valid_net.intros(1) index_vec)"], ["", "lemma tensor_prod_unit_vec:\n\"unit_vec M j \\<otimes> unit_vec M j = tensor_from_lookup [M,M] (\\<lambda>is. if is=[j,j] then 1 else 0)\" (is \"?A=?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. unit_vec M j \\<otimes> unit_vec M j =\n    tensor_from_lookup [M, M]\n     (\\<lambda>is. if is = [j, j] then 1::'a else (0::'a))", "proof (rule tensor_lookup_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. dims (unit_vec M j \\<otimes> unit_vec M j) =\n    dims\n     (tensor_from_lookup [M, M]\n       (\\<lambda>is. if is = [j, j] then 1::'a else (0::'a)))\n 2. \\<And>is.\n       is \\<lhd>\n       dims (unit_vec M j \\<otimes> unit_vec M j) \\<Longrightarrow>\n       lookup (unit_vec M j \\<otimes> unit_vec M j) is =\n       lookup\n        (tensor_from_lookup [M, M]\n          (\\<lambda>is. if is = [j, j] then 1::'a else (0::'a)))\n        is", "show \"Tensor.dims ?A = Tensor.dims ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dims (unit_vec M j \\<otimes> unit_vec M j) =\n    dims\n     (tensor_from_lookup [M, M]\n       (\\<lambda>is. if is = [j, j] then 1::'a else (0::'a)))", "by (metis append_Cons self_append_conv2 dims_unit_vec dims_tensor_prod dims_tensor_from_lookup)"], ["proof (state)\nthis:\n  dims (unit_vec M j \\<otimes> unit_vec M j) =\n  dims\n   (tensor_from_lookup [M, M]\n     (\\<lambda>is. if is = [j, j] then 1::'a else (0::'a)))\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims (unit_vec M j \\<otimes> unit_vec M j) \\<Longrightarrow>\n       lookup (unit_vec M j \\<otimes> unit_vec M j) is =\n       lookup\n        (tensor_from_lookup [M, M]\n          (\\<lambda>is. if is = [j, j] then 1::'a else (0::'a)))\n        is", "fix \"is\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims (unit_vec M j \\<otimes> unit_vec M j) \\<Longrightarrow>\n       lookup (unit_vec M j \\<otimes> unit_vec M j) is =\n       lookup\n        (tensor_from_lookup [M, M]\n          (\\<lambda>is. if is = [j, j] then 1::'a else (0::'a)))\n        is", "assume is_valid:\"is \\<lhd> Tensor.dims (unit_vec M j \\<otimes> unit_vec M j)\""], ["proof (state)\nthis:\n  is \\<lhd> dims (unit_vec M j \\<otimes> unit_vec M j)\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims (unit_vec M j \\<otimes> unit_vec M j) \\<Longrightarrow>\n       lookup (unit_vec M j \\<otimes> unit_vec M j) is =\n       lookup\n        (tensor_from_lookup [M, M]\n          (\\<lambda>is. if is = [j, j] then 1::'a else (0::'a)))\n        is", "then"], ["proof (chain)\npicking this:\n  is \\<lhd> dims (unit_vec M j \\<otimes> unit_vec M j)", "have \"is \\<lhd> [M,M]\""], ["proof (prove)\nusing this:\n  is \\<lhd> dims (unit_vec M j \\<otimes> unit_vec M j)\n\ngoal (1 subgoal):\n 1. is \\<lhd> [M, M]", "by (metis append_Cons self_append_conv2 dims_unit_vec dims_tensor_prod)"], ["proof (state)\nthis:\n  is \\<lhd> [M, M]\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims (unit_vec M j \\<otimes> unit_vec M j) \\<Longrightarrow>\n       lookup (unit_vec M j \\<otimes> unit_vec M j) is =\n       lookup\n        (tensor_from_lookup [M, M]\n          (\\<lambda>is. if is = [j, j] then 1::'a else (0::'a)))\n        is", "then"], ["proof (chain)\npicking this:\n  is \\<lhd> [M, M]", "obtain i1 i2 where is_split: \"is = [i1, i2]\" \"i1 < M\" \"i2 < M\""], ["proof (prove)\nusing this:\n  is \\<lhd> [M, M]\n\ngoal (1 subgoal):\n 1. (\\<And>i1 i2.\n        \\<lbrakk>is = [i1, i2]; i1 < M; i2 < M\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using list.distinct(1)"], ["proof (prove)\nusing this:\n  is \\<lhd> [M, M]\n  [] \\<noteq> ?x21.0 # ?x22.0\n\ngoal (1 subgoal):\n 1. (\\<And>i1 i2.\n        \\<lbrakk>is = [i1, i2]; i1 < M; i2 < M\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  is = [i1, i2]\n  i1 < M\n  i2 < M\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims (unit_vec M j \\<otimes> unit_vec M j) \\<Longrightarrow>\n       lookup (unit_vec M j \\<otimes> unit_vec M j) is =\n       lookup\n        (tensor_from_lookup [M, M]\n          (\\<lambda>is. if is = [j, j] then 1::'a else (0::'a)))\n        is", "then"], ["proof (chain)\npicking this:\n  is = [i1, i2]\n  i1 < M\n  i2 < M", "have \"[i1] \\<lhd> Tensor.dims (unit_vec M j)\" \"[i2] \\<lhd> Tensor.dims (unit_vec M j)\""], ["proof (prove)\nusing this:\n  is = [i1, i2]\n  i1 < M\n  i2 < M\n\ngoal (1 subgoal):\n 1. [i1] \\<lhd> dims (unit_vec M j) &&& [i2] \\<lhd> dims (unit_vec M j)", "by (simp_all add: valid_index.Cons valid_index.Nil dims_unit_vec)"], ["proof (state)\nthis:\n  [i1] \\<lhd> dims (unit_vec M j)\n  [i2] \\<lhd> dims (unit_vec M j)\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims (unit_vec M j \\<otimes> unit_vec M j) \\<Longrightarrow>\n       lookup (unit_vec M j \\<otimes> unit_vec M j) is =\n       lookup\n        (tensor_from_lookup [M, M]\n          (\\<lambda>is. if is = [j, j] then 1::'a else (0::'a)))\n        is", "have \"is = [i1] @ [i2]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is = [i1] @ [i2]", "by (simp add: is_split(1))"], ["proof (state)\nthis:\n  is = [i1] @ [i2]\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims (unit_vec M j \\<otimes> unit_vec M j) \\<Longrightarrow>\n       lookup (unit_vec M j \\<otimes> unit_vec M j) is =\n       lookup\n        (tensor_from_lookup [M, M]\n          (\\<lambda>is. if is = [j, j] then 1::'a else (0::'a)))\n        is", "show \"Tensor.lookup ?A is = Tensor.lookup ?B is\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (unit_vec M j \\<otimes> unit_vec M j) is =\n    lookup\n     (tensor_from_lookup [M, M]\n       (\\<lambda>is. if is = [j, j] then 1::'a else (0::'a)))\n     is", "unfolding \\<open>is = [i1] @ [i2]\\<close>\n     lookup_tensor_prod[OF \\<open>[i1] \\<lhd> Tensor.dims (unit_vec M j)\\<close> \\<open>[i2] \\<lhd> Tensor.dims (unit_vec M j)\\<close>]\n     lookup_tensor_from_lookup[OF \\<open>is \\<lhd> [M, M]\\<close>, unfolded  \\<open>is = [i1] @ [i2]\\<close>]\n     lookup_unit_vec[OF \\<open>i1 < M\\<close>] lookup_unit_vec[OF \\<open>i2 < M\\<close>]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if j = i1 then 1::'a else (0::'a)) *\n    (if j = i2 then 1::'a else (0::'a)) =\n    (if [i1] @ [i2] = [j, j] then 1::'a else (0::'a))", "by fastforce"], ["proof (state)\nthis:\n  lookup (unit_vec M j \\<otimes> unit_vec M j) is =\n  lookup\n   (tensor_from_lookup [M, M]\n     (\\<lambda>is. if is = [j, j] then 1::'a else (0::'a)))\n   is\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tensors_ht_l0':\nassumes \"j<r0\"\nshows \"tensors_from_net (witness' r0 [M]) $ j\n = (if j<M then unit_vec M j \\<otimes> unit_vec M j else tensor0 [M,M])\" (is \"_ = ?b\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. tensors_from_net (witness' r0 [M]) $ j =\n    (if j < M then unit_vec M j \\<otimes> unit_vec M j else tensor0 [M, M])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. tensors_from_net (witness' r0 [M]) $ j =\n    (if j < M then unit_vec M j \\<otimes> unit_vec M j else tensor0 [M, M])", "have \"valid_net' (Conv (id_matrix r0 M) (Input M))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_net' (Conv (id_matrix r0 M) (Input M))", "by (metis convnet.inject(3) list.discI witness'.elims witness_l0' witness_valid)"], ["proof (state)\nthis:\n  valid_net' (Conv (id_matrix r0 M) (Input M))\n\ngoal (1 subgoal):\n 1. tensors_from_net (witness' r0 [M]) $ j =\n    (if j < M then unit_vec M j \\<otimes> unit_vec M j else tensor0 [M, M])", "have j_le:\"j < dim_vec (tensors_from_net (Conv (id_matrix r0 M) (Input M)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < dim_vec (tensors_from_net (Conv (id_matrix r0 M) (Input M)))", "using output_size_correct_tensors[OF \\<open>valid_net' (Conv (id_matrix r0 M) (Input M))\\<close>,\n    unfolded remove_weights.simps output_size.simps id_matrix_dim]\n    assms"], ["proof (prove)\nusing this:\n  r0 = dim_vec (tensors_from_net (Conv (id_matrix r0 M) (Input M)))\n  j < r0\n\ngoal (1 subgoal):\n 1. j < dim_vec (tensors_from_net (Conv (id_matrix r0 M) (Input M)))", "by simp"], ["proof (state)\nthis:\n  j < dim_vec (tensors_from_net (Conv (id_matrix r0 M) (Input M)))\n\ngoal (1 subgoal):\n 1. tensors_from_net (witness' r0 [M]) $ j =\n    (if j < M then unit_vec M j \\<otimes> unit_vec M j else tensor0 [M, M])", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. tensors_from_net (witness' r0 [M]) $ j =\n    (if j < M then unit_vec M j \\<otimes> unit_vec M j else tensor0 [M, M])", "unfolding tensors_from_net.simps(3) witness_l0' index_component_mult[OF j_le j_le]  tensors_ht_l0[OF assms]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if j < M then unit_vec M j else tensor0 [M]) \\<otimes>\n    (if j < M then unit_vec M j else tensor0 [M]) =\n    (if j < M then unit_vec M j \\<otimes> unit_vec M j else tensor0 [M, M])", "by auto"], ["proof (state)\nthis:\n  tensors_from_net (witness' r0 [M]) $ j =\n  (if j < M then unit_vec M j \\<otimes> unit_vec M j else tensor0 [M, M])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lookup_tensors_ht_l0':\nassumes \"j<r0\"\nand \"is \\<lhd> [M,M]\"\nshows \"(Tensor.lookup (tensors_from_net (witness' r0 [M]) $ j)) is = (if is=[j,j] then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness' r0 [M]) $ j) is =\n    (if is = [j, j] then 1 else 0)", "proof (cases \"j<M\")"], ["proof (state)\ngoal (2 subgoals):\n 1. j < M \\<Longrightarrow>\n    lookup (tensors_from_net (witness' r0 [M]) $ j) is =\n    (if is = [j, j] then 1 else 0)\n 2. \\<not> j < M \\<Longrightarrow>\n    lookup (tensors_from_net (witness' r0 [M]) $ j) is =\n    (if is = [j, j] then 1 else 0)", "assume \"j<M\""], ["proof (state)\nthis:\n  j < M\n\ngoal (2 subgoals):\n 1. j < M \\<Longrightarrow>\n    lookup (tensors_from_net (witness' r0 [M]) $ j) is =\n    (if is = [j, j] then 1 else 0)\n 2. \\<not> j < M \\<Longrightarrow>\n    lookup (tensors_from_net (witness' r0 [M]) $ j) is =\n    (if is = [j, j] then 1 else 0)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness' r0 [M]) $ j) is =\n    (if is = [j, j] then 1 else 0)", "unfolding tensors_ht_l0'[OF assms(1)] tensor_prod_unit_vec"], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup\n     (if j < M\n      then tensor_from_lookup [M, M]\n            (\\<lambda>is. if is = [j, j] then 1 else 0)\n      else tensor0 [M, M])\n     is =\n    (if is = [j, j] then 1 else 0)", "apply (cases \"is = [j,j]\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. is = [j, j] \\<Longrightarrow>\n    lookup\n     (if j < M\n      then tensor_from_lookup [M, M]\n            (\\<lambda>is. if is = [j, j] then 1 else 0)\n      else tensor0 [M, M])\n     is =\n    (if is = [j, j] then 1 else 0)\n 2. is \\<noteq> [j, j] \\<Longrightarrow>\n    lookup\n     (if j < M\n      then tensor_from_lookup [M, M]\n            (\\<lambda>is. if is = [j, j] then 1 else 0)\n      else tensor0 [M, M])\n     is =\n    (if is = [j, j] then 1 else 0)", "using \\<open>j<M\\<close> assms(2)"], ["proof (prove)\nusing this:\n  j < M\n  is \\<lhd> [M, M]\n\ngoal (2 subgoals):\n 1. is = [j, j] \\<Longrightarrow>\n    lookup\n     (if j < M\n      then tensor_from_lookup [M, M]\n            (\\<lambda>is. if is = [j, j] then 1 else 0)\n      else tensor0 [M, M])\n     is =\n    (if is = [j, j] then 1 else 0)\n 2. is \\<noteq> [j, j] \\<Longrightarrow>\n    lookup\n     (if j < M\n      then tensor_from_lookup [M, M]\n            (\\<lambda>is. if is = [j, j] then 1 else 0)\n      else tensor0 [M, M])\n     is =\n    (if is = [j, j] then 1 else 0)", "by (simp_all add:lookup_tensor_from_lookup)"], ["proof (state)\nthis:\n  lookup (tensors_from_net (witness' r0 [M]) $ j) is =\n  (if is = [j, j] then 1 else 0)\n\ngoal (1 subgoal):\n 1. \\<not> j < M \\<Longrightarrow>\n    lookup (tensors_from_net (witness' r0 [M]) $ j) is =\n    (if is = [j, j] then 1 else 0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> j < M \\<Longrightarrow>\n    lookup (tensors_from_net (witness' r0 [M]) $ j) is =\n    (if is = [j, j] then 1 else 0)", "assume \"\\<not>j<M\""], ["proof (state)\nthis:\n  \\<not> j < M\n\ngoal (1 subgoal):\n 1. \\<not> j < M \\<Longrightarrow>\n    lookup (tensors_from_net (witness' r0 [M]) $ j) is =\n    (if is = [j, j] then 1 else 0)", "then"], ["proof (chain)\npicking this:\n  \\<not> j < M", "have \"is \\<noteq> [j, j]\""], ["proof (prove)\nusing this:\n  \\<not> j < M\n\ngoal (1 subgoal):\n 1. is \\<noteq> [j, j]", "using assms(2)"], ["proof (prove)\nusing this:\n  \\<not> j < M\n  is \\<lhd> [M, M]\n\ngoal (1 subgoal):\n 1. is \\<noteq> [j, j]", "using list.distinct(1) nth_Cons_0 valid_index.simps"], ["proof (prove)\nusing this:\n  \\<not> j < M\n  is \\<lhd> [M, M]\n  [] \\<noteq> ?x21.0 # ?x22.0\n  (?x # ?xs) ! 0 = ?x\n  (?a1.0 \\<lhd> ?a2.0) =\n  (?a1.0 = [] \\<and> ?a2.0 = [] \\<or>\n   (\\<exists>is ds i d.\n       ?a1.0 = i # is \\<and>\n       ?a2.0 = d # ds \\<and> is \\<lhd> ds \\<and> i < d))\n\ngoal (1 subgoal):\n 1. is \\<noteq> [j, j]", "by blast"], ["proof (state)\nthis:\n  is \\<noteq> [j, j]\n\ngoal (1 subgoal):\n 1. \\<not> j < M \\<Longrightarrow>\n    lookup (tensors_from_net (witness' r0 [M]) $ j) is =\n    (if is = [j, j] then 1 else 0)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness' r0 [M]) $ j) is =\n    (if is = [j, j] then 1 else 0)", "unfolding tensors_ht_l0'[OF assms(1)] tensor_prod_unit_vec"], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup\n     (if j < M\n      then tensor_from_lookup [M, M]\n            (\\<lambda>is. if is = [j, j] then 1 else 0)\n      else tensor0 [M, M])\n     is =\n    (if is = [j, j] then 1 else 0)", "using  \\<open>\\<not>j<M\\<close>"], ["proof (prove)\nusing this:\n  \\<not> j < M\n\ngoal (1 subgoal):\n 1. lookup\n     (if j < M\n      then tensor_from_lookup [M, M]\n            (\\<lambda>is. if is = [j, j] then 1 else 0)\n      else tensor0 [M, M])\n     is =\n    (if is = [j, j] then 1 else 0)", "by (simp add: lookup_tensor0[OF assms(2)] \\<open>is \\<noteq> [j, j]\\<close>)"], ["proof (state)\nthis:\n  lookup (tensors_from_net (witness' r0 [M]) $ j) is =\n  (if is = [j, j] then 1 else 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lookup_tensors_ht_l1:\nassumes \"j < r1\"\nand \"is \\<lhd> [M,M]\"\nshows \"Tensor.lookup (tensors_from_net (witness r1 r0 [M]) $ j) is\n   = (if is!0 = is!1 \\<and> is!0<r0 then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness r1 r0 [M]) $ j) is =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness r1 r0 [M]) $ j) is =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "have witness_l0'_valid: \"valid_net' (witness' r0 [M])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_net' (witness' r0 [M])", "unfolding witness_l0'"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_net'\n     (Pool (Conv (id_matrix r0 M) (Input M))\n       (Conv (id_matrix r0 M) (Input M)))", "by (simp add: id_matrix_dim valid_net.intros)"], ["proof (state)\nthis:\n  valid_net' (witness' r0 [M])\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness r1 r0 [M]) $ j) is =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "have \"input_sizes (witness' r0 [M]) = [M,M]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. input_sizes (witness' r0 [M]) = [M, M]", "unfolding witness_l0'"], ["proof (prove)\ngoal (1 subgoal):\n 1. input_sizes\n     (Pool (Conv (id_matrix r0 M) (Input M))\n       (Conv (id_matrix r0 M) (Input M))) =\n    [M, M]", "by simp"], ["proof (state)\nthis:\n  input_sizes (witness' r0 [M]) = [M, M]\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness r1 r0 [M]) $ j) is =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "have \"output_size' (witness' r0 [M]) = r0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. output_size' (witness' r0 [M]) = r0", "unfolding witness_l0'"], ["proof (prove)\ngoal (1 subgoal):\n 1. output_size'\n     (Pool (Conv (id_matrix r0 M) (Input M))\n       (Conv (id_matrix r0 M) (Input M))) =\n    r0", "using witness_l0'_valid"], ["proof (prove)\nusing this:\n  valid_net' (witness' r0 [M])\n\ngoal (1 subgoal):\n 1. output_size'\n     (Pool (Conv (id_matrix r0 M) (Input M))\n       (Conv (id_matrix r0 M) (Input M))) =\n    r0", "by (simp add: id_matrix_dim)"], ["proof (state)\nthis:\n  output_size' (witness' r0 [M]) = r0\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness r1 r0 [M]) $ j) is =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "have \"dim_vec (tensors_from_net (witness' r0 [M])) = r0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (tensors_from_net (witness' r0 [M])) = r0", "using \\<open>output_size' (witness' r0 [M]) = r0\\<close> witness_l0'_valid output_size_correct_tensors"], ["proof (prove)\nusing this:\n  output_size' (witness' r0 [M]) = r0\n  valid_net' (witness' r0 [M])\n  valid_net' ?m \\<Longrightarrow>\n  output_size' ?m = dim_vec (tensors_from_net ?m)\n\ngoal (1 subgoal):\n 1. dim_vec (tensors_from_net (witness' r0 [M])) = r0", "by fastforce"], ["proof (state)\nthis:\n  dim_vec (tensors_from_net (witness' r0 [M])) = r0\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness r1 r0 [M]) $ j) is =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "have all0_but1:\"\\<And>i. i\\<noteq>is!0 \\<Longrightarrow> i<r0 \\<Longrightarrow> Tensor.lookup (tensors_from_net (witness' r0 [M]) $ i) is = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i \\<noteq> is ! 0; i < r0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness' r0 [M]) $ i)\n                          is =\n                         0", "using lookup_tensors_ht_l0' \\<open>is \\<lhd> [M, M]\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>?j < ?r0.0; ?is \\<lhd> [?M, ?M]\\<rbrakk>\n  \\<Longrightarrow> lookup (tensors_from_net (witness' ?r0.0 [?M]) $ ?j)\n                     ?is =\n                    (if ?is = [?j, ?j] then 1 else 0)\n  is \\<lhd> [M, M]\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i \\<noteq> is ! 0; i < r0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness' r0 [M]) $ i)\n                          is =\n                         0", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?i \\<noteq> is ! 0; ?i < r0\\<rbrakk>\n  \\<Longrightarrow> lookup (tensors_from_net (witness' r0 [M]) $ ?i) is = 0\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness r1 r0 [M]) $ j) is =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "have \"tensors_from_net (witness r1 r0 [M]) $ j =\n    Tensor_Plus.listsum [M,M] (list_of_vec (tensors_from_net (witness' r0 [M])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensors_from_net (witness r1 r0 [M]) $ j =\n    listsum [M, M] (list_of_vec (tensors_from_net (witness' r0 [M])))", "unfolding witness_l1"], ["proof (prove)\ngoal (1 subgoal):\n 1. tensors_from_net (Conv (all1_matrix r1 r0) (witness' r0 [M])) $ j =\n    listsum [M, M] (list_of_vec (tensors_from_net (witness' r0 [M])))", "using tensors_from_net_Conv_all1[OF witness_l0'_valid assms(1)]\n    witness_l0' \\<open>output_size' (witness' r0 [M]) = r0\\<close>"], ["proof (prove)\nusing this:\n  tensors_from_net\n   (Conv (all1_matrix r1 (output_size' (witness' r0 [M])))\n     (witness' r0 [M])) $\n  j =\n  listsum (input_sizes (witness' r0 [M]))\n   (list_of_vec (tensors_from_net (witness' r0 [M])))\n  witness' ?Y [?M] =\n  Pool (Conv (id_matrix ?Y ?M) (Input ?M))\n   (Conv (id_matrix ?Y ?M) (Input ?M))\n  output_size' (witness' r0 [M]) = r0\n\ngoal (1 subgoal):\n 1. tensors_from_net (Conv (all1_matrix r1 r0) (witness' r0 [M])) $ j =\n    listsum [M, M] (list_of_vec (tensors_from_net (witness' r0 [M])))", "by simp"], ["proof (state)\nthis:\n  tensors_from_net (witness r1 r0 [M]) $ j =\n  listsum [M, M] (list_of_vec (tensors_from_net (witness' r0 [M])))\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness r1 r0 [M]) $ j) is =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "then"], ["proof (chain)\npicking this:\n  tensors_from_net (witness r1 r0 [M]) $ j =\n  listsum [M, M] (list_of_vec (tensors_from_net (witness' r0 [M])))", "have \"Tensor.lookup (tensors_from_net (witness r1 r0 [M]) $ j) is\n    = monoid_add_class.sum_list (map (\\<lambda>A. Tensor.lookup A is) (list_of_vec (tensors_from_net (witness' r0 [M]))))\""], ["proof (prove)\nusing this:\n  tensors_from_net (witness r1 r0 [M]) $ j =\n  listsum [M, M] (list_of_vec (tensors_from_net (witness' r0 [M])))\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness r1 r0 [M]) $ j) is =\n    (\\<Sum>A\\<leftarrow>list_of_vec\n                         (tensors_from_net (witness' r0 [M])). lookup A is)", "using lookup_listsum[OF \\<open>is \\<lhd> [M, M]\\<close>]  \\<open>input_sizes (witness' r0 [M]) = [M, M]\\<close>\n    dims_tensors_from_net"], ["proof (prove)\nusing this:\n  tensors_from_net (witness r1 r0 [M]) $ j =\n  listsum [M, M] (list_of_vec (tensors_from_net (witness' r0 [M])))\n  (\\<And>A.\n      A \\<in> set ?As \\<Longrightarrow> dims A = [M, M]) \\<Longrightarrow>\n  lookup (listsum [M, M] ?As) is = (\\<Sum>A\\<leftarrow>?As. lookup A is)\n  input_sizes (witness' r0 [M]) = [M, M]\n  ?T \\<in> set\\<^sub>v (tensors_from_net ?m) \\<Longrightarrow>\n  dims ?T = input_sizes ?m\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness r1 r0 [M]) $ j) is =\n    (\\<Sum>A\\<leftarrow>list_of_vec\n                         (tensors_from_net (witness' r0 [M])). lookup A is)", "by (metis set_list_of_vec)"], ["proof (state)\nthis:\n  lookup (tensors_from_net (witness r1 r0 [M]) $ j) is =\n  (\\<Sum>A\\<leftarrow>list_of_vec\n                       (tensors_from_net (witness' r0 [M])). lookup A is)\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness r1 r0 [M]) $ j) is =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "also"], ["proof (state)\nthis:\n  lookup (tensors_from_net (witness r1 r0 [M]) $ j) is =\n  (\\<Sum>A\\<leftarrow>list_of_vec\n                       (tensors_from_net (witness' r0 [M])). lookup A is)\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness r1 r0 [M]) $ j) is =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "have \"... = monoid_add_class.sum_list (map (\\<lambda>i. lookup (tensors_from_net (witness' r0 [M]) $ i) is) [0..<r0])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>A\\<leftarrow>list_of_vec\n                         (tensors_from_net\n                           (witness' r0 [M])). lookup A is) =\n    (\\<Sum>i\\<leftarrow>[0..<\n                         r0]. lookup\n                               (tensors_from_net (witness' r0 [M]) $ i) is)", "using map_map[of \"(\\<lambda>A. Tensor.lookup A is)\" \"\\<lambda>i. (tensors_from_net (witness' r0 [M]) $ i)\" \"[0..<r0]\"]"], ["proof (prove)\nusing this:\n  map (\\<lambda>A. lookup A is)\n   (map (($) (tensors_from_net (witness' r0 [M]))) [0..<r0]) =\n  map ((\\<lambda>A. lookup A is) \\<circ>\n       ($) (tensors_from_net (witness' r0 [M])))\n   [0..<r0]\n\ngoal (1 subgoal):\n 1. (\\<Sum>A\\<leftarrow>list_of_vec\n                         (tensors_from_net\n                           (witness' r0 [M])). lookup A is) =\n    (\\<Sum>i\\<leftarrow>[0..<\n                         r0]. lookup\n                               (tensors_from_net (witness' r0 [M]) $ i) is)", "using list_of_vec_map \\<open>dim_vec (tensors_from_net (witness' r0 [M])) = r0\\<close>"], ["proof (prove)\nusing this:\n  map (\\<lambda>A. lookup A is)\n   (map (($) (tensors_from_net (witness' r0 [M]))) [0..<r0]) =\n  map ((\\<lambda>A. lookup A is) \\<circ>\n       ($) (tensors_from_net (witness' r0 [M])))\n   [0..<r0]\n  list_of_vec ?xs = map (($) ?xs) [0..<dim_vec ?xs]\n  dim_vec (tensors_from_net (witness' r0 [M])) = r0\n\ngoal (1 subgoal):\n 1. (\\<Sum>A\\<leftarrow>list_of_vec\n                         (tensors_from_net\n                           (witness' r0 [M])). lookup A is) =\n    (\\<Sum>i\\<leftarrow>[0..<\n                         r0]. lookup\n                               (tensors_from_net (witness' r0 [M]) $ i) is)", "by (metis (mono_tags, lifting) comp_apply map_eq_conv)"], ["proof (state)\nthis:\n  (\\<Sum>A\\<leftarrow>list_of_vec\n                       (tensors_from_net (witness' r0 [M])). lookup A is) =\n  (\\<Sum>i\\<leftarrow>[0..<\n                       r0]. lookup (tensors_from_net (witness' r0 [M]) $ i)\n                             is)\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness r1 r0 [M]) $ j) is =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "also"], ["proof (state)\nthis:\n  (\\<Sum>A\\<leftarrow>list_of_vec\n                       (tensors_from_net (witness' r0 [M])). lookup A is) =\n  (\\<Sum>i\\<leftarrow>[0..<\n                       r0]. lookup (tensors_from_net (witness' r0 [M]) $ i)\n                             is)\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness r1 r0 [M]) $ j) is =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "have \"... = (\\<Sum>i<r0. Tensor.lookup ((tensors_from_net (witness' r0 [M])) $ i) is)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<leftarrow>[0..<\n                         r0]. lookup\n                               (tensors_from_net (witness' r0 [M]) $ i)\n                               is) =\n    (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is)", "using sum_set_upt_conv_sum_list_nat atLeast0LessThan"], ["proof (prove)\nusing this:\n  sum ?f (set [?m..<?n]) = sum_list (map ?f [?m..<?n])\n  {0..<?n} = {..<?n}\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<leftarrow>[0..<\n                         r0]. lookup\n                               (tensors_from_net (witness' r0 [M]) $ i)\n                               is) =\n    (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is)", "by (metis atLeast_upt)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<leftarrow>[0..<\n                       r0]. lookup (tensors_from_net (witness' r0 [M]) $ i)\n                             is) =\n  (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is)\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness r1 r0 [M]) $ j) is =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<leftarrow>[0..<\n                       r0]. lookup (tensors_from_net (witness' r0 [M]) $ i)\n                             is) =\n  (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is)\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness r1 r0 [M]) $ j) is =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "have \"... = (if is!0 = is!1 \\<and> is!0<r0 then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "proof (cases \"is!0<r0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. is ! 0 < r0 \\<Longrightarrow>\n    (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)\n 2. \\<not> is ! 0 < r0 \\<Longrightarrow>\n    (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "case True"], ["proof (state)\nthis:\n  is ! 0 < r0\n\ngoal (2 subgoals):\n 1. is ! 0 < r0 \\<Longrightarrow>\n    (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)\n 2. \\<not> is ! 0 < r0 \\<Longrightarrow>\n    (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "have \"finite {0..<r0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {0..<r0}", "by auto"], ["proof (state)\nthis:\n  finite {0..<r0}\n\ngoal (2 subgoals):\n 1. is ! 0 < r0 \\<Longrightarrow>\n    (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)\n 2. \\<not> is ! 0 < r0 \\<Longrightarrow>\n    (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "have \"is!0 \\<in> {0..<r0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is ! 0 \\<in> {0..<r0}", "using True"], ["proof (prove)\nusing this:\n  is ! 0 < r0\n\ngoal (1 subgoal):\n 1. is ! 0 \\<in> {0..<r0}", "by auto"], ["proof (state)\nthis:\n  is ! 0 \\<in> {0..<r0}\n\ngoal (2 subgoals):\n 1. is ! 0 < r0 \\<Longrightarrow>\n    (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)\n 2. \\<not> is ! 0 < r0 \\<Longrightarrow>\n    (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "have \"(\\<Sum>i<r0. Tensor.lookup ((tensors_from_net (witness' r0 [M])) $ i) is)\n      = Tensor.lookup (tensors_from_net (witness' r0 [M]) $ (is!0)) is\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n    lookup (tensors_from_net (witness' r0 [M]) $ (is ! 0)) is", "using \\<open>dim_vec (tensors_from_net (witness' r0 [M])) = r0\\<close>"], ["proof (prove)\nusing this:\n  dim_vec (tensors_from_net (witness' r0 [M])) = r0\n\ngoal (1 subgoal):\n 1. (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n    lookup (tensors_from_net (witness' r0 [M]) $ (is ! 0)) is", "using sum.remove[OF \\<open>finite {0..<r0}\\<close> \\<open>is!0 \\<in> {0..<r0}\\<close>,\n        of \"\\<lambda>i. (Tensor.lookup (tensors_from_net (witness' r0 [M])$i) is)\"]"], ["proof (prove)\nusing this:\n  dim_vec (tensors_from_net (witness' r0 [M])) = r0\n  (\\<Sum>i = 0..<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n  lookup (tensors_from_net (witness' r0 [M]) $ (is ! 0)) is +\n  (\\<Sum>i\\<in>{0..<r0} - {is ! 0}.\n     lookup (tensors_from_net (witness' r0 [M]) $ i) is)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n    lookup (tensors_from_net (witness' r0 [M]) $ (is ! 0)) is", "using all0_but1 atLeast0LessThan"], ["proof (prove)\nusing this:\n  dim_vec (tensors_from_net (witness' r0 [M])) = r0\n  (\\<Sum>i = 0..<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n  lookup (tensors_from_net (witness' r0 [M]) $ (is ! 0)) is +\n  (\\<Sum>i\\<in>{0..<r0} - {is ! 0}.\n     lookup (tensors_from_net (witness' r0 [M]) $ i) is)\n  \\<lbrakk>?i \\<noteq> is ! 0; ?i < r0\\<rbrakk>\n  \\<Longrightarrow> lookup (tensors_from_net (witness' r0 [M]) $ ?i) is = 0\n  {0..<?n} = {..<?n}\n\ngoal (1 subgoal):\n 1. (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n    lookup (tensors_from_net (witness' r0 [M]) $ (is ! 0)) is", "by force"], ["proof (state)\nthis:\n  (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n  lookup (tensors_from_net (witness' r0 [M]) $ (is ! 0)) is\n\ngoal (2 subgoals):\n 1. is ! 0 < r0 \\<Longrightarrow>\n    (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)\n 2. \\<not> is ! 0 < r0 \\<Longrightarrow>\n    (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "then"], ["proof (chain)\npicking this:\n  (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n  lookup (tensors_from_net (witness' r0 [M]) $ (is ! 0)) is", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n  lookup (tensors_from_net (witness' r0 [M]) $ (is ! 0)) is\n\ngoal (1 subgoal):\n 1. (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "using lookup_tensors_ht_l0' \\<open>is ! 0 < r0\\<close> \\<open>is \\<lhd> [M, M]\\<close>"], ["proof (prove)\nusing this:\n  (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n  lookup (tensors_from_net (witness' r0 [M]) $ (is ! 0)) is\n  \\<lbrakk>?j < ?r0.0; ?is \\<lhd> [?M, ?M]\\<rbrakk>\n  \\<Longrightarrow> lookup (tensors_from_net (witness' ?r0.0 [?M]) $ ?j)\n                     ?is =\n                    (if ?is = [?j, ?j] then 1 else 0)\n  is ! 0 < r0\n  is \\<lhd> [M, M]\n\ngoal (1 subgoal):\n 1. (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "by fastforce"], ["proof (state)\nthis:\n  (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n  (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)\n\ngoal (1 subgoal):\n 1. \\<not> is ! 0 < r0 \\<Longrightarrow>\n    (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> is ! 0 < r0 \\<Longrightarrow>\n    (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "case False"], ["proof (state)\nthis:\n  \\<not> is ! 0 < r0\n\ngoal (1 subgoal):\n 1. \\<not> is ! 0 < r0 \\<Longrightarrow>\n    (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "then"], ["proof (chain)\npicking this:\n  \\<not> is ! 0 < r0", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> is ! 0 < r0\n\ngoal (1 subgoal):\n 1. (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "using all0_but1 atLeast0LessThan sum.neutral"], ["proof (prove)\nusing this:\n  \\<not> is ! 0 < r0\n  \\<lbrakk>?i \\<noteq> is ! 0; ?i < r0\\<rbrakk>\n  \\<Longrightarrow> lookup (tensors_from_net (witness' r0 [M]) $ ?i) is = 0\n  {0..<?n} = {..<?n}\n  \\<forall>x\\<in>?A. ?g x = (0::?'a) \\<Longrightarrow> sum ?g ?A = (0::?'a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "by force"], ["proof (state)\nthis:\n  (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n  (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>i<r0. lookup (tensors_from_net (witness' r0 [M]) $ i) is) =\n  (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness r1 r0 [M]) $ j) is =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "finally"], ["proof (chain)\npicking this:\n  lookup (tensors_from_net (witness r1 r0 [M]) $ j) is =\n  (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "show ?thesis"], ["proof (prove)\nusing this:\n  lookup (tensors_from_net (witness r1 r0 [M]) $ j) is =\n  (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness r1 r0 [M]) $ j) is =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)", "by auto"], ["proof (state)\nthis:\n  lookup (tensors_from_net (witness r1 r0 [M]) $ j) is =\n  (if is ! 0 = is ! 1 \\<and> is ! 0 < r0 then 1 else 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma length_output_deep_model:\nassumes \"remove_weights m = deep_model_l rs\"\nshows \"dim_vec (tensors_from_net m) = rs ! 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (tensors_from_net m) = rs ! 0", "using output_size_correct_tensors valid_deep_model\n   deep_model.elims output_size.simps(2)"], ["proof (prove)\nusing this:\n  valid_net' ?m \\<Longrightarrow>\n  output_size' ?m = dim_vec (tensors_from_net ?m)\n  valid_net (deep_model ?Y ?r ?rs)\n  \\<lbrakk>deep_model ?x ?xa ?xb = ?y;\n   \\<And>Y r rs.\n      \\<lbrakk>?x = Y; ?xa = r; ?xb = rs;\n       ?y = Conv (Y, r) (deep_model' r rs)\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n  output_size (Conv (?r0.0, ?r1.0) ?m) = ?r0.0\n\ngoal (1 subgoal):\n 1. dim_vec (tensors_from_net m) = rs ! 0", "by (metis assms)"], ["", "lemma length_output_deep_model':\nassumes \"remove_weights m = deep_model'_l rs\"\nshows \"dim_vec (tensors_from_net m) = rs ! 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (tensors_from_net m) = rs ! 0", "using output_size_correct_tensors valid_deep_model'\n   deep_model'.elims output_size.simps"], ["proof (prove)\nusing this:\n  valid_net' ?m \\<Longrightarrow>\n  output_size' ?m = dim_vec (tensors_from_net ?m)\n  valid_net (deep_model' ?r ?rs)\n  \\<lbrakk>deep_model' ?x ?xa = ?y;\n   \\<And>Y.\n      \\<lbrakk>?x = Y; ?xa = []; ?y = Input Y\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<And>Y r rs.\n      \\<lbrakk>?x = Y; ?xa = r # rs;\n       ?y = Pool (deep_model Y r rs) (deep_model Y r rs)\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n  output_size (Input ?M) = ?M\n  output_size (Conv (?r0.0, ?r1.0) ?m) = ?r0.0\n  output_size (Pool ?m1.0 ?m2.0) = output_size ?m1.0\n\ngoal (1 subgoal):\n 1. dim_vec (tensors_from_net m) = rs ! 0", "by (metis assms deep_model.elims)"], ["", "lemma length_output_witness:\n\"dim_vec (tensors_from_net (witness_l rs)) = rs ! 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (tensors_from_net (witness_l rs)) = rs ! 0", "using length_output_deep_model witness_is_deep_model"], ["proof (prove)\nusing this:\n  remove_weights ?m = deep_model_l ?rs \\<Longrightarrow>\n  dim_vec (tensors_from_net ?m) = ?rs ! 0\n  remove_weights (witness ?Y ?r ?rs) = deep_model ?Y ?r ?rs\n\ngoal (1 subgoal):\n 1. dim_vec (tensors_from_net (witness_l rs)) = rs ! 0", "by blast"], ["", "lemma length_output_witness':\n\"dim_vec (tensors_from_net (witness'_l rs)) = rs ! 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (tensors_from_net (witness'_l rs)) = rs ! 0", "using length_output_deep_model' witness'_is_deep_model"], ["proof (prove)\nusing this:\n  remove_weights ?m = deep_model'_l ?rs \\<Longrightarrow>\n  dim_vec (tensors_from_net ?m) = ?rs ! 0\n  remove_weights (witness' ?Y ?rs) = deep_model' ?Y ?rs\n\ngoal (1 subgoal):\n 1. dim_vec (tensors_from_net (witness'_l rs)) = rs ! 0", "by blast"], ["", "lemma dims_output_deep_model:\nassumes \"length rs \\<ge> 2\"\nand \"\\<And>r. r\\<in>set rs \\<Longrightarrow> r > 0\"\nand \"j < rs!0\"\nand \"remove_weights m = deep_model_l rs\"\nshows \"Tensor.dims (tensors_from_net m $ j) = replicate (2^(length rs - 2)) (last rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dims (tensors_from_net m $ j) =\n    replicate (2 ^ (length rs - 2)) (last rs)", "using dims_tensors_from_net input_sizes_deep_model[OF assms(1)] output_size_correct_tensors valid_deep_model\n  assms(3) assms(4) input_sizes_remove_weights length_output_witness witness_is_deep_model"], ["proof (prove)\nusing this:\n  ?T \\<in> set\\<^sub>v (tensors_from_net ?m) \\<Longrightarrow>\n  dims ?T = input_sizes ?m\n  input_sizes (deep_model_l rs) = replicate (2 ^ (length rs - 2)) (last rs)\n  valid_net' ?m \\<Longrightarrow>\n  output_size' ?m = dim_vec (tensors_from_net ?m)\n  valid_net (deep_model ?Y ?r ?rs)\n  j < rs ! 0\n  remove_weights m = deep_model_l rs\n  input_sizes ?m = input_sizes (remove_weights ?m)\n  dim_vec (tensors_from_net (witness_l ?rs)) = ?rs ! 0\n  remove_weights (witness ?Y ?r ?rs) = deep_model ?Y ?r ?rs\n\ngoal (1 subgoal):\n 1. dims (tensors_from_net m $ j) =\n    replicate (2 ^ (length rs - 2)) (last rs)", "by (metis vec_setI)"], ["", "lemma dims_output_witness:\nassumes \"length rs \\<ge> 2\"\nand \"\\<And>r. r\\<in>set rs \\<Longrightarrow> r > 0\"\nand \"j < rs!0\"\nshows \"Tensor.dims (tensors_from_net (witness_l rs) $ j) = replicate (2^(length rs - 2)) (last rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dims (tensors_from_net (witness_l rs) $ j) =\n    replicate (2 ^ (length rs - 2)) (last rs)", "using dims_output_deep_model witness_is_deep_model assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>2 \\<le> length ?rs;\n   \\<And>r. r \\<in> set ?rs \\<Longrightarrow> 0 < r; ?j < ?rs ! 0;\n   remove_weights ?m = deep_model_l ?rs\\<rbrakk>\n  \\<Longrightarrow> dims (tensors_from_net ?m $ ?j) =\n                    replicate (2 ^ (length ?rs - 2)) (last ?rs)\n  remove_weights (witness ?Y ?r ?rs) = deep_model ?Y ?r ?rs\n  2 \\<le> length rs\n  ?r \\<in> set rs \\<Longrightarrow> 0 < ?r\n  j < rs ! 0\n\ngoal (1 subgoal):\n 1. dims (tensors_from_net (witness_l rs) $ j) =\n    replicate (2 ^ (length rs - 2)) (last rs)", "by blast"], ["", "lemma dims_output_deep_model':\nassumes \"length rs \\<ge> 1\"\nand \"\\<And>r. r\\<in>set rs \\<Longrightarrow> r > 0\"\nand \"j < rs!0\"\nand \"remove_weights m = deep_model'_l rs\"\nshows \"Tensor.dims (tensors_from_net m $ j) = replicate (2^(length rs - 1)) (last rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dims (tensors_from_net m $ j) =\n    replicate (2 ^ (length rs - 1)) (last rs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dims (tensors_from_net m $ j) =\n    replicate (2 ^ (length rs - 1)) (last rs)", "have \"dim_vec (tensors_from_net m) > j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < dim_vec (tensors_from_net m)", "using length_output_deep_model' \\<open>remove_weights m = deep_model'_l rs\\<close> \\<open>j < rs!0\\<close>"], ["proof (prove)\nusing this:\n  remove_weights ?m = deep_model'_l ?rs \\<Longrightarrow>\n  dim_vec (tensors_from_net ?m) = ?rs ! 0\n  remove_weights m = deep_model'_l rs\n  j < rs ! 0\n\ngoal (1 subgoal):\n 1. j < dim_vec (tensors_from_net m)", "by auto"], ["proof (state)\nthis:\n  j < dim_vec (tensors_from_net m)\n\ngoal (1 subgoal):\n 1. dims (tensors_from_net m $ j) =\n    replicate (2 ^ (length rs - 1)) (last rs)", "then"], ["proof (chain)\npicking this:\n  j < dim_vec (tensors_from_net m)", "have \"Tensor.dims (tensors_from_net m $ j) = input_sizes m\""], ["proof (prove)\nusing this:\n  j < dim_vec (tensors_from_net m)\n\ngoal (1 subgoal):\n 1. dims (tensors_from_net m $ j) = input_sizes m", "using dims_tensors_from_net[of _ m] output_size_correct_tensors\n    vec_setI"], ["proof (prove)\nusing this:\n  j < dim_vec (tensors_from_net m)\n  ?T \\<in> set\\<^sub>v (tensors_from_net m) \\<Longrightarrow>\n  dims ?T = input_sizes m\n  valid_net' ?m \\<Longrightarrow>\n  output_size' ?m = dim_vec (tensors_from_net ?m)\n  \\<lbrakk>?v $ ?i = ?a; ?i < dim_vec ?v\\<rbrakk>\n  \\<Longrightarrow> ?a \\<in> set\\<^sub>v ?v\n\ngoal (1 subgoal):\n 1. dims (tensors_from_net m $ j) = input_sizes m", "by metis"], ["proof (state)\nthis:\n  dims (tensors_from_net m $ j) = input_sizes m\n\ngoal (1 subgoal):\n 1. dims (tensors_from_net m $ j) =\n    replicate (2 ^ (length rs - 1)) (last rs)", "then"], ["proof (chain)\npicking this:\n  dims (tensors_from_net m $ j) = input_sizes m", "show ?thesis"], ["proof (prove)\nusing this:\n  dims (tensors_from_net m $ j) = input_sizes m\n\ngoal (1 subgoal):\n 1. dims (tensors_from_net m $ j) =\n    replicate (2 ^ (length rs - 1)) (last rs)", "using assms(1) input_sizes_deep_model'\n    input_sizes_remove_weights[of m, unfolded \\<open>remove_weights m = deep_model'_l rs\\<close>]"], ["proof (prove)\nusing this:\n  dims (tensors_from_net m $ j) = input_sizes m\n  1 \\<le> length rs\n  1 \\<le> length ?rs \\<Longrightarrow>\n  input_sizes (deep_model'_l ?rs) =\n  replicate (2 ^ (length ?rs - 1)) (last ?rs)\n  input_sizes m = input_sizes (deep_model'_l rs)\n\ngoal (1 subgoal):\n 1. dims (tensors_from_net m $ j) =\n    replicate (2 ^ (length rs - 1)) (last rs)", "by auto"], ["proof (state)\nthis:\n  dims (tensors_from_net m $ j) = replicate (2 ^ (length rs - 1)) (last rs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dims_output_witness':\nassumes \"length rs \\<ge> 1\"\nand \"\\<And>r. r\\<in>set rs \\<Longrightarrow> r > 0\"\nand \"j < rs!0\"\nshows \"Tensor.dims (tensors_from_net (witness'_l rs) $ j) = replicate (2^(length rs - 1)) (last rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dims (tensors_from_net (witness'_l rs) $ j) =\n    replicate (2 ^ (length rs - 1)) (last rs)", "using dims_output_deep_model' assms witness'_is_deep_model"], ["proof (prove)\nusing this:\n  \\<lbrakk>1 \\<le> length ?rs;\n   \\<And>r. r \\<in> set ?rs \\<Longrightarrow> 0 < r; ?j < ?rs ! 0;\n   remove_weights ?m = deep_model'_l ?rs\\<rbrakk>\n  \\<Longrightarrow> dims (tensors_from_net ?m $ ?j) =\n                    replicate (2 ^ (length ?rs - 1)) (last ?rs)\n  1 \\<le> length rs\n  ?r \\<in> set rs \\<Longrightarrow> 0 < ?r\n  j < rs ! 0\n  remove_weights (witness' ?Y ?rs) = deep_model' ?Y ?rs\n\ngoal (1 subgoal):\n 1. dims (tensors_from_net (witness'_l rs) $ j) =\n    replicate (2 ^ (length rs - 1)) (last rs)", "by blast"], ["", "abbreviation \"ten2mat == matricize {n. even n}\""], ["", "abbreviation \"mat2ten == dematricize {n. even n}\""], ["", "locale deep_model_correct_params =\nfixes shared_weights::bool\nfixes rs::\"nat list\"\nassumes deep:\"length rs \\<ge> 3\"\nand no_zeros:\"\\<And>r. r\\<in>set rs \\<Longrightarrow> 0 < r\"\nbegin"], ["", "definition \"r = min (last rs) (last (butlast rs))\""], ["", "definition \"N_half = 2^(length rs - 3)\""], ["", "definition \"weight_space_dim = count_weights shared_weights (deep_model_l rs)\""], ["", "end"], ["", "locale deep_model_correct_params_y = deep_model_correct_params +\nfixes y::nat\nassumes y_valid:\"y < rs ! 0\"\nbegin"], ["", "definition A :: \"(nat \\<Rightarrow> real) \\<Rightarrow> real tensor\"\n  where \"A ws = tensors_from_net (insert_weights shared_weights (deep_model_l rs) ws) $ y\""], ["", "definition A' :: \"(nat \\<Rightarrow> real) \\<Rightarrow> real mat\"\n  where \"A' ws = ten2mat (A ws)\""], ["", "lemma dims_tensor_deep_model:\nassumes \"remove_weights m = deep_model_l rs\"\nshows \"dims (tensors_from_net m $ y) = replicate (2 * N_half) (last rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dims (tensors_from_net m $ y) = replicate (2 * N_half) (last rs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dims (tensors_from_net m $ y) = replicate (2 * N_half) (last rs)", "have \"dims (tensors_from_net m $ y) = replicate (2 ^ (length rs - 2)) (last rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dims (tensors_from_net m $ y) =\n    replicate (2 ^ (length rs - 2)) (last rs)", "using dims_output_deep_model[OF _ no_zeros y_valid assms]"], ["proof (prove)\nusing this:\n  \\<lbrakk>2 \\<le> length rs;\n   \\<And>r. r \\<in> set rs \\<Longrightarrow> r \\<in> set rs\\<rbrakk>\n  \\<Longrightarrow> dims (tensors_from_net m $ y) =\n                    replicate (2 ^ (length rs - 2)) (last rs)\n\ngoal (1 subgoal):\n 1. dims (tensors_from_net m $ y) =\n    replicate (2 ^ (length rs - 2)) (last rs)", "using less_imp_le_nat Suc_le_lessD deep numeral_3_eq_3"], ["proof (prove)\nusing this:\n  \\<lbrakk>2 \\<le> length rs;\n   \\<And>r. r \\<in> set rs \\<Longrightarrow> r \\<in> set rs\\<rbrakk>\n  \\<Longrightarrow> dims (tensors_from_net m $ y) =\n                    replicate (2 ^ (length rs - 2)) (last rs)\n  ?m < ?n \\<Longrightarrow> ?m \\<le> ?n\n  Suc ?m \\<le> ?n \\<Longrightarrow> ?m < ?n\n  3 \\<le> length rs\n  3 = Suc (Suc (Suc 0))\n\ngoal (1 subgoal):\n 1. dims (tensors_from_net m $ y) =\n    replicate (2 ^ (length rs - 2)) (last rs)", "by auto"], ["proof (state)\nthis:\n  dims (tensors_from_net m $ y) = replicate (2 ^ (length rs - 2)) (last rs)\n\ngoal (1 subgoal):\n 1. dims (tensors_from_net m $ y) = replicate (2 * N_half) (last rs)", "then"], ["proof (chain)\npicking this:\n  dims (tensors_from_net m $ y) = replicate (2 ^ (length rs - 2)) (last rs)", "show ?thesis"], ["proof (prove)\nusing this:\n  dims (tensors_from_net m $ y) = replicate (2 ^ (length rs - 2)) (last rs)\n\ngoal (1 subgoal):\n 1. dims (tensors_from_net m $ y) = replicate (2 * N_half) (last rs)", "using N_half_def"], ["proof (prove)\nusing this:\n  dims (tensors_from_net m $ y) = replicate (2 ^ (length rs - 2)) (last rs)\n  N_half = (2::?'a) ^ (length rs - 3)\n\ngoal (1 subgoal):\n 1. dims (tensors_from_net m $ y) = replicate (2 * N_half) (last rs)", "by (metis One_nat_def Suc_1 Suc_eq_plus1 Suc_le_lessD deep\n    diff_diff_left less_numeral_extra(3) numeral_3_eq_3 power_eq_if zero_less_diff)"], ["proof (state)\nthis:\n  dims (tensors_from_net m $ y) = replicate (2 * N_half) (last rs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma order_tensor_deep_model:\nassumes \"remove_weights m = deep_model_l rs\"\nshows \"order (tensors_from_net m $ y) = 2 * N_half\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order (tensors_from_net m $ y) = 2 * N_half", "using dims_tensor_deep_model"], ["proof (prove)\nusing this:\n  remove_weights ?m = deep_model_l rs \\<Longrightarrow>\n  dims (tensors_from_net ?m $ y) = replicate (2 * N_half) (last rs)\n\ngoal (1 subgoal):\n 1. order (tensors_from_net m $ y) = 2 * N_half", "by (simp add: assms)"], ["", "lemma dims_A:\nshows \"Tensor.dims (A ws) = replicate (2 * N_half) (last rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dims (A ws) = replicate (2 * N_half) (last rs)", "unfolding A_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dims\n     (tensors_from_net\n       (insert_weights shared_weights (deep_model_l rs) ws) $\n      y) =\n    replicate (2 * N_half) (last rs)", "using dims_tensor_deep_model remove_insert_weights"], ["proof (prove)\nusing this:\n  remove_weights ?m = deep_model_l rs \\<Longrightarrow>\n  dims (tensors_from_net ?m $ y) = replicate (2 * N_half) (last rs)\n  remove_weights (insert_weights ?s ?m ?w) = ?m\n\ngoal (1 subgoal):\n 1. dims\n     (tensors_from_net\n       (insert_weights shared_weights (deep_model_l rs) ws) $\n      y) =\n    replicate (2 * N_half) (last rs)", "by blast"], ["", "lemma order_A:\nshows \"order (A ws) = 2 * N_half\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order (A ws) = 2 * N_half", "using dims_A length_replicate"], ["proof (prove)\nusing this:\n  dims (A ?ws) = replicate (2 * N_half) (last rs)\n  length (replicate ?n ?x) = ?n\n\ngoal (1 subgoal):\n 1. order (A ws) = 2 * N_half", "by auto"], ["", "lemma dims_A':\nshows \"dim_row (A' ws) = prod_list (nths (Tensor.dims (A ws)) {n. even n})\"\nand \"dim_col (A' ws) = prod_list (nths (Tensor.dims (A ws)) {n. odd n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (A' ws) = prod_list (nths (dims (A ws)) (Collect even)) &&&\n    dim_col (A' ws) = prod_list (nths (dims (A ws)) {n. odd n})", "unfolding A'_def matricize_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row\n     (mat (prod_list (nths (dims (A ws)) (Collect even)))\n       (prod_list (nths (dims (A ws)) (- Collect even)))\n       (\\<lambda>(r, c).\n           lookup (A ws)\n            (weave (Collect even)\n              (digit_encode (nths (dims (A ws)) (Collect even)) r)\n              (digit_encode (nths (dims (A ws)) (- Collect even)) c)))) =\n    prod_list (nths (dims (A ws)) (Collect even)) &&&\n    dim_col\n     (mat (prod_list (nths (dims (A ws)) (Collect even)))\n       (prod_list (nths (dims (A ws)) (- Collect even)))\n       (\\<lambda>(r, c).\n           lookup (A ws)\n            (weave (Collect even)\n              (digit_encode (nths (dims (A ws)) (Collect even)) r)\n              (digit_encode (nths (dims (A ws)) (- Collect even)) c)))) =\n    prod_list (nths (dims (A ws)) {n. odd n})", "by (simp_all add: A_def Collect_neg_eq)"], ["", "lemma dims_A'_pow:\nshows \"dim_row (A' ws) = (last rs) ^ N_half\" \"dim_col (A' ws) = (last rs) ^ N_half\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (A' ws) = last rs ^ N_half &&&\n    dim_col (A' ws) = last rs ^ N_half", "unfolding dims_A' dims_A nths_replicate set_le_in card_even card_odd prod_list_replicate"], ["proof (prove)\ngoal (1 subgoal):\n 1. last rs ^ N_half = last rs ^ N_half &&&\n    last rs ^ N_half = last rs ^ N_half", "by simp_all"], ["", "definition \"Aw = tensors_from_net (witness_l rs) $ y\""], ["", "definition \"Aw' = ten2mat Aw\""], ["", "definition \"witness_weights = extract_weights shared_weights (witness_l rs)\""], ["", "lemma witness_weights:\"witness_l rs = insert_weights shared_weights (deep_model_l rs) witness_weights\""], ["proof (prove)\ngoal (1 subgoal):\n 1. witness_l rs =\n    insert_weights shared_weights (deep_model_l rs) witness_weights", "by (metis (full_types) insert_extract_weights_cong_shared insert_extract_weights_cong_unshared shared_weight_net_witness witness_is_deep_model witness_weights_def)"], ["", "lemma Aw_def': \"Aw = A witness_weights\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aw = A witness_weights", "unfolding Aw_def A_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. tensors_from_net (witness_l rs) $ y =\n    tensors_from_net\n     (insert_weights shared_weights (deep_model_l rs) witness_weights) $\n    y", "using witness_weights"], ["proof (prove)\nusing this:\n  witness_l rs =\n  insert_weights shared_weights (deep_model_l rs) witness_weights\n\ngoal (1 subgoal):\n 1. tensors_from_net (witness_l rs) $ y =\n    tensors_from_net\n     (insert_weights shared_weights (deep_model_l rs) witness_weights) $\n    y", "by auto"], ["", "lemma Aw'_def': \"Aw' = A' witness_weights\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aw' = A' witness_weights", "unfolding Aw'_def A'_def Aw_def'"], ["proof (prove)\ngoal (1 subgoal):\n 1. ten2mat (A witness_weights) = ten2mat (A witness_weights)", "by auto"], ["", "lemma dims_Aw: \"Tensor.dims Aw = replicate (2 * N_half) (last rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dims Aw = replicate (2 * N_half) (last rs)", "unfolding Aw_def'"], ["proof (prove)\ngoal (1 subgoal):\n 1. dims (A witness_weights) = replicate (2 * N_half) (last rs)", "using dims_A"], ["proof (prove)\nusing this:\n  dims (A ?ws) = replicate (2 * N_half) (last rs)\n\ngoal (1 subgoal):\n 1. dims (A witness_weights) = replicate (2 * N_half) (last rs)", "by auto"], ["", "lemma order_Aw: \"order Aw = 2 * N_half\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order Aw = 2 * N_half", "unfolding Aw_def'"], ["proof (prove)\ngoal (1 subgoal):\n 1. order (A witness_weights) = 2 * N_half", "using order_A"], ["proof (prove)\nusing this:\n  order (A ?ws) = 2 * N_half\n\ngoal (1 subgoal):\n 1. order (A witness_weights) = 2 * N_half", "by auto"], ["", "lemma dims_Aw':\n\"dim_row Aw' = prod_list (nths (Tensor.dims Aw) {n. even n})\"\n\"dim_col Aw' = prod_list (nths (Tensor.dims Aw) {n. odd n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row Aw' = prod_list (nths (dims Aw) (Collect even)) &&&\n    dim_col Aw' = prod_list (nths (dims Aw) {n. odd n})", "unfolding Aw'_def' Aw_def'"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (A' witness_weights) =\n    prod_list (nths (dims (A witness_weights)) (Collect even)) &&&\n    dim_col (A' witness_weights) =\n    prod_list (nths (dims (A witness_weights)) {n. odd n})", "using dims_A'"], ["proof (prove)\nusing this:\n  dim_row (A' ?ws) = prod_list (nths (dims (A ?ws)) (Collect even))\n  dim_col (A' ?ws) = prod_list (nths (dims (A ?ws)) {n. odd n})\n\ngoal (1 subgoal):\n 1. dim_row (A' witness_weights) =\n    prod_list (nths (dims (A witness_weights)) (Collect even)) &&&\n    dim_col (A' witness_weights) =\n    prod_list (nths (dims (A witness_weights)) {n. odd n})", "by auto"], ["", "lemma dims_Aw'_pow: \"dim_row Aw' = (last rs) ^ N_half\" \"dim_col Aw' = (last rs) ^ N_half\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row Aw' = last rs ^ N_half &&& dim_col Aw' = last rs ^ N_half", "unfolding Aw'_def' Aw_def'"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (A' witness_weights) = last rs ^ N_half &&&\n    dim_col (A' witness_weights) = last rs ^ N_half", "using dims_A'_pow"], ["proof (prove)\nusing this:\n  dim_row (A' ?ws) = last rs ^ N_half\n  dim_col (A' ?ws) = last rs ^ N_half\n\ngoal (1 subgoal):\n 1. dim_row (A' witness_weights) = last rs ^ N_half &&&\n    dim_col (A' witness_weights) = last rs ^ N_half", "by auto"], ["", "lemma witness_tensor:\nassumes \"is \\<lhd> Tensor.dims Aw\"\nshows \"Tensor.lookup Aw is\n   = (if nths is {n. even n} = nths is {n. odd n} \\<and> (\\<forall>i\\<in>set is. i < last (butlast rs)) then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup Aw is =\n    (if nths is (Collect even) = nths is {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is. i < last (butlast rs))\n     then 1 else 0)", "using assms deep no_zeros y_valid"], ["proof (prove)\nusing this:\n  is \\<lhd> dims Aw\n  3 \\<le> length rs\n  ?r \\<in> set rs \\<Longrightarrow> 0 < ?r\n  y < rs ! 0\n\ngoal (1 subgoal):\n 1. lookup Aw is =\n    (if nths is (Collect even) = nths is {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is. i < last (butlast rs))\n     then 1 else 0)", "unfolding Aw_def"], ["proof (prove)\nusing this:\n  is \\<lhd> dims (tensors_from_net (witness_l rs) $ y)\n  3 \\<le> length rs\n  ?r \\<in> set rs \\<Longrightarrow> 0 < ?r\n  y < rs ! 0\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness_l rs) $ y) is =\n    (if nths is (Collect even) = nths is {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is. i < last (butlast rs))\n     then 1 else 0)", "proof (induction \"butlast (butlast (butlast rs))\" arbitrary:rs \"is\" y)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>rs is y.\n       \\<lbrakk>[] = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)\n 2. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "case Nil"], ["proof (state)\nthis:\n  [] = butlast (butlast (butlast rs))\n  is \\<lhd> dims (tensors_from_net (witness_l rs) $ y)\n  3 \\<le> length rs\n  ?r1 \\<in> set rs \\<Longrightarrow> 0 < ?r1\n  y < rs ! 0\n\ngoal (2 subgoals):\n 1. \\<And>rs is y.\n       \\<lbrakk>[] = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)\n 2. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "have \"length rs = 3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length rs = 3", "by (rule antisym, metis Nil.hyps One_nat_def Suc_1 Suc_eq_plus1 add_2_eq_Suc' diff_diff_left\n      length_butlast less_numeral_extra(3) list.size(3) not_le numeral_3_eq_3 zero_less_diff, metis \\<open>3 \\<le> length rs\\<close>)"], ["proof (state)\nthis:\n  length rs = 3\n\ngoal (2 subgoals):\n 1. \\<And>rs is y.\n       \\<lbrakk>[] = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)\n 2. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "then"], ["proof (chain)\npicking this:\n  length rs = 3", "have \"rs = [rs!0, rs!1, rs!2]\""], ["proof (prove)\nusing this:\n  length rs = 3\n\ngoal (1 subgoal):\n 1. rs = [rs ! 0, rs ! 1, rs ! 2]", "by (metis (no_types, lifting) Cons_nth_drop_Suc One_nat_def Suc_eq_plus1\n    append_Nil id_take_nth_drop length_0_conv length_tl lessI list.sel(3) list.size(4) not_le numeral_3_eq_3\n    numeral_le_one_iff one_add_one semiring_norm(70) take_0 zero_less_Suc)"], ["proof (state)\nthis:\n  rs = [rs ! 0, rs ! 1, rs ! 2]\n\ngoal (2 subgoals):\n 1. \\<And>rs is y.\n       \\<lbrakk>[] = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)\n 2. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "have \"input_sizes (witness_l [rs ! 0, rs ! 1, rs ! 2]) = [rs!2, rs!2]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. input_sizes (witness_l [rs ! 0, rs ! 1, rs ! 2]) = [rs ! 2, rs ! 2]", "using witness.simps  witness'.simps input_sizes.simps"], ["proof (prove)\nusing this:\n  witness ?Y ?r ?rs =\n  Conv\n   ((if length ?rs = 0 then id_matrix\n     else if length ?rs = 1 then all1_matrix else copy_first_matrix)\n     ?Y ?r)\n   (witness' ?r ?rs)\n  witness' ?Y [] = Input ?Y\n  witness' ?Y (?r # ?rs) = Pool (witness ?Y ?r ?rs) (witness ?Y ?r ?rs)\n  input_sizes (Input ?M) = [?M]\n  input_sizes (Conv ?A ?m) = input_sizes ?m\n  input_sizes (Pool ?m1.0 ?m2.0) = input_sizes ?m1.0 @ input_sizes ?m2.0\n\ngoal (1 subgoal):\n 1. input_sizes (witness_l [rs ! 0, rs ! 1, rs ! 2]) = [rs ! 2, rs ! 2]", "by auto"], ["proof (state)\nthis:\n  input_sizes (witness_l [rs ! 0, rs ! 1, rs ! 2]) = [rs ! 2, rs ! 2]\n\ngoal (2 subgoals):\n 1. \\<And>rs is y.\n       \\<lbrakk>[] = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)\n 2. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "then"], ["proof (chain)\npicking this:\n  input_sizes (witness_l [rs ! 0, rs ! 1, rs ! 2]) = [rs ! 2, rs ! 2]", "have \"Tensor.dims (tensors_from_net (witness_l rs) $ y) = [rs!2, rs!2]\""], ["proof (prove)\nusing this:\n  input_sizes (witness_l [rs ! 0, rs ! 1, rs ! 2]) = [rs ! 2, rs ! 2]\n\ngoal (1 subgoal):\n 1. dims (tensors_from_net (witness_l rs) $ y) = [rs ! 2, rs ! 2]", "using dims_tensors_from_net[of \"tensors_from_net (witness_l rs) $ y\" \"witness_l rs\"]\n      Nil.prems(4) length_output_witness \\<open>rs = [rs ! 0, rs ! 1, rs ! 2]\\<close> vec_setI"], ["proof (prove)\nusing this:\n  input_sizes (witness_l [rs ! 0, rs ! 1, rs ! 2]) = [rs ! 2, rs ! 2]\n  tensors_from_net (witness_l rs) $ y\n  \\<in> set\\<^sub>v (tensors_from_net (witness_l rs)) \\<Longrightarrow>\n  dims (tensors_from_net (witness_l rs) $ y) = input_sizes (witness_l rs)\n  y < rs ! 0\n  dim_vec (tensors_from_net (witness_l ?rs)) = ?rs ! 0\n  rs = [rs ! 0, rs ! 1, rs ! 2]\n  \\<lbrakk>?v $ ?i = ?a; ?i < dim_vec ?v\\<rbrakk>\n  \\<Longrightarrow> ?a \\<in> set\\<^sub>v ?v\n\ngoal (1 subgoal):\n 1. dims (tensors_from_net (witness_l rs) $ y) = [rs ! 2, rs ! 2]", "by metis"], ["proof (state)\nthis:\n  dims (tensors_from_net (witness_l rs) $ y) = [rs ! 2, rs ! 2]\n\ngoal (2 subgoals):\n 1. \\<And>rs is y.\n       \\<lbrakk>[] = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)\n 2. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "then"], ["proof (chain)\npicking this:\n  dims (tensors_from_net (witness_l rs) $ y) = [rs ! 2, rs ! 2]", "have \"is \\<lhd> [rs!2, rs!2]\""], ["proof (prove)\nusing this:\n  dims (tensors_from_net (witness_l rs) $ y) = [rs ! 2, rs ! 2]\n\ngoal (1 subgoal):\n 1. is \\<lhd> [rs ! 2, rs ! 2]", "using Nil.prems"], ["proof (prove)\nusing this:\n  dims (tensors_from_net (witness_l rs) $ y) = [rs ! 2, rs ! 2]\n  is \\<lhd> dims (tensors_from_net (witness_l rs) $ y)\n  3 \\<le> length rs\n  ?r1 \\<in> set rs \\<Longrightarrow> 0 < ?r1\n  y < rs ! 0\n\ngoal (1 subgoal):\n 1. is \\<lhd> [rs ! 2, rs ! 2]", "by metis"], ["proof (state)\nthis:\n  is \\<lhd> [rs ! 2, rs ! 2]\n\ngoal (2 subgoals):\n 1. \\<And>rs is y.\n       \\<lbrakk>[] = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)\n 2. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "then"], ["proof (chain)\npicking this:\n  is \\<lhd> [rs ! 2, rs ! 2]", "have \"Tensor.lookup ((tensors_from_net (witness_l rs))$y) is\n    = (if is ! 0 = is ! 1 \\<and> is ! 0 < rs ! 1 then 1 else 0)\""], ["proof (prove)\nusing this:\n  is \\<lhd> [rs ! 2, rs ! 2]\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness_l rs) $ y) is =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < rs ! 1 then 1 else 0)", "using Nil.prems(4) \\<open>rs = [rs ! 0, rs ! 1, rs ! 2]\\<close>"], ["proof (prove)\nusing this:\n  is \\<lhd> [rs ! 2, rs ! 2]\n  y < rs ! 0\n  rs = [rs ! 0, rs ! 1, rs ! 2]\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness_l rs) $ y) is =\n    (if is ! 0 = is ! 1 \\<and> is ! 0 < rs ! 1 then 1 else 0)", "by (metis list.sel(3) lookup_tensors_ht_l1)"], ["proof (state)\nthis:\n  lookup (tensors_from_net (witness_l rs) $ y) is =\n  (if is ! 0 = is ! 1 \\<and> is ! 0 < rs ! 1 then 1 else 0)\n\ngoal (2 subgoals):\n 1. \\<And>rs is y.\n       \\<lbrakk>[] = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)\n 2. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "have \"is ! 0 = is ! 1 \\<and> is ! 0 < rs ! 1\n    \\<longleftrightarrow> nths is {n. even n} = nths is {n. odd n} \\<and> (\\<forall>i\\<in>set is. i < last (butlast rs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (is ! 0 = is ! 1 \\<and> is ! 0 < rs ! 1) =\n    (nths is (Collect even) = nths is {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is. i < last (butlast rs)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (is ! 0 = is ! 1 \\<and> is ! 0 < rs ! 1) =\n    (nths is (Collect even) = nths is {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is. i < last (butlast rs)))", "have \"length is = 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length is = 2", "by (metis One_nat_def Suc_eq_plus1 \\<open>is \\<lhd> [rs ! 2, rs ! 2]\\<close> list.size(3) list.size(4) numeral_2_eq_2 valid_index_length)"], ["proof (state)\nthis:\n  length is = 2\n\ngoal (1 subgoal):\n 1. (is ! 0 = is ! 1 \\<and> is ! 0 < rs ! 1) =\n    (nths is (Collect even) = nths is {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is. i < last (butlast rs)))", "have \"nths is {n. even n} = [is!0]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths is (Collect even) = [is ! 0]", "apply (rule nths_only_one)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i < length is \\<and> i \\<in> Collect even} = {0}", "using subset_antisym less_2_cases \\<open>length is = 2\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>?A \\<subseteq> ?B; ?B \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> ?A = ?B\n  ?n < 2 \\<Longrightarrow> ?n = 0 \\<or> ?n = Suc 0\n  length is = 2\n\ngoal (1 subgoal):\n 1. {i. i < length is \\<and> i \\<in> Collect even} = {0}", "by fastforce"], ["proof (state)\nthis:\n  nths is (Collect even) = [is ! 0]\n\ngoal (1 subgoal):\n 1. (is ! 0 = is ! 1 \\<and> is ! 0 < rs ! 1) =\n    (nths is (Collect even) = nths is {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is. i < last (butlast rs)))", "have \"nths is {n. odd n} = [is!1]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths is {n. odd n} = [is ! 1]", "apply (rule nths_only_one)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i < length is \\<and> i \\<in> {n. odd n}} = {1}", "using subset_antisym less_2_cases \\<open>length is = 2\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>?A \\<subseteq> ?B; ?B \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> ?A = ?B\n  ?n < 2 \\<Longrightarrow> ?n = 0 \\<or> ?n = Suc 0\n  length is = 2\n\ngoal (1 subgoal):\n 1. {i. i < length is \\<and> i \\<in> {n. odd n}} = {1}", "by fastforce"], ["proof (state)\nthis:\n  nths is {n. odd n} = [is ! 1]\n\ngoal (1 subgoal):\n 1. (is ! 0 = is ! 1 \\<and> is ! 0 < rs ! 1) =\n    (nths is (Collect even) = nths is {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is. i < last (butlast rs)))", "have \"last (butlast rs) = rs!1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last (butlast rs) = rs ! 1", "by (metis One_nat_def Suc_eq_plus1 \\<open>rs = [rs ! 0, rs ! 1, rs ! 2]\\<close>\n      append_butlast_last_id last_conv_nth length_butlast length_tl lessI list.sel(3) list.simps(3)\n      list.size(3) list.size(4) nat.simps(3) nth_append)"], ["proof (state)\nthis:\n  last (butlast rs) = rs ! 1\n\ngoal (1 subgoal):\n 1. (is ! 0 = is ! 1 \\<and> is ! 0 < rs ! 1) =\n    (nths is (Collect even) = nths is {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is. i < last (butlast rs)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (is ! 0 = is ! 1 \\<and> is ! 0 < rs ! 1) =\n    (nths is (Collect even) = nths is {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is. i < last (butlast rs)))", "unfolding \\<open>last (butlast rs) = rs!1\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (is ! 0 = is ! 1 \\<and> is ! 0 < rs ! 1) =\n    (nths is (Collect even) = nths is {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is. i < rs ! 1))", "apply (rule iffI; rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. is ! 0 = is ! 1 \\<and> is ! 0 < rs ! 1 \\<Longrightarrow>\n    nths is (Collect even) = nths is {n. odd n}\n 2. is ! 0 = is ! 1 \\<and> is ! 0 < rs ! 1 \\<Longrightarrow>\n    \\<forall>i\\<in>set is. i < rs ! 1\n 3. nths is (Collect even) = nths is {n. odd n} \\<and>\n    (\\<forall>i\\<in>set is. i < rs ! 1) \\<Longrightarrow>\n    is ! 0 = is ! 1\n 4. nths is (Collect even) = nths is {n. odd n} \\<and>\n    (\\<forall>i\\<in>set is. i < rs ! 1) \\<Longrightarrow>\n    is ! 0 < rs ! 1", "apply (simp add: \\<open>nths is (Collect even) = [is ! 0]\\<close> \\<open>nths is {n. odd n} = [is ! 1]\\<close>)"], ["proof (prove)\ngoal (3 subgoals):\n 1. is ! 0 = is ! 1 \\<and> is ! 0 < rs ! 1 \\<Longrightarrow>\n    \\<forall>i\\<in>set is. i < rs ! 1\n 2. nths is (Collect even) = nths is {n. odd n} \\<and>\n    (\\<forall>i\\<in>set is. i < rs ! 1) \\<Longrightarrow>\n    is ! 0 = is ! 1\n 3. nths is (Collect even) = nths is {n. odd n} \\<and>\n    (\\<forall>i\\<in>set is. i < rs ! 1) \\<Longrightarrow>\n    is ! 0 < rs ! 1", "apply (metis \\<open>length is = 2\\<close> One_nat_def in_set_conv_nth less_2_cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. nths is (Collect even) = nths is {n. odd n} \\<and>\n    (\\<forall>i\\<in>set is. i < rs ! 1) \\<Longrightarrow>\n    is ! 0 = is ! 1\n 2. nths is (Collect even) = nths is {n. odd n} \\<and>\n    (\\<forall>i\\<in>set is. i < rs ! 1) \\<Longrightarrow>\n    is ! 0 < rs ! 1", "apply (simp add: \\<open>nths is (Collect even) = [is ! 0]\\<close> \\<open>nths is {n. odd n} = [is ! 1]\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths is (Collect even) = nths is {n. odd n} \\<and>\n    (\\<forall>i\\<in>set is. i < rs ! 1) \\<Longrightarrow>\n    is ! 0 < rs ! 1", "apply (simp add: \\<open>length is = 2\\<close>)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (is ! 0 = is ! 1 \\<and> is ! 0 < rs ! 1) =\n  (nths is (Collect even) = nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (is ! 0 = is ! 1 \\<and> is ! 0 < rs ! 1) =\n  (nths is (Collect even) = nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs)))\n\ngoal (2 subgoals):\n 1. \\<And>rs is y.\n       \\<lbrakk>[] = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)\n 2. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "then"], ["proof (chain)\npicking this:\n  (is ! 0 = is ! 1 \\<and> is ! 0 < rs ! 1) =\n  (nths is (Collect even) = nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs)))", "show ?case"], ["proof (prove)\nusing this:\n  (is ! 0 = is ! 1 \\<and> is ! 0 < rs ! 1) =\n  (nths is (Collect even) = nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs)))\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness_l rs) $ y) is =\n    (if nths is (Collect even) = nths is {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is. i < last (butlast rs))\n     then 1 else 0)", "unfolding \\<open>Tensor.lookup (tensors_from_net (witness_l rs) $ y) is = (if is ! 0 = is ! 1 \\<and> is ! 0 < rs ! 1 then 1 else 0)\\<close>"], ["proof (prove)\nusing this:\n  (is ! 0 = is ! 1 \\<and> is ! 0 < rs ! 1) =\n  (nths is (Collect even) = nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs)))\n\ngoal (1 subgoal):\n 1. (if is ! 0 = is ! 1 \\<and> is ! 0 < rs ! 1 then 1 else 0) =\n    (if nths is (Collect even) = nths is {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is. i < last (butlast rs))\n     then 1 else 0)", "using witness_is_deep_model witness_valid \\<open>rs = [rs ! 0, rs ! 1, rs ! 2]\\<close>"], ["proof (prove)\nusing this:\n  (is ! 0 = is ! 1 \\<and> is ! 0 < rs ! 1) =\n  (nths is (Collect even) = nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs)))\n  remove_weights (witness ?Y ?r ?rs) = deep_model ?Y ?r ?rs\n  valid_net' (witness ?Y ?r ?rs)\n  rs = [rs ! 0, rs ! 1, rs ! 2]\n\ngoal (1 subgoal):\n 1. (if is ! 0 = is ! 1 \\<and> is ! 0 < rs ! 1 then 1 else 0) =\n    (if nths is (Collect even) = nths is {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is. i < last (butlast rs))\n     then 1 else 0)", "by auto"], ["proof (state)\nthis:\n  lookup (tensors_from_net (witness_l rs) $ y) is =\n  (if nths is (Collect even) = nths is {n. odd n} \\<and>\n      (\\<forall>i\\<in>set is. i < last (butlast rs))\n   then 1 else 0)\n\ngoal (1 subgoal):\n 1. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "case (Cons r rs' rs \"is\" j)"], ["proof (state)\nthis:\n  \\<lbrakk>rs' = butlast (butlast (butlast ?rs1));\n   ?is1 \\<lhd> dims (tensors_from_net (witness_l ?rs1) $ ?y1);\n   3 \\<le> length ?rs1; \\<And>r. r \\<in> set ?rs1 \\<Longrightarrow> 0 < r;\n   ?y1 < ?rs1 ! 0\\<rbrakk>\n  \\<Longrightarrow> lookup (tensors_from_net (witness_l ?rs1) $ ?y1) ?is1 =\n                    (if nths ?is1 (Collect even) =\n                        nths ?is1 {n. odd n} \\<and>\n                        (\\<forall>i\\<in>set ?is1. i < last (butlast ?rs1))\n                     then 1 else 0)\n  r # rs' = butlast (butlast (butlast rs))\n  is \\<lhd> dims (tensors_from_net (witness_l rs) $ j)\n  3 \\<le> length rs\n  ?r1 \\<in> set rs \\<Longrightarrow> 0 < ?r1\n  j < rs ! 0\n\ngoal (1 subgoal):\n 1. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "text \\<open>We prove the Induction Hypothesis for \"tl rs\" and j=0:\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>rs' = butlast (butlast (butlast ?rs1));\n   ?is1 \\<lhd> dims (tensors_from_net (witness_l ?rs1) $ ?y1);\n   3 \\<le> length ?rs1; \\<And>r. r \\<in> set ?rs1 \\<Longrightarrow> 0 < r;\n   ?y1 < ?rs1 ! 0\\<rbrakk>\n  \\<Longrightarrow> lookup (tensors_from_net (witness_l ?rs1) $ ?y1) ?is1 =\n                    (if nths ?is1 (Collect even) =\n                        nths ?is1 {n. odd n} \\<and>\n                        (\\<forall>i\\<in>set ?is1. i < last (butlast ?rs1))\n                     then 1 else 0)\n  r # rs' = butlast (butlast (butlast rs))\n  is \\<lhd> dims (tensors_from_net (witness_l rs) $ j)\n  3 \\<le> length rs\n  ?r1 \\<in> set rs \\<Longrightarrow> 0 < ?r1\n  j < rs ! 0\n\ngoal (1 subgoal):\n 1. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "have \"rs = r # tl rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rs = r # tl rs", "by (metis Cons.hyps(2) append_butlast_last_id butlast.simps(1) hd_append2 list.collapse list.discI list.sel(1))"], ["proof (state)\nthis:\n  rs = r # tl rs\n\ngoal (1 subgoal):\n 1. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "have 1:\"rs' = butlast (butlast (butlast (tl rs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rs' = butlast (butlast (butlast (tl rs)))", "by (metis Cons.hyps(2) butlast_tl list.sel(3))"], ["proof (state)\nthis:\n  rs' = butlast (butlast (butlast (tl rs)))\n\ngoal (1 subgoal):\n 1. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "have 2:\"3 \\<le> length (tl rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 3 \\<le> length (tl rs)", "by (metis (no_types, lifting) Cons.hyps(2) Cons.prems(2)\n    Nitpick.size_list_simp(2) One_nat_def Suc_eq_plus1 \\<open>rs = r # tl rs\\<close> \\<open>rs' = butlast (butlast (butlast (tl rs)))\\<close>\n    diff_diff_left diff_self_eq_0 gr0_conv_Suc le_Suc_eq length_butlast length_tl less_numeral_extra(3) list.simps(3) numeral_3_eq_3)"], ["proof (state)\nthis:\n  3 \\<le> length (tl rs)\n\ngoal (1 subgoal):\n 1. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "have 3:\"\\<And>r. r \\<in> set (tl rs) \\<Longrightarrow> 0 < r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r. r \\<in> set (tl rs) \\<Longrightarrow> 0 < r", "by (metis Cons.prems(3) list.sel(2) list.set_sel(2))"], ["proof (state)\nthis:\n  ?r1 \\<in> set (tl rs) \\<Longrightarrow> 0 < ?r1\n\ngoal (1 subgoal):\n 1. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "have 4:\"0 < (tl rs) ! 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < tl rs ! 0", "using \"2\" \"3\""], ["proof (prove)\nusing this:\n  3 \\<le> length (tl rs)\n  ?r1 \\<in> set (tl rs) \\<Longrightarrow> 0 < ?r1\n\ngoal (1 subgoal):\n 1. 0 < tl rs ! 0", "by auto"], ["proof (state)\nthis:\n  0 < tl rs ! 0\n\ngoal (1 subgoal):\n 1. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "have IH: \"\\<And>is'. is' \\<lhd> Tensor.dims (tensors_from_net (witness_l (tl rs)) $ 0)\n    \\<Longrightarrow> Tensor.lookup (tensors_from_net (witness_l (tl rs)) $ 0) is' =\n    (if nths is' (Collect even) = nths is' {n. odd n} \\<and> (\\<forall>i\\<in>set is'. i < last (butlast (tl rs))) then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>is'.\n       is' \\<lhd>\n       dims (tensors_from_net (witness_l (tl rs)) $ 0) \\<Longrightarrow>\n       lookup (tensors_from_net (witness_l (tl rs)) $ 0) is' =\n       (if nths is' (Collect even) = nths is' {n. odd n} \\<and>\n           (\\<forall>i\\<in>set is'. i < last (butlast (tl rs)))\n        then 1 else 0)", "using \"1\" \"2\" \"3\" 4 Cons.hyps(1)"], ["proof (prove)\nusing this:\n  rs' = butlast (butlast (butlast (tl rs)))\n  3 \\<le> length (tl rs)\n  ?r1 \\<in> set (tl rs) \\<Longrightarrow> 0 < ?r1\n  0 < tl rs ! 0\n  \\<lbrakk>rs' = butlast (butlast (butlast ?rs1));\n   ?is1 \\<lhd> dims (tensors_from_net (witness_l ?rs1) $ ?y1);\n   3 \\<le> length ?rs1; \\<And>r. r \\<in> set ?rs1 \\<Longrightarrow> 0 < r;\n   ?y1 < ?rs1 ! 0\\<rbrakk>\n  \\<Longrightarrow> lookup (tensors_from_net (witness_l ?rs1) $ ?y1) ?is1 =\n                    (if nths ?is1 (Collect even) =\n                        nths ?is1 {n. odd n} \\<and>\n                        (\\<forall>i\\<in>set ?is1. i < last (butlast ?rs1))\n                     then 1 else 0)\n\ngoal (1 subgoal):\n 1. \\<And>is'.\n       is' \\<lhd>\n       dims (tensors_from_net (witness_l (tl rs)) $ 0) \\<Longrightarrow>\n       lookup (tensors_from_net (witness_l (tl rs)) $ 0) is' =\n       (if nths is' (Collect even) = nths is' {n. odd n} \\<and>\n           (\\<forall>i\\<in>set is'. i < last (butlast (tl rs)))\n        then 1 else 0)", "by blast"], ["proof (state)\nthis:\n  ?is'1 \\<lhd>\n  dims (tensors_from_net (witness_l (tl rs)) $ 0) \\<Longrightarrow>\n  lookup (tensors_from_net (witness_l (tl rs)) $ 0) ?is'1 =\n  (if nths ?is'1 (Collect even) = nths ?is'1 {n. odd n} \\<and>\n      (\\<forall>i\\<in>set ?is'1. i < last (butlast (tl rs)))\n   then 1 else 0)\n\ngoal (1 subgoal):\n 1. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "text \\<open>The list \"is\" can be split in two parts:\\<close>"], ["proof (state)\nthis:\n  ?is'1 \\<lhd>\n  dims (tensors_from_net (witness_l (tl rs)) $ 0) \\<Longrightarrow>\n  lookup (tensors_from_net (witness_l (tl rs)) $ 0) ?is'1 =\n  (if nths ?is'1 (Collect even) = nths ?is'1 {n. odd n} \\<and>\n      (\\<forall>i\\<in>set ?is'1. i < last (butlast (tl rs)))\n   then 1 else 0)\n\ngoal (1 subgoal):\n 1. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "have \"is \\<lhd> replicate (2^(length rs - 2)) (last rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is \\<lhd> replicate (2 ^ (length rs - 2)) (last rs)", "using Cons.prems(3) dims_output_witness 2"], ["proof (prove)\nusing this:\n  ?r1 \\<in> set rs \\<Longrightarrow> 0 < ?r1\n  \\<lbrakk>2 \\<le> length ?rs;\n   \\<And>r. r \\<in> set ?rs \\<Longrightarrow> 0 < r; ?j < ?rs ! 0\\<rbrakk>\n  \\<Longrightarrow> dims (tensors_from_net (witness_l ?rs) $ ?j) =\n                    replicate (2 ^ (length ?rs - 2)) (last ?rs)\n  3 \\<le> length (tl rs)\n\ngoal (1 subgoal):\n 1. is \\<lhd> replicate (2 ^ (length rs - 2)) (last rs)", "by (metis (no_types, lifting) Cons.prems(1) Cons.prems(3)\n    Cons.prems(4) Nitpick.size_list_simp(2) One_nat_def diff_diff_left diff_is_0_eq length_tl\n    nat_le_linear not_numeral_le_zero numeral_le_one_iff one_add_one semiring_norm(70))"], ["proof (state)\nthis:\n  is \\<lhd> replicate (2 ^ (length rs - 2)) (last rs)\n\ngoal (1 subgoal):\n 1. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "then"], ["proof (chain)\npicking this:\n  is \\<lhd> replicate (2 ^ (length rs - 2)) (last rs)", "have \"is \\<lhd> replicate (2^(length (tl rs) - 2)) (last rs) @ replicate (2^(length (tl rs) - 2)) (last rs)\""], ["proof (prove)\nusing this:\n  is \\<lhd> replicate (2 ^ (length rs - 2)) (last rs)\n\ngoal (1 subgoal):\n 1. is \\<lhd>\n    replicate (2 ^ (length (tl rs) - 2)) (last rs) @\n    replicate (2 ^ (length (tl rs) - 2)) (last rs)", "using Cons.prems dims_output_witness"], ["proof (prove)\nusing this:\n  is \\<lhd> replicate (2 ^ (length rs - 2)) (last rs)\n  is \\<lhd> dims (tensors_from_net (witness_l rs) $ j)\n  3 \\<le> length rs\n  ?r1 \\<in> set rs \\<Longrightarrow> 0 < ?r1\n  j < rs ! 0\n  \\<lbrakk>2 \\<le> length ?rs;\n   \\<And>r. r \\<in> set ?rs \\<Longrightarrow> 0 < r; ?j < ?rs ! 0\\<rbrakk>\n  \\<Longrightarrow> dims (tensors_from_net (witness_l ?rs) $ ?j) =\n                    replicate (2 ^ (length ?rs - 2)) (last ?rs)\n\ngoal (1 subgoal):\n 1. is \\<lhd>\n    replicate (2 ^ (length (tl rs) - 2)) (last rs) @\n    replicate (2 ^ (length (tl rs) - 2)) (last rs)", "by (metis \"2\" Nitpick.size_list_simp(2) One_nat_def\n    diff_diff_left length_tl mult_2 not_numeral_le_zero numeral_le_one_iff one_add_one\n    power.simps(2) replicate_add semiring_norm(70))"], ["proof (state)\nthis:\n  is \\<lhd>\n  replicate (2 ^ (length (tl rs) - 2)) (last rs) @\n  replicate (2 ^ (length (tl rs) - 2)) (last rs)\n\ngoal (1 subgoal):\n 1. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "then"], ["proof (chain)\npicking this:\n  is \\<lhd>\n  replicate (2 ^ (length (tl rs) - 2)) (last rs) @\n  replicate (2 ^ (length (tl rs) - 2)) (last rs)", "obtain is1 is2 where \"is = is1 @ is2\" and\n    is1_replicate: \"is1 \\<lhd> replicate (2^(length (tl rs) - 2)) (last rs)\" and\n    is2_replicate: \"is2 \\<lhd> replicate (2^(length (tl rs) - 2)) (last rs)\""], ["proof (prove)\nusing this:\n  is \\<lhd>\n  replicate (2 ^ (length (tl rs) - 2)) (last rs) @\n  replicate (2 ^ (length (tl rs) - 2)) (last rs)\n\ngoal (1 subgoal):\n 1. (\\<And>is1 is2.\n        \\<lbrakk>is = is1 @ is2;\n         is1 \\<lhd> replicate (2 ^ (length (tl rs) - 2)) (last rs);\n         is2 \\<lhd> replicate (2 ^ (length (tl rs) - 2)) (last rs)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis valid_index_split)"], ["proof (state)\nthis:\n  is = is1 @ is2\n  is1 \\<lhd> replicate (2 ^ (length (tl rs) - 2)) (last rs)\n  is2 \\<lhd> replicate (2 ^ (length (tl rs) - 2)) (last rs)\n\ngoal (1 subgoal):\n 1. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "then"], ["proof (chain)\npicking this:\n  is = is1 @ is2\n  is1 \\<lhd> replicate (2 ^ (length (tl rs) - 2)) (last rs)\n  is2 \\<lhd> replicate (2 ^ (length (tl rs) - 2)) (last rs)", "have\n    is1_valid: \"is1 \\<lhd> Tensor.dims (tensors_from_net (witness_l (tl rs)) $ 0)\" (is ?is1) and\n    is2_valid: \"is2 \\<lhd> Tensor.dims (tensors_from_net (witness_l (tl rs)) $ 0)\" (is ?is2)"], ["proof (prove)\nusing this:\n  is = is1 @ is2\n  is1 \\<lhd> replicate (2 ^ (length (tl rs) - 2)) (last rs)\n  is2 \\<lhd> replicate (2 ^ (length (tl rs) - 2)) (last rs)\n\ngoal (1 subgoal):\n 1. is1 \\<lhd> dims (tensors_from_net (witness_l (tl rs)) $ 0) &&&\n    is2 \\<lhd> dims (tensors_from_net (witness_l (tl rs)) $ 0)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>is = is1 @ is2;\n     is1 \\<lhd> replicate (2 ^ (length (tl rs) - 2)) (last rs);\n     is2 \\<lhd> replicate (2 ^ (length (tl rs) - 2)) (last rs)\\<rbrakk>\n    \\<Longrightarrow> is1 \\<lhd>\n                      dims (tensors_from_net (witness_l (tl rs)) $ 0)\n 2. \\<lbrakk>is = is1 @ is2;\n     is1 \\<lhd> replicate (2 ^ (length (tl rs) - 2)) (last rs);\n     is2 \\<lhd> replicate (2 ^ (length (tl rs) - 2)) (last rs)\\<rbrakk>\n    \\<Longrightarrow> is2 \\<lhd>\n                      dims (tensors_from_net (witness_l (tl rs)) $ 0)", "have \"last (tl rs) = last rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last (tl rs) = last rs", "by (metis \"2\" \\<open>rs = r # tl rs\\<close> last_ConsR list.size(3) not_numeral_le_zero)"], ["proof (state)\nthis:\n  last (tl rs) = last rs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>is = is1 @ is2;\n     is1 \\<lhd> replicate (2 ^ (length (tl rs) - 2)) (last rs);\n     is2 \\<lhd> replicate (2 ^ (length (tl rs) - 2)) (last rs)\\<rbrakk>\n    \\<Longrightarrow> is1 \\<lhd>\n                      dims (tensors_from_net (witness_l (tl rs)) $ 0)\n 2. \\<lbrakk>is = is1 @ is2;\n     is1 \\<lhd> replicate (2 ^ (length (tl rs) - 2)) (last rs);\n     is2 \\<lhd> replicate (2 ^ (length (tl rs) - 2)) (last rs)\\<rbrakk>\n    \\<Longrightarrow> is2 \\<lhd>\n                      dims (tensors_from_net (witness_l (tl rs)) $ 0)", "then"], ["proof (chain)\npicking this:\n  last (tl rs) = last rs", "show ?is1 ?is2"], ["proof (prove)\nusing this:\n  last (tl rs) = last rs\n\ngoal (1 subgoal):\n 1. is1 \\<lhd> dims (tensors_from_net (witness_l (tl rs)) $ 0) &&&\n    is2 \\<lhd> dims (tensors_from_net (witness_l (tl rs)) $ 0)", "using dims_output_witness[of \"tl rs\"]"], ["proof (prove)\nusing this:\n  last (tl rs) = last rs\n  \\<lbrakk>2 \\<le> length (tl rs);\n   \\<And>r. r \\<in> set (tl rs) \\<Longrightarrow> 0 < r;\n   ?j < tl rs ! 0\\<rbrakk>\n  \\<Longrightarrow> dims (tensors_from_net (witness_l (tl rs)) $ ?j) =\n                    replicate (2 ^ (length (tl rs) - 2)) (last (tl rs))\n\ngoal (1 subgoal):\n 1. is1 \\<lhd> dims (tensors_from_net (witness_l (tl rs)) $ 0) &&&\n    is2 \\<lhd> dims (tensors_from_net (witness_l (tl rs)) $ 0)", "using dims_output_witness[of \"tl rs\"] 2 3 is1_replicate is2_replicate \\<open>last (tl rs) = last rs\\<close>"], ["proof (prove)\nusing this:\n  last (tl rs) = last rs\n  \\<lbrakk>2 \\<le> length (tl rs);\n   \\<And>r. r \\<in> set (tl rs) \\<Longrightarrow> 0 < r;\n   ?j < tl rs ! 0\\<rbrakk>\n  \\<Longrightarrow> dims (tensors_from_net (witness_l (tl rs)) $ ?j) =\n                    replicate (2 ^ (length (tl rs) - 2)) (last (tl rs))\n  \\<lbrakk>2 \\<le> length (tl rs);\n   \\<And>r. r \\<in> set (tl rs) \\<Longrightarrow> 0 < r;\n   ?j < tl rs ! 0\\<rbrakk>\n  \\<Longrightarrow> dims (tensors_from_net (witness_l (tl rs)) $ ?j) =\n                    replicate (2 ^ (length (tl rs) - 2)) (last (tl rs))\n  3 \\<le> length (tl rs)\n  ?r1 \\<in> set (tl rs) \\<Longrightarrow> 0 < ?r1\n  is1 \\<lhd> replicate (2 ^ (length (tl rs) - 2)) (last rs)\n  is2 \\<lhd> replicate (2 ^ (length (tl rs) - 2)) (last rs)\n  last (tl rs) = last rs\n\ngoal (1 subgoal):\n 1. is1 \\<lhd> dims (tensors_from_net (witness_l (tl rs)) $ 0) &&&\n    is2 \\<lhd> dims (tensors_from_net (witness_l (tl rs)) $ 0)", "by auto"], ["proof (state)\nthis:\n  is1 \\<lhd> dims (tensors_from_net (witness_l (tl rs)) $ 0)\n  is2 \\<lhd> dims (tensors_from_net (witness_l (tl rs)) $ 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is1 \\<lhd> dims (tensors_from_net (witness_l (tl rs)) $ 0)\n  is2 \\<lhd> dims (tensors_from_net (witness_l (tl rs)) $ 0)\n\ngoal (1 subgoal):\n 1. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "text \\<open>A shorthand for the condition to find a \"1\" in the tensor:\\<close>"], ["proof (state)\nthis:\n  is1 \\<lhd> dims (tensors_from_net (witness_l (tl rs)) $ 0)\n  is2 \\<lhd> dims (tensors_from_net (witness_l (tl rs)) $ 0)\n\ngoal (1 subgoal):\n 1. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "let ?cond = \"\\<lambda>is rs. nths is {n. even n} = nths is {n. odd n} \\<and> (\\<forall>i\\<in>set is. i < last (butlast rs))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "text \\<open>We can use the IH on our newly created is1 and is2:\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "have IH_is12:\n    \"Tensor.lookup (tensors_from_net (witness_l (tl rs)) $ 0) is1 =\n      (if (?cond is1 (tl rs)) then 1 else 0)\"\n    \"Tensor.lookup (tensors_from_net (witness_l (tl rs)) $ 0) is2 =\n      (if (?cond is2 (tl rs)) then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness_l (tl rs)) $ 0) is1 =\n    (if nths is1 (Collect even) = nths is1 {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is1. i < last (butlast (tl rs)))\n     then 1 else 0) &&&\n    lookup (tensors_from_net (witness_l (tl rs)) $ 0) is2 =\n    (if nths is2 (Collect even) = nths is2 {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is2. i < last (butlast (tl rs)))\n     then 1 else 0)", "using IH is1_valid is2_valid"], ["proof (prove)\nusing this:\n  ?is'1 \\<lhd>\n  dims (tensors_from_net (witness_l (tl rs)) $ 0) \\<Longrightarrow>\n  lookup (tensors_from_net (witness_l (tl rs)) $ 0) ?is'1 =\n  (if nths ?is'1 (Collect even) = nths ?is'1 {n. odd n} \\<and>\n      (\\<forall>i\\<in>set ?is'1. i < last (butlast (tl rs)))\n   then 1 else 0)\n  is1 \\<lhd> dims (tensors_from_net (witness_l (tl rs)) $ 0)\n  is2 \\<lhd> dims (tensors_from_net (witness_l (tl rs)) $ 0)\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness_l (tl rs)) $ 0) is1 =\n    (if nths is1 (Collect even) = nths is1 {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is1. i < last (butlast (tl rs)))\n     then 1 else 0) &&&\n    lookup (tensors_from_net (witness_l (tl rs)) $ 0) is2 =\n    (if nths is2 (Collect even) = nths is2 {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is2. i < last (butlast (tl rs)))\n     then 1 else 0)", "by fast+"], ["proof (state)\nthis:\n  lookup (tensors_from_net (witness_l (tl rs)) $ 0) is1 =\n  (if nths is1 (Collect even) = nths is1 {n. odd n} \\<and>\n      (\\<forall>i\\<in>set is1. i < last (butlast (tl rs)))\n   then 1 else 0)\n  lookup (tensors_from_net (witness_l (tl rs)) $ 0) is2 =\n  (if nths is2 (Collect even) = nths is2 {n. odd n} \\<and>\n      (\\<forall>i\\<in>set is2. i < last (butlast (tl rs)))\n   then 1 else 0)\n\ngoal (1 subgoal):\n 1. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "text \\<open>In the induction step we have to add two layers: first the Pool layer, then the Conv layer.\n\n        The Pool layer connects the two subtrees. Therefore the two conditions on is1 and is2 become\n        one, and we have to prove that they are equivalent:\\<close>"], ["proof (state)\nthis:\n  lookup (tensors_from_net (witness_l (tl rs)) $ 0) is1 =\n  (if nths is1 (Collect even) = nths is1 {n. odd n} \\<and>\n      (\\<forall>i\\<in>set is1. i < last (butlast (tl rs)))\n   then 1 else 0)\n  lookup (tensors_from_net (witness_l (tl rs)) $ 0) is2 =\n  (if nths is2 (Collect even) = nths is2 {n. odd n} \\<and>\n      (\\<forall>i\\<in>set is2. i < last (butlast (tl rs)))\n   then 1 else 0)\n\ngoal (1 subgoal):\n 1. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "have \"?cond is1 (tl rs) \\<and> ?cond is2 (tl rs) \\<longleftrightarrow> ?cond is rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((nths is1 (Collect even) = nths is1 {n. odd n} \\<and>\n      (\\<forall>i\\<in>set is1. i < last (butlast (tl rs)))) \\<and>\n     nths is2 (Collect even) = nths is2 {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is2. i < last (butlast (tl rs)))) =\n    (nths is (Collect even) = nths is {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is. i < last (butlast rs)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ((nths is1 (Collect even) = nths is1 {n. odd n} \\<and>\n      (\\<forall>i\\<in>set is1. i < last (butlast (tl rs)))) \\<and>\n     nths is2 (Collect even) = nths is2 {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is2. i < last (butlast (tl rs)))) =\n    (nths is (Collect even) = nths is {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is. i < last (butlast rs)))", "have \"length is1 = 2 ^ (length (tl rs) - 2)\"\n         \"length is2 = 2 ^ (length (tl rs) - 2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length is1 = 2 ^ (length (tl rs) - 2) &&&\n    length is2 = 2 ^ (length (tl rs) - 2)", "using is1_replicate is2_replicate"], ["proof (prove)\nusing this:\n  is1 \\<lhd> replicate (2 ^ (length (tl rs) - 2)) (last rs)\n  is2 \\<lhd> replicate (2 ^ (length (tl rs) - 2)) (last rs)\n\ngoal (1 subgoal):\n 1. length is1 = 2 ^ (length (tl rs) - 2) &&&\n    length is2 = 2 ^ (length (tl rs) - 2)", "by (simp_all add: valid_index_length)"], ["proof (state)\nthis:\n  length is1 = 2 ^ (length (tl rs) - 2)\n  length is2 = 2 ^ (length (tl rs) - 2)\n\ngoal (1 subgoal):\n 1. ((nths is1 (Collect even) = nths is1 {n. odd n} \\<and>\n      (\\<forall>i\\<in>set is1. i < last (butlast (tl rs)))) \\<and>\n     nths is2 (Collect even) = nths is2 {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is2. i < last (butlast (tl rs)))) =\n    (nths is (Collect even) = nths is {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is. i < last (butlast rs)))", "then"], ["proof (chain)\npicking this:\n  length is1 = 2 ^ (length (tl rs) - 2)\n  length is2 = 2 ^ (length (tl rs) - 2)", "have \"even (length is1)\" \"even (length is2)\""], ["proof (prove)\nusing this:\n  length is1 = 2 ^ (length (tl rs) - 2)\n  length is2 = 2 ^ (length (tl rs) - 2)\n\ngoal (1 subgoal):\n 1. even (length is1) &&& even (length is2)", "by (metis Cons.hyps(2) One_nat_def add_gr_0 diff_diff_left even_numeral even_power\n      length_butlast length_tl list.size(4) one_add_one zero_less_Suc)+"], ["proof (state)\nthis:\n  even (length is1)\n  even (length is2)\n\ngoal (1 subgoal):\n 1. ((nths is1 (Collect even) = nths is1 {n. odd n} \\<and>\n      (\\<forall>i\\<in>set is1. i < last (butlast (tl rs)))) \\<and>\n     nths is2 (Collect even) = nths is2 {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is2. i < last (butlast (tl rs)))) =\n    (nths is (Collect even) = nths is {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is. i < last (butlast rs)))", "then"], ["proof (chain)\npicking this:\n  even (length is1)\n  even (length is2)", "have \"{j. j + length is1 \\<in> {n. even n}} = {n. even n}\"\n              \"{j. j + length is1 \\<in> {n. odd n}} = {n. odd n}\""], ["proof (prove)\nusing this:\n  even (length is1)\n  even (length is2)\n\ngoal (1 subgoal):\n 1. {j. j + length is1 \\<in> Collect even} = Collect even &&&\n    {j. j + length is1 \\<in> {n. odd n}} = {n. odd n}", "by simp_all"], ["proof (state)\nthis:\n  {j. j + length is1 \\<in> Collect even} = Collect even\n  {j. j + length is1 \\<in> {n. odd n}} = {n. odd n}\n\ngoal (1 subgoal):\n 1. ((nths is1 (Collect even) = nths is1 {n. odd n} \\<and>\n      (\\<forall>i\\<in>set is1. i < last (butlast (tl rs)))) \\<and>\n     nths is2 (Collect even) = nths is2 {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is2. i < last (butlast (tl rs)))) =\n    (nths is (Collect even) = nths is {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is. i < last (butlast rs)))", "have \"length (nths is2 (Collect even)) = length (nths is2 (Collect odd))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (nths is2 (Collect even)) = length (nths is2 {a. odd a})", "using length_nths_even \\<open>even (length is2)\\<close>"], ["proof (prove)\nusing this:\n  even (length ?xs) \\<Longrightarrow>\n  length (nths ?xs (Collect even)) = length (nths ?xs {a. odd a})\n  even (length is2)\n\ngoal (1 subgoal):\n 1. length (nths is2 (Collect even)) = length (nths is2 {a. odd a})", "by blast"], ["proof (state)\nthis:\n  length (nths is2 (Collect even)) = length (nths is2 {a. odd a})\n\ngoal (1 subgoal):\n 1. ((nths is1 (Collect even) = nths is1 {n. odd n} \\<and>\n      (\\<forall>i\\<in>set is1. i < last (butlast (tl rs)))) \\<and>\n     nths is2 (Collect even) = nths is2 {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is2. i < last (butlast (tl rs)))) =\n    (nths is (Collect even) = nths is {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is. i < last (butlast rs)))", "have cond1_iff: \"(nths is1 (Collect even) = nths is1 {n. odd n} \\<and> nths is2 (Collect even) = nths is2 {n. odd n})\n          = (nths is (Collect even) = nths is {n. odd n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (nths is1 (Collect even) = nths is1 {n. odd n} \\<and>\n     nths is2 (Collect even) = nths is2 {n. odd n}) =\n    (nths is (Collect even) = nths is {n. odd n})", "unfolding \\<open>is = is1 @ is2\\<close> nths_append\n        \\<open>{j. j + length is1 \\<in> {n. odd n}} = {n. odd n}\\<close> \\<open>{j. j + length is1 \\<in> {n. even n}} = {n. even n}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (nths is1 (Collect even) = nths is1 {n. odd n} \\<and>\n     nths is2 (Collect even) = nths is2 {n. odd n}) =\n    (nths is1 (Collect even) @ nths is2 (Collect even) =\n     nths is1 {n. odd n} @ nths is2 {n. odd n})", "by (simp add: \\<open>length (nths is2 (Collect even)) = length (nths is2 (Collect odd))\\<close>)"], ["proof (state)\nthis:\n  (nths is1 (Collect even) = nths is1 {n. odd n} \\<and>\n   nths is2 (Collect even) = nths is2 {n. odd n}) =\n  (nths is (Collect even) = nths is {n. odd n})\n\ngoal (1 subgoal):\n 1. ((nths is1 (Collect even) = nths is1 {n. odd n} \\<and>\n      (\\<forall>i\\<in>set is1. i < last (butlast (tl rs)))) \\<and>\n     nths is2 (Collect even) = nths is2 {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is2. i < last (butlast (tl rs)))) =\n    (nths is (Collect even) = nths is {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is. i < last (butlast rs)))", "have \"last (butlast (tl rs)) = last (butlast rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last (butlast (tl rs)) = last (butlast rs)", "using Nitpick.size_list_simp(2) \\<open>even (length is1)\\<close>\n      \\<open>length is1 = 2 ^ (length (tl rs) - 2)\\<close> butlast_tl last_tl length_butlast length_tl not_less_eq zero_less_diff"], ["proof (prove)\nusing this:\n  length ?xs = (if ?xs = [] then 0 else Suc (length (tl ?xs)))\n  even (length is1)\n  length is1 = 2 ^ (length (tl rs) - 2)\n  butlast (tl ?xs) = tl (butlast ?xs)\n  ?xs = [] \\<or> tl ?xs \\<noteq> [] \\<Longrightarrow>\n  last (tl ?xs) = last ?xs\n  length (butlast ?xs) = length ?xs - 1\n  length (tl ?xs) = length ?xs - 1\n  (\\<not> ?m < ?n) = (?n < Suc ?m)\n  (0 < ?n - ?m) = (?m < ?n)\n\ngoal (1 subgoal):\n 1. last (butlast (tl rs)) = last (butlast rs)", "by (metis (full_types) Cons.hyps(2) length_Cons less_nat_zero_code)"], ["proof (state)\nthis:\n  last (butlast (tl rs)) = last (butlast rs)\n\ngoal (1 subgoal):\n 1. ((nths is1 (Collect even) = nths is1 {n. odd n} \\<and>\n      (\\<forall>i\\<in>set is1. i < last (butlast (tl rs)))) \\<and>\n     nths is2 (Collect even) = nths is2 {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is2. i < last (butlast (tl rs)))) =\n    (nths is (Collect even) = nths is {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is. i < last (butlast rs)))", "have cond2_iff: \"(\\<forall>i\\<in>set is1. i < last (butlast (tl rs))) \\<and> (\\<forall>i\\<in>set is2. i < last (butlast (tl rs))) \\<longleftrightarrow> (\\<forall>i\\<in>set is. i < last (butlast rs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>i\\<in>set is1. i < last (butlast (tl rs))) \\<and>\n     (\\<forall>i\\<in>set is2. i < last (butlast (tl rs)))) =\n    (\\<forall>i\\<in>set is. i < last (butlast rs))", "unfolding \\<open>last (butlast (tl rs)) = last (butlast rs)\\<close> \\<open>is = is1 @ is2\\<close> set_append"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>i\\<in>set is1. i < last (butlast rs)) \\<and>\n     (\\<forall>i\\<in>set is2. i < last (butlast rs))) =\n    (\\<forall>i\\<in>set is1 \\<union> set is2. i < last (butlast rs))", "by blast"], ["proof (state)\nthis:\n  ((\\<forall>i\\<in>set is1. i < last (butlast (tl rs))) \\<and>\n   (\\<forall>i\\<in>set is2. i < last (butlast (tl rs)))) =\n  (\\<forall>i\\<in>set is. i < last (butlast rs))\n\ngoal (1 subgoal):\n 1. ((nths is1 (Collect even) = nths is1 {n. odd n} \\<and>\n      (\\<forall>i\\<in>set is1. i < last (butlast (tl rs)))) \\<and>\n     nths is2 (Collect even) = nths is2 {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is2. i < last (butlast (tl rs)))) =\n    (nths is (Collect even) = nths is {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is. i < last (butlast rs)))", "then"], ["proof (chain)\npicking this:\n  ((\\<forall>i\\<in>set is1. i < last (butlast (tl rs))) \\<and>\n   (\\<forall>i\\<in>set is2. i < last (butlast (tl rs)))) =\n  (\\<forall>i\\<in>set is. i < last (butlast rs))", "show ?thesis"], ["proof (prove)\nusing this:\n  ((\\<forall>i\\<in>set is1. i < last (butlast (tl rs))) \\<and>\n   (\\<forall>i\\<in>set is2. i < last (butlast (tl rs)))) =\n  (\\<forall>i\\<in>set is. i < last (butlast rs))\n\ngoal (1 subgoal):\n 1. ((nths is1 (Collect even) = nths is1 {n. odd n} \\<and>\n      (\\<forall>i\\<in>set is1. i < last (butlast (tl rs)))) \\<and>\n     nths is2 (Collect even) = nths is2 {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is2. i < last (butlast (tl rs)))) =\n    (nths is (Collect even) = nths is {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is. i < last (butlast rs)))", "using cond1_iff cond2_iff"], ["proof (prove)\nusing this:\n  ((\\<forall>i\\<in>set is1. i < last (butlast (tl rs))) \\<and>\n   (\\<forall>i\\<in>set is2. i < last (butlast (tl rs)))) =\n  (\\<forall>i\\<in>set is. i < last (butlast rs))\n  (nths is1 (Collect even) = nths is1 {n. odd n} \\<and>\n   nths is2 (Collect even) = nths is2 {n. odd n}) =\n  (nths is (Collect even) = nths is {n. odd n})\n  ((\\<forall>i\\<in>set is1. i < last (butlast (tl rs))) \\<and>\n   (\\<forall>i\\<in>set is2. i < last (butlast (tl rs)))) =\n  (\\<forall>i\\<in>set is. i < last (butlast rs))\n\ngoal (1 subgoal):\n 1. ((nths is1 (Collect even) = nths is1 {n. odd n} \\<and>\n      (\\<forall>i\\<in>set is1. i < last (butlast (tl rs)))) \\<and>\n     nths is2 (Collect even) = nths is2 {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is2. i < last (butlast (tl rs)))) =\n    (nths is (Collect even) = nths is {n. odd n} \\<and>\n     (\\<forall>i\\<in>set is. i < last (butlast rs)))", "by blast"], ["proof (state)\nthis:\n  ((nths is1 (Collect even) = nths is1 {n. odd n} \\<and>\n    (\\<forall>i\\<in>set is1. i < last (butlast (tl rs)))) \\<and>\n   nths is2 (Collect even) = nths is2 {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is2. i < last (butlast (tl rs)))) =\n  (nths is (Collect even) = nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((nths is1 (Collect even) = nths is1 {n. odd n} \\<and>\n    (\\<forall>i\\<in>set is1. i < last (butlast (tl rs)))) \\<and>\n   nths is2 (Collect even) = nths is2 {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is2. i < last (butlast (tl rs)))) =\n  (nths is (Collect even) = nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs)))\n\ngoal (1 subgoal):\n 1. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "text \\<open>Now we can make the Pool layer step: \\<close>"], ["proof (state)\nthis:\n  ((nths is1 (Collect even) = nths is1 {n. odd n} \\<and>\n    (\\<forall>i\\<in>set is1. i < last (butlast (tl rs)))) \\<and>\n   nths is2 (Collect even) = nths is2 {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is2. i < last (butlast (tl rs)))) =\n  (nths is (Collect even) = nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs)))\n\ngoal (1 subgoal):\n 1. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "have lookup_witness': \"Tensor.lookup ((tensors_from_net (witness' (rs ! 1) (tl (tl rs)))) $ 0) is =\n    (if ?cond is rs then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness' (rs ! 1) (tl (tl rs))) $ 0) is =\n    (if nths is (Collect even) = nths is {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is. i < last (butlast rs))\n     then 1 else 0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness' (rs ! 1) (tl (tl rs))) $ 0) is =\n    (if nths is (Collect even) = nths is {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is. i < last (butlast rs))\n     then 1 else 0)", "have lookup_prod: \"Tensor.lookup ((tensors_from_net (witness_l (tl rs)) $ 0) \\<otimes> (tensors_from_net (witness_l (tl rs))) $ 0) is =\n      (if ?cond is rs then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup\n     (tensors_from_net (witness_l (tl rs)) $ 0 \\<otimes>\n      tensors_from_net (witness_l (tl rs)) $ 0)\n     is =\n    (if nths is (Collect even) = nths is {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is. i < last (butlast rs))\n     then 1 else 0)", "using \\<open>?cond is1 (tl rs) \\<and> ?cond is2 (tl rs) \\<longleftrightarrow> ?cond is rs\\<close>"], ["proof (prove)\nusing this:\n  ((nths is1 (Collect even) = nths is1 {n. odd n} \\<and>\n    (\\<forall>i\\<in>set is1. i < last (butlast (tl rs)))) \\<and>\n   nths is2 (Collect even) = nths is2 {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is2. i < last (butlast (tl rs)))) =\n  (nths is (Collect even) = nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs)))\n\ngoal (1 subgoal):\n 1. lookup\n     (tensors_from_net (witness_l (tl rs)) $ 0 \\<otimes>\n      tensors_from_net (witness_l (tl rs)) $ 0)\n     is =\n    (if nths is (Collect even) = nths is {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is. i < last (butlast rs))\n     then 1 else 0)", "unfolding \\<open>is = is1 @ is2\\<close> lookup_tensor_prod[OF is1_valid is2_valid] IH_is12"], ["proof (prove)\nusing this:\n  ((nths is1 (Collect even) = nths is1 {n. odd n} \\<and>\n    (\\<forall>i\\<in>set is1. i < last (butlast (tl rs)))) \\<and>\n   nths is2 (Collect even) = nths is2 {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is2. i < last (butlast (tl rs)))) =\n  (nths (is1 @ is2) (Collect even) = nths (is1 @ is2) {n. odd n} \\<and>\n   (\\<forall>i\\<in>set (is1 @ is2). i < last (butlast rs)))\n\ngoal (1 subgoal):\n 1. (if nths is1 (Collect even) = nths is1 {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is1. i < last (butlast (tl rs)))\n     then 1 else 0) *\n    (if nths is2 (Collect even) = nths is2 {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is2. i < last (butlast (tl rs)))\n     then 1 else 0) =\n    (if nths (is1 @ is2) (Collect even) = nths (is1 @ is2) {n. odd n} \\<and>\n        (\\<forall>i\\<in>set (is1 @ is2). i < last (butlast rs))\n     then 1 else 0)", "by auto"], ["proof (state)\nthis:\n  lookup\n   (tensors_from_net (witness_l (tl rs)) $ 0 \\<otimes>\n    tensors_from_net (witness_l (tl rs)) $ 0)\n   is =\n  (if nths is (Collect even) = nths is {n. odd n} \\<and>\n      (\\<forall>i\\<in>set is. i < last (butlast rs))\n   then 1 else 0)\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness' (rs ! 1) (tl (tl rs))) $ 0) is =\n    (if nths is (Collect even) = nths is {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is. i < last (butlast rs))\n     then 1 else 0)", "have witness_l_tl: \"witness_l (tl rs) = witness (rs ! 1) (rs ! 2) (tl (tl (tl rs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. witness_l (tl rs) = witness (rs ! 1) (rs ! 2) (tl (tl (tl rs)))", "by (metis One_nat_def Suc_1 \\<open>rs = r # tl rs\\<close> nth_Cons_Suc)"], ["proof (state)\nthis:\n  witness_l (tl rs) = witness (rs ! 1) (rs ! 2) (tl (tl (tl rs)))\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness' (rs ! 1) (tl (tl rs))) $ 0) is =\n    (if nths is (Collect even) = nths is {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is. i < last (butlast rs))\n     then 1 else 0)", "have tl_tl:\"(tl (tl rs)) = ((rs ! 2) # tl (tl (tl rs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tl (tl rs) = rs ! 2 # tl (tl (tl rs))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. tl (tl rs) = rs ! 2 # tl (tl (tl rs))", "have \"length (tl (tl rs)) \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (tl (tl rs)) \\<noteq> 0", "by (metis  One_nat_def Suc_eq_plus1 diff_diff_left diff_is_0_eq length_tl not_less_eq_eq\n        Cons.prems(2) numeral_3_eq_3)"], ["proof (state)\nthis:\n  length (tl (tl rs)) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. tl (tl rs) = rs ! 2 # tl (tl (tl rs))", "then"], ["proof (chain)\npicking this:\n  length (tl (tl rs)) \\<noteq> 0", "have \"tl (tl rs) \\<noteq> []\""], ["proof (prove)\nusing this:\n  length (tl (tl rs)) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. tl (tl rs) \\<noteq> []", "by fastforce"], ["proof (state)\nthis:\n  tl (tl rs) \\<noteq> []\n\ngoal (1 subgoal):\n 1. tl (tl rs) = rs ! 2 # tl (tl (tl rs))", "then"], ["proof (chain)\npicking this:\n  tl (tl rs) \\<noteq> []", "show ?thesis"], ["proof (prove)\nusing this:\n  tl (tl rs) \\<noteq> []\n\ngoal (1 subgoal):\n 1. tl (tl rs) = rs ! 2 # tl (tl (tl rs))", "by (metis list.exhaust_sel nth_Cons_0 nth_Cons_Suc numeral_2_eq_2 tl_Nil)"], ["proof (state)\nthis:\n  tl (tl rs) = rs ! 2 # tl (tl (tl rs))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  tl (tl rs) = rs ! 2 # tl (tl (tl rs))\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness' (rs ! 1) (tl (tl rs))) $ 0) is =\n    (if nths is (Collect even) = nths is {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is. i < last (butlast rs))\n     then 1 else 0)", "have length_gt0:\"dim_vec (tensors_from_net (witness (rs ! 1) (rs ! 2) (tl (tl (tl rs))))) > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < dim_vec\n         (tensors_from_net (witness (rs ! 1) (rs ! 2) (tl (tl (tl rs)))))", "using output_size_correct_tensors[of \"witness (rs ! 1) (rs ! 2) (tl (tl (tl rs)))\"]\n      witness_is_deep_model[of \"rs ! 1\" \"rs ! 2\" \"tl (tl (tl rs))\"]\n      valid_deep_model[of \"rs ! 1\" \"rs ! 2\" \"tl (tl (tl rs))\"] output_size.simps witness.simps"], ["proof (prove)\nusing this:\n  valid_net' (witness (rs ! 1) (rs ! 2) (tl (tl (tl rs)))) \\<Longrightarrow>\n  output_size' (witness (rs ! 1) (rs ! 2) (tl (tl (tl rs)))) =\n  dim_vec (tensors_from_net (witness (rs ! 1) (rs ! 2) (tl (tl (tl rs)))))\n  remove_weights (witness (rs ! 1) (rs ! 2) (tl (tl (tl rs)))) =\n  deep_model (rs ! 1) (rs ! 2) (tl (tl (tl rs)))\n  valid_net (deep_model (rs ! 1) (rs ! 2) (tl (tl (tl rs))))\n  output_size (Input ?M) = ?M\n  output_size (Conv (?r0.0, ?r1.0) ?m) = ?r0.0\n  output_size (Pool ?m1.0 ?m2.0) = output_size ?m1.0\n  witness ?Y ?r ?rs =\n  Conv\n   ((if length ?rs = 0 then id_matrix\n     else if length ?rs = 1 then all1_matrix else copy_first_matrix)\n     ?Y ?r)\n   (witness' ?r ?rs)\n\ngoal (1 subgoal):\n 1. 0 < dim_vec\n         (tensors_from_net (witness (rs ! 1) (rs ! 2) (tl (tl (tl rs)))))", "by (metis \"2\" \"3\" One_nat_def \\<open>rs = r # tl rs\\<close> deep_model.elims length_greater_0_conv list.size(3)\n      not_numeral_le_zero nth_Cons_Suc nth_mem)"], ["proof (state)\nthis:\n  0 < dim_vec\n       (tensors_from_net (witness (rs ! 1) (rs ! 2) (tl (tl (tl rs)))))\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness' (rs ! 1) (tl (tl rs))) $ 0) is =\n    (if nths is (Collect even) = nths is {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is. i < last (butlast rs))\n     then 1 else 0)", "then"], ["proof (chain)\npicking this:\n  0 < dim_vec\n       (tensors_from_net (witness (rs ! 1) (rs ! 2) (tl (tl (tl rs)))))", "have \"tensors_from_net (witness' (rs ! 1) ((rs ! 2) # tl (tl (tl rs)))) $ 0\n       = (tensors_from_net (witness_l (tl rs)) $ 0) \\<otimes> (tensors_from_net (witness_l (tl rs)) $ 0)\""], ["proof (prove)\nusing this:\n  0 < dim_vec\n       (tensors_from_net (witness (rs ! 1) (rs ! 2) (tl (tl (tl rs)))))\n\ngoal (1 subgoal):\n 1. tensors_from_net (witness' (rs ! 1) (rs ! 2 # tl (tl (tl rs)))) $ 0 =\n    tensors_from_net (witness_l (tl rs)) $ 0 \\<otimes>\n    tensors_from_net (witness_l (tl rs)) $ 0", "unfolding witness'.simps tensors_from_net.simps witness_l_tl"], ["proof (prove)\nusing this:\n  0 < dim_vec\n       (tensors_from_net (witness (rs ! 1) (rs ! 2) (tl (tl (tl rs)))))\n\ngoal (1 subgoal):\n 1. component_mult\n     (tensors_from_net (witness (rs ! 1) (rs ! 2) (tl (tl (tl rs)))))\n     (tensors_from_net (witness (rs ! 1) (rs ! 2) (tl (tl (tl rs))))) $\n    0 =\n    tensors_from_net (witness (rs ! 1) (rs ! 2) (tl (tl (tl rs)))) $\n    0 \\<otimes>\n    tensors_from_net (witness (rs ! 1) (rs ! 2) (tl (tl (tl rs)))) $ 0", "using index_component_mult"], ["proof (prove)\nusing this:\n  0 < dim_vec\n       (tensors_from_net (witness (rs ! 1) (rs ! 2) (tl (tl (tl rs)))))\n  \\<lbrakk>?i < dim_vec ?v; ?i < dim_vec ?w\\<rbrakk>\n  \\<Longrightarrow> component_mult ?v ?w $ ?i = ?v $ ?i * ?w $ ?i\n\ngoal (1 subgoal):\n 1. component_mult\n     (tensors_from_net (witness (rs ! 1) (rs ! 2) (tl (tl (tl rs)))))\n     (tensors_from_net (witness (rs ! 1) (rs ! 2) (tl (tl (tl rs))))) $\n    0 =\n    tensors_from_net (witness (rs ! 1) (rs ! 2) (tl (tl (tl rs)))) $\n    0 \\<otimes>\n    tensors_from_net (witness (rs ! 1) (rs ! 2) (tl (tl (tl rs)))) $ 0", "by blast"], ["proof (state)\nthis:\n  tensors_from_net (witness' (rs ! 1) (rs ! 2 # tl (tl (tl rs)))) $ 0 =\n  tensors_from_net (witness_l (tl rs)) $ 0 \\<otimes>\n  tensors_from_net (witness_l (tl rs)) $ 0\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness' (rs ! 1) (tl (tl rs))) $ 0) is =\n    (if nths is (Collect even) = nths is {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is. i < last (butlast rs))\n     then 1 else 0)", "then"], ["proof (chain)\npicking this:\n  tensors_from_net (witness' (rs ! 1) (rs ! 2 # tl (tl (tl rs)))) $ 0 =\n  tensors_from_net (witness_l (tl rs)) $ 0 \\<otimes>\n  tensors_from_net (witness_l (tl rs)) $ 0", "show ?thesis"], ["proof (prove)\nusing this:\n  tensors_from_net (witness' (rs ! 1) (rs ! 2 # tl (tl (tl rs)))) $ 0 =\n  tensors_from_net (witness_l (tl rs)) $ 0 \\<otimes>\n  tensors_from_net (witness_l (tl rs)) $ 0\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness' (rs ! 1) (tl (tl rs))) $ 0) is =\n    (if nths is (Collect even) = nths is {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is. i < last (butlast rs))\n     then 1 else 0)", "using lookup_prod tl_tl"], ["proof (prove)\nusing this:\n  tensors_from_net (witness' (rs ! 1) (rs ! 2 # tl (tl (tl rs)))) $ 0 =\n  tensors_from_net (witness_l (tl rs)) $ 0 \\<otimes>\n  tensors_from_net (witness_l (tl rs)) $ 0\n  lookup\n   (tensors_from_net (witness_l (tl rs)) $ 0 \\<otimes>\n    tensors_from_net (witness_l (tl rs)) $ 0)\n   is =\n  (if nths is (Collect even) = nths is {n. odd n} \\<and>\n      (\\<forall>i\\<in>set is. i < last (butlast rs))\n   then 1 else 0)\n  tl (tl rs) = rs ! 2 # tl (tl (tl rs))\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness' (rs ! 1) (tl (tl rs))) $ 0) is =\n    (if nths is (Collect even) = nths is {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is. i < last (butlast rs))\n     then 1 else 0)", "by simp"], ["proof (state)\nthis:\n  lookup (tensors_from_net (witness' (rs ! 1) (tl (tl rs))) $ 0) is =\n  (if nths is (Collect even) = nths is {n. odd n} \\<and>\n      (\\<forall>i\\<in>set is. i < last (butlast rs))\n   then 1 else 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup (tensors_from_net (witness' (rs ! 1) (tl (tl rs))) $ 0) is =\n  (if nths is (Collect even) = nths is {n. odd n} \\<and>\n      (\\<forall>i\\<in>set is. i < last (butlast rs))\n   then 1 else 0)\n\ngoal (1 subgoal):\n 1. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "text \\<open>Then we can make the Conv layer step: \\<close>"], ["proof (state)\nthis:\n  lookup (tensors_from_net (witness' (rs ! 1) (tl (tl rs))) $ 0) is =\n  (if nths is (Collect even) = nths is {n. odd n} \\<and>\n      (\\<forall>i\\<in>set is. i < last (butlast rs))\n   then 1 else 0)\n\ngoal (1 subgoal):\n 1. \\<And>a x rs is y.\n       \\<lbrakk>\\<And>rs is y.\n                   \\<lbrakk>x = butlast (butlast (butlast rs));\n                    is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n                    3 \\<le> length rs;\n                    \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n                    y < rs ! 0\\<rbrakk>\n                   \\<Longrightarrow> lookup\n(tensors_from_net (witness_l rs) $ y) is =\n                                     (if nths is (Collect even) =\n   nths is {n. odd n} \\<and>\n   (\\<forall>i\\<in>set is. i < last (butlast rs))\nthen 1 else 0);\n        a # x = butlast (butlast (butlast rs));\n        is \\<lhd> dims (tensors_from_net (witness_l rs) $ y);\n        3 \\<le> length rs; \\<And>r. r \\<in> set rs \\<Longrightarrow> 0 < r;\n        y < rs ! 0\\<rbrakk>\n       \\<Longrightarrow> lookup (tensors_from_net (witness_l rs) $ y) is =\n                         (if nths is (Collect even) =\n                             nths is {n. odd n} \\<and>\n                             (\\<forall>i\\<in>set is. i < last (butlast rs))\n                          then 1 else 0)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness_l rs) $ j) is =\n    (if nths is (Collect even) = nths is {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is. i < last (butlast rs))\n     then 1 else 0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness_l rs) $ j) is =\n    (if nths is (Collect even) = nths is {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is. i < last (butlast rs))\n     then 1 else 0)", "have \"valid_net' (witness' (rs ! 1) (tl (tl rs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_net' (witness' (rs ! 1) (tl (tl rs)))", "by (simp add: witness'_valid)"], ["proof (state)\nthis:\n  valid_net' (witness' (rs ! 1) (tl (tl rs)))\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness_l rs) $ j) is =\n    (if nths is (Collect even) = nths is {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is. i < last (butlast rs))\n     then 1 else 0)", "have \"output_size' (witness' (rs ! 1) (tl (tl rs))) = rs ! 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. output_size' (witness' (rs ! 1) (tl (tl rs))) = rs ! 1", "by (metis \"2\" Nitpick.size_list_simp(2) diff_diff_left diff_is_0_eq hd_Cons_tl deep_model'.simps(2) deep_model.elims length_tl not_less_eq_eq numeral_2_eq_2 numeral_3_eq_3 one_add_one output_size.simps(2) output_size.simps(3) tl_Nil witness'_is_deep_model)"], ["proof (state)\nthis:\n  output_size' (witness' (rs ! 1) (tl (tl rs))) = rs ! 1\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness_l rs) $ j) is =\n    (if nths is (Collect even) = nths is {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is. i < last (butlast rs))\n     then 1 else 0)", "have if_resolve:\"(if length (tl (tl rs)) = 0 then id_matrix else if length (tl (tl rs)) = 1 then all1_matrix else copy_first_matrix) = copy_first_matrix\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if length (tl (tl rs)) = 0 then id_matrix\n     else if length (tl (tl rs)) = 1 then all1_matrix\n          else copy_first_matrix) =\n    copy_first_matrix", "by (metis \"2\" Cons.prems(2) Nitpick.size_list_simp(2) One_nat_def Suc_n_not_le_n not_numeral_le_zero numeral_3_eq_3)"], ["proof (state)\nthis:\n  (if length (tl (tl rs)) = 0 then id_matrix\n   else if length (tl (tl rs)) = 1 then all1_matrix\n        else copy_first_matrix) =\n  copy_first_matrix\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness_l rs) $ j) is =\n    (if nths is (Collect even) = nths is {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is. i < last (butlast rs))\n     then 1 else 0)", "have \"tensors_from_net (Conv (copy_first_matrix (rs ! 0) (rs ! 1)) (witness' (rs ! 1) (tl (tl rs)))) $ j =\n      tensors_from_net (witness' (rs ! 1) (tl (tl rs))) $ 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensors_from_net\n     (Conv (copy_first_matrix (rs ! 0) (rs ! 1))\n       (witness' (rs ! 1) (tl (tl rs)))) $\n    j =\n    tensors_from_net (witness' (rs ! 1) (tl (tl rs))) $ 0", "using tensors_from_net_Conv_copy_first[OF \\<open>valid_net' (witness' (rs ! 1) (tl (tl rs)))\\<close> \\<open>j < rs ! 0\\<close>, unfolded \\<open>output_size' (witness' (rs ! 1) (tl (tl rs))) = rs ! 1\\<close>]"], ["proof (prove)\nusing this:\n  0 < rs ! 1 \\<Longrightarrow>\n  tensors_from_net\n   (Conv (copy_first_matrix (rs ! 0) (rs ! 1))\n     (witness' (rs ! 1) (tl (tl rs)))) $\n  j =\n  tensors_from_net (witness' (rs ! 1) (tl (tl rs))) $ 0\n\ngoal (1 subgoal):\n 1. tensors_from_net\n     (Conv (copy_first_matrix (rs ! 0) (rs ! 1))\n       (witness' (rs ! 1) (tl (tl rs)))) $\n    j =\n    tensors_from_net (witness' (rs ! 1) (tl (tl rs))) $ 0", "using \"4\" One_nat_def \\<open>rs = r # tl rs\\<close> nth_Cons_Suc"], ["proof (prove)\nusing this:\n  0 < rs ! 1 \\<Longrightarrow>\n  tensors_from_net\n   (Conv (copy_first_matrix (rs ! 0) (rs ! 1))\n     (witness' (rs ! 1) (tl (tl rs)))) $\n  j =\n  tensors_from_net (witness' (rs ! 1) (tl (tl rs))) $ 0\n  0 < tl rs ! 0\n  1 = Suc 0\n  rs = r # tl rs\n  (?x # ?xs) ! Suc ?n = ?xs ! ?n\n\ngoal (1 subgoal):\n 1. tensors_from_net\n     (Conv (copy_first_matrix (rs ! 0) (rs ! 1))\n       (witness' (rs ! 1) (tl (tl rs)))) $\n    j =\n    tensors_from_net (witness' (rs ! 1) (tl (tl rs))) $ 0", "by metis"], ["proof (state)\nthis:\n  tensors_from_net\n   (Conv (copy_first_matrix (rs ! 0) (rs ! 1))\n     (witness' (rs ! 1) (tl (tl rs)))) $\n  j =\n  tensors_from_net (witness' (rs ! 1) (tl (tl rs))) $ 0\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness_l rs) $ j) is =\n    (if nths is (Collect even) = nths is {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is. i < last (butlast rs))\n     then 1 else 0)", "then"], ["proof (chain)\npicking this:\n  tensors_from_net\n   (Conv (copy_first_matrix (rs ! 0) (rs ! 1))\n     (witness' (rs ! 1) (tl (tl rs)))) $\n  j =\n  tensors_from_net (witness' (rs ! 1) (tl (tl rs))) $ 0", "show ?thesis"], ["proof (prove)\nusing this:\n  tensors_from_net\n   (Conv (copy_first_matrix (rs ! 0) (rs ! 1))\n     (witness' (rs ! 1) (tl (tl rs)))) $\n  j =\n  tensors_from_net (witness' (rs ! 1) (tl (tl rs))) $ 0\n\ngoal (1 subgoal):\n 1. lookup (tensors_from_net (witness_l rs) $ j) is =\n    (if nths is (Collect even) = nths is {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is. i < last (butlast rs))\n     then 1 else 0)", "unfolding witness.simps if_resolve \\<open>output_size' (witness' (rs ! 1) (tl (tl rs))) = rs ! 1\\<close>"], ["proof (prove)\nusing this:\n  tensors_from_net\n   (Conv (copy_first_matrix (rs ! 0) (rs ! 1))\n     (witness' (rs ! 1) (tl (tl rs)))) $\n  j =\n  tensors_from_net (witness' (rs ! 1) (tl (tl rs))) $ 0\n\ngoal (1 subgoal):\n 1. lookup\n     (tensors_from_net\n       (Conv (copy_first_matrix (rs ! 0) (rs ! 1))\n         (witness' (rs ! 1) (tl (tl rs)))) $\n      j)\n     is =\n    (if nths is (Collect even) = nths is {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is. i < last (butlast rs))\n     then 1 else 0)", "using lookup_witness' \\<open>valid_net' (witness' (rs ! 1) (tl (tl rs)))\\<close> hd_conv_nth output_size_correct_tensors"], ["proof (prove)\nusing this:\n  tensors_from_net\n   (Conv (copy_first_matrix (rs ! 0) (rs ! 1))\n     (witness' (rs ! 1) (tl (tl rs)))) $\n  j =\n  tensors_from_net (witness' (rs ! 1) (tl (tl rs))) $ 0\n  lookup (tensors_from_net (witness' (rs ! 1) (tl (tl rs))) $ 0) is =\n  (if nths is (Collect even) = nths is {n. odd n} \\<and>\n      (\\<forall>i\\<in>set is. i < last (butlast rs))\n   then 1 else 0)\n  valid_net' (witness' (rs ! 1) (tl (tl rs)))\n  ?xs \\<noteq> [] \\<Longrightarrow> hd ?xs = ?xs ! 0\n  valid_net' ?m \\<Longrightarrow>\n  output_size' ?m = dim_vec (tensors_from_net ?m)\n\ngoal (1 subgoal):\n 1. lookup\n     (tensors_from_net\n       (Conv (copy_first_matrix (rs ! 0) (rs ! 1))\n         (witness' (rs ! 1) (tl (tl rs)))) $\n      j)\n     is =\n    (if nths is (Collect even) = nths is {n. odd n} \\<and>\n        (\\<forall>i\\<in>set is. i < last (butlast rs))\n     then 1 else 0)", "by fastforce"], ["proof (state)\nthis:\n  lookup (tensors_from_net (witness_l rs) $ j) is =\n  (if nths is (Collect even) = nths is {n. odd n} \\<and>\n      (\\<forall>i\\<in>set is. i < last (butlast rs))\n   then 1 else 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup (tensors_from_net (witness_l rs) $ j) is =\n  (if nths is (Collect even) = nths is {n. odd n} \\<and>\n      (\\<forall>i\\<in>set is. i < last (butlast rs))\n   then 1 else 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma witness_matricization:\nassumes \"i < dim_row Aw'\" and \"j < dim_col Aw'\"\nshows \"Aw' $$ (i, j)\n = (if i=j \\<and> (\\<forall>i0\\<in>set (digit_encode (nths (Tensor.dims Aw) {n. even n}) i). i0 < last (butlast rs)) then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aw' $$ (i, j) =\n    (if i = j \\<and>\n        (\\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even))\n                               i).\n            i0 < last (butlast rs))\n     then 1 else 0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Aw' $$ (i, j) =\n    (if i = j \\<and>\n        (\\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even))\n                               i).\n            i0 < last (butlast rs))\n     then 1 else 0)", "define \"is\" where \"is = weave {n. even n}\n    (digit_encode (nths (Tensor.dims Aw) {n. even n}) i)\n    (digit_encode (nths (Tensor.dims Aw) {n. odd n}) j)\""], ["proof (state)\nthis:\n  is =\n  weave (Collect even) (digit_encode (nths (dims Aw) (Collect even)) i)\n   (digit_encode (nths (dims Aw) {n. odd n}) j)\n\ngoal (1 subgoal):\n 1. Aw' $$ (i, j) =\n    (if i = j \\<and>\n        (\\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even))\n                               i).\n            i0 < last (butlast rs))\n     then 1 else 0)", "have lookup_eq: \"Aw' $$ (i, j) = Tensor.lookup Aw is\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aw' $$ (i, j) = lookup Aw is", "using Aw'_def matricize_def dims_Aw'(1)[symmetric, unfolded A_def] dims_Aw'(2)[symmetric, unfolded A_def Collect_neg_eq]\n    index_mat(1)[OF \\<open>i < dim_row Aw'\\<close> \\<open>j < dim_col Aw'\\<close>] is_def Collect_neg_eq case_prod_conv"], ["proof (prove)\nusing this:\n  Aw' = ten2mat Aw\n  matricize ?rmodes ?T =\n  mat (prod_list (nths (dims ?T) ?rmodes))\n   (prod_list (nths (dims ?T) (- ?rmodes)))\n   (\\<lambda>(r, c).\n       lookup ?T\n        (weave ?rmodes (digit_encode (nths (dims ?T) ?rmodes) r)\n          (digit_encode (nths (dims ?T) (- ?rmodes)) c)))\n  prod_list (nths (dims Aw) (Collect even)) = dim_row Aw'\n  prod_list (nths (dims Aw) (- Collect even)) = dim_col Aw'\n  mat (dim_row Aw') (dim_col Aw') ?f $$ (i, j) = ?f (i, j)\n  is =\n  weave (Collect even) (digit_encode (nths (dims Aw) (Collect even)) i)\n   (digit_encode (nths (dims Aw) {n. odd n}) j)\n  {x. \\<not> ?P x} = - {x. ?P x}\n  (case (?a, ?b) of (c, d) \\<Rightarrow> ?f c d) = ?f ?a ?b\n\ngoal (1 subgoal):\n 1. Aw' $$ (i, j) = lookup Aw is", "by (metis (no_types) Aw'_def Collect_neg_eq  case_prod_conv is_def matricize_def)"], ["proof (state)\nthis:\n  Aw' $$ (i, j) = lookup Aw is\n\ngoal (1 subgoal):\n 1. Aw' $$ (i, j) =\n    (if i = j \\<and>\n        (\\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even))\n                               i).\n            i0 < last (butlast rs))\n     then 1 else 0)", "have \"is \\<lhd> Tensor.dims Aw\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is \\<lhd> dims Aw", "using is_def valid_index_weave A_def Collect_neg_eq assms digit_encode_valid_index\n    dims_Aw'"], ["proof (prove)\nusing this:\n  is =\n  weave (Collect even) (digit_encode (nths (dims Aw) (Collect even)) i)\n   (digit_encode (nths (dims Aw) {n. odd n}) j)\n  \\<lbrakk>?is1.0 \\<lhd> nths ?ds ?A; ?is2.0 \\<lhd> nths ?ds (- ?A)\\<rbrakk>\n  \\<Longrightarrow> weave ?A ?is1.0 ?is2.0 \\<lhd> ?ds\n  \\<lbrakk>?is1.0 \\<lhd> nths ?ds ?A; ?is2.0 \\<lhd> nths ?ds (- ?A)\\<rbrakk>\n  \\<Longrightarrow> nths (weave ?A ?is1.0 ?is2.0) ?A = ?is1.0\n  \\<lbrakk>?is1.0 \\<lhd> nths ?ds ?A; ?is2.0 \\<lhd> nths ?ds (- ?A)\\<rbrakk>\n  \\<Longrightarrow> nths (weave ?A ?is1.0 ?is2.0) (- ?A) = ?is2.0\n  A ?ws =\n  tensors_from_net (insert_weights shared_weights (deep_model_l rs) ?ws) $ y\n  {x. \\<not> ?P x} = - {x. ?P x}\n  i < dim_row Aw'\n  j < dim_col Aw'\n  ?a < prod_list ?ds \\<Longrightarrow> digit_encode ?ds ?a \\<lhd> ?ds\n  dim_row Aw' = prod_list (nths (dims Aw) (Collect even))\n  dim_col Aw' = prod_list (nths (dims Aw) {n. odd n})\n\ngoal (1 subgoal):\n 1. is \\<lhd> dims Aw", "by metis"], ["proof (state)\nthis:\n  is \\<lhd> dims Aw\n\ngoal (1 subgoal):\n 1. Aw' $$ (i, j) =\n    (if i = j \\<and>\n        (\\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even))\n                               i).\n            i0 < last (butlast rs))\n     then 1 else 0)", "have \"even (order Aw)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. even (order Aw)", "unfolding Aw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. even (order (tensors_from_net (witness_l rs) $ y))", "using assms dims_output_witness even_numeral le_eq_less_or_eq numeral_2_eq_2 numeral_3_eq_3 deep no_zeros y_valid"], ["proof (prove)\nusing this:\n  i < dim_row Aw'\n  j < dim_col Aw'\n  \\<lbrakk>2 \\<le> length ?rs;\n   \\<And>r. r \\<in> set ?rs \\<Longrightarrow> 0 < r; ?j < ?rs ! 0\\<rbrakk>\n  \\<Longrightarrow> dims (tensors_from_net (witness_l ?rs) $ ?j) =\n                    replicate (2 ^ (length ?rs - 2)) (last ?rs)\n  even (numeral (num.Bit0 ?n))\n  (?m \\<le> ?n) = (?m < ?n \\<or> ?m = ?n)\n  2 = Suc (Suc 0)\n  3 = Suc (Suc (Suc 0))\n  3 \\<le> length rs\n  ?r \\<in> set rs \\<Longrightarrow> 0 < ?r\n  y < rs ! 0\n\ngoal (1 subgoal):\n 1. even (order (tensors_from_net (witness_l rs) $ y))", "by fastforce"], ["proof (state)\nthis:\n  even (order Aw)\n\ngoal (1 subgoal):\n 1. Aw' $$ (i, j) =\n    (if i = j \\<and>\n        (\\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even))\n                               i).\n            i0 < last (butlast rs))\n     then 1 else 0)", "have nths_dimsAw: \"nths (Tensor.dims Aw) (Collect even) = nths (Tensor.dims Aw) {n. odd n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (dims Aw) (Collect even) = nths (dims Aw) {n. odd n}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. nths (dims Aw) (Collect even) = nths (dims Aw) {n. odd n}", "have 0:\"Tensor.dims (tensors_from_net (witness_l rs) $ y) = replicate (2 ^ (length rs - 2)) (last rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dims (tensors_from_net (witness_l rs) $ y) =\n    replicate (2 ^ (length rs - 2)) (last rs)", "using dims_output_witness[OF _ no_zeros y_valid]"], ["proof (prove)\nusing this:\n  \\<lbrakk>2 \\<le> length rs;\n   \\<And>r. r \\<in> set rs \\<Longrightarrow> r \\<in> set rs\\<rbrakk>\n  \\<Longrightarrow> dims (tensors_from_net (witness_l rs) $ y) =\n                    replicate (2 ^ (length rs - 2)) (last rs)\n\ngoal (1 subgoal):\n 1. dims (tensors_from_net (witness_l rs) $ y) =\n    replicate (2 ^ (length rs - 2)) (last rs)", "using deep"], ["proof (prove)\nusing this:\n  \\<lbrakk>2 \\<le> length rs;\n   \\<And>r. r \\<in> set rs \\<Longrightarrow> r \\<in> set rs\\<rbrakk>\n  \\<Longrightarrow> dims (tensors_from_net (witness_l rs) $ y) =\n                    replicate (2 ^ (length rs - 2)) (last rs)\n  3 \\<le> length rs\n\ngoal (1 subgoal):\n 1. dims (tensors_from_net (witness_l rs) $ y) =\n    replicate (2 ^ (length rs - 2)) (last rs)", "by linarith"], ["proof (state)\nthis:\n  dims (tensors_from_net (witness_l rs) $ y) =\n  replicate (2 ^ (length rs - 2)) (last rs)\n\ngoal (1 subgoal):\n 1. nths (dims Aw) (Collect even) = nths (dims Aw) {n. odd n}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (dims Aw) (Collect even) = nths (dims Aw) {n. odd n}", "unfolding A_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (dims Aw) (Collect even) = nths (dims Aw) {n. odd n}", "using nths_replicate"], ["proof (prove)\nusing this:\n  nths (replicate ?n ?x) ?A =\n  replicate (card {i. i < ?n \\<and> i \\<in> ?A}) ?x\n\ngoal (1 subgoal):\n 1. nths (dims Aw) (Collect even) = nths (dims Aw) {n. odd n}", "by (metis (no_types, lifting) \"0\" Aw_def \\<open>even (order Aw)\\<close> length_replicate length_nths_even)"], ["proof (state)\nthis:\n  nths (dims Aw) (Collect even) = nths (dims Aw) {n. odd n}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  nths (dims Aw) (Collect even) = nths (dims Aw) {n. odd n}\n\ngoal (1 subgoal):\n 1. Aw' $$ (i, j) =\n    (if i = j \\<and>\n        (\\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even))\n                               i).\n            i0 < last (butlast rs))\n     then 1 else 0)", "have \"i = j \\<longleftrightarrow> nths is (Collect even) = nths is {n. odd n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i = j) = (nths is (Collect even) = nths is {n. odd n})", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. i = j \\<Longrightarrow> nths is (Collect even) = nths is {n. odd n}\n 2. nths is (Collect even) = nths is {n. odd n} \\<Longrightarrow> i = j", "have eq_lengths: \"length (digit_encode (nths (Tensor.dims Aw) (Collect even)) i)\n        = length (digit_encode (nths (Tensor.dims Aw) {n. odd n}) j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (digit_encode (nths (dims Aw) (Collect even)) i) =\n    length (digit_encode (nths (dims Aw) {n. odd n}) j)", "unfolding length_digit_encode"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (nths (dims Aw) (Collect even)) =\n    length (nths (dims Aw) {n. odd n})", "by (metis \\<open>even (order Aw)\\<close> length_nths_even)"], ["proof (state)\nthis:\n  length (digit_encode (nths (dims Aw) (Collect even)) i) =\n  length (digit_encode (nths (dims Aw) {n. odd n}) j)\n\ngoal (2 subgoals):\n 1. i = j \\<Longrightarrow> nths is (Collect even) = nths is {n. odd n}\n 2. nths is (Collect even) = nths is {n. odd n} \\<Longrightarrow> i = j", "then"], ["proof (chain)\npicking this:\n  length (digit_encode (nths (dims Aw) (Collect even)) i) =\n  length (digit_encode (nths (dims Aw) {n. odd n}) j)", "show \"i = j \\<Longrightarrow> nths is (Collect even) = nths is {n. odd n}\""], ["proof (prove)\nusing this:\n  length (digit_encode (nths (dims Aw) (Collect even)) i) =\n  length (digit_encode (nths (dims Aw) {n. odd n}) j)\n\ngoal (1 subgoal):\n 1. i = j \\<Longrightarrow> nths is (Collect even) = nths is {n. odd n}", "unfolding is_def"], ["proof (prove)\nusing this:\n  length (digit_encode (nths (dims Aw) (Collect even)) i) =\n  length (digit_encode (nths (dims Aw) {n. odd n}) j)\n\ngoal (1 subgoal):\n 1. i = j \\<Longrightarrow>\n    nths\n     (weave (Collect even) (digit_encode (nths (dims Aw) (Collect even)) i)\n       (digit_encode (nths (dims Aw) {n. odd n}) j))\n     (Collect even) =\n    nths\n     (weave (Collect even) (digit_encode (nths (dims Aw) (Collect even)) i)\n       (digit_encode (nths (dims Aw) {n. odd n}) j))\n     {n. odd n}", "using nths_weave[of \"digit_encode (nths (Tensor.dims Aw) (Collect even)) i\"\n      \"Collect even\" \"digit_encode (nths (Tensor.dims Aw) {n. odd n}) j\", unfolded eq_lengths, unfolded Collect_neg_eq[symmetric] card_even mult_2[symmetric] card_odd]\n      nths_dimsAw"], ["proof (prove)\nusing this:\n  length (digit_encode (nths (dims Aw) (Collect even)) i) =\n  length (digit_encode (nths (dims Aw) {n. odd n}) j)\n  \\<lbrakk>length (digit_encode (nths (dims Aw) {n. odd n}) j) =\n           length (digit_encode (nths (dims Aw) {n. odd n}) j);\n   length (digit_encode (nths (dims Aw) {n. odd n}) j) =\n   length (digit_encode (nths (dims Aw) {n. odd n}) j)\\<rbrakk>\n  \\<Longrightarrow> nths\n                     (weave (Collect even)\n                       (digit_encode (nths (dims Aw) (Collect even)) i)\n                       (digit_encode (nths (dims Aw) {n. odd n}) j))\n                     (Collect even) =\n                    digit_encode (nths (dims Aw) (Collect even)) i \\<and>\n                    nths\n                     (weave (Collect even)\n                       (digit_encode (nths (dims Aw) (Collect even)) i)\n                       (digit_encode (nths (dims Aw) {n. odd n}) j))\n                     {x. odd x} =\n                    digit_encode (nths (dims Aw) {n. odd n}) j\n  nths (dims Aw) (Collect even) = nths (dims Aw) {n. odd n}\n\ngoal (1 subgoal):\n 1. i = j \\<Longrightarrow>\n    nths\n     (weave (Collect even) (digit_encode (nths (dims Aw) (Collect even)) i)\n       (digit_encode (nths (dims Aw) {n. odd n}) j))\n     (Collect even) =\n    nths\n     (weave (Collect even) (digit_encode (nths (dims Aw) (Collect even)) i)\n       (digit_encode (nths (dims Aw) {n. odd n}) j))\n     {n. odd n}", "by simp"], ["proof (state)\nthis:\n  i = j \\<Longrightarrow> nths is (Collect even) = nths is {n. odd n}\n\ngoal (1 subgoal):\n 1. nths is (Collect even) = nths is {n. odd n} \\<Longrightarrow> i = j", "show \"nths is (Collect even) = nths is {n. odd n} \\<Longrightarrow> i = j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths is (Collect even) = nths is {n. odd n} \\<Longrightarrow> i = j", "unfolding is_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths\n     (weave (Collect even) (digit_encode (nths (dims Aw) (Collect even)) i)\n       (digit_encode (nths (dims Aw) {n. odd n}) j))\n     (Collect even) =\n    nths\n     (weave (Collect even) (digit_encode (nths (dims Aw) (Collect even)) i)\n       (digit_encode (nths (dims Aw) {n. odd n}) j))\n     {n. odd n} \\<Longrightarrow>\n    i = j", "using nths_weave[of \"digit_encode (nths (Tensor.dims Aw) (Collect even)) i\"\n      \"Collect even\" \"digit_encode (nths (Tensor.dims Aw) {n. odd n}) j\", unfolded eq_lengths, unfolded Collect_neg_eq[symmetric] card_even mult_2[symmetric] card_odd]"], ["proof (prove)\nusing this:\n  \\<lbrakk>length (digit_encode (nths (dims Aw) {n. odd n}) j) =\n           length (digit_encode (nths (dims Aw) {n. odd n}) j);\n   length (digit_encode (nths (dims Aw) {n. odd n}) j) =\n   length (digit_encode (nths (dims Aw) {n. odd n}) j)\\<rbrakk>\n  \\<Longrightarrow> nths\n                     (weave (Collect even)\n                       (digit_encode (nths (dims Aw) (Collect even)) i)\n                       (digit_encode (nths (dims Aw) {n. odd n}) j))\n                     (Collect even) =\n                    digit_encode (nths (dims Aw) (Collect even)) i \\<and>\n                    nths\n                     (weave (Collect even)\n                       (digit_encode (nths (dims Aw) (Collect even)) i)\n                       (digit_encode (nths (dims Aw) {n. odd n}) j))\n                     {x. odd x} =\n                    digit_encode (nths (dims Aw) {n. odd n}) j\n\ngoal (1 subgoal):\n 1. nths\n     (weave (Collect even) (digit_encode (nths (dims Aw) (Collect even)) i)\n       (digit_encode (nths (dims Aw) {n. odd n}) j))\n     (Collect even) =\n    nths\n     (weave (Collect even) (digit_encode (nths (dims Aw) (Collect even)) i)\n       (digit_encode (nths (dims Aw) {n. odd n}) j))\n     {n. odd n} \\<Longrightarrow>\n    i = j", "using \\<open>nths (Tensor.dims Aw) (Collect even) = nths (Tensor.dims Aw) {n. odd n}\\<close>\n        deep no_zeros y_valid assms digit_decode_encode dims_Aw'"], ["proof (prove)\nusing this:\n  \\<lbrakk>length (digit_encode (nths (dims Aw) {n. odd n}) j) =\n           length (digit_encode (nths (dims Aw) {n. odd n}) j);\n   length (digit_encode (nths (dims Aw) {n. odd n}) j) =\n   length (digit_encode (nths (dims Aw) {n. odd n}) j)\\<rbrakk>\n  \\<Longrightarrow> nths\n                     (weave (Collect even)\n                       (digit_encode (nths (dims Aw) (Collect even)) i)\n                       (digit_encode (nths (dims Aw) {n. odd n}) j))\n                     (Collect even) =\n                    digit_encode (nths (dims Aw) (Collect even)) i \\<and>\n                    nths\n                     (weave (Collect even)\n                       (digit_encode (nths (dims Aw) (Collect even)) i)\n                       (digit_encode (nths (dims Aw) {n. odd n}) j))\n                     {x. odd x} =\n                    digit_encode (nths (dims Aw) {n. odd n}) j\n  nths (dims Aw) (Collect even) = nths (dims Aw) {n. odd n}\n  3 \\<le> length rs\n  ?r \\<in> set rs \\<Longrightarrow> 0 < ?r\n  y < rs ! 0\n  i < dim_row Aw'\n  j < dim_col Aw'\n  digit_decode ?ds (digit_encode ?ds ?a) = ?a mod prod_list ?ds\n  dim_row Aw' = prod_list (nths (dims Aw) (Collect even))\n  dim_col Aw' = prod_list (nths (dims Aw) {n. odd n})\n\ngoal (1 subgoal):\n 1. nths\n     (weave (Collect even) (digit_encode (nths (dims Aw) (Collect even)) i)\n       (digit_encode (nths (dims Aw) {n. odd n}) j))\n     (Collect even) =\n    nths\n     (weave (Collect even) (digit_encode (nths (dims Aw) (Collect even)) i)\n       (digit_encode (nths (dims Aw) {n. odd n}) j))\n     {n. odd n} \\<Longrightarrow>\n    i = j", "by auto (metis digit_decode_encode_lt)"], ["proof (state)\nthis:\n  nths is (Collect even) = nths is {n. odd n} \\<Longrightarrow> i = j\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (i = j) = (nths is (Collect even) = nths is {n. odd n})\n\ngoal (1 subgoal):\n 1. Aw' $$ (i, j) =\n    (if i = j \\<and>\n        (\\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even))\n                               i).\n            i0 < last (butlast rs))\n     then 1 else 0)", "have \"i=j \\<Longrightarrow> set (digit_encode (nths (Tensor.dims Aw) {n. even n}) i) = set is\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i = j \\<Longrightarrow>\n    set (digit_encode (nths (dims Aw) (Collect even)) i) = set is", "unfolding is_def nths_dimsAw"], ["proof (prove)\ngoal (1 subgoal):\n 1. i = j \\<Longrightarrow>\n    set (digit_encode (nths (dims Aw) {n. odd n}) i) =\n    set (weave (Collect even) (digit_encode (nths (dims Aw) {n. odd n}) i)\n          (digit_encode (nths (dims Aw) {n. odd n}) j))", "using set_weave[of \"(digit_encode (nths (Tensor.dims Aw) {n. odd n}) j)\" \"Collect even\"\n                       \"(digit_encode (nths (Tensor.dims Aw) {n. odd n}) j)\",\n                    unfolded mult_2[symmetric] card_even Collect_neg_eq[symmetric] card_odd]\n    Un_absorb card_even card_odd mult_2"], ["proof (prove)\nusing this:\n  \\<lbrakk>length (digit_encode (nths (dims Aw) {n. odd n}) j) =\n           length (digit_encode (nths (dims Aw) {n. odd n}) j);\n   length (digit_encode (nths (dims Aw) {n. odd n}) j) =\n   length (digit_encode (nths (dims Aw) {n. odd n}) j)\\<rbrakk>\n  \\<Longrightarrow> set (weave (Collect even)\n                          (digit_encode (nths (dims Aw) {n. odd n}) j)\n                          (digit_encode (nths (dims Aw) {n. odd n}) j)) =\n                    set (digit_encode (nths (dims Aw) {n. odd n})\n                          j) \\<union>\n                    set (digit_encode (nths (dims Aw) {n. odd n}) j)\n  ?A \\<union> ?A = ?A\n  card {a \\<in> Collect even. a < 2 * ?n} = ?n\n  card {a \\<in> {a. odd a}. a < 2 * ?n} = ?n\n  (2::?'a) * ?z = ?z + ?z\n\ngoal (1 subgoal):\n 1. i = j \\<Longrightarrow>\n    set (digit_encode (nths (dims Aw) {n. odd n}) i) =\n    set (weave (Collect even) (digit_encode (nths (dims Aw) {n. odd n}) i)\n          (digit_encode (nths (dims Aw) {n. odd n}) j))", "by blast"], ["proof (state)\nthis:\n  i = j \\<Longrightarrow>\n  set (digit_encode (nths (dims Aw) (Collect even)) i) = set is\n\ngoal (1 subgoal):\n 1. Aw' $$ (i, j) =\n    (if i = j \\<and>\n        (\\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even))\n                               i).\n            i0 < last (butlast rs))\n     then 1 else 0)", "then"], ["proof (chain)\npicking this:\n  i = j \\<Longrightarrow>\n  set (digit_encode (nths (dims Aw) (Collect even)) i) = set is", "show ?thesis"], ["proof (prove)\nusing this:\n  i = j \\<Longrightarrow>\n  set (digit_encode (nths (dims Aw) (Collect even)) i) = set is\n\ngoal (1 subgoal):\n 1. Aw' $$ (i, j) =\n    (if i = j \\<and>\n        (\\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even))\n                               i).\n            i0 < last (butlast rs))\n     then 1 else 0)", "unfolding lookup_eq"], ["proof (prove)\nusing this:\n  i = j \\<Longrightarrow>\n  set (digit_encode (nths (dims Aw) (Collect even)) i) = set is\n\ngoal (1 subgoal):\n 1. lookup Aw is =\n    (if i = j \\<and>\n        (\\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even))\n                               i).\n            i0 < last (butlast rs))\n     then 1 else 0)", "using witness_tensor[OF \\<open>is \\<lhd> Tensor.dims Aw\\<close>]"], ["proof (prove)\nusing this:\n  i = j \\<Longrightarrow>\n  set (digit_encode (nths (dims Aw) (Collect even)) i) = set is\n  lookup Aw is =\n  (if nths is (Collect even) = nths is {n. odd n} \\<and>\n      (\\<forall>i\\<in>set is. i < last (butlast rs))\n   then 1 else 0)\n\ngoal (1 subgoal):\n 1. lookup Aw is =\n    (if i = j \\<and>\n        (\\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even))\n                               i).\n            i0 < last (butlast rs))\n     then 1 else 0)", "by (simp add: A_def \\<open>(i = j) = (nths is (Collect even) = nths is {n. odd n})\\<close>)"], ["proof (state)\nthis:\n  Aw' $$ (i, j) =\n  (if i = j \\<and>\n      (\\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even)) i).\n          i0 < last (butlast rs))\n   then 1 else 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"rows_with_1 = {i. (\\<forall>i0\\<in>set (digit_encode (nths (Tensor.dims Aw) {n. even n}) i). i0 < last (butlast rs))}\""], ["", "lemma card_low_digits:\nassumes \"m>0\" \"\\<And>d. d\\<in>set ds \\<Longrightarrow> m \\<le> d\"\nshows \"card {i. i<prod_list ds \\<and> (\\<forall>i0\\<in>set (digit_encode ds i). i0 < m)} = m ^ (length ds)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     {i. i < prod_list ds \\<and>\n         (\\<forall>i0\\<in>set (digit_encode ds i). i0 < m)} =\n    m ^ length ds", "using assms"], ["proof (prove)\nusing this:\n  0 < m\n  ?d1 \\<in> set ds \\<Longrightarrow> m \\<le> ?d1\n\ngoal (1 subgoal):\n 1. card\n     {i. i < prod_list ds \\<and>\n         (\\<forall>i0\\<in>set (digit_encode ds i). i0 < m)} =\n    m ^ length ds", "proof (induction ds)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < m;\n     \\<And>d. d \\<in> set [] \\<Longrightarrow> m \\<le> d\\<rbrakk>\n    \\<Longrightarrow> card\n                       {i. i < prod_list [] \\<and>\n                           (\\<forall>i0\\<in>set (digit_encode [] i).\n                               i0 < m)} =\n                      m ^ length []\n 2. \\<And>a ds.\n       \\<lbrakk>\\<lbrakk>0 < m;\n                 \\<And>d.\n                    d \\<in> set ds \\<Longrightarrow> m \\<le> d\\<rbrakk>\n                \\<Longrightarrow> card\n                                   {i. i < prod_list ds \\<and>\n (\\<forall>i0\\<in>set (digit_encode ds i). i0 < m)} =\n                                  m ^ length ds;\n        0 < m;\n        \\<And>d. d \\<in> set (a # ds) \\<Longrightarrow> m \\<le> d\\<rbrakk>\n       \\<Longrightarrow> card\n                          {i. i < prod_list (a # ds) \\<and>\n                              (\\<forall>i0\n  \\<in>set (digit_encode (a # ds) i).\n                                  i0 < m)} =\n                         m ^ length (a # ds)", "case Nil"], ["proof (state)\nthis:\n  0 < m\n  ?d1 \\<in> set [] \\<Longrightarrow> m \\<le> ?d1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < m;\n     \\<And>d. d \\<in> set [] \\<Longrightarrow> m \\<le> d\\<rbrakk>\n    \\<Longrightarrow> card\n                       {i. i < prod_list [] \\<and>\n                           (\\<forall>i0\\<in>set (digit_encode [] i).\n                               i0 < m)} =\n                      m ^ length []\n 2. \\<And>a ds.\n       \\<lbrakk>\\<lbrakk>0 < m;\n                 \\<And>d.\n                    d \\<in> set ds \\<Longrightarrow> m \\<le> d\\<rbrakk>\n                \\<Longrightarrow> card\n                                   {i. i < prod_list ds \\<and>\n (\\<forall>i0\\<in>set (digit_encode ds i). i0 < m)} =\n                                  m ^ length ds;\n        0 < m;\n        \\<And>d. d \\<in> set (a # ds) \\<Longrightarrow> m \\<le> d\\<rbrakk>\n       \\<Longrightarrow> card\n                          {i. i < prod_list (a # ds) \\<and>\n                              (\\<forall>i0\n  \\<in>set (digit_encode (a # ds) i).\n                                  i0 < m)} =\n                         m ^ length (a # ds)", "then"], ["proof (chain)\npicking this:\n  0 < m\n  ?d1 \\<in> set [] \\<Longrightarrow> m \\<le> ?d1", "show ?case"], ["proof (prove)\nusing this:\n  0 < m\n  ?d1 \\<in> set [] \\<Longrightarrow> m \\<le> ?d1\n\ngoal (1 subgoal):\n 1. card\n     {i. i < prod_list [] \\<and>\n         (\\<forall>i0\\<in>set (digit_encode [] i). i0 < m)} =\n    m ^ length []", "using prod_list.Nil"], ["proof (prove)\nusing this:\n  0 < m\n  ?d1 \\<in> set [] \\<Longrightarrow> m \\<le> ?d1\n  prod_list [] = (1::?'a)\n\ngoal (1 subgoal):\n 1. card\n     {i. i < prod_list [] \\<and>\n         (\\<forall>i0\\<in>set (digit_encode [] i). i0 < m)} =\n    m ^ length []", "by simp"], ["proof (state)\nthis:\n  card\n   {i. i < prod_list [] \\<and>\n       (\\<forall>i0\\<in>set (digit_encode [] i). i0 < m)} =\n  m ^ length []\n\ngoal (1 subgoal):\n 1. \\<And>a ds.\n       \\<lbrakk>\\<lbrakk>0 < m;\n                 \\<And>d.\n                    d \\<in> set ds \\<Longrightarrow> m \\<le> d\\<rbrakk>\n                \\<Longrightarrow> card\n                                   {i. i < prod_list ds \\<and>\n (\\<forall>i0\\<in>set (digit_encode ds i). i0 < m)} =\n                                  m ^ length ds;\n        0 < m;\n        \\<And>d. d \\<in> set (a # ds) \\<Longrightarrow> m \\<le> d\\<rbrakk>\n       \\<Longrightarrow> card\n                          {i. i < prod_list (a # ds) \\<and>\n                              (\\<forall>i0\n  \\<in>set (digit_encode (a # ds) i).\n                                  i0 < m)} =\n                         m ^ length (a # ds)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ds.\n       \\<lbrakk>\\<lbrakk>0 < m;\n                 \\<And>d.\n                    d \\<in> set ds \\<Longrightarrow> m \\<le> d\\<rbrakk>\n                \\<Longrightarrow> card\n                                   {i. i < prod_list ds \\<and>\n (\\<forall>i0\\<in>set (digit_encode ds i). i0 < m)} =\n                                  m ^ length ds;\n        0 < m;\n        \\<And>d. d \\<in> set (a # ds) \\<Longrightarrow> m \\<le> d\\<rbrakk>\n       \\<Longrightarrow> card\n                          {i. i < prod_list (a # ds) \\<and>\n                              (\\<forall>i0\n  \\<in>set (digit_encode (a # ds) i).\n                                  i0 < m)} =\n                         m ^ length (a # ds)", "case (Cons d ds)"], ["proof (state)\nthis:\n  \\<lbrakk>0 < m;\n   \\<And>d. d \\<in> set ds \\<Longrightarrow> m \\<le> d\\<rbrakk>\n  \\<Longrightarrow> card\n                     {i. i < prod_list ds \\<and>\n                         (\\<forall>i0\\<in>set (digit_encode ds i).\n                             i0 < m)} =\n                    m ^ length ds\n  0 < m\n  ?d1 \\<in> set (d # ds) \\<Longrightarrow> m \\<le> ?d1\n\ngoal (1 subgoal):\n 1. \\<And>a ds.\n       \\<lbrakk>\\<lbrakk>0 < m;\n                 \\<And>d.\n                    d \\<in> set ds \\<Longrightarrow> m \\<le> d\\<rbrakk>\n                \\<Longrightarrow> card\n                                   {i. i < prod_list ds \\<and>\n (\\<forall>i0\\<in>set (digit_encode ds i). i0 < m)} =\n                                  m ^ length ds;\n        0 < m;\n        \\<And>d. d \\<in> set (a # ds) \\<Longrightarrow> m \\<le> d\\<rbrakk>\n       \\<Longrightarrow> card\n                          {i. i < prod_list (a # ds) \\<and>\n                              (\\<forall>i0\n  \\<in>set (digit_encode (a # ds) i).\n                                  i0 < m)} =\n                         m ^ length (a # ds)", "define low_digits\n    where \"low_digits ds i \\<longleftrightarrow> i < prod_list ds \\<and> (\\<forall>i0\\<in>set (digit_encode ds i). i0 < m)\" for ds i"], ["proof (state)\nthis:\n  low_digits ?ds ?i =\n  (?i < prod_list ?ds \\<and>\n   (\\<forall>i0\\<in>set (digit_encode ?ds ?i). i0 < m))\n\ngoal (1 subgoal):\n 1. \\<And>a ds.\n       \\<lbrakk>\\<lbrakk>0 < m;\n                 \\<And>d.\n                    d \\<in> set ds \\<Longrightarrow> m \\<le> d\\<rbrakk>\n                \\<Longrightarrow> card\n                                   {i. i < prod_list ds \\<and>\n (\\<forall>i0\\<in>set (digit_encode ds i). i0 < m)} =\n                                  m ^ length ds;\n        0 < m;\n        \\<And>d. d \\<in> set (a # ds) \\<Longrightarrow> m \\<le> d\\<rbrakk>\n       \\<Longrightarrow> card\n                          {i. i < prod_list (a # ds) \\<and>\n                              (\\<forall>i0\n  \\<in>set (digit_encode (a # ds) i).\n                                  i0 < m)} =\n                         m ^ length (a # ds)", "have \"card {i. low_digits ds i} = m ^ (length ds)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i. low_digits ds i} = m ^ length ds", "unfolding low_digits_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     {i. i < prod_list ds \\<and>\n         (\\<forall>i0\\<in>set (digit_encode ds i). i0 < m)} =\n    m ^ length ds", "by (simp add: Cons.IH Cons.prems(1) Cons.prems(2))"], ["proof (state)\nthis:\n  card {i. low_digits ds i} = m ^ length ds\n\ngoal (1 subgoal):\n 1. \\<And>a ds.\n       \\<lbrakk>\\<lbrakk>0 < m;\n                 \\<And>d.\n                    d \\<in> set ds \\<Longrightarrow> m \\<le> d\\<rbrakk>\n                \\<Longrightarrow> card\n                                   {i. i < prod_list ds \\<and>\n (\\<forall>i0\\<in>set (digit_encode ds i). i0 < m)} =\n                                  m ^ length ds;\n        0 < m;\n        \\<And>d. d \\<in> set (a # ds) \\<Longrightarrow> m \\<le> d\\<rbrakk>\n       \\<Longrightarrow> card\n                          {i. i < prod_list (a # ds) \\<and>\n                              (\\<forall>i0\n  \\<in>set (digit_encode (a # ds) i).\n                                  i0 < m)} =\n                         m ^ length (a # ds)", "have \"card {i. low_digits (d # ds) i} = card ({..<m} \\<times> {i. low_digits ds i})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i. low_digits (d # ds) i} =\n    card ({..<m} \\<times> {i. low_digits ds i})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card {i. low_digits (d # ds) i} =\n    card ({..<m} \\<times> {i. low_digits ds i})", "define f where \"f p = fst p + d * snd p\" for p"], ["proof (state)\nthis:\n  f ?p = fst ?p + d * snd ?p\n\ngoal (1 subgoal):\n 1. card {i. low_digits (d # ds) i} =\n    card ({..<m} \\<times> {i. low_digits ds i})", "have \"inj_on f ({..<m} \\<times> {i. low_digits ds i})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on f ({..<m} \\<times> {i. low_digits ds i})", "proof (rule inj_onI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {..<m} \\<times> {i. low_digits ds i};\n        y \\<in> {..<m} \\<times> {i. low_digits ds i}; f x = f y\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {..<m} \\<times> {i. low_digits ds i};\n        y \\<in> {..<m} \\<times> {i. low_digits ds i}; f x = f y\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume \"x \\<in> {..<m} \\<times> {i. low_digits ds i}\" \"y \\<in> {..<m} \\<times> {i. low_digits ds i}\" \"f x = f y\""], ["proof (state)\nthis:\n  x \\<in> {..<m} \\<times> {i. low_digits ds i}\n  y \\<in> {..<m} \\<times> {i. low_digits ds i}\n  f x = f y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {..<m} \\<times> {i. low_digits ds i};\n        y \\<in> {..<m} \\<times> {i. low_digits ds i}; f x = f y\\<rbrakk>\n       \\<Longrightarrow> x = y", "then"], ["proof (chain)\npicking this:\n  x \\<in> {..<m} \\<times> {i. low_digits ds i}\n  y \\<in> {..<m} \\<times> {i. low_digits ds i}\n  f x = f y", "have \"fst x<m\" \"fst y<m\""], ["proof (prove)\nusing this:\n  x \\<in> {..<m} \\<times> {i. low_digits ds i}\n  y \\<in> {..<m} \\<times> {i. low_digits ds i}\n  f x = f y\n\ngoal (1 subgoal):\n 1. fst x < m &&& fst y < m", "by auto"], ["proof (state)\nthis:\n  fst x < m\n  fst y < m\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {..<m} \\<times> {i. low_digits ds i};\n        y \\<in> {..<m} \\<times> {i. low_digits ds i}; f x = f y\\<rbrakk>\n       \\<Longrightarrow> x = y", "then"], ["proof (chain)\npicking this:\n  fst x < m\n  fst y < m", "have \"fst x<d\" \"fst y<d\""], ["proof (prove)\nusing this:\n  fst x < m\n  fst y < m\n\ngoal (1 subgoal):\n 1. fst x < d &&& fst y < d", "using Cons(3)"], ["proof (prove)\nusing this:\n  fst x < m\n  fst y < m\n  ?d1 \\<in> set (d # ds) \\<Longrightarrow> m \\<le> ?d1\n\ngoal (1 subgoal):\n 1. fst x < d &&& fst y < d", "by (meson list.set_intros(1) not_le order_trans)+"], ["proof (state)\nthis:\n  fst x < d\n  fst y < d\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {..<m} \\<times> {i. low_digits ds i};\n        y \\<in> {..<m} \\<times> {i. low_digits ds i}; f x = f y\\<rbrakk>\n       \\<Longrightarrow> x = y", "then"], ["proof (chain)\npicking this:\n  fst x < d\n  fst y < d", "have \"f x mod d = fst x\" \"f y mod d = fst y\""], ["proof (prove)\nusing this:\n  fst x < d\n  fst y < d\n\ngoal (1 subgoal):\n 1. f x mod d = fst x &&& f y mod d = fst y", "unfolding f_def"], ["proof (prove)\nusing this:\n  fst x < d\n  fst y < d\n\ngoal (1 subgoal):\n 1. (fst x + d * snd x) mod d = fst x &&& (fst y + d * snd y) mod d = fst y", "by simp_all"], ["proof (state)\nthis:\n  f x mod d = fst x\n  f y mod d = fst y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {..<m} \\<times> {i. low_digits ds i};\n        y \\<in> {..<m} \\<times> {i. low_digits ds i}; f x = f y\\<rbrakk>\n       \\<Longrightarrow> x = y", "have \"f x div d = snd x\"  \"f y div d = snd y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x div d = snd x &&& f y div d = snd y", "using \\<open>f x = f y\\<close> \\<open>f x mod d = fst x\\<close> \\<open>fst y < d\\<close> f_def"], ["proof (prove)\nusing this:\n  f x = f y\n  f x mod d = fst x\n  fst y < d\n  f ?p = fst ?p + d * snd ?p\n\ngoal (1 subgoal):\n 1. f x div d = snd x &&& f y div d = snd y", "by auto"], ["proof (state)\nthis:\n  f x div d = snd x\n  f y div d = snd y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {..<m} \\<times> {i. low_digits ds i};\n        y \\<in> {..<m} \\<times> {i. low_digits ds i}; f x = f y\\<rbrakk>\n       \\<Longrightarrow> x = y", "show \"x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y", "using \\<open>f x = f y\\<close> \\<open>f x div d = snd x\\<close> \\<open>f x mod d = fst x\\<close> \\<open>f y div d = snd y\\<close> \\<open>f y mod d = fst y\\<close> prod_eqI"], ["proof (prove)\nusing this:\n  f x = f y\n  f x div d = snd x\n  f x mod d = fst x\n  f y div d = snd y\n  f y mod d = fst y\n  \\<lbrakk>fst ?p = fst ?q; snd ?p = snd ?q\\<rbrakk>\n  \\<Longrightarrow> ?p = ?q\n\ngoal (1 subgoal):\n 1. x = y", "by fastforce"], ["proof (state)\nthis:\n  x = y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inj_on f ({..<m} \\<times> {i. low_digits ds i})\n\ngoal (1 subgoal):\n 1. card {i. low_digits (d # ds) i} =\n    card ({..<m} \\<times> {i. low_digits ds i})", "have \"f ` ({..<m} \\<times> {i. low_digits ds i}) = {i. low_digits (d # ds) i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` ({..<m} \\<times> {i. low_digits ds i}) = {i. low_digits (d # ds) i}", "proof (rule subset_antisym; rule subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> f ` ({..<m} \\<times> {i. low_digits ds i}) \\<Longrightarrow>\n       x \\<in> {i. low_digits (d # ds) i}\n 2. \\<And>x.\n       x \\<in> {i. low_digits (d # ds) i} \\<Longrightarrow>\n       x \\<in> f ` ({..<m} \\<times> {i. low_digits ds i})", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> f ` ({..<m} \\<times> {i. low_digits ds i}) \\<Longrightarrow>\n       x \\<in> {i. low_digits (d # ds) i}\n 2. \\<And>x.\n       x \\<in> {i. low_digits (d # ds) i} \\<Longrightarrow>\n       x \\<in> f ` ({..<m} \\<times> {i. low_digits ds i})", "assume \"x \\<in> f ` ({..<m} \\<times> {i. low_digits ds i})\""], ["proof (state)\nthis:\n  x \\<in> f ` ({..<m} \\<times> {i. low_digits ds i})\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> f ` ({..<m} \\<times> {i. low_digits ds i}) \\<Longrightarrow>\n       x \\<in> {i. low_digits (d # ds) i}\n 2. \\<And>x.\n       x \\<in> {i. low_digits (d # ds) i} \\<Longrightarrow>\n       x \\<in> f ` ({..<m} \\<times> {i. low_digits ds i})", "then"], ["proof (chain)\npicking this:\n  x \\<in> f ` ({..<m} \\<times> {i. low_digits ds i})", "obtain i0 i1 where \"x = i0 + d * i1\" \"i0 < m\" \"low_digits ds i1\""], ["proof (prove)\nusing this:\n  x \\<in> f ` ({..<m} \\<times> {i. low_digits ds i})\n\ngoal (1 subgoal):\n 1. (\\<And>i0 i1.\n        \\<lbrakk>x = i0 + d * i1; i0 < m; low_digits ds i1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using f_def"], ["proof (prove)\nusing this:\n  x \\<in> f ` ({..<m} \\<times> {i. low_digits ds i})\n  f ?p = fst ?p + d * snd ?p\n\ngoal (1 subgoal):\n 1. (\\<And>i0 i1.\n        \\<lbrakk>x = i0 + d * i1; i0 < m; low_digits ds i1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  x = i0 + d * i1\n  i0 < m\n  low_digits ds i1\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> f ` ({..<m} \\<times> {i. low_digits ds i}) \\<Longrightarrow>\n       x \\<in> {i. low_digits (d # ds) i}\n 2. \\<And>x.\n       x \\<in> {i. low_digits (d # ds) i} \\<Longrightarrow>\n       x \\<in> f ` ({..<m} \\<times> {i. low_digits ds i})", "then"], ["proof (chain)\npicking this:\n  x = i0 + d * i1\n  i0 < m\n  low_digits ds i1", "have \"i0<d\""], ["proof (prove)\nusing this:\n  x = i0 + d * i1\n  i0 < m\n  low_digits ds i1\n\ngoal (1 subgoal):\n 1. i0 < d", "using Cons(3)"], ["proof (prove)\nusing this:\n  x = i0 + d * i1\n  i0 < m\n  low_digits ds i1\n  ?d1 \\<in> set (d # ds) \\<Longrightarrow> m \\<le> ?d1\n\ngoal (1 subgoal):\n 1. i0 < d", "by (meson list.set_intros(1) not_le order_trans)"], ["proof (state)\nthis:\n  i0 < d\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> f ` ({..<m} \\<times> {i. low_digits ds i}) \\<Longrightarrow>\n       x \\<in> {i. low_digits (d # ds) i}\n 2. \\<And>x.\n       x \\<in> {i. low_digits (d # ds) i} \\<Longrightarrow>\n       x \\<in> f ` ({..<m} \\<times> {i. low_digits ds i})", "show \"x \\<in> {i. low_digits (d # ds) i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> {i. low_digits (d # ds) i}", "unfolding low_digits_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> {i. i < prod_list (d # ds) \\<and>\n                (\\<forall>i0\\<in>set (digit_encode (d # ds) i). i0 < m)}", "proof (rule; rule conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. x < prod_list (d # ds)\n 2. \\<forall>i0\\<in>set (digit_encode (d # ds) x). i0 < m", "have \"i1 < prod_list ds\" \"\\<forall>i0\\<in>set (digit_encode ds i1). i0 < m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i1 < prod_list ds &&& \\<forall>i0\\<in>set (digit_encode ds i1). i0 < m", "using \\<open>low_digits ds i1\\<close> low_digits_def"], ["proof (prove)\nusing this:\n  low_digits ds i1\n  low_digits ?ds ?i =\n  (?i < prod_list ?ds \\<and>\n   (\\<forall>i0\\<in>set (digit_encode ?ds ?i). i0 < m))\n\ngoal (1 subgoal):\n 1. i1 < prod_list ds &&& \\<forall>i0\\<in>set (digit_encode ds i1). i0 < m", "by auto"], ["proof (state)\nthis:\n  i1 < prod_list ds\n  \\<forall>i0\\<in>set (digit_encode ds i1). i0 < m\n\ngoal (2 subgoals):\n 1. x < prod_list (d # ds)\n 2. \\<forall>i0\\<in>set (digit_encode (d # ds) x). i0 < m", "show \"x < prod_list (d # ds)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < prod_list (d # ds)", "unfolding prod_list.Cons \\<open>x = i0 + d * i1\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i0 + d * i1 < d * prod_list ds", "using \\<open>i0<d\\<close> \\<open>i1 < prod_list ds\\<close>"], ["proof (prove)\nusing this:\n  i0 < d\n  i1 < prod_list ds\n\ngoal (1 subgoal):\n 1. i0 + d * i1 < d * prod_list ds", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>i0 < d; i1 < prod_list ds\\<rbrakk>\n    \\<Longrightarrow> i0 + d * i1 < d * prod_list ds", "have \"d \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d \\<noteq> 0", "by (metis \\<open>i0 < d\\<close> gr_implies_not0)"], ["proof (state)\nthis:\n  d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i0 < d; i1 < prod_list ds\\<rbrakk>\n    \\<Longrightarrow> i0 + d * i1 < d * prod_list ds", "then"], ["proof (chain)\npicking this:\n  d \\<noteq> 0", "have \"(i0 + d * i1) div (d * prod_list ds) = 0\""], ["proof (prove)\nusing this:\n  d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (i0 + d * i1) div (d * prod_list ds) = 0", "by (simp add: Divides.div_mult2_eq \\<open>i0 < d\\<close> \\<open>i1 < prod_list ds\\<close>)"], ["proof (state)\nthis:\n  (i0 + d * i1) div (d * prod_list ds) = 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i0 < d; i1 < prod_list ds\\<rbrakk>\n    \\<Longrightarrow> i0 + d * i1 < d * prod_list ds", "then"], ["proof (chain)\npicking this:\n  (i0 + d * i1) div (d * prod_list ds) = 0", "show \"i0 + d * i1 < d * prod_list ds\""], ["proof (prove)\nusing this:\n  (i0 + d * i1) div (d * prod_list ds) = 0\n\ngoal (1 subgoal):\n 1. i0 + d * i1 < d * prod_list ds", "by (metis (no_types) \\<open>i0 < d\\<close> \\<open>i1 < prod_list ds\\<close> div_eq_0_iff gr_implies_not0 no_zero_divisors)"], ["proof (state)\nthis:\n  i0 + d * i1 < d * prod_list ds\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x < prod_list (d # ds)\n\ngoal (1 subgoal):\n 1. \\<forall>i0\\<in>set (digit_encode (d # ds) x). i0 < m", "show \"\\<forall>i0\\<in>set (digit_encode (d # ds) x). i0 < m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i0\\<in>set (digit_encode (d # ds) x). i0 < m", "using \\<open>\\<forall>i0\\<in>set (digit_encode ds i1). i0 < m\\<close> \\<open>i0 < d\\<close> \\<open>i0 < m\\<close> \\<open>x = i0 + d * i1\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>i0\\<in>set (digit_encode ds i1). i0 < m\n  i0 < d\n  i0 < m\n  x = i0 + d * i1\n\ngoal (1 subgoal):\n 1. \\<forall>i0\\<in>set (digit_encode (d # ds) x). i0 < m", "by auto"], ["proof (state)\nthis:\n  \\<forall>i0\\<in>set (digit_encode (d # ds) x). i0 < m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> {i. low_digits (d # ds) i}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {i. low_digits (d # ds) i} \\<Longrightarrow>\n       x \\<in> f ` ({..<m} \\<times> {i. low_digits ds i})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {i. low_digits (d # ds) i} \\<Longrightarrow>\n       x \\<in> f ` ({..<m} \\<times> {i. low_digits ds i})", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {i. low_digits (d # ds) i} \\<Longrightarrow>\n       x \\<in> f ` ({..<m} \\<times> {i. low_digits ds i})", "assume \"x \\<in> {i. low_digits (d # ds) i}\""], ["proof (state)\nthis:\n  x \\<in> {i. low_digits (d # ds) i}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {i. low_digits (d # ds) i} \\<Longrightarrow>\n       x \\<in> f ` ({..<m} \\<times> {i. low_digits ds i})", "then"], ["proof (chain)\npicking this:\n  x \\<in> {i. low_digits (d # ds) i}", "have \"x < prod_list (d # ds)\" \"\\<forall>i0\\<in>set (digit_encode (d # ds) x). i0 < m\""], ["proof (prove)\nusing this:\n  x \\<in> {i. low_digits (d # ds) i}\n\ngoal (1 subgoal):\n 1. x < prod_list (d # ds) &&&\n    \\<forall>i0\\<in>set (digit_encode (d # ds) x). i0 < m", "using low_digits_def"], ["proof (prove)\nusing this:\n  x \\<in> {i. low_digits (d # ds) i}\n  low_digits ?ds ?i =\n  (?i < prod_list ?ds \\<and>\n   (\\<forall>i0\\<in>set (digit_encode ?ds ?i). i0 < m))\n\ngoal (1 subgoal):\n 1. x < prod_list (d # ds) &&&\n    \\<forall>i0\\<in>set (digit_encode (d # ds) x). i0 < m", "by auto"], ["proof (state)\nthis:\n  x < prod_list (d # ds)\n  \\<forall>i0\\<in>set (digit_encode (d # ds) x). i0 < m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {i. low_digits (d # ds) i} \\<Longrightarrow>\n       x \\<in> f ` ({..<m} \\<times> {i. low_digits ds i})", "have \"x mod d < m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x mod d < m", "using \\<open>\\<forall>i0\\<in>set (digit_encode (d # ds) x). i0 < m\\<close>[unfolded digit_encode.simps]"], ["proof (prove)\nusing this:\n  \\<forall>i0\\<in>set (x mod d # digit_encode ds (x div d)). i0 < m\n\ngoal (1 subgoal):\n 1. x mod d < m", "by simp"], ["proof (state)\nthis:\n  x mod d < m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {i. low_digits (d # ds) i} \\<Longrightarrow>\n       x \\<in> f ` ({..<m} \\<times> {i. low_digits ds i})", "have \"x div d < prod_list ds\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x div d < prod_list ds", "using \\<open>x < prod_list (d # ds)\\<close>[unfolded prod_list.Cons]"], ["proof (prove)\nusing this:\n  x < d * prod_list ds\n\ngoal (1 subgoal):\n 1. x div d < prod_list ds", "by (metis div_eq_0_iff div_mult2_eq mult_0_right not_less0)"], ["proof (state)\nthis:\n  x div d < prod_list ds\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {i. low_digits (d # ds) i} \\<Longrightarrow>\n       x \\<in> f ` ({..<m} \\<times> {i. low_digits ds i})", "have \"\\<forall>i0\\<in>set (digit_encode ds (x div d)). i0 < m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i0\\<in>set (digit_encode ds (x div d)). i0 < m", "by (simp add: \\<open>\\<forall>i0\\<in>set (digit_encode (d # ds) x). i0 < m\\<close>)"], ["proof (state)\nthis:\n  \\<forall>i0\\<in>set (digit_encode ds (x div d)). i0 < m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {i. low_digits (d # ds) i} \\<Longrightarrow>\n       x \\<in> f ` ({..<m} \\<times> {i. low_digits ds i})", "have \"f ((x mod d),(x div d)) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (x mod d, x div d) = x", "by (simp add: f_def)"], ["proof (state)\nthis:\n  f (x mod d, x div d) = x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {i. low_digits (d # ds) i} \\<Longrightarrow>\n       x \\<in> f ` ({..<m} \\<times> {i. low_digits ds i})", "show \"x \\<in> f ` ({..<m} \\<times> {i. low_digits ds i})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> f ` ({..<m} \\<times> {i. low_digits ds i})", "by (metis SigmaI \\<open>\\<forall>i0\\<in>set (digit_encode ds (x div d)). i0 < m\\<close> \\<open>f (x mod d, x div d) = x\\<close> \\<open>x div d < prod_list ds\\<close> \\<open>x mod d < m\\<close> image_eqI lessThan_iff low_digits_def mem_Collect_eq)"], ["proof (state)\nthis:\n  x \\<in> f ` ({..<m} \\<times> {i. low_digits ds i})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f ` ({..<m} \\<times> {i. low_digits ds i}) = {i. low_digits (d # ds) i}\n\ngoal (1 subgoal):\n 1. card {i. low_digits (d # ds) i} =\n    card ({..<m} \\<times> {i. low_digits ds i})", "then"], ["proof (chain)\npicking this:\n  f ` ({..<m} \\<times> {i. low_digits ds i}) = {i. low_digits (d # ds) i}", "have \"bij_betw f ({..<m} \\<times> {i. low_digits ds i}) {i. low_digits (d # ds) i}\""], ["proof (prove)\nusing this:\n  f ` ({..<m} \\<times> {i. low_digits ds i}) = {i. low_digits (d # ds) i}\n\ngoal (1 subgoal):\n 1. bij_betw f ({..<m} \\<times> {i. low_digits ds i})\n     {i. low_digits (d # ds) i}", "by (simp add: \\<open>inj_on f ({..<m} \\<times> {i. low_digits ds i})\\<close> bij_betw_def)"], ["proof (state)\nthis:\n  bij_betw f ({..<m} \\<times> {i. low_digits ds i})\n   {i. low_digits (d # ds) i}\n\ngoal (1 subgoal):\n 1. card {i. low_digits (d # ds) i} =\n    card ({..<m} \\<times> {i. low_digits ds i})", "then"], ["proof (chain)\npicking this:\n  bij_betw f ({..<m} \\<times> {i. low_digits ds i})\n   {i. low_digits (d # ds) i}", "show ?thesis"], ["proof (prove)\nusing this:\n  bij_betw f ({..<m} \\<times> {i. low_digits ds i})\n   {i. low_digits (d # ds) i}\n\ngoal (1 subgoal):\n 1. card {i. low_digits (d # ds) i} =\n    card ({..<m} \\<times> {i. low_digits ds i})", "by (simp add: bij_betw_same_card)"], ["proof (state)\nthis:\n  card {i. low_digits (d # ds) i} =\n  card ({..<m} \\<times> {i. low_digits ds i})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card {i. low_digits (d # ds) i} =\n  card ({..<m} \\<times> {i. low_digits ds i})\n\ngoal (1 subgoal):\n 1. \\<And>a ds.\n       \\<lbrakk>\\<lbrakk>0 < m;\n                 \\<And>d.\n                    d \\<in> set ds \\<Longrightarrow> m \\<le> d\\<rbrakk>\n                \\<Longrightarrow> card\n                                   {i. i < prod_list ds \\<and>\n (\\<forall>i0\\<in>set (digit_encode ds i). i0 < m)} =\n                                  m ^ length ds;\n        0 < m;\n        \\<And>d. d \\<in> set (a # ds) \\<Longrightarrow> m \\<le> d\\<rbrakk>\n       \\<Longrightarrow> card\n                          {i. i < prod_list (a # ds) \\<and>\n                              (\\<forall>i0\n  \\<in>set (digit_encode (a # ds) i).\n                                  i0 < m)} =\n                         m ^ length (a # ds)", "then"], ["proof (chain)\npicking this:\n  card {i. low_digits (d # ds) i} =\n  card ({..<m} \\<times> {i. low_digits ds i})", "show ?case"], ["proof (prove)\nusing this:\n  card {i. low_digits (d # ds) i} =\n  card ({..<m} \\<times> {i. low_digits ds i})\n\ngoal (1 subgoal):\n 1. card\n     {i. i < prod_list (d # ds) \\<and>\n         (\\<forall>i0\\<in>set (digit_encode (d # ds) i). i0 < m)} =\n    m ^ length (d # ds)", "unfolding \\<open>card {i. low_digits ds i} = m ^ (length ds)\\<close> card_cartesian_product"], ["proof (prove)\nusing this:\n  card {i. low_digits (d # ds) i} = card {..<m} * m ^ length ds\n\ngoal (1 subgoal):\n 1. card\n     {i. i < prod_list (d # ds) \\<and>\n         (\\<forall>i0\\<in>set (digit_encode (d # ds) i). i0 < m)} =\n    m ^ length (d # ds)", "using low_digits_def"], ["proof (prove)\nusing this:\n  card {i. low_digits (d # ds) i} = card {..<m} * m ^ length ds\n  low_digits ?ds ?i =\n  (?i < prod_list ?ds \\<and>\n   (\\<forall>i0\\<in>set (digit_encode ?ds ?i). i0 < m))\n\ngoal (1 subgoal):\n 1. card\n     {i. i < prod_list (d # ds) \\<and>\n         (\\<forall>i0\\<in>set (digit_encode (d # ds) i). i0 < m)} =\n    m ^ length (d # ds)", "by simp"], ["proof (state)\nthis:\n  card\n   {i. i < prod_list (d # ds) \\<and>\n       (\\<forall>i0\\<in>set (digit_encode (d # ds) i). i0 < m)} =\n  m ^ length (d # ds)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_rows_with_1: \"card {i\\<in>rows_with_1. i<dim_row Aw'} = r ^ N_half\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i \\<in> rows_with_1. i < dim_row Aw'} = r ^ N_half", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card {i \\<in> rows_with_1. i < dim_row Aw'} = r ^ N_half", "have 1:\"{i\\<in>rows_with_1. i<dim_row Aw'} = {i. i < prod_list (nths (Tensor.dims Aw) (Collect even)) \\<and>\n             (\\<forall>i0\\<in>set (digit_encode (nths (Tensor.dims Aw) (Collect even)) i). i0 < r)}\" (is \"?A = ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i \\<in> rows_with_1. i < dim_row Aw'} =\n    {i. i < prod_list (nths (dims Aw) (Collect even)) \\<and>\n        (\\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even))\n                               i).\n            i0 < r)}", "proof (rule subset_antisym; rule subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {i \\<in> rows_with_1. i < dim_row Aw'} \\<Longrightarrow>\n       x \\<in> {i. i < prod_list (nths (dims Aw) (Collect even)) \\<and>\n                   (\\<forall>i0\\<in>set (digit_encode\n    (nths (dims Aw) (Collect even)) i).\n                       i0 < r)}\n 2. \\<And>x.\n       x \\<in> {i. i < prod_list (nths (dims Aw) (Collect even)) \\<and>\n                   (\\<forall>i0\\<in>set (digit_encode\n    (nths (dims Aw) (Collect even)) i).\n                       i0 < r)} \\<Longrightarrow>\n       x \\<in> {i \\<in> rows_with_1. i < dim_row Aw'}", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {i \\<in> rows_with_1. i < dim_row Aw'} \\<Longrightarrow>\n       x \\<in> {i. i < prod_list (nths (dims Aw) (Collect even)) \\<and>\n                   (\\<forall>i0\\<in>set (digit_encode\n    (nths (dims Aw) (Collect even)) i).\n                       i0 < r)}\n 2. \\<And>x.\n       x \\<in> {i. i < prod_list (nths (dims Aw) (Collect even)) \\<and>\n                   (\\<forall>i0\\<in>set (digit_encode\n    (nths (dims Aw) (Collect even)) i).\n                       i0 < r)} \\<Longrightarrow>\n       x \\<in> {i \\<in> rows_with_1. i < dim_row Aw'}", "assume \"i \\<in> ?A\""], ["proof (state)\nthis:\n  i \\<in> {i \\<in> rows_with_1. i < dim_row Aw'}\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {i \\<in> rows_with_1. i < dim_row Aw'} \\<Longrightarrow>\n       x \\<in> {i. i < prod_list (nths (dims Aw) (Collect even)) \\<and>\n                   (\\<forall>i0\\<in>set (digit_encode\n    (nths (dims Aw) (Collect even)) i).\n                       i0 < r)}\n 2. \\<And>x.\n       x \\<in> {i. i < prod_list (nths (dims Aw) (Collect even)) \\<and>\n                   (\\<forall>i0\\<in>set (digit_encode\n    (nths (dims Aw) (Collect even)) i).\n                       i0 < r)} \\<Longrightarrow>\n       x \\<in> {i \\<in> rows_with_1. i < dim_row Aw'}", "then"], ["proof (chain)\npicking this:\n  i \\<in> {i \\<in> rows_with_1. i < dim_row Aw'}", "have \"i < dim_row Aw'\" \"\\<forall>i0\\<in>set (digit_encode (nths (Tensor.dims Aw) {n. even n}) i). i0 < last (butlast rs)\""], ["proof (prove)\nusing this:\n  i \\<in> {i \\<in> rows_with_1. i < dim_row Aw'}\n\ngoal (1 subgoal):\n 1. i < dim_row Aw' &&&\n    \\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even)) i).\n       i0 < last (butlast rs)", "using rows_with_1_def"], ["proof (prove)\nusing this:\n  i \\<in> {i \\<in> rows_with_1. i < dim_row Aw'}\n  rows_with_1 =\n  {i. \\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even)) i).\n         i0 < last (butlast rs)}\n\ngoal (1 subgoal):\n 1. i < dim_row Aw' &&&\n    \\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even)) i).\n       i0 < last (butlast rs)", "by auto"], ["proof (state)\nthis:\n  i < dim_row Aw'\n  \\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even)) i).\n     i0 < last (butlast rs)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {i \\<in> rows_with_1. i < dim_row Aw'} \\<Longrightarrow>\n       x \\<in> {i. i < prod_list (nths (dims Aw) (Collect even)) \\<and>\n                   (\\<forall>i0\\<in>set (digit_encode\n    (nths (dims Aw) (Collect even)) i).\n                       i0 < r)}\n 2. \\<And>x.\n       x \\<in> {i. i < prod_list (nths (dims Aw) (Collect even)) \\<and>\n                   (\\<forall>i0\\<in>set (digit_encode\n    (nths (dims Aw) (Collect even)) i).\n                       i0 < r)} \\<Longrightarrow>\n       x \\<in> {i \\<in> rows_with_1. i < dim_row Aw'}", "then"], ["proof (chain)\npicking this:\n  i < dim_row Aw'\n  \\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even)) i).\n     i0 < last (butlast rs)", "have \"i < prod_list (nths (dims Aw) (Collect even))\""], ["proof (prove)\nusing this:\n  i < dim_row Aw'\n  \\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even)) i).\n     i0 < last (butlast rs)\n\ngoal (1 subgoal):\n 1. i < prod_list (nths (dims Aw) (Collect even))", "using dims_Aw'"], ["proof (prove)\nusing this:\n  i < dim_row Aw'\n  \\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even)) i).\n     i0 < last (butlast rs)\n  dim_row Aw' = prod_list (nths (dims Aw) (Collect even))\n  dim_col Aw' = prod_list (nths (dims Aw) {n. odd n})\n\ngoal (1 subgoal):\n 1. i < prod_list (nths (dims Aw) (Collect even))", "by linarith"], ["proof (state)\nthis:\n  i < prod_list (nths (dims Aw) (Collect even))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {i \\<in> rows_with_1. i < dim_row Aw'} \\<Longrightarrow>\n       x \\<in> {i. i < prod_list (nths (dims Aw) (Collect even)) \\<and>\n                   (\\<forall>i0\\<in>set (digit_encode\n    (nths (dims Aw) (Collect even)) i).\n                       i0 < r)}\n 2. \\<And>x.\n       x \\<in> {i. i < prod_list (nths (dims Aw) (Collect even)) \\<and>\n                   (\\<forall>i0\\<in>set (digit_encode\n    (nths (dims Aw) (Collect even)) i).\n                       i0 < r)} \\<Longrightarrow>\n       x \\<in> {i \\<in> rows_with_1. i < dim_row Aw'}", "then"], ["proof (chain)\npicking this:\n  i < prod_list (nths (dims Aw) (Collect even))", "have \"digit_encode (nths (dims Aw) (Collect even)) i \\<lhd> nths (dims Aw) (Collect even)\""], ["proof (prove)\nusing this:\n  i < prod_list (nths (dims Aw) (Collect even))\n\ngoal (1 subgoal):\n 1. digit_encode (nths (dims Aw) (Collect even)) i \\<lhd>\n    nths (dims Aw) (Collect even)", "using digit_encode_valid_index"], ["proof (prove)\nusing this:\n  i < prod_list (nths (dims Aw) (Collect even))\n  ?a < prod_list ?ds \\<Longrightarrow> digit_encode ?ds ?a \\<lhd> ?ds\n\ngoal (1 subgoal):\n 1. digit_encode (nths (dims Aw) (Collect even)) i \\<lhd>\n    nths (dims Aw) (Collect even)", "by auto"], ["proof (state)\nthis:\n  digit_encode (nths (dims Aw) (Collect even)) i \\<lhd>\n  nths (dims Aw) (Collect even)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {i \\<in> rows_with_1. i < dim_row Aw'} \\<Longrightarrow>\n       x \\<in> {i. i < prod_list (nths (dims Aw) (Collect even)) \\<and>\n                   (\\<forall>i0\\<in>set (digit_encode\n    (nths (dims Aw) (Collect even)) i).\n                       i0 < r)}\n 2. \\<And>x.\n       x \\<in> {i. i < prod_list (nths (dims Aw) (Collect even)) \\<and>\n                   (\\<forall>i0\\<in>set (digit_encode\n    (nths (dims Aw) (Collect even)) i).\n                       i0 < r)} \\<Longrightarrow>\n       x \\<in> {i \\<in> rows_with_1. i < dim_row Aw'}", "have \"\\<forall>i0\\<in>set (digit_encode (nths (Tensor.dims Aw) {n. even n}) i). i0 < r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even)) i).\n       i0 < r", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i0.\n       i0 \\<in> set (digit_encode (nths (dims Aw) (Collect even))\n                      i) \\<Longrightarrow>\n       i0 < r", "fix i0"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i0.\n       i0 \\<in> set (digit_encode (nths (dims Aw) (Collect even))\n                      i) \\<Longrightarrow>\n       i0 < r", "assume 1:\"i0 \\<in> set (digit_encode (nths (dims Aw) (Collect even)) i)\""], ["proof (state)\nthis:\n  i0 \\<in> set (digit_encode (nths (dims Aw) (Collect even)) i)\n\ngoal (1 subgoal):\n 1. \\<And>i0.\n       i0 \\<in> set (digit_encode (nths (dims Aw) (Collect even))\n                      i) \\<Longrightarrow>\n       i0 < r", "then"], ["proof (chain)\npicking this:\n  i0 \\<in> set (digit_encode (nths (dims Aw) (Collect even)) i)", "obtain k where \"k < length (digit_encode (nths (dims Aw) (Collect even)) i)\"\n              \"digit_encode (nths (dims Aw) (Collect even)) i ! k = i0\""], ["proof (prove)\nusing this:\n  i0 \\<in> set (digit_encode (nths (dims Aw) (Collect even)) i)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>k < length\n                      (digit_encode (nths (dims Aw) (Collect even)) i);\n         digit_encode (nths (dims Aw) (Collect even)) i ! k = i0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson in_set_conv_nth)"], ["proof (state)\nthis:\n  k < length (digit_encode (nths (dims Aw) (Collect even)) i)\n  digit_encode (nths (dims Aw) (Collect even)) i ! k = i0\n\ngoal (1 subgoal):\n 1. \\<And>i0.\n       i0 \\<in> set (digit_encode (nths (dims Aw) (Collect even))\n                      i) \\<Longrightarrow>\n       i0 < r", "have \"i0 < last (butlast rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i0 < last (butlast rs)", "using \\<open>\\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even)) i). i0 < last (butlast rs)\\<close> 1"], ["proof (prove)\nusing this:\n  \\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even)) i).\n     i0 < last (butlast rs)\n  i0 \\<in> set (digit_encode (nths (dims Aw) (Collect even)) i)\n\ngoal (1 subgoal):\n 1. i0 < last (butlast rs)", "by blast"], ["proof (state)\nthis:\n  i0 < last (butlast rs)\n\ngoal (1 subgoal):\n 1. \\<And>i0.\n       i0 \\<in> set (digit_encode (nths (dims Aw) (Collect even))\n                      i) \\<Longrightarrow>\n       i0 < r", "have \"set (nths (dims Aw) (Collect even)) \\<subseteq> {last rs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (nths (dims Aw) (Collect even)) \\<subseteq> {last rs}", "unfolding dims_Aw"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (nths (replicate (2 * N_half) (last rs)) (Collect even))\n    \\<subseteq> {last rs}", "using subset_eq"], ["proof (prove)\nusing this:\n  (?A \\<subseteq> ?B) = (\\<forall>x\\<in>?A. x \\<in> ?B)\n\ngoal (1 subgoal):\n 1. set (nths (replicate (2 * N_half) (last rs)) (Collect even))\n    \\<subseteq> {last rs}", "by fastforce"], ["proof (state)\nthis:\n  set (nths (dims Aw) (Collect even)) \\<subseteq> {last rs}\n\ngoal (1 subgoal):\n 1. \\<And>i0.\n       i0 \\<in> set (digit_encode (nths (dims Aw) (Collect even))\n                      i) \\<Longrightarrow>\n       i0 < r", "then"], ["proof (chain)\npicking this:\n  set (nths (dims Aw) (Collect even)) \\<subseteq> {last rs}", "have \"nths (dims Aw) (Collect even) ! k = last rs\""], ["proof (prove)\nusing this:\n  set (nths (dims Aw) (Collect even)) \\<subseteq> {last rs}\n\ngoal (1 subgoal):\n 1. nths (dims Aw) (Collect even) ! k = last rs", "using \\<open>digit_encode (nths (dims Aw) (Collect even)) i \\<lhd> nths (dims Aw) (Collect even)\\<close>\n        \\<open>k < length (digit_encode (nths (dims Aw) (Collect even)) i)\\<close>\n        nth_mem valid_index_length"], ["proof (prove)\nusing this:\n  set (nths (dims Aw) (Collect even)) \\<subseteq> {last rs}\n  digit_encode (nths (dims Aw) (Collect even)) i \\<lhd>\n  nths (dims Aw) (Collect even)\n  k < length (digit_encode (nths (dims Aw) (Collect even)) i)\n  ?n < length ?xs \\<Longrightarrow> ?xs ! ?n \\<in> set ?xs\n  ?is \\<lhd> ?ds \\<Longrightarrow> length ?is = length ?ds\n\ngoal (1 subgoal):\n 1. nths (dims Aw) (Collect even) ! k = last rs", "by auto"], ["proof (state)\nthis:\n  nths (dims Aw) (Collect even) ! k = last rs\n\ngoal (1 subgoal):\n 1. \\<And>i0.\n       i0 \\<in> set (digit_encode (nths (dims Aw) (Collect even))\n                      i) \\<Longrightarrow>\n       i0 < r", "then"], ["proof (chain)\npicking this:\n  nths (dims Aw) (Collect even) ! k = last rs", "have \"i0 < last rs\""], ["proof (prove)\nusing this:\n  nths (dims Aw) (Collect even) ! k = last rs\n\ngoal (1 subgoal):\n 1. i0 < last rs", "using valid_index_lt \\<open>digit_encode (nths (dims Aw) (Collect even)) i ! k = i0\\<close>\n        \\<open>digit_encode (nths (dims Aw) (Collect even)) i \\<lhd> nths (dims Aw) (Collect even)\\<close>\n        \\<open>k < length (digit_encode (nths (dims Aw) (Collect even)) i)\\<close> valid_index_length"], ["proof (prove)\nusing this:\n  nths (dims Aw) (Collect even) ! k = last rs\n  \\<lbrakk>?is \\<lhd> ?ds; ?m < length ?ds\\<rbrakk>\n  \\<Longrightarrow> ?is ! ?m < ?ds ! ?m\n  digit_encode (nths (dims Aw) (Collect even)) i ! k = i0\n  digit_encode (nths (dims Aw) (Collect even)) i \\<lhd>\n  nths (dims Aw) (Collect even)\n  k < length (digit_encode (nths (dims Aw) (Collect even)) i)\n  ?is \\<lhd> ?ds \\<Longrightarrow> length ?is = length ?ds\n\ngoal (1 subgoal):\n 1. i0 < last rs", "by fastforce"], ["proof (state)\nthis:\n  i0 < last rs\n\ngoal (1 subgoal):\n 1. \\<And>i0.\n       i0 \\<in> set (digit_encode (nths (dims Aw) (Collect even))\n                      i) \\<Longrightarrow>\n       i0 < r", "then"], ["proof (chain)\npicking this:\n  i0 < last rs", "show \"i0 < r\""], ["proof (prove)\nusing this:\n  i0 < last rs\n\ngoal (1 subgoal):\n 1. i0 < r", "unfolding r_def"], ["proof (prove)\nusing this:\n  i0 < last rs\n\ngoal (1 subgoal):\n 1. i0 < min (last rs) (last (butlast rs))", "by (simp add: \\<open>i0 < last (butlast rs)\\<close>)"], ["proof (state)\nthis:\n  i0 < r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even)) i).\n     i0 < r\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {i \\<in> rows_with_1. i < dim_row Aw'} \\<Longrightarrow>\n       x \\<in> {i. i < prod_list (nths (dims Aw) (Collect even)) \\<and>\n                   (\\<forall>i0\\<in>set (digit_encode\n    (nths (dims Aw) (Collect even)) i).\n                       i0 < r)}\n 2. \\<And>x.\n       x \\<in> {i. i < prod_list (nths (dims Aw) (Collect even)) \\<and>\n                   (\\<forall>i0\\<in>set (digit_encode\n    (nths (dims Aw) (Collect even)) i).\n                       i0 < r)} \\<Longrightarrow>\n       x \\<in> {i \\<in> rows_with_1. i < dim_row Aw'}", "then"], ["proof (chain)\npicking this:\n  \\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even)) i).\n     i0 < r", "show \"i \\<in> ?B\""], ["proof (prove)\nusing this:\n  \\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even)) i).\n     i0 < r\n\ngoal (1 subgoal):\n 1. i \\<in> {i. i < prod_list (nths (dims Aw) (Collect even)) \\<and>\n                (\\<forall>i0\\<in>set (digit_encode\n (nths (dims Aw) (Collect even)) i).\n                    i0 < r)}", "using \\<open>i < prod_list (nths (dims Aw) (Collect even))\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even)) i).\n     i0 < r\n  i < prod_list (nths (dims Aw) (Collect even))\n\ngoal (1 subgoal):\n 1. i \\<in> {i. i < prod_list (nths (dims Aw) (Collect even)) \\<and>\n                (\\<forall>i0\\<in>set (digit_encode\n (nths (dims Aw) (Collect even)) i).\n                    i0 < r)}", "by blast"], ["proof (state)\nthis:\n  i \\<in> {i. i < prod_list (nths (dims Aw) (Collect even)) \\<and>\n              (\\<forall>i0\\<in>set (digit_encode\n                                     (nths (dims Aw) (Collect even)) i).\n                  i0 < r)}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {i. i < prod_list (nths (dims Aw) (Collect even)) \\<and>\n                   (\\<forall>i0\\<in>set (digit_encode\n    (nths (dims Aw) (Collect even)) i).\n                       i0 < r)} \\<Longrightarrow>\n       x \\<in> {i \\<in> rows_with_1. i < dim_row Aw'}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {i. i < prod_list (nths (dims Aw) (Collect even)) \\<and>\n                   (\\<forall>i0\\<in>set (digit_encode\n    (nths (dims Aw) (Collect even)) i).\n                       i0 < r)} \\<Longrightarrow>\n       x \\<in> {i \\<in> rows_with_1. i < dim_row Aw'}", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {i. i < prod_list (nths (dims Aw) (Collect even)) \\<and>\n                   (\\<forall>i0\\<in>set (digit_encode\n    (nths (dims Aw) (Collect even)) i).\n                       i0 < r)} \\<Longrightarrow>\n       x \\<in> {i \\<in> rows_with_1. i < dim_row Aw'}", "assume \"i\\<in>?B\""], ["proof (state)\nthis:\n  i \\<in> {i. i < prod_list (nths (dims Aw) (Collect even)) \\<and>\n              (\\<forall>i0\\<in>set (digit_encode\n                                     (nths (dims Aw) (Collect even)) i).\n                  i0 < r)}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {i. i < prod_list (nths (dims Aw) (Collect even)) \\<and>\n                   (\\<forall>i0\\<in>set (digit_encode\n    (nths (dims Aw) (Collect even)) i).\n                       i0 < r)} \\<Longrightarrow>\n       x \\<in> {i \\<in> rows_with_1. i < dim_row Aw'}", "then"], ["proof (chain)\npicking this:\n  i \\<in> {i. i < prod_list (nths (dims Aw) (Collect even)) \\<and>\n              (\\<forall>i0\\<in>set (digit_encode\n                                     (nths (dims Aw) (Collect even)) i).\n                  i0 < r)}", "show \"i\\<in>?A\""], ["proof (prove)\nusing this:\n  i \\<in> {i. i < prod_list (nths (dims Aw) (Collect even)) \\<and>\n              (\\<forall>i0\\<in>set (digit_encode\n                                     (nths (dims Aw) (Collect even)) i).\n                  i0 < r)}\n\ngoal (1 subgoal):\n 1. i \\<in> {i \\<in> rows_with_1. i < dim_row Aw'}", "by (simp add: dims_Aw' r_def rows_with_1_def)"], ["proof (state)\nthis:\n  i \\<in> {i \\<in> rows_with_1. i < dim_row Aw'}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {i \\<in> rows_with_1. i < dim_row Aw'} =\n  {i. i < prod_list (nths (dims Aw) (Collect even)) \\<and>\n      (\\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even)) i).\n          i0 < r)}\n\ngoal (1 subgoal):\n 1. card {i \\<in> rows_with_1. i < dim_row Aw'} = r ^ N_half", "have 2:\"\\<And>d. d \\<in> set (nths (Tensor.dims Aw) (Collect even)) \\<Longrightarrow> r \\<le> d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>d.\n       d \\<in> set (nths (dims Aw) (Collect even)) \\<Longrightarrow>\n       r \\<le> d", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d.\n       d \\<in> set (nths (dims Aw) (Collect even)) \\<Longrightarrow>\n       r \\<le> d", "fix d"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d.\n       d \\<in> set (nths (dims Aw) (Collect even)) \\<Longrightarrow>\n       r \\<le> d", "assume \"d \\<in> set (nths (Tensor.dims Aw) (Collect even))\""], ["proof (state)\nthis:\n  d \\<in> set (nths (dims Aw) (Collect even))\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       d \\<in> set (nths (dims Aw) (Collect even)) \\<Longrightarrow>\n       r \\<le> d", "then"], ["proof (chain)\npicking this:\n  d \\<in> set (nths (dims Aw) (Collect even))", "have \"d \\<in> set (Tensor.dims Aw)\""], ["proof (prove)\nusing this:\n  d \\<in> set (nths (dims Aw) (Collect even))\n\ngoal (1 subgoal):\n 1. d \\<in> set (dims Aw)", "using in_set_nthsD"], ["proof (prove)\nusing this:\n  d \\<in> set (nths (dims Aw) (Collect even))\n  ?x \\<in> set (nths ?xs ?I) \\<Longrightarrow> ?x \\<in> set ?xs\n\ngoal (1 subgoal):\n 1. d \\<in> set (dims Aw)", "by fast"], ["proof (state)\nthis:\n  d \\<in> set (dims Aw)\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       d \\<in> set (nths (dims Aw) (Collect even)) \\<Longrightarrow>\n       r \\<le> d", "then"], ["proof (chain)\npicking this:\n  d \\<in> set (dims Aw)", "have \"d = last rs\""], ["proof (prove)\nusing this:\n  d \\<in> set (dims Aw)\n\ngoal (1 subgoal):\n 1. d = last rs", "using dims_Aw"], ["proof (prove)\nusing this:\n  d \\<in> set (dims Aw)\n  dims Aw = replicate (2 * N_half) (last rs)\n\ngoal (1 subgoal):\n 1. d = last rs", "by simp"], ["proof (state)\nthis:\n  d = last rs\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       d \\<in> set (nths (dims Aw) (Collect even)) \\<Longrightarrow>\n       r \\<le> d", "then"], ["proof (chain)\npicking this:\n  d = last rs", "show \"r \\<le> d\""], ["proof (prove)\nusing this:\n  d = last rs\n\ngoal (1 subgoal):\n 1. r \\<le> d", "by (simp add: r_def)"], ["proof (state)\nthis:\n  r \\<le> d\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?d1 \\<in> set (nths (dims Aw) (Collect even)) \\<Longrightarrow>\n  r \\<le> ?d1\n\ngoal (1 subgoal):\n 1. card {i \\<in> rows_with_1. i < dim_row Aw'} = r ^ N_half", "have 3:\"0 < r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < r", "unfolding r_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < min (last rs) (last (butlast rs))", "by (metis deep diff_diff_cancel diff_zero dual_order.trans in_set_butlastD last_in_set length_butlast list.size(3) min_def nat_le_linear no_zeros not_numeral_le_zero numeral_le_one_iff rel_simps(3))"], ["proof (state)\nthis:\n  0 < r\n\ngoal (1 subgoal):\n 1. card {i \\<in> rows_with_1. i < dim_row Aw'} = r ^ N_half", "have 4: \"length (nths (Tensor.dims Aw) (Collect even)) = N_half\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (nths (dims Aw) (Collect even)) = N_half", "unfolding length_nths order_Aw"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i. i < 2 * N_half \\<and> i \\<in> Collect even} = N_half", "using card_even[of N_half]"], ["proof (prove)\nusing this:\n  card {a \\<in> Collect even. a < 2 * N_half} = N_half\n\ngoal (1 subgoal):\n 1. card {i. i < 2 * N_half \\<and> i \\<in> Collect even} = N_half", "by (metis (mono_tags, lifting) Collect_cong)"], ["proof (state)\nthis:\n  length (nths (dims Aw) (Collect even)) = N_half\n\ngoal (1 subgoal):\n 1. card {i \\<in> rows_with_1. i < dim_row Aw'} = r ^ N_half", "then"], ["proof (chain)\npicking this:\n  length (nths (dims Aw) (Collect even)) = N_half", "show ?thesis"], ["proof (prove)\nusing this:\n  length (nths (dims Aw) (Collect even)) = N_half\n\ngoal (1 subgoal):\n 1. card {i \\<in> rows_with_1. i < dim_row Aw'} = r ^ N_half", "using card_low_digits[of \"r\" \"nths (Tensor.dims Aw) (Collect even)\"] 1 2 3 4"], ["proof (prove)\nusing this:\n  length (nths (dims Aw) (Collect even)) = N_half\n  \\<lbrakk>0 < r;\n   \\<And>d.\n      d \\<in> set (nths (dims Aw) (Collect even)) \\<Longrightarrow>\n      r \\<le> d\\<rbrakk>\n  \\<Longrightarrow> card\n                     {i. i < prod_list\n                              (nths (dims Aw) (Collect even)) \\<and>\n                         (\\<forall>i0\\<in>set\n     (digit_encode (nths (dims Aw) (Collect even)) i).\n                             i0 < r)} =\n                    r ^ length (nths (dims Aw) (Collect even))\n  {i \\<in> rows_with_1. i < dim_row Aw'} =\n  {i. i < prod_list (nths (dims Aw) (Collect even)) \\<and>\n      (\\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even)) i).\n          i0 < r)}\n  ?d1 \\<in> set (nths (dims Aw) (Collect even)) \\<Longrightarrow>\n  r \\<le> ?d1\n  0 < r\n  length (nths (dims Aw) (Collect even)) = N_half\n\ngoal (1 subgoal):\n 1. card {i \\<in> rows_with_1. i < dim_row Aw'} = r ^ N_half", "by metis"], ["proof (state)\nthis:\n  card {i \\<in> rows_with_1. i < dim_row Aw'} = r ^ N_half\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma infinite_rows_with_1: \"infinite rows_with_1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite rows_with_1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. infinite rows_with_1", "define listpr where \"listpr = prod_list (nths (Tensor.dims Aw) {n. even n})\""], ["proof (state)\nthis:\n  listpr = prod_list (nths (dims Aw) (Collect even))\n\ngoal (1 subgoal):\n 1. infinite rows_with_1", "have \"\\<And>i. listpr dvd i \\<Longrightarrow> i \\<in> rows_with_1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. listpr dvd i \\<Longrightarrow> i \\<in> rows_with_1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. listpr dvd i \\<Longrightarrow> i \\<in> rows_with_1", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. listpr dvd i \\<Longrightarrow> i \\<in> rows_with_1", "assume dvd_i: \"listpr dvd i\""], ["proof (state)\nthis:\n  listpr dvd i\n\ngoal (1 subgoal):\n 1. \\<And>i. listpr dvd i \\<Longrightarrow> i \\<in> rows_with_1", "{"], ["proof (state)\nthis:\n  listpr dvd i\n\ngoal (1 subgoal):\n 1. \\<And>i. listpr dvd i \\<Longrightarrow> i \\<in> rows_with_1", "fix i0::nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. listpr dvd i \\<Longrightarrow> i \\<in> rows_with_1", "assume \"i0\\<in>set (digit_encode (nths (Tensor.dims Aw) {n. even n}) i)\""], ["proof (state)\nthis:\n  i0 \\<in> set (digit_encode (nths (dims Aw) (Collect even)) i)\n\ngoal (1 subgoal):\n 1. \\<And>i. listpr dvd i \\<Longrightarrow> i \\<in> rows_with_1", "then"], ["proof (chain)\npicking this:\n  i0 \\<in> set (digit_encode (nths (dims Aw) (Collect even)) i)", "have \"i0=0\""], ["proof (prove)\nusing this:\n  i0 \\<in> set (digit_encode (nths (dims Aw) (Collect even)) i)\n\ngoal (1 subgoal):\n 1. i0 = 0", "using digit_encode_0 dvd_i listpr_def"], ["proof (prove)\nusing this:\n  i0 \\<in> set (digit_encode (nths (dims Aw) (Collect even)) i)\n  prod_list ?ds dvd ?a \\<Longrightarrow>\n  digit_encode ?ds ?a = replicate (length ?ds) 0\n  listpr dvd i\n  listpr = prod_list (nths (dims Aw) (Collect even))\n\ngoal (1 subgoal):\n 1. i0 = 0", "by auto"], ["proof (state)\nthis:\n  i0 = 0\n\ngoal (1 subgoal):\n 1. \\<And>i. listpr dvd i \\<Longrightarrow> i \\<in> rows_with_1", "then"], ["proof (chain)\npicking this:\n  i0 = 0", "have \"i0 < last (butlast rs)\""], ["proof (prove)\nusing this:\n  i0 = 0\n\ngoal (1 subgoal):\n 1. i0 < last (butlast rs)", "using deep no_zeros"], ["proof (prove)\nusing this:\n  i0 = 0\n  3 \\<le> length rs\n  ?r \\<in> set rs \\<Longrightarrow> 0 < ?r\n\ngoal (1 subgoal):\n 1. i0 < last (butlast rs)", "by (metis Nitpick.size_list_simp(2) One_nat_def Suc_le_lessD in_set_butlastD last_in_set length_butlast length_tl not_numeral_less_zero numeral_2_eq_2 numeral_3_eq_3 numeral_le_one_iff semiring_norm(70))"], ["proof (state)\nthis:\n  i0 < last (butlast rs)\n\ngoal (1 subgoal):\n 1. \\<And>i. listpr dvd i \\<Longrightarrow> i \\<in> rows_with_1", "}"], ["proof (state)\nthis:\n  ?i0.3\n  \\<in> set (digit_encode (nths (dims Aw) (Collect even))\n              i) \\<Longrightarrow>\n  ?i0.3 < last (butlast rs)\n\ngoal (1 subgoal):\n 1. \\<And>i. listpr dvd i \\<Longrightarrow> i \\<in> rows_with_1", "then"], ["proof (chain)\npicking this:\n  ?i0.3\n  \\<in> set (digit_encode (nths (dims Aw) (Collect even))\n              i) \\<Longrightarrow>\n  ?i0.3 < last (butlast rs)", "show \"i\\<in>rows_with_1\""], ["proof (prove)\nusing this:\n  ?i0.3\n  \\<in> set (digit_encode (nths (dims Aw) (Collect even))\n              i) \\<Longrightarrow>\n  ?i0.3 < last (butlast rs)\n\ngoal (1 subgoal):\n 1. i \\<in> rows_with_1", "by (simp add: rows_with_1_def)"], ["proof (state)\nthis:\n  i \\<in> rows_with_1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  listpr dvd ?i1 \\<Longrightarrow> ?i1 \\<in> rows_with_1\n\ngoal (1 subgoal):\n 1. infinite rows_with_1", "have 0:\"Tensor.dims Aw = replicate (2 ^ (length rs - 2)) (last rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dims Aw = replicate (2 ^ (length rs - 2)) (last rs)", "unfolding Aw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dims (tensors_from_net (witness_l rs) $ y) =\n    replicate (2 ^ (length rs - 2)) (last rs)", "using dims_output_witness[OF _ no_zeros y_valid]"], ["proof (prove)\nusing this:\n  \\<lbrakk>2 \\<le> length rs;\n   \\<And>r. r \\<in> set rs \\<Longrightarrow> r \\<in> set rs\\<rbrakk>\n  \\<Longrightarrow> dims (tensors_from_net (witness_l rs) $ y) =\n                    replicate (2 ^ (length rs - 2)) (last rs)\n\ngoal (1 subgoal):\n 1. dims (tensors_from_net (witness_l rs) $ y) =\n    replicate (2 ^ (length rs - 2)) (last rs)", "using deep"], ["proof (prove)\nusing this:\n  \\<lbrakk>2 \\<le> length rs;\n   \\<And>r. r \\<in> set rs \\<Longrightarrow> r \\<in> set rs\\<rbrakk>\n  \\<Longrightarrow> dims (tensors_from_net (witness_l rs) $ y) =\n                    replicate (2 ^ (length rs - 2)) (last rs)\n  3 \\<le> length rs\n\ngoal (1 subgoal):\n 1. dims (tensors_from_net (witness_l rs) $ y) =\n    replicate (2 ^ (length rs - 2)) (last rs)", "by linarith"], ["proof (state)\nthis:\n  dims Aw = replicate (2 ^ (length rs - 2)) (last rs)\n\ngoal (1 subgoal):\n 1. infinite rows_with_1", "then"], ["proof (chain)\npicking this:\n  dims Aw = replicate (2 ^ (length rs - 2)) (last rs)", "have \"listpr > 0\""], ["proof (prove)\nusing this:\n  dims Aw = replicate (2 ^ (length rs - 2)) (last rs)\n\ngoal (1 subgoal):\n 1. 0 < listpr", "unfolding listpr_def 0"], ["proof (prove)\nusing this:\n  replicate (2 ^ (length rs - 2)) (last rs) =\n  replicate (2 ^ (length rs - 2)) (last rs)\n\ngoal (1 subgoal):\n 1. 0 < prod_list\n         (nths (replicate (2 ^ (length rs - 2)) (last rs)) (Collect even))", "by (metis \"0\" deep last_in_set length_greater_0_conv less_le_trans no_zeros dims_Aw'_pow(1) dims_Aw'(1)\n    zero_less_numeral zero_less_power)"], ["proof (state)\nthis:\n  0 < listpr\n\ngoal (1 subgoal):\n 1. infinite rows_with_1", "then"], ["proof (chain)\npicking this:\n  0 < listpr", "have \"inj ((*) listpr)\""], ["proof (prove)\nusing this:\n  0 < listpr\n\ngoal (1 subgoal):\n 1. inj ((*) listpr)", "by (metis injI mult_left_cancel neq0_conv)"], ["proof (state)\nthis:\n  inj ((*) listpr)\n\ngoal (1 subgoal):\n 1. infinite rows_with_1", "then"], ["proof (chain)\npicking this:\n  inj ((*) listpr)", "show ?thesis"], ["proof (prove)\nusing this:\n  inj ((*) listpr)\n\ngoal (1 subgoal):\n 1. infinite rows_with_1", "using \\<open>\\<And>i. listpr dvd i \\<Longrightarrow> i \\<in> rows_with_1\\<close>"], ["proof (prove)\nusing this:\n  inj ((*) listpr)\n  listpr dvd ?i \\<Longrightarrow> ?i \\<in> rows_with_1\n\ngoal (1 subgoal):\n 1. infinite rows_with_1", "by (meson dvd_triv_left image_subset_iff infinite_iff_countable_subset)"], ["proof (state)\nthis:\n  infinite rows_with_1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma witness_submatrix: \"submatrix Aw' rows_with_1 rows_with_1 = 1\\<^sub>m (r^N_half)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. submatrix Aw' rows_with_1 rows_with_1 = 1\\<^sub>m (r ^ N_half)", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (1\\<^sub>m (r ^ N_half));\n        j < dim_col (1\\<^sub>m (r ^ N_half))\\<rbrakk>\n       \\<Longrightarrow> submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) =\n                         1\\<^sub>m (r ^ N_half) $$ (i, j)\n 2. dim_row (submatrix Aw' rows_with_1 rows_with_1) =\n    dim_row (1\\<^sub>m (r ^ N_half))\n 3. dim_col (submatrix Aw' rows_with_1 rows_with_1) =\n    dim_col (1\\<^sub>m (r ^ N_half))", "show \"dim_row (submatrix Aw' rows_with_1 rows_with_1) = dim_row (1\\<^sub>m (r ^ N_half))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (submatrix Aw' rows_with_1 rows_with_1) =\n    dim_row (1\\<^sub>m (r ^ N_half))", "unfolding index_one_mat(2) dim_submatrix(1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i. i < dim_row Aw' \\<and> i \\<in> rows_with_1} = r ^ N_half", "by (metis (full_types) set_le_in card_rows_with_1)"], ["proof (state)\nthis:\n  dim_row (submatrix Aw' rows_with_1 rows_with_1) =\n  dim_row (1\\<^sub>m (r ^ N_half))\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (1\\<^sub>m (r ^ N_half));\n        j < dim_col (1\\<^sub>m (r ^ N_half))\\<rbrakk>\n       \\<Longrightarrow> submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) =\n                         1\\<^sub>m (r ^ N_half) $$ (i, j)\n 2. dim_col (submatrix Aw' rows_with_1 rows_with_1) =\n    dim_col (1\\<^sub>m (r ^ N_half))", "show \"dim_col (submatrix Aw' rows_with_1 rows_with_1) = dim_col (1\\<^sub>m (r ^ N_half))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (submatrix Aw' rows_with_1 rows_with_1) =\n    dim_col (1\\<^sub>m (r ^ N_half))", "by (metis \\<open>dim_row (submatrix Aw' rows_with_1 rows_with_1) = dim_row (1\\<^sub>m (r ^ N_half))\\<close> dim_submatrix(1) dim_submatrix(2) index_one_mat(2) index_one_mat(3) dims_Aw'_pow)"], ["proof (state)\nthis:\n  dim_col (submatrix Aw' rows_with_1 rows_with_1) =\n  dim_col (1\\<^sub>m (r ^ N_half))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (1\\<^sub>m (r ^ N_half));\n        j < dim_col (1\\<^sub>m (r ^ N_half))\\<rbrakk>\n       \\<Longrightarrow> submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) =\n                         1\\<^sub>m (r ^ N_half) $$ (i, j)", "show \"\\<And>i j. i < dim_row (1\\<^sub>m (r ^ N_half)) \\<Longrightarrow>\n           j < dim_col (1\\<^sub>m (r ^ N_half)) \\<Longrightarrow> submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) = 1\\<^sub>m (r ^ N_half) $$ (i, j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (1\\<^sub>m (r ^ N_half));\n        j < dim_col (1\\<^sub>m (r ^ N_half))\\<rbrakk>\n       \\<Longrightarrow> submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) =\n                         1\\<^sub>m (r ^ N_half) $$ (i, j)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (1\\<^sub>m (r ^ N_half));\n        j < dim_col (1\\<^sub>m (r ^ N_half))\\<rbrakk>\n       \\<Longrightarrow> submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) =\n                         1\\<^sub>m (r ^ N_half) $$ (i, j)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (1\\<^sub>m (r ^ N_half));\n        j < dim_col (1\\<^sub>m (r ^ N_half))\\<rbrakk>\n       \\<Longrightarrow> submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) =\n                         1\\<^sub>m (r ^ N_half) $$ (i, j)", "assume \"i < dim_row (1\\<^sub>m (r ^ N_half))\" \"j < dim_col (1\\<^sub>m (r ^ N_half))\""], ["proof (state)\nthis:\n  i < dim_row (1\\<^sub>m (r ^ N_half))\n  j < dim_col (1\\<^sub>m (r ^ N_half))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (1\\<^sub>m (r ^ N_half));\n        j < dim_col (1\\<^sub>m (r ^ N_half))\\<rbrakk>\n       \\<Longrightarrow> submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) =\n                         1\\<^sub>m (r ^ N_half) $$ (i, j)", "then"], ["proof (chain)\npicking this:\n  i < dim_row (1\\<^sub>m (r ^ N_half))\n  j < dim_col (1\\<^sub>m (r ^ N_half))", "have \"i < r ^ N_half\" \"j < r ^ N_half\""], ["proof (prove)\nusing this:\n  i < dim_row (1\\<^sub>m (r ^ N_half))\n  j < dim_col (1\\<^sub>m (r ^ N_half))\n\ngoal (1 subgoal):\n 1. i < r ^ N_half &&& j < r ^ N_half", "by auto"], ["proof (state)\nthis:\n  i < r ^ N_half\n  j < r ^ N_half\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (1\\<^sub>m (r ^ N_half));\n        j < dim_col (1\\<^sub>m (r ^ N_half))\\<rbrakk>\n       \\<Longrightarrow> submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) =\n                         1\\<^sub>m (r ^ N_half) $$ (i, j)", "then"], ["proof (chain)\npicking this:\n  i < r ^ N_half\n  j < r ^ N_half", "have \"i < card {i \\<in> rows_with_1. i < dim_row Aw'}\" \"j < card {i \\<in> rows_with_1. i < dim_col Aw'}\""], ["proof (prove)\nusing this:\n  i < r ^ N_half\n  j < r ^ N_half\n\ngoal (1 subgoal):\n 1. i < card {i \\<in> rows_with_1. i < dim_row Aw'} &&&\n    j < card {i \\<in> rows_with_1. i < dim_col Aw'}", "using card_rows_with_1 dims_Aw'_pow"], ["proof (prove)\nusing this:\n  i < r ^ N_half\n  j < r ^ N_half\n  card {i \\<in> rows_with_1. i < dim_row Aw'} = r ^ N_half\n  dim_row Aw' = last rs ^ N_half\n  dim_col Aw' = last rs ^ N_half\n\ngoal (1 subgoal):\n 1. i < card {i \\<in> rows_with_1. i < dim_row Aw'} &&&\n    j < card {i \\<in> rows_with_1. i < dim_col Aw'}", "by auto"], ["proof (state)\nthis:\n  i < card {i \\<in> rows_with_1. i < dim_row Aw'}\n  j < card {i \\<in> rows_with_1. i < dim_col Aw'}\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (1\\<^sub>m (r ^ N_half));\n        j < dim_col (1\\<^sub>m (r ^ N_half))\\<rbrakk>\n       \\<Longrightarrow> submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) =\n                         1\\<^sub>m (r ^ N_half) $$ (i, j)", "then"], ["proof (chain)\npicking this:\n  i < card {i \\<in> rows_with_1. i < dim_row Aw'}\n  j < card {i \\<in> rows_with_1. i < dim_col Aw'}", "have \"pick rows_with_1 i < dim_row Aw'\" \"pick rows_with_1 j < dim_col Aw'\""], ["proof (prove)\nusing this:\n  i < card {i \\<in> rows_with_1. i < dim_row Aw'}\n  j < card {i \\<in> rows_with_1. i < dim_col Aw'}\n\ngoal (1 subgoal):\n 1. pick rows_with_1 i < dim_row Aw' &&& pick rows_with_1 j < dim_col Aw'", "using card_le_pick_inf[OF infinite_rows_with_1, of \"dim_row Aw'\" i]"], ["proof (prove)\nusing this:\n  i < card {i \\<in> rows_with_1. i < dim_row Aw'}\n  j < card {i \\<in> rows_with_1. i < dim_col Aw'}\n  dim_row Aw' \\<le> pick rows_with_1 i \\<Longrightarrow>\n  card {a \\<in> rows_with_1. a < dim_row Aw'} \\<le> i\n\ngoal (1 subgoal):\n 1. pick rows_with_1 i < dim_row Aw' &&& pick rows_with_1 j < dim_col Aw'", "using card_le_pick_inf[OF infinite_rows_with_1, of \"dim_col Aw'\" j]"], ["proof (prove)\nusing this:\n  i < card {i \\<in> rows_with_1. i < dim_row Aw'}\n  j < card {i \\<in> rows_with_1. i < dim_col Aw'}\n  dim_row Aw' \\<le> pick rows_with_1 i \\<Longrightarrow>\n  card {a \\<in> rows_with_1. a < dim_row Aw'} \\<le> i\n  dim_col Aw' \\<le> pick rows_with_1 j \\<Longrightarrow>\n  card {a \\<in> rows_with_1. a < dim_col Aw'} \\<le> j\n\ngoal (1 subgoal):\n 1. pick rows_with_1 i < dim_row Aw' &&& pick rows_with_1 j < dim_col Aw'", "by force+"], ["proof (state)\nthis:\n  pick rows_with_1 i < dim_row Aw'\n  pick rows_with_1 j < dim_col Aw'\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (1\\<^sub>m (r ^ N_half));\n        j < dim_col (1\\<^sub>m (r ^ N_half))\\<rbrakk>\n       \\<Longrightarrow> submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) =\n                         1\\<^sub>m (r ^ N_half) $$ (i, j)", "have \"\\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even)) (pick rows_with_1 i)). i0 < last (butlast rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even))\n                          (pick rows_with_1 i)).\n       i0 < last (butlast rs)", "using infinite_rows_with_1 pick_in_set_inf rows_with_1_def"], ["proof (prove)\nusing this:\n  infinite rows_with_1\n  infinite ?S \\<Longrightarrow> pick ?S ?n \\<in> ?S\n  rows_with_1 =\n  {i. \\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even)) i).\n         i0 < last (butlast rs)}\n\ngoal (1 subgoal):\n 1. \\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even))\n                          (pick rows_with_1 i)).\n       i0 < last (butlast rs)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even))\n                        (pick rows_with_1 i)).\n     i0 < last (butlast rs)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (1\\<^sub>m (r ^ N_half));\n        j < dim_col (1\\<^sub>m (r ^ N_half))\\<rbrakk>\n       \\<Longrightarrow> submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) =\n                         1\\<^sub>m (r ^ N_half) $$ (i, j)", "then"], ["proof (chain)\npicking this:\n  \\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even))\n                        (pick rows_with_1 i)).\n     i0 < last (butlast rs)", "have \"Aw' $$ (pick rows_with_1 i, pick rows_with_1 j) = (if pick rows_with_1 i = pick rows_with_1 j then 1 else 0)\""], ["proof (prove)\nusing this:\n  \\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even))\n                        (pick rows_with_1 i)).\n     i0 < last (butlast rs)\n\ngoal (1 subgoal):\n 1. Aw' $$ (pick rows_with_1 i, pick rows_with_1 j) =\n    (if pick rows_with_1 i = pick rows_with_1 j then 1 else 0)", "using witness_matricization[OF \\<open>pick rows_with_1 i < dim_row Aw'\\<close> \\<open>pick rows_with_1 j < dim_col Aw'\\<close>]"], ["proof (prove)\nusing this:\n  \\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even))\n                        (pick rows_with_1 i)).\n     i0 < last (butlast rs)\n  Aw' $$ (pick rows_with_1 i, pick rows_with_1 j) =\n  (if pick rows_with_1 i = pick rows_with_1 j \\<and>\n      (\\<forall>i0\\<in>set (digit_encode (nths (dims Aw) (Collect even))\n                             (pick rows_with_1 i)).\n          i0 < last (butlast rs))\n   then 1 else 0)\n\ngoal (1 subgoal):\n 1. Aw' $$ (pick rows_with_1 i, pick rows_with_1 j) =\n    (if pick rows_with_1 i = pick rows_with_1 j then 1 else 0)", "by simp"], ["proof (state)\nthis:\n  Aw' $$ (pick rows_with_1 i, pick rows_with_1 j) =\n  (if pick rows_with_1 i = pick rows_with_1 j then 1 else 0)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (1\\<^sub>m (r ^ N_half));\n        j < dim_col (1\\<^sub>m (r ^ N_half))\\<rbrakk>\n       \\<Longrightarrow> submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) =\n                         1\\<^sub>m (r ^ N_half) $$ (i, j)", "then"], ["proof (chain)\npicking this:\n  Aw' $$ (pick rows_with_1 i, pick rows_with_1 j) =\n  (if pick rows_with_1 i = pick rows_with_1 j then 1 else 0)", "have \"submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) = (if pick rows_with_1 i = pick rows_with_1 j then 1 else 0)\""], ["proof (prove)\nusing this:\n  Aw' $$ (pick rows_with_1 i, pick rows_with_1 j) =\n  (if pick rows_with_1 i = pick rows_with_1 j then 1 else 0)\n\ngoal (1 subgoal):\n 1. submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) =\n    (if pick rows_with_1 i = pick rows_with_1 j then 1 else 0)", "using submatrix_index"], ["proof (prove)\nusing this:\n  Aw' $$ (pick rows_with_1 i, pick rows_with_1 j) =\n  (if pick rows_with_1 i = pick rows_with_1 j then 1 else 0)\n  \\<lbrakk>?i < card {i. i < dim_row ?A \\<and> i \\<in> ?I};\n   ?j < card {j. j < dim_col ?A \\<and> j \\<in> ?J}\\<rbrakk>\n  \\<Longrightarrow> submatrix ?A ?I ?J $$ (?i, ?j) =\n                    ?A $$ (pick ?I ?i, pick ?J ?j)\n\ngoal (1 subgoal):\n 1. submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) =\n    (if pick rows_with_1 i = pick rows_with_1 j then 1 else 0)", "by (metis (no_types, lifting)\n      \\<open>dim_col (submatrix Aw' rows_with_1 rows_with_1) = dim_col (1\\<^sub>m (r ^ N_half))\\<close>\n      \\<open>dim_row (submatrix Aw' rows_with_1 rows_with_1) = dim_row (1\\<^sub>m (r ^ N_half))\\<close>\n      \\<open>i < dim_row (1\\<^sub>m (r ^ N_half))\\<close> \\<open>j < r ^ N_half\\<close> dim_submatrix(1) dim_submatrix(2) index_one_mat(3))"], ["proof (state)\nthis:\n  submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) =\n  (if pick rows_with_1 i = pick rows_with_1 j then 1 else 0)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (1\\<^sub>m (r ^ N_half));\n        j < dim_col (1\\<^sub>m (r ^ N_half))\\<rbrakk>\n       \\<Longrightarrow> submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) =\n                         1\\<^sub>m (r ^ N_half) $$ (i, j)", "then"], ["proof (chain)\npicking this:\n  submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) =\n  (if pick rows_with_1 i = pick rows_with_1 j then 1 else 0)", "have \"submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) = (if i = j then 1 else 0)\""], ["proof (prove)\nusing this:\n  submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) =\n  (if pick rows_with_1 i = pick rows_with_1 j then 1 else 0)\n\ngoal (1 subgoal):\n 1. submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) =\n    (if i = j then 1 else 0)", "using pick_eq_iff_inf[OF infinite_rows_with_1]"], ["proof (prove)\nusing this:\n  submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) =\n  (if pick rows_with_1 i = pick rows_with_1 j then 1 else 0)\n  (?x = ?y) = (pick rows_with_1 ?x = pick rows_with_1 ?y)\n\ngoal (1 subgoal):\n 1. submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) =\n    (if i = j then 1 else 0)", "by auto"], ["proof (state)\nthis:\n  submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) = (if i = j then 1 else 0)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (1\\<^sub>m (r ^ N_half));\n        j < dim_col (1\\<^sub>m (r ^ N_half))\\<rbrakk>\n       \\<Longrightarrow> submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) =\n                         1\\<^sub>m (r ^ N_half) $$ (i, j)", "then"], ["proof (chain)\npicking this:\n  submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) = (if i = j then 1 else 0)", "show \"submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) = 1\\<^sub>m (r ^ N_half) $$ (i, j)\""], ["proof (prove)\nusing this:\n  submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) = (if i = j then 1 else 0)\n\ngoal (1 subgoal):\n 1. submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) =\n    1\\<^sub>m (r ^ N_half) $$ (i, j)", "by (simp add: \\<open>i < r ^ N_half\\<close> \\<open>j < r ^ N_half\\<close>)"], ["proof (state)\nthis:\n  submatrix Aw' rows_with_1 rows_with_1 $$ (i, j) =\n  1\\<^sub>m (r ^ N_half) $$ (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?i3 < dim_row (1\\<^sub>m (r ^ N_half));\n   ?j3 < dim_col (1\\<^sub>m (r ^ N_half))\\<rbrakk>\n  \\<Longrightarrow> submatrix Aw' rows_with_1 rows_with_1 $$ (?i3, ?j3) =\n                    1\\<^sub>m (r ^ N_half) $$ (?i3, ?j3)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma witness_det: \"det (submatrix Aw' rows_with_1 rows_with_1) \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. det (submatrix Aw' rows_with_1 rows_with_1) \\<noteq> 0", "unfolding witness_submatrix"], ["proof (prove)\ngoal (1 subgoal):\n 1. det (1\\<^sub>m (r ^ N_half)) \\<noteq> 0", "by simp"], ["", "end"], ["", "(* Examples to show that the locales can be instantiated: *)"], ["", "interpretation example : deep_model_correct_params False \"[10,10,10]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. deep_model_correct_params [10, 10, 10]", "unfolding deep_model_correct_params_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. 3 \\<le> length [10, 10, 10] \\<and>\n    (\\<forall>r. r \\<in> set [10, 10, 10] \\<longrightarrow> 0 < r)", "by simp"], ["", "interpretation example : deep_model_correct_params_y False \"[10,10,10]\" 1"], ["proof (prove)\ngoal (1 subgoal):\n 1. deep_model_correct_params_y [10, 10, 10] 1", "unfolding deep_model_correct_params_y_def deep_model_correct_params_y_axioms_def \n  deep_model_correct_params_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (3 \\<le> length [10, 10, 10] \\<and>\n     (\\<forall>r. r \\<in> set [10, 10, 10] \\<longrightarrow> 0 < r)) \\<and>\n    1 < [10, 10, 10] ! 0", "by simp"], ["", "end"]]}