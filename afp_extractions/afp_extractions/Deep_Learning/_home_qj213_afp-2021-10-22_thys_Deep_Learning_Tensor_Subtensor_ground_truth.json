{"file_name": "/home/qj213/afp-2021-10-22/thys/Deep_Learning/Tensor_Subtensor.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Deep_Learning", "problem_names": ["lemma length_fixed_length_sublist[simp]:\nassumes \"(Suc i)*l \\<le> length xs\"\nshows \"length (fixed_length_sublist xs l i) = l\"", "lemma vec_subtensor[simp]:\nassumes \"dims A \\<noteq> []\" and \"i < hd (dims A)\"\nshows \"vec (subtensor A i) = fixed_length_sublist (vec A) (prod_list (tl (dims A))) i\"", "lemma dims_subtensor[simp]:\nassumes \"dims A \\<noteq> []\" and \"i < hd (dims A)\"\nshows \"dims (subtensor A i) = tl (dims A)\"", "lemma subtensor_combine_subtensor[simp]:\nassumes \"dims A \\<noteq> []\"\nshows \"subtensor_combine (tl (dims A)) (map (subtensor A) [0..<hd (dims A)]) = A\"", "lemma\nassumes \"\\<And>A. A\\<in>set As \\<Longrightarrow> dims A = ds\"\nshows subtensor_combine_dims[simp]: \"dims (subtensor_combine ds As) = length As # ds\" (is ?D)\nand subtensor_combine_vec[simp]: \"vec (subtensor_combine ds As) = concat (map vec As)\" (is ?V)", "lemma subtensor_subtensor_combine:\nassumes \"\\<And>A. A\\<in>set As \\<Longrightarrow> dims A = ds\" and \"i < length As\"\nshows \"subtensor (subtensor_combine ds As) i = As ! i\"", "lemma subtensor_induct[case_names order_0 order_step]:\nassumes order_0: \"\\<And>A. dims A = [] \\<Longrightarrow> P A\"\nand order_step: \"\\<And>A. dims A \\<noteq> [] \\<Longrightarrow> (\\<And>i. i < hd (dims A) \\<Longrightarrow> P (subtensor A i)) \\<Longrightarrow> P A\"\nshows \"P B\"", "lemma subtensor_combine_induct[case_names order_0 order_step]:\nassumes order_0:\"\\<And>A. dims A = [] \\<Longrightarrow> P A\"\nand order_step:\"\\<And>As ds. (\\<And>A. A\\<in>set As \\<Longrightarrow> P A) \\<Longrightarrow> (\\<And>A. A\\<in>set As \\<Longrightarrow> dims A = ds) \\<Longrightarrow> P (subtensor_combine ds As)\"\nshows \"P A\"", "lemma lookup_subtensor1[simp]:\nassumes \"i # is \\<lhd> dims A\"\nshows \"lookup (subtensor A i) is = lookup A (i # is)\"", "lemma lookup_subtensor:\nassumes \"is \\<lhd> dims A\"\nshows \"lookup A is = hd (vec (fold (\\<lambda>i A. subtensor A i) is A))\"", "lemma subtensor_eqI:\nassumes \"dims A \\<noteq> []\"\nand dims_eq:\"dims A = dims B\"\nand \"\\<And>i. i < hd (dims A) \\<Longrightarrow> subtensor A i = subtensor B i\"\nshows \"A=B\""], "translations": [["", "lemma length_fixed_length_sublist[simp]:\nassumes \"(Suc i)*l \\<le> length xs\"\nshows \"length (fixed_length_sublist xs l i) = l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (fixed_length_sublist xs l i) = l", "unfolding fixed_length_sublist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (take l (drop (l * i) xs)) = l", "by (metis assms diff_add_inverse2 length_drop length_take min.absorb2 mult.commute mult_Suc take_drop)"], ["", "lemma vec_subtensor[simp]:\nassumes \"dims A \\<noteq> []\" and \"i < hd (dims A)\"\nshows \"vec (subtensor A i) = fixed_length_sublist (vec A) (prod_list (tl (dims A))) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec (subtensor A i) =\n    fixed_length_sublist (vec A) (prod_list (tl (dims A))) i", "by (metis (no_types, lifting) Suc_leI assms(1) assms(2) hd_Cons_tl length_fixed_length_sublist length_vec prod_list.Cons mult_le_mono1 subtensor_def vec_tensor)"], ["", "lemma dims_subtensor[simp]:\nassumes \"dims A \\<noteq> []\" and \"i < hd (dims A)\"\nshows \"dims (subtensor A i) = tl (dims A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dims (subtensor A i) = tl (dims A)", "using Suc_leI assms(1) assms(2) dims_tensor length_fixed_length_sublist length_vec list.collapse prod_list.Cons mult_le_mono1 subtensor_def"], ["proof (prove)\nusing this:\n  ?m < ?n \\<Longrightarrow> Suc ?m \\<le> ?n\n  dims A \\<noteq> []\n  i < hd (dims A)\n  length ?v = prod_list ?d \\<Longrightarrow>\n  dims (tensor_from_vec ?d ?v) = ?d\n  Suc ?i * ?l \\<le> length ?xs \\<Longrightarrow>\n  length (fixed_length_sublist ?xs ?l ?i) = ?l\n  length (vec ?A) = prod_list (dims ?A)\n  ?list \\<noteq> [] \\<Longrightarrow> hd ?list # tl ?list = ?list\n  prod_list (?x # ?xs) = ?x * prod_list ?xs\n  ?i \\<le> ?j \\<Longrightarrow> ?i * ?k \\<le> ?j * ?k\n  subtensor ?A ?i =\n  tensor_from_vec (tl (dims ?A))\n   (fixed_length_sublist (vec ?A) (prod_list (tl (dims ?A))) ?i)\n\ngoal (1 subgoal):\n 1. dims (subtensor A i) = tl (dims A)", "by metis"], ["", "lemma subtensor_combine_subtensor[simp]:\nassumes \"dims A \\<noteq> []\"\nshows \"subtensor_combine (tl (dims A)) (map (subtensor A) [0..<hd (dims A)]) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subtensor_combine (tl (dims A)) (map (subtensor A) [0..<hd (dims A)]) =\n    A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. subtensor_combine (tl (dims A)) (map (subtensor A) [0..<hd (dims A)]) =\n    A", "have length_vec_A: \"hd (dims A) * prod_list (tl (dims A)) = length (Tensor.vec A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd (dims A) * prod_list (tl (dims A)) = length (vec A)", "by (metis assms length_vec list.collapse prod_list.Cons)"], ["proof (state)\nthis:\n  hd (dims A) * prod_list (tl (dims A)) = length (vec A)\n\ngoal (1 subgoal):\n 1. subtensor_combine (tl (dims A)) (map (subtensor A) [0..<hd (dims A)]) =\n    A", "let ?subtensor_vec = \"fixed_length_sublist (vec A) (prod_list (tl (dims A)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. subtensor_combine (tl (dims A)) (map (subtensor A) [0..<hd (dims A)]) =\n    A", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. subtensor_combine (tl (dims A)) (map (subtensor A) [0..<hd (dims A)]) =\n    A", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. subtensor_combine (tl (dims A)) (map (subtensor A) [0..<hd (dims A)]) =\n    A", "assume \"i < hd (dims A)\""], ["proof (state)\nthis:\n  i < hd (dims A)\n\ngoal (1 subgoal):\n 1. subtensor_combine (tl (dims A)) (map (subtensor A) [0..<hd (dims A)]) =\n    A", "then"], ["proof (chain)\npicking this:\n  i < hd (dims A)", "have \"(Suc i)*(prod_list (tl (dims A))) \\<le> length (vec A)\""], ["proof (prove)\nusing this:\n  i < hd (dims A)\n\ngoal (1 subgoal):\n 1. Suc i * prod_list (tl (dims A)) \\<le> length (vec A)", "by (metis Suc_leI length_vec_A mult_le_mono1)"], ["proof (state)\nthis:\n  Suc i * prod_list (tl (dims A)) \\<le> length (vec A)\n\ngoal (1 subgoal):\n 1. subtensor_combine (tl (dims A)) (map (subtensor A) [0..<hd (dims A)]) =\n    A", "then"], ["proof (chain)\npicking this:\n  Suc i * prod_list (tl (dims A)) \\<le> length (vec A)", "have \"(vec \\<circ> (\\<lambda>i. tensor_from_vec (tl (dims A)) (?subtensor_vec i))) i = ?subtensor_vec i\""], ["proof (prove)\nusing this:\n  Suc i * prod_list (tl (dims A)) \\<le> length (vec A)\n\ngoal (1 subgoal):\n 1. (vec \\<circ>\n     (\\<lambda>i.\n         tensor_from_vec (tl (dims A))\n          (fixed_length_sublist (vec A) (prod_list (tl (dims A))) i)))\n     i =\n    fixed_length_sublist (vec A) (prod_list (tl (dims A))) i", "by simp"], ["proof (state)\nthis:\n  (vec \\<circ>\n   (\\<lambda>i.\n       tensor_from_vec (tl (dims A))\n        (fixed_length_sublist (vec A) (prod_list (tl (dims A))) i)))\n   i =\n  fixed_length_sublist (vec A) (prod_list (tl (dims A))) i\n\ngoal (1 subgoal):\n 1. subtensor_combine (tl (dims A)) (map (subtensor A) [0..<hd (dims A)]) =\n    A", "}"], ["proof (state)\nthis:\n  ?i2 < hd (dims A) \\<Longrightarrow>\n  (vec \\<circ>\n   (\\<lambda>i.\n       tensor_from_vec (tl (dims A))\n        (fixed_length_sublist (vec A) (prod_list (tl (dims A))) i)))\n   ?i2 =\n  fixed_length_sublist (vec A) (prod_list (tl (dims A))) ?i2\n\ngoal (1 subgoal):\n 1. subtensor_combine (tl (dims A)) (map (subtensor A) [0..<hd (dims A)]) =\n    A", "then"], ["proof (chain)\npicking this:\n  ?i2 < hd (dims A) \\<Longrightarrow>\n  (vec \\<circ>\n   (\\<lambda>i.\n       tensor_from_vec (tl (dims A))\n        (fixed_length_sublist (vec A) (prod_list (tl (dims A))) i)))\n   ?i2 =\n  fixed_length_sublist (vec A) (prod_list (tl (dims A))) ?i2", "have 1:\"map (Tensor.vec \\<circ> (\\<lambda>i. tensor_from_vec (tl (dims A)) (?subtensor_vec i))) [0..<hd (dims A)]\n              = map ?subtensor_vec [0..<hd (dims A)]\""], ["proof (prove)\nusing this:\n  ?i2 < hd (dims A) \\<Longrightarrow>\n  (vec \\<circ>\n   (\\<lambda>i.\n       tensor_from_vec (tl (dims A))\n        (fixed_length_sublist (vec A) (prod_list (tl (dims A))) i)))\n   ?i2 =\n  fixed_length_sublist (vec A) (prod_list (tl (dims A))) ?i2\n\ngoal (1 subgoal):\n 1. map (vec \\<circ>\n         (\\<lambda>i.\n             tensor_from_vec (tl (dims A))\n              (fixed_length_sublist (vec A) (prod_list (tl (dims A))) i)))\n     [0..<hd (dims A)] =\n    map (fixed_length_sublist (vec A) (prod_list (tl (dims A))))\n     [0..<hd (dims A)]", "by auto"], ["proof (state)\nthis:\n  map (vec \\<circ>\n       (\\<lambda>i.\n           tensor_from_vec (tl (dims A))\n            (fixed_length_sublist (vec A) (prod_list (tl (dims A))) i)))\n   [0..<hd (dims A)] =\n  map (fixed_length_sublist (vec A) (prod_list (tl (dims A))))\n   [0..<hd (dims A)]\n\ngoal (1 subgoal):\n 1. subtensor_combine (tl (dims A)) (map (subtensor A) [0..<hd (dims A)]) =\n    A", "then"], ["proof (chain)\npicking this:\n  map (vec \\<circ>\n       (\\<lambda>i.\n           tensor_from_vec (tl (dims A))\n            (fixed_length_sublist (vec A) (prod_list (tl (dims A))) i)))\n   [0..<hd (dims A)] =\n  map (fixed_length_sublist (vec A) (prod_list (tl (dims A))))\n   [0..<hd (dims A)]", "have \"subtensor_combine (tl (dims A)) (map (\\<lambda>i. subtensor A i) [0..<hd (dims A)]) = A\""], ["proof (prove)\nusing this:\n  map (vec \\<circ>\n       (\\<lambda>i.\n           tensor_from_vec (tl (dims A))\n            (fixed_length_sublist (vec A) (prod_list (tl (dims A))) i)))\n   [0..<hd (dims A)] =\n  map (fixed_length_sublist (vec A) (prod_list (tl (dims A))))\n   [0..<hd (dims A)]\n\ngoal (1 subgoal):\n 1. subtensor_combine (tl (dims A)) (map (subtensor A) [0..<hd (dims A)]) =\n    A", "unfolding subtensor_combine_def subtensor_def"], ["proof (prove)\nusing this:\n  map (vec \\<circ>\n       (\\<lambda>i.\n           tensor_from_vec (tl (dims A))\n            (fixed_length_sublist (vec A) (prod_list (tl (dims A))) i)))\n   [0..<hd (dims A)] =\n  map (fixed_length_sublist (vec A) (prod_list (tl (dims A))))\n   [0..<hd (dims A)]\n\ngoal (1 subgoal):\n 1. tensor_from_vec\n     (length\n       (map (\\<lambda>i.\n                tensor_from_vec (tl (dims A))\n                 (fixed_length_sublist (vec A) (prod_list (tl (dims A))) i))\n         [0..<hd (dims A)]) #\n      tl (dims A))\n     (concat\n       (map vec\n         (map (\\<lambda>i.\n                  tensor_from_vec (tl (dims A))\n                   (fixed_length_sublist (vec A) (prod_list (tl (dims A)))\n                     i))\n           [0..<hd (dims A)]))) =\n    A", "using concat_parts_eq[OF length_vec_A]"], ["proof (prove)\nusing this:\n  map (vec \\<circ>\n       (\\<lambda>i.\n           tensor_from_vec (tl (dims A))\n            (fixed_length_sublist (vec A) (prod_list (tl (dims A))) i)))\n   [0..<hd (dims A)] =\n  map (fixed_length_sublist (vec A) (prod_list (tl (dims A))))\n   [0..<hd (dims A)]\n  concat\n   (map (fixed_length_sublist (vec A) (prod_list (tl (dims A))))\n     [0..<hd (dims A)]) =\n  vec A\n\ngoal (1 subgoal):\n 1. tensor_from_vec\n     (length\n       (map (\\<lambda>i.\n                tensor_from_vec (tl (dims A))\n                 (fixed_length_sublist (vec A) (prod_list (tl (dims A))) i))\n         [0..<hd (dims A)]) #\n      tl (dims A))\n     (concat\n       (map vec\n         (map (\\<lambda>i.\n                  tensor_from_vec (tl (dims A))\n                   (fixed_length_sublist (vec A) (prod_list (tl (dims A)))\n                     i))\n           [0..<hd (dims A)]))) =\n    A", "by (auto simp add: 1 assms)"], ["proof (state)\nthis:\n  subtensor_combine (tl (dims A)) (map (subtensor A) [0..<hd (dims A)]) = A\n\ngoal (1 subgoal):\n 1. subtensor_combine (tl (dims A)) (map (subtensor A) [0..<hd (dims A)]) =\n    A", "then"], ["proof (chain)\npicking this:\n  subtensor_combine (tl (dims A)) (map (subtensor A) [0..<hd (dims A)]) = A", "show ?thesis"], ["proof (prove)\nusing this:\n  subtensor_combine (tl (dims A)) (map (subtensor A) [0..<hd (dims A)]) = A\n\ngoal (1 subgoal):\n 1. subtensor_combine (tl (dims A)) (map (subtensor A) [0..<hd (dims A)]) =\n    A", "by auto"], ["proof (state)\nthis:\n  subtensor_combine (tl (dims A)) (map (subtensor A) [0..<hd (dims A)]) = A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma\nassumes \"\\<And>A. A\\<in>set As \\<Longrightarrow> dims A = ds\"\nshows subtensor_combine_dims[simp]: \"dims (subtensor_combine ds As) = length As # ds\" (is ?D)\nand subtensor_combine_vec[simp]: \"vec (subtensor_combine ds As) = concat (map vec As)\" (is ?V)"], ["proof (prove)\ngoal (1 subgoal):\n 1. dims (subtensor_combine ds As) = length As # ds &&&\n    vec (subtensor_combine ds As) = concat (map vec As)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. dims (subtensor_combine ds As) = length As # ds\n 2. vec (subtensor_combine ds As) = concat (map vec As)", "have \"\\<And>v. v\\<in>set (map Tensor.vec As) \\<Longrightarrow> length v = prod_list ds\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> set (map vec As) \\<Longrightarrow> length v = prod_list ds", "using assms length_vec"], ["proof (prove)\nusing this:\n  ?A \\<in> set As \\<Longrightarrow> dims ?A = ds\n  length (vec ?A) = prod_list (dims ?A)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> set (map vec As) \\<Longrightarrow> length v = prod_list ds", "by fastforce"], ["proof (state)\nthis:\n  ?v \\<in> set (map vec As) \\<Longrightarrow> length ?v = prod_list ds\n\ngoal (2 subgoals):\n 1. dims (subtensor_combine ds As) = length As # ds\n 2. vec (subtensor_combine ds As) = concat (map vec As)", "then"], ["proof (chain)\npicking this:\n  ?v \\<in> set (map vec As) \\<Longrightarrow> length ?v = prod_list ds", "have \"length As * prod_list ds = length (concat (map Tensor.vec As))\""], ["proof (prove)\nusing this:\n  ?v \\<in> set (map vec As) \\<Longrightarrow> length ?v = prod_list ds\n\ngoal (1 subgoal):\n 1. length As * prod_list ds = length (concat (map vec As))", "using concat_equal_length"], ["proof (prove)\nusing this:\n  ?v \\<in> set (map vec As) \\<Longrightarrow> length ?v = prod_list ds\n  (\\<And>xs.\n      xs \\<in> set ?xss \\<Longrightarrow> length xs = ?l) \\<Longrightarrow>\n  length (concat ?xss) = length ?xss * ?l\n\ngoal (1 subgoal):\n 1. length As * prod_list ds = length (concat (map vec As))", "by (metis length_map)"], ["proof (state)\nthis:\n  length As * prod_list ds = length (concat (map vec As))\n\ngoal (2 subgoals):\n 1. dims (subtensor_combine ds As) = length As # ds\n 2. vec (subtensor_combine ds As) = concat (map vec As)", "then"], ["proof (chain)\npicking this:\n  length As * prod_list ds = length (concat (map vec As))", "show ?D ?V"], ["proof (prove)\nusing this:\n  length As * prod_list ds = length (concat (map vec As))\n\ngoal (1 subgoal):\n 1. dims (subtensor_combine ds As) = length As # ds &&&\n    vec (subtensor_combine ds As) = concat (map vec As)", "unfolding subtensor_combine_def"], ["proof (prove)\nusing this:\n  length As * prod_list ds = length (concat (map vec As))\n\ngoal (1 subgoal):\n 1. dims (tensor_from_vec (length As # ds) (concat (map vec As))) =\n    length As # ds &&&\n    vec (tensor_from_vec (length As # ds) (concat (map vec As))) =\n    concat (map vec As)", "by simp+"], ["proof (state)\nthis:\n  dims (subtensor_combine ds As) = length As # ds\n  vec (subtensor_combine ds As) = concat (map vec As)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subtensor_subtensor_combine:\nassumes \"\\<And>A. A\\<in>set As \\<Longrightarrow> dims A = ds\" and \"i < length As\"\nshows \"subtensor (subtensor_combine ds As) i = As ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subtensor (subtensor_combine ds As) i = As ! i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. subtensor (subtensor_combine ds As) i = As ! i", "have \"fixed_length_sublist (concat (map vec As)) (prod_list ds) i = vec (As ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fixed_length_sublist (concat (map vec As)) (prod_list ds) i =\n    vec (As ! i)", "using concat_parts[of \"map vec As\" \"prod_list ds\" i] assms imageE length_map length_vec\n    nth_map set_map in_set_conv_nth"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>xs.\n              xs \\<in> set (map vec As) \\<Longrightarrow>\n              length xs = prod_list ds;\n   i < length (map vec As)\\<rbrakk>\n  \\<Longrightarrow> fixed_length_sublist (concat (map vec As))\n                     (prod_list ds) i =\n                    map vec As ! i\n  ?A \\<in> set As \\<Longrightarrow> dims ?A = ds\n  i < length As\n  \\<lbrakk>?b \\<in> ?f ` ?A;\n   \\<And>x.\n      \\<lbrakk>?b = ?f x; x \\<in> ?A\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  length (map ?f ?xs) = length ?xs\n  length (vec ?A) = prod_list (dims ?A)\n  ?n < length ?xs \\<Longrightarrow> map ?f ?xs ! ?n = ?f (?xs ! ?n)\n  set (map ?f ?xs) = ?f ` set ?xs\n  (?x \\<in> set ?xs) = (\\<exists>i<length ?xs. ?xs ! i = ?x)\n\ngoal (1 subgoal):\n 1. fixed_length_sublist (concat (map vec As)) (prod_list ds) i =\n    vec (As ! i)", "by fastforce"], ["proof (state)\nthis:\n  fixed_length_sublist (concat (map vec As)) (prod_list ds) i = vec (As ! i)\n\ngoal (1 subgoal):\n 1. subtensor (subtensor_combine ds As) i = As ! i", "then"], ["proof (chain)\npicking this:\n  fixed_length_sublist (concat (map vec As)) (prod_list ds) i = vec (As ! i)", "show ?thesis"], ["proof (prove)\nusing this:\n  fixed_length_sublist (concat (map vec As)) (prod_list ds) i = vec (As ! i)\n\ngoal (1 subgoal):\n 1. subtensor (subtensor_combine ds As) i = As ! i", "unfolding subtensor_def"], ["proof (prove)\nusing this:\n  fixed_length_sublist (concat (map vec As)) (prod_list ds) i = vec (As ! i)\n\ngoal (1 subgoal):\n 1. tensor_from_vec (tl (dims (subtensor_combine ds As)))\n     (fixed_length_sublist (vec (subtensor_combine ds As))\n       (prod_list (tl (dims (subtensor_combine ds As)))) i) =\n    As ! i", "using subtensor_combine_dims subtensor_combine_vec"], ["proof (prove)\nusing this:\n  fixed_length_sublist (concat (map vec As)) (prod_list ds) i = vec (As ! i)\n  (\\<And>A.\n      A \\<in> set ?As \\<Longrightarrow> dims A = ?ds) \\<Longrightarrow>\n  dims (subtensor_combine ?ds ?As) = length ?As # ?ds\n  (\\<And>A.\n      A \\<in> set ?As \\<Longrightarrow> dims A = ?ds) \\<Longrightarrow>\n  vec (subtensor_combine ?ds ?As) = concat (map vec ?As)\n\ngoal (1 subgoal):\n 1. tensor_from_vec (tl (dims (subtensor_combine ds As)))\n     (fixed_length_sublist (vec (subtensor_combine ds As))\n       (prod_list (tl (dims (subtensor_combine ds As)))) i) =\n    As ! i", "by (metis assms list.sel(3) nth_mem tensor_from_vec_simp)"], ["proof (state)\nthis:\n  subtensor (subtensor_combine ds As) i = As ! i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subtensor_induct[case_names order_0 order_step]:\nassumes order_0: \"\\<And>A. dims A = [] \\<Longrightarrow> P A\"\nand order_step: \"\\<And>A. dims A \\<noteq> [] \\<Longrightarrow> (\\<And>i. i < hd (dims A) \\<Longrightarrow> P (subtensor A i)) \\<Longrightarrow> P A\"\nshows \"P B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P B", "using assms"], ["proof (prove)\nusing this:\n  dims ?A = [] \\<Longrightarrow> P ?A\n  \\<lbrakk>dims ?A \\<noteq> [];\n   \\<And>i. i < hd (dims ?A) \\<Longrightarrow> P (subtensor ?A i)\\<rbrakk>\n  \\<Longrightarrow> P ?A\n\ngoal (1 subgoal):\n 1. P B", "proof (induction \"dims B\" arbitrary:B)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>B.\n       \\<lbrakk>[] = dims B; \\<And>A. dims A = [] \\<Longrightarrow> P A;\n        \\<And>A.\n           \\<lbrakk>dims A \\<noteq> [];\n            \\<And>i.\n               i < hd (dims A) \\<Longrightarrow> P (subtensor A i)\\<rbrakk>\n           \\<Longrightarrow> P A\\<rbrakk>\n       \\<Longrightarrow> P B\n 2. \\<And>a x B.\n       \\<lbrakk>\\<And>B.\n                   \\<lbrakk>x = dims B;\n                    \\<And>A. dims A = [] \\<Longrightarrow> P A;\n                    \\<And>A.\n                       \\<lbrakk>dims A \\<noteq> [];\n                        \\<And>i.\n                           i < hd (dims A) \\<Longrightarrow>\n                           P (subtensor A i)\\<rbrakk>\n                       \\<Longrightarrow> P A\\<rbrakk>\n                   \\<Longrightarrow> P B;\n        a # x = dims B; \\<And>A. dims A = [] \\<Longrightarrow> P A;\n        \\<And>A.\n           \\<lbrakk>dims A \\<noteq> [];\n            \\<And>i.\n               i < hd (dims A) \\<Longrightarrow> P (subtensor A i)\\<rbrakk>\n           \\<Longrightarrow> P A\\<rbrakk>\n       \\<Longrightarrow> P B", "case Nil"], ["proof (state)\nthis:\n  [] = dims B\n  dims ?A = [] \\<Longrightarrow> P ?A\n  \\<lbrakk>dims ?A \\<noteq> [];\n   \\<And>i. i < hd (dims ?A) \\<Longrightarrow> P (subtensor ?A i)\\<rbrakk>\n  \\<Longrightarrow> P ?A\n\ngoal (2 subgoals):\n 1. \\<And>B.\n       \\<lbrakk>[] = dims B; \\<And>A. dims A = [] \\<Longrightarrow> P A;\n        \\<And>A.\n           \\<lbrakk>dims A \\<noteq> [];\n            \\<And>i.\n               i < hd (dims A) \\<Longrightarrow> P (subtensor A i)\\<rbrakk>\n           \\<Longrightarrow> P A\\<rbrakk>\n       \\<Longrightarrow> P B\n 2. \\<And>a x B.\n       \\<lbrakk>\\<And>B.\n                   \\<lbrakk>x = dims B;\n                    \\<And>A. dims A = [] \\<Longrightarrow> P A;\n                    \\<And>A.\n                       \\<lbrakk>dims A \\<noteq> [];\n                        \\<And>i.\n                           i < hd (dims A) \\<Longrightarrow>\n                           P (subtensor A i)\\<rbrakk>\n                       \\<Longrightarrow> P A\\<rbrakk>\n                   \\<Longrightarrow> P B;\n        a # x = dims B; \\<And>A. dims A = [] \\<Longrightarrow> P A;\n        \\<And>A.\n           \\<lbrakk>dims A \\<noteq> [];\n            \\<And>i.\n               i < hd (dims A) \\<Longrightarrow> P (subtensor A i)\\<rbrakk>\n           \\<Longrightarrow> P A\\<rbrakk>\n       \\<Longrightarrow> P B", "then"], ["proof (chain)\npicking this:\n  [] = dims B\n  dims ?A = [] \\<Longrightarrow> P ?A\n  \\<lbrakk>dims ?A \\<noteq> [];\n   \\<And>i. i < hd (dims ?A) \\<Longrightarrow> P (subtensor ?A i)\\<rbrakk>\n  \\<Longrightarrow> P ?A", "show ?case"], ["proof (prove)\nusing this:\n  [] = dims B\n  dims ?A = [] \\<Longrightarrow> P ?A\n  \\<lbrakk>dims ?A \\<noteq> [];\n   \\<And>i. i < hd (dims ?A) \\<Longrightarrow> P (subtensor ?A i)\\<rbrakk>\n  \\<Longrightarrow> P ?A\n\ngoal (1 subgoal):\n 1. P B", "by auto"], ["proof (state)\nthis:\n  P B\n\ngoal (1 subgoal):\n 1. \\<And>a x B.\n       \\<lbrakk>\\<And>B.\n                   \\<lbrakk>x = dims B;\n                    \\<And>A. dims A = [] \\<Longrightarrow> P A;\n                    \\<And>A.\n                       \\<lbrakk>dims A \\<noteq> [];\n                        \\<And>i.\n                           i < hd (dims A) \\<Longrightarrow>\n                           P (subtensor A i)\\<rbrakk>\n                       \\<Longrightarrow> P A\\<rbrakk>\n                   \\<Longrightarrow> P B;\n        a # x = dims B; \\<And>A. dims A = [] \\<Longrightarrow> P A;\n        \\<And>A.\n           \\<lbrakk>dims A \\<noteq> [];\n            \\<And>i.\n               i < hd (dims A) \\<Longrightarrow> P (subtensor A i)\\<rbrakk>\n           \\<Longrightarrow> P A\\<rbrakk>\n       \\<Longrightarrow> P B", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x B.\n       \\<lbrakk>\\<And>B.\n                   \\<lbrakk>x = dims B;\n                    \\<And>A. dims A = [] \\<Longrightarrow> P A;\n                    \\<And>A.\n                       \\<lbrakk>dims A \\<noteq> [];\n                        \\<And>i.\n                           i < hd (dims A) \\<Longrightarrow>\n                           P (subtensor A i)\\<rbrakk>\n                       \\<Longrightarrow> P A\\<rbrakk>\n                   \\<Longrightarrow> P B;\n        a # x = dims B; \\<And>A. dims A = [] \\<Longrightarrow> P A;\n        \\<And>A.\n           \\<lbrakk>dims A \\<noteq> [];\n            \\<And>i.\n               i < hd (dims A) \\<Longrightarrow> P (subtensor A i)\\<rbrakk>\n           \\<Longrightarrow> P A\\<rbrakk>\n       \\<Longrightarrow> P B", "case Cons"], ["proof (state)\nthis:\n  \\<lbrakk>x_ = dims ?B; \\<And>A. dims A = [] \\<Longrightarrow> P A;\n   \\<And>A.\n      \\<lbrakk>dims A \\<noteq> [];\n       \\<And>i. i < hd (dims A) \\<Longrightarrow> P (subtensor A i)\\<rbrakk>\n      \\<Longrightarrow> P A\\<rbrakk>\n  \\<Longrightarrow> P ?B\n  a_ # x_ = dims B\n  dims ?A = [] \\<Longrightarrow> P ?A\n  \\<lbrakk>dims ?A \\<noteq> [];\n   \\<And>i. i < hd (dims ?A) \\<Longrightarrow> P (subtensor ?A i)\\<rbrakk>\n  \\<Longrightarrow> P ?A\n\ngoal (1 subgoal):\n 1. \\<And>a x B.\n       \\<lbrakk>\\<And>B.\n                   \\<lbrakk>x = dims B;\n                    \\<And>A. dims A = [] \\<Longrightarrow> P A;\n                    \\<And>A.\n                       \\<lbrakk>dims A \\<noteq> [];\n                        \\<And>i.\n                           i < hd (dims A) \\<Longrightarrow>\n                           P (subtensor A i)\\<rbrakk>\n                       \\<Longrightarrow> P A\\<rbrakk>\n                   \\<Longrightarrow> P B;\n        a # x = dims B; \\<And>A. dims A = [] \\<Longrightarrow> P A;\n        \\<And>A.\n           \\<lbrakk>dims A \\<noteq> [];\n            \\<And>i.\n               i < hd (dims A) \\<Longrightarrow> P (subtensor A i)\\<rbrakk>\n           \\<Longrightarrow> P A\\<rbrakk>\n       \\<Longrightarrow> P B", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>x_ = dims ?B; \\<And>A. dims A = [] \\<Longrightarrow> P A;\n   \\<And>A.\n      \\<lbrakk>dims A \\<noteq> [];\n       \\<And>i. i < hd (dims A) \\<Longrightarrow> P (subtensor A i)\\<rbrakk>\n      \\<Longrightarrow> P A\\<rbrakk>\n  \\<Longrightarrow> P ?B\n  a_ # x_ = dims B\n  dims ?A = [] \\<Longrightarrow> P ?A\n  \\<lbrakk>dims ?A \\<noteq> [];\n   \\<And>i. i < hd (dims ?A) \\<Longrightarrow> P (subtensor ?A i)\\<rbrakk>\n  \\<Longrightarrow> P ?A", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>x_ = dims ?B; \\<And>A. dims A = [] \\<Longrightarrow> P A;\n   \\<And>A.\n      \\<lbrakk>dims A \\<noteq> [];\n       \\<And>i. i < hd (dims A) \\<Longrightarrow> P (subtensor A i)\\<rbrakk>\n      \\<Longrightarrow> P A\\<rbrakk>\n  \\<Longrightarrow> P ?B\n  a_ # x_ = dims B\n  dims ?A = [] \\<Longrightarrow> P ?A\n  \\<lbrakk>dims ?A \\<noteq> [];\n   \\<And>i. i < hd (dims ?A) \\<Longrightarrow> P (subtensor ?A i)\\<rbrakk>\n  \\<Longrightarrow> P ?A\n\ngoal (1 subgoal):\n 1. P B", "by (metis dims_subtensor list.sel(3))"], ["proof (state)\nthis:\n  P B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subtensor_combine_induct[case_names order_0 order_step]:\nassumes order_0:\"\\<And>A. dims A = [] \\<Longrightarrow> P A\"\nand order_step:\"\\<And>As ds. (\\<And>A. A\\<in>set As \\<Longrightarrow> P A) \\<Longrightarrow> (\\<And>A. A\\<in>set As \\<Longrightarrow> dims A = ds) \\<Longrightarrow> P (subtensor_combine ds As)\"\nshows \"P A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P A", "proof (induction A rule:subtensor_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A. dims A = [] \\<Longrightarrow> P A\n 2. \\<And>A.\n       \\<lbrakk>dims A \\<noteq> [];\n        \\<And>i.\n           i < hd (dims A) \\<Longrightarrow> P (subtensor A i)\\<rbrakk>\n       \\<Longrightarrow> P A", "case (order_0 A)"], ["proof (state)\nthis:\n  dims A = []\n\ngoal (2 subgoals):\n 1. \\<And>A. dims A = [] \\<Longrightarrow> P A\n 2. \\<And>A.\n       \\<lbrakk>dims A \\<noteq> [];\n        \\<And>i.\n           i < hd (dims A) \\<Longrightarrow> P (subtensor A i)\\<rbrakk>\n       \\<Longrightarrow> P A", "then"], ["proof (chain)\npicking this:\n  dims A = []", "show ?case"], ["proof (prove)\nusing this:\n  dims A = []\n\ngoal (1 subgoal):\n 1. P A", "by (simp add: assms(1))"], ["proof (state)\nthis:\n  P A\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<lbrakk>dims A \\<noteq> [];\n        \\<And>i.\n           i < hd (dims A) \\<Longrightarrow> P (subtensor A i)\\<rbrakk>\n       \\<Longrightarrow> P A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<lbrakk>dims A \\<noteq> [];\n        \\<And>i.\n           i < hd (dims A) \\<Longrightarrow> P (subtensor A i)\\<rbrakk>\n       \\<Longrightarrow> P A", "case (order_step A)"], ["proof (state)\nthis:\n  dims A \\<noteq> []\n  ?i < hd (dims A) \\<Longrightarrow> P (subtensor A ?i)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<lbrakk>dims A \\<noteq> [];\n        \\<And>i.\n           i < hd (dims A) \\<Longrightarrow> P (subtensor A i)\\<rbrakk>\n       \\<Longrightarrow> P A", "have \"P (subtensor_combine (tl (dims A)) (map (subtensor A) [0..<hd (dims A)]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (subtensor_combine (tl (dims A))\n        (map (subtensor A) [0..<hd (dims A)]))", "apply (rule assms(2))"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A.\n       A \\<in> set (map (subtensor A) [0..<hd (dims A)]) \\<Longrightarrow>\n       P A\n 2. \\<And>A.\n       A \\<in> set (map (subtensor A) [0..<hd (dims A)]) \\<Longrightarrow>\n       dims A = tl (dims A)", "using atLeastLessThan_iff dims_subtensor imageE set_map set_upt order_step"], ["proof (prove)\nusing this:\n  (?i \\<in> {?l..<?u}) = (?l \\<le> ?i \\<and> ?i < ?u)\n  \\<lbrakk>dims ?A \\<noteq> []; ?i < hd (dims ?A)\\<rbrakk>\n  \\<Longrightarrow> dims (subtensor ?A ?i) = tl (dims ?A)\n  \\<lbrakk>?b \\<in> ?f ` ?A;\n   \\<And>x.\n      \\<lbrakk>?b = ?f x; x \\<in> ?A\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  set (map ?f ?xs) = ?f ` set ?xs\n  set [?i..<?j] = {?i..<?j}\n  dims A \\<noteq> []\n  ?i < hd (dims A) \\<Longrightarrow> P (subtensor A ?i)\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       A \\<in> set (map (subtensor A) [0..<hd (dims A)]) \\<Longrightarrow>\n       P A\n 2. \\<And>A.\n       A \\<in> set (map (subtensor A) [0..<hd (dims A)]) \\<Longrightarrow>\n       dims A = tl (dims A)", "by auto"], ["proof (state)\nthis:\n  P (subtensor_combine (tl (dims A)) (map (subtensor A) [0..<hd (dims A)]))\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<lbrakk>dims A \\<noteq> [];\n        \\<And>i.\n           i < hd (dims A) \\<Longrightarrow> P (subtensor A i)\\<rbrakk>\n       \\<Longrightarrow> P A", "then"], ["proof (chain)\npicking this:\n  P (subtensor_combine (tl (dims A)) (map (subtensor A) [0..<hd (dims A)]))", "show ?case"], ["proof (prove)\nusing this:\n  P (subtensor_combine (tl (dims A)) (map (subtensor A) [0..<hd (dims A)]))\n\ngoal (1 subgoal):\n 1. P A", "using subtensor_combine_subtensor[OF order_step.hyps]"], ["proof (prove)\nusing this:\n  P (subtensor_combine (tl (dims A)) (map (subtensor A) [0..<hd (dims A)]))\n  subtensor_combine (tl (dims A)) (map (subtensor A) [0..<hd (dims A)]) = A\n\ngoal (1 subgoal):\n 1. P A", "by metis"], ["proof (state)\nthis:\n  P A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lookup_subtensor1[simp]:\nassumes \"i # is \\<lhd> dims A\"\nshows \"lookup (subtensor A i) is = lookup A (i # is)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (subtensor A i) is = lookup A (i # is)", "using assms"], ["proof (prove)\nusing this:\n  i # is \\<lhd> dims A\n\ngoal (1 subgoal):\n 1. lookup (subtensor A i) is = lookup A (i # is)", "proof (induction A rule: subtensor_combine_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>dims A = []; i # is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup (subtensor A i) is = lookup A (i # is)\n 2. \\<And>As ds.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>A \\<in> set As; i # is \\<lhd> dims A\\<rbrakk>\n                   \\<Longrightarrow> lookup (subtensor A i) is =\n                                     lookup A (i # is);\n        \\<And>A. A \\<in> set As \\<Longrightarrow> dims A = ds;\n        i # is \\<lhd> dims (subtensor_combine ds As)\\<rbrakk>\n       \\<Longrightarrow> lookup (subtensor (subtensor_combine ds As) i) is =\n                         lookup (subtensor_combine ds As) (i # is)", "case order_0"], ["proof (state)\nthis:\n  dims A_ = []\n  i # is \\<lhd> dims A_\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>dims A = []; i # is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup (subtensor A i) is = lookup A (i # is)\n 2. \\<And>As ds.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>A \\<in> set As; i # is \\<lhd> dims A\\<rbrakk>\n                   \\<Longrightarrow> lookup (subtensor A i) is =\n                                     lookup A (i # is);\n        \\<And>A. A \\<in> set As \\<Longrightarrow> dims A = ds;\n        i # is \\<lhd> dims (subtensor_combine ds As)\\<rbrakk>\n       \\<Longrightarrow> lookup (subtensor (subtensor_combine ds As) i) is =\n                         lookup (subtensor_combine ds As) (i # is)", "then"], ["proof (chain)\npicking this:\n  dims A_ = []\n  i # is \\<lhd> dims A_", "show ?case"], ["proof (prove)\nusing this:\n  dims A_ = []\n  i # is \\<lhd> dims A_\n\ngoal (1 subgoal):\n 1. lookup (subtensor A_ i) is = lookup A_ (i # is)", "by auto"], ["proof (state)\nthis:\n  lookup (subtensor A_ i) is = lookup A_ (i # is)\n\ngoal (1 subgoal):\n 1. \\<And>As ds.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>A \\<in> set As; i # is \\<lhd> dims A\\<rbrakk>\n                   \\<Longrightarrow> lookup (subtensor A i) is =\n                                     lookup A (i # is);\n        \\<And>A. A \\<in> set As \\<Longrightarrow> dims A = ds;\n        i # is \\<lhd> dims (subtensor_combine ds As)\\<rbrakk>\n       \\<Longrightarrow> lookup (subtensor (subtensor_combine ds As) i) is =\n                         lookup (subtensor_combine ds As) (i # is)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>As ds.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>A \\<in> set As; i # is \\<lhd> dims A\\<rbrakk>\n                   \\<Longrightarrow> lookup (subtensor A i) is =\n                                     lookup A (i # is);\n        \\<And>A. A \\<in> set As \\<Longrightarrow> dims A = ds;\n        i # is \\<lhd> dims (subtensor_combine ds As)\\<rbrakk>\n       \\<Longrightarrow> lookup (subtensor (subtensor_combine ds As) i) is =\n                         lookup (subtensor_combine ds As) (i # is)", "case (order_step As ds)"], ["proof (state)\nthis:\n  \\<lbrakk>?A \\<in> set As; i # is \\<lhd> dims ?A\\<rbrakk>\n  \\<Longrightarrow> lookup (subtensor ?A i) is = lookup ?A (i # is)\n  ?A \\<in> set As \\<Longrightarrow> dims ?A = ds\n  i # is \\<lhd> dims (subtensor_combine ds As)\n\ngoal (1 subgoal):\n 1. \\<And>As ds.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>A \\<in> set As; i # is \\<lhd> dims A\\<rbrakk>\n                   \\<Longrightarrow> lookup (subtensor A i) is =\n                                     lookup A (i # is);\n        \\<And>A. A \\<in> set As \\<Longrightarrow> dims A = ds;\n        i # is \\<lhd> dims (subtensor_combine ds As)\\<rbrakk>\n       \\<Longrightarrow> lookup (subtensor (subtensor_combine ds As) i) is =\n                         lookup (subtensor_combine ds As) (i # is)", "have 0:\"subtensor (subtensor_combine ds As) i = As ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subtensor (subtensor_combine ds As) i = As ! i", "by (metis list.discI list.sel(1) order_step.hyps order_step.prems subtensor_combine_dims subtensor_subtensor_combine valid_index_dimsE)"], ["proof (state)\nthis:\n  subtensor (subtensor_combine ds As) i = As ! i\n\ngoal (1 subgoal):\n 1. \\<And>As ds.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>A \\<in> set As; i # is \\<lhd> dims A\\<rbrakk>\n                   \\<Longrightarrow> lookup (subtensor A i) is =\n                                     lookup A (i # is);\n        \\<And>A. A \\<in> set As \\<Longrightarrow> dims A = ds;\n        i # is \\<lhd> dims (subtensor_combine ds As)\\<rbrakk>\n       \\<Longrightarrow> lookup (subtensor (subtensor_combine ds As) i) is =\n                         lookup (subtensor_combine ds As) (i # is)", "have 1:\"dims (subtensor_combine ds As) = length As # ds\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dims (subtensor_combine ds As) = length As # ds", "using order_step subtensor_combine_def subtensor_combine_dims"], ["proof (prove)\nusing this:\n  \\<lbrakk>?A \\<in> set As; i # is \\<lhd> dims ?A\\<rbrakk>\n  \\<Longrightarrow> lookup (subtensor ?A i) is = lookup ?A (i # is)\n  ?A \\<in> set As \\<Longrightarrow> dims ?A = ds\n  i # is \\<lhd> dims (subtensor_combine ds As)\n  subtensor_combine ?ds ?As =\n  tensor_from_vec (length ?As # ?ds) (concat (map vec ?As))\n  (\\<And>A.\n      A \\<in> set ?As \\<Longrightarrow> dims A = ?ds) \\<Longrightarrow>\n  dims (subtensor_combine ?ds ?As) = length ?As # ?ds\n\ngoal (1 subgoal):\n 1. dims (subtensor_combine ds As) = length As # ds", "by force"], ["proof (state)\nthis:\n  dims (subtensor_combine ds As) = length As # ds\n\ngoal (1 subgoal):\n 1. \\<And>As ds.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>A \\<in> set As; i # is \\<lhd> dims A\\<rbrakk>\n                   \\<Longrightarrow> lookup (subtensor A i) is =\n                                     lookup A (i # is);\n        \\<And>A. A \\<in> set As \\<Longrightarrow> dims A = ds;\n        i # is \\<lhd> dims (subtensor_combine ds As)\\<rbrakk>\n       \\<Longrightarrow> lookup (subtensor (subtensor_combine ds As) i) is =\n                         lookup (subtensor_combine ds As) (i # is)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (subtensor (subtensor_combine ds As) i) is =\n    lookup (subtensor_combine ds As) (i # is)", "unfolding \"0\" lookup_def 1"], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup_base (dims (As ! i)) (vec (As ! i)) is =\n    lookup_base (length As # ds) (vec (subtensor_combine ds As)) (i # is)", "unfolding lookup_base_Cons"], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup_base (dims (As ! i)) (vec (As ! i)) is =\n    lookup_base ds\n     (fixed_length_sublist (vec (subtensor_combine ds As)) (prod_list ds) i)\n     is", "using  order_step.prems"], ["proof (prove)\nusing this:\n  i # is \\<lhd> dims (subtensor_combine ds As)\n\ngoal (1 subgoal):\n 1. lookup_base (dims (As ! i)) (vec (As ! i)) is =\n    lookup_base ds\n     (fixed_length_sublist (vec (subtensor_combine ds As)) (prod_list ds) i)\n     is", "using Tensor.lookup_base_Cons dims_subtensor lookup_def list.discI list.sel(1)\n    list.sel(3)  valid_index_dimsE vec_subtensor"], ["proof (prove)\nusing this:\n  i # is \\<lhd> dims (subtensor_combine ds As)\n  lookup_base (?d # ?ds) ?v (?i # ?is) =\n  lookup_base ?ds (fixed_length_sublist ?v (prod_list ?ds) ?i) ?is\n  \\<lbrakk>dims ?A \\<noteq> []; ?i < hd (dims ?A)\\<rbrakk>\n  \\<Longrightarrow> dims (subtensor ?A ?i) = tl (dims ?A)\n  lookup ?A = lookup_base (dims ?A) (vec ?A)\n  ?list = ?x21.0 # ?x22.0 \\<Longrightarrow> ?list \\<noteq> []\n  hd (?x21.0 # ?x22.0) = ?x21.0\n  tl (?x21.0 # ?x22.0) = ?x22.0\n  \\<lbrakk>?is \\<lhd> dims ?A;\n   \\<lbrakk>?is = []; dims ?A = []\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<And>is ds i d.\n      \\<lbrakk>?is = i # is; dims ?A = d # ds; is \\<lhd> ds; i < d\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n  \\<lbrakk>dims ?A \\<noteq> []; ?i < hd (dims ?A)\\<rbrakk>\n  \\<Longrightarrow> vec (subtensor ?A ?i) =\n                    fixed_length_sublist (vec ?A) (prod_list (tl (dims ?A)))\n                     ?i\n\ngoal (1 subgoal):\n 1. lookup_base (dims (As ! i)) (vec (As ! i)) is =\n    lookup_base ds\n     (fixed_length_sublist (vec (subtensor_combine ds As)) (prod_list ds) i)\n     is", "by (metis \"0\" \"1\")"], ["proof (state)\nthis:\n  lookup (subtensor (subtensor_combine ds As) i) is =\n  lookup (subtensor_combine ds As) (i # is)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lookup_subtensor:\nassumes \"is \\<lhd> dims A\"\nshows \"lookup A is = hd (vec (fold (\\<lambda>i A. subtensor A i) is A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup A is = hd (vec (fold (\\<lambda>i A. subtensor A i) is A))", "using assms"], ["proof (prove)\nusing this:\n  is \\<lhd> dims A\n\ngoal (1 subgoal):\n 1. lookup A is = hd (vec (fold (\\<lambda>i A. subtensor A i) is A))", "proof (induction \"is\" arbitrary: A)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A.\n       [] \\<lhd> dims A \\<Longrightarrow>\n       lookup A [] = hd (vec (fold (\\<lambda>i A. subtensor A i) [] A))\n 2. \\<And>a is A.\n       \\<lbrakk>\\<And>A.\n                   is \\<lhd> dims A \\<Longrightarrow>\n                   lookup A is =\n                   hd (vec (fold (\\<lambda>i A. subtensor A i) is A));\n        a # is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup A (a # is) =\n                         hd (vec (fold (\\<lambda>i A. subtensor A i)\n                                   (a # is) A))", "case Nil"], ["proof (state)\nthis:\n  [] \\<lhd> dims A\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       [] \\<lhd> dims A \\<Longrightarrow>\n       lookup A [] = hd (vec (fold (\\<lambda>i A. subtensor A i) [] A))\n 2. \\<And>a is A.\n       \\<lbrakk>\\<And>A.\n                   is \\<lhd> dims A \\<Longrightarrow>\n                   lookup A is =\n                   hd (vec (fold (\\<lambda>i A. subtensor A i) is A));\n        a # is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup A (a # is) =\n                         hd (vec (fold (\\<lambda>i A. subtensor A i)\n                                   (a # is) A))", "then"], ["proof (chain)\npicking this:\n  [] \\<lhd> dims A", "show ?case"], ["proof (prove)\nusing this:\n  [] \\<lhd> dims A\n\ngoal (1 subgoal):\n 1. lookup A [] = hd (vec (fold (\\<lambda>i A. subtensor A i) [] A))", "by (metis Tensor.lookup_base_Nil lookup_def fold_simps(1) length_0_conv valid_index_length)"], ["proof (state)\nthis:\n  lookup A [] = hd (vec (fold (\\<lambda>i A. subtensor A i) [] A))\n\ngoal (1 subgoal):\n 1. \\<And>a is A.\n       \\<lbrakk>\\<And>A.\n                   is \\<lhd> dims A \\<Longrightarrow>\n                   lookup A is =\n                   hd (vec (fold (\\<lambda>i A. subtensor A i) is A));\n        a # is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup A (a # is) =\n                         hd (vec (fold (\\<lambda>i A. subtensor A i)\n                                   (a # is) A))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a is A.\n       \\<lbrakk>\\<And>A.\n                   is \\<lhd> dims A \\<Longrightarrow>\n                   lookup A is =\n                   hd (vec (fold (\\<lambda>i A. subtensor A i) is A));\n        a # is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup A (a # is) =\n                         hd (vec (fold (\\<lambda>i A. subtensor A i)\n                                   (a # is) A))", "case (Cons a \"is\" A)"], ["proof (state)\nthis:\n  is \\<lhd> dims ?A \\<Longrightarrow>\n  lookup ?A is = hd (vec (fold (\\<lambda>i A. subtensor A i) is ?A))\n  a # is \\<lhd> dims A\n\ngoal (1 subgoal):\n 1. \\<And>a is A.\n       \\<lbrakk>\\<And>A.\n                   is \\<lhd> dims A \\<Longrightarrow>\n                   lookup A is =\n                   hd (vec (fold (\\<lambda>i A. subtensor A i) is A));\n        a # is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup A (a # is) =\n                         hd (vec (fold (\\<lambda>i A. subtensor A i)\n                                   (a # is) A))", "then"], ["proof (chain)\npicking this:\n  is \\<lhd> dims ?A \\<Longrightarrow>\n  lookup ?A is = hd (vec (fold (\\<lambda>i A. subtensor A i) is ?A))\n  a # is \\<lhd> dims A", "show ?case"], ["proof (prove)\nusing this:\n  is \\<lhd> dims ?A \\<Longrightarrow>\n  lookup ?A is = hd (vec (fold (\\<lambda>i A. subtensor A i) is ?A))\n  a # is \\<lhd> dims A\n\ngoal (1 subgoal):\n 1. lookup A (a # is) =\n    hd (vec (fold (\\<lambda>i A. subtensor A i) (a # is) A))", "using dims_subtensor lookup_subtensor1 fold_simps(2) list.discI list.sel(1) list.sel(3)\n    valid_indexE"], ["proof (prove)\nusing this:\n  is \\<lhd> dims ?A \\<Longrightarrow>\n  lookup ?A is = hd (vec (fold (\\<lambda>i A. subtensor A i) is ?A))\n  a # is \\<lhd> dims A\n  \\<lbrakk>dims ?A \\<noteq> []; ?i < hd (dims ?A)\\<rbrakk>\n  \\<Longrightarrow> dims (subtensor ?A ?i) = tl (dims ?A)\n  ?i # ?is \\<lhd> dims ?A \\<Longrightarrow>\n  lookup (subtensor ?A ?i) ?is = lookup ?A (?i # ?is)\n  fold ?f (?x # ?xs) ?s = fold ?f ?xs (?f ?x ?s)\n  ?list = ?x21.0 # ?x22.0 \\<Longrightarrow> ?list \\<noteq> []\n  hd (?x21.0 # ?x22.0) = ?x21.0\n  tl (?x21.0 # ?x22.0) = ?x22.0\n  \\<lbrakk>?is \\<lhd> ?ds;\n   \\<lbrakk>?is = []; ?ds = []\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<And>is ds i d.\n      \\<lbrakk>?is = i # is; ?ds = d # ds; is \\<lhd> ds; i < d\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. lookup A (a # is) =\n    hd (vec (fold (\\<lambda>i A. subtensor A i) (a # is) A))", "by (metis (no_types, lifting))"], ["proof (state)\nthis:\n  lookup A (a # is) =\n  hd (vec (fold (\\<lambda>i A. subtensor A i) (a # is) A))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subtensor_eqI:\nassumes \"dims A \\<noteq> []\"\nand dims_eq:\"dims A = dims B\"\nand \"\\<And>i. i < hd (dims A) \\<Longrightarrow> subtensor A i = subtensor B i\"\nshows \"A=B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A = B", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. A = B", "fix \"is\""], ["proof (state)\ngoal (1 subgoal):\n 1. A = B", "assume \"is \\<lhd> dims A\""], ["proof (state)\nthis:\n  is \\<lhd> dims A\n\ngoal (1 subgoal):\n 1. A = B", "then"], ["proof (chain)\npicking this:\n  is \\<lhd> dims A", "obtain i is' where is_Cons:\"is = i # is'\""], ["proof (prove)\nusing this:\n  is \\<lhd> dims A\n\ngoal (1 subgoal):\n 1. (\\<And>i is'. is = i # is' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(1)"], ["proof (prove)\nusing this:\n  is \\<lhd> dims A\n  dims A \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>i is'. is = i # is' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  is = i # is'\n\ngoal (1 subgoal):\n 1. A = B", "then"], ["proof (chain)\npicking this:\n  is = i # is'", "have \"lookup A is = lookup B is\""], ["proof (prove)\nusing this:\n  is = i # is'\n\ngoal (1 subgoal):\n 1. lookup A is = lookup B is", "using lookup_subtensor1 assms"], ["proof (prove)\nusing this:\n  is = i # is'\n  ?i # ?is \\<lhd> dims ?A \\<Longrightarrow>\n  lookup (subtensor ?A ?i) ?is = lookup ?A (?i # ?is)\n  dims A \\<noteq> []\n  dims A = dims B\n  ?i < hd (dims A) \\<Longrightarrow> subtensor A ?i = subtensor B ?i\n\ngoal (1 subgoal):\n 1. lookup A is = lookup B is", "by (metis \\<open>is \\<lhd> dims A\\<close> is_Cons list.sel(1) valid_index_dimsE)"], ["proof (state)\nthis:\n  lookup A is = lookup B is\n\ngoal (1 subgoal):\n 1. A = B", "}"], ["proof (state)\nthis:\n  ?is2 \\<lhd> dims A \\<Longrightarrow> lookup A ?is2 = lookup B ?is2\n\ngoal (1 subgoal):\n 1. A = B", "then"], ["proof (chain)\npicking this:\n  ?is2 \\<lhd> dims A \\<Longrightarrow> lookup A ?is2 = lookup B ?is2", "show ?thesis"], ["proof (prove)\nusing this:\n  ?is2 \\<lhd> dims A \\<Longrightarrow> lookup A ?is2 = lookup B ?is2\n\ngoal (1 subgoal):\n 1. A = B", "using tensor_lookup_eqI[OF dims_eq]"], ["proof (prove)\nusing this:\n  ?is2 \\<lhd> dims A \\<Longrightarrow> lookup A ?is2 = lookup B ?is2\n  (\\<And>is.\n      is \\<lhd> dims A \\<Longrightarrow>\n      lookup A is = lookup B is) \\<Longrightarrow>\n  A = B\n\ngoal (1 subgoal):\n 1. A = B", "by auto"], ["proof (state)\nthis:\n  A = B\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}