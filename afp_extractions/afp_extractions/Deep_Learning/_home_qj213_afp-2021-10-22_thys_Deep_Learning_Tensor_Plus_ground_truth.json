{"file_name": "/home/qj213/afp-2021-10-22/thys/Deep_Learning/Tensor_Plus.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Deep_Learning", "problem_names": ["lemma plus_dim1[simp]: \"dims A = dims B \\<Longrightarrow> dims (A + B) = dims A\"", "lemma plus_dim2[simp]: \"dims A = dims B \\<Longrightarrow> dims (A + B) = dims B\"", "lemma plus_base: \"dims A = dims B \\<Longrightarrow> A + B = plus_base A B\"", "lemma fixed_length_sublist_plus:\nassumes \"length xs1 = c * l\" \"length xs2 = c * l\" \"i < c\"\nshows \"fixed_length_sublist (vec_plus xs1 xs2) l i\n          = vec_plus (fixed_length_sublist xs1 l i) (fixed_length_sublist xs2 l i)\"", "lemma vec_plus[simp]:\nassumes \"dims A = dims B\"\nshows \"vec (A+B) = vec_plus (vec A) (vec B)\"", "lemma subtensor_plus:\nfixes A::\"'a::semigroup_add tensor\" and B::\"'a::semigroup_add tensor\"\nassumes \"i < hd (dims A)\"\nand \"dims A = dims B\"\nand \"dims A \\<noteq> []\"\nshows \"subtensor (A + B) i = subtensor A i + subtensor B i\"", "lemma lookup_plus[simp]:\nassumes \"dims A = dims B\"\nand \"is \\<lhd> dims A\"\nshows \"lookup (A + B) is = lookup A is + lookup B is\"", "lemma plus_assoc:\nassumes dimsA:\"dims A = ds\" and dimsB:\"dims B = ds\" and dimsC:\"dims C = ds\"\nshows \"(A + B) + C = A + (B + C)\"", "lemma tensor_comm[simp]:\nfixes A::\"'a::ab_semigroup_add tensor\"\nshows \"A + B = B + A\"", "lemma dims_tensor0[simp]: \"dims (tensor0 d) = d\"\nand   vec_tensor0[simp]:  \"vec (tensor0 d) = vec0 (prod_list d)\"", "lemma lookup_is_in_vec: \"is \\<lhd> (dims A) \\<Longrightarrow> lookup A is \\<in> set (vec A)\"", "lemma lookup_tensor0:\nassumes \"is \\<lhd> ds\"\nshows \"lookup (tensor0 ds) is = 0\"", "lemma\nfixes A::\"'a::monoid_add tensor\"\nshows tensor_add_0_right[simp]: \"A + tensor0 (dims A) = A\"", "lemma\nfixes A::\"'a::monoid_add tensor\"\nshows tensor_add_0_left[simp]:  \"tensor0 (dims A) + A = A\"", "lemma listsum_Nil: \"listsum ds [] = tensor0 ds\"", "lemma listsum_one: \"listsum (dims A) [A] = A\"", "lemma listsum_Cons: \"listsum ds (A # As) = A + listsum ds As\"", "lemma listsum_dims:\nassumes \"\\<And>A. A\\<in>set As \\<Longrightarrow> dims A = ds\"\nshows \"dims (listsum ds As) = ds\"", "lemma subtensor0:\nassumes \"ds \\<noteq> []\" and \"i<hd ds\"\nshows \"subtensor (tensor0 ds) i = tensor0 (tl ds)\"", "lemma subtensor_listsum:\nassumes \"\\<And>A. A\\<in>set As \\<Longrightarrow> dims A = ds\"\nand \"ds \\<noteq> []\" and \"i<hd ds\"\nshows \"subtensor (listsum ds As) i = listsum (tl ds) (map (\\<lambda>A. subtensor A i) As)\"", "lemma listsum0:\nassumes \"\\<And>A. A\\<in>set As \\<Longrightarrow> A = tensor0 ds\"\nshows \"listsum ds As = tensor0 ds\"", "lemma listsum_all_0_but_one:\nassumes \"\\<And>i. i\\<noteq>j \\<Longrightarrow> i<length As \\<Longrightarrow> As!i = tensor0 ds\"\nand \"dims (As!j) = ds\"\nand \"j < length As\"\nshows \"listsum ds As = As!j\"", "lemma lookup_listsum:\nassumes \"is \\<lhd> ds\"\nand \"\\<And>A. A \\<in> set As \\<Longrightarrow> dims A = ds\"\nshows \"lookup (listsum ds As) is = (\\<Sum>A\\<leftarrow>As. lookup A is)\""], "translations": [["", "lemma plus_dim1[simp]: \"dims A = dims B \\<Longrightarrow> dims (A + B) = dims A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dims A = dims B \\<Longrightarrow> dims (A + B) = dims A", "unfolding plus_def plus_base_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dims A = dims B \\<Longrightarrow>\n    dims\n     (if dims A = dims B\n      then tensor_from_vec (dims A) (vec_plus (vec A) (vec B))\n      else undefined) =\n    dims A", "using dims_tensor length_vec length_map map_fst_zip vec_plus_def"], ["proof (prove)\nusing this:\n  length ?v = prod_list ?d \\<Longrightarrow>\n  dims (tensor_from_vec ?d ?v) = ?d\n  length (vec ?A) = prod_list (dims ?A)\n  length (map ?f ?xs) = length ?xs\n  length ?xs = length ?ys \\<Longrightarrow> map fst (zip ?xs ?ys) = ?xs\n  vec_plus ?a ?b = map2 (+) ?a ?b\n\ngoal (1 subgoal):\n 1. dims A = dims B \\<Longrightarrow>\n    dims\n     (if dims A = dims B\n      then tensor_from_vec (dims A) (vec_plus (vec A) (vec B))\n      else undefined) =\n    dims A", "by (metis (full_types))"], ["", "lemma plus_dim2[simp]: \"dims A = dims B \\<Longrightarrow> dims (A + B) = dims B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dims A = dims B \\<Longrightarrow> dims (A + B) = dims B", "using plus_dim1"], ["proof (prove)\nusing this:\n  dims ?A = dims ?B \\<Longrightarrow> dims (?A + ?B) = dims ?A\n\ngoal (1 subgoal):\n 1. dims A = dims B \\<Longrightarrow> dims (A + B) = dims B", "by metis"], ["", "lemma plus_base: \"dims A = dims B \\<Longrightarrow> A + B = plus_base A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dims A = dims B \\<Longrightarrow> A + B = plus_base A B", "unfolding plus_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dims A = dims B \\<Longrightarrow>\n    (if dims A = dims B then plus_base A B else undefined) = plus_base A B", "by metis"], ["", "lemma fixed_length_sublist_plus:\nassumes \"length xs1 = c * l\" \"length xs2 = c * l\" \"i < c\"\nshows \"fixed_length_sublist (vec_plus xs1 xs2) l i\n          = vec_plus (fixed_length_sublist xs1 l i) (fixed_length_sublist xs2 l i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fixed_length_sublist (vec_plus xs1 xs2) l i =\n    vec_plus (fixed_length_sublist xs1 l i) (fixed_length_sublist xs2 l i)", "unfolding vec_plus_def fixed_length_sublist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. take l (drop (l * i) (map2 (+) xs1 xs2)) =\n    map2 (+) (take l (drop (l * i) xs1)) (take l (drop (l * i) xs2))", "using drop_map drop_zip take_map take_zip"], ["proof (prove)\nusing this:\n  drop ?n (map ?f ?xs) = map ?f (drop ?n ?xs)\n  drop ?n (zip ?xs ?ys) = zip (drop ?n ?xs) (drop ?n ?ys)\n  take ?n (map ?f ?xs) = map ?f (take ?n ?xs)\n  take ?n (zip ?xs ?ys) = zip (take ?n ?xs) (take ?n ?ys)\n\ngoal (1 subgoal):\n 1. take l (drop (l * i) (map2 (+) xs1 xs2)) =\n    map2 (+) (take l (drop (l * i) xs1)) (take l (drop (l * i) xs2))", "by metis"], ["", "lemma vec_plus[simp]:\nassumes \"dims A = dims B\"\nshows \"vec (A+B) = vec_plus (vec A) (vec B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec (A + B) = vec_plus (vec A) (vec B)", "unfolding plus_def plus_base_def vec_plus_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec (if dims A = dims B\n         then tensor_from_vec (dims A) (map2 (+) (vec A) (vec B))\n         else undefined) =\n    map2 (+) (vec A) (vec B)", "using assms"], ["proof (prove)\nusing this:\n  dims A = dims B\n\ngoal (1 subgoal):\n 1. vec (if dims A = dims B\n         then tensor_from_vec (dims A) (map2 (+) (vec A) (vec B))\n         else undefined) =\n    map2 (+) (vec A) (vec B)", "by (auto; metis (no_types, lifting) length_map length_tensor_vec_from_lookup map_fst_zip tensor_lookup tensor_from_lookup_def vec_tensor)"], ["", "lemma subtensor_plus:\nfixes A::\"'a::semigroup_add tensor\" and B::\"'a::semigroup_add tensor\"\nassumes \"i < hd (dims A)\"\nand \"dims A = dims B\"\nand \"dims A \\<noteq> []\"\nshows \"subtensor (A + B) i = subtensor A i + subtensor B i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subtensor (A + B) i = subtensor A i + subtensor B i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. subtensor (A + B) i = subtensor A i + subtensor B i", "have \"length (vec A) =  hd (dims A) * prod_list (tl (dims A))\"\n        \"length (Tensor.vec B) = hd (dims A) * prod_list (tl (dims A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (vec A) = hd (dims A) * prod_list (tl (dims A)) &&&\n    length (vec B) = hd (dims A) * prod_list (tl (dims A))", "using length_vec prod_list.Cons assms"], ["proof (prove)\nusing this:\n  length (vec ?A) = prod_list (dims ?A)\n  prod_list (?x # ?xs) = ?x * prod_list ?xs\n  i < hd (dims A)\n  dims A = dims B\n  dims A \\<noteq> []\n\ngoal (1 subgoal):\n 1. length (vec A) = hd (dims A) * prod_list (tl (dims A)) &&&\n    length (vec B) = hd (dims A) * prod_list (tl (dims A))", "by (metis (no_types) list.exhaust_sel)+"], ["proof (state)\nthis:\n  length (vec A) = hd (dims A) * prod_list (tl (dims A))\n  length (vec B) = hd (dims A) * prod_list (tl (dims A))\n\ngoal (1 subgoal):\n 1. subtensor (A + B) i = subtensor A i + subtensor B i", "then"], ["proof (chain)\npicking this:\n  length (vec A) = hd (dims A) * prod_list (tl (dims A))\n  length (vec B) = hd (dims A) * prod_list (tl (dims A))", "show ?thesis"], ["proof (prove)\nusing this:\n  length (vec A) = hd (dims A) * prod_list (tl (dims A))\n  length (vec B) = hd (dims A) * prod_list (tl (dims A))\n\ngoal (1 subgoal):\n 1. subtensor (A + B) i = subtensor A i + subtensor B i", "using Tensor_Plus.vec_plus assms fixed_length_sublist_plus vec_subtensor tensor_eqI\n     dims_subtensor plus_dim1"], ["proof (prove)\nusing this:\n  length (vec A) = hd (dims A) * prod_list (tl (dims A))\n  length (vec B) = hd (dims A) * prod_list (tl (dims A))\n  dims ?A = dims ?B \\<Longrightarrow>\n  vec (?A + ?B) = vec_plus (vec ?A) (vec ?B)\n  i < hd (dims A)\n  dims A = dims B\n  dims A \\<noteq> []\n  \\<lbrakk>length ?xs1.0 = ?c * ?l; length ?xs2.0 = ?c * ?l;\n   ?i < ?c\\<rbrakk>\n  \\<Longrightarrow> fixed_length_sublist (vec_plus ?xs1.0 ?xs2.0) ?l ?i =\n                    vec_plus (fixed_length_sublist ?xs1.0 ?l ?i)\n                     (fixed_length_sublist ?xs2.0 ?l ?i)\n  \\<lbrakk>dims ?A \\<noteq> []; ?i < hd (dims ?A)\\<rbrakk>\n  \\<Longrightarrow> vec (subtensor ?A ?i) =\n                    fixed_length_sublist (vec ?A) (prod_list (tl (dims ?A)))\n                     ?i\n  \\<lbrakk>dims ?A = dims ?B; vec ?A = vec ?B\\<rbrakk>\n  \\<Longrightarrow> ?A = ?B\n  \\<lbrakk>dims ?A \\<noteq> []; ?i < hd (dims ?A)\\<rbrakk>\n  \\<Longrightarrow> dims (subtensor ?A ?i) = tl (dims ?A)\n  dims ?A = dims ?B \\<Longrightarrow> dims (?A + ?B) = dims ?A\n\ngoal (1 subgoal):\n 1. subtensor (A + B) i = subtensor A i + subtensor B i", "by fastforce"], ["proof (state)\nthis:\n  subtensor (A + B) i = subtensor A i + subtensor B i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lookup_plus[simp]:\nassumes \"dims A = dims B\"\nand \"is \\<lhd> dims A\"\nshows \"lookup (A + B) is = lookup A is + lookup B is\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (A + B) is = lookup A is + lookup B is", "using assms"], ["proof (prove)\nusing this:\n  dims A = dims B\n  is \\<lhd> dims A\n\ngoal (1 subgoal):\n 1. lookup (A + B) is = lookup A is + lookup B is", "proof (induction \"A+B\" arbitrary:A B \"is\" rule: subtensor_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A B is.\n       \\<lbrakk>dims (A + B) = []; dims A = dims B;\n        is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup (A + B) is = lookup A is + lookup B is\n 2. \\<And>A B is.\n       \\<lbrakk>dims (A + B) \\<noteq> [];\n        \\<And>i Aa Ba is.\n           \\<lbrakk>i < hd (dims (A + B)); subtensor (A + B) i = Aa + Ba;\n            dims Aa = dims Ba; is \\<lhd> dims Aa\\<rbrakk>\n           \\<Longrightarrow> lookup (Aa + Ba) is =\n                             lookup Aa is + lookup Ba is;\n        dims A = dims B; is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup (A + B) is = lookup A is + lookup B is", "case (order_0 A B \"is\")"], ["proof (state)\nthis:\n  dims (A + B) = []\n  dims A = dims B\n  is \\<lhd> dims A\n\ngoal (2 subgoals):\n 1. \\<And>A B is.\n       \\<lbrakk>dims (A + B) = []; dims A = dims B;\n        is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup (A + B) is = lookup A is + lookup B is\n 2. \\<And>A B is.\n       \\<lbrakk>dims (A + B) \\<noteq> [];\n        \\<And>i Aa Ba is.\n           \\<lbrakk>i < hd (dims (A + B)); subtensor (A + B) i = Aa + Ba;\n            dims Aa = dims Ba; is \\<lhd> dims Aa\\<rbrakk>\n           \\<Longrightarrow> lookup (Aa + Ba) is =\n                             lookup Aa is + lookup Ba is;\n        dims A = dims B; is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup (A + B) is = lookup A is + lookup B is", "then"], ["proof (chain)\npicking this:\n  dims (A + B) = []\n  dims A = dims B\n  is \\<lhd> dims A", "have \"is = []\""], ["proof (prove)\nusing this:\n  dims (A + B) = []\n  dims A = dims B\n  is \\<lhd> dims A\n\ngoal (1 subgoal):\n 1. is = []", "by auto"], ["proof (state)\nthis:\n  is = []\n\ngoal (2 subgoals):\n 1. \\<And>A B is.\n       \\<lbrakk>dims (A + B) = []; dims A = dims B;\n        is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup (A + B) is = lookup A is + lookup B is\n 2. \\<And>A B is.\n       \\<lbrakk>dims (A + B) \\<noteq> [];\n        \\<And>i Aa Ba is.\n           \\<lbrakk>i < hd (dims (A + B)); subtensor (A + B) i = Aa + Ba;\n            dims Aa = dims Ba; is \\<lhd> dims Aa\\<rbrakk>\n           \\<Longrightarrow> lookup (Aa + Ba) is =\n                             lookup Aa is + lookup Ba is;\n        dims A = dims B; is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup (A + B) is = lookup A is + lookup B is", "have 1:\"[] \\<lhd> dims A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<lhd> dims A", "using order_0 \\<open>is = []\\<close>"], ["proof (prove)\nusing this:\n  dims (A + B) = []\n  dims A = dims B\n  is \\<lhd> dims A\n  is = []\n\ngoal (1 subgoal):\n 1. [] \\<lhd> dims A", "by auto"], ["proof (state)\nthis:\n  [] \\<lhd> dims A\n\ngoal (2 subgoals):\n 1. \\<And>A B is.\n       \\<lbrakk>dims (A + B) = []; dims A = dims B;\n        is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup (A + B) is = lookup A is + lookup B is\n 2. \\<And>A B is.\n       \\<lbrakk>dims (A + B) \\<noteq> [];\n        \\<And>i Aa Ba is.\n           \\<lbrakk>i < hd (dims (A + B)); subtensor (A + B) i = Aa + Ba;\n            dims Aa = dims Ba; is \\<lhd> dims Aa\\<rbrakk>\n           \\<Longrightarrow> lookup (Aa + Ba) is =\n                             lookup Aa is + lookup Ba is;\n        dims A = dims B; is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup (A + B) is = lookup A is + lookup B is", "have 2:\"[] \\<lhd> dims B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<lhd> dims B", "using order_0 \\<open>is = []\\<close>"], ["proof (prove)\nusing this:\n  dims (A + B) = []\n  dims A = dims B\n  is \\<lhd> dims A\n  is = []\n\ngoal (1 subgoal):\n 1. [] \\<lhd> dims B", "by auto"], ["proof (state)\nthis:\n  [] \\<lhd> dims B\n\ngoal (2 subgoals):\n 1. \\<And>A B is.\n       \\<lbrakk>dims (A + B) = []; dims A = dims B;\n        is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup (A + B) is = lookup A is + lookup B is\n 2. \\<And>A B is.\n       \\<lbrakk>dims (A + B) \\<noteq> [];\n        \\<And>i Aa Ba is.\n           \\<lbrakk>i < hd (dims (A + B)); subtensor (A + B) i = Aa + Ba;\n            dims Aa = dims Ba; is \\<lhd> dims Aa\\<rbrakk>\n           \\<Longrightarrow> lookup (Aa + Ba) is =\n                             lookup Aa is + lookup Ba is;\n        dims A = dims B; is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup (A + B) is = lookup A is + lookup B is", "have 3:\"[] \\<lhd> dims (A + B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<lhd> dims (A + B)", "using order_0 \\<open>is = []\\<close>"], ["proof (prove)\nusing this:\n  dims (A + B) = []\n  dims A = dims B\n  is \\<lhd> dims A\n  is = []\n\ngoal (1 subgoal):\n 1. [] \\<lhd> dims (A + B)", "by auto"], ["proof (state)\nthis:\n  [] \\<lhd> dims (A + B)\n\ngoal (2 subgoals):\n 1. \\<And>A B is.\n       \\<lbrakk>dims (A + B) = []; dims A = dims B;\n        is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup (A + B) is = lookup A is + lookup B is\n 2. \\<And>A B is.\n       \\<lbrakk>dims (A + B) \\<noteq> [];\n        \\<And>i Aa Ba is.\n           \\<lbrakk>i < hd (dims (A + B)); subtensor (A + B) i = Aa + Ba;\n            dims Aa = dims Ba; is \\<lhd> dims Aa\\<rbrakk>\n           \\<Longrightarrow> lookup (Aa + Ba) is =\n                             lookup Aa is + lookup Ba is;\n        dims A = dims B; is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup (A + B) is = lookup A is + lookup B is", "have \"length (vec A) = 1\" \"length (vec B) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (vec A) = 1 &&& length (vec B) = 1", "by (metis length_vec prod_list.Nil order_0.hyps order_0.prems(1) plus_dim1)+"], ["proof (state)\nthis:\n  length (vec A) = 1\n  length (vec B) = 1\n\ngoal (2 subgoals):\n 1. \\<And>A B is.\n       \\<lbrakk>dims (A + B) = []; dims A = dims B;\n        is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup (A + B) is = lookup A is + lookup B is\n 2. \\<And>A B is.\n       \\<lbrakk>dims (A + B) \\<noteq> [];\n        \\<And>i Aa Ba is.\n           \\<lbrakk>i < hd (dims (A + B)); subtensor (A + B) i = Aa + Ba;\n            dims Aa = dims Ba; is \\<lhd> dims Aa\\<rbrakk>\n           \\<Longrightarrow> lookup (Aa + Ba) is =\n                             lookup Aa is + lookup Ba is;\n        dims A = dims B; is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup (A + B) is = lookup A is + lookup B is", "then"], ["proof (chain)\npicking this:\n  length (vec A) = 1\n  length (vec B) = 1", "show ?case"], ["proof (prove)\nusing this:\n  length (vec A) = 1\n  length (vec B) = 1\n\ngoal (1 subgoal):\n 1. lookup (A + B) is = lookup A is + lookup B is", "unfolding lookup_subtensor[OF 1] lookup_subtensor[OF 2] lookup_subtensor[OF 3] \\<open>is = []\\<close>\n    fold_simps(1) vec_plus[OF order_0.prems(1)]"], ["proof (prove)\nusing this:\n  length (vec A) = 1\n  length (vec B) = 1\n\ngoal (1 subgoal):\n 1. hd (vec_plus (vec A) (vec B)) = hd (vec A) + hd (vec B)", "unfolding vec_plus_def"], ["proof (prove)\nusing this:\n  length (vec A) = 1\n  length (vec B) = 1\n\ngoal (1 subgoal):\n 1. hd (map2 (+) (vec A) (vec B)) = hd (vec A) + hd (vec B)", "using  order_0.prems  length_map\n    list.map_sel(1) list.size(3)  map_fst_zip map_snd_zip order_0.hyps\n    zero_neq_one case_prod_unfold length_vec"], ["proof (prove)\nusing this:\n  length (vec A) = 1\n  length (vec B) = 1\n  dims A = dims B\n  is \\<lhd> dims A\n  length (map ?f ?xs) = length ?xs\n  ?a \\<noteq> [] \\<Longrightarrow> hd (map ?f ?a) = ?f (hd ?a)\n  length [] = 0\n  length ?xs = length ?ys \\<Longrightarrow> map fst (zip ?xs ?ys) = ?xs\n  length ?xs = length ?ys \\<Longrightarrow> map snd (zip ?xs ?ys) = ?ys\n  dims (A + B) = []\n  (0::?'a) \\<noteq> (1::?'a)\n  case_prod = (\\<lambda>c p. c (fst p) (snd p))\n  length (vec ?A) = prod_list (dims ?A)\n\ngoal (1 subgoal):\n 1. hd (map2 (+) (vec A) (vec B)) = hd (vec A) + hd (vec B)", "by metis"], ["proof (state)\nthis:\n  lookup (A + B) is = lookup A is + lookup B is\n\ngoal (1 subgoal):\n 1. \\<And>A B is.\n       \\<lbrakk>dims (A + B) \\<noteq> [];\n        \\<And>i Aa Ba is.\n           \\<lbrakk>i < hd (dims (A + B)); subtensor (A + B) i = Aa + Ba;\n            dims Aa = dims Ba; is \\<lhd> dims Aa\\<rbrakk>\n           \\<Longrightarrow> lookup (Aa + Ba) is =\n                             lookup Aa is + lookup Ba is;\n        dims A = dims B; is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup (A + B) is = lookup A is + lookup B is", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A B is.\n       \\<lbrakk>dims (A + B) \\<noteq> [];\n        \\<And>i Aa Ba is.\n           \\<lbrakk>i < hd (dims (A + B)); subtensor (A + B) i = Aa + Ba;\n            dims Aa = dims Ba; is \\<lhd> dims Aa\\<rbrakk>\n           \\<Longrightarrow> lookup (Aa + Ba) is =\n                             lookup Aa is + lookup Ba is;\n        dims A = dims B; is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup (A + B) is = lookup A is + lookup B is", "case (order_step A B \"is\")"], ["proof (state)\nthis:\n  dims (A + B) \\<noteq> []\n  \\<lbrakk>?i < hd (dims (A + B)); subtensor (A + B) ?i = ?A + ?B;\n   dims ?A = dims ?B; ?is \\<lhd> dims ?A\\<rbrakk>\n  \\<Longrightarrow> lookup (?A + ?B) ?is = lookup ?A ?is + lookup ?B ?is\n  dims A = dims B\n  is \\<lhd> dims A\n\ngoal (1 subgoal):\n 1. \\<And>A B is.\n       \\<lbrakk>dims (A + B) \\<noteq> [];\n        \\<And>i Aa Ba is.\n           \\<lbrakk>i < hd (dims (A + B)); subtensor (A + B) i = Aa + Ba;\n            dims Aa = dims Ba; is \\<lhd> dims Aa\\<rbrakk>\n           \\<Longrightarrow> lookup (Aa + Ba) is =\n                             lookup Aa is + lookup Ba is;\n        dims A = dims B; is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup (A + B) is = lookup A is + lookup B is", "then"], ["proof (chain)\npicking this:\n  dims (A + B) \\<noteq> []\n  \\<lbrakk>?i < hd (dims (A + B)); subtensor (A + B) ?i = ?A + ?B;\n   dims ?A = dims ?B; ?is \\<lhd> dims ?A\\<rbrakk>\n  \\<Longrightarrow> lookup (?A + ?B) ?is = lookup ?A ?is + lookup ?B ?is\n  dims A = dims B\n  is \\<lhd> dims A", "obtain i is' where \"is = i # is'\""], ["proof (prove)\nusing this:\n  dims (A + B) \\<noteq> []\n  \\<lbrakk>?i < hd (dims (A + B)); subtensor (A + B) ?i = ?A + ?B;\n   dims ?A = dims ?B; ?is \\<lhd> dims ?A\\<rbrakk>\n  \\<Longrightarrow> lookup (?A + ?B) ?is = lookup ?A ?is + lookup ?B ?is\n  dims A = dims B\n  is \\<lhd> dims A\n\ngoal (1 subgoal):\n 1. (\\<And>i is'. is = i # is' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  is = i # is'\n\ngoal (1 subgoal):\n 1. \\<And>A B is.\n       \\<lbrakk>dims (A + B) \\<noteq> [];\n        \\<And>i Aa Ba is.\n           \\<lbrakk>i < hd (dims (A + B)); subtensor (A + B) i = Aa + Ba;\n            dims Aa = dims Ba; is \\<lhd> dims Aa\\<rbrakk>\n           \\<Longrightarrow> lookup (Aa + Ba) is =\n                             lookup Aa is + lookup Ba is;\n        dims A = dims B; is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup (A + B) is = lookup A is + lookup B is", "have 1:\"is \\<lhd> dims A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is \\<lhd> dims A", "using order_step"], ["proof (prove)\nusing this:\n  dims (A + B) \\<noteq> []\n  \\<lbrakk>?i < hd (dims (A + B)); subtensor (A + B) ?i = ?A + ?B;\n   dims ?A = dims ?B; ?is \\<lhd> dims ?A\\<rbrakk>\n  \\<Longrightarrow> lookup (?A + ?B) ?is = lookup ?A ?is + lookup ?B ?is\n  dims A = dims B\n  is \\<lhd> dims A\n\ngoal (1 subgoal):\n 1. is \\<lhd> dims A", "by auto"], ["proof (state)\nthis:\n  is \\<lhd> dims A\n\ngoal (1 subgoal):\n 1. \\<And>A B is.\n       \\<lbrakk>dims (A + B) \\<noteq> [];\n        \\<And>i Aa Ba is.\n           \\<lbrakk>i < hd (dims (A + B)); subtensor (A + B) i = Aa + Ba;\n            dims Aa = dims Ba; is \\<lhd> dims Aa\\<rbrakk>\n           \\<Longrightarrow> lookup (Aa + Ba) is =\n                             lookup Aa is + lookup Ba is;\n        dims A = dims B; is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup (A + B) is = lookup A is + lookup B is", "have 2:\"is \\<lhd> dims B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is \\<lhd> dims B", "using order_step"], ["proof (prove)\nusing this:\n  dims (A + B) \\<noteq> []\n  \\<lbrakk>?i < hd (dims (A + B)); subtensor (A + B) ?i = ?A + ?B;\n   dims ?A = dims ?B; ?is \\<lhd> dims ?A\\<rbrakk>\n  \\<Longrightarrow> lookup (?A + ?B) ?is = lookup ?A ?is + lookup ?B ?is\n  dims A = dims B\n  is \\<lhd> dims A\n\ngoal (1 subgoal):\n 1. is \\<lhd> dims B", "by auto"], ["proof (state)\nthis:\n  is \\<lhd> dims B\n\ngoal (1 subgoal):\n 1. \\<And>A B is.\n       \\<lbrakk>dims (A + B) \\<noteq> [];\n        \\<And>i Aa Ba is.\n           \\<lbrakk>i < hd (dims (A + B)); subtensor (A + B) i = Aa + Ba;\n            dims Aa = dims Ba; is \\<lhd> dims Aa\\<rbrakk>\n           \\<Longrightarrow> lookup (Aa + Ba) is =\n                             lookup Aa is + lookup Ba is;\n        dims A = dims B; is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup (A + B) is = lookup A is + lookup B is", "have 3:\"is \\<lhd> dims (A + B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is \\<lhd> dims (A + B)", "using order_step"], ["proof (prove)\nusing this:\n  dims (A + B) \\<noteq> []\n  \\<lbrakk>?i < hd (dims (A + B)); subtensor (A + B) ?i = ?A + ?B;\n   dims ?A = dims ?B; ?is \\<lhd> dims ?A\\<rbrakk>\n  \\<Longrightarrow> lookup (?A + ?B) ?is = lookup ?A ?is + lookup ?B ?is\n  dims A = dims B\n  is \\<lhd> dims A\n\ngoal (1 subgoal):\n 1. is \\<lhd> dims (A + B)", "by auto"], ["proof (state)\nthis:\n  is \\<lhd> dims (A + B)\n\ngoal (1 subgoal):\n 1. \\<And>A B is.\n       \\<lbrakk>dims (A + B) \\<noteq> [];\n        \\<And>i Aa Ba is.\n           \\<lbrakk>i < hd (dims (A + B)); subtensor (A + B) i = Aa + Ba;\n            dims Aa = dims Ba; is \\<lhd> dims Aa\\<rbrakk>\n           \\<Longrightarrow> lookup (Aa + Ba) is =\n                             lookup Aa is + lookup Ba is;\n        dims A = dims B; is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup (A + B) is = lookup A is + lookup B is", "have \"lookup (subtensor A i + subtensor B i) is' = lookup (subtensor A i) is' + lookup (subtensor B i) is'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (subtensor A i + subtensor B i) is' =\n    lookup (subtensor A i) is' + lookup (subtensor B i) is'", "apply (rule order_step.hyps(2)[of i])"], ["proof (prove)\ngoal (4 subgoals):\n 1. i < hd (dims (A + B))\n 2. subtensor (A + B) i = subtensor A i + subtensor B i\n 3. dims (subtensor A i) = dims (subtensor B i)\n 4. is' \\<lhd> dims (subtensor A i)", "using \\<open>is = i # is'\\<close> 3 hd_conv_nth length_greater_0_conv nth_Cons_0 order_step.hyps(1) valid_index_lt"], ["proof (prove)\nusing this:\n  is = i # is'\n  is \\<lhd> dims (A + B)\n  ?xs \\<noteq> [] \\<Longrightarrow> hd ?xs = ?xs ! 0\n  (0 < length ?xs) = (?xs \\<noteq> [])\n  (?x # ?xs) ! 0 = ?x\n  dims (A + B) \\<noteq> []\n  \\<lbrakk>?is \\<lhd> ?ds; ?m < length ?ds\\<rbrakk>\n  \\<Longrightarrow> ?is ! ?m < ?ds ! ?m\n\ngoal (4 subgoals):\n 1. i < hd (dims (A + B))\n 2. subtensor (A + B) i = subtensor A i + subtensor B i\n 3. dims (subtensor A i) = dims (subtensor B i)\n 4. is' \\<lhd> dims (subtensor A i)", "apply auto[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. subtensor (A + B) i = subtensor A i + subtensor B i\n 2. dims (subtensor A i) = dims (subtensor B i)\n 3. is' \\<lhd> dims (subtensor A i)", "apply (metis \"2\" \\<open>is = i # is'\\<close> list.inject list.sel(1) list.simps(3) order_step.prems(1) subtensor_plus valid_index.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. dims (subtensor A i) = dims (subtensor B i)\n 2. is' \\<lhd> dims (subtensor A i)", "using \"1\" \\<open>is = i # is'\\<close> order_step.prems(1) plus_dim1"], ["proof (prove)\nusing this:\n  is \\<lhd> dims A\n  is = i # is'\n  dims A = dims B\n  dims ?A = dims ?B \\<Longrightarrow> dims (?A + ?B) = dims ?A\n\ngoal (2 subgoals):\n 1. dims (subtensor A i) = dims (subtensor B i)\n 2. is' \\<lhd> dims (subtensor A i)", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. is' \\<lhd> dims (subtensor A i)", "using \"1\" \\<open>is = i # is'\\<close> plus_dim1"], ["proof (prove)\nusing this:\n  is \\<lhd> dims A\n  is = i # is'\n  dims ?A = dims ?B \\<Longrightarrow> dims (?A + ?B) = dims ?A\n\ngoal (1 subgoal):\n 1. is' \\<lhd> dims (subtensor A i)", "by auto"], ["proof (state)\nthis:\n  lookup (subtensor A i + subtensor B i) is' =\n  lookup (subtensor A i) is' + lookup (subtensor B i) is'\n\ngoal (1 subgoal):\n 1. \\<And>A B is.\n       \\<lbrakk>dims (A + B) \\<noteq> [];\n        \\<And>i Aa Ba is.\n           \\<lbrakk>i < hd (dims (A + B)); subtensor (A + B) i = Aa + Ba;\n            dims Aa = dims Ba; is \\<lhd> dims Aa\\<rbrakk>\n           \\<Longrightarrow> lookup (Aa + Ba) is =\n                             lookup Aa is + lookup Ba is;\n        dims A = dims B; is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup (A + B) is = lookup A is + lookup B is", "then"], ["proof (chain)\npicking this:\n  lookup (subtensor A i + subtensor B i) is' =\n  lookup (subtensor A i) is' + lookup (subtensor B i) is'", "show ?case"], ["proof (prove)\nusing this:\n  lookup (subtensor A i + subtensor B i) is' =\n  lookup (subtensor A i) is' + lookup (subtensor B i) is'\n\ngoal (1 subgoal):\n 1. lookup (A + B) is = lookup A is + lookup B is", "using lookup_subtensor[OF 1] lookup_subtensor[OF 2] lookup_subtensor[OF 3]"], ["proof (prove)\nusing this:\n  lookup (subtensor A i + subtensor B i) is' =\n  lookup (subtensor A i) is' + lookup (subtensor B i) is'\n  lookup A is = hd (vec (fold (\\<lambda>i A. subtensor A i) is A))\n  lookup B is = hd (vec (fold (\\<lambda>i A. subtensor A i) is B))\n  lookup (A + B) is =\n  hd (vec (fold (\\<lambda>i A. subtensor A i) is (A + B)))\n\ngoal (1 subgoal):\n 1. lookup (A + B) is = lookup A is + lookup B is", "using order_step \\<open>is = i # is'\\<close> plus_dim1 lookup_subtensor1 list.sel(1) subtensor_plus valid_index_dimsE"], ["proof (prove)\nusing this:\n  lookup (subtensor A i + subtensor B i) is' =\n  lookup (subtensor A i) is' + lookup (subtensor B i) is'\n  lookup A is = hd (vec (fold (\\<lambda>i A. subtensor A i) is A))\n  lookup B is = hd (vec (fold (\\<lambda>i A. subtensor A i) is B))\n  lookup (A + B) is =\n  hd (vec (fold (\\<lambda>i A. subtensor A i) is (A + B)))\n  dims (A + B) \\<noteq> []\n  \\<lbrakk>?i < hd (dims (A + B)); subtensor (A + B) ?i = ?A + ?B;\n   dims ?A = dims ?B; ?is \\<lhd> dims ?A\\<rbrakk>\n  \\<Longrightarrow> lookup (?A + ?B) ?is = lookup ?A ?is + lookup ?B ?is\n  dims A = dims B\n  is \\<lhd> dims A\n  is = i # is'\n  dims ?A = dims ?B \\<Longrightarrow> dims (?A + ?B) = dims ?A\n  ?i # ?is \\<lhd> dims ?A \\<Longrightarrow>\n  lookup (subtensor ?A ?i) ?is = lookup ?A (?i # ?is)\n  hd (?x21.0 # ?x22.0) = ?x21.0\n  \\<lbrakk>?i < hd (dims ?A); dims ?A = dims ?B;\n   dims ?A \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> subtensor (?A + ?B) ?i =\n                    subtensor ?A ?i + subtensor ?B ?i\n  \\<lbrakk>?is \\<lhd> dims ?A;\n   \\<lbrakk>?is = []; dims ?A = []\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<And>is ds i d.\n      \\<lbrakk>?is = i # is; dims ?A = d # ds; is \\<lhd> ds; i < d\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. lookup (A + B) is = lookup A is + lookup B is", "by metis"], ["proof (state)\nthis:\n  lookup (A + B) is = lookup A is + lookup B is\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma plus_assoc:\nassumes dimsA:\"dims A = ds\" and dimsB:\"dims B = ds\" and dimsC:\"dims C = ds\"\nshows \"(A + B) + C = A + (B + C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A + B + C = A + (B + C)", "by (rule tensor_lookup_eqI; simp add: dimsA dimsB dimsC add.assoc)+"], ["", "lemma tensor_comm[simp]:\nfixes A::\"'a::ab_semigroup_add tensor\"\nshows \"A + B = B + A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A + B = B + A", "proof (cases \"dims A = dims B\")"], ["proof (state)\ngoal (2 subgoals):\n 1. dims A = dims B \\<Longrightarrow> A + B = B + A\n 2. dims A \\<noteq> dims B \\<Longrightarrow> A + B = B + A", "case True"], ["proof (state)\nthis:\n  dims A = dims B\n\ngoal (2 subgoals):\n 1. dims A = dims B \\<Longrightarrow> A + B = B + A\n 2. dims A \\<noteq> dims B \\<Longrightarrow> A + B = B + A", "then"], ["proof (chain)\npicking this:\n  dims A = dims B", "show ?thesis"], ["proof (prove)\nusing this:\n  dims A = dims B\n\ngoal (1 subgoal):\n 1. A + B = B + A", "unfolding plus_def plus_base_def"], ["proof (prove)\nusing this:\n  dims A = dims B\n\ngoal (1 subgoal):\n 1. (if dims A = dims B\n     then tensor_from_vec (dims A) (vec_plus (vec A) (vec B))\n     else undefined) =\n    (if dims B = dims A\n     then tensor_from_vec (dims B) (vec_plus (vec B) (vec A))\n     else undefined)", "using add.commute lookup_plus[OF True] plus_dim1[OF True] tensor_lookup_eqI[OF True] vec_plus[OF True]"], ["proof (prove)\nusing this:\n  dims A = dims B\n  ?a + ?b = ?b + ?a\n  ?is \\<lhd> dims A \\<Longrightarrow>\n  lookup (A + B) ?is = lookup A ?is + lookup B ?is\n  dims (A + B) = dims A\n  (\\<And>is.\n      is \\<lhd> dims A \\<Longrightarrow>\n      lookup A is = lookup B is) \\<Longrightarrow>\n  A = B\n  vec (A + B) = vec_plus (vec A) (vec B)\n\ngoal (1 subgoal):\n 1. (if dims A = dims B\n     then tensor_from_vec (dims A) (vec_plus (vec A) (vec B))\n     else undefined) =\n    (if dims B = dims A\n     then tensor_from_vec (dims B) (vec_plus (vec B) (vec A))\n     else undefined)", "by (metis lookup_plus plus_dim1 tensor_lookup_eqI vec_plus)"], ["proof (state)\nthis:\n  A + B = B + A\n\ngoal (1 subgoal):\n 1. dims A \\<noteq> dims B \\<Longrightarrow> A + B = B + A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. dims A \\<noteq> dims B \\<Longrightarrow> A + B = B + A", "case False"], ["proof (state)\nthis:\n  dims A \\<noteq> dims B\n\ngoal (1 subgoal):\n 1. dims A \\<noteq> dims B \\<Longrightarrow> A + B = B + A", "then"], ["proof (chain)\npicking this:\n  dims A \\<noteq> dims B", "show ?thesis"], ["proof (prove)\nusing this:\n  dims A \\<noteq> dims B\n\ngoal (1 subgoal):\n 1. A + B = B + A", "unfolding plus_def plus_base_def"], ["proof (prove)\nusing this:\n  dims A \\<noteq> dims B\n\ngoal (1 subgoal):\n 1. (if dims A = dims B\n     then tensor_from_vec (dims A) (vec_plus (vec A) (vec B))\n     else undefined) =\n    (if dims B = dims A\n     then tensor_from_vec (dims B) (vec_plus (vec B) (vec A))\n     else undefined)", "by simp"], ["proof (state)\nthis:\n  A + B = B + A\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"vec0 n = replicate n 0\""], ["", "definition tensor0::\"nat list \\<Rightarrow> 'a::zero tensor\" where\n\"tensor0 d = tensor_from_vec d (vec0 (prod_list d))\""], ["", "lemma dims_tensor0[simp]: \"dims (tensor0 d) = d\"\nand   vec_tensor0[simp]:  \"vec (tensor0 d) = vec0 (prod_list d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dims (tensor0 d) = d &&& vec (tensor0 d) = vec0 (prod_list d)", "unfolding tensor0_def vec0_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dims (tensor_from_vec d (replicate (prod_list d) (0::'a))) = d &&&\n    vec (tensor_from_vec d (replicate (prod_list d) (0::'b))) =\n    replicate (prod_list d) (0::'b)", "by simp_all"], ["", "lemma lookup_is_in_vec: \"is \\<lhd> (dims A) \\<Longrightarrow> lookup A is \\<in> set (vec A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is \\<lhd> dims A \\<Longrightarrow> lookup A is \\<in> set (vec A)", "proof (induction arbitrary:\"is\" rule:subtensor_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A is.\n       \\<lbrakk>dims A = []; is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup A is \\<in> set (vec A)\n 2. \\<And>A is.\n       \\<lbrakk>dims A \\<noteq> [];\n        \\<And>i is.\n           \\<lbrakk>i < hd (dims A); is \\<lhd> dims (subtensor A i)\\<rbrakk>\n           \\<Longrightarrow> lookup (subtensor A i) is\n                             \\<in> set (vec (subtensor A i));\n        is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup A is \\<in> set (vec A)", "case order_0"], ["proof (state)\nthis:\n  dims A_ = []\n  is \\<lhd> dims A_\n\ngoal (2 subgoals):\n 1. \\<And>A is.\n       \\<lbrakk>dims A = []; is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup A is \\<in> set (vec A)\n 2. \\<And>A is.\n       \\<lbrakk>dims A \\<noteq> [];\n        \\<And>i is.\n           \\<lbrakk>i < hd (dims A); is \\<lhd> dims (subtensor A i)\\<rbrakk>\n           \\<Longrightarrow> lookup (subtensor A i) is\n                             \\<in> set (vec (subtensor A i));\n        is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup A is \\<in> set (vec A)", "then"], ["proof (chain)\npicking this:\n  dims A_ = []\n  is \\<lhd> dims A_", "show ?case"], ["proof (prove)\nusing this:\n  dims A_ = []\n  is \\<lhd> dims A_\n\ngoal (1 subgoal):\n 1. lookup A_ is \\<in> set (vec A_)", "unfolding lookup_def"], ["proof (prove)\nusing this:\n  dims A_ = []\n  is \\<lhd> dims A_\n\ngoal (1 subgoal):\n 1. lookup_base (dims A_) (vec A_) is \\<in> set (vec A_)", "using lookup_base_Nil"], ["proof (prove)\nusing this:\n  dims A_ = []\n  is \\<lhd> dims A_\n  lookup_base [] ?v [] = hd ?v\n\ngoal (1 subgoal):\n 1. lookup_base (dims A_) (vec A_) is \\<in> set (vec A_)", "by (metis length_0_conv length_vec list.set_sel(1) prod_list.Nil valid_index_length zero_neq_one)"], ["proof (state)\nthis:\n  lookup A_ is \\<in> set (vec A_)\n\ngoal (1 subgoal):\n 1. \\<And>A is.\n       \\<lbrakk>dims A \\<noteq> [];\n        \\<And>i is.\n           \\<lbrakk>i < hd (dims A); is \\<lhd> dims (subtensor A i)\\<rbrakk>\n           \\<Longrightarrow> lookup (subtensor A i) is\n                             \\<in> set (vec (subtensor A i));\n        is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup A is \\<in> set (vec A)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A is.\n       \\<lbrakk>dims A \\<noteq> [];\n        \\<And>i is.\n           \\<lbrakk>i < hd (dims A); is \\<lhd> dims (subtensor A i)\\<rbrakk>\n           \\<Longrightarrow> lookup (subtensor A i) is\n                             \\<in> set (vec (subtensor A i));\n        is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup A is \\<in> set (vec A)", "case (order_step A \"is\")"], ["proof (state)\nthis:\n  dims A \\<noteq> []\n  \\<lbrakk>?i < hd (dims A); ?is \\<lhd> dims (subtensor A ?i)\\<rbrakk>\n  \\<Longrightarrow> lookup (subtensor A ?i) ?is\n                    \\<in> set (vec (subtensor A ?i))\n  is \\<lhd> dims A\n\ngoal (1 subgoal):\n 1. \\<And>A is.\n       \\<lbrakk>dims A \\<noteq> [];\n        \\<And>i is.\n           \\<lbrakk>i < hd (dims A); is \\<lhd> dims (subtensor A i)\\<rbrakk>\n           \\<Longrightarrow> lookup (subtensor A i) is\n                             \\<in> set (vec (subtensor A i));\n        is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup A is \\<in> set (vec A)", "then"], ["proof (chain)\npicking this:\n  dims A \\<noteq> []\n  \\<lbrakk>?i < hd (dims A); ?is \\<lhd> dims (subtensor A ?i)\\<rbrakk>\n  \\<Longrightarrow> lookup (subtensor A ?i) ?is\n                    \\<in> set (vec (subtensor A ?i))\n  is \\<lhd> dims A", "obtain i is' where \"is = i # is'\""], ["proof (prove)\nusing this:\n  dims A \\<noteq> []\n  \\<lbrakk>?i < hd (dims A); ?is \\<lhd> dims (subtensor A ?i)\\<rbrakk>\n  \\<Longrightarrow> lookup (subtensor A ?i) ?is\n                    \\<in> set (vec (subtensor A ?i))\n  is \\<lhd> dims A\n\ngoal (1 subgoal):\n 1. (\\<And>i is'. is = i # is' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using valid_index_dimsE"], ["proof (prove)\nusing this:\n  dims A \\<noteq> []\n  \\<lbrakk>?i < hd (dims A); ?is \\<lhd> dims (subtensor A ?i)\\<rbrakk>\n  \\<Longrightarrow> lookup (subtensor A ?i) ?is\n                    \\<in> set (vec (subtensor A ?i))\n  is \\<lhd> dims A\n  \\<lbrakk>?is \\<lhd> dims ?A;\n   \\<lbrakk>?is = []; dims ?A = []\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<And>is ds i d.\n      \\<lbrakk>?is = i # is; dims ?A = d # ds; is \\<lhd> ds; i < d\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (\\<And>i is'. is = i # is' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  is = i # is'\n\ngoal (1 subgoal):\n 1. \\<And>A is.\n       \\<lbrakk>dims A \\<noteq> [];\n        \\<And>i is.\n           \\<lbrakk>i < hd (dims A); is \\<lhd> dims (subtensor A i)\\<rbrakk>\n           \\<Longrightarrow> lookup (subtensor A i) is\n                             \\<in> set (vec (subtensor A i));\n        is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup A is \\<in> set (vec A)", "then"], ["proof (chain)\npicking this:\n  is = i # is'", "have 1:\"i < hd (dims A)\""], ["proof (prove)\nusing this:\n  is = i # is'\n\ngoal (1 subgoal):\n 1. i < hd (dims A)", "using dims_def order_step.prems"], ["proof (prove)\nusing this:\n  is = i # is'\n  dims ?A = fst (Rep_tensor ?A)\n  is \\<lhd> dims A\n\ngoal (1 subgoal):\n 1. i < hd (dims A)", "by auto"], ["proof (state)\nthis:\n  i < hd (dims A)\n\ngoal (1 subgoal):\n 1. \\<And>A is.\n       \\<lbrakk>dims A \\<noteq> [];\n        \\<And>i is.\n           \\<lbrakk>i < hd (dims A); is \\<lhd> dims (subtensor A i)\\<rbrakk>\n           \\<Longrightarrow> lookup (subtensor A i) is\n                             \\<in> set (vec (subtensor A i));\n        is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup A is \\<in> set (vec A)", "have 2:\"is' \\<lhd> dims (subtensor A i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is' \\<lhd> dims (subtensor A i)", "using \\<open>is = i # is'\\<close> dims_subtensor order_step.prems"], ["proof (prove)\nusing this:\n  is = i # is'\n  \\<lbrakk>dims ?A \\<noteq> []; ?i < hd (dims ?A)\\<rbrakk>\n  \\<Longrightarrow> dims (subtensor ?A ?i) = tl (dims ?A)\n  is \\<lhd> dims A\n\ngoal (1 subgoal):\n 1. is' \\<lhd> dims (subtensor A i)", "by auto"], ["proof (state)\nthis:\n  is' \\<lhd> dims (subtensor A i)\n\ngoal (1 subgoal):\n 1. \\<And>A is.\n       \\<lbrakk>dims A \\<noteq> [];\n        \\<And>i is.\n           \\<lbrakk>i < hd (dims A); is \\<lhd> dims (subtensor A i)\\<rbrakk>\n           \\<Longrightarrow> lookup (subtensor A i) is\n                             \\<in> set (vec (subtensor A i));\n        is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup A is \\<in> set (vec A)", "have \"lookup A is \\<in> set (Tensor.vec (subtensor A i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup A is \\<in> set (vec (subtensor A i))", "using order_step.IH [OF 1 2] lookup_subtensor1 \\<open>is = i # is'\\<close> order_step.prems"], ["proof (prove)\nusing this:\n  lookup (subtensor A i) is' \\<in> set (vec (subtensor A i))\n  ?i # ?is \\<lhd> dims ?A \\<Longrightarrow>\n  lookup (subtensor ?A ?i) ?is = lookup ?A (?i # ?is)\n  is = i # is'\n  is \\<lhd> dims A\n\ngoal (1 subgoal):\n 1. lookup A is \\<in> set (vec (subtensor A i))", "by auto"], ["proof (state)\nthis:\n  lookup A is \\<in> set (vec (subtensor A i))\n\ngoal (1 subgoal):\n 1. \\<And>A is.\n       \\<lbrakk>dims A \\<noteq> [];\n        \\<And>i is.\n           \\<lbrakk>i < hd (dims A); is \\<lhd> dims (subtensor A i)\\<rbrakk>\n           \\<Longrightarrow> lookup (subtensor A i) is\n                             \\<in> set (vec (subtensor A i));\n        is \\<lhd> dims A\\<rbrakk>\n       \\<Longrightarrow> lookup A is \\<in> set (vec A)", "then"], ["proof (chain)\npicking this:\n  lookup A is \\<in> set (vec (subtensor A i))", "show ?case"], ["proof (prove)\nusing this:\n  lookup A is \\<in> set (vec (subtensor A i))\n\ngoal (1 subgoal):\n 1. lookup A is \\<in> set (vec A)", "using vec_subtensor fixed_length_sublist_def"], ["proof (prove)\nusing this:\n  lookup A is \\<in> set (vec (subtensor A i))\n  \\<lbrakk>dims ?A \\<noteq> []; ?i < hd (dims ?A)\\<rbrakk>\n  \\<Longrightarrow> vec (subtensor ?A ?i) =\n                    fixed_length_sublist (vec ?A) (prod_list (tl (dims ?A)))\n                     ?i\n  fixed_length_sublist ?xs ?l ?i = take ?l (drop (?l * ?i) ?xs)\n\ngoal (1 subgoal):\n 1. lookup A is \\<in> set (vec A)", "by (metis \"1\" in_set_dropD in_set_takeD order_step.hyps)"], ["proof (state)\nthis:\n  lookup A is \\<in> set (vec A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lookup_tensor0:\nassumes \"is \\<lhd> ds\"\nshows \"lookup (tensor0 ds) is = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (tensor0 ds) is = (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lookup (tensor0 ds) is = (0::'a)", "have \"lookup (tensor0 ds) is \\<in> set (vec (tensor0 ds))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (tensor0 ds) is \\<in> set (vec (tensor0 ds))", "using lookup_is_in_vec assms"], ["proof (prove)\nusing this:\n  ?is \\<lhd> dims ?A \\<Longrightarrow> lookup ?A ?is \\<in> set (vec ?A)\n  is \\<lhd> ds\n\ngoal (1 subgoal):\n 1. lookup (tensor0 ds) is \\<in> set (vec (tensor0 ds))", "by (metis dims_tensor0)"], ["proof (state)\nthis:\n  lookup (tensor0 ds) is \\<in> set (vec (tensor0 ds))\n\ngoal (1 subgoal):\n 1. lookup (tensor0 ds) is = (0::'a)", "moreover"], ["proof (state)\nthis:\n  lookup (tensor0 ds) is \\<in> set (vec (tensor0 ds))\n\ngoal (1 subgoal):\n 1. lookup (tensor0 ds) is = (0::'a)", "have \"set (vec (tensor0 ds)) \\<subseteq> {0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (vec (tensor0 ds)) \\<subseteq> {0::'b}", "unfolding vec_tensor0 vec0_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (replicate (prod_list ds) (0::'b)) \\<subseteq> {0::'b}", "by (metis in_set_replicate singleton_iff subsetI)"], ["proof (state)\nthis:\n  set (vec (tensor0 ds)) \\<subseteq> {0::?'b2}\n\ngoal (1 subgoal):\n 1. lookup (tensor0 ds) is = (0::'a)", "ultimately"], ["proof (chain)\npicking this:\n  lookup (tensor0 ds) is \\<in> set (vec (tensor0 ds))\n  set (vec (tensor0 ds)) \\<subseteq> {0::?'b2}", "show ?thesis"], ["proof (prove)\nusing this:\n  lookup (tensor0 ds) is \\<in> set (vec (tensor0 ds))\n  set (vec (tensor0 ds)) \\<subseteq> {0::?'b2}\n\ngoal (1 subgoal):\n 1. lookup (tensor0 ds) is = (0::'a)", "by auto"], ["proof (state)\nthis:\n  lookup (tensor0 ds) is = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma\nfixes A::\"'a::monoid_add tensor\"\nshows tensor_add_0_right[simp]: \"A + tensor0 (dims A) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A + tensor0 (dims A) = A", "unfolding plus_def plus_base_def dims_tensor0"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if dims A = dims A\n     then tensor_from_vec (dims A)\n           (vec_plus (vec A) (vec (tensor0 (dims A))))\n     else undefined) =\n    A", "apply (simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_from_vec (dims A)\n     (vec_plus (vec A) (vec0 (prod_list (dims A)))) =\n    A", "apply (rule tensor_lookup_eqI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. dims\n     (tensor_from_vec (dims A)\n       (vec_plus (vec A) (vec0 (prod_list (dims A))))) =\n    dims A\n 2. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensor_from_vec (dims A)\n          (vec_plus (vec A) (vec0 (prod_list (dims A))))) \\<Longrightarrow>\n       lookup\n        (tensor_from_vec (dims A)\n          (vec_plus (vec A) (vec0 (prod_list (dims A)))))\n        is =\n       lookup A is", "apply (metis (no_types, lifting)  dims_tensor dims_tensor0 length_vec plus_dim2 vec_plus vec_tensor0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensor_from_vec (dims A)\n          (vec_plus (vec A) (vec0 (prod_list (dims A))))) \\<Longrightarrow>\n       lookup\n        (tensor_from_vec (dims A)\n          (vec_plus (vec A) (vec0 (prod_list (dims A)))))\n        is =\n       lookup A is", "by (metis add.right_neutral dims_tensor0 lookup_plus lookup_tensor0 plus_dim2 tensor_from_vec_simp vec_plus vec_tensor0)"], ["", "lemma\nfixes A::\"'a::monoid_add tensor\"\nshows tensor_add_0_left[simp]:  \"tensor0 (dims A) + A = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor0 (dims A) + A = A", "unfolding plus_def plus_base_def dims_tensor0"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if dims A = dims A\n     then tensor_from_vec (dims A)\n           (vec_plus (vec (tensor0 (dims A))) (vec A))\n     else undefined) =\n    A", "apply (simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_from_vec (dims A)\n     (vec_plus (vec0 (prod_list (dims A))) (vec A)) =\n    A", "apply (rule tensor_lookup_eqI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. dims\n     (tensor_from_vec (dims A)\n       (vec_plus (vec0 (prod_list (dims A))) (vec A))) =\n    dims A\n 2. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensor_from_vec (dims A)\n          (vec_plus (vec0 (prod_list (dims A))) (vec A))) \\<Longrightarrow>\n       lookup\n        (tensor_from_vec (dims A)\n          (vec_plus (vec0 (prod_list (dims A))) (vec A)))\n        is =\n       lookup A is", "apply (metis (no_types, lifting)  dims_tensor dims_tensor0 length_vec plus_dim2 vec_plus vec_tensor0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd>\n       dims\n        (tensor_from_vec (dims A)\n          (vec_plus (vec0 (prod_list (dims A))) (vec A))) \\<Longrightarrow>\n       lookup\n        (tensor_from_vec (dims A)\n          (vec_plus (vec0 (prod_list (dims A))) (vec A)))\n        is =\n       lookup A is", "by (metis add.left_neutral dims_tensor0 lookup_plus lookup_tensor0 plus_dim2 tensor_from_vec_simp vec_plus vec_tensor0)"], ["", "definition listsum::\"nat list \\<Rightarrow> 'a::monoid_add tensor list \\<Rightarrow> 'a tensor\" where\n\"listsum ds As = foldr (+) As (tensor0 ds)\""], ["", "definition listsum'::\"'a::monoid_add tensor list \\<Rightarrow> 'a tensor\" where\n\"listsum' As = listsum (dims (hd As)) As\""], ["", "lemma listsum_Nil: \"listsum ds [] = tensor0 ds\""], ["proof (prove)\ngoal (1 subgoal):\n 1. listsum ds [] = tensor0 ds", "by (simp add: Tensor_Plus.listsum_def)"], ["", "lemma listsum_one: \"listsum (dims A) [A] = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. listsum (dims A) [A] = A", "unfolding listsum_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. foldr (+) [A] (tensor0 (dims A)) = A", "by simp"], ["", "lemma listsum_Cons: \"listsum ds (A # As) = A + listsum ds As\""], ["proof (prove)\ngoal (1 subgoal):\n 1. listsum ds (A # As) = A + listsum ds As", "unfolding listsum_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. foldr (+) (A # As) (tensor0 ds) = A + foldr (+) As (tensor0 ds)", "by auto"], ["", "lemma listsum_dims:\nassumes \"\\<And>A. A\\<in>set As \\<Longrightarrow> dims A = ds\"\nshows \"dims (listsum ds As) = ds\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dims (listsum ds As) = ds", "using assms"], ["proof (prove)\nusing this:\n  ?A \\<in> set As \\<Longrightarrow> dims ?A = ds\n\ngoal (1 subgoal):\n 1. dims (listsum ds As) = ds", "proof (induction As)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>A.\n        A \\<in> set [] \\<Longrightarrow> dims A = ds) \\<Longrightarrow>\n    dims (listsum ds []) = ds\n 2. \\<And>a As.\n       \\<lbrakk>(\\<And>A.\n                    A \\<in> set As \\<Longrightarrow>\n                    dims A = ds) \\<Longrightarrow>\n                dims (listsum ds As) = ds;\n        \\<And>A. A \\<in> set (a # As) \\<Longrightarrow> dims A = ds\\<rbrakk>\n       \\<Longrightarrow> dims (listsum ds (a # As)) = ds", "case Nil"], ["proof (state)\nthis:\n  ?A \\<in> set [] \\<Longrightarrow> dims ?A = ds\n\ngoal (2 subgoals):\n 1. (\\<And>A.\n        A \\<in> set [] \\<Longrightarrow> dims A = ds) \\<Longrightarrow>\n    dims (listsum ds []) = ds\n 2. \\<And>a As.\n       \\<lbrakk>(\\<And>A.\n                    A \\<in> set As \\<Longrightarrow>\n                    dims A = ds) \\<Longrightarrow>\n                dims (listsum ds As) = ds;\n        \\<And>A. A \\<in> set (a # As) \\<Longrightarrow> dims A = ds\\<rbrakk>\n       \\<Longrightarrow> dims (listsum ds (a # As)) = ds", "then"], ["proof (chain)\npicking this:\n  ?A \\<in> set [] \\<Longrightarrow> dims ?A = ds", "show ?case"], ["proof (prove)\nusing this:\n  ?A \\<in> set [] \\<Longrightarrow> dims ?A = ds\n\ngoal (1 subgoal):\n 1. dims (listsum ds []) = ds", "by (metis dims_tensor0 listsum_Nil)"], ["proof (state)\nthis:\n  dims (listsum ds []) = ds\n\ngoal (1 subgoal):\n 1. \\<And>a As.\n       \\<lbrakk>(\\<And>A.\n                    A \\<in> set As \\<Longrightarrow>\n                    dims A = ds) \\<Longrightarrow>\n                dims (listsum ds As) = ds;\n        \\<And>A. A \\<in> set (a # As) \\<Longrightarrow> dims A = ds\\<rbrakk>\n       \\<Longrightarrow> dims (listsum ds (a # As)) = ds", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a As.\n       \\<lbrakk>(\\<And>A.\n                    A \\<in> set As \\<Longrightarrow>\n                    dims A = ds) \\<Longrightarrow>\n                dims (listsum ds As) = ds;\n        \\<And>A. A \\<in> set (a # As) \\<Longrightarrow> dims A = ds\\<rbrakk>\n       \\<Longrightarrow> dims (listsum ds (a # As)) = ds", "case (Cons A As)"], ["proof (state)\nthis:\n  (\\<And>A. A \\<in> set As \\<Longrightarrow> dims A = ds) \\<Longrightarrow>\n  dims (listsum ds As) = ds\n  ?A \\<in> set (A # As) \\<Longrightarrow> dims ?A = ds\n\ngoal (1 subgoal):\n 1. \\<And>a As.\n       \\<lbrakk>(\\<And>A.\n                    A \\<in> set As \\<Longrightarrow>\n                    dims A = ds) \\<Longrightarrow>\n                dims (listsum ds As) = ds;\n        \\<And>A. A \\<in> set (a # As) \\<Longrightarrow> dims A = ds\\<rbrakk>\n       \\<Longrightarrow> dims (listsum ds (a # As)) = ds", "then"], ["proof (chain)\npicking this:\n  (\\<And>A. A \\<in> set As \\<Longrightarrow> dims A = ds) \\<Longrightarrow>\n  dims (listsum ds As) = ds\n  ?A \\<in> set (A # As) \\<Longrightarrow> dims ?A = ds", "show ?case"], ["proof (prove)\nusing this:\n  (\\<And>A. A \\<in> set As \\<Longrightarrow> dims A = ds) \\<Longrightarrow>\n  dims (listsum ds As) = ds\n  ?A \\<in> set (A # As) \\<Longrightarrow> dims ?A = ds\n\ngoal (1 subgoal):\n 1. dims (listsum ds (A # As)) = ds", "using listsum_Cons"], ["proof (prove)\nusing this:\n  (\\<And>A. A \\<in> set As \\<Longrightarrow> dims A = ds) \\<Longrightarrow>\n  dims (listsum ds As) = ds\n  ?A \\<in> set (A # As) \\<Longrightarrow> dims ?A = ds\n  listsum ?ds (?A # ?As) = ?A + listsum ?ds ?As\n\ngoal (1 subgoal):\n 1. dims (listsum ds (A # As)) = ds", "by (metis list.set_intros(1) list.set_intros(2) plus_dim2)"], ["proof (state)\nthis:\n  dims (listsum ds (A # As)) = ds\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subtensor0:\nassumes \"ds \\<noteq> []\" and \"i<hd ds\"\nshows \"subtensor (tensor0 ds) i = tensor0 (tl ds)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subtensor (tensor0 ds) i = tensor0 (tl ds)", "proof (rule tensor_lookup_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. dims (subtensor (tensor0 ds) i) = dims (tensor0 (tl ds))\n 2. \\<And>is.\n       is \\<lhd> dims (subtensor (tensor0 ds) i) \\<Longrightarrow>\n       lookup (subtensor (tensor0 ds) i) is = lookup (tensor0 (tl ds)) is", "show 1:\"dims (subtensor (tensor0 ds) i) = dims (tensor0 (tl ds))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dims (subtensor (tensor0 ds) i) = dims (tensor0 (tl ds))", "by (simp add: assms(1) assms(2))"], ["proof (state)\nthis:\n  dims (subtensor (tensor0 ds) i) = dims (tensor0 (tl ds))\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd> dims (subtensor (tensor0 ds) i) \\<Longrightarrow>\n       lookup (subtensor (tensor0 ds) i) is = lookup (tensor0 (tl ds)) is", "fix \"is\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd> dims (subtensor (tensor0 ds) i) \\<Longrightarrow>\n       lookup (subtensor (tensor0 ds) i) is = lookup (tensor0 (tl ds)) is", "assume \"is \\<lhd> dims (subtensor (tensor0 ds) i)\""], ["proof (state)\nthis:\n  is \\<lhd> dims (subtensor (tensor0 ds) i)\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd> dims (subtensor (tensor0 ds) i) \\<Longrightarrow>\n       lookup (subtensor (tensor0 ds) i) is = lookup (tensor0 (tl ds)) is", "then"], ["proof (chain)\npicking this:\n  is \\<lhd> dims (subtensor (tensor0 ds) i)", "have \"i # is \\<lhd> dims (tensor0 ds)\""], ["proof (prove)\nusing this:\n  is \\<lhd> dims (subtensor (tensor0 ds) i)\n\ngoal (1 subgoal):\n 1. i # is \\<lhd> dims (tensor0 ds)", "using assms(1) assms(2) valid_index.Cons"], ["proof (prove)\nusing this:\n  is \\<lhd> dims (subtensor (tensor0 ds) i)\n  ds \\<noteq> []\n  i < hd ds\n  \\<lbrakk>?is \\<lhd> ?ds; ?i < ?d\\<rbrakk>\n  \\<Longrightarrow> ?i # ?is \\<lhd> ?d # ?ds\n\ngoal (1 subgoal):\n 1. i # is \\<lhd> dims (tensor0 ds)", "by fastforce"], ["proof (state)\nthis:\n  i # is \\<lhd> dims (tensor0 ds)\n\ngoal (1 subgoal):\n 1. \\<And>is.\n       is \\<lhd> dims (subtensor (tensor0 ds) i) \\<Longrightarrow>\n       lookup (subtensor (tensor0 ds) i) is = lookup (tensor0 (tl ds)) is", "then"], ["proof (chain)\npicking this:\n  i # is \\<lhd> dims (tensor0 ds)", "show \"lookup (subtensor (tensor0 ds) i) is = lookup (tensor0 (tl ds)) is\""], ["proof (prove)\nusing this:\n  i # is \\<lhd> dims (tensor0 ds)\n\ngoal (1 subgoal):\n 1. lookup (subtensor (tensor0 ds) i) is = lookup (tensor0 (tl ds)) is", "using lookup_subtensor1  1 \\<open>is \\<lhd> dims (subtensor (tensor0 ds) i)\\<close> dims_tensor0 lookup_tensor0"], ["proof (prove)\nusing this:\n  i # is \\<lhd> dims (tensor0 ds)\n  ?i # ?is \\<lhd> dims ?A \\<Longrightarrow>\n  lookup (subtensor ?A ?i) ?is = lookup ?A (?i # ?is)\n  dims (subtensor (tensor0 ds) i) = dims (tensor0 (tl ds))\n  is \\<lhd> dims (subtensor (tensor0 ds) i)\n  dims (tensor0 ?d) = ?d\n  ?is \\<lhd> ?ds \\<Longrightarrow> lookup (tensor0 ?ds) ?is = (0::?'a)\n\ngoal (1 subgoal):\n 1. lookup (subtensor (tensor0 ds) i) is = lookup (tensor0 (tl ds)) is", "by metis"], ["proof (state)\nthis:\n  lookup (subtensor (tensor0 ds) i) is = lookup (tensor0 (tl ds)) is\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subtensor_listsum:\nassumes \"\\<And>A. A\\<in>set As \\<Longrightarrow> dims A = ds\"\nand \"ds \\<noteq> []\" and \"i<hd ds\"\nshows \"subtensor (listsum ds As) i = listsum (tl ds) (map (\\<lambda>A. subtensor A i) As)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subtensor (listsum ds As) i =\n    listsum (tl ds) (map (\\<lambda>A. subtensor A i) As)", "using assms"], ["proof (prove)\nusing this:\n  ?A \\<in> set As \\<Longrightarrow> dims ?A = ds\n  ds \\<noteq> []\n  i < hd ds\n\ngoal (1 subgoal):\n 1. subtensor (listsum ds As) i =\n    listsum (tl ds) (map (\\<lambda>A. subtensor A i) As)", "proof (induction As)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>A. A \\<in> set [] \\<Longrightarrow> dims A = ds;\n     ds \\<noteq> []; i < hd ds\\<rbrakk>\n    \\<Longrightarrow> subtensor (listsum ds []) i =\n                      listsum (tl ds) (map (\\<lambda>A. subtensor A i) [])\n 2. \\<And>a As.\n       \\<lbrakk>\\<lbrakk>\\<And>A.\n                            A \\<in> set As \\<Longrightarrow> dims A = ds;\n                 ds \\<noteq> []; i < hd ds\\<rbrakk>\n                \\<Longrightarrow> subtensor (listsum ds As) i =\n                                  listsum (tl ds)\n                                   (map (\\<lambda>A. subtensor A i) As);\n        \\<And>A. A \\<in> set (a # As) \\<Longrightarrow> dims A = ds;\n        ds \\<noteq> []; i < hd ds\\<rbrakk>\n       \\<Longrightarrow> subtensor (listsum ds (a # As)) i =\n                         listsum (tl ds)\n                          (map (\\<lambda>A. subtensor A i) (a # As))", "case Nil"], ["proof (state)\nthis:\n  ?A \\<in> set [] \\<Longrightarrow> dims ?A = ds\n  ds \\<noteq> []\n  i < hd ds\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>A. A \\<in> set [] \\<Longrightarrow> dims A = ds;\n     ds \\<noteq> []; i < hd ds\\<rbrakk>\n    \\<Longrightarrow> subtensor (listsum ds []) i =\n                      listsum (tl ds) (map (\\<lambda>A. subtensor A i) [])\n 2. \\<And>a As.\n       \\<lbrakk>\\<lbrakk>\\<And>A.\n                            A \\<in> set As \\<Longrightarrow> dims A = ds;\n                 ds \\<noteq> []; i < hd ds\\<rbrakk>\n                \\<Longrightarrow> subtensor (listsum ds As) i =\n                                  listsum (tl ds)\n                                   (map (\\<lambda>A. subtensor A i) As);\n        \\<And>A. A \\<in> set (a # As) \\<Longrightarrow> dims A = ds;\n        ds \\<noteq> []; i < hd ds\\<rbrakk>\n       \\<Longrightarrow> subtensor (listsum ds (a # As)) i =\n                         listsum (tl ds)\n                          (map (\\<lambda>A. subtensor A i) (a # As))", "then"], ["proof (chain)\npicking this:\n  ?A \\<in> set [] \\<Longrightarrow> dims ?A = ds\n  ds \\<noteq> []\n  i < hd ds", "show ?case"], ["proof (prove)\nusing this:\n  ?A \\<in> set [] \\<Longrightarrow> dims ?A = ds\n  ds \\<noteq> []\n  i < hd ds\n\ngoal (1 subgoal):\n 1. subtensor (listsum ds []) i =\n    listsum (tl ds) (map (\\<lambda>A. subtensor A i) [])", "using lookup_tensor0 assms(2) assms(3) subtensor0"], ["proof (prove)\nusing this:\n  ?A \\<in> set [] \\<Longrightarrow> dims ?A = ds\n  ds \\<noteq> []\n  i < hd ds\n  ?is \\<lhd> ?ds \\<Longrightarrow> lookup (tensor0 ?ds) ?is = (0::?'a)\n  ds \\<noteq> []\n  i < hd ds\n  \\<lbrakk>?ds \\<noteq> []; ?i < hd ?ds\\<rbrakk>\n  \\<Longrightarrow> subtensor (tensor0 ?ds) ?i = tensor0 (tl ?ds)\n\ngoal (1 subgoal):\n 1. subtensor (listsum ds []) i =\n    listsum (tl ds) (map (\\<lambda>A. subtensor A i) [])", "by (auto simp add: listsum_Nil)"], ["proof (state)\nthis:\n  subtensor (listsum ds []) i =\n  listsum (tl ds) (map (\\<lambda>A. subtensor A i) [])\n\ngoal (1 subgoal):\n 1. \\<And>a As.\n       \\<lbrakk>\\<lbrakk>\\<And>A.\n                            A \\<in> set As \\<Longrightarrow> dims A = ds;\n                 ds \\<noteq> []; i < hd ds\\<rbrakk>\n                \\<Longrightarrow> subtensor (listsum ds As) i =\n                                  listsum (tl ds)\n                                   (map (\\<lambda>A. subtensor A i) As);\n        \\<And>A. A \\<in> set (a # As) \\<Longrightarrow> dims A = ds;\n        ds \\<noteq> []; i < hd ds\\<rbrakk>\n       \\<Longrightarrow> subtensor (listsum ds (a # As)) i =\n                         listsum (tl ds)\n                          (map (\\<lambda>A. subtensor A i) (a # As))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a As.\n       \\<lbrakk>\\<lbrakk>\\<And>A.\n                            A \\<in> set As \\<Longrightarrow> dims A = ds;\n                 ds \\<noteq> []; i < hd ds\\<rbrakk>\n                \\<Longrightarrow> subtensor (listsum ds As) i =\n                                  listsum (tl ds)\n                                   (map (\\<lambda>A. subtensor A i) As);\n        \\<And>A. A \\<in> set (a # As) \\<Longrightarrow> dims A = ds;\n        ds \\<noteq> []; i < hd ds\\<rbrakk>\n       \\<Longrightarrow> subtensor (listsum ds (a # As)) i =\n                         listsum (tl ds)\n                          (map (\\<lambda>A. subtensor A i) (a # As))", "case (Cons A As)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>A. A \\<in> set As \\<Longrightarrow> dims A = ds;\n   ds \\<noteq> []; i < hd ds\\<rbrakk>\n  \\<Longrightarrow> subtensor (listsum ds As) i =\n                    listsum (tl ds) (map (\\<lambda>A. subtensor A i) As)\n  ?A \\<in> set (A # As) \\<Longrightarrow> dims ?A = ds\n  ds \\<noteq> []\n  i < hd ds\n\ngoal (1 subgoal):\n 1. \\<And>a As.\n       \\<lbrakk>\\<lbrakk>\\<And>A.\n                            A \\<in> set As \\<Longrightarrow> dims A = ds;\n                 ds \\<noteq> []; i < hd ds\\<rbrakk>\n                \\<Longrightarrow> subtensor (listsum ds As) i =\n                                  listsum (tl ds)\n                                   (map (\\<lambda>A. subtensor A i) As);\n        \\<And>A. A \\<in> set (a # As) \\<Longrightarrow> dims A = ds;\n        ds \\<noteq> []; i < hd ds\\<rbrakk>\n       \\<Longrightarrow> subtensor (listsum ds (a # As)) i =\n                         listsum (tl ds)\n                          (map (\\<lambda>A. subtensor A i) (a # As))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>A. A \\<in> set As \\<Longrightarrow> dims A = ds;\n   ds \\<noteq> []; i < hd ds\\<rbrakk>\n  \\<Longrightarrow> subtensor (listsum ds As) i =\n                    listsum (tl ds) (map (\\<lambda>A. subtensor A i) As)\n  ?A \\<in> set (A # As) \\<Longrightarrow> dims ?A = ds\n  ds \\<noteq> []\n  i < hd ds", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>A. A \\<in> set As \\<Longrightarrow> dims A = ds;\n   ds \\<noteq> []; i < hd ds\\<rbrakk>\n  \\<Longrightarrow> subtensor (listsum ds As) i =\n                    listsum (tl ds) (map (\\<lambda>A. subtensor A i) As)\n  ?A \\<in> set (A # As) \\<Longrightarrow> dims ?A = ds\n  ds \\<noteq> []\n  i < hd ds\n\ngoal (1 subgoal):\n 1. subtensor (listsum ds (A # As)) i =\n    listsum (tl ds) (map (\\<lambda>A. subtensor A i) (A # As))", "by (simp add: listsum_Cons; metis subtensor_plus listsum_dims)"], ["proof (state)\nthis:\n  subtensor (listsum ds (A # As)) i =\n  listsum (tl ds) (map (\\<lambda>A. subtensor A i) (A # As))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma listsum0:\nassumes \"\\<And>A. A\\<in>set As \\<Longrightarrow> A = tensor0 ds\"\nshows \"listsum ds As = tensor0 ds\""], ["proof (prove)\ngoal (1 subgoal):\n 1. listsum ds As = tensor0 ds", "using assms"], ["proof (prove)\nusing this:\n  ?A \\<in> set As \\<Longrightarrow> ?A = tensor0 ds\n\ngoal (1 subgoal):\n 1. listsum ds As = tensor0 ds", "proof (induction As)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>A.\n        A \\<in> set [] \\<Longrightarrow> A = tensor0 ds) \\<Longrightarrow>\n    listsum ds [] = tensor0 ds\n 2. \\<And>a As.\n       \\<lbrakk>(\\<And>A.\n                    A \\<in> set As \\<Longrightarrow>\n                    A = tensor0 ds) \\<Longrightarrow>\n                listsum ds As = tensor0 ds;\n        \\<And>A.\n           A \\<in> set (a # As) \\<Longrightarrow> A = tensor0 ds\\<rbrakk>\n       \\<Longrightarrow> listsum ds (a # As) = tensor0 ds", "case Nil"], ["proof (state)\nthis:\n  ?A \\<in> set [] \\<Longrightarrow> ?A = tensor0 ds\n\ngoal (2 subgoals):\n 1. (\\<And>A.\n        A \\<in> set [] \\<Longrightarrow> A = tensor0 ds) \\<Longrightarrow>\n    listsum ds [] = tensor0 ds\n 2. \\<And>a As.\n       \\<lbrakk>(\\<And>A.\n                    A \\<in> set As \\<Longrightarrow>\n                    A = tensor0 ds) \\<Longrightarrow>\n                listsum ds As = tensor0 ds;\n        \\<And>A.\n           A \\<in> set (a # As) \\<Longrightarrow> A = tensor0 ds\\<rbrakk>\n       \\<Longrightarrow> listsum ds (a # As) = tensor0 ds", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. listsum ds [] = tensor0 ds", "by (simp add: listsum_Nil)"], ["proof (state)\nthis:\n  listsum ds [] = tensor0 ds\n\ngoal (1 subgoal):\n 1. \\<And>a As.\n       \\<lbrakk>(\\<And>A.\n                    A \\<in> set As \\<Longrightarrow>\n                    A = tensor0 ds) \\<Longrightarrow>\n                listsum ds As = tensor0 ds;\n        \\<And>A.\n           A \\<in> set (a # As) \\<Longrightarrow> A = tensor0 ds\\<rbrakk>\n       \\<Longrightarrow> listsum ds (a # As) = tensor0 ds", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a As.\n       \\<lbrakk>(\\<And>A.\n                    A \\<in> set As \\<Longrightarrow>\n                    A = tensor0 ds) \\<Longrightarrow>\n                listsum ds As = tensor0 ds;\n        \\<And>A.\n           A \\<in> set (a # As) \\<Longrightarrow> A = tensor0 ds\\<rbrakk>\n       \\<Longrightarrow> listsum ds (a # As) = tensor0 ds", "case Cons"], ["proof (state)\nthis:\n  (\\<And>A.\n      A \\<in> set As_ \\<Longrightarrow> A = tensor0 ds) \\<Longrightarrow>\n  listsum ds As_ = tensor0 ds\n  ?A \\<in> set (a_ # As_) \\<Longrightarrow> ?A = tensor0 ds\n\ngoal (1 subgoal):\n 1. \\<And>a As.\n       \\<lbrakk>(\\<And>A.\n                    A \\<in> set As \\<Longrightarrow>\n                    A = tensor0 ds) \\<Longrightarrow>\n                listsum ds As = tensor0 ds;\n        \\<And>A.\n           A \\<in> set (a # As) \\<Longrightarrow> A = tensor0 ds\\<rbrakk>\n       \\<Longrightarrow> listsum ds (a # As) = tensor0 ds", "then"], ["proof (chain)\npicking this:\n  (\\<And>A.\n      A \\<in> set As_ \\<Longrightarrow> A = tensor0 ds) \\<Longrightarrow>\n  listsum ds As_ = tensor0 ds\n  ?A \\<in> set (a_ # As_) \\<Longrightarrow> ?A = tensor0 ds", "show ?case"], ["proof (prove)\nusing this:\n  (\\<And>A.\n      A \\<in> set As_ \\<Longrightarrow> A = tensor0 ds) \\<Longrightarrow>\n  listsum ds As_ = tensor0 ds\n  ?A \\<in> set (a_ # As_) \\<Longrightarrow> ?A = tensor0 ds\n\ngoal (1 subgoal):\n 1. listsum ds (a_ # As_) = tensor0 ds", "using listsum_Cons"], ["proof (prove)\nusing this:\n  (\\<And>A.\n      A \\<in> set As_ \\<Longrightarrow> A = tensor0 ds) \\<Longrightarrow>\n  listsum ds As_ = tensor0 ds\n  ?A \\<in> set (a_ # As_) \\<Longrightarrow> ?A = tensor0 ds\n  listsum ?ds (?A # ?As) = ?A + listsum ?ds ?As\n\ngoal (1 subgoal):\n 1. listsum ds (a_ # As_) = tensor0 ds", "by (metis dims_tensor0 list.set_intros(1) set_subset_Cons subsetCE tensor_add_0_right)"], ["proof (state)\nthis:\n  listsum ds (a_ # As_) = tensor0 ds\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma listsum_all_0_but_one:\nassumes \"\\<And>i. i\\<noteq>j \\<Longrightarrow> i<length As \\<Longrightarrow> As!i = tensor0 ds\"\nand \"dims (As!j) = ds\"\nand \"j < length As\"\nshows \"listsum ds As = As!j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. listsum ds As = As ! j", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i \\<noteq> j; ?i < length As\\<rbrakk>\n  \\<Longrightarrow> As ! ?i = tensor0 ds\n  dims (As ! j) = ds\n  j < length As\n\ngoal (1 subgoal):\n 1. listsum ds As = As ! j", "proof (induction As arbitrary:j)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>j.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i \\<noteq> j; i < length []\\<rbrakk>\n                   \\<Longrightarrow> [] ! i = tensor0 ds;\n        dims ([] ! j) = ds; j < length []\\<rbrakk>\n       \\<Longrightarrow> listsum ds [] = [] ! j\n 2. \\<And>a As j.\n       \\<lbrakk>\\<And>j.\n                   \\<lbrakk>\\<And>i.\n                               \\<lbrakk>i \\<noteq> j; i < length As\\<rbrakk>\n                               \\<Longrightarrow> As ! i = tensor0 ds;\n                    dims (As ! j) = ds; j < length As\\<rbrakk>\n                   \\<Longrightarrow> listsum ds As = As ! j;\n        \\<And>i.\n           \\<lbrakk>i \\<noteq> j; i < length (a # As)\\<rbrakk>\n           \\<Longrightarrow> (a # As) ! i = tensor0 ds;\n        dims ((a # As) ! j) = ds; j < length (a # As)\\<rbrakk>\n       \\<Longrightarrow> listsum ds (a # As) = (a # As) ! j", "case Nil"], ["proof (state)\nthis:\n  \\<lbrakk>?i \\<noteq> j; ?i < length []\\<rbrakk>\n  \\<Longrightarrow> [] ! ?i = tensor0 ds\n  dims ([] ! j) = ds\n  j < length []\n\ngoal (2 subgoals):\n 1. \\<And>j.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i \\<noteq> j; i < length []\\<rbrakk>\n                   \\<Longrightarrow> [] ! i = tensor0 ds;\n        dims ([] ! j) = ds; j < length []\\<rbrakk>\n       \\<Longrightarrow> listsum ds [] = [] ! j\n 2. \\<And>a As j.\n       \\<lbrakk>\\<And>j.\n                   \\<lbrakk>\\<And>i.\n                               \\<lbrakk>i \\<noteq> j; i < length As\\<rbrakk>\n                               \\<Longrightarrow> As ! i = tensor0 ds;\n                    dims (As ! j) = ds; j < length As\\<rbrakk>\n                   \\<Longrightarrow> listsum ds As = As ! j;\n        \\<And>i.\n           \\<lbrakk>i \\<noteq> j; i < length (a # As)\\<rbrakk>\n           \\<Longrightarrow> (a # As) ! i = tensor0 ds;\n        dims ((a # As) ! j) = ds; j < length (a # As)\\<rbrakk>\n       \\<Longrightarrow> listsum ds (a # As) = (a # As) ! j", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?i \\<noteq> j; ?i < length []\\<rbrakk>\n  \\<Longrightarrow> [] ! ?i = tensor0 ds\n  dims ([] ! j) = ds\n  j < length []", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i \\<noteq> j; ?i < length []\\<rbrakk>\n  \\<Longrightarrow> [] ! ?i = tensor0 ds\n  dims ([] ! j) = ds\n  j < length []\n\ngoal (1 subgoal):\n 1. listsum ds [] = [] ! j", "by auto"], ["proof (state)\nthis:\n  listsum ds [] = [] ! j\n\ngoal (1 subgoal):\n 1. \\<And>a As j.\n       \\<lbrakk>\\<And>j.\n                   \\<lbrakk>\\<And>i.\n                               \\<lbrakk>i \\<noteq> j; i < length As\\<rbrakk>\n                               \\<Longrightarrow> As ! i = tensor0 ds;\n                    dims (As ! j) = ds; j < length As\\<rbrakk>\n                   \\<Longrightarrow> listsum ds As = As ! j;\n        \\<And>i.\n           \\<lbrakk>i \\<noteq> j; i < length (a # As)\\<rbrakk>\n           \\<Longrightarrow> (a # As) ! i = tensor0 ds;\n        dims ((a # As) ! j) = ds; j < length (a # As)\\<rbrakk>\n       \\<Longrightarrow> listsum ds (a # As) = (a # As) ! j", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a As j.\n       \\<lbrakk>\\<And>j.\n                   \\<lbrakk>\\<And>i.\n                               \\<lbrakk>i \\<noteq> j; i < length As\\<rbrakk>\n                               \\<Longrightarrow> As ! i = tensor0 ds;\n                    dims (As ! j) = ds; j < length As\\<rbrakk>\n                   \\<Longrightarrow> listsum ds As = As ! j;\n        \\<And>i.\n           \\<lbrakk>i \\<noteq> j; i < length (a # As)\\<rbrakk>\n           \\<Longrightarrow> (a # As) ! i = tensor0 ds;\n        dims ((a # As) ! j) = ds; j < length (a # As)\\<rbrakk>\n       \\<Longrightarrow> listsum ds (a # As) = (a # As) ! j", "case (Cons A As j)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>i.\n              \\<lbrakk>i \\<noteq> ?j; i < length As\\<rbrakk>\n              \\<Longrightarrow> As ! i = tensor0 ds;\n   dims (As ! ?j) = ds; ?j < length As\\<rbrakk>\n  \\<Longrightarrow> listsum ds As = As ! ?j\n  \\<lbrakk>?i \\<noteq> j; ?i < length (A # As)\\<rbrakk>\n  \\<Longrightarrow> (A # As) ! ?i = tensor0 ds\n  dims ((A # As) ! j) = ds\n  j < length (A # As)\n\ngoal (1 subgoal):\n 1. \\<And>a As j.\n       \\<lbrakk>\\<And>j.\n                   \\<lbrakk>\\<And>i.\n                               \\<lbrakk>i \\<noteq> j; i < length As\\<rbrakk>\n                               \\<Longrightarrow> As ! i = tensor0 ds;\n                    dims (As ! j) = ds; j < length As\\<rbrakk>\n                   \\<Longrightarrow> listsum ds As = As ! j;\n        \\<And>i.\n           \\<lbrakk>i \\<noteq> j; i < length (a # As)\\<rbrakk>\n           \\<Longrightarrow> (a # As) ! i = tensor0 ds;\n        dims ((a # As) ! j) = ds; j < length (a # As)\\<rbrakk>\n       \\<Longrightarrow> listsum ds (a # As) = (a # As) ! j", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>i.\n              \\<lbrakk>i \\<noteq> ?j; i < length As\\<rbrakk>\n              \\<Longrightarrow> As ! i = tensor0 ds;\n   dims (As ! ?j) = ds; ?j < length As\\<rbrakk>\n  \\<Longrightarrow> listsum ds As = As ! ?j\n  \\<lbrakk>?i \\<noteq> j; ?i < length (A # As)\\<rbrakk>\n  \\<Longrightarrow> (A # As) ! ?i = tensor0 ds\n  dims ((A # As) ! j) = ds\n  j < length (A # As)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i.\n              \\<lbrakk>i \\<noteq> ?j; i < length As\\<rbrakk>\n              \\<Longrightarrow> As ! i = tensor0 ds;\n   dims (As ! ?j) = ds; ?j < length As\\<rbrakk>\n  \\<Longrightarrow> listsum ds As = As ! ?j\n  \\<lbrakk>?i \\<noteq> j; ?i < length (A # As)\\<rbrakk>\n  \\<Longrightarrow> (A # As) ! ?i = tensor0 ds\n  dims ((A # As) ! j) = ds\n  j < length (A # As)\n\ngoal (1 subgoal):\n 1. listsum ds (A # As) = (A # As) ! j", "proof (cases j)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>j.\n                \\<lbrakk>\\<And>i.\n                            \\<lbrakk>i \\<noteq> j; i < length As\\<rbrakk>\n                            \\<Longrightarrow> As ! i = tensor0 ds;\n                 dims (As ! j) = ds; j < length As\\<rbrakk>\n                \\<Longrightarrow> listsum ds As = As ! j;\n     \\<And>i.\n        \\<lbrakk>i \\<noteq> j; i < length (A # As)\\<rbrakk>\n        \\<Longrightarrow> (A # As) ! i = tensor0 ds;\n     dims ((A # As) ! j) = ds; j < length (A # As); j = 0\\<rbrakk>\n    \\<Longrightarrow> listsum ds (A # As) = (A # As) ! j\n 2. \\<And>nat.\n       \\<lbrakk>\\<And>j.\n                   \\<lbrakk>\\<And>i.\n                               \\<lbrakk>i \\<noteq> j; i < length As\\<rbrakk>\n                               \\<Longrightarrow> As ! i = tensor0 ds;\n                    dims (As ! j) = ds; j < length As\\<rbrakk>\n                   \\<Longrightarrow> listsum ds As = As ! j;\n        \\<And>i.\n           \\<lbrakk>i \\<noteq> j; i < length (A # As)\\<rbrakk>\n           \\<Longrightarrow> (A # As) ! i = tensor0 ds;\n        dims ((A # As) ! j) = ds; j < length (A # As); j = Suc nat\\<rbrakk>\n       \\<Longrightarrow> listsum ds (A # As) = (A # As) ! j", "case 0"], ["proof (state)\nthis:\n  j = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>j.\n                \\<lbrakk>\\<And>i.\n                            \\<lbrakk>i \\<noteq> j; i < length As\\<rbrakk>\n                            \\<Longrightarrow> As ! i = tensor0 ds;\n                 dims (As ! j) = ds; j < length As\\<rbrakk>\n                \\<Longrightarrow> listsum ds As = As ! j;\n     \\<And>i.\n        \\<lbrakk>i \\<noteq> j; i < length (A # As)\\<rbrakk>\n        \\<Longrightarrow> (A # As) ! i = tensor0 ds;\n     dims ((A # As) ! j) = ds; j < length (A # As); j = 0\\<rbrakk>\n    \\<Longrightarrow> listsum ds (A # As) = (A # As) ! j\n 2. \\<And>nat.\n       \\<lbrakk>\\<And>j.\n                   \\<lbrakk>\\<And>i.\n                               \\<lbrakk>i \\<noteq> j; i < length As\\<rbrakk>\n                               \\<Longrightarrow> As ! i = tensor0 ds;\n                    dims (As ! j) = ds; j < length As\\<rbrakk>\n                   \\<Longrightarrow> listsum ds As = As ! j;\n        \\<And>i.\n           \\<lbrakk>i \\<noteq> j; i < length (A # As)\\<rbrakk>\n           \\<Longrightarrow> (A # As) ! i = tensor0 ds;\n        dims ((A # As) ! j) = ds; j < length (A # As); j = Suc nat\\<rbrakk>\n       \\<Longrightarrow> listsum ds (A # As) = (A # As) ! j", "then"], ["proof (chain)\npicking this:\n  j = 0", "have \"\\<And>i. i < length As \\<Longrightarrow> As ! i = tensor0 ds\""], ["proof (prove)\nusing this:\n  j = 0\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length As \\<Longrightarrow> As ! i = tensor0 ds", "using Cons"], ["proof (prove)\nusing this:\n  j = 0\n  \\<lbrakk>\\<And>i.\n              \\<lbrakk>i \\<noteq> ?j; i < length As\\<rbrakk>\n              \\<Longrightarrow> As ! i = tensor0 ds;\n   dims (As ! ?j) = ds; ?j < length As\\<rbrakk>\n  \\<Longrightarrow> listsum ds As = As ! ?j\n  \\<lbrakk>?i \\<noteq> j; ?i < length (A # As)\\<rbrakk>\n  \\<Longrightarrow> (A # As) ! ?i = tensor0 ds\n  dims ((A # As) ! j) = ds\n  j < length (A # As)\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length As \\<Longrightarrow> As ! i = tensor0 ds", "using Suc_less_eq length_Cons list.sel(3) nat.simps(3) nth_tl"], ["proof (prove)\nusing this:\n  j = 0\n  \\<lbrakk>\\<And>i.\n              \\<lbrakk>i \\<noteq> ?j; i < length As\\<rbrakk>\n              \\<Longrightarrow> As ! i = tensor0 ds;\n   dims (As ! ?j) = ds; ?j < length As\\<rbrakk>\n  \\<Longrightarrow> listsum ds As = As ! ?j\n  \\<lbrakk>?i \\<noteq> j; ?i < length (A # As)\\<rbrakk>\n  \\<Longrightarrow> (A # As) ! ?i = tensor0 ds\n  dims ((A # As) ! j) = ds\n  j < length (A # As)\n  (Suc ?m < Suc ?n) = (?m < ?n)\n  length (?x # ?xs) = Suc (length ?xs)\n  tl (?x21.0 # ?x22.0) = ?x22.0\n  Suc ?x2.0 \\<noteq> 0\n  ?n < length (tl ?xs) \\<Longrightarrow> tl ?xs ! ?n = ?xs ! Suc ?n\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length As \\<Longrightarrow> As ! i = tensor0 ds", "by fastforce"], ["proof (state)\nthis:\n  ?i < length As \\<Longrightarrow> As ! ?i = tensor0 ds\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>j.\n                \\<lbrakk>\\<And>i.\n                            \\<lbrakk>i \\<noteq> j; i < length As\\<rbrakk>\n                            \\<Longrightarrow> As ! i = tensor0 ds;\n                 dims (As ! j) = ds; j < length As\\<rbrakk>\n                \\<Longrightarrow> listsum ds As = As ! j;\n     \\<And>i.\n        \\<lbrakk>i \\<noteq> j; i < length (A # As)\\<rbrakk>\n        \\<Longrightarrow> (A # As) ! i = tensor0 ds;\n     dims ((A # As) ! j) = ds; j < length (A # As); j = 0\\<rbrakk>\n    \\<Longrightarrow> listsum ds (A # As) = (A # As) ! j\n 2. \\<And>nat.\n       \\<lbrakk>\\<And>j.\n                   \\<lbrakk>\\<And>i.\n                               \\<lbrakk>i \\<noteq> j; i < length As\\<rbrakk>\n                               \\<Longrightarrow> As ! i = tensor0 ds;\n                    dims (As ! j) = ds; j < length As\\<rbrakk>\n                   \\<Longrightarrow> listsum ds As = As ! j;\n        \\<And>i.\n           \\<lbrakk>i \\<noteq> j; i < length (A # As)\\<rbrakk>\n           \\<Longrightarrow> (A # As) ! i = tensor0 ds;\n        dims ((A # As) ! j) = ds; j < length (A # As); j = Suc nat\\<rbrakk>\n       \\<Longrightarrow> listsum ds (A # As) = (A # As) ! j", "then"], ["proof (chain)\npicking this:\n  ?i < length As \\<Longrightarrow> As ! ?i = tensor0 ds", "have \"listsum ds As = tensor0 ds\""], ["proof (prove)\nusing this:\n  ?i < length As \\<Longrightarrow> As ! ?i = tensor0 ds\n\ngoal (1 subgoal):\n 1. listsum ds As = tensor0 ds", "using listsum0"], ["proof (prove)\nusing this:\n  ?i < length As \\<Longrightarrow> As ! ?i = tensor0 ds\n  (\\<And>A.\n      A \\<in> set ?As \\<Longrightarrow> A = tensor0 ?ds) \\<Longrightarrow>\n  listsum ?ds ?As = tensor0 ?ds\n\ngoal (1 subgoal):\n 1. listsum ds As = tensor0 ds", "by (metis in_set_conv_nth)"], ["proof (state)\nthis:\n  listsum ds As = tensor0 ds\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>j.\n                \\<lbrakk>\\<And>i.\n                            \\<lbrakk>i \\<noteq> j; i < length As\\<rbrakk>\n                            \\<Longrightarrow> As ! i = tensor0 ds;\n                 dims (As ! j) = ds; j < length As\\<rbrakk>\n                \\<Longrightarrow> listsum ds As = As ! j;\n     \\<And>i.\n        \\<lbrakk>i \\<noteq> j; i < length (A # As)\\<rbrakk>\n        \\<Longrightarrow> (A # As) ! i = tensor0 ds;\n     dims ((A # As) ! j) = ds; j < length (A # As); j = 0\\<rbrakk>\n    \\<Longrightarrow> listsum ds (A # As) = (A # As) ! j\n 2. \\<And>nat.\n       \\<lbrakk>\\<And>j.\n                   \\<lbrakk>\\<And>i.\n                               \\<lbrakk>i \\<noteq> j; i < length As\\<rbrakk>\n                               \\<Longrightarrow> As ! i = tensor0 ds;\n                    dims (As ! j) = ds; j < length As\\<rbrakk>\n                   \\<Longrightarrow> listsum ds As = As ! j;\n        \\<And>i.\n           \\<lbrakk>i \\<noteq> j; i < length (A # As)\\<rbrakk>\n           \\<Longrightarrow> (A # As) ! i = tensor0 ds;\n        dims ((A # As) ! j) = ds; j < length (A # As); j = Suc nat\\<rbrakk>\n       \\<Longrightarrow> listsum ds (A # As) = (A # As) ! j", "then"], ["proof (chain)\npicking this:\n  listsum ds As = tensor0 ds", "show ?thesis"], ["proof (prove)\nusing this:\n  listsum ds As = tensor0 ds\n\ngoal (1 subgoal):\n 1. listsum ds (A # As) = (A # As) ! j", "by (metis \"0\" Cons.prems(2) listsum_Cons nth_Cons_0 tensor_add_0_right)"], ["proof (state)\nthis:\n  listsum ds (A # As) = (A # As) ! j\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>\\<And>j.\n                   \\<lbrakk>\\<And>i.\n                               \\<lbrakk>i \\<noteq> j; i < length As\\<rbrakk>\n                               \\<Longrightarrow> As ! i = tensor0 ds;\n                    dims (As ! j) = ds; j < length As\\<rbrakk>\n                   \\<Longrightarrow> listsum ds As = As ! j;\n        \\<And>i.\n           \\<lbrakk>i \\<noteq> j; i < length (A # As)\\<rbrakk>\n           \\<Longrightarrow> (A # As) ! i = tensor0 ds;\n        dims ((A # As) ! j) = ds; j < length (A # As); j = Suc nat\\<rbrakk>\n       \\<Longrightarrow> listsum ds (A # As) = (A # As) ! j", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>\\<And>j.\n                   \\<lbrakk>\\<And>i.\n                               \\<lbrakk>i \\<noteq> j; i < length As\\<rbrakk>\n                               \\<Longrightarrow> As ! i = tensor0 ds;\n                    dims (As ! j) = ds; j < length As\\<rbrakk>\n                   \\<Longrightarrow> listsum ds As = As ! j;\n        \\<And>i.\n           \\<lbrakk>i \\<noteq> j; i < length (A # As)\\<rbrakk>\n           \\<Longrightarrow> (A # As) ! i = tensor0 ds;\n        dims ((A # As) ! j) = ds; j < length (A # As); j = Suc nat\\<rbrakk>\n       \\<Longrightarrow> listsum ds (A # As) = (A # As) ! j", "case (Suc j')"], ["proof (state)\nthis:\n  j = Suc j'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>\\<And>j.\n                   \\<lbrakk>\\<And>i.\n                               \\<lbrakk>i \\<noteq> j; i < length As\\<rbrakk>\n                               \\<Longrightarrow> As ! i = tensor0 ds;\n                    dims (As ! j) = ds; j < length As\\<rbrakk>\n                   \\<Longrightarrow> listsum ds As = As ! j;\n        \\<And>i.\n           \\<lbrakk>i \\<noteq> j; i < length (A # As)\\<rbrakk>\n           \\<Longrightarrow> (A # As) ! i = tensor0 ds;\n        dims ((A # As) ! j) = ds; j < length (A # As); j = Suc nat\\<rbrakk>\n       \\<Longrightarrow> listsum ds (A # As) = (A # As) ! j", "then"], ["proof (chain)\npicking this:\n  j = Suc j'", "have \"listsum ds As = As!j'\""], ["proof (prove)\nusing this:\n  j = Suc j'\n\ngoal (1 subgoal):\n 1. listsum ds As = As ! j'", "by (metis (no_types, lifting) Cons.IH Cons.prems(1) Cons.prems(2) Cons.prems(3) Suc_less_eq length_Cons less_Suc_eq list.sel(3) not_less_eq nth_tl)"], ["proof (state)\nthis:\n  listsum ds As = As ! j'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>\\<And>j.\n                   \\<lbrakk>\\<And>i.\n                               \\<lbrakk>i \\<noteq> j; i < length As\\<rbrakk>\n                               \\<Longrightarrow> As ! i = tensor0 ds;\n                    dims (As ! j) = ds; j < length As\\<rbrakk>\n                   \\<Longrightarrow> listsum ds As = As ! j;\n        \\<And>i.\n           \\<lbrakk>i \\<noteq> j; i < length (A # As)\\<rbrakk>\n           \\<Longrightarrow> (A # As) ! i = tensor0 ds;\n        dims ((A # As) ! j) = ds; j < length (A # As); j = Suc nat\\<rbrakk>\n       \\<Longrightarrow> listsum ds (A # As) = (A # As) ! j", "then"], ["proof (chain)\npicking this:\n  listsum ds As = As ! j'", "show ?thesis"], ["proof (prove)\nusing this:\n  listsum ds As = As ! j'\n\ngoal (1 subgoal):\n 1. listsum ds (A # As) = (A # As) ! j", "by (metis Cons.prems(1) Cons.prems(2) Suc length_greater_0_conv list.simps(3) listsum_Cons nat.simps(3) nth_Cons_0 nth_Cons_Suc tensor_add_0_left)"], ["proof (state)\nthis:\n  listsum ds (A # As) = (A # As) ! j\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  listsum ds (A # As) = (A # As) ! j\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lookup_listsum:\nassumes \"is \\<lhd> ds\"\nand \"\\<And>A. A \\<in> set As \\<Longrightarrow> dims A = ds\"\nshows \"lookup (listsum ds As) is = (\\<Sum>A\\<leftarrow>As. lookup A is)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (listsum ds As) is = (\\<Sum>A\\<leftarrow>As. lookup A is)", "using assms"], ["proof (prove)\nusing this:\n  is \\<lhd> ds\n  ?A \\<in> set As \\<Longrightarrow> dims ?A = ds\n\ngoal (1 subgoal):\n 1. lookup (listsum ds As) is = (\\<Sum>A\\<leftarrow>As. lookup A is)", "proof (induction As)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>is \\<lhd> ds;\n     \\<And>A. A \\<in> set [] \\<Longrightarrow> dims A = ds\\<rbrakk>\n    \\<Longrightarrow> lookup (listsum ds []) is =\n                      (\\<Sum>A\\<leftarrow>[]. lookup A is)\n 2. \\<And>a As.\n       \\<lbrakk>\\<lbrakk>is \\<lhd> ds;\n                 \\<And>A.\n                    A \\<in> set As \\<Longrightarrow> dims A = ds\\<rbrakk>\n                \\<Longrightarrow> lookup (listsum ds As) is =\n                                  (\\<Sum>A\\<leftarrow>As. lookup A is);\n        is \\<lhd> ds;\n        \\<And>A. A \\<in> set (a # As) \\<Longrightarrow> dims A = ds\\<rbrakk>\n       \\<Longrightarrow> lookup (listsum ds (a # As)) is =\n                         (\\<Sum>A\\<leftarrow>a # As. lookup A is)", "case Nil"], ["proof (state)\nthis:\n  is \\<lhd> ds\n  ?A \\<in> set [] \\<Longrightarrow> dims ?A = ds\n\ngoal (2 subgoals):\n 1. \\<lbrakk>is \\<lhd> ds;\n     \\<And>A. A \\<in> set [] \\<Longrightarrow> dims A = ds\\<rbrakk>\n    \\<Longrightarrow> lookup (listsum ds []) is =\n                      (\\<Sum>A\\<leftarrow>[]. lookup A is)\n 2. \\<And>a As.\n       \\<lbrakk>\\<lbrakk>is \\<lhd> ds;\n                 \\<And>A.\n                    A \\<in> set As \\<Longrightarrow> dims A = ds\\<rbrakk>\n                \\<Longrightarrow> lookup (listsum ds As) is =\n                                  (\\<Sum>A\\<leftarrow>As. lookup A is);\n        is \\<lhd> ds;\n        \\<And>A. A \\<in> set (a # As) \\<Longrightarrow> dims A = ds\\<rbrakk>\n       \\<Longrightarrow> lookup (listsum ds (a # As)) is =\n                         (\\<Sum>A\\<leftarrow>a # As. lookup A is)", "then"], ["proof (chain)\npicking this:\n  is \\<lhd> ds\n  ?A \\<in> set [] \\<Longrightarrow> dims ?A = ds", "show ?case"], ["proof (prove)\nusing this:\n  is \\<lhd> ds\n  ?A \\<in> set [] \\<Longrightarrow> dims ?A = ds\n\ngoal (1 subgoal):\n 1. lookup (listsum ds []) is = (\\<Sum>A\\<leftarrow>[]. lookup A is)", "by (simp add: assms(1) listsum_Nil lookup_tensor0)"], ["proof (state)\nthis:\n  lookup (listsum ds []) is = (\\<Sum>A\\<leftarrow>[]. lookup A is)\n\ngoal (1 subgoal):\n 1. \\<And>a As.\n       \\<lbrakk>\\<lbrakk>is \\<lhd> ds;\n                 \\<And>A.\n                    A \\<in> set As \\<Longrightarrow> dims A = ds\\<rbrakk>\n                \\<Longrightarrow> lookup (listsum ds As) is =\n                                  (\\<Sum>A\\<leftarrow>As. lookup A is);\n        is \\<lhd> ds;\n        \\<And>A. A \\<in> set (a # As) \\<Longrightarrow> dims A = ds\\<rbrakk>\n       \\<Longrightarrow> lookup (listsum ds (a # As)) is =\n                         (\\<Sum>A\\<leftarrow>a # As. lookup A is)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a As.\n       \\<lbrakk>\\<lbrakk>is \\<lhd> ds;\n                 \\<And>A.\n                    A \\<in> set As \\<Longrightarrow> dims A = ds\\<rbrakk>\n                \\<Longrightarrow> lookup (listsum ds As) is =\n                                  (\\<Sum>A\\<leftarrow>As. lookup A is);\n        is \\<lhd> ds;\n        \\<And>A. A \\<in> set (a # As) \\<Longrightarrow> dims A = ds\\<rbrakk>\n       \\<Longrightarrow> lookup (listsum ds (a # As)) is =\n                         (\\<Sum>A\\<leftarrow>a # As. lookup A is)", "case (Cons A As)"], ["proof (state)\nthis:\n  \\<lbrakk>is \\<lhd> ds;\n   \\<And>A. A \\<in> set As \\<Longrightarrow> dims A = ds\\<rbrakk>\n  \\<Longrightarrow> lookup (listsum ds As) is =\n                    (\\<Sum>A\\<leftarrow>As. lookup A is)\n  is \\<lhd> ds\n  ?A \\<in> set (A # As) \\<Longrightarrow> dims ?A = ds\n\ngoal (1 subgoal):\n 1. \\<And>a As.\n       \\<lbrakk>\\<lbrakk>is \\<lhd> ds;\n                 \\<And>A.\n                    A \\<in> set As \\<Longrightarrow> dims A = ds\\<rbrakk>\n                \\<Longrightarrow> lookup (listsum ds As) is =\n                                  (\\<Sum>A\\<leftarrow>As. lookup A is);\n        is \\<lhd> ds;\n        \\<And>A. A \\<in> set (a # As) \\<Longrightarrow> dims A = ds\\<rbrakk>\n       \\<Longrightarrow> lookup (listsum ds (a # As)) is =\n                         (\\<Sum>A\\<leftarrow>a # As. lookup A is)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>is \\<lhd> ds;\n   \\<And>A. A \\<in> set As \\<Longrightarrow> dims A = ds\\<rbrakk>\n  \\<Longrightarrow> lookup (listsum ds As) is =\n                    (\\<Sum>A\\<leftarrow>As. lookup A is)\n  is \\<lhd> ds\n  ?A \\<in> set (A # As) \\<Longrightarrow> dims ?A = ds", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>is \\<lhd> ds;\n   \\<And>A. A \\<in> set As \\<Longrightarrow> dims A = ds\\<rbrakk>\n  \\<Longrightarrow> lookup (listsum ds As) is =\n                    (\\<Sum>A\\<leftarrow>As. lookup A is)\n  is \\<lhd> ds\n  ?A \\<in> set (A # As) \\<Longrightarrow> dims ?A = ds\n\ngoal (1 subgoal):\n 1. lookup (listsum ds (A # As)) is =\n    (\\<Sum>A\\<leftarrow>A # As. lookup A is)", "by (simp add: listsum_Cons list.set_intros listsum_dims)"], ["proof (state)\nthis:\n  lookup (listsum ds (A # As)) is = (\\<Sum>A\\<leftarrow>A # As. lookup A is)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}