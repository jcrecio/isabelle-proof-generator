{"file_name": "/home/qj213/afp-2021-10-22/thys/LatticeProperties/Conj_Disj.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/LatticeProperties", "problem_names": ["lemma conjunctiveI:\n  assumes \"(\\<And>b c. times_abc a (inf_b b c) = inf_c (times_abc a b) (times_abc a c))\"\n  shows \"a \\<in> conjunctive\"", "lemma conjunctiveD: \"x \\<in> conjunctive \\<Longrightarrow> times_abc x (inf_b y z) = inf_c (times_abc x y) (times_abc x z)\"", "lemma \"Apply.conjunctive = Comp.conjunctive\"", "lemma disjunctiveI:\n  assumes \"(\\<And>b c. times_abc a (sup_b b c) = sup_c (times_abc a b) (times_abc a c))\"\n  shows \"a \\<in> disjunctive\"", "lemma disjunctiveD: \"x \\<in> disjunctive \\<Longrightarrow> times_abc x (sup_b y z) = sup_c (times_abc x y) (times_abc x z)\"", "lemma apply_comp_disjunctive: \"Apply.disjunctive = Comp.disjunctive\"", "lemma ConjunctiveI:\n  assumes \"\\<And>A. times_abc a (Inf_b A) = Inf_c ((times_abc a) ` A)\"\n  shows \"a \\<in> Conjunctive\"", "lemma ConjunctiveD:\n  assumes \"a \\<in> Conjunctive\"\n  shows \"times_abc a (Inf_b A) = Inf_c ((times_abc a) ` A)\"", "lemma \"Apply.Conjunctive = Comp.Conjunctive\"", "lemma DisjunctiveI:\n  assumes \"\\<And>A. times_abc a (Sup_b A) = Sup_c ((times_abc a) ` A)\"\n  shows \"a \\<in> Disjunctive\"", "lemma DisjunctiveD: \"x \\<in> Disjunctive \\<Longrightarrow> times_abc x (Sup_b X) = Sup_c ((times_abc x) ` X)\"", "lemma \"Apply.Disjunctive = Comp.Disjunctive\"", "lemma [simp]: \"(F::'a::complete_lattice \\<Rightarrow> 'b::complete_lattice) \\<in> Apply.Conjunctive \\<Longrightarrow> F \\<in> Apply.conjunctive\"", "lemma [simp]: \"F \\<in> Apply.conjunctive \\<Longrightarrow> mono F\"", "lemma [simp]: \"(F::'a::complete_lattice \\<Rightarrow> 'b::complete_lattice) \\<in> Apply.Conjunctive \\<Longrightarrow> F top = top\"", "lemma [simp]: \"(F::'a::complete_lattice \\<Rightarrow> 'b::complete_lattice) \\<in> Apply.Disjunctive \\<Longrightarrow> F \\<in> Apply.disjunctive\"", "lemma [simp]: \"F \\<in> Apply.disjunctive \\<Longrightarrow> mono F\"", "lemma [simp]: \"(F::'a::complete_lattice \\<Rightarrow> 'b::complete_lattice) \\<in> Apply.Disjunctive \\<Longrightarrow> F bot = bot\"", "lemma weak_fusion: \"h \\<in> Apply.Disjunctive \\<Longrightarrow> mono f \\<Longrightarrow> mono g \\<Longrightarrow> \n    h o f \\<le> g o h \\<Longrightarrow> h (lfp f) \\<le> lfp g\"", "lemma inf_Disj: \"(\\<lambda> (x::'a::complete_distrib_lattice) . inf x y) \\<in> Apply.Disjunctive\""], "translations": [["", "lemma conjunctiveI:\n  assumes \"(\\<And>b c. times_abc a (inf_b b c) = inf_c (times_abc a b) (times_abc a c))\"\n  shows \"a \\<in> conjunctive\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> conjunctive", "using assms"], ["proof (prove)\nusing this:\n  times_abc a (inf_b ?b ?c) = inf_c (times_abc a ?b) (times_abc a ?c)\n\ngoal (1 subgoal):\n 1. a \\<in> conjunctive", "by (simp add: conjunctive_def)"], ["", "lemma conjunctiveD: \"x \\<in> conjunctive \\<Longrightarrow> times_abc x (inf_b y z) = inf_c (times_abc x y) (times_abc x z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> conjunctive \\<Longrightarrow>\n    times_abc x (inf_b y z) = inf_c (times_abc x y) (times_abc x z)", "by (simp add: conjunctive_def)"], ["", "end"], ["", "interpretation Apply: conjunctive \"inf::'a::semilattice_inf \\<Rightarrow> 'a \\<Rightarrow> 'a\"\n  \"inf::'b::semilattice_inf \\<Rightarrow> 'b \\<Rightarrow> 'b\" \"\\<lambda> f . f\""], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "interpretation Comp: conjunctive \"inf::('a::lattice \\<Rightarrow> 'a) \\<Rightarrow> ('a \\<Rightarrow> 'a) \\<Rightarrow> ('a \\<Rightarrow> 'a)\" \n  \"inf::('a::lattice \\<Rightarrow> 'a) \\<Rightarrow> ('a \\<Rightarrow> 'a) \\<Rightarrow> ('a \\<Rightarrow> 'a)\" \"(o)\""], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma \"Apply.conjunctive = Comp.conjunctive\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Apply.conjunctive = Comp.conjunctive", "apply (simp add: Apply.conjunctive_def Comp.conjunctive_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. \\<forall>y z. x (inf y z) = inf (x y) (x z)} =\n    {x. \\<forall>y z. x \\<circ> inf y z = inf (x \\<circ> y) (x \\<circ> z)}", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<forall>y z. x (inf y z) = inf (x y) (x z) \\<Longrightarrow>\n       x \\<circ> inf y z = inf (x \\<circ> y) (x \\<circ> z)\n 2. \\<And>x y z.\n       \\<forall>y z.\n          x \\<circ> inf y z =\n          inf (x \\<circ> y) (x \\<circ> z) \\<Longrightarrow>\n       x (inf y z) = inf (x y) (x z)", "apply (simp_all add: fun_eq_iff inf_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<forall>y z xa.\n          x (inf (y xa) (z xa)) =\n          inf (x (y xa)) (x (z xa)) \\<Longrightarrow>\n       x (inf y z) = inf (x y) (x z)", "apply (drule_tac x = \"\\<lambda> u . y\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<forall>z xa.\n          x (inf y (z xa)) = inf (x y) (x (z xa)) \\<Longrightarrow>\n       x (inf y z) = inf (x y) (x z)", "apply (drule_tac x = \"\\<lambda> u . z\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<forall>xa. x (inf y z) = inf (x y) (x z) \\<Longrightarrow>\n       x (inf y z) = inf (x y) (x z)", "by simp"], ["", "locale disjunctive =\n  fixes sup_b :: \"'b \\<Rightarrow> 'b \\<Rightarrow> 'b\"\n  and sup_c :: \"'c \\<Rightarrow> 'c \\<Rightarrow> 'c\"\n  and times_abc :: \"'a \\<Rightarrow> 'b \\<Rightarrow> 'c\"\nbegin"], ["", "definition\n  \"disjunctive = {x . (\\<forall> y z . times_abc x (sup_b y z) = sup_c (times_abc x y) (times_abc x z))}\""], ["", "lemma disjunctiveI:\n  assumes \"(\\<And>b c. times_abc a (sup_b b c) = sup_c (times_abc a b) (times_abc a c))\"\n  shows \"a \\<in> disjunctive\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> disjunctive", "using assms"], ["proof (prove)\nusing this:\n  times_abc a (sup_b ?b ?c) = sup_c (times_abc a ?b) (times_abc a ?c)\n\ngoal (1 subgoal):\n 1. a \\<in> disjunctive", "by (simp add: disjunctive_def)"], ["", "lemma disjunctiveD: \"x \\<in> disjunctive \\<Longrightarrow> times_abc x (sup_b y z) = sup_c (times_abc x y) (times_abc x z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> disjunctive \\<Longrightarrow>\n    times_abc x (sup_b y z) = sup_c (times_abc x y) (times_abc x z)", "by (simp add: disjunctive_def)"], ["", "end"], ["", "interpretation Apply: disjunctive \"sup::'a::semilattice_sup \\<Rightarrow> 'a \\<Rightarrow> 'a\"\n  \"sup::'b::semilattice_sup \\<Rightarrow> 'b \\<Rightarrow> 'b\" \"\\<lambda> f . f\""], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "interpretation Comp: disjunctive \"sup::('a::lattice \\<Rightarrow> 'a) \\<Rightarrow> ('a \\<Rightarrow> 'a) \\<Rightarrow> ('a \\<Rightarrow> 'a)\" \n  \"sup::('a::lattice \\<Rightarrow> 'a) \\<Rightarrow> ('a \\<Rightarrow> 'a) \\<Rightarrow> ('a \\<Rightarrow> 'a)\" \"(o)\""], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma apply_comp_disjunctive: \"Apply.disjunctive = Comp.disjunctive\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Apply.disjunctive = Comp.disjunctive", "apply (simp add: Apply.disjunctive_def Comp.disjunctive_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. \\<forall>y z. x (sup y z) = sup (x y) (x z)} =\n    {x. \\<forall>y z. x \\<circ> sup y z = sup (x \\<circ> y) (x \\<circ> z)}", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<forall>y z. x (sup y z) = sup (x y) (x z) \\<Longrightarrow>\n       x \\<circ> sup y z = sup (x \\<circ> y) (x \\<circ> z)\n 2. \\<And>x y z.\n       \\<forall>y z.\n          x \\<circ> sup y z =\n          sup (x \\<circ> y) (x \\<circ> z) \\<Longrightarrow>\n       x (sup y z) = sup (x y) (x z)", "apply (simp_all add: fun_eq_iff sup_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<forall>y z xa.\n          x (sup (y xa) (z xa)) =\n          sup (x (y xa)) (x (z xa)) \\<Longrightarrow>\n       x (sup y z) = sup (x y) (x z)", "apply (drule_tac x = \"\\<lambda> u . y\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<forall>z xa.\n          x (sup y (z xa)) = sup (x y) (x (z xa)) \\<Longrightarrow>\n       x (sup y z) = sup (x y) (x z)", "apply (drule_tac x = \"\\<lambda> u . z\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<forall>xa. x (sup y z) = sup (x y) (x z) \\<Longrightarrow>\n       x (sup y z) = sup (x y) (x z)", "by simp"], ["", "locale Conjunctive =\n  fixes Inf_b :: \"'b set \\<Rightarrow> 'b\"\n  and Inf_c :: \"'c set \\<Rightarrow> 'c\"\n  and times_abc :: \"'a \\<Rightarrow> 'b \\<Rightarrow> 'c\"\nbegin"], ["", "definition\n  \"Conjunctive = {x . (\\<forall> X . times_abc x (Inf_b X) = Inf_c ((times_abc x) ` X) )}\""], ["", "lemma ConjunctiveI:\n  assumes \"\\<And>A. times_abc a (Inf_b A) = Inf_c ((times_abc a) ` A)\"\n  shows \"a \\<in> Conjunctive\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> Conjunctive", "using assms"], ["proof (prove)\nusing this:\n  times_abc a (Inf_b ?A) = Inf_c (times_abc a ` ?A)\n\ngoal (1 subgoal):\n 1. a \\<in> Conjunctive", "by (simp add: Conjunctive_def)"], ["", "lemma ConjunctiveD:\n  assumes \"a \\<in> Conjunctive\"\n  shows \"times_abc a (Inf_b A) = Inf_c ((times_abc a) ` A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. times_abc a (Inf_b A) = Inf_c (times_abc a ` A)", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> Conjunctive\n\ngoal (1 subgoal):\n 1. times_abc a (Inf_b A) = Inf_c (times_abc a ` A)", "by (simp add: Conjunctive_def)"], ["", "end"], ["", "interpretation Apply: Conjunctive Inf Inf \"\\<lambda> f . f\""], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "interpretation Comp: Conjunctive \"Inf::(('a::complete_lattice \\<Rightarrow> 'a) set) \\<Rightarrow> ('a \\<Rightarrow> 'a)\" \n  \"Inf::(('a::complete_lattice \\<Rightarrow> 'a) set) \\<Rightarrow> ('a \\<Rightarrow> 'a)\" \"(o)\""], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma \"Apply.Conjunctive = Comp.Conjunctive\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Apply.Conjunctive = Comp.Conjunctive", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. Apply.Conjunctive \\<subseteq> Comp.Conjunctive\n 2. Comp.Conjunctive \\<subseteq> Apply.Conjunctive", "show \"Apply.Conjunctive \\<subseteq> (Comp.Conjunctive :: ('a \\<Rightarrow> 'a) set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Apply.Conjunctive \\<subseteq> Comp.Conjunctive", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Apply.Conjunctive \\<Longrightarrow> x \\<in> Comp.Conjunctive", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Apply.Conjunctive \\<Longrightarrow> x \\<in> Comp.Conjunctive", "assume \"f \\<in> (Apply.Conjunctive :: ('a \\<Rightarrow> 'a) set)\""], ["proof (state)\nthis:\n  f \\<in> Apply.Conjunctive\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Apply.Conjunctive \\<Longrightarrow> x \\<in> Comp.Conjunctive", "then"], ["proof (chain)\npicking this:\n  f \\<in> Apply.Conjunctive", "have *: \"f (Inf A) = (INF a\\<in>A. f a)\" for A"], ["proof (prove)\nusing this:\n  f \\<in> Apply.Conjunctive\n\ngoal (1 subgoal):\n 1. f (Inf A) = Inf (f ` A)", "by (auto dest!: Apply.ConjunctiveD)"], ["proof (state)\nthis:\n  f (Inf ?A) = Inf (f ` ?A)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Apply.Conjunctive \\<Longrightarrow> x \\<in> Comp.Conjunctive", "show \"f \\<in> (Comp.Conjunctive :: ('a \\<Rightarrow> 'a) set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> Comp.Conjunctive", "proof (rule Comp.ConjunctiveI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A. f \\<circ> Inf A = Inf ((\\<circ>) f ` A)", "fix G :: \"('a \\<Rightarrow> 'a) set\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A. f \\<circ> Inf A = Inf ((\\<circ>) f ` A)", "from *"], ["proof (chain)\npicking this:\n  f (Inf ?A) = Inf (f ` ?A)", "have \"f (INF f\\<in>G. f a) = Inf (f ` (\\<lambda>f. f a) ` G)\"\n        for a :: 'a"], ["proof (prove)\nusing this:\n  f (Inf ?A) = Inf (f ` ?A)\n\ngoal (1 subgoal):\n 1. f (INF f\\<in>G. f a) = Inf (f ` (\\<lambda>f. f a) ` G)", "."], ["proof (state)\nthis:\n  f (INF f\\<in>G. f ?a) = Inf (f ` (\\<lambda>f. f ?a) ` G)\n\ngoal (1 subgoal):\n 1. \\<And>A. f \\<circ> Inf A = Inf ((\\<circ>) f ` A)", "then"], ["proof (chain)\npicking this:\n  f (INF f\\<in>G. f ?a) = Inf (f ` (\\<lambda>f. f ?a) ` G)", "show \"f \\<circ> Inf G = Inf (comp f ` G)\""], ["proof (prove)\nusing this:\n  f (INF f\\<in>G. f ?a) = Inf (f ` (\\<lambda>f. f ?a) ` G)\n\ngoal (1 subgoal):\n 1. f \\<circ> Inf G = Inf ((\\<circ>) f ` G)", "by (simp add: fun_eq_iff image_comp)"], ["proof (state)\nthis:\n  f \\<circ> Inf G = Inf ((\\<circ>) f ` G)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f \\<in> Comp.Conjunctive\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Apply.Conjunctive \\<subseteq> Comp.Conjunctive\n\ngoal (1 subgoal):\n 1. Comp.Conjunctive \\<subseteq> Apply.Conjunctive", "show \"Comp.Conjunctive \\<subseteq> (Apply.Conjunctive :: ('a \\<Rightarrow> 'a) set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Comp.Conjunctive \\<subseteq> Apply.Conjunctive", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Comp.Conjunctive \\<Longrightarrow> x \\<in> Apply.Conjunctive", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Comp.Conjunctive \\<Longrightarrow> x \\<in> Apply.Conjunctive", "assume \"f \\<in> (Comp.Conjunctive :: ('a \\<Rightarrow> 'a) set)\""], ["proof (state)\nthis:\n  f \\<in> Comp.Conjunctive\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Comp.Conjunctive \\<Longrightarrow> x \\<in> Apply.Conjunctive", "then"], ["proof (chain)\npicking this:\n  f \\<in> Comp.Conjunctive", "have *: \"f \\<circ> Inf G = (INF g\\<in>G. f \\<circ> g)\" for G :: \"('a \\<Rightarrow> 'a) set\""], ["proof (prove)\nusing this:\n  f \\<in> Comp.Conjunctive\n\ngoal (1 subgoal):\n 1. f \\<circ> Inf G = Inf ((\\<circ>) f ` G)", "by (auto dest!: Comp.ConjunctiveD)"], ["proof (state)\nthis:\n  f \\<circ> Inf ?G = Inf ((\\<circ>) f ` ?G)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Comp.Conjunctive \\<Longrightarrow> x \\<in> Apply.Conjunctive", "show \"f \\<in> (Apply.Conjunctive :: ('a \\<Rightarrow> 'a) set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> Apply.Conjunctive", "proof (rule Apply.ConjunctiveI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A. f (Inf A) = Inf (f ` A)", "fix A :: \"'a set\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A. f (Inf A) = Inf (f ` A)", "from *"], ["proof (chain)\npicking this:\n  f \\<circ> Inf ?G = Inf ((\\<circ>) f ` ?G)", "have \"f \\<circ> (INF a\\<in>A. (\\<lambda>b :: 'a. a)) = Inf ((\\<circ>) f ` (\\<lambda>a b. a) ` A)\""], ["proof (prove)\nusing this:\n  f \\<circ> Inf ?G = Inf ((\\<circ>) f ` ?G)\n\ngoal (1 subgoal):\n 1. f \\<circ> (INF a\\<in>A. (\\<lambda>b. a)) =\n    Inf ((\\<circ>) f ` (\\<lambda>a b. a) ` A)", "."], ["proof (state)\nthis:\n  f \\<circ> (INF a\\<in>A. (\\<lambda>b. a)) =\n  Inf ((\\<circ>) f ` (\\<lambda>a b. a) ` A)\n\ngoal (1 subgoal):\n 1. \\<And>A. f (Inf A) = Inf (f ` A)", "then"], ["proof (chain)\npicking this:\n  f \\<circ> (INF a\\<in>A. (\\<lambda>b. a)) =\n  Inf ((\\<circ>) f ` (\\<lambda>a b. a) ` A)", "show \"f (Inf A) = Inf (f ` A)\""], ["proof (prove)\nusing this:\n  f \\<circ> (INF a\\<in>A. (\\<lambda>b. a)) =\n  Inf ((\\<circ>) f ` (\\<lambda>a b. a) ` A)\n\ngoal (1 subgoal):\n 1. f (Inf A) = Inf (f ` A)", "by (simp add: fun_eq_iff image_comp)"], ["proof (state)\nthis:\n  f (Inf A) = Inf (f ` A)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f \\<in> Apply.Conjunctive\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Comp.Conjunctive \\<subseteq> Apply.Conjunctive\n\ngoal:\nNo subgoals!", "qed"], ["", "locale Disjunctive =\n  fixes Sup_b :: \"'b set \\<Rightarrow> 'b\"\n  and Sup_c :: \"'c set \\<Rightarrow> 'c\"\n  and times_abc :: \"'a \\<Rightarrow> 'b \\<Rightarrow> 'c\"\nbegin"], ["", "definition\n  \"Disjunctive = {x . (\\<forall> X . times_abc x (Sup_b X) = Sup_c ((times_abc x) ` X) )}\""], ["", "lemma DisjunctiveI:\n  assumes \"\\<And>A. times_abc a (Sup_b A) = Sup_c ((times_abc a) ` A)\"\n  shows \"a \\<in> Disjunctive\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> Disjunctive", "using assms"], ["proof (prove)\nusing this:\n  times_abc a (Sup_b ?A) = Sup_c (times_abc a ` ?A)\n\ngoal (1 subgoal):\n 1. a \\<in> Disjunctive", "by (simp add: Disjunctive_def)"], ["", "lemma DisjunctiveD: \"x \\<in> Disjunctive \\<Longrightarrow> times_abc x (Sup_b X) = Sup_c ((times_abc x) ` X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> Disjunctive \\<Longrightarrow>\n    times_abc x (Sup_b X) = Sup_c (times_abc x ` X)", "by (simp add: Disjunctive_def)"], ["", "end"], ["", "interpretation Apply: Disjunctive Sup Sup \"\\<lambda> f . f\""], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "interpretation Comp: Disjunctive \"Sup::(('a::complete_lattice \\<Rightarrow> 'a) set) \\<Rightarrow> ('a \\<Rightarrow> 'a)\" \n  \"Sup::(('a::complete_lattice \\<Rightarrow> 'a) set) \\<Rightarrow> ('a \\<Rightarrow> 'a)\" \"(o)\""], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma \"Apply.Disjunctive = Comp.Disjunctive\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Apply.Disjunctive = Comp.Disjunctive", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. Apply.Disjunctive \\<subseteq> Comp.Disjunctive\n 2. Comp.Disjunctive \\<subseteq> Apply.Disjunctive", "show \"Apply.Disjunctive \\<subseteq> (Comp.Disjunctive :: ('a \\<Rightarrow> 'a) set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Apply.Disjunctive \\<subseteq> Comp.Disjunctive", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Apply.Disjunctive \\<Longrightarrow> x \\<in> Comp.Disjunctive", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Apply.Disjunctive \\<Longrightarrow> x \\<in> Comp.Disjunctive", "assume \"f \\<in> (Apply.Disjunctive :: ('a \\<Rightarrow> 'a) set)\""], ["proof (state)\nthis:\n  f \\<in> Apply.Disjunctive\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Apply.Disjunctive \\<Longrightarrow> x \\<in> Comp.Disjunctive", "then"], ["proof (chain)\npicking this:\n  f \\<in> Apply.Disjunctive", "have *: \"f (Sup A) = (SUP a\\<in>A. f a)\" for A"], ["proof (prove)\nusing this:\n  f \\<in> Apply.Disjunctive\n\ngoal (1 subgoal):\n 1. f (Sup A) = Sup (f ` A)", "by (auto dest!: Apply.DisjunctiveD)"], ["proof (state)\nthis:\n  f (Sup ?A) = Sup (f ` ?A)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Apply.Disjunctive \\<Longrightarrow> x \\<in> Comp.Disjunctive", "show \"f \\<in> (Comp.Disjunctive :: ('a \\<Rightarrow> 'a) set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> Comp.Disjunctive", "proof (rule Comp.DisjunctiveI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A. f \\<circ> Sup A = Sup ((\\<circ>) f ` A)", "fix G :: \"('a \\<Rightarrow> 'a) set\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A. f \\<circ> Sup A = Sup ((\\<circ>) f ` A)", "from *"], ["proof (chain)\npicking this:\n  f (Sup ?A) = Sup (f ` ?A)", "have \"f (SUP f\\<in>G. f a) = Sup (f ` (\\<lambda>f. f a) ` G)\"\n        for a :: 'a"], ["proof (prove)\nusing this:\n  f (Sup ?A) = Sup (f ` ?A)\n\ngoal (1 subgoal):\n 1. f (SUP f\\<in>G. f a) = Sup (f ` (\\<lambda>f. f a) ` G)", "."], ["proof (state)\nthis:\n  f (SUP f\\<in>G. f ?a) = Sup (f ` (\\<lambda>f. f ?a) ` G)\n\ngoal (1 subgoal):\n 1. \\<And>A. f \\<circ> Sup A = Sup ((\\<circ>) f ` A)", "then"], ["proof (chain)\npicking this:\n  f (SUP f\\<in>G. f ?a) = Sup (f ` (\\<lambda>f. f ?a) ` G)", "show \"f \\<circ> Sup G = Sup (comp f ` G)\""], ["proof (prove)\nusing this:\n  f (SUP f\\<in>G. f ?a) = Sup (f ` (\\<lambda>f. f ?a) ` G)\n\ngoal (1 subgoal):\n 1. f \\<circ> Sup G = Sup ((\\<circ>) f ` G)", "by (simp add: fun_eq_iff image_comp)"], ["proof (state)\nthis:\n  f \\<circ> Sup G = Sup ((\\<circ>) f ` G)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f \\<in> Comp.Disjunctive\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Apply.Disjunctive \\<subseteq> Comp.Disjunctive\n\ngoal (1 subgoal):\n 1. Comp.Disjunctive \\<subseteq> Apply.Disjunctive", "show \"Comp.Disjunctive \\<subseteq> (Apply.Disjunctive :: ('a \\<Rightarrow> 'a) set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Comp.Disjunctive \\<subseteq> Apply.Disjunctive", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Comp.Disjunctive \\<Longrightarrow> x \\<in> Apply.Disjunctive", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Comp.Disjunctive \\<Longrightarrow> x \\<in> Apply.Disjunctive", "assume \"f \\<in> (Comp.Disjunctive :: ('a \\<Rightarrow> 'a) set)\""], ["proof (state)\nthis:\n  f \\<in> Comp.Disjunctive\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Comp.Disjunctive \\<Longrightarrow> x \\<in> Apply.Disjunctive", "then"], ["proof (chain)\npicking this:\n  f \\<in> Comp.Disjunctive", "have *: \"f \\<circ> Sup G = (SUP g\\<in>G. f \\<circ> g)\" for G :: \"('a \\<Rightarrow> 'a) set\""], ["proof (prove)\nusing this:\n  f \\<in> Comp.Disjunctive\n\ngoal (1 subgoal):\n 1. f \\<circ> Sup G = Sup ((\\<circ>) f ` G)", "by (auto dest!: Comp.DisjunctiveD)"], ["proof (state)\nthis:\n  f \\<circ> Sup ?G = Sup ((\\<circ>) f ` ?G)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Comp.Disjunctive \\<Longrightarrow> x \\<in> Apply.Disjunctive", "show \"f \\<in> (Apply.Disjunctive :: ('a \\<Rightarrow> 'a) set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> Apply.Disjunctive", "proof (rule Apply.DisjunctiveI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A. f (Sup A) = Sup (f ` A)", "fix A :: \"'a set\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A. f (Sup A) = Sup (f ` A)", "from *"], ["proof (chain)\npicking this:\n  f \\<circ> Sup ?G = Sup ((\\<circ>) f ` ?G)", "have \"f \\<circ> (SUP a\\<in>A. (\\<lambda>b :: 'a. a)) = Sup ((\\<circ>) f ` (\\<lambda>a b. a) ` A)\""], ["proof (prove)\nusing this:\n  f \\<circ> Sup ?G = Sup ((\\<circ>) f ` ?G)\n\ngoal (1 subgoal):\n 1. f \\<circ> (SUP a\\<in>A. (\\<lambda>b. a)) =\n    Sup ((\\<circ>) f ` (\\<lambda>a b. a) ` A)", "."], ["proof (state)\nthis:\n  f \\<circ> (SUP a\\<in>A. (\\<lambda>b. a)) =\n  Sup ((\\<circ>) f ` (\\<lambda>a b. a) ` A)\n\ngoal (1 subgoal):\n 1. \\<And>A. f (Sup A) = Sup (f ` A)", "then"], ["proof (chain)\npicking this:\n  f \\<circ> (SUP a\\<in>A. (\\<lambda>b. a)) =\n  Sup ((\\<circ>) f ` (\\<lambda>a b. a) ` A)", "show \"f (Sup A) = Sup (f ` A)\""], ["proof (prove)\nusing this:\n  f \\<circ> (SUP a\\<in>A. (\\<lambda>b. a)) =\n  Sup ((\\<circ>) f ` (\\<lambda>a b. a) ` A)\n\ngoal (1 subgoal):\n 1. f (Sup A) = Sup (f ` A)", "by (simp add: fun_eq_iff image_comp)"], ["proof (state)\nthis:\n  f (Sup A) = Sup (f ` A)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f \\<in> Apply.Disjunctive\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Comp.Disjunctive \\<subseteq> Apply.Disjunctive\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma [simp]: \"(F::'a::complete_lattice \\<Rightarrow> 'b::complete_lattice) \\<in> Apply.Conjunctive \\<Longrightarrow> F \\<in> Apply.conjunctive\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<in> Apply.Conjunctive \\<Longrightarrow> F \\<in> Apply.conjunctive", "apply (simp add: Apply.Conjunctive_def Apply.conjunctive_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X. F (Inf X) = Inf (F ` X) \\<Longrightarrow>\n    \\<forall>y z. F (inf y z) = inf (F y) (F z)", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<forall>X. F (Inf X) = Inf (F ` X) \\<Longrightarrow>\n       F (inf y z) = inf (F y) (F z)", "apply (drule_tac x = \"{y, z}\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       F (Inf {y, z}) = Inf (F ` {y, z}) \\<Longrightarrow>\n       F (inf y z) = inf (F y) (F z)", "by simp"], ["", "lemma [simp]: \"F \\<in> Apply.conjunctive \\<Longrightarrow> mono F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<in> Apply.conjunctive \\<Longrightarrow> mono F", "apply (simp add: Apply.conjunctive_def mono_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y z. F (inf y z) = inf (F y) (F z) \\<Longrightarrow>\n    \\<forall>x y. x \\<le> y \\<longrightarrow> F x \\<le> F y", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>y z. F (inf y z) = inf (F y) (F z);\n        x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> F x \\<le> F y", "apply (drule_tac x = \"x\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y;\n        \\<forall>z. F (inf x z) = inf (F x) (F z)\\<rbrakk>\n       \\<Longrightarrow> F x \\<le> F y", "apply (drule_tac x = \"y\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; F (inf x y) = inf (F x) (F y)\\<rbrakk>\n       \\<Longrightarrow> F x \\<le> F y", "apply (subgoal_tac \"inf x y = x\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; F (inf x y) = inf (F x) (F y);\n        inf x y = x\\<rbrakk>\n       \\<Longrightarrow> F x \\<le> F y\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; F (inf x y) = inf (F x) (F y)\\<rbrakk>\n       \\<Longrightarrow> inf x y = x", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; F x = inf (F x) (F y); inf x y = x\\<rbrakk>\n       \\<Longrightarrow> F x \\<le> F y\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; F (inf x y) = inf (F x) (F y)\\<rbrakk>\n       \\<Longrightarrow> inf x y = x", "apply (subgoal_tac \"inf (F x) (F y) \\<le> F y\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; F x = inf (F x) (F y); inf x y = x;\n        inf (F x) (F y) \\<le> F y\\<rbrakk>\n       \\<Longrightarrow> F x \\<le> F y\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; F x = inf (F x) (F y); inf x y = x\\<rbrakk>\n       \\<Longrightarrow> inf (F x) (F y) \\<le> F y\n 3. \\<And>x y.\n       \\<lbrakk>x \\<le> y; F (inf x y) = inf (F x) (F y)\\<rbrakk>\n       \\<Longrightarrow> inf x y = x", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; F x = inf (F x) (F y); inf x y = x\\<rbrakk>\n       \\<Longrightarrow> inf (F x) (F y) \\<le> F y\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; F (inf x y) = inf (F x) (F y)\\<rbrakk>\n       \\<Longrightarrow> inf x y = x", "apply (rule inf_le2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; F (inf x y) = inf (F x) (F y)\\<rbrakk>\n       \\<Longrightarrow> inf x y = x", "apply (rule antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; F (inf x y) = inf (F x) (F y)\\<rbrakk>\n       \\<Longrightarrow> inf x y \\<le> x\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; F (inf x y) = inf (F x) (F y)\\<rbrakk>\n       \\<Longrightarrow> x \\<le> inf x y", "by simp_all"], ["", "lemma [simp]: \"(F::'a::complete_lattice \\<Rightarrow> 'b::complete_lattice) \\<in> Apply.Conjunctive \\<Longrightarrow> F top = top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<in> Apply.Conjunctive \\<Longrightarrow> F top = top", "apply (simp add: Apply.Conjunctive_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X. F (Inf X) = Inf (F ` X) \\<Longrightarrow> F top = top", "apply (drule_tac x=\"{}\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. F (Inf {}) = Inf (F ` {}) \\<Longrightarrow> F top = top", "by simp"], ["", "lemma [simp]: \"(F::'a::complete_lattice \\<Rightarrow> 'b::complete_lattice) \\<in> Apply.Disjunctive \\<Longrightarrow> F \\<in> Apply.disjunctive\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<in> Apply.Disjunctive \\<Longrightarrow> F \\<in> Apply.disjunctive", "apply (simp add: Apply.Disjunctive_def Apply.disjunctive_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X. F (Sup X) = Sup (F ` X) \\<Longrightarrow>\n    \\<forall>y z. F (sup y z) = sup (F y) (F z)", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<forall>X. F (Sup X) = Sup (F ` X) \\<Longrightarrow>\n       F (sup y z) = sup (F y) (F z)", "apply (drule_tac x = \"{y, z}\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       F (Sup {y, z}) = Sup (F ` {y, z}) \\<Longrightarrow>\n       F (sup y z) = sup (F y) (F z)", "by simp"], ["", "lemma [simp]: \"F \\<in> Apply.disjunctive \\<Longrightarrow> mono F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<in> Apply.disjunctive \\<Longrightarrow> mono F", "apply (simp add: Apply.disjunctive_def mono_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y z. F (sup y z) = sup (F y) (F z) \\<Longrightarrow>\n    \\<forall>x y. x \\<le> y \\<longrightarrow> F x \\<le> F y", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>y z. F (sup y z) = sup (F y) (F z);\n        x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> F x \\<le> F y", "apply (drule_tac x = \"x\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y;\n        \\<forall>z. F (sup x z) = sup (F x) (F z)\\<rbrakk>\n       \\<Longrightarrow> F x \\<le> F y", "apply (drule_tac x = \"y\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; F (sup x y) = sup (F x) (F y)\\<rbrakk>\n       \\<Longrightarrow> F x \\<le> F y", "apply (subgoal_tac \"sup x y = y\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; F (sup x y) = sup (F x) (F y);\n        sup x y = y\\<rbrakk>\n       \\<Longrightarrow> F x \\<le> F y\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; F (sup x y) = sup (F x) (F y)\\<rbrakk>\n       \\<Longrightarrow> sup x y = y", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; F y = sup (F x) (F y); sup x y = y\\<rbrakk>\n       \\<Longrightarrow> F x \\<le> F y\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; F (sup x y) = sup (F x) (F y)\\<rbrakk>\n       \\<Longrightarrow> sup x y = y", "apply (subgoal_tac \"F x \\<le> sup (F x) (F y)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; F y = sup (F x) (F y); sup x y = y;\n        F x \\<le> sup (F x) (F y)\\<rbrakk>\n       \\<Longrightarrow> F x \\<le> F y\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; F y = sup (F x) (F y); sup x y = y\\<rbrakk>\n       \\<Longrightarrow> F x \\<le> sup (F x) (F y)\n 3. \\<And>x y.\n       \\<lbrakk>x \\<le> y; F (sup x y) = sup (F x) (F y)\\<rbrakk>\n       \\<Longrightarrow> sup x y = y", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; F y = sup (F x) (F y); sup x y = y\\<rbrakk>\n       \\<Longrightarrow> F x \\<le> sup (F x) (F y)\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; F (sup x y) = sup (F x) (F y)\\<rbrakk>\n       \\<Longrightarrow> sup x y = y", "apply (rule sup_ge1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; F (sup x y) = sup (F x) (F y)\\<rbrakk>\n       \\<Longrightarrow> sup x y = y", "apply (rule antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; F (sup x y) = sup (F x) (F y)\\<rbrakk>\n       \\<Longrightarrow> sup x y \\<le> y\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; F (sup x y) = sup (F x) (F y)\\<rbrakk>\n       \\<Longrightarrow> y \\<le> sup x y", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; F (sup x y) = sup (F x) (F y)\\<rbrakk>\n       \\<Longrightarrow> y \\<le> sup x y", "by (rule sup_ge2)"], ["", "lemma [simp]: \"(F::'a::complete_lattice \\<Rightarrow> 'b::complete_lattice) \\<in> Apply.Disjunctive \\<Longrightarrow> F bot = bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<in> Apply.Disjunctive \\<Longrightarrow> F bot = bot", "apply (simp add: Apply.Disjunctive_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X. F (Sup X) = Sup (F ` X) \\<Longrightarrow> F bot = bot", "apply (drule_tac x=\"{}\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. F (Sup {}) = Sup (F ` {}) \\<Longrightarrow> F bot = bot", "by simp"], ["", "lemma weak_fusion: \"h \\<in> Apply.Disjunctive \\<Longrightarrow> mono f \\<Longrightarrow> mono g \\<Longrightarrow> \n    h o f \\<le> g o h \\<Longrightarrow> h (lfp f) \\<le> lfp g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>h \\<in> Apply.Disjunctive; mono f; mono g;\n     h \\<circ> f \\<le> g \\<circ> h\\<rbrakk>\n    \\<Longrightarrow> h (lfp f) \\<le> lfp g", "apply (rule_tac P = \"\\<lambda> x . h x \\<le> lfp g\" in lfp_ordinal_induct, simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S.\n       \\<lbrakk>h \\<in> Apply.Disjunctive; mono f; mono g;\n        h \\<circ> f \\<le> g \\<circ> h; h S \\<le> lfp g;\n        S \\<le> lfp f\\<rbrakk>\n       \\<Longrightarrow> h (f S) \\<le> lfp g\n 2. \\<And>M.\n       \\<lbrakk>h \\<in> Apply.Disjunctive; mono f; mono g;\n        h \\<circ> f \\<le> g \\<circ> h;\n        \\<forall>S\\<in>M. h S \\<le> lfp g\\<rbrakk>\n       \\<Longrightarrow> h (Sup M) \\<le> lfp g", "apply (rule_tac y = \"g (h S)\" in order_trans)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>S.\n       \\<lbrakk>h \\<in> Apply.Disjunctive; mono f; mono g;\n        h \\<circ> f \\<le> g \\<circ> h; h S \\<le> lfp g;\n        S \\<le> lfp f\\<rbrakk>\n       \\<Longrightarrow> h (f S) \\<le> g (h S)\n 2. \\<And>S.\n       \\<lbrakk>h \\<in> Apply.Disjunctive; mono f; mono g;\n        h \\<circ> f \\<le> g \\<circ> h; h S \\<le> lfp g;\n        S \\<le> lfp f\\<rbrakk>\n       \\<Longrightarrow> g (h S) \\<le> lfp g\n 3. \\<And>M.\n       \\<lbrakk>h \\<in> Apply.Disjunctive; mono f; mono g;\n        h \\<circ> f \\<le> g \\<circ> h;\n        \\<forall>S\\<in>M. h S \\<le> lfp g\\<rbrakk>\n       \\<Longrightarrow> h (Sup M) \\<le> lfp g", "apply (simp add: le_fun_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S.\n       \\<lbrakk>h \\<in> Apply.Disjunctive; mono f; mono g;\n        h \\<circ> f \\<le> g \\<circ> h; h S \\<le> lfp g;\n        S \\<le> lfp f\\<rbrakk>\n       \\<Longrightarrow> g (h S) \\<le> lfp g\n 2. \\<And>M.\n       \\<lbrakk>h \\<in> Apply.Disjunctive; mono f; mono g;\n        h \\<circ> f \\<le> g \\<circ> h;\n        \\<forall>S\\<in>M. h S \\<le> lfp g\\<rbrakk>\n       \\<Longrightarrow> h (Sup M) \\<le> lfp g", "apply (rule_tac y = \"g (lfp g)\" in order_trans)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>S.\n       \\<lbrakk>h \\<in> Apply.Disjunctive; mono f; mono g;\n        h \\<circ> f \\<le> g \\<circ> h; h S \\<le> lfp g;\n        S \\<le> lfp f\\<rbrakk>\n       \\<Longrightarrow> g (h S) \\<le> g (lfp g)\n 2. \\<And>S.\n       \\<lbrakk>h \\<in> Apply.Disjunctive; mono f; mono g;\n        h \\<circ> f \\<le> g \\<circ> h; h S \\<le> lfp g;\n        S \\<le> lfp f\\<rbrakk>\n       \\<Longrightarrow> g (lfp g) \\<le> lfp g\n 3. \\<And>M.\n       \\<lbrakk>h \\<in> Apply.Disjunctive; mono f; mono g;\n        h \\<circ> f \\<le> g \\<circ> h;\n        \\<forall>S\\<in>M. h S \\<le> lfp g\\<rbrakk>\n       \\<Longrightarrow> h (Sup M) \\<le> lfp g", "apply (rule_tac f = g in monoD, simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S.\n       \\<lbrakk>h \\<in> Apply.Disjunctive; mono f; mono g;\n        h \\<circ> f \\<le> g \\<circ> h; h S \\<le> lfp g;\n        S \\<le> lfp f\\<rbrakk>\n       \\<Longrightarrow> g (lfp g) \\<le> lfp g\n 2. \\<And>M.\n       \\<lbrakk>h \\<in> Apply.Disjunctive; mono f; mono g;\n        h \\<circ> f \\<le> g \\<circ> h;\n        \\<forall>S\\<in>M. h S \\<le> lfp g\\<rbrakk>\n       \\<Longrightarrow> h (Sup M) \\<le> lfp g", "apply (simp add: lfp_unfold [symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M.\n       \\<lbrakk>h \\<in> Apply.Disjunctive; mono f; mono g;\n        h \\<circ> f \\<le> g \\<circ> h;\n        \\<forall>S\\<in>M. h S \\<le> lfp g\\<rbrakk>\n       \\<Longrightarrow> h (Sup M) \\<le> lfp g", "apply (simp add: Apply.DisjunctiveD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M.\n       \\<lbrakk>h \\<in> Apply.Disjunctive; mono f; mono g;\n        h \\<circ> f \\<le> g \\<circ> h;\n        \\<forall>S\\<in>M. h S \\<le> lfp g\\<rbrakk>\n       \\<Longrightarrow> Sup (h ` M) \\<le> lfp g", "by (rule SUP_least, blast)"], ["", "lemma inf_Disj: \"(\\<lambda> (x::'a::complete_distrib_lattice) . inf x y) \\<in> Apply.Disjunctive\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. inf x y) \\<in> Apply.Disjunctive", "by (simp add: Apply.Disjunctive_def fun_eq_iff Sup_inf)"], ["", "end"]]}