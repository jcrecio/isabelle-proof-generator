{"file_name": "/home/qj213/afp-2021-10-22/thys/Grothendieck_Schemes/Scheme.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Grothendieck_Schemes", "problem_names": ["lemma (in Set_Theory.map) set_map_\\<alpha>_cong:\n  assumes \\<alpha>_eq:\"\\<And>x. x\\<in>S \\<Longrightarrow> \\<alpha>' x  = \\<alpha> x\" and \\<alpha>_ext:\"\\<alpha>' \\<in> extensional S\"       \n  shows \"Set_Theory.map \\<alpha>' S T\"", "lemma (in monoid_homomorphism) monoid_homomorphism_\\<eta>_cong:\n  assumes \\<eta>_eq:\"\\<And>x. x\\<in>M \\<Longrightarrow> \\<eta>' x  = \\<eta> x\" and \\<eta>_ext:\"\\<eta>' \\<in> extensional M\"\n  shows \"monoid_homomorphism \\<eta>' M (\\<cdot>) \\<one> M' (\\<cdot>') \\<one>'\"", "lemma (in group_homomorphism) group_homomorphism_\\<eta>_cong:\n  assumes \\<eta>_eq:\"\\<And>x. x\\<in>G \\<Longrightarrow> \\<eta>' x  = \\<eta> x\" and \\<eta>_ext:\"\\<eta>' \\<in> extensional G\"\n  shows \"group_homomorphism \\<eta>' G (\\<cdot>) \\<one> G' (\\<cdot>') \\<one>'\"", "lemma (in ring_homomorphism) ring_homomorphism_\\<eta>_cong:\n  assumes \\<eta>_eq:\"\\<And>x. x\\<in>R \\<Longrightarrow> \\<eta>' x  = \\<eta> x\" and \\<eta>_ext:\"\\<eta>' \\<in> extensional R\"\n  shows \"ring_homomorphism \\<eta>' R (+) (\\<cdot>) \\<zero> \\<one> R' (+') (\\<cdot>') \\<zero>' \\<one>'\"", "lemma (in morphism_presheaves_of_rings) morphism_presheaves_of_rings_fam_cong:\n  assumes fam_eq:\"\\<And>U x. \\<lbrakk> is_open U; x\\<in>\\<FF> U\\<rbrakk> \\<Longrightarrow> fam_morphisms' U x= fam_morphisms U x\"\n    and fam_ext:\"\\<And>U. is_open U \\<Longrightarrow> fam_morphisms' U \\<in> extensional (\\<FF> U)\"\n  shows \"morphism_presheaves_of_rings X is_open \\<FF> \\<rho> b add_str mult_str zero_str one_str \\<FF>' \\<rho>' b' \n      add_str' mult_str'\n      zero_str' one_str' fam_morphisms'\"", "lemma \n  assumes \"U \\<in> I\"\n  shows has_ring_isomorphism:\"ring_isomorphism (identity stk1.carrier_stalk) stk1.carrier_stalk \n          stk1.add_stalk stk1.mult_stalk (stk1.zero_stalk U) (stk1.one_stalk U)\n          stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk (stk2.zero_stalk U) (stk2.one_stalk U)\"\n   and carrier_stalk_eq:\"stk1.carrier_stalk = stk2.carrier_stalk\"\n   and class_of_eq:\"stk1.class_of = stk2.class_of\"", "lemma (in affine_scheme) affine_scheme_is_scheme:\n  shows \"scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open \\<O>\\<^sub>X \\<rho> b add_str mult_str zero_str one_str\"", "lemma (in comm_ring) spec_is_affine_scheme:\n  shows \"affine_scheme R (+) (\\<cdot>) \\<zero> \\<one> Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b\n(\\<lambda>U. add_sheaf_spec U) (\\<lambda>U. mult_sheaf_spec U) (\\<lambda>U. zero_sheaf_spec U) (\\<lambda>U. one_sheaf_spec U)\n(identity Spec) (\\<lambda>U. identity (\\<O> U))\"", "lemma (in comm_ring) spec_is_scheme:\n  shows \"scheme R (+) (\\<cdot>) \\<zero> \\<one> Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b\n(\\<lambda>U. add_sheaf_spec U) (\\<lambda>U. mult_sheaf_spec U) (\\<lambda>U. zero_sheaf_spec U) (\\<lambda>U. one_sheaf_spec U)\"", "lemma empty_scheme_is_affine_scheme:\n  shows \"affine_scheme {0::nat} (\\<lambda>x y. 0) (\\<lambda>x y. 0) 0 0 \n{} (\\<lambda>U. U={}) (\\<lambda>U. {0::nat}) (\\<lambda>U V. identity{0}) 0 (\\<lambda>U x y. 0) (\\<lambda>U x y. 0) (\\<lambda>U. 0) (\\<lambda>U. 0)\n(\\<lambda>\\<pp>\\<in>Spec. undefined) (\\<lambda>U. \\<lambda>s \\<in> cring0.sheaf_spec U. 0)\"", "lemma empty_scheme_is_scheme:\n  shows \"scheme {0::nat} (\\<lambda>x y. 0) (\\<lambda>x y. 0) 0 0 {} (\\<lambda>U. U={}) (\\<lambda>U. {0}) (\\<lambda>U V. identity{0::nat}) 0 (\\<lambda>U x y. 0) (\\<lambda>U x y. 0) (\\<lambda>U. 0) (\\<lambda>U. 0)\""], "translations": [["", "lemma (in Set_Theory.map) set_map_\\<alpha>_cong:\n  assumes \\<alpha>_eq:\"\\<And>x. x\\<in>S \\<Longrightarrow> \\<alpha>' x  = \\<alpha> x\" and \\<alpha>_ext:\"\\<alpha>' \\<in> extensional S\"       \n  shows \"Set_Theory.map \\<alpha>' S T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Set_Theory.map \\<alpha>' S T", "using map_axioms \\<alpha>_eq \\<alpha>_ext"], ["proof (prove)\nusing this:\n  Set_Theory.map \\<alpha> S T\n  ?x \\<in> S \\<Longrightarrow> \\<alpha>' ?x = \\<alpha> ?x\n  \\<alpha>' \\<in> extensional S\n\ngoal (1 subgoal):\n 1. Set_Theory.map \\<alpha>' S T", "unfolding Set_Theory.map_def"], ["proof (prove)\nusing this:\n  \\<alpha> \\<in> S \\<rightarrow>\\<^sub>E T\n  ?x \\<in> S \\<Longrightarrow> \\<alpha>' ?x = \\<alpha> ?x\n  \\<alpha>' \\<in> extensional S\n\ngoal (1 subgoal):\n 1. \\<alpha>' \\<in> S \\<rightarrow>\\<^sub>E T", "by (auto simp:extensional_def)"], ["", "lemma (in monoid_homomorphism) monoid_homomorphism_\\<eta>_cong:\n  assumes \\<eta>_eq:\"\\<And>x. x\\<in>M \\<Longrightarrow> \\<eta>' x  = \\<eta> x\" and \\<eta>_ext:\"\\<eta>' \\<in> extensional M\"\n  shows \"monoid_homomorphism \\<eta>' M (\\<cdot>) \\<one> M' (\\<cdot>') \\<one>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monoid_homomorphism \\<eta>' M (\\<cdot>) \\<one> M' (\\<cdot>') \\<one>'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. monoid_homomorphism \\<eta>' M (\\<cdot>) \\<one> M' (\\<cdot>') \\<one>'", "have \"Set_Theory.map \\<eta>' M M'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Set_Theory.map \\<eta>' M M'", "using set_map_\\<alpha>_cong \\<eta>_eq \\<eta>_ext"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x. x \\<in> M \\<Longrightarrow> ?\\<alpha>' x = \\<eta> x;\n   ?\\<alpha>' \\<in> extensional M\\<rbrakk>\n  \\<Longrightarrow> Set_Theory.map ?\\<alpha>' M M'\n  ?x1 \\<in> M \\<Longrightarrow> \\<eta>' ?x1 = \\<eta> ?x1\n  \\<eta>' \\<in> extensional M\n\ngoal (1 subgoal):\n 1. Set_Theory.map \\<eta>' M M'", "by auto"], ["proof (state)\nthis:\n  Set_Theory.map \\<eta>' M M'\n\ngoal (1 subgoal):\n 1. monoid_homomorphism \\<eta>' M (\\<cdot>) \\<one> M' (\\<cdot>') \\<one>'", "moreover"], ["proof (state)\nthis:\n  Set_Theory.map \\<eta>' M M'\n\ngoal (1 subgoal):\n 1. monoid_homomorphism \\<eta>' M (\\<cdot>) \\<one> M' (\\<cdot>') \\<one>'", "have \"monoid_homomorphism_axioms \\<eta>' M (\\<cdot>) \\<one> (\\<cdot>') \\<one>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monoid_homomorphism_axioms \\<eta>' M (\\<cdot>) \\<one> (\\<cdot>') \\<one>'", "unfolding monoid_homomorphism_axioms_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x y.\n        x \\<in> M \\<longrightarrow>\n        y \\<in> M \\<longrightarrow>\n        \\<eta>' (x \\<cdot> y) = \\<eta>' x \\<cdot>' \\<eta>' y) \\<and>\n    \\<eta>' \\<one> = \\<one>'", "by (simp add: \\<eta>_eq commutes_with_composition commutes_with_unit)"], ["proof (state)\nthis:\n  monoid_homomorphism_axioms \\<eta>' M (\\<cdot>) \\<one> (\\<cdot>') \\<one>'\n\ngoal (1 subgoal):\n 1. monoid_homomorphism \\<eta>' M (\\<cdot>) \\<one> M' (\\<cdot>') \\<one>'", "ultimately"], ["proof (chain)\npicking this:\n  Set_Theory.map \\<eta>' M M'\n  monoid_homomorphism_axioms \\<eta>' M (\\<cdot>) \\<one> (\\<cdot>') \\<one>'", "show ?thesis"], ["proof (prove)\nusing this:\n  Set_Theory.map \\<eta>' M M'\n  monoid_homomorphism_axioms \\<eta>' M (\\<cdot>) \\<one> (\\<cdot>') \\<one>'\n\ngoal (1 subgoal):\n 1. monoid_homomorphism \\<eta>' M (\\<cdot>) \\<one> M' (\\<cdot>') \\<one>'", "unfolding monoid_homomorphism_def"], ["proof (prove)\nusing this:\n  Set_Theory.map \\<eta>' M M'\n  monoid_homomorphism_axioms \\<eta>' M (\\<cdot>) \\<one> (\\<cdot>') \\<one>'\n\ngoal (1 subgoal):\n 1. (Set_Theory.map \\<eta>' M M' \\<and>\n     Group_Theory.monoid M (\\<cdot>) \\<one>) \\<and>\n    Group_Theory.monoid M' (\\<cdot>') \\<one>' \\<and>\n    monoid_homomorphism_axioms \\<eta>' M (\\<cdot>) \\<one> (\\<cdot>') \\<one>'", "using source.monoid_axioms target.monoid_axioms"], ["proof (prove)\nusing this:\n  Set_Theory.map \\<eta>' M M'\n  monoid_homomorphism_axioms \\<eta>' M (\\<cdot>) \\<one> (\\<cdot>') \\<one>'\n  Group_Theory.monoid M (\\<cdot>) \\<one>\n  Group_Theory.monoid M' (\\<cdot>') \\<one>'\n\ngoal (1 subgoal):\n 1. (Set_Theory.map \\<eta>' M M' \\<and>\n     Group_Theory.monoid M (\\<cdot>) \\<one>) \\<and>\n    Group_Theory.monoid M' (\\<cdot>') \\<one>' \\<and>\n    monoid_homomorphism_axioms \\<eta>' M (\\<cdot>) \\<one> (\\<cdot>') \\<one>'", "by blast"], ["proof (state)\nthis:\n  monoid_homomorphism \\<eta>' M (\\<cdot>) \\<one> M' (\\<cdot>') \\<one>'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in group_homomorphism) group_homomorphism_\\<eta>_cong:\n  assumes \\<eta>_eq:\"\\<And>x. x\\<in>G \\<Longrightarrow> \\<eta>' x  = \\<eta> x\" and \\<eta>_ext:\"\\<eta>' \\<in> extensional G\"\n  shows \"group_homomorphism \\<eta>' G (\\<cdot>) \\<one> G' (\\<cdot>') \\<one>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. group_homomorphism \\<eta>' G (\\<cdot>) \\<one> G' (\\<cdot>') \\<one>'", "by (simp add: \\<eta>_eq \\<eta>_ext group_homomorphism_def monoid_homomorphism_\\<eta>_cong source.group_axioms \n      target.group_axioms)"], ["", "lemma (in ring_homomorphism) ring_homomorphism_\\<eta>_cong:\n  assumes \\<eta>_eq:\"\\<And>x. x\\<in>R \\<Longrightarrow> \\<eta>' x  = \\<eta> x\" and \\<eta>_ext:\"\\<eta>' \\<in> extensional R\"\n  shows \"ring_homomorphism \\<eta>' R (+) (\\<cdot>) \\<zero> \\<one> R' (+') (\\<cdot>') \\<zero>' \\<one>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ring_homomorphism \\<eta>' R (+) (\\<cdot>) \\<zero> \\<one> R' (+')\n     (\\<cdot>') \\<zero>' \\<one>'", "unfolding ring_homomorphism_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Set_Theory.map \\<eta>' R R' \\<and>\n     ring R (+) (\\<cdot>) \\<zero> \\<one>) \\<and>\n    ring R' (+') (\\<cdot>') \\<zero>' \\<one>' \\<and>\n    group_homomorphism \\<eta>' R (+) \\<zero> R' (+') \\<zero>' \\<and>\n    monoid_homomorphism \\<eta>' R (\\<cdot>) \\<one> R' (\\<cdot>') \\<one>'", "using \\<eta>_eq \\<eta>_ext additive.group_homomorphism_\\<eta>_cong multiplicative.monoid_homomorphism_\\<eta>_cong \n    set_map_\\<alpha>_cong source.ring_axioms target.ring_axioms"], ["proof (prove)\nusing this:\n  ?x2 \\<in> R \\<Longrightarrow> \\<eta>' ?x2 = \\<eta> ?x2\n  \\<eta>' \\<in> extensional R\n  \\<lbrakk>\\<And>x. x \\<in> R \\<Longrightarrow> ?\\<eta>' x = \\<eta> x;\n   ?\\<eta>' \\<in> extensional R\\<rbrakk>\n  \\<Longrightarrow> group_homomorphism ?\\<eta>' R (+) \\<zero> R' (+')\n                     \\<zero>'\n  \\<lbrakk>\\<And>x. x \\<in> R \\<Longrightarrow> ?\\<eta>' x = \\<eta> x;\n   ?\\<eta>' \\<in> extensional R\\<rbrakk>\n  \\<Longrightarrow> monoid_homomorphism ?\\<eta>' R (\\<cdot>) \\<one> R'\n                     (\\<cdot>') \\<one>'\n  \\<lbrakk>\\<And>x. x \\<in> R \\<Longrightarrow> ?\\<alpha>' x = \\<eta> x;\n   ?\\<alpha>' \\<in> extensional R\\<rbrakk>\n  \\<Longrightarrow> Set_Theory.map ?\\<alpha>' R R'\n  ring R (+) (\\<cdot>) \\<zero> \\<one>\n  ring R' (+') (\\<cdot>') \\<zero>' \\<one>'\n\ngoal (1 subgoal):\n 1. (Set_Theory.map \\<eta>' R R' \\<and>\n     ring R (+) (\\<cdot>) \\<zero> \\<one>) \\<and>\n    ring R' (+') (\\<cdot>') \\<zero>' \\<one>' \\<and>\n    group_homomorphism \\<eta>' R (+) \\<zero> R' (+') \\<zero>' \\<and>\n    monoid_homomorphism \\<eta>' R (\\<cdot>) \\<one> R' (\\<cdot>') \\<one>'", "by presburger"], ["", "lemma (in morphism_presheaves_of_rings) morphism_presheaves_of_rings_fam_cong:\n  assumes fam_eq:\"\\<And>U x. \\<lbrakk> is_open U; x\\<in>\\<FF> U\\<rbrakk> \\<Longrightarrow> fam_morphisms' U x= fam_morphisms U x\"\n    and fam_ext:\"\\<And>U. is_open U \\<Longrightarrow> fam_morphisms' U \\<in> extensional (\\<FF> U)\"\n  shows \"morphism_presheaves_of_rings X is_open \\<FF> \\<rho> b add_str mult_str zero_str one_str \\<FF>' \\<rho>' b' \n      add_str' mult_str'\n      zero_str' one_str' fam_morphisms'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings X is_open \\<FF> \\<rho> b add_str mult_str\n     zero_str one_str \\<FF>' \\<rho>' b' add_str' mult_str' zero_str'\n     one_str' fam_morphisms'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings X is_open \\<FF> \\<rho> b add_str mult_str\n     zero_str one_str \\<FF>' \\<rho>' b' add_str' mult_str' zero_str'\n     one_str' fam_morphisms'", "have \" presheaf_of_rings X is_open \\<FF> \\<rho> b add_str mult_str zero_str one_str\""], ["proof (prove)\ngoal (1 subgoal):\n 1. presheaf_of_rings X is_open \\<FF> \\<rho> b add_str mult_str zero_str\n     one_str", "using source.presheaf_of_rings_axioms"], ["proof (prove)\nusing this:\n  presheaf_of_rings X is_open \\<FF> \\<rho> b add_str mult_str zero_str\n   one_str\n\ngoal (1 subgoal):\n 1. presheaf_of_rings X is_open \\<FF> \\<rho> b add_str mult_str zero_str\n     one_str", "."], ["proof (state)\nthis:\n  presheaf_of_rings X is_open \\<FF> \\<rho> b add_str mult_str zero_str\n   one_str\n\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings X is_open \\<FF> \\<rho> b add_str mult_str\n     zero_str one_str \\<FF>' \\<rho>' b' add_str' mult_str' zero_str'\n     one_str' fam_morphisms'", "moreover"], ["proof (state)\nthis:\n  presheaf_of_rings X is_open \\<FF> \\<rho> b add_str mult_str zero_str\n   one_str\n\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings X is_open \\<FF> \\<rho> b add_str mult_str\n     zero_str one_str \\<FF>' \\<rho>' b' add_str' mult_str' zero_str'\n     one_str' fam_morphisms'", "have \"presheaf_of_rings X is_open \\<FF>' \\<rho>' b' add_str' mult_str' zero_str' one_str'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. presheaf_of_rings X is_open \\<FF>' \\<rho>' b' add_str' mult_str'\n     zero_str' one_str'", "using target.presheaf_of_rings_axioms"], ["proof (prove)\nusing this:\n  presheaf_of_rings X is_open \\<FF>' \\<rho>' b' add_str' mult_str' zero_str'\n   one_str'\n\ngoal (1 subgoal):\n 1. presheaf_of_rings X is_open \\<FF>' \\<rho>' b' add_str' mult_str'\n     zero_str' one_str'", "."], ["proof (state)\nthis:\n  presheaf_of_rings X is_open \\<FF>' \\<rho>' b' add_str' mult_str' zero_str'\n   one_str'\n\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings X is_open \\<FF> \\<rho> b add_str mult_str\n     zero_str one_str \\<FF>' \\<rho>' b' add_str' mult_str' zero_str'\n     one_str' fam_morphisms'", "moreover"], ["proof (state)\nthis:\n  presheaf_of_rings X is_open \\<FF>' \\<rho>' b' add_str' mult_str' zero_str'\n   one_str'\n\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings X is_open \\<FF> \\<rho> b add_str mult_str\n     zero_str one_str \\<FF>' \\<rho>' b' add_str' mult_str' zero_str'\n     one_str' fam_morphisms'", "have \"\n    morphism_presheaves_of_rings_axioms is_open \\<FF> \\<rho> add_str mult_str zero_str one_str \\<FF>' \\<rho>' add_str' mult_str'\n     zero_str' one_str' fam_morphisms'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings_axioms is_open \\<FF> \\<rho> add_str\n     mult_str zero_str one_str \\<FF>' \\<rho>' add_str' mult_str' zero_str'\n     one_str' fam_morphisms'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings_axioms is_open \\<FF> \\<rho> add_str\n     mult_str zero_str one_str \\<FF>' \\<rho>' add_str' mult_str' zero_str'\n     one_str' fam_morphisms'", "have \"ring_homomorphism (fam_morphisms' U) (\\<FF> U) +\\<^bsub>U\\<^esub> \\<cdot>\\<^bsub>U\\<^esub> \\<zero>\\<^bsub>U\\<^esub> \\<one>\\<^bsub>U\\<^esub> (\\<FF>' U) +'\\<^bsub>U\\<^esub> \\<cdot>'\\<^bsub>U\\<^esub> \\<zero>'\\<^bsub>U\\<^esub> \\<one>'\\<^bsub>U\\<^esub>\"\n      if \"is_open U\" for U"], ["proof (prove)\ngoal (1 subgoal):\n 1. ring_homomorphism (fam_morphisms' U) (\\<FF> U) +\\<^bsub>U\\<^esub>\n     \\<cdot>\\<^bsub>U\\<^esub> \\<zero>\\<^bsub>U\\<^esub>\n     \\<one>\\<^bsub>U\\<^esub> (\\<FF>' U) +'\\<^bsub>U\\<^esub>\n     \\<cdot>'\\<^bsub>U\\<^esub> \\<zero>'\\<^bsub>U\\<^esub>\n     \\<one>'\\<^bsub>U\\<^esub>", "apply (rule is_ring_morphism[OF that,THEN ring_homomorphism.ring_homomorphism_\\<eta>_cong])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> \\<FF> U \\<Longrightarrow>\n       fam_morphisms' U x = fam_morphisms U x\n 2. fam_morphisms' U \\<in> extensional (\\<FF> U)", "using fam_eq fam_ext"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_open ?U1; ?x1 \\<in> \\<FF> ?U1\\<rbrakk>\n  \\<Longrightarrow> fam_morphisms' ?U1 ?x1 = fam_morphisms ?U1 ?x1\n  is_open ?U1 \\<Longrightarrow>\n  fam_morphisms' ?U1 \\<in> extensional (\\<FF> ?U1)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> \\<FF> U \\<Longrightarrow>\n       fam_morphisms' U x = fam_morphisms U x\n 2. fam_morphisms' U \\<in> extensional (\\<FF> U)", "by (auto simp add: that)"], ["proof (state)\nthis:\n  is_open ?U1 \\<Longrightarrow>\n  ring_homomorphism (fam_morphisms' ?U1) (\\<FF> ?U1) +\\<^bsub>?U1\\<^esub>\n   \\<cdot>\\<^bsub>?U1\\<^esub> \\<zero>\\<^bsub>?U1\\<^esub>\n   \\<one>\\<^bsub>?U1\\<^esub> (\\<FF>' ?U1) +'\\<^bsub>?U1\\<^esub>\n   \\<cdot>'\\<^bsub>?U1\\<^esub> \\<zero>'\\<^bsub>?U1\\<^esub>\n   \\<one>'\\<^bsub>?U1\\<^esub>\n\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings_axioms is_open \\<FF> \\<rho> add_str\n     mult_str zero_str one_str \\<FF>' \\<rho>' add_str' mult_str' zero_str'\n     one_str' fam_morphisms'", "moreover"], ["proof (state)\nthis:\n  is_open ?U1 \\<Longrightarrow>\n  ring_homomorphism (fam_morphisms' ?U1) (\\<FF> ?U1) +\\<^bsub>?U1\\<^esub>\n   \\<cdot>\\<^bsub>?U1\\<^esub> \\<zero>\\<^bsub>?U1\\<^esub>\n   \\<one>\\<^bsub>?U1\\<^esub> (\\<FF>' ?U1) +'\\<^bsub>?U1\\<^esub>\n   \\<cdot>'\\<^bsub>?U1\\<^esub> \\<zero>'\\<^bsub>?U1\\<^esub>\n   \\<one>'\\<^bsub>?U1\\<^esub>\n\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings_axioms is_open \\<FF> \\<rho> add_str\n     mult_str zero_str one_str \\<FF>' \\<rho>' add_str' mult_str' zero_str'\n     one_str' fam_morphisms'", "have \"(\\<rho>' U V \\<circ> fam_morphisms' U) x = (fam_morphisms' V \\<circ> \\<rho> U V) x\" \n      if \"is_open U\" \"is_open V\" \"V \\<subseteq> U\" \"x \\<in> \\<FF> U\" for U V x"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<rho>' U V \\<circ> fam_morphisms' U) x =\n    (fam_morphisms' V \\<circ> \\<rho> U V) x", "by (metis calculation comm_diagrams fam_eq fam_morphisms_are_maps map_eq ring_homomorphism_def \n          that(1) that(2) that(3) that(4))"], ["proof (state)\nthis:\n  \\<lbrakk>is_open ?U1; is_open ?V1; ?V1 \\<subseteq> ?U1;\n   ?x1 \\<in> \\<FF> ?U1\\<rbrakk>\n  \\<Longrightarrow> (\\<rho>' ?U1 ?V1 \\<circ> fam_morphisms' ?U1) ?x1 =\n                    (fam_morphisms' ?V1 \\<circ> \\<rho> ?U1 ?V1) ?x1\n\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings_axioms is_open \\<FF> \\<rho> add_str\n     mult_str zero_str one_str \\<FF>' \\<rho>' add_str' mult_str' zero_str'\n     one_str' fam_morphisms'", "ultimately"], ["proof (chain)\npicking this:\n  is_open ?U1 \\<Longrightarrow>\n  ring_homomorphism (fam_morphisms' ?U1) (\\<FF> ?U1) +\\<^bsub>?U1\\<^esub>\n   \\<cdot>\\<^bsub>?U1\\<^esub> \\<zero>\\<^bsub>?U1\\<^esub>\n   \\<one>\\<^bsub>?U1\\<^esub> (\\<FF>' ?U1) +'\\<^bsub>?U1\\<^esub>\n   \\<cdot>'\\<^bsub>?U1\\<^esub> \\<zero>'\\<^bsub>?U1\\<^esub>\n   \\<one>'\\<^bsub>?U1\\<^esub>\n  \\<lbrakk>is_open ?U1; is_open ?V1; ?V1 \\<subseteq> ?U1;\n   ?x1 \\<in> \\<FF> ?U1\\<rbrakk>\n  \\<Longrightarrow> (\\<rho>' ?U1 ?V1 \\<circ> fam_morphisms' ?U1) ?x1 =\n                    (fam_morphisms' ?V1 \\<circ> \\<rho> ?U1 ?V1) ?x1", "show ?thesis"], ["proof (prove)\nusing this:\n  is_open ?U1 \\<Longrightarrow>\n  ring_homomorphism (fam_morphisms' ?U1) (\\<FF> ?U1) +\\<^bsub>?U1\\<^esub>\n   \\<cdot>\\<^bsub>?U1\\<^esub> \\<zero>\\<^bsub>?U1\\<^esub>\n   \\<one>\\<^bsub>?U1\\<^esub> (\\<FF>' ?U1) +'\\<^bsub>?U1\\<^esub>\n   \\<cdot>'\\<^bsub>?U1\\<^esub> \\<zero>'\\<^bsub>?U1\\<^esub>\n   \\<one>'\\<^bsub>?U1\\<^esub>\n  \\<lbrakk>is_open ?U1; is_open ?V1; ?V1 \\<subseteq> ?U1;\n   ?x1 \\<in> \\<FF> ?U1\\<rbrakk>\n  \\<Longrightarrow> (\\<rho>' ?U1 ?V1 \\<circ> fam_morphisms' ?U1) ?x1 =\n                    (fam_morphisms' ?V1 \\<circ> \\<rho> ?U1 ?V1) ?x1\n\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings_axioms is_open \\<FF> \\<rho> add_str\n     mult_str zero_str one_str \\<FF>' \\<rho>' add_str' mult_str' zero_str'\n     one_str' fam_morphisms'", "using comm_diagrams is_ring_morphism"], ["proof (prove)\nusing this:\n  is_open ?U1 \\<Longrightarrow>\n  ring_homomorphism (fam_morphisms' ?U1) (\\<FF> ?U1) +\\<^bsub>?U1\\<^esub>\n   \\<cdot>\\<^bsub>?U1\\<^esub> \\<zero>\\<^bsub>?U1\\<^esub>\n   \\<one>\\<^bsub>?U1\\<^esub> (\\<FF>' ?U1) +'\\<^bsub>?U1\\<^esub>\n   \\<cdot>'\\<^bsub>?U1\\<^esub> \\<zero>'\\<^bsub>?U1\\<^esub>\n   \\<one>'\\<^bsub>?U1\\<^esub>\n  \\<lbrakk>is_open ?U1; is_open ?V1; ?V1 \\<subseteq> ?U1;\n   ?x1 \\<in> \\<FF> ?U1\\<rbrakk>\n  \\<Longrightarrow> (\\<rho>' ?U1 ?V1 \\<circ> fam_morphisms' ?U1) ?x1 =\n                    (fam_morphisms' ?V1 \\<circ> \\<rho> ?U1 ?V1) ?x1\n  \\<lbrakk>is_open ?U; is_open ?V; ?V \\<subseteq> ?U;\n   ?x \\<in> \\<FF> ?U\\<rbrakk>\n  \\<Longrightarrow> (\\<rho>' ?U ?V \\<circ> fam_morphisms ?U) ?x =\n                    (fam_morphisms ?V \\<circ> \\<rho> ?U ?V) ?x\n  is_open ?U \\<Longrightarrow>\n  ring_homomorphism (fam_morphisms ?U) (\\<FF> ?U) +\\<^bsub>?U\\<^esub>\n   \\<cdot>\\<^bsub>?U\\<^esub> \\<zero>\\<^bsub>?U\\<^esub>\n   \\<one>\\<^bsub>?U\\<^esub> (\\<FF>' ?U) +'\\<^bsub>?U\\<^esub>\n   \\<cdot>'\\<^bsub>?U\\<^esub> \\<zero>'\\<^bsub>?U\\<^esub>\n   \\<one>'\\<^bsub>?U\\<^esub>\n\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings_axioms is_open \\<FF> \\<rho> add_str\n     mult_str zero_str one_str \\<FF>' \\<rho>' add_str' mult_str' zero_str'\n     one_str' fam_morphisms'", "unfolding morphism_presheaves_of_rings_axioms_def"], ["proof (prove)\nusing this:\n  is_open ?U1 \\<Longrightarrow>\n  ring_homomorphism (fam_morphisms' ?U1) (\\<FF> ?U1) +\\<^bsub>?U1\\<^esub>\n   \\<cdot>\\<^bsub>?U1\\<^esub> \\<zero>\\<^bsub>?U1\\<^esub>\n   \\<one>\\<^bsub>?U1\\<^esub> (\\<FF>' ?U1) +'\\<^bsub>?U1\\<^esub>\n   \\<cdot>'\\<^bsub>?U1\\<^esub> \\<zero>'\\<^bsub>?U1\\<^esub>\n   \\<one>'\\<^bsub>?U1\\<^esub>\n  \\<lbrakk>is_open ?U1; is_open ?V1; ?V1 \\<subseteq> ?U1;\n   ?x1 \\<in> \\<FF> ?U1\\<rbrakk>\n  \\<Longrightarrow> (\\<rho>' ?U1 ?V1 \\<circ> fam_morphisms' ?U1) ?x1 =\n                    (fam_morphisms' ?V1 \\<circ> \\<rho> ?U1 ?V1) ?x1\n  \\<lbrakk>is_open ?U; is_open ?V; ?V \\<subseteq> ?U;\n   ?x \\<in> \\<FF> ?U\\<rbrakk>\n  \\<Longrightarrow> (\\<rho>' ?U ?V \\<circ> fam_morphisms ?U) ?x =\n                    (fam_morphisms ?V \\<circ> \\<rho> ?U ?V) ?x\n  is_open ?U \\<Longrightarrow>\n  ring_homomorphism (fam_morphisms ?U) (\\<FF> ?U) +\\<^bsub>?U\\<^esub>\n   \\<cdot>\\<^bsub>?U\\<^esub> \\<zero>\\<^bsub>?U\\<^esub>\n   \\<one>\\<^bsub>?U\\<^esub> (\\<FF>' ?U) +'\\<^bsub>?U\\<^esub>\n   \\<cdot>'\\<^bsub>?U\\<^esub> \\<zero>'\\<^bsub>?U\\<^esub>\n   \\<one>'\\<^bsub>?U\\<^esub>\n\ngoal (1 subgoal):\n 1. (\\<forall>U.\n        is_open U \\<longrightarrow>\n        ring_homomorphism (fam_morphisms' U) (\\<FF> U) +\\<^bsub>U\\<^esub>\n         \\<cdot>\\<^bsub>U\\<^esub> \\<zero>\\<^bsub>U\\<^esub>\n         \\<one>\\<^bsub>U\\<^esub> (\\<FF>' U) +'\\<^bsub>U\\<^esub>\n         \\<cdot>'\\<^bsub>U\\<^esub> \\<zero>'\\<^bsub>U\\<^esub>\n         \\<one>'\\<^bsub>U\\<^esub>) \\<and>\n    (\\<forall>U V.\n        is_open U \\<longrightarrow>\n        is_open V \\<longrightarrow>\n        V \\<subseteq> U \\<longrightarrow>\n        (\\<forall>x.\n            x \\<in> \\<FF> U \\<longrightarrow>\n            (\\<rho>' U V \\<circ> fam_morphisms' U) x =\n            (fam_morphisms' V \\<circ> \\<rho> U V) x))", "by auto"], ["proof (state)\nthis:\n  morphism_presheaves_of_rings_axioms is_open \\<FF> \\<rho> add_str mult_str\n   zero_str one_str \\<FF>' \\<rho>' add_str' mult_str' zero_str' one_str'\n   fam_morphisms'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  morphism_presheaves_of_rings_axioms is_open \\<FF> \\<rho> add_str mult_str\n   zero_str one_str \\<FF>' \\<rho>' add_str' mult_str' zero_str' one_str'\n   fam_morphisms'\n\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings X is_open \\<FF> \\<rho> b add_str mult_str\n     zero_str one_str \\<FF>' \\<rho>' b' add_str' mult_str' zero_str'\n     one_str' fam_morphisms'", "ultimately"], ["proof (chain)\npicking this:\n  presheaf_of_rings X is_open \\<FF> \\<rho> b add_str mult_str zero_str\n   one_str\n  presheaf_of_rings X is_open \\<FF>' \\<rho>' b' add_str' mult_str' zero_str'\n   one_str'\n  morphism_presheaves_of_rings_axioms is_open \\<FF> \\<rho> add_str mult_str\n   zero_str one_str \\<FF>' \\<rho>' add_str' mult_str' zero_str' one_str'\n   fam_morphisms'", "show ?thesis"], ["proof (prove)\nusing this:\n  presheaf_of_rings X is_open \\<FF> \\<rho> b add_str mult_str zero_str\n   one_str\n  presheaf_of_rings X is_open \\<FF>' \\<rho>' b' add_str' mult_str' zero_str'\n   one_str'\n  morphism_presheaves_of_rings_axioms is_open \\<FF> \\<rho> add_str mult_str\n   zero_str one_str \\<FF>' \\<rho>' add_str' mult_str' zero_str' one_str'\n   fam_morphisms'\n\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings X is_open \\<FF> \\<rho> b add_str mult_str\n     zero_str one_str \\<FF>' \\<rho>' b' add_str' mult_str' zero_str'\n     one_str' fam_morphisms'", "unfolding morphism_presheaves_of_rings_def"], ["proof (prove)\nusing this:\n  presheaf_of_rings X is_open \\<FF> \\<rho> b add_str mult_str zero_str\n   one_str\n  presheaf_of_rings X is_open \\<FF>' \\<rho>' b' add_str' mult_str' zero_str'\n   one_str'\n  morphism_presheaves_of_rings_axioms is_open \\<FF> \\<rho> add_str mult_str\n   zero_str one_str \\<FF>' \\<rho>' add_str' mult_str' zero_str' one_str'\n   fam_morphisms'\n\ngoal (1 subgoal):\n 1. presheaf_of_rings X is_open \\<FF> \\<rho> b add_str mult_str zero_str\n     one_str \\<and>\n    presheaf_of_rings X is_open \\<FF>' \\<rho>' b' add_str' mult_str'\n     zero_str' one_str' \\<and>\n    morphism_presheaves_of_rings_axioms is_open \\<FF> \\<rho> add_str\n     mult_str zero_str one_str \\<FF>' \\<rho>' add_str' mult_str' zero_str'\n     one_str' fam_morphisms'", "by auto"], ["proof (state)\nthis:\n  morphism_presheaves_of_rings X is_open \\<FF> \\<rho> b add_str mult_str\n   zero_str one_str \\<FF>' \\<rho>' b' add_str' mult_str' zero_str' one_str'\n   fam_morphisms'\n\ngoal:\nNo subgoals!", "qed"], ["", "section \\<open>Affine Schemes\\<close>"], ["", "text \\<open>Computational affine schemes take the isomorphism with Spec as part of their data,\nwhile in the locale for affine schemes we merely assert the existence of such an isomorphism.\\<close>"], ["", "locale affine_scheme = comm_ring +\nlocally_ringed_space X is_open \\<O>\\<^sub>X \\<rho> b add_str mult_str zero_str one_str +\niso_locally_ringed_spaces X is_open \\<O>\\<^sub>X \\<rho> b add_str mult_str zero_str one_str\n\"Spec\" is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b \"\\<lambda>U. add_sheaf_spec U\"\n\"\\<lambda>U. mult_sheaf_spec U\" \"\\<lambda>U. zero_sheaf_spec U\" \"\\<lambda>U. one_sheaf_spec U\" f \\<phi>\\<^sub>f\nfor X is_open \\<O>\\<^sub>X \\<rho> b add_str mult_str zero_str one_str f \\<phi>\\<^sub>f"], ["", "section \\<open>Schemes\\<close>"], ["", "(* def. 0.47 *)"], ["", "locale scheme = comm_ring + \nlocally_ringed_space X is_open \\<O>\\<^sub>X \\<rho> b add_str mult_str zero_str one_str \nfor X is_open \\<O>\\<^sub>X \\<rho> b add_str mult_str zero_str one_str +\n  assumes are_affine_schemes: \"\\<And>x. x \\<in> X \\<Longrightarrow> (\\<exists>U. x\\<in>U \\<and> is_open U \\<and> \n(\\<exists>f \\<phi>\\<^sub>f. affine_scheme  R (+) (\\<cdot>) \\<zero> \\<one> U (ind_topology.ind_is_open X is_open U) (ind_sheaf.ind_sheaf \\<O>\\<^sub>X U) \n(ind_sheaf.ind_ring_morphisms \\<rho> U) b (ind_sheaf.ind_add_str add_str U)\n(ind_sheaf.ind_mult_str mult_str U) (ind_sheaf.ind_zero_str zero_str U)\n(ind_sheaf.ind_one_str one_str U) f \\<phi>\\<^sub>f))\""], ["", "locale iso_stalks = \n  stk1:stalk S is_open \\<FF>1 \\<rho>1 b add_str1 mult_str1 zero_str1 one_str1 I x +\n  stk2:stalk S is_open \\<FF>2 \\<rho>2 b add_str2 mult_str2 zero_str2 one_str2 I x\n  for S is_open \\<FF>1 \\<rho>1 b add_str1 mult_str1 zero_str1 one_str1 I x \n        \\<FF>2 \\<rho>2 add_str2 mult_str2 zero_str2 one_str2 +\n  assumes \n    stalk_eq:\"\\<forall>U\\<in>I. \\<FF>1 U = \\<FF>2 U \\<and> add_str1 U = add_str2 U \\<and> mult_str1 U = mult_str2 U \n            \\<and> zero_str1 U = zero_str2 U \\<and> one_str1 U = one_str2 U\"\n    and stalk\\<rho>_eq:\"\\<forall>U V. U\\<in>I \\<and> V \\<in>I \\<longrightarrow> \\<rho>1 U V = \\<rho>2 U V\"\nbegin"], ["", "lemma \n  assumes \"U \\<in> I\"\n  shows has_ring_isomorphism:\"ring_isomorphism (identity stk1.carrier_stalk) stk1.carrier_stalk \n          stk1.add_stalk stk1.mult_stalk (stk1.zero_stalk U) (stk1.one_stalk U)\n          stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk (stk2.zero_stalk U) (stk2.one_stalk U)\"\n   and carrier_stalk_eq:\"stk1.carrier_stalk = stk2.carrier_stalk\"\n   and class_of_eq:\"stk1.class_of = stk2.class_of\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ring_isomorphism (identity stk1.carrier_stalk) stk1.carrier_stalk\n     stk1.add_stalk stk1.mult_stalk (stk1.zero_stalk U) (stk1.one_stalk U)\n     stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk (stk2.zero_stalk U)\n     (stk2.one_stalk U) &&&\n    stk1.carrier_stalk = stk2.carrier_stalk &&&\n    stk1.class_of = stk2.class_of", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. ring_isomorphism (identity stk1.carrier_stalk) stk1.carrier_stalk\n     stk1.add_stalk stk1.mult_stalk (stk1.zero_stalk U) (stk1.one_stalk U)\n     stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk (stk2.zero_stalk U)\n     (stk2.one_stalk U)\n 2. stk1.carrier_stalk = stk2.carrier_stalk\n 3. stk1.class_of = stk2.class_of", "have \"is_open U\" \"x \\<in> U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_open U &&& x \\<in> U", "using stk1.index assms"], ["proof (prove)\nusing this:\n  I = {U. is_open U \\<and> x \\<in> U}\n  U \\<in> I\n\ngoal (1 subgoal):\n 1. is_open U &&& x \\<in> U", "by auto"], ["proof (state)\nthis:\n  is_open U\n  x \\<in> U\n\ngoal (3 subgoals):\n 1. ring_isomorphism (identity stk1.carrier_stalk) stk1.carrier_stalk\n     stk1.add_stalk stk1.mult_stalk (stk1.zero_stalk U) (stk1.one_stalk U)\n     stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk (stk2.zero_stalk U)\n     (stk2.one_stalk U)\n 2. stk1.carrier_stalk = stk2.carrier_stalk\n 3. stk1.class_of = stk2.class_of", "interpret ring1:ring stk1.carrier_stalk stk1.add_stalk stk1.mult_stalk \"stk1.zero_stalk U\" \n                  \"stk1.one_stalk U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ring stk1.carrier_stalk stk1.add_stalk stk1.mult_stalk\n     (stk1.zero_stalk U) (stk1.one_stalk U)", "using stk1.stalk_is_ring[OF \\<open>is_open U\\<close> \\<open>x \\<in> U\\<close>]"], ["proof (prove)\nusing this:\n  ring stk1.carrier_stalk stk1.add_stalk stk1.mult_stalk (stk1.zero_stalk U)\n   (stk1.one_stalk U)\n\ngoal (1 subgoal):\n 1. ring stk1.carrier_stalk stk1.add_stalk stk1.mult_stalk\n     (stk1.zero_stalk U) (stk1.one_stalk U)", "."], ["proof (state)\ngoal (3 subgoals):\n 1. ring_isomorphism (identity stk1.carrier_stalk) stk1.carrier_stalk\n     stk1.add_stalk stk1.mult_stalk (stk1.zero_stalk U) (stk1.one_stalk U)\n     stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk (stk2.zero_stalk U)\n     (stk2.one_stalk U)\n 2. stk1.carrier_stalk = stk2.carrier_stalk\n 3. stk1.class_of = stk2.class_of", "interpret ring2:ring stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk \"stk2.zero_stalk U\"\n                  \"stk2.one_stalk U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ring stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk\n     (stk2.zero_stalk U) (stk2.one_stalk U)", "using stk2.stalk_is_ring[OF \\<open>is_open U\\<close> \\<open>x \\<in> U\\<close>]"], ["proof (prove)\nusing this:\n  ring stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk (stk2.zero_stalk U)\n   (stk2.one_stalk U)\n\ngoal (1 subgoal):\n 1. ring stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk\n     (stk2.zero_stalk U) (stk2.one_stalk U)", "."], ["proof (state)\ngoal (3 subgoals):\n 1. ring_isomorphism (identity stk1.carrier_stalk) stk1.carrier_stalk\n     stk1.add_stalk stk1.mult_stalk (stk1.zero_stalk U) (stk1.one_stalk U)\n     stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk (stk2.zero_stalk U)\n     (stk2.one_stalk U)\n 2. stk1.carrier_stalk = stk2.carrier_stalk\n 3. stk1.class_of = stk2.class_of", "interpret e1:equivalence \"Sigma I \\<FF>1\" \"{(x, y). stk1.rel x y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivalence (Sigma I \\<FF>1) {(x, y). stk1.rel x y}", "using stk1.rel_is_equivalence"], ["proof (prove)\nusing this:\n  equivalence (Sigma I \\<FF>1) {(x, y). stk1.rel x y}\n\ngoal (1 subgoal):\n 1. equivalence (Sigma I \\<FF>1) {(x, y). stk1.rel x y}", "."], ["proof (state)\ngoal (3 subgoals):\n 1. ring_isomorphism (identity stk1.carrier_stalk) stk1.carrier_stalk\n     stk1.add_stalk stk1.mult_stalk (stk1.zero_stalk U) (stk1.one_stalk U)\n     stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk (stk2.zero_stalk U)\n     (stk2.one_stalk U)\n 2. stk1.carrier_stalk = stk2.carrier_stalk\n 3. stk1.class_of = stk2.class_of", "interpret e2:equivalence \"Sigma I \\<FF>2\" \"{(x, y). stk2.rel x y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivalence (Sigma I \\<FF>2) {(x, y). stk2.rel x y}", "using stk2.rel_is_equivalence"], ["proof (prove)\nusing this:\n  equivalence (Sigma I \\<FF>2) {(x, y). stk2.rel x y}\n\ngoal (1 subgoal):\n 1. equivalence (Sigma I \\<FF>2) {(x, y). stk2.rel x y}", "."], ["proof (state)\ngoal (3 subgoals):\n 1. ring_isomorphism (identity stk1.carrier_stalk) stk1.carrier_stalk\n     stk1.add_stalk stk1.mult_stalk (stk1.zero_stalk U) (stk1.one_stalk U)\n     stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk (stk2.zero_stalk U)\n     (stk2.one_stalk U)\n 2. stk1.carrier_stalk = stk2.carrier_stalk\n 3. stk1.class_of = stk2.class_of", "have Sigma_eq:\"Sigma I \\<FF>1  =  Sigma I \\<FF>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma I \\<FF>1 = Sigma I \\<FF>2", "proof (rule Sigma_cong[OF refl])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> I \\<Longrightarrow> \\<FF>1 x = \\<FF>2 x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> I \\<Longrightarrow> \\<FF>1 x = \\<FF>2 x", "assume \"x \\<in> I\""], ["proof (state)\nthis:\n  x \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> I \\<Longrightarrow> \\<FF>1 x = \\<FF>2 x", "from stalk_eq[rule_format,OF this]"], ["proof (chain)\npicking this:\n  \\<FF>1 x = \\<FF>2 x \\<and>\n  add_str1 x = add_str2 x \\<and>\n  mult_str1 x = mult_str2 x \\<and>\n  zero_str1 x = zero_str2 x \\<and> one_str1 x = one_str2 x", "show \"\\<FF>1 x = \\<FF>2 x\""], ["proof (prove)\nusing this:\n  \\<FF>1 x = \\<FF>2 x \\<and>\n  add_str1 x = add_str2 x \\<and>\n  mult_str1 x = mult_str2 x \\<and>\n  zero_str1 x = zero_str2 x \\<and> one_str1 x = one_str2 x\n\ngoal (1 subgoal):\n 1. \\<FF>1 x = \\<FF>2 x", "by simp"], ["proof (state)\nthis:\n  \\<FF>1 x = \\<FF>2 x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Sigma I \\<FF>1 = Sigma I \\<FF>2\n\ngoal (3 subgoals):\n 1. ring_isomorphism (identity stk1.carrier_stalk) stk1.carrier_stalk\n     stk1.add_stalk stk1.mult_stalk (stk1.zero_stalk U) (stk1.one_stalk U)\n     stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk (stk2.zero_stalk U)\n     (stk2.one_stalk U)\n 2. stk1.carrier_stalk = stk2.carrier_stalk\n 3. stk1.class_of = stk2.class_of", "moreover"], ["proof (state)\nthis:\n  Sigma I \\<FF>1 = Sigma I \\<FF>2\n\ngoal (3 subgoals):\n 1. ring_isomorphism (identity stk1.carrier_stalk) stk1.carrier_stalk\n     stk1.add_stalk stk1.mult_stalk (stk1.zero_stalk U) (stk1.one_stalk U)\n     stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk (stk2.zero_stalk U)\n     (stk2.one_stalk U)\n 2. stk1.carrier_stalk = stk2.carrier_stalk\n 3. stk1.class_of = stk2.class_of", "have \"stk1.rel xx yy \\<longleftrightarrow> stk2.rel xx yy\" \n                  if \"xx\\<in>Sigma I \\<FF>1\" \"yy\\<in>Sigma I \\<FF>2\"\n                  for xx yy"], ["proof (prove)\ngoal (1 subgoal):\n 1. stk1.rel xx yy = stk2.rel xx yy", "unfolding stk1.rel_def stk2.rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((fst xx \\<in> I \\<and> fst yy \\<in> I) \\<and>\n     (snd xx \\<in> \\<FF>1 (fst xx) \\<and>\n      snd yy \\<in> \\<FF>1 (fst yy)) \\<and>\n     (\\<exists>W.\n         W \\<in> I \\<and>\n         W \\<subseteq> fst xx \\<inter> fst yy \\<and>\n         \\<rho>1 (fst xx) W (snd xx) = \\<rho>1 (fst yy) W (snd yy))) =\n    ((fst xx \\<in> I \\<and> fst yy \\<in> I) \\<and>\n     (snd xx \\<in> \\<FF>2 (fst xx) \\<and>\n      snd yy \\<in> \\<FF>2 (fst yy)) \\<and>\n     (\\<exists>W.\n         W \\<in> I \\<and>\n         W \\<subseteq> fst xx \\<inter> fst yy \\<and>\n         \\<rho>2 (fst xx) W (snd xx) = \\<rho>2 (fst yy) W (snd yy)))", "by (metis stalk\\<rho>_eq stalk_eq)"], ["proof (state)\nthis:\n  \\<lbrakk>?xx1 \\<in> Sigma I \\<FF>1; ?yy1 \\<in> Sigma I \\<FF>2\\<rbrakk>\n  \\<Longrightarrow> stk1.rel ?xx1 ?yy1 = stk2.rel ?xx1 ?yy1\n\ngoal (3 subgoals):\n 1. ring_isomorphism (identity stk1.carrier_stalk) stk1.carrier_stalk\n     stk1.add_stalk stk1.mult_stalk (stk1.zero_stalk U) (stk1.one_stalk U)\n     stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk (stk2.zero_stalk U)\n     (stk2.one_stalk U)\n 2. stk1.carrier_stalk = stk2.carrier_stalk\n 3. stk1.class_of = stk2.class_of", "ultimately"], ["proof (chain)\npicking this:\n  Sigma I \\<FF>1 = Sigma I \\<FF>2\n  \\<lbrakk>?xx1 \\<in> Sigma I \\<FF>1; ?yy1 \\<in> Sigma I \\<FF>2\\<rbrakk>\n  \\<Longrightarrow> stk1.rel ?xx1 ?yy1 = stk2.rel ?xx1 ?yy1", "have Class_eq: \"e1.Class = e2.Class\""], ["proof (prove)\nusing this:\n  Sigma I \\<FF>1 = Sigma I \\<FF>2\n  \\<lbrakk>?xx1 \\<in> Sigma I \\<FF>1; ?yy1 \\<in> Sigma I \\<FF>2\\<rbrakk>\n  \\<Longrightarrow> stk1.rel ?xx1 ?yy1 = stk2.rel ?xx1 ?yy1\n\ngoal (1 subgoal):\n 1. e1.Class = e2.Class", "unfolding e1.Class_def e2.Class_def"], ["proof (prove)\nusing this:\n  Sigma I \\<FF>1 = Sigma I \\<FF>2\n  \\<lbrakk>?xx1 \\<in> Sigma I \\<FF>1; ?yy1 \\<in> Sigma I \\<FF>2\\<rbrakk>\n  \\<Longrightarrow> stk1.rel ?xx1 ?yy1 = stk2.rel ?xx1 ?yy1\n\ngoal (1 subgoal):\n 1. (\\<lambda>a\\<in>Sigma I \\<FF>1.\n        {b \\<in> Sigma I \\<FF>1. (b, a) \\<in> {(x, y). stk1.rel x y}}) =\n    (\\<lambda>a\\<in>Sigma I \\<FF>2.\n        {b \\<in> Sigma I \\<FF>2. (b, a) \\<in> {(x, y). stk2.rel x y}})", "by (auto intro!:ext)"], ["proof (state)\nthis:\n  e1.Class = e2.Class\n\ngoal (3 subgoals):\n 1. ring_isomorphism (identity stk1.carrier_stalk) stk1.carrier_stalk\n     stk1.add_stalk stk1.mult_stalk (stk1.zero_stalk U) (stk1.one_stalk U)\n     stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk (stk2.zero_stalk U)\n     (stk2.one_stalk U)\n 2. stk1.carrier_stalk = stk2.carrier_stalk\n 3. stk1.class_of = stk2.class_of", "then"], ["proof (chain)\npicking this:\n  e1.Class = e2.Class", "show class_of_eq:\"stk1.class_of = stk2.class_of\""], ["proof (prove)\nusing this:\n  e1.Class = e2.Class\n\ngoal (1 subgoal):\n 1. stk1.class_of = stk2.class_of", "unfolding stk1.class_of_def stk2.class_of_def"], ["proof (prove)\nusing this:\n  e1.Class = e2.Class\n\ngoal (1 subgoal):\n 1. (\\<lambda>U s. e1.Class (U, s)) = (\\<lambda>U s. e2.Class (U, s))", "by auto"], ["proof (state)\nthis:\n  stk1.class_of = stk2.class_of\n\ngoal (2 subgoals):\n 1. ring_isomorphism (identity stk1.carrier_stalk) stk1.carrier_stalk\n     stk1.add_stalk stk1.mult_stalk (stk1.zero_stalk U) (stk1.one_stalk U)\n     stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk (stk2.zero_stalk U)\n     (stk2.one_stalk U)\n 2. stk1.carrier_stalk = stk2.carrier_stalk", "show \"stk1.carrier_stalk = stk2.carrier_stalk\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stk1.carrier_stalk = stk2.carrier_stalk", "using Class_eq Sigma_eq e1.natural.surjective e2.natural.surjective \n      stk1.carrier_direct_lim_def stk1.carrier_stalk_def stk2.carrier_direct_lim_def \n      stk2.carrier_stalk_def stk2.neighborhoods_eq"], ["proof (prove)\nusing this:\n  e1.Class = e2.Class\n  Sigma I \\<FF>1 = Sigma I \\<FF>2\n  e1.Class ` Sigma I \\<FF>1 = e1.Partition\n  e2.Class ` Sigma I \\<FF>2 = e2.Partition\n  stk1.carrier_direct_lim \\<equiv> e1.Partition\n  stk1.carrier_stalk \\<equiv> dlim \\<FF>1 \\<rho>1 (stk1.neighborhoods x)\n  stk2.carrier_direct_lim \\<equiv> e2.Partition\n  stk2.carrier_stalk \\<equiv> dlim \\<FF>2 \\<rho>2 (stk1.neighborhoods x)\n  stk1.neighborhoods x = I\n\ngoal (1 subgoal):\n 1. stk1.carrier_stalk = stk2.carrier_stalk", "by force"], ["proof (state)\nthis:\n  stk1.carrier_stalk = stk2.carrier_stalk\n\ngoal (1 subgoal):\n 1. ring_isomorphism (identity stk1.carrier_stalk) stk1.carrier_stalk\n     stk1.add_stalk stk1.mult_stalk (stk1.zero_stalk U) (stk1.one_stalk U)\n     stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk (stk2.zero_stalk U)\n     (stk2.one_stalk U)", "let ?id = \"identity stk1.carrier_stalk\""], ["proof (state)\ngoal (1 subgoal):\n 1. ring_isomorphism (identity stk1.carrier_stalk) stk1.carrier_stalk\n     stk1.add_stalk stk1.mult_stalk (stk1.zero_stalk U) (stk1.one_stalk U)\n     stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk (stk2.zero_stalk U)\n     (stk2.one_stalk U)", "show \"ring_isomorphism (identity stk1.carrier_stalk) stk1.carrier_stalk \n          stk1.add_stalk stk1.mult_stalk (stk1.zero_stalk U) (stk1.one_stalk U)\n          stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk (stk2.zero_stalk U) (stk2.one_stalk U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ring_isomorphism (identity stk1.carrier_stalk) stk1.carrier_stalk\n     stk1.add_stalk stk1.mult_stalk (stk1.zero_stalk U) (stk1.one_stalk U)\n     stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk (stk2.zero_stalk U)\n     (stk2.one_stalk U)", "proof"], ["proof (state)\ngoal (6 subgoals):\n 1. identity stk1.carrier_stalk\n    \\<in> stk1.carrier_stalk \\<rightarrow>\\<^sub>E stk2.carrier_stalk\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> stk1.carrier_stalk;\n        y \\<in> stk1.carrier_stalk\\<rbrakk>\n       \\<Longrightarrow> identity stk1.carrier_stalk (stk1.add_stalk x y) =\n                         stk2.add_stalk (identity stk1.carrier_stalk x)\n                          (identity stk1.carrier_stalk y)\n 3. identity stk1.carrier_stalk (stk1.zero_stalk U) = stk2.zero_stalk U\n 4. \\<And>x y.\n       \\<lbrakk>x \\<in> stk1.carrier_stalk;\n        y \\<in> stk1.carrier_stalk\\<rbrakk>\n       \\<Longrightarrow> identity stk1.carrier_stalk (stk1.mult_stalk x y) =\n                         stk2.mult_stalk (identity stk1.carrier_stalk x)\n                          (identity stk1.carrier_stalk y)\n 5. identity stk1.carrier_stalk (stk1.one_stalk U) = stk2.one_stalk U\n 6. bij_betw (identity stk1.carrier_stalk) stk1.carrier_stalk\n     stk2.carrier_stalk", "show \"?id (stk1.one_stalk U) = stk2.one_stalk U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.one_stalk U) = stk2.one_stalk U", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.one_stalk U) = stk2.one_stalk U", "have \"stk1.one_stalk U \\<in> stk1.carrier_stalk\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stk1.one_stalk U \\<in> stk1.carrier_stalk", "by blast"], ["proof (state)\nthis:\n  stk1.one_stalk U \\<in> stk1.carrier_stalk\n\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.one_stalk U) = stk2.one_stalk U", "then"], ["proof (chain)\npicking this:\n  stk1.one_stalk U \\<in> stk1.carrier_stalk", "have \"?id (stk1.one_stalk U) = stk1.one_stalk U\""], ["proof (prove)\nusing this:\n  stk1.one_stalk U \\<in> stk1.carrier_stalk\n\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.one_stalk U) = stk1.one_stalk U", "by auto"], ["proof (state)\nthis:\n  identity stk1.carrier_stalk (stk1.one_stalk U) = stk1.one_stalk U\n\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.one_stalk U) = stk2.one_stalk U", "also"], ["proof (state)\nthis:\n  identity stk1.carrier_stalk (stk1.one_stalk U) = stk1.one_stalk U\n\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.one_stalk U) = stk2.one_stalk U", "have \"... = stk2.one_stalk U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stk1.one_stalk U = stk2.one_stalk U", "unfolding stk1.one_stalk_def stk2.one_stalk_def class_of_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. stk2.class_of U (one_str1 U) = stk2.class_of U (one_str2 U)", "by (simp add: assms stalk_eq)"], ["proof (state)\nthis:\n  stk1.one_stalk U = stk2.one_stalk U\n\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.one_stalk U) = stk2.one_stalk U", "finally"], ["proof (chain)\npicking this:\n  identity stk1.carrier_stalk (stk1.one_stalk U) = stk2.one_stalk U", "show ?thesis"], ["proof (prove)\nusing this:\n  identity stk1.carrier_stalk (stk1.one_stalk U) = stk2.one_stalk U\n\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.one_stalk U) = stk2.one_stalk U", "."], ["proof (state)\nthis:\n  identity stk1.carrier_stalk (stk1.one_stalk U) = stk2.one_stalk U\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  identity stk1.carrier_stalk (stk1.one_stalk U) = stk2.one_stalk U\n\ngoal (5 subgoals):\n 1. identity stk1.carrier_stalk\n    \\<in> stk1.carrier_stalk \\<rightarrow>\\<^sub>E stk2.carrier_stalk\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> stk1.carrier_stalk;\n        y \\<in> stk1.carrier_stalk\\<rbrakk>\n       \\<Longrightarrow> identity stk1.carrier_stalk (stk1.add_stalk x y) =\n                         stk2.add_stalk (identity stk1.carrier_stalk x)\n                          (identity stk1.carrier_stalk y)\n 3. identity stk1.carrier_stalk (stk1.zero_stalk U) = stk2.zero_stalk U\n 4. \\<And>x y.\n       \\<lbrakk>x \\<in> stk1.carrier_stalk;\n        y \\<in> stk1.carrier_stalk\\<rbrakk>\n       \\<Longrightarrow> identity stk1.carrier_stalk (stk1.mult_stalk x y) =\n                         stk2.mult_stalk (identity stk1.carrier_stalk x)\n                          (identity stk1.carrier_stalk y)\n 5. bij_betw (identity stk1.carrier_stalk) stk1.carrier_stalk\n     stk2.carrier_stalk", "show \"?id (stk1.zero_stalk U) = stk2.zero_stalk U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.zero_stalk U) = stk2.zero_stalk U", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.zero_stalk U) = stk2.zero_stalk U", "have \"stk1.zero_stalk U \\<in> stk1.carrier_stalk\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stk1.zero_stalk U \\<in> stk1.carrier_stalk", "by blast"], ["proof (state)\nthis:\n  stk1.zero_stalk U \\<in> stk1.carrier_stalk\n\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.zero_stalk U) = stk2.zero_stalk U", "then"], ["proof (chain)\npicking this:\n  stk1.zero_stalk U \\<in> stk1.carrier_stalk", "have \"?id (stk1.zero_stalk U) = stk1.zero_stalk U\""], ["proof (prove)\nusing this:\n  stk1.zero_stalk U \\<in> stk1.carrier_stalk\n\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.zero_stalk U) = stk1.zero_stalk U", "by auto"], ["proof (state)\nthis:\n  identity stk1.carrier_stalk (stk1.zero_stalk U) = stk1.zero_stalk U\n\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.zero_stalk U) = stk2.zero_stalk U", "also"], ["proof (state)\nthis:\n  identity stk1.carrier_stalk (stk1.zero_stalk U) = stk1.zero_stalk U\n\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.zero_stalk U) = stk2.zero_stalk U", "have \"... = stk2.zero_stalk U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stk1.zero_stalk U = stk2.zero_stalk U", "unfolding stk1.zero_stalk_def stk2.zero_stalk_def class_of_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. stk2.class_of U (zero_str1 U) = stk2.class_of U (zero_str2 U)", "by (simp add: assms stalk_eq)"], ["proof (state)\nthis:\n  stk1.zero_stalk U = stk2.zero_stalk U\n\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.zero_stalk U) = stk2.zero_stalk U", "finally"], ["proof (chain)\npicking this:\n  identity stk1.carrier_stalk (stk1.zero_stalk U) = stk2.zero_stalk U", "show ?thesis"], ["proof (prove)\nusing this:\n  identity stk1.carrier_stalk (stk1.zero_stalk U) = stk2.zero_stalk U\n\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.zero_stalk U) = stk2.zero_stalk U", "."], ["proof (state)\nthis:\n  identity stk1.carrier_stalk (stk1.zero_stalk U) = stk2.zero_stalk U\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  identity stk1.carrier_stalk (stk1.zero_stalk U) = stk2.zero_stalk U\n\ngoal (4 subgoals):\n 1. identity stk1.carrier_stalk\n    \\<in> stk1.carrier_stalk \\<rightarrow>\\<^sub>E stk2.carrier_stalk\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> stk1.carrier_stalk;\n        y \\<in> stk1.carrier_stalk\\<rbrakk>\n       \\<Longrightarrow> identity stk1.carrier_stalk (stk1.add_stalk x y) =\n                         stk2.add_stalk (identity stk1.carrier_stalk x)\n                          (identity stk1.carrier_stalk y)\n 3. \\<And>x y.\n       \\<lbrakk>x \\<in> stk1.carrier_stalk;\n        y \\<in> stk1.carrier_stalk\\<rbrakk>\n       \\<Longrightarrow> identity stk1.carrier_stalk (stk1.mult_stalk x y) =\n                         stk2.mult_stalk (identity stk1.carrier_stalk x)\n                          (identity stk1.carrier_stalk y)\n 4. bij_betw (identity stk1.carrier_stalk) stk1.carrier_stalk\n     stk2.carrier_stalk", "show \"?id (stk1.add_stalk X' Y') = stk2.add_stalk (?id X') (?id Y')\" \n      \"?id (stk1.mult_stalk X' Y') = stk2.mult_stalk (?id X') (?id Y')\" \n      if \"X' \\<in> stk1.carrier_stalk\" \"Y' \\<in> stk1.carrier_stalk\" for X' Y'"], ["proof (prove)\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.add_stalk X' Y') =\n    stk2.add_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y') &&&\n    identity stk1.carrier_stalk (stk1.mult_stalk X' Y') =\n    stk2.mult_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. identity stk1.carrier_stalk (stk1.add_stalk X' Y') =\n    stk2.add_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')\n 2. identity stk1.carrier_stalk (stk1.mult_stalk X' Y') =\n    stk2.mult_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "define x where \"x=(SOME x. x \\<in> X')\""], ["proof (state)\nthis:\n  x = (SOME x. x \\<in> X')\n\ngoal (2 subgoals):\n 1. identity stk1.carrier_stalk (stk1.add_stalk X' Y') =\n    stk2.add_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')\n 2. identity stk1.carrier_stalk (stk1.mult_stalk X' Y') =\n    stk2.mult_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "define y where \"y=(SOME y. y \\<in> Y')\""], ["proof (state)\nthis:\n  y = (SOME y. y \\<in> Y')\n\ngoal (2 subgoals):\n 1. identity stk1.carrier_stalk (stk1.add_stalk X' Y') =\n    stk2.add_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')\n 2. identity stk1.carrier_stalk (stk1.mult_stalk X' Y') =\n    stk2.mult_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "have x:\"x\\<in>X'\" \"x\\<in>Sigma I \\<FF>1\" and x_alt:\"X' = stk1.class_of (fst x) (snd x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> X' &&& x \\<in> Sigma I \\<FF>1) &&&\n    X' = stk1.class_of (fst x) (snd x)", "using stk1.rel_carrier_Eps_in that(1) stk1.carrier_stalk_def stk2.neighborhoods_eq x_def"], ["proof (prove)\nusing this:\n  ?X \\<in> stk1.carrier_direct_lim \\<Longrightarrow>\n  (SOME x. x \\<in> ?X) \\<in> ?X\n  ?X \\<in> stk1.carrier_direct_lim \\<Longrightarrow>\n  (SOME x. x \\<in> ?X) \\<in> Sigma I \\<FF>1\n  ?X \\<in> stk1.carrier_direct_lim \\<Longrightarrow>\n  ?X = stk1.class_of (fst (SOME x. x \\<in> ?X)) (snd (SOME x. x \\<in> ?X))\n  X' \\<in> stk1.carrier_stalk\n  stk1.carrier_stalk \\<equiv> dlim \\<FF>1 \\<rho>1 (stk1.neighborhoods x)\n  stk1.neighborhoods x = I\n  x = (SOME x. x \\<in> X')\n\ngoal (1 subgoal):\n 1. (x \\<in> X' &&& x \\<in> Sigma I \\<FF>1) &&&\n    X' = stk1.class_of (fst x) (snd x)", "by auto"], ["proof (state)\nthis:\n  x \\<in> X'\n  x \\<in> Sigma I \\<FF>1\n  X' = stk1.class_of (fst x) (snd x)\n\ngoal (2 subgoals):\n 1. identity stk1.carrier_stalk (stk1.add_stalk X' Y') =\n    stk2.add_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')\n 2. identity stk1.carrier_stalk (stk1.mult_stalk X' Y') =\n    stk2.mult_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "have y:\"y\\<in>Y'\" \"y\\<in>Sigma I \\<FF>1\" and y_alt:\"Y' = stk1.class_of (fst y) (snd y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y \\<in> Y' &&& y \\<in> Sigma I \\<FF>1) &&&\n    Y' = stk1.class_of (fst y) (snd y)", "using stk1.rel_carrier_Eps_in that(2) stk1.carrier_stalk_def stk2.neighborhoods_eq y_def"], ["proof (prove)\nusing this:\n  ?X \\<in> stk1.carrier_direct_lim \\<Longrightarrow>\n  (SOME x. x \\<in> ?X) \\<in> ?X\n  ?X \\<in> stk1.carrier_direct_lim \\<Longrightarrow>\n  (SOME x. x \\<in> ?X) \\<in> Sigma I \\<FF>1\n  ?X \\<in> stk1.carrier_direct_lim \\<Longrightarrow>\n  ?X = stk1.class_of (fst (SOME x. x \\<in> ?X)) (snd (SOME x. x \\<in> ?X))\n  Y' \\<in> stk1.carrier_stalk\n  stk1.carrier_stalk \\<equiv> dlim \\<FF>1 \\<rho>1 (stk1.neighborhoods x)\n  stk1.neighborhoods x = I\n  y = (SOME y. y \\<in> Y')\n\ngoal (1 subgoal):\n 1. (y \\<in> Y' &&& y \\<in> Sigma I \\<FF>1) &&&\n    Y' = stk1.class_of (fst y) (snd y)", "by auto"], ["proof (state)\nthis:\n  y \\<in> Y'\n  y \\<in> Sigma I \\<FF>1\n  Y' = stk1.class_of (fst y) (snd y)\n\ngoal (2 subgoals):\n 1. identity stk1.carrier_stalk (stk1.add_stalk X' Y') =\n    stk2.add_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')\n 2. identity stk1.carrier_stalk (stk1.mult_stalk X' Y') =\n    stk2.mult_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "obtain \"fst x \\<subseteq> S\" \"fst y \\<subseteq> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>fst x \\<subseteq> S; fst y \\<subseteq> S\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using x(2) y(2) stk1.index"], ["proof (prove)\nusing this:\n  x \\<in> Sigma I \\<FF>1\n  y \\<in> Sigma I \\<FF>1\n  I = {U. is_open U \\<and> x \\<in> U}\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>fst x \\<subseteq> S; fst y \\<subseteq> S\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis mem_Sigma_iff prod.collapse stk1.open_imp_subset stk2.subset_of_opens)"], ["proof (state)\nthis:\n  fst x \\<subseteq> S\n  fst y \\<subseteq> S\n\ngoal (2 subgoals):\n 1. identity stk1.carrier_stalk (stk1.add_stalk X' Y') =\n    stk2.add_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')\n 2. identity stk1.carrier_stalk (stk1.mult_stalk X' Y') =\n    stk2.mult_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "obtain w where w: \"w\\<in>I\" \"w \\<subseteq> fst x\" \"w \\<subseteq> fst y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>w \\<in> I; w \\<subseteq> fst x;\n         w \\<subseteq> fst y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using stk1.has_lower_bound x(2) y(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>?U \\<in> I; ?V \\<in> I\\<rbrakk>\n  \\<Longrightarrow> \\<exists>W\\<in>I. W \\<subseteq> ?U \\<inter> ?V\n  x \\<in> Sigma I \\<FF>1\n  y \\<in> Sigma I \\<FF>1\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>w \\<in> I; w \\<subseteq> fst x;\n         w \\<subseteq> fst y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  w \\<in> I\n  w \\<subseteq> fst x\n  w \\<subseteq> fst y\n\ngoal (2 subgoals):\n 1. identity stk1.carrier_stalk (stk1.add_stalk X' Y') =\n    stk2.add_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')\n 2. identity stk1.carrier_stalk (stk1.mult_stalk X' Y') =\n    stk2.mult_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "have \"w \\<subseteq> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<subseteq> S", "by (simp add: stk1.open_imp_subset stk1.subset_of_opens w(1))"], ["proof (state)\nthis:\n  w \\<subseteq> S\n\ngoal (2 subgoals):\n 1. identity stk1.carrier_stalk (stk1.add_stalk X' Y') =\n    stk2.add_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')\n 2. identity stk1.carrier_stalk (stk1.mult_stalk X' Y') =\n    stk2.mult_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "have \"stk1.add_stalk X' Y' = stk1.class_of w (add_str1 w (\\<rho>1 (fst x) w (snd x))\n                                         (\\<rho>1 (fst y) w (snd y)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stk1.add_stalk X' Y' =\n    stk1.class_of w\n     (add_str1 w (\\<rho>1 (fst x) w (snd x)) (\\<rho>1 (fst y) w (snd y)))", "unfolding x_alt y_alt stk1.add_stalk_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. stk1.add_rel (stk1.class_of (fst x) (snd x))\n     (stk1.class_of (fst y) (snd y)) =\n    stk1.class_of w\n     (add_str1 w (\\<rho>1 (fst x) w (snd x)) (\\<rho>1 (fst y) w (snd y)))", "apply (subst stk1.add_rel_class_of[where W=w])"], ["proof (prove)\ngoal (6 subgoals):\n 1. (fst x, snd x) \\<in> Sigma I \\<FF>1\n 2. (fst y, snd y) \\<in> Sigma I \\<FF>1\n 3. w \\<in> I\n 4. w \\<subseteq> fst x\n 5. w \\<subseteq> fst y\n 6. stk1.class_of w\n     (add_str1 w (\\<rho>1 (fst x) w (snd x)) (\\<rho>1 (fst y) w (snd y))) =\n    stk1.class_of w\n     (add_str1 w (\\<rho>1 (fst x) w (snd x)) (\\<rho>1 (fst y) w (snd y)))", "using x y w"], ["proof (prove)\nusing this:\n  x \\<in> X'\n  x \\<in> Sigma I \\<FF>1\n  y \\<in> Y'\n  y \\<in> Sigma I \\<FF>1\n  w \\<in> I\n  w \\<subseteq> fst x\n  w \\<subseteq> fst y\n\ngoal (6 subgoals):\n 1. (fst x, snd x) \\<in> Sigma I \\<FF>1\n 2. (fst y, snd y) \\<in> Sigma I \\<FF>1\n 3. w \\<in> I\n 4. w \\<subseteq> fst x\n 5. w \\<subseteq> fst y\n 6. stk1.class_of w\n     (add_str1 w (\\<rho>1 (fst x) w (snd x)) (\\<rho>1 (fst y) w (snd y))) =\n    stk1.class_of w\n     (add_str1 w (\\<rho>1 (fst x) w (snd x)) (\\<rho>1 (fst y) w (snd y)))", "by auto"], ["proof (state)\nthis:\n  stk1.add_stalk X' Y' =\n  stk1.class_of w\n   (add_str1 w (\\<rho>1 (fst x) w (snd x)) (\\<rho>1 (fst y) w (snd y)))\n\ngoal (2 subgoals):\n 1. identity stk1.carrier_stalk (stk1.add_stalk X' Y') =\n    stk2.add_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')\n 2. identity stk1.carrier_stalk (stk1.mult_stalk X' Y') =\n    stk2.mult_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "also"], ["proof (state)\nthis:\n  stk1.add_stalk X' Y' =\n  stk1.class_of w\n   (add_str1 w (\\<rho>1 (fst x) w (snd x)) (\\<rho>1 (fst y) w (snd y)))\n\ngoal (2 subgoals):\n 1. identity stk1.carrier_stalk (stk1.add_stalk X' Y') =\n    stk2.add_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')\n 2. identity stk1.carrier_stalk (stk1.mult_stalk X' Y') =\n    stk2.mult_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "have \"... = stk2.class_of w (add_str2 w (\\<rho>2 (fst x) w (snd x)) (\\<rho>2 (fst y) w (snd y)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stk1.class_of w\n     (add_str1 w (\\<rho>1 (fst x) w (snd x)) (\\<rho>1 (fst y) w (snd y))) =\n    stk2.class_of w\n     (add_str2 w (\\<rho>2 (fst x) w (snd x)) (\\<rho>2 (fst y) w (snd y)))", "using class_of_eq stalk\\<rho>_eq stalk_eq w(1) x(2) y(2)"], ["proof (prove)\nusing this:\n  stk1.class_of = stk2.class_of\n  \\<forall>U V.\n     U \\<in> I \\<and> V \\<in> I \\<longrightarrow> \\<rho>1 U V = \\<rho>2 U V\n  \\<forall>U\\<in>I.\n     \\<FF>1 U = \\<FF>2 U \\<and>\n     add_str1 U = add_str2 U \\<and>\n     mult_str1 U = mult_str2 U \\<and>\n     zero_str1 U = zero_str2 U \\<and> one_str1 U = one_str2 U\n  w \\<in> I\n  x \\<in> Sigma I \\<FF>1\n  y \\<in> Sigma I \\<FF>1\n\ngoal (1 subgoal):\n 1. stk1.class_of w\n     (add_str1 w (\\<rho>1 (fst x) w (snd x)) (\\<rho>1 (fst y) w (snd y))) =\n    stk2.class_of w\n     (add_str2 w (\\<rho>2 (fst x) w (snd x)) (\\<rho>2 (fst y) w (snd y)))", "by force"], ["proof (state)\nthis:\n  stk1.class_of w\n   (add_str1 w (\\<rho>1 (fst x) w (snd x)) (\\<rho>1 (fst y) w (snd y))) =\n  stk2.class_of w\n   (add_str2 w (\\<rho>2 (fst x) w (snd x)) (\\<rho>2 (fst y) w (snd y)))\n\ngoal (2 subgoals):\n 1. identity stk1.carrier_stalk (stk1.add_stalk X' Y') =\n    stk2.add_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')\n 2. identity stk1.carrier_stalk (stk1.mult_stalk X' Y') =\n    stk2.mult_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "also"], ["proof (state)\nthis:\n  stk1.class_of w\n   (add_str1 w (\\<rho>1 (fst x) w (snd x)) (\\<rho>1 (fst y) w (snd y))) =\n  stk2.class_of w\n   (add_str2 w (\\<rho>2 (fst x) w (snd x)) (\\<rho>2 (fst y) w (snd y)))\n\ngoal (2 subgoals):\n 1. identity stk1.carrier_stalk (stk1.add_stalk X' Y') =\n    stk2.add_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')\n 2. identity stk1.carrier_stalk (stk1.mult_stalk X' Y') =\n    stk2.mult_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "have \"... = stk2.add_stalk X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stk2.class_of w\n     (add_str2 w (\\<rho>2 (fst x) w (snd x)) (\\<rho>2 (fst y) w (snd y))) =\n    stk2.add_stalk X' Y'", "unfolding stk2.add_stalk_def x_alt y_alt class_of_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. stk2.class_of w\n     (add_str2 w (\\<rho>2 (fst x) w (snd x)) (\\<rho>2 (fst y) w (snd y))) =\n    stk2.add_rel (stk2.class_of (fst x) (snd x))\n     (stk2.class_of (fst y) (snd y))", "apply (subst stk2.add_rel_class_of[where W=w])"], ["proof (prove)\ngoal (6 subgoals):\n 1. (fst x, snd x) \\<in> Sigma I \\<FF>2\n 2. (fst y, snd y) \\<in> Sigma I \\<FF>2\n 3. w \\<in> I\n 4. w \\<subseteq> fst x\n 5. w \\<subseteq> fst y\n 6. stk2.class_of w\n     (add_str2 w (\\<rho>2 (fst x) w (snd x)) (\\<rho>2 (fst y) w (snd y))) =\n    stk2.class_of w\n     (add_str2 w (\\<rho>2 (fst x) w (snd x)) (\\<rho>2 (fst y) w (snd y)))", "using x y w"], ["proof (prove)\nusing this:\n  x \\<in> X'\n  x \\<in> Sigma I \\<FF>1\n  y \\<in> Y'\n  y \\<in> Sigma I \\<FF>1\n  w \\<in> I\n  w \\<subseteq> fst x\n  w \\<subseteq> fst y\n\ngoal (6 subgoals):\n 1. (fst x, snd x) \\<in> Sigma I \\<FF>2\n 2. (fst y, snd y) \\<in> Sigma I \\<FF>2\n 3. w \\<in> I\n 4. w \\<subseteq> fst x\n 5. w \\<subseteq> fst y\n 6. stk2.class_of w\n     (add_str2 w (\\<rho>2 (fst x) w (snd x)) (\\<rho>2 (fst y) w (snd y))) =\n    stk2.class_of w\n     (add_str2 w (\\<rho>2 (fst x) w (snd x)) (\\<rho>2 (fst y) w (snd y)))", "by (auto simp add: Sigma_eq)"], ["proof (state)\nthis:\n  stk2.class_of w\n   (add_str2 w (\\<rho>2 (fst x) w (snd x)) (\\<rho>2 (fst y) w (snd y))) =\n  stk2.add_stalk X' Y'\n\ngoal (2 subgoals):\n 1. identity stk1.carrier_stalk (stk1.add_stalk X' Y') =\n    stk2.add_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')\n 2. identity stk1.carrier_stalk (stk1.mult_stalk X' Y') =\n    stk2.mult_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "finally"], ["proof (chain)\npicking this:\n  stk1.add_stalk X' Y' = stk2.add_stalk X' Y'", "have \"stk1.add_stalk X' Y' = stk2.add_stalk X' Y'\""], ["proof (prove)\nusing this:\n  stk1.add_stalk X' Y' = stk2.add_stalk X' Y'\n\ngoal (1 subgoal):\n 1. stk1.add_stalk X' Y' = stk2.add_stalk X' Y'", "."], ["proof (state)\nthis:\n  stk1.add_stalk X' Y' = stk2.add_stalk X' Y'\n\ngoal (2 subgoals):\n 1. identity stk1.carrier_stalk (stk1.add_stalk X' Y') =\n    stk2.add_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')\n 2. identity stk1.carrier_stalk (stk1.mult_stalk X' Y') =\n    stk2.mult_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "moreover"], ["proof (state)\nthis:\n  stk1.add_stalk X' Y' = stk2.add_stalk X' Y'\n\ngoal (2 subgoals):\n 1. identity stk1.carrier_stalk (stk1.add_stalk X' Y') =\n    stk2.add_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')\n 2. identity stk1.carrier_stalk (stk1.mult_stalk X' Y') =\n    stk2.mult_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "have \"stk1.add_stalk X' Y' \\<in> stk1.carrier_stalk\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stk1.add_stalk X' Y' \\<in> stk1.carrier_stalk", "by (simp add: that(1) that(2))"], ["proof (state)\nthis:\n  stk1.add_stalk X' Y' \\<in> stk1.carrier_stalk\n\ngoal (2 subgoals):\n 1. identity stk1.carrier_stalk (stk1.add_stalk X' Y') =\n    stk2.add_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')\n 2. identity stk1.carrier_stalk (stk1.mult_stalk X' Y') =\n    stk2.mult_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "ultimately"], ["proof (chain)\npicking this:\n  stk1.add_stalk X' Y' = stk2.add_stalk X' Y'\n  stk1.add_stalk X' Y' \\<in> stk1.carrier_stalk", "show \"?id (stk1.add_stalk X' Y') = stk2.add_stalk (?id X') (?id Y')\""], ["proof (prove)\nusing this:\n  stk1.add_stalk X' Y' = stk2.add_stalk X' Y'\n  stk1.add_stalk X' Y' \\<in> stk1.carrier_stalk\n\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.add_stalk X' Y') =\n    stk2.add_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "using that"], ["proof (prove)\nusing this:\n  stk1.add_stalk X' Y' = stk2.add_stalk X' Y'\n  stk1.add_stalk X' Y' \\<in> stk1.carrier_stalk\n  X' \\<in> stk1.carrier_stalk\n  Y' \\<in> stk1.carrier_stalk\n\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.add_stalk X' Y') =\n    stk2.add_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "by simp"], ["proof (state)\nthis:\n  identity stk1.carrier_stalk (stk1.add_stalk X' Y') =\n  stk2.add_stalk (identity stk1.carrier_stalk X')\n   (identity stk1.carrier_stalk Y')\n\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.mult_stalk X' Y') =\n    stk2.mult_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "have \"stk1.mult_stalk X' Y' = stk1.class_of w (mult_str1 w (\\<rho>1 (fst x) w (snd x))\n                                         (\\<rho>1 (fst y) w (snd y)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stk1.mult_stalk X' Y' =\n    stk1.class_of w\n     (mult_str1 w (\\<rho>1 (fst x) w (snd x)) (\\<rho>1 (fst y) w (snd y)))", "unfolding x_alt y_alt stk1.mult_stalk_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. stk1.mult_rel (stk1.class_of (fst x) (snd x))\n     (stk1.class_of (fst y) (snd y)) =\n    stk1.class_of w\n     (mult_str1 w (\\<rho>1 (fst x) w (snd x)) (\\<rho>1 (fst y) w (snd y)))", "apply (subst stk1.mult_rel_class_of[where W=w])"], ["proof (prove)\ngoal (6 subgoals):\n 1. (fst x, snd x) \\<in> Sigma I \\<FF>1\n 2. (fst y, snd y) \\<in> Sigma I \\<FF>1\n 3. w \\<in> I\n 4. w \\<subseteq> fst x\n 5. w \\<subseteq> fst y\n 6. stk1.class_of w\n     (mult_str1 w (\\<rho>1 (fst x) w (snd x)) (\\<rho>1 (fst y) w (snd y))) =\n    stk1.class_of w\n     (mult_str1 w (\\<rho>1 (fst x) w (snd x)) (\\<rho>1 (fst y) w (snd y)))", "using x y w"], ["proof (prove)\nusing this:\n  x \\<in> X'\n  x \\<in> Sigma I \\<FF>1\n  y \\<in> Y'\n  y \\<in> Sigma I \\<FF>1\n  w \\<in> I\n  w \\<subseteq> fst x\n  w \\<subseteq> fst y\n\ngoal (6 subgoals):\n 1. (fst x, snd x) \\<in> Sigma I \\<FF>1\n 2. (fst y, snd y) \\<in> Sigma I \\<FF>1\n 3. w \\<in> I\n 4. w \\<subseteq> fst x\n 5. w \\<subseteq> fst y\n 6. stk1.class_of w\n     (mult_str1 w (\\<rho>1 (fst x) w (snd x)) (\\<rho>1 (fst y) w (snd y))) =\n    stk1.class_of w\n     (mult_str1 w (\\<rho>1 (fst x) w (snd x)) (\\<rho>1 (fst y) w (snd y)))", "by auto"], ["proof (state)\nthis:\n  stk1.mult_stalk X' Y' =\n  stk1.class_of w\n   (mult_str1 w (\\<rho>1 (fst x) w (snd x)) (\\<rho>1 (fst y) w (snd y)))\n\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.mult_stalk X' Y') =\n    stk2.mult_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "also"], ["proof (state)\nthis:\n  stk1.mult_stalk X' Y' =\n  stk1.class_of w\n   (mult_str1 w (\\<rho>1 (fst x) w (snd x)) (\\<rho>1 (fst y) w (snd y)))\n\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.mult_stalk X' Y') =\n    stk2.mult_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "have \"... = stk2.class_of w (mult_str2 w (\\<rho>2 (fst x) w (snd x)) (\\<rho>2 (fst y) w (snd y)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stk1.class_of w\n     (mult_str1 w (\\<rho>1 (fst x) w (snd x)) (\\<rho>1 (fst y) w (snd y))) =\n    stk2.class_of w\n     (mult_str2 w (\\<rho>2 (fst x) w (snd x)) (\\<rho>2 (fst y) w (snd y)))", "using class_of_eq stalk\\<rho>_eq stalk_eq w(1) x(2) y(2)"], ["proof (prove)\nusing this:\n  stk1.class_of = stk2.class_of\n  \\<forall>U V.\n     U \\<in> I \\<and> V \\<in> I \\<longrightarrow> \\<rho>1 U V = \\<rho>2 U V\n  \\<forall>U\\<in>I.\n     \\<FF>1 U = \\<FF>2 U \\<and>\n     add_str1 U = add_str2 U \\<and>\n     mult_str1 U = mult_str2 U \\<and>\n     zero_str1 U = zero_str2 U \\<and> one_str1 U = one_str2 U\n  w \\<in> I\n  x \\<in> Sigma I \\<FF>1\n  y \\<in> Sigma I \\<FF>1\n\ngoal (1 subgoal):\n 1. stk1.class_of w\n     (mult_str1 w (\\<rho>1 (fst x) w (snd x)) (\\<rho>1 (fst y) w (snd y))) =\n    stk2.class_of w\n     (mult_str2 w (\\<rho>2 (fst x) w (snd x)) (\\<rho>2 (fst y) w (snd y)))", "by force"], ["proof (state)\nthis:\n  stk1.class_of w\n   (mult_str1 w (\\<rho>1 (fst x) w (snd x)) (\\<rho>1 (fst y) w (snd y))) =\n  stk2.class_of w\n   (mult_str2 w (\\<rho>2 (fst x) w (snd x)) (\\<rho>2 (fst y) w (snd y)))\n\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.mult_stalk X' Y') =\n    stk2.mult_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "also"], ["proof (state)\nthis:\n  stk1.class_of w\n   (mult_str1 w (\\<rho>1 (fst x) w (snd x)) (\\<rho>1 (fst y) w (snd y))) =\n  stk2.class_of w\n   (mult_str2 w (\\<rho>2 (fst x) w (snd x)) (\\<rho>2 (fst y) w (snd y)))\n\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.mult_stalk X' Y') =\n    stk2.mult_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "have \"... = stk2.mult_stalk X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stk2.class_of w\n     (mult_str2 w (\\<rho>2 (fst x) w (snd x)) (\\<rho>2 (fst y) w (snd y))) =\n    stk2.mult_stalk X' Y'", "unfolding stk2.mult_stalk_def x_alt y_alt class_of_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. stk2.class_of w\n     (mult_str2 w (\\<rho>2 (fst x) w (snd x)) (\\<rho>2 (fst y) w (snd y))) =\n    stk2.mult_rel (stk2.class_of (fst x) (snd x))\n     (stk2.class_of (fst y) (snd y))", "apply (subst stk2.mult_rel_class_of[where W=w])"], ["proof (prove)\ngoal (6 subgoals):\n 1. (fst x, snd x) \\<in> Sigma I \\<FF>2\n 2. (fst y, snd y) \\<in> Sigma I \\<FF>2\n 3. w \\<in> I\n 4. w \\<subseteq> fst x\n 5. w \\<subseteq> fst y\n 6. stk2.class_of w\n     (mult_str2 w (\\<rho>2 (fst x) w (snd x)) (\\<rho>2 (fst y) w (snd y))) =\n    stk2.class_of w\n     (mult_str2 w (\\<rho>2 (fst x) w (snd x)) (\\<rho>2 (fst y) w (snd y)))", "using x y w"], ["proof (prove)\nusing this:\n  x \\<in> X'\n  x \\<in> Sigma I \\<FF>1\n  y \\<in> Y'\n  y \\<in> Sigma I \\<FF>1\n  w \\<in> I\n  w \\<subseteq> fst x\n  w \\<subseteq> fst y\n\ngoal (6 subgoals):\n 1. (fst x, snd x) \\<in> Sigma I \\<FF>2\n 2. (fst y, snd y) \\<in> Sigma I \\<FF>2\n 3. w \\<in> I\n 4. w \\<subseteq> fst x\n 5. w \\<subseteq> fst y\n 6. stk2.class_of w\n     (mult_str2 w (\\<rho>2 (fst x) w (snd x)) (\\<rho>2 (fst y) w (snd y))) =\n    stk2.class_of w\n     (mult_str2 w (\\<rho>2 (fst x) w (snd x)) (\\<rho>2 (fst y) w (snd y)))", "by (auto simp add: Sigma_eq)"], ["proof (state)\nthis:\n  stk2.class_of w\n   (mult_str2 w (\\<rho>2 (fst x) w (snd x)) (\\<rho>2 (fst y) w (snd y))) =\n  stk2.mult_stalk X' Y'\n\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.mult_stalk X' Y') =\n    stk2.mult_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "finally"], ["proof (chain)\npicking this:\n  stk1.mult_stalk X' Y' = stk2.mult_stalk X' Y'", "have \"stk1.mult_stalk X' Y' = stk2.mult_stalk X' Y'\""], ["proof (prove)\nusing this:\n  stk1.mult_stalk X' Y' = stk2.mult_stalk X' Y'\n\ngoal (1 subgoal):\n 1. stk1.mult_stalk X' Y' = stk2.mult_stalk X' Y'", "."], ["proof (state)\nthis:\n  stk1.mult_stalk X' Y' = stk2.mult_stalk X' Y'\n\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.mult_stalk X' Y') =\n    stk2.mult_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "moreover"], ["proof (state)\nthis:\n  stk1.mult_stalk X' Y' = stk2.mult_stalk X' Y'\n\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.mult_stalk X' Y') =\n    stk2.mult_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "have \"stk1.mult_stalk X' Y' \\<in> stk1.carrier_stalk\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stk1.mult_stalk X' Y' \\<in> stk1.carrier_stalk", "by (simp add: that(1) that(2))"], ["proof (state)\nthis:\n  stk1.mult_stalk X' Y' \\<in> stk1.carrier_stalk\n\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.mult_stalk X' Y') =\n    stk2.mult_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "ultimately"], ["proof (chain)\npicking this:\n  stk1.mult_stalk X' Y' = stk2.mult_stalk X' Y'\n  stk1.mult_stalk X' Y' \\<in> stk1.carrier_stalk", "show \"?id (stk1.mult_stalk X' Y') = stk2.mult_stalk (?id X') (?id Y')\""], ["proof (prove)\nusing this:\n  stk1.mult_stalk X' Y' = stk2.mult_stalk X' Y'\n  stk1.mult_stalk X' Y' \\<in> stk1.carrier_stalk\n\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.mult_stalk X' Y') =\n    stk2.mult_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "using that"], ["proof (prove)\nusing this:\n  stk1.mult_stalk X' Y' = stk2.mult_stalk X' Y'\n  stk1.mult_stalk X' Y' \\<in> stk1.carrier_stalk\n  X' \\<in> stk1.carrier_stalk\n  Y' \\<in> stk1.carrier_stalk\n\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk (stk1.mult_stalk X' Y') =\n    stk2.mult_stalk (identity stk1.carrier_stalk X')\n     (identity stk1.carrier_stalk Y')", "by simp"], ["proof (state)\nthis:\n  identity stk1.carrier_stalk (stk1.mult_stalk X' Y') =\n  stk2.mult_stalk (identity stk1.carrier_stalk X')\n   (identity stk1.carrier_stalk Y')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?X'1 \\<in> stk1.carrier_stalk;\n   ?Y'1 \\<in> stk1.carrier_stalk\\<rbrakk>\n  \\<Longrightarrow> identity stk1.carrier_stalk (stk1.add_stalk ?X'1 ?Y'1) =\n                    stk2.add_stalk (identity stk1.carrier_stalk ?X'1)\n                     (identity stk1.carrier_stalk ?Y'1)\n  \\<lbrakk>?X'1 \\<in> stk1.carrier_stalk;\n   ?Y'1 \\<in> stk1.carrier_stalk\\<rbrakk>\n  \\<Longrightarrow> identity stk1.carrier_stalk\n                     (stk1.mult_stalk ?X'1 ?Y'1) =\n                    stk2.mult_stalk (identity stk1.carrier_stalk ?X'1)\n                     (identity stk1.carrier_stalk ?Y'1)\n\ngoal (2 subgoals):\n 1. identity stk1.carrier_stalk\n    \\<in> stk1.carrier_stalk \\<rightarrow>\\<^sub>E stk2.carrier_stalk\n 2. bij_betw (identity stk1.carrier_stalk) stk1.carrier_stalk\n     stk2.carrier_stalk", "from \\<open>stk1.carrier_stalk = stk2.carrier_stalk\\<close>"], ["proof (chain)\npicking this:\n  stk1.carrier_stalk = stk2.carrier_stalk", "show \"?id \\<in> stk1.carrier_stalk \\<rightarrow>\\<^sub>E stk2.carrier_stalk\"\n      \"bij_betw ?id stk1.carrier_stalk stk2.carrier_stalk\""], ["proof (prove)\nusing this:\n  stk1.carrier_stalk = stk2.carrier_stalk\n\ngoal (1 subgoal):\n 1. identity stk1.carrier_stalk\n    \\<in> stk1.carrier_stalk \\<rightarrow>\\<^sub>E stk2.carrier_stalk &&&\n    bij_betw (identity stk1.carrier_stalk) stk1.carrier_stalk\n     stk2.carrier_stalk", "by (auto simp flip: id_def)"], ["proof (state)\nthis:\n  identity stk1.carrier_stalk\n  \\<in> stk1.carrier_stalk \\<rightarrow>\\<^sub>E stk2.carrier_stalk\n  bij_betw (identity stk1.carrier_stalk) stk1.carrier_stalk\n   stk2.carrier_stalk\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ring_isomorphism (identity stk1.carrier_stalk) stk1.carrier_stalk\n   stk1.add_stalk stk1.mult_stalk (stk1.zero_stalk U) (stk1.one_stalk U)\n   stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk (stk2.zero_stalk U)\n   (stk2.one_stalk U)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma (in affine_scheme) affine_scheme_is_scheme:\n  shows \"scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open \\<O>\\<^sub>X \\<rho> b add_str mult_str zero_str one_str\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open \\<O>\\<^sub>X \\<rho> b\n     add_str mult_str zero_str one_str", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open \\<O>\\<^sub>X \\<rho> b\n     add_str mult_str zero_str one_str", "interpret ind_sheaf X is_open \\<O>\\<^sub>X \\<rho> b add_str mult_str zero_str one_str X"], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_sheaf X is_open \\<O>\\<^sub>X \\<rho> b add_str mult_str zero_str\n     one_str X", "by (metis ind_sheaf_axioms_def ind_sheaf_def open_space ringed_space_axioms ringed_space_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open \\<O>\\<^sub>X \\<rho> b\n     add_str mult_str zero_str one_str", "have ind_is_open[simp]: \"ind_topology.ind_is_open X is_open X = is_open\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_topology.ind_is_open X is_open X = is_open", "by (rule ext) (meson ind_is_open_iff_open open_imp_subset)"], ["proof (state)\nthis:\n  ind_topology.ind_is_open X is_open X = is_open\n\ngoal (1 subgoal):\n 1. scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open \\<O>\\<^sub>X \\<rho> b\n     add_str mult_str zero_str one_str", "interpret sheaf_of_rings X is_open local.ind_sheaf ind_ring_morphisms b ind_add_str \n    ind_mult_str ind_zero_str ind_one_str"], ["proof (prove)\ngoal (1 subgoal):\n 1. sheaf_of_rings X is_open local.ind_sheaf ind_ring_morphisms b\n     ind_add_str ind_mult_str ind_zero_str ind_one_str", "using ind_sheaf_is_sheaf"], ["proof (prove)\nusing this:\n  sheaf_of_rings X (ind_topology.ind_is_open X is_open X) local.ind_sheaf\n   ind_ring_morphisms b ind_add_str ind_mult_str ind_zero_str ind_one_str\n\ngoal (1 subgoal):\n 1. sheaf_of_rings X is_open local.ind_sheaf ind_ring_morphisms b\n     ind_add_str ind_mult_str ind_zero_str ind_one_str", "by force"], ["proof (state)\ngoal (1 subgoal):\n 1. scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open \\<O>\\<^sub>X \\<rho> b\n     add_str mult_str zero_str one_str", "have eq_\\<O>\\<^sub>X: \"local.ind_sheaf U = \\<O>\\<^sub>X U\" if \"U \\<subseteq> X\" for U"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.ind_sheaf U = \\<O>\\<^sub>X U", "using that"], ["proof (prove)\nusing this:\n  U \\<subseteq> X\n\ngoal (1 subgoal):\n 1. local.ind_sheaf U = \\<O>\\<^sub>X U", "by (simp add: Int_absorb2 Int_commute local.ind_sheaf_def)"], ["proof (state)\nthis:\n  ?U3 \\<subseteq> X \\<Longrightarrow> local.ind_sheaf ?U3 = \\<O>\\<^sub>X ?U3\n\ngoal (1 subgoal):\n 1. scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open \\<O>\\<^sub>X \\<rho> b\n     add_str mult_str zero_str one_str", "have eq_\\<rho>: \"\\<And>U V. U \\<subseteq> X \\<and> V \\<subseteq> X \\<Longrightarrow> ind_ring_morphisms U V = \\<rho> U V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>U V.\n       U \\<subseteq> X \\<and> V \\<subseteq> X \\<Longrightarrow>\n       ind_ring_morphisms U V = \\<rho> U V", "by (simp add: ind_ring_morphisms_def inf.absorb_iff2)"], ["proof (state)\nthis:\n  ?U3 \\<subseteq> X \\<and> ?V3 \\<subseteq> X \\<Longrightarrow>\n  ind_ring_morphisms ?U3 ?V3 = \\<rho> ?U3 ?V3\n\ngoal (1 subgoal):\n 1. scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open \\<O>\\<^sub>X \\<rho> b\n     add_str mult_str zero_str one_str", "have eq_add_str: \"\\<And>U. U \\<subseteq> X \\<Longrightarrow> ind_add_str U = add_str U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>U. U \\<subseteq> X \\<Longrightarrow> ind_add_str U = add_str U", "by (simp add: ind_add_str_def inf.absorb_iff2)"], ["proof (state)\nthis:\n  ?U3 \\<subseteq> X \\<Longrightarrow> ind_add_str ?U3 = add_str ?U3\n\ngoal (1 subgoal):\n 1. scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open \\<O>\\<^sub>X \\<rho> b\n     add_str mult_str zero_str one_str", "have eq_mult_str : \"\\<And>U. U \\<subseteq> X \\<Longrightarrow> ind_mult_str U = mult_str U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>U. U \\<subseteq> X \\<Longrightarrow> ind_mult_str U = mult_str U", "by (simp add: ind_mult_str_def inf.absorb_iff2)"], ["proof (state)\nthis:\n  ?U3 \\<subseteq> X \\<Longrightarrow> ind_mult_str ?U3 = mult_str ?U3\n\ngoal (1 subgoal):\n 1. scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open \\<O>\\<^sub>X \\<rho> b\n     add_str mult_str zero_str one_str", "have eq_zero_str : \"\\<And>U. U \\<subseteq> X \\<Longrightarrow> ind_zero_str U = zero_str U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>U. U \\<subseteq> X \\<Longrightarrow> ind_zero_str U = zero_str U", "by (simp add: Int_absorb2 Int_commute ind_zero_str_def)"], ["proof (state)\nthis:\n  ?U3 \\<subseteq> X \\<Longrightarrow> ind_zero_str ?U3 = zero_str ?U3\n\ngoal (1 subgoal):\n 1. scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open \\<O>\\<^sub>X \\<rho> b\n     add_str mult_str zero_str one_str", "have eq_one_str : \"\\<And>U. U \\<subseteq> X \\<Longrightarrow> ind_one_str U = one_str U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>U. U \\<subseteq> X \\<Longrightarrow> ind_one_str U = one_str U", "by (simp add: ind_one_str_def inf.absorb_iff2)"], ["proof (state)\nthis:\n  ?U3 \\<subseteq> X \\<Longrightarrow> ind_one_str ?U3 = one_str ?U3\n\ngoal (1 subgoal):\n 1. scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open \\<O>\\<^sub>X \\<rho> b\n     add_str mult_str zero_str one_str", "have \"affine_scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open local.ind_sheaf ind_ring_morphisms b\n          ind_add_str ind_mult_str ind_zero_str ind_one_str f \\<phi>\\<^sub>f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. affine_scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open local.ind_sheaf\n     ind_ring_morphisms b ind_add_str ind_mult_str ind_zero_str ind_one_str\n     f \\<phi>\\<^sub>f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. affine_scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open local.ind_sheaf\n     ind_ring_morphisms b ind_add_str ind_mult_str ind_zero_str ind_one_str\n     f \\<phi>\\<^sub>f", "have \"locally_ringed_space X is_open local.ind_sheaf ind_ring_morphisms b ind_add_str ind_mult_str ind_zero_str\n     ind_one_str\""], ["proof (prove)\ngoal (1 subgoal):\n 1. locally_ringed_space X is_open local.ind_sheaf ind_ring_morphisms b\n     ind_add_str ind_mult_str ind_zero_str ind_one_str", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. locally_ringed_space X is_open local.ind_sheaf ind_ring_morphisms b\n     ind_add_str ind_mult_str ind_zero_str ind_one_str", "have \"stalk.is_local is_open local.ind_sheaf ind_ring_morphisms ind_add_str\n                ind_mult_str ind_zero_str ind_one_str\n                (neighborhoods u) u U\"\n        if \"u \\<in> U\" and opeU: \"is_open U\" for u U"], ["proof (prove)\ngoal (1 subgoal):\n 1. stalk.is_local is_open local.ind_sheaf ind_ring_morphisms ind_add_str\n     ind_mult_str ind_zero_str ind_one_str (neighborhoods u) u U", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. stalk.is_local is_open local.ind_sheaf ind_ring_morphisms ind_add_str\n     ind_mult_str ind_zero_str ind_one_str (neighborhoods u) u U", "have UX: \"U \\<subseteq> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. U \\<subseteq> X", "by (simp add: opeU open_imp_subset)"], ["proof (state)\nthis:\n  U \\<subseteq> X\n\ngoal (1 subgoal):\n 1. stalk.is_local is_open local.ind_sheaf ind_ring_morphisms ind_add_str\n     ind_mult_str ind_zero_str ind_one_str (neighborhoods u) u U", "interpret stX: stalk X is_open local.ind_sheaf ind_ring_morphisms b ind_add_str \n          ind_mult_str ind_zero_str ind_one_str \"neighborhoods u\" u"], ["proof (prove)\ngoal (1 subgoal):\n 1. stalk X is_open local.ind_sheaf ind_ring_morphisms b ind_add_str\n     ind_mult_str ind_zero_str ind_one_str (neighborhoods u) u", "apply (unfold_locales)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>U. U \\<in> neighborhoods u \\<Longrightarrow> is_open U\n 2. \\<And>U V.\n       \\<lbrakk>U \\<in> neighborhoods u; V \\<in> neighborhoods u\\<rbrakk>\n       \\<Longrightarrow> \\<exists>W\\<in>neighborhoods u.\n                            W \\<subseteq> U \\<inter> V\n 3. u \\<in> X\n 4. neighborhoods u = {U. is_open U \\<and> u \\<in> U}", "unfolding neighborhoods_def"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>U.\n       U \\<in> {U. is_open U \\<and> u \\<in> U} \\<Longrightarrow> is_open U\n 2. \\<And>U V.\n       \\<lbrakk>U \\<in> {U. is_open U \\<and> u \\<in> U};\n        V \\<in> {U. is_open U \\<and> u \\<in> U}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>W\\<in>{U. is_open U \\<and> u \\<in> U}.\n                            W \\<subseteq> U \\<inter> V\n 3. u \\<in> X\n 4. {U. is_open U \\<and> u \\<in> U} = {U. is_open U \\<and> u \\<in> U}", "using \\<open>U \\<subseteq> X\\<close> \\<open>u\\<in>U\\<close>"], ["proof (prove)\nusing this:\n  U \\<subseteq> X\n  u \\<in> U\n\ngoal (4 subgoals):\n 1. \\<And>U.\n       U \\<in> {U. is_open U \\<and> u \\<in> U} \\<Longrightarrow> is_open U\n 2. \\<And>U V.\n       \\<lbrakk>U \\<in> {U. is_open U \\<and> u \\<in> U};\n        V \\<in> {U. is_open U \\<and> u \\<in> U}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>W\\<in>{U. is_open U \\<and> u \\<in> U}.\n                            W \\<subseteq> U \\<inter> V\n 3. u \\<in> X\n 4. {U. is_open U \\<and> u \\<in> U} = {U. is_open U \\<and> u \\<in> U}", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. stX.is_local U", "interpret stalk X is_open \\<O>\\<^sub>X \\<rho> b add_str mult_str zero_str one_str \"neighborhoods u\" u"], ["proof (prove)\ngoal (1 subgoal):\n 1. stalk X is_open \\<O>\\<^sub>X \\<rho> b add_str mult_str zero_str one_str\n     (neighborhoods u) u", "by (meson direct_lim_def ind_sheaf.axioms(1) ind_sheaf_axioms stX.stalk_axioms stalk_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. stX.is_local U", "have \"local_ring carrier_stalk add_stalk mult_stalk (zero_stalk U) (one_stalk U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local_ring carrier_stalk add_stalk mult_stalk (zero_stalk U)\n     (one_stalk U)", "using is_local_def opeU stalks_are_local that(1)"], ["proof (prove)\nusing this:\n  is_local ?U \\<equiv>\n  local_ring carrier_stalk add_stalk mult_stalk (zero_stalk ?U)\n   (one_stalk ?U)\n  is_open U\n  \\<lbrakk>?x \\<in> ?U; is_open ?U\\<rbrakk>\n  \\<Longrightarrow> stalk.is_local is_open \\<O>\\<^sub>X \\<rho> add_str\n                     mult_str zero_str one_str (neighborhoods ?x) ?x ?U\n  u \\<in> U\n\ngoal (1 subgoal):\n 1. local_ring carrier_stalk add_stalk mult_stalk (zero_stalk U)\n     (one_stalk U)", "by blast"], ["proof (state)\nthis:\n  local_ring carrier_stalk add_stalk mult_stalk (zero_stalk U) (one_stalk U)\n\ngoal (1 subgoal):\n 1. stX.is_local U", "moreover"], ["proof (state)\nthis:\n  local_ring carrier_stalk add_stalk mult_stalk (zero_stalk U) (one_stalk U)\n\ngoal (1 subgoal):\n 1. stX.is_local U", "have \"ring_isomorphism (identity stX.carrier_stalk)\n            stX.carrier_stalk stX.add_stalk stX.mult_stalk (stX.zero_stalk U) (stX.one_stalk U)\n            carrier_stalk add_stalk mult_stalk (zero_stalk U) (one_stalk U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ring_isomorphism (identity stX.carrier_stalk) stX.carrier_stalk\n     stX.add_stalk stX.mult_stalk (stX.zero_stalk U) (stX.one_stalk U)\n     carrier_stalk add_stalk mult_stalk (zero_stalk U) (one_stalk U)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ring_isomorphism (identity stX.carrier_stalk) stX.carrier_stalk\n     stX.add_stalk stX.mult_stalk (stX.zero_stalk U) (stX.one_stalk U)\n     carrier_stalk add_stalk mult_stalk (zero_stalk U) (one_stalk U)", "interpret iso_stalks X is_open local.ind_sheaf ind_ring_morphisms b ind_add_str \n              ind_mult_str ind_zero_str ind_one_str \"neighborhoods u\" u \\<O>\\<^sub>X \\<rho>  add_str mult_str \n              zero_str one_str"], ["proof (prove)\ngoal (1 subgoal):\n 1. iso_stalks X is_open local.ind_sheaf ind_ring_morphisms b ind_add_str\n     ind_mult_str ind_zero_str ind_one_str (neighborhoods u) u \\<O>\\<^sub>X\n     \\<rho> add_str mult_str zero_str one_str", "apply unfold_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>U\\<in>neighborhoods u.\n       local.ind_sheaf U = \\<O>\\<^sub>X U \\<and>\n       ind_add_str U = add_str U \\<and>\n       ind_mult_str U = mult_str U \\<and>\n       ind_zero_str U = zero_str U \\<and> ind_one_str U = one_str U\n 2. \\<forall>U V.\n       U \\<in> neighborhoods u \\<and>\n       V \\<in> neighborhoods u \\<longrightarrow>\n       ind_ring_morphisms U V = \\<rho> U V", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>U\\<in>neighborhoods u.\n       local.ind_sheaf U = \\<O>\\<^sub>X U \\<and>\n       ind_add_str U = add_str U \\<and>\n       ind_mult_str U = mult_str U \\<and>\n       ind_zero_str U = zero_str U \\<and> ind_one_str U = one_str U", "by (simp add: eq_\\<O>\\<^sub>X eq_add_str eq_mult_str eq_one_str eq_zero_str open_imp_subset \n                  subset_of_opens)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>U V.\n       U \\<in> neighborhoods u \\<and>\n       V \\<in> neighborhoods u \\<longrightarrow>\n       ind_ring_morphisms U V = \\<rho> U V", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>U V.\n       U \\<in> neighborhoods u \\<and>\n       V \\<in> neighborhoods u \\<longrightarrow>\n       ind_ring_morphisms U V = \\<rho> U V", "using eq_\\<rho> open_imp_subset subset_of_opens"], ["proof (prove)\nusing this:\n  ?U3 \\<subseteq> X \\<and> ?V3 \\<subseteq> X \\<Longrightarrow>\n  ind_ring_morphisms ?U3 ?V3 = \\<rho> ?U3 ?V3\n  is_open ?U \\<Longrightarrow> ?U \\<subseteq> X\n  ?U \\<in> neighborhoods u \\<Longrightarrow> is_open ?U\n\ngoal (1 subgoal):\n 1. \\<forall>U V.\n       U \\<in> neighborhoods u \\<and>\n       V \\<in> neighborhoods u \\<longrightarrow>\n       ind_ring_morphisms U V = \\<rho> U V", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\ngoal (1 subgoal):\n 1. ring_isomorphism (identity stX.carrier_stalk) stX.carrier_stalk\n     stX.add_stalk stX.mult_stalk (stX.zero_stalk U) (stX.one_stalk U)\n     carrier_stalk add_stalk mult_stalk (zero_stalk U) (one_stalk U)", "have \"U \\<in> neighborhoods u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. U \\<in> neighborhoods u", "by (simp add: opeU stX.index that(1))"], ["proof (state)\nthis:\n  U \\<in> neighborhoods u\n\ngoal (1 subgoal):\n 1. ring_isomorphism (identity stX.carrier_stalk) stX.carrier_stalk\n     stX.add_stalk stX.mult_stalk (stX.zero_stalk U) (stX.one_stalk U)\n     carrier_stalk add_stalk mult_stalk (zero_stalk U) (one_stalk U)", "from has_ring_isomorphism[OF this]"], ["proof (chain)\npicking this:\n  ring_isomorphism (identity stX.carrier_stalk) stX.carrier_stalk\n   stX.add_stalk stX.mult_stalk (stX.zero_stalk U) (stX.one_stalk U)\n   carrier_stalk add_stalk mult_stalk (zero_stalk U) (one_stalk U)", "show ?thesis"], ["proof (prove)\nusing this:\n  ring_isomorphism (identity stX.carrier_stalk) stX.carrier_stalk\n   stX.add_stalk stX.mult_stalk (stX.zero_stalk U) (stX.one_stalk U)\n   carrier_stalk add_stalk mult_stalk (zero_stalk U) (one_stalk U)\n\ngoal (1 subgoal):\n 1. ring_isomorphism (identity stX.carrier_stalk) stX.carrier_stalk\n     stX.add_stalk stX.mult_stalk (stX.zero_stalk U) (stX.one_stalk U)\n     carrier_stalk add_stalk mult_stalk (zero_stalk U) (one_stalk U)", "."], ["proof (state)\nthis:\n  ring_isomorphism (identity stX.carrier_stalk) stX.carrier_stalk\n   stX.add_stalk stX.mult_stalk (stX.zero_stalk U) (stX.one_stalk U)\n   carrier_stalk add_stalk mult_stalk (zero_stalk U) (one_stalk U)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ring_isomorphism (identity stX.carrier_stalk) stX.carrier_stalk\n   stX.add_stalk stX.mult_stalk (stX.zero_stalk U) (stX.one_stalk U)\n   carrier_stalk add_stalk mult_stalk (zero_stalk U) (one_stalk U)\n\ngoal (1 subgoal):\n 1. stX.is_local U", "ultimately"], ["proof (chain)\npicking this:\n  local_ring carrier_stalk add_stalk mult_stalk (zero_stalk U) (one_stalk U)\n  ring_isomorphism (identity stX.carrier_stalk) stX.carrier_stalk\n   stX.add_stalk stX.mult_stalk (stX.zero_stalk U) (stX.one_stalk U)\n   carrier_stalk add_stalk mult_stalk (zero_stalk U) (one_stalk U)", "show ?thesis"], ["proof (prove)\nusing this:\n  local_ring carrier_stalk add_stalk mult_stalk (zero_stalk U) (one_stalk U)\n  ring_isomorphism (identity stX.carrier_stalk) stX.carrier_stalk\n   stX.add_stalk stX.mult_stalk (stX.zero_stalk U) (stX.one_stalk U)\n   carrier_stalk add_stalk mult_stalk (zero_stalk U) (one_stalk U)\n\ngoal (1 subgoal):\n 1. stX.is_local U", "unfolding stX.is_local_def"], ["proof (prove)\nusing this:\n  local_ring carrier_stalk add_stalk mult_stalk (zero_stalk U) (one_stalk U)\n  ring_isomorphism (identity stX.carrier_stalk) stX.carrier_stalk\n   stX.add_stalk stX.mult_stalk (stX.zero_stalk U) (stX.one_stalk U)\n   carrier_stalk add_stalk mult_stalk (zero_stalk U) (one_stalk U)\n\ngoal (1 subgoal):\n 1. local_ring stX.carrier_stalk stX.add_stalk stX.mult_stalk\n     (stX.zero_stalk U) (stX.one_stalk U)", "using isomorphic_to_local_is_local"], ["proof (prove)\nusing this:\n  local_ring carrier_stalk add_stalk mult_stalk (zero_stalk U) (one_stalk U)\n  ring_isomorphism (identity stX.carrier_stalk) stX.carrier_stalk\n   stX.add_stalk stX.mult_stalk (stX.zero_stalk U) (stX.one_stalk U)\n   carrier_stalk add_stalk mult_stalk (zero_stalk U) (one_stalk U)\n  \\<lbrakk>local_ring ?B ?addB ?multB ?zeroB ?oneB;\n   ring_isomorphism ?f ?A ?addA ?multA ?zeroA ?oneA ?B ?addB ?multB ?zeroB\n    ?oneB\\<rbrakk>\n  \\<Longrightarrow> local_ring ?A ?addA ?multA ?zeroA ?oneA\n\ngoal (1 subgoal):\n 1. local_ring stX.carrier_stalk stX.add_stalk stX.mult_stalk\n     (stX.zero_stalk U) (stX.one_stalk U)", "by fast"], ["proof (state)\nthis:\n  stX.is_local U\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?u3 \\<in> ?U3; is_open ?U3\\<rbrakk>\n  \\<Longrightarrow> stalk.is_local is_open local.ind_sheaf\n                     ind_ring_morphisms ind_add_str ind_mult_str\n                     ind_zero_str ind_one_str (neighborhoods ?u3) ?u3 ?U3\n\ngoal (1 subgoal):\n 1. locally_ringed_space X is_open local.ind_sheaf ind_ring_morphisms b\n     ind_add_str ind_mult_str ind_zero_str ind_one_str", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?u3 \\<in> ?U3; is_open ?U3\\<rbrakk>\n  \\<Longrightarrow> stalk.is_local is_open local.ind_sheaf\n                     ind_ring_morphisms ind_add_str ind_mult_str\n                     ind_zero_str ind_one_str (neighborhoods ?u3) ?u3 ?U3", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?u3 \\<in> ?U3; is_open ?U3\\<rbrakk>\n  \\<Longrightarrow> stalk.is_local is_open local.ind_sheaf\n                     ind_ring_morphisms ind_add_str ind_mult_str\n                     ind_zero_str ind_one_str (neighborhoods ?u3) ?u3 ?U3\n\ngoal (1 subgoal):\n 1. locally_ringed_space X is_open local.ind_sheaf ind_ring_morphisms b\n     ind_add_str ind_mult_str ind_zero_str ind_one_str", "by (simp add: locally_ringed_space_axioms_def locally_ringed_space_def\n            ringed_space_def sheaf_of_rings_axioms)"], ["proof (state)\nthis:\n  locally_ringed_space X is_open local.ind_sheaf ind_ring_morphisms b\n   ind_add_str ind_mult_str ind_zero_str ind_one_str\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  locally_ringed_space X is_open local.ind_sheaf ind_ring_morphisms b\n   ind_add_str ind_mult_str ind_zero_str ind_one_str\n\ngoal (1 subgoal):\n 1. affine_scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open local.ind_sheaf\n     ind_ring_morphisms b ind_add_str ind_mult_str ind_zero_str ind_one_str\n     f \\<phi>\\<^sub>f", "moreover"], ["proof (state)\nthis:\n  locally_ringed_space X is_open local.ind_sheaf ind_ring_morphisms b\n   ind_add_str ind_mult_str ind_zero_str ind_one_str\n\ngoal (1 subgoal):\n 1. affine_scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open local.ind_sheaf\n     ind_ring_morphisms b ind_add_str ind_mult_str ind_zero_str ind_one_str\n     f \\<phi>\\<^sub>f", "have \"iso_locally_ringed_spaces X is_open local.ind_sheaf ind_ring_morphisms b \n        ind_add_str ind_mult_str ind_zero_str ind_one_str Spec is_zariski_open sheaf_spec \n        sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces X is_open local.ind_sheaf ind_ring_morphisms b\n     ind_add_str ind_mult_str ind_zero_str ind_one_str Spec is_zariski_open\n     sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces X is_open local.ind_sheaf ind_ring_morphisms b\n     ind_add_str ind_mult_str ind_zero_str ind_one_str Spec is_zariski_open\n     sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f", "interpret im_sheafXS: Comm_Ring.im_sheaf X is_open local.ind_sheaf\n              ind_ring_morphisms b ind_add_str ind_mult_str ind_zero_str ind_one_str Spec \n              is_zariski_open f"], ["proof (prove)\ngoal (1 subgoal):\n 1. Comm_Ring.im_sheaf X is_open local.ind_sheaf ind_ring_morphisms b\n     ind_add_str ind_mult_str ind_zero_str ind_one_str Spec is_zariski_open\n     f", "by intro_locales"], ["proof (state)\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces X is_open local.ind_sheaf ind_ring_morphisms b\n     ind_add_str ind_mult_str ind_zero_str ind_one_str Spec is_zariski_open\n     sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f", "interpret iso_sheaves_of_rings Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b \n          add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec local.im_sheaf \n          im_sheaf_morphisms b add_im_sheaf mult_im_sheaf zero_im_sheaf one_im_sheaf \\<phi>\\<^sub>f"], ["proof (prove)\ngoal (1 subgoal):\n 1. iso_sheaves_of_rings Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec local.im_sheaf im_sheaf_morphisms b\n     add_im_sheaf mult_im_sheaf zero_im_sheaf one_im_sheaf \\<phi>\\<^sub>f", "using is_iso_of_sheaves"], ["proof (prove)\nusing this:\n  iso_sheaves_of_rings Spec is_zariski_open sheaf_spec sheaf_spec_morphisms\n   \\<O>b add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec\n   local.im_sheaf im_sheaf_morphisms b add_im_sheaf mult_im_sheaf\n   zero_im_sheaf one_im_sheaf \\<phi>\\<^sub>f\n\ngoal (1 subgoal):\n 1. iso_sheaves_of_rings Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec local.im_sheaf im_sheaf_morphisms b\n     add_im_sheaf mult_im_sheaf zero_im_sheaf one_im_sheaf \\<phi>\\<^sub>f", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces X is_open local.ind_sheaf ind_ring_morphisms b\n     ind_add_str ind_mult_str ind_zero_str ind_one_str Spec is_zariski_open\n     sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f", "have ring_homoU:\"ring_homomorphism (\\<phi>\\<^sub>f U) (\\<O> U) (add_sheaf_spec U) (mult_sheaf_spec U) (zero_sheaf_spec U)\n          (one_sheaf_spec U) (im_sheafXS.im_sheaf U) (im_sheafXS.add_im_sheaf U) (im_sheafXS.mult_im_sheaf U)\n          (im_sheafXS.zero_im_sheaf U) (im_sheafXS.one_im_sheaf U)\" \n        if \"is_zariski_open U \" for U"], ["proof (prove)\ngoal (1 subgoal):\n 1. ring_homomorphism (\\<phi>\\<^sub>f U) (\\<O> U) (add_sheaf_spec U)\n     (mult_sheaf_spec U) (zero_sheaf_spec U) (one_sheaf_spec U)\n     (im_sheafXS.im_sheaf U) (im_sheafXS.add_im_sheaf U)\n     (im_sheafXS.mult_im_sheaf U) (im_sheafXS.zero_im_sheaf U)\n     (im_sheafXS.one_im_sheaf U)", "using mor.is_ring_morphism"], ["proof (prove)\nusing this:\n  is_zariski_open ?U \\<Longrightarrow>\n  ring_homomorphism (\\<phi>\\<^sub>f ?U) (\\<O> ?U) (add_sheaf_spec ?U)\n   (mult_sheaf_spec ?U) (zero_sheaf_spec ?U) (one_sheaf_spec ?U)\n   (local.im_sheaf ?U) (add_im_sheaf ?U) (mult_im_sheaf ?U)\n   (zero_im_sheaf ?U) (one_im_sheaf ?U)\n\ngoal (1 subgoal):\n 1. ring_homomorphism (\\<phi>\\<^sub>f U) (\\<O> U) (add_sheaf_spec U)\n     (mult_sheaf_spec U) (zero_sheaf_spec U) (one_sheaf_spec U)\n     (im_sheafXS.im_sheaf U) (im_sheafXS.add_im_sheaf U)\n     (im_sheafXS.mult_im_sheaf U) (im_sheafXS.zero_im_sheaf U)\n     (im_sheafXS.one_im_sheaf U)", "by (metis Int_commute Int_left_absorb add_im_sheaf_def im_sheafXS.add_im_sheaf_def \n            im_sheafXS.im_sheaf_def im_sheafXS.mult_im_sheaf_def im_sheafXS.one_im_sheaf_def \n            im_sheafXS.zero_im_sheaf_def ind_add_str_def ind_mult_str_def ind_one_str_def \n            ind_zero_str_def local.im_sheaf_def local.ind_sheaf_def \n            mult_im_sheaf_def one_im_sheaf_def that zero_im_sheaf_def)"], ["proof (state)\nthis:\n  is_zariski_open ?U3 \\<Longrightarrow>\n  ring_homomorphism (\\<phi>\\<^sub>f ?U3) (\\<O> ?U3) (add_sheaf_spec ?U3)\n   (mult_sheaf_spec ?U3) (zero_sheaf_spec ?U3) (one_sheaf_spec ?U3)\n   (im_sheafXS.im_sheaf ?U3) (im_sheafXS.add_im_sheaf ?U3)\n   (im_sheafXS.mult_im_sheaf ?U3) (im_sheafXS.zero_im_sheaf ?U3)\n   (im_sheafXS.one_im_sheaf ?U3)\n\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces X is_open local.ind_sheaf ind_ring_morphisms b\n     ind_add_str ind_mult_str ind_zero_str ind_one_str Spec is_zariski_open\n     sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f", "note ring_homoU"], ["proof (state)\nthis:\n  is_zariski_open ?U3 \\<Longrightarrow>\n  ring_homomorphism (\\<phi>\\<^sub>f ?U3) (\\<O> ?U3) (add_sheaf_spec ?U3)\n   (mult_sheaf_spec ?U3) (zero_sheaf_spec ?U3) (one_sheaf_spec ?U3)\n   (im_sheafXS.im_sheaf ?U3) (im_sheafXS.add_im_sheaf ?U3)\n   (im_sheafXS.mult_im_sheaf ?U3) (im_sheafXS.zero_im_sheaf ?U3)\n   (im_sheafXS.one_im_sheaf ?U3)\n\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces X is_open local.ind_sheaf ind_ring_morphisms b\n     ind_add_str ind_mult_str ind_zero_str ind_one_str Spec is_zariski_open\n     sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f", "moreover"], ["proof (state)\nthis:\n  is_zariski_open ?U3 \\<Longrightarrow>\n  ring_homomorphism (\\<phi>\\<^sub>f ?U3) (\\<O> ?U3) (add_sheaf_spec ?U3)\n   (mult_sheaf_spec ?U3) (zero_sheaf_spec ?U3) (one_sheaf_spec ?U3)\n   (im_sheafXS.im_sheaf ?U3) (im_sheafXS.add_im_sheaf ?U3)\n   (im_sheafXS.mult_im_sheaf ?U3) (im_sheafXS.zero_im_sheaf ?U3)\n   (im_sheafXS.one_im_sheaf ?U3)\n\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces X is_open local.ind_sheaf ind_ring_morphisms b\n     ind_add_str ind_mult_str ind_zero_str ind_one_str Spec is_zariski_open\n     sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f", "have \"(\\<forall>U V. is_zariski_open U \\<longrightarrow>\n       is_zariski_open V \\<longrightarrow>\n       V \\<subseteq> U \\<longrightarrow>\n       (\\<forall>x. x \\<in> \\<O> U \\<longrightarrow> (im_sheafXS.im_sheaf_morphisms U V \\<circ> \\<phi>\\<^sub>f U) x = (\\<phi>\\<^sub>f V \\<circ> sheaf_spec_morphisms U V) x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>U V.\n       is_zariski_open U \\<longrightarrow>\n       is_zariski_open V \\<longrightarrow>\n       V \\<subseteq> U \\<longrightarrow>\n       (\\<forall>x.\n           x \\<in> \\<O> U \\<longrightarrow>\n           (im_sheafXS.im_sheaf_morphisms U V \\<circ> \\<phi>\\<^sub>f U) x =\n           (\\<phi>\\<^sub>f V \\<circ> sheaf_spec_morphisms U V) x)", "using eq_\\<rho> im_sheafXS.im_sheaf_morphisms_def im_sheaf_morphisms_def mor.comm_diagrams"], ["proof (prove)\nusing this:\n  ?U3 \\<subseteq> X \\<and> ?V3 \\<subseteq> X \\<Longrightarrow>\n  ind_ring_morphisms ?U3 ?V3 = \\<rho> ?U3 ?V3\n  im_sheafXS.im_sheaf_morphisms ?U ?V \\<equiv>\n  ind_ring_morphisms (f \\<^sup>\\<inverse> X ?U) (f \\<^sup>\\<inverse> X ?V)\n  im_sheaf_morphisms ?U ?V \\<equiv>\n  \\<rho> (f \\<^sup>\\<inverse> X ?U) (f \\<^sup>\\<inverse> X ?V)\n  \\<lbrakk>is_zariski_open ?U; is_zariski_open ?V; ?V \\<subseteq> ?U;\n   ?x \\<in> \\<O> ?U\\<rbrakk>\n  \\<Longrightarrow> (im_sheaf_morphisms ?U ?V \\<circ> \\<phi>\\<^sub>f ?U)\n                     ?x =\n                    (\\<phi>\\<^sub>f ?V \\<circ> sheaf_spec_morphisms ?U ?V)\n                     ?x\n\ngoal (1 subgoal):\n 1. \\<forall>U V.\n       is_zariski_open U \\<longrightarrow>\n       is_zariski_open V \\<longrightarrow>\n       V \\<subseteq> U \\<longrightarrow>\n       (\\<forall>x.\n           x \\<in> \\<O> U \\<longrightarrow>\n           (im_sheafXS.im_sheaf_morphisms U V \\<circ> \\<phi>\\<^sub>f U) x =\n           (\\<phi>\\<^sub>f V \\<circ> sheaf_spec_morphisms U V) x)", "by auto"], ["proof (state)\nthis:\n  \\<forall>U V.\n     is_zariski_open U \\<longrightarrow>\n     is_zariski_open V \\<longrightarrow>\n     V \\<subseteq> U \\<longrightarrow>\n     (\\<forall>x.\n         x \\<in> \\<O> U \\<longrightarrow>\n         (im_sheafXS.im_sheaf_morphisms U V \\<circ> \\<phi>\\<^sub>f U) x =\n         (\\<phi>\\<^sub>f V \\<circ> sheaf_spec_morphisms U V) x)\n\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces X is_open local.ind_sheaf ind_ring_morphisms b\n     ind_add_str ind_mult_str ind_zero_str ind_one_str Spec is_zariski_open\n     sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f", "ultimately"], ["proof (chain)\npicking this:\n  is_zariski_open ?U3 \\<Longrightarrow>\n  ring_homomorphism (\\<phi>\\<^sub>f ?U3) (\\<O> ?U3) (add_sheaf_spec ?U3)\n   (mult_sheaf_spec ?U3) (zero_sheaf_spec ?U3) (one_sheaf_spec ?U3)\n   (im_sheafXS.im_sheaf ?U3) (im_sheafXS.add_im_sheaf ?U3)\n   (im_sheafXS.mult_im_sheaf ?U3) (im_sheafXS.zero_im_sheaf ?U3)\n   (im_sheafXS.one_im_sheaf ?U3)\n  \\<forall>U V.\n     is_zariski_open U \\<longrightarrow>\n     is_zariski_open V \\<longrightarrow>\n     V \\<subseteq> U \\<longrightarrow>\n     (\\<forall>x.\n         x \\<in> \\<O> U \\<longrightarrow>\n         (im_sheafXS.im_sheaf_morphisms U V \\<circ> \\<phi>\\<^sub>f U) x =\n         (\\<phi>\\<^sub>f V \\<circ> sheaf_spec_morphisms U V) x)", "interpret morphism_ringed_spaces X is_open local.ind_sheaf ind_ring_morphisms b \n          ind_add_str ind_mult_str ind_zero_str ind_one_str Spec is_zariski_open sheaf_spec\n          sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n          zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f"], ["proof (prove)\nusing this:\n  is_zariski_open ?U3 \\<Longrightarrow>\n  ring_homomorphism (\\<phi>\\<^sub>f ?U3) (\\<O> ?U3) (add_sheaf_spec ?U3)\n   (mult_sheaf_spec ?U3) (zero_sheaf_spec ?U3) (one_sheaf_spec ?U3)\n   (im_sheafXS.im_sheaf ?U3) (im_sheafXS.add_im_sheaf ?U3)\n   (im_sheafXS.mult_im_sheaf ?U3) (im_sheafXS.zero_im_sheaf ?U3)\n   (im_sheafXS.one_im_sheaf ?U3)\n  \\<forall>U V.\n     is_zariski_open U \\<longrightarrow>\n     is_zariski_open V \\<longrightarrow>\n     V \\<subseteq> U \\<longrightarrow>\n     (\\<forall>x.\n         x \\<in> \\<O> U \\<longrightarrow>\n         (im_sheafXS.im_sheaf_morphisms U V \\<circ> \\<phi>\\<^sub>f U) x =\n         (\\<phi>\\<^sub>f V \\<circ> sheaf_spec_morphisms U V) x)\n\ngoal (1 subgoal):\n 1. morphism_ringed_spaces X is_open local.ind_sheaf ind_ring_morphisms b\n     ind_add_str ind_mult_str ind_zero_str ind_one_str Spec is_zariski_open\n     sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f", "apply intro_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>U.\n                is_zariski_open U \\<Longrightarrow>\n                ring_homomorphism (\\<phi>\\<^sub>f U) (\\<O> U)\n                 (add_sheaf_spec U) (mult_sheaf_spec U) (zero_sheaf_spec U)\n                 (one_sheaf_spec U) (im_sheafXS.im_sheaf U)\n                 (im_sheafXS.add_im_sheaf U) (im_sheafXS.mult_im_sheaf U)\n                 (im_sheafXS.zero_im_sheaf U) (im_sheafXS.one_im_sheaf U);\n     \\<forall>U V.\n        is_zariski_open U \\<longrightarrow>\n        is_zariski_open V \\<longrightarrow>\n        V \\<subseteq> U \\<longrightarrow>\n        (\\<forall>x.\n            x \\<in> \\<O> U \\<longrightarrow>\n            (im_sheafXS.im_sheaf_morphisms U V \\<circ> \\<phi>\\<^sub>f U) x =\n            (\\<phi>\\<^sub>f V \\<circ> sheaf_spec_morphisms U V) x)\\<rbrakk>\n    \\<Longrightarrow> morphism_ringed_spaces_axioms X local.ind_sheaf\n                       ind_ring_morphisms b ind_add_str ind_mult_str\n                       ind_zero_str ind_one_str Spec is_zariski_open\n                       sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec\n                       mult_sheaf_spec zero_sheaf_spec one_sheaf_spec f\n                       \\<phi>\\<^sub>f", "unfolding morphism_ringed_spaces_axioms_def morphism_ringed_spaces_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>U.\n                is_zariski_open U \\<Longrightarrow>\n                ring_homomorphism (\\<phi>\\<^sub>f U) (\\<O> U)\n                 (add_sheaf_spec U) (mult_sheaf_spec U) (zero_sheaf_spec U)\n                 (one_sheaf_spec U) (im_sheafXS.im_sheaf U)\n                 (im_sheafXS.add_im_sheaf U) (im_sheafXS.mult_im_sheaf U)\n                 (im_sheafXS.zero_im_sheaf U) (im_sheafXS.one_im_sheaf U);\n     \\<forall>U V.\n        is_zariski_open U \\<longrightarrow>\n        is_zariski_open V \\<longrightarrow>\n        V \\<subseteq> U \\<longrightarrow>\n        (\\<forall>x.\n            x \\<in> \\<O> U \\<longrightarrow>\n            (im_sheafXS.im_sheaf_morphisms U V \\<circ> \\<phi>\\<^sub>f U) x =\n            (\\<phi>\\<^sub>f V \\<circ> sheaf_spec_morphisms U V) x)\\<rbrakk>\n    \\<Longrightarrow> morphism_sheaves_of_rings Spec is_zariski_open\n                       sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec\n                       mult_sheaf_spec zero_sheaf_spec one_sheaf_spec\n                       im_sheafXS.im_sheaf im_sheafXS.im_sheaf_morphisms b\n                       im_sheafXS.add_im_sheaf im_sheafXS.mult_im_sheaf\n                       im_sheafXS.zero_im_sheaf im_sheafXS.one_im_sheaf\n                       \\<phi>\\<^sub>f", "apply intro_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>U.\n                is_zariski_open U \\<Longrightarrow>\n                ring_homomorphism (\\<phi>\\<^sub>f U) (\\<O> U)\n                 (add_sheaf_spec U) (mult_sheaf_spec U) (zero_sheaf_spec U)\n                 (one_sheaf_spec U) (im_sheafXS.im_sheaf U)\n                 (im_sheafXS.add_im_sheaf U) (im_sheafXS.mult_im_sheaf U)\n                 (im_sheafXS.zero_im_sheaf U) (im_sheafXS.one_im_sheaf U);\n     \\<forall>U V.\n        is_zariski_open U \\<longrightarrow>\n        is_zariski_open V \\<longrightarrow>\n        V \\<subseteq> U \\<longrightarrow>\n        (\\<forall>x.\n            x \\<in> \\<O> U \\<longrightarrow>\n            (im_sheafXS.im_sheaf_morphisms U V \\<circ> \\<phi>\\<^sub>f U) x =\n            (\\<phi>\\<^sub>f V \\<circ> sheaf_spec_morphisms U V) x)\\<rbrakk>\n    \\<Longrightarrow> morphism_presheaves_of_rings_axioms is_zariski_open\n                       sheaf_spec sheaf_spec_morphisms add_sheaf_spec\n                       mult_sheaf_spec zero_sheaf_spec one_sheaf_spec\n                       im_sheafXS.im_sheaf im_sheafXS.im_sheaf_morphisms\n                       im_sheafXS.add_im_sheaf im_sheafXS.mult_im_sheaf\n                       im_sheafXS.zero_im_sheaf im_sheafXS.one_im_sheaf\n                       \\<phi>\\<^sub>f", "unfolding morphism_presheaves_of_rings_axioms_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>U.\n                is_zariski_open U \\<Longrightarrow>\n                ring_homomorphism (\\<phi>\\<^sub>f U) (\\<O> U)\n                 (add_sheaf_spec U) (mult_sheaf_spec U) (zero_sheaf_spec U)\n                 (one_sheaf_spec U) (im_sheafXS.im_sheaf U)\n                 (im_sheafXS.add_im_sheaf U) (im_sheafXS.mult_im_sheaf U)\n                 (im_sheafXS.zero_im_sheaf U) (im_sheafXS.one_im_sheaf U);\n     \\<forall>U V.\n        is_zariski_open U \\<longrightarrow>\n        is_zariski_open V \\<longrightarrow>\n        V \\<subseteq> U \\<longrightarrow>\n        (\\<forall>x.\n            x \\<in> \\<O> U \\<longrightarrow>\n            (im_sheafXS.im_sheaf_morphisms U V \\<circ> \\<phi>\\<^sub>f U) x =\n            (\\<phi>\\<^sub>f V \\<circ> sheaf_spec_morphisms U V) x)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>U.\n                          is_zariski_open U \\<longrightarrow>\n                          ring_homomorphism (\\<phi>\\<^sub>f U) (\\<O> U)\n                           (add_sheaf_spec U) (mult_sheaf_spec U)\n                           (zero_sheaf_spec U) (one_sheaf_spec U)\n                           (im_sheafXS.im_sheaf U)\n                           (im_sheafXS.add_im_sheaf U)\n                           (im_sheafXS.mult_im_sheaf U)\n                           (im_sheafXS.zero_im_sheaf U)\n                           (im_sheafXS.one_im_sheaf U)) \\<and>\n                      (\\<forall>U V.\n                          is_zariski_open U \\<longrightarrow>\n                          is_zariski_open V \\<longrightarrow>\n                          V \\<subseteq> U \\<longrightarrow>\n                          (\\<forall>x.\n                              x \\<in> \\<O> U \\<longrightarrow>\n                              (im_sheafXS.im_sheaf_morphisms U V \\<circ>\n                               \\<phi>\\<^sub>f U)\n                               x =\n                              (\\<phi>\\<^sub>f V \\<circ>\n                               sheaf_spec_morphisms U V)\n                               x))", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces X is_open local.ind_sheaf ind_ring_morphisms b\n     ind_add_str ind_mult_str ind_zero_str ind_one_str Spec is_zariski_open\n     sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f", "have \"iso_locally_ringed_spaces X is_open local.ind_sheaf ind_ring_morphisms b \n            ind_add_str ind_mult_str ind_zero_str ind_one_str \n            Spec is_zariski_open sheaf_spec sheaf_spec_morphisms\n            \\<O>b add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces X is_open local.ind_sheaf ind_ring_morphisms b\n     ind_add_str ind_mult_str ind_zero_str ind_one_str Spec is_zariski_open\n     sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f", "apply intro_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. morphism_locally_ringed_spaces_axioms X is_open local.ind_sheaf\n     ind_ring_morphisms ind_add_str ind_mult_str ind_zero_str ind_one_str\n     is_zariski_open sheaf_spec sheaf_spec_morphisms add_sheaf_spec\n     mult_sheaf_spec zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f\n 2. iso_locally_ringed_spaces_axioms X is_open local.ind_sheaf\n     ind_ring_morphisms b ind_add_str ind_mult_str ind_zero_str ind_one_str\n     Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b\n     add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec f\n     \\<phi>\\<^sub>f", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. morphism_locally_ringed_spaces_axioms X is_open local.ind_sheaf\n     ind_ring_morphisms ind_add_str ind_mult_str ind_zero_str ind_one_str\n     is_zariski_open sheaf_spec sheaf_spec_morphisms add_sheaf_spec\n     mult_sheaf_spec zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. morphism_locally_ringed_spaces_axioms X is_open local.ind_sheaf\n     ind_ring_morphisms ind_add_str ind_mult_str ind_zero_str ind_one_str\n     is_zariski_open sheaf_spec sheaf_spec_morphisms add_sheaf_spec\n     mult_sheaf_spec zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f", "have \"ind_mor_btw_stalks.is_local X is_open local.ind_sheaf ind_ring_morphisms ind_add_str \n                ind_mult_str ind_zero_str ind_one_str is_zariski_open sheaf_spec sheaf_spec_morphisms \n                add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec f x U\n               \\<phi>\\<^bsub>X is_open local.ind_sheaf ind_ring_morphisms is_zariski_open sheaf_spec \n                        sheaf_spec_morphisms f \\<phi>\\<^sub>f x\\<^esub>\"\n            if \"x \\<in> X\" \"is_zariski_open U\" \"f x \\<in> U\" for x U"], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_mor_btw_stalks.is_local X is_open local.ind_sheaf ind_ring_morphisms\n     ind_add_str ind_mult_str ind_zero_str ind_one_str is_zariski_open\n     sheaf_spec sheaf_spec_morphisms add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec f x U\n     \\<phi>\\<^bsub>X is_open local.ind_sheaf ind_ring_morphisms\n                      is_zariski_open sheaf_spec sheaf_spec_morphisms\n                      f \\<phi>\\<^sub>f x\\<^esub>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ind_mor_btw_stalks.is_local X is_open local.ind_sheaf ind_ring_morphisms\n     ind_add_str ind_mult_str ind_zero_str ind_one_str is_zariski_open\n     sheaf_spec sheaf_spec_morphisms add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec f x U\n     \\<phi>\\<^bsub>X is_open local.ind_sheaf ind_ring_morphisms\n                      is_zariski_open sheaf_spec sheaf_spec_morphisms\n                      f \\<phi>\\<^sub>f x\\<^esub>", "interpret ind_btw:ind_mor_btw_stalks X is_open local.ind_sheaf ind_ring_morphisms b ind_add_str\n                ind_mult_str ind_zero_str ind_one_str Spec is_zariski_open sheaf_spec \n                sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n                zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f x"], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_mor_btw_stalks X is_open local.ind_sheaf ind_ring_morphisms b\n     ind_add_str ind_mult_str ind_zero_str ind_one_str Spec is_zariski_open\n     sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f x", "apply intro_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_mor_btw_stalks_axioms X x", "using \\<open>x \\<in> X\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. ind_mor_btw_stalks_axioms X x", "by (simp add: ind_mor_btw_stalks_axioms.intro)"], ["proof (state)\ngoal (1 subgoal):\n 1. ind_btw.is_local U ind_btw.induced_morphism", "interpret ind_mor_btw_stalks X is_open \\<O>\\<^sub>X \\<rho> b add_str mult_str zero_str one_str\n                Spec is_zariski_open sheaf_spec \n                sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n                zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f x"], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_mor_btw_stalks X is_open \\<O>\\<^sub>X \\<rho> b add_str mult_str\n     zero_str one_str Spec is_zariski_open sheaf_spec sheaf_spec_morphisms\n     \\<O>b add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec f\n     \\<phi>\\<^sub>f x", "apply intro_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_mor_btw_stalks_axioms X x", "using \\<open>x \\<in> X\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. ind_mor_btw_stalks_axioms X x", "by (simp add: ind_mor_btw_stalks_axioms.intro)"], ["proof (state)\ngoal (1 subgoal):\n 1. ind_btw.is_local U ind_btw.induced_morphism", "interpret stk1:stalk X is_open \\<O>\\<^sub>X \\<rho> b add_str mult_str zero_str one_str \n                              \"{U. is_open U \\<and> x \\<in> U}\" x"], ["proof (prove)\ngoal (1 subgoal):\n 1. stalk X is_open \\<O>\\<^sub>X \\<rho> b add_str mult_str zero_str one_str\n     {U. is_open U \\<and> x \\<in> U} x", "apply unfold_locales"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>U.\n       U \\<in> {U. is_open U \\<and> x \\<in> U} \\<Longrightarrow> is_open U\n 2. \\<And>U V.\n       \\<lbrakk>U \\<in> {U. is_open U \\<and> x \\<in> U};\n        V \\<in> {U. is_open U \\<and> x \\<in> U}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>W\\<in>{U. is_open U \\<and> x \\<in> U}.\n                            W \\<subseteq> U \\<inter> V\n 3. x \\<in> X\n 4. {U. is_open U \\<and> x \\<in> U} = {U. is_open U \\<and> x \\<in> U}", "using \\<open>x \\<in> X\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> X\n\ngoal (4 subgoals):\n 1. \\<And>U.\n       U \\<in> {U. is_open U \\<and> x \\<in> U} \\<Longrightarrow> is_open U\n 2. \\<And>U V.\n       \\<lbrakk>U \\<in> {U. is_open U \\<and> x \\<in> U};\n        V \\<in> {U. is_open U \\<and> x \\<in> U}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>W\\<in>{U. is_open U \\<and> x \\<in> U}.\n                            W \\<subseteq> U \\<inter> V\n 3. x \\<in> X\n 4. {U. is_open U \\<and> x \\<in> U} = {U. is_open U \\<and> x \\<in> U}", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. ind_btw.is_local U ind_btw.induced_morphism", "interpret stk2:stalk X is_open local.ind_sheaf ind_ring_morphisms b ind_add_str\n                ind_mult_str ind_zero_str ind_one_str \"{U. is_open U \\<and> x \\<in> U}\" x"], ["proof (prove)\ngoal (1 subgoal):\n 1. stalk X is_open local.ind_sheaf ind_ring_morphisms b ind_add_str\n     ind_mult_str ind_zero_str ind_one_str {U. is_open U \\<and> x \\<in> U} x", "apply unfold_locales"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>U.\n       U \\<in> {U. is_open U \\<and> x \\<in> U} \\<Longrightarrow> is_open U\n 2. \\<And>U V.\n       \\<lbrakk>U \\<in> {U. is_open U \\<and> x \\<in> U};\n        V \\<in> {U. is_open U \\<and> x \\<in> U}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>W\\<in>{U. is_open U \\<and> x \\<in> U}.\n                            W \\<subseteq> U \\<inter> V\n 3. x \\<in> X\n 4. {U. is_open U \\<and> x \\<in> U} = {U. is_open U \\<and> x \\<in> U}", "using \\<open>x \\<in> X\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> X\n\ngoal (4 subgoals):\n 1. \\<And>U.\n       U \\<in> {U. is_open U \\<and> x \\<in> U} \\<Longrightarrow> is_open U\n 2. \\<And>U V.\n       \\<lbrakk>U \\<in> {U. is_open U \\<and> x \\<in> U};\n        V \\<in> {U. is_open U \\<and> x \\<in> U}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>W\\<in>{U. is_open U \\<and> x \\<in> U}.\n                            W \\<subseteq> U \\<inter> V\n 3. x \\<in> X\n 4. {U. is_open U \\<and> x \\<in> U} = {U. is_open U \\<and> x \\<in> U}", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. ind_btw.is_local U ind_btw.induced_morphism", "interpret stk3:stalk Spec is_zariski_open sheaf_spec \n                sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n                zero_sheaf_spec one_sheaf_spec \"{U. is_zariski_open U \\<and> f x \\<in> U}\" \"f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stalk Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b\n     add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec\n     {U. is_zariski_open U \\<and> f x \\<in> U} (f x)", "apply unfold_locales"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>U.\n       U \\<in> {U. is_zariski_open U \\<and> f x \\<in> U} \\<Longrightarrow>\n       is_zariski_open U\n 2. \\<And>U V.\n       \\<lbrakk>U \\<in> {U. is_zariski_open U \\<and> f x \\<in> U};\n        V \\<in> {U. is_zariski_open U \\<and> f x \\<in> U}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>W\\<in>{U.\n   is_zariski_open U \\<and> f x \\<in> U}.\n                            W \\<subseteq> U \\<inter> V\n 3. f x \\<in> Spec\n 4. {U. is_zariski_open U \\<and> f x \\<in> U} =\n    {U. is_zariski_open U \\<and> f x \\<in> U}", "by (auto simp add: stk2.is_elem)"], ["proof (state)\ngoal (1 subgoal):\n 1. ind_btw.is_local U ind_btw.induced_morphism", "interpret ring31:ring_homomorphism induced_morphism stk3.carrier_stalk stk3.add_stalk \n              stk3.mult_stalk \"stk3.zero_stalk U\" \"stk3.one_stalk U\" stk1.carrier_stalk \n              stk1.add_stalk stk1.mult_stalk \"stk1.zero_stalk (f \\<^sup>\\<inverse> X U)\" \"stk1.one_stalk (f \\<^sup>\\<inverse> X U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ring_homomorphism induced_morphism stk3.carrier_stalk stk3.add_stalk\n     stk3.mult_stalk (stk3.zero_stalk U) (stk3.one_stalk U)\n     stk1.carrier_stalk stk1.add_stalk stk1.mult_stalk\n     (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk1.one_stalk (f \\<^sup>\\<inverse> X U))", "using ring_homomorphism_induced_morphism[OF \\<open>is_zariski_open U\\<close> \\<open>f x \\<in> U\\<close>]"], ["proof (prove)\nusing this:\n  ring_homomorphism induced_morphism stk3.carrier_stalk stk3.add_stalk\n   stk3.mult_stalk (stk3.zero_stalk U) (stk3.one_stalk U) stk1.carrier_stalk\n   stk1.add_stalk stk1.mult_stalk\n   (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk1.one_stalk (f \\<^sup>\\<inverse> X U))\n\ngoal (1 subgoal):\n 1. ring_homomorphism induced_morphism stk3.carrier_stalk stk3.add_stalk\n     stk3.mult_stalk (stk3.zero_stalk U) (stk3.one_stalk U)\n     stk1.carrier_stalk stk1.add_stalk stk1.mult_stalk\n     (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk1.one_stalk (f \\<^sup>\\<inverse> X U))", "."], ["proof (state)\ngoal (1 subgoal):\n 1. ind_btw.is_local U ind_btw.induced_morphism", "interpret ring32:ring_homomorphism ind_btw.induced_morphism stk3.carrier_stalk \n              stk3.add_stalk \n              stk3.mult_stalk \"stk3.zero_stalk U\" \"stk3.one_stalk U\" stk2.carrier_stalk \n              stk2.add_stalk stk2.mult_stalk \"stk2.zero_stalk (f \\<^sup>\\<inverse> X U)\" \"stk2.one_stalk (f \\<^sup>\\<inverse> X U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ring_homomorphism ind_btw.induced_morphism stk3.carrier_stalk\n     stk3.add_stalk stk3.mult_stalk (stk3.zero_stalk U) (stk3.one_stalk U)\n     stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk\n     (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk2.one_stalk (f \\<^sup>\\<inverse> X U))", "using ind_btw.ring_homomorphism_induced_morphism[OF \\<open>is_zariski_open U\\<close> \\<open>f x \\<in> U\\<close>]"], ["proof (prove)\nusing this:\n  ring_homomorphism ind_btw.induced_morphism stk3.carrier_stalk\n   stk3.add_stalk stk3.mult_stalk (stk3.zero_stalk U) (stk3.one_stalk U)\n   stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk\n   (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk2.one_stalk (f \\<^sup>\\<inverse> X U))\n\ngoal (1 subgoal):\n 1. ring_homomorphism ind_btw.induced_morphism stk3.carrier_stalk\n     stk3.add_stalk stk3.mult_stalk (stk3.zero_stalk U) (stk3.one_stalk U)\n     stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk\n     (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk2.one_stalk (f \\<^sup>\\<inverse> X U))", "."], ["proof (state)\ngoal (1 subgoal):\n 1. ind_btw.is_local U ind_btw.induced_morphism", "interpret iso:iso_stalks X is_open \\<O>\\<^sub>X \\<rho>  b add_str mult_str zero_str one_str   \n                      \"{U. is_open U \\<and> x \\<in> U}\" x local.ind_sheaf ind_ring_morphisms   \n                      ind_add_str \n                      ind_mult_str ind_zero_str ind_one_str"], ["proof (prove)\ngoal (1 subgoal):\n 1. iso_stalks X is_open \\<O>\\<^sub>X \\<rho> b add_str mult_str zero_str\n     one_str {U. is_open U \\<and> x \\<in> U} x local.ind_sheaf\n     ind_ring_morphisms ind_add_str ind_mult_str ind_zero_str ind_one_str", "apply unfold_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>U\\<in>{U. is_open U \\<and> x \\<in> U}.\n       \\<O>\\<^sub>X U = local.ind_sheaf U \\<and>\n       add_str U = ind_add_str U \\<and>\n       mult_str U = ind_mult_str U \\<and>\n       zero_str U = ind_zero_str U \\<and> one_str U = ind_one_str U\n 2. \\<forall>U V.\n       U \\<in> {U. is_open U \\<and> x \\<in> U} \\<and>\n       V \\<in> {U. is_open U \\<and> x \\<in> U} \\<longrightarrow>\n       \\<rho> U V = ind_ring_morphisms U V", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>U\\<in>{U. is_open U \\<and> x \\<in> U}.\n       \\<O>\\<^sub>X U = local.ind_sheaf U \\<and>\n       add_str U = ind_add_str U \\<and>\n       mult_str U = ind_mult_str U \\<and>\n       zero_str U = ind_zero_str U \\<and> one_str U = ind_one_str U", "by (metis eq_\\<O>\\<^sub>X eq_add_str eq_mult_str eq_one_str eq_zero_str open_imp_subset \n                    stk2.subset_of_opens)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>U V.\n       U \\<in> {U. is_open U \\<and> x \\<in> U} \\<and>\n       V \\<in> {U. is_open U \\<and> x \\<in> U} \\<longrightarrow>\n       \\<rho> U V = ind_ring_morphisms U V", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>U V.\n       U \\<in> {U. is_open U \\<and> x \\<in> U} \\<and>\n       V \\<in> {U. is_open U \\<and> x \\<in> U} \\<longrightarrow>\n       \\<rho> U V = ind_ring_morphisms U V", "using eq_\\<rho> open_imp_subset stk2.subset_of_opens"], ["proof (prove)\nusing this:\n  ?U3 \\<subseteq> X \\<and> ?V3 \\<subseteq> X \\<Longrightarrow>\n  ind_ring_morphisms ?U3 ?V3 = \\<rho> ?U3 ?V3\n  is_open ?U \\<Longrightarrow> ?U \\<subseteq> X\n  ?U \\<in> {U. is_open U \\<and> x \\<in> U} \\<Longrightarrow> is_open ?U\n\ngoal (1 subgoal):\n 1. \\<forall>U V.\n       U \\<in> {U. is_open U \\<and> x \\<in> U} \\<and>\n       V \\<in> {U. is_open U \\<and> x \\<in> U} \\<longrightarrow>\n       \\<rho> U V = ind_ring_morphisms U V", "by presburger"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\ngoal (1 subgoal):\n 1. ind_btw.is_local U ind_btw.induced_morphism", "have fU:\"f \\<^sup>\\<inverse> X U \\<in> {U. is_open U \\<and> x \\<in> U}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<^sup>\\<inverse> X U \\<in> {U. is_open U \\<and> x \\<in> U}", "using is_continuous[OF \\<open>is_zariski_open U\\<close>]"], ["proof (prove)\nusing this:\n  is_open (f \\<^sup>\\<inverse> X U)\n\ngoal (1 subgoal):\n 1. f \\<^sup>\\<inverse> X U \\<in> {U. is_open U \\<and> x \\<in> U}", "using stk2.is_elem that(3)"], ["proof (prove)\nusing this:\n  is_open (f \\<^sup>\\<inverse> X U)\n  x \\<in> X\n  f x \\<in> U\n\ngoal (1 subgoal):\n 1. f \\<^sup>\\<inverse> X U \\<in> {U. is_open U \\<and> x \\<in> U}", "by blast"], ["proof (state)\nthis:\n  f \\<^sup>\\<inverse> X U \\<in> {U. is_open U \\<and> x \\<in> U}\n\ngoal (1 subgoal):\n 1. ind_btw.is_local U ind_btw.induced_morphism", "have is_local:\"is_local U induced_morphism\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_local U induced_morphism", "using are_local_morphisms[of x U]"], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<in> X; is_zariski_open U; f x \\<in> U\\<rbrakk>\n  \\<Longrightarrow> is_local U induced_morphism\n\ngoal (1 subgoal):\n 1. is_local U induced_morphism", "using that"], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<in> X; is_zariski_open U; f x \\<in> U\\<rbrakk>\n  \\<Longrightarrow> is_local U induced_morphism\n  x \\<in> X\n  is_zariski_open U\n  f x \\<in> U\n\ngoal (1 subgoal):\n 1. is_local U induced_morphism", "by auto"], ["proof (state)\nthis:\n  is_local U induced_morphism\n\ngoal (1 subgoal):\n 1. ind_btw.is_local U ind_btw.induced_morphism", "from this[unfolded is_local_def]"], ["proof (chain)\npicking this:\n  local_ring_morphism induced_morphism stk3.carrier_stalk stk3.add_stalk\n   stk3.mult_stalk (stk3.zero_stalk U) (stk3.one_stalk U) stk1.carrier_stalk\n   stk1.add_stalk stk1.mult_stalk\n   (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk1.one_stalk (f \\<^sup>\\<inverse> X U))", "have \"local_ring_morphism (identity stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk) \n                    stk3.carrier_stalk stk3.add_stalk stk3.mult_stalk (stk3.zero_stalk U) \n                    (stk3.one_stalk U) stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk \n                     (stk2.zero_stalk (f \\<^sup>\\<inverse> X U)) (stk2.one_stalk (f \\<^sup>\\<inverse> X U))\""], ["proof (prove)\nusing this:\n  local_ring_morphism induced_morphism stk3.carrier_stalk stk3.add_stalk\n   stk3.mult_stalk (stk3.zero_stalk U) (stk3.one_stalk U) stk1.carrier_stalk\n   stk1.add_stalk stk1.mult_stalk\n   (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk1.one_stalk (f \\<^sup>\\<inverse> X U))\n\ngoal (1 subgoal):\n 1. local_ring_morphism\n     (identity\n       stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk)\n     stk3.carrier_stalk stk3.add_stalk stk3.mult_stalk (stk3.zero_stalk U)\n     (stk3.one_stalk U) stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk\n     (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk2.one_stalk (f \\<^sup>\\<inverse> X U))", "proof (elim comp_of_local_ring_morphisms)"], ["proof (state)\ngoal (1 subgoal):\n 1. local_ring_morphism (identity stk2.carrier_stalk) stk1.carrier_stalk\n     stk1.add_stalk stk1.mult_stalk\n     (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk1.one_stalk (f \\<^sup>\\<inverse> X U)) stk2.carrier_stalk\n     stk2.add_stalk stk2.mult_stalk\n     (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk2.one_stalk (f \\<^sup>\\<inverse> X U))", "interpret local_ring_morphism induced_morphism stk3.carrier_stalk stk3.add_stalk \n                stk3.mult_stalk \"stk3.zero_stalk U\" \"stk3.one_stalk U\" stk1.carrier_stalk \n                stk1.add_stalk stk1.mult_stalk \"stk1.zero_stalk (f \\<^sup>\\<inverse> X U)\"\n                \"stk1.one_stalk (f \\<^sup>\\<inverse> X U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local_ring_morphism induced_morphism stk3.carrier_stalk stk3.add_stalk\n     stk3.mult_stalk (stk3.zero_stalk U) (stk3.one_stalk U)\n     stk1.carrier_stalk stk1.add_stalk stk1.mult_stalk\n     (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk1.one_stalk (f \\<^sup>\\<inverse> X U))", "using is_local[unfolded is_local_def]"], ["proof (prove)\nusing this:\n  local_ring_morphism induced_morphism stk3.carrier_stalk stk3.add_stalk\n   stk3.mult_stalk (stk3.zero_stalk U) (stk3.one_stalk U) stk1.carrier_stalk\n   stk1.add_stalk stk1.mult_stalk\n   (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk1.one_stalk (f \\<^sup>\\<inverse> X U))\n\ngoal (1 subgoal):\n 1. local_ring_morphism induced_morphism stk3.carrier_stalk stk3.add_stalk\n     stk3.mult_stalk (stk3.zero_stalk U) (stk3.one_stalk U)\n     stk1.carrier_stalk stk1.add_stalk stk1.mult_stalk\n     (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk1.one_stalk (f \\<^sup>\\<inverse> X U))", "."], ["proof (state)\ngoal (1 subgoal):\n 1. local_ring_morphism (identity stk2.carrier_stalk) stk1.carrier_stalk\n     stk1.add_stalk stk1.mult_stalk\n     (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk1.one_stalk (f \\<^sup>\\<inverse> X U)) stk2.carrier_stalk\n     stk2.add_stalk stk2.mult_stalk\n     (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk2.one_stalk (f \\<^sup>\\<inverse> X U))", "have \"local_ring stk1.carrier_stalk stk1.add_stalk stk1.mult_stalk \n                      (stk1.zero_stalk (f \\<^sup>\\<inverse> X U)) (stk1.one_stalk (f \\<^sup>\\<inverse> X U))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local_ring stk1.carrier_stalk stk1.add_stalk stk1.mult_stalk\n     (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk1.one_stalk (f \\<^sup>\\<inverse> X U))", "using target.local_ring_axioms"], ["proof (prove)\nusing this:\n  local_ring stk1.carrier_stalk stk1.add_stalk stk1.mult_stalk\n   (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk1.one_stalk (f \\<^sup>\\<inverse> X U))\n\ngoal (1 subgoal):\n 1. local_ring stk1.carrier_stalk stk1.add_stalk stk1.mult_stalk\n     (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk1.one_stalk (f \\<^sup>\\<inverse> X U))", "."], ["proof (state)\nthis:\n  local_ring stk1.carrier_stalk stk1.add_stalk stk1.mult_stalk\n   (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk1.one_stalk (f \\<^sup>\\<inverse> X U))\n\ngoal (1 subgoal):\n 1. local_ring_morphism (identity stk2.carrier_stalk) stk1.carrier_stalk\n     stk1.add_stalk stk1.mult_stalk\n     (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk1.one_stalk (f \\<^sup>\\<inverse> X U)) stk2.carrier_stalk\n     stk2.add_stalk stk2.mult_stalk\n     (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk2.one_stalk (f \\<^sup>\\<inverse> X U))", "moreover"], ["proof (state)\nthis:\n  local_ring stk1.carrier_stalk stk1.add_stalk stk1.mult_stalk\n   (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk1.one_stalk (f \\<^sup>\\<inverse> X U))\n\ngoal (1 subgoal):\n 1. local_ring_morphism (identity stk2.carrier_stalk) stk1.carrier_stalk\n     stk1.add_stalk stk1.mult_stalk\n     (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk1.one_stalk (f \\<^sup>\\<inverse> X U)) stk2.carrier_stalk\n     stk2.add_stalk stk2.mult_stalk\n     (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk2.one_stalk (f \\<^sup>\\<inverse> X U))", "have \"ring_isomorphism (identity stk1.carrier_stalk) stk1.carrier_stalk \n                    stk1.add_stalk stk1.mult_stalk (stk1.zero_stalk (f \\<^sup>\\<inverse> X U)) \n                    (stk1.one_stalk (f \\<^sup>\\<inverse> X U)) stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk\n                    (stk2.zero_stalk (f \\<^sup>\\<inverse> X U)) (stk2.one_stalk (f \\<^sup>\\<inverse> X U))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ring_isomorphism (identity stk1.carrier_stalk) stk1.carrier_stalk\n     stk1.add_stalk stk1.mult_stalk\n     (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk1.one_stalk (f \\<^sup>\\<inverse> X U)) stk2.carrier_stalk\n     stk2.add_stalk stk2.mult_stalk\n     (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk2.one_stalk (f \\<^sup>\\<inverse> X U))", "using iso.has_ring_isomorphism[OF fU]"], ["proof (prove)\nusing this:\n  ring_isomorphism (identity stk1.carrier_stalk) stk1.carrier_stalk\n   stk1.add_stalk stk1.mult_stalk\n   (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk1.one_stalk (f \\<^sup>\\<inverse> X U)) stk2.carrier_stalk\n   stk2.add_stalk stk2.mult_stalk\n   (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk2.one_stalk (f \\<^sup>\\<inverse> X U))\n\ngoal (1 subgoal):\n 1. ring_isomorphism (identity stk1.carrier_stalk) stk1.carrier_stalk\n     stk1.add_stalk stk1.mult_stalk\n     (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk1.one_stalk (f \\<^sup>\\<inverse> X U)) stk2.carrier_stalk\n     stk2.add_stalk stk2.mult_stalk\n     (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk2.one_stalk (f \\<^sup>\\<inverse> X U))", "."], ["proof (state)\nthis:\n  ring_isomorphism (identity stk1.carrier_stalk) stk1.carrier_stalk\n   stk1.add_stalk stk1.mult_stalk\n   (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk1.one_stalk (f \\<^sup>\\<inverse> X U)) stk2.carrier_stalk\n   stk2.add_stalk stk2.mult_stalk\n   (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk2.one_stalk (f \\<^sup>\\<inverse> X U))\n\ngoal (1 subgoal):\n 1. local_ring_morphism (identity stk2.carrier_stalk) stk1.carrier_stalk\n     stk1.add_stalk stk1.mult_stalk\n     (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk1.one_stalk (f \\<^sup>\\<inverse> X U)) stk2.carrier_stalk\n     stk2.add_stalk stk2.mult_stalk\n     (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk2.one_stalk (f \\<^sup>\\<inverse> X U))", "ultimately"], ["proof (chain)\npicking this:\n  local_ring stk1.carrier_stalk stk1.add_stalk stk1.mult_stalk\n   (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk1.one_stalk (f \\<^sup>\\<inverse> X U))\n  ring_isomorphism (identity stk1.carrier_stalk) stk1.carrier_stalk\n   stk1.add_stalk stk1.mult_stalk\n   (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk1.one_stalk (f \\<^sup>\\<inverse> X U)) stk2.carrier_stalk\n   stk2.add_stalk stk2.mult_stalk\n   (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk2.one_stalk (f \\<^sup>\\<inverse> X U))", "have \"local_ring_morphism (identity stk1.carrier_stalk) stk1.carrier_stalk \n                    stk1.add_stalk stk1.mult_stalk (stk1.zero_stalk (f \\<^sup>\\<inverse> X U)) \n                    (stk1.one_stalk (f \\<^sup>\\<inverse> X U)) stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk\n                    (stk2.zero_stalk (f \\<^sup>\\<inverse> X U)) (stk2.one_stalk (f \\<^sup>\\<inverse> X U))\""], ["proof (prove)\nusing this:\n  local_ring stk1.carrier_stalk stk1.add_stalk stk1.mult_stalk\n   (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk1.one_stalk (f \\<^sup>\\<inverse> X U))\n  ring_isomorphism (identity stk1.carrier_stalk) stk1.carrier_stalk\n   stk1.add_stalk stk1.mult_stalk\n   (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk1.one_stalk (f \\<^sup>\\<inverse> X U)) stk2.carrier_stalk\n   stk2.add_stalk stk2.mult_stalk\n   (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk2.one_stalk (f \\<^sup>\\<inverse> X U))\n\ngoal (1 subgoal):\n 1. local_ring_morphism (identity stk1.carrier_stalk) stk1.carrier_stalk\n     stk1.add_stalk stk1.mult_stalk\n     (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk1.one_stalk (f \\<^sup>\\<inverse> X U)) stk2.carrier_stalk\n     stk2.add_stalk stk2.mult_stalk\n     (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk2.one_stalk (f \\<^sup>\\<inverse> X U))", "by (rule iso_is_local_ring_morphism)"], ["proof (state)\nthis:\n  local_ring_morphism (identity stk1.carrier_stalk) stk1.carrier_stalk\n   stk1.add_stalk stk1.mult_stalk\n   (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk1.one_stalk (f \\<^sup>\\<inverse> X U)) stk2.carrier_stalk\n   stk2.add_stalk stk2.mult_stalk\n   (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk2.one_stalk (f \\<^sup>\\<inverse> X U))\n\ngoal (1 subgoal):\n 1. local_ring_morphism (identity stk2.carrier_stalk) stk1.carrier_stalk\n     stk1.add_stalk stk1.mult_stalk\n     (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk1.one_stalk (f \\<^sup>\\<inverse> X U)) stk2.carrier_stalk\n     stk2.add_stalk stk2.mult_stalk\n     (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk2.one_stalk (f \\<^sup>\\<inverse> X U))", "then"], ["proof (chain)\npicking this:\n  local_ring_morphism (identity stk1.carrier_stalk) stk1.carrier_stalk\n   stk1.add_stalk stk1.mult_stalk\n   (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk1.one_stalk (f \\<^sup>\\<inverse> X U)) stk2.carrier_stalk\n   stk2.add_stalk stk2.mult_stalk\n   (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk2.one_stalk (f \\<^sup>\\<inverse> X U))", "show \"local_ring_morphism (identity stk2.carrier_stalk) stk1.carrier_stalk \n                    stk1.add_stalk stk1.mult_stalk (stk1.zero_stalk (f \\<^sup>\\<inverse> X U)) \n                    (stk1.one_stalk (f \\<^sup>\\<inverse> X U)) stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk\n                    (stk2.zero_stalk (f \\<^sup>\\<inverse> X U)) (stk2.one_stalk (f \\<^sup>\\<inverse> X U))\""], ["proof (prove)\nusing this:\n  local_ring_morphism (identity stk1.carrier_stalk) stk1.carrier_stalk\n   stk1.add_stalk stk1.mult_stalk\n   (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk1.one_stalk (f \\<^sup>\\<inverse> X U)) stk2.carrier_stalk\n   stk2.add_stalk stk2.mult_stalk\n   (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk2.one_stalk (f \\<^sup>\\<inverse> X U))\n\ngoal (1 subgoal):\n 1. local_ring_morphism (identity stk2.carrier_stalk) stk1.carrier_stalk\n     stk1.add_stalk stk1.mult_stalk\n     (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk1.one_stalk (f \\<^sup>\\<inverse> X U)) stk2.carrier_stalk\n     stk2.add_stalk stk2.mult_stalk\n     (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk2.one_stalk (f \\<^sup>\\<inverse> X U))", "using iso.carrier_stalk_eq[OF fU]"], ["proof (prove)\nusing this:\n  local_ring_morphism (identity stk1.carrier_stalk) stk1.carrier_stalk\n   stk1.add_stalk stk1.mult_stalk\n   (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk1.one_stalk (f \\<^sup>\\<inverse> X U)) stk2.carrier_stalk\n   stk2.add_stalk stk2.mult_stalk\n   (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk2.one_stalk (f \\<^sup>\\<inverse> X U))\n  stk1.carrier_stalk = stk2.carrier_stalk\n\ngoal (1 subgoal):\n 1. local_ring_morphism (identity stk2.carrier_stalk) stk1.carrier_stalk\n     stk1.add_stalk stk1.mult_stalk\n     (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk1.one_stalk (f \\<^sup>\\<inverse> X U)) stk2.carrier_stalk\n     stk2.add_stalk stk2.mult_stalk\n     (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk2.one_stalk (f \\<^sup>\\<inverse> X U))", "by simp"], ["proof (state)\nthis:\n  local_ring_morphism (identity stk2.carrier_stalk) stk1.carrier_stalk\n   stk1.add_stalk stk1.mult_stalk\n   (stk1.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk1.one_stalk (f \\<^sup>\\<inverse> X U)) stk2.carrier_stalk\n   stk2.add_stalk stk2.mult_stalk\n   (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk2.one_stalk (f \\<^sup>\\<inverse> X U))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local_ring_morphism\n   (identity\n     stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk)\n   stk3.carrier_stalk stk3.add_stalk stk3.mult_stalk (stk3.zero_stalk U)\n   (stk3.one_stalk U) stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk\n   (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk2.one_stalk (f \\<^sup>\\<inverse> X U))\n\ngoal (1 subgoal):\n 1. ind_btw.is_local U ind_btw.induced_morphism", "moreover"], ["proof (state)\nthis:\n  local_ring_morphism\n   (identity\n     stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk)\n   stk3.carrier_stalk stk3.add_stalk stk3.mult_stalk (stk3.zero_stalk U)\n   (stk3.one_stalk U) stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk\n   (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk2.one_stalk (f \\<^sup>\\<inverse> X U))\n\ngoal (1 subgoal):\n 1. ind_btw.is_local U ind_btw.induced_morphism", "have \"identity stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk\n                              = ind_btw.induced_morphism\""], ["proof (prove)\ngoal (1 subgoal):\n 1. identity\n     stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk =\n    ind_btw.induced_morphism", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. identity\n     stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk =\n    ind_btw.induced_morphism", "have \"(identity stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk) x \n                        = ind_btw.induced_morphism x\" (is \"?L=?R\") if \"x\\<in>stk3.carrier_stalk\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. (identity\n      stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk)\n     x =\n    ind_btw.induced_morphism x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (identity\n      stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk)\n     x =\n    ind_btw.induced_morphism x", "have \"?L = identity stk2.carrier_stalk (induced_morphism x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (identity\n      stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk)\n     x =\n    identity stk2.carrier_stalk (induced_morphism x)", "unfolding compose_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x\\<in>stk3.carrier_stalk.\n        identity stk2.carrier_stalk (induced_morphism x))\n     x =\n    identity stk2.carrier_stalk (induced_morphism x)", "using that"], ["proof (prove)\nusing this:\n  x \\<in> stk3.carrier_stalk\n\ngoal (1 subgoal):\n 1. (\\<lambda>x\\<in>stk3.carrier_stalk.\n        identity stk2.carrier_stalk (induced_morphism x))\n     x =\n    identity stk2.carrier_stalk (induced_morphism x)", "by simp"], ["proof (state)\nthis:\n  (identity\n    stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk)\n   x =\n  identity stk2.carrier_stalk (induced_morphism x)\n\ngoal (1 subgoal):\n 1. (identity\n      stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk)\n     x =\n    ind_btw.induced_morphism x", "also"], ["proof (state)\nthis:\n  (identity\n    stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk)\n   x =\n  identity stk2.carrier_stalk (induced_morphism x)\n\ngoal (1 subgoal):\n 1. (identity\n      stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk)\n     x =\n    ind_btw.induced_morphism x", "have \"... = induced_morphism x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. identity stk2.carrier_stalk (induced_morphism x) = induced_morphism x", "using that iso.carrier_stalk_eq[OF fU]"], ["proof (prove)\nusing this:\n  x \\<in> stk3.carrier_stalk\n  stk1.carrier_stalk = stk2.carrier_stalk\n\ngoal (1 subgoal):\n 1. identity stk2.carrier_stalk (induced_morphism x) = induced_morphism x", "by auto"], ["proof (state)\nthis:\n  identity stk2.carrier_stalk (induced_morphism x) = induced_morphism x\n\ngoal (1 subgoal):\n 1. (identity\n      stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk)\n     x =\n    ind_btw.induced_morphism x", "also"], ["proof (state)\nthis:\n  identity stk2.carrier_stalk (induced_morphism x) = induced_morphism x\n\ngoal (1 subgoal):\n 1. (identity\n      stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk)\n     x =\n    ind_btw.induced_morphism x", "have \"... = ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. induced_morphism x = ind_btw.induced_morphism x", "unfolding induced_morphism_def ind_btw.induced_morphism_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>C\\<in>stk3.carrier_stalk.\n        let r = SOME r. r \\<in> C\n        in stk1.class_of (f \\<^sup>\\<inverse> X (fst r))\n            (\\<phi>\\<^sub>f (fst r) (snd r)))\n     x =\n    (\\<lambda>C\\<in>stk3.carrier_stalk.\n        let r = SOME r. r \\<in> C\n        in stk2.class_of (f \\<^sup>\\<inverse> X (fst r))\n            (\\<phi>\\<^sub>f (fst r) (snd r)))\n     x", "using iso.class_of_eq[OF fU]"], ["proof (prove)\nusing this:\n  stk1.class_of = stk2.class_of\n\ngoal (1 subgoal):\n 1. (\\<lambda>C\\<in>stk3.carrier_stalk.\n        let r = SOME r. r \\<in> C\n        in stk1.class_of (f \\<^sup>\\<inverse> X (fst r))\n            (\\<phi>\\<^sub>f (fst r) (snd r)))\n     x =\n    (\\<lambda>C\\<in>stk3.carrier_stalk.\n        let r = SOME r. r \\<in> C\n        in stk2.class_of (f \\<^sup>\\<inverse> X (fst r))\n            (\\<phi>\\<^sub>f (fst r) (snd r)))\n     x", "by auto"], ["proof (state)\nthis:\n  induced_morphism x = ind_btw.induced_morphism x\n\ngoal (1 subgoal):\n 1. (identity\n      stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk)\n     x =\n    ind_btw.induced_morphism x", "finally"], ["proof (chain)\npicking this:\n  (identity\n    stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk)\n   x =\n  ind_btw.induced_morphism x", "show ?thesis"], ["proof (prove)\nusing this:\n  (identity\n    stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk)\n   x =\n  ind_btw.induced_morphism x\n\ngoal (1 subgoal):\n 1. (identity\n      stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk)\n     x =\n    ind_btw.induced_morphism x", "."], ["proof (state)\nthis:\n  (identity\n    stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk)\n   x =\n  ind_btw.induced_morphism x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x3 \\<in> stk3.carrier_stalk \\<Longrightarrow>\n  (identity\n    stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk)\n   ?x3 =\n  ind_btw.induced_morphism ?x3\n\ngoal (1 subgoal):\n 1. identity\n     stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk =\n    ind_btw.induced_morphism", "then"], ["proof (chain)\npicking this:\n  ?x3 \\<in> stk3.carrier_stalk \\<Longrightarrow>\n  (identity\n    stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk)\n   ?x3 =\n  ind_btw.induced_morphism ?x3", "show ?thesis"], ["proof (prove)\nusing this:\n  ?x3 \\<in> stk3.carrier_stalk \\<Longrightarrow>\n  (identity\n    stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk)\n   ?x3 =\n  ind_btw.induced_morphism ?x3\n\ngoal (1 subgoal):\n 1. identity\n     stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk =\n    ind_btw.induced_morphism", "unfolding ind_btw.induced_morphism_def"], ["proof (prove)\nusing this:\n  ?x3 \\<in> stk3.carrier_stalk \\<Longrightarrow>\n  (identity\n    stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk)\n   ?x3 =\n  (\\<lambda>C\\<in>stk3.carrier_stalk.\n      let r = SOME r. r \\<in> C\n      in stk2.class_of (f \\<^sup>\\<inverse> X (fst r))\n          (\\<phi>\\<^sub>f (fst r) (snd r)))\n   ?x3\n\ngoal (1 subgoal):\n 1. identity\n     stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk =\n    (\\<lambda>C\\<in>stk3.carrier_stalk.\n        let r = SOME r. r \\<in> C\n        in stk2.class_of (f \\<^sup>\\<inverse> X (fst r))\n            (\\<phi>\\<^sub>f (fst r) (snd r)))", "by (smt (z3) compose_def restrict_apply' restrict_ext)"], ["proof (state)\nthis:\n  identity\n   stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk =\n  ind_btw.induced_morphism\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  identity\n   stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk =\n  ind_btw.induced_morphism\n\ngoal (1 subgoal):\n 1. ind_btw.is_local U ind_btw.induced_morphism", "ultimately"], ["proof (chain)\npicking this:\n  local_ring_morphism\n   (identity\n     stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk)\n   stk3.carrier_stalk stk3.add_stalk stk3.mult_stalk (stk3.zero_stalk U)\n   (stk3.one_stalk U) stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk\n   (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk2.one_stalk (f \\<^sup>\\<inverse> X U))\n  identity\n   stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk =\n  ind_btw.induced_morphism", "show ?thesis"], ["proof (prove)\nusing this:\n  local_ring_morphism\n   (identity\n     stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk)\n   stk3.carrier_stalk stk3.add_stalk stk3.mult_stalk (stk3.zero_stalk U)\n   (stk3.one_stalk U) stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk\n   (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk2.one_stalk (f \\<^sup>\\<inverse> X U))\n  identity\n   stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk =\n  ind_btw.induced_morphism\n\ngoal (1 subgoal):\n 1. ind_btw.is_local U ind_btw.induced_morphism", "unfolding is_local_def ind_btw.is_local_def"], ["proof (prove)\nusing this:\n  local_ring_morphism\n   (identity\n     stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk)\n   stk3.carrier_stalk stk3.add_stalk stk3.mult_stalk (stk3.zero_stalk U)\n   (stk3.one_stalk U) stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk\n   (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n   (stk2.one_stalk (f \\<^sup>\\<inverse> X U))\n  identity\n   stk2.carrier_stalk \\<circ> induced_morphism \\<down> stk3.carrier_stalk =\n  ind_btw.induced_morphism\n\ngoal (1 subgoal):\n 1. local_ring_morphism ind_btw.induced_morphism stk3.carrier_stalk\n     stk3.add_stalk stk3.mult_stalk (stk3.zero_stalk U) (stk3.one_stalk U)\n     stk2.carrier_stalk stk2.add_stalk stk2.mult_stalk\n     (stk2.zero_stalk (f \\<^sup>\\<inverse> X U))\n     (stk2.one_stalk (f \\<^sup>\\<inverse> X U))", "by auto"], ["proof (state)\nthis:\n  ind_btw.is_local U ind_btw.induced_morphism\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?x3 \\<in> X; is_zariski_open ?U3; f ?x3 \\<in> ?U3\\<rbrakk>\n  \\<Longrightarrow> ind_mor_btw_stalks.is_local X is_open local.ind_sheaf\n                     ind_ring_morphisms ind_add_str ind_mult_str\n                     ind_zero_str ind_one_str is_zariski_open sheaf_spec\n                     sheaf_spec_morphisms add_sheaf_spec mult_sheaf_spec\n                     zero_sheaf_spec one_sheaf_spec f ?x3 ?U3\n                     \\<phi>\\<^bsub>X is_open local.ind_sheaf ind_ring_morphisms\nis_zariski_open sheaf_spec sheaf_spec_morphisms f \\<phi>\\<^sub>f ?x3\\<^esub>\n\ngoal (1 subgoal):\n 1. morphism_locally_ringed_spaces_axioms X is_open local.ind_sheaf\n     ind_ring_morphisms ind_add_str ind_mult_str ind_zero_str ind_one_str\n     is_zariski_open sheaf_spec sheaf_spec_morphisms add_sheaf_spec\n     mult_sheaf_spec zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x3 \\<in> X; is_zariski_open ?U3; f ?x3 \\<in> ?U3\\<rbrakk>\n  \\<Longrightarrow> ind_mor_btw_stalks.is_local X is_open local.ind_sheaf\n                     ind_ring_morphisms ind_add_str ind_mult_str\n                     ind_zero_str ind_one_str is_zariski_open sheaf_spec\n                     sheaf_spec_morphisms add_sheaf_spec mult_sheaf_spec\n                     zero_sheaf_spec one_sheaf_spec f ?x3 ?U3\n                     \\<phi>\\<^bsub>X is_open local.ind_sheaf ind_ring_morphisms\nis_zariski_open sheaf_spec sheaf_spec_morphisms f \\<phi>\\<^sub>f ?x3\\<^esub>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x3 \\<in> X; is_zariski_open ?U3; f ?x3 \\<in> ?U3\\<rbrakk>\n  \\<Longrightarrow> ind_mor_btw_stalks.is_local X is_open local.ind_sheaf\n                     ind_ring_morphisms ind_add_str ind_mult_str\n                     ind_zero_str ind_one_str is_zariski_open sheaf_spec\n                     sheaf_spec_morphisms add_sheaf_spec mult_sheaf_spec\n                     zero_sheaf_spec one_sheaf_spec f ?x3 ?U3\n                     \\<phi>\\<^bsub>X is_open local.ind_sheaf ind_ring_morphisms\nis_zariski_open sheaf_spec sheaf_spec_morphisms f \\<phi>\\<^sub>f ?x3\\<^esub>\n\ngoal (1 subgoal):\n 1. morphism_locally_ringed_spaces_axioms X is_open local.ind_sheaf\n     ind_ring_morphisms ind_add_str ind_mult_str ind_zero_str ind_one_str\n     is_zariski_open sheaf_spec sheaf_spec_morphisms add_sheaf_spec\n     mult_sheaf_spec zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f", "by (simp add: morphism_locally_ringed_spaces_axioms_def)"], ["proof (state)\nthis:\n  morphism_locally_ringed_spaces_axioms X is_open local.ind_sheaf\n   ind_ring_morphisms ind_add_str ind_mult_str ind_zero_str ind_one_str\n   is_zariski_open sheaf_spec sheaf_spec_morphisms add_sheaf_spec\n   mult_sheaf_spec zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces_axioms X is_open local.ind_sheaf\n     ind_ring_morphisms b ind_add_str ind_mult_str ind_zero_str ind_one_str\n     Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b\n     add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec f\n     \\<phi>\\<^sub>f", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces_axioms X is_open local.ind_sheaf\n     ind_ring_morphisms b ind_add_str ind_mult_str ind_zero_str ind_one_str\n     Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b\n     add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec f\n     \\<phi>\\<^sub>f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces_axioms X is_open local.ind_sheaf\n     ind_ring_morphisms b ind_add_str ind_mult_str ind_zero_str ind_one_str\n     Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b\n     add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec f\n     \\<phi>\\<^sub>f", "obtain \\<psi> where  \\<psi>_morph:\"morphism_presheaves_of_rings Spec is_zariski_open local.im_sheaf \n            im_sheaf_morphisms b add_im_sheaf mult_im_sheaf zero_im_sheaf one_im_sheaf sheaf_spec \n            sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec \\<psi>\" \n            and \\<psi>_comp:\"(\\<forall>U. is_zariski_open U \\<longrightarrow> (\\<forall>x\\<in>local.im_sheaf U. (\\<phi>\\<^sub>f U \\<circ> \\<psi> U) x = x) \n                      \\<and> (\\<forall>x\\<in>\\<O> U. (\\<psi> U \\<circ> \\<phi>\\<^sub>f U) x = x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<psi>.\n        \\<lbrakk>morphism_presheaves_of_rings Spec is_zariski_open\n                  local.im_sheaf im_sheaf_morphisms b add_im_sheaf\n                  mult_im_sheaf zero_im_sheaf one_im_sheaf sheaf_spec\n                  sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n                  zero_sheaf_spec one_sheaf_spec \\<psi>;\n         \\<forall>U.\n            is_zariski_open U \\<longrightarrow>\n            (\\<forall>x\\<in>local.im_sheaf U.\n                (\\<phi>\\<^sub>f U \\<circ> \\<psi> U) x = x) \\<and>\n            (\\<forall>x\\<in>\\<O> U.\n                (\\<psi> U \\<circ> \\<phi>\\<^sub>f U) x = x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using is_inv"], ["proof (prove)\nusing this:\n  \\<exists>\\<psi>.\n     morphism_presheaves_of_rings Spec is_zariski_open local.im_sheaf\n      im_sheaf_morphisms b add_im_sheaf mult_im_sheaf zero_im_sheaf\n      one_im_sheaf sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec\n      mult_sheaf_spec zero_sheaf_spec one_sheaf_spec \\<psi> \\<and>\n     (\\<forall>U.\n         is_zariski_open U \\<longrightarrow>\n         (\\<forall>x\\<in>local.im_sheaf U.\n             (\\<phi>\\<^sub>f U \\<circ> \\<psi> U) x = x) \\<and>\n         (\\<forall>x\\<in>\\<O> U. (\\<psi> U \\<circ> \\<phi>\\<^sub>f U) x = x))\n\ngoal (1 subgoal):\n 1. (\\<And>\\<psi>.\n        \\<lbrakk>morphism_presheaves_of_rings Spec is_zariski_open\n                  local.im_sheaf im_sheaf_morphisms b add_im_sheaf\n                  mult_im_sheaf zero_im_sheaf one_im_sheaf sheaf_spec\n                  sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n                  zero_sheaf_spec one_sheaf_spec \\<psi>;\n         \\<forall>U.\n            is_zariski_open U \\<longrightarrow>\n            (\\<forall>x\\<in>local.im_sheaf U.\n                (\\<phi>\\<^sub>f U \\<circ> \\<psi> U) x = x) \\<and>\n            (\\<forall>x\\<in>\\<O> U.\n                (\\<psi> U \\<circ> \\<phi>\\<^sub>f U) x = x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  morphism_presheaves_of_rings Spec is_zariski_open local.im_sheaf\n   im_sheaf_morphisms b add_im_sheaf mult_im_sheaf zero_im_sheaf\n   one_im_sheaf sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec\n   mult_sheaf_spec zero_sheaf_spec one_sheaf_spec \\<psi>\n  \\<forall>U.\n     is_zariski_open U \\<longrightarrow>\n     (\\<forall>x\\<in>local.im_sheaf U.\n         (\\<phi>\\<^sub>f U \\<circ> \\<psi> U) x = x) \\<and>\n     (\\<forall>x\\<in>\\<O> U. (\\<psi> U \\<circ> \\<phi>\\<^sub>f U) x = x)\n\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces_axioms X is_open local.ind_sheaf\n     ind_ring_morphisms b ind_add_str ind_mult_str ind_zero_str ind_one_str\n     Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b\n     add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec f\n     \\<phi>\\<^sub>f", "interpret \\<psi>_morph:morphism_presheaves_of_rings Spec is_zariski_open local.im_sheaf \n            im_sheaf_morphisms b add_im_sheaf mult_im_sheaf zero_im_sheaf one_im_sheaf sheaf_spec \n            sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec \\<psi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings Spec is_zariski_open local.im_sheaf\n     im_sheaf_morphisms b add_im_sheaf mult_im_sheaf zero_im_sheaf\n     one_im_sheaf sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec\n     mult_sheaf_spec zero_sheaf_spec one_sheaf_spec \\<psi>", "using \\<psi>_morph"], ["proof (prove)\nusing this:\n  morphism_presheaves_of_rings Spec is_zariski_open local.im_sheaf\n   im_sheaf_morphisms b add_im_sheaf mult_im_sheaf zero_im_sheaf\n   one_im_sheaf sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec\n   mult_sheaf_spec zero_sheaf_spec one_sheaf_spec \\<psi>\n\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings Spec is_zariski_open local.im_sheaf\n     im_sheaf_morphisms b add_im_sheaf mult_im_sheaf zero_im_sheaf\n     one_im_sheaf sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec\n     mult_sheaf_spec zero_sheaf_spec one_sheaf_spec \\<psi>", "."], ["proof (state)\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces_axioms X is_open local.ind_sheaf\n     ind_ring_morphisms b ind_add_str ind_mult_str ind_zero_str ind_one_str\n     Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b\n     add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec f\n     \\<phi>\\<^sub>f", "have \"morphism_presheaves_of_rings Spec is_zariski_open \n                  im_sheafXS.im_sheaf im_sheafXS.im_sheaf_morphisms b im_sheafXS.add_im_sheaf\n                  im_sheafXS.mult_im_sheaf im_sheafXS.zero_im_sheaf im_sheafXS.one_im_sheaf\n                  im_sheaf im_sheaf_morphisms b add_im_sheaf\n                  mult_im_sheaf zero_im_sheaf one_im_sheaf (\\<lambda>U. identity (im_sheafXS.im_sheaf U))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings Spec is_zariski_open im_sheafXS.im_sheaf\n     im_sheafXS.im_sheaf_morphisms b im_sheafXS.add_im_sheaf\n     im_sheafXS.mult_im_sheaf im_sheafXS.zero_im_sheaf\n     im_sheafXS.one_im_sheaf local.im_sheaf im_sheaf_morphisms b\n     add_im_sheaf mult_im_sheaf zero_im_sheaf one_im_sheaf\n     (\\<lambda>U. identity (im_sheafXS.im_sheaf U))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings Spec is_zariski_open im_sheafXS.im_sheaf\n     im_sheafXS.im_sheaf_morphisms b im_sheafXS.add_im_sheaf\n     im_sheafXS.mult_im_sheaf im_sheafXS.zero_im_sheaf\n     im_sheafXS.one_im_sheaf local.im_sheaf im_sheaf_morphisms b\n     add_im_sheaf mult_im_sheaf zero_im_sheaf one_im_sheaf\n     (\\<lambda>U. identity (im_sheafXS.im_sheaf U))", "have \"ring_homomorphism (identity (im_sheafXS.im_sheaf U)) (im_sheafXS.im_sheaf U) \n                  (im_sheafXS.add_im_sheaf U) (im_sheafXS.mult_im_sheaf U) (im_sheafXS.zero_im_sheaf U) \n                  (im_sheafXS.one_im_sheaf U) (local.im_sheaf U) (add_im_sheaf U) (mult_im_sheaf U) \n                  (zero_im_sheaf U) (one_im_sheaf U)\" \n              if \"is_zariski_open U\" for U"], ["proof (prove)\ngoal (1 subgoal):\n 1. ring_homomorphism (identity (im_sheafXS.im_sheaf U))\n     (im_sheafXS.im_sheaf U) (im_sheafXS.add_im_sheaf U)\n     (im_sheafXS.mult_im_sheaf U) (im_sheafXS.zero_im_sheaf U)\n     (im_sheafXS.one_im_sheaf U) (local.im_sheaf U) (add_im_sheaf U)\n     (mult_im_sheaf U) (zero_im_sheaf U) (one_im_sheaf U)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ring_homomorphism (identity (im_sheafXS.im_sheaf U))\n     (im_sheafXS.im_sheaf U) (im_sheafXS.add_im_sheaf U)\n     (im_sheafXS.mult_im_sheaf U) (im_sheafXS.zero_im_sheaf U)\n     (im_sheafXS.one_im_sheaf U) (local.im_sheaf U) (add_im_sheaf U)\n     (mult_im_sheaf U) (zero_im_sheaf U) (one_im_sheaf U)", "have \"bijective_map (\\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U) (local.im_sheaf U) \n                                    (im_sheafXS.im_sheaf U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bijective_map\n     (\\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U)\n     (local.im_sheaf U) (im_sheafXS.im_sheaf U)", "apply unfold_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U\n    \\<in> local.im_sheaf U \\<rightarrow>\\<^sub>E im_sheafXS.im_sheaf U\n 2. bij_betw (\\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U)\n     (local.im_sheaf U) (im_sheafXS.im_sheaf U)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U\n    \\<in> local.im_sheaf U \\<rightarrow>\\<^sub>E im_sheafXS.im_sheaf U", "by (smt (verit, ccfv_threshold) Int_commute Int_left_absorb Pi_I \\<psi>_comp \n                      compose_def im_sheafXS.im_sheaf_def local.im_sheaf_def local.ind_sheaf_def \n                      o_apply restrict_PiE that)"], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw (\\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U)\n     (local.im_sheaf U) (im_sheafXS.im_sheaf U)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw (\\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U)\n     (local.im_sheaf U) (im_sheafXS.im_sheaf U)", "by (smt (verit, best) \\<psi>_comp bij_betw_iff_bijections comp_apply compose_eq eq_\\<O>\\<^sub>X \n                      im_sheafXS.im_sheaf_def is_continuous local.im_sheaf_def open_imp_subset that)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  bijective_map (\\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U)\n   (local.im_sheaf U) (im_sheafXS.im_sheaf U)\n\ngoal (1 subgoal):\n 1. ring_homomorphism (identity (im_sheafXS.im_sheaf U))\n     (im_sheafXS.im_sheaf U) (im_sheafXS.add_im_sheaf U)\n     (im_sheafXS.mult_im_sheaf U) (im_sheafXS.zero_im_sheaf U)\n     (im_sheafXS.one_im_sheaf U) (local.im_sheaf U) (add_im_sheaf U)\n     (mult_im_sheaf U) (zero_im_sheaf U) (one_im_sheaf U)", "with comp_ring_morphisms[OF \\<psi>_morph.is_ring_morphism[OF that] ring_homoU[OF that]]"], ["proof (chain)\npicking this:\n  ring_homomorphism\n   (\\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U)\n   (local.im_sheaf U) (add_im_sheaf U) (mult_im_sheaf U) (zero_im_sheaf U)\n   (one_im_sheaf U) (im_sheafXS.im_sheaf U) (im_sheafXS.add_im_sheaf U)\n   (im_sheafXS.mult_im_sheaf U) (im_sheafXS.zero_im_sheaf U)\n   (im_sheafXS.one_im_sheaf U)\n  bijective_map (\\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U)\n   (local.im_sheaf U) (im_sheafXS.im_sheaf U)", "interpret ring_isomorphism \"\\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U\" \"local.im_sheaf U\" \n                \"add_im_sheaf U\" \"mult_im_sheaf U\" \"zero_im_sheaf U\" \"one_im_sheaf U\" \n                \"im_sheafXS.im_sheaf U\" \"im_sheafXS.add_im_sheaf U\" \"im_sheafXS.mult_im_sheaf U\"  \n                \"im_sheafXS.zero_im_sheaf U\" \"im_sheafXS.one_im_sheaf U\""], ["proof (prove)\nusing this:\n  ring_homomorphism\n   (\\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U)\n   (local.im_sheaf U) (add_im_sheaf U) (mult_im_sheaf U) (zero_im_sheaf U)\n   (one_im_sheaf U) (im_sheafXS.im_sheaf U) (im_sheafXS.add_im_sheaf U)\n   (im_sheafXS.mult_im_sheaf U) (im_sheafXS.zero_im_sheaf U)\n   (im_sheafXS.one_im_sheaf U)\n  bijective_map (\\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U)\n   (local.im_sheaf U) (im_sheafXS.im_sheaf U)\n\ngoal (1 subgoal):\n 1. ring_isomorphism\n     (\\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U)\n     (local.im_sheaf U) (add_im_sheaf U) (mult_im_sheaf U) (zero_im_sheaf U)\n     (one_im_sheaf U) (im_sheafXS.im_sheaf U) (im_sheafXS.add_im_sheaf U)\n     (im_sheafXS.mult_im_sheaf U) (im_sheafXS.zero_im_sheaf U)\n     (im_sheafXS.one_im_sheaf U)", "using ring_isomorphism.intro"], ["proof (prove)\nusing this:\n  ring_homomorphism\n   (\\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U)\n   (local.im_sheaf U) (add_im_sheaf U) (mult_im_sheaf U) (zero_im_sheaf U)\n   (one_im_sheaf U) (im_sheafXS.im_sheaf U) (im_sheafXS.add_im_sheaf U)\n   (im_sheafXS.mult_im_sheaf U) (im_sheafXS.zero_im_sheaf U)\n   (im_sheafXS.one_im_sheaf U)\n  bijective_map (\\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U)\n   (local.im_sheaf U) (im_sheafXS.im_sheaf U)\n  \\<lbrakk>ring_homomorphism ?\\<eta> ?R ?addition ?multiplication ?zero\n            ?unit ?R' ?addition' ?multiplication' ?zero' ?unit';\n   bijective_map ?\\<eta> ?R ?R'\\<rbrakk>\n  \\<Longrightarrow> ring_isomorphism ?\\<eta> ?R ?addition ?multiplication\n                     ?zero ?unit ?R' ?addition' ?multiplication' ?zero'\n                     ?unit'\n\ngoal (1 subgoal):\n 1. ring_isomorphism\n     (\\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U)\n     (local.im_sheaf U) (add_im_sheaf U) (mult_im_sheaf U) (zero_im_sheaf U)\n     (one_im_sheaf U) (im_sheafXS.im_sheaf U) (im_sheafXS.add_im_sheaf U)\n     (im_sheafXS.mult_im_sheaf U) (im_sheafXS.zero_im_sheaf U)\n     (im_sheafXS.one_im_sheaf U)", "by fast"], ["proof (state)\ngoal (1 subgoal):\n 1. ring_homomorphism (identity (im_sheafXS.im_sheaf U))\n     (im_sheafXS.im_sheaf U) (im_sheafXS.add_im_sheaf U)\n     (im_sheafXS.mult_im_sheaf U) (im_sheafXS.zero_im_sheaf U)\n     (im_sheafXS.one_im_sheaf U) (local.im_sheaf U) (add_im_sheaf U)\n     (mult_im_sheaf U) (zero_im_sheaf U) (one_im_sheaf U)", "have \"ring_homomorphism (restrict (inv_into (local.im_sheaf U) \n                      (\\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U)) (im_sheafXS.im_sheaf U))\n                      (im_sheafXS.im_sheaf U) (im_sheafXS.add_im_sheaf U) \n                      (im_sheafXS.mult_im_sheaf U) (im_sheafXS.zero_im_sheaf U)\n                      (im_sheafXS.one_im_sheaf U) (local.im_sheaf U) (add_im_sheaf U) \n                      (mult_im_sheaf U) (zero_im_sheaf U) (one_im_sheaf U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ring_homomorphism\n     (restrict\n       (inv_into (local.im_sheaf U)\n         (\\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U))\n       (im_sheafXS.im_sheaf U))\n     (im_sheafXS.im_sheaf U) (im_sheafXS.add_im_sheaf U)\n     (im_sheafXS.mult_im_sheaf U) (im_sheafXS.zero_im_sheaf U)\n     (im_sheafXS.one_im_sheaf U) (local.im_sheaf U) (add_im_sheaf U)\n     (mult_im_sheaf U) (zero_im_sheaf U) (one_im_sheaf U)", "using inverse_ring_isomorphism[unfolded ring_isomorphism_def]"], ["proof (prove)\nusing this:\n  ring_homomorphism\n   (restrict\n     (inv_into (local.im_sheaf U)\n       (\\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U))\n     (im_sheafXS.im_sheaf U))\n   (im_sheafXS.im_sheaf U) (im_sheafXS.add_im_sheaf U)\n   (im_sheafXS.mult_im_sheaf U) (im_sheafXS.zero_im_sheaf U)\n   (im_sheafXS.one_im_sheaf U) (local.im_sheaf U) (add_im_sheaf U)\n   (mult_im_sheaf U) (zero_im_sheaf U) (one_im_sheaf U) \\<and>\n  bijective_map\n   (restrict\n     (inv_into (local.im_sheaf U)\n       (\\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U))\n     (im_sheafXS.im_sheaf U))\n   (im_sheafXS.im_sheaf U) (local.im_sheaf U)\n\ngoal (1 subgoal):\n 1. ring_homomorphism\n     (restrict\n       (inv_into (local.im_sheaf U)\n         (\\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U))\n       (im_sheafXS.im_sheaf U))\n     (im_sheafXS.im_sheaf U) (im_sheafXS.add_im_sheaf U)\n     (im_sheafXS.mult_im_sheaf U) (im_sheafXS.zero_im_sheaf U)\n     (im_sheafXS.one_im_sheaf U) (local.im_sheaf U) (add_im_sheaf U)\n     (mult_im_sheaf U) (zero_im_sheaf U) (one_im_sheaf U)", "by auto"], ["proof (state)\nthis:\n  ring_homomorphism\n   (restrict\n     (inv_into (local.im_sheaf U)\n       (\\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U))\n     (im_sheafXS.im_sheaf U))\n   (im_sheafXS.im_sheaf U) (im_sheafXS.add_im_sheaf U)\n   (im_sheafXS.mult_im_sheaf U) (im_sheafXS.zero_im_sheaf U)\n   (im_sheafXS.one_im_sheaf U) (local.im_sheaf U) (add_im_sheaf U)\n   (mult_im_sheaf U) (zero_im_sheaf U) (one_im_sheaf U)\n\ngoal (1 subgoal):\n 1. ring_homomorphism (identity (im_sheafXS.im_sheaf U))\n     (im_sheafXS.im_sheaf U) (im_sheafXS.add_im_sheaf U)\n     (im_sheafXS.mult_im_sheaf U) (im_sheafXS.zero_im_sheaf U)\n     (im_sheafXS.one_im_sheaf U) (local.im_sheaf U) (add_im_sheaf U)\n     (mult_im_sheaf U) (zero_im_sheaf U) (one_im_sheaf U)", "moreover"], ["proof (state)\nthis:\n  ring_homomorphism\n   (restrict\n     (inv_into (local.im_sheaf U)\n       (\\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U))\n     (im_sheafXS.im_sheaf U))\n   (im_sheafXS.im_sheaf U) (im_sheafXS.add_im_sheaf U)\n   (im_sheafXS.mult_im_sheaf U) (im_sheafXS.zero_im_sheaf U)\n   (im_sheafXS.one_im_sheaf U) (local.im_sheaf U) (add_im_sheaf U)\n   (mult_im_sheaf U) (zero_im_sheaf U) (one_im_sheaf U)\n\ngoal (1 subgoal):\n 1. ring_homomorphism (identity (im_sheafXS.im_sheaf U))\n     (im_sheafXS.im_sheaf U) (im_sheafXS.add_im_sheaf U)\n     (im_sheafXS.mult_im_sheaf U) (im_sheafXS.zero_im_sheaf U)\n     (im_sheafXS.one_im_sheaf U) (local.im_sheaf U) (add_im_sheaf U)\n     (mult_im_sheaf U) (zero_im_sheaf U) (one_im_sheaf U)", "have \"(restrict (inv_into (local.im_sheaf U) \n                      (\\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U)) (im_sheafXS.im_sheaf U))\n                       = identity (im_sheafXS.im_sheaf U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict\n     (inv_into (local.im_sheaf U)\n       (\\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U))\n     (im_sheafXS.im_sheaf U) =\n    identity (im_sheafXS.im_sheaf U)", "by (smt (verit, best) Int_commute Int_left_absorb \\<psi>_comp compose_eq \n                    im_sheafXS.im_sheaf_def injective inv_into_f_f local.im_sheaf_def \n                    local.ind_sheaf_def o_apply restrict_ext that)"], ["proof (state)\nthis:\n  restrict\n   (inv_into (local.im_sheaf U)\n     (\\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U))\n   (im_sheafXS.im_sheaf U) =\n  identity (im_sheafXS.im_sheaf U)\n\ngoal (1 subgoal):\n 1. ring_homomorphism (identity (im_sheafXS.im_sheaf U))\n     (im_sheafXS.im_sheaf U) (im_sheafXS.add_im_sheaf U)\n     (im_sheafXS.mult_im_sheaf U) (im_sheafXS.zero_im_sheaf U)\n     (im_sheafXS.one_im_sheaf U) (local.im_sheaf U) (add_im_sheaf U)\n     (mult_im_sheaf U) (zero_im_sheaf U) (one_im_sheaf U)", "ultimately"], ["proof (chain)\npicking this:\n  ring_homomorphism\n   (restrict\n     (inv_into (local.im_sheaf U)\n       (\\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U))\n     (im_sheafXS.im_sheaf U))\n   (im_sheafXS.im_sheaf U) (im_sheafXS.add_im_sheaf U)\n   (im_sheafXS.mult_im_sheaf U) (im_sheafXS.zero_im_sheaf U)\n   (im_sheafXS.one_im_sheaf U) (local.im_sheaf U) (add_im_sheaf U)\n   (mult_im_sheaf U) (zero_im_sheaf U) (one_im_sheaf U)\n  restrict\n   (inv_into (local.im_sheaf U)\n     (\\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U))\n   (im_sheafXS.im_sheaf U) =\n  identity (im_sheafXS.im_sheaf U)", "show ?thesis"], ["proof (prove)\nusing this:\n  ring_homomorphism\n   (restrict\n     (inv_into (local.im_sheaf U)\n       (\\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U))\n     (im_sheafXS.im_sheaf U))\n   (im_sheafXS.im_sheaf U) (im_sheafXS.add_im_sheaf U)\n   (im_sheafXS.mult_im_sheaf U) (im_sheafXS.zero_im_sheaf U)\n   (im_sheafXS.one_im_sheaf U) (local.im_sheaf U) (add_im_sheaf U)\n   (mult_im_sheaf U) (zero_im_sheaf U) (one_im_sheaf U)\n  restrict\n   (inv_into (local.im_sheaf U)\n     (\\<phi>\\<^sub>f U \\<circ> \\<psi> U \\<down> local.im_sheaf U))\n   (im_sheafXS.im_sheaf U) =\n  identity (im_sheafXS.im_sheaf U)\n\ngoal (1 subgoal):\n 1. ring_homomorphism (identity (im_sheafXS.im_sheaf U))\n     (im_sheafXS.im_sheaf U) (im_sheafXS.add_im_sheaf U)\n     (im_sheafXS.mult_im_sheaf U) (im_sheafXS.zero_im_sheaf U)\n     (im_sheafXS.one_im_sheaf U) (local.im_sheaf U) (add_im_sheaf U)\n     (mult_im_sheaf U) (zero_im_sheaf U) (one_im_sheaf U)", "by auto"], ["proof (state)\nthis:\n  ring_homomorphism (identity (im_sheafXS.im_sheaf U))\n   (im_sheafXS.im_sheaf U) (im_sheafXS.add_im_sheaf U)\n   (im_sheafXS.mult_im_sheaf U) (im_sheafXS.zero_im_sheaf U)\n   (im_sheafXS.one_im_sheaf U) (local.im_sheaf U) (add_im_sheaf U)\n   (mult_im_sheaf U) (zero_im_sheaf U) (one_im_sheaf U)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_zariski_open ?U3 \\<Longrightarrow>\n  ring_homomorphism (identity (im_sheafXS.im_sheaf ?U3))\n   (im_sheafXS.im_sheaf ?U3) (im_sheafXS.add_im_sheaf ?U3)\n   (im_sheafXS.mult_im_sheaf ?U3) (im_sheafXS.zero_im_sheaf ?U3)\n   (im_sheafXS.one_im_sheaf ?U3) (local.im_sheaf ?U3) (add_im_sheaf ?U3)\n   (mult_im_sheaf ?U3) (zero_im_sheaf ?U3) (one_im_sheaf ?U3)\n\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings Spec is_zariski_open im_sheafXS.im_sheaf\n     im_sheafXS.im_sheaf_morphisms b im_sheafXS.add_im_sheaf\n     im_sheafXS.mult_im_sheaf im_sheafXS.zero_im_sheaf\n     im_sheafXS.one_im_sheaf local.im_sheaf im_sheaf_morphisms b\n     add_im_sheaf mult_im_sheaf zero_im_sheaf one_im_sheaf\n     (\\<lambda>U. identity (im_sheafXS.im_sheaf U))", "moreover"], ["proof (state)\nthis:\n  is_zariski_open ?U3 \\<Longrightarrow>\n  ring_homomorphism (identity (im_sheafXS.im_sheaf ?U3))\n   (im_sheafXS.im_sheaf ?U3) (im_sheafXS.add_im_sheaf ?U3)\n   (im_sheafXS.mult_im_sheaf ?U3) (im_sheafXS.zero_im_sheaf ?U3)\n   (im_sheafXS.one_im_sheaf ?U3) (local.im_sheaf ?U3) (add_im_sheaf ?U3)\n   (mult_im_sheaf ?U3) (zero_im_sheaf ?U3) (one_im_sheaf ?U3)\n\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings Spec is_zariski_open im_sheafXS.im_sheaf\n     im_sheafXS.im_sheaf_morphisms b im_sheafXS.add_im_sheaf\n     im_sheafXS.mult_im_sheaf im_sheafXS.zero_im_sheaf\n     im_sheafXS.one_im_sheaf local.im_sheaf im_sheaf_morphisms b\n     add_im_sheaf mult_im_sheaf zero_im_sheaf one_im_sheaf\n     (\\<lambda>U. identity (im_sheafXS.im_sheaf U))", "have \"(im_sheaf_morphisms U V \\<circ> identity (im_sheafXS.im_sheaf U)) x =\n                (identity (im_sheafXS.im_sheaf V) \\<circ> im_sheafXS.im_sheaf_morphisms U V) x\"\n              (is \"?L=?R\")\n              if \"is_zariski_open U\" \"is_zariski_open V\" \"V \\<subseteq> U\" \"x \\<in> im_sheafXS.im_sheaf U\"\n              for U V x"], ["proof (prove)\ngoal (1 subgoal):\n 1. (im_sheaf_morphisms U V \\<circ> identity (im_sheafXS.im_sheaf U)) x =\n    (identity (im_sheafXS.im_sheaf V) \\<circ>\n     im_sheafXS.im_sheaf_morphisms U V)\n     x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (im_sheaf_morphisms U V \\<circ> identity (im_sheafXS.im_sheaf U)) x =\n    (identity (im_sheafXS.im_sheaf V) \\<circ>\n     im_sheafXS.im_sheaf_morphisms U V)\n     x", "have \"?L = im_sheaf_morphisms U V x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (im_sheaf_morphisms U V \\<circ> identity (im_sheafXS.im_sheaf U)) x =\n    im_sheaf_morphisms U V x", "by (simp add: that(4))"], ["proof (state)\nthis:\n  (im_sheaf_morphisms U V \\<circ> identity (im_sheafXS.im_sheaf U)) x =\n  im_sheaf_morphisms U V x\n\ngoal (1 subgoal):\n 1. (im_sheaf_morphisms U V \\<circ> identity (im_sheafXS.im_sheaf U)) x =\n    (identity (im_sheafXS.im_sheaf V) \\<circ>\n     im_sheafXS.im_sheaf_morphisms U V)\n     x", "also"], ["proof (state)\nthis:\n  (im_sheaf_morphisms U V \\<circ> identity (im_sheafXS.im_sheaf U)) x =\n  im_sheaf_morphisms U V x\n\ngoal (1 subgoal):\n 1. (im_sheaf_morphisms U V \\<circ> identity (im_sheafXS.im_sheaf U)) x =\n    (identity (im_sheafXS.im_sheaf V) \\<circ>\n     im_sheafXS.im_sheaf_morphisms U V)\n     x", "have \"... = im_sheafXS.im_sheaf_morphisms U V x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. im_sheaf_morphisms U V x = im_sheafXS.im_sheaf_morphisms U V x", "by (simp add: eq_\\<rho> im_sheafXS.im_sheaf_morphisms_def im_sheaf_morphisms_def)"], ["proof (state)\nthis:\n  im_sheaf_morphisms U V x = im_sheafXS.im_sheaf_morphisms U V x\n\ngoal (1 subgoal):\n 1. (im_sheaf_morphisms U V \\<circ> identity (im_sheafXS.im_sheaf U)) x =\n    (identity (im_sheafXS.im_sheaf V) \\<circ>\n     im_sheafXS.im_sheaf_morphisms U V)\n     x", "also"], ["proof (state)\nthis:\n  im_sheaf_morphisms U V x = im_sheafXS.im_sheaf_morphisms U V x\n\ngoal (1 subgoal):\n 1. (im_sheaf_morphisms U V \\<circ> identity (im_sheafXS.im_sheaf U)) x =\n    (identity (im_sheafXS.im_sheaf V) \\<circ>\n     im_sheafXS.im_sheaf_morphisms U V)\n     x", "have \"... = ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. im_sheafXS.im_sheaf_morphisms U V x =\n    (identity (im_sheafXS.im_sheaf V) \\<circ>\n     im_sheafXS.im_sheaf_morphisms U V)\n     x", "using im_sheafXS.is_map_from_is_homomorphism[OF that(1,2,3)] map.map_closed that(4)"], ["proof (prove)\nusing this:\n  Set_Theory.map (im_sheafXS.im_sheaf_morphisms U V) (im_sheafXS.im_sheaf U)\n   (im_sheafXS.im_sheaf V)\n  \\<lbrakk>Set_Theory.map ?\\<alpha> ?S ?T; ?a \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> ?\\<alpha> ?a \\<in> ?T\n  x \\<in> im_sheafXS.im_sheaf U\n\ngoal (1 subgoal):\n 1. im_sheafXS.im_sheaf_morphisms U V x =\n    (identity (im_sheafXS.im_sheaf V) \\<circ>\n     im_sheafXS.im_sheaf_morphisms U V)\n     x", "by fastforce"], ["proof (state)\nthis:\n  im_sheafXS.im_sheaf_morphisms U V x =\n  (identity (im_sheafXS.im_sheaf V) \\<circ>\n   im_sheafXS.im_sheaf_morphisms U V)\n   x\n\ngoal (1 subgoal):\n 1. (im_sheaf_morphisms U V \\<circ> identity (im_sheafXS.im_sheaf U)) x =\n    (identity (im_sheafXS.im_sheaf V) \\<circ>\n     im_sheafXS.im_sheaf_morphisms U V)\n     x", "finally"], ["proof (chain)\npicking this:\n  (im_sheaf_morphisms U V \\<circ> identity (im_sheafXS.im_sheaf U)) x =\n  (identity (im_sheafXS.im_sheaf V) \\<circ>\n   im_sheafXS.im_sheaf_morphisms U V)\n   x", "show ?thesis"], ["proof (prove)\nusing this:\n  (im_sheaf_morphisms U V \\<circ> identity (im_sheafXS.im_sheaf U)) x =\n  (identity (im_sheafXS.im_sheaf V) \\<circ>\n   im_sheafXS.im_sheaf_morphisms U V)\n   x\n\ngoal (1 subgoal):\n 1. (im_sheaf_morphisms U V \\<circ> identity (im_sheafXS.im_sheaf U)) x =\n    (identity (im_sheafXS.im_sheaf V) \\<circ>\n     im_sheafXS.im_sheaf_morphisms U V)\n     x", "."], ["proof (state)\nthis:\n  (im_sheaf_morphisms U V \\<circ> identity (im_sheafXS.im_sheaf U)) x =\n  (identity (im_sheafXS.im_sheaf V) \\<circ>\n   im_sheafXS.im_sheaf_morphisms U V)\n   x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>is_zariski_open ?U3; is_zariski_open ?V3; ?V3 \\<subseteq> ?U3;\n   ?x3 \\<in> im_sheafXS.im_sheaf ?U3\\<rbrakk>\n  \\<Longrightarrow> (im_sheaf_morphisms ?U3 ?V3 \\<circ>\n                     identity (im_sheafXS.im_sheaf ?U3))\n                     ?x3 =\n                    (identity (im_sheafXS.im_sheaf ?V3) \\<circ>\n                     im_sheafXS.im_sheaf_morphisms ?U3 ?V3)\n                     ?x3\n\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings Spec is_zariski_open im_sheafXS.im_sheaf\n     im_sheafXS.im_sheaf_morphisms b im_sheafXS.add_im_sheaf\n     im_sheafXS.mult_im_sheaf im_sheafXS.zero_im_sheaf\n     im_sheafXS.one_im_sheaf local.im_sheaf im_sheaf_morphisms b\n     add_im_sheaf mult_im_sheaf zero_im_sheaf one_im_sheaf\n     (\\<lambda>U. identity (im_sheafXS.im_sheaf U))", "ultimately"], ["proof (chain)\npicking this:\n  is_zariski_open ?U3 \\<Longrightarrow>\n  ring_homomorphism (identity (im_sheafXS.im_sheaf ?U3))\n   (im_sheafXS.im_sheaf ?U3) (im_sheafXS.add_im_sheaf ?U3)\n   (im_sheafXS.mult_im_sheaf ?U3) (im_sheafXS.zero_im_sheaf ?U3)\n   (im_sheafXS.one_im_sheaf ?U3) (local.im_sheaf ?U3) (add_im_sheaf ?U3)\n   (mult_im_sheaf ?U3) (zero_im_sheaf ?U3) (one_im_sheaf ?U3)\n  \\<lbrakk>is_zariski_open ?U3; is_zariski_open ?V3; ?V3 \\<subseteq> ?U3;\n   ?x3 \\<in> im_sheafXS.im_sheaf ?U3\\<rbrakk>\n  \\<Longrightarrow> (im_sheaf_morphisms ?U3 ?V3 \\<circ>\n                     identity (im_sheafXS.im_sheaf ?U3))\n                     ?x3 =\n                    (identity (im_sheafXS.im_sheaf ?V3) \\<circ>\n                     im_sheafXS.im_sheaf_morphisms ?U3 ?V3)\n                     ?x3", "show ?thesis"], ["proof (prove)\nusing this:\n  is_zariski_open ?U3 \\<Longrightarrow>\n  ring_homomorphism (identity (im_sheafXS.im_sheaf ?U3))\n   (im_sheafXS.im_sheaf ?U3) (im_sheafXS.add_im_sheaf ?U3)\n   (im_sheafXS.mult_im_sheaf ?U3) (im_sheafXS.zero_im_sheaf ?U3)\n   (im_sheafXS.one_im_sheaf ?U3) (local.im_sheaf ?U3) (add_im_sheaf ?U3)\n   (mult_im_sheaf ?U3) (zero_im_sheaf ?U3) (one_im_sheaf ?U3)\n  \\<lbrakk>is_zariski_open ?U3; is_zariski_open ?V3; ?V3 \\<subseteq> ?U3;\n   ?x3 \\<in> im_sheafXS.im_sheaf ?U3\\<rbrakk>\n  \\<Longrightarrow> (im_sheaf_morphisms ?U3 ?V3 \\<circ>\n                     identity (im_sheafXS.im_sheaf ?U3))\n                     ?x3 =\n                    (identity (im_sheafXS.im_sheaf ?V3) \\<circ>\n                     im_sheafXS.im_sheaf_morphisms ?U3 ?V3)\n                     ?x3\n\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings Spec is_zariski_open im_sheafXS.im_sheaf\n     im_sheafXS.im_sheaf_morphisms b im_sheafXS.add_im_sheaf\n     im_sheafXS.mult_im_sheaf im_sheafXS.zero_im_sheaf\n     im_sheafXS.one_im_sheaf local.im_sheaf im_sheaf_morphisms b\n     add_im_sheaf mult_im_sheaf zero_im_sheaf one_im_sheaf\n     (\\<lambda>U. identity (im_sheafXS.im_sheaf U))", "apply intro_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>U.\n                is_zariski_open U \\<Longrightarrow>\n                ring_homomorphism (identity (im_sheafXS.im_sheaf U))\n                 (im_sheafXS.im_sheaf U) (im_sheafXS.add_im_sheaf U)\n                 (im_sheafXS.mult_im_sheaf U) (im_sheafXS.zero_im_sheaf U)\n                 (im_sheafXS.one_im_sheaf U) (local.im_sheaf U)\n                 (add_im_sheaf U) (mult_im_sheaf U) (zero_im_sheaf U)\n                 (one_im_sheaf U);\n     \\<And>U V x.\n        \\<lbrakk>is_zariski_open U; is_zariski_open V; V \\<subseteq> U;\n         x \\<in> im_sheafXS.im_sheaf U\\<rbrakk>\n        \\<Longrightarrow> (im_sheaf_morphisms U V \\<circ>\n                           identity (im_sheafXS.im_sheaf U))\n                           x =\n                          (identity (im_sheafXS.im_sheaf V) \\<circ>\n                           im_sheafXS.im_sheaf_morphisms U V)\n                           x\\<rbrakk>\n    \\<Longrightarrow> morphism_presheaves_of_rings_axioms is_zariski_open\n                       im_sheafXS.im_sheaf im_sheafXS.im_sheaf_morphisms\n                       im_sheafXS.add_im_sheaf im_sheafXS.mult_im_sheaf\n                       im_sheafXS.zero_im_sheaf im_sheafXS.one_im_sheaf\n                       local.im_sheaf im_sheaf_morphisms add_im_sheaf\n                       mult_im_sheaf zero_im_sheaf one_im_sheaf\n                       (\\<lambda>U. identity (im_sheafXS.im_sheaf U))", "unfolding morphism_presheaves_of_rings_axioms_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>U.\n                is_zariski_open U \\<Longrightarrow>\n                ring_homomorphism (identity (im_sheafXS.im_sheaf U))\n                 (im_sheafXS.im_sheaf U) (im_sheafXS.add_im_sheaf U)\n                 (im_sheafXS.mult_im_sheaf U) (im_sheafXS.zero_im_sheaf U)\n                 (im_sheafXS.one_im_sheaf U) (local.im_sheaf U)\n                 (add_im_sheaf U) (mult_im_sheaf U) (zero_im_sheaf U)\n                 (one_im_sheaf U);\n     \\<And>U V x.\n        \\<lbrakk>is_zariski_open U; is_zariski_open V; V \\<subseteq> U;\n         x \\<in> im_sheafXS.im_sheaf U\\<rbrakk>\n        \\<Longrightarrow> (im_sheaf_morphisms U V \\<circ>\n                           identity (im_sheafXS.im_sheaf U))\n                           x =\n                          (identity (im_sheafXS.im_sheaf V) \\<circ>\n                           im_sheafXS.im_sheaf_morphisms U V)\n                           x\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>U.\n                          is_zariski_open U \\<longrightarrow>\n                          ring_homomorphism\n                           (identity (im_sheafXS.im_sheaf U))\n                           (im_sheafXS.im_sheaf U)\n                           (im_sheafXS.add_im_sheaf U)\n                           (im_sheafXS.mult_im_sheaf U)\n                           (im_sheafXS.zero_im_sheaf U)\n                           (im_sheafXS.one_im_sheaf U) (local.im_sheaf U)\n                           (add_im_sheaf U) (mult_im_sheaf U)\n                           (zero_im_sheaf U) (one_im_sheaf U)) \\<and>\n                      (\\<forall>U V.\n                          is_zariski_open U \\<longrightarrow>\n                          is_zariski_open V \\<longrightarrow>\n                          V \\<subseteq> U \\<longrightarrow>\n                          (\\<forall>x.\n                              x \\<in> im_sheafXS.im_sheaf\n U \\<longrightarrow>\n                              (im_sheaf_morphisms U V \\<circ>\n                               identity (im_sheafXS.im_sheaf U))\n                               x =\n                              (identity (im_sheafXS.im_sheaf V) \\<circ>\n                               im_sheafXS.im_sheaf_morphisms U V)\n                               x))", "by auto"], ["proof (state)\nthis:\n  morphism_presheaves_of_rings Spec is_zariski_open im_sheafXS.im_sheaf\n   im_sheafXS.im_sheaf_morphisms b im_sheafXS.add_im_sheaf\n   im_sheafXS.mult_im_sheaf im_sheafXS.zero_im_sheaf im_sheafXS.one_im_sheaf\n   local.im_sheaf im_sheaf_morphisms b add_im_sheaf mult_im_sheaf\n   zero_im_sheaf one_im_sheaf (\\<lambda>U. identity (im_sheafXS.im_sheaf U))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  morphism_presheaves_of_rings Spec is_zariski_open im_sheafXS.im_sheaf\n   im_sheafXS.im_sheaf_morphisms b im_sheafXS.add_im_sheaf\n   im_sheafXS.mult_im_sheaf im_sheafXS.zero_im_sheaf im_sheafXS.one_im_sheaf\n   local.im_sheaf im_sheaf_morphisms b add_im_sheaf mult_im_sheaf\n   zero_im_sheaf one_im_sheaf (\\<lambda>U. identity (im_sheafXS.im_sheaf U))\n\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces_axioms X is_open local.ind_sheaf\n     ind_ring_morphisms b ind_add_str ind_mult_str ind_zero_str ind_one_str\n     Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b\n     add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec f\n     \\<phi>\\<^sub>f", "from comp_of_presheaves[OF this \\<psi>_morph]"], ["proof (chain)\npicking this:\n  morphism_presheaves_of_rings Spec is_zariski_open im_sheafXS.im_sheaf\n   im_sheafXS.im_sheaf_morphisms b im_sheafXS.add_im_sheaf\n   im_sheafXS.mult_im_sheaf im_sheafXS.zero_im_sheaf im_sheafXS.one_im_sheaf\n   sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n   zero_sheaf_spec one_sheaf_spec\n   (\\<lambda>U.\n       \\<psi>\n        U \\<circ> identity\n                   (im_sheafXS.im_sheaf U) \\<down> im_sheafXS.im_sheaf U)", "have \"morphism_presheaves_of_rings Spec is_zariski_open im_sheafXS.im_sheaf \n                  im_sheafXS.im_sheaf_morphisms b im_sheafXS.add_im_sheaf im_sheafXS.mult_im_sheaf \n                im_sheafXS.zero_im_sheaf im_sheafXS.one_im_sheaf sheaf_spec\n              sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec\n                (\\<lambda>U. \\<psi> U \\<circ> identity (im_sheafXS.im_sheaf U) \\<down> im_sheafXS.im_sheaf U)\""], ["proof (prove)\nusing this:\n  morphism_presheaves_of_rings Spec is_zariski_open im_sheafXS.im_sheaf\n   im_sheafXS.im_sheaf_morphisms b im_sheafXS.add_im_sheaf\n   im_sheafXS.mult_im_sheaf im_sheafXS.zero_im_sheaf im_sheafXS.one_im_sheaf\n   sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n   zero_sheaf_spec one_sheaf_spec\n   (\\<lambda>U.\n       \\<psi>\n        U \\<circ> identity\n                   (im_sheafXS.im_sheaf U) \\<down> im_sheafXS.im_sheaf U)\n\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings Spec is_zariski_open im_sheafXS.im_sheaf\n     im_sheafXS.im_sheaf_morphisms b im_sheafXS.add_im_sheaf\n     im_sheafXS.mult_im_sheaf im_sheafXS.zero_im_sheaf\n     im_sheafXS.one_im_sheaf sheaf_spec sheaf_spec_morphisms \\<O>b\n     add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec\n     (\\<lambda>U.\n         \\<psi>\n          U \\<circ> identity\n                     (im_sheafXS.im_sheaf U) \\<down> im_sheafXS.im_sheaf U)", "by simp"], ["proof (state)\nthis:\n  morphism_presheaves_of_rings Spec is_zariski_open im_sheafXS.im_sheaf\n   im_sheafXS.im_sheaf_morphisms b im_sheafXS.add_im_sheaf\n   im_sheafXS.mult_im_sheaf im_sheafXS.zero_im_sheaf im_sheafXS.one_im_sheaf\n   sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n   zero_sheaf_spec one_sheaf_spec\n   (\\<lambda>U.\n       \\<psi>\n        U \\<circ> identity\n                   (im_sheafXS.im_sheaf U) \\<down> im_sheafXS.im_sheaf U)\n\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces_axioms X is_open local.ind_sheaf\n     ind_ring_morphisms b ind_add_str ind_mult_str ind_zero_str ind_one_str\n     Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b\n     add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec f\n     \\<phi>\\<^sub>f", "then"], ["proof (chain)\npicking this:\n  morphism_presheaves_of_rings Spec is_zariski_open im_sheafXS.im_sheaf\n   im_sheafXS.im_sheaf_morphisms b im_sheafXS.add_im_sheaf\n   im_sheafXS.mult_im_sheaf im_sheafXS.zero_im_sheaf im_sheafXS.one_im_sheaf\n   sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n   zero_sheaf_spec one_sheaf_spec\n   (\\<lambda>U.\n       \\<psi>\n        U \\<circ> identity\n                   (im_sheafXS.im_sheaf U) \\<down> im_sheafXS.im_sheaf U)", "have \"morphism_presheaves_of_rings Spec is_zariski_open im_sheafXS.im_sheaf \n            im_sheafXS.im_sheaf_morphisms b im_sheafXS.add_im_sheaf im_sheafXS.mult_im_sheaf \n            im_sheafXS.zero_im_sheaf im_sheafXS.one_im_sheaf sheaf_spec sheaf_spec_morphisms \\<O>b \n            add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec \\<psi>\""], ["proof (prove)\nusing this:\n  morphism_presheaves_of_rings Spec is_zariski_open im_sheafXS.im_sheaf\n   im_sheafXS.im_sheaf_morphisms b im_sheafXS.add_im_sheaf\n   im_sheafXS.mult_im_sheaf im_sheafXS.zero_im_sheaf im_sheafXS.one_im_sheaf\n   sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n   zero_sheaf_spec one_sheaf_spec\n   (\\<lambda>U.\n       \\<psi>\n        U \\<circ> identity\n                   (im_sheafXS.im_sheaf U) \\<down> im_sheafXS.im_sheaf U)\n\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings Spec is_zariski_open im_sheafXS.im_sheaf\n     im_sheafXS.im_sheaf_morphisms b im_sheafXS.add_im_sheaf\n     im_sheafXS.mult_im_sheaf im_sheafXS.zero_im_sheaf\n     im_sheafXS.one_im_sheaf sheaf_spec sheaf_spec_morphisms \\<O>b\n     add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec \\<psi>", "proof (elim morphism_presheaves_of_rings.morphism_presheaves_of_rings_fam_cong)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>U x.\n       \\<lbrakk>is_zariski_open U; x \\<in> im_sheafXS.im_sheaf U\\<rbrakk>\n       \\<Longrightarrow> \\<psi> U x =\n                         (\\<psi>\n                           U \\<circ> identity\n(im_sheafXS.im_sheaf U) \\<down> im_sheafXS.im_sheaf U)\n                          x\n 2. \\<And>U.\n       is_zariski_open U \\<Longrightarrow>\n       \\<psi> U \\<in> extensional (im_sheafXS.im_sheaf U)", "fix U x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>U x.\n       \\<lbrakk>is_zariski_open U; x \\<in> im_sheafXS.im_sheaf U\\<rbrakk>\n       \\<Longrightarrow> \\<psi> U x =\n                         (\\<psi>\n                           U \\<circ> identity\n(im_sheafXS.im_sheaf U) \\<down> im_sheafXS.im_sheaf U)\n                          x\n 2. \\<And>U.\n       is_zariski_open U \\<Longrightarrow>\n       \\<psi> U \\<in> extensional (im_sheafXS.im_sheaf U)", "assume \"is_zariski_open U\" \"x \\<in> im_sheafXS.im_sheaf U\""], ["proof (state)\nthis:\n  is_zariski_open U\n  x \\<in> im_sheafXS.im_sheaf U\n\ngoal (2 subgoals):\n 1. \\<And>U x.\n       \\<lbrakk>is_zariski_open U; x \\<in> im_sheafXS.im_sheaf U\\<rbrakk>\n       \\<Longrightarrow> \\<psi> U x =\n                         (\\<psi>\n                           U \\<circ> identity\n(im_sheafXS.im_sheaf U) \\<down> im_sheafXS.im_sheaf U)\n                          x\n 2. \\<And>U.\n       is_zariski_open U \\<Longrightarrow>\n       \\<psi> U \\<in> extensional (im_sheafXS.im_sheaf U)", "then"], ["proof (chain)\npicking this:\n  is_zariski_open U\n  x \\<in> im_sheafXS.im_sheaf U", "show \" \\<psi> U x = (\\<psi> U \\<circ> identity (im_sheafXS.im_sheaf U) \\<down> im_sheafXS.im_sheaf U) x\""], ["proof (prove)\nusing this:\n  is_zariski_open U\n  x \\<in> im_sheafXS.im_sheaf U\n\ngoal (1 subgoal):\n 1. \\<psi> U x =\n    (\\<psi>\n      U \\<circ> identity\n                 (im_sheafXS.im_sheaf U) \\<down> im_sheafXS.im_sheaf U)\n     x", "by (simp add: compose_eq)"], ["proof (state)\nthis:\n  \\<psi> U x =\n  (\\<psi>\n    U \\<circ> identity\n               (im_sheafXS.im_sheaf U) \\<down> im_sheafXS.im_sheaf U)\n   x\n\ngoal (1 subgoal):\n 1. \\<And>U.\n       is_zariski_open U \\<Longrightarrow>\n       \\<psi> U \\<in> extensional (im_sheafXS.im_sheaf U)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>U.\n       is_zariski_open U \\<Longrightarrow>\n       \\<psi> U \\<in> extensional (im_sheafXS.im_sheaf U)", "show \"\\<And>U. is_zariski_open U \\<Longrightarrow> \\<psi> U \\<in> extensional (im_sheafXS.im_sheaf U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>U.\n       is_zariski_open U \\<Longrightarrow>\n       \\<psi> U \\<in> extensional (im_sheafXS.im_sheaf U)", "by (metis PiE_iff \\<psi>_morph.fam_morphisms_are_maps eq_\\<O>\\<^sub>X im_sheafXS.im_sheaf_def \n                  is_continuous local.im_sheaf_def map.graph open_imp_subset)"], ["proof (state)\nthis:\n  is_zariski_open ?U3 \\<Longrightarrow>\n  \\<psi> ?U3 \\<in> extensional (im_sheafXS.im_sheaf ?U3)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  morphism_presheaves_of_rings Spec is_zariski_open im_sheafXS.im_sheaf\n   im_sheafXS.im_sheaf_morphisms b im_sheafXS.add_im_sheaf\n   im_sheafXS.mult_im_sheaf im_sheafXS.zero_im_sheaf im_sheafXS.one_im_sheaf\n   sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n   zero_sheaf_spec one_sheaf_spec \\<psi>\n\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces_axioms X is_open local.ind_sheaf\n     ind_ring_morphisms b ind_add_str ind_mult_str ind_zero_str ind_one_str\n     Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b\n     add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec f\n     \\<phi>\\<^sub>f", "moreover"], ["proof (state)\nthis:\n  morphism_presheaves_of_rings Spec is_zariski_open im_sheafXS.im_sheaf\n   im_sheafXS.im_sheaf_morphisms b im_sheafXS.add_im_sheaf\n   im_sheafXS.mult_im_sheaf im_sheafXS.zero_im_sheaf im_sheafXS.one_im_sheaf\n   sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n   zero_sheaf_spec one_sheaf_spec \\<psi>\n\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces_axioms X is_open local.ind_sheaf\n     ind_ring_morphisms b ind_add_str ind_mult_str ind_zero_str ind_one_str\n     Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b\n     add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec f\n     \\<phi>\\<^sub>f", "have \" (\\<forall>U. is_zariski_open U \\<longrightarrow> (\\<forall>x\\<in>im_sheafXS.im_sheaf U. (\\<phi>\\<^sub>f U \\<circ> \\<psi> U) x = x) \n                        \\<and> (\\<forall>x\\<in>\\<O> U. (\\<psi> U \\<circ> \\<phi>\\<^sub>f U) x = x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>U.\n       is_zariski_open U \\<longrightarrow>\n       (\\<forall>x\\<in>im_sheafXS.im_sheaf U.\n           (\\<phi>\\<^sub>f U \\<circ> \\<psi> U) x = x) \\<and>\n       (\\<forall>x\\<in>\\<O> U. (\\<psi> U \\<circ> \\<phi>\\<^sub>f U) x = x)", "using \\<psi>_comp"], ["proof (prove)\nusing this:\n  \\<forall>U.\n     is_zariski_open U \\<longrightarrow>\n     (\\<forall>x\\<in>local.im_sheaf U.\n         (\\<phi>\\<^sub>f U \\<circ> \\<psi> U) x = x) \\<and>\n     (\\<forall>x\\<in>\\<O> U. (\\<psi> U \\<circ> \\<phi>\\<^sub>f U) x = x)\n\ngoal (1 subgoal):\n 1. \\<forall>U.\n       is_zariski_open U \\<longrightarrow>\n       (\\<forall>x\\<in>im_sheafXS.im_sheaf U.\n           (\\<phi>\\<^sub>f U \\<circ> \\<psi> U) x = x) \\<and>\n       (\\<forall>x\\<in>\\<O> U. (\\<psi> U \\<circ> \\<phi>\\<^sub>f U) x = x)", "by (metis Int_commute Int_left_absorb im_sheafXS.im_sheaf_def local.im_sheaf_def \n                local.ind_sheaf_def)"], ["proof (state)\nthis:\n  \\<forall>U.\n     is_zariski_open U \\<longrightarrow>\n     (\\<forall>x\\<in>im_sheafXS.im_sheaf U.\n         (\\<phi>\\<^sub>f U \\<circ> \\<psi> U) x = x) \\<and>\n     (\\<forall>x\\<in>\\<O> U. (\\<psi> U \\<circ> \\<phi>\\<^sub>f U) x = x)\n\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces_axioms X is_open local.ind_sheaf\n     ind_ring_morphisms b ind_add_str ind_mult_str ind_zero_str ind_one_str\n     Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b\n     add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec f\n     \\<phi>\\<^sub>f", "moreover"], ["proof (state)\nthis:\n  \\<forall>U.\n     is_zariski_open U \\<longrightarrow>\n     (\\<forall>x\\<in>im_sheafXS.im_sheaf U.\n         (\\<phi>\\<^sub>f U \\<circ> \\<psi> U) x = x) \\<and>\n     (\\<forall>x\\<in>\\<O> U. (\\<psi> U \\<circ> \\<phi>\\<^sub>f U) x = x)\n\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces_axioms X is_open local.ind_sheaf\n     ind_ring_morphisms b ind_add_str ind_mult_str ind_zero_str ind_one_str\n     Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b\n     add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec f\n     \\<phi>\\<^sub>f", "have \"homeomorphism X is_open Spec is_zariski_open f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. homeomorphism X is_open Spec is_zariski_open f", "using is_homeomorphism"], ["proof (prove)\nusing this:\n  homeomorphism X is_open Spec is_zariski_open f\n\ngoal (1 subgoal):\n 1. homeomorphism X is_open Spec is_zariski_open f", "by blast"], ["proof (state)\nthis:\n  homeomorphism X is_open Spec is_zariski_open f\n\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces_axioms X is_open local.ind_sheaf\n     ind_ring_morphisms b ind_add_str ind_mult_str ind_zero_str ind_one_str\n     Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b\n     add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec f\n     \\<phi>\\<^sub>f", "ultimately"], ["proof (chain)\npicking this:\n  morphism_presheaves_of_rings Spec is_zariski_open im_sheafXS.im_sheaf\n   im_sheafXS.im_sheaf_morphisms b im_sheafXS.add_im_sheaf\n   im_sheafXS.mult_im_sheaf im_sheafXS.zero_im_sheaf im_sheafXS.one_im_sheaf\n   sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n   zero_sheaf_spec one_sheaf_spec \\<psi>\n  \\<forall>U.\n     is_zariski_open U \\<longrightarrow>\n     (\\<forall>x\\<in>im_sheafXS.im_sheaf U.\n         (\\<phi>\\<^sub>f U \\<circ> \\<psi> U) x = x) \\<and>\n     (\\<forall>x\\<in>\\<O> U. (\\<psi> U \\<circ> \\<phi>\\<^sub>f U) x = x)\n  homeomorphism X is_open Spec is_zariski_open f", "show ?thesis"], ["proof (prove)\nusing this:\n  morphism_presheaves_of_rings Spec is_zariski_open im_sheafXS.im_sheaf\n   im_sheafXS.im_sheaf_morphisms b im_sheafXS.add_im_sheaf\n   im_sheafXS.mult_im_sheaf im_sheafXS.zero_im_sheaf im_sheafXS.one_im_sheaf\n   sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n   zero_sheaf_spec one_sheaf_spec \\<psi>\n  \\<forall>U.\n     is_zariski_open U \\<longrightarrow>\n     (\\<forall>x\\<in>im_sheafXS.im_sheaf U.\n         (\\<phi>\\<^sub>f U \\<circ> \\<psi> U) x = x) \\<and>\n     (\\<forall>x\\<in>\\<O> U. (\\<psi> U \\<circ> \\<phi>\\<^sub>f U) x = x)\n  homeomorphism X is_open Spec is_zariski_open f\n\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces_axioms X is_open local.ind_sheaf\n     ind_ring_morphisms b ind_add_str ind_mult_str ind_zero_str ind_one_str\n     Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b\n     add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec f\n     \\<phi>\\<^sub>f", "unfolding iso_locally_ringed_spaces_axioms_def"], ["proof (prove)\nusing this:\n  morphism_presheaves_of_rings Spec is_zariski_open im_sheafXS.im_sheaf\n   im_sheafXS.im_sheaf_morphisms b im_sheafXS.add_im_sheaf\n   im_sheafXS.mult_im_sheaf im_sheafXS.zero_im_sheaf im_sheafXS.one_im_sheaf\n   sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n   zero_sheaf_spec one_sheaf_spec \\<psi>\n  \\<forall>U.\n     is_zariski_open U \\<longrightarrow>\n     (\\<forall>x\\<in>im_sheafXS.im_sheaf U.\n         (\\<phi>\\<^sub>f U \\<circ> \\<psi> U) x = x) \\<and>\n     (\\<forall>x\\<in>\\<O> U. (\\<psi> U \\<circ> \\<phi>\\<^sub>f U) x = x)\n  homeomorphism X is_open Spec is_zariski_open f\n\ngoal (1 subgoal):\n 1. homeomorphism X is_open Spec is_zariski_open f \\<and>\n    iso_sheaves_of_rings Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec im_sheafXS.im_sheaf\n     im_sheafXS.im_sheaf_morphisms b im_sheafXS.add_im_sheaf\n     im_sheafXS.mult_im_sheaf im_sheafXS.zero_im_sheaf\n     im_sheafXS.one_im_sheaf \\<phi>\\<^sub>f", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>morphism_presheaves_of_rings Spec is_zariski_open\n              im_sheafXS.im_sheaf im_sheafXS.im_sheaf_morphisms b\n              im_sheafXS.add_im_sheaf im_sheafXS.mult_im_sheaf\n              im_sheafXS.zero_im_sheaf im_sheafXS.one_im_sheaf sheaf_spec\n              sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n              zero_sheaf_spec one_sheaf_spec \\<psi>;\n     \\<forall>U.\n        is_zariski_open U \\<longrightarrow>\n        (\\<forall>x\\<in>im_sheafXS.im_sheaf U.\n            (\\<phi>\\<^sub>f U \\<circ> \\<psi> U) x = x) \\<and>\n        (\\<forall>x\\<in>\\<O> U. (\\<psi> U \\<circ> \\<phi>\\<^sub>f U) x = x);\n     homeomorphism X is_open Spec is_zariski_open f\\<rbrakk>\n    \\<Longrightarrow> iso_sheaves_of_rings Spec is_zariski_open sheaf_spec\n                       sheaf_spec_morphisms \\<O>b add_sheaf_spec\n                       mult_sheaf_spec zero_sheaf_spec one_sheaf_spec\n                       im_sheafXS.im_sheaf im_sheafXS.im_sheaf_morphisms b\n                       im_sheafXS.add_im_sheaf im_sheafXS.mult_im_sheaf\n                       im_sheafXS.zero_im_sheaf im_sheafXS.one_im_sheaf\n                       \\<phi>\\<^sub>f", "apply (auto intro!: iso_presheaves_of_rings.intro iso_sheaves_of_rings.intro \n                        simp:iso_presheaves_of_rings_axioms_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>morphism_presheaves_of_rings Spec is_zariski_open\n              im_sheafXS.im_sheaf im_sheafXS.im_sheaf_morphisms b\n              im_sheafXS.add_im_sheaf im_sheafXS.mult_im_sheaf\n              im_sheafXS.zero_im_sheaf im_sheafXS.one_im_sheaf sheaf_spec\n              sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n              zero_sheaf_spec one_sheaf_spec \\<psi>;\n     \\<forall>U.\n        is_zariski_open U \\<longrightarrow>\n        (\\<forall>x\\<in>im_sheafXS.im_sheaf U.\n            \\<phi>\\<^sub>f U (\\<psi> U x) = x) \\<and>\n        (\\<forall>x\\<in>\\<O> U. \\<psi> U (\\<phi>\\<^sub>f U x) = x);\n     homeomorphism X is_open Spec is_zariski_open f\\<rbrakk>\n    \\<Longrightarrow> morphism_presheaves_of_rings Spec is_zariski_open\n                       sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec\n                       mult_sheaf_spec zero_sheaf_spec one_sheaf_spec\n                       im_sheafXS.im_sheaf im_sheafXS.im_sheaf_morphisms b\n                       im_sheafXS.add_im_sheaf im_sheafXS.mult_im_sheaf\n                       im_sheafXS.zero_im_sheaf im_sheafXS.one_im_sheaf\n                       \\<phi>\\<^sub>f", "by (meson is_morphism_of_sheaves morphism_sheaves_of_rings.axioms)"], ["proof (state)\nthis:\n  iso_locally_ringed_spaces_axioms X is_open local.ind_sheaf\n   ind_ring_morphisms b ind_add_str ind_mult_str ind_zero_str ind_one_str\n   Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec\n   mult_sheaf_spec zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  iso_locally_ringed_spaces X is_open local.ind_sheaf ind_ring_morphisms b\n   ind_add_str ind_mult_str ind_zero_str ind_one_str Spec is_zariski_open\n   sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n   zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f\n\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces X is_open local.ind_sheaf ind_ring_morphisms b\n     ind_add_str ind_mult_str ind_zero_str ind_one_str Spec is_zariski_open\n     sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f", "then"], ["proof (chain)\npicking this:\n  iso_locally_ringed_spaces X is_open local.ind_sheaf ind_ring_morphisms b\n   ind_add_str ind_mult_str ind_zero_str ind_one_str Spec is_zariski_open\n   sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n   zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f", "show ?thesis"], ["proof (prove)\nusing this:\n  iso_locally_ringed_spaces X is_open local.ind_sheaf ind_ring_morphisms b\n   ind_add_str ind_mult_str ind_zero_str ind_one_str Spec is_zariski_open\n   sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n   zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f\n\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces X is_open local.ind_sheaf ind_ring_morphisms b\n     ind_add_str ind_mult_str ind_zero_str ind_one_str Spec is_zariski_open\n     sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f", "by (simp add: iso_locally_ringed_spaces_def)"], ["proof (state)\nthis:\n  iso_locally_ringed_spaces X is_open local.ind_sheaf ind_ring_morphisms b\n   ind_add_str ind_mult_str ind_zero_str ind_one_str Spec is_zariski_open\n   sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n   zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  iso_locally_ringed_spaces X is_open local.ind_sheaf ind_ring_morphisms b\n   ind_add_str ind_mult_str ind_zero_str ind_one_str Spec is_zariski_open\n   sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n   zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f\n\ngoal (1 subgoal):\n 1. affine_scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open local.ind_sheaf\n     ind_ring_morphisms b ind_add_str ind_mult_str ind_zero_str ind_one_str\n     f \\<phi>\\<^sub>f", "ultimately"], ["proof (chain)\npicking this:\n  locally_ringed_space X is_open local.ind_sheaf ind_ring_morphisms b\n   ind_add_str ind_mult_str ind_zero_str ind_one_str\n  iso_locally_ringed_spaces X is_open local.ind_sheaf ind_ring_morphisms b\n   ind_add_str ind_mult_str ind_zero_str ind_one_str Spec is_zariski_open\n   sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n   zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f", "show ?thesis"], ["proof (prove)\nusing this:\n  locally_ringed_space X is_open local.ind_sheaf ind_ring_morphisms b\n   ind_add_str ind_mult_str ind_zero_str ind_one_str\n  iso_locally_ringed_spaces X is_open local.ind_sheaf ind_ring_morphisms b\n   ind_add_str ind_mult_str ind_zero_str ind_one_str Spec is_zariski_open\n   sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n   zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f\n\ngoal (1 subgoal):\n 1. affine_scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open local.ind_sheaf\n     ind_ring_morphisms b ind_add_str ind_mult_str ind_zero_str ind_one_str\n     f \\<phi>\\<^sub>f", "unfolding affine_scheme_def"], ["proof (prove)\nusing this:\n  locally_ringed_space X is_open local.ind_sheaf ind_ring_morphisms b\n   ind_add_str ind_mult_str ind_zero_str ind_one_str\n  iso_locally_ringed_spaces X is_open local.ind_sheaf ind_ring_morphisms b\n   ind_add_str ind_mult_str ind_zero_str ind_one_str Spec is_zariski_open\n   sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n   zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f\n\ngoal (1 subgoal):\n 1. comm_ring R (+) (\\<cdot>) \\<zero> \\<one> \\<and>\n    locally_ringed_space X is_open local.ind_sheaf ind_ring_morphisms b\n     ind_add_str ind_mult_str ind_zero_str ind_one_str \\<and>\n    iso_locally_ringed_spaces X is_open local.ind_sheaf ind_ring_morphisms b\n     ind_add_str ind_mult_str ind_zero_str ind_one_str Spec is_zariski_open\n     sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f", "using comm_ring_axioms"], ["proof (prove)\nusing this:\n  locally_ringed_space X is_open local.ind_sheaf ind_ring_morphisms b\n   ind_add_str ind_mult_str ind_zero_str ind_one_str\n  iso_locally_ringed_spaces X is_open local.ind_sheaf ind_ring_morphisms b\n   ind_add_str ind_mult_str ind_zero_str ind_one_str Spec is_zariski_open\n   sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n   zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f\n  comm_ring R (+) (\\<cdot>) \\<zero> \\<one>\n\ngoal (1 subgoal):\n 1. comm_ring R (+) (\\<cdot>) \\<zero> \\<one> \\<and>\n    locally_ringed_space X is_open local.ind_sheaf ind_ring_morphisms b\n     ind_add_str ind_mult_str ind_zero_str ind_one_str \\<and>\n    iso_locally_ringed_spaces X is_open local.ind_sheaf ind_ring_morphisms b\n     ind_add_str ind_mult_str ind_zero_str ind_one_str Spec is_zariski_open\n     sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec f \\<phi>\\<^sub>f", "by auto"], ["proof (state)\nthis:\n  affine_scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open local.ind_sheaf\n   ind_ring_morphisms b ind_add_str ind_mult_str ind_zero_str ind_one_str f\n   \\<phi>\\<^sub>f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  affine_scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open local.ind_sheaf\n   ind_ring_morphisms b ind_add_str ind_mult_str ind_zero_str ind_one_str f\n   \\<phi>\\<^sub>f\n\ngoal (1 subgoal):\n 1. scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open \\<O>\\<^sub>X \\<rho> b\n     add_str mult_str zero_str one_str", "moreover"], ["proof (state)\nthis:\n  affine_scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open local.ind_sheaf\n   ind_ring_morphisms b ind_add_str ind_mult_str ind_zero_str ind_one_str f\n   \\<phi>\\<^sub>f\n\ngoal (1 subgoal):\n 1. scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open \\<O>\\<^sub>X \\<rho> b\n     add_str mult_str zero_str one_str", "have \"is_open X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_open X", "by simp"], ["proof (state)\nthis:\n  is_open X\n\ngoal (1 subgoal):\n 1. scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open \\<O>\\<^sub>X \\<rho> b\n     add_str mult_str zero_str one_str", "ultimately"], ["proof (chain)\npicking this:\n  affine_scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open local.ind_sheaf\n   ind_ring_morphisms b ind_add_str ind_mult_str ind_zero_str ind_one_str f\n   \\<phi>\\<^sub>f\n  is_open X", "show ?thesis"], ["proof (prove)\nusing this:\n  affine_scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open local.ind_sheaf\n   ind_ring_morphisms b ind_add_str ind_mult_str ind_zero_str ind_one_str f\n   \\<phi>\\<^sub>f\n  is_open X\n\ngoal (1 subgoal):\n 1. scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open \\<O>\\<^sub>X \\<rho> b\n     add_str mult_str zero_str one_str", "by unfold_locales fastforce"], ["proof (state)\nthis:\n  scheme R (+) (\\<cdot>) \\<zero> \\<one> X is_open \\<O>\\<^sub>X \\<rho> b\n   add_str mult_str zero_str one_str\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in comm_ring) spec_is_affine_scheme:\n  shows \"affine_scheme R (+) (\\<cdot>) \\<zero> \\<one> Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b\n(\\<lambda>U. add_sheaf_spec U) (\\<lambda>U. mult_sheaf_spec U) (\\<lambda>U. zero_sheaf_spec U) (\\<lambda>U. one_sheaf_spec U)\n(identity Spec) (\\<lambda>U. identity (\\<O> U))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. affine_scheme R (+) (\\<cdot>) \\<zero> \\<one> Spec is_zariski_open\n     sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec (identity Spec)\n     (\\<lambda>U. identity (\\<O> U))", "proof (intro affine_scheme.intro)"], ["proof (state)\ngoal (3 subgoals):\n 1. comm_ring R (+) (\\<cdot>) \\<zero> \\<one>\n 2. locally_ringed_space Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec\n 3. iso_locally_ringed_spaces Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec (identity Spec)\n     (\\<lambda>U. identity (\\<O> U))", "show \"comm_ring R (+) (\\<cdot>) \\<zero> \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_ring R (+) (\\<cdot>) \\<zero> \\<one>", "by (simp add: local.comm_ring_axioms)"], ["proof (state)\nthis:\n  comm_ring R (+) (\\<cdot>) \\<zero> \\<one>\n\ngoal (2 subgoals):\n 1. locally_ringed_space Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec\n 2. iso_locally_ringed_spaces Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec (identity Spec)\n     (\\<lambda>U. identity (\\<O> U))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. locally_ringed_space Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec\n 2. iso_locally_ringed_spaces Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec (identity Spec)\n     (\\<lambda>U. identity (\\<O> U))", "show \"locally_ringed_space Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec\""], ["proof (prove)\ngoal (1 subgoal):\n 1. locally_ringed_space Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec", "using spec_is_locally_ringed_space"], ["proof (prove)\nusing this:\n  locally_ringed_space Spec is_zariski_open sheaf_spec sheaf_spec_morphisms\n   \\<O>b add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec\n\ngoal (1 subgoal):\n 1. locally_ringed_space Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec", "by simp"], ["proof (state)\nthis:\n  locally_ringed_space Spec is_zariski_open sheaf_spec sheaf_spec_morphisms\n   \\<O>b add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec\n\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec (identity Spec)\n     (\\<lambda>U. identity (\\<O> U))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec (identity Spec)\n     (\\<lambda>U. identity (\\<O> U))", "have [simp]: \"\\<And>x A. x \\<in> A \\<Longrightarrow> inv_into A (identity A) x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x A. x \\<in> A \\<Longrightarrow> inv_into A (identity A) x = x", "by (metis bij_betw_def bij_betw_restrict_eq inj_on_id2 inv_into_f_f restrict_apply')"], ["proof (state)\nthis:\n  ?x3 \\<in> ?A3 \\<Longrightarrow> inv_into ?A3 (identity ?A3) ?x3 = ?x3\n\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec (identity Spec)\n     (\\<lambda>U. identity (\\<O> U))", "interpret zar: topological_space Spec is_zariski_open"], ["proof (prove)\ngoal (1 subgoal):\n 1. topological_space Spec is_zariski_open", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec (identity Spec)\n     (\\<lambda>U. identity (\\<O> U))", "interpret im_sheaf Spec is_zariski_open sheaf_spec\n    sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec Spec\n    is_zariski_open \"identity Spec\""], ["proof (prove)\ngoal (1 subgoal):\n 1. im_sheaf Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b\n     add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec Spec\n     is_zariski_open (identity Spec)", "by (metis homeomorphism_def im_sheaf_def sheaf_spec_is_sheaf zar.id_is_homeomorphism)"], ["proof (state)\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec (identity Spec)\n     (\\<lambda>U. identity (\\<O> U))", "have rh: \"\\<And>U V. \\<lbrakk>is_zariski_open U; is_zariski_open V; V \\<subseteq> U\\<rbrakk>\n             \\<Longrightarrow> ring_homomorphism\n                  (im_sheaf_morphisms U V)\n                  (local.im_sheaf U) (add_sheaf_spec U)\n                  (mult_sheaf_spec U) (zero_sheaf_spec U)\n                  (one_sheaf_spec U) (local.im_sheaf V)\n                  (add_sheaf_spec V) (mult_sheaf_spec V)\n                  (zero_sheaf_spec V) (one_sheaf_spec V)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>is_zariski_open U; is_zariski_open V;\n        V \\<subseteq> U\\<rbrakk>\n       \\<Longrightarrow> ring_homomorphism (im_sheaf_morphisms U V)\n                          (local.im_sheaf U) (add_sheaf_spec U)\n                          (mult_sheaf_spec U) (zero_sheaf_spec U)\n                          (one_sheaf_spec U) (local.im_sheaf V)\n                          (add_sheaf_spec V) (mult_sheaf_spec V)\n                          (zero_sheaf_spec V) (one_sheaf_spec V)", "using im_sheaf_morphisms_def local.im_sheaf_def sheaf_spec_morphisms_are_ring_morphisms zar.open_preimage_identity"], ["proof (prove)\nusing this:\n  im_sheaf_morphisms ?U ?V \\<equiv>\n  sheaf_spec_morphisms (identity Spec \\<^sup>\\<inverse> Spec ?U)\n   (identity Spec \\<^sup>\\<inverse> Spec ?V)\n  local.im_sheaf ?V \\<equiv> \\<O> identity Spec \\<^sup>\\<inverse> Spec ?V\n  \\<lbrakk>is_zariski_open ?U; is_zariski_open ?V;\n   ?V \\<subseteq> ?U\\<rbrakk>\n  \\<Longrightarrow> ring_homomorphism (sheaf_spec_morphisms ?U ?V) (\\<O> ?U)\n                     (add_sheaf_spec ?U) (mult_sheaf_spec ?U)\n                     (zero_sheaf_spec ?U) (one_sheaf_spec ?U) (\\<O> ?V)\n                     (add_sheaf_spec ?V) (mult_sheaf_spec ?V)\n                     (zero_sheaf_spec ?V) (one_sheaf_spec ?V)\n  is_zariski_open ?B \\<Longrightarrow>\n  identity Spec \\<^sup>\\<inverse> Spec ?B = ?B\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>is_zariski_open U; is_zariski_open V;\n        V \\<subseteq> U\\<rbrakk>\n       \\<Longrightarrow> ring_homomorphism (im_sheaf_morphisms U V)\n                          (local.im_sheaf U) (add_sheaf_spec U)\n                          (mult_sheaf_spec U) (zero_sheaf_spec U)\n                          (one_sheaf_spec U) (local.im_sheaf V)\n                          (add_sheaf_spec V) (mult_sheaf_spec V)\n                          (zero_sheaf_spec V) (one_sheaf_spec V)", "by presburger"], ["proof (state)\nthis:\n  \\<lbrakk>is_zariski_open ?U4; is_zariski_open ?V4;\n   ?V4 \\<subseteq> ?U4\\<rbrakk>\n  \\<Longrightarrow> ring_homomorphism (im_sheaf_morphisms ?U4 ?V4)\n                     (local.im_sheaf ?U4) (add_sheaf_spec ?U4)\n                     (mult_sheaf_spec ?U4) (zero_sheaf_spec ?U4)\n                     (one_sheaf_spec ?U4) (local.im_sheaf ?V4)\n                     (add_sheaf_spec ?V4) (mult_sheaf_spec ?V4)\n                     (zero_sheaf_spec ?V4) (one_sheaf_spec ?V4)\n\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec (identity Spec)\n     (\\<lambda>U. identity (\\<O> U))", "interpret F: presheaf_of_rings Spec is_zariski_open \n    \"im_sheaf.im_sheaf Spec sheaf_spec (identity Spec)\"\n    \"im_sheaf.im_sheaf_morphisms Spec sheaf_spec_morphisms (identity Spec)\" \\<O>b \n    \"\\<lambda>V. add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V)\" \"\\<lambda>V. mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V)\" \n    \"\\<lambda>V. zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V)\"  \"\\<lambda>V. one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. presheaf_of_rings Spec is_zariski_open local.im_sheaf im_sheaf_morphisms\n     \\<O>b\n     (\\<lambda>V. add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))", "unfolding presheaf_of_rings_def presheaf_of_rings_axioms_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. topological_space Spec is_zariski_open \\<and>\n    ((\\<forall>U V.\n         is_zariski_open U \\<longrightarrow>\n         is_zariski_open V \\<longrightarrow>\n         V \\<subseteq> U \\<longrightarrow>\n         ring_homomorphism (im_sheaf_morphisms U V) (local.im_sheaf U)\n          (add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec U))\n          (mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec U))\n          (zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec U))\n          (one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec U))\n          (local.im_sheaf V)\n          (add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n          (mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n          (zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n          (one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))) \\<and>\n     local.im_sheaf {} = {\\<O>b}) \\<and>\n    (\\<forall>U.\n        is_zariski_open U \\<longrightarrow>\n        (\\<forall>x.\n            x \\<in> local.im_sheaf U \\<longrightarrow>\n            im_sheaf_morphisms U U x = x)) \\<and>\n    (\\<forall>U V W.\n        is_zariski_open U \\<longrightarrow>\n        is_zariski_open V \\<longrightarrow>\n        is_zariski_open W \\<longrightarrow>\n        V \\<subseteq> U \\<longrightarrow>\n        W \\<subseteq> V \\<longrightarrow>\n        (\\<forall>x.\n            x \\<in> local.im_sheaf U \\<longrightarrow>\n            im_sheaf_morphisms U W x =\n            (im_sheaf_morphisms V W \\<circ> im_sheaf_morphisms U V) x))", "proof (intro conjI strip)"], ["proof (state)\ngoal (5 subgoals):\n 1. topological_space Spec is_zariski_open\n 2. \\<And>U V.\n       \\<lbrakk>is_zariski_open U; is_zariski_open V;\n        V \\<subseteq> U\\<rbrakk>\n       \\<Longrightarrow> ring_homomorphism (im_sheaf_morphisms U V)\n                          (local.im_sheaf U)\n                          (add_sheaf_spec\n                            (identity Spec \\<^sup>\\<inverse> Spec U))\n                          (mult_sheaf_spec\n                            (identity Spec \\<^sup>\\<inverse> Spec U))\n                          (zero_sheaf_spec\n                            (identity Spec \\<^sup>\\<inverse> Spec U))\n                          (one_sheaf_spec\n                            (identity Spec \\<^sup>\\<inverse> Spec U))\n                          (local.im_sheaf V)\n                          (add_sheaf_spec\n                            (identity Spec \\<^sup>\\<inverse> Spec V))\n                          (mult_sheaf_spec\n                            (identity Spec \\<^sup>\\<inverse> Spec V))\n                          (zero_sheaf_spec\n                            (identity Spec \\<^sup>\\<inverse> Spec V))\n                          (one_sheaf_spec\n                            (identity Spec \\<^sup>\\<inverse> Spec V))\n 3. local.im_sheaf {} = {\\<O>b}\n 4. \\<And>U x.\n       \\<lbrakk>is_zariski_open U; x \\<in> local.im_sheaf U\\<rbrakk>\n       \\<Longrightarrow> im_sheaf_morphisms U U x = x\n 5. \\<And>U V W x.\n       \\<lbrakk>is_zariski_open U; is_zariski_open V; is_zariski_open W;\n        V \\<subseteq> U; W \\<subseteq> V; x \\<in> local.im_sheaf U\\<rbrakk>\n       \\<Longrightarrow> im_sheaf_morphisms U W x =\n                         (im_sheaf_morphisms V W \\<circ>\n                          im_sheaf_morphisms U V)\n                          x", "show \"im_sheaf_morphisms U W x = (im_sheaf_morphisms V W \\<circ> im_sheaf_morphisms U V) x\"\n      if \"is_zariski_open U\" \"is_zariski_open V\" \"is_zariski_open W\" \"V \\<subseteq> U\"\n        and \"W \\<subseteq> V\" \"x \\<in> local.im_sheaf U\" for U V W x"], ["proof (prove)\ngoal (1 subgoal):\n 1. im_sheaf_morphisms U W x =\n    (im_sheaf_morphisms V W \\<circ> im_sheaf_morphisms U V) x", "using that assoc_comp"], ["proof (prove)\nusing this:\n  is_zariski_open U\n  is_zariski_open V\n  is_zariski_open W\n  V \\<subseteq> U\n  W \\<subseteq> V\n  x \\<in> local.im_sheaf U\n  \\<lbrakk>is_zariski_open ?U; is_zariski_open ?V; is_zariski_open ?W;\n   ?V \\<subseteq> ?U; ?W \\<subseteq> ?V; ?x \\<in> local.im_sheaf ?U\\<rbrakk>\n  \\<Longrightarrow> im_sheaf_morphisms ?U ?W ?x =\n                    (im_sheaf_morphisms ?V ?W \\<circ>\n                     im_sheaf_morphisms ?U ?V)\n                     ?x\n\ngoal (1 subgoal):\n 1. im_sheaf_morphisms U W x =\n    (im_sheaf_morphisms V W \\<circ> im_sheaf_morphisms U V) x", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>is_zariski_open ?U4; is_zariski_open ?V4; is_zariski_open ?W4;\n   ?V4 \\<subseteq> ?U4; ?W4 \\<subseteq> ?V4;\n   ?x4 \\<in> local.im_sheaf ?U4\\<rbrakk>\n  \\<Longrightarrow> im_sheaf_morphisms ?U4 ?W4 ?x4 =\n                    (im_sheaf_morphisms ?V4 ?W4 \\<circ>\n                     im_sheaf_morphisms ?U4 ?V4)\n                     ?x4\n\ngoal (4 subgoals):\n 1. topological_space Spec is_zariski_open\n 2. \\<And>U V.\n       \\<lbrakk>is_zariski_open U; is_zariski_open V;\n        V \\<subseteq> U\\<rbrakk>\n       \\<Longrightarrow> ring_homomorphism (im_sheaf_morphisms U V)\n                          (local.im_sheaf U)\n                          (add_sheaf_spec\n                            (identity Spec \\<^sup>\\<inverse> Spec U))\n                          (mult_sheaf_spec\n                            (identity Spec \\<^sup>\\<inverse> Spec U))\n                          (zero_sheaf_spec\n                            (identity Spec \\<^sup>\\<inverse> Spec U))\n                          (one_sheaf_spec\n                            (identity Spec \\<^sup>\\<inverse> Spec U))\n                          (local.im_sheaf V)\n                          (add_sheaf_spec\n                            (identity Spec \\<^sup>\\<inverse> Spec V))\n                          (mult_sheaf_spec\n                            (identity Spec \\<^sup>\\<inverse> Spec V))\n                          (zero_sheaf_spec\n                            (identity Spec \\<^sup>\\<inverse> Spec V))\n                          (one_sheaf_spec\n                            (identity Spec \\<^sup>\\<inverse> Spec V))\n 3. local.im_sheaf {} = {\\<O>b}\n 4. \\<And>U x.\n       \\<lbrakk>is_zariski_open U; x \\<in> local.im_sheaf U\\<rbrakk>\n       \\<Longrightarrow> im_sheaf_morphisms U U x = x", "qed (auto simp: rh ring_of_empty)"], ["proof (state)\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec (identity Spec)\n     (\\<lambda>U. identity (\\<O> U))", "show \"iso_locally_ringed_spaces Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b\n     add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec\n     (identity Spec) (\\<lambda>U. identity (\\<O> U))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec (identity Spec)\n     (\\<lambda>U. identity (\\<O> U))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec (identity Spec)\n     (\\<lambda>U. identity (\\<O> U))", "have \"iso_sheaves_of_rings\n            Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec\n            (im_sheaf.im_sheaf Spec sheaf_spec (identity Spec))\n            (im_sheaf.im_sheaf_morphisms Spec sheaf_spec_morphisms (identity Spec))\n            \\<O>b\n            (\\<lambda>V x y. add_sheaf_spec ((identity Spec)\\<^sup>\\<inverse> Spec V) x y) \n            (\\<lambda>V x y. mult_sheaf_spec ((identity Spec)\\<^sup>\\<inverse> Spec V) x y) \n            (\\<lambda>V. zero_sheaf_spec ((identity Spec)\\<^sup>\\<inverse> Spec V)) \n            (\\<lambda>V. one_sheaf_spec ((identity Spec)\\<^sup>\\<inverse> Spec V))\n            (\\<lambda>U. identity (\\<O> U))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iso_sheaves_of_rings Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec local.im_sheaf im_sheaf_morphisms \\<O>b\n     (\\<lambda>V. add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>U. identity (\\<O> U))", "proof intro_locales"], ["proof (state)\ngoal (2 subgoals):\n 1. morphism_presheaves_of_rings_axioms is_zariski_open sheaf_spec\n     sheaf_spec_morphisms add_sheaf_spec mult_sheaf_spec zero_sheaf_spec\n     one_sheaf_spec local.im_sheaf im_sheaf_morphisms\n     (\\<lambda>V. add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>U. identity (\\<O> U))\n 2. iso_presheaves_of_rings_axioms Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec local.im_sheaf im_sheaf_morphisms \\<O>b\n     (\\<lambda>V. add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>U. identity (\\<O> U))", "show \"morphism_presheaves_of_rings_axioms is_zariski_open sheaf_spec sheaf_spec_morphisms add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec (im_sheaf.im_sheaf Spec sheaf_spec (identity Spec)) (im_sheaf.im_sheaf_morphisms Spec sheaf_spec_morphisms (identity Spec)) (\\<lambda>V. add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V)) (\\<lambda>V. mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V)) (\\<lambda>V. zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V)) (\\<lambda>V. one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V)) (\\<lambda>U. identity (\\<O> U))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings_axioms is_zariski_open sheaf_spec\n     sheaf_spec_morphisms add_sheaf_spec mult_sheaf_spec zero_sheaf_spec\n     one_sheaf_spec local.im_sheaf im_sheaf_morphisms\n     (\\<lambda>V. add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>U. identity (\\<O> U))", "using F.id_is_mor_pr_rngs"], ["proof (prove)\nusing this:\n  morphism_presheaves_of_rings Spec is_zariski_open local.im_sheaf\n   im_sheaf_morphisms \\<O>b\n   (\\<lambda>V. add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   local.im_sheaf im_sheaf_morphisms \\<O>b\n   (\\<lambda>V. add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>U. identity (local.im_sheaf U))\n\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings_axioms is_zariski_open sheaf_spec\n     sheaf_spec_morphisms add_sheaf_spec mult_sheaf_spec zero_sheaf_spec\n     one_sheaf_spec local.im_sheaf im_sheaf_morphisms\n     (\\<lambda>V. add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>U. identity (\\<O> U))", "by (simp add: local.im_sheaf_def morphism_presheaves_of_rings_def morphism_presheaves_of_rings_axioms_def im_sheaf_morphisms_def)"], ["proof (state)\nthis:\n  morphism_presheaves_of_rings_axioms is_zariski_open sheaf_spec\n   sheaf_spec_morphisms add_sheaf_spec mult_sheaf_spec zero_sheaf_spec\n   one_sheaf_spec local.im_sheaf im_sheaf_morphisms\n   (\\<lambda>V. add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>U. identity (\\<O> U))\n\ngoal (1 subgoal):\n 1. iso_presheaves_of_rings_axioms Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec local.im_sheaf im_sheaf_morphisms \\<O>b\n     (\\<lambda>V. add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>U. identity (\\<O> U))", "then"], ["proof (chain)\npicking this:\n  morphism_presheaves_of_rings_axioms is_zariski_open sheaf_spec\n   sheaf_spec_morphisms add_sheaf_spec mult_sheaf_spec zero_sheaf_spec\n   one_sheaf_spec local.im_sheaf im_sheaf_morphisms\n   (\\<lambda>V. add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>U. identity (\\<O> U))", "show \"iso_presheaves_of_rings_axioms Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec (im_sheaf.im_sheaf Spec sheaf_spec (identity Spec)) (im_sheaf.im_sheaf_morphisms Spec sheaf_spec_morphisms (identity Spec)) \\<O>b (\\<lambda>V. add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V)) (\\<lambda>V. mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V)) (\\<lambda>V. zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V)) (\\<lambda>V. one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V)) (\\<lambda>U. identity (\\<O> U))\""], ["proof (prove)\nusing this:\n  morphism_presheaves_of_rings_axioms is_zariski_open sheaf_spec\n   sheaf_spec_morphisms add_sheaf_spec mult_sheaf_spec zero_sheaf_spec\n   one_sheaf_spec local.im_sheaf im_sheaf_morphisms\n   (\\<lambda>V. add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>U. identity (\\<O> U))\n\ngoal (1 subgoal):\n 1. iso_presheaves_of_rings_axioms Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec local.im_sheaf im_sheaf_morphisms \\<O>b\n     (\\<lambda>V. add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>U. identity (\\<O> U))", "unfolding iso_presheaves_of_rings_axioms_def"], ["proof (prove)\nusing this:\n  morphism_presheaves_of_rings_axioms is_zariski_open sheaf_spec\n   sheaf_spec_morphisms add_sheaf_spec mult_sheaf_spec zero_sheaf_spec\n   one_sheaf_spec local.im_sheaf im_sheaf_morphisms\n   (\\<lambda>V. add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>U. identity (\\<O> U))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<psi>.\n       morphism_presheaves_of_rings Spec is_zariski_open local.im_sheaf\n        im_sheaf_morphisms \\<O>b\n        (\\<lambda>V.\n            add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n        (\\<lambda>V.\n            mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n        (\\<lambda>V.\n            zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n        (\\<lambda>V.\n            one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n        sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n        zero_sheaf_spec one_sheaf_spec \\<psi> \\<and>\n       (\\<forall>U.\n           is_zariski_open U \\<longrightarrow>\n           (\\<forall>x\\<in>local.im_sheaf U.\n               (identity (\\<O> U) \\<circ> \\<psi> U) x = x) \\<and>\n           (\\<forall>x\\<in>\\<O> U.\n               (\\<psi> U \\<circ> identity (\\<O> U)) x = x))", "apply (rule_tac x=\"(\\<lambda>U. identity (\\<O> U))\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings_axioms is_zariski_open sheaf_spec\n     sheaf_spec_morphisms add_sheaf_spec mult_sheaf_spec zero_sheaf_spec\n     one_sheaf_spec local.im_sheaf im_sheaf_morphisms\n     (\\<lambda>V. add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>U. identity (\\<O> U)) \\<Longrightarrow>\n    morphism_presheaves_of_rings Spec is_zariski_open local.im_sheaf\n     im_sheaf_morphisms \\<O>b\n     (\\<lambda>V. add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec (\\<lambda>U. identity (\\<O> U)) \\<and>\n    (\\<forall>U.\n        is_zariski_open U \\<longrightarrow>\n        (\\<forall>x\\<in>local.im_sheaf U.\n            (identity (\\<O> U) \\<circ> identity (\\<O> U)) x = x) \\<and>\n        (\\<forall>x\\<in>\\<O> U.\n            (identity (\\<O> U) \\<circ> identity (\\<O> U)) x = x))", "using F.presheaf_of_rings_axioms"], ["proof (prove)\nusing this:\n  presheaf_of_rings Spec is_zariski_open local.im_sheaf im_sheaf_morphisms\n   \\<O>b\n   (\\<lambda>V. add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings_axioms is_zariski_open sheaf_spec\n     sheaf_spec_morphisms add_sheaf_spec mult_sheaf_spec zero_sheaf_spec\n     one_sheaf_spec local.im_sheaf im_sheaf_morphisms\n     (\\<lambda>V. add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>U. identity (\\<O> U)) \\<Longrightarrow>\n    morphism_presheaves_of_rings Spec is_zariski_open local.im_sheaf\n     im_sheaf_morphisms \\<O>b\n     (\\<lambda>V. add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     (\\<lambda>V. one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n     sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec (\\<lambda>U. identity (\\<O> U)) \\<and>\n    (\\<forall>U.\n        is_zariski_open U \\<longrightarrow>\n        (\\<forall>x\\<in>local.im_sheaf U.\n            (identity (\\<O> U) \\<circ> identity (\\<O> U)) x = x) \\<and>\n        (\\<forall>x\\<in>\\<O> U.\n            (identity (\\<O> U) \\<circ> identity (\\<O> U)) x = x))", "by (simp add: im_sheaf_morphisms_def local.im_sheaf_def morphism_presheaves_of_rings.intro morphism_presheaves_of_rings_axioms_def sheaf_spec_is_presheaf)"], ["proof (state)\nthis:\n  iso_presheaves_of_rings_axioms Spec is_zariski_open sheaf_spec\n   sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec zero_sheaf_spec\n   one_sheaf_spec local.im_sheaf im_sheaf_morphisms \\<O>b\n   (\\<lambda>V. add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>U. identity (\\<O> U))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  iso_sheaves_of_rings Spec is_zariski_open sheaf_spec sheaf_spec_morphisms\n   \\<O>b add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec\n   local.im_sheaf im_sheaf_morphisms \\<O>b\n   (\\<lambda>V. add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>U. identity (\\<O> U))\n\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec (identity Spec)\n     (\\<lambda>U. identity (\\<O> U))", "moreover"], ["proof (state)\nthis:\n  iso_sheaves_of_rings Spec is_zariski_open sheaf_spec sheaf_spec_morphisms\n   \\<O>b add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec\n   local.im_sheaf im_sheaf_morphisms \\<O>b\n   (\\<lambda>V. add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>U. identity (\\<O> U))\n\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec (identity Spec)\n     (\\<lambda>U. identity (\\<O> U))", "have \"morphism_locally_ringed_spaces\n                    Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec\n                    Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec\n                    (identity Spec)\n                    (\\<lambda>U. identity (\\<O> U))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. morphism_locally_ringed_spaces Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec (identity Spec)\n     (\\<lambda>U. identity (\\<O> U))", "by (simp add: locally_ringed_space.id_to_mor_locally_ringed_spaces spec_is_locally_ringed_space)"], ["proof (state)\nthis:\n  morphism_locally_ringed_spaces Spec is_zariski_open sheaf_spec\n   sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec zero_sheaf_spec\n   one_sheaf_spec Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b\n   add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec\n   (identity Spec) (\\<lambda>U. identity (\\<O> U))\n\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec (identity Spec)\n     (\\<lambda>U. identity (\\<O> U))", "ultimately"], ["proof (chain)\npicking this:\n  iso_sheaves_of_rings Spec is_zariski_open sheaf_spec sheaf_spec_morphisms\n   \\<O>b add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec\n   local.im_sheaf im_sheaf_morphisms \\<O>b\n   (\\<lambda>V. add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>U. identity (\\<O> U))\n  morphism_locally_ringed_spaces Spec is_zariski_open sheaf_spec\n   sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec zero_sheaf_spec\n   one_sheaf_spec Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b\n   add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec\n   (identity Spec) (\\<lambda>U. identity (\\<O> U))", "show ?thesis"], ["proof (prove)\nusing this:\n  iso_sheaves_of_rings Spec is_zariski_open sheaf_spec sheaf_spec_morphisms\n   \\<O>b add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec\n   local.im_sheaf im_sheaf_morphisms \\<O>b\n   (\\<lambda>V. add_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. mult_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. zero_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>V. one_sheaf_spec (identity Spec \\<^sup>\\<inverse> Spec V))\n   (\\<lambda>U. identity (\\<O> U))\n  morphism_locally_ringed_spaces Spec is_zariski_open sheaf_spec\n   sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec zero_sheaf_spec\n   one_sheaf_spec Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b\n   add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec\n   (identity Spec) (\\<lambda>U. identity (\\<O> U))\n\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec (identity Spec)\n     (\\<lambda>U. identity (\\<O> U))", "by (metis locally_ringed_space.id_to_iso_locally_ringed_spaces spec_is_locally_ringed_space)"], ["proof (state)\nthis:\n  iso_locally_ringed_spaces Spec is_zariski_open sheaf_spec\n   sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec zero_sheaf_spec\n   one_sheaf_spec Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b\n   add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec\n   (identity Spec) (\\<lambda>U. identity (\\<O> U))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  iso_locally_ringed_spaces Spec is_zariski_open sheaf_spec\n   sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec zero_sheaf_spec\n   one_sheaf_spec Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b\n   add_sheaf_spec mult_sheaf_spec zero_sheaf_spec one_sheaf_spec\n   (identity Spec) (\\<lambda>U. identity (\\<O> U))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in comm_ring) spec_is_scheme:\n  shows \"scheme R (+) (\\<cdot>) \\<zero> \\<one> Spec is_zariski_open sheaf_spec sheaf_spec_morphisms \\<O>b\n(\\<lambda>U. add_sheaf_spec U) (\\<lambda>U. mult_sheaf_spec U) (\\<lambda>U. zero_sheaf_spec U) (\\<lambda>U. one_sheaf_spec U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scheme R (+) (\\<cdot>) \\<zero> \\<one> Spec is_zariski_open sheaf_spec\n     sheaf_spec_morphisms \\<O>b add_sheaf_spec mult_sheaf_spec\n     zero_sheaf_spec one_sheaf_spec", "by (metis spec_is_affine_scheme affine_scheme.affine_scheme_is_scheme)"], ["", "lemma empty_scheme_is_affine_scheme:\n  shows \"affine_scheme {0::nat} (\\<lambda>x y. 0) (\\<lambda>x y. 0) 0 0 \n{} (\\<lambda>U. U={}) (\\<lambda>U. {0::nat}) (\\<lambda>U V. identity{0}) 0 (\\<lambda>U x y. 0) (\\<lambda>U x y. 0) (\\<lambda>U. 0) (\\<lambda>U. 0)\n(\\<lambda>\\<pp>\\<in>Spec. undefined) (\\<lambda>U. \\<lambda>s \\<in> cring0.sheaf_spec U. 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. affine_scheme {0} ring0.subtraction ring0.subtraction 0 0 {}\n     (\\<lambda>U. U = {}) (\\<lambda>U. {0}) (\\<lambda>U V. identity {0}) 0\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. affine_scheme {0} ring0.subtraction ring0.subtraction 0 0 {}\n     (\\<lambda>U. U = {}) (\\<lambda>U. {0}) (\\<lambda>U V. identity {0}) 0\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "interpret im0: im_sheaf \"{}\" \"\\<lambda>U. U = {}\" \"\\<lambda>U. {0}\" \"\\<lambda>U V. identity {0}\"\n    \"0\" \"\\<lambda>U x y. 0\" \"\\<lambda>U x y. 0\" \"\\<lambda>U. 0\" \"\\<lambda>U. 0\" \"{}\" \"\\<lambda>U. U = {}\" \"\\<lambda>\\<pp>\\<in>Spec. undefined\""], ["proof (prove)\ngoal (1 subgoal):\n 1. im_sheaf {} (\\<lambda>U. U = {}) (\\<lambda>U. {0::'b})\n     (\\<lambda>U V. identity {0::'b}) (0::'b) (\\<lambda>U x y. 0::'b)\n     (\\<lambda>U x y. 0::'b) (\\<lambda>U. 0::'b) (\\<lambda>U. 0::'b) {}\n     (\\<lambda>U. U = {}) (\\<lambda>\\<pp>\\<in>Spec. undefined)", "proof"], ["proof (state)\ngoal (24 subgoals):\n 1. {} = {}\n 2. \\<And>U. U = {} \\<Longrightarrow> U \\<subseteq> {}\n 3. \\<And>U V.\n       \\<lbrakk>U = {}; V = {}\\<rbrakk> \\<Longrightarrow> U \\<inter> V = {}\n 4. \\<And>F.\n       (\\<And>x. x \\<in> F \\<Longrightarrow> x = {}) \\<Longrightarrow>\n       (\\<Union>x\\<in>F. x) = {}\n 5. \\<And>U V.\n       \\<lbrakk>U = {}; V = {}; V \\<subseteq> U\\<rbrakk>\n       \\<Longrightarrow> identity {0::'b}\n                         \\<in> {0::'b} \\<rightarrow>\\<^sub>E {0::'b}\n 6. \\<And>U V a b.\n       \\<lbrakk>U = {}; V = {}; V \\<subseteq> U; a \\<in> {0::'b};\n        b \\<in> {0::'b}\\<rbrakk>\n       \\<Longrightarrow> (0::'b) \\<in> {0::'b}\n 7. \\<And>U V.\n       \\<lbrakk>U = {}; V = {}; V \\<subseteq> U\\<rbrakk>\n       \\<Longrightarrow> (0::'b) \\<in> {0::'b}\n 8. \\<And>U V a b c.\n       \\<lbrakk>U = {}; V = {}; V \\<subseteq> U; a \\<in> {0::'b};\n        b \\<in> {0::'b}; c \\<in> {0::'b}\\<rbrakk>\n       \\<Longrightarrow> (0::'b) = (0::'b)\n 9. \\<And>U V a.\n       \\<lbrakk>U = {}; V = {}; V \\<subseteq> U; a \\<in> {0::'b}\\<rbrakk>\n       \\<Longrightarrow> (0::'b) = a\n 10. \\<And>U V u.\n        \\<lbrakk>U = {}; V = {}; V \\<subseteq> U; u \\<in> {0::'b}\\<rbrakk>\n        \\<Longrightarrow> monoid.invertible {0::'b} (\\<lambda>x y. 0::'b)\n                           (0::'b) u\nA total of 24 subgoals...", "qed (use invertible_0 in auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. affine_scheme {0} ring0.subtraction ring0.subtraction 0 0 {}\n     (\\<lambda>U. U = {}) (\\<lambda>U. {0}) (\\<lambda>U V. identity {0}) 0\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "note im0.target.open_space [simp del] im0.ring_of_empty [simp del] im0.open_space [simp del]"], ["proof (state)\nthis:\n  {} = {}\n  im0.im_sheaf {} = {0::?'b}\n  {} = {}\n\ngoal (1 subgoal):\n 1. affine_scheme {0} ring0.subtraction ring0.subtraction 0 0 {}\n     (\\<lambda>U. U = {}) (\\<lambda>U. {0}) (\\<lambda>U V. identity {0}) 0\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "have cring0_open [simp]: \"\\<And>N. cring0.is_zariski_open N \\<longleftrightarrow> N = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>N. cring0.is_zariski_open N = (N = {})", "by (metis comm_ring.cring0_is_zariski_open cring0.comm_ring_axioms)"], ["proof (state)\nthis:\n  cring0.is_zariski_open ?N1 = (?N1 = {})\n\ngoal (1 subgoal):\n 1. affine_scheme {0} ring0.subtraction ring0.subtraction 0 0 {}\n     (\\<lambda>U. U = {}) (\\<lambda>U. {0}) (\\<lambda>U V. identity {0}) 0\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "have ring_im: \"ring (im0.im_sheaf V) (im0.add_im_sheaf V) (im0.mult_im_sheaf V) (im0.zero_im_sheaf V) (im0.one_im_sheaf V)\"\n    for V :: \"nat set set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ring (im0.im_sheaf V) (im0.add_im_sheaf V) (im0.mult_im_sheaf V)\n     (im0.zero_im_sheaf V) (im0.one_im_sheaf V)", "proof intro_locales"], ["proof (state)\ngoal (5 subgoals):\n 1. Group_Theory.monoid (im0.im_sheaf V) (im0.add_im_sheaf V)\n     (im0.zero_im_sheaf V)\n 2. Group_Theory.group_axioms (im0.im_sheaf V) (im0.add_im_sheaf V)\n     (im0.zero_im_sheaf V)\n 3. commutative_monoid_axioms (im0.im_sheaf V) (im0.add_im_sheaf V)\n 4. Group_Theory.monoid (im0.im_sheaf V) (im0.mult_im_sheaf V)\n     (im0.one_im_sheaf V)\n 5. ring_axioms (im0.im_sheaf V) (im0.add_im_sheaf V) (im0.mult_im_sheaf V)", "show \"Group_Theory.monoid (im0.im_sheaf V) (im0.add_im_sheaf V) (im0.zero_im_sheaf V)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Group_Theory.monoid (im0.im_sheaf V) (im0.add_im_sheaf V)\n     (im0.zero_im_sheaf V)", "unfolding im0.add_im_sheaf_def im0.im_sheaf_def im0.zero_im_sheaf_def monoid_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>a b.\n         a \\<in> {0::'e} \\<longrightarrow>\n         b \\<in> {0::'e} \\<longrightarrow> (0::'e) \\<in> {0::'e}) \\<and>\n     (0::'e) \\<in> {0::'e}) \\<and>\n    (\\<forall>a b c.\n        a \\<in> {0::'e} \\<longrightarrow>\n        b \\<in> {0::'e} \\<longrightarrow>\n        c \\<in> {0::'e} \\<longrightarrow> (0::'e) = (0::'e)) \\<and>\n    (\\<forall>a. a \\<in> {0::'e} \\<longrightarrow> (0::'e) = a) \\<and>\n    (\\<forall>a. a \\<in> {0::'e} \\<longrightarrow> (0::'e) = a)", "by force"], ["proof (state)\nthis:\n  Group_Theory.monoid (im0.im_sheaf V) (im0.add_im_sheaf V)\n   (im0.zero_im_sheaf V)\n\ngoal (4 subgoals):\n 1. Group_Theory.group_axioms (im0.im_sheaf V) (im0.add_im_sheaf V)\n     (im0.zero_im_sheaf V)\n 2. commutative_monoid_axioms (im0.im_sheaf V) (im0.add_im_sheaf V)\n 3. Group_Theory.monoid (im0.im_sheaf V) (im0.mult_im_sheaf V)\n     (im0.one_im_sheaf V)\n 4. ring_axioms (im0.im_sheaf V) (im0.add_im_sheaf V) (im0.mult_im_sheaf V)", "then"], ["proof (chain)\npicking this:\n  Group_Theory.monoid (im0.im_sheaf V) (im0.add_im_sheaf V)\n   (im0.zero_im_sheaf V)", "show \"Group_Theory.group_axioms (im0.im_sheaf V) (im0.add_im_sheaf V) (im0.zero_im_sheaf V)\""], ["proof (prove)\nusing this:\n  Group_Theory.monoid (im0.im_sheaf V) (im0.add_im_sheaf V)\n   (im0.zero_im_sheaf V)\n\ngoal (1 subgoal):\n 1. Group_Theory.group_axioms (im0.im_sheaf V) (im0.add_im_sheaf V)\n     (im0.zero_im_sheaf V)", "unfolding Group_Theory.group_axioms_def im0.im_sheaf_def im0.zero_im_sheaf_def im0.add_im_sheaf_def"], ["proof (prove)\nusing this:\n  Group_Theory.monoid {0::?'e2} (\\<lambda>x y. 0::?'e2) (0::?'e2)\n\ngoal (1 subgoal):\n 1. \\<forall>u.\n       u \\<in> {0::'e} \\<longrightarrow>\n       monoid.invertible {0::'e} (\\<lambda>x y. 0::'e) (0::'e) u", "by (simp add: invertible_0)"], ["proof (state)\nthis:\n  Group_Theory.group_axioms (im0.im_sheaf V) (im0.add_im_sheaf V)\n   (im0.zero_im_sheaf V)\n\ngoal (3 subgoals):\n 1. commutative_monoid_axioms (im0.im_sheaf V) (im0.add_im_sheaf V)\n 2. Group_Theory.monoid (im0.im_sheaf V) (im0.mult_im_sheaf V)\n     (im0.one_im_sheaf V)\n 3. ring_axioms (im0.im_sheaf V) (im0.add_im_sheaf V) (im0.mult_im_sheaf V)", "show \"commutative_monoid_axioms (im0.im_sheaf V) (im0.add_im_sheaf V)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. commutative_monoid_axioms (im0.im_sheaf V) (im0.add_im_sheaf V)", "by (metis im0.add_im_sheaf_def commutative_monoid_axioms.intro)"], ["proof (state)\nthis:\n  commutative_monoid_axioms (im0.im_sheaf V) (im0.add_im_sheaf V)\n\ngoal (2 subgoals):\n 1. Group_Theory.monoid (im0.im_sheaf V) (im0.mult_im_sheaf V)\n     (im0.one_im_sheaf V)\n 2. ring_axioms (im0.im_sheaf V) (im0.add_im_sheaf V) (im0.mult_im_sheaf V)", "qed (auto simp: im0.im_sheaf_def im0.add_im_sheaf_def im0.mult_im_sheaf_def im0.one_im_sheaf_def monoid_def ring_axioms_def)"], ["proof (state)\nthis:\n  ring (im0.im_sheaf ?V2) (im0.add_im_sheaf ?V2) (im0.mult_im_sheaf ?V2)\n   (im0.zero_im_sheaf ?V2) (im0.one_im_sheaf ?V2)\n\ngoal (1 subgoal):\n 1. affine_scheme {0} ring0.subtraction ring0.subtraction 0 0 {}\n     (\\<lambda>U. U = {}) (\\<lambda>U. {0}) (\\<lambda>U V. identity {0}) 0\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "have rh0: \"ring_homomorphism (cring0.sheaf_spec_morphisms {} {}) {\\<lambda>x. undefined}\n             (cring0.add_sheaf_spec {}) (cring0.mult_sheaf_spec {}) (cring0.zero_sheaf_spec {}) (cring0.one_sheaf_spec {}) {\\<lambda>x. undefined}\n             (cring0.add_sheaf_spec {}) (cring0.mult_sheaf_spec {}) (cring0.zero_sheaf_spec {}) (cring0.one_sheaf_spec {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ring_homomorphism (cring0.sheaf_spec_morphisms {} {})\n     {\\<lambda>x. undefined} (cring0.add_sheaf_spec {})\n     (cring0.mult_sheaf_spec {}) (cring0.zero_sheaf_spec {})\n     (cring0.one_sheaf_spec {}) {\\<lambda>x. undefined}\n     (cring0.add_sheaf_spec {}) (cring0.mult_sheaf_spec {})\n     (cring0.zero_sheaf_spec {}) (cring0.one_sheaf_spec {})", "by (metis cring0.cring0_sheaf_spec_empty cring0.is_zariski_open_empty cring0.sheaf_spec_morphisms_are_ring_morphisms im0.target.open_imp_subset)"], ["proof (state)\nthis:\n  ring_homomorphism (cring0.sheaf_spec_morphisms {} {})\n   {\\<lambda>x. undefined} (cring0.add_sheaf_spec {})\n   (cring0.mult_sheaf_spec {}) (cring0.zero_sheaf_spec {})\n   (cring0.one_sheaf_spec {}) {\\<lambda>x. undefined}\n   (cring0.add_sheaf_spec {}) (cring0.mult_sheaf_spec {})\n   (cring0.zero_sheaf_spec {}) (cring0.one_sheaf_spec {})\n\ngoal (1 subgoal):\n 1. affine_scheme {0} ring0.subtraction ring0.subtraction 0 0 {}\n     (\\<lambda>U. U = {}) (\\<lambda>U. {0}) (\\<lambda>U V. identity {0}) 0\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. affine_scheme {0} ring0.subtraction ring0.subtraction 0 0 {}\n     (\\<lambda>U. U = {}) (\\<lambda>U. {0}) (\\<lambda>U V. identity {0}) 0\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "proof intro_locales"], ["proof (state)\ngoal (9 subgoals):\n 1. locally_ringed_space_axioms (\\<lambda>U. U = {}) (\\<lambda>U. {0})\n     (\\<lambda>U V. identity {0}) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. 0) (\\<lambda>U. 0)\n 2. topological_space cring0.spectrum cring0.is_zariski_open\n 3. Set_Theory.map (\\<lambda>\\<pp>\\<in>Spec. undefined) {} cring0.spectrum\n 4. continuous_map_axioms {} (\\<lambda>U. U = {}) cring0.is_zariski_open\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n 5. presheaf_of_rings_axioms cring0.is_zariski_open cring0.sheaf_spec\n     cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n 6. sheaf_of_rings_axioms cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.zero_sheaf_spec\n 7. morphism_ringed_spaces_axioms {} (\\<lambda>U. {0})\n     (\\<lambda>U V. identity {0}) 0 (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. 0) (\\<lambda>U. 0)\n     cring0.spectrum cring0.is_zariski_open cring0.sheaf_spec\n     cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n 8. morphism_locally_ringed_spaces_axioms {} (\\<lambda>U. U = {})\n     (\\<lambda>U. {0}) (\\<lambda>U V. identity {0})\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n 9. iso_locally_ringed_spaces_axioms {} (\\<lambda>U. U = {})\n     (\\<lambda>U. {0}) (\\<lambda>U V. identity {0}) 0\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n     cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n     cring0.one_sheaf_spec (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "show \"locally_ringed_space_axioms (\\<lambda>U. U={}) (\\<lambda>U. {0::nat}) (\\<lambda>U V. identity{0}) (\\<lambda>U x y. 0) (\\<lambda>U x y. 0) (\\<lambda>U. 0) (\\<lambda>U. 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. locally_ringed_space_axioms (\\<lambda>U. U = {}) (\\<lambda>U. {0})\n     (\\<lambda>U V. identity {0}) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. 0) (\\<lambda>U. 0)", "by (metis (mono_tags, lifting) empty_iff locally_ringed_space_axioms_def)"], ["proof (state)\nthis:\n  locally_ringed_space_axioms (\\<lambda>U. U = {}) (\\<lambda>U. {0})\n   (\\<lambda>U V. identity {0}) (\\<lambda>U. ring0.subtraction)\n   (\\<lambda>U. ring0.subtraction) (\\<lambda>U. 0) (\\<lambda>U. 0)\n\ngoal (8 subgoals):\n 1. topological_space cring0.spectrum cring0.is_zariski_open\n 2. Set_Theory.map (\\<lambda>\\<pp>\\<in>Spec. undefined) {} cring0.spectrum\n 3. continuous_map_axioms {} (\\<lambda>U. U = {}) cring0.is_zariski_open\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n 4. presheaf_of_rings_axioms cring0.is_zariski_open cring0.sheaf_spec\n     cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n 5. sheaf_of_rings_axioms cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.zero_sheaf_spec\n 6. morphism_ringed_spaces_axioms {} (\\<lambda>U. {0})\n     (\\<lambda>U V. identity {0}) 0 (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. 0) (\\<lambda>U. 0)\n     cring0.spectrum cring0.is_zariski_open cring0.sheaf_spec\n     cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n 7. morphism_locally_ringed_spaces_axioms {} (\\<lambda>U. U = {})\n     (\\<lambda>U. {0}) (\\<lambda>U V. identity {0})\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n 8. iso_locally_ringed_spaces_axioms {} (\\<lambda>U. U = {})\n     (\\<lambda>U. {0}) (\\<lambda>U V. identity {0}) 0\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n     cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n     cring0.one_sheaf_spec (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "show \"topological_space cring0.spectrum cring0.is_zariski_open\""], ["proof (prove)\ngoal (1 subgoal):\n 1. topological_space cring0.spectrum cring0.is_zariski_open", "by blast"], ["proof (state)\nthis:\n  topological_space cring0.spectrum cring0.is_zariski_open\n\ngoal (7 subgoals):\n 1. Set_Theory.map (\\<lambda>\\<pp>\\<in>Spec. undefined) {} cring0.spectrum\n 2. continuous_map_axioms {} (\\<lambda>U. U = {}) cring0.is_zariski_open\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n 3. presheaf_of_rings_axioms cring0.is_zariski_open cring0.sheaf_spec\n     cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n 4. sheaf_of_rings_axioms cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.zero_sheaf_spec\n 5. morphism_ringed_spaces_axioms {} (\\<lambda>U. {0})\n     (\\<lambda>U V. identity {0}) 0 (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. 0) (\\<lambda>U. 0)\n     cring0.spectrum cring0.is_zariski_open cring0.sheaf_spec\n     cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n 6. morphism_locally_ringed_spaces_axioms {} (\\<lambda>U. U = {})\n     (\\<lambda>U. {0}) (\\<lambda>U V. identity {0})\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n 7. iso_locally_ringed_spaces_axioms {} (\\<lambda>U. U = {})\n     (\\<lambda>U. {0}) (\\<lambda>U V. identity {0}) 0\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n     cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n     cring0.one_sheaf_spec (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "show [simp]: \"Set_Theory.map (\\<lambda>\\<pp>\\<in>Spec. undefined) {} cring0.spectrum\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Set_Theory.map (\\<lambda>\\<pp>\\<in>Spec. undefined) {} cring0.spectrum", "by (metis cring0.cring0_spectrum_eq im0.map_axioms)"], ["proof (state)\nthis:\n  Set_Theory.map (\\<lambda>\\<pp>\\<in>Spec. undefined) {} cring0.spectrum\n\ngoal (6 subgoals):\n 1. continuous_map_axioms {} (\\<lambda>U. U = {}) cring0.is_zariski_open\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n 2. presheaf_of_rings_axioms cring0.is_zariski_open cring0.sheaf_spec\n     cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n 3. sheaf_of_rings_axioms cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.zero_sheaf_spec\n 4. morphism_ringed_spaces_axioms {} (\\<lambda>U. {0})\n     (\\<lambda>U V. identity {0}) 0 (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. 0) (\\<lambda>U. 0)\n     cring0.spectrum cring0.is_zariski_open cring0.sheaf_spec\n     cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n 5. morphism_locally_ringed_spaces_axioms {} (\\<lambda>U. U = {})\n     (\\<lambda>U. {0}) (\\<lambda>U V. identity {0})\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n 6. iso_locally_ringed_spaces_axioms {} (\\<lambda>U. U = {})\n     (\\<lambda>U. {0}) (\\<lambda>U V. identity {0}) 0\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n     cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n     cring0.one_sheaf_spec (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "show \"continuous_map_axioms {} (\\<lambda>U. U={}) cring0.is_zariski_open (\\<lambda>\\<pp>\\<in>Spec. undefined)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_map_axioms {} (\\<lambda>U. U = {}) cring0.is_zariski_open\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)", "unfolding continuous_map_axioms_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>U.\n       cring0.is_zariski_open U \\<longrightarrow>\n       (\\<lambda>\\<pp>\\<in>Spec. undefined) \\<^sup>\\<inverse> {} U = {}", "by fastforce"], ["proof (state)\nthis:\n  continuous_map_axioms {} (\\<lambda>U. U = {}) cring0.is_zariski_open\n   (\\<lambda>\\<pp>\\<in>Spec. undefined)\n\ngoal (5 subgoals):\n 1. presheaf_of_rings_axioms cring0.is_zariski_open cring0.sheaf_spec\n     cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n 2. sheaf_of_rings_axioms cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.zero_sheaf_spec\n 3. morphism_ringed_spaces_axioms {} (\\<lambda>U. {0})\n     (\\<lambda>U V. identity {0}) 0 (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. 0) (\\<lambda>U. 0)\n     cring0.spectrum cring0.is_zariski_open cring0.sheaf_spec\n     cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n 4. morphism_locally_ringed_spaces_axioms {} (\\<lambda>U. U = {})\n     (\\<lambda>U. {0}) (\\<lambda>U V. identity {0})\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n 5. iso_locally_ringed_spaces_axioms {} (\\<lambda>U. U = {})\n     (\\<lambda>U. {0}) (\\<lambda>U V. identity {0}) 0\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n     cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n     cring0.one_sheaf_spec (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "show \"presheaf_of_rings_axioms cring0.is_zariski_open cring0.sheaf_spec\n            cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\""], ["proof (prove)\ngoal (1 subgoal):\n 1. presheaf_of_rings_axioms cring0.is_zariski_open cring0.sheaf_spec\n     cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec", "using cring0.\\<O>_on_emptyset cring0.sheaf_morphisms_sheaf_spec"], ["proof (prove)\nusing this:\n  cring0.sheaf_spec {} = {cring0.\\<O>b}\n  ?s \\<in> cring0.sheaf_spec ?U \\<Longrightarrow>\n  cring0.sheaf_spec_morphisms ?U ?U ?s = ?s\n\ngoal (1 subgoal):\n 1. presheaf_of_rings_axioms cring0.is_zariski_open cring0.sheaf_spec\n     cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec", "by (metis cring0.sheaf_spec_is_presheaf presheaf_of_rings_def)"], ["proof (state)\nthis:\n  presheaf_of_rings_axioms cring0.is_zariski_open cring0.sheaf_spec\n   cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n   cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n\ngoal (4 subgoals):\n 1. sheaf_of_rings_axioms cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.zero_sheaf_spec\n 2. morphism_ringed_spaces_axioms {} (\\<lambda>U. {0})\n     (\\<lambda>U V. identity {0}) 0 (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. 0) (\\<lambda>U. 0)\n     cring0.spectrum cring0.is_zariski_open cring0.sheaf_spec\n     cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n 3. morphism_locally_ringed_spaces_axioms {} (\\<lambda>U. U = {})\n     (\\<lambda>U. {0}) (\\<lambda>U V. identity {0})\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n 4. iso_locally_ringed_spaces_axioms {} (\\<lambda>U. U = {})\n     (\\<lambda>U. {0}) (\\<lambda>U V. identity {0}) 0\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n     cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n     cring0.one_sheaf_spec (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "show \"sheaf_of_rings_axioms cring0.spectrum cring0.is_zariski_open cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.zero_sheaf_spec\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sheaf_of_rings_axioms cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.zero_sheaf_spec", "using cring0.sheaf_spec_is_sheaf sheaf_of_rings_def"], ["proof (prove)\nusing this:\n  sheaf_of_rings cring0.spectrum cring0.is_zariski_open cring0.sheaf_spec\n   cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n   cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n  sheaf_of_rings ?S ?is_open ?\\<FF> ?\\<rho> ?b ?add_str ?mult_str ?zero_str\n   ?one_str \\<equiv>\n  presheaf_of_rings ?S ?is_open ?\\<FF> ?\\<rho> ?b ?add_str ?mult_str\n   ?zero_str ?one_str \\<and>\n  sheaf_of_rings_axioms ?S ?is_open ?\\<FF> ?\\<rho> ?zero_str\n\ngoal (1 subgoal):\n 1. sheaf_of_rings_axioms cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.zero_sheaf_spec", "by metis"], ["proof (state)\nthis:\n  sheaf_of_rings_axioms cring0.spectrum cring0.is_zariski_open\n   cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.zero_sheaf_spec\n\ngoal (3 subgoals):\n 1. morphism_ringed_spaces_axioms {} (\\<lambda>U. {0})\n     (\\<lambda>U V. identity {0}) 0 (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. 0) (\\<lambda>U. 0)\n     cring0.spectrum cring0.is_zariski_open cring0.sheaf_spec\n     cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n 2. morphism_locally_ringed_spaces_axioms {} (\\<lambda>U. U = {})\n     (\\<lambda>U. {0}) (\\<lambda>U V. identity {0})\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n 3. iso_locally_ringed_spaces_axioms {} (\\<lambda>U. U = {})\n     (\\<lambda>U. {0}) (\\<lambda>U V. identity {0}) 0\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n     cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n     cring0.one_sheaf_spec (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "have im_sheaf_0[simp]: \"im_sheaf.im_sheaf {} (\\<lambda>U. {0}) (\\<lambda>\\<pp>\\<in>Spec. undefined) U = {0}\" for U :: \"nat set set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. im0.im_sheaf U = {0::'d}", "using im0.im_sheaf_def"], ["proof (prove)\nusing this:\n  im0.im_sheaf ?V \\<equiv> {0::?'b}\n\ngoal (1 subgoal):\n 1. im0.im_sheaf U = {0::'d}", "by blast"], ["proof (state)\nthis:\n  im0.im_sheaf ?U4 = {0::?'d5}\n\ngoal (3 subgoals):\n 1. morphism_ringed_spaces_axioms {} (\\<lambda>U. {0})\n     (\\<lambda>U V. identity {0}) 0 (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. 0) (\\<lambda>U. 0)\n     cring0.spectrum cring0.is_zariski_open cring0.sheaf_spec\n     cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n 2. morphism_locally_ringed_spaces_axioms {} (\\<lambda>U. U = {})\n     (\\<lambda>U. {0}) (\\<lambda>U V. identity {0})\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n 3. iso_locally_ringed_spaces_axioms {} (\\<lambda>U. U = {})\n     (\\<lambda>U. {0}) (\\<lambda>U V. identity {0}) 0\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n     cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n     cring0.one_sheaf_spec (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "have rh: \"ring_homomorphism (im0.im_sheaf_morphisms U V) (im0.im_sheaf U) (im0.add_im_sheaf U)\n         (im0.mult_im_sheaf U) (im0.zero_im_sheaf U) (im0.one_im_sheaf U) (im0.im_sheaf V)\n         (im0.add_im_sheaf V) (im0.mult_im_sheaf V) (im0.zero_im_sheaf V) (im0.one_im_sheaf V)\"\n      if \"cring0.is_zariski_open U\" \"cring0.is_zariski_open V\" \"V \\<subseteq> U\" for U V"], ["proof (prove)\ngoal (1 subgoal):\n 1. ring_homomorphism (im0.im_sheaf_morphisms U V) (im0.im_sheaf U)\n     (im0.add_im_sheaf U) (im0.mult_im_sheaf U) (im0.zero_im_sheaf U)\n     (im0.one_im_sheaf U) (im0.im_sheaf V) (im0.add_im_sheaf V)\n     (im0.mult_im_sheaf V) (im0.zero_im_sheaf V) (im0.one_im_sheaf V)", "using that"], ["proof (prove)\nusing this:\n  cring0.is_zariski_open U\n  cring0.is_zariski_open V\n  V \\<subseteq> U\n\ngoal (1 subgoal):\n 1. ring_homomorphism (im0.im_sheaf_morphisms U V) (im0.im_sheaf U)\n     (im0.add_im_sheaf U) (im0.mult_im_sheaf U) (im0.zero_im_sheaf U)\n     (im0.one_im_sheaf U) (im0.im_sheaf V) (im0.add_im_sheaf V)\n     (im0.mult_im_sheaf V) (im0.zero_im_sheaf V) (im0.one_im_sheaf V)", "by (metis cring0.cring0_is_zariski_open im0.is_ring_morphism)"], ["proof (state)\nthis:\n  \\<lbrakk>cring0.is_zariski_open ?U5; cring0.is_zariski_open ?V5;\n   ?V5 \\<subseteq> ?U5\\<rbrakk>\n  \\<Longrightarrow> ring_homomorphism (im0.im_sheaf_morphisms ?U5 ?V5)\n                     (im0.im_sheaf ?U5) (im0.add_im_sheaf ?U5)\n                     (im0.mult_im_sheaf ?U5) (im0.zero_im_sheaf ?U5)\n                     (im0.one_im_sheaf ?U5) (im0.im_sheaf ?V5)\n                     (im0.add_im_sheaf ?V5) (im0.mult_im_sheaf ?V5)\n                     (im0.zero_im_sheaf ?V5) (im0.one_im_sheaf ?V5)\n\ngoal (3 subgoals):\n 1. morphism_ringed_spaces_axioms {} (\\<lambda>U. {0})\n     (\\<lambda>U V. identity {0}) 0 (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. 0) (\\<lambda>U. 0)\n     cring0.spectrum cring0.is_zariski_open cring0.sheaf_spec\n     cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n 2. morphism_locally_ringed_spaces_axioms {} (\\<lambda>U. U = {})\n     (\\<lambda>U. {0}) (\\<lambda>U V. identity {0})\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n 3. iso_locally_ringed_spaces_axioms {} (\\<lambda>U. U = {})\n     (\\<lambda>U. {0}) (\\<lambda>U V. identity {0}) 0\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n     cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n     cring0.one_sheaf_spec (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "show \"morphism_ringed_spaces_axioms {} (\\<lambda>U. {0})\n         (\\<lambda>U V. identity {0}) 0 (\\<lambda>U x y. 0) (\\<lambda>U x y. 0)\n         (\\<lambda>U. 0) (\\<lambda>U. 0) cring0.spectrum cring0.is_zariski_open cring0.sheaf_spec\n         cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n         cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n         (\\<lambda>\\<pp>\\<in>Spec. undefined) (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. morphism_ringed_spaces_axioms {} (\\<lambda>U. {0::'d})\n     (\\<lambda>U V. identity {0::'d}) (0::'d) (\\<lambda>U x y. 0::'d)\n     (\\<lambda>U x y. 0::'d) (\\<lambda>U. 0::'d) (\\<lambda>U. 0::'d)\n     cring0.spectrum cring0.is_zariski_open cring0.sheaf_spec\n     cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0::'d)", "unfolding morphism_ringed_spaces_axioms_def morphism_sheaves_of_rings_def\n        morphism_presheaves_of_rings_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. presheaf_of_rings cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n     cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n     cring0.one_sheaf_spec \\<and>\n    presheaf_of_rings cring0.spectrum cring0.is_zariski_open im0.im_sheaf\n     im0.im_sheaf_morphisms (0::'d) im0.add_im_sheaf im0.mult_im_sheaf\n     im0.zero_im_sheaf im0.one_im_sheaf \\<and>\n    morphism_presheaves_of_rings_axioms cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     im0.im_sheaf im0.im_sheaf_morphisms im0.add_im_sheaf im0.mult_im_sheaf\n     im0.zero_im_sheaf im0.one_im_sheaf\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0::'d)", "proof (intro conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. presheaf_of_rings cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n     cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n     cring0.one_sheaf_spec\n 2. presheaf_of_rings cring0.spectrum cring0.is_zariski_open im0.im_sheaf\n     im0.im_sheaf_morphisms (0::'d) im0.add_im_sheaf im0.mult_im_sheaf\n     im0.zero_im_sheaf im0.one_im_sheaf\n 3. morphism_presheaves_of_rings_axioms cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     im0.im_sheaf im0.im_sheaf_morphisms im0.add_im_sheaf im0.mult_im_sheaf\n     im0.zero_im_sheaf im0.one_im_sheaf\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0::'d)", "show \"presheaf_of_rings cring0.spectrum cring0.is_zariski_open cring0.sheaf_spec\n         cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n         cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\""], ["proof (prove)\ngoal (1 subgoal):\n 1. presheaf_of_rings cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n     cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n     cring0.one_sheaf_spec", "using cring0.sheaf_spec_is_presheaf"], ["proof (prove)\nusing this:\n  presheaf_of_rings cring0.spectrum cring0.is_zariski_open cring0.sheaf_spec\n   cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n   cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n\ngoal (1 subgoal):\n 1. presheaf_of_rings cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n     cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n     cring0.one_sheaf_spec", "by force"], ["proof (state)\nthis:\n  presheaf_of_rings cring0.spectrum cring0.is_zariski_open cring0.sheaf_spec\n   cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n   cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n\ngoal (2 subgoals):\n 1. presheaf_of_rings cring0.spectrum cring0.is_zariski_open im0.im_sheaf\n     im0.im_sheaf_morphisms (0::'d) im0.add_im_sheaf im0.mult_im_sheaf\n     im0.zero_im_sheaf im0.one_im_sheaf\n 2. morphism_presheaves_of_rings_axioms cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     im0.im_sheaf im0.im_sheaf_morphisms im0.add_im_sheaf im0.mult_im_sheaf\n     im0.zero_im_sheaf im0.one_im_sheaf\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0::'d)", "show \"presheaf_of_rings cring0.spectrum cring0.is_zariski_open im0.im_sheaf im0.im_sheaf_morphisms\n 0 im0.add_im_sheaf im0.mult_im_sheaf im0.zero_im_sheaf im0.one_im_sheaf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. presheaf_of_rings cring0.spectrum cring0.is_zariski_open im0.im_sheaf\n     im0.im_sheaf_morphisms (0::'e) im0.add_im_sheaf im0.mult_im_sheaf\n     im0.zero_im_sheaf im0.one_im_sheaf", "by (smt (z3) comm_ring.cring0_is_zariski_open cring0.comm_ring_axioms cring0.cring0_spectrum_eq im0.presheaf_of_rings_axioms)"], ["proof (state)\nthis:\n  presheaf_of_rings cring0.spectrum cring0.is_zariski_open im0.im_sheaf\n   im0.im_sheaf_morphisms (0::?'e6) im0.add_im_sheaf im0.mult_im_sheaf\n   im0.zero_im_sheaf im0.one_im_sheaf\n\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings_axioms cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     im0.im_sheaf im0.im_sheaf_morphisms im0.add_im_sheaf im0.mult_im_sheaf\n     im0.zero_im_sheaf im0.one_im_sheaf\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0::'d)", "show \"morphism_presheaves_of_rings_axioms cring0.is_zariski_open cring0.sheaf_spec cring0.sheaf_spec_morphisms \n               cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec \n               im0.im_sheaf im0.im_sheaf_morphisms im0.add_im_sheaf im0.mult_im_sheaf im0.zero_im_sheaf im0.one_im_sheaf (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings_axioms cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     im0.im_sheaf im0.im_sheaf_morphisms im0.add_im_sheaf im0.mult_im_sheaf\n     im0.zero_im_sheaf im0.one_im_sheaf\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0::'e)", "unfolding morphism_presheaves_of_rings_axioms_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>U.\n        cring0.is_zariski_open U \\<longrightarrow>\n        ring_homomorphism (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'e)\n         (cring0.sheaf_spec U) (cring0.add_sheaf_spec U)\n         (cring0.mult_sheaf_spec U) (cring0.zero_sheaf_spec U)\n         (cring0.one_sheaf_spec U) (im0.im_sheaf U) (im0.add_im_sheaf U)\n         (im0.mult_im_sheaf U) (im0.zero_im_sheaf U)\n         (im0.one_im_sheaf U)) \\<and>\n    (\\<forall>U V.\n        cring0.is_zariski_open U \\<longrightarrow>\n        cring0.is_zariski_open V \\<longrightarrow>\n        V \\<subseteq> U \\<longrightarrow>\n        (\\<forall>x.\n            x \\<in> cring0.sheaf_spec U \\<longrightarrow>\n            (im0.im_sheaf_morphisms U V \\<circ>\n             (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'e))\n             x =\n            ((\\<lambda>s\\<in>cring0.sheaf_spec V. 0::'e) \\<circ>\n             cring0.sheaf_spec_morphisms U V)\n             x))", "proof (intro conjI strip)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>U.\n       cring0.is_zariski_open U \\<Longrightarrow>\n       ring_homomorphism (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'e)\n        (cring0.sheaf_spec U) (cring0.add_sheaf_spec U)\n        (cring0.mult_sheaf_spec U) (cring0.zero_sheaf_spec U)\n        (cring0.one_sheaf_spec U) (im0.im_sheaf U) (im0.add_im_sheaf U)\n        (im0.mult_im_sheaf U) (im0.zero_im_sheaf U) (im0.one_im_sheaf U)\n 2. \\<And>U V x.\n       \\<lbrakk>cring0.is_zariski_open U; cring0.is_zariski_open V;\n        V \\<subseteq> U; x \\<in> cring0.sheaf_spec U\\<rbrakk>\n       \\<Longrightarrow> (im0.im_sheaf_morphisms U V \\<circ>\n                          (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'e))\n                          x =\n                         ((\\<lambda>s\\<in>cring0.sheaf_spec V.\n                              0::'e) \\<circ>\n                          cring0.sheaf_spec_morphisms U V)\n                          x", "fix U"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>U.\n       cring0.is_zariski_open U \\<Longrightarrow>\n       ring_homomorphism (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'e)\n        (cring0.sheaf_spec U) (cring0.add_sheaf_spec U)\n        (cring0.mult_sheaf_spec U) (cring0.zero_sheaf_spec U)\n        (cring0.one_sheaf_spec U) (im0.im_sheaf U) (im0.add_im_sheaf U)\n        (im0.mult_im_sheaf U) (im0.zero_im_sheaf U) (im0.one_im_sheaf U)\n 2. \\<And>U V x.\n       \\<lbrakk>cring0.is_zariski_open U; cring0.is_zariski_open V;\n        V \\<subseteq> U; x \\<in> cring0.sheaf_spec U\\<rbrakk>\n       \\<Longrightarrow> (im0.im_sheaf_morphisms U V \\<circ>\n                          (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'e))\n                          x =\n                         ((\\<lambda>s\\<in>cring0.sheaf_spec V.\n                              0::'e) \\<circ>\n                          cring0.sheaf_spec_morphisms U V)\n                          x", "assume \"cring0.is_zariski_open U\""], ["proof (state)\nthis:\n  cring0.is_zariski_open U\n\ngoal (2 subgoals):\n 1. \\<And>U.\n       cring0.is_zariski_open U \\<Longrightarrow>\n       ring_homomorphism (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'e)\n        (cring0.sheaf_spec U) (cring0.add_sheaf_spec U)\n        (cring0.mult_sheaf_spec U) (cring0.zero_sheaf_spec U)\n        (cring0.one_sheaf_spec U) (im0.im_sheaf U) (im0.add_im_sheaf U)\n        (im0.mult_im_sheaf U) (im0.zero_im_sheaf U) (im0.one_im_sheaf U)\n 2. \\<And>U V x.\n       \\<lbrakk>cring0.is_zariski_open U; cring0.is_zariski_open V;\n        V \\<subseteq> U; x \\<in> cring0.sheaf_spec U\\<rbrakk>\n       \\<Longrightarrow> (im0.im_sheaf_morphisms U V \\<circ>\n                          (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'e))\n                          x =\n                         ((\\<lambda>s\\<in>cring0.sheaf_spec V.\n                              0::'e) \\<circ>\n                          cring0.sheaf_spec_morphisms U V)\n                          x", "interpret rU: ring \"cring0.sheaf_spec U\" \"cring0.add_sheaf_spec U\" \"cring0.mult_sheaf_spec U\" \"cring0.zero_sheaf_spec U\" \"cring0.one_sheaf_spec U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ring (cring0.sheaf_spec U) (cring0.add_sheaf_spec U)\n     (cring0.mult_sheaf_spec U) (cring0.zero_sheaf_spec U)\n     (cring0.one_sheaf_spec U)", "by (metis \\<open>cring0.is_zariski_open U\\<close> comm_ring.axioms(1) cring0.sheaf_spec_on_open_is_comm_ring)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>U.\n       cring0.is_zariski_open U \\<Longrightarrow>\n       ring_homomorphism (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'e)\n        (cring0.sheaf_spec U) (cring0.add_sheaf_spec U)\n        (cring0.mult_sheaf_spec U) (cring0.zero_sheaf_spec U)\n        (cring0.one_sheaf_spec U) (im0.im_sheaf U) (im0.add_im_sheaf U)\n        (im0.mult_im_sheaf U) (im0.zero_im_sheaf U) (im0.one_im_sheaf U)\n 2. \\<And>U V x.\n       \\<lbrakk>cring0.is_zariski_open U; cring0.is_zariski_open V;\n        V \\<subseteq> U; x \\<in> cring0.sheaf_spec U\\<rbrakk>\n       \\<Longrightarrow> (im0.im_sheaf_morphisms U V \\<circ>\n                          (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'e))\n                          x =\n                         ((\\<lambda>s\\<in>cring0.sheaf_spec V.\n                              0::'e) \\<circ>\n                          cring0.sheaf_spec_morphisms U V)\n                          x", "interpret rU': ring \"im0.im_sheaf U\" \"im0.add_im_sheaf U\" \"im0.mult_im_sheaf U\" \"im0.zero_im_sheaf U\" \"im0.one_im_sheaf U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ring (im0.im_sheaf U) (im0.add_im_sheaf U) (im0.mult_im_sheaf U)\n     (im0.zero_im_sheaf U) (im0.one_im_sheaf U)", "using ring_im"], ["proof (prove)\nusing this:\n  ring (im0.im_sheaf ?V2) (im0.add_im_sheaf ?V2) (im0.mult_im_sheaf ?V2)\n   (im0.zero_im_sheaf ?V2) (im0.one_im_sheaf ?V2)\n\ngoal (1 subgoal):\n 1. ring (im0.im_sheaf U) (im0.add_im_sheaf U) (im0.mult_im_sheaf U)\n     (im0.zero_im_sheaf U) (im0.one_im_sheaf U)", "by blast"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>U.\n       cring0.is_zariski_open U \\<Longrightarrow>\n       ring_homomorphism (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'e)\n        (cring0.sheaf_spec U) (cring0.add_sheaf_spec U)\n        (cring0.mult_sheaf_spec U) (cring0.zero_sheaf_spec U)\n        (cring0.one_sheaf_spec U) (im0.im_sheaf U) (im0.add_im_sheaf U)\n        (im0.mult_im_sheaf U) (im0.zero_im_sheaf U) (im0.one_im_sheaf U)\n 2. \\<And>U V x.\n       \\<lbrakk>cring0.is_zariski_open U; cring0.is_zariski_open V;\n        V \\<subseteq> U; x \\<in> cring0.sheaf_spec U\\<rbrakk>\n       \\<Longrightarrow> (im0.im_sheaf_morphisms U V \\<circ>\n                          (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'e))\n                          x =\n                         ((\\<lambda>s\\<in>cring0.sheaf_spec V.\n                              0::'e) \\<circ>\n                          cring0.sheaf_spec_morphisms U V)\n                          x", "show \"ring_homomorphism (\\<lambda>s\\<in>cring0.sheaf_spec U. 0) (cring0.sheaf_spec U) (cring0.add_sheaf_spec U) (cring0.mult_sheaf_spec U) (cring0.zero_sheaf_spec U) (cring0.one_sheaf_spec U) \n                            (im0.im_sheaf U) (im0.add_im_sheaf U) (im0.mult_im_sheaf U) (im0.zero_im_sheaf U) (im0.one_im_sheaf U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ring_homomorphism (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'g)\n     (cring0.sheaf_spec U) (cring0.add_sheaf_spec U)\n     (cring0.mult_sheaf_spec U) (cring0.zero_sheaf_spec U)\n     (cring0.one_sheaf_spec U) (im0.im_sheaf U) (im0.add_im_sheaf U)\n     (im0.mult_im_sheaf U) (im0.zero_im_sheaf U) (im0.one_im_sheaf U)", "proof intro_locales"], ["proof (state)\ngoal (3 subgoals):\n 1. Set_Theory.map (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'g)\n     (cring0.sheaf_spec U) (im0.im_sheaf U)\n 2. monoid_homomorphism_axioms (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'g)\n     (cring0.sheaf_spec U) (cring0.add_sheaf_spec U)\n     (cring0.zero_sheaf_spec U) (im0.add_im_sheaf U) (im0.zero_im_sheaf U)\n 3. monoid_homomorphism_axioms (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'g)\n     (cring0.sheaf_spec U) (cring0.mult_sheaf_spec U)\n     (cring0.one_sheaf_spec U) (im0.mult_im_sheaf U) (im0.one_im_sheaf U)", "show \"Set_Theory.map (\\<lambda>s\\<in>cring0.sheaf_spec U. 0) (cring0.sheaf_spec U) (im0.im_sheaf U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Set_Theory.map (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'h)\n     (cring0.sheaf_spec U) (im0.im_sheaf U)", "unfolding  Set_Theory.map_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'h)\n    \\<in> cring0.sheaf_spec U \\<rightarrow>\\<^sub>E im0.im_sheaf U", "by (metis ext_funcset_to_sing_iff im0.im_sheaf_def singletonI)"], ["proof (state)\nthis:\n  Set_Theory.map (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::?'h7)\n   (cring0.sheaf_spec U) (im0.im_sheaf U)\n\ngoal (2 subgoals):\n 1. monoid_homomorphism_axioms (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'g)\n     (cring0.sheaf_spec U) (cring0.add_sheaf_spec U)\n     (cring0.zero_sheaf_spec U) (im0.add_im_sheaf U) (im0.zero_im_sheaf U)\n 2. monoid_homomorphism_axioms (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'g)\n     (cring0.sheaf_spec U) (cring0.mult_sheaf_spec U)\n     (cring0.one_sheaf_spec U) (im0.mult_im_sheaf U) (im0.one_im_sheaf U)", "show \"monoid_homomorphism_axioms (\\<lambda>s\\<in>cring0.sheaf_spec U. 0) (cring0.sheaf_spec U) (cring0.add_sheaf_spec U) (cring0.zero_sheaf_spec U) (im0.add_im_sheaf U) (im0.zero_im_sheaf U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monoid_homomorphism_axioms (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'h)\n     (cring0.sheaf_spec U) (cring0.add_sheaf_spec U)\n     (cring0.zero_sheaf_spec U) (im0.add_im_sheaf U) (im0.zero_im_sheaf U)", "unfolding monoid_homomorphism_axioms_def im0.zero_im_sheaf_def im0.add_im_sheaf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x y.\n        x \\<in> cring0.sheaf_spec U \\<longrightarrow>\n        y \\<in> cring0.sheaf_spec U \\<longrightarrow>\n        (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'h)\n         (cring0.add_sheaf_spec U x y) =\n        (0::'h)) \\<and>\n    (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'h) (cring0.zero_sheaf_spec U) =\n    (0::'h)", "by (metis rU.additive.unit_closed rU.additive.composition_closed restrict_apply)"], ["proof (state)\nthis:\n  monoid_homomorphism_axioms (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::?'h8)\n   (cring0.sheaf_spec U) (cring0.add_sheaf_spec U)\n   (cring0.zero_sheaf_spec U) (im0.add_im_sheaf U) (im0.zero_im_sheaf U)\n\ngoal (1 subgoal):\n 1. monoid_homomorphism_axioms (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'g)\n     (cring0.sheaf_spec U) (cring0.mult_sheaf_spec U)\n     (cring0.one_sheaf_spec U) (im0.mult_im_sheaf U) (im0.one_im_sheaf U)", "show \"monoid_homomorphism_axioms (\\<lambda>s\\<in>cring0.sheaf_spec U. 0) (cring0.sheaf_spec U) (cring0.mult_sheaf_spec U) (cring0.one_sheaf_spec U) (im0.mult_im_sheaf U) (im0.one_im_sheaf U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monoid_homomorphism_axioms (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'h)\n     (cring0.sheaf_spec U) (cring0.mult_sheaf_spec U)\n     (cring0.one_sheaf_spec U) (im0.mult_im_sheaf U) (im0.one_im_sheaf U)", "unfolding monoid_homomorphism_axioms_def im0.mult_im_sheaf_def im0.one_im_sheaf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x y.\n        x \\<in> cring0.sheaf_spec U \\<longrightarrow>\n        y \\<in> cring0.sheaf_spec U \\<longrightarrow>\n        (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'h)\n         (cring0.mult_sheaf_spec U x y) =\n        (0::'h)) \\<and>\n    (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'h) (cring0.one_sheaf_spec U) =\n    (0::'h)", "by (metis rU.multiplicative.composition_closed rU.multiplicative.unit_closed restrict_apply)"], ["proof (state)\nthis:\n  monoid_homomorphism_axioms (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::?'h9)\n   (cring0.sheaf_spec U) (cring0.mult_sheaf_spec U)\n   (cring0.one_sheaf_spec U) (im0.mult_im_sheaf U) (im0.one_im_sheaf U)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ring_homomorphism (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::?'g7)\n   (cring0.sheaf_spec U) (cring0.add_sheaf_spec U)\n   (cring0.mult_sheaf_spec U) (cring0.zero_sheaf_spec U)\n   (cring0.one_sheaf_spec U) (im0.im_sheaf U) (im0.add_im_sheaf U)\n   (im0.mult_im_sheaf U) (im0.zero_im_sheaf U) (im0.one_im_sheaf U)\n\ngoal (1 subgoal):\n 1. \\<And>U V x.\n       \\<lbrakk>cring0.is_zariski_open U; cring0.is_zariski_open V;\n        V \\<subseteq> U; x \\<in> cring0.sheaf_spec U\\<rbrakk>\n       \\<Longrightarrow> (im0.im_sheaf_morphisms U V \\<circ>\n                          (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'e))\n                          x =\n                         ((\\<lambda>s\\<in>cring0.sheaf_spec V.\n                              0::'e) \\<circ>\n                          cring0.sheaf_spec_morphisms U V)\n                          x", "show \"(im0.im_sheaf_morphisms U V \\<circ> (\\<lambda>s\\<in>cring0.sheaf_spec U. 0)) x = ((\\<lambda>s\\<in>cring0.sheaf_spec V. 0) \\<circ> cring0.sheaf_spec_morphisms U V) x\"\n          if \"cring0.is_zariski_open U\" \"cring0.is_zariski_open V\" \"V \\<subseteq> U\" \"x \\<in> cring0.sheaf_spec U\"\n          for U V x"], ["proof (prove)\ngoal (1 subgoal):\n 1. (im0.im_sheaf_morphisms U V \\<circ>\n     (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'g))\n     x =\n    ((\\<lambda>s\\<in>cring0.sheaf_spec V. 0::'g) \\<circ>\n     cring0.sheaf_spec_morphisms U V)\n     x", "using that cring0.sheaf_morphisms_sheaf_spec"], ["proof (prove)\nusing this:\n  cring0.is_zariski_open U\n  cring0.is_zariski_open V\n  V \\<subseteq> U\n  x \\<in> cring0.sheaf_spec U\n  ?s \\<in> cring0.sheaf_spec ?U \\<Longrightarrow>\n  cring0.sheaf_spec_morphisms ?U ?U ?s = ?s\n\ngoal (1 subgoal):\n 1. (im0.im_sheaf_morphisms U V \\<circ>\n     (\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'g))\n     x =\n    ((\\<lambda>s\\<in>cring0.sheaf_spec V. 0::'g) \\<circ>\n     cring0.sheaf_spec_morphisms U V)\n     x", "unfolding im0.im_sheaf_morphisms_def o_def"], ["proof (prove)\nusing this:\n  cring0.is_zariski_open U\n  cring0.is_zariski_open V\n  V \\<subseteq> U\n  x \\<in> cring0.sheaf_spec U\n  ?s \\<in> cring0.sheaf_spec ?U \\<Longrightarrow>\n  cring0.sheaf_spec_morphisms ?U ?U ?s = ?s\n\ngoal (1 subgoal):\n 1. identity {0::'g} ((\\<lambda>s\\<in>cring0.sheaf_spec U. 0::'g) x) =\n    (\\<lambda>s\\<in>cring0.sheaf_spec V. 0::'g)\n     (cring0.sheaf_spec_morphisms U V x)", "by (metis cring0.cring0_is_zariski_open insertI1 restrict_apply')"], ["proof (state)\nthis:\n  \\<lbrakk>cring0.is_zariski_open ?U8; cring0.is_zariski_open ?V8;\n   ?V8 \\<subseteq> ?U8; ?x8 \\<in> cring0.sheaf_spec ?U8\\<rbrakk>\n  \\<Longrightarrow> (im0.im_sheaf_morphisms ?U8 ?V8 \\<circ>\n                     (\\<lambda>s\\<in>cring0.sheaf_spec ?U8. 0::?'g9))\n                     ?x8 =\n                    ((\\<lambda>s\\<in>cring0.sheaf_spec ?V8. 0::?'g9) \\<circ>\n                     cring0.sheaf_spec_morphisms ?U8 ?V8)\n                     ?x8\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  morphism_presheaves_of_rings_axioms cring0.is_zariski_open\n   cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.add_sheaf_spec\n   cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n   im0.im_sheaf im0.im_sheaf_morphisms im0.add_im_sheaf im0.mult_im_sheaf\n   im0.zero_im_sheaf im0.one_im_sheaf\n   (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0::?'e7)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  morphism_ringed_spaces_axioms {} (\\<lambda>U. {0::?'d6})\n   (\\<lambda>U V. identity {0::?'d6}) (0::?'d6) (\\<lambda>U x y. 0::?'d6)\n   (\\<lambda>U x y. 0::?'d6) (\\<lambda>U. 0::?'d6) (\\<lambda>U. 0::?'d6)\n   cring0.spectrum cring0.is_zariski_open cring0.sheaf_spec\n   cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n   cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n   (\\<lambda>\\<pp>\\<in>Spec. undefined)\n   (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0::?'d6)\n\ngoal (2 subgoals):\n 1. morphism_locally_ringed_spaces_axioms {} (\\<lambda>U. U = {})\n     (\\<lambda>U. {0}) (\\<lambda>U V. identity {0})\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n 2. iso_locally_ringed_spaces_axioms {} (\\<lambda>U. U = {})\n     (\\<lambda>U. {0}) (\\<lambda>U V. identity {0}) 0\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n     cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n     cring0.one_sheaf_spec (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "interpret monoid0: Group_Theory.monoid \"{\\<lambda>x. undefined}\"\n      \"cring0.add_sheaf_spec {}\"\n      \"(\\<lambda>\\<pp>\\<in>{}. quotient_ring.zero_rel ({0}\\<setminus>\\<pp>) {0} ring0.subtraction ring0.subtraction 0 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Group_Theory.monoid {\\<lambda>x. undefined} (cring0.add_sheaf_spec {})\n     (\\<lambda>\\<pp>\\<in>{}.\n         quotient_ring.zero_rel ({0}\\<setminus>\\<pp>) {0} ring0.subtraction\n          ring0.subtraction 0 0)", "by (smt (verit, best) Group_Theory.monoid.intro cring0.add_sheaf_spec_extensional extensional_empty restrict_extensional singletonD)"], ["proof (state)\ngoal (2 subgoals):\n 1. morphism_locally_ringed_spaces_axioms {} (\\<lambda>U. U = {})\n     (\\<lambda>U. {0}) (\\<lambda>U V. identity {0})\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n 2. iso_locally_ringed_spaces_axioms {} (\\<lambda>U. U = {})\n     (\\<lambda>U. {0}) (\\<lambda>U V. identity {0}) 0\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n     cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n     cring0.one_sheaf_spec (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "show \"iso_locally_ringed_spaces_axioms {} (\\<lambda>U. U = {})\n     (\\<lambda>U. {0}) (\\<lambda>U V. identity {0}) 0 (\\<lambda>U x y. 0)\n     (\\<lambda>U x y. 0) (\\<lambda>U. 0) (\\<lambda>U. 0) cring0.spectrum\n     cring0.is_zariski_open cring0.sheaf_spec\n     cring0.sheaf_spec_morphisms cring0.\\<O>b\n     cring0.add_sheaf_spec cring0.mult_sheaf_spec\n     cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0::nat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iso_locally_ringed_spaces_axioms {} (\\<lambda>U. U = {})\n     (\\<lambda>U. {0}) (\\<lambda>U V. identity {0}) 0\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n     cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n     cring0.one_sheaf_spec (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "unfolding iso_locally_ringed_spaces_axioms_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. homeomorphism {} (\\<lambda>U. U = {}) cring0.spectrum\n     cring0.is_zariski_open (\\<lambda>\\<pp>\\<in>Spec. undefined) \\<and>\n    iso_sheaves_of_rings cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n     cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n     cring0.one_sheaf_spec im0.im_sheaf im0.im_sheaf_morphisms 0\n     im0.add_im_sheaf im0.mult_im_sheaf im0.zero_im_sheaf im0.one_im_sheaf\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "proof (intro conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. homeomorphism {} (\\<lambda>U. U = {}) cring0.spectrum\n     cring0.is_zariski_open (\\<lambda>\\<pp>\\<in>Spec. undefined)\n 2. iso_sheaves_of_rings cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n     cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n     cring0.one_sheaf_spec im0.im_sheaf im0.im_sheaf_morphisms 0\n     im0.add_im_sheaf im0.mult_im_sheaf im0.zero_im_sheaf im0.one_im_sheaf\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "show \"homeomorphism {} (\\<lambda>U. U = {}) cring0.spectrum cring0.is_zariski_open (\\<lambda>\\<pp>\\<in>Spec. undefined)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. homeomorphism {} (\\<lambda>U. U = {}) cring0.spectrum\n     cring0.is_zariski_open (\\<lambda>\\<pp>\\<in>Spec. undefined)", "proof intro_locales"], ["proof (state)\ngoal (6 subgoals):\n 1. topological_space cring0.spectrum cring0.is_zariski_open\n 2. Set_Theory.map (\\<lambda>\\<pp>\\<in>Spec. undefined) {} cring0.spectrum\n 3. continuous_map_axioms {} (\\<lambda>U. U = {}) cring0.is_zariski_open\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n 4. bijective (\\<lambda>\\<pp>\\<in>Spec. undefined) {} cring0.spectrum\n 5. Set_Theory.map\n     (inverse_map (\\<lambda>\\<pp>\\<in>Spec. undefined) {} cring0.spectrum)\n     cring0.spectrum {}\n 6. continuous_map_axioms cring0.spectrum cring0.is_zariski_open\n     (\\<lambda>U. U = {})\n     (inverse_map (\\<lambda>\\<pp>\\<in>Spec. undefined) {} cring0.spectrum)", "show \"bijective (\\<lambda>\\<pp>\\<in>Spec. undefined) {} cring0.spectrum\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bijective (\\<lambda>\\<pp>\\<in>Spec. undefined) {} cring0.spectrum", "unfolding bijective_def bij_betw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>\\<pp>\\<in>Spec. undefined) {} \\<and>\n    (\\<lambda>\\<pp>\\<in>Spec. undefined) ` {} = cring0.spectrum", "using cring0.cring0_spectrum_eq"], ["proof (prove)\nusing this:\n  cring0.spectrum = {}\n\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>\\<pp>\\<in>Spec. undefined) {} \\<and>\n    (\\<lambda>\\<pp>\\<in>Spec. undefined) ` {} = cring0.spectrum", "by blast"], ["proof (state)\nthis:\n  bijective (\\<lambda>\\<pp>\\<in>Spec. undefined) {} cring0.spectrum\n\ngoal (5 subgoals):\n 1. topological_space cring0.spectrum cring0.is_zariski_open\n 2. Set_Theory.map (\\<lambda>\\<pp>\\<in>Spec. undefined) {} cring0.spectrum\n 3. continuous_map_axioms {} (\\<lambda>U. U = {}) cring0.is_zariski_open\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n 4. Set_Theory.map\n     (inverse_map (\\<lambda>\\<pp>\\<in>Spec. undefined) {} cring0.spectrum)\n     cring0.spectrum {}\n 5. continuous_map_axioms cring0.spectrum cring0.is_zariski_open\n     (\\<lambda>U. U = {})\n     (inverse_map (\\<lambda>\\<pp>\\<in>Spec. undefined) {} cring0.spectrum)", "show \"Set_Theory.map (inverse_map (\\<lambda>\\<pp>\\<in>Spec. undefined) {} cring0.spectrum) cring0.spectrum {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Set_Theory.map\n     (inverse_map (\\<lambda>\\<pp>\\<in>Spec. undefined) {} cring0.spectrum)\n     cring0.spectrum {}", "unfolding Set_Theory.map_def inverse_map_def restrict_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        if x \\<in> cring0.spectrum\n        then inv_into {}\n              (\\<lambda>x. if x \\<in> Spec then undefined else undefined) x\n        else undefined)\n    \\<in> cring0.spectrum \\<rightarrow>\\<^sub>E {}", "by (smt (verit, best) PiE_I cring0.cring0_spectrum_eq empty_iff)"], ["proof (state)\nthis:\n  Set_Theory.map\n   (inverse_map (\\<lambda>\\<pp>\\<in>Spec. undefined) {} cring0.spectrum)\n   cring0.spectrum {}\n\ngoal (4 subgoals):\n 1. topological_space cring0.spectrum cring0.is_zariski_open\n 2. Set_Theory.map (\\<lambda>\\<pp>\\<in>Spec. undefined) {} cring0.spectrum\n 3. continuous_map_axioms {} (\\<lambda>U. U = {}) cring0.is_zariski_open\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n 4. continuous_map_axioms cring0.spectrum cring0.is_zariski_open\n     (\\<lambda>U. U = {})\n     (inverse_map (\\<lambda>\\<pp>\\<in>Spec. undefined) {} cring0.spectrum)", "qed (use im0.map_axioms continuous_map_axioms_def in \\<open>force+\\<close>)"], ["proof (state)\nthis:\n  homeomorphism {} (\\<lambda>U. U = {}) cring0.spectrum\n   cring0.is_zariski_open (\\<lambda>\\<pp>\\<in>Spec. undefined)\n\ngoal (1 subgoal):\n 1. iso_sheaves_of_rings cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n     cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n     cring0.one_sheaf_spec im0.im_sheaf im0.im_sheaf_morphisms 0\n     im0.add_im_sheaf im0.mult_im_sheaf im0.zero_im_sheaf im0.one_im_sheaf\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "show \"iso_sheaves_of_rings cring0.spectrum cring0.is_zariski_open cring0.sheaf_spec\n                 cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec \n                 im0.im_sheaf im0.im_sheaf_morphisms (0::nat) im0.add_im_sheaf im0.mult_im_sheaf im0.zero_im_sheaf im0.one_im_sheaf (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0::nat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iso_sheaves_of_rings cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n     cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n     cring0.one_sheaf_spec im0.im_sheaf im0.im_sheaf_morphisms 0\n     im0.add_im_sheaf im0.mult_im_sheaf im0.zero_im_sheaf im0.one_im_sheaf\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "proof intro_locales"], ["proof (state)\ngoal (5 subgoals):\n 1. topological_space cring0.spectrum cring0.is_zariski_open\n 2. presheaf_of_rings_axioms cring0.is_zariski_open cring0.sheaf_spec\n     cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n 3. presheaf_of_rings_axioms cring0.is_zariski_open im0.im_sheaf\n     im0.im_sheaf_morphisms 0 im0.add_im_sheaf im0.mult_im_sheaf\n     im0.zero_im_sheaf im0.one_im_sheaf\n 4. morphism_presheaves_of_rings_axioms cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     im0.im_sheaf im0.im_sheaf_morphisms im0.add_im_sheaf im0.mult_im_sheaf\n     im0.zero_im_sheaf im0.one_im_sheaf\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n 5. iso_presheaves_of_rings_axioms cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n     cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n     cring0.one_sheaf_spec im0.im_sheaf im0.im_sheaf_morphisms 0\n     im0.add_im_sheaf im0.mult_im_sheaf im0.zero_im_sheaf im0.one_im_sheaf\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "show \"topological_space cring0.spectrum cring0.is_zariski_open\""], ["proof (prove)\ngoal (1 subgoal):\n 1. topological_space cring0.spectrum cring0.is_zariski_open", "by force"], ["proof (state)\nthis:\n  topological_space cring0.spectrum cring0.is_zariski_open\n\ngoal (4 subgoals):\n 1. presheaf_of_rings_axioms cring0.is_zariski_open cring0.sheaf_spec\n     cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n 2. presheaf_of_rings_axioms cring0.is_zariski_open im0.im_sheaf\n     im0.im_sheaf_morphisms 0 im0.add_im_sheaf im0.mult_im_sheaf\n     im0.zero_im_sheaf im0.one_im_sheaf\n 3. morphism_presheaves_of_rings_axioms cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     im0.im_sheaf im0.im_sheaf_morphisms im0.add_im_sheaf im0.mult_im_sheaf\n     im0.zero_im_sheaf im0.one_im_sheaf\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n 4. iso_presheaves_of_rings_axioms cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n     cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n     cring0.one_sheaf_spec im0.im_sheaf im0.im_sheaf_morphisms 0\n     im0.add_im_sheaf im0.mult_im_sheaf im0.zero_im_sheaf im0.one_im_sheaf\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "show \"presheaf_of_rings_axioms cring0.is_zariski_open cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\""], ["proof (prove)\ngoal (1 subgoal):\n 1. presheaf_of_rings_axioms cring0.is_zariski_open cring0.sheaf_spec\n     cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec", "using \\<open>presheaf_of_rings_axioms cring0.is_zariski_open cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\\<close>"], ["proof (prove)\nusing this:\n  presheaf_of_rings_axioms cring0.is_zariski_open cring0.sheaf_spec\n   cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n   cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n\ngoal (1 subgoal):\n 1. presheaf_of_rings_axioms cring0.is_zariski_open cring0.sheaf_spec\n     cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec", "by force"], ["proof (state)\nthis:\n  presheaf_of_rings_axioms cring0.is_zariski_open cring0.sheaf_spec\n   cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n   cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n\ngoal (3 subgoals):\n 1. presheaf_of_rings_axioms cring0.is_zariski_open im0.im_sheaf\n     im0.im_sheaf_morphisms 0 im0.add_im_sheaf im0.mult_im_sheaf\n     im0.zero_im_sheaf im0.one_im_sheaf\n 2. morphism_presheaves_of_rings_axioms cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     im0.im_sheaf im0.im_sheaf_morphisms im0.add_im_sheaf im0.mult_im_sheaf\n     im0.zero_im_sheaf im0.one_im_sheaf\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n 3. iso_presheaves_of_rings_axioms cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n     cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n     cring0.one_sheaf_spec im0.im_sheaf im0.im_sheaf_morphisms 0\n     im0.add_im_sheaf im0.mult_im_sheaf im0.zero_im_sheaf im0.one_im_sheaf\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "show \"presheaf_of_rings_axioms cring0.is_zariski_open im0.im_sheaf im0.im_sheaf_morphisms (0::nat) im0.add_im_sheaf im0.mult_im_sheaf im0.zero_im_sheaf im0.one_im_sheaf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. presheaf_of_rings_axioms cring0.is_zariski_open im0.im_sheaf\n     im0.im_sheaf_morphisms 0 im0.add_im_sheaf im0.mult_im_sheaf\n     im0.zero_im_sheaf im0.one_im_sheaf", "using im0.presheaf_of_rings_axioms presheaf_of_rings_def"], ["proof (prove)\nusing this:\n  presheaf_of_rings {} (\\<lambda>U. U = {}) im0.im_sheaf\n   im0.im_sheaf_morphisms (0::?'b) im0.add_im_sheaf im0.mult_im_sheaf\n   im0.zero_im_sheaf im0.one_im_sheaf\n  presheaf_of_rings ?S ?is_open ?\\<FF> ?\\<rho> ?b ?add_str ?mult_str\n   ?zero_str ?one_str \\<equiv>\n  topological_space ?S ?is_open \\<and>\n  presheaf_of_rings_axioms ?is_open ?\\<FF> ?\\<rho> ?b ?add_str ?mult_str\n   ?zero_str ?one_str\n\ngoal (1 subgoal):\n 1. presheaf_of_rings_axioms cring0.is_zariski_open im0.im_sheaf\n     im0.im_sheaf_morphisms 0 im0.add_im_sheaf im0.mult_im_sheaf\n     im0.zero_im_sheaf im0.one_im_sheaf", "by force"], ["proof (state)\nthis:\n  presheaf_of_rings_axioms cring0.is_zariski_open im0.im_sheaf\n   im0.im_sheaf_morphisms 0 im0.add_im_sheaf im0.mult_im_sheaf\n   im0.zero_im_sheaf im0.one_im_sheaf\n\ngoal (2 subgoals):\n 1. morphism_presheaves_of_rings_axioms cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     im0.im_sheaf im0.im_sheaf_morphisms im0.add_im_sheaf im0.mult_im_sheaf\n     im0.zero_im_sheaf im0.one_im_sheaf\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n 2. iso_presheaves_of_rings_axioms cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n     cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n     cring0.one_sheaf_spec im0.im_sheaf im0.im_sheaf_morphisms 0\n     im0.add_im_sheaf im0.mult_im_sheaf im0.zero_im_sheaf im0.one_im_sheaf\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "show \"morphism_presheaves_of_rings_axioms cring0.is_zariski_open cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec im0.im_sheaf im0.im_sheaf_morphisms im0.add_im_sheaf im0.mult_im_sheaf im0.zero_im_sheaf im0.one_im_sheaf (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0::nat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings_axioms cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     im0.im_sheaf im0.im_sheaf_morphisms im0.add_im_sheaf im0.mult_im_sheaf\n     im0.zero_im_sheaf im0.one_im_sheaf\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "proof"], ["proof (state)\ngoal (34 subgoals):\n 1. \\<And>U.\n       cring0.is_zariski_open U \\<Longrightarrow>\n       (\\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n       \\<in> cring0.sheaf_spec U \\<rightarrow>\\<^sub>E im0.im_sheaf U\n 2. \\<And>U a b.\n       \\<lbrakk>cring0.is_zariski_open U; a \\<in> cring0.sheaf_spec U;\n        b \\<in> cring0.sheaf_spec U\\<rbrakk>\n       \\<Longrightarrow> cring0.add_sheaf_spec U a b\n                         \\<in> cring0.sheaf_spec U\n 3. \\<And>U.\n       cring0.is_zariski_open U \\<Longrightarrow>\n       cring0.zero_sheaf_spec U \\<in> cring0.sheaf_spec U\n 4. \\<And>U a b c.\n       \\<lbrakk>cring0.is_zariski_open U; a \\<in> cring0.sheaf_spec U;\n        b \\<in> cring0.sheaf_spec U; c \\<in> cring0.sheaf_spec U\\<rbrakk>\n       \\<Longrightarrow> cring0.add_sheaf_spec U\n                          (cring0.add_sheaf_spec U a b) c =\n                         cring0.add_sheaf_spec U a\n                          (cring0.add_sheaf_spec U b c)\n 5. \\<And>U a.\n       \\<lbrakk>cring0.is_zariski_open U;\n        a \\<in> cring0.sheaf_spec U\\<rbrakk>\n       \\<Longrightarrow> cring0.add_sheaf_spec U (cring0.zero_sheaf_spec U)\n                          a =\n                         a\n 6. \\<And>U a.\n       \\<lbrakk>cring0.is_zariski_open U;\n        a \\<in> cring0.sheaf_spec U\\<rbrakk>\n       \\<Longrightarrow> cring0.add_sheaf_spec U a\n                          (cring0.zero_sheaf_spec U) =\n                         a\n 7. \\<And>U u.\n       \\<lbrakk>cring0.is_zariski_open U;\n        u \\<in> cring0.sheaf_spec U\\<rbrakk>\n       \\<Longrightarrow> monoid.invertible (cring0.sheaf_spec U)\n                          (cring0.add_sheaf_spec U)\n                          (cring0.zero_sheaf_spec U) u\n 8. \\<And>U x y.\n       \\<lbrakk>cring0.is_zariski_open U; x \\<in> cring0.sheaf_spec U;\n        y \\<in> cring0.sheaf_spec U\\<rbrakk>\n       \\<Longrightarrow> cring0.add_sheaf_spec U x y =\n                         cring0.add_sheaf_spec U y x\n 9. \\<And>U a b.\n       \\<lbrakk>cring0.is_zariski_open U; a \\<in> cring0.sheaf_spec U;\n        b \\<in> cring0.sheaf_spec U\\<rbrakk>\n       \\<Longrightarrow> cring0.mult_sheaf_spec U a b\n                         \\<in> cring0.sheaf_spec U\n 10. \\<And>U.\n        cring0.is_zariski_open U \\<Longrightarrow>\n        cring0.one_sheaf_spec U \\<in> cring0.sheaf_spec U\nA total of 34 subgoals...", "qed (auto simp: cring0.zero_sheaf_spec_def cring0.one_sheaf_spec_def cring0.add_sheaf_spec_def cring0.mult_sheaf_spec_def \n            im0.zero_im_sheaf_def im0.one_im_sheaf_def im0.add_im_sheaf_def im0.mult_im_sheaf_def\n            im0.im_sheaf_morphisms_def cring0.sheaf_morphisms_sheaf_spec monoid0.invertible_def)"], ["proof (state)\nthis:\n  morphism_presheaves_of_rings_axioms cring0.is_zariski_open\n   cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.add_sheaf_spec\n   cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n   im0.im_sheaf im0.im_sheaf_morphisms im0.add_im_sheaf im0.mult_im_sheaf\n   im0.zero_im_sheaf im0.one_im_sheaf\n   (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n\ngoal (1 subgoal):\n 1. iso_presheaves_of_rings_axioms cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n     cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n     cring0.one_sheaf_spec im0.im_sheaf im0.im_sheaf_morphisms 0\n     im0.add_im_sheaf im0.mult_im_sheaf im0.zero_im_sheaf im0.one_im_sheaf\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "have morph_empty: \"morphism_presheaves_of_rings {} (\\<lambda>U. U = {})\n             im0.im_sheaf im0.im_sheaf_morphisms 0 (\\<lambda>V. ring0.subtraction) (\\<lambda>V. ring0.subtraction)\n             (\\<lambda>V. 0) (\\<lambda>V. 0) cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n             cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n             (\\<lambda>S. \\<lambda>n\\<in>{0}. \\<lambda>x. undefined)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. morphism_presheaves_of_rings {} (\\<lambda>U. U = {}) im0.im_sheaf\n     im0.im_sheaf_morphisms 0 (\\<lambda>V. ring0.subtraction)\n     (\\<lambda>V. ring0.subtraction) (\\<lambda>V. 0) (\\<lambda>V. 0)\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n     cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n     cring0.one_sheaf_spec\n     (\\<lambda>S. \\<lambda>n\\<in>{0}. \\<lambda>x. undefined)", "proof"], ["proof (state)\ngoal (80 subgoals):\n 1. \\<And>U V.\n       \\<lbrakk>U = {}; V = {}; V \\<subseteq> U\\<rbrakk>\n       \\<Longrightarrow> im0.im_sheaf_morphisms U V\n                         \\<in> im0.im_sheaf U \\<rightarrow>\\<^sub>E\n                               im0.im_sheaf V\n 2. \\<And>U V a b.\n       \\<lbrakk>U = {}; V = {}; V \\<subseteq> U; a \\<in> im0.im_sheaf U;\n        b \\<in> im0.im_sheaf U\\<rbrakk>\n       \\<Longrightarrow> 0 \\<in> im0.im_sheaf U\n 3. \\<And>U V.\n       \\<lbrakk>U = {}; V = {}; V \\<subseteq> U\\<rbrakk>\n       \\<Longrightarrow> 0 \\<in> im0.im_sheaf U\n 4. \\<And>U V a b c.\n       \\<lbrakk>U = {}; V = {}; V \\<subseteq> U; a \\<in> im0.im_sheaf U;\n        b \\<in> im0.im_sheaf U; c \\<in> im0.im_sheaf U\\<rbrakk>\n       \\<Longrightarrow> 0 = 0\n 5. \\<And>U V a.\n       \\<lbrakk>U = {}; V = {}; V \\<subseteq> U;\n        a \\<in> im0.im_sheaf U\\<rbrakk>\n       \\<Longrightarrow> 0 = a\n 6. \\<And>U V u.\n       \\<lbrakk>U = {}; V = {}; V \\<subseteq> U;\n        u \\<in> im0.im_sheaf U\\<rbrakk>\n       \\<Longrightarrow> monoid.invertible (im0.im_sheaf U)\n                          ring0.subtraction 0 u\n 7. \\<And>U V x y.\n       \\<lbrakk>U = {}; V = {}; V \\<subseteq> U; x \\<in> im0.im_sheaf U;\n        y \\<in> im0.im_sheaf U\\<rbrakk>\n       \\<Longrightarrow> 0 = 0\n 8. \\<And>U V a b.\n       \\<lbrakk>U = {}; V = {}; V \\<subseteq> U; a \\<in> im0.im_sheaf V;\n        b \\<in> im0.im_sheaf V\\<rbrakk>\n       \\<Longrightarrow> 0 \\<in> im0.im_sheaf V\n 9. \\<And>U V.\n       \\<lbrakk>U = {}; V = {}; V \\<subseteq> U\\<rbrakk>\n       \\<Longrightarrow> 0 \\<in> im0.im_sheaf V\n 10. \\<And>U V a b c.\n        \\<lbrakk>U = {}; V = {}; V \\<subseteq> U; a \\<in> im0.im_sheaf V;\n         b \\<in> im0.im_sheaf V; c \\<in> im0.im_sheaf V\\<rbrakk>\n        \\<Longrightarrow> 0 = 0\nA total of 80 subgoals...", "qed (auto simp: im0.im_sheaf_morphisms_def cring0.sheaf_spec_morphisms_def \n            cring0.zero_sheaf_spec_def cring0.one_sheaf_spec_def cring0.add_sheaf_spec_def cring0.mult_sheaf_spec_def \n            cring0.\\<O>b_def monoid0.invertible_def)"], ["proof (state)\nthis:\n  morphism_presheaves_of_rings {} (\\<lambda>U. U = {}) im0.im_sheaf\n   im0.im_sheaf_morphisms 0 (\\<lambda>V. ring0.subtraction)\n   (\\<lambda>V. ring0.subtraction) (\\<lambda>V. 0) (\\<lambda>V. 0)\n   cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n   cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n   cring0.one_sheaf_spec\n   (\\<lambda>S. \\<lambda>n\\<in>{0}. \\<lambda>x. undefined)\n\ngoal (1 subgoal):\n 1. iso_presheaves_of_rings_axioms cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n     cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n     cring0.one_sheaf_spec im0.im_sheaf im0.im_sheaf_morphisms 0\n     im0.add_im_sheaf im0.mult_im_sheaf im0.zero_im_sheaf im0.one_im_sheaf\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "then"], ["proof (chain)\npicking this:\n  morphism_presheaves_of_rings {} (\\<lambda>U. U = {}) im0.im_sheaf\n   im0.im_sheaf_morphisms 0 (\\<lambda>V. ring0.subtraction)\n   (\\<lambda>V. ring0.subtraction) (\\<lambda>V. 0) (\\<lambda>V. 0)\n   cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n   cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n   cring0.one_sheaf_spec\n   (\\<lambda>S. \\<lambda>n\\<in>{0}. \\<lambda>x. undefined)", "show \"iso_presheaves_of_rings_axioms cring0.spectrum cring0.is_zariski_open cring0.sheaf_spec \n                   cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec \n                   im0.im_sheaf im0.im_sheaf_morphisms (0::nat) im0.add_im_sheaf im0.mult_im_sheaf im0.zero_im_sheaf im0.one_im_sheaf (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\""], ["proof (prove)\nusing this:\n  morphism_presheaves_of_rings {} (\\<lambda>U. U = {}) im0.im_sheaf\n   im0.im_sheaf_morphisms 0 (\\<lambda>V. ring0.subtraction)\n   (\\<lambda>V. ring0.subtraction) (\\<lambda>V. 0) (\\<lambda>V. 0)\n   cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n   cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n   cring0.one_sheaf_spec\n   (\\<lambda>S. \\<lambda>n\\<in>{0}. \\<lambda>x. undefined)\n\ngoal (1 subgoal):\n 1. iso_presheaves_of_rings_axioms cring0.spectrum cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n     cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n     cring0.one_sheaf_spec im0.im_sheaf im0.im_sheaf_morphisms 0\n     im0.add_im_sheaf im0.mult_im_sheaf im0.zero_im_sheaf im0.one_im_sheaf\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "by unfold_locales (auto simp add: im0.zero_im_sheaf_def im0.one_im_sheaf_def im0.add_im_sheaf_def im0.mult_im_sheaf_def)"], ["proof (state)\nthis:\n  iso_presheaves_of_rings_axioms cring0.spectrum cring0.is_zariski_open\n   cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n   cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n   cring0.one_sheaf_spec im0.im_sheaf im0.im_sheaf_morphisms 0\n   im0.add_im_sheaf im0.mult_im_sheaf im0.zero_im_sheaf im0.one_im_sheaf\n   (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  iso_sheaves_of_rings cring0.spectrum cring0.is_zariski_open\n   cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.\\<O>b\n   cring0.add_sheaf_spec cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n   cring0.one_sheaf_spec im0.im_sheaf im0.im_sheaf_morphisms 0\n   im0.add_im_sheaf im0.mult_im_sheaf im0.zero_im_sheaf im0.one_im_sheaf\n   (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  iso_locally_ringed_spaces_axioms {} (\\<lambda>U. U = {}) (\\<lambda>U. {0})\n   (\\<lambda>U V. identity {0}) 0 (\\<lambda>U. ring0.subtraction)\n   (\\<lambda>U. ring0.subtraction) (\\<lambda>U. 0) (\\<lambda>U. 0)\n   cring0.spectrum cring0.is_zariski_open cring0.sheaf_spec\n   cring0.sheaf_spec_morphisms cring0.\\<O>b cring0.add_sheaf_spec\n   cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n   (\\<lambda>\\<pp>\\<in>Spec. undefined)\n   (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n\ngoal (1 subgoal):\n 1. morphism_locally_ringed_spaces_axioms {} (\\<lambda>U. U = {})\n     (\\<lambda>U. {0}) (\\<lambda>U V. identity {0})\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0) cring0.is_zariski_open\n     cring0.sheaf_spec cring0.sheaf_spec_morphisms cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)", "show \"morphism_locally_ringed_spaces_axioms {}\n     (\\<lambda>U. U = {}) (\\<lambda>U. {0}) (\\<lambda>U V. identity {0})\n     (\\<lambda>U x y. 0) (\\<lambda>U x y. 0) (\\<lambda>U. 0) (\\<lambda>U. 0)\n     cring0.is_zariski_open cring0.sheaf_spec\n     cring0.sheaf_spec_morphisms cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec\n     cring0.one_sheaf_spec (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. morphism_locally_ringed_spaces_axioms {} (\\<lambda>U. U = {})\n     (\\<lambda>U. {0::'d}) (\\<lambda>U V. identity {0::'d})\n     (\\<lambda>U x y. 0::'d) (\\<lambda>U x y. 0::'d) (\\<lambda>U. 0::'d)\n     (\\<lambda>U. 0::'d) cring0.is_zariski_open cring0.sheaf_spec\n     cring0.sheaf_spec_morphisms cring0.add_sheaf_spec\n     cring0.mult_sheaf_spec cring0.zero_sheaf_spec cring0.one_sheaf_spec\n     (\\<lambda>\\<pp>\\<in>Spec. undefined)\n     (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0::'d)", "by (meson equals0D morphism_locally_ringed_spaces_axioms.intro)"], ["proof (state)\nthis:\n  morphism_locally_ringed_spaces_axioms {} (\\<lambda>U. U = {})\n   (\\<lambda>U. {0::?'d7}) (\\<lambda>U V. identity {0::?'d7})\n   (\\<lambda>U x y. 0::?'d7) (\\<lambda>U x y. 0::?'d7) (\\<lambda>U. 0::?'d7)\n   (\\<lambda>U. 0::?'d7) cring0.is_zariski_open cring0.sheaf_spec\n   cring0.sheaf_spec_morphisms cring0.add_sheaf_spec cring0.mult_sheaf_spec\n   cring0.zero_sheaf_spec cring0.one_sheaf_spec\n   (\\<lambda>\\<pp>\\<in>Spec. undefined)\n   (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0::?'d7)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  affine_scheme {0} ring0.subtraction ring0.subtraction 0 0 {}\n   (\\<lambda>U. U = {}) (\\<lambda>U. {0}) (\\<lambda>U V. identity {0}) 0\n   (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n   (\\<lambda>U. 0) (\\<lambda>U. 0) (\\<lambda>\\<pp>\\<in>Spec. undefined)\n   (\\<lambda>U. \\<lambda>s\\<in>cring0.sheaf_spec U. 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma empty_scheme_is_scheme:\n  shows \"scheme {0::nat} (\\<lambda>x y. 0) (\\<lambda>x y. 0) 0 0 {} (\\<lambda>U. U={}) (\\<lambda>U. {0}) (\\<lambda>U V. identity{0::nat}) 0 (\\<lambda>U x y. 0) (\\<lambda>U x y. 0) (\\<lambda>U. 0) (\\<lambda>U. 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scheme {0} ring0.subtraction ring0.subtraction 0 0 {}\n     (\\<lambda>U. U = {}) (\\<lambda>U. {0}) (\\<lambda>U V. identity {0}) 0\n     (\\<lambda>U. ring0.subtraction) (\\<lambda>U. ring0.subtraction)\n     (\\<lambda>U. 0) (\\<lambda>U. 0)", "by (metis affine_scheme.affine_scheme_is_scheme empty_scheme_is_affine_scheme)"], ["", "end"]]}