{"file_name": "/home/qj213/afp-2021-10-22/thys/Grothendieck_Schemes/Set_Extras.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Grothendieck_Schemes", "problem_names": ["lemma preimage_of_inter:\n  fixes f::\"'a \\<Rightarrow> 'b\" and X::\"'a set\" and V::\"'b set\" and V'::\"'b set\"\n  shows \"f\\<^sup>\\<inverse> X (V \\<inter> V') = (f\\<^sup>\\<inverse> X V) \\<inter> (f\\<^sup>\\<inverse> X V')\"", "lemma preimage_identity_self: \"identity A \\<^sup>\\<inverse> A B = B \\<inter> A\"", "lemma preimage_vimage_eq: \"(f \\<^sup>\\<inverse> (f -` U') U) \\<inter> X = f\\<^sup>\\<inverse> X (U \\<inter> U')\"", "lemma bijective_map_preimage:\n  assumes \"bijective_map f S T\"\n  shows \"bijective_map (inverse_map f S T) T S\"", "lemma inverse_map_identity [simp]:\n  \"inverse_map (identity S) S S = identity S\"", "lemma comp_maps:\n  assumes \"Set_Theory.map \\<eta> A B\" and \"Set_Theory.map \\<theta> B C\"\n  shows \"Set_Theory.map (\\<theta> \\<circ> \\<eta> \\<down> A) A C\"", "lemma undefined_is_map_on_empty:\n  fixes f:: \"'a set \\<Rightarrow> 'b set\"\n  assumes \"f = (\\<lambda>x. undefined)\"\n  shows \"map f {} {}\"", "lemma restrict_on_source:\n  assumes \"map f S T\"\n  shows \"restrict f S = f\"", "lemma restrict_further:\n  assumes \"map f S T\" and \"U \\<subseteq> S\" and \"V \\<subseteq> U\"\n  shows \"restrict (restrict f U) V = restrict f V\"", "lemma map_eq:\n  assumes \"map f S T\" and \"map g S T\" and \"\\<And>x. x \\<in> S \\<Longrightarrow> f x = g x\"\n  shows \"f = g\"", "lemma image_subset_of_target:\n  assumes \"map f S T\"\n  shows \"f ` S \\<subseteq> T\""], "translations": [["", "lemma preimage_of_inter:\n  fixes f::\"'a \\<Rightarrow> 'b\" and X::\"'a set\" and V::\"'b set\" and V'::\"'b set\"\n  shows \"f\\<^sup>\\<inverse> X (V \\<inter> V') = (f\\<^sup>\\<inverse> X V) \\<inter> (f\\<^sup>\\<inverse> X V')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<^sup>\\<inverse> X (V \\<inter> V') =\n    f \\<^sup>\\<inverse> X V \\<inter> f \\<^sup>\\<inverse> X V'", "by blast"], ["", "lemma preimage_identity_self: \"identity A \\<^sup>\\<inverse> A B = B \\<inter> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. identity A \\<^sup>\\<inverse> A B = B \\<inter> A", "by (simp add: vimage_inter_cong)"], ["", "text \\<open>Simplification actually replaces the RHS by the LHS\\<close>"], ["", "lemma preimage_vimage_eq: \"(f \\<^sup>\\<inverse> (f -` U') U) \\<inter> X = f\\<^sup>\\<inverse> X (U \\<inter> U')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<^sup>\\<inverse> f -` U' U \\<inter> X =\n    f \\<^sup>\\<inverse> X (U \\<inter> U')", "by simp"], ["", "definition inverse_map:: \"('a \\<Rightarrow> 'b) \\<Rightarrow> 'a set \\<Rightarrow> 'b set \\<Rightarrow> ('b \\<Rightarrow> 'a)\"\n  where \"inverse_map f S T \\<equiv> restrict (inv_into S f) T\""], ["", "lemma bijective_map_preimage:\n  assumes \"bijective_map f S T\"\n  shows \"bijective_map (inverse_map f S T) T S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bijective_map (inverse_map f S T) T S", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. inverse_map f S T \\<in> T \\<rightarrow>\\<^sub>E S\n 2. bij_betw (inverse_map f S T) T S", "show \"inverse_map f S T \\<in> T \\<rightarrow>\\<^sub>E S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_map f S T \\<in> T \\<rightarrow>\\<^sub>E S", "by (simp add: assms bij_betw_imp_funcset bij_betw_inv_into bijective.bijective bijective_map.axioms(2) inverse_map_def)"], ["proof (state)\nthis:\n  inverse_map f S T \\<in> T \\<rightarrow>\\<^sub>E S\n\ngoal (1 subgoal):\n 1. bij_betw (inverse_map f S T) T S", "show \"bij_betw (inverse_map f S T) T S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw (inverse_map f S T) T S", "using assms"], ["proof (prove)\nusing this:\n  bijective_map f S T\n\ngoal (1 subgoal):\n 1. bij_betw (inverse_map f S T) T S", "by (simp add: bij_betw_inv_into bijective_def bijective_map_def inverse_map_def)"], ["proof (state)\nthis:\n  bij_betw (inverse_map f S T) T S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inverse_map_identity [simp]:\n  \"inverse_map (identity S) S S = identity S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_map (identity S) S S = identity S", "by (metis Id_compose compose_id_inv_into image_ident image_restrict_eq inv_into_funcset inverse_map_def restrict_extensional)"], ["", "abbreviation composing (\"_ \\<circ> _ \\<down> _\" [60,0,60]59)\n  where \"g \\<circ> f \\<down> D \\<equiv> compose D g f\""], ["", "lemma comp_maps:\n  assumes \"Set_Theory.map \\<eta> A B\" and \"Set_Theory.map \\<theta> B C\"\n  shows \"Set_Theory.map (\\<theta> \\<circ> \\<eta> \\<down> A) A C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<theta> \\<circ> \\<eta> \\<down> A) A C", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. map (\\<theta> \\<circ> \\<eta> \\<down> A) A C", "have \"(\\<theta> \\<circ> \\<eta> \\<down> A) \\<in> A \\<rightarrow>\\<^sub>E C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<theta> \\<circ> \\<eta> \\<down> A \\<in> A \\<rightarrow>\\<^sub>E C", "using assms"], ["proof (prove)\nusing this:\n  map \\<eta> A B\n  map \\<theta> B C\n\ngoal (1 subgoal):\n 1. \\<theta> \\<circ> \\<eta> \\<down> A \\<in> A \\<rightarrow>\\<^sub>E C", "by (metis Int_iff PiE_def compose_def funcset_compose map.graph restrict_extensional)"], ["proof (state)\nthis:\n  \\<theta> \\<circ> \\<eta> \\<down> A \\<in> A \\<rightarrow>\\<^sub>E C\n\ngoal (1 subgoal):\n 1. map (\\<theta> \\<circ> \\<eta> \\<down> A) A C", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<theta> \\<circ> \\<eta> \\<down> A \\<in> A \\<rightarrow>\\<^sub>E C\n\ngoal (1 subgoal):\n 1. map (\\<theta> \\<circ> \\<eta> \\<down> A) A C", "by (simp add: Set_Theory.map_def)"], ["proof (state)\nthis:\n  map (\\<theta> \\<circ> \\<eta> \\<down> A) A C\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma undefined_is_map_on_empty:\n  fixes f:: \"'a set \\<Rightarrow> 'b set\"\n  assumes \"f = (\\<lambda>x. undefined)\"\n  shows \"map f {} {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map f {} {}", "using assms"], ["proof (prove)\nusing this:\n  f = (\\<lambda>x. undefined)\n\ngoal (1 subgoal):\n 1. map f {} {}", "by (simp add: map.intro)"], ["", "lemma restrict_on_source:\n  assumes \"map f S T\"\n  shows \"restrict f S = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict f S = f", "using assms"], ["proof (prove)\nusing this:\n  map f S T\n\ngoal (1 subgoal):\n 1. restrict f S = f", "by (meson PiE_restrict map.graph)"], ["", "lemma restrict_further:\n  assumes \"map f S T\" and \"U \\<subseteq> S\" and \"V \\<subseteq> U\"\n  shows \"restrict (restrict f U) V = restrict f V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict (restrict f U) V = restrict f V", "using assms"], ["proof (prove)\nusing this:\n  map f S T\n  U \\<subseteq> S\n  V \\<subseteq> U\n\ngoal (1 subgoal):\n 1. restrict (restrict f U) V = restrict f V", "by (simp add: inf.absorb_iff2)"], ["", "lemma map_eq:\n  assumes \"map f S T\" and \"map g S T\" and \"\\<And>x. x \\<in> S \\<Longrightarrow> f x = g x\"\n  shows \"f = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = g", "using assms"], ["proof (prove)\nusing this:\n  map f S T\n  map g S T\n  ?x \\<in> S \\<Longrightarrow> f ?x = g ?x\n\ngoal (1 subgoal):\n 1. f = g", "by (metis restrict_ext restrict_on_source)"], ["", "lemma image_subset_of_target:\n  assumes \"map f S T\"\n  shows \"f ` S \\<subseteq> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` S \\<subseteq> T", "using assms"], ["proof (prove)\nusing this:\n  map f S T\n\ngoal (1 subgoal):\n 1. f ` S \\<subseteq> T", "by (meson image_subsetI map.map_closed)"], ["", "end"]]}