{"file_name": "/home/qj213/afp-2021-10-22/thys/Grothendieck_Schemes/Group_Extras.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Grothendieck_Schemes", "problem_names": ["lemma foldSetD_closed: \"(A, z) \\<in> foldSetD D f e \\<Longrightarrow> z \\<in> D\"", "lemma Diff1_foldSetD:\n  \"\\<lbrakk>(A - {x}, y) \\<in> foldSetD D f e; x \\<in> A; f x y \\<in> D\\<rbrakk> \\<Longrightarrow>\n   (A, f x y) \\<in> foldSetD D f e\"", "lemma foldSetD_imp_finite [simp]: \"(A, x) \\<in> foldSetD D f e \\<Longrightarrow> finite A\"", "lemma finite_imp_foldSetD:\n  \"\\<lbrakk>finite A; e \\<in> D; \\<And>x y. \\<lbrakk>x \\<in> A; y \\<in> D\\<rbrakk> \\<Longrightarrow> f x y \\<in> D\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x. (A, x) \\<in> foldSetD D f e\"", "lemma foldSetD_backwards:\n  assumes \"A \\<noteq> {}\" \"(A, z) \\<in> foldSetD D f e\"\n  shows \"\\<exists>x y. x \\<in> A \\<and> (A - { x }, y) \\<in> foldSetD D f e \\<and> z = f x y\"", "lemma (in LCD) foldSetD_closed [dest]: \"(A, z) \\<in> foldSetD D f e \\<Longrightarrow> z \\<in> D\"", "lemma (in LCD) Diff1_foldSetD:\n  \"\\<lbrakk>(A - {x}, y) \\<in> foldSetD D f e; x \\<in> A; A \\<subseteq> B\\<rbrakk> \\<Longrightarrow>\n  (A, f x y) \\<in> foldSetD D f e\"", "lemma (in LCD) finite_imp_foldSetD:\n  \"\\<lbrakk>finite A; A \\<subseteq> B; e \\<in> D\\<rbrakk> \\<Longrightarrow> \\<exists>x. (A, x) \\<in> foldSetD D f e\"", "lemma (in LCD) foldSetD_determ_aux:\n  assumes \"e \\<in> D\" and A: \"card A < n\" \"A \\<subseteq> B\" \"(A, x) \\<in> foldSetD D f e\" \"(A, y) \\<in> foldSetD D f e\"\n  shows \"y = x\"", "lemma (in LCD) foldSetD_determ:\n  \"\\<lbrakk>(A, x) \\<in> foldSetD D f e; (A, y) \\<in> foldSetD D f e; e \\<in> D; A \\<subseteq> B\\<rbrakk>\n  \\<Longrightarrow> y = x\"", "lemma (in LCD) foldD_equality:\n  \"\\<lbrakk>(A, y) \\<in> foldSetD D f e; e \\<in> D; A \\<subseteq> B\\<rbrakk> \\<Longrightarrow> foldD D f e A = y\"", "lemma foldD_empty [simp]:\n  \"e \\<in> D \\<Longrightarrow> foldD D f e {} = e\"", "lemma (in LCD) foldD_insert_aux:\n  \"\\<lbrakk>x \\<notin> A; x \\<in> B; e \\<in> D; A \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> ((insert x A, v) \\<in> foldSetD D f e) \\<longleftrightarrow> (\\<exists>y. (A, y) \\<in> foldSetD D f e \\<and> v = f x y)\"", "lemma (in LCD) foldD_insert:\n  assumes \"finite A\" \"x \\<notin> A\" \"x \\<in> B\" \"e \\<in> D\" \"A \\<subseteq> B\"\n  shows \"foldD D f e (insert x A) = f x (foldD D f e A)\"", "lemma (in LCD) foldD_closed [simp]:\n  \"\\<lbrakk>finite A; e \\<in> D; A \\<subseteq> B\\<rbrakk> \\<Longrightarrow> foldD D f e A \\<in> D\"", "lemma (in LCD) foldD_commute:\n  \"\\<lbrakk>finite A; x \\<in> B; e \\<in> D; A \\<subseteq> B\\<rbrakk> \\<Longrightarrow>\n   f x (foldD D f e A) = foldD D f (f x e) A\"", "lemma Int_mono2:\n  \"\\<lbrakk>A \\<subseteq> C; B \\<subseteq> C\\<rbrakk> \\<Longrightarrow> A Int B \\<subseteq> C\"", "lemma (in LCD) foldD_nest_Un_Int:\n  \"\\<lbrakk>finite A; finite C; e \\<in> D; A \\<subseteq> B; C \\<subseteq> B\\<rbrakk> \\<Longrightarrow>\n   foldD D f (foldD D f e C) A = foldD D f (foldD D f e (A Int C)) (A Un C)\"", "lemma (in LCD) foldD_nest_Un_disjoint:\n  \"\\<lbrakk>finite A; finite B; A Int B = {}; e \\<in> D; A \\<subseteq> B; C \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> foldD D f e (A Un B) = foldD D f (foldD D f e B) A\"", "lemma comp_monoid_morphisms:\n  assumes \"monoid_homomorphism \\<eta> A multA oneA B multB oneB\" and\n          \"monoid_homomorphism \\<theta> B multB oneB C multC oneC\"\nshows \"monoid_homomorphism (\\<theta> \\<circ> \\<eta> \\<down> A) A multA oneA C multC oneC\"", "lemma (in ACeD) left_commute:\n  \"\\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D\\<rbrakk> \\<Longrightarrow> x \\<cdot> (y \\<cdot> z) = y \\<cdot> (x \\<cdot> z)\"", "lemmas (in ACeD) AC = assoc commute left_commute", "lemma (in ACeD) left_ident [simp]: \"x \\<in> D \\<Longrightarrow> e \\<cdot> x = x\"", "lemma (in ACeD) foldD_Un_Int:\n  \"\\<lbrakk>finite A; finite B; A \\<subseteq> D; B \\<subseteq> D\\<rbrakk> \\<Longrightarrow>\n    foldD D f e A \\<cdot> foldD D f e B =\n    foldD D f e (A Un B) \\<cdot> foldD D f e (A Int B)\"", "lemma (in ACeD) foldD_Un_disjoint:\n  \"\\<lbrakk>finite A; finite B; A Int B = {}; A \\<subseteq> D; B \\<subseteq> D\\<rbrakk> \\<Longrightarrow>\n    foldD D f e (A Un B) = foldD D f e A \\<cdot> foldD D f e B\"", "lemma comp_group_morphisms:\n  assumes \"group_homomorphism \\<eta> A multA oneA B multB oneB\" and\n\"group_homomorphism \\<theta> B multB oneB C multC oneC\"\nshows \"group_homomorphism (\\<theta> \\<circ> \\<eta> \\<down> A) A multA oneA C multC oneC\"", "lemma generate_into_G: \"a \\<in> generate (G \\<inter> H) \\<Longrightarrow> a \\<in> G\"", "lemma inverse_in_subgroup_generated: \"a \\<in> subgroup_generated H \\<Longrightarrow> inverse a \\<in> subgroup_generated H\"", "lemma subgroup_generated_is_monoid:\n  fixes H\n  shows \"Group_Theory.monoid (subgroup_generated H) (\\<cdot>) \\<one>\"", "lemma subgroup_generated_is_subset:\n  fixes H\n  shows \"subgroup_generated H \\<subseteq> G\"", "lemma subgroup_generated_is_subgroup:\n  fixes H\n  shows \"subgroup (subgroup_generated H) G (\\<cdot>) \\<one>\""], "translations": [["", "lemma foldSetD_closed: \"(A, z) \\<in> foldSetD D f e \\<Longrightarrow> z \\<in> D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A, z) \\<in> foldSetD D f e \\<Longrightarrow> z \\<in> D", "by (erule foldSetD.cases) auto"], ["", "lemma Diff1_foldSetD:\n  \"\\<lbrakk>(A - {x}, y) \\<in> foldSetD D f e; x \\<in> A; f x y \\<in> D\\<rbrakk> \\<Longrightarrow>\n   (A, f x y) \\<in> foldSetD D f e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(A\\<setminus>{x}, y) \\<in> foldSetD D f e; x \\<in> A;\n     f x y \\<in> D\\<rbrakk>\n    \\<Longrightarrow> (A, f x y) \\<in> foldSetD D f e", "by (metis Diff_insert_absorb foldSetD.insertI mk_disjoint_insert)"], ["", "lemma foldSetD_imp_finite [simp]: \"(A, x) \\<in> foldSetD D f e \\<Longrightarrow> finite A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A, x) \\<in> foldSetD D f e \\<Longrightarrow> finite A", "by (induct set: foldSetD) auto"], ["", "lemma finite_imp_foldSetD:\n  \"\\<lbrakk>finite A; e \\<in> D; \\<And>x y. \\<lbrakk>x \\<in> A; y \\<in> D\\<rbrakk> \\<Longrightarrow> f x y \\<in> D\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x. (A, x) \\<in> foldSetD D f e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; e \\<in> D;\n     \\<And>x y.\n        \\<lbrakk>x \\<in> A; y \\<in> D\\<rbrakk>\n        \\<Longrightarrow> f x y \\<in> D\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x. (A, x) \\<in> foldSetD D f e", "proof (induct set: finite)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>e \\<in> D;\n     \\<And>x y.\n        \\<lbrakk>x \\<in> {}; y \\<in> D\\<rbrakk>\n        \\<Longrightarrow> f x y \\<in> D\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x. ({}, x) \\<in> foldSetD D f e\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>e \\<in> D;\n         \\<And>x y.\n            \\<lbrakk>x \\<in> F; y \\<in> D\\<rbrakk>\n            \\<Longrightarrow> f x y \\<in> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D f e;\n        e \\<in> D;\n        \\<And>xa y.\n           \\<lbrakk>xa \\<in> insert x F; y \\<in> D\\<rbrakk>\n           \\<Longrightarrow> f xa y \\<in> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa. (insert x F, xa) \\<in> foldSetD D f e", "case empty"], ["proof (state)\nthis:\n  e \\<in> D\n  \\<lbrakk>?x \\<in> {}; ?y \\<in> D\\<rbrakk>\n  \\<Longrightarrow> f ?x ?y \\<in> D\n\ngoal (2 subgoals):\n 1. \\<lbrakk>e \\<in> D;\n     \\<And>x y.\n        \\<lbrakk>x \\<in> {}; y \\<in> D\\<rbrakk>\n        \\<Longrightarrow> f x y \\<in> D\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x. ({}, x) \\<in> foldSetD D f e\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>e \\<in> D;\n         \\<And>x y.\n            \\<lbrakk>x \\<in> F; y \\<in> D\\<rbrakk>\n            \\<Longrightarrow> f x y \\<in> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D f e;\n        e \\<in> D;\n        \\<And>xa y.\n           \\<lbrakk>xa \\<in> insert x F; y \\<in> D\\<rbrakk>\n           \\<Longrightarrow> f xa y \\<in> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa. (insert x F, xa) \\<in> foldSetD D f e", "then"], ["proof (chain)\npicking this:\n  e \\<in> D\n  \\<lbrakk>?x \\<in> {}; ?y \\<in> D\\<rbrakk>\n  \\<Longrightarrow> f ?x ?y \\<in> D", "show ?case"], ["proof (prove)\nusing this:\n  e \\<in> D\n  \\<lbrakk>?x \\<in> {}; ?y \\<in> D\\<rbrakk>\n  \\<Longrightarrow> f ?x ?y \\<in> D\n\ngoal (1 subgoal):\n 1. \\<exists>x. ({}, x) \\<in> foldSetD D f e", "by auto"], ["proof (state)\nthis:\n  \\<exists>x. ({}, x) \\<in> foldSetD D f e\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>e \\<in> D;\n         \\<And>x y.\n            \\<lbrakk>x \\<in> F; y \\<in> D\\<rbrakk>\n            \\<Longrightarrow> f x y \\<in> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D f e;\n        e \\<in> D;\n        \\<And>xa y.\n           \\<lbrakk>xa \\<in> insert x F; y \\<in> D\\<rbrakk>\n           \\<Longrightarrow> f xa y \\<in> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa. (insert x F, xa) \\<in> foldSetD D f e", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>e \\<in> D;\n         \\<And>x y.\n            \\<lbrakk>x \\<in> F; y \\<in> D\\<rbrakk>\n            \\<Longrightarrow> f x y \\<in> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D f e;\n        e \\<in> D;\n        \\<And>xa y.\n           \\<lbrakk>xa \\<in> insert x F; y \\<in> D\\<rbrakk>\n           \\<Longrightarrow> f xa y \\<in> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa. (insert x F, xa) \\<in> foldSetD D f e", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>e \\<in> D;\n   \\<And>x y.\n      \\<lbrakk>x \\<in> F; y \\<in> D\\<rbrakk>\n      \\<Longrightarrow> f x y \\<in> D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D f e\n  e \\<in> D\n  \\<lbrakk>?x \\<in> insert x F; ?y \\<in> D\\<rbrakk>\n  \\<Longrightarrow> f ?x ?y \\<in> D\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>e \\<in> D;\n         \\<And>x y.\n            \\<lbrakk>x \\<in> F; y \\<in> D\\<rbrakk>\n            \\<Longrightarrow> f x y \\<in> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D f e;\n        e \\<in> D;\n        \\<And>xa y.\n           \\<lbrakk>xa \\<in> insert x F; y \\<in> D\\<rbrakk>\n           \\<Longrightarrow> f xa y \\<in> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa. (insert x F, xa) \\<in> foldSetD D f e", "then"], ["proof (chain)\npicking this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>e \\<in> D;\n   \\<And>x y.\n      \\<lbrakk>x \\<in> F; y \\<in> D\\<rbrakk>\n      \\<Longrightarrow> f x y \\<in> D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D f e\n  e \\<in> D\n  \\<lbrakk>?x \\<in> insert x F; ?y \\<in> D\\<rbrakk>\n  \\<Longrightarrow> f ?x ?y \\<in> D", "obtain y where y: \"(F, y) \\<in> foldSetD D f e\""], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>e \\<in> D;\n   \\<And>x y.\n      \\<lbrakk>x \\<in> F; y \\<in> D\\<rbrakk>\n      \\<Longrightarrow> f x y \\<in> D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D f e\n  e \\<in> D\n  \\<lbrakk>?x \\<in> insert x F; ?y \\<in> D\\<rbrakk>\n  \\<Longrightarrow> f ?x ?y \\<in> D\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        (F, y) \\<in> foldSetD D f e \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (F, y) \\<in> foldSetD D f e\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>e \\<in> D;\n         \\<And>x y.\n            \\<lbrakk>x \\<in> F; y \\<in> D\\<rbrakk>\n            \\<Longrightarrow> f x y \\<in> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D f e;\n        e \\<in> D;\n        \\<And>xa y.\n           \\<lbrakk>xa \\<in> insert x F; y \\<in> D\\<rbrakk>\n           \\<Longrightarrow> f xa y \\<in> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa. (insert x F, xa) \\<in> foldSetD D f e", "with insert"], ["proof (chain)\npicking this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>e \\<in> D;\n   \\<And>x y.\n      \\<lbrakk>x \\<in> F; y \\<in> D\\<rbrakk>\n      \\<Longrightarrow> f x y \\<in> D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D f e\n  e \\<in> D\n  \\<lbrakk>?x \\<in> insert x F; ?y \\<in> D\\<rbrakk>\n  \\<Longrightarrow> f ?x ?y \\<in> D\n  (F, y) \\<in> foldSetD D f e", "have \"y \\<in> D\""], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>e \\<in> D;\n   \\<And>x y.\n      \\<lbrakk>x \\<in> F; y \\<in> D\\<rbrakk>\n      \\<Longrightarrow> f x y \\<in> D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D f e\n  e \\<in> D\n  \\<lbrakk>?x \\<in> insert x F; ?y \\<in> D\\<rbrakk>\n  \\<Longrightarrow> f ?x ?y \\<in> D\n  (F, y) \\<in> foldSetD D f e\n\ngoal (1 subgoal):\n 1. y \\<in> D", "by (auto dest: foldSetD_closed)"], ["proof (state)\nthis:\n  y \\<in> D\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>e \\<in> D;\n         \\<And>x y.\n            \\<lbrakk>x \\<in> F; y \\<in> D\\<rbrakk>\n            \\<Longrightarrow> f x y \\<in> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D f e;\n        e \\<in> D;\n        \\<And>xa y.\n           \\<lbrakk>xa \\<in> insert x F; y \\<in> D\\<rbrakk>\n           \\<Longrightarrow> f xa y \\<in> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa. (insert x F, xa) \\<in> foldSetD D f e", "with y and insert"], ["proof (chain)\npicking this:\n  (F, y) \\<in> foldSetD D f e\n  finite F\n  x \\<notin> F\n  \\<lbrakk>e \\<in> D;\n   \\<And>x y.\n      \\<lbrakk>x \\<in> F; y \\<in> D\\<rbrakk>\n      \\<Longrightarrow> f x y \\<in> D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D f e\n  e \\<in> D\n  \\<lbrakk>?x \\<in> insert x F; ?y \\<in> D\\<rbrakk>\n  \\<Longrightarrow> f ?x ?y \\<in> D\n  y \\<in> D", "have \"(insert x F, f x y) \\<in> foldSetD D f e\""], ["proof (prove)\nusing this:\n  (F, y) \\<in> foldSetD D f e\n  finite F\n  x \\<notin> F\n  \\<lbrakk>e \\<in> D;\n   \\<And>x y.\n      \\<lbrakk>x \\<in> F; y \\<in> D\\<rbrakk>\n      \\<Longrightarrow> f x y \\<in> D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D f e\n  e \\<in> D\n  \\<lbrakk>?x \\<in> insert x F; ?y \\<in> D\\<rbrakk>\n  \\<Longrightarrow> f ?x ?y \\<in> D\n  y \\<in> D\n\ngoal (1 subgoal):\n 1. (insert x F, f x y) \\<in> foldSetD D f e", "by (intro foldSetD.intros) auto"], ["proof (state)\nthis:\n  (insert x F, f x y) \\<in> foldSetD D f e\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>e \\<in> D;\n         \\<And>x y.\n            \\<lbrakk>x \\<in> F; y \\<in> D\\<rbrakk>\n            \\<Longrightarrow> f x y \\<in> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D f e;\n        e \\<in> D;\n        \\<And>xa y.\n           \\<lbrakk>xa \\<in> insert x F; y \\<in> D\\<rbrakk>\n           \\<Longrightarrow> f xa y \\<in> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa. (insert x F, xa) \\<in> foldSetD D f e", "then"], ["proof (chain)\npicking this:\n  (insert x F, f x y) \\<in> foldSetD D f e", "show ?case"], ["proof (prove)\nusing this:\n  (insert x F, f x y) \\<in> foldSetD D f e\n\ngoal (1 subgoal):\n 1. \\<exists>xa. (insert x F, xa) \\<in> foldSetD D f e", ".."], ["proof (state)\nthis:\n  \\<exists>xa. (insert x F, xa) \\<in> foldSetD D f e\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma foldSetD_backwards:\n  assumes \"A \\<noteq> {}\" \"(A, z) \\<in> foldSetD D f e\"\n  shows \"\\<exists>x y. x \\<in> A \\<and> (A - { x }, y) \\<in> foldSetD D f e \\<and> z = f x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x y.\n       x \\<in> A \\<and>\n       (A\\<setminus>{x}, y) \\<in> foldSetD D f e \\<and> z = f x y", "using assms(2)"], ["proof (prove)\nusing this:\n  (A, z) \\<in> foldSetD D f e\n\ngoal (1 subgoal):\n 1. \\<exists>x y.\n       x \\<in> A \\<and>\n       (A\\<setminus>{x}, y) \\<in> foldSetD D f e \\<and> z = f x y", "by (cases) (simp add: assms(1), metis Diff_insert_absorb insertI1)"], ["", "subsection \\<open>Left-Commutative Operations\\<close>"], ["", "locale LCD =\n  fixes B :: \"'b set\"\n  and D :: \"'a set\"\n  and f :: \"'b \\<Rightarrow> 'a \\<Rightarrow> 'a\"    (infixl \"\\<cdot>\" 70)\n  assumes left_commute:\n    \"\\<lbrakk>x \\<in> B; y \\<in> B; z \\<in> D\\<rbrakk> \\<Longrightarrow> x \\<cdot> (y \\<cdot> z) = y \\<cdot> (x \\<cdot> z)\"\n  and f_closed [simp, intro!]: \"!!x y. \\<lbrakk>x \\<in> B; y \\<in> D\\<rbrakk> \\<Longrightarrow> f x y \\<in> D\""], ["", "lemma (in LCD) foldSetD_closed [dest]: \"(A, z) \\<in> foldSetD D f e \\<Longrightarrow> z \\<in> D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A, z) \\<in> foldSetD D (\\<cdot>) e \\<Longrightarrow> z \\<in> D", "by (erule foldSetD.cases) auto"], ["", "lemma (in LCD) Diff1_foldSetD:\n  \"\\<lbrakk>(A - {x}, y) \\<in> foldSetD D f e; x \\<in> A; A \\<subseteq> B\\<rbrakk> \\<Longrightarrow>\n  (A, f x y) \\<in> foldSetD D f e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(A\\<setminus>{x}, y) \\<in> foldSetD D (\\<cdot>) e; x \\<in> A;\n     A \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> (A, x \\<cdot> y) \\<in> foldSetD D (\\<cdot>) e", "by (meson Diff1_foldSetD f_closed local.foldSetD_closed subsetCE)"], ["", "lemma (in LCD) finite_imp_foldSetD:\n  \"\\<lbrakk>finite A; A \\<subseteq> B; e \\<in> D\\<rbrakk> \\<Longrightarrow> \\<exists>x. (A, x) \\<in> foldSetD D f e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<subseteq> B; e \\<in> D\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x. (A, x) \\<in> foldSetD D (\\<cdot>) e", "proof (induct set: finite)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>{} \\<subseteq> B; e \\<in> D\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x. ({}, x) \\<in> foldSetD D (\\<cdot>) e\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>F \\<subseteq> B; e \\<in> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D (\\<cdot>) e;\n        insert x F \\<subseteq> B; e \\<in> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (insert x F, xa) \\<in> foldSetD D (\\<cdot>) e", "case empty"], ["proof (state)\nthis:\n  {} \\<subseteq> B\n  e \\<in> D\n\ngoal (2 subgoals):\n 1. \\<lbrakk>{} \\<subseteq> B; e \\<in> D\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x. ({}, x) \\<in> foldSetD D (\\<cdot>) e\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>F \\<subseteq> B; e \\<in> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D (\\<cdot>) e;\n        insert x F \\<subseteq> B; e \\<in> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (insert x F, xa) \\<in> foldSetD D (\\<cdot>) e", "then"], ["proof (chain)\npicking this:\n  {} \\<subseteq> B\n  e \\<in> D", "show ?case"], ["proof (prove)\nusing this:\n  {} \\<subseteq> B\n  e \\<in> D\n\ngoal (1 subgoal):\n 1. \\<exists>x. ({}, x) \\<in> foldSetD D (\\<cdot>) e", "by auto"], ["proof (state)\nthis:\n  \\<exists>x. ({}, x) \\<in> foldSetD D (\\<cdot>) e\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>F \\<subseteq> B; e \\<in> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D (\\<cdot>) e;\n        insert x F \\<subseteq> B; e \\<in> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (insert x F, xa) \\<in> foldSetD D (\\<cdot>) e", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>F \\<subseteq> B; e \\<in> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D (\\<cdot>) e;\n        insert x F \\<subseteq> B; e \\<in> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (insert x F, xa) \\<in> foldSetD D (\\<cdot>) e", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>F \\<subseteq> B; e \\<in> D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D (\\<cdot>) e\n  insert x F \\<subseteq> B\n  e \\<in> D\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>F \\<subseteq> B; e \\<in> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D (\\<cdot>) e;\n        insert x F \\<subseteq> B; e \\<in> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (insert x F, xa) \\<in> foldSetD D (\\<cdot>) e", "then"], ["proof (chain)\npicking this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>F \\<subseteq> B; e \\<in> D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D (\\<cdot>) e\n  insert x F \\<subseteq> B\n  e \\<in> D", "obtain y where y: \"(F, y) \\<in> foldSetD D f e\""], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>F \\<subseteq> B; e \\<in> D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D (\\<cdot>) e\n  insert x F \\<subseteq> B\n  e \\<in> D\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        (F, y) \\<in> foldSetD D (\\<cdot>) e \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (F, y) \\<in> foldSetD D (\\<cdot>) e\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>F \\<subseteq> B; e \\<in> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D (\\<cdot>) e;\n        insert x F \\<subseteq> B; e \\<in> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (insert x F, xa) \\<in> foldSetD D (\\<cdot>) e", "with insert"], ["proof (chain)\npicking this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>F \\<subseteq> B; e \\<in> D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D (\\<cdot>) e\n  insert x F \\<subseteq> B\n  e \\<in> D\n  (F, y) \\<in> foldSetD D (\\<cdot>) e", "have \"y \\<in> D\""], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>F \\<subseteq> B; e \\<in> D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D (\\<cdot>) e\n  insert x F \\<subseteq> B\n  e \\<in> D\n  (F, y) \\<in> foldSetD D (\\<cdot>) e\n\ngoal (1 subgoal):\n 1. y \\<in> D", "by auto"], ["proof (state)\nthis:\n  y \\<in> D\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>F \\<subseteq> B; e \\<in> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D (\\<cdot>) e;\n        insert x F \\<subseteq> B; e \\<in> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (insert x F, xa) \\<in> foldSetD D (\\<cdot>) e", "with y and insert"], ["proof (chain)\npicking this:\n  (F, y) \\<in> foldSetD D (\\<cdot>) e\n  finite F\n  x \\<notin> F\n  \\<lbrakk>F \\<subseteq> B; e \\<in> D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D (\\<cdot>) e\n  insert x F \\<subseteq> B\n  e \\<in> D\n  y \\<in> D", "have \"(insert x F, f x y) \\<in> foldSetD D f e\""], ["proof (prove)\nusing this:\n  (F, y) \\<in> foldSetD D (\\<cdot>) e\n  finite F\n  x \\<notin> F\n  \\<lbrakk>F \\<subseteq> B; e \\<in> D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D (\\<cdot>) e\n  insert x F \\<subseteq> B\n  e \\<in> D\n  y \\<in> D\n\ngoal (1 subgoal):\n 1. (insert x F, x \\<cdot> y) \\<in> foldSetD D (\\<cdot>) e", "by (intro foldSetD.intros) auto"], ["proof (state)\nthis:\n  (insert x F, x \\<cdot> y) \\<in> foldSetD D (\\<cdot>) e\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>F \\<subseteq> B; e \\<in> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>x. (F, x) \\<in> foldSetD D (\\<cdot>) e;\n        insert x F \\<subseteq> B; e \\<in> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (insert x F, xa) \\<in> foldSetD D (\\<cdot>) e", "then"], ["proof (chain)\npicking this:\n  (insert x F, x \\<cdot> y) \\<in> foldSetD D (\\<cdot>) e", "show ?case"], ["proof (prove)\nusing this:\n  (insert x F, x \\<cdot> y) \\<in> foldSetD D (\\<cdot>) e\n\ngoal (1 subgoal):\n 1. \\<exists>xa. (insert x F, xa) \\<in> foldSetD D (\\<cdot>) e", ".."], ["proof (state)\nthis:\n  \\<exists>xa. (insert x F, xa) \\<in> foldSetD D (\\<cdot>) e\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in LCD) foldSetD_determ_aux:\n  assumes \"e \\<in> D\" and A: \"card A < n\" \"A \\<subseteq> B\" \"(A, x) \\<in> foldSetD D f e\" \"(A, y) \\<in> foldSetD D f e\"\n  shows \"y = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y = x", "using A"], ["proof (prove)\nusing this:\n  card A < n\n  A \\<subseteq> B\n  (A, x) \\<in> foldSetD D (\\<cdot>) e\n  (A, y) \\<in> foldSetD D (\\<cdot>) e\n\ngoal (1 subgoal):\n 1. y = x", "proof (induction n arbitrary: A x y)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A x y.\n       \\<lbrakk>card A < 0; A \\<subseteq> B;\n        (A, x) \\<in> foldSetD D (\\<cdot>) e;\n        (A, y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n       \\<Longrightarrow> y = x\n 2. \\<And>n A x y.\n       \\<lbrakk>\\<And>A x y.\n                   \\<lbrakk>card A < n; A \\<subseteq> B;\n                    (A, x) \\<in> foldSetD D (\\<cdot>) e;\n                    (A, y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n                   \\<Longrightarrow> y = x;\n        card A < Suc n; A \\<subseteq> B;\n        (A, x) \\<in> foldSetD D (\\<cdot>) e;\n        (A, y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n       \\<Longrightarrow> y = x", "case 0"], ["proof (state)\nthis:\n  card A < 0\n  A \\<subseteq> B\n  (A, x) \\<in> foldSetD D (\\<cdot>) e\n  (A, y) \\<in> foldSetD D (\\<cdot>) e\n\ngoal (2 subgoals):\n 1. \\<And>A x y.\n       \\<lbrakk>card A < 0; A \\<subseteq> B;\n        (A, x) \\<in> foldSetD D (\\<cdot>) e;\n        (A, y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n       \\<Longrightarrow> y = x\n 2. \\<And>n A x y.\n       \\<lbrakk>\\<And>A x y.\n                   \\<lbrakk>card A < n; A \\<subseteq> B;\n                    (A, x) \\<in> foldSetD D (\\<cdot>) e;\n                    (A, y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n                   \\<Longrightarrow> y = x;\n        card A < Suc n; A \\<subseteq> B;\n        (A, x) \\<in> foldSetD D (\\<cdot>) e;\n        (A, y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n       \\<Longrightarrow> y = x", "then"], ["proof (chain)\npicking this:\n  card A < 0\n  A \\<subseteq> B\n  (A, x) \\<in> foldSetD D (\\<cdot>) e\n  (A, y) \\<in> foldSetD D (\\<cdot>) e", "show ?case"], ["proof (prove)\nusing this:\n  card A < 0\n  A \\<subseteq> B\n  (A, x) \\<in> foldSetD D (\\<cdot>) e\n  (A, y) \\<in> foldSetD D (\\<cdot>) e\n\ngoal (1 subgoal):\n 1. y = x", "by auto"], ["proof (state)\nthis:\n  y = x\n\ngoal (1 subgoal):\n 1. \\<And>n A x y.\n       \\<lbrakk>\\<And>A x y.\n                   \\<lbrakk>card A < n; A \\<subseteq> B;\n                    (A, x) \\<in> foldSetD D (\\<cdot>) e;\n                    (A, y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n                   \\<Longrightarrow> y = x;\n        card A < Suc n; A \\<subseteq> B;\n        (A, x) \\<in> foldSetD D (\\<cdot>) e;\n        (A, y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n       \\<Longrightarrow> y = x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n A x y.\n       \\<lbrakk>\\<And>A x y.\n                   \\<lbrakk>card A < n; A \\<subseteq> B;\n                    (A, x) \\<in> foldSetD D (\\<cdot>) e;\n                    (A, y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n                   \\<Longrightarrow> y = x;\n        card A < Suc n; A \\<subseteq> B;\n        (A, x) \\<in> foldSetD D (\\<cdot>) e;\n        (A, y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n       \\<Longrightarrow> y = x", "case (Suc n)"], ["proof (state)\nthis:\n  \\<lbrakk>card ?A < n; ?A \\<subseteq> B;\n   (?A, ?x) \\<in> foldSetD D (\\<cdot>) e;\n   (?A, ?y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n  \\<Longrightarrow> ?y = ?x\n  card A < Suc n\n  A \\<subseteq> B\n  (A, x) \\<in> foldSetD D (\\<cdot>) e\n  (A, y) \\<in> foldSetD D (\\<cdot>) e\n\ngoal (1 subgoal):\n 1. \\<And>n A x y.\n       \\<lbrakk>\\<And>A x y.\n                   \\<lbrakk>card A < n; A \\<subseteq> B;\n                    (A, x) \\<in> foldSetD D (\\<cdot>) e;\n                    (A, y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n                   \\<Longrightarrow> y = x;\n        card A < Suc n; A \\<subseteq> B;\n        (A, x) \\<in> foldSetD D (\\<cdot>) e;\n        (A, y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n       \\<Longrightarrow> y = x", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>card ?A < n; ?A \\<subseteq> B;\n   (?A, ?x) \\<in> foldSetD D (\\<cdot>) e;\n   (?A, ?y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n  \\<Longrightarrow> ?y = ?x\n  card A < Suc n\n  A \\<subseteq> B\n  (A, x) \\<in> foldSetD D (\\<cdot>) e\n  (A, y) \\<in> foldSetD D (\\<cdot>) e", "consider \"card A = n\" | \"card A < n\""], ["proof (prove)\nusing this:\n  \\<lbrakk>card ?A < n; ?A \\<subseteq> B;\n   (?A, ?x) \\<in> foldSetD D (\\<cdot>) e;\n   (?A, ?y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n  \\<Longrightarrow> ?y = ?x\n  card A < Suc n\n  A \\<subseteq> B\n  (A, x) \\<in> foldSetD D (\\<cdot>) e\n  (A, y) \\<in> foldSetD D (\\<cdot>) e\n\ngoal (1 subgoal):\n 1. \\<lbrakk>card A = n \\<Longrightarrow> thesis;\n     card A < n \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by linarith"], ["proof (state)\nthis:\n  \\<lbrakk>card A = n \\<Longrightarrow> ?thesis;\n   card A < n \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<And>n A x y.\n       \\<lbrakk>\\<And>A x y.\n                   \\<lbrakk>card A < n; A \\<subseteq> B;\n                    (A, x) \\<in> foldSetD D (\\<cdot>) e;\n                    (A, y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n                   \\<Longrightarrow> y = x;\n        card A < Suc n; A \\<subseteq> B;\n        (A, x) \\<in> foldSetD D (\\<cdot>) e;\n        (A, y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n       \\<Longrightarrow> y = x", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>card A = n \\<Longrightarrow> ?thesis;\n   card A < n \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>card A = n \\<Longrightarrow> ?thesis;\n   card A < n \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. y = x", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. card A = n \\<Longrightarrow> y = x\n 2. card A < n \\<Longrightarrow> y = x", "case 1"], ["proof (state)\nthis:\n  card A = n\n\ngoal (2 subgoals):\n 1. card A = n \\<Longrightarrow> y = x\n 2. card A < n \\<Longrightarrow> y = x", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. y = x", "using foldSetD.cases [OF \\<open>(A,x) \\<in> foldSetD D (\\<cdot>) e\\<close>]"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<lbrakk>A = {}; x = e; e \\<in> D\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<And>x A y.\n      \\<lbrakk>A = insert x A; x = x \\<cdot> y; x \\<notin> A;\n       x \\<cdot> y \\<in> D; (A, y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. y = x", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>A = {}; x = e; e \\<in> D\\<rbrakk> \\<Longrightarrow> y = x\n 2. \\<And>x A y.\n       \\<lbrakk>A = insert x A; x = x \\<cdot> y; x \\<notin> A;\n        x \\<cdot> y \\<in> D; (A, y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n       \\<Longrightarrow> y = x", "case 1"], ["proof (state)\nthis:\n  A = {}\n  x = e\n  e \\<in> D\n\ngoal (2 subgoals):\n 1. \\<lbrakk>A = {}; x = e; e \\<in> D\\<rbrakk> \\<Longrightarrow> y = x\n 2. \\<And>x A y.\n       \\<lbrakk>A = insert x A; x = x \\<cdot> y; x \\<notin> A;\n        x \\<cdot> y \\<in> D; (A, y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n       \\<Longrightarrow> y = x", "then"], ["proof (chain)\npicking this:\n  A = {}\n  x = e\n  e \\<in> D", "show ?thesis"], ["proof (prove)\nusing this:\n  A = {}\n  x = e\n  e \\<in> D\n\ngoal (1 subgoal):\n 1. y = x", "using \\<open>(A,y) \\<in> foldSetD D (\\<cdot>) e\\<close>"], ["proof (prove)\nusing this:\n  A = {}\n  x = e\n  e \\<in> D\n  (A, y) \\<in> foldSetD D (\\<cdot>) e\n\ngoal (1 subgoal):\n 1. y = x", "by auto"], ["proof (state)\nthis:\n  y = x\n\ngoal (1 subgoal):\n 1. \\<And>x A y.\n       \\<lbrakk>A = insert x A; x = x \\<cdot> y; x \\<notin> A;\n        x \\<cdot> y \\<in> D; (A, y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n       \\<Longrightarrow> y = x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x A y.\n       \\<lbrakk>A = insert x A; x = x \\<cdot> y; x \\<notin> A;\n        x \\<cdot> y \\<in> D; (A, y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n       \\<Longrightarrow> y = x", "case (2 x' A' y')"], ["proof (state)\nthis:\n  A = insert x' A'\n  x = x' \\<cdot> y'\n  x' \\<notin> A'\n  x' \\<cdot> y' \\<in> D\n  (A', y') \\<in> foldSetD D (\\<cdot>) e\n\ngoal (1 subgoal):\n 1. \\<And>x A y.\n       \\<lbrakk>A = insert x A; x = x \\<cdot> y; x \\<notin> A;\n        x \\<cdot> y \\<in> D; (A, y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n       \\<Longrightarrow> y = x", "note A' = this"], ["proof (state)\nthis:\n  A = insert x' A'\n  x = x' \\<cdot> y'\n  x' \\<notin> A'\n  x' \\<cdot> y' \\<in> D\n  (A', y') \\<in> foldSetD D (\\<cdot>) e\n\ngoal (1 subgoal):\n 1. \\<And>x A y.\n       \\<lbrakk>A = insert x A; x = x \\<cdot> y; x \\<notin> A;\n        x \\<cdot> y \\<in> D; (A, y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n       \\<Longrightarrow> y = x", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. y = x", "using foldSetD.cases [OF \\<open>(A,y) \\<in> foldSetD D (\\<cdot>) e\\<close>]"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<lbrakk>A = {}; y = e; e \\<in> D\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<And>x A y.\n      \\<lbrakk>A = insert x A; y = x \\<cdot> y; x \\<notin> A;\n       x \\<cdot> y \\<in> D; (A, y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. y = x", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>A = {}; y = e; e \\<in> D\\<rbrakk> \\<Longrightarrow> y = x\n 2. \\<And>x A y.\n       \\<lbrakk>A = insert x A; y = x \\<cdot> y; x \\<notin> A;\n        x \\<cdot> y \\<in> D; (A, y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n       \\<Longrightarrow> y = x", "case 1"], ["proof (state)\nthis:\n  A = {}\n  y = e\n  e \\<in> D\n\ngoal (2 subgoals):\n 1. \\<lbrakk>A = {}; y = e; e \\<in> D\\<rbrakk> \\<Longrightarrow> y = x\n 2. \\<And>x A y.\n       \\<lbrakk>A = insert x A; y = x \\<cdot> y; x \\<notin> A;\n        x \\<cdot> y \\<in> D; (A, y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n       \\<Longrightarrow> y = x", "then"], ["proof (chain)\npicking this:\n  A = {}\n  y = e\n  e \\<in> D", "show ?thesis"], ["proof (prove)\nusing this:\n  A = {}\n  y = e\n  e \\<in> D\n\ngoal (1 subgoal):\n 1. y = x", "using \\<open>(A,x) \\<in> foldSetD D (\\<cdot>) e\\<close>"], ["proof (prove)\nusing this:\n  A = {}\n  y = e\n  e \\<in> D\n  (A, x) \\<in> foldSetD D (\\<cdot>) e\n\ngoal (1 subgoal):\n 1. y = x", "by auto"], ["proof (state)\nthis:\n  y = x\n\ngoal (1 subgoal):\n 1. \\<And>x A y.\n       \\<lbrakk>A = insert x A; y = x \\<cdot> y; x \\<notin> A;\n        x \\<cdot> y \\<in> D; (A, y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n       \\<Longrightarrow> y = x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x A y.\n       \\<lbrakk>A = insert x A; y = x \\<cdot> y; x \\<notin> A;\n        x \\<cdot> y \\<in> D; (A, y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n       \\<Longrightarrow> y = x", "case (2 x'' A'' y'')"], ["proof (state)\nthis:\n  A = insert x'' A''\n  y = x'' \\<cdot> y''\n  x'' \\<notin> A''\n  x'' \\<cdot> y'' \\<in> D\n  (A'', y'') \\<in> foldSetD D (\\<cdot>) e\n\ngoal (1 subgoal):\n 1. \\<And>x A y.\n       \\<lbrakk>A = insert x A; y = x \\<cdot> y; x \\<notin> A;\n        x \\<cdot> y \\<in> D; (A, y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n       \\<Longrightarrow> y = x", "note A'' = this"], ["proof (state)\nthis:\n  A = insert x'' A''\n  y = x'' \\<cdot> y''\n  x'' \\<notin> A''\n  x'' \\<cdot> y'' \\<in> D\n  (A'', y'') \\<in> foldSetD D (\\<cdot>) e\n\ngoal (1 subgoal):\n 1. \\<And>x A y.\n       \\<lbrakk>A = insert x A; y = x \\<cdot> y; x \\<notin> A;\n        x \\<cdot> y \\<in> D; (A, y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n       \\<Longrightarrow> y = x", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. y = x", "proof (cases \"x' = x''\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x' = x'' \\<Longrightarrow> y = x\n 2. x' \\<noteq> x'' \\<Longrightarrow> y = x", "case True"], ["proof (state)\nthis:\n  x' = x''\n\ngoal (2 subgoals):\n 1. x' = x'' \\<Longrightarrow> y = x\n 2. x' \\<noteq> x'' \\<Longrightarrow> y = x", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. y = x", "proof (cases \"y' = y''\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y' = y'' \\<Longrightarrow> y = x\n 2. y' \\<noteq> y'' \\<Longrightarrow> y = x", "case True"], ["proof (state)\nthis:\n  y' = y''\n\ngoal (2 subgoals):\n 1. y' = y'' \\<Longrightarrow> y = x\n 2. y' \\<noteq> y'' \\<Longrightarrow> y = x", "then"], ["proof (chain)\npicking this:\n  y' = y''", "show ?thesis"], ["proof (prove)\nusing this:\n  y' = y''\n\ngoal (1 subgoal):\n 1. y = x", "using A' A'' \\<open>x' = x''\\<close>"], ["proof (prove)\nusing this:\n  y' = y''\n  A = insert x' A'\n  x = x' \\<cdot> y'\n  x' \\<notin> A'\n  x' \\<cdot> y' \\<in> D\n  (A', y') \\<in> foldSetD D (\\<cdot>) e\n  A = insert x'' A''\n  y = x'' \\<cdot> y''\n  x'' \\<notin> A''\n  x'' \\<cdot> y'' \\<in> D\n  (A'', y'') \\<in> foldSetD D (\\<cdot>) e\n  x' = x''\n\ngoal (1 subgoal):\n 1. y = x", "by (blast elim!: equalityE)"], ["proof (state)\nthis:\n  y = x\n\ngoal (1 subgoal):\n 1. y' \\<noteq> y'' \\<Longrightarrow> y = x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. y' \\<noteq> y'' \\<Longrightarrow> y = x", "case False"], ["proof (state)\nthis:\n  y' \\<noteq> y''\n\ngoal (1 subgoal):\n 1. y' \\<noteq> y'' \\<Longrightarrow> y = x", "then"], ["proof (chain)\npicking this:\n  y' \\<noteq> y''", "show ?thesis"], ["proof (prove)\nusing this:\n  y' \\<noteq> y''\n\ngoal (1 subgoal):\n 1. y = x", "using A' A'' \\<open>x' = x''\\<close>"], ["proof (prove)\nusing this:\n  y' \\<noteq> y''\n  A = insert x' A'\n  x = x' \\<cdot> y'\n  x' \\<notin> A'\n  x' \\<cdot> y' \\<in> D\n  (A', y') \\<in> foldSetD D (\\<cdot>) e\n  A = insert x'' A''\n  y = x'' \\<cdot> y''\n  x'' \\<notin> A''\n  x'' \\<cdot> y'' \\<in> D\n  (A'', y'') \\<in> foldSetD D (\\<cdot>) e\n  x' = x''\n\ngoal (1 subgoal):\n 1. y = x", "by (metis \\<open>card A = n\\<close> Suc.IH Suc.prems(2) card_insert_disjoint foldSetD_imp_finite insert_eq_iff insert_subset lessI)"], ["proof (state)\nthis:\n  y = x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  y = x\n\ngoal (1 subgoal):\n 1. x' \\<noteq> x'' \\<Longrightarrow> y = x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x' \\<noteq> x'' \\<Longrightarrow> y = x", "case False"], ["proof (state)\nthis:\n  x' \\<noteq> x''\n\ngoal (1 subgoal):\n 1. x' \\<noteq> x'' \\<Longrightarrow> y = x", "then"], ["proof (chain)\npicking this:\n  x' \\<noteq> x''", "have *: \"A' - {x''} = A'' - {x'}\" \"x'' \\<in> A'\" \"x' \\<in> A''\""], ["proof (prove)\nusing this:\n  x' \\<noteq> x''\n\ngoal (1 subgoal):\n 1. A'\\<setminus>{x''} = A''\\<setminus>{x'} &&&\n    x'' \\<in> A' &&& x' \\<in> A''", "using A' A''"], ["proof (prove)\nusing this:\n  x' \\<noteq> x''\n  A = insert x' A'\n  x = x' \\<cdot> y'\n  x' \\<notin> A'\n  x' \\<cdot> y' \\<in> D\n  (A', y') \\<in> foldSetD D (\\<cdot>) e\n  A = insert x'' A''\n  y = x'' \\<cdot> y''\n  x'' \\<notin> A''\n  x'' \\<cdot> y'' \\<in> D\n  (A'', y'') \\<in> foldSetD D (\\<cdot>) e\n\ngoal (1 subgoal):\n 1. A'\\<setminus>{x''} = A''\\<setminus>{x'} &&&\n    x'' \\<in> A' &&& x' \\<in> A''", "by fastforce+"], ["proof (state)\nthis:\n  A'\\<setminus>{x''} = A''\\<setminus>{x'}\n  x'' \\<in> A'\n  x' \\<in> A''\n\ngoal (1 subgoal):\n 1. x' \\<noteq> x'' \\<Longrightarrow> y = x", "then"], ["proof (chain)\npicking this:\n  A'\\<setminus>{x''} = A''\\<setminus>{x'}\n  x'' \\<in> A'\n  x' \\<in> A''", "have \"A' = insert x'' A'' - {x'}\""], ["proof (prove)\nusing this:\n  A'\\<setminus>{x''} = A''\\<setminus>{x'}\n  x'' \\<in> A'\n  x' \\<in> A''\n\ngoal (1 subgoal):\n 1. A' = insert x'' A''\\<setminus>{x'}", "using \\<open>x' \\<notin> A'\\<close>"], ["proof (prove)\nusing this:\n  A'\\<setminus>{x''} = A''\\<setminus>{x'}\n  x'' \\<in> A'\n  x' \\<in> A''\n  x' \\<notin> A'\n\ngoal (1 subgoal):\n 1. A' = insert x'' A''\\<setminus>{x'}", "by blast"], ["proof (state)\nthis:\n  A' = insert x'' A''\\<setminus>{x'}\n\ngoal (1 subgoal):\n 1. x' \\<noteq> x'' \\<Longrightarrow> y = x", "then"], ["proof (chain)\npicking this:\n  A' = insert x'' A''\\<setminus>{x'}", "have card: \"card A' \\<le> card A''\""], ["proof (prove)\nusing this:\n  A' = insert x'' A''\\<setminus>{x'}\n\ngoal (1 subgoal):\n 1. card A' \\<le> card A''", "using A' A'' *"], ["proof (prove)\nusing this:\n  A' = insert x'' A''\\<setminus>{x'}\n  A = insert x' A'\n  x = x' \\<cdot> y'\n  x' \\<notin> A'\n  x' \\<cdot> y' \\<in> D\n  (A', y') \\<in> foldSetD D (\\<cdot>) e\n  A = insert x'' A''\n  y = x'' \\<cdot> y''\n  x'' \\<notin> A''\n  x'' \\<cdot> y'' \\<in> D\n  (A'', y'') \\<in> foldSetD D (\\<cdot>) e\n  A'\\<setminus>{x''} = A''\\<setminus>{x'}\n  x'' \\<in> A'\n  x' \\<in> A''\n\ngoal (1 subgoal):\n 1. card A' \\<le> card A''", "by (metis card_Suc_Diff1 eq_refl foldSetD_imp_finite)"], ["proof (state)\nthis:\n  card A' \\<le> card A''\n\ngoal (1 subgoal):\n 1. x' \\<noteq> x'' \\<Longrightarrow> y = x", "obtain u where u: \"(A' - {x''}, u) \\<in> foldSetD D (\\<cdot>) e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u.\n        (A'\\<setminus>{x''}, u)\n        \\<in> foldSetD D (\\<cdot>) e \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using finite_imp_foldSetD [of \"A' - {x''}\"] A' Diff_insert \\<open>A \\<subseteq> B\\<close> \\<open>e \\<in> D\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite (A'\\<setminus>{x''}); A'\\<setminus>{x''} \\<subseteq> B;\n   ?e \\<in> D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x.\n                       (A'\\<setminus>{x''}, x) \\<in> foldSetD D (\\<cdot>) ?e\n  A = insert x' A'\n  x = x' \\<cdot> y'\n  x' \\<notin> A'\n  x' \\<cdot> y' \\<in> D\n  (A', y') \\<in> foldSetD D (\\<cdot>) e\n  ?A\\<setminus>insert ?a ?B = ?A\\<setminus>?B\\<setminus>{?a}\n  A \\<subseteq> B\n  e \\<in> D\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        (A'\\<setminus>{x''}, u)\n        \\<in> foldSetD D (\\<cdot>) e \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  (A'\\<setminus>{x''}, u) \\<in> foldSetD D (\\<cdot>) e\n\ngoal (1 subgoal):\n 1. x' \\<noteq> x'' \\<Longrightarrow> y = x", "have \"y' = f x'' u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y' = x'' \\<cdot> u", "using Diff1_foldSetD [OF u] \\<open>x'' \\<in> A'\\<close> \\<open>card A = n\\<close> A' Suc.IH \\<open>A \\<subseteq> B\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>x'' \\<in> A'; A' \\<subseteq> B\\<rbrakk>\n  \\<Longrightarrow> (A', x'' \\<cdot> u) \\<in> foldSetD D (\\<cdot>) e\n  x'' \\<in> A'\n  card A = n\n  A = insert x' A'\n  x = x' \\<cdot> y'\n  x' \\<notin> A'\n  x' \\<cdot> y' \\<in> D\n  (A', y') \\<in> foldSetD D (\\<cdot>) e\n  \\<lbrakk>card ?A < n; ?A \\<subseteq> B;\n   (?A, ?x) \\<in> foldSetD D (\\<cdot>) e;\n   (?A, ?y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n  \\<Longrightarrow> ?y = ?x\n  A \\<subseteq> B\n\ngoal (1 subgoal):\n 1. y' = x'' \\<cdot> u", "by auto"], ["proof (state)\nthis:\n  y' = x'' \\<cdot> u\n\ngoal (1 subgoal):\n 1. x' \\<noteq> x'' \\<Longrightarrow> y = x", "then"], ["proof (chain)\npicking this:\n  y' = x'' \\<cdot> u", "have \"(A'' - {x'}, u) \\<in> foldSetD D f e\""], ["proof (prove)\nusing this:\n  y' = x'' \\<cdot> u\n\ngoal (1 subgoal):\n 1. (A''\\<setminus>{x'}, u) \\<in> foldSetD D (\\<cdot>) e", "using \"*\"(1) u"], ["proof (prove)\nusing this:\n  y' = x'' \\<cdot> u\n  A'\\<setminus>{x''} = A''\\<setminus>{x'}\n  (A'\\<setminus>{x''}, u) \\<in> foldSetD D (\\<cdot>) e\n\ngoal (1 subgoal):\n 1. (A''\\<setminus>{x'}, u) \\<in> foldSetD D (\\<cdot>) e", "by auto"], ["proof (state)\nthis:\n  (A''\\<setminus>{x'}, u) \\<in> foldSetD D (\\<cdot>) e\n\ngoal (1 subgoal):\n 1. x' \\<noteq> x'' \\<Longrightarrow> y = x", "then"], ["proof (chain)\npicking this:\n  (A''\\<setminus>{x'}, u) \\<in> foldSetD D (\\<cdot>) e", "have \"y'' = f x' u\""], ["proof (prove)\nusing this:\n  (A''\\<setminus>{x'}, u) \\<in> foldSetD D (\\<cdot>) e\n\ngoal (1 subgoal):\n 1. y'' = x' \\<cdot> u", "using A''"], ["proof (prove)\nusing this:\n  (A''\\<setminus>{x'}, u) \\<in> foldSetD D (\\<cdot>) e\n  A = insert x'' A''\n  y = x'' \\<cdot> y''\n  x'' \\<notin> A''\n  x'' \\<cdot> y'' \\<in> D\n  (A'', y'') \\<in> foldSetD D (\\<cdot>) e\n\ngoal (1 subgoal):\n 1. y'' = x' \\<cdot> u", "by (metis * \\<open>card A = n\\<close> A'(1) Diff1_foldSetD Suc.IH \\<open>A \\<subseteq> B\\<close>\n                card card_Suc_Diff1 card_insert_disjoint foldSetD_imp_finite insert_subset le_imp_less_Suc)"], ["proof (state)\nthis:\n  y'' = x' \\<cdot> u\n\ngoal (1 subgoal):\n 1. x' \\<noteq> x'' \\<Longrightarrow> y = x", "then"], ["proof (chain)\npicking this:\n  y'' = x' \\<cdot> u", "show ?thesis"], ["proof (prove)\nusing this:\n  y'' = x' \\<cdot> u\n\ngoal (1 subgoal):\n 1. y = x", "using A' A''"], ["proof (prove)\nusing this:\n  y'' = x' \\<cdot> u\n  A = insert x' A'\n  x = x' \\<cdot> y'\n  x' \\<notin> A'\n  x' \\<cdot> y' \\<in> D\n  (A', y') \\<in> foldSetD D (\\<cdot>) e\n  A = insert x'' A''\n  y = x'' \\<cdot> y''\n  x'' \\<notin> A''\n  x'' \\<cdot> y'' \\<in> D\n  (A'', y'') \\<in> foldSetD D (\\<cdot>) e\n\ngoal (1 subgoal):\n 1. y = x", "by (metis \\<open>A \\<subseteq> B\\<close> \\<open>y' = x'' \\<cdot> u\\<close> insert_subset left_commute local.foldSetD_closed u)"], ["proof (state)\nthis:\n  y = x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  y = x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  y = x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  y = x\n\ngoal (1 subgoal):\n 1. card A < n \\<Longrightarrow> y = x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. card A < n \\<Longrightarrow> y = x", "case 2"], ["proof (state)\nthis:\n  card A < n\n\ngoal (1 subgoal):\n 1. card A < n \\<Longrightarrow> y = x", "with Suc"], ["proof (chain)\npicking this:\n  \\<lbrakk>card ?A < n; ?A \\<subseteq> B;\n   (?A, ?x) \\<in> foldSetD D (\\<cdot>) e;\n   (?A, ?y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n  \\<Longrightarrow> ?y = ?x\n  card A < Suc n\n  A \\<subseteq> B\n  (A, x) \\<in> foldSetD D (\\<cdot>) e\n  (A, y) \\<in> foldSetD D (\\<cdot>) e\n  card A < n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>card ?A < n; ?A \\<subseteq> B;\n   (?A, ?x) \\<in> foldSetD D (\\<cdot>) e;\n   (?A, ?y) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n  \\<Longrightarrow> ?y = ?x\n  card A < Suc n\n  A \\<subseteq> B\n  (A, x) \\<in> foldSetD D (\\<cdot>) e\n  (A, y) \\<in> foldSetD D (\\<cdot>) e\n  card A < n\n\ngoal (1 subgoal):\n 1. y = x", "by blast"], ["proof (state)\nthis:\n  y = x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  y = x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in LCD) foldSetD_determ:\n  \"\\<lbrakk>(A, x) \\<in> foldSetD D f e; (A, y) \\<in> foldSetD D f e; e \\<in> D; A \\<subseteq> B\\<rbrakk>\n  \\<Longrightarrow> y = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(A, x) \\<in> foldSetD D (\\<cdot>) e;\n     (A, y) \\<in> foldSetD D (\\<cdot>) e; e \\<in> D;\n     A \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> y = x", "by (blast intro: foldSetD_determ_aux [rule_format])"], ["", "lemma (in LCD) foldD_equality:\n  \"\\<lbrakk>(A, y) \\<in> foldSetD D f e; e \\<in> D; A \\<subseteq> B\\<rbrakk> \\<Longrightarrow> foldD D f e A = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(A, y) \\<in> foldSetD D (\\<cdot>) e; e \\<in> D;\n     A \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> foldD D (\\<cdot>) e A = y", "by (unfold foldD_def) (blast intro: foldSetD_determ)"], ["", "lemma foldD_empty [simp]:\n  \"e \\<in> D \\<Longrightarrow> foldD D f e {} = e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e \\<in> D \\<Longrightarrow> foldD D f e {} = e", "by (unfold foldD_def) blast"], ["", "lemma (in LCD) foldD_insert_aux:\n  \"\\<lbrakk>x \\<notin> A; x \\<in> B; e \\<in> D; A \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> ((insert x A, v) \\<in> foldSetD D f e) \\<longleftrightarrow> (\\<exists>y. (A, y) \\<in> foldSetD D f e \\<and> v = f x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> A; x \\<in> B; e \\<in> D; A \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> ((insert x A, v) \\<in> foldSetD D (\\<cdot>) e) =\n                      (\\<exists>y.\n                          (A, y) \\<in> foldSetD D (\\<cdot>) e \\<and>\n                          v = x \\<cdot> y)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> A; x \\<in> B; e \\<in> D; A \\<subseteq> B;\n     (insert x A, v) \\<in> foldSetD D (\\<cdot>) e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         (A, y) \\<in> foldSetD D (\\<cdot>) e \\<and>\n                         v = x \\<cdot> y", "by (metis Diff_insert_absorb f_closed finite_Diff foldSetD.insertI foldSetD_determ foldSetD_imp_finite insert_subset local.finite_imp_foldSetD local.foldSetD_closed)"], ["", "lemma (in LCD) foldD_insert:\n  assumes \"finite A\" \"x \\<notin> A\" \"x \\<in> B\" \"e \\<in> D\" \"A \\<subseteq> B\"\n  shows \"foldD D f e (insert x A) = f x (foldD D f e A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldD D (\\<cdot>) e (insert x A) = x \\<cdot> foldD D (\\<cdot>) e A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. foldD D (\\<cdot>) e (insert x A) = x \\<cdot> foldD D (\\<cdot>) e A", "have \"(THE v. \\<exists>y. (A, y) \\<in> foldSetD D (\\<cdot>) e \\<and> v = x \\<cdot> y) = x \\<cdot> (THE y. (A, y) \\<in> foldSetD D (\\<cdot>) e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (THE v.\n        \\<exists>y.\n           (A, y) \\<in> foldSetD D (\\<cdot>) e \\<and> v = x \\<cdot> y) =\n    x \\<cdot> (THE y. (A, y) \\<in> foldSetD D (\\<cdot>) e)", "by (rule the_equality) (use assms foldD_def foldD_equality foldD_def finite_imp_foldSetD in \\<open>metis+\\<close>)"], ["proof (state)\nthis:\n  (THE v.\n      \\<exists>y.\n         (A, y) \\<in> foldSetD D (\\<cdot>) e \\<and> v = x \\<cdot> y) =\n  x \\<cdot> (THE y. (A, y) \\<in> foldSetD D (\\<cdot>) e)\n\ngoal (1 subgoal):\n 1. foldD D (\\<cdot>) e (insert x A) = x \\<cdot> foldD D (\\<cdot>) e A", "then"], ["proof (chain)\npicking this:\n  (THE v.\n      \\<exists>y.\n         (A, y) \\<in> foldSetD D (\\<cdot>) e \\<and> v = x \\<cdot> y) =\n  x \\<cdot> (THE y. (A, y) \\<in> foldSetD D (\\<cdot>) e)", "show ?thesis"], ["proof (prove)\nusing this:\n  (THE v.\n      \\<exists>y.\n         (A, y) \\<in> foldSetD D (\\<cdot>) e \\<and> v = x \\<cdot> y) =\n  x \\<cdot> (THE y. (A, y) \\<in> foldSetD D (\\<cdot>) e)\n\ngoal (1 subgoal):\n 1. foldD D (\\<cdot>) e (insert x A) = x \\<cdot> foldD D (\\<cdot>) e A", "unfolding foldD_def"], ["proof (prove)\nusing this:\n  (THE v.\n      \\<exists>y.\n         (A, y) \\<in> foldSetD D (\\<cdot>) e \\<and> v = x \\<cdot> y) =\n  x \\<cdot> (THE y. (A, y) \\<in> foldSetD D (\\<cdot>) e)\n\ngoal (1 subgoal):\n 1. (THE xa. (insert x A, xa) \\<in> foldSetD D (\\<cdot>) e) =\n    x \\<cdot> (THE x. (A, x) \\<in> foldSetD D (\\<cdot>) e)", "using assms"], ["proof (prove)\nusing this:\n  (THE v.\n      \\<exists>y.\n         (A, y) \\<in> foldSetD D (\\<cdot>) e \\<and> v = x \\<cdot> y) =\n  x \\<cdot> (THE y. (A, y) \\<in> foldSetD D (\\<cdot>) e)\n  finite A\n  x \\<notin> A\n  x \\<in> B\n  e \\<in> D\n  A \\<subseteq> B\n\ngoal (1 subgoal):\n 1. (THE xa. (insert x A, xa) \\<in> foldSetD D (\\<cdot>) e) =\n    x \\<cdot> (THE x. (A, x) \\<in> foldSetD D (\\<cdot>) e)", "by (simp add: foldD_insert_aux)"], ["proof (state)\nthis:\n  foldD D (\\<cdot>) e (insert x A) = x \\<cdot> foldD D (\\<cdot>) e A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in LCD) foldD_closed [simp]:\n  \"\\<lbrakk>finite A; e \\<in> D; A \\<subseteq> B\\<rbrakk> \\<Longrightarrow> foldD D f e A \\<in> D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; e \\<in> D; A \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> foldD D (\\<cdot>) e A \\<in> D", "proof (induct set: finite)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>e \\<in> D; {} \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> foldD D (\\<cdot>) e {} \\<in> D\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>e \\<in> D; F \\<subseteq> B\\<rbrakk>\n        \\<Longrightarrow> foldD D (\\<cdot>) e F \\<in> D;\n        e \\<in> D; insert x F \\<subseteq> B\\<rbrakk>\n       \\<Longrightarrow> foldD D (\\<cdot>) e (insert x F) \\<in> D", "case empty"], ["proof (state)\nthis:\n  e \\<in> D\n  {} \\<subseteq> B\n\ngoal (2 subgoals):\n 1. \\<lbrakk>e \\<in> D; {} \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> foldD D (\\<cdot>) e {} \\<in> D\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>e \\<in> D; F \\<subseteq> B\\<rbrakk>\n        \\<Longrightarrow> foldD D (\\<cdot>) e F \\<in> D;\n        e \\<in> D; insert x F \\<subseteq> B\\<rbrakk>\n       \\<Longrightarrow> foldD D (\\<cdot>) e (insert x F) \\<in> D", "then"], ["proof (chain)\npicking this:\n  e \\<in> D\n  {} \\<subseteq> B", "show ?case"], ["proof (prove)\nusing this:\n  e \\<in> D\n  {} \\<subseteq> B\n\ngoal (1 subgoal):\n 1. foldD D (\\<cdot>) e {} \\<in> D", "by simp"], ["proof (state)\nthis:\n  foldD D (\\<cdot>) e {} \\<in> D\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>e \\<in> D; F \\<subseteq> B\\<rbrakk>\n        \\<Longrightarrow> foldD D (\\<cdot>) e F \\<in> D;\n        e \\<in> D; insert x F \\<subseteq> B\\<rbrakk>\n       \\<Longrightarrow> foldD D (\\<cdot>) e (insert x F) \\<in> D", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>e \\<in> D; F \\<subseteq> B\\<rbrakk>\n        \\<Longrightarrow> foldD D (\\<cdot>) e F \\<in> D;\n        e \\<in> D; insert x F \\<subseteq> B\\<rbrakk>\n       \\<Longrightarrow> foldD D (\\<cdot>) e (insert x F) \\<in> D", "case insert"], ["proof (state)\nthis:\n  finite F_\n  x_ \\<notin> F_\n  \\<lbrakk>e \\<in> D; F_ \\<subseteq> B\\<rbrakk>\n  \\<Longrightarrow> foldD D (\\<cdot>) e F_ \\<in> D\n  e \\<in> D\n  insert x_ F_ \\<subseteq> B\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>e \\<in> D; F \\<subseteq> B\\<rbrakk>\n        \\<Longrightarrow> foldD D (\\<cdot>) e F \\<in> D;\n        e \\<in> D; insert x F \\<subseteq> B\\<rbrakk>\n       \\<Longrightarrow> foldD D (\\<cdot>) e (insert x F) \\<in> D", "then"], ["proof (chain)\npicking this:\n  finite F_\n  x_ \\<notin> F_\n  \\<lbrakk>e \\<in> D; F_ \\<subseteq> B\\<rbrakk>\n  \\<Longrightarrow> foldD D (\\<cdot>) e F_ \\<in> D\n  e \\<in> D\n  insert x_ F_ \\<subseteq> B", "show ?case"], ["proof (prove)\nusing this:\n  finite F_\n  x_ \\<notin> F_\n  \\<lbrakk>e \\<in> D; F_ \\<subseteq> B\\<rbrakk>\n  \\<Longrightarrow> foldD D (\\<cdot>) e F_ \\<in> D\n  e \\<in> D\n  insert x_ F_ \\<subseteq> B\n\ngoal (1 subgoal):\n 1. foldD D (\\<cdot>) e (insert x_ F_) \\<in> D", "by (simp add: foldD_insert)"], ["proof (state)\nthis:\n  foldD D (\\<cdot>) e (insert x_ F_) \\<in> D\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in LCD) foldD_commute:\n  \"\\<lbrakk>finite A; x \\<in> B; e \\<in> D; A \\<subseteq> B\\<rbrakk> \\<Longrightarrow>\n   f x (foldD D f e A) = foldD D f (f x e) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; x \\<in> B; e \\<in> D; A \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> foldD D (\\<cdot>) e A =\n                      foldD D (\\<cdot>) (x \\<cdot> e) A", "by (induct set: finite) (auto simp add: left_commute foldD_insert)"], ["", "lemma Int_mono2:\n  \"\\<lbrakk>A \\<subseteq> C; B \\<subseteq> C\\<rbrakk> \\<Longrightarrow> A Int B \\<subseteq> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> C; B \\<subseteq> C\\<rbrakk>\n    \\<Longrightarrow> A \\<inter> B \\<subseteq> C", "by blast"], ["", "lemma (in LCD) foldD_nest_Un_Int:\n  \"\\<lbrakk>finite A; finite C; e \\<in> D; A \\<subseteq> B; C \\<subseteq> B\\<rbrakk> \\<Longrightarrow>\n   foldD D f (foldD D f e C) A = foldD D f (foldD D f e (A Int C)) (A Un C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite C; e \\<in> D; A \\<subseteq> B;\n     C \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> foldD D (\\<cdot>) (foldD D (\\<cdot>) e C) A =\n                      foldD D (\\<cdot>) (foldD D (\\<cdot>) e (A \\<inter> C))\n                       (A \\<union> C)", "proof (induction set: finite)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite C; e \\<in> D; {} \\<subseteq> B; C \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> foldD D (\\<cdot>) (foldD D (\\<cdot>) e C) {} =\n                      foldD D (\\<cdot>)\n                       (foldD D (\\<cdot>) e ({} \\<inter> C)) ({} \\<union> C)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>finite C; e \\<in> D; F \\<subseteq> B;\n         C \\<subseteq> B\\<rbrakk>\n        \\<Longrightarrow> foldD D (\\<cdot>) (foldD D (\\<cdot>) e C) F =\n                          foldD D (\\<cdot>)\n                           (foldD D (\\<cdot>) e (F \\<inter> C))\n                           (F \\<union> C);\n        finite C; e \\<in> D; insert x F \\<subseteq> B;\n        C \\<subseteq> B\\<rbrakk>\n       \\<Longrightarrow> foldD D (\\<cdot>) (foldD D (\\<cdot>) e C)\n                          (insert x F) =\n                         foldD D (\\<cdot>)\n                          (foldD D (\\<cdot>) e (insert x F \\<inter> C))\n                          (insert x F \\<union> C)", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>finite C; e \\<in> D; F \\<subseteq> B; C \\<subseteq> B\\<rbrakk>\n  \\<Longrightarrow> foldD D (\\<cdot>) (foldD D (\\<cdot>) e C) F =\n                    foldD D (\\<cdot>) (foldD D (\\<cdot>) e (F \\<inter> C))\n                     (F \\<union> C)\n  finite C\n  e \\<in> D\n  insert x F \\<subseteq> B\n  C \\<subseteq> B\n\ngoal (2 subgoals):\n 1. \\<lbrakk>finite C; e \\<in> D; {} \\<subseteq> B; C \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> foldD D (\\<cdot>) (foldD D (\\<cdot>) e C) {} =\n                      foldD D (\\<cdot>)\n                       (foldD D (\\<cdot>) e ({} \\<inter> C)) ({} \\<union> C)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>finite C; e \\<in> D; F \\<subseteq> B;\n         C \\<subseteq> B\\<rbrakk>\n        \\<Longrightarrow> foldD D (\\<cdot>) (foldD D (\\<cdot>) e C) F =\n                          foldD D (\\<cdot>)\n                           (foldD D (\\<cdot>) e (F \\<inter> C))\n                           (F \\<union> C);\n        finite C; e \\<in> D; insert x F \\<subseteq> B;\n        C \\<subseteq> B\\<rbrakk>\n       \\<Longrightarrow> foldD D (\\<cdot>) (foldD D (\\<cdot>) e C)\n                          (insert x F) =\n                         foldD D (\\<cdot>)\n                          (foldD D (\\<cdot>) e (insert x F \\<inter> C))\n                          (insert x F \\<union> C)", "then"], ["proof (chain)\npicking this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>finite C; e \\<in> D; F \\<subseteq> B; C \\<subseteq> B\\<rbrakk>\n  \\<Longrightarrow> foldD D (\\<cdot>) (foldD D (\\<cdot>) e C) F =\n                    foldD D (\\<cdot>) (foldD D (\\<cdot>) e (F \\<inter> C))\n                     (F \\<union> C)\n  finite C\n  e \\<in> D\n  insert x F \\<subseteq> B\n  C \\<subseteq> B", "show ?case"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>finite C; e \\<in> D; F \\<subseteq> B; C \\<subseteq> B\\<rbrakk>\n  \\<Longrightarrow> foldD D (\\<cdot>) (foldD D (\\<cdot>) e C) F =\n                    foldD D (\\<cdot>) (foldD D (\\<cdot>) e (F \\<inter> C))\n                     (F \\<union> C)\n  finite C\n  e \\<in> D\n  insert x F \\<subseteq> B\n  C \\<subseteq> B\n\ngoal (1 subgoal):\n 1. foldD D (\\<cdot>) (foldD D (\\<cdot>) e C) (insert x F) =\n    foldD D (\\<cdot>) (foldD D (\\<cdot>) e (insert x F \\<inter> C))\n     (insert x F \\<union> C)", "by (simp add: foldD_insert foldD_commute Int_insert_left insert_absorb Int_mono2)"], ["proof (state)\nthis:\n  foldD D (\\<cdot>) (foldD D (\\<cdot>) e C) (insert x F) =\n  foldD D (\\<cdot>) (foldD D (\\<cdot>) e (insert x F \\<inter> C))\n   (insert x F \\<union> C)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite C; e \\<in> D; {} \\<subseteq> B; C \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> foldD D (\\<cdot>) (foldD D (\\<cdot>) e C) {} =\n                      foldD D (\\<cdot>)\n                       (foldD D (\\<cdot>) e ({} \\<inter> C)) ({} \\<union> C)", "qed simp"], ["", "lemma (in LCD) foldD_nest_Un_disjoint:\n  \"\\<lbrakk>finite A; finite B; A Int B = {}; e \\<in> D; A \\<subseteq> B; C \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> foldD D f e (A Un B) = foldD D f (foldD D f e B) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite B; A \\<inter> B = {}; e \\<in> D;\n     A \\<subseteq> B; C \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> foldD D (\\<cdot>) e (A \\<union> B) =\n                      foldD D (\\<cdot>) (foldD D (\\<cdot>) e B) A", "by (simp add: foldD_nest_Un_Int)\n\n\\<comment> \\<open>Delete rules to do with \\<open>foldSetD\\<close> relation.\\<close>"], ["", "declare foldSetD_imp_finite [simp del]\n  empty_foldSetDE [rule del]\n  foldSetD.intros [rule del]"], ["", "declare (in LCD)\n  foldSetD_closed [rule del]"], ["", "section \\<open>Monoids\\<close>"], ["", "lemma comp_monoid_morphisms:\n  assumes \"monoid_homomorphism \\<eta> A multA oneA B multB oneB\" and\n          \"monoid_homomorphism \\<theta> B multB oneB C multC oneC\"\nshows \"monoid_homomorphism (\\<theta> \\<circ> \\<eta> \\<down> A) A multA oneA C multC oneC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monoid_homomorphism (\\<theta> \\<circ> \\<eta> \\<down> A) A multA oneA C\n     multC oneC", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. monoid_homomorphism (\\<theta> \\<circ> \\<eta> \\<down> A) A multA oneA C\n     multC oneC", "have \"map (\\<theta> \\<circ> \\<eta> \\<down> A) A C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<theta> \\<circ> \\<eta> \\<down> A) A C", "using assms comp_maps"], ["proof (prove)\nusing this:\n  monoid_homomorphism \\<eta> A multA oneA B multB oneB\n  monoid_homomorphism \\<theta> B multB oneB C multC oneC\n  \\<lbrakk>map ?\\<eta> ?A ?B; map ?\\<theta> ?B ?C\\<rbrakk>\n  \\<Longrightarrow> map (?\\<theta> \\<circ> ?\\<eta> \\<down> ?A) ?A ?C\n\ngoal (1 subgoal):\n 1. map (\\<theta> \\<circ> \\<eta> \\<down> A) A C", "by (metis monoid_homomorphism.axioms(1))"], ["proof (state)\nthis:\n  map (\\<theta> \\<circ> \\<eta> \\<down> A) A C\n\ngoal (1 subgoal):\n 1. monoid_homomorphism (\\<theta> \\<circ> \\<eta> \\<down> A) A multA oneA C\n     multC oneC", "moreover"], ["proof (state)\nthis:\n  map (\\<theta> \\<circ> \\<eta> \\<down> A) A C\n\ngoal (1 subgoal):\n 1. monoid_homomorphism (\\<theta> \\<circ> \\<eta> \\<down> A) A multA oneA C\n     multC oneC", "have \"(\\<theta> \\<circ> \\<eta> \\<down> A) oneA = oneC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<theta> \\<circ> \\<eta> \\<down> A) oneA = oneC", "using assms"], ["proof (prove)\nusing this:\n  monoid_homomorphism \\<eta> A multA oneA B multB oneB\n  monoid_homomorphism \\<theta> B multB oneB C multC oneC\n\ngoal (1 subgoal):\n 1. (\\<theta> \\<circ> \\<eta> \\<down> A) oneA = oneC", "by (metis compose_eq monoid.unit_closed monoid_homomorphism.axioms(2) monoid_homomorphism.commutes_with_unit)"], ["proof (state)\nthis:\n  (\\<theta> \\<circ> \\<eta> \\<down> A) oneA = oneC\n\ngoal (1 subgoal):\n 1. monoid_homomorphism (\\<theta> \\<circ> \\<eta> \\<down> A) A multA oneA C\n     multC oneC", "moreover"], ["proof (state)\nthis:\n  (\\<theta> \\<circ> \\<eta> \\<down> A) oneA = oneC\n\ngoal (1 subgoal):\n 1. monoid_homomorphism (\\<theta> \\<circ> \\<eta> \\<down> A) A multA oneA C\n     multC oneC", "have \"(\\<theta> \\<circ> \\<eta> \\<down> A) (multA x y) = multC ((\\<theta> \\<circ> \\<eta> \\<down> A) x) ((\\<theta> \\<circ> \\<eta> \\<down> A) y)\"\n      if \"x \\<in> A\" \"y \\<in> A\" for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<theta> \\<circ> \\<eta> \\<down> A) (multA x y) =\n    multC ((\\<theta> \\<circ> \\<eta> \\<down> A) x)\n     ((\\<theta> \\<circ> \\<eta> \\<down> A) y)", "using that assms monoid_homomorphism.commutes_with_composition"], ["proof (prove)\nusing this:\n  x \\<in> A\n  y \\<in> A\n  monoid_homomorphism \\<eta> A multA oneA B multB oneB\n  monoid_homomorphism \\<theta> B multB oneB C multC oneC\n  \\<lbrakk>monoid_homomorphism ?\\<eta> ?M ?composition ?unit ?M'\n            ?composition' ?unit';\n   ?x \\<in> ?M; ?y \\<in> ?M\\<rbrakk>\n  \\<Longrightarrow> ?\\<eta> (?composition ?x ?y) =\n                    ?composition' (?\\<eta> ?x) (?\\<eta> ?y)\n\ngoal (1 subgoal):\n 1. (\\<theta> \\<circ> \\<eta> \\<down> A) (multA x y) =\n    multC ((\\<theta> \\<circ> \\<eta> \\<down> A) x)\n     ((\\<theta> \\<circ> \\<eta> \\<down> A) y)", "by (smt compose_eq map.map_closed monoid.composition_closed monoid_homomorphism.axioms)"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<in> A; ?y \\<in> A\\<rbrakk>\n  \\<Longrightarrow> (\\<theta> \\<circ> \\<eta> \\<down> A) (multA ?x ?y) =\n                    multC ((\\<theta> \\<circ> \\<eta> \\<down> A) ?x)\n                     ((\\<theta> \\<circ> \\<eta> \\<down> A) ?y)\n\ngoal (1 subgoal):\n 1. monoid_homomorphism (\\<theta> \\<circ> \\<eta> \\<down> A) A multA oneA C\n     multC oneC", "ultimately"], ["proof (chain)\npicking this:\n  map (\\<theta> \\<circ> \\<eta> \\<down> A) A C\n  (\\<theta> \\<circ> \\<eta> \\<down> A) oneA = oneC\n  \\<lbrakk>?x \\<in> A; ?y \\<in> A\\<rbrakk>\n  \\<Longrightarrow> (\\<theta> \\<circ> \\<eta> \\<down> A) (multA ?x ?y) =\n                    multC ((\\<theta> \\<circ> \\<eta> \\<down> A) ?x)\n                     ((\\<theta> \\<circ> \\<eta> \\<down> A) ?y)", "show ?thesis"], ["proof (prove)\nusing this:\n  map (\\<theta> \\<circ> \\<eta> \\<down> A) A C\n  (\\<theta> \\<circ> \\<eta> \\<down> A) oneA = oneC\n  \\<lbrakk>?x \\<in> A; ?y \\<in> A\\<rbrakk>\n  \\<Longrightarrow> (\\<theta> \\<circ> \\<eta> \\<down> A) (multA ?x ?y) =\n                    multC ((\\<theta> \\<circ> \\<eta> \\<down> A) ?x)\n                     ((\\<theta> \\<circ> \\<eta> \\<down> A) ?y)\n\ngoal (1 subgoal):\n 1. monoid_homomorphism (\\<theta> \\<circ> \\<eta> \\<down> A) A multA oneA C\n     multC oneC", "using monoid_homomorphism_def assms comp_maps"], ["proof (prove)\nusing this:\n  map (\\<theta> \\<circ> \\<eta> \\<down> A) A C\n  (\\<theta> \\<circ> \\<eta> \\<down> A) oneA = oneC\n  \\<lbrakk>?x \\<in> A; ?y \\<in> A\\<rbrakk>\n  \\<Longrightarrow> (\\<theta> \\<circ> \\<eta> \\<down> A) (multA ?x ?y) =\n                    multC ((\\<theta> \\<circ> \\<eta> \\<down> A) ?x)\n                     ((\\<theta> \\<circ> \\<eta> \\<down> A) ?y)\n  monoid_homomorphism ?\\<eta> ?M ?composition ?unit ?M' ?composition'\n   ?unit' \\<equiv>\n  (map ?\\<eta> ?M ?M' \\<and>\n   Group_Theory.monoid ?M ?composition ?unit) \\<and>\n  Group_Theory.monoid ?M' ?composition' ?unit' \\<and>\n  monoid_homomorphism_axioms ?\\<eta> ?M ?composition ?unit ?composition'\n   ?unit'\n  monoid_homomorphism \\<eta> A multA oneA B multB oneB\n  monoid_homomorphism \\<theta> B multB oneB C multC oneC\n  \\<lbrakk>map ?\\<eta> ?A ?B; map ?\\<theta> ?B ?C\\<rbrakk>\n  \\<Longrightarrow> map (?\\<theta> \\<circ> ?\\<eta> \\<down> ?A) ?A ?C\n\ngoal (1 subgoal):\n 1. monoid_homomorphism (\\<theta> \\<circ> \\<eta> \\<down> A) A multA oneA C\n     multC oneC", "by (smt monoid_homomorphism_axioms.intro)"], ["proof (state)\nthis:\n  monoid_homomorphism (\\<theta> \\<circ> \\<eta> \\<down> A) A multA oneA C\n   multC oneC\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Commutative Monoids\\<close>"], ["", "text \\<open>\n  We enter a more restrictive context, with \\<open>f :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\\<close>\n  instead of \\<open>'b \\<Rightarrow> 'a \\<Rightarrow> 'a\\<close>.\n\\<close>"], ["", "locale ACeD =\n  fixes D :: \"'a set\"\n    and f :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a\"    (infixl \"\\<cdot>\" 70)\n    and e :: 'a\n  assumes ident [simp]: \"x \\<in> D \\<Longrightarrow> x \\<cdot> e = x\"\n    and commute: \"\\<lbrakk>x \\<in> D; y \\<in> D\\<rbrakk> \\<Longrightarrow> x \\<cdot> y = y \\<cdot> x\"\n    and assoc: \"\\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D\\<rbrakk> \\<Longrightarrow> (x \\<cdot> y) \\<cdot> z = x \\<cdot> (y \\<cdot> z)\"\n    and e_closed [simp]: \"e \\<in> D\"\n    and f_closed [simp]: \"\\<lbrakk>x \\<in> D; y \\<in> D\\<rbrakk> \\<Longrightarrow> x \\<cdot> y \\<in> D\""], ["", "lemma (in ACeD) left_commute:\n  \"\\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D\\<rbrakk> \\<Longrightarrow> x \\<cdot> (y \\<cdot> z) = y \\<cdot> (x \\<cdot> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D\\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> (y \\<cdot> z) = y \\<cdot> (x \\<cdot> z)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D\\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> (y \\<cdot> z) = y \\<cdot> (x \\<cdot> z)", "assume D: \"x \\<in> D\" \"y \\<in> D\" \"z \\<in> D\""], ["proof (state)\nthis:\n  x \\<in> D\n  y \\<in> D\n  z \\<in> D\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D\\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> (y \\<cdot> z) = y \\<cdot> (x \\<cdot> z)", "then"], ["proof (chain)\npicking this:\n  x \\<in> D\n  y \\<in> D\n  z \\<in> D", "have \"x \\<cdot> (y \\<cdot> z) = (y \\<cdot> z) \\<cdot> x\""], ["proof (prove)\nusing this:\n  x \\<in> D\n  y \\<in> D\n  z \\<in> D\n\ngoal (1 subgoal):\n 1. x \\<cdot> (y \\<cdot> z) = y \\<cdot> z \\<cdot> x", "by (simp add: commute)"], ["proof (state)\nthis:\n  x \\<cdot> (y \\<cdot> z) = y \\<cdot> z \\<cdot> x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D\\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> (y \\<cdot> z) = y \\<cdot> (x \\<cdot> z)", "also"], ["proof (state)\nthis:\n  x \\<cdot> (y \\<cdot> z) = y \\<cdot> z \\<cdot> x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D\\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> (y \\<cdot> z) = y \\<cdot> (x \\<cdot> z)", "from D"], ["proof (chain)\npicking this:\n  x \\<in> D\n  y \\<in> D\n  z \\<in> D", "have \"... = y \\<cdot> (z \\<cdot> x)\""], ["proof (prove)\nusing this:\n  x \\<in> D\n  y \\<in> D\n  z \\<in> D\n\ngoal (1 subgoal):\n 1. y \\<cdot> z \\<cdot> x = y \\<cdot> (z \\<cdot> x)", "by (simp add: assoc)"], ["proof (state)\nthis:\n  y \\<cdot> z \\<cdot> x = y \\<cdot> (z \\<cdot> x)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D\\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> (y \\<cdot> z) = y \\<cdot> (x \\<cdot> z)", "also"], ["proof (state)\nthis:\n  y \\<cdot> z \\<cdot> x = y \\<cdot> (z \\<cdot> x)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D\\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> (y \\<cdot> z) = y \\<cdot> (x \\<cdot> z)", "from D"], ["proof (chain)\npicking this:\n  x \\<in> D\n  y \\<in> D\n  z \\<in> D", "have \"z \\<cdot> x = x \\<cdot> z\""], ["proof (prove)\nusing this:\n  x \\<in> D\n  y \\<in> D\n  z \\<in> D\n\ngoal (1 subgoal):\n 1. z \\<cdot> x = x \\<cdot> z", "by (simp add: commute)"], ["proof (state)\nthis:\n  z \\<cdot> x = x \\<cdot> z\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D\\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> (y \\<cdot> z) = y \\<cdot> (x \\<cdot> z)", "finally"], ["proof (chain)\npicking this:\n  x \\<cdot> (y \\<cdot> z) = y \\<cdot> (x \\<cdot> z)", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<cdot> (y \\<cdot> z) = y \\<cdot> (x \\<cdot> z)\n\ngoal (1 subgoal):\n 1. x \\<cdot> (y \\<cdot> z) = y \\<cdot> (x \\<cdot> z)", "."], ["proof (state)\nthis:\n  x \\<cdot> (y \\<cdot> z) = y \\<cdot> (x \\<cdot> z)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas (in ACeD) AC = assoc commute left_commute"], ["", "lemma (in ACeD) left_ident [simp]: \"x \\<in> D \\<Longrightarrow> e \\<cdot> x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> D \\<Longrightarrow> e \\<cdot> x = x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> D \\<Longrightarrow> e \\<cdot> x = x", "assume \"x \\<in> D\""], ["proof (state)\nthis:\n  x \\<in> D\n\ngoal (1 subgoal):\n 1. x \\<in> D \\<Longrightarrow> e \\<cdot> x = x", "then"], ["proof (chain)\npicking this:\n  x \\<in> D", "have \"x \\<cdot> e = x\""], ["proof (prove)\nusing this:\n  x \\<in> D\n\ngoal (1 subgoal):\n 1. x \\<cdot> e = x", "by (rule ident)"], ["proof (state)\nthis:\n  x \\<cdot> e = x\n\ngoal (1 subgoal):\n 1. x \\<in> D \\<Longrightarrow> e \\<cdot> x = x", "with \\<open>x \\<in> D\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> D\n  x \\<cdot> e = x", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> D\n  x \\<cdot> e = x\n\ngoal (1 subgoal):\n 1. e \\<cdot> x = x", "by (simp add: commute)"], ["proof (state)\nthis:\n  e \\<cdot> x = x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in ACeD) foldD_Un_Int:\n  \"\\<lbrakk>finite A; finite B; A \\<subseteq> D; B \\<subseteq> D\\<rbrakk> \\<Longrightarrow>\n    foldD D f e A \\<cdot> foldD D f e B =\n    foldD D f e (A Un B) \\<cdot> foldD D f e (A Int B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite B; A \\<subseteq> D; B \\<subseteq> D\\<rbrakk>\n    \\<Longrightarrow> foldD D (\\<cdot>) e A \\<cdot> foldD D (\\<cdot>) e B =\n                      foldD D (\\<cdot>) e (A \\<union> B) \\<cdot>\n                      foldD D (\\<cdot>) e (A \\<inter> B)", "proof (induction set: finite)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite B; {} \\<subseteq> D; B \\<subseteq> D\\<rbrakk>\n    \\<Longrightarrow> foldD D (\\<cdot>) e {} \\<cdot> foldD D (\\<cdot>) e B =\n                      foldD D (\\<cdot>) e ({} \\<union> B) \\<cdot>\n                      foldD D (\\<cdot>) e ({} \\<inter> B)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>finite B; F \\<subseteq> D; B \\<subseteq> D\\<rbrakk>\n        \\<Longrightarrow> foldD D (\\<cdot>) e F \\<cdot>\n                          foldD D (\\<cdot>) e B =\n                          foldD D (\\<cdot>) e (F \\<union> B) \\<cdot>\n                          foldD D (\\<cdot>) e (F \\<inter> B);\n        finite B; insert x F \\<subseteq> D; B \\<subseteq> D\\<rbrakk>\n       \\<Longrightarrow> foldD D (\\<cdot>) e (insert x F) \\<cdot>\n                         foldD D (\\<cdot>) e B =\n                         foldD D (\\<cdot>) e (insert x F \\<union> B) \\<cdot>\n                         foldD D (\\<cdot>) e (insert x F \\<inter> B)", "case empty"], ["proof (state)\nthis:\n  finite B\n  {} \\<subseteq> D\n  B \\<subseteq> D\n\ngoal (2 subgoals):\n 1. \\<lbrakk>finite B; {} \\<subseteq> D; B \\<subseteq> D\\<rbrakk>\n    \\<Longrightarrow> foldD D (\\<cdot>) e {} \\<cdot> foldD D (\\<cdot>) e B =\n                      foldD D (\\<cdot>) e ({} \\<union> B) \\<cdot>\n                      foldD D (\\<cdot>) e ({} \\<inter> B)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>finite B; F \\<subseteq> D; B \\<subseteq> D\\<rbrakk>\n        \\<Longrightarrow> foldD D (\\<cdot>) e F \\<cdot>\n                          foldD D (\\<cdot>) e B =\n                          foldD D (\\<cdot>) e (F \\<union> B) \\<cdot>\n                          foldD D (\\<cdot>) e (F \\<inter> B);\n        finite B; insert x F \\<subseteq> D; B \\<subseteq> D\\<rbrakk>\n       \\<Longrightarrow> foldD D (\\<cdot>) e (insert x F) \\<cdot>\n                         foldD D (\\<cdot>) e B =\n                         foldD D (\\<cdot>) e (insert x F \\<union> B) \\<cdot>\n                         foldD D (\\<cdot>) e (insert x F \\<inter> B)", "then"], ["proof (chain)\npicking this:\n  finite B\n  {} \\<subseteq> D\n  B \\<subseteq> D", "show ?case"], ["proof (prove)\nusing this:\n  finite B\n  {} \\<subseteq> D\n  B \\<subseteq> D\n\ngoal (1 subgoal):\n 1. foldD D (\\<cdot>) e {} \\<cdot> foldD D (\\<cdot>) e B =\n    foldD D (\\<cdot>) e ({} \\<union> B) \\<cdot>\n    foldD D (\\<cdot>) e ({} \\<inter> B)", "by(simp add: left_commute LCD.foldD_closed [OF LCD.intro [of D]])"], ["proof (state)\nthis:\n  foldD D (\\<cdot>) e {} \\<cdot> foldD D (\\<cdot>) e B =\n  foldD D (\\<cdot>) e ({} \\<union> B) \\<cdot>\n  foldD D (\\<cdot>) e ({} \\<inter> B)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>finite B; F \\<subseteq> D; B \\<subseteq> D\\<rbrakk>\n        \\<Longrightarrow> foldD D (\\<cdot>) e F \\<cdot>\n                          foldD D (\\<cdot>) e B =\n                          foldD D (\\<cdot>) e (F \\<union> B) \\<cdot>\n                          foldD D (\\<cdot>) e (F \\<inter> B);\n        finite B; insert x F \\<subseteq> D; B \\<subseteq> D\\<rbrakk>\n       \\<Longrightarrow> foldD D (\\<cdot>) e (insert x F) \\<cdot>\n                         foldD D (\\<cdot>) e B =\n                         foldD D (\\<cdot>) e (insert x F \\<union> B) \\<cdot>\n                         foldD D (\\<cdot>) e (insert x F \\<inter> B)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>finite B; F \\<subseteq> D; B \\<subseteq> D\\<rbrakk>\n        \\<Longrightarrow> foldD D (\\<cdot>) e F \\<cdot>\n                          foldD D (\\<cdot>) e B =\n                          foldD D (\\<cdot>) e (F \\<union> B) \\<cdot>\n                          foldD D (\\<cdot>) e (F \\<inter> B);\n        finite B; insert x F \\<subseteq> D; B \\<subseteq> D\\<rbrakk>\n       \\<Longrightarrow> foldD D (\\<cdot>) e (insert x F) \\<cdot>\n                         foldD D (\\<cdot>) e B =\n                         foldD D (\\<cdot>) e (insert x F \\<union> B) \\<cdot>\n                         foldD D (\\<cdot>) e (insert x F \\<inter> B)", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>finite B; F \\<subseteq> D; B \\<subseteq> D\\<rbrakk>\n  \\<Longrightarrow> foldD D (\\<cdot>) e F \\<cdot> foldD D (\\<cdot>) e B =\n                    foldD D (\\<cdot>) e (F \\<union> B) \\<cdot>\n                    foldD D (\\<cdot>) e (F \\<inter> B)\n  finite B\n  insert x F \\<subseteq> D\n  B \\<subseteq> D\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>finite B; F \\<subseteq> D; B \\<subseteq> D\\<rbrakk>\n        \\<Longrightarrow> foldD D (\\<cdot>) e F \\<cdot>\n                          foldD D (\\<cdot>) e B =\n                          foldD D (\\<cdot>) e (F \\<union> B) \\<cdot>\n                          foldD D (\\<cdot>) e (F \\<inter> B);\n        finite B; insert x F \\<subseteq> D; B \\<subseteq> D\\<rbrakk>\n       \\<Longrightarrow> foldD D (\\<cdot>) e (insert x F) \\<cdot>\n                         foldD D (\\<cdot>) e B =\n                         foldD D (\\<cdot>) e (insert x F \\<union> B) \\<cdot>\n                         foldD D (\\<cdot>) e (insert x F \\<inter> B)", "then"], ["proof (chain)\npicking this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>finite B; F \\<subseteq> D; B \\<subseteq> D\\<rbrakk>\n  \\<Longrightarrow> foldD D (\\<cdot>) e F \\<cdot> foldD D (\\<cdot>) e B =\n                    foldD D (\\<cdot>) e (F \\<union> B) \\<cdot>\n                    foldD D (\\<cdot>) e (F \\<inter> B)\n  finite B\n  insert x F \\<subseteq> D\n  B \\<subseteq> D", "show ?case"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>finite B; F \\<subseteq> D; B \\<subseteq> D\\<rbrakk>\n  \\<Longrightarrow> foldD D (\\<cdot>) e F \\<cdot> foldD D (\\<cdot>) e B =\n                    foldD D (\\<cdot>) e (F \\<union> B) \\<cdot>\n                    foldD D (\\<cdot>) e (F \\<inter> B)\n  finite B\n  insert x F \\<subseteq> D\n  B \\<subseteq> D\n\ngoal (1 subgoal):\n 1. foldD D (\\<cdot>) e (insert x F) \\<cdot> foldD D (\\<cdot>) e B =\n    foldD D (\\<cdot>) e (insert x F \\<union> B) \\<cdot>\n    foldD D (\\<cdot>) e (insert x F \\<inter> B)", "by(simp add: AC insert_absorb Int_insert_left Int_mono2\n                 LCD.foldD_insert [OF LCD.intro [of D]]\n                 LCD.foldD_closed [OF LCD.intro [of D]])"], ["proof (state)\nthis:\n  foldD D (\\<cdot>) e (insert x F) \\<cdot> foldD D (\\<cdot>) e B =\n  foldD D (\\<cdot>) e (insert x F \\<union> B) \\<cdot>\n  foldD D (\\<cdot>) e (insert x F \\<inter> B)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in ACeD) foldD_Un_disjoint:\n  \"\\<lbrakk>finite A; finite B; A Int B = {}; A \\<subseteq> D; B \\<subseteq> D\\<rbrakk> \\<Longrightarrow>\n    foldD D f e (A Un B) = foldD D f e A \\<cdot> foldD D f e B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite B; A \\<inter> B = {}; A \\<subseteq> D;\n     B \\<subseteq> D\\<rbrakk>\n    \\<Longrightarrow> foldD D (\\<cdot>) e (A \\<union> B) =\n                      foldD D (\\<cdot>) e A \\<cdot> foldD D (\\<cdot>) e B", "by (simp add: foldD_Un_Int\n    left_commute LCD.foldD_closed [OF LCD.intro [of D]])"], ["", "subsection \\<open>Finite Products\\<close>"], ["", "context monoid\nbegin"], ["", "definition finprod:: \"'b set => ('b => 'a) \\<Rightarrow> 'a\"\n  where \"finprod I f \\<equiv> if finite I then foldD M (composition \\<circ> f) \\<one> I else \\<one>\""], ["", "end"], ["", "(* monoid *)"], ["", "section \\<open>Groups\\<close>"], ["", "lemma comp_group_morphisms:\n  assumes \"group_homomorphism \\<eta> A multA oneA B multB oneB\" and\n\"group_homomorphism \\<theta> B multB oneB C multC oneC\"\nshows \"group_homomorphism (\\<theta> \\<circ> \\<eta> \\<down> A) A multA oneA C multC oneC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. group_homomorphism (\\<theta> \\<circ> \\<eta> \\<down> A) A multA oneA C\n     multC oneC", "using assms group_homomorphism_def comp_monoid_morphisms"], ["proof (prove)\nusing this:\n  group_homomorphism \\<eta> A multA oneA B multB oneB\n  group_homomorphism \\<theta> B multB oneB C multC oneC\n  group_homomorphism ?\\<eta> ?G ?composition ?unit ?G' ?composition'\n   ?unit' \\<equiv>\n  monoid_homomorphism ?\\<eta> ?G ?composition ?unit ?G' ?composition'\n   ?unit' \\<and>\n  Group_Theory.group ?G ?composition ?unit \\<and>\n  Group_Theory.group ?G' ?composition' ?unit'\n  \\<lbrakk>monoid_homomorphism ?\\<eta> ?A ?multA ?oneA ?B ?multB ?oneB;\n   monoid_homomorphism ?\\<theta> ?B ?multB ?oneB ?C ?multC ?oneC\\<rbrakk>\n  \\<Longrightarrow> monoid_homomorphism\n                     (?\\<theta> \\<circ> ?\\<eta> \\<down> ?A) ?A ?multA ?oneA\n                     ?C ?multC ?oneC\n\ngoal (1 subgoal):\n 1. group_homomorphism (\\<theta> \\<circ> \\<eta> \\<down> A) A multA oneA C\n     multC oneC", "by metis"], ["", "subsection \\<open>Subgroup Generated by a Subset\\<close>"], ["", "context group\nbegin"], ["", "inductive_set generate :: \"'a set \\<Rightarrow> 'a set\"\n  for H where\n    unit:  \"\\<one> \\<in> generate H\"\n  | incl: \"a \\<in> H \\<Longrightarrow> a \\<in> generate H\"\n  | inv:  \"a \\<in> H \\<Longrightarrow> inverse a \\<in> generate H\"\n  | mult:  \"a \\<in> generate H \\<Longrightarrow> b \\<in> generate H \\<Longrightarrow> a \\<cdot> b \\<in> generate H\""], ["", "lemma generate_into_G: \"a \\<in> generate (G \\<inter> H) \\<Longrightarrow> a \\<in> G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> generate (G \\<inter> H) \\<Longrightarrow> a \\<in> G", "by (induction rule: generate.induct) auto"], ["", "definition subgroup_generated :: \"'a set \\<Rightarrow> 'a set\"\n  where \"subgroup_generated S = generate (G \\<inter> S)\""], ["", "lemma inverse_in_subgroup_generated: \"a \\<in> subgroup_generated H \\<Longrightarrow> inverse a \\<in> subgroup_generated H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> subgroup_generated H \\<Longrightarrow>\n    local.inverse a \\<in> subgroup_generated H", "unfolding subgroup_generated_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> generate (G \\<inter> H) \\<Longrightarrow>\n    local.inverse a \\<in> generate (G \\<inter> H)", "proof (induction rule: generate.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. local.inverse \\<one> \\<in> generate (G \\<inter> H)\n 2. \\<And>a.\n       a \\<in> G \\<inter> H \\<Longrightarrow>\n       local.inverse a \\<in> generate (G \\<inter> H)\n 3. \\<And>a.\n       a \\<in> G \\<inter> H \\<Longrightarrow>\n       local.inverse (local.inverse a) \\<in> generate (G \\<inter> H)\n 4. \\<And>a b.\n       \\<lbrakk>a \\<in> generate (G \\<inter> H);\n        local.inverse a \\<in> generate (G \\<inter> H);\n        b \\<in> generate (G \\<inter> H);\n        local.inverse b \\<in> generate (G \\<inter> H)\\<rbrakk>\n       \\<Longrightarrow> local.inverse (a \\<cdot> b)\n                         \\<in> generate (G \\<inter> H)", "case (mult a b)"], ["proof (state)\nthis:\n  a \\<in> generate (G \\<inter> H)\n  b \\<in> generate (G \\<inter> H)\n  local.inverse a \\<in> generate (G \\<inter> H)\n  local.inverse b \\<in> generate (G \\<inter> H)\n\ngoal (4 subgoals):\n 1. local.inverse \\<one> \\<in> generate (G \\<inter> H)\n 2. \\<And>a.\n       a \\<in> G \\<inter> H \\<Longrightarrow>\n       local.inverse a \\<in> generate (G \\<inter> H)\n 3. \\<And>a.\n       a \\<in> G \\<inter> H \\<Longrightarrow>\n       local.inverse (local.inverse a) \\<in> generate (G \\<inter> H)\n 4. \\<And>a b.\n       \\<lbrakk>a \\<in> generate (G \\<inter> H);\n        local.inverse a \\<in> generate (G \\<inter> H);\n        b \\<in> generate (G \\<inter> H);\n        local.inverse b \\<in> generate (G \\<inter> H)\\<rbrakk>\n       \\<Longrightarrow> local.inverse (a \\<cdot> b)\n                         \\<in> generate (G \\<inter> H)", "then"], ["proof (chain)\npicking this:\n  a \\<in> generate (G \\<inter> H)\n  b \\<in> generate (G \\<inter> H)\n  local.inverse a \\<in> generate (G \\<inter> H)\n  local.inverse b \\<in> generate (G \\<inter> H)", "show ?case"], ["proof (prove)\nusing this:\n  a \\<in> generate (G \\<inter> H)\n  b \\<in> generate (G \\<inter> H)\n  local.inverse a \\<in> generate (G \\<inter> H)\n  local.inverse b \\<in> generate (G \\<inter> H)\n\ngoal (1 subgoal):\n 1. local.inverse (a \\<cdot> b) \\<in> generate (G \\<inter> H)", "by (simp add: generate.mult generate_into_G inverse_composition_commute)"], ["proof (state)\nthis:\n  local.inverse (a \\<cdot> b) \\<in> generate (G \\<inter> H)\n\ngoal (3 subgoals):\n 1. local.inverse \\<one> \\<in> generate (G \\<inter> H)\n 2. \\<And>a.\n       a \\<in> G \\<inter> H \\<Longrightarrow>\n       local.inverse a \\<in> generate (G \\<inter> H)\n 3. \\<And>a.\n       a \\<in> G \\<inter> H \\<Longrightarrow>\n       local.inverse (local.inverse a) \\<in> generate (G \\<inter> H)", "qed (auto simp add: generate.unit generate.incl generate.inv)"], ["", "lemma subgroup_generated_is_monoid:\n  fixes H\n  shows \"Group_Theory.monoid (subgroup_generated H) (\\<cdot>) \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Group_Theory.monoid (subgroup_generated H) (\\<cdot>) \\<one>", "unfolding subgroup_generated_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Group_Theory.monoid (generate (G \\<inter> H)) (\\<cdot>) \\<one>", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> generate (G \\<inter> H);\n        b \\<in> generate (G \\<inter> H)\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot> b \\<in> generate (G \\<inter> H)\n 2. \\<one> \\<in> generate (G \\<inter> H)\n 3. \\<And>a b c.\n       \\<lbrakk>a \\<in> generate (G \\<inter> H);\n        b \\<in> generate (G \\<inter> H);\n        c \\<in> generate (G \\<inter> H)\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot> b \\<cdot> c = a \\<cdot> (b \\<cdot> c)\n 4. \\<And>a.\n       a \\<in> generate (G \\<inter> H) \\<Longrightarrow>\n       \\<one> \\<cdot> a = a\n 5. \\<And>a.\n       a \\<in> generate (G \\<inter> H) \\<Longrightarrow>\n       a \\<cdot> \\<one> = a", "qed (auto simp: generate.unit generate.mult associative generate_into_G)"], ["", "lemma subgroup_generated_is_subset:\n  fixes H\n  shows \"subgroup_generated H \\<subseteq> G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgroup_generated H \\<subseteq> G", "using generate_into_G subgroup_generated_def"], ["proof (prove)\nusing this:\n  ?a \\<in> generate (G \\<inter> ?H) \\<Longrightarrow> ?a \\<in> G\n  subgroup_generated ?S = generate (G \\<inter> ?S)\n\ngoal (1 subgoal):\n 1. subgroup_generated H \\<subseteq> G", "by blast"], ["", "lemma subgroup_generated_is_subgroup:\n  fixes H\n  shows \"subgroup (subgroup_generated H) G (\\<cdot>) \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgroup (subgroup_generated H) G (\\<cdot>) \\<one>", "proof"], ["proof (state)\ngoal (7 subgoals):\n 1. subgroup_generated H \\<subseteq> G\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> subgroup_generated H;\n        b \\<in> subgroup_generated H\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot> b \\<in> subgroup_generated H\n 3. \\<one> \\<in> subgroup_generated H\n 4. \\<And>a b c.\n       \\<lbrakk>a \\<in> subgroup_generated H; b \\<in> subgroup_generated H;\n        c \\<in> subgroup_generated H\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot> b \\<cdot> c = a \\<cdot> (b \\<cdot> c)\n 5. \\<And>a.\n       a \\<in> subgroup_generated H \\<Longrightarrow> \\<one> \\<cdot> a = a\n 6. \\<And>a.\n       a \\<in> subgroup_generated H \\<Longrightarrow> a \\<cdot> \\<one> = a\n 7. \\<And>u.\n       u \\<in> subgroup_generated H \\<Longrightarrow>\n       monoid.invertible (subgroup_generated H) (\\<cdot>) \\<one> u", "show \"subgroup_generated H \\<subseteq> G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgroup_generated H \\<subseteq> G", "by (simp add: subgroup_generated_is_subset)"], ["proof (state)\nthis:\n  subgroup_generated H \\<subseteq> G\n\ngoal (6 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> subgroup_generated H;\n        b \\<in> subgroup_generated H\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot> b \\<in> subgroup_generated H\n 2. \\<one> \\<in> subgroup_generated H\n 3. \\<And>a b c.\n       \\<lbrakk>a \\<in> subgroup_generated H; b \\<in> subgroup_generated H;\n        c \\<in> subgroup_generated H\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot> b \\<cdot> c = a \\<cdot> (b \\<cdot> c)\n 4. \\<And>a.\n       a \\<in> subgroup_generated H \\<Longrightarrow> \\<one> \\<cdot> a = a\n 5. \\<And>a.\n       a \\<in> subgroup_generated H \\<Longrightarrow> a \\<cdot> \\<one> = a\n 6. \\<And>u.\n       u \\<in> subgroup_generated H \\<Longrightarrow>\n       monoid.invertible (subgroup_generated H) (\\<cdot>) \\<one> u", "show \"a \\<cdot> b \\<in> subgroup_generated H\"\n    if \"a \\<in> subgroup_generated H\" \"b \\<in> subgroup_generated H\" for a b"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<cdot> b \\<in> subgroup_generated H", "using that"], ["proof (prove)\nusing this:\n  a \\<in> subgroup_generated H\n  b \\<in> subgroup_generated H\n\ngoal (1 subgoal):\n 1. a \\<cdot> b \\<in> subgroup_generated H", "by (meson monoid.composition_closed subgroup_generated_is_monoid)"], ["proof (state)\nthis:\n  \\<lbrakk>?a1 \\<in> subgroup_generated H;\n   ?b1 \\<in> subgroup_generated H\\<rbrakk>\n  \\<Longrightarrow> ?a1 \\<cdot> ?b1 \\<in> subgroup_generated H\n\ngoal (5 subgoals):\n 1. \\<one> \\<in> subgroup_generated H\n 2. \\<And>a b c.\n       \\<lbrakk>a \\<in> subgroup_generated H; b \\<in> subgroup_generated H;\n        c \\<in> subgroup_generated H\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot> b \\<cdot> c = a \\<cdot> (b \\<cdot> c)\n 3. \\<And>a.\n       a \\<in> subgroup_generated H \\<Longrightarrow> \\<one> \\<cdot> a = a\n 4. \\<And>a.\n       a \\<in> subgroup_generated H \\<Longrightarrow> a \\<cdot> \\<one> = a\n 5. \\<And>u.\n       u \\<in> subgroup_generated H \\<Longrightarrow>\n       monoid.invertible (subgroup_generated H) (\\<cdot>) \\<one> u", "show \"a \\<cdot> b \\<cdot> c = a \\<cdot> (b \\<cdot> c)\"\n    if \"a \\<in> subgroup_generated H\" \"b \\<in> subgroup_generated H\" \"c \\<in> subgroup_generated H\"\n    for a b c"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<cdot> b \\<cdot> c = a \\<cdot> (b \\<cdot> c)", "using that"], ["proof (prove)\nusing this:\n  a \\<in> subgroup_generated H\n  b \\<in> subgroup_generated H\n  c \\<in> subgroup_generated H\n\ngoal (1 subgoal):\n 1. a \\<cdot> b \\<cdot> c = a \\<cdot> (b \\<cdot> c)", "by (meson monoid.associative subgroup_generated_is_monoid)"], ["proof (state)\nthis:\n  \\<lbrakk>?a1 \\<in> subgroup_generated H; ?b1 \\<in> subgroup_generated H;\n   ?c1 \\<in> subgroup_generated H\\<rbrakk>\n  \\<Longrightarrow> ?a1 \\<cdot> ?b1 \\<cdot> ?c1 =\n                    ?a1 \\<cdot> (?b1 \\<cdot> ?c1)\n\ngoal (4 subgoals):\n 1. \\<one> \\<in> subgroup_generated H\n 2. \\<And>a.\n       a \\<in> subgroup_generated H \\<Longrightarrow> \\<one> \\<cdot> a = a\n 3. \\<And>a.\n       a \\<in> subgroup_generated H \\<Longrightarrow> a \\<cdot> \\<one> = a\n 4. \\<And>u.\n       u \\<in> subgroup_generated H \\<Longrightarrow>\n       monoid.invertible (subgroup_generated H) (\\<cdot>) \\<one> u", "show \"monoid.invertible (subgroup_generated H) (\\<cdot>) \\<one> u\"\n    if \"u \\<in> subgroup_generated H\" for u"], ["proof (prove)\ngoal (1 subgoal):\n 1. monoid.invertible (subgroup_generated H) (\\<cdot>) \\<one> u", "proof (rule monoid.invertibleI )"], ["proof (state)\ngoal (5 subgoals):\n 1. Group_Theory.monoid (subgroup_generated H) (\\<cdot>) \\<one>\n 2. u \\<cdot> ?v = \\<one>\n 3. ?v \\<cdot> u = \\<one>\n 4. u \\<in> subgroup_generated H\n 5. ?v \\<in> subgroup_generated H", "show \"Group_Theory.monoid (subgroup_generated H) (\\<cdot>) \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Group_Theory.monoid (subgroup_generated H) (\\<cdot>) \\<one>", "by (simp add: subgroup_generated_is_monoid)"], ["proof (state)\nthis:\n  Group_Theory.monoid (subgroup_generated H) (\\<cdot>) \\<one>\n\ngoal (4 subgoals):\n 1. u \\<cdot> ?v = \\<one>\n 2. ?v \\<cdot> u = \\<one>\n 3. u \\<in> subgroup_generated H\n 4. ?v \\<in> subgroup_generated H", "show \"u \\<cdot> local.inverse u = \\<one>\" \"local.inverse u \\<cdot> u = \\<one>\" \"u \\<in> subgroup_generated H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<cdot> local.inverse u = \\<one> &&&\n    local.inverse u \\<cdot> u = \\<one> &&& u \\<in> subgroup_generated H", "using \\<open>subgroup_generated H \\<subseteq> G\\<close> that"], ["proof (prove)\nusing this:\n  subgroup_generated H \\<subseteq> G\n  u \\<in> subgroup_generated H\n\ngoal (1 subgoal):\n 1. u \\<cdot> local.inverse u = \\<one> &&&\n    local.inverse u \\<cdot> u = \\<one> &&& u \\<in> subgroup_generated H", "by auto"], ["proof (state)\nthis:\n  u \\<cdot> local.inverse u = \\<one>\n  local.inverse u \\<cdot> u = \\<one>\n  u \\<in> subgroup_generated H\n\ngoal (1 subgoal):\n 1. local.inverse u \\<in> subgroup_generated H", "show \"local.inverse u \\<in> subgroup_generated H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.inverse u \\<in> subgroup_generated H", "using inverse_in_subgroup_generated that"], ["proof (prove)\nusing this:\n  ?a \\<in> subgroup_generated ?H \\<Longrightarrow>\n  local.inverse ?a \\<in> subgroup_generated ?H\n  u \\<in> subgroup_generated H\n\ngoal (1 subgoal):\n 1. local.inverse u \\<in> subgroup_generated H", "by blast"], ["proof (state)\nthis:\n  local.inverse u \\<in> subgroup_generated H\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?u1 \\<in> subgroup_generated H \\<Longrightarrow>\n  monoid.invertible (subgroup_generated H) (\\<cdot>) \\<one> ?u1\n\ngoal (3 subgoals):\n 1. \\<one> \\<in> subgroup_generated H\n 2. \\<And>a.\n       a \\<in> subgroup_generated H \\<Longrightarrow> \\<one> \\<cdot> a = a\n 3. \\<And>a.\n       a \\<in> subgroup_generated H \\<Longrightarrow> a \\<cdot> \\<one> = a", "qed (auto simp: generate_into_G generate.unit subgroup_generated_def)"], ["", "end"], ["", "(* group *)"], ["", "section \\<open>Abelian Groups\\<close>"], ["", "context abelian_group\nbegin"], ["", "definition minus:: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a\" (infixl \"\\<hyphen>\" 70)\n  where \"x \\<hyphen> y \\<equiv> x \\<cdot> inverse y \""], ["", "definition finsum:: \"'b set \\<Rightarrow> ('b \\<Rightarrow> 'a) \\<Rightarrow> 'a\"\n  where \"finsum I f \\<equiv> finprod I f\""], ["", "(* A notation \"\\<Sum>i\\<in>I. f i\" should be introduced for a sum of a family of elements of an abelian group *)"], ["", "end"], ["", "(* abelian_group*)"], ["", "end"]]}