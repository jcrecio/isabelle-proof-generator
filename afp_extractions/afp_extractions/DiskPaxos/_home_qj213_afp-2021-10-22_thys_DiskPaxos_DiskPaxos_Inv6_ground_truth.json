{"file_name": "/home/qj213/afp-2021-10-22/thys/DiskPaxos/DiskPaxos_Inv6.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/DiskPaxos", "problem_names": ["theorem HInit_HInv6: \"HInit s \\<Longrightarrow> HInv6 s\"", "lemma HEndPhase2_Inv6_1:\n  assumes act: \"HEndPhase2 s s' p\"\n  and inv: \"HInv6 s\"\n  and inv2b: \"Inv2b s\"\n  and inv2c: \"Inv2c s\"\n  and inv3: \"HInv3 s\"\n  and inv5: \"HInv5_inner s p\"\n  and chosen': \"chosen s' \\<noteq> NotAnInput\"\n  shows \"valueChosen s' (chosen s')\"", "lemma valueChosen_equal_case:\n  assumes max_v: \"maxBalInp s b v\"\n  and Dmaj: \"D \\<in> MajoritySet\"\n  and asm_v: \"\\<forall>d\\<in>D. b \\<le> bal (disk s d p)\"\n  and max_w: \"maxBalInp s ba w\"\n  and Damaj: \"Da \\<in> MajoritySet\"\n  and asm_w: \"\\<forall>d\\<in>Da. ba \\<le> bal (disk s d pa)\"\n  and b_ba: \"b\\<le>ba\"\n  shows \"v=w\"", "lemma valueChosen_equal:\n  assumes v: \"valueChosen s v\"\n  and w: \"valueChosen s w\"\n  shows \"v=w\"", "lemma HEndPhase2_Inv6_2:\n  assumes act: \"HEndPhase2 s s' p\"\n  and inv: \"HInv6 s\"\n  and inv2b: \"Inv2b s\"\n  and inv2c: \"Inv2c s\"\n  and inv3: \"HInv3 s\"\n  and inv5: \"HInv5_inner s p\"\n  and asm: \"outpt s' r \\<noteq> NotAnInput\"\n  shows \"outpt s' r = chosen s'\"", "theorem HEndPhase2_Inv6:\n  assumes act: \"HEndPhase2 s s' p\"\n  and inv: \"HInv6 s\"\n  and inv2b: \"Inv2b s\"\n  and inv2c: \"Inv2c s\"\n  and inv3: \"HInv3 s\"\n  and inv5: \"HInv5_inner s p\"\n  shows \"HInv6 s'\"", "lemma outpt_chosen:\n  assumes outpt: \"outpt s = outpt s'\"\n  and inv2c: \"Inv2c s\"\n  and nextp: \"HNextPart s s'\"\n  shows \"chosen s' = chosen s\"", "lemma outpt_Inv6: \n  \"\\<lbrakk> outpt s = outpt s'; \\<forall>p. outpt s p \\<in> {chosen s, NotAnInput};\n     Inv2c s; HNextPart s s' \\<rbrakk> \\<Longrightarrow> \\<forall>p. outpt s' p \\<in> {chosen s', NotAnInput}\"", "theorem HStartBallot_Inv6:\n  assumes act: \"HStartBallot s s' p\"\n  and inv: \"HInv6 s\"\n  and inv2c: \"Inv2c s\"\n  shows \"HInv6 s'\"", "theorem HPhase1or2Write_Inv6:\n  assumes act: \"HPhase1or2Write s s' p d\"\n  and inv: \"HInv6 s\"\n  and inv4: \"HInv4a s p\"\n  and inv2c: \"Inv2c s\"\n  shows \"HInv6 s'\"", "theorem HPhase1or2ReadThen_Inv6:\n  assumes act: \"HPhase1or2ReadThen s s' p d q\"\n  and inv: \"HInv6 s\"\n  and inv2c: \"Inv2c s\"\n  shows \"HInv6 s'\"", "theorem HPhase1or2ReadElse_Inv6:\n  assumes act: \"HPhase1or2ReadElse s s' p d q\"\n  and inv: \"HInv6 s\"\n  and inv2c: \"Inv2c s\"\n  shows \"HInv6 s'\"", "theorem HEndPhase1_Inv6:\n  assumes act: \"HEndPhase1 s s' p\"\n  and inv: \"HInv6 s\"\n  and inv1: \"Inv1 s\"\n  and inv2a: \"Inv2a s\"\n  and inv2b: \"Inv2b s\"\n  and inv2c: \"Inv2c s\"\n  shows \"HInv6 s'\"", "lemma outpt_chosen_2:\n  assumes outpt: \"outpt s' = (outpt s) (p:= NotAnInput)\"\n  and inv2c: \"Inv2c s\"\n  and nextp: \"HNextPart s s'\"\n  shows \"chosen s = chosen s'\"", "lemma outpt_HInv6_2:\n  assumes outpt: \"outpt s' = (outpt s) (p:= NotAnInput)\"\n  and inv: \"\\<forall>p. outpt s p \\<in> {chosen s, NotAnInput}\"\n  and inv2c: \"Inv2c s\"\n  and nextp: \"HNextPart s s'\"\n  shows \"\\<forall>p. outpt s' p \\<in> {chosen s', NotAnInput}\"", "theorem HFail_Inv6:\n  assumes act: \"HFail s s' p\"\n  and inv: \"HInv6 s\"\n  and inv2c: \"Inv2c s\"\n  shows \"HInv6 s'\"", "theorem HPhase0Read_Inv6:\n  assumes act: \"HPhase0Read s s' p d\"\n  and inv: \"HInv6 s\"\n  and inv2c: \"Inv2c s\"\n  shows \"HInv6 s'\"", "theorem HEndPhase0_Inv6:\n  assumes act: \"HEndPhase0 s s' p\"\n  and inv: \"HInv6 s\"\n  and inv1: \"Inv1 s\"\n  and inv2c: \"Inv2c s\"\n  shows \"HInv6 s'\"", "lemma I2f:\n  assumes nxt: \"HNext s s'\"\n  and inv: \"HInv1 s \\<and> HInv2 s \\<and> HInv2 s' \\<and> HInv3 s \\<and> HInv4 s \\<and> HInv5 s \\<and> HInv6 s\"\n  shows \"HInv6 s'\""], "translations": [["", "theorem HInit_HInv6: \"HInit s \\<Longrightarrow> HInv6 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HInit s \\<Longrightarrow> HInv6 s", "by(auto simp add: HInit_def Init_def InitDB_def HInv6_def)"], ["", "lemma HEndPhase2_Inv6_1:\n  assumes act: \"HEndPhase2 s s' p\"\n  and inv: \"HInv6 s\"\n  and inv2b: \"Inv2b s\"\n  and inv2c: \"Inv2c s\"\n  and inv3: \"HInv3 s\"\n  and inv5: \"HInv5_inner s p\"\n  and chosen': \"chosen s' \\<noteq> NotAnInput\"\n  shows \"valueChosen s' (chosen s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valueChosen s' (chosen s')", "proof(cases \"chosen s=NotAnInput\")"], ["proof (state)\ngoal (2 subgoals):\n 1. chosen s = NotAnInput \\<Longrightarrow> valueChosen s' (chosen s')\n 2. chosen s \\<noteq> NotAnInput \\<Longrightarrow>\n    valueChosen s' (chosen s')", "from inv5 act"], ["proof (chain)\npicking this:\n  HInv5_inner s p\n  HEndPhase2 s s' p", "have inv5R: \"HInv5_inner_R s p\"\n    and phase: \"phase s p = 2\"\n    and ep2_maj: \"IsMajority {d .    d \\<in> disksWritten s p\n                                  \\<and> (\\<forall>q \\<in> UNIV - {p}. hasRead s p d q)}\""], ["proof (prove)\nusing this:\n  HInv5_inner s p\n  HEndPhase2 s s' p\n\ngoal (1 subgoal):\n 1. HInv5_inner_R s p &&&\n    phase s p = 2 &&&\n    IsMajority\n     {d \\<in> disksWritten s p. \\<forall>q\\<in>UNIV - {p}. hasRead s p d q}", "by(auto simp add: EndPhase2_def HInv5_inner_def)"], ["proof (state)\nthis:\n  HInv5_inner_R s p\n  phase s p = 2\n  IsMajority\n   {d \\<in> disksWritten s p. \\<forall>q\\<in>UNIV - {p}. hasRead s p d q}\n\ngoal (2 subgoals):\n 1. chosen s = NotAnInput \\<Longrightarrow> valueChosen s' (chosen s')\n 2. chosen s \\<noteq> NotAnInput \\<Longrightarrow>\n    valueChosen s' (chosen s')", "case True"], ["proof (state)\nthis:\n  chosen s = NotAnInput\n\ngoal (2 subgoals):\n 1. chosen s = NotAnInput \\<Longrightarrow> valueChosen s' (chosen s')\n 2. chosen s \\<noteq> NotAnInput \\<Longrightarrow>\n    valueChosen s' (chosen s')", "have p32: \"maxBalInp s (bal(dblock s p)) (inp(dblock s p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maxBalInp s (bal (dblock s p)) (inp (dblock s p))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. maxBalInp s (bal (dblock s p)) (inp (dblock s p))", "have \"\\<not>(\\<exists>D \\<in> MajoritySet.\\<exists>q. (\\<forall>d\\<in>D. bal (dblock s p) < mbal (disk s d q) \\<and> \\<not> hasRead s p d q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>D\\<in>MajoritySet.\n               \\<exists>q.\n                  \\<forall>d\\<in>D.\n                     bal (dblock s p) < mbal (disk s d q) \\<and>\n                     \\<not> hasRead s p d q)", "proof auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>D q.\n       D \\<in> MajoritySet \\<Longrightarrow>\n       \\<exists>d\\<in>D.\n          bal (dblock s p) < mbal (disk s d q) \\<longrightarrow>\n          hasRead s p d q", "fix D q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>D q.\n       D \\<in> MajoritySet \\<Longrightarrow>\n       \\<exists>d\\<in>D.\n          bal (dblock s p) < mbal (disk s d q) \\<longrightarrow>\n          hasRead s p d q", "assume Dmaj: \"D\\<in>MajoritySet\""], ["proof (state)\nthis:\n  D \\<in> MajoritySet\n\ngoal (1 subgoal):\n 1. \\<And>D q.\n       D \\<in> MajoritySet \\<Longrightarrow>\n       \\<exists>d\\<in>D.\n          bal (dblock s p) < mbal (disk s d q) \\<longrightarrow>\n          hasRead s p d q", "from ep2_maj Dmaj majorities_intersect"], ["proof (chain)\npicking this:\n  IsMajority\n   {d \\<in> disksWritten s p. \\<forall>q\\<in>UNIV - {p}. hasRead s p d q}\n  D \\<in> MajoritySet\n  \\<forall>S T.\n     IsMajority S \\<and> IsMajority T \\<longrightarrow>\n     S \\<inter> T \\<noteq> {}", "have \"\\<exists>d\\<in>D. d \\<in> disksWritten s p\n        \\<and> (\\<forall>q \\<in> UNIV - {p}. hasRead s p d q)\""], ["proof (prove)\nusing this:\n  IsMajority\n   {d \\<in> disksWritten s p. \\<forall>q\\<in>UNIV - {p}. hasRead s p d q}\n  D \\<in> MajoritySet\n  \\<forall>S T.\n     IsMajority S \\<and> IsMajority T \\<longrightarrow>\n     S \\<inter> T \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>d\\<in>D.\n       d \\<in> disksWritten s p \\<and>\n       (\\<forall>q\\<in>UNIV - {p}. hasRead s p d q)", "by(auto simp add: MajoritySet_def, blast)"], ["proof (state)\nthis:\n  \\<exists>d\\<in>D.\n     d \\<in> disksWritten s p \\<and>\n     (\\<forall>q\\<in>UNIV - {p}. hasRead s p d q)\n\ngoal (1 subgoal):\n 1. \\<And>D q.\n       D \\<in> MajoritySet \\<Longrightarrow>\n       \\<exists>d\\<in>D.\n          bal (dblock s p) < mbal (disk s d q) \\<longrightarrow>\n          hasRead s p d q", "then"], ["proof (chain)\npicking this:\n  \\<exists>d\\<in>D.\n     d \\<in> disksWritten s p \\<and>\n     (\\<forall>q\\<in>UNIV - {p}. hasRead s p d q)", "obtain d \n        where dinD: \"d\\<in>D\" \n        and ddisk: \"d \\<in> disksWritten s p\"\n        and dhasR: \"\\<forall>q \\<in> UNIV - {p}. hasRead s p d q\""], ["proof (prove)\nusing this:\n  \\<exists>d\\<in>D.\n     d \\<in> disksWritten s p \\<and>\n     (\\<forall>q\\<in>UNIV - {p}. hasRead s p d q)\n\ngoal (1 subgoal):\n 1. (\\<And>d.\n        \\<lbrakk>d \\<in> D; d \\<in> disksWritten s p;\n         \\<forall>q\\<in>UNIV - {p}. hasRead s p d q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  d \\<in> D\n  d \\<in> disksWritten s p\n  \\<forall>q\\<in>UNIV - {p}. hasRead s p d q\n\ngoal (1 subgoal):\n 1. \\<And>D q.\n       D \\<in> MajoritySet \\<Longrightarrow>\n       \\<exists>d\\<in>D.\n          bal (dblock s p) < mbal (disk s d q) \\<longrightarrow>\n          hasRead s p d q", "from inv2b"], ["proof (chain)\npicking this:\n  Inv2b s", "have \"Inv2b_inner s p d\""], ["proof (prove)\nusing this:\n  Inv2b s\n\ngoal (1 subgoal):\n 1. Inv2b_inner s p d", "by(auto simp add: Inv2b_def)"], ["proof (state)\nthis:\n  Inv2b_inner s p d\n\ngoal (1 subgoal):\n 1. \\<And>D q.\n       D \\<in> MajoritySet \\<Longrightarrow>\n       \\<exists>d\\<in>D.\n          bal (dblock s p) < mbal (disk s d q) \\<longrightarrow>\n          hasRead s p d q", "with ddisk"], ["proof (chain)\npicking this:\n  d \\<in> disksWritten s p\n  Inv2b_inner s p d", "have \"disk s d p = dblock s p\""], ["proof (prove)\nusing this:\n  d \\<in> disksWritten s p\n  Inv2b_inner s p d\n\ngoal (1 subgoal):\n 1. disk s d p = dblock s p", "by(auto simp add: Inv2b_inner_def)"], ["proof (state)\nthis:\n  disk s d p = dblock s p\n\ngoal (1 subgoal):\n 1. \\<And>D q.\n       D \\<in> MajoritySet \\<Longrightarrow>\n       \\<exists>d\\<in>D.\n          bal (dblock s p) < mbal (disk s d q) \\<longrightarrow>\n          hasRead s p d q", "with inv2c phase"], ["proof (chain)\npicking this:\n  Inv2c s\n  phase s p = 2\n  disk s d p = dblock s p", "have \"bal (dblock s p) = mbal(disk s d p)\""], ["proof (prove)\nusing this:\n  Inv2c s\n  phase s p = 2\n  disk s d p = dblock s p\n\ngoal (1 subgoal):\n 1. bal (dblock s p) = mbal (disk s d p)", "by(auto simp add: Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  bal (dblock s p) = mbal (disk s d p)\n\ngoal (1 subgoal):\n 1. \\<And>D q.\n       D \\<in> MajoritySet \\<Longrightarrow>\n       \\<exists>d\\<in>D.\n          bal (dblock s p) < mbal (disk s d q) \\<longrightarrow>\n          hasRead s p d q", "with dhasR dinD"], ["proof (chain)\npicking this:\n  \\<forall>q\\<in>UNIV - {p}. hasRead s p d q\n  d \\<in> D\n  bal (dblock s p) = mbal (disk s d p)", "show \"\\<exists>d\\<in>D. bal (dblock s p) < mbal (disk s d q) \\<longrightarrow> hasRead s p d q\""], ["proof (prove)\nusing this:\n  \\<forall>q\\<in>UNIV - {p}. hasRead s p d q\n  d \\<in> D\n  bal (dblock s p) = mbal (disk s d p)\n\ngoal (1 subgoal):\n 1. \\<exists>d\\<in>D.\n       bal (dblock s p) < mbal (disk s d q) \\<longrightarrow>\n       hasRead s p d q", "by auto"], ["proof (state)\nthis:\n  \\<exists>d\\<in>D.\n     bal (dblock s p) < mbal (disk s d q) \\<longrightarrow> hasRead s p d q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> (\\<exists>D\\<in>MajoritySet.\n             \\<exists>q.\n                \\<forall>d\\<in>D.\n                   bal (dblock s p) < mbal (disk s d q) \\<and>\n                   \\<not> hasRead s p d q)\n\ngoal (1 subgoal):\n 1. maxBalInp s (bal (dblock s p)) (inp (dblock s p))", "with inv5R"], ["proof (chain)\npicking this:\n  HInv5_inner_R s p\n  \\<not> (\\<exists>D\\<in>MajoritySet.\n             \\<exists>q.\n                \\<forall>d\\<in>D.\n                   bal (dblock s p) < mbal (disk s d q) \\<and>\n                   \\<not> hasRead s p d q)", "show ?thesis"], ["proof (prove)\nusing this:\n  HInv5_inner_R s p\n  \\<not> (\\<exists>D\\<in>MajoritySet.\n             \\<exists>q.\n                \\<forall>d\\<in>D.\n                   bal (dblock s p) < mbal (disk s d q) \\<and>\n                   \\<not> hasRead s p d q)\n\ngoal (1 subgoal):\n 1. maxBalInp s (bal (dblock s p)) (inp (dblock s p))", "by(auto simp add: HInv5_inner_R_def)"], ["proof (state)\nthis:\n  maxBalInp s (bal (dblock s p)) (inp (dblock s p))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  maxBalInp s (bal (dblock s p)) (inp (dblock s p))\n\ngoal (2 subgoals):\n 1. chosen s = NotAnInput \\<Longrightarrow> valueChosen s' (chosen s')\n 2. chosen s \\<noteq> NotAnInput \\<Longrightarrow>\n    valueChosen s' (chosen s')", "have p33: \"maxBalInp s' (bal(dblock s' p)) (chosen s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maxBalInp s' (bal (dblock s' p)) (chosen s')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. maxBalInp s' (bal (dblock s' p)) (chosen s')", "from act"], ["proof (chain)\npicking this:\n  HEndPhase2 s s' p", "have outpt': \"outpt s' = (outpt s) (p:= inp (dblock s p))\""], ["proof (prove)\nusing this:\n  HEndPhase2 s s' p\n\ngoal (1 subgoal):\n 1. outpt s' = (outpt s)(p := inp (dblock s p))", "by(auto simp add: EndPhase2_def)"], ["proof (state)\nthis:\n  outpt s' = (outpt s)(p := inp (dblock s p))\n\ngoal (1 subgoal):\n 1. maxBalInp s' (bal (dblock s' p)) (chosen s')", "have outpt'_q: \"\\<forall>q. p\\<noteq>q \\<longrightarrow> outpt s' q = NotAnInput\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>q. p \\<noteq> q \\<longrightarrow> outpt s' q = NotAnInput", "proof auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>q. p \\<noteq> q \\<Longrightarrow> outpt s' q = NotAnInput", "fix q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>q. p \\<noteq> q \\<Longrightarrow> outpt s' q = NotAnInput", "assume pnq: \"p\\<noteq>q\""], ["proof (state)\nthis:\n  p \\<noteq> q\n\ngoal (1 subgoal):\n 1. \\<And>q. p \\<noteq> q \\<Longrightarrow> outpt s' q = NotAnInput", "from outpt' pnq"], ["proof (chain)\npicking this:\n  outpt s' = (outpt s)(p := inp (dblock s p))\n  p \\<noteq> q", "have \"outpt s' q= outpt s q\""], ["proof (prove)\nusing this:\n  outpt s' = (outpt s)(p := inp (dblock s p))\n  p \\<noteq> q\n\ngoal (1 subgoal):\n 1. outpt s' q = outpt s q", "by(auto simp add: EndPhase2_def)"], ["proof (state)\nthis:\n  outpt s' q = outpt s q\n\ngoal (1 subgoal):\n 1. \\<And>q. p \\<noteq> q \\<Longrightarrow> outpt s' q = NotAnInput", "with True inv2c"], ["proof (chain)\npicking this:\n  chosen s = NotAnInput\n  Inv2c s\n  outpt s' q = outpt s q", "show \"outpt s' q= NotAnInput\""], ["proof (prove)\nusing this:\n  chosen s = NotAnInput\n  Inv2c s\n  outpt s' q = outpt s q\n\ngoal (1 subgoal):\n 1. outpt s' q = NotAnInput", "by(auto simp add: Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  outpt s' q = NotAnInput\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>q. p \\<noteq> q \\<longrightarrow> outpt s' q = NotAnInput\n\ngoal (1 subgoal):\n 1. maxBalInp s' (bal (dblock s' p)) (chosen s')", "from True act chosen'"], ["proof (chain)\npicking this:\n  chosen s = NotAnInput\n  HEndPhase2 s s' p\n  chosen s' \\<noteq> NotAnInput", "have \"chosen s' = inp (dblock s p)\""], ["proof (prove)\nusing this:\n  chosen s = NotAnInput\n  HEndPhase2 s s' p\n  chosen s' \\<noteq> NotAnInput\n\ngoal (1 subgoal):\n 1. chosen s' = inp (dblock s p)", "proof(auto simp add: HNextPart_def split: if_split_asm)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>pa.\n       \\<lbrakk>outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput) \\<noteq>\n                NotAnInput;\n        chosen s = NotAnInput; outpt s' pa \\<noteq> NotAnInput;\n        EndPhase2 s s' p;\n        chosen s' = outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput);\n        allInput s' = allInput s \\<union> range (inpt s')\\<rbrakk>\n       \\<Longrightarrow> outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput) =\n                         inp (dblock s p)", "fix pa"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>pa.\n       \\<lbrakk>outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput) \\<noteq>\n                NotAnInput;\n        chosen s = NotAnInput; outpt s' pa \\<noteq> NotAnInput;\n        EndPhase2 s s' p;\n        chosen s' = outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput);\n        allInput s' = allInput s \\<union> range (inpt s')\\<rbrakk>\n       \\<Longrightarrow> outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput) =\n                         inp (dblock s p)", "assume outpt'_pa: \"outpt s' pa \\<noteq> NotAnInput\""], ["proof (state)\nthis:\n  outpt s' pa \\<noteq> NotAnInput\n\ngoal (1 subgoal):\n 1. \\<And>pa.\n       \\<lbrakk>outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput) \\<noteq>\n                NotAnInput;\n        chosen s = NotAnInput; outpt s' pa \\<noteq> NotAnInput;\n        EndPhase2 s s' p;\n        chosen s' = outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput);\n        allInput s' = allInput s \\<union> range (inpt s')\\<rbrakk>\n       \\<Longrightarrow> outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput) =\n                         inp (dblock s p)", "from outpt'_q"], ["proof (chain)\npicking this:\n  \\<forall>q. p \\<noteq> q \\<longrightarrow> outpt s' q = NotAnInput", "have someeq2: \"\\<And>pa. outpt s' pa \\<noteq> NotAnInput \\<Longrightarrow> pa=p\""], ["proof (prove)\nusing this:\n  \\<forall>q. p \\<noteq> q \\<longrightarrow> outpt s' q = NotAnInput\n\ngoal (1 subgoal):\n 1. \\<And>pa. outpt s' pa \\<noteq> NotAnInput \\<Longrightarrow> pa = p", "by auto"], ["proof (state)\nthis:\n  outpt s' ?pa \\<noteq> NotAnInput \\<Longrightarrow> ?pa = p\n\ngoal (1 subgoal):\n 1. \\<And>pa.\n       \\<lbrakk>outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput) \\<noteq>\n                NotAnInput;\n        chosen s = NotAnInput; outpt s' pa \\<noteq> NotAnInput;\n        EndPhase2 s s' p;\n        chosen s' = outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput);\n        allInput s' = allInput s \\<union> range (inpt s')\\<rbrakk>\n       \\<Longrightarrow> outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput) =\n                         inp (dblock s p)", "with outpt'_pa"], ["proof (chain)\npicking this:\n  outpt s' pa \\<noteq> NotAnInput\n  outpt s' ?pa \\<noteq> NotAnInput \\<Longrightarrow> ?pa = p", "have \"outpt s' p \\<noteq> NotAnInput\""], ["proof (prove)\nusing this:\n  outpt s' pa \\<noteq> NotAnInput\n  outpt s' ?pa \\<noteq> NotAnInput \\<Longrightarrow> ?pa = p\n\ngoal (1 subgoal):\n 1. outpt s' p \\<noteq> NotAnInput", "by auto"], ["proof (state)\nthis:\n  outpt s' p \\<noteq> NotAnInput\n\ngoal (1 subgoal):\n 1. \\<And>pa.\n       \\<lbrakk>outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput) \\<noteq>\n                NotAnInput;\n        chosen s = NotAnInput; outpt s' pa \\<noteq> NotAnInput;\n        EndPhase2 s s' p;\n        chosen s' = outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput);\n        allInput s' = allInput s \\<union> range (inpt s')\\<rbrakk>\n       \\<Longrightarrow> outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput) =\n                         inp (dblock s p)", "from some_equality[of \"\\<lambda>p. outpt s' p \\<noteq> NotAnInput\", OF this someeq2]"], ["proof (chain)\npicking this:\n  (\\<And>x.\n      outpt s' x \\<noteq> NotAnInput \\<Longrightarrow>\n      outpt s' x \\<noteq> NotAnInput) \\<Longrightarrow>\n  (SOME x. outpt s' x \\<noteq> NotAnInput) = p", "have \"(SOME p. outpt s' p \\<noteq> NotAnInput) = p\""], ["proof (prove)\nusing this:\n  (\\<And>x.\n      outpt s' x \\<noteq> NotAnInput \\<Longrightarrow>\n      outpt s' x \\<noteq> NotAnInput) \\<Longrightarrow>\n  (SOME x. outpt s' x \\<noteq> NotAnInput) = p\n\ngoal (1 subgoal):\n 1. (SOME p. outpt s' p \\<noteq> NotAnInput) = p", "."], ["proof (state)\nthis:\n  (SOME p. outpt s' p \\<noteq> NotAnInput) = p\n\ngoal (1 subgoal):\n 1. \\<And>pa.\n       \\<lbrakk>outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput) \\<noteq>\n                NotAnInput;\n        chosen s = NotAnInput; outpt s' pa \\<noteq> NotAnInput;\n        EndPhase2 s s' p;\n        chosen s' = outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput);\n        allInput s' = allInput s \\<union> range (inpt s')\\<rbrakk>\n       \\<Longrightarrow> outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput) =\n                         inp (dblock s p)", "with outpt'"], ["proof (chain)\npicking this:\n  outpt s' = (outpt s)(p := inp (dblock s p))\n  (SOME p. outpt s' p \\<noteq> NotAnInput) = p", "show  \"outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput) = inp (dblock s p)\""], ["proof (prove)\nusing this:\n  outpt s' = (outpt s)(p := inp (dblock s p))\n  (SOME p. outpt s' p \\<noteq> NotAnInput) = p\n\ngoal (1 subgoal):\n 1. outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput) = inp (dblock s p)", "by auto"], ["proof (state)\nthis:\n  outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput) = inp (dblock s p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  chosen s' = inp (dblock s p)\n\ngoal (1 subgoal):\n 1. maxBalInp s' (bal (dblock s' p)) (chosen s')", "moreover"], ["proof (state)\nthis:\n  chosen s' = inp (dblock s p)\n\ngoal (1 subgoal):\n 1. maxBalInp s' (bal (dblock s' p)) (chosen s')", "from act"], ["proof (chain)\npicking this:\n  HEndPhase2 s s' p", "have\"bal(dblock s' p) = bal(dblock s p)\""], ["proof (prove)\nusing this:\n  HEndPhase2 s s' p\n\ngoal (1 subgoal):\n 1. bal (dblock s' p) = bal (dblock s p)", "by(auto simp add: EndPhase2_def)"], ["proof (state)\nthis:\n  bal (dblock s' p) = bal (dblock s p)\n\ngoal (1 subgoal):\n 1. maxBalInp s' (bal (dblock s' p)) (chosen s')", "ultimately"], ["proof (chain)\npicking this:\n  chosen s' = inp (dblock s p)\n  bal (dblock s' p) = bal (dblock s p)", "have \"maxBalInp s (bal(dblock s' p)) (chosen s')\""], ["proof (prove)\nusing this:\n  chosen s' = inp (dblock s p)\n  bal (dblock s' p) = bal (dblock s p)\n\ngoal (1 subgoal):\n 1. maxBalInp s (bal (dblock s' p)) (chosen s')", "using p32"], ["proof (prove)\nusing this:\n  chosen s' = inp (dblock s p)\n  bal (dblock s' p) = bal (dblock s p)\n  maxBalInp s (bal (dblock s p)) (inp (dblock s p))\n\ngoal (1 subgoal):\n 1. maxBalInp s (bal (dblock s' p)) (chosen s')", "by auto"], ["proof (state)\nthis:\n  maxBalInp s (bal (dblock s' p)) (chosen s')\n\ngoal (1 subgoal):\n 1. maxBalInp s' (bal (dblock s' p)) (chosen s')", "with HEndPhase2_allBlocks[OF act]"], ["proof (chain)\npicking this:\n  allBlocks s' \\<subseteq> allBlocks s\n  maxBalInp s (bal (dblock s' p)) (chosen s')", "show ?thesis"], ["proof (prove)\nusing this:\n  allBlocks s' \\<subseteq> allBlocks s\n  maxBalInp s (bal (dblock s' p)) (chosen s')\n\ngoal (1 subgoal):\n 1. maxBalInp s' (bal (dblock s' p)) (chosen s')", "by(auto simp add: maxBalInp_def)"], ["proof (state)\nthis:\n  maxBalInp s' (bal (dblock s' p)) (chosen s')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  maxBalInp s' (bal (dblock s' p)) (chosen s')\n\ngoal (2 subgoals):\n 1. chosen s = NotAnInput \\<Longrightarrow> valueChosen s' (chosen s')\n 2. chosen s \\<noteq> NotAnInput \\<Longrightarrow>\n    valueChosen s' (chosen s')", "from ep2_maj inv2b majorities_intersect"], ["proof (chain)\npicking this:\n  IsMajority\n   {d \\<in> disksWritten s p. \\<forall>q\\<in>UNIV - {p}. hasRead s p d q}\n  Inv2b s\n  \\<forall>S T.\n     IsMajority S \\<and> IsMajority T \\<longrightarrow>\n     S \\<inter> T \\<noteq> {}", "have \"\\<exists>D\\<in>MajoritySet. (\\<forall>d\\<in>D.   disk s d p = dblock s p\n                              \\<and> (\\<forall>q \\<in> UNIV - {p}. hasRead s p d q))\""], ["proof (prove)\nusing this:\n  IsMajority\n   {d \\<in> disksWritten s p. \\<forall>q\\<in>UNIV - {p}. hasRead s p d q}\n  Inv2b s\n  \\<forall>S T.\n     IsMajority S \\<and> IsMajority T \\<longrightarrow>\n     S \\<inter> T \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>D\\<in>MajoritySet.\n       \\<forall>d\\<in>D.\n          disk s d p = dblock s p \\<and>\n          (\\<forall>q\\<in>UNIV - {p}. hasRead s p d q)", "by(auto simp add: Inv2b_def Inv2b_inner_def MajoritySet_def)"], ["proof (state)\nthis:\n  \\<exists>D\\<in>MajoritySet.\n     \\<forall>d\\<in>D.\n        disk s d p = dblock s p \\<and>\n        (\\<forall>q\\<in>UNIV - {p}. hasRead s p d q)\n\ngoal (2 subgoals):\n 1. chosen s = NotAnInput \\<Longrightarrow> valueChosen s' (chosen s')\n 2. chosen s \\<noteq> NotAnInput \\<Longrightarrow>\n    valueChosen s' (chosen s')", "then"], ["proof (chain)\npicking this:\n  \\<exists>D\\<in>MajoritySet.\n     \\<forall>d\\<in>D.\n        disk s d p = dblock s p \\<and>\n        (\\<forall>q\\<in>UNIV - {p}. hasRead s p d q)", "obtain D \n    where Dmaj: \"D\\<in>MajoritySet\" \n    and p34: \"\\<forall>d\\<in>D.   disk s d p = dblock s p\n    \\<and> (\\<forall>q \\<in> UNIV - {p}. hasRead s p d q)\""], ["proof (prove)\nusing this:\n  \\<exists>D\\<in>MajoritySet.\n     \\<forall>d\\<in>D.\n        disk s d p = dblock s p \\<and>\n        (\\<forall>q\\<in>UNIV - {p}. hasRead s p d q)\n\ngoal (1 subgoal):\n 1. (\\<And>D.\n        \\<lbrakk>D \\<in> MajoritySet;\n         \\<forall>d\\<in>D.\n            disk s d p = dblock s p \\<and>\n            (\\<forall>q\\<in>UNIV - {p}. hasRead s p d q)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  D \\<in> MajoritySet\n  \\<forall>d\\<in>D.\n     disk s d p = dblock s p \\<and>\n     (\\<forall>q\\<in>UNIV - {p}. hasRead s p d q)\n\ngoal (2 subgoals):\n 1. chosen s = NotAnInput \\<Longrightarrow> valueChosen s' (chosen s')\n 2. chosen s \\<noteq> NotAnInput \\<Longrightarrow>\n    valueChosen s' (chosen s')", "have p35: \"\\<forall>q. \\<forall>d\\<in>D. ( phase s q=1 \\<and> bal(dblock s p)\\<le>mbal(dblock s q)\\<and> hasRead s q d p) \n                        \\<longrightarrow> \\<lparr>block=dblock s p, proc=p\\<rparr>\\<in>blocksRead s q d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>q.\n       \\<forall>d\\<in>D.\n          phase s q = 1 \\<and>\n          bal (dblock s p) \\<le> mbal (dblock s q) \\<and>\n          hasRead s q d p \\<longrightarrow>\n          \\<lparr>block = dblock s p, proc = p\\<rparr>\n          \\<in> blocksRead s q d", "proof auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>q d.\n       \\<lbrakk>d \\<in> D; phase s q = Suc 0;\n        bal (dblock s p) \\<le> mbal (dblock s q); hasRead s q d p\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>block = dblock s p, proc = p\\<rparr>\n                         \\<in> blocksRead s q d", "fix q d"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>q d.\n       \\<lbrakk>d \\<in> D; phase s q = Suc 0;\n        bal (dblock s p) \\<le> mbal (dblock s q); hasRead s q d p\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>block = dblock s p, proc = p\\<rparr>\n                         \\<in> blocksRead s q d", "assume dD: \"d\\<in>D\" and phase_q: \"phase s q= Suc 0\" \n      and bal_mbal: \"bal(dblock s p)\\<le>mbal(dblock s q)\" and hasRead: \"hasRead s q d p\""], ["proof (state)\nthis:\n  d \\<in> D\n  phase s q = Suc 0\n  bal (dblock s p) \\<le> mbal (dblock s q)\n  hasRead s q d p\n\ngoal (1 subgoal):\n 1. \\<And>q d.\n       \\<lbrakk>d \\<in> D; phase s q = Suc 0;\n        bal (dblock s p) \\<le> mbal (dblock s q); hasRead s q d p\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>block = dblock s p, proc = p\\<rparr>\n                         \\<in> blocksRead s q d", "from phase inv2c"], ["proof (chain)\npicking this:\n  phase s p = 2\n  Inv2c s", "have \"bal(dblock s p)=mbal(dblock s p)\""], ["proof (prove)\nusing this:\n  phase s p = 2\n  Inv2c s\n\ngoal (1 subgoal):\n 1. bal (dblock s p) = mbal (dblock s p)", "by(auto simp add: Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  bal (dblock s p) = mbal (dblock s p)\n\ngoal (1 subgoal):\n 1. \\<And>q d.\n       \\<lbrakk>d \\<in> D; phase s q = Suc 0;\n        bal (dblock s p) \\<le> mbal (dblock s q); hasRead s q d p\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>block = dblock s p, proc = p\\<rparr>\n                         \\<in> blocksRead s q d", "moreover"], ["proof (state)\nthis:\n  bal (dblock s p) = mbal (dblock s p)\n\ngoal (1 subgoal):\n 1. \\<And>q d.\n       \\<lbrakk>d \\<in> D; phase s q = Suc 0;\n        bal (dblock s p) \\<le> mbal (dblock s q); hasRead s q d p\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>block = dblock s p, proc = p\\<rparr>\n                         \\<in> blocksRead s q d", "from inv2c phase"], ["proof (chain)\npicking this:\n  Inv2c s\n  phase s p = 2", "have \"\\<forall>br\\<in>blocksRead s p d. mbal(block br) < mbal(dblock s p)\""], ["proof (prove)\nusing this:\n  Inv2c s\n  phase s p = 2\n\ngoal (1 subgoal):\n 1. \\<forall>br\\<in>blocksRead s p d. mbal (block br) < mbal (dblock s p)", "by(auto simp add: Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  \\<forall>br\\<in>blocksRead s p d. mbal (block br) < mbal (dblock s p)\n\ngoal (1 subgoal):\n 1. \\<And>q d.\n       \\<lbrakk>d \\<in> D; phase s q = Suc 0;\n        bal (dblock s p) \\<le> mbal (dblock s q); hasRead s q d p\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>block = dblock s p, proc = p\\<rparr>\n                         \\<in> blocksRead s q d", "ultimately"], ["proof (chain)\npicking this:\n  bal (dblock s p) = mbal (dblock s p)\n  \\<forall>br\\<in>blocksRead s p d. mbal (block br) < mbal (dblock s p)", "have p41: \"\\<lparr>block=dblock s q, proc=q\\<rparr>\\<notin>blocksRead s p d\""], ["proof (prove)\nusing this:\n  bal (dblock s p) = mbal (dblock s p)\n  \\<forall>br\\<in>blocksRead s p d. mbal (block br) < mbal (dblock s p)\n\ngoal (1 subgoal):\n 1. \\<lparr>block = dblock s q, proc = q\\<rparr> \\<notin> blocksRead s p d", "using bal_mbal"], ["proof (prove)\nusing this:\n  bal (dblock s p) = mbal (dblock s p)\n  \\<forall>br\\<in>blocksRead s p d. mbal (block br) < mbal (dblock s p)\n  bal (dblock s p) \\<le> mbal (dblock s q)\n\ngoal (1 subgoal):\n 1. \\<lparr>block = dblock s q, proc = q\\<rparr> \\<notin> blocksRead s p d", "by auto"], ["proof (state)\nthis:\n  \\<lparr>block = dblock s q, proc = q\\<rparr> \\<notin> blocksRead s p d\n\ngoal (1 subgoal):\n 1. \\<And>q d.\n       \\<lbrakk>d \\<in> D; phase s q = Suc 0;\n        bal (dblock s p) \\<le> mbal (dblock s q); hasRead s q d p\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>block = dblock s p, proc = p\\<rparr>\n                         \\<in> blocksRead s q d", "from phase phase_q"], ["proof (chain)\npicking this:\n  phase s p = 2\n  phase s q = Suc 0", "have \"p\\<noteq>q\""], ["proof (prove)\nusing this:\n  phase s p = 2\n  phase s q = Suc 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> q", "by auto"], ["proof (state)\nthis:\n  p \\<noteq> q\n\ngoal (1 subgoal):\n 1. \\<And>q d.\n       \\<lbrakk>d \\<in> D; phase s q = Suc 0;\n        bal (dblock s p) \\<le> mbal (dblock s q); hasRead s q d p\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>block = dblock s p, proc = p\\<rparr>\n                         \\<in> blocksRead s q d", "with p34 dD"], ["proof (chain)\npicking this:\n  \\<forall>d\\<in>D.\n     disk s d p = dblock s p \\<and>\n     (\\<forall>q\\<in>UNIV - {p}. hasRead s p d q)\n  d \\<in> D\n  p \\<noteq> q", "have \"hasRead s p d q\""], ["proof (prove)\nusing this:\n  \\<forall>d\\<in>D.\n     disk s d p = dblock s p \\<and>\n     (\\<forall>q\\<in>UNIV - {p}. hasRead s p d q)\n  d \\<in> D\n  p \\<noteq> q\n\ngoal (1 subgoal):\n 1. hasRead s p d q", "by auto"], ["proof (state)\nthis:\n  hasRead s p d q\n\ngoal (1 subgoal):\n 1. \\<And>q d.\n       \\<lbrakk>d \\<in> D; phase s q = Suc 0;\n        bal (dblock s p) \\<le> mbal (dblock s q); hasRead s q d p\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>block = dblock s p, proc = p\\<rparr>\n                         \\<in> blocksRead s q d", "with phase phase_q hasRead inv3 p41"], ["proof (chain)\npicking this:\n  phase s p = 2\n  phase s q = Suc 0\n  hasRead s q d p\n  HInv3 s\n  \\<lparr>block = dblock s q, proc = q\\<rparr> \\<notin> blocksRead s p d\n  hasRead s p d q", "show \"\\<lparr>block = dblock s p, proc = p\\<rparr> \\<in> blocksRead s q d\""], ["proof (prove)\nusing this:\n  phase s p = 2\n  phase s q = Suc 0\n  hasRead s q d p\n  HInv3 s\n  \\<lparr>block = dblock s q, proc = q\\<rparr> \\<notin> blocksRead s p d\n  hasRead s p d q\n\ngoal (1 subgoal):\n 1. \\<lparr>block = dblock s p, proc = p\\<rparr> \\<in> blocksRead s q d", "by(auto simp add: HInv3_def HInv3_inner_def \n                        HInv3_L_def HInv3_R_def)"], ["proof (state)\nthis:\n  \\<lparr>block = dblock s p, proc = p\\<rparr> \\<in> blocksRead s q d\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>q.\n     \\<forall>d\\<in>D.\n        phase s q = 1 \\<and>\n        bal (dblock s p) \\<le> mbal (dblock s q) \\<and>\n        hasRead s q d p \\<longrightarrow>\n        \\<lparr>block = dblock s p, proc = p\\<rparr> \\<in> blocksRead s q d\n\ngoal (2 subgoals):\n 1. chosen s = NotAnInput \\<Longrightarrow> valueChosen s' (chosen s')\n 2. chosen s \\<noteq> NotAnInput \\<Longrightarrow>\n    valueChosen s' (chosen s')", "have p36: \"\\<forall>q. \\<forall>d\\<in>D. phase s' q=1 \\<and> bal(dblock s p) \\<le> mbal(dblock s' q) \\<and> hasRead s' q d p\n                        \\<longrightarrow> (\\<exists>br\\<in>blocksRead s' q d. bal(block br) = bal(dblock s p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>q.\n       \\<forall>d\\<in>D.\n          phase s' q = 1 \\<and>\n          bal (dblock s p) \\<le> mbal (dblock s' q) \\<and>\n          hasRead s' q d p \\<longrightarrow>\n          (\\<exists>br\\<in>blocksRead s' q d.\n              bal (block br) = bal (dblock s p))", "proof(auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>q d.\n       \\<lbrakk>d \\<in> D; phase s' q = Suc 0;\n        bal (dblock s p) \\<le> mbal (dblock s' q); hasRead s' q d p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>br\\<in>blocksRead s' q d.\n                            bal (block br) = bal (dblock s p)", "fix q d"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>q d.\n       \\<lbrakk>d \\<in> D; phase s' q = Suc 0;\n        bal (dblock s p) \\<le> mbal (dblock s' q); hasRead s' q d p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>br\\<in>blocksRead s' q d.\n                            bal (block br) = bal (dblock s p)", "assume dD: \"d \\<in> D\" and phase_q: \"phase s' q = Suc 0\" \n           and bal: \"bal (dblock s p) \\<le> mbal (dblock s' q)\"\n           and hasRead: \"hasRead s' q d p\""], ["proof (state)\nthis:\n  d \\<in> D\n  phase s' q = Suc 0\n  bal (dblock s p) \\<le> mbal (dblock s' q)\n  hasRead s' q d p\n\ngoal (1 subgoal):\n 1. \\<And>q d.\n       \\<lbrakk>d \\<in> D; phase s' q = Suc 0;\n        bal (dblock s p) \\<le> mbal (dblock s' q); hasRead s' q d p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>br\\<in>blocksRead s' q d.\n                            bal (block br) = bal (dblock s p)", "from phase_q act"], ["proof (chain)\npicking this:\n  phase s' q = Suc 0\n  HEndPhase2 s s' p", "have \"phase s' q=phase s q \\<and> dblock s' q=dblock s q \\<and> hasRead s' q d p=hasRead s q d p \\<and> blocksRead s' q d=blocksRead s q d\""], ["proof (prove)\nusing this:\n  phase s' q = Suc 0\n  HEndPhase2 s s' p\n\ngoal (1 subgoal):\n 1. phase s' q = phase s q \\<and>\n    dblock s' q = dblock s q \\<and>\n    hasRead s' q d p = hasRead s q d p \\<and>\n    blocksRead s' q d = blocksRead s q d", "by(auto simp add: EndPhase2_def hasRead_def InitializePhase_def)"], ["proof (state)\nthis:\n  phase s' q = phase s q \\<and>\n  dblock s' q = dblock s q \\<and>\n  hasRead s' q d p = hasRead s q d p \\<and>\n  blocksRead s' q d = blocksRead s q d\n\ngoal (1 subgoal):\n 1. \\<And>q d.\n       \\<lbrakk>d \\<in> D; phase s' q = Suc 0;\n        bal (dblock s p) \\<le> mbal (dblock s' q); hasRead s' q d p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>br\\<in>blocksRead s' q d.\n                            bal (block br) = bal (dblock s p)", "with p35 phase_q bal hasRead dD"], ["proof (chain)\npicking this:\n  \\<forall>q.\n     \\<forall>d\\<in>D.\n        phase s q = 1 \\<and>\n        bal (dblock s p) \\<le> mbal (dblock s q) \\<and>\n        hasRead s q d p \\<longrightarrow>\n        \\<lparr>block = dblock s p, proc = p\\<rparr> \\<in> blocksRead s q d\n  phase s' q = Suc 0\n  bal (dblock s p) \\<le> mbal (dblock s' q)\n  hasRead s' q d p\n  d \\<in> D\n  phase s' q = phase s q \\<and>\n  dblock s' q = dblock s q \\<and>\n  hasRead s' q d p = hasRead s q d p \\<and>\n  blocksRead s' q d = blocksRead s q d", "have \"\\<lparr>block=dblock s p, proc=p\\<rparr>\\<in>blocksRead s' q d\""], ["proof (prove)\nusing this:\n  \\<forall>q.\n     \\<forall>d\\<in>D.\n        phase s q = 1 \\<and>\n        bal (dblock s p) \\<le> mbal (dblock s q) \\<and>\n        hasRead s q d p \\<longrightarrow>\n        \\<lparr>block = dblock s p, proc = p\\<rparr> \\<in> blocksRead s q d\n  phase s' q = Suc 0\n  bal (dblock s p) \\<le> mbal (dblock s' q)\n  hasRead s' q d p\n  d \\<in> D\n  phase s' q = phase s q \\<and>\n  dblock s' q = dblock s q \\<and>\n  hasRead s' q d p = hasRead s q d p \\<and>\n  blocksRead s' q d = blocksRead s q d\n\ngoal (1 subgoal):\n 1. \\<lparr>block = dblock s p, proc = p\\<rparr> \\<in> blocksRead s' q d", "by auto"], ["proof (state)\nthis:\n  \\<lparr>block = dblock s p, proc = p\\<rparr> \\<in> blocksRead s' q d\n\ngoal (1 subgoal):\n 1. \\<And>q d.\n       \\<lbrakk>d \\<in> D; phase s' q = Suc 0;\n        bal (dblock s p) \\<le> mbal (dblock s' q); hasRead s' q d p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>br\\<in>blocksRead s' q d.\n                            bal (block br) = bal (dblock s p)", "thus \"\\<exists>br\\<in>blocksRead s' q d. bal(block br) = bal(dblock s p)\""], ["proof (prove)\nusing this:\n  \\<lparr>block = dblock s p, proc = p\\<rparr> \\<in> blocksRead s' q d\n\ngoal (1 subgoal):\n 1. \\<exists>br\\<in>blocksRead s' q d. bal (block br) = bal (dblock s p)", "by force"], ["proof (state)\nthis:\n  \\<exists>br\\<in>blocksRead s' q d. bal (block br) = bal (dblock s p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>q.\n     \\<forall>d\\<in>D.\n        phase s' q = 1 \\<and>\n        bal (dblock s p) \\<le> mbal (dblock s' q) \\<and>\n        hasRead s' q d p \\<longrightarrow>\n        (\\<exists>br\\<in>blocksRead s' q d.\n            bal (block br) = bal (dblock s p))\n\ngoal (2 subgoals):\n 1. chosen s = NotAnInput \\<Longrightarrow> valueChosen s' (chosen s')\n 2. chosen s \\<noteq> NotAnInput \\<Longrightarrow>\n    valueChosen s' (chosen s')", "hence p36_2: \"\\<forall>q. \\<forall>d\\<in>D. phase s' q=1 \\<and> bal(dblock s p) \\<le> mbal(dblock s' q) \\<and> hasRead s' q d p\n                         \\<longrightarrow> (\\<exists>br\\<in>blocksRead s' q d. bal(dblock s p) \\<le> bal(block br))\""], ["proof (prove)\nusing this:\n  \\<forall>q.\n     \\<forall>d\\<in>D.\n        phase s' q = 1 \\<and>\n        bal (dblock s p) \\<le> mbal (dblock s' q) \\<and>\n        hasRead s' q d p \\<longrightarrow>\n        (\\<exists>br\\<in>blocksRead s' q d.\n            bal (block br) = bal (dblock s p))\n\ngoal (1 subgoal):\n 1. \\<forall>q.\n       \\<forall>d\\<in>D.\n          phase s' q = 1 \\<and>\n          bal (dblock s p) \\<le> mbal (dblock s' q) \\<and>\n          hasRead s' q d p \\<longrightarrow>\n          (\\<exists>br\\<in>blocksRead s' q d.\n              bal (dblock s p) \\<le> bal (block br))", "by force"], ["proof (state)\nthis:\n  \\<forall>q.\n     \\<forall>d\\<in>D.\n        phase s' q = 1 \\<and>\n        bal (dblock s p) \\<le> mbal (dblock s' q) \\<and>\n        hasRead s' q d p \\<longrightarrow>\n        (\\<exists>br\\<in>blocksRead s' q d.\n            bal (dblock s p) \\<le> bal (block br))\n\ngoal (2 subgoals):\n 1. chosen s = NotAnInput \\<Longrightarrow> valueChosen s' (chosen s')\n 2. chosen s \\<noteq> NotAnInput \\<Longrightarrow>\n    valueChosen s' (chosen s')", "from act"], ["proof (chain)\npicking this:\n  HEndPhase2 s s' p", "have bal_dblock: \"bal(dblock s' p)=bal(dblock s p)\"\n    and disk: \"disk s'= disk s\""], ["proof (prove)\nusing this:\n  HEndPhase2 s s' p\n\ngoal (1 subgoal):\n 1. bal (dblock s' p) = bal (dblock s p) &&& disk s' = disk s", "by(auto simp add: EndPhase2_def)"], ["proof (state)\nthis:\n  bal (dblock s' p) = bal (dblock s p)\n  disk s' = disk s\n\ngoal (2 subgoals):\n 1. chosen s = NotAnInput \\<Longrightarrow> valueChosen s' (chosen s')\n 2. chosen s \\<noteq> NotAnInput \\<Longrightarrow>\n    valueChosen s' (chosen s')", "from bal_dblock p33"], ["proof (chain)\npicking this:\n  bal (dblock s' p) = bal (dblock s p)\n  maxBalInp s' (bal (dblock s' p)) (chosen s')", "have \"maxBalInp s' (bal(dblock s p)) (chosen s')\""], ["proof (prove)\nusing this:\n  bal (dblock s' p) = bal (dblock s p)\n  maxBalInp s' (bal (dblock s' p)) (chosen s')\n\ngoal (1 subgoal):\n 1. maxBalInp s' (bal (dblock s p)) (chosen s')", "by auto"], ["proof (state)\nthis:\n  maxBalInp s' (bal (dblock s p)) (chosen s')\n\ngoal (2 subgoals):\n 1. chosen s = NotAnInput \\<Longrightarrow> valueChosen s' (chosen s')\n 2. chosen s \\<noteq> NotAnInput \\<Longrightarrow>\n    valueChosen s' (chosen s')", "moreover"], ["proof (state)\nthis:\n  maxBalInp s' (bal (dblock s p)) (chosen s')\n\ngoal (2 subgoals):\n 1. chosen s = NotAnInput \\<Longrightarrow> valueChosen s' (chosen s')\n 2. chosen s \\<noteq> NotAnInput \\<Longrightarrow>\n    valueChosen s' (chosen s')", "from disk p34"], ["proof (chain)\npicking this:\n  disk s' = disk s\n  \\<forall>d\\<in>D.\n     disk s d p = dblock s p \\<and>\n     (\\<forall>q\\<in>UNIV - {p}. hasRead s p d q)", "have  \"\\<forall>d\\<in>D. bal(dblock s p) \\<le> bal(disk s' d p) \""], ["proof (prove)\nusing this:\n  disk s' = disk s\n  \\<forall>d\\<in>D.\n     disk s d p = dblock s p \\<and>\n     (\\<forall>q\\<in>UNIV - {p}. hasRead s p d q)\n\ngoal (1 subgoal):\n 1. \\<forall>d\\<in>D. bal (dblock s p) \\<le> bal (disk s' d p)", "by auto"], ["proof (state)\nthis:\n  \\<forall>d\\<in>D. bal (dblock s p) \\<le> bal (disk s' d p)\n\ngoal (2 subgoals):\n 1. chosen s = NotAnInput \\<Longrightarrow> valueChosen s' (chosen s')\n 2. chosen s \\<noteq> NotAnInput \\<Longrightarrow>\n    valueChosen s' (chosen s')", "ultimately"], ["proof (chain)\npicking this:\n  maxBalInp s' (bal (dblock s p)) (chosen s')\n  \\<forall>d\\<in>D. bal (dblock s p) \\<le> bal (disk s' d p)", "have \"maxBalInp s' (bal(dblock s p)) (chosen s') \\<and>\n           (\\<exists>D\\<in>MajoritySet.\n                   \\<forall>d\\<in>D. bal(dblock s p) \\<le> bal (disk s' d p) \\<and>\n                         (\\<forall>q. phase s' q = Suc 0 \\<and>\n                              bal(dblock s p) \\<le> mbal (dblock s' q) \\<and> hasRead s' q d p \\<longrightarrow>\n                              (\\<exists>br\\<in>blocksRead s' q d. bal(dblock s p) \\<le> bal (block br))))\""], ["proof (prove)\nusing this:\n  maxBalInp s' (bal (dblock s p)) (chosen s')\n  \\<forall>d\\<in>D. bal (dblock s p) \\<le> bal (disk s' d p)\n\ngoal (1 subgoal):\n 1. maxBalInp s' (bal (dblock s p)) (chosen s') \\<and>\n    (\\<exists>D\\<in>MajoritySet.\n        \\<forall>d\\<in>D.\n           bal (dblock s p) \\<le> bal (disk s' d p) \\<and>\n           (\\<forall>q.\n               phase s' q = Suc 0 \\<and>\n               bal (dblock s p) \\<le> mbal (dblock s' q) \\<and>\n               hasRead s' q d p \\<longrightarrow>\n               (\\<exists>br\\<in>blocksRead s' q d.\n                   bal (dblock s p) \\<le> bal (block br))))", "using p36_2 Dmaj"], ["proof (prove)\nusing this:\n  maxBalInp s' (bal (dblock s p)) (chosen s')\n  \\<forall>d\\<in>D. bal (dblock s p) \\<le> bal (disk s' d p)\n  \\<forall>q.\n     \\<forall>d\\<in>D.\n        phase s' q = 1 \\<and>\n        bal (dblock s p) \\<le> mbal (dblock s' q) \\<and>\n        hasRead s' q d p \\<longrightarrow>\n        (\\<exists>br\\<in>blocksRead s' q d.\n            bal (dblock s p) \\<le> bal (block br))\n  D \\<in> MajoritySet\n\ngoal (1 subgoal):\n 1. maxBalInp s' (bal (dblock s p)) (chosen s') \\<and>\n    (\\<exists>D\\<in>MajoritySet.\n        \\<forall>d\\<in>D.\n           bal (dblock s p) \\<le> bal (disk s' d p) \\<and>\n           (\\<forall>q.\n               phase s' q = Suc 0 \\<and>\n               bal (dblock s p) \\<le> mbal (dblock s' q) \\<and>\n               hasRead s' q d p \\<longrightarrow>\n               (\\<exists>br\\<in>blocksRead s' q d.\n                   bal (dblock s p) \\<le> bal (block br))))", "by auto"], ["proof (state)\nthis:\n  maxBalInp s' (bal (dblock s p)) (chosen s') \\<and>\n  (\\<exists>D\\<in>MajoritySet.\n      \\<forall>d\\<in>D.\n         bal (dblock s p) \\<le> bal (disk s' d p) \\<and>\n         (\\<forall>q.\n             phase s' q = Suc 0 \\<and>\n             bal (dblock s p) \\<le> mbal (dblock s' q) \\<and>\n             hasRead s' q d p \\<longrightarrow>\n             (\\<exists>br\\<in>blocksRead s' q d.\n                 bal (dblock s p) \\<le> bal (block br))))\n\ngoal (2 subgoals):\n 1. chosen s = NotAnInput \\<Longrightarrow> valueChosen s' (chosen s')\n 2. chosen s \\<noteq> NotAnInput \\<Longrightarrow>\n    valueChosen s' (chosen s')", "moreover"], ["proof (state)\nthis:\n  maxBalInp s' (bal (dblock s p)) (chosen s') \\<and>\n  (\\<exists>D\\<in>MajoritySet.\n      \\<forall>d\\<in>D.\n         bal (dblock s p) \\<le> bal (disk s' d p) \\<and>\n         (\\<forall>q.\n             phase s' q = Suc 0 \\<and>\n             bal (dblock s p) \\<le> mbal (dblock s' q) \\<and>\n             hasRead s' q d p \\<longrightarrow>\n             (\\<exists>br\\<in>blocksRead s' q d.\n                 bal (dblock s p) \\<le> bal (block br))))\n\ngoal (2 subgoals):\n 1. chosen s = NotAnInput \\<Longrightarrow> valueChosen s' (chosen s')\n 2. chosen s \\<noteq> NotAnInput \\<Longrightarrow>\n    valueChosen s' (chosen s')", "from phase inv2c"], ["proof (chain)\npicking this:\n  phase s p = 2\n  Inv2c s", "have \"bal(dblock s p)\\<in> Ballot p\""], ["proof (prove)\nusing this:\n  phase s p = 2\n  Inv2c s\n\ngoal (1 subgoal):\n 1. bal (dblock s p) \\<in> Ballot p", "by(auto simp add: Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  bal (dblock s p) \\<in> Ballot p\n\ngoal (2 subgoals):\n 1. chosen s = NotAnInput \\<Longrightarrow> valueChosen s' (chosen s')\n 2. chosen s \\<noteq> NotAnInput \\<Longrightarrow>\n    valueChosen s' (chosen s')", "ultimately"], ["proof (chain)\npicking this:\n  maxBalInp s' (bal (dblock s p)) (chosen s') \\<and>\n  (\\<exists>D\\<in>MajoritySet.\n      \\<forall>d\\<in>D.\n         bal (dblock s p) \\<le> bal (disk s' d p) \\<and>\n         (\\<forall>q.\n             phase s' q = Suc 0 \\<and>\n             bal (dblock s p) \\<le> mbal (dblock s' q) \\<and>\n             hasRead s' q d p \\<longrightarrow>\n             (\\<exists>br\\<in>blocksRead s' q d.\n                 bal (dblock s p) \\<le> bal (block br))))\n  bal (dblock s p) \\<in> Ballot p", "show ?thesis"], ["proof (prove)\nusing this:\n  maxBalInp s' (bal (dblock s p)) (chosen s') \\<and>\n  (\\<exists>D\\<in>MajoritySet.\n      \\<forall>d\\<in>D.\n         bal (dblock s p) \\<le> bal (disk s' d p) \\<and>\n         (\\<forall>q.\n             phase s' q = Suc 0 \\<and>\n             bal (dblock s p) \\<le> mbal (dblock s' q) \\<and>\n             hasRead s' q d p \\<longrightarrow>\n             (\\<exists>br\\<in>blocksRead s' q d.\n                 bal (dblock s p) \\<le> bal (block br))))\n  bal (dblock s p) \\<in> Ballot p\n\ngoal (1 subgoal):\n 1. valueChosen s' (chosen s')", "by(auto simp add: valueChosen_def)"], ["proof (state)\nthis:\n  valueChosen s' (chosen s')\n\ngoal (1 subgoal):\n 1. chosen s \\<noteq> NotAnInput \\<Longrightarrow>\n    valueChosen s' (chosen s')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. chosen s \\<noteq> NotAnInput \\<Longrightarrow>\n    valueChosen s' (chosen s')", "case False"], ["proof (state)\nthis:\n  chosen s \\<noteq> NotAnInput\n\ngoal (1 subgoal):\n 1. chosen s \\<noteq> NotAnInput \\<Longrightarrow>\n    valueChosen s' (chosen s')", "with act"], ["proof (chain)\npicking this:\n  HEndPhase2 s s' p\n  chosen s \\<noteq> NotAnInput", "have p31: \"chosen s' = chosen s\""], ["proof (prove)\nusing this:\n  HEndPhase2 s s' p\n  chosen s \\<noteq> NotAnInput\n\ngoal (1 subgoal):\n 1. chosen s' = chosen s", "by(auto simp add: HNextPart_def)"], ["proof (state)\nthis:\n  chosen s' = chosen s\n\ngoal (1 subgoal):\n 1. chosen s \\<noteq> NotAnInput \\<Longrightarrow>\n    valueChosen s' (chosen s')", "from False inv"], ["proof (chain)\npicking this:\n  chosen s \\<noteq> NotAnInput\n  HInv6 s", "have \"valueChosen s (chosen s)\""], ["proof (prove)\nusing this:\n  chosen s \\<noteq> NotAnInput\n  HInv6 s\n\ngoal (1 subgoal):\n 1. valueChosen s (chosen s)", "by(auto simp add: HInv6_def)"], ["proof (state)\nthis:\n  valueChosen s (chosen s)\n\ngoal (1 subgoal):\n 1. chosen s \\<noteq> NotAnInput \\<Longrightarrow>\n    valueChosen s' (chosen s')", "from HEndPhase2_valueChosen[OF act this] p31 False InputsOrNi"], ["proof (chain)\npicking this:\n  chosen s \\<in> Inputs \\<Longrightarrow> valueChosen s' (chosen s)\n  chosen s' = chosen s\n  chosen s \\<noteq> NotAnInput\n  UNIV = Inputs \\<union> {NotAnInput}", "show ?thesis"], ["proof (prove)\nusing this:\n  chosen s \\<in> Inputs \\<Longrightarrow> valueChosen s' (chosen s)\n  chosen s' = chosen s\n  chosen s \\<noteq> NotAnInput\n  UNIV = Inputs \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. valueChosen s' (chosen s')", "by auto"], ["proof (state)\nthis:\n  valueChosen s' (chosen s')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma valueChosen_equal_case:\n  assumes max_v: \"maxBalInp s b v\"\n  and Dmaj: \"D \\<in> MajoritySet\"\n  and asm_v: \"\\<forall>d\\<in>D. b \\<le> bal (disk s d p)\"\n  and max_w: \"maxBalInp s ba w\"\n  and Damaj: \"Da \\<in> MajoritySet\"\n  and asm_w: \"\\<forall>d\\<in>Da. ba \\<le> bal (disk s d pa)\"\n  and b_ba: \"b\\<le>ba\"\n  shows \"v=w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v = w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. v = w", "have \"\\<forall>d. disk s d pa \\<in> allBlocks s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>d. disk s d pa \\<in> allBlocks s", "by(auto simp add: allBlocks_def blocksOf_def)"], ["proof (state)\nthis:\n  \\<forall>d. disk s d pa \\<in> allBlocks s\n\ngoal (1 subgoal):\n 1. v = w", "with majorities_intersect Dmaj Damaj"], ["proof (chain)\npicking this:\n  \\<forall>S T.\n     IsMajority S \\<and> IsMajority T \\<longrightarrow>\n     S \\<inter> T \\<noteq> {}\n  D \\<in> MajoritySet\n  Da \\<in> MajoritySet\n  \\<forall>d. disk s d pa \\<in> allBlocks s", "have \"\\<exists>d\\<in>D\\<inter>Da. disk s d pa \\<in> allBlocks s\""], ["proof (prove)\nusing this:\n  \\<forall>S T.\n     IsMajority S \\<and> IsMajority T \\<longrightarrow>\n     S \\<inter> T \\<noteq> {}\n  D \\<in> MajoritySet\n  Da \\<in> MajoritySet\n  \\<forall>d. disk s d pa \\<in> allBlocks s\n\ngoal (1 subgoal):\n 1. \\<exists>d\\<in>D \\<inter> Da. disk s d pa \\<in> allBlocks s", "by(auto simp add: MajoritySet_def, blast)"], ["proof (state)\nthis:\n  \\<exists>d\\<in>D \\<inter> Da. disk s d pa \\<in> allBlocks s\n\ngoal (1 subgoal):\n 1. v = w", "then"], ["proof (chain)\npicking this:\n  \\<exists>d\\<in>D \\<inter> Da. disk s d pa \\<in> allBlocks s", "obtain d \n    where dinmaj: \"d\\<in>D\\<inter>Da\" and dab: \"disk s d pa \\<in> allBlocks s\""], ["proof (prove)\nusing this:\n  \\<exists>d\\<in>D \\<inter> Da. disk s d pa \\<in> allBlocks s\n\ngoal (1 subgoal):\n 1. (\\<And>d.\n        \\<lbrakk>d \\<in> D \\<inter> Da;\n         disk s d pa \\<in> allBlocks s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  d \\<in> D \\<inter> Da\n  disk s d pa \\<in> allBlocks s\n\ngoal (1 subgoal):\n 1. v = w", "with asm_w"], ["proof (chain)\npicking this:\n  \\<forall>d\\<in>Da. ba \\<le> bal (disk s d pa)\n  d \\<in> D \\<inter> Da\n  disk s d pa \\<in> allBlocks s", "have ba: \"ba \\<le> bal (disk s d pa)\""], ["proof (prove)\nusing this:\n  \\<forall>d\\<in>Da. ba \\<le> bal (disk s d pa)\n  d \\<in> D \\<inter> Da\n  disk s d pa \\<in> allBlocks s\n\ngoal (1 subgoal):\n 1. ba \\<le> bal (disk s d pa)", "by auto"], ["proof (state)\nthis:\n  ba \\<le> bal (disk s d pa)\n\ngoal (1 subgoal):\n 1. v = w", "with b_ba"], ["proof (chain)\npicking this:\n  b \\<le> ba\n  ba \\<le> bal (disk s d pa)", "have \"b \\<le> bal (disk s d pa)\""], ["proof (prove)\nusing this:\n  b \\<le> ba\n  ba \\<le> bal (disk s d pa)\n\ngoal (1 subgoal):\n 1. b \\<le> bal (disk s d pa)", "by auto"], ["proof (state)\nthis:\n  b \\<le> bal (disk s d pa)\n\ngoal (1 subgoal):\n 1. v = w", "with max_v dab"], ["proof (chain)\npicking this:\n  maxBalInp s b v\n  disk s d pa \\<in> allBlocks s\n  b \\<le> bal (disk s d pa)", "have v_value: \"inp (disk s d pa) = v\""], ["proof (prove)\nusing this:\n  maxBalInp s b v\n  disk s d pa \\<in> allBlocks s\n  b \\<le> bal (disk s d pa)\n\ngoal (1 subgoal):\n 1. inp (disk s d pa) = v", "by(auto simp add: maxBalInp_def)"], ["proof (state)\nthis:\n  inp (disk s d pa) = v\n\ngoal (1 subgoal):\n 1. v = w", "from ba max_w dab"], ["proof (chain)\npicking this:\n  ba \\<le> bal (disk s d pa)\n  maxBalInp s ba w\n  disk s d pa \\<in> allBlocks s", "have w_value: \"inp (disk s d pa) = w\""], ["proof (prove)\nusing this:\n  ba \\<le> bal (disk s d pa)\n  maxBalInp s ba w\n  disk s d pa \\<in> allBlocks s\n\ngoal (1 subgoal):\n 1. inp (disk s d pa) = w", "by(auto simp add: maxBalInp_def)"], ["proof (state)\nthis:\n  inp (disk s d pa) = w\n\ngoal (1 subgoal):\n 1. v = w", "with v_value"], ["proof (chain)\npicking this:\n  inp (disk s d pa) = v\n  inp (disk s d pa) = w", "show ?thesis"], ["proof (prove)\nusing this:\n  inp (disk s d pa) = v\n  inp (disk s d pa) = w\n\ngoal (1 subgoal):\n 1. v = w", "by auto"], ["proof (state)\nthis:\n  v = w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma valueChosen_equal:\n  assumes v: \"valueChosen s v\"\n  and w: \"valueChosen s w\"\n  shows \"v=w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v = w", "using assms"], ["proof (prove)\nusing this:\n  valueChosen s v\n  valueChosen s w\n\ngoal (1 subgoal):\n 1. v = w", "proof (auto simp add: valueChosen_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y b ya ba p D pa Da.\n       \\<lbrakk>b \\<in> Ballot y; ba \\<in> Ballot ya; maxBalInp s b v;\n        D \\<in> MajoritySet;\n        \\<forall>d\\<in>D.\n           b \\<le> bal (disk s d p) \\<and>\n           (\\<forall>q.\n               phase s q = Suc 0 \\<and>\n               b \\<le> mbal (dblock s q) \\<and>\n               hasRead s q d p \\<longrightarrow>\n               (\\<exists>br\\<in>blocksRead s q d. b \\<le> bal (block br)));\n        maxBalInp s ba w; Da \\<in> MajoritySet;\n        \\<forall>d\\<in>Da.\n           ba \\<le> bal (disk s d pa) \\<and>\n           (\\<forall>q.\n               phase s q = Suc 0 \\<and>\n               ba \\<le> mbal (dblock s q) \\<and>\n               hasRead s q d pa \\<longrightarrow>\n               (\\<exists>br\\<in>blocksRead s q d.\n                   ba \\<le> bal (block br)))\\<rbrakk>\n       \\<Longrightarrow> v = w", "fix a b aa ba p D pa Da"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y b ya ba p D pa Da.\n       \\<lbrakk>b \\<in> Ballot y; ba \\<in> Ballot ya; maxBalInp s b v;\n        D \\<in> MajoritySet;\n        \\<forall>d\\<in>D.\n           b \\<le> bal (disk s d p) \\<and>\n           (\\<forall>q.\n               phase s q = Suc 0 \\<and>\n               b \\<le> mbal (dblock s q) \\<and>\n               hasRead s q d p \\<longrightarrow>\n               (\\<exists>br\\<in>blocksRead s q d. b \\<le> bal (block br)));\n        maxBalInp s ba w; Da \\<in> MajoritySet;\n        \\<forall>d\\<in>Da.\n           ba \\<le> bal (disk s d pa) \\<and>\n           (\\<forall>q.\n               phase s q = Suc 0 \\<and>\n               ba \\<le> mbal (dblock s q) \\<and>\n               hasRead s q d pa \\<longrightarrow>\n               (\\<exists>br\\<in>blocksRead s q d.\n                   ba \\<le> bal (block br)))\\<rbrakk>\n       \\<Longrightarrow> v = w", "assume max_v: \"maxBalInp s b v\"\n    and Dmaj: \"D \\<in> MajoritySet\"\n    and asm_v: \"\\<forall>d\\<in>D. b \\<le> bal (disk s d p) \\<and>\n              (\\<forall>q. phase s q = Suc 0 \\<and>\n                   b \\<le> mbal (dblock s q) \\<and> hasRead s q d p \\<longrightarrow>\n                   (\\<exists>br\\<in>blocksRead s q d. b \\<le> bal (block br)))\"\n    and max_w: \"maxBalInp s ba w\"\n    and Damaj: \"Da \\<in> MajoritySet\"\n    and asm_w: \"\\<forall>d\\<in>Da. ba \\<le> bal (disk s d pa) \\<and>\n              (\\<forall>q. phase s q = Suc 0 \\<and>\n                   ba \\<le> mbal (dblock s q) \\<and> hasRead s q d pa \\<longrightarrow>\n                   (\\<exists>br\\<in>blocksRead s q d. ba \\<le> bal (block br)))\""], ["proof (state)\nthis:\n  maxBalInp s b v\n  D \\<in> MajoritySet\n  \\<forall>d\\<in>D.\n     b \\<le> bal (disk s d p) \\<and>\n     (\\<forall>q.\n         phase s q = Suc 0 \\<and>\n         b \\<le> mbal (dblock s q) \\<and> hasRead s q d p \\<longrightarrow>\n         (\\<exists>br\\<in>blocksRead s q d. b \\<le> bal (block br)))\n  maxBalInp s ba w\n  Da \\<in> MajoritySet\n  \\<forall>d\\<in>Da.\n     ba \\<le> bal (disk s d pa) \\<and>\n     (\\<forall>q.\n         phase s q = Suc 0 \\<and>\n         ba \\<le> mbal (dblock s q) \\<and>\n         hasRead s q d pa \\<longrightarrow>\n         (\\<exists>br\\<in>blocksRead s q d. ba \\<le> bal (block br)))\n\ngoal (1 subgoal):\n 1. \\<And>y b ya ba p D pa Da.\n       \\<lbrakk>b \\<in> Ballot y; ba \\<in> Ballot ya; maxBalInp s b v;\n        D \\<in> MajoritySet;\n        \\<forall>d\\<in>D.\n           b \\<le> bal (disk s d p) \\<and>\n           (\\<forall>q.\n               phase s q = Suc 0 \\<and>\n               b \\<le> mbal (dblock s q) \\<and>\n               hasRead s q d p \\<longrightarrow>\n               (\\<exists>br\\<in>blocksRead s q d. b \\<le> bal (block br)));\n        maxBalInp s ba w; Da \\<in> MajoritySet;\n        \\<forall>d\\<in>Da.\n           ba \\<le> bal (disk s d pa) \\<and>\n           (\\<forall>q.\n               phase s q = Suc 0 \\<and>\n               ba \\<le> mbal (dblock s q) \\<and>\n               hasRead s q d pa \\<longrightarrow>\n               (\\<exists>br\\<in>blocksRead s q d.\n                   ba \\<le> bal (block br)))\\<rbrakk>\n       \\<Longrightarrow> v = w", "from asm_v"], ["proof (chain)\npicking this:\n  \\<forall>d\\<in>D.\n     b \\<le> bal (disk s d p) \\<and>\n     (\\<forall>q.\n         phase s q = Suc 0 \\<and>\n         b \\<le> mbal (dblock s q) \\<and> hasRead s q d p \\<longrightarrow>\n         (\\<exists>br\\<in>blocksRead s q d. b \\<le> bal (block br)))", "have asm_v: \"\\<forall>d\\<in>D. b \\<le> bal (disk s d p)\""], ["proof (prove)\nusing this:\n  \\<forall>d\\<in>D.\n     b \\<le> bal (disk s d p) \\<and>\n     (\\<forall>q.\n         phase s q = Suc 0 \\<and>\n         b \\<le> mbal (dblock s q) \\<and> hasRead s q d p \\<longrightarrow>\n         (\\<exists>br\\<in>blocksRead s q d. b \\<le> bal (block br)))\n\ngoal (1 subgoal):\n 1. \\<forall>d\\<in>D. b \\<le> bal (disk s d p)", "by auto"], ["proof (state)\nthis:\n  \\<forall>d\\<in>D. b \\<le> bal (disk s d p)\n\ngoal (1 subgoal):\n 1. \\<And>y b ya ba p D pa Da.\n       \\<lbrakk>b \\<in> Ballot y; ba \\<in> Ballot ya; maxBalInp s b v;\n        D \\<in> MajoritySet;\n        \\<forall>d\\<in>D.\n           b \\<le> bal (disk s d p) \\<and>\n           (\\<forall>q.\n               phase s q = Suc 0 \\<and>\n               b \\<le> mbal (dblock s q) \\<and>\n               hasRead s q d p \\<longrightarrow>\n               (\\<exists>br\\<in>blocksRead s q d. b \\<le> bal (block br)));\n        maxBalInp s ba w; Da \\<in> MajoritySet;\n        \\<forall>d\\<in>Da.\n           ba \\<le> bal (disk s d pa) \\<and>\n           (\\<forall>q.\n               phase s q = Suc 0 \\<and>\n               ba \\<le> mbal (dblock s q) \\<and>\n               hasRead s q d pa \\<longrightarrow>\n               (\\<exists>br\\<in>blocksRead s q d.\n                   ba \\<le> bal (block br)))\\<rbrakk>\n       \\<Longrightarrow> v = w", "from asm_w"], ["proof (chain)\npicking this:\n  \\<forall>d\\<in>Da.\n     ba \\<le> bal (disk s d pa) \\<and>\n     (\\<forall>q.\n         phase s q = Suc 0 \\<and>\n         ba \\<le> mbal (dblock s q) \\<and>\n         hasRead s q d pa \\<longrightarrow>\n         (\\<exists>br\\<in>blocksRead s q d. ba \\<le> bal (block br)))", "have asm_w: \"\\<forall>d\\<in>Da. ba \\<le> bal (disk s d pa)\""], ["proof (prove)\nusing this:\n  \\<forall>d\\<in>Da.\n     ba \\<le> bal (disk s d pa) \\<and>\n     (\\<forall>q.\n         phase s q = Suc 0 \\<and>\n         ba \\<le> mbal (dblock s q) \\<and>\n         hasRead s q d pa \\<longrightarrow>\n         (\\<exists>br\\<in>blocksRead s q d. ba \\<le> bal (block br)))\n\ngoal (1 subgoal):\n 1. \\<forall>d\\<in>Da. ba \\<le> bal (disk s d pa)", "by auto"], ["proof (state)\nthis:\n  \\<forall>d\\<in>Da. ba \\<le> bal (disk s d pa)\n\ngoal (1 subgoal):\n 1. \\<And>y b ya ba p D pa Da.\n       \\<lbrakk>b \\<in> Ballot y; ba \\<in> Ballot ya; maxBalInp s b v;\n        D \\<in> MajoritySet;\n        \\<forall>d\\<in>D.\n           b \\<le> bal (disk s d p) \\<and>\n           (\\<forall>q.\n               phase s q = Suc 0 \\<and>\n               b \\<le> mbal (dblock s q) \\<and>\n               hasRead s q d p \\<longrightarrow>\n               (\\<exists>br\\<in>blocksRead s q d. b \\<le> bal (block br)));\n        maxBalInp s ba w; Da \\<in> MajoritySet;\n        \\<forall>d\\<in>Da.\n           ba \\<le> bal (disk s d pa) \\<and>\n           (\\<forall>q.\n               phase s q = Suc 0 \\<and>\n               ba \\<le> mbal (dblock s q) \\<and>\n               hasRead s q d pa \\<longrightarrow>\n               (\\<exists>br\\<in>blocksRead s q d.\n                   ba \\<le> bal (block br)))\\<rbrakk>\n       \\<Longrightarrow> v = w", "show \"v=w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v = w", "proof(cases \"b\\<le>ba\")"], ["proof (state)\ngoal (2 subgoals):\n 1. b \\<le> ba \\<Longrightarrow> v = w\n 2. \\<not> b \\<le> ba \\<Longrightarrow> v = w", "case True"], ["proof (state)\nthis:\n  b \\<le> ba\n\ngoal (2 subgoals):\n 1. b \\<le> ba \\<Longrightarrow> v = w\n 2. \\<not> b \\<le> ba \\<Longrightarrow> v = w", "from valueChosen_equal_case[OF max_v Dmaj asm_v max_w Damaj asm_w True]"], ["proof (chain)\npicking this:\n  v = w", "show ?thesis"], ["proof (prove)\nusing this:\n  v = w\n\ngoal (1 subgoal):\n 1. v = w", "."], ["proof (state)\nthis:\n  v = w\n\ngoal (1 subgoal):\n 1. \\<not> b \\<le> ba \\<Longrightarrow> v = w", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> b \\<le> ba \\<Longrightarrow> v = w", "case False"], ["proof (state)\nthis:\n  \\<not> b \\<le> ba\n\ngoal (1 subgoal):\n 1. \\<not> b \\<le> ba \\<Longrightarrow> v = w", "from valueChosen_equal_case[OF max_w Damaj asm_w max_v Dmaj asm_v] False"], ["proof (chain)\npicking this:\n  ba \\<le> b \\<Longrightarrow> w = v\n  \\<not> b \\<le> ba", "show ?thesis"], ["proof (prove)\nusing this:\n  ba \\<le> b \\<Longrightarrow> w = v\n  \\<not> b \\<le> ba\n\ngoal (1 subgoal):\n 1. v = w", "by auto"], ["proof (state)\nthis:\n  v = w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v = w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma HEndPhase2_Inv6_2:\n  assumes act: \"HEndPhase2 s s' p\"\n  and inv: \"HInv6 s\"\n  and inv2b: \"Inv2b s\"\n  and inv2c: \"Inv2c s\"\n  and inv3: \"HInv3 s\"\n  and inv5: \"HInv5_inner s p\"\n  and asm: \"outpt s' r \\<noteq> NotAnInput\"\n  shows \"outpt s' r = chosen s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. outpt s' r = chosen s'", "proof(cases \"chosen s=NotAnInput\")"], ["proof (state)\ngoal (2 subgoals):\n 1. chosen s = NotAnInput \\<Longrightarrow> outpt s' r = chosen s'\n 2. chosen s \\<noteq> NotAnInput \\<Longrightarrow> outpt s' r = chosen s'", "case True"], ["proof (state)\nthis:\n  chosen s = NotAnInput\n\ngoal (2 subgoals):\n 1. chosen s = NotAnInput \\<Longrightarrow> outpt s' r = chosen s'\n 2. chosen s \\<noteq> NotAnInput \\<Longrightarrow> outpt s' r = chosen s'", "with inv2c"], ["proof (chain)\npicking this:\n  Inv2c s\n  chosen s = NotAnInput", "have \"\\<forall>q. outpt s q = NotAnInput\""], ["proof (prove)\nusing this:\n  Inv2c s\n  chosen s = NotAnInput\n\ngoal (1 subgoal):\n 1. \\<forall>q. outpt s q = NotAnInput", "by(auto simp add: Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  \\<forall>q. outpt s q = NotAnInput\n\ngoal (2 subgoals):\n 1. chosen s = NotAnInput \\<Longrightarrow> outpt s' r = chosen s'\n 2. chosen s \\<noteq> NotAnInput \\<Longrightarrow> outpt s' r = chosen s'", "with True act asm"], ["proof (chain)\npicking this:\n  chosen s = NotAnInput\n  HEndPhase2 s s' p\n  outpt s' r \\<noteq> NotAnInput\n  \\<forall>q. outpt s q = NotAnInput", "show ?thesis"], ["proof (prove)\nusing this:\n  chosen s = NotAnInput\n  HEndPhase2 s s' p\n  outpt s' r \\<noteq> NotAnInput\n  \\<forall>q. outpt s q = NotAnInput\n\ngoal (1 subgoal):\n 1. outpt s' r = chosen s'", "by(auto simp add: EndPhase2_def HNextPart_def \n               split: if_split_asm)"], ["proof (state)\nthis:\n  outpt s' r = chosen s'\n\ngoal (1 subgoal):\n 1. chosen s \\<noteq> NotAnInput \\<Longrightarrow> outpt s' r = chosen s'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. chosen s \\<noteq> NotAnInput \\<Longrightarrow> outpt s' r = chosen s'", "case False"], ["proof (state)\nthis:\n  chosen s \\<noteq> NotAnInput\n\ngoal (1 subgoal):\n 1. chosen s \\<noteq> NotAnInput \\<Longrightarrow> outpt s' r = chosen s'", "with inv"], ["proof (chain)\npicking this:\n  HInv6 s\n  chosen s \\<noteq> NotAnInput", "have p31: \"valueChosen s (chosen s)\""], ["proof (prove)\nusing this:\n  HInv6 s\n  chosen s \\<noteq> NotAnInput\n\ngoal (1 subgoal):\n 1. valueChosen s (chosen s)", "by(auto simp add: HInv6_def)"], ["proof (state)\nthis:\n  valueChosen s (chosen s)\n\ngoal (1 subgoal):\n 1. chosen s \\<noteq> NotAnInput \\<Longrightarrow> outpt s' r = chosen s'", "with False act"], ["proof (chain)\npicking this:\n  chosen s \\<noteq> NotAnInput\n  HEndPhase2 s s' p\n  valueChosen s (chosen s)", "have \"chosen s'\\<noteq> NotAnInput\""], ["proof (prove)\nusing this:\n  chosen s \\<noteq> NotAnInput\n  HEndPhase2 s s' p\n  valueChosen s (chosen s)\n\ngoal (1 subgoal):\n 1. chosen s' \\<noteq> NotAnInput", "by(auto simp add: HNextPart_def)"], ["proof (state)\nthis:\n  chosen s' \\<noteq> NotAnInput\n\ngoal (1 subgoal):\n 1. chosen s \\<noteq> NotAnInput \\<Longrightarrow> outpt s' r = chosen s'", "from HEndPhase2_Inv6_1[OF act inv inv2b inv2c inv3 inv5 this]"], ["proof (chain)\npicking this:\n  valueChosen s' (chosen s')", "have p32: \"valueChosen s'(chosen s')\""], ["proof (prove)\nusing this:\n  valueChosen s' (chosen s')\n\ngoal (1 subgoal):\n 1. valueChosen s' (chosen s')", "."], ["proof (state)\nthis:\n  valueChosen s' (chosen s')\n\ngoal (1 subgoal):\n 1. chosen s \\<noteq> NotAnInput \\<Longrightarrow> outpt s' r = chosen s'", "from False InputsOrNi"], ["proof (chain)\npicking this:\n  chosen s \\<noteq> NotAnInput\n  UNIV = Inputs \\<union> {NotAnInput}", "have \"chosen s \\<in> Inputs\""], ["proof (prove)\nusing this:\n  chosen s \\<noteq> NotAnInput\n  UNIV = Inputs \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. chosen s \\<in> Inputs", "by auto"], ["proof (state)\nthis:\n  chosen s \\<in> Inputs\n\ngoal (1 subgoal):\n 1. chosen s \\<noteq> NotAnInput \\<Longrightarrow> outpt s' r = chosen s'", "from valueChosen_equal[OF HEndPhase2_valueChosen[OF act p31 this] p32]"], ["proof (chain)\npicking this:\n  chosen s = chosen s'", "have p33: \"chosen s = chosen s'\""], ["proof (prove)\nusing this:\n  chosen s = chosen s'\n\ngoal (1 subgoal):\n 1. chosen s = chosen s'", "."], ["proof (state)\nthis:\n  chosen s = chosen s'\n\ngoal (1 subgoal):\n 1. chosen s \\<noteq> NotAnInput \\<Longrightarrow> outpt s' r = chosen s'", "from act"], ["proof (chain)\npicking this:\n  HEndPhase2 s s' p", "have maj: \"IsMajority {d .    d \\<in> disksWritten s p\n                             \\<and> (\\<forall>q \\<in> UNIV - {p}. hasRead s p d q)}\" (is \"IsMajority ?D\")\n    and phase: \"phase s p = 2\""], ["proof (prove)\nusing this:\n  HEndPhase2 s s' p\n\ngoal (1 subgoal):\n 1. IsMajority\n     {d \\<in> disksWritten s p.\n      \\<forall>q\\<in>UNIV - {p}. hasRead s p d q} &&&\n    phase s p = 2", "by(auto simp add: EndPhase2_def)"], ["proof (state)\nthis:\n  IsMajority\n   {d \\<in> disksWritten s p. \\<forall>q\\<in>UNIV - {p}. hasRead s p d q}\n  phase s p = 2\n\ngoal (1 subgoal):\n 1. chosen s \\<noteq> NotAnInput \\<Longrightarrow> outpt s' r = chosen s'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. outpt s' r = chosen s'", "proof(cases \"outpt s r = NotAnInput\")"], ["proof (state)\ngoal (2 subgoals):\n 1. outpt s r = NotAnInput \\<Longrightarrow> outpt s' r = chosen s'\n 2. outpt s r \\<noteq> NotAnInput \\<Longrightarrow> outpt s' r = chosen s'", "case True"], ["proof (state)\nthis:\n  outpt s r = NotAnInput\n\ngoal (2 subgoals):\n 1. outpt s r = NotAnInput \\<Longrightarrow> outpt s' r = chosen s'\n 2. outpt s r \\<noteq> NotAnInput \\<Longrightarrow> outpt s' r = chosen s'", "with asm act"], ["proof (chain)\npicking this:\n  outpt s' r \\<noteq> NotAnInput\n  HEndPhase2 s s' p\n  outpt s r = NotAnInput", "have p41: \"r=p\""], ["proof (prove)\nusing this:\n  outpt s' r \\<noteq> NotAnInput\n  HEndPhase2 s s' p\n  outpt s r = NotAnInput\n\ngoal (1 subgoal):\n 1. r = p", "by(auto simp add: EndPhase2_def split: if_split_asm)"], ["proof (state)\nthis:\n  r = p\n\ngoal (2 subgoals):\n 1. outpt s r = NotAnInput \\<Longrightarrow> outpt s' r = chosen s'\n 2. outpt s r \\<noteq> NotAnInput \\<Longrightarrow> outpt s' r = chosen s'", "from maj"], ["proof (chain)\npicking this:\n  IsMajority\n   {d \\<in> disksWritten s p. \\<forall>q\\<in>UNIV - {p}. hasRead s p d q}", "have p42: \"\\<exists>D\\<in>MajoritySet. \\<forall>d\\<in>D. \\<forall>q\\<in>UNIV-{p}. hasRead s p d q\""], ["proof (prove)\nusing this:\n  IsMajority\n   {d \\<in> disksWritten s p. \\<forall>q\\<in>UNIV - {p}. hasRead s p d q}\n\ngoal (1 subgoal):\n 1. \\<exists>D\\<in>MajoritySet.\n       \\<forall>d\\<in>D. \\<forall>q\\<in>UNIV - {p}. hasRead s p d q", "by(auto simp add: MajoritySet_def)"], ["proof (state)\nthis:\n  \\<exists>D\\<in>MajoritySet.\n     \\<forall>d\\<in>D. \\<forall>q\\<in>UNIV - {p}. hasRead s p d q\n\ngoal (2 subgoals):\n 1. outpt s r = NotAnInput \\<Longrightarrow> outpt s' r = chosen s'\n 2. outpt s r \\<noteq> NotAnInput \\<Longrightarrow> outpt s' r = chosen s'", "have p43: \"\\<not>(\\<exists>D\\<in>MajoritySet. \\<exists>q. (\\<forall>d\\<in>D.    bal(dblock s p) < mbal(disk s d q)\n                                             \\<and> \\<not>hasRead s p d q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>D\\<in>MajoritySet.\n               \\<exists>q.\n                  \\<forall>d\\<in>D.\n                     bal (dblock s p) < mbal (disk s d q) \\<and>\n                     \\<not> hasRead s p d q)", "proof auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>D q.\n       D \\<in> MajoritySet \\<Longrightarrow>\n       \\<exists>d\\<in>D.\n          bal (dblock s p) < mbal (disk s d q) \\<longrightarrow>\n          hasRead s p d q", "fix D q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>D q.\n       D \\<in> MajoritySet \\<Longrightarrow>\n       \\<exists>d\\<in>D.\n          bal (dblock s p) < mbal (disk s d q) \\<longrightarrow>\n          hasRead s p d q", "assume Dmaj: \"D \\<in> MajoritySet\""], ["proof (state)\nthis:\n  D \\<in> MajoritySet\n\ngoal (1 subgoal):\n 1. \\<And>D q.\n       D \\<in> MajoritySet \\<Longrightarrow>\n       \\<exists>d\\<in>D.\n          bal (dblock s p) < mbal (disk s d q) \\<longrightarrow>\n          hasRead s p d q", "show \"\\<exists>d\\<in>D. bal (dblock s p) < mbal (disk s d q) \\<longrightarrow> hasRead s p d q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>d\\<in>D.\n       bal (dblock s p) < mbal (disk s d q) \\<longrightarrow>\n       hasRead s p d q", "proof(cases \"p=q\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = q \\<Longrightarrow>\n    \\<exists>d\\<in>D.\n       bal (dblock s p) < mbal (disk s d q) \\<longrightarrow>\n       hasRead s p d q\n 2. p \\<noteq> q \\<Longrightarrow>\n    \\<exists>d\\<in>D.\n       bal (dblock s p) < mbal (disk s d q) \\<longrightarrow>\n       hasRead s p d q", "assume pq: \"p=q\""], ["proof (state)\nthis:\n  p = q\n\ngoal (2 subgoals):\n 1. p = q \\<Longrightarrow>\n    \\<exists>d\\<in>D.\n       bal (dblock s p) < mbal (disk s d q) \\<longrightarrow>\n       hasRead s p d q\n 2. p \\<noteq> q \\<Longrightarrow>\n    \\<exists>d\\<in>D.\n       bal (dblock s p) < mbal (disk s d q) \\<longrightarrow>\n       hasRead s p d q", "thus ?thesis"], ["proof (prove)\nusing this:\n  p = q\n\ngoal (1 subgoal):\n 1. \\<exists>d\\<in>D.\n       bal (dblock s p) < mbal (disk s d q) \\<longrightarrow>\n       hasRead s p d q", "proof auto"], ["proof (state)\ngoal (1 subgoal):\n 1. p = q \\<Longrightarrow>\n    \\<exists>d\\<in>D.\n       bal (dblock s q) < mbal (disk s d q) \\<longrightarrow>\n       hasRead s q d q", "from maj majorities_intersect Dmaj"], ["proof (chain)\npicking this:\n  IsMajority\n   {d \\<in> disksWritten s p. \\<forall>q\\<in>UNIV - {p}. hasRead s p d q}\n  \\<forall>S T.\n     IsMajority S \\<and> IsMajority T \\<longrightarrow>\n     S \\<inter> T \\<noteq> {}\n  D \\<in> MajoritySet", "have \"?D\\<inter>D\\<noteq>{}\""], ["proof (prove)\nusing this:\n  IsMajority\n   {d \\<in> disksWritten s p. \\<forall>q\\<in>UNIV - {p}. hasRead s p d q}\n  \\<forall>S T.\n     IsMajority S \\<and> IsMajority T \\<longrightarrow>\n     S \\<inter> T \\<noteq> {}\n  D \\<in> MajoritySet\n\ngoal (1 subgoal):\n 1. {d \\<in> disksWritten s p.\n     \\<forall>q\\<in>UNIV - {p}. hasRead s p d q} \\<inter>\n    D \\<noteq>\n    {}", "by(auto simp add: MajoritySet_def)"], ["proof (state)\nthis:\n  {d \\<in> disksWritten s p.\n   \\<forall>q\\<in>UNIV - {p}. hasRead s p d q} \\<inter>\n  D \\<noteq>\n  {}\n\ngoal (1 subgoal):\n 1. p = q \\<Longrightarrow>\n    \\<exists>d\\<in>D.\n       bal (dblock s q) < mbal (disk s d q) \\<longrightarrow>\n       hasRead s q d q", "hence \"\\<exists>d\\<in>?D\\<inter>D. d\\<in> disksWritten s p\""], ["proof (prove)\nusing this:\n  {d \\<in> disksWritten s p.\n   \\<forall>q\\<in>UNIV - {p}. hasRead s p d q} \\<inter>\n  D \\<noteq>\n  {}\n\ngoal (1 subgoal):\n 1. \\<exists>d\\<in>{d \\<in> disksWritten s p.\n                    \\<forall>q\\<in>UNIV - {p}. hasRead s p d q} \\<inter>\n                   D.\n       d \\<in> disksWritten s p", "by auto"], ["proof (state)\nthis:\n  \\<exists>d\\<in>{d \\<in> disksWritten s p.\n                  \\<forall>q\\<in>UNIV - {p}. hasRead s p d q} \\<inter>\n                 D.\n     d \\<in> disksWritten s p\n\ngoal (1 subgoal):\n 1. p = q \\<Longrightarrow>\n    \\<exists>d\\<in>D.\n       bal (dblock s q) < mbal (disk s d q) \\<longrightarrow>\n       hasRead s q d q", "then"], ["proof (chain)\npicking this:\n  \\<exists>d\\<in>{d \\<in> disksWritten s p.\n                  \\<forall>q\\<in>UNIV - {p}. hasRead s p d q} \\<inter>\n                 D.\n     d \\<in> disksWritten s p", "obtain d where d: \"d\\<in> disksWritten s p\" and \"d\\<in>?D\\<inter>D\""], ["proof (prove)\nusing this:\n  \\<exists>d\\<in>{d \\<in> disksWritten s p.\n                  \\<forall>q\\<in>UNIV - {p}. hasRead s p d q} \\<inter>\n                 D.\n     d \\<in> disksWritten s p\n\ngoal (1 subgoal):\n 1. (\\<And>d.\n        \\<lbrakk>d \\<in> disksWritten s p;\n         d \\<in> {d \\<in> disksWritten s p.\n                  \\<forall>q\\<in>UNIV - {p}. hasRead s p d q} \\<inter>\n                 D\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  d \\<in> disksWritten s p\n  d \\<in> {d \\<in> disksWritten s p.\n           \\<forall>q\\<in>UNIV - {p}. hasRead s p d q} \\<inter>\n          D\n\ngoal (1 subgoal):\n 1. p = q \\<Longrightarrow>\n    \\<exists>d\\<in>D.\n       bal (dblock s q) < mbal (disk s d q) \\<longrightarrow>\n       hasRead s q d q", "hence dD: \"d\\<in>D\""], ["proof (prove)\nusing this:\n  d \\<in> disksWritten s p\n  d \\<in> {d \\<in> disksWritten s p.\n           \\<forall>q\\<in>UNIV - {p}. hasRead s p d q} \\<inter>\n          D\n\ngoal (1 subgoal):\n 1. d \\<in> D", "by auto"], ["proof (state)\nthis:\n  d \\<in> D\n\ngoal (1 subgoal):\n 1. p = q \\<Longrightarrow>\n    \\<exists>d\\<in>D.\n       bal (dblock s q) < mbal (disk s d q) \\<longrightarrow>\n       hasRead s q d q", "from d inv2b"], ["proof (chain)\npicking this:\n  d \\<in> disksWritten s p\n  Inv2b s", "have \"disk s d p = dblock s p\""], ["proof (prove)\nusing this:\n  d \\<in> disksWritten s p\n  Inv2b s\n\ngoal (1 subgoal):\n 1. disk s d p = dblock s p", "by(auto simp add: Inv2b_def Inv2b_inner_def)"], ["proof (state)\nthis:\n  disk s d p = dblock s p\n\ngoal (1 subgoal):\n 1. p = q \\<Longrightarrow>\n    \\<exists>d\\<in>D.\n       bal (dblock s q) < mbal (disk s d q) \\<longrightarrow>\n       hasRead s q d q", "with inv2c phase"], ["proof (chain)\npicking this:\n  Inv2c s\n  phase s p = 2\n  disk s d p = dblock s p", "have \"bal(dblock s p) = mbal(disk s d p) \""], ["proof (prove)\nusing this:\n  Inv2c s\n  phase s p = 2\n  disk s d p = dblock s p\n\ngoal (1 subgoal):\n 1. bal (dblock s p) = mbal (disk s d p)", "by(auto simp add: Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  bal (dblock s p) = mbal (disk s d p)\n\ngoal (1 subgoal):\n 1. p = q \\<Longrightarrow>\n    \\<exists>d\\<in>D.\n       bal (dblock s q) < mbal (disk s d q) \\<longrightarrow>\n       hasRead s q d q", "with dD pq"], ["proof (chain)\npicking this:\n  d \\<in> D\n  p = q\n  bal (dblock s p) = mbal (disk s d p)", "show  \"\\<exists>d\\<in>D. bal (dblock s q) < mbal (disk s d q) \\<longrightarrow> hasRead s q d q\""], ["proof (prove)\nusing this:\n  d \\<in> D\n  p = q\n  bal (dblock s p) = mbal (disk s d p)\n\ngoal (1 subgoal):\n 1. \\<exists>d\\<in>D.\n       bal (dblock s q) < mbal (disk s d q) \\<longrightarrow>\n       hasRead s q d q", "by auto"], ["proof (state)\nthis:\n  \\<exists>d\\<in>D.\n     bal (dblock s q) < mbal (disk s d q) \\<longrightarrow> hasRead s q d q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>d\\<in>D.\n     bal (dblock s p) < mbal (disk s d q) \\<longrightarrow> hasRead s p d q\n\ngoal (1 subgoal):\n 1. p \\<noteq> q \\<Longrightarrow>\n    \\<exists>d\\<in>D.\n       bal (dblock s p) < mbal (disk s d q) \\<longrightarrow>\n       hasRead s p d q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> q \\<Longrightarrow>\n    \\<exists>d\\<in>D.\n       bal (dblock s p) < mbal (disk s d q) \\<longrightarrow>\n       hasRead s p d q", "case False"], ["proof (state)\nthis:\n  p \\<noteq> q\n\ngoal (1 subgoal):\n 1. p \\<noteq> q \\<Longrightarrow>\n    \\<exists>d\\<in>D.\n       bal (dblock s p) < mbal (disk s d q) \\<longrightarrow>\n       hasRead s p d q", "with p42"], ["proof (chain)\npicking this:\n  \\<exists>D\\<in>MajoritySet.\n     \\<forall>d\\<in>D. \\<forall>q\\<in>UNIV - {p}. hasRead s p d q\n  p \\<noteq> q", "have \"\\<exists>D\\<in>MajoritySet. \\<forall>d\\<in>D. hasRead s p d q\""], ["proof (prove)\nusing this:\n  \\<exists>D\\<in>MajoritySet.\n     \\<forall>d\\<in>D. \\<forall>q\\<in>UNIV - {p}. hasRead s p d q\n  p \\<noteq> q\n\ngoal (1 subgoal):\n 1. \\<exists>D\\<in>MajoritySet. \\<forall>d\\<in>D. hasRead s p d q", "by auto"], ["proof (state)\nthis:\n  \\<exists>D\\<in>MajoritySet. \\<forall>d\\<in>D. hasRead s p d q\n\ngoal (1 subgoal):\n 1. p \\<noteq> q \\<Longrightarrow>\n    \\<exists>d\\<in>D.\n       bal (dblock s p) < mbal (disk s d q) \\<longrightarrow>\n       hasRead s p d q", "with majorities_intersect Dmaj"], ["proof (chain)\npicking this:\n  \\<forall>S T.\n     IsMajority S \\<and> IsMajority T \\<longrightarrow>\n     S \\<inter> T \\<noteq> {}\n  D \\<in> MajoritySet\n  \\<exists>D\\<in>MajoritySet. \\<forall>d\\<in>D. hasRead s p d q", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>S T.\n     IsMajority S \\<and> IsMajority T \\<longrightarrow>\n     S \\<inter> T \\<noteq> {}\n  D \\<in> MajoritySet\n  \\<exists>D\\<in>MajoritySet. \\<forall>d\\<in>D. hasRead s p d q\n\ngoal (1 subgoal):\n 1. \\<exists>d\\<in>D.\n       bal (dblock s p) < mbal (disk s d q) \\<longrightarrow>\n       hasRead s p d q", "by(auto simp add: MajoritySet_def, blast)"], ["proof (state)\nthis:\n  \\<exists>d\\<in>D.\n     bal (dblock s p) < mbal (disk s d q) \\<longrightarrow> hasRead s p d q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>d\\<in>D.\n     bal (dblock s p) < mbal (disk s d q) \\<longrightarrow> hasRead s p d q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> (\\<exists>D\\<in>MajoritySet.\n             \\<exists>q.\n                \\<forall>d\\<in>D.\n                   bal (dblock s p) < mbal (disk s d q) \\<and>\n                   \\<not> hasRead s p d q)\n\ngoal (2 subgoals):\n 1. outpt s r = NotAnInput \\<Longrightarrow> outpt s' r = chosen s'\n 2. outpt s r \\<noteq> NotAnInput \\<Longrightarrow> outpt s' r = chosen s'", "with inv5 act"], ["proof (chain)\npicking this:\n  HInv5_inner s p\n  HEndPhase2 s s' p\n  \\<not> (\\<exists>D\\<in>MajoritySet.\n             \\<exists>q.\n                \\<forall>d\\<in>D.\n                   bal (dblock s p) < mbal (disk s d q) \\<and>\n                   \\<not> hasRead s p d q)", "have p44: \"maxBalInp s (bal(dblock s p)) (inp(dblock s p))\""], ["proof (prove)\nusing this:\n  HInv5_inner s p\n  HEndPhase2 s s' p\n  \\<not> (\\<exists>D\\<in>MajoritySet.\n             \\<exists>q.\n                \\<forall>d\\<in>D.\n                   bal (dblock s p) < mbal (disk s d q) \\<and>\n                   \\<not> hasRead s p d q)\n\ngoal (1 subgoal):\n 1. maxBalInp s (bal (dblock s p)) (inp (dblock s p))", "by(auto simp add: EndPhase2_def HInv5_inner_def \n                        HInv5_inner_R_def)"], ["proof (state)\nthis:\n  maxBalInp s (bal (dblock s p)) (inp (dblock s p))\n\ngoal (2 subgoals):\n 1. outpt s r = NotAnInput \\<Longrightarrow> outpt s' r = chosen s'\n 2. outpt s r \\<noteq> NotAnInput \\<Longrightarrow> outpt s' r = chosen s'", "have \"\\<exists>bk\\<in>allBlocks s. \\<exists>b\\<in>(UN p. Ballot p). (maxBalInp s b (chosen s)) \\<and> b\\<le> bal bk\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>bk\\<in>allBlocks s.\n       \\<exists>b\\<in>\\<Union> (range Ballot).\n          maxBalInp s b (chosen s) \\<and> b \\<le> bal bk", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>bk\\<in>allBlocks s.\n       \\<exists>b\\<in>\\<Union> (range Ballot).\n          maxBalInp s b (chosen s) \\<and> b \\<le> bal bk", "have disk_allblks: \"\\<forall>d p. disk s d p \\<in> allBlocks s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>d p. disk s d p \\<in> allBlocks s", "by(auto simp add: allBlocks_def blocksOf_def)"], ["proof (state)\nthis:\n  \\<forall>d p. disk s d p \\<in> allBlocks s\n\ngoal (1 subgoal):\n 1. \\<exists>bk\\<in>allBlocks s.\n       \\<exists>b\\<in>\\<Union> (range Ballot).\n          maxBalInp s b (chosen s) \\<and> b \\<le> bal bk", "from p31"], ["proof (chain)\npicking this:\n  valueChosen s (chosen s)", "have \"\\<exists>b\\<in> (UN p. Ballot p). maxBalInp s b (chosen s) \\<and> \n      (\\<exists>p. \\<exists>D\\<in>MajoritySet.(\\<forall>d\\<in>D.  b \\<le> bal(disk s d p)))\""], ["proof (prove)\nusing this:\n  valueChosen s (chosen s)\n\ngoal (1 subgoal):\n 1. \\<exists>b\\<in>\\<Union> (range Ballot).\n       maxBalInp s b (chosen s) \\<and>\n       (\\<exists>p.\n           \\<exists>D\\<in>MajoritySet.\n              \\<forall>d\\<in>D. b \\<le> bal (disk s d p))", "by(auto simp add: valueChosen_def, force)"], ["proof (state)\nthis:\n  \\<exists>b\\<in>\\<Union> (range Ballot).\n     maxBalInp s b (chosen s) \\<and>\n     (\\<exists>p.\n         \\<exists>D\\<in>MajoritySet.\n            \\<forall>d\\<in>D. b \\<le> bal (disk s d p))\n\ngoal (1 subgoal):\n 1. \\<exists>bk\\<in>allBlocks s.\n       \\<exists>b\\<in>\\<Union> (range Ballot).\n          maxBalInp s b (chosen s) \\<and> b \\<le> bal bk", "with majority_nonempty"], ["proof (chain)\npicking this:\n  IsMajority ?S \\<Longrightarrow> ?S \\<noteq> {}\n  \\<exists>b\\<in>\\<Union> (range Ballot).\n     maxBalInp s b (chosen s) \\<and>\n     (\\<exists>p.\n         \\<exists>D\\<in>MajoritySet.\n            \\<forall>d\\<in>D. b \\<le> bal (disk s d p))", "obtain b p D d\n        where \"IsMajority D \\<and> b\\<in> (UN p. Ballot p) \\<and>  \n               maxBalInp s b (chosen s) \\<and> d\\<in>D \\<and> b \\<le> bal(disk s d p)\""], ["proof (prove)\nusing this:\n  IsMajority ?S \\<Longrightarrow> ?S \\<noteq> {}\n  \\<exists>b\\<in>\\<Union> (range Ballot).\n     maxBalInp s b (chosen s) \\<and>\n     (\\<exists>p.\n         \\<exists>D\\<in>MajoritySet.\n            \\<forall>d\\<in>D. b \\<le> bal (disk s d p))\n\ngoal (1 subgoal):\n 1. (\\<And>D b d p.\n        IsMajority D \\<and>\n        b \\<in> \\<Union> (range Ballot) \\<and>\n        maxBalInp s b (chosen s) \\<and>\n        d \\<in> D \\<and> b \\<le> bal (disk s d p) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: MajoritySet_def, blast)"], ["proof (state)\nthis:\n  IsMajority D \\<and>\n  b \\<in> \\<Union> (range Ballot) \\<and>\n  maxBalInp s b (chosen s) \\<and> d \\<in> D \\<and> b \\<le> bal (disk s d p)\n\ngoal (1 subgoal):\n 1. \\<exists>bk\\<in>allBlocks s.\n       \\<exists>b\\<in>\\<Union> (range Ballot).\n          maxBalInp s b (chosen s) \\<and> b \\<le> bal bk", "with disk_allblks"], ["proof (chain)\npicking this:\n  \\<forall>d p. disk s d p \\<in> allBlocks s\n  IsMajority D \\<and>\n  b \\<in> \\<Union> (range Ballot) \\<and>\n  maxBalInp s b (chosen s) \\<and> d \\<in> D \\<and> b \\<le> bal (disk s d p)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>d p. disk s d p \\<in> allBlocks s\n  IsMajority D \\<and>\n  b \\<in> \\<Union> (range Ballot) \\<and>\n  maxBalInp s b (chosen s) \\<and> d \\<in> D \\<and> b \\<le> bal (disk s d p)\n\ngoal (1 subgoal):\n 1. \\<exists>bk\\<in>allBlocks s.\n       \\<exists>b\\<in>\\<Union> (range Ballot).\n          maxBalInp s b (chosen s) \\<and> b \\<le> bal bk", "by(auto)"], ["proof (state)\nthis:\n  \\<exists>bk\\<in>allBlocks s.\n     \\<exists>b\\<in>\\<Union> (range Ballot).\n        maxBalInp s b (chosen s) \\<and> b \\<le> bal bk\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>bk\\<in>allBlocks s.\n     \\<exists>b\\<in>\\<Union> (range Ballot).\n        maxBalInp s b (chosen s) \\<and> b \\<le> bal bk\n\ngoal (2 subgoals):\n 1. outpt s r = NotAnInput \\<Longrightarrow> outpt s' r = chosen s'\n 2. outpt s r \\<noteq> NotAnInput \\<Longrightarrow> outpt s' r = chosen s'", "then"], ["proof (chain)\npicking this:\n  \\<exists>bk\\<in>allBlocks s.\n     \\<exists>b\\<in>\\<Union> (range Ballot).\n        maxBalInp s b (chosen s) \\<and> b \\<le> bal bk", "obtain bk b\n      where p45_bk: \"bk\\<in>allBlocks s \\<and> b\\<le> bal bk\" \n        and p45_b: \"b\\<in>(UN p. Ballot p) \\<and> (maxBalInp s b (chosen s))\""], ["proof (prove)\nusing this:\n  \\<exists>bk\\<in>allBlocks s.\n     \\<exists>b\\<in>\\<Union> (range Ballot).\n        maxBalInp s b (chosen s) \\<and> b \\<le> bal bk\n\ngoal (1 subgoal):\n 1. (\\<And>bk b.\n        \\<lbrakk>bk \\<in> allBlocks s \\<and> b \\<le> bal bk;\n         b \\<in> \\<Union> (range Ballot) \\<and>\n         maxBalInp s b (chosen s)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  bk \\<in> allBlocks s \\<and> b \\<le> bal bk\n  b \\<in> \\<Union> (range Ballot) \\<and> maxBalInp s b (chosen s)\n\ngoal (2 subgoals):\n 1. outpt s r = NotAnInput \\<Longrightarrow> outpt s' r = chosen s'\n 2. outpt s r \\<noteq> NotAnInput \\<Longrightarrow> outpt s' r = chosen s'", "have p46: \"inp(dblock s p) = chosen s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inp (dblock s p) = chosen s", "proof(cases \"b \\<le> bal(dblock s p)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. b \\<le> bal (dblock s p) \\<Longrightarrow> inp (dblock s p) = chosen s\n 2. \\<not> b \\<le> bal (dblock s p) \\<Longrightarrow>\n    inp (dblock s p) = chosen s", "case True"], ["proof (state)\nthis:\n  b \\<le> bal (dblock s p)\n\ngoal (2 subgoals):\n 1. b \\<le> bal (dblock s p) \\<Longrightarrow> inp (dblock s p) = chosen s\n 2. \\<not> b \\<le> bal (dblock s p) \\<Longrightarrow>\n    inp (dblock s p) = chosen s", "have \"dblock s p \\<in> allBlocks s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dblock s p \\<in> allBlocks s", "by(auto simp add: allBlocks_def blocksOf_def)"], ["proof (state)\nthis:\n  dblock s p \\<in> allBlocks s\n\ngoal (2 subgoals):\n 1. b \\<le> bal (dblock s p) \\<Longrightarrow> inp (dblock s p) = chosen s\n 2. \\<not> b \\<le> bal (dblock s p) \\<Longrightarrow>\n    inp (dblock s p) = chosen s", "with p45_b True"], ["proof (chain)\npicking this:\n  b \\<in> \\<Union> (range Ballot) \\<and> maxBalInp s b (chosen s)\n  b \\<le> bal (dblock s p)\n  dblock s p \\<in> allBlocks s", "show ?thesis"], ["proof (prove)\nusing this:\n  b \\<in> \\<Union> (range Ballot) \\<and> maxBalInp s b (chosen s)\n  b \\<le> bal (dblock s p)\n  dblock s p \\<in> allBlocks s\n\ngoal (1 subgoal):\n 1. inp (dblock s p) = chosen s", "by(auto simp add: maxBalInp_def)"], ["proof (state)\nthis:\n  inp (dblock s p) = chosen s\n\ngoal (1 subgoal):\n 1. \\<not> b \\<le> bal (dblock s p) \\<Longrightarrow>\n    inp (dblock s p) = chosen s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> b \\<le> bal (dblock s p) \\<Longrightarrow>\n    inp (dblock s p) = chosen s", "case False"], ["proof (state)\nthis:\n  \\<not> b \\<le> bal (dblock s p)\n\ngoal (1 subgoal):\n 1. \\<not> b \\<le> bal (dblock s p) \\<Longrightarrow>\n    inp (dblock s p) = chosen s", "from p44 p45_bk False"], ["proof (chain)\npicking this:\n  maxBalInp s (bal (dblock s p)) (inp (dblock s p))\n  bk \\<in> allBlocks s \\<and> b \\<le> bal bk\n  \\<not> b \\<le> bal (dblock s p)", "have \"inp bk = inp(dblock s p)\""], ["proof (prove)\nusing this:\n  maxBalInp s (bal (dblock s p)) (inp (dblock s p))\n  bk \\<in> allBlocks s \\<and> b \\<le> bal bk\n  \\<not> b \\<le> bal (dblock s p)\n\ngoal (1 subgoal):\n 1. inp bk = inp (dblock s p)", "by(auto simp add: maxBalInp_def)"], ["proof (state)\nthis:\n  inp bk = inp (dblock s p)\n\ngoal (1 subgoal):\n 1. \\<not> b \\<le> bal (dblock s p) \\<Longrightarrow>\n    inp (dblock s p) = chosen s", "with p45_b p45_bk"], ["proof (chain)\npicking this:\n  b \\<in> \\<Union> (range Ballot) \\<and> maxBalInp s b (chosen s)\n  bk \\<in> allBlocks s \\<and> b \\<le> bal bk\n  inp bk = inp (dblock s p)", "show ?thesis"], ["proof (prove)\nusing this:\n  b \\<in> \\<Union> (range Ballot) \\<and> maxBalInp s b (chosen s)\n  bk \\<in> allBlocks s \\<and> b \\<le> bal bk\n  inp bk = inp (dblock s p)\n\ngoal (1 subgoal):\n 1. inp (dblock s p) = chosen s", "by(auto simp add: maxBalInp_def)"], ["proof (state)\nthis:\n  inp (dblock s p) = chosen s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inp (dblock s p) = chosen s\n\ngoal (2 subgoals):\n 1. outpt s r = NotAnInput \\<Longrightarrow> outpt s' r = chosen s'\n 2. outpt s r \\<noteq> NotAnInput \\<Longrightarrow> outpt s' r = chosen s'", "with p41 p33 act"], ["proof (chain)\npicking this:\n  r = p\n  chosen s = chosen s'\n  HEndPhase2 s s' p\n  inp (dblock s p) = chosen s", "show ?thesis"], ["proof (prove)\nusing this:\n  r = p\n  chosen s = chosen s'\n  HEndPhase2 s s' p\n  inp (dblock s p) = chosen s\n\ngoal (1 subgoal):\n 1. outpt s' r = chosen s'", "by(auto simp add: EndPhase2_def)"], ["proof (state)\nthis:\n  outpt s' r = chosen s'\n\ngoal (1 subgoal):\n 1. outpt s r \\<noteq> NotAnInput \\<Longrightarrow> outpt s' r = chosen s'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. outpt s r \\<noteq> NotAnInput \\<Longrightarrow> outpt s' r = chosen s'", "case False"], ["proof (state)\nthis:\n  outpt s r \\<noteq> NotAnInput\n\ngoal (1 subgoal):\n 1. outpt s r \\<noteq> NotAnInput \\<Longrightarrow> outpt s' r = chosen s'", "from inv2c"], ["proof (chain)\npicking this:\n  Inv2c s", "have \"Inv2c_inner s r\""], ["proof (prove)\nusing this:\n  Inv2c s\n\ngoal (1 subgoal):\n 1. Inv2c_inner s r", "by(auto simp add: Inv2c_def)"], ["proof (state)\nthis:\n  Inv2c_inner s r\n\ngoal (1 subgoal):\n 1. outpt s r \\<noteq> NotAnInput \\<Longrightarrow> outpt s' r = chosen s'", "with False asm inv2c act"], ["proof (chain)\npicking this:\n  outpt s r \\<noteq> NotAnInput\n  outpt s' r \\<noteq> NotAnInput\n  Inv2c s\n  HEndPhase2 s s' p\n  Inv2c_inner s r", "have \"outpt s' r = outpt s r\""], ["proof (prove)\nusing this:\n  outpt s r \\<noteq> NotAnInput\n  outpt s' r \\<noteq> NotAnInput\n  Inv2c s\n  HEndPhase2 s s' p\n  Inv2c_inner s r\n\ngoal (1 subgoal):\n 1. outpt s' r = outpt s r", "by(auto simp add: Inv2c_inner_def EndPhase2_def \n                 split: if_split_asm)"], ["proof (state)\nthis:\n  outpt s' r = outpt s r\n\ngoal (1 subgoal):\n 1. outpt s r \\<noteq> NotAnInput \\<Longrightarrow> outpt s' r = chosen s'", "with inv p33 False"], ["proof (chain)\npicking this:\n  HInv6 s\n  chosen s = chosen s'\n  outpt s r \\<noteq> NotAnInput\n  outpt s' r = outpt s r", "show ?thesis"], ["proof (prove)\nusing this:\n  HInv6 s\n  chosen s = chosen s'\n  outpt s r \\<noteq> NotAnInput\n  outpt s' r = outpt s r\n\ngoal (1 subgoal):\n 1. outpt s' r = chosen s'", "by(auto simp add: HInv6_def)"], ["proof (state)\nthis:\n  outpt s' r = chosen s'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  outpt s' r = chosen s'\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem HEndPhase2_Inv6:\n  assumes act: \"HEndPhase2 s s' p\"\n  and inv: \"HInv6 s\"\n  and inv2b: \"Inv2b s\"\n  and inv2c: \"Inv2c s\"\n  and inv3: \"HInv3 s\"\n  and inv5: \"HInv5_inner s p\"\n  shows \"HInv6 s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HInv6 s'", "proof(auto simp add: HInv6_def)"], ["proof (state)\ngoal (2 subgoals):\n 1. chosen s' \\<noteq> NotAnInput \\<Longrightarrow>\n    valueChosen s' (chosen s')\n 2. \\<And>p.\n       outpt s' p \\<noteq> NotAnInput \\<Longrightarrow>\n       outpt s' p = chosen s'", "assume \"chosen s' \\<noteq> NotAnInput\""], ["proof (state)\nthis:\n  chosen s' \\<noteq> NotAnInput\n\ngoal (2 subgoals):\n 1. chosen s' \\<noteq> NotAnInput \\<Longrightarrow>\n    valueChosen s' (chosen s')\n 2. \\<And>p.\n       outpt s' p \\<noteq> NotAnInput \\<Longrightarrow>\n       outpt s' p = chosen s'", "from HEndPhase2_Inv6_1[OF act inv inv2b inv2c inv3 inv5 this]"], ["proof (chain)\npicking this:\n  valueChosen s' (chosen s')", "show \"valueChosen s' (chosen s')\""], ["proof (prove)\nusing this:\n  valueChosen s' (chosen s')\n\ngoal (1 subgoal):\n 1. valueChosen s' (chosen s')", "."], ["proof (state)\nthis:\n  valueChosen s' (chosen s')\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       outpt s' p \\<noteq> NotAnInput \\<Longrightarrow>\n       outpt s' p = chosen s'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       outpt s' p \\<noteq> NotAnInput \\<Longrightarrow>\n       outpt s' p = chosen s'", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       outpt s' p \\<noteq> NotAnInput \\<Longrightarrow>\n       outpt s' p = chosen s'", "assume \"outpt s' p\\<noteq> NotAnInput\""], ["proof (state)\nthis:\n  outpt s' p \\<noteq> NotAnInput\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       outpt s' p \\<noteq> NotAnInput \\<Longrightarrow>\n       outpt s' p = chosen s'", "from HEndPhase2_Inv6_2[OF act inv inv2b inv2c inv3 inv5 this]"], ["proof (chain)\npicking this:\n  outpt s' p = chosen s'", "show \"outpt s' p = chosen s'\""], ["proof (prove)\nusing this:\n  outpt s' p = chosen s'\n\ngoal (1 subgoal):\n 1. outpt s' p = chosen s'", "."], ["proof (state)\nthis:\n  outpt s' p = chosen s'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma outpt_chosen:\n  assumes outpt: \"outpt s = outpt s'\"\n  and inv2c: \"Inv2c s\"\n  and nextp: \"HNextPart s s'\"\n  shows \"chosen s' = chosen s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chosen s' = chosen s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. chosen s' = chosen s", "from inv2c"], ["proof (chain)\npicking this:\n  Inv2c s", "have \"chosen s = NotAnInput \\<longrightarrow> (\\<forall>p. outpt s p = NotAnInput)\""], ["proof (prove)\nusing this:\n  Inv2c s\n\ngoal (1 subgoal):\n 1. chosen s = NotAnInput \\<longrightarrow>\n    (\\<forall>p. outpt s p = NotAnInput)", "by(auto simp add: Inv2c_inner_def Inv2c_def)"], ["proof (state)\nthis:\n  chosen s = NotAnInput \\<longrightarrow>\n  (\\<forall>p. outpt s p = NotAnInput)\n\ngoal (1 subgoal):\n 1. chosen s' = chosen s", "with outpt nextp"], ["proof (chain)\npicking this:\n  outpt s = outpt s'\n  HNextPart s s'\n  chosen s = NotAnInput \\<longrightarrow>\n  (\\<forall>p. outpt s p = NotAnInput)", "show ?thesis"], ["proof (prove)\nusing this:\n  outpt s = outpt s'\n  HNextPart s s'\n  chosen s = NotAnInput \\<longrightarrow>\n  (\\<forall>p. outpt s p = NotAnInput)\n\ngoal (1 subgoal):\n 1. chosen s' = chosen s", "by(auto simp add: HNextPart_def)"], ["proof (state)\nthis:\n  chosen s' = chosen s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma outpt_Inv6: \n  \"\\<lbrakk> outpt s = outpt s'; \\<forall>p. outpt s p \\<in> {chosen s, NotAnInput};\n     Inv2c s; HNextPart s s' \\<rbrakk> \\<Longrightarrow> \\<forall>p. outpt s' p \\<in> {chosen s', NotAnInput}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>outpt s = outpt s';\n     \\<forall>p. outpt s p \\<in> {chosen s, NotAnInput}; Inv2c s;\n     HNextPart s s'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>p. outpt s' p \\<in> {chosen s', NotAnInput}", "using outpt_chosen"], ["proof (prove)\nusing this:\n  \\<lbrakk>outpt ?s = outpt ?s'; Inv2c ?s; HNextPart ?s ?s'\\<rbrakk>\n  \\<Longrightarrow> chosen ?s' = chosen ?s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>outpt s = outpt s';\n     \\<forall>p. outpt s p \\<in> {chosen s, NotAnInput}; Inv2c s;\n     HNextPart s s'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>p. outpt s' p \\<in> {chosen s', NotAnInput}", "by auto"], ["", "theorem HStartBallot_Inv6:\n  assumes act: \"HStartBallot s s' p\"\n  and inv: \"HInv6 s\"\n  and inv2c: \"Inv2c s\"\n  shows \"HInv6 s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HInv6 s'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. HInv6 s'", "from outpt_chosen act inv2c inv"], ["proof (chain)\npicking this:\n  \\<lbrakk>outpt ?s = outpt ?s'; Inv2c ?s; HNextPart ?s ?s'\\<rbrakk>\n  \\<Longrightarrow> chosen ?s' = chosen ?s\n  HStartBallot s s' p\n  Inv2c s\n  HInv6 s", "have \"chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s (chosen s')\""], ["proof (prove)\nusing this:\n  \\<lbrakk>outpt ?s = outpt ?s'; Inv2c ?s; HNextPart ?s ?s'\\<rbrakk>\n  \\<Longrightarrow> chosen ?s' = chosen ?s\n  HStartBallot s s' p\n  Inv2c s\n  HInv6 s\n\ngoal (1 subgoal):\n 1. chosen s' \\<noteq> NotAnInput \\<longrightarrow>\n    valueChosen s (chosen s')", "by(auto simp add: StartBallot_def HInv6_def)"], ["proof (state)\nthis:\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s (chosen s')\n\ngoal (1 subgoal):\n 1. HInv6 s'", "from HStartBallot_valueChosen[OF act] this InputsOrNi"], ["proof (chain)\npicking this:\n  \\<lbrakk>valueChosen s ?v; ?v \\<in> Inputs\\<rbrakk>\n  \\<Longrightarrow> valueChosen s' ?v\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s (chosen s')\n  UNIV = Inputs \\<union> {NotAnInput}", "have t1: \"chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s' (chosen s')\""], ["proof (prove)\nusing this:\n  \\<lbrakk>valueChosen s ?v; ?v \\<in> Inputs\\<rbrakk>\n  \\<Longrightarrow> valueChosen s' ?v\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s (chosen s')\n  UNIV = Inputs \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. chosen s' \\<noteq> NotAnInput \\<longrightarrow>\n    valueChosen s' (chosen s')", "by auto"], ["proof (state)\nthis:\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s' (chosen s')\n\ngoal (1 subgoal):\n 1. HInv6 s'", "from act"], ["proof (chain)\npicking this:\n  HStartBallot s s' p", "have outpt: \"outpt s = outpt s'\""], ["proof (prove)\nusing this:\n  HStartBallot s s' p\n\ngoal (1 subgoal):\n 1. outpt s = outpt s'", "by(auto simp add: StartBallot_def)"], ["proof (state)\nthis:\n  outpt s = outpt s'\n\ngoal (1 subgoal):\n 1. HInv6 s'", "from outpt_Inv6[OF outpt] act inv2c inv"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<forall>p. outpt s p \\<in> {chosen s, NotAnInput}; Inv2c s;\n   HNextPart s s'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>p. outpt s' p \\<in> {chosen s', NotAnInput}\n  HStartBallot s s' p\n  Inv2c s\n  HInv6 s", "have \"\\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>p. outpt s p \\<in> {chosen s, NotAnInput}; Inv2c s;\n   HNextPart s s'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>p. outpt s' p \\<in> {chosen s', NotAnInput}\n  HStartBallot s s' p\n  Inv2c s\n  HInv6 s\n\ngoal (1 subgoal):\n 1. \\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput", "by(auto simp add: HInv6_def)"], ["proof (state)\nthis:\n  \\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput\n\ngoal (1 subgoal):\n 1. HInv6 s'", "with t1"], ["proof (chain)\npicking this:\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s' (chosen s')\n  \\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput", "show ?thesis"], ["proof (prove)\nusing this:\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s' (chosen s')\n  \\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput\n\ngoal (1 subgoal):\n 1. HInv6 s'", "by(simp add: HInv6_def)"], ["proof (state)\nthis:\n  HInv6 s'\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem HPhase1or2Write_Inv6:\n  assumes act: \"HPhase1or2Write s s' p d\"\n  and inv: \"HInv6 s\"\n  and inv4: \"HInv4a s p\"\n  and inv2c: \"Inv2c s\"\n  shows \"HInv6 s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HInv6 s'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. HInv6 s'", "from outpt_chosen act inv2c inv"], ["proof (chain)\npicking this:\n  \\<lbrakk>outpt ?s = outpt ?s'; Inv2c ?s; HNextPart ?s ?s'\\<rbrakk>\n  \\<Longrightarrow> chosen ?s' = chosen ?s\n  HPhase1or2Write s s' p d\n  Inv2c s\n  HInv6 s", "have \"chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s (chosen s')\""], ["proof (prove)\nusing this:\n  \\<lbrakk>outpt ?s = outpt ?s'; Inv2c ?s; HNextPart ?s ?s'\\<rbrakk>\n  \\<Longrightarrow> chosen ?s' = chosen ?s\n  HPhase1or2Write s s' p d\n  Inv2c s\n  HInv6 s\n\ngoal (1 subgoal):\n 1. chosen s' \\<noteq> NotAnInput \\<longrightarrow>\n    valueChosen s (chosen s')", "by(auto simp add: Phase1or2Write_def HInv6_def)"], ["proof (state)\nthis:\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s (chosen s')\n\ngoal (1 subgoal):\n 1. HInv6 s'", "from HPhase1or2Write_valueChosen[OF act] inv4 this InputsOrNi"], ["proof (chain)\npicking this:\n  \\<lbrakk>valueChosen s ?v; ?v \\<in> Inputs; HInv4a s p\\<rbrakk>\n  \\<Longrightarrow> valueChosen s' ?v\n  HInv4a s p\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s (chosen s')\n  UNIV = Inputs \\<union> {NotAnInput}", "have t1: \"chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s' (chosen s')\""], ["proof (prove)\nusing this:\n  \\<lbrakk>valueChosen s ?v; ?v \\<in> Inputs; HInv4a s p\\<rbrakk>\n  \\<Longrightarrow> valueChosen s' ?v\n  HInv4a s p\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s (chosen s')\n  UNIV = Inputs \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. chosen s' \\<noteq> NotAnInput \\<longrightarrow>\n    valueChosen s' (chosen s')", "by auto"], ["proof (state)\nthis:\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s' (chosen s')\n\ngoal (1 subgoal):\n 1. HInv6 s'", "from act"], ["proof (chain)\npicking this:\n  HPhase1or2Write s s' p d", "have outpt: \"outpt s = outpt s'\""], ["proof (prove)\nusing this:\n  HPhase1or2Write s s' p d\n\ngoal (1 subgoal):\n 1. outpt s = outpt s'", "by(auto simp add: Phase1or2Write_def)"], ["proof (state)\nthis:\n  outpt s = outpt s'\n\ngoal (1 subgoal):\n 1. HInv6 s'", "from outpt_Inv6[OF outpt] act inv2c inv"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<forall>p. outpt s p \\<in> {chosen s, NotAnInput}; Inv2c s;\n   HNextPart s s'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>p. outpt s' p \\<in> {chosen s', NotAnInput}\n  HPhase1or2Write s s' p d\n  Inv2c s\n  HInv6 s", "have \"\\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>p. outpt s p \\<in> {chosen s, NotAnInput}; Inv2c s;\n   HNextPart s s'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>p. outpt s' p \\<in> {chosen s', NotAnInput}\n  HPhase1or2Write s s' p d\n  Inv2c s\n  HInv6 s\n\ngoal (1 subgoal):\n 1. \\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput", "by(auto simp add: HInv6_def)"], ["proof (state)\nthis:\n  \\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput\n\ngoal (1 subgoal):\n 1. HInv6 s'", "with t1"], ["proof (chain)\npicking this:\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s' (chosen s')\n  \\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput", "show ?thesis"], ["proof (prove)\nusing this:\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s' (chosen s')\n  \\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput\n\ngoal (1 subgoal):\n 1. HInv6 s'", "by(simp add: HInv6_def)"], ["proof (state)\nthis:\n  HInv6 s'\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem HPhase1or2ReadThen_Inv6:\n  assumes act: \"HPhase1or2ReadThen s s' p d q\"\n  and inv: \"HInv6 s\"\n  and inv2c: \"Inv2c s\"\n  shows \"HInv6 s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HInv6 s'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. HInv6 s'", "from outpt_chosen act inv2c inv"], ["proof (chain)\npicking this:\n  \\<lbrakk>outpt ?s = outpt ?s'; Inv2c ?s; HNextPart ?s ?s'\\<rbrakk>\n  \\<Longrightarrow> chosen ?s' = chosen ?s\n  HPhase1or2ReadThen s s' p d q\n  Inv2c s\n  HInv6 s", "have \"chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s (chosen s')\""], ["proof (prove)\nusing this:\n  \\<lbrakk>outpt ?s = outpt ?s'; Inv2c ?s; HNextPart ?s ?s'\\<rbrakk>\n  \\<Longrightarrow> chosen ?s' = chosen ?s\n  HPhase1or2ReadThen s s' p d q\n  Inv2c s\n  HInv6 s\n\ngoal (1 subgoal):\n 1. chosen s' \\<noteq> NotAnInput \\<longrightarrow>\n    valueChosen s (chosen s')", "by(auto simp add: Phase1or2ReadThen_def HInv6_def)"], ["proof (state)\nthis:\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s (chosen s')\n\ngoal (1 subgoal):\n 1. HInv6 s'", "from HPhase1or2ReadThen_valueChosen[OF act] this InputsOrNi"], ["proof (chain)\npicking this:\n  \\<lbrakk>valueChosen s ?v; ?v \\<in> Inputs\\<rbrakk>\n  \\<Longrightarrow> valueChosen s' ?v\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s (chosen s')\n  UNIV = Inputs \\<union> {NotAnInput}", "have t1: \"chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s' (chosen s')\""], ["proof (prove)\nusing this:\n  \\<lbrakk>valueChosen s ?v; ?v \\<in> Inputs\\<rbrakk>\n  \\<Longrightarrow> valueChosen s' ?v\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s (chosen s')\n  UNIV = Inputs \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. chosen s' \\<noteq> NotAnInput \\<longrightarrow>\n    valueChosen s' (chosen s')", "by auto"], ["proof (state)\nthis:\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s' (chosen s')\n\ngoal (1 subgoal):\n 1. HInv6 s'", "from act"], ["proof (chain)\npicking this:\n  HPhase1or2ReadThen s s' p d q", "have outpt: \"outpt s = outpt s'\""], ["proof (prove)\nusing this:\n  HPhase1or2ReadThen s s' p d q\n\ngoal (1 subgoal):\n 1. outpt s = outpt s'", "by(auto simp add: Phase1or2ReadThen_def)"], ["proof (state)\nthis:\n  outpt s = outpt s'\n\ngoal (1 subgoal):\n 1. HInv6 s'", "from outpt_Inv6[OF outpt] act inv2c inv"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<forall>p. outpt s p \\<in> {chosen s, NotAnInput}; Inv2c s;\n   HNextPart s s'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>p. outpt s' p \\<in> {chosen s', NotAnInput}\n  HPhase1or2ReadThen s s' p d q\n  Inv2c s\n  HInv6 s", "have \"\\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>p. outpt s p \\<in> {chosen s, NotAnInput}; Inv2c s;\n   HNextPart s s'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>p. outpt s' p \\<in> {chosen s', NotAnInput}\n  HPhase1or2ReadThen s s' p d q\n  Inv2c s\n  HInv6 s\n\ngoal (1 subgoal):\n 1. \\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput", "by(auto simp add: HInv6_def)"], ["proof (state)\nthis:\n  \\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput\n\ngoal (1 subgoal):\n 1. HInv6 s'", "with t1"], ["proof (chain)\npicking this:\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s' (chosen s')\n  \\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput", "show ?thesis"], ["proof (prove)\nusing this:\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s' (chosen s')\n  \\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput\n\ngoal (1 subgoal):\n 1. HInv6 s'", "by(simp add: HInv6_def)"], ["proof (state)\nthis:\n  HInv6 s'\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem HPhase1or2ReadElse_Inv6:\n  assumes act: \"HPhase1or2ReadElse s s' p d q\"\n  and inv: \"HInv6 s\"\n  and inv2c: \"Inv2c s\"\n  shows \"HInv6 s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HInv6 s'", "using assms and HStartBallot_Inv6"], ["proof (prove)\nusing this:\n  HPhase1or2ReadElse s s' p d q\n  HInv6 s\n  Inv2c s\n  \\<lbrakk>HStartBallot ?s ?s' ?p; HInv6 ?s; Inv2c ?s\\<rbrakk>\n  \\<Longrightarrow> HInv6 ?s'\n\ngoal (1 subgoal):\n 1. HInv6 s'", "by(auto simp add: Phase1or2ReadElse_def)"], ["", "theorem HEndPhase1_Inv6:\n  assumes act: \"HEndPhase1 s s' p\"\n  and inv: \"HInv6 s\"\n  and inv1: \"Inv1 s\"\n  and inv2a: \"Inv2a s\"\n  and inv2b: \"Inv2b s\"\n  and inv2c: \"Inv2c s\"\n  shows \"HInv6 s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HInv6 s'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. HInv6 s'", "from outpt_chosen act inv2c inv"], ["proof (chain)\npicking this:\n  \\<lbrakk>outpt ?s = outpt ?s'; Inv2c ?s; HNextPart ?s ?s'\\<rbrakk>\n  \\<Longrightarrow> chosen ?s' = chosen ?s\n  HEndPhase1 s s' p\n  Inv2c s\n  HInv6 s", "have \"chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s (chosen s')\""], ["proof (prove)\nusing this:\n  \\<lbrakk>outpt ?s = outpt ?s'; Inv2c ?s; HNextPart ?s ?s'\\<rbrakk>\n  \\<Longrightarrow> chosen ?s' = chosen ?s\n  HEndPhase1 s s' p\n  Inv2c s\n  HInv6 s\n\ngoal (1 subgoal):\n 1. chosen s' \\<noteq> NotAnInput \\<longrightarrow>\n    valueChosen s (chosen s')", "by(auto simp add: EndPhase1_def HInv6_def)"], ["proof (state)\nthis:\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s (chosen s')\n\ngoal (1 subgoal):\n 1. HInv6 s'", "from HEndPhase1_valueChosen[OF act] inv1 inv2a inv2b this InputsOrNi"], ["proof (chain)\npicking this:\n  \\<lbrakk>valueChosen s ?v; Inv1 s; Inv2a s; Inv2b s;\n   ?v \\<in> Inputs\\<rbrakk>\n  \\<Longrightarrow> valueChosen s' ?v\n  Inv1 s\n  Inv2a s\n  Inv2b s\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s (chosen s')\n  UNIV = Inputs \\<union> {NotAnInput}", "have t1: \"chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s' (chosen s')\""], ["proof (prove)\nusing this:\n  \\<lbrakk>valueChosen s ?v; Inv1 s; Inv2a s; Inv2b s;\n   ?v \\<in> Inputs\\<rbrakk>\n  \\<Longrightarrow> valueChosen s' ?v\n  Inv1 s\n  Inv2a s\n  Inv2b s\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s (chosen s')\n  UNIV = Inputs \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. chosen s' \\<noteq> NotAnInput \\<longrightarrow>\n    valueChosen s' (chosen s')", "by auto"], ["proof (state)\nthis:\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s' (chosen s')\n\ngoal (1 subgoal):\n 1. HInv6 s'", "from act"], ["proof (chain)\npicking this:\n  HEndPhase1 s s' p", "have outpt: \"outpt s = outpt s'\""], ["proof (prove)\nusing this:\n  HEndPhase1 s s' p\n\ngoal (1 subgoal):\n 1. outpt s = outpt s'", "by(auto simp add: EndPhase1_def)"], ["proof (state)\nthis:\n  outpt s = outpt s'\n\ngoal (1 subgoal):\n 1. HInv6 s'", "from outpt_Inv6[OF outpt] act inv2c inv"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<forall>p. outpt s p \\<in> {chosen s, NotAnInput}; Inv2c s;\n   HNextPart s s'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>p. outpt s' p \\<in> {chosen s', NotAnInput}\n  HEndPhase1 s s' p\n  Inv2c s\n  HInv6 s", "have \"\\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>p. outpt s p \\<in> {chosen s, NotAnInput}; Inv2c s;\n   HNextPart s s'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>p. outpt s' p \\<in> {chosen s', NotAnInput}\n  HEndPhase1 s s' p\n  Inv2c s\n  HInv6 s\n\ngoal (1 subgoal):\n 1. \\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput", "by(auto simp add: HInv6_def)"], ["proof (state)\nthis:\n  \\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput\n\ngoal (1 subgoal):\n 1. HInv6 s'", "with t1"], ["proof (chain)\npicking this:\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s' (chosen s')\n  \\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput", "show ?thesis"], ["proof (prove)\nusing this:\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s' (chosen s')\n  \\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput\n\ngoal (1 subgoal):\n 1. HInv6 s'", "by(simp add: HInv6_def)"], ["proof (state)\nthis:\n  HInv6 s'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma outpt_chosen_2:\n  assumes outpt: \"outpt s' = (outpt s) (p:= NotAnInput)\"\n  and inv2c: \"Inv2c s\"\n  and nextp: \"HNextPart s s'\"\n  shows \"chosen s = chosen s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chosen s = chosen s'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. chosen s = chosen s'", "from inv2c"], ["proof (chain)\npicking this:\n  Inv2c s", "have \"chosen s = NotAnInput \\<longrightarrow> (\\<forall>p. outpt s p = NotAnInput)\""], ["proof (prove)\nusing this:\n  Inv2c s\n\ngoal (1 subgoal):\n 1. chosen s = NotAnInput \\<longrightarrow>\n    (\\<forall>p. outpt s p = NotAnInput)", "by(auto simp add: Inv2c_inner_def Inv2c_def)"], ["proof (state)\nthis:\n  chosen s = NotAnInput \\<longrightarrow>\n  (\\<forall>p. outpt s p = NotAnInput)\n\ngoal (1 subgoal):\n 1. chosen s = chosen s'", "with outpt nextp"], ["proof (chain)\npicking this:\n  outpt s' = (outpt s)(p := NotAnInput)\n  HNextPart s s'\n  chosen s = NotAnInput \\<longrightarrow>\n  (\\<forall>p. outpt s p = NotAnInput)", "show ?thesis"], ["proof (prove)\nusing this:\n  outpt s' = (outpt s)(p := NotAnInput)\n  HNextPart s s'\n  chosen s = NotAnInput \\<longrightarrow>\n  (\\<forall>p. outpt s p = NotAnInput)\n\ngoal (1 subgoal):\n 1. chosen s = chosen s'", "by(auto simp add: HNextPart_def)"], ["proof (state)\nthis:\n  chosen s = chosen s'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma outpt_HInv6_2:\n  assumes outpt: \"outpt s' = (outpt s) (p:= NotAnInput)\"\n  and inv: \"\\<forall>p. outpt s p \\<in> {chosen s, NotAnInput}\"\n  and inv2c: \"Inv2c s\"\n  and nextp: \"HNextPart s s'\"\n  shows \"\\<forall>p. outpt s' p \\<in> {chosen s', NotAnInput}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p. outpt s' p \\<in> {chosen s', NotAnInput}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p. outpt s' p \\<in> {chosen s', NotAnInput}", "from outpt_chosen_2[OF outpt inv2c nextp]"], ["proof (chain)\npicking this:\n  chosen s = chosen s'", "have \"chosen s = chosen s'\""], ["proof (prove)\nusing this:\n  chosen s = chosen s'\n\ngoal (1 subgoal):\n 1. chosen s = chosen s'", "."], ["proof (state)\nthis:\n  chosen s = chosen s'\n\ngoal (1 subgoal):\n 1. \\<forall>p. outpt s' p \\<in> {chosen s', NotAnInput}", "with inv outpt"], ["proof (chain)\npicking this:\n  \\<forall>p. outpt s p \\<in> {chosen s, NotAnInput}\n  outpt s' = (outpt s)(p := NotAnInput)\n  chosen s = chosen s'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>p. outpt s p \\<in> {chosen s, NotAnInput}\n  outpt s' = (outpt s)(p := NotAnInput)\n  chosen s = chosen s'\n\ngoal (1 subgoal):\n 1. \\<forall>p. outpt s' p \\<in> {chosen s', NotAnInput}", "by auto"], ["proof (state)\nthis:\n  \\<forall>p. outpt s' p \\<in> {chosen s', NotAnInput}\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem HFail_Inv6:\n  assumes act: \"HFail s s' p\"\n  and inv: \"HInv6 s\"\n  and inv2c: \"Inv2c s\"\n  shows \"HInv6 s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HInv6 s'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. HInv6 s'", "from outpt_chosen_2 act inv2c inv"], ["proof (chain)\npicking this:\n  \\<lbrakk>outpt ?s' = (outpt ?s)(?p := NotAnInput); Inv2c ?s;\n   HNextPart ?s ?s'\\<rbrakk>\n  \\<Longrightarrow> chosen ?s = chosen ?s'\n  HFail s s' p\n  Inv2c s\n  HInv6 s", "have \"chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s (chosen s')\""], ["proof (prove)\nusing this:\n  \\<lbrakk>outpt ?s' = (outpt ?s)(?p := NotAnInput); Inv2c ?s;\n   HNextPart ?s ?s'\\<rbrakk>\n  \\<Longrightarrow> chosen ?s = chosen ?s'\n  HFail s s' p\n  Inv2c s\n  HInv6 s\n\ngoal (1 subgoal):\n 1. chosen s' \\<noteq> NotAnInput \\<longrightarrow>\n    valueChosen s (chosen s')", "by(auto simp add: Fail_def HInv6_def)"], ["proof (state)\nthis:\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s (chosen s')\n\ngoal (1 subgoal):\n 1. HInv6 s'", "from HFail_valueChosen[OF act] this InputsOrNi"], ["proof (chain)\npicking this:\n  \\<lbrakk>valueChosen s ?v; ?v \\<in> Inputs\\<rbrakk>\n  \\<Longrightarrow> valueChosen s' ?v\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s (chosen s')\n  UNIV = Inputs \\<union> {NotAnInput}", "have t1: \"chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s' (chosen s')\""], ["proof (prove)\nusing this:\n  \\<lbrakk>valueChosen s ?v; ?v \\<in> Inputs\\<rbrakk>\n  \\<Longrightarrow> valueChosen s' ?v\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s (chosen s')\n  UNIV = Inputs \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. chosen s' \\<noteq> NotAnInput \\<longrightarrow>\n    valueChosen s' (chosen s')", "by auto"], ["proof (state)\nthis:\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s' (chosen s')\n\ngoal (1 subgoal):\n 1. HInv6 s'", "from act"], ["proof (chain)\npicking this:\n  HFail s s' p", "have outpt: \"outpt s' = (outpt s) (p:=NotAnInput) \""], ["proof (prove)\nusing this:\n  HFail s s' p\n\ngoal (1 subgoal):\n 1. outpt s' = (outpt s)(p := NotAnInput)", "by(auto simp add: Fail_def)"], ["proof (state)\nthis:\n  outpt s' = (outpt s)(p := NotAnInput)\n\ngoal (1 subgoal):\n 1. HInv6 s'", "from outpt_HInv6_2[OF outpt] act inv2c inv"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<forall>p. outpt s p \\<in> {chosen s, NotAnInput}; Inv2c s;\n   HNextPart s s'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>p. outpt s' p \\<in> {chosen s', NotAnInput}\n  HFail s s' p\n  Inv2c s\n  HInv6 s", "have \"\\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>p. outpt s p \\<in> {chosen s, NotAnInput}; Inv2c s;\n   HNextPart s s'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>p. outpt s' p \\<in> {chosen s', NotAnInput}\n  HFail s s' p\n  Inv2c s\n  HInv6 s\n\ngoal (1 subgoal):\n 1. \\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput", "by(auto simp add: HInv6_def)"], ["proof (state)\nthis:\n  \\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput\n\ngoal (1 subgoal):\n 1. HInv6 s'", "with t1"], ["proof (chain)\npicking this:\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s' (chosen s')\n  \\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput", "show ?thesis"], ["proof (prove)\nusing this:\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s' (chosen s')\n  \\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput\n\ngoal (1 subgoal):\n 1. HInv6 s'", "by(simp add: HInv6_def)"], ["proof (state)\nthis:\n  HInv6 s'\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem HPhase0Read_Inv6:\n  assumes act: \"HPhase0Read s s' p d\"\n  and inv: \"HInv6 s\"\n  and inv2c: \"Inv2c s\"\n  shows \"HInv6 s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HInv6 s'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. HInv6 s'", "from outpt_chosen act inv2c inv"], ["proof (chain)\npicking this:\n  \\<lbrakk>outpt ?s = outpt ?s'; Inv2c ?s; HNextPart ?s ?s'\\<rbrakk>\n  \\<Longrightarrow> chosen ?s' = chosen ?s\n  HPhase0Read s s' p d\n  Inv2c s\n  HInv6 s", "have \"chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s (chosen s')\""], ["proof (prove)\nusing this:\n  \\<lbrakk>outpt ?s = outpt ?s'; Inv2c ?s; HNextPart ?s ?s'\\<rbrakk>\n  \\<Longrightarrow> chosen ?s' = chosen ?s\n  HPhase0Read s s' p d\n  Inv2c s\n  HInv6 s\n\ngoal (1 subgoal):\n 1. chosen s' \\<noteq> NotAnInput \\<longrightarrow>\n    valueChosen s (chosen s')", "by(auto simp add: Phase0Read_def HInv6_def)"], ["proof (state)\nthis:\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s (chosen s')\n\ngoal (1 subgoal):\n 1. HInv6 s'", "from HPhase0Read_valueChosen[OF act] this InputsOrNi"], ["proof (chain)\npicking this:\n  \\<lbrakk>valueChosen s ?v; ?v \\<in> Inputs\\<rbrakk>\n  \\<Longrightarrow> valueChosen s' ?v\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s (chosen s')\n  UNIV = Inputs \\<union> {NotAnInput}", "have t1: \"chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s' (chosen s')\""], ["proof (prove)\nusing this:\n  \\<lbrakk>valueChosen s ?v; ?v \\<in> Inputs\\<rbrakk>\n  \\<Longrightarrow> valueChosen s' ?v\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s (chosen s')\n  UNIV = Inputs \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. chosen s' \\<noteq> NotAnInput \\<longrightarrow>\n    valueChosen s' (chosen s')", "by auto"], ["proof (state)\nthis:\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s' (chosen s')\n\ngoal (1 subgoal):\n 1. HInv6 s'", "from act"], ["proof (chain)\npicking this:\n  HPhase0Read s s' p d", "have outpt: \"outpt s = outpt s'\""], ["proof (prove)\nusing this:\n  HPhase0Read s s' p d\n\ngoal (1 subgoal):\n 1. outpt s = outpt s'", "by(auto simp add: Phase0Read_def)"], ["proof (state)\nthis:\n  outpt s = outpt s'\n\ngoal (1 subgoal):\n 1. HInv6 s'", "from outpt_Inv6[OF outpt] act inv2c inv"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<forall>p. outpt s p \\<in> {chosen s, NotAnInput}; Inv2c s;\n   HNextPart s s'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>p. outpt s' p \\<in> {chosen s', NotAnInput}\n  HPhase0Read s s' p d\n  Inv2c s\n  HInv6 s", "have \"\\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>p. outpt s p \\<in> {chosen s, NotAnInput}; Inv2c s;\n   HNextPart s s'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>p. outpt s' p \\<in> {chosen s', NotAnInput}\n  HPhase0Read s s' p d\n  Inv2c s\n  HInv6 s\n\ngoal (1 subgoal):\n 1. \\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput", "by(auto simp add: HInv6_def)"], ["proof (state)\nthis:\n  \\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput\n\ngoal (1 subgoal):\n 1. HInv6 s'", "with t1"], ["proof (chain)\npicking this:\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s' (chosen s')\n  \\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput", "show ?thesis"], ["proof (prove)\nusing this:\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s' (chosen s')\n  \\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput\n\ngoal (1 subgoal):\n 1. HInv6 s'", "by(simp add: HInv6_def)"], ["proof (state)\nthis:\n  HInv6 s'\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem HEndPhase0_Inv6:\n  assumes act: \"HEndPhase0 s s' p\"\n  and inv: \"HInv6 s\"\n  and inv1: \"Inv1 s\"\n  and inv2c: \"Inv2c s\"\n  shows \"HInv6 s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HInv6 s'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. HInv6 s'", "from outpt_chosen act inv2c inv"], ["proof (chain)\npicking this:\n  \\<lbrakk>outpt ?s = outpt ?s'; Inv2c ?s; HNextPart ?s ?s'\\<rbrakk>\n  \\<Longrightarrow> chosen ?s' = chosen ?s\n  HEndPhase0 s s' p\n  Inv2c s\n  HInv6 s", "have \"chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s (chosen s')\""], ["proof (prove)\nusing this:\n  \\<lbrakk>outpt ?s = outpt ?s'; Inv2c ?s; HNextPart ?s ?s'\\<rbrakk>\n  \\<Longrightarrow> chosen ?s' = chosen ?s\n  HEndPhase0 s s' p\n  Inv2c s\n  HInv6 s\n\ngoal (1 subgoal):\n 1. chosen s' \\<noteq> NotAnInput \\<longrightarrow>\n    valueChosen s (chosen s')", "by(auto simp add: EndPhase0_def HInv6_def)"], ["proof (state)\nthis:\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s (chosen s')\n\ngoal (1 subgoal):\n 1. HInv6 s'", "from HEndPhase0_valueChosen[OF act] inv1 this InputsOrNi"], ["proof (chain)\npicking this:\n  \\<lbrakk>valueChosen s ?v; ?v \\<in> Inputs; Inv1 s\\<rbrakk>\n  \\<Longrightarrow> valueChosen s' ?v\n  Inv1 s\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s (chosen s')\n  UNIV = Inputs \\<union> {NotAnInput}", "have t1: \"chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s' (chosen s')\""], ["proof (prove)\nusing this:\n  \\<lbrakk>valueChosen s ?v; ?v \\<in> Inputs; Inv1 s\\<rbrakk>\n  \\<Longrightarrow> valueChosen s' ?v\n  Inv1 s\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s (chosen s')\n  UNIV = Inputs \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. chosen s' \\<noteq> NotAnInput \\<longrightarrow>\n    valueChosen s' (chosen s')", "by auto"], ["proof (state)\nthis:\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s' (chosen s')\n\ngoal (1 subgoal):\n 1. HInv6 s'", "from act"], ["proof (chain)\npicking this:\n  HEndPhase0 s s' p", "have outpt: \"outpt s = outpt s'\""], ["proof (prove)\nusing this:\n  HEndPhase0 s s' p\n\ngoal (1 subgoal):\n 1. outpt s = outpt s'", "by(auto simp add: EndPhase0_def)"], ["proof (state)\nthis:\n  outpt s = outpt s'\n\ngoal (1 subgoal):\n 1. HInv6 s'", "from outpt_Inv6[OF outpt] act inv2c inv"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<forall>p. outpt s p \\<in> {chosen s, NotAnInput}; Inv2c s;\n   HNextPart s s'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>p. outpt s' p \\<in> {chosen s', NotAnInput}\n  HEndPhase0 s s' p\n  Inv2c s\n  HInv6 s", "have \"\\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>p. outpt s p \\<in> {chosen s, NotAnInput}; Inv2c s;\n   HNextPart s s'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>p. outpt s' p \\<in> {chosen s', NotAnInput}\n  HEndPhase0 s s' p\n  Inv2c s\n  HInv6 s\n\ngoal (1 subgoal):\n 1. \\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput", "by(auto simp add: HInv6_def)"], ["proof (state)\nthis:\n  \\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput\n\ngoal (1 subgoal):\n 1. HInv6 s'", "with t1"], ["proof (chain)\npicking this:\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s' (chosen s')\n  \\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput", "show ?thesis"], ["proof (prove)\nusing this:\n  chosen s' \\<noteq> NotAnInput \\<longrightarrow> valueChosen s' (chosen s')\n  \\<forall>p. outpt s' p = chosen s' \\<or> outpt s' p = NotAnInput\n\ngoal (1 subgoal):\n 1. HInv6 s'", "by(simp add: HInv6_def)"], ["proof (state)\nthis:\n  HInv6 s'\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>\n  $HInv1 \\wedge HInv2 \\wedge HInv2' \\wedge HInv3 \\wedge HInv4 \\wedge HInv5 \\wedge HInv6$ \n  is an invariant of $HNext$.\n\\<close>"], ["", "lemma I2f:\n  assumes nxt: \"HNext s s'\"\n  and inv: \"HInv1 s \\<and> HInv2 s \\<and> HInv2 s' \\<and> HInv3 s \\<and> HInv4 s \\<and> HInv5 s \\<and> HInv6 s\"\n  shows \"HInv6 s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HInv6 s'", "using assms"], ["proof (prove)\nusing this:\n  HNext s s'\n  HInv1 s \\<and>\n  HInv2 s \\<and>\n  HInv2 s' \\<and> HInv3 s \\<and> HInv4 s \\<and> HInv5 s \\<and> HInv6 s\n\ngoal (1 subgoal):\n 1. HInv6 s'", "by(auto simp add: HNext_def Next_def,\n     auto simp add: HInv2_def intro: HStartBallot_Inv6,\n     auto intro: HPhase0Read_Inv6,\n     auto simp add: HInv4_def intro: HPhase1or2Write_Inv6,\n     auto simp add: Phase1or2Read_def\n          intro: HPhase1or2ReadThen_Inv6\n                 HPhase1or2ReadElse_Inv6,\n     auto simp add: EndPhase1or2_def HInv1_def HInv5_def\n          intro: HEndPhase1_Inv6\n                 HEndPhase2_Inv6,\n     auto intro: HFail_Inv6,\n     auto intro: HEndPhase0_Inv6)"], ["", "end"]]}