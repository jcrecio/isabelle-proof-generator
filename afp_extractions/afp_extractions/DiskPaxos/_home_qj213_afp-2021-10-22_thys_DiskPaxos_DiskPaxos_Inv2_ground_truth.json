{"file_name": "/home/qj213/afp-2021-10-22/thys/DiskPaxos/DiskPaxos_Inv2.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/DiskPaxos", "problem_names": ["theorem HInit_Inv2a: \"HInit s \\<longrightarrow> Inv2a s\"", "lemma HPhase1or2ReadThen_blocksOf:\n  \"\\<lbrakk> HPhase1or2ReadThen s s' p d q \\<rbrakk> \\<Longrightarrow> blocksOf s' r \\<subseteq> blocksOf s r\"", "theorem HPhase1or2ReadThen_Inv2a:\n  assumes inv: \"Inv2a s\"\n  and act: \"HPhase1or2ReadThen s s' p d q\"\n  shows \"Inv2a s'\"", "lemma InitializePhase_rdBy:\n  \"InitializePhase s s' p \\<Longrightarrow> rdBy s' pp qq dd \\<subseteq> rdBy s pp qq dd\"", "lemma HStartBallot_blocksOf:\n  \"HStartBallot s s' p \\<Longrightarrow> blocksOf s' q \\<subseteq> blocksOf s q \\<union> {dblock s' q}\"", "lemma HStartBallot_Inv2a_dblock:\n  assumes act: \"HStartBallot s s' p\"\n  and inv2a: \"Inv2a_innermost s p (dblock s p)\"\n  shows \"Inv2a_innermost s' p (dblock s' p)\"", "lemma HStartBallot_Inv2a_dblock_q:\n  assumes act: \"HStartBallot s s' p\"\n  and inv2a: \"Inv2a_innermost s q (dblock s q)\"\n  shows \"Inv2a_innermost s' q (dblock s' q)\"", "theorem HStartBallot_Inv2a:\n  assumes inv: \"Inv2a s\"\n  and act: \"HStartBallot s s' p\"\n  shows \"Inv2a s'\"", "lemma HPhase1or2Write_blocksOf:\n  \"\\<lbrakk> HPhase1or2Write s s' p d \\<rbrakk> \\<Longrightarrow> blocksOf s' r \\<subseteq> blocksOf s r\"", "theorem HPhase1or2Write_Inv2a:\n  assumes inv: \"Inv2a s\"\n  and     act: \"HPhase1or2Write s s' p d\"\n  shows \"Inv2a s'\"", "theorem HPhase1or2ReadElse_Inv2a:\n  assumes inv: \"Inv2a s\"\n  and act:     \"HPhase1or2ReadElse s s' p d q\"\n  shows \"Inv2a s'\"", "lemma HEndPhase2_blocksOf:\n  \"\\<lbrakk> HEndPhase2 s s' p \\<rbrakk> \\<Longrightarrow> blocksOf s' q \\<subseteq> blocksOf s q\"", "theorem HEndPhase2_Inv2a:\n  assumes inv: \"Inv2a s\"\n  and     act: \"HEndPhase2 s s' p\"\n  shows        \"Inv2a s'\"", "lemma HFail_blocksOf:\n   \"HFail s s' p  \\<Longrightarrow> blocksOf s' q \\<subseteq> blocksOf s q \\<union> {dblock s' q}\"", "lemma HFail_Inv2a_dblock_q:\n  assumes act: \"HFail s s' p\"\n  and     inv: \"Inv2a_innermost s q (dblock s q)\"\n  shows \"Inv2a_innermost s' q (dblock s' q)\"", "theorem HFail_Inv2a:\n assumes inv: \"Inv2a s\"\n  and     act: \"HFail s s' p\"\n  shows        \"Inv2a s'\"", "lemma HPhase0Read_blocksOf:\n  \"HPhase0Read s s' p d \\<Longrightarrow> blocksOf s' q \\<subseteq> blocksOf s q\"", "theorem HPhase0Read_Inv2a:\n  assumes inv: \"Inv2a s\"\n  and     act: \"HPhase0Read s s' p d\"\n  shows        \"Inv2a s'\"", "lemma HEndPhase0_blocksOf:\n  \" HEndPhase0 s s' p \\<Longrightarrow> blocksOf s' q \\<subseteq> blocksOf s q \\<union> {dblock s' q}\"", "lemma HEndPhase0_blocksRead:\n  assumes act: \"HEndPhase0 s s' p\"\n  shows \"\\<exists>d. blocksRead s p d \\<noteq> {}\"", "lemma HEndPhase0_some:\n  assumes act:  \"HEndPhase0 s s' p\"\n  and    inv1:  \"Inv1 s\"\n  shows  \"(SOME b.    b \\<in> allBlocksRead s p \n                   \\<and> (\\<forall>t\\<in>allBlocksRead s p. bal t \\<le> bal b)\n          ) \\<in> allBlocksRead s p \n        \\<and> (\\<forall>t\\<in>allBlocksRead s p. \n             bal t \\<le> bal (SOME b.    b \\<in> allBlocksRead s p \n                                  \\<and> (\\<forall>t\\<in>allBlocksRead s p. bal t \\<le> bal b)))\"", "lemma HEndPhase0_dblock_allBlocksRead:\n  assumes act:  \"HEndPhase0 s s' p\"\n  and    inv1:  \"Inv1 s\"\n  shows   \"dblock s' p \\<in> (\\<lambda>x. x \\<lparr>mbal:= mbal(dblock s' p)\\<rparr>) ` allBlocksRead s p\"", "lemma HNextPart_allInput_or_NotAnInput:\n  assumes act: \"HNextPart s s'\"\n  and inv2a: \"Inv2a_innermost s p (dblock s' p)\"\n  shows \"inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\"", "lemma HEndPhase0_Inv2a_allBlocksRead:\n  assumes act: \"HEndPhase0 s s' p\"\n  and inv2a: \"Inv2a_inner s p\"\n  and inv2c: \"Inv2c_inner s p\"\n  shows \"\\<forall>t \\<in> (\\<lambda>x. x \\<lparr>mbal:= mbal (dblock s' p)\\<rparr>) ` allBlocksRead s p. \n          Inv2a_innermost s p t\"", "lemma HEndPhase0_Inv2a_dblock:\n  assumes act: \"HEndPhase0 s s' p\"\n  and inv1: \"Inv1 s\"\n  and inv2a: \"Inv2a_inner s p\"\n  and inv2c: \"Inv2c_inner s p\"\n  shows \"Inv2a_innermost s' p (dblock s' p)\"", "lemma HEndPhase0_Inv2a_dblock_q:\n  assumes act: \"HEndPhase0 s s' p\"\n  and inv1: \"Inv1 s\"\n  and inv2a: \"Inv2a_inner s q\"\n  and inv2c: \"Inv2c_inner s p\"\n  shows \"Inv2a_innermost s' q (dblock s' q)\"", "theorem HEndPhase0_Inv2a:\n  assumes inv: \"Inv2a s\"\n  and     act: \"HEndPhase0 s s' p\"\n  and    inv1: \"Inv1 s\"\n  and   inv2c: \"Inv2c_inner s p\"\n  shows        \"Inv2a s'\"", "lemma HEndPhase1_blocksOf:\n  \"HEndPhase1 s s' p \\<Longrightarrow> blocksOf s' q \\<subseteq> blocksOf s q \\<union> {dblock s' q}\"", "lemma maxBlk_in_nonInitBlks:\n  assumes b: \"b \\<in> nonInitBlks s p\"\n  and inv1: \"Inv1 s\"\n  shows \"   maxBlk s p \\<in> nonInitBlks s p \n         \\<and> (\\<forall>c\\<in> nonInitBlks s p. bal c \\<le> bal (maxBlk s p))\"", "lemma blocksOf_nonInitBlks: \n  \"(\\<forall>p bk. bk \\<in> blocksOf s p \\<longrightarrow> P bk) \n       \\<Longrightarrow> bk \\<in> nonInitBlks s p \\<longrightarrow> P bk\"", "lemma maxBlk_allInput: \n  assumes inv: \"Inv2a s\" \n  and mblk: \"maxBlk s p \\<in> nonInitBlks s p\"\n  shows \"inp (maxBlk s p) \\<in> allInput s\"", "lemma HEndPhase1_dblock_allInput: \n  assumes act: \"HEndPhase1 s s' p\"\n  and inv1: \"HInv1 s\"\n  and inv2: \"Inv2a s\"\n  shows inp': \"inp (dblock s' p) \\<in> allInput s'\"", "lemma HEndPhase1_Inv2a_dblock:\n  assumes act: \"HEndPhase1 s s' p\"\n  and inv1: \"HInv1 s\"\n  and inv2: \"Inv2a s\"\n  and inv2c: \"Inv2c_inner s p\"\n  shows \"Inv2a_innermost s' p (dblock s' p)\"", "lemma HEndPhase1_Inv2a_dblock_q:\n  assumes act: \"HEndPhase1 s s' p\"\n  and inv1: \"HInv1 s\"\n  and inv: \"Inv2a s\"\n  and inv2c: \"Inv2c_inner s p\"\n  shows \"Inv2a_innermost s' q (dblock s' q)\"", "theorem HEndPhase1_Inv2a:\n  assumes act: \"HEndPhase1 s s' p\"\n  and inv1: \"HInv1 s\"\n  and inv: \"Inv2a s\"\n  and inv2c: \"Inv2c_inner s p\"\n  shows \"Inv2a s'\"", "theorem HInit_Inv2b: \"HInit s \\<longrightarrow> Inv2b s\"", "theorem HPhase1or2ReadThen_Inv2b:\n  \"\\<lbrakk> Inv2b s; HPhase1or2ReadThen s s' p d q \\<rbrakk>\n   \\<Longrightarrow> Inv2b s'\"", "theorem HStartBallot_Inv2b:\n  \"\\<lbrakk> Inv2b s; HStartBallot s s' p \\<rbrakk>\n   \\<Longrightarrow> Inv2b s'\"", "theorem HPhase1or2Write_Inv2b:\n  \"\\<lbrakk> Inv2b s; HPhase1or2Write s s' p d \\<rbrakk>\n   \\<Longrightarrow> Inv2b s'\"", "theorem HPhase1or2ReadElse_Inv2b:\n  \"\\<lbrakk> Inv2b s; HPhase1or2ReadElse s s' p d q \\<rbrakk>\n   \\<Longrightarrow> Inv2b s'\"", "theorem HEndPhase1_Inv2b:\n  \"\\<lbrakk> Inv2b s; HEndPhase1 s s' p \\<rbrakk> \\<Longrightarrow> Inv2b s'\"", "theorem HFail_Inv2b:\n  \"\\<lbrakk> Inv2b s; HFail s s' p \\<rbrakk>\n   \\<Longrightarrow> Inv2b s'\"", "theorem HEndPhase2_Inv2b:\n  \"\\<lbrakk> Inv2b s; HEndPhase2 s s' p \\<rbrakk> \\<Longrightarrow> Inv2b s'\"", "theorem HPhase0Read_Inv2b:\n  \"\\<lbrakk> Inv2b s; HPhase0Read s s' p d \\<rbrakk> \\<Longrightarrow> Inv2b s'\"", "theorem HEndPhase0_Inv2b:\n  \"\\<lbrakk> Inv2b s; HEndPhase0 s s' p \\<rbrakk> \\<Longrightarrow> Inv2b s'\"", "theorem HInit_Inv2c: \"HInit s \\<longrightarrow> Inv2c s\"", "lemma HNextPart_Inv2c_chosen:\n  assumes  hnp: \"HNextPart s s'\"\n  and    inv2c: \"Inv2c s\"\n  and   outpt': \"\\<forall>p. outpt s' p = (if phase s' p = 3 \n                                      then inp(dblock s' p) \n                                      else NotAnInput)\"\n  and inp_dblk: \"\\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\"\n  shows  \"chosen s' \\<in> allInput s' \\<union> {NotAnInput}\"", "lemma HNextPart_chosen:\n  assumes hnp: \"HNextPart s s'\"\n  shows  \"chosen s' = NotAnInput \\<longrightarrow> (\\<forall>p. outpt s' p = NotAnInput)\"", "lemma HNextPart_allInput:\n  \"\\<lbrakk> HNextPart s s'; Inv2c s \\<rbrakk> \\<Longrightarrow> \\<forall>p. inpt s' p \\<in> allInput s'\"", "theorem HPhase1or2ReadThen_Inv2c:\n  assumes inv: \"Inv2c s\"\n  and act: \"HPhase1or2ReadThen s s' p d q\"\n  and inv2a: \"Inv2a s\"\n  shows \"Inv2c s'\"", "theorem HStartBallot_Inv2c:\n  assumes inv: \"Inv2c s\"\n  and act: \"HStartBallot s s' p\"\n  and inv2a: \"Inv2a s\"\n  shows \"Inv2c s'\"", "theorem HPhase1or2Write_Inv2c:\n  assumes inv: \"Inv2c s\"\n  and act: \"HPhase1or2Write s s' p d\"\n  and inv2a: \"Inv2a s\"\n  shows \"Inv2c s'\"", "theorem HPhase1or2ReadElse_Inv2c:\n  \" \\<lbrakk> Inv2c s; HPhase1or2ReadElse s s' p d q; Inv2a s \\<rbrakk> \\<Longrightarrow> Inv2c s'\"", "theorem HEndPhase1_Inv2c:\n  assumes inv: \"Inv2c s\"\n  and act: \"HEndPhase1 s s' p\"\n  and inv2a: \"Inv2a s\"\n  and inv1: \"HInv1 s\"\n  shows \"Inv2c s'\"", "theorem HEndPhase2_Inv2c:\n  assumes inv: \"Inv2c s\"\n  and act: \"HEndPhase2 s s' p\"\n  and inv2a: \"Inv2a s\"\n  shows \"Inv2c s'\"", "theorem HFail_Inv2c:\n  assumes inv: \"Inv2c s\"\n  and act: \"HFail s s' p\"\n  and inv2a: \"Inv2a s\"\n  shows \"Inv2c s'\"", "theorem HPhase0Read_Inv2c:\n  assumes inv: \"Inv2c s\"\n  and act: \"HPhase0Read s s' p d\"\n  and inv2a: \"Inv2a s\"\n  shows \"Inv2c s'\"", "theorem HEndPhase0_Inv2c:\n  assumes inv: \"Inv2c s\"\n  and act: \"HEndPhase0 s s' p\"\n  and inv2a: \"Inv2a s\"\n  and inv1: \"Inv1 s\"\n  shows \"Inv2c s'\"", "theorem HInit_HInv2:\n  \"HInit s \\<Longrightarrow> HInv2 s\"", "lemma I2b:\n  assumes nxt: \"HNext s s'\"\n  and inv: \"HInv1 s \\<and> HInv2 s\"\n  shows \"HInv2 s'\""], "translations": [["", "theorem HInit_Inv2a: \"HInit s \\<longrightarrow> Inv2a s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HInit s \\<longrightarrow> Inv2a s", "by (auto simp add: HInit_def Init_def Inv2a_def Inv2a_inner_def \n                   Inv2a_innermost_def rdBy_def blocksOf_def \n                   InitDB_def)"], ["", "text\\<open>\n  For every action we define a action-$blocksOf$ lemma. We have two cases: either \nthe new $blocksOf$ is included in the old $blocksOf$, or the new $blocksOf$ is included \nin the old $blocksOf$ union the new $dblock$. In the former case the assumption $inv$ will \nimply the thesis. In the latter, we just have to prove the innermost predicate for \nthe particular case of the new $dblock$. \nThis particular case is proved in lemma action-$Inv2a$-$dblock$.  \n\\<close>"], ["", "lemma HPhase1or2ReadThen_blocksOf:\n  \"\\<lbrakk> HPhase1or2ReadThen s s' p d q \\<rbrakk> \\<Longrightarrow> blocksOf s' r \\<subseteq> blocksOf s r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HPhase1or2ReadThen s s' p d q \\<Longrightarrow>\n    blocksOf s' r \\<subseteq> blocksOf s r", "by(auto simp add: Phase1or2ReadThen_def blocksOf_def rdBy_def)"], ["", "theorem HPhase1or2ReadThen_Inv2a:\n  assumes inv: \"Inv2a s\"\n  and act: \"HPhase1or2ReadThen s s' p d q\"\n  shows \"Inv2a s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inv2a s'", "proof (clarsimp simp add: Inv2a_def Inv2a_inner_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "fix pp bk"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "assume bk: \"bk \\<in> blocksOf s' pp\""], ["proof (state)\nthis:\n  bk \\<in> blocksOf s' pp\n\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "with inv HPhase1or2ReadThen_blocksOf[OF act]"], ["proof (chain)\npicking this:\n  Inv2a s\n  blocksOf s' ?r \\<subseteq> blocksOf s ?r\n  bk \\<in> blocksOf s' pp", "have \"Inv2a_innermost s pp bk\""], ["proof (prove)\nusing this:\n  Inv2a s\n  blocksOf s' ?r \\<subseteq> blocksOf s ?r\n  bk \\<in> blocksOf s' pp\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s pp bk", "by(auto simp add: Inv2a_def Inv2a_inner_def)"], ["proof (state)\nthis:\n  Inv2a_innermost s pp bk\n\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "with act"], ["proof (chain)\npicking this:\n  HPhase1or2ReadThen s s' p d q\n  Inv2a_innermost s pp bk", "show \"Inv2a_innermost s' pp bk\""], ["proof (prove)\nusing this:\n  HPhase1or2ReadThen s s' p d q\n  Inv2a_innermost s pp bk\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' pp bk", "by(auto simp add: Inv2a_innermost_def HNextPart_def)"], ["proof (state)\nthis:\n  Inv2a_innermost s' pp bk\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma InitializePhase_rdBy:\n  \"InitializePhase s s' p \\<Longrightarrow> rdBy s' pp qq dd \\<subseteq> rdBy s pp qq dd\""], ["proof (prove)\ngoal (1 subgoal):\n 1. InitializePhase s s' p \\<Longrightarrow>\n    rdBy s' pp qq dd \\<subseteq> rdBy s pp qq dd", "by(auto simp add: InitializePhase_def rdBy_def)"], ["", "lemma HStartBallot_blocksOf:\n  \"HStartBallot s s' p \\<Longrightarrow> blocksOf s' q \\<subseteq> blocksOf s q \\<union> {dblock s' q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HStartBallot s s' p \\<Longrightarrow>\n    blocksOf s' q \\<subseteq> blocksOf s q \\<union> {dblock s' q}", "by(auto simp add: StartBallot_def blocksOf_def\n         dest: subsetD[OF InitializePhase_rdBy])"], ["", "lemma HStartBallot_Inv2a_dblock:\n  assumes act: \"HStartBallot s s' p\"\n  and inv2a: \"Inv2a_innermost s p (dblock s p)\"\n  shows \"Inv2a_innermost s' p (dblock s' p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inv2a_innermost s' p (dblock s' p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Inv2a_innermost s' p (dblock s' p)", "from act"], ["proof (chain)\npicking this:\n  HStartBallot s s' p", "have mbal': \"mbal (dblock s' p) \\<in> Ballot p\""], ["proof (prove)\nusing this:\n  HStartBallot s s' p\n\ngoal (1 subgoal):\n 1. mbal (dblock s' p) \\<in> Ballot p", "by(auto simp add: StartBallot_def)"], ["proof (state)\nthis:\n  mbal (dblock s' p) \\<in> Ballot p\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' p (dblock s' p)", "from act"], ["proof (chain)\npicking this:\n  HStartBallot s s' p", "have bal': \"bal (dblock s' p) = bal (dblock s p)\""], ["proof (prove)\nusing this:\n  HStartBallot s s' p\n\ngoal (1 subgoal):\n 1. bal (dblock s' p) = bal (dblock s p)", "by(auto simp add: StartBallot_def)"], ["proof (state)\nthis:\n  bal (dblock s' p) = bal (dblock s p)\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' p (dblock s' p)", "with act"], ["proof (chain)\npicking this:\n  HStartBallot s s' p\n  bal (dblock s' p) = bal (dblock s p)", "have inp': \"inp (dblock s' p) = inp (dblock s p)\""], ["proof (prove)\nusing this:\n  HStartBallot s s' p\n  bal (dblock s' p) = bal (dblock s p)\n\ngoal (1 subgoal):\n 1. inp (dblock s' p) = inp (dblock s p)", "by(auto simp add: StartBallot_def)"], ["proof (state)\nthis:\n  inp (dblock s' p) = inp (dblock s p)\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' p (dblock s' p)", "from act"], ["proof (chain)\npicking this:\n  HStartBallot s s' p", "have \"mbal (dblock s p) \\<le> mbal (dblock s' p)\""], ["proof (prove)\nusing this:\n  HStartBallot s s' p\n\ngoal (1 subgoal):\n 1. mbal (dblock s p) \\<le> mbal (dblock s' p)", "by(auto simp add: StartBallot_def)"], ["proof (state)\nthis:\n  mbal (dblock s p) \\<le> mbal (dblock s' p)\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' p (dblock s' p)", "with bal' inv2a"], ["proof (chain)\npicking this:\n  bal (dblock s' p) = bal (dblock s p)\n  Inv2a_innermost s p (dblock s p)\n  mbal (dblock s p) \\<le> mbal (dblock s' p)", "have bal_mbal: \"bal (dblock s' p) \\<le> mbal (dblock s' p)\""], ["proof (prove)\nusing this:\n  bal (dblock s' p) = bal (dblock s p)\n  Inv2a_innermost s p (dblock s p)\n  mbal (dblock s p) \\<le> mbal (dblock s' p)\n\ngoal (1 subgoal):\n 1. bal (dblock s' p) \\<le> mbal (dblock s' p)", "by(auto simp add: Inv2a_innermost_def)"], ["proof (state)\nthis:\n  bal (dblock s' p) \\<le> mbal (dblock s' p)\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' p (dblock s' p)", "from act"], ["proof (chain)\npicking this:\n  HStartBallot s s' p", "have \"allInput s \\<subseteq> allInput s'\""], ["proof (prove)\nusing this:\n  HStartBallot s s' p\n\ngoal (1 subgoal):\n 1. allInput s \\<subseteq> allInput s'", "by(auto simp add: HNextPart_def)"], ["proof (state)\nthis:\n  allInput s \\<subseteq> allInput s'\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' p (dblock s' p)", "with mbal' bal' inp' bal_mbal act inv2a"], ["proof (chain)\npicking this:\n  mbal (dblock s' p) \\<in> Ballot p\n  bal (dblock s' p) = bal (dblock s p)\n  inp (dblock s' p) = inp (dblock s p)\n  bal (dblock s' p) \\<le> mbal (dblock s' p)\n  HStartBallot s s' p\n  Inv2a_innermost s p (dblock s p)\n  allInput s \\<subseteq> allInput s'", "show ?thesis"], ["proof (prove)\nusing this:\n  mbal (dblock s' p) \\<in> Ballot p\n  bal (dblock s' p) = bal (dblock s p)\n  inp (dblock s' p) = inp (dblock s p)\n  bal (dblock s' p) \\<le> mbal (dblock s' p)\n  HStartBallot s s' p\n  Inv2a_innermost s p (dblock s p)\n  allInput s \\<subseteq> allInput s'\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' p (dblock s' p)", "by(auto simp add: Inv2a_innermost_def)"], ["proof (state)\nthis:\n  Inv2a_innermost s' p (dblock s' p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma HStartBallot_Inv2a_dblock_q:\n  assumes act: \"HStartBallot s s' p\"\n  and inv2a: \"Inv2a_innermost s q (dblock s q)\"\n  shows \"Inv2a_innermost s' q (dblock s' q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inv2a_innermost s' q (dblock s' q)", "proof(cases \"p=q\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)\n 2. p \\<noteq> q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)", "case True"], ["proof (state)\nthis:\n  p = q\n\ngoal (2 subgoals):\n 1. p = q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)\n 2. p \\<noteq> q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)", "with act inv2a"], ["proof (chain)\npicking this:\n  HStartBallot s s' p\n  Inv2a_innermost s q (dblock s q)\n  p = q", "show ?thesis"], ["proof (prove)\nusing this:\n  HStartBallot s s' p\n  Inv2a_innermost s q (dblock s q)\n  p = q\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' q (dblock s' q)", "by(blast dest: HStartBallot_Inv2a_dblock)"], ["proof (state)\nthis:\n  Inv2a_innermost s' q (dblock s' q)\n\ngoal (1 subgoal):\n 1. p \\<noteq> q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)", "case False"], ["proof (state)\nthis:\n  p \\<noteq> q\n\ngoal (1 subgoal):\n 1. p \\<noteq> q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)", "with act inv2a"], ["proof (chain)\npicking this:\n  HStartBallot s s' p\n  Inv2a_innermost s q (dblock s q)\n  p \\<noteq> q", "show ?thesis"], ["proof (prove)\nusing this:\n  HStartBallot s s' p\n  Inv2a_innermost s q (dblock s q)\n  p \\<noteq> q\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' q (dblock s' q)", "by(clarsimp simp add: StartBallot_def HNextPart_def \n      InitializePhase_def Inv2a_innermost_def)"], ["proof (state)\nthis:\n  Inv2a_innermost s' q (dblock s' q)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem HStartBallot_Inv2a:\n  assumes inv: \"Inv2a s\"\n  and act: \"HStartBallot s s' p\"\n  shows \"Inv2a s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inv2a s'", "proof (clarsimp simp add: Inv2a_def Inv2a_inner_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "fix q bk"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "assume bk: \"bk \\<in> blocksOf s' q\""], ["proof (state)\nthis:\n  bk \\<in> blocksOf s' q\n\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "with inv"], ["proof (chain)\npicking this:\n  Inv2a s\n  bk \\<in> blocksOf s' q", "have oldBlks: \"bk \\<in> blocksOf s q \\<longrightarrow> Inv2a_innermost s q bk\""], ["proof (prove)\nusing this:\n  Inv2a s\n  bk \\<in> blocksOf s' q\n\ngoal (1 subgoal):\n 1. bk \\<in> blocksOf s q \\<longrightarrow> Inv2a_innermost s q bk", "by(auto simp add: Inv2a_def Inv2a_inner_def)"], ["proof (state)\nthis:\n  bk \\<in> blocksOf s q \\<longrightarrow> Inv2a_innermost s q bk\n\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "from bk HStartBallot_blocksOf[OF act]"], ["proof (chain)\npicking this:\n  bk \\<in> blocksOf s' q\n  blocksOf s' ?q \\<subseteq> blocksOf s ?q \\<union> {dblock s' ?q}", "have \"bk \\<in> {dblock s' q} \\<union> blocksOf s q\""], ["proof (prove)\nusing this:\n  bk \\<in> blocksOf s' q\n  blocksOf s' ?q \\<subseteq> blocksOf s ?q \\<union> {dblock s' ?q}\n\ngoal (1 subgoal):\n 1. bk \\<in> {dblock s' q} \\<union> blocksOf s q", "by blast"], ["proof (state)\nthis:\n  bk \\<in> {dblock s' q} \\<union> blocksOf s q\n\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "thus \"Inv2a_innermost s' q bk\""], ["proof (prove)\nusing this:\n  bk \\<in> {dblock s' q} \\<union> blocksOf s q\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' q bk", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. bk \\<in> {dblock s' q} \\<Longrightarrow> Inv2a_innermost s' q bk\n 2. bk \\<in> blocksOf s q \\<Longrightarrow> Inv2a_innermost s' q bk", "assume bk_dblock: \"bk \\<in> {dblock s' q}\""], ["proof (state)\nthis:\n  bk \\<in> {dblock s' q}\n\ngoal (2 subgoals):\n 1. bk \\<in> {dblock s' q} \\<Longrightarrow> Inv2a_innermost s' q bk\n 2. bk \\<in> blocksOf s q \\<Longrightarrow> Inv2a_innermost s' q bk", "from inv"], ["proof (chain)\npicking this:\n  Inv2a s", "have inv_q_dblock: \"Inv2a_innermost s q (dblock s q)\""], ["proof (prove)\nusing this:\n  Inv2a s\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s q (dblock s q)", "by(auto simp add: Inv2a_def Inv2a_inner_def Inv2a_innermost_def blocksOf_def)"], ["proof (state)\nthis:\n  Inv2a_innermost s q (dblock s q)\n\ngoal (2 subgoals):\n 1. bk \\<in> {dblock s' q} \\<Longrightarrow> Inv2a_innermost s' q bk\n 2. bk \\<in> blocksOf s q \\<Longrightarrow> Inv2a_innermost s' q bk", "with act inv bk_dblock"], ["proof (chain)\npicking this:\n  HStartBallot s s' p\n  Inv2a s\n  bk \\<in> {dblock s' q}\n  Inv2a_innermost s q (dblock s q)", "show ?thesis"], ["proof (prove)\nusing this:\n  HStartBallot s s' p\n  Inv2a s\n  bk \\<in> {dblock s' q}\n  Inv2a_innermost s q (dblock s q)\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' q bk", "by(blast dest: HStartBallot_Inv2a_dblock_q)"], ["proof (state)\nthis:\n  Inv2a_innermost s' q bk\n\ngoal (1 subgoal):\n 1. bk \\<in> blocksOf s q \\<Longrightarrow> Inv2a_innermost s' q bk", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. bk \\<in> blocksOf s q \\<Longrightarrow> Inv2a_innermost s' q bk", "assume bk_in_blocks: \"bk \\<in> blocksOf s q\""], ["proof (state)\nthis:\n  bk \\<in> blocksOf s q\n\ngoal (1 subgoal):\n 1. bk \\<in> blocksOf s q \\<Longrightarrow> Inv2a_innermost s' q bk", "with oldBlks"], ["proof (chain)\npicking this:\n  bk \\<in> blocksOf s q \\<longrightarrow> Inv2a_innermost s q bk\n  bk \\<in> blocksOf s q", "have \"Inv2a_innermost s q bk\""], ["proof (prove)\nusing this:\n  bk \\<in> blocksOf s q \\<longrightarrow> Inv2a_innermost s q bk\n  bk \\<in> blocksOf s q\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s q bk", ".."], ["proof (state)\nthis:\n  Inv2a_innermost s q bk\n\ngoal (1 subgoal):\n 1. bk \\<in> blocksOf s q \\<Longrightarrow> Inv2a_innermost s' q bk", "with act"], ["proof (chain)\npicking this:\n  HStartBallot s s' p\n  Inv2a_innermost s q bk", "show ?thesis"], ["proof (prove)\nusing this:\n  HStartBallot s s' p\n  Inv2a_innermost s q bk\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' q bk", "by(auto simp add: StartBallot_def HNextPart_def \n                        InitializePhase_def Inv2a_innermost_def)"], ["proof (state)\nthis:\n  Inv2a_innermost s' q bk\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Inv2a_innermost s' q bk\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma HPhase1or2Write_blocksOf:\n  \"\\<lbrakk> HPhase1or2Write s s' p d \\<rbrakk> \\<Longrightarrow> blocksOf s' r \\<subseteq> blocksOf s r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HPhase1or2Write s s' p d \\<Longrightarrow>\n    blocksOf s' r \\<subseteq> blocksOf s r", "by(auto simp add: Phase1or2Write_def blocksOf_def rdBy_def)"], ["", "theorem HPhase1or2Write_Inv2a:\n  assumes inv: \"Inv2a s\"\n  and     act: \"HPhase1or2Write s s' p d\"\n  shows \"Inv2a s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inv2a s'", "proof(clarsimp simp add: Inv2a_def Inv2a_inner_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "fix q bk"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "assume bk: \"bk \\<in> blocksOf s' q\""], ["proof (state)\nthis:\n  bk \\<in> blocksOf s' q\n\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "from inv bk HPhase1or2Write_blocksOf[OF act]"], ["proof (chain)\npicking this:\n  Inv2a s\n  bk \\<in> blocksOf s' q\n  blocksOf s' ?r \\<subseteq> blocksOf s ?r", "have inp_q_bk: \"Inv2a_innermost s q bk\""], ["proof (prove)\nusing this:\n  Inv2a s\n  bk \\<in> blocksOf s' q\n  blocksOf s' ?r \\<subseteq> blocksOf s ?r\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s q bk", "by(auto simp add: Inv2a_def Inv2a_inner_def)"], ["proof (state)\nthis:\n  Inv2a_innermost s q bk\n\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "with act"], ["proof (chain)\npicking this:\n  HPhase1or2Write s s' p d\n  Inv2a_innermost s q bk", "show \"Inv2a_innermost s' q bk\""], ["proof (prove)\nusing this:\n  HPhase1or2Write s s' p d\n  Inv2a_innermost s q bk\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' q bk", "by(auto simp add: Inv2a_innermost_def HNextPart_def)"], ["proof (state)\nthis:\n  Inv2a_innermost s' q bk\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem HPhase1or2ReadElse_Inv2a:\n  assumes inv: \"Inv2a s\"\n  and act:     \"HPhase1or2ReadElse s s' p d q\"\n  shows \"Inv2a s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inv2a s'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Inv2a s'", "from act"], ["proof (chain)\npicking this:\n  HPhase1or2ReadElse s s' p d q", "have \"HStartBallot s s' p\""], ["proof (prove)\nusing this:\n  HPhase1or2ReadElse s s' p d q\n\ngoal (1 subgoal):\n 1. HStartBallot s s' p", "by(simp add: Phase1or2ReadElse_def)"], ["proof (state)\nthis:\n  HStartBallot s s' p\n\ngoal (1 subgoal):\n 1. Inv2a s'", "with inv"], ["proof (chain)\npicking this:\n  Inv2a s\n  HStartBallot s s' p", "show ?thesis"], ["proof (prove)\nusing this:\n  Inv2a s\n  HStartBallot s s' p\n\ngoal (1 subgoal):\n 1. Inv2a s'", "by(auto elim: HStartBallot_Inv2a)"], ["proof (state)\nthis:\n  Inv2a s'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma HEndPhase2_blocksOf:\n  \"\\<lbrakk> HEndPhase2 s s' p \\<rbrakk> \\<Longrightarrow> blocksOf s' q \\<subseteq> blocksOf s q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HEndPhase2 s s' p \\<Longrightarrow>\n    blocksOf s' q \\<subseteq> blocksOf s q", "by(auto simp add: EndPhase2_def blocksOf_def \n               dest: subsetD[OF InitializePhase_rdBy])"], ["", "theorem HEndPhase2_Inv2a:\n  assumes inv: \"Inv2a s\"\n  and     act: \"HEndPhase2 s s' p\"\n  shows        \"Inv2a s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inv2a s'", "proof(clarsimp simp add: Inv2a_def Inv2a_inner_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "fix q bk"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "assume bk: \"bk \\<in> blocksOf s' q\""], ["proof (state)\nthis:\n  bk \\<in> blocksOf s' q\n\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "from inv bk HEndPhase2_blocksOf[OF act]"], ["proof (chain)\npicking this:\n  Inv2a s\n  bk \\<in> blocksOf s' q\n  blocksOf s' ?q \\<subseteq> blocksOf s ?q", "have inp_q_bk: \"Inv2a_innermost s q bk\""], ["proof (prove)\nusing this:\n  Inv2a s\n  bk \\<in> blocksOf s' q\n  blocksOf s' ?q \\<subseteq> blocksOf s ?q\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s q bk", "by(auto simp add: Inv2a_def Inv2a_inner_def)"], ["proof (state)\nthis:\n  Inv2a_innermost s q bk\n\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "with act"], ["proof (chain)\npicking this:\n  HEndPhase2 s s' p\n  Inv2a_innermost s q bk", "show \"Inv2a_innermost s' q bk\""], ["proof (prove)\nusing this:\n  HEndPhase2 s s' p\n  Inv2a_innermost s q bk\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' q bk", "by(auto simp add: Inv2a_innermost_def HNextPart_def)"], ["proof (state)\nthis:\n  Inv2a_innermost s' q bk\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma HFail_blocksOf:\n   \"HFail s s' p  \\<Longrightarrow> blocksOf s' q \\<subseteq> blocksOf s q \\<union> {dblock s' q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HFail s s' p \\<Longrightarrow>\n    blocksOf s' q \\<subseteq> blocksOf s q \\<union> {dblock s' q}", "by(auto simp add: Fail_def blocksOf_def\n        dest: subsetD[OF InitializePhase_rdBy])"], ["", "lemma HFail_Inv2a_dblock_q:\n  assumes act: \"HFail s s' p\"\n  and     inv: \"Inv2a_innermost s q (dblock s q)\"\n  shows \"Inv2a_innermost s' q (dblock s' q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inv2a_innermost s' q (dblock s' q)", "proof(cases \"p=q\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)\n 2. p \\<noteq> q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)", "case True"], ["proof (state)\nthis:\n  p = q\n\ngoal (2 subgoals):\n 1. p = q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)\n 2. p \\<noteq> q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)", "with act"], ["proof (chain)\npicking this:\n  HFail s s' p\n  p = q", "have \"dblock s' q = InitDB\""], ["proof (prove)\nusing this:\n  HFail s s' p\n  p = q\n\ngoal (1 subgoal):\n 1. dblock s' q = InitDB", "by (simp add: Fail_def)"], ["proof (state)\nthis:\n  dblock s' q = InitDB\n\ngoal (2 subgoals):\n 1. p = q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)\n 2. p \\<noteq> q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)", "with True"], ["proof (chain)\npicking this:\n  p = q\n  dblock s' q = InitDB", "show ?thesis"], ["proof (prove)\nusing this:\n  p = q\n  dblock s' q = InitDB\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' q (dblock s' q)", "by(auto simp add: InitDB_def Inv2a_innermost_def)"], ["proof (state)\nthis:\n  Inv2a_innermost s' q (dblock s' q)\n\ngoal (1 subgoal):\n 1. p \\<noteq> q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)", "case False"], ["proof (state)\nthis:\n  p \\<noteq> q\n\ngoal (1 subgoal):\n 1. p \\<noteq> q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)", "with inv act"], ["proof (chain)\npicking this:\n  Inv2a_innermost s q (dblock s q)\n  HFail s s' p\n  p \\<noteq> q", "show ?thesis"], ["proof (prove)\nusing this:\n  Inv2a_innermost s q (dblock s q)\n  HFail s s' p\n  p \\<noteq> q\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' q (dblock s' q)", "by(auto simp add: Fail_def HNextPart_def \n      InitializePhase_def Inv2a_innermost_def)"], ["proof (state)\nthis:\n  Inv2a_innermost s' q (dblock s' q)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem HFail_Inv2a:\n assumes inv: \"Inv2a s\"\n  and     act: \"HFail s s' p\"\n  shows        \"Inv2a s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inv2a s'", "proof(clarsimp simp add: Inv2a_def Inv2a_inner_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "fix q bk"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "assume bk: \"bk \\<in> blocksOf s' q\""], ["proof (state)\nthis:\n  bk \\<in> blocksOf s' q\n\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "with HFail_blocksOf[OF act]"], ["proof (chain)\npicking this:\n  blocksOf s' ?q \\<subseteq> blocksOf s ?q \\<union> {dblock s' ?q}\n  bk \\<in> blocksOf s' q", "have dblock_blocks: \"bk \\<in> {dblock s' q} \\<union> blocksOf s q\""], ["proof (prove)\nusing this:\n  blocksOf s' ?q \\<subseteq> blocksOf s ?q \\<union> {dblock s' ?q}\n  bk \\<in> blocksOf s' q\n\ngoal (1 subgoal):\n 1. bk \\<in> {dblock s' q} \\<union> blocksOf s q", "by blast"], ["proof (state)\nthis:\n  bk \\<in> {dblock s' q} \\<union> blocksOf s q\n\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "thus \"Inv2a_innermost s' q bk\""], ["proof (prove)\nusing this:\n  bk \\<in> {dblock s' q} \\<union> blocksOf s q\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' q bk", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. bk \\<in> {dblock s' q} \\<Longrightarrow> Inv2a_innermost s' q bk\n 2. bk \\<in> blocksOf s q \\<Longrightarrow> Inv2a_innermost s' q bk", "assume bk_dblock: \"bk \\<in> {dblock s' q}\""], ["proof (state)\nthis:\n  bk \\<in> {dblock s' q}\n\ngoal (2 subgoals):\n 1. bk \\<in> {dblock s' q} \\<Longrightarrow> Inv2a_innermost s' q bk\n 2. bk \\<in> blocksOf s q \\<Longrightarrow> Inv2a_innermost s' q bk", "from inv"], ["proof (chain)\npicking this:\n  Inv2a s", "have inv_q_dblock: \"Inv2a_innermost s q (dblock s q)\""], ["proof (prove)\nusing this:\n  Inv2a s\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s q (dblock s q)", "by(auto simp add: Inv2a_def Inv2a_inner_def Inv2a_innermost_def blocksOf_def)"], ["proof (state)\nthis:\n  Inv2a_innermost s q (dblock s q)\n\ngoal (2 subgoals):\n 1. bk \\<in> {dblock s' q} \\<Longrightarrow> Inv2a_innermost s' q bk\n 2. bk \\<in> blocksOf s q \\<Longrightarrow> Inv2a_innermost s' q bk", "with act bk_dblock"], ["proof (chain)\npicking this:\n  HFail s s' p\n  bk \\<in> {dblock s' q}\n  Inv2a_innermost s q (dblock s q)", "show ?thesis"], ["proof (prove)\nusing this:\n  HFail s s' p\n  bk \\<in> {dblock s' q}\n  Inv2a_innermost s q (dblock s q)\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' q bk", "by(blast dest: HFail_Inv2a_dblock_q)"], ["proof (state)\nthis:\n  Inv2a_innermost s' q bk\n\ngoal (1 subgoal):\n 1. bk \\<in> blocksOf s q \\<Longrightarrow> Inv2a_innermost s' q bk", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. bk \\<in> blocksOf s q \\<Longrightarrow> Inv2a_innermost s' q bk", "assume bk_in_blocks: \"bk \\<in> blocksOf s q\""], ["proof (state)\nthis:\n  bk \\<in> blocksOf s q\n\ngoal (1 subgoal):\n 1. bk \\<in> blocksOf s q \\<Longrightarrow> Inv2a_innermost s' q bk", "with inv"], ["proof (chain)\npicking this:\n  Inv2a s\n  bk \\<in> blocksOf s q", "have \"Inv2a_innermost s q bk\""], ["proof (prove)\nusing this:\n  Inv2a s\n  bk \\<in> blocksOf s q\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s q bk", "by (auto simp add: Inv2a_def Inv2a_inner_def)"], ["proof (state)\nthis:\n  Inv2a_innermost s q bk\n\ngoal (1 subgoal):\n 1. bk \\<in> blocksOf s q \\<Longrightarrow> Inv2a_innermost s' q bk", "with act"], ["proof (chain)\npicking this:\n  HFail s s' p\n  Inv2a_innermost s q bk", "show ?thesis"], ["proof (prove)\nusing this:\n  HFail s s' p\n  Inv2a_innermost s q bk\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' q bk", "by(auto simp add: Fail_def HNextPart_def \n        InitializePhase_def Inv2a_innermost_def)"], ["proof (state)\nthis:\n  Inv2a_innermost s' q bk\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Inv2a_innermost s' q bk\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma HPhase0Read_blocksOf:\n  \"HPhase0Read s s' p d \\<Longrightarrow> blocksOf s' q \\<subseteq> blocksOf s q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HPhase0Read s s' p d \\<Longrightarrow>\n    blocksOf s' q \\<subseteq> blocksOf s q", "by(auto simp add: Phase0Read_def InitializePhase_def \n                       blocksOf_def rdBy_def)"], ["", "theorem HPhase0Read_Inv2a:\n  assumes inv: \"Inv2a s\"\n  and     act: \"HPhase0Read s s' p d\"\n  shows        \"Inv2a s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inv2a s'", "proof(clarsimp simp add: Inv2a_def Inv2a_inner_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "fix q bk"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "assume bk: \"bk \\<in> blocksOf s' q\""], ["proof (state)\nthis:\n  bk \\<in> blocksOf s' q\n\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "from inv bk HPhase0Read_blocksOf[OF act]"], ["proof (chain)\npicking this:\n  Inv2a s\n  bk \\<in> blocksOf s' q\n  blocksOf s' ?q \\<subseteq> blocksOf s ?q", "have inp_q_bk: \"Inv2a_innermost s q bk\""], ["proof (prove)\nusing this:\n  Inv2a s\n  bk \\<in> blocksOf s' q\n  blocksOf s' ?q \\<subseteq> blocksOf s ?q\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s q bk", "by(auto simp add: Inv2a_def Inv2a_inner_def)"], ["proof (state)\nthis:\n  Inv2a_innermost s q bk\n\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "with act"], ["proof (chain)\npicking this:\n  HPhase0Read s s' p d\n  Inv2a_innermost s q bk", "show \"Inv2a_innermost s' q bk\""], ["proof (prove)\nusing this:\n  HPhase0Read s s' p d\n  Inv2a_innermost s q bk\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' q bk", "by(auto simp add: Inv2a_innermost_def HNextPart_def)"], ["proof (state)\nthis:\n  Inv2a_innermost s' q bk\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma HEndPhase0_blocksOf:\n  \" HEndPhase0 s s' p \\<Longrightarrow> blocksOf s' q \\<subseteq> blocksOf s q \\<union> {dblock s' q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HEndPhase0 s s' p \\<Longrightarrow>\n    blocksOf s' q \\<subseteq> blocksOf s q \\<union> {dblock s' q}", "by(auto simp add: EndPhase0_def blocksOf_def \n                  dest: subsetD[OF InitializePhase_rdBy])"], ["", "lemma HEndPhase0_blocksRead:\n  assumes act: \"HEndPhase0 s s' p\"\n  shows \"\\<exists>d. blocksRead s p d \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>d. blocksRead s p d \\<noteq> {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>d. blocksRead s p d \\<noteq> {}", "from act"], ["proof (chain)\npicking this:\n  HEndPhase0 s s' p", "have \"IsMajority({d. hasRead s p d p})\""], ["proof (prove)\nusing this:\n  HEndPhase0 s s' p\n\ngoal (1 subgoal):\n 1. IsMajority {d. hasRead s p d p}", "by(simp add: EndPhase0_def)"], ["proof (state)\nthis:\n  IsMajority {d. hasRead s p d p}\n\ngoal (1 subgoal):\n 1. \\<exists>d. blocksRead s p d \\<noteq> {}", "hence \"{d. hasRead s p d p} \\<noteq> {}\""], ["proof (prove)\nusing this:\n  IsMajority {d. hasRead s p d p}\n\ngoal (1 subgoal):\n 1. {d. hasRead s p d p} \\<noteq> {}", "by (rule majority_nonempty)"], ["proof (state)\nthis:\n  {d. hasRead s p d p} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>d. blocksRead s p d \\<noteq> {}", "thus ?thesis"], ["proof (prove)\nusing this:\n  {d. hasRead s p d p} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>d. blocksRead s p d \\<noteq> {}", "by(auto simp add: hasRead_def)"], ["proof (state)\nthis:\n  \\<exists>d. blocksRead s p d \\<noteq> {}\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>$EndPhase0$ has the additional difficulty of having a choose expression. We\nprove that there exists an $x$ such that the predicate of the choose expression holds,\nand then apply $someI$: @{thm someI}.\n\\<close>"], ["", "lemma HEndPhase0_some:\n  assumes act:  \"HEndPhase0 s s' p\"\n  and    inv1:  \"Inv1 s\"\n  shows  \"(SOME b.    b \\<in> allBlocksRead s p \n                   \\<and> (\\<forall>t\\<in>allBlocksRead s p. bal t \\<le> bal b)\n          ) \\<in> allBlocksRead s p \n        \\<and> (\\<forall>t\\<in>allBlocksRead s p. \n             bal t \\<le> bal (SOME b.    b \\<in> allBlocksRead s p \n                                  \\<and> (\\<forall>t\\<in>allBlocksRead s p. bal t \\<le> bal b)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SOME b.\n        b \\<in> allBlocksRead s p \\<and>\n        (\\<forall>t\\<in>allBlocksRead s p. bal t \\<le> bal b))\n    \\<in> allBlocksRead s p \\<and>\n    (\\<forall>t\\<in>allBlocksRead s p.\n        bal t\n        \\<le> bal (SOME b.\n                      b \\<in> allBlocksRead s p \\<and>\n                      (\\<forall>t\\<in>allBlocksRead s p.\n                          bal t \\<le> bal b)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (SOME b.\n        b \\<in> allBlocksRead s p \\<and>\n        (\\<forall>t\\<in>allBlocksRead s p. bal t \\<le> bal b))\n    \\<in> allBlocksRead s p \\<and>\n    (\\<forall>t\\<in>allBlocksRead s p.\n        bal t\n        \\<le> bal (SOME b.\n                      b \\<in> allBlocksRead s p \\<and>\n                      (\\<forall>t\\<in>allBlocksRead s p.\n                          bal t \\<le> bal b)))", "from inv1"], ["proof (chain)\npicking this:\n  Inv1 s", "have \"finite (bal ` allBlocksRead s p)\" (is \"finite ?S\")"], ["proof (prove)\nusing this:\n  Inv1 s\n\ngoal (1 subgoal):\n 1. finite (bal ` allBlocksRead s p)", "by(simp add: Inv1_def allBlocksRead_def)"], ["proof (state)\nthis:\n  finite (bal ` allBlocksRead s p)\n\ngoal (1 subgoal):\n 1. (SOME b.\n        b \\<in> allBlocksRead s p \\<and>\n        (\\<forall>t\\<in>allBlocksRead s p. bal t \\<le> bal b))\n    \\<in> allBlocksRead s p \\<and>\n    (\\<forall>t\\<in>allBlocksRead s p.\n        bal t\n        \\<le> bal (SOME b.\n                      b \\<in> allBlocksRead s p \\<and>\n                      (\\<forall>t\\<in>allBlocksRead s p.\n                          bal t \\<le> bal b)))", "moreover"], ["proof (state)\nthis:\n  finite (bal ` allBlocksRead s p)\n\ngoal (1 subgoal):\n 1. (SOME b.\n        b \\<in> allBlocksRead s p \\<and>\n        (\\<forall>t\\<in>allBlocksRead s p. bal t \\<le> bal b))\n    \\<in> allBlocksRead s p \\<and>\n    (\\<forall>t\\<in>allBlocksRead s p.\n        bal t\n        \\<le> bal (SOME b.\n                      b \\<in> allBlocksRead s p \\<and>\n                      (\\<forall>t\\<in>allBlocksRead s p.\n                          bal t \\<le> bal b)))", "from HEndPhase0_blocksRead[OF act]"], ["proof (chain)\npicking this:\n  \\<exists>d. blocksRead s p d \\<noteq> {}", "have \"?S \\<noteq> {}\""], ["proof (prove)\nusing this:\n  \\<exists>d. blocksRead s p d \\<noteq> {}\n\ngoal (1 subgoal):\n 1. bal ` allBlocksRead s p \\<noteq> {}", "by(auto simp add: allBlocksRead_def allRdBlks_def)"], ["proof (state)\nthis:\n  bal ` allBlocksRead s p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (SOME b.\n        b \\<in> allBlocksRead s p \\<and>\n        (\\<forall>t\\<in>allBlocksRead s p. bal t \\<le> bal b))\n    \\<in> allBlocksRead s p \\<and>\n    (\\<forall>t\\<in>allBlocksRead s p.\n        bal t\n        \\<le> bal (SOME b.\n                      b \\<in> allBlocksRead s p \\<and>\n                      (\\<forall>t\\<in>allBlocksRead s p.\n                          bal t \\<le> bal b)))", "ultimately"], ["proof (chain)\npicking this:\n  finite (bal ` allBlocksRead s p)\n  bal ` allBlocksRead s p \\<noteq> {}", "have \"Max ?S \\<in> ?S\" and \"\\<forall>t \\<in> ?S. t \\<le> Max ?S\""], ["proof (prove)\nusing this:\n  finite (bal ` allBlocksRead s p)\n  bal ` allBlocksRead s p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Max (bal ` allBlocksRead s p) \\<in> bal ` allBlocksRead s p &&&\n    \\<forall>t\\<in>bal ` allBlocksRead s p.\n       t \\<le> Max (bal ` allBlocksRead s p)", "by auto"], ["proof (state)\nthis:\n  Max (bal ` allBlocksRead s p) \\<in> bal ` allBlocksRead s p\n  \\<forall>t\\<in>bal ` allBlocksRead s p.\n     t \\<le> Max (bal ` allBlocksRead s p)\n\ngoal (1 subgoal):\n 1. (SOME b.\n        b \\<in> allBlocksRead s p \\<and>\n        (\\<forall>t\\<in>allBlocksRead s p. bal t \\<le> bal b))\n    \\<in> allBlocksRead s p \\<and>\n    (\\<forall>t\\<in>allBlocksRead s p.\n        bal t\n        \\<le> bal (SOME b.\n                      b \\<in> allBlocksRead s p \\<and>\n                      (\\<forall>t\\<in>allBlocksRead s p.\n                          bal t \\<le> bal b)))", "hence \"\\<exists>r \\<in> ?S. \\<forall>t \\<in> ?S. t \\<le> r\""], ["proof (prove)\nusing this:\n  Max (bal ` allBlocksRead s p) \\<in> bal ` allBlocksRead s p\n  \\<forall>t\\<in>bal ` allBlocksRead s p.\n     t \\<le> Max (bal ` allBlocksRead s p)\n\ngoal (1 subgoal):\n 1. \\<exists>r\\<in>bal ` allBlocksRead s p.\n       \\<forall>t\\<in>bal ` allBlocksRead s p. t \\<le> r", ".."], ["proof (state)\nthis:\n  \\<exists>r\\<in>bal ` allBlocksRead s p.\n     \\<forall>t\\<in>bal ` allBlocksRead s p. t \\<le> r\n\ngoal (1 subgoal):\n 1. (SOME b.\n        b \\<in> allBlocksRead s p \\<and>\n        (\\<forall>t\\<in>allBlocksRead s p. bal t \\<le> bal b))\n    \\<in> allBlocksRead s p \\<and>\n    (\\<forall>t\\<in>allBlocksRead s p.\n        bal t\n        \\<le> bal (SOME b.\n                      b \\<in> allBlocksRead s p \\<and>\n                      (\\<forall>t\\<in>allBlocksRead s p.\n                          bal t \\<le> bal b)))", "then"], ["proof (chain)\npicking this:\n  \\<exists>r\\<in>bal ` allBlocksRead s p.\n     \\<forall>t\\<in>bal ` allBlocksRead s p. t \\<le> r", "obtain mblk\n    where \"   mblk \\<in> allBlocksRead s p \n           \\<and> (\\<forall>t \\<in> allBlocksRead s p. bal t \\<le> bal mblk)\" (is \"?P mblk\")"], ["proof (prove)\nusing this:\n  \\<exists>r\\<in>bal ` allBlocksRead s p.\n     \\<forall>t\\<in>bal ` allBlocksRead s p. t \\<le> r\n\ngoal (1 subgoal):\n 1. (\\<And>mblk.\n        mblk \\<in> allBlocksRead s p \\<and>\n        (\\<forall>t\\<in>allBlocksRead s p.\n            bal t \\<le> bal mblk) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  mblk \\<in> allBlocksRead s p \\<and>\n  (\\<forall>t\\<in>allBlocksRead s p. bal t \\<le> bal mblk)\n\ngoal (1 subgoal):\n 1. (SOME b.\n        b \\<in> allBlocksRead s p \\<and>\n        (\\<forall>t\\<in>allBlocksRead s p. bal t \\<le> bal b))\n    \\<in> allBlocksRead s p \\<and>\n    (\\<forall>t\\<in>allBlocksRead s p.\n        bal t\n        \\<le> bal (SOME b.\n                      b \\<in> allBlocksRead s p \\<and>\n                      (\\<forall>t\\<in>allBlocksRead s p.\n                          bal t \\<le> bal b)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  mblk \\<in> allBlocksRead s p \\<and>\n  (\\<forall>t\\<in>allBlocksRead s p. bal t \\<le> bal mblk)\n\ngoal (1 subgoal):\n 1. (SOME b.\n        b \\<in> allBlocksRead s p \\<and>\n        (\\<forall>t\\<in>allBlocksRead s p. bal t \\<le> bal b))\n    \\<in> allBlocksRead s p \\<and>\n    (\\<forall>t\\<in>allBlocksRead s p.\n        bal t\n        \\<le> bal (SOME b.\n                      b \\<in> allBlocksRead s p \\<and>\n                      (\\<forall>t\\<in>allBlocksRead s p.\n                          bal t \\<le> bal b)))", "by (rule someI)"], ["proof (state)\nthis:\n  (SOME b.\n      b \\<in> allBlocksRead s p \\<and>\n      (\\<forall>t\\<in>allBlocksRead s p. bal t \\<le> bal b))\n  \\<in> allBlocksRead s p \\<and>\n  (\\<forall>t\\<in>allBlocksRead s p.\n      bal t\n      \\<le> bal (SOME b.\n                    b \\<in> allBlocksRead s p \\<and>\n                    (\\<forall>t\\<in>allBlocksRead s p. bal t \\<le> bal b)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma HEndPhase0_dblock_allBlocksRead:\n  assumes act:  \"HEndPhase0 s s' p\"\n  and    inv1:  \"Inv1 s\"\n  shows   \"dblock s' p \\<in> (\\<lambda>x. x \\<lparr>mbal:= mbal(dblock s' p)\\<rparr>) ` allBlocksRead s p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dblock s' p\n    \\<in> mbal_update (\\<lambda>_. mbal (dblock s' p)) ` allBlocksRead s p", "using act HEndPhase0_some[OF act inv1]"], ["proof (prove)\nusing this:\n  HEndPhase0 s s' p\n  (SOME b.\n      b \\<in> allBlocksRead s p \\<and>\n      (\\<forall>t\\<in>allBlocksRead s p. bal t \\<le> bal b))\n  \\<in> allBlocksRead s p \\<and>\n  (\\<forall>t\\<in>allBlocksRead s p.\n      bal t\n      \\<le> bal (SOME b.\n                    b \\<in> allBlocksRead s p \\<and>\n                    (\\<forall>t\\<in>allBlocksRead s p. bal t \\<le> bal b)))\n\ngoal (1 subgoal):\n 1. dblock s' p\n    \\<in> mbal_update (\\<lambda>_. mbal (dblock s' p)) ` allBlocksRead s p", "by(auto simp add: EndPhase0_def)"], ["", "lemma HNextPart_allInput_or_NotAnInput:\n  assumes act: \"HNextPart s s'\"\n  and inv2a: \"Inv2a_innermost s p (dblock s' p)\"\n  shows \"inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}", "from act"], ["proof (chain)\npicking this:\n  HNextPart s s'", "have \"allInput s' = allInput s \\<union> (range (inpt s'))\""], ["proof (prove)\nusing this:\n  HNextPart s s'\n\ngoal (1 subgoal):\n 1. allInput s' = allInput s \\<union> range (inpt s')", "by(simp add: HNextPart_def)"], ["proof (state)\nthis:\n  allInput s' = allInput s \\<union> range (inpt s')\n\ngoal (1 subgoal):\n 1. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}", "moreover"], ["proof (state)\nthis:\n  allInput s' = allInput s \\<union> range (inpt s')\n\ngoal (1 subgoal):\n 1. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}", "from inv2a"], ["proof (chain)\npicking this:\n  Inv2a_innermost s p (dblock s' p)", "have \"inp (dblock s' p) \\<in> allInput s \\<union> {NotAnInput}\""], ["proof (prove)\nusing this:\n  Inv2a_innermost s p (dblock s' p)\n\ngoal (1 subgoal):\n 1. inp (dblock s' p) \\<in> allInput s \\<union> {NotAnInput}", "by(simp add: Inv2a_innermost_def)"], ["proof (state)\nthis:\n  inp (dblock s' p) \\<in> allInput s \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}", "ultimately"], ["proof (chain)\npicking this:\n  allInput s' = allInput s \\<union> range (inpt s')\n  inp (dblock s' p) \\<in> allInput s \\<union> {NotAnInput}", "show ?thesis"], ["proof (prove)\nusing this:\n  allInput s' = allInput s \\<union> range (inpt s')\n  inp (dblock s' p) \\<in> allInput s \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}", "by blast"], ["proof (state)\nthis:\n  inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma HEndPhase0_Inv2a_allBlocksRead:\n  assumes act: \"HEndPhase0 s s' p\"\n  and inv2a: \"Inv2a_inner s p\"\n  and inv2c: \"Inv2c_inner s p\"\n  shows \"\\<forall>t \\<in> (\\<lambda>x. x \\<lparr>mbal:= mbal (dblock s' p)\\<rparr>) ` allBlocksRead s p. \n          Inv2a_innermost s p t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>mbal_update (\\<lambda>_. mbal (dblock s' p)) `\n                   allBlocksRead s p.\n       Inv2a_innermost s p t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>mbal_update (\\<lambda>_. mbal (dblock s' p)) `\n                   allBlocksRead s p.\n       Inv2a_innermost s p t", "from act"], ["proof (chain)\npicking this:\n  HEndPhase0 s s' p", "have mbal': \"mbal (dblock s' p) \\<in> Ballot p\""], ["proof (prove)\nusing this:\n  HEndPhase0 s s' p\n\ngoal (1 subgoal):\n 1. mbal (dblock s' p) \\<in> Ballot p", "by(auto simp add: EndPhase0_def)"], ["proof (state)\nthis:\n  mbal (dblock s' p) \\<in> Ballot p\n\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>mbal_update (\\<lambda>_. mbal (dblock s' p)) `\n                   allBlocksRead s p.\n       Inv2a_innermost s p t", "from inv2c act"], ["proof (chain)\npicking this:\n  Inv2c_inner s p\n  HEndPhase0 s s' p", "have allproc_p: \"\\<forall>d. \\<forall>br \\<in> blocksRead s p d. proc br = p\""], ["proof (prove)\nusing this:\n  Inv2c_inner s p\n  HEndPhase0 s s' p\n\ngoal (1 subgoal):\n 1. \\<forall>d. \\<forall>br\\<in>blocksRead s p d. proc br = p", "by(simp add: Inv2c_inner_def EndPhase0_def)"], ["proof (state)\nthis:\n  \\<forall>d. \\<forall>br\\<in>blocksRead s p d. proc br = p\n\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>mbal_update (\\<lambda>_. mbal (dblock s' p)) `\n                   allBlocksRead s p.\n       Inv2a_innermost s p t", "with inv2a"], ["proof (chain)\npicking this:\n  Inv2a_inner s p\n  \\<forall>d. \\<forall>br\\<in>blocksRead s p d. proc br = p", "have allBlocks_inv2a: \"\\<forall>t \\<in> allBlocksRead s p. Inv2a_innermost s p t\""], ["proof (prove)\nusing this:\n  Inv2a_inner s p\n  \\<forall>d. \\<forall>br\\<in>blocksRead s p d. proc br = p\n\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>allBlocksRead s p. Inv2a_innermost s p t", "proof(auto simp add: Inv2a_inner_def allBlocksRead_def \n                       allRdBlks_def blocksOf_def rdBy_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y x.\n       \\<lbrakk>\\<forall>d. \\<forall>br\\<in>blocksRead s p d. proc br = p;\n        x \\<in> blocksRead s p y; Inv2a_innermost s p (dblock s p);\n        \\<forall>x\\<in>{uu_. \\<exists>d. uu_ = disk s d p} \\<union>\n                       {block br |br.\n                        (\\<exists>x xa. br \\<in> blocksRead s x xa) \\<and>\n                        proc br = p}.\n           Inv2a_innermost s p x\\<rbrakk>\n       \\<Longrightarrow> Inv2a_innermost s p (block x)", "fix d bk"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y x.\n       \\<lbrakk>\\<forall>d. \\<forall>br\\<in>blocksRead s p d. proc br = p;\n        x \\<in> blocksRead s p y; Inv2a_innermost s p (dblock s p);\n        \\<forall>x\\<in>{uu_. \\<exists>d. uu_ = disk s d p} \\<union>\n                       {block br |br.\n                        (\\<exists>x xa. br \\<in> blocksRead s x xa) \\<and>\n                        proc br = p}.\n           Inv2a_innermost s p x\\<rbrakk>\n       \\<Longrightarrow> Inv2a_innermost s p (block x)", "assume bk_in_blocksRead: \"bk \\<in> blocksRead s p d\"\n      and inv2a_bk: \"\\<forall>x\\<in>     {u. \\<exists>d. u = disk s d p} \n                           \\<union> {block br |br. (\\<exists>q d. br \\<in> blocksRead s q d) \n                         \\<and> proc br = p}. Inv2a_innermost s p x\""], ["proof (state)\nthis:\n  bk \\<in> blocksRead s p d\n  \\<forall>x\\<in>{u. \\<exists>d. u = disk s d p} \\<union>\n                 {block br |br.\n                  (\\<exists>q d. br \\<in> blocksRead s q d) \\<and>\n                  proc br = p}.\n     Inv2a_innermost s p x\n\ngoal (1 subgoal):\n 1. \\<And>y x.\n       \\<lbrakk>\\<forall>d. \\<forall>br\\<in>blocksRead s p d. proc br = p;\n        x \\<in> blocksRead s p y; Inv2a_innermost s p (dblock s p);\n        \\<forall>x\\<in>{uu_. \\<exists>d. uu_ = disk s d p} \\<union>\n                       {block br |br.\n                        (\\<exists>x xa. br \\<in> blocksRead s x xa) \\<and>\n                        proc br = p}.\n           Inv2a_innermost s p x\\<rbrakk>\n       \\<Longrightarrow> Inv2a_innermost s p (block x)", "with allproc_p"], ["proof (chain)\npicking this:\n  \\<forall>d. \\<forall>br\\<in>blocksRead s p d. proc br = p\n  bk \\<in> blocksRead s p d\n  \\<forall>x\\<in>{u. \\<exists>d. u = disk s d p} \\<union>\n                 {block br |br.\n                  (\\<exists>q d. br \\<in> blocksRead s q d) \\<and>\n                  proc br = p}.\n     Inv2a_innermost s p x", "have \"proc bk = p\""], ["proof (prove)\nusing this:\n  \\<forall>d. \\<forall>br\\<in>blocksRead s p d. proc br = p\n  bk \\<in> blocksRead s p d\n  \\<forall>x\\<in>{u. \\<exists>d. u = disk s d p} \\<union>\n                 {block br |br.\n                  (\\<exists>q d. br \\<in> blocksRead s q d) \\<and>\n                  proc br = p}.\n     Inv2a_innermost s p x\n\ngoal (1 subgoal):\n 1. proc bk = p", "by auto"], ["proof (state)\nthis:\n  proc bk = p\n\ngoal (1 subgoal):\n 1. \\<And>y x.\n       \\<lbrakk>\\<forall>d. \\<forall>br\\<in>blocksRead s p d. proc br = p;\n        x \\<in> blocksRead s p y; Inv2a_innermost s p (dblock s p);\n        \\<forall>x\\<in>{uu_. \\<exists>d. uu_ = disk s d p} \\<union>\n                       {block br |br.\n                        (\\<exists>x xa. br \\<in> blocksRead s x xa) \\<and>\n                        proc br = p}.\n           Inv2a_innermost s p x\\<rbrakk>\n       \\<Longrightarrow> Inv2a_innermost s p (block x)", "with bk_in_blocksRead inv2a_bk"], ["proof (chain)\npicking this:\n  bk \\<in> blocksRead s p d\n  \\<forall>x\\<in>{u. \\<exists>d. u = disk s d p} \\<union>\n                 {block br |br.\n                  (\\<exists>q d. br \\<in> blocksRead s q d) \\<and>\n                  proc br = p}.\n     Inv2a_innermost s p x\n  proc bk = p", "show \"Inv2a_innermost s p (block bk)\""], ["proof (prove)\nusing this:\n  bk \\<in> blocksRead s p d\n  \\<forall>x\\<in>{u. \\<exists>d. u = disk s d p} \\<union>\n                 {block br |br.\n                  (\\<exists>q d. br \\<in> blocksRead s q d) \\<and>\n                  proc br = p}.\n     Inv2a_innermost s p x\n  proc bk = p\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s p (block bk)", "by blast"], ["proof (state)\nthis:\n  Inv2a_innermost s p (block bk)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>t\\<in>allBlocksRead s p. Inv2a_innermost s p t\n\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>mbal_update (\\<lambda>_. mbal (dblock s' p)) `\n                   allBlocksRead s p.\n       Inv2a_innermost s p t", "from act"], ["proof (chain)\npicking this:\n  HEndPhase0 s s' p", "have mbal'_gt: \"\\<forall>bk \\<in> allBlocksRead s p. mbal bk \\<le> mbal (dblock s' p)\""], ["proof (prove)\nusing this:\n  HEndPhase0 s s' p\n\ngoal (1 subgoal):\n 1. \\<forall>bk\\<in>allBlocksRead s p. mbal bk \\<le> mbal (dblock s' p)", "by(auto simp add: EndPhase0_def)"], ["proof (state)\nthis:\n  \\<forall>bk\\<in>allBlocksRead s p. mbal bk \\<le> mbal (dblock s' p)\n\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>mbal_update (\\<lambda>_. mbal (dblock s' p)) `\n                   allBlocksRead s p.\n       Inv2a_innermost s p t", "with  mbal' allBlocks_inv2a"], ["proof (chain)\npicking this:\n  mbal (dblock s' p) \\<in> Ballot p\n  \\<forall>t\\<in>allBlocksRead s p. Inv2a_innermost s p t\n  \\<forall>bk\\<in>allBlocksRead s p. mbal bk \\<le> mbal (dblock s' p)", "show ?thesis"], ["proof (prove)\nusing this:\n  mbal (dblock s' p) \\<in> Ballot p\n  \\<forall>t\\<in>allBlocksRead s p. Inv2a_innermost s p t\n  \\<forall>bk\\<in>allBlocksRead s p. mbal bk \\<le> mbal (dblock s' p)\n\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>mbal_update (\\<lambda>_. mbal (dblock s' p)) `\n                   allBlocksRead s p.\n       Inv2a_innermost s p t", "proof (auto simp add: Inv2a_innermost_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>mbal (dblock s' p) \\<in> Ballot p;\n        \\<forall>t\\<in>allBlocksRead s p.\n           (mbal t = 0 \\<or> mbal t \\<in> Ballot p) \\<and>\n           (bal t = 0 \\<or> bal t \\<in> Ballot p) \\<and>\n           (bal t = 0) = (inp t = NotAnInput) \\<and>\n           bal t \\<le> mbal t \\<and>\n           (inp t = NotAnInput \\<or> inp t \\<in> allInput s);\n        \\<forall>bk\\<in>allBlocksRead s p. mbal bk \\<le> mbal (dblock s' p);\n        t \\<in> allBlocksRead s p\\<rbrakk>\n       \\<Longrightarrow> bal t \\<le> mbal (dblock s' p)", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>mbal (dblock s' p) \\<in> Ballot p;\n        \\<forall>t\\<in>allBlocksRead s p.\n           (mbal t = 0 \\<or> mbal t \\<in> Ballot p) \\<and>\n           (bal t = 0 \\<or> bal t \\<in> Ballot p) \\<and>\n           (bal t = 0) = (inp t = NotAnInput) \\<and>\n           bal t \\<le> mbal t \\<and>\n           (inp t = NotAnInput \\<or> inp t \\<in> allInput s);\n        \\<forall>bk\\<in>allBlocksRead s p. mbal bk \\<le> mbal (dblock s' p);\n        t \\<in> allBlocksRead s p\\<rbrakk>\n       \\<Longrightarrow> bal t \\<le> mbal (dblock s' p)", "assume t_blocksRead: \"t \\<in> allBlocksRead s p\""], ["proof (state)\nthis:\n  t \\<in> allBlocksRead s p\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>mbal (dblock s' p) \\<in> Ballot p;\n        \\<forall>t\\<in>allBlocksRead s p.\n           (mbal t = 0 \\<or> mbal t \\<in> Ballot p) \\<and>\n           (bal t = 0 \\<or> bal t \\<in> Ballot p) \\<and>\n           (bal t = 0) = (inp t = NotAnInput) \\<and>\n           bal t \\<le> mbal t \\<and>\n           (inp t = NotAnInput \\<or> inp t \\<in> allInput s);\n        \\<forall>bk\\<in>allBlocksRead s p. mbal bk \\<le> mbal (dblock s' p);\n        t \\<in> allBlocksRead s p\\<rbrakk>\n       \\<Longrightarrow> bal t \\<le> mbal (dblock s' p)", "with allBlocks_inv2a"], ["proof (chain)\npicking this:\n  \\<forall>t\\<in>allBlocksRead s p. Inv2a_innermost s p t\n  t \\<in> allBlocksRead s p", "have \"bal t \\<le> mbal t\""], ["proof (prove)\nusing this:\n  \\<forall>t\\<in>allBlocksRead s p. Inv2a_innermost s p t\n  t \\<in> allBlocksRead s p\n\ngoal (1 subgoal):\n 1. bal t \\<le> mbal t", "by (auto simp add: Inv2a_innermost_def)"], ["proof (state)\nthis:\n  bal t \\<le> mbal t\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>mbal (dblock s' p) \\<in> Ballot p;\n        \\<forall>t\\<in>allBlocksRead s p.\n           (mbal t = 0 \\<or> mbal t \\<in> Ballot p) \\<and>\n           (bal t = 0 \\<or> bal t \\<in> Ballot p) \\<and>\n           (bal t = 0) = (inp t = NotAnInput) \\<and>\n           bal t \\<le> mbal t \\<and>\n           (inp t = NotAnInput \\<or> inp t \\<in> allInput s);\n        \\<forall>bk\\<in>allBlocksRead s p. mbal bk \\<le> mbal (dblock s' p);\n        t \\<in> allBlocksRead s p\\<rbrakk>\n       \\<Longrightarrow> bal t \\<le> mbal (dblock s' p)", "moreover"], ["proof (state)\nthis:\n  bal t \\<le> mbal t\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>mbal (dblock s' p) \\<in> Ballot p;\n        \\<forall>t\\<in>allBlocksRead s p.\n           (mbal t = 0 \\<or> mbal t \\<in> Ballot p) \\<and>\n           (bal t = 0 \\<or> bal t \\<in> Ballot p) \\<and>\n           (bal t = 0) = (inp t = NotAnInput) \\<and>\n           bal t \\<le> mbal t \\<and>\n           (inp t = NotAnInput \\<or> inp t \\<in> allInput s);\n        \\<forall>bk\\<in>allBlocksRead s p. mbal bk \\<le> mbal (dblock s' p);\n        t \\<in> allBlocksRead s p\\<rbrakk>\n       \\<Longrightarrow> bal t \\<le> mbal (dblock s' p)", "from t_blocksRead mbal'_gt"], ["proof (chain)\npicking this:\n  t \\<in> allBlocksRead s p\n  \\<forall>bk\\<in>allBlocksRead s p. mbal bk \\<le> mbal (dblock s' p)", "have \"mbal t \\<le> mbal (dblock s' p)\""], ["proof (prove)\nusing this:\n  t \\<in> allBlocksRead s p\n  \\<forall>bk\\<in>allBlocksRead s p. mbal bk \\<le> mbal (dblock s' p)\n\ngoal (1 subgoal):\n 1. mbal t \\<le> mbal (dblock s' p)", "by blast"], ["proof (state)\nthis:\n  mbal t \\<le> mbal (dblock s' p)\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>mbal (dblock s' p) \\<in> Ballot p;\n        \\<forall>t\\<in>allBlocksRead s p.\n           (mbal t = 0 \\<or> mbal t \\<in> Ballot p) \\<and>\n           (bal t = 0 \\<or> bal t \\<in> Ballot p) \\<and>\n           (bal t = 0) = (inp t = NotAnInput) \\<and>\n           bal t \\<le> mbal t \\<and>\n           (inp t = NotAnInput \\<or> inp t \\<in> allInput s);\n        \\<forall>bk\\<in>allBlocksRead s p. mbal bk \\<le> mbal (dblock s' p);\n        t \\<in> allBlocksRead s p\\<rbrakk>\n       \\<Longrightarrow> bal t \\<le> mbal (dblock s' p)", "ultimately"], ["proof (chain)\npicking this:\n  bal t \\<le> mbal t\n  mbal t \\<le> mbal (dblock s' p)", "show \"bal t \\<le> mbal (dblock s' p)\""], ["proof (prove)\nusing this:\n  bal t \\<le> mbal t\n  mbal t \\<le> mbal (dblock s' p)\n\ngoal (1 subgoal):\n 1. bal t \\<le> mbal (dblock s' p)", "by auto"], ["proof (state)\nthis:\n  bal t \\<le> mbal (dblock s' p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>t\\<in>mbal_update (\\<lambda>_. mbal (dblock s' p)) `\n                 allBlocksRead s p.\n     Inv2a_innermost s p t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma HEndPhase0_Inv2a_dblock:\n  assumes act: \"HEndPhase0 s s' p\"\n  and inv1: \"Inv1 s\"\n  and inv2a: \"Inv2a_inner s p\"\n  and inv2c: \"Inv2c_inner s p\"\n  shows \"Inv2a_innermost s' p (dblock s' p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inv2a_innermost s' p (dblock s' p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Inv2a_innermost s' p (dblock s' p)", "from act inv2a inv2c"], ["proof (chain)\npicking this:\n  HEndPhase0 s s' p\n  Inv2a_inner s p\n  Inv2c_inner s p", "have t1: \"\\<forall>t \\<in> (\\<lambda>x. x \\<lparr>mbal:= mbal (dblock s' p)\\<rparr>) ` allBlocksRead s p. \n                  Inv2a_innermost s p t\""], ["proof (prove)\nusing this:\n  HEndPhase0 s s' p\n  Inv2a_inner s p\n  Inv2c_inner s p\n\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>mbal_update (\\<lambda>_. mbal (dblock s' p)) `\n                   allBlocksRead s p.\n       Inv2a_innermost s p t", "by(blast dest: HEndPhase0_Inv2a_allBlocksRead)"], ["proof (state)\nthis:\n  \\<forall>t\\<in>mbal_update (\\<lambda>_. mbal (dblock s' p)) `\n                 allBlocksRead s p.\n     Inv2a_innermost s p t\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' p (dblock s' p)", "from act inv1"], ["proof (chain)\npicking this:\n  HEndPhase0 s s' p\n  Inv1 s", "have \"dblock s' p \\<in> (\\<lambda>x. x \\<lparr>mbal:= mbal(dblock s' p)\\<rparr>) ` allBlocksRead s p\""], ["proof (prove)\nusing this:\n  HEndPhase0 s s' p\n  Inv1 s\n\ngoal (1 subgoal):\n 1. dblock s' p\n    \\<in> mbal_update (\\<lambda>_. mbal (dblock s' p)) ` allBlocksRead s p", "by(simp, blast dest: HEndPhase0_dblock_allBlocksRead)"], ["proof (state)\nthis:\n  dblock s' p\n  \\<in> mbal_update (\\<lambda>_. mbal (dblock s' p)) ` allBlocksRead s p\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' p (dblock s' p)", "with t1"], ["proof (chain)\npicking this:\n  \\<forall>t\\<in>mbal_update (\\<lambda>_. mbal (dblock s' p)) `\n                 allBlocksRead s p.\n     Inv2a_innermost s p t\n  dblock s' p\n  \\<in> mbal_update (\\<lambda>_. mbal (dblock s' p)) ` allBlocksRead s p", "have inv2_dblock: \"Inv2a_innermost s p (dblock s' p)\""], ["proof (prove)\nusing this:\n  \\<forall>t\\<in>mbal_update (\\<lambda>_. mbal (dblock s' p)) `\n                 allBlocksRead s p.\n     Inv2a_innermost s p t\n  dblock s' p\n  \\<in> mbal_update (\\<lambda>_. mbal (dblock s' p)) ` allBlocksRead s p\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s p (dblock s' p)", "by auto"], ["proof (state)\nthis:\n  Inv2a_innermost s p (dblock s' p)\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' p (dblock s' p)", "with act"], ["proof (chain)\npicking this:\n  HEndPhase0 s s' p\n  Inv2a_innermost s p (dblock s' p)", "have \"inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\""], ["proof (prove)\nusing this:\n  HEndPhase0 s s' p\n  Inv2a_innermost s p (dblock s' p)\n\ngoal (1 subgoal):\n 1. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}", "by(auto dest: HNextPart_allInput_or_NotAnInput)"], ["proof (state)\nthis:\n  inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' p (dblock s' p)", "with inv2_dblock"], ["proof (chain)\npicking this:\n  Inv2a_innermost s p (dblock s' p)\n  inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}", "show ?thesis"], ["proof (prove)\nusing this:\n  Inv2a_innermost s p (dblock s' p)\n  inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' p (dblock s' p)", "by(auto simp add: Inv2a_innermost_def)"], ["proof (state)\nthis:\n  Inv2a_innermost s' p (dblock s' p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma HEndPhase0_Inv2a_dblock_q:\n  assumes act: \"HEndPhase0 s s' p\"\n  and inv1: \"Inv1 s\"\n  and inv2a: \"Inv2a_inner s q\"\n  and inv2c: \"Inv2c_inner s p\"\n  shows \"Inv2a_innermost s' q (dblock s' q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inv2a_innermost s' q (dblock s' q)", "proof(cases \"p=q\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)\n 2. p \\<noteq> q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)", "case True"], ["proof (state)\nthis:\n  p = q\n\ngoal (2 subgoals):\n 1. p = q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)\n 2. p \\<noteq> q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)", "with act inv2a inv2c inv1"], ["proof (chain)\npicking this:\n  HEndPhase0 s s' p\n  Inv2a_inner s q\n  Inv2c_inner s p\n  Inv1 s\n  p = q", "show ?thesis"], ["proof (prove)\nusing this:\n  HEndPhase0 s s' p\n  Inv2a_inner s q\n  Inv2c_inner s p\n  Inv1 s\n  p = q\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' q (dblock s' q)", "by(blast dest: HEndPhase0_Inv2a_dblock)"], ["proof (state)\nthis:\n  Inv2a_innermost s' q (dblock s' q)\n\ngoal (1 subgoal):\n 1. p \\<noteq> q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)", "case False"], ["proof (state)\nthis:\n  p \\<noteq> q\n\ngoal (1 subgoal):\n 1. p \\<noteq> q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)", "from inv2a"], ["proof (chain)\npicking this:\n  Inv2a_inner s q", "have inv_q_dblock: \"Inv2a_innermost s q (dblock s q)\""], ["proof (prove)\nusing this:\n  Inv2a_inner s q\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s q (dblock s q)", "by(auto simp add: Inv2a_inner_def blocksOf_def)"], ["proof (state)\nthis:\n  Inv2a_innermost s q (dblock s q)\n\ngoal (1 subgoal):\n 1. p \\<noteq> q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)", "with False act"], ["proof (chain)\npicking this:\n  p \\<noteq> q\n  HEndPhase0 s s' p\n  Inv2a_innermost s q (dblock s q)", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<noteq> q\n  HEndPhase0 s s' p\n  Inv2a_innermost s q (dblock s q)\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' q (dblock s' q)", "by(clarsimp simp add: EndPhase0_def HNextPart_def \n      InitializePhase_def Inv2a_innermost_def)"], ["proof (state)\nthis:\n  Inv2a_innermost s' q (dblock s' q)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem HEndPhase0_Inv2a:\n  assumes inv: \"Inv2a s\"\n  and     act: \"HEndPhase0 s s' p\"\n  and    inv1: \"Inv1 s\"\n  and   inv2c: \"Inv2c_inner s p\"\n  shows        \"Inv2a s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inv2a s'", "proof(clarsimp simp add: Inv2a_def Inv2a_inner_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "fix q bk"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "assume bk: \"bk \\<in> blocksOf s' q\""], ["proof (state)\nthis:\n  bk \\<in> blocksOf s' q\n\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "with HEndPhase0_blocksOf[OF act]"], ["proof (chain)\npicking this:\n  blocksOf s' ?q \\<subseteq> blocksOf s ?q \\<union> {dblock s' ?q}\n  bk \\<in> blocksOf s' q", "have dblock_blocks: \"bk \\<in> {dblock s' q} \\<union> blocksOf s q\""], ["proof (prove)\nusing this:\n  blocksOf s' ?q \\<subseteq> blocksOf s ?q \\<union> {dblock s' ?q}\n  bk \\<in> blocksOf s' q\n\ngoal (1 subgoal):\n 1. bk \\<in> {dblock s' q} \\<union> blocksOf s q", "by blast"], ["proof (state)\nthis:\n  bk \\<in> {dblock s' q} \\<union> blocksOf s q\n\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "thus \"Inv2a_innermost s' q bk\""], ["proof (prove)\nusing this:\n  bk \\<in> {dblock s' q} \\<union> blocksOf s q\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' q bk", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. bk \\<in> {dblock s' q} \\<Longrightarrow> Inv2a_innermost s' q bk\n 2. bk \\<in> blocksOf s q \\<Longrightarrow> Inv2a_innermost s' q bk", "from inv"], ["proof (chain)\npicking this:\n  Inv2a s", "have inv_q: \"Inv2a_inner s q\""], ["proof (prove)\nusing this:\n  Inv2a s\n\ngoal (1 subgoal):\n 1. Inv2a_inner s q", "by(auto simp add: Inv2a_def)"], ["proof (state)\nthis:\n  Inv2a_inner s q\n\ngoal (2 subgoals):\n 1. bk \\<in> {dblock s' q} \\<Longrightarrow> Inv2a_innermost s' q bk\n 2. bk \\<in> blocksOf s q \\<Longrightarrow> Inv2a_innermost s' q bk", "assume \"bk \\<in> {dblock s' q}\""], ["proof (state)\nthis:\n  bk \\<in> {dblock s' q}\n\ngoal (2 subgoals):\n 1. bk \\<in> {dblock s' q} \\<Longrightarrow> Inv2a_innermost s' q bk\n 2. bk \\<in> blocksOf s q \\<Longrightarrow> Inv2a_innermost s' q bk", "with act inv1 inv2c inv_q"], ["proof (chain)\npicking this:\n  HEndPhase0 s s' p\n  Inv1 s\n  Inv2c_inner s p\n  Inv2a_inner s q\n  bk \\<in> {dblock s' q}", "show ?thesis"], ["proof (prove)\nusing this:\n  HEndPhase0 s s' p\n  Inv1 s\n  Inv2c_inner s p\n  Inv2a_inner s q\n  bk \\<in> {dblock s' q}\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' q bk", "by(blast dest:HEndPhase0_Inv2a_dblock_q)"], ["proof (state)\nthis:\n  Inv2a_innermost s' q bk\n\ngoal (1 subgoal):\n 1. bk \\<in> blocksOf s q \\<Longrightarrow> Inv2a_innermost s' q bk", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. bk \\<in> blocksOf s q \\<Longrightarrow> Inv2a_innermost s' q bk", "assume bk_in_blocks: \"bk \\<in> blocksOf s q\""], ["proof (state)\nthis:\n  bk \\<in> blocksOf s q\n\ngoal (1 subgoal):\n 1. bk \\<in> blocksOf s q \\<Longrightarrow> Inv2a_innermost s' q bk", "with inv"], ["proof (chain)\npicking this:\n  Inv2a s\n  bk \\<in> blocksOf s q", "have \"Inv2a_innermost s q bk\""], ["proof (prove)\nusing this:\n  Inv2a s\n  bk \\<in> blocksOf s q\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s q bk", "by(auto simp add: Inv2a_def Inv2a_inner_def)"], ["proof (state)\nthis:\n  Inv2a_innermost s q bk\n\ngoal (1 subgoal):\n 1. bk \\<in> blocksOf s q \\<Longrightarrow> Inv2a_innermost s' q bk", "with act"], ["proof (chain)\npicking this:\n  HEndPhase0 s s' p\n  Inv2a_innermost s q bk", "show ?thesis"], ["proof (prove)\nusing this:\n  HEndPhase0 s s' p\n  Inv2a_innermost s q bk\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' q bk", "by(auto simp add: EndPhase0_def HNextPart_def\n          InitializePhase_def Inv2a_innermost_def)"], ["proof (state)\nthis:\n  Inv2a_innermost s' q bk\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Inv2a_innermost s' q bk\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma HEndPhase1_blocksOf:\n  \"HEndPhase1 s s' p \\<Longrightarrow> blocksOf s' q \\<subseteq> blocksOf s q \\<union> {dblock s' q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HEndPhase1 s s' p \\<Longrightarrow>\n    blocksOf s' q \\<subseteq> blocksOf s q \\<union> {dblock s' q}", "by (auto simp add: EndPhase1_def blocksOf_def\n         dest: subsetD[OF InitializePhase_rdBy])"], ["", "lemma maxBlk_in_nonInitBlks:\n  assumes b: \"b \\<in> nonInitBlks s p\"\n  and inv1: \"Inv1 s\"\n  shows \"   maxBlk s p \\<in> nonInitBlks s p \n         \\<and> (\\<forall>c\\<in> nonInitBlks s p. bal c \\<le> bal (maxBlk s p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maxBlk s p \\<in> nonInitBlks s p \\<and>\n    (\\<forall>c\\<in>nonInitBlks s p. bal c \\<le> bal (maxBlk s p))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. maxBlk s p \\<in> nonInitBlks s p \\<and>\n    (\\<forall>c\\<in>nonInitBlks s p. bal c \\<le> bal (maxBlk s p))", "have nibals_finite: \"finite (bal ` (nonInitBlks s p))\" (is \"finite ?S\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (bal ` nonInitBlks s p)", "proof (rule finite_imageI)"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (nonInitBlks s p)", "from inv1"], ["proof (chain)\npicking this:\n  Inv1 s", "have \"finite (allRdBlks s p)\""], ["proof (prove)\nusing this:\n  Inv1 s\n\ngoal (1 subgoal):\n 1. finite (allRdBlks s p)", "by (auto simp add: Inv1_def)"], ["proof (state)\nthis:\n  finite (allRdBlks s p)\n\ngoal (1 subgoal):\n 1. finite (nonInitBlks s p)", "hence \"finite (allBlocksRead s p)\""], ["proof (prove)\nusing this:\n  finite (allRdBlks s p)\n\ngoal (1 subgoal):\n 1. finite (allBlocksRead s p)", "by (auto simp add: allBlocksRead_def)"], ["proof (state)\nthis:\n  finite (allBlocksRead s p)\n\ngoal (1 subgoal):\n 1. finite (nonInitBlks s p)", "hence \"finite (blocksSeen s p)\""], ["proof (prove)\nusing this:\n  finite (allBlocksRead s p)\n\ngoal (1 subgoal):\n 1. finite (blocksSeen s p)", "by (simp add: blocksSeen_def)"], ["proof (state)\nthis:\n  finite (blocksSeen s p)\n\ngoal (1 subgoal):\n 1. finite (nonInitBlks s p)", "thus \"finite (nonInitBlks s p)\""], ["proof (prove)\nusing this:\n  finite (blocksSeen s p)\n\ngoal (1 subgoal):\n 1. finite (nonInitBlks s p)", "by(auto simp add: nonInitBlks_def intro: finite_subset)"], ["proof (state)\nthis:\n  finite (nonInitBlks s p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finite (bal ` nonInitBlks s p)\n\ngoal (1 subgoal):\n 1. maxBlk s p \\<in> nonInitBlks s p \\<and>\n    (\\<forall>c\\<in>nonInitBlks s p. bal c \\<le> bal (maxBlk s p))", "from b"], ["proof (chain)\npicking this:\n  b \\<in> nonInitBlks s p", "have \"bal ` nonInitBlks s p \\<noteq> {}\""], ["proof (prove)\nusing this:\n  b \\<in> nonInitBlks s p\n\ngoal (1 subgoal):\n 1. bal ` nonInitBlks s p \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  bal ` nonInitBlks s p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. maxBlk s p \\<in> nonInitBlks s p \\<and>\n    (\\<forall>c\\<in>nonInitBlks s p. bal c \\<le> bal (maxBlk s p))", "with nibals_finite"], ["proof (chain)\npicking this:\n  finite (bal ` nonInitBlks s p)\n  bal ` nonInitBlks s p \\<noteq> {}", "have \"Max ?S \\<in> ?S\" and \"\\<forall>bb \\<in> ?S. bb \\<le> Max ?S\""], ["proof (prove)\nusing this:\n  finite (bal ` nonInitBlks s p)\n  bal ` nonInitBlks s p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Max (bal ` nonInitBlks s p) \\<in> bal ` nonInitBlks s p &&&\n    \\<forall>bb\\<in>bal ` nonInitBlks s p.\n       bb \\<le> Max (bal ` nonInitBlks s p)", "by auto"], ["proof (state)\nthis:\n  Max (bal ` nonInitBlks s p) \\<in> bal ` nonInitBlks s p\n  \\<forall>bb\\<in>bal ` nonInitBlks s p.\n     bb \\<le> Max (bal ` nonInitBlks s p)\n\ngoal (1 subgoal):\n 1. maxBlk s p \\<in> nonInitBlks s p \\<and>\n    (\\<forall>c\\<in>nonInitBlks s p. bal c \\<le> bal (maxBlk s p))", "hence \"\\<exists>mb \\<in> ?S. \\<forall>bb \\<in> ?S. bb \\<le> mb\""], ["proof (prove)\nusing this:\n  Max (bal ` nonInitBlks s p) \\<in> bal ` nonInitBlks s p\n  \\<forall>bb\\<in>bal ` nonInitBlks s p.\n     bb \\<le> Max (bal ` nonInitBlks s p)\n\ngoal (1 subgoal):\n 1. \\<exists>mb\\<in>bal ` nonInitBlks s p.\n       \\<forall>bb\\<in>bal ` nonInitBlks s p. bb \\<le> mb", ".."], ["proof (state)\nthis:\n  \\<exists>mb\\<in>bal ` nonInitBlks s p.\n     \\<forall>bb\\<in>bal ` nonInitBlks s p. bb \\<le> mb\n\ngoal (1 subgoal):\n 1. maxBlk s p \\<in> nonInitBlks s p \\<and>\n    (\\<forall>c\\<in>nonInitBlks s p. bal c \\<le> bal (maxBlk s p))", "then"], ["proof (chain)\npicking this:\n  \\<exists>mb\\<in>bal ` nonInitBlks s p.\n     \\<forall>bb\\<in>bal ` nonInitBlks s p. bb \\<le> mb", "obtain mblk\n    where \"   mblk \\<in> nonInitBlks s p \n           \\<and> (\\<forall>c \\<in> nonInitBlks s p. bal c \\<le> bal mblk)\"\n          (is \"?P mblk\")"], ["proof (prove)\nusing this:\n  \\<exists>mb\\<in>bal ` nonInitBlks s p.\n     \\<forall>bb\\<in>bal ` nonInitBlks s p. bb \\<le> mb\n\ngoal (1 subgoal):\n 1. (\\<And>mblk.\n        mblk \\<in> nonInitBlks s p \\<and>\n        (\\<forall>c\\<in>nonInitBlks s p.\n            bal c \\<le> bal mblk) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  mblk \\<in> nonInitBlks s p \\<and>\n  (\\<forall>c\\<in>nonInitBlks s p. bal c \\<le> bal mblk)\n\ngoal (1 subgoal):\n 1. maxBlk s p \\<in> nonInitBlks s p \\<and>\n    (\\<forall>c\\<in>nonInitBlks s p. bal c \\<le> bal (maxBlk s p))", "hence \"?P (SOME b. ?P b)\""], ["proof (prove)\nusing this:\n  mblk \\<in> nonInitBlks s p \\<and>\n  (\\<forall>c\\<in>nonInitBlks s p. bal c \\<le> bal mblk)\n\ngoal (1 subgoal):\n 1. (SOME b.\n        b \\<in> nonInitBlks s p \\<and>\n        (\\<forall>c\\<in>nonInitBlks s p. bal c \\<le> bal b))\n    \\<in> nonInitBlks s p \\<and>\n    (\\<forall>c\\<in>nonInitBlks s p.\n        bal c\n        \\<le> bal (SOME b.\n                      b \\<in> nonInitBlks s p \\<and>\n                      (\\<forall>c\\<in>nonInitBlks s p. bal c \\<le> bal b)))", "by (rule someI)"], ["proof (state)\nthis:\n  (SOME b.\n      b \\<in> nonInitBlks s p \\<and>\n      (\\<forall>c\\<in>nonInitBlks s p. bal c \\<le> bal b))\n  \\<in> nonInitBlks s p \\<and>\n  (\\<forall>c\\<in>nonInitBlks s p.\n      bal c\n      \\<le> bal (SOME b.\n                    b \\<in> nonInitBlks s p \\<and>\n                    (\\<forall>c\\<in>nonInitBlks s p. bal c \\<le> bal b)))\n\ngoal (1 subgoal):\n 1. maxBlk s p \\<in> nonInitBlks s p \\<and>\n    (\\<forall>c\\<in>nonInitBlks s p. bal c \\<le> bal (maxBlk s p))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (SOME b.\n      b \\<in> nonInitBlks s p \\<and>\n      (\\<forall>c\\<in>nonInitBlks s p. bal c \\<le> bal b))\n  \\<in> nonInitBlks s p \\<and>\n  (\\<forall>c\\<in>nonInitBlks s p.\n      bal c\n      \\<le> bal (SOME b.\n                    b \\<in> nonInitBlks s p \\<and>\n                    (\\<forall>c\\<in>nonInitBlks s p. bal c \\<le> bal b)))\n\ngoal (1 subgoal):\n 1. maxBlk s p \\<in> nonInitBlks s p \\<and>\n    (\\<forall>c\\<in>nonInitBlks s p. bal c \\<le> bal (maxBlk s p))", "by (simp add: maxBlk_def)"], ["proof (state)\nthis:\n  maxBlk s p \\<in> nonInitBlks s p \\<and>\n  (\\<forall>c\\<in>nonInitBlks s p. bal c \\<le> bal (maxBlk s p))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma blocksOf_nonInitBlks: \n  \"(\\<forall>p bk. bk \\<in> blocksOf s p \\<longrightarrow> P bk) \n       \\<Longrightarrow> bk \\<in> nonInitBlks s p \\<longrightarrow> P bk\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p bk.\n       bk \\<in> blocksOf s p \\<longrightarrow> P bk \\<Longrightarrow>\n    bk \\<in> nonInitBlks s p \\<longrightarrow> P bk", "by(auto simp add: allRdBlks_def blocksOf_def nonInitBlks_def \n                    blocksSeen_def allBlocksRead_def rdBy_def, \n    blast)"], ["", "lemma maxBlk_allInput: \n  assumes inv: \"Inv2a s\" \n  and mblk: \"maxBlk s p \\<in> nonInitBlks s p\"\n  shows \"inp (maxBlk s p) \\<in> allInput s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inp (maxBlk s p) \\<in> allInput s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. inp (maxBlk s p) \\<in> allInput s", "from inv"], ["proof (chain)\npicking this:\n  Inv2a s", "have blocks: \"\\<forall>p bk. bk \\<in> blocksOf s p \n                       \\<longrightarrow> inp bk \\<in> (allInput s) \\<union> {NotAnInput}\""], ["proof (prove)\nusing this:\n  Inv2a s\n\ngoal (1 subgoal):\n 1. \\<forall>p bk.\n       bk \\<in> blocksOf s p \\<longrightarrow>\n       inp bk \\<in> allInput s \\<union> {NotAnInput}", "by(auto simp add: Inv2a_def Inv2a_inner_def Inv2a_innermost_def)"], ["proof (state)\nthis:\n  \\<forall>p bk.\n     bk \\<in> blocksOf s p \\<longrightarrow>\n     inp bk \\<in> allInput s \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. inp (maxBlk s p) \\<in> allInput s", "from mblk NotAnInput"], ["proof (chain)\npicking this:\n  maxBlk s p \\<in> nonInitBlks s p\n  NotAnInput \\<notin> Inputs", "have \"inp (maxBlk s p) \\<noteq> NotAnInput\""], ["proof (prove)\nusing this:\n  maxBlk s p \\<in> nonInitBlks s p\n  NotAnInput \\<notin> Inputs\n\ngoal (1 subgoal):\n 1. inp (maxBlk s p) \\<noteq> NotAnInput", "by(auto simp add: nonInitBlks_def)"], ["proof (state)\nthis:\n  inp (maxBlk s p) \\<noteq> NotAnInput\n\ngoal (1 subgoal):\n 1. inp (maxBlk s p) \\<in> allInput s", "with mblk blocksOf_nonInitBlks[OF blocks]"], ["proof (chain)\npicking this:\n  maxBlk s p \\<in> nonInitBlks s p\n  ?bk \\<in> nonInitBlks s ?p \\<longrightarrow>\n  inp ?bk \\<in> allInput s \\<union> {NotAnInput}\n  inp (maxBlk s p) \\<noteq> NotAnInput", "show ?thesis"], ["proof (prove)\nusing this:\n  maxBlk s p \\<in> nonInitBlks s p\n  ?bk \\<in> nonInitBlks s ?p \\<longrightarrow>\n  inp ?bk \\<in> allInput s \\<union> {NotAnInput}\n  inp (maxBlk s p) \\<noteq> NotAnInput\n\ngoal (1 subgoal):\n 1. inp (maxBlk s p) \\<in> allInput s", "by auto"], ["proof (state)\nthis:\n  inp (maxBlk s p) \\<in> allInput s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma HEndPhase1_dblock_allInput: \n  assumes act: \"HEndPhase1 s s' p\"\n  and inv1: \"HInv1 s\"\n  and inv2: \"Inv2a s\"\n  shows inp': \"inp (dblock s' p) \\<in> allInput s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inp (dblock s' p) \\<in> allInput s'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. inp (dblock s' p) \\<in> allInput s'", "from act"], ["proof (chain)\npicking this:\n  HEndPhase1 s s' p", "have inpt: \"inpt s p \\<in> allInput s'\""], ["proof (prove)\nusing this:\n  HEndPhase1 s s' p\n\ngoal (1 subgoal):\n 1. inpt s p \\<in> allInput s'", "by(auto simp add: HNextPart_def EndPhase1_def)"], ["proof (state)\nthis:\n  inpt s p \\<in> allInput s'\n\ngoal (1 subgoal):\n 1. inp (dblock s' p) \\<in> allInput s'", "have \"nonInitBlks s p \\<noteq> {} \\<longrightarrow> inp (maxBlk s p) \\<in> allInput s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nonInitBlks s p \\<noteq> {} \\<longrightarrow>\n    inp (maxBlk s p) \\<in> allInput s", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. nonInitBlks s p \\<noteq> {} \\<Longrightarrow>\n    inp (maxBlk s p) \\<in> allInput s", "assume ni: \"nonInitBlks s p \\<noteq> {}\""], ["proof (state)\nthis:\n  nonInitBlks s p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. nonInitBlks s p \\<noteq> {} \\<Longrightarrow>\n    inp (maxBlk s p) \\<in> allInput s", "with inv1"], ["proof (chain)\npicking this:\n  HInv1 s\n  nonInitBlks s p \\<noteq> {}", "have \"maxBlk s p \\<in> nonInitBlks s p\""], ["proof (prove)\nusing this:\n  HInv1 s\n  nonInitBlks s p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. maxBlk s p \\<in> nonInitBlks s p", "by (auto simp add: HInv1_def maxBlk_in_nonInitBlks)"], ["proof (state)\nthis:\n  maxBlk s p \\<in> nonInitBlks s p\n\ngoal (1 subgoal):\n 1. nonInitBlks s p \\<noteq> {} \\<Longrightarrow>\n    inp (maxBlk s p) \\<in> allInput s", "with inv2"], ["proof (chain)\npicking this:\n  Inv2a s\n  maxBlk s p \\<in> nonInitBlks s p", "show \"inp (maxBlk s p) \\<in> allInput s\""], ["proof (prove)\nusing this:\n  Inv2a s\n  maxBlk s p \\<in> nonInitBlks s p\n\ngoal (1 subgoal):\n 1. inp (maxBlk s p) \\<in> allInput s", "by(blast dest: maxBlk_allInput)"], ["proof (state)\nthis:\n  inp (maxBlk s p) \\<in> allInput s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  nonInitBlks s p \\<noteq> {} \\<longrightarrow>\n  inp (maxBlk s p) \\<in> allInput s\n\ngoal (1 subgoal):\n 1. inp (dblock s' p) \\<in> allInput s'", "with act inpt"], ["proof (chain)\npicking this:\n  HEndPhase1 s s' p\n  inpt s p \\<in> allInput s'\n  nonInitBlks s p \\<noteq> {} \\<longrightarrow>\n  inp (maxBlk s p) \\<in> allInput s", "show ?thesis"], ["proof (prove)\nusing this:\n  HEndPhase1 s s' p\n  inpt s p \\<in> allInput s'\n  nonInitBlks s p \\<noteq> {} \\<longrightarrow>\n  inp (maxBlk s p) \\<in> allInput s\n\ngoal (1 subgoal):\n 1. inp (dblock s' p) \\<in> allInput s'", "by(auto simp add: EndPhase1_def HNextPart_def)"], ["proof (state)\nthis:\n  inp (dblock s' p) \\<in> allInput s'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma HEndPhase1_Inv2a_dblock:\n  assumes act: \"HEndPhase1 s s' p\"\n  and inv1: \"HInv1 s\"\n  and inv2: \"Inv2a s\"\n  and inv2c: \"Inv2c_inner s p\"\n  shows \"Inv2a_innermost s' p (dblock s' p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inv2a_innermost s' p (dblock s' p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Inv2a_innermost s' p (dblock s' p)", "from inv1 act"], ["proof (chain)\npicking this:\n  HInv1 s\n  HEndPhase1 s s' p", "have inv1': \"HInv1 s'\""], ["proof (prove)\nusing this:\n  HInv1 s\n  HEndPhase1 s s' p\n\ngoal (1 subgoal):\n 1. HInv1 s'", "by(blast dest: HEndPhase1_HInv1)"], ["proof (state)\nthis:\n  HInv1 s'\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' p (dblock s' p)", "from inv2"], ["proof (chain)\npicking this:\n  Inv2a s", "have inv2a: \"Inv2a_innermost s p (dblock s p)\""], ["proof (prove)\nusing this:\n  Inv2a s\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s p (dblock s p)", "by(auto simp add: Inv2a_def Inv2a_inner_def blocksOf_def)"], ["proof (state)\nthis:\n  Inv2a_innermost s p (dblock s p)\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' p (dblock s' p)", "from act inv2c"], ["proof (chain)\npicking this:\n  HEndPhase1 s s' p\n  Inv2c_inner s p", "have mbal': \"mbal (dblock s' p) \\<in> Ballot p\""], ["proof (prove)\nusing this:\n  HEndPhase1 s s' p\n  Inv2c_inner s p\n\ngoal (1 subgoal):\n 1. mbal (dblock s' p) \\<in> Ballot p", "by (auto simp add: EndPhase1_def Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  mbal (dblock s' p) \\<in> Ballot p\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' p (dblock s' p)", "moreover"], ["proof (state)\nthis:\n  mbal (dblock s' p) \\<in> Ballot p\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' p (dblock s' p)", "from act"], ["proof (chain)\npicking this:\n  HEndPhase1 s s' p", "have bal': \"bal (dblock s' p) = mbal (dblock s p)\""], ["proof (prove)\nusing this:\n  HEndPhase1 s s' p\n\ngoal (1 subgoal):\n 1. bal (dblock s' p) = mbal (dblock s p)", "by (auto simp add: EndPhase1_def)"], ["proof (state)\nthis:\n  bal (dblock s' p) = mbal (dblock s p)\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' p (dblock s' p)", "moreover"], ["proof (state)\nthis:\n  bal (dblock s' p) = mbal (dblock s p)\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' p (dblock s' p)", "from act inv1 inv2"], ["proof (chain)\npicking this:\n  HEndPhase1 s s' p\n  HInv1 s\n  Inv2a s", "have inp': \"inp (dblock s' p) \\<in> allInput s'\""], ["proof (prove)\nusing this:\n  HEndPhase1 s s' p\n  HInv1 s\n  Inv2a s\n\ngoal (1 subgoal):\n 1. inp (dblock s' p) \\<in> allInput s'", "by(blast dest: HEndPhase1_dblock_allInput)"], ["proof (state)\nthis:\n  inp (dblock s' p) \\<in> allInput s'\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' p (dblock s' p)", "moreover"], ["proof (state)\nthis:\n  inp (dblock s' p) \\<in> allInput s'\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' p (dblock s' p)", "with inv1' NotAnInput"], ["proof (chain)\npicking this:\n  HInv1 s'\n  NotAnInput \\<notin> Inputs\n  inp (dblock s' p) \\<in> allInput s'", "have \"inp (dblock s' p) \\<noteq> NotAnInput\""], ["proof (prove)\nusing this:\n  HInv1 s'\n  NotAnInput \\<notin> Inputs\n  inp (dblock s' p) \\<in> allInput s'\n\ngoal (1 subgoal):\n 1. inp (dblock s' p) \\<noteq> NotAnInput", "by(auto simp add: HInv1_def)"], ["proof (state)\nthis:\n  inp (dblock s' p) \\<noteq> NotAnInput\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' p (dblock s' p)", "ultimately"], ["proof (chain)\npicking this:\n  mbal (dblock s' p) \\<in> Ballot p\n  bal (dblock s' p) = mbal (dblock s p)\n  inp (dblock s' p) \\<in> allInput s'\n  inp (dblock s' p) \\<noteq> NotAnInput", "show ?thesis"], ["proof (prove)\nusing this:\n  mbal (dblock s' p) \\<in> Ballot p\n  bal (dblock s' p) = mbal (dblock s p)\n  inp (dblock s' p) \\<in> allInput s'\n  inp (dblock s' p) \\<noteq> NotAnInput\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' p (dblock s' p)", "using act inv2a"], ["proof (prove)\nusing this:\n  mbal (dblock s' p) \\<in> Ballot p\n  bal (dblock s' p) = mbal (dblock s p)\n  inp (dblock s' p) \\<in> allInput s'\n  inp (dblock s' p) \\<noteq> NotAnInput\n  HEndPhase1 s s' p\n  Inv2a_innermost s p (dblock s p)\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' p (dblock s' p)", "by(auto simp add: Inv2a_innermost_def EndPhase1_def)"], ["proof (state)\nthis:\n  Inv2a_innermost s' p (dblock s' p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma HEndPhase1_Inv2a_dblock_q:\n  assumes act: \"HEndPhase1 s s' p\"\n  and inv1: \"HInv1 s\"\n  and inv: \"Inv2a s\"\n  and inv2c: \"Inv2c_inner s p\"\n  shows \"Inv2a_innermost s' q (dblock s' q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inv2a_innermost s' q (dblock s' q)", "proof(cases \"p=q\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)\n 2. p \\<noteq> q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)", "case True"], ["proof (state)\nthis:\n  p = q\n\ngoal (2 subgoals):\n 1. p = q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)\n 2. p \\<noteq> q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)", "with act inv inv2c inv1"], ["proof (chain)\npicking this:\n  HEndPhase1 s s' p\n  Inv2a s\n  Inv2c_inner s p\n  HInv1 s\n  p = q", "show ?thesis"], ["proof (prove)\nusing this:\n  HEndPhase1 s s' p\n  Inv2a s\n  Inv2c_inner s p\n  HInv1 s\n  p = q\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' q (dblock s' q)", "by(blast dest: HEndPhase1_Inv2a_dblock)"], ["proof (state)\nthis:\n  Inv2a_innermost s' q (dblock s' q)\n\ngoal (1 subgoal):\n 1. p \\<noteq> q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)", "case False"], ["proof (state)\nthis:\n  p \\<noteq> q\n\ngoal (1 subgoal):\n 1. p \\<noteq> q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)", "from inv"], ["proof (chain)\npicking this:\n  Inv2a s", "have inv_q_dblock: \"Inv2a_innermost s q (dblock s q)\""], ["proof (prove)\nusing this:\n  Inv2a s\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s q (dblock s q)", "by(auto simp add: Inv2a_def Inv2a_inner_def blocksOf_def)"], ["proof (state)\nthis:\n  Inv2a_innermost s q (dblock s q)\n\ngoal (1 subgoal):\n 1. p \\<noteq> q \\<Longrightarrow> Inv2a_innermost s' q (dblock s' q)", "with False act"], ["proof (chain)\npicking this:\n  p \\<noteq> q\n  HEndPhase1 s s' p\n  Inv2a_innermost s q (dblock s q)", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<noteq> q\n  HEndPhase1 s s' p\n  Inv2a_innermost s q (dblock s q)\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' q (dblock s' q)", "by(clarsimp simp add: EndPhase1_def HNextPart_def \n      InitializePhase_def Inv2a_innermost_def)"], ["proof (state)\nthis:\n  Inv2a_innermost s' q (dblock s' q)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem HEndPhase1_Inv2a:\n  assumes act: \"HEndPhase1 s s' p\"\n  and inv1: \"HInv1 s\"\n  and inv: \"Inv2a s\"\n  and inv2c: \"Inv2c_inner s p\"\n  shows \"Inv2a s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inv2a s'", "proof (clarsimp simp add: Inv2a_def Inv2a_inner_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "fix q bk"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "assume bk_in_bks: \"bk \\<in> blocksOf s' q\""], ["proof (state)\nthis:\n  bk \\<in> blocksOf s' q\n\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "with HEndPhase1_blocksOf[OF act]"], ["proof (chain)\npicking this:\n  blocksOf s' ?q \\<subseteq> blocksOf s ?q \\<union> {dblock s' ?q}\n  bk \\<in> blocksOf s' q", "have dblock_blocks: \"bk \\<in> {dblock s' q} \\<union> blocksOf s q\""], ["proof (prove)\nusing this:\n  blocksOf s' ?q \\<subseteq> blocksOf s ?q \\<union> {dblock s' ?q}\n  bk \\<in> blocksOf s' q\n\ngoal (1 subgoal):\n 1. bk \\<in> {dblock s' q} \\<union> blocksOf s q", "by blast"], ["proof (state)\nthis:\n  bk \\<in> {dblock s' q} \\<union> blocksOf s q\n\ngoal (1 subgoal):\n 1. \\<And>p bk.\n       bk \\<in> blocksOf s' p \\<Longrightarrow> Inv2a_innermost s' p bk", "thus \"Inv2a_innermost s' q bk\""], ["proof (prove)\nusing this:\n  bk \\<in> {dblock s' q} \\<union> blocksOf s q\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' q bk", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. bk \\<in> {dblock s' q} \\<Longrightarrow> Inv2a_innermost s' q bk\n 2. bk \\<in> blocksOf s q \\<Longrightarrow> Inv2a_innermost s' q bk", "assume \"bk \\<in> {dblock s' q}\""], ["proof (state)\nthis:\n  bk \\<in> {dblock s' q}\n\ngoal (2 subgoals):\n 1. bk \\<in> {dblock s' q} \\<Longrightarrow> Inv2a_innermost s' q bk\n 2. bk \\<in> blocksOf s q \\<Longrightarrow> Inv2a_innermost s' q bk", "with act inv1 inv2c inv"], ["proof (chain)\npicking this:\n  HEndPhase1 s s' p\n  HInv1 s\n  Inv2c_inner s p\n  Inv2a s\n  bk \\<in> {dblock s' q}", "show ?thesis"], ["proof (prove)\nusing this:\n  HEndPhase1 s s' p\n  HInv1 s\n  Inv2c_inner s p\n  Inv2a s\n  bk \\<in> {dblock s' q}\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' q bk", "by(blast dest: HEndPhase1_Inv2a_dblock_q)"], ["proof (state)\nthis:\n  Inv2a_innermost s' q bk\n\ngoal (1 subgoal):\n 1. bk \\<in> blocksOf s q \\<Longrightarrow> Inv2a_innermost s' q bk", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. bk \\<in> blocksOf s q \\<Longrightarrow> Inv2a_innermost s' q bk", "assume bk_in_blocks: \"bk \\<in> blocksOf s q\""], ["proof (state)\nthis:\n  bk \\<in> blocksOf s q\n\ngoal (1 subgoal):\n 1. bk \\<in> blocksOf s q \\<Longrightarrow> Inv2a_innermost s' q bk", "with inv"], ["proof (chain)\npicking this:\n  Inv2a s\n  bk \\<in> blocksOf s q", "have \"Inv2a_innermost s q bk\""], ["proof (prove)\nusing this:\n  Inv2a s\n  bk \\<in> blocksOf s q\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s q bk", "by(auto simp add: Inv2a_def Inv2a_inner_def)"], ["proof (state)\nthis:\n  Inv2a_innermost s q bk\n\ngoal (1 subgoal):\n 1. bk \\<in> blocksOf s q \\<Longrightarrow> Inv2a_innermost s' q bk", "with act"], ["proof (chain)\npicking this:\n  HEndPhase1 s s' p\n  Inv2a_innermost s q bk", "show ?thesis"], ["proof (prove)\nusing this:\n  HEndPhase1 s s' p\n  Inv2a_innermost s q bk\n\ngoal (1 subgoal):\n 1. Inv2a_innermost s' q bk", "by(auto simp add: EndPhase1_def HNextPart_def\n          InitializePhase_def Inv2a_innermost_def)"], ["proof (state)\nthis:\n  Inv2a_innermost s' q bk\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Inv2a_innermost s' q bk\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Proofs of Invariant 2 b\\<close>"], ["", "text\\<open>\nInvariant 2b is proved automatically, given that \nwe expand the definitions involved.\n\\<close>"], ["", "theorem HInit_Inv2b: \"HInit s \\<longrightarrow> Inv2b s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HInit s \\<longrightarrow> Inv2b s", "by (auto simp add: HInit_def Init_def Inv2b_def \n                   Inv2b_inner_def InitDB_def)"], ["", "theorem HPhase1or2ReadThen_Inv2b:\n  \"\\<lbrakk> Inv2b s; HPhase1or2ReadThen s s' p d q \\<rbrakk>\n   \\<Longrightarrow> Inv2b s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Inv2b s; HPhase1or2ReadThen s s' p d q\\<rbrakk>\n    \\<Longrightarrow> Inv2b s'", "by (auto simp add: Phase1or2ReadThen_def Inv2b_def\n                   Inv2b_inner_def hasRead_def)"], ["", "theorem HStartBallot_Inv2b:\n  \"\\<lbrakk> Inv2b s; HStartBallot s s' p \\<rbrakk>\n   \\<Longrightarrow> Inv2b s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Inv2b s; HStartBallot s s' p\\<rbrakk>\n    \\<Longrightarrow> Inv2b s'", "by(auto simp add:StartBallot_def InitializePhase_def\n                   Inv2b_def Inv2b_inner_def hasRead_def)"], ["", "theorem HPhase1or2Write_Inv2b:\n  \"\\<lbrakk> Inv2b s; HPhase1or2Write s s' p d \\<rbrakk>\n   \\<Longrightarrow> Inv2b s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Inv2b s; HPhase1or2Write s s' p d\\<rbrakk>\n    \\<Longrightarrow> Inv2b s'", "by(auto simp add: Phase1or2Write_def Inv2b_def\n                    Inv2b_inner_def hasRead_def)"], ["", "theorem HPhase1or2ReadElse_Inv2b:\n  \"\\<lbrakk> Inv2b s; HPhase1or2ReadElse s s' p d q \\<rbrakk>\n   \\<Longrightarrow> Inv2b s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Inv2b s; HPhase1or2ReadElse s s' p d q\\<rbrakk>\n    \\<Longrightarrow> Inv2b s'", "by (auto simp add: Phase1or2ReadElse_def StartBallot_def hasRead_def\n                   InitializePhase_def Inv2b_def Inv2b_inner_def)"], ["", "theorem HEndPhase1_Inv2b:\n  \"\\<lbrakk> Inv2b s; HEndPhase1 s s' p \\<rbrakk> \\<Longrightarrow> Inv2b s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Inv2b s; HEndPhase1 s s' p\\<rbrakk> \\<Longrightarrow> Inv2b s'", "by (auto simp add: EndPhase1_def InitializePhase_def \n                   Inv2b_def Inv2b_inner_def hasRead_def)"], ["", "theorem HFail_Inv2b:\n  \"\\<lbrakk> Inv2b s; HFail s s' p \\<rbrakk>\n   \\<Longrightarrow> Inv2b s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Inv2b s; HFail s s' p\\<rbrakk> \\<Longrightarrow> Inv2b s'", "by (auto simp add: Fail_def InitializePhase_def\n                   Inv2b_def Inv2b_inner_def hasRead_def)"], ["", "theorem HEndPhase2_Inv2b:\n  \"\\<lbrakk> Inv2b s; HEndPhase2 s s' p \\<rbrakk> \\<Longrightarrow> Inv2b s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Inv2b s; HEndPhase2 s s' p\\<rbrakk> \\<Longrightarrow> Inv2b s'", "by (auto simp add: EndPhase2_def InitializePhase_def \n                   Inv2b_def Inv2b_inner_def hasRead_def)"], ["", "theorem HPhase0Read_Inv2b:\n  \"\\<lbrakk> Inv2b s; HPhase0Read s s' p d \\<rbrakk> \\<Longrightarrow> Inv2b s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Inv2b s; HPhase0Read s s' p d\\<rbrakk>\n    \\<Longrightarrow> Inv2b s'", "by (auto simp add: Phase0Read_def Inv2b_def \n                   Inv2b_inner_def hasRead_def)"], ["", "theorem HEndPhase0_Inv2b:\n  \"\\<lbrakk> Inv2b s; HEndPhase0 s s' p \\<rbrakk> \\<Longrightarrow> Inv2b s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Inv2b s; HEndPhase0 s s' p\\<rbrakk> \\<Longrightarrow> Inv2b s'", "by (auto simp add: EndPhase0_def InitializePhase_def \n                   Inv2b_def Inv2b_inner_def hasRead_def)"], ["", "subsubsection \\<open>Proofs of Invariant 2 c\\<close>"], ["", "theorem HInit_Inv2c: \"HInit s \\<longrightarrow> Inv2c s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HInit s \\<longrightarrow> Inv2c s", "by (auto simp add: HInit_def Init_def Inv2c_def Inv2c_inner_def)"], ["", "lemma HNextPart_Inv2c_chosen:\n  assumes  hnp: \"HNextPart s s'\"\n  and    inv2c: \"Inv2c s\"\n  and   outpt': \"\\<forall>p. outpt s' p = (if phase s' p = 3 \n                                      then inp(dblock s' p) \n                                      else NotAnInput)\"\n  and inp_dblk: \"\\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\"\n  shows  \"chosen s' \\<in> allInput s' \\<union> {NotAnInput}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chosen s' \\<in> allInput s' \\<union> {NotAnInput}", "using hnp outpt' inp_dblk inv2c"], ["proof (prove)\nusing this:\n  HNextPart s s'\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\n  Inv2c s\n\ngoal (1 subgoal):\n 1. chosen s' \\<in> allInput s' \\<union> {NotAnInput}", "proof(auto simp add: HNextPart_def Inv2c_def Inv2c_inner_def\n           split: if_split_asm)"], ["proof (state)\ngoal:\nNo subgoals!", "qed"], ["", "lemma HNextPart_chosen:\n  assumes hnp: \"HNextPart s s'\"\n  shows  \"chosen s' = NotAnInput \\<longrightarrow> (\\<forall>p. outpt s' p = NotAnInput)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chosen s' = NotAnInput \\<longrightarrow>\n    (\\<forall>p. outpt s' p = NotAnInput)", "using hnp"], ["proof (prove)\nusing this:\n  HNextPart s s'\n\ngoal (1 subgoal):\n 1. chosen s' = NotAnInput \\<longrightarrow>\n    (\\<forall>p. outpt s' p = NotAnInput)", "proof(auto simp add: HNextPart_def split: if_split_asm)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p pa.\n       \\<lbrakk>chosen s = NotAnInput; outpt s' p \\<noteq> NotAnInput;\n        chosen s' = NotAnInput;\n        allInput s' = allInput s \\<union> range (inpt s');\n        outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput) =\n        NotAnInput\\<rbrakk>\n       \\<Longrightarrow> outpt s' pa = NotAnInput", "fix p pa"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p pa.\n       \\<lbrakk>chosen s = NotAnInput; outpt s' p \\<noteq> NotAnInput;\n        chosen s' = NotAnInput;\n        allInput s' = allInput s \\<union> range (inpt s');\n        outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput) =\n        NotAnInput\\<rbrakk>\n       \\<Longrightarrow> outpt s' pa = NotAnInput", "assume o1: \"outpt s' p \\<noteq> NotAnInput\"\n  and    o2: \"outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput) = NotAnInput\""], ["proof (state)\nthis:\n  outpt s' p \\<noteq> NotAnInput\n  outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput) = NotAnInput\n\ngoal (1 subgoal):\n 1. \\<And>p pa.\n       \\<lbrakk>chosen s = NotAnInput; outpt s' p \\<noteq> NotAnInput;\n        chosen s' = NotAnInput;\n        allInput s' = allInput s \\<union> range (inpt s');\n        outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput) =\n        NotAnInput\\<rbrakk>\n       \\<Longrightarrow> outpt s' pa = NotAnInput", "from o1"], ["proof (chain)\npicking this:\n  outpt s' p \\<noteq> NotAnInput", "have \"\\<exists>p. outpt s' p \\<noteq> NotAnInput\""], ["proof (prove)\nusing this:\n  outpt s' p \\<noteq> NotAnInput\n\ngoal (1 subgoal):\n 1. \\<exists>p. outpt s' p \\<noteq> NotAnInput", "by auto"], ["proof (state)\nthis:\n  \\<exists>p. outpt s' p \\<noteq> NotAnInput\n\ngoal (1 subgoal):\n 1. \\<And>p pa.\n       \\<lbrakk>chosen s = NotAnInput; outpt s' p \\<noteq> NotAnInput;\n        chosen s' = NotAnInput;\n        allInput s' = allInput s \\<union> range (inpt s');\n        outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput) =\n        NotAnInput\\<rbrakk>\n       \\<Longrightarrow> outpt s' pa = NotAnInput", "hence \"outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput) \\<noteq> NotAnInput\""], ["proof (prove)\nusing this:\n  \\<exists>p. outpt s' p \\<noteq> NotAnInput\n\ngoal (1 subgoal):\n 1. outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput) \\<noteq> NotAnInput", "by(rule someI_ex)"], ["proof (state)\nthis:\n  outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput) \\<noteq> NotAnInput\n\ngoal (1 subgoal):\n 1. \\<And>p pa.\n       \\<lbrakk>chosen s = NotAnInput; outpt s' p \\<noteq> NotAnInput;\n        chosen s' = NotAnInput;\n        allInput s' = allInput s \\<union> range (inpt s');\n        outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput) =\n        NotAnInput\\<rbrakk>\n       \\<Longrightarrow> outpt s' pa = NotAnInput", "with o2"], ["proof (chain)\npicking this:\n  outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput) = NotAnInput\n  outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput) \\<noteq> NotAnInput", "show \"outpt s' pa = NotAnInput\""], ["proof (prove)\nusing this:\n  outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput) = NotAnInput\n  outpt s' (SOME p. outpt s' p \\<noteq> NotAnInput) \\<noteq> NotAnInput\n\ngoal (1 subgoal):\n 1. outpt s' pa = NotAnInput", "by simp"], ["proof (state)\nthis:\n  outpt s' pa = NotAnInput\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma HNextPart_allInput:\n  \"\\<lbrakk> HNextPart s s'; Inv2c s \\<rbrakk> \\<Longrightarrow> \\<forall>p. inpt s' p \\<in> allInput s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>HNextPart s s'; Inv2c s\\<rbrakk>\n    \\<Longrightarrow> \\<forall>p. inpt s' p \\<in> allInput s'", "by(auto simp add: HNextPart_def Inv2c_def Inv2c_inner_def)"], ["", "theorem HPhase1or2ReadThen_Inv2c:\n  assumes inv: \"Inv2c s\"\n  and act: \"HPhase1or2ReadThen s s' p d q\"\n  and inv2a: \"Inv2a s\"\n  shows \"Inv2c s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inv2c s'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Inv2c s'", "from inv2a act"], ["proof (chain)\npicking this:\n  Inv2a s\n  HPhase1or2ReadThen s s' p d q", "have inv2a': \"Inv2a s'\""], ["proof (prove)\nusing this:\n  Inv2a s\n  HPhase1or2ReadThen s s' p d q\n\ngoal (1 subgoal):\n 1. Inv2a s'", "by(blast dest: HPhase1or2ReadThen_Inv2a)"], ["proof (state)\nthis:\n  Inv2a s'\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from act inv"], ["proof (chain)\npicking this:\n  HPhase1or2ReadThen s s' p d q\n  Inv2c s", "have outpt': \"\\<forall>p. outpt s' p = (if phase s' p = 3 \n                                     then inp(dblock s' p) \n                                     else NotAnInput)\""], ["proof (prove)\nusing this:\n  HPhase1or2ReadThen s s' p d q\n  Inv2c s\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       outpt s' p =\n       (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)", "by(auto simp add: Phase1or2ReadThen_def Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from inv2a'"], ["proof (chain)\npicking this:\n  Inv2a s'", "have dblk: \"\\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\""], ["proof (prove)\nusing this:\n  Inv2a s'\n\ngoal (1 subgoal):\n 1. \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}", "by(auto simp add: Inv2a_def Inv2a_inner_def \n                      Inv2a_innermost_def blocksOf_def)"], ["proof (state)\nthis:\n  \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. Inv2c s'", "with act inv outpt'"], ["proof (chain)\npicking this:\n  HPhase1or2ReadThen s s' p d q\n  Inv2c s\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}", "have chosen': \"chosen s' \\<in> allInput s' \\<union> {NotAnInput}\""], ["proof (prove)\nusing this:\n  HPhase1or2ReadThen s s' p d q\n  Inv2c s\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. chosen s' \\<in> allInput s' \\<union> {NotAnInput}", "by(auto dest: HNextPart_Inv2c_chosen)"], ["proof (state)\nthis:\n  chosen s' \\<in> allInput s' \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from act inv"], ["proof (chain)\npicking this:\n  HPhase1or2ReadThen s s' p d q\n  Inv2c s", "have \"\\<forall>p.   inpt s' p \\<in> allInput s' \n            \\<and> (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)\""], ["proof (prove)\nusing this:\n  HPhase1or2ReadThen s s' p d q\n  Inv2c s\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       inpt s' p \\<in> allInput s' \\<and>\n       (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)", "by(auto dest: HNextPart_chosen HNextPart_allInput)"], ["proof (state)\nthis:\n  \\<forall>p.\n     inpt s' p \\<in> allInput s' \\<and>\n     (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)\n\ngoal (1 subgoal):\n 1. Inv2c s'", "with outpt' chosen' act inv"], ["proof (chain)\npicking this:\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  chosen s' \\<in> allInput s' \\<union> {NotAnInput}\n  HPhase1or2ReadThen s s' p d q\n  Inv2c s\n  \\<forall>p.\n     inpt s' p \\<in> allInput s' \\<and>\n     (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  chosen s' \\<in> allInput s' \\<union> {NotAnInput}\n  HPhase1or2ReadThen s s' p d q\n  Inv2c s\n  \\<forall>p.\n     inpt s' p \\<in> allInput s' \\<and>\n     (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)\n\ngoal (1 subgoal):\n 1. Inv2c s'", "by(auto simp add: Phase1or2ReadThen_def Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  Inv2c s'\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem HStartBallot_Inv2c:\n  assumes inv: \"Inv2c s\"\n  and act: \"HStartBallot s s' p\"\n  and inv2a: \"Inv2a s\"\n  shows \"Inv2c s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inv2c s'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Inv2c s'", "from act"], ["proof (chain)\npicking this:\n  HStartBallot s s' p", "have phase': \"phase s' p = 1\""], ["proof (prove)\nusing this:\n  HStartBallot s s' p\n\ngoal (1 subgoal):\n 1. phase s' p = 1", "by(simp add: StartBallot_def)"], ["proof (state)\nthis:\n  phase s' p = 1\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from act"], ["proof (chain)\npicking this:\n  HStartBallot s s' p", "have phase: \"phase s p \\<in> {1,2}\""], ["proof (prove)\nusing this:\n  HStartBallot s s' p\n\ngoal (1 subgoal):\n 1. phase s p \\<in> {1, 2}", "by(simp add: StartBallot_def)"], ["proof (state)\nthis:\n  phase s p \\<in> {1, 2}\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from act inv"], ["proof (chain)\npicking this:\n  HStartBallot s s' p\n  Inv2c s", "have mbal': \"mbal(dblock s' p) \\<in> Ballot p\""], ["proof (prove)\nusing this:\n  HStartBallot s s' p\n  Inv2c s\n\ngoal (1 subgoal):\n 1. mbal (dblock s' p) \\<in> Ballot p", "by(auto simp add: StartBallot_def Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  mbal (dblock s' p) \\<in> Ballot p\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from inv phase"], ["proof (chain)\npicking this:\n  Inv2c s\n  phase s p \\<in> {1, 2}", "have \"bal(dblock s p) \\<in> Ballot p \\<union> {0}\""], ["proof (prove)\nusing this:\n  Inv2c s\n  phase s p \\<in> {1, 2}\n\ngoal (1 subgoal):\n 1. bal (dblock s p) \\<in> Ballot p \\<union> {0}", "by(auto simp add: Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  bal (dblock s p) \\<in> Ballot p \\<union> {0}\n\ngoal (1 subgoal):\n 1. Inv2c s'", "with act"], ["proof (chain)\npicking this:\n  HStartBallot s s' p\n  bal (dblock s p) \\<in> Ballot p \\<union> {0}", "have bal': \"bal(dblock s' p) \\<in> Ballot p \\<union> {0}\""], ["proof (prove)\nusing this:\n  HStartBallot s s' p\n  bal (dblock s p) \\<in> Ballot p \\<union> {0}\n\ngoal (1 subgoal):\n 1. bal (dblock s' p) \\<in> Ballot p \\<union> {0}", "by(auto simp add: StartBallot_def)"], ["proof (state)\nthis:\n  bal (dblock s' p) \\<in> Ballot p \\<union> {0}\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from act inv phase phase'"], ["proof (chain)\npicking this:\n  HStartBallot s s' p\n  Inv2c s\n  phase s p \\<in> {1, 2}\n  phase s' p = 1", "have blks': \"(\\<forall>d. \\<forall>br \\<in> blocksRead s' p d. \n                     mbal(block br) < mbal(dblock s' p))\""], ["proof (prove)\nusing this:\n  HStartBallot s s' p\n  Inv2c s\n  phase s p \\<in> {1, 2}\n  phase s' p = 1\n\ngoal (1 subgoal):\n 1. \\<forall>d.\n       \\<forall>br\\<in>blocksRead s' p d.\n          mbal (block br) < mbal (dblock s' p)", "by(auto simp add: StartBallot_def InitializePhase_def \n                      Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  \\<forall>d.\n     \\<forall>br\\<in>blocksRead s' p d. mbal (block br) < mbal (dblock s' p)\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from inv2a act"], ["proof (chain)\npicking this:\n  Inv2a s\n  HStartBallot s s' p", "have inv2a': \"Inv2a s'\""], ["proof (prove)\nusing this:\n  Inv2a s\n  HStartBallot s s' p\n\ngoal (1 subgoal):\n 1. Inv2a s'", "by(blast dest: HStartBallot_Inv2a)"], ["proof (state)\nthis:\n  Inv2a s'\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from act inv"], ["proof (chain)\npicking this:\n  HStartBallot s s' p\n  Inv2c s", "have outpt': \"\\<forall>p. outpt s' p = (if phase s' p = 3 \n                                     then inp(dblock s' p) \n                                     else NotAnInput)\""], ["proof (prove)\nusing this:\n  HStartBallot s s' p\n  Inv2c s\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       outpt s' p =\n       (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)", "by(auto simp add: StartBallot_def Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from inv2a'"], ["proof (chain)\npicking this:\n  Inv2a s'", "have dblk: \"\\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\""], ["proof (prove)\nusing this:\n  Inv2a s'\n\ngoal (1 subgoal):\n 1. \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}", "by(auto simp add: Inv2a_def Inv2a_inner_def \n                      Inv2a_innermost_def blocksOf_def)"], ["proof (state)\nthis:\n  \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. Inv2c s'", "with act inv outpt'"], ["proof (chain)\npicking this:\n  HStartBallot s s' p\n  Inv2c s\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}", "have chosen': \"chosen s' \\<in> allInput s' \\<union> {NotAnInput}\""], ["proof (prove)\nusing this:\n  HStartBallot s s' p\n  Inv2c s\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. chosen s' \\<in> allInput s' \\<union> {NotAnInput}", "by(auto dest: HNextPart_Inv2c_chosen)"], ["proof (state)\nthis:\n  chosen s' \\<in> allInput s' \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from act inv"], ["proof (chain)\npicking this:\n  HStartBallot s s' p\n  Inv2c s", "have allinp: \"\\<forall>p.   inpt s' p \\<in> allInput s' \n                    \\<and> (chosen s' = NotAnInput \n                              \\<longrightarrow> outpt s' p = NotAnInput)\""], ["proof (prove)\nusing this:\n  HStartBallot s s' p\n  Inv2c s\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       inpt s' p \\<in> allInput s' \\<and>\n       (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)", "by(auto dest: HNextPart_chosen HNextPart_allInput)"], ["proof (state)\nthis:\n  \\<forall>p.\n     inpt s' p \\<in> allInput s' \\<and>\n     (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)\n\ngoal (1 subgoal):\n 1. Inv2c s'", "with phase' mbal' bal' outpt' chosen' act inv blks'"], ["proof (chain)\npicking this:\n  phase s' p = 1\n  mbal (dblock s' p) \\<in> Ballot p\n  bal (dblock s' p) \\<in> Ballot p \\<union> {0}\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  chosen s' \\<in> allInput s' \\<union> {NotAnInput}\n  HStartBallot s s' p\n  Inv2c s\n  \\<forall>d.\n     \\<forall>br\\<in>blocksRead s' p d. mbal (block br) < mbal (dblock s' p)\n  \\<forall>p.\n     inpt s' p \\<in> allInput s' \\<and>\n     (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)", "show ?thesis"], ["proof (prove)\nusing this:\n  phase s' p = 1\n  mbal (dblock s' p) \\<in> Ballot p\n  bal (dblock s' p) \\<in> Ballot p \\<union> {0}\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  chosen s' \\<in> allInput s' \\<union> {NotAnInput}\n  HStartBallot s s' p\n  Inv2c s\n  \\<forall>d.\n     \\<forall>br\\<in>blocksRead s' p d. mbal (block br) < mbal (dblock s' p)\n  \\<forall>p.\n     inpt s' p \\<in> allInput s' \\<and>\n     (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)\n\ngoal (1 subgoal):\n 1. Inv2c s'", "by(auto simp add: StartBallot_def InitializePhase_def \n                    Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  Inv2c s'\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem HPhase1or2Write_Inv2c:\n  assumes inv: \"Inv2c s\"\n  and act: \"HPhase1or2Write s s' p d\"\n  and inv2a: \"Inv2a s\"\n  shows \"Inv2c s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inv2c s'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Inv2c s'", "from inv2a act"], ["proof (chain)\npicking this:\n  Inv2a s\n  HPhase1or2Write s s' p d", "have inv2a': \"Inv2a s'\""], ["proof (prove)\nusing this:\n  Inv2a s\n  HPhase1or2Write s s' p d\n\ngoal (1 subgoal):\n 1. Inv2a s'", "by(blast dest: HPhase1or2Write_Inv2a)"], ["proof (state)\nthis:\n  Inv2a s'\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from act inv"], ["proof (chain)\npicking this:\n  HPhase1or2Write s s' p d\n  Inv2c s", "have outpt': \"\\<forall>p. outpt s' p = (if phase s' p = 3 \n                                     then inp(dblock s' p) \n                                     else NotAnInput)\""], ["proof (prove)\nusing this:\n  HPhase1or2Write s s' p d\n  Inv2c s\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       outpt s' p =\n       (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)", "by(auto simp add: Phase1or2Write_def Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from inv2a'"], ["proof (chain)\npicking this:\n  Inv2a s'", "have dblk: \"\\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\""], ["proof (prove)\nusing this:\n  Inv2a s'\n\ngoal (1 subgoal):\n 1. \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}", "by(auto simp add: Inv2a_def Inv2a_inner_def \n                      Inv2a_innermost_def blocksOf_def)"], ["proof (state)\nthis:\n  \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. Inv2c s'", "with act inv outpt'"], ["proof (chain)\npicking this:\n  HPhase1or2Write s s' p d\n  Inv2c s\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}", "have chosen': \"chosen s' \\<in> allInput s' \\<union> {NotAnInput}\""], ["proof (prove)\nusing this:\n  HPhase1or2Write s s' p d\n  Inv2c s\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. chosen s' \\<in> allInput s' \\<union> {NotAnInput}", "by(auto dest: HNextPart_Inv2c_chosen)"], ["proof (state)\nthis:\n  chosen s' \\<in> allInput s' \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from act inv"], ["proof (chain)\npicking this:\n  HPhase1or2Write s s' p d\n  Inv2c s", "have allinp: \"\\<forall>p. inpt s' p \\<in> allInput s' \\<and> (chosen s' = NotAnInput \n                     \\<longrightarrow> outpt s' p = NotAnInput)\""], ["proof (prove)\nusing this:\n  HPhase1or2Write s s' p d\n  Inv2c s\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       inpt s' p \\<in> allInput s' \\<and>\n       (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)", "by(auto dest: HNextPart_chosen HNextPart_allInput)"], ["proof (state)\nthis:\n  \\<forall>p.\n     inpt s' p \\<in> allInput s' \\<and>\n     (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)\n\ngoal (1 subgoal):\n 1. Inv2c s'", "with outpt' chosen' act inv"], ["proof (chain)\npicking this:\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  chosen s' \\<in> allInput s' \\<union> {NotAnInput}\n  HPhase1or2Write s s' p d\n  Inv2c s\n  \\<forall>p.\n     inpt s' p \\<in> allInput s' \\<and>\n     (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  chosen s' \\<in> allInput s' \\<union> {NotAnInput}\n  HPhase1or2Write s s' p d\n  Inv2c s\n  \\<forall>p.\n     inpt s' p \\<in> allInput s' \\<and>\n     (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)\n\ngoal (1 subgoal):\n 1. Inv2c s'", "by(auto simp add: Phase1or2Write_def Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  Inv2c s'\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem HPhase1or2ReadElse_Inv2c:\n  \" \\<lbrakk> Inv2c s; HPhase1or2ReadElse s s' p d q; Inv2a s \\<rbrakk> \\<Longrightarrow> Inv2c s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Inv2c s; HPhase1or2ReadElse s s' p d q; Inv2a s\\<rbrakk>\n    \\<Longrightarrow> Inv2c s'", "by(auto simp add: Phase1or2ReadElse_def dest: HStartBallot_Inv2c)"], ["", "theorem HEndPhase1_Inv2c:\n  assumes inv: \"Inv2c s\"\n  and act: \"HEndPhase1 s s' p\"\n  and inv2a: \"Inv2a s\"\n  and inv1: \"HInv1 s\"\n  shows \"Inv2c s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inv2c s'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Inv2c s'", "from inv"], ["proof (chain)\npicking this:\n  Inv2c s", "have \"Inv2c_inner s p\""], ["proof (prove)\nusing this:\n  Inv2c s\n\ngoal (1 subgoal):\n 1. Inv2c_inner s p", "by (auto simp add: Inv2c_def)"], ["proof (state)\nthis:\n  Inv2c_inner s p\n\ngoal (1 subgoal):\n 1. Inv2c s'", "with inv2a act inv1"], ["proof (chain)\npicking this:\n  Inv2a s\n  HEndPhase1 s s' p\n  HInv1 s\n  Inv2c_inner s p", "have inv2a': \"Inv2a s'\""], ["proof (prove)\nusing this:\n  Inv2a s\n  HEndPhase1 s s' p\n  HInv1 s\n  Inv2c_inner s p\n\ngoal (1 subgoal):\n 1. Inv2a s'", "by(blast dest: HEndPhase1_Inv2a)"], ["proof (state)\nthis:\n  Inv2a s'\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from act inv"], ["proof (chain)\npicking this:\n  HEndPhase1 s s' p\n  Inv2c s", "have mbal': \"mbal(dblock s' p) \\<in> Ballot p\""], ["proof (prove)\nusing this:\n  HEndPhase1 s s' p\n  Inv2c s\n\ngoal (1 subgoal):\n 1. mbal (dblock s' p) \\<in> Ballot p", "by(auto simp add: EndPhase1_def Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  mbal (dblock s' p) \\<in> Ballot p\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from act"], ["proof (chain)\npicking this:\n  HEndPhase1 s s' p", "have bal': \"bal(dblock s' p) = mbal (dblock s' p)\""], ["proof (prove)\nusing this:\n  HEndPhase1 s s' p\n\ngoal (1 subgoal):\n 1. bal (dblock s' p) = mbal (dblock s' p)", "by(auto simp add: EndPhase1_def)"], ["proof (state)\nthis:\n  bal (dblock s' p) = mbal (dblock s' p)\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from act inv"], ["proof (chain)\npicking this:\n  HEndPhase1 s s' p\n  Inv2c s", "have blks': \"(\\<forall>d. \\<forall>br \\<in> blocksRead s' p d. \n                        mbal(block br) < mbal(dblock s' p))\""], ["proof (prove)\nusing this:\n  HEndPhase1 s s' p\n  Inv2c s\n\ngoal (1 subgoal):\n 1. \\<forall>d.\n       \\<forall>br\\<in>blocksRead s' p d.\n          mbal (block br) < mbal (dblock s' p)", "by(auto simp add: EndPhase1_def InitializePhase_def \n                      Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  \\<forall>d.\n     \\<forall>br\\<in>blocksRead s' p d. mbal (block br) < mbal (dblock s' p)\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from act inv"], ["proof (chain)\npicking this:\n  HEndPhase1 s s' p\n  Inv2c s", "have outpt': \"\\<forall>p. outpt s' p = (if phase s' p = 3 \n                                     then inp(dblock s' p) \n                                     else NotAnInput)\""], ["proof (prove)\nusing this:\n  HEndPhase1 s s' p\n  Inv2c s\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       outpt s' p =\n       (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)", "by(auto simp add: EndPhase1_def Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from inv2a'"], ["proof (chain)\npicking this:\n  Inv2a s'", "have dblk: \"\\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\""], ["proof (prove)\nusing this:\n  Inv2a s'\n\ngoal (1 subgoal):\n 1. \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}", "by(auto simp add: Inv2a_def Inv2a_inner_def \n                      Inv2a_innermost_def blocksOf_def)"], ["proof (state)\nthis:\n  \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. Inv2c s'", "with act inv outpt'"], ["proof (chain)\npicking this:\n  HEndPhase1 s s' p\n  Inv2c s\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}", "have chosen': \"chosen s' \\<in> allInput s' \\<union> {NotAnInput}\""], ["proof (prove)\nusing this:\n  HEndPhase1 s s' p\n  Inv2c s\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. chosen s' \\<in> allInput s' \\<union> {NotAnInput}", "by(auto dest: HNextPart_Inv2c_chosen)"], ["proof (state)\nthis:\n  chosen s' \\<in> allInput s' \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from act inv"], ["proof (chain)\npicking this:\n  HEndPhase1 s s' p\n  Inv2c s", "have allinp: \"\\<forall>p.    inpt s' p \\<in> allInput s' \n                    \\<and> (chosen s' = NotAnInput \n                            \\<longrightarrow> outpt s' p = NotAnInput)\""], ["proof (prove)\nusing this:\n  HEndPhase1 s s' p\n  Inv2c s\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       inpt s' p \\<in> allInput s' \\<and>\n       (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)", "by(auto dest: HNextPart_chosen HNextPart_allInput)"], ["proof (state)\nthis:\n  \\<forall>p.\n     inpt s' p \\<in> allInput s' \\<and>\n     (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)\n\ngoal (1 subgoal):\n 1. Inv2c s'", "with mbal' bal' blks' outpt' chosen' act inv"], ["proof (chain)\npicking this:\n  mbal (dblock s' p) \\<in> Ballot p\n  bal (dblock s' p) = mbal (dblock s' p)\n  \\<forall>d.\n     \\<forall>br\\<in>blocksRead s' p d. mbal (block br) < mbal (dblock s' p)\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  chosen s' \\<in> allInput s' \\<union> {NotAnInput}\n  HEndPhase1 s s' p\n  Inv2c s\n  \\<forall>p.\n     inpt s' p \\<in> allInput s' \\<and>\n     (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)", "show ?thesis"], ["proof (prove)\nusing this:\n  mbal (dblock s' p) \\<in> Ballot p\n  bal (dblock s' p) = mbal (dblock s' p)\n  \\<forall>d.\n     \\<forall>br\\<in>blocksRead s' p d. mbal (block br) < mbal (dblock s' p)\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  chosen s' \\<in> allInput s' \\<union> {NotAnInput}\n  HEndPhase1 s s' p\n  Inv2c s\n  \\<forall>p.\n     inpt s' p \\<in> allInput s' \\<and>\n     (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)\n\ngoal (1 subgoal):\n 1. Inv2c s'", "by(auto simp add: EndPhase1_def InitializePhase_def \n                      Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  Inv2c s'\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem HEndPhase2_Inv2c:\n  assumes inv: \"Inv2c s\"\n  and act: \"HEndPhase2 s s' p\"\n  and inv2a: \"Inv2a s\"\n  shows \"Inv2c s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inv2c s'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Inv2c s'", "from inv2a act"], ["proof (chain)\npicking this:\n  Inv2a s\n  HEndPhase2 s s' p", "have inv2a': \"Inv2a s'\""], ["proof (prove)\nusing this:\n  Inv2a s\n  HEndPhase2 s s' p\n\ngoal (1 subgoal):\n 1. Inv2a s'", "by(blast dest: HEndPhase2_Inv2a)"], ["proof (state)\nthis:\n  Inv2a s'\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from act inv"], ["proof (chain)\npicking this:\n  HEndPhase2 s s' p\n  Inv2c s", "have outpt': \"\\<forall>p. outpt s' p = (if phase s' p = 3 \n                                     then inp(dblock s' p) \n                                     else NotAnInput)\""], ["proof (prove)\nusing this:\n  HEndPhase2 s s' p\n  Inv2c s\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       outpt s' p =\n       (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)", "by(auto simp add: EndPhase2_def Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from inv2a'"], ["proof (chain)\npicking this:\n  Inv2a s'", "have dblk: \"\\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\""], ["proof (prove)\nusing this:\n  Inv2a s'\n\ngoal (1 subgoal):\n 1. \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}", "by(auto simp add: Inv2a_def Inv2a_inner_def \n                      Inv2a_innermost_def blocksOf_def)"], ["proof (state)\nthis:\n  \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. Inv2c s'", "with act inv outpt'"], ["proof (chain)\npicking this:\n  HEndPhase2 s s' p\n  Inv2c s\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}", "have chosen': \"chosen s' \\<in> allInput s' \\<union> {NotAnInput}\""], ["proof (prove)\nusing this:\n  HEndPhase2 s s' p\n  Inv2c s\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. chosen s' \\<in> allInput s' \\<union> {NotAnInput}", "by(auto dest: HNextPart_Inv2c_chosen)"], ["proof (state)\nthis:\n  chosen s' \\<in> allInput s' \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from act inv"], ["proof (chain)\npicking this:\n  HEndPhase2 s s' p\n  Inv2c s", "have allinp: \"\\<forall>p.    inpt s' p \\<in> allInput s' \n                    \\<and> (chosen s' = NotAnInput\n                            \\<longrightarrow> outpt s' p = NotAnInput)\""], ["proof (prove)\nusing this:\n  HEndPhase2 s s' p\n  Inv2c s\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       inpt s' p \\<in> allInput s' \\<and>\n       (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)", "by(auto dest: HNextPart_chosen HNextPart_allInput)"], ["proof (state)\nthis:\n  \\<forall>p.\n     inpt s' p \\<in> allInput s' \\<and>\n     (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)\n\ngoal (1 subgoal):\n 1. Inv2c s'", "with outpt' chosen' act inv"], ["proof (chain)\npicking this:\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  chosen s' \\<in> allInput s' \\<union> {NotAnInput}\n  HEndPhase2 s s' p\n  Inv2c s\n  \\<forall>p.\n     inpt s' p \\<in> allInput s' \\<and>\n     (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  chosen s' \\<in> allInput s' \\<union> {NotAnInput}\n  HEndPhase2 s s' p\n  Inv2c s\n  \\<forall>p.\n     inpt s' p \\<in> allInput s' \\<and>\n     (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)\n\ngoal (1 subgoal):\n 1. Inv2c s'", "by(auto simp add: EndPhase2_def InitializePhase_def \n                      Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  Inv2c s'\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem HFail_Inv2c:\n  assumes inv: \"Inv2c s\"\n  and act: \"HFail s s' p\"\n  and inv2a: \"Inv2a s\"\n  shows \"Inv2c s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inv2c s'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Inv2c s'", "from inv2a act"], ["proof (chain)\npicking this:\n  Inv2a s\n  HFail s s' p", "have inv2a': \"Inv2a s'\""], ["proof (prove)\nusing this:\n  Inv2a s\n  HFail s s' p\n\ngoal (1 subgoal):\n 1. Inv2a s'", "by(blast dest: HFail_Inv2a)"], ["proof (state)\nthis:\n  Inv2a s'\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from act inv"], ["proof (chain)\npicking this:\n  HFail s s' p\n  Inv2c s", "have outpt': \"\\<forall>p. outpt s' p = (if phase s' p = 3 \n                                     then inp(dblock s' p) \n                                     else NotAnInput)\""], ["proof (prove)\nusing this:\n  HFail s s' p\n  Inv2c s\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       outpt s' p =\n       (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)", "by(auto simp add: Fail_def Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from inv2a'"], ["proof (chain)\npicking this:\n  Inv2a s'", "have dblk: \"\\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\""], ["proof (prove)\nusing this:\n  Inv2a s'\n\ngoal (1 subgoal):\n 1. \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}", "by(auto simp add: Inv2a_def Inv2a_inner_def \n                      Inv2a_innermost_def blocksOf_def)"], ["proof (state)\nthis:\n  \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. Inv2c s'", "with act inv outpt'"], ["proof (chain)\npicking this:\n  HFail s s' p\n  Inv2c s\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}", "have chosen': \"chosen s' \\<in> allInput s' \\<union> {NotAnInput}\""], ["proof (prove)\nusing this:\n  HFail s s' p\n  Inv2c s\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. chosen s' \\<in> allInput s' \\<union> {NotAnInput}", "by(auto dest: HNextPart_Inv2c_chosen)"], ["proof (state)\nthis:\n  chosen s' \\<in> allInput s' \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from act inv"], ["proof (chain)\npicking this:\n  HFail s s' p\n  Inv2c s", "have allinp: \"\\<forall>p. inpt s' p \\<in> allInput s' \\<and> (chosen s' = NotAnInput \n                     \\<longrightarrow> outpt s' p = NotAnInput)\""], ["proof (prove)\nusing this:\n  HFail s s' p\n  Inv2c s\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       inpt s' p \\<in> allInput s' \\<and>\n       (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)", "by(auto dest: HNextPart_chosen HNextPart_allInput)"], ["proof (state)\nthis:\n  \\<forall>p.\n     inpt s' p \\<in> allInput s' \\<and>\n     (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)\n\ngoal (1 subgoal):\n 1. Inv2c s'", "with outpt' chosen' act inv"], ["proof (chain)\npicking this:\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  chosen s' \\<in> allInput s' \\<union> {NotAnInput}\n  HFail s s' p\n  Inv2c s\n  \\<forall>p.\n     inpt s' p \\<in> allInput s' \\<and>\n     (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  chosen s' \\<in> allInput s' \\<union> {NotAnInput}\n  HFail s s' p\n  Inv2c s\n  \\<forall>p.\n     inpt s' p \\<in> allInput s' \\<and>\n     (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)\n\ngoal (1 subgoal):\n 1. Inv2c s'", "by(auto simp add: Fail_def InitializePhase_def \n                      Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  Inv2c s'\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem HPhase0Read_Inv2c:\n  assumes inv: \"Inv2c s\"\n  and act: \"HPhase0Read s s' p d\"\n  and inv2a: \"Inv2a s\"\n  shows \"Inv2c s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inv2c s'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Inv2c s'", "from inv2a act"], ["proof (chain)\npicking this:\n  Inv2a s\n  HPhase0Read s s' p d", "have inv2a': \"Inv2a s'\""], ["proof (prove)\nusing this:\n  Inv2a s\n  HPhase0Read s s' p d\n\ngoal (1 subgoal):\n 1. Inv2a s'", "by(blast dest: HPhase0Read_Inv2a)"], ["proof (state)\nthis:\n  Inv2a s'\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from act inv"], ["proof (chain)\npicking this:\n  HPhase0Read s s' p d\n  Inv2c s", "have outpt': \"\\<forall>p. outpt s' p = (if phase s' p = 3 \n                                     then inp(dblock s' p) \n                                     else NotAnInput)\""], ["proof (prove)\nusing this:\n  HPhase0Read s s' p d\n  Inv2c s\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       outpt s' p =\n       (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)", "by(auto simp add: Phase0Read_def Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from inv2a'"], ["proof (chain)\npicking this:\n  Inv2a s'", "have dblk: \"\\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\""], ["proof (prove)\nusing this:\n  Inv2a s'\n\ngoal (1 subgoal):\n 1. \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}", "by(auto simp add: Inv2a_def Inv2a_inner_def \n                      Inv2a_innermost_def blocksOf_def)"], ["proof (state)\nthis:\n  \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. Inv2c s'", "with act inv outpt'"], ["proof (chain)\npicking this:\n  HPhase0Read s s' p d\n  Inv2c s\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}", "have chosen': \"chosen s' \\<in> allInput s' \\<union> {NotAnInput}\""], ["proof (prove)\nusing this:\n  HPhase0Read s s' p d\n  Inv2c s\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. chosen s' \\<in> allInput s' \\<union> {NotAnInput}", "by(auto dest: HNextPart_Inv2c_chosen)"], ["proof (state)\nthis:\n  chosen s' \\<in> allInput s' \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from act inv"], ["proof (chain)\npicking this:\n  HPhase0Read s s' p d\n  Inv2c s", "have allinp: \"\\<forall>p.   inpt s' p \\<in> allInput s' \n                    \\<and> (chosen s' = NotAnInput \n                             \\<longrightarrow> outpt s' p = NotAnInput)\""], ["proof (prove)\nusing this:\n  HPhase0Read s s' p d\n  Inv2c s\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       inpt s' p \\<in> allInput s' \\<and>\n       (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)", "by(auto dest: HNextPart_chosen HNextPart_allInput)"], ["proof (state)\nthis:\n  \\<forall>p.\n     inpt s' p \\<in> allInput s' \\<and>\n     (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)\n\ngoal (1 subgoal):\n 1. Inv2c s'", "with outpt' chosen' act inv"], ["proof (chain)\npicking this:\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  chosen s' \\<in> allInput s' \\<union> {NotAnInput}\n  HPhase0Read s s' p d\n  Inv2c s\n  \\<forall>p.\n     inpt s' p \\<in> allInput s' \\<and>\n     (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  chosen s' \\<in> allInput s' \\<union> {NotAnInput}\n  HPhase0Read s s' p d\n  Inv2c s\n  \\<forall>p.\n     inpt s' p \\<in> allInput s' \\<and>\n     (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)\n\ngoal (1 subgoal):\n 1. Inv2c s'", "by(auto simp add: Phase0Read_def \n                      Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  Inv2c s'\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem HEndPhase0_Inv2c:\n  assumes inv: \"Inv2c s\"\n  and act: \"HEndPhase0 s s' p\"\n  and inv2a: \"Inv2a s\"\n  and inv1: \"Inv1 s\"\n  shows \"Inv2c s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inv2c s'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Inv2c s'", "from inv"], ["proof (chain)\npicking this:\n  Inv2c s", "have \"Inv2c_inner s p\""], ["proof (prove)\nusing this:\n  Inv2c s\n\ngoal (1 subgoal):\n 1. Inv2c_inner s p", "by (auto simp add: Inv2c_def)"], ["proof (state)\nthis:\n  Inv2c_inner s p\n\ngoal (1 subgoal):\n 1. Inv2c s'", "with inv2a act inv1"], ["proof (chain)\npicking this:\n  Inv2a s\n  HEndPhase0 s s' p\n  Inv1 s\n  Inv2c_inner s p", "have inv2a': \"Inv2a s'\""], ["proof (prove)\nusing this:\n  Inv2a s\n  HEndPhase0 s s' p\n  Inv1 s\n  Inv2c_inner s p\n\ngoal (1 subgoal):\n 1. Inv2a s'", "by(blast dest: HEndPhase0_Inv2a)"], ["proof (state)\nthis:\n  Inv2a s'\n\ngoal (1 subgoal):\n 1. Inv2c s'", "hence bal': \"bal(dblock s' p) \\<in> Ballot p \\<union> {0}\""], ["proof (prove)\nusing this:\n  Inv2a s'\n\ngoal (1 subgoal):\n 1. bal (dblock s' p) \\<in> Ballot p \\<union> {0}", "by(auto simp add: Inv2a_def Inv2a_inner_def \n                      Inv2a_innermost_def blocksOf_def)"], ["proof (state)\nthis:\n  bal (dblock s' p) \\<in> Ballot p \\<union> {0}\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from act inv"], ["proof (chain)\npicking this:\n  HEndPhase0 s s' p\n  Inv2c s", "have mbal': \"mbal(dblock s' p) \\<in> Ballot p\""], ["proof (prove)\nusing this:\n  HEndPhase0 s s' p\n  Inv2c s\n\ngoal (1 subgoal):\n 1. mbal (dblock s' p) \\<in> Ballot p", "by(auto simp add: EndPhase0_def Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  mbal (dblock s' p) \\<in> Ballot p\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from act inv"], ["proof (chain)\npicking this:\n  HEndPhase0 s s' p\n  Inv2c s", "have blks': \"(\\<forall>d. \\<forall>br \\<in> blocksRead s' p d. \n                         mbal(block br) < mbal(dblock s' p))\""], ["proof (prove)\nusing this:\n  HEndPhase0 s s' p\n  Inv2c s\n\ngoal (1 subgoal):\n 1. \\<forall>d.\n       \\<forall>br\\<in>blocksRead s' p d.\n          mbal (block br) < mbal (dblock s' p)", "by(auto simp add: EndPhase0_def InitializePhase_def \n                      Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  \\<forall>d.\n     \\<forall>br\\<in>blocksRead s' p d. mbal (block br) < mbal (dblock s' p)\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from act inv"], ["proof (chain)\npicking this:\n  HEndPhase0 s s' p\n  Inv2c s", "have outpt': \"\\<forall>p. outpt s' p = (if phase s' p = 3 \n                                     then inp(dblock s' p) \n                                     else NotAnInput)\""], ["proof (prove)\nusing this:\n  HEndPhase0 s s' p\n  Inv2c s\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       outpt s' p =\n       (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)", "by(auto simp add: EndPhase0_def Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from inv2a'"], ["proof (chain)\npicking this:\n  Inv2a s'", "have dblk: \"\\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\""], ["proof (prove)\nusing this:\n  Inv2a s'\n\ngoal (1 subgoal):\n 1. \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}", "by(auto simp add: Inv2a_def Inv2a_inner_def \n                      Inv2a_innermost_def blocksOf_def)"], ["proof (state)\nthis:\n  \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. Inv2c s'", "with act inv outpt'"], ["proof (chain)\npicking this:\n  HEndPhase0 s s' p\n  Inv2c s\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}", "have chosen': \"chosen s' \\<in> allInput s' \\<union> {NotAnInput}\""], ["proof (prove)\nusing this:\n  HEndPhase0 s s' p\n  Inv2c s\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  \\<forall>p. inp (dblock s' p) \\<in> allInput s' \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. chosen s' \\<in> allInput s' \\<union> {NotAnInput}", "by(auto dest: HNextPart_Inv2c_chosen)"], ["proof (state)\nthis:\n  chosen s' \\<in> allInput s' \\<union> {NotAnInput}\n\ngoal (1 subgoal):\n 1. Inv2c s'", "from act inv"], ["proof (chain)\npicking this:\n  HEndPhase0 s s' p\n  Inv2c s", "have allinp: \"\\<forall>p. inpt s' p \\<in> allInput s' \\<and> (chosen s' = NotAnInput \n                     \\<longrightarrow> outpt s' p = NotAnInput)\""], ["proof (prove)\nusing this:\n  HEndPhase0 s s' p\n  Inv2c s\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       inpt s' p \\<in> allInput s' \\<and>\n       (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)", "by(auto dest: HNextPart_chosen HNextPart_allInput )"], ["proof (state)\nthis:\n  \\<forall>p.\n     inpt s' p \\<in> allInput s' \\<and>\n     (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)\n\ngoal (1 subgoal):\n 1. Inv2c s'", "with mbal' bal' blks' outpt' chosen' act inv"], ["proof (chain)\npicking this:\n  mbal (dblock s' p) \\<in> Ballot p\n  bal (dblock s' p) \\<in> Ballot p \\<union> {0}\n  \\<forall>d.\n     \\<forall>br\\<in>blocksRead s' p d. mbal (block br) < mbal (dblock s' p)\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  chosen s' \\<in> allInput s' \\<union> {NotAnInput}\n  HEndPhase0 s s' p\n  Inv2c s\n  \\<forall>p.\n     inpt s' p \\<in> allInput s' \\<and>\n     (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)", "show ?thesis"], ["proof (prove)\nusing this:\n  mbal (dblock s' p) \\<in> Ballot p\n  bal (dblock s' p) \\<in> Ballot p \\<union> {0}\n  \\<forall>d.\n     \\<forall>br\\<in>blocksRead s' p d. mbal (block br) < mbal (dblock s' p)\n  \\<forall>p.\n     outpt s' p = (if phase s' p = 3 then inp (dblock s' p) else NotAnInput)\n  chosen s' \\<in> allInput s' \\<union> {NotAnInput}\n  HEndPhase0 s s' p\n  Inv2c s\n  \\<forall>p.\n     inpt s' p \\<in> allInput s' \\<and>\n     (chosen s' = NotAnInput \\<longrightarrow> outpt s' p = NotAnInput)\n\ngoal (1 subgoal):\n 1. Inv2c s'", "by(auto simp add: EndPhase0_def InitializePhase_def \n                      Inv2c_def Inv2c_inner_def)"], ["proof (state)\nthis:\n  Inv2c s'\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem HInit_HInv2:\n  \"HInit s \\<Longrightarrow> HInv2 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HInit s \\<Longrightarrow> HInv2 s", "using HInit_Inv2a HInit_Inv2b HInit_Inv2c"], ["proof (prove)\nusing this:\n  HInit ?s \\<longrightarrow> Inv2a ?s\n  HInit ?s \\<longrightarrow> Inv2b ?s\n  HInit ?s \\<longrightarrow> Inv2c ?s\n\ngoal (1 subgoal):\n 1. HInit s \\<Longrightarrow> HInv2 s", "by(auto simp add: HInv2_def)"], ["", "text\\<open>$HInv1 \\wedge HInv2$ is an invariant of $HNext$.\\<close>"], ["", "lemma I2b:\n  assumes nxt: \"HNext s s'\"\n  and inv: \"HInv1 s \\<and> HInv2 s\"\n  shows \"HInv2 s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HInv2 s'", "proof(auto simp add: HInv2_def)"], ["proof (state)\ngoal (3 subgoals):\n 1. Inv2a s'\n 2. Inv2b s'\n 3. Inv2c s'", "show \"Inv2a s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inv2a s'", "using assms"], ["proof (prove)\nusing this:\n  HNext s s'\n  HInv1 s \\<and> HInv2 s\n\ngoal (1 subgoal):\n 1. Inv2a s'", "by  (auto simp add: HInv2_def HNext_def Next_def,\n         auto intro: HStartBallot_Inv2a,\n         auto intro: HPhase1or2Write_Inv2a,\n         auto simp add: Phase1or2Read_def\n              intro: HPhase1or2ReadThen_Inv2a\n                     HPhase1or2ReadElse_Inv2a,\n         auto intro: HPhase0Read_Inv2a,\n         auto simp add: EndPhase1or2_def Inv2c_def\n              intro: HEndPhase1_Inv2a\n                     HEndPhase2_Inv2a,\n         auto intro: HFail_Inv2a,\n         auto simp add: HInv1_def\n              intro: HEndPhase0_Inv2a)"], ["proof (state)\nthis:\n  Inv2a s'\n\ngoal (2 subgoals):\n 1. Inv2b s'\n 2. Inv2c s'", "show \"Inv2b s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inv2b s'", "using assms"], ["proof (prove)\nusing this:\n  HNext s s'\n  HInv1 s \\<and> HInv2 s\n\ngoal (1 subgoal):\n 1. Inv2b s'", "by(auto simp add: HInv2_def HNext_def Next_def,\n       auto intro: HStartBallot_Inv2b,\n       auto intro: HPhase0Read_Inv2b,\n       auto intro: HPhase1or2Write_Inv2b,\n       auto simp add: Phase1or2Read_def\n            intro: HPhase1or2ReadThen_Inv2b\n                   HPhase1or2ReadElse_Inv2b,\n       auto simp add: EndPhase1or2_def\n            intro: HEndPhase1_Inv2b HEndPhase2_Inv2b,\n       auto intro:  HFail_Inv2b HEndPhase0_Inv2b)"], ["proof (state)\nthis:\n  Inv2b s'\n\ngoal (1 subgoal):\n 1. Inv2c s'", "show \"Inv2c s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inv2c s'", "using assms"], ["proof (prove)\nusing this:\n  HNext s s'\n  HInv1 s \\<and> HInv2 s\n\ngoal (1 subgoal):\n 1. Inv2c s'", "by(auto simp add: HInv2_def HNext_def Next_def,\n       auto intro: HStartBallot_Inv2c,\n       auto intro: HPhase0Read_Inv2c,\n       auto intro: HPhase1or2Write_Inv2c,\n       auto simp add: Phase1or2Read_def\n            intro: HPhase1or2ReadThen_Inv2c\n                   HPhase1or2ReadElse_Inv2c,\n       auto simp add: EndPhase1or2_def\n            intro: HEndPhase1_Inv2c\n                   HEndPhase2_Inv2c,\n       auto intro: HFail_Inv2c,\n       auto simp add: HInv1_def intro: HEndPhase0_Inv2c)"], ["proof (state)\nthis:\n  Inv2c s'\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}