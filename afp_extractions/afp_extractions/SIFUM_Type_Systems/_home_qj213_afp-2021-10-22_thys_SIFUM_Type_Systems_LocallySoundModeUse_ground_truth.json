{"file_name": "/home/qj213/afp-2021-10-22/thys/SIFUM_Type_Systems/LocallySoundModeUse.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/SIFUM_Type_Systems", "problem_names": ["lemma cxt_eval:\n  \"\\<lbrakk> \\<langle>cxt_to_stmt [] c, mds, mem\\<rangle> \\<leadsto> \\<langle>cxt_to_stmt [] c', mds', mem'\\<rangle> \\<rbrakk> \\<Longrightarrow>\n  \\<langle>c, mds, mem\\<rangle> \\<leadsto> \\<langle>c', mds', mem'\\<rangle>\"", "lemma update_preserves_le:\n  \"mds\\<^sub>1 \\<le> mds\\<^sub>2 \\<Longrightarrow> (mds\\<^sub>1 \\<oplus> annos) \\<le> (mds\\<^sub>2 \\<oplus> annos)\"", "lemma doesnt_read_annos:\n  \"doesnt_read c x \\<Longrightarrow> doesnt_read (c \\<otimes> annos) x\"", "lemma doesnt_modify_annos:\n  \"doesnt_modify c x \\<Longrightarrow> doesnt_modify (c \\<otimes> annos) x\"", "lemma stop_loc_reach:\n  \"\\<lbrakk> \\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>Stop, mds, mem\\<rangle> \\<rbrakk> \\<Longrightarrow>\n  c' = Stop \\<and> mds' = mds\"", "lemma stop_doesnt_access:\n  \"doesnt_modify Stop x \\<and> doesnt_read Stop x\"", "lemma skip_eval_step:\n  \"\\<langle>Skip \\<otimes> annos, mds, mem\\<rangle> \\<leadsto> \\<langle>Stop, mds \\<oplus> annos, mem\\<rangle>\"", "lemma skip_eval_elim:\n  \"\\<lbrakk> \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle> \\<leadsto> \\<langle>c', mds', mem'\\<rangle> \\<rbrakk> \\<Longrightarrow> c' = Stop \\<and> mds' = mds \\<oplus> annos \\<and> mem' = mem\"", "lemma skip_doesnt_read:\n  \"doesnt_read (Skip \\<otimes> annos) x\"", "lemma skip_doesnt_write:\n  \"doesnt_modify (Skip \\<otimes> annos) x\"", "lemma skip_loc_reach:\n  \"\\<lbrakk> \\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle> \\<rbrakk> \\<Longrightarrow>\n  (c' = Stop \\<and> mds' = (mds \\<oplus> annos)) \\<or> (c' = Skip \\<otimes> annos \\<and> mds' = mds)\"", "lemma skip_doesnt_access:\n  \"\\<lbrakk> lc \\<in> loc_reach \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle> ; lc = \\<langle>c', mds', mem'\\<rangle> \\<rbrakk> \\<Longrightarrow> doesnt_read c' x \\<and> doesnt_modify c' x\"", "lemma assign_doesnt_modify:\n  \"\\<lbrakk> x \\<noteq> y \\<rbrakk> \\<Longrightarrow> doesnt_modify ((x \\<leftarrow> e) \\<otimes> annos) y\"", "lemma assign_annos_eval:\n  \"\\<langle>(x \\<leftarrow> e) \\<otimes> annos, mds, mem\\<rangle> \\<leadsto> \\<langle>Stop, mds \\<oplus> annos, mem (x := ev\\<^sub>A mem e)\\<rangle>\"", "lemma assign_annos_eval_elim:\n  \"\\<lbrakk> \\<langle>(x \\<leftarrow> e) \\<otimes> annos, mds, mem\\<rangle> \\<leadsto> \\<langle>c', mds', mem'\\<rangle> \\<rbrakk> \\<Longrightarrow>\n  c' = Stop \\<and> mds' = mds \\<oplus> annos\"", "lemma mem_upd_commute:\n  \"\\<lbrakk> x \\<noteq> y \\<rbrakk> \\<Longrightarrow> mem (x := v\\<^sub>1, y := v\\<^sub>2) = mem (y := v\\<^sub>2, x := v\\<^sub>1)\"", "lemma assign_doesnt_read:\n  \"\\<lbrakk> y \\<notin> aexp_vars e \\<rbrakk> \\<Longrightarrow> doesnt_read ((x \\<leftarrow> e) \\<otimes> annos) y\"", "lemma assign_loc_reach:\n  \"\\<lbrakk> \\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>(x \\<leftarrow> e) \\<otimes> annos, mds, mem\\<rangle> \\<rbrakk> \\<Longrightarrow>\n  (c' = Stop \\<and> mds' = (mds \\<oplus> annos)) \\<or> (c' = (x \\<leftarrow> e) \\<otimes> annos \\<and> mds' = mds)\"", "lemma if_doesnt_modify:\n  \"doesnt_modify (If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos) x\"", "lemma vars_eval\\<^sub>B:\n  \"x \\<notin> bexp_vars e \\<Longrightarrow> ev\\<^sub>B mem e = ev\\<^sub>B (mem (x := v)) e\"", "lemma if_doesnt_read:\n  \"x \\<notin> bexp_vars e \\<Longrightarrow> doesnt_read (If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos) x\"", "lemma if_eval_true:\n  \"\\<lbrakk> ev\\<^sub>B mem e \\<rbrakk> \\<Longrightarrow>\n  \\<langle>If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos, mds, mem\\<rangle> \\<leadsto> \\<langle>c\\<^sub>1, mds \\<oplus> annos, mem\\<rangle>\"", "lemma if_eval_false:\n  \"\\<lbrakk> \\<not> ev\\<^sub>B mem e \\<rbrakk> \\<Longrightarrow>\n  \\<langle>If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos, mds, mem\\<rangle> \\<leadsto> \\<langle>c\\<^sub>2, mds \\<oplus> annos, mem\\<rangle>\"", "lemma if_eval_elim:\n  \"\\<lbrakk> \\<langle>If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos, mds, mem\\<rangle> \\<leadsto> \\<langle>c', mds', mem'\\<rangle> \\<rbrakk> \\<Longrightarrow>\n  ((c' = c\\<^sub>1 \\<and> ev\\<^sub>B mem e) \\<or> (c' = c\\<^sub>2 \\<and> \\<not> ev\\<^sub>B mem e)) \\<and> mds' = mds \\<oplus> annos \\<and> mem' = mem\"", "lemma if_eval_elim':\n  \"\\<lbrakk> \\<langle>If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<leadsto> \\<langle>c', mds', mem'\\<rangle> \\<rbrakk> \\<Longrightarrow>\n  ((c' = c\\<^sub>1 \\<and> ev\\<^sub>B mem e) \\<or> (c' = c\\<^sub>2 \\<and> \\<not> ev\\<^sub>B mem e)) \\<and> mds' = mds \\<and> mem' = mem\"", "lemma loc_reach_refl':\n  \"\\<langle>c, mds, mem\\<rangle> \\<in> loc_reach \\<langle>c, mds, mem\\<rangle>\"", "lemma if_loc_reach:\n  \"\\<lbrakk> \\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos, mds, mem\\<rangle> \\<rbrakk> \\<Longrightarrow>\n  (c' = If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and> mds' = mds) \\<or>\n  (\\<exists> mem''. \\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>c\\<^sub>1, mds \\<oplus> annos, mem''\\<rangle>) \\<or>\n  (\\<exists> mem''. \\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>c\\<^sub>2, mds \\<oplus> annos, mem''\\<rangle>)\"", "lemma if_loc_reach':\n  \"\\<lbrakk> \\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<rbrakk> \\<Longrightarrow>\n  (c' = If e c\\<^sub>1 c\\<^sub>2 \\<and> mds' = mds) \\<or>\n  (\\<exists> mem''. \\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem''\\<rangle>) \\<or>\n  (\\<exists> mem''. \\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>c\\<^sub>2, mds, mem''\\<rangle>)\"", "lemma seq_loc_reach:\n  \"\\<lbrakk> \\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>c\\<^sub>1 ;; c\\<^sub>2, mds, mem\\<rangle> \\<rbrakk> \\<Longrightarrow>\n  (\\<exists> c''. c' = c'' ;; c\\<^sub>2 \\<and> \\<langle>c'', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle>) \\<or>\n  (\\<exists> c'' mds'' mem''. \\<langle>Stop, mds'', mem''\\<rangle> \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle> \\<and> \n                      \\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>c\\<^sub>2, mds'', mem''\\<rangle>)\"", "lemma seq_doesnt_read:\n  \"\\<lbrakk> doesnt_read c x \\<rbrakk> \\<Longrightarrow> doesnt_read (c ;; c') x\"", "lemma seq_doesnt_modify:\n  \"\\<lbrakk> doesnt_modify c x \\<rbrakk> \\<Longrightarrow> doesnt_modify (c ;; c') x\"", "lemma seq_stop_elim: \"\\<langle>Stop ;; c, mds, mem\\<rangle> \\<leadsto> \\<langle>c', mds', mem'\\<rangle> \\<Longrightarrow>\n  c' = c \\<and> mds' = mds \\<and> mem' = mem\"", "lemma seq_split:\n  \"\\<lbrakk> \\<langle>Stop, mds', mem'\\<rangle> \\<in> loc_reach \\<langle>c\\<^sub>1 ;; c\\<^sub>2, mds, mem\\<rangle> \\<rbrakk> \\<Longrightarrow>\n  \\<exists> mds'' mem''. \\<langle>Stop, mds'', mem''\\<rangle> \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle> \\<and>\n                 \\<langle>Stop, mds', mem'\\<rangle> \\<in> loc_reach \\<langle>c\\<^sub>2, mds'', mem''\\<rangle>\"", "lemma while_eval:\n  \"\\<langle>While e c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto> \\<langle>(If e (c ;; While e c) Stop), mds \\<oplus> annos, mem\\<rangle>\"", "lemma while_eval':\n  \"\\<langle>While e c, mds, mem\\<rangle> \\<leadsto> \\<langle>If e (c ;; While e c) Stop, mds, mem\\<rangle>\"", "lemma while_eval_elim:\n  \"\\<lbrakk> \\<langle>While e c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto> \\<langle>c', mds', mem'\\<rangle> \\<rbrakk> \\<Longrightarrow>\n   (c' = If e (c ;; While e c) Stop \\<and> mds' = mds \\<oplus> annos \\<and> mem' = mem)\"", "lemma while_eval_elim':\n  \"\\<lbrakk> \\<langle>While e c, mds, mem\\<rangle> \\<leadsto> \\<langle>c', mds', mem'\\<rangle> \\<rbrakk> \\<Longrightarrow>\n   (c' = If e (c ;; While e c) Stop \\<and> mds' = mds \\<and> mem' = mem)\"", "lemma while_doesnt_read:\n  \"\\<lbrakk> x \\<notin> bexp_vars e \\<rbrakk> \\<Longrightarrow> doesnt_read (While e c \\<otimes> annos) x\"", "lemma while_doesnt_modify:\n  \"doesnt_modify (While e c \\<otimes> annos) x\"", "lemma disjE3:\n  \"\\<lbrakk> A \\<or> B \\<or> C ; A \\<Longrightarrow> P ; B \\<Longrightarrow> P ; C \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\"", "lemma disjE5:\n  \"\\<lbrakk> A \\<or> B \\<or> C \\<or> D \\<or> E ; A \\<Longrightarrow> P ; B \\<Longrightarrow> P ; C \\<Longrightarrow> P ; D \\<Longrightarrow> P ; E \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\"", "lemma if_doesnt_read':\n  \"x \\<notin> bexp_vars e \\<Longrightarrow> doesnt_read (If e c\\<^sub>1 c\\<^sub>2) x\"", "theorem mode_type_sound:\n  assumes typeable: \"\\<turnstile> mds\\<^sub>1 { c } mds\\<^sub>1'\"\n  assumes mode_le: \"mds\\<^sub>2 \\<le> mds\\<^sub>1\"\n  shows \"\\<forall> mem. (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle> \\<in> loc_reach \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow> mds\\<^sub>2' \\<le> mds\\<^sub>1') \\<and> \n                locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>\""], "translations": [["", "lemma cxt_eval:\n  \"\\<lbrakk> \\<langle>cxt_to_stmt [] c, mds, mem\\<rangle> \\<leadsto> \\<langle>cxt_to_stmt [] c', mds', mem'\\<rangle> \\<rbrakk> \\<Longrightarrow>\n  \\<langle>c, mds, mem\\<rangle> \\<leadsto> \\<langle>c', mds', mem'\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>cxt_to_stmt [] c, mds, mem\\<rangle> \\<leadsto>\n    \\<langle>cxt_to_stmt [] c', mds', mem'\\<rangle> \\<Longrightarrow>\n    \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n    \\<langle>c', mds', mem'\\<rangle>", "by auto"], ["", "lemma update_preserves_le:\n  \"mds\\<^sub>1 \\<le> mds\\<^sub>2 \\<Longrightarrow> (mds\\<^sub>1 \\<oplus> annos) \\<le> (mds\\<^sub>2 \\<oplus> annos)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n    mds\\<^sub>1 \\<oplus> annos \\<sqsubseteq> mds\\<^sub>2 \\<oplus> annos", "proof (induct annos arbitrary: mds\\<^sub>1 mds\\<^sub>2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>mds\\<^sub>1 mds\\<^sub>2.\n       mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n       mds\\<^sub>1 \\<oplus> [] \\<sqsubseteq> mds\\<^sub>2 \\<oplus> []\n 2. \\<And>a annos mds\\<^sub>1 mds\\<^sub>2.\n       \\<lbrakk>\\<And>mds\\<^sub>1 mds\\<^sub>2.\n                   mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n                   mds\\<^sub>1 \\<oplus> annos \\<sqsubseteq>\n                   mds\\<^sub>2 \\<oplus> annos;\n        mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> mds\\<^sub>1 \\<oplus> (a # annos) \\<sqsubseteq>\n                         mds\\<^sub>2 \\<oplus> (a # annos)", "case Nil"], ["proof (state)\nthis:\n  mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2\n\ngoal (2 subgoals):\n 1. \\<And>mds\\<^sub>1 mds\\<^sub>2.\n       mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n       mds\\<^sub>1 \\<oplus> [] \\<sqsubseteq> mds\\<^sub>2 \\<oplus> []\n 2. \\<And>a annos mds\\<^sub>1 mds\\<^sub>2.\n       \\<lbrakk>\\<And>mds\\<^sub>1 mds\\<^sub>2.\n                   mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n                   mds\\<^sub>1 \\<oplus> annos \\<sqsubseteq>\n                   mds\\<^sub>2 \\<oplus> annos;\n        mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> mds\\<^sub>1 \\<oplus> (a # annos) \\<sqsubseteq>\n                         mds\\<^sub>2 \\<oplus> (a # annos)", "thus ?case"], ["proof (prove)\nusing this:\n  mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2\n\ngoal (1 subgoal):\n 1. mds\\<^sub>1 \\<oplus> [] \\<sqsubseteq> mds\\<^sub>2 \\<oplus> []", "by simp"], ["proof (state)\nthis:\n  mds\\<^sub>1 \\<oplus> [] \\<sqsubseteq> mds\\<^sub>2 \\<oplus> []\n\ngoal (1 subgoal):\n 1. \\<And>a annos mds\\<^sub>1 mds\\<^sub>2.\n       \\<lbrakk>\\<And>mds\\<^sub>1 mds\\<^sub>2.\n                   mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n                   mds\\<^sub>1 \\<oplus> annos \\<sqsubseteq>\n                   mds\\<^sub>2 \\<oplus> annos;\n        mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> mds\\<^sub>1 \\<oplus> (a # annos) \\<sqsubseteq>\n                         mds\\<^sub>2 \\<oplus> (a # annos)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a annos mds\\<^sub>1 mds\\<^sub>2.\n       \\<lbrakk>\\<And>mds\\<^sub>1 mds\\<^sub>2.\n                   mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n                   mds\\<^sub>1 \\<oplus> annos \\<sqsubseteq>\n                   mds\\<^sub>2 \\<oplus> annos;\n        mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> mds\\<^sub>1 \\<oplus> (a # annos) \\<sqsubseteq>\n                         mds\\<^sub>2 \\<oplus> (a # annos)", "case (Cons a annos mds\\<^sub>1 mds\\<^sub>2)"], ["proof (state)\nthis:\n  ?mds\\<^sub>15 \\<sqsubseteq> ?mds\\<^sub>25 \\<Longrightarrow>\n  ?mds\\<^sub>15 \\<oplus> annos \\<sqsubseteq> ?mds\\<^sub>25 \\<oplus> annos\n  mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>a annos mds\\<^sub>1 mds\\<^sub>2.\n       \\<lbrakk>\\<And>mds\\<^sub>1 mds\\<^sub>2.\n                   mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n                   mds\\<^sub>1 \\<oplus> annos \\<sqsubseteq>\n                   mds\\<^sub>2 \\<oplus> annos;\n        mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> mds\\<^sub>1 \\<oplus> (a # annos) \\<sqsubseteq>\n                         mds\\<^sub>2 \\<oplus> (a # annos)", "hence \"update_modes a mds\\<^sub>1 \\<le> update_modes a mds\\<^sub>2\""], ["proof (prove)\nusing this:\n  ?mds\\<^sub>15 \\<sqsubseteq> ?mds\\<^sub>25 \\<Longrightarrow>\n  ?mds\\<^sub>15 \\<oplus> annos \\<sqsubseteq> ?mds\\<^sub>25 \\<oplus> annos\n  mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2\n\ngoal (1 subgoal):\n 1. update_modes a mds\\<^sub>1 \\<sqsubseteq> update_modes a mds\\<^sub>2", "by (case_tac a, auto simp: le_fun_def)"], ["proof (state)\nthis:\n  update_modes a mds\\<^sub>1 \\<sqsubseteq> update_modes a mds\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>a annos mds\\<^sub>1 mds\\<^sub>2.\n       \\<lbrakk>\\<And>mds\\<^sub>1 mds\\<^sub>2.\n                   mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n                   mds\\<^sub>1 \\<oplus> annos \\<sqsubseteq>\n                   mds\\<^sub>2 \\<oplus> annos;\n        mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> mds\\<^sub>1 \\<oplus> (a # annos) \\<sqsubseteq>\n                         mds\\<^sub>2 \\<oplus> (a # annos)", "with Cons"], ["proof (chain)\npicking this:\n  ?mds\\<^sub>15 \\<sqsubseteq> ?mds\\<^sub>25 \\<Longrightarrow>\n  ?mds\\<^sub>15 \\<oplus> annos \\<sqsubseteq> ?mds\\<^sub>25 \\<oplus> annos\n  mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2\n  update_modes a mds\\<^sub>1 \\<sqsubseteq> update_modes a mds\\<^sub>2", "show ?case"], ["proof (prove)\nusing this:\n  ?mds\\<^sub>15 \\<sqsubseteq> ?mds\\<^sub>25 \\<Longrightarrow>\n  ?mds\\<^sub>15 \\<oplus> annos \\<sqsubseteq> ?mds\\<^sub>25 \\<oplus> annos\n  mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2\n  update_modes a mds\\<^sub>1 \\<sqsubseteq> update_modes a mds\\<^sub>2\n\ngoal (1 subgoal):\n 1. mds\\<^sub>1 \\<oplus> (a # annos) \\<sqsubseteq>\n    mds\\<^sub>2 \\<oplus> (a # annos)", "by auto"], ["proof (state)\nthis:\n  mds\\<^sub>1 \\<oplus> (a # annos) \\<sqsubseteq>\n  mds\\<^sub>2 \\<oplus> (a # annos)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Annotations do not affect doesnt_read and doesnt_modify: *)"], ["", "lemma doesnt_read_annos:\n  \"doesnt_read c x \\<Longrightarrow> doesnt_read (c \\<otimes> annos) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doesnt_read c x \\<Longrightarrow> doesnt_read (c \\<otimes> annos) x", "unfolding doesnt_read_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>mds mem c' mds' mem'.\n       \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n       (\\<forall>v.\n           \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n       (\\<forall>v.\n           \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'\\<rangle>) \\<Longrightarrow>\n    \\<forall>mds mem c' mds' mem'.\n       \\<langle>c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n       (\\<forall>v.\n           \\<langle>c \\<otimes> annos, mds, mem(x := v)\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n       (\\<forall>v.\n           \\<langle>c \\<otimes> annos, mds, mem(x := v)\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'\\<rangle>)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mds mem c' mds' mem' v va.\n       \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                   \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                   (\\<forall>v.\n                       \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n                   (\\<forall>v.\n                       \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'\\<rangle>);\n        \\<langle>c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle>;\n        (\\<langle>c \\<otimes> annos, mds, mem(x := v)\\<rangle>,\n         \\<langle>c', mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w\\<rbrakk>\n       \\<Longrightarrow> \\<langle>c \\<otimes> annos, mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c', mds', mem'(x := va)\\<rangle>", "apply (induct annos)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds mem c' mds' mem' v va.\n       \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                   \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                   (\\<forall>v.\n                       \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n                   (\\<forall>v.\n                       \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'\\<rangle>);\n        \\<langle>c \\<otimes> [], mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle>;\n        (\\<langle>c \\<otimes> [], mds, mem(x := v)\\<rangle>,\n         \\<langle>c', mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w\\<rbrakk>\n       \\<Longrightarrow> \\<langle>c \\<otimes> [], mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c', mds', mem'(x := va)\\<rangle>\n 2. \\<And>a annos mds mem c' mds' mem' v va.\n       \\<lbrakk>\\<And>mds mem c' mds' mem' v va.\n                   \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                               \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n                               \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                               (\\<forall>v.\n                                   \\<langle>c, mds, mem\n                                   (x := v)\\<rangle> \\<leadsto>\n                                   \\<langle>c', mds', mem'\n                                   (x := v)\\<rangle>) \\<or>\n                               (\\<forall>v.\n                                   \\<langle>c, mds, mem\n                                   (x := v)\\<rangle> \\<leadsto>\n                                   \\<langle>c', mds', mem'\\<rangle>);\n                    \\<langle>c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n                    \\<langle>c', mds', mem'\\<rangle>;\n                    (\\<langle>c \\<otimes> annos, mds, mem(x := v)\\<rangle>,\n                     \\<langle>c', mds', mem'\\<rangle>)\n                    \\<notin> eval\\<^sub>w\\<rbrakk>\n                   \\<Longrightarrow> \\<langle>c \\<otimes> annos, mds, mem\n                                     (x := va)\\<rangle> \\<leadsto>\n                                     \\<langle>c', mds', mem'\n                                     (x := va)\\<rangle>;\n        \\<forall>mds mem c' mds' mem'.\n           \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n           (\\<forall>v.\n               \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n               \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n           (\\<forall>v.\n               \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n               \\<langle>c', mds', mem'\\<rangle>);\n        \\<langle>c \\<otimes> (a # annos), mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle>;\n        (\\<langle>c \\<otimes> (a # annos), mds, mem(x := v)\\<rangle>,\n         \\<langle>c', mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w\\<rbrakk>\n       \\<Longrightarrow> \\<langle>c \\<otimes> (a # annos), mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c', mds', mem'(x := va)\\<rangle>", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds mem c' mds' mem' v va.\n       \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                   \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                   (\\<forall>v.\n                       \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n                   (\\<forall>v.\n                       \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'\\<rangle>);\n        \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle>;\n        (\\<langle>c, mds, mem(x := v)\\<rangle>,\n         \\<langle>c', mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w\\<rbrakk>\n       \\<Longrightarrow> \\<langle>c, mds, mem(x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c', mds', mem'(x := va)\\<rangle>\n 2. \\<And>a annos mds mem c' mds' mem' v va.\n       \\<lbrakk>\\<And>mds mem c' mds' mem' v va.\n                   \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                               \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n                               \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                               (\\<forall>v.\n                                   \\<langle>c, mds, mem\n                                   (x := v)\\<rangle> \\<leadsto>\n                                   \\<langle>c', mds', mem'\n                                   (x := v)\\<rangle>) \\<or>\n                               (\\<forall>v.\n                                   \\<langle>c, mds, mem\n                                   (x := v)\\<rangle> \\<leadsto>\n                                   \\<langle>c', mds', mem'\\<rangle>);\n                    \\<langle>c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n                    \\<langle>c', mds', mem'\\<rangle>;\n                    (\\<langle>c \\<otimes> annos, mds, mem(x := v)\\<rangle>,\n                     \\<langle>c', mds', mem'\\<rangle>)\n                    \\<notin> eval\\<^sub>w\\<rbrakk>\n                   \\<Longrightarrow> \\<langle>c \\<otimes> annos, mds, mem\n                                     (x := va)\\<rangle> \\<leadsto>\n                                     \\<langle>c', mds', mem'\n                                     (x := va)\\<rangle>;\n        \\<forall>mds mem c' mds' mem'.\n           \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n           (\\<forall>v.\n               \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n               \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n           (\\<forall>v.\n               \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n               \\<langle>c', mds', mem'\\<rangle>);\n        \\<langle>c \\<otimes> (a # annos), mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle>;\n        (\\<langle>c \\<otimes> (a # annos), mds, mem(x := v)\\<rangle>,\n         \\<langle>c', mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w\\<rbrakk>\n       \\<Longrightarrow> \\<langle>c \\<otimes> (a # annos), mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c', mds', mem'(x := va)\\<rangle>", "apply (metis (lifting))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a annos mds mem c' mds' mem' v va.\n       \\<lbrakk>\\<And>mds mem c' mds' mem' v va.\n                   \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                               \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n                               \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                               (\\<forall>v.\n                                   \\<langle>c, mds, mem\n                                   (x := v)\\<rangle> \\<leadsto>\n                                   \\<langle>c', mds', mem'\n                                   (x := v)\\<rangle>) \\<or>\n                               (\\<forall>v.\n                                   \\<langle>c, mds, mem\n                                   (x := v)\\<rangle> \\<leadsto>\n                                   \\<langle>c', mds', mem'\\<rangle>);\n                    \\<langle>c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n                    \\<langle>c', mds', mem'\\<rangle>;\n                    (\\<langle>c \\<otimes> annos, mds, mem(x := v)\\<rangle>,\n                     \\<langle>c', mds', mem'\\<rangle>)\n                    \\<notin> eval\\<^sub>w\\<rbrakk>\n                   \\<Longrightarrow> \\<langle>c \\<otimes> annos, mds, mem\n                                     (x := va)\\<rangle> \\<leadsto>\n                                     \\<langle>c', mds', mem'\n                                     (x := va)\\<rangle>;\n        \\<forall>mds mem c' mds' mem'.\n           \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n           (\\<forall>v.\n               \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n               \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n           (\\<forall>v.\n               \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n               \\<langle>c', mds', mem'\\<rangle>);\n        \\<langle>c \\<otimes> (a # annos), mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle>;\n        (\\<langle>c \\<otimes> (a # annos), mds, mem(x := v)\\<rangle>,\n         \\<langle>c', mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w\\<rbrakk>\n       \\<Longrightarrow> \\<langle>c \\<otimes> (a # annos), mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c', mds', mem'(x := va)\\<rangle>", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a annos mds mem c' mds' mem' v va.\n       \\<lbrakk>\\<And>mds mem c' mds' mem' v va.\n                   \\<lbrakk>\\<langle>c \\<otimes>\n                                     annos, mds, mem\\<rangle> \\<leadsto>\n                            \\<langle>c', mds', mem'\\<rangle>;\n                    (\\<langle>c \\<otimes> annos, mds, mem(x := v)\\<rangle>,\n                     \\<langle>c', mds', mem'\\<rangle>)\n                    \\<notin> eval\\<^sub>w\\<rbrakk>\n                   \\<Longrightarrow> \\<langle>c \\<otimes> annos, mds, mem\n                                     (x := va)\\<rangle> \\<leadsto>\n                                     \\<langle>c', mds', mem'\n                                     (x := va)\\<rangle>;\n        \\<forall>mds mem c' mds' mem'.\n           \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n           (\\<forall>v.\n               \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n               \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n           (\\<forall>v.\n               \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n               \\<langle>c', mds', mem'\\<rangle>);\n        \\<langle>c \\<otimes> annos@[a], mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle>;\n        (\\<langle>c \\<otimes> annos@[a], mds, mem(x := v)\\<rangle>,\n         \\<langle>c', mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w\\<rbrakk>\n       \\<Longrightarrow> \\<langle>c \\<otimes> annos@[a], mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c', mds', mem'(x := va)\\<rangle>", "apply (rule cxt_eval)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a annos mds mem c' mds' mem' v va.\n       \\<lbrakk>\\<And>mds mem c' mds' mem' v va.\n                   \\<lbrakk>\\<langle>c \\<otimes>\n                                     annos, mds, mem\\<rangle> \\<leadsto>\n                            \\<langle>c', mds', mem'\\<rangle>;\n                    (\\<langle>c \\<otimes> annos, mds, mem(x := v)\\<rangle>,\n                     \\<langle>c', mds', mem'\\<rangle>)\n                    \\<notin> eval\\<^sub>w\\<rbrakk>\n                   \\<Longrightarrow> \\<langle>c \\<otimes> annos, mds, mem\n                                     (x := va)\\<rangle> \\<leadsto>\n                                     \\<langle>c', mds', mem'\n                                     (x := va)\\<rangle>;\n        \\<forall>mds mem c' mds' mem'.\n           \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n           (\\<forall>v.\n               \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n               \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n           (\\<forall>v.\n               \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n               \\<langle>c', mds', mem'\\<rangle>);\n        \\<langle>c \\<otimes> annos@[a], mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle>;\n        (\\<langle>c \\<otimes> annos@[a], mds, mem(x := v)\\<rangle>,\n         \\<langle>c', mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w\\<rbrakk>\n       \\<Longrightarrow> \\<langle>cxt_to_stmt []\n                                   (c \\<otimes> annos@[a]), mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>cxt_to_stmt [] c', mds', mem'\n                         (x := va)\\<rangle>", "apply (rule eval\\<^sub>w.decl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a annos mds mem c' mds' mem' v va.\n       \\<lbrakk>\\<And>mds mem c' mds' mem' v va.\n                   \\<lbrakk>\\<langle>c \\<otimes>\n                                     annos, mds, mem\\<rangle> \\<leadsto>\n                            \\<langle>c', mds', mem'\\<rangle>;\n                    (\\<langle>c \\<otimes> annos, mds, mem(x := v)\\<rangle>,\n                     \\<langle>c', mds', mem'\\<rangle>)\n                    \\<notin> eval\\<^sub>w\\<rbrakk>\n                   \\<Longrightarrow> \\<langle>c \\<otimes> annos, mds, mem\n                                     (x := va)\\<rangle> \\<leadsto>\n                                     \\<langle>c', mds', mem'\n                                     (x := va)\\<rangle>;\n        \\<forall>mds mem c' mds' mem'.\n           \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n           (\\<forall>v.\n               \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n               \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n           (\\<forall>v.\n               \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n               \\<langle>c', mds', mem'\\<rangle>);\n        \\<langle>c \\<otimes> annos@[a], mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle>;\n        (\\<langle>c \\<otimes> annos@[a], mds, mem(x := v)\\<rangle>,\n         \\<langle>c', mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w\\<rbrakk>\n       \\<Longrightarrow> \\<langle>c \\<otimes> annos, update_modes a mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c', mds', mem'(x := va)\\<rangle>", "by (metis cxt_eval eval\\<^sub>w.decl upd_elim)"], ["", "lemma doesnt_modify_annos:\n  \"doesnt_modify c x \\<Longrightarrow> doesnt_modify (c \\<otimes> annos) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doesnt_modify c x \\<Longrightarrow> doesnt_modify (c \\<otimes> annos) x", "unfolding doesnt_modify_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>mds mem c' mds' mem'.\n       \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n       mem x = mem' x \\<Longrightarrow>\n    \\<forall>mds mem c' mds' mem'.\n       \\<langle>c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n       mem x = mem' x", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mds mem c' mds' mem'.\n       \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                   \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                   mem x = mem' x;\n        \\<langle>c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> mem x = mem' x", "apply (induct annos)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds mem c' mds' mem'.\n       \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                   \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                   mem x = mem' x;\n        \\<langle>c \\<otimes> [], mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> mem x = mem' x\n 2. \\<And>a annos mds mem c' mds' mem'.\n       \\<lbrakk>\\<And>mds mem c' mds' mem'.\n                   \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                               \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n                               \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                               mem x = mem' x;\n                    \\<langle>c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n                    \\<langle>c', mds', mem'\\<rangle>\\<rbrakk>\n                   \\<Longrightarrow> mem x = mem' x;\n        \\<forall>mds mem c' mds' mem'.\n           \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n           mem x = mem' x;\n        \\<langle>c \\<otimes> (a # annos), mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> mem x = mem' x", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a annos mds mem c' mds' mem'.\n       \\<lbrakk>\\<And>mds mem c' mds' mem'.\n                   \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                               \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n                               \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                               mem x = mem' x;\n                    \\<langle>c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n                    \\<langle>c', mds', mem'\\<rangle>\\<rbrakk>\n                   \\<Longrightarrow> mem x = mem' x;\n        \\<forall>mds mem c' mds' mem'.\n           \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n           mem x = mem' x;\n        \\<langle>c \\<otimes> (a # annos), mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> mem x = mem' x", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a annos mds mem c' mds' mem'.\n       \\<lbrakk>\\<And>mds mem c' mds' mem'.\n                   \\<langle>c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c', mds', mem'\\<rangle> \\<Longrightarrow>\n                   mem x = mem' x;\n        \\<forall>mds mem c' mds' mem'.\n           \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n           mem x = mem' x;\n        \\<langle>c \\<otimes> annos@[a], mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> mem x = mem' x", "by (metis (lifting) upd_elim)"], ["", "(* The following part contains some lemmas about evaluation of\n   commands annotated using \\<otimes> and characterisations of loc_reach for\n   commands. *)"], ["", "lemma stop_loc_reach:\n  \"\\<lbrakk> \\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>Stop, mds, mem\\<rangle> \\<rbrakk> \\<Longrightarrow>\n  c' = Stop \\<and> mds' = mds\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>c', mds', mem'\\<rangle>\n    \\<in> loc_reach \\<langle>Stop, mds, mem\\<rangle> \\<Longrightarrow>\n    c' = Stop \\<and> mds' = mds", "apply (induct rule: loc_reach.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. fst (fst \\<langle>Stop, mds, mem\\<rangle>) = Stop \\<and>\n    snd (fst \\<langle>Stop, mds, mem\\<rangle>) = mds\n 2. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach \\<langle>Stop, mds, mem\\<rangle>;\n        c' = Stop \\<and> mds' = mds;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> c'' = Stop \\<and> mds'' = mds\n 3. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach \\<langle>Stop, mds, mem\\<rangle>;\n        c' = Stop \\<and> mds' = mds;\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' = Stop \\<and> mds' = mds", "by (auto simp: stop_no_eval)"], ["", "lemma stop_doesnt_access:\n  \"doesnt_modify Stop x \\<and> doesnt_read Stop x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doesnt_modify Stop x \\<and> doesnt_read Stop x", "unfolding doesnt_modify_def and doesnt_read_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>mds mem c' mds' mem'.\n        \\<langle>Stop, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n        mem x = mem' x) \\<and>\n    (\\<forall>mds mem c' mds' mem'.\n        \\<langle>Stop, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n        (\\<forall>v.\n            \\<langle>Stop, mds, mem(x := v)\\<rangle> \\<leadsto>\n            \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n        (\\<forall>v.\n            \\<langle>Stop, mds, mem(x := v)\\<rangle> \\<leadsto>\n            \\<langle>c', mds', mem'\\<rangle>))", "using stop_no_eval"], ["proof (prove)\nusing this:\n  (\\<langle>Stop, ?mds, ?mem\\<rangle>, \\<langle>?c', ?mds', ?mem'\\<rangle>)\n  \\<notin> eval\\<^sub>w\n\ngoal (1 subgoal):\n 1. (\\<forall>mds mem c' mds' mem'.\n        \\<langle>Stop, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n        mem x = mem' x) \\<and>\n    (\\<forall>mds mem c' mds' mem'.\n        \\<langle>Stop, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n        (\\<forall>v.\n            \\<langle>Stop, mds, mem(x := v)\\<rangle> \\<leadsto>\n            \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n        (\\<forall>v.\n            \\<langle>Stop, mds, mem(x := v)\\<rangle> \\<leadsto>\n            \\<langle>c', mds', mem'\\<rangle>))", "by auto"], ["", "lemma skip_eval_step:\n  \"\\<langle>Skip \\<otimes> annos, mds, mem\\<rangle> \\<leadsto> \\<langle>Stop, mds \\<oplus> annos, mem\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n    \\<langle>Stop, mds \\<oplus> annos, mem\\<rangle>", "apply (induct annos arbitrary: mds)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds.\n       \\<langle>Skip \\<otimes> [], mds, mem\\<rangle> \\<leadsto>\n       \\<langle>Stop, mds \\<oplus> [], mem\\<rangle>\n 2. \\<And>a annos mds.\n       (\\<And>mds.\n           \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n           \\<langle>Stop, mds \\<oplus>\n                          annos, mem\\<rangle>) \\<Longrightarrow>\n       \\<langle>Skip \\<otimes> (a # annos), mds, mem\\<rangle> \\<leadsto>\n       \\<langle>Stop, mds \\<oplus> (a # annos), mem\\<rangle>", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds.\n       \\<langle>Skip, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>Stop, mds, mem\\<rangle>\n 2. \\<And>a annos mds.\n       (\\<And>mds.\n           \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n           \\<langle>Stop, mds \\<oplus>\n                          annos, mem\\<rangle>) \\<Longrightarrow>\n       \\<langle>Skip \\<otimes> (a # annos), mds, mem\\<rangle> \\<leadsto>\n       \\<langle>Stop, mds \\<oplus> (a # annos), mem\\<rangle>", "apply (metis cxt_to_stmt.simps(1) eval\\<^sub>w.unannotated eval\\<^sub>w_simple.skip)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a annos mds.\n       (\\<And>mds.\n           \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n           \\<langle>Stop, mds \\<oplus>\n                          annos, mem\\<rangle>) \\<Longrightarrow>\n       \\<langle>Skip \\<otimes> (a # annos), mds, mem\\<rangle> \\<leadsto>\n       \\<langle>Stop, mds \\<oplus> (a # annos), mem\\<rangle>", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a annos mds.\n       (\\<And>mds.\n           \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n           \\<langle>Stop, mds \\<oplus>\n                          annos, mem\\<rangle>) \\<Longrightarrow>\n       \\<langle>Skip \\<otimes> annos@[a], mds, mem\\<rangle> \\<leadsto>\n       \\<langle>Stop, update_modes a mds \\<oplus> annos, mem\\<rangle>", "apply (insert eval\\<^sub>w.decl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a annos mds.\n       \\<lbrakk>\\<And>mds.\n                   \\<langle>Skip \\<otimes>\n                            annos, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>Stop, mds \\<oplus> annos, mem\\<rangle>;\n        \\<And>c mu mds mem c' mds' mem' E.\n           \\<langle>c, update_modes mu mds, mem\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'\\<rangle> \\<Longrightarrow>\n           \\<langle>cxt_to_stmt E (c@[mu]), mds, mem\\<rangle> \\<leadsto>\n           \\<langle>cxt_to_stmt E c', mds', mem'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Skip \\<otimes>\n                                  annos@[a], mds, mem\\<rangle> \\<leadsto>\n                         \\<langle>Stop, update_modes a mds \\<oplus>\n  annos, mem\\<rangle>", "apply (rule cxt_eval)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a annos mds.\n       \\<lbrakk>\\<And>mds.\n                   \\<langle>Skip \\<otimes>\n                            annos, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>Stop, mds \\<oplus> annos, mem\\<rangle>;\n        \\<And>c mu mds mem c' mds' mem' E.\n           \\<langle>c, update_modes mu mds, mem\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'\\<rangle> \\<Longrightarrow>\n           \\<langle>cxt_to_stmt E (c@[mu]), mds, mem\\<rangle> \\<leadsto>\n           \\<langle>cxt_to_stmt E c', mds', mem'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<langle>cxt_to_stmt []\n                                   (Skip \\<otimes>\n                                    annos@[a]), mds, mem\\<rangle> \\<leadsto>\n                         \\<langle>cxt_to_stmt []\n                                   Stop, update_modes a mds \\<oplus>\n   annos, mem\\<rangle>", "apply (rule eval\\<^sub>w.decl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a annos mds.\n       \\<lbrakk>\\<And>mds.\n                   \\<langle>Skip \\<otimes>\n                            annos, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>Stop, mds \\<oplus> annos, mem\\<rangle>;\n        \\<And>c mu mds mem c' mds' mem' E.\n           \\<langle>c, update_modes mu mds, mem\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'\\<rangle> \\<Longrightarrow>\n           \\<langle>cxt_to_stmt E (c@[mu]), mds, mem\\<rangle> \\<leadsto>\n           \\<langle>cxt_to_stmt E c', mds', mem'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Skip \\<otimes>\n                                  annos, update_modes a\n    mds, mem\\<rangle> \\<leadsto>\n                         \\<langle>Stop, update_modes a mds \\<oplus>\n  annos, mem\\<rangle>", "by auto"], ["", "lemma skip_eval_elim:\n  \"\\<lbrakk> \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle> \\<leadsto> \\<langle>c', mds', mem'\\<rangle> \\<rbrakk> \\<Longrightarrow> c' = Stop \\<and> mds' = mds \\<oplus> annos \\<and> mem' = mem\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n    \\<langle>c', mds', mem'\\<rangle> \\<Longrightarrow>\n    c' = Stop \\<and> mds' = mds \\<oplus> annos \\<and> mem' = mem", "apply (rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<langle>Skip \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n             \\<langle>c', mds', mem'\\<rangle>;\n     \\<not> (c' = Stop \\<and>\n             mds' = mds \\<oplus> annos \\<and> mem' = mem)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (insert skip_eval_step deterministic)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<langle>Skip \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n             \\<langle>c', mds', mem'\\<rangle>;\n     \\<not> (c' = Stop \\<and> mds' = mds \\<oplus> annos \\<and> mem' = mem);\n     \\<And>annos mds mem.\n        \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>Stop, mds \\<oplus> annos, mem\\<rangle>;\n     \\<And>lc lc' lc''.\n        \\<lbrakk>lc \\<leadsto> lc'; lc \\<leadsto> lc''\\<rbrakk>\n        \\<Longrightarrow> lc' = lc''\\<rbrakk>\n    \\<Longrightarrow> False", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<langle>Skip \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n             \\<langle>c', mds', mem'\\<rangle>;\n     \\<not> (c' = Stop \\<and> mds' = mds \\<oplus> annos \\<and> mem' = mem);\n     \\<And>annos mds mem.\n        \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>Stop, mds \\<oplus> annos, mem\\<rangle>;\n     \\<And>a b ba aa bb bc ab bd be.\n        \\<lbrakk>\\<langle>a, b, ba\\<rangle> \\<leadsto>\n                 \\<langle>aa, bb, bc\\<rangle>;\n         \\<langle>a, b, ba\\<rangle> \\<leadsto>\n         \\<langle>ab, bd, be\\<rangle>\\<rbrakk>\n        \\<Longrightarrow> \\<langle>aa, bb, bc\\<rangle> =\n                          \\<langle>ab, bd, be\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<langle>Skip \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n             \\<langle>c', mds', mem'\\<rangle>;\n     \\<And>annos mds mem.\n        \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>Stop, mds \\<oplus> annos, mem\\<rangle>;\n     \\<And>a b ba aa bb bc ab bd be.\n        \\<lbrakk>\\<langle>a, b, ba\\<rangle> \\<leadsto>\n                 \\<langle>aa, bb, bc\\<rangle>;\n         \\<langle>a, b, ba\\<rangle> \\<leadsto>\n         \\<langle>ab, bd, be\\<rangle>\\<rbrakk>\n        \\<Longrightarrow> aa = ab \\<and> bb = bd \\<and> bc = be;\n     mds' \\<noteq> mds \\<oplus> annos\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<langle>Skip \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n             \\<langle>c', mds', mem'\\<rangle>;\n     \\<And>annos mds mem.\n        \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>Stop, mds \\<oplus> annos, mem\\<rangle>;\n     \\<And>a b ba aa bb bc ab bd be.\n        \\<lbrakk>\\<langle>a, b, ba\\<rangle> \\<leadsto>\n                 \\<langle>aa, bb, bc\\<rangle>;\n         \\<langle>a, b, ba\\<rangle> \\<leadsto>\n         \\<langle>ab, bd, be\\<rangle>\\<rbrakk>\n        \\<Longrightarrow> aa = ab \\<and> bb = bd \\<and> bc = be;\n     c' \\<noteq> Stop\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>\\<langle>Skip \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n             \\<langle>c', mds', mem'\\<rangle>;\n     \\<And>annos mds mem.\n        \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>Stop, mds \\<oplus> annos, mem\\<rangle>;\n     \\<And>a b ba aa bb bc ab bd be.\n        \\<lbrakk>\\<langle>a, b, ba\\<rangle> \\<leadsto>\n                 \\<langle>aa, bb, bc\\<rangle>;\n         \\<langle>a, b, ba\\<rangle> \\<leadsto>\n         \\<langle>ab, bd, be\\<rangle>\\<rbrakk>\n        \\<Longrightarrow> aa = ab \\<and> bb = bd \\<and> bc = be;\n     mem' \\<noteq> mem\\<rbrakk>\n    \\<Longrightarrow> False", "by metis+"], ["", "lemma skip_doesnt_read:\n  \"doesnt_read (Skip \\<otimes> annos) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doesnt_read (Skip \\<otimes> annos) x", "apply (rule doesnt_read_annos)"], ["proof (prove)\ngoal (1 subgoal):\n 1. doesnt_read Skip x", "apply (auto simp: doesnt_read_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mds mem c' mds' mem' v va.\n       \\<lbrakk>\\<langle>Skip, mds, mem\\<rangle> \\<leadsto>\n                \\<langle>c', mds', mem'\\<rangle>;\n        (\\<langle>Skip, mds, mem(x := v)\\<rangle>,\n         \\<langle>c', mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Skip, mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c', mds', mem'(x := va)\\<rangle>", "by (metis annotate.simps(1) skip_elim skip_eval_step)"], ["", "lemma skip_doesnt_write:\n  \"doesnt_modify (Skip \\<otimes> annos) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doesnt_modify (Skip \\<otimes> annos) x", "apply (rule doesnt_modify_annos)"], ["proof (prove)\ngoal (1 subgoal):\n 1. doesnt_modify Skip x", "apply (auto simp: doesnt_modify_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mds mem c' mds' mem'.\n       \\<langle>Skip, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c', mds', mem'\\<rangle> \\<Longrightarrow>\n       mem x = mem' x", "by (metis skip_elim)"], ["", "lemma skip_loc_reach:\n  \"\\<lbrakk> \\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle> \\<rbrakk> \\<Longrightarrow>\n  (c' = Stop \\<and> mds' = (mds \\<oplus> annos)) \\<or> (c' = Skip \\<otimes> annos \\<and> mds' = mds)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>c', mds', mem'\\<rangle>\n    \\<in> loc_reach\n           \\<langle>Skip \\<otimes>\n                    annos, mds, mem\\<rangle> \\<Longrightarrow>\n    c' = Stop \\<and> mds' = mds \\<oplus> annos \\<or>\n    c' = Skip \\<otimes> annos \\<and> mds' = mds", "apply (induct rule: loc_reach.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. fst (fst \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle>) = Stop \\<and>\n    snd (fst \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle>) =\n    mds \\<oplus> annos \\<or>\n    fst (fst \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle>) =\n    Skip \\<otimes> annos \\<and>\n    snd (fst \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle>) = mds\n 2. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle>;\n        c' = Stop \\<and> mds' = mds \\<oplus> annos \\<or>\n        c' = Skip \\<otimes> annos \\<and> mds' = mds;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> c'' = Stop \\<and> mds'' = mds \\<oplus> annos \\<or>\n                         c'' = Skip \\<otimes> annos \\<and> mds'' = mds\n 3. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle>;\n        c' = Stop \\<and> mds' = mds \\<oplus> annos \\<or>\n        c' = Skip \\<otimes> annos \\<and> mds' = mds;\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' = Stop \\<and> mds' = mds \\<oplus> annos \\<or>\n                         c' = Skip \\<otimes> annos \\<and> mds' = mds", "apply (metis fst_conv snd_conv)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle>;\n        c' = Stop \\<and> mds' = mds \\<oplus> annos \\<or>\n        c' = Skip \\<otimes> annos \\<and> mds' = mds;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> c'' = Stop \\<and> mds'' = mds \\<oplus> annos \\<or>\n                         c'' = Skip \\<otimes> annos \\<and> mds'' = mds\n 2. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle>;\n        c' = Stop \\<and> mds' = mds \\<oplus> annos \\<or>\n        c' = Skip \\<otimes> annos \\<and> mds' = mds;\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' = Stop \\<and> mds' = mds \\<oplus> annos \\<or>\n                         c' = Skip \\<otimes> annos \\<and> mds' = mds", "apply (metis skip_eval_elim stop_no_eval)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle>;\n        c' = Stop \\<and> mds' = mds \\<oplus> annos \\<or>\n        c' = Skip \\<otimes> annos \\<and> mds' = mds;\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' = Stop \\<and> mds' = mds \\<oplus> annos \\<or>\n                         c' = Skip \\<otimes> annos \\<and> mds' = mds", "by metis"], ["", "lemma skip_doesnt_access:\n  \"\\<lbrakk> lc \\<in> loc_reach \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle> ; lc = \\<langle>c', mds', mem'\\<rangle> \\<rbrakk> \\<Longrightarrow> doesnt_read c' x \\<and> doesnt_modify c' x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>lc \\<in> loc_reach\n                       \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle>;\n     lc = \\<langle>c', mds', mem'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> doesnt_read c' x \\<and> doesnt_modify c' x", "apply (subgoal_tac \"(c' = Stop \\<and> mds' = (mds \\<oplus> annos)) \\<or> (c' = Skip \\<otimes> annos \\<and> mds' = mds)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>lc \\<in> loc_reach\n                       \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle>;\n     lc = \\<langle>c', mds', mem'\\<rangle>;\n     c' = Stop \\<and> mds' = mds \\<oplus> annos \\<or>\n     c' = Skip \\<otimes> annos \\<and> mds' = mds\\<rbrakk>\n    \\<Longrightarrow> doesnt_read c' x \\<and> doesnt_modify c' x\n 2. \\<lbrakk>lc \\<in> loc_reach\n                       \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle>;\n     lc = \\<langle>c', mds', mem'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> c' = Stop \\<and> mds' = mds \\<oplus> annos \\<or>\n                      c' = Skip \\<otimes> annos \\<and> mds' = mds", "apply (rule conjI, erule disjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>lc \\<in> loc_reach\n                       \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle>;\n     lc = \\<langle>c', mds', mem'\\<rangle>;\n     c' = Stop \\<and> mds' = mds \\<oplus> annos\\<rbrakk>\n    \\<Longrightarrow> doesnt_read c' x\n 2. \\<lbrakk>lc \\<in> loc_reach\n                       \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle>;\n     lc = \\<langle>c', mds', mem'\\<rangle>;\n     c' = Skip \\<otimes> annos \\<and> mds' = mds\\<rbrakk>\n    \\<Longrightarrow> doesnt_read c' x\n 3. \\<lbrakk>lc \\<in> loc_reach\n                       \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle>;\n     lc = \\<langle>c', mds', mem'\\<rangle>;\n     c' = Stop \\<and> mds' = mds \\<oplus> annos \\<or>\n     c' = Skip \\<otimes> annos \\<and> mds' = mds\\<rbrakk>\n    \\<Longrightarrow> doesnt_modify c' x\n 4. \\<lbrakk>lc \\<in> loc_reach\n                       \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle>;\n     lc = \\<langle>c', mds', mem'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> c' = Stop \\<and> mds' = mds \\<oplus> annos \\<or>\n                      c' = Skip \\<otimes> annos \\<and> mds' = mds", "apply (simp add: doesnt_read_def stop_no_eval)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>lc \\<in> loc_reach\n                       \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle>;\n     lc = \\<langle>c', mds', mem'\\<rangle>;\n     c' = Skip \\<otimes> annos \\<and> mds' = mds\\<rbrakk>\n    \\<Longrightarrow> doesnt_read c' x\n 2. \\<lbrakk>lc \\<in> loc_reach\n                       \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle>;\n     lc = \\<langle>c', mds', mem'\\<rangle>;\n     c' = Stop \\<and> mds' = mds \\<oplus> annos \\<or>\n     c' = Skip \\<otimes> annos \\<and> mds' = mds\\<rbrakk>\n    \\<Longrightarrow> doesnt_modify c' x\n 3. \\<lbrakk>lc \\<in> loc_reach\n                       \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle>;\n     lc = \\<langle>c', mds', mem'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> c' = Stop \\<and> mds' = mds \\<oplus> annos \\<or>\n                      c' = Skip \\<otimes> annos \\<and> mds' = mds", "apply (metis (lifting) annotate.simps skip_doesnt_read)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>lc \\<in> loc_reach\n                       \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle>;\n     lc = \\<langle>c', mds', mem'\\<rangle>;\n     c' = Stop \\<and> mds' = mds \\<oplus> annos \\<or>\n     c' = Skip \\<otimes> annos \\<and> mds' = mds\\<rbrakk>\n    \\<Longrightarrow> doesnt_modify c' x\n 2. \\<lbrakk>lc \\<in> loc_reach\n                       \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle>;\n     lc = \\<langle>c', mds', mem'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> c' = Stop \\<and> mds' = mds \\<oplus> annos \\<or>\n                      c' = Skip \\<otimes> annos \\<and> mds' = mds", "apply (erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>lc \\<in> loc_reach\n                       \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle>;\n     lc = \\<langle>c', mds', mem'\\<rangle>;\n     c' = Stop \\<and> mds' = mds \\<oplus> annos\\<rbrakk>\n    \\<Longrightarrow> doesnt_modify c' x\n 2. \\<lbrakk>lc \\<in> loc_reach\n                       \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle>;\n     lc = \\<langle>c', mds', mem'\\<rangle>;\n     c' = Skip \\<otimes> annos \\<and> mds' = mds\\<rbrakk>\n    \\<Longrightarrow> doesnt_modify c' x\n 3. \\<lbrakk>lc \\<in> loc_reach\n                       \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle>;\n     lc = \\<langle>c', mds', mem'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> c' = Stop \\<and> mds' = mds \\<oplus> annos \\<or>\n                      c' = Skip \\<otimes> annos \\<and> mds' = mds", "apply (simp add: doesnt_modify_def stop_no_eval)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>lc \\<in> loc_reach\n                       \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle>;\n     lc = \\<langle>c', mds', mem'\\<rangle>;\n     c' = Skip \\<otimes> annos \\<and> mds' = mds\\<rbrakk>\n    \\<Longrightarrow> doesnt_modify c' x\n 2. \\<lbrakk>lc \\<in> loc_reach\n                       \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle>;\n     lc = \\<langle>c', mds', mem'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> c' = Stop \\<and> mds' = mds \\<oplus> annos \\<or>\n                      c' = Skip \\<otimes> annos \\<and> mds' = mds", "apply (metis (lifting) annotate.simps skip_doesnt_write)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>lc \\<in> loc_reach\n                       \\<langle>Skip \\<otimes> annos, mds, mem\\<rangle>;\n     lc = \\<langle>c', mds', mem'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> c' = Stop \\<and> mds' = mds \\<oplus> annos \\<or>\n                      c' = Skip \\<otimes> annos \\<and> mds' = mds", "by (metis skip_loc_reach)"], ["", "lemma assign_doesnt_modify:\n  \"\\<lbrakk> x \\<noteq> y \\<rbrakk> \\<Longrightarrow> doesnt_modify ((x \\<leftarrow> e) \\<otimes> annos) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow>\n    doesnt_modify ((x \\<leftarrow> e) \\<otimes> annos) y", "apply (rule doesnt_modify_annos)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> doesnt_modify (x \\<leftarrow> e) y", "apply (simp add: doesnt_modify_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow>\n    \\<forall>mds mem c' mds' mem'.\n       \\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n       mem y = mem' y", "by (metis assign_elim fun_upd_apply)"], ["", "lemma assign_annos_eval:\n  \"\\<langle>(x \\<leftarrow> e) \\<otimes> annos, mds, mem\\<rangle> \\<leadsto> \\<langle>Stop, mds \\<oplus> annos, mem (x := ev\\<^sub>A mem e)\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>(x \\<leftarrow> e) \\<otimes>\n             annos, mds, mem\\<rangle> \\<leadsto>\n    \\<langle>Stop, mds \\<oplus> annos, mem(x := ev\\<^sub>A mem e)\\<rangle>", "apply (induct annos arbitrary: mds)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds.\n       \\<langle>(x \\<leftarrow> e) \\<otimes>\n                [], mds, mem\\<rangle> \\<leadsto>\n       \\<langle>Stop, mds \\<oplus> [], mem(x := ev\\<^sub>A mem e)\\<rangle>\n 2. \\<And>a annos mds.\n       (\\<And>mds.\n           \\<langle>(x \\<leftarrow> e) \\<otimes>\n                    annos, mds, mem\\<rangle> \\<leadsto>\n           \\<langle>Stop, mds \\<oplus> annos, mem\n           (x := ev\\<^sub>A mem e)\\<rangle>) \\<Longrightarrow>\n       \\<langle>(x \\<leftarrow> e) \\<otimes>\n                (a # annos), mds, mem\\<rangle> \\<leadsto>\n       \\<langle>Stop, mds \\<oplus> (a # annos), mem\n       (x := ev\\<^sub>A mem e)\\<rangle>", "apply (simp only: annotate.simps update_annos.simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds.\n       \\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>Stop, mds, mem(x := ev\\<^sub>A mem e)\\<rangle>\n 2. \\<And>a annos mds.\n       (\\<And>mds.\n           \\<langle>(x \\<leftarrow> e) \\<otimes>\n                    annos, mds, mem\\<rangle> \\<leadsto>\n           \\<langle>Stop, mds \\<oplus> annos, mem\n           (x := ev\\<^sub>A mem e)\\<rangle>) \\<Longrightarrow>\n       \\<langle>(x \\<leftarrow> e) \\<otimes>\n                (a # annos), mds, mem\\<rangle> \\<leadsto>\n       \\<langle>Stop, mds \\<oplus> (a # annos), mem\n       (x := ev\\<^sub>A mem e)\\<rangle>", "apply (rule cxt_eval)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds.\n       \\<langle>cxt_to_stmt []\n                 (x \\<leftarrow> e), mds, mem\\<rangle> \\<leadsto>\n       \\<langle>cxt_to_stmt [] Stop, mds, mem\n       (x := ev\\<^sub>A mem e)\\<rangle>\n 2. \\<And>a annos mds.\n       (\\<And>mds.\n           \\<langle>(x \\<leftarrow> e) \\<otimes>\n                    annos, mds, mem\\<rangle> \\<leadsto>\n           \\<langle>Stop, mds \\<oplus> annos, mem\n           (x := ev\\<^sub>A mem e)\\<rangle>) \\<Longrightarrow>\n       \\<langle>(x \\<leftarrow> e) \\<otimes>\n                (a # annos), mds, mem\\<rangle> \\<leadsto>\n       \\<langle>Stop, mds \\<oplus> (a # annos), mem\n       (x := ev\\<^sub>A mem e)\\<rangle>", "apply (rule eval\\<^sub>w.unannotated)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds.\n       eval\\<^sub>w_simple_abv (x \\<leftarrow> e, mem)\n        (Stop, mem(x := ev\\<^sub>A mem e))\n 2. \\<And>a annos mds.\n       (\\<And>mds.\n           \\<langle>(x \\<leftarrow> e) \\<otimes>\n                    annos, mds, mem\\<rangle> \\<leadsto>\n           \\<langle>Stop, mds \\<oplus> annos, mem\n           (x := ev\\<^sub>A mem e)\\<rangle>) \\<Longrightarrow>\n       \\<langle>(x \\<leftarrow> e) \\<otimes>\n                (a # annos), mds, mem\\<rangle> \\<leadsto>\n       \\<langle>Stop, mds \\<oplus> (a # annos), mem\n       (x := ev\\<^sub>A mem e)\\<rangle>", "apply (rule eval\\<^sub>w_simple.assign)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a annos mds.\n       (\\<And>mds.\n           \\<langle>(x \\<leftarrow> e) \\<otimes>\n                    annos, mds, mem\\<rangle> \\<leadsto>\n           \\<langle>Stop, mds \\<oplus> annos, mem\n           (x := ev\\<^sub>A mem e)\\<rangle>) \\<Longrightarrow>\n       \\<langle>(x \\<leftarrow> e) \\<otimes>\n                (a # annos), mds, mem\\<rangle> \\<leadsto>\n       \\<langle>Stop, mds \\<oplus> (a # annos), mem\n       (x := ev\\<^sub>A mem e)\\<rangle>", "apply (rule cxt_eval)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a annos mds.\n       (\\<And>mds.\n           \\<langle>(x \\<leftarrow> e) \\<otimes>\n                    annos, mds, mem\\<rangle> \\<leadsto>\n           \\<langle>Stop, mds \\<oplus> annos, mem\n           (x := ev\\<^sub>A mem e)\\<rangle>) \\<Longrightarrow>\n       \\<langle>cxt_to_stmt []\n                 ((x \\<leftarrow> e) \\<otimes>\n                  (a # annos)), mds, mem\\<rangle> \\<leadsto>\n       \\<langle>cxt_to_stmt [] Stop, mds \\<oplus> (a # annos), mem\n       (x := ev\\<^sub>A mem e)\\<rangle>", "apply (simp del: cxt_to_stmt.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a annos mds.\n       (\\<And>mds.\n           \\<langle>(x \\<leftarrow> e) \\<otimes>\n                    annos, mds, mem\\<rangle> \\<leadsto>\n           \\<langle>Stop, mds \\<oplus> annos, mem\n           (x := ev\\<^sub>A mem e)\\<rangle>) \\<Longrightarrow>\n       \\<langle>cxt_to_stmt []\n                 ((x \\<leftarrow> e) \\<otimes>\n                  annos@[a]), mds, mem\\<rangle> \\<leadsto>\n       \\<langle>cxt_to_stmt [] Stop, update_modes a mds \\<oplus> annos, mem\n       (x := ev\\<^sub>A mem e)\\<rangle>", "apply (rule eval\\<^sub>w.decl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a annos mds.\n       (\\<And>mds.\n           \\<langle>(x \\<leftarrow> e) \\<otimes>\n                    annos, mds, mem\\<rangle> \\<leadsto>\n           \\<langle>Stop, mds \\<oplus> annos, mem\n           (x := ev\\<^sub>A mem e)\\<rangle>) \\<Longrightarrow>\n       \\<langle>(x \\<leftarrow> e) \\<otimes>\n                annos, update_modes a mds, mem\\<rangle> \\<leadsto>\n       \\<langle>Stop, update_modes a mds \\<oplus> annos, mem\n       (x := ev\\<^sub>A mem e)\\<rangle>", "by auto"], ["", "lemma assign_annos_eval_elim:\n  \"\\<lbrakk> \\<langle>(x \\<leftarrow> e) \\<otimes> annos, mds, mem\\<rangle> \\<leadsto> \\<langle>c', mds', mem'\\<rangle> \\<rbrakk> \\<Longrightarrow>\n  c' = Stop \\<and> mds' = mds \\<oplus> annos\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>(x \\<leftarrow> e) \\<otimes>\n             annos, mds, mem\\<rangle> \\<leadsto>\n    \\<langle>c', mds', mem'\\<rangle> \\<Longrightarrow>\n    c' = Stop \\<and> mds' = mds \\<oplus> annos", "apply (rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<langle>(x \\<leftarrow> e) \\<otimes>\n                      annos, mds, mem\\<rangle> \\<leadsto>\n             \\<langle>c', mds', mem'\\<rangle>;\n     \\<not> (c' = Stop \\<and> mds' = mds \\<oplus> annos)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (insert deterministic assign_annos_eval)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<langle>(x \\<leftarrow> e) \\<otimes>\n                      annos, mds, mem\\<rangle> \\<leadsto>\n             \\<langle>c', mds', mem'\\<rangle>;\n     \\<not> (c' = Stop \\<and> mds' = mds \\<oplus> annos);\n     \\<And>lc lc' lc''.\n        \\<lbrakk>lc \\<leadsto> lc'; lc \\<leadsto> lc''\\<rbrakk>\n        \\<Longrightarrow> lc' = lc'';\n     \\<And>x e annos mds mem.\n        \\<langle>(x \\<leftarrow> e) \\<otimes>\n                 annos, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>Stop, mds \\<oplus> annos, mem\n        (x := ev\\<^sub>A mem e)\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<langle>(x \\<leftarrow> e) \\<otimes>\n                      annos, mds, mem\\<rangle> \\<leadsto>\n             \\<langle>c', mds', mem'\\<rangle>;\n     \\<And>a b ba aa bb bc ab bd be.\n        \\<lbrakk>\\<langle>a, b, ba\\<rangle> \\<leadsto>\n                 \\<langle>aa, bb, bc\\<rangle>;\n         \\<langle>a, b, ba\\<rangle> \\<leadsto>\n         \\<langle>ab, bd, be\\<rangle>\\<rbrakk>\n        \\<Longrightarrow> aa = ab \\<and> bb = bd \\<and> bc = be;\n     \\<And>x e annos mds mem.\n        \\<langle>(x \\<leftarrow> e) \\<otimes>\n                 annos, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>Stop, mds \\<oplus> annos, mem\n        (x := ev\\<^sub>A mem e)\\<rangle>;\n     c' \\<noteq> Stop\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<langle>(x \\<leftarrow> e) \\<otimes>\n                      annos, mds, mem\\<rangle> \\<leadsto>\n             \\<langle>c', mds', mem'\\<rangle>;\n     \\<And>a b ba aa bb bc ab bd be.\n        \\<lbrakk>\\<langle>a, b, ba\\<rangle> \\<leadsto>\n                 \\<langle>aa, bb, bc\\<rangle>;\n         \\<langle>a, b, ba\\<rangle> \\<leadsto>\n         \\<langle>ab, bd, be\\<rangle>\\<rbrakk>\n        \\<Longrightarrow> aa = ab \\<and> bb = bd \\<and> bc = be;\n     \\<And>x e annos mds mem.\n        \\<langle>(x \\<leftarrow> e) \\<otimes>\n                 annos, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>Stop, mds \\<oplus> annos, mem\n        (x := ev\\<^sub>A mem e)\\<rangle>;\n     mds' \\<noteq> mds \\<oplus> annos\\<rbrakk>\n    \\<Longrightarrow> False", "apply (metis (lifting))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<langle>(x \\<leftarrow> e) \\<otimes>\n                      annos, mds, mem\\<rangle> \\<leadsto>\n             \\<langle>c', mds', mem'\\<rangle>;\n     \\<And>a b ba aa bb bc ab bd be.\n        \\<lbrakk>\\<langle>a, b, ba\\<rangle> \\<leadsto>\n                 \\<langle>aa, bb, bc\\<rangle>;\n         \\<langle>a, b, ba\\<rangle> \\<leadsto>\n         \\<langle>ab, bd, be\\<rangle>\\<rbrakk>\n        \\<Longrightarrow> aa = ab \\<and> bb = bd \\<and> bc = be;\n     \\<And>x e annos mds mem.\n        \\<langle>(x \\<leftarrow> e) \\<otimes>\n                 annos, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>Stop, mds \\<oplus> annos, mem\n        (x := ev\\<^sub>A mem e)\\<rangle>;\n     mds' \\<noteq> mds \\<oplus> annos\\<rbrakk>\n    \\<Longrightarrow> False", "by metis"], ["", "lemma mem_upd_commute:\n  \"\\<lbrakk> x \\<noteq> y \\<rbrakk> \\<Longrightarrow> mem (x := v\\<^sub>1, y := v\\<^sub>2) = mem (y := v\\<^sub>2, x := v\\<^sub>1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow>\n    mem(x := v\\<^sub>1, y := v\\<^sub>2) = mem\n    (y := v\\<^sub>2, x := v\\<^sub>1)", "by (metis fun_upd_twist)"], ["", "lemma assign_doesnt_read:\n  \"\\<lbrakk> y \\<notin> aexp_vars e \\<rbrakk> \\<Longrightarrow> doesnt_read ((x \\<leftarrow> e) \\<otimes> annos) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<notin> aexp_vars e \\<Longrightarrow>\n    doesnt_read ((x \\<leftarrow> e) \\<otimes> annos) y", "apply (rule doesnt_read_annos)"], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<notin> aexp_vars e \\<Longrightarrow>\n    doesnt_read (x \\<leftarrow> e) y", "proof (cases \"x = y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>y \\<notin> aexp_vars e; x = y\\<rbrakk>\n    \\<Longrightarrow> doesnt_read (x \\<leftarrow> e) y\n 2. \\<lbrakk>y \\<notin> aexp_vars e; x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> doesnt_read (x \\<leftarrow> e) y", "assume \"y \\<notin> aexp_vars e\"\n    and [simp]: \"x = y\""], ["proof (state)\nthis:\n  y \\<notin> aexp_vars e\n  x = y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>y \\<notin> aexp_vars e; x = y\\<rbrakk>\n    \\<Longrightarrow> doesnt_read (x \\<leftarrow> e) y\n 2. \\<lbrakk>y \\<notin> aexp_vars e; x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> doesnt_read (x \\<leftarrow> e) y", "show \"doesnt_read (x \\<leftarrow> e) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doesnt_read (x \\<leftarrow> e) y", "unfolding doesnt_read_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>mds mem c' mds' mem'.\n       \\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n       (\\<forall>v.\n           \\<langle>x \\<leftarrow> e, mds, mem(y := v)\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'(y := v)\\<rangle>) \\<or>\n       (\\<forall>v.\n           \\<langle>x \\<leftarrow> e, mds, mem(y := v)\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'\\<rangle>)", "apply (rule allI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mds mem c' mds' mem'.\n       \\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n       (\\<forall>v.\n           \\<langle>x \\<leftarrow> e, mds, mem(y := v)\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'(y := v)\\<rangle>) \\<or>\n       (\\<forall>v.\n           \\<langle>x \\<leftarrow> e, mds, mem(y := v)\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'\\<rangle>)", "apply (rename_tac mds mem c' mds' mem')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mds mem c' mds' mem'.\n       \\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n       (\\<forall>v.\n           \\<langle>x \\<leftarrow> e, mds, mem(y := v)\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'(y := v)\\<rangle>) \\<or>\n       (\\<forall>v.\n           \\<langle>x \\<leftarrow> e, mds, mem(y := v)\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'\\<rangle>)", "apply (rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mds mem c' mds' mem'.\n       \\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c', mds', mem'\\<rangle> \\<Longrightarrow>\n       (\\<forall>v.\n           \\<langle>x \\<leftarrow> e, mds, mem(y := v)\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'(y := v)\\<rangle>) \\<or>\n       (\\<forall>v.\n           \\<langle>x \\<leftarrow> e, mds, mem(y := v)\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'\\<rangle>)", "apply (subgoal_tac \"c' = Stop \\<and> mds' = mds \\<and> mem' = mem (x := ev\\<^sub>A mem e)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds mem c' mds' mem'.\n       \\<lbrakk>\\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n                \\<langle>c', mds', mem'\\<rangle>;\n        c' = Stop \\<and>\n        mds' = mds \\<and> mem' = mem(x := ev\\<^sub>A mem e)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>v.\n                             \\<langle>x \\<leftarrow> e, mds, mem\n                             (y := v)\\<rangle> \\<leadsto>\n                             \\<langle>c', mds', mem'(y := v)\\<rangle>) \\<or>\n                         (\\<forall>v.\n                             \\<langle>x \\<leftarrow> e, mds, mem\n                             (y := v)\\<rangle> \\<leadsto>\n                             \\<langle>c', mds', mem'\\<rangle>)\n 2. \\<And>mds mem c' mds' mem'.\n       \\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c', mds', mem'\\<rangle> \\<Longrightarrow>\n       c' = Stop \\<and> mds' = mds \\<and> mem' = mem(x := ev\\<^sub>A mem e)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds mem c'.\n       \\<lbrakk>\\<langle>y \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n                \\<langle>Stop, mds, mem(y := ev\\<^sub>A mem e)\\<rangle>;\n        c' = Stop\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>v.\n                             \\<langle>y \\<leftarrow> e, mds, mem\n                             (y := v)\\<rangle> \\<leadsto>\n                             \\<langle>Stop, mds, mem(y := v)\\<rangle>) \\<or>\n                         (\\<forall>v.\n                             \\<langle>y \\<leftarrow> e, mds, mem\n                             (y := v)\\<rangle> \\<leadsto>\n                             \\<langle>Stop, mds, mem\n                             (y := ev\\<^sub>A mem e)\\<rangle>)\n 2. \\<And>mds mem c' mds' mem'.\n       \\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c', mds', mem'\\<rangle> \\<Longrightarrow>\n       c' = Stop \\<and> mds' = mds \\<and> mem' = mem(x := ev\\<^sub>A mem e)", "apply (rule disjI2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds mem c'.\n       \\<lbrakk>\\<langle>y \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n                \\<langle>Stop, mds, mem(y := ev\\<^sub>A mem e)\\<rangle>;\n        c' = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v.\n                            \\<langle>y \\<leftarrow> e, mds, mem\n                            (y := v)\\<rangle> \\<leadsto>\n                            \\<langle>Stop, mds, mem\n                            (y := ev\\<^sub>A mem e)\\<rangle>\n 2. \\<And>mds mem c' mds' mem'.\n       \\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c', mds', mem'\\<rangle> \\<Longrightarrow>\n       c' = Stop \\<and> mds' = mds \\<and> mem' = mem(x := ev\\<^sub>A mem e)", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds mem c' v.\n       \\<langle>y \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>Stop, mds, mem\n       (y := ev\\<^sub>A mem e)\\<rangle> \\<Longrightarrow>\n       \\<langle>y \\<leftarrow> e, mds, mem(y := v)\\<rangle> \\<leadsto>\n       \\<langle>Stop, mds, mem(y := ev\\<^sub>A mem e)\\<rangle>\n 2. \\<And>mds mem c' mds' mem'.\n       \\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c', mds', mem'\\<rangle> \\<Longrightarrow>\n       c' = Stop \\<and> mds' = mds \\<and> mem' = mem(x := ev\\<^sub>A mem e)", "apply (rule cxt_eval)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds mem c' v.\n       \\<langle>y \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>Stop, mds, mem\n       (y := ev\\<^sub>A mem e)\\<rangle> \\<Longrightarrow>\n       \\<langle>cxt_to_stmt [] (y \\<leftarrow> e), mds, mem\n       (y := v)\\<rangle> \\<leadsto> \\<langle>cxt_to_stmt [] Stop, mds, mem\n       (y := ev\\<^sub>A mem e)\\<rangle>\n 2. \\<And>mds mem c' mds' mem'.\n       \\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c', mds', mem'\\<rangle> \\<Longrightarrow>\n       c' = Stop \\<and> mds' = mds \\<and> mem' = mem(x := ev\\<^sub>A mem e)", "apply (rule eval\\<^sub>w.unannotated)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds mem c' v.\n       \\<langle>y \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>Stop, mds, mem\n       (y := ev\\<^sub>A mem e)\\<rangle> \\<Longrightarrow>\n       eval\\<^sub>w_simple_abv (y \\<leftarrow> e, mem(y := v))\n        (Stop, mem(y := ev\\<^sub>A mem e))\n 2. \\<And>mds mem c' mds' mem'.\n       \\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c', mds', mem'\\<rangle> \\<Longrightarrow>\n       c' = Stop \\<and> mds' = mds \\<and> mem' = mem(x := ev\\<^sub>A mem e)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds mem v.\n       \\<langle>y \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>Stop, mds, mem\n       (y := ev\\<^sub>A mem e)\\<rangle> \\<Longrightarrow>\n       eval\\<^sub>w_simple_abv (y \\<leftarrow> e, mem(y := v))\n        (Stop, mem(y := ev\\<^sub>A mem e))\n 2. \\<And>mds mem c' mds' mem'.\n       \\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c', mds', mem'\\<rangle> \\<Longrightarrow>\n       c' = Stop \\<and> mds' = mds \\<and> mem' = mem(x := ev\\<^sub>A mem e)", "apply (metis (hide_lams, no_types) \\<open>x = y\\<close> \\<open>y \\<notin> aexp_vars e\\<close> eval\\<^sub>w_simple.assign eval_vars_det\\<^sub>A fun_upd_apply fun_upd_upd)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mds mem c' mds' mem'.\n       \\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c', mds', mem'\\<rangle> \\<Longrightarrow>\n       c' = Stop \\<and> mds' = mds \\<and> mem' = mem(x := ev\\<^sub>A mem e)", "by (metis assign_elim)"], ["proof (state)\nthis:\n  doesnt_read (x \\<leftarrow> e) y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>y \\<notin> aexp_vars e; x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> doesnt_read (x \\<leftarrow> e) y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>y \\<notin> aexp_vars e; x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> doesnt_read (x \\<leftarrow> e) y", "assume asms: \"y \\<notin> aexp_vars e\" \"x \\<noteq> y\""], ["proof (state)\nthis:\n  y \\<notin> aexp_vars e\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>y \\<notin> aexp_vars e; x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> doesnt_read (x \\<leftarrow> e) y", "show \"doesnt_read (x \\<leftarrow> e) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doesnt_read (x \\<leftarrow> e) y", "unfolding doesnt_read_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>mds mem c' mds' mem'.\n       \\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n       (\\<forall>v.\n           \\<langle>x \\<leftarrow> e, mds, mem(y := v)\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'(y := v)\\<rangle>) \\<or>\n       (\\<forall>v.\n           \\<langle>x \\<leftarrow> e, mds, mem(y := v)\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'\\<rangle>)", "apply (rule allI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mds mem c' mds' mem'.\n       \\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n       (\\<forall>v.\n           \\<langle>x \\<leftarrow> e, mds, mem(y := v)\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'(y := v)\\<rangle>) \\<or>\n       (\\<forall>v.\n           \\<langle>x \\<leftarrow> e, mds, mem(y := v)\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'\\<rangle>)", "apply (rename_tac mds mem c' mds' mem')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mds mem c' mds' mem'.\n       \\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n       (\\<forall>v.\n           \\<langle>x \\<leftarrow> e, mds, mem(y := v)\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'(y := v)\\<rangle>) \\<or>\n       (\\<forall>v.\n           \\<langle>x \\<leftarrow> e, mds, mem(y := v)\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'\\<rangle>)", "apply (rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mds mem c' mds' mem'.\n       \\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c', mds', mem'\\<rangle> \\<Longrightarrow>\n       (\\<forall>v.\n           \\<langle>x \\<leftarrow> e, mds, mem(y := v)\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'(y := v)\\<rangle>) \\<or>\n       (\\<forall>v.\n           \\<langle>x \\<leftarrow> e, mds, mem(y := v)\\<rangle> \\<leadsto>\n           \\<langle>c', mds', mem'\\<rangle>)", "apply (subgoal_tac \"c' = Stop \\<and> mds' = mds \\<and> mem' = mem (x := ev\\<^sub>A mem e)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds mem c' mds' mem'.\n       \\<lbrakk>\\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n                \\<langle>c', mds', mem'\\<rangle>;\n        c' = Stop \\<and>\n        mds' = mds \\<and> mem' = mem(x := ev\\<^sub>A mem e)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>v.\n                             \\<langle>x \\<leftarrow> e, mds, mem\n                             (y := v)\\<rangle> \\<leadsto>\n                             \\<langle>c', mds', mem'(y := v)\\<rangle>) \\<or>\n                         (\\<forall>v.\n                             \\<langle>x \\<leftarrow> e, mds, mem\n                             (y := v)\\<rangle> \\<leadsto>\n                             \\<langle>c', mds', mem'\\<rangle>)\n 2. \\<And>mds mem c' mds' mem'.\n       \\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c', mds', mem'\\<rangle> \\<Longrightarrow>\n       c' = Stop \\<and> mds' = mds \\<and> mem' = mem(x := ev\\<^sub>A mem e)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds mem c'.\n       \\<lbrakk>\\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n                \\<langle>Stop, mds, mem(x := ev\\<^sub>A mem e)\\<rangle>;\n        c' = Stop\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>v.\n                             \\<langle>x \\<leftarrow> e, mds, mem\n                             (y := v)\\<rangle> \\<leadsto>\n                             \\<langle>Stop, mds, mem\n                             (x := ev\\<^sub>A mem e, y := v)\\<rangle>) \\<or>\n                         (\\<forall>v.\n                             \\<langle>x \\<leftarrow> e, mds, mem\n                             (y := v)\\<rangle> \\<leadsto>\n                             \\<langle>Stop, mds, mem\n                             (x := ev\\<^sub>A mem e)\\<rangle>)\n 2. \\<And>mds mem c' mds' mem'.\n       \\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c', mds', mem'\\<rangle> \\<Longrightarrow>\n       c' = Stop \\<and> mds' = mds \\<and> mem' = mem(x := ev\\<^sub>A mem e)", "apply (rule disjI1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds mem c'.\n       \\<lbrakk>\\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n                \\<langle>Stop, mds, mem(x := ev\\<^sub>A mem e)\\<rangle>;\n        c' = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v.\n                            \\<langle>x \\<leftarrow> e, mds, mem\n                            (y := v)\\<rangle> \\<leadsto>\n                            \\<langle>Stop, mds, mem\n                            (x := ev\\<^sub>A mem e, y := v)\\<rangle>\n 2. \\<And>mds mem c' mds' mem'.\n       \\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c', mds', mem'\\<rangle> \\<Longrightarrow>\n       c' = Stop \\<and> mds' = mds \\<and> mem' = mem(x := ev\\<^sub>A mem e)", "apply (insert asms)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds mem c'.\n       \\<lbrakk>\\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n                \\<langle>Stop, mds, mem(x := ev\\<^sub>A mem e)\\<rangle>;\n        c' = Stop; y \\<notin> aexp_vars e; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v.\n                            \\<langle>x \\<leftarrow> e, mds, mem\n                            (y := v)\\<rangle> \\<leadsto>\n                            \\<langle>Stop, mds, mem\n                            (x := ev\\<^sub>A mem e, y := v)\\<rangle>\n 2. \\<And>mds mem c' mds' mem'.\n       \\<lbrakk>\\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n                \\<langle>c', mds', mem'\\<rangle>;\n        y \\<notin> aexp_vars e; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> c' = Stop \\<and>\n                         mds' = mds \\<and> mem' = mem(x := ev\\<^sub>A mem e)", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds mem c' v.\n       \\<lbrakk>\\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n                \\<langle>Stop, mds, mem(x := ev\\<^sub>A mem e)\\<rangle>;\n        y \\<notin> aexp_vars e; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<langle>x \\<leftarrow> e, mds, mem\n                         (y := v)\\<rangle> \\<leadsto>\n                         \\<langle>Stop, mds, mem\n                         (x := ev\\<^sub>A mem e, y := v)\\<rangle>\n 2. \\<And>mds mem c' mds' mem'.\n       \\<lbrakk>\\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n                \\<langle>c', mds', mem'\\<rangle>;\n        y \\<notin> aexp_vars e; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> c' = Stop \\<and>\n                         mds' = mds \\<and> mem' = mem(x := ev\\<^sub>A mem e)", "apply (subgoal_tac \"mem (x := ev\\<^sub>A mem e, y := v) = mem (y := v, x := ev\\<^sub>A mem e)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>mds mem c' v.\n       \\<lbrakk>\\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n                \\<langle>Stop, mds, mem(x := ev\\<^sub>A mem e)\\<rangle>;\n        y \\<notin> aexp_vars e; x \\<noteq> y;\n        mem(x := ev\\<^sub>A mem e, y := v) = mem\n        (y := v, x := ev\\<^sub>A mem e)\\<rbrakk>\n       \\<Longrightarrow> \\<langle>x \\<leftarrow> e, mds, mem\n                         (y := v)\\<rangle> \\<leadsto>\n                         \\<langle>Stop, mds, mem\n                         (x := ev\\<^sub>A mem e, y := v)\\<rangle>\n 2. \\<And>mds mem c' v.\n       \\<lbrakk>\\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n                \\<langle>Stop, mds, mem(x := ev\\<^sub>A mem e)\\<rangle>;\n        y \\<notin> aexp_vars e; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> mem(x := ev\\<^sub>A mem e, y := v) = mem\n                         (y := v, x := ev\\<^sub>A mem e)\n 3. \\<And>mds mem c' mds' mem'.\n       \\<lbrakk>\\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n                \\<langle>c', mds', mem'\\<rangle>;\n        y \\<notin> aexp_vars e; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> c' = Stop \\<and>\n                         mds' = mds \\<and> mem' = mem(x := ev\\<^sub>A mem e)", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>mds mem v.\n       \\<lbrakk>\\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n                \\<langle>Stop, mds, mem(x := ev\\<^sub>A mem e)\\<rangle>;\n        y \\<notin> aexp_vars e; x \\<noteq> y;\n        mem(x := ev\\<^sub>A mem e, y := v) = mem\n        (y := v, x := ev\\<^sub>A mem e)\\<rbrakk>\n       \\<Longrightarrow> \\<langle>x \\<leftarrow> e, mds, mem\n                         (y := v)\\<rangle> \\<leadsto>\n                         \\<langle>Stop, mds, mem\n                         (y := v, x := ev\\<^sub>A mem e)\\<rangle>\n 2. \\<And>mds mem c' v.\n       \\<lbrakk>\\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n                \\<langle>Stop, mds, mem(x := ev\\<^sub>A mem e)\\<rangle>;\n        y \\<notin> aexp_vars e; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> mem(x := ev\\<^sub>A mem e, y := v) = mem\n                         (y := v, x := ev\\<^sub>A mem e)\n 3. \\<And>mds mem c' mds' mem'.\n       \\<lbrakk>\\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n                \\<langle>c', mds', mem'\\<rangle>;\n        y \\<notin> aexp_vars e; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> c' = Stop \\<and>\n                         mds' = mds \\<and> mem' = mem(x := ev\\<^sub>A mem e)", "apply (rule cxt_eval)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>mds mem v.\n       \\<lbrakk>\\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n                \\<langle>Stop, mds, mem(x := ev\\<^sub>A mem e)\\<rangle>;\n        y \\<notin> aexp_vars e; x \\<noteq> y;\n        mem(x := ev\\<^sub>A mem e, y := v) = mem\n        (y := v, x := ev\\<^sub>A mem e)\\<rbrakk>\n       \\<Longrightarrow> \\<langle>cxt_to_stmt []\n                                   (x \\<leftarrow> e), mds, mem\n                         (y := v)\\<rangle> \\<leadsto>\n                         \\<langle>cxt_to_stmt [] Stop, mds, mem\n                         (y := v, x := ev\\<^sub>A mem e)\\<rangle>\n 2. \\<And>mds mem c' v.\n       \\<lbrakk>\\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n                \\<langle>Stop, mds, mem(x := ev\\<^sub>A mem e)\\<rangle>;\n        y \\<notin> aexp_vars e; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> mem(x := ev\\<^sub>A mem e, y := v) = mem\n                         (y := v, x := ev\\<^sub>A mem e)\n 3. \\<And>mds mem c' mds' mem'.\n       \\<lbrakk>\\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n                \\<langle>c', mds', mem'\\<rangle>;\n        y \\<notin> aexp_vars e; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> c' = Stop \\<and>\n                         mds' = mds \\<and> mem' = mem(x := ev\\<^sub>A mem e)", "apply (rule eval\\<^sub>w.unannotated)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>mds mem v.\n       \\<lbrakk>\\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n                \\<langle>Stop, mds, mem(x := ev\\<^sub>A mem e)\\<rangle>;\n        y \\<notin> aexp_vars e; x \\<noteq> y;\n        mem(x := ev\\<^sub>A mem e, y := v) = mem\n        (y := v, x := ev\\<^sub>A mem e)\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>w_simple_abv\n                          (x \\<leftarrow> e, mem(y := v))\n                          (Stop, mem(y := v, x := ev\\<^sub>A mem e))\n 2. \\<And>mds mem c' v.\n       \\<lbrakk>\\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n                \\<langle>Stop, mds, mem(x := ev\\<^sub>A mem e)\\<rangle>;\n        y \\<notin> aexp_vars e; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> mem(x := ev\\<^sub>A mem e, y := v) = mem\n                         (y := v, x := ev\\<^sub>A mem e)\n 3. \\<And>mds mem c' mds' mem'.\n       \\<lbrakk>\\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n                \\<langle>c', mds', mem'\\<rangle>;\n        y \\<notin> aexp_vars e; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> c' = Stop \\<and>\n                         mds' = mds \\<and> mem' = mem(x := ev\\<^sub>A mem e)", "apply (metis eval\\<^sub>w_simple.assign eval_vars_det\\<^sub>A fun_upd_apply)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds mem c' v.\n       \\<lbrakk>\\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n                \\<langle>Stop, mds, mem(x := ev\\<^sub>A mem e)\\<rangle>;\n        y \\<notin> aexp_vars e; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> mem(x := ev\\<^sub>A mem e, y := v) = mem\n                         (y := v, x := ev\\<^sub>A mem e)\n 2. \\<And>mds mem c' mds' mem'.\n       \\<lbrakk>\\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n                \\<langle>c', mds', mem'\\<rangle>;\n        y \\<notin> aexp_vars e; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> c' = Stop \\<and>\n                         mds' = mds \\<and> mem' = mem(x := ev\\<^sub>A mem e)", "apply (metis mem_upd_commute)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mds mem c' mds' mem'.\n       \\<lbrakk>\\<langle>x \\<leftarrow> e, mds, mem\\<rangle> \\<leadsto>\n                \\<langle>c', mds', mem'\\<rangle>;\n        y \\<notin> aexp_vars e; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> c' = Stop \\<and>\n                         mds' = mds \\<and> mem' = mem(x := ev\\<^sub>A mem e)", "by (metis assign_elim)"], ["proof (state)\nthis:\n  doesnt_read (x \\<leftarrow> e) y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma assign_loc_reach:\n  \"\\<lbrakk> \\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>(x \\<leftarrow> e) \\<otimes> annos, mds, mem\\<rangle> \\<rbrakk> \\<Longrightarrow>\n  (c' = Stop \\<and> mds' = (mds \\<oplus> annos)) \\<or> (c' = (x \\<leftarrow> e) \\<otimes> annos \\<and> mds' = mds)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>c', mds', mem'\\<rangle>\n    \\<in> loc_reach\n           \\<langle>(x \\<leftarrow> e) \\<otimes>\n                    annos, mds, mem\\<rangle> \\<Longrightarrow>\n    c' = Stop \\<and> mds' = mds \\<oplus> annos \\<or>\n    c' = (x \\<leftarrow> e) \\<otimes> annos \\<and> mds' = mds", "apply (induct rule: loc_reach.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. fst (fst \\<langle>(x \\<leftarrow> e) \\<otimes>\n                      annos, mds, mem\\<rangle>) =\n    Stop \\<and>\n    snd (fst \\<langle>(x \\<leftarrow> e) \\<otimes>\n                      annos, mds, mem\\<rangle>) =\n    mds \\<oplus> annos \\<or>\n    fst (fst \\<langle>(x \\<leftarrow> e) \\<otimes>\n                      annos, mds, mem\\<rangle>) =\n    (x \\<leftarrow> e) \\<otimes> annos \\<and>\n    snd (fst \\<langle>(x \\<leftarrow> e) \\<otimes>\n                      annos, mds, mem\\<rangle>) =\n    mds\n 2. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>(x \\<leftarrow> e) \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        c' = Stop \\<and> mds' = mds \\<oplus> annos \\<or>\n        c' = (x \\<leftarrow> e) \\<otimes> annos \\<and> mds' = mds;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> c'' = Stop \\<and> mds'' = mds \\<oplus> annos \\<or>\n                         c'' = (x \\<leftarrow> e) \\<otimes> annos \\<and>\n                         mds'' = mds\n 3. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>(x \\<leftarrow> e) \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        c' = Stop \\<and> mds' = mds \\<oplus> annos \\<or>\n        c' = (x \\<leftarrow> e) \\<otimes> annos \\<and> mds' = mds;\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' = Stop \\<and> mds' = mds \\<oplus> annos \\<or>\n                         c' = (x \\<leftarrow> e) \\<otimes> annos \\<and>\n                         mds' = mds", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>(x \\<leftarrow> e) \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        c' = Stop \\<and> mds' = mds \\<oplus> annos \\<or>\n        c' = (x \\<leftarrow> e) \\<otimes> annos \\<and> mds' = mds;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> c'' = Stop \\<and> mds'' = mds \\<oplus> annos \\<or>\n                         c'' = (x \\<leftarrow> e) \\<otimes> annos \\<and>\n                         mds'' = mds", "by (metis assign_annos_eval_elim stop_no_eval)"], ["", "lemma if_doesnt_modify:\n  \"doesnt_modify (If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doesnt_modify (Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos) x", "apply (rule doesnt_modify_annos)"], ["proof (prove)\ngoal (1 subgoal):\n 1. doesnt_modify (Stmt.If e c\\<^sub>1 c\\<^sub>2) x", "by (auto simp: doesnt_modify_def)"], ["", "lemma vars_eval\\<^sub>B:\n  \"x \\<notin> bexp_vars e \\<Longrightarrow> ev\\<^sub>B mem e = ev\\<^sub>B (mem (x := v)) e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> bexp_vars e \\<Longrightarrow>\n    ev\\<^sub>B mem e = ev\\<^sub>B (mem(x := v)) e", "by (metis (lifting) eval_vars_det\\<^sub>B fun_upd_other)"], ["", "lemma if_doesnt_read:\n  \"x \\<notin> bexp_vars e \\<Longrightarrow> doesnt_read (If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> bexp_vars e \\<Longrightarrow>\n    doesnt_read (Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos) x", "apply (rule doesnt_read_annos)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> bexp_vars e \\<Longrightarrow>\n    doesnt_read (Stmt.If e c\\<^sub>1 c\\<^sub>2) x", "apply (auto simp: doesnt_read_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mds mem c' mds' mem' v va.\n       \\<lbrakk>x \\<notin> bexp_vars e;\n        \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle>;\n        (\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem(x := v)\\<rangle>,\n         \\<langle>c', mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c', mds', mem'(x := va)\\<rangle>", "apply (rename_tac mds mem c' mds' mem' v va)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mds mem c' mds' mem' v va.\n       \\<lbrakk>x \\<notin> bexp_vars e;\n        \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle>;\n        (\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem(x := v)\\<rangle>,\n         \\<langle>c', mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c', mds', mem'(x := va)\\<rangle>", "apply (case_tac \"ev\\<^sub>B mem e\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds mem c' mds' mem' v va.\n       \\<lbrakk>x \\<notin> bexp_vars e;\n        \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle>;\n        (\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem(x := v)\\<rangle>,\n         \\<langle>c', mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        ev\\<^sub>B mem e\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c', mds', mem'(x := va)\\<rangle>\n 2. \\<And>mds mem c' mds' mem' v va.\n       \\<lbrakk>x \\<notin> bexp_vars e;\n        \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle>;\n        (\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem(x := v)\\<rangle>,\n         \\<langle>c', mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        \\<not> ev\\<^sub>B mem e\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c', mds', mem'(x := va)\\<rangle>", "apply (subgoal_tac \"c' = c\\<^sub>1 \\<and> mds' = mds \\<and> mem' = mem\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>mds mem c' mds' mem' v va.\n       \\<lbrakk>x \\<notin> bexp_vars e;\n        \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle>;\n        (\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem(x := v)\\<rangle>,\n         \\<langle>c', mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        ev\\<^sub>B mem e;\n        c' = c\\<^sub>1 \\<and> mds' = mds \\<and> mem' = mem\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c', mds', mem'(x := va)\\<rangle>\n 2. \\<And>mds mem c' mds' mem' v va.\n       \\<lbrakk>x \\<notin> bexp_vars e;\n        \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle>;\n        (\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem(x := v)\\<rangle>,\n         \\<langle>c', mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        ev\\<^sub>B mem e\\<rbrakk>\n       \\<Longrightarrow> c' = c\\<^sub>1 \\<and> mds' = mds \\<and> mem' = mem\n 3. \\<And>mds mem c' mds' mem' v va.\n       \\<lbrakk>x \\<notin> bexp_vars e;\n        \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle>;\n        (\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem(x := v)\\<rangle>,\n         \\<langle>c', mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        \\<not> ev\\<^sub>B mem e\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c', mds', mem'(x := va)\\<rangle>", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds mem v va.\n       \\<lbrakk>x \\<notin> bexp_vars e;\n        \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c\\<^sub>1, mds, mem\\<rangle>;\n        (\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem(x := v)\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        ev\\<^sub>B mem e\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c\\<^sub>1, mds, mem(x := va)\\<rangle>\n 2. \\<And>mds mem c' mds' mem' v va.\n       \\<lbrakk>x \\<notin> bexp_vars e;\n        \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle>;\n        (\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem(x := v)\\<rangle>,\n         \\<langle>c', mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        \\<not> ev\\<^sub>B mem e\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c', mds', mem'(x := va)\\<rangle>", "apply (rule cxt_eval)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds mem v va.\n       \\<lbrakk>x \\<notin> bexp_vars e;\n        \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c\\<^sub>1, mds, mem\\<rangle>;\n        (\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem(x := v)\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        ev\\<^sub>B mem e\\<rbrakk>\n       \\<Longrightarrow> \\<langle>cxt_to_stmt []\n                                   (Stmt.If e c\\<^sub>1 c\\<^sub>2), mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>cxt_to_stmt [] c\\<^sub>1, mds, mem\n                         (x := va)\\<rangle>\n 2. \\<And>mds mem c' mds' mem' v va.\n       \\<lbrakk>x \\<notin> bexp_vars e;\n        \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle>;\n        (\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem(x := v)\\<rangle>,\n         \\<langle>c', mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        \\<not> ev\\<^sub>B mem e\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c', mds', mem'(x := va)\\<rangle>", "apply (rule eval\\<^sub>w.unannotated)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds mem v va.\n       \\<lbrakk>x \\<notin> bexp_vars e;\n        \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c\\<^sub>1, mds, mem\\<rangle>;\n        (\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem(x := v)\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        ev\\<^sub>B mem e\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>w_simple_abv\n                          (Stmt.If e c\\<^sub>1 c\\<^sub>2, mem(x := va))\n                          (c\\<^sub>1, mem(x := va))\n 2. \\<And>mds mem c' mds' mem' v va.\n       \\<lbrakk>x \\<notin> bexp_vars e;\n        \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle>;\n        (\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem(x := v)\\<rangle>,\n         \\<langle>c', mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        \\<not> ev\\<^sub>B mem e\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c', mds', mem'(x := va)\\<rangle>", "apply (rule eval\\<^sub>w_simple.if_true)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds mem v va.\n       \\<lbrakk>x \\<notin> bexp_vars e;\n        \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c\\<^sub>1, mds, mem\\<rangle>;\n        (\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem(x := v)\\<rangle>,\n         \\<langle>c\\<^sub>1, mds, mem\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        ev\\<^sub>B mem e\\<rbrakk>\n       \\<Longrightarrow> ev\\<^sub>B (mem(x := va)) e\n 2. \\<And>mds mem c' mds' mem' v va.\n       \\<lbrakk>x \\<notin> bexp_vars e;\n        \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle>;\n        (\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem(x := v)\\<rangle>,\n         \\<langle>c', mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        \\<not> ev\\<^sub>B mem e\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c', mds', mem'(x := va)\\<rangle>", "apply (metis (lifting) vars_eval\\<^sub>B)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mds mem c' mds' mem' v va.\n       \\<lbrakk>x \\<notin> bexp_vars e;\n        \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle>;\n        (\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem(x := v)\\<rangle>,\n         \\<langle>c', mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        \\<not> ev\\<^sub>B mem e\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c', mds', mem'(x := va)\\<rangle>", "apply (subgoal_tac \"c' = c\\<^sub>2 \\<and> mds' = mds \\<and> mem' = mem\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds mem c' mds' mem' v va.\n       \\<lbrakk>x \\<notin> bexp_vars e;\n        \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle>;\n        (\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem(x := v)\\<rangle>,\n         \\<langle>c', mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        \\<not> ev\\<^sub>B mem e;\n        c' = c\\<^sub>2 \\<and> mds' = mds \\<and> mem' = mem\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c', mds', mem'(x := va)\\<rangle>\n 2. \\<And>mds mem c' mds' mem' v va.\n       \\<lbrakk>x \\<notin> bexp_vars e;\n        \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds', mem'\\<rangle>;\n        (\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem(x := v)\\<rangle>,\n         \\<langle>c', mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        \\<not> ev\\<^sub>B mem e\\<rbrakk>\n       \\<Longrightarrow> c' = c\\<^sub>2 \\<and> mds' = mds \\<and> mem' = mem", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mds mem v va.\n       \\<lbrakk>x \\<notin> bexp_vars e;\n        \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c\\<^sub>2, mds, mem\\<rangle>;\n        (\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem(x := v)\\<rangle>,\n         \\<langle>c\\<^sub>2, mds, mem\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        \\<not> ev\\<^sub>B mem e\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c\\<^sub>2, mds, mem(x := va)\\<rangle>", "apply (rule cxt_eval)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mds mem v va.\n       \\<lbrakk>x \\<notin> bexp_vars e;\n        \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c\\<^sub>2, mds, mem\\<rangle>;\n        (\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem(x := v)\\<rangle>,\n         \\<langle>c\\<^sub>2, mds, mem\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        \\<not> ev\\<^sub>B mem e\\<rbrakk>\n       \\<Longrightarrow> \\<langle>cxt_to_stmt []\n                                   (Stmt.If e c\\<^sub>1 c\\<^sub>2), mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>cxt_to_stmt [] c\\<^sub>2, mds, mem\n                         (x := va)\\<rangle>", "apply (rule eval\\<^sub>w.unannotated)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mds mem v va.\n       \\<lbrakk>x \\<notin> bexp_vars e;\n        \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c\\<^sub>2, mds, mem\\<rangle>;\n        (\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem(x := v)\\<rangle>,\n         \\<langle>c\\<^sub>2, mds, mem\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        \\<not> ev\\<^sub>B mem e\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>w_simple_abv\n                          (Stmt.If e c\\<^sub>1 c\\<^sub>2, mem(x := va))\n                          (c\\<^sub>2, mem(x := va))", "apply (rule eval\\<^sub>w_simple.if_false)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mds mem v va.\n       \\<lbrakk>x \\<notin> bexp_vars e;\n        \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c\\<^sub>2, mds, mem\\<rangle>;\n        (\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem(x := v)\\<rangle>,\n         \\<langle>c\\<^sub>2, mds, mem\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        \\<not> ev\\<^sub>B mem e\\<rbrakk>\n       \\<Longrightarrow> \\<not> ev\\<^sub>B (mem(x := va)) e", "by (metis (lifting) vars_eval\\<^sub>B)"], ["", "lemma if_eval_true:\n  \"\\<lbrakk> ev\\<^sub>B mem e \\<rbrakk> \\<Longrightarrow>\n  \\<langle>If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos, mds, mem\\<rangle> \\<leadsto> \\<langle>c\\<^sub>1, mds \\<oplus> annos, mem\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ev\\<^sub>B mem e \\<Longrightarrow>\n    \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n             annos, mds, mem\\<rangle> \\<leadsto>\n    \\<langle>c\\<^sub>1, mds \\<oplus> annos, mem\\<rangle>", "apply (induct annos arbitrary: mds)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds.\n       ev\\<^sub>B mem e \\<Longrightarrow>\n       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                [], mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c\\<^sub>1, mds \\<oplus> [], mem\\<rangle>\n 2. \\<And>a annos mds.\n       \\<lbrakk>\\<And>mds.\n                   ev\\<^sub>B mem e \\<Longrightarrow>\n                   \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                            annos, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c\\<^sub>1, mds \\<oplus> annos, mem\\<rangle>;\n        ev\\<^sub>B mem e\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                  (a # annos), mds, mem\\<rangle> \\<leadsto>\n                         \\<langle>c\\<^sub>1, mds \\<oplus>\n       (a # annos), mem\\<rangle>", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds.\n       ev\\<^sub>B mem e \\<Longrightarrow>\n       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c\\<^sub>1, mds, mem\\<rangle>\n 2. \\<And>a annos mds.\n       \\<lbrakk>\\<And>mds.\n                   ev\\<^sub>B mem e \\<Longrightarrow>\n                   \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                            annos, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c\\<^sub>1, mds \\<oplus> annos, mem\\<rangle>;\n        ev\\<^sub>B mem e\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                  (a # annos), mds, mem\\<rangle> \\<leadsto>\n                         \\<langle>c\\<^sub>1, mds \\<oplus>\n       (a # annos), mem\\<rangle>", "apply (metis cxt_eval eval\\<^sub>w.unannotated eval\\<^sub>w_simple.if_true)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a annos mds.\n       \\<lbrakk>\\<And>mds.\n                   ev\\<^sub>B mem e \\<Longrightarrow>\n                   \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                            annos, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c\\<^sub>1, mds \\<oplus> annos, mem\\<rangle>;\n        ev\\<^sub>B mem e\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                  (a # annos), mds, mem\\<rangle> \\<leadsto>\n                         \\<langle>c\\<^sub>1, mds \\<oplus>\n       (a # annos), mem\\<rangle>", "by (metis annotate.simps(2) cxt_eval eval\\<^sub>w.decl update_annos.simps(2))"], ["", "lemma if_eval_false:\n  \"\\<lbrakk> \\<not> ev\\<^sub>B mem e \\<rbrakk> \\<Longrightarrow>\n  \\<langle>If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos, mds, mem\\<rangle> \\<leadsto> \\<langle>c\\<^sub>2, mds \\<oplus> annos, mem\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ev\\<^sub>B mem e \\<Longrightarrow>\n    \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n             annos, mds, mem\\<rangle> \\<leadsto>\n    \\<langle>c\\<^sub>2, mds \\<oplus> annos, mem\\<rangle>", "apply (induct annos arbitrary: mds)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds.\n       \\<not> ev\\<^sub>B mem e \\<Longrightarrow>\n       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                [], mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c\\<^sub>2, mds \\<oplus> [], mem\\<rangle>\n 2. \\<And>a annos mds.\n       \\<lbrakk>\\<And>mds.\n                   \\<not> ev\\<^sub>B mem e \\<Longrightarrow>\n                   \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                            annos, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c\\<^sub>2, mds \\<oplus> annos, mem\\<rangle>;\n        \\<not> ev\\<^sub>B mem e\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                  (a # annos), mds, mem\\<rangle> \\<leadsto>\n                         \\<langle>c\\<^sub>2, mds \\<oplus>\n       (a # annos), mem\\<rangle>", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds.\n       \\<not> ev\\<^sub>B mem e \\<Longrightarrow>\n       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c\\<^sub>2, mds, mem\\<rangle>\n 2. \\<And>a annos mds.\n       \\<lbrakk>\\<And>mds.\n                   \\<not> ev\\<^sub>B mem e \\<Longrightarrow>\n                   \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                            annos, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c\\<^sub>2, mds \\<oplus> annos, mem\\<rangle>;\n        \\<not> ev\\<^sub>B mem e\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                  (a # annos), mds, mem\\<rangle> \\<leadsto>\n                         \\<langle>c\\<^sub>2, mds \\<oplus>\n       (a # annos), mem\\<rangle>", "apply (metis cxt_eval eval\\<^sub>w.unannotated eval\\<^sub>w_simple.if_false)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a annos mds.\n       \\<lbrakk>\\<And>mds.\n                   \\<not> ev\\<^sub>B mem e \\<Longrightarrow>\n                   \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                            annos, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c\\<^sub>2, mds \\<oplus> annos, mem\\<rangle>;\n        \\<not> ev\\<^sub>B mem e\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                  (a # annos), mds, mem\\<rangle> \\<leadsto>\n                         \\<langle>c\\<^sub>2, mds \\<oplus>\n       (a # annos), mem\\<rangle>", "by (metis annotate.simps(2) cxt_eval eval\\<^sub>w.decl update_annos.simps(2))"], ["", "lemma if_eval_elim:\n  \"\\<lbrakk> \\<langle>If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos, mds, mem\\<rangle> \\<leadsto> \\<langle>c', mds', mem'\\<rangle> \\<rbrakk> \\<Longrightarrow>\n  ((c' = c\\<^sub>1 \\<and> ev\\<^sub>B mem e) \\<or> (c' = c\\<^sub>2 \\<and> \\<not> ev\\<^sub>B mem e)) \\<and> mds' = mds \\<oplus> annos \\<and> mem' = mem\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n             annos, mds, mem\\<rangle> \\<leadsto>\n    \\<langle>c', mds', mem'\\<rangle> \\<Longrightarrow>\n    (c' = c\\<^sub>1 \\<and> ev\\<^sub>B mem e \\<or>\n     c' = c\\<^sub>2 \\<and> \\<not> ev\\<^sub>B mem e) \\<and>\n    mds' = mds \\<oplus> annos \\<and> mem' = mem", "apply (rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                      annos, mds, mem\\<rangle> \\<leadsto>\n             \\<langle>c', mds', mem'\\<rangle>;\n     \\<not> ((c' = c\\<^sub>1 \\<and> ev\\<^sub>B mem e \\<or>\n              c' = c\\<^sub>2 \\<and> \\<not> ev\\<^sub>B mem e) \\<and>\n             mds' = mds \\<oplus> annos \\<and> mem' = mem)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (cases \"ev\\<^sub>B mem e\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                      annos, mds, mem\\<rangle> \\<leadsto>\n             \\<langle>c', mds', mem'\\<rangle>;\n     \\<not> ((c' = c\\<^sub>1 \\<and> ev\\<^sub>B mem e \\<or>\n              c' = c\\<^sub>2 \\<and> \\<not> ev\\<^sub>B mem e) \\<and>\n             mds' = mds \\<oplus> annos \\<and> mem' = mem);\n     ev\\<^sub>B mem e\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                      annos, mds, mem\\<rangle> \\<leadsto>\n             \\<langle>c', mds', mem'\\<rangle>;\n     \\<not> ((c' = c\\<^sub>1 \\<and> ev\\<^sub>B mem e \\<or>\n              c' = c\\<^sub>2 \\<and> \\<not> ev\\<^sub>B mem e) \\<and>\n             mds' = mds \\<oplus> annos \\<and> mem' = mem);\n     \\<not> ev\\<^sub>B mem e\\<rbrakk>\n    \\<Longrightarrow> False", "apply (insert if_eval_true deterministic)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                      annos, mds, mem\\<rangle> \\<leadsto>\n             \\<langle>c', mds', mem'\\<rangle>;\n     \\<not> ((c' = c\\<^sub>1 \\<and> ev\\<^sub>B mem e \\<or>\n              c' = c\\<^sub>2 \\<and> \\<not> ev\\<^sub>B mem e) \\<and>\n             mds' = mds \\<oplus> annos \\<and> mem' = mem);\n     ev\\<^sub>B mem e;\n     \\<And>mem e c\\<^sub>1 c\\<^sub>2 annos mds.\n        ev\\<^sub>B mem e \\<Longrightarrow>\n        \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                 annos, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c\\<^sub>1, mds \\<oplus> annos, mem\\<rangle>;\n     \\<And>lc lc' lc''.\n        \\<lbrakk>lc \\<leadsto> lc'; lc \\<leadsto> lc''\\<rbrakk>\n        \\<Longrightarrow> lc' = lc''\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                      annos, mds, mem\\<rangle> \\<leadsto>\n             \\<langle>c', mds', mem'\\<rangle>;\n     \\<not> ((c' = c\\<^sub>1 \\<and> ev\\<^sub>B mem e \\<or>\n              c' = c\\<^sub>2 \\<and> \\<not> ev\\<^sub>B mem e) \\<and>\n             mds' = mds \\<oplus> annos \\<and> mem' = mem);\n     \\<not> ev\\<^sub>B mem e;\n     \\<And>mem e c\\<^sub>1 c\\<^sub>2 annos mds.\n        ev\\<^sub>B mem e \\<Longrightarrow>\n        \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                 annos, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c\\<^sub>1, mds \\<oplus> annos, mem\\<rangle>;\n     \\<And>lc lc' lc''.\n        \\<lbrakk>lc \\<leadsto> lc'; lc \\<leadsto> lc''\\<rbrakk>\n        \\<Longrightarrow> lc' = lc''\\<rbrakk>\n    \\<Longrightarrow> False", "apply (metis prod.inject)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                      annos, mds, mem\\<rangle> \\<leadsto>\n             \\<langle>c', mds', mem'\\<rangle>;\n     \\<not> ((c' = c\\<^sub>1 \\<and> ev\\<^sub>B mem e \\<or>\n              c' = c\\<^sub>2 \\<and> \\<not> ev\\<^sub>B mem e) \\<and>\n             mds' = mds \\<oplus> annos \\<and> mem' = mem);\n     \\<not> ev\\<^sub>B mem e;\n     \\<And>mem e c\\<^sub>1 c\\<^sub>2 annos mds.\n        ev\\<^sub>B mem e \\<Longrightarrow>\n        \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                 annos, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c\\<^sub>1, mds \\<oplus> annos, mem\\<rangle>;\n     \\<And>lc lc' lc''.\n        \\<lbrakk>lc \\<leadsto> lc'; lc \\<leadsto> lc''\\<rbrakk>\n        \\<Longrightarrow> lc' = lc''\\<rbrakk>\n    \\<Longrightarrow> False", "by (metis prod.inject if_eval_false deterministic)"], ["", "lemma if_eval_elim':\n  \"\\<lbrakk> \\<langle>If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<leadsto> \\<langle>c', mds', mem'\\<rangle> \\<rbrakk> \\<Longrightarrow>\n  ((c' = c\\<^sub>1 \\<and> ev\\<^sub>B mem e) \\<or> (c' = c\\<^sub>2 \\<and> \\<not> ev\\<^sub>B mem e)) \\<and> mds' = mds \\<and> mem' = mem\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<leadsto>\n    \\<langle>c', mds', mem'\\<rangle> \\<Longrightarrow>\n    (c' = c\\<^sub>1 \\<and> ev\\<^sub>B mem e \\<or>\n     c' = c\\<^sub>2 \\<and> \\<not> ev\\<^sub>B mem e) \\<and>\n    mds' = mds \\<and> mem' = mem", "using if_eval_elim [where annos = \"[]\"]"], ["proof (prove)\nusing this:\n  \\<langle>Stmt.If ?e ?c\\<^sub>1 ?c\\<^sub>2 \\<otimes>\n           [], ?mds, ?mem\\<rangle> \\<leadsto>\n  \\<langle>?c', ?mds', ?mem'\\<rangle> \\<Longrightarrow>\n  (?c' = ?c\\<^sub>1 \\<and> ev\\<^sub>B ?mem ?e \\<or>\n   ?c' = ?c\\<^sub>2 \\<and> \\<not> ev\\<^sub>B ?mem ?e) \\<and>\n  ?mds' = ?mds \\<oplus> [] \\<and> ?mem' = ?mem\n\ngoal (1 subgoal):\n 1. \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<leadsto>\n    \\<langle>c', mds', mem'\\<rangle> \\<Longrightarrow>\n    (c' = c\\<^sub>1 \\<and> ev\\<^sub>B mem e \\<or>\n     c' = c\\<^sub>2 \\<and> \\<not> ev\\<^sub>B mem e) \\<and>\n    mds' = mds \\<and> mem' = mem", "by auto"], ["", "lemma loc_reach_refl':\n  \"\\<langle>c, mds, mem\\<rangle> \\<in> loc_reach \\<langle>c, mds, mem\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>c, mds, mem\\<rangle>\n    \\<in> loc_reach \\<langle>c, mds, mem\\<rangle>", "apply (subgoal_tac \"\\<exists> lc. lc \\<in> loc_reach lc \\<and> lc = \\<langle>c, mds, mem\\<rangle>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>lc.\n       lc \\<in> loc_reach lc \\<and>\n       lc = \\<langle>c, mds, mem\\<rangle> \\<Longrightarrow>\n    \\<langle>c, mds, mem\\<rangle>\n    \\<in> loc_reach \\<langle>c, mds, mem\\<rangle>\n 2. \\<exists>lc.\n       lc \\<in> loc_reach lc \\<and> lc = \\<langle>c, mds, mem\\<rangle>", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>lc.\n       lc \\<in> loc_reach lc \\<and> lc = \\<langle>c, mds, mem\\<rangle>", "by (metis loc_reach.refl fst_conv snd_conv)"], ["", "lemma if_loc_reach:\n  \"\\<lbrakk> \\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos, mds, mem\\<rangle> \\<rbrakk> \\<Longrightarrow>\n  (c' = If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and> mds' = mds) \\<or>\n  (\\<exists> mem''. \\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>c\\<^sub>1, mds \\<oplus> annos, mem''\\<rangle>) \\<or>\n  (\\<exists> mem''. \\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>c\\<^sub>2, mds \\<oplus> annos, mem''\\<rangle>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>c', mds', mem'\\<rangle>\n    \\<in> loc_reach\n           \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                    annos, mds, mem\\<rangle> \\<Longrightarrow>\n    c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and>\n    mds' = mds \\<or>\n    (\\<exists>mem''.\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>c\\<^sub>1, mds \\<oplus> annos, mem''\\<rangle>) \\<or>\n    (\\<exists>mem''.\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>c\\<^sub>2, mds \\<oplus> annos, mem''\\<rangle>)", "apply (induct rule: loc_reach.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. fst (fst \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                      annos, mds, mem\\<rangle>) =\n    Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and>\n    snd (fst \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                      annos, mds, mem\\<rangle>) =\n    mds \\<or>\n    (\\<exists>mem''.\n        \\<langle>fst (fst \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                   annos, mds, mem\\<rangle>), snd\n                         (fst \\<langle>Stmt.If e c\\<^sub>1\n  c\\<^sub>2 \\<otimes>\n annos, mds, mem\\<rangle>), snd \\<langle>Stmt.If e c\\<^sub>1\n    c\\<^sub>2 \\<otimes>\n   annos, mds, mem\\<rangle>\\<rangle>\n        \\<in> loc_reach\n               \\<langle>c\\<^sub>1, mds \\<oplus> annos, mem''\\<rangle>) \\<or>\n    (\\<exists>mem''.\n        \\<langle>fst (fst \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                   annos, mds, mem\\<rangle>), snd\n                         (fst \\<langle>Stmt.If e c\\<^sub>1\n  c\\<^sub>2 \\<otimes>\n annos, mds, mem\\<rangle>), snd \\<langle>Stmt.If e c\\<^sub>1\n    c\\<^sub>2 \\<otimes>\n   annos, mds, mem\\<rangle>\\<rangle>\n        \\<in> loc_reach\n               \\<langle>c\\<^sub>2, mds \\<oplus> annos, mem''\\<rangle>)\n 2. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and>\n        mds' = mds \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>1, mds \\<oplus>\n annos, mem''\\<rangle>) \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>2, mds \\<oplus> annos, mem''\\<rangle>);\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> c'' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds'' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)\n 3. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and>\n        mds' = mds \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>1, mds \\<oplus>\n annos, mem''\\<rangle>) \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>2, mds \\<oplus> annos, mem''\\<rangle>);\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)", "apply (metis fst_conv snd_conv)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and>\n        mds' = mds \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>1, mds \\<oplus>\n annos, mem''\\<rangle>) \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>2, mds \\<oplus> annos, mem''\\<rangle>);\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> c'' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds'' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)\n 2. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and>\n        mds' = mds \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>1, mds \\<oplus>\n annos, mem''\\<rangle>) \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>2, mds \\<oplus> annos, mem''\\<rangle>);\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)", "apply (erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and>\n        mds' = mds\\<rbrakk>\n       \\<Longrightarrow> c'' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds'' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)\n 2. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>1, mds \\<oplus>\n annos, mem''\\<rangle>) \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>2, mds \\<oplus>\n annos, mem''\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> c'' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds'' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)\n 3. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and>\n        mds' = mds \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>1, mds \\<oplus>\n annos, mem''\\<rangle>) \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>2, mds \\<oplus> annos, mem''\\<rangle>);\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)", "apply (erule conjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos;\n        mds' = mds\\<rbrakk>\n       \\<Longrightarrow> c'' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds'' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)\n 2. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>1, mds \\<oplus>\n annos, mem''\\<rangle>) \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>2, mds \\<oplus>\n annos, mem''\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> c'' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds'' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)\n 3. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and>\n        mds' = mds \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>1, mds \\<oplus>\n annos, mem''\\<rangle>) \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>2, mds \\<oplus> annos, mem''\\<rangle>);\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos, mds, mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                 annos, mds, mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos;\n        mds' = mds\\<rbrakk>\n       \\<Longrightarrow> c'' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds'' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)\n 2. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>1, mds \\<oplus>\n annos, mem''\\<rangle>) \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>2, mds \\<oplus>\n annos, mem''\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> c'' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds'' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)\n 3. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and>\n        mds' = mds \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>1, mds \\<oplus>\n annos, mem''\\<rangle>) \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>2, mds \\<oplus> annos, mem''\\<rangle>);\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)", "apply (drule if_eval_elim)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos, mds, mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos; mds' = mds;\n        (c'' = c\\<^sub>1 \\<and> ev\\<^sub>B mem' e \\<or>\n         c'' = c\\<^sub>2 \\<and> \\<not> ev\\<^sub>B mem' e) \\<and>\n        mds'' = mds \\<oplus> annos \\<and> mem'' = mem'\\<rbrakk>\n       \\<Longrightarrow> c'' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds'' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)\n 2. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>1, mds \\<oplus>\n annos, mem''\\<rangle>) \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>2, mds \\<oplus>\n annos, mem''\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> c'' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds'' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)\n 3. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and>\n        mds' = mds \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>1, mds \\<oplus>\n annos, mem''\\<rangle>) \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>2, mds \\<oplus> annos, mem''\\<rangle>);\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)", "apply (erule conjE)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos, mds, mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos; mds' = mds;\n        c'' = c\\<^sub>1 \\<and> ev\\<^sub>B mem' e \\<or>\n        c'' = c\\<^sub>2 \\<and> \\<not> ev\\<^sub>B mem' e;\n        mds'' = mds \\<oplus> annos; mem'' = mem'\\<rbrakk>\n       \\<Longrightarrow> c'' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds'' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)\n 2. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>1, mds \\<oplus>\n annos, mem''\\<rangle>) \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>2, mds \\<oplus>\n annos, mem''\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> c'' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds'' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)\n 3. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and>\n        mds' = mds \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>1, mds \\<oplus>\n annos, mem''\\<rangle>) \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>2, mds \\<oplus> annos, mem''\\<rangle>);\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)", "apply (erule disjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos, mds, mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos; mds' = mds;\n        mds'' = mds \\<oplus> annos; mem'' = mem';\n        c'' = c\\<^sub>1 \\<and> ev\\<^sub>B mem' e\\<rbrakk>\n       \\<Longrightarrow> c'' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds'' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)\n 2. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos, mds, mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos; mds' = mds;\n        mds'' = mds \\<oplus> annos; mem'' = mem';\n        c'' = c\\<^sub>2 \\<and> \\<not> ev\\<^sub>B mem' e\\<rbrakk>\n       \\<Longrightarrow> c'' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds'' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)\n 3. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>1, mds \\<oplus>\n annos, mem''\\<rangle>) \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>2, mds \\<oplus>\n annos, mem''\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> c'' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds'' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)\n 4. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and>\n        mds' = mds \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>1, mds \\<oplus>\n annos, mem''\\<rangle>) \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>2, mds \\<oplus> annos, mem''\\<rangle>);\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)", "apply (erule conjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos, mds, mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos; mds' = mds;\n        mds'' = mds \\<oplus> annos; mem'' = mem'; c'' = c\\<^sub>1;\n        ev\\<^sub>B mem' e\\<rbrakk>\n       \\<Longrightarrow> c'' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds'' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)\n 2. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos, mds, mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos; mds' = mds;\n        mds'' = mds \\<oplus> annos; mem'' = mem';\n        c'' = c\\<^sub>2 \\<and> \\<not> ev\\<^sub>B mem' e\\<rbrakk>\n       \\<Longrightarrow> c'' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds'' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)\n 3. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>1, mds \\<oplus>\n annos, mem''\\<rangle>) \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>2, mds \\<oplus>\n annos, mem''\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> c'' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds'' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)\n 4. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and>\n        mds' = mds \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>1, mds \\<oplus>\n annos, mem''\\<rangle>) \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>2, mds \\<oplus> annos, mem''\\<rangle>);\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos, mds, mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos; mds' = mds;\n        mds'' = mds \\<oplus> annos; mem'' = mem'; c'' = c\\<^sub>1;\n        ev\\<^sub>B mem' e\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>1 =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds \\<oplus> annos = mds \\<or>\n                         (\\<exists>mem''.\n                             \\<langle>c\\<^sub>1, mds \\<oplus>\n           annos, mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''\\<rangle>) \\<or>\n                         (\\<exists>mem''.\n                             \\<langle>c\\<^sub>1, mds \\<oplus>\n           annos, mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''\\<rangle>)\n 2. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos, mds, mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos; mds' = mds;\n        mds'' = mds \\<oplus> annos; mem'' = mem';\n        c'' = c\\<^sub>2 \\<and> \\<not> ev\\<^sub>B mem' e\\<rbrakk>\n       \\<Longrightarrow> c'' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds'' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)\n 3. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>1, mds \\<oplus>\n annos, mem''\\<rangle>) \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>2, mds \\<oplus>\n annos, mem''\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> c'' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds'' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)\n 4. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and>\n        mds' = mds \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>1, mds \\<oplus>\n annos, mem''\\<rangle>) \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>2, mds \\<oplus> annos, mem''\\<rangle>);\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)", "apply (metis loc_reach_refl')"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos, mds, mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos; mds' = mds;\n        mds'' = mds \\<oplus> annos; mem'' = mem';\n        c'' = c\\<^sub>2 \\<and> \\<not> ev\\<^sub>B mem' e\\<rbrakk>\n       \\<Longrightarrow> c'' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds'' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)\n 2. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>1, mds \\<oplus>\n annos, mem''\\<rangle>) \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>2, mds \\<oplus>\n annos, mem''\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> c'' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds'' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)\n 3. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and>\n        mds' = mds \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>1, mds \\<oplus>\n annos, mem''\\<rangle>) \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>2, mds \\<oplus> annos, mem''\\<rangle>);\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)", "apply (metis loc_reach_refl')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>1, mds \\<oplus>\n annos, mem''\\<rangle>) \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>2, mds \\<oplus>\n annos, mem''\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> c'' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds'' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)\n 2. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and>\n        mds' = mds \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>1, mds \\<oplus>\n annos, mem''\\<rangle>) \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>2, mds \\<oplus> annos, mem''\\<rangle>);\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)", "apply (metis loc_reach.step)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                                annos, mds, mem\\<rangle>;\n        c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and>\n        mds' = mds \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>1, mds \\<oplus>\n annos, mem''\\<rangle>) \\<or>\n        (\\<exists>mem''.\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>2, mds \\<oplus> annos, mem''\\<rangle>);\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' =\n                         Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                         annos \\<and>\n                         mds' = mds \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds \\<oplus>\n                  annos, mem''a\\<rangle>) \\<or>\n                         (\\<exists>mem''a.\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds \\<oplus>\n                  annos, mem''a\\<rangle>)", "by (metis loc_reach.mem_diff)"], ["", "lemma if_loc_reach':\n  \"\\<lbrakk> \\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>If e c\\<^sub>1 c\\<^sub>2, mds, mem\\<rangle> \\<rbrakk> \\<Longrightarrow>\n  (c' = If e c\\<^sub>1 c\\<^sub>2 \\<and> mds' = mds) \\<or>\n  (\\<exists> mem''. \\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem''\\<rangle>) \\<or>\n  (\\<exists> mem''. \\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>c\\<^sub>2, mds, mem''\\<rangle>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>c', mds', mem'\\<rangle>\n    \\<in> loc_reach\n           \\<langle>Stmt.If e c\\<^sub>1\n                     c\\<^sub>2, mds, mem\\<rangle> \\<Longrightarrow>\n    c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<and> mds' = mds \\<or>\n    (\\<exists>mem''.\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem''\\<rangle>) \\<or>\n    (\\<exists>mem''.\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach \\<langle>c\\<^sub>2, mds, mem''\\<rangle>)", "using if_loc_reach [where annos = \"[]\"]"], ["proof (prove)\nusing this:\n  \\<langle>?c', ?mds', ?mem'\\<rangle>\n  \\<in> loc_reach\n         \\<langle>Stmt.If ?e ?c\\<^sub>1 ?c\\<^sub>2 \\<otimes>\n                  [], ?mds, ?mem\\<rangle> \\<Longrightarrow>\n  ?c' = Stmt.If ?e ?c\\<^sub>1 ?c\\<^sub>2 \\<otimes> [] \\<and>\n  ?mds' = ?mds \\<or>\n  (\\<exists>mem''.\n      \\<langle>?c', ?mds', ?mem'\\<rangle>\n      \\<in> loc_reach\n             \\<langle>?c\\<^sub>1, ?mds \\<oplus> [], mem''\\<rangle>) \\<or>\n  (\\<exists>mem''.\n      \\<langle>?c', ?mds', ?mem'\\<rangle>\n      \\<in> loc_reach \\<langle>?c\\<^sub>2, ?mds \\<oplus> [], mem''\\<rangle>)\n\ngoal (1 subgoal):\n 1. \\<langle>c', mds', mem'\\<rangle>\n    \\<in> loc_reach\n           \\<langle>Stmt.If e c\\<^sub>1\n                     c\\<^sub>2, mds, mem\\<rangle> \\<Longrightarrow>\n    c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<and> mds' = mds \\<or>\n    (\\<exists>mem''.\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem''\\<rangle>) \\<or>\n    (\\<exists>mem''.\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach \\<langle>c\\<^sub>2, mds, mem''\\<rangle>)", "by simp"], ["", "lemma seq_loc_reach:\n  \"\\<lbrakk> \\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>c\\<^sub>1 ;; c\\<^sub>2, mds, mem\\<rangle> \\<rbrakk> \\<Longrightarrow>\n  (\\<exists> c''. c' = c'' ;; c\\<^sub>2 \\<and> \\<langle>c'', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle>) \\<or>\n  (\\<exists> c'' mds'' mem''. \\<langle>Stop, mds'', mem''\\<rangle> \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle> \\<and> \n                      \\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>c\\<^sub>2, mds'', mem''\\<rangle>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>c', mds', mem'\\<rangle>\n    \\<in> loc_reach\n           \\<langle>c\\<^sub>1 ;;\n                    c\\<^sub>2, mds, mem\\<rangle> \\<Longrightarrow>\n    (\\<exists>c''.\n        c' = c'' ;; c\\<^sub>2 \\<and>\n        \\<langle>c'', mds', mem'\\<rangle>\n        \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle>) \\<or>\n    (\\<exists>c'' mds'' mem''.\n        \\<langle>Stop, mds'', mem''\\<rangle>\n        \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle> \\<and>\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach \\<langle>c\\<^sub>2, mds'', mem''\\<rangle>)", "apply (induct rule: loc_reach.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (\\<exists>c''.\n        fst (fst \\<langle>c\\<^sub>1 ;; c\\<^sub>2, mds, mem\\<rangle>) =\n        c'' ;; c\\<^sub>2 \\<and>\n        \\<langle>c'', snd (fst \\<langle>c\\<^sub>1 ;;\n  c\\<^sub>2, mds, mem\\<rangle>), snd \\<langle>c\\<^sub>1 ;;\n        c\\<^sub>2, mds, mem\\<rangle>\\<rangle>\n        \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle>) \\<or>\n    (\\<exists>c'' mds'' mem''.\n        \\<langle>Stop, mds'', mem''\\<rangle>\n        \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle> \\<and>\n        \\<langle>fst (fst \\<langle>c\\<^sub>1 ;;\n                                   c\\<^sub>2, mds, mem\\<rangle>), snd\n                             (fst \\<langle>c\\<^sub>1 ;;\n     c\\<^sub>2, mds, mem\\<rangle>), snd \\<langle>c\\<^sub>1 ;;\n           c\\<^sub>2, mds, mem\\<rangle>\\<rangle>\n        \\<in> loc_reach \\<langle>c\\<^sub>2, mds'', mem''\\<rangle>)\n 2. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>c\\<^sub>1 ;; c\\<^sub>2, mds, mem\\<rangle>;\n        (\\<exists>c''.\n            c' = c'' ;; c\\<^sub>2 \\<and>\n            \\<langle>c'', mds', mem'\\<rangle>\n            \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle>) \\<or>\n        (\\<exists>c'' mds'' mem''.\n            \\<langle>Stop, mds'', mem''\\<rangle>\n            \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle> \\<and>\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach \\<langle>c\\<^sub>2, mds'', mem''\\<rangle>);\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>c''a.\n                             c'' = c''a ;; c\\<^sub>2 \\<and>\n                             \\<langle>c''a, mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds, mem\\<rangle>) \\<or>\n                         (\\<exists>c''a mds''a mem''a.\n                             \\<langle>Stop, mds''a, mem''a\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds, mem\\<rangle> \\<and>\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds''a, mem''a\\<rangle>)\n 3. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>c\\<^sub>1 ;; c\\<^sub>2, mds, mem\\<rangle>;\n        (\\<exists>c''.\n            c' = c'' ;; c\\<^sub>2 \\<and>\n            \\<langle>c'', mds', mem'\\<rangle>\n            \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle>) \\<or>\n        (\\<exists>c'' mds'' mem''.\n            \\<langle>Stop, mds'', mem''\\<rangle>\n            \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle> \\<and>\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach \\<langle>c\\<^sub>2, mds'', mem''\\<rangle>);\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>c''.\n                             c' = c'' ;; c\\<^sub>2 \\<and>\n                             \\<langle>c'', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds, mem\\<rangle>) \\<or>\n                         (\\<exists>c'' mds'' mem''a.\n                             \\<langle>Stop, mds'', mem''a\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds, mem\\<rangle> \\<and>\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds'', mem''a\\<rangle>)", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<langle>c\\<^sub>1, mds, mem\\<rangle>\n    \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle> \\<or>\n    (\\<exists>mds'' mem''.\n        \\<langle>Stop, mds'', mem''\\<rangle>\n        \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle> \\<and>\n        \\<langle>c\\<^sub>1 ;; c\\<^sub>2, mds, mem\\<rangle>\n        \\<in> loc_reach \\<langle>c\\<^sub>2, mds'', mem''\\<rangle>)\n 2. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>c\\<^sub>1 ;; c\\<^sub>2, mds, mem\\<rangle>;\n        (\\<exists>c''.\n            c' = c'' ;; c\\<^sub>2 \\<and>\n            \\<langle>c'', mds', mem'\\<rangle>\n            \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle>) \\<or>\n        (\\<exists>c'' mds'' mem''.\n            \\<langle>Stop, mds'', mem''\\<rangle>\n            \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle> \\<and>\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach \\<langle>c\\<^sub>2, mds'', mem''\\<rangle>);\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>c''a.\n                             c'' = c''a ;; c\\<^sub>2 \\<and>\n                             \\<langle>c''a, mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds, mem\\<rangle>) \\<or>\n                         (\\<exists>c''a mds''a mem''a.\n                             \\<langle>Stop, mds''a, mem''a\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds, mem\\<rangle> \\<and>\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds''a, mem''a\\<rangle>)\n 3. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>c\\<^sub>1 ;; c\\<^sub>2, mds, mem\\<rangle>;\n        (\\<exists>c''.\n            c' = c'' ;; c\\<^sub>2 \\<and>\n            \\<langle>c'', mds', mem'\\<rangle>\n            \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle>) \\<or>\n        (\\<exists>c'' mds'' mem''.\n            \\<langle>Stop, mds'', mem''\\<rangle>\n            \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle> \\<and>\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach \\<langle>c\\<^sub>2, mds'', mem''\\<rangle>);\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>c''.\n                             c' = c'' ;; c\\<^sub>2 \\<and>\n                             \\<langle>c'', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds, mem\\<rangle>) \\<or>\n                         (\\<exists>c'' mds'' mem''a.\n                             \\<langle>Stop, mds'', mem''a\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds, mem\\<rangle> \\<and>\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds'', mem''a\\<rangle>)", "apply (metis  loc_reach_refl')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>c\\<^sub>1 ;; c\\<^sub>2, mds, mem\\<rangle>;\n        (\\<exists>c''.\n            c' = c'' ;; c\\<^sub>2 \\<and>\n            \\<langle>c'', mds', mem'\\<rangle>\n            \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle>) \\<or>\n        (\\<exists>c'' mds'' mem''.\n            \\<langle>Stop, mds'', mem''\\<rangle>\n            \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle> \\<and>\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach \\<langle>c\\<^sub>2, mds'', mem''\\<rangle>);\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>c''a.\n                             c'' = c''a ;; c\\<^sub>2 \\<and>\n                             \\<langle>c''a, mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds, mem\\<rangle>) \\<or>\n                         (\\<exists>c''a mds''a mem''a.\n                             \\<langle>Stop, mds''a, mem''a\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds, mem\\<rangle> \\<and>\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds''a, mem''a\\<rangle>)\n 2. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>c\\<^sub>1 ;; c\\<^sub>2, mds, mem\\<rangle>;\n        (\\<exists>c''.\n            c' = c'' ;; c\\<^sub>2 \\<and>\n            \\<langle>c'', mds', mem'\\<rangle>\n            \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle>) \\<or>\n        (\\<exists>c'' mds'' mem''.\n            \\<langle>Stop, mds'', mem''\\<rangle>\n            \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle> \\<and>\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach \\<langle>c\\<^sub>2, mds'', mem''\\<rangle>);\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>c''.\n                             c' = c'' ;; c\\<^sub>2 \\<and>\n                             \\<langle>c'', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds, mem\\<rangle>) \\<or>\n                         (\\<exists>c'' mds'' mem''a.\n                             \\<langle>Stop, mds'', mem''a\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds, mem\\<rangle> \\<and>\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds'', mem''a\\<rangle>)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>c\\<^sub>1 ;; c\\<^sub>2, mds, mem\\<rangle>;\n        (\\<exists>c''.\n            c' = c'' ;; c\\<^sub>2 \\<and>\n            \\<langle>c'', mds', mem'\\<rangle>\n            \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle>) \\<or>\n        (\\<exists>mds'' mem''.\n            \\<langle>Stop, mds'', mem''\\<rangle>\n            \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle> \\<and>\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach \\<langle>c\\<^sub>2, mds'', mem''\\<rangle>);\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>c''a.\n                             c'' = c''a ;; c\\<^sub>2 \\<and>\n                             \\<langle>c''a, mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds, mem\\<rangle>) \\<or>\n                         (\\<exists>mds''a mem''a.\n                             \\<langle>Stop, mds''a, mem''a\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds, mem\\<rangle> \\<and>\n                             \\<langle>c'', mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds''a, mem''a\\<rangle>)\n 2. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>c\\<^sub>1 ;; c\\<^sub>2, mds, mem\\<rangle>;\n        (\\<exists>c''.\n            c' = c'' ;; c\\<^sub>2 \\<and>\n            \\<langle>c'', mds', mem'\\<rangle>\n            \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle>) \\<or>\n        (\\<exists>c'' mds'' mem''.\n            \\<langle>Stop, mds'', mem''\\<rangle>\n            \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle> \\<and>\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach \\<langle>c\\<^sub>2, mds'', mem''\\<rangle>);\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>c''.\n                             c' = c'' ;; c\\<^sub>2 \\<and>\n                             \\<langle>c'', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds, mem\\<rangle>) \\<or>\n                         (\\<exists>c'' mds'' mem''a.\n                             \\<langle>Stop, mds'', mem''a\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds, mem\\<rangle> \\<and>\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds'', mem''a\\<rangle>)", "apply (metis (no_types) loc_reach.step loc_reach_refl' seq_elim seq_stop_elim)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>c\\<^sub>1 ;; c\\<^sub>2, mds, mem\\<rangle>;\n        (\\<exists>c''.\n            c' = c'' ;; c\\<^sub>2 \\<and>\n            \\<langle>c'', mds', mem'\\<rangle>\n            \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle>) \\<or>\n        (\\<exists>c'' mds'' mem''.\n            \\<langle>Stop, mds'', mem''\\<rangle>\n            \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle> \\<and>\n            \\<langle>c', mds', mem'\\<rangle>\n            \\<in> loc_reach \\<langle>c\\<^sub>2, mds'', mem''\\<rangle>);\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>c''.\n                             c' = c'' ;; c\\<^sub>2 \\<and>\n                             \\<langle>c'', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds, mem\\<rangle>) \\<or>\n                         (\\<exists>c'' mds'' mem''a.\n                             \\<langle>Stop, mds'', mem''a\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1, mds, mem\\<rangle> \\<and>\n                             \\<langle>c', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>2, mds'', mem''a\\<rangle>)", "by (metis (lifting) loc_reach.mem_diff)"], ["", "lemma seq_doesnt_read:\n  \"\\<lbrakk> doesnt_read c x \\<rbrakk> \\<Longrightarrow> doesnt_read (c ;; c') x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doesnt_read c x \\<Longrightarrow> doesnt_read (c ;; c') x", "apply (auto simp: doesnt_read_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mds mem c'a mds' mem' v va.\n       \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                   \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                   (\\<forall>v.\n                       \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n                   (\\<forall>v.\n                       \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'\\<rangle>);\n        \\<langle>c ;; c', mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c'a, mds', mem'\\<rangle>;\n        (\\<langle>c ;; c', mds, mem(x := v)\\<rangle>,\n         \\<langle>c'a, mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w\\<rbrakk>\n       \\<Longrightarrow> \\<langle>c ;; c', mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c'a, mds', mem'(x := va)\\<rangle>", "apply (rename_tac mds mem c'a mds' mem' v va)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mds mem c'a mds' mem' v va.\n       \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                   \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                   (\\<forall>v.\n                       \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n                   (\\<forall>v.\n                       \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'\\<rangle>);\n        \\<langle>c ;; c', mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c'a, mds', mem'\\<rangle>;\n        (\\<langle>c ;; c', mds, mem(x := v)\\<rangle>,\n         \\<langle>c'a, mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w\\<rbrakk>\n       \\<Longrightarrow> \\<langle>c ;; c', mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c'a, mds', mem'(x := va)\\<rangle>", "apply (case_tac \"c = Stop\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds mem c'a mds' mem' v va.\n       \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                   \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                   (\\<forall>v.\n                       \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n                   (\\<forall>v.\n                       \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'\\<rangle>);\n        \\<langle>c ;; c', mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c'a, mds', mem'\\<rangle>;\n        (\\<langle>c ;; c', mds, mem(x := v)\\<rangle>,\n         \\<langle>c'a, mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<langle>c ;; c', mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c'a, mds', mem'(x := va)\\<rangle>\n 2. \\<And>mds mem c'a mds' mem' v va.\n       \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                   \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                   (\\<forall>v.\n                       \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n                   (\\<forall>v.\n                       \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'\\<rangle>);\n        \\<langle>c ;; c', mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c'a, mds', mem'\\<rangle>;\n        (\\<langle>c ;; c', mds, mem(x := v)\\<rangle>,\n         \\<langle>c'a, mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        c \\<noteq> Stop\\<rbrakk>\n       \\<Longrightarrow> \\<langle>c ;; c', mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c'a, mds', mem'(x := va)\\<rangle>", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds mem c'a mds' mem' v va.\n       \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                   \\<langle>Stop, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                   (\\<forall>v.\n                       \\<langle>Stop, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n                   (\\<forall>v.\n                       \\<langle>Stop, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'\\<rangle>);\n        \\<langle>Stop ;; c', mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c'a, mds', mem'\\<rangle>;\n        (\\<langle>Stop ;; c', mds, mem(x := v)\\<rangle>,\n         \\<langle>c'a, mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Stop ;; c', mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c'a, mds', mem'(x := va)\\<rangle>\n 2. \\<And>mds mem c'a mds' mem' v va.\n       \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                   \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                   (\\<forall>v.\n                       \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n                   (\\<forall>v.\n                       \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'\\<rangle>);\n        \\<langle>c ;; c', mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c'a, mds', mem'\\<rangle>;\n        (\\<langle>c ;; c', mds, mem(x := v)\\<rangle>,\n         \\<langle>c'a, mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        c \\<noteq> Stop\\<rbrakk>\n       \\<Longrightarrow> \\<langle>c ;; c', mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c'a, mds', mem'(x := va)\\<rangle>", "apply (subgoal_tac \"c'a = c' \\<and> mds' = mds \\<and> mem' = mem\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>mds mem c'a mds' mem' v va.\n       \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                   \\<langle>Stop, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                   (\\<forall>v.\n                       \\<langle>Stop, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n                   (\\<forall>v.\n                       \\<langle>Stop, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'\\<rangle>);\n        \\<langle>Stop ;; c', mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c'a, mds', mem'\\<rangle>;\n        (\\<langle>Stop ;; c', mds, mem(x := v)\\<rangle>,\n         \\<langle>c'a, mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        c = Stop; c'a = c' \\<and> mds' = mds \\<and> mem' = mem\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Stop ;; c', mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c'a, mds', mem'(x := va)\\<rangle>\n 2. \\<And>mds mem c'a mds' mem' v va.\n       \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                   \\<langle>Stop, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                   (\\<forall>v.\n                       \\<langle>Stop, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n                   (\\<forall>v.\n                       \\<langle>Stop, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'\\<rangle>);\n        \\<langle>Stop ;; c', mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c'a, mds', mem'\\<rangle>;\n        (\\<langle>Stop ;; c', mds, mem(x := v)\\<rangle>,\n         \\<langle>c'a, mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> c'a = c' \\<and> mds' = mds \\<and> mem' = mem\n 3. \\<And>mds mem c'a mds' mem' v va.\n       \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                   \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                   (\\<forall>v.\n                       \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n                   (\\<forall>v.\n                       \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'\\<rangle>);\n        \\<langle>c ;; c', mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c'a, mds', mem'\\<rangle>;\n        (\\<langle>c ;; c', mds, mem(x := v)\\<rangle>,\n         \\<langle>c'a, mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        c \\<noteq> Stop\\<rbrakk>\n       \\<Longrightarrow> \\<langle>c ;; c', mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c'a, mds', mem'(x := va)\\<rangle>", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>mds mem c'a v va.\n       \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                   \\<langle>Stop, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                   (\\<forall>v.\n                       \\<langle>Stop, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n                   (\\<forall>v.\n                       \\<langle>Stop, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'\\<rangle>);\n        \\<langle>Stop ;; c', mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c', mds, mem\\<rangle>;\n        (\\<langle>Stop ;; c', mds, mem(x := v)\\<rangle>,\n         \\<langle>c', mds, mem\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        c = Stop; c'a = c'\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Stop ;; c', mds, mem\n                         (x := va)\\<rangle> \\<leadsto> \\<langle>c', mds, mem\n                         (x := va)\\<rangle>\n 2. \\<And>mds mem c'a mds' mem' v va.\n       \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                   \\<langle>Stop, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                   (\\<forall>v.\n                       \\<langle>Stop, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n                   (\\<forall>v.\n                       \\<langle>Stop, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'\\<rangle>);\n        \\<langle>Stop ;; c', mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c'a, mds', mem'\\<rangle>;\n        (\\<langle>Stop ;; c', mds, mem(x := v)\\<rangle>,\n         \\<langle>c'a, mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> c'a = c' \\<and> mds' = mds \\<and> mem' = mem\n 3. \\<And>mds mem c'a mds' mem' v va.\n       \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                   \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                   (\\<forall>v.\n                       \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n                   (\\<forall>v.\n                       \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'\\<rangle>);\n        \\<langle>c ;; c', mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c'a, mds', mem'\\<rangle>;\n        (\\<langle>c ;; c', mds, mem(x := v)\\<rangle>,\n         \\<langle>c'a, mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        c \\<noteq> Stop\\<rbrakk>\n       \\<Longrightarrow> \\<langle>c ;; c', mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c'a, mds', mem'(x := va)\\<rangle>", "apply (metis cxt_eval eval\\<^sub>w.unannotated eval\\<^sub>w_simple.seq_stop)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds mem c'a mds' mem' v va.\n       \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                   \\<langle>Stop, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                   (\\<forall>v.\n                       \\<langle>Stop, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n                   (\\<forall>v.\n                       \\<langle>Stop, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'\\<rangle>);\n        \\<langle>Stop ;; c', mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c'a, mds', mem'\\<rangle>;\n        (\\<langle>Stop ;; c', mds, mem(x := v)\\<rangle>,\n         \\<langle>c'a, mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> c'a = c' \\<and> mds' = mds \\<and> mem' = mem\n 2. \\<And>mds mem c'a mds' mem' v va.\n       \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                   \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                   (\\<forall>v.\n                       \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n                   (\\<forall>v.\n                       \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'\\<rangle>);\n        \\<langle>c ;; c', mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c'a, mds', mem'\\<rangle>;\n        (\\<langle>c ;; c', mds, mem(x := v)\\<rangle>,\n         \\<langle>c'a, mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        c \\<noteq> Stop\\<rbrakk>\n       \\<Longrightarrow> \\<langle>c ;; c', mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c'a, mds', mem'(x := va)\\<rangle>", "apply (metis (lifting) seq_stop_elim)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mds mem c'a mds' mem' v va.\n       \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                   \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                   (\\<forall>v.\n                       \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n                   (\\<forall>v.\n                       \\<langle>c, mds, mem(x := v)\\<rangle> \\<leadsto>\n                       \\<langle>c', mds', mem'\\<rangle>);\n        \\<langle>c ;; c', mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c'a, mds', mem'\\<rangle>;\n        (\\<langle>c ;; c', mds, mem(x := v)\\<rangle>,\n         \\<langle>c'a, mds', mem'\\<rangle>)\n        \\<notin> eval\\<^sub>w;\n        c \\<noteq> Stop\\<rbrakk>\n       \\<Longrightarrow> \\<langle>c ;; c', mds, mem\n                         (x := va)\\<rangle> \\<leadsto>\n                         \\<langle>c'a, mds', mem'(x := va)\\<rangle>", "by (metis (lifting, no_types) eval\\<^sub>w.seq seq_elim)"], ["", "lemma seq_doesnt_modify:\n  \"\\<lbrakk> doesnt_modify c x \\<rbrakk> \\<Longrightarrow> doesnt_modify (c ;; c') x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doesnt_modify c x \\<Longrightarrow> doesnt_modify (c ;; c') x", "apply (auto simp: doesnt_modify_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mds mem c'a mds' mem'.\n       \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                   \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                   mem x = mem' x;\n        \\<langle>c ;; c', mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c'a, mds', mem'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> mem x = mem' x", "apply (case_tac \"c = Stop\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds mem c'a mds' mem'.\n       \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                   \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                   mem x = mem' x;\n        \\<langle>c ;; c', mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c'a, mds', mem'\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> mem x = mem' x\n 2. \\<And>mds mem c'a mds' mem'.\n       \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                   \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                   mem x = mem' x;\n        \\<langle>c ;; c', mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c'a, mds', mem'\\<rangle>;\n        c \\<noteq> Stop\\<rbrakk>\n       \\<Longrightarrow> mem x = mem' x", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds mem c'a mds' mem'.\n       \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                   \\<langle>Stop, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                   mem x = mem' x;\n        \\<langle>Stop ;; c', mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c'a, mds', mem'\\<rangle>;\n        c = Stop\\<rbrakk>\n       \\<Longrightarrow> mem x = mem' x\n 2. \\<And>mds mem c'a mds' mem'.\n       \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                   \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                   mem x = mem' x;\n        \\<langle>c ;; c', mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c'a, mds', mem'\\<rangle>;\n        c \\<noteq> Stop\\<rbrakk>\n       \\<Longrightarrow> mem x = mem' x", "apply (metis (lifting) seq_stop_elim)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mds mem c'a mds' mem'.\n       \\<lbrakk>\\<forall>mds mem c' mds' mem'.\n                   \\<langle>c, mds, mem\\<rangle> \\<leadsto>\n                   \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n                   mem x = mem' x;\n        \\<langle>c ;; c', mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c'a, mds', mem'\\<rangle>;\n        c \\<noteq> Stop\\<rbrakk>\n       \\<Longrightarrow> mem x = mem' x", "by (metis (no_types) seq_elim)"], ["", "inductive_cases seq_stop_elim': \"\\<langle>Stop ;; c, mds, mem\\<rangle> \\<leadsto> \\<langle>c', mds', mem'\\<rangle>\""], ["", "lemma seq_stop_elim: \"\\<langle>Stop ;; c, mds, mem\\<rangle> \\<leadsto> \\<langle>c', mds', mem'\\<rangle> \\<Longrightarrow>\n  c' = c \\<and> mds' = mds \\<and> mem' = mem\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>Stop ;; c, mds, mem\\<rangle> \\<leadsto>\n    \\<langle>c', mds', mem'\\<rangle> \\<Longrightarrow>\n    c' = c \\<and> mds' = mds \\<and> mem' = mem", "apply (erule seq_stop_elim')"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ca c'a E.\n       \\<lbrakk>Stop ;; c = cxt_to_stmt E ca; c' = cxt_to_stmt E c'a;\n        mds' = mds; eval\\<^sub>w_simple_abv (ca, mem) (c'a, mem')\\<rbrakk>\n       \\<Longrightarrow> c' = c \\<and> mds' = mds \\<and> mem' = mem\n 2. \\<And>c\\<^sub>1'.\n       \\<lbrakk>c' = c\\<^sub>1' ;; c;\n        \\<langle>Stop, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c\\<^sub>1', mds', mem'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> c' = c \\<and> mds' = mds \\<and> mem' = mem\n 3. \\<And>ca mu c'a E.\n       \\<lbrakk>Stop ;; c = cxt_to_stmt E (ca@[mu]); c' = cxt_to_stmt E c'a;\n        \\<langle>ca, update_modes mu mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c'a, mds', mem'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> c' = c \\<and> mds' = mds \\<and> mem' = mem", "apply (metis eval\\<^sub>w.unannotated seq_stop_elim)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1'.\n       \\<lbrakk>c' = c\\<^sub>1' ;; c;\n        \\<langle>Stop, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c\\<^sub>1', mds', mem'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> c' = c \\<and> mds' = mds \\<and> mem' = mem\n 2. \\<And>ca mu c'a E.\n       \\<lbrakk>Stop ;; c = cxt_to_stmt E (ca@[mu]); c' = cxt_to_stmt E c'a;\n        \\<langle>ca, update_modes mu mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c'a, mds', mem'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> c' = c \\<and> mds' = mds \\<and> mem' = mem", "apply (metis eval\\<^sub>w.seq seq_stop_elim)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ca mu c'a E.\n       \\<lbrakk>Stop ;; c = cxt_to_stmt E (ca@[mu]); c' = cxt_to_stmt E c'a;\n        \\<langle>ca, update_modes mu mds, mem\\<rangle> \\<leadsto>\n        \\<langle>c'a, mds', mem'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> c' = c \\<and> mds' = mds \\<and> mem' = mem", "by (metis (lifting) Stmt.simps(28) Stmt.simps(34) cxt_seq_elim)"], ["", "lemma seq_split:\n  \"\\<lbrakk> \\<langle>Stop, mds', mem'\\<rangle> \\<in> loc_reach \\<langle>c\\<^sub>1 ;; c\\<^sub>2, mds, mem\\<rangle> \\<rbrakk> \\<Longrightarrow>\n  \\<exists> mds'' mem''. \\<langle>Stop, mds'', mem''\\<rangle> \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle> \\<and>\n                 \\<langle>Stop, mds', mem'\\<rangle> \\<in> loc_reach \\<langle>c\\<^sub>2, mds'', mem''\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>Stop, mds', mem'\\<rangle>\n    \\<in> loc_reach\n           \\<langle>c\\<^sub>1 ;;\n                    c\\<^sub>2, mds, mem\\<rangle> \\<Longrightarrow>\n    \\<exists>mds'' mem''.\n       \\<langle>Stop, mds'', mem''\\<rangle>\n       \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle> \\<and>\n       \\<langle>Stop, mds', mem'\\<rangle>\n       \\<in> loc_reach \\<langle>c\\<^sub>2, mds'', mem''\\<rangle>", "apply (drule seq_loc_reach)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>c''.\n        Stop = c'' ;; c\\<^sub>2 \\<and>\n        \\<langle>c'', mds', mem'\\<rangle>\n        \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle>) \\<or>\n    (\\<exists>c'' mds'' mem''.\n        \\<langle>Stop, mds'', mem''\\<rangle>\n        \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle> \\<and>\n        \\<langle>Stop, mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>c\\<^sub>2, mds'', mem''\\<rangle>) \\<Longrightarrow>\n    \\<exists>mds'' mem''.\n       \\<langle>Stop, mds'', mem''\\<rangle>\n       \\<in> loc_reach \\<langle>c\\<^sub>1, mds, mem\\<rangle> \\<and>\n       \\<langle>Stop, mds', mem'\\<rangle>\n       \\<in> loc_reach \\<langle>c\\<^sub>2, mds'', mem''\\<rangle>", "by (metis Stmt.simps(41))"], ["", "lemma while_eval:\n  \"\\<langle>While e c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto> \\<langle>(If e (c ;; While e c) Stop), mds \\<oplus> annos, mem\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>While e c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n    \\<langle>Stmt.If e (c ;; While e c)\n              Stop, mds \\<oplus> annos, mem\\<rangle>", "apply (induct annos arbitrary: mds)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds.\n       \\<langle>While e c \\<otimes> [], mds, mem\\<rangle> \\<leadsto>\n       \\<langle>Stmt.If e (c ;; While e c)\n                 Stop, mds \\<oplus> [], mem\\<rangle>\n 2. \\<And>a annos mds.\n       (\\<And>mds.\n           \\<langle>While e c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n           \\<langle>Stmt.If e (c ;; While e c)\n                     Stop, mds \\<oplus>\n                           annos, mem\\<rangle>) \\<Longrightarrow>\n       \\<langle>While e c \\<otimes>\n                (a # annos), mds, mem\\<rangle> \\<leadsto>\n       \\<langle>Stmt.If e (c ;; While e c)\n                 Stop, mds \\<oplus> (a # annos), mem\\<rangle>", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds.\n       \\<langle>While e c, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>Stmt.If e (c ;; While e c) Stop, mds, mem\\<rangle>\n 2. \\<And>a annos mds.\n       (\\<And>mds.\n           \\<langle>While e c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n           \\<langle>Stmt.If e (c ;; While e c)\n                     Stop, mds \\<oplus>\n                           annos, mem\\<rangle>) \\<Longrightarrow>\n       \\<langle>While e c \\<otimes>\n                (a # annos), mds, mem\\<rangle> \\<leadsto>\n       \\<langle>Stmt.If e (c ;; While e c)\n                 Stop, mds \\<oplus> (a # annos), mem\\<rangle>", "apply (rule cxt_eval)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds.\n       \\<langle>cxt_to_stmt [] (While e c), mds, mem\\<rangle> \\<leadsto>\n       \\<langle>cxt_to_stmt []\n                 (Stmt.If e (c ;; While e c) Stop), mds, mem\\<rangle>\n 2. \\<And>a annos mds.\n       (\\<And>mds.\n           \\<langle>While e c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n           \\<langle>Stmt.If e (c ;; While e c)\n                     Stop, mds \\<oplus>\n                           annos, mem\\<rangle>) \\<Longrightarrow>\n       \\<langle>While e c \\<otimes>\n                (a # annos), mds, mem\\<rangle> \\<leadsto>\n       \\<langle>Stmt.If e (c ;; While e c)\n                 Stop, mds \\<oplus> (a # annos), mem\\<rangle>", "apply (rule eval\\<^sub>w.unannotated)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds.\n       eval\\<^sub>w_simple_abv (While e c, mem)\n        (Stmt.If e (c ;; While e c) Stop, mem)\n 2. \\<And>a annos mds.\n       (\\<And>mds.\n           \\<langle>While e c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n           \\<langle>Stmt.If e (c ;; While e c)\n                     Stop, mds \\<oplus>\n                           annos, mem\\<rangle>) \\<Longrightarrow>\n       \\<langle>While e c \\<otimes>\n                (a # annos), mds, mem\\<rangle> \\<leadsto>\n       \\<langle>Stmt.If e (c ;; While e c)\n                 Stop, mds \\<oplus> (a # annos), mem\\<rangle>", "apply (metis (lifting) eval\\<^sub>w_simple.while)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a annos mds.\n       (\\<And>mds.\n           \\<langle>While e c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n           \\<langle>Stmt.If e (c ;; While e c)\n                     Stop, mds \\<oplus>\n                           annos, mem\\<rangle>) \\<Longrightarrow>\n       \\<langle>While e c \\<otimes>\n                (a # annos), mds, mem\\<rangle> \\<leadsto>\n       \\<langle>Stmt.If e (c ;; While e c)\n                 Stop, mds \\<oplus> (a # annos), mem\\<rangle>", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a annos mds.\n       (\\<And>mds.\n           \\<langle>While e c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n           \\<langle>Stmt.If e (c ;; While e c)\n                     Stop, mds \\<oplus>\n                           annos, mem\\<rangle>) \\<Longrightarrow>\n       \\<langle>While e c \\<otimes> annos@[a], mds, mem\\<rangle> \\<leadsto>\n       \\<langle>Stmt.If e (c ;; While e c)\n                 Stop, update_modes a mds \\<oplus> annos, mem\\<rangle>", "by (metis cxt_eval eval\\<^sub>w.decl)"], ["", "lemma while_eval':\n  \"\\<langle>While e c, mds, mem\\<rangle> \\<leadsto> \\<langle>If e (c ;; While e c) Stop, mds, mem\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>While e c, mds, mem\\<rangle> \\<leadsto>\n    \\<langle>Stmt.If e (c ;; While e c) Stop, mds, mem\\<rangle>", "using while_eval [where annos = \"[]\"]"], ["proof (prove)\nusing this:\n  \\<langle>While ?e ?c \\<otimes> [], ?mds, ?mem\\<rangle> \\<leadsto>\n  \\<langle>Stmt.If ?e (?c ;; While ?e ?c)\n            Stop, ?mds \\<oplus> [], ?mem\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<langle>While e c, mds, mem\\<rangle> \\<leadsto>\n    \\<langle>Stmt.If e (c ;; While e c) Stop, mds, mem\\<rangle>", "by auto"], ["", "lemma while_eval_elim:\n  \"\\<lbrakk> \\<langle>While e c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto> \\<langle>c', mds', mem'\\<rangle> \\<rbrakk> \\<Longrightarrow>\n   (c' = If e (c ;; While e c) Stop \\<and> mds' = mds \\<oplus> annos \\<and> mem' = mem)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>While e c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n    \\<langle>c', mds', mem'\\<rangle> \\<Longrightarrow>\n    c' = Stmt.If e (c ;; While e c) Stop \\<and>\n    mds' = mds \\<oplus> annos \\<and> mem' = mem", "apply (rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<langle>While e c \\<otimes>\n                      annos, mds, mem\\<rangle> \\<leadsto>\n             \\<langle>c', mds', mem'\\<rangle>;\n     \\<not> (c' = Stmt.If e (c ;; While e c) Stop \\<and>\n             mds' = mds \\<oplus> annos \\<and> mem' = mem)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (insert while_eval deterministic)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<langle>While e c \\<otimes>\n                      annos, mds, mem\\<rangle> \\<leadsto>\n             \\<langle>c', mds', mem'\\<rangle>;\n     \\<not> (c' = Stmt.If e (c ;; While e c) Stop \\<and>\n             mds' = mds \\<oplus> annos \\<and> mem' = mem);\n     \\<And>e c annos mds mem.\n        \\<langle>While e c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n        \\<langle>Stmt.If e (c ;; While e c)\n                  Stop, mds \\<oplus> annos, mem\\<rangle>;\n     \\<And>lc lc' lc''.\n        \\<lbrakk>lc \\<leadsto> lc'; lc \\<leadsto> lc''\\<rbrakk>\n        \\<Longrightarrow> lc' = lc''\\<rbrakk>\n    \\<Longrightarrow> False", "by blast"], ["", "lemma while_eval_elim':\n  \"\\<lbrakk> \\<langle>While e c, mds, mem\\<rangle> \\<leadsto> \\<langle>c', mds', mem'\\<rangle> \\<rbrakk> \\<Longrightarrow>\n   (c' = If e (c ;; While e c) Stop \\<and> mds' = mds \\<and> mem' = mem)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>While e c, mds, mem\\<rangle> \\<leadsto>\n    \\<langle>c', mds', mem'\\<rangle> \\<Longrightarrow>\n    c' = Stmt.If e (c ;; While e c) Stop \\<and> mds' = mds \\<and> mem' = mem", "using while_eval_elim [where annos = \"[]\"]"], ["proof (prove)\nusing this:\n  \\<langle>While ?e ?c \\<otimes> [], ?mds, ?mem\\<rangle> \\<leadsto>\n  \\<langle>?c', ?mds', ?mem'\\<rangle> \\<Longrightarrow>\n  ?c' = Stmt.If ?e (?c ;; While ?e ?c) Stop \\<and>\n  ?mds' = ?mds \\<oplus> [] \\<and> ?mem' = ?mem\n\ngoal (1 subgoal):\n 1. \\<langle>While e c, mds, mem\\<rangle> \\<leadsto>\n    \\<langle>c', mds', mem'\\<rangle> \\<Longrightarrow>\n    c' = Stmt.If e (c ;; While e c) Stop \\<and> mds' = mds \\<and> mem' = mem", "by auto"], ["", "lemma while_doesnt_read:\n  \"\\<lbrakk> x \\<notin> bexp_vars e \\<rbrakk> \\<Longrightarrow> doesnt_read (While e c \\<otimes> annos) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> bexp_vars e \\<Longrightarrow>\n    doesnt_read (While e c \\<otimes> annos) x", "unfolding doesnt_read_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> bexp_vars e \\<Longrightarrow>\n    \\<forall>mds mem c' mds' mem'.\n       \\<langle>While e c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n       (\\<forall>v.\n           \\<langle>While e c \\<otimes> annos, mds, mem\n           (x := v)\\<rangle> \\<leadsto> \\<langle>c', mds', mem'\n           (x := v)\\<rangle>) \\<or>\n       (\\<forall>v.\n           \\<langle>While e c \\<otimes> annos, mds, mem\n           (x := v)\\<rangle> \\<leadsto> \\<langle>c', mds', mem'\\<rangle>)", "using while_eval while_eval_elim"], ["proof (prove)\nusing this:\n  \\<langle>While ?e ?c \\<otimes> ?annos, ?mds, ?mem\\<rangle> \\<leadsto>\n  \\<langle>Stmt.If ?e (?c ;; While ?e ?c)\n            Stop, ?mds \\<oplus> ?annos, ?mem\\<rangle>\n  \\<langle>While ?e ?c \\<otimes> ?annos, ?mds, ?mem\\<rangle> \\<leadsto>\n  \\<langle>?c', ?mds', ?mem'\\<rangle> \\<Longrightarrow>\n  ?c' = Stmt.If ?e (?c ;; While ?e ?c) Stop \\<and>\n  ?mds' = ?mds \\<oplus> ?annos \\<and> ?mem' = ?mem\n\ngoal (1 subgoal):\n 1. x \\<notin> bexp_vars e \\<Longrightarrow>\n    \\<forall>mds mem c' mds' mem'.\n       \\<langle>While e c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n       (\\<forall>v.\n           \\<langle>While e c \\<otimes> annos, mds, mem\n           (x := v)\\<rangle> \\<leadsto> \\<langle>c', mds', mem'\n           (x := v)\\<rangle>) \\<or>\n       (\\<forall>v.\n           \\<langle>While e c \\<otimes> annos, mds, mem\n           (x := v)\\<rangle> \\<leadsto> \\<langle>c', mds', mem'\\<rangle>)", "by metis"], ["", "lemma while_doesnt_modify:\n  \"doesnt_modify (While e c \\<otimes> annos) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doesnt_modify (While e c \\<otimes> annos) x", "unfolding doesnt_modify_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>mds mem c' mds' mem'.\n       \\<langle>While e c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n       mem x = mem' x", "using while_eval_elim"], ["proof (prove)\nusing this:\n  \\<langle>While ?e ?c \\<otimes> ?annos, ?mds, ?mem\\<rangle> \\<leadsto>\n  \\<langle>?c', ?mds', ?mem'\\<rangle> \\<Longrightarrow>\n  ?c' = Stmt.If ?e (?c ;; While ?e ?c) Stop \\<and>\n  ?mds' = ?mds \\<oplus> ?annos \\<and> ?mem' = ?mem\n\ngoal (1 subgoal):\n 1. \\<forall>mds mem c' mds' mem'.\n       \\<langle>While e c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n       \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n       mem x = mem' x", "by metis"], ["", "(* TODO: try to find a better solution to this: *)"], ["", "lemma disjE3:\n  \"\\<lbrakk> A \\<or> B \\<or> C ; A \\<Longrightarrow> P ; B \\<Longrightarrow> P ; C \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<or> B \\<or> C; A \\<Longrightarrow> P;\n     B \\<Longrightarrow> P; C \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by auto"], ["", "lemma disjE5:\n  \"\\<lbrakk> A \\<or> B \\<or> C \\<or> D \\<or> E ; A \\<Longrightarrow> P ; B \\<Longrightarrow> P ; C \\<Longrightarrow> P ; D \\<Longrightarrow> P ; E \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<or> B \\<or> C \\<or> D \\<or> E; A \\<Longrightarrow> P;\n     B \\<Longrightarrow> P; C \\<Longrightarrow> P; D \\<Longrightarrow> P;\n     E \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by auto"], ["", "lemma if_doesnt_read':\n  \"x \\<notin> bexp_vars e \\<Longrightarrow> doesnt_read (If e c\\<^sub>1 c\\<^sub>2) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> bexp_vars e \\<Longrightarrow>\n    doesnt_read (Stmt.If e c\\<^sub>1 c\\<^sub>2) x", "using if_doesnt_read [where annos = \"[]\"]"], ["proof (prove)\nusing this:\n  ?x \\<notin> bexp_vars ?e \\<Longrightarrow>\n  doesnt_read (Stmt.If ?e ?c\\<^sub>1 ?c\\<^sub>2 \\<otimes> []) ?x\n\ngoal (1 subgoal):\n 1. x \\<notin> bexp_vars e \\<Longrightarrow>\n    doesnt_read (Stmt.If e c\\<^sub>1 c\\<^sub>2) x", "by auto"], ["", "theorem mode_type_sound:\n  assumes typeable: \"\\<turnstile> mds\\<^sub>1 { c } mds\\<^sub>1'\"\n  assumes mode_le: \"mds\\<^sub>2 \\<le> mds\\<^sub>1\"\n  shows \"\\<forall> mem. (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle> \\<in> loc_reach \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow> mds\\<^sub>2' \\<le> mds\\<^sub>1') \\<and> \n                locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>mem.\n       (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n        mds\\<^sub>2' \\<sqsubseteq> mds\\<^sub>1') \\<and>\n       locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>", "using typeable mode_le"], ["proof (prove)\nusing this:\n  \\<turnstile> mds\\<^sub>1 { c } mds\\<^sub>1'\n  mds\\<^sub>2 \\<sqsubseteq> mds\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<forall>mem.\n       (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n        mds\\<^sub>2' \\<sqsubseteq> mds\\<^sub>1') \\<and>\n       locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>", "proof (induct arbitrary: mds\\<^sub>2 mds\\<^sub>2' mem' mem rule: mode_type.induct)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>mds annos mds\\<^sub>2 mds\\<^sub>2' mem'.\n       mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n       \\<forall>mem.\n          (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n           \\<in> loc_reach\n                  \\<langle>Skip \\<otimes>\n                           annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n           mds\\<^sub>2' \\<sqsubseteq> mds \\<oplus> annos) \\<and>\n          locally_sound_mode_use\n           \\<langle>Skip \\<otimes> annos, mds\\<^sub>2, mem\\<rangle>\n 2. \\<And>x mds e annos mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>x \\<notin> mds GuarNoWrite;\n        aexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>(x \\<leftarrow> e) \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq>\n                             mds \\<oplus> annos) \\<and>\n                            locally_sound_mode_use\n                             \\<langle>(x \\<leftarrow> e) \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 3. \\<And>mds annos c\\<^sub>1 mds'' c\\<^sub>2 e mds\\<^sub>2 mds\\<^sub>2'\n       mem'.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>Stmt.If e c\\<^sub>1\n        c\\<^sub>2 \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>Stmt.If e c\\<^sub>1\n c\\<^sub>2 \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 4. \\<And>mds' mds annos c e mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>mds' = mds \\<oplus> annos; \\<turnstile> mds' { c } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> mds' GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>While e c \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>While e c \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 5. \\<And>mds c\\<^sub>1 mds' c\\<^sub>2 mds'' mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1 ;;\n       c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c\\<^sub>1 ;;\nc\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\n 6. \\<And>mds\\<^sub>2 c mds\\<^sub>2' mds\\<^sub>1 mds\\<^sub>1' mds\\<^sub>2''\n       mds\\<^sub>2''' mem'.\n       \\<lbrakk>\\<turnstile> mds\\<^sub>2 { c } mds\\<^sub>2';\n        \\<And>mds\\<^sub>2'' mds\\<^sub>2''' mem'.\n           mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2''' \\<sqsubseteq> mds\\<^sub>2') \\<and>\n              locally_sound_mode_use\n               \\<langle>c, mds\\<^sub>2'', mem\\<rangle>;\n        mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2;\n        mds\\<^sub>2' \\<sqsubseteq> mds\\<^sub>1';\n        mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2''' \\<sqsubseteq>\n                             mds\\<^sub>1') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c, mds\\<^sub>2'', mem\\<rangle>", "case (skip mds annos)"], ["proof (state)\nthis:\n  mds\\<^sub>2 \\<sqsubseteq> mds\n\ngoal (6 subgoals):\n 1. \\<And>mds annos mds\\<^sub>2 mds\\<^sub>2' mem'.\n       mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n       \\<forall>mem.\n          (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n           \\<in> loc_reach\n                  \\<langle>Skip \\<otimes>\n                           annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n           mds\\<^sub>2' \\<sqsubseteq> mds \\<oplus> annos) \\<and>\n          locally_sound_mode_use\n           \\<langle>Skip \\<otimes> annos, mds\\<^sub>2, mem\\<rangle>\n 2. \\<And>x mds e annos mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>x \\<notin> mds GuarNoWrite;\n        aexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>(x \\<leftarrow> e) \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq>\n                             mds \\<oplus> annos) \\<and>\n                            locally_sound_mode_use\n                             \\<langle>(x \\<leftarrow> e) \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 3. \\<And>mds annos c\\<^sub>1 mds'' c\\<^sub>2 e mds\\<^sub>2 mds\\<^sub>2'\n       mem'.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>Stmt.If e c\\<^sub>1\n        c\\<^sub>2 \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>Stmt.If e c\\<^sub>1\n c\\<^sub>2 \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 4. \\<And>mds' mds annos c e mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>mds' = mds \\<oplus> annos; \\<turnstile> mds' { c } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> mds' GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>While e c \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>While e c \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 5. \\<And>mds c\\<^sub>1 mds' c\\<^sub>2 mds'' mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1 ;;\n       c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c\\<^sub>1 ;;\nc\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\n 6. \\<And>mds\\<^sub>2 c mds\\<^sub>2' mds\\<^sub>1 mds\\<^sub>1' mds\\<^sub>2''\n       mds\\<^sub>2''' mem'.\n       \\<lbrakk>\\<turnstile> mds\\<^sub>2 { c } mds\\<^sub>2';\n        \\<And>mds\\<^sub>2'' mds\\<^sub>2''' mem'.\n           mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2''' \\<sqsubseteq> mds\\<^sub>2') \\<and>\n              locally_sound_mode_use\n               \\<langle>c, mds\\<^sub>2'', mem\\<rangle>;\n        mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2;\n        mds\\<^sub>2' \\<sqsubseteq> mds\\<^sub>1';\n        mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2''' \\<sqsubseteq>\n                             mds\\<^sub>1') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c, mds\\<^sub>2'', mem\\<rangle>", "thus ?case"], ["proof (prove)\nusing this:\n  mds\\<^sub>2 \\<sqsubseteq> mds\n\ngoal (1 subgoal):\n 1. \\<forall>mem.\n       (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>Skip \\<otimes>\n                        annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n        mds\\<^sub>2' \\<sqsubseteq> mds \\<oplus> annos) \\<and>\n       locally_sound_mode_use\n        \\<langle>Skip \\<otimes> annos, mds\\<^sub>2, mem\\<rangle>", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mem.\n       \\<lbrakk>mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>Skip \\<otimes>\n                        annos, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> mds\\<^sub>2' \\<sqsubseteq> mds \\<oplus> annos\n 2. \\<And>mem.\n       mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n       locally_sound_mode_use\n        \\<langle>Skip \\<otimes> annos, mds\\<^sub>2, mem\\<rangle>", "apply (metis (lifting) skip_eval_step skip_loc_reach stop_no_eval update_preserves_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mem.\n       mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n       locally_sound_mode_use\n        \\<langle>Skip \\<otimes> annos, mds\\<^sub>2, mem\\<rangle>", "apply (simp add: locally_sound_mode_use_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mem.\n       mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n       \\<forall>c' mds'.\n          (\\<exists>mem'.\n              \\<langle>c', mds', mem'\\<rangle>\n              \\<in> loc_reach\n                     \\<langle>Skip \\<otimes>\n                              annos, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n          (\\<forall>x.\n              (x \\<in> mds' GuarNoRead \\<longrightarrow>\n               doesnt_read c' x) \\<and>\n              (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n               doesnt_modify c' x))", "by (metis annotate.simps skip_doesnt_access)"], ["proof (state)\nthis:\n  \\<forall>mem.\n     (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n      \\<in> loc_reach\n             \\<langle>Skip \\<otimes>\n                      annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n      mds\\<^sub>2' \\<sqsubseteq> mds \\<oplus> annos) \\<and>\n     locally_sound_mode_use\n      \\<langle>Skip \\<otimes> annos, mds\\<^sub>2, mem\\<rangle>\n\ngoal (5 subgoals):\n 1. \\<And>x mds e annos mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>x \\<notin> mds GuarNoWrite;\n        aexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>(x \\<leftarrow> e) \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq>\n                             mds \\<oplus> annos) \\<and>\n                            locally_sound_mode_use\n                             \\<langle>(x \\<leftarrow> e) \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 2. \\<And>mds annos c\\<^sub>1 mds'' c\\<^sub>2 e mds\\<^sub>2 mds\\<^sub>2'\n       mem'.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>Stmt.If e c\\<^sub>1\n        c\\<^sub>2 \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>Stmt.If e c\\<^sub>1\n c\\<^sub>2 \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 3. \\<And>mds' mds annos c e mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>mds' = mds \\<oplus> annos; \\<turnstile> mds' { c } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> mds' GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>While e c \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>While e c \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 4. \\<And>mds c\\<^sub>1 mds' c\\<^sub>2 mds'' mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1 ;;\n       c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c\\<^sub>1 ;;\nc\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\n 5. \\<And>mds\\<^sub>2 c mds\\<^sub>2' mds\\<^sub>1 mds\\<^sub>1' mds\\<^sub>2''\n       mds\\<^sub>2''' mem'.\n       \\<lbrakk>\\<turnstile> mds\\<^sub>2 { c } mds\\<^sub>2';\n        \\<And>mds\\<^sub>2'' mds\\<^sub>2''' mem'.\n           mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2''' \\<sqsubseteq> mds\\<^sub>2') \\<and>\n              locally_sound_mode_use\n               \\<langle>c, mds\\<^sub>2'', mem\\<rangle>;\n        mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2;\n        mds\\<^sub>2' \\<sqsubseteq> mds\\<^sub>1';\n        mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2''' \\<sqsubseteq>\n                             mds\\<^sub>1') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c, mds\\<^sub>2'', mem\\<rangle>", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x mds e annos mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>x \\<notin> mds GuarNoWrite;\n        aexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>(x \\<leftarrow> e) \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq>\n                             mds \\<oplus> annos) \\<and>\n                            locally_sound_mode_use\n                             \\<langle>(x \\<leftarrow> e) \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 2. \\<And>mds annos c\\<^sub>1 mds'' c\\<^sub>2 e mds\\<^sub>2 mds\\<^sub>2'\n       mem'.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>Stmt.If e c\\<^sub>1\n        c\\<^sub>2 \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>Stmt.If e c\\<^sub>1\n c\\<^sub>2 \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 3. \\<And>mds' mds annos c e mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>mds' = mds \\<oplus> annos; \\<turnstile> mds' { c } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> mds' GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>While e c \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>While e c \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 4. \\<And>mds c\\<^sub>1 mds' c\\<^sub>2 mds'' mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1 ;;\n       c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c\\<^sub>1 ;;\nc\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\n 5. \\<And>mds\\<^sub>2 c mds\\<^sub>2' mds\\<^sub>1 mds\\<^sub>1' mds\\<^sub>2''\n       mds\\<^sub>2''' mem'.\n       \\<lbrakk>\\<turnstile> mds\\<^sub>2 { c } mds\\<^sub>2';\n        \\<And>mds\\<^sub>2'' mds\\<^sub>2''' mem'.\n           mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2''' \\<sqsubseteq> mds\\<^sub>2') \\<and>\n              locally_sound_mode_use\n               \\<langle>c, mds\\<^sub>2'', mem\\<rangle>;\n        mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2;\n        mds\\<^sub>2' \\<sqsubseteq> mds\\<^sub>1';\n        mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2''' \\<sqsubseteq>\n                             mds\\<^sub>1') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c, mds\\<^sub>2'', mem\\<rangle>", "case (assign x mds e annos)"], ["proof (state)\nthis:\n  x \\<notin> mds GuarNoWrite\n  aexp_vars e \\<inter> mds GuarNoRead = {}\n  mds\\<^sub>2 \\<sqsubseteq> mds\n\ngoal (5 subgoals):\n 1. \\<And>x mds e annos mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>x \\<notin> mds GuarNoWrite;\n        aexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>(x \\<leftarrow> e) \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq>\n                             mds \\<oplus> annos) \\<and>\n                            locally_sound_mode_use\n                             \\<langle>(x \\<leftarrow> e) \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 2. \\<And>mds annos c\\<^sub>1 mds'' c\\<^sub>2 e mds\\<^sub>2 mds\\<^sub>2'\n       mem'.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>Stmt.If e c\\<^sub>1\n        c\\<^sub>2 \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>Stmt.If e c\\<^sub>1\n c\\<^sub>2 \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 3. \\<And>mds' mds annos c e mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>mds' = mds \\<oplus> annos; \\<turnstile> mds' { c } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> mds' GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>While e c \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>While e c \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 4. \\<And>mds c\\<^sub>1 mds' c\\<^sub>2 mds'' mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1 ;;\n       c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c\\<^sub>1 ;;\nc\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\n 5. \\<And>mds\\<^sub>2 c mds\\<^sub>2' mds\\<^sub>1 mds\\<^sub>1' mds\\<^sub>2''\n       mds\\<^sub>2''' mem'.\n       \\<lbrakk>\\<turnstile> mds\\<^sub>2 { c } mds\\<^sub>2';\n        \\<And>mds\\<^sub>2'' mds\\<^sub>2''' mem'.\n           mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2''' \\<sqsubseteq> mds\\<^sub>2') \\<and>\n              locally_sound_mode_use\n               \\<langle>c, mds\\<^sub>2'', mem\\<rangle>;\n        mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2;\n        mds\\<^sub>2' \\<sqsubseteq> mds\\<^sub>1';\n        mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2''' \\<sqsubseteq>\n                             mds\\<^sub>1') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c, mds\\<^sub>2'', mem\\<rangle>", "hence \"\\<forall> mem. locally_sound_mode_use \\<langle>(x \\<leftarrow> e) \\<otimes> annos, mds\\<^sub>2, mem\\<rangle>\""], ["proof (prove)\nusing this:\n  x \\<notin> mds GuarNoWrite\n  aexp_vars e \\<inter> mds GuarNoRead = {}\n  mds\\<^sub>2 \\<sqsubseteq> mds\n\ngoal (1 subgoal):\n 1. \\<forall>mem.\n       locally_sound_mode_use\n        \\<langle>(x \\<leftarrow> e) \\<otimes>\n                 annos, mds\\<^sub>2, mem\\<rangle>", "unfolding locally_sound_mode_use_def"], ["proof (prove)\nusing this:\n  x \\<notin> mds GuarNoWrite\n  aexp_vars e \\<inter> mds GuarNoRead = {}\n  mds\\<^sub>2 \\<sqsubseteq> mds\n\ngoal (1 subgoal):\n 1. \\<forall>mem c' mds' mem'.\n       \\<langle>c', mds', mem'\\<rangle>\n       \\<in> loc_reach\n              \\<langle>(x \\<leftarrow> e) \\<otimes>\n                       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n       (\\<forall>x.\n           (x \\<in> mds' GuarNoRead \\<longrightarrow>\n            doesnt_read c' x) \\<and>\n           (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x))", "proof (clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>mem c' mds' mem' xa.\n       \\<lbrakk>x \\<notin> mds GuarNoWrite;\n        aexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>(x \\<leftarrow> e) \\<otimes>\n                        annos, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (xa \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read c' xa) \\<and>\n                         (xa \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify c' xa)", "fix mem c' mds' mem' y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>mem c' mds' mem' xa.\n       \\<lbrakk>x \\<notin> mds GuarNoWrite;\n        aexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>(x \\<leftarrow> e) \\<otimes>\n                        annos, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (xa \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read c' xa) \\<and>\n                         (xa \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify c' xa)", "assume asm: \"\\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>(x \\<leftarrow> e) \\<otimes> annos, mds\\<^sub>2, mem\\<rangle>\""], ["proof (state)\nthis:\n  \\<langle>c', mds', mem'\\<rangle>\n  \\<in> loc_reach\n         \\<langle>(x \\<leftarrow> e) \\<otimes>\n                  annos, mds\\<^sub>2, mem\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>mem c' mds' mem' xa.\n       \\<lbrakk>x \\<notin> mds GuarNoWrite;\n        aexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>(x \\<leftarrow> e) \\<otimes>\n                        annos, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (xa \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read c' xa) \\<and>\n                         (xa \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify c' xa)", "hence \"c' = (x \\<leftarrow> e) \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or> c' = Stop \\<and> mds' = mds\\<^sub>2 \\<oplus> annos\""], ["proof (prove)\nusing this:\n  \\<langle>c', mds', mem'\\<rangle>\n  \\<in> loc_reach\n         \\<langle>(x \\<leftarrow> e) \\<otimes>\n                  annos, mds\\<^sub>2, mem\\<rangle>\n\ngoal (1 subgoal):\n 1. c' = (x \\<leftarrow> e) \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n    c' = Stop \\<and> mds' = mds\\<^sub>2 \\<oplus> annos", "using assign_loc_reach"], ["proof (prove)\nusing this:\n  \\<langle>c', mds', mem'\\<rangle>\n  \\<in> loc_reach\n         \\<langle>(x \\<leftarrow> e) \\<otimes>\n                  annos, mds\\<^sub>2, mem\\<rangle>\n  \\<langle>?c', ?mds', ?mem'\\<rangle>\n  \\<in> loc_reach\n         \\<langle>(?x \\<leftarrow> ?e) \\<otimes>\n                  ?annos, ?mds, ?mem\\<rangle> \\<Longrightarrow>\n  ?c' = Stop \\<and> ?mds' = ?mds \\<oplus> ?annos \\<or>\n  ?c' = (?x \\<leftarrow> ?e) \\<otimes> ?annos \\<and> ?mds' = ?mds\n\ngoal (1 subgoal):\n 1. c' = (x \\<leftarrow> e) \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n    c' = Stop \\<and> mds' = mds\\<^sub>2 \\<oplus> annos", "by blast"], ["proof (state)\nthis:\n  c' = (x \\<leftarrow> e) \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n  c' = Stop \\<and> mds' = mds\\<^sub>2 \\<oplus> annos\n\ngoal (1 subgoal):\n 1. \\<And>mem c' mds' mem' xa.\n       \\<lbrakk>x \\<notin> mds GuarNoWrite;\n        aexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>(x \\<leftarrow> e) \\<otimes>\n                        annos, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (xa \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read c' xa) \\<and>\n                         (xa \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify c' xa)", "thus \"(y \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' y) \\<and>\n          (y \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' y)\""], ["proof (prove)\nusing this:\n  c' = (x \\<leftarrow> e) \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n  c' = Stop \\<and> mds' = mds\\<^sub>2 \\<oplus> annos\n\ngoal (1 subgoal):\n 1. (y \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' y) \\<and>\n    (y \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' y)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. c' = (x \\<leftarrow> e) \\<otimes> annos \\<and>\n    mds' = mds\\<^sub>2 \\<Longrightarrow>\n    (y \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' y) \\<and>\n    (y \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' y)\n 2. c' = Stop \\<and> mds' = mds\\<^sub>2 \\<oplus> annos \\<Longrightarrow>\n    (y \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' y) \\<and>\n    (y \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' y)", "assume \"c' = (x \\<leftarrow> e) \\<otimes> annos \\<and> mds' = mds\\<^sub>2\""], ["proof (state)\nthis:\n  c' = (x \\<leftarrow> e) \\<otimes> annos \\<and> mds' = mds\\<^sub>2\n\ngoal (2 subgoals):\n 1. c' = (x \\<leftarrow> e) \\<otimes> annos \\<and>\n    mds' = mds\\<^sub>2 \\<Longrightarrow>\n    (y \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' y) \\<and>\n    (y \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' y)\n 2. c' = Stop \\<and> mds' = mds\\<^sub>2 \\<oplus> annos \\<Longrightarrow>\n    (y \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' y) \\<and>\n    (y \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' y)", "thus ?thesis"], ["proof (prove)\nusing this:\n  c' = (x \\<leftarrow> e) \\<otimes> annos \\<and> mds' = mds\\<^sub>2\n\ngoal (1 subgoal):\n 1. (y \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' y) \\<and>\n    (y \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' y)", "proof (auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>c' = (x \\<leftarrow> e) \\<otimes> annos; mds' = mds\\<^sub>2;\n     y \\<in> mds\\<^sub>2 GuarNoRead\\<rbrakk>\n    \\<Longrightarrow> doesnt_read ((x \\<leftarrow> e) \\<otimes> annos) y\n 2. \\<lbrakk>c' = (x \\<leftarrow> e) \\<otimes> annos; mds' = mds\\<^sub>2;\n     y \\<in> mds\\<^sub>2 GuarNoWrite\\<rbrakk>\n    \\<Longrightarrow> doesnt_modify ((x \\<leftarrow> e) \\<otimes> annos) y", "assume \"y \\<in> mds\\<^sub>2 GuarNoRead\""], ["proof (state)\nthis:\n  y \\<in> mds\\<^sub>2 GuarNoRead\n\ngoal (2 subgoals):\n 1. \\<lbrakk>c' = (x \\<leftarrow> e) \\<otimes> annos; mds' = mds\\<^sub>2;\n     y \\<in> mds\\<^sub>2 GuarNoRead\\<rbrakk>\n    \\<Longrightarrow> doesnt_read ((x \\<leftarrow> e) \\<otimes> annos) y\n 2. \\<lbrakk>c' = (x \\<leftarrow> e) \\<otimes> annos; mds' = mds\\<^sub>2;\n     y \\<in> mds\\<^sub>2 GuarNoWrite\\<rbrakk>\n    \\<Longrightarrow> doesnt_modify ((x \\<leftarrow> e) \\<otimes> annos) y", "hence \"y \\<notin> aexp_vars e\""], ["proof (prove)\nusing this:\n  y \\<in> mds\\<^sub>2 GuarNoRead\n\ngoal (1 subgoal):\n 1. y \\<notin> aexp_vars e", "by (metis IntD2 IntI assign.hyps(2) assign.prems empty_iff inf_apply le_iff_inf)"], ["proof (state)\nthis:\n  y \\<notin> aexp_vars e\n\ngoal (2 subgoals):\n 1. \\<lbrakk>c' = (x \\<leftarrow> e) \\<otimes> annos; mds' = mds\\<^sub>2;\n     y \\<in> mds\\<^sub>2 GuarNoRead\\<rbrakk>\n    \\<Longrightarrow> doesnt_read ((x \\<leftarrow> e) \\<otimes> annos) y\n 2. \\<lbrakk>c' = (x \\<leftarrow> e) \\<otimes> annos; mds' = mds\\<^sub>2;\n     y \\<in> mds\\<^sub>2 GuarNoWrite\\<rbrakk>\n    \\<Longrightarrow> doesnt_modify ((x \\<leftarrow> e) \\<otimes> annos) y", "with assign_doesnt_read"], ["proof (chain)\npicking this:\n  ?y \\<notin> aexp_vars ?e \\<Longrightarrow>\n  doesnt_read ((?x \\<leftarrow> ?e) \\<otimes> ?annos) ?y\n  y \\<notin> aexp_vars e", "show \"doesnt_read ((x \\<leftarrow> e) \\<otimes> annos) y\""], ["proof (prove)\nusing this:\n  ?y \\<notin> aexp_vars ?e \\<Longrightarrow>\n  doesnt_read ((?x \\<leftarrow> ?e) \\<otimes> ?annos) ?y\n  y \\<notin> aexp_vars e\n\ngoal (1 subgoal):\n 1. doesnt_read ((x \\<leftarrow> e) \\<otimes> annos) y", "by blast"], ["proof (state)\nthis:\n  doesnt_read ((x \\<leftarrow> e) \\<otimes> annos) y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c' = (x \\<leftarrow> e) \\<otimes> annos; mds' = mds\\<^sub>2;\n     y \\<in> mds\\<^sub>2 GuarNoWrite\\<rbrakk>\n    \\<Longrightarrow> doesnt_modify ((x \\<leftarrow> e) \\<otimes> annos) y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>c' = (x \\<leftarrow> e) \\<otimes> annos; mds' = mds\\<^sub>2;\n     y \\<in> mds\\<^sub>2 GuarNoWrite\\<rbrakk>\n    \\<Longrightarrow> doesnt_modify ((x \\<leftarrow> e) \\<otimes> annos) y", "assume \"y \\<in> mds\\<^sub>2 GuarNoWrite\""], ["proof (state)\nthis:\n  y \\<in> mds\\<^sub>2 GuarNoWrite\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c' = (x \\<leftarrow> e) \\<otimes> annos; mds' = mds\\<^sub>2;\n     y \\<in> mds\\<^sub>2 GuarNoWrite\\<rbrakk>\n    \\<Longrightarrow> doesnt_modify ((x \\<leftarrow> e) \\<otimes> annos) y", "hence \"x \\<noteq> y\""], ["proof (prove)\nusing this:\n  y \\<in> mds\\<^sub>2 GuarNoWrite\n\ngoal (1 subgoal):\n 1. x \\<noteq> y", "by (metis assign.hyps(1) assign.prems in_mono le_fun_def)"], ["proof (state)\nthis:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c' = (x \\<leftarrow> e) \\<otimes> annos; mds' = mds\\<^sub>2;\n     y \\<in> mds\\<^sub>2 GuarNoWrite\\<rbrakk>\n    \\<Longrightarrow> doesnt_modify ((x \\<leftarrow> e) \\<otimes> annos) y", "with assign_doesnt_modify"], ["proof (chain)\npicking this:\n  ?x \\<noteq> ?y \\<Longrightarrow>\n  doesnt_modify ((?x \\<leftarrow> ?e) \\<otimes> ?annos) ?y\n  x \\<noteq> y", "show \"doesnt_modify ((x \\<leftarrow> e) \\<otimes> annos) y\""], ["proof (prove)\nusing this:\n  ?x \\<noteq> ?y \\<Longrightarrow>\n  doesnt_modify ((?x \\<leftarrow> ?e) \\<otimes> ?annos) ?y\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. doesnt_modify ((x \\<leftarrow> e) \\<otimes> annos) y", "by blast"], ["proof (state)\nthis:\n  doesnt_modify ((x \\<leftarrow> e) \\<otimes> annos) y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (y \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' y) \\<and>\n  (y \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' y)\n\ngoal (1 subgoal):\n 1. c' = Stop \\<and> mds' = mds\\<^sub>2 \\<oplus> annos \\<Longrightarrow>\n    (y \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' y) \\<and>\n    (y \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' y)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. c' = Stop \\<and> mds' = mds\\<^sub>2 \\<oplus> annos \\<Longrightarrow>\n    (y \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' y) \\<and>\n    (y \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' y)", "assume \"c' = Stop \\<and> mds' = mds\\<^sub>2 \\<oplus> annos\""], ["proof (state)\nthis:\n  c' = Stop \\<and> mds' = mds\\<^sub>2 \\<oplus> annos\n\ngoal (1 subgoal):\n 1. c' = Stop \\<and> mds' = mds\\<^sub>2 \\<oplus> annos \\<Longrightarrow>\n    (y \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' y) \\<and>\n    (y \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' y)", "with stop_doesnt_access"], ["proof (chain)\npicking this:\n  doesnt_modify Stop ?x \\<and> doesnt_read Stop ?x\n  c' = Stop \\<and> mds' = mds\\<^sub>2 \\<oplus> annos", "show ?thesis"], ["proof (prove)\nusing this:\n  doesnt_modify Stop ?x \\<and> doesnt_read Stop ?x\n  c' = Stop \\<and> mds' = mds\\<^sub>2 \\<oplus> annos\n\ngoal (1 subgoal):\n 1. (y \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' y) \\<and>\n    (y \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' y)", "by blast"], ["proof (state)\nthis:\n  (y \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' y) \\<and>\n  (y \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' y)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (y \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' y) \\<and>\n  (y \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' y)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>mem.\n     locally_sound_mode_use\n      \\<langle>(x \\<leftarrow> e) \\<otimes> annos, mds\\<^sub>2, mem\\<rangle>\n\ngoal (5 subgoals):\n 1. \\<And>x mds e annos mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>x \\<notin> mds GuarNoWrite;\n        aexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>(x \\<leftarrow> e) \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq>\n                             mds \\<oplus> annos) \\<and>\n                            locally_sound_mode_use\n                             \\<langle>(x \\<leftarrow> e) \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 2. \\<And>mds annos c\\<^sub>1 mds'' c\\<^sub>2 e mds\\<^sub>2 mds\\<^sub>2'\n       mem'.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>Stmt.If e c\\<^sub>1\n        c\\<^sub>2 \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>Stmt.If e c\\<^sub>1\n c\\<^sub>2 \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 3. \\<And>mds' mds annos c e mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>mds' = mds \\<oplus> annos; \\<turnstile> mds' { c } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> mds' GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>While e c \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>While e c \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 4. \\<And>mds c\\<^sub>1 mds' c\\<^sub>2 mds'' mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1 ;;\n       c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c\\<^sub>1 ;;\nc\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\n 5. \\<And>mds\\<^sub>2 c mds\\<^sub>2' mds\\<^sub>1 mds\\<^sub>1' mds\\<^sub>2''\n       mds\\<^sub>2''' mem'.\n       \\<lbrakk>\\<turnstile> mds\\<^sub>2 { c } mds\\<^sub>2';\n        \\<And>mds\\<^sub>2'' mds\\<^sub>2''' mem'.\n           mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2''' \\<sqsubseteq> mds\\<^sub>2') \\<and>\n              locally_sound_mode_use\n               \\<langle>c, mds\\<^sub>2'', mem\\<rangle>;\n        mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2;\n        mds\\<^sub>2' \\<sqsubseteq> mds\\<^sub>1';\n        mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2''' \\<sqsubseteq>\n                             mds\\<^sub>1') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c, mds\\<^sub>2'', mem\\<rangle>", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>mem.\n     locally_sound_mode_use\n      \\<langle>(x \\<leftarrow> e) \\<otimes> annos, mds\\<^sub>2, mem\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<forall>mem.\n       (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>(x \\<leftarrow> e) \\<otimes>\n                        annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n        mds\\<^sub>2' \\<sqsubseteq> mds \\<oplus> annos) \\<and>\n       locally_sound_mode_use\n        \\<langle>(x \\<leftarrow> e) \\<otimes>\n                 annos, mds\\<^sub>2, mem\\<rangle>", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mem.\n       \\<lbrakk>\\<forall>mem.\n                   locally_sound_mode_use\n                    \\<langle>(x \\<leftarrow> e) \\<otimes>\n                             annos, mds\\<^sub>2, mem\\<rangle>;\n        \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>(x \\<leftarrow> e) \\<otimes>\n                        annos, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> mds\\<^sub>2' \\<sqsubseteq> mds \\<oplus> annos", "by (metis assign.prems assign_annos_eval assign_loc_reach stop_no_eval update_preserves_le)"], ["proof (state)\nthis:\n  \\<forall>mem.\n     (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n      \\<in> loc_reach\n             \\<langle>(x \\<leftarrow> e) \\<otimes>\n                      annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n      mds\\<^sub>2' \\<sqsubseteq> mds \\<oplus> annos) \\<and>\n     locally_sound_mode_use\n      \\<langle>(x \\<leftarrow> e) \\<otimes> annos, mds\\<^sub>2, mem\\<rangle>\n\ngoal (4 subgoals):\n 1. \\<And>mds annos c\\<^sub>1 mds'' c\\<^sub>2 e mds\\<^sub>2 mds\\<^sub>2'\n       mem'.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>Stmt.If e c\\<^sub>1\n        c\\<^sub>2 \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>Stmt.If e c\\<^sub>1\n c\\<^sub>2 \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 2. \\<And>mds' mds annos c e mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>mds' = mds \\<oplus> annos; \\<turnstile> mds' { c } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> mds' GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>While e c \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>While e c \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 3. \\<And>mds c\\<^sub>1 mds' c\\<^sub>2 mds'' mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1 ;;\n       c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c\\<^sub>1 ;;\nc\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\n 4. \\<And>mds\\<^sub>2 c mds\\<^sub>2' mds\\<^sub>1 mds\\<^sub>1' mds\\<^sub>2''\n       mds\\<^sub>2''' mem'.\n       \\<lbrakk>\\<turnstile> mds\\<^sub>2 { c } mds\\<^sub>2';\n        \\<And>mds\\<^sub>2'' mds\\<^sub>2''' mem'.\n           mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2''' \\<sqsubseteq> mds\\<^sub>2') \\<and>\n              locally_sound_mode_use\n               \\<langle>c, mds\\<^sub>2'', mem\\<rangle>;\n        mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2;\n        mds\\<^sub>2' \\<sqsubseteq> mds\\<^sub>1';\n        mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2''' \\<sqsubseteq>\n                             mds\\<^sub>1') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c, mds\\<^sub>2'', mem\\<rangle>", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>mds annos c\\<^sub>1 mds'' c\\<^sub>2 e mds\\<^sub>2 mds\\<^sub>2'\n       mem'.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>Stmt.If e c\\<^sub>1\n        c\\<^sub>2 \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>Stmt.If e c\\<^sub>1\n c\\<^sub>2 \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 2. \\<And>mds' mds annos c e mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>mds' = mds \\<oplus> annos; \\<turnstile> mds' { c } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> mds' GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>While e c \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>While e c \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 3. \\<And>mds c\\<^sub>1 mds' c\\<^sub>2 mds'' mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1 ;;\n       c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c\\<^sub>1 ;;\nc\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\n 4. \\<And>mds\\<^sub>2 c mds\\<^sub>2' mds\\<^sub>1 mds\\<^sub>1' mds\\<^sub>2''\n       mds\\<^sub>2''' mem'.\n       \\<lbrakk>\\<turnstile> mds\\<^sub>2 { c } mds\\<^sub>2';\n        \\<And>mds\\<^sub>2'' mds\\<^sub>2''' mem'.\n           mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2''' \\<sqsubseteq> mds\\<^sub>2') \\<and>\n              locally_sound_mode_use\n               \\<langle>c, mds\\<^sub>2'', mem\\<rangle>;\n        mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2;\n        mds\\<^sub>2' \\<sqsubseteq> mds\\<^sub>1';\n        mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2''' \\<sqsubseteq>\n                             mds\\<^sub>1') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c, mds\\<^sub>2'', mem\\<rangle>", "case (if_ mds annos c\\<^sub>1 mds'' c\\<^sub>2 e)"], ["proof (state)\nthis:\n  \\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds''\n  ?mds\\<^sub>25 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>1, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds'') \\<and>\n     locally_sound_mode_use \\<langle>c\\<^sub>1, ?mds\\<^sub>25, mem\\<rangle>\n  \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds''\n  ?mds\\<^sub>25 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>2, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds'') \\<and>\n     locally_sound_mode_use \\<langle>c\\<^sub>2, ?mds\\<^sub>25, mem\\<rangle>\n  bexp_vars e \\<inter> mds GuarNoRead = {}\n  mds\\<^sub>2 \\<sqsubseteq> mds\n\ngoal (4 subgoals):\n 1. \\<And>mds annos c\\<^sub>1 mds'' c\\<^sub>2 e mds\\<^sub>2 mds\\<^sub>2'\n       mem'.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>Stmt.If e c\\<^sub>1\n        c\\<^sub>2 \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>Stmt.If e c\\<^sub>1\n c\\<^sub>2 \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 2. \\<And>mds' mds annos c e mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>mds' = mds \\<oplus> annos; \\<turnstile> mds' { c } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> mds' GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>While e c \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>While e c \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 3. \\<And>mds c\\<^sub>1 mds' c\\<^sub>2 mds'' mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1 ;;\n       c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c\\<^sub>1 ;;\nc\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\n 4. \\<And>mds\\<^sub>2 c mds\\<^sub>2' mds\\<^sub>1 mds\\<^sub>1' mds\\<^sub>2''\n       mds\\<^sub>2''' mem'.\n       \\<lbrakk>\\<turnstile> mds\\<^sub>2 { c } mds\\<^sub>2';\n        \\<And>mds\\<^sub>2'' mds\\<^sub>2''' mem'.\n           mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2''' \\<sqsubseteq> mds\\<^sub>2') \\<and>\n              locally_sound_mode_use\n               \\<langle>c, mds\\<^sub>2'', mem\\<rangle>;\n        mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2;\n        mds\\<^sub>2' \\<sqsubseteq> mds\\<^sub>1';\n        mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2''' \\<sqsubseteq>\n                             mds\\<^sub>1') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c, mds\\<^sub>2'', mem\\<rangle>", "let ?c = \"(If e c\\<^sub>1 c\\<^sub>2) \\<otimes> annos\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>mds annos c\\<^sub>1 mds'' c\\<^sub>2 e mds\\<^sub>2 mds\\<^sub>2'\n       mem'.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>Stmt.If e c\\<^sub>1\n        c\\<^sub>2 \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>Stmt.If e c\\<^sub>1\n c\\<^sub>2 \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 2. \\<And>mds' mds annos c e mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>mds' = mds \\<oplus> annos; \\<turnstile> mds' { c } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> mds' GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>While e c \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>While e c \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 3. \\<And>mds c\\<^sub>1 mds' c\\<^sub>2 mds'' mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1 ;;\n       c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c\\<^sub>1 ;;\nc\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\n 4. \\<And>mds\\<^sub>2 c mds\\<^sub>2' mds\\<^sub>1 mds\\<^sub>1' mds\\<^sub>2''\n       mds\\<^sub>2''' mem'.\n       \\<lbrakk>\\<turnstile> mds\\<^sub>2 { c } mds\\<^sub>2';\n        \\<And>mds\\<^sub>2'' mds\\<^sub>2''' mem'.\n           mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2''' \\<sqsubseteq> mds\\<^sub>2') \\<and>\n              locally_sound_mode_use\n               \\<langle>c, mds\\<^sub>2'', mem\\<rangle>;\n        mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2;\n        mds\\<^sub>2' \\<sqsubseteq> mds\\<^sub>1';\n        mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2''' \\<sqsubseteq>\n                             mds\\<^sub>1') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c, mds\\<^sub>2'', mem\\<rangle>", "from if_"], ["proof (chain)\npicking this:\n  \\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds''\n  ?mds\\<^sub>25 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>1, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds'') \\<and>\n     locally_sound_mode_use \\<langle>c\\<^sub>1, ?mds\\<^sub>25, mem\\<rangle>\n  \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds''\n  ?mds\\<^sub>25 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>2, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds'') \\<and>\n     locally_sound_mode_use \\<langle>c\\<^sub>2, ?mds\\<^sub>25, mem\\<rangle>\n  bexp_vars e \\<inter> mds GuarNoRead = {}\n  mds\\<^sub>2 \\<sqsubseteq> mds", "have modes_le': \"mds\\<^sub>2 \\<oplus> annos \\<le> mds \\<oplus> annos\""], ["proof (prove)\nusing this:\n  \\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds''\n  ?mds\\<^sub>25 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>1, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds'') \\<and>\n     locally_sound_mode_use \\<langle>c\\<^sub>1, ?mds\\<^sub>25, mem\\<rangle>\n  \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds''\n  ?mds\\<^sub>25 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>2, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds'') \\<and>\n     locally_sound_mode_use \\<langle>c\\<^sub>2, ?mds\\<^sub>25, mem\\<rangle>\n  bexp_vars e \\<inter> mds GuarNoRead = {}\n  mds\\<^sub>2 \\<sqsubseteq> mds\n\ngoal (1 subgoal):\n 1. mds\\<^sub>2 \\<oplus> annos \\<sqsubseteq> mds \\<oplus> annos", "by (metis (lifting) update_preserves_le)"], ["proof (state)\nthis:\n  mds\\<^sub>2 \\<oplus> annos \\<sqsubseteq> mds \\<oplus> annos\n\ngoal (4 subgoals):\n 1. \\<And>mds annos c\\<^sub>1 mds'' c\\<^sub>2 e mds\\<^sub>2 mds\\<^sub>2'\n       mem'.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>Stmt.If e c\\<^sub>1\n        c\\<^sub>2 \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>Stmt.If e c\\<^sub>1\n c\\<^sub>2 \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 2. \\<And>mds' mds annos c e mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>mds' = mds \\<oplus> annos; \\<turnstile> mds' { c } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> mds' GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>While e c \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>While e c \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 3. \\<And>mds c\\<^sub>1 mds' c\\<^sub>2 mds'' mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1 ;;\n       c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c\\<^sub>1 ;;\nc\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\n 4. \\<And>mds\\<^sub>2 c mds\\<^sub>2' mds\\<^sub>1 mds\\<^sub>1' mds\\<^sub>2''\n       mds\\<^sub>2''' mem'.\n       \\<lbrakk>\\<turnstile> mds\\<^sub>2 { c } mds\\<^sub>2';\n        \\<And>mds\\<^sub>2'' mds\\<^sub>2''' mem'.\n           mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2''' \\<sqsubseteq> mds\\<^sub>2') \\<and>\n              locally_sound_mode_use\n               \\<langle>c, mds\\<^sub>2'', mem\\<rangle>;\n        mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2;\n        mds\\<^sub>2' \\<sqsubseteq> mds\\<^sub>1';\n        mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2''' \\<sqsubseteq>\n                             mds\\<^sub>1') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c, mds\\<^sub>2'', mem\\<rangle>", "from if_"], ["proof (chain)\npicking this:\n  \\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds''\n  ?mds\\<^sub>25 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>1, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds'') \\<and>\n     locally_sound_mode_use \\<langle>c\\<^sub>1, ?mds\\<^sub>25, mem\\<rangle>\n  \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds''\n  ?mds\\<^sub>25 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>2, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds'') \\<and>\n     locally_sound_mode_use \\<langle>c\\<^sub>2, ?mds\\<^sub>25, mem\\<rangle>\n  bexp_vars e \\<inter> mds GuarNoRead = {}\n  mds\\<^sub>2 \\<sqsubseteq> mds", "show ?case"], ["proof (prove)\nusing this:\n  \\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds''\n  ?mds\\<^sub>25 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>1, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds'') \\<and>\n     locally_sound_mode_use \\<langle>c\\<^sub>1, ?mds\\<^sub>25, mem\\<rangle>\n  \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds''\n  ?mds\\<^sub>25 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>2, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds'') \\<and>\n     locally_sound_mode_use \\<langle>c\\<^sub>2, ?mds\\<^sub>25, mem\\<rangle>\n  bexp_vars e \\<inter> mds GuarNoRead = {}\n  mds\\<^sub>2 \\<sqsubseteq> mds\n\ngoal (1 subgoal):\n 1. \\<forall>mem.\n       (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                        annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n        mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n       locally_sound_mode_use\n        \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                 annos, mds\\<^sub>2, mem\\<rangle>", "apply (simp add: locally_sound_mode_use_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n     \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n        mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n        \\<forall>mem.\n           (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n            mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n           (\\<forall>c' mds'.\n               (\\<exists>mem'.\n                   \\<langle>c', mds', mem'\\<rangle>\n                   \\<in> loc_reach\n                          \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n               (\\<forall>x.\n                   (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                    doesnt_read c' x) \\<and>\n                   (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                    doesnt_modify c' x)));\n     \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n     \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n        mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n        \\<forall>mem.\n           (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n            mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n           (\\<forall>c' mds'.\n               (\\<exists>mem'.\n                   \\<langle>c', mds', mem'\\<rangle>\n                   \\<in> loc_reach\n                          \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n               (\\<forall>x.\n                   (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                    doesnt_read c' x) \\<and>\n                   (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                    doesnt_modify c' x)));\n     bexp_vars e \\<inter> mds GuarNoRead = {};\n     mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n    \\<Longrightarrow> \\<forall>mem.\n                         (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                          \\<in> loc_reach\n                                 \\<langle>Stmt.If e c\\<^sub>1\n     c\\<^sub>2 \\<otimes>\n    annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                          mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                         (\\<forall>c' mds'.\n                             (\\<exists>mem'.\n                                 \\<langle>c', mds', mem'\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n           annos, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                             (\\<forall>x.\n                                 (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                                  doesnt_read c' x) \\<and>\n                                 (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                                  doesnt_modify c' x)))", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mem.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                          \\<in> loc_reach\n                                 \\<langle>Stmt.If e c\\<^sub>1\n     c\\<^sub>2 \\<otimes>\n    annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                          mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                         (\\<forall>c' mds'.\n                             (\\<exists>mem'.\n                                 \\<langle>c', mds', mem'\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n           annos, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                             (\\<forall>x.\n                                 (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                                  doesnt_read c' x) \\<and>\n                                 (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                                  doesnt_modify c' x)))", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mem.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                         \\<in> loc_reach\n                                \\<langle>Stmt.If e c\\<^sub>1\n    c\\<^sub>2 \\<otimes>\n   annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                         mds\\<^sub>2' \\<sqsubseteq> mds''\n 2. \\<And>mem.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>c' mds'.\n                            (\\<exists>mem'.\n                                \\<langle>c', mds', mem'\\<rangle>\n                                \\<in> loc_reach\n \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n          annos, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                            (\\<forall>x.\n                                (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                                 doesnt_read c' x) \\<and>\n                                (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                                 doesnt_modify c' x))", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mem.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                        annos, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> mds\\<^sub>2' \\<sqsubseteq> mds''\n 2. \\<And>mem.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>c' mds'.\n                            (\\<exists>mem'.\n                                \\<langle>c', mds', mem'\\<rangle>\n                                \\<in> loc_reach\n \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n          annos, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                            (\\<forall>x.\n                                (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                                 doesnt_read c' x) \\<and>\n                                (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                                 doesnt_modify c' x))", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mem.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>c' mds'.\n                            (\\<exists>mem'.\n                                \\<langle>c', mds', mem'\\<rangle>\n                                \\<in> loc_reach\n \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n          annos, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                            (\\<forall>x.\n                                (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                                 doesnt_read c' x) \\<and>\n                                (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                                 doesnt_modify c' x))\n 2. \\<And>mem.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                        annos, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> mds\\<^sub>2' \\<sqsubseteq> mds''", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mem c' mds' mem' x.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                        annos, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read c' x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify c' x)\n 2. \\<And>mem.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                        annos, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> mds\\<^sub>2' \\<sqsubseteq> mds''", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>mem c' mds' mem' x.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                        annos, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read c' x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify c' x)\n 2. \\<And>mem.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                        annos, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> mds\\<^sub>2' \\<sqsubseteq> mds''", "fix mem"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>mem c' mds' mem' x.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                        annos, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read c' x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify c' x)\n 2. \\<And>mem.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                        annos, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> mds\\<^sub>2' \\<sqsubseteq> mds''", "assume \"\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle> \\<in> loc_reach \\<langle>If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos, mds\\<^sub>2, mem\\<rangle>\""], ["proof (state)\nthis:\n  \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n  \\<in> loc_reach\n         \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                  annos, mds\\<^sub>2, mem\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<And>mem c' mds' mem' x.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                        annos, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read c' x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify c' x)\n 2. \\<And>mem.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                        annos, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> mds\\<^sub>2' \\<sqsubseteq> mds''", "with modes_le' and if_"], ["proof (chain)\npicking this:\n  mds\\<^sub>2 \\<oplus> annos \\<sqsubseteq> mds \\<oplus> annos\n  \\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds''\n  ?mds\\<^sub>25 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>1, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds'') \\<and>\n     locally_sound_mode_use \\<langle>c\\<^sub>1, ?mds\\<^sub>25, mem\\<rangle>\n  \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds''\n  ?mds\\<^sub>25 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>2, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds'') \\<and>\n     locally_sound_mode_use \\<langle>c\\<^sub>2, ?mds\\<^sub>25, mem\\<rangle>\n  bexp_vars e \\<inter> mds GuarNoRead = {}\n  mds\\<^sub>2 \\<sqsubseteq> mds\n  \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n  \\<in> loc_reach\n         \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                  annos, mds\\<^sub>2, mem\\<rangle>", "show \"mds\\<^sub>2' \\<le> mds''\""], ["proof (prove)\nusing this:\n  mds\\<^sub>2 \\<oplus> annos \\<sqsubseteq> mds \\<oplus> annos\n  \\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds''\n  ?mds\\<^sub>25 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>1, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds'') \\<and>\n     locally_sound_mode_use \\<langle>c\\<^sub>1, ?mds\\<^sub>25, mem\\<rangle>\n  \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds''\n  ?mds\\<^sub>25 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>2, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds'') \\<and>\n     locally_sound_mode_use \\<langle>c\\<^sub>2, ?mds\\<^sub>25, mem\\<rangle>\n  bexp_vars e \\<inter> mds GuarNoRead = {}\n  mds\\<^sub>2 \\<sqsubseteq> mds\n  \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n  \\<in> loc_reach\n         \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                  annos, mds\\<^sub>2, mem\\<rangle>\n\ngoal (1 subgoal):\n 1. mds\\<^sub>2' \\<sqsubseteq> mds''", "by (metis if_eval_false if_eval_true if_loc_reach stop_no_eval)"], ["proof (state)\nthis:\n  mds\\<^sub>2' \\<sqsubseteq> mds''\n\ngoal (1 subgoal):\n 1. \\<And>mem c' mds' mem' x.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                        annos, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read c' x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify c' x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>mem c' mds' mem' x.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                        annos, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read c' x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify c' x)", "fix mem c' mds' mem' x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>mem c' mds' mem' x.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                        annos, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read c' x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify c' x)", "assume \"\\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos, mds\\<^sub>2, mem\\<rangle>\""], ["proof (state)\nthis:\n  \\<langle>c', mds', mem'\\<rangle>\n  \\<in> loc_reach\n         \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                  annos, mds\\<^sub>2, mem\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>mem c' mds' mem' x.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                        annos, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read c' x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify c' x)", "hence \"(c' = If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and> mds' = mds\\<^sub>2) \\<or>\n           (\\<exists> mem''. \\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>c\\<^sub>1, mds\\<^sub>2 \\<oplus> annos, mem''\\<rangle>) \\<or>\n           (\\<exists> mem''. \\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>c\\<^sub>2, mds\\<^sub>2 \\<oplus> annos, mem''\\<rangle>)\""], ["proof (prove)\nusing this:\n  \\<langle>c', mds', mem'\\<rangle>\n  \\<in> loc_reach\n         \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                  annos, mds\\<^sub>2, mem\\<rangle>\n\ngoal (1 subgoal):\n 1. c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and>\n    mds' = mds\\<^sub>2 \\<or>\n    (\\<exists>mem''.\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>c\\<^sub>1, mds\\<^sub>2 \\<oplus>\n                                   annos, mem''\\<rangle>) \\<or>\n    (\\<exists>mem''.\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>c\\<^sub>2, mds\\<^sub>2 \\<oplus>\n                                   annos, mem''\\<rangle>)", "using if_loc_reach"], ["proof (prove)\nusing this:\n  \\<langle>c', mds', mem'\\<rangle>\n  \\<in> loc_reach\n         \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                  annos, mds\\<^sub>2, mem\\<rangle>\n  \\<langle>?c', ?mds', ?mem'\\<rangle>\n  \\<in> loc_reach\n         \\<langle>Stmt.If ?e ?c\\<^sub>1 ?c\\<^sub>2 \\<otimes>\n                  ?annos, ?mds, ?mem\\<rangle> \\<Longrightarrow>\n  ?c' = Stmt.If ?e ?c\\<^sub>1 ?c\\<^sub>2 \\<otimes> ?annos \\<and>\n  ?mds' = ?mds \\<or>\n  (\\<exists>mem''.\n      \\<langle>?c', ?mds', ?mem'\\<rangle>\n      \\<in> loc_reach\n             \\<langle>?c\\<^sub>1, ?mds \\<oplus>\n                                  ?annos, mem''\\<rangle>) \\<or>\n  (\\<exists>mem''.\n      \\<langle>?c', ?mds', ?mem'\\<rangle>\n      \\<in> loc_reach\n             \\<langle>?c\\<^sub>2, ?mds \\<oplus> ?annos, mem''\\<rangle>)\n\ngoal (1 subgoal):\n 1. c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and>\n    mds' = mds\\<^sub>2 \\<or>\n    (\\<exists>mem''.\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>c\\<^sub>1, mds\\<^sub>2 \\<oplus>\n                                   annos, mem''\\<rangle>) \\<or>\n    (\\<exists>mem''.\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>c\\<^sub>2, mds\\<^sub>2 \\<oplus>\n                                   annos, mem''\\<rangle>)", "by blast"], ["proof (state)\nthis:\n  c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and>\n  mds' = mds\\<^sub>2 \\<or>\n  (\\<exists>mem''.\n      \\<langle>c', mds', mem'\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>1, mds\\<^sub>2 \\<oplus>\n                                 annos, mem''\\<rangle>) \\<or>\n  (\\<exists>mem''.\n      \\<langle>c', mds', mem'\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>2, mds\\<^sub>2 \\<oplus> annos, mem''\\<rangle>)\n\ngoal (1 subgoal):\n 1. \\<And>mem c' mds' mem' x.\n       \\<lbrakk>\\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        bexp_vars e \\<inter> mds GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                        annos, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read c' x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify c' x)", "thus \"(x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' x) \\<and>\n          (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x)\""], ["proof (prove)\nusing this:\n  c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and>\n  mds' = mds\\<^sub>2 \\<or>\n  (\\<exists>mem''.\n      \\<langle>c', mds', mem'\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>1, mds\\<^sub>2 \\<oplus>\n                                 annos, mem''\\<rangle>) \\<or>\n  (\\<exists>mem''.\n      \\<langle>c', mds', mem'\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>2, mds\\<^sub>2 \\<oplus> annos, mem''\\<rangle>)\n\ngoal (1 subgoal):\n 1. (x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' x) \\<and>\n    (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and>\n    mds' = mds\\<^sub>2 \\<Longrightarrow>\n    (x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' x) \\<and>\n    (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x)\n 2. (\\<exists>mem''.\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>c\\<^sub>1, mds\\<^sub>2 \\<oplus>\n                                   annos, mem''\\<rangle>) \\<or>\n    (\\<exists>mem''.\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>c\\<^sub>2, mds\\<^sub>2 \\<oplus>\n                                   annos, mem''\\<rangle>) \\<Longrightarrow>\n    (x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' x) \\<and>\n    (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x)", "assume \"c' = If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and> mds' = mds\\<^sub>2\""], ["proof (state)\nthis:\n  c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and>\n  mds' = mds\\<^sub>2\n\ngoal (2 subgoals):\n 1. c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and>\n    mds' = mds\\<^sub>2 \\<Longrightarrow>\n    (x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' x) \\<and>\n    (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x)\n 2. (\\<exists>mem''.\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>c\\<^sub>1, mds\\<^sub>2 \\<oplus>\n                                   annos, mem''\\<rangle>) \\<or>\n    (\\<exists>mem''.\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>c\\<^sub>2, mds\\<^sub>2 \\<oplus>\n                                   annos, mem''\\<rangle>) \\<Longrightarrow>\n    (x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' x) \\<and>\n    (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x)", "thus ?thesis"], ["proof (prove)\nusing this:\n  c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos \\<and>\n  mds' = mds\\<^sub>2\n\ngoal (1 subgoal):\n 1. (x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' x) \\<and>\n    (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x)", "proof (auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos;\n     mds' = mds\\<^sub>2; x \\<in> mds\\<^sub>2 GuarNoRead\\<rbrakk>\n    \\<Longrightarrow> doesnt_read\n                       (Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos) x\n 2. \\<lbrakk>c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos;\n     mds' = mds\\<^sub>2; x \\<in> mds\\<^sub>2 GuarNoWrite\\<rbrakk>\n    \\<Longrightarrow> doesnt_modify\n                       (Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos) x", "assume \"x \\<in> mds\\<^sub>2 GuarNoRead\""], ["proof (state)\nthis:\n  x \\<in> mds\\<^sub>2 GuarNoRead\n\ngoal (2 subgoals):\n 1. \\<lbrakk>c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos;\n     mds' = mds\\<^sub>2; x \\<in> mds\\<^sub>2 GuarNoRead\\<rbrakk>\n    \\<Longrightarrow> doesnt_read\n                       (Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos) x\n 2. \\<lbrakk>c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos;\n     mds' = mds\\<^sub>2; x \\<in> mds\\<^sub>2 GuarNoWrite\\<rbrakk>\n    \\<Longrightarrow> doesnt_modify\n                       (Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos) x", "with \\<open>bexp_vars e \\<inter> mds GuarNoRead = {}\\<close> and \\<open>mds\\<^sub>2 \\<le> mds\\<close>"], ["proof (chain)\npicking this:\n  bexp_vars e \\<inter> mds GuarNoRead = {}\n  mds\\<^sub>2 \\<sqsubseteq> mds\n  x \\<in> mds\\<^sub>2 GuarNoRead", "have \"x \\<notin> bexp_vars e\""], ["proof (prove)\nusing this:\n  bexp_vars e \\<inter> mds GuarNoRead = {}\n  mds\\<^sub>2 \\<sqsubseteq> mds\n  x \\<in> mds\\<^sub>2 GuarNoRead\n\ngoal (1 subgoal):\n 1. x \\<notin> bexp_vars e", "by (metis IntD2 disjoint_iff_not_equal inf_fun_def le_iff_inf)"], ["proof (state)\nthis:\n  x \\<notin> bexp_vars e\n\ngoal (2 subgoals):\n 1. \\<lbrakk>c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos;\n     mds' = mds\\<^sub>2; x \\<in> mds\\<^sub>2 GuarNoRead\\<rbrakk>\n    \\<Longrightarrow> doesnt_read\n                       (Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos) x\n 2. \\<lbrakk>c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos;\n     mds' = mds\\<^sub>2; x \\<in> mds\\<^sub>2 GuarNoWrite\\<rbrakk>\n    \\<Longrightarrow> doesnt_modify\n                       (Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos) x", "thus \"doesnt_read (If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos) x\""], ["proof (prove)\nusing this:\n  x \\<notin> bexp_vars e\n\ngoal (1 subgoal):\n 1. doesnt_read (Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos) x", "using if_doesnt_read"], ["proof (prove)\nusing this:\n  x \\<notin> bexp_vars e\n  ?x \\<notin> bexp_vars ?e \\<Longrightarrow>\n  doesnt_read (Stmt.If ?e ?c\\<^sub>1 ?c\\<^sub>2 \\<otimes> ?annos) ?x\n\ngoal (1 subgoal):\n 1. doesnt_read (Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos) x", "by blast"], ["proof (state)\nthis:\n  doesnt_read (Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos) x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos;\n     mds' = mds\\<^sub>2; x \\<in> mds\\<^sub>2 GuarNoWrite\\<rbrakk>\n    \\<Longrightarrow> doesnt_modify\n                       (Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos) x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos;\n     mds' = mds\\<^sub>2; x \\<in> mds\\<^sub>2 GuarNoWrite\\<rbrakk>\n    \\<Longrightarrow> doesnt_modify\n                       (Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos) x", "assume \"x \\<in> mds\\<^sub>2 GuarNoWrite\""], ["proof (state)\nthis:\n  x \\<in> mds\\<^sub>2 GuarNoWrite\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c' = Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos;\n     mds' = mds\\<^sub>2; x \\<in> mds\\<^sub>2 GuarNoWrite\\<rbrakk>\n    \\<Longrightarrow> doesnt_modify\n                       (Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos) x", "thus \"doesnt_modify (If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos) x\""], ["proof (prove)\nusing this:\n  x \\<in> mds\\<^sub>2 GuarNoWrite\n\ngoal (1 subgoal):\n 1. doesnt_modify (Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos) x", "using if_doesnt_modify"], ["proof (prove)\nusing this:\n  x \\<in> mds\\<^sub>2 GuarNoWrite\n  doesnt_modify (Stmt.If ?e ?c\\<^sub>1 ?c\\<^sub>2 \\<otimes> ?annos) ?x\n\ngoal (1 subgoal):\n 1. doesnt_modify (Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos) x", "by blast"], ["proof (state)\nthis:\n  doesnt_modify (Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes> annos) x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' x) \\<and>\n  (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x)\n\ngoal (1 subgoal):\n 1. (\\<exists>mem''.\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>c\\<^sub>1, mds\\<^sub>2 \\<oplus>\n                                   annos, mem''\\<rangle>) \\<or>\n    (\\<exists>mem''.\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>c\\<^sub>2, mds\\<^sub>2 \\<oplus>\n                                   annos, mem''\\<rangle>) \\<Longrightarrow>\n    (x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' x) \\<and>\n    (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>mem''.\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>c\\<^sub>1, mds\\<^sub>2 \\<oplus>\n                                   annos, mem''\\<rangle>) \\<or>\n    (\\<exists>mem''.\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>c\\<^sub>2, mds\\<^sub>2 \\<oplus>\n                                   annos, mem''\\<rangle>) \\<Longrightarrow>\n    (x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' x) \\<and>\n    (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x)", "assume \"(\\<exists>mem''. \\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>c\\<^sub>1, mds\\<^sub>2 \\<oplus> annos, mem''\\<rangle>) \\<or>\n              (\\<exists>mem''. \\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>c\\<^sub>2, mds\\<^sub>2 \\<oplus> annos, mem''\\<rangle>)\""], ["proof (state)\nthis:\n  (\\<exists>mem''.\n      \\<langle>c', mds', mem'\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>1, mds\\<^sub>2 \\<oplus>\n                                 annos, mem''\\<rangle>) \\<or>\n  (\\<exists>mem''.\n      \\<langle>c', mds', mem'\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>2, mds\\<^sub>2 \\<oplus> annos, mem''\\<rangle>)\n\ngoal (1 subgoal):\n 1. (\\<exists>mem''.\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>c\\<^sub>1, mds\\<^sub>2 \\<oplus>\n                                   annos, mem''\\<rangle>) \\<or>\n    (\\<exists>mem''.\n        \\<langle>c', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>c\\<^sub>2, mds\\<^sub>2 \\<oplus>\n                                   annos, mem''\\<rangle>) \\<Longrightarrow>\n    (x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' x) \\<and>\n    (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x)", "with if_"], ["proof (chain)\npicking this:\n  \\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds''\n  ?mds\\<^sub>25 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>1, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds'') \\<and>\n     locally_sound_mode_use \\<langle>c\\<^sub>1, ?mds\\<^sub>25, mem\\<rangle>\n  \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds''\n  ?mds\\<^sub>25 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>2, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds'') \\<and>\n     locally_sound_mode_use \\<langle>c\\<^sub>2, ?mds\\<^sub>25, mem\\<rangle>\n  bexp_vars e \\<inter> mds GuarNoRead = {}\n  mds\\<^sub>2 \\<sqsubseteq> mds\n  (\\<exists>mem''.\n      \\<langle>c', mds', mem'\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>1, mds\\<^sub>2 \\<oplus>\n                                 annos, mem''\\<rangle>) \\<or>\n  (\\<exists>mem''.\n      \\<langle>c', mds', mem'\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>2, mds\\<^sub>2 \\<oplus> annos, mem''\\<rangle>)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<turnstile> mds \\<oplus> annos { c\\<^sub>1 } mds''\n  ?mds\\<^sub>25 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>1, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds'') \\<and>\n     locally_sound_mode_use \\<langle>c\\<^sub>1, ?mds\\<^sub>25, mem\\<rangle>\n  \\<turnstile> mds \\<oplus> annos { c\\<^sub>2 } mds''\n  ?mds\\<^sub>25 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>2, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds'') \\<and>\n     locally_sound_mode_use \\<langle>c\\<^sub>2, ?mds\\<^sub>25, mem\\<rangle>\n  bexp_vars e \\<inter> mds GuarNoRead = {}\n  mds\\<^sub>2 \\<sqsubseteq> mds\n  (\\<exists>mem''.\n      \\<langle>c', mds', mem'\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>1, mds\\<^sub>2 \\<oplus>\n                                 annos, mem''\\<rangle>) \\<or>\n  (\\<exists>mem''.\n      \\<langle>c', mds', mem'\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>2, mds\\<^sub>2 \\<oplus> annos, mem''\\<rangle>)\n\ngoal (1 subgoal):\n 1. (x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' x) \\<and>\n    (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x)", "by (metis locally_sound_mode_use_def modes_le')"], ["proof (state)\nthis:\n  (x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' x) \\<and>\n  (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' x) \\<and>\n  (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>mem.\n     (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n      \\<in> loc_reach\n             \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n                      annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n      mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n     locally_sound_mode_use\n      \\<langle>Stmt.If e c\\<^sub>1 c\\<^sub>2 \\<otimes>\n               annos, mds\\<^sub>2, mem\\<rangle>\n\ngoal (3 subgoals):\n 1. \\<And>mds' mds annos c e mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>mds' = mds \\<oplus> annos; \\<turnstile> mds' { c } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> mds' GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>While e c \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>While e c \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 2. \\<And>mds c\\<^sub>1 mds' c\\<^sub>2 mds'' mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1 ;;\n       c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c\\<^sub>1 ;;\nc\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\n 3. \\<And>mds\\<^sub>2 c mds\\<^sub>2' mds\\<^sub>1 mds\\<^sub>1' mds\\<^sub>2''\n       mds\\<^sub>2''' mem'.\n       \\<lbrakk>\\<turnstile> mds\\<^sub>2 { c } mds\\<^sub>2';\n        \\<And>mds\\<^sub>2'' mds\\<^sub>2''' mem'.\n           mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2''' \\<sqsubseteq> mds\\<^sub>2') \\<and>\n              locally_sound_mode_use\n               \\<langle>c, mds\\<^sub>2'', mem\\<rangle>;\n        mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2;\n        mds\\<^sub>2' \\<sqsubseteq> mds\\<^sub>1';\n        mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2''' \\<sqsubseteq>\n                             mds\\<^sub>1') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c, mds\\<^sub>2'', mem\\<rangle>", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>mds' mds annos c e mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>mds' = mds \\<oplus> annos; \\<turnstile> mds' { c } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> mds' GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>While e c \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>While e c \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 2. \\<And>mds c\\<^sub>1 mds' c\\<^sub>2 mds'' mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1 ;;\n       c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c\\<^sub>1 ;;\nc\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\n 3. \\<And>mds\\<^sub>2 c mds\\<^sub>2' mds\\<^sub>1 mds\\<^sub>1' mds\\<^sub>2''\n       mds\\<^sub>2''' mem'.\n       \\<lbrakk>\\<turnstile> mds\\<^sub>2 { c } mds\\<^sub>2';\n        \\<And>mds\\<^sub>2'' mds\\<^sub>2''' mem'.\n           mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2''' \\<sqsubseteq> mds\\<^sub>2') \\<and>\n              locally_sound_mode_use\n               \\<langle>c, mds\\<^sub>2'', mem\\<rangle>;\n        mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2;\n        mds\\<^sub>2' \\<sqsubseteq> mds\\<^sub>1';\n        mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2''' \\<sqsubseteq>\n                             mds\\<^sub>1') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c, mds\\<^sub>2'', mem\\<rangle>", "case (while mdsa mds annos c e)"], ["proof (state)\nthis:\n  mdsa = mds \\<oplus> annos\n  \\<turnstile> mdsa { c } mdsa\n  ?mds\\<^sub>25 \\<sqsubseteq> mdsa \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mdsa) \\<and>\n     locally_sound_mode_use \\<langle>c, ?mds\\<^sub>25, mem\\<rangle>\n  bexp_vars e \\<inter> mdsa GuarNoRead = {}\n  mds\\<^sub>2 \\<sqsubseteq> mds\n\ngoal (3 subgoals):\n 1. \\<And>mds' mds annos c e mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>mds' = mds \\<oplus> annos; \\<turnstile> mds' { c } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> mds' GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>While e c \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>While e c \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 2. \\<And>mds c\\<^sub>1 mds' c\\<^sub>2 mds'' mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1 ;;\n       c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c\\<^sub>1 ;;\nc\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\n 3. \\<And>mds\\<^sub>2 c mds\\<^sub>2' mds\\<^sub>1 mds\\<^sub>1' mds\\<^sub>2''\n       mds\\<^sub>2''' mem'.\n       \\<lbrakk>\\<turnstile> mds\\<^sub>2 { c } mds\\<^sub>2';\n        \\<And>mds\\<^sub>2'' mds\\<^sub>2''' mem'.\n           mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2''' \\<sqsubseteq> mds\\<^sub>2') \\<and>\n              locally_sound_mode_use\n               \\<langle>c, mds\\<^sub>2'', mem\\<rangle>;\n        mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2;\n        mds\\<^sub>2' \\<sqsubseteq> mds\\<^sub>1';\n        mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2''' \\<sqsubseteq>\n                             mds\\<^sub>1') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c, mds\\<^sub>2'', mem\\<rangle>", "hence \"mds\\<^sub>2 \\<oplus> annos \\<le> mds \\<oplus> annos\""], ["proof (prove)\nusing this:\n  mdsa = mds \\<oplus> annos\n  \\<turnstile> mdsa { c } mdsa\n  ?mds\\<^sub>25 \\<sqsubseteq> mdsa \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mdsa) \\<and>\n     locally_sound_mode_use \\<langle>c, ?mds\\<^sub>25, mem\\<rangle>\n  bexp_vars e \\<inter> mdsa GuarNoRead = {}\n  mds\\<^sub>2 \\<sqsubseteq> mds\n\ngoal (1 subgoal):\n 1. mds\\<^sub>2 \\<oplus> annos \\<sqsubseteq> mds \\<oplus> annos", "by (metis (lifting) update_preserves_le)"], ["proof (state)\nthis:\n  mds\\<^sub>2 \\<oplus> annos \\<sqsubseteq> mds \\<oplus> annos\n\ngoal (3 subgoals):\n 1. \\<And>mds' mds annos c e mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>mds' = mds \\<oplus> annos; \\<turnstile> mds' { c } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> mds' GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>While e c \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>While e c \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 2. \\<And>mds c\\<^sub>1 mds' c\\<^sub>2 mds'' mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1 ;;\n       c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c\\<^sub>1 ;;\nc\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\n 3. \\<And>mds\\<^sub>2 c mds\\<^sub>2' mds\\<^sub>1 mds\\<^sub>1' mds\\<^sub>2''\n       mds\\<^sub>2''' mem'.\n       \\<lbrakk>\\<turnstile> mds\\<^sub>2 { c } mds\\<^sub>2';\n        \\<And>mds\\<^sub>2'' mds\\<^sub>2''' mem'.\n           mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2''' \\<sqsubseteq> mds\\<^sub>2') \\<and>\n              locally_sound_mode_use\n               \\<langle>c, mds\\<^sub>2'', mem\\<rangle>;\n        mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2;\n        mds\\<^sub>2' \\<sqsubseteq> mds\\<^sub>1';\n        mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2''' \\<sqsubseteq>\n                             mds\\<^sub>1') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c, mds\\<^sub>2'', mem\\<rangle>", "have while_loc_reach: \"\\<And> c' mds' mem' mem.\n  \\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>While e c \\<otimes> annos, mds\\<^sub>2, mem\\<rangle> \\<Longrightarrow>\n  c' = While e c \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n  c' = While e c \\<and> mds' \\<le> mdsa \\<or>\n  c' = Stmt.If e (c ;; While e c) Stop \\<and> mds' \\<le> mdsa \\<or>\n  c' = Stop \\<and> mds' \\<le> mdsa \\<or>\n  (\\<exists>c'' mem'' mds\\<^sub>3.\n      c' = c'' ;; While e c \\<and>\n      mds\\<^sub>3 \\<le> mdsa \\<and> \\<langle>c'', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c' mds' mem' mem.\n       \\<langle>c', mds', mem'\\<rangle>\n       \\<in> loc_reach\n              \\<langle>While e c \\<otimes>\n                       annos, mds\\<^sub>2, mem\\<rangle> \\<Longrightarrow>\n       c' = While e c \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n       c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n       c' = Stmt.If e (c ;; While e c) Stop \\<and>\n       mds' \\<sqsubseteq> mdsa \\<or>\n       c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n       (\\<exists>c'' mem'' mds\\<^sub>3.\n           c' = c'' ;; While e c \\<and>\n           mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n           \\<langle>c'', mds', mem'\\<rangle>\n           \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c' mds' mem' mem.\n       \\<langle>c', mds', mem'\\<rangle>\n       \\<in> loc_reach\n              \\<langle>While e c \\<otimes>\n                       annos, mds\\<^sub>2, mem\\<rangle> \\<Longrightarrow>\n       c' = While e c \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n       c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n       c' = Stmt.If e (c ;; While e c) Stop \\<and>\n       mds' \\<sqsubseteq> mdsa \\<or>\n       c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n       (\\<exists>c'' mem'' mds\\<^sub>3.\n           c' = c'' ;; While e c \\<and>\n           mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n           \\<langle>c'', mds', mem'\\<rangle>\n           \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>)", "fix mem c' mds' mem'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c' mds' mem' mem.\n       \\<langle>c', mds', mem'\\<rangle>\n       \\<in> loc_reach\n              \\<langle>While e c \\<otimes>\n                       annos, mds\\<^sub>2, mem\\<rangle> \\<Longrightarrow>\n       c' = While e c \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n       c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n       c' = Stmt.If e (c ;; While e c) Stop \\<and>\n       mds' \\<sqsubseteq> mdsa \\<or>\n       c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n       (\\<exists>c'' mem'' mds\\<^sub>3.\n           c' = c'' ;; While e c \\<and>\n           mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n           \\<langle>c'', mds', mem'\\<rangle>\n           \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>)", "assume \"\\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>While e c \\<otimes> annos, mds\\<^sub>2, mem\\<rangle>\""], ["proof (state)\nthis:\n  \\<langle>c', mds', mem'\\<rangle>\n  \\<in> loc_reach\n         \\<langle>While e c \\<otimes> annos, mds\\<^sub>2, mem\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>c' mds' mem' mem.\n       \\<langle>c', mds', mem'\\<rangle>\n       \\<in> loc_reach\n              \\<langle>While e c \\<otimes>\n                       annos, mds\\<^sub>2, mem\\<rangle> \\<Longrightarrow>\n       c' = While e c \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n       c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n       c' = Stmt.If e (c ;; While e c) Stop \\<and>\n       mds' \\<sqsubseteq> mdsa \\<or>\n       c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n       (\\<exists>c'' mem'' mds\\<^sub>3.\n           c' = c'' ;; While e c \\<and>\n           mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n           \\<langle>c'', mds', mem'\\<rangle>\n           \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>)", "thus \"?thesis c' mds' mem' mem\""], ["proof (prove)\nusing this:\n  \\<langle>c', mds', mem'\\<rangle>\n  \\<in> loc_reach\n         \\<langle>While e c \\<otimes> annos, mds\\<^sub>2, mem\\<rangle>\n\ngoal (1 subgoal):\n 1. c' = While e c \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n    c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n    c' = Stmt.If e (c ;; While e c) Stop \\<and>\n    mds' \\<sqsubseteq> mdsa \\<or>\n    c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n    (\\<exists>c'' mem'' mds\\<^sub>3.\n        c' = c'' ;; While e c \\<and>\n        mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n        \\<langle>c'', mds', mem'\\<rangle>\n        \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>)", "apply (induct rule: loc_reach.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. fst (fst \\<langle>While e c \\<otimes>\n                      annos, mds\\<^sub>2, mem\\<rangle>) =\n    While e c \\<otimes> annos \\<and>\n    snd (fst \\<langle>While e c \\<otimes>\n                      annos, mds\\<^sub>2, mem\\<rangle>) =\n    mds\\<^sub>2 \\<or>\n    fst (fst \\<langle>While e c \\<otimes>\n                      annos, mds\\<^sub>2, mem\\<rangle>) =\n    While e c \\<and>\n    snd (fst \\<langle>While e c \\<otimes>\n                      annos, mds\\<^sub>2, mem\\<rangle>) \\<sqsubseteq>\n    mdsa \\<or>\n    fst (fst \\<langle>While e c \\<otimes>\n                      annos, mds\\<^sub>2, mem\\<rangle>) =\n    Stmt.If e (c ;; While e c) Stop \\<and>\n    snd (fst \\<langle>While e c \\<otimes>\n                      annos, mds\\<^sub>2, mem\\<rangle>) \\<sqsubseteq>\n    mdsa \\<or>\n    fst (fst \\<langle>While e c \\<otimes>\n                      annos, mds\\<^sub>2, mem\\<rangle>) =\n    Stop \\<and>\n    snd (fst \\<langle>While e c \\<otimes>\n                      annos, mds\\<^sub>2, mem\\<rangle>) \\<sqsubseteq>\n    mdsa \\<or>\n    (\\<exists>c'' mem'' mds\\<^sub>3.\n        fst (fst \\<langle>While e c \\<otimes>\n                          annos, mds\\<^sub>2, mem\\<rangle>) =\n        c'' ;; While e c \\<and>\n        mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n        \\<langle>c'', snd (fst \\<langle>While e c \\<otimes>\n  annos, mds\\<^sub>2, mem\\<rangle>), snd\n\\<langle>While e c \\<otimes> annos, mds\\<^sub>2, mem\\<rangle>\\<rangle>\n        \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>)\n 2. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        c' = While e c \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n        c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stmt.If e (c ;; While e c) Stop \\<and>\n        mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        (\\<exists>c'' mem'' mds\\<^sub>3.\n            c' = c'' ;; While e c \\<and>\n            mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n            \\<langle>c'', mds', mem'\\<rangle>\n            \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>);\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> c'' = While e c \\<otimes> annos \\<and>\n                         mds'' = mds\\<^sub>2 \\<or>\n                         c'' = While e c \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stop \\<and> mds'' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''a mem''a mds\\<^sub>3.\n                             c'' = c''a ;; While e c \\<and>\n                             mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                             \\<langle>c''a, mds'', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>)\n 3. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        c' = While e c \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n        c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stmt.If e (c ;; While e c) Stop \\<and>\n        mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        (\\<exists>c'' mem'' mds\\<^sub>3.\n            c' = c'' ;; While e c \\<and>\n            mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n            \\<langle>c'', mds', mem'\\<rangle>\n            \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>);\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' = While e c \\<otimes> annos \\<and>\n                         mds' = mds\\<^sub>2 \\<or>\n                         c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c'' mem''a mds\\<^sub>3.\n                             c' = c'' ;; While e c \\<and>\n                             mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                             \\<langle>c'', mds', mem''\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>)", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        c' = While e c \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n        c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stmt.If e (c ;; While e c) Stop \\<and>\n        mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        (\\<exists>c''.\n            c' = c'' ;; While e c \\<and>\n            (\\<exists>mem'' mds\\<^sub>3.\n                mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                \\<langle>c'', mds', mem'\\<rangle>\n                \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>));\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> c'' = While e c \\<otimes> annos \\<and>\n                         mds'' = mds\\<^sub>2 \\<or>\n                         c'' = While e c \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stop \\<and> mds'' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''a.\n                             c'' = c''a ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c''a, mds'', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))\n 2. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        c' = While e c \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n        c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stmt.If e (c ;; While e c) Stop \\<and>\n        mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        (\\<exists>c''.\n            c' = c'' ;; While e c \\<and>\n            (\\<exists>mem'' mds\\<^sub>3.\n                mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                \\<langle>c'', mds', mem'\\<rangle>\n                \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>));\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' = While e c \\<otimes> annos \\<and>\n                         mds' = mds\\<^sub>2 \\<or>\n                         c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''.\n                             c' = c'' ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c'', mds', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))", "apply (erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        c' = While e c \\<otimes> annos \\<and> mds' = mds\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> c'' = While e c \\<otimes> annos \\<and>\n                         mds'' = mds\\<^sub>2 \\<or>\n                         c'' = While e c \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stop \\<and> mds'' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''a.\n                             c'' = c''a ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c''a, mds'', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))\n 2. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stmt.If e (c ;; While e c) Stop \\<and>\n        mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        (\\<exists>c''.\n            c' = c'' ;; While e c \\<and>\n            (\\<exists>mem'' mds\\<^sub>3.\n                mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                \\<langle>c'', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>c, mds\\<^sub>3, mem''\\<rangle>))\\<rbrakk>\n       \\<Longrightarrow> c'' = While e c \\<otimes> annos \\<and>\n                         mds'' = mds\\<^sub>2 \\<or>\n                         c'' = While e c \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stop \\<and> mds'' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''a.\n                             c'' = c''a ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c''a, mds'', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))\n 3. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        c' = While e c \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n        c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stmt.If e (c ;; While e c) Stop \\<and>\n        mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        (\\<exists>c''.\n            c' = c'' ;; While e c \\<and>\n            (\\<exists>mem'' mds\\<^sub>3.\n                mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                \\<langle>c'', mds', mem'\\<rangle>\n                \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>));\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' = While e c \\<otimes> annos \\<and>\n                         mds' = mds\\<^sub>2 \\<or>\n                         c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''.\n                             c' = c'' ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c'', mds', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>While e c \\<otimes>\n                         annos, mds\\<^sub>2, mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        \\<langle>While e c \\<otimes>\n                 annos, mds\\<^sub>2, mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        c' = While e c \\<otimes> annos\\<rbrakk>\n       \\<Longrightarrow> c'' = While e c \\<otimes> annos \\<and>\n                         mds'' = mds\\<^sub>2 \\<or>\n                         c'' = While e c \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stop \\<and> mds'' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''a.\n                             c'' = c''a ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c''a, mds'', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))\n 2. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stmt.If e (c ;; While e c) Stop \\<and>\n        mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        (\\<exists>c''.\n            c' = c'' ;; While e c \\<and>\n            (\\<exists>mem'' mds\\<^sub>3.\n                mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                \\<langle>c'', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>c, mds\\<^sub>3, mem''\\<rangle>))\\<rbrakk>\n       \\<Longrightarrow> c'' = While e c \\<otimes> annos \\<and>\n                         mds'' = mds\\<^sub>2 \\<or>\n                         c'' = While e c \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stop \\<and> mds'' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''a.\n                             c'' = c''a ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c''a, mds'', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))\n 3. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        c' = While e c \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n        c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stmt.If e (c ;; While e c) Stop \\<and>\n        mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        (\\<exists>c''.\n            c' = c'' ;; While e c \\<and>\n            (\\<exists>mem'' mds\\<^sub>3.\n                mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                \\<langle>c'', mds', mem'\\<rangle>\n                \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>));\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' = While e c \\<otimes> annos \\<and>\n                         mds' = mds\\<^sub>2 \\<or>\n                         c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''.\n                             c' = c'' ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c'', mds', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))", "apply (metis \\<open>mds\\<^sub>2 \\<oplus> annos \\<le> mds \\<oplus> annos\\<close> while.hyps(1) while_eval_elim)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stmt.If e (c ;; While e c) Stop \\<and>\n        mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        (\\<exists>c''.\n            c' = c'' ;; While e c \\<and>\n            (\\<exists>mem'' mds\\<^sub>3.\n                mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                \\<langle>c'', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>c, mds\\<^sub>3, mem''\\<rangle>))\\<rbrakk>\n       \\<Longrightarrow> c'' = While e c \\<otimes> annos \\<and>\n                         mds'' = mds\\<^sub>2 \\<or>\n                         c'' = While e c \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stop \\<and> mds'' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''a.\n                             c'' = c''a ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c''a, mds'', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))\n 2. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        c' = While e c \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n        c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stmt.If e (c ;; While e c) Stop \\<and>\n        mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        (\\<exists>c''.\n            c' = c'' ;; While e c \\<and>\n            (\\<exists>mem'' mds\\<^sub>3.\n                mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                \\<langle>c'', mds', mem'\\<rangle>\n                \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>));\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' = While e c \\<otimes> annos \\<and>\n                         mds' = mds\\<^sub>2 \\<or>\n                         c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''.\n                             c' = c'' ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c'', mds', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))", "apply (erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        c' = While e c \\<and> mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> c'' = While e c \\<otimes> annos \\<and>\n                         mds'' = mds\\<^sub>2 \\<or>\n                         c'' = While e c \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stop \\<and> mds'' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''a.\n                             c'' = c''a ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c''a, mds'', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))\n 2. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        c' = Stmt.If e (c ;; While e c) Stop \\<and>\n        mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        (\\<exists>c''.\n            c' = c'' ;; While e c \\<and>\n            (\\<exists>mem'' mds\\<^sub>3.\n                mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                \\<langle>c'', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>c, mds\\<^sub>3, mem''\\<rangle>))\\<rbrakk>\n       \\<Longrightarrow> c'' = While e c \\<otimes> annos \\<and>\n                         mds'' = mds\\<^sub>2 \\<or>\n                         c'' = While e c \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stop \\<and> mds'' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''a.\n                             c'' = c''a ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c''a, mds'', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))\n 3. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        c' = While e c \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n        c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stmt.If e (c ;; While e c) Stop \\<and>\n        mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        (\\<exists>c''.\n            c' = c'' ;; While e c \\<and>\n            (\\<exists>mem'' mds\\<^sub>3.\n                mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                \\<langle>c'', mds', mem'\\<rangle>\n                \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>));\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' = While e c \\<otimes> annos \\<and>\n                         mds' = mds\\<^sub>2 \\<or>\n                         c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''.\n                             c' = c'' ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c'', mds', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))", "apply (metis while_eval_elim')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        c' = Stmt.If e (c ;; While e c) Stop \\<and>\n        mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        (\\<exists>c''.\n            c' = c'' ;; While e c \\<and>\n            (\\<exists>mem'' mds\\<^sub>3.\n                mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                \\<langle>c'', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>c, mds\\<^sub>3, mem''\\<rangle>))\\<rbrakk>\n       \\<Longrightarrow> c'' = While e c \\<otimes> annos \\<and>\n                         mds'' = mds\\<^sub>2 \\<or>\n                         c'' = While e c \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stop \\<and> mds'' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''a.\n                             c'' = c''a ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c''a, mds'', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))\n 2. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        c' = While e c \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n        c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stmt.If e (c ;; While e c) Stop \\<and>\n        mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        (\\<exists>c''.\n            c' = c'' ;; While e c \\<and>\n            (\\<exists>mem'' mds\\<^sub>3.\n                mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                \\<langle>c'', mds', mem'\\<rangle>\n                \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>));\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' = While e c \\<otimes> annos \\<and>\n                         mds' = mds\\<^sub>2 \\<or>\n                         c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''.\n                             c' = c'' ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c'', mds', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))", "apply (erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        c' = Stmt.If e (c ;; While e c) Stop \\<and>\n        mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> c'' = While e c \\<otimes> annos \\<and>\n                         mds'' = mds\\<^sub>2 \\<or>\n                         c'' = While e c \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stop \\<and> mds'' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''a.\n                             c'' = c''a ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c''a, mds'', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))\n 2. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        (\\<exists>c''.\n            c' = c'' ;; While e c \\<and>\n            (\\<exists>mem'' mds\\<^sub>3.\n                mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                \\<langle>c'', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>c, mds\\<^sub>3, mem''\\<rangle>))\\<rbrakk>\n       \\<Longrightarrow> c'' = While e c \\<otimes> annos \\<and>\n                         mds'' = mds\\<^sub>2 \\<or>\n                         c'' = While e c \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stop \\<and> mds'' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''a.\n                             c'' = c''a ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c''a, mds'', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))\n 3. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        c' = While e c \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n        c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stmt.If e (c ;; While e c) Stop \\<and>\n        mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        (\\<exists>c''.\n            c' = c'' ;; While e c \\<and>\n            (\\<exists>mem'' mds\\<^sub>3.\n                mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                \\<langle>c'', mds', mem'\\<rangle>\n                \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>));\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' = While e c \\<otimes> annos \\<and>\n                         mds' = mds\\<^sub>2 \\<or>\n                         c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''.\n                             c' = c'' ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c'', mds', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>Stmt.If e (c ;; While e c)\n                          Stop, mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        \\<langle>Stmt.If e (c ;; While e c)\n                  Stop, mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> c'' = While e c \\<otimes> annos \\<and>\n                         mds'' = mds\\<^sub>2 \\<or>\n                         c'' = While e c \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stop \\<and> mds'' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''a.\n                             c'' = c''a ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c''a, mds'', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))\n 2. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        (\\<exists>c''.\n            c' = c'' ;; While e c \\<and>\n            (\\<exists>mem'' mds\\<^sub>3.\n                mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                \\<langle>c'', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>c, mds\\<^sub>3, mem''\\<rangle>))\\<rbrakk>\n       \\<Longrightarrow> c'' = While e c \\<otimes> annos \\<and>\n                         mds'' = mds\\<^sub>2 \\<or>\n                         c'' = While e c \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stop \\<and> mds'' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''a.\n                             c'' = c''a ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c''a, mds'', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))\n 3. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        c' = While e c \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n        c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stmt.If e (c ;; While e c) Stop \\<and>\n        mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        (\\<exists>c''.\n            c' = c'' ;; While e c \\<and>\n            (\\<exists>mem'' mds\\<^sub>3.\n                mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                \\<langle>c'', mds', mem'\\<rangle>\n                \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>));\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' = While e c \\<otimes> annos \\<and>\n                         mds' = mds\\<^sub>2 \\<or>\n                         c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''.\n                             c' = c'' ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c'', mds', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))", "apply (metis if_eval_elim' loc_reach_refl')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        (\\<exists>c''.\n            c' = c'' ;; While e c \\<and>\n            (\\<exists>mem'' mds\\<^sub>3.\n                mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                \\<langle>c'', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>c, mds\\<^sub>3, mem''\\<rangle>))\\<rbrakk>\n       \\<Longrightarrow> c'' = While e c \\<otimes> annos \\<and>\n                         mds'' = mds\\<^sub>2 \\<or>\n                         c'' = While e c \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stop \\<and> mds'' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''a.\n                             c'' = c''a ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c''a, mds'', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))\n 2. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        c' = While e c \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n        c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stmt.If e (c ;; While e c) Stop \\<and>\n        mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        (\\<exists>c''.\n            c' = c'' ;; While e c \\<and>\n            (\\<exists>mem'' mds\\<^sub>3.\n                mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                \\<langle>c'', mds', mem'\\<rangle>\n                \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>));\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' = While e c \\<otimes> annos \\<and>\n                         mds' = mds\\<^sub>2 \\<or>\n                         c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''.\n                             c' = c'' ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c'', mds', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))", "apply (erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        c' = Stop \\<and> mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> c'' = While e c \\<otimes> annos \\<and>\n                         mds'' = mds\\<^sub>2 \\<or>\n                         c'' = While e c \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stop \\<and> mds'' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''a.\n                             c'' = c''a ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c''a, mds'', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))\n 2. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        \\<exists>c''.\n           c' = c'' ;; While e c \\<and>\n           (\\<exists>mem'' mds\\<^sub>3.\n               mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n               \\<langle>c'', mds', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>3, mem''\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> c'' = While e c \\<otimes> annos \\<and>\n                         mds'' = mds\\<^sub>2 \\<or>\n                         c'' = While e c \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stop \\<and> mds'' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''a.\n                             c'' = c''a ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c''a, mds'', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))\n 3. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        c' = While e c \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n        c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stmt.If e (c ;; While e c) Stop \\<and>\n        mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        (\\<exists>c''.\n            c' = c'' ;; While e c \\<and>\n            (\\<exists>mem'' mds\\<^sub>3.\n                mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                \\<langle>c'', mds', mem'\\<rangle>\n                \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>));\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' = While e c \\<otimes> annos \\<and>\n                         mds' = mds\\<^sub>2 \\<or>\n                         c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''.\n                             c' = c'' ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c'', mds', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))", "apply (metis stop_no_eval)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        \\<exists>c''.\n           c' = c'' ;; While e c \\<and>\n           (\\<exists>mem'' mds\\<^sub>3.\n               mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n               \\<langle>c'', mds', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>3, mem''\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> c'' = While e c \\<otimes> annos \\<and>\n                         mds'' = mds\\<^sub>2 \\<or>\n                         c'' = While e c \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stop \\<and> mds'' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''a.\n                             c'' = c''a ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c''a, mds'', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))\n 2. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        c' = While e c \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n        c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stmt.If e (c ;; While e c) Stop \\<and>\n        mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        (\\<exists>c''.\n            c' = c'' ;; While e c \\<and>\n            (\\<exists>mem'' mds\\<^sub>3.\n                mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                \\<langle>c'', mds', mem'\\<rangle>\n                \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>));\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' = While e c \\<otimes> annos \\<and>\n                         mds' = mds\\<^sub>2 \\<or>\n                         c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''.\n                             c' = c'' ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c'', mds', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))", "apply (erule exE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem'' c''a.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        c' = c''a ;; While e c \\<and>\n        (\\<exists>mem'' mds\\<^sub>3.\n            mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n            \\<langle>c''a, mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c, mds\\<^sub>3, mem''\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> c'' = While e c \\<otimes> annos \\<and>\n                         mds'' = mds\\<^sub>2 \\<or>\n                         c'' = While e c \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stop \\<and> mds'' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''a.\n                             c'' = c''a ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c''a, mds'', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))\n 2. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        c' = While e c \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n        c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stmt.If e (c ;; While e c) Stop \\<and>\n        mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        (\\<exists>c''.\n            c' = c'' ;; While e c \\<and>\n            (\\<exists>mem'' mds\\<^sub>3.\n                mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                \\<langle>c'', mds', mem'\\<rangle>\n                \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>));\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' = While e c \\<otimes> annos \\<and>\n                         mds' = mds\\<^sub>2 \\<or>\n                         c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''.\n                             c' = c'' ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c'', mds', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))", "apply (rename_tac c' mds' mem' c'' mds'' mem'' c''a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem'' c''a.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        c' = c''a ;; While e c \\<and>\n        (\\<exists>mem'' mds\\<^sub>3.\n            mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n            \\<langle>c''a, mds', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c, mds\\<^sub>3, mem''\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> c'' = While e c \\<otimes> annos \\<and>\n                         mds'' = mds\\<^sub>2 \\<or>\n                         c'' = While e c \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stop \\<and> mds'' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''a.\n                             c'' = c''a ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c''a, mds'', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))\n 2. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        c' = While e c \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n        c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stmt.If e (c ;; While e c) Stop \\<and>\n        mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        (\\<exists>c''.\n            c' = c'' ;; While e c \\<and>\n            (\\<exists>mem'' mds\\<^sub>3.\n                mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                \\<langle>c'', mds', mem'\\<rangle>\n                \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>));\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' = While e c \\<otimes> annos \\<and>\n                         mds' = mds\\<^sub>2 \\<or>\n                         c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''.\n                             c' = c'' ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c'', mds', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))", "apply (case_tac \"c''a = Stop\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem'' c''a.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        c' = c''a ;; While e c \\<and>\n        (\\<exists>mem'' mds\\<^sub>3.\n            mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n            \\<langle>c''a, mds', mem'\\<rangle>\n            \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>);\n        c''a = Stop\\<rbrakk>\n       \\<Longrightarrow> c'' = While e c \\<otimes> annos \\<and>\n                         mds'' = mds\\<^sub>2 \\<or>\n                         c'' = While e c \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stop \\<and> mds'' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''a.\n                             c'' = c''a ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c''a, mds'', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))\n 2. \\<And>c' mds' mem' c'' mds'' mem'' c''a.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        c' = c''a ;; While e c \\<and>\n        (\\<exists>mem'' mds\\<^sub>3.\n            mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n            \\<langle>c''a, mds', mem'\\<rangle>\n            \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>);\n        c''a \\<noteq> Stop\\<rbrakk>\n       \\<Longrightarrow> c'' = While e c \\<otimes> annos \\<and>\n                         mds'' = mds\\<^sub>2 \\<or>\n                         c'' = While e c \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stop \\<and> mds'' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''a.\n                             c'' = c''a ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c''a, mds'', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))\n 3. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        c' = While e c \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n        c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stmt.If e (c ;; While e c) Stop \\<and>\n        mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        (\\<exists>c''.\n            c' = c'' ;; While e c \\<and>\n            (\\<exists>mem'' mds\\<^sub>3.\n                mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                \\<langle>c'', mds', mem'\\<rangle>\n                \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>));\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x\\<rbrakk>\n       \\<Longrightarrow> c' = While e c \\<otimes> annos \\<and>\n                         mds' = mds\\<^sub>2 \\<or>\n                         c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''.\n                             c' = c'' ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c'', mds', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))", "apply (insert while.hyps(3))"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem'' c''a.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        c' = c''a ;; While e c \\<and>\n        (\\<exists>mem'' mds\\<^sub>3.\n            mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n            \\<langle>c''a, mds', mem'\\<rangle>\n            \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>);\n        c''a = Stop;\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mdsa \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mdsa) \\<and>\n              locally_sound_mode_use\n               \\<langle>c, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> c'' = While e c \\<otimes> annos \\<and>\n                         mds'' = mds\\<^sub>2 \\<or>\n                         c'' = While e c \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stop \\<and> mds'' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''a.\n                             c'' = c''a ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c''a, mds'', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))\n 2. \\<And>c' mds' mem' c'' mds'' mem'' c''a.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        c' = c''a ;; While e c \\<and>\n        (\\<exists>mem'' mds\\<^sub>3.\n            mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n            \\<langle>c''a, mds', mem'\\<rangle>\n            \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>);\n        c''a \\<noteq> Stop;\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mdsa \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mdsa) \\<and>\n              locally_sound_mode_use\n               \\<langle>c, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> c'' = While e c \\<otimes> annos \\<and>\n                         mds'' = mds\\<^sub>2 \\<or>\n                         c'' = While e c \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stop \\<and> mds'' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''a.\n                             c'' = c''a ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c''a, mds'', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))\n 3. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        c' = While e c \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n        c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stmt.If e (c ;; While e c) Stop \\<and>\n        mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        (\\<exists>c''.\n            c' = c'' ;; While e c \\<and>\n            (\\<exists>mem'' mds\\<^sub>3.\n                mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                \\<langle>c'', mds', mem'\\<rangle>\n                \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>));\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x;\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mdsa \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mdsa) \\<and>\n              locally_sound_mode_use\n               \\<langle>c, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> c' = While e c \\<otimes> annos \\<and>\n                         mds' = mds\\<^sub>2 \\<or>\n                         c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''.\n                             c' = c'' ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c'', mds', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))", "apply (metis seq_stop_elim while.hyps(3))"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c' mds' mem' c'' mds'' mem'' c''a.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        \\<langle>c', mds', mem'\\<rangle> \\<leadsto>\n        \\<langle>c'', mds'', mem''\\<rangle>;\n        c' = c''a ;; While e c \\<and>\n        (\\<exists>mem'' mds\\<^sub>3.\n            mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n            \\<langle>c''a, mds', mem'\\<rangle>\n            \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>);\n        c''a \\<noteq> Stop;\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mdsa \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mdsa) \\<and>\n              locally_sound_mode_use\n               \\<langle>c, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> c'' = While e c \\<otimes> annos \\<and>\n                         mds'' = mds\\<^sub>2 \\<or>\n                         c'' = While e c \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds'' \\<sqsubseteq> mdsa \\<or>\n                         c'' = Stop \\<and> mds'' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''a.\n                             c'' = c''a ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c''a, mds'', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))\n 2. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        c' = While e c \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n        c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stmt.If e (c ;; While e c) Stop \\<and>\n        mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        (\\<exists>c''.\n            c' = c'' ;; While e c \\<and>\n            (\\<exists>mem'' mds\\<^sub>3.\n                mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                \\<langle>c'', mds', mem'\\<rangle>\n                \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>));\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x;\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mdsa \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mdsa) \\<and>\n              locally_sound_mode_use\n               \\<langle>c, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> c' = While e c \\<otimes> annos \\<and>\n                         mds' = mds\\<^sub>2 \\<or>\n                         c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''.\n                             c' = c'' ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c'', mds', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))", "apply (metis loc_reach.step seq_elim)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c' mds' mem' mem''.\n       \\<lbrakk>\\<langle>c', mds', mem'\\<rangle>\n                \\<in> loc_reach\n                       \\<langle>While e c \\<otimes>\n                                annos, mds\\<^sub>2, mem\\<rangle>;\n        c' = While e c \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n        c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stmt.If e (c ;; While e c) Stop \\<and>\n        mds' \\<sqsubseteq> mdsa \\<or>\n        c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n        (\\<exists>c''.\n            c' = c'' ;; While e c \\<and>\n            (\\<exists>mem'' mds\\<^sub>3.\n                mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                \\<langle>c'', mds', mem'\\<rangle>\n                \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>));\n        \\<forall>x\\<in>mds' AsmNoWrite. mem' x = mem'' x;\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mdsa \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mdsa) \\<and>\n              locally_sound_mode_use\n               \\<langle>c, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> c' = While e c \\<otimes> annos \\<and>\n                         mds' = mds\\<^sub>2 \\<or>\n                         c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stmt.If e (c ;; While e c) Stop \\<and>\n                         mds' \\<sqsubseteq> mdsa \\<or>\n                         c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n                         (\\<exists>c''.\n                             c' = c'' ;; While e c \\<and>\n                             (\\<exists>mem''a mds\\<^sub>3.\n                                 mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n                                 \\<langle>c'', mds', mem''\\<rangle>\n                                 \\<in> loc_reach\n  \\<langle>c, mds\\<^sub>3, mem''a\\<rangle>))", "by (metis (full_types) loc_reach.mem_diff)"], ["proof (state)\nthis:\n  c' = While e c \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n  c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n  c' = Stmt.If e (c ;; While e c) Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n  c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n  (\\<exists>c'' mem'' mds\\<^sub>3.\n      c' = c'' ;; While e c \\<and>\n      mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n      \\<langle>c'', mds', mem'\\<rangle>\n      \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<langle>?c'5, ?mds'5, ?mem'5\\<rangle>\n  \\<in> loc_reach\n         \\<langle>While e c \\<otimes>\n                  annos, mds\\<^sub>2, ?mem5\\<rangle> \\<Longrightarrow>\n  ?c'5 = While e c \\<otimes> annos \\<and> ?mds'5 = mds\\<^sub>2 \\<or>\n  ?c'5 = While e c \\<and> ?mds'5 \\<sqsubseteq> mdsa \\<or>\n  ?c'5 = Stmt.If e (c ;; While e c) Stop \\<and>\n  ?mds'5 \\<sqsubseteq> mdsa \\<or>\n  ?c'5 = Stop \\<and> ?mds'5 \\<sqsubseteq> mdsa \\<or>\n  (\\<exists>c'' mem'' mds\\<^sub>3.\n      ?c'5 = c'' ;; While e c \\<and>\n      mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n      \\<langle>c'', ?mds'5, ?mem'5\\<rangle>\n      \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>)\n\ngoal (3 subgoals):\n 1. \\<And>mds' mds annos c e mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>mds' = mds \\<oplus> annos; \\<turnstile> mds' { c } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> mds' GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>While e c \\<otimes>\n       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>While e c \\<otimes>\nannos, mds\\<^sub>2, mem\\<rangle>\n 2. \\<And>mds c\\<^sub>1 mds' c\\<^sub>2 mds'' mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1 ;;\n       c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c\\<^sub>1 ;;\nc\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\n 3. \\<And>mds\\<^sub>2 c mds\\<^sub>2' mds\\<^sub>1 mds\\<^sub>1' mds\\<^sub>2''\n       mds\\<^sub>2''' mem'.\n       \\<lbrakk>\\<turnstile> mds\\<^sub>2 { c } mds\\<^sub>2';\n        \\<And>mds\\<^sub>2'' mds\\<^sub>2''' mem'.\n           mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2''' \\<sqsubseteq> mds\\<^sub>2') \\<and>\n              locally_sound_mode_use\n               \\<langle>c, mds\\<^sub>2'', mem\\<rangle>;\n        mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2;\n        mds\\<^sub>2' \\<sqsubseteq> mds\\<^sub>1';\n        mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2''' \\<sqsubseteq>\n                             mds\\<^sub>1') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c, mds\\<^sub>2'', mem\\<rangle>", "from while"], ["proof (chain)\npicking this:\n  mdsa = mds \\<oplus> annos\n  \\<turnstile> mdsa { c } mdsa\n  ?mds\\<^sub>25 \\<sqsubseteq> mdsa \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mdsa) \\<and>\n     locally_sound_mode_use \\<langle>c, ?mds\\<^sub>25, mem\\<rangle>\n  bexp_vars e \\<inter> mdsa GuarNoRead = {}\n  mds\\<^sub>2 \\<sqsubseteq> mds", "show ?case"], ["proof (prove)\nusing this:\n  mdsa = mds \\<oplus> annos\n  \\<turnstile> mdsa { c } mdsa\n  ?mds\\<^sub>25 \\<sqsubseteq> mdsa \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mdsa) \\<and>\n     locally_sound_mode_use \\<langle>c, ?mds\\<^sub>25, mem\\<rangle>\n  bexp_vars e \\<inter> mdsa GuarNoRead = {}\n  mds\\<^sub>2 \\<sqsubseteq> mds\n\ngoal (1 subgoal):\n 1. \\<forall>mem.\n       (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>While e c \\<otimes>\n                        annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n        mds\\<^sub>2' \\<sqsubseteq> mdsa) \\<and>\n       locally_sound_mode_use\n        \\<langle>While e c \\<otimes> annos, mds\\<^sub>2, mem\\<rangle>", "proof (auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>mem.\n       \\<lbrakk>mdsa = mds \\<oplus> annos;\n        \\<turnstile> mds \\<oplus> annos { c } mds \\<oplus> annos;\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds \\<oplus> annos) \\<and>\n              locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> (mds \\<oplus> annos) GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>While e c \\<otimes>\n                        annos, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> mds\\<^sub>2' \\<sqsubseteq> mds \\<oplus> annos\n 2. \\<And>mem.\n       \\<lbrakk>mdsa = mds \\<oplus> annos;\n        \\<turnstile> mds \\<oplus> annos { c } mds \\<oplus> annos;\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds \\<oplus> annos) \\<and>\n              locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> (mds \\<oplus> annos) GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> locally_sound_mode_use\n                          \\<langle>While e c \\<otimes>\n                                   annos, mds\\<^sub>2, mem\\<rangle>", "fix mem"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>mem.\n       \\<lbrakk>mdsa = mds \\<oplus> annos;\n        \\<turnstile> mds \\<oplus> annos { c } mds \\<oplus> annos;\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds \\<oplus> annos) \\<and>\n              locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> (mds \\<oplus> annos) GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>While e c \\<otimes>\n                        annos, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> mds\\<^sub>2' \\<sqsubseteq> mds \\<oplus> annos\n 2. \\<And>mem.\n       \\<lbrakk>mdsa = mds \\<oplus> annos;\n        \\<turnstile> mds \\<oplus> annos { c } mds \\<oplus> annos;\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds \\<oplus> annos) \\<and>\n              locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> (mds \\<oplus> annos) GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> locally_sound_mode_use\n                          \\<langle>While e c \\<otimes>\n                                   annos, mds\\<^sub>2, mem\\<rangle>", "assume \"\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle> \\<in> loc_reach \\<langle>While e c \\<otimes> annos, mds\\<^sub>2, mem\\<rangle>\""], ["proof (state)\nthis:\n  \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n  \\<in> loc_reach\n         \\<langle>While e c \\<otimes> annos, mds\\<^sub>2, mem\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<And>mem.\n       \\<lbrakk>mdsa = mds \\<oplus> annos;\n        \\<turnstile> mds \\<oplus> annos { c } mds \\<oplus> annos;\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds \\<oplus> annos) \\<and>\n              locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> (mds \\<oplus> annos) GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>While e c \\<otimes>\n                        annos, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> mds\\<^sub>2' \\<sqsubseteq> mds \\<oplus> annos\n 2. \\<And>mem.\n       \\<lbrakk>mdsa = mds \\<oplus> annos;\n        \\<turnstile> mds \\<oplus> annos { c } mds \\<oplus> annos;\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds \\<oplus> annos) \\<and>\n              locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> (mds \\<oplus> annos) GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> locally_sound_mode_use\n                          \\<langle>While e c \\<otimes>\n                                   annos, mds\\<^sub>2, mem\\<rangle>", "thus \"mds\\<^sub>2' \\<le> mds \\<oplus> annos\""], ["proof (prove)\nusing this:\n  \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n  \\<in> loc_reach\n         \\<langle>While e c \\<otimes> annos, mds\\<^sub>2, mem\\<rangle>\n\ngoal (1 subgoal):\n 1. mds\\<^sub>2' \\<sqsubseteq> mds \\<oplus> annos", "by (metis Stmt.distinct(35) stop_no_eval while.hyps(1) while_eval while_loc_reach)"], ["proof (state)\nthis:\n  mds\\<^sub>2' \\<sqsubseteq> mds \\<oplus> annos\n\ngoal (1 subgoal):\n 1. \\<And>mem.\n       \\<lbrakk>mdsa = mds \\<oplus> annos;\n        \\<turnstile> mds \\<oplus> annos { c } mds \\<oplus> annos;\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds \\<oplus> annos) \\<and>\n              locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> (mds \\<oplus> annos) GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> locally_sound_mode_use\n                          \\<langle>While e c \\<otimes>\n                                   annos, mds\\<^sub>2, mem\\<rangle>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>mem.\n       \\<lbrakk>mdsa = mds \\<oplus> annos;\n        \\<turnstile> mds \\<oplus> annos { c } mds \\<oplus> annos;\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds \\<oplus> annos) \\<and>\n              locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> (mds \\<oplus> annos) GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> locally_sound_mode_use\n                          \\<langle>While e c \\<otimes>\n                                   annos, mds\\<^sub>2, mem\\<rangle>", "fix mem"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>mem.\n       \\<lbrakk>mdsa = mds \\<oplus> annos;\n        \\<turnstile> mds \\<oplus> annos { c } mds \\<oplus> annos;\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds \\<oplus> annos) \\<and>\n              locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> (mds \\<oplus> annos) GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> locally_sound_mode_use\n                          \\<langle>While e c \\<otimes>\n                                   annos, mds\\<^sub>2, mem\\<rangle>", "from while"], ["proof (chain)\npicking this:\n  mdsa = mds \\<oplus> annos\n  \\<turnstile> mdsa { c } mdsa\n  ?mds\\<^sub>25 \\<sqsubseteq> mdsa \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mdsa) \\<and>\n     locally_sound_mode_use \\<langle>c, ?mds\\<^sub>25, mem\\<rangle>\n  bexp_vars e \\<inter> mdsa GuarNoRead = {}\n  mds\\<^sub>2 \\<sqsubseteq> mds", "have \"bexp_vars e \\<inter> (mds\\<^sub>2 \\<oplus> annos) GuarNoRead = {}\""], ["proof (prove)\nusing this:\n  mdsa = mds \\<oplus> annos\n  \\<turnstile> mdsa { c } mdsa\n  ?mds\\<^sub>25 \\<sqsubseteq> mdsa \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mdsa) \\<and>\n     locally_sound_mode_use \\<langle>c, ?mds\\<^sub>25, mem\\<rangle>\n  bexp_vars e \\<inter> mdsa GuarNoRead = {}\n  mds\\<^sub>2 \\<sqsubseteq> mds\n\ngoal (1 subgoal):\n 1. bexp_vars e \\<inter> (mds\\<^sub>2 \\<oplus> annos) GuarNoRead = {}", "by (metis (lifting, no_types) Int_empty_right Int_left_commute \\<open>mds\\<^sub>2 \\<oplus> annos \\<le> mds \\<oplus> annos\\<close> inf_fun_def le_iff_inf)"], ["proof (state)\nthis:\n  bexp_vars e \\<inter> (mds\\<^sub>2 \\<oplus> annos) GuarNoRead = {}\n\ngoal (1 subgoal):\n 1. \\<And>mem.\n       \\<lbrakk>mdsa = mds \\<oplus> annos;\n        \\<turnstile> mds \\<oplus> annos { c } mds \\<oplus> annos;\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<oplus> annos \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds \\<oplus> annos) \\<and>\n              locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>;\n        bexp_vars e \\<inter> (mds \\<oplus> annos) GuarNoRead = {};\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> locally_sound_mode_use\n                          \\<langle>While e c \\<otimes>\n                                   annos, mds\\<^sub>2, mem\\<rangle>", "show \"locally_sound_mode_use \\<langle>While e c \\<otimes> annos, mds\\<^sub>2, mem\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. locally_sound_mode_use\n     \\<langle>While e c \\<otimes> annos, mds\\<^sub>2, mem\\<rangle>", "unfolding locally_sound_mode_use_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>c' mds' mem'.\n       \\<langle>c', mds', mem'\\<rangle>\n       \\<in> loc_reach\n              \\<langle>While e c \\<otimes>\n                       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n       (\\<forall>x.\n           (x \\<in> mds' GuarNoRead \\<longrightarrow>\n            doesnt_read c' x) \\<and>\n           (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x))", "apply (rule allI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c' mds' mem'.\n       \\<langle>c', mds', mem'\\<rangle>\n       \\<in> loc_reach\n              \\<langle>While e c \\<otimes>\n                       annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n       (\\<forall>x.\n           (x \\<in> mds' GuarNoRead \\<longrightarrow>\n            doesnt_read c' x) \\<and>\n           (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x))", "apply (rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c' mds' mem'.\n       \\<langle>c', mds', mem'\\<rangle>\n       \\<in> loc_reach\n              \\<langle>While e c \\<otimes>\n                       annos, mds\\<^sub>2, mem\\<rangle> \\<Longrightarrow>\n       \\<forall>x.\n          (x \\<in> mds' GuarNoRead \\<longrightarrow>\n           doesnt_read c' x) \\<and>\n          (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c' mds' mem'.\n       \\<langle>c', mds', mem'\\<rangle>\n       \\<in> loc_reach\n              \\<langle>While e c \\<otimes>\n                       annos, mds\\<^sub>2, mem\\<rangle> \\<Longrightarrow>\n       \\<forall>x.\n          (x \\<in> mds' GuarNoRead \\<longrightarrow>\n           doesnt_read c' x) \\<and>\n          (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x)", "fix c' mds' mem'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c' mds' mem'.\n       \\<langle>c', mds', mem'\\<rangle>\n       \\<in> loc_reach\n              \\<langle>While e c \\<otimes>\n                       annos, mds\\<^sub>2, mem\\<rangle> \\<Longrightarrow>\n       \\<forall>x.\n          (x \\<in> mds' GuarNoRead \\<longrightarrow>\n           doesnt_read c' x) \\<and>\n          (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x)", "define lc where \"lc = \\<langle>While e c \\<otimes> annos, mds\\<^sub>2, mem\\<rangle>\""], ["proof (state)\nthis:\n  lc = \\<langle>While e c \\<otimes> annos, mds\\<^sub>2, mem\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>c' mds' mem'.\n       \\<langle>c', mds', mem'\\<rangle>\n       \\<in> loc_reach\n              \\<langle>While e c \\<otimes>\n                       annos, mds\\<^sub>2, mem\\<rangle> \\<Longrightarrow>\n       \\<forall>x.\n          (x \\<in> mds' GuarNoRead \\<longrightarrow>\n           doesnt_read c' x) \\<and>\n          (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x)", "assume \"\\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach lc\""], ["proof (state)\nthis:\n  \\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach lc\n\ngoal (1 subgoal):\n 1. \\<And>c' mds' mem'.\n       \\<langle>c', mds', mem'\\<rangle>\n       \\<in> loc_reach\n              \\<langle>While e c \\<otimes>\n                       annos, mds\\<^sub>2, mem\\<rangle> \\<Longrightarrow>\n       \\<forall>x.\n          (x \\<in> mds' GuarNoRead \\<longrightarrow>\n           doesnt_read c' x) \\<and>\n          (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x)", "thus \"\\<forall> x. (x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' x) \\<and>\n                 (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x)\""], ["proof (prove)\nusing this:\n  \\<langle>c', mds', mem'\\<rangle> \\<in> loc_reach lc\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       (x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' x) \\<and>\n       (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x)", "apply (simp add: lc_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>c', mds', mem'\\<rangle>\n    \\<in> loc_reach\n           \\<langle>While e c \\<otimes>\n                    annos, mds\\<^sub>2, mem\\<rangle> \\<Longrightarrow>\n    \\<forall>x.\n       (x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' x) \\<and>\n       (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x)", "apply (drule while_loc_reach)"], ["proof (prove)\ngoal (1 subgoal):\n 1. c' = While e c \\<otimes> annos \\<and> mds' = mds\\<^sub>2 \\<or>\n    c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n    c' = Stmt.If e (c ;; While e c) Stop \\<and>\n    mds' \\<sqsubseteq> mdsa \\<or>\n    c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<or>\n    (\\<exists>c'' mem'' mds\\<^sub>3.\n        c' = c'' ;; While e c \\<and>\n        mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n        \\<langle>c'', mds', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>c, mds\\<^sub>3, mem''\\<rangle>) \\<Longrightarrow>\n    \\<forall>x.\n       (x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' x) \\<and>\n       (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x)", "apply (erule disjE5)"], ["proof (prove)\ngoal (5 subgoals):\n 1. c' = While e c \\<otimes> annos \\<and>\n    mds' = mds\\<^sub>2 \\<Longrightarrow>\n    \\<forall>x.\n       (x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' x) \\<and>\n       (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x)\n 2. c' = While e c \\<and> mds' \\<sqsubseteq> mdsa \\<Longrightarrow>\n    \\<forall>x.\n       (x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' x) \\<and>\n       (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x)\n 3. c' = Stmt.If e (c ;; While e c) Stop \\<and>\n    mds' \\<sqsubseteq> mdsa \\<Longrightarrow>\n    \\<forall>x.\n       (x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' x) \\<and>\n       (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x)\n 4. c' = Stop \\<and> mds' \\<sqsubseteq> mdsa \\<Longrightarrow>\n    \\<forall>x.\n       (x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' x) \\<and>\n       (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x)\n 5. \\<exists>c'' mem'' mds\\<^sub>3.\n       c' = c'' ;; While e c \\<and>\n       mds\\<^sub>3 \\<sqsubseteq> mdsa \\<and>\n       \\<langle>c'', mds', mem'\\<rangle>\n       \\<in> loc_reach\n              \\<langle>c, mds\\<^sub>3, mem''\\<rangle> \\<Longrightarrow>\n    \\<forall>x.\n       (x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' x) \\<and>\n       (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x)", "proof (auto del: conjI)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>c' = While e c \\<otimes> annos; mds' = mds\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds\\<^sub>2 GuarNoRead \\<longrightarrow>\n                          doesnt_read (While e c \\<otimes> annos) x) \\<and>\n                         (x \\<in> mds\\<^sub>2 GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (While e c \\<otimes> annos) x)\n 2. \\<And>x.\n       \\<lbrakk>c' = While e c; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (While e c) x)\n 3. \\<And>x.\n       \\<lbrakk>c' = Stmt.If e (c ;; While e c) Stop;\n        mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (Stmt.If e (c ;; While e c) Stop)\n                           x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (Stmt.If e (c ;; While e c) Stop) x)\n 4. \\<And>x.\n       \\<lbrakk>c' = Stop; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read Stop x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify Stop x)\n 5. \\<And>c'' x mem'' mds\\<^sub>3.\n       \\<lbrakk>c' = c'' ;; While e c; mds\\<^sub>3 \\<sqsubseteq> mdsa;\n        \\<langle>c'', mds', mem'\\<rangle>\n        \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (c'' ;; While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (c'' ;; While e c) x)", "fix x"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>c' = While e c \\<otimes> annos; mds' = mds\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds\\<^sub>2 GuarNoRead \\<longrightarrow>\n                          doesnt_read (While e c \\<otimes> annos) x) \\<and>\n                         (x \\<in> mds\\<^sub>2 GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (While e c \\<otimes> annos) x)\n 2. \\<And>x.\n       \\<lbrakk>c' = While e c; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (While e c) x)\n 3. \\<And>x.\n       \\<lbrakk>c' = Stmt.If e (c ;; While e c) Stop;\n        mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (Stmt.If e (c ;; While e c) Stop)\n                           x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (Stmt.If e (c ;; While e c) Stop) x)\n 4. \\<And>x.\n       \\<lbrakk>c' = Stop; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read Stop x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify Stop x)\n 5. \\<And>c'' x mem'' mds\\<^sub>3.\n       \\<lbrakk>c' = c'' ;; While e c; mds\\<^sub>3 \\<sqsubseteq> mdsa;\n        \\<langle>c'', mds', mem'\\<rangle>\n        \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (c'' ;; While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (c'' ;; While e c) x)", "show \"(x \\<in> mds\\<^sub>2 GuarNoRead \\<longrightarrow> doesnt_read (While e c \\<otimes> annos) x) \\<and>\n              (x \\<in> mds\\<^sub>2 GuarNoWrite \\<longrightarrow> doesnt_modify (While e c \\<otimes> annos) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> mds\\<^sub>2 GuarNoRead \\<longrightarrow>\n     doesnt_read (While e c \\<otimes> annos) x) \\<and>\n    (x \\<in> mds\\<^sub>2 GuarNoWrite \\<longrightarrow>\n     doesnt_modify (While e c \\<otimes> annos) x)", "unfolding doesnt_read_def and doesnt_modify_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> mds\\<^sub>2 GuarNoRead \\<longrightarrow>\n     (\\<forall>mds mem c' mds' mem'.\n         \\<langle>While e c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n         \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n         (\\<forall>v.\n             \\<langle>While e c \\<otimes> annos, mds, mem\n             (x := v)\\<rangle> \\<leadsto> \\<langle>c', mds', mem'\n             (x := v)\\<rangle>) \\<or>\n         (\\<forall>v.\n             \\<langle>While e c \\<otimes> annos, mds, mem\n             (x := v)\\<rangle> \\<leadsto>\n             \\<langle>c', mds', mem'\\<rangle>))) \\<and>\n    (x \\<in> mds\\<^sub>2 GuarNoWrite \\<longrightarrow>\n     (\\<forall>mds mem c' mds' mem'.\n         \\<langle>While e c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n         \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n         mem x = mem' x))", "using while_eval and while_eval_elim"], ["proof (prove)\nusing this:\n  \\<langle>While ?e ?c \\<otimes> ?annos, ?mds, ?mem\\<rangle> \\<leadsto>\n  \\<langle>Stmt.If ?e (?c ;; While ?e ?c)\n            Stop, ?mds \\<oplus> ?annos, ?mem\\<rangle>\n  \\<langle>While ?e ?c \\<otimes> ?annos, ?mds, ?mem\\<rangle> \\<leadsto>\n  \\<langle>?c', ?mds', ?mem'\\<rangle> \\<Longrightarrow>\n  ?c' = Stmt.If ?e (?c ;; While ?e ?c) Stop \\<and>\n  ?mds' = ?mds \\<oplus> ?annos \\<and> ?mem' = ?mem\n\ngoal (1 subgoal):\n 1. (x \\<in> mds\\<^sub>2 GuarNoRead \\<longrightarrow>\n     (\\<forall>mds mem c' mds' mem'.\n         \\<langle>While e c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n         \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n         (\\<forall>v.\n             \\<langle>While e c \\<otimes> annos, mds, mem\n             (x := v)\\<rangle> \\<leadsto> \\<langle>c', mds', mem'\n             (x := v)\\<rangle>) \\<or>\n         (\\<forall>v.\n             \\<langle>While e c \\<otimes> annos, mds, mem\n             (x := v)\\<rangle> \\<leadsto>\n             \\<langle>c', mds', mem'\\<rangle>))) \\<and>\n    (x \\<in> mds\\<^sub>2 GuarNoWrite \\<longrightarrow>\n     (\\<forall>mds mem c' mds' mem'.\n         \\<langle>While e c \\<otimes> annos, mds, mem\\<rangle> \\<leadsto>\n         \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n         mem x = mem' x))", "by blast"], ["proof (state)\nthis:\n  (x \\<in> mds\\<^sub>2 GuarNoRead \\<longrightarrow>\n   doesnt_read (While e c \\<otimes> annos) x) \\<and>\n  (x \\<in> mds\\<^sub>2 GuarNoWrite \\<longrightarrow>\n   doesnt_modify (While e c \\<otimes> annos) x)\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>c' = While e c; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (While e c) x)\n 2. \\<And>x.\n       \\<lbrakk>c' = Stmt.If e (c ;; While e c) Stop;\n        mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (Stmt.If e (c ;; While e c) Stop)\n                           x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (Stmt.If e (c ;; While e c) Stop) x)\n 3. \\<And>x.\n       \\<lbrakk>c' = Stop; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read Stop x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify Stop x)\n 4. \\<And>c'' x mem'' mds\\<^sub>3.\n       \\<lbrakk>c' = c'' ;; While e c; mds\\<^sub>3 \\<sqsubseteq> mdsa;\n        \\<langle>c'', mds', mem'\\<rangle>\n        \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (c'' ;; While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (c'' ;; While e c) x)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>c' = While e c; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (While e c) x)\n 2. \\<And>x.\n       \\<lbrakk>c' = Stmt.If e (c ;; While e c) Stop;\n        mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (Stmt.If e (c ;; While e c) Stop)\n                           x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (Stmt.If e (c ;; While e c) Stop) x)\n 3. \\<And>x.\n       \\<lbrakk>c' = Stop; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read Stop x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify Stop x)\n 4. \\<And>c'' x mem'' mds\\<^sub>3.\n       \\<lbrakk>c' = c'' ;; While e c; mds\\<^sub>3 \\<sqsubseteq> mdsa;\n        \\<langle>c'', mds', mem'\\<rangle>\n        \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (c'' ;; While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (c'' ;; While e c) x)", "fix x"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>c' = While e c; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (While e c) x)\n 2. \\<And>x.\n       \\<lbrakk>c' = Stmt.If e (c ;; While e c) Stop;\n        mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (Stmt.If e (c ;; While e c) Stop)\n                           x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (Stmt.If e (c ;; While e c) Stop) x)\n 3. \\<And>x.\n       \\<lbrakk>c' = Stop; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read Stop x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify Stop x)\n 4. \\<And>c'' x mem'' mds\\<^sub>3.\n       \\<lbrakk>c' = c'' ;; While e c; mds\\<^sub>3 \\<sqsubseteq> mdsa;\n        \\<langle>c'', mds', mem'\\<rangle>\n        \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (c'' ;; While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (c'' ;; While e c) x)", "assume \"mds' \\<le> mdsa\""], ["proof (state)\nthis:\n  mds' \\<sqsubseteq> mdsa\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>c' = While e c; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (While e c) x)\n 2. \\<And>x.\n       \\<lbrakk>c' = Stmt.If e (c ;; While e c) Stop;\n        mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (Stmt.If e (c ;; While e c) Stop)\n                           x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (Stmt.If e (c ;; While e c) Stop) x)\n 3. \\<And>x.\n       \\<lbrakk>c' = Stop; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read Stop x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify Stop x)\n 4. \\<And>c'' x mem'' mds\\<^sub>3.\n       \\<lbrakk>c' = c'' ;; While e c; mds\\<^sub>3 \\<sqsubseteq> mdsa;\n        \\<langle>c'', mds', mem'\\<rangle>\n        \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (c'' ;; While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (c'' ;; While e c) x)", "let ?c' = \"If e (c ;; While e c) Stop\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>c' = While e c; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (While e c) x)\n 2. \\<And>x.\n       \\<lbrakk>c' = Stmt.If e (c ;; While e c) Stop;\n        mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (Stmt.If e (c ;; While e c) Stop)\n                           x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (Stmt.If e (c ;; While e c) Stop) x)\n 3. \\<And>x.\n       \\<lbrakk>c' = Stop; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read Stop x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify Stop x)\n 4. \\<And>c'' x mem'' mds\\<^sub>3.\n       \\<lbrakk>c' = c'' ;; While e c; mds\\<^sub>3 \\<sqsubseteq> mdsa;\n        \\<langle>c'', mds', mem'\\<rangle>\n        \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (c'' ;; While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (c'' ;; While e c) x)", "have \"x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read ?c' x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> mds' GuarNoRead \\<longrightarrow>\n    doesnt_read (Stmt.If e (c ;; While e c) Stop) x", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> mds' GuarNoRead \\<Longrightarrow>\n    doesnt_read (Stmt.If e (c ;; While e c) Stop) x", "apply (rule if_doesnt_read')"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> mds' GuarNoRead \\<Longrightarrow> x \\<notin> bexp_vars e", "by (metis IntI \\<open>mds' \\<le> mdsa\\<close> empty_iff le_fun_def rev_subsetD while.hyps(1) while.hyps(4))"], ["proof (state)\nthis:\n  x \\<in> mds' GuarNoRead \\<longrightarrow>\n  doesnt_read (Stmt.If e (c ;; While e c) Stop) x\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>c' = While e c; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (While e c) x)\n 2. \\<And>x.\n       \\<lbrakk>c' = Stmt.If e (c ;; While e c) Stop;\n        mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (Stmt.If e (c ;; While e c) Stop)\n                           x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (Stmt.If e (c ;; While e c) Stop) x)\n 3. \\<And>x.\n       \\<lbrakk>c' = Stop; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read Stop x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify Stop x)\n 4. \\<And>c'' x mem'' mds\\<^sub>3.\n       \\<lbrakk>c' = c'' ;; While e c; mds\\<^sub>3 \\<sqsubseteq> mdsa;\n        \\<langle>c'', mds', mem'\\<rangle>\n        \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (c'' ;; While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (c'' ;; While e c) x)", "moreover"], ["proof (state)\nthis:\n  x \\<in> mds' GuarNoRead \\<longrightarrow>\n  doesnt_read (Stmt.If e (c ;; While e c) Stop) x\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>c' = While e c; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (While e c) x)\n 2. \\<And>x.\n       \\<lbrakk>c' = Stmt.If e (c ;; While e c) Stop;\n        mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (Stmt.If e (c ;; While e c) Stop)\n                           x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (Stmt.If e (c ;; While e c) Stop) x)\n 3. \\<And>x.\n       \\<lbrakk>c' = Stop; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read Stop x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify Stop x)\n 4. \\<And>c'' x mem'' mds\\<^sub>3.\n       \\<lbrakk>c' = c'' ;; While e c; mds\\<^sub>3 \\<sqsubseteq> mdsa;\n        \\<langle>c'', mds', mem'\\<rangle>\n        \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (c'' ;; While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (c'' ;; While e c) x)", "have \"x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify ?c' x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> mds' GuarNoWrite \\<longrightarrow>\n    doesnt_modify (Stmt.If e (c ;; While e c) Stop) x", "by (metis annotate.simps(1) if_doesnt_modify)"], ["proof (state)\nthis:\n  x \\<in> mds' GuarNoWrite \\<longrightarrow>\n  doesnt_modify (Stmt.If e (c ;; While e c) Stop) x\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>c' = While e c; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (While e c) x)\n 2. \\<And>x.\n       \\<lbrakk>c' = Stmt.If e (c ;; While e c) Stop;\n        mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (Stmt.If e (c ;; While e c) Stop)\n                           x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (Stmt.If e (c ;; While e c) Stop) x)\n 3. \\<And>x.\n       \\<lbrakk>c' = Stop; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read Stop x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify Stop x)\n 4. \\<And>c'' x mem'' mds\\<^sub>3.\n       \\<lbrakk>c' = c'' ;; While e c; mds\\<^sub>3 \\<sqsubseteq> mdsa;\n        \\<langle>c'', mds', mem'\\<rangle>\n        \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (c'' ;; While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (c'' ;; While e c) x)", "ultimately"], ["proof (chain)\npicking this:\n  x \\<in> mds' GuarNoRead \\<longrightarrow>\n  doesnt_read (Stmt.If e (c ;; While e c) Stop) x\n  x \\<in> mds' GuarNoWrite \\<longrightarrow>\n  doesnt_modify (Stmt.If e (c ;; While e c) Stop) x", "show \"(x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read ?c' x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify ?c' x)\""], ["proof (prove)\nusing this:\n  x \\<in> mds' GuarNoRead \\<longrightarrow>\n  doesnt_read (Stmt.If e (c ;; While e c) Stop) x\n  x \\<in> mds' GuarNoWrite \\<longrightarrow>\n  doesnt_modify (Stmt.If e (c ;; While e c) Stop) x\n\ngoal (1 subgoal):\n 1. (x \\<in> mds' GuarNoRead \\<longrightarrow>\n     doesnt_read (Stmt.If e (c ;; While e c) Stop) x) \\<and>\n    (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n     doesnt_modify (Stmt.If e (c ;; While e c) Stop) x)", ".."], ["proof (state)\nthis:\n  (x \\<in> mds' GuarNoRead \\<longrightarrow>\n   doesnt_read (Stmt.If e (c ;; While e c) Stop) x) \\<and>\n  (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n   doesnt_modify (Stmt.If e (c ;; While e c) Stop) x)\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>c' = While e c; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (While e c) x)\n 2. \\<And>x.\n       \\<lbrakk>c' = Stop; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read Stop x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify Stop x)\n 3. \\<And>c'' x mem'' mds\\<^sub>3.\n       \\<lbrakk>c' = c'' ;; While e c; mds\\<^sub>3 \\<sqsubseteq> mdsa;\n        \\<langle>c'', mds', mem'\\<rangle>\n        \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (c'' ;; While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (c'' ;; While e c) x)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>c' = While e c; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (While e c) x)\n 2. \\<And>x.\n       \\<lbrakk>c' = Stop; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read Stop x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify Stop x)\n 3. \\<And>c'' x mem'' mds\\<^sub>3.\n       \\<lbrakk>c' = c'' ;; While e c; mds\\<^sub>3 \\<sqsubseteq> mdsa;\n        \\<langle>c'', mds', mem'\\<rangle>\n        \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (c'' ;; While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (c'' ;; While e c) x)", "fix x"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>c' = While e c; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (While e c) x)\n 2. \\<And>x.\n       \\<lbrakk>c' = Stop; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read Stop x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify Stop x)\n 3. \\<And>c'' x mem'' mds\\<^sub>3.\n       \\<lbrakk>c' = c'' ;; While e c; mds\\<^sub>3 \\<sqsubseteq> mdsa;\n        \\<langle>c'', mds', mem'\\<rangle>\n        \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (c'' ;; While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (c'' ;; While e c) x)", "assume \"mds' \\<le> mdsa\""], ["proof (state)\nthis:\n  mds' \\<sqsubseteq> mdsa\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>c' = While e c; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (While e c) x)\n 2. \\<And>x.\n       \\<lbrakk>c' = Stop; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read Stop x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify Stop x)\n 3. \\<And>c'' x mem'' mds\\<^sub>3.\n       \\<lbrakk>c' = c'' ;; While e c; mds\\<^sub>3 \\<sqsubseteq> mdsa;\n        \\<langle>c'', mds', mem'\\<rangle>\n        \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (c'' ;; While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (c'' ;; While e c) x)", "show \"(x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read Stop x) \\<and>\n              (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify Stop x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read Stop x) \\<and>\n    (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify Stop x)", "by (metis stop_doesnt_access)"], ["proof (state)\nthis:\n  (x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read Stop x) \\<and>\n  (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify Stop x)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>c' = While e c; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (While e c) x)\n 2. \\<And>c'' x mem'' mds\\<^sub>3.\n       \\<lbrakk>c' = c'' ;; While e c; mds\\<^sub>3 \\<sqsubseteq> mdsa;\n        \\<langle>c'', mds', mem'\\<rangle>\n        \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (c'' ;; While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (c'' ;; While e c) x)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>c' = While e c; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (While e c) x)\n 2. \\<And>c'' x mem'' mds\\<^sub>3.\n       \\<lbrakk>c' = c'' ;; While e c; mds\\<^sub>3 \\<sqsubseteq> mdsa;\n        \\<langle>c'', mds', mem'\\<rangle>\n        \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (c'' ;; While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (c'' ;; While e c) x)", "fix c'' x mem'' mds\\<^sub>3"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>c' = While e c; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (While e c) x)\n 2. \\<And>c'' x mem'' mds\\<^sub>3.\n       \\<lbrakk>c' = c'' ;; While e c; mds\\<^sub>3 \\<sqsubseteq> mdsa;\n        \\<langle>c'', mds', mem'\\<rangle>\n        \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (c'' ;; While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (c'' ;; While e c) x)", "assume \"mds\\<^sub>3 \\<le> mdsa\""], ["proof (state)\nthis:\n  mds\\<^sub>3 \\<sqsubseteq> mdsa\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>c' = While e c; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (While e c) x)\n 2. \\<And>c'' x mem'' mds\\<^sub>3.\n       \\<lbrakk>c' = c'' ;; While e c; mds\\<^sub>3 \\<sqsubseteq> mdsa;\n        \\<langle>c'', mds', mem'\\<rangle>\n        \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (c'' ;; While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (c'' ;; While e c) x)", "assume \"\\<langle>c'', mds', mem'\\<rangle> \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>\""], ["proof (state)\nthis:\n  \\<langle>c'', mds', mem'\\<rangle>\n  \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>c' = While e c; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (While e c) x)\n 2. \\<And>c'' x mem'' mds\\<^sub>3.\n       \\<lbrakk>c' = c'' ;; While e c; mds\\<^sub>3 \\<sqsubseteq> mdsa;\n        \\<langle>c'', mds', mem'\\<rangle>\n        \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (c'' ;; While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (c'' ;; While e c) x)", "thus \"(x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read (c'' ;; While e c) x) \\<and>\n              (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify (c'' ;; While e c) x)\""], ["proof (prove)\nusing this:\n  \\<langle>c'', mds', mem'\\<rangle>\n  \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>\n\ngoal (1 subgoal):\n 1. (x \\<in> mds' GuarNoRead \\<longrightarrow>\n     doesnt_read (c'' ;; While e c) x) \\<and>\n    (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n     doesnt_modify (c'' ;; While e c) x)", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<langle>c'', mds', mem'\\<rangle>\n             \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>;\n     x \\<in> mds' GuarNoRead\\<rbrakk>\n    \\<Longrightarrow> doesnt_read (c'' ;; While e c) x\n 2. \\<lbrakk>\\<langle>c'', mds', mem'\\<rangle>\n             \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>;\n     x \\<in> mds' GuarNoWrite\\<rbrakk>\n    \\<Longrightarrow> doesnt_modify (c'' ;; While e c) x", "apply (rule seq_doesnt_read)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<langle>c'', mds', mem'\\<rangle>\n             \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>;\n     x \\<in> mds' GuarNoRead\\<rbrakk>\n    \\<Longrightarrow> doesnt_read c'' x\n 2. \\<lbrakk>\\<langle>c'', mds', mem'\\<rangle>\n             \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>;\n     x \\<in> mds' GuarNoWrite\\<rbrakk>\n    \\<Longrightarrow> doesnt_modify (c'' ;; While e c) x", "apply (insert while(3))"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<langle>c'', mds', mem'\\<rangle>\n             \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>;\n     x \\<in> mds' GuarNoRead;\n     \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n        mds\\<^sub>2 \\<sqsubseteq> mdsa \\<Longrightarrow>\n        \\<forall>mem.\n           (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n            mds\\<^sub>2' \\<sqsubseteq> mdsa) \\<and>\n           locally_sound_mode_use\n            \\<langle>c, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> doesnt_read c'' x\n 2. \\<lbrakk>\\<langle>c'', mds', mem'\\<rangle>\n             \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>;\n     x \\<in> mds' GuarNoWrite;\n     \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n        mds\\<^sub>2 \\<sqsubseteq> mdsa \\<Longrightarrow>\n        \\<forall>mem.\n           (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n            mds\\<^sub>2' \\<sqsubseteq> mdsa) \\<and>\n           locally_sound_mode_use\n            \\<langle>c, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> doesnt_modify (c'' ;; While e c) x", "apply (metis \\<open>mds\\<^sub>3 \\<le> mdsa\\<close> locally_sound_mode_use_def while.hyps(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<langle>c'', mds', mem'\\<rangle>\n             \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>;\n     x \\<in> mds' GuarNoWrite;\n     \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n        mds\\<^sub>2 \\<sqsubseteq> mdsa \\<Longrightarrow>\n        \\<forall>mem.\n           (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n            mds\\<^sub>2' \\<sqsubseteq> mdsa) \\<and>\n           locally_sound_mode_use\n            \\<langle>c, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> doesnt_modify (c'' ;; While e c) x", "apply (rule seq_doesnt_modify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<langle>c'', mds', mem'\\<rangle>\n             \\<in> loc_reach \\<langle>c, mds\\<^sub>3, mem''\\<rangle>;\n     x \\<in> mds' GuarNoWrite;\n     \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n        mds\\<^sub>2 \\<sqsubseteq> mdsa \\<Longrightarrow>\n        \\<forall>mem.\n           (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n            mds\\<^sub>2' \\<sqsubseteq> mdsa) \\<and>\n           locally_sound_mode_use\n            \\<langle>c, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> doesnt_modify c'' x", "by (metis \\<open>mds\\<^sub>3 \\<le> mdsa\\<close> locally_sound_mode_use_def while.hyps(1))"], ["proof (state)\nthis:\n  (x \\<in> mds' GuarNoRead \\<longrightarrow>\n   doesnt_read (c'' ;; While e c) x) \\<and>\n  (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n   doesnt_modify (c'' ;; While e c) x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>c' = While e c; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (While e c) x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>c' = While e c; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (While e c) x)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>c' = While e c; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (While e c) x)", "assume \"mds' \\<le> mdsa\""], ["proof (state)\nthis:\n  mds' \\<sqsubseteq> mdsa\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>c' = While e c; mds' \\<sqsubseteq> mdsa\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                          doesnt_read (While e c) x) \\<and>\n                         (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                          doesnt_modify (While e c) x)", "show \"(x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read (While e c) x) \\<and>\n              (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify (While e c) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> mds' GuarNoRead \\<longrightarrow>\n     doesnt_read (While e c) x) \\<and>\n    (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify (While e c) x)", "unfolding doesnt_read_def and doesnt_modify_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> mds' GuarNoRead \\<longrightarrow>\n     (\\<forall>mds mem c' mds' mem'.\n         \\<langle>While e c, mds, mem\\<rangle> \\<leadsto>\n         \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n         (\\<forall>v.\n             \\<langle>While e c, mds, mem(x := v)\\<rangle> \\<leadsto>\n             \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n         (\\<forall>v.\n             \\<langle>While e c, mds, mem(x := v)\\<rangle> \\<leadsto>\n             \\<langle>c', mds', mem'\\<rangle>))) \\<and>\n    (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n     (\\<forall>mds mem c' mds' mem'.\n         \\<langle>While e c, mds, mem\\<rangle> \\<leadsto>\n         \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n         mem x = mem' x))", "using while_eval' and while_eval_elim'"], ["proof (prove)\nusing this:\n  \\<langle>While ?e ?c, ?mds, ?mem\\<rangle> \\<leadsto>\n  \\<langle>Stmt.If ?e (?c ;; While ?e ?c) Stop, ?mds, ?mem\\<rangle>\n  \\<langle>While ?e ?c, ?mds, ?mem\\<rangle> \\<leadsto>\n  \\<langle>?c', ?mds', ?mem'\\<rangle> \\<Longrightarrow>\n  ?c' = Stmt.If ?e (?c ;; While ?e ?c) Stop \\<and>\n  ?mds' = ?mds \\<and> ?mem' = ?mem\n\ngoal (1 subgoal):\n 1. (x \\<in> mds' GuarNoRead \\<longrightarrow>\n     (\\<forall>mds mem c' mds' mem'.\n         \\<langle>While e c, mds, mem\\<rangle> \\<leadsto>\n         \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n         (\\<forall>v.\n             \\<langle>While e c, mds, mem(x := v)\\<rangle> \\<leadsto>\n             \\<langle>c', mds', mem'(x := v)\\<rangle>) \\<or>\n         (\\<forall>v.\n             \\<langle>While e c, mds, mem(x := v)\\<rangle> \\<leadsto>\n             \\<langle>c', mds', mem'\\<rangle>))) \\<and>\n    (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n     (\\<forall>mds mem c' mds' mem'.\n         \\<langle>While e c, mds, mem\\<rangle> \\<leadsto>\n         \\<langle>c', mds', mem'\\<rangle> \\<longrightarrow>\n         mem x = mem' x))", "by blast"], ["proof (state)\nthis:\n  (x \\<in> mds' GuarNoRead \\<longrightarrow>\n   doesnt_read (While e c) x) \\<and>\n  (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify (While e c) x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x.\n     (x \\<in> mds' GuarNoRead \\<longrightarrow> doesnt_read c' x) \\<and>\n     (x \\<in> mds' GuarNoWrite \\<longrightarrow> doesnt_modify c' x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  locally_sound_mode_use\n   \\<langle>While e c \\<otimes> annos, mds\\<^sub>2, mem\\<rangle>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>mem.\n     (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n      \\<in> loc_reach\n             \\<langle>While e c \\<otimes>\n                      annos, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n      mds\\<^sub>2' \\<sqsubseteq> mdsa) \\<and>\n     locally_sound_mode_use\n      \\<langle>While e c \\<otimes> annos, mds\\<^sub>2, mem\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<And>mds c\\<^sub>1 mds' c\\<^sub>2 mds'' mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1 ;;\n       c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c\\<^sub>1 ;;\nc\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\n 2. \\<And>mds\\<^sub>2 c mds\\<^sub>2' mds\\<^sub>1 mds\\<^sub>1' mds\\<^sub>2''\n       mds\\<^sub>2''' mem'.\n       \\<lbrakk>\\<turnstile> mds\\<^sub>2 { c } mds\\<^sub>2';\n        \\<And>mds\\<^sub>2'' mds\\<^sub>2''' mem'.\n           mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2''' \\<sqsubseteq> mds\\<^sub>2') \\<and>\n              locally_sound_mode_use\n               \\<langle>c, mds\\<^sub>2'', mem\\<rangle>;\n        mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2;\n        mds\\<^sub>2' \\<sqsubseteq> mds\\<^sub>1';\n        mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2''' \\<sqsubseteq>\n                             mds\\<^sub>1') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c, mds\\<^sub>2'', mem\\<rangle>", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>mds c\\<^sub>1 mds' c\\<^sub>2 mds'' mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1 ;;\n       c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c\\<^sub>1 ;;\nc\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\n 2. \\<And>mds\\<^sub>2 c mds\\<^sub>2' mds\\<^sub>1 mds\\<^sub>1' mds\\<^sub>2''\n       mds\\<^sub>2''' mem'.\n       \\<lbrakk>\\<turnstile> mds\\<^sub>2 { c } mds\\<^sub>2';\n        \\<And>mds\\<^sub>2'' mds\\<^sub>2''' mem'.\n           mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2''' \\<sqsubseteq> mds\\<^sub>2') \\<and>\n              locally_sound_mode_use\n               \\<langle>c, mds\\<^sub>2'', mem\\<rangle>;\n        mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2;\n        mds\\<^sub>2' \\<sqsubseteq> mds\\<^sub>1';\n        mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2''' \\<sqsubseteq>\n                             mds\\<^sub>1') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c, mds\\<^sub>2'', mem\\<rangle>", "case (seq mds c\\<^sub>1 mds' c\\<^sub>2 mds'')"], ["proof (state)\nthis:\n  \\<turnstile> mds { c\\<^sub>1 } mds'\n  ?mds\\<^sub>25 \\<sqsubseteq> mds \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>1, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds') \\<and>\n     locally_sound_mode_use \\<langle>c\\<^sub>1, ?mds\\<^sub>25, mem\\<rangle>\n  \\<turnstile> mds' { c\\<^sub>2 } mds''\n  ?mds\\<^sub>25 \\<sqsubseteq> mds' \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>2, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds'') \\<and>\n     locally_sound_mode_use \\<langle>c\\<^sub>2, ?mds\\<^sub>25, mem\\<rangle>\n  mds\\<^sub>2 \\<sqsubseteq> mds\n\ngoal (2 subgoals):\n 1. \\<And>mds c\\<^sub>1 mds' c\\<^sub>2 mds'' mds\\<^sub>2 mds\\<^sub>2' mem'.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1 ;;\n       c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c\\<^sub>1 ;;\nc\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\n 2. \\<And>mds\\<^sub>2 c mds\\<^sub>2' mds\\<^sub>1 mds\\<^sub>1' mds\\<^sub>2''\n       mds\\<^sub>2''' mem'.\n       \\<lbrakk>\\<turnstile> mds\\<^sub>2 { c } mds\\<^sub>2';\n        \\<And>mds\\<^sub>2'' mds\\<^sub>2''' mem'.\n           mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2''' \\<sqsubseteq> mds\\<^sub>2') \\<and>\n              locally_sound_mode_use\n               \\<langle>c, mds\\<^sub>2'', mem\\<rangle>;\n        mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2;\n        mds\\<^sub>2' \\<sqsubseteq> mds\\<^sub>1';\n        mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2''' \\<sqsubseteq>\n                             mds\\<^sub>1') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c, mds\\<^sub>2'', mem\\<rangle>", "thus ?case"], ["proof (prove)\nusing this:\n  \\<turnstile> mds { c\\<^sub>1 } mds'\n  ?mds\\<^sub>25 \\<sqsubseteq> mds \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>1, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds') \\<and>\n     locally_sound_mode_use \\<langle>c\\<^sub>1, ?mds\\<^sub>25, mem\\<rangle>\n  \\<turnstile> mds' { c\\<^sub>2 } mds''\n  ?mds\\<^sub>25 \\<sqsubseteq> mds' \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>2, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds'') \\<and>\n     locally_sound_mode_use \\<langle>c\\<^sub>2, ?mds\\<^sub>25, mem\\<rangle>\n  mds\\<^sub>2 \\<sqsubseteq> mds\n\ngoal (1 subgoal):\n 1. \\<forall>mem.\n       (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>c\\<^sub>1 ;;\n                        c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n        mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n       locally_sound_mode_use\n        \\<langle>c\\<^sub>1 ;; c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>", "proof (auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>mem.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>c\\<^sub>1 ;;\n                        c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> mds\\<^sub>2' \\<sqsubseteq> mds''\n 2. \\<And>mem.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> locally_sound_mode_use\n                          \\<langle>c\\<^sub>1 ;;\n                                   c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>", "fix mem"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>mem.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>c\\<^sub>1 ;;\n                        c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> mds\\<^sub>2' \\<sqsubseteq> mds''\n 2. \\<And>mem.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> locally_sound_mode_use\n                          \\<langle>c\\<^sub>1 ;;\n                                   c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>", "assume \"\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle> \\<in> loc_reach \\<langle>c\\<^sub>1 ;; c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\""], ["proof (state)\nthis:\n  \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n  \\<in> loc_reach \\<langle>c\\<^sub>1 ;; c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<And>mem.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>c\\<^sub>1 ;;\n                        c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> mds\\<^sub>2' \\<sqsubseteq> mds''\n 2. \\<And>mem.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> locally_sound_mode_use\n                          \\<langle>c\\<^sub>1 ;;\n                                   c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>", "then"], ["proof (chain)\npicking this:\n  \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n  \\<in> loc_reach \\<langle>c\\<^sub>1 ;; c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>", "obtain mds\\<^sub>2'' mem'' where \"\\<langle>Stop, mds\\<^sub>2'', mem''\\<rangle> \\<in> loc_reach \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>\" and\n      \"\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle> \\<in> loc_reach \\<langle>c\\<^sub>2, mds\\<^sub>2'', mem''\\<rangle>\""], ["proof (prove)\nusing this:\n  \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n  \\<in> loc_reach \\<langle>c\\<^sub>1 ;; c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\n\ngoal (1 subgoal):\n 1. (\\<And>mds\\<^sub>2'''' mem''.\n        \\<lbrakk>\\<langle>Stop, mds\\<^sub>2'''', mem''\\<rangle>\n                 \\<in> loc_reach\n                        \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n         \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n         \\<in> loc_reach\n                \\<langle>c\\<^sub>2, mds\\<^sub>2'''', mem''\\<rangle>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using seq_split"], ["proof (prove)\nusing this:\n  \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n  \\<in> loc_reach \\<langle>c\\<^sub>1 ;; c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\n  \\<langle>Stop, ?mds', ?mem'\\<rangle>\n  \\<in> loc_reach\n         \\<langle>?c\\<^sub>1 ;;\n                  ?c\\<^sub>2, ?mds, ?mem\\<rangle> \\<Longrightarrow>\n  \\<exists>mds'' mem''.\n     \\<langle>Stop, mds'', mem''\\<rangle>\n     \\<in> loc_reach \\<langle>?c\\<^sub>1, ?mds, ?mem\\<rangle> \\<and>\n     \\<langle>Stop, ?mds', ?mem'\\<rangle>\n     \\<in> loc_reach \\<langle>?c\\<^sub>2, mds'', mem''\\<rangle>\n\ngoal (1 subgoal):\n 1. (\\<And>mds\\<^sub>2'''' mem''.\n        \\<lbrakk>\\<langle>Stop, mds\\<^sub>2'''', mem''\\<rangle>\n                 \\<in> loc_reach\n                        \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n         \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n         \\<in> loc_reach\n                \\<langle>c\\<^sub>2, mds\\<^sub>2'''', mem''\\<rangle>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<langle>Stop, mds\\<^sub>2'', mem''\\<rangle>\n  \\<in> loc_reach \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>\n  \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n  \\<in> loc_reach \\<langle>c\\<^sub>2, mds\\<^sub>2'', mem''\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<And>mem.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>c\\<^sub>1 ;;\n                        c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> mds\\<^sub>2' \\<sqsubseteq> mds''\n 2. \\<And>mem.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> locally_sound_mode_use\n                          \\<langle>c\\<^sub>1 ;;\n                                   c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>", "thus \"mds\\<^sub>2' \\<le> mds''\""], ["proof (prove)\nusing this:\n  \\<langle>Stop, mds\\<^sub>2'', mem''\\<rangle>\n  \\<in> loc_reach \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>\n  \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n  \\<in> loc_reach \\<langle>c\\<^sub>2, mds\\<^sub>2'', mem''\\<rangle>\n\ngoal (1 subgoal):\n 1. mds\\<^sub>2' \\<sqsubseteq> mds''", "using seq"], ["proof (prove)\nusing this:\n  \\<langle>Stop, mds\\<^sub>2'', mem''\\<rangle>\n  \\<in> loc_reach \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>\n  \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n  \\<in> loc_reach \\<langle>c\\<^sub>2, mds\\<^sub>2'', mem''\\<rangle>\n  \\<turnstile> mds { c\\<^sub>1 } mds'\n  ?mds\\<^sub>25 \\<sqsubseteq> mds \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>1, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds') \\<and>\n     locally_sound_mode_use \\<langle>c\\<^sub>1, ?mds\\<^sub>25, mem\\<rangle>\n  \\<turnstile> mds' { c\\<^sub>2 } mds''\n  ?mds\\<^sub>25 \\<sqsubseteq> mds' \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>2, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds'') \\<and>\n     locally_sound_mode_use \\<langle>c\\<^sub>2, ?mds\\<^sub>25, mem\\<rangle>\n  mds\\<^sub>2 \\<sqsubseteq> mds\n\ngoal (1 subgoal):\n 1. mds\\<^sub>2' \\<sqsubseteq> mds''", "by blast"], ["proof (state)\nthis:\n  mds\\<^sub>2' \\<sqsubseteq> mds''\n\ngoal (1 subgoal):\n 1. \\<And>mem.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> locally_sound_mode_use\n                          \\<langle>c\\<^sub>1 ;;\n                                   c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>mem.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> locally_sound_mode_use\n                          \\<langle>c\\<^sub>1 ;;\n                                   c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>", "fix mem"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>mem.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>;\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              locally_sound_mode_use\n               \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n       \\<Longrightarrow> locally_sound_mode_use\n                          \\<langle>c\\<^sub>1 ;;\n                                   c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>", "from seq"], ["proof (chain)\npicking this:\n  \\<turnstile> mds { c\\<^sub>1 } mds'\n  ?mds\\<^sub>25 \\<sqsubseteq> mds \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>1, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds') \\<and>\n     locally_sound_mode_use \\<langle>c\\<^sub>1, ?mds\\<^sub>25, mem\\<rangle>\n  \\<turnstile> mds' { c\\<^sub>2 } mds''\n  ?mds\\<^sub>25 \\<sqsubseteq> mds' \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>2, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds'') \\<and>\n     locally_sound_mode_use \\<langle>c\\<^sub>2, ?mds\\<^sub>25, mem\\<rangle>\n  mds\\<^sub>2 \\<sqsubseteq> mds", "show \"locally_sound_mode_use \\<langle>c\\<^sub>1 ;; c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\""], ["proof (prove)\nusing this:\n  \\<turnstile> mds { c\\<^sub>1 } mds'\n  ?mds\\<^sub>25 \\<sqsubseteq> mds \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>1, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds') \\<and>\n     locally_sound_mode_use \\<langle>c\\<^sub>1, ?mds\\<^sub>25, mem\\<rangle>\n  \\<turnstile> mds' { c\\<^sub>2 } mds''\n  ?mds\\<^sub>25 \\<sqsubseteq> mds' \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>2, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds'') \\<and>\n     locally_sound_mode_use \\<langle>c\\<^sub>2, ?mds\\<^sub>25, mem\\<rangle>\n  mds\\<^sub>2 \\<sqsubseteq> mds\n\ngoal (1 subgoal):\n 1. locally_sound_mode_use\n     \\<langle>c\\<^sub>1 ;; c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>", "apply (simp add: locally_sound_mode_use_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n     \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n        mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n        \\<forall>mem.\n           (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n            mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n           (\\<forall>c' mds'.\n               (\\<exists>mem'.\n                   \\<langle>c', mds', mem'\\<rangle>\n                   \\<in> loc_reach\n                          \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n               (\\<forall>x.\n                   (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                    doesnt_read c' x) \\<and>\n                   (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                    doesnt_modify c' x)));\n     \\<turnstile> mds' { c\\<^sub>2 } mds'';\n     \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n        mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n        \\<forall>mem.\n           (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n            mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n           (\\<forall>c' mds'.\n               (\\<exists>mem'.\n                   \\<langle>c', mds', mem'\\<rangle>\n                   \\<in> loc_reach\n                          \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n               (\\<forall>x.\n                   (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                    doesnt_read c' x) \\<and>\n                   (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                    doesnt_modify c' x)));\n     mds\\<^sub>2 \\<sqsubseteq> mds\\<rbrakk>\n    \\<Longrightarrow> \\<forall>c' mds'.\n                         (\\<exists>mem'.\n                             \\<langle>c', mds', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c\\<^sub>1 ;;\n       c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                         (\\<forall>x.\n                             (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                              doesnt_read c' x) \\<and>\n                             (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                              doesnt_modify c' x))", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c' mds'a mem' x.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<langle>c', mds'a, mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>c\\<^sub>1 ;;\n                        c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds'a GuarNoRead \\<longrightarrow>\n                          doesnt_read c' x) \\<and>\n                         (x \\<in> mds'a GuarNoWrite \\<longrightarrow>\n                          doesnt_modify c' x)", "apply (drule seq_loc_reach)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c' mds'a mem' x.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        (\\<exists>c''.\n            c' = c'' ;; c\\<^sub>2 \\<and>\n            \\<langle>c'', mds'a, mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>) \\<or>\n        (\\<exists>c'' mds'' mem''.\n            \\<langle>Stop, mds'', mem''\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<and>\n            \\<langle>c', mds'a, mem'\\<rangle>\n            \\<in> loc_reach\n                   \\<langle>c\\<^sub>2, mds'', mem''\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds'a GuarNoRead \\<longrightarrow>\n                          doesnt_read c' x) \\<and>\n                         (x \\<in> mds'a GuarNoWrite \\<longrightarrow>\n                          doesnt_modify c' x)", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c' mds'a mem' x.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<exists>c''.\n           c' = c'' ;; c\\<^sub>2 \\<and>\n           \\<langle>c'', mds'a, mem'\\<rangle>\n           \\<in> loc_reach\n                  \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds'a GuarNoRead \\<longrightarrow>\n                          doesnt_read c' x) \\<and>\n                         (x \\<in> mds'a GuarNoWrite \\<longrightarrow>\n                          doesnt_modify c' x)\n 2. \\<And>c' mds'a mem' x.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<exists>c'' mds'' mem''.\n           \\<langle>Stop, mds'', mem''\\<rangle>\n           \\<in> loc_reach\n                  \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<and>\n           \\<langle>c', mds'a, mem'\\<rangle>\n           \\<in> loc_reach\n                  \\<langle>c\\<^sub>2, mds'', mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds'a GuarNoRead \\<longrightarrow>\n                          doesnt_read c' x) \\<and>\n                         (x \\<in> mds'a GuarNoWrite \\<longrightarrow>\n                          doesnt_modify c' x)", "apply (metis seq_doesnt_modify seq_doesnt_read)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c' mds'a mem' x.\n       \\<lbrakk>\\<turnstile> mds { c\\<^sub>1 } mds';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        \\<turnstile> mds' { c\\<^sub>2 } mds'';\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n              (\\<forall>c' mds'.\n                  (\\<exists>mem'.\n                      \\<langle>c', mds', mem'\\<rangle>\n                      \\<in> loc_reach\n                             \\<langle>c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>) \\<longrightarrow>\n                  (\\<forall>x.\n                      (x \\<in> mds' GuarNoRead \\<longrightarrow>\n                       doesnt_read c' x) \\<and>\n                      (x \\<in> mds' GuarNoWrite \\<longrightarrow>\n                       doesnt_modify c' x)));\n        mds\\<^sub>2 \\<sqsubseteq> mds;\n        \\<exists>c'' mds'' mem''.\n           \\<langle>Stop, mds'', mem''\\<rangle>\n           \\<in> loc_reach\n                  \\<langle>c\\<^sub>1, mds\\<^sub>2, mem\\<rangle> \\<and>\n           \\<langle>c', mds'a, mem'\\<rangle>\n           \\<in> loc_reach\n                  \\<langle>c\\<^sub>2, mds'', mem''\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> mds'a GuarNoRead \\<longrightarrow>\n                          doesnt_read c' x) \\<and>\n                         (x \\<in> mds'a GuarNoWrite \\<longrightarrow>\n                          doesnt_modify c' x)", "by metis"], ["proof (state)\nthis:\n  locally_sound_mode_use\n   \\<langle>c\\<^sub>1 ;; c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>mem.\n     (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c\\<^sub>1 ;;\n                      c\\<^sub>2, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n      mds\\<^sub>2' \\<sqsubseteq> mds'') \\<and>\n     locally_sound_mode_use\n      \\<langle>c\\<^sub>1 ;; c\\<^sub>2, mds\\<^sub>2, mem\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>mds\\<^sub>2 c mds\\<^sub>2' mds\\<^sub>1 mds\\<^sub>1' mds\\<^sub>2''\n       mds\\<^sub>2''' mem'.\n       \\<lbrakk>\\<turnstile> mds\\<^sub>2 { c } mds\\<^sub>2';\n        \\<And>mds\\<^sub>2'' mds\\<^sub>2''' mem'.\n           mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2''' \\<sqsubseteq> mds\\<^sub>2') \\<and>\n              locally_sound_mode_use\n               \\<langle>c, mds\\<^sub>2'', mem\\<rangle>;\n        mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2;\n        mds\\<^sub>2' \\<sqsubseteq> mds\\<^sub>1';\n        mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2''' \\<sqsubseteq>\n                             mds\\<^sub>1') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c, mds\\<^sub>2'', mem\\<rangle>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>mds\\<^sub>2 c mds\\<^sub>2' mds\\<^sub>1 mds\\<^sub>1' mds\\<^sub>2''\n       mds\\<^sub>2''' mem'.\n       \\<lbrakk>\\<turnstile> mds\\<^sub>2 { c } mds\\<^sub>2';\n        \\<And>mds\\<^sub>2'' mds\\<^sub>2''' mem'.\n           mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2''' \\<sqsubseteq> mds\\<^sub>2') \\<and>\n              locally_sound_mode_use\n               \\<langle>c, mds\\<^sub>2'', mem\\<rangle>;\n        mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2;\n        mds\\<^sub>2' \\<sqsubseteq> mds\\<^sub>1';\n        mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2''' \\<sqsubseteq>\n                             mds\\<^sub>1') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c, mds\\<^sub>2'', mem\\<rangle>", "case (sub mds\\<^sub>2'' c mds\\<^sub>2' mds\\<^sub>1 mds\\<^sub>1' c\\<^sub>1)"], ["proof (state)\nthis:\n  \\<turnstile> mds\\<^sub>2'' { c } mds\\<^sub>2'''__\n  ?mds\\<^sub>25 \\<sqsubseteq> mds\\<^sub>2'' \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds\\<^sub>2'''__) \\<and>\n     locally_sound_mode_use \\<langle>c, ?mds\\<^sub>25, mem\\<rangle>\n  mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2''\n  mds\\<^sub>2'''__ \\<sqsubseteq> mds\\<^sub>1'\n  c\\<^sub>1 \\<sqsubseteq> mds\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>mds\\<^sub>2 c mds\\<^sub>2' mds\\<^sub>1 mds\\<^sub>1' mds\\<^sub>2''\n       mds\\<^sub>2''' mem'.\n       \\<lbrakk>\\<turnstile> mds\\<^sub>2 { c } mds\\<^sub>2';\n        \\<And>mds\\<^sub>2'' mds\\<^sub>2''' mem'.\n           mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>2 \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2''' \\<sqsubseteq> mds\\<^sub>2') \\<and>\n              locally_sound_mode_use\n               \\<langle>c, mds\\<^sub>2'', mem\\<rangle>;\n        mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2;\n        mds\\<^sub>2' \\<sqsubseteq> mds\\<^sub>1';\n        mds\\<^sub>2'' \\<sqsubseteq> mds\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<forall>mem.\n                            (\\<langle>Stop, mds\\<^sub>2''', mem'\\<rangle>\n                             \\<in> loc_reach\n                                    \\<langle>c, mds\\<^sub>2'', mem\\<rangle> \\<longrightarrow>\n                             mds\\<^sub>2''' \\<sqsubseteq>\n                             mds\\<^sub>1') \\<and>\n                            locally_sound_mode_use\n                             \\<langle>c, mds\\<^sub>2'', mem\\<rangle>", "thus ?case"], ["proof (prove)\nusing this:\n  \\<turnstile> mds\\<^sub>2'' { c } mds\\<^sub>2'''__\n  ?mds\\<^sub>25 \\<sqsubseteq> mds\\<^sub>2'' \\<Longrightarrow>\n  \\<forall>mem.\n     (\\<langle>Stop, ?mds\\<^sub>2'5, ?mem'5\\<rangle>\n      \\<in> loc_reach\n             \\<langle>c, ?mds\\<^sub>25, mem\\<rangle> \\<longrightarrow>\n      ?mds\\<^sub>2'5 \\<sqsubseteq> mds\\<^sub>2'''__) \\<and>\n     locally_sound_mode_use \\<langle>c, ?mds\\<^sub>25, mem\\<rangle>\n  mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2''\n  mds\\<^sub>2'''__ \\<sqsubseteq> mds\\<^sub>1'\n  c\\<^sub>1 \\<sqsubseteq> mds\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<forall>mem.\n       (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n        \\<in> loc_reach\n               \\<langle>c, c\\<^sub>1, mem\\<rangle> \\<longrightarrow>\n        mds\\<^sub>2' \\<sqsubseteq> mds\\<^sub>1') \\<and>\n       locally_sound_mode_use \\<langle>c, c\\<^sub>1, mem\\<rangle>", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mem.\n       \\<lbrakk>\\<turnstile> mds\\<^sub>2'' { c } mds\\<^sub>2'''__;\n        \\<And>mds\\<^sub>2 mds\\<^sub>2' mem'.\n           mds\\<^sub>2 \\<sqsubseteq> mds\\<^sub>2'' \\<Longrightarrow>\n           \\<forall>mem.\n              (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n               \\<in> loc_reach\n                      \\<langle>c, mds\\<^sub>2, mem\\<rangle> \\<longrightarrow>\n               mds\\<^sub>2' \\<sqsubseteq> mds\\<^sub>2'''__) \\<and>\n              locally_sound_mode_use \\<langle>c, mds\\<^sub>2, mem\\<rangle>;\n        mds\\<^sub>1 \\<sqsubseteq> mds\\<^sub>2'';\n        mds\\<^sub>2'''__ \\<sqsubseteq> mds\\<^sub>1';\n        c\\<^sub>1 \\<sqsubseteq> mds\\<^sub>1;\n        \\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n        \\<in> loc_reach \\<langle>c, c\\<^sub>1, mem\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> mds\\<^sub>2' \\<sqsubseteq> mds\\<^sub>1'", "by (metis (hide_lams, no_types) inf_absorb2 le_infI1)"], ["proof (state)\nthis:\n  \\<forall>mem.\n     (\\<langle>Stop, mds\\<^sub>2', mem'\\<rangle>\n      \\<in> loc_reach \\<langle>c, c\\<^sub>1, mem\\<rangle> \\<longrightarrow>\n      mds\\<^sub>2' \\<sqsubseteq> mds\\<^sub>1') \\<and>\n     locally_sound_mode_use \\<langle>c, c\\<^sub>1, mem\\<rangle>\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}