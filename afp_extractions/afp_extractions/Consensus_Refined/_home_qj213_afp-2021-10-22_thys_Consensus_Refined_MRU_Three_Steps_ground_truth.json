{"file_name": "/home/qj213/afp-2021-10-22/thys/Consensus_Refined/MRU/Three_Steps.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Consensus_Refined", "problem_names": ["lemma three_phase_zero [simp]: \"three_phase 0 = 0\"", "lemma three_step_zero [simp]: \"three_step 0 = 0\"", "lemma three_phase_step: \"(three_phase r * nr_steps) + three_step r = r\"", "lemma three_step_Suc:\n  \"three_step r = 0 \\<Longrightarrow> three_step (Suc (Suc r)) = 2\"\n  \"three_step r = 0 \\<Longrightarrow> three_step (Suc r) = 1\"\n  \"three_step r = (Suc 0) \\<Longrightarrow> three_step (Suc r) = 2\"\n  \"three_step r = (Suc 0) \\<Longrightarrow> three_step (Suc (Suc r)) = 0\"\n  \"three_step r = (Suc (Suc 0)) \\<Longrightarrow> three_step ((Suc r)) = 0\"", "lemma three_step_phase_Suc:\n  \"three_step r = 0 \\<Longrightarrow> three_phase (Suc r) = three_phase r\"\n  \"three_step r = 0 \\<Longrightarrow> three_phase (Suc (Suc r)) = three_phase r\"\n  \"three_step r = 0 \\<Longrightarrow> three_phase (Suc (Suc (Suc r))) = Suc (three_phase r)\"\n  \"three_step r = (Suc 0) \\<Longrightarrow> three_phase (Suc r) = three_phase r\"\n  \"three_step r = (Suc 0) \\<Longrightarrow> three_phase (Suc (Suc r)) = Suc (three_phase r)\"\n  \"three_step r = (Suc (Suc 0)) \\<Longrightarrow> three_phase (Suc r) = Suc (three_phase r)\"", "lemma three_step2_phase_Suc:\n  \"three_step r = 2 \\<Longrightarrow> (3 * (Suc (three_phase r)) - 1) = r\"", "lemma three_stepE:\n  \"\\<lbrakk> three_step r = 0 \\<Longrightarrow> P; three_step r = 1 \\<Longrightarrow> P; three_step r = 2 \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\""], "translations": [["", "lemma three_phase_zero [simp]: \"three_phase 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. three_phase 0 = 0", "by (simp add: three_phase_def)"], ["", "lemma three_step_zero [simp]: \"three_step 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. three_step 0 = 0", "by (simp add: three_step_def)"], ["", "lemma three_phase_step: \"(three_phase r * nr_steps) + three_step r = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. three_phase r * 3 + three_step r = r", "by (auto simp add: three_phase_def three_step_def)"], ["", "lemma three_step_Suc:\n  \"three_step r = 0 \\<Longrightarrow> three_step (Suc (Suc r)) = 2\"\n  \"three_step r = 0 \\<Longrightarrow> three_step (Suc r) = 1\"\n  \"three_step r = (Suc 0) \\<Longrightarrow> three_step (Suc r) = 2\"\n  \"three_step r = (Suc 0) \\<Longrightarrow> three_step (Suc (Suc r)) = 0\"\n  \"three_step r = (Suc (Suc 0)) \\<Longrightarrow> three_step ((Suc r)) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((three_step r = 0 \\<Longrightarrow> three_step (Suc (Suc r)) = 2) &&&\n     (three_step r = 0 \\<Longrightarrow> three_step (Suc r) = 1)) &&&\n    (three_step r = Suc 0 \\<Longrightarrow> three_step (Suc r) = 2) &&&\n    (three_step r = Suc 0 \\<Longrightarrow>\n     three_step (Suc (Suc r)) = 0) &&&\n    (three_step r = Suc (Suc 0) \\<Longrightarrow> three_step (Suc r) = 0)", "by(unfold three_step_def, simp_all add: mod_Suc)"], ["", "lemma three_step_phase_Suc:\n  \"three_step r = 0 \\<Longrightarrow> three_phase (Suc r) = three_phase r\"\n  \"three_step r = 0 \\<Longrightarrow> three_phase (Suc (Suc r)) = three_phase r\"\n  \"three_step r = 0 \\<Longrightarrow> three_phase (Suc (Suc (Suc r))) = Suc (three_phase r)\"\n  \"three_step r = (Suc 0) \\<Longrightarrow> three_phase (Suc r) = three_phase r\"\n  \"three_step r = (Suc 0) \\<Longrightarrow> three_phase (Suc (Suc r)) = Suc (three_phase r)\"\n  \"three_step r = (Suc (Suc 0)) \\<Longrightarrow> three_phase (Suc r) = Suc (three_phase r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((three_step r = 0 \\<Longrightarrow>\n      three_phase (Suc r) = three_phase r) &&&\n     (three_step r = 0 \\<Longrightarrow>\n      three_phase (Suc (Suc r)) = three_phase r) &&&\n     (three_step r = 0 \\<Longrightarrow>\n      three_phase (Suc (Suc (Suc r))) = Suc (three_phase r))) &&&\n    (three_step r = Suc 0 \\<Longrightarrow>\n     three_phase (Suc r) = three_phase r) &&&\n    (three_step r = Suc 0 \\<Longrightarrow>\n     three_phase (Suc (Suc r)) = Suc (three_phase r)) &&&\n    (three_step r = Suc (Suc 0) \\<Longrightarrow>\n     three_phase (Suc r) = Suc (three_phase r))", "by(simp_all add: three_step_def three_phase_def mod_Suc div_Suc)"], ["", "lemma three_step2_phase_Suc:\n  \"three_step r = 2 \\<Longrightarrow> (3 * (Suc (three_phase r)) - 1) = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. three_step r = 2 \\<Longrightarrow> 3 * Suc (three_phase r) - 1 = r", "apply(simp add: three_step_def three_phase_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. r mod 3 = 2 \\<Longrightarrow> Suc (Suc (3 * (r div 3))) = r", "by (metis add_2_eq_Suc' mult_div_mod_eq)"], ["", "lemma three_stepE:\n  \"\\<lbrakk> three_step r = 0 \\<Longrightarrow> P; three_step r = 1 \\<Longrightarrow> P; three_step r = 2 \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>three_step r = 0 \\<Longrightarrow> P;\n     three_step r = 1 \\<Longrightarrow> P;\n     three_step r = 2 \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by(unfold three_step_def, arith)"], ["", "end"]]}