{"file_name": "/home/qj213/afp-2021-10-22/thys/Consensus_Refined/MRU/Three_Step_MRU.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Consensus_Refined", "problem_names": ["lemmas ts_mru_evt_defs = opt_mru_step0_def opt_mru_step1_def opt_mru_guard_def", "lemmas ts_mru_TS_defs = ts_mru_TS_def ts_mru_init_def ts_mru_trans_def", "lemmas ts_ref_rel_defs = \n  basic_rel_def\n  ts_ref_rel_def\n  three_step0_rel_def\n  three_step1_rel_def\n  three_step2_rel_def", "lemma step0_ref:\n  \"{ts_ref_rel} Id, opt_mru_step0 r C {> ts_ref_rel}\"", "lemma step1_ref:\n  \"{ts_ref_rel} Id, opt_mru_step1 r S v {> ts_ref_rel}\"", "lemma step2_ref:\n  \"{ts_ref_rel \\<inter> OMRU_inv1 \\<times> UNIV} \n    \\<Union>r' Q S' v dec_f'. opt_mru_round r' Q S' v dec_f', \n    opt_mru_step2 r dec_f {> ts_ref_rel}\"", "lemma ThreeStep_Coordinated_Refines:\n  \"PO_refines (ts_ref_rel \\<inter> OMRU_inv1 \\<times> UNIV) \n    mru_opt_TS ts_mru_TS\""], "translations": [["", "lemmas ts_mru_evt_defs = opt_mru_step0_def opt_mru_step1_def opt_mru_guard_def"], ["", "definition ts_mru_trans :: \"(three_step_mru_state \\<times> three_step_mru_state) set\" where\n  \"ts_mru_trans = (\\<Union>r C. opt_mru_step0 r C) \n      \\<union> (\\<Union>r S v. opt_mru_step1 r S v)\n      \\<union> (\\<Union>r dec_f. opt_mru_step2 r dec_f) \\<union> Id\""], ["", "definition ts_mru_init where\n  \"ts_mru_init = { \\<lparr> next_round = 0, mru_vote = Map.empty, decisions = Map.empty, candidates = {} \\<rparr> }\""], ["", "definition ts_mru_TS :: \"three_step_mru_state TS\" where\n  \"ts_mru_TS = \\<lparr> init = ts_mru_init, trans = ts_mru_trans \\<rparr>\""], ["", "lemmas ts_mru_TS_defs = ts_mru_TS_def ts_mru_init_def ts_mru_trans_def"], ["", "subsection \\<open>Refinement\\<close>"], ["", "(******************************************************************************)"], ["", "definition basic_rel where\n  \"basic_rel \\<equiv> {(sa, sc).    \n    decisions sc = decisions sa\n    \\<and> next_round sa = three_phase (next_round sc)\n  }\""], ["", "definition three_step0_rel :: \"(opt_mru_state \\<times> three_step_mru_state)set\" where\n  \"three_step0_rel \\<equiv> basic_rel \\<inter> {(sa, sc).    \n    three_step (next_round sc) = 0\n    \\<and> mru_vote sc = mru_vote sa\n  }\""], ["", "definition three_step1_rel :: \"(opt_mru_state \\<times> three_step_mru_state)set\"  where\n  \"three_step1_rel \\<equiv> basic_rel \\<inter> {(sa, sc).\n    (\\<exists>sc' r C. (sa, sc') \\<in> three_step0_rel \\<and> (sc', sc) \\<in> opt_mru_step0 r C)\n    \\<and> mru_vote sc = mru_vote sa\n  }\""], ["", "definition three_step2_rel :: \"(opt_mru_state \\<times> three_step_mru_state)set\"  where\n  \"three_step2_rel \\<equiv> basic_rel \\<inter> {(sa, sc).\n    (\\<exists>sc' r S v. (sa, sc') \\<in> three_step1_rel \\<and> (sc', sc) \\<in> opt_mru_step1 r S v)\n  }\""], ["", "definition ts_ref_rel where\n  \"ts_ref_rel = {(sa, sc).\n    (three_step (next_round sc) = 0 \\<longrightarrow> (sa, sc) \\<in> three_step0_rel)\n    \\<and> (three_step (next_round sc) = 1 \\<longrightarrow> (sa, sc) \\<in> three_step1_rel)\n    \\<and> (three_step (next_round sc) = 2 \\<longrightarrow> (sa, sc) \\<in> three_step2_rel)\n  }\""], ["", "lemmas ts_ref_rel_defs = \n  basic_rel_def\n  ts_ref_rel_def\n  three_step0_rel_def\n  three_step1_rel_def\n  three_step2_rel_def"], ["", "lemma step0_ref:\n  \"{ts_ref_rel} Id, opt_mru_step0 r C {> ts_ref_rel}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {ts_ref_rel} Id, opt_mru_step0 r C {> ts_ref_rel}", "proof(simp only: PO_rhoare_defs, safe)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b y.\n       \\<lbrakk>(a, y) \\<in> ts_ref_rel;\n        (y, b) \\<in> opt_mru_step0 r C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (a, y) \\<in> Id \\<and> (y, b) \\<in> ts_ref_rel", "fix sa sc sc'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b y.\n       \\<lbrakk>(a, y) \\<in> ts_ref_rel;\n        (y, b) \\<in> opt_mru_step0 r C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (a, y) \\<in> Id \\<and> (y, b) \\<in> ts_ref_rel", "assume R: \"(sa, sc) \\<in> ts_ref_rel\" and step: \"(sc, sc') \\<in> opt_mru_step0 r C\""], ["proof (state)\nthis:\n  (sa, sc) \\<in> ts_ref_rel\n  (sc, sc') \\<in> opt_mru_step0 r C\n\ngoal (1 subgoal):\n 1. \\<And>a b y.\n       \\<lbrakk>(a, y) \\<in> ts_ref_rel;\n        (y, b) \\<in> opt_mru_step0 r C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (a, y) \\<in> Id \\<and> (y, b) \\<in> ts_ref_rel", "hence r_step: \"three_step (next_round sc) = 0\" \"three_step (next_round sc') = 1\""], ["proof (prove)\nusing this:\n  (sa, sc) \\<in> ts_ref_rel\n  (sc, sc') \\<in> opt_mru_step0 r C\n\ngoal (1 subgoal):\n 1. three_step (opt_mru_state.next_round sc) = 0 &&&\n    three_step (opt_mru_state.next_round sc') = 1", "by(auto simp add: ts_ref_rel_def opt_mru_step0_def three_step_Suc)"], ["proof (state)\nthis:\n  three_step (opt_mru_state.next_round sc) = 0\n  three_step (opt_mru_state.next_round sc') = 1\n\ngoal (1 subgoal):\n 1. \\<And>a b y.\n       \\<lbrakk>(a, y) \\<in> ts_ref_rel;\n        (y, b) \\<in> opt_mru_step0 r C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (a, y) \\<in> Id \\<and> (y, b) \\<in> ts_ref_rel", "hence \"(sa, sc') \\<in> ts_ref_rel\""], ["proof (prove)\nusing this:\n  three_step (opt_mru_state.next_round sc) = 0\n  three_step (opt_mru_state.next_round sc') = 1\n\ngoal (1 subgoal):\n 1. (sa, sc') \\<in> ts_ref_rel", "using R step"], ["proof (prove)\nusing this:\n  three_step (opt_mru_state.next_round sc) = 0\n  three_step (opt_mru_state.next_round sc') = 1\n  (sa, sc) \\<in> ts_ref_rel\n  (sc, sc') \\<in> opt_mru_step0 r C\n\ngoal (1 subgoal):\n 1. (sa, sc') \\<in> ts_ref_rel", "apply(auto simp add: ts_ref_rel_def  three_step_phase_Suc three_step1_rel_def\n      three_step2_rel_def intro!: exI[where x=sc] step R)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>three_step (opt_mru_state.next_round sc) = 0;\n     three_step (opt_mru_state.next_round sc') = Suc 0;\n     (sa, sc) \\<in> three_step0_rel;\n     (sc, sc') \\<in> opt_mru_step0 r C\\<rbrakk>\n    \\<Longrightarrow> (sa, sc') \\<in> basic_rel\n 2. \\<lbrakk>three_step (opt_mru_state.next_round sc) = 0;\n     three_step (opt_mru_state.next_round sc') = Suc 0;\n     (sa, sc) \\<in> three_step0_rel;\n     (sc, sc') \\<in> opt_mru_step0 r C\\<rbrakk>\n    \\<Longrightarrow> mru_vote sc' = mru_vote sa", "apply(auto simp add: three_step0_rel_def basic_rel_def three_step_phase_Suc\n        opt_mru_step0_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (sa, sc') \\<in> ts_ref_rel\n\ngoal (1 subgoal):\n 1. \\<And>a b y.\n       \\<lbrakk>(a, y) \\<in> ts_ref_rel;\n        (y, b) \\<in> opt_mru_step0 r C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (a, y) \\<in> Id \\<and> (y, b) \\<in> ts_ref_rel", "thus \"\\<exists>sa'. (sa, sa') \\<in> Id \\<and> (sa', sc') \\<in> ts_ref_rel\""], ["proof (prove)\nusing this:\n  (sa, sc') \\<in> ts_ref_rel\n\ngoal (1 subgoal):\n 1. \\<exists>sa'. (sa, sa') \\<in> Id \\<and> (sa', sc') \\<in> ts_ref_rel", "by blast"], ["proof (state)\nthis:\n  \\<exists>sa'. (sa, sa') \\<in> Id \\<and> (sa', sc') \\<in> ts_ref_rel\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma step1_ref:\n  \"{ts_ref_rel} Id, opt_mru_step1 r S v {> ts_ref_rel}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {ts_ref_rel} Id, opt_mru_step1 r S v {> ts_ref_rel}", "proof(simp only: PO_rhoare_defs, safe)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b y.\n       \\<lbrakk>(a, y) \\<in> ts_ref_rel;\n        (y, b) \\<in> opt_mru_step1 r S v\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (a, y) \\<in> Id \\<and> (y, b) \\<in> ts_ref_rel", "fix sa sc sc'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b y.\n       \\<lbrakk>(a, y) \\<in> ts_ref_rel;\n        (y, b) \\<in> opt_mru_step1 r S v\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (a, y) \\<in> Id \\<and> (y, b) \\<in> ts_ref_rel", "assume R: \"(sa, sc) \\<in> ts_ref_rel\" and step: \"(sc, sc') \\<in> opt_mru_step1 r S v\""], ["proof (state)\nthis:\n  (sa, sc) \\<in> ts_ref_rel\n  (sc, sc') \\<in> opt_mru_step1 r S v\n\ngoal (1 subgoal):\n 1. \\<And>a b y.\n       \\<lbrakk>(a, y) \\<in> ts_ref_rel;\n        (y, b) \\<in> opt_mru_step1 r S v\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (a, y) \\<in> Id \\<and> (y, b) \\<in> ts_ref_rel", "hence r_step: \"three_step (next_round sc) = 1\" \"three_step (next_round sc') = 2\""], ["proof (prove)\nusing this:\n  (sa, sc) \\<in> ts_ref_rel\n  (sc, sc') \\<in> opt_mru_step1 r S v\n\ngoal (1 subgoal):\n 1. three_step (opt_mru_state.next_round sc) = 1 &&&\n    three_step (opt_mru_state.next_round sc') = 2", "by(auto simp add: ts_ref_rel_def opt_mru_step1_def three_step_Suc)"], ["proof (state)\nthis:\n  three_step (opt_mru_state.next_round sc) = 1\n  three_step (opt_mru_state.next_round sc') = 2\n\ngoal (1 subgoal):\n 1. \\<And>a b y.\n       \\<lbrakk>(a, y) \\<in> ts_ref_rel;\n        (y, b) \\<in> opt_mru_step1 r S v\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (a, y) \\<in> Id \\<and> (y, b) \\<in> ts_ref_rel", "hence \"(sa, sc') \\<in> ts_ref_rel\""], ["proof (prove)\nusing this:\n  three_step (opt_mru_state.next_round sc) = 1\n  three_step (opt_mru_state.next_round sc') = 2\n\ngoal (1 subgoal):\n 1. (sa, sc') \\<in> ts_ref_rel", "using R step"], ["proof (prove)\nusing this:\n  three_step (opt_mru_state.next_round sc) = 1\n  three_step (opt_mru_state.next_round sc') = 2\n  (sa, sc) \\<in> ts_ref_rel\n  (sc, sc') \\<in> opt_mru_step1 r S v\n\ngoal (1 subgoal):\n 1. (sa, sc') \\<in> ts_ref_rel", "apply(auto simp add: ts_ref_rel_def  three_step_phase_Suc three_step0_rel_def\n      three_step2_rel_def intro!: exI[where x=sc] step R)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>three_step (opt_mru_state.next_round sc) = Suc 0;\n     three_step (opt_mru_state.next_round sc') = 2;\n     (sa, sc) \\<in> three_step1_rel;\n     (sc, sc') \\<in> opt_mru_step1 r S v\\<rbrakk>\n    \\<Longrightarrow> (sa, sc') \\<in> basic_rel", "apply(auto simp add: three_step1_rel_def basic_rel_def three_step_phase_Suc\n      opt_mru_step1_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (sa, sc') \\<in> ts_ref_rel\n\ngoal (1 subgoal):\n 1. \\<And>a b y.\n       \\<lbrakk>(a, y) \\<in> ts_ref_rel;\n        (y, b) \\<in> opt_mru_step1 r S v\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (a, y) \\<in> Id \\<and> (y, b) \\<in> ts_ref_rel", "thus \"\\<exists>sa'. (sa, sa') \\<in> Id \\<and> (sa', sc') \\<in> ts_ref_rel\""], ["proof (prove)\nusing this:\n  (sa, sc') \\<in> ts_ref_rel\n\ngoal (1 subgoal):\n 1. \\<exists>sa'. (sa, sa') \\<in> Id \\<and> (sa', sc') \\<in> ts_ref_rel", "by blast"], ["proof (state)\nthis:\n  \\<exists>sa'. (sa, sa') \\<in> Id \\<and> (sa', sc') \\<in> ts_ref_rel\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma step2_ref:\n  \"{ts_ref_rel \\<inter> OMRU_inv1 \\<times> UNIV} \n    \\<Union>r' Q S' v dec_f'. opt_mru_round r' Q S' v dec_f', \n    opt_mru_step2 r dec_f {> ts_ref_rel}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {ts_ref_rel \\<inter>\n     OMRU_inv1 \\<times>\n     UNIV} \\<Union>r' Q S' v.\n              \\<Union>\n               (range\n                 (opt_mru_round r' Q S'\n                   v)), opt_mru_step2 r dec_f {> ts_ref_rel}", "proof(auto simp only: PO_rhoare_defs)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b y.\n       \\<lbrakk>(y, b) \\<in> opt_mru_step2 r dec_f; (a, y) \\<in> ts_ref_rel;\n        a \\<in> OMRU_inv1; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (a, y)\n                            \\<in> (\\<Union>r' Q S' v.\n\\<Union> (range (opt_mru_round r' Q S' v))) \\<and>\n                            (y, b) \\<in> ts_ref_rel", "fix sa sc2 sc3"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b y.\n       \\<lbrakk>(y, b) \\<in> opt_mru_step2 r dec_f; (a, y) \\<in> ts_ref_rel;\n        a \\<in> OMRU_inv1; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (a, y)\n                            \\<in> (\\<Union>r' Q S' v.\n\\<Union> (range (opt_mru_round r' Q S' v))) \\<and>\n                            (y, b) \\<in> ts_ref_rel", "assume \n    ainv: \"sa \\<in> OMRU_inv1\"\n    and R: \"(sa, sc2) \\<in> ts_ref_rel\"\n    and step2: \"(sc2, sc3) \\<in> opt_mru_step2 r dec_f\""], ["proof (state)\nthis:\n  sa \\<in> OMRU_inv1\n  (sa, sc2) \\<in> ts_ref_rel\n  (sc2, sc3) \\<in> opt_mru_step2 r dec_f\n\ngoal (1 subgoal):\n 1. \\<And>a b y.\n       \\<lbrakk>(y, b) \\<in> opt_mru_step2 r dec_f; (a, y) \\<in> ts_ref_rel;\n        a \\<in> OMRU_inv1; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (a, y)\n                            \\<in> (\\<Union>r' Q S' v.\n\\<Union> (range (opt_mru_round r' Q S' v))) \\<and>\n                            (y, b) \\<in> ts_ref_rel", "from R step2"], ["proof (chain)\npicking this:\n  (sa, sc2) \\<in> ts_ref_rel\n  (sc2, sc3) \\<in> opt_mru_step2 r dec_f", "obtain sc0 r0 C sc1 r1 S v where\n    R0: \"(sa, sc0) \\<in> three_step0_rel\" and step0: \"(sc0, sc1) \\<in> opt_mru_step0 r0 C\"\n    and R1: \"(sa, sc1) \\<in> three_step1_rel\" and step1: \"(sc1, sc2) \\<in> opt_mru_step1 r1 S v\""], ["proof (prove)\nusing this:\n  (sa, sc2) \\<in> ts_ref_rel\n  (sc2, sc3) \\<in> opt_mru_step2 r dec_f\n\ngoal (1 subgoal):\n 1. (\\<And>sc0 sc1 r0 C r1 S v.\n        \\<lbrakk>(sa, sc0) \\<in> three_step0_rel;\n         (sc0, sc1) \\<in> opt_mru_step0 r0 C;\n         (sa, sc1) \\<in> three_step1_rel;\n         (sc1, sc2) \\<in> opt_mru_step1 r1 S v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce simp add: ts_ref_rel_def three_step2_rel_def opt_mru_step2_def\n      three_step1_rel_def)"], ["proof (state)\nthis:\n  (sa, sc0) \\<in> three_step0_rel\n  (sc0, sc1) \\<in> opt_mru_step0 r0 C\n  (sa, sc1) \\<in> three_step1_rel\n  (sc1, sc2) \\<in> opt_mru_step1 r1 S v\n\ngoal (1 subgoal):\n 1. \\<And>a b y.\n       \\<lbrakk>(y, b) \\<in> opt_mru_step2 r dec_f; (a, y) \\<in> ts_ref_rel;\n        a \\<in> OMRU_inv1; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (a, y)\n                            \\<in> (\\<Union>r' Q S' v.\n\\<Union> (range (opt_mru_round r' Q S' v))) \\<and>\n                            (y, b) \\<in> ts_ref_rel", "have R2: \"(sa, sc2) \\<in> three_step2_rel\" \n    and r2_step: \"three_step (next_round sc2) = Suc (Suc 0)\" \n    and r3_step: \"three_step (next_round sc3) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sa, sc2) \\<in> three_step2_rel &&&\n    three_step (opt_mru_state.next_round sc2) = Suc (Suc 0) &&&\n    three_step (opt_mru_state.next_round sc3) = 0", "using R step2"], ["proof (prove)\nusing this:\n  (sa, sc2) \\<in> ts_ref_rel\n  (sc2, sc3) \\<in> opt_mru_step2 r dec_f\n\ngoal (1 subgoal):\n 1. (sa, sc2) \\<in> three_step2_rel &&&\n    three_step (opt_mru_state.next_round sc2) = Suc (Suc 0) &&&\n    three_step (opt_mru_state.next_round sc3) = 0", "by(auto simp add: ts_ref_rel_def opt_mru_step2_def three_step_phase_Suc three_step_Suc)"], ["proof (state)\nthis:\n  (sa, sc2) \\<in> three_step2_rel\n  three_step (opt_mru_state.next_round sc2) = Suc (Suc 0)\n  three_step (opt_mru_state.next_round sc3) = 0\n\ngoal (1 subgoal):\n 1. \\<And>a b y.\n       \\<lbrakk>(y, b) \\<in> opt_mru_step2 r dec_f; (a, y) \\<in> ts_ref_rel;\n        a \\<in> OMRU_inv1; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (a, y)\n                            \\<in> (\\<Union>r' Q S' v.\n\\<Union> (range (opt_mru_round r' Q S' v))) \\<and>\n                            (y, b) \\<in> ts_ref_rel", "have r: \"r = Suc r1\" and r1: \"r1 = Suc r0\" \"r1 = next_round sc1\" and \n    r0: \"r0 = next_round sc0\" and r0_step: \"three_step r0 = 0\" and \n    r2: \"r = next_round sc2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (r = Suc r1 &&& r1 = Suc r0 &&& r1 = opt_mru_state.next_round sc1) &&&\n    r0 = opt_mru_state.next_round sc0 &&&\n    three_step r0 = 0 &&& r = opt_mru_state.next_round sc2", "using step0 step1 step2"], ["proof (prove)\nusing this:\n  (sc0, sc1) \\<in> opt_mru_step0 r0 C\n  (sc1, sc2) \\<in> opt_mru_step1 r1 S v\n  (sc2, sc3) \\<in> opt_mru_step2 r dec_f\n\ngoal (1 subgoal):\n 1. (r = Suc r1 &&& r1 = Suc r0 &&& r1 = opt_mru_state.next_round sc1) &&&\n    r0 = opt_mru_state.next_round sc0 &&&\n    three_step r0 = 0 &&& r = opt_mru_state.next_round sc2", "by(auto simp add: opt_mru_step0_def opt_mru_step1_def opt_mru_step2_def)"], ["proof (state)\nthis:\n  r = Suc r1\n  r1 = Suc r0\n  r1 = opt_mru_state.next_round sc1\n  r0 = opt_mru_state.next_round sc0\n  three_step r0 = 0\n  r = opt_mru_state.next_round sc2\n\ngoal (1 subgoal):\n 1. \\<And>a b y.\n       \\<lbrakk>(y, b) \\<in> opt_mru_step2 r dec_f; (a, y) \\<in> ts_ref_rel;\n        a \\<in> OMRU_inv1; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (a, y)\n                            \\<in> (\\<Union>r' Q S' v.\n\\<Union> (range (opt_mru_round r' Q S' v))) \\<and>\n                            (y, b) \\<in> ts_ref_rel", "have abs_round2: \"next_round sa = three_phase r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. opt_mru_state.next_round sa = three_phase r", "using R2 r2"], ["proof (prove)\nusing this:\n  (sa, sc2) \\<in> three_step2_rel\n  r = opt_mru_state.next_round sc2\n\ngoal (1 subgoal):\n 1. opt_mru_state.next_round sa = three_phase r", "by(auto simp add: three_step2_rel_def basic_rel_def)"], ["proof (state)\nthis:\n  opt_mru_state.next_round sa = three_phase r\n\ngoal (1 subgoal):\n 1. \\<And>a b y.\n       \\<lbrakk>(y, b) \\<in> opt_mru_step2 r dec_f; (a, y) \\<in> ts_ref_rel;\n        a \\<in> OMRU_inv1; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (a, y)\n                            \\<in> (\\<Union>r' Q S' v.\n\\<Union> (range (opt_mru_round r' Q S' v))) \\<and>\n                            (y, b) \\<in> ts_ref_rel", "have abs_round1: \"next_round sa = three_phase r1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. opt_mru_state.next_round sa = three_phase r1", "using R1 r1"], ["proof (prove)\nusing this:\n  (sa, sc1) \\<in> three_step1_rel\n  r1 = Suc r0\n  r1 = opt_mru_state.next_round sc1\n\ngoal (1 subgoal):\n 1. opt_mru_state.next_round sa = three_phase r1", "by(auto simp add: three_step1_rel_def basic_rel_def)"], ["proof (state)\nthis:\n  opt_mru_state.next_round sa = three_phase r1\n\ngoal (1 subgoal):\n 1. \\<And>a b y.\n       \\<lbrakk>(y, b) \\<in> opt_mru_step2 r dec_f; (a, y) \\<in> ts_ref_rel;\n        a \\<in> OMRU_inv1; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (a, y)\n                            \\<in> (\\<Union>r' Q S' v.\n\\<Union> (range (opt_mru_round r' Q S' v))) \\<and>\n                            (y, b) \\<in> ts_ref_rel", "have abs_round0: \"next_round sa = three_phase r0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. opt_mru_state.next_round sa = three_phase r0", "using R0 r0 r"], ["proof (prove)\nusing this:\n  (sa, sc0) \\<in> three_step0_rel\n  r0 = opt_mru_state.next_round sc0\n  r = Suc r1\n\ngoal (1 subgoal):\n 1. opt_mru_state.next_round sa = three_phase r0", "by(auto simp add: three_step0_rel_def basic_rel_def three_step_phase_Suc)"], ["proof (state)\nthis:\n  opt_mru_state.next_round sa = three_phase r0\n\ngoal (1 subgoal):\n 1. \\<And>a b y.\n       \\<lbrakk>(y, b) \\<in> opt_mru_step2 r dec_f; (a, y) \\<in> ts_ref_rel;\n        a \\<in> OMRU_inv1; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (a, y)\n                            \\<in> (\\<Union>r' Q S' v.\n\\<Union> (range (opt_mru_round r' Q S' v))) \\<and>\n                            (y, b) \\<in> ts_ref_rel", "have r_votes: \"r_votes sc2 r = const_map v S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r_votes sc2 r = const_map v S", "proof(rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. r_votes sc2 r x = const_map v S x", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. r_votes sc2 r x = const_map v S x", "show \"r_votes sc2 r p = const_map v S p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r_votes sc2 r p = const_map v S p", "proof(cases \"r_votes sc2 r p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. r_votes sc2 r p = None \\<Longrightarrow>\n    r_votes sc2 r p = const_map v S p\n 2. \\<And>a.\n       r_votes sc2 r p = Some a \\<Longrightarrow>\n       r_votes sc2 r p = const_map v S p", "case None"], ["proof (state)\nthis:\n  r_votes sc2 r p = None\n\ngoal (2 subgoals):\n 1. r_votes sc2 r p = None \\<Longrightarrow>\n    r_votes sc2 r p = const_map v S p\n 2. \\<And>a.\n       r_votes sc2 r p = Some a \\<Longrightarrow>\n       r_votes sc2 r p = const_map v S p", "thus ?thesis"], ["proof (prove)\nusing this:\n  r_votes sc2 r p = None\n\ngoal (1 subgoal):\n 1. r_votes sc2 r p = const_map v S p", "using step0 step1 abs_round0 abs_round1 abs_round2"], ["proof (prove)\nusing this:\n  r_votes sc2 r p = None\n  (sc0, sc1) \\<in> opt_mru_step0 r0 C\n  (sc1, sc2) \\<in> opt_mru_step1 r1 S v\n  opt_mru_state.next_round sa = three_phase r0\n  opt_mru_state.next_round sa = three_phase r1\n  opt_mru_state.next_round sa = three_phase r\n\ngoal (1 subgoal):\n 1. r_votes sc2 r p = const_map v S p", "by(auto simp add: r_votes_def opt_mru_step1_def\n          const_map_def restrict_map_def map_add_def)"], ["proof (state)\nthis:\n  r_votes sc2 r p = const_map v S p\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       r_votes sc2 r p = Some a \\<Longrightarrow>\n       r_votes sc2 r p = const_map v S p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       r_votes sc2 r p = Some a \\<Longrightarrow>\n       r_votes sc2 r p = const_map v S p", "case (Some w)"], ["proof (state)\nthis:\n  r_votes sc2 r p = Some w\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       r_votes sc2 r p = Some a \\<Longrightarrow>\n       r_votes sc2 r p = const_map v S p", "hence in_S: \"mru_vote sc1 p \\<noteq> mru_vote sc2 p\""], ["proof (prove)\nusing this:\n  r_votes sc2 r p = Some w\n\ngoal (1 subgoal):\n 1. mru_vote sc1 p \\<noteq> mru_vote sc2 p", "using R0 step0 ainv r1 r abs_round0"], ["proof (prove)\nusing this:\n  r_votes sc2 r p = Some w\n  (sa, sc0) \\<in> three_step0_rel\n  (sc0, sc1) \\<in> opt_mru_step0 r0 C\n  sa \\<in> OMRU_inv1\n  r1 = Suc r0\n  r1 = opt_mru_state.next_round sc1\n  r = Suc r1\n  opt_mru_state.next_round sa = three_phase r0\n\ngoal (1 subgoal):\n 1. mru_vote sc1 p \\<noteq> mru_vote sc2 p", "by(auto simp add: r_votes_def ts_ref_rel_defs\n          three_step_phase_Suc opt_mru_step0_def dest: OMRU_inv1D[where p=p])"], ["proof (state)\nthis:\n  mru_vote sc1 p \\<noteq> mru_vote sc2 p\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       r_votes sc2 r p = Some a \\<Longrightarrow>\n       r_votes sc2 r p = const_map v S p", "hence \"p \\<in> S\""], ["proof (prove)\nusing this:\n  mru_vote sc1 p \\<noteq> mru_vote sc2 p\n\ngoal (1 subgoal):\n 1. p \\<in> S", "using step1"], ["proof (prove)\nusing this:\n  mru_vote sc1 p \\<noteq> mru_vote sc2 p\n  (sc1, sc2) \\<in> opt_mru_step1 r1 S v\n\ngoal (1 subgoal):\n 1. p \\<in> S", "by(auto simp add: opt_mru_step1_def map_add_def const_map_is_Some \n          split: option.split_asm)"], ["proof (state)\nthis:\n  p \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       r_votes sc2 r p = Some a \\<Longrightarrow>\n       r_votes sc2 r p = const_map v S p", "moreover"], ["proof (state)\nthis:\n  p \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       r_votes sc2 r p = Some a \\<Longrightarrow>\n       r_votes sc2 r p = const_map v S p", "have \"w=v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w = v", "using R0 R1 step1 ainv r abs_round1 Some"], ["proof (prove)\nusing this:\n  (sa, sc0) \\<in> three_step0_rel\n  (sa, sc1) \\<in> three_step1_rel\n  (sc1, sc2) \\<in> opt_mru_step1 r1 S v\n  sa \\<in> OMRU_inv1\n  r = Suc r1\n  opt_mru_state.next_round sa = three_phase r1\n  r_votes sc2 r p = Some w\n\ngoal (1 subgoal):\n 1. w = v", "by(auto simp add: r_votes_def ts_ref_rel_defs const_map_is_Some\n          three_step_phase_Suc opt_mru_step1_def dest: OMRU_inv1D[where p=p])"], ["proof (state)\nthis:\n  w = v\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       r_votes sc2 r p = Some a \\<Longrightarrow>\n       r_votes sc2 r p = const_map v S p", "ultimately"], ["proof (chain)\npicking this:\n  p \\<in> S\n  w = v", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<in> S\n  w = v\n\ngoal (1 subgoal):\n 1. r_votes sc2 r p = const_map v S p", "using Some"], ["proof (prove)\nusing this:\n  p \\<in> S\n  w = v\n  r_votes sc2 r p = Some w\n\ngoal (1 subgoal):\n 1. r_votes sc2 r p = const_map v S p", "by(auto simp add: const_map_def)"], ["proof (state)\nthis:\n  r_votes sc2 r p = const_map v S p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  r_votes sc2 r p = const_map v S p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  r_votes sc2 r = const_map v S\n\ngoal (1 subgoal):\n 1. \\<And>a b y.\n       \\<lbrakk>(y, b) \\<in> opt_mru_step2 r dec_f; (a, y) \\<in> ts_ref_rel;\n        a \\<in> OMRU_inv1; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (a, y)\n                            \\<in> (\\<Union>r' Q S' v.\n\\<Union> (range (opt_mru_round r' Q S' v))) \\<and>\n                            (y, b) \\<in> ts_ref_rel", "from step0 step1"], ["proof (chain)\npicking this:\n  (sc0, sc1) \\<in> opt_mru_step0 r0 C\n  (sc1, sc2) \\<in> opt_mru_step1 r1 S v", "obtain Q where Q: \"S \\<noteq> {} \\<longrightarrow> opt_mru_guard (mru_vote sc0) Q v\""], ["proof (prove)\nusing this:\n  (sc0, sc1) \\<in> opt_mru_step0 r0 C\n  (sc1, sc2) \\<in> opt_mru_step1 r1 S v\n\ngoal (1 subgoal):\n 1. (\\<And>Q.\n        S \\<noteq> {} \\<longrightarrow>\n        opt_mru_guard (mru_vote sc0) Q v \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: opt_mru_step0_def opt_mru_step1_def)"], ["proof (state)\nthis:\n  S \\<noteq> {} \\<longrightarrow> opt_mru_guard (mru_vote sc0) Q v\n\ngoal (1 subgoal):\n 1. \\<And>a b y.\n       \\<lbrakk>(y, b) \\<in> opt_mru_step2 r dec_f; (a, y) \\<in> ts_ref_rel;\n        a \\<in> OMRU_inv1; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (a, y)\n                            \\<in> (\\<Union>r' Q S' v.\n\\<Union> (range (opt_mru_round r' Q S' v))) \\<and>\n                            (y, b) \\<in> ts_ref_rel", "define sa' where \"sa' = sa\\<lparr>\n      mru_vote := mru_vote sa ++ const_map (three_phase r, v) S\n      , next_round := Suc (three_phase r)\n      , decisions := decisions sa ++ dec_f\n    \\<rparr>\""], ["proof (state)\nthis:\n  sa' = sa\n  \\<lparr>mru_vote := mru_vote sa ++ const_map (three_phase r, v) S,\n     opt_mru_state.next_round := Suc (three_phase r),\n     opt_mru_state.decisions := opt_mru_state.decisions sa ++ dec_f\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>a b y.\n       \\<lbrakk>(y, b) \\<in> opt_mru_step2 r dec_f; (a, y) \\<in> ts_ref_rel;\n        a \\<in> OMRU_inv1; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (a, y)\n                            \\<in> (\\<Union>r' Q S' v.\n\\<Union> (range (opt_mru_round r' Q S' v))) \\<and>\n                            (y, b) \\<in> ts_ref_rel", "have guard_strengthening:\n    \"step2_d_guard dec_f (r_votes sc2 r) \\<longrightarrow> d_guard dec_f (const_map v S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. step2_d_guard dec_f (r_votes sc2 r) \\<longrightarrow>\n    d_guard dec_f (const_map v S)", "by(auto simp add: r_votes d_guard_def step2_d_guard_def locked_in_vf_def \n      quorum_for_def const_map_is_Some dom_const_map)"], ["proof (state)\nthis:\n  step2_d_guard dec_f (r_votes sc2 r) \\<longrightarrow>\n  d_guard dec_f (const_map v S)\n\ngoal (1 subgoal):\n 1. \\<And>a b y.\n       \\<lbrakk>(y, b) \\<in> opt_mru_step2 r dec_f; (a, y) \\<in> ts_ref_rel;\n        a \\<in> OMRU_inv1; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (a, y)\n                            \\<in> (\\<Union>r' Q S' v.\n\\<Union> (range (opt_mru_round r' Q S' v))) \\<and>\n                            (y, b) \\<in> ts_ref_rel", "have \"(sa, sa') \\<in> opt_mru_round (three_phase r) Q S v dec_f \\<and> (sa', sc3) \\<in> ts_ref_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sa, sa') \\<in> opt_mru_round (three_phase r) Q S v dec_f \\<and>\n    (sa', sc3) \\<in> ts_ref_rel", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (sa, sa') \\<in> opt_mru_round (three_phase r) Q S v dec_f\n 2. (sa', sc3) \\<in> ts_ref_rel", "show \"(sa', sc3) \\<in> ts_ref_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sa', sc3) \\<in> ts_ref_rel", "using r3_step R0 R1 R2 step0 step1 step2"], ["proof (prove)\nusing this:\n  three_step (opt_mru_state.next_round sc3) = 0\n  (sa, sc0) \\<in> three_step0_rel\n  (sa, sc1) \\<in> three_step1_rel\n  (sa, sc2) \\<in> three_step2_rel\n  (sc0, sc1) \\<in> opt_mru_step0 r0 C\n  (sc1, sc2) \\<in> opt_mru_step1 r1 S v\n  (sc2, sc3) \\<in> opt_mru_step2 r dec_f\n\ngoal (1 subgoal):\n 1. (sa', sc3) \\<in> ts_ref_rel", "by(auto simp add: ts_ref_rel_def three_step0_rel_def basic_rel_def opt_mru_step0_def \n        opt_mru_step1_def opt_mru_step2_def  sa'_def three_step_phase_Suc)"], ["proof (state)\nthis:\n  (sa', sc3) \\<in> ts_ref_rel\n\ngoal (1 subgoal):\n 1. (sa, sa') \\<in> opt_mru_round (three_phase r) Q S v dec_f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (sa, sa') \\<in> opt_mru_round (three_phase r) Q S v dec_f", "show \"(sa, sa') \\<in> opt_mru_round (three_phase r) Q S v dec_f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sa, sa') \\<in> opt_mru_round (three_phase r) Q S v dec_f", "using R0 r0_step step0 step1 step2 r0 r1 r2 r r_votes Q guard_strengthening"], ["proof (prove)\nusing this:\n  (sa, sc0) \\<in> three_step0_rel\n  three_step r0 = 0\n  (sc0, sc1) \\<in> opt_mru_step0 r0 C\n  (sc1, sc2) \\<in> opt_mru_step1 r1 S v\n  (sc2, sc3) \\<in> opt_mru_step2 r dec_f\n  r0 = opt_mru_state.next_round sc0\n  r1 = Suc r0\n  r1 = opt_mru_state.next_round sc1\n  r = opt_mru_state.next_round sc2\n  r = Suc r1\n  r_votes sc2 r = const_map v S\n  S \\<noteq> {} \\<longrightarrow> opt_mru_guard (mru_vote sc0) Q v\n  step2_d_guard dec_f (r_votes sc2 r) \\<longrightarrow>\n  d_guard dec_f (const_map v S)\n\ngoal (1 subgoal):\n 1. (sa, sa') \\<in> opt_mru_round (three_phase r) Q S v dec_f", "by(auto simp add: ts_ref_rel_defs opt_mru_round_def three_step_phase_Suc\n        opt_mru_step0_def opt_mru_step1_def opt_mru_step2_def sa'_def)"], ["proof (state)\nthis:\n  (sa, sa') \\<in> opt_mru_round (three_phase r) Q S v dec_f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (sa, sa') \\<in> opt_mru_round (three_phase r) Q S v dec_f \\<and>\n  (sa', sc3) \\<in> ts_ref_rel\n\ngoal (1 subgoal):\n 1. \\<And>a b y.\n       \\<lbrakk>(y, b) \\<in> opt_mru_step2 r dec_f; (a, y) \\<in> ts_ref_rel;\n        a \\<in> OMRU_inv1; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (a, y)\n                            \\<in> (\\<Union>r' Q S' v.\n\\<Union> (range (opt_mru_round r' Q S' v))) \\<and>\n                            (y, b) \\<in> ts_ref_rel", "thus \"\\<exists>y. (sa, y) \\<in> (\\<Union>r' Q S' v D'. opt_mru_round r' Q S' v D') \\<and> (y, sc3) \\<in> ts_ref_rel\""], ["proof (prove)\nusing this:\n  (sa, sa') \\<in> opt_mru_round (three_phase r) Q S v dec_f \\<and>\n  (sa', sc3) \\<in> ts_ref_rel\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       (sa, y)\n       \\<in> (\\<Union>r' Q S' v.\n                 \\<Union> (range (opt_mru_round r' Q S' v))) \\<and>\n       (y, sc3) \\<in> ts_ref_rel", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>y.\n     (sa, y)\n     \\<in> (\\<Union>r' Q S' v.\n               \\<Union> (range (opt_mru_round r' Q S' v))) \\<and>\n     (y, sc3) \\<in> ts_ref_rel\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ThreeStep_Coordinated_Refines:\n  \"PO_refines (ts_ref_rel \\<inter> OMRU_inv1 \\<times> UNIV) \n    mru_opt_TS ts_mru_TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PO_refines (ts_ref_rel \\<inter> OMRU_inv1 \\<times> UNIV) mru_opt_TS\n     ts_mru_TS", "proof(rule refine_using_invariants)"], ["proof (state)\ngoal (6 subgoals):\n 1. {ts_ref_rel \\<inter>\n     OMRU_inv1 \\<times>\n     UNIV} TS.trans mru_opt_TS, TS.trans ts_mru_TS {> ts_ref_rel}\n 2. {OMRU_inv1 \\<inter>\n     Domain\n      (ts_ref_rel \\<inter>\n       UNIV \\<times> UNIV)} TS.trans mru_opt_TS {> OMRU_inv1}\n 3. {UNIV \\<inter>\n     Range\n      (ts_ref_rel \\<inter>\n       OMRU_inv1 \\<times> UNIV)} TS.trans ts_mru_TS {> UNIV}\n 4. init ts_mru_TS \\<subseteq> ts_ref_rel `` init mru_opt_TS\n 5. init mru_opt_TS \\<subseteq> OMRU_inv1\n 6. init ts_mru_TS \\<subseteq> UNIV", "show \"init ts_mru_TS \\<subseteq> ts_ref_rel `` init mru_opt_TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init ts_mru_TS \\<subseteq> ts_ref_rel `` init mru_opt_TS", "by(auto simp add: ts_mru_TS_defs mru_opt_TS_defs ts_ref_rel_def three_step0_rel_def \n      three_step1_rel_def three_step2_rel_def basic_rel_def)"], ["proof (state)\nthis:\n  init ts_mru_TS \\<subseteq> ts_ref_rel `` init mru_opt_TS\n\ngoal (5 subgoals):\n 1. {ts_ref_rel \\<inter>\n     OMRU_inv1 \\<times>\n     UNIV} TS.trans mru_opt_TS, TS.trans ts_mru_TS {> ts_ref_rel}\n 2. {OMRU_inv1 \\<inter>\n     Domain\n      (ts_ref_rel \\<inter>\n       UNIV \\<times> UNIV)} TS.trans mru_opt_TS {> OMRU_inv1}\n 3. {UNIV \\<inter>\n     Range\n      (ts_ref_rel \\<inter>\n       OMRU_inv1 \\<times> UNIV)} TS.trans ts_mru_TS {> UNIV}\n 4. init mru_opt_TS \\<subseteq> OMRU_inv1\n 5. init ts_mru_TS \\<subseteq> UNIV", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. {ts_ref_rel \\<inter>\n     OMRU_inv1 \\<times>\n     UNIV} TS.trans mru_opt_TS, TS.trans ts_mru_TS {> ts_ref_rel}\n 2. {OMRU_inv1 \\<inter>\n     Domain\n      (ts_ref_rel \\<inter>\n       UNIV \\<times> UNIV)} TS.trans mru_opt_TS {> OMRU_inv1}\n 3. {UNIV \\<inter>\n     Range\n      (ts_ref_rel \\<inter>\n       OMRU_inv1 \\<times> UNIV)} TS.trans ts_mru_TS {> UNIV}\n 4. init mru_opt_TS \\<subseteq> OMRU_inv1\n 5. init ts_mru_TS \\<subseteq> UNIV", "show \n    \"{ts_ref_rel \\<inter> OMRU_inv1 \\<times> UNIV} TS.trans mru_opt_TS, \n      TS.trans (ts_mru_TS) {> ts_ref_rel}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {ts_ref_rel \\<inter>\n     OMRU_inv1 \\<times>\n     UNIV} TS.trans mru_opt_TS, TS.trans ts_mru_TS {> ts_ref_rel}", "apply(simp add: mru_opt_TS_defs ts_mru_TS_defs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x xa.\n        {ts_ref_rel \\<inter>\n         OMRU_inv1 \\<times>\n         UNIV} (\\<Union>x xa xb xc.\n                   \\<Union>\n                    (range\n                      (opt_mru_round x xa xb\n                        xc)))\\<^sup>=, opt_mru_step0 x\n  xa {> ts_ref_rel}) \\<and>\n    (\\<forall>x xa xb.\n        {ts_ref_rel \\<inter>\n         OMRU_inv1 \\<times>\n         UNIV} (\\<Union>x xa xb xc.\n                   \\<Union>\n                    (range\n                      (opt_mru_round x xa xb\n                        xc)))\\<^sup>=, opt_mru_step1 x xa\n  xb {> ts_ref_rel}) \\<and>\n    (\\<forall>x xa.\n        {ts_ref_rel \\<inter>\n         OMRU_inv1 \\<times>\n         UNIV} (\\<Union>x xa xb xc.\n                   \\<Union>\n                    (range\n                      (opt_mru_round x xa xb\n                        xc)))\\<^sup>=, opt_mru_step2 x\n  xa {> ts_ref_rel}) \\<and>\n    {ts_ref_rel \\<inter>\n     OMRU_inv1 \\<times>\n     UNIV} (\\<Union>x xa xb xc.\n               \\<Union>\n                (range\n                  (opt_mru_round x xa xb xc)))\\<^sup>=, Id {> ts_ref_rel}", "apply(auto simp add: ts_mru_trans_def intro!: step0_ref step1_ref step2_ref)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {ts_ref_rel \\<inter>\n   OMRU_inv1 \\<times>\n   UNIV} TS.trans mru_opt_TS, TS.trans ts_mru_TS {> ts_ref_rel}\n\ngoal (4 subgoals):\n 1. {OMRU_inv1 \\<inter>\n     Domain\n      (ts_ref_rel \\<inter>\n       UNIV \\<times> UNIV)} TS.trans mru_opt_TS {> OMRU_inv1}\n 2. {UNIV \\<inter>\n     Range\n      (ts_ref_rel \\<inter>\n       OMRU_inv1 \\<times> UNIV)} TS.trans ts_mru_TS {> UNIV}\n 3. init mru_opt_TS \\<subseteq> OMRU_inv1\n 4. init ts_mru_TS \\<subseteq> UNIV", "qed(auto intro!: OMRU_inv1_inductive)"], ["", "end"], ["", "end"]]}