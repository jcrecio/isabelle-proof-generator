{"file_name": "/home/qj213/afp-2021-10-22/thys/Consensus_Refined/MRU_Vote.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Consensus_Refined", "problem_names": ["lemma mru_vote_implies_safe:\n  assumes \n    inv4: \"s \\<in> SV_inv4\"\n    and inv1: \"s \\<in> Vinv1\"\n    and mru_vote: \"mru_guard s Q v\"\n    and is_Quorum: \"Q \\<in> Quorum\"\n  shows \"safe s (v_state.next_round s) v\""], "translations": [["", "lemma mru_vote_implies_safe:\n  assumes \n    inv4: \"s \\<in> SV_inv4\"\n    and inv1: \"s \\<in> Vinv1\"\n    and mru_vote: \"mru_guard s Q v\"\n    and is_Quorum: \"Q \\<in> Quorum\"\n  shows \"safe s (v_state.next_round s) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. safe s (next_round s) v", "using mru_vote"], ["proof (prove)\nusing this:\n  mru_guard s Q v\n\ngoal (1 subgoal):\n 1. safe s (next_round s) v", "proof(clarsimp simp add: mru_guard_def mru_of_set_def option_Max_by_def)\n  \\<comment> \\<open>The first case: some votes have been cast. We prove that the most recently used one is \n    safe.\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>vote_set (votes s) Q = {}; Q \\<in> Quorum\\<rbrakk>\n    \\<Longrightarrow> safe s (next_round s) v\n 2. \\<And>r.\n       \\<lbrakk>vote_set (votes s) Q \\<noteq> {}; Q \\<in> Quorum;\n        Max_by fst (vote_set (votes s) Q) = (r, v)\\<rbrakk>\n       \\<Longrightarrow> safe s (next_round s) v", "fix r"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>vote_set (votes s) Q = {}; Q \\<in> Quorum\\<rbrakk>\n    \\<Longrightarrow> safe s (next_round s) v\n 2. \\<And>r.\n       \\<lbrakk>vote_set (votes s) Q \\<noteq> {}; Q \\<in> Quorum;\n        Max_by fst (vote_set (votes s) Q) = (r, v)\\<rbrakk>\n       \\<Longrightarrow> safe s (next_round s) v", "assume\n    nempty: \"vote_set (votes s) Q \\<noteq> {}\" \n    and max: \"Max_by fst (vote_set (votes s) Q) = (r, v)\""], ["proof (state)\nthis:\n  vote_set (votes s) Q \\<noteq> {}\n  Max_by fst (vote_set (votes s) Q) = (r, v)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>vote_set (votes s) Q = {}; Q \\<in> Quorum\\<rbrakk>\n    \\<Longrightarrow> safe s (next_round s) v\n 2. \\<And>r.\n       \\<lbrakk>vote_set (votes s) Q \\<noteq> {}; Q \\<in> Quorum;\n        Max_by fst (vote_set (votes s) Q) = (r, v)\\<rbrakk>\n       \\<Longrightarrow> safe s (next_round s) v", "from Max_by_in[OF Vinv1_finite_vote_set[OF inv1] nempty] max"], ["proof (chain)\npicking this:\n  Max_by ?f (vote_set (votes s) Q) \\<in> vote_set (votes s) Q\n  Max_by fst (vote_set (votes s) Q) = (r, v)", "have in_votes: \"(r, v) \\<in> vote_set (votes s) Q\""], ["proof (prove)\nusing this:\n  Max_by ?f (vote_set (votes s) Q) \\<in> vote_set (votes s) Q\n  Max_by fst (vote_set (votes s) Q) = (r, v)\n\ngoal (1 subgoal):\n 1. (r, v) \\<in> vote_set (votes s) Q", "by metis"], ["proof (state)\nthis:\n  (r, v) \\<in> vote_set (votes s) Q\n\ngoal (2 subgoals):\n 1. \\<lbrakk>vote_set (votes s) Q = {}; Q \\<in> Quorum\\<rbrakk>\n    \\<Longrightarrow> safe s (next_round s) v\n 2. \\<And>r.\n       \\<lbrakk>vote_set (votes s) Q \\<noteq> {}; Q \\<in> Quorum;\n        Max_by fst (vote_set (votes s) Q) = (r, v)\\<rbrakk>\n       \\<Longrightarrow> safe s (next_round s) v", "have no_larger: \"\\<forall>a'\\<in>Q. \\<forall>r'>r. votes s r' a' = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a'\\<in>Q. \\<forall>r'>r. votes s r' a' = None", "proof(safe, rule ccontr, clarsimp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a' r' y.\n       \\<lbrakk>a' \\<in> Q; r < r'; votes s r' a' = Some y\\<rbrakk>\n       \\<Longrightarrow> False", "fix a' r' w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a' r' y.\n       \\<lbrakk>a' \\<in> Q; r < r'; votes s r' a' = Some y\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"a' \\<in> Q\"  \"votes s r' a' = Some w\" and gt: \"r' > r\""], ["proof (state)\nthis:\n  a' \\<in> Q\n  votes s r' a' = Some w\n  r < r'\n\ngoal (1 subgoal):\n 1. \\<And>a' r' y.\n       \\<lbrakk>a' \\<in> Q; r < r'; votes s r' a' = Some y\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"(r', w) \\<in> vote_set (votes s) Q\""], ["proof (prove)\nusing this:\n  a' \\<in> Q\n  votes s r' a' = Some w\n  r < r'\n\ngoal (1 subgoal):\n 1. (r', w) \\<in> vote_set (votes s) Q", "by(auto simp add: vote_set_def)"], ["proof (state)\nthis:\n  (r', w) \\<in> vote_set (votes s) Q\n\ngoal (1 subgoal):\n 1. \\<And>a' r' y.\n       \\<lbrakk>a' \\<in> Q; r < r'; votes s r' a' = Some y\\<rbrakk>\n       \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  (r', w) \\<in> vote_set (votes s) Q\n\ngoal (1 subgoal):\n 1. False", "using Max_by_ge[where f=fst, OF Vinv1_finite_vote_set[where Q=Q, OF inv1]] max gt"], ["proof (prove)\nusing this:\n  (r', w) \\<in> vote_set (votes s) Q\n  ?x \\<in> vote_set (votes s) Q \\<Longrightarrow>\n  fst ?x \\<le> fst (Max_by fst (vote_set (votes s) Q))\n  Max_by fst (vote_set (votes s) Q) = (r, v)\n  r < r'\n\ngoal (1 subgoal):\n 1. False", "by(clarsimp simp add: not_le[symmetric])"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>a'\\<in>Q. \\<forall>r'>r. votes s r' a' = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>vote_set (votes s) Q = {}; Q \\<in> Quorum\\<rbrakk>\n    \\<Longrightarrow> safe s (next_round s) v\n 2. \\<And>r.\n       \\<lbrakk>vote_set (votes s) Q \\<noteq> {}; Q \\<in> Quorum;\n        Max_by fst (vote_set (votes s) Q) = (r, v)\\<rbrakk>\n       \\<Longrightarrow> safe s (next_round s) v", "have \"safe s (Suc r) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. safe s (Suc r) v", "using inv4 in_votes and SV_inv4_def"], ["proof (prove)\nusing this:\n  s \\<in> SV_inv4\n  (r, v) \\<in> vote_set (votes s) Q\n  SV_inv4 =\n  {s. \\<forall>v a r.\n         votes s r a = Some v \\<longrightarrow> safe s (Suc r) v}\n\ngoal (1 subgoal):\n 1. safe s (Suc r) v", "by(clarsimp simp add: vote_set_def)"], ["proof (state)\nthis:\n  safe s (Suc r) v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>vote_set (votes s) Q = {}; Q \\<in> Quorum\\<rbrakk>\n    \\<Longrightarrow> safe s (next_round s) v\n 2. \\<And>r.\n       \\<lbrakk>vote_set (votes s) Q \\<noteq> {}; Q \\<in> Quorum;\n        Max_by fst (vote_set (votes s) Q) = (r, v)\\<rbrakk>\n       \\<Longrightarrow> safe s (next_round s) v", "thus \"safe s (v_state.next_round s) v\""], ["proof (prove)\nusing this:\n  safe s (Suc r) v\n\ngoal (1 subgoal):\n 1. safe s (next_round s) v", "using no_larger is_Quorum[THEN qintersect]"], ["proof (prove)\nusing this:\n  safe s (Suc r) v\n  \\<forall>a'\\<in>Q. \\<forall>r'>r. votes s r' a' = None\n  ?Q' \\<in> Quorum \\<Longrightarrow> Q \\<inter> ?Q' \\<noteq> {}\n\ngoal (1 subgoal):\n 1. safe s (next_round s) v", "apply(clarsimp simp add: safe_def quorum_for_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r' Qa w.\n       \\<lbrakk>\\<forall>r'<Suc r.\n                   \\<forall>Q w.\n                      Q \\<in> Quorum \\<and>\n                      (\\<forall>p\\<in>Q.\n                          votes s r' p = Some w) \\<longrightarrow>\n                      v = w;\n        \\<forall>a'\\<in>Q. \\<forall>r'>r. votes s r' a' = None;\n        \\<And>Q'.\n           Q' \\<in> Quorum \\<Longrightarrow> Q \\<inter> Q' \\<noteq> {};\n        r' < next_round s; Qa \\<in> Quorum;\n        \\<forall>p\\<in>Qa. votes s r' p = Some w\\<rbrakk>\n       \\<Longrightarrow> v = w", "by (metis IntE all_not_in_conv not_less_eq option.distinct(1))"], ["proof (state)\nthis:\n  safe s (next_round s) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>vote_set (votes s) Q = {}; Q \\<in> Quorum\\<rbrakk>\n    \\<Longrightarrow> safe s (next_round s) v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>vote_set (votes s) Q = {}; Q \\<in> Quorum\\<rbrakk>\n    \\<Longrightarrow> safe s (next_round s) v", "assume \"vote_set (votes s) Q = {}\""], ["proof (state)\nthis:\n  vote_set (votes s) Q = {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>vote_set (votes s) Q = {}; Q \\<in> Quorum\\<rbrakk>\n    \\<Longrightarrow> safe s (next_round s) v", "thus \"safe s (v_state.next_round s) v\""], ["proof (prove)\nusing this:\n  vote_set (votes s) Q = {}\n\ngoal (1 subgoal):\n 1. safe s (next_round s) v", "using is_Quorum[THEN qintersect]"], ["proof (prove)\nusing this:\n  vote_set (votes s) Q = {}\n  ?Q' \\<in> Quorum \\<Longrightarrow> Q \\<inter> ?Q' \\<noteq> {}\n\ngoal (1 subgoal):\n 1. safe s (next_round s) v", "by(force simp add: vote_set_def safe_def quorum_for_def)"], ["proof (state)\nthis:\n  safe s (next_round s) v\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* context quorum_process *)"], ["", "end"]]}