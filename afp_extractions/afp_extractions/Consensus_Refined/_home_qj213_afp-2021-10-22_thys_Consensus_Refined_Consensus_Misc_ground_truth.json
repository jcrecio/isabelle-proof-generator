{"file_name": "/home/qj213/afp-2021-10-22/thys/Consensus_Refined/Consensus_Misc.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Consensus_Refined", "problem_names": ["lemma div_Suc:\n  \"Suc m div n = (if Suc m mod n = 0 then Suc (m div n) else m div n)\" (is \"_ = ?rhs\")", "lemma option_expand':\n  \"\\<lbrakk>(option = None) = (option' = None); \\<And>x y. \\<lbrakk>option = Some x; option' = Some y\\<rbrakk> \\<Longrightarrow> x = y\\<rbrakk> \\<Longrightarrow> \n    option = option'\"", "lemma Max_by_dest:\n  assumes \"finite A\" and \"A \\<noteq> {}\"\n  shows \"Max_by f A \\<in> A \\<and> f (Max_by f A) = Max (f ` A)\" (is \"?P (Max_by f A)\")", "lemma Max_by_in:\n  assumes \"finite A\" and \"A \\<noteq> {}\"\n  shows \"Max_by f A \\<in> A\"", "lemma Max_by_ge:\n  assumes \"finite A\" \"x \\<in> A\"\n  shows \"f x \\<le> f (Max_by f A)\"", "lemma finite_UN_D:\n  \"finite (\\<Union>S) \\<Longrightarrow> \\<forall>A \\<in> S. finite A\"", "lemma Max_by_eqI:\n  assumes\n    fin: \"finite A\"\n    and \"\\<And>y. y \\<in> A \\<Longrightarrow> cmp_f y \\<le> cmp_f x\" \n    and in_X: \"x \\<in> A\"\n    and inj: \"inj_on cmp_f A\"\n  shows \"Max_by cmp_f A = x\"", "lemma Max_by_Union_distrib:\n  \"\\<lbrakk> finite A; A = \\<Union>S; S \\<noteq> {}; {} \\<notin> S; inj_on cmp_f A \\<rbrakk> \\<Longrightarrow> \n    Max_by cmp_f A = Max_by cmp_f (Max_by cmp_f ` S)\"", "lemma Max_by_UNION_distrib:\n  \"\\<lbrakk>finite A; A = (\\<Union>x\\<in>S. f x); S \\<noteq> {}; {} \\<notin> f ` S; inj_on cmp_f A\\<rbrakk> \\<Longrightarrow> \n    Max_by cmp_f A = Max_by cmp_f (Max_by cmp_f ` (f ` S))\"", "lemma Max_by_eta:\n  \"Max_by f = (\\<lambda>S. (SOME x. x \\<in> S \\<and> f x = Max (f ` S)))\"", "lemma Max_is_Max_by_id:\n  \"\\<lbrakk> finite S; S \\<noteq> {} \\<rbrakk> \\<Longrightarrow> Max S = Max_by id S \"", "lemma map_graph_mem[simp]:\n  \"((x, y) \\<in> map_graph f) = (f x = Some y)\"", "lemma finite_fun_graph:\n  \"finite A \\<Longrightarrow> finite (fun_graph f \\<inter> (A \\<times> UNIV))\"", "lemma finite_map_graph:\n  \"finite A \\<Longrightarrow> finite (map_graph f \\<inter> (A \\<times> UNIV))\"", "lemma finite_dom_finite_map_graph:\n  \"finite (dom f) \\<Longrightarrow> finite (map_graph f)\"", "lemma ran_map_addD:\n  \"x \\<in> ran (m ++ f) \\<Longrightarrow> x \\<in> ran m \\<or> x \\<in> ran f\"", "lemma const_map_empty[simp]:\n  \"const_map v {} = Map.empty\"", "lemma const_map_ran[simp]: \"x \\<in> ran (const_map v S) = (S \\<noteq> {} \\<and> x = v)\"", "lemma const_map_is_None:\n  \"(const_map y A  x = None) = (x \\<notin> A)\"", "lemma const_map_is_Some:\n  \"(const_map y A x = Some z) = (z = y \\<and> x \\<in> A)\"", "lemma const_map_in_set:\n  \"x \\<in> A \\<Longrightarrow> const_map v A x = Some v\"", "lemma const_map_notin_set:\n  \"x \\<notin> A \\<Longrightarrow> const_map v A x = None\"", "lemma dom_const_map:\n  \"dom (const_map v S) = S\"", "lemma inj_on_fst_vote_set:\n  \"inj_on fst (vote_set v_hist {p})\"", "lemma finite_vote_set:\n  assumes \"\\<forall>r'\\<ge>(r :: nat). v_hist r' = Map.empty\"\n    \"finite S\"\n  shows \"finite (vote_set v_hist S)\"", "lemma process_mru_is_None:\n  \"(process_mru v_f a = None) = (vote_set v_f {a} = {})\"", "lemma process_mru_is_Some:\n  \"(process_mru v_f a = Some rv) = (vote_set v_f {a} \\<noteq> {} \\<and> rv = Max_by fst (vote_set v_f {a}))\"", "lemma vote_set_upd:\n  \"vote_set (v_hist(r := v_f)) {p} = \n      (if p \\<in> dom v_f \n        then insert (r, the (v_f p))\n        else id\n      )\n      (if v_hist r p = None\n        then vote_set v_hist {p}\n        else vote_set v_hist {p} - {(r, the (v_hist r p))}\n      )\n  \"", "lemma finite_vote_set_upd:\n  \" finite (vote_set v_hist {a}) \\<Longrightarrow> \n    finite (vote_set (v_hist(r := v_f)) {a})\"", "lemma vote_setD:\n  \"rv \\<in> vote_set v_f {a} \\<Longrightarrow> v_f (fst rv) a = Some (snd rv)\"", "lemma process_mru_new_votes:\n  assumes\n    \"\\<forall>r' \\<ge> (r :: nat). v_hist r' = Map.empty\"\n  shows \n    \"process_mru (v_hist(r := v_f)) = \n    (process_mru v_hist ++ (\\<lambda>p. map_option (Pair r) (v_f p)))\""], "translations": [["", "lemma div_Suc:\n  \"Suc m div n = (if Suc m mod n = 0 then Suc (m div n) else m div n)\" (is \"_ = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc m div n = (if Suc m mod n = 0 then Suc (m div n) else m div n)", "proof (cases \"Suc m mod n = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Suc m mod n = 0 \\<Longrightarrow>\n    Suc m div n = (if Suc m mod n = 0 then Suc (m div n) else m div n)\n 2. Suc m mod n \\<noteq> 0 \\<Longrightarrow>\n    Suc m div n = (if Suc m mod n = 0 then Suc (m div n) else m div n)", "case True"], ["proof (state)\nthis:\n  Suc m mod n = 0\n\ngoal (2 subgoals):\n 1. Suc m mod n = 0 \\<Longrightarrow>\n    Suc m div n = (if Suc m mod n = 0 then Suc (m div n) else m div n)\n 2. Suc m mod n \\<noteq> 0 \\<Longrightarrow>\n    Suc m div n = (if Suc m mod n = 0 then Suc (m div n) else m div n)", "then"], ["proof (chain)\npicking this:\n  Suc m mod n = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  Suc m mod n = 0\n\ngoal (1 subgoal):\n 1. Suc m div n = (if Suc m mod n = 0 then Suc (m div n) else m div n)", "by simp (metis Zero_not_Suc diff_Suc_Suc div_geq minus_mod_eq_mult_div mod_Suc mod_less neq0_conv nonzero_mult_div_cancel_left)"], ["proof (state)\nthis:\n  Suc m div n = (if Suc m mod n = 0 then Suc (m div n) else m div n)\n\ngoal (1 subgoal):\n 1. Suc m mod n \\<noteq> 0 \\<Longrightarrow>\n    Suc m div n = (if Suc m mod n = 0 then Suc (m div n) else m div n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Suc m mod n \\<noteq> 0 \\<Longrightarrow>\n    Suc m div n = (if Suc m mod n = 0 then Suc (m div n) else m div n)", "case False"], ["proof (state)\nthis:\n  Suc m mod n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. Suc m mod n \\<noteq> 0 \\<Longrightarrow>\n    Suc m div n = (if Suc m mod n = 0 then Suc (m div n) else m div n)", "then"], ["proof (chain)\npicking this:\n  Suc m mod n \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  Suc m mod n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. Suc m div n = (if Suc m mod n = 0 then Suc (m div n) else m div n)", "by simp (metis diff_Suc_Suc div_eq_0_iff minus_mod_eq_mult_div mod_Suc neq0_conv nonzero_mult_div_cancel_left)"], ["proof (state)\nthis:\n  Suc m div n = (if Suc m mod n = 0 then Suc (m div n) else m div n)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition flip where\n  flip_def: \"flip f \\<equiv> \\<lambda>x y. f y x\""], ["", "lemma option_expand':\n  \"\\<lbrakk>(option = None) = (option' = None); \\<And>x y. \\<lbrakk>option = Some x; option' = Some y\\<rbrakk> \\<Longrightarrow> x = y\\<rbrakk> \\<Longrightarrow> \n    option = option'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(option = None) = (option' = None);\n     \\<And>x y.\n        \\<lbrakk>option = Some x; option' = Some y\\<rbrakk>\n        \\<Longrightarrow> x = y\\<rbrakk>\n    \\<Longrightarrow> option = option'", "by(rule option.expand, auto)"], ["", "(*********************************)"], ["", "subsection \\<open>Argmax\\<close>"], ["", "definition Max_by :: \"('a \\<Rightarrow> 'b :: linorder) \\<Rightarrow> 'a set \\<Rightarrow> 'a\" where\n  \"Max_by f S = (SOME x. x \\<in> S \\<and> f x = Max (f ` S))\""], ["", "lemma Max_by_dest:\n  assumes \"finite A\" and \"A \\<noteq> {}\"\n  shows \"Max_by f A \\<in> A \\<and> f (Max_by f A) = Max (f ` A)\" (is \"?P (Max_by f A)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. Max_by f A \\<in> A \\<and> f (Max_by f A) = Max (f ` A)", "proof(simp only: Max_by_def some_eq_ex[where P=\"?P\"])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> A \\<and> f x = Max (f ` A)", "from assms"], ["proof (chain)\npicking this:\n  finite A\n  A \\<noteq> {}", "have \"finite (f ` A)\" \"f ` A \\<noteq> {}\""], ["proof (prove)\nusing this:\n  finite A\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. finite (f ` A) &&& f ` A \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  finite (f ` A)\n  f ` A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> A \\<and> f x = Max (f ` A)", "from Max_in[OF this]"], ["proof (chain)\npicking this:\n  Max (f ` A) \\<in> f ` A", "show \"\\<exists>x. x \\<in> A \\<and> f x = Max (f ` A)\""], ["proof (prove)\nusing this:\n  Max (f ` A) \\<in> f ` A\n\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> A \\<and> f x = Max (f ` A)", "by (metis image_iff)"], ["proof (state)\nthis:\n  \\<exists>x. x \\<in> A \\<and> f x = Max (f ` A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Max_by_in:\n  assumes \"finite A\" and \"A \\<noteq> {}\"\n  shows \"Max_by f A \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Max_by f A \\<in> A", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Max_by f A \\<in> A", "by(rule Max_by_dest[THEN conjunct1])"], ["", "lemma Max_by_ge:\n  assumes \"finite A\" \"x \\<in> A\"\n  shows \"f x \\<le> f (Max_by f A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x \\<le> f (Max_by f A)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. f x \\<le> f (Max_by f A)", "from assms(1)"], ["proof (chain)\npicking this:\n  finite A", "have fin_image: \"finite (f ` A)\""], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. finite (f ` A)", "by simp"], ["proof (state)\nthis:\n  finite (f ` A)\n\ngoal (1 subgoal):\n 1. f x \\<le> f (Max_by f A)", "from assms(2)"], ["proof (chain)\npicking this:\n  x \\<in> A", "have non_empty: \"A \\<noteq> {}\""], ["proof (prove)\nusing this:\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. A \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. f x \\<le> f (Max_by f A)", "have \"f x \\<in> f ` A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x \\<in> f ` A", "using assms(2)"], ["proof (prove)\nusing this:\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. f x \\<in> f ` A", "by simp"], ["proof (state)\nthis:\n  f x \\<in> f ` A\n\ngoal (1 subgoal):\n 1. f x \\<le> f (Max_by f A)", "from Max_ge[OF fin_image this] and Max_by_dest[OF assms(1) non_empty, of f]"], ["proof (chain)\npicking this:\n  f x \\<le> Max (f ` A)\n  Max_by f A \\<in> A \\<and> f (Max_by f A) = Max (f ` A)", "show ?thesis"], ["proof (prove)\nusing this:\n  f x \\<le> Max (f ` A)\n  Max_by f A \\<in> A \\<and> f (Max_by f A) = Max (f ` A)\n\ngoal (1 subgoal):\n 1. f x \\<le> f (Max_by f A)", "by(simp)"], ["proof (state)\nthis:\n  f x \\<le> f (Max_by f A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finite_UN_D:\n  \"finite (\\<Union>S) \\<Longrightarrow> \\<forall>A \\<in> S. finite A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (\\<Union> S) \\<Longrightarrow> \\<forall>A\\<in>S. finite A", "by (metis Union_upper finite_subset)"], ["", "lemma Max_by_eqI:\n  assumes\n    fin: \"finite A\"\n    and \"\\<And>y. y \\<in> A \\<Longrightarrow> cmp_f y \\<le> cmp_f x\" \n    and in_X: \"x \\<in> A\"\n    and inj: \"inj_on cmp_f A\"\n  shows \"Max_by cmp_f A = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Max_by cmp_f A = x", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. Max_by cmp_f A = x", "have in_M: \"Max_by cmp_f A \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Max_by cmp_f A \\<in> A", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  ?y \\<in> A \\<Longrightarrow> cmp_f ?y \\<le> cmp_f x\n  x \\<in> A\n  inj_on cmp_f A\n\ngoal (1 subgoal):\n 1. Max_by cmp_f A \\<in> A", "by(auto intro!: Max_by_in)"], ["proof (state)\nthis:\n  Max_by cmp_f A \\<in> A\n\ngoal (1 subgoal):\n 1. Max_by cmp_f A = x", "hence \"cmp_f (Max_by cmp_f A) \\<le> cmp_f x\""], ["proof (prove)\nusing this:\n  Max_by cmp_f A \\<in> A\n\ngoal (1 subgoal):\n 1. cmp_f (Max_by cmp_f A) \\<le> cmp_f x", "using assms"], ["proof (prove)\nusing this:\n  Max_by cmp_f A \\<in> A\n  finite A\n  ?y \\<in> A \\<Longrightarrow> cmp_f ?y \\<le> cmp_f x\n  x \\<in> A\n  inj_on cmp_f A\n\ngoal (1 subgoal):\n 1. cmp_f (Max_by cmp_f A) \\<le> cmp_f x", "by auto"], ["proof (state)\nthis:\n  cmp_f (Max_by cmp_f A) \\<le> cmp_f x\n\ngoal (1 subgoal):\n 1. Max_by cmp_f A = x", "also"], ["proof (state)\nthis:\n  cmp_f (Max_by cmp_f A) \\<le> cmp_f x\n\ngoal (1 subgoal):\n 1. Max_by cmp_f A = x", "have \"cmp_f x \\<le> cmp_f (Max_by cmp_f A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cmp_f x \\<le> cmp_f (Max_by cmp_f A)", "by (intro Max_by_ge assms)"], ["proof (state)\nthis:\n  cmp_f x \\<le> cmp_f (Max_by cmp_f A)\n\ngoal (1 subgoal):\n 1. Max_by cmp_f A = x", "finally"], ["proof (chain)\npicking this:\n  cmp_f (Max_by cmp_f A) = cmp_f x", "show ?thesis"], ["proof (prove)\nusing this:\n  cmp_f (Max_by cmp_f A) = cmp_f x\n\ngoal (1 subgoal):\n 1. Max_by cmp_f A = x", "using inj in_M in_X"], ["proof (prove)\nusing this:\n  cmp_f (Max_by cmp_f A) = cmp_f x\n  inj_on cmp_f A\n  Max_by cmp_f A \\<in> A\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. Max_by cmp_f A = x", "by(auto simp add: inj_on_def)"], ["proof (state)\nthis:\n  Max_by cmp_f A = x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Max_by_Union_distrib:\n  \"\\<lbrakk> finite A; A = \\<Union>S; S \\<noteq> {}; {} \\<notin> S; inj_on cmp_f A \\<rbrakk> \\<Longrightarrow> \n    Max_by cmp_f A = Max_by cmp_f (Max_by cmp_f ` S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> Max_by cmp_f A = Max_by cmp_f (Max_by cmp_f ` S)", "proof(rule Max_by_eqI, assumption)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n        inj_on cmp_f A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> cmp_f y\n                         \\<le> cmp_f (Max_by cmp_f (Max_by cmp_f ` S))\n 2. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> Max_by cmp_f (Max_by cmp_f ` S) \\<in> A\n 3. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> inj_on cmp_f A", "fix y"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n        inj_on cmp_f A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> cmp_f y\n                         \\<le> cmp_f (Max_by cmp_f (Max_by cmp_f ` S))\n 2. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> Max_by cmp_f (Max_by cmp_f ` S) \\<in> A\n 3. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> inj_on cmp_f A", "assume assms: \"finite A\" \"A = \\<Union>S\" \"{} \\<notin> S\" \"y \\<in> A\""], ["proof (state)\nthis:\n  finite A\n  A = \\<Union> S\n  {} \\<notin> S\n  y \\<in> A\n\ngoal (3 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n        inj_on cmp_f A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> cmp_f y\n                         \\<le> cmp_f (Max_by cmp_f (Max_by cmp_f ` S))\n 2. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> Max_by cmp_f (Max_by cmp_f ` S) \\<in> A\n 3. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> inj_on cmp_f A", "then"], ["proof (chain)\npicking this:\n  finite A\n  A = \\<Union> S\n  {} \\<notin> S\n  y \\<in> A", "obtain B where B_def: \"B \\<in> S\" \"y \\<in> B\""], ["proof (prove)\nusing this:\n  finite A\n  A = \\<Union> S\n  {} \\<notin> S\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<And>B.\n        \\<lbrakk>B \\<in> S; y \\<in> B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  B \\<in> S\n  y \\<in> B\n\ngoal (3 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n        inj_on cmp_f A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> cmp_f y\n                         \\<le> cmp_f (Max_by cmp_f (Max_by cmp_f ` S))\n 2. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> Max_by cmp_f (Max_by cmp_f ` S) \\<in> A\n 3. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> inj_on cmp_f A", "hence \"cmp_f y \\<le> cmp_f (Max_by cmp_f B)\""], ["proof (prove)\nusing this:\n  B \\<in> S\n  y \\<in> B\n\ngoal (1 subgoal):\n 1. cmp_f y \\<le> cmp_f (Max_by cmp_f B)", "using assms"], ["proof (prove)\nusing this:\n  B \\<in> S\n  y \\<in> B\n  finite A\n  A = \\<Union> S\n  {} \\<notin> S\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. cmp_f y \\<le> cmp_f (Max_by cmp_f B)", "by (metis Max_by_ge finite_UN_D)"], ["proof (state)\nthis:\n  cmp_f y \\<le> cmp_f (Max_by cmp_f B)\n\ngoal (3 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n        inj_on cmp_f A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> cmp_f y\n                         \\<le> cmp_f (Max_by cmp_f (Max_by cmp_f ` S))\n 2. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> Max_by cmp_f (Max_by cmp_f ` S) \\<in> A\n 3. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> inj_on cmp_f A", "also"], ["proof (state)\nthis:\n  cmp_f y \\<le> cmp_f (Max_by cmp_f B)\n\ngoal (3 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n        inj_on cmp_f A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> cmp_f y\n                         \\<le> cmp_f (Max_by cmp_f (Max_by cmp_f ` S))\n 2. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> Max_by cmp_f (Max_by cmp_f ` S) \\<in> A\n 3. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> inj_on cmp_f A", "have \"... \\<le> cmp_f (Max_by cmp_f (Max_by cmp_f ` S))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cmp_f (Max_by cmp_f B) \\<le> cmp_f (Max_by cmp_f (Max_by cmp_f ` S))", "using B_def(1) assms"], ["proof (prove)\nusing this:\n  B \\<in> S\n  finite A\n  A = \\<Union> S\n  {} \\<notin> S\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. cmp_f (Max_by cmp_f B) \\<le> cmp_f (Max_by cmp_f (Max_by cmp_f ` S))", "by (metis Max_by_ge finite_UnionD finite_imageI imageI)"], ["proof (state)\nthis:\n  cmp_f (Max_by cmp_f B) \\<le> cmp_f (Max_by cmp_f (Max_by cmp_f ` S))\n\ngoal (3 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n        inj_on cmp_f A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> cmp_f y\n                         \\<le> cmp_f (Max_by cmp_f (Max_by cmp_f ` S))\n 2. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> Max_by cmp_f (Max_by cmp_f ` S) \\<in> A\n 3. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> inj_on cmp_f A", "finally"], ["proof (chain)\npicking this:\n  cmp_f y \\<le> cmp_f (Max_by cmp_f (Max_by cmp_f ` S))", "show \"cmp_f y \\<le> cmp_f (Max_by cmp_f (Max_by cmp_f ` S))\""], ["proof (prove)\nusing this:\n  cmp_f y \\<le> cmp_f (Max_by cmp_f (Max_by cmp_f ` S))\n\ngoal (1 subgoal):\n 1. cmp_f y \\<le> cmp_f (Max_by cmp_f (Max_by cmp_f ` S))", "."], ["proof (state)\nthis:\n  cmp_f y \\<le> cmp_f (Max_by cmp_f (Max_by cmp_f ` S))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> Max_by cmp_f (Max_by cmp_f ` S) \\<in> A\n 2. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> inj_on cmp_f A", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> Max_by cmp_f (Max_by cmp_f ` S) \\<in> A\n 2. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> inj_on cmp_f A", "assume assms: \"finite A\" \"A = \\<Union>S\" \"{} \\<notin> S\" \"S \\<noteq> {}\""], ["proof (state)\nthis:\n  finite A\n  A = \\<Union> S\n  {} \\<notin> S\n  S \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> Max_by cmp_f (Max_by cmp_f ` S) \\<in> A\n 2. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> inj_on cmp_f A", "hence \"Max_by cmp_f ` S \\<noteq> {}\" \"finite (Max_by cmp_f ` S)\""], ["proof (prove)\nusing this:\n  finite A\n  A = \\<Union> S\n  {} \\<notin> S\n  S \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Max_by cmp_f ` S \\<noteq> {} &&& finite (Max_by cmp_f ` S)", "apply (metis image_is_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (Max_by cmp_f ` S)", "by (metis assms(1) assms(2) finite_UnionD finite_imageI)"], ["proof (state)\nthis:\n  Max_by cmp_f ` S \\<noteq> {}\n  finite (Max_by cmp_f ` S)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> Max_by cmp_f (Max_by cmp_f ` S) \\<in> A\n 2. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> inj_on cmp_f A", "hence \"Max_by cmp_f (Max_by cmp_f ` S) \\<in> (Max_by cmp_f ` S)\""], ["proof (prove)\nusing this:\n  Max_by cmp_f ` S \\<noteq> {}\n  finite (Max_by cmp_f ` S)\n\ngoal (1 subgoal):\n 1. Max_by cmp_f (Max_by cmp_f ` S) \\<in> Max_by cmp_f ` S", "by(blast intro!: Max_by_in)"], ["proof (state)\nthis:\n  Max_by cmp_f (Max_by cmp_f ` S) \\<in> Max_by cmp_f ` S\n\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> Max_by cmp_f (Max_by cmp_f ` S) \\<in> A\n 2. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> inj_on cmp_f A", "also"], ["proof (state)\nthis:\n  Max_by cmp_f (Max_by cmp_f ` S) \\<in> Max_by cmp_f ` S\n\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> Max_by cmp_f (Max_by cmp_f ` S) \\<in> A\n 2. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> inj_on cmp_f A", "have \"(Max_by cmp_f ` S) \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Max_by cmp_f ` S \\<subseteq> A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Max_by cmp_f ` S \\<subseteq> A", "have f1: \"\\<forall>v0 v1. (\\<not> finite v0 \\<or> v0 = {}) \\<or> Max_by (v1::'a \\<Rightarrow> 'b) v0 \\<in> v0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v0 v1. (infinite v0 \\<or> v0 = {}) \\<or> Max_by v1 v0 \\<in> v0", "using Max_by_in"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite ?A; ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Max_by ?f ?A \\<in> ?A\n\ngoal (1 subgoal):\n 1. \\<forall>v0 v1. (infinite v0 \\<or> v0 = {}) \\<or> Max_by v1 v0 \\<in> v0", "by blast"], ["proof (state)\nthis:\n  \\<forall>v0 v1. (infinite v0 \\<or> v0 = {}) \\<or> Max_by v1 v0 \\<in> v0\n\ngoal (1 subgoal):\n 1. Max_by cmp_f ` S \\<subseteq> A", "have \"\\<forall>v1. v1 \\<notin> S \\<or> finite v1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v1. v1 \\<notin> S \\<or> finite v1", "using assms(1) assms(2) finite_UN_D"], ["proof (prove)\nusing this:\n  finite A\n  A = \\<Union> S\n  finite (\\<Union> ?S) \\<Longrightarrow> \\<forall>A\\<in>?S. finite A\n\ngoal (1 subgoal):\n 1. \\<forall>v1. v1 \\<notin> S \\<or> finite v1", "by blast"], ["proof (state)\nthis:\n  \\<forall>v1. v1 \\<notin> S \\<or> finite v1\n\ngoal (1 subgoal):\n 1. Max_by cmp_f ` S \\<subseteq> A", "then"], ["proof (chain)\npicking this:\n  \\<forall>v1. v1 \\<notin> S \\<or> finite v1", "obtain v2_13 :: \"'a set set \\<Rightarrow> 'a \\<Rightarrow> 'a set\" where \"Max_by cmp_f ` S \\<subseteq> \\<Union>S\""], ["proof (prove)\nusing this:\n  \\<forall>v1. v1 \\<notin> S \\<or> finite v1\n\ngoal (1 subgoal):\n 1. (Max_by cmp_f ` S \\<subseteq> \\<Union> S \\<Longrightarrow>\n     thesis) \\<Longrightarrow>\n    thesis", "using f1 assms(3)"], ["proof (prove)\nusing this:\n  \\<forall>v1. v1 \\<notin> S \\<or> finite v1\n  \\<forall>v0 v1. (infinite v0 \\<or> v0 = {}) \\<or> Max_by v1 v0 \\<in> v0\n  {} \\<notin> S\n\ngoal (1 subgoal):\n 1. (Max_by cmp_f ` S \\<subseteq> \\<Union> S \\<Longrightarrow>\n     thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Max_by cmp_f ` S \\<subseteq> \\<Union> S\n\ngoal (1 subgoal):\n 1. Max_by cmp_f ` S \\<subseteq> A", "thus \"Max_by cmp_f ` S \\<subseteq> A\""], ["proof (prove)\nusing this:\n  Max_by cmp_f ` S \\<subseteq> \\<Union> S\n\ngoal (1 subgoal):\n 1. Max_by cmp_f ` S \\<subseteq> A", "using assms(2)"], ["proof (prove)\nusing this:\n  Max_by cmp_f ` S \\<subseteq> \\<Union> S\n  A = \\<Union> S\n\ngoal (1 subgoal):\n 1. Max_by cmp_f ` S \\<subseteq> A", "by presburger"], ["proof (state)\nthis:\n  Max_by cmp_f ` S \\<subseteq> A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Max_by cmp_f ` S \\<subseteq> A\n\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> Max_by cmp_f (Max_by cmp_f ` S) \\<in> A\n 2. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> inj_on cmp_f A", "finally"], ["proof (chain)\npicking this:\n  Max_by cmp_f (Max_by cmp_f ` S) \\<in> A", "show \"Max_by cmp_f (Max_by cmp_f ` S) \\<in> A\""], ["proof (prove)\nusing this:\n  Max_by cmp_f (Max_by cmp_f ` S) \\<in> A\n\ngoal (1 subgoal):\n 1. Max_by cmp_f (Max_by cmp_f ` S) \\<in> A", "."], ["proof (state)\nthis:\n  Max_by cmp_f (Max_by cmp_f ` S) \\<in> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A = \\<Union> S; S \\<noteq> {}; {} \\<notin> S;\n     inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> inj_on cmp_f A", "qed"], ["", "lemma Max_by_UNION_distrib:\n  \"\\<lbrakk>finite A; A = (\\<Union>x\\<in>S. f x); S \\<noteq> {}; {} \\<notin> f ` S; inj_on cmp_f A\\<rbrakk> \\<Longrightarrow> \n    Max_by cmp_f A = Max_by cmp_f (Max_by cmp_f ` (f ` S))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A = \\<Union> (f ` S); S \\<noteq> {};\n     {} \\<notin> f ` S; inj_on cmp_f A\\<rbrakk>\n    \\<Longrightarrow> Max_by cmp_f A = Max_by cmp_f (Max_by cmp_f ` f ` S)", "by(force intro!: Max_by_Union_distrib)"], ["", "lemma Max_by_eta:\n  \"Max_by f = (\\<lambda>S. (SOME x. x \\<in> S \\<and> f x = Max (f ` S)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Max_by f = (\\<lambda>S. SOME x. x \\<in> S \\<and> f x = Max (f ` S))", "by(auto simp add: Max_by_def)"], ["", "lemma Max_is_Max_by_id:\n  \"\\<lbrakk> finite S; S \\<noteq> {} \\<rbrakk> \\<Longrightarrow> Max S = Max_by id S \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite S; S \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max S = Max_by id S", "apply(clarsimp simp add: Max_by_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite S; S \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max S = (SOME x. x \\<in> S \\<and> x = Max S)", "by (metis (mono_tags, lifting) Max_in someI_ex)"], ["", "definition option_Max_by :: \"('a \\<Rightarrow> 'b :: linorder) \\<Rightarrow> 'a set \\<Rightarrow> 'a option\" where\n  \"option_Max_by cmp_f A \\<equiv> if A = {} then None else Some (Max_by cmp_f A)\""], ["", "(*********************************)"], ["", "subsection \\<open>Function and map graphs\\<close>"], ["", "definition fun_graph where\n  \"fun_graph f = {(x, f x)|x. True}\""], ["", "definition map_graph :: \"('a, 'b)map \\<Rightarrow> ('a \\<times> 'b) set\" where\n  \"map_graph f = {(x, y)|x y. (x, Some y) \\<in> fun_graph f}\""], ["", "lemma map_graph_mem[simp]:\n  \"((x, y) \\<in> map_graph f) = (f x = Some y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x, y) \\<in> map_graph f) = (f x = Some y)", "by(auto simp add: dom_def map_graph_def fun_graph_def)"], ["", "lemma finite_fun_graph:\n  \"finite A \\<Longrightarrow> finite (fun_graph f \\<inter> (A \\<times> UNIV))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite A \\<Longrightarrow> finite (fun_graph f \\<inter> A \\<times> UNIV)", "apply(rule bij_betw_finite[where A=A and f=\"\\<lambda>x. (x, f x)\", THEN iffD1])"], ["proof (prove)\ngoal (2 subgoals):\n 1. finite A \\<Longrightarrow>\n    bij_betw (\\<lambda>x. (x, f x)) A (fun_graph f \\<inter> A \\<times> UNIV)\n 2. finite A \\<Longrightarrow> finite A", "by(auto simp add: fun_graph_def bij_betw_def inj_on_def)"], ["", "lemma finite_map_graph:\n  \"finite A \\<Longrightarrow> finite (map_graph f \\<inter> (A \\<times> UNIV))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite A \\<Longrightarrow> finite (map_graph f \\<inter> A \\<times> UNIV)", "by(force simp add: map_graph_def\n    dest!: finite_fun_graph[where f=f]\n    intro!: finite_surj[where A=\"fun_graph f \\<inter> (A \\<times> UNIV)\" and f=\"apsnd the\"] \n  )"], ["", "lemma finite_dom_finite_map_graph:\n  \"finite (dom f) \\<Longrightarrow> finite (map_graph f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (dom f) \\<Longrightarrow> finite (map_graph f)", "apply(simp add: dom_def map_graph_def fun_graph_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {a. \\<exists>y. f a = Some y} \\<Longrightarrow>\n    finite {(x, y). Some y = f x}", "apply(erule finite_surj[where f=\"\\<lambda>x. (x, the (f x))\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x, y). Some y = f x}\n    \\<subseteq> (\\<lambda>x. (x, the (f x))) ` {a. \\<exists>y. f a = Some y}", "apply(clarsimp simp add: image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       Some b = f a \\<Longrightarrow>\n       (\\<exists>y. f a = Some y) \\<and> b = the (f a)", "by (metis option.sel)"], ["", "(*******************************************************************)"], ["", "lemma ran_map_addD:\n  \"x \\<in> ran (m ++ f) \\<Longrightarrow> x \\<in> ran m \\<or> x \\<in> ran f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> ran (m ++ f) \\<Longrightarrow> x \\<in> ran m \\<or> x \\<in> ran f", "by(auto simp add: ran_def)"], ["", "subsection \\<open>Constant maps\\<close>"], ["", "definition const_map :: \"'v \\<Rightarrow> 'k set \\<Rightarrow> ('k, 'v)map\" where\n  \"const_map v S \\<equiv> (\\<lambda>_. Some v) |` S\""], ["", "lemma const_map_empty[simp]:\n  \"const_map v {} = Map.empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. const_map v {} = Map.empty", "by(auto simp add: const_map_def)"], ["", "lemma const_map_ran[simp]: \"x \\<in> ran (const_map v S) = (S \\<noteq> {} \\<and> x = v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> ran (const_map v S)) = (S \\<noteq> {} \\<and> x = v)", "by(auto simp add: const_map_def ran_def restrict_map_def)"], ["", "lemma const_map_is_None:\n  \"(const_map y A  x = None) = (x \\<notin> A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (const_map y A x = None) = (x \\<notin> A)", "by(auto simp add: const_map_def restrict_map_def)"], ["", "lemma const_map_is_Some:\n  \"(const_map y A x = Some z) = (z = y \\<and> x \\<in> A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (const_map y A x = Some z) = (z = y \\<and> x \\<in> A)", "by(auto simp add: const_map_def restrict_map_def)"], ["", "lemma const_map_in_set:\n  \"x \\<in> A \\<Longrightarrow> const_map v A x = Some v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> A \\<Longrightarrow> const_map v A x = Some v", "by(auto simp add: const_map_def)"], ["", "lemma const_map_notin_set:\n  \"x \\<notin> A \\<Longrightarrow> const_map v A x = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> A \\<Longrightarrow> const_map v A x = None", "by(auto simp add: const_map_def)"], ["", "lemma dom_const_map:\n  \"dom (const_map v S) = S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (const_map v S) = S", "by(auto simp add: const_map_def)"], ["", "(*******************************************************************)"], ["", "subsection \\<open>Votes with maximum timestamps.\\<close>"], ["", "(*******************************************************************)"], ["", "definition vote_set :: \"('round \\<Rightarrow> ('process, 'val)map) \\<Rightarrow> 'process set \\<Rightarrow> ('round \\<times> 'val)set\" where\n  \"vote_set vs Q \\<equiv> {(r, v)|a r v. ((r, a), v) \\<in> map_graph (case_prod vs) \\<and> a \\<in> Q}\""], ["", "lemma inj_on_fst_vote_set:\n  \"inj_on fst (vote_set v_hist {p})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on fst (vote_set v_hist {p})", "by(clarsimp simp add: inj_on_def vote_set_def)"], ["", "lemma finite_vote_set:\n  assumes \"\\<forall>r'\\<ge>(r :: nat). v_hist r' = Map.empty\"\n    \"finite S\"\n  shows \"finite (vote_set v_hist S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (vote_set v_hist S)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (vote_set v_hist S)", "define vs where \"vs = {((r, a), v)|r a v. ((r, a), v) \\<in> map_graph (case_prod v_hist) \\<and> a \\<in> S}\""], ["proof (state)\nthis:\n  vs =\n  {((r, a), v) |r a v.\n   ((r, a), v) \\<in> map_graph (\\<lambda>(x, y). v_hist x y) \\<and>\n   a \\<in> S}\n\ngoal (1 subgoal):\n 1. finite (vote_set v_hist S)", "have \"vs\n      = (\\<Union>p\\<in>S. ((\\<lambda>(r, v). ((r, p), v)) ` (map_graph (\\<lambda>r. v_hist r p))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vs =\n    (\\<Union>p\\<in>S.\n        (\\<lambda>(r, v). ((r, p), v)) ` map_graph (\\<lambda>r. v_hist r p))", "by(auto simp add: map_graph_def fun_graph_def vs_def)"], ["proof (state)\nthis:\n  vs =\n  (\\<Union>p\\<in>S.\n      (\\<lambda>(r, v). ((r, p), v)) ` map_graph (\\<lambda>r. v_hist r p))\n\ngoal (1 subgoal):\n 1. finite (vote_set v_hist S)", "also"], ["proof (state)\nthis:\n  vs =\n  (\\<Union>p\\<in>S.\n      (\\<lambda>(r, v). ((r, p), v)) ` map_graph (\\<lambda>r. v_hist r p))\n\ngoal (1 subgoal):\n 1. finite (vote_set v_hist S)", "have \"... \\<le> (\\<Union>p\\<in>S. (\\<lambda>r. ((r, p), the (v_hist r p))) ` {0..<r})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>p\\<in>S.\n        (\\<lambda>(r, v). ((r, p), v)) ` map_graph (\\<lambda>r. v_hist r p))\n    \\<subseteq> (\\<Union>p\\<in>S.\n                    (\\<lambda>r. ((r, p), the (v_hist r p))) ` {0..<r})", "using assms(1)"], ["proof (prove)\nusing this:\n  \\<forall>r'\\<ge>r. v_hist r' = Map.empty\n\ngoal (1 subgoal):\n 1. (\\<Union>p\\<in>S.\n        (\\<lambda>(r, v). ((r, p), v)) ` map_graph (\\<lambda>r. v_hist r p))\n    \\<subseteq> (\\<Union>p\\<in>S.\n                    (\\<lambda>r. ((r, p), the (v_hist r p))) ` {0..<r})", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x aa bb.\n       \\<lbrakk>\\<forall>r'\\<ge>r. v_hist r' = Map.empty; x \\<in> S;\n        v_hist aa x = Some bb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>S.\n                            ((aa, x), bb)\n                            \\<in> (\\<lambda>r.\n((r, xa), the (v_hist r xa))) `\n                                  {0..<r}", "apply (auto simp add: map_graph_def fun_graph_def image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x aa bb.\n       \\<lbrakk>\\<forall>r'\\<ge>r. v_hist r' = Map.empty; x \\<in> S;\n        v_hist aa x = Some bb\\<rbrakk>\n       \\<Longrightarrow> aa < r", "apply (metis le_less_linear option.distinct(1))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<Union>p\\<in>S.\n      (\\<lambda>(r, v). ((r, p), v)) ` map_graph (\\<lambda>r. v_hist r p))\n  \\<subseteq> (\\<Union>p\\<in>S.\n                  (\\<lambda>r. ((r, p), the (v_hist r p))) ` {0..<r})\n\ngoal (1 subgoal):\n 1. finite (vote_set v_hist S)", "also"], ["proof (state)\nthis:\n  (\\<Union>p\\<in>S.\n      (\\<lambda>(r, v). ((r, p), v)) ` map_graph (\\<lambda>r. v_hist r p))\n  \\<subseteq> (\\<Union>p\\<in>S.\n                  (\\<lambda>r. ((r, p), the (v_hist r p))) ` {0..<r})\n\ngoal (1 subgoal):\n 1. finite (vote_set v_hist S)", "note I=finite_subset[OF calculation]"], ["proof (state)\nthis:\n  finite\n   (\\<Union>p\\<in>S.\n       (\\<lambda>r. ((r, p), the (v_hist r p))) ` {0..<r}) \\<Longrightarrow>\n  finite vs\n\ngoal (1 subgoal):\n 1. finite (vote_set v_hist S)", "have \"finite vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite vs", "by(auto intro: I assms(2) nat_seg_image_imp_finite[where n=r])"], ["proof (state)\nthis:\n  finite vs\n\ngoal (1 subgoal):\n 1. finite (vote_set v_hist S)", "thus ?thesis"], ["proof (prove)\nusing this:\n  finite vs\n\ngoal (1 subgoal):\n 1. finite (vote_set v_hist S)", "apply(clarsimp simp add: map_graph_def fun_graph_def vote_set_def vs_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     {((r, a), v) |r a v.\n      Some v = v_hist r a \\<and> a \\<in> S} \\<Longrightarrow>\n    finite\n     {uu_.\n      \\<exists>a r v.\n         uu_ = (r, v) \\<and> Some v = v_hist r a \\<and> a \\<in> S}", "apply(erule finite_surj[where f=\"\\<lambda>((r, a), v). (r, v)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {uu_.\n     \\<exists>a r v.\n        uu_ = (r, v) \\<and> Some v = v_hist r a \\<and> a \\<in> S}\n    \\<subseteq> (\\<lambda>((r, a), v). (r, v)) `\n                {((r, a), v) |r a v. Some v = v_hist r a \\<and> a \\<in> S}", "by(force simp add: image_def)"], ["proof (state)\nthis:\n  finite (vote_set v_hist S)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition mru_of_set \n  :: \"('round :: linorder \\<Rightarrow> ('process, 'val)map) \\<Rightarrow> ('process set, 'round \\<times> 'val)map\" where\n  \"mru_of_set vs \\<equiv> \\<lambda>Q. option_Max_by fst (vote_set vs Q)\""], ["", "definition process_mru \n  :: \"('round :: linorder \\<Rightarrow> ('process, 'val)map) \\<Rightarrow> ('process, 'round \\<times> 'val)map\" where\n  \"process_mru vs \\<equiv> \\<lambda>a. mru_of_set vs {a}\""], ["", "lemma process_mru_is_None:\n  \"(process_mru v_f a = None) = (vote_set v_f {a} = {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (process_mru v_f a = None) = (vote_set v_f {a} = {})", "by(auto simp add: process_mru_def mru_of_set_def option_Max_by_def)"], ["", "lemma process_mru_is_Some:\n  \"(process_mru v_f a = Some rv) = (vote_set v_f {a} \\<noteq> {} \\<and> rv = Max_by fst (vote_set v_f {a}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (process_mru v_f a = Some rv) =\n    (vote_set v_f {a} \\<noteq> {} \\<and> rv = Max_by fst (vote_set v_f {a}))", "by(auto simp add: process_mru_def mru_of_set_def option_Max_by_def)"], ["", "lemma vote_set_upd:\n  \"vote_set (v_hist(r := v_f)) {p} = \n      (if p \\<in> dom v_f \n        then insert (r, the (v_f p))\n        else id\n      )\n      (if v_hist r p = None\n        then vote_set v_hist {p}\n        else vote_set v_hist {p} - {(r, the (v_hist r p))}\n      )\n  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. vote_set (v_hist(r := v_f)) {p} =\n    (if p \\<in> dom v_f then insert (r, the (v_f p)) else id)\n     (if v_hist r p = None then vote_set v_hist {p}\n      else vote_set v_hist {p} - {(r, the (v_hist r p))})", "by(auto simp add: vote_set_def const_map_is_Some split: if_split_asm)"], ["", "lemma finite_vote_set_upd:\n  \" finite (vote_set v_hist {a}) \\<Longrightarrow> \n    finite (vote_set (v_hist(r := v_f)) {a})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (vote_set v_hist {a}) \\<Longrightarrow>\n    finite (vote_set (v_hist(r := v_f)) {a})", "by(simp add: vote_set_upd)"], ["", "lemma vote_setD:\n  \"rv \\<in> vote_set v_f {a} \\<Longrightarrow> v_f (fst rv) a = Some (snd rv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rv \\<in> vote_set v_f {a} \\<Longrightarrow>\n    v_f (fst rv) a = Some (snd rv)", "by(auto simp add: vote_set_def)"], ["", "lemma process_mru_new_votes:\n  assumes\n    \"\\<forall>r' \\<ge> (r :: nat). v_hist r' = Map.empty\"\n  shows \n    \"process_mru (v_hist(r := v_f)) = \n    (process_mru v_hist ++ (\\<lambda>p. map_option (Pair r) (v_f p)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. process_mru (v_hist(r := v_f)) =\n    process_mru v_hist ++ (\\<lambda>p. map_option (Pair r) (v_f p))", "proof(rule ext, rule option_expand')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       (process_mru (v_hist(r := v_f)) x = None) =\n       ((process_mru v_hist ++ (\\<lambda>p. map_option (Pair r) (v_f p)))\n         x =\n        None)\n 2. \\<And>x xa y.\n       \\<lbrakk>process_mru (v_hist(r := v_f)) x = Some xa;\n        (process_mru v_hist ++ (\\<lambda>p. map_option (Pair r) (v_f p)))\n         x =\n        Some y\\<rbrakk>\n       \\<Longrightarrow> xa = y", "fix p"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       (process_mru (v_hist(r := v_f)) x = None) =\n       ((process_mru v_hist ++ (\\<lambda>p. map_option (Pair r) (v_f p)))\n         x =\n        None)\n 2. \\<And>x xa y.\n       \\<lbrakk>process_mru (v_hist(r := v_f)) x = Some xa;\n        (process_mru v_hist ++ (\\<lambda>p. map_option (Pair r) (v_f p)))\n         x =\n        Some y\\<rbrakk>\n       \\<Longrightarrow> xa = y", "show  \n    \"(process_mru (v_hist(r := v_f)) p = None) =\n    ((process_mru v_hist ++ (\\<lambda>p. map_option (Pair r) (v_f p))) p = None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (process_mru (v_hist(r := v_f)) p = None) =\n    ((process_mru v_hist ++ (\\<lambda>p. map_option (Pair r) (v_f p))) p =\n     None)", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>r'\\<ge>r. v_hist r' = Map.empty\n\ngoal (1 subgoal):\n 1. (process_mru (v_hist(r := v_f)) p = None) =\n    ((process_mru v_hist ++ (\\<lambda>p. map_option (Pair r) (v_f p))) p =\n     None)", "by(force simp add: vote_set_def restrict_map_def  const_map_is_None process_mru_is_None)"], ["proof (state)\nthis:\n  (process_mru (v_hist(r := v_f)) p = None) =\n  ((process_mru v_hist ++ (\\<lambda>p. map_option (Pair r) (v_f p))) p =\n   None)\n\ngoal (1 subgoal):\n 1. \\<And>x xa y.\n       \\<lbrakk>process_mru (v_hist(r := v_f)) x = Some xa;\n        (process_mru v_hist ++ (\\<lambda>p. map_option (Pair r) (v_f p)))\n         x =\n        Some y\\<rbrakk>\n       \\<Longrightarrow> xa = y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa y.\n       \\<lbrakk>process_mru (v_hist(r := v_f)) x = Some xa;\n        (process_mru v_hist ++ (\\<lambda>p. map_option (Pair r) (v_f p)))\n         x =\n        Some y\\<rbrakk>\n       \\<Longrightarrow> xa = y", "fix p rv rv'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa y.\n       \\<lbrakk>process_mru (v_hist(r := v_f)) x = Some xa;\n        (process_mru v_hist ++ (\\<lambda>p. map_option (Pair r) (v_f p)))\n         x =\n        Some y\\<rbrakk>\n       \\<Longrightarrow> xa = y", "assume eqs:\n    \"process_mru (v_hist(r := v_f)) p = Some rv\"\n    \"(process_mru v_hist ++ (\\<lambda>p. map_option (Pair r) (v_f p))) p = Some rv'\""], ["proof (state)\nthis:\n  process_mru (v_hist(r := v_f)) p = Some rv\n  (process_mru v_hist ++ (\\<lambda>p. map_option (Pair r) (v_f p))) p =\n  Some rv'\n\ngoal (1 subgoal):\n 1. \\<And>x xa y.\n       \\<lbrakk>process_mru (v_hist(r := v_f)) x = Some xa;\n        (process_mru v_hist ++ (\\<lambda>p. map_option (Pair r) (v_f p)))\n         x =\n        Some y\\<rbrakk>\n       \\<Longrightarrow> xa = y", "moreover"], ["proof (state)\nthis:\n  process_mru (v_hist(r := v_f)) p = Some rv\n  (process_mru v_hist ++ (\\<lambda>p. map_option (Pair r) (v_f p))) p =\n  Some rv'\n\ngoal (1 subgoal):\n 1. \\<And>x xa y.\n       \\<lbrakk>process_mru (v_hist(r := v_f)) x = Some xa;\n        (process_mru v_hist ++ (\\<lambda>p. map_option (Pair r) (v_f p)))\n         x =\n        Some y\\<rbrakk>\n       \\<Longrightarrow> xa = y", "have \"v_hist (r) p = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v_hist r p = None", "using assms(1)"], ["proof (prove)\nusing this:\n  \\<forall>r'\\<ge>r. v_hist r' = Map.empty\n\ngoal (1 subgoal):\n 1. v_hist r p = None", "by(auto)"], ["proof (state)\nthis:\n  v_hist r p = None\n\ngoal (1 subgoal):\n 1. \\<And>x xa y.\n       \\<lbrakk>process_mru (v_hist(r := v_f)) x = Some xa;\n        (process_mru v_hist ++ (\\<lambda>p. map_option (Pair r) (v_f p)))\n         x =\n        Some y\\<rbrakk>\n       \\<Longrightarrow> xa = y", "ultimately"], ["proof (chain)\npicking this:\n  process_mru (v_hist(r := v_f)) p = Some rv\n  (process_mru v_hist ++ (\\<lambda>p. map_option (Pair r) (v_f p))) p =\n  Some rv'\n  v_hist r p = None", "show \"rv = rv'\""], ["proof (prove)\nusing this:\n  process_mru (v_hist(r := v_f)) p = Some rv\n  (process_mru v_hist ++ (\\<lambda>p. map_option (Pair r) (v_f p))) p =\n  Some rv'\n  v_hist r p = None\n\ngoal (1 subgoal):\n 1. rv = rv'", "using eqs assms"], ["proof (prove)\nusing this:\n  process_mru (v_hist(r := v_f)) p = Some rv\n  (process_mru v_hist ++ (\\<lambda>p. map_option (Pair r) (v_f p))) p =\n  Some rv'\n  v_hist r p = None\n  process_mru (v_hist(r := v_f)) p = Some rv\n  (process_mru v_hist ++ (\\<lambda>p. map_option (Pair r) (v_f p))) p =\n  Some rv'\n  \\<forall>r'\\<ge>r. v_hist r' = Map.empty\n\ngoal (1 subgoal):\n 1. rv = rv'", "by(auto simp add: map_add_Some_iff const_map_is_Some const_map_is_None \n      process_mru_is_Some vote_set_upd dest!: vote_setD intro!: Max_by_eqI\n      finite_vote_set[OF assms]\n      intro: ccontr inj_on_fst_vote_set)"], ["proof (state)\nthis:\n  rv = rv'\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}