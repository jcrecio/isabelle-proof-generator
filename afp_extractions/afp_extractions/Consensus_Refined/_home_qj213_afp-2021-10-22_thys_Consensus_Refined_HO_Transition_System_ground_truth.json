{"file_name": "/home/qj213/afp-2021-10-22/thys/Consensus_Refined/HO_Transition_System.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Consensus_Refined", "problem_names": ["lemma CHO_trans_alt:\n  \"CHO_trans A HOs SHOs coords = CSHO_trans_alt (sendMsg A) (CnextState A) HOs SHOs coords\"", "lemma SHOmsgVectors_get_msgs:\n  \"SHOmsgVectors A r p cfg HOp SHOp = get_msgs (sendMsg A r) cfg (K HOp) (K SHOp) p\"", "lemma get_msgs_K:\n  \"get_msgs snd_f cfg (K (HOs r p)) (K (SHOs r p)) p\n  = get_msgs snd_f cfg (HOs r) (SHOs r) p\"", "lemma CSHORun_get_msgs:\n  \"CSHORun (A ::  ('proc, 'pst, 'msg) CHOAlgorithm) rho HOs SHOs coords = (\n     CHOinitConfig A (rho 0) (coords 0)\n   \\<and> (\\<forall>r. \\<exists>\\<mu>. \n    (\\<forall>p.\n      \\<mu> p \\<in> get_msgs (sendMsg A r) (rho r) (HOs r) (SHOs r) p\n      \\<and> CnextState A r p (rho r p) (\\<mu> p) (coords (Suc r) p) (rho (Suc r) p))))\"", "lemmas CSHORun_step = CSHORun_get_msgs[THEN iffD1, THEN conjunct2]", "lemma get_msgs_dom:\n  \"msgs \\<in> get_msgs send s HOs SHOs p \\<Longrightarrow> dom msgs = HOs p\"", "lemma get_msgs_benign:\n  \"get_msgs snd_f cfg HOs HOs p = { (Some o (\\<lambda>q. (snd_f q p (cfg q)))) |` (HOs p)}\""], "translations": [["", "lemma CHO_trans_alt:\n  \"CHO_trans A HOs SHOs coords = CSHO_trans_alt (sendMsg A) (CnextState A) HOs SHOs coords\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CHO_trans A HOs SHOs coords =\n    CSHO_trans_alt (sendMsg A) (CnextState A) HOs SHOs coords", "apply(rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. CHO_trans A HOs SHOs coords\n    \\<subseteq> CSHO_trans_alt (sendMsg A) (CnextState A) HOs SHOs coords\n 2. CSHO_trans_alt (sendMsg A) (CnextState A) HOs SHOs coords\n    \\<subseteq> CHO_trans A HOs SHOs coords", "apply(force simp add: CHO_trans_def CSHO_trans_alt_def CSHOnextConfig_def SHOmsgVectors_def \n    get_msgs_def restrict_map_def map_add_def choice_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. CSHO_trans_alt (sendMsg A) (CnextState A) HOs SHOs coords\n    \\<subseteq> CHO_trans A HOs SHOs coords", "apply(force simp add: CHO_trans_def CSHO_trans_alt_def CSHOnextConfig_def SHOmsgVectors_def \n    get_msgs_def restrict_map_def map_add_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition K where\n  \"K y \\<equiv> \\<lambda>x. y\""], ["", "lemma SHOmsgVectors_get_msgs:\n  \"SHOmsgVectors A r p cfg HOp SHOp = get_msgs (sendMsg A r) cfg (K HOp) (K SHOp) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SHOmsgVectors A r p cfg HOp SHOp =\n    get_msgs (sendMsg A r) cfg (K HOp) (K SHOp) p", "by(auto simp add: SHOmsgVectors_def get_msgs_def K_def)"], ["", "lemma get_msgs_K:\n  \"get_msgs snd_f cfg (K (HOs r p)) (K (SHOs r p)) p\n  = get_msgs snd_f cfg (HOs r) (SHOs r) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. get_msgs snd_f cfg (K (HOs r p)) (K (SHOs r p)) p =\n    get_msgs snd_f cfg (HOs r) (SHOs r) p", "by(auto simp add: get_msgs_def K_def)"], ["", "lemma CSHORun_get_msgs:\n  \"CSHORun (A ::  ('proc, 'pst, 'msg) CHOAlgorithm) rho HOs SHOs coords = (\n     CHOinitConfig A (rho 0) (coords 0)\n   \\<and> (\\<forall>r. \\<exists>\\<mu>. \n    (\\<forall>p.\n      \\<mu> p \\<in> get_msgs (sendMsg A r) (rho r) (HOs r) (SHOs r) p\n      \\<and> CnextState A r p (rho r p) (\\<mu> p) (coords (Suc r) p) (rho (Suc r) p))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CSHORun A rho HOs SHOs coords =\n    (CHOinitConfig A (rho 0) (coords 0) \\<and>\n     (\\<forall>r.\n         \\<exists>\\<mu>.\n            \\<forall>p.\n               \\<mu> p\n               \\<in> get_msgs (sendMsg A r) (rho r) (HOs r) (SHOs r)\n                      p \\<and>\n               CnextState A r p (rho r p) (\\<mu> p) (coords (Suc r) p)\n                (rho (Suc r) p)))", "by(auto simp add: CSHORun_def CSHOnextConfig_def SHOmsgVectors_get_msgs nextState_def get_msgs_K\n     Bex_def choice_iff)"], ["", "lemmas CSHORun_step = CSHORun_get_msgs[THEN iffD1, THEN conjunct2]"], ["", "lemma get_msgs_dom:\n  \"msgs \\<in> get_msgs send s HOs SHOs p \\<Longrightarrow> dom msgs = HOs p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs \\<in> get_msgs send s HOs SHOs p \\<Longrightarrow> dom msgs = HOs p", "by(auto simp add: get_msgs_def)"], ["", "lemma get_msgs_benign:\n  \"get_msgs snd_f cfg HOs HOs p = { (Some o (\\<lambda>q. (snd_f q p (cfg q)))) |` (HOs p)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. get_msgs snd_f cfg HOs HOs p =\n    {(Some \\<circ> (\\<lambda>q. snd_f q p (cfg q))) |` HOs p}", "by(auto simp add: get_msgs_def restrict_map_def)"], ["", "end"]]}