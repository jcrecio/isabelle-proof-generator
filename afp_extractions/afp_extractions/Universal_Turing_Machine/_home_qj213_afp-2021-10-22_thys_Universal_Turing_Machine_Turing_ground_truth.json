{"file_name": "/home/qj213/afp-2021-10-22/thys/Universal_Turing_Machine/Turing.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Universal_Turing_Machine", "problem_names": ["lemma nth_of_map [simp]:\n  shows \"nth_of (map f p) n = (case (nth_of p n) of None \\<Rightarrow> None | Some x \\<Rightarrow> Some (f x))\"", "lemma fetch_Nil [simp]:\n  shows \"fetch [] s b = (Nop, 0)\"", "lemma step_red [simp]: \n  shows \"steps c p (Suc n) = step (steps c p n) p\"", "lemma steps_add [simp]: \n  shows \"steps c p (m + n) = steps (steps c p m) p n\"", "lemma step_0 [simp]: \n  shows \"step (0, (l, r)) p = (0, (l, r))\"", "lemma steps_0 [simp]: \n  shows \"steps (0, (l, r)) p n = (0, (l, r))\"", "lemma is_final_eq: \n  shows \"is_final (s, tp) = (s = 0)\"", "lemma is_finalI [intro]:\n  shows \"is_final (0, tp)\"", "lemma after_is_final:\n  assumes \"is_final c\"\n  shows \"is_final (steps c p n)\"", "lemma is_final:\n  assumes a: \"is_final (steps c p n1)\"\n    and b: \"n1 \\<le> n2\"\n  shows \"is_final (steps c p n2)\"", "lemma not_is_final:\n  assumes a: \"\\<not> is_final (steps c p n1)\"\n    and b: \"n2 \\<le> n1\"\n  shows \"\\<not> is_final (steps c p n2)\"", "lemma before_final: \n  assumes \"steps0 (1, tp) A n = (0, tp')\"\n  shows \"\\<exists> n'. \\<not> is_final (steps0 (1, tp) A n') \\<and> steps0 (1, tp) A (Suc n') = (0, tp')\"", "lemma least_steps: \n  assumes \"steps0 (1, tp) A n = (0, tp')\"\n  shows \"\\<exists> n'. (\\<forall>n'' < n'. \\<not> is_final (steps0 (1, tp) A n'')) \\<and> \n               (\\<forall>n'' \\<ge> n'. is_final (steps0 (1, tp) A n''))\"", "lemma hd_repeat_cases:\n  \"P (hd (a \\<up> m @ r)) \\<longleftrightarrow> (m = 0 \\<longrightarrow> P (hd r)) \\<and> (\\<forall>nat. m = Suc nat \\<longrightarrow> P a)\"", "lemma length_shift [simp]: \n  shows \"length (shift p n) = length p\"", "lemma length_adjust [simp]: \n  shows \"length (adjust p n) = length p\"", "lemma tm_comp_length:\n  shows \"length (A |+| B) = length A + length B\"", "lemma tm_comp_wf[intro]: \n  \"\\<lbrakk>tm_wf (A, 0); tm_wf (B, 0)\\<rbrakk> \\<Longrightarrow> tm_wf (A |+| B, 0)\"", "lemma tm_comp_step: \n  assumes unfinal: \"\\<not> is_final (step0 c A)\"\n  shows \"step0 c (A |+| B) = step0 c A\"", "lemma tm_comp_steps:  \n  assumes \"\\<not> is_final (steps0 c A n)\" \n  shows \"steps0 c (A |+| B) n = steps0 c A n\"", "lemma tm_comp_fetch_in_A:\n  assumes h1: \"fetch A s x = (a, 0)\"\n    and h2: \"s \\<le> length A div 2\" \n    and h3: \"s \\<noteq> 0\"\n  shows \"fetch (A |+| B) s x = (a, Suc (length A div 2))\"", "lemma tm_comp_exec_after_first:\n  assumes h1: \"\\<not> is_final c\" \n    and h2: \"step0 c A = (0, tp)\"\n    and h3: \"fst c \\<le> length A div 2\"\n  shows \"step0 c (A |+| B) = (Suc (length A div 2), tp)\"", "lemma step_in_range: \n  assumes h1: \"\\<not> is_final (step0 c A)\"\n    and h2: \"tm_wf (A, 0)\"\n  shows \"fst (step0 c A) \\<le> length A div 2\"", "lemma steps_in_range: \n  assumes h1: \"\\<not> is_final (steps0 (1, tp) A stp)\"\n    and h2: \"tm_wf (A, 0)\"\n  shows \"fst (steps0 (1, tp) A stp) \\<le> length A div 2\"", "lemma tm_comp_next: \n  assumes a_ht: \"steps0 (1, tp) A n = (0, tp')\"\n    and a_wf: \"tm_wf (A, 0)\"\n  obtains n' where \"steps0 (1, tp) (A |+| B) n' = (Suc (length A div 2), tp')\"", "lemma tm_comp_fetch_second_zero:\n  assumes h1: \"fetch B s x = (a, 0)\"\n    and hs: \"tm_wf (A, 0)\" \"s \\<noteq> 0\"\n  shows \"fetch (A |+| B) (s + (length A div 2)) x = (a, 0)\"", "lemma tm_comp_fetch_second_inst:\n  assumes h1: \"fetch B sa x = (a, s)\"\n    and hs: \"tm_wf (A, 0)\" \"sa \\<noteq> 0\" \"s \\<noteq> 0\"\n  shows \"fetch (A |+| B) (sa + length A div 2) x = (a, s + length A div 2)\"", "lemma tm_comp_second:\n  assumes a_wf: \"tm_wf (A, 0)\"\n    and steps: \"steps0 (1, l, r) B stp = (s', l', r')\"\n  shows \"steps0 (Suc (length A div 2), l, r)  (A |+| B) stp \n    = (if s' = 0 then 0 else s' + length A div 2, l', r')\"", "lemma tm_comp_final:\n  assumes \"tm_wf (A, 0)\"  \n    and \"steps0 (1, l, r) B stp = (0, l', r')\"\n  shows \"steps0 (Suc (length A div 2), l, r)  (A |+| B) stp = (0, l', r')\""], "translations": [["", "lemma nth_of_map [simp]:\n  shows \"nth_of (map f p) n = (case (nth_of p n) of None \\<Rightarrow> None | Some x \\<Rightarrow> Some (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nth_of (map f p) n =\n    (case nth_of p n of None \\<Rightarrow> None\n     | Some x \\<Rightarrow> Some (f x))", "by simp"], ["", "fun \n  fetch :: \"instr list \\<Rightarrow> state \\<Rightarrow> cell \\<Rightarrow> instr\"\n  where\n    \"fetch p 0 b = (Nop, 0)\"\n  | \"fetch p (Suc s) Bk = \n     (case nth_of p (2 * s) of\n        Some i \\<Rightarrow> i\n      | None \\<Rightarrow> (Nop, 0))\"\n  |\"fetch p (Suc s) Oc = \n     (case nth_of p ((2 * s) + 1) of\n         Some i \\<Rightarrow> i\n       | None \\<Rightarrow> (Nop, 0))\""], ["", "lemma fetch_Nil [simp]:\n  shows \"fetch [] s b = (Nop, 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fetch [] s b = (Nop, 0)", "by (cases s,force) (cases b;force)"], ["", "fun \n  update :: \"action \\<Rightarrow> tape \\<Rightarrow> tape\"\n  where \n    \"update W0 (l, r) = (l, Bk # (tl r))\" \n  | \"update W1 (l, r) = (l, Oc # (tl r))\"\n  | \"update L (l, r) = (if l = [] then ([], Bk # r) else (tl l, (hd l) # r))\" \n  | \"update R (l, r) = (if r = [] then (Bk # l, []) else ((hd r) # l, tl r))\" \n  | \"update Nop (l, r) = (l, r)\""], ["", "abbreviation \n  \"read r == if (r = []) then Bk else hd r\""], ["", "fun step :: \"config \\<Rightarrow> tprog \\<Rightarrow> config\"\n  where \n    \"step (s, l, r) (p, off) = \n     (let (a, s') = fetch p (s - off) (read r) in (s', update a (l, r)))\""], ["", "abbreviation\n  \"step0 c p \\<equiv> step c (p, 0)\""], ["", "fun steps :: \"config \\<Rightarrow> tprog \\<Rightarrow> nat \\<Rightarrow> config\"\n  where\n    \"steps c p 0 = c\" |\n    \"steps c p (Suc n) = steps (step c p) p n\""], ["", "abbreviation\n  \"steps0 c p n \\<equiv> steps c (p, 0) n\""], ["", "lemma step_red [simp]: \n  shows \"steps c p (Suc n) = step (steps c p n) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. steps c p (Suc n) = step (steps c p n) p", "by (induct n arbitrary: c) (auto)"], ["", "lemma steps_add [simp]: \n  shows \"steps c p (m + n) = steps (steps c p m) p n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. steps c p (m + n) = steps (steps c p m) p n", "by (induct m arbitrary: c) (auto)"], ["", "lemma step_0 [simp]: \n  shows \"step (0, (l, r)) p = (0, (l, r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. step (0, l, r) p = (0, l, r)", "by (cases p, simp)"], ["", "lemma steps_0 [simp]: \n  shows \"steps (0, (l, r)) p n = (0, (l, r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. steps (0, l, r) p n = (0, l, r)", "by (induct n) (simp_all)"], ["", "fun\n  is_final :: \"config \\<Rightarrow> bool\"\n  where\n    \"is_final (s, l, r) = (s = 0)\""], ["", "lemma is_final_eq: \n  shows \"is_final (s, tp) = (s = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_final (s, tp) = (s = 0)", "by (cases tp) (auto)"], ["", "lemma is_finalI [intro]:\n  shows \"is_final (0, tp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_final (0, tp)", "by (simp add: is_final_eq)"], ["", "lemma after_is_final:\n  assumes \"is_final c\"\n  shows \"is_final (steps c p n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_final (steps c p n)", "using assms"], ["proof (prove)\nusing this:\n  is_final c\n\ngoal (1 subgoal):\n 1. is_final (steps c p n)", "by(induct n;cases c;auto)"], ["", "lemma is_final:\n  assumes a: \"is_final (steps c p n1)\"\n    and b: \"n1 \\<le> n2\"\n  shows \"is_final (steps c p n2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_final (steps c p n2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_final (steps c p n2)", "obtain n3 where eq: \"n2 = n1 + n3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n3. n2 = n1 + n3 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using b"], ["proof (prove)\nusing this:\n  n1 \\<le> n2\n\ngoal (1 subgoal):\n 1. (\\<And>n3. n2 = n1 + n3 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis le_iff_add)"], ["proof (state)\nthis:\n  n2 = n1 + n3\n\ngoal (1 subgoal):\n 1. is_final (steps c p n2)", "from a"], ["proof (chain)\npicking this:\n  is_final (steps c p n1)", "show \"is_final (steps c p n2)\""], ["proof (prove)\nusing this:\n  is_final (steps c p n1)\n\ngoal (1 subgoal):\n 1. is_final (steps c p n2)", "unfolding eq"], ["proof (prove)\nusing this:\n  is_final (steps c p n1)\n\ngoal (1 subgoal):\n 1. is_final (steps c p (n1 + n3))", "by (simp add: after_is_final)"], ["proof (state)\nthis:\n  is_final (steps c p n2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_is_final:\n  assumes a: \"\\<not> is_final (steps c p n1)\"\n    and b: \"n2 \\<le> n1\"\n  shows \"\\<not> is_final (steps c p n2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_final (steps c p n2)", "proof (rule notI)"], ["proof (state)\ngoal (1 subgoal):\n 1. is_final (steps c p n2) \\<Longrightarrow> False", "obtain n3 where eq: \"n1 = n2 + n3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n3. n1 = n2 + n3 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using b"], ["proof (prove)\nusing this:\n  n2 \\<le> n1\n\ngoal (1 subgoal):\n 1. (\\<And>n3. n1 = n2 + n3 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis le_iff_add)"], ["proof (state)\nthis:\n  n1 = n2 + n3\n\ngoal (1 subgoal):\n 1. is_final (steps c p n2) \\<Longrightarrow> False", "assume \"is_final (steps c p n2)\""], ["proof (state)\nthis:\n  is_final (steps c p n2)\n\ngoal (1 subgoal):\n 1. is_final (steps c p n2) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  is_final (steps c p n2)", "have \"is_final (steps c p n1)\""], ["proof (prove)\nusing this:\n  is_final (steps c p n2)\n\ngoal (1 subgoal):\n 1. is_final (steps c p n1)", "unfolding eq"], ["proof (prove)\nusing this:\n  is_final (steps c p n2)\n\ngoal (1 subgoal):\n 1. is_final (steps c p (n2 + n3))", "by (simp add: after_is_final)"], ["proof (state)\nthis:\n  is_final (steps c p n1)\n\ngoal (1 subgoal):\n 1. is_final (steps c p n2) \\<Longrightarrow> False", "with a"], ["proof (chain)\npicking this:\n  \\<not> is_final (steps c p n1)\n  is_final (steps c p n1)", "show \"False\""], ["proof (prove)\nusing this:\n  \\<not> is_final (steps c p n1)\n  is_final (steps c p n1)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "(* if the machine is in the halting state, there must have \n   been a state just before the halting state *)"], ["", "lemma before_final: \n  assumes \"steps0 (1, tp) A n = (0, tp')\"\n  shows \"\\<exists> n'. \\<not> is_final (steps0 (1, tp) A n') \\<and> steps0 (1, tp) A (Suc n') = (0, tp')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n'.\n       \\<not> is_final (steps0 (1, tp) A n') \\<and>\n       steps0 (1, tp) A (Suc n') = (0, tp')", "using assms"], ["proof (prove)\nusing this:\n  steps0 (1, tp) A n = (0, tp')\n\ngoal (1 subgoal):\n 1. \\<exists>n'.\n       \\<not> is_final (steps0 (1, tp) A n') \\<and>\n       steps0 (1, tp) A (Suc n') = (0, tp')", "proof(induct n arbitrary: tp')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>tp'.\n       steps0 (1, tp) A 0 = (0, tp') \\<Longrightarrow>\n       \\<exists>n'.\n          \\<not> is_final (steps0 (1, tp) A n') \\<and>\n          steps0 (1, tp) A (Suc n') = (0, tp')\n 2. \\<And>n tp'.\n       \\<lbrakk>\\<And>tp'.\n                   steps0 (1, tp) A n = (0, tp') \\<Longrightarrow>\n                   \\<exists>n'.\n                      \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                      steps0 (1, tp) A (Suc n') = (0, tp');\n        steps0 (1, tp) A (Suc n) = (0, tp')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'.\n                            \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                            steps0 (1, tp) A (Suc n') = (0, tp')", "case (0 tp')"], ["proof (state)\nthis:\n  steps0 (1, tp) A 0 = (0, tp')\n\ngoal (2 subgoals):\n 1. \\<And>tp'.\n       steps0 (1, tp) A 0 = (0, tp') \\<Longrightarrow>\n       \\<exists>n'.\n          \\<not> is_final (steps0 (1, tp) A n') \\<and>\n          steps0 (1, tp) A (Suc n') = (0, tp')\n 2. \\<And>n tp'.\n       \\<lbrakk>\\<And>tp'.\n                   steps0 (1, tp) A n = (0, tp') \\<Longrightarrow>\n                   \\<exists>n'.\n                      \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                      steps0 (1, tp) A (Suc n') = (0, tp');\n        steps0 (1, tp) A (Suc n) = (0, tp')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'.\n                            \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                            steps0 (1, tp) A (Suc n') = (0, tp')", "have asm: \"steps0 (1, tp) A 0 = (0, tp')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. steps0 (1, tp) A 0 = (0, tp')", "by fact"], ["proof (state)\nthis:\n  steps0 (1, tp) A 0 = (0, tp')\n\ngoal (2 subgoals):\n 1. \\<And>tp'.\n       steps0 (1, tp) A 0 = (0, tp') \\<Longrightarrow>\n       \\<exists>n'.\n          \\<not> is_final (steps0 (1, tp) A n') \\<and>\n          steps0 (1, tp) A (Suc n') = (0, tp')\n 2. \\<And>n tp'.\n       \\<lbrakk>\\<And>tp'.\n                   steps0 (1, tp) A n = (0, tp') \\<Longrightarrow>\n                   \\<exists>n'.\n                      \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                      steps0 (1, tp) A (Suc n') = (0, tp');\n        steps0 (1, tp) A (Suc n) = (0, tp')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'.\n                            \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                            steps0 (1, tp) A (Suc n') = (0, tp')", "then"], ["proof (chain)\npicking this:\n  steps0 (1, tp) A 0 = (0, tp')", "show \"\\<exists>n'. \\<not> is_final (steps0 (1, tp) A n') \\<and> steps0 (1, tp) A (Suc n') = (0, tp')\""], ["proof (prove)\nusing this:\n  steps0 (1, tp) A 0 = (0, tp')\n\ngoal (1 subgoal):\n 1. \\<exists>n'.\n       \\<not> is_final (steps0 (1, tp) A n') \\<and>\n       steps0 (1, tp) A (Suc n') = (0, tp')", "by simp"], ["proof (state)\nthis:\n  \\<exists>n'.\n     \\<not> is_final (steps0 (1, tp) A n') \\<and>\n     steps0 (1, tp) A (Suc n') = (0, tp')\n\ngoal (1 subgoal):\n 1. \\<And>n tp'.\n       \\<lbrakk>\\<And>tp'.\n                   steps0 (1, tp) A n = (0, tp') \\<Longrightarrow>\n                   \\<exists>n'.\n                      \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                      steps0 (1, tp) A (Suc n') = (0, tp');\n        steps0 (1, tp) A (Suc n) = (0, tp')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'.\n                            \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                            steps0 (1, tp) A (Suc n') = (0, tp')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n tp'.\n       \\<lbrakk>\\<And>tp'.\n                   steps0 (1, tp) A n = (0, tp') \\<Longrightarrow>\n                   \\<exists>n'.\n                      \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                      steps0 (1, tp) A (Suc n') = (0, tp');\n        steps0 (1, tp) A (Suc n) = (0, tp')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'.\n                            \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                            steps0 (1, tp) A (Suc n') = (0, tp')", "case (Suc n tp')"], ["proof (state)\nthis:\n  steps0 (1, tp) A n = (0, ?tp') \\<Longrightarrow>\n  \\<exists>n'.\n     \\<not> is_final (steps0 (1, tp) A n') \\<and>\n     steps0 (1, tp) A (Suc n') = (0, ?tp')\n  steps0 (1, tp) A (Suc n) = (0, tp')\n\ngoal (1 subgoal):\n 1. \\<And>n tp'.\n       \\<lbrakk>\\<And>tp'.\n                   steps0 (1, tp) A n = (0, tp') \\<Longrightarrow>\n                   \\<exists>n'.\n                      \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                      steps0 (1, tp) A (Suc n') = (0, tp');\n        steps0 (1, tp) A (Suc n) = (0, tp')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'.\n                            \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                            steps0 (1, tp) A (Suc n') = (0, tp')", "have ih: \"\\<And>tp'. steps0 (1, tp) A n = (0, tp') \\<Longrightarrow>\n    \\<exists>n'. \\<not> is_final (steps0 (1, tp) A n') \\<and> steps0 (1, tp) A (Suc n') = (0, tp')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>tp'.\n       steps0 (1, tp) A n = (0, tp') \\<Longrightarrow>\n       \\<exists>n'.\n          \\<not> is_final (steps0 (1, tp) A n') \\<and>\n          steps0 (1, tp) A (Suc n') = (0, tp')", "by fact"], ["proof (state)\nthis:\n  steps0 (1, tp) A n = (0, ?tp') \\<Longrightarrow>\n  \\<exists>n'.\n     \\<not> is_final (steps0 (1, tp) A n') \\<and>\n     steps0 (1, tp) A (Suc n') = (0, ?tp')\n\ngoal (1 subgoal):\n 1. \\<And>n tp'.\n       \\<lbrakk>\\<And>tp'.\n                   steps0 (1, tp) A n = (0, tp') \\<Longrightarrow>\n                   \\<exists>n'.\n                      \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                      steps0 (1, tp) A (Suc n') = (0, tp');\n        steps0 (1, tp) A (Suc n) = (0, tp')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'.\n                            \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                            steps0 (1, tp) A (Suc n') = (0, tp')", "have asm: \"steps0 (1, tp) A (Suc n) = (0, tp')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. steps0 (1, tp) A (Suc n) = (0, tp')", "by fact"], ["proof (state)\nthis:\n  steps0 (1, tp) A (Suc n) = (0, tp')\n\ngoal (1 subgoal):\n 1. \\<And>n tp'.\n       \\<lbrakk>\\<And>tp'.\n                   steps0 (1, tp) A n = (0, tp') \\<Longrightarrow>\n                   \\<exists>n'.\n                      \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                      steps0 (1, tp) A (Suc n') = (0, tp');\n        steps0 (1, tp) A (Suc n) = (0, tp')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'.\n                            \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                            steps0 (1, tp) A (Suc n') = (0, tp')", "obtain s l r where cases: \"steps0 (1, tp) A n = (s, l, r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s l r.\n        steps0 (1, tp) A n = (s, l, r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto intro: is_final.cases)"], ["proof (state)\nthis:\n  steps0 (1, tp) A n = (s, l, r)\n\ngoal (1 subgoal):\n 1. \\<And>n tp'.\n       \\<lbrakk>\\<And>tp'.\n                   steps0 (1, tp) A n = (0, tp') \\<Longrightarrow>\n                   \\<exists>n'.\n                      \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                      steps0 (1, tp) A (Suc n') = (0, tp');\n        steps0 (1, tp) A (Suc n) = (0, tp')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'.\n                            \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                            steps0 (1, tp) A (Suc n') = (0, tp')", "then"], ["proof (chain)\npicking this:\n  steps0 (1, tp) A n = (s, l, r)", "show \"\\<exists>n'. \\<not> is_final (steps0 (1, tp) A n') \\<and> steps0 (1, tp) A (Suc n') = (0, tp')\""], ["proof (prove)\nusing this:\n  steps0 (1, tp) A n = (s, l, r)\n\ngoal (1 subgoal):\n 1. \\<exists>n'.\n       \\<not> is_final (steps0 (1, tp) A n') \\<and>\n       steps0 (1, tp) A (Suc n') = (0, tp')", "proof (cases \"s = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>steps0 (1, tp) A n = (s, l, r); s = 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'.\n                         \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                         steps0 (1, tp) A (Suc n') = (0, tp')\n 2. \\<lbrakk>steps0 (1, tp) A n = (s, l, r); s \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'.\n                         \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                         steps0 (1, tp) A (Suc n') = (0, tp')", "case True"], ["proof (state)\nthis:\n  s = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>steps0 (1, tp) A n = (s, l, r); s = 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'.\n                         \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                         steps0 (1, tp) A (Suc n') = (0, tp')\n 2. \\<lbrakk>steps0 (1, tp) A n = (s, l, r); s \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'.\n                         \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                         steps0 (1, tp) A (Suc n') = (0, tp')", "(* in halting state *)"], ["proof (state)\nthis:\n  s = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>steps0 (1, tp) A n = (s, l, r); s = 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'.\n                         \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                         steps0 (1, tp) A (Suc n') = (0, tp')\n 2. \\<lbrakk>steps0 (1, tp) A n = (s, l, r); s \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'.\n                         \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                         steps0 (1, tp) A (Suc n') = (0, tp')", "then"], ["proof (chain)\npicking this:\n  s = 0", "have \"steps0 (1, tp) A n = (0, tp')\""], ["proof (prove)\nusing this:\n  s = 0\n\ngoal (1 subgoal):\n 1. steps0 (1, tp) A n = (0, tp')", "using asm cases"], ["proof (prove)\nusing this:\n  s = 0\n  steps0 (1, tp) A (Suc n) = (0, tp')\n  steps0 (1, tp) A n = (s, l, r)\n\ngoal (1 subgoal):\n 1. steps0 (1, tp) A n = (0, tp')", "by (simp del: steps.simps)"], ["proof (state)\nthis:\n  steps0 (1, tp) A n = (0, tp')\n\ngoal (2 subgoals):\n 1. \\<lbrakk>steps0 (1, tp) A n = (s, l, r); s = 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'.\n                         \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                         steps0 (1, tp) A (Suc n') = (0, tp')\n 2. \\<lbrakk>steps0 (1, tp) A n = (s, l, r); s \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'.\n                         \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                         steps0 (1, tp) A (Suc n') = (0, tp')", "then"], ["proof (chain)\npicking this:\n  steps0 (1, tp) A n = (0, tp')", "show ?thesis"], ["proof (prove)\nusing this:\n  steps0 (1, tp) A n = (0, tp')\n\ngoal (1 subgoal):\n 1. \\<exists>n'.\n       \\<not> is_final (steps0 (1, tp) A n') \\<and>\n       steps0 (1, tp) A (Suc n') = (0, tp')", "using ih"], ["proof (prove)\nusing this:\n  steps0 (1, tp) A n = (0, tp')\n  steps0 (1, tp) A n = (0, ?tp') \\<Longrightarrow>\n  \\<exists>n'.\n     \\<not> is_final (steps0 (1, tp) A n') \\<and>\n     steps0 (1, tp) A (Suc n') = (0, ?tp')\n\ngoal (1 subgoal):\n 1. \\<exists>n'.\n       \\<not> is_final (steps0 (1, tp) A n') \\<and>\n       steps0 (1, tp) A (Suc n') = (0, tp')", "by simp"], ["proof (state)\nthis:\n  \\<exists>n'.\n     \\<not> is_final (steps0 (1, tp) A n') \\<and>\n     steps0 (1, tp) A (Suc n') = (0, tp')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>steps0 (1, tp) A n = (s, l, r); s \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'.\n                         \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                         steps0 (1, tp) A (Suc n') = (0, tp')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>steps0 (1, tp) A n = (s, l, r); s \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'.\n                         \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                         steps0 (1, tp) A (Suc n') = (0, tp')", "case False"], ["proof (state)\nthis:\n  s \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>steps0 (1, tp) A n = (s, l, r); s \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'.\n                         \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                         steps0 (1, tp) A (Suc n') = (0, tp')", "(* not in halting state *)"], ["proof (state)\nthis:\n  s \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>steps0 (1, tp) A n = (s, l, r); s \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'.\n                         \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                         steps0 (1, tp) A (Suc n') = (0, tp')", "then"], ["proof (chain)\npicking this:\n  s \\<noteq> 0", "have \"\\<not> is_final (steps0 (1, tp) A n) \\<and> steps0 (1, tp) A (Suc n) = (0, tp')\""], ["proof (prove)\nusing this:\n  s \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> is_final (steps0 (1, tp) A n) \\<and>\n    steps0 (1, tp) A (Suc n) = (0, tp')", "using asm cases"], ["proof (prove)\nusing this:\n  s \\<noteq> 0\n  steps0 (1, tp) A (Suc n) = (0, tp')\n  steps0 (1, tp) A n = (s, l, r)\n\ngoal (1 subgoal):\n 1. \\<not> is_final (steps0 (1, tp) A n) \\<and>\n    steps0 (1, tp) A (Suc n) = (0, tp')", "by simp"], ["proof (state)\nthis:\n  \\<not> is_final (steps0 (1, tp) A n) \\<and>\n  steps0 (1, tp) A (Suc n) = (0, tp')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>steps0 (1, tp) A n = (s, l, r); s \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'.\n                         \\<not> is_final (steps0 (1, tp) A n') \\<and>\n                         steps0 (1, tp) A (Suc n') = (0, tp')", "then"], ["proof (chain)\npicking this:\n  \\<not> is_final (steps0 (1, tp) A n) \\<and>\n  steps0 (1, tp) A (Suc n) = (0, tp')", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> is_final (steps0 (1, tp) A n) \\<and>\n  steps0 (1, tp) A (Suc n) = (0, tp')\n\ngoal (1 subgoal):\n 1. \\<exists>n'.\n       \\<not> is_final (steps0 (1, tp) A n') \\<and>\n       steps0 (1, tp) A (Suc n') = (0, tp')", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'.\n     \\<not> is_final (steps0 (1, tp) A n') \\<and>\n     steps0 (1, tp) A (Suc n') = (0, tp')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n'.\n     \\<not> is_final (steps0 (1, tp) A n') \\<and>\n     steps0 (1, tp) A (Suc n') = (0, tp')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma least_steps: \n  assumes \"steps0 (1, tp) A n = (0, tp')\"\n  shows \"\\<exists> n'. (\\<forall>n'' < n'. \\<not> is_final (steps0 (1, tp) A n'')) \\<and> \n               (\\<forall>n'' \\<ge> n'. is_final (steps0 (1, tp) A n''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n'.\n       (\\<forall>n''<n'. \\<not> is_final (steps0 (1, tp) A n'')) \\<and>\n       (\\<forall>n''\\<ge>n'. is_final (steps0 (1, tp) A n''))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n'.\n       (\\<forall>n''<n'. \\<not> is_final (steps0 (1, tp) A n'')) \\<and>\n       (\\<forall>n''\\<ge>n'. is_final (steps0 (1, tp) A n''))", "from before_final[OF assms]"], ["proof (chain)\npicking this:\n  \\<exists>n'.\n     \\<not> is_final (steps0 (1, tp) A n') \\<and>\n     steps0 (1, tp) A (Suc n') = (0, tp')", "obtain n' where\n    before: \"\\<not> is_final (steps0 (1, tp) A n')\" and\n    final: \"steps0 (1, tp) A (Suc n') = (0, tp')\""], ["proof (prove)\nusing this:\n  \\<exists>n'.\n     \\<not> is_final (steps0 (1, tp) A n') \\<and>\n     steps0 (1, tp) A (Suc n') = (0, tp')\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>\\<not> is_final (steps0 (1, tp) A n');\n         steps0 (1, tp) A (Suc n') = (0, tp')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<not> is_final (steps0 (1, tp) A n')\n  steps0 (1, tp) A (Suc n') = (0, tp')\n\ngoal (1 subgoal):\n 1. \\<exists>n'.\n       (\\<forall>n''<n'. \\<not> is_final (steps0 (1, tp) A n'')) \\<and>\n       (\\<forall>n''\\<ge>n'. is_final (steps0 (1, tp) A n''))", "from before"], ["proof (chain)\npicking this:\n  \\<not> is_final (steps0 (1, tp) A n')", "have \"\\<forall>n'' < Suc n'. \\<not> is_final (steps0 (1, tp) A n'')\""], ["proof (prove)\nusing this:\n  \\<not> is_final (steps0 (1, tp) A n')\n\ngoal (1 subgoal):\n 1. \\<forall>n''<Suc n'. \\<not> is_final (steps0 (1, tp) A n'')", "using not_is_final"], ["proof (prove)\nusing this:\n  \\<not> is_final (steps0 (1, tp) A n')\n  \\<lbrakk>\\<not> is_final (steps ?c ?p ?n1.0); ?n2.0 \\<le> ?n1.0\\<rbrakk>\n  \\<Longrightarrow> \\<not> is_final (steps ?c ?p ?n2.0)\n\ngoal (1 subgoal):\n 1. \\<forall>n''<Suc n'. \\<not> is_final (steps0 (1, tp) A n'')", "by auto"], ["proof (state)\nthis:\n  \\<forall>n''<Suc n'. \\<not> is_final (steps0 (1, tp) A n'')\n\ngoal (1 subgoal):\n 1. \\<exists>n'.\n       (\\<forall>n''<n'. \\<not> is_final (steps0 (1, tp) A n'')) \\<and>\n       (\\<forall>n''\\<ge>n'. is_final (steps0 (1, tp) A n''))", "moreover"], ["proof (state)\nthis:\n  \\<forall>n''<Suc n'. \\<not> is_final (steps0 (1, tp) A n'')\n\ngoal (1 subgoal):\n 1. \\<exists>n'.\n       (\\<forall>n''<n'. \\<not> is_final (steps0 (1, tp) A n'')) \\<and>\n       (\\<forall>n''\\<ge>n'. is_final (steps0 (1, tp) A n''))", "from final"], ["proof (chain)\npicking this:\n  steps0 (1, tp) A (Suc n') = (0, tp')", "have \"\\<forall>n'' \\<ge> Suc n'. is_final (steps0 (1, tp) A n'')\""], ["proof (prove)\nusing this:\n  steps0 (1, tp) A (Suc n') = (0, tp')\n\ngoal (1 subgoal):\n 1. \\<forall>n''\\<ge>Suc n'. is_final (steps0 (1, tp) A n'')", "using is_final[of _ _ \"Suc n'\"]"], ["proof (prove)\nusing this:\n  steps0 (1, tp) A (Suc n') = (0, tp')\n  \\<lbrakk>is_final (steps ?c ?p (Suc n')); Suc n' \\<le> ?n2.0\\<rbrakk>\n  \\<Longrightarrow> is_final (steps ?c ?p ?n2.0)\n\ngoal (1 subgoal):\n 1. \\<forall>n''\\<ge>Suc n'. is_final (steps0 (1, tp) A n'')", "by (auto simp add: is_final_eq)"], ["proof (state)\nthis:\n  \\<forall>n''\\<ge>Suc n'. is_final (steps0 (1, tp) A n'')\n\ngoal (1 subgoal):\n 1. \\<exists>n'.\n       (\\<forall>n''<n'. \\<not> is_final (steps0 (1, tp) A n'')) \\<and>\n       (\\<forall>n''\\<ge>n'. is_final (steps0 (1, tp) A n''))", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>n''<Suc n'. \\<not> is_final (steps0 (1, tp) A n'')\n  \\<forall>n''\\<ge>Suc n'. is_final (steps0 (1, tp) A n'')", "show \"\\<exists> n'. (\\<forall>n'' < n'. \\<not> is_final (steps0 (1, tp) A n'')) \\<and> (\\<forall>n'' \\<ge> n'. is_final (steps0 (1, tp) A n''))\""], ["proof (prove)\nusing this:\n  \\<forall>n''<Suc n'. \\<not> is_final (steps0 (1, tp) A n'')\n  \\<forall>n''\\<ge>Suc n'. is_final (steps0 (1, tp) A n'')\n\ngoal (1 subgoal):\n 1. \\<exists>n'.\n       (\\<forall>n''<n'. \\<not> is_final (steps0 (1, tp) A n'')) \\<and>\n       (\\<forall>n''\\<ge>n'. is_final (steps0 (1, tp) A n''))", "by blast"], ["proof (state)\nthis:\n  \\<exists>n'.\n     (\\<forall>n''<n'. \\<not> is_final (steps0 (1, tp) A n'')) \\<and>\n     (\\<forall>n''\\<ge>n'. is_final (steps0 (1, tp) A n''))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* well-formedness of Turing machine programs *)"], ["", "abbreviation \"is_even n \\<equiv> (n::nat) mod 2 = 0\""], ["", "fun \n  tm_wf :: \"tprog \\<Rightarrow> bool\"\n  where\n    \"tm_wf (p, off) = (length p \\<ge> 2 \\<and> is_even (length p) \\<and> \n                    (\\<forall>(a, s) \\<in> set p. s \\<le> length p div 2 + off \\<and> s \\<ge> off))\""], ["", "abbreviation\n  \"tm_wf0 p \\<equiv> tm_wf (p, 0)\""], ["", "abbreviation exponent :: \"'a \\<Rightarrow> nat \\<Rightarrow> 'a list\" (\"_ \\<up> _\" [100, 99] 100)\n  where \"x \\<up> n == replicate n x\""], ["", "lemma hd_repeat_cases:\n  \"P (hd (a \\<up> m @ r)) \\<longleftrightarrow> (m = 0 \\<longrightarrow> P (hd r)) \\<and> (\\<forall>nat. m = Suc nat \\<longrightarrow> P a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (hd (a \\<up> m @ r)) =\n    ((m = 0 \\<longrightarrow> P (hd r)) \\<and>\n     (\\<forall>nat. m = Suc nat \\<longrightarrow> P a))", "by (cases m,auto)"], ["", "class tape =\n  fixes tape_of :: \"'a \\<Rightarrow> cell list\" (\"<_>\" 100)"], ["", "instantiation nat::tape begin"], ["", "definition tape_of_nat where \"tape_of_nat (n::nat) \\<equiv> Oc \\<up> (Suc n)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(nat, tape_class)", "by standard"], ["", "end"], ["", "type_synonym nat_list = \"nat list\""], ["", "instantiation list::(tape) tape begin"], ["", "fun tape_of_nat_list :: \"('a::tape) list \\<Rightarrow> cell list\" \n  where \n    \"tape_of_nat_list [] = []\" |\n    \"tape_of_nat_list [n] = <n>\" |\n    \"tape_of_nat_list (n#ns) = <n> @ Bk # (tape_of_nat_list ns)\""], ["", "definition tape_of_list where \"tape_of_list \\<equiv> tape_of_nat_list\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a list, tape_class)", "by standard"], ["", "end"], ["", "instantiation prod:: (tape, tape) tape begin"], ["", "fun tape_of_nat_prod :: \"('a::tape) \\<times> ('b::tape) \\<Rightarrow> cell list\" \n  where \"tape_of_nat_prod (n, m) = <n> @ [Bk] @ <m>\""], ["", "definition tape_of_prod where \"tape_of_prod \\<equiv> tape_of_nat_prod\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a \\<times> 'b, tape_class)", "by standard"], ["", "end"], ["", "fun \n  shift :: \"instr list \\<Rightarrow> nat \\<Rightarrow> instr list\"\n  where\n    \"shift p n = (map (\\<lambda> (a, s). (a, (if s = 0 then 0 else s + n))) p)\""], ["", "fun \n  adjust :: \"instr list \\<Rightarrow> nat \\<Rightarrow> instr list\"\n  where\n    \"adjust p e = map (\\<lambda> (a, s). (a, if s = 0 then e else s)) p\""], ["", "abbreviation\n  \"adjust0 p \\<equiv> adjust p (Suc (length p div 2))\""], ["", "lemma length_shift [simp]: \n  shows \"length (shift p n) = length p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (shift p n) = length p", "by simp"], ["", "lemma length_adjust [simp]: \n  shows \"length (adjust p n) = length p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (adjust p n) = length p", "by (induct p) (auto)"], ["", "(* composition of two Turing machines *)"], ["", "fun\n  tm_comp :: \"instr list \\<Rightarrow> instr list \\<Rightarrow> instr list\" (\"_ |+| _\" [0, 0] 100)\n  where\n    \"tm_comp p1 p2 = ((adjust0 p1) @ (shift p2 (length p1 div 2)))\""], ["", "lemma tm_comp_length:\n  shows \"length (A |+| B) = length A + length B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (A |+| B) = length A + length B", "by auto"], ["", "lemma tm_comp_wf[intro]: \n  \"\\<lbrakk>tm_wf (A, 0); tm_wf (B, 0)\\<rbrakk> \\<Longrightarrow> tm_wf (A |+| B, 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>tm_wf0 A; tm_wf0 B\\<rbrakk> \\<Longrightarrow> tm_wf0 (A |+| B)", "by (fastforce)"], ["", "lemma tm_comp_step: \n  assumes unfinal: \"\\<not> is_final (step0 c A)\"\n  shows \"step0 c (A |+| B) = step0 c A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. step0 c (A |+| B) = step0 c A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. step0 c (A |+| B) = step0 c A", "obtain s l r where eq: \"c = (s, l, r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s l r. c = (s, l, r) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis is_final.cases)"], ["proof (state)\nthis:\n  c = (s, l, r)\n\ngoal (1 subgoal):\n 1. step0 c (A |+| B) = step0 c A", "have \"\\<not> is_final (step0 (s, l, r) A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_final (step0 (s, l, r) A)", "using unfinal eq"], ["proof (prove)\nusing this:\n  \\<not> is_final (step0 c A)\n  c = (s, l, r)\n\ngoal (1 subgoal):\n 1. \\<not> is_final (step0 (s, l, r) A)", "by simp"], ["proof (state)\nthis:\n  \\<not> is_final (step0 (s, l, r) A)\n\ngoal (1 subgoal):\n 1. step0 c (A |+| B) = step0 c A", "then"], ["proof (chain)\npicking this:\n  \\<not> is_final (step0 (s, l, r) A)", "have \"case (fetch A s (read r)) of (a, s) \\<Rightarrow> s \\<noteq> 0\""], ["proof (prove)\nusing this:\n  \\<not> is_final (step0 (s, l, r) A)\n\ngoal (1 subgoal):\n 1. case fetch A s (read r) of (a, s) \\<Rightarrow> s \\<noteq> 0", "by (auto simp add: is_final_eq)"], ["proof (state)\nthis:\n  case fetch A s (read r) of (a, s) \\<Rightarrow> s \\<noteq> 0\n\ngoal (1 subgoal):\n 1. step0 c (A |+| B) = step0 c A", "then"], ["proof (chain)\npicking this:\n  case fetch A s (read r) of (a, s) \\<Rightarrow> s \\<noteq> 0", "have \"fetch (A |+| B) s (read r) = fetch A s (read r)\""], ["proof (prove)\nusing this:\n  case fetch A s (read r) of (a, s) \\<Rightarrow> s \\<noteq> 0\n\ngoal (1 subgoal):\n 1. fetch (A |+| B) s (read r) = fetch A s (read r)", "apply (cases \"read r\";cases s)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>case fetch A s (read r) of (a, s) \\<Rightarrow> s \\<noteq> 0;\n     read r = Bk;\n     case fetch A s (read r) of (a, s) \\<Rightarrow> s \\<noteq> 0;\n     s = 0\\<rbrakk>\n    \\<Longrightarrow> fetch (A |+| B) s (read r) = fetch A s (read r)\n 2. \\<And>nat.\n       \\<lbrakk>case fetch A s (read r) of\n                (a, s) \\<Rightarrow> s \\<noteq> 0;\n        read r = Bk;\n        case fetch A s (read r) of (a, s) \\<Rightarrow> s \\<noteq> 0;\n        s = Suc nat\\<rbrakk>\n       \\<Longrightarrow> fetch (A |+| B) s (read r) = fetch A s (read r)\n 3. \\<lbrakk>case fetch A s (read r) of (a, s) \\<Rightarrow> s \\<noteq> 0;\n     read r = Oc;\n     case fetch A s (read r) of (a, s) \\<Rightarrow> s \\<noteq> 0;\n     s = 0\\<rbrakk>\n    \\<Longrightarrow> fetch (A |+| B) s (read r) = fetch A s (read r)\n 4. \\<And>nat.\n       \\<lbrakk>case fetch A s (read r) of\n                (a, s) \\<Rightarrow> s \\<noteq> 0;\n        read r = Oc;\n        case fetch A s (read r) of (a, s) \\<Rightarrow> s \\<noteq> 0;\n        s = Suc nat\\<rbrakk>\n       \\<Longrightarrow> fetch (A |+| B) s (read r) = fetch A s (read r)", "by (auto simp: tm_comp_length nth_append)"], ["proof (state)\nthis:\n  fetch (A |+| B) s (read r) = fetch A s (read r)\n\ngoal (1 subgoal):\n 1. step0 c (A |+| B) = step0 c A", "then"], ["proof (chain)\npicking this:\n  fetch (A |+| B) s (read r) = fetch A s (read r)", "show \"step0 c (A |+| B) = step0 c A\""], ["proof (prove)\nusing this:\n  fetch (A |+| B) s (read r) = fetch A s (read r)\n\ngoal (1 subgoal):\n 1. step0 c (A |+| B) = step0 c A", "by (simp add: eq)"], ["proof (state)\nthis:\n  step0 c (A |+| B) = step0 c A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tm_comp_steps:  \n  assumes \"\\<not> is_final (steps0 c A n)\" \n  shows \"steps0 c (A |+| B) n = steps0 c A n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. steps0 c (A |+| B) n = steps0 c A n", "using assms"], ["proof (prove)\nusing this:\n  \\<not> is_final (steps0 c A n)\n\ngoal (1 subgoal):\n 1. steps0 c (A |+| B) n = steps0 c A n", "proof(induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<not> is_final (steps0 c A 0) \\<Longrightarrow>\n    steps0 c (A |+| B) 0 = steps0 c A 0\n 2. \\<And>n.\n       \\<lbrakk>\\<not> is_final (steps0 c A n) \\<Longrightarrow>\n                steps0 c (A |+| B) n = steps0 c A n;\n        \\<not> is_final (steps0 c A (Suc n))\\<rbrakk>\n       \\<Longrightarrow> steps0 c (A |+| B) (Suc n) = steps0 c A (Suc n)", "case 0"], ["proof (state)\nthis:\n  \\<not> is_final (steps0 c A 0)\n\ngoal (2 subgoals):\n 1. \\<not> is_final (steps0 c A 0) \\<Longrightarrow>\n    steps0 c (A |+| B) 0 = steps0 c A 0\n 2. \\<And>n.\n       \\<lbrakk>\\<not> is_final (steps0 c A n) \\<Longrightarrow>\n                steps0 c (A |+| B) n = steps0 c A n;\n        \\<not> is_final (steps0 c A (Suc n))\\<rbrakk>\n       \\<Longrightarrow> steps0 c (A |+| B) (Suc n) = steps0 c A (Suc n)", "then"], ["proof (chain)\npicking this:\n  \\<not> is_final (steps0 c A 0)", "show \"steps0 c (A |+| B) 0 = steps0 c A 0\""], ["proof (prove)\nusing this:\n  \\<not> is_final (steps0 c A 0)\n\ngoal (1 subgoal):\n 1. steps0 c (A |+| B) 0 = steps0 c A 0", "by auto"], ["proof (state)\nthis:\n  steps0 c (A |+| B) 0 = steps0 c A 0\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<not> is_final (steps0 c A n) \\<Longrightarrow>\n                steps0 c (A |+| B) n = steps0 c A n;\n        \\<not> is_final (steps0 c A (Suc n))\\<rbrakk>\n       \\<Longrightarrow> steps0 c (A |+| B) (Suc n) = steps0 c A (Suc n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<not> is_final (steps0 c A n) \\<Longrightarrow>\n                steps0 c (A |+| B) n = steps0 c A n;\n        \\<not> is_final (steps0 c A (Suc n))\\<rbrakk>\n       \\<Longrightarrow> steps0 c (A |+| B) (Suc n) = steps0 c A (Suc n)", "case (Suc n)"], ["proof (state)\nthis:\n  \\<not> is_final (steps0 c A n) \\<Longrightarrow>\n  steps0 c (A |+| B) n = steps0 c A n\n  \\<not> is_final (steps0 c A (Suc n))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<not> is_final (steps0 c A n) \\<Longrightarrow>\n                steps0 c (A |+| B) n = steps0 c A n;\n        \\<not> is_final (steps0 c A (Suc n))\\<rbrakk>\n       \\<Longrightarrow> steps0 c (A |+| B) (Suc n) = steps0 c A (Suc n)", "have ih: \"\\<not> is_final (steps0 c A n) \\<Longrightarrow> steps0 c (A |+| B) n = steps0 c A n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_final (steps0 c A n) \\<Longrightarrow>\n    steps0 c (A |+| B) n = steps0 c A n", "by fact"], ["proof (state)\nthis:\n  \\<not> is_final (steps0 c A n) \\<Longrightarrow>\n  steps0 c (A |+| B) n = steps0 c A n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<not> is_final (steps0 c A n) \\<Longrightarrow>\n                steps0 c (A |+| B) n = steps0 c A n;\n        \\<not> is_final (steps0 c A (Suc n))\\<rbrakk>\n       \\<Longrightarrow> steps0 c (A |+| B) (Suc n) = steps0 c A (Suc n)", "have fin: \"\\<not> is_final (steps0 c A (Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_final (steps0 c A (Suc n))", "by fact"], ["proof (state)\nthis:\n  \\<not> is_final (steps0 c A (Suc n))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<not> is_final (steps0 c A n) \\<Longrightarrow>\n                steps0 c (A |+| B) n = steps0 c A n;\n        \\<not> is_final (steps0 c A (Suc n))\\<rbrakk>\n       \\<Longrightarrow> steps0 c (A |+| B) (Suc n) = steps0 c A (Suc n)", "then"], ["proof (chain)\npicking this:\n  \\<not> is_final (steps0 c A (Suc n))", "have fin1: \"\\<not> is_final (step0 (steps0 c A n) A)\""], ["proof (prove)\nusing this:\n  \\<not> is_final (steps0 c A (Suc n))\n\ngoal (1 subgoal):\n 1. \\<not> is_final (step0 (steps0 c A n) A)", "by (auto simp only: step_red)"], ["proof (state)\nthis:\n  \\<not> is_final (step0 (steps0 c A n) A)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<not> is_final (steps0 c A n) \\<Longrightarrow>\n                steps0 c (A |+| B) n = steps0 c A n;\n        \\<not> is_final (steps0 c A (Suc n))\\<rbrakk>\n       \\<Longrightarrow> steps0 c (A |+| B) (Suc n) = steps0 c A (Suc n)", "then"], ["proof (chain)\npicking this:\n  \\<not> is_final (step0 (steps0 c A n) A)", "have fin2: \"\\<not> is_final (steps0 c A n)\""], ["proof (prove)\nusing this:\n  \\<not> is_final (step0 (steps0 c A n) A)\n\ngoal (1 subgoal):\n 1. \\<not> is_final (steps0 c A n)", "by (metis is_final_eq step_0 surj_pair)"], ["proof (state)\nthis:\n  \\<not> is_final (steps0 c A n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<not> is_final (steps0 c A n) \\<Longrightarrow>\n                steps0 c (A |+| B) n = steps0 c A n;\n        \\<not> is_final (steps0 c A (Suc n))\\<rbrakk>\n       \\<Longrightarrow> steps0 c (A |+| B) (Suc n) = steps0 c A (Suc n)", "have \"steps0 c (A |+| B) (Suc n) = step0 (steps0 c (A |+| B) n) (A |+| B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. steps0 c (A |+| B) (Suc n) = step0 (steps0 c (A |+| B) n) (A |+| B)", "by (simp only: step_red)"], ["proof (state)\nthis:\n  steps0 c (A |+| B) (Suc n) = step0 (steps0 c (A |+| B) n) (A |+| B)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<not> is_final (steps0 c A n) \\<Longrightarrow>\n                steps0 c (A |+| B) n = steps0 c A n;\n        \\<not> is_final (steps0 c A (Suc n))\\<rbrakk>\n       \\<Longrightarrow> steps0 c (A |+| B) (Suc n) = steps0 c A (Suc n)", "also"], ["proof (state)\nthis:\n  steps0 c (A |+| B) (Suc n) = step0 (steps0 c (A |+| B) n) (A |+| B)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<not> is_final (steps0 c A n) \\<Longrightarrow>\n                steps0 c (A |+| B) n = steps0 c A n;\n        \\<not> is_final (steps0 c A (Suc n))\\<rbrakk>\n       \\<Longrightarrow> steps0 c (A |+| B) (Suc n) = steps0 c A (Suc n)", "have \"... = step0 (steps0 c A n) (A |+| B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. step0 (steps0 c (A |+| B) n) (A |+| B) = step0 (steps0 c A n) (A |+| B)", "by (simp only: ih[OF fin2])"], ["proof (state)\nthis:\n  step0 (steps0 c (A |+| B) n) (A |+| B) = step0 (steps0 c A n) (A |+| B)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<not> is_final (steps0 c A n) \\<Longrightarrow>\n                steps0 c (A |+| B) n = steps0 c A n;\n        \\<not> is_final (steps0 c A (Suc n))\\<rbrakk>\n       \\<Longrightarrow> steps0 c (A |+| B) (Suc n) = steps0 c A (Suc n)", "also"], ["proof (state)\nthis:\n  step0 (steps0 c (A |+| B) n) (A |+| B) = step0 (steps0 c A n) (A |+| B)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<not> is_final (steps0 c A n) \\<Longrightarrow>\n                steps0 c (A |+| B) n = steps0 c A n;\n        \\<not> is_final (steps0 c A (Suc n))\\<rbrakk>\n       \\<Longrightarrow> steps0 c (A |+| B) (Suc n) = steps0 c A (Suc n)", "have \"... = step0 (steps0 c A n) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. step0 (steps0 c A n) (A |+| B) = step0 (steps0 c A n) A", "by (simp only: tm_comp_step[OF fin1])"], ["proof (state)\nthis:\n  step0 (steps0 c A n) (A |+| B) = step0 (steps0 c A n) A\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<not> is_final (steps0 c A n) \\<Longrightarrow>\n                steps0 c (A |+| B) n = steps0 c A n;\n        \\<not> is_final (steps0 c A (Suc n))\\<rbrakk>\n       \\<Longrightarrow> steps0 c (A |+| B) (Suc n) = steps0 c A (Suc n)", "finally"], ["proof (chain)\npicking this:\n  steps0 c (A |+| B) (Suc n) = step0 (steps0 c A n) A", "show \"steps0 c (A |+| B) (Suc n) = steps0 c A (Suc n)\""], ["proof (prove)\nusing this:\n  steps0 c (A |+| B) (Suc n) = step0 (steps0 c A n) A\n\ngoal (1 subgoal):\n 1. steps0 c (A |+| B) (Suc n) = steps0 c A (Suc n)", "by (simp only: step_red)"], ["proof (state)\nthis:\n  steps0 c (A |+| B) (Suc n) = steps0 c A (Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tm_comp_fetch_in_A:\n  assumes h1: \"fetch A s x = (a, 0)\"\n    and h2: \"s \\<le> length A div 2\" \n    and h3: \"s \\<noteq> 0\"\n  shows \"fetch (A |+| B) s x = (a, Suc (length A div 2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fetch (A |+| B) s x = (a, Suc (length A div 2))", "using h1 h2 h3"], ["proof (prove)\nusing this:\n  fetch A s x = (a, 0)\n  s \\<le> length A div 2\n  s \\<noteq> 0\n\ngoal (1 subgoal):\n 1. fetch (A |+| B) s x = (a, Suc (length A div 2))", "apply(cases s;cases x)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>fetch A s x = (a, 0); s \\<le> length A div 2; s \\<noteq> 0;\n     s = 0; fetch A s x = (a, 0); s \\<le> length A div 2; s \\<noteq> 0;\n     x = Bk\\<rbrakk>\n    \\<Longrightarrow> fetch (A |+| B) s x = (a, Suc (length A div 2))\n 2. \\<lbrakk>fetch A s x = (a, 0); s \\<le> length A div 2; s \\<noteq> 0;\n     s = 0; fetch A s x = (a, 0); s \\<le> length A div 2; s \\<noteq> 0;\n     x = Oc\\<rbrakk>\n    \\<Longrightarrow> fetch (A |+| B) s x = (a, Suc (length A div 2))\n 3. \\<And>nat.\n       \\<lbrakk>fetch A s x = (a, 0); s \\<le> length A div 2; s \\<noteq> 0;\n        s = Suc nat; fetch A s x = (a, 0); s \\<le> length A div 2;\n        s \\<noteq> 0; x = Bk\\<rbrakk>\n       \\<Longrightarrow> fetch (A |+| B) s x = (a, Suc (length A div 2))\n 4. \\<And>nat.\n       \\<lbrakk>fetch A s x = (a, 0); s \\<le> length A div 2; s \\<noteq> 0;\n        s = Suc nat; fetch A s x = (a, 0); s \\<le> length A div 2;\n        s \\<noteq> 0; x = Oc\\<rbrakk>\n       \\<Longrightarrow> fetch (A |+| B) s x = (a, Suc (length A div 2))", "by(auto simp: tm_comp_length nth_append)"], ["", "lemma tm_comp_exec_after_first:\n  assumes h1: \"\\<not> is_final c\" \n    and h2: \"step0 c A = (0, tp)\"\n    and h3: \"fst c \\<le> length A div 2\"\n  shows \"step0 c (A |+| B) = (Suc (length A div 2), tp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. step0 c (A |+| B) = (Suc (length A div 2), tp)", "using h1 h2 h3"], ["proof (prove)\nusing this:\n  \\<not> is_final c\n  step0 c A = (0, tp)\n  fst c \\<le> length A div 2\n\ngoal (1 subgoal):\n 1. step0 c (A |+| B) = (Suc (length A div 2), tp)", "apply(case_tac c)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b ca.\n       \\<lbrakk>\\<not> is_final c; step0 c A = (0, tp);\n        fst c \\<le> length A div 2; c = (a, b, ca)\\<rbrakk>\n       \\<Longrightarrow> step0 c (A |+| B) = (Suc (length A div 2), tp)", "apply(auto simp del: tm_comp.simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>0 < a;\n        (case fetch A a Bk of\n         (a, s') \\<Rightarrow> (s', update a (b, []))) =\n        (0, tp);\n        a \\<le> length A div 2; c = (a, b, [])\\<rbrakk>\n       \\<Longrightarrow> (case fetch (A |+| B) a Bk of\n                          (a, s') \\<Rightarrow> (s', update a (b, []))) =\n                         (Suc (length A div 2), tp)\n 2. \\<And>a b ca.\n       \\<lbrakk>0 < a;\n        (case fetch A a (hd ca) of\n         (a, s') \\<Rightarrow> (s', update a (b, ca))) =\n        (0, tp);\n        a \\<le> length A div 2; c = (a, b, ca); ca \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case fetch (A |+| B) a (hd ca) of\n                          (a, s') \\<Rightarrow> (s', update a (b, ca))) =\n                         (Suc (length A div 2), tp)", "apply(case_tac \"fetch A a Bk\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>0 < a;\n        (case fetch A a Bk of\n         (a, s') \\<Rightarrow> (s', update a (b, []))) =\n        (0, tp);\n        a \\<le> length A div 2; c = (a, b, []);\n        fetch A a Bk = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> (case fetch (A |+| B) a Bk of\n                          (a, s') \\<Rightarrow> (s', update a (b, []))) =\n                         (Suc (length A div 2), tp)\n 2. \\<And>a b ca.\n       \\<lbrakk>0 < a;\n        (case fetch A a (hd ca) of\n         (a, s') \\<Rightarrow> (s', update a (b, ca))) =\n        (0, tp);\n        a \\<le> length A div 2; c = (a, b, ca); ca \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case fetch (A |+| B) a (hd ca) of\n                          (a, s') \\<Rightarrow> (s', update a (b, ca))) =\n                         (Suc (length A div 2), tp)", "apply(simp del: tm_comp.simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b aa.\n       \\<lbrakk>0 < a; update aa (b, []) = tp; a \\<le> length A div 2;\n        c = (a, b, []); fetch A a Bk = (aa, 0)\\<rbrakk>\n       \\<Longrightarrow> (case fetch (A |+| B) a Bk of\n                          (a, s') \\<Rightarrow> (s', update a (b, []))) =\n                         (Suc (length A div 2), tp)\n 2. \\<And>a b ca.\n       \\<lbrakk>0 < a;\n        (case fetch A a (hd ca) of\n         (a, s') \\<Rightarrow> (s', update a (b, ca))) =\n        (0, tp);\n        a \\<le> length A div 2; c = (a, b, ca); ca \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case fetch (A |+| B) a (hd ca) of\n                          (a, s') \\<Rightarrow> (s', update a (b, ca))) =\n                         (Suc (length A div 2), tp)", "apply(subst tm_comp_fetch_in_A;force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b ca.\n       \\<lbrakk>0 < a;\n        (case fetch A a (hd ca) of\n         (a, s') \\<Rightarrow> (s', update a (b, ca))) =\n        (0, tp);\n        a \\<le> length A div 2; c = (a, b, ca); ca \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case fetch (A |+| B) a (hd ca) of\n                          (a, s') \\<Rightarrow> (s', update a (b, ca))) =\n                         (Suc (length A div 2), tp)", "apply(case_tac \"fetch A a (hd ca)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b ca aa ba.\n       \\<lbrakk>0 < a;\n        (case fetch A a (hd ca) of\n         (a, s') \\<Rightarrow> (s', update a (b, ca))) =\n        (0, tp);\n        a \\<le> length A div 2; c = (a, b, ca); ca \\<noteq> [];\n        fetch A a (hd ca) = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> (case fetch (A |+| B) a (hd ca) of\n                          (a, s') \\<Rightarrow> (s', update a (b, ca))) =\n                         (Suc (length A div 2), tp)", "apply(simp del: tm_comp.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b ca aa.\n       \\<lbrakk>0 < a; update aa (b, ca) = tp; a \\<le> length A div 2;\n        c = (a, b, ca); ca \\<noteq> []; fetch A a (hd ca) = (aa, 0)\\<rbrakk>\n       \\<Longrightarrow> (case fetch (A |+| B) a (hd ca) of\n                          (a, s') \\<Rightarrow> (s', update a (b, ca))) =\n                         (Suc (length A div 2), tp)", "apply(subst tm_comp_fetch_in_A)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b ca aa.\n       \\<lbrakk>0 < a; update aa (b, ca) = tp; a \\<le> length A div 2;\n        c = (a, b, ca); ca \\<noteq> []; fetch A a (hd ca) = (aa, 0)\\<rbrakk>\n       \\<Longrightarrow> fetch A a (hd ca) = (?a34 a b ca aa, 0)\n 2. \\<And>a b ca aa.\n       \\<lbrakk>0 < a; update aa (b, ca) = tp; a \\<le> length A div 2;\n        c = (a, b, ca); ca \\<noteq> []; fetch A a (hd ca) = (aa, 0)\\<rbrakk>\n       \\<Longrightarrow> a \\<le> length A div 2\n 3. \\<And>a b ca aa.\n       \\<lbrakk>0 < a; update aa (b, ca) = tp; a \\<le> length A div 2;\n        c = (a, b, ca); ca \\<noteq> []; fetch A a (hd ca) = (aa, 0)\\<rbrakk>\n       \\<Longrightarrow> a \\<noteq> 0\n 4. \\<And>a b ca aa.\n       \\<lbrakk>0 < a; update aa (b, ca) = tp; a \\<le> length A div 2;\n        c = (a, b, ca); ca \\<noteq> []; fetch A a (hd ca) = (aa, 0)\\<rbrakk>\n       \\<Longrightarrow> (case (?a34 a b ca aa, Suc (length A div 2)) of\n                          (a, s') \\<Rightarrow> (s', update a (b, ca))) =\n                         (Suc (length A div 2), tp)", "apply(auto)[4]"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma step_in_range: \n  assumes h1: \"\\<not> is_final (step0 c A)\"\n    and h2: \"tm_wf (A, 0)\"\n  shows \"fst (step0 c A) \\<le> length A div 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (step0 c A) \\<le> length A div 2", "using h1 h2"], ["proof (prove)\nusing this:\n  \\<not> is_final (step0 c A)\n  tm_wf0 A\n\ngoal (1 subgoal):\n 1. fst (step0 c A) \\<le> length A div 2", "apply(cases c;cases \"fst c\";cases \"hd (snd (snd c))\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b ca.\n       \\<lbrakk>\\<not> is_final (step0 c A); tm_wf0 A; c = (a, b, ca);\n        \\<not> is_final (step0 c A); tm_wf0 A; fst c = 0;\n        \\<not> is_final (step0 c A); tm_wf0 A;\n        hd (snd (snd c)) = Bk\\<rbrakk>\n       \\<Longrightarrow> fst (step0 c A) \\<le> length A div 2\n 2. \\<And>a b ca.\n       \\<lbrakk>\\<not> is_final (step0 c A); tm_wf0 A; c = (a, b, ca);\n        \\<not> is_final (step0 c A); tm_wf0 A; fst c = 0;\n        \\<not> is_final (step0 c A); tm_wf0 A;\n        hd (snd (snd c)) = Oc\\<rbrakk>\n       \\<Longrightarrow> fst (step0 c A) \\<le> length A div 2\n 3. \\<And>a b ca nat.\n       \\<lbrakk>\\<not> is_final (step0 c A); tm_wf0 A; c = (a, b, ca);\n        \\<not> is_final (step0 c A); tm_wf0 A; fst c = Suc nat;\n        \\<not> is_final (step0 c A); tm_wf0 A;\n        hd (snd (snd c)) = Bk\\<rbrakk>\n       \\<Longrightarrow> fst (step0 c A) \\<le> length A div 2\n 4. \\<And>a b ca nat.\n       \\<lbrakk>\\<not> is_final (step0 c A); tm_wf0 A; c = (a, b, ca);\n        \\<not> is_final (step0 c A); tm_wf0 A; fst c = Suc nat;\n        \\<not> is_final (step0 c A); tm_wf0 A;\n        hd (snd (snd c)) = Oc\\<rbrakk>\n       \\<Longrightarrow> fst (step0 c A) \\<le> length A div 2", "by(auto simp add: Let_def case_prod_beta')"], ["", "lemma steps_in_range: \n  assumes h1: \"\\<not> is_final (steps0 (1, tp) A stp)\"\n    and h2: \"tm_wf (A, 0)\"\n  shows \"fst (steps0 (1, tp) A stp) \\<le> length A div 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (steps0 (1, tp) A stp) \\<le> length A div 2", "using h1"], ["proof (prove)\nusing this:\n  \\<not> is_final (steps0 (1, tp) A stp)\n\ngoal (1 subgoal):\n 1. fst (steps0 (1, tp) A stp) \\<le> length A div 2", "proof(induct stp)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<not> is_final (steps0 (1, tp) A 0) \\<Longrightarrow>\n    fst (steps0 (1, tp) A 0) \\<le> length A div 2\n 2. \\<And>stp.\n       \\<lbrakk>\\<not> is_final (steps0 (1, tp) A stp) \\<Longrightarrow>\n                fst (steps0 (1, tp) A stp) \\<le> length A div 2;\n        \\<not> is_final (steps0 (1, tp) A (Suc stp))\\<rbrakk>\n       \\<Longrightarrow> fst (steps0 (1, tp) A (Suc stp))\n                         \\<le> length A div 2", "case 0"], ["proof (state)\nthis:\n  \\<not> is_final (steps0 (1, tp) A 0)\n\ngoal (2 subgoals):\n 1. \\<not> is_final (steps0 (1, tp) A 0) \\<Longrightarrow>\n    fst (steps0 (1, tp) A 0) \\<le> length A div 2\n 2. \\<And>stp.\n       \\<lbrakk>\\<not> is_final (steps0 (1, tp) A stp) \\<Longrightarrow>\n                fst (steps0 (1, tp) A stp) \\<le> length A div 2;\n        \\<not> is_final (steps0 (1, tp) A (Suc stp))\\<rbrakk>\n       \\<Longrightarrow> fst (steps0 (1, tp) A (Suc stp))\n                         \\<le> length A div 2", "then"], ["proof (chain)\npicking this:\n  \\<not> is_final (steps0 (1, tp) A 0)", "show \"fst (steps0 (1, tp) A 0) \\<le> length A div 2\""], ["proof (prove)\nusing this:\n  \\<not> is_final (steps0 (1, tp) A 0)\n\ngoal (1 subgoal):\n 1. fst (steps0 (1, tp) A 0) \\<le> length A div 2", "using h2"], ["proof (prove)\nusing this:\n  \\<not> is_final (steps0 (1, tp) A 0)\n  tm_wf0 A\n\ngoal (1 subgoal):\n 1. fst (steps0 (1, tp) A 0) \\<le> length A div 2", "by (auto)"], ["proof (state)\nthis:\n  fst (steps0 (1, tp) A 0) \\<le> length A div 2\n\ngoal (1 subgoal):\n 1. \\<And>stp.\n       \\<lbrakk>\\<not> is_final (steps0 (1, tp) A stp) \\<Longrightarrow>\n                fst (steps0 (1, tp) A stp) \\<le> length A div 2;\n        \\<not> is_final (steps0 (1, tp) A (Suc stp))\\<rbrakk>\n       \\<Longrightarrow> fst (steps0 (1, tp) A (Suc stp))\n                         \\<le> length A div 2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>stp.\n       \\<lbrakk>\\<not> is_final (steps0 (1, tp) A stp) \\<Longrightarrow>\n                fst (steps0 (1, tp) A stp) \\<le> length A div 2;\n        \\<not> is_final (steps0 (1, tp) A (Suc stp))\\<rbrakk>\n       \\<Longrightarrow> fst (steps0 (1, tp) A (Suc stp))\n                         \\<le> length A div 2", "case (Suc stp)"], ["proof (state)\nthis:\n  \\<not> is_final (steps0 (1, tp) A stp) \\<Longrightarrow>\n  fst (steps0 (1, tp) A stp) \\<le> length A div 2\n  \\<not> is_final (steps0 (1, tp) A (Suc stp))\n\ngoal (1 subgoal):\n 1. \\<And>stp.\n       \\<lbrakk>\\<not> is_final (steps0 (1, tp) A stp) \\<Longrightarrow>\n                fst (steps0 (1, tp) A stp) \\<le> length A div 2;\n        \\<not> is_final (steps0 (1, tp) A (Suc stp))\\<rbrakk>\n       \\<Longrightarrow> fst (steps0 (1, tp) A (Suc stp))\n                         \\<le> length A div 2", "have ih: \"\\<not> is_final (steps0 (1, tp) A stp) \\<Longrightarrow> fst (steps0 (1, tp) A stp) \\<le> length A div 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_final (steps0 (1, tp) A stp) \\<Longrightarrow>\n    fst (steps0 (1, tp) A stp) \\<le> length A div 2", "by fact"], ["proof (state)\nthis:\n  \\<not> is_final (steps0 (1, tp) A stp) \\<Longrightarrow>\n  fst (steps0 (1, tp) A stp) \\<le> length A div 2\n\ngoal (1 subgoal):\n 1. \\<And>stp.\n       \\<lbrakk>\\<not> is_final (steps0 (1, tp) A stp) \\<Longrightarrow>\n                fst (steps0 (1, tp) A stp) \\<le> length A div 2;\n        \\<not> is_final (steps0 (1, tp) A (Suc stp))\\<rbrakk>\n       \\<Longrightarrow> fst (steps0 (1, tp) A (Suc stp))\n                         \\<le> length A div 2", "have h: \"\\<not> is_final (steps0 (1, tp) A (Suc stp))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_final (steps0 (1, tp) A (Suc stp))", "by fact"], ["proof (state)\nthis:\n  \\<not> is_final (steps0 (1, tp) A (Suc stp))\n\ngoal (1 subgoal):\n 1. \\<And>stp.\n       \\<lbrakk>\\<not> is_final (steps0 (1, tp) A stp) \\<Longrightarrow>\n                fst (steps0 (1, tp) A stp) \\<le> length A div 2;\n        \\<not> is_final (steps0 (1, tp) A (Suc stp))\\<rbrakk>\n       \\<Longrightarrow> fst (steps0 (1, tp) A (Suc stp))\n                         \\<le> length A div 2", "from ih h h2"], ["proof (chain)\npicking this:\n  \\<not> is_final (steps0 (1, tp) A stp) \\<Longrightarrow>\n  fst (steps0 (1, tp) A stp) \\<le> length A div 2\n  \\<not> is_final (steps0 (1, tp) A (Suc stp))\n  tm_wf0 A", "show \"fst (steps0 (1, tp) A (Suc stp)) \\<le> length A div 2\""], ["proof (prove)\nusing this:\n  \\<not> is_final (steps0 (1, tp) A stp) \\<Longrightarrow>\n  fst (steps0 (1, tp) A stp) \\<le> length A div 2\n  \\<not> is_final (steps0 (1, tp) A (Suc stp))\n  tm_wf0 A\n\ngoal (1 subgoal):\n 1. fst (steps0 (1, tp) A (Suc stp)) \\<le> length A div 2", "by (metis step_in_range step_red)"], ["proof (state)\nthis:\n  fst (steps0 (1, tp) A (Suc stp)) \\<le> length A div 2\n\ngoal:\nNo subgoals!", "qed"], ["", "(* if A goes into the final state, then A |+| B will go into the first state of B *)"], ["", "lemma tm_comp_next: \n  assumes a_ht: \"steps0 (1, tp) A n = (0, tp')\"\n    and a_wf: \"tm_wf (A, 0)\"\n  obtains n' where \"steps0 (1, tp) (A |+| B) n' = (Suc (length A div 2), tp')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        steps0 (1, tp) (A |+| B) n' =\n        (Suc (length A div 2), tp') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        steps0 (1, tp) (A |+| B) n' =\n        (Suc (length A div 2), tp') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "assume a: \"\\<And>n. steps (1, tp) (A |+| B, 0) n = (Suc (length A div 2), tp') \\<Longrightarrow> thesis\""], ["proof (state)\nthis:\n  steps0 (1, tp) (A |+| B) ?n =\n  (Suc (length A div 2), tp') \\<Longrightarrow>\n  thesis\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        steps0 (1, tp) (A |+| B) n' =\n        (Suc (length A div 2), tp') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "obtain stp' where fin: \"\\<not> is_final (steps0 (1, tp) A stp')\" and h: \"steps0 (1, tp) A (Suc stp') = (0, tp')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>stp'.\n        \\<lbrakk>\\<not> is_final (steps0 (1, tp) A stp');\n         steps0 (1, tp) A (Suc stp') = (0, tp')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using before_final[OF a_ht]"], ["proof (prove)\nusing this:\n  \\<exists>n'.\n     \\<not> is_final (steps0 (1, tp) A n') \\<and>\n     steps0 (1, tp) A (Suc n') = (0, tp')\n\ngoal (1 subgoal):\n 1. (\\<And>stp'.\n        \\<lbrakk>\\<not> is_final (steps0 (1, tp) A stp');\n         steps0 (1, tp) A (Suc stp') = (0, tp')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<not> is_final (steps0 (1, tp) A stp')\n  steps0 (1, tp) A (Suc stp') = (0, tp')\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        steps0 (1, tp) (A |+| B) n' =\n        (Suc (length A div 2), tp') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "from fin"], ["proof (chain)\npicking this:\n  \\<not> is_final (steps0 (1, tp) A stp')", "have h1:\"steps0 (1, tp) (A |+| B) stp' = steps0 (1, tp) A stp'\""], ["proof (prove)\nusing this:\n  \\<not> is_final (steps0 (1, tp) A stp')\n\ngoal (1 subgoal):\n 1. steps0 (1, tp) (A |+| B) stp' = steps0 (1, tp) A stp'", "by (rule tm_comp_steps)"], ["proof (state)\nthis:\n  steps0 (1, tp) (A |+| B) stp' = steps0 (1, tp) A stp'\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        steps0 (1, tp) (A |+| B) n' =\n        (Suc (length A div 2), tp') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "from h"], ["proof (chain)\npicking this:\n  steps0 (1, tp) A (Suc stp') = (0, tp')", "have h2: \"step0 (steps0 (1, tp) A stp') A = (0, tp')\""], ["proof (prove)\nusing this:\n  steps0 (1, tp) A (Suc stp') = (0, tp')\n\ngoal (1 subgoal):\n 1. step0 (steps0 (1, tp) A stp') A = (0, tp')", "by (simp only: step_red)"], ["proof (state)\nthis:\n  step0 (steps0 (1, tp) A stp') A = (0, tp')\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        steps0 (1, tp) (A |+| B) n' =\n        (Suc (length A div 2), tp') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "have \"steps0 (1, tp) (A |+| B) (Suc stp') = step0 (steps0 (1, tp) (A |+| B) stp') (A |+| B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. steps0 (1, tp) (A |+| B) (Suc stp') =\n    step0 (steps0 (1, tp) (A |+| B) stp') (A |+| B)", "by (simp only: step_red)"], ["proof (state)\nthis:\n  steps0 (1, tp) (A |+| B) (Suc stp') =\n  step0 (steps0 (1, tp) (A |+| B) stp') (A |+| B)\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        steps0 (1, tp) (A |+| B) n' =\n        (Suc (length A div 2), tp') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "also"], ["proof (state)\nthis:\n  steps0 (1, tp) (A |+| B) (Suc stp') =\n  step0 (steps0 (1, tp) (A |+| B) stp') (A |+| B)\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        steps0 (1, tp) (A |+| B) n' =\n        (Suc (length A div 2), tp') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "have \"... = step0 (steps0 (1, tp) A stp') (A |+| B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. step0 (steps0 (1, tp) (A |+| B) stp') (A |+| B) =\n    step0 (steps0 (1, tp) A stp') (A |+| B)", "using h1"], ["proof (prove)\nusing this:\n  steps0 (1, tp) (A |+| B) stp' = steps0 (1, tp) A stp'\n\ngoal (1 subgoal):\n 1. step0 (steps0 (1, tp) (A |+| B) stp') (A |+| B) =\n    step0 (steps0 (1, tp) A stp') (A |+| B)", "by simp"], ["proof (state)\nthis:\n  step0 (steps0 (1, tp) (A |+| B) stp') (A |+| B) =\n  step0 (steps0 (1, tp) A stp') (A |+| B)\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        steps0 (1, tp) (A |+| B) n' =\n        (Suc (length A div 2), tp') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "also"], ["proof (state)\nthis:\n  step0 (steps0 (1, tp) (A |+| B) stp') (A |+| B) =\n  step0 (steps0 (1, tp) A stp') (A |+| B)\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        steps0 (1, tp) (A |+| B) n' =\n        (Suc (length A div 2), tp') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "have \"... = (Suc (length A div 2), tp')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. step0 (steps0 (1, tp) A stp') (A |+| B) = (Suc (length A div 2), tp')", "by (rule tm_comp_exec_after_first[OF fin h2 steps_in_range[OF fin a_wf]])"], ["proof (state)\nthis:\n  step0 (steps0 (1, tp) A stp') (A |+| B) = (Suc (length A div 2), tp')\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        steps0 (1, tp) (A |+| B) n' =\n        (Suc (length A div 2), tp') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "finally"], ["proof (chain)\npicking this:\n  steps0 (1, tp) (A |+| B) (Suc stp') = (Suc (length A div 2), tp')", "show thesis"], ["proof (prove)\nusing this:\n  steps0 (1, tp) (A |+| B) (Suc stp') = (Suc (length A div 2), tp')\n\ngoal (1 subgoal):\n 1. thesis", "using a"], ["proof (prove)\nusing this:\n  steps0 (1, tp) (A |+| B) (Suc stp') = (Suc (length A div 2), tp')\n  steps0 (1, tp) (A |+| B) ?n =\n  (Suc (length A div 2), tp') \\<Longrightarrow>\n  thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tm_comp_fetch_second_zero:\n  assumes h1: \"fetch B s x = (a, 0)\"\n    and hs: \"tm_wf (A, 0)\" \"s \\<noteq> 0\"\n  shows \"fetch (A |+| B) (s + (length A div 2)) x = (a, 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fetch (A |+| B) (s + length A div 2) x = (a, 0)", "using h1 hs"], ["proof (prove)\nusing this:\n  fetch B s x = (a, 0)\n  tm_wf0 A\n  s \\<noteq> 0\n\ngoal (1 subgoal):\n 1. fetch (A |+| B) (s + length A div 2) x = (a, 0)", "by(cases x; cases s; fastforce simp: tm_comp_length nth_append)"], ["", "lemma tm_comp_fetch_second_inst:\n  assumes h1: \"fetch B sa x = (a, s)\"\n    and hs: \"tm_wf (A, 0)\" \"sa \\<noteq> 0\" \"s \\<noteq> 0\"\n  shows \"fetch (A |+| B) (sa + length A div 2) x = (a, s + length A div 2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fetch (A |+| B) (sa + length A div 2) x = (a, s + length A div 2)", "using h1 hs"], ["proof (prove)\nusing this:\n  fetch B sa x = (a, s)\n  tm_wf0 A\n  sa \\<noteq> 0\n  s \\<noteq> 0\n\ngoal (1 subgoal):\n 1. fetch (A |+| B) (sa + length A div 2) x = (a, s + length A div 2)", "by(cases x; cases sa; fastforce simp: tm_comp_length nth_append)"], ["", "lemma tm_comp_second:\n  assumes a_wf: \"tm_wf (A, 0)\"\n    and steps: \"steps0 (1, l, r) B stp = (s', l', r')\"\n  shows \"steps0 (Suc (length A div 2), l, r)  (A |+| B) stp \n    = (if s' = 0 then 0 else s' + length A div 2, l', r')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n    (if s' = 0 then 0 else s' + length A div 2, l', r')", "using steps"], ["proof (prove)\nusing this:\n  steps0 (1, l, r) B stp = (s', l', r')\n\ngoal (1 subgoal):\n 1. steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n    (if s' = 0 then 0 else s' + length A div 2, l', r')", "proof(induct stp arbitrary: s' l' r')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s' l' r'.\n       steps0 (1, l, r) B 0 = (s', l', r') \\<Longrightarrow>\n       steps0 (Suc (length A div 2), l, r) (A |+| B) 0 =\n       (if s' = 0 then 0 else s' + length A div 2, l', r')\n 2. \\<And>stp s' l' r'.\n       \\<lbrakk>\\<And>s' l' r'.\n                   steps0 (1, l, r) B stp = (s', l', r') \\<Longrightarrow>\n                   steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n                   (if s' = 0 then 0 else s' + length A div 2, l', r');\n        steps0 (1, l, r) B (Suc stp) = (s', l', r')\\<rbrakk>\n       \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                          (Suc stp) =\n                         (if s' = 0 then 0 else s' + length A div 2, l', r')", "case 0"], ["proof (state)\nthis:\n  steps0 (1, l, r) B 0 = (s', l', r')\n\ngoal (2 subgoals):\n 1. \\<And>s' l' r'.\n       steps0 (1, l, r) B 0 = (s', l', r') \\<Longrightarrow>\n       steps0 (Suc (length A div 2), l, r) (A |+| B) 0 =\n       (if s' = 0 then 0 else s' + length A div 2, l', r')\n 2. \\<And>stp s' l' r'.\n       \\<lbrakk>\\<And>s' l' r'.\n                   steps0 (1, l, r) B stp = (s', l', r') \\<Longrightarrow>\n                   steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n                   (if s' = 0 then 0 else s' + length A div 2, l', r');\n        steps0 (1, l, r) B (Suc stp) = (s', l', r')\\<rbrakk>\n       \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                          (Suc stp) =\n                         (if s' = 0 then 0 else s' + length A div 2, l', r')", "then"], ["proof (chain)\npicking this:\n  steps0 (1, l, r) B 0 = (s', l', r')", "show ?case"], ["proof (prove)\nusing this:\n  steps0 (1, l, r) B 0 = (s', l', r')\n\ngoal (1 subgoal):\n 1. steps0 (Suc (length A div 2), l, r) (A |+| B) 0 =\n    (if s' = 0 then 0 else s' + length A div 2, l', r')", "by simp"], ["proof (state)\nthis:\n  steps0 (Suc (length A div 2), l, r) (A |+| B) 0 =\n  (if s' = 0 then 0 else s' + length A div 2, l', r')\n\ngoal (1 subgoal):\n 1. \\<And>stp s' l' r'.\n       \\<lbrakk>\\<And>s' l' r'.\n                   steps0 (1, l, r) B stp = (s', l', r') \\<Longrightarrow>\n                   steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n                   (if s' = 0 then 0 else s' + length A div 2, l', r');\n        steps0 (1, l, r) B (Suc stp) = (s', l', r')\\<rbrakk>\n       \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                          (Suc stp) =\n                         (if s' = 0 then 0 else s' + length A div 2, l', r')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>stp s' l' r'.\n       \\<lbrakk>\\<And>s' l' r'.\n                   steps0 (1, l, r) B stp = (s', l', r') \\<Longrightarrow>\n                   steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n                   (if s' = 0 then 0 else s' + length A div 2, l', r');\n        steps0 (1, l, r) B (Suc stp) = (s', l', r')\\<rbrakk>\n       \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                          (Suc stp) =\n                         (if s' = 0 then 0 else s' + length A div 2, l', r')", "case (Suc stp s' l' r')"], ["proof (state)\nthis:\n  steps0 (1, l, r) B stp = (?s', ?l', ?r') \\<Longrightarrow>\n  steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n  (if ?s' = 0 then 0 else ?s' + length A div 2, ?l', ?r')\n  steps0 (1, l, r) B (Suc stp) = (s', l', r')\n\ngoal (1 subgoal):\n 1. \\<And>stp s' l' r'.\n       \\<lbrakk>\\<And>s' l' r'.\n                   steps0 (1, l, r) B stp = (s', l', r') \\<Longrightarrow>\n                   steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n                   (if s' = 0 then 0 else s' + length A div 2, l', r');\n        steps0 (1, l, r) B (Suc stp) = (s', l', r')\\<rbrakk>\n       \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                          (Suc stp) =\n                         (if s' = 0 then 0 else s' + length A div 2, l', r')", "obtain s'' l'' r'' where a: \"steps0 (1, l, r) B stp = (s'', l'', r'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s'' l'' r''.\n        steps0 (1, l, r) B stp = (s'', l'', r'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis is_final.cases)"], ["proof (state)\nthis:\n  steps0 (1, l, r) B stp = (s'', l'', r'')\n\ngoal (1 subgoal):\n 1. \\<And>stp s' l' r'.\n       \\<lbrakk>\\<And>s' l' r'.\n                   steps0 (1, l, r) B stp = (s', l', r') \\<Longrightarrow>\n                   steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n                   (if s' = 0 then 0 else s' + length A div 2, l', r');\n        steps0 (1, l, r) B (Suc stp) = (s', l', r')\\<rbrakk>\n       \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                          (Suc stp) =\n                         (if s' = 0 then 0 else s' + length A div 2, l', r')", "then"], ["proof (chain)\npicking this:\n  steps0 (1, l, r) B stp = (s'', l'', r'')", "have ih1: \"s'' = 0 \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B) stp = (0, l'', r'')\"\n    and ih2: \"s'' \\<noteq> 0 \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B) stp = (s'' + length A div 2, l'', r'')\""], ["proof (prove)\nusing this:\n  steps0 (1, l, r) B stp = (s'', l'', r'')\n\ngoal (1 subgoal):\n 1. (s'' = 0 \\<Longrightarrow>\n     steps0 (Suc (length A div 2), l, r) (A |+| B) stp = (0, l'', r'')) &&&\n    (s'' \\<noteq> 0 \\<Longrightarrow>\n     steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n     (s'' + length A div 2, l'', r''))", "using Suc"], ["proof (prove)\nusing this:\n  steps0 (1, l, r) B stp = (s'', l'', r'')\n  steps0 (1, l, r) B stp = (?s', ?l', ?r') \\<Longrightarrow>\n  steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n  (if ?s' = 0 then 0 else ?s' + length A div 2, ?l', ?r')\n  steps0 (1, l, r) B (Suc stp) = (s', l', r')\n\ngoal (1 subgoal):\n 1. (s'' = 0 \\<Longrightarrow>\n     steps0 (Suc (length A div 2), l, r) (A |+| B) stp = (0, l'', r'')) &&&\n    (s'' \\<noteq> 0 \\<Longrightarrow>\n     steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n     (s'' + length A div 2, l'', r''))", "by (auto)"], ["proof (state)\nthis:\n  s'' = 0 \\<Longrightarrow>\n  steps0 (Suc (length A div 2), l, r) (A |+| B) stp = (0, l'', r'')\n  s'' \\<noteq> 0 \\<Longrightarrow>\n  steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n  (s'' + length A div 2, l'', r'')\n\ngoal (1 subgoal):\n 1. \\<And>stp s' l' r'.\n       \\<lbrakk>\\<And>s' l' r'.\n                   steps0 (1, l, r) B stp = (s', l', r') \\<Longrightarrow>\n                   steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n                   (if s' = 0 then 0 else s' + length A div 2, l', r');\n        steps0 (1, l, r) B (Suc stp) = (s', l', r')\\<rbrakk>\n       \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                          (Suc stp) =\n                         (if s' = 0 then 0 else s' + length A div 2, l', r')", "have h: \"steps0 (1, l, r) B (Suc stp) = (s', l', r')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. steps0 (1, l, r) B (Suc stp) = (s', l', r')", "by fact"], ["proof (state)\nthis:\n  steps0 (1, l, r) B (Suc stp) = (s', l', r')\n\ngoal (1 subgoal):\n 1. \\<And>stp s' l' r'.\n       \\<lbrakk>\\<And>s' l' r'.\n                   steps0 (1, l, r) B stp = (s', l', r') \\<Longrightarrow>\n                   steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n                   (if s' = 0 then 0 else s' + length A div 2, l', r');\n        steps0 (1, l, r) B (Suc stp) = (s', l', r')\\<rbrakk>\n       \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                          (Suc stp) =\n                         (if s' = 0 then 0 else s' + length A div 2, l', r')", "{"], ["proof (state)\nthis:\n  steps0 (1, l, r) B (Suc stp) = (s', l', r')\n\ngoal (1 subgoal):\n 1. \\<And>stp s' l' r'.\n       \\<lbrakk>\\<And>s' l' r'.\n                   steps0 (1, l, r) B stp = (s', l', r') \\<Longrightarrow>\n                   steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n                   (if s' = 0 then 0 else s' + length A div 2, l', r');\n        steps0 (1, l, r) B (Suc stp) = (s', l', r')\\<rbrakk>\n       \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                          (Suc stp) =\n                         (if s' = 0 then 0 else s' + length A div 2, l', r')", "assume \"s'' = 0\""], ["proof (state)\nthis:\n  s'' = 0\n\ngoal (1 subgoal):\n 1. \\<And>stp s' l' r'.\n       \\<lbrakk>\\<And>s' l' r'.\n                   steps0 (1, l, r) B stp = (s', l', r') \\<Longrightarrow>\n                   steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n                   (if s' = 0 then 0 else s' + length A div 2, l', r');\n        steps0 (1, l, r) B (Suc stp) = (s', l', r')\\<rbrakk>\n       \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                          (Suc stp) =\n                         (if s' = 0 then 0 else s' + length A div 2, l', r')", "then"], ["proof (chain)\npicking this:\n  s'' = 0", "have ?case"], ["proof (prove)\nusing this:\n  s'' = 0\n\ngoal (1 subgoal):\n 1. steps0 (Suc (length A div 2), l, r) (A |+| B) (Suc stp) =\n    (if s' = 0 then 0 else s' + length A div 2, l', r')", "using a h ih1"], ["proof (prove)\nusing this:\n  s'' = 0\n  steps0 (1, l, r) B stp = (s'', l'', r'')\n  steps0 (1, l, r) B (Suc stp) = (s', l', r')\n  s'' = 0 \\<Longrightarrow>\n  steps0 (Suc (length A div 2), l, r) (A |+| B) stp = (0, l'', r'')\n\ngoal (1 subgoal):\n 1. steps0 (Suc (length A div 2), l, r) (A |+| B) (Suc stp) =\n    (if s' = 0 then 0 else s' + length A div 2, l', r')", "by (simp del: steps.simps)"], ["proof (state)\nthis:\n  steps0 (Suc (length A div 2), l, r) (A |+| B) (Suc stp) =\n  (if s' = 0 then 0 else s' + length A div 2, l', r')\n\ngoal (1 subgoal):\n 1. \\<And>stp s' l' r'.\n       \\<lbrakk>\\<And>s' l' r'.\n                   steps0 (1, l, r) B stp = (s', l', r') \\<Longrightarrow>\n                   steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n                   (if s' = 0 then 0 else s' + length A div 2, l', r');\n        steps0 (1, l, r) B (Suc stp) = (s', l', r')\\<rbrakk>\n       \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                          (Suc stp) =\n                         (if s' = 0 then 0 else s' + length A div 2, l', r')", "}"], ["proof (state)\nthis:\n  s'' = 0 \\<Longrightarrow>\n  steps0 (Suc (length A div 2), l, r) (A |+| B) (Suc stp) =\n  (if s' = 0 then 0 else s' + length A div 2, l', r')\n\ngoal (1 subgoal):\n 1. \\<And>stp s' l' r'.\n       \\<lbrakk>\\<And>s' l' r'.\n                   steps0 (1, l, r) B stp = (s', l', r') \\<Longrightarrow>\n                   steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n                   (if s' = 0 then 0 else s' + length A div 2, l', r');\n        steps0 (1, l, r) B (Suc stp) = (s', l', r')\\<rbrakk>\n       \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                          (Suc stp) =\n                         (if s' = 0 then 0 else s' + length A div 2, l', r')", "moreover"], ["proof (state)\nthis:\n  s'' = 0 \\<Longrightarrow>\n  steps0 (Suc (length A div 2), l, r) (A |+| B) (Suc stp) =\n  (if s' = 0 then 0 else s' + length A div 2, l', r')\n\ngoal (1 subgoal):\n 1. \\<And>stp s' l' r'.\n       \\<lbrakk>\\<And>s' l' r'.\n                   steps0 (1, l, r) B stp = (s', l', r') \\<Longrightarrow>\n                   steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n                   (if s' = 0 then 0 else s' + length A div 2, l', r');\n        steps0 (1, l, r) B (Suc stp) = (s', l', r')\\<rbrakk>\n       \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                          (Suc stp) =\n                         (if s' = 0 then 0 else s' + length A div 2, l', r')", "{"], ["proof (state)\nthis:\n  s'' = 0 \\<Longrightarrow>\n  steps0 (Suc (length A div 2), l, r) (A |+| B) (Suc stp) =\n  (if s' = 0 then 0 else s' + length A div 2, l', r')\n\ngoal (1 subgoal):\n 1. \\<And>stp s' l' r'.\n       \\<lbrakk>\\<And>s' l' r'.\n                   steps0 (1, l, r) B stp = (s', l', r') \\<Longrightarrow>\n                   steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n                   (if s' = 0 then 0 else s' + length A div 2, l', r');\n        steps0 (1, l, r) B (Suc stp) = (s', l', r')\\<rbrakk>\n       \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                          (Suc stp) =\n                         (if s' = 0 then 0 else s' + length A div 2, l', r')", "assume as: \"s'' \\<noteq> 0\" \"s' = 0\""], ["proof (state)\nthis:\n  s'' \\<noteq> 0\n  s' = 0\n\ngoal (1 subgoal):\n 1. \\<And>stp s' l' r'.\n       \\<lbrakk>\\<And>s' l' r'.\n                   steps0 (1, l, r) B stp = (s', l', r') \\<Longrightarrow>\n                   steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n                   (if s' = 0 then 0 else s' + length A div 2, l', r');\n        steps0 (1, l, r) B (Suc stp) = (s', l', r')\\<rbrakk>\n       \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                          (Suc stp) =\n                         (if s' = 0 then 0 else s' + length A div 2, l', r')", "from as a h"], ["proof (chain)\npicking this:\n  s'' \\<noteq> 0\n  s' = 0\n  steps0 (1, l, r) B stp = (s'', l'', r'')\n  steps0 (1, l, r) B (Suc stp) = (s', l', r')", "have \"step0 (s'', l'', r'') B = (0, l', r')\""], ["proof (prove)\nusing this:\n  s'' \\<noteq> 0\n  s' = 0\n  steps0 (1, l, r) B stp = (s'', l'', r'')\n  steps0 (1, l, r) B (Suc stp) = (s', l', r')\n\ngoal (1 subgoal):\n 1. step0 (s'', l'', r'') B = (0, l', r')", "by (simp del: steps.simps)"], ["proof (state)\nthis:\n  step0 (s'', l'', r'') B = (0, l', r')\n\ngoal (1 subgoal):\n 1. \\<And>stp s' l' r'.\n       \\<lbrakk>\\<And>s' l' r'.\n                   steps0 (1, l, r) B stp = (s', l', r') \\<Longrightarrow>\n                   steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n                   (if s' = 0 then 0 else s' + length A div 2, l', r');\n        steps0 (1, l, r) B (Suc stp) = (s', l', r')\\<rbrakk>\n       \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                          (Suc stp) =\n                         (if s' = 0 then 0 else s' + length A div 2, l', r')", "with as"], ["proof (chain)\npicking this:\n  s'' \\<noteq> 0\n  s' = 0\n  step0 (s'', l'', r'') B = (0, l', r')", "have ?case"], ["proof (prove)\nusing this:\n  s'' \\<noteq> 0\n  s' = 0\n  step0 (s'', l'', r'') B = (0, l', r')\n\ngoal (1 subgoal):\n 1. steps0 (Suc (length A div 2), l, r) (A |+| B) (Suc stp) =\n    (if s' = 0 then 0 else s' + length A div 2, l', r')", "apply(cases \"fetch B s'' (read r'')\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>s'' \\<noteq> 0; s' = 0;\n        step0 (s'', l'', r'') B = (0, l', r');\n        fetch B s'' (read r'') = (a, b)\\<rbrakk>\n       \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                          (Suc stp) =\n                         (if s' = 0 then 0 else s' + length A div 2, l', r')", "by (auto simp add: tm_comp_fetch_second_zero[OF _ a_wf] ih2[OF as(1)]\n          simp del: tm_comp.simps steps.simps)"], ["proof (state)\nthis:\n  steps0 (Suc (length A div 2), l, r) (A |+| B) (Suc stp) =\n  (if s' = 0 then 0 else s' + length A div 2, l', r')\n\ngoal (1 subgoal):\n 1. \\<And>stp s' l' r'.\n       \\<lbrakk>\\<And>s' l' r'.\n                   steps0 (1, l, r) B stp = (s', l', r') \\<Longrightarrow>\n                   steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n                   (if s' = 0 then 0 else s' + length A div 2, l', r');\n        steps0 (1, l, r) B (Suc stp) = (s', l', r')\\<rbrakk>\n       \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                          (Suc stp) =\n                         (if s' = 0 then 0 else s' + length A div 2, l', r')", "}"], ["proof (state)\nthis:\n  \\<lbrakk>s'' \\<noteq> 0; s' = 0\\<rbrakk>\n  \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                     (Suc stp) =\n                    (if s' = 0 then 0 else s' + length A div 2, l', r')\n\ngoal (1 subgoal):\n 1. \\<And>stp s' l' r'.\n       \\<lbrakk>\\<And>s' l' r'.\n                   steps0 (1, l, r) B stp = (s', l', r') \\<Longrightarrow>\n                   steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n                   (if s' = 0 then 0 else s' + length A div 2, l', r');\n        steps0 (1, l, r) B (Suc stp) = (s', l', r')\\<rbrakk>\n       \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                          (Suc stp) =\n                         (if s' = 0 then 0 else s' + length A div 2, l', r')", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>s'' \\<noteq> 0; s' = 0\\<rbrakk>\n  \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                     (Suc stp) =\n                    (if s' = 0 then 0 else s' + length A div 2, l', r')\n\ngoal (1 subgoal):\n 1. \\<And>stp s' l' r'.\n       \\<lbrakk>\\<And>s' l' r'.\n                   steps0 (1, l, r) B stp = (s', l', r') \\<Longrightarrow>\n                   steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n                   (if s' = 0 then 0 else s' + length A div 2, l', r');\n        steps0 (1, l, r) B (Suc stp) = (s', l', r')\\<rbrakk>\n       \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                          (Suc stp) =\n                         (if s' = 0 then 0 else s' + length A div 2, l', r')", "{"], ["proof (state)\nthis:\n  \\<lbrakk>s'' \\<noteq> 0; s' = 0\\<rbrakk>\n  \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                     (Suc stp) =\n                    (if s' = 0 then 0 else s' + length A div 2, l', r')\n\ngoal (1 subgoal):\n 1. \\<And>stp s' l' r'.\n       \\<lbrakk>\\<And>s' l' r'.\n                   steps0 (1, l, r) B stp = (s', l', r') \\<Longrightarrow>\n                   steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n                   (if s' = 0 then 0 else s' + length A div 2, l', r');\n        steps0 (1, l, r) B (Suc stp) = (s', l', r')\\<rbrakk>\n       \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                          (Suc stp) =\n                         (if s' = 0 then 0 else s' + length A div 2, l', r')", "assume as: \"s'' \\<noteq> 0\" \"s' \\<noteq> 0\""], ["proof (state)\nthis:\n  s'' \\<noteq> 0\n  s' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>stp s' l' r'.\n       \\<lbrakk>\\<And>s' l' r'.\n                   steps0 (1, l, r) B stp = (s', l', r') \\<Longrightarrow>\n                   steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n                   (if s' = 0 then 0 else s' + length A div 2, l', r');\n        steps0 (1, l, r) B (Suc stp) = (s', l', r')\\<rbrakk>\n       \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                          (Suc stp) =\n                         (if s' = 0 then 0 else s' + length A div 2, l', r')", "from as a h"], ["proof (chain)\npicking this:\n  s'' \\<noteq> 0\n  s' \\<noteq> 0\n  steps0 (1, l, r) B stp = (s'', l'', r'')\n  steps0 (1, l, r) B (Suc stp) = (s', l', r')", "have \"step0 (s'', l'', r'') B = (s', l', r')\""], ["proof (prove)\nusing this:\n  s'' \\<noteq> 0\n  s' \\<noteq> 0\n  steps0 (1, l, r) B stp = (s'', l'', r'')\n  steps0 (1, l, r) B (Suc stp) = (s', l', r')\n\ngoal (1 subgoal):\n 1. step0 (s'', l'', r'') B = (s', l', r')", "by (simp del: steps.simps)"], ["proof (state)\nthis:\n  step0 (s'', l'', r'') B = (s', l', r')\n\ngoal (1 subgoal):\n 1. \\<And>stp s' l' r'.\n       \\<lbrakk>\\<And>s' l' r'.\n                   steps0 (1, l, r) B stp = (s', l', r') \\<Longrightarrow>\n                   steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n                   (if s' = 0 then 0 else s' + length A div 2, l', r');\n        steps0 (1, l, r) B (Suc stp) = (s', l', r')\\<rbrakk>\n       \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                          (Suc stp) =\n                         (if s' = 0 then 0 else s' + length A div 2, l', r')", "with as"], ["proof (chain)\npicking this:\n  s'' \\<noteq> 0\n  s' \\<noteq> 0\n  step0 (s'', l'', r'') B = (s', l', r')", "have ?case"], ["proof (prove)\nusing this:\n  s'' \\<noteq> 0\n  s' \\<noteq> 0\n  step0 (s'', l'', r'') B = (s', l', r')\n\ngoal (1 subgoal):\n 1. steps0 (Suc (length A div 2), l, r) (A |+| B) (Suc stp) =\n    (if s' = 0 then 0 else s' + length A div 2, l', r')", "apply(simp add: ih2[OF as(1)] del: tm_comp.simps steps.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < s''; 0 < s';\n     (case fetch B s'' (read r'') of\n      (a, s') \\<Rightarrow> (s', update a (l'', r''))) =\n     (s', l', r')\\<rbrakk>\n    \\<Longrightarrow> (r'' = [] \\<longrightarrow>\n                       (case fetch (A |+| B) (s'' + length A div 2) Bk of\n                        (a, s') \\<Rightarrow> (s', update a (l'', []))) =\n                       (s' + length A div 2, l', r')) \\<and>\n                      (r'' \\<noteq> [] \\<longrightarrow>\n                       (case fetch (A |+| B) (s'' + length A div 2)\n                              (hd r'') of\n                        (a, s') \\<Rightarrow> (s', update a (l'', r''))) =\n                       (s' + length A div 2, l', r'))", "apply(case_tac \"fetch B s'' (read r'')\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>0 < s''; 0 < s';\n        (case fetch B s'' (read r'') of\n         (a, s') \\<Rightarrow> (s', update a (l'', r''))) =\n        (s', l', r');\n        fetch B s'' (read r'') = (a, b)\\<rbrakk>\n       \\<Longrightarrow> (r'' = [] \\<longrightarrow>\n                          (case fetch (A |+| B) (s'' + length A div 2) Bk of\n                           (a, s') \\<Rightarrow> (s', update a (l'', []))) =\n                          (s' + length A div 2, l', r')) \\<and>\n                         (r'' \\<noteq> [] \\<longrightarrow>\n                          (case fetch (A |+| B) (s'' + length A div 2)\n                                 (hd r'') of\n                           (a, s') \\<Rightarrow>\n                             (s', update a (l'', r''))) =\n                          (s' + length A div 2, l', r'))", "apply(auto simp add: tm_comp_fetch_second_inst[OF _ a_wf as] simp del: tm_comp.simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  steps0 (Suc (length A div 2), l, r) (A |+| B) (Suc stp) =\n  (if s' = 0 then 0 else s' + length A div 2, l', r')\n\ngoal (1 subgoal):\n 1. \\<And>stp s' l' r'.\n       \\<lbrakk>\\<And>s' l' r'.\n                   steps0 (1, l, r) B stp = (s', l', r') \\<Longrightarrow>\n                   steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n                   (if s' = 0 then 0 else s' + length A div 2, l', r');\n        steps0 (1, l, r) B (Suc stp) = (s', l', r')\\<rbrakk>\n       \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                          (Suc stp) =\n                         (if s' = 0 then 0 else s' + length A div 2, l', r')", "}"], ["proof (state)\nthis:\n  \\<lbrakk>s'' \\<noteq> 0; s' \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                     (Suc stp) =\n                    (if s' = 0 then 0 else s' + length A div 2, l', r')\n\ngoal (1 subgoal):\n 1. \\<And>stp s' l' r'.\n       \\<lbrakk>\\<And>s' l' r'.\n                   steps0 (1, l, r) B stp = (s', l', r') \\<Longrightarrow>\n                   steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n                   (if s' = 0 then 0 else s' + length A div 2, l', r');\n        steps0 (1, l, r) B (Suc stp) = (s', l', r')\\<rbrakk>\n       \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                          (Suc stp) =\n                         (if s' = 0 then 0 else s' + length A div 2, l', r')", "ultimately"], ["proof (chain)\npicking this:\n  s'' = 0 \\<Longrightarrow>\n  steps0 (Suc (length A div 2), l, r) (A |+| B) (Suc stp) =\n  (if s' = 0 then 0 else s' + length A div 2, l', r')\n  \\<lbrakk>s'' \\<noteq> 0; s' = 0\\<rbrakk>\n  \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                     (Suc stp) =\n                    (if s' = 0 then 0 else s' + length A div 2, l', r')\n  \\<lbrakk>s'' \\<noteq> 0; s' \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                     (Suc stp) =\n                    (if s' = 0 then 0 else s' + length A div 2, l', r')", "show ?case"], ["proof (prove)\nusing this:\n  s'' = 0 \\<Longrightarrow>\n  steps0 (Suc (length A div 2), l, r) (A |+| B) (Suc stp) =\n  (if s' = 0 then 0 else s' + length A div 2, l', r')\n  \\<lbrakk>s'' \\<noteq> 0; s' = 0\\<rbrakk>\n  \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                     (Suc stp) =\n                    (if s' = 0 then 0 else s' + length A div 2, l', r')\n  \\<lbrakk>s'' \\<noteq> 0; s' \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> steps0 (Suc (length A div 2), l, r) (A |+| B)\n                     (Suc stp) =\n                    (if s' = 0 then 0 else s' + length A div 2, l', r')\n\ngoal (1 subgoal):\n 1. steps0 (Suc (length A div 2), l, r) (A |+| B) (Suc stp) =\n    (if s' = 0 then 0 else s' + length A div 2, l', r')", "by blast"], ["proof (state)\nthis:\n  steps0 (Suc (length A div 2), l, r) (A |+| B) (Suc stp) =\n  (if s' = 0 then 0 else s' + length A div 2, l', r')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tm_comp_final:\n  assumes \"tm_wf (A, 0)\"  \n    and \"steps0 (1, l, r) B stp = (0, l', r')\"\n  shows \"steps0 (Suc (length A div 2), l, r)  (A |+| B) stp = (0, l', r')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. steps0 (Suc (length A div 2), l, r) (A |+| B) stp = (0, l', r')", "using tm_comp_second[OF assms]"], ["proof (prove)\nusing this:\n  steps0 (Suc (length A div 2), l, r) (A |+| B) stp =\n  (if 0 = 0 then 0 else 0 + length A div 2, l', r')\n\ngoal (1 subgoal):\n 1. steps0 (Suc (length A div 2), l, r) (A |+| B) stp = (0, l', r')", "by (simp)"], ["", "end"]]}