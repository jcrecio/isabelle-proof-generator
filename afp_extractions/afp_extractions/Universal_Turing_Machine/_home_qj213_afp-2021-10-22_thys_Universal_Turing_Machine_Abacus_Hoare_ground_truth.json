{"file_name": "/home/qj213/afp-2021-10-22/thys/Universal_Turing_Machine/Abacus_Hoare.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Universal_Turing_Machine", "problem_names": ["lemma abc_Hoare_haltI:\n  assumes \"\\<And>lm. P lm \\<Longrightarrow> \\<exists>n. abc_final (abc_steps_l (0, lm) p n) p \\<and> Q abc_holds_for (abc_steps_l (0, lm) p n)\"\n  shows \"{P} (p::abc_prog) {Q}\"", "lemma abc_Hoare_unhaltI:\n  assumes \"\\<And>args n. P args \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) p n) p\"\n  shows \"{P} (p::abc_prog) \\<up>\"", "lemma abc_comp_first_step_eq_pre: \n  \"s < length A\n \\<Longrightarrow> abc_step_l (s, lm) (abc_fetch s (A [+] B)) = \n    abc_step_l (s, lm) (abc_fetch s A)\"", "lemma abc_before_final: \n  \"\\<lbrakk>abc_final (abc_steps_l (0, lm) p n) p; p \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> \\<exists> n'. abc_notfinal (abc_steps_l (0, lm) p n') p \\<and> \n            abc_final (abc_steps_l (0, lm) p (Suc n')) p\"", "lemma notfinal_Suc:\n  \"abc_notfinal (abc_steps_l (0, lm) A (Suc n)) A \\<Longrightarrow>  \n  abc_notfinal (abc_steps_l (0, lm) A n) A\"", "lemma abc_comp_frist_steps_eq_pre: \n  assumes notfinal: \"abc_notfinal (abc_steps_l (0, lm)  A n) A\"\n    and notnull: \"A \\<noteq> []\"\n  shows \"abc_steps_l (0, lm) (A [+] B) n = abc_steps_l (0, lm) A n\"", "lemma halt_steps2: \"st \\<ge> length A \\<Longrightarrow> abc_steps_l (st, lm) A stp = (st, lm)\"", "lemma halt_steps: \"abc_steps_l (length A, lm) A n = (length A, lm)\"", "lemma abc_steps_add: \n  \"abc_steps_l (as, lm) ap (m + n) = \n         abc_steps_l (abc_steps_l (as, lm) ap m) ap n\"", "lemma equal_when_halt: \n  assumes exc1: \"abc_steps_l (s, lm) A na = (length A, lma)\"\n    and exc2: \"abc_steps_l (s, lm) A nb = (length A, lmb)\"\n  shows \"lma = lmb\"", "lemma abc_comp_frist_steps_halt_eq': \n  assumes final: \"abc_steps_l (0, lm) A n = (length A, lm')\"\n    and notnull: \"A \\<noteq> []\"\n  shows \"\\<exists> n'. abc_steps_l (0, lm) (A [+] B) n' = (length A, lm')\"", "lemma abc_exec_null: \"abc_steps_l sam [] n = sam\"", "lemma abc_comp_frist_steps_halt_eq: \n  assumes final: \"abc_steps_l (0, lm) A n = (length A, lm')\"\n  shows \"\\<exists> n'. abc_steps_l (0, lm) (A [+] B) n' = (length A, lm')\"", "lemma abc_comp_second_step_eq: \n  assumes exec: \"abc_step_l (s, lm) (abc_fetch s B) = (sa, lma)\"\n  shows \"abc_step_l (s + length A, lm) (abc_fetch (s + length A) (A [+] B))\n         = (sa + length A, lma)\"", "lemma abc_comp_second_steps_eq:\n  assumes exec: \"abc_steps_l (0, lm) B n = (sa, lm')\"\n  shows \"abc_steps_l (length A, lm) (A [+] B) n = (sa + length A, lm')\"", "lemma length_abc_comp[simp, intro]: \n  \"length (A [+] B) = length A + length B\"", "lemma abc_Hoare_plus_halt : \n  assumes A_halt : \"{P} (A::abc_prog) {Q}\"\n    and B_halt : \"{Q} (B::abc_prog) {S}\"\n  shows \"{P} (A [+] B) {S}\"", "lemma abc_unhalt_append_eq:\n  assumes unhalt: \"{P} (A::abc_prog) \\<up>\"\n    and P: \"P args\"\n  shows \"abc_steps_l (0, args) (A [+] B) stp = abc_steps_l (0, args) A stp\"", "lemma abc_Hoare_plus_unhalt1: \n  \"{P} (A::abc_prog) \\<up> \\<Longrightarrow> {P} (A [+] B) \\<up>\"", "lemma notfinal_all_before:\n  \"\\<lbrakk>abc_notfinal (abc_steps_l (0, args) A x) A; y\\<le>x \\<rbrakk>\n  \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) A y) A \"", "lemma abc_Hoare_plus_unhalt2':\n  assumes unhalt: \"{Q} (B::abc_prog) \\<up>\"\n    and halt: \"{P} (A::abc_prog) {Q}\"\n    and notnull: \"A \\<noteq> []\"\n    and P: \"P args\" \n  shows \"abc_notfinal (abc_steps_l (0, args) (A [+] B) n) (A [+] B)\"", "lemma abc_comp_null_left[simp]: \"[] [+] A = A\"", "lemma abc_comp_null_right[simp]: \"A [+] [] = A\"", "lemma abc_Hoare_plus_unhalt2:\n  \"\\<lbrakk>{Q} (B::abc_prog)\\<up>; {P} (A::abc_prog) {Q}\\<rbrakk>\\<Longrightarrow> {P} (A [+] B) \\<up>\""], "translations": [["", "lemma abc_Hoare_haltI:\n  assumes \"\\<And>lm. P lm \\<Longrightarrow> \\<exists>n. abc_final (abc_steps_l (0, lm) p n) p \\<and> Q abc_holds_for (abc_steps_l (0, lm) p n)\"\n  shows \"{P} (p::abc_prog) {Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {P} p {Q}", "unfolding abc_Hoare_halt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>lm.\n       P lm \\<longrightarrow>\n       (\\<exists>n.\n           abc_final (abc_steps_l (0, lm) p n) p \\<and>\n           Q abc_holds_for abc_steps_l (0, lm) p n)", "using assms"], ["proof (prove)\nusing this:\n  P ?lm \\<Longrightarrow>\n  \\<exists>n.\n     abc_final (abc_steps_l (0, ?lm) p n) p \\<and>\n     Q abc_holds_for abc_steps_l (0, ?lm) p n\n\ngoal (1 subgoal):\n 1. \\<forall>lm.\n       P lm \\<longrightarrow>\n       (\\<exists>n.\n           abc_final (abc_steps_l (0, lm) p n) p \\<and>\n           Q abc_holds_for abc_steps_l (0, lm) p n)", "by auto"], ["", "text \\<open>\n  {P} A {Q}   {Q} B {S} \n  -----------------------------------------\n  {P} A [+] B {S}\n\\<close>"], ["", "definition\n  abc_Hoare_unhalt :: \"abc_assert \\<Rightarrow> abc_prog \\<Rightarrow> bool\" (\"({(1_)}/ (_)) \\<up>\" 50)\n  where\n    \"abc_Hoare_unhalt P p \\<equiv> \\<forall>args. P args \\<longrightarrow> (\\<forall> n .abc_notfinal (abc_steps_l (0, args) p n) p)\""], ["", "lemma abc_Hoare_unhaltI:\n  assumes \"\\<And>args n. P args \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) p n) p\"\n  shows \"{P} (p::abc_prog) \\<up>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {P} p \\<up>", "unfolding abc_Hoare_unhalt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>args.\n       P args \\<longrightarrow>\n       (\\<forall>n. abc_notfinal (abc_steps_l (0, args) p n) p)", "using assms"], ["proof (prove)\nusing this:\n  P ?args \\<Longrightarrow> abc_notfinal (abc_steps_l (0, ?args) p ?n) p\n\ngoal (1 subgoal):\n 1. \\<forall>args.\n       P args \\<longrightarrow>\n       (\\<forall>n. abc_notfinal (abc_steps_l (0, args) p n) p)", "by auto"], ["", "fun abc_inst_shift :: \"abc_inst \\<Rightarrow> nat \\<Rightarrow> abc_inst\"\n  where\n    \"abc_inst_shift (Inc m) n = Inc m\" |\n    \"abc_inst_shift (Dec m e) n = Dec m (e + n)\" |\n    \"abc_inst_shift (Goto m) n = Goto (m + n)\""], ["", "fun abc_shift :: \"abc_inst list \\<Rightarrow> nat \\<Rightarrow> abc_inst list\" \n  where\n    \"abc_shift xs n = map (\\<lambda> x. abc_inst_shift x n) xs\""], ["", "fun abc_comp :: \"abc_inst list \\<Rightarrow> abc_inst list \\<Rightarrow> \n                           abc_inst list\" (infixl \"[+]\" 99)\n  where\n    \"abc_comp al bl = (let al_len = length al in \n                           al @ abc_shift bl al_len)\""], ["", "lemma abc_comp_first_step_eq_pre: \n  \"s < length A\n \\<Longrightarrow> abc_step_l (s, lm) (abc_fetch s (A [+] B)) = \n    abc_step_l (s, lm) (abc_fetch s A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s < length A \\<Longrightarrow>\n    abc_step_l (s, lm) (abc_fetch s (A [+] B)) =\n    abc_step_l (s, lm) (abc_fetch s A)", "by(simp add: abc_step_l.simps abc_fetch.simps nth_append)"], ["", "lemma abc_before_final: \n  \"\\<lbrakk>abc_final (abc_steps_l (0, lm) p n) p; p \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> \\<exists> n'. abc_notfinal (abc_steps_l (0, lm) p n') p \\<and> \n            abc_final (abc_steps_l (0, lm) p (Suc n')) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>abc_final (abc_steps_l (0, lm) p n) p; p \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'.\n                         abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n                         abc_final (abc_steps_l (0, lm) p (Suc n')) p", "proof(induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>abc_final (abc_steps_l (0, lm) p 0) p; p \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'.\n                         abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n                         abc_final (abc_steps_l (0, lm) p (Suc n')) p\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>abc_final (abc_steps_l (0, lm) p n) p;\n                 p \\<noteq> []\\<rbrakk>\n                \\<Longrightarrow> \\<exists>n'.\n                                     abc_notfinal (abc_steps_l (0, lm) p n')\np \\<and>\n                                     abc_final\n(abc_steps_l (0, lm) p (Suc n')) p;\n        abc_final (abc_steps_l (0, lm) p (Suc n)) p; p \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'.\n                            abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n                            abc_final (abc_steps_l (0, lm) p (Suc n')) p", "case 0"], ["proof (state)\nthis:\n  abc_final (abc_steps_l (0, lm) p 0) p\n  p \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>abc_final (abc_steps_l (0, lm) p 0) p; p \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'.\n                         abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n                         abc_final (abc_steps_l (0, lm) p (Suc n')) p\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>abc_final (abc_steps_l (0, lm) p n) p;\n                 p \\<noteq> []\\<rbrakk>\n                \\<Longrightarrow> \\<exists>n'.\n                                     abc_notfinal (abc_steps_l (0, lm) p n')\np \\<and>\n                                     abc_final\n(abc_steps_l (0, lm) p (Suc n')) p;\n        abc_final (abc_steps_l (0, lm) p (Suc n)) p; p \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'.\n                            abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n                            abc_final (abc_steps_l (0, lm) p (Suc n')) p", "thus \"?thesis\""], ["proof (prove)\nusing this:\n  abc_final (abc_steps_l (0, lm) p 0) p\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>n'.\n       abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n       abc_final (abc_steps_l (0, lm) p (Suc n')) p", "by(simp add: abc_steps_l.simps)"], ["proof (state)\nthis:\n  \\<exists>n'.\n     abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n     abc_final (abc_steps_l (0, lm) p (Suc n')) p\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>abc_final (abc_steps_l (0, lm) p n) p;\n                 p \\<noteq> []\\<rbrakk>\n                \\<Longrightarrow> \\<exists>n'.\n                                     abc_notfinal (abc_steps_l (0, lm) p n')\np \\<and>\n                                     abc_final\n(abc_steps_l (0, lm) p (Suc n')) p;\n        abc_final (abc_steps_l (0, lm) p (Suc n)) p; p \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'.\n                            abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n                            abc_final (abc_steps_l (0, lm) p (Suc n')) p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>abc_final (abc_steps_l (0, lm) p n) p;\n                 p \\<noteq> []\\<rbrakk>\n                \\<Longrightarrow> \\<exists>n'.\n                                     abc_notfinal (abc_steps_l (0, lm) p n')\np \\<and>\n                                     abc_final\n(abc_steps_l (0, lm) p (Suc n')) p;\n        abc_final (abc_steps_l (0, lm) p (Suc n)) p; p \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'.\n                            abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n                            abc_final (abc_steps_l (0, lm) p (Suc n')) p", "case (Suc n)"], ["proof (state)\nthis:\n  \\<lbrakk>abc_final (abc_steps_l (0, lm) p n) p; p \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>n'.\n                       abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n                       abc_final (abc_steps_l (0, lm) p (Suc n')) p\n  abc_final (abc_steps_l (0, lm) p (Suc n)) p\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>abc_final (abc_steps_l (0, lm) p n) p;\n                 p \\<noteq> []\\<rbrakk>\n                \\<Longrightarrow> \\<exists>n'.\n                                     abc_notfinal (abc_steps_l (0, lm) p n')\np \\<and>\n                                     abc_final\n(abc_steps_l (0, lm) p (Suc n')) p;\n        abc_final (abc_steps_l (0, lm) p (Suc n)) p; p \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'.\n                            abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n                            abc_final (abc_steps_l (0, lm) p (Suc n')) p", "have ind: \" \\<lbrakk>abc_final (abc_steps_l (0, lm) p n) p; p \\<noteq> []\\<rbrakk> \\<Longrightarrow> \n    \\<exists>n'. abc_notfinal (abc_steps_l (0, lm) p n') p \\<and> abc_final (abc_steps_l (0, lm) p (Suc n')) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>abc_final (abc_steps_l (0, lm) p n) p; p \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'.\n                         abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n                         abc_final (abc_steps_l (0, lm) p (Suc n')) p", "by fact"], ["proof (state)\nthis:\n  \\<lbrakk>abc_final (abc_steps_l (0, lm) p n) p; p \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>n'.\n                       abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n                       abc_final (abc_steps_l (0, lm) p (Suc n')) p\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>abc_final (abc_steps_l (0, lm) p n) p;\n                 p \\<noteq> []\\<rbrakk>\n                \\<Longrightarrow> \\<exists>n'.\n                                     abc_notfinal (abc_steps_l (0, lm) p n')\np \\<and>\n                                     abc_final\n(abc_steps_l (0, lm) p (Suc n')) p;\n        abc_final (abc_steps_l (0, lm) p (Suc n)) p; p \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'.\n                            abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n                            abc_final (abc_steps_l (0, lm) p (Suc n')) p", "have final: \"abc_final (abc_steps_l (0, lm) p (Suc n)) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abc_final (abc_steps_l (0, lm) p (Suc n)) p", "by fact"], ["proof (state)\nthis:\n  abc_final (abc_steps_l (0, lm) p (Suc n)) p\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>abc_final (abc_steps_l (0, lm) p n) p;\n                 p \\<noteq> []\\<rbrakk>\n                \\<Longrightarrow> \\<exists>n'.\n                                     abc_notfinal (abc_steps_l (0, lm) p n')\np \\<and>\n                                     abc_final\n(abc_steps_l (0, lm) p (Suc n')) p;\n        abc_final (abc_steps_l (0, lm) p (Suc n)) p; p \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'.\n                            abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n                            abc_final (abc_steps_l (0, lm) p (Suc n')) p", "have notnull: \"p \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> []", "by fact"], ["proof (state)\nthis:\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>abc_final (abc_steps_l (0, lm) p n) p;\n                 p \\<noteq> []\\<rbrakk>\n                \\<Longrightarrow> \\<exists>n'.\n                                     abc_notfinal (abc_steps_l (0, lm) p n')\np \\<and>\n                                     abc_final\n(abc_steps_l (0, lm) p (Suc n')) p;\n        abc_final (abc_steps_l (0, lm) p (Suc n)) p; p \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'.\n                            abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n                            abc_final (abc_steps_l (0, lm) p (Suc n')) p", "show \"?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n'.\n       abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n       abc_final (abc_steps_l (0, lm) p (Suc n')) p", "proof(cases \"abc_final (abc_steps_l (0, lm) p n) p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. abc_final (abc_steps_l (0, lm) p n) p \\<Longrightarrow>\n    \\<exists>n'.\n       abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n       abc_final (abc_steps_l (0, lm) p (Suc n')) p\n 2. \\<not> abc_final (abc_steps_l (0, lm) p n) p \\<Longrightarrow>\n    \\<exists>n'.\n       abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n       abc_final (abc_steps_l (0, lm) p (Suc n')) p", "case True"], ["proof (state)\nthis:\n  abc_final (abc_steps_l (0, lm) p n) p\n\ngoal (2 subgoals):\n 1. abc_final (abc_steps_l (0, lm) p n) p \\<Longrightarrow>\n    \\<exists>n'.\n       abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n       abc_final (abc_steps_l (0, lm) p (Suc n')) p\n 2. \\<not> abc_final (abc_steps_l (0, lm) p n) p \\<Longrightarrow>\n    \\<exists>n'.\n       abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n       abc_final (abc_steps_l (0, lm) p (Suc n')) p", "have \"abc_final (abc_steps_l (0, lm) p n) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abc_final (abc_steps_l (0, lm) p n) p", "by fact"], ["proof (state)\nthis:\n  abc_final (abc_steps_l (0, lm) p n) p\n\ngoal (2 subgoals):\n 1. abc_final (abc_steps_l (0, lm) p n) p \\<Longrightarrow>\n    \\<exists>n'.\n       abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n       abc_final (abc_steps_l (0, lm) p (Suc n')) p\n 2. \\<not> abc_final (abc_steps_l (0, lm) p n) p \\<Longrightarrow>\n    \\<exists>n'.\n       abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n       abc_final (abc_steps_l (0, lm) p (Suc n')) p", "then"], ["proof (chain)\npicking this:\n  abc_final (abc_steps_l (0, lm) p n) p", "have \"\\<exists>n'. abc_notfinal (abc_steps_l (0, lm) p n') p \\<and> abc_final (abc_steps_l (0, lm) p (Suc n')) p\""], ["proof (prove)\nusing this:\n  abc_final (abc_steps_l (0, lm) p n) p\n\ngoal (1 subgoal):\n 1. \\<exists>n'.\n       abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n       abc_final (abc_steps_l (0, lm) p (Suc n')) p", "using ind notnull"], ["proof (prove)\nusing this:\n  abc_final (abc_steps_l (0, lm) p n) p\n  \\<lbrakk>abc_final (abc_steps_l (0, lm) p n) p; p \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>n'.\n                       abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n                       abc_final (abc_steps_l (0, lm) p (Suc n')) p\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>n'.\n       abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n       abc_final (abc_steps_l (0, lm) p (Suc n')) p", "by simp"], ["proof (state)\nthis:\n  \\<exists>n'.\n     abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n     abc_final (abc_steps_l (0, lm) p (Suc n')) p\n\ngoal (2 subgoals):\n 1. abc_final (abc_steps_l (0, lm) p n) p \\<Longrightarrow>\n    \\<exists>n'.\n       abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n       abc_final (abc_steps_l (0, lm) p (Suc n')) p\n 2. \\<not> abc_final (abc_steps_l (0, lm) p n) p \\<Longrightarrow>\n    \\<exists>n'.\n       abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n       abc_final (abc_steps_l (0, lm) p (Suc n')) p", "thus \"?thesis\""], ["proof (prove)\nusing this:\n  \\<exists>n'.\n     abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n     abc_final (abc_steps_l (0, lm) p (Suc n')) p\n\ngoal (1 subgoal):\n 1. \\<exists>n'.\n       abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n       abc_final (abc_steps_l (0, lm) p (Suc n')) p", "by simp"], ["proof (state)\nthis:\n  \\<exists>n'.\n     abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n     abc_final (abc_steps_l (0, lm) p (Suc n')) p\n\ngoal (1 subgoal):\n 1. \\<not> abc_final (abc_steps_l (0, lm) p n) p \\<Longrightarrow>\n    \\<exists>n'.\n       abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n       abc_final (abc_steps_l (0, lm) p (Suc n')) p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> abc_final (abc_steps_l (0, lm) p n) p \\<Longrightarrow>\n    \\<exists>n'.\n       abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n       abc_final (abc_steps_l (0, lm) p (Suc n')) p", "case False"], ["proof (state)\nthis:\n  \\<not> abc_final (abc_steps_l (0, lm) p n) p\n\ngoal (1 subgoal):\n 1. \\<not> abc_final (abc_steps_l (0, lm) p n) p \\<Longrightarrow>\n    \\<exists>n'.\n       abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n       abc_final (abc_steps_l (0, lm) p (Suc n')) p", "have \"\\<not> abc_final (abc_steps_l (0, lm) p n) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> abc_final (abc_steps_l (0, lm) p n) p", "by fact"], ["proof (state)\nthis:\n  \\<not> abc_final (abc_steps_l (0, lm) p n) p\n\ngoal (1 subgoal):\n 1. \\<not> abc_final (abc_steps_l (0, lm) p n) p \\<Longrightarrow>\n    \\<exists>n'.\n       abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n       abc_final (abc_steps_l (0, lm) p (Suc n')) p", "from final this"], ["proof (chain)\npicking this:\n  abc_final (abc_steps_l (0, lm) p (Suc n)) p\n  \\<not> abc_final (abc_steps_l (0, lm) p n) p", "have \"abc_notfinal (abc_steps_l (0, lm) p n) p\""], ["proof (prove)\nusing this:\n  abc_final (abc_steps_l (0, lm) p (Suc n)) p\n  \\<not> abc_final (abc_steps_l (0, lm) p n) p\n\ngoal (1 subgoal):\n 1. abc_notfinal (abc_steps_l (0, lm) p n) p", "by(case_tac \"abc_steps_l (0, lm) p n\", simp add: abc_step_red2 \n          abc_step_l.simps abc_fetch.simps split: if_splits)"], ["proof (state)\nthis:\n  abc_notfinal (abc_steps_l (0, lm) p n) p\n\ngoal (1 subgoal):\n 1. \\<not> abc_final (abc_steps_l (0, lm) p n) p \\<Longrightarrow>\n    \\<exists>n'.\n       abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n       abc_final (abc_steps_l (0, lm) p (Suc n')) p", "thus \"?thesis\""], ["proof (prove)\nusing this:\n  abc_notfinal (abc_steps_l (0, lm) p n) p\n\ngoal (1 subgoal):\n 1. \\<exists>n'.\n       abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n       abc_final (abc_steps_l (0, lm) p (Suc n')) p", "using final"], ["proof (prove)\nusing this:\n  abc_notfinal (abc_steps_l (0, lm) p n) p\n  abc_final (abc_steps_l (0, lm) p (Suc n)) p\n\ngoal (1 subgoal):\n 1. \\<exists>n'.\n       abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n       abc_final (abc_steps_l (0, lm) p (Suc n')) p", "by(rule_tac x = n in exI, simp)"], ["proof (state)\nthis:\n  \\<exists>n'.\n     abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n     abc_final (abc_steps_l (0, lm) p (Suc n')) p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n'.\n     abc_notfinal (abc_steps_l (0, lm) p n') p \\<and>\n     abc_final (abc_steps_l (0, lm) p (Suc n')) p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma notfinal_Suc:\n  \"abc_notfinal (abc_steps_l (0, lm) A (Suc n)) A \\<Longrightarrow>  \n  abc_notfinal (abc_steps_l (0, lm) A n) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abc_notfinal (abc_steps_l (0, lm) A (Suc n)) A \\<Longrightarrow>\n    abc_notfinal (abc_steps_l (0, lm) A n) A", "apply(case_tac \"abc_steps_l (0, lm) A n\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>abc_notfinal (abc_steps_l (0, lm) A (Suc n)) A;\n        abc_steps_l (0, lm) A n = (a, b)\\<rbrakk>\n       \\<Longrightarrow> abc_notfinal (abc_steps_l (0, lm) A n) A", "apply(simp add: abc_step_red2 abc_fetch.simps abc_step_l.simps split: if_splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma abc_comp_frist_steps_eq_pre: \n  assumes notfinal: \"abc_notfinal (abc_steps_l (0, lm)  A n) A\"\n    and notnull: \"A \\<noteq> []\"\n  shows \"abc_steps_l (0, lm) (A [+] B) n = abc_steps_l (0, lm) A n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abc_steps_l (0, lm) (A [+] B) n = abc_steps_l (0, lm) A n", "using notfinal"], ["proof (prove)\nusing this:\n  abc_notfinal (abc_steps_l (0, lm) A n) A\n\ngoal (1 subgoal):\n 1. abc_steps_l (0, lm) (A [+] B) n = abc_steps_l (0, lm) A n", "proof(induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. abc_notfinal (abc_steps_l (0, lm) A 0) A \\<Longrightarrow>\n    abc_steps_l (0, lm) (A [+] B) 0 = abc_steps_l (0, lm) A 0\n 2. \\<And>n.\n       \\<lbrakk>abc_notfinal (abc_steps_l (0, lm) A n) A \\<Longrightarrow>\n                abc_steps_l (0, lm) (A [+] B) n = abc_steps_l (0, lm) A n;\n        abc_notfinal (abc_steps_l (0, lm) A (Suc n)) A\\<rbrakk>\n       \\<Longrightarrow> abc_steps_l (0, lm) (A [+] B) (Suc n) =\n                         abc_steps_l (0, lm) A (Suc n)", "case 0"], ["proof (state)\nthis:\n  abc_notfinal (abc_steps_l (0, lm) A 0) A\n\ngoal (2 subgoals):\n 1. abc_notfinal (abc_steps_l (0, lm) A 0) A \\<Longrightarrow>\n    abc_steps_l (0, lm) (A [+] B) 0 = abc_steps_l (0, lm) A 0\n 2. \\<And>n.\n       \\<lbrakk>abc_notfinal (abc_steps_l (0, lm) A n) A \\<Longrightarrow>\n                abc_steps_l (0, lm) (A [+] B) n = abc_steps_l (0, lm) A n;\n        abc_notfinal (abc_steps_l (0, lm) A (Suc n)) A\\<rbrakk>\n       \\<Longrightarrow> abc_steps_l (0, lm) (A [+] B) (Suc n) =\n                         abc_steps_l (0, lm) A (Suc n)", "thus \"?case\""], ["proof (prove)\nusing this:\n  abc_notfinal (abc_steps_l (0, lm) A 0) A\n\ngoal (1 subgoal):\n 1. abc_steps_l (0, lm) (A [+] B) 0 = abc_steps_l (0, lm) A 0", "by(simp add: abc_steps_l.simps)"], ["proof (state)\nthis:\n  abc_steps_l (0, lm) (A [+] B) 0 = abc_steps_l (0, lm) A 0\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>abc_notfinal (abc_steps_l (0, lm) A n) A \\<Longrightarrow>\n                abc_steps_l (0, lm) (A [+] B) n = abc_steps_l (0, lm) A n;\n        abc_notfinal (abc_steps_l (0, lm) A (Suc n)) A\\<rbrakk>\n       \\<Longrightarrow> abc_steps_l (0, lm) (A [+] B) (Suc n) =\n                         abc_steps_l (0, lm) A (Suc n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>abc_notfinal (abc_steps_l (0, lm) A n) A \\<Longrightarrow>\n                abc_steps_l (0, lm) (A [+] B) n = abc_steps_l (0, lm) A n;\n        abc_notfinal (abc_steps_l (0, lm) A (Suc n)) A\\<rbrakk>\n       \\<Longrightarrow> abc_steps_l (0, lm) (A [+] B) (Suc n) =\n                         abc_steps_l (0, lm) A (Suc n)", "case (Suc n)"], ["proof (state)\nthis:\n  abc_notfinal (abc_steps_l (0, lm) A n) A \\<Longrightarrow>\n  abc_steps_l (0, lm) (A [+] B) n = abc_steps_l (0, lm) A n\n  abc_notfinal (abc_steps_l (0, lm) A (Suc n)) A\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>abc_notfinal (abc_steps_l (0, lm) A n) A \\<Longrightarrow>\n                abc_steps_l (0, lm) (A [+] B) n = abc_steps_l (0, lm) A n;\n        abc_notfinal (abc_steps_l (0, lm) A (Suc n)) A\\<rbrakk>\n       \\<Longrightarrow> abc_steps_l (0, lm) (A [+] B) (Suc n) =\n                         abc_steps_l (0, lm) A (Suc n)", "have ind: \"abc_notfinal (abc_steps_l (0, lm) A n) A \\<Longrightarrow> abc_steps_l (0, lm) (A [+] B) n = abc_steps_l (0, lm) A n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abc_notfinal (abc_steps_l (0, lm) A n) A \\<Longrightarrow>\n    abc_steps_l (0, lm) (A [+] B) n = abc_steps_l (0, lm) A n", "by fact"], ["proof (state)\nthis:\n  abc_notfinal (abc_steps_l (0, lm) A n) A \\<Longrightarrow>\n  abc_steps_l (0, lm) (A [+] B) n = abc_steps_l (0, lm) A n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>abc_notfinal (abc_steps_l (0, lm) A n) A \\<Longrightarrow>\n                abc_steps_l (0, lm) (A [+] B) n = abc_steps_l (0, lm) A n;\n        abc_notfinal (abc_steps_l (0, lm) A (Suc n)) A\\<rbrakk>\n       \\<Longrightarrow> abc_steps_l (0, lm) (A [+] B) (Suc n) =\n                         abc_steps_l (0, lm) A (Suc n)", "have h: \"abc_notfinal (abc_steps_l (0, lm) A (Suc n)) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abc_notfinal (abc_steps_l (0, lm) A (Suc n)) A", "by fact"], ["proof (state)\nthis:\n  abc_notfinal (abc_steps_l (0, lm) A (Suc n)) A\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>abc_notfinal (abc_steps_l (0, lm) A n) A \\<Longrightarrow>\n                abc_steps_l (0, lm) (A [+] B) n = abc_steps_l (0, lm) A n;\n        abc_notfinal (abc_steps_l (0, lm) A (Suc n)) A\\<rbrakk>\n       \\<Longrightarrow> abc_steps_l (0, lm) (A [+] B) (Suc n) =\n                         abc_steps_l (0, lm) A (Suc n)", "then"], ["proof (chain)\npicking this:\n  abc_notfinal (abc_steps_l (0, lm) A (Suc n)) A", "have a: \"abc_notfinal (abc_steps_l (0, lm) A n) A\""], ["proof (prove)\nusing this:\n  abc_notfinal (abc_steps_l (0, lm) A (Suc n)) A\n\ngoal (1 subgoal):\n 1. abc_notfinal (abc_steps_l (0, lm) A n) A", "by(simp add: notfinal_Suc)"], ["proof (state)\nthis:\n  abc_notfinal (abc_steps_l (0, lm) A n) A\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>abc_notfinal (abc_steps_l (0, lm) A n) A \\<Longrightarrow>\n                abc_steps_l (0, lm) (A [+] B) n = abc_steps_l (0, lm) A n;\n        abc_notfinal (abc_steps_l (0, lm) A (Suc n)) A\\<rbrakk>\n       \\<Longrightarrow> abc_steps_l (0, lm) (A [+] B) (Suc n) =\n                         abc_steps_l (0, lm) A (Suc n)", "then"], ["proof (chain)\npicking this:\n  abc_notfinal (abc_steps_l (0, lm) A n) A", "have b: \"abc_steps_l (0, lm) (A [+] B) n = abc_steps_l (0, lm) A n\""], ["proof (prove)\nusing this:\n  abc_notfinal (abc_steps_l (0, lm) A n) A\n\ngoal (1 subgoal):\n 1. abc_steps_l (0, lm) (A [+] B) n = abc_steps_l (0, lm) A n", "using ind"], ["proof (prove)\nusing this:\n  abc_notfinal (abc_steps_l (0, lm) A n) A\n  abc_notfinal (abc_steps_l (0, lm) A n) A \\<Longrightarrow>\n  abc_steps_l (0, lm) (A [+] B) n = abc_steps_l (0, lm) A n\n\ngoal (1 subgoal):\n 1. abc_steps_l (0, lm) (A [+] B) n = abc_steps_l (0, lm) A n", "by simp"], ["proof (state)\nthis:\n  abc_steps_l (0, lm) (A [+] B) n = abc_steps_l (0, lm) A n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>abc_notfinal (abc_steps_l (0, lm) A n) A \\<Longrightarrow>\n                abc_steps_l (0, lm) (A [+] B) n = abc_steps_l (0, lm) A n;\n        abc_notfinal (abc_steps_l (0, lm) A (Suc n)) A\\<rbrakk>\n       \\<Longrightarrow> abc_steps_l (0, lm) (A [+] B) (Suc n) =\n                         abc_steps_l (0, lm) A (Suc n)", "obtain s lm' where c: \"abc_steps_l (0, lm) A n = (s, lm')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s lm'.\n        abc_steps_l (0, lm) A n = (s, lm') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis prod.exhaust)"], ["proof (state)\nthis:\n  abc_steps_l (0, lm) A n = (s, lm')\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>abc_notfinal (abc_steps_l (0, lm) A n) A \\<Longrightarrow>\n                abc_steps_l (0, lm) (A [+] B) n = abc_steps_l (0, lm) A n;\n        abc_notfinal (abc_steps_l (0, lm) A (Suc n)) A\\<rbrakk>\n       \\<Longrightarrow> abc_steps_l (0, lm) (A [+] B) (Suc n) =\n                         abc_steps_l (0, lm) A (Suc n)", "then"], ["proof (chain)\npicking this:\n  abc_steps_l (0, lm) A n = (s, lm')", "have d: \"s < length A \\<and> abc_steps_l (0, lm) (A [+] B) n = (s, lm')\""], ["proof (prove)\nusing this:\n  abc_steps_l (0, lm) A n = (s, lm')\n\ngoal (1 subgoal):\n 1. s < length A \\<and> abc_steps_l (0, lm) (A [+] B) n = (s, lm')", "using a b"], ["proof (prove)\nusing this:\n  abc_steps_l (0, lm) A n = (s, lm')\n  abc_notfinal (abc_steps_l (0, lm) A n) A\n  abc_steps_l (0, lm) (A [+] B) n = abc_steps_l (0, lm) A n\n\ngoal (1 subgoal):\n 1. s < length A \\<and> abc_steps_l (0, lm) (A [+] B) n = (s, lm')", "by simp"], ["proof (state)\nthis:\n  s < length A \\<and> abc_steps_l (0, lm) (A [+] B) n = (s, lm')\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>abc_notfinal (abc_steps_l (0, lm) A n) A \\<Longrightarrow>\n                abc_steps_l (0, lm) (A [+] B) n = abc_steps_l (0, lm) A n;\n        abc_notfinal (abc_steps_l (0, lm) A (Suc n)) A\\<rbrakk>\n       \\<Longrightarrow> abc_steps_l (0, lm) (A [+] B) (Suc n) =\n                         abc_steps_l (0, lm) A (Suc n)", "thus \"?case\""], ["proof (prove)\nusing this:\n  s < length A \\<and> abc_steps_l (0, lm) (A [+] B) n = (s, lm')\n\ngoal (1 subgoal):\n 1. abc_steps_l (0, lm) (A [+] B) (Suc n) = abc_steps_l (0, lm) A (Suc n)", "using c"], ["proof (prove)\nusing this:\n  s < length A \\<and> abc_steps_l (0, lm) (A [+] B) n = (s, lm')\n  abc_steps_l (0, lm) A n = (s, lm')\n\ngoal (1 subgoal):\n 1. abc_steps_l (0, lm) (A [+] B) (Suc n) = abc_steps_l (0, lm) A (Suc n)", "by(simp add: abc_step_red2 abc_fetch.simps abc_step_l.simps nth_append)"], ["proof (state)\nthis:\n  abc_steps_l (0, lm) (A [+] B) (Suc n) = abc_steps_l (0, lm) A (Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["", "declare abc_shift.simps[simp del] abc_comp.simps[simp del]"], ["", "lemma halt_steps2: \"st \\<ge> length A \\<Longrightarrow> abc_steps_l (st, lm) A stp = (st, lm)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length A \\<le> st \\<Longrightarrow>\n    abc_steps_l (st, lm) A stp = (st, lm)", "apply(induct stp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. length A \\<le> st \\<Longrightarrow> abc_steps_l (st, lm) A 0 = (st, lm)\n 2. \\<And>stp.\n       \\<lbrakk>length A \\<le> st \\<Longrightarrow>\n                abc_steps_l (st, lm) A stp = (st, lm);\n        length A \\<le> st\\<rbrakk>\n       \\<Longrightarrow> abc_steps_l (st, lm) A (Suc stp) = (st, lm)", "by(simp_all add: abc_step_red2 abc_steps_l.simps abc_step_l.simps abc_fetch.simps)"], ["", "lemma halt_steps: \"abc_steps_l (length A, lm) A n = (length A, lm)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abc_steps_l (length A, lm) A n = (length A, lm)", "apply(induct n, simp add: abc_steps_l.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       abc_steps_l (length A, lm) A n = (length A, lm) \\<Longrightarrow>\n       abc_steps_l (length A, lm) A (Suc n) = (length A, lm)", "apply(simp add: abc_step_red2 abc_step_l.simps nth_append abc_fetch.simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma abc_steps_add: \n  \"abc_steps_l (as, lm) ap (m + n) = \n         abc_steps_l (abc_steps_l (as, lm) ap m) ap n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abc_steps_l (as, lm) ap (m + n) =\n    abc_steps_l (abc_steps_l (as, lm) ap m) ap n", "apply(induct m arbitrary: n as lm, simp add: abc_steps_l.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m n as lm.\n       (\\<And>n as lm.\n           abc_steps_l (as, lm) ap (m + n) =\n           abc_steps_l (abc_steps_l (as, lm) ap m) ap n) \\<Longrightarrow>\n       abc_steps_l (as, lm) ap (Suc m + n) =\n       abc_steps_l (abc_steps_l (as, lm) ap (Suc m)) ap n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m n as lm.\n       (\\<And>n as lm.\n           abc_steps_l (as, lm) ap (m + n) =\n           abc_steps_l (abc_steps_l (as, lm) ap m) ap n) \\<Longrightarrow>\n       abc_steps_l (as, lm) ap (Suc m + n) =\n       abc_steps_l (abc_steps_l (as, lm) ap (Suc m)) ap n", "fix m n as lm"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m n as lm.\n       (\\<And>n as lm.\n           abc_steps_l (as, lm) ap (m + n) =\n           abc_steps_l (abc_steps_l (as, lm) ap m) ap n) \\<Longrightarrow>\n       abc_steps_l (as, lm) ap (Suc m + n) =\n       abc_steps_l (abc_steps_l (as, lm) ap (Suc m)) ap n", "assume ind: \n    \"\\<And>n as lm. abc_steps_l (as, lm) ap (m + n) = \n                   abc_steps_l (abc_steps_l (as, lm) ap m) ap n\""], ["proof (state)\nthis:\n  abc_steps_l (?as, ?lm) ap (m + ?n) =\n  abc_steps_l (abc_steps_l (?as, ?lm) ap m) ap ?n\n\ngoal (1 subgoal):\n 1. \\<And>m n as lm.\n       (\\<And>n as lm.\n           abc_steps_l (as, lm) ap (m + n) =\n           abc_steps_l (abc_steps_l (as, lm) ap m) ap n) \\<Longrightarrow>\n       abc_steps_l (as, lm) ap (Suc m + n) =\n       abc_steps_l (abc_steps_l (as, lm) ap (Suc m)) ap n", "show \"abc_steps_l (as, lm) ap (Suc m + n) = \n             abc_steps_l (abc_steps_l (as, lm) ap (Suc m)) ap n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abc_steps_l (as, lm) ap (Suc m + n) =\n    abc_steps_l (abc_steps_l (as, lm) ap (Suc m)) ap n", "apply(insert ind[of as lm \"Suc n\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. abc_steps_l (as, lm) ap (Suc (m + n)) =\n    abc_steps_l (abc_steps_l (as, lm) ap m) ap (Suc n) \\<Longrightarrow>\n    abc_steps_l (abc_steps_l (as, lm) ap m) ap (Suc n) =\n    abc_steps_l (abc_steps_l (as, lm) ap (Suc m)) ap n", "apply(insert ind[of as lm \"Suc 0\"], simp add: abc_steps_l.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>abc_steps_l (abc_step_l (as, lm) (abc_fetch as ap)) ap\n              (m + n) =\n             abc_steps_l (abc_steps_l (as, lm) ap m) ap (Suc n);\n     abc_steps_l (abc_step_l (as, lm) (abc_fetch as ap)) ap m =\n     abc_steps_l (abc_steps_l (as, lm) ap m) ap (Suc 0)\\<rbrakk>\n    \\<Longrightarrow> abc_steps_l (abc_steps_l (as, lm) ap m) ap (Suc n) =\n                      abc_steps_l\n                       (abc_steps_l (abc_steps_l (as, lm) ap m) ap (Suc 0))\n                       ap n", "apply(case_tac \"(abc_steps_l (as, lm) ap m)\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>abc_steps_l (abc_step_l (as, lm) (abc_fetch as ap)) ap\n                 (m + n) =\n                abc_steps_l (a, b) ap (Suc n);\n        abc_steps_l (abc_step_l (as, lm) (abc_fetch as ap)) ap m =\n        abc_steps_l (a, b) ap (Suc 0);\n        abc_steps_l (as, lm) ap m = (a, b)\\<rbrakk>\n       \\<Longrightarrow> abc_steps_l (a, b) ap (Suc n) =\n                         abc_steps_l (abc_steps_l (a, b) ap (Suc 0)) ap n", "apply(simp add: abc_steps_l.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>abc_steps_l (abc_step_l (as, lm) (abc_fetch as ap)) ap\n                 (m + n) =\n                abc_steps_l (abc_step_l (a, b) (abc_fetch a ap)) ap n;\n        abc_steps_l (abc_step_l (as, lm) (abc_fetch as ap)) ap m =\n        abc_steps_l (abc_step_l (a, b) (abc_fetch a ap)) ap 0;\n        abc_steps_l (as, lm) ap m = (a, b)\\<rbrakk>\n       \\<Longrightarrow> abc_steps_l (abc_step_l (a, b) (abc_fetch a ap)) ap\n                          n =\n                         abc_steps_l\n                          (abc_steps_l (abc_step_l (a, b) (abc_fetch a ap))\n                            ap 0)\n                          ap n", "apply(case_tac \"abc_step_l (a, b) (abc_fetch a ap)\", \n        simp add: abc_steps_l.simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  abc_steps_l (as, lm) ap (Suc m + n) =\n  abc_steps_l (abc_steps_l (as, lm) ap (Suc m)) ap n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma equal_when_halt: \n  assumes exc1: \"abc_steps_l (s, lm) A na = (length A, lma)\"\n    and exc2: \"abc_steps_l (s, lm) A nb = (length A, lmb)\"\n  shows \"lma = lmb\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lma = lmb", "proof(cases \"na > nb\")"], ["proof (state)\ngoal (2 subgoals):\n 1. nb < na \\<Longrightarrow> lma = lmb\n 2. \\<not> nb < na \\<Longrightarrow> lma = lmb", "case True"], ["proof (state)\nthis:\n  nb < na\n\ngoal (2 subgoals):\n 1. nb < na \\<Longrightarrow> lma = lmb\n 2. \\<not> nb < na \\<Longrightarrow> lma = lmb", "then"], ["proof (chain)\npicking this:\n  nb < na", "obtain d where \"na = nb + d\""], ["proof (prove)\nusing this:\n  nb < na\n\ngoal (1 subgoal):\n 1. (\\<And>d. na = nb + d \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (metis add_Suc_right less_iff_Suc_add)"], ["proof (state)\nthis:\n  na = nb + d\n\ngoal (2 subgoals):\n 1. nb < na \\<Longrightarrow> lma = lmb\n 2. \\<not> nb < na \\<Longrightarrow> lma = lmb", "thus \"?thesis\""], ["proof (prove)\nusing this:\n  na = nb + d\n\ngoal (1 subgoal):\n 1. lma = lmb", "using assms halt_steps"], ["proof (prove)\nusing this:\n  na = nb + d\n  abc_steps_l (s, lm) A na = (length A, lma)\n  abc_steps_l (s, lm) A nb = (length A, lmb)\n  abc_steps_l (length ?A, ?lm) ?A ?n = (length ?A, ?lm)\n\ngoal (1 subgoal):\n 1. lma = lmb", "by(simp add: abc_steps_add)"], ["proof (state)\nthis:\n  lma = lmb\n\ngoal (1 subgoal):\n 1. \\<not> nb < na \\<Longrightarrow> lma = lmb", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> nb < na \\<Longrightarrow> lma = lmb", "case False"], ["proof (state)\nthis:\n  \\<not> nb < na\n\ngoal (1 subgoal):\n 1. \\<not> nb < na \\<Longrightarrow> lma = lmb", "then"], ["proof (chain)\npicking this:\n  \\<not> nb < na", "obtain d where \"nb = na + d\""], ["proof (prove)\nusing this:\n  \\<not> nb < na\n\ngoal (1 subgoal):\n 1. (\\<And>d. nb = na + d \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (metis add.comm_neutral less_imp_add_positive nat_neq_iff)"], ["proof (state)\nthis:\n  nb = na + d\n\ngoal (1 subgoal):\n 1. \\<not> nb < na \\<Longrightarrow> lma = lmb", "thus \"?thesis\""], ["proof (prove)\nusing this:\n  nb = na + d\n\ngoal (1 subgoal):\n 1. lma = lmb", "using assms halt_steps"], ["proof (prove)\nusing this:\n  nb = na + d\n  abc_steps_l (s, lm) A na = (length A, lma)\n  abc_steps_l (s, lm) A nb = (length A, lmb)\n  abc_steps_l (length ?A, ?lm) ?A ?n = (length ?A, ?lm)\n\ngoal (1 subgoal):\n 1. lma = lmb", "by(simp add: abc_steps_add)"], ["proof (state)\nthis:\n  lma = lmb\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma abc_comp_frist_steps_halt_eq': \n  assumes final: \"abc_steps_l (0, lm) A n = (length A, lm')\"\n    and notnull: \"A \\<noteq> []\"\n  shows \"\\<exists> n'. abc_steps_l (0, lm) (A [+] B) n' = (length A, lm')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n'. abc_steps_l (0, lm) (A [+] B) n' = (length A, lm')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n'. abc_steps_l (0, lm) (A [+] B) n' = (length A, lm')", "have \"\\<exists> n'. abc_notfinal (abc_steps_l (0, lm) A n') A \\<and> \n    abc_final (abc_steps_l (0, lm) A (Suc n')) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n'.\n       abc_notfinal (abc_steps_l (0, lm) A n') A \\<and>\n       abc_final (abc_steps_l (0, lm) A (Suc n')) A", "using assms"], ["proof (prove)\nusing this:\n  abc_steps_l (0, lm) A n = (length A, lm')\n  A \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>n'.\n       abc_notfinal (abc_steps_l (0, lm) A n') A \\<and>\n       abc_final (abc_steps_l (0, lm) A (Suc n')) A", "by(rule_tac n = n in abc_before_final, simp_all)"], ["proof (state)\nthis:\n  \\<exists>n'.\n     abc_notfinal (abc_steps_l (0, lm) A n') A \\<and>\n     abc_final (abc_steps_l (0, lm) A (Suc n')) A\n\ngoal (1 subgoal):\n 1. \\<exists>n'. abc_steps_l (0, lm) (A [+] B) n' = (length A, lm')", "then"], ["proof (chain)\npicking this:\n  \\<exists>n'.\n     abc_notfinal (abc_steps_l (0, lm) A n') A \\<and>\n     abc_final (abc_steps_l (0, lm) A (Suc n')) A", "obtain na where a:\n    \"abc_notfinal (abc_steps_l (0, lm) A na) A \\<and> \n            abc_final (abc_steps_l (0, lm) A (Suc na)) A\""], ["proof (prove)\nusing this:\n  \\<exists>n'.\n     abc_notfinal (abc_steps_l (0, lm) A n') A \\<and>\n     abc_final (abc_steps_l (0, lm) A (Suc n')) A\n\ngoal (1 subgoal):\n 1. (\\<And>na.\n        abc_notfinal (abc_steps_l (0, lm) A na) A \\<and>\n        abc_final (abc_steps_l (0, lm) A (Suc na)) A \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  abc_notfinal (abc_steps_l (0, lm) A na) A \\<and>\n  abc_final (abc_steps_l (0, lm) A (Suc na)) A\n\ngoal (1 subgoal):\n 1. \\<exists>n'. abc_steps_l (0, lm) (A [+] B) n' = (length A, lm')", "obtain sa lma where b: \"abc_steps_l (0, lm) A na = (sa, lma)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>sa lma.\n        abc_steps_l (0, lm) A na = (sa, lma) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis prod.exhaust)"], ["proof (state)\nthis:\n  abc_steps_l (0, lm) A na = (sa, lma)\n\ngoal (1 subgoal):\n 1. \\<exists>n'. abc_steps_l (0, lm) (A [+] B) n' = (length A, lm')", "then"], ["proof (chain)\npicking this:\n  abc_steps_l (0, lm) A na = (sa, lma)", "have c: \"abc_steps_l (0, lm) (A [+] B) na = (sa, lma)\""], ["proof (prove)\nusing this:\n  abc_steps_l (0, lm) A na = (sa, lma)\n\ngoal (1 subgoal):\n 1. abc_steps_l (0, lm) (A [+] B) na = (sa, lma)", "using a abc_comp_frist_steps_eq_pre[of lm A na B] assms"], ["proof (prove)\nusing this:\n  abc_steps_l (0, lm) A na = (sa, lma)\n  abc_notfinal (abc_steps_l (0, lm) A na) A \\<and>\n  abc_final (abc_steps_l (0, lm) A (Suc na)) A\n  \\<lbrakk>abc_notfinal (abc_steps_l (0, lm) A na) A; A \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> abc_steps_l (0, lm) (A [+] B) na =\n                    abc_steps_l (0, lm) A na\n  abc_steps_l (0, lm) A n = (length A, lm')\n  A \\<noteq> []\n\ngoal (1 subgoal):\n 1. abc_steps_l (0, lm) (A [+] B) na = (sa, lma)", "by simp"], ["proof (state)\nthis:\n  abc_steps_l (0, lm) (A [+] B) na = (sa, lma)\n\ngoal (1 subgoal):\n 1. \\<exists>n'. abc_steps_l (0, lm) (A [+] B) n' = (length A, lm')", "have d: \"sa < length A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sa < length A", "using b a"], ["proof (prove)\nusing this:\n  abc_steps_l (0, lm) A na = (sa, lma)\n  abc_notfinal (abc_steps_l (0, lm) A na) A \\<and>\n  abc_final (abc_steps_l (0, lm) A (Suc na)) A\n\ngoal (1 subgoal):\n 1. sa < length A", "by simp"], ["proof (state)\nthis:\n  sa < length A\n\ngoal (1 subgoal):\n 1. \\<exists>n'. abc_steps_l (0, lm) (A [+] B) n' = (length A, lm')", "then"], ["proof (chain)\npicking this:\n  sa < length A", "have e: \"abc_step_l (sa, lma) (abc_fetch sa (A [+] B)) = \n    abc_step_l (sa, lma) (abc_fetch sa A)\""], ["proof (prove)\nusing this:\n  sa < length A\n\ngoal (1 subgoal):\n 1. abc_step_l (sa, lma) (abc_fetch sa (A [+] B)) =\n    abc_step_l (sa, lma) (abc_fetch sa A)", "by(rule_tac abc_comp_first_step_eq_pre)"], ["proof (state)\nthis:\n  abc_step_l (sa, lma) (abc_fetch sa (A [+] B)) =\n  abc_step_l (sa, lma) (abc_fetch sa A)\n\ngoal (1 subgoal):\n 1. \\<exists>n'. abc_steps_l (0, lm) (A [+] B) n' = (length A, lm')", "from a"], ["proof (chain)\npicking this:\n  abc_notfinal (abc_steps_l (0, lm) A na) A \\<and>\n  abc_final (abc_steps_l (0, lm) A (Suc na)) A", "have \"abc_steps_l (0, lm) A (Suc na) = (length A, lm')\""], ["proof (prove)\nusing this:\n  abc_notfinal (abc_steps_l (0, lm) A na) A \\<and>\n  abc_final (abc_steps_l (0, lm) A (Suc na)) A\n\ngoal (1 subgoal):\n 1. abc_steps_l (0, lm) A (Suc na) = (length A, lm')", "using final equal_when_halt"], ["proof (prove)\nusing this:\n  abc_notfinal (abc_steps_l (0, lm) A na) A \\<and>\n  abc_final (abc_steps_l (0, lm) A (Suc na)) A\n  abc_steps_l (0, lm) A n = (length A, lm')\n  \\<lbrakk>abc_steps_l (?s, ?lm) ?A ?na = (length ?A, ?lma);\n   abc_steps_l (?s, ?lm) ?A ?nb = (length ?A, ?lmb)\\<rbrakk>\n  \\<Longrightarrow> ?lma = ?lmb\n\ngoal (1 subgoal):\n 1. abc_steps_l (0, lm) A (Suc na) = (length A, lm')", "by(case_tac \"abc_steps_l (0, lm) A (Suc na)\" , simp)"], ["proof (state)\nthis:\n  abc_steps_l (0, lm) A (Suc na) = (length A, lm')\n\ngoal (1 subgoal):\n 1. \\<exists>n'. abc_steps_l (0, lm) (A [+] B) n' = (length A, lm')", "then"], ["proof (chain)\npicking this:\n  abc_steps_l (0, lm) A (Suc na) = (length A, lm')", "have \"abc_steps_l (0, lm) (A [+] B) (Suc na) = (length A, lm')\""], ["proof (prove)\nusing this:\n  abc_steps_l (0, lm) A (Suc na) = (length A, lm')\n\ngoal (1 subgoal):\n 1. abc_steps_l (0, lm) (A [+] B) (Suc na) = (length A, lm')", "using a b c e"], ["proof (prove)\nusing this:\n  abc_steps_l (0, lm) A (Suc na) = (length A, lm')\n  abc_notfinal (abc_steps_l (0, lm) A na) A \\<and>\n  abc_final (abc_steps_l (0, lm) A (Suc na)) A\n  abc_steps_l (0, lm) A na = (sa, lma)\n  abc_steps_l (0, lm) (A [+] B) na = (sa, lma)\n  abc_step_l (sa, lma) (abc_fetch sa (A [+] B)) =\n  abc_step_l (sa, lma) (abc_fetch sa A)\n\ngoal (1 subgoal):\n 1. abc_steps_l (0, lm) (A [+] B) (Suc na) = (length A, lm')", "by(simp add: abc_step_red2)"], ["proof (state)\nthis:\n  abc_steps_l (0, lm) (A [+] B) (Suc na) = (length A, lm')\n\ngoal (1 subgoal):\n 1. \\<exists>n'. abc_steps_l (0, lm) (A [+] B) n' = (length A, lm')", "thus \"?thesis\""], ["proof (prove)\nusing this:\n  abc_steps_l (0, lm) (A [+] B) (Suc na) = (length A, lm')\n\ngoal (1 subgoal):\n 1. \\<exists>n'. abc_steps_l (0, lm) (A [+] B) n' = (length A, lm')", "by blast"], ["proof (state)\nthis:\n  \\<exists>n'. abc_steps_l (0, lm) (A [+] B) n' = (length A, lm')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma abc_exec_null: \"abc_steps_l sam [] n = sam\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abc_steps_l sam [] n = sam", "apply(cases sam)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b. sam = (a, b) \\<Longrightarrow> abc_steps_l sam [] n = sam", "apply(induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b. sam = (a, b) \\<Longrightarrow> abc_steps_l sam [] 0 = sam\n 2. \\<And>n a b.\n       \\<lbrakk>\\<And>a b.\n                   sam = (a, b) \\<Longrightarrow>\n                   abc_steps_l sam [] n = sam;\n        sam = (a, b)\\<rbrakk>\n       \\<Longrightarrow> abc_steps_l sam [] (Suc n) = sam", "apply(auto simp: abc_step_red2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       sam = (a, b) \\<Longrightarrow> abc_steps_l (a, b) [] 0 = (a, b)\n 2. \\<And>n a b.\n       \\<lbrakk>abc_steps_l (a, b) [] n = (a, b); sam = (a, b)\\<rbrakk>\n       \\<Longrightarrow> abc_step_l (a, b) (abc_fetch a []) = (a, b)", "apply(auto simp: abc_step_l.simps abc_steps_l.simps abc_fetch.simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma abc_comp_frist_steps_halt_eq: \n  assumes final: \"abc_steps_l (0, lm) A n = (length A, lm')\"\n  shows \"\\<exists> n'. abc_steps_l (0, lm) (A [+] B) n' = (length A, lm')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n'. abc_steps_l (0, lm) (A [+] B) n' = (length A, lm')", "using final"], ["proof (prove)\nusing this:\n  abc_steps_l (0, lm) A n = (length A, lm')\n\ngoal (1 subgoal):\n 1. \\<exists>n'. abc_steps_l (0, lm) (A [+] B) n' = (length A, lm')", "apply(case_tac \"A = []\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>abc_steps_l (0, lm) A n = (length A, lm'); A = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'.\n                         abc_steps_l (0, lm) (A [+] B) n' = (length A, lm')\n 2. \\<lbrakk>abc_steps_l (0, lm) A n = (length A, lm');\n     A \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'.\n                         abc_steps_l (0, lm) (A [+] B) n' = (length A, lm')", "apply(rule_tac x = 0 in exI, simp add: abc_steps_l.simps abc_exec_null)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>abc_steps_l (0, lm) A n = (length A, lm');\n     A \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'.\n                         abc_steps_l (0, lm) (A [+] B) n' = (length A, lm')", "apply(rule_tac abc_comp_frist_steps_halt_eq', simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma abc_comp_second_step_eq: \n  assumes exec: \"abc_step_l (s, lm) (abc_fetch s B) = (sa, lma)\"\n  shows \"abc_step_l (s + length A, lm) (abc_fetch (s + length A) (A [+] B))\n         = (sa + length A, lma)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abc_step_l (s + length A, lm) (abc_fetch (s + length A) (A [+] B)) =\n    (sa + length A, lma)", "using assms"], ["proof (prove)\nusing this:\n  abc_step_l (s, lm) (abc_fetch s B) = (sa, lma)\n\ngoal (1 subgoal):\n 1. abc_step_l (s + length A, lm) (abc_fetch (s + length A) (A [+] B)) =\n    (sa + length A, lma)", "apply(auto simp: abc_step_l.simps abc_fetch.simps nth_append abc_comp.simps abc_shift.simps split : if_splits )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s < length B;\n     (case B ! s of\n      Inc n \\<Rightarrow>\n        let nv = abc_lm_v lm n in (s + 1, abc_lm_s lm n (nv + 1))\n      | Dec n e \\<Rightarrow>\n          let nv = abc_lm_v lm n\n          in if nv = 0 then (e, abc_lm_s lm n 0)\n             else (s + 1, abc_lm_s lm n (nv - 1))\n      | Goto n \\<Rightarrow> (n, lm)) =\n     (sa, lma)\\<rbrakk>\n    \\<Longrightarrow> (case abc_inst_shift (B ! s) (length A) of\n                       Inc n \\<Rightarrow>\n                         let nv = abc_lm_v lm n\n                         in (s + length A + 1, abc_lm_s lm n (nv + 1))\n                       | Dec n e \\<Rightarrow>\n                           let nv = abc_lm_v lm n\n                           in if nv = 0 then (e, abc_lm_s lm n 0)\n                              else (s + length A + 1,\n                                    abc_lm_s lm n (nv - 1))\n                       | Goto n \\<Rightarrow> (n, lm)) =\n                      (sa + length A, lma)", "apply(case_tac [!] \"B ! s\", auto simp: Let_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma abc_comp_second_steps_eq:\n  assumes exec: \"abc_steps_l (0, lm) B n = (sa, lm')\"\n  shows \"abc_steps_l (length A, lm) (A [+] B) n = (sa + length A, lm')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abc_steps_l (length A, lm) (A [+] B) n = (sa + length A, lm')", "using assms"], ["proof (prove)\nusing this:\n  abc_steps_l (0, lm) B n = (sa, lm')\n\ngoal (1 subgoal):\n 1. abc_steps_l (length A, lm) (A [+] B) n = (sa + length A, lm')", "proof(induct n arbitrary: sa lm')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>sa lm'.\n       abc_steps_l (0, lm) B 0 = (sa, lm') \\<Longrightarrow>\n       abc_steps_l (length A, lm) (A [+] B) 0 = (sa + length A, lm')\n 2. \\<And>n sa lm'.\n       \\<lbrakk>\\<And>sa lm'.\n                   abc_steps_l (0, lm) B n = (sa, lm') \\<Longrightarrow>\n                   abc_steps_l (length A, lm) (A [+] B) n =\n                   (sa + length A, lm');\n        abc_steps_l (0, lm) B (Suc n) = (sa, lm')\\<rbrakk>\n       \\<Longrightarrow> abc_steps_l (length A, lm) (A [+] B) (Suc n) =\n                         (sa + length A, lm')", "case 0"], ["proof (state)\nthis:\n  abc_steps_l (0, lm) B 0 = (sa, lm')\n\ngoal (2 subgoals):\n 1. \\<And>sa lm'.\n       abc_steps_l (0, lm) B 0 = (sa, lm') \\<Longrightarrow>\n       abc_steps_l (length A, lm) (A [+] B) 0 = (sa + length A, lm')\n 2. \\<And>n sa lm'.\n       \\<lbrakk>\\<And>sa lm'.\n                   abc_steps_l (0, lm) B n = (sa, lm') \\<Longrightarrow>\n                   abc_steps_l (length A, lm) (A [+] B) n =\n                   (sa + length A, lm');\n        abc_steps_l (0, lm) B (Suc n) = (sa, lm')\\<rbrakk>\n       \\<Longrightarrow> abc_steps_l (length A, lm) (A [+] B) (Suc n) =\n                         (sa + length A, lm')", "thus \"?case\""], ["proof (prove)\nusing this:\n  abc_steps_l (0, lm) B 0 = (sa, lm')\n\ngoal (1 subgoal):\n 1. abc_steps_l (length A, lm) (A [+] B) 0 = (sa + length A, lm')", "by(simp add: abc_steps_l.simps)"], ["proof (state)\nthis:\n  abc_steps_l (length A, lm) (A [+] B) 0 = (sa + length A, lm')\n\ngoal (1 subgoal):\n 1. \\<And>n sa lm'.\n       \\<lbrakk>\\<And>sa lm'.\n                   abc_steps_l (0, lm) B n = (sa, lm') \\<Longrightarrow>\n                   abc_steps_l (length A, lm) (A [+] B) n =\n                   (sa + length A, lm');\n        abc_steps_l (0, lm) B (Suc n) = (sa, lm')\\<rbrakk>\n       \\<Longrightarrow> abc_steps_l (length A, lm) (A [+] B) (Suc n) =\n                         (sa + length A, lm')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n sa lm'.\n       \\<lbrakk>\\<And>sa lm'.\n                   abc_steps_l (0, lm) B n = (sa, lm') \\<Longrightarrow>\n                   abc_steps_l (length A, lm) (A [+] B) n =\n                   (sa + length A, lm');\n        abc_steps_l (0, lm) B (Suc n) = (sa, lm')\\<rbrakk>\n       \\<Longrightarrow> abc_steps_l (length A, lm) (A [+] B) (Suc n) =\n                         (sa + length A, lm')", "case (Suc n)"], ["proof (state)\nthis:\n  abc_steps_l (0, lm) B n = (?sa, ?lm') \\<Longrightarrow>\n  abc_steps_l (length A, lm) (A [+] B) n = (?sa + length A, ?lm')\n  abc_steps_l (0, lm) B (Suc n) = (sa, lm')\n\ngoal (1 subgoal):\n 1. \\<And>n sa lm'.\n       \\<lbrakk>\\<And>sa lm'.\n                   abc_steps_l (0, lm) B n = (sa, lm') \\<Longrightarrow>\n                   abc_steps_l (length A, lm) (A [+] B) n =\n                   (sa + length A, lm');\n        abc_steps_l (0, lm) B (Suc n) = (sa, lm')\\<rbrakk>\n       \\<Longrightarrow> abc_steps_l (length A, lm) (A [+] B) (Suc n) =\n                         (sa + length A, lm')", "have ind: \"\\<And>sa lm'. abc_steps_l (0, lm) B n = (sa, lm') \\<Longrightarrow> \n    abc_steps_l (length A, lm) (A [+] B) n = (sa + length A, lm')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sa lm'.\n       abc_steps_l (0, lm) B n = (sa, lm') \\<Longrightarrow>\n       abc_steps_l (length A, lm) (A [+] B) n = (sa + length A, lm')", "by fact"], ["proof (state)\nthis:\n  abc_steps_l (0, lm) B n = (?sa, ?lm') \\<Longrightarrow>\n  abc_steps_l (length A, lm) (A [+] B) n = (?sa + length A, ?lm')\n\ngoal (1 subgoal):\n 1. \\<And>n sa lm'.\n       \\<lbrakk>\\<And>sa lm'.\n                   abc_steps_l (0, lm) B n = (sa, lm') \\<Longrightarrow>\n                   abc_steps_l (length A, lm) (A [+] B) n =\n                   (sa + length A, lm');\n        abc_steps_l (0, lm) B (Suc n) = (sa, lm')\\<rbrakk>\n       \\<Longrightarrow> abc_steps_l (length A, lm) (A [+] B) (Suc n) =\n                         (sa + length A, lm')", "have exec: \"abc_steps_l (0, lm) B (Suc n) = (sa, lm')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abc_steps_l (0, lm) B (Suc n) = (sa, lm')", "by fact"], ["proof (state)\nthis:\n  abc_steps_l (0, lm) B (Suc n) = (sa, lm')\n\ngoal (1 subgoal):\n 1. \\<And>n sa lm'.\n       \\<lbrakk>\\<And>sa lm'.\n                   abc_steps_l (0, lm) B n = (sa, lm') \\<Longrightarrow>\n                   abc_steps_l (length A, lm) (A [+] B) n =\n                   (sa + length A, lm');\n        abc_steps_l (0, lm) B (Suc n) = (sa, lm')\\<rbrakk>\n       \\<Longrightarrow> abc_steps_l (length A, lm) (A [+] B) (Suc n) =\n                         (sa + length A, lm')", "obtain sb lmb where a: \" abc_steps_l (0, lm) B n = (sb, lmb)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>sb lmb.\n        abc_steps_l (0, lm) B n = (sb, lmb) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis prod.exhaust)"], ["proof (state)\nthis:\n  abc_steps_l (0, lm) B n = (sb, lmb)\n\ngoal (1 subgoal):\n 1. \\<And>n sa lm'.\n       \\<lbrakk>\\<And>sa lm'.\n                   abc_steps_l (0, lm) B n = (sa, lm') \\<Longrightarrow>\n                   abc_steps_l (length A, lm) (A [+] B) n =\n                   (sa + length A, lm');\n        abc_steps_l (0, lm) B (Suc n) = (sa, lm')\\<rbrakk>\n       \\<Longrightarrow> abc_steps_l (length A, lm) (A [+] B) (Suc n) =\n                         (sa + length A, lm')", "then"], ["proof (chain)\npicking this:\n  abc_steps_l (0, lm) B n = (sb, lmb)", "have \"abc_steps_l (length A, lm) (A [+] B) n = (sb + length A, lmb)\""], ["proof (prove)\nusing this:\n  abc_steps_l (0, lm) B n = (sb, lmb)\n\ngoal (1 subgoal):\n 1. abc_steps_l (length A, lm) (A [+] B) n = (sb + length A, lmb)", "using ind"], ["proof (prove)\nusing this:\n  abc_steps_l (0, lm) B n = (sb, lmb)\n  abc_steps_l (0, lm) B n = (?sa, ?lm') \\<Longrightarrow>\n  abc_steps_l (length A, lm) (A [+] B) n = (?sa + length A, ?lm')\n\ngoal (1 subgoal):\n 1. abc_steps_l (length A, lm) (A [+] B) n = (sb + length A, lmb)", "by simp"], ["proof (state)\nthis:\n  abc_steps_l (length A, lm) (A [+] B) n = (sb + length A, lmb)\n\ngoal (1 subgoal):\n 1. \\<And>n sa lm'.\n       \\<lbrakk>\\<And>sa lm'.\n                   abc_steps_l (0, lm) B n = (sa, lm') \\<Longrightarrow>\n                   abc_steps_l (length A, lm) (A [+] B) n =\n                   (sa + length A, lm');\n        abc_steps_l (0, lm) B (Suc n) = (sa, lm')\\<rbrakk>\n       \\<Longrightarrow> abc_steps_l (length A, lm) (A [+] B) (Suc n) =\n                         (sa + length A, lm')", "moreover"], ["proof (state)\nthis:\n  abc_steps_l (length A, lm) (A [+] B) n = (sb + length A, lmb)\n\ngoal (1 subgoal):\n 1. \\<And>n sa lm'.\n       \\<lbrakk>\\<And>sa lm'.\n                   abc_steps_l (0, lm) B n = (sa, lm') \\<Longrightarrow>\n                   abc_steps_l (length A, lm) (A [+] B) n =\n                   (sa + length A, lm');\n        abc_steps_l (0, lm) B (Suc n) = (sa, lm')\\<rbrakk>\n       \\<Longrightarrow> abc_steps_l (length A, lm) (A [+] B) (Suc n) =\n                         (sa + length A, lm')", "have \"abc_step_l (sb + length A, lmb) (abc_fetch (sb + length A) (A [+] B)) = (sa + length A, lm') \""], ["proof (prove)\ngoal (1 subgoal):\n 1. abc_step_l (sb + length A, lmb) (abc_fetch (sb + length A) (A [+] B)) =\n    (sa + length A, lm')", "using a exec abc_comp_second_step_eq"], ["proof (prove)\nusing this:\n  abc_steps_l (0, lm) B n = (sb, lmb)\n  abc_steps_l (0, lm) B (Suc n) = (sa, lm')\n  abc_step_l (?s, ?lm) (abc_fetch ?s ?B) = (?sa, ?lma) \\<Longrightarrow>\n  abc_step_l (?s + length ?A, ?lm)\n   (abc_fetch (?s + length ?A) (?A [+] ?B)) =\n  (?sa + length ?A, ?lma)\n\ngoal (1 subgoal):\n 1. abc_step_l (sb + length A, lmb) (abc_fetch (sb + length A) (A [+] B)) =\n    (sa + length A, lm')", "by(simp add: abc_step_red2)"], ["proof (state)\nthis:\n  abc_step_l (sb + length A, lmb) (abc_fetch (sb + length A) (A [+] B)) =\n  (sa + length A, lm')\n\ngoal (1 subgoal):\n 1. \\<And>n sa lm'.\n       \\<lbrakk>\\<And>sa lm'.\n                   abc_steps_l (0, lm) B n = (sa, lm') \\<Longrightarrow>\n                   abc_steps_l (length A, lm) (A [+] B) n =\n                   (sa + length A, lm');\n        abc_steps_l (0, lm) B (Suc n) = (sa, lm')\\<rbrakk>\n       \\<Longrightarrow> abc_steps_l (length A, lm) (A [+] B) (Suc n) =\n                         (sa + length A, lm')", "ultimately"], ["proof (chain)\npicking this:\n  abc_steps_l (length A, lm) (A [+] B) n = (sb + length A, lmb)\n  abc_step_l (sb + length A, lmb) (abc_fetch (sb + length A) (A [+] B)) =\n  (sa + length A, lm')", "show \"?case\""], ["proof (prove)\nusing this:\n  abc_steps_l (length A, lm) (A [+] B) n = (sb + length A, lmb)\n  abc_step_l (sb + length A, lmb) (abc_fetch (sb + length A) (A [+] B)) =\n  (sa + length A, lm')\n\ngoal (1 subgoal):\n 1. abc_steps_l (length A, lm) (A [+] B) (Suc n) = (sa + length A, lm')", "by(simp add: abc_step_red2)"], ["proof (state)\nthis:\n  abc_steps_l (length A, lm) (A [+] B) (Suc n) = (sa + length A, lm')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma length_abc_comp[simp, intro]: \n  \"length (A [+] B) = length A + length B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (A [+] B) = length A + length B", "by(auto simp: abc_comp.simps abc_shift.simps)"], ["", "lemma abc_Hoare_plus_halt : \n  assumes A_halt : \"{P} (A::abc_prog) {Q}\"\n    and B_halt : \"{Q} (B::abc_prog) {S}\"\n  shows \"{P} (A [+] B) {S}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {P} A [+] B {S}", "proof(rule_tac abc_Hoare_haltI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>lm.\n       P lm \\<Longrightarrow>\n       \\<exists>n.\n          abc_final (abc_steps_l (0, lm) (A [+] B) n) (A [+] B) \\<and>\n          S abc_holds_for abc_steps_l (0, lm) (A [+] B) n", "fix lm"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>lm.\n       P lm \\<Longrightarrow>\n       \\<exists>n.\n          abc_final (abc_steps_l (0, lm) (A [+] B) n) (A [+] B) \\<and>\n          S abc_holds_for abc_steps_l (0, lm) (A [+] B) n", "assume a: \"P lm\""], ["proof (state)\nthis:\n  P lm\n\ngoal (1 subgoal):\n 1. \\<And>lm.\n       P lm \\<Longrightarrow>\n       \\<exists>n.\n          abc_final (abc_steps_l (0, lm) (A [+] B) n) (A [+] B) \\<and>\n          S abc_holds_for abc_steps_l (0, lm) (A [+] B) n", "then"], ["proof (chain)\npicking this:\n  P lm", "obtain na lma where \n    \"abc_final (abc_steps_l (0, lm) A na) A\"\n    and b: \"abc_steps_l (0, lm) A na = (length A, lma)\"\n    and c: \"Q abc_holds_for (length A, lma)\""], ["proof (prove)\nusing this:\n  P lm\n\ngoal (1 subgoal):\n 1. (\\<And>na lma.\n        \\<lbrakk>abc_final (abc_steps_l (0, lm) A na) A;\n         abc_steps_l (0, lm) A na = (length A, lma);\n         Q abc_holds_for (length A, lma)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using A_halt"], ["proof (prove)\nusing this:\n  P lm\n  {P} A {Q}\n\ngoal (1 subgoal):\n 1. (\\<And>na lma.\n        \\<lbrakk>abc_final (abc_steps_l (0, lm) A na) A;\n         abc_steps_l (0, lm) A na = (length A, lma);\n         Q abc_holds_for (length A, lma)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding abc_Hoare_halt_def"], ["proof (prove)\nusing this:\n  P lm\n  \\<forall>lm.\n     P lm \\<longrightarrow>\n     (\\<exists>n.\n         abc_final (abc_steps_l (0, lm) A n) A \\<and>\n         Q abc_holds_for abc_steps_l (0, lm) A n)\n\ngoal (1 subgoal):\n 1. (\\<And>na lma.\n        \\<lbrakk>abc_final (abc_steps_l (0, lm) A na) A;\n         abc_steps_l (0, lm) A na = (length A, lma);\n         Q abc_holds_for (length A, lma)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (full_types) abc_final.simps abc_holds_for.simps prod.exhaust)"], ["proof (state)\nthis:\n  abc_final (abc_steps_l (0, lm) A na) A\n  abc_steps_l (0, lm) A na = (length A, lma)\n  Q abc_holds_for (length A, lma)\n\ngoal (1 subgoal):\n 1. \\<And>lm.\n       P lm \\<Longrightarrow>\n       \\<exists>n.\n          abc_final (abc_steps_l (0, lm) (A [+] B) n) (A [+] B) \\<and>\n          S abc_holds_for abc_steps_l (0, lm) (A [+] B) n", "have \"\\<exists> n. abc_steps_l (0, lm) (A [+] B) n = (length A, lma)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n. abc_steps_l (0, lm) (A [+] B) n = (length A, lma)", "using abc_comp_frist_steps_halt_eq b"], ["proof (prove)\nusing this:\n  abc_steps_l (0, ?lm) ?A ?n = (length ?A, ?lm') \\<Longrightarrow>\n  \\<exists>n'. abc_steps_l (0, ?lm) (?A [+] ?B) n' = (length ?A, ?lm')\n  abc_steps_l (0, lm) A na = (length A, lma)\n\ngoal (1 subgoal):\n 1. \\<exists>n. abc_steps_l (0, lm) (A [+] B) n = (length A, lma)", "by(simp)"], ["proof (state)\nthis:\n  \\<exists>n. abc_steps_l (0, lm) (A [+] B) n = (length A, lma)\n\ngoal (1 subgoal):\n 1. \\<And>lm.\n       P lm \\<Longrightarrow>\n       \\<exists>n.\n          abc_final (abc_steps_l (0, lm) (A [+] B) n) (A [+] B) \\<and>\n          S abc_holds_for abc_steps_l (0, lm) (A [+] B) n", "then"], ["proof (chain)\npicking this:\n  \\<exists>n. abc_steps_l (0, lm) (A [+] B) n = (length A, lma)", "obtain nx where h1: \"abc_steps_l (0, lm) (A [+] B) nx = (length A, lma)\""], ["proof (prove)\nusing this:\n  \\<exists>n. abc_steps_l (0, lm) (A [+] B) n = (length A, lma)\n\ngoal (1 subgoal):\n 1. (\\<And>nx.\n        abc_steps_l (0, lm) (A [+] B) nx = (length A, lma) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  abc_steps_l (0, lm) (A [+] B) nx = (length A, lma)\n\ngoal (1 subgoal):\n 1. \\<And>lm.\n       P lm \\<Longrightarrow>\n       \\<exists>n.\n          abc_final (abc_steps_l (0, lm) (A [+] B) n) (A [+] B) \\<and>\n          S abc_holds_for abc_steps_l (0, lm) (A [+] B) n", "from c"], ["proof (chain)\npicking this:\n  Q abc_holds_for (length A, lma)", "have \"Q lma\""], ["proof (prove)\nusing this:\n  Q abc_holds_for (length A, lma)\n\ngoal (1 subgoal):\n 1. Q lma", "using c"], ["proof (prove)\nusing this:\n  Q abc_holds_for (length A, lma)\n  Q abc_holds_for (length A, lma)\n\ngoal (1 subgoal):\n 1. Q lma", "unfolding abc_holds_for.simps"], ["proof (prove)\nusing this:\n  Q lma\n  Q lma\n\ngoal (1 subgoal):\n 1. Q lma", "by simp"], ["proof (state)\nthis:\n  Q lma\n\ngoal (1 subgoal):\n 1. \\<And>lm.\n       P lm \\<Longrightarrow>\n       \\<exists>n.\n          abc_final (abc_steps_l (0, lm) (A [+] B) n) (A [+] B) \\<and>\n          S abc_holds_for abc_steps_l (0, lm) (A [+] B) n", "then"], ["proof (chain)\npicking this:\n  Q lma", "obtain nb lmb where\n    \"abc_final (abc_steps_l (0, lma) B nb) B\"\n    and d: \"abc_steps_l (0, lma) B nb = (length B, lmb)\"\n    and e: \"S abc_holds_for (length B, lmb)\""], ["proof (prove)\nusing this:\n  Q lma\n\ngoal (1 subgoal):\n 1. (\\<And>nb lmb.\n        \\<lbrakk>abc_final (abc_steps_l (0, lma) B nb) B;\n         abc_steps_l (0, lma) B nb = (length B, lmb);\n         S abc_holds_for (length B, lmb)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using B_halt"], ["proof (prove)\nusing this:\n  Q lma\n  {Q} B {S}\n\ngoal (1 subgoal):\n 1. (\\<And>nb lmb.\n        \\<lbrakk>abc_final (abc_steps_l (0, lma) B nb) B;\n         abc_steps_l (0, lma) B nb = (length B, lmb);\n         S abc_holds_for (length B, lmb)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding abc_Hoare_halt_def"], ["proof (prove)\nusing this:\n  Q lma\n  \\<forall>lm.\n     Q lm \\<longrightarrow>\n     (\\<exists>n.\n         abc_final (abc_steps_l (0, lm) B n) B \\<and>\n         S abc_holds_for abc_steps_l (0, lm) B n)\n\ngoal (1 subgoal):\n 1. (\\<And>nb lmb.\n        \\<lbrakk>abc_final (abc_steps_l (0, lma) B nb) B;\n         abc_steps_l (0, lma) B nb = (length B, lmb);\n         S abc_holds_for (length B, lmb)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (full_types) abc_final.simps abc_holds_for.simps prod.exhaust)"], ["proof (state)\nthis:\n  abc_final (abc_steps_l (0, lma) B nb) B\n  abc_steps_l (0, lma) B nb = (length B, lmb)\n  S abc_holds_for (length B, lmb)\n\ngoal (1 subgoal):\n 1. \\<And>lm.\n       P lm \\<Longrightarrow>\n       \\<exists>n.\n          abc_final (abc_steps_l (0, lm) (A [+] B) n) (A [+] B) \\<and>\n          S abc_holds_for abc_steps_l (0, lm) (A [+] B) n", "have h2: \"abc_steps_l (length A, lma) (A [+] B) nb = (length B + length A, lmb)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abc_steps_l (length A, lma) (A [+] B) nb = (length B + length A, lmb)", "using d abc_comp_second_steps_eq"], ["proof (prove)\nusing this:\n  abc_steps_l (0, lma) B nb = (length B, lmb)\n  abc_steps_l (0, ?lm) ?B ?n = (?sa, ?lm') \\<Longrightarrow>\n  abc_steps_l (length ?A, ?lm) (?A [+] ?B) ?n = (?sa + length ?A, ?lm')\n\ngoal (1 subgoal):\n 1. abc_steps_l (length A, lma) (A [+] B) nb = (length B + length A, lmb)", "by simp"], ["proof (state)\nthis:\n  abc_steps_l (length A, lma) (A [+] B) nb = (length B + length A, lmb)\n\ngoal (1 subgoal):\n 1. \\<And>lm.\n       P lm \\<Longrightarrow>\n       \\<exists>n.\n          abc_final (abc_steps_l (0, lm) (A [+] B) n) (A [+] B) \\<and>\n          S abc_holds_for abc_steps_l (0, lm) (A [+] B) n", "thus \"\\<exists>n. abc_final (abc_steps_l (0, lm) (A [+] B) n) (A [+] B) \\<and>\n    S abc_holds_for abc_steps_l (0, lm) (A [+] B) n\""], ["proof (prove)\nusing this:\n  abc_steps_l (length A, lma) (A [+] B) nb = (length B + length A, lmb)\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       abc_final (abc_steps_l (0, lm) (A [+] B) n) (A [+] B) \\<and>\n       S abc_holds_for abc_steps_l (0, lm) (A [+] B) n", "using h1 e"], ["proof (prove)\nusing this:\n  abc_steps_l (length A, lma) (A [+] B) nb = (length B + length A, lmb)\n  abc_steps_l (0, lm) (A [+] B) nx = (length A, lma)\n  S abc_holds_for (length B, lmb)\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       abc_final (abc_steps_l (0, lm) (A [+] B) n) (A [+] B) \\<and>\n       S abc_holds_for abc_steps_l (0, lm) (A [+] B) n", "by(rule_tac x = \"nx + nb\" in exI, simp add: abc_steps_add)"], ["proof (state)\nthis:\n  \\<exists>n.\n     abc_final (abc_steps_l (0, lm) (A [+] B) n) (A [+] B) \\<and>\n     S abc_holds_for abc_steps_l (0, lm) (A [+] B) n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma abc_unhalt_append_eq:\n  assumes unhalt: \"{P} (A::abc_prog) \\<up>\"\n    and P: \"P args\"\n  shows \"abc_steps_l (0, args) (A [+] B) stp = abc_steps_l (0, args) A stp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abc_steps_l (0, args) (A [+] B) stp = abc_steps_l (0, args) A stp", "proof(induct stp)"], ["proof (state)\ngoal (2 subgoals):\n 1. abc_steps_l (0, args) (A [+] B) 0 = abc_steps_l (0, args) A 0\n 2. \\<And>stp.\n       abc_steps_l (0, args) (A [+] B) stp =\n       abc_steps_l (0, args) A stp \\<Longrightarrow>\n       abc_steps_l (0, args) (A [+] B) (Suc stp) =\n       abc_steps_l (0, args) A (Suc stp)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. abc_steps_l (0, args) (A [+] B) 0 = abc_steps_l (0, args) A 0\n 2. \\<And>stp.\n       abc_steps_l (0, args) (A [+] B) stp =\n       abc_steps_l (0, args) A stp \\<Longrightarrow>\n       abc_steps_l (0, args) (A [+] B) (Suc stp) =\n       abc_steps_l (0, args) A (Suc stp)", "thus \"?case\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abc_steps_l (0, args) (A [+] B) 0 = abc_steps_l (0, args) A 0", "by(simp add: abc_steps_l.simps)"], ["proof (state)\nthis:\n  abc_steps_l (0, args) (A [+] B) 0 = abc_steps_l (0, args) A 0\n\ngoal (1 subgoal):\n 1. \\<And>stp.\n       abc_steps_l (0, args) (A [+] B) stp =\n       abc_steps_l (0, args) A stp \\<Longrightarrow>\n       abc_steps_l (0, args) (A [+] B) (Suc stp) =\n       abc_steps_l (0, args) A (Suc stp)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>stp.\n       abc_steps_l (0, args) (A [+] B) stp =\n       abc_steps_l (0, args) A stp \\<Longrightarrow>\n       abc_steps_l (0, args) (A [+] B) (Suc stp) =\n       abc_steps_l (0, args) A (Suc stp)", "case (Suc stp)"], ["proof (state)\nthis:\n  abc_steps_l (0, args) (A [+] B) stp = abc_steps_l (0, args) A stp\n\ngoal (1 subgoal):\n 1. \\<And>stp.\n       abc_steps_l (0, args) (A [+] B) stp =\n       abc_steps_l (0, args) A stp \\<Longrightarrow>\n       abc_steps_l (0, args) (A [+] B) (Suc stp) =\n       abc_steps_l (0, args) A (Suc stp)", "have ind: \"abc_steps_l (0, args) (A [+] B) stp = abc_steps_l (0, args) A stp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abc_steps_l (0, args) (A [+] B) stp = abc_steps_l (0, args) A stp", "by fact"], ["proof (state)\nthis:\n  abc_steps_l (0, args) (A [+] B) stp = abc_steps_l (0, args) A stp\n\ngoal (1 subgoal):\n 1. \\<And>stp.\n       abc_steps_l (0, args) (A [+] B) stp =\n       abc_steps_l (0, args) A stp \\<Longrightarrow>\n       abc_steps_l (0, args) (A [+] B) (Suc stp) =\n       abc_steps_l (0, args) A (Suc stp)", "obtain s nl where a: \"abc_steps_l (0, args) A stp = (s, nl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s nl.\n        abc_steps_l (0, args) A stp = (s, nl) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis prod.exhaust)"], ["proof (state)\nthis:\n  abc_steps_l (0, args) A stp = (s, nl)\n\ngoal (1 subgoal):\n 1. \\<And>stp.\n       abc_steps_l (0, args) (A [+] B) stp =\n       abc_steps_l (0, args) A stp \\<Longrightarrow>\n       abc_steps_l (0, args) (A [+] B) (Suc stp) =\n       abc_steps_l (0, args) A (Suc stp)", "then"], ["proof (chain)\npicking this:\n  abc_steps_l (0, args) A stp = (s, nl)", "have b: \"s < length A\""], ["proof (prove)\nusing this:\n  abc_steps_l (0, args) A stp = (s, nl)\n\ngoal (1 subgoal):\n 1. s < length A", "using unhalt P"], ["proof (prove)\nusing this:\n  abc_steps_l (0, args) A stp = (s, nl)\n  {P} A \\<up>\n  P args\n\ngoal (1 subgoal):\n 1. s < length A", "apply(auto simp: abc_Hoare_unhalt_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>abc_steps_l (0, args) A stp = (s, nl);\n     \\<forall>args.\n        P args \\<longrightarrow>\n        (\\<forall>n. abc_notfinal (abc_steps_l (0, args) A n) A);\n     P args\\<rbrakk>\n    \\<Longrightarrow> s < length A", "by (metis abc_notfinal.simps)"], ["proof (state)\nthis:\n  s < length A\n\ngoal (1 subgoal):\n 1. \\<And>stp.\n       abc_steps_l (0, args) (A [+] B) stp =\n       abc_steps_l (0, args) A stp \\<Longrightarrow>\n       abc_steps_l (0, args) (A [+] B) (Suc stp) =\n       abc_steps_l (0, args) A (Suc stp)", "thus \"?case\""], ["proof (prove)\nusing this:\n  s < length A\n\ngoal (1 subgoal):\n 1. abc_steps_l (0, args) (A [+] B) (Suc stp) =\n    abc_steps_l (0, args) A (Suc stp)", "using a ind"], ["proof (prove)\nusing this:\n  s < length A\n  abc_steps_l (0, args) A stp = (s, nl)\n  abc_steps_l (0, args) (A [+] B) stp = abc_steps_l (0, args) A stp\n\ngoal (1 subgoal):\n 1. abc_steps_l (0, args) (A [+] B) (Suc stp) =\n    abc_steps_l (0, args) A (Suc stp)", "by(simp add: abc_step_red2 abc_step_l.simps abc_fetch.simps nth_append abc_comp.simps)"], ["proof (state)\nthis:\n  abc_steps_l (0, args) (A [+] B) (Suc stp) =\n  abc_steps_l (0, args) A (Suc stp)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma abc_Hoare_plus_unhalt1: \n  \"{P} (A::abc_prog) \\<up> \\<Longrightarrow> {P} (A [+] B) \\<up>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {P} A \\<up> \\<Longrightarrow> {P} A [+] B \\<up>", "apply(rule abc_Hoare_unhaltI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>args n.\n       \\<lbrakk>{P} A \\<up>; P args\\<rbrakk>\n       \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) (A [+] B) n)\n                          (A [+] B)", "apply(subst abc_unhalt_append_eq,force,force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>args n.\n       \\<lbrakk>{P} A \\<up>; P args\\<rbrakk>\n       \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) A n) (A [+] B)", "by (metis (mono_tags, lifting) abc_notfinal.elims(3) abc_notfinal.simps add_diff_inverse_nat \n      abc_Hoare_unhalt_def le_imp_less_Suc length_abc_comp not_less_eq order_refl trans_le_add1)"], ["", "lemma notfinal_all_before:\n  \"\\<lbrakk>abc_notfinal (abc_steps_l (0, args) A x) A; y\\<le>x \\<rbrakk>\n  \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) A y) A \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A x) A; y \\<le> x\\<rbrakk>\n    \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) A y) A", "apply(subgoal_tac \"\\<exists> d. x = y + d\", auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>d.\n       \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A (y + d)) A;\n        x = y + d\\<rbrakk>\n       \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) A y) A\n 2. \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A x) A; y \\<le> x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>d. x = y + d", "apply(cases \"abc_steps_l (0, args) A y\",simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>d a b.\n       \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A (y + d)) A; x = y + d;\n        abc_steps_l (0, args) A y = (a, b)\\<rbrakk>\n       \\<Longrightarrow> a < length A\n 2. \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A x) A; y \\<le> x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>d. x = y + d", "apply(rule classical, simp add: abc_steps_add leI halt_steps2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A x) A; y \\<le> x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>d. x = y + d", "by arith"], ["", "lemma abc_Hoare_plus_unhalt2':\n  assumes unhalt: \"{Q} (B::abc_prog) \\<up>\"\n    and halt: \"{P} (A::abc_prog) {Q}\"\n    and notnull: \"A \\<noteq> []\"\n    and P: \"P args\" \n  shows \"abc_notfinal (abc_steps_l (0, args) (A [+] B) n) (A [+] B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abc_notfinal (abc_steps_l (0, args) (A [+] B) n) (A [+] B)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. abc_notfinal (abc_steps_l (0, args) (A [+] B) n) (A [+] B)", "obtain st nl stp where a: \"abc_final (abc_steps_l (0, args) A stp) A\"\n    and b: \"Q abc_holds_for (length A, nl)\"\n    and c: \"abc_steps_l (0, args) A stp = (st, nl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>stp nl st.\n        \\<lbrakk>abc_final (abc_steps_l (0, args) A stp) A;\n         Q abc_holds_for (length A, nl);\n         abc_steps_l (0, args) A stp = (st, nl)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using halt P"], ["proof (prove)\nusing this:\n  {P} A {Q}\n  P args\n\ngoal (1 subgoal):\n 1. (\\<And>stp nl st.\n        \\<lbrakk>abc_final (abc_steps_l (0, args) A stp) A;\n         Q abc_holds_for (length A, nl);\n         abc_steps_l (0, args) A stp = (st, nl)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding abc_Hoare_halt_def"], ["proof (prove)\nusing this:\n  \\<forall>lm.\n     P lm \\<longrightarrow>\n     (\\<exists>n.\n         abc_final (abc_steps_l (0, lm) A n) A \\<and>\n         Q abc_holds_for abc_steps_l (0, lm) A n)\n  P args\n\ngoal (1 subgoal):\n 1. (\\<And>stp nl st.\n        \\<lbrakk>abc_final (abc_steps_l (0, args) A stp) A;\n         Q abc_holds_for (length A, nl);\n         abc_steps_l (0, args) A stp = (st, nl)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis abc_holds_for.simps prod.exhaust)"], ["proof (state)\nthis:\n  abc_final (abc_steps_l (0, args) A stp) A\n  Q abc_holds_for (length A, nl)\n  abc_steps_l (0, args) A stp = (st, nl)\n\ngoal (1 subgoal):\n 1. abc_notfinal (abc_steps_l (0, args) (A [+] B) n) (A [+] B)", "obtain stpa where d: \n    \"abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and> abc_final (abc_steps_l (0, args) A (Suc stpa)) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>stpa.\n        abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n        abc_final (abc_steps_l (0, args) A (Suc stpa)) A \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using abc_before_final[of args A stp,OF a notnull]"], ["proof (prove)\nusing this:\n  \\<exists>n'.\n     abc_notfinal (abc_steps_l (0, args) A n') A \\<and>\n     abc_final (abc_steps_l (0, args) A (Suc n')) A\n\ngoal (1 subgoal):\n 1. (\\<And>stpa.\n        abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n        abc_final (abc_steps_l (0, args) A (Suc stpa)) A \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n  abc_final (abc_steps_l (0, args) A (Suc stpa)) A\n\ngoal (1 subgoal):\n 1. abc_notfinal (abc_steps_l (0, args) (A [+] B) n) (A [+] B)", "thus \"?thesis\""], ["proof (prove)\nusing this:\n  abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n  abc_final (abc_steps_l (0, args) A (Suc stpa)) A\n\ngoal (1 subgoal):\n 1. abc_notfinal (abc_steps_l (0, args) (A [+] B) n) (A [+] B)", "proof(cases \"n < Suc stpa\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n             abc_final (abc_steps_l (0, args) A (Suc stpa)) A;\n     n < Suc stpa\\<rbrakk>\n    \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) (A [+] B) n)\n                       (A [+] B)\n 2. \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n             abc_final (abc_steps_l (0, args) A (Suc stpa)) A;\n     \\<not> n < Suc stpa\\<rbrakk>\n    \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) (A [+] B) n)\n                       (A [+] B)", "case True"], ["proof (state)\nthis:\n  n < Suc stpa\n\ngoal (2 subgoals):\n 1. \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n             abc_final (abc_steps_l (0, args) A (Suc stpa)) A;\n     n < Suc stpa\\<rbrakk>\n    \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) (A [+] B) n)\n                       (A [+] B)\n 2. \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n             abc_final (abc_steps_l (0, args) A (Suc stpa)) A;\n     \\<not> n < Suc stpa\\<rbrakk>\n    \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) (A [+] B) n)\n                       (A [+] B)", "have h: \"n < Suc stpa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < Suc stpa", "by fact"], ["proof (state)\nthis:\n  n < Suc stpa\n\ngoal (2 subgoals):\n 1. \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n             abc_final (abc_steps_l (0, args) A (Suc stpa)) A;\n     n < Suc stpa\\<rbrakk>\n    \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) (A [+] B) n)\n                       (A [+] B)\n 2. \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n             abc_final (abc_steps_l (0, args) A (Suc stpa)) A;\n     \\<not> n < Suc stpa\\<rbrakk>\n    \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) (A [+] B) n)\n                       (A [+] B)", "then"], ["proof (chain)\npicking this:\n  n < Suc stpa", "have \"abc_notfinal (abc_steps_l (0, args) A n) A\""], ["proof (prove)\nusing this:\n  n < Suc stpa\n\ngoal (1 subgoal):\n 1. abc_notfinal (abc_steps_l (0, args) A n) A", "using d"], ["proof (prove)\nusing this:\n  n < Suc stpa\n  abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n  abc_final (abc_steps_l (0, args) A (Suc stpa)) A\n\ngoal (1 subgoal):\n 1. abc_notfinal (abc_steps_l (0, args) A n) A", "by(rule_tac notfinal_all_before, auto)"], ["proof (state)\nthis:\n  abc_notfinal (abc_steps_l (0, args) A n) A\n\ngoal (2 subgoals):\n 1. \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n             abc_final (abc_steps_l (0, args) A (Suc stpa)) A;\n     n < Suc stpa\\<rbrakk>\n    \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) (A [+] B) n)\n                       (A [+] B)\n 2. \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n             abc_final (abc_steps_l (0, args) A (Suc stpa)) A;\n     \\<not> n < Suc stpa\\<rbrakk>\n    \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) (A [+] B) n)\n                       (A [+] B)", "moreover"], ["proof (state)\nthis:\n  abc_notfinal (abc_steps_l (0, args) A n) A\n\ngoal (2 subgoals):\n 1. \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n             abc_final (abc_steps_l (0, args) A (Suc stpa)) A;\n     n < Suc stpa\\<rbrakk>\n    \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) (A [+] B) n)\n                       (A [+] B)\n 2. \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n             abc_final (abc_steps_l (0, args) A (Suc stpa)) A;\n     \\<not> n < Suc stpa\\<rbrakk>\n    \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) (A [+] B) n)\n                       (A [+] B)", "then"], ["proof (chain)\npicking this:\n  abc_notfinal (abc_steps_l (0, args) A n) A", "have \"abc_steps_l (0, args) (A [+] B) n = abc_steps_l (0, args) A n\""], ["proof (prove)\nusing this:\n  abc_notfinal (abc_steps_l (0, args) A n) A\n\ngoal (1 subgoal):\n 1. abc_steps_l (0, args) (A [+] B) n = abc_steps_l (0, args) A n", "using notnull"], ["proof (prove)\nusing this:\n  abc_notfinal (abc_steps_l (0, args) A n) A\n  A \\<noteq> []\n\ngoal (1 subgoal):\n 1. abc_steps_l (0, args) (A [+] B) n = abc_steps_l (0, args) A n", "by(rule_tac abc_comp_frist_steps_eq_pre, simp_all)"], ["proof (state)\nthis:\n  abc_steps_l (0, args) (A [+] B) n = abc_steps_l (0, args) A n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n             abc_final (abc_steps_l (0, args) A (Suc stpa)) A;\n     n < Suc stpa\\<rbrakk>\n    \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) (A [+] B) n)\n                       (A [+] B)\n 2. \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n             abc_final (abc_steps_l (0, args) A (Suc stpa)) A;\n     \\<not> n < Suc stpa\\<rbrakk>\n    \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) (A [+] B) n)\n                       (A [+] B)", "ultimately"], ["proof (chain)\npicking this:\n  abc_notfinal (abc_steps_l (0, args) A n) A\n  abc_steps_l (0, args) (A [+] B) n = abc_steps_l (0, args) A n", "show \"?thesis\""], ["proof (prove)\nusing this:\n  abc_notfinal (abc_steps_l (0, args) A n) A\n  abc_steps_l (0, args) (A [+] B) n = abc_steps_l (0, args) A n\n\ngoal (1 subgoal):\n 1. abc_notfinal (abc_steps_l (0, args) (A [+] B) n) (A [+] B)", "by(case_tac \"abc_steps_l (0, args) A n\", simp)"], ["proof (state)\nthis:\n  abc_notfinal (abc_steps_l (0, args) (A [+] B) n) (A [+] B)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n             abc_final (abc_steps_l (0, args) A (Suc stpa)) A;\n     \\<not> n < Suc stpa\\<rbrakk>\n    \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) (A [+] B) n)\n                       (A [+] B)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n             abc_final (abc_steps_l (0, args) A (Suc stpa)) A;\n     \\<not> n < Suc stpa\\<rbrakk>\n    \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) (A [+] B) n)\n                       (A [+] B)", "case False"], ["proof (state)\nthis:\n  \\<not> n < Suc stpa\n\ngoal (1 subgoal):\n 1. \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n             abc_final (abc_steps_l (0, args) A (Suc stpa)) A;\n     \\<not> n < Suc stpa\\<rbrakk>\n    \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) (A [+] B) n)\n                       (A [+] B)", "have \"\\<not> n < Suc stpa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> n < Suc stpa", "by fact"], ["proof (state)\nthis:\n  \\<not> n < Suc stpa\n\ngoal (1 subgoal):\n 1. \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n             abc_final (abc_steps_l (0, args) A (Suc stpa)) A;\n     \\<not> n < Suc stpa\\<rbrakk>\n    \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) (A [+] B) n)\n                       (A [+] B)", "then"], ["proof (chain)\npicking this:\n  \\<not> n < Suc stpa", "obtain d where i1: \"n = Suc stpa + d\""], ["proof (prove)\nusing this:\n  \\<not> n < Suc stpa\n\ngoal (1 subgoal):\n 1. (\\<And>d. n = Suc stpa + d \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis add_Suc less_iff_Suc_add not_less_eq)"], ["proof (state)\nthis:\n  n = Suc stpa + d\n\ngoal (1 subgoal):\n 1. \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n             abc_final (abc_steps_l (0, args) A (Suc stpa)) A;\n     \\<not> n < Suc stpa\\<rbrakk>\n    \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) (A [+] B) n)\n                       (A [+] B)", "have \"abc_steps_l (0, args) A (Suc stpa) = (length A, nl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abc_steps_l (0, args) A (Suc stpa) = (length A, nl)", "using d a c"], ["proof (prove)\nusing this:\n  abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n  abc_final (abc_steps_l (0, args) A (Suc stpa)) A\n  abc_final (abc_steps_l (0, args) A stp) A\n  abc_steps_l (0, args) A stp = (st, nl)\n\ngoal (1 subgoal):\n 1. abc_steps_l (0, args) A (Suc stpa) = (length A, nl)", "apply(case_tac \"abc_steps_l (0, args) A stp\", simp add: equal_when_halt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>st = length A; a = length A;\n        abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n        abc_final (abc_steps_l (0, args) A (Suc stpa)) A;\n        abc_steps_l (0, args) A stp = (length A, nl)\\<rbrakk>\n       \\<Longrightarrow> abc_steps_l (0, args) A (Suc stpa) = (length A, nl)", "by(case_tac \"abc_steps_l (0, args) A (Suc stpa)\", simp add: equal_when_halt)"], ["proof (state)\nthis:\n  abc_steps_l (0, args) A (Suc stpa) = (length A, nl)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n             abc_final (abc_steps_l (0, args) A (Suc stpa)) A;\n     \\<not> n < Suc stpa\\<rbrakk>\n    \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) (A [+] B) n)\n                       (A [+] B)", "moreover"], ["proof (state)\nthis:\n  abc_steps_l (0, args) A (Suc stpa) = (length A, nl)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n             abc_final (abc_steps_l (0, args) A (Suc stpa)) A;\n     \\<not> n < Suc stpa\\<rbrakk>\n    \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) (A [+] B) n)\n                       (A [+] B)", "have  \"abc_steps_l (0, args) (A [+] B) stpa = abc_steps_l (0, args) A stpa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abc_steps_l (0, args) (A [+] B) stpa = abc_steps_l (0, args) A stpa", "using notnull d"], ["proof (prove)\nusing this:\n  A \\<noteq> []\n  abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n  abc_final (abc_steps_l (0, args) A (Suc stpa)) A\n\ngoal (1 subgoal):\n 1. abc_steps_l (0, args) (A [+] B) stpa = abc_steps_l (0, args) A stpa", "by(rule_tac abc_comp_frist_steps_eq_pre, simp_all)"], ["proof (state)\nthis:\n  abc_steps_l (0, args) (A [+] B) stpa = abc_steps_l (0, args) A stpa\n\ngoal (1 subgoal):\n 1. \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n             abc_final (abc_steps_l (0, args) A (Suc stpa)) A;\n     \\<not> n < Suc stpa\\<rbrakk>\n    \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) (A [+] B) n)\n                       (A [+] B)", "ultimately"], ["proof (chain)\npicking this:\n  abc_steps_l (0, args) A (Suc stpa) = (length A, nl)\n  abc_steps_l (0, args) (A [+] B) stpa = abc_steps_l (0, args) A stpa", "have i2: \"abc_steps_l (0, args) (A [+] B) (Suc stpa) = (length A, nl)\""], ["proof (prove)\nusing this:\n  abc_steps_l (0, args) A (Suc stpa) = (length A, nl)\n  abc_steps_l (0, args) (A [+] B) stpa = abc_steps_l (0, args) A stpa\n\ngoal (1 subgoal):\n 1. abc_steps_l (0, args) (A [+] B) (Suc stpa) = (length A, nl)", "using d"], ["proof (prove)\nusing this:\n  abc_steps_l (0, args) A (Suc stpa) = (length A, nl)\n  abc_steps_l (0, args) (A [+] B) stpa = abc_steps_l (0, args) A stpa\n  abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n  abc_final (abc_steps_l (0, args) A (Suc stpa)) A\n\ngoal (1 subgoal):\n 1. abc_steps_l (0, args) (A [+] B) (Suc stpa) = (length A, nl)", "apply(case_tac \"abc_steps_l (0, args) A stpa\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a < length A; abc_steps_l (0, args) A stpa = (a, b);\n        abc_steps_l (0, args) A (Suc stpa) = (length A, nl);\n        abc_steps_l (0, args) (A [+] B) stpa = (a, b)\\<rbrakk>\n       \\<Longrightarrow> abc_steps_l (0, args) (A [+] B) (Suc stpa) =\n                         (length A, nl)", "by(simp add: abc_step_red2 abc_steps_l.simps abc_fetch.simps abc_comp.simps nth_append)"], ["proof (state)\nthis:\n  abc_steps_l (0, args) (A [+] B) (Suc stpa) = (length A, nl)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n             abc_final (abc_steps_l (0, args) A (Suc stpa)) A;\n     \\<not> n < Suc stpa\\<rbrakk>\n    \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) (A [+] B) n)\n                       (A [+] B)", "obtain s' nl' where i3:\"abc_steps_l (0, nl) B d = (s', nl')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s' nl'.\n        abc_steps_l (0, nl) B d = (s', nl') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis prod.exhaust)"], ["proof (state)\nthis:\n  abc_steps_l (0, nl) B d = (s', nl')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n             abc_final (abc_steps_l (0, args) A (Suc stpa)) A;\n     \\<not> n < Suc stpa\\<rbrakk>\n    \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) (A [+] B) n)\n                       (A [+] B)", "then"], ["proof (chain)\npicking this:\n  abc_steps_l (0, nl) B d = (s', nl')", "have i4: \"abc_steps_l (0, args) (A [+] B) (Suc stpa + d) = (length A + s', nl')\""], ["proof (prove)\nusing this:\n  abc_steps_l (0, nl) B d = (s', nl')\n\ngoal (1 subgoal):\n 1. abc_steps_l (0, args) (A [+] B) (Suc stpa + d) = (length A + s', nl')", "using i2"], ["proof (prove)\nusing this:\n  abc_steps_l (0, nl) B d = (s', nl')\n  abc_steps_l (0, args) (A [+] B) (Suc stpa) = (length A, nl)\n\ngoal (1 subgoal):\n 1. abc_steps_l (0, args) (A [+] B) (Suc stpa + d) = (length A + s', nl')", "apply(simp only: abc_steps_add)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>abc_steps_l (0, nl) B d = (s', nl');\n     abc_steps_l (0, args) (A [+] B) (Suc stpa) = (length A, nl)\\<rbrakk>\n    \\<Longrightarrow> abc_steps_l (length A, nl) (A [+] B) d =\n                      (length A + s', nl')", "using abc_comp_second_steps_eq[of nl B d s' nl']"], ["proof (prove)\nusing this:\n  abc_steps_l (0, nl) B d = (s', nl') \\<Longrightarrow>\n  abc_steps_l (length ?A, nl) (?A [+] B) d = (s' + length ?A, nl')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>abc_steps_l (0, nl) B d = (s', nl');\n     abc_steps_l (0, args) (A [+] B) (Suc stpa) = (length A, nl)\\<rbrakk>\n    \\<Longrightarrow> abc_steps_l (length A, nl) (A [+] B) d =\n                      (length A + s', nl')", "by simp"], ["proof (state)\nthis:\n  abc_steps_l (0, args) (A [+] B) (Suc stpa + d) = (length A + s', nl')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n             abc_final (abc_steps_l (0, args) A (Suc stpa)) A;\n     \\<not> n < Suc stpa\\<rbrakk>\n    \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) (A [+] B) n)\n                       (A [+] B)", "moreover"], ["proof (state)\nthis:\n  abc_steps_l (0, args) (A [+] B) (Suc stpa + d) = (length A + s', nl')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n             abc_final (abc_steps_l (0, args) A (Suc stpa)) A;\n     \\<not> n < Suc stpa\\<rbrakk>\n    \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) (A [+] B) n)\n                       (A [+] B)", "have \"s' < length B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s' < length B", "using unhalt b i3"], ["proof (prove)\nusing this:\n  {Q} B \\<up>\n  Q abc_holds_for (length A, nl)\n  abc_steps_l (0, nl) B d = (s', nl')\n\ngoal (1 subgoal):\n 1. s' < length B", "apply(simp add: abc_Hoare_unhalt_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>args.\n                Q args \\<longrightarrow>\n                (\\<forall>n. abc_notfinal (abc_steps_l (0, args) B n) B);\n     Q nl; abc_steps_l (0, nl) B d = (s', nl')\\<rbrakk>\n    \\<Longrightarrow> s' < length B", "apply(erule_tac x = nl in allE, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Q nl; abc_steps_l (0, nl) B d = (s', nl');\n     \\<forall>n. abc_notfinal (abc_steps_l (0, nl) B n) B\\<rbrakk>\n    \\<Longrightarrow> s' < length B", "by(erule_tac x = d in allE, simp)"], ["proof (state)\nthis:\n  s' < length B\n\ngoal (1 subgoal):\n 1. \\<lbrakk>abc_notfinal (abc_steps_l (0, args) A stpa) A \\<and>\n             abc_final (abc_steps_l (0, args) A (Suc stpa)) A;\n     \\<not> n < Suc stpa\\<rbrakk>\n    \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) (A [+] B) n)\n                       (A [+] B)", "ultimately"], ["proof (chain)\npicking this:\n  abc_steps_l (0, args) (A [+] B) (Suc stpa + d) = (length A + s', nl')\n  s' < length B", "show \"?thesis\""], ["proof (prove)\nusing this:\n  abc_steps_l (0, args) (A [+] B) (Suc stpa + d) = (length A + s', nl')\n  s' < length B\n\ngoal (1 subgoal):\n 1. abc_notfinal (abc_steps_l (0, args) (A [+] B) n) (A [+] B)", "using i1"], ["proof (prove)\nusing this:\n  abc_steps_l (0, args) (A [+] B) (Suc stpa + d) = (length A + s', nl')\n  s' < length B\n  n = Suc stpa + d\n\ngoal (1 subgoal):\n 1. abc_notfinal (abc_steps_l (0, args) (A [+] B) n) (A [+] B)", "by(simp)"], ["proof (state)\nthis:\n  abc_notfinal (abc_steps_l (0, args) (A [+] B) n) (A [+] B)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  abc_notfinal (abc_steps_l (0, args) (A [+] B) n) (A [+] B)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma abc_comp_null_left[simp]: \"[] [+] A = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] [+] A = A", "proof(induct A)"], ["proof (state)\ngoal (2 subgoals):\n 1. [] [+] [] = []\n 2. \\<And>a A. [] [+] A = A \\<Longrightarrow> [] [+] (a # A) = a # A", "case (Cons a A)"], ["proof (state)\nthis:\n  [] [+] A = A\n\ngoal (2 subgoals):\n 1. [] [+] [] = []\n 2. \\<And>a A. [] [+] A = A \\<Longrightarrow> [] [+] (a # A) = a # A", "then"], ["proof (chain)\npicking this:\n  [] [+] A = A", "show ?case"], ["proof (prove)\nusing this:\n  [] [+] A = A\n\ngoal (1 subgoal):\n 1. [] [+] (a # A) = a # A", "apply(cases a)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>[] [+] A = A; a = Inc x1\\<rbrakk>\n       \\<Longrightarrow> [] [+] (a # A) = a # A\n 2. \\<And>x21 x22.\n       \\<lbrakk>[] [+] A = A; a = Dec x21 x22\\<rbrakk>\n       \\<Longrightarrow> [] [+] (a # A) = a # A\n 3. \\<And>x3.\n       \\<lbrakk>[] [+] A = A; a = Goto x3\\<rbrakk>\n       \\<Longrightarrow> [] [+] (a # A) = a # A", "by(auto simp: abc_comp.simps abc_shift.simps)"], ["proof (state)\nthis:\n  [] [+] (a # A) = a # A\n\ngoal (1 subgoal):\n 1. [] [+] [] = []", "qed (auto simp: abc_comp.simps abc_shift.simps)"], ["", "lemma abc_comp_null_right[simp]: \"A [+] [] = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A [+] [] = A", "proof(induct A)"], ["proof (state)\ngoal (2 subgoals):\n 1. [] [+] [] = []\n 2. \\<And>a A. A [+] [] = A \\<Longrightarrow> (a # A) [+] [] = a # A", "case (Cons a A)"], ["proof (state)\nthis:\n  A [+] [] = A\n\ngoal (2 subgoals):\n 1. [] [+] [] = []\n 2. \\<And>a A. A [+] [] = A \\<Longrightarrow> (a # A) [+] [] = a # A", "then"], ["proof (chain)\npicking this:\n  A [+] [] = A", "show ?case"], ["proof (prove)\nusing this:\n  A [+] [] = A\n\ngoal (1 subgoal):\n 1. (a # A) [+] [] = a # A", "apply(cases a)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>A [+] [] = A; a = Inc x1\\<rbrakk>\n       \\<Longrightarrow> (a # A) [+] [] = a # A\n 2. \\<And>x21 x22.\n       \\<lbrakk>A [+] [] = A; a = Dec x21 x22\\<rbrakk>\n       \\<Longrightarrow> (a # A) [+] [] = a # A\n 3. \\<And>x3.\n       \\<lbrakk>A [+] [] = A; a = Goto x3\\<rbrakk>\n       \\<Longrightarrow> (a # A) [+] [] = a # A", "by(auto simp: abc_comp.simps abc_shift.simps)"], ["proof (state)\nthis:\n  (a # A) [+] [] = a # A\n\ngoal (1 subgoal):\n 1. [] [+] [] = []", "qed (auto simp: abc_comp.simps abc_shift.simps)"], ["", "lemma abc_Hoare_plus_unhalt2:\n  \"\\<lbrakk>{Q} (B::abc_prog)\\<up>; {P} (A::abc_prog) {Q}\\<rbrakk>\\<Longrightarrow> {P} (A [+] B) \\<up>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>{Q} B \\<up>; {P} A {Q}\\<rbrakk>\n    \\<Longrightarrow> {P} A [+] B \\<up>", "apply(case_tac \"A = []\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>{Q} B \\<up>; {P} A {Q}; A = []\\<rbrakk>\n    \\<Longrightarrow> {P} A [+] B \\<up>\n 2. \\<lbrakk>{Q} B \\<up>; {P} A {Q}; A \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> {P} A [+] B \\<up>", "apply(simp add: abc_Hoare_halt_def abc_Hoare_unhalt_def abc_exec_null)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>{Q} B \\<up>; {P} A {Q}; A \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> {P} A [+] B \\<up>", "apply(rule_tac abc_Hoare_unhaltI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>args n.\n       \\<lbrakk>{Q} B \\<up>; {P} A {Q}; A \\<noteq> []; P args\\<rbrakk>\n       \\<Longrightarrow> abc_notfinal (abc_steps_l (0, args) (A [+] B) n)\n                          (A [+] B)", "apply(erule_tac abc_Hoare_plus_unhalt2', simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>args n.\n       \\<lbrakk>{P} A {Q}; A \\<noteq> []; P args\\<rbrakk>\n       \\<Longrightarrow> A \\<noteq> []\n 2. \\<And>args n.\n       \\<lbrakk>{P} A {Q}; A \\<noteq> []; P args\\<rbrakk>\n       \\<Longrightarrow> P args", "apply(simp, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}