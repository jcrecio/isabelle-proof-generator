{"file_name": "/home/qj213/afp-2021-10-22/thys/LTL_to_DRA/Semi_Mojmir.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/LTL_to_DRA", "problem_names": ["lemma nonempty_\\<Sigma>: \"\\<Sigma> \\<noteq> {}\"", "lemma bounded_w': \"w i \\<in> \\<Sigma>\"", "lemma sink_rev_step:\n  \"\\<not>sink q \\<Longrightarrow> q = \\<delta> q' \\<nu> \\<Longrightarrow> \\<nu> \\<in> \\<Sigma> \\<Longrightarrow> \\<not>sink q'\"\n  \"\\<not>sink q \\<Longrightarrow> q = \\<delta> q' (w i) \\<Longrightarrow> \\<not>sink q'\"", "lemma token_stays_in_sink:\n  assumes \"sink q\"\n  assumes \"token_run x n = q\"\n  shows \"token_run x (n + m) = q\"", "lemma token_is_not_in_sink:\n  \"token_run x n \\<notin> A \\<Longrightarrow> token_run x (Suc n) \\<in> A \\<Longrightarrow> \\<not>sink (token_run x n)\"", "lemma token_run_intial_state:\n  \"token_run x x = q\\<^sub>0\"", "lemma token_run_P:\n  assumes \"\\<not> P (token_run x n)\"\n  assumes \"P (token_run x (Suc (n + m)))\"\n  shows \"\\<exists>m' \\<le> m. \\<not> P (token_run x (n + m')) \\<and> P (token_run x (Suc (n + m')))\"", "lemma token_run_merge_Suc:\n  assumes \"x \\<le> n\"\n  assumes \"y \\<le> n\"\n  assumes \"token_run x n = token_run y n\"\n  shows \"token_run x (Suc n) = token_run y (Suc n)\"", "lemma token_run_merge:\n  \"\\<lbrakk>x \\<le> n; y \\<le> n; token_run x n = token_run y n\\<rbrakk> \\<Longrightarrow> token_run x (n + m) = token_run y (n + m)\"", "lemma token_run_mergepoint:\n  assumes \"x < y\"\n  assumes \"token_run x (y + n) = token_run y (y + n)\"\n  obtains m where \"x \\<le> (Suc m)\" and \"y \\<le> (Suc m)\"\n    and \"y = Suc m \\<or> token_run x m \\<noteq> token_run y m\"\n    and \"token_run x (Suc m) = token_run y (Suc m)\"", "lemma token_run_step:\n  assumes \"x \\<le> n\"\n  assumes \"token_run x n = q'\"\n  assumes \"q = \\<delta> q' (w n)\"\n  shows \"token_run x (Suc n) = q\"", "lemma token_run_step':\n  \"x \\<le> n \\<Longrightarrow> token_run x (Suc n) = \\<delta> (token_run x n) (w n)\"", "lemma configuration_distinct:\n  \"q \\<noteq> q' \\<Longrightarrow> configuration q n \\<inter> configuration q' n = {}\"", "lemma configuration_finite:\n  \"finite (configuration q n)\"", "lemma configuration_non_empty:\n  \"x \\<le> n \\<Longrightarrow> configuration (token_run x n) n \\<noteq> {}\"", "lemma configuration_token:\n  \"x \\<le> n \\<Longrightarrow> x \\<in> configuration (token_run x n) n\"", "lemmas configuration_Max_in = Max_in[OF configuration_finite]", "lemmas configuration_Min_in = Min_in[OF configuration_finite]", "lemma configuration_monotonic_Suc:\n  \"x \\<le> n \\<Longrightarrow> configuration (token_run x n) n \\<subseteq> configuration (token_run x (Suc n)) (Suc n)\"", "lemma pull_up_token_run_tokens:\n  \"\\<lbrakk>x \\<le> n; y \\<le> n; token_run x n = token_run y n\\<rbrakk> \\<Longrightarrow> \\<exists>q. x \\<in> configuration q n \\<and> y \\<in> configuration q n\"", "lemma push_down_configuration_token_run:\n  \"\\<lbrakk>x \\<in> configuration q n; y \\<in> configuration q n\\<rbrakk> \\<Longrightarrow> x \\<le> n \\<and> y \\<le> n \\<and> token_run x n = token_run y n\"", "lemma configuration_step:\n  \"x \\<in> configuration q' n \\<Longrightarrow> q = \\<delta> q' (w n) \\<Longrightarrow> x \\<in> configuration q (Suc n)\"", "lemma configuration_step_non_empty:\n  \"configuration q' n \\<noteq> {} \\<Longrightarrow> q = \\<delta> q' (w n) \\<Longrightarrow> configuration q (Suc n) \\<noteq> {}\"", "lemma configuration_rev_step':\n  assumes \"x \\<noteq> Suc n\"\n  assumes \"x \\<in> configuration q (Suc n)\"\n  obtains q' where \"q = \\<delta> q' (w n)\" and \"x \\<in> configuration q' n\"", "lemma configuration_rev_step'':\n  assumes \"x \\<in> configuration q\\<^sub>0 (Suc n)\"\n  shows \"x = Suc n \\<or> (\\<exists>q'. q\\<^sub>0 = \\<delta> q' (w n) \\<and> x \\<in> configuration q' n)\"", "lemma configuration_step_eq_q\\<^sub>0:\n  \"configuration q\\<^sub>0 (Suc n) = {Suc n} \\<union> \\<Union>{configuration q' n | q'. q\\<^sub>0 = \\<delta> q' (w n)}\"", "lemma configuration_rev_step:\n  assumes \"q \\<noteq> q\\<^sub>0\"\n  assumes \"x \\<in> configuration q (Suc n)\"\n  obtains q' where \"q = \\<delta> q' (w n)\" and \"x \\<in> configuration q' n\"", "lemma configuration_step_eq:\n  assumes \"q \\<noteq> q\\<^sub>0\"\n  shows \"configuration q (Suc n) = \\<Union>{configuration q' n | q'. q = \\<delta> q' (w n)}\"", "lemma configuration_step_eq_unified:\n  shows \"configuration q (Suc n) = \\<Union>{configuration q' n | q'. q = \\<delta> q' (w n)} \\<union> (if q = q\\<^sub>0 then {Suc n} else {}) \"", "lemma oldest_token_always_def:\n  \"\\<exists>i. i \\<le> x \\<and> oldest_token (token_run x n) n = Some i\"", "lemma oldest_token_bounded:\n  \"oldest_token q n = Some x \\<Longrightarrow> x \\<le> n\"", "lemma oldest_token_distinct:\n  \"q \\<noteq> q' \\<Longrightarrow> oldest_token q n = Some i \\<Longrightarrow> oldest_token q' n = Some j \\<Longrightarrow> i \\<noteq> j\"", "lemma oldest_token_equal:\n  \"oldest_token q n = Some i \\<Longrightarrow> oldest_token q' n = Some i \\<Longrightarrow> q = q'\"", "lemma oldest_token_monotonic_Suc:\n  assumes \"x \\<le> n\"\n  assumes \"oldest_token (token_run x n) n = Some i\"\n  assumes \"oldest_token (token_run x (Suc n)) (Suc n) = Some j\"\n  shows \"i \\<ge> j\"", "lemma push_down_oldest_token_configuration:\n  \"oldest_token q n = Some x \\<Longrightarrow> x \\<in> configuration q n\"", "lemma push_down_oldest_token_token_run:\n  \"oldest_token q n = Some x \\<Longrightarrow> token_run x n = q\"", "lemma senior_le_token:\n  \"senior x n \\<le> x\"", "lemma senior_token_run:\n  \"senior x n = senior y n \\<longleftrightarrow> token_run x n = token_run y n\"", "lemma senior_same_state:\n  \"token_run (senior x n) n = token_run x n\"", "lemma senior_senior:\n  \"senior (senior x n) n = senior x n\"", "lemma senior_monotonic_Suc:\n  \"x \\<le> n \\<Longrightarrow> senior x n \\<ge> senior x (Suc n)\"", "lemma pull_up_configuration_senior:\n  \"\\<lbrakk>x \\<in> configuration q n; y \\<in> configuration q n\\<rbrakk> \\<Longrightarrow> senior x n = senior y n\"", "lemma push_down_senior_tokens:\n  \"\\<lbrakk>x \\<le> n; y \\<le> n; senior x n = senior y n\\<rbrakk> \\<Longrightarrow> \\<exists>q. x \\<in> configuration q n \\<and> y \\<in> configuration q n\"", "lemma older_seniors_cases_subseteq [case_names le ge]:\n  assumes \"older_seniors x n \\<subseteq> older_seniors y n \\<Longrightarrow> P\"\n  assumes \"older_seniors x n \\<supseteq> older_seniors y n \\<Longrightarrow> P\"\n  shows \"P\"", "lemma older_seniors_cases_subset [case_names less equal greater]:\n  assumes \"older_seniors x n \\<subset> older_seniors y n \\<Longrightarrow> P\"\n  assumes \"older_seniors x n = older_seniors y n \\<Longrightarrow> P\"\n  assumes \"older_seniors x n \\<supset> older_seniors y n \\<Longrightarrow> P\"\n  shows \"P\"", "lemma older_seniors_finite:\n  \"finite (older_seniors x n)\"", "lemma older_seniors_older:\n  \"y \\<in> older_seniors x n \\<Longrightarrow> y < x\"", "lemma older_seniors_senior_simp:\n  \"older_seniors (senior x n) n = older_seniors x n\"", "lemma older_seniors_not_self_referential:\n  \"senior x n \\<notin> older_seniors x n\"", "lemma older_seniors_not_self_referential_2:\n  \"x \\<notin> older_seniors x n\"", "lemma older_seniors_subset:\n  \"y \\<in> older_seniors x n \\<Longrightarrow> older_seniors y n \\<subset> older_seniors x n\"", "lemma older_seniors_subset_2:\n  assumes \"\\<not> sink (token_run x n)\"\n  assumes \"older_seniors x n \\<subset> older_seniors y n\"\n  shows \"senior x n \\<in> older_seniors y n\"", "lemmas older_seniors_Max_in = Max_in[OF older_seniors_finite]", "lemmas older_seniors_Min_in = Min_in[OF older_seniors_finite]", "lemmas older_seniors_Max_coboundedI = Max.coboundedI[OF older_seniors_finite]", "lemmas older_seniors_Min_coboundedI = Min.coboundedI[OF older_seniors_finite]", "lemmas older_seniors_card_mono = card_mono[OF older_seniors_finite]", "lemmas older_seniors_psubset_card_mono = psubset_card_mono[OF older_seniors_finite]", "lemma older_seniors_recursive:\n  fixes x n\n  defines \"os \\<equiv> older_seniors x n\"\n  assumes \"os \\<noteq> {}\"\n  shows \"os = {Max os} \\<union> older_seniors (Max os) n\"\n  (is \"?lhs = ?rhs\")", "lemma older_seniors_recursive_card:\n  fixes x n\n  defines \"os \\<equiv> older_seniors x n\"\n  assumes \"os \\<noteq> {}\"\n  shows \"card os = Suc (card (older_seniors (Max os) n))\"", "lemma older_seniors_card:\n  \"card (older_seniors x n) = card (older_seniors y n) \\<longleftrightarrow> older_seniors x n = older_seniors y n\"", "lemma older_seniors_card_le:\n  \"card (older_seniors x n) < card (older_seniors y n) \\<longleftrightarrow> older_seniors x n \\<subset> older_seniors y n\"", "lemma older_seniors_card_less:\n  \"card (older_seniors x n) \\<le> card (older_seniors y n) \\<longleftrightarrow> older_seniors x n \\<subseteq> older_seniors y n\"", "lemma older_seniors_monotonic_Suc:\n  assumes \"x \\<le> n\"\n  shows \"older_seniors x n \\<supseteq> older_seniors x (Suc n)\"", "lemma older_seniors_monotonic:\n  \"x \\<le> n \\<Longrightarrow> older_seniors x n \\<supseteq> older_seniors x (n + m)\"", "lemma older_seniors_stable:\n  \"x \\<le> n \\<Longrightarrow> older_seniors x n = older_seniors x (n + m + m') \\<Longrightarrow> older_seniors x n = older_seniors x (n + m)\"", "lemma card_older_seniors_monotonic:\n  \"x \\<le> n \\<Longrightarrow> card (older_seniors x n) \\<ge> card (older_seniors x (n + m))\"", "lemma pull_up_senior_older_seniors:\n  \"senior x n = senior y n \\<Longrightarrow> older_seniors x n = older_seniors y n\"", "lemma pull_up_senior_older_seniors_less:\n  \"senior x n < senior y n \\<Longrightarrow> older_seniors x n \\<subseteq> older_seniors y n\"", "lemma pull_up_senior_older_seniors_less_2:\n  assumes \"\\<not> sink (token_run x n)\"\n  assumes \"senior x n < senior y n\"\n  shows \"older_seniors x n \\<subset> older_seniors y n\"", "lemma pull_up_senior_older_seniors_le:\n  \"senior x n \\<le> senior y n \\<Longrightarrow> older_seniors x n \\<subseteq> older_seniors y n\"", "lemma push_down_older_seniors_senior:\n  assumes \"\\<not> sink (token_run x n)\"\n  assumes \"\\<not> sink (token_run y n)\"\n  assumes \"older_seniors x n = older_seniors y n\"\n  shows \"senior x n = senior y n\"", "lemma older_seniors_tower'':\n  assumes \"x \\<le> n\"\n  assumes \"y \\<le> n\"\n  assumes \"\\<not>sink (token_run x n)\"\n  assumes \"\\<not>sink (token_run y n)\"\n  assumes \"older_seniors x n = older_seniors x (Suc n)\"\n  assumes \"older_seniors y n \\<subseteq> older_seniors x n\"\n  shows \"older_seniors y n = older_seniors y (Suc n)\"", "lemma older_seniors_tower''2:\n  assumes \"x \\<le> n\"\n  assumes \"y \\<le> n\"\n  assumes \"\\<not>sink (token_run x (n + m))\"\n  assumes \"\\<not>sink (token_run y (n + m))\"\n  assumes \"older_seniors x n = older_seniors x (n + m)\"\n  assumes \"older_seniors y n \\<subseteq> older_seniors x n\"\n  shows \"older_seniors y n = older_seniors y (n + m)\"", "lemma older_seniors_tower':\n  assumes \"y \\<in> older_seniors x n\"\n  assumes \"older_seniors x n = older_seniors x (Suc n)\"\n  shows \"older_seniors y n = older_seniors y (Suc n)\"\n  (is \"?lhs = ?rhs\")", "lemma older_seniors_tower:\n  \"\\<lbrakk>x \\<le> n; y \\<in> older_seniors x n; older_seniors x n = older_seniors x (n + m)\\<rbrakk> \\<Longrightarrow> older_seniors y n = older_seniors y (n + m)\"", "lemma rank_None_before:\n  \"x > n \\<Longrightarrow> rank x n = None\"", "lemma rank_None_Suc:\n  assumes \"x \\<le> n\"\n  assumes \"rank x n = None\"\n  shows \"rank x (Suc n) = None\"", "lemma rank_Some_time:\n  \"rank x n = Some j \\<Longrightarrow> x \\<le> n\"", "lemma rank_Some_sink:\n  \"rank x n = Some j \\<Longrightarrow> \\<not>sink (token_run x n)\"", "lemma rank_Some_card:\n  \"rank x n = Some j \\<Longrightarrow> card (older_seniors x n) = j\"", "lemma rank_initial:\n  \"\\<exists>i. rank x x = Some i\"", "lemma rank_continuous:\n  assumes \"rank x n = Some i\"\n  assumes \"rank x (n + m) = Some j\"\n  assumes \"m' \\<le> m\"\n  shows \"\\<exists>k. rank x (n + m') = Some k\"", "lemma rank_token_squats:\n  \"token_squats x \\<Longrightarrow> x \\<le> n \\<Longrightarrow> \\<exists>i. rank x n = Some i\"", "lemma rank_older_seniors_bounded:\n  assumes \"y \\<in> older_seniors x n\"\n  assumes \"rank x n = Some j\"\n  shows \"\\<exists>j' < j. rank y n = Some j'\"", "lemma max_rank_lowerbound:\n  \"0 < max_rank\"", "lemma older_seniors_card_bounded:\n  assumes \"\\<not>sink (token_run x n)\" and \"x \\<le> n\"\n  shows \"card (older_seniors x n) < card (reach \\<Sigma> \\<delta> q\\<^sub>0 - {q. sink q})\"\n  (is \"card ?S4 < card ?S0\")", "lemma rank_upper_bound:\n  \"rank x n = Some i \\<Longrightarrow> i < max_rank\"", "lemma rank_range:\n  \"\\<exists>i. range (rank x) \\<subseteq> {None} \\<union> Some ` {0..<i}\"", "lemma rank_monotonic:\n  \"\\<lbrakk>rank x n = Some i; rank x (n + m) = Some j\\<rbrakk> \\<Longrightarrow> i \\<ge> j\"", "lemma pull_up_senior_rank:\n  \"\\<lbrakk>x \\<le> n; y \\<le> n; senior x n = senior y n\\<rbrakk> \\<Longrightarrow> rank x n = rank y n\"", "lemma pull_up_configuration_rank:\n  \"\\<lbrakk>x \\<in> configuration q n; y \\<in> configuration q n\\<rbrakk> \\<Longrightarrow> rank x n = rank y n\"", "lemma push_down_rank_older_seniors:\n  \"\\<lbrakk>rank x n = rank y n; rank x n = Some i\\<rbrakk> \\<Longrightarrow> older_seniors x n = older_seniors y n\"", "lemma push_down_rank_senior:\n  \"\\<lbrakk>rank x n = rank y n; rank x n = Some i\\<rbrakk> \\<Longrightarrow> senior x n = senior y n\"", "lemma push_down_rank_tokens:\n  \"\\<lbrakk>rank x n = rank y n; rank x n = Some i\\<rbrakk> \\<Longrightarrow> (\\<exists>q. x \\<in> configuration q n \\<and> y \\<in> configuration q n)\"", "lemma rank_senior_senior:\n  \"x \\<le> n \\<Longrightarrow> rank (senior x n) n = rank x n\"", "lemma stable_rank_unique:\n  assumes \"stable_rank x i\"\n  assumes \"stable_rank x j\"\n  shows \"i = j\"", "lemma stable_rank_equiv_token_squats:\n  \"token_squats x = (\\<exists>i. stable_rank x i)\"\n  (is \"?lhs = ?rhs\")", "lemma stable_rank_same_tokens:\n  assumes \"stable_rank x i\"\n  assumes \"stable_rank y j\"\n  assumes \"x \\<in> configuration q n\"\n  assumes \"y \\<in> configuration q n\"\n  shows \"i = j\"", "lemma rank_tower:\n  assumes \"i \\<le> j\"\n  assumes \"rank x n = Some j\"\n  assumes \"rank x (n + m) = Some j\"\n  assumes \"rank y n = Some i\"\n  shows \"rank y (n + m) = Some i\"", "lemma stable_rank_alt_def:\n  \"rank x n = Some j \\<and> stable_rank x j \\<longleftrightarrow> (\\<forall>m \\<ge> n. rank x m = Some j)\"\n  (is \"?rhs \\<longleftrightarrow> ?lhs\")", "lemma stable_rank_tower:\n  assumes \"j \\<le> i\"\n  assumes \"rank x n = Some j\"\n  assumes \"rank y n = Some i\"\n  assumes \"stable_rank y i\"\n  shows \"stable_rank x j\"", "lemma senior_states_initial:\n  \"senior_states q 0 = {}\"", "lemma senior_states_cases_subseteq [case_names le ge]:\n  assumes \"senior_states p n \\<subseteq> senior_states q n \\<Longrightarrow> P\"\n  assumes \"senior_states p n \\<supseteq> senior_states q n \\<Longrightarrow> P\"\n  shows \"P\"", "lemma senior_states_cases_subset [case_names less equal greater]:\n  assumes \"senior_states p n \\<subset> senior_states q n \\<Longrightarrow> P\"\n  assumes \"senior_states p n = senior_states q n \\<Longrightarrow> P\"\n  assumes \"senior_states p n \\<supset> senior_states q n \\<Longrightarrow> P\"\n  shows \"P\"", "lemma senior_states_finite:\n  \"finite (senior_states q n)\"", "lemmas senior_states_card_mono = card_mono[OF senior_states_finite]", "lemmas senior_states_psubset_card_mono = psubset_card_mono[OF senior_states_finite]", "lemma senior_states_card:\n  \"card (senior_states p n) = card (senior_states q n) \\<longleftrightarrow> senior_states p n = senior_states q n\"", "lemma senior_states_card_le:\n  \"card (senior_states p n) < card (senior_states q n) \\<longleftrightarrow> senior_states p n \\<subset> senior_states q n\"", "lemma senior_states_card_less:\n  \"card (senior_states p n) \\<le> card (senior_states q n) \\<longleftrightarrow> senior_states p n \\<subseteq> senior_states q n\"", "lemma senior_states_older_seniors:\n  \"(\\<lambda>y. token_run y n) ` older_seniors x n = senior_states (token_run x n) n\"\n  (is \"?lhs = ?rhs\")", "lemma card_older_senior_senior_states:\n  assumes \"x \\<in> configuration q n\"\n  shows \"card (older_seniors x n) = card (senior_states q n)\"\n  (is \"?lhs = ?rhs\")", "lemma state_rank_eq_rank:\n  \"state_rank q n = (case oldest_token q n of None \\<Rightarrow> None | Some t \\<Rightarrow> rank t n) \"\n  (is \"?lhs = ?rhs\")", "lemma state_rank_eq_rank_SOME:\n  \"state_rank q n = (if configuration q n \\<noteq> {} then rank (SOME x. x \\<in> configuration q n) n else None)\"", "lemma rank_eq_state_rank:\n  \"x \\<le> n \\<Longrightarrow> rank x n = state_rank (token_run x n) n\"", "lemma pull_up_configuration_state_rank:\n  \"configuration q n = {} \\<Longrightarrow> state_rank q n = None\"", "lemma push_down_state_rank_tokens:\n  \"state_rank q n = Some i \\<Longrightarrow> configuration q n \\<noteq> {}\"", "lemma push_down_state_rank_configuration_None:\n  \"state_rank q n = None \\<Longrightarrow> \\<not>sink q \\<Longrightarrow> configuration q n = {}\"", "lemma push_down_state_rank_oldest_token:\n  \"state_rank q n = Some i \\<Longrightarrow> \\<exists>x. oldest_token q n = Some x\"", "lemma push_down_state_rank_token_run:\n  \"state_rank q n = Some i \\<Longrightarrow> \\<exists>x. token_run x n = q \\<and> x \\<le> n\"", "lemma state_rank_distinct:\n  assumes distinct: \"p \\<noteq> q\"\n  assumes ranked_1: \"state_rank p n = Some i\"\n  assumes ranked_2: \"state_rank q n = Some j\"\n  shows \"i \\<noteq> j\"", "lemma state_rank_initial_state:\n  obtains i where \"state_rank q\\<^sub>0 n = Some i\"", "lemma state_rank_sink:\n  \"sink q \\<Longrightarrow> state_rank q n = None\"", "lemma state_rank_upper_bound:\n  \"state_rank q n = Some i \\<Longrightarrow> i < max_rank\"", "lemma state_rank_range:\n  \"state_rank q n \\<in> {None} \\<union> Some ` {0..<max_rank}\"", "lemma state_rank_None:\n  \"\\<not>sink q \\<Longrightarrow> state_rank q n = None \\<longleftrightarrow> oldest_token q n = None\"", "lemma state_rank_Some:\n  \"\\<not>sink q \\<Longrightarrow> (\\<exists>i. state_rank q n = Some i) \\<longleftrightarrow> (\\<exists>j. oldest_token q n = Some j)\"", "lemma state_rank_oldest_token:\n  assumes \"state_rank p n = Some i\"\n  assumes \"state_rank q n = Some j\"\n  assumes \"oldest_token p n = Some x\"\n  assumes \"oldest_token q n = Some y\"\n  shows \"i < j \\<longleftrightarrow> x < y\"", "lemma state_rank_oldest_token_le:\n  assumes \"state_rank p n = Some i\"\n  assumes \"state_rank q n = Some j\"\n  assumes \"oldest_token p n = Some x\"\n  assumes \"oldest_token q n = Some y\"\n  shows \"i \\<le> j \\<longleftrightarrow> x \\<le> y\"", "lemma state_rank_in_function_set:\n  shows \"(\\<lambda>q. state_rank q t) \\<in> {f. (\\<forall>x. x \\<notin> reach \\<Sigma> \\<delta> q\\<^sub>0 \\<longrightarrow> f x = None) \\<and>\n      (\\<forall>x. x \\<in> reach \\<Sigma> \\<delta> q\\<^sub>0 \\<longrightarrow> f x \\<in> {None} \\<union> Some ` {0..<max_rank})}\"", "lemma pre_oldest_configuration_range:\n  \"pre_oldest_tokens q n \\<subseteq> {0..Suc n}\"", "lemma pre_oldest_configuration_finite:\n  \"finite (pre_oldest_tokens q n)\"", "lemmas pre_oldest_configuration_Min_in = Min_in[OF pre_oldest_configuration_finite]", "lemma pre_oldest_configuration_obtain:\n  assumes \"x \\<in> pre_oldest_tokens q n - {Suc n}\"\n  obtains q' where \"oldest_token q' n = Some x\" and \"q = \\<delta> q' (w n)\"", "lemma pre_oldest_configuration_element:\n  assumes \"oldest_token q' n = Some ot\"\n  assumes \"q = \\<delta> q' (w n)\"\n  shows \"ot \\<in> pre_oldest_tokens q n\"", "lemma pre_oldest_configuration_initial_state:\n  \"Suc n \\<in> pre_oldest_tokens q n \\<Longrightarrow> q = q\\<^sub>0\"", "lemma pre_oldest_configuration_initial_state_2:\n  \"q = q\\<^sub>0 \\<Longrightarrow> Suc n \\<in> pre_oldest_tokens q n\"", "lemma pre_oldest_configuration_tokens:\n  \"pre_oldest_tokens q n \\<noteq> {} \\<longleftrightarrow> configuration q (Suc n) \\<noteq> {}\"\n  (is \"?lhs \\<longleftrightarrow> ?rhs\")", "lemma oldest_token_rec:\n  \"oldest_token q (Suc n) = (if pre_oldest_tokens q n \\<noteq> {} then Some (Min (pre_oldest_tokens q n)) else None)\"", "lemma pre_ranks_range:\n  \"pre_ranks (\\<lambda>q. state_rank q n) \\<nu> q  \\<subseteq> {0..max_rank}\"", "lemma pre_ranks_finite:\n  \"finite (pre_ranks (\\<lambda>q. state_rank q n) \\<nu> q)\"", "lemmas pre_ranks_Min_in = Min_in[OF pre_ranks_finite]", "lemma pre_ranks_state_obtain:\n  assumes \"r\\<^sub>q \\<in> pre_ranks r \\<nu> q - {max_rank}\"\n  obtains q' where \"r q' = Some r\\<^sub>q\" and \"q = \\<delta> q' \\<nu>\"", "lemma pre_ranks_element:\n  assumes \"state_rank q' n = Some r\"\n  assumes \"q = \\<delta> q' (w n)\"\n  shows \"r \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) q\"", "lemma pre_ranks_initial_state:\n  \"max_rank \\<in> pre_ranks (\\<lambda>q. state_rank q n) \\<nu> q \\<Longrightarrow> q = q\\<^sub>0\"", "lemma pre_ranks_initial_state_2:\n  \"q = q\\<^sub>0 \\<Longrightarrow> max_rank \\<in> pre_ranks r \\<nu> q\"", "lemma pre_ranks_tokens:\n  assumes \"\\<not>sink q\"\n  shows \"pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {} \\<longleftrightarrow> configuration q (Suc n) \\<noteq> {}\"\n  (is \"?lhs = ?rhs\")", "lemma pre_ranks_pre_oldest_token_Min_state_special:\n  assumes \"\\<not>sink q\"\n  assumes \"configuration q (Suc n) \\<noteq> {}\"\n  shows \"Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank \\<longleftrightarrow> Min (pre_oldest_tokens q n) = Suc n\"\n  (is \"?lhs \\<longleftrightarrow> ?rhs\")", "lemma pre_ranks_pre_oldest_token_Min_state:\n  assumes \"\\<not>sink q\"\n  assumes \"q = \\<delta> q' (w n)\"\n  assumes \"configuration q (Suc n) \\<noteq> {}\"\n  defines \"min_r \\<equiv> Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)\"\n  defines \"min_ot \\<equiv> Min (pre_oldest_tokens q n)\"\n  shows \"state_rank q' n = Some min_r \\<longleftrightarrow> oldest_token q' n = Some min_ot\"\n  (is \"?lhs \\<longleftrightarrow> ?rhs\")", "lemma Min_pre_ranks_pre_oldest_tokens:\n  fixes n\n  defines \"r \\<equiv> (\\<lambda>q. state_rank q n)\"\n  assumes \"configuration p (Suc n) \\<noteq> {}\"\n      and \"configuration q (Suc n) \\<noteq> {}\"\n  assumes \"\\<not>sink q\"\n      and \"\\<not>sink p\"\n  shows \"Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<longleftrightarrow> Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\"\n  (is \"?lhs \\<longleftrightarrow> ?rhs\")", "lemma state_rank_initial:\n  \"state_rank q 0 = initial q\"", "lemma state_rank_step:\n  \"state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q\"\n  (is \"?lhs = ?rhs\")", "lemma state_rank_step_foldl:\n  \"(\\<lambda>q. state_rank q n) = foldl step initial (map w [0..<n])\""], "translations": [["", "lemma nonempty_\\<Sigma>: \"\\<Sigma> \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sigma> \\<noteq> {}", "using bounded_w"], ["proof (prove)\nusing this:\n  range w \\<subseteq> \\<Sigma>\n\ngoal (1 subgoal):\n 1. \\<Sigma> \\<noteq> {}", "by blast"], ["", "lemma bounded_w': \"w i \\<in> \\<Sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w i \\<in> \\<Sigma>", "using bounded_w"], ["proof (prove)\nusing this:\n  range w \\<subseteq> \\<Sigma>\n\ngoal (1 subgoal):\n 1. w i \\<in> \\<Sigma>", "by blast\n\n\\<comment> \\<open>Naming Scheme:\n\nThis theory uses the following naming scheme to consistently name variables.\n\n* Tokens: x, y, z\n* Time: n, m\n* Rank: i, j, k\n* States: p, q\\<close>"], ["", "lemma sink_rev_step:\n  \"\\<not>sink q \\<Longrightarrow> q = \\<delta> q' \\<nu> \\<Longrightarrow> \\<nu> \\<in> \\<Sigma> \\<Longrightarrow> \\<not>sink q'\"\n  \"\\<not>sink q \\<Longrightarrow> q = \\<delta> q' (w i) \\<Longrightarrow> \\<not>sink q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<not> sink q; q = \\<delta> q' \\<nu>;\n      \\<nu> \\<in> \\<Sigma>\\<rbrakk>\n     \\<Longrightarrow> \\<not> sink q') &&&\n    (\\<lbrakk>\\<not> sink q; q = \\<delta> q' (w i)\\<rbrakk>\n     \\<Longrightarrow> \\<not> sink q')", "using bounded_w'"], ["proof (prove)\nusing this:\n  w ?i \\<in> \\<Sigma>\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<not> sink q; q = \\<delta> q' \\<nu>;\n      \\<nu> \\<in> \\<Sigma>\\<rbrakk>\n     \\<Longrightarrow> \\<not> sink q') &&&\n    (\\<lbrakk>\\<not> sink q; q = \\<delta> q' (w i)\\<rbrakk>\n     \\<Longrightarrow> \\<not> sink q')", "by (force simp only: sink_def)+"], ["", "subsection \\<open>Token Run\\<close>"], ["", "lemma token_stays_in_sink:\n  assumes \"sink q\"\n  assumes \"token_run x n = q\"\n  shows \"token_run x (n + m) = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. token_run x (n + m) = q", "proof (cases \"x \\<le> n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<le> n \\<Longrightarrow> token_run x (n + m) = q\n 2. \\<not> x \\<le> n \\<Longrightarrow> token_run x (n + m) = q", "case True"], ["proof (state)\nthis:\n  x \\<le> n\n\ngoal (2 subgoals):\n 1. x \\<le> n \\<Longrightarrow> token_run x (n + m) = q\n 2. \\<not> x \\<le> n \\<Longrightarrow> token_run x (n + m) = q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. token_run x (n + m) = q", "proof (induction m)"], ["proof (state)\ngoal (2 subgoals):\n 1. token_run x (n + 0) = q\n 2. \\<And>m.\n       token_run x (n + m) = q \\<Longrightarrow> token_run x (n + Suc m) = q", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. token_run x (n + 0) = q\n 2. \\<And>m.\n       token_run x (n + m) = q \\<Longrightarrow> token_run x (n + Suc m) = q", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. token_run x (n + 0) = q", "using assms(2)"], ["proof (prove)\nusing this:\n  token_run x n = q\n\ngoal (1 subgoal):\n 1. token_run x (n + 0) = q", "by simp"], ["proof (state)\nthis:\n  token_run x (n + 0) = q\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       token_run x (n + m) = q \\<Longrightarrow> token_run x (n + Suc m) = q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       token_run x (n + m) = q \\<Longrightarrow> token_run x (n + Suc m) = q", "case (Suc m)"], ["proof (state)\nthis:\n  token_run x (n + m) = q\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       token_run x (n + m) = q \\<Longrightarrow> token_run x (n + Suc m) = q", "have \"x \\<le> n + m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> n + m", "using True"], ["proof (prove)\nusing this:\n  x \\<le> n\n\ngoal (1 subgoal):\n 1. x \\<le> n + m", "by simp"], ["proof (state)\nthis:\n  x \\<le> n + m\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       token_run x (n + m) = q \\<Longrightarrow> token_run x (n + Suc m) = q", "moreover"], ["proof (state)\nthis:\n  x \\<le> n + m\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       token_run x (n + m) = q \\<Longrightarrow> token_run x (n + Suc m) = q", "have \"\\<And>x. w x \\<in> \\<Sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. w x \\<in> \\<Sigma>", "using bounded_w"], ["proof (prove)\nusing this:\n  range w \\<subseteq> \\<Sigma>\n\ngoal (1 subgoal):\n 1. \\<And>x. w x \\<in> \\<Sigma>", "by auto"], ["proof (state)\nthis:\n  w ?x \\<in> \\<Sigma>\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       token_run x (n + m) = q \\<Longrightarrow> token_run x (n + Suc m) = q", "ultimately"], ["proof (chain)\npicking this:\n  x \\<le> n + m\n  w ?x \\<in> \\<Sigma>", "have \"\\<And>t. token_run x (n + m)  = q \\<Longrightarrow> token_run x (n + m + 1) = q\""], ["proof (prove)\nusing this:\n  x \\<le> n + m\n  w ?x \\<in> \\<Sigma>\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       token_run x (n + m) = q \\<Longrightarrow> token_run x (n + m + 1) = q", "using \\<open>sink q\\<close>[unfolded sink_def] upt_add_eq_append[OF le0, of \"n + m\" 1]"], ["proof (prove)\nusing this:\n  x \\<le> n + m\n  w ?x \\<in> \\<Sigma>\n  q\\<^sub>0 \\<noteq> q \\<and>\n  (\\<forall>\\<nu>\\<in>\\<Sigma>. \\<delta> q \\<nu> = q)\n  [0..<n + m + 1] = [0..<n + m] @ [n + m..<n + m + 1]\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       token_run x (n + m) = q \\<Longrightarrow> token_run x (n + m + 1) = q", "using Suc_diff_le"], ["proof (prove)\nusing this:\n  x \\<le> n + m\n  w ?x \\<in> \\<Sigma>\n  q\\<^sub>0 \\<noteq> q \\<and>\n  (\\<forall>\\<nu>\\<in>\\<Sigma>. \\<delta> q \\<nu> = q)\n  [0..<n + m + 1] = [0..<n + m] @ [n + m..<n + m + 1]\n  ?n \\<le> ?m \\<Longrightarrow> Suc ?m - ?n = Suc (?m - ?n)\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       token_run x (n + m) = q \\<Longrightarrow> token_run x (n + m + 1) = q", "by simp"], ["proof (state)\nthis:\n  token_run x (n + m) = q \\<Longrightarrow> token_run x (n + m + 1) = q\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       token_run x (n + m) = q \\<Longrightarrow> token_run x (n + Suc m) = q", "with Suc"], ["proof (chain)\npicking this:\n  token_run x (n + m) = q\n  token_run x (n + m) = q \\<Longrightarrow> token_run x (n + m + 1) = q", "show ?case"], ["proof (prove)\nusing this:\n  token_run x (n + m) = q\n  token_run x (n + m) = q \\<Longrightarrow> token_run x (n + m + 1) = q\n\ngoal (1 subgoal):\n 1. token_run x (n + Suc m) = q", "by simp"], ["proof (state)\nthis:\n  token_run x (n + Suc m) = q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  token_run x (n + m) = q\n\ngoal (1 subgoal):\n 1. \\<not> x \\<le> n \\<Longrightarrow> token_run x (n + m) = q", "qed (insert assms, simp add: sink_def)"], ["", "lemma token_is_not_in_sink:\n  \"token_run x n \\<notin> A \\<Longrightarrow> token_run x (Suc n) \\<in> A \\<Longrightarrow> \\<not>sink (token_run x n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>token_run x n \\<notin> A; token_run x (Suc n) \\<in> A\\<rbrakk>\n    \\<Longrightarrow> \\<not> sink (token_run x n)", "by (metis Suc_eq_plus1 token_stays_in_sink)"], ["", "lemma token_run_intial_state:\n  \"token_run x x = q\\<^sub>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. token_run x x = q\\<^sub>0", "by simp"], ["", "lemma token_run_P:\n  assumes \"\\<not> P (token_run x n)\"\n  assumes \"P (token_run x (Suc (n + m)))\"\n  shows \"\\<exists>m' \\<le> m. \\<not> P (token_run x (n + m')) \\<and> P (token_run x (Suc (n + m')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m'\\<le>m.\n       \\<not> P (token_run x (n + m')) \\<and> P (token_run x (Suc (n + m')))", "using assms"], ["proof (prove)\nusing this:\n  \\<not> P (token_run x n)\n  P (token_run x (Suc (n + m)))\n\ngoal (1 subgoal):\n 1. \\<exists>m'\\<le>m.\n       \\<not> P (token_run x (n + m')) \\<and> P (token_run x (Suc (n + m')))", "by (induction m) (simp_all, metis add_Suc_right le_Suc_eq)"], ["", "lemma token_run_merge_Suc:\n  assumes \"x \\<le> n\"\n  assumes \"y \\<le> n\"\n  assumes \"token_run x n = token_run y n\"\n  shows \"token_run x (Suc n) = token_run y (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. token_run x (Suc n) = token_run y (Suc n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. token_run x (Suc n) = token_run y (Suc n)", "have \"run \\<delta> q\\<^sub>0 (suffix x w) (Suc (n - x)) = run \\<delta> q\\<^sub>0 (suffix y w) (Suc (n - y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. run \\<delta> q\\<^sub>0 (suffix x w) (Suc (n - x)) =\n    run \\<delta> q\\<^sub>0 (suffix y w) (Suc (n - y))", "using assms"], ["proof (prove)\nusing this:\n  x \\<le> n\n  y \\<le> n\n  token_run x n = token_run y n\n\ngoal (1 subgoal):\n 1. run \\<delta> q\\<^sub>0 (suffix x w) (Suc (n - x)) =\n    run \\<delta> q\\<^sub>0 (suffix y w) (Suc (n - y))", "by fastforce"], ["proof (state)\nthis:\n  run \\<delta> q\\<^sub>0 (suffix x w) (Suc (n - x)) =\n  run \\<delta> q\\<^sub>0 (suffix y w) (Suc (n - y))\n\ngoal (1 subgoal):\n 1. token_run x (Suc n) = token_run y (Suc n)", "thus ?thesis"], ["proof (prove)\nusing this:\n  run \\<delta> q\\<^sub>0 (suffix x w) (Suc (n - x)) =\n  run \\<delta> q\\<^sub>0 (suffix y w) (Suc (n - y))\n\ngoal (1 subgoal):\n 1. token_run x (Suc n) = token_run y (Suc n)", "using Suc_diff_le assms(1,2)"], ["proof (prove)\nusing this:\n  run \\<delta> q\\<^sub>0 (suffix x w) (Suc (n - x)) =\n  run \\<delta> q\\<^sub>0 (suffix y w) (Suc (n - y))\n  ?n \\<le> ?m \\<Longrightarrow> Suc ?m - ?n = Suc (?m - ?n)\n  x \\<le> n\n  y \\<le> n\n\ngoal (1 subgoal):\n 1. token_run x (Suc n) = token_run y (Suc n)", "by force"], ["proof (state)\nthis:\n  token_run x (Suc n) = token_run y (Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma token_run_merge:\n  \"\\<lbrakk>x \\<le> n; y \\<le> n; token_run x n = token_run y n\\<rbrakk> \\<Longrightarrow> token_run x (n + m) = token_run y (n + m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> n; y \\<le> n; token_run x n = token_run y n\\<rbrakk>\n    \\<Longrightarrow> token_run x (n + m) = token_run y (n + m)", "using token_run_merge_Suc[of x _ y]"], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<le> ?n; y \\<le> ?n; token_run x ?n = token_run y ?n\\<rbrakk>\n  \\<Longrightarrow> token_run x (Suc ?n) = token_run y (Suc ?n)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> n; y \\<le> n; token_run x n = token_run y n\\<rbrakk>\n    \\<Longrightarrow> token_run x (n + m) = token_run y (n + m)", "by (induction m) auto"], ["", "lemma token_run_mergepoint:\n  assumes \"x < y\"\n  assumes \"token_run x (y + n) = token_run y (y + n)\"\n  obtains m where \"x \\<le> (Suc m)\" and \"y \\<le> (Suc m)\"\n    and \"y = Suc m \\<or> token_run x m \\<noteq> token_run y m\"\n    and \"token_run x (Suc m) = token_run y (Suc m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>x \\<le> Suc m; y \\<le> Suc m;\n         y = Suc m \\<or> token_run x m \\<noteq> token_run y m;\n         token_run x (Suc m) = token_run y (Suc m)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  x < y\n  token_run x (y + n) = token_run y (y + n)\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>x \\<le> Suc m; y \\<le> Suc m;\n         y = Suc m \\<or> token_run x m \\<noteq> token_run y m;\n         token_run x (Suc m) = token_run y (Suc m)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (induction n)\n    ((metis add_0_iff le_Suc_eq le_add1 less_imp_Suc_add),\n     (metis add_Suc_right le_add1 less_or_eq_imp_le order_trans))"], ["", "subsubsection \\<open>Step Lemmas\\<close>"], ["", "lemma token_run_step:\n  assumes \"x \\<le> n\"\n  assumes \"token_run x n = q'\"\n  assumes \"q = \\<delta> q' (w n)\"\n  shows \"token_run x (Suc n) = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. token_run x (Suc n) = q", "using assms"], ["proof (prove)\nusing this:\n  x \\<le> n\n  token_run x n = q'\n  q = \\<delta> q' (w n)\n\ngoal (1 subgoal):\n 1. token_run x (Suc n) = q", "unfolding token_run.simps Suc_diff_le[OF \\<open>x \\<le> n\\<close>]"], ["proof (prove)\nusing this:\n  x \\<le> n\n  run \\<delta> q\\<^sub>0 (suffix x w) (n - x) = q'\n  q = \\<delta> q' (w n)\n\ngoal (1 subgoal):\n 1. run \\<delta> q\\<^sub>0 (suffix x w) (Suc (n - x)) = q", "by force"], ["", "lemma token_run_step':\n  \"x \\<le> n \\<Longrightarrow> token_run x (Suc n) = \\<delta> (token_run x n) (w n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> n \\<Longrightarrow>\n    token_run x (Suc n) = \\<delta> (token_run x n) (w n)", "using token_run_step"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<le> ?n; token_run ?x ?n = ?q';\n   ?q = \\<delta> ?q' (w ?n)\\<rbrakk>\n  \\<Longrightarrow> token_run ?x (Suc ?n) = ?q\n\ngoal (1 subgoal):\n 1. x \\<le> n \\<Longrightarrow>\n    token_run x (Suc n) = \\<delta> (token_run x n) (w n)", "by simp"], ["", "subsection \\<open>Configuration\\<close>"], ["", "subsubsection \\<open>Properties\\<close>"], ["", "lemma configuration_distinct:\n  \"q \\<noteq> q' \\<Longrightarrow> configuration q n \\<inter> configuration q' n = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<noteq> q' \\<Longrightarrow>\n    configuration q n \\<inter> configuration q' n = {}", "by auto"], ["", "lemma configuration_finite:\n  \"finite (configuration q n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (configuration q n)", "by simp"], ["", "lemma configuration_non_empty:\n  \"x \\<le> n \\<Longrightarrow> configuration (token_run x n) n \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> n \\<Longrightarrow> configuration (token_run x n) n \\<noteq> {}", "by fastforce"], ["", "lemma configuration_token:\n  \"x \\<le> n \\<Longrightarrow> x \\<in> configuration (token_run x n) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> n \\<Longrightarrow> x \\<in> configuration (token_run x n) n", "by fastforce"], ["", "lemmas configuration_Max_in = Max_in[OF configuration_finite]"], ["", "lemmas configuration_Min_in = Min_in[OF configuration_finite]"], ["", "subsubsection \\<open>Monotonicity\\<close>"], ["", "lemma configuration_monotonic_Suc:\n  \"x \\<le> n \\<Longrightarrow> configuration (token_run x n) n \\<subseteq> configuration (token_run x (Suc n)) (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> n \\<Longrightarrow>\n    configuration (token_run x n) n\n    \\<subseteq> configuration (token_run x (Suc n)) (Suc n)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x \\<le> n; xa \\<in> configuration (token_run x n) n\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> configuration (token_run x (Suc n))\n                                   (Suc n)", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x \\<le> n; xa \\<in> configuration (token_run x n) n\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> configuration (token_run x (Suc n))\n                                   (Suc n)", "assume \"y \\<in> configuration (token_run x n) n\""], ["proof (state)\nthis:\n  y \\<in> configuration (token_run x n) n\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x \\<le> n; xa \\<in> configuration (token_run x n) n\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> configuration (token_run x (Suc n))\n                                   (Suc n)", "hence \"y \\<le> n\" and \"token_run x n = token_run y n\""], ["proof (prove)\nusing this:\n  y \\<in> configuration (token_run x n) n\n\ngoal (1 subgoal):\n 1. y \\<le> n &&& token_run x n = token_run y n", "by simp_all"], ["proof (state)\nthis:\n  y \\<le> n\n  token_run x n = token_run y n\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x \\<le> n; xa \\<in> configuration (token_run x n) n\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> configuration (token_run x (Suc n))\n                                   (Suc n)", "moreover"], ["proof (state)\nthis:\n  y \\<le> n\n  token_run x n = token_run y n\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x \\<le> n; xa \\<in> configuration (token_run x n) n\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> configuration (token_run x (Suc n))\n                                   (Suc n)", "assume \"x \\<le> n\""], ["proof (state)\nthis:\n  x \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x \\<le> n; xa \\<in> configuration (token_run x n) n\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> configuration (token_run x (Suc n))\n                                   (Suc n)", "ultimately"], ["proof (chain)\npicking this:\n  y \\<le> n\n  token_run x n = token_run y n\n  x \\<le> n", "have \"token_run x (Suc n) = token_run y (Suc n)\""], ["proof (prove)\nusing this:\n  y \\<le> n\n  token_run x n = token_run y n\n  x \\<le> n\n\ngoal (1 subgoal):\n 1. token_run x (Suc n) = token_run y (Suc n)", "using token_run_merge_Suc"], ["proof (prove)\nusing this:\n  y \\<le> n\n  token_run x n = token_run y n\n  x \\<le> n\n  \\<lbrakk>?x \\<le> ?n; ?y \\<le> ?n;\n   token_run ?x ?n = token_run ?y ?n\\<rbrakk>\n  \\<Longrightarrow> token_run ?x (Suc ?n) = token_run ?y (Suc ?n)\n\ngoal (1 subgoal):\n 1. token_run x (Suc n) = token_run y (Suc n)", "by blast"], ["proof (state)\nthis:\n  token_run x (Suc n) = token_run y (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x \\<le> n; xa \\<in> configuration (token_run x n) n\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> configuration (token_run x (Suc n))\n                                   (Suc n)", "thus \"y \\<in> configuration (token_run x (Suc n)) (Suc n)\""], ["proof (prove)\nusing this:\n  token_run x (Suc n) = token_run y (Suc n)\n\ngoal (1 subgoal):\n 1. y \\<in> configuration (token_run x (Suc n)) (Suc n)", "using configuration_token \\<open>y \\<le> n\\<close>"], ["proof (prove)\nusing this:\n  token_run x (Suc n) = token_run y (Suc n)\n  ?x \\<le> ?n \\<Longrightarrow> ?x \\<in> configuration (token_run ?x ?n) ?n\n  y \\<le> n\n\ngoal (1 subgoal):\n 1. y \\<in> configuration (token_run x (Suc n)) (Suc n)", "by simp"], ["proof (state)\nthis:\n  y \\<in> configuration (token_run x (Suc n)) (Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Pull-Up and Push-Down\\<close>"], ["", "lemma pull_up_token_run_tokens:\n  \"\\<lbrakk>x \\<le> n; y \\<le> n; token_run x n = token_run y n\\<rbrakk> \\<Longrightarrow> \\<exists>q. x \\<in> configuration q n \\<and> y \\<in> configuration q n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> n; y \\<le> n; token_run x n = token_run y n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>q.\n                         x \\<in> configuration q n \\<and>\n                         y \\<in> configuration q n", "by force"], ["", "lemma push_down_configuration_token_run:\n  \"\\<lbrakk>x \\<in> configuration q n; y \\<in> configuration q n\\<rbrakk> \\<Longrightarrow> x \\<le> n \\<and> y \\<le> n \\<and> token_run x n = token_run y n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> configuration q n; y \\<in> configuration q n\\<rbrakk>\n    \\<Longrightarrow> x \\<le> n \\<and>\n                      y \\<le> n \\<and> token_run x n = token_run y n", "by simp"], ["", "subsubsection \\<open>Step Lemmas\\<close>"], ["", "lemma configuration_step:\n  \"x \\<in> configuration q' n \\<Longrightarrow> q = \\<delta> q' (w n) \\<Longrightarrow> x \\<in> configuration q (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> configuration q' n; q = \\<delta> q' (w n)\\<rbrakk>\n    \\<Longrightarrow> x \\<in> configuration q (Suc n)", "using Suc_diff_le"], ["proof (prove)\nusing this:\n  ?n \\<le> ?m \\<Longrightarrow> Suc ?m - ?n = Suc (?m - ?n)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> configuration q' n; q = \\<delta> q' (w n)\\<rbrakk>\n    \\<Longrightarrow> x \\<in> configuration q (Suc n)", "by simp"], ["", "lemma configuration_step_non_empty:\n  \"configuration q' n \\<noteq> {} \\<Longrightarrow> q = \\<delta> q' (w n) \\<Longrightarrow> configuration q (Suc n) \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>configuration q' n \\<noteq> {}; q = \\<delta> q' (w n)\\<rbrakk>\n    \\<Longrightarrow> configuration q (Suc n) \\<noteq> {}", "by (blast dest: configuration_step)"], ["", "lemma configuration_rev_step':\n  assumes \"x \\<noteq> Suc n\"\n  assumes \"x \\<in> configuration q (Suc n)\"\n  obtains q' where \"q = \\<delta> q' (w n)\" and \"x \\<in> configuration q' n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>q'.\n        \\<lbrakk>q = \\<delta> q' (w n); x \\<in> configuration q' n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms Suc_diff_le"], ["proof (prove)\nusing this:\n  x \\<noteq> Suc n\n  x \\<in> configuration q (Suc n)\n  ?n \\<le> ?m \\<Longrightarrow> Suc ?m - ?n = Suc (?m - ?n)\n\ngoal (1 subgoal):\n 1. (\\<And>q'.\n        \\<lbrakk>q = \\<delta> q' (w n); x \\<in> configuration q' n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["", "lemma configuration_rev_step'':\n  assumes \"x \\<in> configuration q\\<^sub>0 (Suc n)\"\n  shows \"x = Suc n \\<or> (\\<exists>q'. q\\<^sub>0 = \\<delta> q' (w n) \\<and> x \\<in> configuration q' n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = Suc n \\<or>\n    (\\<exists>q'.\n        q\\<^sub>0 = \\<delta> q' (w n) \\<and> x \\<in> configuration q' n)", "using assms configuration_rev_step'"], ["proof (prove)\nusing this:\n  x \\<in> configuration q\\<^sub>0 (Suc n)\n  \\<lbrakk>?x \\<noteq> Suc ?n; ?x \\<in> configuration ?q (Suc ?n);\n   \\<And>q'.\n      \\<lbrakk>?q = \\<delta> q' (w ?n);\n       ?x \\<in> configuration q' ?n\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. x = Suc n \\<or>\n    (\\<exists>q'.\n        q\\<^sub>0 = \\<delta> q' (w n) \\<and> x \\<in> configuration q' n)", "by metis"], ["", "lemma configuration_step_eq_q\\<^sub>0:\n  \"configuration q\\<^sub>0 (Suc n) = {Suc n} \\<union> \\<Union>{configuration q' n | q'. q\\<^sub>0 = \\<delta> q' (w n)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. configuration q\\<^sub>0 (Suc n) =\n    {Suc n} \\<union>\n    \\<Union> {configuration q' n |q'. q\\<^sub>0 = \\<delta> q' (w n)}", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. configuration q\\<^sub>0 (Suc n)\n    \\<subseteq> {Suc n} \\<union>\n                \\<Union>\n                 {configuration q' n |q'. q\\<^sub>0 = \\<delta> q' (w n)}\n 2. {Suc n} \\<union>\n    \\<Union> {configuration q' n |q'. q\\<^sub>0 = \\<delta> q' (w n)}\n    \\<subseteq> configuration q\\<^sub>0 (Suc n)", "using configuration_rev_step''"], ["proof (prove)\nusing this:\n  ?x \\<in> configuration q\\<^sub>0 (Suc ?n) \\<Longrightarrow>\n  ?x = Suc ?n \\<or>\n  (\\<exists>q'.\n      q\\<^sub>0 = \\<delta> q' (w ?n) \\<and> ?x \\<in> configuration q' ?n)\n\ngoal (2 subgoals):\n 1. configuration q\\<^sub>0 (Suc n)\n    \\<subseteq> {Suc n} \\<union>\n                \\<Union>\n                 {configuration q' n |q'. q\\<^sub>0 = \\<delta> q' (w n)}\n 2. {Suc n} \\<union>\n    \\<Union> {configuration q' n |q'. q\\<^sub>0 = \\<delta> q' (w n)}\n    \\<subseteq> configuration q\\<^sub>0 (Suc n)", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. {Suc n} \\<union>\n    \\<Union> {configuration q' n |q'. q\\<^sub>0 = \\<delta> q' (w n)}\n    \\<subseteq> configuration q\\<^sub>0 (Suc n)", "using configuration_step[of _ _ n q\\<^sub>0]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> configuration ?q' n;\n   q\\<^sub>0 = \\<delta> ?q' (w n)\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> configuration q\\<^sub>0 (Suc n)\n\ngoal (1 subgoal):\n 1. {Suc n} \\<union>\n    \\<Union> {configuration q' n |q'. q\\<^sub>0 = \\<delta> q' (w n)}\n    \\<subseteq> configuration q\\<^sub>0 (Suc n)", "by fastforce"], ["", "lemma configuration_rev_step:\n  assumes \"q \\<noteq> q\\<^sub>0\"\n  assumes \"x \\<in> configuration q (Suc n)\"\n  obtains q' where \"q = \\<delta> q' (w n)\" and \"x \\<in> configuration q' n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>q'.\n        \\<lbrakk>q = \\<delta> q' (w n); x \\<in> configuration q' n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using configuration_rev_step'[OF _ assms(2)] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<noteq> Suc n;\n   \\<And>q'.\n      \\<lbrakk>q = \\<delta> q' (w n); x \\<in> configuration q' n\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  q \\<noteq> q\\<^sub>0\n  x \\<in> configuration q (Suc n)\n\ngoal (1 subgoal):\n 1. (\\<And>q'.\n        \\<lbrakk>q = \\<delta> q' (w n); x \\<in> configuration q' n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["", "lemma configuration_step_eq:\n  assumes \"q \\<noteq> q\\<^sub>0\"\n  shows \"configuration q (Suc n) = \\<Union>{configuration q' n | q'. q = \\<delta> q' (w n)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. configuration q (Suc n) =\n    \\<Union> {configuration q' n |q'. q = \\<delta> q' (w n)}", "using configuration_rev_step[OF assms, of _ n] configuration_step"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> configuration q (Suc n);\n   \\<And>q'.\n      \\<lbrakk>q = \\<delta> q' (w n); ?x \\<in> configuration q' n\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>?x \\<in> configuration ?q' ?n; ?q = \\<delta> ?q' (w ?n)\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> configuration ?q (Suc ?n)\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) =\n    \\<Union> {configuration q' n |q'. q = \\<delta> q' (w n)}", "by auto"], ["", "lemma configuration_step_eq_unified:\n  shows \"configuration q (Suc n) = \\<Union>{configuration q' n | q'. q = \\<delta> q' (w n)} \\<union> (if q = q\\<^sub>0 then {Suc n} else {}) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. configuration q (Suc n) =\n    \\<Union> {configuration q' n |q'. q = \\<delta> q' (w n)} \\<union>\n    (if q = q\\<^sub>0 then {Suc n} else {})", "using configuration_step_eq configuration_step_eq_q\\<^sub>0"], ["proof (prove)\nusing this:\n  ?q \\<noteq> q\\<^sub>0 \\<Longrightarrow>\n  configuration ?q (Suc ?n) =\n  \\<Union> {configuration q' ?n |q'. ?q = \\<delta> q' (w ?n)}\n  configuration q\\<^sub>0 (Suc ?n) =\n  {Suc ?n} \\<union>\n  \\<Union> {configuration q' ?n |q'. q\\<^sub>0 = \\<delta> q' (w ?n)}\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) =\n    \\<Union> {configuration q' n |q'. q = \\<delta> q' (w n)} \\<union>\n    (if q = q\\<^sub>0 then {Suc n} else {})", "by force"], ["", "subsection \\<open>Oldest Token\\<close>"], ["", "subsubsection \\<open>Properties\\<close>"], ["", "lemma oldest_token_always_def:\n  \"\\<exists>i. i \\<le> x \\<and> oldest_token (token_run x n) n = Some i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i\\<le>x. oldest_token (token_run x n) n = Some i", "proof (cases \"x \\<le> n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<le> n \\<Longrightarrow>\n    \\<exists>i\\<le>x. oldest_token (token_run x n) n = Some i\n 2. \\<not> x \\<le> n \\<Longrightarrow>\n    \\<exists>i\\<le>x. oldest_token (token_run x n) n = Some i", "case False"], ["proof (state)\nthis:\n  \\<not> x \\<le> n\n\ngoal (2 subgoals):\n 1. x \\<le> n \\<Longrightarrow>\n    \\<exists>i\\<le>x. oldest_token (token_run x n) n = Some i\n 2. \\<not> x \\<le> n \\<Longrightarrow>\n    \\<exists>i\\<le>x. oldest_token (token_run x n) n = Some i", "let ?q = \"token_run x n\""], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<le> n \\<Longrightarrow>\n    \\<exists>i\\<le>x. oldest_token (token_run x n) n = Some i\n 2. \\<not> x \\<le> n \\<Longrightarrow>\n    \\<exists>i\\<le>x. oldest_token (token_run x n) n = Some i", "from False"], ["proof (chain)\npicking this:\n  \\<not> x \\<le> n", "have \"n \\<in> configuration ?q n\" and \"configuration ?q n \\<noteq> {}\""], ["proof (prove)\nusing this:\n  \\<not> x \\<le> n\n\ngoal (1 subgoal):\n 1. n \\<in> configuration (token_run x n) n &&&\n    configuration (token_run x n) n \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  n \\<in> configuration (token_run x n) n\n  configuration (token_run x n) n \\<noteq> {}\n\ngoal (2 subgoals):\n 1. x \\<le> n \\<Longrightarrow>\n    \\<exists>i\\<le>x. oldest_token (token_run x n) n = Some i\n 2. \\<not> x \\<le> n \\<Longrightarrow>\n    \\<exists>i\\<le>x. oldest_token (token_run x n) n = Some i", "then"], ["proof (chain)\npicking this:\n  n \\<in> configuration (token_run x n) n\n  configuration (token_run x n) n \\<noteq> {}", "obtain i where \"i \\<le> n\" and \"oldest_token ?q n = Some i\""], ["proof (prove)\nusing this:\n  n \\<in> configuration (token_run x n) n\n  configuration (token_run x n) n \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i \\<le> n; oldest_token (token_run x n) n = Some i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis Min.coboundedI oldest_token.simps configuration_finite)"], ["proof (state)\nthis:\n  i \\<le> n\n  oldest_token (token_run x n) n = Some i\n\ngoal (2 subgoals):\n 1. x \\<le> n \\<Longrightarrow>\n    \\<exists>i\\<le>x. oldest_token (token_run x n) n = Some i\n 2. \\<not> x \\<le> n \\<Longrightarrow>\n    \\<exists>i\\<le>x. oldest_token (token_run x n) n = Some i", "moreover"], ["proof (state)\nthis:\n  i \\<le> n\n  oldest_token (token_run x n) n = Some i\n\ngoal (2 subgoals):\n 1. x \\<le> n \\<Longrightarrow>\n    \\<exists>i\\<le>x. oldest_token (token_run x n) n = Some i\n 2. \\<not> x \\<le> n \\<Longrightarrow>\n    \\<exists>i\\<le>x. oldest_token (token_run x n) n = Some i", "hence \"i \\<le> x\""], ["proof (prove)\nusing this:\n  i \\<le> n\n  oldest_token (token_run x n) n = Some i\n\ngoal (1 subgoal):\n 1. i \\<le> x", "using False"], ["proof (prove)\nusing this:\n  i \\<le> n\n  oldest_token (token_run x n) n = Some i\n  \\<not> x \\<le> n\n\ngoal (1 subgoal):\n 1. i \\<le> x", "by linarith"], ["proof (state)\nthis:\n  i \\<le> x\n\ngoal (2 subgoals):\n 1. x \\<le> n \\<Longrightarrow>\n    \\<exists>i\\<le>x. oldest_token (token_run x n) n = Some i\n 2. \\<not> x \\<le> n \\<Longrightarrow>\n    \\<exists>i\\<le>x. oldest_token (token_run x n) n = Some i", "ultimately"], ["proof (chain)\npicking this:\n  i \\<le> n\n  oldest_token (token_run x n) n = Some i\n  i \\<le> x", "show ?thesis"], ["proof (prove)\nusing this:\n  i \\<le> n\n  oldest_token (token_run x n) n = Some i\n  i \\<le> x\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<le>x. oldest_token (token_run x n) n = Some i", "by blast"], ["proof (state)\nthis:\n  \\<exists>i\\<le>x. oldest_token (token_run x n) n = Some i\n\ngoal (1 subgoal):\n 1. x \\<le> n \\<Longrightarrow>\n    \\<exists>i\\<le>x. oldest_token (token_run x n) n = Some i", "qed fastforce"], ["", "lemma oldest_token_bounded:\n  \"oldest_token q n = Some x \\<Longrightarrow> x \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oldest_token q n = Some x \\<Longrightarrow> x \\<le> n", "by (metis oldest_token.simps configuration_Min_in option.distinct(1) option.inject push_down_configuration_token_run)"], ["", "lemma oldest_token_distinct:\n  \"q \\<noteq> q' \\<Longrightarrow> oldest_token q n = Some i \\<Longrightarrow> oldest_token q' n = Some j \\<Longrightarrow> i \\<noteq> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<noteq> q'; oldest_token q n = Some i;\n     oldest_token q' n = Some j\\<rbrakk>\n    \\<Longrightarrow> i \\<noteq> j", "by (metis configuration_Min_in configuration_distinct disjoint_iff_not_equal option.distinct(1) oldest_token.simps option.sel)"], ["", "lemma oldest_token_equal:\n  \"oldest_token q n = Some i \\<Longrightarrow> oldest_token q' n = Some i \\<Longrightarrow> q = q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>oldest_token q n = Some i; oldest_token q' n = Some i\\<rbrakk>\n    \\<Longrightarrow> q = q'", "using oldest_token_distinct"], ["proof (prove)\nusing this:\n  \\<lbrakk>?q \\<noteq> ?q'; oldest_token ?q ?n = Some ?i;\n   oldest_token ?q' ?n = Some ?j\\<rbrakk>\n  \\<Longrightarrow> ?i \\<noteq> ?j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>oldest_token q n = Some i; oldest_token q' n = Some i\\<rbrakk>\n    \\<Longrightarrow> q = q'", "by blast"], ["", "subsubsection \\<open>Monotonicity\\<close>"], ["", "lemma oldest_token_monotonic_Suc:\n  assumes \"x \\<le> n\"\n  assumes \"oldest_token (token_run x n) n = Some i\"\n  assumes \"oldest_token (token_run x (Suc n)) (Suc n) = Some j\"\n  shows \"i \\<ge> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j \\<le> i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. j \\<le> i", "from assms"], ["proof (chain)\npicking this:\n  x \\<le> n\n  oldest_token (token_run x n) n = Some i\n  oldest_token (token_run x (Suc n)) (Suc n) = Some j", "have \"i = Min (configuration (token_run x n) n)\"\n    and \"j = Min (configuration (token_run x (Suc n)) (Suc n))\""], ["proof (prove)\nusing this:\n  x \\<le> n\n  oldest_token (token_run x n) n = Some i\n  oldest_token (token_run x (Suc n)) (Suc n) = Some j\n\ngoal (1 subgoal):\n 1. i = Min (configuration (token_run x n) n) &&&\n    j = Min (configuration (token_run x (Suc n)) (Suc n))", "by (metis oldest_token.elims option.discI option.sel)+"], ["proof (state)\nthis:\n  i = Min (configuration (token_run x n) n)\n  j = Min (configuration (token_run x (Suc n)) (Suc n))\n\ngoal (1 subgoal):\n 1. j \\<le> i", "thus ?thesis"], ["proof (prove)\nusing this:\n  i = Min (configuration (token_run x n) n)\n  j = Min (configuration (token_run x (Suc n)) (Suc n))\n\ngoal (1 subgoal):\n 1. j \\<le> i", "using Min_antimono[OF configuration_monotonic_Suc[OF assms(1)] configuration_non_empty[OF assms(1)] configuration_finite]"], ["proof (prove)\nusing this:\n  i = Min (configuration (token_run x n) n)\n  j = Min (configuration (token_run x (Suc n)) (Suc n))\n  Min (configuration (token_run x (Suc n)) (Suc n))\n  \\<le> Min (configuration (token_run x n) n)\n\ngoal (1 subgoal):\n 1. j \\<le> i", "by blast"], ["proof (state)\nthis:\n  j \\<le> i\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Pull-Up and Push-Down\\<close>"], ["", "lemma push_down_oldest_token_configuration:\n  \"oldest_token q n = Some x \\<Longrightarrow> x \\<in> configuration q n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oldest_token q n = Some x \\<Longrightarrow> x \\<in> configuration q n", "by (metis configuration_Min_in oldest_token.simps option.distinct(2) option.inject)"], ["", "lemma push_down_oldest_token_token_run:\n  \"oldest_token q n = Some x \\<Longrightarrow> token_run x n = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oldest_token q n = Some x \\<Longrightarrow> token_run x n = q", "using push_down_oldest_token_configuration configuration.simps"], ["proof (prove)\nusing this:\n  oldest_token ?q ?n = Some ?x \\<Longrightarrow>\n  ?x \\<in> configuration ?q ?n\n  configuration ?q ?n = {x. x \\<le> ?n \\<and> token_run x ?n = ?q}\n\ngoal (1 subgoal):\n 1. oldest_token q n = Some x \\<Longrightarrow> token_run x n = q", "by blast"], ["", "subsection \\<open>Senior Token\\<close>"], ["", "subsubsection \\<open>Properties\\<close>"], ["", "lemma senior_le_token:\n  \"senior x n \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. senior x n \\<le> x", "using oldest_token_always_def[of x n]"], ["proof (prove)\nusing this:\n  \\<exists>i\\<le>x. oldest_token (token_run x n) n = Some i\n\ngoal (1 subgoal):\n 1. senior x n \\<le> x", "by fastforce"], ["", "lemma senior_token_run:\n  \"senior x n = senior y n \\<longleftrightarrow> token_run x n = token_run y n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (senior x n = senior y n) = (token_run x n = token_run y n)", "by (metis oldest_token_always_def oldest_token_distinct option.sel senior.simps)"], ["", "text \\<open>The senior of a token is always in the same state\\<close>"], ["", "lemma senior_same_state:\n  \"token_run (senior x n) n = token_run x n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. token_run (senior x n) n = token_run x n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. token_run (senior x n) n = token_run x n", "have X: \"{t. t \\<le> n \\<and> token_run t n = token_run x n} \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {t. t \\<le> n \\<and> token_run t n = token_run x n} \\<noteq> {}", "by (cases \"x \\<le> n\") auto"], ["proof (state)\nthis:\n  {t. t \\<le> n \\<and> token_run t n = token_run x n} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. token_run (senior x n) n = token_run x n", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. token_run (senior x n) n = token_run x n", "using Min_in[OF _ X]"], ["proof (prove)\nusing this:\n  finite\n   {t. t \\<le> n \\<and> token_run t n = token_run x n} \\<Longrightarrow>\n  Min {t. t \\<le> n \\<and> token_run t n = token_run x n}\n  \\<in> {t. t \\<le> n \\<and> token_run t n = token_run x n}\n\ngoal (1 subgoal):\n 1. token_run (senior x n) n = token_run x n", "by force"], ["proof (state)\nthis:\n  token_run (senior x n) n = token_run x n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma senior_senior:\n  \"senior (senior x n) n = senior x n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. senior (senior x n) n = senior x n", "using senior_same_state senior_token_run"], ["proof (prove)\nusing this:\n  token_run (senior ?x ?n) ?n = token_run ?x ?n\n  (senior ?x ?n = senior ?y ?n) = (token_run ?x ?n = token_run ?y ?n)\n\ngoal (1 subgoal):\n 1. senior (senior x n) n = senior x n", "by blast"], ["", "subsubsection \\<open>Monotonicity\\<close>"], ["", "lemma senior_monotonic_Suc:\n  \"x \\<le> n \\<Longrightarrow> senior x n \\<ge> senior x (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> n \\<Longrightarrow> senior x (Suc n) \\<le> senior x n", "by (metis oldest_token_always_def oldest_token_monotonic_Suc option.sel senior.simps)"], ["", "subsubsection \\<open>Pull-Up and Push-Down\\<close>"], ["", "lemma pull_up_configuration_senior:\n  \"\\<lbrakk>x \\<in> configuration q n; y \\<in> configuration q n\\<rbrakk> \\<Longrightarrow> senior x n = senior y n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> configuration q n; y \\<in> configuration q n\\<rbrakk>\n    \\<Longrightarrow> senior x n = senior y n", "by force"], ["", "lemma push_down_senior_tokens:\n  \"\\<lbrakk>x \\<le> n; y \\<le> n; senior x n = senior y n\\<rbrakk> \\<Longrightarrow> \\<exists>q. x \\<in> configuration q n \\<and> y \\<in> configuration q n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> n; y \\<le> n; senior x n = senior y n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>q.\n                         x \\<in> configuration q n \\<and>\n                         y \\<in> configuration q n", "using senior_token_run pull_up_token_run_tokens"], ["proof (prove)\nusing this:\n  (senior ?x ?n = senior ?y ?n) = (token_run ?x ?n = token_run ?y ?n)\n  \\<lbrakk>?x \\<le> ?n; ?y \\<le> ?n;\n   token_run ?x ?n = token_run ?y ?n\\<rbrakk>\n  \\<Longrightarrow> \\<exists>q.\n                       ?x \\<in> configuration q ?n \\<and>\n                       ?y \\<in> configuration q ?n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> n; y \\<le> n; senior x n = senior y n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>q.\n                         x \\<in> configuration q n \\<and>\n                         y \\<in> configuration q n", "by blast"], ["", "subsection \\<open>Set of Older Seniors\\<close>"], ["", "subsubsection \\<open>Properties\\<close>"], ["", "lemma older_seniors_cases_subseteq [case_names le ge]:\n  assumes \"older_seniors x n \\<subseteq> older_seniors y n \\<Longrightarrow> P\"\n  assumes \"older_seniors x n \\<supseteq> older_seniors y n \\<Longrightarrow> P\"\n  shows \"P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "using assms"], ["proof (prove)\nusing this:\n  older_seniors x n \\<subseteq> older_seniors y n \\<Longrightarrow> P\n  older_seniors y n \\<subseteq> older_seniors x n \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. P", "by fastforce"], ["", "lemma older_seniors_cases_subset [case_names less equal greater]:\n  assumes \"older_seniors x n \\<subset> older_seniors y n \\<Longrightarrow> P\"\n  assumes \"older_seniors x n = older_seniors y n \\<Longrightarrow> P\"\n  assumes \"older_seniors x n \\<supset> older_seniors y n \\<Longrightarrow> P\"\n  shows \"P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "using assms older_seniors_cases_subseteq"], ["proof (prove)\nusing this:\n  older_seniors x n \\<subset> older_seniors y n \\<Longrightarrow> P\n  older_seniors x n = older_seniors y n \\<Longrightarrow> P\n  older_seniors y n \\<subset> older_seniors x n \\<Longrightarrow> P\n  \\<lbrakk>older_seniors ?x ?n\n           \\<subseteq> older_seniors ?y ?n \\<Longrightarrow>\n           ?P;\n   older_seniors ?y ?n \\<subseteq> older_seniors ?x ?n \\<Longrightarrow>\n   ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. P", "by blast"], ["", "lemma older_seniors_finite:\n  \"finite (older_seniors x n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (older_seniors x n)", "by fastforce"], ["", "lemma older_seniors_older:\n  \"y \\<in> older_seniors x n \\<Longrightarrow> y < x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> older_seniors x n \\<Longrightarrow> y < x", "using less_le_trans[OF _ senior_le_token, of y x n]"], ["proof (prove)\nusing this:\n  y < senior x n \\<Longrightarrow> y < x\n\ngoal (1 subgoal):\n 1. y \\<in> older_seniors x n \\<Longrightarrow> y < x", "by force"], ["", "lemma older_seniors_senior_simp:\n  \"older_seniors (senior x n) n = older_seniors x n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. older_seniors (senior x n) n = older_seniors x n", "unfolding older_seniors.simps senior_senior"], ["proof (prove)\ngoal (1 subgoal):\n 1. {s. \\<exists>y.\n           s = senior y n \\<and>\n           s < senior x n \\<and> \\<not> sink (token_run s n)} =\n    {s. \\<exists>y.\n           s = senior y n \\<and>\n           s < senior x n \\<and> \\<not> sink (token_run s n)}", ".."], ["", "lemma older_seniors_not_self_referential:\n  \"senior x n \\<notin> older_seniors x n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. senior x n \\<notin> older_seniors x n", "by simp"], ["", "lemma older_seniors_not_self_referential_2:\n  \"x \\<notin> older_seniors x n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> older_seniors x n", "using older_seniors_older older_seniors_not_self_referential less_not_refl"], ["proof (prove)\nusing this:\n  ?y \\<in> older_seniors ?x ?n \\<Longrightarrow> ?y < ?x\n  senior ?x ?n \\<notin> older_seniors ?x ?n\n  \\<not> ?n < ?n\n\ngoal (1 subgoal):\n 1. x \\<notin> older_seniors x n", "by blast"], ["", "lemma older_seniors_subset:\n  \"y \\<in> older_seniors x n \\<Longrightarrow> older_seniors y n \\<subset> older_seniors x n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> older_seniors x n \\<Longrightarrow>\n    older_seniors y n \\<subset> older_seniors x n", "using older_seniors_not_self_referential_2"], ["proof (prove)\nusing this:\n  ?x \\<notin> older_seniors ?x ?n\n\ngoal (1 subgoal):\n 1. y \\<in> older_seniors x n \\<Longrightarrow>\n    older_seniors y n \\<subset> older_seniors x n", "by (cases rule: older_seniors_cases_subset) blast+"], ["", "lemma older_seniors_subset_2:\n  assumes \"\\<not> sink (token_run x n)\"\n  assumes \"older_seniors x n \\<subset> older_seniors y n\"\n  shows \"senior x n \\<in> older_seniors y n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. senior x n \\<in> older_seniors y n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. senior x n \\<in> older_seniors y n", "have \"senior x n < senior y n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. senior x n < senior y n", "using assms(2)"], ["proof (prove)\nusing this:\n  older_seniors x n \\<subset> older_seniors y n\n\ngoal (1 subgoal):\n 1. senior x n < senior y n", "by fastforce"], ["proof (state)\nthis:\n  senior x n < senior y n\n\ngoal (1 subgoal):\n 1. senior x n \\<in> older_seniors y n", "thus ?thesis"], ["proof (prove)\nusing this:\n  senior x n < senior y n\n\ngoal (1 subgoal):\n 1. senior x n \\<in> older_seniors y n", "using assms(1)[unfolded senior_same_state[symmetric, of x n]]"], ["proof (prove)\nusing this:\n  senior x n < senior y n\n  \\<not> sink (token_run (senior x n) n)\n\ngoal (1 subgoal):\n 1. senior x n \\<in> older_seniors y n", "unfolding older_seniors.simps"], ["proof (prove)\nusing this:\n  senior x n < senior y n\n  \\<not> sink (token_run (senior x n) n)\n\ngoal (1 subgoal):\n 1. senior x n\n    \\<in> {s. \\<exists>ya.\n                 s = senior ya n \\<and>\n                 s < senior y n \\<and> \\<not> sink (token_run s n)}", "by blast"], ["proof (state)\nthis:\n  senior x n \\<in> older_seniors y n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas older_seniors_Max_in = Max_in[OF older_seniors_finite]"], ["", "lemmas older_seniors_Min_in = Min_in[OF older_seniors_finite]"], ["", "lemmas older_seniors_Max_coboundedI = Max.coboundedI[OF older_seniors_finite]"], ["", "lemmas older_seniors_Min_coboundedI = Min.coboundedI[OF older_seniors_finite]"], ["", "lemmas older_seniors_card_mono = card_mono[OF older_seniors_finite]"], ["", "lemmas older_seniors_psubset_card_mono = psubset_card_mono[OF older_seniors_finite]"], ["", "lemma older_seniors_recursive:\n  fixes x n\n  defines \"os \\<equiv> older_seniors x n\"\n  assumes \"os \\<noteq> {}\"\n  shows \"os = {Max os} \\<union> older_seniors (Max os) n\"\n  (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. os = {Max os} \\<union> older_seniors (Max os) n", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. os \\<subseteq> {Max os} \\<union> older_seniors (Max os) n\n 2. {Max os} \\<union> older_seniors (Max os) n \\<subseteq> os", "show \"?lhs \\<subseteq> ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. os \\<subseteq> {Max os} \\<union> older_seniors (Max os) n", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> os \\<Longrightarrow>\n       x \\<in> {Max os} \\<union> older_seniors (Max os) n", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> os \\<Longrightarrow>\n       x \\<in> {Max os} \\<union> older_seniors (Max os) n", "assume \"x \\<in> ?lhs\""], ["proof (state)\nthis:\n  x \\<in> os\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> os \\<Longrightarrow>\n       x \\<in> {Max os} \\<union> older_seniors (Max os) n", "show \"x \\<in> ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> {Max os} \\<union> older_seniors (Max os) n", "proof (cases \"x = Max os\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = Max os \\<Longrightarrow>\n    x \\<in> {Max os} \\<union> older_seniors (Max os) n\n 2. x \\<noteq> Max os \\<Longrightarrow>\n    x \\<in> {Max os} \\<union> older_seniors (Max os) n", "case False"], ["proof (state)\nthis:\n  x \\<noteq> Max os\n\ngoal (2 subgoals):\n 1. x = Max os \\<Longrightarrow>\n    x \\<in> {Max os} \\<union> older_seniors (Max os) n\n 2. x \\<noteq> Max os \\<Longrightarrow>\n    x \\<in> {Max os} \\<union> older_seniors (Max os) n", "hence \"x < Max os\""], ["proof (prove)\nusing this:\n  x \\<noteq> Max os\n\ngoal (1 subgoal):\n 1. x < Max os", "by (metis older_seniors_Max_coboundedI os_def \\<open>x \\<in> os\\<close> dual_order.order_iff_strict)"], ["proof (state)\nthis:\n  x < Max os\n\ngoal (2 subgoals):\n 1. x = Max os \\<Longrightarrow>\n    x \\<in> {Max os} \\<union> older_seniors (Max os) n\n 2. x \\<noteq> Max os \\<Longrightarrow>\n    x \\<in> {Max os} \\<union> older_seniors (Max os) n", "moreover"], ["proof (state)\nthis:\n  x < Max os\n\ngoal (2 subgoals):\n 1. x = Max os \\<Longrightarrow>\n    x \\<in> {Max os} \\<union> older_seniors (Max os) n\n 2. x \\<noteq> Max os \\<Longrightarrow>\n    x \\<in> {Max os} \\<union> older_seniors (Max os) n", "obtain y' where \"Max os = senior y' n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        Max os = senior y' n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using older_seniors_Max_in assms(2)"], ["proof (prove)\nusing this:\n  older_seniors ?x ?n \\<noteq> {} \\<Longrightarrow>\n  Max (older_seniors ?x ?n) \\<in> older_seniors ?x ?n\n  os \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        Max os = senior y' n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding os_def older_seniors.simps"], ["proof (prove)\nusing this:\n  {s. \\<exists>y.\n         s = senior y ?n \\<and>\n         s < senior ?x ?n \\<and> \\<not> sink (token_run s ?n)} \\<noteq>\n  {} \\<Longrightarrow>\n  Max {s. \\<exists>y.\n             s = senior y ?n \\<and>\n             s < senior ?x ?n \\<and> \\<not> sink (token_run s ?n)}\n  \\<in> {s. \\<exists>y.\n               s = senior y ?n \\<and>\n               s < senior ?x ?n \\<and> \\<not> sink (token_run s ?n)}\n  {s. \\<exists>y.\n         s = senior y n \\<and>\n         s < senior x n \\<and> \\<not> sink (token_run s n)} \\<noteq>\n  {}\n\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        Max {s. \\<exists>y.\n                   s = senior y n \\<and>\n                   s < senior x n \\<and> \\<not> sink (token_run s n)} =\n        senior y' n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Max os = senior y' n\n\ngoal (2 subgoals):\n 1. x = Max os \\<Longrightarrow>\n    x \\<in> {Max os} \\<union> older_seniors (Max os) n\n 2. x \\<noteq> Max os \\<Longrightarrow>\n    x \\<in> {Max os} \\<union> older_seniors (Max os) n", "ultimately"], ["proof (chain)\npicking this:\n  x < Max os\n  Max os = senior y' n", "have \"x < senior (Max os) n\""], ["proof (prove)\nusing this:\n  x < Max os\n  Max os = senior y' n\n\ngoal (1 subgoal):\n 1. x < senior (Max os) n", "using senior_senior"], ["proof (prove)\nusing this:\n  x < Max os\n  Max os = senior y' n\n  senior (senior ?x ?n) ?n = senior ?x ?n\n\ngoal (1 subgoal):\n 1. x < senior (Max os) n", "by presburger"], ["proof (state)\nthis:\n  x < senior (Max os) n\n\ngoal (2 subgoals):\n 1. x = Max os \\<Longrightarrow>\n    x \\<in> {Max os} \\<union> older_seniors (Max os) n\n 2. x \\<noteq> Max os \\<Longrightarrow>\n    x \\<in> {Max os} \\<union> older_seniors (Max os) n", "moreover"], ["proof (state)\nthis:\n  x < senior (Max os) n\n\ngoal (2 subgoals):\n 1. x = Max os \\<Longrightarrow>\n    x \\<in> {Max os} \\<union> older_seniors (Max os) n\n 2. x \\<noteq> Max os \\<Longrightarrow>\n    x \\<in> {Max os} \\<union> older_seniors (Max os) n", "from \\<open>x \\<in> ?lhs\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> os", "obtain y where \"x = senior y n\" and \"\\<not> sink (token_run x n)\""], ["proof (prove)\nusing this:\n  x \\<in> os\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>x = senior y n; \\<not> sink (token_run x n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding os_def older_seniors.simps"], ["proof (prove)\nusing this:\n  x \\<in> {s. \\<exists>y.\n                 s = senior y n \\<and>\n                 s < senior x n \\<and> \\<not> sink (token_run s n)}\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>x = senior y n; \\<not> sink (token_run x n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x = senior y n\n  \\<not> sink (token_run x n)\n\ngoal (2 subgoals):\n 1. x = Max os \\<Longrightarrow>\n    x \\<in> {Max os} \\<union> older_seniors (Max os) n\n 2. x \\<noteq> Max os \\<Longrightarrow>\n    x \\<in> {Max os} \\<union> older_seniors (Max os) n", "ultimately"], ["proof (chain)\npicking this:\n  x < senior (Max os) n\n  x = senior y n\n  \\<not> sink (token_run x n)", "show ?thesis"], ["proof (prove)\nusing this:\n  x < senior (Max os) n\n  x = senior y n\n  \\<not> sink (token_run x n)\n\ngoal (1 subgoal):\n 1. x \\<in> {Max os} \\<union> older_seniors (Max os) n", "unfolding older_seniors.simps"], ["proof (prove)\nusing this:\n  x < senior (Max os) n\n  x = senior y n\n  \\<not> sink (token_run x n)\n\ngoal (1 subgoal):\n 1. x \\<in> {Max os} \\<union>\n            {s. \\<exists>y.\n                   s = senior y n \\<and>\n                   s < senior (Max os) n \\<and> \\<not> sink (token_run s n)}", "by blast"], ["proof (state)\nthis:\n  x \\<in> {Max os} \\<union> older_seniors (Max os) n\n\ngoal (1 subgoal):\n 1. x = Max os \\<Longrightarrow>\n    x \\<in> {Max os} \\<union> older_seniors (Max os) n", "qed blast"], ["proof (state)\nthis:\n  x \\<in> {Max os} \\<union> older_seniors (Max os) n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  os \\<subseteq> {Max os} \\<union> older_seniors (Max os) n\n\ngoal (1 subgoal):\n 1. {Max os} \\<union> older_seniors (Max os) n \\<subseteq> os", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. {Max os} \\<union> older_seniors (Max os) n \\<subseteq> os", "show \"?lhs \\<supseteq> ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {Max os} \\<union> older_seniors (Max os) n \\<subseteq> os", "using older_seniors_subset older_seniors_Max_in assms(2)"], ["proof (prove)\nusing this:\n  ?y \\<in> older_seniors ?x ?n \\<Longrightarrow>\n  older_seniors ?y ?n \\<subset> older_seniors ?x ?n\n  older_seniors ?x ?n \\<noteq> {} \\<Longrightarrow>\n  Max (older_seniors ?x ?n) \\<in> older_seniors ?x ?n\n  os \\<noteq> {}\n\ngoal (1 subgoal):\n 1. {Max os} \\<union> older_seniors (Max os) n \\<subseteq> os", "unfolding os_def"], ["proof (prove)\nusing this:\n  ?y \\<in> older_seniors ?x ?n \\<Longrightarrow>\n  older_seniors ?y ?n \\<subset> older_seniors ?x ?n\n  older_seniors ?x ?n \\<noteq> {} \\<Longrightarrow>\n  Max (older_seniors ?x ?n) \\<in> older_seniors ?x ?n\n  older_seniors x n \\<noteq> {}\n\ngoal (1 subgoal):\n 1. {Max (older_seniors x n)} \\<union>\n    older_seniors (Max (older_seniors x n)) n\n    \\<subseteq> older_seniors x n", "by blast"], ["proof (state)\nthis:\n  {Max os} \\<union> older_seniors (Max os) n \\<subseteq> os\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma older_seniors_recursive_card:\n  fixes x n\n  defines \"os \\<equiv> older_seniors x n\"\n  assumes \"os \\<noteq> {}\"\n  shows \"card os = Suc (card (older_seniors (Max os) n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card os = Suc (card (older_seniors (Max os) n))", "by (metis older_seniors_recursive assms Un_empty_left Un_insert_left card_insert_disjoint older_seniors_finite older_seniors_not_self_referential_2)"], ["", "lemma older_seniors_card:\n  \"card (older_seniors x n) = card (older_seniors y n) \\<longleftrightarrow> older_seniors x n = older_seniors y n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (card (older_seniors x n) = card (older_seniors y n)) =\n    (older_seniors x n = older_seniors y n)", "by (metis less_not_refl older_seniors_cases_subset older_seniors_psubset_card_mono)"], ["", "lemma older_seniors_card_le:\n  \"card (older_seniors x n) < card (older_seniors y n) \\<longleftrightarrow> older_seniors x n \\<subset> older_seniors y n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (card (older_seniors x n) < card (older_seniors y n)) =\n    (older_seniors x n \\<subset> older_seniors y n)", "by (metis card_mono card_psubset not_le older_seniors_cases_subseteq older_seniors_finite psubset_card_mono)"], ["", "lemma older_seniors_card_less:\n  \"card (older_seniors x n) \\<le> card (older_seniors y n) \\<longleftrightarrow> older_seniors x n \\<subseteq> older_seniors y n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (card (older_seniors x n) \\<le> card (older_seniors y n)) =\n    (older_seniors x n \\<subseteq> older_seniors y n)", "by (metis not_le older_seniors_card_mono older_seniors_cases_subseteq older_seniors_psubset_card_mono subset_not_subset_eq)"], ["", "subsubsection \\<open>Monotonicity\\<close>"], ["", "lemma older_seniors_monotonic_Suc:\n  assumes \"x \\<le> n\"\n  shows \"older_seniors x n \\<supseteq> older_seniors x (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. older_seniors x (Suc n) \\<subseteq> older_seniors x n", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> older_seniors x (Suc n) \\<Longrightarrow>\n       xa \\<in> older_seniors x n", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> older_seniors x (Suc n) \\<Longrightarrow>\n       xa \\<in> older_seniors x n", "assume \"y \\<in> older_seniors x (Suc n)\""], ["proof (state)\nthis:\n  y \\<in> older_seniors x (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> older_seniors x (Suc n) \\<Longrightarrow>\n       xa \\<in> older_seniors x n", "then"], ["proof (chain)\npicking this:\n  y \\<in> older_seniors x (Suc n)", "obtain ox where \"y = senior ox (Suc n)\"\n    and \"y < senior x (Suc n)\"\n    and \"\\<not> sink (token_run y (Suc n))\""], ["proof (prove)\nusing this:\n  y \\<in> older_seniors x (Suc n)\n\ngoal (1 subgoal):\n 1. (\\<And>ox.\n        \\<lbrakk>y = senior ox (Suc n); y < senior x (Suc n);\n         \\<not> sink (token_run y (Suc n))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding older_seniors.simps"], ["proof (prove)\nusing this:\n  y \\<in> {s. \\<exists>y.\n                 s = senior y (Suc n) \\<and>\n                 s < senior x (Suc n) \\<and>\n                 \\<not> sink (token_run s (Suc n))}\n\ngoal (1 subgoal):\n 1. (\\<And>ox.\n        \\<lbrakk>y = senior ox (Suc n); y < senior x (Suc n);\n         \\<not> sink (token_run y (Suc n))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  y = senior ox (Suc n)\n  y < senior x (Suc n)\n  \\<not> sink (token_run y (Suc n))\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> older_seniors x (Suc n) \\<Longrightarrow>\n       xa \\<in> older_seniors x n", "hence \"y = senior y n\""], ["proof (prove)\nusing this:\n  y = senior ox (Suc n)\n  y < senior x (Suc n)\n  \\<not> sink (token_run y (Suc n))\n\ngoal (1 subgoal):\n 1. y = senior y n", "using senior_senior senior_le_token senior_monotonic_Suc assms"], ["proof (prove)\nusing this:\n  y = senior ox (Suc n)\n  y < senior x (Suc n)\n  \\<not> sink (token_run y (Suc n))\n  senior (senior ?x ?n) ?n = senior ?x ?n\n  senior ?x ?n \\<le> ?x\n  ?x \\<le> ?n \\<Longrightarrow> senior ?x (Suc ?n) \\<le> senior ?x ?n\n  x \\<le> n\n\ngoal (1 subgoal):\n 1. y = senior y n", "by (metis add.commute add.left_commute dual_order.order_iff_strict linear not_add_less1 not_less le_iff_add)"], ["proof (state)\nthis:\n  y = senior y n\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> older_seniors x (Suc n) \\<Longrightarrow>\n       xa \\<in> older_seniors x n", "moreover"], ["proof (state)\nthis:\n  y = senior y n\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> older_seniors x (Suc n) \\<Longrightarrow>\n       xa \\<in> older_seniors x n", "have \"y < senior x n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y < senior x n", "using assms less_le_trans[OF \\<open>y < senior x (Suc n)\\<close> senior_monotonic_Suc]"], ["proof (prove)\nusing this:\n  x \\<le> n\n  x \\<le> n \\<Longrightarrow> y < senior x n\n\ngoal (1 subgoal):\n 1. y < senior x n", "by blast"], ["proof (state)\nthis:\n  y < senior x n\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> older_seniors x (Suc n) \\<Longrightarrow>\n       xa \\<in> older_seniors x n", "moreover"], ["proof (state)\nthis:\n  y < senior x n\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> older_seniors x (Suc n) \\<Longrightarrow>\n       xa \\<in> older_seniors x n", "have \"\\<not> sink (token_run y n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> sink (token_run y n)", "using \\<open>\\<not> sink (token_run y (Suc n))\\<close> token_stays_in_sink"], ["proof (prove)\nusing this:\n  \\<not> sink (token_run y (Suc n))\n  \\<lbrakk>sink ?q; token_run ?x ?n = ?q\\<rbrakk>\n  \\<Longrightarrow> token_run ?x (?n + ?m) = ?q\n\ngoal (1 subgoal):\n 1. \\<not> sink (token_run y n)", "unfolding Suc_eq_plus1"], ["proof (prove)\nusing this:\n  \\<not> sink (token_run y (n + 1))\n  \\<lbrakk>sink ?q; token_run ?x ?n = ?q\\<rbrakk>\n  \\<Longrightarrow> token_run ?x (?n + ?m) = ?q\n\ngoal (1 subgoal):\n 1. \\<not> sink (token_run y n)", "by metis"], ["proof (state)\nthis:\n  \\<not> sink (token_run y n)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> older_seniors x (Suc n) \\<Longrightarrow>\n       xa \\<in> older_seniors x n", "ultimately"], ["proof (chain)\npicking this:\n  y = senior y n\n  y < senior x n\n  \\<not> sink (token_run y n)", "show \"y \\<in> older_seniors x n\""], ["proof (prove)\nusing this:\n  y = senior y n\n  y < senior x n\n  \\<not> sink (token_run y n)\n\ngoal (1 subgoal):\n 1. y \\<in> older_seniors x n", "unfolding older_seniors.simps"], ["proof (prove)\nusing this:\n  y = senior y n\n  y < senior x n\n  \\<not> sink (token_run y n)\n\ngoal (1 subgoal):\n 1. y \\<in> {s. \\<exists>y.\n                   s = senior y n \\<and>\n                   s < senior x n \\<and> \\<not> sink (token_run s n)}", "by blast"], ["proof (state)\nthis:\n  y \\<in> older_seniors x n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma older_seniors_monotonic:\n  \"x \\<le> n \\<Longrightarrow> older_seniors x n \\<supseteq> older_seniors x (n + m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> n \\<Longrightarrow>\n    older_seniors x (n + m) \\<subseteq> older_seniors x n", "by (induction m) (simp, metis older_seniors_monotonic_Suc add_Suc_right dual_order.trans trans_le_add1)"], ["", "lemma older_seniors_stable:\n  \"x \\<le> n \\<Longrightarrow> older_seniors x n = older_seniors x (n + m + m') \\<Longrightarrow> older_seniors x n = older_seniors x (n + m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> n;\n     older_seniors x n = older_seniors x (n + m + m')\\<rbrakk>\n    \\<Longrightarrow> older_seniors x n = older_seniors x (n + m)", "by (induction m') (simp, unfold set_eq_subset, metis dual_order.trans le_add1 older_seniors_monotonic)"], ["", "lemma card_older_seniors_monotonic:\n  \"x \\<le> n \\<Longrightarrow> card (older_seniors x n) \\<ge> card (older_seniors x (n + m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> n \\<Longrightarrow>\n    card (older_seniors x (n + m)) \\<le> card (older_seniors x n)", "using older_seniors_monotonic older_seniors_card_mono"], ["proof (prove)\nusing this:\n  ?x \\<le> ?n \\<Longrightarrow>\n  older_seniors ?x (?n + ?m) \\<subseteq> older_seniors ?x ?n\n  ?A \\<subseteq> older_seniors ?x ?n \\<Longrightarrow>\n  card ?A \\<le> card (older_seniors ?x ?n)\n\ngoal (1 subgoal):\n 1. x \\<le> n \\<Longrightarrow>\n    card (older_seniors x (n + m)) \\<le> card (older_seniors x n)", "by meson"], ["", "subsubsection \\<open>Pull-Up and Push-Down\\<close>"], ["", "lemma pull_up_senior_older_seniors:\n  \"senior x n = senior y n \\<Longrightarrow> older_seniors x n = older_seniors y n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. senior x n = senior y n \\<Longrightarrow>\n    older_seniors x n = older_seniors y n", "unfolding older_seniors.simps senior.simps senior_token_run"], ["proof (prove)\ngoal (1 subgoal):\n 1. the (oldest_token (token_run x n) n) =\n    the (oldest_token (token_run y n) n) \\<Longrightarrow>\n    {s. \\<exists>y.\n           s = the (oldest_token (token_run y n) n) \\<and>\n           s < the (oldest_token (token_run x n) n) \\<and>\n           \\<not> sink (token_run s n)} =\n    {s. \\<exists>ya.\n           s = the (oldest_token (token_run ya n) n) \\<and>\n           s < the (oldest_token (token_run y n) n) \\<and>\n           \\<not> sink (token_run s n)}", "by presburger"], ["", "lemma pull_up_senior_older_seniors_less:\n  \"senior x n < senior y n \\<Longrightarrow> older_seniors x n \\<subseteq> older_seniors y n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. senior x n < senior y n \\<Longrightarrow>\n    older_seniors x n \\<subseteq> older_seniors y n", "by force"], ["", "lemma pull_up_senior_older_seniors_less_2:\n  assumes \"\\<not> sink (token_run x n)\"\n  assumes \"senior x n < senior y n\"\n  shows \"older_seniors x n \\<subset> older_seniors y n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. older_seniors x n \\<subset> older_seniors y n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. older_seniors x n \\<subset> older_seniors y n", "from assms"], ["proof (chain)\npicking this:\n  \\<not> sink (token_run x n)\n  senior x n < senior y n", "have \"senior x n \\<in> older_seniors y n\""], ["proof (prove)\nusing this:\n  \\<not> sink (token_run x n)\n  senior x n < senior y n\n\ngoal (1 subgoal):\n 1. senior x n \\<in> older_seniors y n", "unfolding senior_same_state[of x n, symmetric] older_seniors.simps"], ["proof (prove)\nusing this:\n  \\<not> sink (token_run (senior x n) n)\n  senior x n < senior y n\n\ngoal (1 subgoal):\n 1. senior x n\n    \\<in> {s. \\<exists>ya.\n                 s = senior ya n \\<and>\n                 s < senior y n \\<and> \\<not> sink (token_run s n)}", "by blast"], ["proof (state)\nthis:\n  senior x n \\<in> older_seniors y n\n\ngoal (1 subgoal):\n 1. older_seniors x n \\<subset> older_seniors y n", "thus ?thesis"], ["proof (prove)\nusing this:\n  senior x n \\<in> older_seniors y n\n\ngoal (1 subgoal):\n 1. older_seniors x n \\<subset> older_seniors y n", "using older_seniors_not_self_referential pull_up_senior_older_seniors_less[OF assms(2)]"], ["proof (prove)\nusing this:\n  senior x n \\<in> older_seniors y n\n  senior ?x ?n \\<notin> older_seniors ?x ?n\n  older_seniors x n \\<subseteq> older_seniors y n\n\ngoal (1 subgoal):\n 1. older_seniors x n \\<subset> older_seniors y n", "by blast"], ["proof (state)\nthis:\n  older_seniors x n \\<subset> older_seniors y n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pull_up_senior_older_seniors_le:\n  \"senior x n \\<le> senior y n \\<Longrightarrow> older_seniors x n \\<subseteq> older_seniors y n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. senior x n \\<le> senior y n \\<Longrightarrow>\n    older_seniors x n \\<subseteq> older_seniors y n", "using pull_up_senior_older_seniors pull_up_senior_older_seniors_less"], ["proof (prove)\nusing this:\n  senior ?x ?n = senior ?y ?n \\<Longrightarrow>\n  older_seniors ?x ?n = older_seniors ?y ?n\n  senior ?x ?n < senior ?y ?n \\<Longrightarrow>\n  older_seniors ?x ?n \\<subseteq> older_seniors ?y ?n\n\ngoal (1 subgoal):\n 1. senior x n \\<le> senior y n \\<Longrightarrow>\n    older_seniors x n \\<subseteq> older_seniors y n", "unfolding dual_order.order_iff_strict"], ["proof (prove)\nusing this:\n  senior ?x ?n = senior ?y ?n \\<Longrightarrow>\n  older_seniors ?x ?n = older_seniors ?y ?n\n  senior ?x ?n < senior ?y ?n \\<Longrightarrow>\n  older_seniors ?x ?n \\<subset> older_seniors ?y ?n \\<or>\n  older_seniors ?y ?n = older_seniors ?x ?n\n\ngoal (1 subgoal):\n 1. senior x n < senior y n \\<or> senior y n = senior x n \\<Longrightarrow>\n    older_seniors x n \\<subset> older_seniors y n \\<or>\n    older_seniors y n = older_seniors x n", "by blast"], ["", "lemma push_down_older_seniors_senior:\n  assumes \"\\<not> sink (token_run x n)\"\n  assumes \"\\<not> sink (token_run y n)\"\n  assumes \"older_seniors x n = older_seniors y n\"\n  shows \"senior x n = senior y n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. senior x n = senior y n", "using assms"], ["proof (prove)\nusing this:\n  \\<not> sink (token_run x n)\n  \\<not> sink (token_run y n)\n  older_seniors x n = older_seniors y n\n\ngoal (1 subgoal):\n 1. senior x n = senior y n", "by (cases \"senior x n\" \" senior y n\" rule: linorder_cases) (fast dest: pull_up_senior_older_seniors_less_2)+"], ["", "subsubsection \\<open>Tower Lemma\\<close>"], ["", "lemma older_seniors_tower'':\n  assumes \"x \\<le> n\"\n  assumes \"y \\<le> n\"\n  assumes \"\\<not>sink (token_run x n)\"\n  assumes \"\\<not>sink (token_run y n)\"\n  assumes \"older_seniors x n = older_seniors x (Suc n)\"\n  assumes \"older_seniors y n \\<subseteq> older_seniors x n\"\n  shows \"older_seniors y n = older_seniors y (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. older_seniors y n = older_seniors y (Suc n)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. older_seniors y n \\<subseteq> older_seniors y (Suc n)\n 2. older_seniors y (Suc n) \\<subseteq> older_seniors y n", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. older_seniors y n \\<subseteq> older_seniors y (Suc n)\n 2. older_seniors y (Suc n) \\<subseteq> older_seniors y n", "fix s"], ["proof (state)\ngoal (2 subgoals):\n 1. older_seniors y n \\<subseteq> older_seniors y (Suc n)\n 2. older_seniors y (Suc n) \\<subseteq> older_seniors y n", "assume \"s \\<in> older_seniors y n\" and \"older_seniors y n \\<subset> older_seniors x n\""], ["proof (state)\nthis:\n  s \\<in> older_seniors y n\n  older_seniors y n \\<subset> older_seniors x n\n\ngoal (2 subgoals):\n 1. older_seniors y n \\<subseteq> older_seniors y (Suc n)\n 2. older_seniors y (Suc n) \\<subseteq> older_seniors y n", "hence \"s \\<in> older_seniors x n\""], ["proof (prove)\nusing this:\n  s \\<in> older_seniors y n\n  older_seniors y n \\<subset> older_seniors x n\n\ngoal (1 subgoal):\n 1. s \\<in> older_seniors x n", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> older_seniors y n\n  older_seniors y n \\<subset> older_seniors x n\n  x \\<le> n\n  y \\<le> n\n  \\<not> sink (token_run x n)\n  \\<not> sink (token_run y n)\n  older_seniors x n = older_seniors x (Suc n)\n  older_seniors y n \\<subseteq> older_seniors x n\n\ngoal (1 subgoal):\n 1. s \\<in> older_seniors x n", "by blast"], ["proof (state)\nthis:\n  s \\<in> older_seniors x n\n\ngoal (2 subgoals):\n 1. older_seniors y n \\<subseteq> older_seniors y (Suc n)\n 2. older_seniors y (Suc n) \\<subseteq> older_seniors y n", "hence \"\\<not>sink (token_run s (Suc n))\" and \"\\<exists>z. s = senior z (Suc n)\""], ["proof (prove)\nusing this:\n  s \\<in> older_seniors x n\n\ngoal (1 subgoal):\n 1. \\<not> sink (token_run s (Suc n)) &&& \\<exists>z. s = senior z (Suc n)", "unfolding assms"], ["proof (prove)\nusing this:\n  s \\<in> older_seniors x (Suc n)\n\ngoal (1 subgoal):\n 1. \\<not> sink (token_run s (Suc n)) &&& \\<exists>z. s = senior z (Suc n)", "by simp+"], ["proof (state)\nthis:\n  \\<not> sink (token_run s (Suc n))\n  \\<exists>z. s = senior z (Suc n)\n\ngoal (2 subgoals):\n 1. older_seniors y n \\<subseteq> older_seniors y (Suc n)\n 2. older_seniors y (Suc n) \\<subseteq> older_seniors y n", "moreover"], ["proof (state)\nthis:\n  \\<not> sink (token_run s (Suc n))\n  \\<exists>z. s = senior z (Suc n)\n\ngoal (2 subgoals):\n 1. older_seniors y n \\<subseteq> older_seniors y (Suc n)\n 2. older_seniors y (Suc n) \\<subseteq> older_seniors y n", "have \"senior y n \\<le> senior y (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. senior y n \\<le> senior y (Suc n)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> senior y n \\<le> senior y (Suc n) \\<Longrightarrow> False", "assume \"\\<not>senior y n \\<le> senior y (Suc n)\""], ["proof (state)\nthis:\n  \\<not> senior y n \\<le> senior y (Suc n)\n\ngoal (1 subgoal):\n 1. \\<not> senior y n \\<le> senior y (Suc n) \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<not> senior y n \\<le> senior y (Suc n)\n\ngoal (1 subgoal):\n 1. \\<not> senior y n \\<le> senior y (Suc n) \\<Longrightarrow> False", "have \"senior y n \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. senior y n \\<le> n", "by (metis assms(2) senior_le_token le_trans)"], ["proof (state)\nthis:\n  senior y n \\<le> n\n\ngoal (1 subgoal):\n 1. \\<not> senior y n \\<le> senior y (Suc n) \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> senior y n \\<le> senior y (Suc n)\n  senior y n \\<le> n", "have \"\\<forall>z. senior y n \\<noteq> senior z (Suc n)\""], ["proof (prove)\nusing this:\n  \\<not> senior y n \\<le> senior y (Suc n)\n  senior y n \\<le> n\n\ngoal (1 subgoal):\n 1. \\<forall>z. senior y n \\<noteq> senior z (Suc n)", "using token_run_merge_Suc[unfolded senior_token_run[symmetric], OF \\<open>y \\<le> n\\<close>]"], ["proof (prove)\nusing this:\n  \\<not> senior y n \\<le> senior y (Suc n)\n  senior y n \\<le> n\n  \\<lbrakk>?y \\<le> n; senior y n = senior ?y n\\<rbrakk>\n  \\<Longrightarrow> senior y (Suc n) = senior ?y (Suc n)\n\ngoal (1 subgoal):\n 1. \\<forall>z. senior y n \\<noteq> senior z (Suc n)", "by (metis senior_senior le_refl)"], ["proof (state)\nthis:\n  \\<forall>z. senior y n \\<noteq> senior z (Suc n)\n\ngoal (1 subgoal):\n 1. \\<not> senior y n \\<le> senior y (Suc n) \\<Longrightarrow> False", "hence \"senior y n \\<notin> older_seniors x (Suc n)\""], ["proof (prove)\nusing this:\n  \\<forall>z. senior y n \\<noteq> senior z (Suc n)\n\ngoal (1 subgoal):\n 1. senior y n \\<notin> older_seniors x (Suc n)", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>z. senior y n \\<noteq> senior z (Suc n)\n  x \\<le> n\n  y \\<le> n\n  \\<not> sink (token_run x n)\n  \\<not> sink (token_run y n)\n  older_seniors x n = older_seniors x (Suc n)\n  older_seniors y n \\<subseteq> older_seniors x n\n\ngoal (1 subgoal):\n 1. senior y n \\<notin> older_seniors x (Suc n)", "by simp"], ["proof (state)\nthis:\n  senior y n \\<notin> older_seniors x (Suc n)\n\ngoal (1 subgoal):\n 1. \\<not> senior y n \\<le> senior y (Suc n) \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  senior y n \\<notin> older_seniors x (Suc n)\n\ngoal (1 subgoal):\n 1. \\<not> senior y n \\<le> senior y (Suc n) \\<Longrightarrow> False", "have \"senior y n \\<in> older_seniors x n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. senior y n \\<in> older_seniors x n", "using assms \\<open>older_seniors y n \\<subset> older_seniors x n\\<close> older_seniors_subset_2"], ["proof (prove)\nusing this:\n  x \\<le> n\n  y \\<le> n\n  \\<not> sink (token_run x n)\n  \\<not> sink (token_run y n)\n  older_seniors x n = older_seniors x (Suc n)\n  older_seniors y n \\<subseteq> older_seniors x n\n  older_seniors y n \\<subset> older_seniors x n\n  \\<lbrakk>\\<not> sink (token_run ?x ?n);\n   older_seniors ?x ?n \\<subset> older_seniors ?y ?n\\<rbrakk>\n  \\<Longrightarrow> senior ?x ?n \\<in> older_seniors ?y ?n\n\ngoal (1 subgoal):\n 1. senior y n \\<in> older_seniors x n", "by meson"], ["proof (state)\nthis:\n  senior y n \\<in> older_seniors x n\n\ngoal (1 subgoal):\n 1. \\<not> senior y n \\<le> senior y (Suc n) \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  senior y n \\<notin> older_seniors x (Suc n)\n  senior y n \\<in> older_seniors x n", "show False"], ["proof (prove)\nusing this:\n  senior y n \\<notin> older_seniors x (Suc n)\n  senior y n \\<in> older_seniors x n\n\ngoal (1 subgoal):\n 1. False", "unfolding assms"], ["proof (prove)\nusing this:\n  senior y n \\<notin> older_seniors x (Suc n)\n  senior y n \\<in> older_seniors x (Suc n)\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  senior y n \\<le> senior y (Suc n)\n\ngoal (2 subgoals):\n 1. older_seniors y n \\<subseteq> older_seniors y (Suc n)\n 2. older_seniors y (Suc n) \\<subseteq> older_seniors y n", "hence \"s < senior y (Suc n)\""], ["proof (prove)\nusing this:\n  senior y n \\<le> senior y (Suc n)\n\ngoal (1 subgoal):\n 1. s < senior y (Suc n)", "using \\<open>s \\<in> older_seniors y n\\<close>"], ["proof (prove)\nusing this:\n  senior y n \\<le> senior y (Suc n)\n  s \\<in> older_seniors y n\n\ngoal (1 subgoal):\n 1. s < senior y (Suc n)", "by fastforce"], ["proof (state)\nthis:\n  s < senior y (Suc n)\n\ngoal (2 subgoals):\n 1. older_seniors y n \\<subseteq> older_seniors y (Suc n)\n 2. older_seniors y (Suc n) \\<subseteq> older_seniors y n", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> sink (token_run s (Suc n))\n  \\<exists>z. s = senior z (Suc n)\n  s < senior y (Suc n)", "have \"s \\<in> older_seniors y (Suc n)\""], ["proof (prove)\nusing this:\n  \\<not> sink (token_run s (Suc n))\n  \\<exists>z. s = senior z (Suc n)\n  s < senior y (Suc n)\n\ngoal (1 subgoal):\n 1. s \\<in> older_seniors y (Suc n)", "unfolding older_seniors.simps"], ["proof (prove)\nusing this:\n  \\<not> sink (token_run s (Suc n))\n  \\<exists>z. s = senior z (Suc n)\n  s < senior y (Suc n)\n\ngoal (1 subgoal):\n 1. s \\<in> {s. \\<exists>ya.\n                   s = senior ya (Suc n) \\<and>\n                   s < senior y (Suc n) \\<and>\n                   \\<not> sink (token_run s (Suc n))}", "by blast"], ["proof (state)\nthis:\n  s \\<in> older_seniors y (Suc n)\n\ngoal (2 subgoals):\n 1. older_seniors y n \\<subseteq> older_seniors y (Suc n)\n 2. older_seniors y (Suc n) \\<subseteq> older_seniors y n", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?s2 \\<in> older_seniors y n;\n   older_seniors y n \\<subset> older_seniors x n\\<rbrakk>\n  \\<Longrightarrow> ?s2 \\<in> older_seniors y (Suc n)\n\ngoal (2 subgoals):\n 1. older_seniors y n \\<subseteq> older_seniors y (Suc n)\n 2. older_seniors y (Suc n) \\<subseteq> older_seniors y n", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>?s2 \\<in> older_seniors y n;\n   older_seniors y n \\<subset> older_seniors x n\\<rbrakk>\n  \\<Longrightarrow> ?s2 \\<in> older_seniors y (Suc n)\n\ngoal (2 subgoals):\n 1. older_seniors y n \\<subseteq> older_seniors y (Suc n)\n 2. older_seniors y (Suc n) \\<subseteq> older_seniors y n", "{"], ["proof (state)\nthis:\n  \\<lbrakk>?s2 \\<in> older_seniors y n;\n   older_seniors y n \\<subset> older_seniors x n\\<rbrakk>\n  \\<Longrightarrow> ?s2 \\<in> older_seniors y (Suc n)\n\ngoal (2 subgoals):\n 1. older_seniors y n \\<subseteq> older_seniors y (Suc n)\n 2. older_seniors y (Suc n) \\<subseteq> older_seniors y n", "fix s"], ["proof (state)\ngoal (2 subgoals):\n 1. older_seniors y n \\<subseteq> older_seniors y (Suc n)\n 2. older_seniors y (Suc n) \\<subseteq> older_seniors y n", "assume \"s \\<in> older_seniors y n\" and \"older_seniors y n = older_seniors x n\""], ["proof (state)\nthis:\n  s \\<in> older_seniors y n\n  older_seniors y n = older_seniors x n\n\ngoal (2 subgoals):\n 1. older_seniors y n \\<subseteq> older_seniors y (Suc n)\n 2. older_seniors y (Suc n) \\<subseteq> older_seniors y n", "moreover"], ["proof (state)\nthis:\n  s \\<in> older_seniors y n\n  older_seniors y n = older_seniors x n\n\ngoal (2 subgoals):\n 1. older_seniors y n \\<subseteq> older_seniors y (Suc n)\n 2. older_seniors y (Suc n) \\<subseteq> older_seniors y n", "hence \"senior y n = senior x n\""], ["proof (prove)\nusing this:\n  s \\<in> older_seniors y n\n  older_seniors y n = older_seniors x n\n\ngoal (1 subgoal):\n 1. senior y n = senior x n", "using assms(3-4) push_down_older_seniors_senior"], ["proof (prove)\nusing this:\n  s \\<in> older_seniors y n\n  older_seniors y n = older_seniors x n\n  \\<not> sink (token_run x n)\n  \\<not> sink (token_run y n)\n  \\<lbrakk>\\<not> sink (token_run ?x ?n); \\<not> sink (token_run ?y ?n);\n   older_seniors ?x ?n = older_seniors ?y ?n\\<rbrakk>\n  \\<Longrightarrow> senior ?x ?n = senior ?y ?n\n\ngoal (1 subgoal):\n 1. senior y n = senior x n", "by blast"], ["proof (state)\nthis:\n  senior y n = senior x n\n\ngoal (2 subgoals):\n 1. older_seniors y n \\<subseteq> older_seniors y (Suc n)\n 2. older_seniors y (Suc n) \\<subseteq> older_seniors y n", "hence \"senior y (Suc n) = senior x (Suc n)\""], ["proof (prove)\nusing this:\n  senior y n = senior x n\n\ngoal (1 subgoal):\n 1. senior y (Suc n) = senior x (Suc n)", "using token_run_merge_Suc[OF assms(2,1)]"], ["proof (prove)\nusing this:\n  senior y n = senior x n\n  token_run y n = token_run x n \\<Longrightarrow>\n  token_run y (Suc n) = token_run x (Suc n)\n\ngoal (1 subgoal):\n 1. senior y (Suc n) = senior x (Suc n)", "unfolding senior_token_run"], ["proof (prove)\nusing this:\n  token_run y n = token_run x n\n  token_run y n = token_run x n \\<Longrightarrow>\n  token_run y (Suc n) = token_run x (Suc n)\n\ngoal (1 subgoal):\n 1. token_run y (Suc n) = token_run x (Suc n)", "by blast"], ["proof (state)\nthis:\n  senior y (Suc n) = senior x (Suc n)\n\ngoal (2 subgoals):\n 1. older_seniors y n \\<subseteq> older_seniors y (Suc n)\n 2. older_seniors y (Suc n) \\<subseteq> older_seniors y n", "ultimately"], ["proof (chain)\npicking this:\n  s \\<in> older_seniors y n\n  older_seniors y n = older_seniors x n\n  senior y (Suc n) = senior x (Suc n)", "have \"s \\<in> older_seniors y (Suc n)\""], ["proof (prove)\nusing this:\n  s \\<in> older_seniors y n\n  older_seniors y n = older_seniors x n\n  senior y (Suc n) = senior x (Suc n)\n\ngoal (1 subgoal):\n 1. s \\<in> older_seniors y (Suc n)", "by (metis assms(5) older_seniors_senior_simp)"], ["proof (state)\nthis:\n  s \\<in> older_seniors y (Suc n)\n\ngoal (2 subgoals):\n 1. older_seniors y n \\<subseteq> older_seniors y (Suc n)\n 2. older_seniors y (Suc n) \\<subseteq> older_seniors y n", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?s2 \\<in> older_seniors y n;\n   older_seniors y n = older_seniors x n\\<rbrakk>\n  \\<Longrightarrow> ?s2 \\<in> older_seniors y (Suc n)\n\ngoal (2 subgoals):\n 1. older_seniors y n \\<subseteq> older_seniors y (Suc n)\n 2. older_seniors y (Suc n) \\<subseteq> older_seniors y n", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>?s2 \\<in> older_seniors y n;\n   older_seniors y n \\<subset> older_seniors x n\\<rbrakk>\n  \\<Longrightarrow> ?s2 \\<in> older_seniors y (Suc n)\n  \\<lbrakk>?s2 \\<in> older_seniors y n;\n   older_seniors y n = older_seniors x n\\<rbrakk>\n  \\<Longrightarrow> ?s2 \\<in> older_seniors y (Suc n)", "show \"older_seniors y n \\<subseteq> older_seniors y (Suc n)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?s2 \\<in> older_seniors y n;\n   older_seniors y n \\<subset> older_seniors x n\\<rbrakk>\n  \\<Longrightarrow> ?s2 \\<in> older_seniors y (Suc n)\n  \\<lbrakk>?s2 \\<in> older_seniors y n;\n   older_seniors y n = older_seniors x n\\<rbrakk>\n  \\<Longrightarrow> ?s2 \\<in> older_seniors y (Suc n)\n\ngoal (1 subgoal):\n 1. older_seniors y n \\<subseteq> older_seniors y (Suc n)", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s2 \\<in> older_seniors y n;\n   older_seniors y n \\<subset> older_seniors x n\\<rbrakk>\n  \\<Longrightarrow> ?s2 \\<in> older_seniors y (Suc n)\n  \\<lbrakk>?s2 \\<in> older_seniors y n;\n   older_seniors y n = older_seniors x n\\<rbrakk>\n  \\<Longrightarrow> ?s2 \\<in> older_seniors y (Suc n)\n  x \\<le> n\n  y \\<le> n\n  \\<not> sink (token_run x n)\n  \\<not> sink (token_run y n)\n  older_seniors x n = older_seniors x (Suc n)\n  older_seniors y n \\<subseteq> older_seniors x n\n\ngoal (1 subgoal):\n 1. older_seniors y n \\<subseteq> older_seniors y (Suc n)", "by blast"], ["proof (state)\nthis:\n  older_seniors y n \\<subseteq> older_seniors y (Suc n)\n\ngoal (1 subgoal):\n 1. older_seniors y (Suc n) \\<subseteq> older_seniors y n", "qed (metis older_seniors_monotonic_Suc assms(2))"], ["", "lemma older_seniors_tower''2:\n  assumes \"x \\<le> n\"\n  assumes \"y \\<le> n\"\n  assumes \"\\<not>sink (token_run x (n + m))\"\n  assumes \"\\<not>sink (token_run y (n + m))\"\n  assumes \"older_seniors x n = older_seniors x (n + m)\"\n  assumes \"older_seniors y n \\<subseteq> older_seniors x n\"\n  shows \"older_seniors y n = older_seniors y (n + m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. older_seniors y n = older_seniors y (n + m)", "using assms"], ["proof (prove)\nusing this:\n  x \\<le> n\n  y \\<le> n\n  \\<not> sink (token_run x (n + m))\n  \\<not> sink (token_run y (n + m))\n  older_seniors x n = older_seniors x (n + m)\n  older_seniors y n \\<subseteq> older_seniors x n\n\ngoal (1 subgoal):\n 1. older_seniors y n = older_seniors y (n + m)", "proof (induction m arbitrary: n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>x \\<le> n; y \\<le> n; \\<not> sink (token_run x (n + 0));\n        \\<not> sink (token_run y (n + 0));\n        older_seniors x n = older_seniors x (n + 0);\n        older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (n + 0)\n 2. \\<And>m n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>x \\<le> n; y \\<le> n;\n                    \\<not> sink (token_run x (n + m));\n                    \\<not> sink (token_run y (n + m));\n                    older_seniors x n = older_seniors x (n + m);\n                    older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n                   \\<Longrightarrow> older_seniors y n =\n                                     older_seniors y (n + m);\n        x \\<le> n; y \\<le> n; \\<not> sink (token_run x (n + Suc m));\n        \\<not> sink (token_run y (n + Suc m));\n        older_seniors x n = older_seniors x (n + Suc m);\n        older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (n + Suc m)", "case (Suc m)"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<le> ?n; y \\<le> ?n; \\<not> sink (token_run x (?n + m));\n   \\<not> sink (token_run y (?n + m));\n   older_seniors x ?n = older_seniors x (?n + m);\n   older_seniors y ?n \\<subseteq> older_seniors x ?n\\<rbrakk>\n  \\<Longrightarrow> older_seniors y ?n = older_seniors y (?n + m)\n  x \\<le> n\n  y \\<le> n\n  \\<not> sink (token_run x (n + Suc m))\n  \\<not> sink (token_run y (n + Suc m))\n  older_seniors x n = older_seniors x (n + Suc m)\n  older_seniors y n \\<subseteq> older_seniors x n\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>x \\<le> n; y \\<le> n; \\<not> sink (token_run x (n + 0));\n        \\<not> sink (token_run y (n + 0));\n        older_seniors x n = older_seniors x (n + 0);\n        older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (n + 0)\n 2. \\<And>m n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>x \\<le> n; y \\<le> n;\n                    \\<not> sink (token_run x (n + m));\n                    \\<not> sink (token_run y (n + m));\n                    older_seniors x n = older_seniors x (n + m);\n                    older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n                   \\<Longrightarrow> older_seniors y n =\n                                     older_seniors y (n + m);\n        x \\<le> n; y \\<le> n; \\<not> sink (token_run x (n + Suc m));\n        \\<not> sink (token_run y (n + Suc m));\n        older_seniors x n = older_seniors x (n + Suc m);\n        older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (n + Suc m)", "have \"\\<not>sink (token_run x (n + m))\" and \"\\<not>sink (token_run y (n + m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> sink (token_run x (n + m)) &&& \\<not> sink (token_run y (n + m))", "using \\<open>\\<not>sink (token_run x (n + Suc m))\\<close> \\<open>\\<not>sink (token_run y (n + Suc m))\\<close>"], ["proof (prove)\nusing this:\n  \\<not> sink (token_run x (n + Suc m))\n  \\<not> sink (token_run y (n + Suc m))\n\ngoal (1 subgoal):\n 1. \\<not> sink (token_run x (n + m)) &&& \\<not> sink (token_run y (n + m))", "using token_stays_in_sink[of _ _ \"n + m\" 1]"], ["proof (prove)\nusing this:\n  \\<not> sink (token_run x (n + Suc m))\n  \\<not> sink (token_run y (n + Suc m))\n  \\<lbrakk>sink ?q; token_run ?x (n + m) = ?q\\<rbrakk>\n  \\<Longrightarrow> token_run ?x (n + m + 1) = ?q\n\ngoal (1 subgoal):\n 1. \\<not> sink (token_run x (n + m)) &&& \\<not> sink (token_run y (n + m))", "unfolding Suc_eq_plus1 add.assoc[symmetric]"], ["proof (prove)\nusing this:\n  \\<not> sink (token_run x (n + m + 1))\n  \\<not> sink (token_run y (n + m + 1))\n  \\<lbrakk>sink ?q; token_run ?x (n + m) = ?q\\<rbrakk>\n  \\<Longrightarrow> token_run ?x (n + m + 1) = ?q\n\ngoal (1 subgoal):\n 1. \\<not> sink (token_run x (n + m)) &&& \\<not> sink (token_run y (n + m))", "by metis+"], ["proof (state)\nthis:\n  \\<not> sink (token_run x (n + m))\n  \\<not> sink (token_run y (n + m))\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>x \\<le> n; y \\<le> n; \\<not> sink (token_run x (n + 0));\n        \\<not> sink (token_run y (n + 0));\n        older_seniors x n = older_seniors x (n + 0);\n        older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (n + 0)\n 2. \\<And>m n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>x \\<le> n; y \\<le> n;\n                    \\<not> sink (token_run x (n + m));\n                    \\<not> sink (token_run y (n + m));\n                    older_seniors x n = older_seniors x (n + m);\n                    older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n                   \\<Longrightarrow> older_seniors y n =\n                                     older_seniors y (n + m);\n        x \\<le> n; y \\<le> n; \\<not> sink (token_run x (n + Suc m));\n        \\<not> sink (token_run y (n + Suc m));\n        older_seniors x n = older_seniors x (n + Suc m);\n        older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (n + Suc m)", "moreover"], ["proof (state)\nthis:\n  \\<not> sink (token_run x (n + m))\n  \\<not> sink (token_run y (n + m))\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>x \\<le> n; y \\<le> n; \\<not> sink (token_run x (n + 0));\n        \\<not> sink (token_run y (n + 0));\n        older_seniors x n = older_seniors x (n + 0);\n        older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (n + 0)\n 2. \\<And>m n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>x \\<le> n; y \\<le> n;\n                    \\<not> sink (token_run x (n + m));\n                    \\<not> sink (token_run y (n + m));\n                    older_seniors x n = older_seniors x (n + m);\n                    older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n                   \\<Longrightarrow> older_seniors y n =\n                                     older_seniors y (n + m);\n        x \\<le> n; y \\<le> n; \\<not> sink (token_run x (n + Suc m));\n        \\<not> sink (token_run y (n + Suc m));\n        older_seniors x n = older_seniors x (n + Suc m);\n        older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (n + Suc m)", "have \"older_seniors x n = older_seniors x (n + m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. older_seniors x n = older_seniors x (n + m)", "using Suc.prems(5) older_seniors_stable[OF \\<open>x \\<le> n\\<close>]"], ["proof (prove)\nusing this:\n  older_seniors x n = older_seniors x (n + Suc m)\n  older_seniors x n = older_seniors x (n + ?m + ?m') \\<Longrightarrow>\n  older_seniors x n = older_seniors x (n + ?m)\n\ngoal (1 subgoal):\n 1. older_seniors x n = older_seniors x (n + m)", "unfolding Suc_eq_plus1 add.assoc"], ["proof (prove)\nusing this:\n  older_seniors x n = older_seniors x (n + (m + 1))\n  older_seniors x n = older_seniors x (n + (?m + ?m')) \\<Longrightarrow>\n  older_seniors x n = older_seniors x (n + ?m)\n\ngoal (1 subgoal):\n 1. older_seniors x n = older_seniors x (n + m)", "by blast"], ["proof (state)\nthis:\n  older_seniors x n = older_seniors x (n + m)\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>x \\<le> n; y \\<le> n; \\<not> sink (token_run x (n + 0));\n        \\<not> sink (token_run y (n + 0));\n        older_seniors x n = older_seniors x (n + 0);\n        older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (n + 0)\n 2. \\<And>m n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>x \\<le> n; y \\<le> n;\n                    \\<not> sink (token_run x (n + m));\n                    \\<not> sink (token_run y (n + m));\n                    older_seniors x n = older_seniors x (n + m);\n                    older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n                   \\<Longrightarrow> older_seniors y n =\n                                     older_seniors y (n + m);\n        x \\<le> n; y \\<le> n; \\<not> sink (token_run x (n + Suc m));\n        \\<not> sink (token_run y (n + Suc m));\n        older_seniors x n = older_seniors x (n + Suc m);\n        older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (n + Suc m)", "moreover"], ["proof (state)\nthis:\n  older_seniors x n = older_seniors x (n + m)\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>x \\<le> n; y \\<le> n; \\<not> sink (token_run x (n + 0));\n        \\<not> sink (token_run y (n + 0));\n        older_seniors x n = older_seniors x (n + 0);\n        older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (n + 0)\n 2. \\<And>m n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>x \\<le> n; y \\<le> n;\n                    \\<not> sink (token_run x (n + m));\n                    \\<not> sink (token_run y (n + m));\n                    older_seniors x n = older_seniors x (n + m);\n                    older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n                   \\<Longrightarrow> older_seniors y n =\n                                     older_seniors y (n + m);\n        x \\<le> n; y \\<le> n; \\<not> sink (token_run x (n + Suc m));\n        \\<not> sink (token_run y (n + Suc m));\n        older_seniors x n = older_seniors x (n + Suc m);\n        older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (n + Suc m)", "hence \"older_seniors x (n + m) = older_seniors x (Suc (n + m))\""], ["proof (prove)\nusing this:\n  older_seniors x n = older_seniors x (n + m)\n\ngoal (1 subgoal):\n 1. older_seniors x (n + m) = older_seniors x (Suc (n + m))", "unfolding Suc.prems add_Suc_right"], ["proof (prove)\nusing this:\n  older_seniors x (Suc (n + m)) = older_seniors x (n + m)\n\ngoal (1 subgoal):\n 1. older_seniors x (n + m) = older_seniors x (Suc (n + m))", ".."], ["proof (state)\nthis:\n  older_seniors x (n + m) = older_seniors x (Suc (n + m))\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>x \\<le> n; y \\<le> n; \\<not> sink (token_run x (n + 0));\n        \\<not> sink (token_run y (n + 0));\n        older_seniors x n = older_seniors x (n + 0);\n        older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (n + 0)\n 2. \\<And>m n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>x \\<le> n; y \\<le> n;\n                    \\<not> sink (token_run x (n + m));\n                    \\<not> sink (token_run y (n + m));\n                    older_seniors x n = older_seniors x (n + m);\n                    older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n                   \\<Longrightarrow> older_seniors y n =\n                                     older_seniors y (n + m);\n        x \\<le> n; y \\<le> n; \\<not> sink (token_run x (n + Suc m));\n        \\<not> sink (token_run y (n + Suc m));\n        older_seniors x n = older_seniors x (n + Suc m);\n        older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (n + Suc m)", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> sink (token_run x (n + m))\n  \\<not> sink (token_run y (n + m))\n  older_seniors x n = older_seniors x (n + m)\n  older_seniors x (n + m) = older_seniors x (Suc (n + m))", "have \"older_seniors y n = older_seniors y (n + m)\""], ["proof (prove)\nusing this:\n  \\<not> sink (token_run x (n + m))\n  \\<not> sink (token_run y (n + m))\n  older_seniors x n = older_seniors x (n + m)\n  older_seniors x (n + m) = older_seniors x (Suc (n + m))\n\ngoal (1 subgoal):\n 1. older_seniors y n = older_seniors y (n + m)", "using Suc"], ["proof (prove)\nusing this:\n  \\<not> sink (token_run x (n + m))\n  \\<not> sink (token_run y (n + m))\n  older_seniors x n = older_seniors x (n + m)\n  older_seniors x (n + m) = older_seniors x (Suc (n + m))\n  \\<lbrakk>x \\<le> ?n; y \\<le> ?n; \\<not> sink (token_run x (?n + m));\n   \\<not> sink (token_run y (?n + m));\n   older_seniors x ?n = older_seniors x (?n + m);\n   older_seniors y ?n \\<subseteq> older_seniors x ?n\\<rbrakk>\n  \\<Longrightarrow> older_seniors y ?n = older_seniors y (?n + m)\n  x \\<le> n\n  y \\<le> n\n  \\<not> sink (token_run x (n + Suc m))\n  \\<not> sink (token_run y (n + Suc m))\n  older_seniors x n = older_seniors x (n + Suc m)\n  older_seniors y n \\<subseteq> older_seniors x n\n\ngoal (1 subgoal):\n 1. older_seniors y n = older_seniors y (n + m)", "by meson"], ["proof (state)\nthis:\n  older_seniors y n = older_seniors y (n + m)\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>x \\<le> n; y \\<le> n; \\<not> sink (token_run x (n + 0));\n        \\<not> sink (token_run y (n + 0));\n        older_seniors x n = older_seniors x (n + 0);\n        older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (n + 0)\n 2. \\<And>m n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>x \\<le> n; y \\<le> n;\n                    \\<not> sink (token_run x (n + m));\n                    \\<not> sink (token_run y (n + m));\n                    older_seniors x n = older_seniors x (n + m);\n                    older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n                   \\<Longrightarrow> older_seniors y n =\n                                     older_seniors y (n + m);\n        x \\<le> n; y \\<le> n; \\<not> sink (token_run x (n + Suc m));\n        \\<not> sink (token_run y (n + Suc m));\n        older_seniors x n = older_seniors x (n + Suc m);\n        older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (n + Suc m)", "also"], ["proof (state)\nthis:\n  older_seniors y n = older_seniors y (n + m)\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>x \\<le> n; y \\<le> n; \\<not> sink (token_run x (n + 0));\n        \\<not> sink (token_run y (n + 0));\n        older_seniors x n = older_seniors x (n + 0);\n        older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (n + 0)\n 2. \\<And>m n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>x \\<le> n; y \\<le> n;\n                    \\<not> sink (token_run x (n + m));\n                    \\<not> sink (token_run y (n + m));\n                    older_seniors x n = older_seniors x (n + m);\n                    older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n                   \\<Longrightarrow> older_seniors y n =\n                                     older_seniors y (n + m);\n        x \\<le> n; y \\<le> n; \\<not> sink (token_run x (n + Suc m));\n        \\<not> sink (token_run y (n + Suc m));\n        older_seniors x n = older_seniors x (n + Suc m);\n        older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (n + Suc m)", "have \"\\<dots> = older_seniors y (Suc (n + m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. older_seniors y (n + m) = older_seniors y (Suc (n + m))", "using older_seniors_tower''[OF _ _ \\<open>\\<not>sink (token_run x (n + m))\\<close> \\<open>\\<not>sink (token_run y (n + m))\\<close> \\<open>older_seniors x (n + m) = older_seniors x (Suc (n + m))\\<close>] Suc"], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<le> n + m; y \\<le> n + m;\n   older_seniors y (n + m) \\<subseteq> older_seniors x (n + m)\\<rbrakk>\n  \\<Longrightarrow> older_seniors y (n + m) = older_seniors y (Suc (n + m))\n  \\<lbrakk>x \\<le> ?n; y \\<le> ?n; \\<not> sink (token_run x (?n + m));\n   \\<not> sink (token_run y (?n + m));\n   older_seniors x ?n = older_seniors x (?n + m);\n   older_seniors y ?n \\<subseteq> older_seniors x ?n\\<rbrakk>\n  \\<Longrightarrow> older_seniors y ?n = older_seniors y (?n + m)\n  x \\<le> n\n  y \\<le> n\n  \\<not> sink (token_run x (n + Suc m))\n  \\<not> sink (token_run y (n + Suc m))\n  older_seniors x n = older_seniors x (n + Suc m)\n  older_seniors y n \\<subseteq> older_seniors x n\n\ngoal (1 subgoal):\n 1. older_seniors y (n + m) = older_seniors y (Suc (n + m))", "by (metis \\<open>older_seniors x n = older_seniors x (n + m)\\<close> add.commute add.left_commute calculation le_iff_add)"], ["proof (state)\nthis:\n  older_seniors y (n + m) = older_seniors y (Suc (n + m))\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>x \\<le> n; y \\<le> n; \\<not> sink (token_run x (n + 0));\n        \\<not> sink (token_run y (n + 0));\n        older_seniors x n = older_seniors x (n + 0);\n        older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (n + 0)\n 2. \\<And>m n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>x \\<le> n; y \\<le> n;\n                    \\<not> sink (token_run x (n + m));\n                    \\<not> sink (token_run y (n + m));\n                    older_seniors x n = older_seniors x (n + m);\n                    older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n                   \\<Longrightarrow> older_seniors y n =\n                                     older_seniors y (n + m);\n        x \\<le> n; y \\<le> n; \\<not> sink (token_run x (n + Suc m));\n        \\<not> sink (token_run y (n + Suc m));\n        older_seniors x n = older_seniors x (n + Suc m);\n        older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (n + Suc m)", "finally"], ["proof (chain)\npicking this:\n  older_seniors y n = older_seniors y (Suc (n + m))", "show ?case"], ["proof (prove)\nusing this:\n  older_seniors y n = older_seniors y (Suc (n + m))\n\ngoal (1 subgoal):\n 1. older_seniors y n = older_seniors y (n + Suc m)", "unfolding add_Suc_right"], ["proof (prove)\nusing this:\n  older_seniors y n = older_seniors y (Suc (n + m))\n\ngoal (1 subgoal):\n 1. older_seniors y n = older_seniors y (Suc (n + m))", "."], ["proof (state)\nthis:\n  older_seniors y n = older_seniors y (n + Suc m)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>x \\<le> n; y \\<le> n; \\<not> sink (token_run x (n + 0));\n        \\<not> sink (token_run y (n + 0));\n        older_seniors x n = older_seniors x (n + 0);\n        older_seniors y n \\<subseteq> older_seniors x n\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (n + 0)", "qed simp"], ["", "lemma older_seniors_tower':\n  assumes \"y \\<in> older_seniors x n\"\n  assumes \"older_seniors x n = older_seniors x (Suc n)\"\n  shows \"older_seniors y n = older_seniors y (Suc n)\"\n  (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. older_seniors y n = older_seniors y (Suc n)", "using assms"], ["proof (prove)\nusing this:\n  y \\<in> older_seniors x n\n  older_seniors x n = older_seniors x (Suc n)\n\ngoal (1 subgoal):\n 1. older_seniors y n = older_seniors y (Suc n)", "proof (induction \"card (older_seniors x n)\" arbitrary: x y)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>0 = card (older_seniors x n); y \\<in> older_seniors x n;\n        older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (Suc n)\n 2. \\<And>xa x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>xa = card (older_seniors x n);\n                    y \\<in> older_seniors x n;\n                    older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n                   \\<Longrightarrow> older_seniors y n =\n                                     older_seniors y (Suc n);\n        Suc xa = card (older_seniors x n); y \\<in> older_seniors x n;\n        older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (Suc n)", "case 0"], ["proof (state)\nthis:\n  0 = card (older_seniors x n)\n  y \\<in> older_seniors x n\n  older_seniors x n = older_seniors x (Suc n)\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>0 = card (older_seniors x n); y \\<in> older_seniors x n;\n        older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (Suc n)\n 2. \\<And>xa x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>xa = card (older_seniors x n);\n                    y \\<in> older_seniors x n;\n                    older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n                   \\<Longrightarrow> older_seniors y n =\n                                     older_seniors y (Suc n);\n        Suc xa = card (older_seniors x n); y \\<in> older_seniors x n;\n        older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (Suc n)", "hence \"older_seniors x n = {}\""], ["proof (prove)\nusing this:\n  0 = card (older_seniors x n)\n  y \\<in> older_seniors x n\n  older_seniors x n = older_seniors x (Suc n)\n\ngoal (1 subgoal):\n 1. older_seniors x n = {}", "using older_seniors_finite card_eq_0_iff"], ["proof (prove)\nusing this:\n  0 = card (older_seniors x n)\n  y \\<in> older_seniors x n\n  older_seniors x n = older_seniors x (Suc n)\n  finite (older_seniors ?x ?n)\n  (card ?A = 0) = (?A = {} \\<or> infinite ?A)\n\ngoal (1 subgoal):\n 1. older_seniors x n = {}", "by metis"], ["proof (state)\nthis:\n  older_seniors x n = {}\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>0 = card (older_seniors x n); y \\<in> older_seniors x n;\n        older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (Suc n)\n 2. \\<And>xa x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>xa = card (older_seniors x n);\n                    y \\<in> older_seniors x n;\n                    older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n                   \\<Longrightarrow> older_seniors y n =\n                                     older_seniors y (Suc n);\n        Suc xa = card (older_seniors x n); y \\<in> older_seniors x n;\n        older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (Suc n)", "thus ?case"], ["proof (prove)\nusing this:\n  older_seniors x n = {}\n\ngoal (1 subgoal):\n 1. older_seniors y n = older_seniors y (Suc n)", "using \"0.prems\""], ["proof (prove)\nusing this:\n  older_seniors x n = {}\n  y \\<in> older_seniors x n\n  older_seniors x n = older_seniors x (Suc n)\n\ngoal (1 subgoal):\n 1. older_seniors y n = older_seniors y (Suc n)", "by blast"], ["proof (state)\nthis:\n  older_seniors y n = older_seniors y (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>xa x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>xa = card (older_seniors x n);\n                    y \\<in> older_seniors x n;\n                    older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n                   \\<Longrightarrow> older_seniors y n =\n                                     older_seniors y (Suc n);\n        Suc xa = card (older_seniors x n); y \\<in> older_seniors x n;\n        older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (Suc n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>xa = card (older_seniors x n);\n                    y \\<in> older_seniors x n;\n                    older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n                   \\<Longrightarrow> older_seniors y n =\n                                     older_seniors y (Suc n);\n        Suc xa = card (older_seniors x n); y \\<in> older_seniors x n;\n        older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (Suc n)", "case (Suc c)"], ["proof (state)\nthis:\n  \\<lbrakk>c = card (older_seniors ?x n); ?y \\<in> older_seniors ?x n;\n   older_seniors ?x n = older_seniors ?x (Suc n)\\<rbrakk>\n  \\<Longrightarrow> older_seniors ?y n = older_seniors ?y (Suc n)\n  Suc c = card (older_seniors x n)\n  y \\<in> older_seniors x n\n  older_seniors x n = older_seniors x (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>xa x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>xa = card (older_seniors x n);\n                    y \\<in> older_seniors x n;\n                    older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n                   \\<Longrightarrow> older_seniors y n =\n                                     older_seniors y (Suc n);\n        Suc xa = card (older_seniors x n); y \\<in> older_seniors x n;\n        older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (Suc n)", "let ?os = \"older_seniors x n\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>xa = card (older_seniors x n);\n                    y \\<in> older_seniors x n;\n                    older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n                   \\<Longrightarrow> older_seniors y n =\n                                     older_seniors y (Suc n);\n        Suc xa = card (older_seniors x n); y \\<in> older_seniors x n;\n        older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (Suc n)", "have \"?os \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. older_seniors x n \\<noteq> {}", "using Suc.prems(1)"], ["proof (prove)\nusing this:\n  y \\<in> older_seniors x n\n\ngoal (1 subgoal):\n 1. older_seniors x n \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  older_seniors x n \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>xa x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>xa = card (older_seniors x n);\n                    y \\<in> older_seniors x n;\n                    older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n                   \\<Longrightarrow> older_seniors y n =\n                                     older_seniors y (Suc n);\n        Suc xa = card (older_seniors x n); y \\<in> older_seniors x n;\n        older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (Suc n)", "hence \"y = Max ?os \\<or> y \\<in> older_seniors (Max ?os) n\""], ["proof (prove)\nusing this:\n  older_seniors x n \\<noteq> {}\n\ngoal (1 subgoal):\n 1. y = Max (older_seniors x n) \\<or>\n    y \\<in> older_seniors (Max (older_seniors x n)) n", "using Suc.prems(1) older_seniors_recursive"], ["proof (prove)\nusing this:\n  older_seniors x n \\<noteq> {}\n  y \\<in> older_seniors x n\n  older_seniors ?x ?n \\<noteq> {} \\<Longrightarrow>\n  older_seniors ?x ?n =\n  {Max (older_seniors ?x ?n)} \\<union>\n  older_seniors (Max (older_seniors ?x ?n)) ?n\n\ngoal (1 subgoal):\n 1. y = Max (older_seniors x n) \\<or>\n    y \\<in> older_seniors (Max (older_seniors x n)) n", "by blast"], ["proof (state)\nthis:\n  y = Max (older_seniors x n) \\<or>\n  y \\<in> older_seniors (Max (older_seniors x n)) n\n\ngoal (1 subgoal):\n 1. \\<And>xa x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>xa = card (older_seniors x n);\n                    y \\<in> older_seniors x n;\n                    older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n                   \\<Longrightarrow> older_seniors y n =\n                                     older_seniors y (Suc n);\n        Suc xa = card (older_seniors x n); y \\<in> older_seniors x n;\n        older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (Suc n)", "moreover"], ["proof (state)\nthis:\n  y = Max (older_seniors x n) \\<or>\n  y \\<in> older_seniors (Max (older_seniors x n)) n\n\ngoal (1 subgoal):\n 1. \\<And>xa x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>xa = card (older_seniors x n);\n                    y \\<in> older_seniors x n;\n                    older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n                   \\<Longrightarrow> older_seniors y n =\n                                     older_seniors y (Suc n);\n        Suc xa = card (older_seniors x n); y \\<in> older_seniors x n;\n        older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (Suc n)", "have \"older_seniors (Max ?os) n = older_seniors (Max ?os) (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. older_seniors (Max (older_seniors x n)) n =\n    older_seniors (Max (older_seniors x n)) (Suc n)", "using Suc.prems(2) older_seniors_recursive \\<open>?os \\<noteq> {}\\<close> older_seniors_not_self_referential_2"], ["proof (prove)\nusing this:\n  older_seniors x n = older_seniors x (Suc n)\n  older_seniors ?x ?n \\<noteq> {} \\<Longrightarrow>\n  older_seniors ?x ?n =\n  {Max (older_seniors ?x ?n)} \\<union>\n  older_seniors (Max (older_seniors ?x ?n)) ?n\n  older_seniors x n \\<noteq> {}\n  ?x \\<notin> older_seniors ?x ?n\n\ngoal (1 subgoal):\n 1. older_seniors (Max (older_seniors x n)) n =\n    older_seniors (Max (older_seniors x n)) (Suc n)", "by (metis Un_empty_left Un_insert_left insert_ident)"], ["proof (state)\nthis:\n  older_seniors (Max (older_seniors x n)) n =\n  older_seniors (Max (older_seniors x n)) (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>xa x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>xa = card (older_seniors x n);\n                    y \\<in> older_seniors x n;\n                    older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n                   \\<Longrightarrow> older_seniors y n =\n                                     older_seniors y (Suc n);\n        Suc xa = card (older_seniors x n); y \\<in> older_seniors x n;\n        older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (Suc n)", "moreover"], ["proof (state)\nthis:\n  older_seniors (Max (older_seniors x n)) n =\n  older_seniors (Max (older_seniors x n)) (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>xa x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>xa = card (older_seniors x n);\n                    y \\<in> older_seniors x n;\n                    older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n                   \\<Longrightarrow> older_seniors y n =\n                                     older_seniors y (Suc n);\n        Suc xa = card (older_seniors x n); y \\<in> older_seniors x n;\n        older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (Suc n)", "{"], ["proof (state)\nthis:\n  older_seniors (Max (older_seniors x n)) n =\n  older_seniors (Max (older_seniors x n)) (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>xa x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>xa = card (older_seniors x n);\n                    y \\<in> older_seniors x n;\n                    older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n                   \\<Longrightarrow> older_seniors y n =\n                                     older_seniors y (Suc n);\n        Suc xa = card (older_seniors x n); y \\<in> older_seniors x n;\n        older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (Suc n)", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>xa = card (older_seniors x n);\n                    y \\<in> older_seniors x n;\n                    older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n                   \\<Longrightarrow> older_seniors y n =\n                                     older_seniors y (Suc n);\n        Suc xa = card (older_seniors x n); y \\<in> older_seniors x n;\n        older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (Suc n)", "assume \"s \\<in> older_seniors (Max ?os) n\""], ["proof (state)\nthis:\n  s \\<in> older_seniors (Max (older_seniors x n)) n\n\ngoal (1 subgoal):\n 1. \\<And>xa x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>xa = card (older_seniors x n);\n                    y \\<in> older_seniors x n;\n                    older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n                   \\<Longrightarrow> older_seniors y n =\n                                     older_seniors y (Suc n);\n        Suc xa = card (older_seniors x n); y \\<in> older_seniors x n;\n        older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (Suc n)", "moreover"], ["proof (state)\nthis:\n  s \\<in> older_seniors (Max (older_seniors x n)) n\n\ngoal (1 subgoal):\n 1. \\<And>xa x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>xa = card (older_seniors x n);\n                    y \\<in> older_seniors x n;\n                    older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n                   \\<Longrightarrow> older_seniors y n =\n                                     older_seniors y (Suc n);\n        Suc xa = card (older_seniors x n); y \\<in> older_seniors x n;\n        older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (Suc n)", "from Suc.hyps(2)"], ["proof (chain)\npicking this:\n  Suc c = card (older_seniors x n)", "have \"card (older_seniors (Max ?os) n) = c\""], ["proof (prove)\nusing this:\n  Suc c = card (older_seniors x n)\n\ngoal (1 subgoal):\n 1. card (older_seniors (Max (older_seniors x n)) n) = c", "unfolding older_seniors_recursive_card[OF \\<open>?os \\<noteq> {}\\<close>]"], ["proof (prove)\nusing this:\n  Suc c = Suc (card (older_seniors (Max (older_seniors x n)) n))\n\ngoal (1 subgoal):\n 1. card (older_seniors (Max (older_seniors x n)) n) = c", "by blast"], ["proof (state)\nthis:\n  card (older_seniors (Max (older_seniors x n)) n) = c\n\ngoal (1 subgoal):\n 1. \\<And>xa x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>xa = card (older_seniors x n);\n                    y \\<in> older_seniors x n;\n                    older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n                   \\<Longrightarrow> older_seniors y n =\n                                     older_seniors y (Suc n);\n        Suc xa = card (older_seniors x n); y \\<in> older_seniors x n;\n        older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (Suc n)", "ultimately"], ["proof (chain)\npicking this:\n  s \\<in> older_seniors (Max (older_seniors x n)) n\n  card (older_seniors (Max (older_seniors x n)) n) = c", "have \"older_seniors s n = older_seniors s (Suc n)\""], ["proof (prove)\nusing this:\n  s \\<in> older_seniors (Max (older_seniors x n)) n\n  card (older_seniors (Max (older_seniors x n)) n) = c\n\ngoal (1 subgoal):\n 1. older_seniors s n = older_seniors s (Suc n)", "by (metis Suc.hyps(1) \\<open>older_seniors (Max ?os) n = older_seniors (Max ?os) (Suc n)\\<close>)"], ["proof (state)\nthis:\n  older_seniors s n = older_seniors s (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>xa x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>xa = card (older_seniors x n);\n                    y \\<in> older_seniors x n;\n                    older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n                   \\<Longrightarrow> older_seniors y n =\n                                     older_seniors y (Suc n);\n        Suc xa = card (older_seniors x n); y \\<in> older_seniors x n;\n        older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (Suc n)", "}"], ["proof (state)\nthis:\n  ?s2 \\<in> older_seniors (Max (older_seniors x n)) n \\<Longrightarrow>\n  older_seniors ?s2 n = older_seniors ?s2 (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>xa x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>xa = card (older_seniors x n);\n                    y \\<in> older_seniors x n;\n                    older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n                   \\<Longrightarrow> older_seniors y n =\n                                     older_seniors y (Suc n);\n        Suc xa = card (older_seniors x n); y \\<in> older_seniors x n;\n        older_seniors x n = older_seniors x (Suc n)\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (Suc n)", "ultimately"], ["proof (chain)\npicking this:\n  y = Max (older_seniors x n) \\<or>\n  y \\<in> older_seniors (Max (older_seniors x n)) n\n  older_seniors (Max (older_seniors x n)) n =\n  older_seniors (Max (older_seniors x n)) (Suc n)\n  ?s2 \\<in> older_seniors (Max (older_seniors x n)) n \\<Longrightarrow>\n  older_seniors ?s2 n = older_seniors ?s2 (Suc n)", "show ?case"], ["proof (prove)\nusing this:\n  y = Max (older_seniors x n) \\<or>\n  y \\<in> older_seniors (Max (older_seniors x n)) n\n  older_seniors (Max (older_seniors x n)) n =\n  older_seniors (Max (older_seniors x n)) (Suc n)\n  ?s2 \\<in> older_seniors (Max (older_seniors x n)) n \\<Longrightarrow>\n  older_seniors ?s2 n = older_seniors ?s2 (Suc n)\n\ngoal (1 subgoal):\n 1. older_seniors y n = older_seniors y (Suc n)", "by blast"], ["proof (state)\nthis:\n  older_seniors y n = older_seniors y (Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma older_seniors_tower:\n  \"\\<lbrakk>x \\<le> n; y \\<in> older_seniors x n; older_seniors x n = older_seniors x (n + m)\\<rbrakk> \\<Longrightarrow> older_seniors y n = older_seniors y (n + m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> n; y \\<in> older_seniors x n;\n     older_seniors x n = older_seniors x (n + m)\\<rbrakk>\n    \\<Longrightarrow> older_seniors y n = older_seniors y (n + m)", "proof (induction m)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> n; y \\<in> older_seniors x n;\n     older_seniors x n = older_seniors x (n + 0)\\<rbrakk>\n    \\<Longrightarrow> older_seniors y n = older_seniors y (n + 0)\n 2. \\<And>m.\n       \\<lbrakk>\\<lbrakk>x \\<le> n; y \\<in> older_seniors x n;\n                 older_seniors x n = older_seniors x (n + m)\\<rbrakk>\n                \\<Longrightarrow> older_seniors y n =\n                                  older_seniors y (n + m);\n        x \\<le> n; y \\<in> older_seniors x n;\n        older_seniors x n = older_seniors x (n + Suc m)\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (n + Suc m)", "case (Suc m)"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<le> n; y \\<in> older_seniors x n;\n   older_seniors x n = older_seniors x (n + m)\\<rbrakk>\n  \\<Longrightarrow> older_seniors y n = older_seniors y (n + m)\n  x \\<le> n\n  y \\<in> older_seniors x n\n  older_seniors x n = older_seniors x (n + Suc m)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> n; y \\<in> older_seniors x n;\n     older_seniors x n = older_seniors x (n + 0)\\<rbrakk>\n    \\<Longrightarrow> older_seniors y n = older_seniors y (n + 0)\n 2. \\<And>m.\n       \\<lbrakk>\\<lbrakk>x \\<le> n; y \\<in> older_seniors x n;\n                 older_seniors x n = older_seniors x (n + m)\\<rbrakk>\n                \\<Longrightarrow> older_seniors y n =\n                                  older_seniors y (n + m);\n        x \\<le> n; y \\<in> older_seniors x n;\n        older_seniors x n = older_seniors x (n + Suc m)\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (n + Suc m)", "hence \"older_seniors x n = older_seniors x (n + m)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<le> n; y \\<in> older_seniors x n;\n   older_seniors x n = older_seniors x (n + m)\\<rbrakk>\n  \\<Longrightarrow> older_seniors y n = older_seniors y (n + m)\n  x \\<le> n\n  y \\<in> older_seniors x n\n  older_seniors x n = older_seniors x (n + Suc m)\n\ngoal (1 subgoal):\n 1. older_seniors x n = older_seniors x (n + m)", "using older_seniors_monotonic older_seniors_monotonic_Suc subset_antisym"], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<le> n; y \\<in> older_seniors x n;\n   older_seniors x n = older_seniors x (n + m)\\<rbrakk>\n  \\<Longrightarrow> older_seniors y n = older_seniors y (n + m)\n  x \\<le> n\n  y \\<in> older_seniors x n\n  older_seniors x n = older_seniors x (n + Suc m)\n  ?x \\<le> ?n \\<Longrightarrow>\n  older_seniors ?x (?n + ?m) \\<subseteq> older_seniors ?x ?n\n  ?x \\<le> ?n \\<Longrightarrow>\n  older_seniors ?x (Suc ?n) \\<subseteq> older_seniors ?x ?n\n  \\<lbrakk>?A \\<subseteq> ?B; ?B \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> ?A = ?B\n\ngoal (1 subgoal):\n 1. older_seniors x n = older_seniors x (n + m)", "by (metis Nat.add_0_right add.assoc add_Suc_shift trans_le_add1)"], ["proof (state)\nthis:\n  older_seniors x n = older_seniors x (n + m)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> n; y \\<in> older_seniors x n;\n     older_seniors x n = older_seniors x (n + 0)\\<rbrakk>\n    \\<Longrightarrow> older_seniors y n = older_seniors y (n + 0)\n 2. \\<And>m.\n       \\<lbrakk>\\<lbrakk>x \\<le> n; y \\<in> older_seniors x n;\n                 older_seniors x n = older_seniors x (n + m)\\<rbrakk>\n                \\<Longrightarrow> older_seniors y n =\n                                  older_seniors y (n + m);\n        x \\<le> n; y \\<in> older_seniors x n;\n        older_seniors x n = older_seniors x (n + Suc m)\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (n + Suc m)", "hence \"older_seniors y n = older_seniors y (n + m)\""], ["proof (prove)\nusing this:\n  older_seniors x n = older_seniors x (n + m)\n\ngoal (1 subgoal):\n 1. older_seniors y n = older_seniors y (n + m)", "using Suc.IH[OF Suc.prems(1,2)]"], ["proof (prove)\nusing this:\n  older_seniors x n = older_seniors x (n + m)\n  older_seniors x n = older_seniors x (n + m) \\<Longrightarrow>\n  older_seniors y n = older_seniors y (n + m)\n\ngoal (1 subgoal):\n 1. older_seniors y n = older_seniors y (n + m)", "by blast"], ["proof (state)\nthis:\n  older_seniors y n = older_seniors y (n + m)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> n; y \\<in> older_seniors x n;\n     older_seniors x n = older_seniors x (n + 0)\\<rbrakk>\n    \\<Longrightarrow> older_seniors y n = older_seniors y (n + 0)\n 2. \\<And>m.\n       \\<lbrakk>\\<lbrakk>x \\<le> n; y \\<in> older_seniors x n;\n                 older_seniors x n = older_seniors x (n + m)\\<rbrakk>\n                \\<Longrightarrow> older_seniors y n =\n                                  older_seniors y (n + m);\n        x \\<le> n; y \\<in> older_seniors x n;\n        older_seniors x n = older_seniors x (n + Suc m)\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (n + Suc m)", "also"], ["proof (state)\nthis:\n  older_seniors y n = older_seniors y (n + m)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> n; y \\<in> older_seniors x n;\n     older_seniors x n = older_seniors x (n + 0)\\<rbrakk>\n    \\<Longrightarrow> older_seniors y n = older_seniors y (n + 0)\n 2. \\<And>m.\n       \\<lbrakk>\\<lbrakk>x \\<le> n; y \\<in> older_seniors x n;\n                 older_seniors x n = older_seniors x (n + m)\\<rbrakk>\n                \\<Longrightarrow> older_seniors y n =\n                                  older_seniors y (n + m);\n        x \\<le> n; y \\<in> older_seniors x n;\n        older_seniors x n = older_seniors x (n + Suc m)\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (n + Suc m)", "have \"\\<dots> = older_seniors y (n + Suc m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. older_seniors y (n + m) = older_seniors y (n + Suc m)", "using older_seniors_tower'[of y x \"n + m\"] Suc.prems"], ["proof (prove)\nusing this:\n  \\<lbrakk>y \\<in> older_seniors x (n + m);\n   older_seniors x (n + m) = older_seniors x (Suc (n + m))\\<rbrakk>\n  \\<Longrightarrow> older_seniors y (n + m) = older_seniors y (Suc (n + m))\n  x \\<le> n\n  y \\<in> older_seniors x n\n  older_seniors x n = older_seniors x (n + Suc m)\n\ngoal (1 subgoal):\n 1. older_seniors y (n + m) = older_seniors y (n + Suc m)", "unfolding add_Suc_right"], ["proof (prove)\nusing this:\n  \\<lbrakk>y \\<in> older_seniors x (n + m);\n   older_seniors x (n + m) = older_seniors x (Suc (n + m))\\<rbrakk>\n  \\<Longrightarrow> older_seniors y (n + m) = older_seniors y (Suc (n + m))\n  x \\<le> n\n  y \\<in> older_seniors x n\n  older_seniors x n = older_seniors x (Suc (n + m))\n\ngoal (1 subgoal):\n 1. older_seniors y (n + m) = older_seniors y (Suc (n + m))", "by (metis \\<open>older_seniors x n = older_seniors x (n + m)\\<close>)"], ["proof (state)\nthis:\n  older_seniors y (n + m) = older_seniors y (n + Suc m)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> n; y \\<in> older_seniors x n;\n     older_seniors x n = older_seniors x (n + 0)\\<rbrakk>\n    \\<Longrightarrow> older_seniors y n = older_seniors y (n + 0)\n 2. \\<And>m.\n       \\<lbrakk>\\<lbrakk>x \\<le> n; y \\<in> older_seniors x n;\n                 older_seniors x n = older_seniors x (n + m)\\<rbrakk>\n                \\<Longrightarrow> older_seniors y n =\n                                  older_seniors y (n + m);\n        x \\<le> n; y \\<in> older_seniors x n;\n        older_seniors x n = older_seniors x (n + Suc m)\\<rbrakk>\n       \\<Longrightarrow> older_seniors y n = older_seniors y (n + Suc m)", "finally"], ["proof (chain)\npicking this:\n  older_seniors y n = older_seniors y (n + Suc m)", "show ?case"], ["proof (prove)\nusing this:\n  older_seniors y n = older_seniors y (n + Suc m)\n\ngoal (1 subgoal):\n 1. older_seniors y n = older_seniors y (n + Suc m)", "."], ["proof (state)\nthis:\n  older_seniors y n = older_seniors y (n + Suc m)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> n; y \\<in> older_seniors x n;\n     older_seniors x n = older_seniors x (n + 0)\\<rbrakk>\n    \\<Longrightarrow> older_seniors y n = older_seniors y (n + 0)", "qed simp"], ["", "subsection \\<open>Rank\\<close>"], ["", "subsubsection \\<open>Properties\\<close>"], ["", "lemma rank_None_before:\n  \"x > n \\<Longrightarrow> rank x n = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < x \\<Longrightarrow> rank x n = None", "by simp"], ["", "lemma rank_None_Suc:\n  assumes \"x \\<le> n\"\n  assumes \"rank x n = None\"\n  shows \"rank x (Suc n) = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rank x (Suc n) = None", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rank x (Suc n) = None", "have \"sink (token_run x n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sink (token_run x n)", "using assms"], ["proof (prove)\nusing this:\n  x \\<le> n\n  rank x n = None\n\ngoal (1 subgoal):\n 1. sink (token_run x n)", "by (metis option.distinct(1) rank.simps)"], ["proof (state)\nthis:\n  sink (token_run x n)\n\ngoal (1 subgoal):\n 1. rank x (Suc n) = None", "hence \"sink (token_run x (Suc n))\""], ["proof (prove)\nusing this:\n  sink (token_run x n)\n\ngoal (1 subgoal):\n 1. sink (token_run x (Suc n))", "using token_stays_in_sink"], ["proof (prove)\nusing this:\n  sink (token_run x n)\n  \\<lbrakk>sink ?q; token_run ?x ?n = ?q\\<rbrakk>\n  \\<Longrightarrow> token_run ?x (?n + ?m) = ?q\n\ngoal (1 subgoal):\n 1. sink (token_run x (Suc n))", "by (metis (erased, hide_lams) Suc_leD le_Suc_ex not_less_eq_eq)"], ["proof (state)\nthis:\n  sink (token_run x (Suc n))\n\ngoal (1 subgoal):\n 1. rank x (Suc n) = None", "thus ?thesis"], ["proof (prove)\nusing this:\n  sink (token_run x (Suc n))\n\ngoal (1 subgoal):\n 1. rank x (Suc n) = None", "by simp"], ["proof (state)\nthis:\n  rank x (Suc n) = None\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rank_Some_time:\n  \"rank x n = Some j \\<Longrightarrow> x \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rank x n = Some j \\<Longrightarrow> x \\<le> n", "by (metis option.distinct(1) rank.simps)"], ["", "lemma rank_Some_sink:\n  \"rank x n = Some j \\<Longrightarrow> \\<not>sink (token_run x n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rank x n = Some j \\<Longrightarrow> \\<not> sink (token_run x n)", "by fastforce"], ["", "lemma rank_Some_card:\n  \"rank x n = Some j \\<Longrightarrow> card (older_seniors x n) = j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rank x n = Some j \\<Longrightarrow> card (older_seniors x n) = j", "by (metis option.distinct(1) option.inject rank.simps)"], ["", "lemma rank_initial:\n  \"\\<exists>i. rank x x = Some i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i. rank x x = Some i", "unfolding rank.simps sink_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i.\n       (if x \\<le> x \\<and>\n           \\<not> (q\\<^sub>0 \\<noteq> token_run x x \\<and>\n                   (\\<forall>\\<nu>\\<in>\\<Sigma>.\n                       \\<delta> (token_run x x) \\<nu> = token_run x x))\n        then Some (card (older_seniors x x)) else None) =\n       Some i", "by force"], ["", "lemma rank_continuous:\n  assumes \"rank x n = Some i\"\n  assumes \"rank x (n + m) = Some j\"\n  assumes \"m' \\<le> m\"\n  shows \"\\<exists>k. rank x (n + m') = Some k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k. rank x (n + m') = Some k", "using assms"], ["proof (prove)\nusing this:\n  rank x n = Some i\n  rank x (n + m) = Some j\n  m' \\<le> m\n\ngoal (1 subgoal):\n 1. \\<exists>k. rank x (n + m') = Some k", "proof (induction m arbitrary: j m')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>j m'.\n       \\<lbrakk>rank x n = Some i; rank x (n + 0) = Some j;\n        m' \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k. rank x (n + m') = Some k\n 2. \\<And>m j m'.\n       \\<lbrakk>\\<And>j m'.\n                   \\<lbrakk>rank x n = Some i; rank x (n + m) = Some j;\n                    m' \\<le> m\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>k. rank x (n + m') = Some k;\n        rank x n = Some i; rank x (n + Suc m) = Some j;\n        m' \\<le> Suc m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k. rank x (n + m') = Some k", "case (Suc m)"], ["proof (state)\nthis:\n  \\<lbrakk>rank x n = Some i; rank x (n + m) = Some ?j; ?m' \\<le> m\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k. rank x (n + ?m') = Some k\n  rank x n = Some i\n  rank x (n + Suc m) = Some j\n  m' \\<le> Suc m\n\ngoal (2 subgoals):\n 1. \\<And>j m'.\n       \\<lbrakk>rank x n = Some i; rank x (n + 0) = Some j;\n        m' \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k. rank x (n + m') = Some k\n 2. \\<And>m j m'.\n       \\<lbrakk>\\<And>j m'.\n                   \\<lbrakk>rank x n = Some i; rank x (n + m) = Some j;\n                    m' \\<le> m\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>k. rank x (n + m') = Some k;\n        rank x n = Some i; rank x (n + Suc m) = Some j;\n        m' \\<le> Suc m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k. rank x (n + m') = Some k", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>rank x n = Some i; rank x (n + m) = Some ?j; ?m' \\<le> m\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k. rank x (n + ?m') = Some k\n  rank x n = Some i\n  rank x (n + Suc m) = Some j\n  m' \\<le> Suc m\n\ngoal (1 subgoal):\n 1. \\<exists>k. rank x (n + m') = Some k", "proof (cases \"m' = Suc m\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>j m'.\n                \\<lbrakk>rank x n = Some i; rank x (n + m) = Some j;\n                 m' \\<le> m\\<rbrakk>\n                \\<Longrightarrow> \\<exists>k. rank x (n + m') = Some k;\n     rank x n = Some i; rank x (n + Suc m) = Some j; m' \\<le> Suc m;\n     m' = Suc m\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. rank x (n + m') = Some k\n 2. \\<lbrakk>\\<And>j m'.\n                \\<lbrakk>rank x n = Some i; rank x (n + m) = Some j;\n                 m' \\<le> m\\<rbrakk>\n                \\<Longrightarrow> \\<exists>k. rank x (n + m') = Some k;\n     rank x n = Some i; rank x (n + Suc m) = Some j; m' \\<le> Suc m;\n     m' \\<noteq> Suc m\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. rank x (n + m') = Some k", "case False"], ["proof (state)\nthis:\n  m' \\<noteq> Suc m\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>j m'.\n                \\<lbrakk>rank x n = Some i; rank x (n + m) = Some j;\n                 m' \\<le> m\\<rbrakk>\n                \\<Longrightarrow> \\<exists>k. rank x (n + m') = Some k;\n     rank x n = Some i; rank x (n + Suc m) = Some j; m' \\<le> Suc m;\n     m' = Suc m\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. rank x (n + m') = Some k\n 2. \\<lbrakk>\\<And>j m'.\n                \\<lbrakk>rank x n = Some i; rank x (n + m) = Some j;\n                 m' \\<le> m\\<rbrakk>\n                \\<Longrightarrow> \\<exists>k. rank x (n + m') = Some k;\n     rank x n = Some i; rank x (n + Suc m) = Some j; m' \\<le> Suc m;\n     m' \\<noteq> Suc m\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. rank x (n + m') = Some k", "with Suc.prems"], ["proof (chain)\npicking this:\n  rank x n = Some i\n  rank x (n + Suc m) = Some j\n  m' \\<le> Suc m\n  m' \\<noteq> Suc m", "have \"m' \\<le> m\""], ["proof (prove)\nusing this:\n  rank x n = Some i\n  rank x (n + Suc m) = Some j\n  m' \\<le> Suc m\n  m' \\<noteq> Suc m\n\ngoal (1 subgoal):\n 1. m' \\<le> m", "by linarith"], ["proof (state)\nthis:\n  m' \\<le> m\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>j m'.\n                \\<lbrakk>rank x n = Some i; rank x (n + m) = Some j;\n                 m' \\<le> m\\<rbrakk>\n                \\<Longrightarrow> \\<exists>k. rank x (n + m') = Some k;\n     rank x n = Some i; rank x (n + Suc m) = Some j; m' \\<le> Suc m;\n     m' = Suc m\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. rank x (n + m') = Some k\n 2. \\<lbrakk>\\<And>j m'.\n                \\<lbrakk>rank x n = Some i; rank x (n + m) = Some j;\n                 m' \\<le> m\\<rbrakk>\n                \\<Longrightarrow> \\<exists>k. rank x (n + m') = Some k;\n     rank x n = Some i; rank x (n + Suc m) = Some j; m' \\<le> Suc m;\n     m' \\<noteq> Suc m\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. rank x (n + m') = Some k", "moreover"], ["proof (state)\nthis:\n  m' \\<le> m\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>j m'.\n                \\<lbrakk>rank x n = Some i; rank x (n + m) = Some j;\n                 m' \\<le> m\\<rbrakk>\n                \\<Longrightarrow> \\<exists>k. rank x (n + m') = Some k;\n     rank x n = Some i; rank x (n + Suc m) = Some j; m' \\<le> Suc m;\n     m' = Suc m\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. rank x (n + m') = Some k\n 2. \\<lbrakk>\\<And>j m'.\n                \\<lbrakk>rank x n = Some i; rank x (n + m) = Some j;\n                 m' \\<le> m\\<rbrakk>\n                \\<Longrightarrow> \\<exists>k. rank x (n + m') = Some k;\n     rank x n = Some i; rank x (n + Suc m) = Some j; m' \\<le> Suc m;\n     m' \\<noteq> Suc m\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. rank x (n + m') = Some k", "obtain j' where \"rank x (n + m) = Some j'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j'.\n        rank x (n + m) = Some j' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Suc.prems(1,2) rank_Some_time rank_None_Suc"], ["proof (prove)\nusing this:\n  rank x n = Some i\n  rank x (n + Suc m) = Some j\n  rank ?x ?n = Some ?j \\<Longrightarrow> ?x \\<le> ?n\n  \\<lbrakk>?x \\<le> ?n; rank ?x ?n = None\\<rbrakk>\n  \\<Longrightarrow> rank ?x (Suc ?n) = None\n\ngoal (1 subgoal):\n 1. (\\<And>j'.\n        rank x (n + m) = Some j' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis add_Suc_right add_lessD1 not_less rank.simps)"], ["proof (state)\nthis:\n  rank x (n + m) = Some j'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>j m'.\n                \\<lbrakk>rank x n = Some i; rank x (n + m) = Some j;\n                 m' \\<le> m\\<rbrakk>\n                \\<Longrightarrow> \\<exists>k. rank x (n + m') = Some k;\n     rank x n = Some i; rank x (n + Suc m) = Some j; m' \\<le> Suc m;\n     m' = Suc m\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. rank x (n + m') = Some k\n 2. \\<lbrakk>\\<And>j m'.\n                \\<lbrakk>rank x n = Some i; rank x (n + m) = Some j;\n                 m' \\<le> m\\<rbrakk>\n                \\<Longrightarrow> \\<exists>k. rank x (n + m') = Some k;\n     rank x n = Some i; rank x (n + Suc m) = Some j; m' \\<le> Suc m;\n     m' \\<noteq> Suc m\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. rank x (n + m') = Some k", "ultimately"], ["proof (chain)\npicking this:\n  m' \\<le> m\n  rank x (n + m) = Some j'", "show ?thesis"], ["proof (prove)\nusing this:\n  m' \\<le> m\n  rank x (n + m) = Some j'\n\ngoal (1 subgoal):\n 1. \\<exists>k. rank x (n + m') = Some k", "using Suc.IH[OF Suc.prems(1)]"], ["proof (prove)\nusing this:\n  m' \\<le> m\n  rank x (n + m) = Some j'\n  \\<lbrakk>rank x (n + m) = Some ?j; ?m' \\<le> m\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k. rank x (n + ?m') = Some k\n\ngoal (1 subgoal):\n 1. \\<exists>k. rank x (n + m') = Some k", "by blast"], ["proof (state)\nthis:\n  \\<exists>k. rank x (n + m') = Some k\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>j m'.\n                \\<lbrakk>rank x n = Some i; rank x (n + m) = Some j;\n                 m' \\<le> m\\<rbrakk>\n                \\<Longrightarrow> \\<exists>k. rank x (n + m') = Some k;\n     rank x n = Some i; rank x (n + Suc m) = Some j; m' \\<le> Suc m;\n     m' = Suc m\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. rank x (n + m') = Some k", "qed simp"], ["proof (state)\nthis:\n  \\<exists>k. rank x (n + m') = Some k\n\ngoal (1 subgoal):\n 1. \\<And>j m'.\n       \\<lbrakk>rank x n = Some i; rank x (n + 0) = Some j;\n        m' \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k. rank x (n + m') = Some k", "qed simp"], ["", "lemma rank_token_squats:\n  \"token_squats x \\<Longrightarrow> x \\<le> n \\<Longrightarrow> \\<exists>i. rank x n = Some i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>token_squats x; x \\<le> n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i. rank x n = Some i", "unfolding token_squats_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n. \\<not> sink (token_run x n); x \\<le> n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i. rank x n = Some i", "by simp"], ["", "lemma rank_older_seniors_bounded:\n  assumes \"y \\<in> older_seniors x n\"\n  assumes \"rank x n = Some j\"\n  shows \"\\<exists>j' < j. rank y n = Some j'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>j'<j. rank y n = Some j'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>j'<j. rank y n = Some j'", "from assms(1)"], ["proof (chain)\npicking this:\n  y \\<in> older_seniors x n", "have \"\\<not>sink (token_run y n)\""], ["proof (prove)\nusing this:\n  y \\<in> older_seniors x n\n\ngoal (1 subgoal):\n 1. \\<not> sink (token_run y n)", "by simp"], ["proof (state)\nthis:\n  \\<not> sink (token_run y n)\n\ngoal (1 subgoal):\n 1. \\<exists>j'<j. rank y n = Some j'", "moreover"], ["proof (state)\nthis:\n  \\<not> sink (token_run y n)\n\ngoal (1 subgoal):\n 1. \\<exists>j'<j. rank y n = Some j'", "from assms"], ["proof (chain)\npicking this:\n  y \\<in> older_seniors x n\n  rank x n = Some j", "have \"y \\<le> n\""], ["proof (prove)\nusing this:\n  y \\<in> older_seniors x n\n  rank x n = Some j\n\ngoal (1 subgoal):\n 1. y \\<le> n", "by (metis dual_order.trans linear not_less older_seniors_older option.distinct(1) rank.simps)"], ["proof (state)\nthis:\n  y \\<le> n\n\ngoal (1 subgoal):\n 1. \\<exists>j'<j. rank y n = Some j'", "moreover"], ["proof (state)\nthis:\n  y \\<le> n\n\ngoal (1 subgoal):\n 1. \\<exists>j'<j. rank y n = Some j'", "have \"older_seniors y n \\<subset> older_seniors x n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. older_seniors y n \\<subset> older_seniors x n", "using older_seniors_subset assms(1)"], ["proof (prove)\nusing this:\n  ?y \\<in> older_seniors ?x ?n \\<Longrightarrow>\n  older_seniors ?y ?n \\<subset> older_seniors ?x ?n\n  y \\<in> older_seniors x n\n\ngoal (1 subgoal):\n 1. older_seniors y n \\<subset> older_seniors x n", "by presburger"], ["proof (state)\nthis:\n  older_seniors y n \\<subset> older_seniors x n\n\ngoal (1 subgoal):\n 1. \\<exists>j'<j. rank y n = Some j'", "hence \"card (older_seniors y n) < card (older_seniors x n)\""], ["proof (prove)\nusing this:\n  older_seniors y n \\<subset> older_seniors x n\n\ngoal (1 subgoal):\n 1. card (older_seniors y n) < card (older_seniors x n)", "by (rule older_seniors_psubset_card_mono)"], ["proof (state)\nthis:\n  card (older_seniors y n) < card (older_seniors x n)\n\ngoal (1 subgoal):\n 1. \\<exists>j'<j. rank y n = Some j'", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> sink (token_run y n)\n  y \\<le> n\n  card (older_seniors y n) < card (older_seniors x n)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> sink (token_run y n)\n  y \\<le> n\n  card (older_seniors y n) < card (older_seniors x n)\n\ngoal (1 subgoal):\n 1. \\<exists>j'<j. rank y n = Some j'", "using rank_Some_card[OF assms(2)] rank.simps"], ["proof (prove)\nusing this:\n  \\<not> sink (token_run y n)\n  y \\<le> n\n  card (older_seniors y n) < card (older_seniors x n)\n  card (older_seniors x n) = j\n  rank ?x ?n =\n  (if ?x \\<le> ?n \\<and> \\<not> sink (token_run ?x ?n)\n   then Some (card (older_seniors ?x ?n)) else None)\n\ngoal (1 subgoal):\n 1. \\<exists>j'<j. rank y n = Some j'", "by meson"], ["proof (state)\nthis:\n  \\<exists>j'<j. rank y n = Some j'\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Bounds\\<close>"], ["", "lemma max_rank_lowerbound:\n  \"0 < max_rank\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < max_rank", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < max_rank", "obtain a where \"a \\<in> \\<Sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a. a \\<in> \\<Sigma> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using nonempty_\\<Sigma>"], ["proof (prove)\nusing this:\n  \\<Sigma> \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>a. a \\<in> \\<Sigma> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a \\<in> \\<Sigma>\n\ngoal (1 subgoal):\n 1. 0 < max_rank", "hence \"range (\\<lambda>_. a) \\<subseteq> \\<Sigma>\" and \"q\\<^sub>0 = run \\<delta> q\\<^sub>0 (\\<lambda>_. a) 0\""], ["proof (prove)\nusing this:\n  a \\<in> \\<Sigma>\n\ngoal (1 subgoal):\n 1. range (\\<lambda>_. a) \\<subseteq> \\<Sigma> &&&\n    q\\<^sub>0 = run \\<delta> q\\<^sub>0 (\\<lambda>_. a) 0", "by auto"], ["proof (state)\nthis:\n  range (\\<lambda>_. a) \\<subseteq> \\<Sigma>\n  q\\<^sub>0 = run \\<delta> q\\<^sub>0 (\\<lambda>_. a) 0\n\ngoal (1 subgoal):\n 1. 0 < max_rank", "hence \"q\\<^sub>0 \\<in> reach \\<Sigma> \\<delta> q\\<^sub>0\""], ["proof (prove)\nusing this:\n  range (\\<lambda>_. a) \\<subseteq> \\<Sigma>\n  q\\<^sub>0 = run \\<delta> q\\<^sub>0 (\\<lambda>_. a) 0\n\ngoal (1 subgoal):\n 1. q\\<^sub>0 \\<in> reach \\<Sigma> \\<delta> q\\<^sub>0", "unfolding reach_def"], ["proof (prove)\nusing this:\n  range (\\<lambda>_. a) \\<subseteq> \\<Sigma>\n  q\\<^sub>0 = run \\<delta> q\\<^sub>0 (\\<lambda>_. a) 0\n\ngoal (1 subgoal):\n 1. q\\<^sub>0\n    \\<in> {run \\<delta> q\\<^sub>0 w n |w n. range w \\<subseteq> \\<Sigma>}", "by blast"], ["proof (state)\nthis:\n  q\\<^sub>0 \\<in> reach \\<Sigma> \\<delta> q\\<^sub>0\n\ngoal (1 subgoal):\n 1. 0 < max_rank", "thus ?thesis"], ["proof (prove)\nusing this:\n  q\\<^sub>0 \\<in> reach \\<Sigma> \\<delta> q\\<^sub>0\n\ngoal (1 subgoal):\n 1. 0 < max_rank", "using reach_card_0[OF nonempty_\\<Sigma>] finite_reach max_rank_def sink_def"], ["proof (prove)\nusing this:\n  q\\<^sub>0 \\<in> reach \\<Sigma> \\<delta> q\\<^sub>0\n  infinite (reach \\<Sigma> ?\\<delta> ?q\\<^sub>0) =\n  (card (reach \\<Sigma> ?\\<delta> ?q\\<^sub>0) = 0)\n  finite (reach \\<Sigma> \\<delta> q\\<^sub>0)\n  max_rank = card (reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink)\n  sink ?q \\<equiv>\n  q\\<^sub>0 \\<noteq> ?q \\<and>\n  (\\<forall>\\<nu>\\<in>\\<Sigma>. \\<delta> ?q \\<nu> = ?q)\n\ngoal (1 subgoal):\n 1. 0 < max_rank", "by force"], ["proof (state)\nthis:\n  0 < max_rank\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma older_seniors_card_bounded:\n  assumes \"\\<not>sink (token_run x n)\" and \"x \\<le> n\"\n  shows \"card (older_seniors x n) < card (reach \\<Sigma> \\<delta> q\\<^sub>0 - {q. sink q})\"\n  (is \"card ?S4 < card ?S0\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (older_seniors x n)\n    < card (reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card (older_seniors x n)\n    < card (reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink)", "let ?S1 = \"{token_run x n | x n. True} - {q. sink q}\""], ["proof (state)\ngoal (1 subgoal):\n 1. card (older_seniors x n)\n    < card (reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink)", "let ?S2 = \"(\\<lambda>q. the (oldest_token q n)) ` ?S1\""], ["proof (state)\ngoal (1 subgoal):\n 1. card (older_seniors x n)\n    < card (reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink)", "let ?S3 = \"{s. \\<exists>x. s = senior x n \\<and> \\<not>(sink (token_run s n))}\""], ["proof (state)\ngoal (1 subgoal):\n 1. card (older_seniors x n)\n    < card (reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink)", "have \"?S1 \\<subseteq> ?S0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {token_run x n |x n. True} - Collect sink\n    \\<subseteq> reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink", "unfolding reach_def token_run.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. {run \\<delta> q\\<^sub>0 (suffix x w) (n - x) |x n. True} - Collect sink\n    \\<subseteq> {run \\<delta> q\\<^sub>0 w n |w n.\n                 range w \\<subseteq> \\<Sigma>} -\n                Collect sink", "using bounded_w"], ["proof (prove)\nusing this:\n  range w \\<subseteq> \\<Sigma>\n\ngoal (1 subgoal):\n 1. {run \\<delta> q\\<^sub>0 (suffix x w) (n - x) |x n. True} - Collect sink\n    \\<subseteq> {run \\<delta> q\\<^sub>0 w n |w n.\n                 range w \\<subseteq> \\<Sigma>} -\n                Collect sink", "by fastforce"], ["proof (state)\nthis:\n  {token_run x n |x n. True} - Collect sink\n  \\<subseteq> reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink\n\ngoal (1 subgoal):\n 1. card (older_seniors x n)\n    < card (reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink)", "hence \"finite ?S1\" and C1: \"card ?S1 \\<le> card ?S0\""], ["proof (prove)\nusing this:\n  {token_run x n |x n. True} - Collect sink\n  \\<subseteq> reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink\n\ngoal (1 subgoal):\n 1. finite ({token_run x n |x n. True} - Collect sink) &&&\n    card ({token_run x n |x n. True} - Collect sink)\n    \\<le> card (reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink)", "using finite_reach card_mono finite_subset"], ["proof (prove)\nusing this:\n  {token_run x n |x n. True} - Collect sink\n  \\<subseteq> reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink\n  finite (reach \\<Sigma> \\<delta> q\\<^sub>0)\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B\\<rbrakk>\n  \\<Longrightarrow> card ?A \\<le> card ?B\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite ({token_run x n |x n. True} - Collect sink) &&&\n    card ({token_run x n |x n. True} - Collect sink)\n    \\<le> card (reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink)", "apply (simp add: finite_subset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. card ({token_run x n |x n. True} - Collect sink)\n    \\<le> card (reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink)", "by (metis \\<open>{token_run x n |x n. True} - Collect sink \\<subseteq> reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink\\<close> card_mono finite_Diff local.finite_reach)"], ["proof (state)\nthis:\n  finite ({token_run x n |x n. True} - Collect sink)\n  card ({token_run x n |x n. True} - Collect sink)\n  \\<le> card (reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink)\n\ngoal (1 subgoal):\n 1. card (older_seniors x n)\n    < card (reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink)", "hence \"finite ?S2\" and C2: \"card ?S2 \\<le> card ?S1\""], ["proof (prove)\nusing this:\n  finite ({token_run x n |x n. True} - Collect sink)\n  card ({token_run x n |x n. True} - Collect sink)\n  \\<le> card (reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>q. the (oldest_token q n)) `\n      ({token_run x n |x n. True} - Collect sink)) &&&\n    card\n     ((\\<lambda>q. the (oldest_token q n)) `\n      ({token_run x n |x n. True} - Collect sink))\n    \\<le> card ({token_run x n |x n. True} - Collect sink)", "using finite_imageI card_image_le"], ["proof (prove)\nusing this:\n  finite ({token_run x n |x n. True} - Collect sink)\n  card ({token_run x n |x n. True} - Collect sink)\n  \\<le> card (reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink)\n  finite ?F \\<Longrightarrow> finite (?h ` ?F)\n  finite ?A \\<Longrightarrow> card (?f ` ?A) \\<le> card ?A\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>q. the (oldest_token q n)) `\n      ({token_run x n |x n. True} - Collect sink)) &&&\n    card\n     ((\\<lambda>q. the (oldest_token q n)) `\n      ({token_run x n |x n. True} - Collect sink))\n    \\<le> card ({token_run x n |x n. True} - Collect sink)", "by blast+"], ["proof (state)\nthis:\n  finite\n   ((\\<lambda>q. the (oldest_token q n)) `\n    ({token_run x n |x n. True} - Collect sink))\n  card\n   ((\\<lambda>q. the (oldest_token q n)) `\n    ({token_run x n |x n. True} - Collect sink))\n  \\<le> card ({token_run x n |x n. True} - Collect sink)\n\ngoal (1 subgoal):\n 1. card (older_seniors x n)\n    < card (reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink)", "moreover"], ["proof (state)\nthis:\n  finite\n   ((\\<lambda>q. the (oldest_token q n)) `\n    ({token_run x n |x n. True} - Collect sink))\n  card\n   ((\\<lambda>q. the (oldest_token q n)) `\n    ({token_run x n |x n. True} - Collect sink))\n  \\<le> card ({token_run x n |x n. True} - Collect sink)\n\ngoal (1 subgoal):\n 1. card (older_seniors x n)\n    < card (reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink)", "have \"?S3 \\<subseteq> ?S2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {s. \\<exists>x. s = senior x n \\<and> \\<not> sink (token_run s n)}\n    \\<subseteq> (\\<lambda>q. the (oldest_token q n)) `\n                ({token_run x n |x n. True} - Collect sink)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {s. \\<exists>x.\n                      s = senior x n \\<and>\n                      \\<not> sink (token_run s n)} \\<Longrightarrow>\n       x \\<in> (\\<lambda>q. the (oldest_token q n)) `\n               ({token_run x n |x n. True} - Collect sink)", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {s. \\<exists>x.\n                      s = senior x n \\<and>\n                      \\<not> sink (token_run s n)} \\<Longrightarrow>\n       x \\<in> (\\<lambda>q. the (oldest_token q n)) `\n               ({token_run x n |x n. True} - Collect sink)", "assume \"s \\<in> ?S3\""], ["proof (state)\nthis:\n  s \\<in> {s. \\<exists>x. s = senior x n \\<and> \\<not> sink (token_run s n)}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {s. \\<exists>x.\n                      s = senior x n \\<and>\n                      \\<not> sink (token_run s n)} \\<Longrightarrow>\n       x \\<in> (\\<lambda>q. the (oldest_token q n)) `\n               ({token_run x n |x n. True} - Collect sink)", "hence \"s = senior s n\" and \"\\<not>sink (token_run s n)\""], ["proof (prove)\nusing this:\n  s \\<in> {s. \\<exists>x. s = senior x n \\<and> \\<not> sink (token_run s n)}\n\ngoal (1 subgoal):\n 1. s = senior s n &&& \\<not> sink (token_run s n)", "using senior_senior"], ["proof (prove)\nusing this:\n  s \\<in> {s. \\<exists>x. s = senior x n \\<and> \\<not> sink (token_run s n)}\n  senior (senior ?x ?n) ?n = senior ?x ?n\n\ngoal (1 subgoal):\n 1. s = senior s n &&& \\<not> sink (token_run s n)", "by fastforce+"], ["proof (state)\nthis:\n  s = senior s n\n  \\<not> sink (token_run s n)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {s. \\<exists>x.\n                      s = senior x n \\<and>\n                      \\<not> sink (token_run s n)} \\<Longrightarrow>\n       x \\<in> (\\<lambda>q. the (oldest_token q n)) `\n               ({token_run x n |x n. True} - Collect sink)", "thus \"s \\<in> ?S2\""], ["proof (prove)\nusing this:\n  s = senior s n\n  \\<not> sink (token_run s n)\n\ngoal (1 subgoal):\n 1. s \\<in> (\\<lambda>q. the (oldest_token q n)) `\n            ({token_run x n |x n. True} - Collect sink)", "by auto"], ["proof (state)\nthis:\n  s \\<in> (\\<lambda>q. the (oldest_token q n)) `\n          ({token_run x n |x n. True} - Collect sink)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {s. \\<exists>x. s = senior x n \\<and> \\<not> sink (token_run s n)}\n  \\<subseteq> (\\<lambda>q. the (oldest_token q n)) `\n              ({token_run x n |x n. True} - Collect sink)\n\ngoal (1 subgoal):\n 1. card (older_seniors x n)\n    < card (reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink)", "ultimately"], ["proof (chain)\npicking this:\n  finite\n   ((\\<lambda>q. the (oldest_token q n)) `\n    ({token_run x n |x n. True} - Collect sink))\n  card\n   ((\\<lambda>q. the (oldest_token q n)) `\n    ({token_run x n |x n. True} - Collect sink))\n  \\<le> card ({token_run x n |x n. True} - Collect sink)\n  {s. \\<exists>x. s = senior x n \\<and> \\<not> sink (token_run s n)}\n  \\<subseteq> (\\<lambda>q. the (oldest_token q n)) `\n              ({token_run x n |x n. True} - Collect sink)", "have \"finite ?S3\" and C3: \"card ?S3 \\<le> card ?S2\""], ["proof (prove)\nusing this:\n  finite\n   ((\\<lambda>q. the (oldest_token q n)) `\n    ({token_run x n |x n. True} - Collect sink))\n  card\n   ((\\<lambda>q. the (oldest_token q n)) `\n    ({token_run x n |x n. True} - Collect sink))\n  \\<le> card ({token_run x n |x n. True} - Collect sink)\n  {s. \\<exists>x. s = senior x n \\<and> \\<not> sink (token_run s n)}\n  \\<subseteq> (\\<lambda>q. the (oldest_token q n)) `\n              ({token_run x n |x n. True} - Collect sink)\n\ngoal (1 subgoal):\n 1. finite\n     {s. \\<exists>x. s = senior x n \\<and> \\<not> sink (token_run s n)} &&&\n    card {s. \\<exists>x. s = senior x n \\<and> \\<not> sink (token_run s n)}\n    \\<le> card\n           ((\\<lambda>q. the (oldest_token q n)) `\n            ({token_run x n |x n. True} - Collect sink))", "using card_mono finite_subset"], ["proof (prove)\nusing this:\n  finite\n   ((\\<lambda>q. the (oldest_token q n)) `\n    ({token_run x n |x n. True} - Collect sink))\n  card\n   ((\\<lambda>q. the (oldest_token q n)) `\n    ({token_run x n |x n. True} - Collect sink))\n  \\<le> card ({token_run x n |x n. True} - Collect sink)\n  {s. \\<exists>x. s = senior x n \\<and> \\<not> sink (token_run s n)}\n  \\<subseteq> (\\<lambda>q. the (oldest_token q n)) `\n              ({token_run x n |x n. True} - Collect sink)\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B\\<rbrakk>\n  \\<Longrightarrow> card ?A \\<le> card ?B\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite\n     {s. \\<exists>x. s = senior x n \\<and> \\<not> sink (token_run s n)} &&&\n    card {s. \\<exists>x. s = senior x n \\<and> \\<not> sink (token_run s n)}\n    \\<le> card\n           ((\\<lambda>q. the (oldest_token q n)) `\n            ({token_run x n |x n. True} - Collect sink))", "by blast+"], ["proof (state)\nthis:\n  finite {s. \\<exists>x. s = senior x n \\<and> \\<not> sink (token_run s n)}\n  card {s. \\<exists>x. s = senior x n \\<and> \\<not> sink (token_run s n)}\n  \\<le> card\n         ((\\<lambda>q. the (oldest_token q n)) `\n          ({token_run x n |x n. True} - Collect sink))\n\ngoal (1 subgoal):\n 1. card (older_seniors x n)\n    < card (reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink)", "moreover"], ["proof (state)\nthis:\n  finite {s. \\<exists>x. s = senior x n \\<and> \\<not> sink (token_run s n)}\n  card {s. \\<exists>x. s = senior x n \\<and> \\<not> sink (token_run s n)}\n  \\<le> card\n         ((\\<lambda>q. the (oldest_token q n)) `\n          ({token_run x n |x n. True} - Collect sink))\n\ngoal (1 subgoal):\n 1. card (older_seniors x n)\n    < card (reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink)", "have \"senior x n \\<in> ?S3\" and \"senior x n \\<notin> ?S4\" and \"?S4 \\<subseteq> ?S3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. senior x n\n    \\<in> {s. \\<exists>x.\n                 s = senior x n \\<and> \\<not> sink (token_run s n)} &&&\n    senior x n \\<notin> older_seniors x n &&&\n    older_seniors x n\n    \\<subseteq> {s. \\<exists>x.\n                       s = senior x n \\<and> \\<not> sink (token_run s n)}", "using assms older_seniors_not_self_referential senior_same_state"], ["proof (prove)\nusing this:\n  \\<not> sink (token_run x n)\n  x \\<le> n\n  senior ?x ?n \\<notin> older_seniors ?x ?n\n  token_run (senior ?x ?n) ?n = token_run ?x ?n\n\ngoal (1 subgoal):\n 1. senior x n\n    \\<in> {s. \\<exists>x.\n                 s = senior x n \\<and> \\<not> sink (token_run s n)} &&&\n    senior x n \\<notin> older_seniors x n &&&\n    older_seniors x n\n    \\<subseteq> {s. \\<exists>x.\n                       s = senior x n \\<and> \\<not> sink (token_run s n)}", "by auto"], ["proof (state)\nthis:\n  senior x n\n  \\<in> {s. \\<exists>x. s = senior x n \\<and> \\<not> sink (token_run s n)}\n  senior x n \\<notin> older_seniors x n\n  older_seniors x n\n  \\<subseteq> {s. \\<exists>x.\n                     s = senior x n \\<and> \\<not> sink (token_run s n)}\n\ngoal (1 subgoal):\n 1. card (older_seniors x n)\n    < card (reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink)", "hence \"?S4 \\<subset> ?S3\""], ["proof (prove)\nusing this:\n  senior x n\n  \\<in> {s. \\<exists>x. s = senior x n \\<and> \\<not> sink (token_run s n)}\n  senior x n \\<notin> older_seniors x n\n  older_seniors x n\n  \\<subseteq> {s. \\<exists>x.\n                     s = senior x n \\<and> \\<not> sink (token_run s n)}\n\ngoal (1 subgoal):\n 1. older_seniors x n\n    \\<subset> {s. \\<exists>x.\n                     s = senior x n \\<and> \\<not> sink (token_run s n)}", "by blast"], ["proof (state)\nthis:\n  older_seniors x n\n  \\<subset> {s. \\<exists>x.\n                   s = senior x n \\<and> \\<not> sink (token_run s n)}\n\ngoal (1 subgoal):\n 1. card (older_seniors x n)\n    < card (reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink)", "ultimately"], ["proof (chain)\npicking this:\n  finite {s. \\<exists>x. s = senior x n \\<and> \\<not> sink (token_run s n)}\n  card {s. \\<exists>x. s = senior x n \\<and> \\<not> sink (token_run s n)}\n  \\<le> card\n         ((\\<lambda>q. the (oldest_token q n)) `\n          ({token_run x n |x n. True} - Collect sink))\n  older_seniors x n\n  \\<subset> {s. \\<exists>x.\n                   s = senior x n \\<and> \\<not> sink (token_run s n)}", "have \"finite ?S4\" and C4: \"card ?S4 < card ?S3\""], ["proof (prove)\nusing this:\n  finite {s. \\<exists>x. s = senior x n \\<and> \\<not> sink (token_run s n)}\n  card {s. \\<exists>x. s = senior x n \\<and> \\<not> sink (token_run s n)}\n  \\<le> card\n         ((\\<lambda>q. the (oldest_token q n)) `\n          ({token_run x n |x n. True} - Collect sink))\n  older_seniors x n\n  \\<subset> {s. \\<exists>x.\n                   s = senior x n \\<and> \\<not> sink (token_run s n)}\n\ngoal (1 subgoal):\n 1. finite (older_seniors x n) &&&\n    card (older_seniors x n)\n    < card\n       {s. \\<exists>x. s = senior x n \\<and> \\<not> sink (token_run s n)}", "using psubset_card_mono finite_subset"], ["proof (prove)\nusing this:\n  finite {s. \\<exists>x. s = senior x n \\<and> \\<not> sink (token_run s n)}\n  card {s. \\<exists>x. s = senior x n \\<and> \\<not> sink (token_run s n)}\n  \\<le> card\n         ((\\<lambda>q. the (oldest_token q n)) `\n          ({token_run x n |x n. True} - Collect sink))\n  older_seniors x n\n  \\<subset> {s. \\<exists>x.\n                   s = senior x n \\<and> \\<not> sink (token_run s n)}\n  \\<lbrakk>finite ?B; ?A \\<subset> ?B\\<rbrakk>\n  \\<Longrightarrow> card ?A < card ?B\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite (older_seniors x n) &&&\n    card (older_seniors x n)\n    < card\n       {s. \\<exists>x. s = senior x n \\<and> \\<not> sink (token_run s n)}", "by blast+"], ["proof (state)\nthis:\n  finite (older_seniors x n)\n  card (older_seniors x n)\n  < card {s. \\<exists>x. s = senior x n \\<and> \\<not> sink (token_run s n)}\n\ngoal (1 subgoal):\n 1. card (older_seniors x n)\n    < card (reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (older_seniors x n)\n    < card (reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink)", "using C1 C2 C3 C4"], ["proof (prove)\nusing this:\n  card ({token_run x n |x n. True} - Collect sink)\n  \\<le> card (reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink)\n  card\n   ((\\<lambda>q. the (oldest_token q n)) `\n    ({token_run x n |x n. True} - Collect sink))\n  \\<le> card ({token_run x n |x n. True} - Collect sink)\n  card {s. \\<exists>x. s = senior x n \\<and> \\<not> sink (token_run s n)}\n  \\<le> card\n         ((\\<lambda>q. the (oldest_token q n)) `\n          ({token_run x n |x n. True} - Collect sink))\n  card (older_seniors x n)\n  < card {s. \\<exists>x. s = senior x n \\<and> \\<not> sink (token_run s n)}\n\ngoal (1 subgoal):\n 1. card (older_seniors x n)\n    < card (reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink)", "by linarith"], ["proof (state)\nthis:\n  card (older_seniors x n)\n  < card (reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rank_upper_bound:\n  \"rank x n = Some i \\<Longrightarrow> i < max_rank\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rank x n = Some i \\<Longrightarrow> i < max_rank", "using older_seniors_card_bounded"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> sink (token_run ?x ?n); ?x \\<le> ?n\\<rbrakk>\n  \\<Longrightarrow> card (older_seniors ?x ?n)\n                    < card\n                       (reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink)\n\ngoal (1 subgoal):\n 1. rank x n = Some i \\<Longrightarrow> i < max_rank", "unfolding max_rank_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> sink (token_run ?x ?n); ?x \\<le> ?n\\<rbrakk>\n  \\<Longrightarrow> card (older_seniors ?x ?n)\n                    < card\n                       (reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink)\n\ngoal (1 subgoal):\n 1. rank x n = Some i \\<Longrightarrow>\n    i < card (reach \\<Sigma> \\<delta> q\\<^sub>0 - Collect sink)", "by (fast dest: rank_Some_card rank_Some_time rank_Some_sink )"], ["", "lemma rank_range:\n  \"\\<exists>i. range (rank x) \\<subseteq> {None} \\<union> Some ` {0..<i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i. range (rank x) \\<subseteq> {None} \\<union> Some ` {0..<i}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. range (rank x) \\<subseteq> {None} \\<union> Some ` {0..<?i}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. range (rank x) \\<subseteq> {None} \\<union> Some ` {0..<?i}", "fix i_option"], ["proof (state)\ngoal (1 subgoal):\n 1. range (rank x) \\<subseteq> {None} \\<union> Some ` {0..<?i}", "assume \"i_option \\<in> range (rank x)\""], ["proof (state)\nthis:\n  i_option \\<in> range (rank x)\n\ngoal (1 subgoal):\n 1. range (rank x) \\<subseteq> {None} \\<union> Some ` {0..<?i}", "hence \"i_option \\<in> {None} \\<union> Some ` {0..<max_rank}\""], ["proof (prove)\nusing this:\n  i_option \\<in> range (rank x)\n\ngoal (1 subgoal):\n 1. i_option \\<in> {None} \\<union> Some ` {0..<max_rank}", "proof (cases i_option)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i_option \\<in> range (rank x); i_option = None\\<rbrakk>\n    \\<Longrightarrow> i_option \\<in> {None} \\<union> Some ` {0..<max_rank}\n 2. \\<And>a.\n       \\<lbrakk>i_option \\<in> range (rank x); i_option = Some a\\<rbrakk>\n       \\<Longrightarrow> i_option\n                         \\<in> {None} \\<union> Some ` {0..<max_rank}", "case (Some i)"], ["proof (state)\nthis:\n  i_option = Some i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i_option \\<in> range (rank x); i_option = None\\<rbrakk>\n    \\<Longrightarrow> i_option \\<in> {None} \\<union> Some ` {0..<max_rank}\n 2. \\<And>a.\n       \\<lbrakk>i_option \\<in> range (rank x); i_option = Some a\\<rbrakk>\n       \\<Longrightarrow> i_option\n                         \\<in> {None} \\<union> Some ` {0..<max_rank}", "hence \"i \\<in> {0..<max_rank}\""], ["proof (prove)\nusing this:\n  i_option = Some i\n\ngoal (1 subgoal):\n 1. i \\<in> {0..<max_rank}", "using \\<open>i_option \\<in> range (rank x)\\<close> rank_upper_bound"], ["proof (prove)\nusing this:\n  i_option = Some i\n  i_option \\<in> range (rank x)\n  rank ?x ?n = Some ?i \\<Longrightarrow> ?i < max_rank\n\ngoal (1 subgoal):\n 1. i \\<in> {0..<max_rank}", "by force"], ["proof (state)\nthis:\n  i \\<in> {0..<max_rank}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i_option \\<in> range (rank x); i_option = None\\<rbrakk>\n    \\<Longrightarrow> i_option \\<in> {None} \\<union> Some ` {0..<max_rank}\n 2. \\<And>a.\n       \\<lbrakk>i_option \\<in> range (rank x); i_option = Some a\\<rbrakk>\n       \\<Longrightarrow> i_option\n                         \\<in> {None} \\<union> Some ` {0..<max_rank}", "thus ?thesis"], ["proof (prove)\nusing this:\n  i \\<in> {0..<max_rank}\n\ngoal (1 subgoal):\n 1. i_option \\<in> {None} \\<union> Some ` {0..<max_rank}", "using Some"], ["proof (prove)\nusing this:\n  i \\<in> {0..<max_rank}\n  i_option = Some i\n\ngoal (1 subgoal):\n 1. i_option \\<in> {None} \\<union> Some ` {0..<max_rank}", "by blast"], ["proof (state)\nthis:\n  i_option \\<in> {None} \\<union> Some ` {0..<max_rank}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i_option \\<in> range (rank x); i_option = None\\<rbrakk>\n    \\<Longrightarrow> i_option \\<in> {None} \\<union> Some ` {0..<max_rank}", "qed blast"], ["proof (state)\nthis:\n  i_option \\<in> {None} \\<union> Some ` {0..<max_rank}\n\ngoal (1 subgoal):\n 1. range (rank x) \\<subseteq> {None} \\<union> Some ` {0..<?i}", "}"], ["proof (state)\nthis:\n  ?i_option2 \\<in> range (rank x) \\<Longrightarrow>\n  ?i_option2 \\<in> {None} \\<union> Some ` {0..<max_rank}\n\ngoal (1 subgoal):\n 1. range (rank x) \\<subseteq> {None} \\<union> Some ` {0..<?i}", "thus \"range (rank x) \\<subseteq> ({None} \\<union> Some ` {0..<max_rank})\""], ["proof (prove)\nusing this:\n  ?i_option2 \\<in> range (rank x) \\<Longrightarrow>\n  ?i_option2 \\<in> {None} \\<union> Some ` {0..<max_rank}\n\ngoal (1 subgoal):\n 1. range (rank x) \\<subseteq> {None} \\<union> Some ` {0..<max_rank}", ".."], ["proof (state)\nthis:\n  range (rank x) \\<subseteq> {None} \\<union> Some ` {0..<max_rank}\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Monotonicity\\<close>"], ["", "lemma rank_monotonic:\n  \"\\<lbrakk>rank x n = Some i; rank x (n + m) = Some j\\<rbrakk> \\<Longrightarrow> i \\<ge> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rank x n = Some i; rank x (n + m) = Some j\\<rbrakk>\n    \\<Longrightarrow> j \\<le> i", "using card_older_seniors_monotonic rank_Some_card rank_Some_time"], ["proof (prove)\nusing this:\n  ?x \\<le> ?n \\<Longrightarrow>\n  card (older_seniors ?x (?n + ?m)) \\<le> card (older_seniors ?x ?n)\n  rank ?x ?n = Some ?j \\<Longrightarrow> card (older_seniors ?x ?n) = ?j\n  rank ?x ?n = Some ?j \\<Longrightarrow> ?x \\<le> ?n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rank x n = Some i; rank x (n + m) = Some j\\<rbrakk>\n    \\<Longrightarrow> j \\<le> i", "by metis"], ["", "subsubsection \\<open>Pull-Up and Push-Down\\<close>"], ["", "lemma pull_up_senior_rank:\n  \"\\<lbrakk>x \\<le> n; y \\<le> n; senior x n = senior y n\\<rbrakk> \\<Longrightarrow> rank x n = rank y n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> n; y \\<le> n; senior x n = senior y n\\<rbrakk>\n    \\<Longrightarrow> rank x n = rank y n", "by (metis senior_token_run rank.simps pull_up_senior_older_seniors)"], ["", "lemma pull_up_configuration_rank:\n  \"\\<lbrakk>x \\<in> configuration q n; y \\<in> configuration q n\\<rbrakk> \\<Longrightarrow> rank x n = rank y n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> configuration q n; y \\<in> configuration q n\\<rbrakk>\n    \\<Longrightarrow> rank x n = rank y n", "by force"], ["", "lemma push_down_rank_older_seniors:\n  \"\\<lbrakk>rank x n = rank y n; rank x n = Some i\\<rbrakk> \\<Longrightarrow> older_seniors x n = older_seniors y n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rank x n = rank y n; rank x n = Some i\\<rbrakk>\n    \\<Longrightarrow> older_seniors x n = older_seniors y n", "by (metis older_seniors_card option.distinct(2) option.sel rank.simps)"], ["", "lemma push_down_rank_senior:\n  \"\\<lbrakk>rank x n = rank y n; rank x n = Some i\\<rbrakk> \\<Longrightarrow> senior x n = senior y n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rank x n = rank y n; rank x n = Some i\\<rbrakk>\n    \\<Longrightarrow> senior x n = senior y n", "by (metis push_down_rank_older_seniors push_down_older_seniors_senior option.distinct(1) rank.elims)"], ["", "lemma push_down_rank_tokens:\n  \"\\<lbrakk>rank x n = rank y n; rank x n = Some i\\<rbrakk> \\<Longrightarrow> (\\<exists>q. x \\<in> configuration q n \\<and> y \\<in> configuration q n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rank x n = rank y n; rank x n = Some i\\<rbrakk>\n    \\<Longrightarrow> \\<exists>q.\n                         x \\<in> configuration q n \\<and>\n                         y \\<in> configuration q n", "by (metis push_down_senior_tokens rank_Some_time push_down_rank_senior)"], ["", "subsubsection \\<open>Pulled-Up Lemmas\\<close>"], ["", "lemma rank_senior_senior:\n  \"x \\<le> n \\<Longrightarrow> rank (senior x n) n = rank x n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> n \\<Longrightarrow> rank (senior x n) n = rank x n", "by (metis le_iff_add add.commute add.left_commute pull_up_senior_rank senior_le_token senior_senior)"], ["", "subsubsection \\<open>Stable Rank\\<close>"], ["", "definition stable_rank :: \"nat \\<Rightarrow> nat \\<Rightarrow> bool\"\nwhere\n  \"stable_rank x i = (\\<forall>\\<^sub>\\<infinity>n. rank x n = Some i)\""], ["", "lemma stable_rank_unique:\n  assumes \"stable_rank x i\"\n  assumes \"stable_rank x j\"\n  shows \"i = j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i = j", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. i = j", "from assms"], ["proof (chain)\npicking this:\n  stable_rank x i\n  stable_rank x j", "obtain n m where \"\\<And>n'. n' \\<ge> n \\<Longrightarrow> rank x n' = Some i\"\n    and \"\\<And>m'. m' \\<ge> m \\<Longrightarrow> rank x m' = Some j\""], ["proof (prove)\nusing this:\n  stable_rank x i\n  stable_rank x j\n\ngoal (1 subgoal):\n 1. (\\<And>n m.\n        \\<lbrakk>\\<And>n'. n \\<le> n' \\<Longrightarrow> rank x n' = Some i;\n         \\<And>m'. m \\<le> m' \\<Longrightarrow> rank x m' = Some j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding stable_rank_def MOST_nat_le"], ["proof (prove)\nusing this:\n  \\<exists>m. \\<forall>n\\<ge>m. rank x n = Some i\n  \\<exists>m. \\<forall>n\\<ge>m. rank x n = Some j\n\ngoal (1 subgoal):\n 1. (\\<And>n m.\n        \\<lbrakk>\\<And>n'. n \\<le> n' \\<Longrightarrow> rank x n' = Some i;\n         \\<And>m'. m \\<le> m' \\<Longrightarrow> rank x m' = Some j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  n \\<le> ?n' \\<Longrightarrow> rank x ?n' = Some i\n  m \\<le> ?m' \\<Longrightarrow> rank x ?m' = Some j\n\ngoal (1 subgoal):\n 1. i = j", "hence \"rank x (n + m) = Some i\" and \"rank x (n + m) = Some j\""], ["proof (prove)\nusing this:\n  n \\<le> ?n' \\<Longrightarrow> rank x ?n' = Some i\n  m \\<le> ?m' \\<Longrightarrow> rank x ?m' = Some j\n\ngoal (1 subgoal):\n 1. rank x (n + m) = Some i &&& rank x (n + m) = Some j", "by (metis add.commute le_add1)+"], ["proof (state)\nthis:\n  rank x (n + m) = Some i\n  rank x (n + m) = Some j\n\ngoal (1 subgoal):\n 1. i = j", "thus ?thesis"], ["proof (prove)\nusing this:\n  rank x (n + m) = Some i\n  rank x (n + m) = Some j\n\ngoal (1 subgoal):\n 1. i = j", "by simp"], ["proof (state)\nthis:\n  i = j\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma stable_rank_equiv_token_squats:\n  \"token_squats x = (\\<exists>i. stable_rank x i)\"\n  (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. token_squats x = (\\<exists>i. stable_rank x i)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. token_squats x \\<Longrightarrow> \\<exists>i. stable_rank x i\n 2. \\<exists>i. stable_rank x i \\<Longrightarrow> token_squats x", "assume ?lhs"], ["proof (state)\nthis:\n  token_squats x\n\ngoal (2 subgoals):\n 1. token_squats x \\<Longrightarrow> \\<exists>i. stable_rank x i\n 2. \\<exists>i. stable_rank x i \\<Longrightarrow> token_squats x", "define ranks where \"ranks = {j | j n. rank x n = Some j}\""], ["proof (state)\nthis:\n  ranks = {uu_. \\<exists>j n. uu_ = j \\<and> rank x n = Some j}\n\ngoal (2 subgoals):\n 1. token_squats x \\<Longrightarrow> \\<exists>i. stable_rank x i\n 2. \\<exists>i. stable_rank x i \\<Longrightarrow> token_squats x", "hence \"ranks \\<subseteq> {0..<max_rank}\" and \"the (rank x x) \\<in> ranks\""], ["proof (prove)\nusing this:\n  ranks = {uu_. \\<exists>j n. uu_ = j \\<and> rank x n = Some j}\n\ngoal (1 subgoal):\n 1. ranks \\<subseteq> {0..<max_rank} &&& the (rank x x) \\<in> ranks", "using rank_upper_bound rank_initial[of x]"], ["proof (prove)\nusing this:\n  ranks = {uu_. \\<exists>j n. uu_ = j \\<and> rank x n = Some j}\n  rank ?x ?n = Some ?i \\<Longrightarrow> ?i < max_rank\n  \\<exists>i. rank x x = Some i\n\ngoal (1 subgoal):\n 1. ranks \\<subseteq> {0..<max_rank} &&& the (rank x x) \\<in> ranks", "unfolding ranks_def"], ["proof (prove)\nusing this:\n  {uu_. \\<exists>j n. uu_ = j \\<and> rank x n = Some j} =\n  {uu_. \\<exists>j n. uu_ = j \\<and> rank x n = Some j}\n  rank ?x ?n = Some ?i \\<Longrightarrow> ?i < max_rank\n  \\<exists>i. rank x x = Some i\n\ngoal (1 subgoal):\n 1. {uu_. \\<exists>j n. uu_ = j \\<and> rank x n = Some j}\n    \\<subseteq> {0..<max_rank} &&&\n    the (rank x x)\n    \\<in> {uu_. \\<exists>j n. uu_ = j \\<and> rank x n = Some j}", "by fastforce+"], ["proof (state)\nthis:\n  ranks \\<subseteq> {0..<max_rank}\n  the (rank x x) \\<in> ranks\n\ngoal (2 subgoals):\n 1. token_squats x \\<Longrightarrow> \\<exists>i. stable_rank x i\n 2. \\<exists>i. stable_rank x i \\<Longrightarrow> token_squats x", "(* Takes roughly 10s *)"], ["proof (state)\nthis:\n  ranks \\<subseteq> {0..<max_rank}\n  the (rank x x) \\<in> ranks\n\ngoal (2 subgoals):\n 1. token_squats x \\<Longrightarrow> \\<exists>i. stable_rank x i\n 2. \\<exists>i. stable_rank x i \\<Longrightarrow> token_squats x", "hence \"finite ranks\" and \"ranks \\<noteq> {}\""], ["proof (prove)\nusing this:\n  ranks \\<subseteq> {0..<max_rank}\n  the (rank x x) \\<in> ranks\n\ngoal (1 subgoal):\n 1. finite ranks &&& ranks \\<noteq> {}", "using finite_reach finite_atLeastAtMost infinite_super"], ["proof (prove)\nusing this:\n  ranks \\<subseteq> {0..<max_rank}\n  the (rank x x) \\<in> ranks\n  finite (reach \\<Sigma> \\<delta> q\\<^sub>0)\n  finite {?l..?u}\n  \\<lbrakk>?S \\<subseteq> ?T; infinite ?S\\<rbrakk>\n  \\<Longrightarrow> infinite ?T\n\ngoal (1 subgoal):\n 1. finite ranks &&& ranks \\<noteq> {}", "by fast+"], ["proof (state)\nthis:\n  finite ranks\n  ranks \\<noteq> {}\n\ngoal (2 subgoals):\n 1. token_squats x \\<Longrightarrow> \\<exists>i. stable_rank x i\n 2. \\<exists>i. stable_rank x i \\<Longrightarrow> token_squats x", "define i where \"i = Min ranks\""], ["proof (state)\nthis:\n  i = Min ranks\n\ngoal (2 subgoals):\n 1. token_squats x \\<Longrightarrow> \\<exists>i. stable_rank x i\n 2. \\<exists>i. stable_rank x i \\<Longrightarrow> token_squats x", "obtain n where \"rank x n = Some i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n. rank x n = Some i \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Min_in[OF \\<open>finite ranks\\<close> \\<open>ranks \\<noteq> {}\\<close>]"], ["proof (prove)\nusing this:\n  Min ranks \\<in> ranks\n\ngoal (1 subgoal):\n 1. (\\<And>n. rank x n = Some i \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding i_def ranks_def"], ["proof (prove)\nusing this:\n  Min {uu_. \\<exists>j n. uu_ = j \\<and> rank x n = Some j}\n  \\<in> {uu_. \\<exists>j n. uu_ = j \\<and> rank x n = Some j}\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        rank x n =\n        Some\n         (Min {uu_.\n               \\<exists>j n.\n                  uu_ = j \\<and> rank x n = Some j}) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  rank x n = Some i\n\ngoal (2 subgoals):\n 1. token_squats x \\<Longrightarrow> \\<exists>i. stable_rank x i\n 2. \\<exists>i. stable_rank x i \\<Longrightarrow> token_squats x", "have \"\\<And>j. j \\<in> ranks \\<Longrightarrow> j \\<ge> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j. j \\<in> ranks \\<Longrightarrow> i \\<le> j", "using Min_in[OF \\<open>finite ranks\\<close> \\<open>ranks \\<noteq> {}\\<close>]"], ["proof (prove)\nusing this:\n  Min ranks \\<in> ranks\n\ngoal (1 subgoal):\n 1. \\<And>j. j \\<in> ranks \\<Longrightarrow> i \\<le> j", "unfolding i_def"], ["proof (prove)\nusing this:\n  Min ranks \\<in> ranks\n\ngoal (1 subgoal):\n 1. \\<And>j. j \\<in> ranks \\<Longrightarrow> Min ranks \\<le> j", "by (metis Min.coboundedI \\<open>finite ranks\\<close>)"], ["proof (state)\nthis:\n  ?j \\<in> ranks \\<Longrightarrow> i \\<le> ?j\n\ngoal (2 subgoals):\n 1. token_squats x \\<Longrightarrow> \\<exists>i. stable_rank x i\n 2. \\<exists>i. stable_rank x i \\<Longrightarrow> token_squats x", "hence \"\\<And>m j. rank x (n + m) = Some j \\<Longrightarrow> j \\<ge> i\""], ["proof (prove)\nusing this:\n  ?j \\<in> ranks \\<Longrightarrow> i \\<le> ?j\n\ngoal (1 subgoal):\n 1. \\<And>m j. rank x (n + m) = Some j \\<Longrightarrow> i \\<le> j", "unfolding ranks_def"], ["proof (prove)\nusing this:\n  ?j \\<in> {uu_.\n            \\<exists>j n.\n               uu_ = j \\<and> rank x n = Some j} \\<Longrightarrow>\n  i \\<le> ?j\n\ngoal (1 subgoal):\n 1. \\<And>m j. rank x (n + m) = Some j \\<Longrightarrow> i \\<le> j", "by blast"], ["proof (state)\nthis:\n  rank x (n + ?m) = Some ?j \\<Longrightarrow> i \\<le> ?j\n\ngoal (2 subgoals):\n 1. token_squats x \\<Longrightarrow> \\<exists>i. stable_rank x i\n 2. \\<exists>i. stable_rank x i \\<Longrightarrow> token_squats x", "moreover"], ["proof (state)\nthis:\n  rank x (n + ?m) = Some ?j \\<Longrightarrow> i \\<le> ?j\n\ngoal (2 subgoals):\n 1. token_squats x \\<Longrightarrow> \\<exists>i. stable_rank x i\n 2. \\<exists>i. stable_rank x i \\<Longrightarrow> token_squats x", "have \"\\<And>m j. rank x (n + m) = Some j \\<Longrightarrow> j \\<le> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m j. rank x (n + m) = Some j \\<Longrightarrow> j \\<le> i", "using rank_monotonic[OF \\<open>rank x n = Some i\\<close>]"], ["proof (prove)\nusing this:\n  rank x (n + ?m) = Some ?j \\<Longrightarrow> ?j \\<le> i\n\ngoal (1 subgoal):\n 1. \\<And>m j. rank x (n + m) = Some j \\<Longrightarrow> j \\<le> i", "by blast"], ["proof (state)\nthis:\n  rank x (n + ?m) = Some ?j \\<Longrightarrow> ?j \\<le> i\n\ngoal (2 subgoals):\n 1. token_squats x \\<Longrightarrow> \\<exists>i. stable_rank x i\n 2. \\<exists>i. stable_rank x i \\<Longrightarrow> token_squats x", "moreover"], ["proof (state)\nthis:\n  rank x (n + ?m) = Some ?j \\<Longrightarrow> ?j \\<le> i\n\ngoal (2 subgoals):\n 1. token_squats x \\<Longrightarrow> \\<exists>i. stable_rank x i\n 2. \\<exists>i. stable_rank x i \\<Longrightarrow> token_squats x", "have \"\\<And>m. \\<exists>j. rank x (n + m) = Some j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m. \\<exists>j. rank x (n + m) = Some j", "using rank_token_squats[OF \\<open>?lhs\\<close>] rank_Some_time[OF \\<open>rank x n = Some i\\<close>]"], ["proof (prove)\nusing this:\n  x \\<le> ?n \\<Longrightarrow> \\<exists>i. rank x ?n = Some i\n  x \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>m. \\<exists>j. rank x (n + m) = Some j", "by simp"], ["proof (state)\nthis:\n  \\<exists>j. rank x (n + ?m) = Some j\n\ngoal (2 subgoals):\n 1. token_squats x \\<Longrightarrow> \\<exists>i. stable_rank x i\n 2. \\<exists>i. stable_rank x i \\<Longrightarrow> token_squats x", "ultimately"], ["proof (chain)\npicking this:\n  rank x (n + ?m) = Some ?j \\<Longrightarrow> i \\<le> ?j\n  rank x (n + ?m) = Some ?j \\<Longrightarrow> ?j \\<le> i\n  \\<exists>j. rank x (n + ?m) = Some j", "have \"\\<And>m. rank x (n + m) = Some i\""], ["proof (prove)\nusing this:\n  rank x (n + ?m) = Some ?j \\<Longrightarrow> i \\<le> ?j\n  rank x (n + ?m) = Some ?j \\<Longrightarrow> ?j \\<le> i\n  \\<exists>j. rank x (n + ?m) = Some j\n\ngoal (1 subgoal):\n 1. \\<And>m. rank x (n + m) = Some i", "by (metis le_antisym)"], ["proof (state)\nthis:\n  rank x (n + ?m) = Some i\n\ngoal (2 subgoals):\n 1. token_squats x \\<Longrightarrow> \\<exists>i. stable_rank x i\n 2. \\<exists>i. stable_rank x i \\<Longrightarrow> token_squats x", "thus ?rhs"], ["proof (prove)\nusing this:\n  rank x (n + ?m) = Some i\n\ngoal (1 subgoal):\n 1. \\<exists>i. stable_rank x i", "unfolding stable_rank_def MOST_nat_le"], ["proof (prove)\nusing this:\n  rank x (n + ?m) = Some i\n\ngoal (1 subgoal):\n 1. \\<exists>i m. \\<forall>n\\<ge>m. rank x n = Some i", "by (metis le_iff_add)"], ["proof (state)\nthis:\n  \\<exists>i. stable_rank x i\n\ngoal (1 subgoal):\n 1. \\<exists>i. stable_rank x i \\<Longrightarrow> token_squats x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>i. stable_rank x i \\<Longrightarrow> token_squats x", "assume ?rhs"], ["proof (state)\nthis:\n  \\<exists>i. stable_rank x i\n\ngoal (1 subgoal):\n 1. \\<exists>i. stable_rank x i \\<Longrightarrow> token_squats x", "thus ?lhs"], ["proof (prove)\nusing this:\n  \\<exists>i. stable_rank x i\n\ngoal (1 subgoal):\n 1. token_squats x", "unfolding token_squats_def stable_rank_def MOST_nat_le"], ["proof (prove)\nusing this:\n  \\<exists>i m. \\<forall>n\\<ge>m. rank x n = Some i\n\ngoal (1 subgoal):\n 1. \\<forall>n. \\<not> sink (token_run x n)", "by (metis le_add2 rank_Some_sink token_stays_in_sink)"], ["proof (state)\nthis:\n  token_squats x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma stable_rank_same_tokens:\n  assumes \"stable_rank x i\"\n  assumes \"stable_rank y j\"\n  assumes \"x \\<in> configuration q n\"\n  assumes \"y \\<in> configuration q n\"\n  shows \"i = j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i = j", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. i = j", "from assms(1)"], ["proof (chain)\npicking this:\n  stable_rank x i", "obtain n_i where \"n_i \\<ge> n\" and \"\\<forall>t \\<ge> n_i. rank x t = Some i\""], ["proof (prove)\nusing this:\n  stable_rank x i\n\ngoal (1 subgoal):\n 1. (\\<And>n_i.\n        \\<lbrakk>n \\<le> n_i; \\<forall>t\\<ge>n_i. rank x t = Some i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding stable_rank_def MOST_nat_le"], ["proof (prove)\nusing this:\n  \\<exists>m. \\<forall>n\\<ge>m. rank x n = Some i\n\ngoal (1 subgoal):\n 1. (\\<And>n_i.\n        \\<lbrakk>n \\<le> n_i; \\<forall>t\\<ge>n_i. rank x t = Some i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis linear order_trans)"], ["proof (state)\nthis:\n  n \\<le> n_i\n  \\<forall>t\\<ge>n_i. rank x t = Some i\n\ngoal (1 subgoal):\n 1. i = j", "moreover"], ["proof (state)\nthis:\n  n \\<le> n_i\n  \\<forall>t\\<ge>n_i. rank x t = Some i\n\ngoal (1 subgoal):\n 1. i = j", "from assms(2)"], ["proof (chain)\npicking this:\n  stable_rank y j", "obtain n_j where \"n_j \\<ge> n\" and \"\\<forall>t \\<ge> n_j. rank y t = Some j\""], ["proof (prove)\nusing this:\n  stable_rank y j\n\ngoal (1 subgoal):\n 1. (\\<And>n_j.\n        \\<lbrakk>n \\<le> n_j; \\<forall>t\\<ge>n_j. rank y t = Some j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding stable_rank_def MOST_nat_le"], ["proof (prove)\nusing this:\n  \\<exists>m. \\<forall>n\\<ge>m. rank y n = Some j\n\ngoal (1 subgoal):\n 1. (\\<And>n_j.\n        \\<lbrakk>n \\<le> n_j; \\<forall>t\\<ge>n_j. rank y t = Some j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis linear order_trans)"], ["proof (state)\nthis:\n  n \\<le> n_j\n  \\<forall>t\\<ge>n_j. rank y t = Some j\n\ngoal (1 subgoal):\n 1. i = j", "moreover"], ["proof (state)\nthis:\n  n \\<le> n_j\n  \\<forall>t\\<ge>n_j. rank y t = Some j\n\ngoal (1 subgoal):\n 1. i = j", "define m where \"m = max n_i n_j\""], ["proof (state)\nthis:\n  m = max n_i n_j\n\ngoal (1 subgoal):\n 1. i = j", "ultimately"], ["proof (chain)\npicking this:\n  n \\<le> n_i\n  \\<forall>t\\<ge>n_i. rank x t = Some i\n  n \\<le> n_j\n  \\<forall>t\\<ge>n_j. rank y t = Some j\n  m = max n_i n_j", "have \"rank x m = Some i\" and \"rank y m = Some j\""], ["proof (prove)\nusing this:\n  n \\<le> n_i\n  \\<forall>t\\<ge>n_i. rank x t = Some i\n  n \\<le> n_j\n  \\<forall>t\\<ge>n_j. rank y t = Some j\n  m = max n_i n_j\n\ngoal (1 subgoal):\n 1. rank x m = Some i &&& rank y m = Some j", "by (metis max.bounded_iff order_refl)+"], ["proof (state)\nthis:\n  rank x m = Some i\n  rank y m = Some j\n\ngoal (1 subgoal):\n 1. i = j", "moreover"], ["proof (state)\nthis:\n  rank x m = Some i\n  rank y m = Some j\n\ngoal (1 subgoal):\n 1. i = j", "have \"m \\<ge> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> m", "by (metis \\<open>n \\<le> n_j\\<close> le_trans max.cobounded2 m_def)"], ["proof (state)\nthis:\n  n \\<le> m\n\ngoal (1 subgoal):\n 1. i = j", "have \"\\<exists>q'. x \\<in> configuration q' m \\<and> y \\<in> configuration q' m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>q'.\n       x \\<in> configuration q' m \\<and> y \\<in> configuration q' m", "using push_down_configuration_token_run[OF assms(3,4)]"], ["proof (prove)\nusing this:\n  x \\<le> n \\<and> y \\<le> n \\<and> token_run x n = token_run y n\n\ngoal (1 subgoal):\n 1. \\<exists>q'.\n       x \\<in> configuration q' m \\<and> y \\<in> configuration q' m", "using token_run_merge[of x n y]"], ["proof (prove)\nusing this:\n  x \\<le> n \\<and> y \\<le> n \\<and> token_run x n = token_run y n\n  \\<lbrakk>x \\<le> n; y \\<le> n; token_run x n = token_run y n\\<rbrakk>\n  \\<Longrightarrow> token_run x (n + ?m) = token_run y (n + ?m)\n\ngoal (1 subgoal):\n 1. \\<exists>q'.\n       x \\<in> configuration q' m \\<and> y \\<in> configuration q' m", "using pull_up_token_run_tokens[of x m y]"], ["proof (prove)\nusing this:\n  x \\<le> n \\<and> y \\<le> n \\<and> token_run x n = token_run y n\n  \\<lbrakk>x \\<le> n; y \\<le> n; token_run x n = token_run y n\\<rbrakk>\n  \\<Longrightarrow> token_run x (n + ?m) = token_run y (n + ?m)\n  \\<lbrakk>x \\<le> m; y \\<le> m; token_run x m = token_run y m\\<rbrakk>\n  \\<Longrightarrow> \\<exists>q.\n                       x \\<in> configuration q m \\<and>\n                       y \\<in> configuration q m\n\ngoal (1 subgoal):\n 1. \\<exists>q'.\n       x \\<in> configuration q' m \\<and> y \\<in> configuration q' m", "using \\<open>m \\<ge> n\\<close>[unfolded le_iff_add]"], ["proof (prove)\nusing this:\n  x \\<le> n \\<and> y \\<le> n \\<and> token_run x n = token_run y n\n  \\<lbrakk>x \\<le> n; y \\<le> n; token_run x n = token_run y n\\<rbrakk>\n  \\<Longrightarrow> token_run x (n + ?m) = token_run y (n + ?m)\n  \\<lbrakk>x \\<le> m; y \\<le> m; token_run x m = token_run y m\\<rbrakk>\n  \\<Longrightarrow> \\<exists>q.\n                       x \\<in> configuration q m \\<and>\n                       y \\<in> configuration q m\n  \\<exists>c. m = n + c\n\ngoal (1 subgoal):\n 1. \\<exists>q'.\n       x \\<in> configuration q' m \\<and> y \\<in> configuration q' m", "by force"], ["proof (state)\nthis:\n  \\<exists>q'. x \\<in> configuration q' m \\<and> y \\<in> configuration q' m\n\ngoal (1 subgoal):\n 1. i = j", "ultimately"], ["proof (chain)\npicking this:\n  rank x m = Some i\n  rank y m = Some j\n  \\<exists>q'. x \\<in> configuration q' m \\<and> y \\<in> configuration q' m", "show ?thesis"], ["proof (prove)\nusing this:\n  rank x m = Some i\n  rank y m = Some j\n  \\<exists>q'. x \\<in> configuration q' m \\<and> y \\<in> configuration q' m\n\ngoal (1 subgoal):\n 1. i = j", "using pull_up_configuration_rank"], ["proof (prove)\nusing this:\n  rank x m = Some i\n  rank y m = Some j\n  \\<exists>q'. x \\<in> configuration q' m \\<and> y \\<in> configuration q' m\n  \\<lbrakk>?x \\<in> configuration ?q ?n;\n   ?y \\<in> configuration ?q ?n\\<rbrakk>\n  \\<Longrightarrow> rank ?x ?n = rank ?y ?n\n\ngoal (1 subgoal):\n 1. i = j", "by (metis option.inject)"], ["proof (state)\nthis:\n  i = j\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Tower Lemma\\<close>"], ["", "lemma rank_tower:\n  assumes \"i \\<le> j\"\n  assumes \"rank x n = Some j\"\n  assumes \"rank x (n + m) = Some j\"\n  assumes \"rank y n = Some i\"\n  shows \"rank y (n + m) = Some i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rank y (n + m) = Some i", "proof (cases i j rule: linorder_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. i < j \\<Longrightarrow> rank y (n + m) = Some i\n 2. i = j \\<Longrightarrow> rank y (n + m) = Some i\n 3. j < i \\<Longrightarrow> rank y (n + m) = Some i", "case less"], ["proof (state)\nthis:\n  i < j\n\ngoal (3 subgoals):\n 1. i < j \\<Longrightarrow> rank y (n + m) = Some i\n 2. i = j \\<Longrightarrow> rank y (n + m) = Some i\n 3. j < i \\<Longrightarrow> rank y (n + m) = Some i", "{"], ["proof (state)\nthis:\n  i < j\n\ngoal (3 subgoals):\n 1. i < j \\<Longrightarrow> rank y (n + m) = Some i\n 2. i = j \\<Longrightarrow> rank y (n + m) = Some i\n 3. j < i \\<Longrightarrow> rank y (n + m) = Some i", "hence \"card (older_seniors (senior y n) n) < card (older_seniors x n)\""], ["proof (prove)\nusing this:\n  i < j\n\ngoal (1 subgoal):\n 1. card (older_seniors (senior y n) n) < card (older_seniors x n)", "using assms rank_Some_card senior_same_state"], ["proof (prove)\nusing this:\n  i < j\n  i \\<le> j\n  rank x n = Some j\n  rank x (n + m) = Some j\n  rank y n = Some i\n  rank ?x ?n = Some ?j \\<Longrightarrow> card (older_seniors ?x ?n) = ?j\n  token_run (senior ?x ?n) ?n = token_run ?x ?n\n\ngoal (1 subgoal):\n 1. card (older_seniors (senior y n) n) < card (older_seniors x n)", "by force"], ["proof (state)\nthis:\n  card (older_seniors (senior y n) n) < card (older_seniors x n)\n\ngoal (3 subgoals):\n 1. i < j \\<Longrightarrow> rank y (n + m) = Some i\n 2. i = j \\<Longrightarrow> rank y (n + m) = Some i\n 3. j < i \\<Longrightarrow> rank y (n + m) = Some i", "hence \"senior y n \\<in> older_seniors x n\""], ["proof (prove)\nusing this:\n  card (older_seniors (senior y n) n) < card (older_seniors x n)\n\ngoal (1 subgoal):\n 1. senior y n \\<in> older_seniors x n", "by (metis older_seniors_card_le rank_Some_sink assms(4) older_seniors_senior_simp older_seniors_subset_2)"], ["proof (state)\nthis:\n  senior y n \\<in> older_seniors x n\n\ngoal (3 subgoals):\n 1. i < j \\<Longrightarrow> rank y (n + m) = Some i\n 2. i = j \\<Longrightarrow> rank y (n + m) = Some i\n 3. j < i \\<Longrightarrow> rank y (n + m) = Some i", "moreover"], ["proof (state)\nthis:\n  senior y n \\<in> older_seniors x n\n\ngoal (3 subgoals):\n 1. i < j \\<Longrightarrow> rank y (n + m) = Some i\n 2. i = j \\<Longrightarrow> rank y (n + m) = Some i\n 3. j < i \\<Longrightarrow> rank y (n + m) = Some i", "have \"older_seniors x n = older_seniors x (n + m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. older_seniors x n = older_seniors x (n + m)", "by (metis assms(2,3) rank_Some_card rank_Some_time card_subset_eq[OF older_seniors_finite] older_seniors_monotonic)"], ["proof (state)\nthis:\n  older_seniors x n = older_seniors x (n + m)\n\ngoal (3 subgoals):\n 1. i < j \\<Longrightarrow> rank y (n + m) = Some i\n 2. i = j \\<Longrightarrow> rank y (n + m) = Some i\n 3. j < i \\<Longrightarrow> rank y (n + m) = Some i", "ultimately"], ["proof (chain)\npicking this:\n  senior y n \\<in> older_seniors x n\n  older_seniors x n = older_seniors x (n + m)", "have \"older_seniors (senior y n) n = older_seniors (senior y n) (n + m)\" and \"senior y n \\<in> older_seniors x (n + m)\""], ["proof (prove)\nusing this:\n  senior y n \\<in> older_seniors x n\n  older_seniors x n = older_seniors x (n + m)\n\ngoal (1 subgoal):\n 1. older_seniors (senior y n) n = older_seniors (senior y n) (n + m) &&&\n    senior y n \\<in> older_seniors x (n + m)", "using older_seniors_tower rank_Some_time assms(2)"], ["proof (prove)\nusing this:\n  senior y n \\<in> older_seniors x n\n  older_seniors x n = older_seniors x (n + m)\n  \\<lbrakk>?x \\<le> ?n; ?y \\<in> older_seniors ?x ?n;\n   older_seniors ?x ?n = older_seniors ?x (?n + ?m)\\<rbrakk>\n  \\<Longrightarrow> older_seniors ?y ?n = older_seniors ?y (?n + ?m)\n  rank ?x ?n = Some ?j \\<Longrightarrow> ?x \\<le> ?n\n  rank x n = Some j\n\ngoal (1 subgoal):\n 1. older_seniors (senior y n) n = older_seniors (senior y n) (n + m) &&&\n    senior y n \\<in> older_seniors x (n + m)", "by blast+"], ["proof (state)\nthis:\n  older_seniors (senior y n) n = older_seniors (senior y n) (n + m)\n  senior y n \\<in> older_seniors x (n + m)\n\ngoal (3 subgoals):\n 1. i < j \\<Longrightarrow> rank y (n + m) = Some i\n 2. i = j \\<Longrightarrow> rank y (n + m) = Some i\n 3. j < i \\<Longrightarrow> rank y (n + m) = Some i", "}"], ["proof (state)\nthis:\n  older_seniors (senior y n) n = older_seniors (senior y n) (n + m)\n  senior y n \\<in> older_seniors x (n + m)\n\ngoal (3 subgoals):\n 1. i < j \\<Longrightarrow> rank y (n + m) = Some i\n 2. i = j \\<Longrightarrow> rank y (n + m) = Some i\n 3. j < i \\<Longrightarrow> rank y (n + m) = Some i", "moreover"], ["proof (state)\nthis:\n  older_seniors (senior y n) n = older_seniors (senior y n) (n + m)\n  senior y n \\<in> older_seniors x (n + m)\n\ngoal (3 subgoals):\n 1. i < j \\<Longrightarrow> rank y (n + m) = Some i\n 2. i = j \\<Longrightarrow> rank y (n + m) = Some i\n 3. j < i \\<Longrightarrow> rank y (n + m) = Some i", "have \"rank (senior y n) n = Some i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rank (senior y n) n = Some i", "by (metis assms(4) rank_Some_time rank_senior_senior)"], ["proof (state)\nthis:\n  rank (senior y n) n = Some i\n\ngoal (3 subgoals):\n 1. i < j \\<Longrightarrow> rank y (n + m) = Some i\n 2. i = j \\<Longrightarrow> rank y (n + m) = Some i\n 3. j < i \\<Longrightarrow> rank y (n + m) = Some i", "ultimately"], ["proof (chain)\npicking this:\n  older_seniors (senior y n) n = older_seniors (senior y n) (n + m)\n  senior y n \\<in> older_seniors x (n + m)\n  rank (senior y n) n = Some i", "have \"rank (senior y n) (n + m) = Some i\""], ["proof (prove)\nusing this:\n  older_seniors (senior y n) n = older_seniors (senior y n) (n + m)\n  senior y n \\<in> older_seniors x (n + m)\n  rank (senior y n) n = Some i\n\ngoal (1 subgoal):\n 1. rank (senior y n) (n + m) = Some i", "by (metis rank_older_seniors_bounded[OF _ assms(3)] rank_Some_card)"], ["proof (state)\nthis:\n  rank (senior y n) (n + m) = Some i\n\ngoal (3 subgoals):\n 1. i < j \\<Longrightarrow> rank y (n + m) = Some i\n 2. i = j \\<Longrightarrow> rank y (n + m) = Some i\n 3. j < i \\<Longrightarrow> rank y (n + m) = Some i", "moreover"], ["proof (state)\nthis:\n  rank (senior y n) (n + m) = Some i\n\ngoal (3 subgoals):\n 1. i < j \\<Longrightarrow> rank y (n + m) = Some i\n 2. i = j \\<Longrightarrow> rank y (n + m) = Some i\n 3. j < i \\<Longrightarrow> rank y (n + m) = Some i", "have \"senior y n \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. senior y n \\<le> n", "by (metis \\<open>rank (senior y n) n = Some i\\<close> rank_Some_time)"], ["proof (state)\nthis:\n  senior y n \\<le> n\n\ngoal (3 subgoals):\n 1. i < j \\<Longrightarrow> rank y (n + m) = Some i\n 2. i = j \\<Longrightarrow> rank y (n + m) = Some i\n 3. j < i \\<Longrightarrow> rank y (n + m) = Some i", "hence \"senior y n \\<in> configuration (token_run y (n + m)) (n + m)\""], ["proof (prove)\nusing this:\n  senior y n \\<le> n\n\ngoal (1 subgoal):\n 1. senior y n \\<in> configuration (token_run y (n + m)) (n + m)", "by (metis (full_types) token_run_merge[OF _ rank_Some_time[OF assms(4)] senior_same_state] configuration_token trans_le_add1)"], ["proof (state)\nthis:\n  senior y n \\<in> configuration (token_run y (n + m)) (n + m)\n\ngoal (3 subgoals):\n 1. i < j \\<Longrightarrow> rank y (n + m) = Some i\n 2. i = j \\<Longrightarrow> rank y (n + m) = Some i\n 3. j < i \\<Longrightarrow> rank y (n + m) = Some i", "ultimately"], ["proof (chain)\npicking this:\n  rank (senior y n) (n + m) = Some i\n  senior y n \\<in> configuration (token_run y (n + m)) (n + m)", "show ?thesis"], ["proof (prove)\nusing this:\n  rank (senior y n) (n + m) = Some i\n  senior y n \\<in> configuration (token_run y (n + m)) (n + m)\n\ngoal (1 subgoal):\n 1. rank y (n + m) = Some i", "by (metis pull_up_configuration_rank le_iff_add add.assoc assms(4) configuration_token rank_Some_time)"], ["proof (state)\nthis:\n  rank y (n + m) = Some i\n\ngoal (2 subgoals):\n 1. i = j \\<Longrightarrow> rank y (n + m) = Some i\n 2. j < i \\<Longrightarrow> rank y (n + m) = Some i", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. i = j \\<Longrightarrow> rank y (n + m) = Some i\n 2. j < i \\<Longrightarrow> rank y (n + m) = Some i", "case equal"], ["proof (state)\nthis:\n  i = j\n\ngoal (2 subgoals):\n 1. i = j \\<Longrightarrow> rank y (n + m) = Some i\n 2. j < i \\<Longrightarrow> rank y (n + m) = Some i", "hence \"x \\<le> n\" and \"y \\<le> n\" and \"token_run x n = token_run y n\""], ["proof (prove)\nusing this:\n  i = j\n\ngoal (1 subgoal):\n 1. x \\<le> n &&& y \\<le> n &&& token_run x n = token_run y n", "using assms(2-4) push_down_rank_tokens"], ["proof (prove)\nusing this:\n  i = j\n  rank x n = Some j\n  rank x (n + m) = Some j\n  rank y n = Some i\n  \\<lbrakk>rank ?x ?n = rank ?y ?n; rank ?x ?n = Some ?i\\<rbrakk>\n  \\<Longrightarrow> \\<exists>q.\n                       ?x \\<in> configuration q ?n \\<and>\n                       ?y \\<in> configuration q ?n\n\ngoal (1 subgoal):\n 1. x \\<le> n &&& y \\<le> n &&& token_run x n = token_run y n", "by force+"], ["proof (state)\nthis:\n  x \\<le> n\n  y \\<le> n\n  token_run x n = token_run y n\n\ngoal (2 subgoals):\n 1. i = j \\<Longrightarrow> rank y (n + m) = Some i\n 2. j < i \\<Longrightarrow> rank y (n + m) = Some i", "moreover"], ["proof (state)\nthis:\n  x \\<le> n\n  y \\<le> n\n  token_run x n = token_run y n\n\ngoal (2 subgoals):\n 1. i = j \\<Longrightarrow> rank y (n + m) = Some i\n 2. j < i \\<Longrightarrow> rank y (n + m) = Some i", "hence \"token_run x (n + m) = token_run y (n + m)\""], ["proof (prove)\nusing this:\n  x \\<le> n\n  y \\<le> n\n  token_run x n = token_run y n\n\ngoal (1 subgoal):\n 1. token_run x (n + m) = token_run y (n + m)", "using token_run_merge"], ["proof (prove)\nusing this:\n  x \\<le> n\n  y \\<le> n\n  token_run x n = token_run y n\n  \\<lbrakk>?x \\<le> ?n; ?y \\<le> ?n;\n   token_run ?x ?n = token_run ?y ?n\\<rbrakk>\n  \\<Longrightarrow> token_run ?x (?n + ?m) = token_run ?y (?n + ?m)\n\ngoal (1 subgoal):\n 1. token_run x (n + m) = token_run y (n + m)", "by blast"], ["proof (state)\nthis:\n  token_run x (n + m) = token_run y (n + m)\n\ngoal (2 subgoals):\n 1. i = j \\<Longrightarrow> rank y (n + m) = Some i\n 2. j < i \\<Longrightarrow> rank y (n + m) = Some i", "ultimately"], ["proof (chain)\npicking this:\n  x \\<le> n\n  y \\<le> n\n  token_run x n = token_run y n\n  token_run x (n + m) = token_run y (n + m)", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<le> n\n  y \\<le> n\n  token_run x n = token_run y n\n  token_run x (n + m) = token_run y (n + m)\n\ngoal (1 subgoal):\n 1. rank y (n + m) = Some i", "by (metis assms(3) equal rank_senior_senior senior_token_run le_iff_add add.assoc)"], ["proof (state)\nthis:\n  rank y (n + m) = Some i\n\ngoal (1 subgoal):\n 1. j < i \\<Longrightarrow> rank y (n + m) = Some i", "qed (insert \\<open>i \\<le> j\\<close>, linarith)"], ["", "lemma stable_rank_alt_def:\n  \"rank x n = Some j \\<and> stable_rank x j \\<longleftrightarrow> (\\<forall>m \\<ge> n. rank x m = Some j)\"\n  (is \"?rhs \\<longleftrightarrow> ?lhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rank x n = Some j \\<and> stable_rank x j) =\n    (\\<forall>m\\<ge>n. rank x m = Some j)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. rank x n = Some j \\<and> stable_rank x j \\<Longrightarrow>\n    \\<forall>m\\<ge>n. rank x m = Some j\n 2. \\<forall>m\\<ge>n. rank x m = Some j \\<Longrightarrow>\n    rank x n = Some j \\<and> stable_rank x j", "assume ?rhs"], ["proof (state)\nthis:\n  rank x n = Some j \\<and> stable_rank x j\n\ngoal (2 subgoals):\n 1. rank x n = Some j \\<and> stable_rank x j \\<Longrightarrow>\n    \\<forall>m\\<ge>n. rank x m = Some j\n 2. \\<forall>m\\<ge>n. rank x m = Some j \\<Longrightarrow>\n    rank x n = Some j \\<and> stable_rank x j", "then"], ["proof (chain)\npicking this:\n  rank x n = Some j \\<and> stable_rank x j", "obtain m' where \"\\<forall>m \\<ge> m'. rank x m = Some j\""], ["proof (prove)\nusing this:\n  rank x n = Some j \\<and> stable_rank x j\n\ngoal (1 subgoal):\n 1. (\\<And>m'.\n        \\<forall>m\\<ge>m'. rank x m = Some j \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding stable_rank_def MOST_nat_le"], ["proof (prove)\nusing this:\n  rank x n = Some j \\<and> (\\<exists>m. \\<forall>n\\<ge>m. rank x n = Some j)\n\ngoal (1 subgoal):\n 1. (\\<And>m'.\n        \\<forall>m\\<ge>m'. rank x m = Some j \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>m\\<ge>m'. rank x m = Some j\n\ngoal (2 subgoals):\n 1. rank x n = Some j \\<and> stable_rank x j \\<Longrightarrow>\n    \\<forall>m\\<ge>n. rank x m = Some j\n 2. \\<forall>m\\<ge>n. rank x m = Some j \\<Longrightarrow>\n    rank x n = Some j \\<and> stable_rank x j", "moreover"], ["proof (state)\nthis:\n  \\<forall>m\\<ge>m'. rank x m = Some j\n\ngoal (2 subgoals):\n 1. rank x n = Some j \\<and> stable_rank x j \\<Longrightarrow>\n    \\<forall>m\\<ge>n. rank x m = Some j\n 2. \\<forall>m\\<ge>n. rank x m = Some j \\<Longrightarrow>\n    rank x n = Some j \\<and> stable_rank x j", "hence \"rank x n = Some j\" and \"rank x m' = Some j\""], ["proof (prove)\nusing this:\n  \\<forall>m\\<ge>m'. rank x m = Some j\n\ngoal (1 subgoal):\n 1. rank x n = Some j &&& rank x m' = Some j", "using \\<open>?rhs\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>m\\<ge>m'. rank x m = Some j\n  rank x n = Some j \\<and> stable_rank x j\n\ngoal (1 subgoal):\n 1. rank x n = Some j &&& rank x m' = Some j", "by blast+"], ["proof (state)\nthis:\n  rank x n = Some j\n  rank x m' = Some j\n\ngoal (2 subgoals):\n 1. rank x n = Some j \\<and> stable_rank x j \\<Longrightarrow>\n    \\<forall>m\\<ge>n. rank x m = Some j\n 2. \\<forall>m\\<ge>n. rank x m = Some j \\<Longrightarrow>\n    rank x n = Some j \\<and> stable_rank x j", "{"], ["proof (state)\nthis:\n  rank x n = Some j\n  rank x m' = Some j\n\ngoal (2 subgoals):\n 1. rank x n = Some j \\<and> stable_rank x j \\<Longrightarrow>\n    \\<forall>m\\<ge>n. rank x m = Some j\n 2. \\<forall>m\\<ge>n. rank x m = Some j \\<Longrightarrow>\n    rank x n = Some j \\<and> stable_rank x j", "fix m"], ["proof (state)\ngoal (2 subgoals):\n 1. rank x n = Some j \\<and> stable_rank x j \\<Longrightarrow>\n    \\<forall>m\\<ge>n. rank x m = Some j\n 2. \\<forall>m\\<ge>n. rank x m = Some j \\<Longrightarrow>\n    rank x n = Some j \\<and> stable_rank x j", "assume \"n \\<le> n + m\" and \"n + m < m'\""], ["proof (state)\nthis:\n  n \\<le> n + m\n  n + m < m'\n\ngoal (2 subgoals):\n 1. rank x n = Some j \\<and> stable_rank x j \\<Longrightarrow>\n    \\<forall>m\\<ge>n. rank x m = Some j\n 2. \\<forall>m\\<ge>n. rank x m = Some j \\<Longrightarrow>\n    rank x n = Some j \\<and> stable_rank x j", "then"], ["proof (chain)\npicking this:\n  n \\<le> n + m\n  n + m < m'", "obtain j' where \"rank x (n + m) = Some j'\""], ["proof (prove)\nusing this:\n  n \\<le> n + m\n  n + m < m'\n\ngoal (1 subgoal):\n 1. (\\<And>j'.\n        rank x (n + m) = Some j' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis \\<open>?rhs\\<close> stable_rank_equiv_token_squats rank_Some_time rank_token_squats trans_le_add1)"], ["proof (state)\nthis:\n  rank x (n + m) = Some j'\n\ngoal (2 subgoals):\n 1. rank x n = Some j \\<and> stable_rank x j \\<Longrightarrow>\n    \\<forall>m\\<ge>n. rank x m = Some j\n 2. \\<forall>m\\<ge>n. rank x m = Some j \\<Longrightarrow>\n    rank x n = Some j \\<and> stable_rank x j", "moreover"], ["proof (state)\nthis:\n  rank x (n + m) = Some j'\n\ngoal (2 subgoals):\n 1. rank x n = Some j \\<and> stable_rank x j \\<Longrightarrow>\n    \\<forall>m\\<ge>n. rank x m = Some j\n 2. \\<forall>m\\<ge>n. rank x m = Some j \\<Longrightarrow>\n    rank x n = Some j \\<and> stable_rank x j", "hence \"j' \\<le> j\""], ["proof (prove)\nusing this:\n  rank x (n + m) = Some j'\n\ngoal (1 subgoal):\n 1. j' \\<le> j", "using \\<open>rank x n = Some j\\<close> rank_monotonic"], ["proof (prove)\nusing this:\n  rank x (n + m) = Some j'\n  rank x n = Some j\n  \\<lbrakk>rank ?x ?n = Some ?i; rank ?x (?n + ?m) = Some ?j\\<rbrakk>\n  \\<Longrightarrow> ?j \\<le> ?i\n\ngoal (1 subgoal):\n 1. j' \\<le> j", "by blast"], ["proof (state)\nthis:\n  j' \\<le> j\n\ngoal (2 subgoals):\n 1. rank x n = Some j \\<and> stable_rank x j \\<Longrightarrow>\n    \\<forall>m\\<ge>n. rank x m = Some j\n 2. \\<forall>m\\<ge>n. rank x m = Some j \\<Longrightarrow>\n    rank x n = Some j \\<and> stable_rank x j", "moreover"], ["proof (state)\nthis:\n  j' \\<le> j\n\ngoal (2 subgoals):\n 1. rank x n = Some j \\<and> stable_rank x j \\<Longrightarrow>\n    \\<forall>m\\<ge>n. rank x m = Some j\n 2. \\<forall>m\\<ge>n. rank x m = Some j \\<Longrightarrow>\n    rank x n = Some j \\<and> stable_rank x j", "have \"j \\<le> j'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j \\<le> j'", "using \\<open>rank x (n + m) = Some j'\\<close> \\<open>rank x m' = Some j\\<close>  \\<open>n + m < m'\\<close> rank_monotonic"], ["proof (prove)\nusing this:\n  rank x (n + m) = Some j'\n  rank x m' = Some j\n  n + m < m'\n  \\<lbrakk>rank ?x ?n = Some ?i; rank ?x (?n + ?m) = Some ?j\\<rbrakk>\n  \\<Longrightarrow> ?j \\<le> ?i\n\ngoal (1 subgoal):\n 1. j \\<le> j'", "by (metis add_Suc_right less_imp_Suc_add)"], ["proof (state)\nthis:\n  j \\<le> j'\n\ngoal (2 subgoals):\n 1. rank x n = Some j \\<and> stable_rank x j \\<Longrightarrow>\n    \\<forall>m\\<ge>n. rank x m = Some j\n 2. \\<forall>m\\<ge>n. rank x m = Some j \\<Longrightarrow>\n    rank x n = Some j \\<and> stable_rank x j", "ultimately"], ["proof (chain)\npicking this:\n  rank x (n + m) = Some j'\n  j' \\<le> j\n  j \\<le> j'", "have \"rank x (n + m) = Some j\""], ["proof (prove)\nusing this:\n  rank x (n + m) = Some j'\n  j' \\<le> j\n  j \\<le> j'\n\ngoal (1 subgoal):\n 1. rank x (n + m) = Some j", "by simp"], ["proof (state)\nthis:\n  rank x (n + m) = Some j\n\ngoal (2 subgoals):\n 1. rank x n = Some j \\<and> stable_rank x j \\<Longrightarrow>\n    \\<forall>m\\<ge>n. rank x m = Some j\n 2. \\<forall>m\\<ge>n. rank x m = Some j \\<Longrightarrow>\n    rank x n = Some j \\<and> stable_rank x j", "}"], ["proof (state)\nthis:\n  \\<lbrakk>n \\<le> n + ?m2; n + ?m2 < m'\\<rbrakk>\n  \\<Longrightarrow> rank x (n + ?m2) = Some j\n\ngoal (2 subgoals):\n 1. rank x n = Some j \\<and> stable_rank x j \\<Longrightarrow>\n    \\<forall>m\\<ge>n. rank x m = Some j\n 2. \\<forall>m\\<ge>n. rank x m = Some j \\<Longrightarrow>\n    rank x n = Some j \\<and> stable_rank x j", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>m\\<ge>m'. rank x m = Some j\n  \\<lbrakk>n \\<le> n + ?m2; n + ?m2 < m'\\<rbrakk>\n  \\<Longrightarrow> rank x (n + ?m2) = Some j", "show ?lhs"], ["proof (prove)\nusing this:\n  \\<forall>m\\<ge>m'. rank x m = Some j\n  \\<lbrakk>n \\<le> n + ?m2; n + ?m2 < m'\\<rbrakk>\n  \\<Longrightarrow> rank x (n + ?m2) = Some j\n\ngoal (1 subgoal):\n 1. \\<forall>m\\<ge>n. rank x m = Some j", "by (metis le_add_diff_inverse not_le)"], ["proof (state)\nthis:\n  \\<forall>m\\<ge>n. rank x m = Some j\n\ngoal (1 subgoal):\n 1. \\<forall>m\\<ge>n. rank x m = Some j \\<Longrightarrow>\n    rank x n = Some j \\<and> stable_rank x j", "qed (unfold stable_rank_def MOST_nat_le, blast)"], ["", "lemma stable_rank_tower:\n  assumes \"j \\<le> i\"\n  assumes \"rank x n = Some j\"\n  assumes \"rank y n = Some i\"\n  assumes \"stable_rank y i\"\n  shows \"stable_rank x j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stable_rank x j", "using assms rank_tower[OF \\<open>j \\<le> i\\<close>] stable_rank_alt_def[of y n i]"], ["proof (prove)\nusing this:\n  j \\<le> i\n  rank x n = Some j\n  rank y n = Some i\n  stable_rank y i\n  \\<lbrakk>rank ?x ?n = Some i; rank ?x (?n + ?m) = Some i;\n   rank ?y ?n = Some j\\<rbrakk>\n  \\<Longrightarrow> rank ?y (?n + ?m) = Some j\n  (rank y n = Some i \\<and> stable_rank y i) =\n  (\\<forall>m\\<ge>n. rank y m = Some i)\n\ngoal (1 subgoal):\n 1. stable_rank x j", "unfolding stable_rank_def[of x j, unfolded MOST_nat_le]"], ["proof (prove)\nusing this:\n  j \\<le> i\n  rank x n = Some j\n  rank y n = Some i\n  stable_rank y i\n  \\<lbrakk>rank ?x ?n = Some i; rank ?x (?n + ?m) = Some i;\n   rank ?y ?n = Some j\\<rbrakk>\n  \\<Longrightarrow> rank ?y (?n + ?m) = Some j\n  (rank y n = Some i \\<and> stable_rank y i) =\n  (\\<forall>m\\<ge>n. rank y m = Some i)\n\ngoal (1 subgoal):\n 1. \\<exists>m. \\<forall>n\\<ge>m. rank x n = Some j", "by (metis le_Suc_ex)"], ["", "subsection \\<open>Senior States\\<close>"], ["", "lemma senior_states_initial:\n  \"senior_states q 0 = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. senior_states q 0 = {}", "by simp"], ["", "lemma senior_states_cases_subseteq [case_names le ge]:\n  assumes \"senior_states p n \\<subseteq> senior_states q n \\<Longrightarrow> P\"\n  assumes \"senior_states p n \\<supseteq> senior_states q n \\<Longrightarrow> P\"\n  shows \"P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "using assms"], ["proof (prove)\nusing this:\n  senior_states p n \\<subseteq> senior_states q n \\<Longrightarrow> P\n  senior_states q n \\<subseteq> senior_states p n \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. P", "by force"], ["", "lemma senior_states_cases_subset [case_names less equal greater]:\n  assumes \"senior_states p n \\<subset> senior_states q n \\<Longrightarrow> P\"\n  assumes \"senior_states p n = senior_states q n \\<Longrightarrow> P\"\n  assumes \"senior_states p n \\<supset> senior_states q n \\<Longrightarrow> P\"\n  shows \"P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "using assms senior_states_cases_subseteq"], ["proof (prove)\nusing this:\n  senior_states p n \\<subset> senior_states q n \\<Longrightarrow> P\n  senior_states p n = senior_states q n \\<Longrightarrow> P\n  senior_states q n \\<subset> senior_states p n \\<Longrightarrow> P\n  \\<lbrakk>senior_states ?p ?n\n           \\<subseteq> senior_states ?q ?n \\<Longrightarrow>\n           ?P;\n   senior_states ?q ?n \\<subseteq> senior_states ?p ?n \\<Longrightarrow>\n   ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. P", "by blast"], ["", "lemma senior_states_finite:\n  \"finite (senior_states q n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (senior_states q n)", "by fastforce"], ["", "lemmas senior_states_card_mono = card_mono[OF senior_states_finite]"], ["", "lemmas senior_states_psubset_card_mono = psubset_card_mono[OF senior_states_finite]"], ["", "lemma senior_states_card:\n  \"card (senior_states p n) = card (senior_states q n) \\<longleftrightarrow> senior_states p n = senior_states q n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (card (senior_states p n) = card (senior_states q n)) =\n    (senior_states p n = senior_states q n)", "by (metis less_not_refl senior_states_cases_subset senior_states_psubset_card_mono)"], ["", "lemma senior_states_card_le:\n  \"card (senior_states p n) < card (senior_states q n) \\<longleftrightarrow> senior_states p n \\<subset> senior_states q n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (card (senior_states p n) < card (senior_states q n)) =\n    (senior_states p n \\<subset> senior_states q n)", "by (metis card_mono not_less senior_states_cases_subseteq senior_states_finite senior_states_psubset_card_mono subset_not_subset_eq)"], ["", "lemma senior_states_card_less:\n  \"card (senior_states p n) \\<le> card (senior_states q n) \\<longleftrightarrow> senior_states p n \\<subseteq> senior_states q n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (card (senior_states p n) \\<le> card (senior_states q n)) =\n    (senior_states p n \\<subseteq> senior_states q n)", "by (metis card_mono card_seteq senior_states_cases_subseteq senior_states_finite)"], ["", "lemma senior_states_older_seniors:\n  \"(\\<lambda>y. token_run y n) ` older_seniors x n = senior_states (token_run x n) n\"\n  (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>y. token_run y n) ` older_seniors x n =\n    senior_states (token_run x n) n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>y. token_run y n) ` older_seniors x n =\n    senior_states (token_run x n) n", "have \"?lhs = {q'. \\<exists>ost ot. q' = token_run ost n \\<and> ost = senior ot n \\<and> ost < senior x n \\<and> \\<not> sink q'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>y. token_run y n) ` older_seniors x n =\n    {q'.\n     \\<exists>ost ot.\n        q' = token_run ost n \\<and>\n        ost = senior ot n \\<and> ost < senior x n \\<and> \\<not> sink q'}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>y. token_run y n) ` older_seniors x n =\n  {q'.\n   \\<exists>ost ot.\n      q' = token_run ost n \\<and>\n      ost = senior ot n \\<and> ost < senior x n \\<and> \\<not> sink q'}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. token_run y n) ` older_seniors x n =\n    senior_states (token_run x n) n", "also"], ["proof (state)\nthis:\n  (\\<lambda>y. token_run y n) ` older_seniors x n =\n  {q'.\n   \\<exists>ost ot.\n      q' = token_run ost n \\<and>\n      ost = senior ot n \\<and> ost < senior x n \\<and> \\<not> sink q'}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. token_run y n) ` older_seniors x n =\n    senior_states (token_run x n) n", "have \"\\<dots> = {q'. \\<exists>t ot. oldest_token q' n = Some t \\<and> t = senior ot n \\<and> t < senior x n \\<and> \\<not> sink q'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {q'.\n     \\<exists>ost ot.\n        q' = token_run ost n \\<and>\n        ost = senior ot n \\<and> ost < senior x n \\<and> \\<not> sink q'} =\n    {q'.\n     \\<exists>t ot.\n        oldest_token q' n = Some t \\<and>\n        t = senior ot n \\<and> t < senior x n \\<and> \\<not> sink q'}", "unfolding senior.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. {q'.\n     \\<exists>ost ot.\n        q' = token_run ost n \\<and>\n        ost = the (oldest_token (token_run ot n) n) \\<and>\n        ost < the (oldest_token (token_run x n) n) \\<and> \\<not> sink q'} =\n    {q'.\n     \\<exists>t ot.\n        oldest_token q' n = Some t \\<and>\n        t = the (oldest_token (token_run ot n) n) \\<and>\n        t < the (oldest_token (token_run x n) n) \\<and> \\<not> sink q'}", "by (metis (erased, hide_lams) oldest_token_always_def push_down_oldest_token_token_run option.sel)"], ["proof (state)\nthis:\n  {q'.\n   \\<exists>ost ot.\n      q' = token_run ost n \\<and>\n      ost = senior ot n \\<and> ost < senior x n \\<and> \\<not> sink q'} =\n  {q'.\n   \\<exists>t ot.\n      oldest_token q' n = Some t \\<and>\n      t = senior ot n \\<and> t < senior x n \\<and> \\<not> sink q'}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. token_run y n) ` older_seniors x n =\n    senior_states (token_run x n) n", "also"], ["proof (state)\nthis:\n  {q'.\n   \\<exists>ost ot.\n      q' = token_run ost n \\<and>\n      ost = senior ot n \\<and> ost < senior x n \\<and> \\<not> sink q'} =\n  {q'.\n   \\<exists>t ot.\n      oldest_token q' n = Some t \\<and>\n      t = senior ot n \\<and> t < senior x n \\<and> \\<not> sink q'}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. token_run y n) ` older_seniors x n =\n    senior_states (token_run x n) n", "have \"\\<dots> = {q'. \\<exists>t. oldest_token q' n = Some t \\<and> t < senior x n \\<and> \\<not> sink q'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {q'.\n     \\<exists>t ot.\n        oldest_token q' n = Some t \\<and>\n        t = senior ot n \\<and> t < senior x n \\<and> \\<not> sink q'} =\n    {q'.\n     \\<exists>t.\n        oldest_token q' n = Some t \\<and>\n        t < senior x n \\<and> \\<not> sink q'}", "by auto"], ["proof (state)\nthis:\n  {q'.\n   \\<exists>t ot.\n      oldest_token q' n = Some t \\<and>\n      t = senior ot n \\<and> t < senior x n \\<and> \\<not> sink q'} =\n  {q'.\n   \\<exists>t.\n      oldest_token q' n = Some t \\<and>\n      t < senior x n \\<and> \\<not> sink q'}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. token_run y n) ` older_seniors x n =\n    senior_states (token_run x n) n", "also"], ["proof (state)\nthis:\n  {q'.\n   \\<exists>t ot.\n      oldest_token q' n = Some t \\<and>\n      t = senior ot n \\<and> t < senior x n \\<and> \\<not> sink q'} =\n  {q'.\n   \\<exists>t.\n      oldest_token q' n = Some t \\<and>\n      t < senior x n \\<and> \\<not> sink q'}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. token_run y n) ` older_seniors x n =\n    senior_states (token_run x n) n", "have \"\\<dots> = ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {q'.\n     \\<exists>t.\n        oldest_token q' n = Some t \\<and>\n        t < senior x n \\<and> \\<not> sink q'} =\n    senior_states (token_run x n) n", "unfolding senior_states.simps senior.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. {q'.\n     \\<exists>t.\n        oldest_token q' n = Some t \\<and>\n        t < the (oldest_token (token_run x n) n) \\<and> \\<not> sink q'} =\n    {p. \\<exists>xa y.\n           oldest_token p n = Some y \\<and>\n           oldest_token (token_run x n) n = Some xa \\<and>\n           y < xa \\<and> \\<not> sink p}", "by (metis (erased, hide_lams) oldest_token_always_def option.sel)"], ["proof (state)\nthis:\n  {q'.\n   \\<exists>t.\n      oldest_token q' n = Some t \\<and>\n      t < senior x n \\<and> \\<not> sink q'} =\n  senior_states (token_run x n) n\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. token_run y n) ` older_seniors x n =\n    senior_states (token_run x n) n", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>y. token_run y n) ` older_seniors x n =\n  senior_states (token_run x n) n", "show \"?lhs = ?rhs\""], ["proof (prove)\nusing this:\n  (\\<lambda>y. token_run y n) ` older_seniors x n =\n  senior_states (token_run x n) n\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. token_run y n) ` older_seniors x n =\n    senior_states (token_run x n) n", "."], ["proof (state)\nthis:\n  (\\<lambda>y. token_run y n) ` older_seniors x n =\n  senior_states (token_run x n) n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_older_senior_senior_states:\n  assumes \"x \\<in> configuration q n\"\n  shows \"card (older_seniors x n) = card (senior_states q n)\"\n  (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (older_seniors x n) = card (senior_states q n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card (older_seniors x n) = card (senior_states q n)", "have \"inj_on (\\<lambda>t. token_run t n) (older_seniors x n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>t. token_run t n) (older_seniors x n)", "unfolding inj_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xa\\<in>older_seniors x n.\n       \\<forall>y\\<in>older_seniors x n.\n          token_run xa n = token_run y n \\<longrightarrow> xa = y", "using senior_same_state"], ["proof (prove)\nusing this:\n  token_run (senior ?x ?n) ?n = token_run ?x ?n\n\ngoal (1 subgoal):\n 1. \\<forall>xa\\<in>older_seniors x n.\n       \\<forall>y\\<in>older_seniors x n.\n          token_run xa n = token_run y n \\<longrightarrow> xa = y", "by (fastforce simp del: token_run.simps)"], ["proof (state)\nthis:\n  inj_on (\\<lambda>t. token_run t n) (older_seniors x n)\n\ngoal (1 subgoal):\n 1. card (older_seniors x n) = card (senior_states q n)", "moreover"], ["proof (state)\nthis:\n  inj_on (\\<lambda>t. token_run t n) (older_seniors x n)\n\ngoal (1 subgoal):\n 1. card (older_seniors x n) = card (senior_states q n)", "have \"token_run x n = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. token_run x n = q", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> configuration q n\n\ngoal (1 subgoal):\n 1. token_run x n = q", "by simp"], ["proof (state)\nthis:\n  token_run x n = q\n\ngoal (1 subgoal):\n 1. card (older_seniors x n) = card (senior_states q n)", "ultimately"], ["proof (chain)\npicking this:\n  inj_on (\\<lambda>t. token_run t n) (older_seniors x n)\n  token_run x n = q", "show \"?lhs = ?rhs\""], ["proof (prove)\nusing this:\n  inj_on (\\<lambda>t. token_run t n) (older_seniors x n)\n  token_run x n = q\n\ngoal (1 subgoal):\n 1. card (older_seniors x n) = card (senior_states q n)", "using card_image[of \"(\\<lambda>t. token_run t n)\" \"older_seniors x n\"]"], ["proof (prove)\nusing this:\n  inj_on (\\<lambda>t. token_run t n) (older_seniors x n)\n  token_run x n = q\n  inj_on (\\<lambda>t. token_run t n) (older_seniors x n) \\<Longrightarrow>\n  card ((\\<lambda>t. token_run t n) ` older_seniors x n) =\n  card (older_seniors x n)\n\ngoal (1 subgoal):\n 1. card (older_seniors x n) = card (senior_states q n)", "unfolding senior_states_older_seniors"], ["proof (prove)\nusing this:\n  inj_on (\\<lambda>t. token_run t n) (older_seniors x n)\n  token_run x n = q\n  inj_on (\\<lambda>t. token_run t n) (older_seniors x n) \\<Longrightarrow>\n  card (senior_states (token_run x n) n) = card (older_seniors x n)\n\ngoal (1 subgoal):\n 1. card (older_seniors x n) = card (senior_states q n)", "by presburger"], ["proof (state)\nthis:\n  card (older_seniors x n) = card (senior_states q n)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Rank of States\\<close>"], ["", "subsubsection \\<open>Alternative Definitions\\<close>"], ["", "lemma state_rank_eq_rank:\n  \"state_rank q n = (case oldest_token q n of None \\<Rightarrow> None | Some t \\<Rightarrow> rank t n) \"\n  (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. state_rank q n =\n    (case oldest_token q n of None \\<Rightarrow> None\n     | Some t \\<Rightarrow> rank t n)", "proof (cases \"oldest_token q n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. oldest_token q n = None \\<Longrightarrow>\n    state_rank q n =\n    (case oldest_token q n of None \\<Rightarrow> None\n     | Some t \\<Rightarrow> rank t n)\n 2. \\<And>a.\n       oldest_token q n = Some a \\<Longrightarrow>\n       state_rank q n =\n       (case oldest_token q n of None \\<Rightarrow> None\n        | Some t \\<Rightarrow> rank t n)", "case (None)"], ["proof (state)\nthis:\n  oldest_token q n = None\n\ngoal (2 subgoals):\n 1. oldest_token q n = None \\<Longrightarrow>\n    state_rank q n =\n    (case oldest_token q n of None \\<Rightarrow> None\n     | Some t \\<Rightarrow> rank t n)\n 2. \\<And>a.\n       oldest_token q n = Some a \\<Longrightarrow>\n       state_rank q n =\n       (case oldest_token q n of None \\<Rightarrow> None\n        | Some t \\<Rightarrow> rank t n)", "thus ?thesis"], ["proof (prove)\nusing this:\n  oldest_token q n = None\n\ngoal (1 subgoal):\n 1. state_rank q n =\n    (case oldest_token q n of None \\<Rightarrow> None\n     | Some t \\<Rightarrow> rank t n)", "by (metis not_Some_eq oldest_token.elims option.simps(4) state_rank.elims)"], ["proof (state)\nthis:\n  state_rank q n =\n  (case oldest_token q n of None \\<Rightarrow> None\n   | Some t \\<Rightarrow> rank t n)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       oldest_token q n = Some a \\<Longrightarrow>\n       state_rank q n =\n       (case oldest_token q n of None \\<Rightarrow> None\n        | Some t \\<Rightarrow> rank t n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       oldest_token q n = Some a \\<Longrightarrow>\n       state_rank q n =\n       (case oldest_token q n of None \\<Rightarrow> None\n        | Some t \\<Rightarrow> rank t n)", "case (Some x)"], ["proof (state)\nthis:\n  oldest_token q n = Some x\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       oldest_token q n = Some a \\<Longrightarrow>\n       state_rank q n =\n       (case oldest_token q n of None \\<Rightarrow> None\n        | Some t \\<Rightarrow> rank t n)", "hence \"?lhs = (if \\<not>sink q then Some (card (older_seniors x n)) else None)\""], ["proof (prove)\nusing this:\n  oldest_token q n = Some x\n\ngoal (1 subgoal):\n 1. state_rank q n =\n    (if \\<not> sink q then Some (card (older_seniors x n)) else None)", "by (metis emptyE push_down_oldest_token_configuration[OF Some] card_older_senior_senior_states state_rank.simps)"], ["proof (state)\nthis:\n  state_rank q n =\n  (if \\<not> sink q then Some (card (older_seniors x n)) else None)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       oldest_token q n = Some a \\<Longrightarrow>\n       state_rank q n =\n       (case oldest_token q n of None \\<Rightarrow> None\n        | Some t \\<Rightarrow> rank t n)", "also"], ["proof (state)\nthis:\n  state_rank q n =\n  (if \\<not> sink q then Some (card (older_seniors x n)) else None)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       oldest_token q n = Some a \\<Longrightarrow>\n       state_rank q n =\n       (case oldest_token q n of None \\<Rightarrow> None\n        | Some t \\<Rightarrow> rank t n)", "have \"\\<dots> = rank x n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<not> sink q then Some (card (older_seniors x n)) else None) =\n    rank x n", "using oldest_token_bounded[OF Some] push_down_oldest_token_token_run[OF Some]"], ["proof (prove)\nusing this:\n  x \\<le> n\n  token_run x n = q\n\ngoal (1 subgoal):\n 1. (if \\<not> sink q then Some (card (older_seniors x n)) else None) =\n    rank x n", "by auto"], ["proof (state)\nthis:\n  (if \\<not> sink q then Some (card (older_seniors x n)) else None) =\n  rank x n\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       oldest_token q n = Some a \\<Longrightarrow>\n       state_rank q n =\n       (case oldest_token q n of None \\<Rightarrow> None\n        | Some t \\<Rightarrow> rank t n)", "also"], ["proof (state)\nthis:\n  (if \\<not> sink q then Some (card (older_seniors x n)) else None) =\n  rank x n\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       oldest_token q n = Some a \\<Longrightarrow>\n       state_rank q n =\n       (case oldest_token q n of None \\<Rightarrow> None\n        | Some t \\<Rightarrow> rank t n)", "have \"\\<dots> = ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rank x n =\n    (case oldest_token q n of None \\<Rightarrow> None\n     | Some t \\<Rightarrow> rank t n)", "using Some"], ["proof (prove)\nusing this:\n  oldest_token q n = Some x\n\ngoal (1 subgoal):\n 1. rank x n =\n    (case oldest_token q n of None \\<Rightarrow> None\n     | Some t \\<Rightarrow> rank t n)", "by force"], ["proof (state)\nthis:\n  rank x n =\n  (case oldest_token q n of None \\<Rightarrow> None\n   | Some t \\<Rightarrow> rank t n)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       oldest_token q n = Some a \\<Longrightarrow>\n       state_rank q n =\n       (case oldest_token q n of None \\<Rightarrow> None\n        | Some t \\<Rightarrow> rank t n)", "finally"], ["proof (chain)\npicking this:\n  state_rank q n =\n  (case oldest_token q n of None \\<Rightarrow> None\n   | Some t \\<Rightarrow> rank t n)", "show ?thesis"], ["proof (prove)\nusing this:\n  state_rank q n =\n  (case oldest_token q n of None \\<Rightarrow> None\n   | Some t \\<Rightarrow> rank t n)\n\ngoal (1 subgoal):\n 1. state_rank q n =\n    (case oldest_token q n of None \\<Rightarrow> None\n     | Some t \\<Rightarrow> rank t n)", "."], ["proof (state)\nthis:\n  state_rank q n =\n  (case oldest_token q n of None \\<Rightarrow> None\n   | Some t \\<Rightarrow> rank t n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma state_rank_eq_rank_SOME:\n  \"state_rank q n = (if configuration q n \\<noteq> {} then rank (SOME x. x \\<in> configuration q n) n else None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_rank q n =\n    (if configuration q n \\<noteq> {}\n     then rank (SOME x. x \\<in> configuration q n) n else None)", "proof (cases \"oldest_token q n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. oldest_token q n = None \\<Longrightarrow>\n    state_rank q n =\n    (if configuration q n \\<noteq> {}\n     then rank (SOME x. x \\<in> configuration q n) n else None)\n 2. \\<And>a.\n       oldest_token q n = Some a \\<Longrightarrow>\n       state_rank q n =\n       (if configuration q n \\<noteq> {}\n        then rank (SOME x. x \\<in> configuration q n) n else None)", "case (Some x)"], ["proof (state)\nthis:\n  oldest_token q n = Some x\n\ngoal (2 subgoals):\n 1. oldest_token q n = None \\<Longrightarrow>\n    state_rank q n =\n    (if configuration q n \\<noteq> {}\n     then rank (SOME x. x \\<in> configuration q n) n else None)\n 2. \\<And>a.\n       oldest_token q n = Some a \\<Longrightarrow>\n       state_rank q n =\n       (if configuration q n \\<noteq> {}\n        then rank (SOME x. x \\<in> configuration q n) n else None)", "thus ?thesis"], ["proof (prove)\nusing this:\n  oldest_token q n = Some x\n\ngoal (1 subgoal):\n 1. state_rank q n =\n    (if configuration q n \\<noteq> {}\n     then rank (SOME x. x \\<in> configuration q n) n else None)", "unfolding state_rank_eq_rank Some option.simps(5)"], ["proof (prove)\nusing this:\n  Some x = Some x\n\ngoal (1 subgoal):\n 1. rank x n =\n    (if configuration q n \\<noteq> {}\n     then rank (SOME x. x \\<in> configuration q n) n else None)", "by (metis Some ex_in_conv pull_up_configuration_rank push_down_oldest_token_configuration someI_ex)"], ["proof (state)\nthis:\n  state_rank q n =\n  (if configuration q n \\<noteq> {}\n   then rank (SOME x. x \\<in> configuration q n) n else None)\n\ngoal (1 subgoal):\n 1. oldest_token q n = None \\<Longrightarrow>\n    state_rank q n =\n    (if configuration q n \\<noteq> {}\n     then rank (SOME x. x \\<in> configuration q n) n else None)", "qed (unfold state_rank_eq_rank; metis not_Some_eq oldest_token.elims option.simps(4))"], ["", "lemma rank_eq_state_rank:\n  \"x \\<le> n \\<Longrightarrow> rank x n = state_rank (token_run x n) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> n \\<Longrightarrow> rank x n = state_rank (token_run x n) n", "unfolding state_rank_eq_rank_SOME[of \"token_run x n\"]"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> n \\<Longrightarrow>\n    rank x n =\n    (if configuration (token_run x n) n \\<noteq> {}\n     then rank (SOME xa. xa \\<in> configuration (token_run x n) n) n\n     else None)", "by (metis all_not_in_conv configuration_token pull_up_configuration_rank someI_ex)"], ["", "subsubsection \\<open>Pull-Up and Push-Down\\<close>"], ["", "lemma pull_up_configuration_state_rank:\n  \"configuration q n = {} \\<Longrightarrow> state_rank q n = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. configuration q n = {} \\<Longrightarrow> state_rank q n = None", "by force"], ["", "lemma push_down_state_rank_tokens:\n  \"state_rank q n = Some i \\<Longrightarrow> configuration q n \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_rank q n = Some i \\<Longrightarrow> configuration q n \\<noteq> {}", "by (metis not_Some_eq state_rank.elims)"], ["", "lemma push_down_state_rank_configuration_None:\n  \"state_rank q n = None \\<Longrightarrow> \\<not>sink q \\<Longrightarrow> configuration q n = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>state_rank q n = None; \\<not> sink q\\<rbrakk>\n    \\<Longrightarrow> configuration q n = {}", "unfolding state_rank.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(if configuration q n \\<noteq> {} \\<and> \\<not> sink q\n              then Some (card (senior_states q n)) else None) =\n             None;\n     \\<not> sink q\\<rbrakk>\n    \\<Longrightarrow> configuration q n = {}", "by (metis option.distinct(1))"], ["", "lemma push_down_state_rank_oldest_token:\n  \"state_rank q n = Some i \\<Longrightarrow> \\<exists>x. oldest_token q n = Some x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_rank q n = Some i \\<Longrightarrow>\n    \\<exists>x. oldest_token q n = Some x", "by (metis oldest_token.elims state_rank.elims)"], ["", "lemma push_down_state_rank_token_run:\n  \"state_rank q n = Some i \\<Longrightarrow> \\<exists>x. token_run x n = q \\<and> x \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_rank q n = Some i \\<Longrightarrow>\n    \\<exists>x. token_run x n = q \\<and> x \\<le> n", "by (blast dest: push_down_state_rank_oldest_token push_down_oldest_token_token_run oldest_token_bounded)"], ["", "subsubsection \\<open>Properties\\<close>"], ["", "lemma state_rank_distinct:\n  assumes distinct: \"p \\<noteq> q\"\n  assumes ranked_1: \"state_rank p n = Some i\"\n  assumes ranked_2: \"state_rank q n = Some j\"\n  shows \"i \\<noteq> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<noteq> j", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. i = j \\<Longrightarrow> False", "assume \"i = j\""], ["proof (state)\nthis:\n  i = j\n\ngoal (1 subgoal):\n 1. i = j \\<Longrightarrow> False", "obtain x y where \"x \\<in> configuration p n\" and \"y \\<in> configuration q n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        \\<lbrakk>x \\<in> configuration p n;\n         y \\<in> configuration q n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms push_down_state_rank_tokens"], ["proof (prove)\nusing this:\n  p \\<noteq> q\n  state_rank p n = Some i\n  state_rank q n = Some j\n  state_rank ?q ?n = Some ?i \\<Longrightarrow>\n  configuration ?q ?n \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        \\<lbrakk>x \\<in> configuration p n;\n         y \\<in> configuration q n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x \\<in> configuration p n\n  y \\<in> configuration q n\n\ngoal (1 subgoal):\n 1. i = j \\<Longrightarrow> False", "hence \"rank x n = Some i\" and \"rank y n = Some j\""], ["proof (prove)\nusing this:\n  x \\<in> configuration p n\n  y \\<in> configuration q n\n\ngoal (1 subgoal):\n 1. rank x n = Some i &&& rank y n = Some j", "using assms pull_up_configuration_rank"], ["proof (prove)\nusing this:\n  x \\<in> configuration p n\n  y \\<in> configuration q n\n  p \\<noteq> q\n  state_rank p n = Some i\n  state_rank q n = Some j\n  \\<lbrakk>?x \\<in> configuration ?q ?n;\n   ?y \\<in> configuration ?q ?n\\<rbrakk>\n  \\<Longrightarrow> rank ?x ?n = rank ?y ?n\n\ngoal (1 subgoal):\n 1. rank x n = Some i &&& rank y n = Some j", "unfolding state_rank_eq_rank_SOME"], ["proof (prove)\nusing this:\n  x \\<in> configuration p n\n  y \\<in> configuration q n\n  p \\<noteq> q\n  (if configuration p n \\<noteq> {}\n   then rank (SOME x. x \\<in> configuration p n) n else None) =\n  Some i\n  (if configuration q n \\<noteq> {}\n   then rank (SOME x. x \\<in> configuration q n) n else None) =\n  Some j\n  \\<lbrakk>?x \\<in> configuration ?q ?n;\n   ?y \\<in> configuration ?q ?n\\<rbrakk>\n  \\<Longrightarrow> rank ?x ?n = rank ?y ?n\n\ngoal (1 subgoal):\n 1. rank x n = Some i &&& rank y n = Some j", "by (metis all_not_in_conv someI_ex)+"], ["proof (state)\nthis:\n  rank x n = Some i\n  rank y n = Some j\n\ngoal (1 subgoal):\n 1. i = j \\<Longrightarrow> False", "hence \"x \\<in> configuration q n\""], ["proof (prove)\nusing this:\n  rank x n = Some i\n  rank y n = Some j\n\ngoal (1 subgoal):\n 1. x \\<in> configuration q n", "using \\<open>y \\<in> configuration q n\\<close> push_down_rank_tokens"], ["proof (prove)\nusing this:\n  rank x n = Some i\n  rank y n = Some j\n  y \\<in> configuration q n\n  \\<lbrakk>rank ?x ?n = rank ?y ?n; rank ?x ?n = Some ?i\\<rbrakk>\n  \\<Longrightarrow> \\<exists>q.\n                       ?x \\<in> configuration q ?n \\<and>\n                       ?y \\<in> configuration q ?n\n\ngoal (1 subgoal):\n 1. x \\<in> configuration q n", "unfolding \\<open>i = j\\<close>"], ["proof (prove)\nusing this:\n  rank x n = Some j\n  rank y n = Some j\n  y \\<in> configuration q n\n  \\<lbrakk>rank ?x ?n = rank ?y ?n; rank ?x ?n = Some ?i\\<rbrakk>\n  \\<Longrightarrow> \\<exists>q.\n                       ?x \\<in> configuration q ?n \\<and>\n                       ?y \\<in> configuration q ?n\n\ngoal (1 subgoal):\n 1. x \\<in> configuration q n", "by auto"], ["proof (state)\nthis:\n  x \\<in> configuration q n\n\ngoal (1 subgoal):\n 1. i = j \\<Longrightarrow> False", "hence \"p = q\""], ["proof (prove)\nusing this:\n  x \\<in> configuration q n\n\ngoal (1 subgoal):\n 1. p = q", "using \\<open>x \\<in> configuration p n\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> configuration q n\n  x \\<in> configuration p n\n\ngoal (1 subgoal):\n 1. p = q", "by fastforce"], ["proof (state)\nthis:\n  p = q\n\ngoal (1 subgoal):\n 1. i = j \\<Longrightarrow> False", "thus \"False\""], ["proof (prove)\nusing this:\n  p = q\n\ngoal (1 subgoal):\n 1. False", "using distinct"], ["proof (prove)\nusing this:\n  p = q\n  p \\<noteq> q\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma state_rank_initial_state:\n  obtains i where \"state_rank q\\<^sub>0 n = Some i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        state_rank q\\<^sub>0 n = Some i \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding state_rank.simps sink_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        (if configuration q\\<^sub>0 n \\<noteq> {} \\<and>\n            \\<not> (q\\<^sub>0 \\<noteq> q\\<^sub>0 \\<and>\n                    (\\<forall>\\<nu>\\<in>\\<Sigma>.\n                        \\<delta> q\\<^sub>0 \\<nu> = q\\<^sub>0))\n         then Some (card (senior_states q\\<^sub>0 n)) else None) =\n        Some i \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["", "lemma state_rank_sink:\n  \"sink q \\<Longrightarrow> state_rank q n = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sink q \\<Longrightarrow> state_rank q n = None", "by simp"], ["", "lemma state_rank_upper_bound:\n  \"state_rank q n = Some i \\<Longrightarrow> i < max_rank\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_rank q n = Some i \\<Longrightarrow> i < max_rank", "by (metis option.simps(5) rank_upper_bound push_down_state_rank_oldest_token state_rank_eq_rank)"], ["", "lemma state_rank_range:\n  \"state_rank q n \\<in> {None} \\<union> Some ` {0..<max_rank}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_rank q n \\<in> {None} \\<union> Some ` {0..<max_rank}", "by (cases \"state_rank q n\") (simp add: state_rank_upper_bound[of q n])+"], ["", "lemma state_rank_None:\n  \"\\<not>sink q \\<Longrightarrow> state_rank q n = None \\<longleftrightarrow> oldest_token q n = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> sink q \\<Longrightarrow>\n    (state_rank q n = None) = (oldest_token q n = None)", "by simp"], ["", "lemma state_rank_Some:\n  \"\\<not>sink q \\<Longrightarrow> (\\<exists>i. state_rank q n = Some i) \\<longleftrightarrow> (\\<exists>j. oldest_token q n = Some j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> sink q \\<Longrightarrow>\n    (\\<exists>i. state_rank q n = Some i) =\n    (\\<exists>j. oldest_token q n = Some j)", "by simp"], ["", "lemma state_rank_oldest_token:\n  assumes \"state_rank p n = Some i\"\n  assumes \"state_rank q n = Some j\"\n  assumes \"oldest_token p n = Some x\"\n  assumes \"oldest_token q n = Some y\"\n  shows \"i < j \\<longleftrightarrow> x < y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < j) = (x < y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (i < j) = (x < y)", "have \"configuration p n \\<noteq> {}\" and \"configuration q n \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. configuration p n \\<noteq> {} &&& configuration q n \\<noteq> {}", "using assms(3,4)"], ["proof (prove)\nusing this:\n  oldest_token p n = Some x\n  oldest_token q n = Some y\n\ngoal (1 subgoal):\n 1. configuration p n \\<noteq> {} &&& configuration q n \\<noteq> {}", "by (metis oldest_token.simps option.distinct(1))+"], ["proof (state)\nthis:\n  configuration p n \\<noteq> {}\n  configuration q n \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (i < j) = (x < y)", "moreover"], ["proof (state)\nthis:\n  configuration p n \\<noteq> {}\n  configuration q n \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (i < j) = (x < y)", "have \"\\<not>sink p\" and \"\\<not>sink q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> sink p &&& \\<not> sink q", "using assms(1,2) state_rank_sink"], ["proof (prove)\nusing this:\n  state_rank p n = Some i\n  state_rank q n = Some j\n  sink ?q \\<Longrightarrow> state_rank ?q ?n = None\n\ngoal (1 subgoal):\n 1. \\<not> sink p &&& \\<not> sink q", "by auto"], ["proof (state)\nthis:\n  \\<not> sink p\n  \\<not> sink q\n\ngoal (1 subgoal):\n 1. (i < j) = (x < y)", "ultimately"], ["proof (chain)\npicking this:\n  configuration p n \\<noteq> {}\n  configuration q n \\<noteq> {}\n  \\<not> sink p\n  \\<not> sink q", "have i_def: \"i = card (senior_states p n)\" and j_def: \"j = card (senior_states q n)\""], ["proof (prove)\nusing this:\n  configuration p n \\<noteq> {}\n  configuration q n \\<noteq> {}\n  \\<not> sink p\n  \\<not> sink q\n\ngoal (1 subgoal):\n 1. i = card (senior_states p n) &&& j = card (senior_states q n)", "using assms(1,2) option.sel"], ["proof (prove)\nusing this:\n  configuration p n \\<noteq> {}\n  configuration q n \\<noteq> {}\n  \\<not> sink p\n  \\<not> sink q\n  state_rank p n = Some i\n  state_rank q n = Some j\n  the (Some ?x2.0) = ?x2.0\n\ngoal (1 subgoal):\n 1. i = card (senior_states p n) &&& j = card (senior_states q n)", "by simp_all"], ["proof (state)\nthis:\n  i = card (senior_states p n)\n  j = card (senior_states q n)\n\ngoal (1 subgoal):\n 1. (i < j) = (x < y)", "hence \"i < j \\<longleftrightarrow> senior_states p n \\<subset> senior_states q n\""], ["proof (prove)\nusing this:\n  i = card (senior_states p n)\n  j = card (senior_states q n)\n\ngoal (1 subgoal):\n 1. (i < j) = (senior_states p n \\<subset> senior_states q n)", "using senior_states_card_le"], ["proof (prove)\nusing this:\n  i = card (senior_states p n)\n  j = card (senior_states q n)\n  (card (senior_states ?p ?n) < card (senior_states ?q ?n)) =\n  (senior_states ?p ?n \\<subset> senior_states ?q ?n)\n\ngoal (1 subgoal):\n 1. (i < j) = (senior_states p n \\<subset> senior_states q n)", "by presburger"], ["proof (state)\nthis:\n  (i < j) = (senior_states p n \\<subset> senior_states q n)\n\ngoal (1 subgoal):\n 1. (i < j) = (x < y)", "also"], ["proof (state)\nthis:\n  (i < j) = (senior_states p n \\<subset> senior_states q n)\n\ngoal (1 subgoal):\n 1. (i < j) = (x < y)", "with assms(3,4)"], ["proof (chain)\npicking this:\n  oldest_token p n = Some x\n  oldest_token q n = Some y\n  (i < j) = (senior_states p n \\<subset> senior_states q n)", "have \"\\<dots> \\<longleftrightarrow> x < y\""], ["proof (prove)\nusing this:\n  oldest_token p n = Some x\n  oldest_token q n = Some y\n  (i < j) = (senior_states p n \\<subset> senior_states q n)\n\ngoal (1 subgoal):\n 1. (senior_states p n \\<subset> senior_states q n) = (x < y)", "proof (cases rule: senior_states_cases_subset[of p n q])"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>oldest_token p n = Some x; oldest_token q n = Some y;\n     (i < j) = (senior_states p n \\<subset> senior_states q n);\n     senior_states p n \\<subset> senior_states q n\\<rbrakk>\n    \\<Longrightarrow> (senior_states p n \\<subset> senior_states q n) =\n                      (x < y)\n 2. \\<lbrakk>oldest_token p n = Some x; oldest_token q n = Some y;\n     (i < j) = (senior_states p n \\<subset> senior_states q n);\n     senior_states p n = senior_states q n\\<rbrakk>\n    \\<Longrightarrow> (senior_states p n \\<subset> senior_states q n) =\n                      (x < y)\n 3. \\<lbrakk>oldest_token p n = Some x; oldest_token q n = Some y;\n     (i < j) = (senior_states p n \\<subset> senior_states q n);\n     senior_states q n \\<subset> senior_states p n\\<rbrakk>\n    \\<Longrightarrow> (senior_states p n \\<subset> senior_states q n) =\n                      (x < y)", "case equal"], ["proof (state)\nthis:\n  senior_states p n = senior_states q n\n\ngoal (3 subgoals):\n 1. \\<lbrakk>oldest_token p n = Some x; oldest_token q n = Some y;\n     (i < j) = (senior_states p n \\<subset> senior_states q n);\n     senior_states p n \\<subset> senior_states q n\\<rbrakk>\n    \\<Longrightarrow> (senior_states p n \\<subset> senior_states q n) =\n                      (x < y)\n 2. \\<lbrakk>oldest_token p n = Some x; oldest_token q n = Some y;\n     (i < j) = (senior_states p n \\<subset> senior_states q n);\n     senior_states p n = senior_states q n\\<rbrakk>\n    \\<Longrightarrow> (senior_states p n \\<subset> senior_states q n) =\n                      (x < y)\n 3. \\<lbrakk>oldest_token p n = Some x; oldest_token q n = Some y;\n     (i < j) = (senior_states p n \\<subset> senior_states q n);\n     senior_states q n \\<subset> senior_states p n\\<rbrakk>\n    \\<Longrightarrow> (senior_states p n \\<subset> senior_states q n) =\n                      (x < y)", "thus ?thesis"], ["proof (prove)\nusing this:\n  senior_states p n = senior_states q n\n\ngoal (1 subgoal):\n 1. (senior_states p n \\<subset> senior_states q n) = (x < y)", "using assms state_rank_distinct i_def j_def"], ["proof (prove)\nusing this:\n  senior_states p n = senior_states q n\n  state_rank p n = Some i\n  state_rank q n = Some j\n  oldest_token p n = Some x\n  oldest_token q n = Some y\n  \\<lbrakk>?p \\<noteq> ?q; state_rank ?p ?n = Some ?i;\n   state_rank ?q ?n = Some ?j\\<rbrakk>\n  \\<Longrightarrow> ?i \\<noteq> ?j\n  i = card (senior_states p n)\n  j = card (senior_states q n)\n\ngoal (1 subgoal):\n 1. (senior_states p n \\<subset> senior_states q n) = (x < y)", "by (metis less_irrefl option.sel)"], ["proof (state)\nthis:\n  (senior_states p n \\<subset> senior_states q n) = (x < y)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>oldest_token p n = Some x; oldest_token q n = Some y;\n     (i < j) = (senior_states p n \\<subset> senior_states q n);\n     senior_states p n \\<subset> senior_states q n\\<rbrakk>\n    \\<Longrightarrow> (senior_states p n \\<subset> senior_states q n) =\n                      (x < y)\n 2. \\<lbrakk>oldest_token p n = Some x; oldest_token q n = Some y;\n     (i < j) = (senior_states p n \\<subset> senior_states q n);\n     senior_states q n \\<subset> senior_states p n\\<rbrakk>\n    \\<Longrightarrow> (senior_states p n \\<subset> senior_states q n) =\n                      (x < y)", "qed auto"], ["proof (state)\nthis:\n  (senior_states p n \\<subset> senior_states q n) = (x < y)\n\ngoal (1 subgoal):\n 1. (i < j) = (x < y)", "ultimately"], ["proof (chain)\npicking this:\n  (i < j) = (senior_states p n \\<subset> senior_states q n)\n  (senior_states p n \\<subset> senior_states q n) = (x < y)", "show ?thesis"], ["proof (prove)\nusing this:\n  (i < j) = (senior_states p n \\<subset> senior_states q n)\n  (senior_states p n \\<subset> senior_states q n) = (x < y)\n\ngoal (1 subgoal):\n 1. (i < j) = (x < y)", "by meson"], ["proof (state)\nthis:\n  (i < j) = (x < y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma state_rank_oldest_token_le:\n  assumes \"state_rank p n = Some i\"\n  assumes \"state_rank q n = Some j\"\n  assumes \"oldest_token p n = Some x\"\n  assumes \"oldest_token q n = Some y\"\n  shows \"i \\<le> j \\<longleftrightarrow> x \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i \\<le> j) = (x \\<le> y)", "using state_rank_oldest_token[OF assms] assms state_rank_distinct oldest_token_equal"], ["proof (prove)\nusing this:\n  (i < j) = (x < y)\n  state_rank p n = Some i\n  state_rank q n = Some j\n  oldest_token p n = Some x\n  oldest_token q n = Some y\n  \\<lbrakk>?p \\<noteq> ?q; state_rank ?p ?n = Some ?i;\n   state_rank ?q ?n = Some ?j\\<rbrakk>\n  \\<Longrightarrow> ?i \\<noteq> ?j\n  \\<lbrakk>oldest_token ?q ?n = Some ?i;\n   oldest_token ?q' ?n = Some ?i\\<rbrakk>\n  \\<Longrightarrow> ?q = ?q'\n\ngoal (1 subgoal):\n 1. (i \\<le> j) = (x \\<le> y)", "by (cases \"x = y\") ((metis option.sel order_refl), (metis le_eq_less_or_eq option.inject))"], ["", "lemma state_rank_in_function_set:\n  shows \"(\\<lambda>q. state_rank q t) \\<in> {f. (\\<forall>x. x \\<notin> reach \\<Sigma> \\<delta> q\\<^sub>0 \\<longrightarrow> f x = None) \\<and>\n      (\\<forall>x. x \\<in> reach \\<Sigma> \\<delta> q\\<^sub>0 \\<longrightarrow> f x \\<in> {None} \\<union> Some ` {0..<max_rank})}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>q. state_rank q t)\n    \\<in> {f. (\\<forall>x.\n                  x \\<notin> reach \\<Sigma> \\<delta>\n                              q\\<^sub>0 \\<longrightarrow>\n                  f x = None) \\<and>\n              (\\<forall>x.\n                  x \\<in> reach \\<Sigma> \\<delta>\n                           q\\<^sub>0 \\<longrightarrow>\n                  f x \\<in> {None} \\<union> Some ` {0..<max_rank})}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>q. state_rank q t)\n    \\<in> {f. (\\<forall>x.\n                  x \\<notin> reach \\<Sigma> \\<delta>\n                              q\\<^sub>0 \\<longrightarrow>\n                  f x = None) \\<and>\n              (\\<forall>x.\n                  x \\<in> reach \\<Sigma> \\<delta>\n                           q\\<^sub>0 \\<longrightarrow>\n                  f x \\<in> {None} \\<union> Some ` {0..<max_rank})}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>q. state_rank q t)\n    \\<in> {f. (\\<forall>x.\n                  x \\<notin> reach \\<Sigma> \\<delta>\n                              q\\<^sub>0 \\<longrightarrow>\n                  f x = None) \\<and>\n              (\\<forall>x.\n                  x \\<in> reach \\<Sigma> \\<delta>\n                           q\\<^sub>0 \\<longrightarrow>\n                  f x \\<in> {None} \\<union> Some ` {0..<max_rank})}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>q. state_rank q t)\n    \\<in> {f. (\\<forall>x.\n                  x \\<notin> reach \\<Sigma> \\<delta>\n                              q\\<^sub>0 \\<longrightarrow>\n                  f x = None) \\<and>\n              (\\<forall>x.\n                  x \\<in> reach \\<Sigma> \\<delta>\n                           q\\<^sub>0 \\<longrightarrow>\n                  f x \\<in> {None} \\<union> Some ` {0..<max_rank})}", "assume \"x \\<notin> reach \\<Sigma> \\<delta> q\\<^sub>0\""], ["proof (state)\nthis:\n  x \\<notin> reach \\<Sigma> \\<delta> q\\<^sub>0\n\ngoal (1 subgoal):\n 1. (\\<lambda>q. state_rank q t)\n    \\<in> {f. (\\<forall>x.\n                  x \\<notin> reach \\<Sigma> \\<delta>\n                              q\\<^sub>0 \\<longrightarrow>\n                  f x = None) \\<and>\n              (\\<forall>x.\n                  x \\<in> reach \\<Sigma> \\<delta>\n                           q\\<^sub>0 \\<longrightarrow>\n                  f x \\<in> {None} \\<union> Some ` {0..<max_rank})}", "hence \"\\<And>token. x \\<noteq> token_run token t\""], ["proof (prove)\nusing this:\n  x \\<notin> reach \\<Sigma> \\<delta> q\\<^sub>0\n\ngoal (1 subgoal):\n 1. \\<And>token. x \\<noteq> token_run token t", "unfolding reach_def token_run.simps"], ["proof (prove)\nusing this:\n  x \\<notin> {run \\<delta> q\\<^sub>0 w n |w n. range w \\<subseteq> \\<Sigma>}\n\ngoal (1 subgoal):\n 1. \\<And>token.\n       x \\<noteq> run \\<delta> q\\<^sub>0 (suffix token w) (t - token)", "using bounded_w"], ["proof (prove)\nusing this:\n  x \\<notin> {run \\<delta> q\\<^sub>0 w n |w n. range w \\<subseteq> \\<Sigma>}\n  range w \\<subseteq> \\<Sigma>\n\ngoal (1 subgoal):\n 1. \\<And>token.\n       x \\<noteq> run \\<delta> q\\<^sub>0 (suffix token w) (t - token)", "by fastforce"], ["proof (state)\nthis:\n  x \\<noteq> token_run ?token t\n\ngoal (1 subgoal):\n 1. (\\<lambda>q. state_rank q t)\n    \\<in> {f. (\\<forall>x.\n                  x \\<notin> reach \\<Sigma> \\<delta>\n                              q\\<^sub>0 \\<longrightarrow>\n                  f x = None) \\<and>\n              (\\<forall>x.\n                  x \\<in> reach \\<Sigma> \\<delta>\n                           q\\<^sub>0 \\<longrightarrow>\n                  f x \\<in> {None} \\<union> Some ` {0..<max_rank})}", "hence \"state_rank x t = None\""], ["proof (prove)\nusing this:\n  x \\<noteq> token_run ?token t\n\ngoal (1 subgoal):\n 1. state_rank x t = None", "using pull_up_configuration_state_rank"], ["proof (prove)\nusing this:\n  x \\<noteq> token_run ?token t\n  configuration ?q ?n = {} \\<Longrightarrow> state_rank ?q ?n = None\n\ngoal (1 subgoal):\n 1. state_rank x t = None", "by auto"], ["proof (state)\nthis:\n  state_rank x t = None\n\ngoal (1 subgoal):\n 1. (\\<lambda>q. state_rank q t)\n    \\<in> {f. (\\<forall>x.\n                  x \\<notin> reach \\<Sigma> \\<delta>\n                              q\\<^sub>0 \\<longrightarrow>\n                  f x = None) \\<and>\n              (\\<forall>x.\n                  x \\<in> reach \\<Sigma> \\<delta>\n                           q\\<^sub>0 \\<longrightarrow>\n                  f x \\<in> {None} \\<union> Some ` {0..<max_rank})}", "}"], ["proof (state)\nthis:\n  ?x2 \\<notin> reach \\<Sigma> \\<delta> q\\<^sub>0 \\<Longrightarrow>\n  state_rank ?x2 t = None\n\ngoal (1 subgoal):\n 1. (\\<lambda>q. state_rank q t)\n    \\<in> {f. (\\<forall>x.\n                  x \\<notin> reach \\<Sigma> \\<delta>\n                              q\\<^sub>0 \\<longrightarrow>\n                  f x = None) \\<and>\n              (\\<forall>x.\n                  x \\<in> reach \\<Sigma> \\<delta>\n                           q\\<^sub>0 \\<longrightarrow>\n                  f x \\<in> {None} \\<union> Some ` {0..<max_rank})}", "with state_rank_range"], ["proof (chain)\npicking this:\n  state_rank ?q ?n \\<in> {None} \\<union> Some ` {0..<max_rank}\n  ?x2 \\<notin> reach \\<Sigma> \\<delta> q\\<^sub>0 \\<Longrightarrow>\n  state_rank ?x2 t = None", "show ?thesis"], ["proof (prove)\nusing this:\n  state_rank ?q ?n \\<in> {None} \\<union> Some ` {0..<max_rank}\n  ?x2 \\<notin> reach \\<Sigma> \\<delta> q\\<^sub>0 \\<Longrightarrow>\n  state_rank ?x2 t = None\n\ngoal (1 subgoal):\n 1. (\\<lambda>q. state_rank q t)\n    \\<in> {f. (\\<forall>x.\n                  x \\<notin> reach \\<Sigma> \\<delta>\n                              q\\<^sub>0 \\<longrightarrow>\n                  f x = None) \\<and>\n              (\\<forall>x.\n                  x \\<in> reach \\<Sigma> \\<delta>\n                           q\\<^sub>0 \\<longrightarrow>\n                  f x \\<in> {None} \\<union> Some ` {0..<max_rank})}", "by blast"], ["proof (state)\nthis:\n  (\\<lambda>q. state_rank q t)\n  \\<in> {f. (\\<forall>x.\n                x \\<notin> reach \\<Sigma> \\<delta>\n                            q\\<^sub>0 \\<longrightarrow>\n                f x = None) \\<and>\n            (\\<forall>x.\n                x \\<in> reach \\<Sigma> \\<delta> q\\<^sub>0 \\<longrightarrow>\n                f x \\<in> {None} \\<union> Some ` {0..<max_rank})}\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Step Function\\<close>"], ["", "fun pre_oldest_tokens :: \"'b \\<Rightarrow> nat \\<Rightarrow> nat set\"\nwhere\n  \"pre_oldest_tokens q n = {x. \\<exists>q'. oldest_token q' n = Some x \\<and> q = \\<delta> q' (w n)} \\<union> (if q = q\\<^sub>0 then {Suc n} else {})\""], ["", "lemma pre_oldest_configuration_range:\n  \"pre_oldest_tokens q n \\<subseteq> {0..Suc n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_oldest_tokens q n \\<subseteq> {0..Suc n}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pre_oldest_tokens q n \\<subseteq> {0..Suc n}", "have \"{x. \\<exists>q'. oldest_token q' n = Some x \\<and> q = \\<delta> q' (w n)} \\<subseteq> {0..n}\"\n    (is \"?lhs \\<subseteq> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. \\<exists>q'.\n           oldest_token q' n = Some x \\<and> q = \\<delta> q' (w n)}\n    \\<subseteq> {0..n}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x. \\<exists>q'.\n                      oldest_token q' n = Some x \\<and>\n                      q = \\<delta> q' (w n)} \\<Longrightarrow>\n       x \\<in> {0..n}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x. \\<exists>q'.\n                      oldest_token q' n = Some x \\<and>\n                      q = \\<delta> q' (w n)} \\<Longrightarrow>\n       x \\<in> {0..n}", "assume \"x \\<in> ?lhs\""], ["proof (state)\nthis:\n  x \\<in> {x. \\<exists>q'.\n                 oldest_token q' n = Some x \\<and> q = \\<delta> q' (w n)}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x. \\<exists>q'.\n                      oldest_token q' n = Some x \\<and>\n                      q = \\<delta> q' (w n)} \\<Longrightarrow>\n       x \\<in> {0..n}", "then"], ["proof (chain)\npicking this:\n  x \\<in> {x. \\<exists>q'.\n                 oldest_token q' n = Some x \\<and> q = \\<delta> q' (w n)}", "obtain q' where \"oldest_token q' n = Some x\""], ["proof (prove)\nusing this:\n  x \\<in> {x. \\<exists>q'.\n                 oldest_token q' n = Some x \\<and> q = \\<delta> q' (w n)}\n\ngoal (1 subgoal):\n 1. (\\<And>q'.\n        oldest_token q' n = Some x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  oldest_token q' n = Some x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x. \\<exists>q'.\n                      oldest_token q' n = Some x \\<and>\n                      q = \\<delta> q' (w n)} \\<Longrightarrow>\n       x \\<in> {0..n}", "thus \"x \\<in> ?rhs\""], ["proof (prove)\nusing this:\n  oldest_token q' n = Some x\n\ngoal (1 subgoal):\n 1. x \\<in> {0..n}", "unfolding atLeastAtMost_iff"], ["proof (prove)\nusing this:\n  oldest_token q' n = Some x\n\ngoal (1 subgoal):\n 1. 0 \\<le> x \\<and> x \\<le> n", "using oldest_token_bounded[of q' n x]"], ["proof (prove)\nusing this:\n  oldest_token q' n = Some x\n  oldest_token q' n = Some x \\<Longrightarrow> x \\<le> n\n\ngoal (1 subgoal):\n 1. 0 \\<le> x \\<and> x \\<le> n", "by blast"], ["proof (state)\nthis:\n  x \\<in> {0..n}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {x. \\<exists>q'. oldest_token q' n = Some x \\<and> q = \\<delta> q' (w n)}\n  \\<subseteq> {0..n}\n\ngoal (1 subgoal):\n 1. pre_oldest_tokens q n \\<subseteq> {0..Suc n}", "thus ?thesis"], ["proof (prove)\nusing this:\n  {x. \\<exists>q'. oldest_token q' n = Some x \\<and> q = \\<delta> q' (w n)}\n  \\<subseteq> {0..n}\n\ngoal (1 subgoal):\n 1. pre_oldest_tokens q n \\<subseteq> {0..Suc n}", "by (cases \"q = q\\<^sub>0\") fastforce+"], ["proof (state)\nthis:\n  pre_oldest_tokens q n \\<subseteq> {0..Suc n}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pre_oldest_configuration_finite:\n  \"finite (pre_oldest_tokens q n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (pre_oldest_tokens q n)", "using pre_oldest_configuration_range finite_atLeastAtMost"], ["proof (prove)\nusing this:\n  pre_oldest_tokens ?q ?n \\<subseteq> {0..Suc ?n}\n  finite {?l..?u}\n\ngoal (1 subgoal):\n 1. finite (pre_oldest_tokens q n)", "by (rule finite_subset)"], ["", "lemmas pre_oldest_configuration_Min_in = Min_in[OF pre_oldest_configuration_finite]"], ["", "lemma pre_oldest_configuration_obtain:\n  assumes \"x \\<in> pre_oldest_tokens q n - {Suc n}\"\n  obtains q' where \"oldest_token q' n = Some x\" and \"q = \\<delta> q' (w n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>q'.\n        \\<lbrakk>oldest_token q' n = Some x; q = \\<delta> q' (w n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> pre_oldest_tokens q n - {Suc n}\n\ngoal (1 subgoal):\n 1. (\\<And>q'.\n        \\<lbrakk>oldest_token q' n = Some x; q = \\<delta> q' (w n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"q = q\\<^sub>0\", auto)"], ["", "lemma pre_oldest_configuration_element:\n  assumes \"oldest_token q' n = Some ot\"\n  assumes \"q = \\<delta> q' (w n)\"\n  shows \"ot \\<in> pre_oldest_tokens q n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ot \\<in> pre_oldest_tokens q n", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. ot \\<in> ?A\n 2. ?A \\<subseteq> pre_oldest_tokens q n", "show \"ot \\<in> {ot. \\<exists>q'. oldest_token q' n = Some ot \\<and> q = \\<delta> q' (w n)}\"\n    (is \"_ \\<in> ?A\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. ot \\<in> {ot.\n              \\<exists>q'.\n                 oldest_token q' n = Some ot \\<and> q = \\<delta> q' (w n)}", "using assms"], ["proof (prove)\nusing this:\n  oldest_token q' n = Some ot\n  q = \\<delta> q' (w n)\n\ngoal (1 subgoal):\n 1. ot \\<in> {ot.\n              \\<exists>q'.\n                 oldest_token q' n = Some ot \\<and> q = \\<delta> q' (w n)}", "by blast"], ["proof (state)\nthis:\n  ot \\<in> {ot.\n            \\<exists>q'.\n               oldest_token q' n = Some ot \\<and> q = \\<delta> q' (w n)}\n\ngoal (1 subgoal):\n 1. {ot.\n     \\<exists>q'. oldest_token q' n = Some ot \\<and> q = \\<delta> q' (w n)}\n    \\<subseteq> pre_oldest_tokens q n", "show \"?A \\<subseteq> pre_oldest_tokens q n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {ot.\n     \\<exists>q'. oldest_token q' n = Some ot \\<and> q = \\<delta> q' (w n)}\n    \\<subseteq> pre_oldest_tokens q n", "by simp"], ["proof (state)\nthis:\n  {ot.\n   \\<exists>q'. oldest_token q' n = Some ot \\<and> q = \\<delta> q' (w n)}\n  \\<subseteq> pre_oldest_tokens q n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pre_oldest_configuration_initial_state:\n  \"Suc n \\<in> pre_oldest_tokens q n \\<Longrightarrow> q = q\\<^sub>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc n \\<in> pre_oldest_tokens q n \\<Longrightarrow> q = q\\<^sub>0", "using oldest_token_bounded[of _ n \"Suc n\"]"], ["proof (prove)\nusing this:\n  oldest_token ?q n = Some (Suc n) \\<Longrightarrow> Suc n \\<le> n\n\ngoal (1 subgoal):\n 1. Suc n \\<in> pre_oldest_tokens q n \\<Longrightarrow> q = q\\<^sub>0", "by (cases \"q = q\\<^sub>0\") auto"], ["", "lemma pre_oldest_configuration_initial_state_2:\n  \"q = q\\<^sub>0 \\<Longrightarrow> Suc n \\<in> pre_oldest_tokens q n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q = q\\<^sub>0 \\<Longrightarrow> Suc n \\<in> pre_oldest_tokens q n", "by fastforce"], ["", "lemma pre_oldest_configuration_tokens:\n  \"pre_oldest_tokens q n \\<noteq> {} \\<longleftrightarrow> configuration q (Suc n) \\<noteq> {}\"\n  (is \"?lhs \\<longleftrightarrow> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (pre_oldest_tokens q n \\<noteq> {}) =\n    (configuration q (Suc n) \\<noteq> {})", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. pre_oldest_tokens q n \\<noteq> {} \\<Longrightarrow>\n    configuration q (Suc n) \\<noteq> {}\n 2. configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n    pre_oldest_tokens q n \\<noteq> {}", "assume ?lhs"], ["proof (state)\nthis:\n  pre_oldest_tokens q n \\<noteq> {}\n\ngoal (2 subgoals):\n 1. pre_oldest_tokens q n \\<noteq> {} \\<Longrightarrow>\n    configuration q (Suc n) \\<noteq> {}\n 2. configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n    pre_oldest_tokens q n \\<noteq> {}", "then"], ["proof (chain)\npicking this:\n  pre_oldest_tokens q n \\<noteq> {}", "obtain ot where ot_def: \"ot \\<in> pre_oldest_tokens q n\""], ["proof (prove)\nusing this:\n  pre_oldest_tokens q n \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>ot.\n        ot \\<in> pre_oldest_tokens q n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ot \\<in> pre_oldest_tokens q n\n\ngoal (2 subgoals):\n 1. pre_oldest_tokens q n \\<noteq> {} \\<Longrightarrow>\n    configuration q (Suc n) \\<noteq> {}\n 2. configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n    pre_oldest_tokens q n \\<noteq> {}", "thus ?rhs"], ["proof (prove)\nusing this:\n  ot \\<in> pre_oldest_tokens q n\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {}", "proof (cases \"ot = Suc n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ot \\<in> pre_oldest_tokens q n; ot = Suc n\\<rbrakk>\n    \\<Longrightarrow> configuration q (Suc n) \\<noteq> {}\n 2. \\<lbrakk>ot \\<in> pre_oldest_tokens q n; ot \\<noteq> Suc n\\<rbrakk>\n    \\<Longrightarrow> configuration q (Suc n) \\<noteq> {}", "case True"], ["proof (state)\nthis:\n  ot = Suc n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ot \\<in> pre_oldest_tokens q n; ot = Suc n\\<rbrakk>\n    \\<Longrightarrow> configuration q (Suc n) \\<noteq> {}\n 2. \\<lbrakk>ot \\<in> pre_oldest_tokens q n; ot \\<noteq> Suc n\\<rbrakk>\n    \\<Longrightarrow> configuration q (Suc n) \\<noteq> {}", "thus ?thesis"], ["proof (prove)\nusing this:\n  ot = Suc n\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {}", "using pre_oldest_configuration_initial_state configuration_non_empty[of \"Suc n\" \"Suc n\"] \\<open>ot \\<in> pre_oldest_tokens q n\\<close>"], ["proof (prove)\nusing this:\n  ot = Suc n\n  Suc ?n \\<in> pre_oldest_tokens ?q ?n \\<Longrightarrow> ?q = q\\<^sub>0\n  Suc n \\<le> Suc n \\<Longrightarrow>\n  configuration (token_run (Suc n) (Suc n)) (Suc n) \\<noteq> {}\n  ot \\<in> pre_oldest_tokens q n\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {}", "unfolding token_run_intial_state"], ["proof (prove)\nusing this:\n  ot = Suc n\n  Suc ?n \\<in> pre_oldest_tokens ?q ?n \\<Longrightarrow> ?q = q\\<^sub>0\n  Suc n \\<le> Suc n \\<Longrightarrow>\n  configuration q\\<^sub>0 (Suc n) \\<noteq> {}\n  ot \\<in> pre_oldest_tokens q n\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  configuration q (Suc n) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ot \\<in> pre_oldest_tokens q n; ot \\<noteq> Suc n\\<rbrakk>\n    \\<Longrightarrow> configuration q (Suc n) \\<noteq> {}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ot \\<in> pre_oldest_tokens q n; ot \\<noteq> Suc n\\<rbrakk>\n    \\<Longrightarrow> configuration q (Suc n) \\<noteq> {}", "case False"], ["proof (state)\nthis:\n  ot \\<noteq> Suc n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ot \\<in> pre_oldest_tokens q n; ot \\<noteq> Suc n\\<rbrakk>\n    \\<Longrightarrow> configuration q (Suc n) \\<noteq> {}", "then"], ["proof (chain)\npicking this:\n  ot \\<noteq> Suc n", "obtain q' where \"oldest_token q' n = Some ot\" and \"q = \\<delta> q' (w n)\""], ["proof (prove)\nusing this:\n  ot \\<noteq> Suc n\n\ngoal (1 subgoal):\n 1. (\\<And>q'.\n        \\<lbrakk>oldest_token q' n = Some ot; q = \\<delta> q' (w n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ot_def pre_oldest_configuration_obtain"], ["proof (prove)\nusing this:\n  ot \\<noteq> Suc n\n  ot \\<in> pre_oldest_tokens q n\n  \\<lbrakk>?x \\<in> pre_oldest_tokens ?q ?n - {Suc ?n};\n   \\<And>q'.\n      \\<lbrakk>oldest_token q' ?n = Some ?x;\n       ?q = \\<delta> q' (w ?n)\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>q'.\n        \\<lbrakk>oldest_token q' n = Some ot; q = \\<delta> q' (w n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  oldest_token q' n = Some ot\n  q = \\<delta> q' (w n)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ot \\<in> pre_oldest_tokens q n; ot \\<noteq> Suc n\\<rbrakk>\n    \\<Longrightarrow> configuration q (Suc n) \\<noteq> {}", "moreover"], ["proof (state)\nthis:\n  oldest_token q' n = Some ot\n  q = \\<delta> q' (w n)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ot \\<in> pre_oldest_tokens q n; ot \\<noteq> Suc n\\<rbrakk>\n    \\<Longrightarrow> configuration q (Suc n) \\<noteq> {}", "hence \"configuration q' n \\<noteq> {}\""], ["proof (prove)\nusing this:\n  oldest_token q' n = Some ot\n  q = \\<delta> q' (w n)\n\ngoal (1 subgoal):\n 1. configuration q' n \\<noteq> {}", "by (metis oldest_token.simps option.distinct(2))"], ["proof (state)\nthis:\n  configuration q' n \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ot \\<in> pre_oldest_tokens q n; ot \\<noteq> Suc n\\<rbrakk>\n    \\<Longrightarrow> configuration q (Suc n) \\<noteq> {}", "ultimately"], ["proof (chain)\npicking this:\n  oldest_token q' n = Some ot\n  q = \\<delta> q' (w n)\n  configuration q' n \\<noteq> {}", "show ?rhs"], ["proof (prove)\nusing this:\n  oldest_token q' n = Some ot\n  q = \\<delta> q' (w n)\n  configuration q' n \\<noteq> {}\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {}", "by (elim configuration_step_non_empty)"], ["proof (state)\nthis:\n  configuration q (Suc n) \\<noteq> {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  configuration q (Suc n) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n    pre_oldest_tokens q n \\<noteq> {}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n    pre_oldest_tokens q n \\<noteq> {}", "assume ?rhs"], ["proof (state)\nthis:\n  configuration q (Suc n) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n    pre_oldest_tokens q n \\<noteq> {}", "then"], ["proof (chain)\npicking this:\n  configuration q (Suc n) \\<noteq> {}", "obtain token where \"token \\<in> configuration q (Suc n)\" and \"token \\<le> Suc n\" and \"token_run token (Suc n) = q\""], ["proof (prove)\nusing this:\n  configuration q (Suc n) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>token.\n        \\<lbrakk>token \\<in> configuration q (Suc n); token \\<le> Suc n;\n         token_run token (Suc n) = q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  token \\<in> configuration q (Suc n)\n  token \\<le> Suc n\n  token_run token (Suc n) = q\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n    pre_oldest_tokens q n \\<noteq> {}", "moreover"], ["proof (state)\nthis:\n  token \\<in> configuration q (Suc n)\n  token \\<le> Suc n\n  token_run token (Suc n) = q\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n    pre_oldest_tokens q n \\<noteq> {}", "{"], ["proof (state)\nthis:\n  token \\<in> configuration q (Suc n)\n  token \\<le> Suc n\n  token_run token (Suc n) = q\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n    pre_oldest_tokens q n \\<noteq> {}", "assume \"token \\<le> n\""], ["proof (state)\nthis:\n  token \\<le> n\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n    pre_oldest_tokens q n \\<noteq> {}", "then"], ["proof (chain)\npicking this:\n  token \\<le> n", "obtain q' where \"token_run token n = q'\" and \"q = \\<delta> q' (w n)\""], ["proof (prove)\nusing this:\n  token \\<le> n\n\ngoal (1 subgoal):\n 1. (\\<And>q'.\n        \\<lbrakk>token_run token n = q'; q = \\<delta> q' (w n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>token_run token (Suc n) = q\\<close>"], ["proof (prove)\nusing this:\n  token \\<le> n\n  token_run token (Suc n) = q\n\ngoal (1 subgoal):\n 1. (\\<And>q'.\n        \\<lbrakk>token_run token n = q'; q = \\<delta> q' (w n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding token_run.simps Suc_diff_le[OF \\<open>token \\<le> n\\<close>]"], ["proof (prove)\nusing this:\n  token \\<le> n\n  run \\<delta> q\\<^sub>0 (suffix token w) (Suc (n - token)) = q\n\ngoal (1 subgoal):\n 1. (\\<And>q'.\n        \\<lbrakk>run \\<delta> q\\<^sub>0 (suffix token w) (n - token) = q';\n         q = \\<delta> q' (w n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  token_run token n = q'\n  q = \\<delta> q' (w n)\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n    pre_oldest_tokens q n \\<noteq> {}", "then"], ["proof (chain)\npicking this:\n  token_run token n = q'\n  q = \\<delta> q' (w n)", "obtain ot where \"oldest_token q' n = Some ot\""], ["proof (prove)\nusing this:\n  token_run token n = q'\n  q = \\<delta> q' (w n)\n\ngoal (1 subgoal):\n 1. (\\<And>ot.\n        oldest_token q' n = Some ot \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using oldest_token_always_def"], ["proof (prove)\nusing this:\n  token_run token n = q'\n  q = \\<delta> q' (w n)\n  \\<exists>i\\<le>?x. oldest_token (token_run ?x ?n) ?n = Some i\n\ngoal (1 subgoal):\n 1. (\\<And>ot.\n        oldest_token q' n = Some ot \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  oldest_token q' n = Some ot\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n    pre_oldest_tokens q n \\<noteq> {}", "with \\<open>q = \\<delta> q' (w n)\\<close>"], ["proof (chain)\npicking this:\n  q = \\<delta> q' (w n)\n  oldest_token q' n = Some ot", "have ?lhs"], ["proof (prove)\nusing this:\n  q = \\<delta> q' (w n)\n  oldest_token q' n = Some ot\n\ngoal (1 subgoal):\n 1. pre_oldest_tokens q n \\<noteq> {}", "using pre_oldest_configuration_element"], ["proof (prove)\nusing this:\n  q = \\<delta> q' (w n)\n  oldest_token q' n = Some ot\n  \\<lbrakk>oldest_token ?q' ?n = Some ?ot; ?q = \\<delta> ?q' (w ?n)\\<rbrakk>\n  \\<Longrightarrow> ?ot \\<in> pre_oldest_tokens ?q ?n\n\ngoal (1 subgoal):\n 1. pre_oldest_tokens q n \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  pre_oldest_tokens q n \\<noteq> {}\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n    pre_oldest_tokens q n \\<noteq> {}", "}"], ["proof (state)\nthis:\n  token \\<le> n \\<Longrightarrow> pre_oldest_tokens q n \\<noteq> {}\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n    pre_oldest_tokens q n \\<noteq> {}", "ultimately"], ["proof (chain)\npicking this:\n  token \\<in> configuration q (Suc n)\n  token \\<le> Suc n\n  token_run token (Suc n) = q\n  token \\<le> n \\<Longrightarrow> pre_oldest_tokens q n \\<noteq> {}", "show ?lhs"], ["proof (prove)\nusing this:\n  token \\<in> configuration q (Suc n)\n  token \\<le> Suc n\n  token_run token (Suc n) = q\n  token \\<le> n \\<Longrightarrow> pre_oldest_tokens q n \\<noteq> {}\n\ngoal (1 subgoal):\n 1. pre_oldest_tokens q n \\<noteq> {}", "using pre_oldest_configuration_initial_state_2"], ["proof (prove)\nusing this:\n  token \\<in> configuration q (Suc n)\n  token \\<le> Suc n\n  token_run token (Suc n) = q\n  token \\<le> n \\<Longrightarrow> pre_oldest_tokens q n \\<noteq> {}\n  ?q = q\\<^sub>0 \\<Longrightarrow> Suc ?n \\<in> pre_oldest_tokens ?q ?n\n\ngoal (1 subgoal):\n 1. pre_oldest_tokens q n \\<noteq> {}", "by fastforce"], ["proof (state)\nthis:\n  pre_oldest_tokens q n \\<noteq> {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma oldest_token_rec:\n  \"oldest_token q (Suc n) = (if pre_oldest_tokens q n \\<noteq> {} then Some (Min (pre_oldest_tokens q n)) else None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)", "proof (cases \"oldest_token q (Suc n)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "case (Some ot)"], ["proof (state)\nthis:\n  oldest_token q (Suc n) = Some ot\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "moreover"], ["proof (state)\nthis:\n  oldest_token q (Suc n) = Some ot\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "hence \"ot \\<in> configuration q (Suc n)\""], ["proof (prove)\nusing this:\n  oldest_token q (Suc n) = Some ot\n\ngoal (1 subgoal):\n 1. ot \\<in> configuration q (Suc n)", "by (rule push_down_oldest_token_configuration)"], ["proof (state)\nthis:\n  ot \\<in> configuration q (Suc n)\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "hence \"configuration q (Suc n) \\<noteq> {}\""], ["proof (prove)\nusing this:\n  ot \\<in> configuration q (Suc n)\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  configuration q (Suc n) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "hence \"pre_oldest_tokens q n \\<noteq> {}\""], ["proof (prove)\nusing this:\n  configuration q (Suc n) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. pre_oldest_tokens q n \\<noteq> {}", "unfolding pre_oldest_configuration_tokens"], ["proof (prove)\nusing this:\n  configuration q (Suc n) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {}", "."], ["proof (state)\nthis:\n  pre_oldest_tokens q n \\<noteq> {}\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "let ?ot = \"Min (pre_oldest_tokens q n)\""], ["proof (state)\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "assume \"ot < Suc n\""], ["proof (state)\nthis:\n  ot < Suc n\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "hence \"ot \\<noteq> Suc n\""], ["proof (prove)\nusing this:\n  ot < Suc n\n\ngoal (1 subgoal):\n 1. ot \\<noteq> Suc n", "by blast"], ["proof (state)\nthis:\n  ot \\<noteq> Suc n\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "then"], ["proof (chain)\npicking this:\n  ot \\<noteq> Suc n", "obtain q' where \"ot \\<in> configuration q' n\" and \"q = \\<delta> q' (w n)\""], ["proof (prove)\nusing this:\n  ot \\<noteq> Suc n\n\ngoal (1 subgoal):\n 1. (\\<And>q'.\n        \\<lbrakk>ot \\<in> configuration q' n; q = \\<delta> q' (w n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using configuration_rev_step' \\<open>ot \\<in> configuration q (Suc n)\\<close>"], ["proof (prove)\nusing this:\n  ot \\<noteq> Suc n\n  \\<lbrakk>?x \\<noteq> Suc ?n; ?x \\<in> configuration ?q (Suc ?n);\n   \\<And>q'.\n      \\<lbrakk>?q = \\<delta> q' (w ?n);\n       ?x \\<in> configuration q' ?n\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  ot \\<in> configuration q (Suc n)\n\ngoal (1 subgoal):\n 1. (\\<And>q'.\n        \\<lbrakk>ot \\<in> configuration q' n; q = \\<delta> q' (w n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  ot \\<in> configuration q' n\n  q = \\<delta> q' (w n)\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "{"], ["proof (state)\nthis:\n  ot \\<in> configuration q' n\n  q = \\<delta> q' (w n)\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "fix token"], ["proof (state)\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "assume \"token \\<in> configuration q' n\""], ["proof (state)\nthis:\n  token \\<in> configuration q' n\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "hence \"token \\<in> configuration q (Suc n)\""], ["proof (prove)\nusing this:\n  token \\<in> configuration q' n\n\ngoal (1 subgoal):\n 1. token \\<in> configuration q (Suc n)", "using \\<open>q = \\<delta> q' (w n)\\<close>"], ["proof (prove)\nusing this:\n  token \\<in> configuration q' n\n  q = \\<delta> q' (w n)\n\ngoal (1 subgoal):\n 1. token \\<in> configuration q (Suc n)", "by (rule configuration_step)"], ["proof (state)\nthis:\n  token \\<in> configuration q (Suc n)\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "hence \"ot \\<le> token\""], ["proof (prove)\nusing this:\n  token \\<in> configuration q (Suc n)\n\ngoal (1 subgoal):\n 1. ot \\<le> token", "using Some"], ["proof (prove)\nusing this:\n  token \\<in> configuration q (Suc n)\n  oldest_token q (Suc n) = Some ot\n\ngoal (1 subgoal):\n 1. ot \\<le> token", "by (metis Min.coboundedI \\<open>configuration q (Suc n) \\<noteq> {}\\<close> configuration_finite oldest_token.simps option.inject)"], ["proof (state)\nthis:\n  ot \\<le> token\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "}"], ["proof (state)\nthis:\n  ?token2 \\<in> configuration q' n \\<Longrightarrow> ot \\<le> ?token2\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "hence \"Min (configuration q' n) = ot\""], ["proof (prove)\nusing this:\n  ?token2 \\<in> configuration q' n \\<Longrightarrow> ot \\<le> ?token2\n\ngoal (1 subgoal):\n 1. Min (configuration q' n) = ot", "by (metis Min_eqI \\<open>ot \\<in> configuration q' n\\<close> configuration_finite)"], ["proof (state)\nthis:\n  Min (configuration q' n) = ot\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "hence \"oldest_token q' n = Some ot\""], ["proof (prove)\nusing this:\n  Min (configuration q' n) = ot\n\ngoal (1 subgoal):\n 1. oldest_token q' n = Some ot", "using \\<open>ot \\<in> configuration q' n\\<close>"], ["proof (prove)\nusing this:\n  Min (configuration q' n) = ot\n  ot \\<in> configuration q' n\n\ngoal (1 subgoal):\n 1. oldest_token q' n = Some ot", "unfolding oldest_token.simps"], ["proof (prove)\nusing this:\n  Min (configuration q' n) = ot\n  ot \\<in> configuration q' n\n\ngoal (1 subgoal):\n 1. (if configuration q' n \\<noteq> {} then Some (Min (configuration q' n))\n     else None) =\n    Some ot", "by auto"], ["proof (state)\nthis:\n  oldest_token q' n = Some ot\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "hence \"ot \\<in> pre_oldest_tokens q n\""], ["proof (prove)\nusing this:\n  oldest_token q' n = Some ot\n\ngoal (1 subgoal):\n 1. ot \\<in> pre_oldest_tokens q n", "using \\<open>q = \\<delta> q' (w n)\\<close>"], ["proof (prove)\nusing this:\n  oldest_token q' n = Some ot\n  q = \\<delta> q' (w n)\n\ngoal (1 subgoal):\n 1. ot \\<in> pre_oldest_tokens q n", "by (rule pre_oldest_configuration_element)"], ["proof (state)\nthis:\n  ot \\<in> pre_oldest_tokens q n\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "}"], ["proof (state)\nthis:\n  ot < Suc n \\<Longrightarrow> ot \\<in> pre_oldest_tokens q n\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "moreover"], ["proof (state)\nthis:\n  ot < Suc n \\<Longrightarrow> ot \\<in> pre_oldest_tokens q n\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "{"], ["proof (state)\nthis:\n  ot < Suc n \\<Longrightarrow> ot \\<in> pre_oldest_tokens q n\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "assume \"ot = Suc n\""], ["proof (state)\nthis:\n  ot = Suc n\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "moreover"], ["proof (state)\nthis:\n  ot = Suc n\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "hence \"q = q\\<^sub>0\""], ["proof (prove)\nusing this:\n  ot = Suc n\n\ngoal (1 subgoal):\n 1. q = q\\<^sub>0", "using Some"], ["proof (prove)\nusing this:\n  ot = Suc n\n  oldest_token q (Suc n) = Some ot\n\ngoal (1 subgoal):\n 1. q = q\\<^sub>0", "by (metis push_down_oldest_token_token_run token_run_intial_state)"], ["proof (state)\nthis:\n  q = q\\<^sub>0\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "ultimately"], ["proof (chain)\npicking this:\n  ot = Suc n\n  q = q\\<^sub>0", "have \"ot \\<in> pre_oldest_tokens q n\""], ["proof (prove)\nusing this:\n  ot = Suc n\n  q = q\\<^sub>0\n\ngoal (1 subgoal):\n 1. ot \\<in> pre_oldest_tokens q n", "by simp"], ["proof (state)\nthis:\n  ot \\<in> pre_oldest_tokens q n\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "}"], ["proof (state)\nthis:\n  ot = Suc n \\<Longrightarrow> ot \\<in> pre_oldest_tokens q n\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "ultimately"], ["proof (chain)\npicking this:\n  ot < Suc n \\<Longrightarrow> ot \\<in> pre_oldest_tokens q n\n  ot = Suc n \\<Longrightarrow> ot \\<in> pre_oldest_tokens q n", "have \"ot \\<in> pre_oldest_tokens q n\""], ["proof (prove)\nusing this:\n  ot < Suc n \\<Longrightarrow> ot \\<in> pre_oldest_tokens q n\n  ot = Suc n \\<Longrightarrow> ot \\<in> pre_oldest_tokens q n\n\ngoal (1 subgoal):\n 1. ot \\<in> pre_oldest_tokens q n", "using Some[THEN oldest_token_bounded]"], ["proof (prove)\nusing this:\n  ot < Suc n \\<Longrightarrow> ot \\<in> pre_oldest_tokens q n\n  ot = Suc n \\<Longrightarrow> ot \\<in> pre_oldest_tokens q n\n  ot \\<le> Suc n\n\ngoal (1 subgoal):\n 1. ot \\<in> pre_oldest_tokens q n", "by linarith"], ["proof (state)\nthis:\n  ot \\<in> pre_oldest_tokens q n\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "}"], ["proof (state)\nthis:\n  ot \\<in> pre_oldest_tokens q n\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "moreover"], ["proof (state)\nthis:\n  ot \\<in> pre_oldest_tokens q n\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "{"], ["proof (state)\nthis:\n  ot \\<in> pre_oldest_tokens q n\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "fix ot' q'"], ["proof (state)\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "assume \"oldest_token q' n = Some ot'\" and \"q = \\<delta> q' (w n)\""], ["proof (state)\nthis:\n  oldest_token q' n = Some ot'\n  q = \\<delta> q' (w n)\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "moreover"], ["proof (state)\nthis:\n  oldest_token q' n = Some ot'\n  q = \\<delta> q' (w n)\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "hence \"ot' \\<in> configuration q (Suc n)\""], ["proof (prove)\nusing this:\n  oldest_token q' n = Some ot'\n  q = \\<delta> q' (w n)\n\ngoal (1 subgoal):\n 1. ot' \\<in> configuration q (Suc n)", "using push_down_oldest_token_configuration configuration_step"], ["proof (prove)\nusing this:\n  oldest_token q' n = Some ot'\n  q = \\<delta> q' (w n)\n  oldest_token ?q ?n = Some ?x \\<Longrightarrow>\n  ?x \\<in> configuration ?q ?n\n  \\<lbrakk>?x \\<in> configuration ?q' ?n; ?q = \\<delta> ?q' (w ?n)\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> configuration ?q (Suc ?n)\n\ngoal (1 subgoal):\n 1. ot' \\<in> configuration q (Suc n)", "by blast"], ["proof (state)\nthis:\n  ot' \\<in> configuration q (Suc n)\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "hence \"ot \\<le> ot'\""], ["proof (prove)\nusing this:\n  ot' \\<in> configuration q (Suc n)\n\ngoal (1 subgoal):\n 1. ot \\<le> ot'", "using Some"], ["proof (prove)\nusing this:\n  ot' \\<in> configuration q (Suc n)\n  oldest_token q (Suc n) = Some ot\n\ngoal (1 subgoal):\n 1. ot \\<le> ot'", "by (metis Min.coboundedI \\<open>configuration q (Suc n) \\<noteq> {}\\<close> configuration_finite oldest_token.simps option.inject)"], ["proof (state)\nthis:\n  ot \\<le> ot'\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>oldest_token ?q'2 n = Some ?ot'2;\n   q = \\<delta> ?q'2 (w n)\\<rbrakk>\n  \\<Longrightarrow> ot \\<le> ?ot'2\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "hence \"\\<And>y. y \\<in> pre_oldest_tokens q n - {Suc n} \\<Longrightarrow> ot \\<le> y\""], ["proof (prove)\nusing this:\n  \\<lbrakk>oldest_token ?q'2 n = Some ?ot'2;\n   q = \\<delta> ?q'2 (w n)\\<rbrakk>\n  \\<Longrightarrow> ot \\<le> ?ot'2\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> pre_oldest_tokens q n - {Suc n} \\<Longrightarrow> ot \\<le> y", "using pre_oldest_configuration_obtain"], ["proof (prove)\nusing this:\n  \\<lbrakk>oldest_token ?q'2 n = Some ?ot'2;\n   q = \\<delta> ?q'2 (w n)\\<rbrakk>\n  \\<Longrightarrow> ot \\<le> ?ot'2\n  \\<lbrakk>?x \\<in> pre_oldest_tokens ?q ?n - {Suc ?n};\n   \\<And>q'.\n      \\<lbrakk>oldest_token q' ?n = Some ?x;\n       ?q = \\<delta> q' (w ?n)\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> pre_oldest_tokens q n - {Suc n} \\<Longrightarrow> ot \\<le> y", "by metis"], ["proof (state)\nthis:\n  ?y \\<in> pre_oldest_tokens q n - {Suc n} \\<Longrightarrow> ot \\<le> ?y\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "hence \"\\<And>y. y \\<in> pre_oldest_tokens q n \\<Longrightarrow> ot \\<le> y\""], ["proof (prove)\nusing this:\n  ?y \\<in> pre_oldest_tokens q n - {Suc n} \\<Longrightarrow> ot \\<le> ?y\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> pre_oldest_tokens q n \\<Longrightarrow> ot \\<le> y", "using Some[THEN oldest_token_bounded]"], ["proof (prove)\nusing this:\n  ?y \\<in> pre_oldest_tokens q n - {Suc n} \\<Longrightarrow> ot \\<le> ?y\n  ot \\<le> Suc n\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> pre_oldest_tokens q n \\<Longrightarrow> ot \\<le> y", "by force"], ["proof (state)\nthis:\n  ?y \\<in> pre_oldest_tokens q n \\<Longrightarrow> ot \\<le> ?y\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "ultimately"], ["proof (chain)\npicking this:\n  ot \\<in> pre_oldest_tokens q n\n  ?y \\<in> pre_oldest_tokens q n \\<Longrightarrow> ot \\<le> ?y", "have \"?ot = ot\""], ["proof (prove)\nusing this:\n  ot \\<in> pre_oldest_tokens q n\n  ?y \\<in> pre_oldest_tokens q n \\<Longrightarrow> ot \\<le> ?y\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens q n) = ot", "using Min_eqI[OF pre_oldest_configuration_finite, of q n ot]"], ["proof (prove)\nusing this:\n  ot \\<in> pre_oldest_tokens q n\n  ?y \\<in> pre_oldest_tokens q n \\<Longrightarrow> ot \\<le> ?y\n  \\<lbrakk>\\<And>y.\n              y \\<in> pre_oldest_tokens q n \\<Longrightarrow> ot \\<le> y;\n   ot \\<in> pre_oldest_tokens q n\\<rbrakk>\n  \\<Longrightarrow> Min (pre_oldest_tokens q n) = ot\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens q n) = ot", "by fast"], ["proof (state)\nthis:\n  Min (pre_oldest_tokens q n) = ot\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "}"], ["proof (state)\nthis:\n  Min (pre_oldest_tokens q n) = ot\n\ngoal (2 subgoals):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)\n 2. \\<And>a.\n       oldest_token q (Suc n) = Some a \\<Longrightarrow>\n       oldest_token q (Suc n) =\n       (if pre_oldest_tokens q n \\<noteq> {}\n        then Some (Min (pre_oldest_tokens q n)) else None)", "ultimately"], ["proof (chain)\npicking this:\n  oldest_token q (Suc n) = Some ot\n  Min (pre_oldest_tokens q n) = ot", "show ?thesis"], ["proof (prove)\nusing this:\n  oldest_token q (Suc n) = Some ot\n  Min (pre_oldest_tokens q n) = ot\n\ngoal (1 subgoal):\n 1. oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)", "unfolding pre_oldest_configuration_tokens oldest_token.simps"], ["proof (prove)\nusing this:\n  (if configuration q (Suc n) \\<noteq> {}\n   then Some (Min (configuration q (Suc n))) else None) =\n  Some ot\n  Min (pre_oldest_tokens q n) = ot\n\ngoal (1 subgoal):\n 1. (if configuration q (Suc n) \\<noteq> {}\n     then Some (Min (configuration q (Suc n))) else None) =\n    (if configuration q (Suc n) \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)", "by (metis \\<open>configuration q (Suc n) \\<noteq> {}\\<close>)"], ["proof (state)\nthis:\n  oldest_token q (Suc n) =\n  (if pre_oldest_tokens q n \\<noteq> {}\n   then Some (Min (pre_oldest_tokens q n)) else None)\n\ngoal (1 subgoal):\n 1. oldest_token q (Suc n) = None \\<Longrightarrow>\n    oldest_token q (Suc n) =\n    (if pre_oldest_tokens q n \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None)", "qed (unfold pre_oldest_configuration_tokens oldest_token.simps, metis option.distinct(2))"], ["", "lemma pre_ranks_range:\n  \"pre_ranks (\\<lambda>q. state_rank q n) \\<nu> q  \\<subseteq> {0..max_rank}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_ranks (\\<lambda>q. state_rank q n) \\<nu> q \\<subseteq> {0..max_rank}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pre_ranks (\\<lambda>q. state_rank q n) \\<nu> q \\<subseteq> {0..max_rank}", "have \"{i | q' i. state_rank q' n = Some i \\<and> q = \\<delta> q' \\<nu>} \\<subseteq> {0..max_rank}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {uu_.\n     \\<exists>q' i.\n        uu_ = i \\<and>\n        state_rank q' n = Some i \\<and> q = \\<delta> q' \\<nu>}\n    \\<subseteq> {0..max_rank}", "using state_rank_upper_bound"], ["proof (prove)\nusing this:\n  state_rank ?q ?n = Some ?i \\<Longrightarrow> ?i < max_rank\n\ngoal (1 subgoal):\n 1. {uu_.\n     \\<exists>q' i.\n        uu_ = i \\<and>\n        state_rank q' n = Some i \\<and> q = \\<delta> q' \\<nu>}\n    \\<subseteq> {0..max_rank}", "by fastforce"], ["proof (state)\nthis:\n  {uu_.\n   \\<exists>q' i.\n      uu_ = i \\<and> state_rank q' n = Some i \\<and> q = \\<delta> q' \\<nu>}\n  \\<subseteq> {0..max_rank}\n\ngoal (1 subgoal):\n 1. pre_ranks (\\<lambda>q. state_rank q n) \\<nu> q \\<subseteq> {0..max_rank}", "thus ?thesis"], ["proof (prove)\nusing this:\n  {uu_.\n   \\<exists>q' i.\n      uu_ = i \\<and> state_rank q' n = Some i \\<and> q = \\<delta> q' \\<nu>}\n  \\<subseteq> {0..max_rank}\n\ngoal (1 subgoal):\n 1. pre_ranks (\\<lambda>q. state_rank q n) \\<nu> q \\<subseteq> {0..max_rank}", "by auto"], ["proof (state)\nthis:\n  pre_ranks (\\<lambda>q. state_rank q n) \\<nu> q \\<subseteq> {0..max_rank}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pre_ranks_finite:\n  \"finite (pre_ranks (\\<lambda>q. state_rank q n) \\<nu> q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (pre_ranks (\\<lambda>q. state_rank q n) \\<nu> q)", "using pre_ranks_range finite_atLeastAtMost"], ["proof (prove)\nusing this:\n  pre_ranks (\\<lambda>q. state_rank q ?n) ?\\<nu> ?q\n  \\<subseteq> {0..max_rank}\n  finite {?l..?u}\n\ngoal (1 subgoal):\n 1. finite (pre_ranks (\\<lambda>q. state_rank q n) \\<nu> q)", "by (rule finite_subset)"], ["", "lemmas pre_ranks_Min_in = Min_in[OF pre_ranks_finite]"], ["", "lemma pre_ranks_state_obtain:\n  assumes \"r\\<^sub>q \\<in> pre_ranks r \\<nu> q - {max_rank}\"\n  obtains q' where \"r q' = Some r\\<^sub>q\" and \"q = \\<delta> q' \\<nu>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>q'.\n        \\<lbrakk>r q' = Some r\\<^sub>q; q = \\<delta> q' \\<nu>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  r\\<^sub>q \\<in> pre_ranks r \\<nu> q - {max_rank}\n\ngoal (1 subgoal):\n 1. (\\<And>q'.\n        \\<lbrakk>r q' = Some r\\<^sub>q; q = \\<delta> q' \\<nu>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"q = q\\<^sub>0\", auto)"], ["", "lemma pre_ranks_element:\n  assumes \"state_rank q' n = Some r\"\n  assumes \"q = \\<delta> q' (w n)\"\n  shows \"r \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) q", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. r \\<in> ?A\n 2. ?A \\<subseteq> pre_ranks (\\<lambda>q. state_rank q n) (w n) q", "show \"r \\<in> {i. \\<exists>q'. (\\<lambda>q. state_rank q n) q' = Some i \\<and> q = \\<delta> q' (w n)}\"\n    (is \"_ \\<in> ?A\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> {i. \\<exists>q'.\n                   state_rank q' n = Some i \\<and> q = \\<delta> q' (w n)}", "using assms"], ["proof (prove)\nusing this:\n  state_rank q' n = Some r\n  q = \\<delta> q' (w n)\n\ngoal (1 subgoal):\n 1. r \\<in> {i. \\<exists>q'.\n                   state_rank q' n = Some i \\<and> q = \\<delta> q' (w n)}", "by blast"], ["proof (state)\nthis:\n  r \\<in> {i. \\<exists>q'.\n                 state_rank q' n = Some i \\<and> q = \\<delta> q' (w n)}\n\ngoal (1 subgoal):\n 1. {i. \\<exists>q'. state_rank q' n = Some i \\<and> q = \\<delta> q' (w n)}\n    \\<subseteq> pre_ranks (\\<lambda>q. state_rank q n) (w n) q", "show \"?A \\<subseteq> pre_ranks (\\<lambda>q. state_rank q n) (w n) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. \\<exists>q'. state_rank q' n = Some i \\<and> q = \\<delta> q' (w n)}\n    \\<subseteq> pre_ranks (\\<lambda>q. state_rank q n) (w n) q", "by simp"], ["proof (state)\nthis:\n  {i. \\<exists>q'. state_rank q' n = Some i \\<and> q = \\<delta> q' (w n)}\n  \\<subseteq> pre_ranks (\\<lambda>q. state_rank q n) (w n) q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pre_ranks_initial_state:\n  \"max_rank \\<in> pre_ranks (\\<lambda>q. state_rank q n) \\<nu> q \\<Longrightarrow> q = q\\<^sub>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_rank\n    \\<in> pre_ranks (\\<lambda>q. state_rank q n) \\<nu> q \\<Longrightarrow>\n    q = q\\<^sub>0", "using state_rank_upper_bound"], ["proof (prove)\nusing this:\n  state_rank ?q ?n = Some ?i \\<Longrightarrow> ?i < max_rank\n\ngoal (1 subgoal):\n 1. max_rank\n    \\<in> pre_ranks (\\<lambda>q. state_rank q n) \\<nu> q \\<Longrightarrow>\n    q = q\\<^sub>0", "by (cases \"q = q\\<^sub>0\") auto"], ["", "lemma pre_ranks_initial_state_2:\n  \"q = q\\<^sub>0 \\<Longrightarrow> max_rank \\<in> pre_ranks r \\<nu> q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q = q\\<^sub>0 \\<Longrightarrow> max_rank \\<in> pre_ranks r \\<nu> q", "by fastforce"], ["", "lemma pre_ranks_tokens:\n  assumes \"\\<not>sink q\"\n  shows \"pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {} \\<longleftrightarrow> configuration q (Suc n) \\<noteq> {}\"\n  (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}) =\n    (configuration q (Suc n) \\<noteq> {})", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq>\n    {} \\<Longrightarrow>\n    configuration q (Suc n) \\<noteq> {}\n 2. configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n    pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}", "assume ?lhs"], ["proof (state)\nthis:\n  pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}\n\ngoal (2 subgoals):\n 1. pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq>\n    {} \\<Longrightarrow>\n    configuration q (Suc n) \\<noteq> {}\n 2. configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n    pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}", "thus ?rhs"], ["proof (prove)\nusing this:\n  pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {}", "proof (cases \"q \\<noteq> q\\<^sub>0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {};\n     q \\<noteq> q\\<^sub>0\\<rbrakk>\n    \\<Longrightarrow> configuration q (Suc n) \\<noteq> {}\n 2. \\<lbrakk>pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {};\n     \\<not> q \\<noteq> q\\<^sub>0\\<rbrakk>\n    \\<Longrightarrow> configuration q (Suc n) \\<noteq> {}", "case True"], ["proof (state)\nthis:\n  q \\<noteq> q\\<^sub>0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {};\n     q \\<noteq> q\\<^sub>0\\<rbrakk>\n    \\<Longrightarrow> configuration q (Suc n) \\<noteq> {}\n 2. \\<lbrakk>pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {};\n     \\<not> q \\<noteq> q\\<^sub>0\\<rbrakk>\n    \\<Longrightarrow> configuration q (Suc n) \\<noteq> {}", "hence \"{i. \\<exists>q'. state_rank q' n = Some i \\<and> q = \\<delta> q' (w n)} \\<noteq> {}\""], ["proof (prove)\nusing this:\n  q \\<noteq> q\\<^sub>0\n\ngoal (1 subgoal):\n 1. {i. \\<exists>q'.\n           state_rank q' n = Some i \\<and> q = \\<delta> q' (w n)} \\<noteq>\n    {}", "using \\<open>?lhs\\<close>"], ["proof (prove)\nusing this:\n  q \\<noteq> q\\<^sub>0\n  pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}\n\ngoal (1 subgoal):\n 1. {i. \\<exists>q'.\n           state_rank q' n = Some i \\<and> q = \\<delta> q' (w n)} \\<noteq>\n    {}", "by simp"], ["proof (state)\nthis:\n  {i. \\<exists>q'.\n         state_rank q' n = Some i \\<and> q = \\<delta> q' (w n)} \\<noteq>\n  {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {};\n     q \\<noteq> q\\<^sub>0\\<rbrakk>\n    \\<Longrightarrow> configuration q (Suc n) \\<noteq> {}\n 2. \\<lbrakk>pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {};\n     \\<not> q \\<noteq> q\\<^sub>0\\<rbrakk>\n    \\<Longrightarrow> configuration q (Suc n) \\<noteq> {}", "then"], ["proof (chain)\npicking this:\n  {i. \\<exists>q'.\n         state_rank q' n = Some i \\<and> q = \\<delta> q' (w n)} \\<noteq>\n  {}", "obtain q' where \"state_rank q' n \\<noteq> None\" and \"q = \\<delta> q' (w n)\""], ["proof (prove)\nusing this:\n  {i. \\<exists>q'.\n         state_rank q' n = Some i \\<and> q = \\<delta> q' (w n)} \\<noteq>\n  {}\n\ngoal (1 subgoal):\n 1. (\\<And>q'.\n        \\<lbrakk>state_rank q' n \\<noteq> None;\n         q = \\<delta> q' (w n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  state_rank q' n \\<noteq> None\n  q = \\<delta> q' (w n)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {};\n     q \\<noteq> q\\<^sub>0\\<rbrakk>\n    \\<Longrightarrow> configuration q (Suc n) \\<noteq> {}\n 2. \\<lbrakk>pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {};\n     \\<not> q \\<noteq> q\\<^sub>0\\<rbrakk>\n    \\<Longrightarrow> configuration q (Suc n) \\<noteq> {}", "moreover"], ["proof (state)\nthis:\n  state_rank q' n \\<noteq> None\n  q = \\<delta> q' (w n)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {};\n     q \\<noteq> q\\<^sub>0\\<rbrakk>\n    \\<Longrightarrow> configuration q (Suc n) \\<noteq> {}\n 2. \\<lbrakk>pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {};\n     \\<not> q \\<noteq> q\\<^sub>0\\<rbrakk>\n    \\<Longrightarrow> configuration q (Suc n) \\<noteq> {}", "hence \"configuration q' n \\<noteq> {}\""], ["proof (prove)\nusing this:\n  state_rank q' n \\<noteq> None\n  q = \\<delta> q' (w n)\n\ngoal (1 subgoal):\n 1. configuration q' n \\<noteq> {}", "unfolding state_rank.simps"], ["proof (prove)\nusing this:\n  (if configuration q' n \\<noteq> {} \\<and> \\<not> sink q'\n   then Some (card (senior_states q' n)) else None) \\<noteq>\n  None\n  q = \\<delta> q' (w n)\n\ngoal (1 subgoal):\n 1. configuration q' n \\<noteq> {}", "by meson"], ["proof (state)\nthis:\n  configuration q' n \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {};\n     q \\<noteq> q\\<^sub>0\\<rbrakk>\n    \\<Longrightarrow> configuration q (Suc n) \\<noteq> {}\n 2. \\<lbrakk>pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {};\n     \\<not> q \\<noteq> q\\<^sub>0\\<rbrakk>\n    \\<Longrightarrow> configuration q (Suc n) \\<noteq> {}", "ultimately"], ["proof (chain)\npicking this:\n  state_rank q' n \\<noteq> None\n  q = \\<delta> q' (w n)\n  configuration q' n \\<noteq> {}", "show ?rhs"], ["proof (prove)\nusing this:\n  state_rank q' n \\<noteq> None\n  q = \\<delta> q' (w n)\n  configuration q' n \\<noteq> {}\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {}", "by (elim configuration_step_non_empty)"], ["proof (state)\nthis:\n  configuration q (Suc n) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {};\n     \\<not> q \\<noteq> q\\<^sub>0\\<rbrakk>\n    \\<Longrightarrow> configuration q (Suc n) \\<noteq> {}", "qed auto"], ["proof (state)\nthis:\n  configuration q (Suc n) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n    pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n    pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}", "assume ?rhs"], ["proof (state)\nthis:\n  configuration q (Suc n) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n    pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}", "then"], ["proof (chain)\npicking this:\n  configuration q (Suc n) \\<noteq> {}", "obtain token where \"token \\<in> configuration q (Suc n)\" and \"token \\<le> Suc n\" and \"token_run token (Suc n) = q\""], ["proof (prove)\nusing this:\n  configuration q (Suc n) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>token.\n        \\<lbrakk>token \\<in> configuration q (Suc n); token \\<le> Suc n;\n         token_run token (Suc n) = q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  token \\<in> configuration q (Suc n)\n  token \\<le> Suc n\n  token_run token (Suc n) = q\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n    pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}", "moreover"], ["proof (state)\nthis:\n  token \\<in> configuration q (Suc n)\n  token \\<le> Suc n\n  token_run token (Suc n) = q\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n    pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}", "{"], ["proof (state)\nthis:\n  token \\<in> configuration q (Suc n)\n  token \\<le> Suc n\n  token_run token (Suc n) = q\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n    pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}", "assume \"token \\<le> n\""], ["proof (state)\nthis:\n  token \\<le> n\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n    pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}", "then"], ["proof (chain)\npicking this:\n  token \\<le> n", "obtain q' where \"token_run token n = q'\" and \"q = \\<delta> q' (w n)\""], ["proof (prove)\nusing this:\n  token \\<le> n\n\ngoal (1 subgoal):\n 1. (\\<And>q'.\n        \\<lbrakk>token_run token n = q'; q = \\<delta> q' (w n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>token_run token (Suc n) = q\\<close>"], ["proof (prove)\nusing this:\n  token \\<le> n\n  token_run token (Suc n) = q\n\ngoal (1 subgoal):\n 1. (\\<And>q'.\n        \\<lbrakk>token_run token n = q'; q = \\<delta> q' (w n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding token_run.simps Suc_diff_le[OF \\<open>token \\<le> n\\<close>]"], ["proof (prove)\nusing this:\n  token \\<le> n\n  run \\<delta> q\\<^sub>0 (suffix token w) (Suc (n - token)) = q\n\ngoal (1 subgoal):\n 1. (\\<And>q'.\n        \\<lbrakk>run \\<delta> q\\<^sub>0 (suffix token w) (n - token) = q';\n         q = \\<delta> q' (w n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  token_run token n = q'\n  q = \\<delta> q' (w n)\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n    pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}", "hence \"\\<not>sink q'\""], ["proof (prove)\nusing this:\n  token_run token n = q'\n  q = \\<delta> q' (w n)\n\ngoal (1 subgoal):\n 1. \\<not> sink q'", "using \\<open>\\<not>sink q\\<close> sink_rev_step bounded_w"], ["proof (prove)\nusing this:\n  token_run token n = q'\n  q = \\<delta> q' (w n)\n  \\<not> sink q\n  \\<lbrakk>\\<not> sink ?q; ?q = \\<delta> ?q' ?\\<nu>;\n   ?\\<nu> \\<in> \\<Sigma>\\<rbrakk>\n  \\<Longrightarrow> \\<not> sink ?q'\n  \\<lbrakk>\\<not> sink ?q; ?q = \\<delta> ?q' (w ?i)\\<rbrakk>\n  \\<Longrightarrow> \\<not> sink ?q'\n  range w \\<subseteq> \\<Sigma>\n\ngoal (1 subgoal):\n 1. \\<not> sink q'", "by blast"], ["proof (state)\nthis:\n  \\<not> sink q'\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n    pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}", "then"], ["proof (chain)\npicking this:\n  \\<not> sink q'", "obtain r where \"state_rank q' n = Some r\""], ["proof (prove)\nusing this:\n  \\<not> sink q'\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        state_rank q' n = Some r \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>\\<not>sink q\\<close> configuration_non_empty[OF \\<open>token \\<le> n\\<close>]"], ["proof (prove)\nusing this:\n  \\<not> sink q'\n  \\<not> sink q\n  configuration (token_run token n) n \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        state_rank q' n = Some r \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding \\<open>token_run token n = q'\\<close>"], ["proof (prove)\nusing this:\n  \\<not> sink q'\n  \\<not> sink q\n  configuration q' n \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        state_rank q' n = Some r \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  state_rank q' n = Some r\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n    pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}", "with \\<open>q = \\<delta> q' (w n)\\<close>"], ["proof (chain)\npicking this:\n  q = \\<delta> q' (w n)\n  state_rank q' n = Some r", "have ?lhs"], ["proof (prove)\nusing this:\n  q = \\<delta> q' (w n)\n  state_rank q' n = Some r\n\ngoal (1 subgoal):\n 1. pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}", "using pre_ranks_element"], ["proof (prove)\nusing this:\n  q = \\<delta> q' (w n)\n  state_rank q' n = Some r\n  \\<lbrakk>state_rank ?q' ?n = Some ?r; ?q = \\<delta> ?q' (w ?n)\\<rbrakk>\n  \\<Longrightarrow> ?r \\<in> pre_ranks (\\<lambda>q. state_rank q ?n) (w ?n)\n                              ?q\n\ngoal (1 subgoal):\n 1. pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n    pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}", "}"], ["proof (state)\nthis:\n  token \\<le> n \\<Longrightarrow>\n  pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}\n\ngoal (1 subgoal):\n 1. configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n    pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}", "ultimately"], ["proof (chain)\npicking this:\n  token \\<in> configuration q (Suc n)\n  token \\<le> Suc n\n  token_run token (Suc n) = q\n  token \\<le> n \\<Longrightarrow>\n  pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}", "show ?lhs"], ["proof (prove)\nusing this:\n  token \\<in> configuration q (Suc n)\n  token \\<le> Suc n\n  token_run token (Suc n) = q\n  token \\<le> n \\<Longrightarrow>\n  pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}\n\ngoal (1 subgoal):\n 1. pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}", "by fastforce"], ["proof (state)\nthis:\n  pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pre_ranks_pre_oldest_token_Min_state_special:\n  assumes \"\\<not>sink q\"\n  assumes \"configuration q (Suc n) \\<noteq> {}\"\n  shows \"Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank \\<longleftrightarrow> Min (pre_oldest_tokens q n) = Suc n\"\n  (is \"?lhs \\<longleftrightarrow> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank) =\n    (Min (pre_oldest_tokens q n) = Suc n)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) =\n    max_rank \\<Longrightarrow>\n    Min (pre_oldest_tokens q n) = Suc n\n 2. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "from assms"], ["proof (chain)\npicking this:\n  \\<not> sink q\n  configuration q (Suc n) \\<noteq> {}", "have \"pre_oldest_tokens q n \\<noteq> {}\"\n    and \"pre_ranks  (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}\""], ["proof (prove)\nusing this:\n  \\<not> sink q\n  configuration q (Suc n) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. pre_oldest_tokens q n \\<noteq> {} &&&\n    pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}", "using pre_ranks_tokens pre_oldest_configuration_tokens"], ["proof (prove)\nusing this:\n  \\<not> sink q\n  configuration q (Suc n) \\<noteq> {}\n  \\<not> sink ?q \\<Longrightarrow>\n  (pre_ranks (\\<lambda>q. state_rank q ?n) (w ?n) ?q \\<noteq> {}) =\n  (configuration ?q (Suc ?n) \\<noteq> {})\n  (pre_oldest_tokens ?q ?n \\<noteq> {}) =\n  (configuration ?q (Suc ?n) \\<noteq> {})\n\ngoal (1 subgoal):\n 1. pre_oldest_tokens q n \\<noteq> {} &&&\n    pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}", "by simp_all"], ["proof (state)\nthis:\n  pre_oldest_tokens q n \\<noteq> {}\n  pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}\n\ngoal (2 subgoals):\n 1. Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) =\n    max_rank \\<Longrightarrow>\n    Min (pre_oldest_tokens q n) = Suc n\n 2. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "{"], ["proof (state)\nthis:\n  pre_oldest_tokens q n \\<noteq> {}\n  pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}\n\ngoal (2 subgoals):\n 1. Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) =\n    max_rank \\<Longrightarrow>\n    Min (pre_oldest_tokens q n) = Suc n\n 2. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "assume ?lhs"], ["proof (state)\nthis:\n  Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank\n\ngoal (2 subgoals):\n 1. Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) =\n    max_rank \\<Longrightarrow>\n    Min (pre_oldest_tokens q n) = Suc n\n 2. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "have \"q = q\\<^sub>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q = q\\<^sub>0", "apply (rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<noteq> q\\<^sub>0 \\<Longrightarrow> False", "using state_rank_upper_bound pre_ranks_Min_in[OF \\<open>pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}\\<close>] \\<open>?lhs\\<close>"], ["proof (prove)\nusing this:\n  state_rank ?q ?n = Some ?i \\<Longrightarrow> ?i < max_rank\n  Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)\n  \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) q\n  Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank\n\ngoal (1 subgoal):\n 1. q \\<noteq> q\\<^sub>0 \\<Longrightarrow> False", "by auto"], ["proof (state)\nthis:\n  q = q\\<^sub>0\n\ngoal (2 subgoals):\n 1. Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) =\n    max_rank \\<Longrightarrow>\n    Min (pre_oldest_tokens q n) = Suc n\n 2. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "moreover"], ["proof (state)\nthis:\n  q = q\\<^sub>0\n\ngoal (2 subgoals):\n 1. Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) =\n    max_rank \\<Longrightarrow>\n    Min (pre_oldest_tokens q n) = Suc n\n 2. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "{"], ["proof (state)\nthis:\n  q = q\\<^sub>0\n\ngoal (2 subgoals):\n 1. Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) =\n    max_rank \\<Longrightarrow>\n    Min (pre_oldest_tokens q n) = Suc n\n 2. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "fix q'"], ["proof (state)\ngoal (2 subgoals):\n 1. Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) =\n    max_rank \\<Longrightarrow>\n    Min (pre_oldest_tokens q n) = Suc n\n 2. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "assume \"q = \\<delta> q' (w n)\""], ["proof (state)\nthis:\n  q = \\<delta> q' (w n)\n\ngoal (2 subgoals):\n 1. Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) =\n    max_rank \\<Longrightarrow>\n    Min (pre_oldest_tokens q n) = Suc n\n 2. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "hence \"\\<not>sink q'\""], ["proof (prove)\nusing this:\n  q = \\<delta> q' (w n)\n\ngoal (1 subgoal):\n 1. \\<not> sink q'", "using \\<open>\\<not>sink q\\<close> bounded_w"], ["proof (prove)\nusing this:\n  q = \\<delta> q' (w n)\n  \\<not> sink q\n  range w \\<subseteq> \\<Sigma>\n\ngoal (1 subgoal):\n 1. \\<not> sink q'", "unfolding sink_def"], ["proof (prove)\nusing this:\n  q = \\<delta> q' (w n)\n  \\<not> (q\\<^sub>0 \\<noteq> q \\<and>\n          (\\<forall>\\<nu>\\<in>\\<Sigma>. \\<delta> q \\<nu> = q))\n  range w \\<subseteq> \\<Sigma>\n\ngoal (1 subgoal):\n 1. \\<not> (q\\<^sub>0 \\<noteq> q' \\<and>\n            (\\<forall>\\<nu>\\<in>\\<Sigma>. \\<delta> q' \\<nu> = q'))", "using calculation"], ["proof (prove)\nusing this:\n  q = \\<delta> q' (w n)\n  \\<not> (q\\<^sub>0 \\<noteq> q \\<and>\n          (\\<forall>\\<nu>\\<in>\\<Sigma>. \\<delta> q \\<nu> = q))\n  range w \\<subseteq> \\<Sigma>\n  q = q\\<^sub>0\n\ngoal (1 subgoal):\n 1. \\<not> (q\\<^sub>0 \\<noteq> q' \\<and>\n            (\\<forall>\\<nu>\\<in>\\<Sigma>. \\<delta> q' \\<nu> = q'))", "by blast"], ["proof (state)\nthis:\n  \\<not> sink q'\n\ngoal (2 subgoals):\n 1. Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) =\n    max_rank \\<Longrightarrow>\n    Min (pre_oldest_tokens q n) = Suc n\n 2. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "{"], ["proof (state)\nthis:\n  \\<not> sink q'\n\ngoal (2 subgoals):\n 1. Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) =\n    max_rank \\<Longrightarrow>\n    Min (pre_oldest_tokens q n) = Suc n\n 2. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) =\n    max_rank \\<Longrightarrow>\n    Min (pre_oldest_tokens q n) = Suc n\n 2. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "assume \"state_rank q' n = Some i\""], ["proof (state)\nthis:\n  state_rank q' n = Some i\n\ngoal (2 subgoals):\n 1. Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) =\n    max_rank \\<Longrightarrow>\n    Min (pre_oldest_tokens q n) = Suc n\n 2. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "hence \"False\""], ["proof (prove)\nusing this:\n  state_rank q' n = Some i\n\ngoal (1 subgoal):\n 1. False", "using \\<open>q = \\<delta> q' (w n)\\<close>"], ["proof (prove)\nusing this:\n  state_rank q' n = Some i\n  q = \\<delta> q' (w n)\n\ngoal (1 subgoal):\n 1. False", "using Min.coboundedI[OF pre_ranks_finite, of _ n \"(w n)\" q]"], ["proof (prove)\nusing this:\n  state_rank q' n = Some i\n  q = \\<delta> q' (w n)\n  ?a \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<Longrightarrow>\n  Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) \\<le> ?a\n\ngoal (1 subgoal):\n 1. False", "unfolding \\<open>?lhs\\<close>"], ["proof (prove)\nusing this:\n  state_rank q' n = Some i\n  q = \\<delta> q' (w n)\n  ?a \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<Longrightarrow>\n  max_rank \\<le> ?a\n\ngoal (1 subgoal):\n 1. False", "using state_rank_upper_bound[of q' n]"], ["proof (prove)\nusing this:\n  state_rank q' n = Some i\n  q = \\<delta> q' (w n)\n  ?a \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<Longrightarrow>\n  max_rank \\<le> ?a\n  state_rank q' n = Some ?i \\<Longrightarrow> ?i < max_rank\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) =\n    max_rank \\<Longrightarrow>\n    Min (pre_oldest_tokens q n) = Suc n\n 2. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "}"], ["proof (state)\nthis:\n  state_rank q' n = Some ?i2 \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) =\n    max_rank \\<Longrightarrow>\n    Min (pre_oldest_tokens q n) = Suc n\n 2. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "hence \"state_rank q' n = None\""], ["proof (prove)\nusing this:\n  state_rank q' n = Some ?i2 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. state_rank q' n = None", "by fastforce"], ["proof (state)\nthis:\n  state_rank q' n = None\n\ngoal (2 subgoals):\n 1. Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) =\n    max_rank \\<Longrightarrow>\n    Min (pre_oldest_tokens q n) = Suc n\n 2. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "hence \"oldest_token q' n = None\""], ["proof (prove)\nusing this:\n  state_rank q' n = None\n\ngoal (1 subgoal):\n 1. oldest_token q' n = None", "using \\<open>\\<not>sink q'\\<close>"], ["proof (prove)\nusing this:\n  state_rank q' n = None\n  \\<not> sink q'\n\ngoal (1 subgoal):\n 1. oldest_token q' n = None", "by (metis state_rank_None)"], ["proof (state)\nthis:\n  oldest_token q' n = None\n\ngoal (2 subgoals):\n 1. Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) =\n    max_rank \\<Longrightarrow>\n    Min (pre_oldest_tokens q n) = Suc n\n 2. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "}"], ["proof (state)\nthis:\n  q = \\<delta> ?q'2 (w n) \\<Longrightarrow> oldest_token ?q'2 n = None\n\ngoal (2 subgoals):\n 1. Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) =\n    max_rank \\<Longrightarrow>\n    Min (pre_oldest_tokens q n) = Suc n\n 2. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "hence \"{ot. \\<exists>q'. oldest_token q' n = Some ot \\<and> q = \\<delta> q' (w n)} = {}\""], ["proof (prove)\nusing this:\n  q = \\<delta> ?q'2 (w n) \\<Longrightarrow> oldest_token ?q'2 n = None\n\ngoal (1 subgoal):\n 1. {ot.\n     \\<exists>q'.\n        oldest_token q' n = Some ot \\<and> q = \\<delta> q' (w n)} =\n    {}", "by fastforce"], ["proof (state)\nthis:\n  {ot.\n   \\<exists>q'. oldest_token q' n = Some ot \\<and> q = \\<delta> q' (w n)} =\n  {}\n\ngoal (2 subgoals):\n 1. Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) =\n    max_rank \\<Longrightarrow>\n    Min (pre_oldest_tokens q n) = Suc n\n 2. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "ultimately"], ["proof (chain)\npicking this:\n  q = q\\<^sub>0\n  {ot.\n   \\<exists>q'. oldest_token q' n = Some ot \\<and> q = \\<delta> q' (w n)} =\n  {}", "show \"?rhs\""], ["proof (prove)\nusing this:\n  q = q\\<^sub>0\n  {ot.\n   \\<exists>q'. oldest_token q' n = Some ot \\<and> q = \\<delta> q' (w n)} =\n  {}\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens q n) = Suc n", "by auto"], ["proof (state)\nthis:\n  Min (pre_oldest_tokens q n) = Suc n\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "}"], ["proof (state)\nthis:\n  Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) =\n  max_rank \\<Longrightarrow>\n  Min (pre_oldest_tokens q n) = Suc n\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "{"], ["proof (state)\nthis:\n  Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) =\n  max_rank \\<Longrightarrow>\n  Min (pre_oldest_tokens q n) = Suc n\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "assume ?rhs"], ["proof (state)\nthis:\n  Min (pre_oldest_tokens q n) = Suc n\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "{"], ["proof (state)\nthis:\n  Min (pre_oldest_tokens q n) = Suc n\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "fix q'"], ["proof (state)\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "assume \"q = \\<delta> q' (w n)\""], ["proof (state)\nthis:\n  q = \\<delta> q' (w n)\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "have \"state_rank q' n = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_rank q' n = None", "proof (cases \"oldest_token q' n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. oldest_token q' n = None \\<Longrightarrow> state_rank q' n = None\n 2. \\<And>a.\n       oldest_token q' n = Some a \\<Longrightarrow> state_rank q' n = None", "case (Some t)"], ["proof (state)\nthis:\n  oldest_token q' n = Some t\n\ngoal (2 subgoals):\n 1. oldest_token q' n = None \\<Longrightarrow> state_rank q' n = None\n 2. \\<And>a.\n       oldest_token q' n = Some a \\<Longrightarrow> state_rank q' n = None", "hence \"t \\<le> n\""], ["proof (prove)\nusing this:\n  oldest_token q' n = Some t\n\ngoal (1 subgoal):\n 1. t \\<le> n", "using oldest_token_bounded[of q' n]"], ["proof (prove)\nusing this:\n  oldest_token q' n = Some t\n  oldest_token q' n = Some ?x \\<Longrightarrow> ?x \\<le> n\n\ngoal (1 subgoal):\n 1. t \\<le> n", "by blast"], ["proof (state)\nthis:\n  t \\<le> n\n\ngoal (2 subgoals):\n 1. oldest_token q' n = None \\<Longrightarrow> state_rank q' n = None\n 2. \\<And>a.\n       oldest_token q' n = Some a \\<Longrightarrow> state_rank q' n = None", "moreover"], ["proof (state)\nthis:\n  t \\<le> n\n\ngoal (2 subgoals):\n 1. oldest_token q' n = None \\<Longrightarrow> state_rank q' n = None\n 2. \\<And>a.\n       oldest_token q' n = Some a \\<Longrightarrow> state_rank q' n = None", "have \"Suc n \\<le> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc n \\<le> t", "using \\<open>q = \\<delta> q' (w n)\\<close>"], ["proof (prove)\nusing this:\n  q = \\<delta> q' (w n)\n\ngoal (1 subgoal):\n 1. Suc n \\<le> t", "using Min.coboundedI[OF pre_oldest_configuration_finite, of _ q n]"], ["proof (prove)\nusing this:\n  q = \\<delta> q' (w n)\n  ?a \\<in> pre_oldest_tokens q n \\<Longrightarrow>\n  Min (pre_oldest_tokens q n) \\<le> ?a\n\ngoal (1 subgoal):\n 1. Suc n \\<le> t", "unfolding \\<open>?rhs\\<close>"], ["proof (prove)\nusing this:\n  q = \\<delta> q' (w n)\n  ?a \\<in> pre_oldest_tokens q n \\<Longrightarrow> Suc n \\<le> ?a\n\ngoal (1 subgoal):\n 1. Suc n \\<le> t", "using \\<open>oldest_token q' n = Some t\\<close>"], ["proof (prove)\nusing this:\n  q = \\<delta> q' (w n)\n  ?a \\<in> pre_oldest_tokens q n \\<Longrightarrow> Suc n \\<le> ?a\n  oldest_token q' n = Some t\n\ngoal (1 subgoal):\n 1. Suc n \\<le> t", "by auto"], ["proof (state)\nthis:\n  Suc n \\<le> t\n\ngoal (2 subgoals):\n 1. oldest_token q' n = None \\<Longrightarrow> state_rank q' n = None\n 2. \\<And>a.\n       oldest_token q' n = Some a \\<Longrightarrow> state_rank q' n = None", "ultimately"], ["proof (chain)\npicking this:\n  t \\<le> n\n  Suc n \\<le> t", "have \"False\""], ["proof (prove)\nusing this:\n  t \\<le> n\n  Suc n \\<le> t\n\ngoal (1 subgoal):\n 1. False", "by linarith"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. oldest_token q' n = None \\<Longrightarrow> state_rank q' n = None\n 2. \\<And>a.\n       oldest_token q' n = Some a \\<Longrightarrow> state_rank q' n = None", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. state_rank q' n = None", ".."], ["proof (state)\nthis:\n  state_rank q' n = None\n\ngoal (1 subgoal):\n 1. oldest_token q' n = None \\<Longrightarrow> state_rank q' n = None", "qed (unfold state_rank_eq_rank, auto)"], ["proof (state)\nthis:\n  state_rank q' n = None\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "}"], ["proof (state)\nthis:\n  q = \\<delta> ?q'2 (w n) \\<Longrightarrow> state_rank ?q'2 n = None\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "hence X: \"{i. \\<exists>q'.  (\\<lambda>q. state_rank q n) q' = Some i \\<and> q = \\<delta> q' (w n)} = {}\""], ["proof (prove)\nusing this:\n  q = \\<delta> ?q'2 (w n) \\<Longrightarrow> state_rank ?q'2 n = None\n\ngoal (1 subgoal):\n 1. {i. \\<exists>q'.\n           state_rank q' n = Some i \\<and> q = \\<delta> q' (w n)} =\n    {}", "by fastforce"], ["proof (state)\nthis:\n  {i. \\<exists>q'. state_rank q' n = Some i \\<and> q = \\<delta> q' (w n)} =\n  {}\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "have \"q = q\\<^sub>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q = q\\<^sub>0", "apply (rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<noteq> q\\<^sub>0 \\<Longrightarrow> False", "using \\<open>pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}\\<close>"], ["proof (prove)\nusing this:\n  pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}\n\ngoal (1 subgoal):\n 1. q \\<noteq> q\\<^sub>0 \\<Longrightarrow> False", "unfolding pre_ranks.simps X"], ["proof (prove)\nusing this:\n  {} \\<union> (if q = q\\<^sub>0 then {max_rank} else {}) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. q \\<noteq> q\\<^sub>0 \\<Longrightarrow> False", "by simp"], ["proof (state)\nthis:\n  q = q\\<^sub>0\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "hence \"pre_ranks (\\<lambda>q. state_rank q n) (w n) q = {max_rank}\""], ["proof (prove)\nusing this:\n  q = q\\<^sub>0\n\ngoal (1 subgoal):\n 1. pre_ranks (\\<lambda>q. state_rank q n) (w n) q = {max_rank}", "unfolding pre_ranks.simps X"], ["proof (prove)\nusing this:\n  q = q\\<^sub>0\n\ngoal (1 subgoal):\n 1. {} \\<union> (if q = q\\<^sub>0 then {max_rank} else {}) = {max_rank}", "by force"], ["proof (state)\nthis:\n  pre_ranks (\\<lambda>q. state_rank q n) (w n) q = {max_rank}\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "thus ?lhs"], ["proof (prove)\nusing this:\n  pre_ranks (\\<lambda>q. state_rank q n) (w n) q = {max_rank}\n\ngoal (1 subgoal):\n 1. Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank", "by fastforce"], ["proof (state)\nthis:\n  Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  Min (pre_oldest_tokens q n) = Suc n \\<Longrightarrow>\n  Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) = max_rank\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pre_ranks_pre_oldest_token_Min_state:\n  assumes \"\\<not>sink q\"\n  assumes \"q = \\<delta> q' (w n)\"\n  assumes \"configuration q (Suc n) \\<noteq> {}\"\n  defines \"min_r \\<equiv> Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)\"\n  defines \"min_ot \\<equiv> Min (pre_oldest_tokens q n)\"\n  shows \"state_rank q' n = Some min_r \\<longleftrightarrow> oldest_token q' n = Some min_ot\"\n  (is \"?lhs \\<longleftrightarrow> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (state_rank q' n = Some min_r) = (oldest_token q' n = Some min_ot)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. state_rank q' n = Some min_r \\<Longrightarrow>\n    oldest_token q' n = Some min_ot\n 2. oldest_token q' n = Some min_ot \\<Longrightarrow>\n    state_rank q' n = Some min_r", "from assms"], ["proof (chain)\npicking this:\n  \\<not> sink q\n  q = \\<delta> q' (w n)\n  configuration q (Suc n) \\<noteq> {}\n  min_r \\<equiv> Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)\n  min_ot \\<equiv> Min (pre_oldest_tokens q n)", "have \"pre_oldest_tokens q n \\<noteq> {}\" and \"\\<not>sink q'\"\n    and \"pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}\""], ["proof (prove)\nusing this:\n  \\<not> sink q\n  q = \\<delta> q' (w n)\n  configuration q (Suc n) \\<noteq> {}\n  min_r \\<equiv> Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)\n  min_ot \\<equiv> Min (pre_oldest_tokens q n)\n\ngoal (1 subgoal):\n 1. pre_oldest_tokens q n \\<noteq> {} &&&\n    \\<not> sink q' &&&\n    pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}", "using pre_ranks_tokens pre_oldest_configuration_tokens bounded_w"], ["proof (prove)\nusing this:\n  \\<not> sink q\n  q = \\<delta> q' (w n)\n  configuration q (Suc n) \\<noteq> {}\n  min_r \\<equiv> Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)\n  min_ot \\<equiv> Min (pre_oldest_tokens q n)\n  \\<not> sink ?q \\<Longrightarrow>\n  (pre_ranks (\\<lambda>q. state_rank q ?n) (w ?n) ?q \\<noteq> {}) =\n  (configuration ?q (Suc ?n) \\<noteq> {})\n  (pre_oldest_tokens ?q ?n \\<noteq> {}) =\n  (configuration ?q (Suc ?n) \\<noteq> {})\n  range w \\<subseteq> \\<Sigma>\n\ngoal (1 subgoal):\n 1. pre_oldest_tokens q n \\<noteq> {} &&&\n    \\<not> sink q' &&&\n    pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}", "unfolding sink_def"], ["proof (prove)\nusing this:\n  \\<not> (q\\<^sub>0 \\<noteq> q \\<and>\n          (\\<forall>\\<nu>\\<in>\\<Sigma>. \\<delta> q \\<nu> = q))\n  q = \\<delta> q' (w n)\n  configuration q (Suc n) \\<noteq> {}\n  min_r \\<equiv> Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)\n  min_ot \\<equiv> Min (pre_oldest_tokens q n)\n  \\<not> (q\\<^sub>0 \\<noteq> ?q \\<and>\n          (\\<forall>\\<nu>\\<in>\\<Sigma>.\n              \\<delta> ?q \\<nu> = ?q)) \\<Longrightarrow>\n  (pre_ranks (\\<lambda>q. state_rank q ?n) (w ?n) ?q \\<noteq> {}) =\n  (configuration ?q (Suc ?n) \\<noteq> {})\n  (pre_oldest_tokens ?q ?n \\<noteq> {}) =\n  (configuration ?q (Suc ?n) \\<noteq> {})\n  range w \\<subseteq> \\<Sigma>\n\ngoal (1 subgoal):\n 1. pre_oldest_tokens q n \\<noteq> {} &&&\n    \\<not> (q\\<^sub>0 \\<noteq> q' \\<and>\n            (\\<forall>\\<nu>\\<in>\\<Sigma>. \\<delta> q' \\<nu> = q')) &&&\n    pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}", "by (simp_all, metis rangeI subset_iff)"], ["proof (state)\nthis:\n  pre_oldest_tokens q n \\<noteq> {}\n  \\<not> sink q'\n  pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}\n\ngoal (2 subgoals):\n 1. state_rank q' n = Some min_r \\<Longrightarrow>\n    oldest_token q' n = Some min_ot\n 2. oldest_token q' n = Some min_ot \\<Longrightarrow>\n    state_rank q' n = Some min_r", "{"], ["proof (state)\nthis:\n  pre_oldest_tokens q n \\<noteq> {}\n  \\<not> sink q'\n  pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}\n\ngoal (2 subgoals):\n 1. state_rank q' n = Some min_r \\<Longrightarrow>\n    oldest_token q' n = Some min_ot\n 2. oldest_token q' n = Some min_ot \\<Longrightarrow>\n    state_rank q' n = Some min_r", "assume ?lhs"], ["proof (state)\nthis:\n  state_rank q' n = Some min_r\n\ngoal (2 subgoals):\n 1. state_rank q' n = Some min_r \\<Longrightarrow>\n    oldest_token q' n = Some min_ot\n 2. oldest_token q' n = Some min_ot \\<Longrightarrow>\n    state_rank q' n = Some min_r", "thus ?rhs"], ["proof (prove)\nusing this:\n  state_rank q' n = Some min_r\n\ngoal (1 subgoal):\n 1. oldest_token q' n = Some min_ot", "proof (cases min_r max_rank rule: linorder_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>state_rank q' n = Some min_r; min_r < max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 2. \\<lbrakk>state_rank q' n = Some min_r; min_r = max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 3. \\<lbrakk>state_rank q' n = Some min_r; max_rank < min_r\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot", "case less"], ["proof (state)\nthis:\n  min_r < max_rank\n\ngoal (3 subgoals):\n 1. \\<lbrakk>state_rank q' n = Some min_r; min_r < max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 2. \\<lbrakk>state_rank q' n = Some min_r; min_r = max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 3. \\<lbrakk>state_rank q' n = Some min_r; max_rank < min_r\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot", "then"], ["proof (chain)\npicking this:\n  min_r < max_rank", "obtain ot where \"oldest_token q' n = Some ot\""], ["proof (prove)\nusing this:\n  min_r < max_rank\n\ngoal (1 subgoal):\n 1. (\\<And>ot.\n        oldest_token q' n = Some ot \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis push_down_state_rank_oldest_token \\<open>?lhs\\<close>)"], ["proof (state)\nthis:\n  oldest_token q' n = Some ot\n\ngoal (3 subgoals):\n 1. \\<lbrakk>state_rank q' n = Some min_r; min_r < max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 2. \\<lbrakk>state_rank q' n = Some min_r; min_r = max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 3. \\<lbrakk>state_rank q' n = Some min_r; max_rank < min_r\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot", "moreover"], ["proof (state)\nthis:\n  oldest_token q' n = Some ot\n\ngoal (3 subgoals):\n 1. \\<lbrakk>state_rank q' n = Some min_r; min_r < max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 2. \\<lbrakk>state_rank q' n = Some min_r; min_r = max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 3. \\<lbrakk>state_rank q' n = Some min_r; max_rank < min_r\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot", "{"], ["proof (state)\nthis:\n  oldest_token q' n = Some ot\n\ngoal (3 subgoals):\n 1. \\<lbrakk>state_rank q' n = Some min_r; min_r < max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 2. \\<lbrakk>state_rank q' n = Some min_r; min_r = max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 3. \\<lbrakk>state_rank q' n = Some min_r; max_rank < min_r\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot", "{"], ["proof (state)\nthis:\n  oldest_token q' n = Some ot\n\ngoal (3 subgoals):\n 1. \\<lbrakk>state_rank q' n = Some min_r; min_r < max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 2. \\<lbrakk>state_rank q' n = Some min_r; min_r = max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 3. \\<lbrakk>state_rank q' n = Some min_r; max_rank < min_r\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot", "fix q'' ot''"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>state_rank q' n = Some min_r; min_r < max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 2. \\<lbrakk>state_rank q' n = Some min_r; min_r = max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 3. \\<lbrakk>state_rank q' n = Some min_r; max_rank < min_r\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot", "assume \"q = \\<delta> q'' (w n)\""], ["proof (state)\nthis:\n  q = \\<delta> q'' (w n)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>state_rank q' n = Some min_r; min_r < max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 2. \\<lbrakk>state_rank q' n = Some min_r; min_r = max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 3. \\<lbrakk>state_rank q' n = Some min_r; max_rank < min_r\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot", "assume \"oldest_token q'' n = Some ot''\""], ["proof (state)\nthis:\n  oldest_token q'' n = Some ot''\n\ngoal (3 subgoals):\n 1. \\<lbrakk>state_rank q' n = Some min_r; min_r < max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 2. \\<lbrakk>state_rank q' n = Some min_r; min_r = max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 3. \\<lbrakk>state_rank q' n = Some min_r; max_rank < min_r\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot", "moreover"], ["proof (state)\nthis:\n  oldest_token q'' n = Some ot''\n\ngoal (3 subgoals):\n 1. \\<lbrakk>state_rank q' n = Some min_r; min_r < max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 2. \\<lbrakk>state_rank q' n = Some min_r; min_r = max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 3. \\<lbrakk>state_rank q' n = Some min_r; max_rank < min_r\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot", "have \"\\<not>sink q''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> sink q''", "using \\<open>q = \\<delta> q'' (w n)\\<close> assms"], ["proof (prove)\nusing this:\n  q = \\<delta> q'' (w n)\n  \\<not> sink q\n  q = \\<delta> q' (w n)\n  configuration q (Suc n) \\<noteq> {}\n  min_r \\<equiv> Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)\n  min_ot \\<equiv> Min (pre_oldest_tokens q n)\n\ngoal (1 subgoal):\n 1. \\<not> sink q''", "unfolding sink_def"], ["proof (prove)\nusing this:\n  q = \\<delta> q'' (w n)\n  \\<not> (q\\<^sub>0 \\<noteq> q \\<and>\n          (\\<forall>\\<nu>\\<in>\\<Sigma>. \\<delta> q \\<nu> = q))\n  q = \\<delta> q' (w n)\n  configuration q (Suc n) \\<noteq> {}\n  min_r \\<equiv> Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)\n  min_ot \\<equiv> Min (pre_oldest_tokens q n)\n\ngoal (1 subgoal):\n 1. \\<not> (q\\<^sub>0 \\<noteq> q'' \\<and>\n            (\\<forall>\\<nu>\\<in>\\<Sigma>. \\<delta> q'' \\<nu> = q''))", "by (metis rangeI subset_eq bounded_w)"], ["proof (state)\nthis:\n  \\<not> sink q''\n\ngoal (3 subgoals):\n 1. \\<lbrakk>state_rank q' n = Some min_r; min_r < max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 2. \\<lbrakk>state_rank q' n = Some min_r; min_r = max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 3. \\<lbrakk>state_rank q' n = Some min_r; max_rank < min_r\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot", "then"], ["proof (chain)\npicking this:\n  \\<not> sink q''", "obtain r'' where \"state_rank q'' n = Some r''\""], ["proof (prove)\nusing this:\n  \\<not> sink q''\n\ngoal (1 subgoal):\n 1. (\\<And>r''.\n        state_rank q'' n = Some r'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using \\<open>oldest_token q'' n = Some ot''\\<close>"], ["proof (prove)\nusing this:\n  \\<not> sink q''\n  oldest_token q'' n = Some ot''\n\ngoal (1 subgoal):\n 1. (\\<And>r''.\n        state_rank q'' n = Some r'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis state_rank_Some)"], ["proof (state)\nthis:\n  state_rank q'' n = Some r''\n\ngoal (3 subgoals):\n 1. \\<lbrakk>state_rank q' n = Some min_r; min_r < max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 2. \\<lbrakk>state_rank q' n = Some min_r; min_r = max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 3. \\<lbrakk>state_rank q' n = Some min_r; max_rank < min_r\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot", "moreover"], ["proof (state)\nthis:\n  state_rank q'' n = Some r''\n\ngoal (3 subgoals):\n 1. \\<lbrakk>state_rank q' n = Some min_r; min_r < max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 2. \\<lbrakk>state_rank q' n = Some min_r; min_r = max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 3. \\<lbrakk>state_rank q' n = Some min_r; max_rank < min_r\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot", "hence \"r'' \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) q\""], ["proof (prove)\nusing this:\n  state_rank q'' n = Some r''\n\ngoal (1 subgoal):\n 1. r'' \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) q", "(* Move to special lemma *)"], ["proof (prove)\nusing this:\n  state_rank q'' n = Some r''\n\ngoal (1 subgoal):\n 1. r'' \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) q", "using \\<open>q = \\<delta> q'' (w n)\\<close>"], ["proof (prove)\nusing this:\n  state_rank q'' n = Some r''\n  q = \\<delta> q'' (w n)\n\ngoal (1 subgoal):\n 1. r'' \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) q", "unfolding pre_ranks.simps"], ["proof (prove)\nusing this:\n  state_rank q'' n = Some r''\n  q = \\<delta> q'' (w n)\n\ngoal (1 subgoal):\n 1. r''\n    \\<in> {i. \\<exists>q'.\n                 state_rank q' n = Some i \\<and>\n                 q = \\<delta> q' (w n)} \\<union>\n          (if q = q\\<^sub>0 then {max_rank} else {})", "by blast"], ["proof (state)\nthis:\n  r'' \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) q\n\ngoal (3 subgoals):\n 1. \\<lbrakk>state_rank q' n = Some min_r; min_r < max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 2. \\<lbrakk>state_rank q' n = Some min_r; min_r = max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 3. \\<lbrakk>state_rank q' n = Some min_r; max_rank < min_r\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot", "then"], ["proof (chain)\npicking this:\n  r'' \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) q", "have \"min_r \\<le> r''\""], ["proof (prove)\nusing this:\n  r'' \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) q\n\ngoal (1 subgoal):\n 1. min_r \\<le> r''", "unfolding min_r_def"], ["proof (prove)\nusing this:\n  r'' \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) q\n\ngoal (1 subgoal):\n 1. Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) \\<le> r''", "by (metis Min.coboundedI pre_ranks_finite)"], ["proof (state)\nthis:\n  min_r \\<le> r''\n\ngoal (3 subgoals):\n 1. \\<lbrakk>state_rank q' n = Some min_r; min_r < max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 2. \\<lbrakk>state_rank q' n = Some min_r; min_r = max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 3. \\<lbrakk>state_rank q' n = Some min_r; max_rank < min_r\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot", "ultimately"], ["proof (chain)\npicking this:\n  oldest_token q'' n = Some ot''\n  state_rank q'' n = Some r''\n  min_r \\<le> r''", "have \"ot \\<le> ot''\""], ["proof (prove)\nusing this:\n  oldest_token q'' n = Some ot''\n  state_rank q'' n = Some r''\n  min_r \\<le> r''\n\ngoal (1 subgoal):\n 1. ot \\<le> ot''", "using state_rank_oldest_token_le[OF \\<open>?lhs\\<close> _ \\<open>oldest_token q' n = Some ot\\<close>]"], ["proof (prove)\nusing this:\n  oldest_token q'' n = Some ot''\n  state_rank q'' n = Some r''\n  min_r \\<le> r''\n  \\<lbrakk>state_rank ?q n = Some ?j; oldest_token ?q n = Some ?y\\<rbrakk>\n  \\<Longrightarrow> (min_r \\<le> ?j) = (ot \\<le> ?y)\n\ngoal (1 subgoal):\n 1. ot \\<le> ot''", "by blast"], ["proof (state)\nthis:\n  ot \\<le> ot''\n\ngoal (3 subgoals):\n 1. \\<lbrakk>state_rank q' n = Some min_r; min_r < max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 2. \\<lbrakk>state_rank q' n = Some min_r; min_r = max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 3. \\<lbrakk>state_rank q' n = Some min_r; max_rank < min_r\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot", "}"], ["proof (state)\nthis:\n  \\<lbrakk>q = \\<delta> ?q''2 (w n);\n   oldest_token ?q''2 n = Some ?ot''2\\<rbrakk>\n  \\<Longrightarrow> ot \\<le> ?ot''2\n\ngoal (3 subgoals):\n 1. \\<lbrakk>state_rank q' n = Some min_r; min_r < max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 2. \\<lbrakk>state_rank q' n = Some min_r; min_r = max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 3. \\<lbrakk>state_rank q' n = Some min_r; max_rank < min_r\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot", "hence \"\\<And>x. x \\<in> {ot. \\<exists>q'. oldest_token q' n = Some ot \\<and> q = \\<delta> q' (w n)} \\<Longrightarrow> ot \\<le> x\""], ["proof (prove)\nusing this:\n  \\<lbrakk>q = \\<delta> ?q''2 (w n);\n   oldest_token ?q''2 n = Some ?ot''2\\<rbrakk>\n  \\<Longrightarrow> ot \\<le> ?ot''2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {ot.\n                \\<exists>q'.\n                   oldest_token q' n = Some ot \\<and>\n                   q = \\<delta> q' (w n)} \\<Longrightarrow>\n       ot \\<le> x", "by blast"], ["proof (state)\nthis:\n  ?x \\<in> {ot.\n            \\<exists>q'.\n               oldest_token q' n = Some ot \\<and>\n               q = \\<delta> q' (w n)} \\<Longrightarrow>\n  ot \\<le> ?x\n\ngoal (3 subgoals):\n 1. \\<lbrakk>state_rank q' n = Some min_r; min_r < max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 2. \\<lbrakk>state_rank q' n = Some min_r; min_r = max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 3. \\<lbrakk>state_rank q' n = Some min_r; max_rank < min_r\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot", "moreover"], ["proof (state)\nthis:\n  ?x \\<in> {ot.\n            \\<exists>q'.\n               oldest_token q' n = Some ot \\<and>\n               q = \\<delta> q' (w n)} \\<Longrightarrow>\n  ot \\<le> ?x\n\ngoal (3 subgoals):\n 1. \\<lbrakk>state_rank q' n = Some min_r; min_r < max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 2. \\<lbrakk>state_rank q' n = Some min_r; min_r = max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 3. \\<lbrakk>state_rank q' n = Some min_r; max_rank < min_r\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot", "have \"ot \\<le> Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ot \\<le> Suc n", "using oldest_token_bounded[OF \\<open>oldest_token q' n = Some ot\\<close>]"], ["proof (prove)\nusing this:\n  ot \\<le> n\n\ngoal (1 subgoal):\n 1. ot \\<le> Suc n", "by simp"], ["proof (state)\nthis:\n  ot \\<le> Suc n\n\ngoal (3 subgoals):\n 1. \\<lbrakk>state_rank q' n = Some min_r; min_r < max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 2. \\<lbrakk>state_rank q' n = Some min_r; min_r = max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 3. \\<lbrakk>state_rank q' n = Some min_r; max_rank < min_r\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot", "ultimately"], ["proof (chain)\npicking this:\n  ?x \\<in> {ot.\n            \\<exists>q'.\n               oldest_token q' n = Some ot \\<and>\n               q = \\<delta> q' (w n)} \\<Longrightarrow>\n  ot \\<le> ?x\n  ot \\<le> Suc n", "have \"\\<And>x. x \\<in> pre_oldest_tokens q n \\<Longrightarrow> ot \\<le> x\""], ["proof (prove)\nusing this:\n  ?x \\<in> {ot.\n            \\<exists>q'.\n               oldest_token q' n = Some ot \\<and>\n               q = \\<delta> q' (w n)} \\<Longrightarrow>\n  ot \\<le> ?x\n  ot \\<le> Suc n\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> pre_oldest_tokens q n \\<Longrightarrow> ot \\<le> x", "unfolding pre_oldest_tokens.simps"], ["proof (prove)\nusing this:\n  ?x \\<in> {ot.\n            \\<exists>q'.\n               oldest_token q' n = Some ot \\<and>\n               q = \\<delta> q' (w n)} \\<Longrightarrow>\n  ot \\<le> ?x\n  ot \\<le> Suc n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x. \\<exists>q'.\n                      oldest_token q' n = Some x \\<and>\n                      q = \\<delta> q' (w n)} \\<union>\n               (if q = q\\<^sub>0 then {Suc n} else {}) \\<Longrightarrow>\n       ot \\<le> x", "apply (cases \"q\\<^sub>0 = q\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> {x. \\<exists>q'.\n                               oldest_token q' n = Some x \\<and>\n                               q = \\<delta> q' (w n)} \\<union>\n                        (if q = q\\<^sub>0 then {Suc n} else {});\n        \\<And>x.\n           x \\<in> {ot.\n                    \\<exists>q'.\n                       oldest_token q' n = Some ot \\<and>\n                       q = \\<delta> q' (w n)} \\<Longrightarrow>\n           ot \\<le> x;\n        ot \\<le> Suc n; q\\<^sub>0 = q\\<rbrakk>\n       \\<Longrightarrow> ot \\<le> x\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> {x. \\<exists>q'.\n                               oldest_token q' n = Some x \\<and>\n                               q = \\<delta> q' (w n)} \\<union>\n                        (if q = q\\<^sub>0 then {Suc n} else {});\n        \\<And>x.\n           x \\<in> {ot.\n                    \\<exists>q'.\n                       oldest_token q' n = Some ot \\<and>\n                       q = \\<delta> q' (w n)} \\<Longrightarrow>\n           ot \\<le> x;\n        ot \\<le> Suc n; q\\<^sub>0 \\<noteq> q\\<rbrakk>\n       \\<Longrightarrow> ot \\<le> x", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?x \\<in> pre_oldest_tokens q n \\<Longrightarrow> ot \\<le> ?x\n\ngoal (3 subgoals):\n 1. \\<lbrakk>state_rank q' n = Some min_r; min_r < max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 2. \\<lbrakk>state_rank q' n = Some min_r; min_r = max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 3. \\<lbrakk>state_rank q' n = Some min_r; max_rank < min_r\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot", "hence \"ot \\<le> min_ot\""], ["proof (prove)\nusing this:\n  ?x \\<in> pre_oldest_tokens q n \\<Longrightarrow> ot \\<le> ?x\n\ngoal (1 subgoal):\n 1. ot \\<le> min_ot", "unfolding min_ot_def"], ["proof (prove)\nusing this:\n  ?x \\<in> pre_oldest_tokens q n \\<Longrightarrow> ot \\<le> ?x\n\ngoal (1 subgoal):\n 1. ot \\<le> Min (pre_oldest_tokens q n)", "unfolding Min_ge_iff[OF pre_oldest_configuration_finite \\<open>pre_oldest_tokens q n \\<noteq> {}\\<close>, of ot]"], ["proof (prove)\nusing this:\n  ?x \\<in> pre_oldest_tokens q n \\<Longrightarrow> ot \\<le> ?x\n\ngoal (1 subgoal):\n 1. Ball (pre_oldest_tokens q n) ((\\<le>) ot)", "by simp"], ["proof (state)\nthis:\n  ot \\<le> min_ot\n\ngoal (3 subgoals):\n 1. \\<lbrakk>state_rank q' n = Some min_r; min_r < max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 2. \\<lbrakk>state_rank q' n = Some min_r; min_r = max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 3. \\<lbrakk>state_rank q' n = Some min_r; max_rank < min_r\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot", "}"], ["proof (state)\nthis:\n  ot \\<le> min_ot\n\ngoal (3 subgoals):\n 1. \\<lbrakk>state_rank q' n = Some min_r; min_r < max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 2. \\<lbrakk>state_rank q' n = Some min_r; min_r = max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 3. \\<lbrakk>state_rank q' n = Some min_r; max_rank < min_r\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot", "moreover"], ["proof (state)\nthis:\n  ot \\<le> min_ot\n\ngoal (3 subgoals):\n 1. \\<lbrakk>state_rank q' n = Some min_r; min_r < max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 2. \\<lbrakk>state_rank q' n = Some min_r; min_r = max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 3. \\<lbrakk>state_rank q' n = Some min_r; max_rank < min_r\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot", "have \"ot \\<ge> min_ot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min_ot \\<le> ot", "using Min.coboundedI[OF pre_oldest_configuration_finite] pre_oldest_configuration_element"], ["proof (prove)\nusing this:\n  ?a \\<in> pre_oldest_tokens ?q1 ?n1 \\<Longrightarrow>\n  Min (pre_oldest_tokens ?q1 ?n1) \\<le> ?a\n  \\<lbrakk>oldest_token ?q' ?n = Some ?ot; ?q = \\<delta> ?q' (w ?n)\\<rbrakk>\n  \\<Longrightarrow> ?ot \\<in> pre_oldest_tokens ?q ?n\n\ngoal (1 subgoal):\n 1. min_ot \\<le> ot", "unfolding min_ot_def"], ["proof (prove)\nusing this:\n  ?a \\<in> pre_oldest_tokens ?q1 ?n1 \\<Longrightarrow>\n  Min (pre_oldest_tokens ?q1 ?n1) \\<le> ?a\n  \\<lbrakk>oldest_token ?q' ?n = Some ?ot; ?q = \\<delta> ?q' (w ?n)\\<rbrakk>\n  \\<Longrightarrow> ?ot \\<in> pre_oldest_tokens ?q ?n\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens q n) \\<le> ot", "by (metis assms(2) calculation(1))"], ["proof (state)\nthis:\n  min_ot \\<le> ot\n\ngoal (3 subgoals):\n 1. \\<lbrakk>state_rank q' n = Some min_r; min_r < max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 2. \\<lbrakk>state_rank q' n = Some min_r; min_r = max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 3. \\<lbrakk>state_rank q' n = Some min_r; max_rank < min_r\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot", "ultimately"], ["proof (chain)\npicking this:\n  oldest_token q' n = Some ot\n  ot \\<le> min_ot\n  min_ot \\<le> ot", "show ?thesis"], ["proof (prove)\nusing this:\n  oldest_token q' n = Some ot\n  ot \\<le> min_ot\n  min_ot \\<le> ot\n\ngoal (1 subgoal):\n 1. oldest_token q' n = Some min_ot", "by simp"], ["proof (state)\nthis:\n  oldest_token q' n = Some min_ot\n\ngoal (2 subgoals):\n 1. \\<lbrakk>state_rank q' n = Some min_r; min_r = max_rank\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot\n 2. \\<lbrakk>state_rank q' n = Some min_r; max_rank < min_r\\<rbrakk>\n    \\<Longrightarrow> oldest_token q' n = Some min_ot", "qed (insert not_less, blast intro: state_rank_upper_bound less_imp_le_nat)+"], ["proof (state)\nthis:\n  oldest_token q' n = Some min_ot\n\ngoal (1 subgoal):\n 1. oldest_token q' n = Some min_ot \\<Longrightarrow>\n    state_rank q' n = Some min_r", "}"], ["proof (state)\nthis:\n  state_rank q' n = Some min_r \\<Longrightarrow>\n  oldest_token q' n = Some min_ot\n\ngoal (1 subgoal):\n 1. oldest_token q' n = Some min_ot \\<Longrightarrow>\n    state_rank q' n = Some min_r", "{"], ["proof (state)\nthis:\n  state_rank q' n = Some min_r \\<Longrightarrow>\n  oldest_token q' n = Some min_ot\n\ngoal (1 subgoal):\n 1. oldest_token q' n = Some min_ot \\<Longrightarrow>\n    state_rank q' n = Some min_r", "assume ?rhs"], ["proof (state)\nthis:\n  oldest_token q' n = Some min_ot\n\ngoal (1 subgoal):\n 1. oldest_token q' n = Some min_ot \\<Longrightarrow>\n    state_rank q' n = Some min_r", "thus ?lhs"], ["proof (prove)\nusing this:\n  oldest_token q' n = Some min_ot\n\ngoal (1 subgoal):\n 1. state_rank q' n = Some min_r", "proof (cases min_ot \"Suc n\" rule: linorder_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot < Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 2. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot = Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 3. \\<lbrakk>oldest_token q' n = Some min_ot; Suc n < min_ot\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r", "case less"], ["proof (state)\nthis:\n  min_ot < Suc n\n\ngoal (3 subgoals):\n 1. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot < Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 2. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot = Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 3. \\<lbrakk>oldest_token q' n = Some min_ot; Suc n < min_ot\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r", "then"], ["proof (chain)\npicking this:\n  min_ot < Suc n", "obtain r where \"state_rank q' n = Some r\""], ["proof (prove)\nusing this:\n  min_ot < Suc n\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        state_rank q' n = Some r \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>?rhs\\<close> \\<open>\\<not>sink q'\\<close>"], ["proof (prove)\nusing this:\n  min_ot < Suc n\n  oldest_token q' n = Some min_ot\n  \\<not> sink q'\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        state_rank q' n = Some r \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis state_rank_Some)"], ["proof (state)\nthis:\n  state_rank q' n = Some r\n\ngoal (3 subgoals):\n 1. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot < Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 2. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot = Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 3. \\<lbrakk>oldest_token q' n = Some min_ot; Suc n < min_ot\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r", "moreover"], ["proof (state)\nthis:\n  state_rank q' n = Some r\n\ngoal (3 subgoals):\n 1. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot < Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 2. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot = Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 3. \\<lbrakk>oldest_token q' n = Some min_ot; Suc n < min_ot\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r", "{"], ["proof (state)\nthis:\n  state_rank q' n = Some r\n\ngoal (3 subgoals):\n 1. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot < Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 2. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot = Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 3. \\<lbrakk>oldest_token q' n = Some min_ot; Suc n < min_ot\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r", "{"], ["proof (state)\nthis:\n  state_rank q' n = Some r\n\ngoal (3 subgoals):\n 1. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot < Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 2. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot = Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 3. \\<lbrakk>oldest_token q' n = Some min_ot; Suc n < min_ot\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r", "fix r''"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot < Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 2. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot = Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 3. \\<lbrakk>oldest_token q' n = Some min_ot; Suc n < min_ot\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r", "assume \"r'' \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) q - {max_rank}\""], ["proof (state)\nthis:\n  r'' \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) q - {max_rank}\n\ngoal (3 subgoals):\n 1. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot < Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 2. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot = Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 3. \\<lbrakk>oldest_token q' n = Some min_ot; Suc n < min_ot\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r", "then"], ["proof (chain)\npicking this:\n  r'' \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) q - {max_rank}", "obtain q'' where \"state_rank q'' n = Some r''\"\n              and \"q = \\<delta> q'' (w n)\""], ["proof (prove)\nusing this:\n  r'' \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) q - {max_rank}\n\ngoal (1 subgoal):\n 1. (\\<And>q''.\n        \\<lbrakk>state_rank q'' n = Some r'';\n         q = \\<delta> q'' (w n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using pre_ranks_state_obtain"], ["proof (prove)\nusing this:\n  r'' \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) q - {max_rank}\n  \\<lbrakk>?r\\<^sub>q \\<in> pre_ranks ?r ?\\<nu> ?q - {max_rank};\n   \\<And>q'.\n      \\<lbrakk>?r q' = Some ?r\\<^sub>q; ?q = \\<delta> q' ?\\<nu>\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>q''.\n        \\<lbrakk>state_rank q'' n = Some r'';\n         q = \\<delta> q'' (w n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  state_rank q'' n = Some r''\n  q = \\<delta> q'' (w n)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot < Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 2. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot = Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 3. \\<lbrakk>oldest_token q' n = Some min_ot; Suc n < min_ot\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r", "moreover"], ["proof (state)\nthis:\n  state_rank q'' n = Some r''\n  q = \\<delta> q'' (w n)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot < Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 2. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot = Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 3. \\<lbrakk>oldest_token q' n = Some min_ot; Suc n < min_ot\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r", "then"], ["proof (chain)\npicking this:\n  state_rank q'' n = Some r''\n  q = \\<delta> q'' (w n)", "obtain ot'' where \"oldest_token q'' n = Some ot''\""], ["proof (prove)\nusing this:\n  state_rank q'' n = Some r''\n  q = \\<delta> q'' (w n)\n\ngoal (1 subgoal):\n 1. (\\<And>ot''.\n        oldest_token q'' n = Some ot'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using push_down_state_rank_oldest_token"], ["proof (prove)\nusing this:\n  state_rank q'' n = Some r''\n  q = \\<delta> q'' (w n)\n  state_rank ?q ?n = Some ?i \\<Longrightarrow>\n  \\<exists>x. oldest_token ?q ?n = Some x\n\ngoal (1 subgoal):\n 1. (\\<And>ot''.\n        oldest_token q'' n = Some ot'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  oldest_token q'' n = Some ot''\n\ngoal (3 subgoals):\n 1. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot < Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 2. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot = Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 3. \\<lbrakk>oldest_token q' n = Some min_ot; Suc n < min_ot\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r", "moreover"], ["proof (state)\nthis:\n  oldest_token q'' n = Some ot''\n\ngoal (3 subgoals):\n 1. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot < Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 2. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot = Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 3. \\<lbrakk>oldest_token q' n = Some min_ot; Suc n < min_ot\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r", "hence \"min_ot \\<le> ot''\""], ["proof (prove)\nusing this:\n  oldest_token q'' n = Some ot''\n\ngoal (1 subgoal):\n 1. min_ot \\<le> ot''", "using \\<open>q = \\<delta> q'' (w n)\\<close> pre_oldest_configuration_element Min.coboundedI pre_oldest_configuration_finite"], ["proof (prove)\nusing this:\n  oldest_token q'' n = Some ot''\n  q = \\<delta> q'' (w n)\n  \\<lbrakk>oldest_token ?q' ?n = Some ?ot; ?q = \\<delta> ?q' (w ?n)\\<rbrakk>\n  \\<Longrightarrow> ?ot \\<in> pre_oldest_tokens ?q ?n\n  \\<lbrakk>finite ?A; ?a \\<in> ?A\\<rbrakk> \\<Longrightarrow> Min ?A \\<le> ?a\n  finite (pre_oldest_tokens ?q ?n)\n\ngoal (1 subgoal):\n 1. min_ot \\<le> ot''", "unfolding min_ot_def"], ["proof (prove)\nusing this:\n  oldest_token q'' n = Some ot''\n  q = \\<delta> q'' (w n)\n  \\<lbrakk>oldest_token ?q' ?n = Some ?ot; ?q = \\<delta> ?q' (w ?n)\\<rbrakk>\n  \\<Longrightarrow> ?ot \\<in> pre_oldest_tokens ?q ?n\n  \\<lbrakk>finite ?A; ?a \\<in> ?A\\<rbrakk> \\<Longrightarrow> Min ?A \\<le> ?a\n  finite (pre_oldest_tokens ?q ?n)\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens q n) \\<le> ot''", "by metis"], ["proof (state)\nthis:\n  min_ot \\<le> ot''\n\ngoal (3 subgoals):\n 1. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot < Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 2. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot = Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 3. \\<lbrakk>oldest_token q' n = Some min_ot; Suc n < min_ot\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r", "ultimately"], ["proof (chain)\npicking this:\n  state_rank q'' n = Some r''\n  q = \\<delta> q'' (w n)\n  oldest_token q'' n = Some ot''\n  min_ot \\<le> ot''", "have \"r \\<le> r''\""], ["proof (prove)\nusing this:\n  state_rank q'' n = Some r''\n  q = \\<delta> q'' (w n)\n  oldest_token q'' n = Some ot''\n  min_ot \\<le> ot''\n\ngoal (1 subgoal):\n 1. r \\<le> r''", "using state_rank_oldest_token_le[OF \\<open>state_rank q' n = Some r\\<close> _ \\<open>?rhs\\<close>]"], ["proof (prove)\nusing this:\n  state_rank q'' n = Some r''\n  q = \\<delta> q'' (w n)\n  oldest_token q'' n = Some ot''\n  min_ot \\<le> ot''\n  \\<lbrakk>state_rank ?q n = Some ?j; oldest_token ?q n = Some ?y\\<rbrakk>\n  \\<Longrightarrow> (r \\<le> ?j) = (min_ot \\<le> ?y)\n\ngoal (1 subgoal):\n 1. r \\<le> r''", "by blast"], ["proof (state)\nthis:\n  r \\<le> r''\n\ngoal (3 subgoals):\n 1. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot < Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 2. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot = Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 3. \\<lbrakk>oldest_token q' n = Some min_ot; Suc n < min_ot\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r", "}"], ["proof (state)\nthis:\n  ?r''2\n  \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) q -\n        {max_rank} \\<Longrightarrow>\n  r \\<le> ?r''2\n\ngoal (3 subgoals):\n 1. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot < Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 2. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot = Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 3. \\<lbrakk>oldest_token q' n = Some min_ot; Suc n < min_ot\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r", "moreover"], ["proof (state)\nthis:\n  ?r''2\n  \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) q -\n        {max_rank} \\<Longrightarrow>\n  r \\<le> ?r''2\n\ngoal (3 subgoals):\n 1. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot < Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 2. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot = Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 3. \\<lbrakk>oldest_token q' n = Some min_ot; Suc n < min_ot\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r", "have \"r \\<le> max_rank\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<le> max_rank", "using state_rank_upper_bound[OF \\<open>state_rank q' n = Some r\\<close>]"], ["proof (prove)\nusing this:\n  r < max_rank\n\ngoal (1 subgoal):\n 1. r \\<le> max_rank", "by linarith"], ["proof (state)\nthis:\n  r \\<le> max_rank\n\ngoal (3 subgoals):\n 1. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot < Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 2. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot = Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 3. \\<lbrakk>oldest_token q' n = Some min_ot; Suc n < min_ot\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r", "ultimately"], ["proof (chain)\npicking this:\n  ?r''2\n  \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) q -\n        {max_rank} \\<Longrightarrow>\n  r \\<le> ?r''2\n  r \\<le> max_rank", "have \"\\<And>x. x \\<in>  pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<Longrightarrow> r \\<le> x\""], ["proof (prove)\nusing this:\n  ?r''2\n  \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) q -\n        {max_rank} \\<Longrightarrow>\n  r \\<le> ?r''2\n  r \\<le> max_rank\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n)\n                q \\<Longrightarrow>\n       r \\<le> x", "unfolding pre_ranks.simps"], ["proof (prove)\nusing this:\n  ?r''2\n  \\<in> {i. \\<exists>q'.\n               state_rank q' n = Some i \\<and>\n               q = \\<delta> q' (w n)} \\<union>\n        (if q = q\\<^sub>0 then {max_rank} else {}) -\n        {max_rank} \\<Longrightarrow>\n  r \\<le> ?r''2\n  r \\<le> max_rank\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {i. \\<exists>q'.\n                      state_rank q' n = Some i \\<and>\n                      q = \\<delta> q' (w n)} \\<union>\n               (if q = q\\<^sub>0 then {max_rank} else {}) \\<Longrightarrow>\n       r \\<le> x", "apply (cases \"q\\<^sub>0 = q\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> {i. \\<exists>q'.\n                               state_rank q' n = Some i \\<and>\n                               q = \\<delta> q' (w n)} \\<union>\n                        (if q = q\\<^sub>0 then {max_rank} else {});\n        \\<And>r''.\n           r''\n           \\<in> {i. \\<exists>q'.\n                        state_rank q' n = Some i \\<and>\n                        q = \\<delta> q' (w n)} \\<union>\n                 (if q = q\\<^sub>0 then {max_rank} else {}) -\n                 {max_rank} \\<Longrightarrow>\n           r \\<le> r'';\n        r \\<le> max_rank; q\\<^sub>0 = q\\<rbrakk>\n       \\<Longrightarrow> r \\<le> x\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> {i. \\<exists>q'.\n                               state_rank q' n = Some i \\<and>\n                               q = \\<delta> q' (w n)} \\<union>\n                        (if q = q\\<^sub>0 then {max_rank} else {});\n        \\<And>r''.\n           r''\n           \\<in> {i. \\<exists>q'.\n                        state_rank q' n = Some i \\<and>\n                        q = \\<delta> q' (w n)} \\<union>\n                 (if q = q\\<^sub>0 then {max_rank} else {}) -\n                 {max_rank} \\<Longrightarrow>\n           r \\<le> r'';\n        r \\<le> max_rank; q\\<^sub>0 \\<noteq> q\\<rbrakk>\n       \\<Longrightarrow> r \\<le> x", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?x \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<Longrightarrow>\n  r \\<le> ?x\n\ngoal (3 subgoals):\n 1. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot < Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 2. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot = Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 3. \\<lbrakk>oldest_token q' n = Some min_ot; Suc n < min_ot\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r", "hence \"r \\<le> min_r\""], ["proof (prove)\nusing this:\n  ?x \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<Longrightarrow>\n  r \\<le> ?x\n\ngoal (1 subgoal):\n 1. r \\<le> min_r", "unfolding min_r_def Min_ge_iff[OF pre_ranks_finite \\<open>pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}\\<close>]"], ["proof (prove)\nusing this:\n  ?x \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<Longrightarrow>\n  r \\<le> ?x\n\ngoal (1 subgoal):\n 1. Ball (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) ((\\<le>) r)", "by simp"], ["proof (state)\nthis:\n  r \\<le> min_r\n\ngoal (3 subgoals):\n 1. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot < Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 2. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot = Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 3. \\<lbrakk>oldest_token q' n = Some min_ot; Suc n < min_ot\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r", "}"], ["proof (state)\nthis:\n  r \\<le> min_r\n\ngoal (3 subgoals):\n 1. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot < Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 2. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot = Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 3. \\<lbrakk>oldest_token q' n = Some min_ot; Suc n < min_ot\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r", "moreover"], ["proof (state)\nthis:\n  r \\<le> min_r\n\ngoal (3 subgoals):\n 1. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot < Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 2. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot = Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 3. \\<lbrakk>oldest_token q' n = Some min_ot; Suc n < min_ot\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r", "have \"r \\<ge> min_r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min_r \\<le> r", "using Min.coboundedI[OF pre_ranks_finite] pre_ranks_element"], ["proof (prove)\nusing this:\n  ?a \\<in> pre_ranks (\\<lambda>q. state_rank q ?n1) ?\\<nu>1\n            ?q1 \\<Longrightarrow>\n  Min (pre_ranks (\\<lambda>q. state_rank q ?n1) ?\\<nu>1 ?q1) \\<le> ?a\n  \\<lbrakk>state_rank ?q' ?n = Some ?r; ?q = \\<delta> ?q' (w ?n)\\<rbrakk>\n  \\<Longrightarrow> ?r \\<in> pre_ranks (\\<lambda>q. state_rank q ?n) (w ?n)\n                              ?q\n\ngoal (1 subgoal):\n 1. min_r \\<le> r", "unfolding min_r_def"], ["proof (prove)\nusing this:\n  ?a \\<in> pre_ranks (\\<lambda>q. state_rank q ?n1) ?\\<nu>1\n            ?q1 \\<Longrightarrow>\n  Min (pre_ranks (\\<lambda>q. state_rank q ?n1) ?\\<nu>1 ?q1) \\<le> ?a\n  \\<lbrakk>state_rank ?q' ?n = Some ?r; ?q = \\<delta> ?q' (w ?n)\\<rbrakk>\n  \\<Longrightarrow> ?r \\<in> pre_ranks (\\<lambda>q. state_rank q ?n) (w ?n)\n                              ?q\n\ngoal (1 subgoal):\n 1. Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) \\<le> r", "by (metis assms(2) calculation(1))"], ["proof (state)\nthis:\n  min_r \\<le> r\n\ngoal (3 subgoals):\n 1. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot < Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 2. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot = Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 3. \\<lbrakk>oldest_token q' n = Some min_ot; Suc n < min_ot\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r", "ultimately"], ["proof (chain)\npicking this:\n  state_rank q' n = Some r\n  r \\<le> min_r\n  min_r \\<le> r", "show ?thesis"], ["proof (prove)\nusing this:\n  state_rank q' n = Some r\n  r \\<le> min_r\n  min_r \\<le> r\n\ngoal (1 subgoal):\n 1. state_rank q' n = Some min_r", "by simp"], ["proof (state)\nthis:\n  state_rank q' n = Some min_r\n\ngoal (2 subgoals):\n 1. \\<lbrakk>oldest_token q' n = Some min_ot; min_ot = Suc n\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r\n 2. \\<lbrakk>oldest_token q' n = Some min_ot; Suc n < min_ot\\<rbrakk>\n    \\<Longrightarrow> state_rank q' n = Some min_r", "qed (insert not_less, blast intro: oldest_token_bounded Suc_lessD)+"], ["proof (state)\nthis:\n  state_rank q' n = Some min_r\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  oldest_token q' n = Some min_ot \\<Longrightarrow>\n  state_rank q' n = Some min_r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Min_pre_ranks_pre_oldest_tokens:\n  fixes n\n  defines \"r \\<equiv> (\\<lambda>q. state_rank q n)\"\n  assumes \"configuration p (Suc n) \\<noteq> {}\"\n      and \"configuration q (Suc n) \\<noteq> {}\"\n  assumes \"\\<not>sink q\"\n      and \"\\<not>sink p\"\n  shows \"Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<longleftrightarrow> Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\"\n  (is \"?lhs \\<longleftrightarrow> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)) =\n    (Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "have pre_ranks_Min: \"\\<And>x \\<nu>. (x < Min (pre_ranks r (w n) q)) = (\\<forall>a \\<in> pre_ranks r (w n) q. x < a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x \\<nu>.\n       (x < Min (pre_ranks r (w n) q)) =\n       (\\<forall>a\\<in>pre_ranks r (w n) q. x < a)", "using assms pre_ranks_finite Min.bounded_iff pre_ranks_tokens"], ["proof (prove)\nusing this:\n  r \\<equiv> \\<lambda>q. state_rank q n\n  configuration p (Suc n) \\<noteq> {}\n  configuration q (Suc n) \\<noteq> {}\n  \\<not> sink q\n  \\<not> sink p\n  finite (pre_ranks (\\<lambda>q. state_rank q ?n) ?\\<nu> ?q)\n  \\<lbrakk>finite ?A; ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> (?x \\<le> Min ?A) = (\\<forall>a\\<in>?A. ?x \\<le> a)\n  \\<not> sink ?q \\<Longrightarrow>\n  (pre_ranks (\\<lambda>q. state_rank q ?n) (w ?n) ?q \\<noteq> {}) =\n  (configuration ?q (Suc ?n) \\<noteq> {})\n\ngoal (1 subgoal):\n 1. \\<And>x \\<nu>.\n       (x < Min (pre_ranks r (w n) q)) =\n       (\\<forall>a\\<in>pre_ranks r (w n) q. x < a)", "by simp"], ["proof (state)\nthis:\n  (?x < Min (pre_ranks r (w n) q)) =\n  (\\<forall>a\\<in>pre_ranks r (w n) q. ?x < a)\n\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "have pre_oldest_configuration_Min: \"\\<And>x. (x < Min (pre_oldest_tokens q n)) = (\\<forall>a\\<in>pre_oldest_tokens q n. x < a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (x < Min (pre_oldest_tokens q n)) =\n       (\\<forall>a\\<in>pre_oldest_tokens q n. x < a)", "using assms pre_oldest_configuration_finite Min.bounded_iff pre_oldest_configuration_tokens"], ["proof (prove)\nusing this:\n  r \\<equiv> \\<lambda>q. state_rank q n\n  configuration p (Suc n) \\<noteq> {}\n  configuration q (Suc n) \\<noteq> {}\n  \\<not> sink q\n  \\<not> sink p\n  finite (pre_oldest_tokens ?q ?n)\n  \\<lbrakk>finite ?A; ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> (?x \\<le> Min ?A) = (\\<forall>a\\<in>?A. ?x \\<le> a)\n  (pre_oldest_tokens ?q ?n \\<noteq> {}) =\n  (configuration ?q (Suc ?n) \\<noteq> {})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (x < Min (pre_oldest_tokens q n)) =\n       (\\<forall>a\\<in>pre_oldest_tokens q n. x < a)", "by simp"], ["proof (state)\nthis:\n  (?x1 < Min (pre_oldest_tokens q n)) =\n  (\\<forall>a\\<in>pre_oldest_tokens q n. ?x1 < a)\n\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "have \"\\<And>x. w x \\<in> \\<Sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. w x \\<in> \\<Sigma>", "using bounded_w"], ["proof (prove)\nusing this:\n  range w \\<subseteq> \\<Sigma>\n\ngoal (1 subgoal):\n 1. \\<And>x. w x \\<in> \\<Sigma>", "by auto"], ["proof (state)\nthis:\n  w ?x1 \\<in> \\<Sigma>\n\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "{"], ["proof (state)\nthis:\n  w ?x1 \\<in> \\<Sigma>\n\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "let ?min_i = \"Min (pre_ranks r (w n) p)\""], ["proof (state)\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "let ?min_j = \"Min (pre_ranks r (w n) q)\""], ["proof (state)\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "assume ?lhs"], ["proof (state)\nthis:\n  Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)\n\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "have \"?min_i \\<in> pre_ranks r (w n) p\" and \"?min_j \\<in> pre_ranks r (w n) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Min (pre_ranks r (w n) p) \\<in> pre_ranks r (w n) p &&&\n    Min (pre_ranks r (w n) q) \\<in> pre_ranks r (w n) q", "using Min_in[OF pre_ranks_finite] assms pre_ranks_tokens"], ["proof (prove)\nusing this:\n  pre_ranks (\\<lambda>q. state_rank q ?n1) ?\\<nu>1 ?q1 \\<noteq>\n  {} \\<Longrightarrow>\n  Min (pre_ranks (\\<lambda>q. state_rank q ?n1) ?\\<nu>1 ?q1)\n  \\<in> pre_ranks (\\<lambda>q. state_rank q ?n1) ?\\<nu>1 ?q1\n  r \\<equiv> \\<lambda>q. state_rank q n\n  configuration p (Suc n) \\<noteq> {}\n  configuration q (Suc n) \\<noteq> {}\n  \\<not> sink q\n  \\<not> sink p\n  \\<not> sink ?q \\<Longrightarrow>\n  (pre_ranks (\\<lambda>q. state_rank q ?n) (w ?n) ?q \\<noteq> {}) =\n  (configuration ?q (Suc ?n) \\<noteq> {})\n\ngoal (1 subgoal):\n 1. Min (pre_ranks r (w n) p) \\<in> pre_ranks r (w n) p &&&\n    Min (pre_ranks r (w n) q) \\<in> pre_ranks r (w n) q", "by presburger+"], ["proof (state)\nthis:\n  Min (pre_ranks r (w n) p) \\<in> pre_ranks r (w n) p\n  Min (pre_ranks r (w n) q) \\<in> pre_ranks r (w n) q\n\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "hence \"?min_i \\<le> max_rank\" and \"?min_j \\<le> max_rank\""], ["proof (prove)\nusing this:\n  Min (pre_ranks r (w n) p) \\<in> pre_ranks r (w n) p\n  Min (pre_ranks r (w n) q) \\<in> pre_ranks r (w n) q\n\ngoal (1 subgoal):\n 1. Min (pre_ranks r (w n) p) \\<le> max_rank &&&\n    Min (pre_ranks r (w n) q) \\<le> max_rank", "using pre_ranks_range atLeastAtMost_iff"], ["proof (prove)\nusing this:\n  Min (pre_ranks r (w n) p) \\<in> pre_ranks r (w n) p\n  Min (pre_ranks r (w n) q) \\<in> pre_ranks r (w n) q\n  pre_ranks (\\<lambda>q. state_rank q ?n) ?\\<nu> ?q\n  \\<subseteq> {0..max_rank}\n  (?i \\<in> {?l..?u}) = (?l \\<le> ?i \\<and> ?i \\<le> ?u)\n\ngoal (1 subgoal):\n 1. Min (pre_ranks r (w n) p) \\<le> max_rank &&&\n    Min (pre_ranks r (w n) q) \\<le> max_rank", "unfolding r_def"], ["proof (prove)\nusing this:\n  Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) p)\n  \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) p\n  Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)\n  \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) q\n  pre_ranks (\\<lambda>q. state_rank q ?n) ?\\<nu> ?q\n  \\<subseteq> {0..max_rank}\n  (?i \\<in> {?l..?u}) = (?l \\<le> ?i \\<and> ?i \\<le> ?u)\n\ngoal (1 subgoal):\n 1. Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) p) \\<le> max_rank &&&\n    Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) \\<le> max_rank", "by blast+"], ["proof (state)\nthis:\n  Min (pre_ranks r (w n) p) \\<le> max_rank\n  Min (pre_ranks r (w n) q) \\<le> max_rank\n\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "with \\<open>?lhs\\<close>"], ["proof (chain)\npicking this:\n  Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)\n  Min (pre_ranks r (w n) p) \\<le> max_rank\n  Min (pre_ranks r (w n) q) \\<le> max_rank", "have \"?min_i \\<noteq> max_rank\""], ["proof (prove)\nusing this:\n  Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)\n  Min (pre_ranks r (w n) p) \\<le> max_rank\n  Min (pre_ranks r (w n) q) \\<le> max_rank\n\ngoal (1 subgoal):\n 1. Min (pre_ranks r (w n) p) \\<noteq> max_rank", "by linarith"], ["proof (state)\nthis:\n  Min (pre_ranks r (w n) p) \\<noteq> max_rank\n\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "then"], ["proof (chain)\npicking this:\n  Min (pre_ranks r (w n) p) \\<noteq> max_rank", "obtain p' i' where \"i' = ?min_i\" and \"r p' = Some i'\" and \"p = \\<delta> p' (w n)\""], ["proof (prove)\nusing this:\n  Min (pre_ranks r (w n) p) \\<noteq> max_rank\n\ngoal (1 subgoal):\n 1. (\\<And>i' p'.\n        \\<lbrakk>i' = Min (pre_ranks r (w n) p); r p' = Some i';\n         p = \\<delta> p' (w n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>?min_i \\<in> pre_ranks r (w n) p\\<close>"], ["proof (prove)\nusing this:\n  Min (pre_ranks r (w n) p) \\<noteq> max_rank\n  Min (pre_ranks r (w n) p) \\<in> pre_ranks r (w n) p\n\ngoal (1 subgoal):\n 1. (\\<And>i' p'.\n        \\<lbrakk>i' = Min (pre_ranks r (w n) p); r p' = Some i';\n         p = \\<delta> p' (w n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (cases \"p = q\\<^sub>0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i' p'.\n                \\<lbrakk>i' = Min (pre_ranks r (w n) p); r p' = Some i';\n                 p = \\<delta> p' (w n)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     Min (pre_ranks r (w n) p) \\<noteq> max_rank;\n     Min (pre_ranks r (w n) p) \\<in> pre_ranks r (w n) p;\n     p = q\\<^sub>0\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>i' p'.\n                \\<lbrakk>i' = Min (pre_ranks r (w n) p); r p' = Some i';\n                 p = \\<delta> p' (w n)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     Min (pre_ranks r (w n) p) \\<noteq> max_rank;\n     Min (pre_ranks r (w n) p) \\<in> pre_ranks r (w n) p;\n     p \\<noteq> q\\<^sub>0\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i' p'.\n                \\<lbrakk>i' = Min (pre_ranks r (w n) p); r p' = Some i';\n                 p = \\<delta> p' (w n)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     Min (pre_ranks r (w n) p) \\<noteq> max_rank;\n     Min (pre_ranks r (w n) p) \\<in> pre_ranks r (w n) p;\n     p \\<noteq> q\\<^sub>0\\<rbrakk>\n    \\<Longrightarrow> thesis", "by fastforce"], ["proof (state)\nthis:\n  i' = Min (pre_ranks r (w n) p)\n  r p' = Some i'\n  p = \\<delta> p' (w n)\n\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "then"], ["proof (chain)\npicking this:\n  i' = Min (pre_ranks r (w n) p)\n  r p' = Some i'\n  p = \\<delta> p' (w n)", "obtain ot' where \"oldest_token p' n = Some ot'\""], ["proof (prove)\nusing this:\n  i' = Min (pre_ranks r (w n) p)\n  r p' = Some i'\n  p = \\<delta> p' (w n)\n\ngoal (1 subgoal):\n 1. (\\<And>ot'.\n        oldest_token p' n = Some ot' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding assms"], ["proof (prove)\nusing this:\n  i' = Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) p)\n  state_rank p' n = Some i'\n  p = \\<delta> p' (w n)\n\ngoal (1 subgoal):\n 1. (\\<And>ot'.\n        oldest_token p' n = Some ot' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis push_down_state_rank_oldest_token)"], ["proof (state)\nthis:\n  oldest_token p' n = Some ot'\n\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "have \"state_rank p' n = Some ?min_i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_rank p' n = Some (Min (pre_ranks r (w n) p))", "using \\<open>i' = ?min_i\\<close> \\<open>r p' = Some i'\\<close>"], ["proof (prove)\nusing this:\n  i' = Min (pre_ranks r (w n) p)\n  r p' = Some i'\n\ngoal (1 subgoal):\n 1. state_rank p' n = Some (Min (pre_ranks r (w n) p))", "unfolding assms"], ["proof (prove)\nusing this:\n  i' = Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) p)\n  state_rank p' n = Some i'\n\ngoal (1 subgoal):\n 1. state_rank p' n =\n    Some (Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) p))", "by simp"], ["proof (state)\nthis:\n  state_rank p' n = Some (Min (pre_ranks r (w n) p))\n\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "hence \"ot' = Min (pre_oldest_tokens p n)\""], ["proof (prove)\nusing this:\n  state_rank p' n = Some (Min (pre_ranks r (w n) p))\n\ngoal (1 subgoal):\n 1. ot' = Min (pre_oldest_tokens p n)", "using pre_ranks_pre_oldest_token_Min_state[OF \\<open>\\<not>sink p\\<close> \\<open>p = \\<delta> p' (w n)\\<close> \\<open>configuration p (Suc n) \\<noteq> {}\\<close>] \\<open>oldest_token p' n = Some ot'\\<close>"], ["proof (prove)\nusing this:\n  state_rank p' n = Some (Min (pre_ranks r (w n) p))\n  (state_rank p' n =\n   Some (Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) p))) =\n  (oldest_token p' n = Some (Min (pre_oldest_tokens p n)))\n  oldest_token p' n = Some ot'\n\ngoal (1 subgoal):\n 1. ot' = Min (pre_oldest_tokens p n)", "unfolding r_def"], ["proof (prove)\nusing this:\n  state_rank p' n =\n  Some (Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) p))\n  (state_rank p' n =\n   Some (Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) p))) =\n  (oldest_token p' n = Some (Min (pre_oldest_tokens p n)))\n  oldest_token p' n = Some ot'\n\ngoal (1 subgoal):\n 1. ot' = Min (pre_oldest_tokens p n)", "by (metis option.inject)"], ["proof (state)\nthis:\n  ot' = Min (pre_oldest_tokens p n)\n\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "moreover"], ["proof (state)\nthis:\n  ot' = Min (pre_oldest_tokens p n)\n\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "have \"ot' < Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ot' < Suc n", "proof (cases ot' \"Suc n\" rule: linorder_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. ot' < Suc n \\<Longrightarrow> ot' < Suc n\n 2. ot' = Suc n \\<Longrightarrow> ot' < Suc n\n 3. Suc n < ot' \\<Longrightarrow> ot' < Suc n", "case equal"], ["proof (state)\nthis:\n  ot' = Suc n\n\ngoal (3 subgoals):\n 1. ot' < Suc n \\<Longrightarrow> ot' < Suc n\n 2. ot' = Suc n \\<Longrightarrow> ot' < Suc n\n 3. Suc n < ot' \\<Longrightarrow> ot' < Suc n", "hence \"?min_i = max_rank\""], ["proof (prove)\nusing this:\n  ot' = Suc n\n\ngoal (1 subgoal):\n 1. Min (pre_ranks r (w n) p) = max_rank", "using pre_ranks_pre_oldest_token_Min_state_special[of p n, OF \\<open>\\<not>sink p\\<close> \\<open>configuration p (Suc n) \\<noteq> {}\\<close>] assms"], ["proof (prove)\nusing this:\n  ot' = Suc n\n  (Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) p) = max_rank) =\n  (Min (pre_oldest_tokens p n) = Suc n)\n  r \\<equiv> \\<lambda>q. state_rank q n\n  configuration p (Suc n) \\<noteq> {}\n  configuration q (Suc n) \\<noteq> {}\n  \\<not> sink q\n  \\<not> sink p\n\ngoal (1 subgoal):\n 1. Min (pre_ranks r (w n) p) = max_rank", "unfolding \\<open>ot' = Min (pre_oldest_tokens p n)\\<close>"], ["proof (prove)\nusing this:\n  Min (pre_oldest_tokens p n) = Suc n\n  (Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) p) = max_rank) =\n  (Min (pre_oldest_tokens p n) = Suc n)\n  r \\<equiv> \\<lambda>q. state_rank q n\n  configuration p (Suc n) \\<noteq> {}\n  configuration q (Suc n) \\<noteq> {}\n  \\<not> sink q\n  \\<not> sink p\n\ngoal (1 subgoal):\n 1. Min (pre_ranks r (w n) p) = max_rank", "by simp"], ["proof (state)\nthis:\n  Min (pre_ranks r (w n) p) = max_rank\n\ngoal (3 subgoals):\n 1. ot' < Suc n \\<Longrightarrow> ot' < Suc n\n 2. ot' = Suc n \\<Longrightarrow> ot' < Suc n\n 3. Suc n < ot' \\<Longrightarrow> ot' < Suc n", "thus ?thesis"], ["proof (prove)\nusing this:\n  Min (pre_ranks r (w n) p) = max_rank\n\ngoal (1 subgoal):\n 1. ot' < Suc n", "using \\<open>?min_i \\<noteq> max_rank\\<close>"], ["proof (prove)\nusing this:\n  Min (pre_ranks r (w n) p) = max_rank\n  Min (pre_ranks r (w n) p) \\<noteq> max_rank\n\ngoal (1 subgoal):\n 1. ot' < Suc n", "by simp"], ["proof (state)\nthis:\n  ot' < Suc n\n\ngoal (2 subgoals):\n 1. ot' < Suc n \\<Longrightarrow> ot' < Suc n\n 2. Suc n < ot' \\<Longrightarrow> ot' < Suc n", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. ot' < Suc n \\<Longrightarrow> ot' < Suc n\n 2. Suc n < ot' \\<Longrightarrow> ot' < Suc n", "case greater"], ["proof (state)\nthis:\n  Suc n < ot'\n\ngoal (2 subgoals):\n 1. ot' < Suc n \\<Longrightarrow> ot' < Suc n\n 2. Suc n < ot' \\<Longrightarrow> ot' < Suc n", "moreover"], ["proof (state)\nthis:\n  Suc n < ot'\n\ngoal (2 subgoals):\n 1. ot' < Suc n \\<Longrightarrow> ot' < Suc n\n 2. Suc n < ot' \\<Longrightarrow> ot' < Suc n", "have \"ot' \\<in> {0..Suc n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ot' \\<in> {0..Suc n}", "using \\<open>oldest_token p' n = Some ot'\\<close>[THEN oldest_token_bounded]"], ["proof (prove)\nusing this:\n  ot' \\<le> n\n\ngoal (1 subgoal):\n 1. ot' \\<in> {0..Suc n}", "by fastforce"], ["proof (state)\nthis:\n  ot' \\<in> {0..Suc n}\n\ngoal (2 subgoals):\n 1. ot' < Suc n \\<Longrightarrow> ot' < Suc n\n 2. Suc n < ot' \\<Longrightarrow> ot' < Suc n", "ultimately"], ["proof (chain)\npicking this:\n  Suc n < ot'\n  ot' \\<in> {0..Suc n}", "show ?thesis"], ["proof (prove)\nusing this:\n  Suc n < ot'\n  ot' \\<in> {0..Suc n}\n\ngoal (1 subgoal):\n 1. ot' < Suc n", "by simp"], ["proof (state)\nthis:\n  ot' < Suc n\n\ngoal (1 subgoal):\n 1. ot' < Suc n \\<Longrightarrow> ot' < Suc n", "qed simp"], ["proof (state)\nthis:\n  ot' < Suc n\n\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "moreover"], ["proof (state)\nthis:\n  ot' < Suc n\n\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "{"], ["proof (state)\nthis:\n  ot' < Suc n\n\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "fix ot\\<^sub>q"], ["proof (state)\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "assume \"ot\\<^sub>q \\<in> pre_oldest_tokens q n - {Suc n}\""], ["proof (state)\nthis:\n  ot\\<^sub>q \\<in> pre_oldest_tokens q n - {Suc n}\n\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "then"], ["proof (chain)\npicking this:\n  ot\\<^sub>q \\<in> pre_oldest_tokens q n - {Suc n}", "obtain q' where \"oldest_token q' n = Some ot\\<^sub>q\" and \"q = \\<delta> q' (w n)\""], ["proof (prove)\nusing this:\n  ot\\<^sub>q \\<in> pre_oldest_tokens q n - {Suc n}\n\ngoal (1 subgoal):\n 1. (\\<And>q'.\n        \\<lbrakk>oldest_token q' n = Some ot\\<^sub>q;\n         q = \\<delta> q' (w n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using pre_oldest_configuration_obtain"], ["proof (prove)\nusing this:\n  ot\\<^sub>q \\<in> pre_oldest_tokens q n - {Suc n}\n  \\<lbrakk>?x \\<in> pre_oldest_tokens ?q ?n - {Suc ?n};\n   \\<And>q'.\n      \\<lbrakk>oldest_token q' ?n = Some ?x;\n       ?q = \\<delta> q' (w ?n)\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>q'.\n        \\<lbrakk>oldest_token q' n = Some ot\\<^sub>q;\n         q = \\<delta> q' (w n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  oldest_token q' n = Some ot\\<^sub>q\n  q = \\<delta> q' (w n)\n\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "moreover"], ["proof (state)\nthis:\n  oldest_token q' n = Some ot\\<^sub>q\n  q = \\<delta> q' (w n)\n\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "hence \"\\<not>sink q'\""], ["proof (prove)\nusing this:\n  oldest_token q' n = Some ot\\<^sub>q\n  q = \\<delta> q' (w n)\n\ngoal (1 subgoal):\n 1. \\<not> sink q'", "using \\<open>\\<not>sink q\\<close> \\<open>\\<And>x. w x \\<in> \\<Sigma>\\<close>"], ["proof (prove)\nusing this:\n  oldest_token q' n = Some ot\\<^sub>q\n  q = \\<delta> q' (w n)\n  \\<not> sink q\n  w ?x \\<in> \\<Sigma>\n\ngoal (1 subgoal):\n 1. \\<not> sink q'", "unfolding sink_def"], ["proof (prove)\nusing this:\n  oldest_token q' n = Some ot\\<^sub>q\n  q = \\<delta> q' (w n)\n  \\<not> (q\\<^sub>0 \\<noteq> q \\<and>\n          (\\<forall>\\<nu>\\<in>\\<Sigma>. \\<delta> q \\<nu> = q))\n  w ?x \\<in> \\<Sigma>\n\ngoal (1 subgoal):\n 1. \\<not> (q\\<^sub>0 \\<noteq> q' \\<and>\n            (\\<forall>\\<nu>\\<in>\\<Sigma>. \\<delta> q' \\<nu> = q'))", "by auto"], ["proof (state)\nthis:\n  \\<not> sink q'\n\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "then"], ["proof (chain)\npicking this:\n  \\<not> sink q'", "obtain r\\<^sub>q where \"state_rank q' n = Some r\\<^sub>q\""], ["proof (prove)\nusing this:\n  \\<not> sink q'\n\ngoal (1 subgoal):\n 1. (\\<And>r\\<^sub>q.\n        state_rank q' n = Some r\\<^sub>q \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding assms state_rank.simps"], ["proof (prove)\nusing this:\n  \\<not> sink q'\n\ngoal (1 subgoal):\n 1. (\\<And>r\\<^sub>q.\n        (if configuration q' n \\<noteq> {} \\<and> \\<not> sink q'\n         then Some (card (senior_states q' n)) else None) =\n        Some r\\<^sub>q \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using \\<open>oldest_token q' n = Some ot\\<^sub>q\\<close>"], ["proof (prove)\nusing this:\n  \\<not> sink q'\n  oldest_token q' n = Some ot\\<^sub>q\n\ngoal (1 subgoal):\n 1. (\\<And>r\\<^sub>q.\n        (if configuration q' n \\<noteq> {} \\<and> \\<not> sink q'\n         then Some (card (senior_states q' n)) else None) =\n        Some r\\<^sub>q \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis oldest_token.simps option.distinct(2))"], ["proof (state)\nthis:\n  state_rank q' n = Some r\\<^sub>q\n\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "moreover"], ["proof (state)\nthis:\n  state_rank q' n = Some r\\<^sub>q\n\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "hence \"r\\<^sub>q \\<in> pre_ranks r (w n) q\""], ["proof (prove)\nusing this:\n  state_rank q' n = Some r\\<^sub>q\n\ngoal (1 subgoal):\n 1. r\\<^sub>q \\<in> pre_ranks r (w n) q", "using \\<open>q = \\<delta> q' (w n)\\<close>"], ["proof (prove)\nusing this:\n  state_rank q' n = Some r\\<^sub>q\n  q = \\<delta> q' (w n)\n\ngoal (1 subgoal):\n 1. r\\<^sub>q \\<in> pre_ranks r (w n) q", "unfolding pre_ranks.simps assms"], ["proof (prove)\nusing this:\n  state_rank q' n = Some r\\<^sub>q\n  q = \\<delta> q' (w n)\n\ngoal (1 subgoal):\n 1. r\\<^sub>q\n    \\<in> {i. \\<exists>q'.\n                 state_rank q' n = Some i \\<and>\n                 q = \\<delta> q' (w n)} \\<union>\n          (if q = q\\<^sub>0 then {max_rank} else {})", "by blast"], ["proof (state)\nthis:\n  r\\<^sub>q \\<in> pre_ranks r (w n) q\n\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "hence \"?min_j \\<le> r\\<^sub>q\""], ["proof (prove)\nusing this:\n  r\\<^sub>q \\<in> pre_ranks r (w n) q\n\ngoal (1 subgoal):\n 1. Min (pre_ranks r (w n) q) \\<le> r\\<^sub>q", "using Min.coboundedI[OF pre_ranks_finite]"], ["proof (prove)\nusing this:\n  r\\<^sub>q \\<in> pre_ranks r (w n) q\n  ?a \\<in> pre_ranks (\\<lambda>q. state_rank q ?n1) ?\\<nu>1\n            ?q1 \\<Longrightarrow>\n  Min (pre_ranks (\\<lambda>q. state_rank q ?n1) ?\\<nu>1 ?q1) \\<le> ?a\n\ngoal (1 subgoal):\n 1. Min (pre_ranks r (w n) q) \\<le> r\\<^sub>q", "unfolding assms"], ["proof (prove)\nusing this:\n  r\\<^sub>q \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) q\n  ?a \\<in> pre_ranks (\\<lambda>q. state_rank q ?n1) ?\\<nu>1\n            ?q1 \\<Longrightarrow>\n  Min (pre_ranks (\\<lambda>q. state_rank q ?n1) ?\\<nu>1 ?q1) \\<le> ?a\n\ngoal (1 subgoal):\n 1. Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q) \\<le> r\\<^sub>q", "by blast"], ["proof (state)\nthis:\n  Min (pre_ranks r (w n) q) \\<le> r\\<^sub>q\n\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "hence \"?min_i < r\\<^sub>q\""], ["proof (prove)\nusing this:\n  Min (pre_ranks r (w n) q) \\<le> r\\<^sub>q\n\ngoal (1 subgoal):\n 1. Min (pre_ranks r (w n) p) < r\\<^sub>q", "using \\<open>?lhs\\<close>"], ["proof (prove)\nusing this:\n  Min (pre_ranks r (w n) q) \\<le> r\\<^sub>q\n  Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)\n\ngoal (1 subgoal):\n 1. Min (pre_ranks r (w n) p) < r\\<^sub>q", "by linarith"], ["proof (state)\nthis:\n  Min (pre_ranks r (w n) p) < r\\<^sub>q\n\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "hence \"ot' < ot\\<^sub>q\""], ["proof (prove)\nusing this:\n  Min (pre_ranks r (w n) p) < r\\<^sub>q\n\ngoal (1 subgoal):\n 1. ot' < ot\\<^sub>q", "using state_rank_oldest_token[OF \\<open>state_rank p' n = Some ?min_i\\<close> \\<open>state_rank q' n = Some r\\<^sub>q\\<close> \\<open>oldest_token p' n = Some ot'\\<close> \\<open>oldest_token q' n = Some ot\\<^sub>q\\<close>]"], ["proof (prove)\nusing this:\n  Min (pre_ranks r (w n) p) < r\\<^sub>q\n  (Min (pre_ranks r (w n) p) < r\\<^sub>q) = (ot' < ot\\<^sub>q)\n\ngoal (1 subgoal):\n 1. ot' < ot\\<^sub>q", "unfolding assms"], ["proof (prove)\nusing this:\n  Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) p) < r\\<^sub>q\n  (Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) p) < r\\<^sub>q) =\n  (ot' < ot\\<^sub>q)\n\ngoal (1 subgoal):\n 1. ot' < ot\\<^sub>q", "by simp"], ["proof (state)\nthis:\n  ot' < ot\\<^sub>q\n\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "}"], ["proof (state)\nthis:\n  ?ot\\<^sub>q3 \\<in> pre_oldest_tokens q n - {Suc n} \\<Longrightarrow>\n  ot' < ?ot\\<^sub>q3\n\ngoal (2 subgoals):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n    Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n 2. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "ultimately"], ["proof (chain)\npicking this:\n  ot' = Min (pre_oldest_tokens p n)\n  ot' < Suc n\n  ?ot\\<^sub>q3 \\<in> pre_oldest_tokens q n - {Suc n} \\<Longrightarrow>\n  ot' < ?ot\\<^sub>q3", "show ?rhs"], ["proof (prove)\nusing this:\n  ot' = Min (pre_oldest_tokens p n)\n  ot' < Suc n\n  ?ot\\<^sub>q3 \\<in> pre_oldest_tokens q n - {Suc n} \\<Longrightarrow>\n  ot' < ?ot\\<^sub>q3\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)", "using pre_oldest_configuration_Min"], ["proof (prove)\nusing this:\n  ot' = Min (pre_oldest_tokens p n)\n  ot' < Suc n\n  ?ot\\<^sub>q3 \\<in> pre_oldest_tokens q n - {Suc n} \\<Longrightarrow>\n  ot' < ?ot\\<^sub>q3\n  (?x1 < Min (pre_oldest_tokens q n)) =\n  (\\<forall>a\\<in>pre_oldest_tokens q n. ?x1 < a)\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)", "by blast"], ["proof (state)\nthis:\n  Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "}"], ["proof (state)\nthis:\n  Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n  Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "{"], ["proof (state)\nthis:\n  Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q) \\<Longrightarrow>\n  Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "define ot_p where \"ot_p = Min (pre_oldest_tokens p n)\""], ["proof (state)\nthis:\n  ot_p = Min (pre_oldest_tokens p n)\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "define ot_q where \"ot_q = Min (pre_oldest_tokens q n)\""], ["proof (state)\nthis:\n  ot_q = Min (pre_oldest_tokens q n)\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "assume ?rhs"], ["proof (state)\nthis:\n  Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "hence \"ot_p < ot_q\""], ["proof (prove)\nusing this:\n  Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n\ngoal (1 subgoal):\n 1. ot_p < ot_q", "unfolding ot_p_def ot_q_def"], ["proof (prove)\nusing this:\n  Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n) < Min (pre_oldest_tokens q n)", "."], ["proof (state)\nthis:\n  ot_p < ot_q\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "have \"oldest_token p (Suc n) = Some ot_p\" and \"oldest_token q (Suc n) = Some ot_q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oldest_token p (Suc n) = Some ot_p &&&\n    oldest_token q (Suc n) = Some ot_q", "unfolding ot_p_def ot_q_def oldest_token_rec pre_oldest_configuration_tokens"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if configuration p (Suc n) \\<noteq> {}\n     then Some (Min (pre_oldest_tokens p n)) else None) =\n    Some (Min (pre_oldest_tokens p n)) &&&\n    (if configuration q (Suc n) \\<noteq> {}\n     then Some (Min (pre_oldest_tokens q n)) else None) =\n    Some (Min (pre_oldest_tokens q n))", "by (metis assms)+"], ["proof (state)\nthis:\n  oldest_token p (Suc n) = Some ot_p\n  oldest_token q (Suc n) = Some ot_q\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "(* Min oldest \\<longleftrightarrow> Min rank *)"], ["proof (state)\nthis:\n  oldest_token p (Suc n) = Some ot_p\n  oldest_token q (Suc n) = Some ot_q\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "define min_r\\<^sub>p where \"min_r\\<^sub>p = Min (pre_ranks r (w n) p)\""], ["proof (state)\nthis:\n  min_r\\<^sub>p = Min (pre_ranks r (w n) p)\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "hence \"min_r\\<^sub>p \\<in> pre_ranks r (w n) p\""], ["proof (prove)\nusing this:\n  min_r\\<^sub>p = Min (pre_ranks r (w n) p)\n\ngoal (1 subgoal):\n 1. min_r\\<^sub>p \\<in> pre_ranks r (w n) p", "using pre_ranks_Min_in assms pre_ranks_tokens"], ["proof (prove)\nusing this:\n  min_r\\<^sub>p = Min (pre_ranks r (w n) p)\n  pre_ranks (\\<lambda>q. state_rank q ?n) ?\\<nu> ?q \\<noteq>\n  {} \\<Longrightarrow>\n  Min (pre_ranks (\\<lambda>q. state_rank q ?n) ?\\<nu> ?q)\n  \\<in> pre_ranks (\\<lambda>q. state_rank q ?n) ?\\<nu> ?q\n  r \\<equiv> \\<lambda>q. state_rank q n\n  configuration p (Suc n) \\<noteq> {}\n  configuration q (Suc n) \\<noteq> {}\n  \\<not> sink q\n  \\<not> sink p\n  \\<not> sink ?q \\<Longrightarrow>\n  (pre_ranks (\\<lambda>q. state_rank q ?n) (w ?n) ?q \\<noteq> {}) =\n  (configuration ?q (Suc ?n) \\<noteq> {})\n\ngoal (1 subgoal):\n 1. min_r\\<^sub>p \\<in> pre_ranks r (w n) p", "by simp"], ["proof (state)\nthis:\n  min_r\\<^sub>p \\<in> pre_ranks r (w n) p\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "hence *: \"min_r\\<^sub>p < max_rank\""], ["proof (prove)\nusing this:\n  min_r\\<^sub>p \\<in> pre_ranks r (w n) p\n\ngoal (1 subgoal):\n 1. min_r\\<^sub>p < max_rank", "proof (cases min_r\\<^sub>p max_rank rule: linorder_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     min_r\\<^sub>p < max_rank\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank\n 2. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     min_r\\<^sub>p = max_rank\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank\n 3. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     max_rank < min_r\\<^sub>p\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank", "case equal"], ["proof (state)\nthis:\n  min_r\\<^sub>p = max_rank\n\ngoal (3 subgoals):\n 1. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     min_r\\<^sub>p < max_rank\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank\n 2. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     min_r\\<^sub>p = max_rank\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank\n 3. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     max_rank < min_r\\<^sub>p\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank", "hence \"ot_p = Suc n\""], ["proof (prove)\nusing this:\n  min_r\\<^sub>p = max_rank\n\ngoal (1 subgoal):\n 1. ot_p = Suc n", "using pre_ranks_pre_oldest_token_Min_state_special[of p n, OF _ \\<open>configuration p (Suc n) \\<noteq> {}\\<close>] assms"], ["proof (prove)\nusing this:\n  min_r\\<^sub>p = max_rank\n  \\<not> sink p \\<Longrightarrow>\n  (Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) p) = max_rank) =\n  (Min (pre_oldest_tokens p n) = Suc n)\n  r \\<equiv> \\<lambda>q. state_rank q n\n  configuration p (Suc n) \\<noteq> {}\n  configuration q (Suc n) \\<noteq> {}\n  \\<not> sink q\n  \\<not> sink p\n\ngoal (1 subgoal):\n 1. ot_p = Suc n", "unfolding ot_p_def min_r\\<^sub>p_def"], ["proof (prove)\nusing this:\n  Min (pre_ranks r (w n) p) = max_rank\n  \\<not> sink p \\<Longrightarrow>\n  (Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) p) = max_rank) =\n  (Min (pre_oldest_tokens p n) = Suc n)\n  r \\<equiv> \\<lambda>q. state_rank q n\n  configuration p (Suc n) \\<noteq> {}\n  configuration q (Suc n) \\<noteq> {}\n  \\<not> sink q\n  \\<not> sink p\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n) = Suc n", "by simp"], ["proof (state)\nthis:\n  ot_p = Suc n\n\ngoal (3 subgoals):\n 1. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     min_r\\<^sub>p < max_rank\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank\n 2. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     min_r\\<^sub>p = max_rank\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank\n 3. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     max_rank < min_r\\<^sub>p\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank", "moreover"], ["proof (state)\nthis:\n  ot_p = Suc n\n\ngoal (3 subgoals):\n 1. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     min_r\\<^sub>p < max_rank\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank\n 2. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     min_r\\<^sub>p = max_rank\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank\n 3. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     max_rank < min_r\\<^sub>p\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank", "have \"Min (pre_oldest_tokens q n) \\<in> pre_oldest_tokens q n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens q n) \\<in> pre_oldest_tokens q n", "using Min_in[OF pre_oldest_configuration_finite ] assms pre_oldest_configuration_tokens"], ["proof (prove)\nusing this:\n  pre_oldest_tokens ?q1 ?n1 \\<noteq> {} \\<Longrightarrow>\n  Min (pre_oldest_tokens ?q1 ?n1) \\<in> pre_oldest_tokens ?q1 ?n1\n  r \\<equiv> \\<lambda>q. state_rank q n\n  configuration p (Suc n) \\<noteq> {}\n  configuration q (Suc n) \\<noteq> {}\n  \\<not> sink q\n  \\<not> sink p\n  (pre_oldest_tokens ?q ?n \\<noteq> {}) =\n  (configuration ?q (Suc ?n) \\<noteq> {})\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens q n) \\<in> pre_oldest_tokens q n", "by presburger"], ["proof (state)\nthis:\n  Min (pre_oldest_tokens q n) \\<in> pre_oldest_tokens q n\n\ngoal (3 subgoals):\n 1. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     min_r\\<^sub>p < max_rank\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank\n 2. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     min_r\\<^sub>p = max_rank\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank\n 3. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     max_rank < min_r\\<^sub>p\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank", "hence \"ot_q \\<in> {0..Suc n}\""], ["proof (prove)\nusing this:\n  Min (pre_oldest_tokens q n) \\<in> pre_oldest_tokens q n\n\ngoal (1 subgoal):\n 1. ot_q \\<in> {0..Suc n}", "using pre_oldest_configuration_range[of q n]"], ["proof (prove)\nusing this:\n  Min (pre_oldest_tokens q n) \\<in> pre_oldest_tokens q n\n  pre_oldest_tokens q n \\<subseteq> {0..Suc n}\n\ngoal (1 subgoal):\n 1. ot_q \\<in> {0..Suc n}", "unfolding ot_q_def"], ["proof (prove)\nusing this:\n  Min (pre_oldest_tokens q n) \\<in> pre_oldest_tokens q n\n  pre_oldest_tokens q n \\<subseteq> {0..Suc n}\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens q n) \\<in> {0..Suc n}", "by blast"], ["proof (state)\nthis:\n  ot_q \\<in> {0..Suc n}\n\ngoal (3 subgoals):\n 1. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     min_r\\<^sub>p < max_rank\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank\n 2. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     min_r\\<^sub>p = max_rank\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank\n 3. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     max_rank < min_r\\<^sub>p\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank", "hence \"ot_q \\<le> Suc n\""], ["proof (prove)\nusing this:\n  ot_q \\<in> {0..Suc n}\n\ngoal (1 subgoal):\n 1. ot_q \\<le> Suc n", "by simp"], ["proof (state)\nthis:\n  ot_q \\<le> Suc n\n\ngoal (3 subgoals):\n 1. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     min_r\\<^sub>p < max_rank\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank\n 2. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     min_r\\<^sub>p = max_rank\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank\n 3. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     max_rank < min_r\\<^sub>p\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank", "ultimately"], ["proof (chain)\npicking this:\n  ot_p = Suc n\n  ot_q \\<le> Suc n", "show ?thesis"], ["proof (prove)\nusing this:\n  ot_p = Suc n\n  ot_q \\<le> Suc n\n\ngoal (1 subgoal):\n 1. min_r\\<^sub>p < max_rank", "using \\<open>ot_p < ot_q\\<close>"], ["proof (prove)\nusing this:\n  ot_p = Suc n\n  ot_q \\<le> Suc n\n  ot_p < ot_q\n\ngoal (1 subgoal):\n 1. min_r\\<^sub>p < max_rank", "by simp"], ["proof (state)\nthis:\n  min_r\\<^sub>p < max_rank\n\ngoal (2 subgoals):\n 1. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     min_r\\<^sub>p < max_rank\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank\n 2. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     max_rank < min_r\\<^sub>p\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     min_r\\<^sub>p < max_rank\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank\n 2. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     max_rank < min_r\\<^sub>p\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank", "case greater"], ["proof (state)\nthis:\n  max_rank < min_r\\<^sub>p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     min_r\\<^sub>p < max_rank\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank\n 2. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     max_rank < min_r\\<^sub>p\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank", "moreover"], ["proof (state)\nthis:\n  max_rank < min_r\\<^sub>p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     min_r\\<^sub>p < max_rank\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank\n 2. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     max_rank < min_r\\<^sub>p\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank", "have \"min_r\\<^sub>p \\<in> {0..max_rank}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min_r\\<^sub>p \\<in> {0..max_rank}", "using pre_ranks_range \\<open>min_r\\<^sub>p \\<in> pre_ranks r (w n) p\\<close>"], ["proof (prove)\nusing this:\n  pre_ranks (\\<lambda>q. state_rank q ?n) ?\\<nu> ?q\n  \\<subseteq> {0..max_rank}\n  min_r\\<^sub>p \\<in> pre_ranks r (w n) p\n\ngoal (1 subgoal):\n 1. min_r\\<^sub>p \\<in> {0..max_rank}", "unfolding r_def"], ["proof (prove)\nusing this:\n  pre_ranks (\\<lambda>q. state_rank q ?n) ?\\<nu> ?q\n  \\<subseteq> {0..max_rank}\n  min_r\\<^sub>p \\<in> pre_ranks (\\<lambda>q. state_rank q n) (w n) p\n\ngoal (1 subgoal):\n 1. min_r\\<^sub>p \\<in> {0..max_rank}", ".."], ["proof (state)\nthis:\n  min_r\\<^sub>p \\<in> {0..max_rank}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     min_r\\<^sub>p < max_rank\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank\n 2. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     max_rank < min_r\\<^sub>p\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank", "ultimately"], ["proof (chain)\npicking this:\n  max_rank < min_r\\<^sub>p\n  min_r\\<^sub>p \\<in> {0..max_rank}", "show ?thesis"], ["proof (prove)\nusing this:\n  max_rank < min_r\\<^sub>p\n  min_r\\<^sub>p \\<in> {0..max_rank}\n\ngoal (1 subgoal):\n 1. min_r\\<^sub>p < max_rank", "by simp"], ["proof (state)\nthis:\n  min_r\\<^sub>p < max_rank\n\ngoal (1 subgoal):\n 1. \\<lbrakk>min_r\\<^sub>p \\<in> pre_ranks r (w n) p;\n     min_r\\<^sub>p < max_rank\\<rbrakk>\n    \\<Longrightarrow> min_r\\<^sub>p < max_rank", "qed simp"], ["proof (state)\nthis:\n  min_r\\<^sub>p < max_rank\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "moreover"], ["proof (state)\nthis:\n  min_r\\<^sub>p < max_rank\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "from *"], ["proof (chain)\npicking this:\n  min_r\\<^sub>p < max_rank", "have \"min_r\\<^sub>p \\<in> pre_ranks r (w n) p - {max_rank}\""], ["proof (prove)\nusing this:\n  min_r\\<^sub>p < max_rank\n\ngoal (1 subgoal):\n 1. min_r\\<^sub>p \\<in> pre_ranks r (w n) p - {max_rank}", "using \\<open>min_r\\<^sub>p \\<in> pre_ranks r (w n) p\\<close>"], ["proof (prove)\nusing this:\n  min_r\\<^sub>p < max_rank\n  min_r\\<^sub>p \\<in> pre_ranks r (w n) p\n\ngoal (1 subgoal):\n 1. min_r\\<^sub>p \\<in> pre_ranks r (w n) p - {max_rank}", "by simp"], ["proof (state)\nthis:\n  min_r\\<^sub>p \\<in> pre_ranks r (w n) p - {max_rank}\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "then"], ["proof (chain)\npicking this:\n  min_r\\<^sub>p \\<in> pre_ranks r (w n) p - {max_rank}", "obtain p' where \"r p' = Some min_r\\<^sub>p\" and \"p = \\<delta> p' (w n)\""], ["proof (prove)\nusing this:\n  min_r\\<^sub>p \\<in> pre_ranks r (w n) p - {max_rank}\n\ngoal (1 subgoal):\n 1. (\\<And>p'.\n        \\<lbrakk>r p' = Some min_r\\<^sub>p; p = \\<delta> p' (w n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using pre_ranks_state_obtain"], ["proof (prove)\nusing this:\n  min_r\\<^sub>p \\<in> pre_ranks r (w n) p - {max_rank}\n  \\<lbrakk>?r\\<^sub>q \\<in> pre_ranks ?r ?\\<nu> ?q - {max_rank};\n   \\<And>q'.\n      \\<lbrakk>?r q' = Some ?r\\<^sub>q; ?q = \\<delta> q' ?\\<nu>\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>p'.\n        \\<lbrakk>r p' = Some min_r\\<^sub>p; p = \\<delta> p' (w n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  r p' = Some min_r\\<^sub>p\n  p = \\<delta> p' (w n)\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "hence \"oldest_token p' n = Some ot_p\""], ["proof (prove)\nusing this:\n  r p' = Some min_r\\<^sub>p\n  p = \\<delta> p' (w n)\n\ngoal (1 subgoal):\n 1. oldest_token p' n = Some ot_p", "using pre_ranks_pre_oldest_token_Min_state[OF \\<open>\\<not>sink p\\<close> \\<open>p = \\<delta> p' (w n)\\<close> \\<open>configuration p (Suc n) \\<noteq> {}\\<close>]"], ["proof (prove)\nusing this:\n  r p' = Some min_r\\<^sub>p\n  p = \\<delta> p' (w n)\n  (state_rank p' n =\n   Some (Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) p))) =\n  (oldest_token p' n = Some (Min (pre_oldest_tokens p n)))\n\ngoal (1 subgoal):\n 1. oldest_token p' n = Some ot_p", "unfolding r_def[symmetric] min_r\\<^sub>p_def[symmetric] ot_p_def[symmetric]"], ["proof (prove)\nusing this:\n  r p' = Some min_r\\<^sub>p\n  p = \\<delta> p' (w n)\n  (state_rank p' n = Some min_r\\<^sub>p) = (oldest_token p' n = Some ot_p)\n\ngoal (1 subgoal):\n 1. oldest_token p' n = Some ot_p", "by (metis r_def)"], ["proof (state)\nthis:\n  oldest_token p' n = Some ot_p\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "{"], ["proof (state)\nthis:\n  oldest_token p' n = Some ot_p\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "fix r\\<^sub>q"], ["proof (state)\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "assume \"r\\<^sub>q \\<in> pre_ranks r (w n) q - {max_rank}\""], ["proof (state)\nthis:\n  r\\<^sub>q \\<in> pre_ranks r (w n) q - {max_rank}\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "then"], ["proof (chain)\npicking this:\n  r\\<^sub>q \\<in> pre_ranks r (w n) q - {max_rank}", "obtain q' where q': \"r q' = Some r\\<^sub>q\" \"q = \\<delta> q' (w n)\""], ["proof (prove)\nusing this:\n  r\\<^sub>q \\<in> pre_ranks r (w n) q - {max_rank}\n\ngoal (1 subgoal):\n 1. (\\<And>q'.\n        \\<lbrakk>r q' = Some r\\<^sub>q; q = \\<delta> q' (w n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using pre_ranks_state_obtain"], ["proof (prove)\nusing this:\n  r\\<^sub>q \\<in> pre_ranks r (w n) q - {max_rank}\n  \\<lbrakk>?r\\<^sub>q \\<in> pre_ranks ?r ?\\<nu> ?q - {max_rank};\n   \\<And>q'.\n      \\<lbrakk>?r q' = Some ?r\\<^sub>q; ?q = \\<delta> q' ?\\<nu>\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>q'.\n        \\<lbrakk>r q' = Some r\\<^sub>q; q = \\<delta> q' (w n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  r q' = Some r\\<^sub>q\n  q = \\<delta> q' (w n)\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "moreover"], ["proof (state)\nthis:\n  r q' = Some r\\<^sub>q\n  q = \\<delta> q' (w n)\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "from q'"], ["proof (chain)\npicking this:\n  r q' = Some r\\<^sub>q\n  q = \\<delta> q' (w n)", "obtain ot_q' where ot_q': \"oldest_token q' n = Some ot_q'\""], ["proof (prove)\nusing this:\n  r q' = Some r\\<^sub>q\n  q = \\<delta> q' (w n)\n\ngoal (1 subgoal):\n 1. (\\<And>ot_q'.\n        oldest_token q' n = Some ot_q' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding assms"], ["proof (prove)\nusing this:\n  state_rank q' n = Some r\\<^sub>q\n  q = \\<delta> q' (w n)\n\ngoal (1 subgoal):\n 1. (\\<And>ot_q'.\n        oldest_token q' n = Some ot_q' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis push_down_state_rank_oldest_token)"], ["proof (state)\nthis:\n  oldest_token q' n = Some ot_q'\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "moreover"], ["proof (state)\nthis:\n  oldest_token q' n = Some ot_q'\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "from ot_q'"], ["proof (chain)\npicking this:\n  oldest_token q' n = Some ot_q'", "have \"ot_q' \\<in> pre_oldest_tokens q n\""], ["proof (prove)\nusing this:\n  oldest_token q' n = Some ot_q'\n\ngoal (1 subgoal):\n 1. ot_q' \\<in> pre_oldest_tokens q n", "using \\<open>q = \\<delta> q' (w n)\\<close>"], ["proof (prove)\nusing this:\n  oldest_token q' n = Some ot_q'\n  q = \\<delta> q' (w n)\n\ngoal (1 subgoal):\n 1. ot_q' \\<in> pre_oldest_tokens q n", "unfolding pre_oldest_tokens.simps"], ["proof (prove)\nusing this:\n  oldest_token q' n = Some ot_q'\n  q = \\<delta> q' (w n)\n\ngoal (1 subgoal):\n 1. ot_q'\n    \\<in> {x. \\<exists>q'.\n                 oldest_token q' n = Some x \\<and>\n                 q = \\<delta> q' (w n)} \\<union>\n          (if q = q\\<^sub>0 then {Suc n} else {})", "by blast"], ["proof (state)\nthis:\n  ot_q' \\<in> pre_oldest_tokens q n\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "hence \"ot_q \\<le> ot_q'\""], ["proof (prove)\nusing this:\n  ot_q' \\<in> pre_oldest_tokens q n\n\ngoal (1 subgoal):\n 1. ot_q \\<le> ot_q'", "unfolding ot_q_def"], ["proof (prove)\nusing this:\n  ot_q' \\<in> pre_oldest_tokens q n\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens q n) \\<le> ot_q'", "by (rule Min.coboundedI[OF pre_oldest_configuration_finite])"], ["proof (state)\nthis:\n  ot_q \\<le> ot_q'\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "hence \"ot_p < ot_q'\""], ["proof (prove)\nusing this:\n  ot_q \\<le> ot_q'\n\ngoal (1 subgoal):\n 1. ot_p < ot_q'", "using \\<open>ot_p < ot_q\\<close>"], ["proof (prove)\nusing this:\n  ot_q \\<le> ot_q'\n  ot_p < ot_q\n\ngoal (1 subgoal):\n 1. ot_p < ot_q'", "by linarith"], ["proof (state)\nthis:\n  ot_p < ot_q'\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "ultimately"], ["proof (chain)\npicking this:\n  r q' = Some r\\<^sub>q\n  q = \\<delta> q' (w n)\n  oldest_token q' n = Some ot_q'\n  ot_p < ot_q'", "have \"min_r\\<^sub>p < r\\<^sub>q\""], ["proof (prove)\nusing this:\n  r q' = Some r\\<^sub>q\n  q = \\<delta> q' (w n)\n  oldest_token q' n = Some ot_q'\n  ot_p < ot_q'\n\ngoal (1 subgoal):\n 1. min_r\\<^sub>p < r\\<^sub>q", "using state_rank_oldest_token \\<open>r p' = Some min_r\\<^sub>p\\<close> \\<open>oldest_token p' n = Some ot_p\\<close>"], ["proof (prove)\nusing this:\n  r q' = Some r\\<^sub>q\n  q = \\<delta> q' (w n)\n  oldest_token q' n = Some ot_q'\n  ot_p < ot_q'\n  \\<lbrakk>state_rank ?p ?n = Some ?i; state_rank ?q ?n = Some ?j;\n   oldest_token ?p ?n = Some ?x; oldest_token ?q ?n = Some ?y\\<rbrakk>\n  \\<Longrightarrow> (?i < ?j) = (?x < ?y)\n  r p' = Some min_r\\<^sub>p\n  oldest_token p' n = Some ot_p\n\ngoal (1 subgoal):\n 1. min_r\\<^sub>p < r\\<^sub>q", "unfolding assms"], ["proof (prove)\nusing this:\n  state_rank q' n = Some r\\<^sub>q\n  q = \\<delta> q' (w n)\n  oldest_token q' n = Some ot_q'\n  ot_p < ot_q'\n  \\<lbrakk>state_rank ?p ?n = Some ?i; state_rank ?q ?n = Some ?j;\n   oldest_token ?p ?n = Some ?x; oldest_token ?q ?n = Some ?y\\<rbrakk>\n  \\<Longrightarrow> (?i < ?j) = (?x < ?y)\n  state_rank p' n = Some min_r\\<^sub>p\n  oldest_token p' n = Some ot_p\n\ngoal (1 subgoal):\n 1. min_r\\<^sub>p < r\\<^sub>q", "by blast"], ["proof (state)\nthis:\n  min_r\\<^sub>p < r\\<^sub>q\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "}"], ["proof (state)\nthis:\n  ?r\\<^sub>q3 \\<in> pre_ranks r (w n) q - {max_rank} \\<Longrightarrow>\n  min_r\\<^sub>p < ?r\\<^sub>q3\n\ngoal (1 subgoal):\n 1. Min (pre_oldest_tokens p n)\n    < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n    Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "ultimately"], ["proof (chain)\npicking this:\n  min_r\\<^sub>p < max_rank\n  ?r\\<^sub>q3 \\<in> pre_ranks r (w n) q - {max_rank} \\<Longrightarrow>\n  min_r\\<^sub>p < ?r\\<^sub>q3", "show ?lhs"], ["proof (prove)\nusing this:\n  min_r\\<^sub>p < max_rank\n  ?r\\<^sub>q3 \\<in> pre_ranks r (w n) q - {max_rank} \\<Longrightarrow>\n  min_r\\<^sub>p < ?r\\<^sub>q3\n\ngoal (1 subgoal):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "using pre_ranks_Min"], ["proof (prove)\nusing this:\n  min_r\\<^sub>p < max_rank\n  ?r\\<^sub>q3 \\<in> pre_ranks r (w n) q - {max_rank} \\<Longrightarrow>\n  min_r\\<^sub>p < ?r\\<^sub>q3\n  (?x < Min (pre_ranks r (w n) q)) =\n  (\\<forall>a\\<in>pre_ranks r (w n) q. ?x < a)\n\ngoal (1 subgoal):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "unfolding min_r\\<^sub>p_def"], ["proof (prove)\nusing this:\n  Min (pre_ranks r (w n) p) < max_rank\n  ?r\\<^sub>q3 \\<in> pre_ranks r (w n) q - {max_rank} \\<Longrightarrow>\n  Min (pre_ranks r (w n) p) < ?r\\<^sub>q3\n  (?x < Min (pre_ranks r (w n) q)) =\n  (\\<forall>a\\<in>pre_ranks r (w n) q. ?x < a)\n\ngoal (1 subgoal):\n 1. Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)", "by blast"], ["proof (state)\nthis:\n  Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  Min (pre_oldest_tokens p n)\n  < Min (pre_oldest_tokens q n) \\<Longrightarrow>\n  Min (pre_ranks r (w n) p) < Min (pre_ranks r (w n) q)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Definition of initial and step\\<close>"], ["", "lemma state_rank_initial:\n  \"state_rank q 0 = initial q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_rank q 0 = initial q", "using state_rank_initial_state"], ["proof (prove)\nusing this:\n  (\\<And>i.\n      state_rank q\\<^sub>0 ?n = Some i \\<Longrightarrow>\n      ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. state_rank q 0 = initial q", "by force"], ["", "lemma state_rank_step:\n  \"state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q\"\n  (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q", "proof (cases \"sink q\")"], ["proof (state)\ngoal (2 subgoals):\n 1. sink q \\<Longrightarrow>\n    state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q\n 2. \\<not> sink q \\<Longrightarrow>\n    state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q", "case False"], ["proof (state)\nthis:\n  \\<not> sink q\n\ngoal (2 subgoals):\n 1. sink q \\<Longrightarrow>\n    state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q\n 2. \\<not> sink q \\<Longrightarrow>\n    state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q", "{"], ["proof (state)\nthis:\n  \\<not> sink q\n\ngoal (2 subgoals):\n 1. sink q \\<Longrightarrow>\n    state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q\n 2. \\<not> sink q \\<Longrightarrow>\n    state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q", "assume \"configuration q (Suc n) = {}\""], ["proof (state)\nthis:\n  configuration q (Suc n) = {}\n\ngoal (2 subgoals):\n 1. sink q \\<Longrightarrow>\n    state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q\n 2. \\<not> sink q \\<Longrightarrow>\n    state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q", "hence ?thesis"], ["proof (prove)\nusing this:\n  configuration q (Suc n) = {}\n\ngoal (1 subgoal):\n 1. state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q", "using False pull_up_configuration_state_rank pre_ranks_tokens"], ["proof (prove)\nusing this:\n  configuration q (Suc n) = {}\n  \\<not> sink q\n  configuration ?q ?n = {} \\<Longrightarrow> state_rank ?q ?n = None\n  \\<not> sink ?q \\<Longrightarrow>\n  (pre_ranks (\\<lambda>q. state_rank q ?n) (w ?n) ?q \\<noteq> {}) =\n  (configuration ?q (Suc ?n) \\<noteq> {})\n\ngoal (1 subgoal):\n 1. state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q", "unfolding step.simps"], ["proof (prove)\nusing this:\n  configuration q (Suc n) = {}\n  \\<not> sink q\n  configuration ?q ?n = {} \\<Longrightarrow> state_rank ?q ?n = None\n  \\<not> sink ?q \\<Longrightarrow>\n  (pre_ranks (\\<lambda>q. state_rank q ?n) (w ?n) ?q \\<noteq> {}) =\n  (configuration ?q (Suc ?n) \\<noteq> {})\n\ngoal (1 subgoal):\n 1. state_rank q (Suc n) =\n    (if \\<not> sink q \\<and>\n        pre_ranks (\\<lambda>q. state_rank q n) (w n) q \\<noteq> {}\n     then Some\n           (card\n             {q'.\n              \\<not> sink q' \\<and>\n              pre_ranks (\\<lambda>q. state_rank q n) (w n) q' \\<noteq>\n              {} \\<and>\n              Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n              < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)})\n     else None)", "by presburger"], ["proof (state)\nthis:\n  state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q\n\ngoal (2 subgoals):\n 1. sink q \\<Longrightarrow>\n    state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q\n 2. \\<not> sink q \\<Longrightarrow>\n    state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q", "}"], ["proof (state)\nthis:\n  configuration q (Suc n) = {} \\<Longrightarrow>\n  state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q\n\ngoal (2 subgoals):\n 1. sink q \\<Longrightarrow>\n    state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q\n 2. \\<not> sink q \\<Longrightarrow>\n    state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q", "moreover"], ["proof (state)\nthis:\n  configuration q (Suc n) = {} \\<Longrightarrow>\n  state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q\n\ngoal (2 subgoals):\n 1. sink q \\<Longrightarrow>\n    state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q\n 2. \\<not> sink q \\<Longrightarrow>\n    state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q", "{"], ["proof (state)\nthis:\n  configuration q (Suc n) = {} \\<Longrightarrow>\n  state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q\n\ngoal (2 subgoals):\n 1. sink q \\<Longrightarrow>\n    state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q\n 2. \\<not> sink q \\<Longrightarrow>\n    state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q", "assume \"configuration q (Suc n) \\<noteq> {}\""], ["proof (state)\nthis:\n  configuration q (Suc n) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. sink q \\<Longrightarrow>\n    state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q\n 2. \\<not> sink q \\<Longrightarrow>\n    state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q", "hence \"?lhs = Some (card (senior_states q (Suc n)))\""], ["proof (prove)\nusing this:\n  configuration q (Suc n) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. state_rank q (Suc n) = Some (card (senior_states q (Suc n)))", "using False"], ["proof (prove)\nusing this:\n  configuration q (Suc n) \\<noteq> {}\n  \\<not> sink q\n\ngoal (1 subgoal):\n 1. state_rank q (Suc n) = Some (card (senior_states q (Suc n)))", "unfolding state_rank.simps"], ["proof (prove)\nusing this:\n  configuration q (Suc n) \\<noteq> {}\n  \\<not> sink q\n\ngoal (1 subgoal):\n 1. (if configuration q (Suc n) \\<noteq> {} \\<and> \\<not> sink q\n     then Some (card (senior_states q (Suc n))) else None) =\n    Some (card (senior_states q (Suc n)))", "by presburger"], ["proof (state)\nthis:\n  state_rank q (Suc n) = Some (card (senior_states q (Suc n)))\n\ngoal (2 subgoals):\n 1. sink q \\<Longrightarrow>\n    state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q\n 2. \\<not> sink q \\<Longrightarrow>\n    state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q", "also"], ["proof (state)\nthis:\n  state_rank q (Suc n) = Some (card (senior_states q (Suc n)))\n\ngoal (2 subgoals):\n 1. sink q \\<Longrightarrow>\n    state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q\n 2. \\<not> sink q \\<Longrightarrow>\n    state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q", "have \"\\<dots> = ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some (card (senior_states q (Suc n))) =\n    step (\\<lambda>q. state_rank q n) (w n) q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Some (card (senior_states q (Suc n))) =\n    step (\\<lambda>q. state_rank q n) (w n) q", "let ?r = \"\\<lambda>q. state_rank q n\""], ["proof (state)\ngoal (1 subgoal):\n 1. Some (card (senior_states q (Suc n))) =\n    step (\\<lambda>q. state_rank q n) (w n) q", "have \"{q'. \\<not>sink q' \\<and> pre_ranks ?r (w n) q' \\<noteq> {} \\<and> Min (pre_ranks ?r (w n) q') < Min (pre_ranks ?r (w n) q)} = senior_states q (Suc n)\"\n          (is \"?S = ?S'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {q'.\n     \\<not> sink q' \\<and>\n     pre_ranks (\\<lambda>q. state_rank q n) (w n) q' \\<noteq> {} \\<and>\n     Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n     < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)} =\n    senior_states q (Suc n)", "proof (rule set_eqI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (x \\<in> {q'.\n                 \\<not> sink q' \\<and>\n                 pre_ranks (\\<lambda>q. state_rank q n) (w n) q' \\<noteq>\n                 {} \\<and>\n                 Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n                 < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)}) =\n       (x \\<in> senior_states q (Suc n))", "fix q'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (x \\<in> {q'.\n                 \\<not> sink q' \\<and>\n                 pre_ranks (\\<lambda>q. state_rank q n) (w n) q' \\<noteq>\n                 {} \\<and>\n                 Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n                 < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)}) =\n       (x \\<in> senior_states q (Suc n))", "have \"q' \\<in> ?S \\<longleftrightarrow> \\<not>sink q' \\<and> configuration q' (Suc n) \\<noteq> {} \\<and> Min (pre_ranks  ?r (w n) q') < Min (pre_ranks ?r (w n) q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (q' \\<in> {q'.\n               \\<not> sink q' \\<and>\n               pre_ranks (\\<lambda>q. state_rank q n) (w n) q' \\<noteq>\n               {} \\<and>\n               Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n               < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)}) =\n    (\\<not> sink q' \\<and>\n     configuration q' (Suc n) \\<noteq> {} \\<and>\n     Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n     < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q))", "using pre_ranks_tokens"], ["proof (prove)\nusing this:\n  \\<not> sink ?q \\<Longrightarrow>\n  (pre_ranks (\\<lambda>q. state_rank q ?n) (w ?n) ?q \\<noteq> {}) =\n  (configuration ?q (Suc ?n) \\<noteq> {})\n\ngoal (1 subgoal):\n 1. (q' \\<in> {q'.\n               \\<not> sink q' \\<and>\n               pre_ranks (\\<lambda>q. state_rank q n) (w n) q' \\<noteq>\n               {} \\<and>\n               Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n               < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)}) =\n    (\\<not> sink q' \\<and>\n     configuration q' (Suc n) \\<noteq> {} \\<and>\n     Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n     < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q))", "by blast"], ["proof (state)\nthis:\n  (q' \\<in> {q'.\n             \\<not> sink q' \\<and>\n             pre_ranks (\\<lambda>q. state_rank q n) (w n) q' \\<noteq>\n             {} \\<and>\n             Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n             < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)}) =\n  (\\<not> sink q' \\<and>\n   configuration q' (Suc n) \\<noteq> {} \\<and>\n   Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n   < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (x \\<in> {q'.\n                 \\<not> sink q' \\<and>\n                 pre_ranks (\\<lambda>q. state_rank q n) (w n) q' \\<noteq>\n                 {} \\<and>\n                 Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n                 < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)}) =\n       (x \\<in> senior_states q (Suc n))", "also"], ["proof (state)\nthis:\n  (q' \\<in> {q'.\n             \\<not> sink q' \\<and>\n             pre_ranks (\\<lambda>q. state_rank q n) (w n) q' \\<noteq>\n             {} \\<and>\n             Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n             < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)}) =\n  (\\<not> sink q' \\<and>\n   configuration q' (Suc n) \\<noteq> {} \\<and>\n   Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n   < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (x \\<in> {q'.\n                 \\<not> sink q' \\<and>\n                 pre_ranks (\\<lambda>q. state_rank q n) (w n) q' \\<noteq>\n                 {} \\<and>\n                 Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n                 < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)}) =\n       (x \\<in> senior_states q (Suc n))", "have \"\\<dots> \\<longleftrightarrow> \\<not>sink q' \\<and> configuration q' (Suc n) \\<noteq> {} \\<and> Min (pre_oldest_tokens q' n) < Min (pre_oldest_tokens q n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> sink q' \\<and>\n     configuration q' (Suc n) \\<noteq> {} \\<and>\n     Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n     < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)) =\n    (\\<not> sink q' \\<and>\n     configuration q' (Suc n) \\<noteq> {} \\<and>\n     Min (pre_oldest_tokens q' n) < Min (pre_oldest_tokens q n))", "by (metis \\<open>configuration q (Suc n) \\<noteq> {}\\<close> \\<open>\\<not>sink q\\<close> Min_pre_ranks_pre_oldest_tokens)"], ["proof (state)\nthis:\n  (\\<not> sink q' \\<and>\n   configuration q' (Suc n) \\<noteq> {} \\<and>\n   Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n   < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)) =\n  (\\<not> sink q' \\<and>\n   configuration q' (Suc n) \\<noteq> {} \\<and>\n   Min (pre_oldest_tokens q' n) < Min (pre_oldest_tokens q n))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (x \\<in> {q'.\n                 \\<not> sink q' \\<and>\n                 pre_ranks (\\<lambda>q. state_rank q n) (w n) q' \\<noteq>\n                 {} \\<and>\n                 Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n                 < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)}) =\n       (x \\<in> senior_states q (Suc n))", "also"], ["proof (state)\nthis:\n  (\\<not> sink q' \\<and>\n   configuration q' (Suc n) \\<noteq> {} \\<and>\n   Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n   < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)) =\n  (\\<not> sink q' \\<and>\n   configuration q' (Suc n) \\<noteq> {} \\<and>\n   Min (pre_oldest_tokens q' n) < Min (pre_oldest_tokens q n))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (x \\<in> {q'.\n                 \\<not> sink q' \\<and>\n                 pre_ranks (\\<lambda>q. state_rank q n) (w n) q' \\<noteq>\n                 {} \\<and>\n                 Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n                 < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)}) =\n       (x \\<in> senior_states q (Suc n))", "have \"\\<dots> \\<longleftrightarrow> \\<not>sink q' \\<and> (\\<exists>x y. oldest_token q' (Suc n) = Some y \\<and> oldest_token q (Suc n) = Some x \\<and> y < x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> sink q' \\<and>\n     configuration q' (Suc n) \\<noteq> {} \\<and>\n     Min (pre_oldest_tokens q' n) < Min (pre_oldest_tokens q n)) =\n    (\\<not> sink q' \\<and>\n     (\\<exists>x y.\n         oldest_token q' (Suc n) = Some y \\<and>\n         oldest_token q (Suc n) = Some x \\<and> y < x))", "unfolding oldest_token_rec"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> sink q' \\<and>\n     configuration q' (Suc n) \\<noteq> {} \\<and>\n     Min (pre_oldest_tokens q' n) < Min (pre_oldest_tokens q n)) =\n    (\\<not> sink q' \\<and>\n     (\\<exists>x y.\n         (if pre_oldest_tokens q' n \\<noteq> {}\n          then Some (Min (pre_oldest_tokens q' n)) else None) =\n         Some y \\<and>\n         (if pre_oldest_tokens q n \\<noteq> {}\n          then Some (Min (pre_oldest_tokens q n)) else None) =\n         Some x \\<and>\n         y < x))", "by (metis pre_oldest_configuration_tokens \\<open>configuration q (Suc n) \\<noteq> {}\\<close> option.distinct(2) option.sel)"], ["proof (state)\nthis:\n  (\\<not> sink q' \\<and>\n   configuration q' (Suc n) \\<noteq> {} \\<and>\n   Min (pre_oldest_tokens q' n) < Min (pre_oldest_tokens q n)) =\n  (\\<not> sink q' \\<and>\n   (\\<exists>x y.\n       oldest_token q' (Suc n) = Some y \\<and>\n       oldest_token q (Suc n) = Some x \\<and> y < x))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (x \\<in> {q'.\n                 \\<not> sink q' \\<and>\n                 pre_ranks (\\<lambda>q. state_rank q n) (w n) q' \\<noteq>\n                 {} \\<and>\n                 Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n                 < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)}) =\n       (x \\<in> senior_states q (Suc n))", "finally"], ["proof (chain)\npicking this:\n  (q' \\<in> {q'.\n             \\<not> sink q' \\<and>\n             pre_ranks (\\<lambda>q. state_rank q n) (w n) q' \\<noteq>\n             {} \\<and>\n             Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n             < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)}) =\n  (\\<not> sink q' \\<and>\n   (\\<exists>x y.\n       oldest_token q' (Suc n) = Some y \\<and>\n       oldest_token q (Suc n) = Some x \\<and> y < x))", "show \"q' \\<in> ?S \\<longleftrightarrow> q' \\<in> ?S'\""], ["proof (prove)\nusing this:\n  (q' \\<in> {q'.\n             \\<not> sink q' \\<and>\n             pre_ranks (\\<lambda>q. state_rank q n) (w n) q' \\<noteq>\n             {} \\<and>\n             Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n             < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)}) =\n  (\\<not> sink q' \\<and>\n   (\\<exists>x y.\n       oldest_token q' (Suc n) = Some y \\<and>\n       oldest_token q (Suc n) = Some x \\<and> y < x))\n\ngoal (1 subgoal):\n 1. (q' \\<in> {q'.\n               \\<not> sink q' \\<and>\n               pre_ranks (\\<lambda>q. state_rank q n) (w n) q' \\<noteq>\n               {} \\<and>\n               Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n               < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)}) =\n    (q' \\<in> senior_states q (Suc n))", "unfolding senior_states.simps"], ["proof (prove)\nusing this:\n  (q' \\<in> {q'.\n             \\<not> sink q' \\<and>\n             pre_ranks (\\<lambda>q. state_rank q n) (w n) q' \\<noteq>\n             {} \\<and>\n             Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n             < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)}) =\n  (\\<not> sink q' \\<and>\n   (\\<exists>x y.\n       oldest_token q' (Suc n) = Some y \\<and>\n       oldest_token q (Suc n) = Some x \\<and> y < x))\n\ngoal (1 subgoal):\n 1. (q' \\<in> {q'.\n               \\<not> sink q' \\<and>\n               pre_ranks (\\<lambda>q. state_rank q n) (w n) q' \\<noteq>\n               {} \\<and>\n               Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n               < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)}) =\n    (q' \\<in> {p. \\<exists>x y.\n                     oldest_token p (Suc n) = Some y \\<and>\n                     oldest_token q (Suc n) = Some x \\<and>\n                     y < x \\<and> \\<not> sink p})", "by blast"], ["proof (state)\nthis:\n  (q' \\<in> {q'.\n             \\<not> sink q' \\<and>\n             pre_ranks (\\<lambda>q. state_rank q n) (w n) q' \\<noteq>\n             {} \\<and>\n             Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n             < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)}) =\n  (q' \\<in> senior_states q (Suc n))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {q'.\n   \\<not> sink q' \\<and>\n   pre_ranks (\\<lambda>q. state_rank q n) (w n) q' \\<noteq> {} \\<and>\n   Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n   < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)} =\n  senior_states q (Suc n)\n\ngoal (1 subgoal):\n 1. Some (card (senior_states q (Suc n))) =\n    step (\\<lambda>q. state_rank q n) (w n) q", "thus ?thesis"], ["proof (prove)\nusing this:\n  {q'.\n   \\<not> sink q' \\<and>\n   pre_ranks (\\<lambda>q. state_rank q n) (w n) q' \\<noteq> {} \\<and>\n   Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n   < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)} =\n  senior_states q (Suc n)\n\ngoal (1 subgoal):\n 1. Some (card (senior_states q (Suc n))) =\n    step (\\<lambda>q. state_rank q n) (w n) q", "using \\<open>\\<not>sink q\\<close> \\<open>configuration q (Suc n) \\<noteq> {}\\<close>"], ["proof (prove)\nusing this:\n  {q'.\n   \\<not> sink q' \\<and>\n   pre_ranks (\\<lambda>q. state_rank q n) (w n) q' \\<noteq> {} \\<and>\n   Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n   < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)} =\n  senior_states q (Suc n)\n  \\<not> sink q\n  configuration q (Suc n) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Some (card (senior_states q (Suc n))) =\n    step (\\<lambda>q. state_rank q n) (w n) q", "unfolding step.simps pre_ranks_tokens[OF \\<open>\\<not>sink q\\<close>]"], ["proof (prove)\nusing this:\n  {q'.\n   \\<not> sink q' \\<and>\n   pre_ranks (\\<lambda>q. state_rank q n) (w n) q' \\<noteq> {} \\<and>\n   Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n   < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)} =\n  senior_states q (Suc n)\n  \\<not> sink q\n  configuration q (Suc n) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Some (card (senior_states q (Suc n))) =\n    (if \\<not> sink q \\<and> configuration q (Suc n) \\<noteq> {}\n     then Some\n           (card\n             {q'.\n              \\<not> sink q' \\<and>\n              pre_ranks (\\<lambda>q. state_rank q n) (w n) q' \\<noteq>\n              {} \\<and>\n              Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q')\n              < Min (pre_ranks (\\<lambda>q. state_rank q n) (w n) q)})\n     else None)", "by presburger"], ["proof (state)\nthis:\n  Some (card (senior_states q (Suc n))) =\n  step (\\<lambda>q. state_rank q n) (w n) q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Some (card (senior_states q (Suc n))) =\n  step (\\<lambda>q. state_rank q n) (w n) q\n\ngoal (2 subgoals):\n 1. sink q \\<Longrightarrow>\n    state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q\n 2. \\<not> sink q \\<Longrightarrow>\n    state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q", "finally"], ["proof (chain)\npicking this:\n  state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q", "have ?thesis"], ["proof (prove)\nusing this:\n  state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q\n\ngoal (1 subgoal):\n 1. state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q", "."], ["proof (state)\nthis:\n  state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q\n\ngoal (2 subgoals):\n 1. sink q \\<Longrightarrow>\n    state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q\n 2. \\<not> sink q \\<Longrightarrow>\n    state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q", "}"], ["proof (state)\nthis:\n  configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n  state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q\n\ngoal (2 subgoals):\n 1. sink q \\<Longrightarrow>\n    state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q\n 2. \\<not> sink q \\<Longrightarrow>\n    state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q", "ultimately"], ["proof (chain)\npicking this:\n  configuration q (Suc n) = {} \\<Longrightarrow>\n  state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q\n  configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n  state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q", "show ?thesis"], ["proof (prove)\nusing this:\n  configuration q (Suc n) = {} \\<Longrightarrow>\n  state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q\n  configuration q (Suc n) \\<noteq> {} \\<Longrightarrow>\n  state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q\n\ngoal (1 subgoal):\n 1. state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q", "by blast"], ["proof (state)\nthis:\n  state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q\n\ngoal (1 subgoal):\n 1. sink q \\<Longrightarrow>\n    state_rank q (Suc n) = step (\\<lambda>q. state_rank q n) (w n) q", "qed auto"], ["", "lemma state_rank_step_foldl:\n  \"(\\<lambda>q. state_rank q n) = foldl step initial (map w [0..<n])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>q. state_rank q n) = foldl step initial (map w [0..<n])", "by (induction n) (unfold state_rank_initial state_rank_step, simp_all)"], ["", "end"], ["", "end"]]}