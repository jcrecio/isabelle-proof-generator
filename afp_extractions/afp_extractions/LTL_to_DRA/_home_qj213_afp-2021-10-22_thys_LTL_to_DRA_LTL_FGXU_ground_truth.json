{"file_name": "/home/qj213/afp-2021-10-22/thys/LTL_to_DRA/LTL_FGXU.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/LTL_to_DRA", "problem_names": ["lemma LTL_G_one_step_unfolding:\n  \"w \\<Turnstile> G \\<phi> \\<longleftrightarrow> (w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (G \\<phi>))\"\n  (is \"?lhs \\<longleftrightarrow> ?rhs\")", "lemma LTL_F_one_step_unfolding:\n  \"w \\<Turnstile> F \\<phi> \\<longleftrightarrow> (w \\<Turnstile> \\<phi> \\<or> w \\<Turnstile> X (F \\<phi>))\"\n  (is \"?lhs \\<longleftrightarrow> ?rhs\")", "lemma LTL_U_one_step_unfolding:\n  \"w \\<Turnstile> \\<phi> U \\<psi> \\<longleftrightarrow> (w \\<Turnstile> \\<psi> \\<or> (w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (\\<phi> U \\<psi>)))\"\n  (is \"?lhs \\<longleftrightarrow> ?rhs\")", "lemma LTL_GF_infinitely_many_suffixes:\n  \"w \\<Turnstile> G (F \\<phi>) = (\\<exists>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>)\"\n  (is \"?lhs = ?rhs\")", "lemma LTL_FG_almost_all_suffixes:\n  \"w \\<Turnstile> F G \\<phi> = (\\<forall>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>)\"\n  (is \"?lhs = ?rhs\")", "lemma LTL_FG_suffix:\n  \"(suffix i w) \\<Turnstile> F (G \\<phi>) = w \\<Turnstile> F (G \\<phi>)\"", "lemma LTL_GF_suffix:\n  \"(suffix i w) \\<Turnstile> G (F \\<phi>) = w \\<Turnstile> G (F \\<phi>)\"", "lemma LTL_suffix_G:\n  \"w \\<Turnstile> G \\<phi> \\<Longrightarrow> suffix i w \\<Turnstile> G \\<phi>\"", "lemma LTL_prop_entailment_monotonI[intro]:\n  \"S \\<Turnstile>\\<^sub>P \\<phi> \\<Longrightarrow> S \\<subseteq> S' \\<Longrightarrow> S' \\<Turnstile>\\<^sub>P \\<phi>\"", "lemma ltl_models_equiv_prop_entailment:\n  \"w \\<Turnstile> \\<phi> = {\\<chi>. w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P \\<phi>\"", "lemma ltl_G_stabilize:\n  assumes \"finite \\<G>\"\n  assumes \"Only_G \\<G>\"\n  obtains i where \"\\<And>\\<chi> j. \\<chi> \\<in> \\<G> \\<Longrightarrow> suffix i w \\<Turnstile> \\<chi> = suffix (i + j) w \\<Turnstile> \\<chi>\"", "lemma ltl_G_stabilize_property:\n  assumes \"finite \\<G>\"\n  assumes \"Only_G \\<G>\"\n  assumes \"\\<And>\\<chi> j. \\<chi> \\<in> \\<G> \\<Longrightarrow> suffix i w \\<Turnstile> \\<chi> = suffix (i + j) w \\<Turnstile> \\<chi>\"\n  assumes \"G \\<psi> \\<in> \\<G> \\<inter> {\\<chi>. w \\<Turnstile> F \\<chi>}\"\n  shows \"suffix i w \\<Turnstile> G \\<psi>\"", "lemma finite_propos:\n  \"finite (propos \\<phi>)\" \"finite (nested_propos \\<phi>)\"", "lemma propos_subset:\n  \"propos \\<phi> \\<subseteq> nested_propos \\<phi>\"", "lemma LTL_prop_entailment_restrict_to_propos:\n  \"S \\<Turnstile>\\<^sub>P \\<phi> = (S \\<inter> propos \\<phi>) \\<Turnstile>\\<^sub>P \\<phi>\"", "lemma propos_foldl:\n  assumes \"\\<And>x y. propos (f x y) = propos x \\<union> propos y\"\n  shows \"\\<Union>{propos y |y. y = i \\<or> y \\<in> set xs} = propos (foldl f i xs)\"", "lemma G_nested_finite:\n  \"finite (\\<^bold>G \\<phi>)\"", "lemma G_nested_propos_alt_def:\n  \"\\<^bold>G \\<phi> = nested_propos \\<phi> \\<inter> {\\<psi>. (\\<exists>x. \\<psi> = G x)}\"", "lemma G_nested_propos_Only_G:\n  \"Only_G (\\<^bold>G \\<phi>)\"", "lemma G_not_in_G:\n  \"G \\<phi> \\<notin> \\<^bold>G \\<phi>\"", "lemma G_subset_G:\n  \"\\<psi> \\<in> \\<^bold>G \\<phi> \\<Longrightarrow> \\<^bold>G \\<psi> \\<subseteq> \\<^bold>G \\<phi>\"\n  \"G \\<psi> \\<in> \\<^bold>G \\<phi> \\<Longrightarrow> \\<^bold>G \\<psi> \\<subseteq> \\<^bold>G \\<phi>\"", "lemma \\<G>_properties:\n  assumes \"\\<G> \\<subseteq> \\<^bold>G \\<phi>\"\n  shows \\<G>_finite: \"finite \\<G>\" and \\<G>_elements: \"Only_G \\<G>\"", "lemma ltl_prop_implies_equiv:\n  \"\\<phi> \\<longrightarrow>\\<^sub>P \\<psi> \\<and> \\<psi> \\<longrightarrow>\\<^sub>P \\<phi> \\<longleftrightarrow> \\<phi> \\<equiv>\\<^sub>P \\<psi>\"", "lemma ltl_prop_equiv_equivp:\n  \"equivp (\\<equiv>\\<^sub>P)\"", "lemma [trans]:\n  \"\\<phi> \\<equiv>\\<^sub>P \\<psi> \\<Longrightarrow> \\<psi> \\<equiv>\\<^sub>P \\<chi> \\<Longrightarrow> \\<phi> \\<equiv>\\<^sub>P \\<chi>\"", "lemma ltl\\<^sub>P_abs_rep: \"Abs (Rep \\<phi>) = \\<phi>\"", "lemma ltl_prop_implication_implies_ltl_implication:\n  \"w \\<Turnstile> \\<phi> \\<Longrightarrow> \\<phi> \\<longrightarrow>\\<^sub>P \\<psi> \\<Longrightarrow> w \\<Turnstile> \\<psi>\"", "lemma ltl_prop_equiv_implies_ltl_equiv:\n  \"\\<phi> \\<equiv>\\<^sub>P \\<psi> \\<Longrightarrow> w \\<Turnstile> \\<phi> = w \\<Turnstile> \\<psi>\"", "lemma ltl_prop_equiv_subst_S:\n  \"S \\<Turnstile>\\<^sub>P subst \\<phi> m = ((S - dom m) \\<union> {\\<chi> | \\<chi> \\<chi>'. \\<chi> \\<in> dom m \\<and> m \\<chi> = Some \\<chi>' \\<and> S \\<Turnstile>\\<^sub>P \\<chi>'}) \\<Turnstile>\\<^sub>P \\<phi>\"", "lemma subst_respects_ltl_prop_entailment:\n  \"\\<phi> \\<longrightarrow>\\<^sub>P \\<psi> \\<Longrightarrow> subst \\<phi> m \\<longrightarrow>\\<^sub>P subst \\<psi> m\"\n  \"\\<phi> \\<equiv>\\<^sub>P \\<psi> \\<Longrightarrow> subst \\<phi> m \\<equiv>\\<^sub>P subst \\<psi> m\"", "lemma subst_respects_ltl_prop_entailment_generalized:\n  \"(\\<And>\\<A>. (\\<And>x. x \\<in> S \\<Longrightarrow> \\<A> \\<Turnstile>\\<^sub>P x) \\<Longrightarrow> \\<A> \\<Turnstile>\\<^sub>P y) \\<Longrightarrow> (\\<And>x. x \\<in> S \\<Longrightarrow> \\<A> \\<Turnstile>\\<^sub>P subst x m) \\<Longrightarrow> \\<A> \\<Turnstile>\\<^sub>P subst y m\"", "lemma decomposable_function_subst:\n  \"\\<lbrakk>f true = true; f false = false; \\<And>\\<phi> \\<psi>. f (\\<phi> and \\<psi>) = f \\<phi> and f \\<psi>; \\<And>\\<phi> \\<psi>. f (\\<phi> or \\<psi>) = f \\<phi> or f \\<psi>\\<rbrakk> \\<Longrightarrow> f \\<phi> = subst \\<phi> (\\<lambda>\\<chi>. Some (f \\<chi>))\"", "lemma foldl_LTLAnd_prop_entailment:\n  \"S \\<Turnstile>\\<^sub>P foldl LTLAnd i xs = (S \\<Turnstile>\\<^sub>P i \\<and> (\\<forall>y \\<in> set xs. S \\<Turnstile>\\<^sub>P y))\"", "lemma And_prop_entailment:\n  \"S \\<Turnstile>\\<^sub>P And xs = (\\<forall>x \\<in> set xs. S \\<Turnstile>\\<^sub>P x)\"", "lemma And_propos:\n  \"propos (And xs) = \\<Union>{propos x| x. x \\<in> set xs}\"", "lemma And_semantics:\n  \"w \\<Turnstile> And xs = (\\<forall>x \\<in> set xs. w \\<Turnstile> x)\"", "lemma And_append_syntactic:\n  \"xs \\<noteq> [] \\<Longrightarrow> And (xs @ ys) = And ((And xs)#ys)\"", "lemma And_append_S:\n  \"S \\<Turnstile>\\<^sub>P And (xs @ ys) = S \\<Turnstile>\\<^sub>P And xs and And ys\"", "lemma And_append:\n  \"And (xs @ ys) \\<equiv>\\<^sub>P And xs and And ys\"", "lemma foldl_LTLAnd_prop_entailment_abs:\n  \"S \\<up>\\<Turnstile>\\<^sub>P foldl and_abs i xs = (S \\<up>\\<Turnstile>\\<^sub>P i \\<and> (\\<forall>y\\<in>set xs. S \\<up>\\<Turnstile>\\<^sub>P y))\"", "lemma And_prop_entailment_abs:\n  \"S \\<up>\\<Turnstile>\\<^sub>P \\<up>And xs = (\\<forall>x \\<in> set xs. S \\<up>\\<Turnstile>\\<^sub>P x)\"", "lemma and_abs_conjunction:\n  \"S \\<up>\\<Turnstile>\\<^sub>P \\<phi> \\<up>and \\<psi> \\<longleftrightarrow> S \\<up>\\<Turnstile>\\<^sub>P \\<phi> \\<and> S \\<up>\\<Turnstile>\\<^sub>P \\<psi>\"", "lemma foldl_LTLOr_prop_entailment:\n  \"S \\<Turnstile>\\<^sub>P foldl LTLOr i xs = (S \\<Turnstile>\\<^sub>P i \\<or> (\\<exists>y \\<in> set xs. S \\<Turnstile>\\<^sub>P y))\"", "lemma Or_prop_entailment:\n  \"S \\<Turnstile>\\<^sub>P Or xs = (\\<exists>x \\<in> set xs. S \\<Turnstile>\\<^sub>P x)\"", "lemma Or_propos:\n  \"propos (Or xs) = \\<Union>{propos x| x. x \\<in> set xs}\"", "lemma Or_semantics:\n  \"w \\<Turnstile> Or xs = (\\<exists>x \\<in> set xs. w \\<Turnstile> x)\"", "lemma Or_append_syntactic:\n  \"xs \\<noteq> [] \\<Longrightarrow> Or (xs @ ys) = Or ((Or xs)#ys)\"", "lemma Or_append_S:\n  \"S \\<Turnstile>\\<^sub>P Or (xs @ ys) = S \\<Turnstile>\\<^sub>P Or xs or Or ys\"", "lemma Or_append:\n  \"Or (xs @ ys) \\<equiv>\\<^sub>P Or xs or Or ys\"", "lemma eval\\<^sub>G_And_map:\n  \"eval\\<^sub>G S (And xs) = And (map (eval\\<^sub>G S) xs)\"", "lemma eval\\<^sub>G_Or_map:\n  \"eval\\<^sub>G S (Or xs) = Or (map (eval\\<^sub>G S) xs)\"", "lemma eval\\<^sub>G_G_nested:\n  \"\\<^bold>G (eval\\<^sub>G \\<G> \\<phi>) \\<subseteq> \\<^bold>G \\<phi>\"", "lemma eval\\<^sub>G_subst:\n  \"eval\\<^sub>G S \\<phi> = subst \\<phi> (\\<lambda>\\<chi>. Some (eval\\<^sub>G S \\<chi>))\"", "lemma eval\\<^sub>G_prop_entailment:\n  \"S \\<Turnstile>\\<^sub>P eval\\<^sub>G S \\<phi> \\<longleftrightarrow> S \\<Turnstile>\\<^sub>P \\<phi>\"", "lemma eval\\<^sub>G_respectfulness:\n  \"\\<phi> \\<longrightarrow>\\<^sub>P \\<psi> \\<Longrightarrow> eval\\<^sub>G S \\<phi> \\<longrightarrow>\\<^sub>P eval\\<^sub>G S \\<psi>\"\n  \"\\<phi> \\<equiv>\\<^sub>P \\<psi> \\<Longrightarrow> eval\\<^sub>G S \\<phi> \\<equiv>\\<^sub>P eval\\<^sub>G S \\<psi>\"", "lemma eval\\<^sub>G_respectfulness_generalized:\n  \"(\\<And>\\<A>. (\\<And>x. x \\<in> S \\<Longrightarrow> \\<A> \\<Turnstile>\\<^sub>P x) \\<Longrightarrow> \\<A> \\<Turnstile>\\<^sub>P y) \\<Longrightarrow> (\\<And>x. x \\<in> S \\<Longrightarrow> \\<A> \\<Turnstile>\\<^sub>P eval\\<^sub>G P x) \\<Longrightarrow> \\<A> \\<Turnstile>\\<^sub>P eval\\<^sub>G P y\"", "lemma Rep_Abs_prop_entailment[simp]:\n  \"A \\<Turnstile>\\<^sub>P Rep (Abs \\<phi>) = A \\<Turnstile>\\<^sub>P \\<phi>\"", "lemma sat_models_invariant:\n  \"A \\<in> sat_models (Abs \\<phi>) = A \\<Turnstile>\\<^sub>P \\<phi>\"", "lemma sat_models_inj:\n  \"inj sat_models\"", "lemma sat_models_finite_image:\n  assumes \"finite P\"\n  shows \"finite (sat_models ` {Abs \\<phi> | \\<phi>. nested_propos \\<phi> \\<subseteq> P})\"", "lemma ltl_prop_equiv_quotient_restricted_to_P_finite:\n  assumes \"finite P\"\n  shows \"finite {Abs \\<phi> | \\<phi>. nested_propos \\<phi> \\<subseteq> P}\"", "lemma f_foldl_abs_alt_def:\n  \"f_foldl_abs (Abs \\<phi>) w = foldl f_abs (Abs \\<phi>) w\"", "lemma finite_abs_reach:\n  \"finite (abs_reach (Abs \\<phi>))\""], "translations": [["", "lemma LTL_G_one_step_unfolding:\n  \"w \\<Turnstile> G \\<phi> \\<longleftrightarrow> (w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (G \\<phi>))\"\n  (is \"?lhs \\<longleftrightarrow> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<Turnstile> G \\<phi> =\n    (w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (G \\<phi>))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. w \\<Turnstile> G \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (G \\<phi>)\n 2. w \\<Turnstile> \\<phi> \\<and>\n    w \\<Turnstile> X (G \\<phi>) \\<Longrightarrow>\n    w \\<Turnstile> G \\<phi>", "assume ?lhs"], ["proof (state)\nthis:\n  w \\<Turnstile> G \\<phi>\n\ngoal (2 subgoals):\n 1. w \\<Turnstile> G \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (G \\<phi>)\n 2. w \\<Turnstile> \\<phi> \\<and>\n    w \\<Turnstile> X (G \\<phi>) \\<Longrightarrow>\n    w \\<Turnstile> G \\<phi>", "hence \"w \\<Turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  w \\<Turnstile> G \\<phi>\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> \\<phi>", "using suffix_0[of w] ltl_semantics.simps(8)[of w \\<phi>]"], ["proof (prove)\nusing this:\n  w \\<Turnstile> G \\<phi>\n  suffix 0 w = w\n  w \\<Turnstile> G \\<phi> = (\\<forall>k. suffix k w \\<Turnstile> \\<phi>)\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> \\<phi>", "by metis"], ["proof (state)\nthis:\n  w \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. w \\<Turnstile> G \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (G \\<phi>)\n 2. w \\<Turnstile> \\<phi> \\<and>\n    w \\<Turnstile> X (G \\<phi>) \\<Longrightarrow>\n    w \\<Turnstile> G \\<phi>", "moreover"], ["proof (state)\nthis:\n  w \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. w \\<Turnstile> G \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (G \\<phi>)\n 2. w \\<Turnstile> \\<phi> \\<and>\n    w \\<Turnstile> X (G \\<phi>) \\<Longrightarrow>\n    w \\<Turnstile> G \\<phi>", "from \\<open>?lhs\\<close>"], ["proof (chain)\npicking this:\n  w \\<Turnstile> G \\<phi>", "have \"w \\<Turnstile> X (G \\<phi>)\""], ["proof (prove)\nusing this:\n  w \\<Turnstile> G \\<phi>\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> X (G \\<phi>)", "by simp"], ["proof (state)\nthis:\n  w \\<Turnstile> X (G \\<phi>)\n\ngoal (2 subgoals):\n 1. w \\<Turnstile> G \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (G \\<phi>)\n 2. w \\<Turnstile> \\<phi> \\<and>\n    w \\<Turnstile> X (G \\<phi>) \\<Longrightarrow>\n    w \\<Turnstile> G \\<phi>", "ultimately"], ["proof (chain)\npicking this:\n  w \\<Turnstile> \\<phi>\n  w \\<Turnstile> X (G \\<phi>)", "show ?rhs"], ["proof (prove)\nusing this:\n  w \\<Turnstile> \\<phi>\n  w \\<Turnstile> X (G \\<phi>)\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (G \\<phi>)", "by simp"], ["proof (state)\nthis:\n  w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (G \\<phi>)\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> \\<phi> \\<and>\n    w \\<Turnstile> X (G \\<phi>) \\<Longrightarrow>\n    w \\<Turnstile> G \\<phi>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. w \\<Turnstile> \\<phi> \\<and>\n    w \\<Turnstile> X (G \\<phi>) \\<Longrightarrow>\n    w \\<Turnstile> G \\<phi>", "assume ?rhs"], ["proof (state)\nthis:\n  w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (G \\<phi>)\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> \\<phi> \\<and>\n    w \\<Turnstile> X (G \\<phi>) \\<Longrightarrow>\n    w \\<Turnstile> G \\<phi>", "hence \"w \\<Turnstile> X (G \\<phi>)\""], ["proof (prove)\nusing this:\n  w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (G \\<phi>)\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> X (G \\<phi>)", "by simp"], ["proof (state)\nthis:\n  w \\<Turnstile> X (G \\<phi>)\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> \\<phi> \\<and>\n    w \\<Turnstile> X (G \\<phi>) \\<Longrightarrow>\n    w \\<Turnstile> G \\<phi>", "hence \"\\<forall>k. suffix (k + 1) w \\<Turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  w \\<Turnstile> X (G \\<phi>)\n\ngoal (1 subgoal):\n 1. \\<forall>k. suffix (k + 1) w \\<Turnstile> \\<phi>", "by force"], ["proof (state)\nthis:\n  \\<forall>k. suffix (k + 1) w \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> \\<phi> \\<and>\n    w \\<Turnstile> X (G \\<phi>) \\<Longrightarrow>\n    w \\<Turnstile> G \\<phi>", "hence \"\\<forall>k > 0. suffix k w \\<Turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  \\<forall>k. suffix (k + 1) w \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<forall>k>0. suffix k w \\<Turnstile> \\<phi>", "by (metis Suc_eq_plus1 gr0_implies_Suc)"], ["proof (state)\nthis:\n  \\<forall>k>0. suffix k w \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> \\<phi> \\<and>\n    w \\<Turnstile> X (G \\<phi>) \\<Longrightarrow>\n    w \\<Turnstile> G \\<phi>", "moreover"], ["proof (state)\nthis:\n  \\<forall>k>0. suffix k w \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> \\<phi> \\<and>\n    w \\<Turnstile> X (G \\<phi>) \\<Longrightarrow>\n    w \\<Turnstile> G \\<phi>", "from \\<open>?rhs\\<close>"], ["proof (chain)\npicking this:\n  w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (G \\<phi>)", "have \"(suffix 0 w) \\<Turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (G \\<phi>)\n\ngoal (1 subgoal):\n 1. suffix 0 w \\<Turnstile> \\<phi>", "by simp"], ["proof (state)\nthis:\n  suffix 0 w \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> \\<phi> \\<and>\n    w \\<Turnstile> X (G \\<phi>) \\<Longrightarrow>\n    w \\<Turnstile> G \\<phi>", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>k>0. suffix k w \\<Turnstile> \\<phi>\n  suffix 0 w \\<Turnstile> \\<phi>", "show ?lhs"], ["proof (prove)\nusing this:\n  \\<forall>k>0. suffix k w \\<Turnstile> \\<phi>\n  suffix 0 w \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> G \\<phi>", "using neq0_conv ltl_semantics.simps(8)[of w \\<phi>]"], ["proof (prove)\nusing this:\n  \\<forall>k>0. suffix k w \\<Turnstile> \\<phi>\n  suffix 0 w \\<Turnstile> \\<phi>\n  (?n \\<noteq> 0) = (0 < ?n)\n  w \\<Turnstile> G \\<phi> = (\\<forall>k. suffix k w \\<Turnstile> \\<phi>)\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> G \\<phi>", "by blast"], ["proof (state)\nthis:\n  w \\<Turnstile> G \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LTL_F_one_step_unfolding:\n  \"w \\<Turnstile> F \\<phi> \\<longleftrightarrow> (w \\<Turnstile> \\<phi> \\<or> w \\<Turnstile> X (F \\<phi>))\"\n  (is \"?lhs \\<longleftrightarrow> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<Turnstile> F \\<phi> =\n    (w \\<Turnstile> \\<phi> \\<or> w \\<Turnstile> X (F \\<phi>))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. w \\<Turnstile> F \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> \\<phi> \\<or> w \\<Turnstile> X (F \\<phi>)\n 2. w \\<Turnstile> \\<phi> \\<or>\n    w \\<Turnstile> X (F \\<phi>) \\<Longrightarrow>\n    w \\<Turnstile> F \\<phi>", "assume ?lhs"], ["proof (state)\nthis:\n  w \\<Turnstile> F \\<phi>\n\ngoal (2 subgoals):\n 1. w \\<Turnstile> F \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> \\<phi> \\<or> w \\<Turnstile> X (F \\<phi>)\n 2. w \\<Turnstile> \\<phi> \\<or>\n    w \\<Turnstile> X (F \\<phi>) \\<Longrightarrow>\n    w \\<Turnstile> F \\<phi>", "then"], ["proof (chain)\npicking this:\n  w \\<Turnstile> F \\<phi>", "obtain k where \"suffix k w \\<Turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  w \\<Turnstile> F \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        suffix k w \\<Turnstile> \\<phi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  suffix k w \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. w \\<Turnstile> F \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> \\<phi> \\<or> w \\<Turnstile> X (F \\<phi>)\n 2. w \\<Turnstile> \\<phi> \\<or>\n    w \\<Turnstile> X (F \\<phi>) \\<Longrightarrow>\n    w \\<Turnstile> F \\<phi>", "thus ?rhs"], ["proof (prove)\nusing this:\n  suffix k w \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> \\<phi> \\<or> w \\<Turnstile> X (F \\<phi>)", "by (cases k) auto"], ["proof (state)\nthis:\n  w \\<Turnstile> \\<phi> \\<or> w \\<Turnstile> X (F \\<phi>)\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> \\<phi> \\<or>\n    w \\<Turnstile> X (F \\<phi>) \\<Longrightarrow>\n    w \\<Turnstile> F \\<phi>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. w \\<Turnstile> \\<phi> \\<or>\n    w \\<Turnstile> X (F \\<phi>) \\<Longrightarrow>\n    w \\<Turnstile> F \\<phi>", "assume ?rhs"], ["proof (state)\nthis:\n  w \\<Turnstile> \\<phi> \\<or> w \\<Turnstile> X (F \\<phi>)\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> \\<phi> \\<or>\n    w \\<Turnstile> X (F \\<phi>) \\<Longrightarrow>\n    w \\<Turnstile> F \\<phi>", "thus ?lhs"], ["proof (prove)\nusing this:\n  w \\<Turnstile> \\<phi> \\<or> w \\<Turnstile> X (F \\<phi>)\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> F \\<phi>", "using suffix_0[of w] suffix_suffix[of _ 1 w]"], ["proof (prove)\nusing this:\n  w \\<Turnstile> \\<phi> \\<or> w \\<Turnstile> X (F \\<phi>)\n  suffix 0 w = w\n  suffix ?m (suffix 1 w) = suffix (1 + ?m) w\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> F \\<phi>", "by (metis ltl_semantics.simps(7) ltl_semantics.simps(9))"], ["proof (state)\nthis:\n  w \\<Turnstile> F \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LTL_U_one_step_unfolding:\n  \"w \\<Turnstile> \\<phi> U \\<psi> \\<longleftrightarrow> (w \\<Turnstile> \\<psi> \\<or> (w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (\\<phi> U \\<psi>)))\"\n  (is \"?lhs \\<longleftrightarrow> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<Turnstile> \\<phi> U \\<psi> =\n    (w \\<Turnstile> \\<psi> \\<or>\n     w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (\\<phi> U \\<psi>))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. w \\<Turnstile> \\<phi> U \\<psi> \\<Longrightarrow>\n    w \\<Turnstile> \\<psi> \\<or>\n    w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (\\<phi> U \\<psi>)\n 2. w \\<Turnstile> \\<psi> \\<or>\n    w \\<Turnstile> \\<phi> \\<and>\n    w \\<Turnstile> X (\\<phi> U \\<psi>) \\<Longrightarrow>\n    w \\<Turnstile> \\<phi> U \\<psi>", "assume ?lhs"], ["proof (state)\nthis:\n  w \\<Turnstile> \\<phi> U \\<psi>\n\ngoal (2 subgoals):\n 1. w \\<Turnstile> \\<phi> U \\<psi> \\<Longrightarrow>\n    w \\<Turnstile> \\<psi> \\<or>\n    w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (\\<phi> U \\<psi>)\n 2. w \\<Turnstile> \\<psi> \\<or>\n    w \\<Turnstile> \\<phi> \\<and>\n    w \\<Turnstile> X (\\<phi> U \\<psi>) \\<Longrightarrow>\n    w \\<Turnstile> \\<phi> U \\<psi>", "then"], ["proof (chain)\npicking this:\n  w \\<Turnstile> \\<phi> U \\<psi>", "obtain k where \"suffix k w \\<Turnstile> \\<psi>\" and \"\\<forall>j<k. suffix j w \\<Turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  w \\<Turnstile> \\<phi> U \\<psi>\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>suffix k w \\<Turnstile> \\<psi>;\n         \\<forall>j<k. suffix j w \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  suffix k w \\<Turnstile> \\<psi>\n  \\<forall>j<k. suffix j w \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. w \\<Turnstile> \\<phi> U \\<psi> \\<Longrightarrow>\n    w \\<Turnstile> \\<psi> \\<or>\n    w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (\\<phi> U \\<psi>)\n 2. w \\<Turnstile> \\<psi> \\<or>\n    w \\<Turnstile> \\<phi> \\<and>\n    w \\<Turnstile> X (\\<phi> U \\<psi>) \\<Longrightarrow>\n    w \\<Turnstile> \\<phi> U \\<psi>", "thus ?rhs"], ["proof (prove)\nusing this:\n  suffix k w \\<Turnstile> \\<psi>\n  \\<forall>j<k. suffix j w \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> \\<psi> \\<or>\n    w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (\\<phi> U \\<psi>)", "by (cases k) auto"], ["proof (state)\nthis:\n  w \\<Turnstile> \\<psi> \\<or>\n  w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (\\<phi> U \\<psi>)\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> \\<psi> \\<or>\n    w \\<Turnstile> \\<phi> \\<and>\n    w \\<Turnstile> X (\\<phi> U \\<psi>) \\<Longrightarrow>\n    w \\<Turnstile> \\<phi> U \\<psi>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. w \\<Turnstile> \\<psi> \\<or>\n    w \\<Turnstile> \\<phi> \\<and>\n    w \\<Turnstile> X (\\<phi> U \\<psi>) \\<Longrightarrow>\n    w \\<Turnstile> \\<phi> U \\<psi>", "assume ?rhs"], ["proof (state)\nthis:\n  w \\<Turnstile> \\<psi> \\<or>\n  w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (\\<phi> U \\<psi>)\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> \\<psi> \\<or>\n    w \\<Turnstile> \\<phi> \\<and>\n    w \\<Turnstile> X (\\<phi> U \\<psi>) \\<Longrightarrow>\n    w \\<Turnstile> \\<phi> U \\<psi>", "thus ?lhs"], ["proof (prove)\nusing this:\n  w \\<Turnstile> \\<psi> \\<or>\n  w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (\\<phi> U \\<psi>)\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> \\<phi> U \\<psi>", "proof (cases \"w \\<Turnstile> \\<psi>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>w \\<Turnstile> \\<psi> \\<or>\n             w \\<Turnstile> \\<phi> \\<and>\n             w \\<Turnstile> X (\\<phi> U \\<psi>);\n     w \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> w \\<Turnstile> \\<phi> U \\<psi>\n 2. \\<lbrakk>w \\<Turnstile> \\<psi> \\<or>\n             w \\<Turnstile> \\<phi> \\<and>\n             w \\<Turnstile> X (\\<phi> U \\<psi>);\n     \\<not> w \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> w \\<Turnstile> \\<phi> U \\<psi>", "case False"], ["proof (state)\nthis:\n  \\<not> w \\<Turnstile> \\<psi>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>w \\<Turnstile> \\<psi> \\<or>\n             w \\<Turnstile> \\<phi> \\<and>\n             w \\<Turnstile> X (\\<phi> U \\<psi>);\n     w \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> w \\<Turnstile> \\<phi> U \\<psi>\n 2. \\<lbrakk>w \\<Turnstile> \\<psi> \\<or>\n             w \\<Turnstile> \\<phi> \\<and>\n             w \\<Turnstile> X (\\<phi> U \\<psi>);\n     \\<not> w \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> w \\<Turnstile> \\<phi> U \\<psi>", "hence \"w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (\\<phi> U \\<psi>)\""], ["proof (prove)\nusing this:\n  \\<not> w \\<Turnstile> \\<psi>\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (\\<phi> U \\<psi>)", "using \\<open>?rhs\\<close>"], ["proof (prove)\nusing this:\n  \\<not> w \\<Turnstile> \\<psi>\n  w \\<Turnstile> \\<psi> \\<or>\n  w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (\\<phi> U \\<psi>)\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (\\<phi> U \\<psi>)", "by blast"], ["proof (state)\nthis:\n  w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (\\<phi> U \\<psi>)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>w \\<Turnstile> \\<psi> \\<or>\n             w \\<Turnstile> \\<phi> \\<and>\n             w \\<Turnstile> X (\\<phi> U \\<psi>);\n     w \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> w \\<Turnstile> \\<phi> U \\<psi>\n 2. \\<lbrakk>w \\<Turnstile> \\<psi> \\<or>\n             w \\<Turnstile> \\<phi> \\<and>\n             w \\<Turnstile> X (\\<phi> U \\<psi>);\n     \\<not> w \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> w \\<Turnstile> \\<phi> U \\<psi>", "obtain k where \"suffix k (suffix 1 w) \\<Turnstile> \\<psi>\" and \"\\<forall>j<k. suffix j (suffix 1 w) \\<Turnstile> \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>suffix k (suffix 1 w) \\<Turnstile> \\<psi>;\n         \\<forall>j<k. suffix j (suffix 1 w) \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using False \\<open>?rhs\\<close>"], ["proof (prove)\nusing this:\n  \\<not> w \\<Turnstile> \\<psi>\n  w \\<Turnstile> \\<psi> \\<or>\n  w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (\\<phi> U \\<psi>)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>suffix k (suffix 1 w) \\<Turnstile> \\<psi>;\n         \\<forall>j<k. suffix j (suffix 1 w) \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  suffix k (suffix 1 w) \\<Turnstile> \\<psi>\n  \\<forall>j<k. suffix j (suffix 1 w) \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>w \\<Turnstile> \\<psi> \\<or>\n             w \\<Turnstile> \\<phi> \\<and>\n             w \\<Turnstile> X (\\<phi> U \\<psi>);\n     w \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> w \\<Turnstile> \\<phi> U \\<psi>\n 2. \\<lbrakk>w \\<Turnstile> \\<psi> \\<or>\n             w \\<Turnstile> \\<phi> \\<and>\n             w \\<Turnstile> X (\\<phi> U \\<psi>);\n     \\<not> w \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> w \\<Turnstile> \\<phi> U \\<psi>", "moreover"], ["proof (state)\nthis:\n  suffix k (suffix 1 w) \\<Turnstile> \\<psi>\n  \\<forall>j<k. suffix j (suffix 1 w) \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>w \\<Turnstile> \\<psi> \\<or>\n             w \\<Turnstile> \\<phi> \\<and>\n             w \\<Turnstile> X (\\<phi> U \\<psi>);\n     w \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> w \\<Turnstile> \\<phi> U \\<psi>\n 2. \\<lbrakk>w \\<Turnstile> \\<psi> \\<or>\n             w \\<Turnstile> \\<phi> \\<and>\n             w \\<Turnstile> X (\\<phi> U \\<psi>);\n     \\<not> w \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> w \\<Turnstile> \\<phi> U \\<psi>", "{"], ["proof (state)\nthis:\n  suffix k (suffix 1 w) \\<Turnstile> \\<psi>\n  \\<forall>j<k. suffix j (suffix 1 w) \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>w \\<Turnstile> \\<psi> \\<or>\n             w \\<Turnstile> \\<phi> \\<and>\n             w \\<Turnstile> X (\\<phi> U \\<psi>);\n     w \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> w \\<Turnstile> \\<phi> U \\<psi>\n 2. \\<lbrakk>w \\<Turnstile> \\<psi> \\<or>\n             w \\<Turnstile> \\<phi> \\<and>\n             w \\<Turnstile> X (\\<phi> U \\<psi>);\n     \\<not> w \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> w \\<Turnstile> \\<phi> U \\<psi>", "fix j"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>w \\<Turnstile> \\<psi> \\<or>\n             w \\<Turnstile> \\<phi> \\<and>\n             w \\<Turnstile> X (\\<phi> U \\<psi>);\n     w \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> w \\<Turnstile> \\<phi> U \\<psi>\n 2. \\<lbrakk>w \\<Turnstile> \\<psi> \\<or>\n             w \\<Turnstile> \\<phi> \\<and>\n             w \\<Turnstile> X (\\<phi> U \\<psi>);\n     \\<not> w \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> w \\<Turnstile> \\<phi> U \\<psi>", "assume \"j < 1 + k\""], ["proof (state)\nthis:\n  j < 1 + k\n\ngoal (2 subgoals):\n 1. \\<lbrakk>w \\<Turnstile> \\<psi> \\<or>\n             w \\<Turnstile> \\<phi> \\<and>\n             w \\<Turnstile> X (\\<phi> U \\<psi>);\n     w \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> w \\<Turnstile> \\<phi> U \\<psi>\n 2. \\<lbrakk>w \\<Turnstile> \\<psi> \\<or>\n             w \\<Turnstile> \\<phi> \\<and>\n             w \\<Turnstile> X (\\<phi> U \\<psi>);\n     \\<not> w \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> w \\<Turnstile> \\<phi> U \\<psi>", "hence \"suffix j w \\<Turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  j < 1 + k\n\ngoal (1 subgoal):\n 1. suffix j w \\<Turnstile> \\<phi>", "using \\<open>w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (\\<phi> U \\<psi>)\\<close> \\<open>\\<forall>j<k. suffix j (suffix 1 w) \\<Turnstile> \\<phi>\\<close>[unfolded suffix_suffix]"], ["proof (prove)\nusing this:\n  j < 1 + k\n  w \\<Turnstile> \\<phi> \\<and> w \\<Turnstile> X (\\<phi> U \\<psi>)\n  \\<forall>j<k. suffix (1 + j) w \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. suffix j w \\<Turnstile> \\<phi>", "by (cases j) simp+"], ["proof (state)\nthis:\n  suffix j w \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>w \\<Turnstile> \\<psi> \\<or>\n             w \\<Turnstile> \\<phi> \\<and>\n             w \\<Turnstile> X (\\<phi> U \\<psi>);\n     w \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> w \\<Turnstile> \\<phi> U \\<psi>\n 2. \\<lbrakk>w \\<Turnstile> \\<psi> \\<or>\n             w \\<Turnstile> \\<phi> \\<and>\n             w \\<Turnstile> X (\\<phi> U \\<psi>);\n     \\<not> w \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> w \\<Turnstile> \\<phi> U \\<psi>", "}"], ["proof (state)\nthis:\n  ?j2 < 1 + k \\<Longrightarrow> suffix ?j2 w \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>w \\<Turnstile> \\<psi> \\<or>\n             w \\<Turnstile> \\<phi> \\<and>\n             w \\<Turnstile> X (\\<phi> U \\<psi>);\n     w \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> w \\<Turnstile> \\<phi> U \\<psi>\n 2. \\<lbrakk>w \\<Turnstile> \\<psi> \\<or>\n             w \\<Turnstile> \\<phi> \\<and>\n             w \\<Turnstile> X (\\<phi> U \\<psi>);\n     \\<not> w \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> w \\<Turnstile> \\<phi> U \\<psi>", "ultimately"], ["proof (chain)\npicking this:\n  suffix k (suffix 1 w) \\<Turnstile> \\<psi>\n  \\<forall>j<k. suffix j (suffix 1 w) \\<Turnstile> \\<phi>\n  ?j2 < 1 + k \\<Longrightarrow> suffix ?j2 w \\<Turnstile> \\<phi>", "show ?thesis"], ["proof (prove)\nusing this:\n  suffix k (suffix 1 w) \\<Turnstile> \\<psi>\n  \\<forall>j<k. suffix j (suffix 1 w) \\<Turnstile> \\<phi>\n  ?j2 < 1 + k \\<Longrightarrow> suffix ?j2 w \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> \\<phi> U \\<psi>", "by auto"], ["proof (state)\nthis:\n  w \\<Turnstile> \\<phi> U \\<psi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>w \\<Turnstile> \\<psi> \\<or>\n             w \\<Turnstile> \\<phi> \\<and>\n             w \\<Turnstile> X (\\<phi> U \\<psi>);\n     w \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> w \\<Turnstile> \\<phi> U \\<psi>", "qed force"], ["proof (state)\nthis:\n  w \\<Turnstile> \\<phi> U \\<psi>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LTL_GF_infinitely_many_suffixes:\n  \"w \\<Turnstile> G (F \\<phi>) = (\\<exists>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>)\"\n  (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<Turnstile> G (F \\<phi>) =\n    (\\<exists>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. w \\<Turnstile> G (F \\<phi>) \\<Longrightarrow>\n    \\<exists>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>\n 2. \\<exists>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> G (F \\<phi>)", "let ?S = \"{i | i j. suffix (i + j) w \\<Turnstile> \\<phi>}\""], ["proof (state)\ngoal (2 subgoals):\n 1. w \\<Turnstile> G (F \\<phi>) \\<Longrightarrow>\n    \\<exists>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>\n 2. \\<exists>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> G (F \\<phi>)", "let ?S' = \"{i + j | i j. suffix (i + j) w \\<Turnstile> \\<phi>}\""], ["proof (state)\ngoal (2 subgoals):\n 1. w \\<Turnstile> G (F \\<phi>) \\<Longrightarrow>\n    \\<exists>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>\n 2. \\<exists>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> G (F \\<phi>)", "assume ?lhs"], ["proof (state)\nthis:\n  w \\<Turnstile> G (F \\<phi>)\n\ngoal (2 subgoals):\n 1. w \\<Turnstile> G (F \\<phi>) \\<Longrightarrow>\n    \\<exists>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>\n 2. \\<exists>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> G (F \\<phi>)", "hence \"infinite ?S\""], ["proof (prove)\nusing this:\n  w \\<Turnstile> G (F \\<phi>)\n\ngoal (1 subgoal):\n 1. infinite\n     {uu_.\n      \\<exists>i j. uu_ = i \\<and> suffix (i + j) w \\<Turnstile> \\<phi>}", "by auto"], ["proof (state)\nthis:\n  infinite\n   {uu_. \\<exists>i j. uu_ = i \\<and> suffix (i + j) w \\<Turnstile> \\<phi>}\n\ngoal (2 subgoals):\n 1. w \\<Turnstile> G (F \\<phi>) \\<Longrightarrow>\n    \\<exists>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>\n 2. \\<exists>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> G (F \\<phi>)", "moreover"], ["proof (state)\nthis:\n  infinite\n   {uu_. \\<exists>i j. uu_ = i \\<and> suffix (i + j) w \\<Turnstile> \\<phi>}\n\ngoal (2 subgoals):\n 1. w \\<Turnstile> G (F \\<phi>) \\<Longrightarrow>\n    \\<exists>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>\n 2. \\<exists>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> G (F \\<phi>)", "have \"\\<forall>s \\<in> ?S. \\<exists>s' \\<in> ?S'. s \\<le> s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>{uu_.\n                    \\<exists>i j.\n                       uu_ = i \\<and> suffix (i + j) w \\<Turnstile> \\<phi>}.\n       \\<exists>s'\\<in>{i + j |i j. suffix (i + j) w \\<Turnstile> \\<phi>}.\n          s \\<le> s'", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>s\\<in>{uu_.\n                  \\<exists>i j.\n                     uu_ = i \\<and> suffix (i + j) w \\<Turnstile> \\<phi>}.\n     \\<exists>s'\\<in>{i + j |i j. suffix (i + j) w \\<Turnstile> \\<phi>}.\n        s \\<le> s'\n\ngoal (2 subgoals):\n 1. w \\<Turnstile> G (F \\<phi>) \\<Longrightarrow>\n    \\<exists>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>\n 2. \\<exists>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> G (F \\<phi>)", "ultimately"], ["proof (chain)\npicking this:\n  infinite\n   {uu_. \\<exists>i j. uu_ = i \\<and> suffix (i + j) w \\<Turnstile> \\<phi>}\n  \\<forall>s\\<in>{uu_.\n                  \\<exists>i j.\n                     uu_ = i \\<and> suffix (i + j) w \\<Turnstile> \\<phi>}.\n     \\<exists>s'\\<in>{i + j |i j. suffix (i + j) w \\<Turnstile> \\<phi>}.\n        s \\<le> s'", "have \"infinite ?S'\""], ["proof (prove)\nusing this:\n  infinite\n   {uu_. \\<exists>i j. uu_ = i \\<and> suffix (i + j) w \\<Turnstile> \\<phi>}\n  \\<forall>s\\<in>{uu_.\n                  \\<exists>i j.\n                     uu_ = i \\<and> suffix (i + j) w \\<Turnstile> \\<phi>}.\n     \\<exists>s'\\<in>{i + j |i j. suffix (i + j) w \\<Turnstile> \\<phi>}.\n        s \\<le> s'\n\ngoal (1 subgoal):\n 1. infinite {i + j |i j. suffix (i + j) w \\<Turnstile> \\<phi>}", "using infinite_nat_iff_unbounded_le le_trans"], ["proof (prove)\nusing this:\n  infinite\n   {uu_. \\<exists>i j. uu_ = i \\<and> suffix (i + j) w \\<Turnstile> \\<phi>}\n  \\<forall>s\\<in>{uu_.\n                  \\<exists>i j.\n                     uu_ = i \\<and> suffix (i + j) w \\<Turnstile> \\<phi>}.\n     \\<exists>s'\\<in>{i + j |i j. suffix (i + j) w \\<Turnstile> \\<phi>}.\n        s \\<le> s'\n  infinite ?S = (\\<forall>m. \\<exists>n\\<ge>m. n \\<in> ?S)\n  \\<lbrakk>?i \\<le> ?j; ?j \\<le> ?k\\<rbrakk> \\<Longrightarrow> ?i \\<le> ?k\n\ngoal (1 subgoal):\n 1. infinite {i + j |i j. suffix (i + j) w \\<Turnstile> \\<phi>}", "by meson"], ["proof (state)\nthis:\n  infinite {i + j |i j. suffix (i + j) w \\<Turnstile> \\<phi>}\n\ngoal (2 subgoals):\n 1. w \\<Turnstile> G (F \\<phi>) \\<Longrightarrow>\n    \\<exists>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>\n 2. \\<exists>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> G (F \\<phi>)", "moreover"], ["proof (state)\nthis:\n  infinite {i + j |i j. suffix (i + j) w \\<Turnstile> \\<phi>}\n\ngoal (2 subgoals):\n 1. w \\<Turnstile> G (F \\<phi>) \\<Longrightarrow>\n    \\<exists>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>\n 2. \\<exists>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> G (F \\<phi>)", "have \"?S' = {k | k. suffix k w \\<Turnstile> \\<phi>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i + j |i j. suffix (i + j) w \\<Turnstile> \\<phi>} =\n    {k |k. suffix k w \\<Turnstile> \\<phi>}", "using monoid_add_class.add.left_neutral"], ["proof (prove)\nusing this:\n  (0::?'a) + ?a = ?a\n\ngoal (1 subgoal):\n 1. {i + j |i j. suffix (i + j) w \\<Turnstile> \\<phi>} =\n    {k |k. suffix k w \\<Turnstile> \\<phi>}", "by metis"], ["proof (state)\nthis:\n  {i + j |i j. suffix (i + j) w \\<Turnstile> \\<phi>} =\n  {k |k. suffix k w \\<Turnstile> \\<phi>}\n\ngoal (2 subgoals):\n 1. w \\<Turnstile> G (F \\<phi>) \\<Longrightarrow>\n    \\<exists>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>\n 2. \\<exists>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> G (F \\<phi>)", "ultimately"], ["proof (chain)\npicking this:\n  infinite {i + j |i j. suffix (i + j) w \\<Turnstile> \\<phi>}\n  {i + j |i j. suffix (i + j) w \\<Turnstile> \\<phi>} =\n  {k |k. suffix k w \\<Turnstile> \\<phi>}", "have \"infinite {k | k. suffix k w \\<Turnstile> \\<phi>}\""], ["proof (prove)\nusing this:\n  infinite {i + j |i j. suffix (i + j) w \\<Turnstile> \\<phi>}\n  {i + j |i j. suffix (i + j) w \\<Turnstile> \\<phi>} =\n  {k |k. suffix k w \\<Turnstile> \\<phi>}\n\ngoal (1 subgoal):\n 1. infinite {k |k. suffix k w \\<Turnstile> \\<phi>}", "by metis"], ["proof (state)\nthis:\n  infinite {k |k. suffix k w \\<Turnstile> \\<phi>}\n\ngoal (2 subgoals):\n 1. w \\<Turnstile> G (F \\<phi>) \\<Longrightarrow>\n    \\<exists>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>\n 2. \\<exists>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> G (F \\<phi>)", "thus ?rhs"], ["proof (prove)\nusing this:\n  infinite {k |k. suffix k w \\<Turnstile> \\<phi>}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>", "unfolding Inf_many_def"], ["proof (prove)\nusing this:\n  infinite {k |k. suffix k w \\<Turnstile> \\<phi>}\n\ngoal (1 subgoal):\n 1. infinite {i. suffix i w \\<Turnstile> \\<phi>}", "by force"], ["proof (state)\nthis:\n  \\<exists>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> G (F \\<phi>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> G (F \\<phi>)", "assume ?rhs"], ["proof (state)\nthis:\n  \\<exists>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> G (F \\<phi>)", "{"], ["proof (state)\nthis:\n  \\<exists>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> G (F \\<phi>)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> G (F \\<phi>)", "from \\<open>?rhs\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>", "obtain k where \"i \\<le> k\" and \"suffix k w \\<Turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  \\<exists>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>i \\<le> k; suffix k w \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using INFM_nat_le[of \"\\<lambda>n. suffix n w \\<Turnstile> \\<phi>\"]"], ["proof (prove)\nusing this:\n  \\<exists>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>\n  (\\<exists>\\<^sub>\\<infinity>n. suffix n w \\<Turnstile> \\<phi>) =\n  (\\<forall>m. \\<exists>n\\<ge>m. suffix n w \\<Turnstile> \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>i \\<le> k; suffix k w \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  i \\<le> k\n  suffix k w \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> G (F \\<phi>)", "then"], ["proof (chain)\npicking this:\n  i \\<le> k\n  suffix k w \\<Turnstile> \\<phi>", "obtain j where \"k = i + j\""], ["proof (prove)\nusing this:\n  i \\<le> k\n  suffix k w \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>j. k = i + j \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using le_iff_add[of i k]"], ["proof (prove)\nusing this:\n  i \\<le> k\n  suffix k w \\<Turnstile> \\<phi>\n  (i \\<le> k) = (\\<exists>c. k = i + c)\n\ngoal (1 subgoal):\n 1. (\\<And>j. k = i + j \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by fast"], ["proof (state)\nthis:\n  k = i + j\n\ngoal (1 subgoal):\n 1. \\<exists>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> G (F \\<phi>)", "hence \"suffix j (suffix i w) \\<Turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  k = i + j\n\ngoal (1 subgoal):\n 1. suffix j (suffix i w) \\<Turnstile> \\<phi>", "using \\<open>suffix k w \\<Turnstile> \\<phi>\\<close> suffix_suffix"], ["proof (prove)\nusing this:\n  k = i + j\n  suffix k w \\<Turnstile> \\<phi>\n  suffix ?m (suffix ?k ?x) = suffix (?k + ?m) ?x\n\ngoal (1 subgoal):\n 1. suffix j (suffix i w) \\<Turnstile> \\<phi>", "by fastforce"], ["proof (state)\nthis:\n  suffix j (suffix i w) \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> G (F \\<phi>)", "hence \"suffix i w \\<Turnstile> F \\<phi>\""], ["proof (prove)\nusing this:\n  suffix j (suffix i w) \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. suffix i w \\<Turnstile> F \\<phi>", "by auto"], ["proof (state)\nthis:\n  suffix i w \\<Turnstile> F \\<phi>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> G (F \\<phi>)", "}"], ["proof (state)\nthis:\n  suffix ?i2 w \\<Turnstile> F \\<phi>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> G (F \\<phi>)", "thus ?lhs"], ["proof (prove)\nusing this:\n  suffix ?i2 w \\<Turnstile> F \\<phi>\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> G (F \\<phi>)", "by auto"], ["proof (state)\nthis:\n  w \\<Turnstile> G (F \\<phi>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LTL_FG_almost_all_suffixes:\n  \"w \\<Turnstile> F G \\<phi> = (\\<forall>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>)\"\n  (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<Turnstile> F G \\<phi> =\n    (\\<forall>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. w \\<Turnstile> F G \\<phi> \\<Longrightarrow>\n    \\<forall>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>\n 2. \\<forall>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> F G \\<phi>", "let ?S = \"{k. \\<not> suffix k w \\<Turnstile> \\<phi>}\""], ["proof (state)\ngoal (2 subgoals):\n 1. w \\<Turnstile> F G \\<phi> \\<Longrightarrow>\n    \\<forall>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>\n 2. \\<forall>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> F G \\<phi>", "assume ?lhs"], ["proof (state)\nthis:\n  w \\<Turnstile> F G \\<phi>\n\ngoal (2 subgoals):\n 1. w \\<Turnstile> F G \\<phi> \\<Longrightarrow>\n    \\<forall>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>\n 2. \\<forall>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> F G \\<phi>", "then"], ["proof (chain)\npicking this:\n  w \\<Turnstile> F G \\<phi>", "obtain i where \"suffix i w \\<Turnstile> G \\<phi>\""], ["proof (prove)\nusing this:\n  w \\<Turnstile> F G \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        suffix i w \\<Turnstile> G \\<phi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  suffix i w \\<Turnstile> G \\<phi>\n\ngoal (2 subgoals):\n 1. w \\<Turnstile> F G \\<phi> \\<Longrightarrow>\n    \\<forall>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>\n 2. \\<forall>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> F G \\<phi>", "hence \"\\<And>j. j \\<ge> i \\<Longrightarrow> (suffix j w \\<Turnstile> \\<phi>)\""], ["proof (prove)\nusing this:\n  suffix i w \\<Turnstile> G \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>j. i \\<le> j \\<Longrightarrow> suffix j w \\<Turnstile> \\<phi>", "using le_iff_add[of i]"], ["proof (prove)\nusing this:\n  suffix i w \\<Turnstile> G \\<phi>\n  (i \\<le> ?b) = (\\<exists>c. ?b = i + c)\n\ngoal (1 subgoal):\n 1. \\<And>j. i \\<le> j \\<Longrightarrow> suffix j w \\<Turnstile> \\<phi>", "by auto"], ["proof (state)\nthis:\n  i \\<le> ?j \\<Longrightarrow> suffix ?j w \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. w \\<Turnstile> F G \\<phi> \\<Longrightarrow>\n    \\<forall>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>\n 2. \\<forall>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> F G \\<phi>", "hence \"\\<And>j. \\<not>suffix j w \\<Turnstile> \\<phi> \\<Longrightarrow> j < i\""], ["proof (prove)\nusing this:\n  i \\<le> ?j \\<Longrightarrow> suffix ?j w \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>j. \\<not> suffix j w \\<Turnstile> \\<phi> \\<Longrightarrow> j < i", "using le_less_linear"], ["proof (prove)\nusing this:\n  i \\<le> ?j \\<Longrightarrow> suffix ?j w \\<Turnstile> \\<phi>\n  ?x \\<le> ?y \\<or> ?y < ?x\n\ngoal (1 subgoal):\n 1. \\<And>j. \\<not> suffix j w \\<Turnstile> \\<phi> \\<Longrightarrow> j < i", "by blast"], ["proof (state)\nthis:\n  \\<not> suffix ?j w \\<Turnstile> \\<phi> \\<Longrightarrow> ?j < i\n\ngoal (2 subgoals):\n 1. w \\<Turnstile> F G \\<phi> \\<Longrightarrow>\n    \\<forall>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>\n 2. \\<forall>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> F G \\<phi>", "hence \"?S \\<subseteq> {k. k < i}\""], ["proof (prove)\nusing this:\n  \\<not> suffix ?j w \\<Turnstile> \\<phi> \\<Longrightarrow> ?j < i\n\ngoal (1 subgoal):\n 1. {k. \\<not> suffix k w \\<Turnstile> \\<phi>} \\<subseteq> {k. k < i}", "by blast"], ["proof (state)\nthis:\n  {k. \\<not> suffix k w \\<Turnstile> \\<phi>} \\<subseteq> {k. k < i}\n\ngoal (2 subgoals):\n 1. w \\<Turnstile> F G \\<phi> \\<Longrightarrow>\n    \\<forall>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>\n 2. \\<forall>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> F G \\<phi>", "hence \"finite ?S\""], ["proof (prove)\nusing this:\n  {k. \\<not> suffix k w \\<Turnstile> \\<phi>} \\<subseteq> {k. k < i}\n\ngoal (1 subgoal):\n 1. finite {k. \\<not> suffix k w \\<Turnstile> \\<phi>}", "using finite_subset"], ["proof (prove)\nusing this:\n  {k. \\<not> suffix k w \\<Turnstile> \\<phi>} \\<subseteq> {k. k < i}\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite {k. \\<not> suffix k w \\<Turnstile> \\<phi>}", "by fast"], ["proof (state)\nthis:\n  finite {k. \\<not> suffix k w \\<Turnstile> \\<phi>}\n\ngoal (2 subgoals):\n 1. w \\<Turnstile> F G \\<phi> \\<Longrightarrow>\n    \\<forall>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>\n 2. \\<forall>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> F G \\<phi>", "thus ?rhs"], ["proof (prove)\nusing this:\n  finite {k. \\<not> suffix k w \\<Turnstile> \\<phi>}\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>", "unfolding Alm_all_def Inf_many_def"], ["proof (prove)\nusing this:\n  finite {k. \\<not> suffix k w \\<Turnstile> \\<phi>}\n\ngoal (1 subgoal):\n 1. \\<not> infinite {x. \\<not> suffix x w \\<Turnstile> \\<phi>}", "by presburger"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> F G \\<phi>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> F G \\<phi>", "assume ?rhs"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> F G \\<phi>", "obtain S where S_def: \"S = {k. \\<not> suffix k w \\<Turnstile> \\<phi>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>S.\n        S = {k. \\<not> suffix k w \\<Turnstile> \\<phi>} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  S = {k. \\<not> suffix k w \\<Turnstile> \\<phi>}\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> F G \\<phi>", "hence \"finite S\""], ["proof (prove)\nusing this:\n  S = {k. \\<not> suffix k w \\<Turnstile> \\<phi>}\n\ngoal (1 subgoal):\n 1. finite S", "using \\<open>?rhs\\<close>"], ["proof (prove)\nusing this:\n  S = {k. \\<not> suffix k w \\<Turnstile> \\<phi>}\n  \\<forall>\\<^sub>\\<infinity>i. suffix i w \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. finite S", "unfolding Alm_all_def Inf_many_def"], ["proof (prove)\nusing this:\n  S = {k. \\<not> suffix k w \\<Turnstile> \\<phi>}\n  \\<not> infinite {x. \\<not> suffix x w \\<Turnstile> \\<phi>}\n\ngoal (1 subgoal):\n 1. finite S", "by fast"], ["proof (state)\nthis:\n  finite S\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> F G \\<phi>", "then"], ["proof (chain)\npicking this:\n  finite S", "obtain i where \"i = Max S\""], ["proof (prove)\nusing this:\n  finite S\n\ngoal (1 subgoal):\n 1. (\\<And>i. i = Max S \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  i = Max S\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> F G \\<phi>", "{"], ["proof (state)\nthis:\n  i = Max S\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> F G \\<phi>", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> F G \\<phi>", "assume \"i < j\""], ["proof (state)\nthis:\n  i < j\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> F G \\<phi>", "hence \"j \\<notin> S\""], ["proof (prove)\nusing this:\n  i < j\n\ngoal (1 subgoal):\n 1. j \\<notin> S", "using \\<open>i = Max S\\<close> Max.coboundedI[OF \\<open>finite S\\<close>] less_le_not_le"], ["proof (prove)\nusing this:\n  i < j\n  i = Max S\n  ?a \\<in> S \\<Longrightarrow> ?a \\<le> Max S\n  (?x < ?y) = (?x \\<le> ?y \\<and> \\<not> ?y \\<le> ?x)\n\ngoal (1 subgoal):\n 1. j \\<notin> S", "by blast"], ["proof (state)\nthis:\n  j \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> F G \\<phi>", "hence \"suffix j w \\<Turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  j \\<notin> S\n\ngoal (1 subgoal):\n 1. suffix j w \\<Turnstile> \\<phi>", "using S_def"], ["proof (prove)\nusing this:\n  j \\<notin> S\n  S = {k. \\<not> suffix k w \\<Turnstile> \\<phi>}\n\ngoal (1 subgoal):\n 1. suffix j w \\<Turnstile> \\<phi>", "by fast"], ["proof (state)\nthis:\n  suffix j w \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> F G \\<phi>", "}"], ["proof (state)\nthis:\n  i < ?j2 \\<Longrightarrow> suffix ?j2 w \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> F G \\<phi>", "hence \"\\<forall>j > i. (suffix j w \\<Turnstile> \\<phi>)\""], ["proof (prove)\nusing this:\n  i < ?j2 \\<Longrightarrow> suffix ?j2 w \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<forall>j>i. suffix j w \\<Turnstile> \\<phi>", "by simp"], ["proof (state)\nthis:\n  \\<forall>j>i. suffix j w \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> F G \\<phi>", "hence \"suffix (Suc i) w \\<Turnstile> G \\<phi>\""], ["proof (prove)\nusing this:\n  \\<forall>j>i. suffix j w \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. suffix (Suc i) w \\<Turnstile> G \\<phi>", "by auto"], ["proof (state)\nthis:\n  suffix (Suc i) w \\<Turnstile> G \\<phi>\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>\\<infinity>i.\n       suffix i w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    w \\<Turnstile> F G \\<phi>", "thus ?lhs"], ["proof (prove)\nusing this:\n  suffix (Suc i) w \\<Turnstile> G \\<phi>\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> F G \\<phi>", "using ltl_semantics.simps(9)[of w \"G \\<phi>\"]"], ["proof (prove)\nusing this:\n  suffix (Suc i) w \\<Turnstile> G \\<phi>\n  w \\<Turnstile> F G \\<phi> = (\\<exists>k. suffix k w \\<Turnstile> G \\<phi>)\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> F G \\<phi>", "by blast"], ["proof (state)\nthis:\n  w \\<Turnstile> F G \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LTL_FG_suffix:\n  \"(suffix i w) \\<Turnstile> F (G \\<phi>) = w \\<Turnstile> F (G \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. suffix i w \\<Turnstile> F G \\<phi> = w \\<Turnstile> F G \\<phi>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. suffix i w \\<Turnstile> F G \\<phi> = w \\<Turnstile> F G \\<phi>", "have \"(\\<exists>m. \\<forall>n\\<ge>m. suffix n w \\<Turnstile> \\<phi>) = (\\<exists>m. \\<forall>n\\<ge>m. suffix n (suffix i w) \\<Turnstile> \\<phi>)\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>m. \\<forall>n\\<ge>m. suffix n w \\<Turnstile> \\<phi>) =\n    (\\<exists>m.\n        \\<forall>n\\<ge>m. suffix n (suffix i w) \\<Turnstile> \\<phi>)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>m.\n       \\<forall>n\\<ge>m. suffix n w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    \\<exists>m. \\<forall>n\\<ge>m. suffix n (suffix i w) \\<Turnstile> \\<phi>\n 2. \\<exists>m.\n       \\<forall>n\\<ge>m.\n          suffix n (suffix i w) \\<Turnstile> \\<phi> \\<Longrightarrow>\n    \\<exists>m. \\<forall>n\\<ge>m. suffix n w \\<Turnstile> \\<phi>", "assume ?r"], ["proof (state)\nthis:\n  \\<exists>m. \\<forall>n\\<ge>m. suffix n (suffix i w) \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. \\<exists>m.\n       \\<forall>n\\<ge>m. suffix n w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    \\<exists>m. \\<forall>n\\<ge>m. suffix n (suffix i w) \\<Turnstile> \\<phi>\n 2. \\<exists>m.\n       \\<forall>n\\<ge>m.\n          suffix n (suffix i w) \\<Turnstile> \\<phi> \\<Longrightarrow>\n    \\<exists>m. \\<forall>n\\<ge>m. suffix n w \\<Turnstile> \\<phi>", "then"], ["proof (chain)\npicking this:\n  \\<exists>m. \\<forall>n\\<ge>m. suffix n (suffix i w) \\<Turnstile> \\<phi>", "obtain m where \"\\<forall>n\\<ge>m. suffix n (suffix i w) \\<Turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  \\<exists>m. \\<forall>n\\<ge>m. suffix n (suffix i w) \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<forall>n\\<ge>m.\n           suffix n (suffix i w) \\<Turnstile> \\<phi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>n\\<ge>m. suffix n (suffix i w) \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. \\<exists>m.\n       \\<forall>n\\<ge>m. suffix n w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    \\<exists>m. \\<forall>n\\<ge>m. suffix n (suffix i w) \\<Turnstile> \\<phi>\n 2. \\<exists>m.\n       \\<forall>n\\<ge>m.\n          suffix n (suffix i w) \\<Turnstile> \\<phi> \\<Longrightarrow>\n    \\<exists>m. \\<forall>n\\<ge>m. suffix n w \\<Turnstile> \\<phi>", "hence \"\\<forall>n\\<ge>i+m. suffix n w \\<Turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  \\<forall>n\\<ge>m. suffix n (suffix i w) \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<ge>i + m. suffix n w \\<Turnstile> \\<phi>", "unfolding suffix_suffix"], ["proof (prove)\nusing this:\n  \\<forall>n\\<ge>m. suffix (i + n) w \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<ge>i + m. suffix n w \\<Turnstile> \\<phi>", "by (metis le_iff_add add_leE add_le_cancel_left)"], ["proof (state)\nthis:\n  \\<forall>n\\<ge>i + m. suffix n w \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. \\<exists>m.\n       \\<forall>n\\<ge>m. suffix n w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    \\<exists>m. \\<forall>n\\<ge>m. suffix n (suffix i w) \\<Turnstile> \\<phi>\n 2. \\<exists>m.\n       \\<forall>n\\<ge>m.\n          suffix n (suffix i w) \\<Turnstile> \\<phi> \\<Longrightarrow>\n    \\<exists>m. \\<forall>n\\<ge>m. suffix n w \\<Turnstile> \\<phi>", "thus ?l"], ["proof (prove)\nusing this:\n  \\<forall>n\\<ge>i + m. suffix n w \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<exists>m. \\<forall>n\\<ge>m. suffix n w \\<Turnstile> \\<phi>", "by auto"], ["proof (state)\nthis:\n  \\<exists>m. \\<forall>n\\<ge>m. suffix n w \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       \\<forall>n\\<ge>m. suffix n w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    \\<exists>m. \\<forall>n\\<ge>m. suffix n (suffix i w) \\<Turnstile> \\<phi>", "qed (metis suffix_suffix trans_le_add2)"], ["proof (state)\nthis:\n  (\\<exists>m. \\<forall>n\\<ge>m. suffix n w \\<Turnstile> \\<phi>) =\n  (\\<exists>m. \\<forall>n\\<ge>m. suffix n (suffix i w) \\<Turnstile> \\<phi>)\n\ngoal (1 subgoal):\n 1. suffix i w \\<Turnstile> F G \\<phi> = w \\<Turnstile> F G \\<phi>", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<exists>m. \\<forall>n\\<ge>m. suffix n w \\<Turnstile> \\<phi>) =\n  (\\<exists>m. \\<forall>n\\<ge>m. suffix n (suffix i w) \\<Turnstile> \\<phi>)\n\ngoal (1 subgoal):\n 1. suffix i w \\<Turnstile> F G \\<phi> = w \\<Turnstile> F G \\<phi>", "unfolding LTL_FG_almost_all_suffixes MOST_nat_le"], ["proof (prove)\nusing this:\n  (\\<exists>m. \\<forall>n\\<ge>m. suffix n w \\<Turnstile> \\<phi>) =\n  (\\<exists>m. \\<forall>n\\<ge>m. suffix n (suffix i w) \\<Turnstile> \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<exists>m.\n        \\<forall>n\\<ge>m. suffix n (suffix i w) \\<Turnstile> \\<phi>) =\n    (\\<exists>m. \\<forall>n\\<ge>m. suffix n w \\<Turnstile> \\<phi>)", ".."], ["proof (state)\nthis:\n  suffix i w \\<Turnstile> F G \\<phi> = w \\<Turnstile> F G \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LTL_GF_suffix:\n  \"(suffix i w) \\<Turnstile> G (F \\<phi>) = w \\<Turnstile> G (F \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. suffix i w \\<Turnstile> G (F \\<phi>) = w \\<Turnstile> G (F \\<phi>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. suffix i w \\<Turnstile> G (F \\<phi>) = w \\<Turnstile> G (F \\<phi>)", "have \"(\\<forall>m. \\<exists>n\\<ge>m. suffix n w \\<Turnstile> \\<phi>) = (\\<forall>m. \\<exists>n\\<ge>m. suffix n (suffix i w) \\<Turnstile> \\<phi>)\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>m. \\<exists>n\\<ge>m. suffix n w \\<Turnstile> \\<phi>) =\n    (\\<forall>m.\n        \\<exists>n\\<ge>m. suffix n (suffix i w) \\<Turnstile> \\<phi>)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>m.\n       \\<exists>n\\<ge>m. suffix n w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    \\<forall>m. \\<exists>n\\<ge>m. suffix n (suffix i w) \\<Turnstile> \\<phi>\n 2. \\<forall>m.\n       \\<exists>n\\<ge>m.\n          suffix n (suffix i w) \\<Turnstile> \\<phi> \\<Longrightarrow>\n    \\<forall>m. \\<exists>n\\<ge>m. suffix n w \\<Turnstile> \\<phi>", "assume ?l"], ["proof (state)\nthis:\n  \\<forall>m. \\<exists>n\\<ge>m. suffix n w \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. \\<forall>m.\n       \\<exists>n\\<ge>m. suffix n w \\<Turnstile> \\<phi> \\<Longrightarrow>\n    \\<forall>m. \\<exists>n\\<ge>m. suffix n (suffix i w) \\<Turnstile> \\<phi>\n 2. \\<forall>m.\n       \\<exists>n\\<ge>m.\n          suffix n (suffix i w) \\<Turnstile> \\<phi> \\<Longrightarrow>\n    \\<forall>m. \\<exists>n\\<ge>m. suffix n w \\<Turnstile> \\<phi>", "thus ?r"], ["proof (prove)\nusing this:\n  \\<forall>m. \\<exists>n\\<ge>m. suffix n w \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<forall>m. \\<exists>n\\<ge>m. suffix n (suffix i w) \\<Turnstile> \\<phi>", "by (metis suffix_suffix add_leE add_le_cancel_left le_Suc_ex)"], ["proof (state)\nthis:\n  \\<forall>m. \\<exists>n\\<ge>m. suffix n (suffix i w) \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<forall>m.\n       \\<exists>n\\<ge>m.\n          suffix n (suffix i w) \\<Turnstile> \\<phi> \\<Longrightarrow>\n    \\<forall>m. \\<exists>n\\<ge>m. suffix n w \\<Turnstile> \\<phi>", "qed (metis suffix_suffix trans_le_add2)"], ["proof (state)\nthis:\n  (\\<forall>m. \\<exists>n\\<ge>m. suffix n w \\<Turnstile> \\<phi>) =\n  (\\<forall>m. \\<exists>n\\<ge>m. suffix n (suffix i w) \\<Turnstile> \\<phi>)\n\ngoal (1 subgoal):\n 1. suffix i w \\<Turnstile> G (F \\<phi>) = w \\<Turnstile> G (F \\<phi>)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<forall>m. \\<exists>n\\<ge>m. suffix n w \\<Turnstile> \\<phi>) =\n  (\\<forall>m. \\<exists>n\\<ge>m. suffix n (suffix i w) \\<Turnstile> \\<phi>)\n\ngoal (1 subgoal):\n 1. suffix i w \\<Turnstile> G (F \\<phi>) = w \\<Turnstile> G (F \\<phi>)", "unfolding LTL_GF_infinitely_many_suffixes INFM_nat_le"], ["proof (prove)\nusing this:\n  (\\<forall>m. \\<exists>n\\<ge>m. suffix n w \\<Turnstile> \\<phi>) =\n  (\\<forall>m. \\<exists>n\\<ge>m. suffix n (suffix i w) \\<Turnstile> \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<forall>m.\n        \\<exists>n\\<ge>m. suffix n (suffix i w) \\<Turnstile> \\<phi>) =\n    (\\<forall>m. \\<exists>n\\<ge>m. suffix n w \\<Turnstile> \\<phi>)", ".."], ["proof (state)\nthis:\n  suffix i w \\<Turnstile> G (F \\<phi>) = w \\<Turnstile> G (F \\<phi>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LTL_suffix_G:\n  \"w \\<Turnstile> G \\<phi> \\<Longrightarrow> suffix i w \\<Turnstile> G \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<Turnstile> G \\<phi> \\<Longrightarrow>\n    suffix i w \\<Turnstile> G \\<phi>", "using suffix_0 suffix_suffix"], ["proof (prove)\nusing this:\n  suffix 0 ?x = ?x\n  suffix ?m (suffix ?k ?x) = suffix (?k + ?m) ?x\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> G \\<phi> \\<Longrightarrow>\n    suffix i w \\<Turnstile> G \\<phi>", "by (induction i) simp_all"], ["", "lemma LTL_prop_entailment_monotonI[intro]:\n  \"S \\<Turnstile>\\<^sub>P \\<phi> \\<Longrightarrow> S \\<subseteq> S' \\<Longrightarrow> S' \\<Turnstile>\\<^sub>P \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<Turnstile>\\<^sub>P \\<phi>; S \\<subseteq> S'\\<rbrakk>\n    \\<Longrightarrow> S' \\<Turnstile>\\<^sub>P \\<phi>", "by (induction rule: ltl_prop_entailment.induct) auto"], ["", "lemma ltl_models_equiv_prop_entailment:\n  \"w \\<Turnstile> \\<phi> = {\\<chi>. w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<Turnstile> \\<phi> =\n    {\\<chi>. w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P \\<phi>", "by (induction \\<phi>) auto"], ["", "subsubsection \\<open>Limit Behaviour of the G-operator\\<close>"], ["", "abbreviation Only_G\nwhere\n  \"Only_G S \\<equiv> \\<forall>x \\<in> S. \\<exists>y. x = G y\""], ["", "lemma ltl_G_stabilize:\n  assumes \"finite \\<G>\"\n  assumes \"Only_G \\<G>\"\n  obtains i where \"\\<And>\\<chi> j. \\<chi> \\<in> \\<G> \\<Longrightarrow> suffix i w \\<Turnstile> \\<chi> = suffix (i + j) w \\<Turnstile> \\<chi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        (\\<And>\\<chi> j.\n            \\<chi> \\<in> \\<G> \\<Longrightarrow>\n            suffix i w \\<Turnstile> \\<chi> =\n            suffix (i + j) w \\<Turnstile> \\<chi>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        (\\<And>\\<chi> j.\n            \\<chi> \\<in> \\<G> \\<Longrightarrow>\n            suffix i w \\<Turnstile> \\<chi> =\n            suffix (i + j) w \\<Turnstile> \\<chi>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "have \"finite \\<G> \\<Longrightarrow> Only_G \\<G> \\<Longrightarrow> \\<exists>i. \\<forall>\\<chi> \\<in> \\<G>. \\<forall>j. suffix i w \\<Turnstile> \\<chi> = suffix (i + j) w \\<Turnstile> \\<chi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite \\<G>; Only_G \\<G>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i.\n                         \\<forall>\\<chi>\\<in>\\<G>.\n                            \\<forall>j.\n                               suffix i w \\<Turnstile> \\<chi> =\n                               suffix (i + j) w \\<Turnstile> \\<chi>", "proof (induction rule: finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. Only_G {} \\<Longrightarrow>\n    \\<exists>i.\n       \\<forall>\\<chi>\\<in>{}.\n          \\<forall>j.\n             suffix i w \\<Turnstile> \\<chi> =\n             suffix (i + j) w \\<Turnstile> \\<chi>\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        Only_G F \\<Longrightarrow>\n        \\<exists>i.\n           \\<forall>\\<chi>\\<in>F.\n              \\<forall>j.\n                 suffix i w \\<Turnstile> \\<chi> =\n                 suffix (i + j) w \\<Turnstile> \\<chi>;\n        Only_G (insert x F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            \\<forall>\\<chi>\\<in>insert x F.\n                               \\<forall>j.\n                                  suffix i w \\<Turnstile> \\<chi> =\n                                  suffix (i + j) w \\<Turnstile> \\<chi>", "case (insert \\<chi> \\<G>)"], ["proof (state)\nthis:\n  finite \\<G>\n  \\<chi> \\<notin> \\<G>\n  Only_G \\<G> \\<Longrightarrow>\n  \\<exists>i.\n     \\<forall>\\<chi>\\<in>\\<G>.\n        \\<forall>j.\n           suffix i w \\<Turnstile> \\<chi> =\n           suffix (i + j) w \\<Turnstile> \\<chi>\n  Only_G (insert \\<chi> \\<G>)\n\ngoal (2 subgoals):\n 1. Only_G {} \\<Longrightarrow>\n    \\<exists>i.\n       \\<forall>\\<chi>\\<in>{}.\n          \\<forall>j.\n             suffix i w \\<Turnstile> \\<chi> =\n             suffix (i + j) w \\<Turnstile> \\<chi>\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        Only_G F \\<Longrightarrow>\n        \\<exists>i.\n           \\<forall>\\<chi>\\<in>F.\n              \\<forall>j.\n                 suffix i w \\<Turnstile> \\<chi> =\n                 suffix (i + j) w \\<Turnstile> \\<chi>;\n        Only_G (insert x F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            \\<forall>\\<chi>\\<in>insert x F.\n                               \\<forall>j.\n                                  suffix i w \\<Turnstile> \\<chi> =\n                                  suffix (i + j) w \\<Turnstile> \\<chi>", "then"], ["proof (chain)\npicking this:\n  finite \\<G>\n  \\<chi> \\<notin> \\<G>\n  Only_G \\<G> \\<Longrightarrow>\n  \\<exists>i.\n     \\<forall>\\<chi>\\<in>\\<G>.\n        \\<forall>j.\n           suffix i w \\<Turnstile> \\<chi> =\n           suffix (i + j) w \\<Turnstile> \\<chi>\n  Only_G (insert \\<chi> \\<G>)", "obtain i\\<^sub>1  where \"\\<And>\\<chi> j. \\<chi> \\<in> \\<G> \\<Longrightarrow> suffix i\\<^sub>1 w \\<Turnstile> \\<chi> = suffix (i\\<^sub>1 + j) w \\<Turnstile> \\<chi>\""], ["proof (prove)\nusing this:\n  finite \\<G>\n  \\<chi> \\<notin> \\<G>\n  Only_G \\<G> \\<Longrightarrow>\n  \\<exists>i.\n     \\<forall>\\<chi>\\<in>\\<G>.\n        \\<forall>j.\n           suffix i w \\<Turnstile> \\<chi> =\n           suffix (i + j) w \\<Turnstile> \\<chi>\n  Only_G (insert \\<chi> \\<G>)\n\ngoal (1 subgoal):\n 1. (\\<And>i\\<^sub>1.\n        (\\<And>\\<chi> j.\n            \\<chi> \\<in> \\<G> \\<Longrightarrow>\n            suffix i\\<^sub>1 w \\<Turnstile> \\<chi> =\n            suffix (i\\<^sub>1 + j) w \\<Turnstile> \\<chi>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ?\\<chi> \\<in> \\<G> \\<Longrightarrow>\n  suffix i\\<^sub>1 w \\<Turnstile> ?\\<chi> =\n  suffix (i\\<^sub>1 + ?j) w \\<Turnstile> ?\\<chi>\n\ngoal (2 subgoals):\n 1. Only_G {} \\<Longrightarrow>\n    \\<exists>i.\n       \\<forall>\\<chi>\\<in>{}.\n          \\<forall>j.\n             suffix i w \\<Turnstile> \\<chi> =\n             suffix (i + j) w \\<Turnstile> \\<chi>\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        Only_G F \\<Longrightarrow>\n        \\<exists>i.\n           \\<forall>\\<chi>\\<in>F.\n              \\<forall>j.\n                 suffix i w \\<Turnstile> \\<chi> =\n                 suffix (i + j) w \\<Turnstile> \\<chi>;\n        Only_G (insert x F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            \\<forall>\\<chi>\\<in>insert x F.\n                               \\<forall>j.\n                                  suffix i w \\<Turnstile> \\<chi> =\n                                  suffix (i + j) w \\<Turnstile> \\<chi>", "moreover"], ["proof (state)\nthis:\n  ?\\<chi> \\<in> \\<G> \\<Longrightarrow>\n  suffix i\\<^sub>1 w \\<Turnstile> ?\\<chi> =\n  suffix (i\\<^sub>1 + ?j) w \\<Turnstile> ?\\<chi>\n\ngoal (2 subgoals):\n 1. Only_G {} \\<Longrightarrow>\n    \\<exists>i.\n       \\<forall>\\<chi>\\<in>{}.\n          \\<forall>j.\n             suffix i w \\<Turnstile> \\<chi> =\n             suffix (i + j) w \\<Turnstile> \\<chi>\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        Only_G F \\<Longrightarrow>\n        \\<exists>i.\n           \\<forall>\\<chi>\\<in>F.\n              \\<forall>j.\n                 suffix i w \\<Turnstile> \\<chi> =\n                 suffix (i + j) w \\<Turnstile> \\<chi>;\n        Only_G (insert x F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            \\<forall>\\<chi>\\<in>insert x F.\n                               \\<forall>j.\n                                  suffix i w \\<Turnstile> \\<chi> =\n                                  suffix (i + j) w \\<Turnstile> \\<chi>", "from insert"], ["proof (chain)\npicking this:\n  finite \\<G>\n  \\<chi> \\<notin> \\<G>\n  Only_G \\<G> \\<Longrightarrow>\n  \\<exists>i.\n     \\<forall>\\<chi>\\<in>\\<G>.\n        \\<forall>j.\n           suffix i w \\<Turnstile> \\<chi> =\n           suffix (i + j) w \\<Turnstile> \\<chi>\n  Only_G (insert \\<chi> \\<G>)", "obtain \\<psi> where \"\\<chi> = G \\<psi>\""], ["proof (prove)\nusing this:\n  finite \\<G>\n  \\<chi> \\<notin> \\<G>\n  Only_G \\<G> \\<Longrightarrow>\n  \\<exists>i.\n     \\<forall>\\<chi>\\<in>\\<G>.\n        \\<forall>j.\n           suffix i w \\<Turnstile> \\<chi> =\n           suffix (i + j) w \\<Turnstile> \\<chi>\n  Only_G (insert \\<chi> \\<G>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<psi>.\n        \\<chi> = G \\<psi> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<chi> = G \\<psi>\n\ngoal (2 subgoals):\n 1. Only_G {} \\<Longrightarrow>\n    \\<exists>i.\n       \\<forall>\\<chi>\\<in>{}.\n          \\<forall>j.\n             suffix i w \\<Turnstile> \\<chi> =\n             suffix (i + j) w \\<Turnstile> \\<chi>\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        Only_G F \\<Longrightarrow>\n        \\<exists>i.\n           \\<forall>\\<chi>\\<in>F.\n              \\<forall>j.\n                 suffix i w \\<Turnstile> \\<chi> =\n                 suffix (i + j) w \\<Turnstile> \\<chi>;\n        Only_G (insert x F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            \\<forall>\\<chi>\\<in>insert x F.\n                               \\<forall>j.\n                                  suffix i w \\<Turnstile> \\<chi> =\n                                  suffix (i + j) w \\<Turnstile> \\<chi>", "have \"\\<exists>i. \\<forall>j. suffix i w \\<Turnstile> G \\<psi> = suffix (i + j) w \\<Turnstile> G \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i.\n       \\<forall>j.\n          suffix i w \\<Turnstile> G \\<psi> =\n          suffix (i + j) w \\<Turnstile> G \\<psi>", "by (metis LTL_suffix_G plus_nat.add_0 suffix_0 suffix_suffix)"], ["proof (state)\nthis:\n  \\<exists>i.\n     \\<forall>j.\n        suffix i w \\<Turnstile> G \\<psi> =\n        suffix (i + j) w \\<Turnstile> G \\<psi>\n\ngoal (2 subgoals):\n 1. Only_G {} \\<Longrightarrow>\n    \\<exists>i.\n       \\<forall>\\<chi>\\<in>{}.\n          \\<forall>j.\n             suffix i w \\<Turnstile> \\<chi> =\n             suffix (i + j) w \\<Turnstile> \\<chi>\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        Only_G F \\<Longrightarrow>\n        \\<exists>i.\n           \\<forall>\\<chi>\\<in>F.\n              \\<forall>j.\n                 suffix i w \\<Turnstile> \\<chi> =\n                 suffix (i + j) w \\<Turnstile> \\<chi>;\n        Only_G (insert x F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            \\<forall>\\<chi>\\<in>insert x F.\n                               \\<forall>j.\n                                  suffix i w \\<Turnstile> \\<chi> =\n                                  suffix (i + j) w \\<Turnstile> \\<chi>", "then"], ["proof (chain)\npicking this:\n  \\<exists>i.\n     \\<forall>j.\n        suffix i w \\<Turnstile> G \\<psi> =\n        suffix (i + j) w \\<Turnstile> G \\<psi>", "obtain i\\<^sub>2 where \"\\<And>j. suffix i\\<^sub>2 w \\<Turnstile> \\<chi> = suffix (i\\<^sub>2 + j) w \\<Turnstile> \\<chi>\""], ["proof (prove)\nusing this:\n  \\<exists>i.\n     \\<forall>j.\n        suffix i w \\<Turnstile> G \\<psi> =\n        suffix (i + j) w \\<Turnstile> G \\<psi>\n\ngoal (1 subgoal):\n 1. (\\<And>i\\<^sub>2.\n        (\\<And>j.\n            suffix i\\<^sub>2 w \\<Turnstile> \\<chi> =\n            suffix (i\\<^sub>2 + j) w \\<Turnstile> \\<chi>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding \\<open>\\<chi> = G \\<psi>\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>i.\n     \\<forall>j.\n        suffix i w \\<Turnstile> G \\<psi> =\n        suffix (i + j) w \\<Turnstile> G \\<psi>\n\ngoal (1 subgoal):\n 1. (\\<And>i\\<^sub>2.\n        (\\<And>j.\n            suffix i\\<^sub>2 w \\<Turnstile> G \\<psi> =\n            suffix (i\\<^sub>2 + j) w \\<Turnstile>\n            G \\<psi>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  suffix i\\<^sub>2 w \\<Turnstile> \\<chi> =\n  suffix (i\\<^sub>2 + ?j) w \\<Turnstile> \\<chi>\n\ngoal (2 subgoals):\n 1. Only_G {} \\<Longrightarrow>\n    \\<exists>i.\n       \\<forall>\\<chi>\\<in>{}.\n          \\<forall>j.\n             suffix i w \\<Turnstile> \\<chi> =\n             suffix (i + j) w \\<Turnstile> \\<chi>\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        Only_G F \\<Longrightarrow>\n        \\<exists>i.\n           \\<forall>\\<chi>\\<in>F.\n              \\<forall>j.\n                 suffix i w \\<Turnstile> \\<chi> =\n                 suffix (i + j) w \\<Turnstile> \\<chi>;\n        Only_G (insert x F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            \\<forall>\\<chi>\\<in>insert x F.\n                               \\<forall>j.\n                                  suffix i w \\<Turnstile> \\<chi> =\n                                  suffix (i + j) w \\<Turnstile> \\<chi>", "ultimately"], ["proof (chain)\npicking this:\n  ?\\<chi> \\<in> \\<G> \\<Longrightarrow>\n  suffix i\\<^sub>1 w \\<Turnstile> ?\\<chi> =\n  suffix (i\\<^sub>1 + ?j) w \\<Turnstile> ?\\<chi>\n  suffix i\\<^sub>2 w \\<Turnstile> \\<chi> =\n  suffix (i\\<^sub>2 + ?j) w \\<Turnstile> \\<chi>", "have \"\\<And>\\<chi>' j. \\<chi>' \\<in> \\<G> \\<union> {\\<chi>} \\<Longrightarrow> suffix (i\\<^sub>1 + i\\<^sub>2) w \\<Turnstile> \\<chi>' = suffix (i\\<^sub>1 + i\\<^sub>2 + j) w \\<Turnstile> \\<chi>'\""], ["proof (prove)\nusing this:\n  ?\\<chi> \\<in> \\<G> \\<Longrightarrow>\n  suffix i\\<^sub>1 w \\<Turnstile> ?\\<chi> =\n  suffix (i\\<^sub>1 + ?j) w \\<Turnstile> ?\\<chi>\n  suffix i\\<^sub>2 w \\<Turnstile> \\<chi> =\n  suffix (i\\<^sub>2 + ?j) w \\<Turnstile> \\<chi>\n\ngoal (1 subgoal):\n 1. \\<And>\\<chi>' j.\n       \\<chi>' \\<in> \\<G> \\<union> {\\<chi>} \\<Longrightarrow>\n       suffix (i\\<^sub>1 + i\\<^sub>2) w \\<Turnstile> \\<chi>' =\n       suffix (i\\<^sub>1 + i\\<^sub>2 + j) w \\<Turnstile> \\<chi>'", "unfolding Un_iff singleton_iff"], ["proof (prove)\nusing this:\n  ?\\<chi> \\<in> \\<G> \\<Longrightarrow>\n  suffix i\\<^sub>1 w \\<Turnstile> ?\\<chi> =\n  suffix (i\\<^sub>1 + ?j) w \\<Turnstile> ?\\<chi>\n  suffix i\\<^sub>2 w \\<Turnstile> \\<chi> =\n  suffix (i\\<^sub>2 + ?j) w \\<Turnstile> \\<chi>\n\ngoal (1 subgoal):\n 1. \\<And>\\<chi>' j.\n       \\<chi>' \\<in> \\<G> \\<or> \\<chi>' = \\<chi> \\<Longrightarrow>\n       suffix (i\\<^sub>1 + i\\<^sub>2) w \\<Turnstile> \\<chi>' =\n       suffix (i\\<^sub>1 + i\\<^sub>2 + j) w \\<Turnstile> \\<chi>'", "by (metis add.commute add.left_commute)"], ["proof (state)\nthis:\n  ?\\<chi>' \\<in> \\<G> \\<union> {\\<chi>} \\<Longrightarrow>\n  suffix (i\\<^sub>1 + i\\<^sub>2) w \\<Turnstile> ?\\<chi>' =\n  suffix (i\\<^sub>1 + i\\<^sub>2 + ?j) w \\<Turnstile> ?\\<chi>'\n\ngoal (2 subgoals):\n 1. Only_G {} \\<Longrightarrow>\n    \\<exists>i.\n       \\<forall>\\<chi>\\<in>{}.\n          \\<forall>j.\n             suffix i w \\<Turnstile> \\<chi> =\n             suffix (i + j) w \\<Turnstile> \\<chi>\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        Only_G F \\<Longrightarrow>\n        \\<exists>i.\n           \\<forall>\\<chi>\\<in>F.\n              \\<forall>j.\n                 suffix i w \\<Turnstile> \\<chi> =\n                 suffix (i + j) w \\<Turnstile> \\<chi>;\n        Only_G (insert x F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            \\<forall>\\<chi>\\<in>insert x F.\n                               \\<forall>j.\n                                  suffix i w \\<Turnstile> \\<chi> =\n                                  suffix (i + j) w \\<Turnstile> \\<chi>", "thus ?case"], ["proof (prove)\nusing this:\n  ?\\<chi>' \\<in> \\<G> \\<union> {\\<chi>} \\<Longrightarrow>\n  suffix (i\\<^sub>1 + i\\<^sub>2) w \\<Turnstile> ?\\<chi>' =\n  suffix (i\\<^sub>1 + i\\<^sub>2 + ?j) w \\<Turnstile> ?\\<chi>'\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       \\<forall>\\<chi>\\<in>insert \\<chi> \\<G>.\n          \\<forall>j.\n             suffix i w \\<Turnstile> \\<chi> =\n             suffix (i + j) w \\<Turnstile> \\<chi>", "by blast"], ["proof (state)\nthis:\n  \\<exists>i.\n     \\<forall>\\<chi>\\<in>insert \\<chi> \\<G>.\n        \\<forall>j.\n           suffix i w \\<Turnstile> \\<chi> =\n           suffix (i + j) w \\<Turnstile> \\<chi>\n\ngoal (1 subgoal):\n 1. Only_G {} \\<Longrightarrow>\n    \\<exists>i.\n       \\<forall>\\<chi>\\<in>{}.\n          \\<forall>j.\n             suffix i w \\<Turnstile> \\<chi> =\n             suffix (i + j) w \\<Turnstile> \\<chi>", "qed simp"], ["proof (state)\nthis:\n  \\<lbrakk>finite \\<G>; Only_G \\<G>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i.\n                       \\<forall>\\<chi>\\<in>\\<G>.\n                          \\<forall>j.\n                             suffix i w \\<Turnstile> \\<chi> =\n                             suffix (i + j) w \\<Turnstile> \\<chi>\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        (\\<And>\\<chi> j.\n            \\<chi> \\<in> \\<G> \\<Longrightarrow>\n            suffix i w \\<Turnstile> \\<chi> =\n            suffix (i + j) w \\<Turnstile> \\<chi>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "with assms"], ["proof (chain)\npicking this:\n  finite \\<G>\n  Only_G \\<G>\n  \\<lbrakk>finite \\<G>; Only_G \\<G>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i.\n                       \\<forall>\\<chi>\\<in>\\<G>.\n                          \\<forall>j.\n                             suffix i w \\<Turnstile> \\<chi> =\n                             suffix (i + j) w \\<Turnstile> \\<chi>", "obtain i where \"\\<And>\\<chi> j. \\<chi> \\<in> \\<G> \\<Longrightarrow> suffix i w \\<Turnstile> \\<chi> = suffix (i + j) w \\<Turnstile> \\<chi>\""], ["proof (prove)\nusing this:\n  finite \\<G>\n  Only_G \\<G>\n  \\<lbrakk>finite \\<G>; Only_G \\<G>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i.\n                       \\<forall>\\<chi>\\<in>\\<G>.\n                          \\<forall>j.\n                             suffix i w \\<Turnstile> \\<chi> =\n                             suffix (i + j) w \\<Turnstile> \\<chi>\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        (\\<And>\\<chi> j.\n            \\<chi> \\<in> \\<G> \\<Longrightarrow>\n            suffix i w \\<Turnstile> \\<chi> =\n            suffix (i + j) w \\<Turnstile> \\<chi>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ?\\<chi> \\<in> \\<G> \\<Longrightarrow>\n  suffix i w \\<Turnstile> ?\\<chi> = suffix (i + ?j) w \\<Turnstile> ?\\<chi>\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        (\\<And>\\<chi> j.\n            \\<chi> \\<in> \\<G> \\<Longrightarrow>\n            suffix i w \\<Turnstile> \\<chi> =\n            suffix (i + j) w \\<Turnstile> \\<chi>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?\\<chi> \\<in> \\<G> \\<Longrightarrow>\n  suffix i w \\<Turnstile> ?\\<chi> = suffix (i + ?j) w \\<Turnstile> ?\\<chi>\n\ngoal (1 subgoal):\n 1. thesis", "using that"], ["proof (prove)\nusing this:\n  ?\\<chi> \\<in> \\<G> \\<Longrightarrow>\n  suffix i w \\<Turnstile> ?\\<chi> = suffix (i + ?j) w \\<Turnstile> ?\\<chi>\n  (\\<And>\\<chi> j.\n      \\<chi> \\<in> \\<G> \\<Longrightarrow>\n      suffix ?i w \\<Turnstile> \\<chi> =\n      suffix (?i + j) w \\<Turnstile> \\<chi>) \\<Longrightarrow>\n  thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ltl_G_stabilize_property:\n  assumes \"finite \\<G>\"\n  assumes \"Only_G \\<G>\"\n  assumes \"\\<And>\\<chi> j. \\<chi> \\<in> \\<G> \\<Longrightarrow> suffix i w \\<Turnstile> \\<chi> = suffix (i + j) w \\<Turnstile> \\<chi>\"\n  assumes \"G \\<psi> \\<in> \\<G> \\<inter> {\\<chi>. w \\<Turnstile> F \\<chi>}\"\n  shows \"suffix i w \\<Turnstile> G \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. suffix i w \\<Turnstile> G \\<psi>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. suffix i w \\<Turnstile> G \\<psi>", "obtain j where \"suffix j w \\<Turnstile> G \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j.\n        suffix j w \\<Turnstile> G \\<psi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  finite \\<G>\n  Only_G \\<G>\n  ?\\<chi> \\<in> \\<G> \\<Longrightarrow>\n  suffix i w \\<Turnstile> ?\\<chi> = suffix (i + ?j) w \\<Turnstile> ?\\<chi>\n  G \\<psi> \\<in> \\<G> \\<inter> {\\<chi>. w \\<Turnstile> F \\<chi>}\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        suffix j w \\<Turnstile> G \\<psi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  suffix j w \\<Turnstile> G \\<psi>\n\ngoal (1 subgoal):\n 1. suffix i w \\<Turnstile> G \\<psi>", "thus \"suffix i w \\<Turnstile> G \\<psi>\""], ["proof (prove)\nusing this:\n  suffix j w \\<Turnstile> G \\<psi>\n\ngoal (1 subgoal):\n 1. suffix i w \\<Turnstile> G \\<psi>", "by (cases \"i \\<le> j\", insert assms, unfold le_iff_add, blast,\n        metis (erased, lifting) LTL_suffix_G \\<open>suffix j w \\<Turnstile> G \\<psi>\\<close> le_add_diff_inverse nat_le_linear suffix_suffix)"], ["proof (state)\nthis:\n  suffix i w \\<Turnstile> G \\<psi>\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Subformulae\\<close>"], ["", "subsubsection \\<open>Propositions\\<close>"], ["", "fun propos :: \"'a ltl \\<Rightarrow>'a ltl set\"\nwhere\n  \"propos true = {}\"\n| \"propos false = {}\"\n| \"propos (\\<phi> and \\<psi>) = propos \\<phi> \\<union> propos \\<psi>\"\n| \"propos (\\<phi> or \\<psi>) = propos \\<phi> \\<union> propos \\<psi>\"\n| \"propos \\<phi> = {\\<phi>}\""], ["", "fun nested_propos :: \"'a ltl \\<Rightarrow>'a ltl set\"\nwhere\n  \"nested_propos true = {}\"\n| \"nested_propos false = {}\"\n| \"nested_propos (\\<phi> and \\<psi>) = nested_propos \\<phi> \\<union> nested_propos \\<psi>\"\n| \"nested_propos (\\<phi> or \\<psi>) = nested_propos \\<phi> \\<union> nested_propos \\<psi>\"\n| \"nested_propos (F \\<phi>) = {F \\<phi>} \\<union> nested_propos \\<phi>\"\n| \"nested_propos (G \\<phi>) = {G \\<phi>} \\<union> nested_propos \\<phi>\"\n| \"nested_propos (X \\<phi>) = {X \\<phi>} \\<union> nested_propos \\<phi>\"\n| \"nested_propos (\\<phi> U \\<psi>) = {\\<phi> U \\<psi>} \\<union> nested_propos \\<phi> \\<union> nested_propos \\<psi>\"\n| \"nested_propos \\<phi> = {\\<phi>}\""], ["", "lemma finite_propos:\n  \"finite (propos \\<phi>)\" \"finite (nested_propos \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (propos \\<phi>) &&& finite (nested_propos \\<phi>)", "by (induction \\<phi>) simp+"], ["", "lemma propos_subset:\n  \"propos \\<phi> \\<subseteq> nested_propos \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. propos \\<phi> \\<subseteq> nested_propos \\<phi>", "by (induction \\<phi>) auto"], ["", "lemma LTL_prop_entailment_restrict_to_propos:\n  \"S \\<Turnstile>\\<^sub>P \\<phi> = (S \\<inter> propos \\<phi>) \\<Turnstile>\\<^sub>P \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<Turnstile>\\<^sub>P \\<phi> =\n    (S \\<inter> propos \\<phi>) \\<Turnstile>\\<^sub>P \\<phi>", "by (induction \\<phi>) auto"], ["", "lemma propos_foldl:\n  assumes \"\\<And>x y. propos (f x y) = propos x \\<union> propos y\"\n  shows \"\\<Union>{propos y |y. y = i \\<or> y \\<in> set xs} = propos (foldl f i xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> {propos y |y. y = i \\<or> y \\<in> set xs} =\n    propos (foldl f i xs)", "proof (induction xs rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Union> {propos y |y. y = i \\<or> y \\<in> set []} =\n    propos (foldl f i [])\n 2. \\<And>x xs.\n       \\<Union> {propos y |y. y = i \\<or> y \\<in> set xs} =\n       propos (foldl f i xs) \\<Longrightarrow>\n       \\<Union> {propos y |y. y = i \\<or> y \\<in> set (xs @ [x])} =\n       propos (foldl f i (xs @ [x]))", "case (snoc x xs)"], ["proof (state)\nthis:\n  \\<Union> {propos y |y. y = i \\<or> y \\<in> set xs} = propos (foldl f i xs)\n\ngoal (2 subgoals):\n 1. \\<Union> {propos y |y. y = i \\<or> y \\<in> set []} =\n    propos (foldl f i [])\n 2. \\<And>x xs.\n       \\<Union> {propos y |y. y = i \\<or> y \\<in> set xs} =\n       propos (foldl f i xs) \\<Longrightarrow>\n       \\<Union> {propos y |y. y = i \\<or> y \\<in> set (xs @ [x])} =\n       propos (foldl f i (xs @ [x]))", "have \"\\<Union>{propos y |y. y = i \\<or> y \\<in> set (xs@[x])} = \\<Union>{propos y |y. y = i \\<or> y \\<in> set xs} \\<union> propos x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> {propos y |y. y = i \\<or> y \\<in> set (xs @ [x])} =\n    \\<Union> {propos y |y. y = i \\<or> y \\<in> set xs} \\<union> propos x", "by auto"], ["proof (state)\nthis:\n  \\<Union> {propos y |y. y = i \\<or> y \\<in> set (xs @ [x])} =\n  \\<Union> {propos y |y. y = i \\<or> y \\<in> set xs} \\<union> propos x\n\ngoal (2 subgoals):\n 1. \\<Union> {propos y |y. y = i \\<or> y \\<in> set []} =\n    propos (foldl f i [])\n 2. \\<And>x xs.\n       \\<Union> {propos y |y. y = i \\<or> y \\<in> set xs} =\n       propos (foldl f i xs) \\<Longrightarrow>\n       \\<Union> {propos y |y. y = i \\<or> y \\<in> set (xs @ [x])} =\n       propos (foldl f i (xs @ [x]))", "also"], ["proof (state)\nthis:\n  \\<Union> {propos y |y. y = i \\<or> y \\<in> set (xs @ [x])} =\n  \\<Union> {propos y |y. y = i \\<or> y \\<in> set xs} \\<union> propos x\n\ngoal (2 subgoals):\n 1. \\<Union> {propos y |y. y = i \\<or> y \\<in> set []} =\n    propos (foldl f i [])\n 2. \\<And>x xs.\n       \\<Union> {propos y |y. y = i \\<or> y \\<in> set xs} =\n       propos (foldl f i xs) \\<Longrightarrow>\n       \\<Union> {propos y |y. y = i \\<or> y \\<in> set (xs @ [x])} =\n       propos (foldl f i (xs @ [x]))", "have \"\\<dots> = propos (foldl f i xs) \\<union> propos x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> {propos y |y. y = i \\<or> y \\<in> set xs} \\<union> propos x =\n    propos (foldl f i xs) \\<union> propos x", "using snoc"], ["proof (prove)\nusing this:\n  \\<Union> {propos y |y. y = i \\<or> y \\<in> set xs} = propos (foldl f i xs)\n\ngoal (1 subgoal):\n 1. \\<Union> {propos y |y. y = i \\<or> y \\<in> set xs} \\<union> propos x =\n    propos (foldl f i xs) \\<union> propos x", "by auto"], ["proof (state)\nthis:\n  \\<Union> {propos y |y. y = i \\<or> y \\<in> set xs} \\<union> propos x =\n  propos (foldl f i xs) \\<union> propos x\n\ngoal (2 subgoals):\n 1. \\<Union> {propos y |y. y = i \\<or> y \\<in> set []} =\n    propos (foldl f i [])\n 2. \\<And>x xs.\n       \\<Union> {propos y |y. y = i \\<or> y \\<in> set xs} =\n       propos (foldl f i xs) \\<Longrightarrow>\n       \\<Union> {propos y |y. y = i \\<or> y \\<in> set (xs @ [x])} =\n       propos (foldl f i (xs @ [x]))", "also"], ["proof (state)\nthis:\n  \\<Union> {propos y |y. y = i \\<or> y \\<in> set xs} \\<union> propos x =\n  propos (foldl f i xs) \\<union> propos x\n\ngoal (2 subgoals):\n 1. \\<Union> {propos y |y. y = i \\<or> y \\<in> set []} =\n    propos (foldl f i [])\n 2. \\<And>x xs.\n       \\<Union> {propos y |y. y = i \\<or> y \\<in> set xs} =\n       propos (foldl f i xs) \\<Longrightarrow>\n       \\<Union> {propos y |y. y = i \\<or> y \\<in> set (xs @ [x])} =\n       propos (foldl f i (xs @ [x]))", "have \"\\<dots> = propos (foldl f i (xs@[x]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. propos (foldl f i xs) \\<union> propos x = propos (foldl f i (xs @ [x]))", "using assms"], ["proof (prove)\nusing this:\n  propos (f ?x ?y) = propos ?x \\<union> propos ?y\n\ngoal (1 subgoal):\n 1. propos (foldl f i xs) \\<union> propos x = propos (foldl f i (xs @ [x]))", "by simp"], ["proof (state)\nthis:\n  propos (foldl f i xs) \\<union> propos x = propos (foldl f i (xs @ [x]))\n\ngoal (2 subgoals):\n 1. \\<Union> {propos y |y. y = i \\<or> y \\<in> set []} =\n    propos (foldl f i [])\n 2. \\<And>x xs.\n       \\<Union> {propos y |y. y = i \\<or> y \\<in> set xs} =\n       propos (foldl f i xs) \\<Longrightarrow>\n       \\<Union> {propos y |y. y = i \\<or> y \\<in> set (xs @ [x])} =\n       propos (foldl f i (xs @ [x]))", "finally"], ["proof (chain)\npicking this:\n  \\<Union> {propos y |y. y = i \\<or> y \\<in> set (xs @ [x])} =\n  propos (foldl f i (xs @ [x]))", "show ?case"], ["proof (prove)\nusing this:\n  \\<Union> {propos y |y. y = i \\<or> y \\<in> set (xs @ [x])} =\n  propos (foldl f i (xs @ [x]))\n\ngoal (1 subgoal):\n 1. \\<Union> {propos y |y. y = i \\<or> y \\<in> set (xs @ [x])} =\n    propos (foldl f i (xs @ [x]))", "."], ["proof (state)\nthis:\n  \\<Union> {propos y |y. y = i \\<or> y \\<in> set (xs @ [x])} =\n  propos (foldl f i (xs @ [x]))\n\ngoal (1 subgoal):\n 1. \\<Union> {propos y |y. y = i \\<or> y \\<in> set []} =\n    propos (foldl f i [])", "qed simp"], ["", "subsubsection \\<open>G-Subformulae\\<close>"], ["", "text \\<open>Notation for paper: mathds{G}\\<close>"], ["", "fun G_nested_propos :: \"'a ltl \\<Rightarrow>'a ltl set\" (\"\\<^bold>G\")\nwhere\n  \"\\<^bold>G (\\<phi> and \\<psi>) = \\<^bold>G \\<phi> \\<union> \\<^bold>G \\<psi>\"\n| \"\\<^bold>G (\\<phi> or \\<psi>) = \\<^bold>G \\<phi> \\<union> \\<^bold>G \\<psi>\"\n| \"\\<^bold>G (F \\<phi>) = \\<^bold>G \\<phi>\"\n| \"\\<^bold>G (G \\<phi>) = \\<^bold>G \\<phi> \\<union> {G \\<phi>}\"\n| \"\\<^bold>G (X \\<phi>) = \\<^bold>G \\<phi>\"\n| \"\\<^bold>G (\\<phi> U \\<psi>) = \\<^bold>G \\<phi> \\<union> \\<^bold>G \\<psi>\"\n| \"\\<^bold>G \\<phi> = {}\""], ["", "lemma G_nested_finite:\n  \"finite (\\<^bold>G \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (\\<^bold>G \\<phi>)", "by (induction \\<phi>) auto"], ["", "lemma G_nested_propos_alt_def:\n  \"\\<^bold>G \\<phi> = nested_propos \\<phi> \\<inter> {\\<psi>. (\\<exists>x. \\<psi> = G x)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<^bold>G \\<phi> =\n    nested_propos \\<phi> \\<inter> {\\<psi>. \\<exists>x. \\<psi> = G x}", "by (induction \\<phi>) auto"], ["", "lemma G_nested_propos_Only_G:\n  \"Only_G (\\<^bold>G \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Only_G (\\<^bold>G \\<phi>)", "unfolding G_nested_propos_alt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Only_G\n     (nested_propos \\<phi> \\<inter> {\\<psi>. \\<exists>x. \\<psi> = G x})", "by blast"], ["", "lemma G_not_in_G:\n  \"G \\<phi> \\<notin> \\<^bold>G \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<phi> \\<notin> \\<^bold>G \\<phi>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. G \\<phi> \\<notin> \\<^bold>G \\<phi>", "have \"\\<And>\\<chi>. \\<chi> \\<in> \\<^bold>G \\<phi> \\<Longrightarrow> size \\<phi> \\<ge> size \\<chi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<chi>.\n       \\<chi> \\<in> \\<^bold>G \\<phi> \\<Longrightarrow>\n       size \\<chi> \\<le> size \\<phi>", "by (induction \\<phi>) fastforce+"], ["proof (state)\nthis:\n  ?\\<chi> \\<in> \\<^bold>G \\<phi> \\<Longrightarrow>\n  size ?\\<chi> \\<le> size \\<phi>\n\ngoal (1 subgoal):\n 1. G \\<phi> \\<notin> \\<^bold>G \\<phi>", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?\\<chi> \\<in> \\<^bold>G \\<phi> \\<Longrightarrow>\n  size ?\\<chi> \\<le> size \\<phi>\n\ngoal (1 subgoal):\n 1. G \\<phi> \\<notin> \\<^bold>G \\<phi>", "by fastforce"], ["proof (state)\nthis:\n  G \\<phi> \\<notin> \\<^bold>G \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma G_subset_G:\n  \"\\<psi> \\<in> \\<^bold>G \\<phi> \\<Longrightarrow> \\<^bold>G \\<psi> \\<subseteq> \\<^bold>G \\<phi>\"\n  \"G \\<psi> \\<in> \\<^bold>G \\<phi> \\<Longrightarrow> \\<^bold>G \\<psi> \\<subseteq> \\<^bold>G \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<psi> \\<in> \\<^bold>G \\<phi> \\<Longrightarrow>\n     \\<^bold>G \\<psi> \\<subseteq> \\<^bold>G \\<phi>) &&&\n    (G \\<psi> \\<in> \\<^bold>G \\<phi> \\<Longrightarrow>\n     \\<^bold>G \\<psi> \\<subseteq> \\<^bold>G \\<phi>)", "by (induction \\<phi>) auto"], ["", "lemma \\<G>_properties:\n  assumes \"\\<G> \\<subseteq> \\<^bold>G \\<phi>\"\n  shows \\<G>_finite: \"finite \\<G>\" and \\<G>_elements: \"Only_G \\<G>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite \\<G> &&& Only_G \\<G>", "using assms G_nested_finite G_nested_propos_alt_def"], ["proof (prove)\nusing this:\n  \\<G> \\<subseteq> \\<^bold>G \\<phi>\n  finite (\\<^bold>G ?\\<phi>)\n  \\<^bold>G ?\\<phi> =\n  nested_propos ?\\<phi> \\<inter> {\\<psi>. \\<exists>x. \\<psi> = G x}\n\ngoal (1 subgoal):\n 1. finite \\<G> &&& Only_G \\<G>", "by (blast dest: finite_subset)+"], ["", "subsection \\<open>Propositional Implication and Equivalence\\<close>"], ["", "definition ltl_prop_implies :: \"['a ltl, 'a ltl] \\<Rightarrow> bool\" (infix \"\\<longrightarrow>\\<^sub>P\" 75)\nwhere\n  \"\\<phi> \\<longrightarrow>\\<^sub>P \\<psi> \\<equiv> \\<forall>\\<A>. \\<A> \\<Turnstile>\\<^sub>P \\<phi> \\<longrightarrow> \\<A> \\<Turnstile>\\<^sub>P \\<psi>\""], ["", "definition ltl_prop_equiv :: \"['a ltl, 'a ltl] \\<Rightarrow> bool\" (infix \"\\<equiv>\\<^sub>P\" 75)\nwhere\n  \"\\<phi> \\<equiv>\\<^sub>P \\<psi> \\<equiv> \\<forall>\\<A>. \\<A> \\<Turnstile>\\<^sub>P \\<phi> \\<longleftrightarrow> \\<A> \\<Turnstile>\\<^sub>P \\<psi>\""], ["", "lemma ltl_prop_implies_equiv:\n  \"\\<phi> \\<longrightarrow>\\<^sub>P \\<psi> \\<and> \\<psi> \\<longrightarrow>\\<^sub>P \\<phi> \\<longleftrightarrow> \\<phi> \\<equiv>\\<^sub>P \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<phi> \\<longrightarrow>\\<^sub>P \\<psi> \\<and>\n     \\<psi> \\<longrightarrow>\\<^sub>P \\<phi>) =\n    \\<phi> \\<equiv>\\<^sub>P \\<psi>", "unfolding ltl_prop_implies_def ltl_prop_equiv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>\\<A>.\n         \\<A> \\<Turnstile>\\<^sub>P \\<phi> \\<longrightarrow>\n         \\<A> \\<Turnstile>\\<^sub>P \\<psi>) \\<and>\n     (\\<forall>\\<A>.\n         \\<A> \\<Turnstile>\\<^sub>P \\<psi> \\<longrightarrow>\n         \\<A> \\<Turnstile>\\<^sub>P \\<phi>)) =\n    (\\<forall>\\<A>.\n        \\<A> \\<Turnstile>\\<^sub>P \\<phi> = \\<A> \\<Turnstile>\\<^sub>P \\<psi>)", "by meson"], ["", "lemma ltl_prop_equiv_equivp:\n  \"equivp (\\<equiv>\\<^sub>P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivp (\\<equiv>\\<^sub>P)", "by (blast intro: equivpI[of \"(\\<equiv>\\<^sub>P)\", simplified transp_def symp_def reflp_def ltl_prop_equiv_def])"], ["", "lemma [trans]:\n  \"\\<phi> \\<equiv>\\<^sub>P \\<psi> \\<Longrightarrow> \\<psi> \\<equiv>\\<^sub>P \\<chi> \\<Longrightarrow> \\<phi> \\<equiv>\\<^sub>P \\<chi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<equiv>\\<^sub>P \\<psi>;\n     \\<psi> \\<equiv>\\<^sub>P \\<chi>\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<equiv>\\<^sub>P \\<chi>", "using ltl_prop_equiv_equivp[THEN equivp_transp]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<equiv>\\<^sub>P ?y; ?y \\<equiv>\\<^sub>P ?z\\<rbrakk>\n  \\<Longrightarrow> ?x \\<equiv>\\<^sub>P ?z\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<equiv>\\<^sub>P \\<psi>;\n     \\<psi> \\<equiv>\\<^sub>P \\<chi>\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<equiv>\\<^sub>P \\<chi>", "."], ["", "subsubsection \\<open>Quotient Type for Propositional Equivalence\\<close>"], ["", "quotient_type 'a ltl_prop_equiv_quotient = \"'a ltl\" / \"(\\<equiv>\\<^sub>P)\"\n  morphisms Rep Abs"], ["proof (prove)\ngoal (1 subgoal):\n 1. equivp (\\<equiv>\\<^sub>P)", "by (simp add: ltl_prop_equiv_equivp)"], ["", "type_synonym 'a ltl\\<^sub>P = \"'a ltl_prop_equiv_quotient\""], ["", "instantiation ltl_prop_equiv_quotient :: (type) equal begin"], ["", "lift_definition ltl_prop_equiv_quotient_eq_test :: \"'a ltl\\<^sub>P \\<Rightarrow> 'a ltl\\<^sub>P \\<Rightarrow> bool\" is \"\\<lambda>x y. x \\<equiv>\\<^sub>P y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ltl1 ltl2 ltl3 ltl4.\n       \\<lbrakk>ltl1 \\<equiv>\\<^sub>P ltl2;\n        ltl3 \\<equiv>\\<^sub>P ltl4\\<rbrakk>\n       \\<Longrightarrow> ltl1 \\<equiv>\\<^sub>P ltl3 =\n                         ltl2 \\<equiv>\\<^sub>P ltl4", "by (metis ltl_prop_equiv_quotient.abs_eq_iff)"], ["", "definition\n  eq: \"equal_class.equal \\<equiv> ltl_prop_equiv_quotient_eq_test\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a ltl_prop_equiv_quotient, equal_class)", "by (standard; simp add: eq ltl_prop_equiv_quotient_eq_test.rep_eq, metis Quotient_ltl_prop_equiv_quotient Quotient_rel_rep)"], ["", "end"], ["", "lemma ltl\\<^sub>P_abs_rep: \"Abs (Rep \\<phi>) = \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs (Rep \\<phi>) = \\<phi>", "by (meson Quotient3_abs_rep Quotient3_ltl_prop_equiv_quotient)"], ["", "lift_definition ltl_prop_entails_abs :: \"'a ltl set \\<Rightarrow> 'a ltl\\<^sub>P \\<Rightarrow> bool\" (\"_ \\<up>\\<Turnstile>\\<^sub>P _\") is \"(\\<Turnstile>\\<^sub>P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>set ltl1 ltl2.\n       ltl1 \\<equiv>\\<^sub>P ltl2 \\<Longrightarrow>\n       set \\<Turnstile>\\<^sub>P ltl1 = set \\<Turnstile>\\<^sub>P ltl2", "by (simp add: ltl_prop_equiv_def)"], ["", "lift_definition ltl_prop_implies_abs :: \"'a ltl\\<^sub>P \\<Rightarrow> 'a ltl\\<^sub>P \\<Rightarrow> bool\" (\"_ \\<up>\\<longrightarrow>\\<^sub>P _\") is \"(\\<longrightarrow>\\<^sub>P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ltl1 ltl2 ltl3 ltl4.\n       \\<lbrakk>ltl1 \\<equiv>\\<^sub>P ltl2;\n        ltl3 \\<equiv>\\<^sub>P ltl4\\<rbrakk>\n       \\<Longrightarrow> ltl1 \\<longrightarrow>\\<^sub>P ltl3 =\n                         ltl2 \\<longrightarrow>\\<^sub>P ltl4", "by (simp add: ltl_prop_equiv_def ltl_prop_implies_def)"], ["", "subsubsection \\<open>Propositional Equivalence implies LTL Equivalence\\<close>"], ["", "lemma ltl_prop_implication_implies_ltl_implication:\n  \"w \\<Turnstile> \\<phi> \\<Longrightarrow> \\<phi> \\<longrightarrow>\\<^sub>P \\<psi> \\<Longrightarrow> w \\<Turnstile> \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>w \\<Turnstile> \\<phi>;\n     \\<phi> \\<longrightarrow>\\<^sub>P \\<psi>\\<rbrakk>\n    \\<Longrightarrow> w \\<Turnstile> \\<psi>", "using [[unfold_abs_def = false]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>w \\<Turnstile> \\<phi>;\n     \\<phi> \\<longrightarrow>\\<^sub>P \\<psi>\\<rbrakk>\n    \\<Longrightarrow> w \\<Turnstile> \\<psi>", "unfolding ltl_prop_implies_def ltl_models_equiv_prop_entailment"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Collect ((\\<Turnstile>) w) \\<Turnstile>\\<^sub>P \\<phi>;\n     \\<forall>\\<A>.\n        \\<A> \\<Turnstile>\\<^sub>P \\<phi> \\<longrightarrow>\n        \\<A> \\<Turnstile>\\<^sub>P \\<psi>\\<rbrakk>\n    \\<Longrightarrow> Collect ((\\<Turnstile>) w) \\<Turnstile>\\<^sub>P \\<psi>", "by simp"], ["", "lemma ltl_prop_equiv_implies_ltl_equiv:\n  \"\\<phi> \\<equiv>\\<^sub>P \\<psi> \\<Longrightarrow> w \\<Turnstile> \\<phi> = w \\<Turnstile> \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<equiv>\\<^sub>P \\<psi> \\<Longrightarrow>\n    w \\<Turnstile> \\<phi> = w \\<Turnstile> \\<psi>", "using ltl_prop_implication_implies_ltl_implication ltl_prop_implies_equiv"], ["proof (prove)\nusing this:\n  \\<lbrakk>?w \\<Turnstile> ?\\<phi>;\n   ?\\<phi> \\<longrightarrow>\\<^sub>P ?\\<psi>\\<rbrakk>\n  \\<Longrightarrow> ?w \\<Turnstile> ?\\<psi>\n  (?\\<phi> \\<longrightarrow>\\<^sub>P ?\\<psi> \\<and>\n   ?\\<psi> \\<longrightarrow>\\<^sub>P ?\\<phi>) =\n  ?\\<phi> \\<equiv>\\<^sub>P ?\\<psi>\n\ngoal (1 subgoal):\n 1. \\<phi> \\<equiv>\\<^sub>P \\<psi> \\<Longrightarrow>\n    w \\<Turnstile> \\<phi> = w \\<Turnstile> \\<psi>", "by blast"], ["", "subsection \\<open>Substitution\\<close>"], ["", "fun subst :: \"'a ltl \\<Rightarrow> ('a ltl \\<rightharpoonup> 'a ltl) \\<Rightarrow> 'a ltl\"\nwhere\n  \"subst true m = true\"\n| \"subst false m = false\"\n| \"subst (\\<phi> and \\<psi>) m = subst \\<phi> m and subst \\<psi> m\"\n| \"subst (\\<phi> or \\<psi>) m = subst \\<phi> m or subst \\<psi> m\"\n| \"subst \\<phi> m = (case m \\<phi> of Some \\<phi>' \\<Rightarrow> \\<phi>' | None \\<Rightarrow> \\<phi>)\""], ["", "text \\<open>Based on Uwe Schoening's Translation Lemma (Logic for CS, p. 54)\\<close>"], ["", "lemma ltl_prop_equiv_subst_S:\n  \"S \\<Turnstile>\\<^sub>P subst \\<phi> m = ((S - dom m) \\<union> {\\<chi> | \\<chi> \\<chi>'. \\<chi> \\<in> dom m \\<and> m \\<chi> = Some \\<chi>' \\<and> S \\<Turnstile>\\<^sub>P \\<chi>'}) \\<Turnstile>\\<^sub>P \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<Turnstile>\\<^sub>P subst \\<phi> m =\n    (S - dom m \\<union>\n     {uu_.\n      \\<exists>\\<chi> \\<chi>'.\n         uu_ = \\<chi> \\<and>\n         \\<chi> \\<in> dom m \\<and>\n         m \\<chi> = Some \\<chi>' \\<and>\n         S \\<Turnstile>\\<^sub>P \\<chi>'}) \\<Turnstile>\\<^sub>P\n    \\<phi>", "by (induction \\<phi>) (auto split: option.split)"], ["", "lemma subst_respects_ltl_prop_entailment:\n  \"\\<phi> \\<longrightarrow>\\<^sub>P \\<psi> \\<Longrightarrow> subst \\<phi> m \\<longrightarrow>\\<^sub>P subst \\<psi> m\"\n  \"\\<phi> \\<equiv>\\<^sub>P \\<psi> \\<Longrightarrow> subst \\<phi> m \\<equiv>\\<^sub>P subst \\<psi> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<phi> \\<longrightarrow>\\<^sub>P \\<psi> \\<Longrightarrow>\n     subst \\<phi> m \\<longrightarrow>\\<^sub>P subst \\<psi> m) &&&\n    (\\<phi> \\<equiv>\\<^sub>P \\<psi> \\<Longrightarrow>\n     subst \\<phi> m \\<equiv>\\<^sub>P subst \\<psi> m)", "unfolding ltl_prop_equiv_def ltl_prop_implies_def ltl_prop_equiv_subst_S"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>\\<A>.\n        \\<A> \\<Turnstile>\\<^sub>P \\<phi> \\<longrightarrow>\n        \\<A> \\<Turnstile>\\<^sub>P \\<psi> \\<Longrightarrow>\n     \\<forall>\\<A>.\n        (\\<A> - dom m \\<union>\n         {uu_.\n          \\<exists>\\<chi> \\<chi>'.\n             uu_ = \\<chi> \\<and>\n             \\<chi> \\<in> dom m \\<and>\n             m \\<chi> = Some \\<chi>' \\<and>\n             \\<A> \\<Turnstile>\\<^sub>P \\<chi>'}) \\<Turnstile>\\<^sub>P\n        \\<phi> \\<longrightarrow>\n        (\\<A> - dom m \\<union>\n         {uu_.\n          \\<exists>\\<chi> \\<chi>'.\n             uu_ = \\<chi> \\<and>\n             \\<chi> \\<in> dom m \\<and>\n             m \\<chi> = Some \\<chi>' \\<and>\n             \\<A> \\<Turnstile>\\<^sub>P \\<chi>'}) \\<Turnstile>\\<^sub>P\n        \\<psi>) &&&\n    (\\<forall>\\<A>.\n        \\<A> \\<Turnstile>\\<^sub>P \\<phi> =\n        \\<A> \\<Turnstile>\\<^sub>P \\<psi> \\<Longrightarrow>\n     \\<forall>\\<A>.\n        (\\<A> - dom m \\<union>\n         {uu_.\n          \\<exists>\\<chi> \\<chi>'.\n             uu_ = \\<chi> \\<and>\n             \\<chi> \\<in> dom m \\<and>\n             m \\<chi> = Some \\<chi>' \\<and>\n             \\<A> \\<Turnstile>\\<^sub>P \\<chi>'}) \\<Turnstile>\\<^sub>P\n        \\<phi> =\n        (\\<A> - dom m \\<union>\n         {uu_.\n          \\<exists>\\<chi> \\<chi>'.\n             uu_ = \\<chi> \\<and>\n             \\<chi> \\<in> dom m \\<and>\n             m \\<chi> = Some \\<chi>' \\<and>\n             \\<A> \\<Turnstile>\\<^sub>P \\<chi>'}) \\<Turnstile>\\<^sub>P\n        \\<psi>)", "by blast+"], ["", "lemma subst_respects_ltl_prop_entailment_generalized:\n  \"(\\<And>\\<A>. (\\<And>x. x \\<in> S \\<Longrightarrow> \\<A> \\<Turnstile>\\<^sub>P x) \\<Longrightarrow> \\<A> \\<Turnstile>\\<^sub>P y) \\<Longrightarrow> (\\<And>x. x \\<in> S \\<Longrightarrow> \\<A> \\<Turnstile>\\<^sub>P subst x m) \\<Longrightarrow> \\<A> \\<Turnstile>\\<^sub>P subst y m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<A>.\n                (\\<And>x.\n                    x \\<in> S \\<Longrightarrow>\n                    \\<A> \\<Turnstile>\\<^sub>P x) \\<Longrightarrow>\n                \\<A> \\<Turnstile>\\<^sub>P y;\n     \\<And>x.\n        x \\<in> S \\<Longrightarrow>\n        \\<A> \\<Turnstile>\\<^sub>P subst x m\\<rbrakk>\n    \\<Longrightarrow> \\<A> \\<Turnstile>\\<^sub>P subst y m", "unfolding ltl_prop_equiv_subst_S"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<A>.\n                (\\<And>x.\n                    x \\<in> S \\<Longrightarrow>\n                    \\<A> \\<Turnstile>\\<^sub>P x) \\<Longrightarrow>\n                \\<A> \\<Turnstile>\\<^sub>P y;\n     \\<And>x.\n        x \\<in> S \\<Longrightarrow>\n        (\\<A> - dom m \\<union>\n         {uu_.\n          \\<exists>\\<chi> \\<chi>'.\n             uu_ = \\<chi> \\<and>\n             \\<chi> \\<in> dom m \\<and>\n             m \\<chi> = Some \\<chi>' \\<and>\n             \\<A> \\<Turnstile>\\<^sub>P \\<chi>'}) \\<Turnstile>\\<^sub>P\n        x\\<rbrakk>\n    \\<Longrightarrow> (\\<A> - dom m \\<union>\n                       {uu_.\n                        \\<exists>\\<chi> \\<chi>'.\n                           uu_ = \\<chi> \\<and>\n                           \\<chi> \\<in> dom m \\<and>\n                           m \\<chi> = Some \\<chi>' \\<and>\n                           \\<A> \\<Turnstile>\\<^sub>P\n                           \\<chi>'}) \\<Turnstile>\\<^sub>P\n                      y", "by simp"], ["", "lemma decomposable_function_subst:\n  \"\\<lbrakk>f true = true; f false = false; \\<And>\\<phi> \\<psi>. f (\\<phi> and \\<psi>) = f \\<phi> and f \\<psi>; \\<And>\\<phi> \\<psi>. f (\\<phi> or \\<psi>) = f \\<phi> or f \\<psi>\\<rbrakk> \\<Longrightarrow> f \\<phi> = subst \\<phi> (\\<lambda>\\<chi>. Some (f \\<chi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f true = true; f false = false;\n     \\<And>\\<phi> \\<psi>. f (\\<phi> and \\<psi>) = f \\<phi> and f \\<psi>;\n     \\<And>\\<phi> \\<psi>.\n        f (\\<phi> or \\<psi>) = f \\<phi> or f \\<psi>\\<rbrakk>\n    \\<Longrightarrow> f \\<phi> =\n                      subst \\<phi> (\\<lambda>\\<chi>. Some (f \\<chi>))", "by (induction \\<phi>) auto"], ["", "subsection \\<open>Additional Operators\\<close>"], ["", "subsubsection \\<open>And\\<close>"], ["", "lemma foldl_LTLAnd_prop_entailment:\n  \"S \\<Turnstile>\\<^sub>P foldl LTLAnd i xs = (S \\<Turnstile>\\<^sub>P i \\<and> (\\<forall>y \\<in> set xs. S \\<Turnstile>\\<^sub>P y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<Turnstile>\\<^sub>P foldl LTLAnd i xs =\n    (S \\<Turnstile>\\<^sub>P i \\<and>\n     (\\<forall>y\\<in>set xs. S \\<Turnstile>\\<^sub>P y))", "by (induction xs arbitrary: i) auto"], ["", "fun And :: \"'a ltl list \\<Rightarrow> 'a ltl\"\nwhere\n  \"And [] = true\"\n| \"And (x#xs) = foldl LTLAnd x xs\""], ["", "lemma And_prop_entailment:\n  \"S \\<Turnstile>\\<^sub>P And xs = (\\<forall>x \\<in> set xs. S \\<Turnstile>\\<^sub>P x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<Turnstile>\\<^sub>P And xs =\n    (\\<forall>x\\<in>set xs. S \\<Turnstile>\\<^sub>P x)", "using foldl_LTLAnd_prop_entailment"], ["proof (prove)\nusing this:\n  ?S \\<Turnstile>\\<^sub>P foldl LTLAnd ?i ?xs =\n  (?S \\<Turnstile>\\<^sub>P ?i \\<and>\n   (\\<forall>y\\<in>set ?xs. ?S \\<Turnstile>\\<^sub>P y))\n\ngoal (1 subgoal):\n 1. S \\<Turnstile>\\<^sub>P And xs =\n    (\\<forall>x\\<in>set xs. S \\<Turnstile>\\<^sub>P x)", "by (cases xs) auto"], ["", "lemma And_propos:\n  \"propos (And xs) = \\<Union>{propos x| x. x \\<in> set xs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. propos (And xs) = \\<Union> {propos x |x. x \\<in> set xs}", "proof (cases xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    propos (And xs) = \\<Union> {propos x |x. x \\<in> set xs}\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       propos (And xs) = \\<Union> {propos x |x. x \\<in> set xs}", "case Nil"], ["proof (state)\nthis:\n  xs = []\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    propos (And xs) = \\<Union> {propos x |x. x \\<in> set xs}\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       propos (And xs) = \\<Union> {propos x |x. x \\<in> set xs}", "thus ?thesis"], ["proof (prove)\nusing this:\n  xs = []\n\ngoal (1 subgoal):\n 1. propos (And xs) = \\<Union> {propos x |x. x \\<in> set xs}", "by simp"], ["proof (state)\nthis:\n  propos (And xs) = \\<Union> {propos x |x. x \\<in> set xs}\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       propos (And xs) = \\<Union> {propos x |x. x \\<in> set xs}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       propos (And xs) = \\<Union> {propos x |x. x \\<in> set xs}", "case (Cons x xs)"], ["proof (state)\nthis:\n  xs = x # xs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       propos (And xs) = \\<Union> {propos x |x. x \\<in> set xs}", "thus ?thesis"], ["proof (prove)\nusing this:\n  xs = x # xs\n\ngoal (1 subgoal):\n 1. propos (And xs) = \\<Union> {propos x |x. x \\<in> set xs}", "using propos_foldl[of LTLAnd x]"], ["proof (prove)\nusing this:\n  xs = x # xs\n  (\\<And>x y.\n      propos (x and y) = propos x \\<union> propos y) \\<Longrightarrow>\n  \\<Union> {propos y |y. y = x \\<or> y \\<in> set ?xs} =\n  propos (foldl LTLAnd x ?xs)\n\ngoal (1 subgoal):\n 1. propos (And xs) = \\<Union> {propos x |x. x \\<in> set xs}", "by auto"], ["proof (state)\nthis:\n  propos (And xs) = \\<Union> {propos x |x. x \\<in> set xs}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma And_semantics:\n  \"w \\<Turnstile> And xs = (\\<forall>x \\<in> set xs. w \\<Turnstile> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<Turnstile> And xs = (\\<forall>x\\<in>set xs. w \\<Turnstile> x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. w \\<Turnstile> And xs = (\\<forall>x\\<in>set xs. w \\<Turnstile> x)", "have And_propos': \"\\<And>x. x \\<in> set xs \\<Longrightarrow> propos x \\<subseteq> propos (And xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set xs \\<Longrightarrow> propos x \\<subseteq> propos (And xs)", "using And_propos"], ["proof (prove)\nusing this:\n  propos (And ?xs) = \\<Union> {propos x |x. x \\<in> set ?xs}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set xs \\<Longrightarrow> propos x \\<subseteq> propos (And xs)", "by blast"], ["proof (state)\nthis:\n  ?x \\<in> set xs \\<Longrightarrow> propos ?x \\<subseteq> propos (And xs)\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> And xs = (\\<forall>x\\<in>set xs. w \\<Turnstile> x)", "have \"w \\<Turnstile> And xs = {\\<chi>. \\<chi> \\<in> propos (And xs) \\<and> w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P (And xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<Turnstile> And xs =\n    {\\<chi> \\<in> propos (And xs).\n     w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n    And xs", "using ltl_models_equiv_prop_entailment LTL_prop_entailment_restrict_to_propos"], ["proof (prove)\nusing this:\n  ?w \\<Turnstile> ?\\<phi> =\n  {\\<chi>. ?w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P ?\\<phi>\n  ?S \\<Turnstile>\\<^sub>P ?\\<phi> =\n  (?S \\<inter> propos ?\\<phi>) \\<Turnstile>\\<^sub>P ?\\<phi>\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> And xs =\n    {\\<chi> \\<in> propos (And xs).\n     w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n    And xs", "by blast"], ["proof (state)\nthis:\n  w \\<Turnstile> And xs =\n  {\\<chi> \\<in> propos (And xs). w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n  And xs\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> And xs = (\\<forall>x\\<in>set xs. w \\<Turnstile> x)", "also"], ["proof (state)\nthis:\n  w \\<Turnstile> And xs =\n  {\\<chi> \\<in> propos (And xs). w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n  And xs\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> And xs = (\\<forall>x\\<in>set xs. w \\<Turnstile> x)", "have \"\\<dots> = (\\<forall>x \\<in> set xs. {\\<chi>. \\<chi> \\<in> propos (And xs) \\<and> w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {\\<chi> \\<in> propos (And xs).\n     w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n    And xs =\n    (\\<forall>x\\<in>set xs.\n        {\\<chi> \\<in> propos (And xs).\n         w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n        x)", "using And_prop_entailment"], ["proof (prove)\nusing this:\n  ?S \\<Turnstile>\\<^sub>P And ?xs =\n  (\\<forall>x\\<in>set ?xs. ?S \\<Turnstile>\\<^sub>P x)\n\ngoal (1 subgoal):\n 1. {\\<chi> \\<in> propos (And xs).\n     w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n    And xs =\n    (\\<forall>x\\<in>set xs.\n        {\\<chi> \\<in> propos (And xs).\n         w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n        x)", "by auto"], ["proof (state)\nthis:\n  {\\<chi> \\<in> propos (And xs). w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n  And xs =\n  (\\<forall>x\\<in>set xs.\n      {\\<chi> \\<in> propos (And xs).\n       w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n      x)\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> And xs = (\\<forall>x\\<in>set xs. w \\<Turnstile> x)", "also"], ["proof (state)\nthis:\n  {\\<chi> \\<in> propos (And xs). w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n  And xs =\n  (\\<forall>x\\<in>set xs.\n      {\\<chi> \\<in> propos (And xs).\n       w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n      x)\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> And xs = (\\<forall>x\\<in>set xs. w \\<Turnstile> x)", "have \"\\<dots> = (\\<forall>x \\<in> set xs. {\\<chi>. \\<chi> \\<in> propos x \\<and> w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>set xs.\n        {\\<chi> \\<in> propos (And xs).\n         w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n        x) =\n    (\\<forall>x\\<in>set xs.\n        {\\<chi> \\<in> propos x. w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n        x)", "using LTL_prop_entailment_restrict_to_propos And_propos'"], ["proof (prove)\nusing this:\n  ?S \\<Turnstile>\\<^sub>P ?\\<phi> =\n  (?S \\<inter> propos ?\\<phi>) \\<Turnstile>\\<^sub>P ?\\<phi>\n  ?x \\<in> set xs \\<Longrightarrow> propos ?x \\<subseteq> propos (And xs)\n\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>set xs.\n        {\\<chi> \\<in> propos (And xs).\n         w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n        x) =\n    (\\<forall>x\\<in>set xs.\n        {\\<chi> \\<in> propos x. w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n        x)", "by blast"], ["proof (state)\nthis:\n  (\\<forall>x\\<in>set xs.\n      {\\<chi> \\<in> propos (And xs).\n       w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n      x) =\n  (\\<forall>x\\<in>set xs.\n      {\\<chi> \\<in> propos x. w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P x)\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> And xs = (\\<forall>x\\<in>set xs. w \\<Turnstile> x)", "also"], ["proof (state)\nthis:\n  (\\<forall>x\\<in>set xs.\n      {\\<chi> \\<in> propos (And xs).\n       w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n      x) =\n  (\\<forall>x\\<in>set xs.\n      {\\<chi> \\<in> propos x. w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P x)\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> And xs = (\\<forall>x\\<in>set xs. w \\<Turnstile> x)", "have \"\\<dots> = (\\<forall>x \\<in> set xs. w \\<Turnstile> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>set xs.\n        {\\<chi> \\<in> propos x. w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n        x) =\n    (\\<forall>x\\<in>set xs. w \\<Turnstile> x)", "using ltl_models_equiv_prop_entailment LTL_prop_entailment_restrict_to_propos"], ["proof (prove)\nusing this:\n  ?w \\<Turnstile> ?\\<phi> =\n  {\\<chi>. ?w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P ?\\<phi>\n  ?S \\<Turnstile>\\<^sub>P ?\\<phi> =\n  (?S \\<inter> propos ?\\<phi>) \\<Turnstile>\\<^sub>P ?\\<phi>\n\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>set xs.\n        {\\<chi> \\<in> propos x. w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n        x) =\n    (\\<forall>x\\<in>set xs. w \\<Turnstile> x)", "by blast"], ["proof (state)\nthis:\n  (\\<forall>x\\<in>set xs.\n      {\\<chi> \\<in> propos x. w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n      x) =\n  (\\<forall>x\\<in>set xs. w \\<Turnstile> x)\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> And xs = (\\<forall>x\\<in>set xs. w \\<Turnstile> x)", "finally"], ["proof (chain)\npicking this:\n  w \\<Turnstile> And xs = (\\<forall>x\\<in>set xs. w \\<Turnstile> x)", "show ?thesis"], ["proof (prove)\nusing this:\n  w \\<Turnstile> And xs = (\\<forall>x\\<in>set xs. w \\<Turnstile> x)\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> And xs = (\\<forall>x\\<in>set xs. w \\<Turnstile> x)", "."], ["proof (state)\nthis:\n  w \\<Turnstile> And xs = (\\<forall>x\\<in>set xs. w \\<Turnstile> x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma And_append_syntactic:\n  \"xs \\<noteq> [] \\<Longrightarrow> And (xs @ ys) = And ((And xs)#ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> And (xs @ ys) = And (And xs # ys)", "by (induction xs rule: list_nonempty_induct) simp+"], ["", "lemma And_append_S:\n  \"S \\<Turnstile>\\<^sub>P And (xs @ ys) = S \\<Turnstile>\\<^sub>P And xs and And ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<Turnstile>\\<^sub>P And (xs @ ys) =\n    S \\<Turnstile>\\<^sub>P And xs and And ys", "using And_prop_entailment[of S]"], ["proof (prove)\nusing this:\n  S \\<Turnstile>\\<^sub>P And ?xs =\n  (\\<forall>x\\<in>set ?xs. S \\<Turnstile>\\<^sub>P x)\n\ngoal (1 subgoal):\n 1. S \\<Turnstile>\\<^sub>P And (xs @ ys) =\n    S \\<Turnstile>\\<^sub>P And xs and And ys", "by auto"], ["", "lemma And_append:\n  \"And (xs @ ys) \\<equiv>\\<^sub>P And xs and And ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. And (xs @ ys) \\<equiv>\\<^sub>P And xs and And ys", "unfolding ltl_prop_equiv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<A>.\n       \\<A> \\<Turnstile>\\<^sub>P And (xs @ ys) =\n       \\<A> \\<Turnstile>\\<^sub>P And xs and And ys", "using And_append_S"], ["proof (prove)\nusing this:\n  ?S \\<Turnstile>\\<^sub>P And (?xs @ ?ys) =\n  ?S \\<Turnstile>\\<^sub>P And ?xs and And ?ys\n\ngoal (1 subgoal):\n 1. \\<forall>\\<A>.\n       \\<A> \\<Turnstile>\\<^sub>P And (xs @ ys) =\n       \\<A> \\<Turnstile>\\<^sub>P And xs and And ys", "by blast"], ["", "subsubsection \\<open>Lifted Variant\\<close>"], ["", "lift_definition and_abs :: \"'a ltl\\<^sub>P \\<Rightarrow> 'a ltl\\<^sub>P \\<Rightarrow> 'a ltl\\<^sub>P\" (\"_ \\<up>and _\") is \"\\<lambda>x y. x and y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ltl1 ltl2 ltl3 ltl4.\n       \\<lbrakk>ltl1 \\<equiv>\\<^sub>P ltl2;\n        ltl3 \\<equiv>\\<^sub>P ltl4\\<rbrakk>\n       \\<Longrightarrow> ltl1 and ltl3 \\<equiv>\\<^sub>P ltl2 and ltl4", "unfolding ltl_prop_equiv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ltl1 ltl2 ltl3 ltl4.\n       \\<lbrakk>\\<forall>\\<A>.\n                   \\<A> \\<Turnstile>\\<^sub>P ltl1 =\n                   \\<A> \\<Turnstile>\\<^sub>P ltl2;\n        \\<forall>\\<A>.\n           \\<A> \\<Turnstile>\\<^sub>P ltl3 =\n           \\<A> \\<Turnstile>\\<^sub>P ltl4\\<rbrakk>\n       \\<Longrightarrow> \\<forall>\\<A>.\n                            \\<A> \\<Turnstile>\\<^sub>P ltl1 and ltl3 =\n                            \\<A> \\<Turnstile>\\<^sub>P ltl2 and ltl4", "by simp"], ["", "fun And_abs :: \"'a ltl\\<^sub>P list \\<Rightarrow> 'a ltl\\<^sub>P\" (\"\\<up>And\")\nwhere\n  \"\\<up>And xs = foldl and_abs (Abs true) xs\""], ["", "lemma foldl_LTLAnd_prop_entailment_abs:\n  \"S \\<up>\\<Turnstile>\\<^sub>P foldl and_abs i xs = (S \\<up>\\<Turnstile>\\<^sub>P i \\<and> (\\<forall>y\\<in>set xs. S \\<up>\\<Turnstile>\\<^sub>P y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<up>\\<Turnstile>\\<^sub>P foldl and_abs i xs =\n    (S \\<up>\\<Turnstile>\\<^sub>P i \\<and>\n     (\\<forall>y\\<in>set xs. S \\<up>\\<Turnstile>\\<^sub>P y))", "by (induction xs arbitrary: i)\n     (simp_all add: and_abs_def ltl_prop_entails_abs.abs_eq, metis ltl_prop_entails_abs.rep_eq)"], ["", "lemma And_prop_entailment_abs:\n  \"S \\<up>\\<Turnstile>\\<^sub>P \\<up>And xs = (\\<forall>x \\<in> set xs. S \\<up>\\<Turnstile>\\<^sub>P x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<up>\\<Turnstile>\\<^sub>P \\<up>And xs =\n    (\\<forall>x\\<in>set xs. S \\<up>\\<Turnstile>\\<^sub>P x)", "by (simp add: foldl_LTLAnd_prop_entailment_abs ltl_prop_entails_abs.abs_eq)"], ["", "lemma and_abs_conjunction:\n  \"S \\<up>\\<Turnstile>\\<^sub>P \\<phi> \\<up>and \\<psi> \\<longleftrightarrow> S \\<up>\\<Turnstile>\\<^sub>P \\<phi> \\<and> S \\<up>\\<Turnstile>\\<^sub>P \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<up>\\<Turnstile>\\<^sub>P \\<phi> \\<up>and \\<psi> =\n    (S \\<up>\\<Turnstile>\\<^sub>P \\<phi> \\<and>\n     S \\<up>\\<Turnstile>\\<^sub>P \\<psi>)", "by (metis and_abs.abs_eq ltl\\<^sub>P_abs_rep ltl_prop_entailment.simps(3) ltl_prop_entails_abs.abs_eq)"], ["", "subsubsection \\<open>Or\\<close>"], ["", "lemma foldl_LTLOr_prop_entailment:\n  \"S \\<Turnstile>\\<^sub>P foldl LTLOr i xs = (S \\<Turnstile>\\<^sub>P i \\<or> (\\<exists>y \\<in> set xs. S \\<Turnstile>\\<^sub>P y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<Turnstile>\\<^sub>P foldl LTLOr i xs =\n    (S \\<Turnstile>\\<^sub>P i \\<or>\n     (\\<exists>y\\<in>set xs. S \\<Turnstile>\\<^sub>P y))", "by (induction xs arbitrary: i) auto"], ["", "fun Or :: \"'a ltl list \\<Rightarrow> 'a ltl\"\nwhere\n  \"Or [] = false\"\n| \"Or (x#xs) = foldl LTLOr x xs\""], ["", "lemma Or_prop_entailment:\n  \"S \\<Turnstile>\\<^sub>P Or xs = (\\<exists>x \\<in> set xs. S \\<Turnstile>\\<^sub>P x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<Turnstile>\\<^sub>P Or xs =\n    (\\<exists>x\\<in>set xs. S \\<Turnstile>\\<^sub>P x)", "using foldl_LTLOr_prop_entailment"], ["proof (prove)\nusing this:\n  ?S \\<Turnstile>\\<^sub>P foldl LTLOr ?i ?xs =\n  (?S \\<Turnstile>\\<^sub>P ?i \\<or>\n   (\\<exists>y\\<in>set ?xs. ?S \\<Turnstile>\\<^sub>P y))\n\ngoal (1 subgoal):\n 1. S \\<Turnstile>\\<^sub>P Or xs =\n    (\\<exists>x\\<in>set xs. S \\<Turnstile>\\<^sub>P x)", "by (cases xs) auto"], ["", "lemma Or_propos:\n  \"propos (Or xs) = \\<Union>{propos x| x. x \\<in> set xs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. propos (Or xs) = \\<Union> {propos x |x. x \\<in> set xs}", "proof (cases xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    propos (Or xs) = \\<Union> {propos x |x. x \\<in> set xs}\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       propos (Or xs) = \\<Union> {propos x |x. x \\<in> set xs}", "case Nil"], ["proof (state)\nthis:\n  xs = []\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    propos (Or xs) = \\<Union> {propos x |x. x \\<in> set xs}\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       propos (Or xs) = \\<Union> {propos x |x. x \\<in> set xs}", "thus ?thesis"], ["proof (prove)\nusing this:\n  xs = []\n\ngoal (1 subgoal):\n 1. propos (Or xs) = \\<Union> {propos x |x. x \\<in> set xs}", "by simp"], ["proof (state)\nthis:\n  propos (Or xs) = \\<Union> {propos x |x. x \\<in> set xs}\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       propos (Or xs) = \\<Union> {propos x |x. x \\<in> set xs}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       propos (Or xs) = \\<Union> {propos x |x. x \\<in> set xs}", "case (Cons x xs)"], ["proof (state)\nthis:\n  xs = x # xs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       propos (Or xs) = \\<Union> {propos x |x. x \\<in> set xs}", "thus ?thesis"], ["proof (prove)\nusing this:\n  xs = x # xs\n\ngoal (1 subgoal):\n 1. propos (Or xs) = \\<Union> {propos x |x. x \\<in> set xs}", "using propos_foldl[of LTLOr x]"], ["proof (prove)\nusing this:\n  xs = x # xs\n  (\\<And>x y.\n      propos (x or y) = propos x \\<union> propos y) \\<Longrightarrow>\n  \\<Union> {propos y |y. y = x \\<or> y \\<in> set ?xs} =\n  propos (foldl LTLOr x ?xs)\n\ngoal (1 subgoal):\n 1. propos (Or xs) = \\<Union> {propos x |x. x \\<in> set xs}", "by auto"], ["proof (state)\nthis:\n  propos (Or xs) = \\<Union> {propos x |x. x \\<in> set xs}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Or_semantics:\n  \"w \\<Turnstile> Or xs = (\\<exists>x \\<in> set xs. w \\<Turnstile> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<Turnstile> Or xs = (\\<exists>x\\<in>set xs. w \\<Turnstile> x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. w \\<Turnstile> Or xs = (\\<exists>x\\<in>set xs. w \\<Turnstile> x)", "have Or_propos': \"\\<And>x. x \\<in> set xs \\<Longrightarrow> propos x \\<subseteq> propos (Or xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set xs \\<Longrightarrow> propos x \\<subseteq> propos (Or xs)", "using Or_propos"], ["proof (prove)\nusing this:\n  propos (Or ?xs) = \\<Union> {propos x |x. x \\<in> set ?xs}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set xs \\<Longrightarrow> propos x \\<subseteq> propos (Or xs)", "by blast"], ["proof (state)\nthis:\n  ?x \\<in> set xs \\<Longrightarrow> propos ?x \\<subseteq> propos (Or xs)\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> Or xs = (\\<exists>x\\<in>set xs. w \\<Turnstile> x)", "have \"w \\<Turnstile> Or xs = {\\<chi>. \\<chi> \\<in> propos (Or xs) \\<and> w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P (Or xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<Turnstile> Or xs =\n    {\\<chi> \\<in> propos (Or xs).\n     w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n    Or xs", "using ltl_models_equiv_prop_entailment LTL_prop_entailment_restrict_to_propos"], ["proof (prove)\nusing this:\n  ?w \\<Turnstile> ?\\<phi> =\n  {\\<chi>. ?w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P ?\\<phi>\n  ?S \\<Turnstile>\\<^sub>P ?\\<phi> =\n  (?S \\<inter> propos ?\\<phi>) \\<Turnstile>\\<^sub>P ?\\<phi>\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> Or xs =\n    {\\<chi> \\<in> propos (Or xs).\n     w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n    Or xs", "by blast"], ["proof (state)\nthis:\n  w \\<Turnstile> Or xs =\n  {\\<chi> \\<in> propos (Or xs). w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n  Or xs\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> Or xs = (\\<exists>x\\<in>set xs. w \\<Turnstile> x)", "also"], ["proof (state)\nthis:\n  w \\<Turnstile> Or xs =\n  {\\<chi> \\<in> propos (Or xs). w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n  Or xs\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> Or xs = (\\<exists>x\\<in>set xs. w \\<Turnstile> x)", "have \"\\<dots> = (\\<exists>x \\<in> set xs. {\\<chi>. \\<chi> \\<in> propos (Or xs) \\<and> w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {\\<chi> \\<in> propos (Or xs).\n     w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n    Or xs =\n    (\\<exists>x\\<in>set xs.\n        {\\<chi> \\<in> propos (Or xs).\n         w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n        x)", "using Or_prop_entailment"], ["proof (prove)\nusing this:\n  ?S \\<Turnstile>\\<^sub>P Or ?xs =\n  (\\<exists>x\\<in>set ?xs. ?S \\<Turnstile>\\<^sub>P x)\n\ngoal (1 subgoal):\n 1. {\\<chi> \\<in> propos (Or xs).\n     w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n    Or xs =\n    (\\<exists>x\\<in>set xs.\n        {\\<chi> \\<in> propos (Or xs).\n         w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n        x)", "by auto"], ["proof (state)\nthis:\n  {\\<chi> \\<in> propos (Or xs). w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n  Or xs =\n  (\\<exists>x\\<in>set xs.\n      {\\<chi> \\<in> propos (Or xs).\n       w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n      x)\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> Or xs = (\\<exists>x\\<in>set xs. w \\<Turnstile> x)", "also"], ["proof (state)\nthis:\n  {\\<chi> \\<in> propos (Or xs). w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n  Or xs =\n  (\\<exists>x\\<in>set xs.\n      {\\<chi> \\<in> propos (Or xs).\n       w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n      x)\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> Or xs = (\\<exists>x\\<in>set xs. w \\<Turnstile> x)", "have \"\\<dots> = (\\<exists>x \\<in> set xs. {\\<chi>. \\<chi> \\<in> propos x \\<and> w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x\\<in>set xs.\n        {\\<chi> \\<in> propos (Or xs).\n         w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n        x) =\n    (\\<exists>x\\<in>set xs.\n        {\\<chi> \\<in> propos x. w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n        x)", "using LTL_prop_entailment_restrict_to_propos Or_propos'"], ["proof (prove)\nusing this:\n  ?S \\<Turnstile>\\<^sub>P ?\\<phi> =\n  (?S \\<inter> propos ?\\<phi>) \\<Turnstile>\\<^sub>P ?\\<phi>\n  ?x \\<in> set xs \\<Longrightarrow> propos ?x \\<subseteq> propos (Or xs)\n\ngoal (1 subgoal):\n 1. (\\<exists>x\\<in>set xs.\n        {\\<chi> \\<in> propos (Or xs).\n         w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n        x) =\n    (\\<exists>x\\<in>set xs.\n        {\\<chi> \\<in> propos x. w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n        x)", "by blast"], ["proof (state)\nthis:\n  (\\<exists>x\\<in>set xs.\n      {\\<chi> \\<in> propos (Or xs).\n       w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n      x) =\n  (\\<exists>x\\<in>set xs.\n      {\\<chi> \\<in> propos x. w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P x)\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> Or xs = (\\<exists>x\\<in>set xs. w \\<Turnstile> x)", "also"], ["proof (state)\nthis:\n  (\\<exists>x\\<in>set xs.\n      {\\<chi> \\<in> propos (Or xs).\n       w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n      x) =\n  (\\<exists>x\\<in>set xs.\n      {\\<chi> \\<in> propos x. w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P x)\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> Or xs = (\\<exists>x\\<in>set xs. w \\<Turnstile> x)", "have \"\\<dots> = (\\<exists>x \\<in> set xs. w \\<Turnstile> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x\\<in>set xs.\n        {\\<chi> \\<in> propos x. w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n        x) =\n    (\\<exists>x\\<in>set xs. w \\<Turnstile> x)", "using ltl_models_equiv_prop_entailment LTL_prop_entailment_restrict_to_propos"], ["proof (prove)\nusing this:\n  ?w \\<Turnstile> ?\\<phi> =\n  {\\<chi>. ?w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P ?\\<phi>\n  ?S \\<Turnstile>\\<^sub>P ?\\<phi> =\n  (?S \\<inter> propos ?\\<phi>) \\<Turnstile>\\<^sub>P ?\\<phi>\n\ngoal (1 subgoal):\n 1. (\\<exists>x\\<in>set xs.\n        {\\<chi> \\<in> propos x. w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n        x) =\n    (\\<exists>x\\<in>set xs. w \\<Turnstile> x)", "by blast"], ["proof (state)\nthis:\n  (\\<exists>x\\<in>set xs.\n      {\\<chi> \\<in> propos x. w \\<Turnstile> \\<chi>} \\<Turnstile>\\<^sub>P\n      x) =\n  (\\<exists>x\\<in>set xs. w \\<Turnstile> x)\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> Or xs = (\\<exists>x\\<in>set xs. w \\<Turnstile> x)", "finally"], ["proof (chain)\npicking this:\n  w \\<Turnstile> Or xs = (\\<exists>x\\<in>set xs. w \\<Turnstile> x)", "show ?thesis"], ["proof (prove)\nusing this:\n  w \\<Turnstile> Or xs = (\\<exists>x\\<in>set xs. w \\<Turnstile> x)\n\ngoal (1 subgoal):\n 1. w \\<Turnstile> Or xs = (\\<exists>x\\<in>set xs. w \\<Turnstile> x)", "."], ["proof (state)\nthis:\n  w \\<Turnstile> Or xs = (\\<exists>x\\<in>set xs. w \\<Turnstile> x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Or_append_syntactic:\n  \"xs \\<noteq> [] \\<Longrightarrow> Or (xs @ ys) = Or ((Or xs)#ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> Or (xs @ ys) = Or (Or xs # ys)", "by (induction xs rule: list_nonempty_induct) simp+"], ["", "lemma Or_append_S:\n  \"S \\<Turnstile>\\<^sub>P Or (xs @ ys) = S \\<Turnstile>\\<^sub>P Or xs or Or ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<Turnstile>\\<^sub>P Or (xs @ ys) =\n    S \\<Turnstile>\\<^sub>P Or xs or Or ys", "using Or_prop_entailment[of S]"], ["proof (prove)\nusing this:\n  S \\<Turnstile>\\<^sub>P Or ?xs =\n  (\\<exists>x\\<in>set ?xs. S \\<Turnstile>\\<^sub>P x)\n\ngoal (1 subgoal):\n 1. S \\<Turnstile>\\<^sub>P Or (xs @ ys) =\n    S \\<Turnstile>\\<^sub>P Or xs or Or ys", "by auto"], ["", "lemma Or_append:\n  \"Or (xs @ ys) \\<equiv>\\<^sub>P Or xs or Or ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Or (xs @ ys) \\<equiv>\\<^sub>P Or xs or Or ys", "unfolding ltl_prop_equiv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<A>.\n       \\<A> \\<Turnstile>\\<^sub>P Or (xs @ ys) =\n       \\<A> \\<Turnstile>\\<^sub>P Or xs or Or ys", "using Or_append_S"], ["proof (prove)\nusing this:\n  ?S \\<Turnstile>\\<^sub>P Or (?xs @ ?ys) =\n  ?S \\<Turnstile>\\<^sub>P Or ?xs or Or ?ys\n\ngoal (1 subgoal):\n 1. \\<forall>\\<A>.\n       \\<A> \\<Turnstile>\\<^sub>P Or (xs @ ys) =\n       \\<A> \\<Turnstile>\\<^sub>P Or xs or Or ys", "by blast"], ["", "subsubsection \\<open>$eval_G$\\<close>\n\n\\<comment> \\<open>Partly evaluate a formula by only considering G-subformulae\\<close>"], ["", "fun eval\\<^sub>G\nwhere\n  \"eval\\<^sub>G S (\\<phi> and \\<psi>) = eval\\<^sub>G S \\<phi> and eval\\<^sub>G S \\<psi>\"\n| \"eval\\<^sub>G S (\\<phi> or \\<psi>) = eval\\<^sub>G S \\<phi> or eval\\<^sub>G S \\<psi>\"\n| \"eval\\<^sub>G S (G \\<phi>) = (if G \\<phi> \\<in> S then true else false)\"\n| \"eval\\<^sub>G S \\<phi> = \\<phi>\"\n\n\\<comment> \\<open>Syntactic Properties\\<close>"], ["", "lemma eval\\<^sub>G_And_map:\n  \"eval\\<^sub>G S (And xs) = And (map (eval\\<^sub>G S) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>G S (And xs) = And (map (eval\\<^sub>G S) xs)", "proof (induction xs rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. eval\\<^sub>G S (And []) = And (map (eval\\<^sub>G S) [])\n 2. \\<And>x xs.\n       eval\\<^sub>G S (And xs) =\n       And (map (eval\\<^sub>G S) xs) \\<Longrightarrow>\n       eval\\<^sub>G S (And (xs @ [x])) =\n       And (map (eval\\<^sub>G S) (xs @ [x]))", "case (snoc x xs)"], ["proof (state)\nthis:\n  eval\\<^sub>G S (And xs) = And (map (eval\\<^sub>G S) xs)\n\ngoal (2 subgoals):\n 1. eval\\<^sub>G S (And []) = And (map (eval\\<^sub>G S) [])\n 2. \\<And>x xs.\n       eval\\<^sub>G S (And xs) =\n       And (map (eval\\<^sub>G S) xs) \\<Longrightarrow>\n       eval\\<^sub>G S (And (xs @ [x])) =\n       And (map (eval\\<^sub>G S) (xs @ [x]))", "thus ?case"], ["proof (prove)\nusing this:\n  eval\\<^sub>G S (And xs) = And (map (eval\\<^sub>G S) xs)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>G S (And (xs @ [x])) = And (map (eval\\<^sub>G S) (xs @ [x]))", "by (cases xs) simp+"], ["proof (state)\nthis:\n  eval\\<^sub>G S (And (xs @ [x])) = And (map (eval\\<^sub>G S) (xs @ [x]))\n\ngoal (1 subgoal):\n 1. eval\\<^sub>G S (And []) = And (map (eval\\<^sub>G S) [])", "qed simp"], ["", "lemma eval\\<^sub>G_Or_map:\n  \"eval\\<^sub>G S (Or xs) = Or (map (eval\\<^sub>G S) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>G S (Or xs) = Or (map (eval\\<^sub>G S) xs)", "proof (induction xs rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. eval\\<^sub>G S (Or []) = Or (map (eval\\<^sub>G S) [])\n 2. \\<And>x xs.\n       eval\\<^sub>G S (Or xs) =\n       Or (map (eval\\<^sub>G S) xs) \\<Longrightarrow>\n       eval\\<^sub>G S (Or (xs @ [x])) = Or (map (eval\\<^sub>G S) (xs @ [x]))", "case (snoc x xs)"], ["proof (state)\nthis:\n  eval\\<^sub>G S (Or xs) = Or (map (eval\\<^sub>G S) xs)\n\ngoal (2 subgoals):\n 1. eval\\<^sub>G S (Or []) = Or (map (eval\\<^sub>G S) [])\n 2. \\<And>x xs.\n       eval\\<^sub>G S (Or xs) =\n       Or (map (eval\\<^sub>G S) xs) \\<Longrightarrow>\n       eval\\<^sub>G S (Or (xs @ [x])) = Or (map (eval\\<^sub>G S) (xs @ [x]))", "thus ?case"], ["proof (prove)\nusing this:\n  eval\\<^sub>G S (Or xs) = Or (map (eval\\<^sub>G S) xs)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>G S (Or (xs @ [x])) = Or (map (eval\\<^sub>G S) (xs @ [x]))", "by (cases xs) simp+"], ["proof (state)\nthis:\n  eval\\<^sub>G S (Or (xs @ [x])) = Or (map (eval\\<^sub>G S) (xs @ [x]))\n\ngoal (1 subgoal):\n 1. eval\\<^sub>G S (Or []) = Or (map (eval\\<^sub>G S) [])", "qed simp"], ["", "lemma eval\\<^sub>G_G_nested:\n  \"\\<^bold>G (eval\\<^sub>G \\<G> \\<phi>) \\<subseteq> \\<^bold>G \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<^bold>G (eval\\<^sub>G \\<G> \\<phi>) \\<subseteq> \\<^bold>G \\<phi>", "by (induction \\<phi>) (simp_all, blast+)"], ["", "lemma eval\\<^sub>G_subst:\n  \"eval\\<^sub>G S \\<phi> = subst \\<phi> (\\<lambda>\\<chi>. Some (eval\\<^sub>G S \\<chi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>G S \\<phi> =\n    subst \\<phi> (\\<lambda>\\<chi>. Some (eval\\<^sub>G S \\<chi>))", "by (induction \\<phi>) simp_all\n\n\\<comment> \\<open>Semantic Properties\\<close>"], ["", "lemma eval\\<^sub>G_prop_entailment:\n  \"S \\<Turnstile>\\<^sub>P eval\\<^sub>G S \\<phi> \\<longleftrightarrow> S \\<Turnstile>\\<^sub>P \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<Turnstile>\\<^sub>P eval\\<^sub>G S \\<phi> =\n    S \\<Turnstile>\\<^sub>P \\<phi>", "by (induction \\<phi>, auto)"], ["", "lemma eval\\<^sub>G_respectfulness:\n  \"\\<phi> \\<longrightarrow>\\<^sub>P \\<psi> \\<Longrightarrow> eval\\<^sub>G S \\<phi> \\<longrightarrow>\\<^sub>P eval\\<^sub>G S \\<psi>\"\n  \"\\<phi> \\<equiv>\\<^sub>P \\<psi> \\<Longrightarrow> eval\\<^sub>G S \\<phi> \\<equiv>\\<^sub>P eval\\<^sub>G S \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<phi> \\<longrightarrow>\\<^sub>P \\<psi> \\<Longrightarrow>\n     eval\\<^sub>G S \\<phi> \\<longrightarrow>\\<^sub>P\n     eval\\<^sub>G S \\<psi>) &&&\n    (\\<phi> \\<equiv>\\<^sub>P \\<psi> \\<Longrightarrow>\n     eval\\<^sub>G S \\<phi> \\<equiv>\\<^sub>P eval\\<^sub>G S \\<psi>)", "using subst_respects_ltl_prop_entailment eval\\<^sub>G_subst"], ["proof (prove)\nusing this:\n  ?\\<phi> \\<longrightarrow>\\<^sub>P ?\\<psi> \\<Longrightarrow>\n  subst ?\\<phi> ?m \\<longrightarrow>\\<^sub>P subst ?\\<psi> ?m\n  ?\\<phi> \\<equiv>\\<^sub>P ?\\<psi> \\<Longrightarrow>\n  subst ?\\<phi> ?m \\<equiv>\\<^sub>P subst ?\\<psi> ?m\n  eval\\<^sub>G ?S ?\\<phi> =\n  subst ?\\<phi> (\\<lambda>\\<chi>. Some (eval\\<^sub>G ?S \\<chi>))\n\ngoal (1 subgoal):\n 1. (\\<phi> \\<longrightarrow>\\<^sub>P \\<psi> \\<Longrightarrow>\n     eval\\<^sub>G S \\<phi> \\<longrightarrow>\\<^sub>P\n     eval\\<^sub>G S \\<psi>) &&&\n    (\\<phi> \\<equiv>\\<^sub>P \\<psi> \\<Longrightarrow>\n     eval\\<^sub>G S \\<phi> \\<equiv>\\<^sub>P eval\\<^sub>G S \\<psi>)", "by metis+"], ["", "lemma eval\\<^sub>G_respectfulness_generalized:\n  \"(\\<And>\\<A>. (\\<And>x. x \\<in> S \\<Longrightarrow> \\<A> \\<Turnstile>\\<^sub>P x) \\<Longrightarrow> \\<A> \\<Turnstile>\\<^sub>P y) \\<Longrightarrow> (\\<And>x. x \\<in> S \\<Longrightarrow> \\<A> \\<Turnstile>\\<^sub>P eval\\<^sub>G P x) \\<Longrightarrow> \\<A> \\<Turnstile>\\<^sub>P eval\\<^sub>G P y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<A>.\n                (\\<And>x.\n                    x \\<in> S \\<Longrightarrow>\n                    \\<A> \\<Turnstile>\\<^sub>P x) \\<Longrightarrow>\n                \\<A> \\<Turnstile>\\<^sub>P y;\n     \\<And>x.\n        x \\<in> S \\<Longrightarrow>\n        \\<A> \\<Turnstile>\\<^sub>P eval\\<^sub>G P x\\<rbrakk>\n    \\<Longrightarrow> \\<A> \\<Turnstile>\\<^sub>P eval\\<^sub>G P y", "using subst_respects_ltl_prop_entailment_generalized[of S y \\<A>] eval\\<^sub>G_subst[of P]"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>\\<A>.\n              (\\<And>x.\n                  x \\<in> S \\<Longrightarrow>\n                  \\<A> \\<Turnstile>\\<^sub>P x) \\<Longrightarrow>\n              \\<A> \\<Turnstile>\\<^sub>P y;\n   \\<And>x.\n      x \\<in> S \\<Longrightarrow>\n      \\<A> \\<Turnstile>\\<^sub>P subst x ?m\\<rbrakk>\n  \\<Longrightarrow> \\<A> \\<Turnstile>\\<^sub>P subst y ?m\n  eval\\<^sub>G P ?\\<phi> =\n  subst ?\\<phi> (\\<lambda>\\<chi>. Some (eval\\<^sub>G P \\<chi>))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<A>.\n                (\\<And>x.\n                    x \\<in> S \\<Longrightarrow>\n                    \\<A> \\<Turnstile>\\<^sub>P x) \\<Longrightarrow>\n                \\<A> \\<Turnstile>\\<^sub>P y;\n     \\<And>x.\n        x \\<in> S \\<Longrightarrow>\n        \\<A> \\<Turnstile>\\<^sub>P eval\\<^sub>G P x\\<rbrakk>\n    \\<Longrightarrow> \\<A> \\<Turnstile>\\<^sub>P eval\\<^sub>G P y", "by metis"], ["", "lift_definition eval\\<^sub>G_abs :: \"'a ltl set \\<Rightarrow> 'a ltl\\<^sub>P \\<Rightarrow> 'a ltl\\<^sub>P\" (\"\\<up>eval\\<^sub>G\") is eval\\<^sub>G"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>set ltl1 ltl2.\n       ltl1 \\<equiv>\\<^sub>P ltl2 \\<Longrightarrow>\n       eval\\<^sub>G set ltl1 \\<equiv>\\<^sub>P eval\\<^sub>G set ltl2", "by (insert eval\\<^sub>G_respectfulness(2))"], ["", "subsection \\<open>Finite Quotient Set\\<close>"], ["", "text \\<open>If we restrict formulas to a finite set of propositions, the set of quotients of these is finite\\<close>"], ["", "lemma Rep_Abs_prop_entailment[simp]:\n  \"A \\<Turnstile>\\<^sub>P Rep (Abs \\<phi>) = A \\<Turnstile>\\<^sub>P \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<Turnstile>\\<^sub>P Rep (Abs \\<phi>) = A \\<Turnstile>\\<^sub>P \\<phi>", "using Quotient3_ltl_prop_equiv_quotient[THEN rep_abs_rsp]"], ["proof (prove)\nusing this:\n  ?x1.0 \\<equiv>\\<^sub>P ?x2.0 \\<Longrightarrow>\n  ?x1.0 \\<equiv>\\<^sub>P Rep (Abs ?x2.0)\n\ngoal (1 subgoal):\n 1. A \\<Turnstile>\\<^sub>P Rep (Abs \\<phi>) = A \\<Turnstile>\\<^sub>P \\<phi>", "by (auto simp add: ltl_prop_equiv_def)"], ["", "fun sat_models :: \"'a ltl_prop_equiv_quotient \\<Rightarrow> 'a ltl set set\"\nwhere\n  \"sat_models a = {A. A \\<Turnstile>\\<^sub>P Rep(a)}\""], ["", "lemma sat_models_invariant:\n  \"A \\<in> sat_models (Abs \\<phi>) = A \\<Turnstile>\\<^sub>P \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<in> sat_models (Abs \\<phi>)) = A \\<Turnstile>\\<^sub>P \\<phi>", "using Rep_Abs_prop_entailment"], ["proof (prove)\nusing this:\n  ?A \\<Turnstile>\\<^sub>P Rep (Abs ?\\<phi>) =\n  ?A \\<Turnstile>\\<^sub>P ?\\<phi>\n\ngoal (1 subgoal):\n 1. (A \\<in> sat_models (Abs \\<phi>)) = A \\<Turnstile>\\<^sub>P \\<phi>", "by auto"], ["", "lemma sat_models_inj:\n  \"inj sat_models\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj sat_models", "using Quotient3_ltl_prop_equiv_quotient[THEN Quotient3_rel_rep]"], ["proof (prove)\nusing this:\n  Rep ?a \\<equiv>\\<^sub>P Rep ?b = (?a = ?b)\n\ngoal (1 subgoal):\n 1. inj sat_models", "by (auto simp add: ltl_prop_equiv_def inj_on_def)"], ["", "lemma sat_models_finite_image:\n  assumes \"finite P\"\n  shows \"finite (sat_models ` {Abs \\<phi> | \\<phi>. nested_propos \\<phi> \\<subseteq> P})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     (sat_models ` {Abs \\<phi> |\\<phi>. nested_propos \\<phi> \\<subseteq> P})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite\n     (sat_models ` {Abs \\<phi> |\\<phi>. nested_propos \\<phi> \\<subseteq> P})", "have \"sat_models (Abs \\<phi>) = {A \\<union> B | A B. A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P}\" (is \"?lhs = ?rhs\")\n    if \"nested_propos \\<phi> \\<subseteq> P\" for \\<phi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat_models (Abs \\<phi>) =\n    {A \\<union> B |A B.\n     A \\<subseteq> P \\<and>\n     A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. sat_models (Abs \\<phi>)\n    \\<subseteq> {A \\<union> B |A B.\n                 A \\<subseteq> P \\<and>\n                 A \\<Turnstile>\\<^sub>P \\<phi> \\<and>\n                 B \\<subseteq> UNIV - P}\n 2. {A \\<union> B |A B.\n     A \\<subseteq> P \\<and>\n     A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P}\n    \\<subseteq> sat_models (Abs \\<phi>)", "have \"\\<And>A B. A \\<in> sat_models (Abs \\<phi>) \\<Longrightarrow> A \\<union> B \\<in> sat_models (Abs \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B.\n       A \\<in> sat_models (Abs \\<phi>) \\<Longrightarrow>\n       A \\<union> B \\<in> sat_models (Abs \\<phi>)", "unfolding sat_models_invariant"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B.\n       A \\<Turnstile>\\<^sub>P \\<phi> \\<Longrightarrow>\n       (A \\<union> B) \\<Turnstile>\\<^sub>P \\<phi>", "by blast"], ["proof (state)\nthis:\n  ?A \\<in> sat_models (Abs \\<phi>) \\<Longrightarrow>\n  ?A \\<union> ?B \\<in> sat_models (Abs \\<phi>)\n\ngoal (2 subgoals):\n 1. sat_models (Abs \\<phi>)\n    \\<subseteq> {A \\<union> B |A B.\n                 A \\<subseteq> P \\<and>\n                 A \\<Turnstile>\\<^sub>P \\<phi> \\<and>\n                 B \\<subseteq> UNIV - P}\n 2. {A \\<union> B |A B.\n     A \\<subseteq> P \\<and>\n     A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P}\n    \\<subseteq> sat_models (Abs \\<phi>)", "moreover"], ["proof (state)\nthis:\n  ?A \\<in> sat_models (Abs \\<phi>) \\<Longrightarrow>\n  ?A \\<union> ?B \\<in> sat_models (Abs \\<phi>)\n\ngoal (2 subgoals):\n 1. sat_models (Abs \\<phi>)\n    \\<subseteq> {A \\<union> B |A B.\n                 A \\<subseteq> P \\<and>\n                 A \\<Turnstile>\\<^sub>P \\<phi> \\<and>\n                 B \\<subseteq> UNIV - P}\n 2. {A \\<union> B |A B.\n     A \\<subseteq> P \\<and>\n     A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P}\n    \\<subseteq> sat_models (Abs \\<phi>)", "have \"{A | A. A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi>} \\<subseteq> sat_models (Abs \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {A |A. A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi>}\n    \\<subseteq> sat_models (Abs \\<phi>)", "using sat_models_invariant"], ["proof (prove)\nusing this:\n  (?A \\<in> sat_models (Abs ?\\<phi>)) = ?A \\<Turnstile>\\<^sub>P ?\\<phi>\n\ngoal (1 subgoal):\n 1. {A |A. A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi>}\n    \\<subseteq> sat_models (Abs \\<phi>)", "by fast"], ["proof (state)\nthis:\n  {A |A. A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi>}\n  \\<subseteq> sat_models (Abs \\<phi>)\n\ngoal (2 subgoals):\n 1. sat_models (Abs \\<phi>)\n    \\<subseteq> {A \\<union> B |A B.\n                 A \\<subseteq> P \\<and>\n                 A \\<Turnstile>\\<^sub>P \\<phi> \\<and>\n                 B \\<subseteq> UNIV - P}\n 2. {A \\<union> B |A B.\n     A \\<subseteq> P \\<and>\n     A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P}\n    \\<subseteq> sat_models (Abs \\<phi>)", "ultimately"], ["proof (chain)\npicking this:\n  ?A \\<in> sat_models (Abs \\<phi>) \\<Longrightarrow>\n  ?A \\<union> ?B \\<in> sat_models (Abs \\<phi>)\n  {A |A. A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi>}\n  \\<subseteq> sat_models (Abs \\<phi>)", "show \"?rhs \\<subseteq> ?lhs\""], ["proof (prove)\nusing this:\n  ?A \\<in> sat_models (Abs \\<phi>) \\<Longrightarrow>\n  ?A \\<union> ?B \\<in> sat_models (Abs \\<phi>)\n  {A |A. A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi>}\n  \\<subseteq> sat_models (Abs \\<phi>)\n\ngoal (1 subgoal):\n 1. {A \\<union> B |A B.\n     A \\<subseteq> P \\<and>\n     A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P}\n    \\<subseteq> sat_models (Abs \\<phi>)", "by blast"], ["proof (state)\nthis:\n  {A \\<union> B |A B.\n   A \\<subseteq> P \\<and>\n   A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P}\n  \\<subseteq> sat_models (Abs \\<phi>)\n\ngoal (1 subgoal):\n 1. sat_models (Abs \\<phi>)\n    \\<subseteq> {A \\<union> B |A B.\n                 A \\<subseteq> P \\<and>\n                 A \\<Turnstile>\\<^sub>P \\<phi> \\<and>\n                 B \\<subseteq> UNIV - P}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. sat_models (Abs \\<phi>)\n    \\<subseteq> {A \\<union> B |A B.\n                 A \\<subseteq> P \\<and>\n                 A \\<Turnstile>\\<^sub>P \\<phi> \\<and>\n                 B \\<subseteq> UNIV - P}", "have \"propos \\<phi> \\<subseteq> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. propos \\<phi> \\<subseteq> P", "using that propos_subset"], ["proof (prove)\nusing this:\n  nested_propos \\<phi> \\<subseteq> P\n  propos ?\\<phi> \\<subseteq> nested_propos ?\\<phi>\n\ngoal (1 subgoal):\n 1. propos \\<phi> \\<subseteq> P", "by blast"], ["proof (state)\nthis:\n  propos \\<phi> \\<subseteq> P\n\ngoal (1 subgoal):\n 1. sat_models (Abs \\<phi>)\n    \\<subseteq> {A \\<union> B |A B.\n                 A \\<subseteq> P \\<and>\n                 A \\<Turnstile>\\<^sub>P \\<phi> \\<and>\n                 B \\<subseteq> UNIV - P}", "have \"A \\<in> {A \\<union> B | A B. A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P}\"\n      if \"A \\<in> sat_models (Abs \\<phi>)\" for A"], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> {A \\<union> B |A B.\n             A \\<subseteq> P \\<and>\n             A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P}", "proof (standard, goal_cases prems)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>Aa B.\n       A = Aa \\<union> B \\<and>\n       Aa \\<subseteq> P \\<and>\n       Aa \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P", "case prems"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<exists>Aa B.\n       A = Aa \\<union> B \\<and>\n       Aa \\<subseteq> P \\<and>\n       Aa \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P", "then"], ["proof (chain)\npicking this:", "have \"A \\<Turnstile>\\<^sub>P \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<Turnstile>\\<^sub>P \\<phi>", "using that sat_models_invariant"], ["proof (prove)\nusing this:\n  A \\<in> sat_models (Abs \\<phi>)\n  (?A \\<in> sat_models (Abs ?\\<phi>)) = ?A \\<Turnstile>\\<^sub>P ?\\<phi>\n\ngoal (1 subgoal):\n 1. A \\<Turnstile>\\<^sub>P \\<phi>", "by blast"], ["proof (state)\nthis:\n  A \\<Turnstile>\\<^sub>P \\<phi>\n\ngoal (1 subgoal):\n 1. \\<exists>Aa B.\n       A = Aa \\<union> B \\<and>\n       Aa \\<subseteq> P \\<and>\n       Aa \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P", "then"], ["proof (chain)\npicking this:\n  A \\<Turnstile>\\<^sub>P \\<phi>", "obtain C D where \"C = (A \\<inter> P)\" and \"D = A - P\" and \"A = C \\<union> D\""], ["proof (prove)\nusing this:\n  A \\<Turnstile>\\<^sub>P \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>C D.\n        \\<lbrakk>C = A \\<inter> P; D = A - P; A = C \\<union> D\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  C = A \\<inter> P\n  D = A - P\n  A = C \\<union> D\n\ngoal (1 subgoal):\n 1. \\<exists>Aa B.\n       A = Aa \\<union> B \\<and>\n       Aa \\<subseteq> P \\<and>\n       Aa \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P", "then"], ["proof (chain)\npicking this:\n  C = A \\<inter> P\n  D = A - P\n  A = C \\<union> D", "have \"C \\<Turnstile>\\<^sub>P \\<phi>\" and \"C \\<subseteq> P\" and \"D \\<subseteq> UNIV - P\""], ["proof (prove)\nusing this:\n  C = A \\<inter> P\n  D = A - P\n  A = C \\<union> D\n\ngoal (1 subgoal):\n 1. C \\<Turnstile>\\<^sub>P \\<phi> &&&\n    C \\<subseteq> P &&& D \\<subseteq> UNIV - P", "using \\<open>A \\<Turnstile>\\<^sub>P \\<phi>\\<close> LTL_prop_entailment_restrict_to_propos \\<open>propos \\<phi> \\<subseteq> P\\<close>"], ["proof (prove)\nusing this:\n  C = A \\<inter> P\n  D = A - P\n  A = C \\<union> D\n  A \\<Turnstile>\\<^sub>P \\<phi>\n  ?S \\<Turnstile>\\<^sub>P ?\\<phi> =\n  (?S \\<inter> propos ?\\<phi>) \\<Turnstile>\\<^sub>P ?\\<phi>\n  propos \\<phi> \\<subseteq> P\n\ngoal (1 subgoal):\n 1. C \\<Turnstile>\\<^sub>P \\<phi> &&&\n    C \\<subseteq> P &&& D \\<subseteq> UNIV - P", "by blast+"], ["proof (state)\nthis:\n  C \\<Turnstile>\\<^sub>P \\<phi>\n  C \\<subseteq> P\n  D \\<subseteq> UNIV - P\n\ngoal (1 subgoal):\n 1. \\<exists>Aa B.\n       A = Aa \\<union> B \\<and>\n       Aa \\<subseteq> P \\<and>\n       Aa \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P", "then"], ["proof (chain)\npicking this:\n  C \\<Turnstile>\\<^sub>P \\<phi>\n  C \\<subseteq> P\n  D \\<subseteq> UNIV - P", "have \"C \\<union> D \\<in> {A \\<union> B | A B. A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P}\""], ["proof (prove)\nusing this:\n  C \\<Turnstile>\\<^sub>P \\<phi>\n  C \\<subseteq> P\n  D \\<subseteq> UNIV - P\n\ngoal (1 subgoal):\n 1. C \\<union> D\n    \\<in> {A \\<union> B |A B.\n           A \\<subseteq> P \\<and>\n           A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P}", "by blast"], ["proof (state)\nthis:\n  C \\<union> D\n  \\<in> {A \\<union> B |A B.\n         A \\<subseteq> P \\<and>\n         A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P}\n\ngoal (1 subgoal):\n 1. \\<exists>Aa B.\n       A = Aa \\<union> B \\<and>\n       Aa \\<subseteq> P \\<and>\n       Aa \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P", "thus ?case"], ["proof (prove)\nusing this:\n  C \\<union> D\n  \\<in> {A \\<union> B |A B.\n         A \\<subseteq> P \\<and>\n         A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P}\n\ngoal (1 subgoal):\n 1. \\<exists>Aa B.\n       A = Aa \\<union> B \\<and>\n       Aa \\<subseteq> P \\<and>\n       Aa \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P", "using \\<open>A = C \\<union> D\\<close>"], ["proof (prove)\nusing this:\n  C \\<union> D\n  \\<in> {A \\<union> B |A B.\n         A \\<subseteq> P \\<and>\n         A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P}\n  A = C \\<union> D\n\ngoal (1 subgoal):\n 1. \\<exists>Aa B.\n       A = Aa \\<union> B \\<and>\n       Aa \\<subseteq> P \\<and>\n       Aa \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P", "by simp"], ["proof (state)\nthis:\n  \\<exists>Aa B.\n     A = Aa \\<union> B \\<and>\n     Aa \\<subseteq> P \\<and>\n     Aa \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?A \\<in> sat_models (Abs \\<phi>) \\<Longrightarrow>\n  ?A \\<in> {A \\<union> B |A B.\n            A \\<subseteq> P \\<and>\n            A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P}\n\ngoal (1 subgoal):\n 1. sat_models (Abs \\<phi>)\n    \\<subseteq> {A \\<union> B |A B.\n                 A \\<subseteq> P \\<and>\n                 A \\<Turnstile>\\<^sub>P \\<phi> \\<and>\n                 B \\<subseteq> UNIV - P}", "thus \"?lhs \\<subseteq> ?rhs\""], ["proof (prove)\nusing this:\n  ?A \\<in> sat_models (Abs \\<phi>) \\<Longrightarrow>\n  ?A \\<in> {A \\<union> B |A B.\n            A \\<subseteq> P \\<and>\n            A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P}\n\ngoal (1 subgoal):\n 1. sat_models (Abs \\<phi>)\n    \\<subseteq> {A \\<union> B |A B.\n                 A \\<subseteq> P \\<and>\n                 A \\<Turnstile>\\<^sub>P \\<phi> \\<and>\n                 B \\<subseteq> UNIV - P}", "by blast"], ["proof (state)\nthis:\n  sat_models (Abs \\<phi>)\n  \\<subseteq> {A \\<union> B |A B.\n               A \\<subseteq> P \\<and>\n               A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  nested_propos ?\\<phi> \\<subseteq> P \\<Longrightarrow>\n  sat_models (Abs ?\\<phi>) =\n  {A \\<union> B |A B.\n   A \\<subseteq> P \\<and>\n   A \\<Turnstile>\\<^sub>P ?\\<phi> \\<and> B \\<subseteq> UNIV - P}\n\ngoal (1 subgoal):\n 1. finite\n     (sat_models ` {Abs \\<phi> |\\<phi>. nested_propos \\<phi> \\<subseteq> P})", "hence Equal: \"{sat_models (Abs \\<phi>) | \\<phi>. nested_propos \\<phi> \\<subseteq> P} = {{A \\<union> B | A B. A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P} | \\<phi>. nested_propos \\<phi> \\<subseteq> P}\""], ["proof (prove)\nusing this:\n  nested_propos ?\\<phi> \\<subseteq> P \\<Longrightarrow>\n  sat_models (Abs ?\\<phi>) =\n  {A \\<union> B |A B.\n   A \\<subseteq> P \\<and>\n   A \\<Turnstile>\\<^sub>P ?\\<phi> \\<and> B \\<subseteq> UNIV - P}\n\ngoal (1 subgoal):\n 1. {sat_models (Abs \\<phi>) |\\<phi>. nested_propos \\<phi> \\<subseteq> P} =\n    {{A \\<union> B |A B.\n      A \\<subseteq> P \\<and>\n      A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P} |\n     \\<phi>. nested_propos \\<phi> \\<subseteq> P}", "by (metis (lifting, no_types))"], ["proof (state)\nthis:\n  {sat_models (Abs \\<phi>) |\\<phi>. nested_propos \\<phi> \\<subseteq> P} =\n  {{A \\<union> B |A B.\n    A \\<subseteq> P \\<and>\n    A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P} |\n   \\<phi>. nested_propos \\<phi> \\<subseteq> P}\n\ngoal (1 subgoal):\n 1. finite\n     (sat_models ` {Abs \\<phi> |\\<phi>. nested_propos \\<phi> \\<subseteq> P})", "have Finite: \"finite {{A \\<union> B | A B. A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P} | \\<phi>. nested_propos \\<phi> \\<subseteq> P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     {{A \\<union> B |A B.\n       A \\<subseteq> P \\<and>\n       A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P} |\n      \\<phi>. nested_propos \\<phi> \\<subseteq> P}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite\n     {{A \\<union> B |A B.\n       A \\<subseteq> P \\<and>\n       A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P} |\n      \\<phi>. nested_propos \\<phi> \\<subseteq> P}", "let ?map = \"\\<lambda>P S. {A \\<union> B | A B. A \\<in> S \\<and> B \\<subseteq> UNIV - P}\""], ["proof (state)\ngoal (1 subgoal):\n 1. finite\n     {{A \\<union> B |A B.\n       A \\<subseteq> P \\<and>\n       A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P} |\n      \\<phi>. nested_propos \\<phi> \\<subseteq> P}", "obtain S' where S'_def: \"S' = {{A \\<union> B | A B. A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P} | \\<phi>. nested_propos \\<phi> \\<subseteq> P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>S'.\n        S' =\n        {{A \\<union> B |A B.\n          A \\<subseteq> P \\<and>\n          A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P} |\n         \\<phi>. nested_propos \\<phi> \\<subseteq> P} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  S' =\n  {{A \\<union> B |A B.\n    A \\<subseteq> P \\<and>\n    A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P} |\n   \\<phi>. nested_propos \\<phi> \\<subseteq> P}\n\ngoal (1 subgoal):\n 1. finite\n     {{A \\<union> B |A B.\n       A \\<subseteq> P \\<and>\n       A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P} |\n      \\<phi>. nested_propos \\<phi> \\<subseteq> P}", "obtain S where S_def: \"S = {{A | A. A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi>} | \\<phi>. nested_propos \\<phi> \\<subseteq> P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>S.\n        S =\n        {{A |A. A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi>} |\n         \\<phi>. nested_propos \\<phi> \\<subseteq> P} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast\n\n    \\<comment> \\<open>Prove S and ?map applied to it is finite\\<close>"], ["proof (state)\nthis:\n  S =\n  {{A |A. A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi>} |\\<phi>.\n   nested_propos \\<phi> \\<subseteq> P}\n\ngoal (1 subgoal):\n 1. finite\n     {{A \\<union> B |A B.\n       A \\<subseteq> P \\<and>\n       A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P} |\n      \\<phi>. nested_propos \\<phi> \\<subseteq> P}", "hence \"S \\<subseteq> Pow (Pow P)\""], ["proof (prove)\nusing this:\n  S =\n  {{A |A. A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi>} |\\<phi>.\n   nested_propos \\<phi> \\<subseteq> P}\n\ngoal (1 subgoal):\n 1. S \\<subseteq> Pow (Pow P)", "by blast"], ["proof (state)\nthis:\n  S \\<subseteq> Pow (Pow P)\n\ngoal (1 subgoal):\n 1. finite\n     {{A \\<union> B |A B.\n       A \\<subseteq> P \\<and>\n       A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P} |\n      \\<phi>. nested_propos \\<phi> \\<subseteq> P}", "hence \"finite S\""], ["proof (prove)\nusing this:\n  S \\<subseteq> Pow (Pow P)\n\ngoal (1 subgoal):\n 1. finite S", "using \\<open>finite P\\<close> finite_Pow_iff infinite_super"], ["proof (prove)\nusing this:\n  S \\<subseteq> Pow (Pow P)\n  finite P\n  finite (Pow ?A) = finite ?A\n  \\<lbrakk>?S \\<subseteq> ?T; infinite ?S\\<rbrakk>\n  \\<Longrightarrow> infinite ?T\n\ngoal (1 subgoal):\n 1. finite S", "by fast"], ["proof (state)\nthis:\n  finite S\n\ngoal (1 subgoal):\n 1. finite\n     {{A \\<union> B |A B.\n       A \\<subseteq> P \\<and>\n       A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P} |\n      \\<phi>. nested_propos \\<phi> \\<subseteq> P}", "hence \"finite {?map P A | A. A \\<in> S}\""], ["proof (prove)\nusing this:\n  finite S\n\ngoal (1 subgoal):\n 1. finite\n     {{Aa \\<union> B |Aa B. Aa \\<in> A \\<and> B \\<subseteq> UNIV - P} |A.\n      A \\<in> S}", "by fastforce\n\n    \\<comment> \\<open>Prove that S' can be embedded into S using ?map\\<close>"], ["proof (state)\nthis:\n  finite\n   {{Aa \\<union> B |Aa B. Aa \\<in> A \\<and> B \\<subseteq> UNIV - P} |A.\n    A \\<in> S}\n\ngoal (1 subgoal):\n 1. finite\n     {{A \\<union> B |A B.\n       A \\<subseteq> P \\<and>\n       A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P} |\n      \\<phi>. nested_propos \\<phi> \\<subseteq> P}", "have \"S' \\<subseteq> {?map P A | A. A \\<in> S}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S' \\<subseteq> {{Aa \\<union> B |Aa B.\n                     Aa \\<in> A \\<and> B \\<subseteq> UNIV - P} |\n                    A. A \\<in> S}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> S' \\<Longrightarrow>\n       x \\<in> {{Aa \\<union> B |Aa B.\n                 Aa \\<in> A \\<and> B \\<subseteq> UNIV - P} |\n                A. A \\<in> S}", "fix A"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> S' \\<Longrightarrow>\n       x \\<in> {{Aa \\<union> B |Aa B.\n                 Aa \\<in> A \\<and> B \\<subseteq> UNIV - P} |\n                A. A \\<in> S}", "assume \"A \\<in> S'\""], ["proof (state)\nthis:\n  A \\<in> S'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> S' \\<Longrightarrow>\n       x \\<in> {{Aa \\<union> B |Aa B.\n                 Aa \\<in> A \\<and> B \\<subseteq> UNIV - P} |\n                A. A \\<in> S}", "then"], ["proof (chain)\npicking this:\n  A \\<in> S'", "obtain \\<phi> where \"nested_propos \\<phi> \\<subseteq> P\"\n        and \"A = {A \\<union> B | A B. A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P}\""], ["proof (prove)\nusing this:\n  A \\<in> S'\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>.\n        \\<lbrakk>nested_propos \\<phi> \\<subseteq> P;\n         A =\n         {A \\<union> B |A B.\n          A \\<subseteq> P \\<and>\n          A \\<Turnstile>\\<^sub>P \\<phi> \\<and>\n          B \\<subseteq> UNIV - P}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using S'_def"], ["proof (prove)\nusing this:\n  A \\<in> S'\n  S' =\n  {{A \\<union> B |A B.\n    A \\<subseteq> P \\<and>\n    A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P} |\n   \\<phi>. nested_propos \\<phi> \\<subseteq> P}\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>.\n        \\<lbrakk>nested_propos \\<phi> \\<subseteq> P;\n         A =\n         {A \\<union> B |A B.\n          A \\<subseteq> P \\<and>\n          A \\<Turnstile>\\<^sub>P \\<phi> \\<and>\n          B \\<subseteq> UNIV - P}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  nested_propos \\<phi> \\<subseteq> P\n  A =\n  {A \\<union> B |A B.\n   A \\<subseteq> P \\<and>\n   A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> S' \\<Longrightarrow>\n       x \\<in> {{Aa \\<union> B |Aa B.\n                 Aa \\<in> A \\<and> B \\<subseteq> UNIV - P} |\n                A. A \\<in> S}", "then"], ["proof (chain)\npicking this:\n  nested_propos \\<phi> \\<subseteq> P\n  A =\n  {A \\<union> B |A B.\n   A \\<subseteq> P \\<and>\n   A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P}", "have \"?map P {A | A. A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi>} = A\""], ["proof (prove)\nusing this:\n  nested_propos \\<phi> \\<subseteq> P\n  A =\n  {A \\<union> B |A B.\n   A \\<subseteq> P \\<and>\n   A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P}\n\ngoal (1 subgoal):\n 1. {A \\<union> B |A B.\n     A \\<in> {A |A.\n              A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi>} \\<and>\n     B \\<subseteq> UNIV - P} =\n    A", "by simp"], ["proof (state)\nthis:\n  {A \\<union> B |A B.\n   A \\<in> {A |A.\n            A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi>} \\<and>\n   B \\<subseteq> UNIV - P} =\n  A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> S' \\<Longrightarrow>\n       x \\<in> {{Aa \\<union> B |Aa B.\n                 Aa \\<in> A \\<and> B \\<subseteq> UNIV - P} |\n                A. A \\<in> S}", "moreover"], ["proof (state)\nthis:\n  {A \\<union> B |A B.\n   A \\<in> {A |A.\n            A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi>} \\<and>\n   B \\<subseteq> UNIV - P} =\n  A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> S' \\<Longrightarrow>\n       x \\<in> {{Aa \\<union> B |Aa B.\n                 Aa \\<in> A \\<and> B \\<subseteq> UNIV - P} |\n                A. A \\<in> S}", "have \"{A | A. A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi>} \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {A |A. A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi>} \\<in> S", "using \\<open>nested_propos \\<phi> \\<subseteq> P\\<close> S_def"], ["proof (prove)\nusing this:\n  nested_propos \\<phi> \\<subseteq> P\n  S =\n  {{A |A. A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi>} |\\<phi>.\n   nested_propos \\<phi> \\<subseteq> P}\n\ngoal (1 subgoal):\n 1. {A |A. A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi>} \\<in> S", "by auto"], ["proof (state)\nthis:\n  {A |A. A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi>} \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> S' \\<Longrightarrow>\n       x \\<in> {{Aa \\<union> B |Aa B.\n                 Aa \\<in> A \\<and> B \\<subseteq> UNIV - P} |\n                A. A \\<in> S}", "ultimately"], ["proof (chain)\npicking this:\n  {A \\<union> B |A B.\n   A \\<in> {A |A.\n            A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi>} \\<and>\n   B \\<subseteq> UNIV - P} =\n  A\n  {A |A. A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi>} \\<in> S", "show \"A \\<in> {?map P A | A. A \\<in> S}\""], ["proof (prove)\nusing this:\n  {A \\<union> B |A B.\n   A \\<in> {A |A.\n            A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi>} \\<and>\n   B \\<subseteq> UNIV - P} =\n  A\n  {A |A. A \\<subseteq> P \\<and> A \\<Turnstile>\\<^sub>P \\<phi>} \\<in> S\n\ngoal (1 subgoal):\n 1. A \\<in> {{Aa \\<union> B |Aa B.\n              Aa \\<in> A \\<and> B \\<subseteq> UNIV - P} |\n             A. A \\<in> S}", "by blast"], ["proof (state)\nthis:\n  A \\<in> {{Aa \\<union> B |Aa B. Aa \\<in> A \\<and> B \\<subseteq> UNIV - P} |\n           A. A \\<in> S}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S' \\<subseteq> {{Aa \\<union> B |Aa B.\n                   Aa \\<in> A \\<and> B \\<subseteq> UNIV - P} |\n                  A. A \\<in> S}\n\ngoal (1 subgoal):\n 1. finite\n     {{A \\<union> B |A B.\n       A \\<subseteq> P \\<and>\n       A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P} |\n      \\<phi>. nested_propos \\<phi> \\<subseteq> P}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     {{A \\<union> B |A B.\n       A \\<subseteq> P \\<and>\n       A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P} |\n      \\<phi>. nested_propos \\<phi> \\<subseteq> P}", "using rev_finite_subset[OF \\<open>finite {?map P A | A. A \\<in> S}\\<close> \\<open>S' \\<subseteq> {?map P A | A. A \\<in> S}\\<close>]"], ["proof (prove)\nusing this:\n  finite S'\n\ngoal (1 subgoal):\n 1. finite\n     {{A \\<union> B |A B.\n       A \\<subseteq> P \\<and>\n       A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P} |\n      \\<phi>. nested_propos \\<phi> \\<subseteq> P}", "unfolding S'_def"], ["proof (prove)\nusing this:\n  finite\n   {{A \\<union> B |A B.\n     A \\<subseteq> P \\<and>\n     A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P} |\n    \\<phi>. nested_propos \\<phi> \\<subseteq> P}\n\ngoal (1 subgoal):\n 1. finite\n     {{A \\<union> B |A B.\n       A \\<subseteq> P \\<and>\n       A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P} |\n      \\<phi>. nested_propos \\<phi> \\<subseteq> P}", "."], ["proof (state)\nthis:\n  finite\n   {{A \\<union> B |A B.\n     A \\<subseteq> P \\<and>\n     A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P} |\n    \\<phi>. nested_propos \\<phi> \\<subseteq> P}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finite\n   {{A \\<union> B |A B.\n     A \\<subseteq> P \\<and>\n     A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P} |\n    \\<phi>. nested_propos \\<phi> \\<subseteq> P}\n\ngoal (1 subgoal):\n 1. finite\n     (sat_models ` {Abs \\<phi> |\\<phi>. nested_propos \\<phi> \\<subseteq> P})", "have Finite2: \"finite {sat_models (Abs \\<phi>) | \\<phi>. nested_propos \\<phi> \\<subseteq> P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     {sat_models (Abs \\<phi>) |\\<phi>. nested_propos \\<phi> \\<subseteq> P}", "unfolding Equal"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     {{A \\<union> B |A B.\n       A \\<subseteq> P \\<and>\n       A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P} |\n      \\<phi>. nested_propos \\<phi> \\<subseteq> P}", "using Finite"], ["proof (prove)\nusing this:\n  finite\n   {{A \\<union> B |A B.\n     A \\<subseteq> P \\<and>\n     A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P} |\n    \\<phi>. nested_propos \\<phi> \\<subseteq> P}\n\ngoal (1 subgoal):\n 1. finite\n     {{A \\<union> B |A B.\n       A \\<subseteq> P \\<and>\n       A \\<Turnstile>\\<^sub>P \\<phi> \\<and> B \\<subseteq> UNIV - P} |\n      \\<phi>. nested_propos \\<phi> \\<subseteq> P}", "by blast"], ["proof (state)\nthis:\n  finite\n   {sat_models (Abs \\<phi>) |\\<phi>. nested_propos \\<phi> \\<subseteq> P}\n\ngoal (1 subgoal):\n 1. finite\n     (sat_models ` {Abs \\<phi> |\\<phi>. nested_propos \\<phi> \\<subseteq> P})", "have Equal2: \"sat_models ` {Abs \\<phi> | \\<phi>. nested_propos \\<phi> \\<subseteq> P} = {sat_models (Abs \\<phi>) | \\<phi>. nested_propos \\<phi> \\<subseteq> P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sat_models ` {Abs \\<phi> |\\<phi>. nested_propos \\<phi> \\<subseteq> P} =\n    {sat_models (Abs \\<phi>) |\\<phi>. nested_propos \\<phi> \\<subseteq> P}", "by blast"], ["proof (state)\nthis:\n  sat_models ` {Abs \\<phi> |\\<phi>. nested_propos \\<phi> \\<subseteq> P} =\n  {sat_models (Abs \\<phi>) |\\<phi>. nested_propos \\<phi> \\<subseteq> P}\n\ngoal (1 subgoal):\n 1. finite\n     (sat_models ` {Abs \\<phi> |\\<phi>. nested_propos \\<phi> \\<subseteq> P})", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     (sat_models ` {Abs \\<phi> |\\<phi>. nested_propos \\<phi> \\<subseteq> P})", "unfolding Equal2"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     {sat_models (Abs \\<phi>) |\\<phi>. nested_propos \\<phi> \\<subseteq> P}", "using Finite2"], ["proof (prove)\nusing this:\n  finite\n   {sat_models (Abs \\<phi>) |\\<phi>. nested_propos \\<phi> \\<subseteq> P}\n\ngoal (1 subgoal):\n 1. finite\n     {sat_models (Abs \\<phi>) |\\<phi>. nested_propos \\<phi> \\<subseteq> P}", "by blast"], ["proof (state)\nthis:\n  finite\n   (sat_models ` {Abs \\<phi> |\\<phi>. nested_propos \\<phi> \\<subseteq> P})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ltl_prop_equiv_quotient_restricted_to_P_finite:\n  assumes \"finite P\"\n  shows \"finite {Abs \\<phi> | \\<phi>. nested_propos \\<phi> \\<subseteq> P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {Abs \\<phi> |\\<phi>. nested_propos \\<phi> \\<subseteq> P}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite {Abs \\<phi> |\\<phi>. nested_propos \\<phi> \\<subseteq> P}", "have \"inj_on sat_models {Abs \\<phi> |\\<phi>. nested_propos \\<phi> \\<subseteq> P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on sat_models\n     {Abs \\<phi> |\\<phi>. nested_propos \\<phi> \\<subseteq> P}", "using sat_models_inj subset_inj_on"], ["proof (prove)\nusing this:\n  inj sat_models\n  \\<lbrakk>inj_on ?f ?B; ?A \\<subseteq> ?B\\<rbrakk>\n  \\<Longrightarrow> inj_on ?f ?A\n\ngoal (1 subgoal):\n 1. inj_on sat_models\n     {Abs \\<phi> |\\<phi>. nested_propos \\<phi> \\<subseteq> P}", "by auto"], ["proof (state)\nthis:\n  inj_on sat_models {Abs \\<phi> |\\<phi>. nested_propos \\<phi> \\<subseteq> P}\n\ngoal (1 subgoal):\n 1. finite {Abs \\<phi> |\\<phi>. nested_propos \\<phi> \\<subseteq> P}", "thus ?thesis"], ["proof (prove)\nusing this:\n  inj_on sat_models {Abs \\<phi> |\\<phi>. nested_propos \\<phi> \\<subseteq> P}\n\ngoal (1 subgoal):\n 1. finite {Abs \\<phi> |\\<phi>. nested_propos \\<phi> \\<subseteq> P}", "using finite_imageD[OF sat_models_finite_image[OF assms]]"], ["proof (prove)\nusing this:\n  inj_on sat_models {Abs \\<phi> |\\<phi>. nested_propos \\<phi> \\<subseteq> P}\n  inj_on sat_models\n   {Abs \\<phi> |\\<phi>.\n    nested_propos \\<phi> \\<subseteq> P} \\<Longrightarrow>\n  finite {Abs \\<phi> |\\<phi>. nested_propos \\<phi> \\<subseteq> P}\n\ngoal (1 subgoal):\n 1. finite {Abs \\<phi> |\\<phi>. nested_propos \\<phi> \\<subseteq> P}", "by fast"], ["proof (state)\nthis:\n  finite {Abs \\<phi> |\\<phi>. nested_propos \\<phi> \\<subseteq> P}\n\ngoal:\nNo subgoals!", "qed"], ["", "locale lift_ltl_transformer =\n  fixes\n    f :: \"'a ltl \\<Rightarrow> 'b \\<Rightarrow> 'a ltl\"\n  assumes\n    respectfulness: \"\\<phi> \\<equiv>\\<^sub>P \\<psi> \\<Longrightarrow> f \\<phi> \\<nu> \\<equiv>\\<^sub>P f \\<psi> \\<nu>\"\n  assumes\n    nested_propos_bounded: \"nested_propos (f \\<phi> \\<nu>) \\<subseteq> nested_propos \\<phi>\"\nbegin"], ["", "lift_definition f_abs :: \"'a ltl\\<^sub>P \\<Rightarrow> 'b \\<Rightarrow> 'a ltl\\<^sub>P\" is f"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ltl1 ltl2 b.\n       ltl1 \\<equiv>\\<^sub>P ltl2 \\<Longrightarrow>\n       f ltl1 b \\<equiv>\\<^sub>P f ltl2 b", "using respectfulness"], ["proof (prove)\nusing this:\n  ?\\<phi> \\<equiv>\\<^sub>P ?\\<psi> \\<Longrightarrow>\n  f ?\\<phi> ?\\<nu> \\<equiv>\\<^sub>P f ?\\<psi> ?\\<nu>\n\ngoal (1 subgoal):\n 1. \\<And>ltl1 ltl2 b.\n       ltl1 \\<equiv>\\<^sub>P ltl2 \\<Longrightarrow>\n       f ltl1 b \\<equiv>\\<^sub>P f ltl2 b", "."], ["", "lift_definition f_foldl_abs :: \"'a ltl\\<^sub>P \\<Rightarrow> 'b list \\<Rightarrow> 'a ltl\\<^sub>P\" is \"foldl f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ltl1 ltl2 list.\n       ltl1 \\<equiv>\\<^sub>P ltl2 \\<Longrightarrow>\n       foldl f ltl1 list \\<equiv>\\<^sub>P foldl f ltl2 list", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ltl1 ltl2 list.\n       ltl1 \\<equiv>\\<^sub>P ltl2 \\<Longrightarrow>\n       foldl f ltl1 list \\<equiv>\\<^sub>P foldl f ltl2 list", "fix \\<phi> \\<psi> :: \"'a ltl\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ltl1 ltl2 list.\n       ltl1 \\<equiv>\\<^sub>P ltl2 \\<Longrightarrow>\n       foldl f ltl1 list \\<equiv>\\<^sub>P foldl f ltl2 list", "fix w :: \"'b list\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ltl1 ltl2 list.\n       ltl1 \\<equiv>\\<^sub>P ltl2 \\<Longrightarrow>\n       foldl f ltl1 list \\<equiv>\\<^sub>P foldl f ltl2 list", "assume \"\\<phi> \\<equiv>\\<^sub>P \\<psi>\""], ["proof (state)\nthis:\n  \\<phi> \\<equiv>\\<^sub>P \\<psi>\n\ngoal (1 subgoal):\n 1. \\<And>ltl1 ltl2 list.\n       ltl1 \\<equiv>\\<^sub>P ltl2 \\<Longrightarrow>\n       foldl f ltl1 list \\<equiv>\\<^sub>P foldl f ltl2 list", "thus \"foldl f \\<phi> w \\<equiv>\\<^sub>P foldl f \\<psi> w\""], ["proof (prove)\nusing this:\n  \\<phi> \\<equiv>\\<^sub>P \\<psi>\n\ngoal (1 subgoal):\n 1. foldl f \\<phi> w \\<equiv>\\<^sub>P foldl f \\<psi> w", "using respectfulness"], ["proof (prove)\nusing this:\n  \\<phi> \\<equiv>\\<^sub>P \\<psi>\n  ?\\<phi> \\<equiv>\\<^sub>P ?\\<psi> \\<Longrightarrow>\n  f ?\\<phi> ?\\<nu> \\<equiv>\\<^sub>P f ?\\<psi> ?\\<nu>\n\ngoal (1 subgoal):\n 1. foldl f \\<phi> w \\<equiv>\\<^sub>P foldl f \\<psi> w", "by (induction w arbitrary: \\<phi> \\<psi>) simp+"], ["proof (state)\nthis:\n  foldl f \\<phi> w \\<equiv>\\<^sub>P foldl f \\<psi> w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma f_foldl_abs_alt_def:\n  \"f_foldl_abs (Abs \\<phi>) w = foldl f_abs (Abs \\<phi>) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f_foldl_abs (Abs \\<phi>) w = foldl f_abs (Abs \\<phi>) w", "by (induction w rule: rev_induct) (unfold f_foldl_abs.abs_eq foldl.simps foldl_append, (metis f_abs.abs_eq)+)"], ["", "definition abs_reach :: \"'a ltl_prop_equiv_quotient \\<Rightarrow> 'a ltl_prop_equiv_quotient set\"\nwhere\n  \"abs_reach \\<Phi> = {foldl f_abs \\<Phi> w |w. True}\""], ["", "lemma finite_abs_reach:\n  \"finite (abs_reach (Abs \\<phi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (abs_reach (Abs \\<phi>))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (abs_reach (Abs \\<phi>))", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (abs_reach (Abs \\<phi>))", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (abs_reach (Abs \\<phi>))", "have \"nested_propos (foldl f \\<phi> w) \\<subseteq> nested_propos \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nested_propos (foldl f \\<phi> w) \\<subseteq> nested_propos \\<phi>", "by (induction w arbitrary: \\<phi>) (simp, metis foldl_Cons nested_propos_bounded subset_trans)"], ["proof (state)\nthis:\n  nested_propos (foldl f \\<phi> w) \\<subseteq> nested_propos \\<phi>\n\ngoal (1 subgoal):\n 1. finite (abs_reach (Abs \\<phi>))", "}"], ["proof (state)\nthis:\n  nested_propos (foldl f \\<phi> ?w2) \\<subseteq> nested_propos \\<phi>\n\ngoal (1 subgoal):\n 1. finite (abs_reach (Abs \\<phi>))", "hence \"abs_reach (Abs \\<phi>) \\<subseteq> {Abs \\<chi> | \\<chi>. nested_propos \\<chi> \\<subseteq> nested_propos \\<phi>}\""], ["proof (prove)\nusing this:\n  nested_propos (foldl f \\<phi> ?w2) \\<subseteq> nested_propos \\<phi>\n\ngoal (1 subgoal):\n 1. abs_reach (Abs \\<phi>)\n    \\<subseteq> {Abs \\<chi> |\\<chi>.\n                 nested_propos \\<chi> \\<subseteq> nested_propos \\<phi>}", "unfolding abs_reach_def f_foldl_abs_alt_def[symmetric] f_foldl_abs.abs_eq"], ["proof (prove)\nusing this:\n  nested_propos (foldl f \\<phi> ?w2) \\<subseteq> nested_propos \\<phi>\n\ngoal (1 subgoal):\n 1. {Abs (foldl f \\<phi> w) |w. True}\n    \\<subseteq> {Abs \\<chi> |\\<chi>.\n                 nested_propos \\<chi> \\<subseteq> nested_propos \\<phi>}", "by blast"], ["proof (state)\nthis:\n  abs_reach (Abs \\<phi>)\n  \\<subseteq> {Abs \\<chi> |\\<chi>.\n               nested_propos \\<chi> \\<subseteq> nested_propos \\<phi>}\n\ngoal (1 subgoal):\n 1. finite (abs_reach (Abs \\<phi>))", "thus ?thesis"], ["proof (prove)\nusing this:\n  abs_reach (Abs \\<phi>)\n  \\<subseteq> {Abs \\<chi> |\\<chi>.\n               nested_propos \\<chi> \\<subseteq> nested_propos \\<phi>}\n\ngoal (1 subgoal):\n 1. finite (abs_reach (Abs \\<phi>))", "using ltl_prop_equiv_quotient_restricted_to_P_finite finite_propos"], ["proof (prove)\nusing this:\n  abs_reach (Abs \\<phi>)\n  \\<subseteq> {Abs \\<chi> |\\<chi>.\n               nested_propos \\<chi> \\<subseteq> nested_propos \\<phi>}\n  finite ?P \\<Longrightarrow>\n  finite {Abs \\<phi> |\\<phi>. nested_propos \\<phi> \\<subseteq> ?P}\n  finite (propos ?\\<phi>)\n  finite (nested_propos ?\\<phi>)\n\ngoal (1 subgoal):\n 1. finite (abs_reach (Abs \\<phi>))", "by (blast dest: finite_subset)"], ["proof (state)\nthis:\n  finite (abs_reach (Abs \\<phi>))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}