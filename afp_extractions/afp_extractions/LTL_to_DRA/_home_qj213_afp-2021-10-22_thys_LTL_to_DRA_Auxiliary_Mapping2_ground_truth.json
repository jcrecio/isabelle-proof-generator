{"file_name": "/home/qj213/afp-2021-10-22/thys/LTL_to_DRA/Auxiliary/Mapping2.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/LTL_to_DRA", "problem_names": ["lemma lookup_delete:\n  \"Mapping.lookup (Mapping.delete k m) k = None\"", "lemma lookup_tabulate:\n  \"Mapping.lookup (Mapping.tabulate xs f) x = (if x \\<in> set xs then Some (f x) else None)\"", "lemma lookup_tabulate_Some:\n  \"x \\<in> set xs \\<Longrightarrow> the (Mapping.lookup (Mapping.tabulate xs f) x) = f x\"", "lemma finite_keys_tabulate:\n  \"finite (Mapping.keys (Mapping.tabulate xs f))\"", "lemma keys_empty_iff_map_empty:\n  \"Mapping.keys m = {} \\<longleftrightarrow> m = Mapping.empty\"", "lemma mapping_equal:\n  \"Mapping.keys m = Mapping.keys m' \\<Longrightarrow> (\\<And>x. x \\<in> Mapping.keys m \\<Longrightarrow> Mapping.lookup m x = Mapping.lookup m' x) \\<Longrightarrow> m = m'\"", "lemma mapping_generator_code [code]:\n  \"mapping_generator V K = set (mapping_generator_list V K)\"", "lemma mapping_generator_set_eq:\n  \"mapping_generator V K = {m. Mapping.keys m = set K \\<and> (\\<forall>k \\<in> (set K). the (Mapping.lookup m k) \\<in> set (V k))}\""], "translations": [["", "lemma lookup_delete:\n  \"Mapping.lookup (Mapping.delete k m) k = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Mapping.lookup (Mapping.delete k m) k = None", "by (transfer; simp)"], ["", "lemma lookup_tabulate:\n  \"Mapping.lookup (Mapping.tabulate xs f) x = (if x \\<in> set xs then Some (f x) else None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Mapping.lookup (Mapping.tabulate xs f) x =\n    (if x \\<in> set xs then Some (f x) else None)", "by (transfer; insert map_of_tabulate_simp)"], ["", "lemma lookup_tabulate_Some:\n  \"x \\<in> set xs \\<Longrightarrow> the (Mapping.lookup (Mapping.tabulate xs f) x) = f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set xs \\<Longrightarrow>\n    the (Mapping.lookup (Mapping.tabulate xs f) x) = f x", "by (simp add: lookup_tabulate)"], ["", "lemma finite_keys_tabulate:\n  \"finite (Mapping.keys (Mapping.tabulate xs f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (Mapping.keys (Mapping.tabulate xs f))", "by simp"], ["", "lemma keys_empty_iff_map_empty:\n  \"Mapping.keys m = {} \\<longleftrightarrow> m = Mapping.empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Mapping.keys m = {}) = (m = Mapping.empty)", "by (transfer; simp)"], ["", "lemma mapping_equal:\n  \"Mapping.keys m = Mapping.keys m' \\<Longrightarrow> (\\<And>x. x \\<in> Mapping.keys m \\<Longrightarrow> Mapping.lookup m x = Mapping.lookup m' x) \\<Longrightarrow> m = m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Mapping.keys m = Mapping.keys m';\n     \\<And>x.\n        x \\<in> Mapping.keys m \\<Longrightarrow>\n        Mapping.lookup m x = Mapping.lookup m' x\\<rbrakk>\n    \\<Longrightarrow> m = m'", "by (transfer; blast intro: map_equal)"], ["", "fun mapping_generator :: \"('a \\<Rightarrow> 'b list) \\<Rightarrow> 'a list \\<Rightarrow> ('a, 'b) mapping set\"\nwhere\n  \"mapping_generator V [] = {Mapping.empty}\"\n| \"mapping_generator V (k#ks) = {Mapping.update k v m | v m.  v \\<in> set (V k) \\<and> m \\<in> mapping_generator V ks}\""], ["", "fun mapping_generator_list :: \"('a \\<Rightarrow> 'b list) \\<Rightarrow> 'a list \\<Rightarrow> ('a, 'b) mapping list\"\nwhere\n  \"mapping_generator_list V [] = [Mapping.empty]\"\n| \"mapping_generator_list V (k#ks) = concat (map (\\<lambda>m. map (\\<lambda>v. Mapping.update k v m) (V k)) (mapping_generator_list V ks))\""], ["", "lemma mapping_generator_code [code]:\n  \"mapping_generator V K = set (mapping_generator_list V K)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mapping_generator V K = set (mapping_generator_list V K)", "by (induction K) auto"], ["", "lemma mapping_generator_set_eq:\n  \"mapping_generator V K = {m. Mapping.keys m = set K \\<and> (\\<forall>k \\<in> (set K). the (Mapping.lookup m k) \\<in> set (V k))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mapping_generator V K =\n    {m. Mapping.keys m = set K \\<and>\n        (\\<forall>k\\<in>set K. the (Mapping.lookup m k) \\<in> set (V k))}", "proof (induction K)"], ["proof (state)\ngoal (2 subgoals):\n 1. mapping_generator V [] =\n    {m. Mapping.keys m = set [] \\<and>\n        (\\<forall>k\\<in>set []. the (Mapping.lookup m k) \\<in> set (V k))}\n 2. \\<And>a K.\n       mapping_generator V K =\n       {m. Mapping.keys m = set K \\<and>\n           (\\<forall>k\\<in>set K.\n               the (Mapping.lookup m k) \\<in> set (V k))} \\<Longrightarrow>\n       mapping_generator V (a # K) =\n       {m. Mapping.keys m = set (a # K) \\<and>\n           (\\<forall>k\\<in>set (a # K).\n               the (Mapping.lookup m k) \\<in> set (V k))}", "case (Cons k ks)"], ["proof (state)\nthis:\n  mapping_generator V ks =\n  {m. Mapping.keys m = set ks \\<and>\n      (\\<forall>k\\<in>set ks. the (Mapping.lookup m k) \\<in> set (V k))}\n\ngoal (2 subgoals):\n 1. mapping_generator V [] =\n    {m. Mapping.keys m = set [] \\<and>\n        (\\<forall>k\\<in>set []. the (Mapping.lookup m k) \\<in> set (V k))}\n 2. \\<And>a K.\n       mapping_generator V K =\n       {m. Mapping.keys m = set K \\<and>\n           (\\<forall>k\\<in>set K.\n               the (Mapping.lookup m k) \\<in> set (V k))} \\<Longrightarrow>\n       mapping_generator V (a # K) =\n       {m. Mapping.keys m = set (a # K) \\<and>\n           (\\<forall>k\\<in>set (a # K).\n               the (Mapping.lookup m k) \\<in> set (V k))}", "let ?l = \"{m(k \\<mapsto> v) |v m. v \\<in> set (V k) \\<and>  m \\<in> {m. dom m = set ks \\<and> (\\<forall>k\\<in>set ks. the (m k) \\<in> set (V k))}}\""], ["proof (state)\ngoal (2 subgoals):\n 1. mapping_generator V [] =\n    {m. Mapping.keys m = set [] \\<and>\n        (\\<forall>k\\<in>set []. the (Mapping.lookup m k) \\<in> set (V k))}\n 2. \\<And>a K.\n       mapping_generator V K =\n       {m. Mapping.keys m = set K \\<and>\n           (\\<forall>k\\<in>set K.\n               the (Mapping.lookup m k) \\<in> set (V k))} \\<Longrightarrow>\n       mapping_generator V (a # K) =\n       {m. Mapping.keys m = set (a # K) \\<and>\n           (\\<forall>k\\<in>set (a # K).\n               the (Mapping.lookup m k) \\<in> set (V k))}", "let ?r = \"{m. dom m = set (k # ks) \\<and> (\\<forall>k\\<in>set (k # ks). the (m k) \\<in> set (V k))}\""], ["proof (state)\ngoal (2 subgoals):\n 1. mapping_generator V [] =\n    {m. Mapping.keys m = set [] \\<and>\n        (\\<forall>k\\<in>set []. the (Mapping.lookup m k) \\<in> set (V k))}\n 2. \\<And>a K.\n       mapping_generator V K =\n       {m. Mapping.keys m = set K \\<and>\n           (\\<forall>k\\<in>set K.\n               the (Mapping.lookup m k) \\<in> set (V k))} \\<Longrightarrow>\n       mapping_generator V (a # K) =\n       {m. Mapping.keys m = set (a # K) \\<and>\n           (\\<forall>k\\<in>set (a # K).\n               the (Mapping.lookup m k) \\<in> set (V k))}", "have \"?l \\<subseteq> ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {m(k \\<mapsto> v) |v m.\n     v \\<in> set (V k) \\<and>\n     m \\<in> {m. dom m = set ks \\<and>\n                 (\\<forall>k\\<in>set ks. the (m k) \\<in> set (V k))}}\n    \\<subseteq> {m. dom m = set (k # ks) \\<and>\n                    (\\<forall>k\\<in>set (k # ks).\n                        the (m k) \\<in> set (V k))}", "by fastforce"], ["proof (state)\nthis:\n  {m(k \\<mapsto> v) |v m.\n   v \\<in> set (V k) \\<and>\n   m \\<in> {m. dom m = set ks \\<and>\n               (\\<forall>k\\<in>set ks. the (m k) \\<in> set (V k))}}\n  \\<subseteq> {m. dom m = set (k # ks) \\<and>\n                  (\\<forall>k\\<in>set (k # ks). the (m k) \\<in> set (V k))}\n\ngoal (2 subgoals):\n 1. mapping_generator V [] =\n    {m. Mapping.keys m = set [] \\<and>\n        (\\<forall>k\\<in>set []. the (Mapping.lookup m k) \\<in> set (V k))}\n 2. \\<And>a K.\n       mapping_generator V K =\n       {m. Mapping.keys m = set K \\<and>\n           (\\<forall>k\\<in>set K.\n               the (Mapping.lookup m k) \\<in> set (V k))} \\<Longrightarrow>\n       mapping_generator V (a # K) =\n       {m. Mapping.keys m = set (a # K) \\<and>\n           (\\<forall>k\\<in>set (a # K).\n               the (Mapping.lookup m k) \\<in> set (V k))}", "moreover"], ["proof (state)\nthis:\n  {m(k \\<mapsto> v) |v m.\n   v \\<in> set (V k) \\<and>\n   m \\<in> {m. dom m = set ks \\<and>\n               (\\<forall>k\\<in>set ks. the (m k) \\<in> set (V k))}}\n  \\<subseteq> {m. dom m = set (k # ks) \\<and>\n                  (\\<forall>k\\<in>set (k # ks). the (m k) \\<in> set (V k))}\n\ngoal (2 subgoals):\n 1. mapping_generator V [] =\n    {m. Mapping.keys m = set [] \\<and>\n        (\\<forall>k\\<in>set []. the (Mapping.lookup m k) \\<in> set (V k))}\n 2. \\<And>a K.\n       mapping_generator V K =\n       {m. Mapping.keys m = set K \\<and>\n           (\\<forall>k\\<in>set K.\n               the (Mapping.lookup m k) \\<in> set (V k))} \\<Longrightarrow>\n       mapping_generator V (a # K) =\n       {m. Mapping.keys m = set (a # K) \\<and>\n           (\\<forall>k\\<in>set (a # K).\n               the (Mapping.lookup m k) \\<in> set (V k))}", "{"], ["proof (state)\nthis:\n  {m(k \\<mapsto> v) |v m.\n   v \\<in> set (V k) \\<and>\n   m \\<in> {m. dom m = set ks \\<and>\n               (\\<forall>k\\<in>set ks. the (m k) \\<in> set (V k))}}\n  \\<subseteq> {m. dom m = set (k # ks) \\<and>\n                  (\\<forall>k\\<in>set (k # ks). the (m k) \\<in> set (V k))}\n\ngoal (2 subgoals):\n 1. mapping_generator V [] =\n    {m. Mapping.keys m = set [] \\<and>\n        (\\<forall>k\\<in>set []. the (Mapping.lookup m k) \\<in> set (V k))}\n 2. \\<And>a K.\n       mapping_generator V K =\n       {m. Mapping.keys m = set K \\<and>\n           (\\<forall>k\\<in>set K.\n               the (Mapping.lookup m k) \\<in> set (V k))} \\<Longrightarrow>\n       mapping_generator V (a # K) =\n       {m. Mapping.keys m = set (a # K) \\<and>\n           (\\<forall>k\\<in>set (a # K).\n               the (Mapping.lookup m k) \\<in> set (V k))}", "fix m"], ["proof (state)\ngoal (2 subgoals):\n 1. mapping_generator V [] =\n    {m. Mapping.keys m = set [] \\<and>\n        (\\<forall>k\\<in>set []. the (Mapping.lookup m k) \\<in> set (V k))}\n 2. \\<And>a K.\n       mapping_generator V K =\n       {m. Mapping.keys m = set K \\<and>\n           (\\<forall>k\\<in>set K.\n               the (Mapping.lookup m k) \\<in> set (V k))} \\<Longrightarrow>\n       mapping_generator V (a # K) =\n       {m. Mapping.keys m = set (a # K) \\<and>\n           (\\<forall>k\\<in>set (a # K).\n               the (Mapping.lookup m k) \\<in> set (V k))}", "assume \"m \\<in> ?r\""], ["proof (state)\nthis:\n  m \\<in> {m. dom m = set (k # ks) \\<and>\n              (\\<forall>k\\<in>set (k # ks). the (m k) \\<in> set (V k))}\n\ngoal (2 subgoals):\n 1. mapping_generator V [] =\n    {m. Mapping.keys m = set [] \\<and>\n        (\\<forall>k\\<in>set []. the (Mapping.lookup m k) \\<in> set (V k))}\n 2. \\<And>a K.\n       mapping_generator V K =\n       {m. Mapping.keys m = set K \\<and>\n           (\\<forall>k\\<in>set K.\n               the (Mapping.lookup m k) \\<in> set (V k))} \\<Longrightarrow>\n       mapping_generator V (a # K) =\n       {m. Mapping.keys m = set (a # K) \\<and>\n           (\\<forall>k\\<in>set (a # K).\n               the (Mapping.lookup m k) \\<in> set (V k))}", "hence \"dom m = set (k#ks)\" \n        and \"\\<forall>k \\<in> set (k#ks). the (m k) \\<in> set (V k)\" \n        and \"\\<forall>k' \\<in> set (k#ks). m k \\<noteq> None\""], ["proof (prove)\nusing this:\n  m \\<in> {m. dom m = set (k # ks) \\<and>\n              (\\<forall>k\\<in>set (k # ks). the (m k) \\<in> set (V k))}\n\ngoal (1 subgoal):\n 1. dom m = set (k # ks) &&&\n    \\<forall>k\\<in>set (k # ks). the (m k) \\<in> set (V k) &&&\n    \\<forall>k'\\<in>set (k # ks). m k \\<noteq> None", "by auto"], ["proof (state)\nthis:\n  dom m = set (k # ks)\n  \\<forall>k\\<in>set (k # ks). the (m k) \\<in> set (V k)\n  \\<forall>k'\\<in>set (k # ks). m k \\<noteq> None\n\ngoal (2 subgoals):\n 1. mapping_generator V [] =\n    {m. Mapping.keys m = set [] \\<and>\n        (\\<forall>k\\<in>set []. the (Mapping.lookup m k) \\<in> set (V k))}\n 2. \\<And>a K.\n       mapping_generator V K =\n       {m. Mapping.keys m = set K \\<and>\n           (\\<forall>k\\<in>set K.\n               the (Mapping.lookup m k) \\<in> set (V k))} \\<Longrightarrow>\n       mapping_generator V (a # K) =\n       {m. Mapping.keys m = set (a # K) \\<and>\n           (\\<forall>k\\<in>set (a # K).\n               the (Mapping.lookup m k) \\<in> set (V k))}", "moreover"], ["proof (state)\nthis:\n  dom m = set (k # ks)\n  \\<forall>k\\<in>set (k # ks). the (m k) \\<in> set (V k)\n  \\<forall>k'\\<in>set (k # ks). m k \\<noteq> None\n\ngoal (2 subgoals):\n 1. mapping_generator V [] =\n    {m. Mapping.keys m = set [] \\<and>\n        (\\<forall>k\\<in>set []. the (Mapping.lookup m k) \\<in> set (V k))}\n 2. \\<And>a K.\n       mapping_generator V K =\n       {m. Mapping.keys m = set K \\<and>\n           (\\<forall>k\\<in>set K.\n               the (Mapping.lookup m k) \\<in> set (V k))} \\<Longrightarrow>\n       mapping_generator V (a # K) =\n       {m. Mapping.keys m = set (a # K) \\<and>\n           (\\<forall>k\\<in>set (a # K).\n               the (Mapping.lookup m k) \\<in> set (V k))}", "then"], ["proof (chain)\npicking this:\n  dom m = set (k # ks)\n  \\<forall>k\\<in>set (k # ks). the (m k) \\<in> set (V k)\n  \\<forall>k'\\<in>set (k # ks). m k \\<noteq> None", "obtain m' where \"dom m' = set ks\"\n        and \"\\<forall>x \\<in> set ks. m x = m' x\""], ["proof (prove)\nusing this:\n  dom m = set (k # ks)\n  \\<forall>k\\<in>set (k # ks). the (m k) \\<in> set (V k)\n  \\<forall>k'\\<in>set (k # ks). m k \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>m'.\n        \\<lbrakk>dom m' = set ks; \\<forall>x\\<in>set ks. m x = m' x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using map_reduce[of m k \"set ks\"]"], ["proof (prove)\nusing this:\n  dom m = set (k # ks)\n  \\<forall>k\\<in>set (k # ks). the (m k) \\<in> set (V k)\n  \\<forall>k'\\<in>set (k # ks). m k \\<noteq> None\n  dom m = {k} \\<union> set ks \\<Longrightarrow>\n  \\<exists>m'. dom m' = set ks \\<and> (\\<forall>x\\<in>set ks. m x = m' x)\n\ngoal (1 subgoal):\n 1. (\\<And>m'.\n        \\<lbrakk>dom m' = set ks; \\<forall>x\\<in>set ks. m x = m' x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  dom m' = set ks\n  \\<forall>x\\<in>set ks. m x = m' x\n\ngoal (2 subgoals):\n 1. mapping_generator V [] =\n    {m. Mapping.keys m = set [] \\<and>\n        (\\<forall>k\\<in>set []. the (Mapping.lookup m k) \\<in> set (V k))}\n 2. \\<And>a K.\n       mapping_generator V K =\n       {m. Mapping.keys m = set K \\<and>\n           (\\<forall>k\\<in>set K.\n               the (Mapping.lookup m k) \\<in> set (V k))} \\<Longrightarrow>\n       mapping_generator V (a # K) =\n       {m. Mapping.keys m = set (a # K) \\<and>\n           (\\<forall>k\\<in>set (a # K).\n               the (Mapping.lookup m k) \\<in> set (V k))}", "ultimately"], ["proof (chain)\npicking this:\n  dom m = set (k # ks)\n  \\<forall>k\\<in>set (k # ks). the (m k) \\<in> set (V k)\n  \\<forall>k'\\<in>set (k # ks). m k \\<noteq> None\n  dom m' = set ks\n  \\<forall>x\\<in>set ks. m x = m' x", "have \"the (m k) \\<in> set (V k)\"\n        and \"dom m' = set ks\" \n        and \"\\<forall>k \\<in> (set ks). the (m' k) \\<in> set (V k)\"\n        and \"m = m'(k \\<mapsto> the (m k))\""], ["proof (prove)\nusing this:\n  dom m = set (k # ks)\n  \\<forall>k\\<in>set (k # ks). the (m k) \\<in> set (V k)\n  \\<forall>k'\\<in>set (k # ks). m k \\<noteq> None\n  dom m' = set ks\n  \\<forall>x\\<in>set ks. m x = m' x\n\ngoal (1 subgoal):\n 1. (the (m k) \\<in> set (V k) &&& dom m' = set ks) &&&\n    \\<forall>k\\<in>set ks. the (m' k) \\<in> set (V k) &&&\n    m = m'(k \\<mapsto> the (m k))", "apply (simp, blast, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>dom m = insert k (set ks); dom m' = set ks;\n        \\<forall>x\\<in>set ks. m x = m' x; y \\<in> set (V k);\n        \\<forall>k\\<in>set ks. the (m' k) \\<in> set (V k);\n        m k = Some y\\<rbrakk>\n       \\<Longrightarrow> m = m'(k \\<mapsto> y)", "apply (insert map_equal[of m \"m'(k \\<mapsto> the (m k))\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>dom m = insert k (set ks); dom m' = set ks;\n        \\<forall>x\\<in>set ks. m x = m' x; y \\<in> set (V k);\n        \\<forall>k\\<in>set ks. the (m' k) \\<in> set (V k); m k = Some y;\n        \\<lbrakk>dom m = dom (m'(k \\<mapsto> the (m k)));\n         \\<And>x.\n            x \\<in> dom m \\<Longrightarrow>\n            m x = (m'(k \\<mapsto> the (m k))) x\\<rbrakk>\n        \\<Longrightarrow> m = m'(k \\<mapsto> the (m k))\\<rbrakk>\n       \\<Longrightarrow> m = m'(k \\<mapsto> y)", "apply (unfold dom_map_update \\<open>dom m = set (k#ks)\\<close> \\<open>dom m' = set ks\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>set (k # ks) = insert k (set ks); set ks = set ks;\n        \\<forall>x\\<in>set ks. m x = m' x; y \\<in> set (V k);\n        \\<forall>k\\<in>set ks. the (m' k) \\<in> set (V k); m k = Some y;\n        \\<lbrakk>set (k # ks) = set ks \\<union> {k};\n         \\<And>x.\n            x \\<in> set (k # ks) \\<Longrightarrow>\n            m x = (m'(k \\<mapsto> the (m k))) x\\<rbrakk>\n        \\<Longrightarrow> m = m'(k \\<mapsto> the (m k))\\<rbrakk>\n       \\<Longrightarrow> m = m'(k \\<mapsto> y)", "by fastforce"], ["proof (state)\nthis:\n  the (m k) \\<in> set (V k)\n  dom m' = set ks\n  \\<forall>k\\<in>set ks. the (m' k) \\<in> set (V k)\n  m = m'(k \\<mapsto> the (m k))\n\ngoal (2 subgoals):\n 1. mapping_generator V [] =\n    {m. Mapping.keys m = set [] \\<and>\n        (\\<forall>k\\<in>set []. the (Mapping.lookup m k) \\<in> set (V k))}\n 2. \\<And>a K.\n       mapping_generator V K =\n       {m. Mapping.keys m = set K \\<and>\n           (\\<forall>k\\<in>set K.\n               the (Mapping.lookup m k) \\<in> set (V k))} \\<Longrightarrow>\n       mapping_generator V (a # K) =\n       {m. Mapping.keys m = set (a # K) \\<and>\n           (\\<forall>k\\<in>set (a # K).\n               the (Mapping.lookup m k) \\<in> set (V k))}", "moreover"], ["proof (state)\nthis:\n  the (m k) \\<in> set (V k)\n  dom m' = set ks\n  \\<forall>k\\<in>set ks. the (m' k) \\<in> set (V k)\n  m = m'(k \\<mapsto> the (m k))\n\ngoal (2 subgoals):\n 1. mapping_generator V [] =\n    {m. Mapping.keys m = set [] \\<and>\n        (\\<forall>k\\<in>set []. the (Mapping.lookup m k) \\<in> set (V k))}\n 2. \\<And>a K.\n       mapping_generator V K =\n       {m. Mapping.keys m = set K \\<and>\n           (\\<forall>k\\<in>set K.\n               the (Mapping.lookup m k) \\<in> set (V k))} \\<Longrightarrow>\n       mapping_generator V (a # K) =\n       {m. Mapping.keys m = set (a # K) \\<and>\n           (\\<forall>k\\<in>set (a # K).\n               the (Mapping.lookup m k) \\<in> set (V k))}", "hence \"m \\<in> set (map (\\<lambda>v. m'(k \\<mapsto> v)) (V k))\""], ["proof (prove)\nusing this:\n  the (m k) \\<in> set (V k)\n  dom m' = set ks\n  \\<forall>k\\<in>set ks. the (m' k) \\<in> set (V k)\n  m = m'(k \\<mapsto> the (m k))\n\ngoal (1 subgoal):\n 1. m \\<in> set (map (\\<lambda>v. m'(k \\<mapsto> v)) (V k))", "by simp"], ["proof (state)\nthis:\n  m \\<in> set (map (\\<lambda>v. m'(k \\<mapsto> v)) (V k))\n\ngoal (2 subgoals):\n 1. mapping_generator V [] =\n    {m. Mapping.keys m = set [] \\<and>\n        (\\<forall>k\\<in>set []. the (Mapping.lookup m k) \\<in> set (V k))}\n 2. \\<And>a K.\n       mapping_generator V K =\n       {m. Mapping.keys m = set K \\<and>\n           (\\<forall>k\\<in>set K.\n               the (Mapping.lookup m k) \\<in> set (V k))} \\<Longrightarrow>\n       mapping_generator V (a # K) =\n       {m. Mapping.keys m = set (a # K) \\<and>\n           (\\<forall>k\\<in>set (a # K).\n               the (Mapping.lookup m k) \\<in> set (V k))}", "ultimately"], ["proof (chain)\npicking this:\n  the (m k) \\<in> set (V k)\n  dom m' = set ks\n  \\<forall>k\\<in>set ks. the (m' k) \\<in> set (V k)\n  m = m'(k \\<mapsto> the (m k))\n  m \\<in> set (map (\\<lambda>v. m'(k \\<mapsto> v)) (V k))", "have \"m \\<in> ?l\""], ["proof (prove)\nusing this:\n  the (m k) \\<in> set (V k)\n  dom m' = set ks\n  \\<forall>k\\<in>set ks. the (m' k) \\<in> set (V k)\n  m = m'(k \\<mapsto> the (m k))\n  m \\<in> set (map (\\<lambda>v. m'(k \\<mapsto> v)) (V k))\n\ngoal (1 subgoal):\n 1. m \\<in> {m(k \\<mapsto> v) |v m.\n             v \\<in> set (V k) \\<and>\n             m \\<in> {m. dom m = set ks \\<and>\n                         (\\<forall>k\\<in>set ks.\n                             the (m k) \\<in> set (V k))}}", "using \\<open>dom m = set (k#ks)\\<close>"], ["proof (prove)\nusing this:\n  the (m k) \\<in> set (V k)\n  dom m' = set ks\n  \\<forall>k\\<in>set ks. the (m' k) \\<in> set (V k)\n  m = m'(k \\<mapsto> the (m k))\n  m \\<in> set (map (\\<lambda>v. m'(k \\<mapsto> v)) (V k))\n  dom m = set (k # ks)\n\ngoal (1 subgoal):\n 1. m \\<in> {m(k \\<mapsto> v) |v m.\n             v \\<in> set (V k) \\<and>\n             m \\<in> {m. dom m = set ks \\<and>\n                         (\\<forall>k\\<in>set ks.\n                             the (m k) \\<in> set (V k))}}", "by blast"], ["proof (state)\nthis:\n  m \\<in> {m(k \\<mapsto> v) |v m.\n           v \\<in> set (V k) \\<and>\n           m \\<in> {m. dom m = set ks \\<and>\n                       (\\<forall>k\\<in>set ks. the (m k) \\<in> set (V k))}}\n\ngoal (2 subgoals):\n 1. mapping_generator V [] =\n    {m. Mapping.keys m = set [] \\<and>\n        (\\<forall>k\\<in>set []. the (Mapping.lookup m k) \\<in> set (V k))}\n 2. \\<And>a K.\n       mapping_generator V K =\n       {m. Mapping.keys m = set K \\<and>\n           (\\<forall>k\\<in>set K.\n               the (Mapping.lookup m k) \\<in> set (V k))} \\<Longrightarrow>\n       mapping_generator V (a # K) =\n       {m. Mapping.keys m = set (a # K) \\<and>\n           (\\<forall>k\\<in>set (a # K).\n               the (Mapping.lookup m k) \\<in> set (V k))}", "}"], ["proof (state)\nthis:\n  ?m2\n  \\<in> {m. dom m = set (k # ks) \\<and>\n            (\\<forall>k\\<in>set (k # ks).\n                the (m k) \\<in> set (V k))} \\<Longrightarrow>\n  ?m2\n  \\<in> {m(k \\<mapsto> v) |v m.\n         v \\<in> set (V k) \\<and>\n         m \\<in> {m. dom m = set ks \\<and>\n                     (\\<forall>k\\<in>set ks. the (m k) \\<in> set (V k))}}\n\ngoal (2 subgoals):\n 1. mapping_generator V [] =\n    {m. Mapping.keys m = set [] \\<and>\n        (\\<forall>k\\<in>set []. the (Mapping.lookup m k) \\<in> set (V k))}\n 2. \\<And>a K.\n       mapping_generator V K =\n       {m. Mapping.keys m = set K \\<and>\n           (\\<forall>k\\<in>set K.\n               the (Mapping.lookup m k) \\<in> set (V k))} \\<Longrightarrow>\n       mapping_generator V (a # K) =\n       {m. Mapping.keys m = set (a # K) \\<and>\n           (\\<forall>k\\<in>set (a # K).\n               the (Mapping.lookup m k) \\<in> set (V k))}", "ultimately"], ["proof (chain)\npicking this:\n  {m(k \\<mapsto> v) |v m.\n   v \\<in> set (V k) \\<and>\n   m \\<in> {m. dom m = set ks \\<and>\n               (\\<forall>k\\<in>set ks. the (m k) \\<in> set (V k))}}\n  \\<subseteq> {m. dom m = set (k # ks) \\<and>\n                  (\\<forall>k\\<in>set (k # ks). the (m k) \\<in> set (V k))}\n  ?m2\n  \\<in> {m. dom m = set (k # ks) \\<and>\n            (\\<forall>k\\<in>set (k # ks).\n                the (m k) \\<in> set (V k))} \\<Longrightarrow>\n  ?m2\n  \\<in> {m(k \\<mapsto> v) |v m.\n         v \\<in> set (V k) \\<and>\n         m \\<in> {m. dom m = set ks \\<and>\n                     (\\<forall>k\\<in>set ks. the (m k) \\<in> set (V k))}}", "have \"{Mapping.update k v m |v m. v \\<in> set (V k) \\<and> m \\<in> {m. Mapping.keys m = set ks \\<and> (\\<forall>k\\<in>set ks. the (Mapping.lookup m k) \\<in> set (V k))}} \n      = {m. Mapping.keys m = set (k # ks) \\<and> (\\<forall>k\\<in>set (k # ks). the (Mapping.lookup m k) \\<in> set (V k))}\""], ["proof (prove)\nusing this:\n  {m(k \\<mapsto> v) |v m.\n   v \\<in> set (V k) \\<and>\n   m \\<in> {m. dom m = set ks \\<and>\n               (\\<forall>k\\<in>set ks. the (m k) \\<in> set (V k))}}\n  \\<subseteq> {m. dom m = set (k # ks) \\<and>\n                  (\\<forall>k\\<in>set (k # ks). the (m k) \\<in> set (V k))}\n  ?m2\n  \\<in> {m. dom m = set (k # ks) \\<and>\n            (\\<forall>k\\<in>set (k # ks).\n                the (m k) \\<in> set (V k))} \\<Longrightarrow>\n  ?m2\n  \\<in> {m(k \\<mapsto> v) |v m.\n         v \\<in> set (V k) \\<and>\n         m \\<in> {m. dom m = set ks \\<and>\n                     (\\<forall>k\\<in>set ks. the (m k) \\<in> set (V k))}}\n\ngoal (1 subgoal):\n 1. {Mapping.update k v m |v m.\n     v \\<in> set (V k) \\<and>\n     m \\<in> {m. Mapping.keys m = set ks \\<and>\n                 (\\<forall>k\\<in>set ks.\n                     the (Mapping.lookup m k) \\<in> set (V k))}} =\n    {m. Mapping.keys m = set (k # ks) \\<and>\n        (\\<forall>k\\<in>set (k # ks).\n            the (Mapping.lookup m k) \\<in> set (V k))}", "by (transfer; blast)"], ["proof (state)\nthis:\n  {Mapping.update k v m |v m.\n   v \\<in> set (V k) \\<and>\n   m \\<in> {m. Mapping.keys m = set ks \\<and>\n               (\\<forall>k\\<in>set ks.\n                   the (Mapping.lookup m k) \\<in> set (V k))}} =\n  {m. Mapping.keys m = set (k # ks) \\<and>\n      (\\<forall>k\\<in>set (k # ks).\n          the (Mapping.lookup m k) \\<in> set (V k))}\n\ngoal (2 subgoals):\n 1. mapping_generator V [] =\n    {m. Mapping.keys m = set [] \\<and>\n        (\\<forall>k\\<in>set []. the (Mapping.lookup m k) \\<in> set (V k))}\n 2. \\<And>a K.\n       mapping_generator V K =\n       {m. Mapping.keys m = set K \\<and>\n           (\\<forall>k\\<in>set K.\n               the (Mapping.lookup m k) \\<in> set (V k))} \\<Longrightarrow>\n       mapping_generator V (a # K) =\n       {m. Mapping.keys m = set (a # K) \\<and>\n           (\\<forall>k\\<in>set (a # K).\n               the (Mapping.lookup m k) \\<in> set (V k))}", "thus ?case"], ["proof (prove)\nusing this:\n  {Mapping.update k v m |v m.\n   v \\<in> set (V k) \\<and>\n   m \\<in> {m. Mapping.keys m = set ks \\<and>\n               (\\<forall>k\\<in>set ks.\n                   the (Mapping.lookup m k) \\<in> set (V k))}} =\n  {m. Mapping.keys m = set (k # ks) \\<and>\n      (\\<forall>k\\<in>set (k # ks).\n          the (Mapping.lookup m k) \\<in> set (V k))}\n\ngoal (1 subgoal):\n 1. mapping_generator V (k # ks) =\n    {m. Mapping.keys m = set (k # ks) \\<and>\n        (\\<forall>k\\<in>set (k # ks).\n            the (Mapping.lookup m k) \\<in> set (V k))}", "by (simp add: Cons)"], ["proof (state)\nthis:\n  mapping_generator V (k # ks) =\n  {m. Mapping.keys m = set (k # ks) \\<and>\n      (\\<forall>k\\<in>set (k # ks).\n          the (Mapping.lookup m k) \\<in> set (V k))}\n\ngoal (1 subgoal):\n 1. mapping_generator V [] =\n    {m. Mapping.keys m = set [] \\<and>\n        (\\<forall>k\\<in>set []. the (Mapping.lookup m k) \\<in> set (V k))}", "qed (force simp add: keys_empty_iff_map_empty)"], ["", "end"]]}