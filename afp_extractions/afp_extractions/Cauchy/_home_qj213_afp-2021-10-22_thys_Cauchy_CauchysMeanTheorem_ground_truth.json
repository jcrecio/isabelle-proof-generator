{"file_name": "/home/qj213/afp-2021-10-22/thys/Cauchy/CauchysMeanTheorem.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Cauchy", "problem_names": ["lemma sum_list_mono_lt [rule_format]:\n  fixes xs::\"real list\"\n  shows \"xs \\<noteq> [] \\<and> (\\<forall>x\\<in> set xs. x < m)\n         \\<longrightarrow> ((\\<Sum>:xs) < (m*(real (length xs))))\"", "lemma sum_list_mono_gt [rule_format]:\n  fixes xs::\"real list\"\n  shows \"xs \\<noteq> [] \\<and> (\\<forall>x\\<in>set xs. x > m)\n         \\<longrightarrow> ((\\<Sum>:xs) > (m*(real (length xs))))\"", "lemma sum_list_rmv1:\n  \"a \\<in> set xs \\<Longrightarrow> \\<Sum>:(remove1 a xs) = \\<Sum>:xs - (a :: 'a :: ab_group_add)\"", "lemma list_sum_distrib_aux:\n  shows \"(\\<Sum>:xs/(n :: 'a :: archimedean_field) + \\<Sum>:xs) = (1 + (1/n)) * \\<Sum>:xs\"", "lemma remove1_retains_prod:\n  fixes a and xs::\"'a :: comm_ring_1 list\"\n  shows \"a : set xs \\<longrightarrow> \\<Prod>:xs = \\<Prod>:(remove1 a xs) * a\"\n  (is \"?P xs\")", "lemma el_gt0_imp_prod_gt0 [rule_format]:\n  fixes xs::\"'a :: archimedean_field list\"\n  shows \"\\<forall>y. y : set xs \\<longrightarrow> y > 0 \\<Longrightarrow> \\<Prod>:xs > 0\"", "lemma prod_exp:\n  fixes x::real\n  shows \"4*(x*y) = (x+y)^2 - (x-y)^2\"", "lemma abs_less_imp_sq_less [rule_format]:\n  fixes x::real and y::real and z::real and w::real\n  assumes diff: \"abs (x-y) < abs (z-w)\"\n  shows \"(x-y)^2 < (z-w)^2\"", "lemma le_diff_imp_gt_prod [rule_format]:\n  fixes x::real and y::real and z::real and w::real\n  assumes diff: \"abs (x-y) < abs (z-w)\" and sum: \"x+y = z+w\"\n  shows \"x*y > z*w\"", "lemma list_sum_mean:\n  fixes xs::\"real list\"\n  shows \"\\<Sum>:xs = ((mean xs) * (real (length xs)))\"", "lemma list_mean_eq_iff:\n  fixes one::\"real list\" and two::\"real list\"\n  assumes\n    se: \"( \\<Sum>:one = \\<Sum>:two )\" and\n    le: \"(length one = length two)\"\n  shows \"(mean one = mean two)\"", "lemma list_gmean_gt_iff:\n  fixes one::\"real list\" and two::\"real list\"\n  assumes\n    gz1: \"\\<Prod>:one > 0\" and gz2: \"\\<Prod>:two > 0\" and\n    ne1: \"one \\<noteq> []\" and ne2: \"two \\<noteq> []\" and\n    pe: \"(\\<Prod>:one > \\<Prod>:two)\" and\n    le: \"(length one = length two)\"\n  shows \"(gmean one > gmean two)\"", "lemma list_mean_cons [rule_format]:\n  fixes xs::\"real list\"\n  shows \"xs \\<noteq> [] \\<longrightarrow> mean ((mean xs)#xs) = mean xs\"", "lemma mean_gt_0 [rule_format]:\n  \"xs\\<noteq>[] \\<and> 0 < x \\<and> 0 < (mean xs) \\<longrightarrow> 0 < (mean (x#xs))\"", "lemma list_neq_remove1 [rule_format]:\n  shows \"a\\<noteq>m \\<and> a : set xs\n  \\<longrightarrow> length (list_neq (remove1 a xs) m) < length (list_neq xs m)\"\n  (is \"?A xs \\<longrightarrow> ?B xs\" is \"?P xs\")", "lemma list_eq_sum [simp]:\n  fixes xs::\"real list\"\n  shows \"\\<Sum>:(list_eq xs m) = (m * (real (length (list_eq xs m))))\"", "lemma list_eq_prod [simp]:\n  fixes xs::\"real list\"\n  shows \"\\<Prod>:(list_eq xs m) = (m ^ (length (list_eq xs m)))\"", "lemma sum_list_split:\n  fixes xs::\"real list\"\n  shows \"\\<Sum>:xs = (\\<Sum>:(list_neq xs m) + \\<Sum>:(list_eq xs m))\"", "lemma prod_list_split:\n  fixes xs::\"real list\"\n  shows \"\\<Prod>:xs = (\\<Prod>:(list_neq xs m) * \\<Prod>:(list_eq xs m))\"", "lemma sum_list_length_split:\n  fixes xs::\"real list\"\n  shows \"length xs = length (list_neq xs m) + length (list_eq xs m)\"", "lemma pick_one_gt:\n  fixes xs::\"real list\" and m::real\n  defines m: \"m \\<equiv> (mean xs)\" and neq: \"noteq \\<equiv> list_neq xs m\"\n  assumes asum: \"noteq\\<noteq>[]\"\n  shows \"\\<exists>e. e : set noteq \\<and> e > m\"", "lemma pick_one_lt:\n  fixes xs::\"real list\" and m::real\n  defines m: \"m \\<equiv> (mean xs)\" and neq: \"noteq \\<equiv> list_neq xs m\"\n  assumes asum: \"noteq\\<noteq>[]\"\n  shows \"\\<exists>e. e : set noteq \\<and> e < m\"", "lemma het_gt_0_imp_noteq_ne: \"het l > 0 \\<Longrightarrow> list_neq l (mean l) \\<noteq> []\"", "lemma het_gt_0I: assumes a: \"a \\<in> set xs\" and b: \"b \\<in> set xs\" and neq: \"a \\<noteq> b\"\n  shows \"het xs > 0\"", "lemma \\<gamma>_eq_sym: \"\\<gamma>_eq (a,b) = \\<gamma>_eq (b,a)\"", "lemma \\<gamma>_eq_trans:\n  \"\\<gamma>_eq (x,y) \\<Longrightarrow> \\<gamma>_eq (y,z) \\<Longrightarrow> \\<gamma>_eq (x,z)\"", "lemma pos_empty [simp]: \"pos [] = False\"", "lemma pos_single [simp]: \"pos [x] = (x > 0)\"", "lemma pos_imp_ne: \"pos xs \\<Longrightarrow> xs\\<noteq>[]\"", "lemma pos_cons [simp]:\n  \"xs \\<noteq> [] \\<longrightarrow> pos (x#xs) =\n   (if (x>0) then pos xs else False)\"\n  (is \"?P x xs\" is \"?A xs \\<longrightarrow> ?S x xs\")", "lemma pos_imp_rmv_pos:\n  assumes \"(remove1 a xs)\\<noteq>[]\" \"pos xs\" shows \"pos (remove1 a xs)\"", "lemma pos_mean: \"pos xs \\<Longrightarrow> mean xs > 0\"", "lemma prod_list_het0:\n  shows \"x\\<noteq>[] \\<and> het x = 0 \\<Longrightarrow> \\<Prod>:x = (mean x) ^ (length x)\"", "lemma het_base:\n  shows \"pos x \\<and> het x = 0 \\<Longrightarrow> gmean x = mean x\"", "lemma new_list_gt_gmean:\n  fixes xs :: \"real list\" and m :: real\n  and neq and eq\n  defines\n    m: \"m \\<equiv> mean xs\" and\n    neq: \"noteq \\<equiv> list_neq xs m\" and\n    eq: \"eq \\<equiv> list_eq xs m\"\n  assumes pos_xs: \"pos xs\" and het_gt_0: \"het xs > 0\"\n  shows\n  \"\\<exists>xs'. gmean xs' > gmean xs \\<and> \\<gamma>_eq (xs',xs) \\<and>\n          het xs' < het xs \\<and> pos xs'\"", "lemma existence_of_het0 [rule_format]:\n  shows \"\\<forall>x. p = het x \\<and> p > 0 \\<and> pos x \\<longrightarrow>\n  (\\<exists>y. gmean y > gmean x \\<and> \\<gamma>_eq (x,y) \\<and> het y = 0 \\<and> pos y)\"\n  (is \"?Q p\" is \"\\<forall>x. (?A x p \\<longrightarrow> ?S x)\")", "theorem CauchysMeanTheorem:\n  fixes z::\"real list\"\n  assumes \"pos z\"\n  shows \"gmean z \\<le> mean z\"", "theorem CauchysMeanTheorem_Eq:\n  fixes z::\"real list\"\n  assumes \"pos z\"\n  shows \"gmean z = mean z \\<longleftrightarrow> het z = 0\""], "translations": [["", "lemma sum_list_mono_lt [rule_format]:\n  fixes xs::\"real list\"\n  shows \"xs \\<noteq> [] \\<and> (\\<forall>x\\<in> set xs. x < m)\n         \\<longrightarrow> ((\\<Sum>:xs) < (m*(real (length xs))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<and> (\\<forall>x\\<in>set xs. x < m) \\<longrightarrow>\n    sum_list xs < m * real (length xs)", "proof (induct xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. [] \\<noteq> [] \\<and> (\\<forall>x\\<in>set []. x < m) \\<longrightarrow>\n    sum_list [] < m * real (length [])\n 2. \\<And>a xs.\n       xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set xs. x < m) \\<longrightarrow>\n       sum_list xs < m * real (length xs) \\<Longrightarrow>\n       a # xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set (a # xs). x < m) \\<longrightarrow>\n       sum_list (a # xs) < m * real (length (a # xs))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. [] \\<noteq> [] \\<and> (\\<forall>x\\<in>set []. x < m) \\<longrightarrow>\n    sum_list [] < m * real (length [])\n 2. \\<And>a xs.\n       xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set xs. x < m) \\<longrightarrow>\n       sum_list xs < m * real (length xs) \\<Longrightarrow>\n       a # xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set (a # xs). x < m) \\<longrightarrow>\n       sum_list (a # xs) < m * real (length (a # xs))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<noteq> [] \\<and> (\\<forall>x\\<in>set []. x < m) \\<longrightarrow>\n    sum_list [] < m * real (length [])", "by simp"], ["proof (state)\nthis:\n  [] \\<noteq> [] \\<and> (\\<forall>x\\<in>set []. x < m) \\<longrightarrow>\n  sum_list [] < m * real (length [])\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set xs. x < m) \\<longrightarrow>\n       sum_list xs < m * real (length xs) \\<Longrightarrow>\n       a # xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set (a # xs). x < m) \\<longrightarrow>\n       sum_list (a # xs) < m * real (length (a # xs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set xs. x < m) \\<longrightarrow>\n       sum_list xs < m * real (length xs) \\<Longrightarrow>\n       a # xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set (a # xs). x < m) \\<longrightarrow>\n       sum_list (a # xs) < m * real (length (a # xs))", "case (Cons y ys)"], ["proof (state)\nthis:\n  ys \\<noteq> [] \\<and> (\\<forall>x\\<in>set ys. x < m) \\<longrightarrow>\n  sum_list ys < m * real (length ys)\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set xs. x < m) \\<longrightarrow>\n       sum_list xs < m * real (length xs) \\<Longrightarrow>\n       a # xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set (a # xs). x < m) \\<longrightarrow>\n       sum_list (a # xs) < m * real (length (a # xs))", "{"], ["proof (state)\nthis:\n  ys \\<noteq> [] \\<and> (\\<forall>x\\<in>set ys. x < m) \\<longrightarrow>\n  sum_list ys < m * real (length ys)\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set xs. x < m) \\<longrightarrow>\n       sum_list xs < m * real (length xs) \\<Longrightarrow>\n       a # xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set (a # xs). x < m) \\<longrightarrow>\n       sum_list (a # xs) < m * real (length (a # xs))", "assume ant: \"y#ys \\<noteq> [] \\<and> (\\<forall>x\\<in>set(y#ys). x < m)\""], ["proof (state)\nthis:\n  y # ys \\<noteq> [] \\<and> (\\<forall>x\\<in>set (y # ys). x < m)\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set xs. x < m) \\<longrightarrow>\n       sum_list xs < m * real (length xs) \\<Longrightarrow>\n       a # xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set (a # xs). x < m) \\<longrightarrow>\n       sum_list (a # xs) < m * real (length (a # xs))", "hence ylm: \"y < m\""], ["proof (prove)\nusing this:\n  y # ys \\<noteq> [] \\<and> (\\<forall>x\\<in>set (y # ys). x < m)\n\ngoal (1 subgoal):\n 1. y < m", "by simp"], ["proof (state)\nthis:\n  y < m\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set xs. x < m) \\<longrightarrow>\n       sum_list xs < m * real (length xs) \\<Longrightarrow>\n       a # xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set (a # xs). x < m) \\<longrightarrow>\n       sum_list (a # xs) < m * real (length (a # xs))", "have \"\\<Sum>:(y#ys) < m * real (length (y#ys))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (y # ys) < m * real (length (y # ys))", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> sum_list (y # ys) < m * real (length (y # ys))\n 2. \\<not> ?P \\<Longrightarrow>\n    sum_list (y # ys) < m * real (length (y # ys))", "assume \"ys \\<noteq> []\""], ["proof (state)\nthis:\n  ys \\<noteq> []\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> sum_list (y # ys) < m * real (length (y # ys))\n 2. \\<not> ?P \\<Longrightarrow>\n    sum_list (y # ys) < m * real (length (y # ys))", "moreover"], ["proof (state)\nthis:\n  ys \\<noteq> []\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> sum_list (y # ys) < m * real (length (y # ys))\n 2. \\<not> ?P \\<Longrightarrow>\n    sum_list (y # ys) < m * real (length (y # ys))", "with ant"], ["proof (chain)\npicking this:\n  y # ys \\<noteq> [] \\<and> (\\<forall>x\\<in>set (y # ys). x < m)\n  ys \\<noteq> []", "have \"\\<forall>x\\<in>set ys. x < m\""], ["proof (prove)\nusing this:\n  y # ys \\<noteq> [] \\<and> (\\<forall>x\\<in>set (y # ys). x < m)\n  ys \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set ys. x < m", "by simp"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set ys. x < m\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> sum_list (y # ys) < m * real (length (y # ys))\n 2. \\<not> ?P \\<Longrightarrow>\n    sum_list (y # ys) < m * real (length (y # ys))", "moreover"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set ys. x < m\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> sum_list (y # ys) < m * real (length (y # ys))\n 2. \\<not> ?P \\<Longrightarrow>\n    sum_list (y # ys) < m * real (length (y # ys))", "with calculation Cons"], ["proof (chain)\npicking this:\n  ys \\<noteq> []\n  \\<forall>x\\<in>set ys. x < m\n  ys \\<noteq> [] \\<and> (\\<forall>x\\<in>set ys. x < m) \\<longrightarrow>\n  sum_list ys < m * real (length ys)\n  \\<forall>x\\<in>set ys. x < m", "have \"\\<Sum>:ys < m*real (length ys)\""], ["proof (prove)\nusing this:\n  ys \\<noteq> []\n  \\<forall>x\\<in>set ys. x < m\n  ys \\<noteq> [] \\<and> (\\<forall>x\\<in>set ys. x < m) \\<longrightarrow>\n  sum_list ys < m * real (length ys)\n  \\<forall>x\\<in>set ys. x < m\n\ngoal (1 subgoal):\n 1. sum_list ys < m * real (length ys)", "by simp"], ["proof (state)\nthis:\n  sum_list ys < m * real (length ys)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> sum_list (y # ys) < m * real (length (y # ys))\n 2. \\<not> ?P \\<Longrightarrow>\n    sum_list (y # ys) < m * real (length (y # ys))", "hence \"\\<Sum>:ys + y < m*real(length ys) + y\""], ["proof (prove)\nusing this:\n  sum_list ys < m * real (length ys)\n\ngoal (1 subgoal):\n 1. sum_list ys + y < m * real (length ys) + y", "by simp"], ["proof (state)\nthis:\n  sum_list ys + y < m * real (length ys) + y\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> sum_list (y # ys) < m * real (length (y # ys))\n 2. \\<not> ?P \\<Longrightarrow>\n    sum_list (y # ys) < m * real (length (y # ys))", "with ylm"], ["proof (chain)\npicking this:\n  y < m\n  sum_list ys + y < m * real (length ys) + y", "have \"\\<Sum>:(y#ys) < m*(real(length ys) + 1)\""], ["proof (prove)\nusing this:\n  y < m\n  sum_list ys + y < m * real (length ys) + y\n\ngoal (1 subgoal):\n 1. sum_list (y # ys) < m * (real (length ys) + 1)", "by(simp add:field_simps)"], ["proof (state)\nthis:\n  sum_list (y # ys) < m * (real (length ys) + 1)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> sum_list (y # ys) < m * real (length (y # ys))\n 2. \\<not> ?P \\<Longrightarrow>\n    sum_list (y # ys) < m * real (length (y # ys))", "then"], ["proof (chain)\npicking this:\n  sum_list (y # ys) < m * (real (length ys) + 1)", "have \"\\<Sum>:(y#ys) < m*(real(length ys + 1))\""], ["proof (prove)\nusing this:\n  sum_list (y # ys) < m * (real (length ys) + 1)\n\ngoal (1 subgoal):\n 1. sum_list (y # ys) < m * real (length ys + 1)", "by (simp add: algebra_simps)"], ["proof (state)\nthis:\n  sum_list (y # ys) < m * real (length ys + 1)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> sum_list (y # ys) < m * real (length (y # ys))\n 2. \\<not> ?P \\<Longrightarrow>\n    sum_list (y # ys) < m * real (length (y # ys))", "hence \"\\<Sum>:(y#ys) < m*(real (length(y#ys)))\""], ["proof (prove)\nusing this:\n  sum_list (y # ys) < m * real (length ys + 1)\n\ngoal (1 subgoal):\n 1. sum_list (y # ys) < m * real (length (y # ys))", "by simp"], ["proof (state)\nthis:\n  sum_list (y # ys) < m * real (length (y # ys))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> sum_list (y # ys) < m * real (length (y # ys))\n 2. \\<not> ?P \\<Longrightarrow>\n    sum_list (y # ys) < m * real (length (y # ys))", "thus ?thesis"], ["proof (prove)\nusing this:\n  sum_list (y # ys) < m * real (length (y # ys))\n\ngoal (1 subgoal):\n 1. sum_list (y # ys) < m * real (length (y # ys))", "."], ["proof (state)\nthis:\n  sum_list (y # ys) < m * real (length (y # ys))\n\ngoal (1 subgoal):\n 1. \\<not> ys \\<noteq> [] \\<Longrightarrow>\n    sum_list (y # ys) < m * real (length (y # ys))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ys \\<noteq> [] \\<Longrightarrow>\n    sum_list (y # ys) < m * real (length (y # ys))", "assume \"\\<not> (ys \\<noteq> [])\""], ["proof (state)\nthis:\n  \\<not> ys \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<not> ys \\<noteq> [] \\<Longrightarrow>\n    sum_list (y # ys) < m * real (length (y # ys))", "hence \"ys = []\""], ["proof (prove)\nusing this:\n  \\<not> ys \\<noteq> []\n\ngoal (1 subgoal):\n 1. ys = []", "by simp"], ["proof (state)\nthis:\n  ys = []\n\ngoal (1 subgoal):\n 1. \\<not> ys \\<noteq> [] \\<Longrightarrow>\n    sum_list (y # ys) < m * real (length (y # ys))", "with ylm"], ["proof (chain)\npicking this:\n  y < m\n  ys = []", "show ?thesis"], ["proof (prove)\nusing this:\n  y < m\n  ys = []\n\ngoal (1 subgoal):\n 1. sum_list (y # ys) < m * real (length (y # ys))", "by simp"], ["proof (state)\nthis:\n  sum_list (y # ys) < m * real (length (y # ys))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sum_list (y # ys) < m * real (length (y # ys))\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set xs. x < m) \\<longrightarrow>\n       sum_list xs < m * real (length xs) \\<Longrightarrow>\n       a # xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set (a # xs). x < m) \\<longrightarrow>\n       sum_list (a # xs) < m * real (length (a # xs))", "}"], ["proof (state)\nthis:\n  y # ys \\<noteq> [] \\<and>\n  (\\<forall>x\\<in>set (y # ys). x < m) \\<Longrightarrow>\n  sum_list (y # ys) < m * real (length (y # ys))\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set xs. x < m) \\<longrightarrow>\n       sum_list xs < m * real (length xs) \\<Longrightarrow>\n       a # xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set (a # xs). x < m) \\<longrightarrow>\n       sum_list (a # xs) < m * real (length (a # xs))", "thus ?case"], ["proof (prove)\nusing this:\n  y # ys \\<noteq> [] \\<and>\n  (\\<forall>x\\<in>set (y # ys). x < m) \\<Longrightarrow>\n  sum_list (y # ys) < m * real (length (y # ys))\n\ngoal (1 subgoal):\n 1. y # ys \\<noteq> [] \\<and>\n    (\\<forall>x\\<in>set (y # ys). x < m) \\<longrightarrow>\n    sum_list (y # ys) < m * real (length (y # ys))", "by simp"], ["proof (state)\nthis:\n  y # ys \\<noteq> [] \\<and>\n  (\\<forall>x\\<in>set (y # ys). x < m) \\<longrightarrow>\n  sum_list (y # ys) < m * real (length (y # ys))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_list_mono_gt [rule_format]:\n  fixes xs::\"real list\"\n  shows \"xs \\<noteq> [] \\<and> (\\<forall>x\\<in>set xs. x > m)\n         \\<longrightarrow> ((\\<Sum>:xs) > (m*(real (length xs))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<and> (\\<forall>x\\<in>set xs. m < x) \\<longrightarrow>\n    m * real (length xs) < sum_list xs", "txt \\<open>proof omitted\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<and> (\\<forall>x\\<in>set xs. m < x) \\<longrightarrow>\n    m * real (length xs) < sum_list xs", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<and> (\\<forall>x\\<in>set xs. m < x) \\<longrightarrow>\n    m * real (length xs) < sum_list xs", "proof (induct xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. [] \\<noteq> [] \\<and> (\\<forall>x\\<in>set []. m < x) \\<longrightarrow>\n    m * real (length []) < sum_list []\n 2. \\<And>a xs.\n       xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set xs. m < x) \\<longrightarrow>\n       m * real (length xs) < sum_list xs \\<Longrightarrow>\n       a # xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set (a # xs). m < x) \\<longrightarrow>\n       m * real (length (a # xs)) < sum_list (a # xs)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. [] \\<noteq> [] \\<and> (\\<forall>x\\<in>set []. m < x) \\<longrightarrow>\n    m * real (length []) < sum_list []\n 2. \\<And>a xs.\n       xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set xs. m < x) \\<longrightarrow>\n       m * real (length xs) < sum_list xs \\<Longrightarrow>\n       a # xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set (a # xs). m < x) \\<longrightarrow>\n       m * real (length (a # xs)) < sum_list (a # xs)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<noteq> [] \\<and> (\\<forall>x\\<in>set []. m < x) \\<longrightarrow>\n    m * real (length []) < sum_list []", "by simp"], ["proof (state)\nthis:\n  [] \\<noteq> [] \\<and> (\\<forall>x\\<in>set []. m < x) \\<longrightarrow>\n  m * real (length []) < sum_list []\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set xs. m < x) \\<longrightarrow>\n       m * real (length xs) < sum_list xs \\<Longrightarrow>\n       a # xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set (a # xs). m < x) \\<longrightarrow>\n       m * real (length (a # xs)) < sum_list (a # xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set xs. m < x) \\<longrightarrow>\n       m * real (length xs) < sum_list xs \\<Longrightarrow>\n       a # xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set (a # xs). m < x) \\<longrightarrow>\n       m * real (length (a # xs)) < sum_list (a # xs)", "case (Cons y ys)"], ["proof (state)\nthis:\n  ys \\<noteq> [] \\<and> (\\<forall>x\\<in>set ys. m < x) \\<longrightarrow>\n  m * real (length ys) < sum_list ys\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set xs. m < x) \\<longrightarrow>\n       m * real (length xs) < sum_list xs \\<Longrightarrow>\n       a # xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set (a # xs). m < x) \\<longrightarrow>\n       m * real (length (a # xs)) < sum_list (a # xs)", "{"], ["proof (state)\nthis:\n  ys \\<noteq> [] \\<and> (\\<forall>x\\<in>set ys. m < x) \\<longrightarrow>\n  m * real (length ys) < sum_list ys\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set xs. m < x) \\<longrightarrow>\n       m * real (length xs) < sum_list xs \\<Longrightarrow>\n       a # xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set (a # xs). m < x) \\<longrightarrow>\n       m * real (length (a # xs)) < sum_list (a # xs)", "assume ant: \"y#ys \\<noteq> [] \\<and> (\\<forall>x\\<in>set(y#ys). x > m)\""], ["proof (state)\nthis:\n  y # ys \\<noteq> [] \\<and> (\\<forall>x\\<in>set (y # ys). m < x)\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set xs. m < x) \\<longrightarrow>\n       m * real (length xs) < sum_list xs \\<Longrightarrow>\n       a # xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set (a # xs). m < x) \\<longrightarrow>\n       m * real (length (a # xs)) < sum_list (a # xs)", "hence ylm: \"y > m\""], ["proof (prove)\nusing this:\n  y # ys \\<noteq> [] \\<and> (\\<forall>x\\<in>set (y # ys). m < x)\n\ngoal (1 subgoal):\n 1. m < y", "by simp"], ["proof (state)\nthis:\n  m < y\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set xs. m < x) \\<longrightarrow>\n       m * real (length xs) < sum_list xs \\<Longrightarrow>\n       a # xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set (a # xs). m < x) \\<longrightarrow>\n       m * real (length (a # xs)) < sum_list (a # xs)", "have \"\\<Sum>:(y#ys) > m * real (length (y#ys))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m * real (length (y # ys)) < sum_list (y # ys)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> m * real (length (y # ys)) < sum_list (y # ys)\n 2. \\<not> ?P \\<Longrightarrow>\n    m * real (length (y # ys)) < sum_list (y # ys)", "assume \"ys \\<noteq> []\""], ["proof (state)\nthis:\n  ys \\<noteq> []\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> m * real (length (y # ys)) < sum_list (y # ys)\n 2. \\<not> ?P \\<Longrightarrow>\n    m * real (length (y # ys)) < sum_list (y # ys)", "moreover"], ["proof (state)\nthis:\n  ys \\<noteq> []\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> m * real (length (y # ys)) < sum_list (y # ys)\n 2. \\<not> ?P \\<Longrightarrow>\n    m * real (length (y # ys)) < sum_list (y # ys)", "with ant"], ["proof (chain)\npicking this:\n  y # ys \\<noteq> [] \\<and> (\\<forall>x\\<in>set (y # ys). m < x)\n  ys \\<noteq> []", "have \"\\<forall>x\\<in>set ys. x > m\""], ["proof (prove)\nusing this:\n  y # ys \\<noteq> [] \\<and> (\\<forall>x\\<in>set (y # ys). m < x)\n  ys \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set ys. m < x", "by simp"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set ys. m < x\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> m * real (length (y # ys)) < sum_list (y # ys)\n 2. \\<not> ?P \\<Longrightarrow>\n    m * real (length (y # ys)) < sum_list (y # ys)", "moreover"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set ys. m < x\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> m * real (length (y # ys)) < sum_list (y # ys)\n 2. \\<not> ?P \\<Longrightarrow>\n    m * real (length (y # ys)) < sum_list (y # ys)", "with calculation Cons"], ["proof (chain)\npicking this:\n  ys \\<noteq> []\n  \\<forall>x\\<in>set ys. m < x\n  ys \\<noteq> [] \\<and> (\\<forall>x\\<in>set ys. m < x) \\<longrightarrow>\n  m * real (length ys) < sum_list ys\n  \\<forall>x\\<in>set ys. m < x", "have \"\\<Sum>:ys > m*real (length ys)\""], ["proof (prove)\nusing this:\n  ys \\<noteq> []\n  \\<forall>x\\<in>set ys. m < x\n  ys \\<noteq> [] \\<and> (\\<forall>x\\<in>set ys. m < x) \\<longrightarrow>\n  m * real (length ys) < sum_list ys\n  \\<forall>x\\<in>set ys. m < x\n\ngoal (1 subgoal):\n 1. m * real (length ys) < sum_list ys", "by simp"], ["proof (state)\nthis:\n  m * real (length ys) < sum_list ys\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> m * real (length (y # ys)) < sum_list (y # ys)\n 2. \\<not> ?P \\<Longrightarrow>\n    m * real (length (y # ys)) < sum_list (y # ys)", "hence \"\\<Sum>:ys + y > m*real(length ys) + y\""], ["proof (prove)\nusing this:\n  m * real (length ys) < sum_list ys\n\ngoal (1 subgoal):\n 1. m * real (length ys) + y < sum_list ys + y", "by simp"], ["proof (state)\nthis:\n  m * real (length ys) + y < sum_list ys + y\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> m * real (length (y # ys)) < sum_list (y # ys)\n 2. \\<not> ?P \\<Longrightarrow>\n    m * real (length (y # ys)) < sum_list (y # ys)", "with ylm"], ["proof (chain)\npicking this:\n  m < y\n  m * real (length ys) + y < sum_list ys + y", "have \"\\<Sum>:(y#ys) > m*(real(length ys) + 1)\""], ["proof (prove)\nusing this:\n  m < y\n  m * real (length ys) + y < sum_list ys + y\n\ngoal (1 subgoal):\n 1. m * (real (length ys) + 1) < sum_list (y # ys)", "by(simp add:field_simps)"], ["proof (state)\nthis:\n  m * (real (length ys) + 1) < sum_list (y # ys)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> m * real (length (y # ys)) < sum_list (y # ys)\n 2. \\<not> ?P \\<Longrightarrow>\n    m * real (length (y # ys)) < sum_list (y # ys)", "then"], ["proof (chain)\npicking this:\n  m * (real (length ys) + 1) < sum_list (y # ys)", "have \"\\<Sum>:(y#ys) > m*(real(length ys + 1))\""], ["proof (prove)\nusing this:\n  m * (real (length ys) + 1) < sum_list (y # ys)\n\ngoal (1 subgoal):\n 1. m * real (length ys + 1) < sum_list (y # ys)", "by (simp add: algebra_simps)"], ["proof (state)\nthis:\n  m * real (length ys + 1) < sum_list (y # ys)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> m * real (length (y # ys)) < sum_list (y # ys)\n 2. \\<not> ?P \\<Longrightarrow>\n    m * real (length (y # ys)) < sum_list (y # ys)", "hence \"\\<Sum>:(y#ys) > m*(real (length(y#ys)))\""], ["proof (prove)\nusing this:\n  m * real (length ys + 1) < sum_list (y # ys)\n\ngoal (1 subgoal):\n 1. m * real (length (y # ys)) < sum_list (y # ys)", "by simp"], ["proof (state)\nthis:\n  m * real (length (y # ys)) < sum_list (y # ys)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> m * real (length (y # ys)) < sum_list (y # ys)\n 2. \\<not> ?P \\<Longrightarrow>\n    m * real (length (y # ys)) < sum_list (y # ys)", "thus ?thesis"], ["proof (prove)\nusing this:\n  m * real (length (y # ys)) < sum_list (y # ys)\n\ngoal (1 subgoal):\n 1. m * real (length (y # ys)) < sum_list (y # ys)", "."], ["proof (state)\nthis:\n  m * real (length (y # ys)) < sum_list (y # ys)\n\ngoal (1 subgoal):\n 1. \\<not> ys \\<noteq> [] \\<Longrightarrow>\n    m * real (length (y # ys)) < sum_list (y # ys)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ys \\<noteq> [] \\<Longrightarrow>\n    m * real (length (y # ys)) < sum_list (y # ys)", "assume \"\\<not> (ys \\<noteq> [])\""], ["proof (state)\nthis:\n  \\<not> ys \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<not> ys \\<noteq> [] \\<Longrightarrow>\n    m * real (length (y # ys)) < sum_list (y # ys)", "hence \"ys = []\""], ["proof (prove)\nusing this:\n  \\<not> ys \\<noteq> []\n\ngoal (1 subgoal):\n 1. ys = []", "by simp"], ["proof (state)\nthis:\n  ys = []\n\ngoal (1 subgoal):\n 1. \\<not> ys \\<noteq> [] \\<Longrightarrow>\n    m * real (length (y # ys)) < sum_list (y # ys)", "with ylm"], ["proof (chain)\npicking this:\n  m < y\n  ys = []", "show ?thesis"], ["proof (prove)\nusing this:\n  m < y\n  ys = []\n\ngoal (1 subgoal):\n 1. m * real (length (y # ys)) < sum_list (y # ys)", "by simp"], ["proof (state)\nthis:\n  m * real (length (y # ys)) < sum_list (y # ys)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  m * real (length (y # ys)) < sum_list (y # ys)\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set xs. m < x) \\<longrightarrow>\n       m * real (length xs) < sum_list xs \\<Longrightarrow>\n       a # xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set (a # xs). m < x) \\<longrightarrow>\n       m * real (length (a # xs)) < sum_list (a # xs)", "}"], ["proof (state)\nthis:\n  y # ys \\<noteq> [] \\<and>\n  (\\<forall>x\\<in>set (y # ys). m < x) \\<Longrightarrow>\n  m * real (length (y # ys)) < sum_list (y # ys)\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set xs. m < x) \\<longrightarrow>\n       m * real (length xs) < sum_list xs \\<Longrightarrow>\n       a # xs \\<noteq> [] \\<and>\n       (\\<forall>x\\<in>set (a # xs). m < x) \\<longrightarrow>\n       m * real (length (a # xs)) < sum_list (a # xs)", "thus ?case"], ["proof (prove)\nusing this:\n  y # ys \\<noteq> [] \\<and>\n  (\\<forall>x\\<in>set (y # ys). m < x) \\<Longrightarrow>\n  m * real (length (y # ys)) < sum_list (y # ys)\n\ngoal (1 subgoal):\n 1. y # ys \\<noteq> [] \\<and>\n    (\\<forall>x\\<in>set (y # ys). m < x) \\<longrightarrow>\n    m * real (length (y # ys)) < sum_list (y # ys)", "by simp"], ["proof (state)\nthis:\n  y # ys \\<noteq> [] \\<and>\n  (\\<forall>x\\<in>set (y # ys). m < x) \\<longrightarrow>\n  m * real (length (y # ys)) < sum_list (y # ys)\n\ngoal:\nNo subgoals!", "(*>*)"], ["proof (state)\nthis:\n  y # ys \\<noteq> [] \\<and>\n  (\\<forall>x\\<in>set (y # ys). m < x) \\<longrightarrow>\n  m * real (length (y # ys)) < sum_list (y # ys)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>If $a$ is in $C$ then the sum of the collection $D$ where $D$\nis $C$ with $a$ removed is the sum of $C$ minus $a$.\\<close>"], ["", "lemma sum_list_rmv1:\n  \"a \\<in> set xs \\<Longrightarrow> \\<Sum>:(remove1 a xs) = \\<Sum>:xs - (a :: 'a :: ab_group_add)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> set xs \\<Longrightarrow>\n    sum_list (remove1 a xs) = sum_list xs - a", "by (induct xs) auto"], ["", "text \\<open>A handy addition and division distribution law over collection\nsums.\\<close>"], ["", "lemma list_sum_distrib_aux:\n  shows \"(\\<Sum>:xs/(n :: 'a :: archimedean_field) + \\<Sum>:xs) = (1 + (1/n)) * \\<Sum>:xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list xs / n + sum_list xs = ((1::'a) + (1::'a) / n) * sum_list xs", "proof (induct xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. sum_list [] / n + sum_list [] = ((1::'a) + (1::'a) / n) * sum_list []\n 2. \\<And>a xs.\n       sum_list xs / n + sum_list xs =\n       ((1::'a) + (1::'a) / n) * sum_list xs \\<Longrightarrow>\n       sum_list (a # xs) / n + sum_list (a # xs) =\n       ((1::'a) + (1::'a) / n) * sum_list (a # xs)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. sum_list [] / n + sum_list [] = ((1::'a) + (1::'a) / n) * sum_list []\n 2. \\<And>a xs.\n       sum_list xs / n + sum_list xs =\n       ((1::'a) + (1::'a) / n) * sum_list xs \\<Longrightarrow>\n       sum_list (a # xs) / n + sum_list (a # xs) =\n       ((1::'a) + (1::'a) / n) * sum_list (a # xs)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list [] / n + sum_list [] = ((1::'a) + (1::'a) / n) * sum_list []", "by simp"], ["proof (state)\nthis:\n  sum_list [] / n + sum_list [] = ((1::'a) + (1::'a) / n) * sum_list []\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       sum_list xs / n + sum_list xs =\n       ((1::'a) + (1::'a) / n) * sum_list xs \\<Longrightarrow>\n       sum_list (a # xs) / n + sum_list (a # xs) =\n       ((1::'a) + (1::'a) / n) * sum_list (a # xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       sum_list xs / n + sum_list xs =\n       ((1::'a) + (1::'a) / n) * sum_list xs \\<Longrightarrow>\n       sum_list (a # xs) / n + sum_list (a # xs) =\n       ((1::'a) + (1::'a) / n) * sum_list (a # xs)", "case (Cons x xs)"], ["proof (state)\nthis:\n  sum_list xs / n + sum_list xs = ((1::'a) + (1::'a) / n) * sum_list xs\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       sum_list xs / n + sum_list xs =\n       ((1::'a) + (1::'a) / n) * sum_list xs \\<Longrightarrow>\n       sum_list (a # xs) / n + sum_list (a # xs) =\n       ((1::'a) + (1::'a) / n) * sum_list (a # xs)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (x # xs) / n + sum_list (x # xs) =\n    ((1::'a) + (1::'a) / n) * sum_list (x # xs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sum_list (x # xs) / n + sum_list (x # xs) =\n    ((1::'a) + (1::'a) / n) * sum_list (x # xs)", "have\n      \"\\<Sum>:(x#xs)/n = x/n + \\<Sum>:xs/n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (x # xs) / n = x / n + sum_list xs / n", "by (simp add: add_divide_distrib)"], ["proof (state)\nthis:\n  sum_list (x # xs) / n = x / n + sum_list xs / n\n\ngoal (1 subgoal):\n 1. sum_list (x # xs) / n + sum_list (x # xs) =\n    ((1::'a) + (1::'a) / n) * sum_list (x # xs)", "also"], ["proof (state)\nthis:\n  sum_list (x # xs) / n = x / n + sum_list xs / n\n\ngoal (1 subgoal):\n 1. sum_list (x # xs) / n + sum_list (x # xs) =\n    ((1::'a) + (1::'a) / n) * sum_list (x # xs)", "with Cons"], ["proof (chain)\npicking this:\n  sum_list xs / n + sum_list xs = ((1::'a) + (1::'a) / n) * sum_list xs\n  sum_list (x # xs) / n = x / n + sum_list xs / n", "have\n      \"\\<dots> = x/n + (1+1/n)*\\<Sum>:xs - \\<Sum>:xs\""], ["proof (prove)\nusing this:\n  sum_list xs / n + sum_list xs = ((1::'a) + (1::'a) / n) * sum_list xs\n  sum_list (x # xs) / n = x / n + sum_list xs / n\n\ngoal (1 subgoal):\n 1. x / n + sum_list xs / n =\n    x / n + ((1::'a) + (1::'a) / n) * sum_list xs - sum_list xs", "by simp"], ["proof (state)\nthis:\n  x / n + sum_list xs / n =\n  x / n + ((1::'a) + (1::'a) / n) * sum_list xs - sum_list xs\n\ngoal (1 subgoal):\n 1. sum_list (x # xs) / n + sum_list (x # xs) =\n    ((1::'a) + (1::'a) / n) * sum_list (x # xs)", "finally"], ["proof (chain)\npicking this:\n  sum_list (x # xs) / n =\n  x / n + ((1::'a) + (1::'a) / n) * sum_list xs - sum_list xs", "have\n      \"\\<Sum>:(x#xs) / n + \\<Sum>:(x#xs) = x/n + (1+1/n)*\\<Sum>:xs - \\<Sum>:xs + \\<Sum>:(x#xs)\""], ["proof (prove)\nusing this:\n  sum_list (x # xs) / n =\n  x / n + ((1::'a) + (1::'a) / n) * sum_list xs - sum_list xs\n\ngoal (1 subgoal):\n 1. sum_list (x # xs) / n + sum_list (x # xs) =\n    x / n + ((1::'a) + (1::'a) / n) * sum_list xs - sum_list xs +\n    sum_list (x # xs)", "by simp"], ["proof (state)\nthis:\n  sum_list (x # xs) / n + sum_list (x # xs) =\n  x / n + ((1::'a) + (1::'a) / n) * sum_list xs - sum_list xs +\n  sum_list (x # xs)\n\ngoal (1 subgoal):\n 1. sum_list (x # xs) / n + sum_list (x # xs) =\n    ((1::'a) + (1::'a) / n) * sum_list (x # xs)", "also"], ["proof (state)\nthis:\n  sum_list (x # xs) / n + sum_list (x # xs) =\n  x / n + ((1::'a) + (1::'a) / n) * sum_list xs - sum_list xs +\n  sum_list (x # xs)\n\ngoal (1 subgoal):\n 1. sum_list (x # xs) / n + sum_list (x # xs) =\n    ((1::'a) + (1::'a) / n) * sum_list (x # xs)", "have\n      \"\\<dots> = x/n + (1+(1/n)- 1)*\\<Sum>:xs + \\<Sum>:(x#xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x / n + ((1::'a) + (1::'a) / n) * sum_list xs - sum_list xs +\n    sum_list (x # xs) =\n    x / n + ((1::'a) + (1::'a) / n - (1::'a)) * sum_list xs +\n    sum_list (x # xs)", "by (subst mult_1_left [symmetric, of \"\\<Sum>:xs\"]) (simp add: field_simps)"], ["proof (state)\nthis:\n  x / n + ((1::'a) + (1::'a) / n) * sum_list xs - sum_list xs +\n  sum_list (x # xs) =\n  x / n + ((1::'a) + (1::'a) / n - (1::'a)) * sum_list xs +\n  sum_list (x # xs)\n\ngoal (1 subgoal):\n 1. sum_list (x # xs) / n + sum_list (x # xs) =\n    ((1::'a) + (1::'a) / n) * sum_list (x # xs)", "also"], ["proof (state)\nthis:\n  x / n + ((1::'a) + (1::'a) / n) * sum_list xs - sum_list xs +\n  sum_list (x # xs) =\n  x / n + ((1::'a) + (1::'a) / n - (1::'a)) * sum_list xs +\n  sum_list (x # xs)\n\ngoal (1 subgoal):\n 1. sum_list (x # xs) / n + sum_list (x # xs) =\n    ((1::'a) + (1::'a) / n) * sum_list (x # xs)", "have\n      \"\\<dots> = x/n + (1/n)*\\<Sum>:xs + \\<Sum>:(x#xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x / n + ((1::'a) + (1::'a) / n - (1::'a)) * sum_list xs +\n    sum_list (x # xs) =\n    x / n + (1::'a) / n * sum_list xs + sum_list (x # xs)", "by simp"], ["proof (state)\nthis:\n  x / n + ((1::'a) + (1::'a) / n - (1::'a)) * sum_list xs +\n  sum_list (x # xs) =\n  x / n + (1::'a) / n * sum_list xs + sum_list (x # xs)\n\ngoal (1 subgoal):\n 1. sum_list (x # xs) / n + sum_list (x # xs) =\n    ((1::'a) + (1::'a) / n) * sum_list (x # xs)", "also"], ["proof (state)\nthis:\n  x / n + ((1::'a) + (1::'a) / n - (1::'a)) * sum_list xs +\n  sum_list (x # xs) =\n  x / n + (1::'a) / n * sum_list xs + sum_list (x # xs)\n\ngoal (1 subgoal):\n 1. sum_list (x # xs) / n + sum_list (x # xs) =\n    ((1::'a) + (1::'a) / n) * sum_list (x # xs)", "have\n      \"\\<dots> = (1/n)*\\<Sum>:(x#xs) + 1*\\<Sum>:(x#xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x / n + (1::'a) / n * sum_list xs + sum_list (x # xs) =\n    (1::'a) / n * sum_list (x # xs) + (1::'a) * sum_list (x # xs)", "by(simp add: divide_simps)"], ["proof (state)\nthis:\n  x / n + (1::'a) / n * sum_list xs + sum_list (x # xs) =\n  (1::'a) / n * sum_list (x # xs) + (1::'a) * sum_list (x # xs)\n\ngoal (1 subgoal):\n 1. sum_list (x # xs) / n + sum_list (x # xs) =\n    ((1::'a) + (1::'a) / n) * sum_list (x # xs)", "finally"], ["proof (chain)\npicking this:\n  sum_list (x # xs) / n + sum_list (x # xs) =\n  (1::'a) / n * sum_list (x # xs) + (1::'a) * sum_list (x # xs)", "show ?thesis"], ["proof (prove)\nusing this:\n  sum_list (x # xs) / n + sum_list (x # xs) =\n  (1::'a) / n * sum_list (x # xs) + (1::'a) * sum_list (x # xs)\n\ngoal (1 subgoal):\n 1. sum_list (x # xs) / n + sum_list (x # xs) =\n    ((1::'a) + (1::'a) / n) * sum_list (x # xs)", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  sum_list (x # xs) / n + sum_list (x # xs) =\n  ((1::'a) + (1::'a) / n) * sum_list (x # xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sum_list (x # xs) / n + sum_list (x # xs) =\n  ((1::'a) + (1::'a) / n) * sum_list (x # xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma remove1_retains_prod:\n  fixes a and xs::\"'a :: comm_ring_1 list\"\n  shows \"a : set xs \\<longrightarrow> \\<Prod>:xs = \\<Prod>:(remove1 a xs) * a\"\n  (is \"?P xs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> set xs \\<longrightarrow>\n    prod_list xs = prod_list (remove1 a xs) * a", "proof (induct xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<in> set [] \\<longrightarrow>\n    prod_list [] = prod_list (remove1 a []) * a\n 2. \\<And>aa xs.\n       a \\<in> set xs \\<longrightarrow>\n       prod_list xs = prod_list (remove1 a xs) * a \\<Longrightarrow>\n       a \\<in> set (aa # xs) \\<longrightarrow>\n       prod_list (aa # xs) = prod_list (remove1 a (aa # xs)) * a", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. a \\<in> set [] \\<longrightarrow>\n    prod_list [] = prod_list (remove1 a []) * a\n 2. \\<And>aa xs.\n       a \\<in> set xs \\<longrightarrow>\n       prod_list xs = prod_list (remove1 a xs) * a \\<Longrightarrow>\n       a \\<in> set (aa # xs) \\<longrightarrow>\n       prod_list (aa # xs) = prod_list (remove1 a (aa # xs)) * a", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> set [] \\<longrightarrow>\n    prod_list [] = prod_list (remove1 a []) * a", "by simp"], ["proof (state)\nthis:\n  a \\<in> set [] \\<longrightarrow>\n  prod_list [] = prod_list (remove1 a []) * a\n\ngoal (1 subgoal):\n 1. \\<And>aa xs.\n       a \\<in> set xs \\<longrightarrow>\n       prod_list xs = prod_list (remove1 a xs) * a \\<Longrightarrow>\n       a \\<in> set (aa # xs) \\<longrightarrow>\n       prod_list (aa # xs) = prod_list (remove1 a (aa # xs)) * a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa xs.\n       a \\<in> set xs \\<longrightarrow>\n       prod_list xs = prod_list (remove1 a xs) * a \\<Longrightarrow>\n       a \\<in> set (aa # xs) \\<longrightarrow>\n       prod_list (aa # xs) = prod_list (remove1 a (aa # xs)) * a", "case (Cons aa list)"], ["proof (state)\nthis:\n  a \\<in> set list \\<longrightarrow>\n  prod_list list = prod_list (remove1 a list) * a\n\ngoal (1 subgoal):\n 1. \\<And>aa xs.\n       a \\<in> set xs \\<longrightarrow>\n       prod_list xs = prod_list (remove1 a xs) * a \\<Longrightarrow>\n       a \\<in> set (aa # xs) \\<longrightarrow>\n       prod_list (aa # xs) = prod_list (remove1 a (aa # xs)) * a", "assume plist: \"?P list\""], ["proof (state)\nthis:\n  a \\<in> set list \\<longrightarrow>\n  prod_list list = prod_list (remove1 a list) * a\n\ngoal (1 subgoal):\n 1. \\<And>aa xs.\n       a \\<in> set xs \\<longrightarrow>\n       prod_list xs = prod_list (remove1 a xs) * a \\<Longrightarrow>\n       a \\<in> set (aa # xs) \\<longrightarrow>\n       prod_list (aa # xs) = prod_list (remove1 a (aa # xs)) * a", "show \"?P (aa#list)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> set (aa # list) \\<longrightarrow>\n    prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<in> set (aa # list) \\<Longrightarrow>\n    prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a", "assume aml: \"a : set(aa#list)\""], ["proof (state)\nthis:\n  a \\<in> set (aa # list)\n\ngoal (1 subgoal):\n 1. a \\<in> set (aa # list) \\<Longrightarrow>\n    prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a", "show \"\\<Prod>:(aa # list) = \\<Prod>:remove1 a (aa # list) * a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a\n 2. \\<not> ?P \\<Longrightarrow>\n    prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a", "assume aeq: \"a = aa\""], ["proof (state)\nthis:\n  a = aa\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a\n 2. \\<not> ?P \\<Longrightarrow>\n    prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a", "hence\n        \"remove1 a (aa#list) = list\""], ["proof (prove)\nusing this:\n  a = aa\n\ngoal (1 subgoal):\n 1. remove1 a (aa # list) = list", "by simp"], ["proof (state)\nthis:\n  remove1 a (aa # list) = list\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a\n 2. \\<not> ?P \\<Longrightarrow>\n    prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a", "hence\n        \"\\<Prod>:(remove1 a (aa#list)) = \\<Prod>:list\""], ["proof (prove)\nusing this:\n  remove1 a (aa # list) = list\n\ngoal (1 subgoal):\n 1. prod_list (remove1 a (aa # list)) = prod_list list", "by simp"], ["proof (state)\nthis:\n  prod_list (remove1 a (aa # list)) = prod_list list\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a\n 2. \\<not> ?P \\<Longrightarrow>\n    prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a", "moreover"], ["proof (state)\nthis:\n  prod_list (remove1 a (aa # list)) = prod_list list\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a\n 2. \\<not> ?P \\<Longrightarrow>\n    prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a", "with aeq"], ["proof (chain)\npicking this:\n  a = aa\n  prod_list (remove1 a (aa # list)) = prod_list list", "have\n        \"\\<Prod>:(aa#list) = \\<Prod>:list * a\""], ["proof (prove)\nusing this:\n  a = aa\n  prod_list (remove1 a (aa # list)) = prod_list list\n\ngoal (1 subgoal):\n 1. prod_list (aa # list) = prod_list list * a", "by simp"], ["proof (state)\nthis:\n  prod_list (aa # list) = prod_list list * a\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a\n 2. \\<not> ?P \\<Longrightarrow>\n    prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a", "ultimately"], ["proof (chain)\npicking this:\n  prod_list (remove1 a (aa # list)) = prod_list list\n  prod_list (aa # list) = prod_list list * a", "show\n        \"\\<Prod>:(aa#list) = \\<Prod>:remove1 a (aa # list) * a\""], ["proof (prove)\nusing this:\n  prod_list (remove1 a (aa # list)) = prod_list list\n  prod_list (aa # list) = prod_list list * a\n\ngoal (1 subgoal):\n 1. prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a", "by simp"], ["proof (state)\nthis:\n  prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a\n\ngoal (1 subgoal):\n 1. a \\<noteq> aa \\<Longrightarrow>\n    prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<noteq> aa \\<Longrightarrow>\n    prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a", "assume naeq: \"a \\<noteq> aa\""], ["proof (state)\nthis:\n  a \\<noteq> aa\n\ngoal (1 subgoal):\n 1. a \\<noteq> aa \\<Longrightarrow>\n    prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a", "with aml"], ["proof (chain)\npicking this:\n  a \\<in> set (aa # list)\n  a \\<noteq> aa", "have aml2: \"a : set list\""], ["proof (prove)\nusing this:\n  a \\<in> set (aa # list)\n  a \\<noteq> aa\n\ngoal (1 subgoal):\n 1. a \\<in> set list", "by simp"], ["proof (state)\nthis:\n  a \\<in> set list\n\ngoal (1 subgoal):\n 1. a \\<noteq> aa \\<Longrightarrow>\n    prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a", "from naeq"], ["proof (chain)\npicking this:\n  a \\<noteq> aa", "have\n        \"remove1 a (aa#list) = aa#(remove1 a list)\""], ["proof (prove)\nusing this:\n  a \\<noteq> aa\n\ngoal (1 subgoal):\n 1. remove1 a (aa # list) = aa # remove1 a list", "by simp"], ["proof (state)\nthis:\n  remove1 a (aa # list) = aa # remove1 a list\n\ngoal (1 subgoal):\n 1. a \\<noteq> aa \\<Longrightarrow>\n    prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a", "moreover"], ["proof (state)\nthis:\n  remove1 a (aa # list) = aa # remove1 a list\n\ngoal (1 subgoal):\n 1. a \\<noteq> aa \\<Longrightarrow>\n    prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a", "hence\n        \"\\<Prod>:(remove1 a (aa#list)) = aa * \\<Prod>:(remove1 a list)\""], ["proof (prove)\nusing this:\n  remove1 a (aa # list) = aa # remove1 a list\n\ngoal (1 subgoal):\n 1. prod_list (remove1 a (aa # list)) = aa * prod_list (remove1 a list)", "by simp"], ["proof (state)\nthis:\n  prod_list (remove1 a (aa # list)) = aa * prod_list (remove1 a list)\n\ngoal (1 subgoal):\n 1. a \\<noteq> aa \\<Longrightarrow>\n    prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a", "moreover"], ["proof (state)\nthis:\n  prod_list (remove1 a (aa # list)) = aa * prod_list (remove1 a list)\n\ngoal (1 subgoal):\n 1. a \\<noteq> aa \\<Longrightarrow>\n    prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a", "from aml2 plist"], ["proof (chain)\npicking this:\n  a \\<in> set list\n  a \\<in> set list \\<longrightarrow>\n  prod_list list = prod_list (remove1 a list) * a", "have\n        \"\\<Prod>:list = \\<Prod>:(remove1 a list) * a\""], ["proof (prove)\nusing this:\n  a \\<in> set list\n  a \\<in> set list \\<longrightarrow>\n  prod_list list = prod_list (remove1 a list) * a\n\ngoal (1 subgoal):\n 1. prod_list list = prod_list (remove1 a list) * a", "by simp"], ["proof (state)\nthis:\n  prod_list list = prod_list (remove1 a list) * a\n\ngoal (1 subgoal):\n 1. a \\<noteq> aa \\<Longrightarrow>\n    prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a", "ultimately"], ["proof (chain)\npicking this:\n  remove1 a (aa # list) = aa # remove1 a list\n  prod_list (remove1 a (aa # list)) = aa * prod_list (remove1 a list)\n  prod_list list = prod_list (remove1 a list) * a", "show\n        \"\\<Prod>:(aa#list) = \\<Prod>:remove1 a (aa # list) * a\""], ["proof (prove)\nusing this:\n  remove1 a (aa # list) = aa # remove1 a list\n  prod_list (remove1 a (aa # list)) = aa * prod_list (remove1 a list)\n  prod_list list = prod_list (remove1 a list) * a\n\ngoal (1 subgoal):\n 1. prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a", "by simp"], ["proof (state)\nthis:\n  prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a \\<in> set (aa # list) \\<longrightarrow>\n  prod_list (aa # list) = prod_list (remove1 a (aa # list)) * a\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The final lemma of this section states that if all elements\nare positive and non-zero then the product of these elements is also\npositive and non-zero.\\<close>"], ["", "lemma el_gt0_imp_prod_gt0 [rule_format]:\n  fixes xs::\"'a :: archimedean_field list\"\n  shows \"\\<forall>y. y : set xs \\<longrightarrow> y > 0 \\<Longrightarrow> \\<Prod>:xs > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y.\n       y \\<in> set xs \\<longrightarrow> (0::'a) < y \\<Longrightarrow>\n    (0::'a) < prod_list xs", "proof (induct xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>y.\n       y \\<in> set [] \\<longrightarrow> (0::'a) < y \\<Longrightarrow>\n    (0::'a) < prod_list []\n 2. \\<And>a xs.\n       \\<lbrakk>\\<forall>y.\n                   y \\<in> set xs \\<longrightarrow>\n                   (0::'a) < y \\<Longrightarrow>\n                (0::'a) < prod_list xs;\n        \\<forall>y.\n           y \\<in> set (a # xs) \\<longrightarrow> (0::'a) < y\\<rbrakk>\n       \\<Longrightarrow> (0::'a) < prod_list (a # xs)", "case Nil"], ["proof (state)\nthis:\n  \\<forall>y. y \\<in> set [] \\<longrightarrow> (0::'a) < y\n\ngoal (2 subgoals):\n 1. \\<forall>y.\n       y \\<in> set [] \\<longrightarrow> (0::'a) < y \\<Longrightarrow>\n    (0::'a) < prod_list []\n 2. \\<And>a xs.\n       \\<lbrakk>\\<forall>y.\n                   y \\<in> set xs \\<longrightarrow>\n                   (0::'a) < y \\<Longrightarrow>\n                (0::'a) < prod_list xs;\n        \\<forall>y.\n           y \\<in> set (a # xs) \\<longrightarrow> (0::'a) < y\\<rbrakk>\n       \\<Longrightarrow> (0::'a) < prod_list (a # xs)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) < prod_list []", "by simp"], ["proof (state)\nthis:\n  (0::'a) < prod_list []\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<forall>y.\n                   y \\<in> set xs \\<longrightarrow>\n                   (0::'a) < y \\<Longrightarrow>\n                (0::'a) < prod_list xs;\n        \\<forall>y.\n           y \\<in> set (a # xs) \\<longrightarrow> (0::'a) < y\\<rbrakk>\n       \\<Longrightarrow> (0::'a) < prod_list (a # xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<forall>y.\n                   y \\<in> set xs \\<longrightarrow>\n                   (0::'a) < y \\<Longrightarrow>\n                (0::'a) < prod_list xs;\n        \\<forall>y.\n           y \\<in> set (a # xs) \\<longrightarrow> (0::'a) < y\\<rbrakk>\n       \\<Longrightarrow> (0::'a) < prod_list (a # xs)", "case (Cons a xs)"], ["proof (state)\nthis:\n  \\<forall>y. y \\<in> set xs \\<longrightarrow> (0::'a) < y \\<Longrightarrow>\n  (0::'a) < prod_list xs\n  \\<forall>y. y \\<in> set (a # xs) \\<longrightarrow> (0::'a) < y\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<forall>y.\n                   y \\<in> set xs \\<longrightarrow>\n                   (0::'a) < y \\<Longrightarrow>\n                (0::'a) < prod_list xs;\n        \\<forall>y.\n           y \\<in> set (a # xs) \\<longrightarrow> (0::'a) < y\\<rbrakk>\n       \\<Longrightarrow> (0::'a) < prod_list (a # xs)", "have exp: \"\\<Prod>:(a#xs) = \\<Prod>:xs * a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list (a # xs) = prod_list xs * a", "by simp"], ["proof (state)\nthis:\n  prod_list (a # xs) = prod_list xs * a\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<forall>y.\n                   y \\<in> set xs \\<longrightarrow>\n                   (0::'a) < y \\<Longrightarrow>\n                (0::'a) < prod_list xs;\n        \\<forall>y.\n           y \\<in> set (a # xs) \\<longrightarrow> (0::'a) < y\\<rbrakk>\n       \\<Longrightarrow> (0::'a) < prod_list (a # xs)", "with Cons"], ["proof (chain)\npicking this:\n  \\<forall>y. y \\<in> set xs \\<longrightarrow> (0::'a) < y \\<Longrightarrow>\n  (0::'a) < prod_list xs\n  \\<forall>y. y \\<in> set (a # xs) \\<longrightarrow> (0::'a) < y\n  prod_list (a # xs) = prod_list xs * a", "have \"a > 0\""], ["proof (prove)\nusing this:\n  \\<forall>y. y \\<in> set xs \\<longrightarrow> (0::'a) < y \\<Longrightarrow>\n  (0::'a) < prod_list xs\n  \\<forall>y. y \\<in> set (a # xs) \\<longrightarrow> (0::'a) < y\n  prod_list (a # xs) = prod_list xs * a\n\ngoal (1 subgoal):\n 1. (0::'a) < a", "by simp"], ["proof (state)\nthis:\n  (0::'a) < a\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<forall>y.\n                   y \\<in> set xs \\<longrightarrow>\n                   (0::'a) < y \\<Longrightarrow>\n                (0::'a) < prod_list xs;\n        \\<forall>y.\n           y \\<in> set (a # xs) \\<longrightarrow> (0::'a) < y\\<rbrakk>\n       \\<Longrightarrow> (0::'a) < prod_list (a # xs)", "with exp Cons"], ["proof (chain)\npicking this:\n  prod_list (a # xs) = prod_list xs * a\n  \\<forall>y. y \\<in> set xs \\<longrightarrow> (0::'a) < y \\<Longrightarrow>\n  (0::'a) < prod_list xs\n  \\<forall>y. y \\<in> set (a # xs) \\<longrightarrow> (0::'a) < y\n  (0::'a) < a", "show ?case"], ["proof (prove)\nusing this:\n  prod_list (a # xs) = prod_list xs * a\n  \\<forall>y. y \\<in> set xs \\<longrightarrow> (0::'a) < y \\<Longrightarrow>\n  (0::'a) < prod_list xs\n  \\<forall>y. y \\<in> set (a # xs) \\<longrightarrow> (0::'a) < y\n  (0::'a) < a\n\ngoal (1 subgoal):\n 1. (0::'a) < prod_list (a # xs)", "by simp"], ["proof (state)\nthis:\n  (0::'a) < prod_list (a # xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* ============================================================================= *)\n(* ============================================================================= *)\n(* ============================================================================= *)"], ["", "subsection \\<open>Auxiliary lemma\\<close>"], ["", "text \\<open>This section presents a proof of the auxiliary lemma required\nfor this theorem.\\<close>"], ["", "lemma prod_exp:\n  fixes x::real\n  shows \"4*(x*y) = (x+y)^2 - (x-y)^2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 4 * (x * y) = (x + y)\\<^sup>2 - (x - y)\\<^sup>2", "by (simp add: power2_diff power2_sum)"], ["", "lemma abs_less_imp_sq_less [rule_format]:\n  fixes x::real and y::real and z::real and w::real\n  assumes diff: \"abs (x-y) < abs (z-w)\"\n  shows \"(x-y)^2 < (z-w)^2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x - y)\\<^sup>2 < (z - w)\\<^sup>2", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> (x - y)\\<^sup>2 < (z - w)\\<^sup>2\n 2. \\<not> ?P \\<Longrightarrow> (x - y)\\<^sup>2 < (z - w)\\<^sup>2", "assume \"x=y\""], ["proof (state)\nthis:\n  x = y\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> (x - y)\\<^sup>2 < (z - w)\\<^sup>2\n 2. \\<not> ?P \\<Longrightarrow> (x - y)\\<^sup>2 < (z - w)\\<^sup>2", "hence \"abs (x-y) = 0\""], ["proof (prove)\nusing this:\n  x = y\n\ngoal (1 subgoal):\n 1. \\<bar>x - y\\<bar> = 0", "by simp"], ["proof (state)\nthis:\n  \\<bar>x - y\\<bar> = 0\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> (x - y)\\<^sup>2 < (z - w)\\<^sup>2\n 2. \\<not> ?P \\<Longrightarrow> (x - y)\\<^sup>2 < (z - w)\\<^sup>2", "moreover"], ["proof (state)\nthis:\n  \\<bar>x - y\\<bar> = 0\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> (x - y)\\<^sup>2 < (z - w)\\<^sup>2\n 2. \\<not> ?P \\<Longrightarrow> (x - y)\\<^sup>2 < (z - w)\\<^sup>2", "with diff"], ["proof (chain)\npicking this:\n  \\<bar>x - y\\<bar> < \\<bar>z - w\\<bar>\n  \\<bar>x - y\\<bar> = 0", "have \"abs(z-w) > 0\""], ["proof (prove)\nusing this:\n  \\<bar>x - y\\<bar> < \\<bar>z - w\\<bar>\n  \\<bar>x - y\\<bar> = 0\n\ngoal (1 subgoal):\n 1. 0 < \\<bar>z - w\\<bar>", "by simp"], ["proof (state)\nthis:\n  0 < \\<bar>z - w\\<bar>\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> (x - y)\\<^sup>2 < (z - w)\\<^sup>2\n 2. \\<not> ?P \\<Longrightarrow> (x - y)\\<^sup>2 < (z - w)\\<^sup>2", "hence \"(z-w)^2 > 0\""], ["proof (prove)\nusing this:\n  0 < \\<bar>z - w\\<bar>\n\ngoal (1 subgoal):\n 1. 0 < (z - w)\\<^sup>2", "by simp"], ["proof (state)\nthis:\n  0 < (z - w)\\<^sup>2\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> (x - y)\\<^sup>2 < (z - w)\\<^sup>2\n 2. \\<not> ?P \\<Longrightarrow> (x - y)\\<^sup>2 < (z - w)\\<^sup>2", "ultimately"], ["proof (chain)\npicking this:\n  \\<bar>x - y\\<bar> = 0\n  0 < (z - w)\\<^sup>2", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<bar>x - y\\<bar> = 0\n  0 < (z - w)\\<^sup>2\n\ngoal (1 subgoal):\n 1. (x - y)\\<^sup>2 < (z - w)\\<^sup>2", "by auto"], ["proof (state)\nthis:\n  (x - y)\\<^sup>2 < (z - w)\\<^sup>2\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> (x - y)\\<^sup>2 < (z - w)\\<^sup>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> (x - y)\\<^sup>2 < (z - w)\\<^sup>2", "assume \"x\\<noteq>y\""], ["proof (state)\nthis:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> (x - y)\\<^sup>2 < (z - w)\\<^sup>2", "hence \"abs (x - y) > 0\""], ["proof (prove)\nusing this:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. 0 < \\<bar>x - y\\<bar>", "by simp"], ["proof (state)\nthis:\n  0 < \\<bar>x - y\\<bar>\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> (x - y)\\<^sup>2 < (z - w)\\<^sup>2", "with diff"], ["proof (chain)\npicking this:\n  \\<bar>x - y\\<bar> < \\<bar>z - w\\<bar>\n  0 < \\<bar>x - y\\<bar>", "have \"(abs (x-y))^2 < (abs (z-w))^2\""], ["proof (prove)\nusing this:\n  \\<bar>x - y\\<bar> < \\<bar>z - w\\<bar>\n  0 < \\<bar>x - y\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>x - y\\<bar>\\<^sup>2 < \\<bar>z - w\\<bar>\\<^sup>2", "by - (drule power_strict_mono [where a=\"abs (x-y)\" and n=2 and b=\"abs (z-w)\"], auto)"], ["proof (state)\nthis:\n  \\<bar>x - y\\<bar>\\<^sup>2 < \\<bar>z - w\\<bar>\\<^sup>2\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> (x - y)\\<^sup>2 < (z - w)\\<^sup>2", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<bar>x - y\\<bar>\\<^sup>2 < \\<bar>z - w\\<bar>\\<^sup>2\n\ngoal (1 subgoal):\n 1. (x - y)\\<^sup>2 < (z - w)\\<^sup>2", "by simp"], ["proof (state)\nthis:\n  (x - y)\\<^sup>2 < (z - w)\\<^sup>2\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The required lemma (phrased slightly differently than in the\ninformal proof.) Here we show that for any two pairs of numbers with\nequal sums the pair with the least difference has the greater\nproduct.\\<close>"], ["", "lemma le_diff_imp_gt_prod [rule_format]:\n  fixes x::real and y::real and z::real and w::real\n  assumes diff: \"abs (x-y) < abs (z-w)\" and sum: \"x+y = z+w\"\n  shows \"x*y > z*w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z * w < x * y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. z * w < x * y", "from sum"], ["proof (chain)\npicking this:\n  x + y = z + w", "have \"(x+y)^2 = (z+w)^2\""], ["proof (prove)\nusing this:\n  x + y = z + w\n\ngoal (1 subgoal):\n 1. (x + y)\\<^sup>2 = (z + w)\\<^sup>2", "by simp"], ["proof (state)\nthis:\n  (x + y)\\<^sup>2 = (z + w)\\<^sup>2\n\ngoal (1 subgoal):\n 1. z * w < x * y", "moreover"], ["proof (state)\nthis:\n  (x + y)\\<^sup>2 = (z + w)\\<^sup>2\n\ngoal (1 subgoal):\n 1. z * w < x * y", "from diff"], ["proof (chain)\npicking this:\n  \\<bar>x - y\\<bar> < \\<bar>z - w\\<bar>", "have \"(x-y)^2 < (z-w)^2\""], ["proof (prove)\nusing this:\n  \\<bar>x - y\\<bar> < \\<bar>z - w\\<bar>\n\ngoal (1 subgoal):\n 1. (x - y)\\<^sup>2 < (z - w)\\<^sup>2", "by (rule abs_less_imp_sq_less)"], ["proof (state)\nthis:\n  (x - y)\\<^sup>2 < (z - w)\\<^sup>2\n\ngoal (1 subgoal):\n 1. z * w < x * y", "ultimately"], ["proof (chain)\npicking this:\n  (x + y)\\<^sup>2 = (z + w)\\<^sup>2\n  (x - y)\\<^sup>2 < (z - w)\\<^sup>2", "have \"(x+y)^2 - (x-y)^2 > (z+w)^2 - (z-w)^2\""], ["proof (prove)\nusing this:\n  (x + y)\\<^sup>2 = (z + w)\\<^sup>2\n  (x - y)\\<^sup>2 < (z - w)\\<^sup>2\n\ngoal (1 subgoal):\n 1. (z + w)\\<^sup>2 - (z - w)\\<^sup>2 < (x + y)\\<^sup>2 - (x - y)\\<^sup>2", "by auto"], ["proof (state)\nthis:\n  (z + w)\\<^sup>2 - (z - w)\\<^sup>2 < (x + y)\\<^sup>2 - (x - y)\\<^sup>2\n\ngoal (1 subgoal):\n 1. z * w < x * y", "thus \"x*y > z*w\""], ["proof (prove)\nusing this:\n  (z + w)\\<^sup>2 - (z - w)\\<^sup>2 < (x + y)\\<^sup>2 - (x - y)\\<^sup>2\n\ngoal (1 subgoal):\n 1. z * w < x * y", "by (simp only: prod_exp [symmetric])"], ["proof (state)\nthis:\n  z * w < x * y\n\ngoal:\nNo subgoals!", "qed"], ["", "(* ============================================================================= *)\n(* ============================================================================= *)\n(* ============================================================================= *)"], ["", "subsection \\<open>Mean and GMean\\<close>"], ["", "text \\<open>Now we introduce definitions and properties of arithmetic and\ngeometric means over collections of real numbers.\\<close>"], ["", "subsubsection \\<open>Definitions\\<close>"], ["", "text \\<open>{\\em Arithmetic mean}\\<close>"], ["", "definition\n  mean :: \"(real list)\\<Rightarrow>real\" where\n  \"mean s = (\\<Sum>:s / real (length s))\""], ["", "text \\<open>{\\em Geometric mean}\\<close>"], ["", "definition\n  gmean :: \"(real list)\\<Rightarrow>real\" where\n  \"gmean s = root (length s) (\\<Prod>:s)\""], ["", "subsubsection \\<open>Properties\\<close>"], ["", "text \\<open>Here we present some trivial properties of {\\em mean} and {\\em gmean}.\\<close>"], ["", "lemma list_sum_mean:\n  fixes xs::\"real list\"\n  shows \"\\<Sum>:xs = ((mean xs) * (real (length xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list xs = mean xs * real (length xs)", "apply (induct_tac xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. sum_list [] = mean [] * real (length [])\n 2. \\<And>a list.\n       sum_list list = mean list * real (length list) \\<Longrightarrow>\n       sum_list (a # list) = mean (a # list) * real (length (a # list))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       sum_list list = mean list * real (length list) \\<Longrightarrow>\n       sum_list (a # list) = mean (a # list) * real (length (a # list))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       sum_list list = mean list * real (length list) \\<Longrightarrow>\n       a + mean list * real (length list) =\n       mean (a # list) * (1 + real (length list))", "apply (unfold mean_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       sum_list list =\n       sum_list list / real (length list) *\n       real (length list) \\<Longrightarrow>\n       a + sum_list list / real (length list) * real (length list) =\n       sum_list (a # list) / real (length (a # list)) *\n       (1 + real (length list))", "apply clarsimp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_mean_eq_iff:\n  fixes one::\"real list\" and two::\"real list\"\n  assumes\n    se: \"( \\<Sum>:one = \\<Sum>:two )\" and\n    le: \"(length one = length two)\"\n  shows \"(mean one = mean two)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mean one = mean two", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. mean one = mean two", "from se le"], ["proof (chain)\npicking this:\n  sum_list one = sum_list two\n  length one = length two", "have\n    \"(\\<Sum>:one / real (length one)) = (\\<Sum>:two / real (length two))\""], ["proof (prove)\nusing this:\n  sum_list one = sum_list two\n  length one = length two\n\ngoal (1 subgoal):\n 1. sum_list one / real (length one) = sum_list two / real (length two)", "by auto"], ["proof (state)\nthis:\n  sum_list one / real (length one) = sum_list two / real (length two)\n\ngoal (1 subgoal):\n 1. mean one = mean two", "thus ?thesis"], ["proof (prove)\nusing this:\n  sum_list one / real (length one) = sum_list two / real (length two)\n\ngoal (1 subgoal):\n 1. mean one = mean two", "unfolding mean_def"], ["proof (prove)\nusing this:\n  sum_list one / real (length one) = sum_list two / real (length two)\n\ngoal (1 subgoal):\n 1. sum_list one / real (length one) = sum_list two / real (length two)", "."], ["proof (state)\nthis:\n  mean one = mean two\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma list_gmean_gt_iff:\n  fixes one::\"real list\" and two::\"real list\"\n  assumes\n    gz1: \"\\<Prod>:one > 0\" and gz2: \"\\<Prod>:two > 0\" and\n    ne1: \"one \\<noteq> []\" and ne2: \"two \\<noteq> []\" and\n    pe: \"(\\<Prod>:one > \\<Prod>:two)\" and\n    le: \"(length one = length two)\"\n  shows \"(gmean one > gmean two)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gmean two < gmean one", "unfolding gmean_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. root (length two) (prod_list two) < root (length one) (prod_list one)", "using le ne2 pe"], ["proof (prove)\nusing this:\n  length one = length two\n  two \\<noteq> []\n  prod_list two < prod_list one\n\ngoal (1 subgoal):\n 1. root (length two) (prod_list two) < root (length one) (prod_list one)", "by simp"], ["", "text \\<open>This slightly more complicated lemma shows that for every non-empty collection with mean $M$, adding another element $a$ where $a=M$ results in a new list with the same mean $M$.\\<close>"], ["", "lemma list_mean_cons [rule_format]:\n  fixes xs::\"real list\"\n  shows \"xs \\<noteq> [] \\<longrightarrow> mean ((mean xs)#xs) = mean xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<longrightarrow> mean (mean xs # xs) = mean xs", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> mean (mean xs # xs) = mean xs", "assume lne: \"xs \\<noteq> []\""], ["proof (state)\nthis:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> mean (mean xs # xs) = mean xs", "obtain len where ld: \"len = real (length xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>len.\n        len = real (length xs) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  len = real (length xs)\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> mean (mean xs # xs) = mean xs", "with lne"], ["proof (chain)\npicking this:\n  xs \\<noteq> []\n  len = real (length xs)", "have lgt0: \"len > 0\""], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n  len = real (length xs)\n\ngoal (1 subgoal):\n 1. 0 < len", "by simp"], ["proof (state)\nthis:\n  0 < len\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> mean (mean xs # xs) = mean xs", "hence lnez: \"len \\<noteq> 0\""], ["proof (prove)\nusing this:\n  0 < len\n\ngoal (1 subgoal):\n 1. len \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  len \\<noteq> 0\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> mean (mean xs # xs) = mean xs", "from lgt0"], ["proof (chain)\npicking this:\n  0 < len", "have l1nez: \"len + 1 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  0 < len\n\ngoal (1 subgoal):\n 1. len + 1 \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  len + 1 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> mean (mean xs # xs) = mean xs", "from ld"], ["proof (chain)\npicking this:\n  len = real (length xs)", "have mean: \"mean xs = \\<Sum>:xs / len\""], ["proof (prove)\nusing this:\n  len = real (length xs)\n\ngoal (1 subgoal):\n 1. mean xs = sum_list xs / len", "unfolding mean_def"], ["proof (prove)\nusing this:\n  len = real (length xs)\n\ngoal (1 subgoal):\n 1. sum_list xs / real (length xs) = sum_list xs / len", "by simp"], ["proof (state)\nthis:\n  mean xs = sum_list xs / len\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> mean (mean xs # xs) = mean xs", "with ld of_nat_add of_int_1 mean_def"], ["proof (chain)\npicking this:\n  len = real (length xs)\n  of_nat (?m + ?n) = of_nat ?m + of_nat ?n\n  of_int 1 = (1::?'a)\n  mean ?s = sum_list ?s / real (length ?s)\n  mean xs = sum_list xs / len", "have \"mean ((mean xs)#xs) = (\\<Sum>:xs/len + \\<Sum>:xs) / (1+len)\""], ["proof (prove)\nusing this:\n  len = real (length xs)\n  of_nat (?m + ?n) = of_nat ?m + of_nat ?n\n  of_int 1 = (1::?'a)\n  mean ?s = sum_list ?s / real (length ?s)\n  mean xs = sum_list xs / len\n\ngoal (1 subgoal):\n 1. mean (mean xs # xs) = (sum_list xs / len + sum_list xs) / (1 + len)", "by simp"], ["proof (state)\nthis:\n  mean (mean xs # xs) = (sum_list xs / len + sum_list xs) / (1 + len)\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> mean (mean xs # xs) = mean xs", "also"], ["proof (state)\nthis:\n  mean (mean xs # xs) = (sum_list xs / len + sum_list xs) / (1 + len)\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> mean (mean xs # xs) = mean xs", "from list_sum_distrib_aux[of xs]"], ["proof (chain)\npicking this:\n  sum_list xs / ?n + sum_list xs = (1 + 1 / ?n) * sum_list xs", "have\n    \"\\<dots> = (1 + (1/len))*\\<Sum>:xs / (1+len)\""], ["proof (prove)\nusing this:\n  sum_list xs / ?n + sum_list xs = (1 + 1 / ?n) * sum_list xs\n\ngoal (1 subgoal):\n 1. (sum_list xs / len + sum_list xs) / (1 + len) =\n    (1 + 1 / len) * sum_list xs / (1 + len)", "by simp"], ["proof (state)\nthis:\n  (sum_list xs / len + sum_list xs) / (1 + len) =\n  (1 + 1 / len) * sum_list xs / (1 + len)\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> mean (mean xs # xs) = mean xs", "also"], ["proof (state)\nthis:\n  (sum_list xs / len + sum_list xs) / (1 + len) =\n  (1 + 1 / len) * sum_list xs / (1 + len)\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> mean (mean xs # xs) = mean xs", "with lnez"], ["proof (chain)\npicking this:\n  len \\<noteq> 0\n  (sum_list xs / len + sum_list xs) / (1 + len) =\n  (1 + 1 / len) * sum_list xs / (1 + len)", "have\n    \"\\<dots> = (len + 1)*\\<Sum>:xs / (len * (1+len))\""], ["proof (prove)\nusing this:\n  len \\<noteq> 0\n  (sum_list xs / len + sum_list xs) / (1 + len) =\n  (1 + 1 / len) * sum_list xs / (1 + len)\n\ngoal (1 subgoal):\n 1. (1 + 1 / len) * sum_list xs / (1 + len) =\n    (len + 1) * sum_list xs / (len * (1 + len))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>len \\<noteq> 0;\n     (sum_list xs / len + sum_list xs) / (1 + len) =\n     (1 + 1 / len) * sum_list xs / (1 + len)\\<rbrakk>\n    \\<Longrightarrow> (1 + 1 / len) * sum_list xs / (1 + len) =\n                      (len + 1) * sum_list xs / (len * (1 + len))", "apply (drule mult_divide_mult_cancel_left\n      [symmetric, where c=\"len\" and a=\"(1 + 1 / len) * \\<Sum>:xs\" and b=\"1+len\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(sum_list xs / len + sum_list xs) / (1 + len) =\n             (1 + 1 / len) * sum_list xs / (1 + len);\n     (1 + 1 / len) * sum_list xs / (1 + len) =\n     len * ((1 + 1 / len) * sum_list xs) / (len * (1 + len))\\<rbrakk>\n    \\<Longrightarrow> (1 + 1 / len) * sum_list xs / (1 + len) =\n                      (len + 1) * sum_list xs / (len * (1 + len))", "apply (clarsimp simp:field_simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (1 + 1 / len) * sum_list xs / (1 + len) =\n  (len + 1) * sum_list xs / (len * (1 + len))\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> mean (mean xs # xs) = mean xs", "also"], ["proof (state)\nthis:\n  (1 + 1 / len) * sum_list xs / (1 + len) =\n  (len + 1) * sum_list xs / (len * (1 + len))\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> mean (mean xs # xs) = mean xs", "from l1nez"], ["proof (chain)\npicking this:\n  len + 1 \\<noteq> 0", "have \"\\<dots> = \\<Sum>:xs / len\""], ["proof (prove)\nusing this:\n  len + 1 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (len + 1) * sum_list xs / (len * (1 + len)) = sum_list xs / len", "apply (subst mult.commute [where a=\"len\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. len + 1 \\<noteq> 0 \\<Longrightarrow>\n    (len + 1) * sum_list xs / ((1 + len) * len) = sum_list xs / len", "apply (drule mult_divide_mult_cancel_left\n      [where c=\"len+1\" and a=\"\\<Sum>:xs\" and b=\"len\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (len + 1) * sum_list xs / ((len + 1) * len) =\n    sum_list xs / len \\<Longrightarrow>\n    (len + 1) * sum_list xs / ((1 + len) * len) = sum_list xs / len", "by (simp add: ac_simps ac_simps)"], ["proof (state)\nthis:\n  (len + 1) * sum_list xs / (len * (1 + len)) = sum_list xs / len\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> mean (mean xs # xs) = mean xs", "finally"], ["proof (chain)\npicking this:\n  mean (mean xs # xs) = sum_list xs / len", "show \"mean ((mean xs)#xs) = mean xs\""], ["proof (prove)\nusing this:\n  mean (mean xs # xs) = sum_list xs / len\n\ngoal (1 subgoal):\n 1. mean (mean xs # xs) = mean xs", "by (simp add: mean)"], ["proof (state)\nthis:\n  mean (mean xs # xs) = mean xs\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>For a non-empty collection with positive mean, if we add a positive number to the collection then the mean remains positive.\\<close>"], ["", "lemma mean_gt_0 [rule_format]:\n  \"xs\\<noteq>[] \\<and> 0 < x \\<and> 0 < (mean xs) \\<longrightarrow> 0 < (mean (x#xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<and> 0 < x \\<and> 0 < mean xs \\<longrightarrow>\n    0 < mean (x # xs)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<and> 0 < x \\<and> 0 < mean xs \\<Longrightarrow>\n    0 < mean (x # xs)", "assume a: \"xs \\<noteq> [] \\<and> 0 < x \\<and> 0 < mean xs\""], ["proof (state)\nthis:\n  xs \\<noteq> [] \\<and> 0 < x \\<and> 0 < mean xs\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<and> 0 < x \\<and> 0 < mean xs \\<Longrightarrow>\n    0 < mean (x # xs)", "hence xgt0: \"0 < x\" and mgt0: \"0 < mean xs\""], ["proof (prove)\nusing this:\n  xs \\<noteq> [] \\<and> 0 < x \\<and> 0 < mean xs\n\ngoal (1 subgoal):\n 1. 0 < x &&& 0 < mean xs", "by auto"], ["proof (state)\nthis:\n  0 < x\n  0 < mean xs\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<and> 0 < x \\<and> 0 < mean xs \\<Longrightarrow>\n    0 < mean (x # xs)", "from a"], ["proof (chain)\npicking this:\n  xs \\<noteq> [] \\<and> 0 < x \\<and> 0 < mean xs", "have lxsgt0: \"length xs \\<noteq> 0\""], ["proof (prove)\nusing this:\n  xs \\<noteq> [] \\<and> 0 < x \\<and> 0 < mean xs\n\ngoal (1 subgoal):\n 1. length xs \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  length xs \\<noteq> 0\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<and> 0 < x \\<and> 0 < mean xs \\<Longrightarrow>\n    0 < mean (x # xs)", "from mgt0"], ["proof (chain)\npicking this:\n  0 < mean xs", "have xsgt0: \"0 < \\<Sum>:xs\""], ["proof (prove)\nusing this:\n  0 < mean xs\n\ngoal (1 subgoal):\n 1. 0 < sum_list xs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < mean xs \\<Longrightarrow> 0 < sum_list xs", "have \"mean xs = \\<Sum>:xs / real (length xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mean xs = sum_list xs / real (length xs)", "unfolding mean_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list xs / real (length xs) = sum_list xs / real (length xs)", "by simp"], ["proof (state)\nthis:\n  mean xs = sum_list xs / real (length xs)\n\ngoal (1 subgoal):\n 1. 0 < mean xs \\<Longrightarrow> 0 < sum_list xs", "hence \"\\<Sum>:xs = mean xs * real (length xs)\""], ["proof (prove)\nusing this:\n  mean xs = sum_list xs / real (length xs)\n\ngoal (1 subgoal):\n 1. sum_list xs = mean xs * real (length xs)", "by simp"], ["proof (state)\nthis:\n  sum_list xs = mean xs * real (length xs)\n\ngoal (1 subgoal):\n 1. 0 < mean xs \\<Longrightarrow> 0 < sum_list xs", "moreover"], ["proof (state)\nthis:\n  sum_list xs = mean xs * real (length xs)\n\ngoal (1 subgoal):\n 1. 0 < mean xs \\<Longrightarrow> 0 < sum_list xs", "from lxsgt0"], ["proof (chain)\npicking this:\n  length xs \\<noteq> 0", "have \"real (length xs) > 0\""], ["proof (prove)\nusing this:\n  length xs \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < real (length xs)", "by simp"], ["proof (state)\nthis:\n  0 < real (length xs)\n\ngoal (1 subgoal):\n 1. 0 < mean xs \\<Longrightarrow> 0 < sum_list xs", "moreover"], ["proof (state)\nthis:\n  0 < real (length xs)\n\ngoal (1 subgoal):\n 1. 0 < mean xs \\<Longrightarrow> 0 < sum_list xs", "with calculation lxsgt0 mgt0"], ["proof (chain)\npicking this:\n  sum_list xs = mean xs * real (length xs)\n  0 < real (length xs)\n  length xs \\<noteq> 0\n  0 < mean xs\n  0 < real (length xs)", "show ?thesis"], ["proof (prove)\nusing this:\n  sum_list xs = mean xs * real (length xs)\n  0 < real (length xs)\n  length xs \\<noteq> 0\n  0 < mean xs\n  0 < real (length xs)\n\ngoal (1 subgoal):\n 1. 0 < sum_list xs", "by auto"], ["proof (state)\nthis:\n  0 < sum_list xs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < sum_list xs\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<and> 0 < x \\<and> 0 < mean xs \\<Longrightarrow>\n    0 < mean (x # xs)", "with xgt0"], ["proof (chain)\npicking this:\n  0 < x\n  0 < sum_list xs", "have \"\\<Sum>:(x#xs) > 0\""], ["proof (prove)\nusing this:\n  0 < x\n  0 < sum_list xs\n\ngoal (1 subgoal):\n 1. 0 < sum_list (x # xs)", "by simp"], ["proof (state)\nthis:\n  0 < sum_list (x # xs)\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<and> 0 < x \\<and> 0 < mean xs \\<Longrightarrow>\n    0 < mean (x # xs)", "thus \"0 < (mean (x#xs))\""], ["proof (prove)\nusing this:\n  0 < sum_list (x # xs)\n\ngoal (1 subgoal):\n 1. 0 < mean (x # xs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < sum_list (x # xs) \\<Longrightarrow> 0 < mean (x # xs)", "assume \"0 < \\<Sum>:(x#xs)\""], ["proof (state)\nthis:\n  0 < sum_list (x # xs)\n\ngoal (1 subgoal):\n 1. 0 < sum_list (x # xs) \\<Longrightarrow> 0 < mean (x # xs)", "moreover"], ["proof (state)\nthis:\n  0 < sum_list (x # xs)\n\ngoal (1 subgoal):\n 1. 0 < sum_list (x # xs) \\<Longrightarrow> 0 < mean (x # xs)", "have \"real (length (x#xs)) > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < real (length (x # xs))", "by simp"], ["proof (state)\nthis:\n  0 < real (length (x # xs))\n\ngoal (1 subgoal):\n 1. 0 < sum_list (x # xs) \\<Longrightarrow> 0 < mean (x # xs)", "ultimately"], ["proof (chain)\npicking this:\n  0 < sum_list (x # xs)\n  0 < real (length (x # xs))", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < sum_list (x # xs)\n  0 < real (length (x # xs))\n\ngoal (1 subgoal):\n 1. 0 < mean (x # xs)", "unfolding mean_def"], ["proof (prove)\nusing this:\n  0 < sum_list (x # xs)\n  0 < real (length (x # xs))\n\ngoal (1 subgoal):\n 1. 0 < sum_list (x # xs) / real (length (x # xs))", "by simp"], ["proof (state)\nthis:\n  0 < mean (x # xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < mean (x # xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* ============================================================================= *)\n(* ============================================================================= *)\n(* ============================================================================= *)"], ["", "subsection \\<open>\\<open>list_neq\\<close>, \\<open>list_eq\\<close>\\<close>"], ["", "text \\<open>This section presents a useful formalisation of the act of removing all the elements from a collection that are equal (not equal) to a particular value. We use this to extract all the non-mean elements from a collection as is required by the proof.\\<close>"], ["", "subsubsection \\<open>Definitions\\<close>"], ["", "text \\<open>\\<open>list_neq\\<close> and \\<open>list_eq\\<close> just extract elements from a collection that are not equal (or equal) to some value.\\<close>"], ["", "abbreviation\n  list_neq :: \"('a list) \\<Rightarrow> 'a \\<Rightarrow> ('a list)\" where\n  \"list_neq xs el == filter (\\<lambda>x. x\\<noteq>el) xs\""], ["", "abbreviation\n  list_eq :: \"('a list) \\<Rightarrow> 'a \\<Rightarrow> ('a list)\" where\n  \"list_eq xs el == filter (\\<lambda>x. x=el) xs\""], ["", "subsubsection \\<open>Properties\\<close>"], ["", "text \\<open>This lemma just proves a required fact about \\<open>list_neq\\<close>, {\\em remove1} and {\\em length}.\\<close>"], ["", "lemma list_neq_remove1 [rule_format]:\n  shows \"a\\<noteq>m \\<and> a : set xs\n  \\<longrightarrow> length (list_neq (remove1 a xs) m) < length (list_neq xs m)\"\n  (is \"?A xs \\<longrightarrow> ?B xs\" is \"?P xs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> m \\<and> a \\<in> set xs \\<longrightarrow>\n    length (list_neq (remove1 a xs) m) < length (list_neq xs m)", "proof (induct xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<noteq> m \\<and> a \\<in> set [] \\<longrightarrow>\n    length (list_neq (remove1 a []) m) < length (list_neq [] m)\n 2. \\<And>aa xs.\n       a \\<noteq> m \\<and> a \\<in> set xs \\<longrightarrow>\n       length (list_neq (remove1 a xs) m)\n       < length (list_neq xs m) \\<Longrightarrow>\n       a \\<noteq> m \\<and> a \\<in> set (aa # xs) \\<longrightarrow>\n       length (list_neq (remove1 a (aa # xs)) m)\n       < length (list_neq (aa # xs) m)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. a \\<noteq> m \\<and> a \\<in> set [] \\<longrightarrow>\n    length (list_neq (remove1 a []) m) < length (list_neq [] m)\n 2. \\<And>aa xs.\n       a \\<noteq> m \\<and> a \\<in> set xs \\<longrightarrow>\n       length (list_neq (remove1 a xs) m)\n       < length (list_neq xs m) \\<Longrightarrow>\n       a \\<noteq> m \\<and> a \\<in> set (aa # xs) \\<longrightarrow>\n       length (list_neq (remove1 a (aa # xs)) m)\n       < length (list_neq (aa # xs) m)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> m \\<and> a \\<in> set [] \\<longrightarrow>\n    length (list_neq (remove1 a []) m) < length (list_neq [] m)", "by simp"], ["proof (state)\nthis:\n  a \\<noteq> m \\<and> a \\<in> set [] \\<longrightarrow>\n  length (list_neq (remove1 a []) m) < length (list_neq [] m)\n\ngoal (1 subgoal):\n 1. \\<And>aa xs.\n       a \\<noteq> m \\<and> a \\<in> set xs \\<longrightarrow>\n       length (list_neq (remove1 a xs) m)\n       < length (list_neq xs m) \\<Longrightarrow>\n       a \\<noteq> m \\<and> a \\<in> set (aa # xs) \\<longrightarrow>\n       length (list_neq (remove1 a (aa # xs)) m)\n       < length (list_neq (aa # xs) m)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa xs.\n       a \\<noteq> m \\<and> a \\<in> set xs \\<longrightarrow>\n       length (list_neq (remove1 a xs) m)\n       < length (list_neq xs m) \\<Longrightarrow>\n       a \\<noteq> m \\<and> a \\<in> set (aa # xs) \\<longrightarrow>\n       length (list_neq (remove1 a (aa # xs)) m)\n       < length (list_neq (aa # xs) m)", "case (Cons x xs)"], ["proof (state)\nthis:\n  a \\<noteq> m \\<and> a \\<in> set xs \\<longrightarrow>\n  length (list_neq (remove1 a xs) m) < length (list_neq xs m)\n\ngoal (1 subgoal):\n 1. \\<And>aa xs.\n       a \\<noteq> m \\<and> a \\<in> set xs \\<longrightarrow>\n       length (list_neq (remove1 a xs) m)\n       < length (list_neq xs m) \\<Longrightarrow>\n       a \\<noteq> m \\<and> a \\<in> set (aa # xs) \\<longrightarrow>\n       length (list_neq (remove1 a (aa # xs)) m)\n       < length (list_neq (aa # xs) m)", "note \\<open>?P xs\\<close>"], ["proof (state)\nthis:\n  a \\<noteq> m \\<and> a \\<in> set xs \\<longrightarrow>\n  length (list_neq (remove1 a xs) m) < length (list_neq xs m)\n\ngoal (1 subgoal):\n 1. \\<And>aa xs.\n       a \\<noteq> m \\<and> a \\<in> set xs \\<longrightarrow>\n       length (list_neq (remove1 a xs) m)\n       < length (list_neq xs m) \\<Longrightarrow>\n       a \\<noteq> m \\<and> a \\<in> set (aa # xs) \\<longrightarrow>\n       length (list_neq (remove1 a (aa # xs)) m)\n       < length (list_neq (aa # xs) m)", "{"], ["proof (state)\nthis:\n  a \\<noteq> m \\<and> a \\<in> set xs \\<longrightarrow>\n  length (list_neq (remove1 a xs) m) < length (list_neq xs m)\n\ngoal (1 subgoal):\n 1. \\<And>aa xs.\n       a \\<noteq> m \\<and> a \\<in> set xs \\<longrightarrow>\n       length (list_neq (remove1 a xs) m)\n       < length (list_neq xs m) \\<Longrightarrow>\n       a \\<noteq> m \\<and> a \\<in> set (aa # xs) \\<longrightarrow>\n       length (list_neq (remove1 a (aa # xs)) m)\n       < length (list_neq (aa # xs) m)", "assume a: \"?A (x#xs)\""], ["proof (state)\nthis:\n  a \\<noteq> m \\<and> a \\<in> set (x # xs)\n\ngoal (1 subgoal):\n 1. \\<And>aa xs.\n       a \\<noteq> m \\<and> a \\<in> set xs \\<longrightarrow>\n       length (list_neq (remove1 a xs) m)\n       < length (list_neq xs m) \\<Longrightarrow>\n       a \\<noteq> m \\<and> a \\<in> set (aa # xs) \\<longrightarrow>\n       length (list_neq (remove1 a (aa # xs)) m)\n       < length (list_neq (aa # xs) m)", "hence\n      a_ne_m: \"a\\<noteq>m\" and\n      a_mem_x_xs: \"a : set(x#xs)\""], ["proof (prove)\nusing this:\n  a \\<noteq> m \\<and> a \\<in> set (x # xs)\n\ngoal (1 subgoal):\n 1. a \\<noteq> m &&& a \\<in> set (x # xs)", "by auto"], ["proof (state)\nthis:\n  a \\<noteq> m\n  a \\<in> set (x # xs)\n\ngoal (1 subgoal):\n 1. \\<And>aa xs.\n       a \\<noteq> m \\<and> a \\<in> set xs \\<longrightarrow>\n       length (list_neq (remove1 a xs) m)\n       < length (list_neq xs m) \\<Longrightarrow>\n       a \\<noteq> m \\<and> a \\<in> set (aa # xs) \\<longrightarrow>\n       length (list_neq (remove1 a (aa # xs)) m)\n       < length (list_neq (aa # xs) m)", "have b: \"?B (x#xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)\n 2. \\<not> ?P \\<Longrightarrow>\n    length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)", "assume \"xs = []\""], ["proof (state)\nthis:\n  xs = []\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)\n 2. \\<not> ?P \\<Longrightarrow>\n    length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)", "with a_ne_m a_mem_x_xs"], ["proof (chain)\npicking this:\n  a \\<noteq> m\n  a \\<in> set (x # xs)\n  xs = []", "show ?thesis"], ["proof (prove)\nusing this:\n  a \\<noteq> m\n  a \\<in> set (x # xs)\n  xs = []\n\ngoal (1 subgoal):\n 1. length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)", "apply (cases \"x=a\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<noteq> m; a \\<in> set (x # xs); xs = []; x = a\\<rbrakk>\n    \\<Longrightarrow> length (list_neq (remove1 a (x # xs)) m)\n                      < length (list_neq (x # xs) m)\n 2. \\<lbrakk>a \\<noteq> m; a \\<in> set (x # xs); xs = [];\n     x \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> length (list_neq (remove1 a (x # xs)) m)\n                      < length (list_neq (x # xs) m)", "by auto"], ["proof (state)\nthis:\n  length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow>\n    length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow>\n    length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)", "assume xs_ne: \"xs \\<noteq> []\""], ["proof (state)\nthis:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow>\n    length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)", "with a_ne_m a_mem_x_xs"], ["proof (chain)\npicking this:\n  a \\<noteq> m\n  a \\<in> set (x # xs)\n  xs \\<noteq> []", "show ?thesis"], ["proof (prove)\nusing this:\n  a \\<noteq> m\n  a \\<in> set (x # xs)\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<noteq> m; a \\<in> set (x # xs); xs \\<noteq> [];\n     ?P3\\<rbrakk>\n    \\<Longrightarrow> length (list_neq (remove1 a (x # xs)) m)\n                      < length (list_neq (x # xs) m)\n 2. \\<lbrakk>a \\<noteq> m; a \\<in> set (x # xs); xs \\<noteq> [];\n     \\<not> ?P3\\<rbrakk>\n    \\<Longrightarrow> length (list_neq (remove1 a (x # xs)) m)\n                      < length (list_neq (x # xs) m)", "assume \"a=x\""], ["proof (state)\nthis:\n  a = x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<noteq> m; a \\<in> set (x # xs); xs \\<noteq> [];\n     ?P3\\<rbrakk>\n    \\<Longrightarrow> length (list_neq (remove1 a (x # xs)) m)\n                      < length (list_neq (x # xs) m)\n 2. \\<lbrakk>a \\<noteq> m; a \\<in> set (x # xs); xs \\<noteq> [];\n     \\<not> ?P3\\<rbrakk>\n    \\<Longrightarrow> length (list_neq (remove1 a (x # xs)) m)\n                      < length (list_neq (x # xs) m)", "with a_ne_m"], ["proof (chain)\npicking this:\n  a \\<noteq> m\n  a = x", "show ?thesis"], ["proof (prove)\nusing this:\n  a \\<noteq> m\n  a = x\n\ngoal (1 subgoal):\n 1. length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)", "by simp"], ["proof (state)\nthis:\n  length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<noteq> m; a \\<in> set (x # xs); xs \\<noteq> [];\n     a \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> length (list_neq (remove1 a (x # xs)) m)\n                      < length (list_neq (x # xs) m)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<noteq> m; a \\<in> set (x # xs); xs \\<noteq> [];\n     a \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> length (list_neq (remove1 a (x # xs)) m)\n                      < length (list_neq (x # xs) m)", "assume a_ne_x: \"a\\<noteq>x\""], ["proof (state)\nthis:\n  a \\<noteq> x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<noteq> m; a \\<in> set (x # xs); xs \\<noteq> [];\n     a \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> length (list_neq (remove1 a (x # xs)) m)\n                      < length (list_neq (x # xs) m)", "with a_mem_x_xs"], ["proof (chain)\npicking this:\n  a \\<in> set (x # xs)\n  a \\<noteq> x", "have a_mem_xs: \"a : set xs\""], ["proof (prove)\nusing this:\n  a \\<in> set (x # xs)\n  a \\<noteq> x\n\ngoal (1 subgoal):\n 1. a \\<in> set xs", "by simp"], ["proof (state)\nthis:\n  a \\<in> set xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<noteq> m; a \\<in> set (x # xs); xs \\<noteq> [];\n     a \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> length (list_neq (remove1 a (x # xs)) m)\n                      < length (list_neq (x # xs) m)", "with xs_ne a_ne_m Cons"], ["proof (chain)\npicking this:\n  xs \\<noteq> []\n  a \\<noteq> m\n  a \\<noteq> m \\<and> a \\<in> set xs \\<longrightarrow>\n  length (list_neq (remove1 a xs) m) < length (list_neq xs m)\n  a \\<in> set xs", "have\n          rel: \"length (list_neq (remove1 a xs) m) < length (list_neq xs m)\""], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n  a \\<noteq> m\n  a \\<noteq> m \\<and> a \\<in> set xs \\<longrightarrow>\n  length (list_neq (remove1 a xs) m) < length (list_neq xs m)\n  a \\<in> set xs\n\ngoal (1 subgoal):\n 1. length (list_neq (remove1 a xs) m) < length (list_neq xs m)", "by simp"], ["proof (state)\nthis:\n  length (list_neq (remove1 a xs) m) < length (list_neq xs m)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<noteq> m; a \\<in> set (x # xs); xs \\<noteq> [];\n     a \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> length (list_neq (remove1 a (x # xs)) m)\n                      < length (list_neq (x # xs) m)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)\n 2. \\<not> ?P \\<Longrightarrow>\n    length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)", "assume x_e_m: \"x=m\""], ["proof (state)\nthis:\n  x = m\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)\n 2. \\<not> ?P \\<Longrightarrow>\n    length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)", "with Cons xs_ne a_ne_m a_mem_xs"], ["proof (chain)\npicking this:\n  a \\<noteq> m \\<and> a \\<in> set xs \\<longrightarrow>\n  length (list_neq (remove1 a xs) m) < length (list_neq xs m)\n  xs \\<noteq> []\n  a \\<noteq> m\n  a \\<in> set xs\n  x = m", "show ?thesis"], ["proof (prove)\nusing this:\n  a \\<noteq> m \\<and> a \\<in> set xs \\<longrightarrow>\n  length (list_neq (remove1 a xs) m) < length (list_neq xs m)\n  xs \\<noteq> []\n  a \\<noteq> m\n  a \\<in> set xs\n  x = m\n\ngoal (1 subgoal):\n 1. length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)", "by simp"], ["proof (state)\nthis:\n  length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)\n\ngoal (1 subgoal):\n 1. x \\<noteq> m \\<Longrightarrow>\n    length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> m \\<Longrightarrow>\n    length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)", "assume x_ne_m: \"x\\<noteq>m\""], ["proof (state)\nthis:\n  x \\<noteq> m\n\ngoal (1 subgoal):\n 1. x \\<noteq> m \\<Longrightarrow>\n    length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)", "from a_ne_x"], ["proof (chain)\npicking this:\n  a \\<noteq> x", "have\n            \"remove1 a (x#xs) = x#(remove1 a xs)\""], ["proof (prove)\nusing this:\n  a \\<noteq> x\n\ngoal (1 subgoal):\n 1. remove1 a (x # xs) = x # remove1 a xs", "by simp"], ["proof (state)\nthis:\n  remove1 a (x # xs) = x # remove1 a xs\n\ngoal (1 subgoal):\n 1. x \\<noteq> m \\<Longrightarrow>\n    length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)", "hence\n            \"length (list_neq (remove1 a (x#xs)) m) =\n             length (list_neq (x#(remove1 a xs)) m)\""], ["proof (prove)\nusing this:\n  remove1 a (x # xs) = x # remove1 a xs\n\ngoal (1 subgoal):\n 1. length (list_neq (remove1 a (x # xs)) m) =\n    length (list_neq (x # remove1 a xs) m)", "by simp"], ["proof (state)\nthis:\n  length (list_neq (remove1 a (x # xs)) m) =\n  length (list_neq (x # remove1 a xs) m)\n\ngoal (1 subgoal):\n 1. x \\<noteq> m \\<Longrightarrow>\n    length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)", "also"], ["proof (state)\nthis:\n  length (list_neq (remove1 a (x # xs)) m) =\n  length (list_neq (x # remove1 a xs) m)\n\ngoal (1 subgoal):\n 1. x \\<noteq> m \\<Longrightarrow>\n    length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)", "with x_ne_m"], ["proof (chain)\npicking this:\n  x \\<noteq> m\n  length (list_neq (remove1 a (x # xs)) m) =\n  length (list_neq (x # remove1 a xs) m)", "have\n            \"\\<dots> = 1 + length (list_neq (remove1 a xs) m)\""], ["proof (prove)\nusing this:\n  x \\<noteq> m\n  length (list_neq (remove1 a (x # xs)) m) =\n  length (list_neq (x # remove1 a xs) m)\n\ngoal (1 subgoal):\n 1. length (list_neq (x # remove1 a xs) m) =\n    1 + length (list_neq (remove1 a xs) m)", "by simp"], ["proof (state)\nthis:\n  length (list_neq (x # remove1 a xs) m) =\n  1 + length (list_neq (remove1 a xs) m)\n\ngoal (1 subgoal):\n 1. x \\<noteq> m \\<Longrightarrow>\n    length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)", "finally"], ["proof (chain)\npicking this:\n  length (list_neq (remove1 a (x # xs)) m) =\n  1 + length (list_neq (remove1 a xs) m)", "have\n            \"length (list_neq (remove1 a (x#xs)) m) =\n             1 + length (list_neq (remove1 a xs) m)\""], ["proof (prove)\nusing this:\n  length (list_neq (remove1 a (x # xs)) m) =\n  1 + length (list_neq (remove1 a xs) m)\n\ngoal (1 subgoal):\n 1. length (list_neq (remove1 a (x # xs)) m) =\n    1 + length (list_neq (remove1 a xs) m)", "by simp"], ["proof (state)\nthis:\n  length (list_neq (remove1 a (x # xs)) m) =\n  1 + length (list_neq (remove1 a xs) m)\n\ngoal (1 subgoal):\n 1. x \\<noteq> m \\<Longrightarrow>\n    length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)", "moreover"], ["proof (state)\nthis:\n  length (list_neq (remove1 a (x # xs)) m) =\n  1 + length (list_neq (remove1 a xs) m)\n\ngoal (1 subgoal):\n 1. x \\<noteq> m \\<Longrightarrow>\n    length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)", "with x_ne_m a_ne_x"], ["proof (chain)\npicking this:\n  x \\<noteq> m\n  a \\<noteq> x\n  length (list_neq (remove1 a (x # xs)) m) =\n  1 + length (list_neq (remove1 a xs) m)", "have\n            \"length (list_neq (x#xs) m) =\n             1 + length (list_neq xs m)\""], ["proof (prove)\nusing this:\n  x \\<noteq> m\n  a \\<noteq> x\n  length (list_neq (remove1 a (x # xs)) m) =\n  1 + length (list_neq (remove1 a xs) m)\n\ngoal (1 subgoal):\n 1. length (list_neq (x # xs) m) = 1 + length (list_neq xs m)", "by simp"], ["proof (state)\nthis:\n  length (list_neq (x # xs) m) = 1 + length (list_neq xs m)\n\ngoal (1 subgoal):\n 1. x \\<noteq> m \\<Longrightarrow>\n    length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)", "moreover"], ["proof (state)\nthis:\n  length (list_neq (x # xs) m) = 1 + length (list_neq xs m)\n\ngoal (1 subgoal):\n 1. x \\<noteq> m \\<Longrightarrow>\n    length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)", "with rel"], ["proof (chain)\npicking this:\n  length (list_neq (remove1 a xs) m) < length (list_neq xs m)\n  length (list_neq (x # xs) m) = 1 + length (list_neq xs m)", "show ?thesis"], ["proof (prove)\nusing this:\n  length (list_neq (remove1 a xs) m) < length (list_neq xs m)\n  length (list_neq (x # xs) m) = 1 + length (list_neq xs m)\n\ngoal (1 subgoal):\n 1. length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)", "by simp"], ["proof (state)\nthis:\n  length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)\n\ngoal (1 subgoal):\n 1. \\<And>aa xs.\n       a \\<noteq> m \\<and> a \\<in> set xs \\<longrightarrow>\n       length (list_neq (remove1 a xs) m)\n       < length (list_neq xs m) \\<Longrightarrow>\n       a \\<noteq> m \\<and> a \\<in> set (aa # xs) \\<longrightarrow>\n       length (list_neq (remove1 a (aa # xs)) m)\n       < length (list_neq (aa # xs) m)", "}"], ["proof (state)\nthis:\n  a \\<noteq> m \\<and> a \\<in> set (x # xs) \\<Longrightarrow>\n  length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)\n\ngoal (1 subgoal):\n 1. \\<And>aa xs.\n       a \\<noteq> m \\<and> a \\<in> set xs \\<longrightarrow>\n       length (list_neq (remove1 a xs) m)\n       < length (list_neq xs m) \\<Longrightarrow>\n       a \\<noteq> m \\<and> a \\<in> set (aa # xs) \\<longrightarrow>\n       length (list_neq (remove1 a (aa # xs)) m)\n       < length (list_neq (aa # xs) m)", "thus \"?P (x#xs)\""], ["proof (prove)\nusing this:\n  a \\<noteq> m \\<and> a \\<in> set (x # xs) \\<Longrightarrow>\n  length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)\n\ngoal (1 subgoal):\n 1. a \\<noteq> m \\<and> a \\<in> set (x # xs) \\<longrightarrow>\n    length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)", "by simp"], ["proof (state)\nthis:\n  a \\<noteq> m \\<and> a \\<in> set (x # xs) \\<longrightarrow>\n  length (list_neq (remove1 a (x # xs)) m) < length (list_neq (x # xs) m)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>We now prove some facts about \\<open>list_eq\\<close>, \\<open>list_neq\\<close>, length, sum and product.\\<close>"], ["", "lemma list_eq_sum [simp]:\n  fixes xs::\"real list\"\n  shows \"\\<Sum>:(list_eq xs m) = (m * (real (length (list_eq xs m))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (list_eq xs m) = m * real (length (list_eq xs m))", "apply (induct_tac xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. sum_list (list_eq [] m) = m * real (length (list_eq [] m))\n 2. \\<And>a list.\n       sum_list (list_eq list m) =\n       m * real (length (list_eq list m)) \\<Longrightarrow>\n       sum_list (list_eq (a # list) m) =\n       m * real (length (list_eq (a # list) m))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       sum_list (list_eq list m) =\n       m * real (length (list_eq list m)) \\<Longrightarrow>\n       sum_list (list_eq (a # list) m) =\n       m * real (length (list_eq (a # list) m))", "apply (simp add:field_simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_eq_prod [simp]:\n  fixes xs::\"real list\"\n  shows \"\\<Prod>:(list_eq xs m) = (m ^ (length (list_eq xs m)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list (list_eq xs m) = m ^ length (list_eq xs m)", "apply (induct_tac xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. prod_list (list_eq [] m) = m ^ length (list_eq [] m)\n 2. \\<And>a list.\n       prod_list (list_eq list m) =\n       m ^ length (list_eq list m) \\<Longrightarrow>\n       prod_list (list_eq (a # list) m) = m ^ length (list_eq (a # list) m)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       prod_list (list_eq list m) =\n       m ^ length (list_eq list m) \\<Longrightarrow>\n       prod_list (list_eq (a # list) m) = m ^ length (list_eq (a # list) m)", "apply clarsimp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma sum_list_split:\n  fixes xs::\"real list\"\n  shows \"\\<Sum>:xs = (\\<Sum>:(list_neq xs m) + \\<Sum>:(list_eq xs m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list xs = sum_list (list_neq xs m) + sum_list (list_eq xs m)", "apply (induct xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. sum_list [] = sum_list (list_neq [] m) + sum_list (list_eq [] m)\n 2. \\<And>a xs.\n       sum_list xs =\n       sum_list (list_neq xs m) + sum_list (list_eq xs m) \\<Longrightarrow>\n       sum_list (a # xs) =\n       sum_list (list_neq (a # xs) m) + sum_list (list_eq (a # xs) m)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       sum_list xs =\n       sum_list (list_neq xs m) + sum_list (list_eq xs m) \\<Longrightarrow>\n       sum_list (a # xs) =\n       sum_list (list_neq (a # xs) m) + sum_list (list_eq (a # xs) m)", "apply clarsimp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma prod_list_split:\n  fixes xs::\"real list\"\n  shows \"\\<Prod>:xs = (\\<Prod>:(list_neq xs m) * \\<Prod>:(list_eq xs m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list xs = prod_list (list_neq xs m) * prod_list (list_eq xs m)", "apply (induct xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. prod_list [] = prod_list (list_neq [] m) * prod_list (list_eq [] m)\n 2. \\<And>a xs.\n       prod_list xs =\n       prod_list (list_neq xs m) *\n       prod_list (list_eq xs m) \\<Longrightarrow>\n       prod_list (a # xs) =\n       prod_list (list_neq (a # xs) m) * prod_list (list_eq (a # xs) m)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       prod_list xs =\n       prod_list (list_neq xs m) *\n       prod_list (list_eq xs m) \\<Longrightarrow>\n       prod_list (a # xs) =\n       prod_list (list_neq (a # xs) m) * prod_list (list_eq (a # xs) m)", "apply clarsimp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma sum_list_length_split:\n  fixes xs::\"real list\"\n  shows \"length xs = length (list_neq xs m) + length (list_eq xs m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = length (list_neq xs m) + length (list_eq xs m)", "apply (induct xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. length [] = length (list_neq [] m) + length (list_eq [] m)\n 2. \\<And>a xs.\n       length xs =\n       length (list_neq xs m) + length (list_eq xs m) \\<Longrightarrow>\n       length (a # xs) =\n       length (list_neq (a # xs) m) + length (list_eq (a # xs) m)", "apply simp+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(* ============================================================================= *)\n(* ============================================================================= *)\n(* ============================================================================= *)"], ["", "subsection \\<open>Element selection\\<close>"], ["", "text \\<open>We now show that given after extracting all the elements not equal to the mean there exists one that is greater then (or less than) the mean.\\<close>"], ["", "lemma pick_one_gt:\n  fixes xs::\"real list\" and m::real\n  defines m: \"m \\<equiv> (mean xs)\" and neq: \"noteq \\<equiv> list_neq xs m\"\n  assumes asum: \"noteq\\<noteq>[]\"\n  shows \"\\<exists>e. e : set noteq \\<and> e > m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>e. e \\<in> set noteq \\<and> m < e", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> m < e \\<Longrightarrow> False", "let ?m = \"(mean xs)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> m < e \\<Longrightarrow> False", "let ?neq = \"list_neq xs ?m\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> m < e \\<Longrightarrow> False", "let ?eq = \"list_eq xs ?m\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> m < e \\<Longrightarrow> False", "from list_eq_sum"], ["proof (chain)\npicking this:\n  sum_list (list_eq ?xs ?m) = ?m * real (length (list_eq ?xs ?m))", "have \"(\\<Sum>:?eq) = ?m * (real (length ?eq))\""], ["proof (prove)\nusing this:\n  sum_list (list_eq ?xs ?m) = ?m * real (length (list_eq ?xs ?m))\n\ngoal (1 subgoal):\n 1. sum_list (list_eq xs (mean xs)) =\n    mean xs * real (length (list_eq xs (mean xs)))", "by simp"], ["proof (state)\nthis:\n  sum_list (list_eq xs (mean xs)) =\n  mean xs * real (length (list_eq xs (mean xs)))\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> m < e \\<Longrightarrow> False", "from asum"], ["proof (chain)\npicking this:\n  noteq \\<noteq> []", "have neq_ne: \" ?neq \\<noteq> []\""], ["proof (prove)\nusing this:\n  noteq \\<noteq> []\n\ngoal (1 subgoal):\n 1. list_neq xs (mean xs) \\<noteq> []", "unfolding m neq"], ["proof (prove)\nusing this:\n  list_neq xs (mean xs) \\<noteq> []\n\ngoal (1 subgoal):\n 1. list_neq xs (mean xs) \\<noteq> []", "."], ["proof (state)\nthis:\n  list_neq xs (mean xs) \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> m < e \\<Longrightarrow> False", "assume not_el: \"\\<not>(\\<exists>e. e : set noteq \\<and> m < e)\""], ["proof (state)\nthis:\n  \\<nexists>e. e \\<in> set noteq \\<and> m < e\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> m < e \\<Longrightarrow> False", "hence not_el_exp: \"\\<not>(\\<exists>e. e : set ?neq \\<and> ?m < e)\""], ["proof (prove)\nusing this:\n  \\<nexists>e. e \\<in> set noteq \\<and> m < e\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set (list_neq xs (mean xs)) \\<and> mean xs < e", "unfolding m neq"], ["proof (prove)\nusing this:\n  \\<nexists>e. e \\<in> set (list_neq xs (mean xs)) \\<and> mean xs < e\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set (list_neq xs (mean xs)) \\<and> mean xs < e", "."], ["proof (state)\nthis:\n  \\<nexists>e. e \\<in> set (list_neq xs (mean xs)) \\<and> mean xs < e\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> m < e \\<Longrightarrow> False", "hence \"\\<forall>e. \\<not>(e : set ?neq) \\<or> \\<not>(e > ?m)\""], ["proof (prove)\nusing this:\n  \\<nexists>e. e \\<in> set (list_neq xs (mean xs)) \\<and> mean xs < e\n\ngoal (1 subgoal):\n 1. \\<forall>e.\n       e \\<notin> set (list_neq xs (mean xs)) \\<or> \\<not> mean xs < e", "by simp"], ["proof (state)\nthis:\n  \\<forall>e.\n     e \\<notin> set (list_neq xs (mean xs)) \\<or> \\<not> mean xs < e\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> m < e \\<Longrightarrow> False", "hence \"\\<forall>e. e : set ?neq \\<longrightarrow> \\<not>(e > ?m)\""], ["proof (prove)\nusing this:\n  \\<forall>e.\n     e \\<notin> set (list_neq xs (mean xs)) \\<or> \\<not> mean xs < e\n\ngoal (1 subgoal):\n 1. \\<forall>e.\n       e \\<in> set (list_neq xs (mean xs)) \\<longrightarrow>\n       \\<not> mean xs < e", "by blast"], ["proof (state)\nthis:\n  \\<forall>e.\n     e \\<in> set (list_neq xs (mean xs)) \\<longrightarrow>\n     \\<not> mean xs < e\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> m < e \\<Longrightarrow> False", "hence \"\\<forall>e. e : set ?neq \\<longrightarrow> e \\<le> ?m\""], ["proof (prove)\nusing this:\n  \\<forall>e.\n     e \\<in> set (list_neq xs (mean xs)) \\<longrightarrow>\n     \\<not> mean xs < e\n\ngoal (1 subgoal):\n 1. \\<forall>e.\n       e \\<in> set (list_neq xs (mean xs)) \\<longrightarrow> e \\<le> mean xs", "by (simp add: linorder_not_less)"], ["proof (state)\nthis:\n  \\<forall>e.\n     e \\<in> set (list_neq xs (mean xs)) \\<longrightarrow> e \\<le> mean xs\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> m < e \\<Longrightarrow> False", "hence \"\\<forall>e. e : set ?neq \\<longrightarrow> e < ?m\""], ["proof (prove)\nusing this:\n  \\<forall>e.\n     e \\<in> set (list_neq xs (mean xs)) \\<longrightarrow> e \\<le> mean xs\n\ngoal (1 subgoal):\n 1. \\<forall>e.\n       e \\<in> set (list_neq xs (mean xs)) \\<longrightarrow> e < mean xs", "by (simp add:order_le_less)"], ["proof (state)\nthis:\n  \\<forall>e.\n     e \\<in> set (list_neq xs (mean xs)) \\<longrightarrow> e < mean xs\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> m < e \\<Longrightarrow> False", "with assms sum_list_mono_lt"], ["proof (chain)\npicking this:\n  m \\<equiv> mean xs\n  noteq \\<equiv> list_neq xs m\n  noteq \\<noteq> []\n  ?xs \\<noteq> [] \\<and> (\\<forall>x\\<in>set ?xs. x < ?m) \\<Longrightarrow>\n  sum_list ?xs < ?m * real (length ?xs)\n  \\<forall>e.\n     e \\<in> set (list_neq xs (mean xs)) \\<longrightarrow> e < mean xs", "have \"(\\<Sum>:?neq) < ?m * (real (length ?neq))\""], ["proof (prove)\nusing this:\n  m \\<equiv> mean xs\n  noteq \\<equiv> list_neq xs m\n  noteq \\<noteq> []\n  ?xs \\<noteq> [] \\<and> (\\<forall>x\\<in>set ?xs. x < ?m) \\<Longrightarrow>\n  sum_list ?xs < ?m * real (length ?xs)\n  \\<forall>e.\n     e \\<in> set (list_neq xs (mean xs)) \\<longrightarrow> e < mean xs\n\ngoal (1 subgoal):\n 1. sum_list (list_neq xs (mean xs))\n    < mean xs * real (length (list_neq xs (mean xs)))", "by blast"], ["proof (state)\nthis:\n  sum_list (list_neq xs (mean xs))\n  < mean xs * real (length (list_neq xs (mean xs)))\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> m < e \\<Longrightarrow> False", "hence\n    \"(\\<Sum>:?neq) + (\\<Sum>:?eq) < ?m * (real (length ?neq)) + (\\<Sum>:?eq)\""], ["proof (prove)\nusing this:\n  sum_list (list_neq xs (mean xs))\n  < mean xs * real (length (list_neq xs (mean xs)))\n\ngoal (1 subgoal):\n 1. sum_list (list_neq xs (mean xs)) + sum_list (list_eq xs (mean xs))\n    < mean xs * real (length (list_neq xs (mean xs))) +\n      sum_list (list_eq xs (mean xs))", "by simp"], ["proof (state)\nthis:\n  sum_list (list_neq xs (mean xs)) + sum_list (list_eq xs (mean xs))\n  < mean xs * real (length (list_neq xs (mean xs))) +\n    sum_list (list_eq xs (mean xs))\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> m < e \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  sum_list (list_neq xs (mean xs)) + sum_list (list_eq xs (mean xs))\n  < mean xs * real (length (list_neq xs (mean xs))) +\n    sum_list (list_eq xs (mean xs))\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> m < e \\<Longrightarrow> False", "have\n    \"\\<dots> = (?m * ((real (length ?neq) + (real (length ?eq)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mean xs * real (length (list_neq xs (mean xs))) +\n    sum_list (list_eq xs (mean xs)) =\n    mean xs *\n    (real (length (list_neq xs (mean xs))) +\n     real (length (list_eq xs (mean xs))))", "by (simp add:field_simps)"], ["proof (state)\nthis:\n  mean xs * real (length (list_neq xs (mean xs))) +\n  sum_list (list_eq xs (mean xs)) =\n  mean xs *\n  (real (length (list_neq xs (mean xs))) +\n   real (length (list_eq xs (mean xs))))\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> m < e \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  mean xs * real (length (list_neq xs (mean xs))) +\n  sum_list (list_eq xs (mean xs)) =\n  mean xs *\n  (real (length (list_neq xs (mean xs))) +\n   real (length (list_eq xs (mean xs))))\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> m < e \\<Longrightarrow> False", "have\n    \"\\<dots> = (?m * (real (length xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mean xs *\n    (real (length (list_neq xs (mean xs))) +\n     real (length (list_eq xs (mean xs)))) =\n    mean xs * real (length xs)", "apply (subst of_nat_add [symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. mean xs *\n    real (length (list_neq xs (mean xs)) + length (list_eq xs (mean xs))) =\n    mean xs * real (length xs)", "by (simp add: sum_list_length_split [symmetric])"], ["proof (state)\nthis:\n  mean xs *\n  (real (length (list_neq xs (mean xs))) +\n   real (length (list_eq xs (mean xs)))) =\n  mean xs * real (length xs)\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> m < e \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  mean xs *\n  (real (length (list_neq xs (mean xs))) +\n   real (length (list_eq xs (mean xs)))) =\n  mean xs * real (length xs)\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> m < e \\<Longrightarrow> False", "have\n    \"\\<dots> = \\<Sum>:xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mean xs * real (length xs) = sum_list xs", "by (simp add: list_sum_mean [symmetric])"], ["proof (state)\nthis:\n  mean xs * real (length xs) = sum_list xs\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> m < e \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  mean xs * real (length xs) = sum_list xs\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> m < e \\<Longrightarrow> False", "from not_el calculation"], ["proof (chain)\npicking this:\n  \\<nexists>e. e \\<in> set noteq \\<and> m < e\n  sum_list (list_neq xs (mean xs)) + sum_list (list_eq xs (mean xs))\n  < sum_list xs", "show False"], ["proof (prove)\nusing this:\n  \\<nexists>e. e \\<in> set noteq \\<and> m < e\n  sum_list (list_neq xs (mean xs)) + sum_list (list_eq xs (mean xs))\n  < sum_list xs\n\ngoal (1 subgoal):\n 1. False", "by (simp only: sum_list_split [symmetric])"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pick_one_lt:\n  fixes xs::\"real list\" and m::real\n  defines m: \"m \\<equiv> (mean xs)\" and neq: \"noteq \\<equiv> list_neq xs m\"\n  assumes asum: \"noteq\\<noteq>[]\"\n  shows \"\\<exists>e. e : set noteq \\<and> e < m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>e. e \\<in> set noteq \\<and> e < m", "proof (rule ccontr) \\<comment> \\<open>reductio ad absurdum\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> e < m \\<Longrightarrow> False", "let ?m = \"(mean xs)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> e < m \\<Longrightarrow> False", "let ?neq = \"list_neq xs ?m\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> e < m \\<Longrightarrow> False", "let ?eq = \"list_eq xs ?m\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> e < m \\<Longrightarrow> False", "from list_eq_sum"], ["proof (chain)\npicking this:\n  sum_list (list_eq ?xs ?m) = ?m * real (length (list_eq ?xs ?m))", "have \"(\\<Sum>:?eq) = ?m * (real (length ?eq))\""], ["proof (prove)\nusing this:\n  sum_list (list_eq ?xs ?m) = ?m * real (length (list_eq ?xs ?m))\n\ngoal (1 subgoal):\n 1. sum_list (list_eq xs (mean xs)) =\n    mean xs * real (length (list_eq xs (mean xs)))", "by simp"], ["proof (state)\nthis:\n  sum_list (list_eq xs (mean xs)) =\n  mean xs * real (length (list_eq xs (mean xs)))\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> e < m \\<Longrightarrow> False", "from asum"], ["proof (chain)\npicking this:\n  noteq \\<noteq> []", "have neq_ne: \" ?neq \\<noteq> []\""], ["proof (prove)\nusing this:\n  noteq \\<noteq> []\n\ngoal (1 subgoal):\n 1. list_neq xs (mean xs) \\<noteq> []", "unfolding m neq"], ["proof (prove)\nusing this:\n  list_neq xs (mean xs) \\<noteq> []\n\ngoal (1 subgoal):\n 1. list_neq xs (mean xs) \\<noteq> []", "."], ["proof (state)\nthis:\n  list_neq xs (mean xs) \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> e < m \\<Longrightarrow> False", "assume not_el: \"\\<not>(\\<exists>e. e : set noteq \\<and> m > e)\""], ["proof (state)\nthis:\n  \\<nexists>e. e \\<in> set noteq \\<and> e < m\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> e < m \\<Longrightarrow> False", "hence not_el_exp: \"\\<not>(\\<exists>e. e : set ?neq \\<and> ?m > e)\""], ["proof (prove)\nusing this:\n  \\<nexists>e. e \\<in> set noteq \\<and> e < m\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set (list_neq xs (mean xs)) \\<and> e < mean xs", "unfolding m neq"], ["proof (prove)\nusing this:\n  \\<nexists>e. e \\<in> set (list_neq xs (mean xs)) \\<and> e < mean xs\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set (list_neq xs (mean xs)) \\<and> e < mean xs", "."], ["proof (state)\nthis:\n  \\<nexists>e. e \\<in> set (list_neq xs (mean xs)) \\<and> e < mean xs\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> e < m \\<Longrightarrow> False", "hence \"\\<forall>e. \\<not>(e : set ?neq) \\<or> \\<not>(e < ?m)\""], ["proof (prove)\nusing this:\n  \\<nexists>e. e \\<in> set (list_neq xs (mean xs)) \\<and> e < mean xs\n\ngoal (1 subgoal):\n 1. \\<forall>e.\n       e \\<notin> set (list_neq xs (mean xs)) \\<or> \\<not> e < mean xs", "by simp"], ["proof (state)\nthis:\n  \\<forall>e.\n     e \\<notin> set (list_neq xs (mean xs)) \\<or> \\<not> e < mean xs\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> e < m \\<Longrightarrow> False", "hence \"\\<forall>e. e : set ?neq \\<longrightarrow> \\<not>(e < ?m)\""], ["proof (prove)\nusing this:\n  \\<forall>e.\n     e \\<notin> set (list_neq xs (mean xs)) \\<or> \\<not> e < mean xs\n\ngoal (1 subgoal):\n 1. \\<forall>e.\n       e \\<in> set (list_neq xs (mean xs)) \\<longrightarrow>\n       \\<not> e < mean xs", "by blast"], ["proof (state)\nthis:\n  \\<forall>e.\n     e \\<in> set (list_neq xs (mean xs)) \\<longrightarrow>\n     \\<not> e < mean xs\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> e < m \\<Longrightarrow> False", "hence \"\\<forall>e. e : set ?neq \\<longrightarrow> e \\<ge> ?m\""], ["proof (prove)\nusing this:\n  \\<forall>e.\n     e \\<in> set (list_neq xs (mean xs)) \\<longrightarrow>\n     \\<not> e < mean xs\n\ngoal (1 subgoal):\n 1. \\<forall>e.\n       e \\<in> set (list_neq xs (mean xs)) \\<longrightarrow> mean xs \\<le> e", "by (simp add: linorder_not_less)"], ["proof (state)\nthis:\n  \\<forall>e.\n     e \\<in> set (list_neq xs (mean xs)) \\<longrightarrow> mean xs \\<le> e\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> e < m \\<Longrightarrow> False", "hence \"\\<forall>e. e : set ?neq \\<longrightarrow> e > ?m\""], ["proof (prove)\nusing this:\n  \\<forall>e.\n     e \\<in> set (list_neq xs (mean xs)) \\<longrightarrow> mean xs \\<le> e\n\ngoal (1 subgoal):\n 1. \\<forall>e.\n       e \\<in> set (list_neq xs (mean xs)) \\<longrightarrow> mean xs < e", "by (auto simp: order_le_less)"], ["proof (state)\nthis:\n  \\<forall>e.\n     e \\<in> set (list_neq xs (mean xs)) \\<longrightarrow> mean xs < e\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> e < m \\<Longrightarrow> False", "with assms sum_list_mono_gt"], ["proof (chain)\npicking this:\n  m \\<equiv> mean xs\n  noteq \\<equiv> list_neq xs m\n  noteq \\<noteq> []\n  ?xs \\<noteq> [] \\<and> Ball (set ?xs) ((<) ?m) \\<Longrightarrow>\n  ?m * real (length ?xs) < sum_list ?xs\n  \\<forall>e.\n     e \\<in> set (list_neq xs (mean xs)) \\<longrightarrow> mean xs < e", "have \"(\\<Sum>:?neq) > ?m * (real (length ?neq))\""], ["proof (prove)\nusing this:\n  m \\<equiv> mean xs\n  noteq \\<equiv> list_neq xs m\n  noteq \\<noteq> []\n  ?xs \\<noteq> [] \\<and> Ball (set ?xs) ((<) ?m) \\<Longrightarrow>\n  ?m * real (length ?xs) < sum_list ?xs\n  \\<forall>e.\n     e \\<in> set (list_neq xs (mean xs)) \\<longrightarrow> mean xs < e\n\ngoal (1 subgoal):\n 1. mean xs * real (length (list_neq xs (mean xs)))\n    < sum_list (list_neq xs (mean xs))", "by blast"], ["proof (state)\nthis:\n  mean xs * real (length (list_neq xs (mean xs)))\n  < sum_list (list_neq xs (mean xs))\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> e < m \\<Longrightarrow> False", "hence\n    \"(\\<Sum>:?neq) + (\\<Sum>:?eq) > ?m * (real (length ?neq)) + (\\<Sum>:?eq)\""], ["proof (prove)\nusing this:\n  mean xs * real (length (list_neq xs (mean xs)))\n  < sum_list (list_neq xs (mean xs))\n\ngoal (1 subgoal):\n 1. mean xs * real (length (list_neq xs (mean xs))) +\n    sum_list (list_eq xs (mean xs))\n    < sum_list (list_neq xs (mean xs)) + sum_list (list_eq xs (mean xs))", "by simp"], ["proof (state)\nthis:\n  mean xs * real (length (list_neq xs (mean xs))) +\n  sum_list (list_eq xs (mean xs))\n  < sum_list (list_neq xs (mean xs)) + sum_list (list_eq xs (mean xs))\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> e < m \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  mean xs * real (length (list_neq xs (mean xs))) +\n  sum_list (list_eq xs (mean xs))\n  < sum_list (list_neq xs (mean xs)) + sum_list (list_eq xs (mean xs))\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> e < m \\<Longrightarrow> False", "have\n    \"(?m * (real (length ?neq)) + (\\<Sum>:?eq)) =\n     (?m * (real (length ?neq)) + (?m * (real (length ?eq))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mean xs * real (length (list_neq xs (mean xs))) +\n    sum_list (list_eq xs (mean xs)) =\n    mean xs * real (length (list_neq xs (mean xs))) +\n    mean xs * real (length (list_eq xs (mean xs)))", "by simp"], ["proof (state)\nthis:\n  mean xs * real (length (list_neq xs (mean xs))) +\n  sum_list (list_eq xs (mean xs)) =\n  mean xs * real (length (list_neq xs (mean xs))) +\n  mean xs * real (length (list_eq xs (mean xs)))\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> e < m \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  mean xs * real (length (list_neq xs (mean xs))) +\n  sum_list (list_eq xs (mean xs)) =\n  mean xs * real (length (list_neq xs (mean xs))) +\n  mean xs * real (length (list_eq xs (mean xs)))\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> e < m \\<Longrightarrow> False", "have\n    \"\\<dots> = (?m * ((real (length ?neq) + (real (length ?eq)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mean xs * real (length (list_neq xs (mean xs))) +\n    mean xs * real (length (list_eq xs (mean xs))) =\n    mean xs *\n    (real (length (list_neq xs (mean xs))) +\n     real (length (list_eq xs (mean xs))))", "by (simp add:field_simps)"], ["proof (state)\nthis:\n  mean xs * real (length (list_neq xs (mean xs))) +\n  mean xs * real (length (list_eq xs (mean xs))) =\n  mean xs *\n  (real (length (list_neq xs (mean xs))) +\n   real (length (list_eq xs (mean xs))))\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> e < m \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  mean xs * real (length (list_neq xs (mean xs))) +\n  mean xs * real (length (list_eq xs (mean xs))) =\n  mean xs *\n  (real (length (list_neq xs (mean xs))) +\n   real (length (list_eq xs (mean xs))))\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> e < m \\<Longrightarrow> False", "have\n    \"\\<dots> = (?m * (real (length xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mean xs *\n    (real (length (list_neq xs (mean xs))) +\n     real (length (list_eq xs (mean xs)))) =\n    mean xs * real (length xs)", "apply (subst of_nat_add [symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. mean xs *\n    real (length (list_neq xs (mean xs)) + length (list_eq xs (mean xs))) =\n    mean xs * real (length xs)", "by (simp add: sum_list_length_split [symmetric])"], ["proof (state)\nthis:\n  mean xs *\n  (real (length (list_neq xs (mean xs))) +\n   real (length (list_eq xs (mean xs)))) =\n  mean xs * real (length xs)\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> e < m \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  mean xs *\n  (real (length (list_neq xs (mean xs))) +\n   real (length (list_eq xs (mean xs)))) =\n  mean xs * real (length xs)\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> e < m \\<Longrightarrow> False", "have\n    \"\\<dots> = \\<Sum>:xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mean xs * real (length xs) = sum_list xs", "by (simp add: list_sum_mean [symmetric])"], ["proof (state)\nthis:\n  mean xs * real (length xs) = sum_list xs\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> e < m \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  mean xs * real (length xs) = sum_list xs\n\ngoal (1 subgoal):\n 1. \\<nexists>e. e \\<in> set noteq \\<and> e < m \\<Longrightarrow> False", "from not_el calculation"], ["proof (chain)\npicking this:\n  \\<nexists>e. e \\<in> set noteq \\<and> e < m\n  sum_list xs\n  < sum_list (list_neq xs (mean xs)) + sum_list (list_eq xs (mean xs))", "show False"], ["proof (prove)\nusing this:\n  \\<nexists>e. e \\<in> set noteq \\<and> e < m\n  sum_list xs\n  < sum_list (list_neq xs (mean xs)) + sum_list (list_eq xs (mean xs))\n\ngoal (1 subgoal):\n 1. False", "by (simp only: sum_list_split [symmetric])"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "(* =================================================================== *)\n(* =================================================================== *)\n(* =================================================================== *)\n(* =================================================================== *)"], ["", "subsection \\<open>Abstract properties\\<close>"], ["", "text \\<open>In order to maintain some comprehension of the following proofs we now introduce some properties of collections.\\<close>"], ["", "subsubsection \\<open>Definitions\\<close>"], ["", "text \\<open>{\\em het}: The heterogeneity of a collection is the number of elements not equal to its mean. A heterogeneity of zero implies the all the elements in the collection are the same (i.e. homogeneous).\\<close>"], ["", "definition\n  het :: \"real list \\<Rightarrow> nat\" where\n  \"het l = length (list_neq l (mean l))\""], ["", "lemma het_gt_0_imp_noteq_ne: \"het l > 0 \\<Longrightarrow> list_neq l (mean l) \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < het l \\<Longrightarrow> list_neq l (mean l) \\<noteq> []", "unfolding het_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < length (list_neq l (mean l)) \\<Longrightarrow>\n    list_neq l (mean l) \\<noteq> []", "by simp"], ["", "lemma het_gt_0I: assumes a: \"a \\<in> set xs\" and b: \"b \\<in> set xs\" and neq: \"a \\<noteq> b\"\n  shows \"het xs > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < het xs", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> 0 < het xs \\<Longrightarrow> False", "assume \"\\<not> ?thesis\""], ["proof (state)\nthis:\n  \\<not> 0 < het xs\n\ngoal (1 subgoal):\n 1. \\<not> 0 < het xs \\<Longrightarrow> False", "hence \"het xs = 0\""], ["proof (prove)\nusing this:\n  \\<not> 0 < het xs\n\ngoal (1 subgoal):\n 1. het xs = 0", "by auto"], ["proof (state)\nthis:\n  het xs = 0\n\ngoal (1 subgoal):\n 1. \\<not> 0 < het xs \\<Longrightarrow> False", "from this[unfolded het_def]"], ["proof (chain)\npicking this:\n  length (list_neq xs (mean xs)) = 0", "have \"list_neq xs (mean xs) = []\""], ["proof (prove)\nusing this:\n  length (list_neq xs (mean xs)) = 0\n\ngoal (1 subgoal):\n 1. list_neq xs (mean xs) = []", "by simp"], ["proof (state)\nthis:\n  list_neq xs (mean xs) = []\n\ngoal (1 subgoal):\n 1. \\<not> 0 < het xs \\<Longrightarrow> False", "from arg_cong[OF this, of set]"], ["proof (chain)\npicking this:\n  set (list_neq xs (mean xs)) = set []", "have mean: \"\\<And> x. x \\<in> set xs \\<Longrightarrow> x = mean xs\""], ["proof (prove)\nusing this:\n  set (list_neq xs (mean xs)) = set []\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set xs \\<Longrightarrow> x = mean xs", "by auto"], ["proof (state)\nthis:\n  ?x \\<in> set xs \\<Longrightarrow> ?x = mean xs\n\ngoal (1 subgoal):\n 1. \\<not> 0 < het xs \\<Longrightarrow> False", "from mean[OF a] mean[OF b] neq"], ["proof (chain)\npicking this:\n  a = mean xs\n  b = mean xs\n  a \\<noteq> b", "show False"], ["proof (prove)\nusing this:\n  a = mean xs\n  b = mean xs\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\\<open>\\<gamma>-eq\\<close>: Two lists are $\\gamma$-equivalent if and only\nif they both have the same number of elements and the same arithmetic\nmeans.\\<close>"], ["", "definition\n  \\<gamma>_eq :: \"((real list)*(real list)) \\<Rightarrow> bool\" where\n  \"\\<gamma>_eq a \\<longleftrightarrow> mean (fst a) = mean (snd a) \\<and> length (fst a) = length (snd a)\""], ["", "text \\<open>\\<open>\\<gamma>_eq\\<close> is transitive and symmetric.\\<close>"], ["", "lemma \\<gamma>_eq_sym: \"\\<gamma>_eq (a,b) = \\<gamma>_eq (b,a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma>_eq (a, b) = \\<gamma>_eq (b, a)", "unfolding \\<gamma>_eq_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (mean (fst (a, b)) = mean (snd (a, b)) \\<and>\n     length (fst (a, b)) = length (snd (a, b))) =\n    (mean (fst (b, a)) = mean (snd (b, a)) \\<and>\n     length (fst (b, a)) = length (snd (b, a)))", "by auto"], ["", "lemma \\<gamma>_eq_trans:\n  \"\\<gamma>_eq (x,y) \\<Longrightarrow> \\<gamma>_eq (y,z) \\<Longrightarrow> \\<gamma>_eq (x,z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<gamma>_eq (x, y); \\<gamma>_eq (y, z)\\<rbrakk>\n    \\<Longrightarrow> \\<gamma>_eq (x, z)", "unfolding \\<gamma>_eq_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mean (fst (x, y)) = mean (snd (x, y)) \\<and>\n             length (fst (x, y)) = length (snd (x, y));\n     mean (fst (y, z)) = mean (snd (y, z)) \\<and>\n     length (fst (y, z)) = length (snd (y, z))\\<rbrakk>\n    \\<Longrightarrow> mean (fst (x, z)) = mean (snd (x, z)) \\<and>\n                      length (fst (x, z)) = length (snd (x, z))", "by simp"], ["", "text \\<open>{\\em pos}: A list is positive if all its elements are greater than 0.\\<close>"], ["", "definition\n  pos :: \"real list \\<Rightarrow> bool\" where\n  \"pos l \\<longleftrightarrow> (if l=[] then False else \\<forall>e. e : set l \\<longrightarrow> e > 0)\""], ["", "lemma pos_empty [simp]: \"pos [] = False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pos [] = False", "unfolding pos_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if [] = [] then False\n     else \\<forall>e. e \\<in> set [] \\<longrightarrow> 0 < e) =\n    False", "by simp"], ["", "lemma pos_single [simp]: \"pos [x] = (x > 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pos [x] = (0 < x)", "unfolding pos_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if [x] = [] then False\n     else \\<forall>e. e \\<in> set [x] \\<longrightarrow> 0 < e) =\n    (0 < x)", "by simp"], ["", "lemma pos_imp_ne: \"pos xs \\<Longrightarrow> xs\\<noteq>[]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pos xs \\<Longrightarrow> xs \\<noteq> []", "unfolding pos_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. if xs = [] then False\n    else \\<forall>e.\n            e \\<in> set xs \\<longrightarrow> 0 < e \\<Longrightarrow>\n    xs \\<noteq> []", "by auto"], ["", "lemma pos_cons [simp]:\n  \"xs \\<noteq> [] \\<longrightarrow> pos (x#xs) =\n   (if (x>0) then pos xs else False)\"\n  (is \"?P x xs\" is \"?A xs \\<longrightarrow> ?S x xs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<longrightarrow>\n    pos (x # xs) = (if 0 < x then pos xs else False)", "proof (simp add: if_split, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow>\n    (0 < x \\<longrightarrow> pos (x # xs) = pos xs) \\<and>\n    (\\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs))", "assume xsne: \"xs \\<noteq> []\""], ["proof (state)\nthis:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow>\n    (0 < x \\<longrightarrow> pos (x # xs) = pos xs) \\<and>\n    (\\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs))", "hence pxs_simp:\n    \"pos xs = (\\<forall>e. e : set xs \\<longrightarrow> e > 0)\""], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. pos xs = (\\<forall>e. e \\<in> set xs \\<longrightarrow> 0 < e)", "unfolding pos_def"], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. (if xs = [] then False\n     else \\<forall>e. e \\<in> set xs \\<longrightarrow> 0 < e) =\n    (\\<forall>e. e \\<in> set xs \\<longrightarrow> 0 < e)", "by simp"], ["proof (state)\nthis:\n  pos xs = (\\<forall>e. e \\<in> set xs \\<longrightarrow> 0 < e)\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow>\n    (0 < x \\<longrightarrow> pos (x # xs) = pos xs) \\<and>\n    (\\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs))", "show\n    \"(0 < x \\<longrightarrow> pos (x # xs) = pos xs) \\<and>\n     (\\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 < x \\<longrightarrow> pos (x # xs) = pos xs) \\<and>\n    (\\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < x \\<longrightarrow> pos (x # xs) = pos xs\n 2. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < x \\<longrightarrow> pos (x # xs) = pos xs\n 2. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "assume xgt0: \"0 < x\""], ["proof (state)\nthis:\n  0 < x\n\ngoal (2 subgoals):\n 1. 0 < x \\<longrightarrow> pos (x # xs) = pos xs\n 2. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "{"], ["proof (state)\nthis:\n  0 < x\n\ngoal (2 subgoals):\n 1. 0 < x \\<longrightarrow> pos (x # xs) = pos xs\n 2. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "assume pxs: \"pos xs\""], ["proof (state)\nthis:\n  pos xs\n\ngoal (2 subgoals):\n 1. 0 < x \\<longrightarrow> pos (x # xs) = pos xs\n 2. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "with pxs_simp"], ["proof (chain)\npicking this:\n  pos xs = (\\<forall>e. e \\<in> set xs \\<longrightarrow> 0 < e)\n  pos xs", "have \"\\<forall>e. e : set xs \\<longrightarrow> e > 0\""], ["proof (prove)\nusing this:\n  pos xs = (\\<forall>e. e \\<in> set xs \\<longrightarrow> 0 < e)\n  pos xs\n\ngoal (1 subgoal):\n 1. \\<forall>e. e \\<in> set xs \\<longrightarrow> 0 < e", "by simp"], ["proof (state)\nthis:\n  \\<forall>e. e \\<in> set xs \\<longrightarrow> 0 < e\n\ngoal (2 subgoals):\n 1. 0 < x \\<longrightarrow> pos (x # xs) = pos xs\n 2. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "with xgt0"], ["proof (chain)\npicking this:\n  0 < x\n  \\<forall>e. e \\<in> set xs \\<longrightarrow> 0 < e", "have \"\\<forall>e. e : set (x#xs) \\<longrightarrow> e > 0\""], ["proof (prove)\nusing this:\n  0 < x\n  \\<forall>e. e \\<in> set xs \\<longrightarrow> 0 < e\n\ngoal (1 subgoal):\n 1. \\<forall>e. e \\<in> set (x # xs) \\<longrightarrow> 0 < e", "by simp"], ["proof (state)\nthis:\n  \\<forall>e. e \\<in> set (x # xs) \\<longrightarrow> 0 < e\n\ngoal (2 subgoals):\n 1. 0 < x \\<longrightarrow> pos (x # xs) = pos xs\n 2. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "hence \"pos (x#xs)\""], ["proof (prove)\nusing this:\n  \\<forall>e. e \\<in> set (x # xs) \\<longrightarrow> 0 < e\n\ngoal (1 subgoal):\n 1. pos (x # xs)", "unfolding pos_def"], ["proof (prove)\nusing this:\n  \\<forall>e. e \\<in> set (x # xs) \\<longrightarrow> 0 < e\n\ngoal (1 subgoal):\n 1. if x # xs = [] then False\n    else \\<forall>e. e \\<in> set (x # xs) \\<longrightarrow> 0 < e", "by simp"], ["proof (state)\nthis:\n  pos (x # xs)\n\ngoal (2 subgoals):\n 1. 0 < x \\<longrightarrow> pos (x # xs) = pos xs\n 2. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "}"], ["proof (state)\nthis:\n  pos xs \\<Longrightarrow> pos (x # xs)\n\ngoal (2 subgoals):\n 1. 0 < x \\<longrightarrow> pos (x # xs) = pos xs\n 2. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "moreover"], ["proof (state)\nthis:\n  pos xs \\<Longrightarrow> pos (x # xs)\n\ngoal (2 subgoals):\n 1. 0 < x \\<longrightarrow> pos (x # xs) = pos xs\n 2. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "{"], ["proof (state)\nthis:\n  pos xs \\<Longrightarrow> pos (x # xs)\n\ngoal (2 subgoals):\n 1. 0 < x \\<longrightarrow> pos (x # xs) = pos xs\n 2. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "assume pxxs: \"pos (x#xs)\""], ["proof (state)\nthis:\n  pos (x # xs)\n\ngoal (2 subgoals):\n 1. 0 < x \\<longrightarrow> pos (x # xs) = pos xs\n 2. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "hence \"\\<forall>e. e : set (x#xs) \\<longrightarrow> e > 0\""], ["proof (prove)\nusing this:\n  pos (x # xs)\n\ngoal (1 subgoal):\n 1. \\<forall>e. e \\<in> set (x # xs) \\<longrightarrow> 0 < e", "unfolding pos_def"], ["proof (prove)\nusing this:\n  if x # xs = [] then False\n  else \\<forall>e. e \\<in> set (x # xs) \\<longrightarrow> 0 < e\n\ngoal (1 subgoal):\n 1. \\<forall>e. e \\<in> set (x # xs) \\<longrightarrow> 0 < e", "by simp"], ["proof (state)\nthis:\n  \\<forall>e. e \\<in> set (x # xs) \\<longrightarrow> 0 < e\n\ngoal (2 subgoals):\n 1. 0 < x \\<longrightarrow> pos (x # xs) = pos xs\n 2. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "hence \"\\<forall>e. e : set xs \\<longrightarrow> e > 0\""], ["proof (prove)\nusing this:\n  \\<forall>e. e \\<in> set (x # xs) \\<longrightarrow> 0 < e\n\ngoal (1 subgoal):\n 1. \\<forall>e. e \\<in> set xs \\<longrightarrow> 0 < e", "by simp"], ["proof (state)\nthis:\n  \\<forall>e. e \\<in> set xs \\<longrightarrow> 0 < e\n\ngoal (2 subgoals):\n 1. 0 < x \\<longrightarrow> pos (x # xs) = pos xs\n 2. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "with xsne"], ["proof (chain)\npicking this:\n  xs \\<noteq> []\n  \\<forall>e. e \\<in> set xs \\<longrightarrow> 0 < e", "have \"pos xs\""], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n  \\<forall>e. e \\<in> set xs \\<longrightarrow> 0 < e\n\ngoal (1 subgoal):\n 1. pos xs", "unfolding pos_def"], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n  \\<forall>e. e \\<in> set xs \\<longrightarrow> 0 < e\n\ngoal (1 subgoal):\n 1. if xs = [] then False\n    else \\<forall>e. e \\<in> set xs \\<longrightarrow> 0 < e", "by simp"], ["proof (state)\nthis:\n  pos xs\n\ngoal (2 subgoals):\n 1. 0 < x \\<longrightarrow> pos (x # xs) = pos xs\n 2. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "}"], ["proof (state)\nthis:\n  pos (x # xs) \\<Longrightarrow> pos xs\n\ngoal (2 subgoals):\n 1. 0 < x \\<longrightarrow> pos (x # xs) = pos xs\n 2. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "ultimately"], ["proof (chain)\npicking this:\n  pos xs \\<Longrightarrow> pos (x # xs)\n  pos (x # xs) \\<Longrightarrow> pos xs", "have \"pos (x # xs) = pos xs\""], ["proof (prove)\nusing this:\n  pos xs \\<Longrightarrow> pos (x # xs)\n  pos (x # xs) \\<Longrightarrow> pos xs\n\ngoal (1 subgoal):\n 1. pos (x # xs) = pos xs", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>pos xs \\<Longrightarrow> pos (x # xs);\n     pos (x # xs) \\<Longrightarrow> pos xs\\<rbrakk>\n    \\<Longrightarrow> pos (x # xs) = pos xs", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>pos xs \\<Longrightarrow> pos (x # xs);\n     pos (x # xs) \\<Longrightarrow> pos xs; pos (x # xs)\\<rbrakk>\n    \\<Longrightarrow> pos xs\n 2. \\<lbrakk>pos xs \\<Longrightarrow> pos (x # xs);\n     pos (x # xs) \\<Longrightarrow> pos xs; pos xs\\<rbrakk>\n    \\<Longrightarrow> pos (x # xs)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  pos (x # xs) = pos xs\n\ngoal (2 subgoals):\n 1. 0 < x \\<longrightarrow> pos (x # xs) = pos xs\n 2. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "}"], ["proof (state)\nthis:\n  0 < x \\<Longrightarrow> pos (x # xs) = pos xs\n\ngoal (2 subgoals):\n 1. 0 < x \\<longrightarrow> pos (x # xs) = pos xs\n 2. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "thus \"0 < x \\<longrightarrow> pos (x # xs) = pos xs\""], ["proof (prove)\nusing this:\n  0 < x \\<Longrightarrow> pos (x # xs) = pos xs\n\ngoal (1 subgoal):\n 1. 0 < x \\<longrightarrow> pos (x # xs) = pos xs", "by simp"], ["proof (state)\nthis:\n  0 < x \\<longrightarrow> pos (x # xs) = pos xs\n\ngoal (1 subgoal):\n 1. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "assume xngt0: \"\\<not> (0<x)\""], ["proof (state)\nthis:\n  \\<not> 0 < x\n\ngoal (1 subgoal):\n 1. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "{"], ["proof (state)\nthis:\n  \\<not> 0 < x\n\ngoal (1 subgoal):\n 1. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "assume pxs: \"pos xs\""], ["proof (state)\nthis:\n  pos xs\n\ngoal (1 subgoal):\n 1. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "with pxs_simp"], ["proof (chain)\npicking this:\n  pos xs = (\\<forall>e. e \\<in> set xs \\<longrightarrow> 0 < e)\n  pos xs", "have \"\\<forall>e. e : set xs \\<longrightarrow> e > 0\""], ["proof (prove)\nusing this:\n  pos xs = (\\<forall>e. e \\<in> set xs \\<longrightarrow> 0 < e)\n  pos xs\n\ngoal (1 subgoal):\n 1. \\<forall>e. e \\<in> set xs \\<longrightarrow> 0 < e", "by simp"], ["proof (state)\nthis:\n  \\<forall>e. e \\<in> set xs \\<longrightarrow> 0 < e\n\ngoal (1 subgoal):\n 1. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "with xngt0"], ["proof (chain)\npicking this:\n  \\<not> 0 < x\n  \\<forall>e. e \\<in> set xs \\<longrightarrow> 0 < e", "have \"\\<not> (\\<forall>e. e : set (x#xs) \\<longrightarrow> e > 0)\""], ["proof (prove)\nusing this:\n  \\<not> 0 < x\n  \\<forall>e. e \\<in> set xs \\<longrightarrow> 0 < e\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>e. e \\<in> set (x # xs) \\<longrightarrow> 0 < e)", "by auto"], ["proof (state)\nthis:\n  \\<not> (\\<forall>e. e \\<in> set (x # xs) \\<longrightarrow> 0 < e)\n\ngoal (1 subgoal):\n 1. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "hence \"\\<not> (pos (x#xs))\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>e. e \\<in> set (x # xs) \\<longrightarrow> 0 < e)\n\ngoal (1 subgoal):\n 1. \\<not> pos (x # xs)", "unfolding pos_def"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>e. e \\<in> set (x # xs) \\<longrightarrow> 0 < e)\n\ngoal (1 subgoal):\n 1. \\<not> (if x # xs = [] then False\n            else \\<forall>e. e \\<in> set (x # xs) \\<longrightarrow> 0 < e)", "by simp"], ["proof (state)\nthis:\n  \\<not> pos (x # xs)\n\ngoal (1 subgoal):\n 1. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "}"], ["proof (state)\nthis:\n  pos xs \\<Longrightarrow> \\<not> pos (x # xs)\n\ngoal (1 subgoal):\n 1. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "moreover"], ["proof (state)\nthis:\n  pos xs \\<Longrightarrow> \\<not> pos (x # xs)\n\ngoal (1 subgoal):\n 1. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "{"], ["proof (state)\nthis:\n  pos xs \\<Longrightarrow> \\<not> pos (x # xs)\n\ngoal (1 subgoal):\n 1. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "assume pxxs: \"\\<not>pos xs\""], ["proof (state)\nthis:\n  \\<not> pos xs\n\ngoal (1 subgoal):\n 1. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "with xsne"], ["proof (chain)\npicking this:\n  xs \\<noteq> []\n  \\<not> pos xs", "have \"\\<not> (\\<forall>e. e : set xs \\<longrightarrow> e > 0)\""], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n  \\<not> pos xs\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>e. e \\<in> set xs \\<longrightarrow> 0 < e)", "unfolding pos_def"], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n  \\<not> (if xs = [] then False\n          else \\<forall>e. e \\<in> set xs \\<longrightarrow> 0 < e)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>e. e \\<in> set xs \\<longrightarrow> 0 < e)", "by simp"], ["proof (state)\nthis:\n  \\<not> (\\<forall>e. e \\<in> set xs \\<longrightarrow> 0 < e)\n\ngoal (1 subgoal):\n 1. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "hence \"\\<not> (\\<forall>e. e : set (x#xs) \\<longrightarrow> e > 0)\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>e. e \\<in> set xs \\<longrightarrow> 0 < e)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>e. e \\<in> set (x # xs) \\<longrightarrow> 0 < e)", "by auto"], ["proof (state)\nthis:\n  \\<not> (\\<forall>e. e \\<in> set (x # xs) \\<longrightarrow> 0 < e)\n\ngoal (1 subgoal):\n 1. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "hence \"\\<not> (pos (x#xs))\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>e. e \\<in> set (x # xs) \\<longrightarrow> 0 < e)\n\ngoal (1 subgoal):\n 1. \\<not> pos (x # xs)", "unfolding pos_def"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>e. e \\<in> set (x # xs) \\<longrightarrow> 0 < e)\n\ngoal (1 subgoal):\n 1. \\<not> (if x # xs = [] then False\n            else \\<forall>e. e \\<in> set (x # xs) \\<longrightarrow> 0 < e)", "by simp"], ["proof (state)\nthis:\n  \\<not> pos (x # xs)\n\ngoal (1 subgoal):\n 1. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "}"], ["proof (state)\nthis:\n  \\<not> pos xs \\<Longrightarrow> \\<not> pos (x # xs)\n\ngoal (1 subgoal):\n 1. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "ultimately"], ["proof (chain)\npicking this:\n  pos xs \\<Longrightarrow> \\<not> pos (x # xs)\n  \\<not> pos xs \\<Longrightarrow> \\<not> pos (x # xs)", "have \"\\<not> pos (x#xs)\""], ["proof (prove)\nusing this:\n  pos xs \\<Longrightarrow> \\<not> pos (x # xs)\n  \\<not> pos xs \\<Longrightarrow> \\<not> pos (x # xs)\n\ngoal (1 subgoal):\n 1. \\<not> pos (x # xs)", "by auto"], ["proof (state)\nthis:\n  \\<not> pos (x # xs)\n\ngoal (1 subgoal):\n 1. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "}"], ["proof (state)\nthis:\n  \\<not> 0 < x \\<Longrightarrow> \\<not> pos (x # xs)\n\ngoal (1 subgoal):\n 1. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "thus \"\\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)\""], ["proof (prove)\nusing this:\n  \\<not> 0 < x \\<Longrightarrow> \\<not> pos (x # xs)\n\ngoal (1 subgoal):\n 1. \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)", "by simp"], ["proof (state)\nthis:\n  \\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (0 < x \\<longrightarrow> pos (x # xs) = pos xs) \\<and>\n  (\\<not> 0 < x \\<longrightarrow> \\<not> pos (x # xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Properties\\<close>"], ["", "text \\<open>Here we prove some non-trivial properties of the abstract properties.\\<close>"], ["", "text \\<open>Two lemmas regarding {\\em pos}. The first states the removing\nan element from a positive collection (of more than 1 element) results\nin a positive collection. The second asserts that the mean of a\npositive collection is positive.\\<close>"], ["", "lemma pos_imp_rmv_pos:\n  assumes \"(remove1 a xs)\\<noteq>[]\" \"pos xs\" shows \"pos (remove1 a xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pos (remove1 a xs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pos (remove1 a xs)", "from assms"], ["proof (chain)\npicking this:\n  remove1 a xs \\<noteq> []\n  pos xs", "have pl: \"pos xs\" and rmvne: \"(remove1 a xs)\\<noteq>[]\""], ["proof (prove)\nusing this:\n  remove1 a xs \\<noteq> []\n  pos xs\n\ngoal (1 subgoal):\n 1. pos xs &&& remove1 a xs \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  pos xs\n  remove1 a xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. pos (remove1 a xs)", "from pl"], ["proof (chain)\npicking this:\n  pos xs", "have \"xs \\<noteq> []\""], ["proof (prove)\nusing this:\n  pos xs\n\ngoal (1 subgoal):\n 1. xs \\<noteq> []", "by (rule pos_imp_ne)"], ["proof (state)\nthis:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. pos (remove1 a xs)", "with pl pos_def"], ["proof (chain)\npicking this:\n  pos xs\n  pos ?l =\n  (if ?l = [] then False\n   else \\<forall>e. e \\<in> set ?l \\<longrightarrow> 0 < e)\n  xs \\<noteq> []", "have \"\\<forall>x. x : set xs \\<longrightarrow> x > 0\""], ["proof (prove)\nusing this:\n  pos xs\n  pos ?l =\n  (if ?l = [] then False\n   else \\<forall>e. e \\<in> set ?l \\<longrightarrow> 0 < e)\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<forall>x. x \\<in> set xs \\<longrightarrow> 0 < x", "by simp"], ["proof (state)\nthis:\n  \\<forall>x. x \\<in> set xs \\<longrightarrow> 0 < x\n\ngoal (1 subgoal):\n 1. pos (remove1 a xs)", "hence \"\\<forall>x. x : set (remove1 a xs) \\<longrightarrow> x > 0\""], ["proof (prove)\nusing this:\n  \\<forall>x. x \\<in> set xs \\<longrightarrow> 0 < x\n\ngoal (1 subgoal):\n 1. \\<forall>x. x \\<in> set (remove1 a xs) \\<longrightarrow> 0 < x", "using set_remove1_subset[of _ xs]"], ["proof (prove)\nusing this:\n  \\<forall>x. x \\<in> set xs \\<longrightarrow> 0 < x\n  set (remove1 ?x xs) \\<subseteq> set xs\n\ngoal (1 subgoal):\n 1. \\<forall>x. x \\<in> set (remove1 a xs) \\<longrightarrow> 0 < x", "by(blast)"], ["proof (state)\nthis:\n  \\<forall>x. x \\<in> set (remove1 a xs) \\<longrightarrow> 0 < x\n\ngoal (1 subgoal):\n 1. pos (remove1 a xs)", "with rmvne"], ["proof (chain)\npicking this:\n  remove1 a xs \\<noteq> []\n  \\<forall>x. x \\<in> set (remove1 a xs) \\<longrightarrow> 0 < x", "show \"pos (remove1 a xs)\""], ["proof (prove)\nusing this:\n  remove1 a xs \\<noteq> []\n  \\<forall>x. x \\<in> set (remove1 a xs) \\<longrightarrow> 0 < x\n\ngoal (1 subgoal):\n 1. pos (remove1 a xs)", "unfolding pos_def"], ["proof (prove)\nusing this:\n  remove1 a xs \\<noteq> []\n  \\<forall>x. x \\<in> set (remove1 a xs) \\<longrightarrow> 0 < x\n\ngoal (1 subgoal):\n 1. if remove1 a xs = [] then False\n    else \\<forall>e. e \\<in> set (remove1 a xs) \\<longrightarrow> 0 < e", "by simp"], ["proof (state)\nthis:\n  pos (remove1 a xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pos_mean: \"pos xs \\<Longrightarrow> mean xs > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pos xs \\<Longrightarrow> 0 < mean xs", "proof (induct xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. pos [] \\<Longrightarrow> 0 < mean []\n 2. \\<And>a xs.\n       \\<lbrakk>pos xs \\<Longrightarrow> 0 < mean xs; pos (a # xs)\\<rbrakk>\n       \\<Longrightarrow> 0 < mean (a # xs)", "case Nil"], ["proof (state)\nthis:\n  pos []\n\ngoal (2 subgoals):\n 1. pos [] \\<Longrightarrow> 0 < mean []\n 2. \\<And>a xs.\n       \\<lbrakk>pos xs \\<Longrightarrow> 0 < mean xs; pos (a # xs)\\<rbrakk>\n       \\<Longrightarrow> 0 < mean (a # xs)", "thus ?case"], ["proof (prove)\nusing this:\n  pos []\n\ngoal (1 subgoal):\n 1. 0 < mean []", "by(simp add: pos_def)"], ["proof (state)\nthis:\n  0 < mean []\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>pos xs \\<Longrightarrow> 0 < mean xs; pos (a # xs)\\<rbrakk>\n       \\<Longrightarrow> 0 < mean (a # xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>pos xs \\<Longrightarrow> 0 < mean xs; pos (a # xs)\\<rbrakk>\n       \\<Longrightarrow> 0 < mean (a # xs)", "case (Cons x xs)"], ["proof (state)\nthis:\n  pos xs \\<Longrightarrow> 0 < mean xs\n  pos (x # xs)\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>pos xs \\<Longrightarrow> 0 < mean xs; pos (a # xs)\\<rbrakk>\n       \\<Longrightarrow> 0 < mean (a # xs)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < mean (x # xs)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> 0 < mean (x # xs)\n 2. \\<not> ?P \\<Longrightarrow> 0 < mean (x # xs)", "assume xse: \"xs = []\""], ["proof (state)\nthis:\n  xs = []\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> 0 < mean (x # xs)\n 2. \\<not> ?P \\<Longrightarrow> 0 < mean (x # xs)", "hence \"pos (x#xs) = (x > 0)\""], ["proof (prove)\nusing this:\n  xs = []\n\ngoal (1 subgoal):\n 1. pos (x # xs) = (0 < x)", "by simp"], ["proof (state)\nthis:\n  pos (x # xs) = (0 < x)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> 0 < mean (x # xs)\n 2. \\<not> ?P \\<Longrightarrow> 0 < mean (x # xs)", "with Cons(2)"], ["proof (chain)\npicking this:\n  pos (x # xs)\n  pos (x # xs) = (0 < x)", "have \"x>0\""], ["proof (prove)\nusing this:\n  pos (x # xs)\n  pos (x # xs) = (0 < x)\n\ngoal (1 subgoal):\n 1. 0 < x", "by(simp)"], ["proof (state)\nthis:\n  0 < x\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> 0 < mean (x # xs)\n 2. \\<not> ?P \\<Longrightarrow> 0 < mean (x # xs)", "with xse"], ["proof (chain)\npicking this:\n  xs = []\n  0 < x", "have \"0 < mean (x#xs)\""], ["proof (prove)\nusing this:\n  xs = []\n  0 < x\n\ngoal (1 subgoal):\n 1. 0 < mean (x # xs)", "by(auto simp:mean_def)"], ["proof (state)\nthis:\n  0 < mean (x # xs)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> 0 < mean (x # xs)\n 2. \\<not> ?P \\<Longrightarrow> 0 < mean (x # xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  0 < mean (x # xs)\n\ngoal (1 subgoal):\n 1. 0 < mean (x # xs)", "by simp"], ["proof (state)\nthis:\n  0 < mean (x # xs)\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> 0 < mean (x # xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> 0 < mean (x # xs)", "assume xsne: \"xs \\<noteq> []\""], ["proof (state)\nthis:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> 0 < mean (x # xs)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < mean (x # xs)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> 0 < mean (x # xs)\n 2. \\<not> ?P \\<Longrightarrow> 0 < mean (x # xs)", "assume pxs: \"pos xs\""], ["proof (state)\nthis:\n  pos xs\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> 0 < mean (x # xs)\n 2. \\<not> ?P \\<Longrightarrow> 0 < mean (x # xs)", "with Cons(1)"], ["proof (chain)\npicking this:\n  pos xs \\<Longrightarrow> 0 < mean xs\n  pos xs", "have z_le_mxs: \"0 < mean xs\""], ["proof (prove)\nusing this:\n  pos xs \\<Longrightarrow> 0 < mean xs\n  pos xs\n\ngoal (1 subgoal):\n 1. 0 < mean xs", "by(simp)"], ["proof (state)\nthis:\n  0 < mean xs\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> 0 < mean (x # xs)\n 2. \\<not> ?P \\<Longrightarrow> 0 < mean (x # xs)", "{"], ["proof (state)\nthis:\n  0 < mean xs\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> 0 < mean (x # xs)\n 2. \\<not> ?P \\<Longrightarrow> 0 < mean (x # xs)", "assume ass: \"x > 0\""], ["proof (state)\nthis:\n  0 < x\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> 0 < mean (x # xs)\n 2. \\<not> ?P \\<Longrightarrow> 0 < mean (x # xs)", "with ass z_le_mxs xsne"], ["proof (chain)\npicking this:\n  0 < x\n  0 < mean xs\n  xs \\<noteq> []\n  0 < x", "have \"0 < mean (x#xs)\""], ["proof (prove)\nusing this:\n  0 < x\n  0 < mean xs\n  xs \\<noteq> []\n  0 < x\n\ngoal (1 subgoal):\n 1. 0 < mean (x # xs)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < x; 0 < mean xs; xs \\<noteq> []; 0 < x\\<rbrakk>\n    \\<Longrightarrow> 0 < mean (x # xs)", "apply (rule mean_gt_0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < x; 0 < mean xs; xs \\<noteq> []; 0 < x\\<rbrakk>\n    \\<Longrightarrow> xs \\<noteq> [] \\<and> 0 < x \\<and> 0 < mean xs", "by simp"], ["proof (state)\nthis:\n  0 < mean (x # xs)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> 0 < mean (x # xs)\n 2. \\<not> ?P \\<Longrightarrow> 0 < mean (x # xs)", "}"], ["proof (state)\nthis:\n  0 < x \\<Longrightarrow> 0 < mean (x # xs)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> 0 < mean (x # xs)\n 2. \\<not> ?P \\<Longrightarrow> 0 < mean (x # xs)", "moreover"], ["proof (state)\nthis:\n  0 < x \\<Longrightarrow> 0 < mean (x # xs)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> 0 < mean (x # xs)\n 2. \\<not> ?P \\<Longrightarrow> 0 < mean (x # xs)", "{"], ["proof (state)\nthis:\n  0 < x \\<Longrightarrow> 0 < mean (x # xs)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> 0 < mean (x # xs)\n 2. \\<not> ?P \\<Longrightarrow> 0 < mean (x # xs)", "from xsne pxs"], ["proof (chain)\npicking this:\n  xs \\<noteq> []\n  pos xs", "have \"0 < x\""], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n  pos xs\n\ngoal (1 subgoal):\n 1. 0 < x", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>xs \\<noteq> []; pos xs; ?P2\\<rbrakk> \\<Longrightarrow> 0 < x\n 2. \\<lbrakk>xs \\<noteq> []; pos xs; \\<not> ?P2\\<rbrakk>\n    \\<Longrightarrow> 0 < x", "assume \"0 < x\""], ["proof (state)\nthis:\n  0 < x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>xs \\<noteq> []; pos xs; ?P2\\<rbrakk> \\<Longrightarrow> 0 < x\n 2. \\<lbrakk>xs \\<noteq> []; pos xs; \\<not> ?P2\\<rbrakk>\n    \\<Longrightarrow> 0 < x", "thus ?thesis"], ["proof (prove)\nusing this:\n  0 < x\n\ngoal (1 subgoal):\n 1. 0 < x", "by simp"], ["proof (state)\nthis:\n  0 < x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<noteq> []; pos xs; \\<not> 0 < x\\<rbrakk>\n    \\<Longrightarrow> 0 < x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<noteq> []; pos xs; \\<not> 0 < x\\<rbrakk>\n    \\<Longrightarrow> 0 < x", "assume \"\\<not>(0 < x)\""], ["proof (state)\nthis:\n  \\<not> 0 < x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<noteq> []; pos xs; \\<not> 0 < x\\<rbrakk>\n    \\<Longrightarrow> 0 < x", "with xsne pos_cons"], ["proof (chain)\npicking this:\n  xs \\<noteq> []\n  ?xs \\<noteq> [] \\<longrightarrow>\n  pos (?x # ?xs) = (if 0 < ?x then pos ?xs else False)\n  \\<not> 0 < x", "have \"pos (x#xs) = False\""], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n  ?xs \\<noteq> [] \\<longrightarrow>\n  pos (?x # ?xs) = (if 0 < ?x then pos ?xs else False)\n  \\<not> 0 < x\n\ngoal (1 subgoal):\n 1. pos (x # xs) = False", "by simp"], ["proof (state)\nthis:\n  pos (x # xs) = False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<noteq> []; pos xs; \\<not> 0 < x\\<rbrakk>\n    \\<Longrightarrow> 0 < x", "with Cons(2)"], ["proof (chain)\npicking this:\n  pos (x # xs)\n  pos (x # xs) = False", "show ?thesis"], ["proof (prove)\nusing this:\n  pos (x # xs)\n  pos (x # xs) = False\n\ngoal (1 subgoal):\n 1. 0 < x", "by simp"], ["proof (state)\nthis:\n  0 < x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < x\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> 0 < mean (x # xs)\n 2. \\<not> ?P \\<Longrightarrow> 0 < mean (x # xs)", "}"], ["proof (state)\nthis:\n  0 < x\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> 0 < mean (x # xs)\n 2. \\<not> ?P \\<Longrightarrow> 0 < mean (x # xs)", "ultimately"], ["proof (chain)\npicking this:\n  0 < x \\<Longrightarrow> 0 < mean (x # xs)\n  0 < x", "have \"0 < mean (x#xs)\""], ["proof (prove)\nusing this:\n  0 < x \\<Longrightarrow> 0 < mean (x # xs)\n  0 < x\n\ngoal (1 subgoal):\n 1. 0 < mean (x # xs)", "by simp"], ["proof (state)\nthis:\n  0 < mean (x # xs)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> 0 < mean (x # xs)\n 2. \\<not> ?P \\<Longrightarrow> 0 < mean (x # xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  0 < mean (x # xs)\n\ngoal (1 subgoal):\n 1. 0 < mean (x # xs)", "by simp"], ["proof (state)\nthis:\n  0 < mean (x # xs)\n\ngoal (1 subgoal):\n 1. \\<not> pos xs \\<Longrightarrow> 0 < mean (x # xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> pos xs \\<Longrightarrow> 0 < mean (x # xs)", "assume npxs: \"\\<not>pos xs\""], ["proof (state)\nthis:\n  \\<not> pos xs\n\ngoal (1 subgoal):\n 1. \\<not> pos xs \\<Longrightarrow> 0 < mean (x # xs)", "with xsne pos_cons"], ["proof (chain)\npicking this:\n  xs \\<noteq> []\n  ?xs \\<noteq> [] \\<longrightarrow>\n  pos (?x # ?xs) = (if 0 < ?x then pos ?xs else False)\n  \\<not> pos xs", "have \"pos (x#xs) = False\""], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n  ?xs \\<noteq> [] \\<longrightarrow>\n  pos (?x # ?xs) = (if 0 < ?x then pos ?xs else False)\n  \\<not> pos xs\n\ngoal (1 subgoal):\n 1. pos (x # xs) = False", "by simp"], ["proof (state)\nthis:\n  pos (x # xs) = False\n\ngoal (1 subgoal):\n 1. \\<not> pos xs \\<Longrightarrow> 0 < mean (x # xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  pos (x # xs) = False\n\ngoal (1 subgoal):\n 1. 0 < mean (x # xs)", "using Cons(2)"], ["proof (prove)\nusing this:\n  pos (x # xs) = False\n  pos (x # xs)\n\ngoal (1 subgoal):\n 1. 0 < mean (x # xs)", "by simp"], ["proof (state)\nthis:\n  0 < mean (x # xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < mean (x # xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < mean (x # xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>We now show that homogeneity of a non-empty collection $x$\nimplies that its product is equal to \\<open>(mean x)^(length x)\\<close>.\\<close>"], ["", "lemma prod_list_het0:\n  shows \"x\\<noteq>[] \\<and> het x = 0 \\<Longrightarrow> \\<Prod>:x = (mean x) ^ (length x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> [] \\<and> het x = 0 \\<Longrightarrow>\n    prod_list x = mean x ^ length x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> [] \\<and> het x = 0 \\<Longrightarrow>\n    prod_list x = mean x ^ length x", "assume \"x\\<noteq>[] \\<and> het x = 0\""], ["proof (state)\nthis:\n  x \\<noteq> [] \\<and> het x = 0\n\ngoal (1 subgoal):\n 1. x \\<noteq> [] \\<and> het x = 0 \\<Longrightarrow>\n    prod_list x = mean x ^ length x", "hence xne: \"x\\<noteq>[]\" and hetx: \"het x = 0\""], ["proof (prove)\nusing this:\n  x \\<noteq> [] \\<and> het x = 0\n\ngoal (1 subgoal):\n 1. x \\<noteq> [] &&& het x = 0", "by auto"], ["proof (state)\nthis:\n  x \\<noteq> []\n  het x = 0\n\ngoal (1 subgoal):\n 1. x \\<noteq> [] \\<and> het x = 0 \\<Longrightarrow>\n    prod_list x = mean x ^ length x", "from hetx"], ["proof (chain)\npicking this:\n  het x = 0", "have lz: \"length (list_neq x (mean x)) = 0\""], ["proof (prove)\nusing this:\n  het x = 0\n\ngoal (1 subgoal):\n 1. length (list_neq x (mean x)) = 0", "unfolding het_def"], ["proof (prove)\nusing this:\n  length (list_neq x (mean x)) = 0\n\ngoal (1 subgoal):\n 1. length (list_neq x (mean x)) = 0", "."], ["proof (state)\nthis:\n  length (list_neq x (mean x)) = 0\n\ngoal (1 subgoal):\n 1. x \\<noteq> [] \\<and> het x = 0 \\<Longrightarrow>\n    prod_list x = mean x ^ length x", "hence \"\\<Prod>:(list_neq x (mean x)) = 1\""], ["proof (prove)\nusing this:\n  length (list_neq x (mean x)) = 0\n\ngoal (1 subgoal):\n 1. prod_list (list_neq x (mean x)) = 1", "by simp"], ["proof (state)\nthis:\n  prod_list (list_neq x (mean x)) = 1\n\ngoal (1 subgoal):\n 1. x \\<noteq> [] \\<and> het x = 0 \\<Longrightarrow>\n    prod_list x = mean x ^ length x", "with prod_list_split"], ["proof (chain)\npicking this:\n  prod_list ?xs = prod_list (list_neq ?xs ?m) * prod_list (list_eq ?xs ?m)\n  prod_list (list_neq x (mean x)) = 1", "have \"\\<Prod>:x = \\<Prod>:(list_eq x (mean x))\""], ["proof (prove)\nusing this:\n  prod_list ?xs = prod_list (list_neq ?xs ?m) * prod_list (list_eq ?xs ?m)\n  prod_list (list_neq x (mean x)) = 1\n\ngoal (1 subgoal):\n 1. prod_list x = prod_list (list_eq x (mean x))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs m.\n                prod_list xs =\n                prod_list (list_neq xs m) * prod_list (list_eq xs m);\n     prod_list (list_neq x (mean x)) = 1\\<rbrakk>\n    \\<Longrightarrow> prod_list x = prod_list (list_eq x (mean x))", "apply (drule meta_spec [of _ x])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prod_list (list_neq x (mean x)) = 1;\n     \\<And>m.\n        prod_list x =\n        prod_list (list_neq x m) * prod_list (list_eq x m)\\<rbrakk>\n    \\<Longrightarrow> prod_list x = prod_list (list_eq x (mean x))", "apply (drule meta_spec [of _ \"mean x\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prod_list (list_neq x (mean x)) = 1;\n     prod_list x =\n     prod_list (list_neq x (mean x)) *\n     prod_list (list_eq x (mean x))\\<rbrakk>\n    \\<Longrightarrow> prod_list x = prod_list (list_eq x (mean x))", "by simp"], ["proof (state)\nthis:\n  prod_list x = prod_list (list_eq x (mean x))\n\ngoal (1 subgoal):\n 1. x \\<noteq> [] \\<and> het x = 0 \\<Longrightarrow>\n    prod_list x = mean x ^ length x", "also"], ["proof (state)\nthis:\n  prod_list x = prod_list (list_eq x (mean x))\n\ngoal (1 subgoal):\n 1. x \\<noteq> [] \\<and> het x = 0 \\<Longrightarrow>\n    prod_list x = mean x ^ length x", "with list_eq_prod"], ["proof (chain)\npicking this:\n  prod_list (list_eq ?xs ?m) = ?m ^ length (list_eq ?xs ?m)\n  prod_list x = prod_list (list_eq x (mean x))", "have\n    \"\\<dots> = (mean x) ^ (length (list_eq x (mean x)))\""], ["proof (prove)\nusing this:\n  prod_list (list_eq ?xs ?m) = ?m ^ length (list_eq ?xs ?m)\n  prod_list x = prod_list (list_eq x (mean x))\n\ngoal (1 subgoal):\n 1. prod_list (list_eq x (mean x)) = mean x ^ length (list_eq x (mean x))", "by simp"], ["proof (state)\nthis:\n  prod_list (list_eq x (mean x)) = mean x ^ length (list_eq x (mean x))\n\ngoal (1 subgoal):\n 1. x \\<noteq> [] \\<and> het x = 0 \\<Longrightarrow>\n    prod_list x = mean x ^ length x", "also"], ["proof (state)\nthis:\n  prod_list (list_eq x (mean x)) = mean x ^ length (list_eq x (mean x))\n\ngoal (1 subgoal):\n 1. x \\<noteq> [] \\<and> het x = 0 \\<Longrightarrow>\n    prod_list x = mean x ^ length x", "with calculation lz sum_list_length_split"], ["proof (chain)\npicking this:\n  prod_list x = mean x ^ length (list_eq x (mean x))\n  length (list_neq x (mean x)) = 0\n  length ?xs = length (list_neq ?xs ?m) + length (list_eq ?xs ?m)\n  prod_list (list_eq x (mean x)) = mean x ^ length (list_eq x (mean x))", "have\n    \"\\<Prod>:x = (mean x) ^ (length x)\""], ["proof (prove)\nusing this:\n  prod_list x = mean x ^ length (list_eq x (mean x))\n  length (list_neq x (mean x)) = 0\n  length ?xs = length (list_neq ?xs ?m) + length (list_eq ?xs ?m)\n  prod_list (list_eq x (mean x)) = mean x ^ length (list_eq x (mean x))\n\ngoal (1 subgoal):\n 1. prod_list x = mean x ^ length x", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prod_list x = mean x ^ length (list_eq x (mean x));\n     length (list_neq x (mean x)) = 0;\n     \\<And>xs m. length xs = length (list_neq xs m) + length (list_eq xs m);\n     prod_list (list_eq x (mean x)) =\n     mean x ^ length (list_eq x (mean x))\\<rbrakk>\n    \\<Longrightarrow> prod_list x = mean x ^ length x", "apply (drule meta_spec [of _ x])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prod_list x = mean x ^ length (list_eq x (mean x));\n     length (list_neq x (mean x)) = 0;\n     prod_list (list_eq x (mean x)) = mean x ^ length (list_eq x (mean x));\n     \\<And>m.\n        length x = length (list_neq x m) + length (list_eq x m)\\<rbrakk>\n    \\<Longrightarrow> prod_list x = mean x ^ length x", "apply (drule meta_spec [of _ \"mean x\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prod_list x = mean x ^ length (list_eq x (mean x));\n     length (list_neq x (mean x)) = 0;\n     prod_list (list_eq x (mean x)) = mean x ^ length (list_eq x (mean x));\n     length x =\n     length (list_neq x (mean x)) + length (list_eq x (mean x))\\<rbrakk>\n    \\<Longrightarrow> prod_list x = mean x ^ length x", "by simp"], ["proof (state)\nthis:\n  prod_list x = mean x ^ length x\n\ngoal (1 subgoal):\n 1. x \\<noteq> [] \\<and> het x = 0 \\<Longrightarrow>\n    prod_list x = mean x ^ length x", "thus ?thesis"], ["proof (prove)\nusing this:\n  prod_list x = mean x ^ length x\n\ngoal (1 subgoal):\n 1. prod_list x = mean x ^ length x", "by simp"], ["proof (state)\nthis:\n  prod_list x = mean x ^ length x\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Furthermore we present an important result - that a\nhomogeneous collection has equal geometric and arithmetic means.\\<close>"], ["", "lemma het_base:\n  shows \"pos x \\<and> het x = 0 \\<Longrightarrow> gmean x = mean x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pos x \\<and> het x = 0 \\<Longrightarrow> gmean x = mean x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pos x \\<and> het x = 0 \\<Longrightarrow> gmean x = mean x", "assume ass: \"pos x \\<and> het x = 0\""], ["proof (state)\nthis:\n  pos x \\<and> het x = 0\n\ngoal (1 subgoal):\n 1. pos x \\<and> het x = 0 \\<Longrightarrow> gmean x = mean x", "hence\n    xne: \"x\\<noteq>[]\" and\n    hetx: \"het x = 0\" and\n    posx: \"pos x\""], ["proof (prove)\nusing this:\n  pos x \\<and> het x = 0\n\ngoal (1 subgoal):\n 1. x \\<noteq> [] &&& het x = 0 &&& pos x", "by auto"], ["proof (state)\nthis:\n  x \\<noteq> []\n  het x = 0\n  pos x\n\ngoal (1 subgoal):\n 1. pos x \\<and> het x = 0 \\<Longrightarrow> gmean x = mean x", "from posx pos_mean"], ["proof (chain)\npicking this:\n  pos x\n  pos ?xs \\<Longrightarrow> 0 < mean ?xs", "have mxgt0: \"mean x > 0\""], ["proof (prove)\nusing this:\n  pos x\n  pos ?xs \\<Longrightarrow> 0 < mean ?xs\n\ngoal (1 subgoal):\n 1. 0 < mean x", "by simp"], ["proof (state)\nthis:\n  0 < mean x\n\ngoal (1 subgoal):\n 1. pos x \\<and> het x = 0 \\<Longrightarrow> gmean x = mean x", "from xne"], ["proof (chain)\npicking this:\n  x \\<noteq> []", "have lxgt0: \"length x > 0\""], ["proof (prove)\nusing this:\n  x \\<noteq> []\n\ngoal (1 subgoal):\n 1. 0 < length x", "by simp"], ["proof (state)\nthis:\n  0 < length x\n\ngoal (1 subgoal):\n 1. pos x \\<and> het x = 0 \\<Longrightarrow> gmean x = mean x", "with ass prod_list_het0"], ["proof (chain)\npicking this:\n  pos x \\<and> het x = 0\n  ?x \\<noteq> [] \\<and> het ?x = 0 \\<Longrightarrow>\n  prod_list ?x = mean ?x ^ length ?x\n  0 < length x", "have\n    \"root (length x) (\\<Prod>:x) = root (length x) ((mean x)^(length x))\""], ["proof (prove)\nusing this:\n  pos x \\<and> het x = 0\n  ?x \\<noteq> [] \\<and> het ?x = 0 \\<Longrightarrow>\n  prod_list ?x = mean ?x ^ length ?x\n  0 < length x\n\ngoal (1 subgoal):\n 1. root (length x) (prod_list x) = root (length x) (mean x ^ length x)", "by simp"], ["proof (state)\nthis:\n  root (length x) (prod_list x) = root (length x) (mean x ^ length x)\n\ngoal (1 subgoal):\n 1. pos x \\<and> het x = 0 \\<Longrightarrow> gmean x = mean x", "also"], ["proof (state)\nthis:\n  root (length x) (prod_list x) = root (length x) (mean x ^ length x)\n\ngoal (1 subgoal):\n 1. pos x \\<and> het x = 0 \\<Longrightarrow> gmean x = mean x", "from lxgt0 mxgt0 real_root_power_cancel"], ["proof (chain)\npicking this:\n  0 < length x\n  0 < mean x\n  \\<lbrakk>0 < ?n; 0 \\<le> ?x\\<rbrakk>\n  \\<Longrightarrow> root ?n (?x ^ ?n) = ?x", "have \"\\<dots> = mean x\""], ["proof (prove)\nusing this:\n  0 < length x\n  0 < mean x\n  \\<lbrakk>0 < ?n; 0 \\<le> ?x\\<rbrakk>\n  \\<Longrightarrow> root ?n (?x ^ ?n) = ?x\n\ngoal (1 subgoal):\n 1. root (length x) (mean x ^ length x) = mean x", "by auto"], ["proof (state)\nthis:\n  root (length x) (mean x ^ length x) = mean x\n\ngoal (1 subgoal):\n 1. pos x \\<and> het x = 0 \\<Longrightarrow> gmean x = mean x", "finally"], ["proof (chain)\npicking this:\n  root (length x) (prod_list x) = mean x", "show \"gmean x = mean x\""], ["proof (prove)\nusing this:\n  root (length x) (prod_list x) = mean x\n\ngoal (1 subgoal):\n 1. gmean x = mean x", "unfolding gmean_def"], ["proof (prove)\nusing this:\n  root (length x) (prod_list x) = mean x\n\ngoal (1 subgoal):\n 1. root (length x) (prod_list x) = mean x", "."], ["proof (state)\nthis:\n  gmean x = mean x\n\ngoal:\nNo subgoals!", "qed"], ["", "(* =================================================================== *)\n(* =================================================================== *)\n(* =================================================================== *)\n(* =================================================================== *)"], ["", "subsection \\<open>Existence of a new collection\\<close>"], ["", "text \\<open>We now present the largest and most important proof in this\ndocument. Given any positive and non-homogeneous collection of real\nnumbers there exists a new collection that is $\\gamma$-equivalent,\npositive, has a strictly lower heterogeneity and a greater geometric\nmean.\\<close>"], ["", "lemma new_list_gt_gmean:\n  fixes xs :: \"real list\" and m :: real\n  and neq and eq\n  defines\n    m: \"m \\<equiv> mean xs\" and\n    neq: \"noteq \\<equiv> list_neq xs m\" and\n    eq: \"eq \\<equiv> list_eq xs m\"\n  assumes pos_xs: \"pos xs\" and het_gt_0: \"het xs > 0\"\n  shows\n  \"\\<exists>xs'. gmean xs' > gmean xs \\<and> \\<gamma>_eq (xs',xs) \\<and>\n          het xs' < het xs \\<and> pos xs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "from pos_xs pos_imp_ne"], ["proof (chain)\npicking this:\n  pos xs\n  pos ?xs \\<Longrightarrow> ?xs \\<noteq> []", "have\n    pos_els: \"\\<forall>y. y : set xs \\<longrightarrow> y > 0\""], ["proof (prove)\nusing this:\n  pos xs\n  pos ?xs \\<Longrightarrow> ?xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<forall>y. y \\<in> set xs \\<longrightarrow> 0 < y", "by (unfold pos_def, simp)"], ["proof (state)\nthis:\n  \\<forall>y. y \\<in> set xs \\<longrightarrow> 0 < y\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "with el_gt0_imp_prod_gt0[of xs]"], ["proof (chain)\npicking this:\n  (\\<And>y. y \\<in> set xs \\<Longrightarrow> 0 < y) \\<Longrightarrow>\n  0 < prod_list xs\n  \\<forall>y. y \\<in> set xs \\<longrightarrow> 0 < y", "have pos_asm: \"\\<Prod>:xs > 0\""], ["proof (prove)\nusing this:\n  (\\<And>y. y \\<in> set xs \\<Longrightarrow> 0 < y) \\<Longrightarrow>\n  0 < prod_list xs\n  \\<forall>y. y \\<in> set xs \\<longrightarrow> 0 < y\n\ngoal (1 subgoal):\n 1. 0 < prod_list xs", "by simp"], ["proof (state)\nthis:\n  0 < prod_list xs\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "from neq het_gt_0 het_gt_0_imp_noteq_ne m"], ["proof (chain)\npicking this:\n  noteq \\<equiv> list_neq xs m\n  0 < het xs\n  0 < het ?l \\<Longrightarrow> list_neq ?l (mean ?l) \\<noteq> []\n  m \\<equiv> mean xs", "have\n    neqne: \"noteq \\<noteq> []\""], ["proof (prove)\nusing this:\n  noteq \\<equiv> list_neq xs m\n  0 < het xs\n  0 < het ?l \\<Longrightarrow> list_neq ?l (mean ?l) \\<noteq> []\n  m \\<equiv> mean xs\n\ngoal (1 subgoal):\n 1. noteq \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  noteq \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "txt \\<open>Pick two elements from xs, one greater than m, one less than m.\\<close>"], ["proof (state)\nthis:\n  noteq \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "from assms pick_one_gt neqne"], ["proof (chain)\npicking this:\n  m \\<equiv> mean xs\n  noteq \\<equiv> list_neq xs m\n  eq \\<equiv> list_eq xs m\n  pos xs\n  0 < het xs\n  list_neq ?xs (mean ?xs) \\<noteq> [] \\<Longrightarrow>\n  \\<exists>e. e \\<in> set (list_neq ?xs (mean ?xs)) \\<and> mean ?xs < e\n  noteq \\<noteq> []", "obtain \\<alpha> where\n    \\<alpha>_def: \"\\<alpha> : set noteq \\<and> \\<alpha> > m\""], ["proof (prove)\nusing this:\n  m \\<equiv> mean xs\n  noteq \\<equiv> list_neq xs m\n  eq \\<equiv> list_eq xs m\n  pos xs\n  0 < het xs\n  list_neq ?xs (mean ?xs) \\<noteq> [] \\<Longrightarrow>\n  \\<exists>e. e \\<in> set (list_neq ?xs (mean ?xs)) \\<and> mean ?xs < e\n  noteq \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>.\n        \\<alpha> \\<in> set noteq \\<and> m < \\<alpha> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding neq m"], ["proof (prove)\nusing this:\n  mean xs \\<equiv> mean xs\n  list_neq xs (mean xs) \\<equiv> list_neq xs (mean xs)\n  eq \\<equiv> list_eq xs (mean xs)\n  pos xs\n  0 < het xs\n  list_neq ?xs (mean ?xs) \\<noteq> [] \\<Longrightarrow>\n  \\<exists>e. e \\<in> set (list_neq ?xs (mean ?xs)) \\<and> mean ?xs < e\n  list_neq xs (mean xs) \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>.\n        \\<alpha> \\<in> set (list_neq xs (mean xs)) \\<and>\n        mean xs < \\<alpha> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<alpha> \\<in> set noteq \\<and> m < \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "from assms pick_one_lt neqne"], ["proof (chain)\npicking this:\n  m \\<equiv> mean xs\n  noteq \\<equiv> list_neq xs m\n  eq \\<equiv> list_eq xs m\n  pos xs\n  0 < het xs\n  list_neq ?xs (mean ?xs) \\<noteq> [] \\<Longrightarrow>\n  \\<exists>e. e \\<in> set (list_neq ?xs (mean ?xs)) \\<and> e < mean ?xs\n  noteq \\<noteq> []", "obtain \\<beta> where\n    \\<beta>_def: \"\\<beta> : set noteq \\<and> \\<beta> < m\""], ["proof (prove)\nusing this:\n  m \\<equiv> mean xs\n  noteq \\<equiv> list_neq xs m\n  eq \\<equiv> list_eq xs m\n  pos xs\n  0 < het xs\n  list_neq ?xs (mean ?xs) \\<noteq> [] \\<Longrightarrow>\n  \\<exists>e. e \\<in> set (list_neq ?xs (mean ?xs)) \\<and> e < mean ?xs\n  noteq \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>\\<beta>.\n        \\<beta> \\<in> set noteq \\<and> \\<beta> < m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding neq m"], ["proof (prove)\nusing this:\n  mean xs \\<equiv> mean xs\n  list_neq xs (mean xs) \\<equiv> list_neq xs (mean xs)\n  eq \\<equiv> list_eq xs (mean xs)\n  pos xs\n  0 < het xs\n  list_neq ?xs (mean ?xs) \\<noteq> [] \\<Longrightarrow>\n  \\<exists>e. e \\<in> set (list_neq ?xs (mean ?xs)) \\<and> e < mean ?xs\n  list_neq xs (mean xs) \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>\\<beta>.\n        \\<beta> \\<in> set (list_neq xs (mean xs)) \\<and>\n        \\<beta> < mean xs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<beta> \\<in> set noteq \\<and> \\<beta> < m\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "from \\<alpha>_def \\<beta>_def"], ["proof (chain)\npicking this:\n  \\<alpha> \\<in> set noteq \\<and> m < \\<alpha>\n  \\<beta> \\<in> set noteq \\<and> \\<beta> < m", "have \\<alpha>_gt: \"\\<alpha> > m\" and \\<beta>_lt: \"\\<beta> < m\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<in> set noteq \\<and> m < \\<alpha>\n  \\<beta> \\<in> set noteq \\<and> \\<beta> < m\n\ngoal (1 subgoal):\n 1. m < \\<alpha> &&& \\<beta> < m", "by auto"], ["proof (state)\nthis:\n  m < \\<alpha>\n  \\<beta> < m\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "from \\<alpha>_def \\<beta>_def"], ["proof (chain)\npicking this:\n  \\<alpha> \\<in> set noteq \\<and> m < \\<alpha>\n  \\<beta> \\<in> set noteq \\<and> \\<beta> < m", "have el_neq: \"\\<beta> \\<noteq> \\<alpha>\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<in> set noteq \\<and> m < \\<alpha>\n  \\<beta> \\<in> set noteq \\<and> \\<beta> < m\n\ngoal (1 subgoal):\n 1. \\<beta> \\<noteq> \\<alpha>", "by simp"], ["proof (state)\nthis:\n  \\<beta> \\<noteq> \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "from neqne neq"], ["proof (chain)\npicking this:\n  noteq \\<noteq> []\n  noteq \\<equiv> list_neq xs m", "have xsne: \"xs \\<noteq> []\""], ["proof (prove)\nusing this:\n  noteq \\<noteq> []\n  noteq \\<equiv> list_neq xs m\n\ngoal (1 subgoal):\n 1. xs \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "from \\<beta>_def"], ["proof (chain)\npicking this:\n  \\<beta> \\<in> set noteq \\<and> \\<beta> < m", "have \\<beta>_mem: \"\\<beta> : set xs\""], ["proof (prove)\nusing this:\n  \\<beta> \\<in> set noteq \\<and> \\<beta> < m\n\ngoal (1 subgoal):\n 1. \\<beta> \\<in> set xs", "by (auto simp: neq)"], ["proof (state)\nthis:\n  \\<beta> \\<in> set xs\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "from \\<alpha>_def"], ["proof (chain)\npicking this:\n  \\<alpha> \\<in> set noteq \\<and> m < \\<alpha>", "have \\<alpha>_mem: \"\\<alpha> : set xs\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<in> set noteq \\<and> m < \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<in> set xs", "by (auto simp: neq)"], ["proof (state)\nthis:\n  \\<alpha> \\<in> set xs\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "from pos_xs pos_def xsne \\<alpha>_mem \\<beta>_mem \\<alpha>_def \\<beta>_def"], ["proof (chain)\npicking this:\n  pos xs\n  pos ?l =\n  (if ?l = [] then False\n   else \\<forall>e. e \\<in> set ?l \\<longrightarrow> 0 < e)\n  xs \\<noteq> []\n  \\<alpha> \\<in> set xs\n  \\<beta> \\<in> set xs\n  \\<alpha> \\<in> set noteq \\<and> m < \\<alpha>\n  \\<beta> \\<in> set noteq \\<and> \\<beta> < m", "have\n    \\<alpha>_pos: \"\\<alpha> > 0\" and \\<beta>_pos: \"\\<beta> > 0\""], ["proof (prove)\nusing this:\n  pos xs\n  pos ?l =\n  (if ?l = [] then False\n   else \\<forall>e. e \\<in> set ?l \\<longrightarrow> 0 < e)\n  xs \\<noteq> []\n  \\<alpha> \\<in> set xs\n  \\<beta> \\<in> set xs\n  \\<alpha> \\<in> set noteq \\<and> m < \\<alpha>\n  \\<beta> \\<in> set noteq \\<and> \\<beta> < m\n\ngoal (1 subgoal):\n 1. 0 < \\<alpha> &&& 0 < \\<beta>", "by auto\n\n  \\<comment> \\<open>remove these elements from xs, and insert two new elements\\<close>"], ["proof (state)\nthis:\n  0 < \\<alpha>\n  0 < \\<beta>\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "obtain left_over where lo: \"left_over = (remove1 \\<beta> (remove1 \\<alpha> xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>left_over.\n        left_over = remove1 \\<beta> (remove1 \\<alpha> xs) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  left_over = remove1 \\<beta> (remove1 \\<alpha> xs)\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "obtain b where bdef: \"m + b = \\<alpha> + \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b.\n        m + b = \\<alpha> + \\<beta> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (drule meta_spec [of _ \"\\<alpha> + \\<beta> - m\"], simp)"], ["proof (state)\nthis:\n  m + b = \\<alpha> + \\<beta>\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "from m pos_xs pos_def pos_mean"], ["proof (chain)\npicking this:\n  m \\<equiv> mean xs\n  pos xs\n  pos ?l =\n  (if ?l = [] then False\n   else \\<forall>e. e \\<in> set ?l \\<longrightarrow> 0 < e)\n  pos ?xs \\<Longrightarrow> 0 < mean ?xs", "have m_pos: \"m > 0\""], ["proof (prove)\nusing this:\n  m \\<equiv> mean xs\n  pos xs\n  pos ?l =\n  (if ?l = [] then False\n   else \\<forall>e. e \\<in> set ?l \\<longrightarrow> 0 < e)\n  pos ?xs \\<Longrightarrow> 0 < mean ?xs\n\ngoal (1 subgoal):\n 1. 0 < m", "by simp"], ["proof (state)\nthis:\n  0 < m\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "with bdef \\<alpha>_pos \\<beta>_pos \\<alpha>_gt \\<beta>_lt"], ["proof (chain)\npicking this:\n  m + b = \\<alpha> + \\<beta>\n  0 < \\<alpha>\n  0 < \\<beta>\n  m < \\<alpha>\n  \\<beta> < m\n  0 < m", "have b_pos: \"b > 0\""], ["proof (prove)\nusing this:\n  m + b = \\<alpha> + \\<beta>\n  0 < \\<alpha>\n  0 < \\<beta>\n  m < \\<alpha>\n  \\<beta> < m\n  0 < m\n\ngoal (1 subgoal):\n 1. 0 < b", "by simp"], ["proof (state)\nthis:\n  0 < b\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "obtain new_list where nl: \"new_list = m#b#(left_over)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>new_list.\n        new_list = m # b # left_over \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  new_list = m # b # left_over\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "from el_neq \\<beta>_mem \\<alpha>_mem"], ["proof (chain)\npicking this:\n  \\<beta> \\<noteq> \\<alpha>\n  \\<beta> \\<in> set xs\n  \\<alpha> \\<in> set xs", "have \"\\<beta> : set xs \\<and> \\<alpha> : set xs \\<and> \\<beta> \\<noteq> \\<alpha>\""], ["proof (prove)\nusing this:\n  \\<beta> \\<noteq> \\<alpha>\n  \\<beta> \\<in> set xs\n  \\<alpha> \\<in> set xs\n\ngoal (1 subgoal):\n 1. \\<beta> \\<in> set xs \\<and>\n    \\<alpha> \\<in> set xs \\<and> \\<beta> \\<noteq> \\<alpha>", "by simp"], ["proof (state)\nthis:\n  \\<beta> \\<in> set xs \\<and>\n  \\<alpha> \\<in> set xs \\<and> \\<beta> \\<noteq> \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "hence \"\\<alpha> : set (remove1 \\<beta> xs) \\<and> \\<beta> : set(remove1 \\<alpha> xs)\""], ["proof (prove)\nusing this:\n  \\<beta> \\<in> set xs \\<and>\n  \\<alpha> \\<in> set xs \\<and> \\<beta> \\<noteq> \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<in> set (remove1 \\<beta> xs) \\<and>\n    \\<beta> \\<in> set (remove1 \\<alpha> xs)", "by (auto simp add: in_set_remove1)"], ["proof (state)\nthis:\n  \\<alpha> \\<in> set (remove1 \\<beta> xs) \\<and>\n  \\<beta> \\<in> set (remove1 \\<alpha> xs)\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "moreover"], ["proof (state)\nthis:\n  \\<alpha> \\<in> set (remove1 \\<beta> xs) \\<and>\n  \\<beta> \\<in> set (remove1 \\<alpha> xs)\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "hence \"(remove1 \\<alpha> xs) \\<noteq> [] \\<and> (remove1 \\<beta> xs) \\<noteq> []\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<in> set (remove1 \\<beta> xs) \\<and>\n  \\<beta> \\<in> set (remove1 \\<alpha> xs)\n\ngoal (1 subgoal):\n 1. remove1 \\<alpha> xs \\<noteq> [] \\<and> remove1 \\<beta> xs \\<noteq> []", "by (auto)"], ["proof (state)\nthis:\n  remove1 \\<alpha> xs \\<noteq> [] \\<and> remove1 \\<beta> xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "ultimately"], ["proof (chain)\npicking this:\n  \\<alpha> \\<in> set (remove1 \\<beta> xs) \\<and>\n  \\<beta> \\<in> set (remove1 \\<alpha> xs)\n  remove1 \\<alpha> xs \\<noteq> [] \\<and> remove1 \\<beta> xs \\<noteq> []", "have\n    mem : \"\\<alpha> : set(remove1 \\<beta> xs) \\<and> \\<beta> : set(remove1 \\<alpha> xs) \\<and>\n          (remove1 \\<alpha> xs) \\<noteq> [] \\<and> (remove1 \\<beta> xs) \\<noteq> []\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<in> set (remove1 \\<beta> xs) \\<and>\n  \\<beta> \\<in> set (remove1 \\<alpha> xs)\n  remove1 \\<alpha> xs \\<noteq> [] \\<and> remove1 \\<beta> xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<in> set (remove1 \\<beta> xs) \\<and>\n    \\<beta> \\<in> set (remove1 \\<alpha> xs) \\<and>\n    remove1 \\<alpha> xs \\<noteq> [] \\<and> remove1 \\<beta> xs \\<noteq> []", "by simp\n  \\<comment> \\<open>prove that new list is positive\\<close>"], ["proof (state)\nthis:\n  \\<alpha> \\<in> set (remove1 \\<beta> xs) \\<and>\n  \\<beta> \\<in> set (remove1 \\<alpha> xs) \\<and>\n  remove1 \\<alpha> xs \\<noteq> [] \\<and> remove1 \\<beta> xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "from nl"], ["proof (chain)\npicking this:\n  new_list = m # b # left_over", "have nl_pos: \"pos new_list\""], ["proof (prove)\nusing this:\n  new_list = m # b # left_over\n\ngoal (1 subgoal):\n 1. pos new_list", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>new_list = m # b # left_over; ?P1\\<rbrakk>\n    \\<Longrightarrow> pos new_list\n 2. \\<lbrakk>new_list = m # b # left_over; \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> pos new_list", "assume \"left_over = []\""], ["proof (state)\nthis:\n  left_over = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>new_list = m # b # left_over; ?P1\\<rbrakk>\n    \\<Longrightarrow> pos new_list\n 2. \\<lbrakk>new_list = m # b # left_over; \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> pos new_list", "with nl b_pos m_pos"], ["proof (chain)\npicking this:\n  new_list = m # b # left_over\n  0 < b\n  0 < m\n  left_over = []", "show ?thesis"], ["proof (prove)\nusing this:\n  new_list = m # b # left_over\n  0 < b\n  0 < m\n  left_over = []\n\ngoal (1 subgoal):\n 1. pos new_list", "by simp"], ["proof (state)\nthis:\n  pos new_list\n\ngoal (1 subgoal):\n 1. \\<lbrakk>new_list = m # b # left_over; left_over \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> pos new_list", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>new_list = m # b # left_over; left_over \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> pos new_list", "assume lone: \"left_over \\<noteq> []\""], ["proof (state)\nthis:\n  left_over \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>new_list = m # b # left_over; left_over \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> pos new_list", "from mem pos_imp_rmv_pos pos_xs"], ["proof (chain)\npicking this:\n  \\<alpha> \\<in> set (remove1 \\<beta> xs) \\<and>\n  \\<beta> \\<in> set (remove1 \\<alpha> xs) \\<and>\n  remove1 \\<alpha> xs \\<noteq> [] \\<and> remove1 \\<beta> xs \\<noteq> []\n  \\<lbrakk>remove1 ?a ?xs \\<noteq> []; pos ?xs\\<rbrakk>\n  \\<Longrightarrow> pos (remove1 ?a ?xs)\n  pos xs", "have \"pos (remove1 \\<alpha> xs)\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<in> set (remove1 \\<beta> xs) \\<and>\n  \\<beta> \\<in> set (remove1 \\<alpha> xs) \\<and>\n  remove1 \\<alpha> xs \\<noteq> [] \\<and> remove1 \\<beta> xs \\<noteq> []\n  \\<lbrakk>remove1 ?a ?xs \\<noteq> []; pos ?xs\\<rbrakk>\n  \\<Longrightarrow> pos (remove1 ?a ?xs)\n  pos xs\n\ngoal (1 subgoal):\n 1. pos (remove1 \\<alpha> xs)", "by simp"], ["proof (state)\nthis:\n  pos (remove1 \\<alpha> xs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>new_list = m # b # left_over; left_over \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> pos new_list", "with lo lone pos_imp_rmv_pos"], ["proof (chain)\npicking this:\n  left_over = remove1 \\<beta> (remove1 \\<alpha> xs)\n  left_over \\<noteq> []\n  \\<lbrakk>remove1 ?a ?xs \\<noteq> []; pos ?xs\\<rbrakk>\n  \\<Longrightarrow> pos (remove1 ?a ?xs)\n  pos (remove1 \\<alpha> xs)", "have \"pos left_over\""], ["proof (prove)\nusing this:\n  left_over = remove1 \\<beta> (remove1 \\<alpha> xs)\n  left_over \\<noteq> []\n  \\<lbrakk>remove1 ?a ?xs \\<noteq> []; pos ?xs\\<rbrakk>\n  \\<Longrightarrow> pos (remove1 ?a ?xs)\n  pos (remove1 \\<alpha> xs)\n\ngoal (1 subgoal):\n 1. pos left_over", "by simp"], ["proof (state)\nthis:\n  pos left_over\n\ngoal (1 subgoal):\n 1. \\<lbrakk>new_list = m # b # left_over; left_over \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> pos new_list", "with lone mem nl m_pos b_pos"], ["proof (chain)\npicking this:\n  left_over \\<noteq> []\n  \\<alpha> \\<in> set (remove1 \\<beta> xs) \\<and>\n  \\<beta> \\<in> set (remove1 \\<alpha> xs) \\<and>\n  remove1 \\<alpha> xs \\<noteq> [] \\<and> remove1 \\<beta> xs \\<noteq> []\n  new_list = m # b # left_over\n  0 < m\n  0 < b\n  pos left_over", "show ?thesis"], ["proof (prove)\nusing this:\n  left_over \\<noteq> []\n  \\<alpha> \\<in> set (remove1 \\<beta> xs) \\<and>\n  \\<beta> \\<in> set (remove1 \\<alpha> xs) \\<and>\n  remove1 \\<alpha> xs \\<noteq> [] \\<and> remove1 \\<beta> xs \\<noteq> []\n  new_list = m # b # left_over\n  0 < m\n  0 < b\n  pos left_over\n\ngoal (1 subgoal):\n 1. pos new_list", "by simp"], ["proof (state)\nthis:\n  pos new_list\n\ngoal:\nNo subgoals!", "qed\n\n  \\<comment> \\<open>now show that the new list has the same mean as the old list\\<close>"], ["proof (state)\nthis:\n  pos new_list\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "with mem nl lo bdef \\<alpha>_mem \\<beta>_mem"], ["proof (chain)\npicking this:\n  \\<alpha> \\<in> set (remove1 \\<beta> xs) \\<and>\n  \\<beta> \\<in> set (remove1 \\<alpha> xs) \\<and>\n  remove1 \\<alpha> xs \\<noteq> [] \\<and> remove1 \\<beta> xs \\<noteq> []\n  new_list = m # b # left_over\n  left_over = remove1 \\<beta> (remove1 \\<alpha> xs)\n  m + b = \\<alpha> + \\<beta>\n  \\<alpha> \\<in> set xs\n  \\<beta> \\<in> set xs\n  pos new_list", "have \"\\<Sum>:new_list = \\<Sum>:xs\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<in> set (remove1 \\<beta> xs) \\<and>\n  \\<beta> \\<in> set (remove1 \\<alpha> xs) \\<and>\n  remove1 \\<alpha> xs \\<noteq> [] \\<and> remove1 \\<beta> xs \\<noteq> []\n  new_list = m # b # left_over\n  left_over = remove1 \\<beta> (remove1 \\<alpha> xs)\n  m + b = \\<alpha> + \\<beta>\n  \\<alpha> \\<in> set xs\n  \\<beta> \\<in> set xs\n  pos new_list\n\ngoal (1 subgoal):\n 1. sum_list new_list = sum_list xs", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>new_list = m # b # remove1 \\<beta> (remove1 \\<alpha> xs);\n     left_over = remove1 \\<beta> (remove1 \\<alpha> xs);\n     m + b = \\<alpha> + \\<beta>; \\<alpha> \\<in> set xs;\n     \\<beta> \\<in> set xs;\n     if 0 < m then pos (b # remove1 \\<beta> (remove1 \\<alpha> xs))\n     else False;\n     \\<alpha> \\<in> set (remove1 \\<beta> xs);\n     \\<beta> \\<in> set (remove1 \\<alpha> xs);\n     remove1 \\<alpha> xs \\<noteq> [];\n     remove1 \\<beta> xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> m +\n                      (b +\n                       sum_list (remove1 \\<beta> (remove1 \\<alpha> xs))) =\n                      sum_list xs", "apply (subst sum_list_rmv1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>new_list = m # b # remove1 \\<beta> (remove1 \\<alpha> xs);\n     left_over = remove1 \\<beta> (remove1 \\<alpha> xs);\n     m + b = \\<alpha> + \\<beta>; \\<alpha> \\<in> set xs;\n     \\<beta> \\<in> set xs;\n     if 0 < m then pos (b # remove1 \\<beta> (remove1 \\<alpha> xs))\n     else False;\n     \\<alpha> \\<in> set (remove1 \\<beta> xs);\n     \\<beta> \\<in> set (remove1 \\<alpha> xs);\n     remove1 \\<alpha> xs \\<noteq> [];\n     remove1 \\<beta> xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<beta> \\<in> set (remove1 \\<alpha> xs)\n 2. \\<lbrakk>new_list = m # b # remove1 \\<beta> (remove1 \\<alpha> xs);\n     left_over = remove1 \\<beta> (remove1 \\<alpha> xs);\n     m + b = \\<alpha> + \\<beta>; \\<alpha> \\<in> set xs;\n     \\<beta> \\<in> set xs;\n     if 0 < m then pos (b # remove1 \\<beta> (remove1 \\<alpha> xs))\n     else False;\n     \\<alpha> \\<in> set (remove1 \\<beta> xs);\n     \\<beta> \\<in> set (remove1 \\<alpha> xs);\n     remove1 \\<alpha> xs \\<noteq> [];\n     remove1 \\<beta> xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> m + (b + (sum_list (remove1 \\<alpha> xs) - \\<beta>)) =\n                      sum_list xs", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>new_list = m # b # remove1 \\<beta> (remove1 \\<alpha> xs);\n     left_over = remove1 \\<beta> (remove1 \\<alpha> xs);\n     m + b = \\<alpha> + \\<beta>; \\<alpha> \\<in> set xs;\n     \\<beta> \\<in> set xs;\n     if 0 < m then pos (b # remove1 \\<beta> (remove1 \\<alpha> xs))\n     else False;\n     \\<alpha> \\<in> set (remove1 \\<beta> xs);\n     \\<beta> \\<in> set (remove1 \\<alpha> xs);\n     remove1 \\<alpha> xs \\<noteq> [];\n     remove1 \\<beta> xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> m + (b + (sum_list (remove1 \\<alpha> xs) - \\<beta>)) =\n                      sum_list xs", "apply (subst sum_list_rmv1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>new_list = m # b # remove1 \\<beta> (remove1 \\<alpha> xs);\n     left_over = remove1 \\<beta> (remove1 \\<alpha> xs);\n     m + b = \\<alpha> + \\<beta>; \\<alpha> \\<in> set xs;\n     \\<beta> \\<in> set xs;\n     if 0 < m then pos (b # remove1 \\<beta> (remove1 \\<alpha> xs))\n     else False;\n     \\<alpha> \\<in> set (remove1 \\<beta> xs);\n     \\<beta> \\<in> set (remove1 \\<alpha> xs);\n     remove1 \\<alpha> xs \\<noteq> [];\n     remove1 \\<beta> xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<alpha> \\<in> set xs\n 2. \\<lbrakk>new_list = m # b # remove1 \\<beta> (remove1 \\<alpha> xs);\n     left_over = remove1 \\<beta> (remove1 \\<alpha> xs);\n     m + b = \\<alpha> + \\<beta>; \\<alpha> \\<in> set xs;\n     \\<beta> \\<in> set xs;\n     if 0 < m then pos (b # remove1 \\<beta> (remove1 \\<alpha> xs))\n     else False;\n     \\<alpha> \\<in> set (remove1 \\<beta> xs);\n     \\<beta> \\<in> set (remove1 \\<alpha> xs);\n     remove1 \\<alpha> xs \\<noteq> [];\n     remove1 \\<beta> xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> m + (b + (sum_list xs - \\<alpha> - \\<beta>)) =\n                      sum_list xs", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>new_list = m # b # remove1 \\<beta> (remove1 \\<alpha> xs);\n     left_over = remove1 \\<beta> (remove1 \\<alpha> xs);\n     m + b = \\<alpha> + \\<beta>; \\<alpha> \\<in> set xs;\n     \\<beta> \\<in> set xs;\n     if 0 < m then pos (b # remove1 \\<beta> (remove1 \\<alpha> xs))\n     else False;\n     \\<alpha> \\<in> set (remove1 \\<beta> xs);\n     \\<beta> \\<in> set (remove1 \\<alpha> xs);\n     remove1 \\<alpha> xs \\<noteq> [];\n     remove1 \\<beta> xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> m + (b + (sum_list xs - \\<alpha> - \\<beta>)) =\n                      sum_list xs", "apply clarsimp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  sum_list new_list = sum_list xs\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "moreover"], ["proof (state)\nthis:\n  sum_list new_list = sum_list xs\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "from lo nl \\<beta>_mem \\<alpha>_mem mem"], ["proof (chain)\npicking this:\n  left_over = remove1 \\<beta> (remove1 \\<alpha> xs)\n  new_list = m # b # left_over\n  \\<beta> \\<in> set xs\n  \\<alpha> \\<in> set xs\n  \\<alpha> \\<in> set (remove1 \\<beta> xs) \\<and>\n  \\<beta> \\<in> set (remove1 \\<alpha> xs) \\<and>\n  remove1 \\<alpha> xs \\<noteq> [] \\<and> remove1 \\<beta> xs \\<noteq> []", "have\n    leq: \"length new_list = length xs\""], ["proof (prove)\nusing this:\n  left_over = remove1 \\<beta> (remove1 \\<alpha> xs)\n  new_list = m # b # left_over\n  \\<beta> \\<in> set xs\n  \\<alpha> \\<in> set xs\n  \\<alpha> \\<in> set (remove1 \\<beta> xs) \\<and>\n  \\<beta> \\<in> set (remove1 \\<alpha> xs) \\<and>\n  remove1 \\<alpha> xs \\<noteq> [] \\<and> remove1 \\<beta> xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. length new_list = length xs", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>left_over = remove1 \\<beta> (remove1 \\<alpha> xs);\n     new_list = m # b # left_over; \\<beta> \\<in> set xs;\n     \\<alpha> \\<in> set xs;\n     \\<alpha> \\<in> set (remove1 \\<beta> xs) \\<and>\n     \\<beta> \\<in> set (remove1 \\<alpha> xs) \\<and>\n     remove1 \\<alpha> xs \\<noteq> [] \\<and>\n     remove1 \\<beta> xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> length new_list = length xs", "apply (erule conjE)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>left_over = remove1 \\<beta> (remove1 \\<alpha> xs);\n     new_list = m # b # left_over; \\<beta> \\<in> set xs;\n     \\<alpha> \\<in> set xs; \\<alpha> \\<in> set (remove1 \\<beta> xs);\n     \\<beta> \\<in> set (remove1 \\<alpha> xs);\n     remove1 \\<alpha> xs \\<noteq> [];\n     remove1 \\<beta> xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> length new_list = length xs", "apply (clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>left_over = remove1 \\<beta> (remove1 \\<alpha> xs);\n     new_list = m # b # remove1 \\<beta> (remove1 \\<alpha> xs);\n     \\<beta> \\<in> set xs; \\<alpha> \\<in> set xs;\n     \\<alpha> \\<in> set (remove1 \\<beta> xs);\n     \\<beta> \\<in> set (remove1 \\<alpha> xs);\n     remove1 \\<alpha> xs \\<noteq> [];\n     remove1 \\<beta> xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> Suc (Suc (length\n                                 (remove1 \\<beta> (remove1 \\<alpha> xs)))) =\n                      length xs", "apply (subst length_remove1, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>left_over = remove1 \\<beta> (remove1 \\<alpha> xs);\n     new_list = m # b # remove1 \\<beta> (remove1 \\<alpha> xs);\n     \\<beta> \\<in> set xs; \\<alpha> \\<in> set xs;\n     \\<alpha> \\<in> set (remove1 \\<beta> xs);\n     \\<beta> \\<in> set (remove1 \\<alpha> xs);\n     remove1 \\<alpha> xs \\<noteq> [];\n     remove1 \\<beta> xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> Suc (length (remove1 \\<alpha> xs)) = length xs", "apply (simp add: length_remove1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>left_over = remove1 \\<beta> (remove1 \\<alpha> xs);\n     new_list = m # b # remove1 \\<beta> (remove1 \\<alpha> xs);\n     \\<beta> \\<in> set xs; \\<alpha> \\<in> set xs;\n     \\<alpha> \\<in> set (remove1 \\<beta> xs);\n     \\<beta> \\<in> set (remove1 \\<alpha> xs);\n     remove1 \\<alpha> xs \\<noteq> [];\n     remove1 \\<beta> xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> Suc (length xs - Suc 0) = length xs", "apply (auto dest!:length_pos_if_in_set)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  length new_list = length xs\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "ultimately"], ["proof (chain)\npicking this:\n  sum_list new_list = sum_list xs\n  length new_list = length xs", "have eq_mean: \"mean new_list = mean xs\""], ["proof (prove)\nusing this:\n  sum_list new_list = sum_list xs\n  length new_list = length xs\n\ngoal (1 subgoal):\n 1. mean new_list = mean xs", "by (rule list_mean_eq_iff)\n\n  \\<comment> \\<open>finally show that the new list has a greater gmean than the old list\\<close>"], ["proof (state)\nthis:\n  mean new_list = mean xs\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "have gt_gmean: \"gmean new_list > gmean xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gmean xs < gmean new_list", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. gmean xs < gmean new_list", "from bdef \\<alpha>_gt \\<beta>_lt"], ["proof (chain)\npicking this:\n  m + b = \\<alpha> + \\<beta>\n  m < \\<alpha>\n  \\<beta> < m", "have \"abs (m - b) < abs (\\<alpha> - \\<beta>)\""], ["proof (prove)\nusing this:\n  m + b = \\<alpha> + \\<beta>\n  m < \\<alpha>\n  \\<beta> < m\n\ngoal (1 subgoal):\n 1. \\<bar>m - b\\<bar> < \\<bar>\\<alpha> - \\<beta>\\<bar>", "by arith"], ["proof (state)\nthis:\n  \\<bar>m - b\\<bar> < \\<bar>\\<alpha> - \\<beta>\\<bar>\n\ngoal (1 subgoal):\n 1. gmean xs < gmean new_list", "moreover"], ["proof (state)\nthis:\n  \\<bar>m - b\\<bar> < \\<bar>\\<alpha> - \\<beta>\\<bar>\n\ngoal (1 subgoal):\n 1. gmean xs < gmean new_list", "from bdef"], ["proof (chain)\npicking this:\n  m + b = \\<alpha> + \\<beta>", "have \"m+b = \\<alpha>+\\<beta>\""], ["proof (prove)\nusing this:\n  m + b = \\<alpha> + \\<beta>\n\ngoal (1 subgoal):\n 1. m + b = \\<alpha> + \\<beta>", "."], ["proof (state)\nthis:\n  m + b = \\<alpha> + \\<beta>\n\ngoal (1 subgoal):\n 1. gmean xs < gmean new_list", "ultimately"], ["proof (chain)\npicking this:\n  \\<bar>m - b\\<bar> < \\<bar>\\<alpha> - \\<beta>\\<bar>\n  m + b = \\<alpha> + \\<beta>", "have mb_gt_gt: \"m*b > \\<alpha>*\\<beta>\""], ["proof (prove)\nusing this:\n  \\<bar>m - b\\<bar> < \\<bar>\\<alpha> - \\<beta>\\<bar>\n  m + b = \\<alpha> + \\<beta>\n\ngoal (1 subgoal):\n 1. \\<alpha> * \\<beta> < m * b", "by (rule le_diff_imp_gt_prod)"], ["proof (state)\nthis:\n  \\<alpha> * \\<beta> < m * b\n\ngoal (1 subgoal):\n 1. gmean xs < gmean new_list", "moreover"], ["proof (state)\nthis:\n  \\<alpha> * \\<beta> < m * b\n\ngoal (1 subgoal):\n 1. gmean xs < gmean new_list", "from nl"], ["proof (chain)\npicking this:\n  new_list = m # b # left_over", "have\n      \"\\<Prod>:new_list = \\<Prod>:left_over * (m*b)\""], ["proof (prove)\nusing this:\n  new_list = m # b # left_over\n\ngoal (1 subgoal):\n 1. prod_list new_list = prod_list left_over * (m * b)", "by auto"], ["proof (state)\nthis:\n  prod_list new_list = prod_list left_over * (m * b)\n\ngoal (1 subgoal):\n 1. gmean xs < gmean new_list", "moreover"], ["proof (state)\nthis:\n  prod_list new_list = prod_list left_over * (m * b)\n\ngoal (1 subgoal):\n 1. gmean xs < gmean new_list", "from lo \\<alpha>_mem \\<beta>_mem mem remove1_retains_prod[where 'a = real]"], ["proof (chain)\npicking this:\n  left_over = remove1 \\<beta> (remove1 \\<alpha> xs)\n  \\<alpha> \\<in> set xs\n  \\<beta> \\<in> set xs\n  \\<alpha> \\<in> set (remove1 \\<beta> xs) \\<and>\n  \\<beta> \\<in> set (remove1 \\<alpha> xs) \\<and>\n  remove1 \\<alpha> xs \\<noteq> [] \\<and> remove1 \\<beta> xs \\<noteq> []\n  ?a \\<in> set ?xs \\<longrightarrow>\n  prod_list ?xs = prod_list (remove1 ?a ?xs) * ?a", "have\n      xsprod: \"\\<Prod>:xs = \\<Prod>:left_over * (\\<alpha>*\\<beta>)\""], ["proof (prove)\nusing this:\n  left_over = remove1 \\<beta> (remove1 \\<alpha> xs)\n  \\<alpha> \\<in> set xs\n  \\<beta> \\<in> set xs\n  \\<alpha> \\<in> set (remove1 \\<beta> xs) \\<and>\n  \\<beta> \\<in> set (remove1 \\<alpha> xs) \\<and>\n  remove1 \\<alpha> xs \\<noteq> [] \\<and> remove1 \\<beta> xs \\<noteq> []\n  ?a \\<in> set ?xs \\<longrightarrow>\n  prod_list ?xs = prod_list (remove1 ?a ?xs) * ?a\n\ngoal (1 subgoal):\n 1. prod_list xs = prod_list left_over * (\\<alpha> * \\<beta>)", "by auto"], ["proof (state)\nthis:\n  prod_list xs = prod_list left_over * (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. gmean xs < gmean new_list", "moreover"], ["proof (state)\nthis:\n  prod_list xs = prod_list left_over * (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. gmean xs < gmean new_list", "from xsne"], ["proof (chain)\npicking this:\n  xs \\<noteq> []", "have\n      \"xs \\<noteq> []\""], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. xs \\<noteq> []", "."], ["proof (state)\nthis:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. gmean xs < gmean new_list", "moreover"], ["proof (state)\nthis:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. gmean xs < gmean new_list", "from nl"], ["proof (chain)\npicking this:\n  new_list = m # b # left_over", "have\n      nlne: \"new_list \\<noteq> []\""], ["proof (prove)\nusing this:\n  new_list = m # b # left_over\n\ngoal (1 subgoal):\n 1. new_list \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  new_list \\<noteq> []\n\ngoal (1 subgoal):\n 1. gmean xs < gmean new_list", "moreover"], ["proof (state)\nthis:\n  new_list \\<noteq> []\n\ngoal (1 subgoal):\n 1. gmean xs < gmean new_list", "from pos_asm lo"], ["proof (chain)\npicking this:\n  0 < prod_list xs\n  left_over = remove1 \\<beta> (remove1 \\<alpha> xs)", "have\n      \"\\<Prod>:left_over > 0\""], ["proof (prove)\nusing this:\n  0 < prod_list xs\n  left_over = remove1 \\<beta> (remove1 \\<alpha> xs)\n\ngoal (1 subgoal):\n 1. 0 < prod_list left_over", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < prod_list xs;\n     left_over = remove1 \\<beta> (remove1 \\<alpha> xs)\\<rbrakk>\n    \\<Longrightarrow> 0 < prod_list left_over", "from pos_asm"], ["proof (chain)\npicking this:\n  0 < prod_list xs", "have \"\\<Prod>:xs > 0\""], ["proof (prove)\nusing this:\n  0 < prod_list xs\n\ngoal (1 subgoal):\n 1. 0 < prod_list xs", "."], ["proof (state)\nthis:\n  0 < prod_list xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < prod_list xs;\n     left_over = remove1 \\<beta> (remove1 \\<alpha> xs)\\<rbrakk>\n    \\<Longrightarrow> 0 < prod_list left_over", "moreover"], ["proof (state)\nthis:\n  0 < prod_list xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < prod_list xs;\n     left_over = remove1 \\<beta> (remove1 \\<alpha> xs)\\<rbrakk>\n    \\<Longrightarrow> 0 < prod_list left_over", "from xsprod"], ["proof (chain)\npicking this:\n  prod_list xs = prod_list left_over * (\\<alpha> * \\<beta>)", "have \"\\<Prod>:xs = \\<Prod>:left_over * (\\<alpha>*\\<beta>)\""], ["proof (prove)\nusing this:\n  prod_list xs = prod_list left_over * (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. prod_list xs = prod_list left_over * (\\<alpha> * \\<beta>)", "."], ["proof (state)\nthis:\n  prod_list xs = prod_list left_over * (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < prod_list xs;\n     left_over = remove1 \\<beta> (remove1 \\<alpha> xs)\\<rbrakk>\n    \\<Longrightarrow> 0 < prod_list left_over", "ultimately"], ["proof (chain)\npicking this:\n  0 < prod_list xs\n  prod_list xs = prod_list left_over * (\\<alpha> * \\<beta>)", "have \"\\<Prod>:left_over * (\\<alpha>*\\<beta>) > 0\""], ["proof (prove)\nusing this:\n  0 < prod_list xs\n  prod_list xs = prod_list left_over * (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. 0 < prod_list left_over * (\\<alpha> * \\<beta>)", "by simp"], ["proof (state)\nthis:\n  0 < prod_list left_over * (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < prod_list xs;\n     left_over = remove1 \\<beta> (remove1 \\<alpha> xs)\\<rbrakk>\n    \\<Longrightarrow> 0 < prod_list left_over", "moreover"], ["proof (state)\nthis:\n  0 < prod_list left_over * (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < prod_list xs;\n     left_over = remove1 \\<beta> (remove1 \\<alpha> xs)\\<rbrakk>\n    \\<Longrightarrow> 0 < prod_list left_over", "from pos_els \\<alpha>_mem \\<beta>_mem"], ["proof (chain)\npicking this:\n  \\<forall>y. y \\<in> set xs \\<longrightarrow> 0 < y\n  \\<alpha> \\<in> set xs\n  \\<beta> \\<in> set xs", "have \"\\<alpha> > 0\" and \"\\<beta> > 0\""], ["proof (prove)\nusing this:\n  \\<forall>y. y \\<in> set xs \\<longrightarrow> 0 < y\n  \\<alpha> \\<in> set xs\n  \\<beta> \\<in> set xs\n\ngoal (1 subgoal):\n 1. 0 < \\<alpha> &&& 0 < \\<beta>", "by auto"], ["proof (state)\nthis:\n  0 < \\<alpha>\n  0 < \\<beta>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < prod_list xs;\n     left_over = remove1 \\<beta> (remove1 \\<alpha> xs)\\<rbrakk>\n    \\<Longrightarrow> 0 < prod_list left_over", "hence \"\\<alpha>*\\<beta> > 0\""], ["proof (prove)\nusing this:\n  0 < \\<alpha>\n  0 < \\<beta>\n\ngoal (1 subgoal):\n 1. 0 < \\<alpha> * \\<beta>", "by simp"], ["proof (state)\nthis:\n  0 < \\<alpha> * \\<beta>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < prod_list xs;\n     left_over = remove1 \\<beta> (remove1 \\<alpha> xs)\\<rbrakk>\n    \\<Longrightarrow> 0 < prod_list left_over", "ultimately"], ["proof (chain)\npicking this:\n  0 < prod_list left_over * (\\<alpha> * \\<beta>)\n  0 < \\<alpha> * \\<beta>", "show \"\\<Prod>:left_over > 0\""], ["proof (prove)\nusing this:\n  0 < prod_list left_over * (\\<alpha> * \\<beta>)\n  0 < \\<alpha> * \\<beta>\n\ngoal (1 subgoal):\n 1. 0 < prod_list left_over", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < prod_list left_over * (\\<alpha> * \\<beta>);\n     0 < \\<alpha> * \\<beta>\\<rbrakk>\n    \\<Longrightarrow> 0 < prod_list left_over", "apply (rule zero_less_mult_pos2 [where a=\"(\\<alpha> * \\<beta>)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < prod_list left_over * (\\<alpha> * \\<beta>);\n     0 < \\<alpha> * \\<beta>\\<rbrakk>\n    \\<Longrightarrow> 0 < prod_list left_over * (\\<alpha> * \\<beta>)\n 2. \\<lbrakk>0 < prod_list left_over * (\\<alpha> * \\<beta>);\n     0 < \\<alpha> * \\<beta>\\<rbrakk>\n    \\<Longrightarrow> 0 < \\<alpha> * \\<beta>", "by auto"], ["proof (state)\nthis:\n  0 < prod_list left_over\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < prod_list left_over\n\ngoal (1 subgoal):\n 1. gmean xs < gmean new_list", "ultimately"], ["proof (chain)\npicking this:\n  \\<alpha> * \\<beta> < m * b\n  prod_list new_list = prod_list left_over * (m * b)\n  prod_list xs = prod_list left_over * (\\<alpha> * \\<beta>)\n  xs \\<noteq> []\n  new_list \\<noteq> []\n  0 < prod_list left_over", "have \"\\<Prod>:new_list > \\<Prod>:xs\""], ["proof (prove)\nusing this:\n  \\<alpha> * \\<beta> < m * b\n  prod_list new_list = prod_list left_over * (m * b)\n  prod_list xs = prod_list left_over * (\\<alpha> * \\<beta>)\n  xs \\<noteq> []\n  new_list \\<noteq> []\n  0 < prod_list left_over\n\ngoal (1 subgoal):\n 1. prod_list xs < prod_list new_list", "by simp"], ["proof (state)\nthis:\n  prod_list xs < prod_list new_list\n\ngoal (1 subgoal):\n 1. gmean xs < gmean new_list", "moreover"], ["proof (state)\nthis:\n  prod_list xs < prod_list new_list\n\ngoal (1 subgoal):\n 1. gmean xs < gmean new_list", "with pos_asm nl"], ["proof (chain)\npicking this:\n  0 < prod_list xs\n  new_list = m # b # left_over\n  prod_list xs < prod_list new_list", "have \"\\<Prod>:new_list > 0\""], ["proof (prove)\nusing this:\n  0 < prod_list xs\n  new_list = m # b # left_over\n  prod_list xs < prod_list new_list\n\ngoal (1 subgoal):\n 1. 0 < prod_list new_list", "by auto"], ["proof (state)\nthis:\n  0 < prod_list new_list\n\ngoal (1 subgoal):\n 1. gmean xs < gmean new_list", "moreover"], ["proof (state)\nthis:\n  0 < prod_list new_list\n\ngoal (1 subgoal):\n 1. gmean xs < gmean new_list", "from calculation pos_asm xsne nlne leq list_gmean_gt_iff"], ["proof (chain)\npicking this:\n  prod_list xs < prod_list new_list\n  0 < prod_list new_list\n  0 < prod_list xs\n  xs \\<noteq> []\n  new_list \\<noteq> []\n  length new_list = length xs\n  \\<lbrakk>0 < prod_list ?one; 0 < prod_list ?two; ?one \\<noteq> [];\n   ?two \\<noteq> []; prod_list ?two < prod_list ?one;\n   length ?one = length ?two\\<rbrakk>\n  \\<Longrightarrow> gmean ?two < gmean ?one", "show \"gmean new_list > gmean xs\""], ["proof (prove)\nusing this:\n  prod_list xs < prod_list new_list\n  0 < prod_list new_list\n  0 < prod_list xs\n  xs \\<noteq> []\n  new_list \\<noteq> []\n  length new_list = length xs\n  \\<lbrakk>0 < prod_list ?one; 0 < prod_list ?two; ?one \\<noteq> [];\n   ?two \\<noteq> []; prod_list ?two < prod_list ?one;\n   length ?one = length ?two\\<rbrakk>\n  \\<Longrightarrow> gmean ?two < gmean ?one\n\ngoal (1 subgoal):\n 1. gmean xs < gmean new_list", "by simp"], ["proof (state)\nthis:\n  gmean xs < gmean new_list\n\ngoal:\nNo subgoals!", "qed\n\n  \\<comment> \\<open>auxiliary info\\<close>"], ["proof (state)\nthis:\n  gmean xs < gmean new_list\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "from \\<beta>_lt"], ["proof (chain)\npicking this:\n  \\<beta> < m", "have \\<beta>_ne_m: \"\\<beta> \\<noteq> m\""], ["proof (prove)\nusing this:\n  \\<beta> < m\n\ngoal (1 subgoal):\n 1. \\<beta> \\<noteq> m", "by simp"], ["proof (state)\nthis:\n  \\<beta> \\<noteq> m\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "from mem"], ["proof (chain)\npicking this:\n  \\<alpha> \\<in> set (remove1 \\<beta> xs) \\<and>\n  \\<beta> \\<in> set (remove1 \\<alpha> xs) \\<and>\n  remove1 \\<alpha> xs \\<noteq> [] \\<and> remove1 \\<beta> xs \\<noteq> []", "have\n    \\<beta>_mem_rmv_\\<alpha>: \"\\<beta> : set (remove1 \\<alpha> xs)\" and rmv_\\<alpha>_ne: \"(remove1 \\<alpha> xs) \\<noteq> []\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<in> set (remove1 \\<beta> xs) \\<and>\n  \\<beta> \\<in> set (remove1 \\<alpha> xs) \\<and>\n  remove1 \\<alpha> xs \\<noteq> [] \\<and> remove1 \\<beta> xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<beta> \\<in> set (remove1 \\<alpha> xs) &&&\n    remove1 \\<alpha> xs \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  \\<beta> \\<in> set (remove1 \\<alpha> xs)\n  remove1 \\<alpha> xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "from \\<alpha>_def"], ["proof (chain)\npicking this:\n  \\<alpha> \\<in> set noteq \\<and> m < \\<alpha>", "have \\<alpha>_ne_m: \"\\<alpha> \\<noteq> m\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<in> set noteq \\<and> m < \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> m", "by simp\n\n  \\<comment> \\<open>now show that new list is more homogeneous\\<close>"], ["proof (state)\nthis:\n  \\<alpha> \\<noteq> m\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "have lt_het: \"het new_list < het xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. het new_list < het xs", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> het new_list < het xs\n 2. \\<not> ?P \\<Longrightarrow> het new_list < het xs", "assume bm: \"b=m\""], ["proof (state)\nthis:\n  b = m\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> het new_list < het xs\n 2. \\<not> ?P \\<Longrightarrow> het new_list < het xs", "with het_def"], ["proof (chain)\npicking this:\n  het ?l = length (list_neq ?l (mean ?l))\n  b = m", "have\n      \"het new_list = length (list_neq new_list (mean new_list))\""], ["proof (prove)\nusing this:\n  het ?l = length (list_neq ?l (mean ?l))\n  b = m\n\ngoal (1 subgoal):\n 1. het new_list = length (list_neq new_list (mean new_list))", "by simp"], ["proof (state)\nthis:\n  het new_list = length (list_neq new_list (mean new_list))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> het new_list < het xs\n 2. \\<not> ?P \\<Longrightarrow> het new_list < het xs", "also"], ["proof (state)\nthis:\n  het new_list = length (list_neq new_list (mean new_list))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> het new_list < het xs\n 2. \\<not> ?P \\<Longrightarrow> het new_list < het xs", "with m nl eq_mean"], ["proof (chain)\npicking this:\n  m \\<equiv> mean xs\n  new_list = m # b # left_over\n  mean new_list = mean xs\n  het new_list = length (list_neq new_list (mean new_list))", "have\n      \"\\<dots> = length (list_neq (m#b#(left_over)) m)\""], ["proof (prove)\nusing this:\n  m \\<equiv> mean xs\n  new_list = m # b # left_over\n  mean new_list = mean xs\n  het new_list = length (list_neq new_list (mean new_list))\n\ngoal (1 subgoal):\n 1. length (list_neq new_list (mean new_list)) =\n    length (list_neq (m # b # left_over) m)", "by simp"], ["proof (state)\nthis:\n  length (list_neq new_list (mean new_list)) =\n  length (list_neq (m # b # left_over) m)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> het new_list < het xs\n 2. \\<not> ?P \\<Longrightarrow> het new_list < het xs", "also"], ["proof (state)\nthis:\n  length (list_neq new_list (mean new_list)) =\n  length (list_neq (m # b # left_over) m)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> het new_list < het xs\n 2. \\<not> ?P \\<Longrightarrow> het new_list < het xs", "with bm"], ["proof (chain)\npicking this:\n  b = m\n  length (list_neq new_list (mean new_list)) =\n  length (list_neq (m # b # left_over) m)", "have\n      \"\\<dots> = length (list_neq left_over m)\""], ["proof (prove)\nusing this:\n  b = m\n  length (list_neq new_list (mean new_list)) =\n  length (list_neq (m # b # left_over) m)\n\ngoal (1 subgoal):\n 1. length (list_neq (m # b # left_over) m) = length (list_neq left_over m)", "by simp"], ["proof (state)\nthis:\n  length (list_neq (m # b # left_over) m) = length (list_neq left_over m)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> het new_list < het xs\n 2. \\<not> ?P \\<Longrightarrow> het new_list < het xs", "also"], ["proof (state)\nthis:\n  length (list_neq (m # b # left_over) m) = length (list_neq left_over m)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> het new_list < het xs\n 2. \\<not> ?P \\<Longrightarrow> het new_list < het xs", "with lo \\<beta>_def \\<alpha>_def"], ["proof (chain)\npicking this:\n  left_over = remove1 \\<beta> (remove1 \\<alpha> xs)\n  \\<beta> \\<in> set noteq \\<and> \\<beta> < m\n  \\<alpha> \\<in> set noteq \\<and> m < \\<alpha>\n  length (list_neq (m # b # left_over) m) = length (list_neq left_over m)", "have\n      \"\\<dots> = length (list_neq (remove1 \\<beta> (remove1 \\<alpha> xs)) m)\""], ["proof (prove)\nusing this:\n  left_over = remove1 \\<beta> (remove1 \\<alpha> xs)\n  \\<beta> \\<in> set noteq \\<and> \\<beta> < m\n  \\<alpha> \\<in> set noteq \\<and> m < \\<alpha>\n  length (list_neq (m # b # left_over) m) = length (list_neq left_over m)\n\ngoal (1 subgoal):\n 1. length (list_neq left_over m) =\n    length (list_neq (remove1 \\<beta> (remove1 \\<alpha> xs)) m)", "by simp"], ["proof (state)\nthis:\n  length (list_neq left_over m) =\n  length (list_neq (remove1 \\<beta> (remove1 \\<alpha> xs)) m)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> het new_list < het xs\n 2. \\<not> ?P \\<Longrightarrow> het new_list < het xs", "also"], ["proof (state)\nthis:\n  length (list_neq left_over m) =\n  length (list_neq (remove1 \\<beta> (remove1 \\<alpha> xs)) m)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> het new_list < het xs\n 2. \\<not> ?P \\<Longrightarrow> het new_list < het xs", "from \\<beta>_ne_m \\<beta>_mem_rmv_\\<alpha> rmv_\\<alpha>_ne"], ["proof (chain)\npicking this:\n  \\<beta> \\<noteq> m\n  \\<beta> \\<in> set (remove1 \\<alpha> xs)\n  remove1 \\<alpha> xs \\<noteq> []", "have\n      \"\\<dots> < length (list_neq (remove1 \\<alpha> xs) m)\""], ["proof (prove)\nusing this:\n  \\<beta> \\<noteq> m\n  \\<beta> \\<in> set (remove1 \\<alpha> xs)\n  remove1 \\<alpha> xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. length (list_neq (remove1 \\<beta> (remove1 \\<alpha> xs)) m)\n    < length (list_neq (remove1 \\<alpha> xs) m)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<beta> \\<noteq> m; \\<beta> \\<in> set (remove1 \\<alpha> xs);\n     remove1 \\<alpha> xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> length\n                       (list_neq (remove1 \\<beta> (remove1 \\<alpha> xs)) m)\n                      < length (list_neq (remove1 \\<alpha> xs) m)", "apply (rule list_neq_remove1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<beta> \\<noteq> m; \\<beta> \\<in> set (remove1 \\<alpha> xs);\n     remove1 \\<alpha> xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<beta> \\<noteq> m \\<and>\n                      \\<beta> \\<in> set (remove1 \\<alpha> xs)", "by simp"], ["proof (state)\nthis:\n  length (list_neq (remove1 \\<beta> (remove1 \\<alpha> xs)) m)\n  < length (list_neq (remove1 \\<alpha> xs) m)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> het new_list < het xs\n 2. \\<not> ?P \\<Longrightarrow> het new_list < het xs", "also"], ["proof (state)\nthis:\n  length (list_neq (remove1 \\<beta> (remove1 \\<alpha> xs)) m)\n  < length (list_neq (remove1 \\<alpha> xs) m)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> het new_list < het xs\n 2. \\<not> ?P \\<Longrightarrow> het new_list < het xs", "from \\<alpha>_mem \\<alpha>_ne_m xsne"], ["proof (chain)\npicking this:\n  \\<alpha> \\<in> set xs\n  \\<alpha> \\<noteq> m\n  xs \\<noteq> []", "have\n      \"\\<dots> < length (list_neq xs m)\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<in> set xs\n  \\<alpha> \\<noteq> m\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. length (list_neq (remove1 \\<alpha> xs) m) < length (list_neq xs m)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<alpha> \\<in> set xs; \\<alpha> \\<noteq> m;\n     xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> length (list_neq (remove1 \\<alpha> xs) m)\n                      < length (list_neq xs m)", "apply (rule list_neq_remove1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<alpha> \\<in> set xs; \\<alpha> \\<noteq> m;\n     xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<alpha> \\<noteq> m \\<and> \\<alpha> \\<in> set xs", "by simp"], ["proof (state)\nthis:\n  length (list_neq (remove1 \\<alpha> xs) m) < length (list_neq xs m)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> het new_list < het xs\n 2. \\<not> ?P \\<Longrightarrow> het new_list < het xs", "also"], ["proof (state)\nthis:\n  length (list_neq (remove1 \\<alpha> xs) m) < length (list_neq xs m)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> het new_list < het xs\n 2. \\<not> ?P \\<Longrightarrow> het new_list < het xs", "with m het_def"], ["proof (chain)\npicking this:\n  m \\<equiv> mean xs\n  het ?l = length (list_neq ?l (mean ?l))\n  length (list_neq (remove1 \\<alpha> xs) m) < length (list_neq xs m)", "have \"\\<dots> = het xs\""], ["proof (prove)\nusing this:\n  m \\<equiv> mean xs\n  het ?l = length (list_neq ?l (mean ?l))\n  length (list_neq (remove1 \\<alpha> xs) m) < length (list_neq xs m)\n\ngoal (1 subgoal):\n 1. length (list_neq xs m) = het xs", "by simp"], ["proof (state)\nthis:\n  length (list_neq xs m) = het xs\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> het new_list < het xs\n 2. \\<not> ?P \\<Longrightarrow> het new_list < het xs", "finally"], ["proof (chain)\npicking this:\n  het new_list < het xs", "show \"het new_list < het xs\""], ["proof (prove)\nusing this:\n  het new_list < het xs\n\ngoal (1 subgoal):\n 1. het new_list < het xs", "."], ["proof (state)\nthis:\n  het new_list < het xs\n\ngoal (1 subgoal):\n 1. b \\<noteq> m \\<Longrightarrow> het new_list < het xs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. b \\<noteq> m \\<Longrightarrow> het new_list < het xs", "assume bnm: \"b\\<noteq>m\""], ["proof (state)\nthis:\n  b \\<noteq> m\n\ngoal (1 subgoal):\n 1. b \\<noteq> m \\<Longrightarrow> het new_list < het xs", "with het_def"], ["proof (chain)\npicking this:\n  het ?l = length (list_neq ?l (mean ?l))\n  b \\<noteq> m", "have\n      \"het new_list = length (list_neq new_list (mean new_list))\""], ["proof (prove)\nusing this:\n  het ?l = length (list_neq ?l (mean ?l))\n  b \\<noteq> m\n\ngoal (1 subgoal):\n 1. het new_list = length (list_neq new_list (mean new_list))", "by simp"], ["proof (state)\nthis:\n  het new_list = length (list_neq new_list (mean new_list))\n\ngoal (1 subgoal):\n 1. b \\<noteq> m \\<Longrightarrow> het new_list < het xs", "also"], ["proof (state)\nthis:\n  het new_list = length (list_neq new_list (mean new_list))\n\ngoal (1 subgoal):\n 1. b \\<noteq> m \\<Longrightarrow> het new_list < het xs", "with m nl eq_mean"], ["proof (chain)\npicking this:\n  m \\<equiv> mean xs\n  new_list = m # b # left_over\n  mean new_list = mean xs\n  het new_list = length (list_neq new_list (mean new_list))", "have\n      \"\\<dots> = length (list_neq (m#b#(left_over)) m)\""], ["proof (prove)\nusing this:\n  m \\<equiv> mean xs\n  new_list = m # b # left_over\n  mean new_list = mean xs\n  het new_list = length (list_neq new_list (mean new_list))\n\ngoal (1 subgoal):\n 1. length (list_neq new_list (mean new_list)) =\n    length (list_neq (m # b # left_over) m)", "by simp"], ["proof (state)\nthis:\n  length (list_neq new_list (mean new_list)) =\n  length (list_neq (m # b # left_over) m)\n\ngoal (1 subgoal):\n 1. b \\<noteq> m \\<Longrightarrow> het new_list < het xs", "also"], ["proof (state)\nthis:\n  length (list_neq new_list (mean new_list)) =\n  length (list_neq (m # b # left_over) m)\n\ngoal (1 subgoal):\n 1. b \\<noteq> m \\<Longrightarrow> het new_list < het xs", "with bnm"], ["proof (chain)\npicking this:\n  b \\<noteq> m\n  length (list_neq new_list (mean new_list)) =\n  length (list_neq (m # b # left_over) m)", "have\n      \"\\<dots> = length (b#(list_neq left_over m))\""], ["proof (prove)\nusing this:\n  b \\<noteq> m\n  length (list_neq new_list (mean new_list)) =\n  length (list_neq (m # b # left_over) m)\n\ngoal (1 subgoal):\n 1. length (list_neq (m # b # left_over) m) =\n    length (b # list_neq left_over m)", "by simp"], ["proof (state)\nthis:\n  length (list_neq (m # b # left_over) m) =\n  length (b # list_neq left_over m)\n\ngoal (1 subgoal):\n 1. b \\<noteq> m \\<Longrightarrow> het new_list < het xs", "also"], ["proof (state)\nthis:\n  length (list_neq (m # b # left_over) m) =\n  length (b # list_neq left_over m)\n\ngoal (1 subgoal):\n 1. b \\<noteq> m \\<Longrightarrow> het new_list < het xs", "have\n      \"\\<dots> = 1 + length (list_neq left_over m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (b # list_neq left_over m) = 1 + length (list_neq left_over m)", "by simp"], ["proof (state)\nthis:\n  length (b # list_neq left_over m) = 1 + length (list_neq left_over m)\n\ngoal (1 subgoal):\n 1. b \\<noteq> m \\<Longrightarrow> het new_list < het xs", "also"], ["proof (state)\nthis:\n  length (b # list_neq left_over m) = 1 + length (list_neq left_over m)\n\ngoal (1 subgoal):\n 1. b \\<noteq> m \\<Longrightarrow> het new_list < het xs", "with lo \\<beta>_def \\<alpha>_def"], ["proof (chain)\npicking this:\n  left_over = remove1 \\<beta> (remove1 \\<alpha> xs)\n  \\<beta> \\<in> set noteq \\<and> \\<beta> < m\n  \\<alpha> \\<in> set noteq \\<and> m < \\<alpha>\n  length (b # list_neq left_over m) = 1 + length (list_neq left_over m)", "have\n      \"\\<dots> = 1 + length (list_neq (remove1 \\<beta> (remove1 \\<alpha> xs)) m)\""], ["proof (prove)\nusing this:\n  left_over = remove1 \\<beta> (remove1 \\<alpha> xs)\n  \\<beta> \\<in> set noteq \\<and> \\<beta> < m\n  \\<alpha> \\<in> set noteq \\<and> m < \\<alpha>\n  length (b # list_neq left_over m) = 1 + length (list_neq left_over m)\n\ngoal (1 subgoal):\n 1. 1 + length (list_neq left_over m) =\n    1 + length (list_neq (remove1 \\<beta> (remove1 \\<alpha> xs)) m)", "by simp"], ["proof (state)\nthis:\n  1 + length (list_neq left_over m) =\n  1 + length (list_neq (remove1 \\<beta> (remove1 \\<alpha> xs)) m)\n\ngoal (1 subgoal):\n 1. b \\<noteq> m \\<Longrightarrow> het new_list < het xs", "also"], ["proof (state)\nthis:\n  1 + length (list_neq left_over m) =\n  1 + length (list_neq (remove1 \\<beta> (remove1 \\<alpha> xs)) m)\n\ngoal (1 subgoal):\n 1. b \\<noteq> m \\<Longrightarrow> het new_list < het xs", "from \\<beta>_ne_m \\<beta>_mem_rmv_\\<alpha> rmv_\\<alpha>_ne"], ["proof (chain)\npicking this:\n  \\<beta> \\<noteq> m\n  \\<beta> \\<in> set (remove1 \\<alpha> xs)\n  remove1 \\<alpha> xs \\<noteq> []", "have\n      \"\\<dots> < 1 + length (list_neq (remove1 \\<alpha> xs) m)\""], ["proof (prove)\nusing this:\n  \\<beta> \\<noteq> m\n  \\<beta> \\<in> set (remove1 \\<alpha> xs)\n  remove1 \\<alpha> xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. 1 + length (list_neq (remove1 \\<beta> (remove1 \\<alpha> xs)) m)\n    < 1 + length (list_neq (remove1 \\<alpha> xs) m)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<beta> \\<noteq> m; \\<beta> \\<in> set (remove1 \\<alpha> xs);\n     remove1 \\<alpha> xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> 1 +\n                      length\n                       (list_neq (remove1 \\<beta> (remove1 \\<alpha> xs)) m)\n                      < 1 + length (list_neq (remove1 \\<alpha> xs) m)", "apply (simp only: nat_add_left_cancel_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<beta> \\<noteq> m; \\<beta> \\<in> set (remove1 \\<alpha> xs);\n     remove1 \\<alpha> xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> length\n                       (list_neq (remove1 \\<beta> (remove1 \\<alpha> xs)) m)\n                      < length (list_neq (remove1 \\<alpha> xs) m)", "apply (rule list_neq_remove1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<beta> \\<noteq> m; \\<beta> \\<in> set (remove1 \\<alpha> xs);\n     remove1 \\<alpha> xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<beta> \\<noteq> m \\<and>\n                      \\<beta> \\<in> set (remove1 \\<alpha> xs)", "by simp"], ["proof (state)\nthis:\n  1 + length (list_neq (remove1 \\<beta> (remove1 \\<alpha> xs)) m)\n  < 1 + length (list_neq (remove1 \\<alpha> xs) m)\n\ngoal (1 subgoal):\n 1. b \\<noteq> m \\<Longrightarrow> het new_list < het xs", "finally"], ["proof (chain)\npicking this:\n  het new_list < 1 + length (list_neq (remove1 \\<alpha> xs) m)", "have\n      \"het new_list \\<le> length (list_neq (remove1 \\<alpha> xs) m)\""], ["proof (prove)\nusing this:\n  het new_list < 1 + length (list_neq (remove1 \\<alpha> xs) m)\n\ngoal (1 subgoal):\n 1. het new_list \\<le> length (list_neq (remove1 \\<alpha> xs) m)", "by simp"], ["proof (state)\nthis:\n  het new_list \\<le> length (list_neq (remove1 \\<alpha> xs) m)\n\ngoal (1 subgoal):\n 1. b \\<noteq> m \\<Longrightarrow> het new_list < het xs", "also"], ["proof (state)\nthis:\n  het new_list \\<le> length (list_neq (remove1 \\<alpha> xs) m)\n\ngoal (1 subgoal):\n 1. b \\<noteq> m \\<Longrightarrow> het new_list < het xs", "from \\<alpha>_mem \\<alpha>_ne_m xsne"], ["proof (chain)\npicking this:\n  \\<alpha> \\<in> set xs\n  \\<alpha> \\<noteq> m\n  xs \\<noteq> []", "have \"\\<dots> < length (list_neq xs m)\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<in> set xs\n  \\<alpha> \\<noteq> m\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. length (list_neq (remove1 \\<alpha> xs) m) < length (list_neq xs m)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<alpha> \\<in> set xs; \\<alpha> \\<noteq> m;\n     xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> length (list_neq (remove1 \\<alpha> xs) m)\n                      < length (list_neq xs m)", "apply (rule list_neq_remove1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<alpha> \\<in> set xs; \\<alpha> \\<noteq> m;\n     xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<alpha> \\<noteq> m \\<and> \\<alpha> \\<in> set xs", "by simp"], ["proof (state)\nthis:\n  length (list_neq (remove1 \\<alpha> xs) m) < length (list_neq xs m)\n\ngoal (1 subgoal):\n 1. b \\<noteq> m \\<Longrightarrow> het new_list < het xs", "also"], ["proof (state)\nthis:\n  length (list_neq (remove1 \\<alpha> xs) m) < length (list_neq xs m)\n\ngoal (1 subgoal):\n 1. b \\<noteq> m \\<Longrightarrow> het new_list < het xs", "with m het_def"], ["proof (chain)\npicking this:\n  m \\<equiv> mean xs\n  het ?l = length (list_neq ?l (mean ?l))\n  length (list_neq (remove1 \\<alpha> xs) m) < length (list_neq xs m)", "have \"\\<dots> = het xs\""], ["proof (prove)\nusing this:\n  m \\<equiv> mean xs\n  het ?l = length (list_neq ?l (mean ?l))\n  length (list_neq (remove1 \\<alpha> xs) m) < length (list_neq xs m)\n\ngoal (1 subgoal):\n 1. length (list_neq xs m) = het xs", "by simp"], ["proof (state)\nthis:\n  length (list_neq xs m) = het xs\n\ngoal (1 subgoal):\n 1. b \\<noteq> m \\<Longrightarrow> het new_list < het xs", "finally"], ["proof (chain)\npicking this:\n  het new_list < het xs", "show \"het new_list < het xs\""], ["proof (prove)\nusing this:\n  het new_list < het xs\n\ngoal (1 subgoal):\n 1. het new_list < het xs", "."], ["proof (state)\nthis:\n  het new_list < het xs\n\ngoal:\nNo subgoals!", "qed\n\n      \\<comment> \\<open>thus thesis by existence of newlist\\<close>"], ["proof (state)\nthis:\n  het new_list < het xs\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "from \\<gamma>_eq_def lt_het gt_gmean eq_mean leq nl_pos"], ["proof (chain)\npicking this:\n  \\<gamma>_eq ?a =\n  (mean (fst ?a) = mean (snd ?a) \\<and> length (fst ?a) = length (snd ?a))\n  het new_list < het xs\n  gmean xs < gmean new_list\n  mean new_list = mean xs\n  length new_list = length xs\n  pos new_list", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<gamma>_eq ?a =\n  (mean (fst ?a) = mean (snd ?a) \\<and> length (fst ?a) = length (snd ?a))\n  het new_list < het xs\n  gmean xs < gmean new_list\n  mean new_list = mean xs\n  length new_list = length xs\n  pos new_list\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       gmean xs < gmean xs' \\<and>\n       \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'", "by auto"], ["proof (state)\nthis:\n  \\<exists>xs'.\n     gmean xs < gmean xs' \\<and>\n     \\<gamma>_eq (xs', xs) \\<and> het xs' < het xs \\<and> pos xs'\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Furthermore we show that for all non-homogeneous positive\ncollections there exists another collection that is\n$\\gamma$-equivalent, positive, has a greater geometric mean {\\em and}\nis homogeneous.\\<close>"], ["", "lemma existence_of_het0 [rule_format]:\n  shows \"\\<forall>x. p = het x \\<and> p > 0 \\<and> pos x \\<longrightarrow>\n  (\\<exists>y. gmean y > gmean x \\<and> \\<gamma>_eq (x,y) \\<and> het y = 0 \\<and> pos y)\"\n  (is \"?Q p\" is \"\\<forall>x. (?A x p \\<longrightarrow> ?S x)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       p = het x \\<and> 0 < p \\<and> pos x \\<longrightarrow>\n       (\\<exists>y.\n           gmean x < gmean y \\<and>\n           \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "proof (induct p rule: nat_less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          \\<forall>x.\n             m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n             (\\<exists>y.\n                 gmean x < gmean y \\<and>\n                 \\<gamma>_eq (x, y) \\<and>\n                 het y = 0 \\<and> pos y) \\<Longrightarrow>\n       \\<forall>x.\n          n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n          (\\<exists>y.\n              gmean x < gmean y \\<and>\n              \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          \\<forall>x.\n             m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n             (\\<exists>y.\n                 gmean x < gmean y \\<and>\n                 \\<gamma>_eq (x, y) \\<and>\n                 het y = 0 \\<and> pos y) \\<Longrightarrow>\n       \\<forall>x.\n          n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n          (\\<exists>y.\n              gmean x < gmean y \\<and>\n              \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "assume ind: \"\\<forall>m<n. ?Q m\""], ["proof (state)\nthis:\n  \\<forall>m<n.\n     \\<forall>x.\n        m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n        (\\<exists>y.\n            gmean x < gmean y \\<and>\n            \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          \\<forall>x.\n             m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n             (\\<exists>y.\n                 gmean x < gmean y \\<and>\n                 \\<gamma>_eq (x, y) \\<and>\n                 het y = 0 \\<and> pos y) \\<Longrightarrow>\n       \\<forall>x.\n          n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n          (\\<exists>y.\n              gmean x < gmean y \\<and>\n              \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "{"], ["proof (state)\nthis:\n  \\<forall>m<n.\n     \\<forall>x.\n        m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n        (\\<exists>y.\n            gmean x < gmean y \\<and>\n            \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          \\<forall>x.\n             m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n             (\\<exists>y.\n                 gmean x < gmean y \\<and>\n                 \\<gamma>_eq (x, y) \\<and>\n                 het y = 0 \\<and> pos y) \\<Longrightarrow>\n       \\<forall>x.\n          n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n          (\\<exists>y.\n              gmean x < gmean y \\<and>\n              \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          \\<forall>x.\n             m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n             (\\<exists>y.\n                 gmean x < gmean y \\<and>\n                 \\<gamma>_eq (x, y) \\<and>\n                 het y = 0 \\<and> pos y) \\<Longrightarrow>\n       \\<forall>x.\n          n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n          (\\<exists>y.\n              gmean x < gmean y \\<and>\n              \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "assume ass: \"?A x n\""], ["proof (state)\nthis:\n  n = het x \\<and> 0 < n \\<and> pos x\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          \\<forall>x.\n             m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n             (\\<exists>y.\n                 gmean x < gmean y \\<and>\n                 \\<gamma>_eq (x, y) \\<and>\n                 het y = 0 \\<and> pos y) \\<Longrightarrow>\n       \\<forall>x.\n          n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n          (\\<exists>y.\n              gmean x < gmean y \\<and>\n              \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "hence \"het x > 0\" and \"pos x\""], ["proof (prove)\nusing this:\n  n = het x \\<and> 0 < n \\<and> pos x\n\ngoal (1 subgoal):\n 1. 0 < het x &&& pos x", "by auto"], ["proof (state)\nthis:\n  0 < het x\n  pos x\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          \\<forall>x.\n             m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n             (\\<exists>y.\n                 gmean x < gmean y \\<and>\n                 \\<gamma>_eq (x, y) \\<and>\n                 het y = 0 \\<and> pos y) \\<Longrightarrow>\n       \\<forall>x.\n          n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n          (\\<exists>y.\n              gmean x < gmean y \\<and>\n              \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "with new_list_gt_gmean"], ["proof (chain)\npicking this:\n  \\<lbrakk>pos ?xs; 0 < het ?xs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>xs'.\n                       gmean ?xs < gmean xs' \\<and>\n                       \\<gamma>_eq (xs', ?xs) \\<and>\n                       het xs' < het ?xs \\<and> pos xs'\n  0 < het x\n  pos x", "have\n      \"\\<exists>y. gmean y > gmean x \\<and> \\<gamma>_eq (x,y) \\<and> het y < het x \\<and> pos y\""], ["proof (prove)\nusing this:\n  \\<lbrakk>pos ?xs; 0 < het ?xs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>xs'.\n                       gmean ?xs < gmean xs' \\<and>\n                       \\<gamma>_eq (xs', ?xs) \\<and>\n                       het xs' < het ?xs \\<and> pos xs'\n  0 < het x\n  pos x\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       gmean x < gmean y \\<and>\n       \\<gamma>_eq (x, y) \\<and> het y < het x \\<and> pos y", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs.\n                \\<lbrakk>pos xs; 0 < het xs\\<rbrakk>\n                \\<Longrightarrow> \\<exists>xs'.\n                                     gmean xs < gmean xs' \\<and>\n                                     \\<gamma>_eq (xs', xs) \\<and>\n                                     het xs' < het xs \\<and> pos xs';\n     0 < het x; pos x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         gmean x < gmean y \\<and>\n                         \\<gamma>_eq (x, y) \\<and>\n                         het y < het x \\<and> pos y", "apply (drule meta_spec [of _ x])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < het x; pos x;\n     \\<lbrakk>pos x; 0 < het x\\<rbrakk>\n     \\<Longrightarrow> \\<exists>xs'.\n                          gmean x < gmean xs' \\<and>\n                          \\<gamma>_eq (xs', x) \\<and>\n                          het xs' < het x \\<and> pos xs'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         gmean x < gmean y \\<and>\n                         \\<gamma>_eq (x, y) \\<and>\n                         het y < het x \\<and> pos y", "apply (drule meta_mp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < het x; pos x\\<rbrakk> \\<Longrightarrow> pos x\n 2. \\<lbrakk>0 < het x; pos x;\n     0 < het x \\<Longrightarrow>\n     \\<exists>xs'.\n        gmean x < gmean xs' \\<and>\n        \\<gamma>_eq (xs', x) \\<and> het xs' < het x \\<and> pos xs'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         gmean x < gmean y \\<and>\n                         \\<gamma>_eq (x, y) \\<and>\n                         het y < het x \\<and> pos y", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < het x; pos x;\n     0 < het x \\<Longrightarrow>\n     \\<exists>xs'.\n        gmean x < gmean xs' \\<and>\n        \\<gamma>_eq (xs', x) \\<and> het xs' < het x \\<and> pos xs'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         gmean x < gmean y \\<and>\n                         \\<gamma>_eq (x, y) \\<and>\n                         het y < het x \\<and> pos y", "apply (drule meta_mp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < het x; pos x\\<rbrakk> \\<Longrightarrow> 0 < het x\n 2. \\<lbrakk>0 < het x; pos x;\n     \\<exists>xs'.\n        gmean x < gmean xs' \\<and>\n        \\<gamma>_eq (xs', x) \\<and> het xs' < het x \\<and> pos xs'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         gmean x < gmean y \\<and>\n                         \\<gamma>_eq (x, y) \\<and>\n                         het y < het x \\<and> pos y", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < het x; pos x;\n     \\<exists>xs'.\n        gmean x < gmean xs' \\<and>\n        \\<gamma>_eq (xs', x) \\<and> het xs' < het x \\<and> pos xs'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         gmean x < gmean y \\<and>\n                         \\<gamma>_eq (x, y) \\<and>\n                         het y < het x \\<and> pos y", "apply (subst(asm) \\<gamma>_eq_sym)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < het x; pos x;\n     \\<exists>xs'.\n        gmean x < gmean xs' \\<and>\n        \\<gamma>_eq (x, xs') \\<and> het xs' < het x \\<and> pos xs'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         gmean x < gmean y \\<and>\n                         \\<gamma>_eq (x, y) \\<and>\n                         het y < het x \\<and> pos y", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>y.\n     gmean x < gmean y \\<and>\n     \\<gamma>_eq (x, y) \\<and> het y < het x \\<and> pos y\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          \\<forall>x.\n             m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n             (\\<exists>y.\n                 gmean x < gmean y \\<and>\n                 \\<gamma>_eq (x, y) \\<and>\n                 het y = 0 \\<and> pos y) \\<Longrightarrow>\n       \\<forall>x.\n          n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n          (\\<exists>y.\n              gmean x < gmean y \\<and>\n              \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "then"], ["proof (chain)\npicking this:\n  \\<exists>y.\n     gmean x < gmean y \\<and>\n     \\<gamma>_eq (x, y) \\<and> het y < het x \\<and> pos y", "obtain \\<beta> where\n      \\<beta>_def: \"gmean \\<beta> > gmean x \\<and> \\<gamma>_eq (x,\\<beta>) \\<and> het \\<beta> < het x \\<and> pos \\<beta>\""], ["proof (prove)\nusing this:\n  \\<exists>y.\n     gmean x < gmean y \\<and>\n     \\<gamma>_eq (x, y) \\<and> het y < het x \\<and> pos y\n\ngoal (1 subgoal):\n 1. (\\<And>\\<beta>.\n        gmean x < gmean \\<beta> \\<and>\n        \\<gamma>_eq (x, \\<beta>) \\<and>\n        het \\<beta> < het x \\<and> pos \\<beta> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  gmean x < gmean \\<beta> \\<and>\n  \\<gamma>_eq (x, \\<beta>) \\<and> het \\<beta> < het x \\<and> pos \\<beta>\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          \\<forall>x.\n             m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n             (\\<exists>y.\n                 gmean x < gmean y \\<and>\n                 \\<gamma>_eq (x, y) \\<and>\n                 het y = 0 \\<and> pos y) \\<Longrightarrow>\n       \\<forall>x.\n          n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n          (\\<exists>y.\n              gmean x < gmean y \\<and>\n              \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "then"], ["proof (chain)\npicking this:\n  gmean x < gmean \\<beta> \\<and>\n  \\<gamma>_eq (x, \\<beta>) \\<and> het \\<beta> < het x \\<and> pos \\<beta>", "obtain b where bdef: \"b = het \\<beta>\""], ["proof (prove)\nusing this:\n  gmean x < gmean \\<beta> \\<and>\n  \\<gamma>_eq (x, \\<beta>) \\<and> het \\<beta> < het x \\<and> pos \\<beta>\n\ngoal (1 subgoal):\n 1. (\\<And>b. b = het \\<beta> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  b = het \\<beta>\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          \\<forall>x.\n             m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n             (\\<exists>y.\n                 gmean x < gmean y \\<and>\n                 \\<gamma>_eq (x, y) \\<and>\n                 het y = 0 \\<and> pos y) \\<Longrightarrow>\n       \\<forall>x.\n          n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n          (\\<exists>y.\n              gmean x < gmean y \\<and>\n              \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "with ass \\<beta>_def"], ["proof (chain)\npicking this:\n  n = het x \\<and> 0 < n \\<and> pos x\n  gmean x < gmean \\<beta> \\<and>\n  \\<gamma>_eq (x, \\<beta>) \\<and> het \\<beta> < het x \\<and> pos \\<beta>\n  b = het \\<beta>", "have \"b < n\""], ["proof (prove)\nusing this:\n  n = het x \\<and> 0 < n \\<and> pos x\n  gmean x < gmean \\<beta> \\<and>\n  \\<gamma>_eq (x, \\<beta>) \\<and> het \\<beta> < het x \\<and> pos \\<beta>\n  b = het \\<beta>\n\ngoal (1 subgoal):\n 1. b < n", "by auto"], ["proof (state)\nthis:\n  b < n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          \\<forall>x.\n             m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n             (\\<exists>y.\n                 gmean x < gmean y \\<and>\n                 \\<gamma>_eq (x, y) \\<and>\n                 het y = 0 \\<and> pos y) \\<Longrightarrow>\n       \\<forall>x.\n          n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n          (\\<exists>y.\n              gmean x < gmean y \\<and>\n              \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "with ind"], ["proof (chain)\npicking this:\n  \\<forall>m<n.\n     \\<forall>x.\n        m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n        (\\<exists>y.\n            gmean x < gmean y \\<and>\n            \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)\n  b < n", "have \"?Q b\""], ["proof (prove)\nusing this:\n  \\<forall>m<n.\n     \\<forall>x.\n        m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n        (\\<exists>y.\n            gmean x < gmean y \\<and>\n            \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)\n  b < n\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       b = het x \\<and> 0 < b \\<and> pos x \\<longrightarrow>\n       (\\<exists>y.\n           gmean x < gmean y \\<and>\n           \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "by simp"], ["proof (state)\nthis:\n  \\<forall>x.\n     b = het x \\<and> 0 < b \\<and> pos x \\<longrightarrow>\n     (\\<exists>y.\n         gmean x < gmean y \\<and>\n         \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          \\<forall>x.\n             m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n             (\\<exists>y.\n                 gmean x < gmean y \\<and>\n                 \\<gamma>_eq (x, y) \\<and>\n                 het y = 0 \\<and> pos y) \\<Longrightarrow>\n       \\<forall>x.\n          n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n          (\\<exists>y.\n              gmean x < gmean y \\<and>\n              \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "with \\<beta>_def"], ["proof (chain)\npicking this:\n  gmean x < gmean \\<beta> \\<and>\n  \\<gamma>_eq (x, \\<beta>) \\<and> het \\<beta> < het x \\<and> pos \\<beta>\n  \\<forall>x.\n     b = het x \\<and> 0 < b \\<and> pos x \\<longrightarrow>\n     (\\<exists>y.\n         gmean x < gmean y \\<and>\n         \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "have\n      ind2: \"b = het \\<beta> \\<and> 0 < b \\<and> pos \\<beta> \\<longrightarrow>\n      (\\<exists>y. gmean \\<beta> < gmean y \\<and> \\<gamma>_eq (\\<beta>, y) \\<and> het y = 0 \\<and> pos y)\""], ["proof (prove)\nusing this:\n  gmean x < gmean \\<beta> \\<and>\n  \\<gamma>_eq (x, \\<beta>) \\<and> het \\<beta> < het x \\<and> pos \\<beta>\n  \\<forall>x.\n     b = het x \\<and> 0 < b \\<and> pos x \\<longrightarrow>\n     (\\<exists>y.\n         gmean x < gmean y \\<and>\n         \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)\n\ngoal (1 subgoal):\n 1. b = het \\<beta> \\<and> 0 < b \\<and> pos \\<beta> \\<longrightarrow>\n    (\\<exists>y.\n        gmean \\<beta> < gmean y \\<and>\n        \\<gamma>_eq (\\<beta>, y) \\<and> het y = 0 \\<and> pos y)", "by simp"], ["proof (state)\nthis:\n  b = het \\<beta> \\<and> 0 < b \\<and> pos \\<beta> \\<longrightarrow>\n  (\\<exists>y.\n      gmean \\<beta> < gmean y \\<and>\n      \\<gamma>_eq (\\<beta>, y) \\<and> het y = 0 \\<and> pos y)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          \\<forall>x.\n             m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n             (\\<exists>y.\n                 gmean x < gmean y \\<and>\n                 \\<gamma>_eq (x, y) \\<and>\n                 het y = 0 \\<and> pos y) \\<Longrightarrow>\n       \\<forall>x.\n          n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n          (\\<exists>y.\n              gmean x < gmean y \\<and>\n              \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "{"], ["proof (state)\nthis:\n  b = het \\<beta> \\<and> 0 < b \\<and> pos \\<beta> \\<longrightarrow>\n  (\\<exists>y.\n      gmean \\<beta> < gmean y \\<and>\n      \\<gamma>_eq (\\<beta>, y) \\<and> het y = 0 \\<and> pos y)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          \\<forall>x.\n             m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n             (\\<exists>y.\n                 gmean x < gmean y \\<and>\n                 \\<gamma>_eq (x, y) \\<and>\n                 het y = 0 \\<and> pos y) \\<Longrightarrow>\n       \\<forall>x.\n          n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n          (\\<exists>y.\n              gmean x < gmean y \\<and>\n              \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "assume \"\\<not>(0<b)\""], ["proof (state)\nthis:\n  \\<not> 0 < b\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          \\<forall>x.\n             m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n             (\\<exists>y.\n                 gmean x < gmean y \\<and>\n                 \\<gamma>_eq (x, y) \\<and>\n                 het y = 0 \\<and> pos y) \\<Longrightarrow>\n       \\<forall>x.\n          n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n          (\\<exists>y.\n              gmean x < gmean y \\<and>\n              \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "hence \"b=0\""], ["proof (prove)\nusing this:\n  \\<not> 0 < b\n\ngoal (1 subgoal):\n 1. b = 0", "by simp"], ["proof (state)\nthis:\n  b = 0\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          \\<forall>x.\n             m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n             (\\<exists>y.\n                 gmean x < gmean y \\<and>\n                 \\<gamma>_eq (x, y) \\<and>\n                 het y = 0 \\<and> pos y) \\<Longrightarrow>\n       \\<forall>x.\n          n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n          (\\<exists>y.\n              gmean x < gmean y \\<and>\n              \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "with bdef"], ["proof (chain)\npicking this:\n  b = het \\<beta>\n  b = 0", "have \"het \\<beta> = 0\""], ["proof (prove)\nusing this:\n  b = het \\<beta>\n  b = 0\n\ngoal (1 subgoal):\n 1. het \\<beta> = 0", "by simp"], ["proof (state)\nthis:\n  het \\<beta> = 0\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          \\<forall>x.\n             m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n             (\\<exists>y.\n                 gmean x < gmean y \\<and>\n                 \\<gamma>_eq (x, y) \\<and>\n                 het y = 0 \\<and> pos y) \\<Longrightarrow>\n       \\<forall>x.\n          n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n          (\\<exists>y.\n              gmean x < gmean y \\<and>\n              \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "with \\<beta>_def"], ["proof (chain)\npicking this:\n  gmean x < gmean \\<beta> \\<and>\n  \\<gamma>_eq (x, \\<beta>) \\<and> het \\<beta> < het x \\<and> pos \\<beta>\n  het \\<beta> = 0", "have \"?S x\""], ["proof (prove)\nusing this:\n  gmean x < gmean \\<beta> \\<and>\n  \\<gamma>_eq (x, \\<beta>) \\<and> het \\<beta> < het x \\<and> pos \\<beta>\n  het \\<beta> = 0\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       gmean x < gmean y \\<and>\n       \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y", "by auto"], ["proof (state)\nthis:\n  \\<exists>y.\n     gmean x < gmean y \\<and>\n     \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          \\<forall>x.\n             m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n             (\\<exists>y.\n                 gmean x < gmean y \\<and>\n                 \\<gamma>_eq (x, y) \\<and>\n                 het y = 0 \\<and> pos y) \\<Longrightarrow>\n       \\<forall>x.\n          n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n          (\\<exists>y.\n              gmean x < gmean y \\<and>\n              \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "}"], ["proof (state)\nthis:\n  \\<not> 0 < b \\<Longrightarrow>\n  \\<exists>y.\n     gmean x < gmean y \\<and>\n     \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          \\<forall>x.\n             m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n             (\\<exists>y.\n                 gmean x < gmean y \\<and>\n                 \\<gamma>_eq (x, y) \\<and>\n                 het y = 0 \\<and> pos y) \\<Longrightarrow>\n       \\<forall>x.\n          n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n          (\\<exists>y.\n              gmean x < gmean y \\<and>\n              \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "moreover"], ["proof (state)\nthis:\n  \\<not> 0 < b \\<Longrightarrow>\n  \\<exists>y.\n     gmean x < gmean y \\<and>\n     \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          \\<forall>x.\n             m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n             (\\<exists>y.\n                 gmean x < gmean y \\<and>\n                 \\<gamma>_eq (x, y) \\<and>\n                 het y = 0 \\<and> pos y) \\<Longrightarrow>\n       \\<forall>x.\n          n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n          (\\<exists>y.\n              gmean x < gmean y \\<and>\n              \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "{"], ["proof (state)\nthis:\n  \\<not> 0 < b \\<Longrightarrow>\n  \\<exists>y.\n     gmean x < gmean y \\<and>\n     \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          \\<forall>x.\n             m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n             (\\<exists>y.\n                 gmean x < gmean y \\<and>\n                 \\<gamma>_eq (x, y) \\<and>\n                 het y = 0 \\<and> pos y) \\<Longrightarrow>\n       \\<forall>x.\n          n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n          (\\<exists>y.\n              gmean x < gmean y \\<and>\n              \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "assume \"0 < b\""], ["proof (state)\nthis:\n  0 < b\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          \\<forall>x.\n             m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n             (\\<exists>y.\n                 gmean x < gmean y \\<and>\n                 \\<gamma>_eq (x, y) \\<and>\n                 het y = 0 \\<and> pos y) \\<Longrightarrow>\n       \\<forall>x.\n          n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n          (\\<exists>y.\n              gmean x < gmean y \\<and>\n              \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "with bdef ind2 \\<beta>_def"], ["proof (chain)\npicking this:\n  b = het \\<beta>\n  b = het \\<beta> \\<and> 0 < b \\<and> pos \\<beta> \\<longrightarrow>\n  (\\<exists>y.\n      gmean \\<beta> < gmean y \\<and>\n      \\<gamma>_eq (\\<beta>, y) \\<and> het y = 0 \\<and> pos y)\n  gmean x < gmean \\<beta> \\<and>\n  \\<gamma>_eq (x, \\<beta>) \\<and> het \\<beta> < het x \\<and> pos \\<beta>\n  0 < b", "have \"?S \\<beta>\""], ["proof (prove)\nusing this:\n  b = het \\<beta>\n  b = het \\<beta> \\<and> 0 < b \\<and> pos \\<beta> \\<longrightarrow>\n  (\\<exists>y.\n      gmean \\<beta> < gmean y \\<and>\n      \\<gamma>_eq (\\<beta>, y) \\<and> het y = 0 \\<and> pos y)\n  gmean x < gmean \\<beta> \\<and>\n  \\<gamma>_eq (x, \\<beta>) \\<and> het \\<beta> < het x \\<and> pos \\<beta>\n  0 < b\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       gmean \\<beta> < gmean y \\<and>\n       \\<gamma>_eq (\\<beta>, y) \\<and> het y = 0 \\<and> pos y", "by simp"], ["proof (state)\nthis:\n  \\<exists>y.\n     gmean \\<beta> < gmean y \\<and>\n     \\<gamma>_eq (\\<beta>, y) \\<and> het y = 0 \\<and> pos y\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          \\<forall>x.\n             m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n             (\\<exists>y.\n                 gmean x < gmean y \\<and>\n                 \\<gamma>_eq (x, y) \\<and>\n                 het y = 0 \\<and> pos y) \\<Longrightarrow>\n       \\<forall>x.\n          n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n          (\\<exists>y.\n              gmean x < gmean y \\<and>\n              \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "then"], ["proof (chain)\npicking this:\n  \\<exists>y.\n     gmean \\<beta> < gmean y \\<and>\n     \\<gamma>_eq (\\<beta>, y) \\<and> het y = 0 \\<and> pos y", "obtain \\<gamma> where\n        \"gmean \\<beta> < gmean \\<gamma> \\<and> \\<gamma>_eq (\\<beta>, \\<gamma>) \\<and> het \\<gamma> = 0 \\<and> pos \\<gamma>\""], ["proof (prove)\nusing this:\n  \\<exists>y.\n     gmean \\<beta> < gmean y \\<and>\n     \\<gamma>_eq (\\<beta>, y) \\<and> het y = 0 \\<and> pos y\n\ngoal (1 subgoal):\n 1. (\\<And>\\<gamma>.\n        gmean \\<beta> < gmean \\<gamma> \\<and>\n        \\<gamma>_eq (\\<beta>, \\<gamma>) \\<and>\n        het \\<gamma> = 0 \\<and> pos \\<gamma> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  gmean \\<beta> < gmean \\<gamma> \\<and>\n  \\<gamma>_eq (\\<beta>, \\<gamma>) \\<and>\n  het \\<gamma> = 0 \\<and> pos \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          \\<forall>x.\n             m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n             (\\<exists>y.\n                 gmean x < gmean y \\<and>\n                 \\<gamma>_eq (x, y) \\<and>\n                 het y = 0 \\<and> pos y) \\<Longrightarrow>\n       \\<forall>x.\n          n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n          (\\<exists>y.\n              gmean x < gmean y \\<and>\n              \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "with \\<beta>_def"], ["proof (chain)\npicking this:\n  gmean x < gmean \\<beta> \\<and>\n  \\<gamma>_eq (x, \\<beta>) \\<and> het \\<beta> < het x \\<and> pos \\<beta>\n  gmean \\<beta> < gmean \\<gamma> \\<and>\n  \\<gamma>_eq (\\<beta>, \\<gamma>) \\<and>\n  het \\<gamma> = 0 \\<and> pos \\<gamma>", "have \"gmean x < gmean \\<gamma> \\<and> \\<gamma>_eq (x,\\<gamma>) \\<and> het \\<gamma> = 0 \\<and> pos \\<gamma>\""], ["proof (prove)\nusing this:\n  gmean x < gmean \\<beta> \\<and>\n  \\<gamma>_eq (x, \\<beta>) \\<and> het \\<beta> < het x \\<and> pos \\<beta>\n  gmean \\<beta> < gmean \\<gamma> \\<and>\n  \\<gamma>_eq (\\<beta>, \\<gamma>) \\<and>\n  het \\<gamma> = 0 \\<and> pos \\<gamma>\n\ngoal (1 subgoal):\n 1. gmean x < gmean \\<gamma> \\<and>\n    \\<gamma>_eq (x, \\<gamma>) \\<and> het \\<gamma> = 0 \\<and> pos \\<gamma>", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>gmean x < gmean \\<beta>; gmean \\<beta> < gmean \\<gamma>;\n     \\<gamma>_eq (x, \\<beta>); \\<gamma>_eq (\\<beta>, \\<gamma>);\n     het \\<beta> < het x; pos \\<beta>; het \\<gamma> = 0;\n     pos \\<gamma>\\<rbrakk>\n    \\<Longrightarrow> \\<gamma>_eq (x, \\<gamma>)", "apply (rule \\<gamma>_eq_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>gmean x < gmean \\<beta>; gmean \\<beta> < gmean \\<gamma>;\n     \\<gamma>_eq (x, \\<beta>); \\<gamma>_eq (\\<beta>, \\<gamma>);\n     het \\<beta> < het x; pos \\<beta>; het \\<gamma> = 0;\n     pos \\<gamma>\\<rbrakk>\n    \\<Longrightarrow> \\<gamma>_eq (x, ?y18)\n 2. \\<lbrakk>gmean x < gmean \\<beta>; gmean \\<beta> < gmean \\<gamma>;\n     \\<gamma>_eq (x, \\<beta>); \\<gamma>_eq (\\<beta>, \\<gamma>);\n     het \\<beta> < het x; pos \\<beta>; het \\<gamma> = 0;\n     pos \\<gamma>\\<rbrakk>\n    \\<Longrightarrow> \\<gamma>_eq (?y18, \\<gamma>)", "by auto"], ["proof (state)\nthis:\n  gmean x < gmean \\<gamma> \\<and>\n  \\<gamma>_eq (x, \\<gamma>) \\<and> het \\<gamma> = 0 \\<and> pos \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          \\<forall>x.\n             m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n             (\\<exists>y.\n                 gmean x < gmean y \\<and>\n                 \\<gamma>_eq (x, y) \\<and>\n                 het y = 0 \\<and> pos y) \\<Longrightarrow>\n       \\<forall>x.\n          n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n          (\\<exists>y.\n              gmean x < gmean y \\<and>\n              \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "hence \"?S x\""], ["proof (prove)\nusing this:\n  gmean x < gmean \\<gamma> \\<and>\n  \\<gamma>_eq (x, \\<gamma>) \\<and> het \\<gamma> = 0 \\<and> pos \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       gmean x < gmean y \\<and>\n       \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y", "by auto"], ["proof (state)\nthis:\n  \\<exists>y.\n     gmean x < gmean y \\<and>\n     \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          \\<forall>x.\n             m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n             (\\<exists>y.\n                 gmean x < gmean y \\<and>\n                 \\<gamma>_eq (x, y) \\<and>\n                 het y = 0 \\<and> pos y) \\<Longrightarrow>\n       \\<forall>x.\n          n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n          (\\<exists>y.\n              gmean x < gmean y \\<and>\n              \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "}"], ["proof (state)\nthis:\n  0 < b \\<Longrightarrow>\n  \\<exists>y.\n     gmean x < gmean y \\<and>\n     \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          \\<forall>x.\n             m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n             (\\<exists>y.\n                 gmean x < gmean y \\<and>\n                 \\<gamma>_eq (x, y) \\<and>\n                 het y = 0 \\<and> pos y) \\<Longrightarrow>\n       \\<forall>x.\n          n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n          (\\<exists>y.\n              gmean x < gmean y \\<and>\n              \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> 0 < b \\<Longrightarrow>\n  \\<exists>y.\n     gmean x < gmean y \\<and>\n     \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y\n  0 < b \\<Longrightarrow>\n  \\<exists>y.\n     gmean x < gmean y \\<and>\n     \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y", "have \"?S x\""], ["proof (prove)\nusing this:\n  \\<not> 0 < b \\<Longrightarrow>\n  \\<exists>y.\n     gmean x < gmean y \\<and>\n     \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y\n  0 < b \\<Longrightarrow>\n  \\<exists>y.\n     gmean x < gmean y \\<and>\n     \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       gmean x < gmean y \\<and>\n       \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y", "by auto"], ["proof (state)\nthis:\n  \\<exists>y.\n     gmean x < gmean y \\<and>\n     \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          \\<forall>x.\n             m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n             (\\<exists>y.\n                 gmean x < gmean y \\<and>\n                 \\<gamma>_eq (x, y) \\<and>\n                 het y = 0 \\<and> pos y) \\<Longrightarrow>\n       \\<forall>x.\n          n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n          (\\<exists>y.\n              gmean x < gmean y \\<and>\n              \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "}"], ["proof (state)\nthis:\n  n = het ?x2 \\<and> 0 < n \\<and> pos ?x2 \\<Longrightarrow>\n  \\<exists>y.\n     gmean ?x2 < gmean y \\<and>\n     \\<gamma>_eq (?x2, y) \\<and> het y = 0 \\<and> pos y\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          \\<forall>x.\n             m = het x \\<and> 0 < m \\<and> pos x \\<longrightarrow>\n             (\\<exists>y.\n                 gmean x < gmean y \\<and>\n                 \\<gamma>_eq (x, y) \\<and>\n                 het y = 0 \\<and> pos y) \\<Longrightarrow>\n       \\<forall>x.\n          n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n          (\\<exists>y.\n              gmean x < gmean y \\<and>\n              \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "thus \"?Q n\""], ["proof (prove)\nusing this:\n  n = het ?x2 \\<and> 0 < n \\<and> pos ?x2 \\<Longrightarrow>\n  \\<exists>y.\n     gmean ?x2 < gmean y \\<and>\n     \\<gamma>_eq (?x2, y) \\<and> het y = 0 \\<and> pos y\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n       (\\<exists>y.\n           gmean x < gmean y \\<and>\n           \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)", "by simp"], ["proof (state)\nthis:\n  \\<forall>x.\n     n = het x \\<and> 0 < n \\<and> pos x \\<longrightarrow>\n     (\\<exists>y.\n         gmean x < gmean y \\<and>\n         \\<gamma>_eq (x, y) \\<and> het y = 0 \\<and> pos y)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Cauchy's Mean Theorem\\<close>"], ["", "text \\<open>We now present the final proof of the theorem. For any\npositive collection we show that its geometric mean is less than or\nequal to its arithmetic mean.\\<close>"], ["", "theorem CauchysMeanTheorem:\n  fixes z::\"real list\"\n  assumes \"pos z\"\n  shows \"gmean z \\<le> mean z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gmean z \\<le> mean z", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. gmean z \\<le> mean z", "from \\<open>pos z\\<close>"], ["proof (chain)\npicking this:\n  pos z", "have zne: \"z\\<noteq>[]\""], ["proof (prove)\nusing this:\n  pos z\n\ngoal (1 subgoal):\n 1. z \\<noteq> []", "by (rule pos_imp_ne)"], ["proof (state)\nthis:\n  z \\<noteq> []\n\ngoal (1 subgoal):\n 1. gmean z \\<le> mean z", "show \"gmean z \\<le> mean z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gmean z \\<le> mean z", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> gmean z \\<le> mean z\n 2. \\<not> ?P \\<Longrightarrow> gmean z \\<le> mean z", "assume \"het z = 0\""], ["proof (state)\nthis:\n  het z = 0\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> gmean z \\<le> mean z\n 2. \\<not> ?P \\<Longrightarrow> gmean z \\<le> mean z", "with \\<open>pos z\\<close> zne het_base"], ["proof (chain)\npicking this:\n  pos z\n  z \\<noteq> []\n  pos ?x \\<and> het ?x = 0 \\<Longrightarrow> gmean ?x = mean ?x\n  het z = 0", "have \"gmean z = mean z\""], ["proof (prove)\nusing this:\n  pos z\n  z \\<noteq> []\n  pos ?x \\<and> het ?x = 0 \\<Longrightarrow> gmean ?x = mean ?x\n  het z = 0\n\ngoal (1 subgoal):\n 1. gmean z = mean z", "by simp"], ["proof (state)\nthis:\n  gmean z = mean z\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> gmean z \\<le> mean z\n 2. \\<not> ?P \\<Longrightarrow> gmean z \\<le> mean z", "thus ?thesis"], ["proof (prove)\nusing this:\n  gmean z = mean z\n\ngoal (1 subgoal):\n 1. gmean z \\<le> mean z", "by simp"], ["proof (state)\nthis:\n  gmean z \\<le> mean z\n\ngoal (1 subgoal):\n 1. het z \\<noteq> 0 \\<Longrightarrow> gmean z \\<le> mean z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. het z \\<noteq> 0 \\<Longrightarrow> gmean z \\<le> mean z", "assume \"het z \\<noteq> 0\""], ["proof (state)\nthis:\n  het z \\<noteq> 0\n\ngoal (1 subgoal):\n 1. het z \\<noteq> 0 \\<Longrightarrow> gmean z \\<le> mean z", "hence \"het z > 0\""], ["proof (prove)\nusing this:\n  het z \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < het z", "by simp"], ["proof (state)\nthis:\n  0 < het z\n\ngoal (1 subgoal):\n 1. het z \\<noteq> 0 \\<Longrightarrow> gmean z \\<le> mean z", "moreover"], ["proof (state)\nthis:\n  0 < het z\n\ngoal (1 subgoal):\n 1. het z \\<noteq> 0 \\<Longrightarrow> gmean z \\<le> mean z", "obtain k where \"k = het z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k. k = het z \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by simp"], ["proof (state)\nthis:\n  k = het z\n\ngoal (1 subgoal):\n 1. het z \\<noteq> 0 \\<Longrightarrow> gmean z \\<le> mean z", "moreover"], ["proof (state)\nthis:\n  k = het z\n\ngoal (1 subgoal):\n 1. het z \\<noteq> 0 \\<Longrightarrow> gmean z \\<le> mean z", "with calculation \\<open>pos z\\<close> existence_of_het0"], ["proof (chain)\npicking this:\n  0 < het z\n  k = het z\n  pos z\n  ?p = het ?x \\<and> 0 < ?p \\<and> pos ?x \\<Longrightarrow>\n  \\<exists>y.\n     gmean ?x < gmean y \\<and>\n     \\<gamma>_eq (?x, y) \\<and> het y = 0 \\<and> pos y\n  k = het z", "have\n      \"\\<exists>y. gmean y > gmean z \\<and> \\<gamma>_eq (z,y) \\<and> het y = 0 \\<and> pos y\""], ["proof (prove)\nusing this:\n  0 < het z\n  k = het z\n  pos z\n  ?p = het ?x \\<and> 0 < ?p \\<and> pos ?x \\<Longrightarrow>\n  \\<exists>y.\n     gmean ?x < gmean y \\<and>\n     \\<gamma>_eq (?x, y) \\<and> het y = 0 \\<and> pos y\n  k = het z\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       gmean z < gmean y \\<and>\n       \\<gamma>_eq (z, y) \\<and> het y = 0 \\<and> pos y", "by auto"], ["proof (state)\nthis:\n  \\<exists>y.\n     gmean z < gmean y \\<and>\n     \\<gamma>_eq (z, y) \\<and> het y = 0 \\<and> pos y\n\ngoal (1 subgoal):\n 1. het z \\<noteq> 0 \\<Longrightarrow> gmean z \\<le> mean z", "then"], ["proof (chain)\npicking this:\n  \\<exists>y.\n     gmean z < gmean y \\<and>\n     \\<gamma>_eq (z, y) \\<and> het y = 0 \\<and> pos y", "obtain \\<alpha> where\n      \"gmean \\<alpha> > gmean z \\<and> \\<gamma>_eq (z,\\<alpha>) \\<and> het \\<alpha> = 0 \\<and> pos \\<alpha>\""], ["proof (prove)\nusing this:\n  \\<exists>y.\n     gmean z < gmean y \\<and>\n     \\<gamma>_eq (z, y) \\<and> het y = 0 \\<and> pos y\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>.\n        gmean z < gmean \\<alpha> \\<and>\n        \\<gamma>_eq (z, \\<alpha>) \\<and>\n        het \\<alpha> = 0 \\<and> pos \\<alpha> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  gmean z < gmean \\<alpha> \\<and>\n  \\<gamma>_eq (z, \\<alpha>) \\<and> het \\<alpha> = 0 \\<and> pos \\<alpha>\n\ngoal (1 subgoal):\n 1. het z \\<noteq> 0 \\<Longrightarrow> gmean z \\<le> mean z", "with het_base \\<gamma>_eq_def pos_imp_ne"], ["proof (chain)\npicking this:\n  pos ?x \\<and> het ?x = 0 \\<Longrightarrow> gmean ?x = mean ?x\n  \\<gamma>_eq ?a =\n  (mean (fst ?a) = mean (snd ?a) \\<and> length (fst ?a) = length (snd ?a))\n  pos ?xs \\<Longrightarrow> ?xs \\<noteq> []\n  gmean z < gmean \\<alpha> \\<and>\n  \\<gamma>_eq (z, \\<alpha>) \\<and> het \\<alpha> = 0 \\<and> pos \\<alpha>", "have\n      \"mean z = mean \\<alpha>\" and\n      \"gmean \\<alpha> > gmean z\" and\n      \"gmean \\<alpha> = mean \\<alpha>\""], ["proof (prove)\nusing this:\n  pos ?x \\<and> het ?x = 0 \\<Longrightarrow> gmean ?x = mean ?x\n  \\<gamma>_eq ?a =\n  (mean (fst ?a) = mean (snd ?a) \\<and> length (fst ?a) = length (snd ?a))\n  pos ?xs \\<Longrightarrow> ?xs \\<noteq> []\n  gmean z < gmean \\<alpha> \\<and>\n  \\<gamma>_eq (z, \\<alpha>) \\<and> het \\<alpha> = 0 \\<and> pos \\<alpha>\n\ngoal (1 subgoal):\n 1. mean z = mean \\<alpha> &&&\n    gmean z < gmean \\<alpha> &&& gmean \\<alpha> = mean \\<alpha>", "by auto"], ["proof (state)\nthis:\n  mean z = mean \\<alpha>\n  gmean z < gmean \\<alpha>\n  gmean \\<alpha> = mean \\<alpha>\n\ngoal (1 subgoal):\n 1. het z \\<noteq> 0 \\<Longrightarrow> gmean z \\<le> mean z", "hence \"gmean z < mean z\""], ["proof (prove)\nusing this:\n  mean z = mean \\<alpha>\n  gmean z < gmean \\<alpha>\n  gmean \\<alpha> = mean \\<alpha>\n\ngoal (1 subgoal):\n 1. gmean z < mean z", "by simp"], ["proof (state)\nthis:\n  gmean z < mean z\n\ngoal (1 subgoal):\n 1. het z \\<noteq> 0 \\<Longrightarrow> gmean z \\<le> mean z", "thus ?thesis"], ["proof (prove)\nusing this:\n  gmean z < mean z\n\ngoal (1 subgoal):\n 1. gmean z \\<le> mean z", "by simp"], ["proof (state)\nthis:\n  gmean z \\<le> mean z\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  gmean z \\<le> mean z\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>In the equality version we prove that the geometric mean\n  is identical to the arithmetic mean iff the collection is \n  homogeneous.\\<close>"], ["", "theorem CauchysMeanTheorem_Eq:\n  fixes z::\"real list\"\n  assumes \"pos z\"\n  shows \"gmean z = mean z \\<longleftrightarrow> het z = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (gmean z = mean z) = (het z = 0)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. gmean z = mean z \\<Longrightarrow> het z = 0\n 2. het z = 0 \\<Longrightarrow> gmean z = mean z", "assume \"het z = 0\""], ["proof (state)\nthis:\n  het z = 0\n\ngoal (2 subgoals):\n 1. gmean z = mean z \\<Longrightarrow> het z = 0\n 2. het z = 0 \\<Longrightarrow> gmean z = mean z", "with het_base[of z] \\<open>pos z\\<close>"], ["proof (chain)\npicking this:\n  pos z \\<and> het z = 0 \\<Longrightarrow> gmean z = mean z\n  pos z\n  het z = 0", "show \"gmean z = mean z\""], ["proof (prove)\nusing this:\n  pos z \\<and> het z = 0 \\<Longrightarrow> gmean z = mean z\n  pos z\n  het z = 0\n\ngoal (1 subgoal):\n 1. gmean z = mean z", "by auto"], ["proof (state)\nthis:\n  gmean z = mean z\n\ngoal (1 subgoal):\n 1. gmean z = mean z \\<Longrightarrow> het z = 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. gmean z = mean z \\<Longrightarrow> het z = 0", "assume eq: \"gmean z = mean z\""], ["proof (state)\nthis:\n  gmean z = mean z\n\ngoal (1 subgoal):\n 1. gmean z = mean z \\<Longrightarrow> het z = 0", "show \"het z = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. het z = 0", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. het z \\<noteq> 0 \\<Longrightarrow> False", "assume \"het z \\<noteq> 0\""], ["proof (state)\nthis:\n  het z \\<noteq> 0\n\ngoal (1 subgoal):\n 1. het z \\<noteq> 0 \\<Longrightarrow> False", "hence \"het z > 0\""], ["proof (prove)\nusing this:\n  het z \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < het z", "by auto"], ["proof (state)\nthis:\n  0 < het z\n\ngoal (1 subgoal):\n 1. het z \\<noteq> 0 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  0 < het z\n\ngoal (1 subgoal):\n 1. het z \\<noteq> 0 \\<Longrightarrow> False", "obtain k where \"k = het z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k. k = het z \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by simp"], ["proof (state)\nthis:\n  k = het z\n\ngoal (1 subgoal):\n 1. het z \\<noteq> 0 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  k = het z\n\ngoal (1 subgoal):\n 1. het z \\<noteq> 0 \\<Longrightarrow> False", "with calculation \\<open>pos z\\<close> existence_of_het0"], ["proof (chain)\npicking this:\n  0 < het z\n  k = het z\n  pos z\n  ?p = het ?x \\<and> 0 < ?p \\<and> pos ?x \\<Longrightarrow>\n  \\<exists>y.\n     gmean ?x < gmean y \\<and>\n     \\<gamma>_eq (?x, y) \\<and> het y = 0 \\<and> pos y\n  k = het z", "have\n      \"\\<exists>y. gmean y > gmean z \\<and> \\<gamma>_eq (z,y) \\<and> het y = 0 \\<and> pos y\""], ["proof (prove)\nusing this:\n  0 < het z\n  k = het z\n  pos z\n  ?p = het ?x \\<and> 0 < ?p \\<and> pos ?x \\<Longrightarrow>\n  \\<exists>y.\n     gmean ?x < gmean y \\<and>\n     \\<gamma>_eq (?x, y) \\<and> het y = 0 \\<and> pos y\n  k = het z\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       gmean z < gmean y \\<and>\n       \\<gamma>_eq (z, y) \\<and> het y = 0 \\<and> pos y", "by auto"], ["proof (state)\nthis:\n  \\<exists>y.\n     gmean z < gmean y \\<and>\n     \\<gamma>_eq (z, y) \\<and> het y = 0 \\<and> pos y\n\ngoal (1 subgoal):\n 1. het z \\<noteq> 0 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>y.\n     gmean z < gmean y \\<and>\n     \\<gamma>_eq (z, y) \\<and> het y = 0 \\<and> pos y", "obtain \\<alpha> where\n      \"gmean \\<alpha> > gmean z \\<and> \\<gamma>_eq (z,\\<alpha>) \\<and> het \\<alpha> = 0 \\<and> pos \\<alpha>\""], ["proof (prove)\nusing this:\n  \\<exists>y.\n     gmean z < gmean y \\<and>\n     \\<gamma>_eq (z, y) \\<and> het y = 0 \\<and> pos y\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>.\n        gmean z < gmean \\<alpha> \\<and>\n        \\<gamma>_eq (z, \\<alpha>) \\<and>\n        het \\<alpha> = 0 \\<and> pos \\<alpha> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  gmean z < gmean \\<alpha> \\<and>\n  \\<gamma>_eq (z, \\<alpha>) \\<and> het \\<alpha> = 0 \\<and> pos \\<alpha>\n\ngoal (1 subgoal):\n 1. het z \\<noteq> 0 \\<Longrightarrow> False", "with het_base \\<gamma>_eq_def pos_imp_ne"], ["proof (chain)\npicking this:\n  pos ?x \\<and> het ?x = 0 \\<Longrightarrow> gmean ?x = mean ?x\n  \\<gamma>_eq ?a =\n  (mean (fst ?a) = mean (snd ?a) \\<and> length (fst ?a) = length (snd ?a))\n  pos ?xs \\<Longrightarrow> ?xs \\<noteq> []\n  gmean z < gmean \\<alpha> \\<and>\n  \\<gamma>_eq (z, \\<alpha>) \\<and> het \\<alpha> = 0 \\<and> pos \\<alpha>", "have\n      \"mean z = mean \\<alpha>\" and\n      \"gmean \\<alpha> > gmean z\" and\n      \"gmean \\<alpha> = mean \\<alpha>\""], ["proof (prove)\nusing this:\n  pos ?x \\<and> het ?x = 0 \\<Longrightarrow> gmean ?x = mean ?x\n  \\<gamma>_eq ?a =\n  (mean (fst ?a) = mean (snd ?a) \\<and> length (fst ?a) = length (snd ?a))\n  pos ?xs \\<Longrightarrow> ?xs \\<noteq> []\n  gmean z < gmean \\<alpha> \\<and>\n  \\<gamma>_eq (z, \\<alpha>) \\<and> het \\<alpha> = 0 \\<and> pos \\<alpha>\n\ngoal (1 subgoal):\n 1. mean z = mean \\<alpha> &&&\n    gmean z < gmean \\<alpha> &&& gmean \\<alpha> = mean \\<alpha>", "by auto"], ["proof (state)\nthis:\n  mean z = mean \\<alpha>\n  gmean z < gmean \\<alpha>\n  gmean \\<alpha> = mean \\<alpha>\n\ngoal (1 subgoal):\n 1. het z \\<noteq> 0 \\<Longrightarrow> False", "hence \"gmean z < mean z\""], ["proof (prove)\nusing this:\n  mean z = mean \\<alpha>\n  gmean z < gmean \\<alpha>\n  gmean \\<alpha> = mean \\<alpha>\n\ngoal (1 subgoal):\n 1. gmean z < mean z", "by simp"], ["proof (state)\nthis:\n  gmean z < mean z\n\ngoal (1 subgoal):\n 1. het z \\<noteq> 0 \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  gmean z < mean z\n\ngoal (1 subgoal):\n 1. False", "using eq"], ["proof (prove)\nusing this:\n  gmean z < mean z\n  gmean z = mean z\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  het z = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary CauchysMeanTheorem_Less:\n  fixes z::\"real list\"\n  assumes \"pos z\" and \"het z > 0\"\n  shows \"gmean z < mean z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gmean z < mean z", "using \n    CauchysMeanTheorem[OF \\<open>pos z\\<close>] \n    CauchysMeanTheorem_Eq[OF \\<open>pos z\\<close>]\n    \\<open>het z > 0\\<close>"], ["proof (prove)\nusing this:\n  gmean z \\<le> mean z\n  (gmean z = mean z) = (het z = 0)\n  0 < het z\n\ngoal (1 subgoal):\n 1. gmean z < mean z", "by auto"], ["", "end"]]}