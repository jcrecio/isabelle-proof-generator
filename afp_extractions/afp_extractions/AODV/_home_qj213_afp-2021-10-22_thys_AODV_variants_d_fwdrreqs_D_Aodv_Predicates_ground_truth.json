{"file_name": "/home/qj213/afp-2021-10-22/thys/AODV/variants/d_fwdrreqs/D_Aodv_Predicates.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/AODV", "problem_names": ["lemma msg_sender_simps [simp]:\n  \"\\<And>hops rreqid dip dsn dsk oip osn sip handled.\n                          msg_sender (Rreq hops rreqid dip dsn dsk oip osn sip handled) = sip\"\n  \"\\<And>hops dip dsn oip sip. msg_sender (Rrep hops dip dsn oip sip) = sip\"\n  \"\\<And>dests sip.            msg_sender (Rerr dests sip) = sip\"\n  \"\\<And>d dip sip.            msg_sender (Pkt d dip sip) = sip\"", "lemma msg_zhops_simps [simp]:\n  \"\\<And>hops rreqid dip dsn dsk oip osn sip handled.\n           msg_zhops (Rreq hops rreqid dip dsn dsk oip osn sip handled) = (hops = 0 \\<longrightarrow> oip = sip)\"\n  \"\\<And>hops dip dsn oip sip. msg_zhops (Rrep hops dip dsn oip sip) = (hops = 0 \\<longrightarrow> dip = sip)\"\n  \"\\<And>dests sip.            msg_zhops (Rerr dests sip)        = True\"\n  \"\\<And>d dip.                msg_zhops (Newpkt d dip)          = True\"\n  \"\\<And>d dip sip.            msg_zhops (Pkt d dip sip)         = True\"", "lemma rreq_rrep_sn_simps [simp]:\n  \"\\<And>hops rreqid dip dsn dsk oip osn sip handled.\n           rreq_rrep_sn (Rreq hops rreqid dip dsn dsk oip osn sip handled) = (osn \\<ge> 1)\"\n  \"\\<And>hops dip dsn oip sip. rreq_rrep_sn (Rrep hops dip dsn oip sip) = (dsn \\<ge> 1)\"\n  \"\\<And>dests sip.            rreq_rrep_sn (Rerr dests sip) = True\"\n  \"\\<And>d dip.                rreq_rrep_sn (Newpkt d dip)   = True\"\n  \"\\<And>d dip sip.            rreq_rrep_sn (Pkt d dip sip)  = True\"", "lemma rreq_rrep_fresh [simp]:\n  \"\\<And>hops rreqid dip dsn dsk oip osn sip handled.\n           rreq_rrep_fresh crt (Rreq hops rreqid dip dsn dsk oip osn sip handled) =\n                               (sip \\<noteq> oip \\<longrightarrow> oip\\<in>kD(crt)\n                                            \\<and> (sqn crt oip > osn\n                                               \\<or> (sqn crt oip = osn\n                                                  \\<and> the (dhops crt oip) \\<le> hops\n                                                  \\<and> the (flag crt oip) = val)))\"\n  \"\\<And>hops dip dsn oip sip. rreq_rrep_fresh crt (Rrep hops dip dsn oip sip) =\n                               (sip \\<noteq> dip \\<longrightarrow> dip\\<in>kD(crt)\n                                              \\<and> sqn crt dip = dsn\n                                              \\<and> the (dhops crt dip) = hops\n                                              \\<and> the (flag crt dip) = val)\"\n  \"\\<And>dests sip.            rreq_rrep_fresh crt (Rerr dests sip) = True\"\n  \"\\<And>d dip.                rreq_rrep_fresh crt (Newpkt d dip)   = True\"\n  \"\\<And>d dip sip.            rreq_rrep_fresh crt (Pkt d dip sip)  = True\"", "lemma rerr_invalid [simp]:\n  \"\\<And>hops rreqid dip dsn dsk oip osn sip handled.\n                           rerr_invalid crt (Rreq hops rreqid dip dsn dsk oip osn sip handled) = True\"\n  \"\\<And>hops dip dsn oip sip. rerr_invalid crt (Rrep hops dip dsn oip sip) = True\"\n  \"\\<And>dests sip.            rerr_invalid crt (Rerr dests sip) = (\\<forall>rip\\<in>dom(dests).\n                                                 rip\\<in>iD(crt) \\<and> the (dests rip) = sqn crt rip)\"\n  \"\\<And>d dip.                rerr_invalid crt (Newpkt d dip)   = True\"\n  \"\\<And>d dip sip.            rerr_invalid crt (Pkt d dip sip)  = True\"", "lemma not_in_net_ips_fst_init_missing [simp]:\n  assumes \"i \\<notin> net_ips \\<sigma>\"\n    shows \"fst (initmissing (netgmap fst \\<sigma>)) i = aodv_init i\"", "lemma fst_initmissing_netgmap_pair_fst [simp]:\n  \"fst (initmissing (netgmap (\\<lambda>(p, q). (fst (id p), snd (id p), q)) s))\n                                               = fst (initmissing (netgmap fst s))\"", "lemma fst_initmissing_netgmap_default_aodv_init_netlift:\n  \"fst (initmissing (netgmap fst s)) = default aodv_init (netlift fst s)\""], "translations": [["", "lemma msg_sender_simps [simp]:\n  \"\\<And>hops rreqid dip dsn dsk oip osn sip handled.\n                          msg_sender (Rreq hops rreqid dip dsn dsk oip osn sip handled) = sip\"\n  \"\\<And>hops dip dsn oip sip. msg_sender (Rrep hops dip dsn oip sip) = sip\"\n  \"\\<And>dests sip.            msg_sender (Rerr dests sip) = sip\"\n  \"\\<And>d dip sip.            msg_sender (Pkt d dip sip) = sip\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<And>hops rreqid dip dsn dsk oip osn sip handled.\n         msg_sender (Rreq hops rreqid dip dsn dsk oip osn sip handled) =\n         sip) &&&\n     (\\<And>hops dip dsn oip sip.\n         msg_sender (Rrep hops dip dsn oip sip) = sip)) &&&\n    (\\<And>dests sip. msg_sender (Rerr dests sip) = sip) &&&\n    (\\<And>d dip sip. msg_sender (Pkt d dip sip) = sip)", "unfolding msg_sender_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<And>hops rreqid dip dsn dsk oip osn sip handled.\n         (case Rreq hops rreqid dip dsn dsk oip osn sip handled of\n          Rreq x xa xb xc xd xe xf ipc xg \\<Rightarrow> ipc\n          | Rrep x xa xb xc ipc \\<Rightarrow> ipc\n          | Rerr x ipc \\<Rightarrow> ipc | Pkt x xa ipc \\<Rightarrow> ipc) =\n         sip) &&&\n     (\\<And>hops dip dsn oip sip.\n         (case Rrep hops dip dsn oip sip of\n          Rreq x xa xb xc xd xe xf ipc xg \\<Rightarrow> ipc\n          | Rrep x xa xb xc ipc \\<Rightarrow> ipc\n          | Rerr x ipc \\<Rightarrow> ipc | Pkt x xa ipc \\<Rightarrow> ipc) =\n         sip)) &&&\n    (\\<And>dests sip.\n        (case Rerr dests sip of\n         Rreq x xa xb xc xd xe xf ipc xg \\<Rightarrow> ipc\n         | Rrep x xa xb xc ipc \\<Rightarrow> ipc\n         | Rerr x ipc \\<Rightarrow> ipc | Pkt x xa ipc \\<Rightarrow> ipc) =\n        sip) &&&\n    (\\<And>d dip sip.\n        (case Pkt d dip sip of\n         Rreq x xa xb xc xd xe xf ipc xg \\<Rightarrow> ipc\n         | Rrep x xa xb xc ipc \\<Rightarrow> ipc\n         | Rerr x ipc \\<Rightarrow> ipc | Pkt x xa ipc \\<Rightarrow> ipc) =\n        sip)", "by simp_all"], ["", "definition msg_zhops :: \"msg \\<Rightarrow> bool\"\nwhere \"msg_zhops m \\<equiv> case m of\n                                 Rreq hopsc _ dipc _ _ oipc _ sipc _ \\<Rightarrow> hopsc = 0 \\<longrightarrow> oipc = sipc\n                               | Rrep hopsc dipc _ _ sipc \\<Rightarrow> hopsc = 0 \\<longrightarrow> dipc = sipc\n                               | _ \\<Rightarrow> True\""], ["", "lemma msg_zhops_simps [simp]:\n  \"\\<And>hops rreqid dip dsn dsk oip osn sip handled.\n           msg_zhops (Rreq hops rreqid dip dsn dsk oip osn sip handled) = (hops = 0 \\<longrightarrow> oip = sip)\"\n  \"\\<And>hops dip dsn oip sip. msg_zhops (Rrep hops dip dsn oip sip) = (hops = 0 \\<longrightarrow> dip = sip)\"\n  \"\\<And>dests sip.            msg_zhops (Rerr dests sip)        = True\"\n  \"\\<And>d dip.                msg_zhops (Newpkt d dip)          = True\"\n  \"\\<And>d dip sip.            msg_zhops (Pkt d dip sip)         = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<And>hops rreqid dip dsn dsk oip osn sip handled.\n         msg_zhops (Rreq hops rreqid dip dsn dsk oip osn sip handled) =\n         (hops = 0 \\<longrightarrow> oip = sip)) &&&\n     (\\<And>hops dip dsn oip sip.\n         msg_zhops (Rrep hops dip dsn oip sip) =\n         (hops = 0 \\<longrightarrow> dip = sip))) &&&\n    (\\<And>dests sip. msg_zhops (Rerr dests sip) = True) &&&\n    (\\<And>d dip. msg_zhops (Newpkt d dip) = True) &&&\n    (\\<And>d dip sip. msg_zhops (Pkt d dip sip) = True)", "unfolding msg_zhops_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<And>hops rreqid dip dsn dsk oip osn sip handled.\n         (case Rreq hops rreqid dip dsn dsk oip osn sip handled of\n          Rreq hopsc x dipc xa xb oipc xc sipc xd \\<Rightarrow>\n            hopsc = 0 \\<longrightarrow> oipc = sipc\n          | Rrep hopsc dipc x xa sipc \\<Rightarrow>\n              hopsc = 0 \\<longrightarrow> dipc = sipc\n          | _ \\<Rightarrow> True) =\n         (hops = 0 \\<longrightarrow> oip = sip)) &&&\n     (\\<And>hops dip dsn oip sip.\n         (case Rrep hops dip dsn oip sip of\n          Rreq hopsc x dipc xa xb oipc xc sipc xd \\<Rightarrow>\n            hopsc = 0 \\<longrightarrow> oipc = sipc\n          | Rrep hopsc dipc x xa sipc \\<Rightarrow>\n              hopsc = 0 \\<longrightarrow> dipc = sipc\n          | _ \\<Rightarrow> True) =\n         (hops = 0 \\<longrightarrow> dip = sip))) &&&\n    (\\<And>dests sip.\n        (case Rerr dests sip of\n         Rreq hopsc x dipc xa xb oipc xc sipc xd \\<Rightarrow>\n           hopsc = 0 \\<longrightarrow> oipc = sipc\n         | Rrep hopsc dipc x xa sipc \\<Rightarrow>\n             hopsc = 0 \\<longrightarrow> dipc = sipc\n         | _ \\<Rightarrow> True) =\n        True) &&&\n    (\\<And>d dip.\n        (case Newpkt d dip of\n         Rreq hopsc x dipc xa xb oipc xc sipc xd \\<Rightarrow>\n           hopsc = 0 \\<longrightarrow> oipc = sipc\n         | Rrep hopsc dipc x xa sipc \\<Rightarrow>\n             hopsc = 0 \\<longrightarrow> dipc = sipc\n         | _ \\<Rightarrow> True) =\n        True) &&&\n    (\\<And>d dip sip.\n        (case Pkt d dip sip of\n         Rreq hopsc x dipc xa xb oipc xc sipc xd \\<Rightarrow>\n           hopsc = 0 \\<longrightarrow> oipc = sipc\n         | Rrep hopsc dipc x xa sipc \\<Rightarrow>\n             hopsc = 0 \\<longrightarrow> dipc = sipc\n         | _ \\<Rightarrow> True) =\n        True)", "by simp_all"], ["", "definition rreq_rrep_sn :: \"msg \\<Rightarrow> bool\"\nwhere \"rreq_rrep_sn m \\<equiv> case m of Rreq _ _ _ _ _ _ osnc _ _ \\<Rightarrow> osnc \\<ge> 1\n                                | Rrep _ _ dsnc _ _ \\<Rightarrow> dsnc \\<ge> 1\n                                | _ \\<Rightarrow> True\""], ["", "lemma rreq_rrep_sn_simps [simp]:\n  \"\\<And>hops rreqid dip dsn dsk oip osn sip handled.\n           rreq_rrep_sn (Rreq hops rreqid dip dsn dsk oip osn sip handled) = (osn \\<ge> 1)\"\n  \"\\<And>hops dip dsn oip sip. rreq_rrep_sn (Rrep hops dip dsn oip sip) = (dsn \\<ge> 1)\"\n  \"\\<And>dests sip.            rreq_rrep_sn (Rerr dests sip) = True\"\n  \"\\<And>d dip.                rreq_rrep_sn (Newpkt d dip)   = True\"\n  \"\\<And>d dip sip.            rreq_rrep_sn (Pkt d dip sip)  = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<And>hops rreqid dip dsn dsk oip osn sip handled.\n         rreq_rrep_sn (Rreq hops rreqid dip dsn dsk oip osn sip handled) =\n         (1 \\<le> osn)) &&&\n     (\\<And>hops dip dsn oip sip.\n         rreq_rrep_sn (Rrep hops dip dsn oip sip) = (1 \\<le> dsn))) &&&\n    (\\<And>dests sip. rreq_rrep_sn (Rerr dests sip) = True) &&&\n    (\\<And>d dip. rreq_rrep_sn (Newpkt d dip) = True) &&&\n    (\\<And>d dip sip. rreq_rrep_sn (Pkt d dip sip) = True)", "unfolding rreq_rrep_sn_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<And>hops rreqid dip dsn dsk oip osn sip handled.\n         (case Rreq hops rreqid dip dsn dsk oip osn sip handled of\n          Rreq x xa xb xc xd xe osnc xf xg \\<Rightarrow> 1 \\<le> osnc\n          | Rrep x xa dsnc xb xc \\<Rightarrow> 1 \\<le> dsnc\n          | _ \\<Rightarrow> True) =\n         (1 \\<le> osn)) &&&\n     (\\<And>hops dip dsn oip sip.\n         (case Rrep hops dip dsn oip sip of\n          Rreq x xa xb xc xd xe osnc xf xg \\<Rightarrow> 1 \\<le> osnc\n          | Rrep x xa dsnc xb xc \\<Rightarrow> 1 \\<le> dsnc\n          | _ \\<Rightarrow> True) =\n         (1 \\<le> dsn))) &&&\n    (\\<And>dests sip.\n        (case Rerr dests sip of\n         Rreq x xa xb xc xd xe osnc xf xg \\<Rightarrow> 1 \\<le> osnc\n         | Rrep x xa dsnc xb xc \\<Rightarrow> 1 \\<le> dsnc\n         | _ \\<Rightarrow> True) =\n        True) &&&\n    (\\<And>d dip.\n        (case Newpkt d dip of\n         Rreq x xa xb xc xd xe osnc xf xg \\<Rightarrow> 1 \\<le> osnc\n         | Rrep x xa dsnc xb xc \\<Rightarrow> 1 \\<le> dsnc\n         | _ \\<Rightarrow> True) =\n        True) &&&\n    (\\<And>d dip sip.\n        (case Pkt d dip sip of\n         Rreq x xa xb xc xd xe osnc xf xg \\<Rightarrow> 1 \\<le> osnc\n         | Rrep x xa dsnc xb xc \\<Rightarrow> 1 \\<le> dsnc\n         | _ \\<Rightarrow> True) =\n        True)", "by simp_all"], ["", "definition rreq_rrep_fresh :: \"rt \\<Rightarrow> msg \\<Rightarrow> bool\"\nwhere \"rreq_rrep_fresh crt m \\<equiv> case m of Rreq hopsc _ _ _ _ oipc osnc ipcc _ \\<Rightarrow> (ipcc \\<noteq> oipc \\<longrightarrow>\n                                                oipc\\<in>kD(crt) \\<and> (sqn crt oipc > osnc\n                                                                \\<or> (sqn crt oipc = osnc\n                                                                   \\<and> the (dhops crt oipc) \\<le> hopsc\n                                                                   \\<and> the (flag crt oipc) = val)))\n                                | Rrep hopsc dipc dsnc _ ipcc \\<Rightarrow> (ipcc \\<noteq> dipc \\<longrightarrow> \n                                                                    dipc\\<in>kD(crt)\n                                                                  \\<and> sqn crt dipc = dsnc\n                                                                  \\<and> the (dhops crt dipc) = hopsc\n                                                                  \\<and> the (flag crt dipc) = val)\n                                | _ \\<Rightarrow> True\""], ["", "lemma rreq_rrep_fresh [simp]:\n  \"\\<And>hops rreqid dip dsn dsk oip osn sip handled.\n           rreq_rrep_fresh crt (Rreq hops rreqid dip dsn dsk oip osn sip handled) =\n                               (sip \\<noteq> oip \\<longrightarrow> oip\\<in>kD(crt)\n                                            \\<and> (sqn crt oip > osn\n                                               \\<or> (sqn crt oip = osn\n                                                  \\<and> the (dhops crt oip) \\<le> hops\n                                                  \\<and> the (flag crt oip) = val)))\"\n  \"\\<And>hops dip dsn oip sip. rreq_rrep_fresh crt (Rrep hops dip dsn oip sip) =\n                               (sip \\<noteq> dip \\<longrightarrow> dip\\<in>kD(crt)\n                                              \\<and> sqn crt dip = dsn\n                                              \\<and> the (dhops crt dip) = hops\n                                              \\<and> the (flag crt dip) = val)\"\n  \"\\<And>dests sip.            rreq_rrep_fresh crt (Rerr dests sip) = True\"\n  \"\\<And>d dip.                rreq_rrep_fresh crt (Newpkt d dip)   = True\"\n  \"\\<And>d dip sip.            rreq_rrep_fresh crt (Pkt d dip sip)  = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<And>hops rreqid dip dsn dsk oip osn sip handled.\n         rreq_rrep_fresh crt\n          (Rreq hops rreqid dip dsn dsk oip osn sip handled) =\n         (sip \\<noteq> oip \\<longrightarrow>\n          oip \\<in> kD crt \\<and>\n          (osn < sqn crt oip \\<or>\n           sqn crt oip = osn \\<and>\n           the (dhops crt oip) \\<le> hops \\<and>\n           the (flag crt oip) = val))) &&&\n     (\\<And>hops dip dsn oip sip.\n         rreq_rrep_fresh crt (Rrep hops dip dsn oip sip) =\n         (sip \\<noteq> dip \\<longrightarrow>\n          dip \\<in> kD crt \\<and>\n          sqn crt dip = dsn \\<and>\n          the (dhops crt dip) = hops \\<and> the (flag crt dip) = val))) &&&\n    (\\<And>dests sip. rreq_rrep_fresh crt (Rerr dests sip) = True) &&&\n    (\\<And>d dip. rreq_rrep_fresh crt (Newpkt d dip) = True) &&&\n    (\\<And>d dip sip. rreq_rrep_fresh crt (Pkt d dip sip) = True)", "unfolding rreq_rrep_fresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<And>hops rreqid dip dsn dsk oip osn sip handled.\n         (case Rreq hops rreqid dip dsn dsk oip osn sip handled of\n          Rreq hopsc x xa xb xc oipc osnc ipcc xd \\<Rightarrow>\n            ipcc \\<noteq> oipc \\<longrightarrow>\n            oipc \\<in> kD crt \\<and>\n            (osnc < sqn crt oipc \\<or>\n             sqn crt oipc = osnc \\<and>\n             the (dhops crt oipc) \\<le> hopsc \\<and>\n             the (flag crt oipc) = val)\n          | Rrep hopsc dipc dsnc x ipcc \\<Rightarrow>\n              ipcc \\<noteq> dipc \\<longrightarrow>\n              dipc \\<in> kD crt \\<and>\n              sqn crt dipc = dsnc \\<and>\n              the (dhops crt dipc) = hopsc \\<and> the (flag crt dipc) = val\n          | _ \\<Rightarrow> True) =\n         (sip \\<noteq> oip \\<longrightarrow>\n          oip \\<in> kD crt \\<and>\n          (osn < sqn crt oip \\<or>\n           sqn crt oip = osn \\<and>\n           the (dhops crt oip) \\<le> hops \\<and>\n           the (flag crt oip) = val))) &&&\n     (\\<And>hops dip dsn oip sip.\n         (case Rrep hops dip dsn oip sip of\n          Rreq hopsc x xa xb xc oipc osnc ipcc xd \\<Rightarrow>\n            ipcc \\<noteq> oipc \\<longrightarrow>\n            oipc \\<in> kD crt \\<and>\n            (osnc < sqn crt oipc \\<or>\n             sqn crt oipc = osnc \\<and>\n             the (dhops crt oipc) \\<le> hopsc \\<and>\n             the (flag crt oipc) = val)\n          | Rrep hopsc dipc dsnc x ipcc \\<Rightarrow>\n              ipcc \\<noteq> dipc \\<longrightarrow>\n              dipc \\<in> kD crt \\<and>\n              sqn crt dipc = dsnc \\<and>\n              the (dhops crt dipc) = hopsc \\<and> the (flag crt dipc) = val\n          | _ \\<Rightarrow> True) =\n         (sip \\<noteq> dip \\<longrightarrow>\n          dip \\<in> kD crt \\<and>\n          sqn crt dip = dsn \\<and>\n          the (dhops crt dip) = hops \\<and> the (flag crt dip) = val))) &&&\n    (\\<And>dests sip.\n        (case Rerr dests sip of\n         Rreq hopsc x xa xb xc oipc osnc ipcc xd \\<Rightarrow>\n           ipcc \\<noteq> oipc \\<longrightarrow>\n           oipc \\<in> kD crt \\<and>\n           (osnc < sqn crt oipc \\<or>\n            sqn crt oipc = osnc \\<and>\n            the (dhops crt oipc) \\<le> hopsc \\<and>\n            the (flag crt oipc) = val)\n         | Rrep hopsc dipc dsnc x ipcc \\<Rightarrow>\n             ipcc \\<noteq> dipc \\<longrightarrow>\n             dipc \\<in> kD crt \\<and>\n             sqn crt dipc = dsnc \\<and>\n             the (dhops crt dipc) = hopsc \\<and> the (flag crt dipc) = val\n         | _ \\<Rightarrow> True) =\n        True) &&&\n    (\\<And>d dip.\n        (case Newpkt d dip of\n         Rreq hopsc x xa xb xc oipc osnc ipcc xd \\<Rightarrow>\n           ipcc \\<noteq> oipc \\<longrightarrow>\n           oipc \\<in> kD crt \\<and>\n           (osnc < sqn crt oipc \\<or>\n            sqn crt oipc = osnc \\<and>\n            the (dhops crt oipc) \\<le> hopsc \\<and>\n            the (flag crt oipc) = val)\n         | Rrep hopsc dipc dsnc x ipcc \\<Rightarrow>\n             ipcc \\<noteq> dipc \\<longrightarrow>\n             dipc \\<in> kD crt \\<and>\n             sqn crt dipc = dsnc \\<and>\n             the (dhops crt dipc) = hopsc \\<and> the (flag crt dipc) = val\n         | _ \\<Rightarrow> True) =\n        True) &&&\n    (\\<And>d dip sip.\n        (case Pkt d dip sip of\n         Rreq hopsc x xa xb xc oipc osnc ipcc xd \\<Rightarrow>\n           ipcc \\<noteq> oipc \\<longrightarrow>\n           oipc \\<in> kD crt \\<and>\n           (osnc < sqn crt oipc \\<or>\n            sqn crt oipc = osnc \\<and>\n            the (dhops crt oipc) \\<le> hopsc \\<and>\n            the (flag crt oipc) = val)\n         | Rrep hopsc dipc dsnc x ipcc \\<Rightarrow>\n             ipcc \\<noteq> dipc \\<longrightarrow>\n             dipc \\<in> kD crt \\<and>\n             sqn crt dipc = dsnc \\<and>\n             the (dhops crt dipc) = hopsc \\<and> the (flag crt dipc) = val\n         | _ \\<Rightarrow> True) =\n        True)", "by simp_all"], ["", "definition rerr_invalid :: \"rt \\<Rightarrow> msg \\<Rightarrow> bool\"\nwhere \"rerr_invalid crt m \\<equiv> case m of Rerr destsc _ \\<Rightarrow> (\\<forall>ripc\\<in>dom(destsc).\n                                            (ripc\\<in>iD(crt) \\<and> the (destsc ripc) = sqn crt ripc))\n                                | _ \\<Rightarrow> True\""], ["", "lemma rerr_invalid [simp]:\n  \"\\<And>hops rreqid dip dsn dsk oip osn sip handled.\n                           rerr_invalid crt (Rreq hops rreqid dip dsn dsk oip osn sip handled) = True\"\n  \"\\<And>hops dip dsn oip sip. rerr_invalid crt (Rrep hops dip dsn oip sip) = True\"\n  \"\\<And>dests sip.            rerr_invalid crt (Rerr dests sip) = (\\<forall>rip\\<in>dom(dests).\n                                                 rip\\<in>iD(crt) \\<and> the (dests rip) = sqn crt rip)\"\n  \"\\<And>d dip.                rerr_invalid crt (Newpkt d dip)   = True\"\n  \"\\<And>d dip sip.            rerr_invalid crt (Pkt d dip sip)  = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<And>hops rreqid dip dsn dsk oip osn sip handled.\n         rerr_invalid crt\n          (Rreq hops rreqid dip dsn dsk oip osn sip handled) =\n         True) &&&\n     (\\<And>hops dip dsn oip sip.\n         rerr_invalid crt (Rrep hops dip dsn oip sip) = True)) &&&\n    (\\<And>dests sip.\n        rerr_invalid crt (Rerr dests sip) =\n        (\\<forall>rip\\<in>dom dests.\n            rip \\<in> iD crt \\<and> the (dests rip) = sqn crt rip)) &&&\n    (\\<And>d dip. rerr_invalid crt (Newpkt d dip) = True) &&&\n    (\\<And>d dip sip. rerr_invalid crt (Pkt d dip sip) = True)", "unfolding rerr_invalid_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<And>hops rreqid dip dsn dsk oip osn sip handled.\n         (case Rreq hops rreqid dip dsn dsk oip osn sip handled of\n          Rerr destsc x \\<Rightarrow>\n            \\<forall>ripc\\<in>dom destsc.\n               ripc \\<in> iD crt \\<and> the (destsc ripc) = sqn crt ripc\n          | _ \\<Rightarrow> True) =\n         True) &&&\n     (\\<And>hops dip dsn oip sip.\n         (case Rrep hops dip dsn oip sip of\n          Rerr destsc x \\<Rightarrow>\n            \\<forall>ripc\\<in>dom destsc.\n               ripc \\<in> iD crt \\<and> the (destsc ripc) = sqn crt ripc\n          | _ \\<Rightarrow> True) =\n         True)) &&&\n    (\\<And>dests sip.\n        (case Rerr dests sip of\n         Rerr destsc x \\<Rightarrow>\n           \\<forall>ripc\\<in>dom destsc.\n              ripc \\<in> iD crt \\<and> the (destsc ripc) = sqn crt ripc\n         | _ \\<Rightarrow> True) =\n        (\\<forall>rip\\<in>dom dests.\n            rip \\<in> iD crt \\<and> the (dests rip) = sqn crt rip)) &&&\n    (\\<And>d dip.\n        (case Newpkt d dip of\n         Rerr destsc x \\<Rightarrow>\n           \\<forall>ripc\\<in>dom destsc.\n              ripc \\<in> iD crt \\<and> the (destsc ripc) = sqn crt ripc\n         | _ \\<Rightarrow> True) =\n        True) &&&\n    (\\<And>d dip sip.\n        (case Pkt d dip sip of\n         Rerr destsc x \\<Rightarrow>\n           \\<forall>ripc\\<in>dom destsc.\n              ripc \\<in> iD crt \\<and> the (destsc ripc) = sqn crt ripc\n         | _ \\<Rightarrow> True) =\n        True)", "by simp_all"], ["", "definition\n  initmissing :: \"(nat \\<Rightarrow> state option) \\<times> 'a \\<Rightarrow> (nat \\<Rightarrow> state) \\<times> 'a\"\nwhere\n  \"initmissing \\<sigma> = (\\<lambda>i. case (fst \\<sigma>) i of None \\<Rightarrow> aodv_init i | Some s \\<Rightarrow> s, snd \\<sigma>)\""], ["", "lemma not_in_net_ips_fst_init_missing [simp]:\n  assumes \"i \\<notin> net_ips \\<sigma>\"\n    shows \"fst (initmissing (netgmap fst \\<sigma>)) i = aodv_init i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (initmissing (netgmap fst \\<sigma>)) i = aodv_init i", "using assms"], ["proof (prove)\nusing this:\n  i \\<notin> net_ips \\<sigma>\n\ngoal (1 subgoal):\n 1. fst (initmissing (netgmap fst \\<sigma>)) i = aodv_init i", "unfolding initmissing_def"], ["proof (prove)\nusing this:\n  i \\<notin> net_ips \\<sigma>\n\ngoal (1 subgoal):\n 1. fst (\\<lambda>i.\n            case fst (netgmap fst \\<sigma>) i of\n            None \\<Rightarrow> aodv_init i | Some s \\<Rightarrow> s,\n         snd (netgmap fst \\<sigma>))\n     i =\n    aodv_init i", "by simp"], ["", "lemma fst_initmissing_netgmap_pair_fst [simp]:\n  \"fst (initmissing (netgmap (\\<lambda>(p, q). (fst (id p), snd (id p), q)) s))\n                                               = fst (initmissing (netgmap fst s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (initmissing\n          (netgmap (\\<lambda>(p, q). (fst (id p), snd (id p), q)) s)) =\n    fst (initmissing (netgmap fst s))", "unfolding initmissing_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (\\<lambda>i.\n            case fst (netgmap (\\<lambda>(p, q). (fst (id p), snd (id p), q))\n                       s)\n                  i of\n            None \\<Rightarrow> aodv_init i | Some s \\<Rightarrow> s,\n         snd (netgmap (\\<lambda>(p, q). (fst (id p), snd (id p), q)) s)) =\n    fst (\\<lambda>i.\n            case fst (netgmap fst s) i of None \\<Rightarrow> aodv_init i\n            | Some s \\<Rightarrow> s,\n         snd (netgmap fst s))", "by auto"], ["", "text \\<open>We introduce a streamlined alternative to @{term initmissing} with @{term netgmap}\n        to simplify invariant statements and thus facilitate their comprehension and\n        presentation.\\<close>"], ["", "lemma fst_initmissing_netgmap_default_aodv_init_netlift:\n  \"fst (initmissing (netgmap fst s)) = default aodv_init (netlift fst s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (initmissing (netgmap fst s)) =\n    Lib.default aodv_init (netlift fst s)", "unfolding initmissing_def default_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (\\<lambda>i.\n            case fst (netgmap fst s) i of None \\<Rightarrow> aodv_init i\n            | Some s \\<Rightarrow> s,\n         snd (netgmap fst s)) =\n    (\\<lambda>i.\n        case netlift fst s i of None \\<Rightarrow> aodv_init i\n        | Some s \\<Rightarrow> s)", "by (simp add: fst_netgmap_netlift del: One_nat_def)"], ["", "definition\n  netglobal :: \"((nat \\<Rightarrow> state) \\<Rightarrow> bool) \\<Rightarrow> ((state \\<times> 'b) \\<times> 'c) net_state \\<Rightarrow> bool\"\nwhere\n  \"netglobal P \\<equiv> (\\<lambda>s. P (default aodv_init (netlift fst s)))\""], ["", "end"]]}